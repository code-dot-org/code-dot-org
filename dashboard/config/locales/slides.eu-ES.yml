"eu":
  slides:
    maze_intro:
      1:
        image: notes/hoc1_1.jpg
        text: Ongi etorri zure lehen kode ordura! Goazen bada zure lehen programazio
          esperientzian sakontzera.
      2:
        image: notes/hoc1_2.jpg
        text: Blockly erabiliko dugu, blokeak arrastatu eta askatuz kodea idazten
          duen programazio lengoaia bisuala.
      3:
        image: notes/hoc1_3.jpg
        text: Normalean, programatu tekleatuz egiten da, baina Blockly bisuala da.
          Bloke bakoitzak "benetako" kode lerro bat adierazten du.
      4:
        image: notes/hoc1_4.jpg
        text: Konputazio zientzien oinarriak ikasiko dituzu. Kontzeptu hauek appak
          egiteko edota Mars rover-a kontrolatzeko erabiltzen dira.
      5:
        image: notes/hoc1_5.jpg
        text: Programa bat, zure ordenagailuak jarraituko duen agindu multzo bat da.
      6:
        image: notes/hoc1_6.jpg
        text: Zure lehenengo programaren helburua, Angry Bird labirintoan zehar gidatzea
          da txerri berdea harrapatzeko.
      7:
        image: notes/hoc1_7.jpg
        text: Ezkerreko aldea zure programa exekutatuko den labirintoa da. Jarraibideak
          labirintoaren azpian daude.
      8:
        image: notes/hoc1_8.jpg
        text: Erdiko tresna kutxak Angry Bird-entzako aginduak ditu. Kodea eraikitzeko
          erabiliko dituzu.
      9:
        image: notes/hoc1_9.jpg
        text: Eskuinaldean lan eremua dago. Bertara tresna kutxako blokeak arrastatuko
          dituzu zure programa eraikitzeko. Bloke bat ezabatzeko, iskinean dagoen
          zakarrontzira arrastatu.
      10:
        image: notes/hoc1_10.jpg
        text: Bloke bakoitza instrukzio bat da. "aurrera mugitu" blokea zure lan eremura
          mugitzen baduzu eta "Hasi" sakatzen baduzu, gure txoria espazio bat mugituko
          da labirintoan.
      11:
        image: notes/hoc1_11.jpg
        text: Ekintza bat baino gehiago egiteko, bloke asko arrastatu ditzakezu zure
          lan eremura eta denak batera elkartu. Txoriak aginduak egikarituko ditu
          goitik beherako ordenan.
      12:
        image: notes/hoc1_12.jpg
        text: Zure kodea konpondu eta beste saiakera bat egin nahi baduzu, "Berrabiarazi"
          botoia sakatu.
      13:
        image: notes/hoc1_13.jpg
        text: Goazen txerri horiek harrapatzera!
    artist_intro:
      1:
        image: notes/stage5_1.jpg
        text: Kaixo, JR naiz! Edozein kotxe lasterketak informatikariak behar ditu
          irabazteko. Kotxeen datuak aztertzen dituzte azkarragoak egiteko.
      2:
        image: notes/stage5_2.jpg
        text: Ariketa hauetan, pasatzen den lekutik lerro bat marraztuko duen artista
          izango zara.
      3:
        image: notes/stage5_3.jpg
        text: Bloke honek "mugitu aurrera 100 pixel" esaten du. "Pixelak" zure pantaila
          osatzen duten puntu txikiak dira.
      4:
        image: notes/stage5_4.jpg
        text: Bloke honek "biratu 90 gradu eskuinerantz" esaten du. Honek, zure artista
          "biratu" blokeak dioen gradu kopurua bira araziko du, labirintoko ariketetan
          gertatzen zen bezalaxe.
      5:
        image: notes/stage5_5.jpg
        text: Bloketako gezietan klikatu ezkero, gure artista zenbateko kopuruan aurrera
          mugitzen edo biratzen duen aldatu ahal izango duzu. Bloke berri hauekin
          trebatzeko jolastu beraiekin.
    farmer_intro:
      1:
        image: notes/stage9_1.jpg
        text: Kaixo, Paola naiz! Ariketa hauetan, zelaia guztiz berdindu behar duen
          baserritarra izango zara.
      2:
        image: notes/stage9_2.jpg
        text: Menditxoak kentzen eta zuloak betetzen lagundu behar diozu.
      3:
        image: notes/stage9_3.jpg
        text: Bloke berriek menditxo batetik palakada bat lur ezabatu eta zulo bat
          lur palakada batez beteko dute.
      4:
        image: notes/stage9_4.jpg
        text: Menditxoak eta zuloak tamaina ezberdinetakoak dira, beraz baserritarrari
          zenbat palakada erabili behar dituen esan beharko diozu.
    flappy_intro:
      1:
        image: notes/flappy01.jpg
        text: Kaixo, Katie naiz! Informatikaren gauzarik interesgarrienetakoa, sortzen
          ditugun programak elkarreragileak izan daitezkeela da.
      2:
        image: notes/flappy02.jpg
        text: Ordenagailu edo telefono batean norbaitek klikatu, pantaila ukitu edo
          tekleatzen duen unean, honek GERTAERA bat sortzen du, eta badago kode bat
          erabakitzen duena zer egin GERTAERA bat jazotzen denean.
      3:
        image: notes/flappy03.jpg
        text: 'Adibidez, GERTAERA-KONTROLATZAILE bat, "Sagua klikatzean, jo soinu
          bat" izan daiteke '
      4:
        image: notes/flappy04.jpg
        text: Noizbait entzun duzu FlappyBird jokoari buruz? Gertaera kontrolatzaileak
          erabiliz, gure FlappyBird bertsio propioa programatzen ikasiko dugu!
      5:
        image: notes/flappy05.jpg
        text: Kodea idaztea, blokeak arrastatu eta askatuz egingo dugu, bloke hauetako
          bakoitza, ordenagailuak ulertuko dituen agindu ezberdinak ordezkatzen du.
          Azken finean, bloke hauetako bakoitzak, programa kode lerroak dira.
      6:
        image: notes/flappy06.jpg
        text: 'Lan eremuan, aurrez beteta dauden zenbait bloke berde aurkituko dituzu,
          hauek "gertaera kontrolatzaileak" dira '
      7:
        image: notes/flappy07.jpg
        text: Sagua klikatzean txoriak HEGALDI bat egitea nahi baduzu, "HEGALDI" blokea
          gertaera kudeatzailea egokiari elkartuz egin dezakezu, horrela, sagua klikatzen
          duzun bakoitzean txoriak hegoak eragingo ditu.
      8:
        image: notes/flappy08.jpg
        text: Atal honetako ariketa bakoitzean, bloke berde itxura duten gertaera
          mota berriak ikusiko ditugu, zuk erabaki beharko duzu zein bloke diren egokiak
          gertaera horiei erantzuteko.
      9:
        image: notes/flappy09.jpg
        text: Honelako gezitxo bat ikusten duzunean, horrek esan nahi du aukerak aldatu
          ditzakezula - flappyk lurra jotzean egiten duen soinua adibidez.
      10:
        image: notes/flappy10.jpg
        text: Azken ariketa bezala, zure gustuko jokoa sortu eta zure lagunekin partekatu
          ahal izango duzu. Ondo pasa!
    loop_times:
      1:
        image: notes/hoc2_1.jpg
        text: Kaixo, Mark naiz! Ikas dezagun begiztei buruz. Begiztek, edozein ekintza
          multzo, behin eta berriro errepikatzeko balio dute, bai milaka edo baita
          milioika aldiz ere.
      2:
        image: notes/hoc2_2.jpg
        text: Ariketa honetan, txoria 5 aldiz aurrera mugiarazi nahi dugu txerriarengana
          iristeko.
      3:
        image: notes/hoc2_3.jpg
        text: Gure lana errazteko, "errepikatu" bloke berria erabili dezakegu.
      4:
        image: notes/hoc2_4.jpg
        text: 5 "mugitu aurrera" bloke arrastatu beharrean...
      5:
        image: notes/hoc2_5.jpg
        text: '"aurrera mugitu" blokea "errepikatu" blokearen barruan jarri dezakegu,
          eta blokean, zenbakiz adierazi zenbat aldiz errepikatu nahi dugun.'
      6:
        image: notes/hoc2_6.jpg
        text: 'Hau garrantzitsua da: "errepikatu" bloke baten barruan agindu bat baino
          gehiago jarri ditzakezu.'
      7:
        image: notes/hoc2_7.jpg
        text: Ondo pasa "errepikatu" bloke berria erabiliz!
    loop_until:
      1:
        image: notes/hoc3_1.jpg
        text: Kaixo, Chris naiz. Miami Heat taldean jokatu aurretik, informatika ikasi
          nuen Georgia Tech unibertsitatean. Probatu dezagun "errepikatu arte" bloke
          berria.
      2:
        image: notes/hoc3_2.jpg
        text: Eta, txoria txerriarenganaino iristeko zenbat mugitu behar duen jakingo
          ez bagenu?
      3:
        image: notes/hoc3_3.jpg
        text: '"errepikatu harik eta" bloke baten barruan "mugitu aurrera" bloke bat
          sartzen badugu, txoria aurrera mugituko da txerriarenganaino iritsi ARTE
          (edo horma baten kontra jo arte).'
      4:
        image: notes/hoc3_4.jpg
        text: 'Hau garrantzitsua da: "errepikatu harik eta" blokearen barruan bloke
          asko sar ditzakegu, eta sartutako errepikatuko dira.'
    if:
      1:
        image: notes/hoc4_1.jpg
        text: 'Kaixo, Bill naiz! Ikas dezagun oinarrizko kontzeptu bat: "baldin" aginduak.
          Horiei esker hartzen dituzte konputagailuek erabakiak.'
      2:
        image: notes/hoc4_2.jpg
        text: Zuk zeuk egunero erabiltzen dituzu "baldin" aginduak. Goizero kalera
          irten baino lehen, zera esaten duzu BALDIN kanpoan euria badago, xira jantzi
          beharko dut.
      3:
        image: notes/hoc4_3.jpg
        text: Zonbiari agindu diezaiokegu begiratzea ea ezker alden bidea dagoen,
          eta ezkerrerako bidea topatzen BALDIN badu, noranzko horretara biratzeko
          esan diezaiokegu.
      4:
        image: notes/hoc4_4.jpg
        text: Hau egiteko kodea idazteko, "baldin" blokea arrastatuko dugu eta haren
          barruan "biratu ezkerrera" bloke bat jarri.
      5:
        image: notes/hoc4_5.jpg
        text: Orain, horren gainean "mugitu aurrera" bloke bat jartzen badugu, eta
          guztiaren inguruan "errepikatu" bloke bat, zonbia mugitzen den bakoitzean
          begiratuko du ea ezkerretara bidea dagoen eta biratuko du. "Errepikatu"
          agindua funtsezkoa da urrats bakoitzean biratu daitekeen begiratzeko.
      6:
        image: notes/hoc4_6.jpg
        text: '"Baldin" aginduak oso garrantzitsuak dira programazioan. Nire lehenengo
          programetako bat "hiru lerroan" jolasa izan zen, eta bazegoen "baldin" agindu
          bat, hau esaten zuena: BALDIN beste jokalaria irabazteko zorian dago, kokatu
          nire pieza besteak ez irabazteko tokian.'
      7:
        image: notes/hoc4_7.jpg
        text: Ongi pasa "baldin" blokea erabiltzen!
    if_else:
      1:
        image: notes/hoc5_1.jpg
        text: Kaixo, Saloni naiz. Programazioa erabiltzen dut arazoei soluzioak bilatzeko,
          osasungintzan eta medikuntzan. Ikas dezagun "baldin bestela" blokea. "baldin"
          blokea bezalakoa da, baina atal gehigarri bat dauka bukaeran, "bestela"
          atala.
      2:
        image: notes/hoc5_2.jpg
        text: '"Mugitu aurrera" bloke bat jartzen badut "egin" dioen tokian eta "biratu
          ezkerrera" bloke bat "bestela" dioen tokian, horrek esan nahi du zonbiak
          bi aukera izango dituela mugitzeko. BALDIN bidea libre badago aurrera joateko,
          orduan zonbia aurrera mugituko da, BESTELA (hau da, aurrera joateko bidea
          ez badago libre) zonbiak ezkerrera biratuko du.'
      3:
        image: notes/hoc5_3.jpg
        text: '"Baldin" blokearekin bezala, "baldin bestela" blokeak ere jar ditzakegu
          "errepikatu" bloke baten barruan; horrela, zonbia ez da geldituko eta "baldin
          bestela" blokeak detektatuko du norantz mugitu daitekeen.'
      4:
        image: notes/hoc5_4.jpg
        text: Orain eraman ditzagun zonbi horiek haien tokira!
    if_else_scrat:
      1:
        image: notes/saloni_ifelse_scrat1.jpg
        text: Baldin-bestela agindu bat bi aukeren arteko erabaki bat da. Ikus dezagun
          nola erabil dezakegun baldin-bestela agindua gure adiskide Scrat urtxintxarekin.
      2:
        image: notes/saloni_ifelse_scrat2.jpg
        text: Bloke hau "baldin" blokearen antzekoa da, baina honek badu bigarren
          zati bat "bestela" dioena. "mugitu aurrera" bloke bat jartzen badut "egin"-en
          ondoren, eta "biratu ezkerrera" bloke bat "bestela"-ren ondoren, horrek
          zera esan nahi du, Scrat urtxintxa aurrera mugituko da aurrean bide irekia
          baldin badu; bestela, aurrean oztoporen bat baldin badu, Scrat ezkerrera
          biratuko da.
      3:
        image: notes/saloni_ifelse_scrat3.jpg
        text: Erabaki bat hartu eta erabaki horretan oinarrituz bi ekintzetako bat
          aukeratzean datza. Eta, "baldin" blokeekin gertatzen zen bezala, "baldin-bestela"
          blokeak ere jar daitezke "errepikatu" bloke baten barnean.
      4:
        image: notes/saloni_ifelse_scrat4.jpg
        text: Orain lagun diezaiogun Scrat urtxintxari ezkurra lortzen!
    function:
      1:
        image: notes/stage13_1.jpg
        text: 'Kaixo! Brina naiz, ingeniaria Instagram enpresan. Funtzio bat hauxe
          da: behin eta berriro erabili nahi dituzun kode lerro batzuen sekuentzia
          bat, eta kode lerro horiek behin eta berriro idatzi beharrean, bloke berri
          batean bildu ditzakezu eta, aurrerago behar duzunean, bloke hori erabili.'
      2:
        image: notes/stage13_2.jpg
        text: Orain, funtzioak nola definitzen diren ikasiko dugu. Funtzioen definizioek
          izartxo bat dute izkinan. Funtzioaren izena lerroaren goiko aldean idazten
          da.
      3:
        image: notes/stage13_3.jpg
        text: Definizioaren barruan dauden blokeek adierazten digute zer egiten duen
          funtzioak. Adibidez, funtzio honen definizioaren izena "bete 5" da eta haren
          barruan "errepikatu" bloke bat eta "bete" bloke bat daude.
      4:
        image: notes/stage13_4.jpg
        text: Definizioa lan eremuan dago, baina gure baserritarrak ez du funtzioa
          exekutatuko, "bete 5" funtzio-blokea funtzioen kategoriatik arrastatzen
          ez dugun bitartean.
      5:
        image: notes/stage13_5.jpg
        text: 'Egin dezagun jolas funtzioekin! '
    loop_while:
      1:
        image: notes/stage9_5.jpg
        text: 'Kaixo! Makinde naiz. Ikas dezagun "bitartean blokea." '
      2:
        image: notes/stage9_6.jpg
        text: '"Bitartean blokea"k barruan jartzen duzuna egingo du goiko adierazpena
          EGIA den BITARTEAN.'
      3:
        image: notes/stage9_7.jpg
        text: Adibidez, baserritarra menditxo baten gainean baldin badago, palakada
          bat ateratzen jarraituko du bere azpian menditxorik geratzen den BITARTEAN.
    loop_for:
      1:
        image: notes/stage11_1.jpg
        text: Kaixo! Trina naiz eta Pixar enpresan egiten dut lan. Film askotan egin
          dut lan, Shrek barne.
      2:
        image: notes/stage11_2.jpg
        text: Hau da gure "kontagailu" begizta berria. Behin eta berriro beteko ditu
          aginduak, baina begizta bakoitzean aldaketa txikiak ere sartu ditzake agindu
          horietan.
      3:
        image: notes/stage11_3.jpg
        text: Adibide honetan, gure "kontagailu" begiztak dio "kontatu kontagailuarekin
          50etik 90era 10naka" eta haren barruan gure "marraztu karratu bat" blokea
          dago. Arrastatu "kontagailu" blokea "Aldagaiak" ataletik "luzera" dioen
          lekura.
      4:
        image: notes/stage11_4.jpg
        text: Honek esan nahi du gure artistak 50 pixeleko luzerako aldeak dituen
          lauki bat marraztuko duela, gero 10 gehitu eta 60 pixeleko aldeko laukia
          marraztuko du. Gero jarraituko du laukiak marrazten 10naka gehituz, 90koa
          lortu arte. Horrela 50, 60, 70, 80 eta 90ko laukiak lortuko ditugu.
    parameters:
      1:
        image: notes/stage15_1.jpg
        text: Kaixo, Janete naiz eta Zynga enpresako ingeniaria naiz.
      2:
        image: notes/stage15_2.jpg
        text: Eta luzera desberdineko aldeak dituzten triangelu mordo bat marraztu
          nahi badugu?
      3:
        image: notes/stage15_3.jpg
        text: Kode hori guztia eskuz idatz genezake, edo bestela parametrodun funtzio
          bat erabil dezakegu.
      4:
        image: notes/stage15_4.jpg
        text: Hau egiteko, klikatu "marraztu triangelu bat" funtzioaren izar urdinean.
          Gero arrastatu "sarrera izena" "sarrera" blokera.
      5:
        image: notes/stage15_5.jpg
        text: '"x" dioen lekuan "luzera" idatzi eta "Enter" sakatzen baduzu, zure
          funtzioarentzako, luzera parametro bat sortuko duzu.'
      6:
        image: notes/stage15_6.jpg
        text: Klik egin izarraren gainean. Orain, aldagaien kategorian egin klik eta
          arrastatu "luzera" blokeak zuri funtzioaren definizioko "aurrera mugitu"
          blokera. Eta kendu zenbaki bloke zaharra.
      7:
        image: notes/stage15_7.jpg
        text: Zure funtzioa parametroekin probatzeko "funtzioak" kategoriako eta bertaratu
          ezazu "triangelua luzerarekin irudikatu" funtzioa.
      8:
        image: notes/stage15_8.jpg
        text: Orain matematikako blokea erabili dezakezu zenbaki desberdinak sartuz
          gero tamaina desberdineko triangeluak marrazteko.
    hoc_wrapup:
      1:
        image: notes/hoc6_1.jpg
        text: Zorionak! Ebatzi duzun azken puzlearekin, edozein erroboti labirinto
          batean zehar bidea aurkitzeko kodea idatzi duzu. Errobot hori edozer izan
          daiteke, txori bat, zonbi bat, espazioko gailua... Baita auto-gidatutako
          autoa ere!
      2:
        image: notes/hoc6_2.jpg
        text: Erabili dituzun oinarrizko kontzeptuak ezagutzen dugun edozein programaren
          edo app-ren bihotza dira. "Errepikatu" begiztak, "errepikatu arte", "baldin"
          eta "bestela baldin" aginduak ikasi ditugu.
      3:
        image: notes/hoc6_3.jpg
        text: Disfrutatu bazenuen zure lehenengo ordua kodetzen, bisitatu code.org
          informatikan zure heziketa zabaltzeko! Behin 20 ordu ematen dituzula ikasten,
          programazioaren oinarriak menperatuta edukiko dituzu eta ikasten hasi ahal
          izango zara mugikorrentzako app-ak, robotentzako aginduak, jokoak edo zuk
          nahi duzuna.
      4:
        image: notes/hoc6_4.jpg
        text: 'Teknologia egiten dugun oro aldatzen ari da eta ez du axola gazte edo
          zaharra zaren: programatzea dibertigarria da, sormena dario eta edonork
          ikas dezake!'
    20_wrapup:
      1:
        image: notes/bird.png
        text: Notak erakutsi laster atzigarri!
    frozen_intro:
      1:
        image: notes/frozen1_1.jpg
        text: Kaixo, nire izena Lindsey da. nire aplikazioak sortu eta idazten ditut.
          Erabil dezagun gure kodea Anna eta Elsarekin bateratzeko izotzaren mundu
          magikoa aztertzen duten bitartean.
      2:
        image: notes/frozen1_2.jpg
        text: Elur-malutak sor ditzakezu izotzetan patinatzen duzun heinean eta horrekin
          zure lagunekin elkarbanatu dezakezun neguko mundu magikoa sortu.
      3:
        image: notes/frozen1_3.jpg
        text: 'Hurrengo ordubetean, programazioaren oinarriak ikasiko dituzu. Ohiko
          programazioa testu formatuan izaten da, baina guk Blockly erabiliko dugu
          , arrastatu eta askatu daitezkeen bloke bisualen bidez programatzeko aukera
          ematen duena. Unibertsitateko ikasleek ere metodo hau erabiltzen dute askotan.
          Hala ez badirudi ere, azken finean kodea idazten ari zara. '
      4:
        image: notes/frozen1_4.jpg
        text: Programa bat agindu multzo bat da konputagailuari zer egin behar duen
          adieraziko diona. Eraiki dezagun  Elsari lerro bat marrazten lagunduko dion
          kodea. Ondoren, eredu konplexuagoak sortzeko erabiliko dugu kode hau.
      5:
        image: notes/frozen1_5.jpg
        text: Zure pantaila hiru zati nagusitan banatzen da. Ezkerrean, izotzezko
          panela dago, non zure programa exekutatuko da. Maila bakoitzeko zehaztapenak
          panelaren azpian daude idatzita.
      6:
        image: notes/frozen1_6.jpg
        text: Erdiko zati hau erremintek osatzen dute, eta hemengo bloke bakoitza
          Elsa eta Annak egin ditzaketen ekintzak dira.
      7:
        image: notes/frozen1_7.jpg
        text: Eskubiko zati txuriari lan tokia deitzen zaio, eta bertan gure programa
          sortuko dugu. IZotzezko paneletik mugitu ahal izateko "Mugitu Aurrera" blokea
          erabiliko da.
      8:
        image: notes/frozen1_8.jpg
        text: Hemen "Aurrera mugitu" blokean "100 pixel aurrera mugitu" esaten du.
          "Hasi" klikatzen duzunean zer gertatzen da? Elsa pantailan mugitzen da,
          100 pixel hain zuzen ere! Pixelak, oinarrian, zure pantailako karratu txiki-txikiak
          dira.
      9:
        image: notes/frozen1_9.jpg
        text: Puzle honetan dugun beste blokeak "biratu 90 gradu eskubira" dio, eta
          bloke hau erabiltzean Elsa pixka bat biratuko da eskubira. Probatu eta ikusi
          ea zenbat biratuko den Elsa. Angelu hau Elsaren pareko bidetik bidetik neurtzen
          da. Beraz, hau 90 graduko biraketa bat da. Eta hau 120 graduko biraketa
          bat.
      10:
        image: notes/frozen1_10.jpg
        text: Akorda zaitez, pixel kopurua eta graduak alda ditzakezu bere ondoko
          geziak klikatuz.
    frozen_loops:
      1:
        image: notes/frozen2_1.jpg
        text: Kaixo, Paola naiz! Ordenagailuek oso ondo errepikatzen dituzte ekintzak.
          10era, 20ra edo 100era arte zenbatu dezakezu. Ordenagailu batek, ordea,
          bilioira edo trilioira arte zenba dezake. Ez da aspertuko eta segun batzuen
          tartean egingo du. Zenbatzen, marrazten edo edozertan aritzean ere, ordenagailuek
          gauzak ehundaka edo bilioika aldiz errepika ditzakete.
      2:
        image: notes/frozen2_2.jpg
        text: Programazioan honi begizta deitzen diogu. Begizta bat zure kodea behin
          eta berriz errepikatzean datza. Hurrengo ariketan, zure helburua Anna lauki
          bat sortzen laguntzea da "errepikatu" blokea erabiliz.
      3:
        image: notes/frozen2_3.jpg
        text: '"Errepikatu" bloke baten barruan sartutako edozein kode bloke sekuentzia
          batean errepikatuko da, zuk nahi duzun beste aldiz.'
      4:
        image: notes/frozen2_4.jpg
        text: Karratu bat marrazteko, "mugitu aurrera" eta "biratu eskuinera" blokeak
          4 aldiz erabil ditzakezu. Era errazena, ordea, ordenagailuari "mugitu aurrera"
          eta "biratu 90 gradu eskuinera" behin esatea da, eta ondoren ekintza pare
          hay lau aldiz errepikatzeko esatea. Hori egiteko, "mugitu aurrera" eta "biratu
          eskuinera" blokeak "errepikatu" bloke baten barruan sartu behar dituzu.
      5:
        image: notes/frozen2_5.jpg
        text: Gogoratu, "Errepikatu" blokeko zenbakia nahieran alda dezakezu, eta
          ordenagailuak bloke barruan dagoena hainbeste aldiz errepikatuko du.
    frozen_functions:
      1:
        image: notes/frozen3_1.jpg
        text: Kaixo! Chris Bosh naiz. Saskibaloi-jokalari profesionala naiz eta unibertsitatean
          nengoenean programatzen nuen.
      2:
        image: notes/frozen3_2.jpg
        text: Informatikako kontzepturik garrantzitsuenetako bat komando berriak nola
          definitzea da. Programazio lengoaia gehienek 100 hitz edo komando inguru
          izaten dituzte soilik Eta, egia esan, mamia eraikitzeko bloke hauetatik
          hasita zure hitz berriak definitzean datza.
      3:
        image: notes/frozen3_3.jpg
        text: Behin ordenagailuari komando sekuentzia erabiliz ekintza bat egiten
          erakutsi diozunean, ekintzari izena jar diezaiokezu gerora errepikatzeko
          errazagoa izateko. Komando berri bat definitu eta izena emateari funtzio
          deitzen zaio.
      4:
        image: notes/frozen3_4.jpg
        text: Kaixo, Jess naiz. Blokeekin programatzean, askotan erabiliko dituzun
          ekintza multzoak badaude, funtzioak erabiliko dituzu. Adibidez, karratu
          bat sortzeko kodea idatzi duzu.
      5:
        image: notes/frozen3_5.jpg
        text: Hau "sortu karratua" izeneko funtzioa bezala erazagutu dezakezu
      6:
        image: notes/frozen3_6.jpg
        text: Orain hainbat aldiz erabilita hainbat karratu sortzeko blokea duzu.
      7:
        image: notes/frozen3_7.jpg
        text: Figura sinple askok patroi konplexu bat sortu dezakete. Hurrengo ariketan,
          zirkulua egiteko egindako kodea eskuragarri duzu funtzio berri honetan,
          tamaina ezberdinetako zirkuluak marraztuko dituena. Erabili al dezakezu
          Elsak honako irudi polit eta korapilatsuak marraz dezan?
    playlab_intro:
      1:
        image: notes/playlab_intro_1.png
        text: 'Play Lab erabiliz jokoak sortuko ditugu. Joko onek istorio bat dute,
          eta istorioek aktoreak. Gure aktoreak sorgin eta alien bihurtzen ikasiko
          dugu, animaliak hiztegirarazi, mugiarazi, eta beraien arteak elkarreragin
          daitezen. Tutorial honen bukaeran, hasieratik joko bat sortzeko gai izango
          zara, eta elkarbanatu ahal izango duzu. '
      2:
        image: notes/playlab_intro_2.png
        text: Zure pantaila 3 zati nagusitan zatitu da. Ezkerrean programa exekutatzeko
          jokalekua duzu. Maila bakoitzaren instrukzioak behean idatzita daude.
      3:
        image: notes/playlab_intro_3.png
        text: Erdiko zatian erremintak dituzu, eta bloke bakoitza kodigoaren zati
          bat da. Eskuineko espazio zuria lan-lekua izena du eta hemen eraikiko dugu
          gure programa.
      4:
        image: notes/playlab_intro_4.png
        text: Hasteko, zure blokeak elkartu beharko dituzu "egikaritzean" bloke laranjarekin.
          Hainbat bloke elkartu ditzakezu blokeak, lerro horia ikusi arte kanporaka
          mugituz gero, denak elkartuko dira.
      5:
        image: notes/playlab_intro_5.png
        text: Lehenengo puzle honetan, gure aktorea pinguino bat da eta "Kaixo!" esanaraziko
          diogu. Horretarako "esan" blokea mugituko dugu "egikaritu" blokearekin elkartu
          arte, eta bertan "Kaixo!" idatziko dugu. Pinguinoa mugiarazi dezakegu ere,
          "mugitu eskuinera" eta "mugitu ezkerrera" blokeak erabiliz. Blokeak dagokien
          tokian dituzunean, "egikaritu" botoia klikatu programatutakoa ikusteko.
      6:
        image: notes/playlab_intro_6.png
        text: Hasi ikasten eta bukatzerakoan zure joko propioa sortu ahalko duzu,
          jokalari ezberdinekin, elkarreragin dezaketenak, pozik edo triste jar daitezkeenak,
          puntuak lortu ditzaketenak edo suzko bolak bota ditzaketenak, baita bata
          bestea desagerrarazi ere. Dena zure esku eta sortu nahi duzun jokoaren esku
          dago.
    playlab_events:
      1:
        image: notes/playlab_events_1.png
        text: Orain, joko-programatzaile orok euren egunerokoan erabiltzen duten zerbait
          ikasiko dugu. "Gertaerak" deitzen dira. Gertaera batek zure programari adi
          egoteko esaten dio, zerbait gertatzen bada entzuteko. Hori gertatzen denean,
          ekintza bat egikarituko du.
      2:
        image: notes/playlab_events_2.png
        text: Hainat ekintza saguaren klikarekin, geziekin, edota pantaila ukimanarekin
          daude erlazionatuta.
      3:
        image: notes/playlab_events_3.png
        text: Oraingoan, jokalariak espazioko robot batean klik egitean, lurtarrak
          agurtzeko programa inplementatuko dugu, "klik egitean" eta "hitz egin" blokeak
          erabiliz. Jokalariak robotean klik egitean, "klik egitean" blokea exekutatuko
          da. Zer dio zure alienak?
      4:
        image: notes/playlab_events_4.png
        text: '"Gezia sakatzean" blokeak ere badaude. Hauek "mugitu" blokeekin lotzen
          badituzu, hasi zaitezke zure aktoreak gora, behera, ezker, eskuin mugitzen.
          Urratsez urrats, zure jokoa elkarreragileago bihurtzen ari da.'
    playlab_repeat_forever:
      1:
        image: notes/playlab_repeat_forever_1.png
        text: Hau da "errepikatu betirako" blokea. Edozein gauza bloke honen barruan
          beti gertatuko da jokoan.
      2:
        image: notes/playlab_repeat_forever_2.png
        text: Aktore batek hainbatetan zerbait egitea nahi baldin badugu, jokalariak
          ezer egin behar izan gabe, bloke horiek "errepikatu betirako" blokearen
          barruan jarriko ditugu.
      3:
        image: notes/playlab_repeat_forever_3.png
        text: Hurrengo puzlean gure helburua magoarekin erreinuko zaurituak patruilatzea
          da ezkerratik eskurbira denbora guztian. Agindu lanak nola nola errepikatzen
          ikasiko dugu horrela zure jokua egitean denbora asko aurreztuko duzu.
    C1_artist_intro:
      1:
        image: notes/C1_artist_intro_1.png
        text: Hauek dira marrazteko eskuartean dituzun blokeak. Artistak lerro grisak
          bete behar ditu. Horratarako, joan behar duen lekura eramateko, bloke zuzena
          erabil ezazu.
      2:
        image: notes/C1_artist_intro_2.png
        text: Hauek jauzi-blokeak dira. Hauek erabiltzen dituzunean zure artista mugitu
          baino ez du marrazten. Erabil dezagun hau hurrengo lerro grisera jauzitzeko.
    C1_bee_level_intro:
      1:
        image: notes/C1_bee_level_intro_1.png
        text: Erleak, zein ederrak diren!!! Ez da hala? Hurrengo ariketa andanan,
          zure helburua erleari laguntza ematea da. Erleak loreztia eskuratu behar
          du loreetatik eta abaraskara eraman, bertan eztia egin dezan. "Loreztia
          eskuratu" eta "eztia egin" blokeak erabili beharko dituzu ariketa hau ebazteko.
      2:
        image: notes/C1_bee_level_intro_2.png
        text: 'Lore orok lorezti kopuru ezberdina du: 1, 2, 3 edo gehiago. Badakigu
          zenbat lorezti duten lore gorriek, eskuin oinari begiratuz. Lorezti dena
          hartu duzula ziurta ezazu aurrera egin aurretik. Abaraska bakoitzean gorde
          daitekeen ezti kopurua ere mugatua da: 1, 2, 3 edo gehiago. Beraz, erne
          ibili abaraska bakoitzean gorde daitekeen eztia besterik ez egiteko.'
      3:
        image: notes/C1_bee_level_intro_3.png
        text: Lorezti guztia eskuratu eta eztia egiteko gai bazara, lortu duzu egitekoa
          eta hurrengo mailara joan zintezke. Bestela, puzlera itzuli behar duzu berriz.
          Saia zaitez berriro eta senti ezazu zer den "erle" programatzailea izatea!
    C1_bee_loops:
      1:
        image: notes/C1_bee_loops_1.png
        text: Begizta bat eragiketa bat errepikatzea da. Erlauntza bat aztertzean,
          gelaxka bat begiratu eta utzi egingo dut. Hau gelaxka guztiekin errepikatu
          behar denez, begizta batean aztertuko ditut gelaxkak.
      2:
        image: notes/C1_bee_loops_2.png
        text: Maila honetan, erleak loreetatik 3 ezti jasotzea nahi dugu. 3 "lortu
          eztia" bloke erabili beharrean, errepikapen blokea erabiliko duzu ezti 3
          aldiz lortzeko. Sakatu "hasi" eta ikusi ea ondo egin duzun. Oso ondo!
    C1_bigevent_unplugged:
      1:
        image: notes/C1_bigevent_unplugged_1.png
        text: 'Ikasgai hau Gertaera Handia deitzen da. Bertan zera tratatuko dugu:
          nola kontrolatu gure programak eta nola aldatu egiten dutena exekutatzen
          ari diren bitartean gertaerak erabiliz, botoi bat sakatzea edo saguarekin
          klik egitea, adibidez.'
      2:
        image: notes/C1_bigevent_unplugged_2.png
        text: Ikastaro honetan, paperezko urruneko kontrolak gidatuko zaitu. Hau bai
          benetako bideo jokoa!
      3:
        image: notes/C1_bigevent_unplugged_3.png
        text: 'Gertakaria zerbait eginarazten duen ekintza da. Esaterako: saguarekin
          botoia sakatuta weborria dator. Hori da gertakaria.  Beste adibide bat:
          tablet-pantaila ukitzea behera-gora egiteko. Erabiltzailea -nahi duen eran-programaren
          egikaritzaile edo gidari bilaka dadin apartak dira gertakariak.'
      4:
        image: notes/C1_bigevent_unplugged_4.png
        text: Badira gertaerak denok egiten ditugunak. Gose garenean hozkailura jotzen
          dugu. Postaria entzuten dugunean kartazalak buzoian sartzen, gure postaren
          bila joaten gara. Horiek gertaerak dira, botoi bat sakatu edo palanka bat
          mugitzea gertaerak diren era berean. Gertaerek zerbait egitera bultzatzen
          gaituzte azken finean.
      5:
        image: notes/C1_bigevent_unplugged_5.png
        text: Bideojokoetan "Eguneratu" izeneko ekintza bat burutzen da, eta 30-60
          aldiz exekutatzen da segunduko. Bideojokoen progrmatzaileentzat hau garrantzisuagoa
          da joystick baten ekintza baino.
      6:
        image: notes/C1_bigevent_unplugged_6.png
        text: Bilatzen ari garen gertaera nagusia "eguneratu" marka agertzea da. Gero
          joysticka markan ziurtatuko dugu. Orduan esango dugu, "norbaitek zapaldu
          al du gelaxka honetan? bai ala ez?". Gertaerarik gabe, jokalariak ezin izango
          zen mugitu, ezin izango zenuke salto egin, ez zinateke zer gertatzen den
          kontroilatzeko gai izango. Bideojokoa ez zen ezer animatzeko gai izango.
    C1_building_foundation:
      1:
        image: notes/C1_building_foundation_1.jpg
        text: Hondarrezko irudietan, porrota programaren zati dela jakinaren gainean
          egon behar duzu. Aurrera egin ezkero, ordea, kontua hoberantz joango da
          ezinbestean eta zuretzat irrikagarriagoa izango da. Iraun da jokoaren izena.
          Gelditu zaitez bertan, gustoko izango duzu.
      2:
        image: notes/C1_building_foundation_2.jpg
        text: Ikastaro honen izena oinarrien eraikuntza da. Ikastaro honetan, zaila
          den ataza batean egingo dugu lan. Zuk pentsatu beharko duzu nola egin egitura
          bat kopa hauek bezain altua eta liburu baten pisua eusteko bezain indartsua.
      3:
        image: notes/C1_building_foundation_3.jpg
        text: Batzuetan gure sorkuntzak ez du funtzionatuko. Batzuetan frustratu eta
          amore eman nahi izango dugu. Halako une asko egongo dira. Baina saiatzen
          jarraitzen badugu, bakoitzean gure onena ematen badugu behin eta berriz,
          berandu baino lehen lortuko dugu.
      4:
        image: notes/C1_building_foundation_4.jpg
        text: Persistentzia amore eman nahi duzunean aurrera jarraitzeko ekintza da.
          Zerbai berria eta desberdina sortu nahi baduzu hainbat kale egingo dituzu
          bidean.
      5:
        image: notes/C1_building_foundation_5.jpg
        text: Persistentziaren trukoa frustratuta egoteagatik amore eman ordez arazoekin
          aurrera jarraitzean datza. Frustrazioak, berez, zerbait ezinhobea datorrela
          esan nahi du. Ez ezazu amore eman. Woooo!
    C1_getting_loopy:
      1:
        image: notes/C1_getting_loopy_1.png
        text: Nire izena Miral Kotb da eta Iluminatien buruzagia naiz. Nire lanean
          badago zerbait dantzan eta programazioan. Eta hori begizta da. Begiztak
          behin eta berriz errepikatzen dituzte ekintzak.
      2:
        image: notes/C1_getting_loopy_2.png
        text: Gauza bat hainbat aldiz errepikatzen duzunean, hula-hop-a bueltaka jarduten
          dudanean bezala, Ekintza baten begizta egiten ari naiz. Hau begizta bat
          da. Eta hau ere bai.
      3:
        image: notes/C1_getting_loopy_3.png
        text: Festa izango dugu gaur. Begiztak erabiliko ditugu Iterazioa dantzaren
          pausu gisa. Begiztei buruz ikasiko dugu dantza erabiliz. Pausu erraz pare
          bat ikasiko duzu eta behin eta berriz errepikatuko dituzu dantza osoa burutu
          arte.
      4:
        image: notes/C1_getting_loopy_4.png
        text: Hemen daude ikasi beharreko pausoak. Txaloak jo itzazu. Orain, buruaren
          atzetik. Orain, eskuak gerrian jarri. Ezkerreko besoa igo. Orain zure eskuina.
          Erraza ezta? Ikusiko duzu nola aginduak gutxitu ditzazkezun dantza-pauso
          batzuk begiztetan jartzen.
      5:
        image: notes/C1_getting_loopy_5.png
        text: Gure dantzan begiztak erabiltzen ditugu. Dantzariek ordenagailuak daramatzate,
          denak sare berean. Argiak dantzari berdinengana begiztatuko ditu behin eta
          berriz. Begiztan iterazio bat izango dut "sei dantzari hauenganako begizta
          egin nahi duzu eta begiztaren baitan argiaren abiadura handituko da" esango
          duena. Eta hori begiztaz sortuta dago. Begiztak garrantzitsuak dira informatikan
          gure lana errazagoa eta laburragoa egiten dutelako.
    C1_happy_maps_unplugged:
      1:
        image: notes/C1_happy_maps_unplugged_1.png
        text: Ikasgai honek Mapa Zoriontsuak izena du. Gaur gure lagun iletsu Flurb
          txikiari lagunduko diogu bere fruitura heltzen.
      2:
        image: notes/C1_happy_maps_unplugged_2.png
        text: Zure Flurb-a zure fruitura eraman ezazu. Honetarako Flurb-ek zein bidetatik
          joan beharko duen asmatu beharko duzu eta gezien bidez zuzendu. Flurb-a
          sagarrera irits dadin zein noranzkotan joan beharko du? marraz ezazu gorantz
          joan dadin.
      3:
        image: notes/C1_happy_maps_unplugged_3.png
        text: Hara heltzeko, hartu behar duen norabidea zirkulu baten barruan sartu
          behar duzu.
      4:
        image: notes/C1_happy_maps_unplugged_4.png
        text: Sortu zure algoritmoa ebazten ari zaren maparen aldamenean geziak itsatsiz.
          Bigarrena berdina da, baina beheraka joanez.
      5:
        image: notes/C1_happy_maps_unplugged_5.png
        text: Paperean programatzea bezala da. Hori da!
    C1_maze_debugging:
      1:
        image: notes/C1_maze_debugging_1.png
        text: Debugeatzea arazoak aurkitu eta konpontzeko prozesua da. Modu asko daude
          arazoak debugeatzeko. Modurik errazena arazoa aurkitu arte pausoz-pauso
          mugitzea da. Hemen nago txiribuelta atzeraka egiten saiatzen, baino eortzen
          jarraitzen dut.
      2:
        image: notes/C1_maze_debugging_2.png
        text: Atal guztietan zehar joan naiz urratsez urrats eta nire akatsa non dagoen
          konturatu naiz. Ez nintzen nire eskuak tximistan zuzen jartzen ari. Beraz
          beste atzerako jauzi bat egiten saiatu nintzen nire eskuen posizio berriarekin
          eta lortu dut. Benetan pozten naiz nire atzera jauzia debugeatu izanaz.
      3:
        image: notes/C1_maze_debugging_3.png
        text: Arazketari buruz ikasteko, eszenatokian dugun bloke multzo batekin hasiko
          gara. Konturatuko zara bloke hauek ez zaituztela helburua eramango. Emaitza
          araztu eta konpondu behar dugu. Non zegoen akatsa? Konturatuko zara mendebalderantz
          joaten jarraitu behar zenuela bloke bat gehiago.
      4:
        image: notes/C1_maze_debugging_4.png
        text: Konpon dezagun hau beste ekialde-bloke bat gehituz eta "abiatu" sakatuz
          ea zuzen egin duzun. Bejondeizula!
    C1_maze_intro_sequencing:
      1:
        image: notes/C1_maze_intro_sequencing_1.png
        text: Buruhauste honetan, txoria txerritxoarengana eraman behar duzu. Begiratu
          ariketan eta pentsatu nora joan behar duen.
      2:
        image: notes/C1_maze_intro_sequencing_2.png
        text: Arrastatu blokeak tresna-kutxatik lan-eremura. Ziurtatu "Abiaraztean"
          blokearen azpian dagoela eta soluzioa duzula pentsatzen duzunean, egin klik
          "Hasi" botoian eta ikusi txoria habira joaten.
    C1_maze_loops:
      1:
        image: notes/C1_maze_loops_1.png
        text: Konputagailuak aginduak errepikatzen oso onak dira. Pertsona izanda,
          zu, oso segituan aspertuko zinateke zerbait behin eta berriz egin beharko
          bazenu. Konputagailuak, ordea, gauza berdina milaka edo milioika aldiz oso
          ondo egin dezake aspertu gabe.
      2:
        image: notes/C1_maze_loops_2.png
        text: Adibidez, Facebook-en dauden guztiei e-mailak bidalita zoriondu nahiko
          banie, mezu horiek guztiak idazten mende oso bat emango nuke. Pixka bat
          programatuta, Facebook-eko pertsona guztiei zoriontzeko programa bat egin
          dezaket.
      3:
        image: notes/C1_maze_loops_3.png
        text: Txoria txerrira eramateko maila honetan... hiru ipar bloke eraman ordez
          lan-eremura, "errepikatu" blokea erabiliko duzu. Eraman "errepikatu" blokea
          lan-eremura eta sartu 3 zenbakia. Ondoren, eraman "mugitu iparrera" blokea
          eta sakatu "Hasi" zuzen egin ote duzun ikusteko. Zorionak, lortu duzu!
    C1_moveitmoveit_unplugged:
      1:
        image: notes/C1_moveitmoveit_unplugged_1.png
        text: Ikasgai hau "mugi ezazu, mugi ezazu!" deitzen da. Elkarrekin programa
          bat idatziko dugu gure lagunak iparorratza duen hasiera puntutik aurpegi
          irrifartsudun helmugara eramateko.
      2:
        image: notes/C1_moveitmoveit_unplugged_2.png
        text: Aurpegi irrifartsua behena dago eta pertsona bakarrak daki nola heldu
          horra. Has dezagun programa.
      3:
        image: notes/C1_moveitmoveit_unplugged_3.png
        text: Programa bat makina batek exekuta dezakeen zerbaitetan kodetu den algoritmo
          bat da. Gutako gehienok programa bat guk ordenagailuarentzat idazten dugun
          zerbait dela uste dugu. Programak oso onak dira horretarako, baina beste
          leku batzuetan ere baliogarriak dira. Zure jolasa sor dezakezu edo zuretzako
          lan egingo duen errobot bat programa dezakezu.
    C1_going_places_safely:
      1:
        image: notes/C1_going_places_safely_1.png
        text: Kaixo! Jeremiah dut izena. Zazpi urte ditut. Nire amaren ordenagailuan
          jolastea atsegin dut, baina bere baimenarekin. "Ama, erabil al dezaket ordenagailua?
          Jakina, laztana!"
      2:
        image: notes/C1_going_places_safely_2.png
        text: Oso gustuko dut nire amaren ordenagailua interneten sar naitekeelako.
          Internet zure auzoaren antzekoa da. Leku paregabeak bisita ditzakegu, familia
          eta lagunekin hitz egin dezakezu eta gauza berri asko ikas ditzakezu.
      3:
        image: notes/C1_going_places_safely_3.png
        text: Atzo, nire etxetik hurbil dagoen zoo bat bisitatu nuen. Zebrakume bat
          ikusi nuen. Argazki bat atera nion eta marren kolorea aldatu nion, gero
          kapela bat jarri nion eta nire animalia bitxien bildumara gehitu nuen. Itzel!
          Gero, oso urrun dagoen leku batera joan nintzen. Kenia bisitatu nuen. Afrikako
          herrialde bat da. Han zebra asko bizi dira.
      4:
        image: notes/C1_going_places_safely_4.png
        text: Batzutan ezagutzen dudan jendearekin hitz egiten dut interneten, adibidez,
          beste estatu batean bizi den nire amonarekin. Kaixo, amona! Nire urtebetetzean
          bidaliko dizkidan gailetak egiten ari da. "Mmmm, internetetik usaintzea
          gustatuko litzaidake!" Edonorekin hitz egin dezaket internetetik, adibidez,
          nire lehengusina; baina ezagutzen dudan jendearekin baino ez dut hitz egiten.
      5:
        image: notes/C1_going_places_safely_5.png
        text: Interneten gehien gustatzen zaidana jolas dibertigarriean jolastu ahal
          izatea da. Tanto! Marraztea eta gauza berriak sortzea eta horiek lagunekin
          elkarbanatzea ere gustatzen zait. Itzel! Batzuetan gauza berriak ikasteko
          webguneak bisitatzen ditut, baina beti niretzat egokiak diren webguneetan
          ibiltzen naiz. Hara, dinosauruak!
      6:
        image: notes/C1_going_places_safely_6.png
        text: 'Internet oso leku dibertigarria da. Baina auzoan errepidea gurutzatzean
          bezala, adi egon behar duzu konektatzen zarenean. Gogoratzeko 3 arau dago.
          Lehen araua: baimena eskatu gurasoei beti. Bigarren araua: ezagutzen duzun
          jendearekin soilik hitz egin. Hirugarren araua: zuretzat egokiak diren lekuetan
          geratu.'
      7:
        image: notes/C1_going_places_safely_7.png
        text: Hara, hori bai dibertigarria! Afalordua. Deskonektatuko naiz. Irrikitan
          nago noiz berriz konektatu eta zer berri bisitatu.
    C1_pair_programming:
      1:
        image: notes/C1_pair_programming_1.png
        text: Gaur bikotekako programazioa ikasiko dugu. Programatzean taldeka lan
          egiten da. Zergatik bi pertsonek erabili behar izango lukete ordenagailu
          bakarra? Bi buruk batek baino hobeto pentsatzen duelako. Bikotekako programazioan
          zu eta zure kidea batera eseriko zarete ordenagailu baten aurrean eta proiektu
          berean lan egingo duzue.
      2:
        image: notes/C1_pair_programming_2.png
        text: Bikotetako programazioan pertsona bat gidaria da eta bestea nabigatzailea,
          auto bat gidatzean bezala. Gidaria ordenagailuan eseriko da eta teklatua,
          sagua edo pantaila ikugarria erabiliko ditu eta ordenagailuaren ekintza
          nagusiak kontrolatuko ditu. Beste pertsona nabigatzailea da. Nabigatzaileak
          gidaria lagunduko du gidariaren erantzunei erantzunez eta balizko arazo
          edo akatsak azaleratuz.
      3:
        image: notes/C1_pair_programming_3.png
        text: Komunikazioa gakoa da bikotetako programazioan. biraorik ez, izan zaitez
          begirunezko, ez zaitez nabigatzaile agintzailea izan; inork ez du kontrolatzailerik
          nahi. Zuk eta zure bikoteak etengabe hitz egin behar duzue. Gidariak zer
          egiten ari den azal dezake. Eta nabigatzaileak jarraian zer egin iradoki
          dezake.
      4:
        image: notes/C1_pair_programming_4.png
        text: Nabigatzaileak proiektuaren osotasunean pentsatu behar du eta gidariak
          xehetasunei erreparatu behar die. Bi ekintzak garrantzitsuak dira. Bikotekako
          programazioa talde bezala lan egitea da.
    C1_planting_seed:
      1:
        image: notes/C1_planting_seed_1.png
        text: Ikasgai hau "hazia landatu" deitzen da eta algoritmoak ulertzen lagunduko
          digu. Algoritmoak gauzak zer ordenatan egin adierazten duten agindu zehatzak
          dira. Eguneroko ekintzak, gosaltzea edota hortzak garbitzea bezalakoak,
          lana ondo egiteko pauso txikiak behar dituzten algoritmoak dira.
      2:
        image: notes/C1_planting_seed_2.png
        text: Ordenagailuak oso azkarrak izan daitezke, baina pausoz pauso zer egin
          behar duten zehazt-mehatz esaten badiezu baino ez dizute ulertuko. Algoritmoen
          gauza ona, aginduak ordenean jarraituta, lehen egiten ez zenekien gauzak
          egin ditzakezula da. Errezeta bat jarraitzea bezalakoa da.
      3:
        image: notes/C1_planting_seed_3.png
        text: Gaur gure hazi propioak landatuko ditugu algoritmo bat erabiliz. Irudiak
          moztuz sortu zuren algoritmoa. Hautatu hazia landatzeko pausoak erakusten
          dituzten irudiak eta ordena zuzenean jarri.
      4:
        image: notes/C1_planting_seed_4.png
        text: Orain, zure algoritmoa dabilen ikusiko duzu. Algoritmoko urratsak adi
          jarraitu. Ordena zuzenean al daude? Lortu al duzu hazia landatzea algoritmoa
          jarraituz? Irudiekin programatzea bezalakoa da!
      5:
        image: notes/C1_planting_seed_5.png
        text: Txokolatea egin nahi dugunean, prozesuak hainbat urrats nagusi ditu,
          baita urrats txikiago batzuk ere eta hainbat errezeta edo algoritmo dago
          lortu nahi dugun txokolatearen zaporearen araberakoak. Urrats bakoitza garrantzitsua
          da, txikienenak ere. Hala, urrats bat gabe beste guztiak ezin izango dira
          burutu. Besteek ulertuko dituzten algoritmoak sortzea oso garrantzitsua
          da. Ondorioz, urrats bakoitza idatzi behar da edonork eginda ere emaitza
          berdina lortzeko.
    C1_playlab_storytelling:
      1:
        image: notes/C1_playlab_storytelling_1.png
        text: Heldu da sormenaren ordua eta erabil itzazu zure kodetze trebetasuna
          istorio bat kontatzeko. Zure istorioak aktoreak izango ditu eta aktore horiei
          hitz eginarazi eta elkartrukatu arazi ahal izango diezu. has zaitez zein
          motatako istorioa kontatu nahi duzun.
      2:
        image: notes/C1_playlab_storytelling_2.png
        text: Katuak beti izan dira txakurren beldur, baina zer gertatuko litzateke
          katuak txakurrak berarekin adeikorra izan nahi duela deskubritzen badu?
          "abiarazi" blokeak dena hasiko du. "Mugitu" blokeak zure pertsonaia mugituko
          du eta "esan" blokeak zure pertsonaiak idazten duzuna esatea ahalbidetuko
          du.
      3:
        image: notes/C1_playlab_storytelling_3.png
        text: Beste bloke batzuei lot diezaiokezun "akotreek talka egiten dutenean"
          blokea da hau.
      4:
        image: notes/C1_playlab_storytelling_4.png
        text: Txakurrari etorrarazten eta "kaixo" esanarazten ari nintzen, baina katua
          izutu eta alde egin du. "Ah" denbora luzeagoa balego, amaiera zoriontsua
          izango genuke. Amaiera!
    C1_spelling_bee_intro:
      1:
        image: notes/C1_spelling_bee_intro_1.png
        text: Hau letraka esateko erlearen maila da. Erabili puzlearen piezak erlea
          mugitzeko. Mugitzen den heinean, hitzak letraka esateko letrak batuko ditu.
      2:
        image: notes/C1_spelling_bee_intro_2.png
        text: Ikusi ea eszenatokiaren azpian dagoen kutxako hitza letraka esan dezakezun.
          Baina kontu handia izzzzzzzan! Norabide okerrean mugituz gero, nahi ez dituzun
          letrak gehituko ditu.
    C1_zuck_repeat_loop:
      1:
        image: notes/C1_zuck_repeat_loop_1.png
        text: Konputagailuak aginduak errepikatzen oso onak dira. Pertsona arrunta,
          alabaina, azkar asko asper daiteke zerbait behin eta berriz egin behar duenean.
          Konputagailuak, ordea, gauza berdina milaka edo milioika aldiz egin dezake,
          inoiz aspertu gabe eta erabat ondo eginik.
      2:
        image: notes/C1_zuck_repeat_loop_2.png
        text: Adibidez, Facebooken izen emanda dauden guztiak emailez zoriondu nahiko
          banitu, mezuak idazten mende osoa emango nuke. Pixka bat programatuta, aldiz,
          Facebooken dauden pertsona guztiak epostaz banan-bana zoriontzeko sistema
          bidera nezake.
      3:
        image: notes/C1_zuck_repeat_loop_3.png
        text: Adibide honetan, zure helburua txoria txerria hartzeko mugitzea da.
          Orain "errepikatu" blokea erabili ahal izango dugu hau oso erraz egiteko.
          Ordenagailuari txoria urrats bakoitzean urratz bat aurrera egiten aurrera
          mugitzeko "mugitu aurrera" komandoa 5 aldiz emanda edo ordenagailuari behin
          aurrera mugitzeko esanda eta gero hori bost aldiz errepikatzeko esanda egin
          dezakezu.
      4:
        image: notes/C1_zuck_repeat_loop_4.png
        text: Hau egin ahal izateko, zure "mugitu aurrera" komandoa errepikatu blokeraino
          arrastratu beharko duzu. Bloke honetan sakatuz komandoa zenbat aldiz errepikatzen
          den aukera dezakezu, eta beraz, aurrera zenbat pauso eman aukeratu.
      5:
        image: notes/C1_zuck_repeat_loop_5.png
        text: Ahal bezain aina comando sartu ditzakezu errepikatu blokearen barruan.
          Adibide honetan, aurrera eta gero ekubira mugitzeko esaten ari zara, 5 aldiz
          egingo dena. Ondo pasa!
    C2_artist_intro:
      1:
        image: notes/C2_artist_intro_1.png
        text: Ezin zara lasterketarako sailkatu informatikan onak diren pertsonak
          ez badituzu, autoek datu kantitate handia behar dutelako eta eraikuntza
          jarduera eraikitzen nola jarraituko duzun asmatuko duten programak idazten
          dakien jendea behar duzulako.
      2:
        image: notes/C2_artist_intro_2.png
        text: Puzzle hauetan, forma ezberdinak arkatzez marrazten dituen artista izango
          zara. Artista edonora joanda ere, lerro bat marraztuko du zure atzean.
      3:
        image: notes/C2_artist_intro_3.png
        text: Oihalean zehar mugitzeko, "mugitu aurrera" blokea erabiliko duzu. Hemen
          "mugitu aurrera" blokeak 100 pixel aurrera mugitzeko esaten du. "hasi" zapaltzen
          dugunean, zer gertatzen da? Artista aurrera 100 pixel mugitzen da. Pixelak
          zure ordenagailuaren pantailako karratu ñimiñoak dira.
      4:
        image: notes/C2_artist_intro_4.png
        text: Puzle honetan dugun beste blokeak eskuinera 90ko bira egin esaten du.
          Hori arrastatzen dugunean, artistak biratu egingo du. Artistak zenbateko
          bira egingo duen erabaki dezakezu. Hau 90 graduko bira da.
      5:
        image: notes/C2_artist_intro_5.png
        text: Eta hau 120 graduko biraketa bat da. Eta gogoratu, balio hauek alda
          ditzakezu zenbakien ondoan dauden geziak sakatuta. Atera barruan duzun artista!
    C2_bee_conditionals:
      1:
        image: notes/C2_bee_conditionals_1.png
        text: Hau baldintza bat da. Nektar edo eztia zenbaki bat baino gehiago/gutxiago/berdina
          bada, orduan egin zerbait.
      2:
        image: notes/C2_bee_conditionals_2.png
        text: Hau erabilgarria da zenbat nektar edo ezti dugun ez dakigunean, galdera
          ikurrarekin ikus daitekeen bezala.
      3:
        image: notes/C2_bee_conditionals_3.png
        text: Adibide honetan, lore moreak 0 nektar baino gehiago baldin badu, hartu
          nektarra. Honi esker gure erleak nektarra hartzen jarraituko du lorean badagoen
          bitartean. Ta-txan!
    C2_binary_bracelets:
      1:
        image: notes/C2_binary_bracelets_1.png
        text: Hau eskumuturreko bitarren ikasgaia da. Gure inizialak eskumuturreko
          batean kodetuko ditugu eta gure lagunei erakutsi ahal izango diegu!
      2:
        image: notes/C2_binary_bracelets_2.png
        text: 'Bitarra informazioa bi aukera bakarrik erabiliz gordetzeko era bat
          da. 0 eta 1ak erabiliz gorde ohi da informazio hau, baina beste hainbat
          modu daude: zuria eta beltza, piztuta eta itzalita, gora eta behera...'
      3:
        image: notes/C2_binary_bracelets_3.png
        text: Kaixo, Orion naiz eta robotak Play-im-en programatzen ditut. Ordenagailu
          eta roboten burmuin guztiek atetxo elektronikoak dituzte beren barruan.
          Atea irekita dagoenean elektrizitatea pasatzen da eta itxita dagoenean,
          ezin da pasa.
      4:
        image: notes/C2_binary_bracelets_4.png
        text: Errobotaren begiak errobot bitarraren adibidea da. Errobotaren begial
          LEDak dira eta argi horiek piztu eta itzali egiten dira. Sistema bitarr
          ada, bata ala bestea. Argiak erabil ditzakegu zenbaki bitarrak adierazteko.
          Errobot multzo bat badugu, lehen errobota lehen tokia dela eta bigarrer
          errobota bigarrena dela eta abar esan dezakegu. Hala errepresentatzen duzu
          zenbaki bitarra. Errobotek euren begi bitarrekin egingo dute zenbakia eta
          zuretza kontatuko dute.
    C2_conditionals_with_cards:
      1:
        image: notes/C2_conditionals_with_cards_1.png
        text: Lekzio honek "kondizionala kartekin" izena du. Egunero ikusten eta entzuten
          duzuen araberakoan oinarrituta aukerak egiten dituzu.
      2:
        image: notes/C2_conditionals_with_cards_2.png
        text: Parkera joan nahi dut, baina aurretik ea aterkia eraman nahi dudan edo
          ez erabaki behar dut. Orduan, leihotik begiratzen dut. Hodeitsu badago aterkia
          hartuko dut. Bestela, eguzkitako betaurrekoak hartuko ditut. Uste dut hobea
          izango dela aterkia hartzea. Entzuten eta ikusten dudanaren arabera, parkera
          zer eramango dudan aukeratuko dut.
      3:
        image: notes/C2_conditionals_with_cards_3.png
        text: Baldintzazkoak jokoetan ere erabiltzen dira. Gaur karta jolas batekin
          landuko dugu hau. Joko honetan, nik botatako kartak lagunek zer egingo duten
          dio. 7 bat ateraz gero, denek txalo egingo dute. Bestela, denek "awwww"
          esango dute. Saia gaitezen!
      4:
        image: notes/C2_conditionals_with_cards_4.png
        text: Baldintzak erabiliz joko dibertigarriagoak egin ditzakezu. Saia zaitez!
          Baldintzak dira konputagailuei azkar itxura ematen diotenak. Baldintzak
          erabiltzen dituen programa batek bere ekintzak alda ditzake erabiltzaileak
          egiten duenaren arabera.
      5:
        image: notes/C2_conditionals_with_cards_5.png
        text: Pentsa ezazu zure bideojoko gogokoenean. Ekintza bat egiteak beste batek
          baino puntu gehiago ematen al dizkizu? Honen arrazoia ordenagailuak baldintzak
          erabiltzen dituela da. Ordenagailuak baldintzak erabiliz hartzen ditu erabakiak.
          Helburua lortzerakoan, hamar puntu irabazten dituzu, bestela hiru galdu.
          Baldintzak erabiltzen jakiteak, joko dibertigarriak sortzea ahalbidetzen
          dizu.
    C2_artist_debugging:
      1:
        image: notes/C2_artist_debugging_1.png
        text: Hemen badauzkagu jada bloke batzuk gure laneremuan. Baina zerbait dago
          gaizki.
      2:
        image: notes/C2_artist_debugging_2.png
        text: Debugeatu dezagun kode exekuzio-abiadura motelduz, bloke bakoitza pausoka-pausoka
          nola exekutatzen den ikusteko.
      3:
        image: notes/C2_artist_debugging_3.png
        text: Oh! Hemen dago arazoa! Katuaren biboteak 75 pixeleko luzera dute, ez
          25 pixelekoa.
    C2_bee_debugging:
      1:
        image: notes/C2_bee_debugging_1.png
        text: Entzun al duzu "programa bat debugeatu" esaldia? Horrela ikus dezakegu
          zer doan gaizki. Kodea debugeatzen duzunean, erroreak identifikatu eta konpontzen
          dituzu.
      2:
        image: notes/C2_bee_debugging_2.png
        text: Gure lan eremuan baditugu dagoeneko zenbait bloke. Urrats botoia erabiliko
          dugu, blokeak urratsez urrats exekutatzeko. Honela gure emaitza zuzena den
          edota zuzendu behar dugun jakingo dugu.
      3:
        image: notes/C2_bee_debugging_3.png
        text: Arazoa hemen dagoela ematen du! "Aurrera egin" beste bloke bat behar
          dugu. "Pauso bat eman" botoiak debugeatzen uzten diigu problema identifikatuz
          eta erroreak hautemanez.
    C2_digital_footprint:
      1:
        image: notes/C2_digital_footprint_1.png
        text: Buruan kapela duzu eta zure azkarrek esango dizute non zauden eta zooari
          buruz pentsatzeko eta kaizo esateko zuri eta zuri. Erabili zure burua sarean
          zaudenean zurea dena zure buru barruan gordetzeko eta seguru egoten jakiteko,
          zure bizitzari eremu pribatu bat emateko! Burutik hasita eta behatzetara,
          pausatu, horretaz pentsatu. Zure oinetatik eta sudurreraino, pausatu eta
          sarean pentsatu!
      2:
        image: notes/C2_digital_footprint_2.png
        text: Erabili zure bihotza hazteko, eta emaiozu zure buruari distira osasungarria,
          eta San Balentin egunean esan norbaiti zurea izango dela! Erabili zure bihotza
          sarean zaudenean, zuzena da eta abegikorra, eta izan adeitsua zure lagunekin,
          sarean zintzo eta atsegina izateko. Burutik hasita eta behatzetara, pausatu,
          horretaz pentsatu. Zure oinetatik eta sudurreraino, pausatu eta sarean pentsatu!
      3:
        image: notes/C2_digital_footprint_3.png
        text: Erabili besoak zure maskotari besarkada emateko, zure arropak uretatik
          babesteko, eta zure mahukarik gogokoenak eramateko eta hegan egin eta besteei
          sinestarazteko. Erabili zure besoak sarean, deskantsatu eta lasaitzeko denbora
          hartzeko eta utzi teknologia alde batera eta topatu gora igotzeko zuhaitz
          bat. Burutik hasita eta behatzetara, pausatu, horretaz pentsatu. Zure oinetatik
          eta sudurreraino, pausatu eta sarean pentsatu!
      4:
        image: notes/C2_digital_footprint_4.png
        text: Erabili sabela janaria gordetzeko eta bere korroskadak entzuteko, sabelez
          dzanga egiteko eta sodazko gozokien gasa sentitzeko. Erabili zure sabela
          sarean, zeinbat zeinu erazagutzeko, eta utzi zure bidea gidatzen eta zuzen
          ez dauden gauzak adierazten. Burutik hasita eta behatzetara, pausatu, horretaz
          pentsatu. Zure oinetatik eta sudurreraino, pausatu eta sarean pentsatu!
      5:
        image: notes/C2_digital_footprint_5.png
        text: Beraz, pentsatu zure buruarekin eta sentitu zure bihotzarekin eta neurtu
          besoekin eta entzun zure sabelari sarean. Erabili zure hankak korrika egin
          eta ostikoa emateko eta saltatzeko makilean saltatzeko eta etxe inguruan
          dantzatzeko eta galtzerdi usaintsuekin salto egiteko. Erabili zure hankak
          sarean, pasatzen diren erasotzaileei aurre egiteko eta gogoratu irmo egotea
          eta izaki handi eta txikiekin adeitsua izatea.
      6:
        image: notes/C2_digital_footprint_6.png
        text: Burutik hasita eta behatzetara, pausatu, horretaz pentsatu. Zure oinetatik
          eta sudurreraino, pausatu eta sarean pentsatu! Buruarekin pentsatu, bihotzarekin
          snetitu, besoekin neurtu, sabelari entzun eta hanken gainean zutitu. Burutik
          hasita eta behatzetara, pausatu, horretaz pentsatu. Zure oinetatik eta sudurreraino,
          pausatu eta sarean pentsatu!
    C2_digital_footprint_v2:
      1:
        image: notes/C2_digital_footprint_v2_1.png
        text: Konektatzen zaren bakoitzean, bilatu, kopiatu, elkarbanatu eta emititu
          daitekeen betiereko aztarna bat uzten duzu. Zer motatako aztarna digitala
          uzten ari zara? Zer motatako aztarna digitala utzi nahi duzu?
    C2_graph_paper:
      1:
        image: notes/C2_graph_paper_1.png
        text: Lekzio honen izena "Paper grafikoaren progrmazioa" du izena, eta algoeritmoetaz
          doa. Gaur elkarri erakutsiko diogu nola sortu zuribeltzean dauden irudiak,
          eskuz marraztutako geziak erabiliz.
      2:
        image: notes/C2_graph_paper_2.png
        text: Algoritmo bat zerbait egiteko agindu-lista bat da. Instrukzio hauek
          jarraituko ditugu. Algoritmoak oso lagungarriak dira beste batenbat behar
          baduzu zerbait egiterakoan.
      3:
        image: notes/C2_graph_paper_3.png
        text: Konputagailu baterako algoritmoa idazten ari bazara, hainbat pausoetan
          zatitu behar duzu. Lerro hau bukatu eta pasa hurrengora, gero hurrengora,
          eta bukatu egingo duzu.
      4:
        image: notes/C2_graph_paper_4.png
        text: Nire lanean algoritmoak erabiltzen ditut. Urrats guztiak idazten baditut,
          pieza bera berriz errepika dezaket, edo norbaiti nola egin irakats diezaioket.
          Jarri beira labean, urtu, jarraitu hurrengo aginduak eta bola egin. Algoritmoek
          zerbait egiteko zer bide jarraitu esaten dizute.
    C2_artist_loops:
      1:
        image: notes/C2_artist_loops_1.png
        text: Hemen errepikapen blokea erabiliko dugu gure artista programatzerakoan
          pausoak saiesten lagunduko digu. Dagoeneko baditugu eszenatokian bloke batzuk
          baina programatzen hasteko daude bakarrik.
      2:
        image: notes/C2_artist_loops_2.png
        text: Bloke horiek begizta batean sartzeko karratu oso marraztu ahal izateko,
          errepikapen blokea arrastatuko dugu, eta aurrera mugitu eta eskubira biratu
          blokeak errepikapen blokearen barnean sartuko ditugu. Kodea exekutatzean,
          artistak mugimendu horiek lau aldiz errepikatuko ditu laukia osatu arte.
    C2_bee_loops:
      1:
        image: notes/C2_bee_loops_1.png
        text: Begizta bat eragiketa bat errepikatzea da. Erlauntza bat aztertzean,
          gelaxka bat begiratu eta utzi egingo dut. Hau gelaxka guztiekin errepikatu
          behar denez, begizta batean aztertuko ditut gelaxkak.
      2:
        image: notes/C2_bee_loops_2.png
        text: Hau da errepikapen blokea. Bloke horren barnean sartzen duzun guztia
          hainbat aldiz errepikatuko da, zuk esan adina aldiz. Esate baterako, maila
          honetan, hainbat aldiz mugitu eta nektarra hartu ordez, errepikapen bloke
          batean sartu eta hiru aldiz higikaratuko dugu. Halako erraza izango da!
    C2_maze_intro:
      1:
        image: notes/C2_maze_intro_1.png
        text: Normalean programazioa testuan soilik oinarritzen da, baina guk Blockly
          erabiliko dugu, honek bloke bisualak erabiltzen baititu eta hauek arrastatuz
          idatziko ditugu gure programak. Dena den, hau funtsean programazioa da!
          Hasteko, kode zati bat idatziko dugu Angry Birds-eko txori hau labirinto
          batean zehar mugi dadin, helburutzat bere arrautzak lapurtu dizkien zerriengana
          heltzea izango duelarik.
      2:
        image: notes/C2_maze_intro_2.png
        text: Blockly hiru zati nagusitan dago banatuta. Ezkerraldean txoriaren labirintoa
          dago, non programa exekutatuko den. Maila bakoitzarentzat jarraibideak labirintoaren
          azpian daude idatzirik. Erdikaldea tresna kutxa da eta bloke horietako bakoitza
          txoriak uler dezakeen komando bat da. Eskuinaldeko espazio zuria lan eremua
          da eta bertan eraikiko dugu programa.
      3:
        image: notes/C2_maze_intro_3.png
        text: Mugitzeko blokea gure lan eremura arrastatu eta kodea exekutatuz gero,
          zer gertatzen da? Txoria mugitu egiten da aurrerantz, laukitxo bat gure
          sarean. Eta zer egingo dugu txoriak zerbait egin dezan aurrerantz pauso
          hori eman eta gero? Beste bloke bat gehi dezakegu gure programara.
      4:
        image: notes/C2_maze_intro_4.png
        text: '"Eskubira biratu" blokea hautatuko dut, eta mugimendu blokearen azpira
          mugituko dut gezi horia agertu arte. Gero, askatu egingo dut eta bi blokeak
          elkartu egingo dira. Kodea berriro ere exekutatzean, txoriak gure lan eremuan
          dauden komando guztiak beteko ditu, goitik behera.'
      5:
        image: notes/C2_maze_intro_5.png
        text: Inoiz bloke bat ezabatu nahi baldin baduzu, kendu pilatik eta arrastatu
          zakarrontzira. Behin "hasi" sakatu duzula, beti izango duzu aukera "berrezarri"
          botoia sakatzeko eta txoria hasierara bueltatzeko. Orain harrapa ditzagun
          txerri horiek!
    C2_paper_airplanes:
      1:
        image: notes/C2_paper_airplanes_1.png
        text: Ikasgai honek Bizitza Errealeko Algoritmoak du izena. Algoritmoek pertsonek
          egunero egiten dituzten gauzak deskribatzen dituzte. Gaileten errezetak
          eta txorientzako etxeak egiteko jarraibideak eguneroko algoritmoak dira.
      2:
        image: notes/C2_paper_airplanes_2.png
        text: Gaur sortu eta probatuko dugu algoritmo bat paperezko abioi bat egiteko.
          Baina lehenengo, proiektu handi hau zatitan banatu behar dugu errazago jarraitzeko.
          Paperezko abioi bat egiteko, lehenengo zein pauso egin behar ditugun erabaki
          behar dugu eta zein ordenetan eman hauek.
      3:
        image: notes/C2_paper_airplanes_3.png
        text: Zure lehenengo algoritmoa sortuko duzu lehenengo irudia zatitan banatzen.
          Gero, 6 irudi aukeratu beharko dituzu pausoak paperezko abioi bat nola egiten
          den erakusten duena eta ordenatu irudi hauek orden egokian. Behin dena ondo
          ordenatuta dagoela, beste ikasle talde batekin partekatuko da algoritmoari
          probak egiteko. Ondo diseinatutako algoritmo batek paperezko abioi hoberena
          sortu behar du.
      4:
        image: notes/C2_paper_airplanes_4.png
        text: Txokolatea egin nahi dugunean, pauso handiak eman behar dira hona iristeko.
          Pauso handi hauetako bakoitza bere azpimultzo txikia du. Gainera, errezeta
          mota desberdin asko daude, edo algoritmo, txokolatearen zaporea nolakoa
          nahi dugunaren arabera. Pauso bakoitza inportantea da, txikiak ere. Beraz,
          pauso bat gabe, gainerakoak ezin dira aurrera eraman. Besteek ulertzen dituzten
          algoritmoak egitea oso garrantzitsua da. Horregatik idatzi behar dira pauso
          guztiak.
    C2_playlab_createstory:
      1:
        image: notes/C2_playlab_createastory_1.png
        text: Orain arte, animazio edo istorio bat egiten aritu zara, exekutatzean
          behin eta berriro gauza bera egiten duena. Orain , jolas interaktiboa egin
          dezakezu eta benetan jolastu ahal izango duzu.
      2:
        image: notes/C2_playlab_createastory_2.png
        text: Probatzeko bloke berriak daude. "gezia sakatzean" eta "mugitu aktorea"
          bloke berriak ditugu. Jarri al ditzakezu bloke hauek batera aktoreak mugitzeko
          gezien bitartez? Badaude ere bloke batzuk erantzun bat emateko aktorea klikatzen
          denean edo talka egiten duenean. Proba itzazu eta jolastu hauekin!
    C2_relay_programming:
      1:
        image: notes/C2_relay_programming_1.png
        text: Gaur errelebotako programazioa egingo dugu. Presiopean programatzea
          da eta azkar programatzean edo taldean programatzean gertatu ohi diren akatsak
          arazkatu behar dira. Paper gaineko grafo programazioa erabiliko dugu kodeketa
          simulatzeko eta errelebotako lasterketak erabiliko ditugu entregatzeko data
          simulatzeko.
      2:
        image: notes/C2_relay_programming_2.png
        text: Errele programazioan taldeek paper grafiko programa bat amaitzeko leihatuko
          dira. zure taldekidearen lana aztertu behar duzu, edo araztu eta konpondu
          akatsik badago, zure gezia gehitu eta berriro hasi eta zure taldekidea etiketatu.
      3:
        image: notes/C2_relay_programming_3.png
        text: Programatzaileek asko erabiltzen dute araztatzea arazoak topatu eta
          konpontzeko euren algoritmo eta kode zatietan. Modu askotan egin daiteke
          araztatzea. Errazenetako bat pausoz-pauso mugitzea da, akatsen bat topatu
          arte. Behin topatu dugunean, konpondu egin beharko dugu.
      4:
        image: notes/C2_relay_programming_4.png
        text: Atzerako txiribuelta egiten saiatzen ari naiz hemen, baina behin eta
          berriz erortzen naiz. Urrats bakoitza birpasatu dut, urratsez urrats, eta
          arazoa non zegoen aurkitu. Nire entrenatzaileak esan zidan ez nintzela eskuak
          habean era zuzenean jartzen ari. Beraz, atzerako txiribuelta saiatu dut
          berriro eskuak habean posizio berrian jarriz eta asmatu dut! Oso pozik nago
          nire atzerako txiribuelta araztu dudalako. Asmatu genuen! Arazketa arazoak
          aurkitu eta zuzentzea da. Oso lan ona!
    C2_zuck_repeat_loop:
      1:
        image: notes/C2_zuck_repeat_loop_1.png
        text: Konputagailuak aginduak errepikatzen oso onak dira. Pertsona izanda,
          berehala aspertuko zinateke zerbait behin eta berriz egin beharko bazenu.
          Konputagailuek, ordea, gauza berdina milaka edo milioika aldiz oso ondo
          egin dezake aspertu gabe.
      2:
        image: notes/C2_zuck_repeat_loop_2.png
        text: Adibidez, Facebook guztia zoriondu nahi izango banu e-mail bat bidaliz,
          mende oso bat baino gehiago igaro nezake denentzako email horiek idazten.
          Baina kode lerro gutxi batzuekin Facebook-eko erabiltzeile guztiei zorionduz
          emailak bidaliko dituen sistema bat izan dezaket. Hauxe da begiztek egiten
          dutena, eta horren baliotsuak izatearen arrazoia, gainera ordenagailuak
          oso ondo egiteko gai dira.
      3:
        image: notes/C2_zuck_repeat_loop_3.png
        text: Adibide honetan, helburua txoria zerriarengana heltzea izango da. Orain
          eskuragarri dugun errepikapen blokea erabiliko dugu helburu hau era errazean
          lortu ahal izateko. Hau egiteko, eman ordenagailuari "aurrera mugitu" blokea
          bost aldiz, hala txoria gero eta gertuago egongo baita zerritik.
      4:
        image: notes/C2_zuck_repeat_loop_4.png
        text: Edo esaiozu ordenagailuari "mugitu aurrera" behin eta ondoren errepikatu
          dezala hau 5 aldiz, eta gauza bera egingo du. Hau egin ahal izateko arrastatu
          "mugitu aurrera" blokea eta sartu ezazu "errepikatu" blokearen barnean.
          Ondoren klikatu bertan eta esan zenbat aldiz nahi duzun agindua errepikatzea.
          Modu honetan aurrera zenbat aldiz mugitu behar duen esango diozu.
      5:
        image: notes/C2_zuck_repeat_loop_5.png
        text: Gainera, hainbat agindu jarri ditzakezu errepikapen bloke baten barruan.
          Esaterako, adibide honetan aurrera eta ezkerretara mugimenduak egingo ditu,
          bost aldiz guztira. Primeran, ondo pasa!
    C3_artist_functions:
      1:
        image: notes/C3_artist_functions_1.png
        text: Konputagailu programazioaren gauza onenetarikoa zera da, behin konputagailu
          bati gauza bat nola egin erakutsi diozunean, gauza hori berriz egin ahal
          izango duzu funtzio bati deituz. Funtzioari izen bat eman eta listo, dei
          egin diezaiokezu. Hau lengoaia zabaltzea bezala da.
      2:
        image: notes/C3_artist_functions_2.png
        text: Eraiki dugun programan, karratu bat lau aldiz mugituz eta biratuz nola
          marraztu ikasi dugu. Funtzio hori hartu eta izena jar diezaiokegu, egin
          nahi dugun bakoitzean "karratua marraztu" esanda funtzio hori inboka dezan,
          kode hori. Egingo digu. Kontzeptu hori gehitu diogu gure programazio lengoaiari.
    C3_artist_intro:
      1:
        image: notes/C3_artist_intro_1.png
        text: Ezin zara lasterketarako sailkatu informatikan onak diren pertsonak
          ez badituzu, autoek datu kantitate handia behar dutelako eta eraikuntza
          jarduera eraikitzen nola jarraituko duzun asmatuko duten programak idazten
          dakien jendea behar duzulako.
      2:
        image: notes/C3_artist_intro_2.png
        text: Puzzle hauetan, forma ezberdinak arkatzez marrazten dituen artista izango
          zara. Artista edonora joanda ere, lerro bat marraztuko du zure atzean.
      3:
        image: notes/C3_artist_intro_3.png
        text: Oihalean zehar mugitzeko, "mugitu aurrera" blokea erabiliko duzu. Hemen
          "mugitu aurrera" blokeak 100 pixel aurrera mugitzeko esaten du. "hasi" zapaltzen
          dugunean, zer gertatzen da? Artista aurrera 100 pixel mugitzen da. Pixelak
          zure ordenagailuaren pantailako karratu ñimiñoak dira.
      4:
        image: notes/C3_artist_intro_4.png
        text: Puzle honetan dugun beste blokeak eskuinera 90ko bira egin esaten du.
          Hori arrastatzen dugunean, artistak biratu egingo du. Artistak zenbateko
          bira egingo duen erabaki dezakezu. Hau 90 graduko bira da.
      5:
        image: notes/C3_artist_intro_5.png
        text: Eta hau 120 graduko biraketa bat da. Eta gogoratu, balio hauek alda
          ditzakezu zenbakien ondoan dauden geziak sakatuta. Atera barruan duzun artista!
    C3_artist_nested_loops:
      1:
        image: notes/C3_artist_nested_loops_1.png
        text: Begizta bat beste begizta baten barruan sartzeari begizta sarea deitzen
          zaio. Adibidez, hemen 100 pixeleko aldeak dituen triangeluak marrazteko
          kodea ematen digute, errepikapen blokea 3 aldiz erabiliz, alde bakoitzeko
          bana.
      2:
        image: notes/C3_artist_nested_loops_2.png
        text: Baino 6 triangelu marraztu nahi ditugu. Hori egin ordez, begizta hori
          hartu eta hainbat aldiz errepikatzeko bloke baten barruan sartuko dugu.
          Oso ondo!!!
    C3_bee_conditionals:
      1:
        image: notes/C3_bee_conditionals_1.png
        text: Hau baldintza bat da. Nektar edo eztia zenbaki bat baino gehiago/gutxiago/berdina
          bada, orduan egin zerbait.
      2:
        image: notes/C3_bee_conditionals_2.png
        text: Hau erabilgarria da zenbat nektar edo ezti dugun ez dakigunean, galdera
          ikurrarekin ikus daitekeen bezala.
      3:
        image: notes/C3_bee_conditionals_3.png
        text: Adibide honetan, lore moreak 0 nektar baino gehiago baldin badu, hartu
          nektarra. Honi esker gure erleak nektarra hartzen jarraituko du lorean badagoen
          bitartean. Ta-txan!
    C3_bee_debugging:
      1:
        image: notes/C3_debugging_bee_1.png
        text: Entzun al duzu "programa bat debugeatu" esaldia? Horrela ikus dezakegu
          zer doan gaizki. Kodea debugeatzen duzunean, erroreak identifikatu eta konpontzen
          dituzu.
      2:
        image: notes/C3_debugging_bee_2.png
        text: Gure lan eremuan baditugu dagoeneko zenbait bloke. Urrats botoia erabiliko
          dugu, blokeak urratsez urrats exekutatzeko. Honela gure emaitza zuzena den
          edota zuzendu behar dugun jakingo dugu.
      3:
        image: notes/C3_debugging_bee_3.png
        text: Arazoa hemen dagoela ematen du! "Aurrera egin" beste bloke bat behar
          dugu. "Pauso bat eman" botoiak debugeatzen uzten diigu problema identifikatuz
          eta erroreak hautemanez.
    C3_bee_functions:
      1:
        image: notes/C3_bee_functions_1.png
        text: Konputazioaren munduan kontzeptu garrantzitsuenetako bat agindu berriak
          definitzea da, zure hitzak programazio lengoaia batera gehitzea. Lengoai
          gehienak 100 agindu inguru izaten dituzte. Artea eta magia hitz berri hauek
          definitzean datza.
      2:
        image: notes/C3_bee_functions_2.png
        text: Hau bera etengabean egiten dugu kiroletan. Adibidez, saskibaloian, bote
          egiten ikasten hasten zara, sarrera bat egiten, erreboteak hartzen. Oso
          oinarrizko mugimendu hauek ikasten dituzunean, mugimendu berriak ikasten
          dituzu, eta eraikuntza bloke hauek elkarrekin ipintzen, "pick and roll"
          bat bezala. Orduan jokaldi konplikatuagoetara joan zaitezke. Behin jokaldia
          ikasita eta honi izen bat emanda, taldeko edonork jakingo du nola egiten
          den.
      3:
        image: notes/C3_bee_functions_3.png
        text: Antzera, ordenagailu bati ekintza bat nola egiten den irakasten diozunean
          komando sekuentzia horiek erabiliz, ekintza horri nahi duzun izena eman
          ahal diozu errepikatzea erraza izateko. Komando berri bat definitzen duzunean
          eta izen bat ematen diozunean, honi funtzio deritzo. Orain funtzioak erabiliko
          ditugu erleari laguntzeko.
      4:
        image: notes/C3_bee_functions_4.png
        text: Adibide honetan, gure funtzioa "hartu bi nektar" deitzen da, hemengo
          bloke berde hau. Badakigu "hartu bi nektar" funtzio definizioa adierazten
          duen kutxa grisari begiratuta ibiltzen dela. Hor barruan begiratzen badugu,
          "hartu bi nektar" blokeak nektarra hartu eta berriz hartuko du. Begiratu
          beti kutxa grisarn barruan zer dagoen funtzio bloke berdeek zer egin dezaketen
          jakiteko.
    C3_bee_nested_loops:
      1:
        image: notes/C3_bee_nested_loops_1.png
        text: Orain begizta habiaratuak erabiliko ditugu erlearekin. Hasiera kodea
          dugu erleari aurrera mugitu, 3 aldiz nektarra hartu eta eskuinera biratzeko
          esaten diona. Har dezagun kode zati osoa eta "errepikatu" bloke baten barruan
          habiaratu eta 3 errepikapen jarri. Eginda!
    C3_bounce:
      1:
        image: notes/C3_bounce_1.png
        text: Orain zure lagunekin partekatzeko aukera izango duzun zure lehenengo
          errebote jokoa sortzeko zorian zaude. Mundiala!
      2:
        image: notes/C3_bounce_2.png
        text: Hasi ahal izateko erraketaren kontrolak teklatuaren gezidun teklekin
          lotu behar ditugu.
      3:
        image: notes/C3_bounce_3.png
        text: Hau egin dezakegu "ezkerrerako gezia sakatzean" blokea "mugitu ezkerrera"
          blokera lotuz eta gauza bera "eskuinerako gezia sakatzean" eta "mugitu eskuinera"
          blokeekin eginez. Saiatu zaitez eta gutxi barru zure errebote jokoa programatzen
          ariko zara!
    C3_computational_thinking:
      1:
        image: notes/C3_computational_thinking_1.png
        text: Ikasgai honetan pentsamendu abstraktua landuko dugu. Batzuetan, jolas
          berri bat ikastea gogorra izan daiteke, ezta? Hasieran, nahasgarria dirudi
          eta, batzuetan, ez dago inor zure arauak azalduko dizkizunik, eta zure kabuz
          asmatu behar duzu nola jolastu.
      2:
        image: notes/C3_computational_thinking_2.png
        text: Hemengo ozena da gero eta hobeagoa izan zaitezkela pentsamendu-trukoak
          jakinda. Truko hauek arazoak konpontzeko balio dute. Lekzio honetan, horrelako
          4 truko ikasi eta zure lagunekin praktikan jarriko dituzu, jokuaren erregelak
          zein diren imaginatzeko.
      3:
        image: notes/C3_computational_thinking_3.png
        text: 'Problema handi bat hainbat zati txikiagotan banatzen duzunean, zure
          burmuina erabiltzen ari zara problema handiaren zailtasuna deskonposatzeko.
          Behin hori eginda, hurrengo trukora pasa gaitezke: patroi-parekaketa.'
      4:
        image: notes/C3_computational_thinking_4.png
        text: Hau gertatzen da gauzen artean antzekotasunak bilatzen ditugunean. Behin
          berdinak diren gauzak bereizten dakigunean, gai gara konturatzeko ze gauzak
          diren diferenteak. Diferentzia horiek desagertzen direnean, horri abstrakzioa
          deitzen zaio.
      5:
        image: notes/C3_computational_thinking_5.png
        text: Behin arazoa konpontzeko pausoak asmatu eta gero orden zehatz batean
          jarri ditzakezu algoritmoa izenekoa edozeinek erabili ahal izateko. Lau
          pauso hauek erabiliko ditugu joko arau gabe nola jolasten de asmatzeko.
          Jokoaren bukaeran horrelako itxura duen zerbait jolasteko gai izango zara!
    C3_crowdsourcing:
      1:
        image: notes/C3_crowdsourcing_1.png
        text: Ikasgai hau talde lana deitzen da. ikasgai honetan, kartak erabiliko
          ditugu taldeko lanak nola lagun gaitzaken ikusteko. Beraz, bildu lagun batzuk
          eta egin zerbait ikaragarria. Talde lana taldean erabiltzen da, lana azkarrago
          egiteko.
      2:
        image: notes/C3_crowdsourcing_2.png
        text: Informatikan talde-lana erabiltzen da uneoro. Milaka amateur eta profesionalek
          beraien konputagailuak konektatzen dituzte bilioika informazio-zatien artean
          bilatzeko. Marsenne-ren zenbaki bakoitia topatzeko edota alienekin komunikatzeko
          asmoarekin.
      3:
        image: notes/C3_crowdsourcing_3.png
        text: Film bat ikusten duzunean, filmaren segundo bakoitza 24 irudi independentez
          osatzen da. Irudi horiei fotograma esaten diegu. Irudi horietako bakoitzak
          behar du sortzea eta erreproduzitzea eta denak elkarrekin jartzea behar
          du. Nire taldea eta ni, denak software garatzaileak gara. Denok batera lan
          egiten dugu software pakete bat sortzeko irudi bat sortzen duena, pantailan
          ikusten duzun azken irudia sortzen duena hain zuzen ere. Artistek eta beste
          garatzaile batzuk haien talde laneko parte gisa erabil dezaketen tresna
          bat eta erabili dezaketena pantailan ikusi nahi dituzten irudiak irudiak
          sortzeko prozesuan.
      4:
        image: notes/C3_crowdsourcing_4.png
        text: Adibidez, Nemoren bilan, Crush eta Squirt eta bere lagunak hegan egiten
          ari dira Australiako Ekialdeko korrontean zehar. Mugitzen den uraren irudiak
          ikus daitezke, dortokaren bizkarrean ikusten dituzun koloreak arrainen aldeetan
          ikusten dituzu. Hori guztia matematika eta guk idazten ditugun ordenagailu
          programen bidez egiten da. Horiek gero artistari ematen dizkiogu eta erurek
          azken irudia egiten dute, findu eta eder eta dibertigarri bihurtzen dituzte.
    C3_dice_race:
      1:
        image: notes/C3_dice_race_1.png
        text: Ikasgai hau labirinto karrera deitzen da. Ia pertsona guztiek gogoko
          dute ordenagailuan jokoetan jokatzea. Noizbait pentsatu al duzu nola konputagailuen
          programatzaileek egiten duten joko baten pausoa programa batean bihurtu?
          Lehenengo pausoa ordenagailuen jokoak egiteko eta edozein problema konpontzeko,
          pentsatzea eta plangintza bat egitea da.
      2:
        image: notes/C3_dice_race_2.png
        text: Problema bat nola konpondu pentsatzeak, algoritmo bat sortzen du, problema
          ebazteko pausoak definitzen dituena. Ikasgai honetan, dado jokoarentzako
          algoritmo bat diseinatuko duzu. Zure lagunek algoritmo hori jarraituz jokatu
          beharko dute. Programatzailea emandako pausoaz ziur dagoenean, algoritmoa
          programa bihurtzeko ordua da, ordenagailuak ulertu dezan.
      3:
        image: notes/C3_dice_race_3.png
        text: Egunean egiten dugun ia guztiak algoritmo bat behar du, pauso lista
          bat non ataza bukatzeko jarraitu dezakezuna. Pentsatu eskolara joateko prestatu
          nahi duzula edo egun dibertigarri bat planteatzen zaudela zure lagunekin
          edo otordu bat hartzeko. Ataza hauetako edozein aurrera eramateko, zatitan
          banatu beharko da eta batzuetan pausoak ordena zehatz batean egon behar
          dira.
      4:
        image: notes/C3_dice_race_4.png
        text: Pentsatu sandwich bat egin nahi duzula. Berdin dio zein osagai jartzen
          duzun lehenengo. Baina ezin duzu kakahuete gurina jarri honen edukiontzia
          ireki arte. Ordenagailuek algoritmoak behar dituzte eta programak erakusteko
          hauei nola eraman aurrera gauza sinpleak horretan pentsatu gabe.
      5:
        image: notes/C3_dice_race_5.png
        text: Algoritmo bat konputagailuari berak egin beharreko ekintzak programatu
          aurreko pentsatzeko pausoa da. Algoritmo bat makina-lengoia batera pasa
          beharko da berau exekutatzeko. Ekintza hori hainbat pausotan banatuz askotan
          zaila izaten da, baina edozein gauza berrietan bezala, praktikarekin asko
          errazten da.
    C3_farmer_while:
      1:
        image: notes/C3_farmer_while_1.png
        text: 'Begiztak eguneroko bizitzan egiten dugunaren oso antzekoak dira. Imajinatu
          zure autoa garbitzen ari zarela, hau garbitzen jarraituko duzu guztiz garbi
          egon arte. Beste modu batera esanda, garbi ez dagoen bitartean garbitzen
          jarraitu. Honelako kontuak uneoro ebaluatzen dituzu. '
      2:
        image: notes/C3_farmer_while_2.png
        text: Gauza berri bat dugu baserritarrari laguntzeko. "hile-block" deitzen
          da. Egia esan, erraza da. Goiko agindua egia den bitartean, zerbait egin.
          Adibidez, meta dagoen bitartean mugitu belra multzo bat. Aurrera eta probatu
          zure baserritarrarekin.
    C3_functional_suncatchers:
      1:
        image: notes/C3_functional_suncatchers_1.png
        text: Eguzki-harrapatzaile erabilgarria egiteko ikasgaia. Funtzioak erabiliz
          egingo dituzu honako eguzki-harrapatzaileok. Urrats batzuk jarraitu beharko
          dituzu eta horietako batzuk maiz errepikatu beharko dituzu.
      2:
        image: notes/C3_functional_suncatchers_2.png
        text: Eguzki-harraptzaile apaingarria egiteko prozesua sinplifikatzeko lehenengo
          urratsa, errepikatu beharreko agindu segida funtzio batean sartzea da.
      3:
        image: notes/C3_functional_suncatchers_3.png
        text: Eguzki-harrapatzaile ederra sortzea urrats zehatzak jarraitzetik areago
          doa. Batzutan, sortzaileak izateko apeta dugu eta erabiltzen ari garen aleen
          kolorea aldatu nahi izan ohi dugu. Eguzki-harrapatzailea berezia eta bakarra
          egin dezakegu ale-koloredun ezberdinak erabilita.
      4:
        image: notes/C3_functional_suncatchers_4.png
        text: 'Zure eguzki-harrapatzailea bakarra izango da munduan aleak aldagai
          gisa ikusteari ekiten diozunean. Aldagai bat zera da: informazioa duen kokapen-marka
          da, informazioa alda daiteke. Eguzki-harrapatzaile politak sor itzazu funtzio
          eta aldagiak erabiliz eta goza ezazu!'
    C3_internet:
      1:
        image: notes/C3_internet_1.png
        text: Ikasgai oso hau Internetaren ingurukoa da. Interneta oso lanpetuta dagoen
          lekua da, errepide baten antzekoa. Mezuak kotxearen antzekoak dira eta beraien
          helburura iritsi nahi dute. Mezuak Internetaren barnean oso azkar dabil.
      2:
        image: notes/C3_internet_2.png
        text: Interneta nola dabilen ikasten baduzu zuk erabiltzean zer egiten duen
          jakiteko lagunduko dizu. Zure mezuak zure lagunaren postara edo zure web
          gune gustokoenera nola bidaltzen diren ikasiko duzu ere. Behin errepide
          bat ezagututa bertatik gidatzea erreza den bezela behin interneta ezagututa
          bertan nabigatzea erraza izango da.
      3:
        image: notes/C3_internet_3.png
        text: 'Internetez mezuak bidaltzea eta postaz bidaltzea, antzekoak dira. Internetez
          bidaltzeak berezitasun batzuk ditu. Esaterako: hemen naiz, Google.com-en.
          Web orri honen IP helbidea zenbaki hau da. IP helbidea posta jasotzen duenaren
          helbidearearekin pareka daiteke. Demagun mezu bat bidali nahi diozula postaz
          beheko bulegoan dagoen norbaiti. URLa eta IP helbidea ikus ditzakezu bere
          atean? Mezua idatzi dut eta bidali sakatu.'
      4:
        image: notes/C3_internet_4.png
        text: Posta zerbitzu arruntean ez bezala, gertatzen den lehenengo gauza da
          Internetek mezua zati txikiagoetan banatzen duela errazago bidali ahal izateko.
          Zati txiki hauei paketeak deritze. Aldiro, pakete horietako bat bidaltzen
          da helburura. Ondoren, pakete guztiak elkartu eta ordenatu egiten dira jasotzaileak
          mezua behar bezala irakurtzeko aukera izan dezan. Noski Internetaren funtzionamenduaren
          inguruan gauza askoz gehiago dago ikasteko, baina hauxe, hasteko modu ona
          da. Internet erabiltzaile jakintsu bat bihurtzeko bidean zaude! Segi zure
          familia eta lagunei ikasi duzuna kontatzera!
      5:
        image: notes/C3_internet_5.png
        text: Nire izena Amanda Camp da eta Sotfware Ingeniaria naiz Google-en. Profilak
          eta kontaktuak gordetzen dituen zerbitzari batean lan egiten duen talde
          batean lan egiten dut. Nire lanean, asko pentsatzen dugu kontaktuan nola
          bidali dezakegun beste gailu batzuetara, ala nola zure mugikor zenbakia.
          Pertsona askok kontaktu asko dauzkate, 1000 kontaktu adibidez, eta ez dugu
          kontaktu hauek guztiak batera bidali oso mezu luzea baita. Internetak mezu
          luzeak paketetan banatzen dituen modura, kontzeptu bat erabiltzen dugu,
          orrikatzea deritzona, non zure mugikor zenbakia 100 kontakturi bakarrik
          bidaltzen zaien aldiro. Eta zure mugikorrari erantzuten dio hurrengo 100
          kontaktuekin.
      6:
        image: notes/C3_internet_6.png
        text: Softwareak duen gauzarik garrantzitsuena munduan izan dezakeen eragina
          da. Nire lehen hastapenak 19 urte nituela egin nituen. Unibertsitateko bigarren
          urtea egiten ari nintzela uste dut. Idatzi nuen lehen programak tenperaturak
          Fahrenheit formatutik Celsiusera eraldatzen zituen. Programazioak jendeari
          asko lagun diezaiokelakoan nago, horregatik gustatzen zait hainbeste. Googlen
          mundu osoari laguntzeko programak idatz ditzaket, oso interesgarria da,
          zalantzarik gabe.
    C3_maze_conditionals:
      1:
        image: notes/C3_maze_conditionals_1.png
        text: Jendeak egunero erabakiak hartzen ditu. Adibidez, kalera joan aurretik
          baldintza bat erabiltzen duzu, euria ari badu xira hartu beharra daukat.
          Konputagailuak zoragarriak dira, behin horrelako gauzak erabakita abiadura
          sinestezinean exekuta ditzakete. Konputagailu programa bat, matematika pixka
          bat eta erabakiak hartzeko baliagarriak diren hainbat baldintzaz osatzen
          da.
      2:
        image: notes/C3_maze_conditionals_2.png
        text: '"Baldin" blokeak zonbiari laguntzen dio erabakiak hartzen. Zerbait
          aztertzen du. Adibidez, ea ezkerraldean bide bat dagoen aztertzen duen blokea
          erabil dezagun, eta jarri bere barruan ezkerraldera bira egiteko agindua.
          Horrekin zonbiari esaten diogu bere ingurua aztertzeko, begiratzeko ea bide
          bat dagoen ezkerraldean eta horrela bada bira egiteko.'
      3:
        image: notes/C3_maze_conditionals_3.png
        text: Gero, erabil ezazu "aurrera mugitu" blokea errepikapen bloke honen barruan,
          aurrera mugitzeko berak nahi duen heinean. Geroago, aldaketa bat dagoenean,
          if blokeak esango sizu noiz mugitu ezkerretara. Ikusiko duzu nola hori egiten
          badugu, ezkerratara giratu eta eta aurrera jarraitzen badugu, gure helburua
          lortuko dugu.
      4:
        image: notes/C3_maze_conditionals_4.png
        text: Adibide honek baldintzak nola erabili ulertarazten du, oinarrizko kontzeptua
          dena programazioaren munduan. Ikasi nuen lehenetariko gauza lerrokatu hiru
          motako joko bat nola idatzi izan zen. Baldintza batzuk zituen aurkaria irabaztear
          bazegoen beharrezko gelaxka blokeatzeko. Ondo pasa baldintzak nola erabili
          ikasten, hau oinarrizko kontzeptua da.
    C3_maze_level_4:
      1:
        image: notes/C3_maze_level_4_1.png
        text: Adibide honetan, zure helburua da zonbia eramatea ekiloreraino. Erabil
          daitezke "mugitu aurrera" bost bloke edo esan diezaiokegu ordenagailuari
          aurrera mugitzeko eta bost aldiz errepikatzeko errepikatu behin blokea erabiliz.
      2:
        image: notes/C3_maze_level_4_2.png
        text: Honi esker denbora aurreztuko duzu eta gainera errazagoa da. Hau erabiltzeko,
          sartu "mugitu aurrera" blokea "errepikatu" blokearen barruan. Sakatu "Exekutatu"
          eta zonbia aurrera mugituko da bost aldiz ekilore gozo-gozoraino.
    C3_playlab_create_game:
      1:
        image: notes/playlab_1.png
        text: Orain arte, animazio edo istorio bat egiten aritu zara, exekutatzean
          behin eta berriro gauza bera egiten duena. Orain , jolas interaktiboa egin
          dezakezu eta benetan jolastu ahal izango duzu.
      2:
        image: notes/playlab_2.png
        text: Probatzeko bloke berriak daude. "gezia sakatzean" eta "mugitu aktorea"
          bloke berriak ditugu. Jarri al ditzakezu bloke hauek batera aktoreak mugitzeko
          gezien bitartez? Badaude ere bloke batzuk erantzun bat emateko aktorea klikatzen
          denean edo talka egiten duenean. Proba itzazu eta jolastu hauekin!
    C3_songwriting_with_parameters:
      1:
        image: notes/C3_songwriting_with_parameters_1.png
        text: Hau da abestiak idazten ikasteko unea. Musikak ordenagailu programa
          batekin antz handia du. Notek eta hitzek kantariari esaten diote zer egin
          behar duen zehatz mehatz. Musika zati batzuk behin eta berriro erabiltzen
          dira.
      2:
        image: notes/C3_songwriting_with_parameters_2.png
        text: Honi abestiaren leloa deitzen diogu. Ordenagailu programa batean, behin
          eta berriro erabiltzen diren zatiei funtzio izena ematen zaie. Musika partitura
          bat irakurtzean, lelo hitza agertzen denean, kantatzen al duzu hitz hori?
          Ez, orrialdearen goiko aldera begiratzen duzu ikusteko zein hitzek osatzen
          duten leloa.
      3:
        image: notes/C3_songwriting_with_parameters_3.png
        text: Ikasgai honetan, abesti txotxolo bat ikasiko duzu. Abestiak lelo bat
          dauka, behin eta berriro kantatzen dena. Funtzio bat kode zati bat da, behin
          eta berriro erabil dezakezuna. Programazioa errazagoa eta eraginkorragoa
          egiten du, eta horrela ez dituzu zure funtzioko urrats guztiak behin eta
          berriro idatzi behar. Behin bakarrik idatzi behar duzu!
    C4_bee_conditional:
      1:
        image: notes/C4_bee_conditional_1.png
        text: Hau baldintzapeko blokea da. Lorean edo abaraskan baldin bazaude, zerbait
          egin beharko duzula adierazten du. Oso erabilgarria da ez dakigunean zenbat
          nektar edo ezti jaso behar dugun, hemen galdera markak adierazten duen bezala.
      2:
        image: notes/C4_bee_conditional_2.png
        text: 'Adibide honetan, hau idatziko dugu: lore bat baldin badago, eskuratu
          nektar guztia; eta abaraska bat baldin badago, egin eztia. Ta-txan!'
    C4_conditionals:
      1:
        image: notes/C4_conditionals_1.png
        text: Bloke berri bat daukagu, "baldin-bestela" izena duena. Baldintzapeko
          agindu bat da, aurreko ariketatan erabili duzun "baldin" blokearen antzekoa.
          Baina oraingo honetan, beheko aldean, badago atal berri bat "bestela" dioena.
          "Baldin-bestela" blokeari esker, erleak bi aukera desberdinen artean erabaki
          dezake zer egin. Erlea lore batean baldin badago, blokearen goiko zatian,
          "egin"-en ondoren jarri dituzun ekintzak egingo ditu. Erlea ez badago lore
          batean, "bestela"-ren ondoren jarri dituzun ekintzak egingo ditu.
      2:
        image: notes/C4_conditionals_2.png
        text: '"Baldin" aginduei esker, konputagailuek har ditzakete erabakiak. Programatzaileak
          ezartzen ditu baldintzak konputagailuarentzat: egoera jakin bat gertatzen
          bada, orduan konputagailuak ekintza jakin batzuk egin beharko ditu. Bestela,
          hau da, baldintza betetzen ez bada, orduan beste ekintza batzuk egin beharko
          ditu konputagailuak. Gure "baldin-bestela" blokearen goiko zatian <<baldin
          lore batean>> jartzen du. Baina beste edozer gauza jar genezakeen; adibidez:
          <<baldin 2 nektar>> edo <<baldin bidea libre aurrera>>, eta gure blokearen
          funtzionamendua berdina izango litzateke. Hau da, "baldin" blokearen baldintza
          egiazkoa bada (betetzen bada, alegia), lehenengo multzoko ekintzak egingo
          ditu. Faltsua bada (baldintza betetzen ez bada), berriz, bigarren multzoko
          ekintzak egingo ditu.'
    C4_for_loops:
      1:
        image: notes/C4_for_loops_1.png
        text: Begizta bat sortzeko zure kodean errepikatu bloke bat erabiltzen duzunean,
          nola daki konpatagailuak nahikoa aldiz errepikatu duela? errepikatu blokeak
          kode zati konplexuago bat izkutatzen du, "for" izeneko begizta, hasierako
          balio batetik amaierako baliorarte inkrementu zehatz batekin zenbatzen duena.
      2:
        image: notes/C4_for_loops_2.png
        text: Adibidez, errepikatu hiru blokeak 1etik 3arte zenbatzen du, banaka.
          Zenbatzen duen aldi bakoitzean, begiztaren barneko kodea exekutatzen du.
          "for" begiztak zenbat aldiz exekutatu den jakiteko kontagailu aldagai bat
          erabiltzen du, hasierako balioarekin hasieratzen dena begiztaren hasieran
          eta inkrementu zehatz batekin gehitzen dena begizta exekutatzen den bakoitzean.
          Kontagailu aldagaiaren balioa amaierako balioa baino handiagoa denean, begizta
          amaitzen da.
      3:
        image: notes/C4_for_loops_3.png
        text: Errepikatu blokearen ordez benetako begiztak erabiltzearen abantaila
          zera da, zure begiztan bertan kontagailua aldagaiaren balioa ikusi eta erabili
          dezakezula. Adibidez, lore batzuk badauzkat eta lehenengoak nektar bat badu,
          bigarrenak bi nektar eta hirugarrenak hiru, for begizta erabili dezaket
          erleari 'kontagailua' nektar biltzeko aldi bakoitzean, hau da, bat lehenengo
          lorean, bi bigarrenean, eta hiru hirugarrenean.
      4:
        image: notes/C4_for_loops_4.png
        text: For begiztan ere, kontagailua zenbaki batekin inkrementatu dezakezu
          aldi bakoitzean. 2naka, 4naka edo aldi bakoitzean aldatzen den kopuruka
          zenbatu dezakezu.
    C4_for_loops_bee:
      1:
        image: notes/C4_for_loops_bee_1.png
        text: Begizta bat sortzeko zure kodean errepikatu bloke bat erabiltzen duzunean,
          nola daki konpatagailuak nahikoa aldiz errepikatu duela? errepikatu blokeak
          kode zati konplexuago bat izkutatzen du, "for" izeneko begizta, hasierako
          balio batetik amaierako baliorarte inkrementu zehatz batekin zenbatzen duena.
      2:
        image: notes/C4_for_loops_bee_2.png
        text: Adibidez, errepikatu hiru blokeak 1etik 3arte zenbatzen du, banaka.
          Zenbatzen duen aldi bakoitzean, begiztaren barneko kodea exekutatzen du.
          "for" begiztak zenbat aldiz exekutatu den jakiteko kontagailu aldagai bat
          erabiltzen du, hasierako balioarekin hasieratzen dena begiztaren hasieran
          eta inkrementu zehatz batekin gehitzen dena begizta exekutatzen den bakoitzean.
          Kontagailu aldagaiaren balioa amaierako balioa baino handiagoa denean, begizta
          amaitzen da.
      3:
        image: notes/C4_for_loops_bee_3.png
        text: Errepikatu blokearen ordez benetako begiztak erabiltzearen abantaila
          zera da, zure begiztan bertan kontagailua aldagaiaren balioa ikusi eta erabili
          dezakezula. Adibidez, lore batzuk badauzkat eta lehenengoak nektar bat badu,
          bigarrenak bi nektar eta hirugarrenak hiru, for begizta erabili dezaket
          erleari 'kontagailua' nektar biltzeko aldi bakoitzean, hau da, bat lehenengo
          lorean, bi bigarrenean, eta hiru hirugarrenean.
      4:
        image: notes/C4_for_loops_bee_4.png
        text: For begiztan ere, kontagailua zenbaki batekin inkrementatu dezakezu
          aldi bakoitzean. 2naka, 4naka edo aldi bakoitzean aldatzen den kopuruka
          zenbatu dezakezu.
    C4_for_loops_no_bee:
      1:
        image: notes/C4_for_loops_no_bee_1.png
        text: Begizta bat sortzeko zure kodean errepikatu bloke bat erabiltzen duzunean,
          nola daki konpatagailuak nahikoa aldiz errepikatu duela? errepikatu blokeak
          kode zati konplexuago bat izkutatzen du, "for" izeneko begizta, hasierako
          balio batetik amaierako baliorarte inkrementu zehatz batekin zenbatzen duena.
      2:
        image: notes/C4_for_loops_no_bee_2.png
        text: Adibidez, errepikatu hiru blokeak 1etik 3arte zenbatzen du. Zenbatzen
          duen aldi bakoitzean begiztaren barneko kodea exekutatzen du. zenbat aldiz
          exekutatu den jakiteko kontagailu aldagai bat erabiltzen du, hasierako balioarekin
          hasieratzen dena begiztaren hasieran eta inkrementu zehatz batekin gehitzen
          dena begizta exekutatzen den bakoitzean. Kontagailu aldagaiaren balioa amaierako
          balioa baino handiagoa denean, begizta amaitzen da. Errepikatu blokearen
          ordez benetako begiztak erabiltzearen abantaila zera da, zure begiztan bertan
          kontagailua aldagaiaren balioa ikusi eta erabili dezakezula.
    C4_function_create:
      1:
        image: notes/C4_function_create_1.png
        text: Funtzio blokeak editatu dituzula, hutsetik funtzio berri bat sortzeko
          garaia da. Oso erraza da. Tresna-kutxak funtzioak izeneko kategoria du.
          Bertan klik egiten baduzu, sortu funtzioa izeneko botoi laranja ikusiko
          duzu. Botoian klik egin eta existitzen diren funtzio blokeak editatzeko
          erabili duzun funtzio editorea bistaratuko zaizu.
      2:
        image: notes/C4_function_create_2.png
        text: Lehen bezala, hasi funtzioari izena ematen, funtzioak egingo duenaren
          deskribapena idatziz. Adibidez, karratua edo triangelua marraztuko ditu
          eta, ondoren, tresna-kutxatik blokeak arrastatu beheko laneremu zurira.
          Gogoratu, bloke hauek funtzioa ixteko bloke berdearen barnera arrastatu
          behar dituzu.
      3:
        image: notes/C4_function_create_3.png
        text: Amaitu duzunean, egin klik gorde-n eta irten. Puzle nagusiaren laneremura
          itzuliko zara. Sortu berri duzun funtzioa bloke berde gisa azalduko zaizu
          zure tresna-kutxaren funtzioak kategoriaren barnean. Arrastatu eta askatu
          laneremu nagusian eta puzlea ebazteko beste blokeen gisa erabili ahal izango
          duzu.
    C4_function_edit:
      1:
        image: notes/C4_function_edit_1.png
        text: Konputagailu programazioaren gauza onenetarikoa zera da, behin konputagailu
          bati gauza bat nola egin erakutsi diozunean, gauza hori berriz egin ahal
          izango duzu funtzio bati deituz. Funtzioari izen bat eman eta listo, dei
          egin diezaiokezu. Hau lengoaia zabaltzea bezala da.
      2:
        image: notes/C4_function_edit_2.png
        text: Eraiki dugun programan, karratu bat lau aldiz mugituz eta biratuz nola
          marraztu ikasi dugu. Funtzio hori hartu eta izena jar diezaiokegu, egin
          nahi dugun bakoitzean "karratua marraztu" esanda funtzio hori inboka dezan,
          kode hori. Egingo digu. Kontzeptu hori gehitu diogu gure programazio lengoaiari.
      3:
        image: notes/C4_function_edit_3.png
        text: Puzle hontan, zuretzat sortu dugu marraztu karratua funtzioa. Tresna-kutxan
          topatuko duzu bloke berde gisa. Karratu bat marrazteko lehen idatzi duzun
          kode bera idatzi behar duzu eta funzio hontan jarri. Horretarako, egin klik
          marraztu karratua bloke berdeko editatu aukeran. Honek funtzio editorea
          irekiko du. Funtzio editoreak 3 atal ditu. Funtzioari izena emateko lekua.
          Funzioaren aurretiko bloke berdean azalduko da hau. Ondoren idatzi zure
          funtzioak egingo duenaren deskribapen laburra.
      4:
        image: notes/C4_function_edit_4.png
        text: Kasu hontan, karratua marraztuko du. Hemen azpiko espazio zuria laneremua
          da eta orain arte erabili duzun laneremua bezalakoa da. Tresna-kutxako blokeak
          arrastatu eta askatu laneremuan. Gogoratu, karratua sortuko duten blokeak
          funtzioa itxiko duen bloke berdearen barruan jarri behar dira. Amaitutakoan,
          gorde eta irten. Honek puzle nagusiaren laneremura itzuliko zaitu. Aurrerantzean
          marraztu karratua funtzioa blokea erabili dezakezu puzlea ebazteko beste
          edozein blokeren gisan.
    C4_function_parameters:
      1:
        image: notes/C4_function_parameters_1.png
        text: Hemen duzu 50 pixeleko aldeak dituen karratua marrazteko funzioa. Aparta
          baina eta 50 pixeleko karratu bat eta 100 pixeleko beste mat marraztu nahi
          baditugu? ez genituzke ia gauza bera egiten duten bi funtzio egin beharko.
          Parametro bat duen funtzioa erabili dezakegu.
      2:
        image: notes/C4_function_parameters_2.png
        text: |-
          Parametroek funtzioetan aldagai gisa erabiliko diren balioak pasatzea ahalbidetzen dute. Funtzio honi Luzera izeneko parametroa gehitzen saiatuko gara tamaina desberdineko karratuak marraztu ahal izateko. Funtzio editorean, lehen bezala funtzioaren izena eta azalpena editatu ditzakezu baina
          parametro bat ere gehitu dezakezu. Idatzi parametroaren izena eremuan eta egin klik Gehitu Parametroa-n. Honek, sortu berri duzun parametroaren izena duen bloke gorri bat sortuko du. Orain, "mugitu aurrera 100 pixel" blokea ordeztu dezakezu Luzera parametroarekin aurrera Luzera-k adierazten duen adina egin dezan.
      3:
        image: notes/C4_function_parameters_3.png
        text: Gorde eta irten, eta arrastatu tresna-kutxako funtzioak kategorian sortu
          berri duzun sortu karratua blokea. Luzera-n aldamenean espazio hutsa ikusiko
          duzu funtzioak Luzera parametroaren balioa jakin behar duelako. Matematika
          kategoritik arrastatu zenbakizko bloke bat eta espazio horretan kokatu.
          Funtzioa behin eta berriro erabili dezakezu luzera desberdinekin tamaina
          desberdineko karratuak marrazteko. Probatu zuk zeuk!
    C4_intro:
      1:
        image: notes/C4_intro_1.png
        text: Normalean programazioa testuan soilik oinarritzen da, baina guk Blockly
          erabiliko dugu, honek bloke bisualak erabiltzen baititu eta hauek arrastatuz
          idatziko ditugu gure programak. Dena den, hau funtsean programazioa da!
          Hasteko, kode zati bat idatziko dugu Angry Birds-eko txori hau labirinto
          batean zehar mugi dadin, helburutzat bere arrautzak lapurtu dizkien zerriengana
          heltzea izango duelarik.
      2:
        image: notes/C4_intro_2.png
        text: Blockly hiru zati nagusitan dago banatuta. Ezkerraldean txoriaren labirintoa
          dago, non programa exekutatuko den. Maila bakoitzarentzat jarraibideak labirintoaren
          azpian daude idatzirik. Erdikaldea tresna kutxa da eta bloke horietako bakoitza
          txoriak uler dezakeen komando bat da. Eskuinaldeko espazio zuria lan eremua
          da eta bertan eraikiko dugu programa.
      3:
        image: notes/C4_intro_3.png
        text: Mugitu blokea gure laneremura arrastatu eta "hasi" sakatzen badut, zer
          gertatzen da? Txoriak gelaska bat egingo du aurrera. Eta aurrera egin ondoren
          txoriak beste zerbait egitea nahi badut? Gure programari beste bloke bat
          gehitu diezaioket.
      4:
        image: notes/C4_intro_4.png
        text: '"biratu eskuinera" blokea aukeratuko dut eta nire mugitu blokearen
          azpira arrastatuko dut gezi horia azaltzen den arte. Gero, askatu eta bi
          blokeek bat egingo dute. Berriro "Abiarazi" sakatzerakoan, txoriak gure
          lan eremuan dauden komando guztiak beteko ditu, goitik behera.'
      5:
        image: notes/C4_intro_5.png
        text: Inoiz bloke bat ezabatu nahi baldin baduzu, kendu pilatik eta arrastatu
          zakarrontzira. Behin "hasi" sakatu duzula, beti izango duzu aukera "berrezarri"
          botoia sakatzeko eta txoria hasierara bueltatzeko. Orain harrapa ditzagun
          txerri horiek!
    C4_math_artist:
      1:
        image: notes/C4_math_artist_1.png
        text: 50 pixeleko altuera eta zabaleran altueraren bikoitza duen laukizuzena
          marraztu nahi dut, nola programatu konputagailua hori egiteko? Tira, artistari
          50 gora, eskuinera bira, ondoren aurrera 100 egin eta gero guztia bi aldiz
          mugitzeko esatea daukat. Baina horrela kalkulu matematikoak nik egiten ditut
          konputagailuaren ordez.
      2:
        image: notes/C4_math_artist_2.png
        text: |-
          Berrogeitamar bider bi egitea buruz agian ez da oso nekeza zure buruarentzat baina konputagailuak oso onak dira kalkulu matematikoak egiten eta,
          horregatik, ahal dugun neurrian haien esku utzi behar ditugu. Altuera izeneko aldagaia erabili izan banu, orduan, erraz aldatu ahal izango nule altuera berrogei eta hamarrera eta aldatu nire algoritmoa artistari altuera adina egiteko gora, eskuinera bira eta, gero, aurrera egiteko altuera 2 aldiz, zabalera altueraren bikoitza duen laukizuzena marrazteko.
    C4_unplugged_algorithms:
      1:
        image: notes/C4_unplugged_algorithms_1.png
        text: Ikasgai honek Tangram Algoritmoak du izena. Tangram-a 7 piezako puzle
          bat da eta piezak hauek elkartu daitezke beste forma batzuk sortzeko. Algoritmo
          bat erabiliko duzu zure lagunari azaltzeko puzlea nola osatu.
      2:
        image: notes/C4_unplugged_algorithms_2.png
        text: Algoritmo bat ataza bat burutzeko urrats zerrenda bat baino ez da. Egunero
          erabiltzen ditugu erosketa zerrendak egin eta errezetak jarraitzeko adibidez.
          Algoritmo sinplea egiten baduzu, interpretatzeko aukera asko egongo dira
          eta algoritmoa exekutatzean lortzen den emaitza esperotakoaren desberdina
          izan daiteke. Mundu guztiak emaitza berdina lortzea nahi baduzu, orduan
          zure algoritmoak zehatza eta espezifikoa izan behar du.
      3:
        image: notes/C4_unplugged_algorithms_3.png
        text: Gaur, algoritmo bat erabiltzen ari naiz margolan bat amaitzeko. Otso
          batzuk margotu nahi nituen baina ez naiz oso margolari trebea. Zorionez,
          zenbaki bidez margotu daiteke. Berrogei kolore daude eta hizki eta zenbaki
          txikiak daude eskualde bakoitza ze kolorerekin margotu behar den esaten
          dizutena. Zenbaki bidez margotu aukerak ze kolore erabili eta non esaten
          dit zehatz mehatz.
      4:
        image: notes/C4_unplugged_algorithms_4.png
        text: Oso zehatza da, beraz, kapaz naiz norabideak jarraitzeko eta margolan
          zoragarria agertuko da. Algoritmo aparta da. Aginduak nahikoa espezifikoak
          izango ez balira, nire otsoak ez lirateke horren politak izango. Zerbait
          zehatz-mehatz pentsatutako moduan agertzea nahi baduzu, oso zehatza izan
          behar duzu.
    C4_unplugged_binary:
      1:
        image: notes/C4_unplugged_binary_1.png
        text: Talde bakoitzean, argibideak ematen dituen pertsonak, paperari heltzen
          dionak, erabaki behar du zeintzuk izango diren "deskonektatuta" eta "konektatuta"
          ikurrak. Bitarrez, bi ikurreko alfabetoaren parekoa da. A eta B-k zure alfabeto
          osoa osatuko balute bezala, baina 0 eta 1 ikurrekin.
      2:
        image: notes/C4_unplugged_binary_2.png
        text: Bitarra erabiltzeko modurik arruntena baldin agindua da. Programazio
          arloan klasikoa da. Programak aurrera egiten du eta zerbait egiazkoa bada,
          orduan beste hau egin esaten du. Edo ez da egia eta, orduan, beste zerbait
          egin. Eta zerbait konplexuagoa egin nahi baduzu? If agindu baten ordez,
          konputagailu bateko irudi edo hots batekin lan egin nahi duzu.
      3:
        image: notes/C4_unplugged_binary_3.png
        text: 'Konputagailuak bitarrez ulertzen du baina irudiak ez dira bitarrak.
          Ez da 0 edo 1, orduan, nola? Hemen duzu adibide bat: irudi eder hau duzu,
          Irudia oinarrian informazioa da. Informazio guztia era batera edo bestera
          bitarrez kodetu daiteke, pentsatu behar duzu nola.'
      4:
        image: notes/C4_unplugged_binary_4.png
        text: Imajinatu panda artz honen gainean lauki sarea jartzen dugula eta lauki
          bakoitza beltzetik edo zuritik gertuago dagoen erabaki behar dugula. Eta
          horrela margotzen dugula. Orain, lauki bakoitza zuria edo beltza izango
          da, demagun lauki beltzak zeroak direla (digitu bitarra) eta lauki zuriak
          batekoak, beste digitu bitarra, Amaieran, zeroko eta bateko mordoa izango
          duzu. Horrela adierazten da irudi hau bitarrez.
    C4_unplugged_forloops:
      1:
        image: notes/C4_unplugged_forloops_1.png
        text: Ikasgai honek for begizta dibertigarria du izena. Ikasgai hontan, lerro
          zenbaki bat erabiliko dugu dado jolas batean aritzeko. Jokalari bakoitzak
          hiru aldiz botako du dadoa hasteko balioa, amaitzeko balioa eta gure tartea
          esleitzeko. Txanda bakoitzean, hasteko balioa inguratuko dugu zirkulu batez,
          eta baita gure tarteak adierazten duen adina pauso aurrera dauden zenbakiak
          ere. Amaitzeko balioa ateratzerakoan amaituko ditugu inguraketak. Puntuazio
          handiena lortzen duena da irabazlea!
      2:
        image: notes/C4_unplugged_forloops_2.png
        text: For begiztak erabilgarriak dira leku askotan eta eguraldi iragarlea
          bazina, for begiztak nonahi erabiliko zenituzke. Kaixo, Becky naiz. Everpower
          Renewables-en egiten dut lan haize iragarle gisa. Haizearen abiadurak iragartzen
          ditut Columbia River Gorge zonaldean, enpresak bertan dituen haize-parkeekin.
      3:
        image: notes/C4_unplugged_forloops_3.png
        text: Nolako haizea egongo den han ulertu nahi dug zenbat potentzia sortuko
          den jakiteko. Informazio hori energia salerosleei ematen diegu denbora errealean.
          Informazio horretan oinarrituz haiek potentzia saldu eta erosten dute ziurtatzeko
          sare energia orekatuta mantentzen dela, zure etxeko argiak piztuta daudela
          eta gure haize-parkeetatik ateratzen den energia maximizatzen dugula.
      4:
        image: notes/C4_unplugged_forloops_4.png
        text: Portland-en gaude, EverPower Renewables enpresako kontrol zentroan,
          eta hona iristen da informazioa gure landetxe guztietatik. Ezta gaur eguneko
          ordenagailurik ahaltsuenek ere ezin dute simulatu atmosfera edonon. Konputagailuetan
          erabiltzen diren aurreikuspenetarako modeloetan, sareta deitzen duguna erabiltzen
          da. Saretako puntu bakoitzari latitudea eta longitudea dagozkio. Fisikako
          ekuazioak ebatzi eta saiatu behar gara kalkulatzen haizearen abiadura, tenperatura,
          presioa, eta horrelako gauzak.
      5:
        image: notes/C4_unplugged_forloops_5.png
        text: Saretak oso handiak direnez, eta horrelako kalkuluak puntu askoren gainean
          egiten ditugunez, ekintza hauek milioika eta milioika aldiz errepikatzen
          ditugu. Horregatik, "for" begiztak erabiltzen ditut. Adibidez, hemen bertan
          dago "for" begizta bat. Haizearen portaera aurreikusten ari garenean, hainbeste
          parametro desberdin hartu behar dira kontuan, ezen pertsona batentzat ezinezkoa
          izango bailitzateke kalkulu horiek guztiak egitea. Hainbeste dira haizearen
          eboluzioaren gainean eragiten duten gauzak, ezen modelo bat behar dugun
          konputagailuan erabili eta kalkulu guztiak egiteko, haizearen portaera aurreikusiko
          badugu.
    C4_unplugged_madlibs:
      1:
        image: notes/C4_unplugged_madlibs_1.png
        text: Ikasgai honetan, "hutsuneak betetzeko" guneak dituzten istorioekin jolastuko
          gara. Txantiloi bat daukazu zeuk betetzeko eta desberdintasun dibertigarriak
          dituzten istorioak sor ditzakezu.
      2:
        image: notes/C4_unplugged_madlibs_2.png
        text: Ikasgai honetan, ikasi dugu nola egin abstrakzioa, aldez aurretik sortutako
          bi istorioetatik eredu bat sortzeko. Abstrakzioa arte bat da, desberdintasunak
          eta xehetasunak alboratuz, ikusi ahal izateko nola soluzio bat arazo desberdinentzat
          baliagarria izan daitekeen. Oso erabilgarria da informatikan, horri esker
          funtzioak sortu daitezkeelako, egoera desberdinetan erabili daitezkeenak.
    C4_unplugged_parameters:
      1:
        image: notes/C4_unplugged_parameters_1.png
        text: Ikasgai honi deitu diogu "parametrodun abestiak idaztea". Hainbat abesti
          idatziko ditugu. Batzuetan, abestiaren leloa pixka bat desberdina izango
          da kantatzen duzun bakoitzean. Gogoratzen duzu "Paristik datorren artista
          bat naiz ni" abestia? Leloa pixka bat desberdina da instrumentuaren arabera.
          Lelo bakoitzaren aldaketa erakuts daiteke parametroak deiturikoak erabiliz.
      2:
        image: notes/C4_unplugged_parameters_2.png
        text: Batzuetan funtzioek parametroak behar dituzte. Parametroak funtzioei
          pasatzeko informazio gehigarria dira, funtzioak behar berezien neurrira
          egiteko. Lagunekin izozki-kopa bat egiten duzunean, konputagailu programa
          batek parametroekin egiten duen antzeko prozesua erabiltzen ari zara.
      3:
        image: notes/C4_unplugged_parameters_3.png
        text: Banilla bola agian berdina da izozki-kopa guztietan baina zure lagunei
          galdetzen diezunean ze gozagarri nahi dituzten, hamaika konbinazio desberdin
          jasoko dituzu. Gozagarri funtzioaren izena da baina gozagarri jakin bakoitza
          parametroa da. Funtzioek eta parametroek elkarrekin egiten dute lan sekulako
          konputagailu programak egiteko eta baita sekulako izozki-kopak ere.
    C4_unplugged_variables:
      1:
        image: notes/C4_unplugged_variables_1.png
        text: Ikasgai honek aldagaiak gutun-azaletan du izena. Informazio zatiak faltan
          ditugula nola eraiki esaldiak ikasiko dugu. Gutako gehienek badakigu zer
          den zuriuneak betetzea. Gure etxekolanetan gure izena jartzerakoan egiten
          dugu. Batzuetan hitz bat baino gehiago bete behar dugu eta, kasu horretan,
          zuriuneari etiketa bat jartzen diogu ze informazio zati dagokion jakiteko.
      2:
        image: notes/C4_unplugged_variables_2.png
        text: Aldagaiak aldakorrak diren informazio zatientzako leku-markak dira.
          Falta den informazioarentzat aldagai bat erabiliz, lanean jarrai dezakegu
          egiten ari garen horretan eta utzi beste norbaiti falta den informazio hori
          beranduago sartzen. Softwarean aldagaiak asko erabiltzen dira. Aldagaiak
          izenetzako, posta helbideentzako eta baita erabiltzaileentzako leku-marka
          moduan erabiltzen ditugu. Era honetan programari adierazten diogu xehetasun
          horiek erabiltzaileak sartu ondoren agertuko direla. Aldagaiak etengabe
          erabiltzen ditugu gure lanean.
      3:
        image: notes/C4_unplugged_variables_3.png
        text: Informazio zati bat gero erabiltzeko gorde behar dugun bakoitzean aldagai
          bat erabiltzen dugu. Demagun erabiltzaileak zenbat aldiz egin duen txioka
          zenbatu nahi dugula. Erabiltzaileak txio bat egiten duen bakoitzean aldagaia
          inkrementatuko dugu eta, erabiltzaileak txio bat ezabatzen duenean, berriz,
          zenbakia dekrementatuko dugu. Erabiltzaileak zenbat aldiz egin duen txioka
          jakin nahi dugunean aldagaiari begiratuko diogu.
    C4_variables_artist:
      1:
        image: notes/C4_variables_artist_1.png
        text: Aldagai bat balio bat gordetzeko edukiontzia da. Aldagai hori algoritmo
          batean erabiltzen baduzu, edukiontzia ireki eta barruko balioari begiratzen
          zaio. Honela algoritmo azkarragoak idatzi ditzakezu, aldagaian gordetako
          balioaren araberako portaera erakutsiko dutenak.
      2:
        image: notes/C4_variables_artist_2.png
        text: Adibidez, nire anai txikiari Zorionak, 10 urte bete dituzu! esateko
          algoritmo bat idatzi nahiko bazenu, primeran orain, baina hurrengo urtean
          "Zorionak, 11 urte bete dituzu! esan nahiko dudanez, aldagai bat sor dezakezu
          'adina' izenekoa nire anaiaren adina gorde eta nire algortimoa egokitu "Zorionak,
          'adina' urte bete dituzu!" esateko. Aldagaia alda daitekeenez, urtero 'adina'
          aldagaia eguneratu dezaket 'aldagaia' gehi 1 izateko.
      3:
        image: notes/C4_variables_artist_3.png
        text: Puzle honetan, gure artistak marraztuko duen lerroaren luzera ezarriko
          duen aldagaia erabiliko dugu. Gero, gure kodean, mugitu aurrera blokeak
          luzera aldagaiari begiratuko dio jakiteko ze balio esleitu diozun.
    C4_variables_playlab:
      1:
        image: notes/C4_variables_playlab_1.png
        text: Aldagai bat balio bat gordetzeko edukiontzia da. Aldagai hori algoritmo
          batean erabiltzen duzunean, edukiontzia ireki eta barruko balioari begiratzen
          zaio. Honela algoritmo azkarragoak idatzi ditzakezu, aldagaian gordetako
          balioaren araberako portaera erakutsiko dutenak.
      2:
        image: notes/C4_variables_playlab_2.png
        text: Orain PlayLab probatuko duzu. Joko desberdinak emango zaizkizu eta abiadura,
          altuera eta puntuazioa erako aldagaiak molda ditzakezu jokoa aldatzeko.
          Ez duzu jokoaren algoritmoa egokitu beharko jokatzeko modua aldatzeko, soilik
          aldagaiaren balioa.
      3:
        image: notes/C4_variables_playlab_3.png
        text: Kindle eta liburuen X-izpien inguruko lanetan aldagaiak erabiltzen ditugu
          modu desberdin askotan. Aldagai bat erabil dezakezu adibidez liburu baten
          orrialde zenbakiak gordetzeko. Erabiltzaileak orrialde baten letra-tamaina
          inkrementatu edo dekrementatu dezake. Letra-tamainaren arabera liburuaren
          orrialde kopurua alda daiteke. Doitu dezakezu aldagaian orrialde kopurua
          gordez.
    infinity_playlab_events:
      1:
        image: notes/infinity_playlab_events_1.png
        text: Orain joko programatzaileek egunero erabiltzen duten zerbait ikasiko
          dugu. Gertaerak dira hauek. Gertaera batek zerbait gertatu bitartean entzuten
          egoteko esaten dio zure programari. Eta gertatzen denean ekintza bat exekutatzen
          du. Adibidez, saguan klikatzea, gezidun tekla bat sakatzea edo pantailan
          sakatzea gertaerak dira.
      2:
        image: notes/infinity_playlab_events_2.png
        text: Hemen Baymax gora mugitu araziko dugu Hiro ukitzeko, eta behera, Rapunzel
          ukitzeko jokalariak gora/behera gezidun teklak edo gora/behera botoiak erabiltzen
          dituenean. "Gora geziarekin" blokea erabiliko dugu eta "mugitu aktorea gora"
          blokea lotu, jokalariak gora gezia sakatzen duenean "gora geziarekin" blokeari
          lotuta dagoen guztia exekuta dadin. Gauza bera egingo dugu Baymax behera
          mugitzeko. Urratsez urrats zure jokoa gero eta elkarreragileago bihurtzen
          ari da.
    infinity_playlab_intro:
      1:
        image: notes/infinity_playlab_intro_1.png
        text: Ze mailatan zaude? bigarrenean. Hamargarrenean. Lehenengo mailan. Ni
          zortzigarren mailan nengoen programatzen ikasi nuenean. Nire lehenengo ordenadorea
          seigarren mailan nengoenean izan nuen. Zirrara sortzen zidan jendearen arazoak
          konpontzeak. Ideia batean oinarrituz gauzak eraiki ditzakezu.
      2:
        image: notes/infinity_playlab_intro_2.png
        text: Informatika unibertsitateko ikasleek eta profesionalek hurrengi hogei
          edo hogeita hamar urteetan egingo dituzten hainbat gauzen oinarria da. Gustokoa
          dut jendeari laguntzeak erakartzen nauelako. Jendearen bizitza erraztuko
          duen zerbait eraikitzeko aukera daukat. Superahalmen batetik gertuen dagoen
          gauza dela uste dut. Hastea da inportanteena. Ni neu ere hasiberria naiz
          eta zuk nirekin batera ikastea nahi dut.
      3:
        image: notes/infinity_playlab_intro_3.png
        text: John Vechey naiz, PopCap Games enpresaren sortzaileetako bat. Jokoak
          egiten ditugu, Plants vs. Zombies, Bejeweled edo Peggle bezalakoak. Jokoetan
          garrantzitsuena ez da kodea edo alderdi artistikoa perfektua izatea; garrantzitsuagoa
          da erakargarria eta dibertigarria izatea. Hori lortzeko, saiatu behar zara,
          egin behar duzu, ikasi, egokitu eta landu behar dituzu jokoak diseinatzeko
          zure gaitasunak.
      4:
        image: notes/infinity_playlab_intro_4.png
        text: 'Zein da zure bideo-joko gustukoena? Ondo. Orain pauso bat aurrera joango
          gara eta joko horren antzekoak sortuko ditugu Jolas Laborategian. Joko onetan
          istorio bat dago eta istorioetan aktoreak daude. Aktoreek gauza asko egiten
          dituzte: hitz egin, mugitu, eta elkarren artean eragin. Agian, jokoaren
          arauen arabera, puntuak eskuratu ditzakete. Gaur ikasiko dugu nola egin
          gauza horiek, banan-banan, Disneyren pertsonaiak erabiliz: Anna, Elsa, Hiro,
          Baymax eta Rapunzel. Eskuko telefonoan jokatu eta partekatu daitekeen joko
          bat sortuko dugu zerotik.'
      5:
        image: notes/infinity_playlab_intro_5.png
        text: Zure pantaila hiru zati nagusitan banatzen da. Ezkerrean jokoeremua
          duzu, zure programa exekutatuko den lekua. Maila bakoitzaren argibideak
          behean daude idatzita. Erdiko gune hau tresna-kutxa da, eta hauetako bloke
          bakoitza kode zati bat da. Eskuinean dagoen espazio zuria laneremua da,
          eta hemen sortuko dugu gure programa.
      6:
        image: notes/infinity_playlab_intro_6.png
        text: Hasteko, zure blokeak "martxan dagoenean" bloke laranjari lotu beharko
          dizkiozu. Bloke mordoa lotu ditzakezu ertz horia ikusten duzun artearrastatuz
          eta, ondoren, klaska egingo dute elkarrekin. Lehenengo puzlean Hiro 1 aktorea
          da, eta Baymax, 2 aktorea. Hiro mugitu beharko duzu Baymax-ena joateko "eskuinera
          mugitu" blokea arrastatuz eta "martxan dagoenean" blokearekin lotzeko. Zure
          blokeak leku egokian daudenean, sakatu "Hasi" botoia ikusteko zer programatu
          duzun.
      7:
        image: notes/infinity_playlab_intro_7.png
        text: Goazen hastera eta amaitzerako elkarreragin, puntuak zenbatu, microbotak,
          gereziak, zartagiak, izpiak, jela etab. jaurti, eta elkar desagertarazi
          egin dezaketen aktore zoragarri hauekin zure jokoa sortzeko gai izango zara!
    infinity_playlab_repeat_forever:
      1:
        image: notes/infinity_playlab_repeat_forever_1.png
        text: Ikusten duzu zure burua behin eta berriro gauza bera errepikatzen? zorionez
          ez duzu sekula hori egin beharko konputagailuak oso onak baitira gauzak
          errepikatzen. Hau errepikatu betirako blokea duzu. Bloke honen barnean jartzen
          duzun hori beti gertatuko da jokoan.
      2:
        image: notes/infinity_playlab_repeat_forever_2.png
        text: Orduan, aktore batek etengabe zerbait egitea nahi badugu jokalariak
          ezer egin gabe, bloke horiek errepikatu betirako blokearen barnean jarriko
          ditugu. Hurrengo puzle hontan helburua Anna etengabe gora eta behera mugitzea
          da. Errepikatu komandoen funtzionamendua ulertzen baduzu, denbora luzea
          aurreratuko duzu gero, zure jokoa garatzen duzunean.
    tutorial_puzzle_challenge:
      1:
        image: notes/tutorial_puzzle_challenge_1.png
        text: Zer izan nahi duzu handitzean, Olivia? Astronauta. Ba al dakizu zer
          den konputagailuen programatzailea izatea? Bai, tira ez. Ummm iegon, zer?
          Ez nago ziur nola azaldu. Konputagailuak programatzea nahikoa sinplea da.
          Errezeta baten antzera, agindu multzo bat da eta urratsez urrats jarraitu
          behar duzu amaieran nahi duzuna lortzeko.
      2:
        image: notes/tutorial_puzzle_challenge_2.png
        text: Pixel kopurua, lerroaren luzera, alda dezaket menu zabalgarri hau erabiliz.
          Zein zen luzera? Argibideak ikus ditzakezu berriz hasi botoiaren azpian
          begiratuz. Hemen mugitu aurrera blokea erabili dut eta 100 pixel aukeratuko
          du. Bloke bat ezabatu dezaket tresna-kutxara edo zaborrontzira arrastatuz.
          Bere lekuan jarriko dugu berriz.
      3:
        image: notes/tutorial_puzzle_challenge_3.png
        text: Exekutatu kodea hasi sakatuz. Ez du funtzionatu! leheneratu sakatuko
          dut eta zer dagoen gaizki pentsatu. Puzle bat nahi adina aldiz egin dezakezu
          eta puzleak baztertu eta berriro itzuli bertara. Ziurtatu zure onena ematen
          duzula eta ez etxi. Gehitu dezagun beste mugitu aurrera. Oraindik ere ez
          dabil. Bloke bat sar dezaket bi blokeen artean.
      4:
        image: notes/tutorial_puzzle_challenge_4.png
        text: Biratu bloke bat hartu eta bi mugitu aurrera blokeen artean jarriko
          dugu. Biratu ezkerrera 45 gradu. Programa abiaraziko dugu berriz. Leheneratu,
          exekutatu, zoragarria! Hemen duzu beste puzle bat. Batzutan kodea emango
          zaizu eta osatu beharko duzu. Hemen luzera eta gradu egokiak gehitu behar
          ditut.
      5:
        image: notes/tutorial_puzzle_challenge_5.png
        text: Emandako kodea nahigabe zaborrontzira ematea gerta dakizuke. Zer egin
          orduan? sakatu Hasi berriro eta berriz hasiko zara. Zenbakizko bloke hau
          arrastatuko dut pixel gune desberdinetan. Aukeratu 100 pixelentzat, 45 graduentzat
          eta, berriro, 100 pixelentzat. Zoragarria! Code Studioren erlea duzu hau.
          Erlea mugitu behar dut lore bakoitzera eta nektarra lortu.
      6:
        image: notes/tutorial_puzzle_challenge_6.png
        text: Lehenengo lorea hiru bloke harantzago dago eta beraz, hiru mugitu aurrera
          behar ditut. 1, 2, 3. Ondoren, nektarra lortu, gero beste nektarra. Hara,
          ez du funtzionatu! Beste mugitu aurrera bloke bat jarriko dut nektarra jasotzeko
          bi blokeen artean eta berriro abiarazi. Code Studioren artista eta erlearen
          puzleak ikasi berri dituzu. Zorte on Code Studio-ren puzle lehiaketarekin.
    unplug1:
      1:
        image: notes/unplug1_1.png
        text: Zer izan nahi duzu handitzean, Olivia? Astronauta. Ba al dakizu zer
          den konputagailuen programatzailea izatea? Bai, tira ez. Ummm iegon, zer?
          Ez nago ziur nola azaldu. Konputagailuak programatzea nahikoa sinplea da.
          Errezeta baten antzera, agindu multzo bat da eta urratsez urrats jarraitu
          behar duzu amaieran nahi duzuna lortzeko.
      2:
        image: notes/unplug1_2.png
        text: Informatikak munduan eragina edukitzeko bidea da. Bideo musikalak izan
          daitezke, jokoak izan daitezke, jakin norbait beste baten arbasoa den. Ezagutzen
          duzun jendearen lagunak bilatu. Bizitzak salbatzeko hamaika gauza egin ditzakezu.
          Helburu bat behar duzu. Niretzako pintzelaren modukoa da. Uste dut ondo
          programatzea ez dela arte onaren oso desberdina.
      3:
        image: notes/unplug1_3.png
        text: Programazioaren oinarriak ikasi nituenean, horma zuria ate mordoa bihurtu
          zen eta ate horiek irekitzean, noski, beste ate mordoaren ataria aurkituko
          duzu. Programatzea dibertigarria eta erraza da. Zure buruak nahi duen guztia
          egin dezakezu. Amaieran ate nahikoak ireki eta argia ikusiko duzu. Niretzat,
          amaitutakoprograma argiarekin betetako egitura bezalakoa da. Izkin guztietan
          argia dago. Jendearengana iritsi eta haiekin elkarreragin dezakezu, munduan
          sekula ikusi ez bezala.
      4:
        image: notes/unplug1_4.png
        text: Multzo honetako lehenengo ikasgaia informatikari buruzkoa da, zer egiten
          duen informatikari batek eta nola jokatu modu arduratsuagoan teknologiarekin
          aritzen zarenean. Oso ikasgai inportantea da baina testu aldetik, astun
          xamarra. Amaieran, zure inizialak erabiliz zure neurrira egindako kodea
          egiteko gai izango zara. Ekintza dibertigarria da eta oso bizigarria, bitarrak
          oso teknikoa dirudien arren, behin ulertuz gero, hizkuntza sekretu bat hitzegitea
          bezala baita.
    unplug2:
      1:
        image: notes/unplug2_1.png
        text: Pentsamendu konputazionalari buruzko ikasgaiaren muina da nora heldu
          problema potolo bati eta nola zatitu problema sinpleagotan. Ikasgaiaren
          helburua ikasketa planean dagoen mamuetako bat marrazteko edonork jarraitu
          ahal izango duen agindu multzoa idaztea da.
      2:
        image: notes/unplug2_2.png
        text: 'Ikasleak multzotan banatuko dira aginduak idazteko eta, ondoren, mamua
          marraztu behar duen beste talde batekin trukatuko dira. Taldeek aginduak
          idatziko dituzte pentsamendu konputazionalaren lau urratsak erabiliz: deskonposizioa,
          patroien kokapena, abstrakzioa eta algoritmoak.'
      3:
        image: notes/unplug2_3.png
        text: Lehenengo taldeen ataza deskonposatuko dute, hau da, jokoaren plana
          egingo dute. Ondoren, katalogoko mamuen artean patroiak bilatuko dituzte.
          Mamuen arteko desberdintasunak identifikatzean, xehetasun horiek ezabatuko
          dituzte. Adibidez, katalogoko mamu batek Vegitas-en begiak ditu eta beste
          batek, berriz, Spritem-en begiak. Baina biek begiak dituzte eta, beraz,
          idatz dezakegu lerro bat zuriune batekin, mamuak begiak dituela adierazteko.
      4:
        image: notes/unplug2_4.png
        text: Beraz, ikasleak kapaz izango dira agindu multzo bat idazteko, algoritmoa,
          mamuaren atalak bete gabe utziz estiloa dena delakoa izateko. Hau izango
          da beste ikasleei pasako zaien agindu multzoa neurriko mamua egin ahal izateko.
    unplug3:
      1:
        image: notes/unplug3_1.png
        text: Laukidun orri programazioan, jendeari kodeketak nola funtzionatzen duen
          azaltzen diogu marrazkiak berregiten erakutsiz, geziak eta zirriborroak
          erabiliz. Pertsona bati marrazki txiki bat ematen zaio laukidun orri batean
          eta, gezi zehatzak erabiliz, osatu behar du eta marrazkia nola berregin
          deskribatzen saiatu.
      2:
        image: notes/unplug3_2.png
        text: 'Jarduera hontan erabil ditzakezun ikurrak hauek dira: mugitu lauki
          bat aurrera, lauki bat atzera, mugitu lauki bat gora, mugitu lauki bat behera,
          aldatu hurrengo kolorera, eta bete zure laukia kolorearekin. Hori kodetu
          ondoren, beste bati pasa diezaiokegu eta, homek, kodea irakurriz, irudia
          islatu.'
    unplug4:
      1:
        image: notes/unplug4_1.png
        text: Laukidun orri programazioan, jendeari kodeketak nola funtzionatzen duen
          azaltzen diogu marrazkiak berregiten erakutsiz, geziak eta zirriborroak
          erabiliz. Pertsona bati marrazki txiki bat ematen zaio laukidun orri batean
          eta, gezi zehatzak erabiliz, osatu behar du eta marrazkia nola berregin
          deskribatzen saiatu.
      2:
        image: notes/unplug4_2.png
        text: Jardueraren bigarren zatian ikasleei galtetuko diegu zenbat modu desberdinetan
          tolestu dezaketen paper zati bat hamasei laukizuzen berdin sortzeko. Ondoren,
          nola soluzio anitzek emaitza bera sor dezaketen, eta zergatik soluzio batzuk
          egokiagoak diren zenbait egoeratan eztabaida sortuko duzu.
    unplug5:
      1:
        image: notes/unplug5_1.png
        text: Laukidun orri programazioan, jendeari kodeketak nola funtzionatzen duen
          azaltzen diogu marrazkiak berregiten erakutsiz, geziak eta zirriborroak
          erabiliz. Pertsona bati marrazki txiki bat ematen zaio laukidun orri batean
          eta, gezi zehatzak erabiliz, osatu behar du eta marrazkia nola berregin
          deskribatzen saiatu.
      2:
        image: notes/unplug5_2.png
        text: Jardueraren bigarren zatian ikasleei galtetuko diegu zenbat modu desberdinetan
          tolestu dezaketen paper zati bat hamasei laukizuzen berdin sortzeko. Ondoren,
          nola soluzio anitzek emaitza bera sor dezaketen, eta zergatik soluzio batzuk
          egokiagoak diren zenbait egoeratan eztabaida sortuko duzu.
    unplug6:
      1:
        image: notes/unplug6_1.png
        text: Jarduera honek txartelekin kodetu du izena eta edozein adinetarako egokia
          da. Blockly-ren ikasgaietan baldintzapeko aginduekin ikasi zenuen moduan,
          baldintzapeko aginduek ebaluatu beharreko zati bat dute eta egia edo gezurra
          den erabakitzeko ebaluatu beharko duzu. Hori da baldintzapekoa eta hamaika
          modu desberdinetara erabil daiteke.
      2:
        image: notes/unplug6_2.png
        text: 'Horren abantaila hartzen dugu eta programak idazten ditugu paperaren
          gainean, eta ausaz nahastutako karta-sorta bat erabiliz egikaritu ditzakegu.
          Adibidez, izan daiteke "baldin" agindu bat zera dioena: ateratzen duzun
          karta 8 baino handiagoa baldin bada, puntu bat eskuratzen duzu. Bestela,
          zure aurkariak eskuratuko du puntua. Hori zure nahierara egokitu dezakezu,
          sinpleaoa edo konplexuagoa eginez, zu eroso sentitzeko.'
    unplug7:
      1:
        image: notes/unplug7_1.png
        text: Musika partituretan ohikoa da abestiaren hasieran leloa agertzea eta
          hortik aurrera, leloa errepikatu behar denean ez da berriro agertzen; horren
          ordez, erreferentzia bat egiten zaio hasieran agertzen denari. Horrelaxe
          deitzen zaio funtzio bati programa informatikoetan.
      2:
        image: notes/unplug7_2.png
        text: Ikasgai honetan, abestiaren leloa partituraren hasieran definitu dugu
          eta orduan hasi gara kantatzen, eta partituran aurrera "leloa" hitza agertzen
          denean, konturatu gara ikasleek ez dutela kantatzen "leloa" hitza, baizik
          eta partituraren hasieran begiratzen dutela eta bertan agertzen dena kantatzen
          dutela. Ideia hori erabiltzen dugu ulertzeko zer egiten duen programa batek
          funtzio bat definitu eta deitzen dionean.
      3:
        image: notes/unplug7_3.png
        text: Abesti herrikoiak erabiltzen ditugu, horien artean "Paristik datorren
          artista bat naiz ni", ikusarazteko horrelako abestietan leloa behin eta
          berriro errepikatzen dela, eta batzuetan leloa pixka bat aldatzen dela errepikapen
          batetik hurrengora. Horrelakoek oso argi erakusten dute parametro kontzeptua.
          Pasatzea hitz batzuk aurrera funtzioari informazio gehigarria helarazteko.
          Ziur gaudenean denek harrapatu dutela, orduan gure abesti herrikoi horiek
          moldatu ditzakegu gure nahierara.
    unplug8:
      1:
        image: notes/unplug8_1.png
        text: Abstrakzioaren inguruko ikasgaian, guztiz definituta ez dauden istorioak
          erabiltzen ditugu. Halakoetan, istorio batean zuriguneak uzten dira, non
          hitz desberdin asko jar daitezkeen. Ideia hori hartu, animatu haurrak nahi
          dituzten hitzak erabiltzeko haien istorioetan, eta horrela abstrakzioaren
          kontzeptua azaltzen dugu.
      2:
        image: notes/unplug8_2.png
        text: Funtzioei buruz ari gara, eta nola izan dezakegun funtzio bat, "Paristik
          datorren artista bat naiz ni" abestian bezalaxe, non abestiaren leloak egitura
          jakin bat duen, baina badago zerbait batetik bestera aldatzen dena, eta
          aldatzen den horren abstrakzioa egiten dugu eta gure hitzekin bete dezakegu
          aldatzen den hori errepikapen bakoitzean. Baina batzuetan hiru hitz dira
          aldatzen direnak eta horiek hiru parametrorekin ordezkatu ditzakegu, eta
          hori oso erabilgarria da.
      3:
        image: notes/unplug8_3.png
        text: Funtzio bat izan dezakegu arazo desberdin askotarako baliagarria dena.
          Askotan, jendeak funtzio desberdinak idazten ditu arazo horietarako, eta
          ez dira konturatzen haien artean diferentzia txiki bat baino ez dagoela.
          Diferentzia txiki hori atzemateko moduren bat topatuz gero, funtzio bera
          berrerabil liteke behin eta berriro, 11 funtzio desberdin izan beharrean.
    unplug9:
      1:
        image: notes/unplug9_1.png
        text: Txandaka programatzea oso dibertigarria izan daiteke eta informatikaz
          gain, beste gauza batzuk ere ikas daitezke. Batzuetan, jendeak antsietatea
          nozitzen du, urduri jartzen dira, eta zuk lasaitu nahi dituzu. Hori oso
          bide egokia da informatika erakargarriagoa egiteko.
      2:
        image: notes/unplug9_2.png
        text: Jendea bi azpitaldetan banatzen duzu eta partaideak lerro batean kokatzen
          dira eta errelebotako moduan egiten dute korrika. Azpitalde bakoitzeko lehenengo
          pertsonak korrika egiten du gelako beste alderaino, non sareta baten gainean
          egindako irudi bat eta paper txuri bana dauden. Bi jokalariek paper txurian
          idazten dute irudi hori sortzeko lehenengo urratsa, itzultzen dira haien
          lerrora, eta lekukoa pasatzen diote hurrengo jokalariari, zeina korrika
          joango den beste aldera hurrengo urratsa idazteko.
      3:
        image: notes/unplug9_3.png
        text: Hau arazketaren ideia harrapatzeko modu aparta da, zure lana zuzentzea
          eta zure aurretik joan direnen lana egiaztatu behar izatea. Oso azkar ulertuko
          duzu ze garrantzitsua den kontuz idaztea zure kodea talde oso bat zure menpekoa
          denean.
    unplug10:
      1:
        image: notes/unplug10_1.png
        text: Jarduera honek modu ulerterrazean azaltzen du nola funtzionatzen duen
          internetek. Behar den terminologia guztia modu sinplean azaltzen dugu eta
          horrela ikasleek mezuak pasatzea simulatu dezakete, mail batean egingo litzatekeen
          moduan.
      2:
        image: notes/unplug10_2.png
        text: 'Ikasleek mezuak igorriko dituzte hiru igortze metodoetako bat direla
          suposatuz: haririk gabeko internet, DSLa edo zuntz optikoa. Wi-fia ordezkatzen
          duten ikasleek igorri behar duten mezua buruan eraman behar dute, wifia
          delako informazioa galtzeko probabilitaterik handiena duena.'
      3:
        image: notes/unplug10_3.png
        text: DSLa edo haria direla suposatzen duten ikasleek mezua eramango dute
          esku-gainean, non suposatzen den informazioa galtzeko arriskua txikiagoa
          den. Eta zuntz optikoa ordezkatzen duten ikasleek mezuak eramango dituzte
          bi eskuekin. Jarduera hau oso baliagarria da gutako askok egunero erabiltzen
          dugun zerbait ulertzeko.
    unplug11:
      1:
        image: notes/unplug11_1.png
        text: Beraz, unea iritsi da atzera egin eta gainetik aztertzeko azken hemeretzi
          ikasgaietan ikasi duzun guztia. Une aproposa da ikasleei ikusarazteko egin
          dutena garrantzitsua dela. Ikasgai hauetan zehar pertsona heldu askok informatikari
          buruz dakitena baino askoz gehiago ikasi dute.
      2:
        image: notes/unplug11_2.png
        text: Eztabaidatu talde osoan edo talde txikitan adierazteko zein izan diren
          haien ikasgairik gustukoenak. Ikasi duzun guztia errepasatzen duzunean,
          orduan ikasleen sormena agerian gera daiteke. Bana itzazu taldetan eta utziezu
          bere kabuz sortzen ikasgai bat. Esleitu talde bakoitzari kontzeptu garrantzitsu
          bat, funtzio edo algoritmo bezalakoa, eta utziezu material asko eskura,
          erabil ditzaten. Talde bakoitzak aurkez dezala sortutako jarduera eta, nahi
          izanez gero, erreserbatu beste egun bat ikasleek sortutako jarduera horietako
          batzuk egiteko.
      3:
        image: notes/unplug11_3.png
        text: Code.org-eko guztiek espero dugu PRIMERAN pasako zenuela ikastaro honetan
          zehar. Eta zure ametsa app hoberena sortzea dela, gaisotasunak sendatzen
          laguntzeko programak egitea dela edo, besterik gabe, problema ebazle bikaina
          izan nahi duzula, ikastaro honekin amets horiek egi bihurtzeko lehenengo
          urratsa eman duzu.
    starwars_intro:
      1:
        image: notes/starwars_intro_1.JPG
        text: Kaixo, ni Kathleen Kennedy naiz eta Star Wars-en ekoizlea naiz. Indarraren
          Iratzarraldia. Gaur gure izar batekin arituko zara lanean, BB-8-rekin. BB-8
          robot esferiko bat da. Egiten duen guztia eta egiten duen mugimendu bakoitza
          konputagailu software bidez dago kontrolatuta. Informatikak industria guztietan
          du eragina, marketinetik hasi eta osasungintza eta zinemagintzaraino. Finean,
          ehundaka informatikarik elkarrekin egin zuten lan Indarraren Iratzarraldia
          filma egiteko.
      2:
        image: notes/starwars_intro_2.JPG
        text: Kaixo, ni Rachel Rose naiz, Ikerkuntza eta Garapenerako senior injeniaria
          ILM-n, eta animazio eta izakien garapenerako taldearen burua. Indarraren
          Iratzarraldia filman nire ardura artistei pertsonaien atal mugikorrak garatzen
          laguntzea da pertsonaiak oso sinisgarriak gerta daitezen urrun-urruneko
          galaxia batean.
      3:
        image: notes/starwars_intro_3.JPG
        text: Hurrengo ordubetean gure Star Wars jokoa garatuko dugu. Programazioaren
          oinarriak irakatsiko dizkizugu. Ohiko programazioa testu formatuan izaten
          da, baina guk hemen blokeak erabiliko ditugu, arrastatu eta askatuz programak
          idazteko. Azken finean kodea sortzen arituko zara. Oinarriak blokeen bidez
          landu eta gero, javaScript-era aldatuko dugu, programazio lengoaia arrakastatsuenetakoa
          amaraunean.
      4:
        image: notes/starwars_intro_4.JPG
        text: Hasteko Rey-rekin egingo dugu lan BB-8-ri oinez ibiltarazi eta txatarra
          guztia jaso arazteko. Zure pantaila hiru zatitan dago banatuta. Ezkerrean
          Star Wars-en joko-eremua dago, bertan kodea exekutatuko da. Maila bakoitzaren
          argibideak joko-eremuaren azpian daude idatzita.
      5:
        image: notes/starwars_intro_5.JPG
        text: Erdiko gunea tresna-kutxa da eta hauetako bloke bakoitza BB-8-k ulertzen
          duen komando bat da.
      6:
        image: notes/starwars_intro_6.JPG
        text: Eskuineko gune zuria lan-eremua da eta bertan eraikiko dugu gure programa.
      7:
        image: notes/starwars_intro_7.JPG
        text: mugituEzkerrera(); blokea arrastatzen badut gure laneremura eta Hasi
          sakatu, zer gertatzen da? BB-8 ezkerrera lauki bat mugitzen da lauki-sarean.
      8:
        image: notes/starwars_intro_8.JPG
        text: Eta BB-8-k beste zerbait egitea nahi badut mugituEzkerrera(); blokearen
          ondoren? Beste bloke bat gehitu diezaioket gure programari. mugituGora();
          blokea aukeratuko dut eta mugituEzkerrera(); blokearen azpira arrastatuko
          dut nabarmenduta agertzen den arte. Orduan, askatu eta bi blokeek bat egingo
          dute.
      9:
        image: notes/starwars_intro_9.JPG
        text: Eta berriro Hasi sakatzen badut, BB-8-k gure laneremuan zerrendatuta
          dauden aginduak exekutatuko ditu. Bloke bat ezabatu nahi baduzu, zerrendakit
          kendu eta arrastatu berriro tresna-kutxara.
      10:
        image: notes/starwars_intro_10.JPG
        text: Hasi sakatzen duzunean beti daukazu aukera leheneratu botoia sakatzeko
          BB-8 berriro hasierako egoerara itzultzeko. Goazen proba egitera!
    starwars_typing:
      1:
        image: notes/starwars_typing_1.JPG
        text: Erabiltzen aritu garen blokeen barnean JavaScript aginduak daude. Gauregun,
          garatzaile profesionalen artean programazio lengoaia ezagunena da JavaScript.
          Blokeak oso egokiak dira kodetzen ikasten hasteko eta esaterako, Harvard
          eta Berkeley unibertsitateetan modu hontan hasten dira irakasten. Baina
          oinarriak ikasita, injeniariek kodea mekanografiatuz idazten dute arinago
          egiten dutelako horrela.
      2:
        image: notes/starwars_typing_2.JPG
        text: Ehundaka agindu idatzi ditzakegu tresna-kutxa batean bilatu gabe edo
          arrastatu gabe. Ikasten ari zarenez hasieran mekanografiatzea motelagoa
          gertatzen zaizu baina proba egitea nahi genuen.
      3:
        image: notes/starwars_typing_3.JPG
        text: Zure lan-eremuk goiko ezker izkinan sakatu dezakezu Ikusi iturburua
          botoia edozein puzletan blokeak utzi eta kodea testu moduan mekanografiatzera
          pasatzeko.
      4:
        image: notes/starwars_typing_4.JPG
        text: Hurrengo ikasgaian, mekanografia moduaren oinarriak erakutsiko dizkizugu.
          Oraindik tresna-kutxatik blokeak arrastatu ahal izango dituzu edo komandoaren
          izena idatzi. Mekanografiatzen hasten zarenean, komando posible guztiak
          ikusi ahal izango dituzu idazten ari zaren horren azpian. Komando osoaren
          izena idatzi ordez, aukeran erakusten zaizun horietako bat aukeratu dezakezu,
          azkarrago egiteko. Nire lanean osatze automatikorako ezaugarri hau etengabe
          erabiltzen dut kodea idazten dudanean.
      5:
        image: notes/starwars_typing_5.JPG
        text: Kodea idazten ari zarenean, konputagailuak zehaztasuna eskatuko dizu.
          Komandoa letreiatu eta lehenengo letra maiuskulaz modu egoki eta zehatzean
          jarri beharko duzu, parentesiak eta puntu eta koma barne. Errore tipografiko
          txiki bat egiten baduzu, BB-8-k ezingo du ulertu eta ez da mugitzeko gai
          izango.
      6:
        image: notes/starwars_typing_6.JPG
        text: Lerro batean errore bat egiten baduzu, editoreak nabarmendu egingo du
          zuretzat aldatu eta zuzendu dezazun.
      7:
        image: notes/starwars_typing_7.JPG
        text: Trabazen bazara, beti has zaitezke berriro Hasi berriro botoia sakatuz,
          eta bloke modura alda dezakezu edozein momentutan goiko eskuin izkinean
          klik eginez. Ondo da, saia gaitezen mekanografiatzen! Eta erroreak egiten
          badituzu, ez etsi. Guztiok behar ditugu hainbat saiakera zuzen egiteko.
    starwars_events:
      1:
        image: notes/starwars_events_1.JPG
        text: Kaixo, nire izena Charita Carter da. Ekoizke kreatibo seniorra naiz
          Walt Disney Imagineering-en. Gure gonbidatuentzako atrakzioak ekoizten dituen
          taldearen arduraduna naiz. Beti ari gara gure gonbidatuen esperientzia hobetzeko
          moduak bilatzen eta teknologia horren muina da.
      2:
        image: notes/starwars_events_2.JPG
        text: Zorionak, lortu duzu! BB-8 programatu duzu. Orain prest zaude zerbait
          zailagoa egiteko. Goazen bada. programazioaren oinarriak ikasi dituzunez,
          atzera egingo dugu denboran zure jokoa eraikitzeko, R2-D2 eta C3PO protagonista
          dituzula.
      3:
        image: notes/starwars_events_3.JPG
        text: 'Joko berri bat egiteko, joko programatzaileek egunero erabiltzen duten
          gauza bat ikasi behar duzu: gertaerak dira. Gertaerek zure programari esaten
          diote entzun edo itxaroteko zerbait gertatu bitartean, eta gertatzen denean,
          ekintza bat exekutatzen da.'
      4:
        image: notes/starwars_events_4.JPG
        text: Gertaeren adibideak dira saguan klikatzeko, gezidun botoi bat sakatzeko
          edo pantaila ukitzeko zain egotea.
      5:
        image: notes/starwars_events_5.JPG
        text: R2-D2 gora mugitu eta Rebel Pilot-arii mezu bat helaraztea egingo dugu
          eta, ondoren, behera mugitu beste Rebel Pilot-arengana. Gertaerak erabiliko
          ditugu mugitu arazteko. Jokalariak gora/behera gezidun teklak edo gora/behera
          botoiak erabiltzen dituenean.
      6:
        image: notes/starwars_events_6.JPG
        text: goraEgitean() gertaera blokea erabiltzen dugu eta eginGora() blokea
          lotzen diogu. Erabiltzaileak gora gezia sakatzen duenean, goraEgitean()
          blokea exekutatzen da. Gauza bera egingo dugu R2-D2 behera mugi arazteko.
      7:
        image: notes/starwars_events_7.JPG
        text: Hau egiteko goraEgitean() komandoa erabilio dugu. Komandoa tresna-kutxatik
          kanpo arrastatzen baduzu, ikusiko duzu giltza artean azaltzen dela eta ez
          puntu eta komarekin. Honek lekua uzten digu erdian beste komando batzuk
          jartzeko. Giltza horien artean kokatzen dugun komando guztiak exekutatuko
          dira erabiltzaileak gora gezia sakatzen duenean.
      8:
        image: notes/starwars_events_8.JPG
        text: R2-D2-k gora egitea nahi dugu beraz, jar dezagun joanGora(); bloke bat
          komandoaren barnean. Eta gauza bera egingo dugu R2-D2-k behera egiteko.
      9:
        image: notes/starwars_events_9.JPG
        text: Horrela, gure robota kontrolatzeko kode guztia aldez aurretik idatzi
          ordez R2-D2 pantailan zehar mugituko duten botoiak sakatzeko gertaeren aurrean
          erreakziona dezan nahi dugu. Urratsez urrats zure jokoarekin gero eta gehiago
          elkarreragin daiteke.
    starwars_congrats:
      1:
        image: notes/starwars_congrats_1.JPG
        text: Kaixo, nire izena Alice da eta proiektu eta injeniaritza taldeak gidatzen
          ditut hemen, Code.org-en eta une hontan jarraitzen ari zaren tutorialean
          egin dut lan.
      2:
        image: notes/starwars_congrats_2.JPG
        text: Azkeneko maila lortu duzu. Zorionak! Star Wars jokoa egiteko behar duzun
          guztia ikasi duzu. Ez dago ez argibiderik, ez ebazteko puzlerik. Zure jokoa
          eraiki dezakezu eta aukeratu nola funtzionatuko duen. Kontu bat gehiago,
          soinu berriak eta komando berriak desblokeatu dituzu, oraindik gehiago egin
          ahal izateko.
      3:
        image: notes/starwars_congrats_3.JPG
        text: "[ikasleak berriketan] Joko bat egin dugu funtsean puntuak lortzeko
          Puffer Pig-ak lortzen dituzuenean. Ordaina da Puffer Pig bat lortzen duzun
          bakoitzean Storm Trooper bat azaltzen dela. Orain pantaila Puffer Pig-ez
          beteta daukazu eta 10,000 ukitu behar dituzu irabazteko."
      4:
        image: notes/starwars_congrats_4.JPG
        text: "[ikasleak berriketan] Joko bat egin dugu zeinetan ezin duzun galdu
          eta akatzen duzun orok puntuak ematen dizkizun. Nire programan, gauzak aldatu
          ditut eta gora klikatzen duzunean zure pertsonaia behera doa eta, eskuinera
          joateko esaten diozunean, pertsonaiak ezkerrera egiten du. Benetan zaila
          da! Batzuetan abantaila daukazu, abantaila injustua, jokoaren garatzailea
          bazara. Lortu al dut? Bai noski!"
      5:
        image: notes/starwars_congrats_5.JPG
        text: Zure sorkuntza amaitu duzunean, aukeratu partekatu zure lagunekin partekatzeko
          edo zure telefonoak jokatzeko esteka lortzeko. Ondo pasa!
    starwars_blocks_intro:
      1:
        image: notes/starwars_blocks_intro_1.JPG
        text: Kaixo, ni Kathleen Kennedy naiz eta Star Wars-en ekoizlea naiz. Indarraren
          Iratzarraldia. Gaur gure izar batekin arituko zara lanean, BB-8-rekin. BB-8
          robot esferiko bat da. Egiten duen guztia eta egiten duen mugimendu bakoitza
          konputagailu software bidez dago kontrolatuta. Informatikak industria guztietan
          du eragina, marketinetik hasi eta osasungintza eta zinemagintzaraino. Finean,
          ehundaka informatikarik elkarrekin egin zuten lan Indarraren Iratzarraldia
          filma egiteko.
      2:
        image: notes/starwars_blocks_intro_2.JPG
        text: Kaixo, ni Rachel Rose naiz, Ikerkuntza eta Garapenerako senior injeniaria
          ILM-n, eta animazio eta izakien garapenerako taldearen burua. Indarraren
          Iratzarraldia filman nire ardura artistei pertsonaien atal mugikorrak garatzen
          laguntzea da pertsonaiak oso sinisgarriak gerta daitezen urrun-urruneko
          galaxia batean.
      3:
        image: notes/starwars_blocks_intro_3.JPG
        text: Hurrengo ordubetean gure Star Wars jokoa garatuko dugu. Programazioaren
          oinarriak irakatsiko dizkizugu. Ohiko programazioa testu formatuan izaten
          da, baina guk hemen blokeak erabiliko ditugu, arrastatu eta askatuz programak
          idazteko. Hurrengo ordubetean Hasteko Rey-rekin egingo dugu lan BB-8-ri
          oinez ibiltarazi eta txatarra guztia jaso arazteko.
      4:
        image: notes/starwars_blocks_intro_4.JPG
        text: Zure pantaila 3 zati nagusitan zatitu da. Ezkerrean programa exekutatzeko
          Star Wars jokalekua duzu. Maila bakoitzaren instrukzioak jokalekuaren azpian
          idatzita daude.
      5:
        image: notes/starwars_blocks_intro_5.JPG
        text: Erdiko gunea tresna-kutxa da eta hauetako bloke bakoitza BB-8-k ulertzen
          duen komando bat da.
      6:
        image: notes/starwars_blocks_intro_6.JPG
        text: Eskuinean dagoen espazio zuria laneremua da eta hor eraikiko dugu gure
          programa.
      7:
        image: notes/starwars_blocks_intro_7.JPG
        text: mugituEzkerrera(); blokea laneremura arrastatzen badut, zer gertatzen
          da? BB-8 lauki-sarean koadro bat mugitzen da.
      8:
        image: notes/starwars_blocks_intro_8.JPG
        text: Eta mugituEzkerrera(); blokearen ondoren BB-8-k zerbait egitea nahi
          badut? Gure programari beste bloke bat gehi diezaioket. mugituGora(); blokea
          aukeratuko dut eta arrastatu mugituEzkerrera(); blokearen azpira nabarmentzen
          den arte. Ondoren, askatu eta bi blokeek bat egingo dute. Hasi sakatzen
          dudanean, BB-8-k laneremuan dauden aginduak goitik behera exekutatuko ditu.
      9:
        image: notes/starwars_blocks_intro_9.JPG
        text: Bloke bat ezabatu nahi baduzu, zerrendatik kendu eta arrastatu berriro
          tresna-kutxara.
      10:
        image: notes/starwars_blocks_intro_10.JPG
        text: Hasi sakatu ondoren, beti sakatu dezakezu leheneratu botoia BB-8 berriro
          hasierara eramateko. Goazen proba egitera!
    starwars_blocks_events:
      1:
        image: notes/starwars_blocks_events_1.JPG
        text: Kaixo, nire izena Charita Carter da. Ekoizke kreatibo seniorra naiz
          Walt Disney Imagineering-en. Gure gonbidatuentzako atrakzioak ekoizten dituen
          taldearen arduraduna naiz. Beti ari gara gure gonbidatuen esperientzia hobetzeko
          moduak bilatzen eta teknologia horren muina da.
      2:
        image: notes/starwars_blocks_events_2.JPG
        text: Zorionak, lortu duzu! BB-8 programatu duzu. Orain prest zaude zerbait
          zailagoa egiteko. Goazen bada. programazioaren oinarriak ikasi dituzunez,
          atzera egingo dugu denboran zure jokoa eraikitzeko, R2-D2 eta C3PO protagonista
          dituzula.
      3:
        image: notes/starwars_blocks_events_3.JPG
        text: 'Joko berri bat egiteko, joko programatzaileek egunero erabiltzen duten
          gauza bat ikasi behar duzu: gertaerak dira. Gertaerek zure programari esaten
          diote entzun edo itxaroteko zerbait gertatu bitartean, eta gertatzen denean,
          ekintza bat exekutatzen da.'
      4:
        image: notes/starwars_blocks_events_4.JPG
        text: Gertaeren adibideak dira saguan klikatzeko, gezidun botoi bat sakatzeko
          edo pantaila ukitzeko zain egotea.
      5:
        image: notes/starwars_blocks_events_5.JPG
        text: R2-D2 gora mugitu eta Rebel Pilot-arii mezu bat helaraztea egingo dugu
          eta, ondoren, behera mugitu beste Rebel Pilot-arengana. Gertaerak erabiliko
          ditugu mugitu arazteko. Jokalariak gora/behera gezidun teklak edo gora/behera
          botoiak erabiltzen dituenean.
      6:
        image: notes/starwars_blocks_events_6.JPG
        text: GoraEgitean() gertaera-blokea erabili eta itsatsi horri joanGora() blokea.
          Jokalariak gora gezidun tekla sakatzen duenean, goraEgitean() blokeari dagokion
          kodea exekutatuko da. Eta gauza bera egingo dugu R2-D2 behera mugi dadin.
          Oraingoan, gure robota kontrolatzeko kode guztia idatzi ordez, botoiak sakatzeko
          gertaerekin erreakzionatzen utziko diogu R2-D2-ri pantailan zehar mugitzeko.
      7:
        image: notes/starwars_blocks_events_7.JPG
        text: Urratsez urrats, zure jokoarekin gero eta gehiago elkarreragin daiteke.
    starwars_blocks_congrats:
      1:
        image: notes/starwars_blocks_congrats_1.JPG
        text: Kaixo, nire izena Alice da eta proiektu eta injeniaritza taldeak gidatzen
          ditut hemen, Code.org-en eta une hontan jarraitzen ari zaren tutorialean
          egin dut lan.
      2:
        image: notes/starwars_blocks_congrats_2.JPG
        text: Azkeneko maila lortu duzu. Zorionak! Star Wars jokoa egiteko behar duzun
          guztia ikasi duzu. Ez dago ez argibiderik, ez ebazteko puzlerik. Zure jokoa
          eraiki dezakezu eta aukeratu nola funtzionatuko duen. Kontu bat gehiago,
          soinu berriak eta komando berriak desblokeatu dituzu, oraindik gehiago egin
          ahal izateko.
      3:
        image: notes/starwars_blocks_congrats_3.JPG
        text: "[ikasleak berriketan] Joko bat egin dugu funtsean puntuak lortzeko
          Puffer Pig-ak lortzen dituzuenean. Ordaina da Puffer Pig bat lortzen duzun
          bakoitzean Storm Trooper bat azaltzen dela. Orain pantaila Puffer Pig-ez
          beteta daukazu eta 10,000 ukitu behar dituzu irabazteko."
      4:
        image: notes/starwars_blocks_congrats_4.JPG
        text: "[ikasleak berriketan] Joko bat egin dugu zeinetan ezin duzun galdu
          eta akatzen duzun orok puntuak ematen dizkizun. Nire programan, gauzak aldatu
          ditut eta gora klikatzen duzunean zure pertsonaia behera doa eta, eskuinera
          joateko esaten diozunean, pertsonaiak ezkerrera egiten du. Benetan zaila
          da! Batzuetan abantaila daukazu, abantaila injustua, jokoaren garatzailea
          bazara. Lortu al dut? Bai noski!"
      5:
        image: notes/starwars_blocks_congrats_5.JPG
        text: Zure sorkuntza amaitu duzunean, aukeratu partekatu zure lagunekin partekatzeko
          edo zure telefonoak jokatzeko esteka lortzeko. Ondo pasa!
    mc_intro:
      1:
        image: notes/mc_intro_1.JPG
        text: Nire izena Jens Bergensten da baina Jeb izenarekin ezagutzen naute.
          Minecraft-en garatzaileen burua naiz hemen, Mojang-en, Estokolmon. Hamaika
          edo hamabi urte nituen programatzen hasi nintzenean jokoak egin nahi nituelako.
          Nire aitaren lagun batez esan zidan jokoak egiteko programatzen ikasi behar
          zela. Eta horrela hasi nintzen. Jokoen arkitektura pentsatzea eta diseinatzea
          gustoko dut. Hori da Minecraft-etik gehien erakartzen nauena.
      2:
        image: notes/mc_intro_2.JPG
        text: Hurrengo orduan informatikaren oinarriak ikasiko dituzu Minecraft mundu
          simulatu batean Alex edo Steve mugitzeko programatuz.
      3:
        image: notes/mc_intro_3.JPG
        text: Ohikoprogramazioa testu moduan egiten da baina gaur Blockly erabiliko
          dugu, programak idazteko arrastatu eta askatu ditzakezun bloke bisualak
          erabiltzen dituen sistema. Azken finean, javascript kodea sortzen arituko
          zara.
      4:
        image: notes/mc_intro_4.JPG
        text: Ikasiko dituzun kontzeptuak programatzaileek egunero erabiltzen dituztenak
          dira eta informatikaren oinarriak dira. Hemen, Mojang-en, Minecraft martxan
          jartzeko erabiltzen ditugun berak dira.
      5:
        image: notes/mc_intro_5.JPG
        text: Hasi aurretik, zure pertsonaia aukeratuko duzu. Nik Alex aukeratuko
          dut. Pantailan zehar mugituko duen programaren kodea idatziko dugu.
      6:
        image: notes/mc_intro_6.JPG
        text: Zure pantaila hiru zati nagusitan banatzen da. Ezkerrean, Minecraft-en
          jokoeremua dago, zure programa bertan exekutatuko da. Maila bakoitzeko zehaztapenak
          azpian daude idatzita.
      7:
        image: notes/mc_intro_7.JPG
        text: Erdiko gunea tresna-kutxa da eta hauetako bloke bakoitza Alex-en ekintzak
          gidatzen dituen agindu bat da.
      8:
        image: notes/mc_intro_8.JPG
        text: Eskuinean duzun gune zuria laneremua da eta bertan eraikiko dugu programa.
      9:
        image: notes/mc_intro_9.JPG
        text: mugituAurrera(); blokea arrastatzen badugu laneremura eta, ondoren,
          Hasi sakatu, zer gertatzen da? Alex-ek lauki bat aurrera egiten du lauki-sarean.
      10:
        image: notes/mc_intro_10.JPG
        text: Eta beste zerbait eginnahi badugu aurrera lauki bat egin ondoren? Programari
          beste bloke bat gehitu diezaiokegu. biraEskuinera(); blokea aukeratuko dut
          eta nire mugituAurrera(); blokearen azpira arrastatuko dut lerro naranja
          azaltzen den arte. Ondoren, askatu eta bi blokeek bat egingo dute. Berriro
          Hasi sakatzen dugunean, Alex-ek laneremuko zerrendan dauden aginduak exekutatuko
          ditu, goitik behera.
      11:
        image: notes/mc_intro_11.JPG
        text: Bloke bat ezabatu nahi baduzu, zerrendatik kendu eta arrastatu berriro
          tresna-kutxara.
      12:
        image: notes/mc_intro_12.JPG
        text: Zure aldaketak desegin eta hasierako egoerara itzultzeko, erabili laneremuko
          goiko eskuin izkinan dagoen Hasi berriro botoia. Kontu bat gehiago, ikusten
          al dituzu biratzeko blokeetan dauden triangelu txiki horiek? Triangelu horiek
          ikusten badituzu, aukera desberdinak dituzula esan nahi du. Hasi gaitezen
          kodearekin!
    mc_repeat:
      1:
        image: notes/mc_repeat_1.JPG
        text: Lydia Winters naiz, Mojang markako zuzendaria eta Minecraft izeneko
          joko txiki bat egin dugu.
      2:
        image: notes/mc_repeat_2.JPG
        text: Nire zeregin gogokoena Minecraft-en esploratzea da. Kobazuloetako abenturak
          maite ditut eta bertan zer bilatu dezakedan ikusi. Programatzaile ez naizenez,
          Minecraft-eko ikasgaia jarraitu eta nere kabuz kodetzen ikasteko desiatzen
          nago.
      3:
        image: notes/mc_repeat_3.JPG
        text: Azkeneko mailak mugituAurrera(); bloke mordoa behar du. Errazagoa litzateke
          konutagailuari esan ahal izatea mugituAurrera(); komandoa lau edo bost aldiz
          exekutatzeko. Zorionez, konputagailuak oso onak dira komandoak errepikatzen
          errepikatu begizten bidez.
      4:
        image: notes/mc_repeat_4.JPG
        text: Minecraft egiterakoan, errepikatu begiztak erabiltzen ditugu mundu berri
          bat sortzeko hasierako materialak kokatzeko. Hori milaka eta milaka bloke
          dira. Begiztak erabiltzen ditugu ere bai, adibidez Alex-en oinak aurrera
          eta atzera mugitzeko bera oinez doan heinean. Errepikatu begiztak programazioaren
          tresna oso baliozkoak dira.
      5:
        image: notes/mc_repeat_5.JPG
        text: Gaua gainera datorkigu eta horregatik, datozen hurrengo mailatan salbu
          egoteko etxea eraikiko dugu. Modu errazean egingo dugu hau errepikatu blokea
          erabiliz.
      6:
        image: notes/mc_repeat_6.JPG
        text: Gure etxearen horma eraikitzeko Alex-i mugituAurrera(); egiteko eta
          ohola jartzeko lau aldiz estea daukagu, edo esan mugituAurrera(); egiteko
          eta ohol bat jartzeko eta, ondoren, erabili errepikatu blokea ekintza hori
          hainbat aldiz egikaritzeko. Errepikatu blokean egingo dugu klik eta esan
          zenbat aldiz nahi dugun ekintza hori exekutatzea. Eraiki dezagun gure etxea
          gaua egin aurretik! Ongi pasa.
    mc_if_statements:
      1:
        image: notes/mc_if_statements_1.JPG
        text: Orain, baldintzapeko aginduak ikasiko ditugu. Baldintzapeko aginduak
          programatzen ikasteko oinarrizkoak dira. Konputagailuari erabakiak hartzen
          laguntzen diote.
      2:
        image: notes/mc_if_statements_2.JPG
        text: Konputagailu guztiek erabiltzen dituzte baldintzapeko aginduak, nire
          telefonoak ere bai. Adibidez, nire telefonoa hartzen dudanean kode bat exekutatzen
          du telefonoa desblokeatuko duen pasahitza zuzena sartuz gero. Kontrako kasuan,
          errore mezu bat bistaratuko du.
      3:
        image: notes/mc_if_statements_3.JPG
        text: Baldintzapeko aginduak erabil ditzakezu zure kodean Steve eta Alice-ek
          erreakziona dezaten munduan ikusten dutenaren arabera. Adibidez, harri bat
          badute aurrean, orduan ezkerrera bira egin dezakete. Edo eskuinera, arbola
          baten aurrean aurkitzen badira.
      4:
        image: notes/mc_if_statements_4.JPG
        text: Kasu hontan, ez dugu laban erori nahi. Erraza da labaren kasuan zer
          egin planifikatzea. Pantailan ikus dezakegu. Baina zer gertatzen da harriaren
          azpian dagoen eta ikusi ezin dezakegun labarekin?
      5:
        image: notes/mc_if_statements_5.JPG
        text: Harria suntsitu ondoren eta aurrera egin aurretik labarik dagoen begiratu
          behar dugu. Laba baldin badago, harri bat jarri beharko dugu gure pertsonaiaren
          aurrean aurrera egin aurretik. Horrela modu seguruan mugitu ahal izango
          gara. Suntsitzeko garaia! Eta gogoratu baldintzapeko agindua erabili behar
          duzula kontuz ibiltzeko.
    mc_congrats_share:
      1:
        image: notes/mc_congrats_share_1.JPG
        text: Zorionak! Informatikaren oinarriak ikasi berri dituzu.
      2:
        image: notes/mc_congrats_share_2.JPG
        text: Orain bloke hauek erabili ditzakezu nahi duzuna egiteko. Ez dago argibiderik
          eta ebazteko puzlerik. Gogoak ematen dizuna eraiki dezakezu. Aukeratu beharko
          duzu.
      3:
        image: notes/mc_congrats_share_3.JPG
        text: "[ikasleak hizketan] Erreala izan behar du. Ilea moztu. L bat egin dut
          argi-zuziekin. A bat egin dut urki oholekin. Funtzionatu du. Funtzionatu
          du. Lanazko etxea egin dugu!"
      4:
        image: notes/mc_congrats_share_4.JPG
        text: Zure sorkuntza amaitu duzunean, aukeratu partekatu esteka bat lortu
          eta zure lagunekin partekatzeko. Ondo pasa!
    mc_congrats_no_share:
      1:
        image: notes/mc_congrats_no_share_1.JPG
        text: Zorionak! Informatikaren oinarriak ikasi berri dituzu.
      2:
        image: notes/mc_congrats_no_share_2.JPG
        text: Orain bloke hauek erabili ditzakezu nahi duzuna egiteko. Ez dago argibiderik
          eta ebazteko puzlerik. Gogoak ematen dizuna eraiki dezakezu. Aukeratu beharko
          duzu.
      3:
        image: notes/mc_congrats_no_share_3.JPG
        text: "[ikasleak hizketan] Erreala izan behar du. Ilea moztu. L bat egin dut
          argi-zuziekin. A bat egin dut urki oholekin. Funtzionatu du. Funtzionatu
          du. Lanazko etxea egin dugu!"
      4:
        image: notes/mc_congrats_no_share_4.JPG
        text: Orain nahi duzuna eraiki dezakezu! Gozatu!
    gumball_intro:
      1:
        image: notes/gumball_intro_1.JPG
        text: Oso erraza da zure joko garatzea. Programazioko oinarri batzuk jakinda,
          segituan has zaitezke jolasean zeuk sortutako jokoan.
      2:
        image: notes/gumball_intro_2.JPG
        text: Bideo-joko faboritorik ba al daukazu? Pausu bat emango dugu PlayLab-ekin
          jokoak sortu ahal izateko. Joko onek istorio bat izan ohi dute eta istorio
          guztiek aktoreak dituzte. Aktore horiek hitz egin, mugitu eta haien artean
          elkar eragiten dute. Agian puntuan batu ere egingo dituzte jokoaren arauen
          arabera. Gaur, gauza horiek guztiak aktore dibertigarriekin banan bana nola
          egin ikasiko dugu eta jarraian zerotik hasita, partekatua izan daitekeen
          eta telefonoak jolasteko balioko duen joko bat eraikiko dugu.
      3:
        image: notes/gumball_intro_3.JPG
        text: Gaur, gauza horiek guztiak aktore dibertigarriekin banan bana nola egin
          ikasiko dugu eta jarraian zerotik hasita, partekatua izan daitekeen eta
          telefonoak jolasteko balioko duen joko bat eraikiko dugu.
      4:
        image: notes/gumball_intro_4.JPG
        text: Zure pantaila hiru zati nagusitan banatuta dago. Ezkerrean programa
          nola exekutatzen den ikusi ahal izango duzu. Maila bakoitzean egin beharrekoa
          azpialdean azaltzen zaizu.
      5:
        image: notes/gumball_intro_5.JPG
        text: Erdiko eremua tresna kutxa da non blokeetako bakoitza kode zati bat
          den.
      6:
        image: notes/gumball_intro_6.JPG
        text: Eskuinean duzun gune zuria laneremua da eta bertan eraikiko dugu programa.
      7:
        image: notes/gumball_intro_7.JPG
        text: Hasteko, zure blokeak "martxan dagoenean" bloke laranjarekin lotu beharko
          dituzu. Hainbat bloke lotu ditzakezu elkarrekin hauek arrastatuz inguruko
          marra horia agertu arte. Orduan elkar lotu egingo dira.
      8:
        image: notes/gumball_intro_8.JPG
        text: Lehen puzzle honetan, aktoreek zerbait esatea lortuko dugu "esan" blokea
          "martxan dagoenean" blokearekin lotzen eta zure mezua bertan idazten. Zure
          blokeak behar den lekuan dituzunean hasi botoian sakatu programatu duzuna
          ikusteko.
      9:
        image: notes/gumball_intro_9.JPG
        text: Has zaitez eta bukaerarako zure joko propioa sortzeko kapaz izango zara,
          elkar eragin dezaketen mota guztietako jokalariekin, puntuekin, gauzak jaurtikiz,
          eta elkar desagerraraziz. Dena zure esku dago!
    gumball_events:
      1:
        image: notes/gumball_events_1.JPG
        text: Orain, joko programatzaileek egunero erabiltzen duten zerbait ikasiko
          dugu. Gertaerak deritze. Gertaera batek zure programari esaten dio zerbait
          gertatzearen zain adi egoteko, eta zerbait hori gertatzen denean jokoak
          ekintza bat gauzatuko du.
      2:
        image: notes/gumball_events_2.JPG
        text: Gertaera adibide batzuk dira saguaren klik bat edo gora eta beherako
          gezi tekla bat edo baita ere pantaila ukitzea.
      3:
        image: notes/gumball_events_3.JPG
        text: Hemen jokalariak aktorearen gainean klik egiten duenean honek zerbait
          esatea lortuko dugu. "Klik egiterakoan" blokea erabiliko dugu eta horri
          lotuko diogu "esan" blokea. Jokalariak klik egiterakoan, bloke horretara
          lotutako bloke guztiak burutuko dira.
      4:
        image: notes/gumball_events_4.JPG
        text: Badira ere "gezia sakatzean" blokeak. Mugimendu blokeak lotzen badizkiozu
          bloke horiei, zure aktoreak gora, behera, eskuin eta ezker mugitzen has
          zaitezke geziekin. Pixkanaka zure jokoa elkarreragileago bihurtzen ari da.
    gumball_repeat:
      1:
        image: notes/gumball_repeat_1.JPG
        text: Imajina dezakezu zerbait behin eta berriz betirako errepikatzen egon
          beharko bazenu? Zorionez ez duzu horrelakorik inoiz egin beharko konputagailuak
          oso onak baitira gauzak errepikatzen.
      2:
        image: notes/gumball_repeat_2.JPG
        text: Hau da betirako errepikatu blokea. Edozer gauza bloke honen barruan
          betirako errepikatuko da jokoan. Aktore batek gauzaren bat errepikatzen
          ibiltzea nahi badugu jokalariaren parte hartzerik gabe, bloke horiek betirako
          errepikatu blokearen barruan jarriko ditugu.
      3:
        image: notes/gumball_repeat_3.JPG
        text: Ondorengo puzzlean gure helburua da aktoreari laguntzea modu jarraituan
          lan bat egiten. Aginduak errepikatzen ikastea denbora asko aurrezteko aukera
          emango dizu gero zure joko propioa egiten ari zarenean.
    iceage_intro:
      1:
        image: notes/iceage_intro_1.JPG
        text: Zure jokoa egin nahi izanez gero, oso erraza da. Programazio pixka bat
          ikasi eta zuk sortutako jokoa jokatzen hasi ahal izango duzu.
      2:
        image: notes/iceage_intro_2.JPG
        text: Bideo-joko faboritorik ba al daukazu? Pauso bat emango dugu Jolas Laborategiko
          jokoaren antzeko jokoak sortzeko. Joko onek istorio bat izan ohi dute eta
          istorio guztiek aktoreak dituzte. Aktore horiek hitz egin, mugitu eta haien
          artean elkar eragiten dute. Agian puntuak ere eskuratuko dituzte, jokoaren
          arauen arabera. Gaur, gauza horiek guztiak aktore dibertigarriekin banan
          bana nola egin ikasiko dugu eta jarraian zerotik hasita, partekatua izan
          daitekeen eta telefonoan jolasteko balioko duen joko bat gauzatuko dugu.
      3:
        image: notes/iceage_intro_3.JPG
        text: Gaur, gauza horiek guztiak aktore dibertigarriekin banan bana nola egin
          ikasiko dugu eta jarraian zerotik hasita, partekatua izan daitekeen eta
          telefonoak jolasteko balioko duen joko bat eraikiko dugu.
      4:
        image: notes/iceage_intro_4.JPG
        text: Zure pantaila hiru zati nagusitan banatuta dago. Ezkerrean programa
          nola exekutatzen den ikusi ahal izango duzu. Maila bakoitzean egin beharrekoa
          azpialdean azaltzen zaizu.
      5:
        image: notes/iceage_intro_5.JPG
        text: Erdiko eremua tresna kutxa da non blokeetako bakoitza kode zati bat
          den.
      6:
        image: notes/iceage_intro_6.JPG
        text: Eskuinean duzun gune zuria laneremua da eta bertan eraikiko dugu programa.
      7:
        image: notes/iceage_intro_7.JPG
        text: Hasteko, zure blokeak "martxan dagoenean" bloke laranjarekin lotu beharko
          dituzu. Hainbat bloke lotu ditzakezu elkarrekin hauek arrastatuz inguruko
          marra horia agertu arte. Orduan elkar lotu egingo dira.
      8:
        image: notes/iceage_intro_8.JPG
        text: Lehen puzzle honetan, aktoreek zerbait esatea lortuko dugu "esan" blokea
          "martxan dagoenean" blokearekin lotzen eta zure mezua bertan idazten. Zure
          blokeak behar den lekuan dituzunean hasi botoian sakatu programatu duzuna
          ikusteko.
      9:
        image: notes/iceage_intro_9.JPG
        text: Has zaitez eta bukaerarako zure joko propioa sortzeko kapaz izango zara,
          elkar eragin dezaketen mota guztietako jokalariekin, puntuekin, gauzak jaurtikiz,
          eta elkar desagerraraziz. Dena zure esku dago!
    iceage_events:
      1:
        image: notes/iceage_events_1.JPG
        text: Orain, joko programatzaileek egunero erabiltzen duten zerbait ikasiko
          dugu. Gertaerak deritze. Gertaera batek zure programari esaten dio zerbait
          gertatzearen zain adi egoteko, eta zerbait hori gertatzen denean jokoak
          ekintza bat gauzatuko du.
      2:
        image: notes/iceage_events_2.JPG
        text: Gertaera adibide batzuk dira saguaren klik bat edo gora eta beherako
          gezi tekla bat edo baita ere pantaila ukitzea.
      3:
        image: notes/iceage_events_3.JPG
        text: Hemen jokalariak aktorearen gainean klik egiten duenean honek zerbait
          esatea lortuko dugu. "Klik egiterakoan" blokea erabiliko dugu eta horri
          lotuko diogu "esan" blokea. Jokalariak klik egiterakoan, bloke horretara
          lotutako bloke guztiak burutuko dira.
      4:
        image: notes/iceage_events_4.JPG
        text: Badira ere "gezia sakatzean" blokeak. Mugimendu blokeak lotzen badizkiozu
          bloke horiei, zure aktoreak gora, behera, eskuin eta ezker mugitzen has
          zaitezke geziekin. Pixkanaka zure jokoa elkarreragileago bihurtzen ari da.
    iceage_repeat:
      1:
        image: notes/iceage_repeat_1.JPG
        text: Imajina dezakezu zerbait behin eta berriz betirako errepikatzen egon
          beharko bazenu? Zorionez ez duzu horrelakorik inoiz egin beharko konputagailuak
          oso onak baitira gauzak errepikatzen.
      2:
        image: notes/iceage_repeat_2.JPG
        text: Hau da betirako errepikatu blokea. Edozer gauza bloke honen barruan
          betirako errepikatuko da jokoan. Aktore batek gauzaren bat errepikatzen
          ibiltzea nahi badugu jokalariaren parte hartzerik gabe, bloke horiek betirako
          errepikatu blokearen barruan jarriko ditugu.
      3:
        image: notes/iceage_repeat_3.JPG
        text: Ondorengo puzzlean gure helburua da aktoreari laguntzea modu jarraituan
          lan bat egiten. Aginduak errepikatzen ikastea denbora asko aurrezteko aukera
          emango dizu gero zure joko propioa egiten ari zarenean.
    mc_2016_intro:
      1:
        image: notes/mc_2016_intro_1.jpg
        text: Kaixo, nire izena Jens da eta Minecraft-en sortzaile diseinugile burua
          naiz. Datorren orduan, zure berezko Minecraft-jokoa egingo duzu. Honek Minecraft-en
          antza du baina mundua gelditu da. Ardiak ez dira mugitzen ari, oilaskoak
          ez dira arrautzak jartzen ari, eta oraintxe zonbiak bare egoten ari dira.
          Zure esku dago Kodea gehitzea Minecraft-en mundua ibil dadin.
      2:
        image: notes/mc_2016_intro_2.jpg
        text: 'My name is Melissa and I am a user researcher at Minecraft. What I''m
          really interested in is how people think and interact with technology and
          so this job is the perfect job for me to put together the computer engineering
          with the psychology: how people think and behave.'
      3:
        image: notes/mc_2016_intro_3.jpg
        text: You'll see your screen is split into three main parts. 1) On the left
          is the Minecraft game. Right now the world is frozen but we're going to
          fix that with code.
      4:
        image: notes/mc_2016_intro_4.jpg
        text: 2) This middle area is the toolbox. Each of these blocks is a command
          that chickens, sheep, and other Minecraft creatures can understand.
      5:
        image: notes/mc_2016_intro_5.jpg
        text: 3) The space on the right is called the workspace and this is where
          we'll build our program.
      6:
        image: notes/mc_2016_intro_6.jpg
        text: If you forget what to do, the instructions for each level are at the
          top.
      7:
        image: notes/mc_2016_intro_7.jpg
        text: To start off, we're going to program a chicken. Let's drag the "move
          forward" command to the workspace. When I hit "Run" the chicken moves forward
          one step. To go further, I'll drag another "move forward" block underneath
          the first "move forward" block until the highlight appears. Then I'll drop
          it and the two blocks snap together. If I hit "Run" again, the chicken walks
          two steps.
      8:
        image: notes/mc_2016_intro_8.jpg
        text: If you ever want to delete a block, just remove it from the stack and
          drag it back to the toolbox.
      9:
        image: notes/mc_2016_intro_9.jpg
        text: After you've hit "Run" you can always hit the "Reset" button to reset
          the game and start over. Now, it's your turn to make your very own version
          of Minecraft. Have fun!
    mc_2016_loops:
      1:
        image: notes/mc_2016_loops_1.jpg
        text: Hi, I'm Lisa. I'm a software developer on Minecraft and I work on some
          of the animals and enemies in the game. One of the animals that I worked
          on is the ocelot. I worked on the part where you can feed an ocelot a fish
          to tame it into your own cat.
      2:
        image: notes/mc_2016_loops_2.jpg
        text: As humans, we get really bored if we have to do the same thing over
          and over and over again. But the cool thing about computers is that they
          can do the same thing millions or even billions of times in a row without
          getting bored. This repetition is called a loop and every creature in Minecraft
          uses loops.
      3:
        image: notes/mc_2016_loops_3.jpg
        text: Earlier, we got a chicken to move across the screen but then she stopped.
          In Minecraft, the chickens wander around forever and ever. Let's use a "forever
          do" loop from our toolbox to keep our chickens moving around forever too.
          The power of loops will save you tons of time and open up all kinds of neat
          options as you build your own version of Minecraft.
    mc_2016_events:
      1:
        image: notes/mc_2016_events_1.jpg
        text: On this next level, you can pick to be either Steve or Alex. Press the
          arrow buttons on your keyboard to move up, down, left, and right. Now you
          can move around a level wherever you want. To use a creature, just walk
          towards it, turn to face it, and press the spacebar.
      2:
        image: notes/mc_2016_events_2.jpg
        text: If you're using a touch screen, swipe up, down, left, and right to move
          around. Then tap the game to use the item in front of you.
      3:
        image: notes/mc_2016_events_3.jpg
        text: But what happens when you use it? In Minecraft, sheep drop wool when
          you shear them, cows run away when you hit them, and creepers explode when
          you get near them. These reactions happen thanks to something called events.
          Events tell your program to listen or wait for when something happens. And
          when it does, perform an action.
      4:
        image: notes/mc_2016_events_4.jpg
        text: So far, you've used one event. Code you put in the "when spawned" slot
          runs when your creature is created or when the game starts. Over the next
          few levels you'll have new slots for events such as "when touched" that
          runs when you touch the creature, or "when used" for when you use the creature.
          Or, if you want your zombie to disappear when the sun comes up, put that
          in the "when day" slot
    mc_2016_spawn:
      1:
        image: notes/mc_2016_spawn_1.jpg
        text: In games, spawn means the same thing as create. In this level, let's
          make zombies spawn when the sun goes down. To do this, we'll use the "when
          night" block.
      2:
        image: notes/mc_2016_spawn_2.jpg
        text: Since we want the zombies to spawn at night we'll add the "spawn zombie"
          block under the "when night" block. As soon as they're spawned, each zombie
          will run the code that you put in their "when spawned" event slot. Have
          fun spawning zombies!
    mc_2016_congrats:
      1:
        image: notes/mc_2016_congrats_1.jpg
        text: Congratulations! You've learned to use computer science commands to
          bring the Minecraft world to life. You are the developer now. You've unlocked
          all the commands and all the creatures. You choose what happens.
      2:
        image: notes/mc_2016_congrats_2.jpg
        text: When you're done making your game, choose share to get a link that you
          can share with your friends or to play your game on your phone. Have fun!
          I'm looking forward to playing your version of Minecraft.
    applab_intro_welcome:
      1:
        image: notes/applab_intro_welcome_1.png
        text: My name is Mei'lani. I'm an intern at code.org and I'm also a computer
          science student. I like computer science because it's really creative. I
          get to be the problem solver. I get to make everything function how I want
          it to. But I also get to be the designer. I get to be the artist and choose
          everything on the creative side of it.
      2:
        image: notes/applab_intro_welcome_2.png
        text: Making your own apps is easy with App Lab! Whether you're new to coding
          or have some experience. App Lab is a great tool for building new apps and
          sharing them with your friends.
      3:
        image: notes/applab_intro_welcome_3.png
        text: This is a App Lab. On the left side is your app. On the right side is
          the code that will make it run. You build your program by dragging in blocks
          from the toolbox. To start you'll just have one block called 'setProperty'.
      4:
        image: notes/applab_intro_welcome_4.png
        text: The set property block changes the look of the elements on your screen.
          Like the buttons, labels, or even the screen itself. First you need to decide
          which element you want to change. If you hover over an element in your app
          you can see the name or ID here. Then go select that ID from the first drop
          down.
      5:
        image: notes/applab_intro_welcome_5.png
        text: Elements have lots of properties you can change like their text color,
          background color or font size. You can see the full list and choose which
          property you want to change in the second drop down.
      6:
        image: notes/applab_intro_welcome_6.png
        text: The last drop down is where you'll write the value you want to use value
          you want to use. The block will make a suggestion for you. But you can always
          type in different colors or numbers yourself.
      7:
        image: notes/applab_intro_welcome_7.png
        text: Once you're done, the block reads a bit like a sentence:'Set button1's
          background color to green.' Hit run to see the changes you're building in
          code. If you reset you can drag in more blocks to change other things about
          your app. Like the text!
      8:
        image: notes/applab_intro_welcome_8.png
        text: For this tutorial we'll be working in block mode but App Lab also supports
          working in text.
      9:
        image: notes/applab_intro_welcome_9.png
        text: Either way you'll be programming in JavaScript, the language of the
          web. Each level has a goal, instructions and an image of what you're aiming
          to create.
      10:
        image: notes/applab_intro_welcome_10.png
        text: If you're ever stuck, click on this picture and it will show you exactly
          how to complete the level. But see if you can do it on your own first.
      11:
        image: notes/applab_intro_welcome_11.png
        text: Once you've completed the goal for this level click Finish to move on.
          That's all there is to it! Hit the orange "continue" button to go to the
          next level and start your adventure with an App Lab!
    applab_intro_events:
      1:
        image: notes/applab_intro_events_1.png
        text: Apps are really cool because it's kind of like starting your own business
          I mean, you get to design everything from the ground up, you get to manage
          everything, and you're the owner of this piece of work that you just created
          with code.
      2:
        image: notes/applab_intro_events_2.png
        text: Now that you can change the look of your app let's make it interactive
          by responding to events! Events are user actions like clicking a button,
          scrolling through a menu, or hovering over a picture. Interactive apps need
          ways to respond to events, like playing a sound when I click this button.
          To do this in App Lab you need to use a new block called 'onEvent'.
      3:
        image: notes/applab_intro_events_3.png
        text: This program sets the screen to blue. I want the screen to turn green
          when I click this button. First I'll need to drag in an onEvent block. By
          hovering I know the button's ID is "bigButton" so I'll select that in the
          first drop-down.
      4:
        image: notes/applab_intro_events_4.png
        text: Next I'll choose the type of event. There's lots of options you can
          pick from but right now I'll leave it as a regular old click.
      5:
        image: notes/applab_intro_events_5.png
        text: 'Finally I''ll add code inside the on event that will change the background
          color of the screen. You can read this block like a sentence: "On the event
          that the button is clicked run all this code."'
      6:
        image: notes/applab_intro_events_6.png
        text: Let's test it. Blocks outside an onEvent still run right away so the
          screen starts blue.
      7:
        image: notes/applab_intro_events_7.png
        text: And when I click the big button the code inside my onEvent runs and
          my screen turns green.
      8:
        image: notes/applab_intro_events_8.png
        text: If you want to change more things after the event, like the text on
          the screen just add more code to the onEvent
      9:
        image: notes/applab_intro_events_9.png
        text: To make your program respond to more events add more onEvent blocks.
          Just make sure not to put them inside of each other. Now it's time to try
          it out for yourself. Have fun!
    applab_intro_sounds:
      1:
        image: notes/applab_intro_sounds_1.png
        text: Next you'll learn about adding images and sounds to your app. Let's
          start by checking out the sound options.
      2:
        image: notes/applab_intro_sounds_2.png
        text: In the tool box you'll find a new block called "playSound". Drag it
          into the workspace. You can pick a sound to play by clicking the drop-down
          then clicking "Choose".
      3:
        image: notes/applab_intro_sounds_3.png
        text: From here you can either upload a sound file from your computer, or
          search for a sound from the sound library. The sound library has lots of
          different categories like instruments, background music or animals.
      4:
        image: notes/applab_intro_sounds_4.png
        text: Once you've got the sound you want, click "Choose". When this block
          runs, it will play the sound you chose.
      5:
        image: notes/applab_intro_sounds_5.png
        text: To add images to your elements you can just use the setProperty block.
          Select the image property in the second drop-down
      6:
        image: notes/applab_intro_sounds_6.png
        text: Then select "Choose" from the third drop down.
      7:
        image: notes/applab_intro_sounds_7.png
        text: From here you can upload an image from your computer or you can look
          through a huge library of icons in the icon library.
      8:
        image: notes/applab_intro_sounds_8.png
        text: Back in code mode you can use the "setProperty" block to change the
          icon color of your icon. Once you've picked what image your icon to use
          click "Run" to see how it looks.
      9:
        image: notes/applab_intro_sounds_9.png
        text: That's all there is to it! Now you can start adding images and sounds
          to make your apps even more fun and dynamic.
    applab_intro_designmode:
      1:
        image: notes/applab_intro_designmode_1.png
        text: To build your own apps you're going to need to start designing screens
          and elements from scratch. App Lab makes this easy to do with Design Mode.
      2:
        image: notes/applab_intro_designmode_2.png
        text: Use the switch on top of your app to go into Design Mode.
      3:
        image: notes/applab_intro_designmode_3.png
        text: You can add new elements by dragging them onto the screen. You can move
          them around to different locations and change their size by dragging the
          bottom right corner.
      4:
        image: notes/applab_intro_designmode_4.png
        text: To change an element's properties use the controls on the right. For
          example, it's really easy to change this button's text, color, and font
          size.
      5:
        image: notes/applab_intro_designmode_5.png
        text: When you add a new element to your screen it'll get a generic ID like
          button1. It's a good idea to change this button's ID to something more meaningful
          like "rightButton". So that you'll know which one it is when you go to the
          program.
      6:
        image: notes/applab_intro_designmode_6.png
        text: If you add an element to your app by mistake, just drag it out or hit
          the delete.
      7:
        image: notes/applab_intro_designmode_7.png
        text: You can add entirely new screens to your app by dragging in a screen
          element
      8:
        image: notes/applab_intro_designmode_8.png
        text: From the drop-down at the top you can quickly switch back and forth
          between the screens you create.
      9:
        image: notes/applab_intro_designmode_9.png
        text: Inside your app, you'll need a way to switch between all of these screens,
          so the setScreen block has been added to the toolbox. Use "setScreen" inside
          the "onEvent" block to change screens at the click of a button.
      10:
        image: notes/applab_intro_designmode_10.png
        text: In the next few levels you'll be working on a single project. First
          you'll add a button then you'll add a new screen and finally you'll write
          code so that the button switches to the new screen.
    applab_intro_share:
      1:
        image: notes/applab_intro_share_1.png
        text: Now that you've learned some of the basics of App Lab like adding buttons,
          sounds, images, text and new screens you can make all sorts of apps.
      2:
        image: notes/applab_intro_share_2.png
        text: In the next level you'll find the app you just finished building. With
          a little creativity, you can turn this into a personality quiz for your
          friends, a greeting card that you can share with your family or a choose-your-own-adventure
          game. All of these apps are just a combination of the skills you've already
          learned, and I bet you can come up with even more.
      3:
        image: notes/applab_intro_share_3.png
        text: Once you're done with your app you can easily send it to your phone
          to see how it looks. Just click "Share" and enter your phone number here.
      4:
        image: notes/applab_intro_share_4.png
        text: You'll receive a text message that'll let you open up your app instantly.
      5:
        image: notes/applab_intro_share_5.png
        text: You can also share a link to your app over social media or post it to
          the code.org public gallery for other people to play and share.
      6:
        image: notes/applab_intro_share_6.png
        text: You've just scratched the surface of what App Lab can do. Full App Lab
          features more advanced user interactions, new screen elements and even a
          built-in database so you can quickly build full featured apps. At "code.org/applab"
          you'll find the full tool and lots of ideas if you want to keep going.
      7:
        image: notes/applab_intro_share_7.png
        text: Thanks for coming along the ride. Now go build and share your first
          app, and keep on building apps with App Lab!
    mc_2017_agent_intro:
      1:
        image: notes/mc_2017_agent_intro_1.png
        text: 'Stacy: Stampy, Lizzy, Preston - thank you for coming with me. What
          I want to show you is just over this mesa plateau. I think you''re going
          to love it!'
      2:
        image: notes/mc_2017_agent_intro_2.png
        text: Wait a minute - there's a hole in the track! (screaming)
      3:
        image: notes/mc_2017_agent_intro_3.png
        text: 'Is everyone okay? Stampy: Ah, I see the problem. Look! There was a
          hole in the track. Stacy: Really, Stampy? Lizzy: Maybe we should gather
          blocks to fix it. Preston: Let''s make it a race. First one back to the
          top wins. Stacy: Ok, on your mark, get set, GO! Ok, I''m just gonna gather
          some of this terracotta. Wait. Guys, I can''t mine! Preston: Same. Lizzy:
          I can''t either. Stacy: Ok, that is really strange. Stampy, can you mine?
          Stampy: I can''t mine! Stacy: Ok, everyone stay calm. Stampy: Is the game
          broken? Stacy: If it is, how do we fix it? Lizzy: I don''t know. Stampy:
          Does anyone know how to write Minecraft code?'
      4:
        image: notes/mc_2017_agent_intro_4.png
        text: "(poof) Preston: What is that? Stampy: I've never seen one of these
          before. Lizzy: It's so adorable! Stacy: Is it...is it tameable? Preston:
          Okay, what is going on? Someone needs to go back to the real world and fix
          this.  All: Not it! Stacy: Not i- (Sigh.) Ok, I'll go."
      5:
        image: notes/mc_2017_agent_intro_5.png
        text: Oh, okay, hey, so I'm in the real world now. I'm going to go try to
          find the Minecraft offices.
      6:
        image: notes/mc_2017_agent_intro_6.png
        text: But, I'm going to need your help. Start doing the tutorial, start learning
          how to code, and I'll catch up with you guys after a few levels, okay? Wish
          me luck! I think it's this way. Ow! Cactus! I'm okay!
      7:
        image: notes/mc_2017_agent_intro_7.png
        text: To complete the Hour of Code challenge, you'll need to write code to
          program the agent. You'll work together with The Agent to clear any obstacles
          in your path, so you can pick up the items you'll need for your journey.
          Only the Agent can place and break blocks, and only you can collect items.
          Your screen is split into three main parts. On the left is Minecraft.
      8:
        image: notes/mc_2017_agent_intro_8.png
        text: The middle area is the toolbox with commands that the Agent can understand.
      9:
        image: notes/mc_2017_agent_intro_9.png
        text: And on the right, is the workspace. That's where you stack the commands
          to build your program to control the Agent.
      10:
        image: notes/mc_2017_agent_intro_10.png
        text: The Agent can walk, turn, and activate pressure plates. It can also
          destroy blocks and place blocks. When it places the block like these minecart
          rails, it places it underneath itself.
      11:
        image: notes/mc_2017_agent_intro_11.png
        text: If you forget what to do, the instructions for each level are at the
          top.
      12:
        image: notes/mc_2017_agent_intro_12.png
        text: If you want to try again, you can hit the blue reset button to reset
          everything to where it started. And if you need to delete a block of code,
          drag it from your workspace to the toolbox. Remember to hit run to get the
          Agent moving. Okay, go ahead and try out the first few levels. Good luck!
    mc_2017_repeat:
      1:
        image: notes/mc_2017_repeat_1.png
        text: 'Stampy: I wonder what Stacy is up to?'
      2:
        image: notes/mc_2017_repeat_2.png
        text: 'Stacy: Woah, I think I''m in the right place. This is amazing!'
      3:
        image: notes/mc_2017_repeat_3.png
        text: I feel like I'm back in Minecraft! Hello. How are you? Hello?
      4:
        image: notes/mc_2017_repeat_4.png
        text: 'Oh, there''s a creeper. You don''t do anything, do you? Katie: Stacy?
          Stacy:Hi, Katie? Katie: Yes, welcome to Minecraft!'
      5:
        image: notes/mc_2017_repeat_5.png
        text: 'Stacy: This is amazing. So you work here every day as a developer,
          right? Katie: Yeah, it''s pretty awesome. I''m a developer on the Minecraft
          marketplace team. Stacy: How many coding languages do you know? Katie: In
          my career I''ve probably worked with over a dozen. Stacy: A dozen? Katie:
          Yeah. Stacy: So now, you wouldn''t happen to know anything about this little
          golem guy that calls himself the Agent? Katie: We use the Agent to do things
          that Steve or Alex can''t, like go across lava. Stacy: Well, I want to learn
          how to code, and they want to learn how to code, so what is one of the first
          things that you need to know when you''re learning?'
      6:
        image: notes/mc_2017_repeat_6.png
        text: 'Katie: Well, you need to learn how to use loops. Loops are things that
          developers write to give commands to a computer that can be run over and
          over again. Stacy: Got it, so I think there''s actually some of that coming
          up in the levels ahead, so go ahead and give loops a try.'
      7:
        image: notes/mc_2017_repeat_7.png
        text: In the next level, you can use a loop to move the Agent along the path.
          Drag the repeat block into the workspace and place the move forward block
          inside the repeat block. This tells the computer to do the same thing many
          times in a row without having to drag a whole bunch of blocks into the workspace.
          You can choose how many times to repeat by putting a number in the repeat
          block.
      8:
        image: notes/mc_2017_repeat_8.png
        text: You can put turns and multiple commands in the repeat block too, but
          for now try using a repeat to move the Agent forward a few steps. Remember,
          if you get stuck on a puzzle you can always hit the blue reset button and
          try again.
      9:
        image: notes/mc_2017_repeat_9.png
        text: 'If you are thinking about having a cool job like Katie''s, go ahead
          and click the show code button when you finish every level. That''s going
          to actually show you the Javascript code that someone like Katie uses when
          she''s actually programming Minecraft. Katie: Yeah, good luck everyone!'
    mc_2017_functions:
      1:
        image: notes/mc_2017_functions_1.png
        text: 'Preston: I''m not trying to brag, but I''m pretty good at parkour.
          Lizzy: Let''s sleep so it''s day when Stacy comes back.'
      2:
        image: notes/mc_2017_functions_2.png
        text: 'Stacy: Ok guys, I am back from the Minecraft offices, and I think I
          know how to solve the problem I''m having in my game. I think I can use
          a function. Let me just open this.'
      3:
        image: notes/mc_2017_functions_3.png
        text: So a function is a specific set of instructions to accomplish a certain
          task, kind of like a recipe. In the next few levels, you'll have access
          to functions that you can use to solve the puzzles.
      4:
        image: notes/mc_2017_functions_4.png
        text: Look at the code in the function when it's in the workspace to see what
          it does.
      5:
        image: notes/mc_2017_functions_5.png
        text: Then, find the block with that name in the toolbox and drag it from
          the toolbox to the when run block.
      6:
        image: notes/mc_2017_functions_6.png
        text: Remember, you can use the same function every time you need to run the
          same set of instructions to do something, like build a bridge. Good luck,
          I know you can do it!
    mc_2017_congratulations:
      1:
        image: notes/mc_2017_congratulations_1.png
        text: 'Preston: Congratulations!'
      2:
        image: notes/mc_2017_congratulations_2.png
        text: 'Lizzy: Congratulations!'
      3:
        image: notes/mc_2017_congratulations_3.png
        text: 'Stampy: Congratulations, you did it!'
      4:
        image: notes/mc_2017_congratulations_4.png
        text: 'Stacy: Congratulations guys, you totally rocked that! And now that
          you''ve completed the Hour of Code, you can start coding in Minecraft. You''ve
          learned about loops, functions, and what a software Agent does.'
      5:
        image: notes/mc_2017_congratulations_5.png
        text: Now, it's time for the free play level, where you are the developer.
          Use any remaining time to write your own functions to explore, mine, and
          build.
      6:
        image: notes/mc_2017_congratulations_6.png
        text: 'You can take the code that you write in this level into your Minecraft
          world on Minecraft: Education Edition. Just click ''Finish'' and follow
          the instructions for getting the link to use in your world. to continue
          coding with the Agent. Have fun, and good job!'
      7:
        image: notes/mc_2017_congratulations_7.png
        text: 'Stacy: And I''m back! Okay, you guys, this is the Agent! Let me show
          you what it can do. Look, it''s doing it! I told it to build a staircase
          out of these terra cotta blocks, now we can just use this to get out of
          here. And you guys, it''s not just staircases. I can tell the Agent to do
          anything I want, and it will do it for me.'
      8:
        image: notes/mc_2017_congratulations_8.png
        text: 'Stampy: How did you do that? Stacy: It was easy, actually. I just used
          code!'
    csd_concept_how_computers_work:
      1:
        image: notes/csd_concept_how_computers_work_1.png
        text: 'Everywhere you look, computers are changing the world. Whether they''re
          on our desktops, in our homes, our pockets, or just about anywhere else.
          But while most of us use this revolutionary technology daily, we don''t
          often ask: "How do computers work?" In this series, you''re going to learn
          how computers really work, starting with what makes a computer a computer.
          Then, you''ll look at how information is represented inside the computer
          using tiny electrical signals going on and off at mind-boggling speeds.'
      2:
        image: notes/csd_concept_how_computers_work_2.png
        text: After that, you'll learn how computers use circuits to do everything
          from simple math to simulating entire virtual worlds. Next, you'll zoom
          out and look at the different parts of a computer that actually input, output,
          and store all that information. Finally, you'll take a look at what code
          actually is and how software controls hardware. So whether you're just curious
          about the devices you use every day or you want to design the innovations
          of the future, the first step is learning how computers work.
    csd_concept_computer:
      1:
        image: notes/csd_concept_computer_1.png
        text: My name is May-Li Khoe and I'm a designer and an inventor. So some of
          the things I've designed have been at Apple, and now I design products for
          kids to use so that they can have an easier time in school. My other jobs
          include DJ-ing and dancing.
      2:
        image: notes/csd_concept_computer_2.png
        text: Computers are everywhere! They're in people's pockets, they're in people's
          cars, people have them on their wrists. They might be in your backpack right
          now. But what makes a computer a computer? What does make a computer a computer
          anyway? And how does it even work?
      3:
        image: notes/csd_concept_computer_3.png
        text: Hi I'm Nat! I was one of the original designers of the Xbox. I've been
          working with computers since I was maybe seven years old and now I work
          on virtual reality. As humans, we've always built tools to help us solve
          problems. Tools like a wheelbarrow, a hammer, or a printing press, or a
          tractor-trailer.
      4:
        image: notes/csd_concept_computer_4.png
        text: All of these inventions helped us with manual work. Over time, people
          began to wonder if a machine could be designed and built to help us with
          the thinking work we do, like solving equations or tracking the stars in
          the sky. Rather than moving or manipulating physical things like dirt and
          stone, these machines would need to be designed to manipulate information.
          As the pioneers of computer science explored how to design a thinking machine,
          they realized that it had to perform four different tasks.
      5:
        image: notes/csd_concept_computer_5.png
        text: It would need to take input, store information process it and then output
          the results. Now this might sound simple, but these four things are common
          to all computers. That's what makes a computer a computer.
      6:
        image: notes/csd_concept_computer_6.png
        text: Computers started out as basic calculators, which was already really
          awesome at the time, and they were only manipulating numbers back then.
          But now we can use them to talk to each other, we can use them to play games,
          control robots, and do any crazy thing that you could probably imagine.
          Modern computers look nothing like those clunky old machines but they still
          do these same four things.
      7:
        image: notes/csd_concept_computer_7.png
        text: First, we're going to talk about input. You can tell computers what
          to do with the keyboard, you can tell them what to do with the mouse, the
          microphone, the camera. All these different inputs give a computer information,
          which is then stored in memory.
      8:
        image: notes/csd_concept_computer_8.png
        text: A computer's processor takes information from memory. It manipulates
          it or changes it using an algorithm, which is just a series of commands.
          And then it sends the processed information back to be stored in memory
          again. This continues until the processed information is ready to be output.
      9:
        image: notes/csd_concept_computer_9.png
        text: How a computer outputs information depends on what the computer is designed
          to do. A computer display can show text, photos, videos, or interactive
          games -- even virtual reality! The output of a computer may even include
          signals to control a robot.
      10:
        image: notes/csd_concept_computer_10.png
        text: And who knows what the computers of tomorrow will be like? My hope is
          that you get to help decide what you want the computers of tomorrow to look
          like. But across all computers, regardless of the different types of technology
          they use, they're always doing those same four things. They take in information,
          they store it as data, they process it, and then they output the results.
    csd_concept_binary_data:
      1:
        image: notes/csd_concept_binary_data_1.png
        text: Hi! My name is Limor Fried, and I'm an engineer here at Adafruit Industries.
          And this is where I do engineering and design, and I design circuits for
          fashion and music and technology.
      2:
        image: notes/csd_concept_binary_data_2.png
        text: My name is Federico Gomez Suarez, and I'm a software developer with
          Microsoft Hack for Good. And I look into using technology to help us solve
          some of the big social problems of our times.
      3:
        image: notes/csd_concept_binary_data_3.png
        text: You may have heard that computers work on ones and zeros. But almost
          nobody today actually deals directly with these ones and zeros. But ones
          and zeroes do play a big role in how computers work on the inside.
      4:
        image: notes/csd_concept_binary_data_4.png
        text: Inside a computer are electric wires and circuits that carry all the
          information in a computer. How do you store or represent information using
          electricity?
      5:
        image: notes/csd_concept_binary_data_5.png
        text: Well, if you have a single wire with electricity flowing through it,
          the signal could either be on or off. That's not a lot of choices, but it's
          a really important start. With one wire, we can represent a yes or no, true
          or false, a one or zero, or anything else with only two options. This on/off
          state of a single wire is called a bit, and it's the smallest piece of information
          a computer can store.
      6:
        image: notes/csd_concept_binary_data_6.png
        text: 'If you use more wires you get more bits: more ones and zeros. With
          more bits you can represent more complex information. But to understand
          that, we need to learn about something called the binary number system.'
      7:
        image: notes/csd_concept_binary_data_7.png
        text: 'In the decimal number system, we have ten digits from zero to nine,
          and that''s how we''ve all learned to count. In the binary number system,
          we only have two digits: zero and one. With these two digits, we can count
          up to any number.'
      8:
        image: notes/csd_concept_binary_data_8.png
        text: Here's how this works. In a decimal number system we're all used to,
          each position in a number has a different value. There's a 1 position, the
          10 position, the 100 position, and so on. For example, a 9 in the 100 position
          is a 900. In binary, each position also carries a value. But instead of
          multiplying by 10 each time, we multiply by 2. So there's the 1 position,
          the 2 position, the 4 position, the 8 position, and so on. For example,
          the number 9 in binary is 1001. To calculate the value, we add 1 times 8,
          plus 0 times 4, plus 0 times 2, plus 1 times 1. Almost nobody does this
          math because computers do it for us. What's important is that any number
          can be represented with only ones and zeros, or by a bunch of wires that
          are on or off. The more wires you use, the larger the numbers you can store.
          With 8 wires, you can store numbers between 0 and 255. That's 8 ones. With
          just 32 wires, you can store all the way from 0 to over 4 billion. Using
          the binary number system, you can represent any number you like.
      9:
        image: notes/csd_concept_binary_data_9.png
        text: But what about other types of information? Like text, images, or sound?
          It turns out that all these things can also be represented with numbers.
          Think of all the letters in the alphabet. You could assign a number to each
          letter. A could be 1, B could be 2, and so on. You can then represent any
          word or paragraph as a sequence of numbers. And as we saw, these numbers
          can be stored as on or off electrical signals. Every word you see on every
          webpage or your phone is represented using a system like this.
      10:
        image: notes/csd_concept_binary_data_10.png
        text: Now, let's consider photos, videos, and all the graphics you see on
          a screen.
      11:
        image: notes/csd_concept_binary_data_11.png
        text: All of these images are made out of teeny dots called pixels, and each
          pixel has a color. Each of the colors can be represented with numbers. When
          you consider the typical image has millions of these pixels, and the typical
          video shows 30 images per second now we're talking about a lot of data here.
      12:
        image: notes/csd_concept_binary_data_12.png
        text: Every sound is basically a series of vibrations in the air. Vibrations
          can be represented graphically as a waveform. Any point on this waveform
          can be represented by a number. And this way, any sound can be broken down
          into a series of numbers. If you want higher quality sound, you will pick
          32-bit audio or an 8-bit audio. More bits means a higher range of numbers.
      13:
        image: notes/csd_concept_binary_data_13.png
        text: When you use a computer to write code or make your own app, you're not
          dealing directly with these ones and zeros. But you will be dealing with
          images or sound or video. So if you want to understand how computers work
          on the inside, it all comes down these simple ones and zeros and the electrical
          signals in the circuits behind them.
    csd_concept_circuits_logic:
      1:
        image: notes/csd_concept_circuits_logic_1.png
        text: One of the coolest things I've discovered about circuits is circuitry
          can be an art form like if I have a creative idea, I can get that creative
          idea out using circuits. So if you have ideas, you can use technology to
          make those ideas come to life.
      2:
        image: notes/csd_concept_circuits_logic_2.png
        text: Every input or output of a computer is effectively a type of information,
          which can be represented by on or off electrical signals or ones and zeros.
      3:
        image: notes/csd_concept_circuits_logic_3.png
        text: In order to process the information that comes in as input, and to make
          the information that is output, a computer needs to modify and combine the
          input signals. To do this, a computer uses millions of teeny electronic
          components, which come together to form circuits.
      4:
        image: notes/csd_concept_circuits_logic_4.png
        text: Let's take a closer look at how circuits can modify and process information
          that's represented in ones and zeros. This is an incredibly simple circuit.
          It takes an electrical signal, on or off, and it flips it. So if the signal
          you give it is a 1, the circuit gives you a 0, and if you give the circuit
          a 0, it gives you a 1. The signal that goes in is not the same as the signal
          that comes out, and so we call this circuit NOT.
      5:
        image: notes/csd_concept_circuits_logic_5.png
        text: More complicated circuits can take multiple signals and combine them,
          and give you a different result. In this example, a circuit will take two
          electrical signals, now each one might be a 1 or a 0. If either of the signals
          coming in is a 0, then the result is also a 0. This circuit will only give
          you a 1, if the first signal and the second signal are both a 1, and so
          we call the circuit AND.
      6:
        image: notes/csd_concept_circuits_logic_6.png
        text: There are many small circuits like this that perform simple logical
          calculations. By connecting these circuits together, we can make more complex
          circuits that perform more complex calculations.
      7:
        image: notes/csd_concept_circuits_logic_7.png
        text: For example, you can make a circuit that adds 2 bits together called
          an adder. This circuit takes in 2 individual bits, each one a 1 or a 0,
          and adds them together to calculate the sum. The sum can be 0 plus 0 equals
          0, 0 plus 1 equals 1, or 1 plus 1 equals 2. You need two wires coming out
          because it can take up to two binary digits to represent the sum. Once you
          have a single adder for adding two bits of information, you can put together
          multiples of these adder circuits side-by-side to add together much larger
          numbers.
      8:
        image: notes/csd_concept_circuits_logic_8.png
        text: For example, here's how an 8-bit adder adds the numbers 25 and 50. Each
          number is represented using 8 bits, resulting in 16 different electrical
          signals that go into the circuit. The circuit for an 8-bit adder has lots
          of little adders inside of it, which together, calculate the sum.
      9:
        image: notes/csd_concept_circuits_logic_9.png
        text: Different electrical circuits can perform other simple calculations
          like subtraction or multiplication. In fact, all the information processing
          your computer does is just lots and lots of small simple operations put
          together. Each individual operation done by a computer is so, so simple
          it could be done by a human, but these circuits inside computers are way
          way faster.
      10:
        image: notes/csd_concept_circuits_logic_10.png
        text: Back in the day, these circuits were big and clunky, and an 8-bit adder
          could be as big as a fridge, and it would take minutes for them to perform
          a simple calculation. Today, computer circuits are microscopic in size,
          and way way faster. Why are smaller computers also faster? Well, because
          the smaller the circuit is, the less distance the electrical signal has
          to go. Electricity moves at just about the speed of light, which is why
          modern circuits can perform billions of calculations per second.
      11:
        image: notes/csd_concept_circuits_logic_11.png
        text: So whether you're playing a game, recording a video, or exploring the
          cosmos, everything you could possibly do with technology requires lots of
          information to be processed extremely quickly. Underneath all this complexity
          is just lots of teeny little circuits that turn binary signals into websites,
          videos, music, and games. These circuits can even help us decode DNA to
          diagnose and cure disease. So what would you like to do with all these circuits?
    csd_concept_memory_cpu_input_output:
      1:
        image: notes/csd_concept_memory_cpu_input_output_1.png
        text: Hi, my name is Madison Maxey. I have a company called Loomia, and we
          focus on making smart fabrics for smart clothing and smart soft good products.
          The sky's the limit when it comes to textiles.
      2:
        image: notes/csd_concept_memory_cpu_input_output_2.png
        text: My name is Danielle Applestone, and I'm CEO of Othermachine Company.
          We build a desktop milling machine. A milling machine takes a rotating cutting
          tool and moves it through material to create a 3D object.
      3:
        image: notes/csd_concept_memory_cpu_input_output_3.png
        text: Under the hood, all computers do the same four basic things. They input
          information, store and process the information, and then, output information.
          Each of these things is done by a different part of the computer.
      4:
        image: notes/csd_concept_memory_cpu_input_output_4.png
        text: There are input devices that take input from the outside world and convert
          it into binary information. There is memory to store this information. There's
          a central processing unit or CPU, where all the calculations are done. And,
          finally, there are output devices that take information and convert it into
          a physical output.
      5:
        image: notes/csd_concept_memory_cpu_input_output_5.png
        text: Let's talk about input first. Computers can take many different types
          of input, like the keyboard of a computer, the touchpad of a phone, a camera,
          a microphone, or a GPS. But even the sensors on a car, a thermostat, or
          a drone are also different input devices.
      6:
        image: notes/csd_concept_memory_cpu_input_output_6.png
        text: Now, let's look at a simple example of how input travels through a computer
          and becomes output. When you press a key on your keyboard - let's say the
          letter "B". The keyboard converts the letter to a number. That number is
          sent as binary, ones and zeros, into the computer.
      7:
        image: notes/csd_concept_memory_cpu_input_output_7.png
        text: Starting from this number, the CPU calculates how to display the letter
          "B" pixel by pixel. The CPU requests step-by-step instructions from memory,
          which tell it how to draw the letter "B". The CPU runs these instructions
          and stores the results as pixels in memory.
      8:
        image: notes/csd_concept_memory_cpu_input_output_8.png
        text: Finally, this pixel information is sent in binary to the screen. The
          screen is an output device, which converts the binary signals into the tiny
          lights and colors that make up what you see.
      9:
        image: notes/csd_concept_memory_cpu_input_output_9.png
        text: This all happens so quickly it feels instantaneous, but to display each
          letter a computer runs thousands of instructions, starting from the moment
          your finger presses the key point.
      10:
        image: notes/csd_concept_memory_cpu_input_output_10.png
        text: In that example, the output device was the screen, but there are many
          different types of output which take a binary signal from the computer and
          do something in the physical world. For example, a speaker will play sound,
          and a 3D printer will print an object. Output devices can also control physical
          motion like a robotic arm, the motor of a car, or the cutting tool of the
          milling machine that my company makes. New types of inputs and outputs let
          computers interact with the world in entirely new ways. This has been helped
          out by improvements to the speed and size of the memory and CPU.
      11:
        image: notes/csd_concept_memory_cpu_input_output_11.png
        text: The more complicated a task is and the more information that is input
          or output, the more processing power and memory a computer needs. Typing
          letters on a screen may be easy but to do complicated 3d graphics or record
          a high-definition movie, modern computers often have multiple CPUs to process
          all that information and many gigabytes of memory to store it.
      12:
        image: notes/csd_concept_memory_cpu_input_output_12.png
        text: 'No matter what it is you want to do with the computer, every single
          action is about: inputting information from the physical world, storing
          and processing that information, and getting some output back into the physical
          world.'
    csd_concept_hardware_software:
      1:
        image: notes/csd_concept_hardware_software_1.png
        text: Hi, my name is Erica Gomez and I'm an engineering manager at Amazon.com.
          One of the best things about working in tech, and at Amazon in particular,
          is that I get to bring my dog with me to work every day. My job is to help
          make sure software gets out the door and her job is to nap under my desk
          and snore very loudly.
      2:
        image: notes/csd_concept_hardware_software_2.png
        text: 'My name is Jerome Holman, and I''m a Program Manager on Team Xbox and
          I have a really fun job: Basically bringing the hardware and the software
          together to give you all the games that you love on your Xbox.'
      3:
        image: notes/csd_concept_hardware_software_3.png
        text: When you look inside a computing device you see a bunch of circuits,
          chips, wires, speakers, plugs, and all sorts of other stuff. This is the
          hardware.
      4:
        image: notes/csd_concept_hardware_software_4.png
        text: But what you don't see is the software. Software is all of the computer
          programs, or code, running on this machine. Software can be anything from
          apps and games to webpages and the data science software that me and my
          teams use at Amazon to understand how customers behave.
      5:
        image: notes/csd_concept_hardware_software_5.png
        text: But how do the hardware and the software interact with one another?
          Let's start at looking at a computer's central processing unit, or CPU.
      6:
        image: notes/csd_concept_hardware_software_6.png
        text: The CPU is the master chip that controls all the other parts of the
          computer. A CPU needs to do different things so inside it has smaller, simpler
          parts that handle specific tasks. It has circuits to do simple math and
          logic. It has other circuits to send and receive information to and from
          different parts of the computer.
      7:
        image: notes/csd_concept_hardware_software_7.png
        text: The real magic of the CPU is how it knows which circuits to use and
          when to use them. The CPU receives simple commands that tell it which circuit
          to use to do a specific job. For example, an "add" command tells the CPU
          to use its outer circuit to calculate a new number. And then the "store"
          command tells the CPU to use a different circuit to save that result into
          memory.
      8:
        image: notes/csd_concept_hardware_software_8.png
        text: Just like numbers, all of these simple commands can be represented in
          binary ones and zeros or on and off electrical signals. The binary commands
          are stored in memory and the CPU fetches and executes them in sequence one
          after the other. This sequence of commands is, in fact, a very simple computer
          program.
      9:
        image: notes/csd_concept_hardware_software_9.png
        text: Binary code is the most basic form of software and it controls all the
          hardware of a computer. These days, nobody writes software in binary. It
          would take forever!
      10:
        image: notes/csd_concept_hardware_software_10.png
        text: Today, the software we write looks more like this (Python), or this
          (Ruby), or even this (Blockly). Programming languages like these let you
          type in commands in something that looks a lot like English.
      11:
        image: notes/csd_concept_hardware_software_11.png
        text: To draw a rectangle on the screen, you just need a single command. This
          high-level command is converted into hundreds, or thousands, of simpler
          binary commands that the CPU understands. Software tells the CPU what to
          do, but when you're listening to music, and browsing the web, and chatting
          with a friend, your computer is running multiple pieces of software all
          at once.
      12:
        image: notes/csd_concept_hardware_software_12.png
        text: So, how do all of these programs get on the computer in the first place,
          and how can the CPU run them all at once? To find out we'll have to take
          a look at the operating system.
      13:
        image: notes/csd_concept_hardware_software_13.png
        text: The operating system of the computer is the master program that manages
          how software gets to use the hardware of the computer. For example, I helped
          create the Windows operating system that runs on most personal computers.
      14:
        image: notes/csd_concept_hardware_software_14.png
        text: The operating system is a program with special abilities that let it
          control the other software on the computer. It lets you install new programs
          by loading them into your computer's memory. It decides when a program is
          run by the central processing unit, and whether that program can access
          the computer's input and output devices. And when you think your computer
          is running many programs at once, in reality, it's the operating system
          that's quickly switching between programs sharing that CPU for fractions
          of a second.
      15:
        image: notes/csd_concept_hardware_software_15.png
        text: Inside every computer is an operating system managing software that
          controls the computer's hardware.
      16:
        image: notes/csd_concept_hardware_software_16.png
        text: The software is a series of commands made of simple binary code, and
          that binary code is just electrical signals flowing through billions of
          tiny circuits.
      17:
        image: notes/csd_concept_hardware_software_17.png
        text: Computers have the potential to do all kinds of amazing things. But
          the only thing that makes the computer smart, or useful, is you. When you
          learn to code you get to define the problem you want to solve, and write
          the software that turns those ideas into reality.
