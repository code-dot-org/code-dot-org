"co":
  data:
    markdown_instructions:
      pre-assessment survey q25A'_markdown_instruction: |
        If yes, what computer
        science course(s) had you taken before your current computer science  class?
        \r
      2-3 Artist 1 new_markdown_instruction: |
        Hi, I'm an artist. You can write code
        to make me draw almost anything. Use a few blocks to make me draw over the
        grey lines in the picture. (Each line is 100 pixels long)\r
        \r
      2-3 Artist 11_markdown_instruction: "Give the stop sign a border by making\nan
        octagon with 100 pixels sides. "
      2-3 Artist 12_markdown_instruction: "Create a circle to finish the eyeball!\n\\r\n\\r\nIf
        the artist turns 1 degree with each loop, how many times do you\nneed to repeat
        the code to draw a circle? "
      2-3 Artist 2 new_markdown_instruction: |-
        This house has a half-finished wall.
        Each side is 100, but the half-finished wall is only 50. Complete the wall.
      2-3 Artist 3.4_markdown_instruction: |-
        The jump block moves the artist without
        drawing. Draw the dashed line using both the `jump forward` and `move forward`
        blocks. Each line is 50 pixels long.
      2-3 Artist 3new_markdown_instruction: |-
        The red hat is 100 pixels tall. Finish
        drawing a black hat that is 70 pixels shorter. \r
        \r
        *(Note: The width of
        each hat is 50 pixels.)*
      2-3 Artist 4_markdown_instruction: Help me complete the house for this cat.
      2-3 Artist 6_markdown_instruction: |-
        This house needs a roof! Draw the triangle.  \r
        \r
        Hint:
        all three sides are the same length.\r
        \r
        <img src="https://images.code.org/8b10073fd1a7fe53b4da33ec2229894b-image-1468018903891.gif"
        width="300"/>
      2-3 Artist 7_markdown_instruction: "Finish drawing the last set of windows\non
        the school so that everyone in class can see outside. \\r\n\\r\nThe sides\nof
        each square window pane are 25 pixels long. "
      2-3 Artist 8_markdown_instruction: |-
        Time to build a barn!\r
        \r
        Make the rooms
        for each animal by splitting the barn into 2 equal-sized squares. \r
        \r
        Hint:
        The rectangle is 200 pixels wide and 100 pixels tall.\r
        \r
        There are many
        different ways to solve this puzzle.
      2-3 Artist 9 NEW_markdown_instruction: Finish this kite
      2-3 Artist 9 REPLACEMENT_markdown_instruction: Finish drawing these stairs!
      2-3 Artist 9_markdown_instruction: Finish this kite
      2-3 Artist Assessment 1_markdown_instruction: |-
        **Assessment:** Finish drawing
        the last tooth. It is 25 pixels wide and 25 pixels tall.
      2-3 Artist Debugging 1_markdown_instruction: |
        This hat should only be 50 pixels
        wide. \r
        Can you fix it?\r
        \r
        <br/>\r
      2-3 Artist Debugging 10_markdown_instruction: |-
        The direction pad on my game
        controller is too narrow. \r
        \r
        Can you make it wider by 10 pixels?\r
        \r
        Try
        running the code first to see what's wrong.
      2-3 Artist Debugging 11_markdown_instruction: |-
        My snowflake is falling apart!\r
        \r
        Can
        you figure out what's going wrong?
      2-3 Artist Debugging 2_markdown_instruction: |-
        This code for the cat's whiskers
        is wrong. \r
        \r
        Fix this code to draw whiskers that are all the same length.
      2-3 Artist Debugging 3_markdown_instruction: |-
        My boat has a hole! \r
        \r
        What
        do you need to fix to make the ends meet?
      2-3 Artist Debugging 5_markdown_instruction: |-
        The code that we have for the
        leg and foot is wrong. \r
        \r
        Can you fix it?
      2-3 Artist Debugging 6_markdown_instruction: |-
        Looks like I'm sitting on a
        chair that’s missing a leg!\r
        \r
        Edit the code to draw the last leg.
      2-3 Artist Debugging 7_markdown_instruction: |-
        Looks like the C in code is drawn
        backwards!\r
        \r
        Can you make it look like a C again?
      2-3 Artist Debugging 8_markdown_instruction: |-
        My teacher says that I should
        finish what I start!\r
        \r
        Help me finish my pinwheel. Can you figure out
        what's wrong?
      2-3 Artist Debugging 9_markdown_instruction: |-
        Something is off!\r
        \r
        The
        code for this stem is wrong. Can you figure out how to get the artist to trace
        the stem the right way?
      2-3 Artist Debugging Assessment 1_markdown_instruction: |-
        **Assessment:** \r
        Why
        does this square end up being 75 pixels too small on each side?  \r
        \r
        Where
        does the code go wrong?
      2-3 Artist Free Play_markdown_instruction: |-
        Free-play! Draw anything you'd
        like.
      2-3 Artist Functions 1 a_markdown_instruction: |
        "Me zombie artist. Me love
        drawing!" \r
        \r
        Help the zombie draw square glasses.  \r
        \r
        The bridge
        between the glasses is 25 pixels shorter than the width of the squares, which
        is 100 pixels.\r
        \r
      2-3 Artist Functions 1_markdown_instruction: |
        "Me zombie artist. Me love drawing!"
        \r
        \r
        Help the zombie draw square glasses.  \r
        \r
        The bridge between the
        glasses is 25 pixels shorter than the width of the squares, which is 100 pixels.\r
        \r
      2-3 Artist Functions 10_markdown_instruction: |-
        **Freeplay:** Here are two functions,
        one to draw a big gear and one to draw a small gear.  \r
        \r
        Use them to
        draw the inside of a machine!
      2-3 Artist Functions 11 a_markdown_instruction: |-
        We've renamed the `draw a
        square` function to `draw a hexagon`, but it's still giving us squares!  \r
        \r
        Can
        you modify the `draw a hexagon` function to draw a hexagon with 50 pixel sides?
        \r
        \r
        Draw the image using the new function!
      2-3 Artist Functions 11.5 a_markdown_instruction: |-
        Here's that same `draw
        a hexagon` function. \r
        \r
        What happens if you loop the main program **6**
        times, turning **60** degrees each time you loop?
      2-3 Artist Functions 11.5_markdown_instruction: |-
        Here's that same `draw a
        hexagon` function. \r
        \r
        What happens if you loop the main program 6 times,
        turning 60 degrees each time you loop?
      2-3 Artist Functions 11_markdown_instruction: |-
        We've renamed the `draw a square`
        function to `draw a hexagon`, but it's still giving us squares!  \r
        \r
        Can
        you modify the `draw a hexagon` function to draw a hexagon with 50 pixel sides?
        \r
        \r
        Draw the image using the new function!
      2-3 Artist Functions 12 Mike_markdown_instruction: |-
        Functions are really great
        for drawing complex things multiple times. \r
        \r
        Can you use the `draw a
        flower` function to fill the rest of the planter box?\r
        The plants are all
        100 pixels apart.
      2-3 Artist Functions 12 a_markdown_instruction: |-
        Functions are really great
        for drawing complex things multiple times. \r
        \r
        Can you use the `draw a
        flower` function to fill the rest of the planter box?\r
        The plants are all
        100 pixels apart.
      2-3 Artist Functions 12_markdown_instruction: |-
        Functions are really great for
        drawing complex things multiple times. \r
        \r
        Can you use the `draw a flower`
        function to fill the rest of the planter box?\r
        The plants are all 100 pixels
        apart.
      2-3 Artist Functions 2 a_markdown_instruction: |-
        Functions let you define new
        blocks! \r
        \r
        We've moved the blocks needed for drawing a square into a
        function called `draw a square`. This time, use the small green `draw a square`
        block to call this new function and create the glasses. \r
        \r
        The squares
        in this drawing are 75 pixels apart.
      2-3 Artist Functions 2_markdown_instruction: |-
        Functions let you define new
        blocks! \r
        \r
        We've moved the blocks needed for drawing a square into a
        function called `draw a square`. This time, use the `draw a square` function
        to create the glasses. \r
        \r
        The squares are 75 pixels apart.
      2-3 Artist Functions 3 a_markdown_instruction: |-
        Edit the "draw a square"
        function to draw glasses with frames that are 115px on each side. \r
        \r
        The
        squares are now 45 pixels apart.
      2-3 Artist Functions 3_markdown_instruction: |-
        Edit the function to draw a square
        with a side length of 115 to draw the bigger glasses. \r
        \r
        The squares
        are now 45 pixels apart.
      2-3 Artist Functions 4 a_markdown_instruction: |-
        Now, put the function inside
        of a loop and add an extra turn to draw these three squares.
      2-3 Artist Functions 4_markdown_instruction: |-
        Now, put the function inside
        of a loop to draw these three squares.
      2-3 Artist Functions 9_markdown_instruction: |-
        **Freeplay:** Here is a snowflake
        function. Experiment with it to create a winter scene! \r
        \r
        This is a free
        play level, so there is no puzzle to solve. Have fun!
      2-3 Artist Loops 1_markdown_instruction: |-
        Can you make a hexagon with sides
        that are 100 pixels long to finish the cell? Remember, that means that you
        will only need to turn 60 degrees!
      2-3 Artist Loops 2_markdown_instruction: |-
        Now use a repeat block to make the
        cell a shell.
      2-3 Artist Loops New 1_markdown_instruction: |
        Let's draw this robot's head!
        Can you make a square with sides that are 100 pixels?\r
        \r
        <br/>\r
      2-3 Artist Loops New 10_markdown_instruction: |-
        Now let's connect a bunch of
        V's together in a loop.
      2-3 Artist Loops New 11_markdown_instruction: |-
        Time to make something snazzy!
        \r
        \r
        Rebuild the code from the last puzzle, but this time, add a left turn
        of 30 degrees inside the loop. Now, repeat it 24 times instead of 8.
      2-3 Artist Loops New 12_markdown_instruction: "Draw a diamond with sides of\n100
        pixels. "
      2-3 Artist Loops New 13_markdown_instruction: |-
        We are going to start you with
        some code (in grey) to make one diamond. \r
        \r
        Loop the grey code to create
        a fun pattern!
      2-3 Artist Loops New 14_markdown_instruction: |-
        Play around with the code for
        the diamond and see what other patterns you can make. \r
        \r
        Try changing
        how many degrees you turn and how many times you loop.
      2-3 Artist Loops New 15_markdown_instruction: |
        Now, draw anything you like!\r
        <br/><br/>\r
        \r
      2-3 Artist Loops New 2_markdown_instruction: |-
        Here is the same puzzle that
        we just solved, but this time, we can only use one `move forward` block and
        one `turn` block this time.\r
        \r
        Can you use a `repeat` to solve this puzzle?
      2-3 Artist Loops New 9_markdown_instruction: |-
        Draw a simple V (where both sides
        are 50 pixels) to complete the arrow.
      2-3 Artist Nested Loops 1_markdown_instruction: |
        You've used loops to draw
        shapes before, but now we're going to put loops inside of other loops!\r
        \r
        Put
        a `repeat` block around this whole stack of code to draw the pattern.\r
        \r
        <br/>\r
        \r
      2-3 Artist Nested Loops 10_markdown_instruction: |-
        Loop this code 12 times to
        complete the pattern.
      2-3 Artist Nested Loops 11_markdown_instruction: |-
        Loop this code 4 times to
        complete the pattern, turn 90 degrees after each circle.
      2-3 Artist Nested Loops 12_markdown_instruction: |-
        Loop this code 12 times to
        complete the curls.
      2-3 Artist Nested Loops 2_markdown_instruction: |-
        Now loop the triangle 6 times.
        \r
        \r
        After each triangle, you'll need to turn 60 degrees before drawing
        the next.
      2-3 Artist Nested Loops 3_markdown_instruction: |-
        You'll need to loop your
        triangle 12 times to draw this pattern. \r
        \r
        Divide the number of degrees
        in a circle (360) by the number of shapes you're drawing (12) to figure out
        how far to turn after each shape.
      2-3 Artist Nested Loops 4_markdown_instruction: |-
        Loop this diamond 12 times
        to draw a flower!\r
        \r
        Note: We'll use the same angle to loop 12 diamonds
        as we did for 12 triangles.  \r
        How much do you need to turn after each shape?
      2-3 Artist Nested Loops 5_markdown_instruction: |-
        Fill in this building's windows
        using a nested loop. \r
        \r
        The windows are 20 pixels long and 20 pixels
        apart.
      2-3 Artist Nested Loops 6_markdown_instruction: |-
        This dinosaur has 8 spikes
        running up its tail.\r
        \r
        Each spike is 30 pixels long. \r
        \r
        Loop the
        triangle 8 times, but make sure to jump forward after each one!
      2-3 Artist Nested Loops 7_markdown_instruction: |-
        Loop this triangle 10 times
        to draw the sun. \r
        \r
        You'll need to move and turn after each triangle.
        \r
        \r
        You can figure out how much to turn by dividing the number of degrees
        in a circle by the number of triangles that make it up.
      2-3 Artist Nested Loops 8_markdown_instruction: |-
        Now let's add some grass
        to our picture. \r
        \r
        Each tuft of grass is 50 pixels apart.
      2-3 Artist Nested Loops 9_markdown_instruction: |-
        We'll finish this picture
        by adding our flower. \r
        \r
        Loop the diamond 12 times to draw the flower.
      2-3 Artist Nested Loops Free Play_markdown_instruction: |-
        Free play, draw something
        cool with nested loops.
      2-3 Bee Conditionals 11_markdown_instruction: "I wonder what's out there!\\r\n\\r\nHelp\nme
        fly around the yard and collect nectar only from the flowers that have\nsome. "
      2-3 Bee Conditionals 13_markdown_instruction: |-
        There's a lot happening here!\r
        \r
        Use
        what you've learned to collect all of the nectar and then make the honey.
      2-3 Bee Conditionals 14_markdown_instruction: |-
        Let's put everything together!\r
        \r
        Use
        what you've learned to help me collect nectar only from flowers that have
        it, using as few blocks as possible.  \r
        \r
        Don't forget to make honey
        at the end.
      2-3 Bee Conditionals 15_markdown_instruction: |-
        This stair step pattern should
        look familiar.  \r
        \r
        Can you collect nectar only from the flowers that
        have some, using as few blocks as possible?
      2-3 Bee Conditionals 2_markdown_instruction: |-
        I'm a hungry bee! \r
        \r
        \r
        Help
        me collect all of the nectar from the flowers using the fewest number of blocks.
      2-3 Bee Conditionals 3_markdown_instruction: "Look at all of that nectar!\\r\n\\r\nHelp\nme
        collect the nectar and make the honey using as few blocks as you can.  "
      2-3 Bee Conditionals 5_markdown_instruction: |-
        These magic purple flowers change!\r
        \r
        Each
        time you try the puzzle, purple flowers can have either 1 nectar or none at
        all...but you won't know the number until you run the code! \r
        \r
        Be careful
        not to collect nectar from a purple flower if it doesn't have any. \r
        You
        must first check if the nectar is equal to 1 using the `if nectar` block.
      2-3 Bee Conditionals Assessment 1_markdown_instruction: |-
        **Assessment:** Collect
        all of the nectar.  \r
        Be careful not to try to collect nectar from a purple
        flower if it doesn't have any.
      2-3 Bee Debugging 1_markdown_instruction: |-
        These blocks are really bugging
        me!\r
        \r
        Fix the error(s) to collect all of the nectar.
      2-3 Bee Debugging 10_markdown_instruction: |-
        This puzzle is making me loopy!
        \r
        \r
        Fix the error(s) to collect all of the nectar and make all of the
        honey.
      2-3 Bee Debugging 2_markdown_instruction: |-
        Can you find the problem here?\r
        \r
        Fix
        the error(s) to collect all of the nectar.
      2-3 Bee Debugging 3_markdown_instruction: |-
        Ooh, this one stings!\r
        \r
        Fix
        the error(s) to collect all of the nectar.
      2-3 Bee Debugging 5_markdown_instruction: |-
        That flower looks tasty! \r
        \r
        Fix
        the error(s) to collect all of the nectar.  \r
        You can now use both run and
        step.
      2-3 Bee Debugging 6_markdown_instruction: |-
        What a sweet challenge!\r
        \r
        Fix
        the error(s) to collect all of the nectar.
      2-3 Bee Debugging 9_markdown_instruction: |-
        "Bee" patient with this one!\r
        \r
        You
        will need to fix a couple of things in this program to collect all of the
        nectar and make all of the honey.
      2-3 Bee Debugging Assessment 1_markdown_instruction: |-
        **Assessment:**  Now
        it's time to show what you know!\r
        \r
        Fix the error(s) to collect all of
        the nectar and make all of the honey.
      2-3 Bee Functions 1_markdown_instruction: |-
        Functions are blocks of code that
        perform a task.  \r
        \r
        Use the `get 2 nectar` function to collect the nectar
        from each flower.
      2-3 Bee Functions 10_markdown_instruction: |-
        Purple flowers change between either
        1 or 0 nectar each time you run the puzzle.   \r
        \r
        Create a function that
        collects nectar only from purple flowers that have nectar.
      2-3 Bee Functions 2_markdown_instruction: |-
        Functions are blocks of code that
        perform a task.  \r
        \r
        Use the `get 5` function to get 5 nectars at a time.
      2-3 Bee Functions 4_markdown_instruction: |-
        The `move and get nectar` function
        turns the bee, collects nectar, and then returns the bee to where it started.  \r
        \r
        Use
        the function to collect all of the nectar.
      2-3 Bee Functions Assessment 1_markdown_instruction: |-
        **Assessment:** Use the
        given function to collect nectar from each flower.
      2-3 Bee Functions Assessment 2_markdown_instruction: |-
        **Assessment:** Create
        a function to turn, move forward and make 3 honey, then return the bee to
        where it started and turn back.
      2-3 Bee Loops 1_markdown_instruction: |-
        Those flowers look tasty!\r
        \r
        Collect
        nectar from each of the flowers using the fewest blocks possible.
      2-3 Bee Loops 13_markdown_instruction: |-
        **Assessment:** Collect all of the
        nectar using the fewest blocks possible.
      2-3 Bee Loops 3A_markdown_instruction: |-
        Use a `repeat` loop to collect all
        of the nectar.
      2-3 Bee Loops 3B_markdown_instruction: |-
        Now use the `repeat` block to collect
        all of the nectar and make all of the honey.
      2-3 Bee Loops 4_markdown_instruction: |-
        Such a busy bee!\r
        \r
        Help Bee collect
        all of the nectar and make all of the honey with the fewest blocks possible.
      2-3 Bee Loops 4A_markdown_instruction: |-
        How many times can loops help you in
        this puzzle?  \r
        \r
        Loops are your friend! Use a few of them to complete
        this puzzle with the fewest blocks possible.
      2-3 Bee Loops 5_markdown_instruction: |-
        The shape of this path is different
        from the others. \r
        \r
        Can you collect all of the nectar using as few blocks
        as possible?
      2-3 Bee Loops 7_markdown_instruction: |-
        What a beautiful field of flowers!   \r
        \r
        Help
        the bee visit each one.\r
        \r
        Can you find a way to do it with fewer than
        7 blocks?
      2-3 Bee Loops 8_markdown_instruction: |-
        These purple flowers have different
        amount of nectar each time you run the puzzle. \r
        \r
        Use the `while nectar`
        loop to collect all of the nectar. \r
        \r
        This loop will run as long as the
        condition is true, in this case `nectar > 0`.
      2-3 Bee Loops Assessment 1_markdown_instruction: |-
        **Assessment:** Use a `while`
        loop to collect all of the nectar from these flowers.
      2-3 Maze 1_markdown_instruction: |
        Can you help me catch the naughty pig? \r
        \r
        Stack
        a couple of `move forward` blocks below the `when run` block and press "Run".
      2-3 Maze 12 - One Move Block_markdown_instruction: |-
        Get the mean pig! But this
        time, you can only use one `move forward` block...\r
        \r
        Ah, look closely
        - do you see any other blocks that can help you get there?
      2-3 Maze 12_markdown_instruction: |-
        Suddenly, a magical block appears!  With
        the `repeat` block, you can loop code over and over.\r
        \r
        Can you get to
        the pig by creating a loop that uses only one `move forward` block inside
        of a `repeat`?
      2-3 Maze 13_markdown_instruction: |-
        Get me to the pig! You can only use one
        `move forward` block this time
      2-3 Maze 15_markdown_instruction: |-
        In this puzzle, two `repeat` loops will
        help you get to the pig with the fewest number of blocks!
      2-3 Maze Loops 18_markdown_instruction: |-
        Get me to the sunflower using the
        fewest blocks possible!  \r
        \r
        Try using one `repeat` loop inside of another
        to cut down on the amount of code you need.
      2-3 Maze Loops 19_markdown_instruction: |-
        Let's take this to another level!
        \r
        \r
        Use loops to get me to the sunflower with the fewest loops possible.
      2-3 Maze Loops Assessment 1_markdown_instruction: "**Assessment:**  Get me\nto
        the sunflower using only 5 blocks! "
      4-5 Artist 1_markdown_instruction: |
        Help me finish drawing my box. (Each line
        is 300 pixels long) \r
        \r
      4-5 Artist 10_markdown_instruction: |-
        Press "Run" to try the code. Then, repeat
        it enough times to complete the drawing. The colors will be different every
        time.
      4-5 Artist 11_markdown_instruction: |-
        Complete the green lines.  \r
        \r
        The
        lines are 300 pixels long and 15 pixels apart.
      4-5 Artist 2_markdown_instruction: |-
        Loop this code using the `repeat` block
        to complete the square.
      4-5 Artist 3.5_markdown_instruction: |-
        Try to figure out what happens if you
        run this code (or just press "Run" and try it). \r
        \r
        Next, repeat the
        code enough times to complete the drawing!
      4-5 Artist 3_markdown_instruction: |-
        This rectangular flower bed has a perimeter
        of 600.  \r
        The long side has a length of 200. \r
        \r
        Draw the rectangle
        using as few blocks as possible.
      4-5 Artist 4_markdown_instruction: |-
        How many degrees are in a circle?  \r
        \r
        Loop
        the blocks to create a circle of colors.
      4-5 Artist 5_markdown_instruction: |-
        What can we replace "???" with to make
        sure that the zombie completes this drawing using the loop provided?
      4-5 Artist 6_markdown_instruction: |-
        This equilateral triangle has angles of
        60, 60, and 60 degrees. Each side is 200 pixels. Complete the drawing.
      4-5 Artist 7_markdown_instruction: |-
        This right triangle has angles of 30, 60,
        and 90 degrees.  The slanted side's length (length of the hypotenuse) is
        200 pixels. \r
        \r
        Complete the drawing.
      4-5 Artist 8_markdown_instruction: |-
        The halfway line on a soccer field is *perpendicular*
        to the sidelines.   \r
        This rectangle has a perimeter of 800 pixels total,
        and it is 240 pixels long. How tall is it?   \r
        \r
        Draw the bounds and the
        halfway line.
      4-5 Artist 9_markdown_instruction: |-
        Draw the right half of this image so that
        the design is symmetrical. \r
        The triangles are equilateral and have sides
        that are 50 pixels long.
      4-5 Artist Assessment 1_markdown_instruction: |-
        **Assessment:** Use a loop to
        draw the equilateral triangle. Each side is 300 pixels.
      4-5 Artist Free Draw 1_markdown_instruction: |-
        Free Draw!  Draw whatever you
        are inspired to create.
      4-5 Artist Patterns 1_markdown_instruction: |-
        Draw this square using a loop.\r
        \r
        Each
        side is 20 pixels long.
      4-5 Artist Patterns 10_markdown_instruction: |-
        This code draws two rows of hexagons
        - loop the whole thing 4 times to draw the whole honeycomb. \r
        \r
        You'll
        need to jump back 120 pixels in your outermost loop to make sure the artist
        doesn't draw off the screen.
      4-5 Artist Patterns 11_markdown_instruction: |-
        How many times do you need to
        loop this to draw a half circle?
      4-5 Artist Patterns 12_markdown_instruction: |-
        If you create another loop like
        this one, but turn left instead of right, what happens? \r
        \r
        Can you repeat
        all of that to draw this wave?
      4-5 Artist Patterns 13_markdown_instruction: |-
        Now let's loop that whole thing
        four times to create this picture frame. Watch out for the corners - you can't
        just turn 90 degrees! \r
        \r
        If looping a 3 degree turn 60 times makes a
        half circle, which of these blocks of code will make an additional quarter
        circle for the corners?
      4-5 Artist Patterns 2_markdown_instruction: |-
        If you place your square loop
        inside another loop, we call that a nested loop. \r
        \r
        What do you need
        to add as an outer loop to make sure all 15 squares line up next to each other?
      4-5 Artist Patterns 3_markdown_instruction: |-
        Now let's go one level deeper!
        We've nested that whole block of code into another loop, but you need to
        get the artist back in place to draw the next line. Which of these code blocks
        can you place at the end of the outermost loop to draw the whole grid?
      4-5 Artist Patterns 4_markdown_instruction: |-
        This diamond has 50 pixel sides
        and angles of 120 and 60 degrees. \r
        \r
        Use a loop to draw it.
      4-5 Artist Patterns 5_markdown_instruction: |-
        Repeat this code to make a row
        of 6 diamonds. \r
        \r
        Notice that we changed our diamond code to repeat 3
        times instead of 2 - why do you think that is?
      4-5 Artist Patterns 6_markdown_instruction: |
        How many times do you need to
        repeat this block to draw the full grid of diamonds?\r
        \r
      4-5 Artist Patterns 7_markdown_instruction: |
        Let's modify the code from the
        last puzzle to make this more complex pattern. Notice how the diamonds overlap
        now, try changing the first "jump backwards" from 100 to 50 (half as far)
        - now how far should the artist go in the second "jump backwards"?\r
        \r
      4-5 Artist Patterns 8_markdown_instruction: |-
        Use a loop to draw this hexagon
        with 40 pixel sides and 60 degree angles.
      4-5 Artist Patterns 9.5_markdown_instruction: |-
        Let's loop this code to draw
        two rows of hexagons. \r
        \r
        Notice how our second row is shifted to the
        right.
      4-5 Artist Patterns 9_markdown_instruction: |-
        Now repeat this code 3 times and
        draw the whole row. \r
        \r
        Each hexagon is 80 pixels wide from the furthest
        points left to right.
      4-5 Artist Patterns Free Play_markdown_instruction: |-
        Free play - try your hand
        at making a pattern of your own!
      4-5 Bee Conditionals 1_markdown_instruction: |-
        This cloud is blocking my view!
        \r
        \r
        Check to see if there's a flower under the cloud, and only get nectar
        if there's a flower.   \r
        Be careful, it can change!
      4-5 Bee Conditionals 2_markdown_instruction: |-
        More clouds! \r
        \r
        Check underneath
        every cloud to see if it is hiding a flower before you get nectar.  \r
        \r
        Remember:
        Not all clouds hide the same thing!
      4-5 Bee Conditionals 4_markdown_instruction: |-
        Sometimes this cloud covers a
        flower, and sometimes it covers a honeycomb! \r
        \r
        Use the `if/else` block
        to collect nectar only if it is a flower.  \r
        Else, make honey (because it
        is a honeycomb).
      4-5 Bee Conditionals 5_markdown_instruction: |-
        There will be either a flower
        or a honeycomb under each of those clouds!\r
        \r
        Use the `if/else` block
        to collect nectar if there is a flower.\r
        Otherwise, make honey (because
        there is a honeycomb).
      4-5 Bee Conditionals 6_markdown_instruction: |-
        I am not sure how much nectar
        this flower has, but I know it has either 1, 2, or 3 nectar. \r
        \r
        Combine
        the conditional blocks (`if` and/or `if/else`) to only get as much nectar
        as the flower has. \r
        \r
        Remember, the amount of nectar can change each
        time you run the puzzle!
      4-5 Bee Conditionals 7_markdown_instruction: |-
        These flowers can have 3, 2,
        or 1 nectar. \r
        \r
        Complete the `check purple flower` function and use it
        to collect all of the nectar at the flowers.
      4-5 Bee Conditionals 8_markdown_instruction: |-
        Write the function for `check
        flower make honey`. \r
        \r
        Your function should check if the purple flower
        has 3, 2, or 1 nectar and get all of the nectar. \r
        Then, move forward and
        make honey.
      4-5 Bee Conditionals Assessment 1_markdown_instruction: |
        **Assessment:** This
        cloud is either hiding a flower with one nectar or a honeycomb that needs
        one honey.  \r
        \r
        Complete the `get nectar or make honey` function, then
        call it to collect the nectar or honey. \r
      4-5 Bee Debugging 1_markdown_instruction: |-
        These blocks are really bugging
        me. \r
        \r
        Can you fix them?
      4-5 Bee Debugging 6_markdown_instruction: |-
        The purple flower has a different
        amount of nectar each time you run the puzzle. \r
        \r
        Fix the blocks to get
        all of the nectar from the flower each time.
      4-5 Bee Debugging Assessment 1_markdown_instruction: |-
        **Assessment:** Fix the
        code.
      4-5 Bee Nested Loops 2_markdown_instruction: "Collect all of the nectar from\neach
        flower. \\r\n\\r\nUse a nested loop. "
      4-5 Bee Nested Loops 4_markdown_instruction: "Collect all of the nectar from\neach
        flower and make honey at the honeycomb. \\r\n\\r\nUse a nested loop. "
      4-5 Bee Nested Loops Assessment 1_markdown_instruction: |-
        **Assessment:** Collect
        all of the nectar and make all of the honey using loops.
      4-5 Maze 7_markdown_instruction: |-
        Get the zombie to the sunflower quickly!  \r
        \r
        Can
        you solve the puzzle in fewer than 11 blocks?
      4-5 Maze 9_markdown_instruction: |-
        Now we have a new block called `repeat until`.  \r
        This
        will let us keep looping commands until the zombie gets the sunflower.  \r
        \r
        Use
        the new `repeat until` block to solve this puzzle in as few commands as possible.
      4-5 Maze Assessment 1_markdown_instruction: |-
        **Assessment:** Get to the sunflower
        using as few blocks as possible.
      4-5 Maze Conditionals 1_markdown_instruction: |-
        Use the `repeat until` block
        to get the zombie to the sunflower.
      4-5 Maze Conditionals 10_markdown_instruction: |-
        Can you add just 3 blocks to
        help the zombie solve a more complex maze? \r
        \r
        If you do it right, he
        can walk any curvy path no matter the length!
      4-5 Maze Conditionals 2_markdown_instruction: |-
        Use the `repeat until` block
        to get the zombie to the sunflower.
      4-5 Maze Conditionals 3_markdown_instruction: |
        Use the `if` block to help me
        decide when to turn. \r
      4-5 Maze Conditionals 4_markdown_instruction: |-
        Ok, solve this one just like
        the last puzzle, but you need to remember how you used the `if` and `repeat
        until` blocks together.
      4-5 Maze Conditionals 5_markdown_instruction: |-
        "Me want sunflower!"  \r
        \r
        Use
        an `if` statement to get the zombie to the sunflower with the fewest number
        of blocks.
      4-5 Maze Conditionals 6_markdown_instruction: |-
        "Eat sunflower!"\r
        \r
        Use
        an `if` statement to get the zombie to the sunflower with the fewest number
        of blocks.
      4-5 Maze Conditionals 7_markdown_instruction: |-
        The solution to this puzzle
        isn't very different, but watch out for the chompers!
      4-5 Maze Conditionals 8_markdown_instruction: |-
        The `if/else` block checks a
        condition, and then does one thing OR another. \r
        \r
        Use this new block
        to get me to the sunflower.
      4-5 Maze Conditionals 9_markdown_instruction: |-
        One more practice puzzle with
        the `if/else` block!\r
        \r
        Trace it with your finger to see if you can figure
        it out on your first try.
      4-5 Maze Conditionals Assessment 1_markdown_instruction: |-
        **Assessment:** Use
        a `repeat until` and an `if/else` block to get me to the sunflower in as few
        blocks as possible.
      4-5 Nested Loops 1_markdown_instruction: |
        Complete the code to draw these triangles.  The
        first one is done for you.  Hint:  3 triangles in a 360 degree rotation.\r
        \r
      4-5 Nested Loops 11_markdown_instruction: |-
        Can you draw these 10 squares of
        this sidewalk using a nested loop? \r
        \r
        Each square is 30 pixels.
      4-5 Nested Loops 12_markdown_instruction: |-
        Can you draw these 36 triangles
        using a nested loop?
      4-5 Nested Loops 2_markdown_instruction: "Now nest this loop inside another\nloop
        to draw 10 triangles.  \\r\nThis is called a \"nested\" loop.  "
      4-5 Nested Loops 3_markdown_instruction: |-
        Create a sun by nesting the starter
        code in another loop.\r
        \r
        To get this cool design with a hollow center,
        you'll need to jump forward by the length of the triangle before turning.
      4-5 Nested Loops 5_markdown_instruction: Loop the given code to create a windmill.
      4-5 Nested Loops 6_markdown_instruction: |-
        Can you draw a hexagon by looping
        the triangle code?
      4-5 Nested Loops 7_markdown_instruction: |-
        Loop this design 10 times. \r
        \r
        How
        much do you have to turn each time you loop?
      4-5 Nested Loops 8_markdown_instruction: "Loop this shape 6 times. \\r\n\\r\nHow\nmuch
        do you have to turn each time you loop? "
      4-5 Nested Loops 9_markdown_instruction: |-
        Draw the teeth in the alligator's
        mouth!
      4-5 Nested Loops Assessment 1_markdown_instruction: |-
        **Assessment:** Use a
        nested loop to complete the design.
      4-5 While Loops 1_markdown_instruction: |-
        Move me to the hole and fill it with
        two shovelfuls of dirt, using the `fill` block.
      4-5 While Loops 2_markdown_instruction: |-
        Move me to the pile of dirt and remove
        it with 5 shovel scoops, using the `remove 1` block.
      4-5 While Loops 3_markdown_instruction: |-
        Use as few blocks as possible to complete
        this puzzle!  \r
        \r
        Move me to the pile and remove all the dirt, then move
        to the hole and fill it completely.
      4-5 While Loops 4_markdown_instruction: "Wow, look at that! \\r\n\\r\nI don't\nknow
        how many shovelfuls of dirt this hole needs.  \\r\nCan you write a program\nthat
        keeps using the `fill` block until the ground is even?  "
      AWS applab_markdown_instruction: |-
        # Do this stuff now\r
        \r
        * step one\r
        *
        step two
      AWS link_markdown_instruction: "# Use this tool for stuff"
      AlgPD DR Free Play_markdown_instruction: |-
        Using a word problem from your existing
        curriculum or elswhere, complete the Design Recipe and program a function.
        Use a Design Recipe form from your workbook or download a copy [here]('https://code.org/curriculum/algebra/docs/worksheets/design_recipe.pdf').
      Alien Defender_markdown_instruction: |-
        **Project Idea**: Make a defender game
        in Play Lab!
      Alien Defender_2018_markdown_instruction: |-
        **Project Idea**: Make a defender
        game in Play Lab!
      AllTheThings Applab - Turtle move with button_markdown_instruction: |-
        # Please
        sign in to test applab levels (By design, applab levels only work if signed
        in. Normally, we make people sign in, but this is only enforceable for a whole
        script and would be annoying to do for the allthethings script).\r
         # Your
        First Interactive App!\r
        <img src='https://images.code.org/3fad83213ae72073251c4d5abc1f048a-image-1444060521578.png'
        style='float: right; width: 250px'> A new group of commands has been added
        to the toolbox called **UI Controls** (User Interface Controls) which are
        commands that let you interact with, and respond to, the user of your app.
        To keep it simple, we'll start with just two commands: \r
        * `onEvent` which
        let's you run a function in response to some event occuring (such as a button
        click)\r
        * `button` which puts a button on the screen\r
        \r
        # Do This\r
        You
        will replicate the small app, shown below, which makes the turtle move with
        a button click. You will do three things:\r
        * Add a `button`\r
        * Add an
        `onEvent` block\r
        * Add `moveForward` inside the the onEvent function block\r
        \r
        Here's
        what you should do - you can come back to watch this as many times as you
        need to get it right.\r
        <img src="https://images.code.org/1cdc8cfbcef2a43f84b11ebdf14aed0c-image-1444061731350.gif"
        style="border: solid 1px black; width: 500px; margin: auto">
      'AllTheThings: Pixelation - Lesson 14 - Make the Letter A_markdown_instruction': "<img\nalign=\"right\"
        src=\"https://code.org/images/cspunit1/letterA.png\" width=\"150\"\nhspace=\"20\">\\r\n
        \           # Task 1: Make a 3x5 letter 'A'\\r\n            Start\nby trying
        to recreate the 3x5 letter \"A\" depicted (at right) using the pixelation\nwidget.
        \\r\n          \\r\n            The image is intially setup with the\n*incorrect*
        dimensions. Your first task is to set the second byte to the 8-bit\nbinary
        code for 5: 0000 0101. Then you can start entering pixel data to make\nthe
        A.\\r\n            "
      'AllTheThings: Pixelation - Lesson 15 - Color Shades 4x4_markdown_instruction': |
        #
        Pixelation: Task 3\r
        <img src = "https://code.org/images/cspunit1/ColorTask3.png"
        align=right width=200 hspace=20>\r
        **Directions:**\r
        We start you out with
        the 4x4 image Maddie created in the video.\r
        \r
        Your task is to fill a 4x4
        grid with colors using *12-bits per pixel*. The result should look something
        like (but not exactly) the image shown at right.  \r
        \r
        Here are the requirements:\r
        \r

        * Row 1 - fill with shades of red. \r
         * Row 2 - shades of green. \r
         *
        Row 3 - shades of blue. \r
         * Row 4 - shades of gray.\r
      'AllTheThings: Pixelation - Lesson 15 - Complete 3-bit color_markdown_instruction': "#\nColor
        Pixelation: Task 1\n**Directions:**\n\n* We start you with the 4x2 image\nMaddie
        was creating, but we've left out the last two squares. \n* Finish\noff the
        image by figuring out which two colors are missing and encode them.\n"
      App Lab test_markdown_instruction: |-
        <a href="https://docs.google.com/document/d/1HgSfQeUI1zxo-3bL-9jhff0jI2um2A-3vwpvy3JAD38"
        target="_blank">Innovation Project</a>
      AppLab Intro 1 - Add Button_markdown_instruction: |-
        # Getting Started - Add
        a button\r
        \r
        You'll need a button on your home screen to go to your new
        screen. You can make a new button in two ways. \r
        \r
        1. If you like the
        style of the "Dogs" button you can make a copy of it. Click the button and
        then click "Duplicate".\r
        \r
        \t![](https://images.code.org/171aa97d90014f66f999ecf929b672c0-image-1504289310310.08.10
        AM.png)\r
        \r
        2. You can also make a new button from scratch by dragging
        it in from the Design Toolbox.\r
        \r
        \t![](https://images.code.org/501c9ddd3e5b737df5b9cf053ae198a7-image-1504289359851.09.09
        AM.png)\r
        \r
        3. Click and drag to move your new button where you want it.\r
        \r
        3.
        Once you have a new button give it a clear name, "catButton". You can also
        change its text to read "Cats!".\r
        \r
        \t![](https://images.code.org/87586b18b001fae0001d2243f6d09889-image-1504289448320.10.14
        AM.png)\r
            \r
        4. There's lots of other ways you can change the look
        of your button. Experiment with the full menu of options.\r
        \r
        5. Once you're
        done run your app to make sure your button appears. Then click "Finish"
        to move on to learn how to make your button actually work.
      AppLab Intro 1 - Add Event_markdown_instruction: |-
        # Getting Started - onEvent\r
        \r
        You're
        back in "Code Mode". You'll notice there's already a bit of code in this
        app. This `onEvent()` block runs some code when the `dogButton` is clicked.
        You're going to need a second `onEvent()` block to make your button work.
        There's two ways to do this.\r
        \r
        1. From Code Mode you can drag in the
        block \r
        \r
        \t![](https://images.code.org/c1ca564880152242c3bf92b2b9ad4fca-image-1504290427563.26.56
        AM.png)\r
            \r
        2. From Design Mode your button has an "Events" tab.
        Click 'Insert and show code' to add the code.\r
        \r
        \t![](https://images.code.org/90d6c0cb723ee4317244f99dcfbd3a66-image-1504290568475.29.18
        AM.png)\r
            \r
        3. Use the drop down to make sure you're making the event
        respond to the "catButton".\r
        \r
        \t![](https://images.code.org/ebef61f18259a2fb0d8addb90d9d8ba4-image-1504290674099.31.03
        AM.png)\r
            \r
        4. The `setScreen()` block changes the screen. Drag this
        block inside your `onEvent()` block and choose your `catScreen` from the list.\r
        \r
        \t![](https://images.code.org/00433d32665ec6f2aa6a0caac2626568-image-1504290788639.33.02
        AM.png)\r
            \r
        5. Run your app. If everything worked correctly your cat
        button should now take you to your cat screen when you click it. When you're
        ready move on to learn how to add sounds to your app!
      AppLab Intro 1 - Add Screen_markdown_instruction: |-
        # Getting Started - Add
        a cats screen\r
        \r
        1. You're going to make a cats screen. This is "Design
        Mode" where you can add and edit screens. To add a screen click the screen
        dropdown and select "New screen".\r
        \r
        \t![expandable](https://images.code.org/4e90c1d897ede63403a1351f5ec3bfae-image-1504288061907.47.33
        AM.png) \r
        \r
        2. Then name your new screen "catScreen". \r
        \r
        \t![expandable](https://images.code.org/966a2563aaf8a59a983fe6417d01dae9-image-1504288205242.49.33
        AM.png)\r
            \r
        3. Finally, choose the cats background image of your screen\r
        \r
        \t![expandable](https://images.code.org/ff8509146b8a249973498af63f41b08d-image-1504288758611.51.40
        AM.png)\r
            \r
        Once you have added your new screen hit "Finish" to learn
        how to add buttons to navigate to the screen.
      AppLab Intro 1 - Add Sound_markdown_instruction: |-
        # Getting Started - Add Sound\r
        \r
        App
        Lab can play sound too. You'll need to use the `playSound()` block to do
        it.\r
        \r
        1. Drag a `playSound()` block into your `onEvent`. This will make
        the sound play when your user clicks the button. Then click "Choose..."
        from the menu.\r
        \r
        \t![](https://images.code.org/9c84293859317f7ae46391a28c5a51e7-image-1504291688560.47.41
        AM.png)\r
        \r
        2. Go through the "Sound Library" and find the sounds you
        want. There's tons!\r
        \r
        \t![](https://images.code.org/5393762b4f31fa4f09040ca8b09ca91c-image-1504291692587.47.52
        AM.png)\r
        \r
        3. Run your app to check out how your sounds work.
      AppLab Intro 1 - Build Your Adventure_markdown_instruction: |-
        # Build Your Adventure\r
        \r
        Use
        this blank project to build your project. To get you started there's already
        a home screen with a couple of buttons. If you want you can **quickly make
        copies of screens** to build out your world. What will you create?!\r
        \r
        When
        you're done you can "Share" your work with a friend by phone or with a
        link. Create your own account to keep building in App Lab!
      AppLab Intro 1 - Template_markdown_instruction: |-
        # Getting Started - Try this
        app\r
        \r
        Before you build your own Choose Your Own Adventure app, practice
        using AppLab by building this one about a visit to a pet shop. To get started,
        click "Run" and then navigate to the "Dogs" screen. Once you've made
        it there click "Finish" to move on.
      AppLab Intro 1 - Try App_markdown_instruction: |-
        # Getting Started - Try this
        app\r
        \r
        Before you build your own Choose Your Own Adventure app, practice
        using AppLab by building this one about a visit to a pet shop. To get started,
        click "Run" and then navigate to the "Dogs" screen. Once you've made
        it there click "Finish" to move on.
      AppLab Intro 2 - Edit place1 2_markdown_instruction: |-
        Think about how you want
        your adventure to continue on this screen. Then add some text to tell your
        story!\r
        \r
        1. Use the screen selector to choose the screen you just made
        ([Show me where](#triggercallout=selector))\r
        2. Drag a new "text area"
        onto your screen to add it. ([Show me where](#triggercallout=textArea))\r
        3.
        Drag the bottom right corner of your text area to change its size.\r
        4. Change
        the text to tell your user what happens on this screen. Then change the color
        of your text if you want!\r
        \r
        Click "Run" and then "Finish" to move
        on.\r
        \r
        ![expandable](https://images.code.org/8ba0d4f0eccaf83163e86d10eec3a291-image-1505766539456.gif)
        Click to see a GIF of these steps
      AppLab Intro 2 - Edit place1_markdown_instruction: |-
        On the last screen you
        gave your character a choice between to actions or places. Pick one of them
        and start making a screen for it!\r
        \r
        1. In the screen selector choose
        "New screen..." ([Show me where](#triggercallout=selector))\r
        2. Change
        the "id" of the screen to something clear, for example the name of the new
        location ([Show me where](#triggercallout=idChange))\r
        3. You can switch
        back and forth between your two screens from the screen selector. ([Show me
        where](#triggercallout=selector))\r
        4. You can select the "background-color"
        of your screen if you like.\r
        \r
        Click "Run" and then "Finish" to move
        on and start adding to your screen.
      AppLab Intro 2 - Edit startScreen_markdown_instruction: |-
        Welcome to App Lab!
        Right now you're in **Design Mode** where you can personalize the look of
        your app. Get your adventure started by picking a fun title!\r
        \r
        1. Click
        the title of your app. ([Show me where](#triggercallout=titleCallout))\r
        2.
        Change the "text" to pick whatever name you like! ([Show me where](#triggercallout=designMenu))\r
        3.
        Scroll down the menu to change the color of your title ([Show me where](#triggercallout=changeTextColor))\r
        \r
        Once
        you like the look of your title hit "Run" once to make sure it's looking
        good. Then hit "Finish" to move on!\r
        \r
        ![expandable](https://images.code.org/47c8fc2986226beaa39e382bc0759797-image-1505765264098.com-gif-maker.gif)
        Click here to see all three steps in a GIF
      AppLab Intro 2 - Edit startScreen2_markdown_instruction: |-
        Nice work! Time to
        start filling in your story.\r
        \r
        1. Click the story text on this screen.
        ([Show me where](#triggercallout=storyText))\r
        2. Fill in your story ([Show
        me where](#triggercallout=editStoryText))\r
        3. Explore the different properties
        you can change in the menu. Personalize this screen's look! ([Show me where](#triggercallout=changeTextColor))\r
        \r
        Hit
        "Run" once to make everything looks good. Then hit "Finish" to move on!
      AppLab Intro 2 - Template_markdown_instruction: |-
        # Getting Started - Try this
        app\r
        \r
        Before you build your own Choose Your Own Adventure app, practice
        using AppLab by building this one about a visit to a pet shop. To get started,
        click "Run" and then navigate to the "Dogs" screen. Once you've made
        it there click "Finish" to move on.
      AppLab Intro 2 - Try App_markdown_instruction: |-
        <img src="https://images.code.org/1f43ffc6a6da4c3a7644802cdbbff58b-image-1504737782528.jpg",
        style="float:right;width:200px">\r
        \r
        # Getting Started - Try this app\r
        \r
        You're
        going to build a "Choose Your Own Adventure" app by extending this project.
        To get you started you already have the parts of your project outlined in
        blue. Hit "Run" and click through what's already been created for you.
        \r
        \r
        Once you see how the project already works hit "Finish" to start
        making it yours.
      AppLab Intro 2 - Try Cat Commander_markdown_instruction: |-
        This is what the
        code for Cat Commander looks like. Take one minute to scroll through the code
        and see if you can understand how it works. Talk about it with a partner.
        What patterns do you see? \r
        \r
        Once you're done, move on by clicking "Run"
        then "Finish", to learn to build your own adventure.
      AppLab Intro 2 - add Button_markdown_instruction: |-
        Now you have two screens,
        but no way to get between them. Time to start adding buttons!\r
        \r
        1. Use
        the screen selector to go back to your "startScreen" ([Show me where](#triggercallout=selector))\r
        2.
        Drag a button onto the screen ([Show me where](#triggercallout=dragButton))\r
        3.
        Give your button a clear "id" that describes what it does ([Show me where](#triggercallout=changeButtonID))\r
        4.
        Change the "text" of your button to describe where it will take the user.\r
        5.
        Personalize your button's other properties like "text color" or "background
        color".\r
        \r
        Click "Run" then "Finish" to move on and start writing
        the code that will make your button work\r
        \r
        ![expandable](https://images.code.org/43f2678e4748a1fa09556f75cad65e97-image-1505766882756.gif)
        Click to see a GIF of all steps
      AppLab Intro 2 - add images_markdown_instruction: |-
        You now know everything
        you need to make a simple Choose Your Own Adventure app, but you can add so
        much more! If you want to add images to your screen it's easy!\r
        \r
        1.
        In another tab in your browser go online and find an image you want to use\r
        2.
        Right click the image and save its URL (usually "Copy link address" or "Copy
        image URL")\r
        3. Back in App Lab go to Design Mode\r
        4. Drag an "image"
        element onto your screen\r
        5. Paste the URL you copied into the "image"
        property\r
        \r
        "Run" your app once to test it. Then hit "Finish" to move
        to learn to add sounds.\r
        \r
        ![expandable](https://images.code.org/5b977b1c127b3fcb1761aadcb74c79e8-image-1505772215256.gif)
        Click to see GIF of all steps
      AppLab Intro 2 - add more buttons 2_markdown_instruction: |-
        Time to add a second
        button and write the code to make it work.\r
        \r
        1. Drag a second button
        onto your "startScreen" and give it a clear "id"\r
        2. Change the text
        and color of your button\r
        3. In Code Mode drag in a second `onEvent()` block
        and drag a `setScreen()` inside of it\r
        4. Set the "id"s of your `onEvent()`
        and `setScreen()` blocks to the button and screens you added\r
        \r
        If everything
        worked you should now have a second button that changes the screen. "Run"
        your app and hit "Finish" if it worked.\r
        \r
        ![expandable](https://images.code.org/33d1a6d2dcc81ed8ecd0966d2f0682ca-image-1505770427380.gif)
        Click to see a GIF of all steps
      AppLab Intro 2 - add more buttons_markdown_instruction: |-
        If this is going to
        be a real Choose Your Own Adventure, you're need to add some more choices!
        Start by adding a screen for the second choice your player could make.\r
        \r
        1.
        Use the screen selector to add a new screen. Give it a clear "id".\r
        2.
        Set the "background color" of your screen\r
        3. Add a "Text Area" to your
        screen describing what happens on it.\r
        \r
        Click "Run" then "Finish"
        to move on. You'll add another button and write the code to make it work.\r
        \r
        ![expandable](https://images.code.org/f1c83578a245d832c94c78aeba6ef317-image-1505768404048.gif)
        Click to see a GIF of all steps
      AppLab Intro 2 - add onEvent_markdown_instruction: |-
        <img src="https://images.code.org/89a0cddfc305cb44a3d888c5de864d2e-image-1505423852271.17.02
        PM.png" style="float:right;height:120px">\r
        \r
        This is Code Mode where
        you write the code of your app. You're going to add code that looks like
        this picture.\r
        \r
        1. Click and drag an "onEvent" block into your workspace
        ([Show me where](#triggercallout=onEvent))\r
        2. Use the left dropdown to
        pick your button's ID\r
        3. Click and drag a "setScreen" block inside the
        "onEvent" block ([Show me where](#triggercallout=setScreen))\r
        4. Use the
        dropdown to pick your new screen's ID\r
        \r
        Your app now switches screens!
        Try it out yourself by hitting "Run". Then "Finish" to move on.\r
        \r
        ![expandable](https://images.code.org/b9970c3478dfb15e7531034d26fbcc40-image-1505767231404.gif)
        Click to see all steps in a GIF
      AppLab Intro 2 - add sound_markdown_instruction: |-
        <img src="https://images.code.org/3c1d6506a6a3c350380b921e08588a2b-image-1505429594117.52.37
        PM.png" style="float:right;height:100px">\r
        \r
        You can add sound to your
        app too! Add them outside an `onEvent()` to play from the start of the adventure
        (good for background music) or inside an `onEvent()` to play when that button
        is clicked (good for "Win" / "Lose" sounds).\r
        \r
        1. Drag a `playSound()`
        block into your program\r
        2. Click the dropdown, then "Choose...", then
        "Sound Library" to find the library of sounds built into App Lab\r
        3. Try
        out the "Background" category for longer songs that will play for your entire
        adventure.\r
        4. Hit "Choose" to select the sound you like.\r
        5. You can
        also drag code inside an `onEvent` block to play sound only when an event
        happens. Shorter sounds work better here.\r
        \r
        Run your app. There should
        be sound playing now too!
      AppLab Intro 2 - finish and share_markdown_instruction: |-
        Congrats on finishing
        your Hour of Code! You can share your work with friends! Click "Share" to
        get a link or even text it to them.\r
        \r
        You can keep working on your project
        here. Whenever your friends go to the link you shared they'll get the latest
        version you made. How far will you build your adventure?
      AppLab Intro 3 - Change Screen Color_markdown_instruction: |
        Set the screen's
        `"background-color"` to `"red"`. Click the picture to see how. \r
        \r
        ![expandable](https://images.code.org/8b1d99aa6bd6274e05b1844fab7e8b2a-image-1505870100643.gif)
      AppLab Intro 3 - Change Text 2_markdown_instruction: |-
        Give `"label1"` a `"font-size:`
        of 40 and set its `"text-color"` to `"blue"`. Don't forget the double
        quote `"` for colors. Click the picture to see how.\r
        \r
        ![expandable](https://images.code.org/70f1ef9698ff41c15f9825755fde3782-image-1505958989565.gif)</details>
      AppLab Intro 3 - Change Text_markdown_instruction: |-
        Make the `"font-size"`
        of `"label1"` even bigger. Click the picture to see how.\r
        \r
        ![expandable](https://images.code.org/6125888ad13353978132b19dfca8cc49-image-1505953367275.gif)
      AppLab Intro 3 - Change Two Buttons_markdown_instruction: |-
        Make the `"background-color"`
        of the left button `"red"` and the right one `"blue"`. Hover over a button
        with your mouse to read its `"id"`. Click the picture to see how.\r
        \r
        ![expandable](https://images.code.org/d6418be215384e89872a72c2bd6d4a8a-image-1505875864576.gif)
      AppLab Intro 3 - Full Text_markdown_instruction: |-
        Set the `"text"` of this
        label to anything you want (for example `"Hi there!"`). Make sure you include
        the double-quotes `"`. Click the picture to see how.\r
        \r
        ![expandable](https://images.code.org/4e8549acbca3449cb336fe0ed495f8f3-image-1505878779849.gif)
      AppLab Intro 3 - onEvent before_markdown_instruction: |-
        Set the screen's `"background-color"`
        to `"orange"`. Then add code inside the `onEvent()` so the button will set
        the screen's `"background-color"` to `"pink"`. Click the picture to see
        how.\r
        \r
        ![expandable](https://images.code.org/6c338185d7fe959daed2465c4f91fb55-image-1505888600472.gif)
      AppLab Intro 3 - onEvent intro_markdown_instruction: |-
        Blocks placed inside
        the new `onEvent()` block will only run when you `"click"` the `"bigButton"`.
        Add code so the button will make the screen's `"background-color"` turn
        `"green"`. Remember to use double-quotes `"` for colors. Click the picture
        to see how.\r
        \r
        ![expandable](https://images.code.org/bbb452fdee5c546894a4f2025024ace3-image-1505882181893.gif)
      AppLab Intro 3 - onEvent mouseInOut_markdown_instruction: |-
        Your program can
        use multiple `onEvent()` blocks. The left button already sets both buttons'
        `"background-color"` to `"purple"`. Add code to make the right button
        set both buttons' `"background-color"` to `"green"`. Click the picture
        to see how.\r
        \r
        ![expandable](https://images.code.org/5cd0c24b0f7f855daa2225a4b6a08087-image-1505932139152.gif)
      AppLab Intro 3 - onEvent mouseOut_markdown_instruction: |-
        The `"mouseout"`
        event fires when your mouse moves out of a button. Write code that will set
        the screen's `"background-color"` back to `"black"` and set the button's
        `"text"` to `"Off!"` when the mouse moves out of the button. Remember
        to use double quotes `"`. Click the picture to see how.\r
        \r
        ![expandable](https://images.code.org/a3403900844f631cc2579539c8d68ed1-image-1505937421979.gif)
      AppLab Intro 3 - onEvent mouseOver_markdown_instruction: |-
        `"click"` is just
        one type of event. `"mouseover"` events run when your mouse is over a button,
        even if you don't click it. Add code to set the `"background-color"` of
        the screen to `"black"` when the mouse is over the `"offButton"`. Click
        the picture to see how.\r
        \r
        ![expandable](https://images.code.org/756e2c5ee19fd94963ca364fd46bcbd8-image-1505935772425.gif)
      AppLab Intro 3 - onEvent twoButtons_markdown_instruction: |-
        Your program can
        use multiple `onEvent()` blocks. The left button already sets both buttons'
        `"background-color"` to `"purple"`. Add code to make the right button
        set both buttons' `"background-color"` to `"green"`. Click the picture
        to see how.\r
        \r
        ![expandable](https://images.code.org/5cd0c24b0f7f855daa2225a4b6a08087-image-1505932139152.gif)
      AppLab Intro 3 - playSound_markdown_instruction: |-
        The `"playSound()"` block
        plays sounds. The `"horseButton"` already plays a horse sound. Add code
        to make the `"duckButton"` play a duck sound. Click the picture to see how.\r
        \r
        ![expandable](https://images.code.org/30e35a2c35ac309545d90af9330ba76d-image-1505939876315.gif)
      AppLab Intro 3 - share and keep going_markdown_instruction: |-
        Make a This or
        That app. Decide what happens to the screen and text when the user clicks
        each button.\r
        \r
        When you're done with your app click "Share" at the
        top to send it to a friend to play! Click the picture to see how to share.\r
        \r
        ![expandable](https://images.code.org/c1d23a0288a42d48963053e0d9a1002e-image-1505943063546.gif)
      AppLab Intro 3 - stopSound_markdown_instruction: |-
        The `stopSound()` block stops
        all sounds. The `"playButton"` plays a very long sound. Add code to make
        the `"stopButton"` stop all sounds. Click the picture to see how.\r
        \r
        ![expandable](https://images.code.org/a5081cce1969c5a784b4440369706801-image-1505941723405.gif)
      AppLab Intro 3 - thisOrThat_markdown_instruction: |-
        Make a This or That app.
        Decide what happens to the screen and text when the user clicks each button.\r
        \r
        When
        you're done with your app click "Share" at the top to send it to a friend
        to play! Click the picture to see how to share.\r
        \r
        ![expandable](https://images.code.org/c1d23a0288a42d48963053e0d9a1002e-image-1505943063546.gif)
      AppLab Intro 4 - Change Screen Color_markdown_instruction: |-
        <div style="float:right">\r
        \t<img
        src="https://images.code.org/1c2a02a2caebbda2be4e537ab5087dcd-image-1506613875548.50.54
        AM.png" style="height:150px"> \r
        </div>\r
        \r
        **Goal:** Make the screen
        `"red"`. \r
        \r
        **How:** Drag in the block and hit "Run".\r
        \r
        **Show
        Me:** ![expandable](https://images.code.org/8b1d99aa6bd6274e05b1844fab7e8b2a-image-1505870100643.gif)
      AppLab Intro 4 - Change Text 2_markdown_instruction: |-
        <div style="float:right">\r
        <img
        src="https://images.code.org/39ead723fbd2b047aa2d1e401cbfec8a-image-1506545619076.34.29
        PM.png" style="height:150px;">\r
        </div>\r
        \r
        **Goal:** Make the text
        bigger and blue \r
        \r
        **How:**  Give `"label1"` a `"font-size"` of `80`
        and `"text-color"` of `"blue"`.\r
        \r
        **Show Me:** ![expandable](https://images.code.org/70f1ef9698ff41c15f9825755fde3782-image-1505958989565.gif)</details>
      AppLab Intro 4 - Change Text_markdown_instruction: |-
        <div style="float:right">\r
        \t<img
        src="https://images.code.org/7435f9effd46381a1d7d0c9078d6db78-image-1506554154216.15.23
        PM.png" style="height:150px">\r
        </div>\r
        \r
        **Goal:** Make the text
        bigger\r
        \r
        **How:** Drag in the block and then choose a bigger `"font-size"`
        of `"label1"`.\r
        \r
        **Show Me:** ![expandable](https://images.code.org/6125888ad13353978132b19dfca8cc49-image-1505953367275.gif)
      AppLab Intro 4 - Change Two Buttons_markdown_instruction: |-
        <div style="float:right">\r
        \t<img
        src="https://images.code.org/a35a27104ec33f192971be1cd8d28a6a-image-1506617895943.57.33
        AM.png" style="height:150px">\r
        </div>\r
        \r
        **Goal:** Make the buttons
        `"red"` and `"blue"`\r
        \r
        **How:** Hover over the buttons with your
        mouse to read its `"id"`. Then set the `"background-color"` of each block\r
        \r
        **Show
        Me:** ![expandable](https://images.code.org/d6418be215384e89872a72c2bd6d4a8a-image-1505875864576.gif)
      AppLab Intro 4 - Full Text_markdown_instruction: |
        <div style="float:right">\r
        <img
        src="https://images.code.org/9109abf972acc093fd591eb56619aee5-image-1506617570302.52.18
        AM.png" style="height:150px">\r
        </div>\r
        \r
        **Goal:** Change the words
        on the screen\r
        \r
        **How:** Set the `"text"` of the label to anything
        you want, like `"My app is uh-mazing!`\r
        \r
        **Show Me:** ![expandable](https://images.code.org/4e8549acbca3449cb336fe0ed495f8f3-image-1505878779849.gif)</details>\r
        \r
      AppLab Intro 4 - Video designMode_markdown_instruction: |-
        # Sneak Peak of Design
        Mode
      AppLab Intro 4 - Video onEvent_markdown_instruction: "# Using onEvent"
      AppLab Intro 4 - Video share your work_markdown_instruction: |-
        # Make and Share
        Your App!
      AppLab Intro 4 - Video share_markdown_instruction: "# Make and Share Your App!"
      AppLab Intro 4 - onEvent before_markdown_instruction: |-
        <img src="https://images.code.org/d1d4126613db6bc3db331d47eecf0748-image-1506619589642.gif"
        style="float:right;height:150px">\r
        \r
        **Goal:** The screen starts as
        `"orange"`. The button turns the screen `"pink"`.\r
        \r
        **How:** Before
        the `onEvent()` set the screen's `"background-color"` to `"orange"`.
        Inside the `onEvent()` set it to `"pink"`.\r
        \r
        **Show Me:** ![expandable](https://images.code.org/6c338185d7fe959daed2465c4f91fb55-image-1505888600472.gif)
      AppLab Intro 4 - onEvent intro_markdown_instruction: |-
        <img src="https://images.code.org/d793e711e9e2ea74f68cebf228fcb360-image-1506618780451.gif"
        style="float:right;height:150px">\r
        \r
        **Goal:** The screen turns `"green"`
        when you click the button\r
        \r
        **How:** Add code inside the `"onEvent"`
        that sets the screen's `"background-color"` to `"green"`.\r
        \r
        **Show
        Me:** ![expandable](https://images.code.org/bbb452fdee5c546894a4f2025024ace3-image-1505882181893.gif)
      AppLab Intro 4 - onEvent mouseOver_markdown_instruction: |-
        `"click"` is just
        one type of event. `"mouseover"` events run when your mouse is over a button,
        even if you don't click it. Add code to set the `"background-color"` of
        the screen to `"black"` when the mouse is over the `"offButton"`. Click
        the picture to see how.\r
        \r
        ![expandable](https://images.code.org/756e2c5ee19fd94963ca364fd46bcbd8-image-1505935772425.gif)
      AppLab Intro 4 - onEvent twoButtons_markdown_instruction: |-
        <img src="https://images.code.org/624964d54e36fe248f91f08563a57c4b-image-1506620778039.gif"
        style="float:right;height:150px">\r
        \r
        **Goal:** The right button makes
        both buttons `"green"`\r
        \r
        **How:** Add a second `onEvent()` below the
        first. Set the `"id"` to `"rightButton"`. Inside it add code that changes
        both buttons' `"background-color"`\r
        \r
        **Show Me:** ![expandable](https://images.code.org/5cd0c24b0f7f855daa2225a4b6a08087-image-1505932139152.gif)
      AppLab Intro 4 - playSound_markdown_instruction: |-
        **Goal:** The right button
        plays a duck sound\r
        \r
        **How:** The `playSound()` block plays sounds. Add
        an `onEvent()` for the right button and use the `playSound()` block inside
        it.\r
        \r
        **Show Me:** ![expandable](https://images.code.org/30e35a2c35ac309545d90af9330ba76d-image-1505939876315.gif)
      AppLab Intro 4 - stopSound_markdown_instruction: |-
        **Goal:** The right button
        stops all sound\r
        \r
        **How:** Add an `onEvent()` for the right button and
        use the `stopSound()` block inside it.\r
        \r
        **Show Me:** ![expandable](https://images.code.org/a5081cce1969c5a784b4440369706801-image-1505941723405.gif)
      AppLab Intro 4 - thisOrThat design_markdown_instruction: |-
        **Goal:** Try out
        Design Mode to keep making changes to your This or That App. There's also
        some new blocks in your toolbox! You'll learn more about these in later lessons.\r
        \r
        **How:**
        Click into "Design" to quickly edit how your app looks or add screen elements
        yourself. Experiment with some of the new blocks in the toolbox.
      AppLab Intro 4 - thisOrThat template_markdown_instruction: |-
        **Goal:** Try out
        Design Mode to keep making changes to your This or That App. You'll learn
        more in later lessons.\r
        \r
        **How:** Click into "Design" to quickly edit
        how your app looks or add screen elements yourself.
      AppLab Intro 4 - thisOrThat_markdown_instruction: |-
        **Goal:** Make a "This
        or That" app, then share it with friends\r
        \r
        **How:** You know how to
        use `"background-color"`, `"font-size"`, `"text-color"`, `"text"`,
        `playSound()`, and `onEvent()`. Use them to set the look of your app and make
        it change when your user clicks the buttons. Click "Share" to send it to
        a friend.\r
        \r
        **Show Me:** ![expandable](https://images.code.org/c1d23a0288a42d48963053e0d9a1002e-image-1505943063546.gif)
      AppLab Intro 4 - video onEvent_markdown_instruction: "# Using onEvent"
      AppLab Intro 5 - Change Screen Color_markdown_instruction: |-
        <div style="float:right">\r
        \t<img
        src="https://images.code.org/1c2a02a2caebbda2be4e537ab5087dcd-image-1506613875548.50.54
        AM.png" style="height:150px"> \r
        </div>\r
        \r
        **Goal:** Make the screen
        `"red"`. \r
        \r
        **How:** Drag in the block, change the color, then hit
        "Run"\r
        \r
        **Show Me:** ![expandable](https://images.code.org/8b1d99aa6bd6274e05b1844fab7e8b2a-image-1505870100643.gif)
      AppLab Intro 5 - Change Text 2_markdown_instruction: |-
        <div style="float:right">\r
        <img
        src="https://images.code.org/39ead723fbd2b047aa2d1e401cbfec8a-image-1506545619076.34.29
        PM.png" style="height:150px;">\r
        </div>\r
        \r
        **Goal:** Make the text
        bigger and blue \r
        \r
        **How:**  Give `"label1"` a `"font-size"` of `80`
        and `"text-color"` of `"blue"`.\r
        \r
        **Show Me:** ![expandable](https://images.code.org/70f1ef9698ff41c15f9825755fde3782-image-1505958989565.gif)</details>
      AppLab Intro 5 - Change Text_markdown_instruction: |-
        <div style="float:right">\r
        \t<img
        src="https://images.code.org/7435f9effd46381a1d7d0c9078d6db78-image-1506554154216.15.23
        PM.png" style="height:150px">\r
        </div>\r
        \r
        **Goal:** Make the text
        bigger\r
        \r
        **How:** Drag in the block and then choose a bigger `"font-size"`
        of `"label1"`.\r
        \r
        **Show Me:** ![expandable](https://images.code.org/6125888ad13353978132b19dfca8cc49-image-1505953367275.gif)
      AppLab Intro 5 - Change Two Buttons_markdown_instruction: |-
        <div style="float:right">\r
        \t<img
        src="https://images.code.org/a35a27104ec33f192971be1cd8d28a6a-image-1506617895943.57.33
        AM.png" style="height:150px">\r
        </div>\r
        \r
        **Goal:** Make the buttons
        `"red"` and `"blue"`\r
        \r
        **How:** Hover over the buttons with your
        mouse to read its `"id"`. Then set the `"background-color"` of each block\r
        \r
        **Show
        Me:** ![expandable](https://images.code.org/d6418be215384e89872a72c2bd6d4a8a-image-1505875864576.gif)
      AppLab Intro 5 - Full Text_markdown_instruction: |-
        <div style="float:right">\r
        <img
        src="https://images.code.org/1e81d5bcdd69172f4127de55d045225f-image-1507565161167.05.19
        AM.png" style="height:200px">\r
        </div>\r
        \r
        **Goal:** Change the words
        on the screen and the colors of the buttons.\r
        \r
        **How:** Set the `"text"`
        of the label to anything you want, like `"Welcome to my app!"`. Then set
        the `"background-color"` of the buttons.\r
        \r
        **Show Me:** ![expandable](https://images.code.org/709ff200e5b5f553b24d1d0a769db6ed-image-1507565545993.gif)
      AppLab Intro 5 - addButton_markdown_instruction: |-
        **Goal:** Add a right arrow
        to the screen for switching the next image. In the next level you'll make
        it work.\r
        \r
        **How:** Use Design Mode to drag in an `"image"` element.
        The icon library has many different arrows to choose from. \r
        \r
        **Show
        Me:** ![expandable](https://images.code.org/066245e52135c038502620a19f961667-image-1507570682956.gif)
      AppLab Intro 5 - go further_markdown_instruction: |-
        **Goal:** This is a blank
        App Lab project. Build whatever you like here! You also have a few more blocks
        you can try out if you like. Don't forget to share your work!
      AppLab Intro 5 - onEvent intro_markdown_instruction: |-
        <img src="https://images.code.org/d793e711e9e2ea74f68cebf228fcb360-image-1506618780451.gif"
        style="float:right;height:150px">\r
        \r
        **Goal:** The screen turns `"green"`
        when you click the button\r
        \r
        **How:** Add code inside the `"onEvent"`
        that sets the screen's `"background-color"` to `"green"`.\r
        \r
        **Show
        Me:** ![expandable](https://images.code.org/bbb452fdee5c546894a4f2025024ace3-image-1505882181893.gif)
      AppLab Intro 5 - onEvent twoButtons_markdown_instruction: |-
        <img src="https://images.code.org/158c9258bfff18c2177440f201446c47-image-1507566793890.gif"
        style="float:right;height:200px">\r
        \r
        **Goal:** Complete this flashlight
        app. The right button should switch the make the screen `"black"` and the
        text `"white"`\r
        \r
        **How:** Add a second `onEvent()` block below the
        first. Then set the `"background-color"` of the screen and `"text-color"`
        of the label.\r
        \r
        **Show Me:** ![expandable](https://images.code.org/64c83d66a723eae01d09e4aea38fbad1-image-1507567249833.gif)
      AppLab Intro 5 - playSound_markdown_instruction: |-
        <img src="https://images.code.org/cdc81e79687693db50383a41894d6679-image-1507566452258.26.22
        AM.png" style="float:right;height:200px">\r
        \r
        **Goal:** Add two more
        animals to the sound board.\r
        \r
        **How:** You'll need to add two `onEvent()`
        blocks to the program. Then use `playSound()` inside them.\r
        \r
        **Show Me:**
        ![expandable](https://images.code.org/b0f254d319f788f832553648db6fb13c-image-1507566138094.gif)
      AppLab Intro 5 - rate it app_markdown_instruction: |-
        <img src="https://images.code.org/74c675e72f33fa368057d7b783e50e31-image-1507568235560.gif"
        style="float:right;height:200px">\r
        \r
        **Goal:** Complete this simple
        profile. Set the user name. Choose a main image. When you click the heart
        it should switch to a filled in heart icon and turn red.\r
        \r
        **How:** You'll
        need to use the `"image"` property.\r
        \r
        **Show Me:** ![expandable](https://images.code.org/217e10ec9ac91037b80b963fab299a60-image-1507568801064.gif)
      AppLab Intro 5 - setScreen_markdown_instruction: |-
        **Goal:** Write code to let
        the user switch to your second screen.\r
        \r
        **How:** Add an `onEvent()`
        for the button you just created. Use `setScreen()` to switch between screens.\r
        \r
        **Show
        Me:** ![expandable](https://images.code.org/9ac5102ec678c1ecd0278446560ba617-image-1507571425597.gif)
      AppLab Intro 5 - share keep going_markdown_instruction: |-
        **Goal:** Share your
        app with someone, or just send it to yourself! Then keep building it out!\r
        \r
        **How:**
        Click "Share" to find lots of ways to share your app. Here's some ideas
        to try\r
        \r
        * Add a button that takes you back from `"screen2"` to `"screen1"`\r
        *
        Add more screens with more images\r
        * Add more types of reaction buttons
        that users can click
      AppLab Intro 5 - socialTemplate_markdown_instruction: "**Goal:** Add a button\nto
        the screen for scrolling to the next image. Give it a good icon, like a\nright
        arrow. In the next level you'll make it work.\\r\n\\r\n**How:** Use Design\nMode
        to drag in a button. The icon library has many different arrows to choose\nfrom.
        Don't forget you can search for them.\\r\n\\r\n**Show Me:** "
      AppLab Intro 6 - Change Screen Color_markdown_instruction: |-
        <div style="float:right">\r
        \t<img
        src="https://images.code.org/1c2a02a2caebbda2be4e537ab5087dcd-image-1506613875548.50.54
        AM.png" style="height:150px"> \r
        </div>\r
        \r
        **Goal:** Make the screen
        `"red"`. \r
        \r
        **How:** Drag in the block, change the color, then hit
        "Run"\r
        \r
        **Stuck? Click here** ![expandable](https://images.code.org/8b1d99aa6bd6274e05b1844fab7e8b2a-image-1505870100643.gif)
      AppLab Intro 6 - Change Text 2_markdown_instruction: |-
        <div style="float:right">\r
        <img
        src="https://images.code.org/39ead723fbd2b047aa2d1e401cbfec8a-image-1506545619076.34.29
        PM.png" style="height:150px;">\r
        </div>\r
        \r
        **Goal:** Make the text
        bigger and blue \r
        \r
        **How:**  Give `"label1"` a `"font-size"` of `80`
        and `"text-color"` of `"blue"`.\r
        \r
        **Stuck? Click here:** ![expandable](https://images.code.org/70f1ef9698ff41c15f9825755fde3782-image-1505958989565.gif)</details>
      AppLab Intro 6 - Full Text_markdown_instruction: |-
        <div style="float:right">\r
        <img
        src="https://images.code.org/1e81d5bcdd69172f4127de55d045225f-image-1507565161167.05.19
        AM.png" style="height:200px">\r
        </div>\r
        \r
        **Goal:** Change the words
        on the screen and the colors of the buttons.\r
        \r
        **How:** Set the `"text"`
        of the label to anything you want, like `"Welcome to my app!"`. Then set
        the `"background-color"` of the buttons.\r
        \r
        **Stuck? Click here:** ![expandable](https://images.code.org/709ff200e5b5f553b24d1d0a769db6ed-image-1507565545993.gif)
      AppLab Intro 6 - animalSoundBoard_markdown_instruction: |-
        **Goal:** Keep building
        out the Animal Sound board. Then make sure to "Share" it.\r
        \r
        **How:**
        Add new buttons for more animals. Or make the soundboard for a totally different
        topic entirely!
      AppLab Intro 6 - blankApp_markdown_instruction: |-
        **Goal:** This is a completely
        blank App Lab App. Build whatever you want from scratch!?\r
        \r
        **How:**
        You're in control here. You decide what you want to make!
      AppLab Intro 6 - onEvent intro_markdown_instruction: |-
        <img src="https://images.code.org/d793e711e9e2ea74f68cebf228fcb360-image-1506618780451.gif"
        style="float:right;height:150px">\r
        \r
        **Goal:** The screen turns `"green"`
        when you click the button\r
        \r
        **How:** Add code inside the `"onEvent"`
        that sets the screen's `"background-color"` to `"green"`.\r
        \r
        **Stuck?
        Click here:** ![expandable](https://images.code.org/bbb452fdee5c546894a4f2025024ace3-image-1505882181893.gif)
      AppLab Intro 6 - onEvent twoButtons_markdown_instruction: |-
        <img src="https://images.code.org/158c9258bfff18c2177440f201446c47-image-1507566793890.gif"
        style="float:right;height:200px">\r
        \r
        **Goal:** Complete this flashlight
        app. The right button should switch the make the screen `"black"` and the
        text `"white"`\r
        \r
        **How:** Add a second `onEvent()` block below the
        first. Then set the `"background-color"` of the screen and `"text-color"`
        of the label.\r
        \r
        **Stuck? Click here:** ![expandable](https://images.code.org/64c83d66a723eae01d09e4aea38fbad1-image-1507567249833.gif)
      AppLab Intro 6 - playSound Template_markdown_instruction: |-
        <img src="https://images.code.org/2bb21cff40cc9823a4ae370895de2953-image-1508294971111.49.16
        PM.png" style="float:right;height:200px">\r
        \r
        **Goal:** Add an animal
        to the sound board. If you don't want to find a picture of your animal then
        change the color of the speaker icon to one you like.\r
        \r
        **How:** Add
        an `onEvent()` and use `playSound()` inside of it. Find an animal sound you
        like in the sound library. For the picture you can either upload an image
        you find online and change the button's `"image"` property, or just change
        the `"icon-color"`. \r
        \r
        **Stuck? Click here:** ![expandable](https://images.code.org/b0f254d319f788f832553648db6fb13c-image-1507566138094.gif)
      AppLab Intro 6 - playSound_markdown_instruction: |-
        <img src="https://images.code.org/2bb21cff40cc9823a4ae370895de2953-image-1508294971111.49.16
        PM.png" style="float:right;height:200px">\r
        \r
        **Goal:** Add an animal
        to the sound board. If you don't want to find a picture of your animal then
        change the color of the speaker icon to one you like.\r
        \r
        **How:** Add
        an `onEvent()` and use `playSound()` inside of it. Find an animal sound you
        like in the sound library. For the picture you can either upload an image
        you find online and change the button's `"image"` property, or just change
        the `"icon-color"`. \r
        \r
        **Stuck? Click here:** ![expandable](https://images.code.org/80b30e5bd85dd5430e2c375568d53580-image-1508432171734.gif)
      AppLab Intro 6 - quizApp_markdown_instruction: |-
        **Goal:** Build out three questions
        in this Quiz App. You can always make more questions by duplicating screens.
        Then send it to a friend!\r
        \r
        **How:** Run the app first and try clicked
        all the buttons to see how it works. Then from Design Mode you can change
        the default text for the questions and buttons. In Code mode create response
        text for when the user clicks the different buttons. Customize the colors
        or add images if you want too!
      AppLab Intro 6 - thisOrThatAddButton Template_markdown_instruction: "**Goal:**\nAdd
        a second button to the screen that says \"Right!\"\\r\n\\r\n**How:** In\nDesign
        Mode drag in a new button. Position and resize it. Then set its `\"text\"`,\n`\"background
        color\"`, and `\"font size\"`\\r\n\\r\n**Show Me:** "
      AppLab Intro 6 - thisOrThatAddButton_markdown_instruction: |-
        <img src="https://images.code.org/3feb07aaf3d933b094647479673a3293-image-1508373443129.37.00
        PM.png" style="float:right;height:200px">\r
        \r
        **Goal:** Add a second
        button to the screen that says "Right!"\r
        \r
        **How:** In Design Mode drag
        in a new button. Position and resize it. Then set its `"text"`, `"background
        color"`, and `"font size"`\r
        \r
        **Stuck? Click here:** ![expandable](https://images.code.org/7035ad0445984cf889b159cf5682e35a-image-1508383186447.gif)
      AppLab Intro 6 - thisOrThatAddScreen_markdown_instruction: |-
        <img src="https://images.code.org/f102a1363aa575cc530379d9a4ee378c-image-1508382068883.00.59
        PM.png" style="float:right;height:200px">\r
        \r
        **Goal:** Create a new
        screen called `"rightScreen"`. Add a short text label to the screen.\r
        \r
        **How:**
        In Design Mode add a new screen. Change its `"id"` to be `"rightScreen"`.
        Then drag a label onto the screen with a short message to your user. You can
        also duplicate the `"leftScreen"` to do this.\r
        \r
        **Stuck? Click here:**
        ![expandable](https://images.code.org/11cf186acb0453cf9ec46929b763f568-image-1508383646159.gif)
      AppLab Intro 6 - thisOrThatPersonalize_markdown_instruction: |-
        <img src="https://images.code.org/762507aef26d512f820c42fb2e7fc6f1-image-1508386296370.11.19
        PM.png" style="float:right;height:200px">\r
        \r
        **Goal:** Start building
        your own "Choose Your Own Adventure" app. Don't forget to "Share" it
        with someone!\r
        \r
        **How:** Choose the basic story you want to tell, like
        who your character is and the setting. Then change the text and images of
        your app to match the story. You can always add more screens as you keep building
        out your adventure.\r
        \r
        <details><summary><b>Stuck? Click here for some
        ideas</b></summary>\r
        \r
        <li>Make an adventure about your favorite fictional
        character</li>\r
        <li>Make an adventure about a famous (or not-so-famous person)
        you're a big fan of</li>\r
        <li>Make an adventure that has a lot of unexpected
        twists or has a difficult moral choice</li>\r
        \r
        </details>
      AppLab Intro 6 - thisOrThatSetScreen_markdown_instruction: |-
        <img src="https://images.code.org/acd1acf659a2504d38ff80256d8e870f-image-1508374065550.com-crop
        (1).gif" style="float:right;height:200px">\r
        \r
        **Goal:** The screen
        switches to `"rightScreen"` when the user clicks the "Right!" button.\r
        \r
        **How:**
        In Code Mode add a new `onEvent()` to your program for your "Right!" button.
        Add a `setScreen()` block inside of it that switches screens to `"thatScreen"`.\r
        \r
        **Stuck?
        Click here:** ![expandable](https://images.code.org/64dfec0d9f9c2fc237abb90ef6a72f0e-image-1508384166252.gif)
      AppLab Intro 7 - Change Screen Color_markdown_instruction: |-
        <div style="float:right">\r
        \t<img
        src="https://images.code.org/bf9b1fb57751fa90c9b786339914ad70-image-1508521068798.34.54
        AM.png" style="height:150px"> \r
        </div>\r
        \r
        **Goal:** Make the screen
        green. \r
        \r
        **How:** Drag in a `setProperty()` block. Use the dropdowns
        to set the screen's `"background-color"` to `"green"`. Then hit "Run".\r
        \r
        **Stuck?
        Click here:** ![expandable](https://images.code.org/3b5e70522b02867a1df1d5b5e481785e-image-1511279858395.gif)
      AppLab Intro 7 - Change Text 2_markdown_instruction: |-
        <div style="float:right">\r
        <img
        src="https://images.code.org/39ead723fbd2b047aa2d1e401cbfec8a-image-1506545619076.34.29
        PM.png" style="height:200px;">\r
        </div>\r
        \r
        **Goal:** Make the text
        bigger and blue.\r
        \r
        **How:**  You'll need two lines of code. Give `"label1"`
        a `"font-size"` of `80` and `"text-color"` of `"blue"`.\r
        \r
        **Stuck?
        Click here:** ![expandable](https://images.code.org/2d5d46a03082af3b01847aad6602e2ea-image-1511280140482.gif)
      AppLab Intro 7 - Full Text_markdown_instruction: |-
        <div style="float:right">\r
        <img
        src="https://images.code.org/1e81d5bcdd69172f4127de55d045225f-image-1507565161167.05.19
        AM.png" style="height:200px">\r
        </div>\r
        \r
        **Goal:** Make the buttons
        `"red"` and `"blue"`. Then change the text in the large orange label.\r
        \r
        **How:**
        \r
        * Remember you can hover over elements to see their `"id"`.\r
        * Set
        the `"background-color"` of the buttons to `"red"` and `"blue"`.\r
        *
        Set the `"text"` property of the label to anything you want, like `"Welcome
        to my app!"`.\r
        \r
        **Stuck? Click here:** ![expandable](https://images.code.org/4bf99e7352e7c17a5bf73ced80171f6a-image-1511280628092.gif)
      AppLab Intro 7 - onEvent intro_markdown_instruction: |-
        <img src="https://images.code.org/3d8c8487ea669563d3401c0009cd9462-image-1511281194897.gif"
        style="float:right;height:200px">\r
        \r
        **Goal:** The screen will start
        out blue. Add code so it turns green when you click the "Green-ify" button.\r
        \r
        **How:**
        Add code inside the `onEvent()` that sets the screen's `"background-color"`
        to `"green"`.\r
        \r
        **Stuck? Click here:** ![expandable](https://images.code.org/5ddf6b129bc04b79839b3661ccef788b-image-1511281012076.gif)
      AppLab Intro 7 - onEvent twoButtons_markdown_instruction: |-
        <img src="https://images.code.org/158c9258bfff18c2177440f201446c47-image-1507566793890.gif"
        style="float:right;height:200px">\r
        \r
        **Goal:** Help finish this flashlight
        app. The "On" button already turns the screen white. Run the app and try
        it out. Then write code so the "Off" button makes the screen black again.\r
        \r
        **How:**
        Add code inside the empty `onEvent()` that sets the `"background-color"`
        of the screen to `"black"` and `"text-color"` of the label to `"white"`.\r
        \r
        **Stuck?
        Click here:** ![expandable](https://images.code.org/020b1d9b465aaf35967a528a92961c13-image-1511281772276.gif)
      AppLab Intro 7 - playSound_markdown_instruction: |-
        <img src="https://images.code.org/28176329f15dea1a863564b069e72aab-image-1511282702534.44.52
        AM.png" style="float:right;height:200px">\r
        \r
        **Goal:** This sound board
        is almost done! Run it to see how it works. Then add an image, text, and sound
        to the last button.\r
        \r
        **How:** \r
        * Add an `onEvent()` to the program
        and set the "id" to `"button4"`. Drag a `playSound()` into the `onEvent()`
        and choose a sound from the library. \r
        * Add a `setProperty()` (outside
        your `onEvent()`) to change the button's `"image"` property. Choose an
        image using the third dropdown.\r
        * Add one more `setProperty()` to change
        the button's `"text"`.\r
        \r
        **Stuck? Click here:** ![expandable](https://images.code.org/a3fdcb8954c5e8d585bef64df1ec5b1a-image-1511285408512.gif)
      AppLab Intro 7 - thisOrThatAddButton_markdown_instruction: |-
        <img src="https://images.code.org/3feb07aaf3d933b094647479673a3293-image-1508373443129.37.00
        PM.png" style="float:right;height:200px">\r
        \r
        **Goal:** Add a second
        button to the screen that says "Right!" with an `"id"` of `"rightButton"`.\r
        \r
        **How:**
        In Design Mode drag in a new button. Position and resize it. Then set its
        `"id"`, `"text"`, `"background color"`, and `"font size"`.\r
        \r
        **Stuck?
        Click here:** ![expandable](https://images.code.org/7035ad0445984cf889b159cf5682e35a-image-1508383186447.gif)
      AppLab Intro 7 - thisOrThatAddScreen_markdown_instruction: |-
        <img src="https://images.code.org/f102a1363aa575cc530379d9a4ee378c-image-1508382068883.00.59
        PM.png" style="float:right;height:200px">\r
        \r
        **Goal:** Create a new
        screen called `"rightScreen"`. Add a text label that says "You went right!".\r
        \r
        **How:**
        In Design Mode drag in a new screen element. Change its `"id"` to `"rightScreen"`.
        Then drag a label onto the screen and change the text to "You went right!".\r
        \r
        **Stuck?
        Click here:** ![expandable](https://images.code.org/11cf186acb0453cf9ec46929b763f568-image-1508383646159.gif)
      AppLab Intro 7 - thisOrThatPersonalize_markdown_instruction: |-
        <a href="https://studio.code.org/projects/applab/gx21oCP10-V4GlNMlSpwdQ"
        target="_blank"><img src="https://images.code.org/ba6c0db48cc1c3c28c135f1c2f67f361-image-1511244802597.10.18
        PM.png" style="float:right;height:200px"></a>\r
        <a href="https://studio.code.org/projects/applab/SM_edi1btguZZiQaTtUT9Q"
        target="_blank"><img src="https://images.code.org/284b55697d786e0cd64350d0967c5dda-image-1511244806272.11.05
        PM.png" style="float:right;height:200px"></a>\r
        <a href="https://studio.code.org/projects/applab/SMvVhgBX_GGyxg5LSEMrgg"
        target="_blank"><img src="https://images.code.org/445181ff8d84861919512ba9b8e09586-image-1511244809994.12.40
        PM.png" style="float:right;height:200px"></a>\r
        \r
        **Goal:** Build your
        own app by extending this project. Then "Share" it with someone!\r
        \r
        **How:**
        Decide what type of app you're interested in building. Then go build it by
        adding more screens, buttons, text, sound, and user interactions to your app.
        There's a few more blocks in the toolbox that you can experiment with as
        well. Once you're done click "Share" to send it to yourself or a friend!
        \r
        \r
        <details><summary><b>Choose Your Own Adventure Ideas</b></summary>\r
        \r
        Try
        out this <a href="https://studio.code.org/projects/applab/SMvVhgBX_GGyxg5LSEMrgg"
        target="_blank">Example Choose Your Own Adventure App</a> so you can see
        how one works. Here's some ideas to help you come up with your own story.\r
        \r
        <li>Make
        an adventure about your favorite character, real or fictional.</li>\r
        <li>Make
        an adventure that tells the story of your favorite book, movie, or your own
        creation.</li>\r
        <li>Make an adventure that has a lot of unexpected twists
        or has a difficult moral choice.</li>\r
        <br>\r
        </details>\r
        \r
        <details><summary><b>Greeting
        Card Ideas</b></summary>\r
        \r
        Try out this <a href="https://studio.code.org/projects/applab/SM_edi1btguZZiQaTtUT9Q"
        target="_blank">Example Greeting Card App</a> so you can see how one works.
        Here's some ideas to help you come up with your own card.\r
        \r
        <li>Think
        of a birthday, holiday, or other special day that's coming up. Make a card
        to celebrate!</li>\r
        <li>Create a thank you card for someone you appreciate.</li>\r
        <li>Create
        an invitation for an upcoming event.</li>\r
        <br>\r
        </details>\r
        \r
        <details><summary><b>Personality
        Quiz Ideas</b></summary>\r
        \r
        Try out this <a href="https://studio.code.org/projects/applab/gx21oCP10-V4GlNMlSpwdQ"
        target="_blank">Example Personality Quiz App</a> so you can see how one
        works. Here's some ideas to help you come up with your own quiz.\r
        \r
        <li>Make
        a quiz that suggests something a person might like, for example a meal, a
        team, a book, or a place.</li>\r
        <li>Make an quiz that "predicts the future"
        based on their answers.</li>\r
        <li>Make a quiz to help people make a hard
        decision.</li>\r
        \r
        </details>
      AppLab Intro 7 - thisOrThatSetScreen_markdown_instruction: |-
        <img src="https://images.code.org/acd1acf659a2504d38ff80256d8e870f-image-1508374065550.com-crop
        (1).gif" style="float:right;height:200px">\r
        \r
        **Goal:** The screen
        switches to `"rightScreen"` when the user clicks the `"rightButton"`.\r
        \r
        **How:**
        In Code Mode add a new `onEvent()` to your program for your "Right!" button.
        Add a `setScreen()` block inside of it that switches screens to `"rightScreen"`.\r
        \r
        **Stuck?
        Click here:** ![expandable](https://images.code.org/64dfec0d9f9c2fc237abb90ef6a72f0e-image-1508384166252.gif)
      AppLab_test02_markdown_instruction: |-
        # This is the title \r
        \r
        - bullet 1
        \r
        - do this\r
        - then this\r
        \r
        ![](https://images.code.org/982f9167cf54c24251922fbd0a7f60b3-image-1436470853351.png)
      Applab AllTheThings ResourcesTab AllResources_markdown_instruction: |-
        <img src="https://images.code.org/0aca9e3ba0945f31ddd56438a45ed69c-image-1436286498758.png"
        align=right>\r
        \r
        Given only 4 turtle commands, write code in App Lab to
        complete the drawings in each of the challenges below.  Your goal is to write
        code that solves the problem as efficiently as possible using only the commands
        provided.\r
        \r
        What does “efficient” mean?  In computer science it can actually
        mean several different things depending on what you’re talking about.  Work
        on these challenges, try to solve them in a way that you think is best and
        we’ll ask about efficiency at the end.\r
        \r
        <img src="https://images.code.org/d26ed114448c5ffe75a75ed761fab5f0-image-1447888033281.gif"
        align=right>\r
        # Do This: \r
        Draw a 1 x 1 square to the front and left of
        the turtle as efficiently as possible. The program should stop with turtle
        in its original position, facing its original direction.\r
        \r
        Once you think
        you have a solution, click the Finish button - it will appear once you run
        the program.
      Applab AllTheThings ResourcesTab MapReference_markdown_instruction: |-
        <img src="https://images.code.org/0aca9e3ba0945f31ddd56438a45ed69c-image-1436286498758.png"
        align=right>\r
        \r
        Given only 4 turtle commands, write code in App Lab to
        complete the drawings in each of the challenges below.  Your goal is to write
        code that solves the problem as efficiently as possible using only the commands
        provided.\r
        \r
        What does “efficient” mean?  In computer science it can actually
        mean several different things depending on what you’re talking about.  Work
        on these challenges, try to solve them in a way that you think is best and
        we’ll ask about efficiency at the end.\r
        \r
        <img src="https://images.code.org/d26ed114448c5ffe75a75ed761fab5f0-image-1447888033281.gif"
        align=right>\r
        # Do This: \r
        Draw a 1 x 1 square to the front and left of
        the turtle as efficiently as possible. The program should stop with turtle
        in its original position, facing its original direction.\r
        \r
        Once you think
        you have a solution, click the Finish button - it will appear once you run
        the program.
      Applab AllTheThings ResourcesTab ReferenceLinks_markdown_instruction: |-
        <img
        src="https://images.code.org/0aca9e3ba0945f31ddd56438a45ed69c-image-1436286498758.png"
        align=right>\r
        \r
        Given only 4 turtle commands, write code in App Lab to
        complete the drawings in each of the challenges below.  Your goal is to write
        code that solves the problem as efficiently as possible using only the commands
        provided.\r
        \r
        What does “efficient” mean?  In computer science it can actually
        mean several different things depending on what you’re talking about.  Work
        on these challenges, try to solve them in a way that you think is best and
        we’ll ask about efficiency at the end.\r
        \r
        <img src="https://images.code.org/d26ed114448c5ffe75a75ed761fab5f0-image-1447888033281.gif"
        align=right>\r
        # Do This: \r
        Draw a 1 x 1 square to the front and left of
        the turtle as efficiently as possible. The program should stop with turtle
        in its original position, facing its original direction.\r
        \r
        Once you think
        you have a solution, click the Finish button - it will appear once you run
        the program.
      Applab allthethings onRecordEvent_markdown_instruction: |-
        Please sign in to
        test applab levels (By design, applab levels only work if signed in. Normally,
        we make people sign in, but this is only enforceable for a whole script and
        would be annoying to do for the allthethings script).
      Applab test_markdown_instruction: |-
        This level is submittable. For testing only!
        Please sign in to test applab levels (By design, applab levels only work if
        signed in. Normally, we make people sign in, but this is only enforceable
        for a whole script and would be annoying to do for the allthethings script).
      Artist Inspiration_markdown_instruction: |-
        <img src="https://images.code.org/1df195df9d808f0dd539bef0f5c2958b-image-1443049871563.02.54.png"
        width="250px"/>\r
        \r
        **Free-Play Inspiration:** You've now learned everything
        you need to know to make a pattern like this! \r
        \r
        If this picture inspires
        you, try to make something similar. Otherwise, create something all your own.\r
        \r
        Notice:
        We've used the `set alpha` block to make the "petals" fade toward the outside.
      Bergeron Robot Maze1_markdown_instruction: "Can you help me catch the naughty\npig?
        \\r\n\\r\nStack a couple of `move forward` blocks below the `when run`\nblock
        and press \"Run\". "
      Big Game Animation 1_markdown_instruction: |-
        Now that you've learned to write
        simple linear functions, let's work on using them to add some movement to
        our game. Click "Run" to see what your game can currently do (not much!),
        update any variables you like, and then click finish to move on.
      Big Game Animation 2_markdown_instruction: |-
        The `update-target` function takes
        the target's current x value, and returns an updated value.\r
        \r
        Complete
        `update-target` so that it adds to the x value each time it is called. The
        more you add to x, the faster the target will go.
      Big Game Animation 3_markdown_instruction: |-
        The `update-danger` function should
        work just like `update-target`, except that the danger should move from the
        right side over towards the left.\r
        \r
        Complete `update-danger` to make
        the danger fly across the screen.
      Big Game Animation 4_markdown_instruction: |-
        At this point in your game your
        danger should run across the screen from right to left, and your target should
        run across from left to right.\r
        \r
        They don't ever come back on screen
        once they've left, but we'll take care of that later.\r
        \r
        Take a minute
        to make sure your game is working like you want it to, and then click "Finish"
        to move on.
      Big Game Booleans 1_markdown_instruction: |-
        When you last worked on your game
        we got our target and danger sprites to fly across the screen, but they never
        come back. Click "Run" to see how your game is currently working, and then
        click finish and we'll work on making those sprites reappear on screen after
        they've left.
      Big Game Booleans 2_markdown_instruction: |-
        Now that your `onscreen?` function
        is checking `safe-left?` and `safe-right?` we need to fix those functions.\r
        \r
        When
        we used them for Sam the Bat we wanted to prevent Sam from leaving the screen,
        but now we want the Target and Danger to actually go all the way off screen
        before returning to the opposite side.\r
        \r
        Go to the "Functions" section
        of the toolbox and complete the `safe-left?` function so that it returns *true*
        if the sprite's x coordinate is greater than -50.\r
        \r
        If you're successful
        you should see the Danger go all the way off the left side before returning
        on the right side.
      Big Game Booleans 3_markdown_instruction: |-
        Now that you've got `safe-left?`
        working, let's fix `safe-right?`\r
        \r
        It should take in a sprite's x coordinate
        and return true if that coordinate is less than 450.\r
        \r
        Once your `safe-right?`
        is complete you should see the Target go off the right side of the screen
        and return on the left.
      Big Game Booleans 4_markdown_instruction: |-
        We've provided a couple of empty
        functions for `safe-left?` and `safe-right?` The first thing you need to do
        is complete the `onscreen?` function so that it checks whether both `safe-left?`
        and `safe-right?` are true.\r
        \r
        **TIP** - even after you add `safe-left?`
        and `safe-right?` your sprites won't return to the screen - why do you think
        that is?
      Big Game Booleans 5_markdown_instruction: |-
        At this point your Danger should
        run across the screen from right to left, your Target should run across from
        left to right, and they should both return to the opposite side, repeatedly.
        Take a minute to make sure your game is working like you want it to, and then
        click "Finish" to move on.
      Big Game Collision 1_markdown_instruction: |-
        At this point you've programmed
        a video game with a moving Target and Danger, both of which return to the
        screen once they've left, and a Player that responds to keyboard input. Click
        "Run" to see how your game is currently working, and then we'll dig into
        the final missing piece - collision detection!
      Big Game Collision 3_markdown_instruction: |-
        Let's fix this `distance` function
        so our collision detection works properly.\r
        \r
        Use the Distance Formula,
        so the distance function returns the distance between the player's center
        coordinates (px, py) and another sprite's center coordinates (cx, cy).\r
        \r
        We've
        provided a working `line-length` function to help you out.
      Big Game Collision 4_markdown_instruction: |-
        The `distance` function returns
        the distance between two sprites.\r
        \r
        Complete the `collide?` function
        so that it returns *true* if the distance between two points is less than
        100 pixels apart.\r
        \r
        If you're successful, your sprites will instantly
        collide - why do you think that is?
      Big Game Final_markdown_instruction: |-
        You made it!\r
        \r
        At this point your
        game should be fully functioning, take some time to enjoy your new game and
        make any final tweaks to it.\r
        \r
        When you're happy with the final product,
        click Finish and you'll have an opportunity to share a link to your game.\r
        \r
        Good
        work!
      Big Game Player 1_markdown_instruction: |-
        We're getting really close to a finished
        game!\r
        \r
        Last time you worked on your game, you used booleans to make
        your Target and Danger return to the screen once they've left. Click "Run"
        to see how your game looks right now, and then we'll get to making your Player
        move up and down.
      Big Game Player 2_markdown_instruction: |-
        To move the player up and down, we'll
        need to use a conditional block to figure out which key is pressed and respond
        accordingly.\r
        \r
        Computers read keypresses as numeric key codes - the up
        arrow is **38** and the down arrow is **40**. You can lookup other key codes
        in your student workbook.\r
        \r
        Edit the `update-player` function so the
        player moves up when the up arrow (keycode 38) is pressed, and moves down
        (keycode 40) when the down arrow is pressed.
      Big Game Vars 1_markdown_instruction: |-
        Let's get started on your Big Game!
        Here you'll see a whole bunch of placeholder code that you'll eventually
        replace with your own, but for now we're only going to worry about defining
        variables. Click "Run" to see what the game looks like with the default
        values.
      Big Game Vars 2_markdown_instruction: |-
        The first step to making this game your
        own is to give it a good Title. Click edit on the `title` and `subtitle` variables
        and change them to something new.
      Big Game Vars 3_markdown_instruction: |-
        Now let's set the background for your
        new game. Edit the `bg` variable and select a new background Image from the
        dropdown.
      Big Game Vars 4_markdown_instruction: |-
        Awesome! Now you can update the variables
        for your Player, Target, and Danger. Feel free to play with all of the variables
        at this point to make your game look like you'd like it to. Click "Finish"
        when you're done.
      Boolean Expressions_markdown_instruction: |-
        ### Points to pay attention to:\r
        \r
        1.
        What's a *Boolean Expression?*\r
        2. Why is it called a "Boolean"?\r
        3.
        Is this a legal expression?  `10 > 25`?
      Brad Spooky House Copy_markdown_instruction: |
        Freeplay: Here are the functions
        you've written, and some more for you to play with. Play with the pen width
        to see how different your drawings look!\r
        \r
      Brad Spooky House_markdown_instruction: |
        Freeplay: Here are the functions you've
        written, and some more for you to play with. Play with the pen width to see
        how different your drawings look!\r
        \r
      Brand Book Example_markdown_instruction: |
        # Brand Book\r
        \r
        Check out the
        example of a brand book\r
        \r
      CDU U6 Playground Sound Board_markdown_instruction: |-
        # Sound Board 2.0\r
        \r
        You
        can now play sounds, notes, and songs! With this new knowledge, you can even
        turn your board into a sound board.\r
        \r
        In the toolbox you have all of
        the buzzer and led-related blocks at your disposal. See what cool stuff you
        can come up with!\r
        \r
        # Do This\r
        \r
        * Use all of the button related
        board events (up, down), to play a unique sound or song at each event.\r
        *
        Are there any other events you could use to play even more sounds/songs?
      CDU U6 Playground Sound Board_2018_markdown_instruction: |-
        # Sound Board 2.0\r
        \r
        You
        can now play sounds, notes, and songs! With this new knowledge, you can even
        turn your board into a sound board.\r
        \r
        In the toolbox you have all of
        the buzzer and led-related blocks at your disposal. See what cool stuff you
        can come up with!\r
        \r
        # Do This\r
        \r
        * Use all of the button related
        board events (up, down), to play a unique sound or song at each event.\r
        *
        Are there any other events you could use to play even more sounds/songs?
      CSD - Predict - Array Length List Printing_markdown_instruction: |-
        # For Loop
        - Using List Length in For Loop\r
        \r
        One of the most common ways that for
        loops are used is with lists. In this example the condition is dependent on
        list. \r
        \r
        What will this print in the console?
      CSD - Predict List Accessing_markdown_instruction: |
        # Predict\r
        \r
        The code
        below has 4 things it will log to the console. What do you think will print
        in the console as a result of this code?\r
      CSD - for loop - on off_markdown_instruction: |-
        # For Loops with Color LEDs\r
        \r
        For
        loops can make doing something to all the `colorLed`s easier. \r
        \r
        **Starter
        Program:** There are two buttons one to turn all the `colorLeds` on and one
        to turn them all off. \r
        \r
        Can you fill in the functions for each of these
        task using a for loop to write your algorithm.
      CSD For Loops - Check For Understanding_markdown_instruction: |
        # Check In\r
        \r
        In
        the box below explain the 3 different parts of the for loop. Why is each important?\r
      CSD Hackathon Pt 1_markdown_instruction: |-
        # MS Hackathon: Fancy Drawing\r
        \r
        The
        blocks you've been provided are those that a student in CS Discoveries would
        likely have available after a week or so of using Game Lab. No sprites yet,
        but you've **just been introduced to some powerful programming constructs
        like generating random numbers, storing values in a variable, and looping.**
        You'll also be pretty familiar with the drawing commands at this point.\r
        \r
        #
        Do This\r
        \r
        * Using only the tools provided to you, **make something awesome!!**\r
        *
        The likely project at this point would be an **animated card** but feel free
        to go other directions if you like.\r
        * **Avoid complex variable arithmetic**
        if you can. You "don't know it" yet.\r
        * **Avoid referencing the iterator
        in your for loops**. At this point it's just a repeat loop.
      CSD Hackathon Pt 2_markdown_instruction: |-
        # MS Hackathon: Sprites and Interactivity\r
        \r
        You
        now can **create sprites, add images, manipulate their properties, and perform
        simple variable arithmetic to update their values (e.g. `sprite.scale = sprite.scale
        + 1;`)**. You've also been introduced to conditional statements and know
        how to use them to get some interactive behavior with the mouse and keyboard.\r
        \r
        #
        Do This\r
        \r
        * Using only the tools provided to you **make something awesome!**\r
        *
        The likely target project here might be a **simple game** or **interactive
        visualization**.\r
        * You don't yet know about **groups, loops, collisions**,
        or more magical properties like **velocity or rotationSpeed**\r
        \r
        **These
        commands are not in the block palette but feel free to use**\r
        \r
        * `mySprite.mouseActive
        = true;` will make your sprite track mouse events\r
        * `mySprite.mouseIsOver`
        and `mySprite.mouseIsPressed` are booleans you can now use to sense mouse-to-sprite
        interactions.\r
        \r
        **To add sprites to images follow the pattern below**\r
        \r
        ```\r
        var
        spriteImage, sprite;\r
        \r
        //You'll need to create a preload function to
        load the image.\r
        function preload(){\t\t\t\r
            spriteImage = loadImage("imageURL");\r
        }\r
        \r
        //Create
        your sprite and add the image\r
        function setup(){\r
            sprite = createSprite(200,200,10,10);\r
            sprite.addImage("someName",
        spriteImage);\r
        }\r
        \r
        //Draw your sprites.\r
        function draw(){\r
        \tbackground(255,255,255);\r
        \tdrawSprites();\r
        }\r
        ```
      CSD Hackathon Week 1_markdown_instruction: |-
        # MS Hackathon: Fancy Drawing\r
        \r
        The
        blocks you've been provided are those that a student in CS Discoveries would
        likely have available after a week or so of using Game Lab. No sprites yet,
        but you've **just been introduced to some powerful programming constructs
        like generating random numbers, storing values in a variable, and looping.**
        You'll also be pretty familiar with the drawing commands at this point.\r
        \r
        #
        Do This\r
        \r
        * Using only the tools provided to you, **make something awesome!!**\r
        *
        The likely project at this point would be an **animated card** but feel free
        to go other directions if you like.\r
        * **Avoid complex variable arithmetic**
        if you can. You "don't know it" yet.\r
        * **Avoid referencing the iterator
        in your for loops**. At this point it's just a repeat loop.
      CSD Hackathon Week 2_markdown_instruction: |-
        # MS Hackathon: Sprites and Interactivity\r
        \r
        You
        now can **create sprites, add images, manipulate their properties, and perform
        simple variable arithmetic to update their values (e.g. `sprite.scale = sprite.scale
        + 1;`)**. You've also been introduced to conditional statements and know
        how to use them to get some interactive behavior with the mouse and keyboard.\r
        \r
        #
        Do This\r
        \r
        * Using only the tools provided to you **make something awesome!**\r
        *
        The likely target project here might be a **simple game** or **interactive
        visualization**.\r
        * You don't yet know about **groups, loops, collisions**,
        or more magical properties like **velocity or rotationSpeed**\r
        \r
        **These
        commands are not in the block palette but feel free to use**\r
        \r
        * `mySprite.mouseActive
        = true;` will make your sprite track mouse events\r
        * `mySprite.mouseIsOver`
        and `mySprite.mouseIsPressed` are booleans you can now use to sense mouse-to-sprite
        interactions.\r
        \r
        **To add sprites to images follow the pattern below**\r
        \r
        ```\r
        var
        spriteImage, sprite;\r
        \r
        //You'll need to create a preload function to
        load the image.\r
        function preload(){\t\t\t\r
            spriteImage = loadImage("imageURL");\r
        }\r
        \r
        //Create
        your sprite and add the image\r
        function setup(){\r
            sprite = createSprite(200,200,10,10);\r
            sprite.addImage("someName",
        spriteImage);\r
        }\r
        \r
        //Draw your sprites.\r
        function draw(){\r
        \tbackground(255,255,255);\r
        \tdrawSprites();\r
        }\r
        ```
      CSD U1 - Image Filter Demo show Binary_markdown_instruction: |-
        # Oh Noes\r
        This
        tree should be green, but it's blue instead. Can you use the filter blocks
        to change all of the blue pixels to green?
      CSD U1 - Image Filter Demo_markdown_instruction: |-
        # Oh Noes\r
        This tree should
        be green, but it's blue instead. Can you use the filter blocks to change
        all of the blue pixels to green?
      CSD U1 - PixFilter 1x1 Filter_markdown_instruction: |
        # Filtering Images\r
        If
        you've ever used Instragram you've probably encountered an image filter.
        Image filters read in each pixel, process it in some way, and the return the
        filtered pixel. In this tool we're going to start by filtering just a single
        pixel before moving on to a full image.\r
        \r
        You’ll notice there are three
        drop downs under the picture. A red replace, a green replace, and a blue replace.
        Next to it are drop downs for the colors. How many bits are we working with?
        Yes, we’re working with 3. We also learned that the bits control the colors.
        First bit controls R, second bit controls G, third bit controls B.\r
        \r
        \r
        #
        Do This\r
        Try changing the color drop downs next to replace. Based on how
        the bits change, can you formulate what replace is doing? Talk to your partner
        and see if you can figure it out.\r
        \r
      CSD U1 - PixFilter 1x1 intro_markdown_instruction: |
        # 3 Bit Colors\r
        Each
        pixel is a square on a screen that emits light. Each pixel can have a certain
        number of bits assigned to it, and bits per pixel determine the colors that
        can be rendered.\r
        \r
        In this tool we're using 3 bits to define the one
        large black pixel. The first bit affects the red tint. The second bit affects
        the green tint. The third bit affects the blue tint.\r
        \r
        # Do This\r
        \r
        *
        Click the "Run" button to start the widget\r
        * Click on the light bulbs
        to turn on or off each color and see what happens to your pixel\r
        * See how
        many different colors you can create with just three bits\r
        * Write down
        the binary associated with each color you come up with\r
      CSD U1 - PixFilter Filter Intro_markdown_instruction: |
        # Filtering Pixels\r
        If
        you've ever used Instagram you've probably encountered an image filter.
        Image filters read in each pixel, process it in some way, and the return the
        filtered pixel. In this tool we're going to start by filtering just a single
        pixel before moving on to a full image.\r
        \r
        # Do This\r
        \r
        * Try changing
        the color drop downs in the Filter section\r
        * Click on the top row of lightbulbs
        in the Diagram section to see how the filter will convert the input (top bulbs)
        to the output (bottom bulbs)\r
        * Look at how the numbers in the Binary section
        reflect changes to the colors\r
        * Based on how the bits change, can you formulate
        what replace is doing? Talk to your partner and see if you can figure it out.\r
        *
        Complete the Level 2 table in your Activity Guide\r
        \r
      CSD U1 - PixFilter Filter Revisit_markdown_instruction: |
        # Combining Filters\r
        Now
        that you've played with filtering a single color channel, it's time to see
        what happens if we filter more than one color.\r
        \r
        # Do This\r
        \r
        * Using
        the color dropdowns in the filter section, build a filter that changes the
        value of more than one color channel\r
        * Click on the top row of lightbulbs
        in the Diagram section to see how the filter will convert the input (top bulbs)
        to the output (bottom bulbs)\r
        * Look at how the numbers in the Binary section
        reflect changes to the colors\r
        * Complete the Level 4 table in your Activity
        Guide\r
        \r
      CSD U1 - PixFilter FreePlay_markdown_instruction: |-
        # Free Play\r
        \r
        Do as
        you will, make something awesome
      CSD U1 - PixFilter Full_markdown_instruction: "# Instructions Go Here"
      CSD U1 - PixFilter Mario_markdown_instruction: |
        # Combining Filters\r
        \r
        Sometimes
        you'll need to filter more than one pixel to get the color change that you
        want.\r
        \r
        # Do This\r
        Check out Mario, he's lookin' pretty good in his
        red hat and overalls. Your job it to set up the filter so he looks like Luigi,
        with a green hat and overalls.\r
        \r
        * First, determine which bit(s) needs
        to change in order to the change you want\r
        * Once you've figured out which
        bit needs changing, set the filter dropdown appropriately\r
        * After you've
        got the filter working so that, try to come up with other filters that change
        *only* his hat and overalls - how many different clothing colors can you come
        up with?\r
        \r
        _How many tries did it take you to find the right filter?_\r
        \r
        \r
        \r
      CSD U1 - PixFilter Mushroom_markdown_instruction: |
        # Filtering Images\r
        Now
        that we've seen how a single pixel can be filtered to change its color, let's
        try applying a filter to an image made of multiple pixels. The filter you
        create will be applied to each pixel in the image - and you still have the
        light bulbs available to experiment with how your filter will work with individual
        colors.\r
        \r
        \r
        # Do This\r
        Here's a picture of a red mushroom - you're
        going to try and turn it into a yellow mushroom.\r
        \r
        * First, determine
        which bit needs to change in order to turn red into yellow\r
        * Once you've
        figured out which bit needs changing, use the filter dropdowns to make all
        of the red areas turn yellow\r
        * After you've got the filter working so
        that the red has turned yellow, see if you can come up with filters that turn
        the mushroom other colors\r
        \r
        _How many tries did it take you to find the
        right filter?_\r
        \r
        \r
        \r
      CSD U1 - PixFilter UnFilter_markdown_instruction: |
        # UnFiltering\r
        \r
        Bit
        filters can be used to _undo_ filtering as well. Here's an image of a bird
        that's been filtered from it's original colors. Can you get it back to normal?\r
        \r
        #
        Do This\r
        \r
        <img src="https://images.code.org/c15636bda16e8792c59ac955332e37a5-image-1471372091393.22.56.png"
        style="float:right; width: 200px"/>\r
        Here's what our bird should look
        like. Use the filter to get him back to normal.\r
        \r
        * Decide which colors
        (and so which bits) you need to change. You might need to write your thoughts
        with pencil and paper.\r
        * Once you know which bits need changing, set the
        filter dropdown appropriately to test your answer\r
        * After you've fixed
        the image, write down both your process and your final filter in the Level
        6 section of your Activity Guide\r
        \r
        _How many tries did it take you to
        find the right filter?_\r
      CSD U1 - Single Pixel_markdown_instruction: |
        # 3 Bit Colors\r
        Each pixel is
        a square on a screen that emits light. Each pixel can have a certain number
        of bits assigned to it, and bits per pixel determine the colors that can be
        rendered.\r
        \r
        In this tool we're using 3 bits to define the one large
        blue pixel pixel. The first bit affects the red tint. The second bit affects
        the green tint. The third bit affects the blue tint.\r
        \r
        # Do This\r
        \r
        *
        Click on the light bulbs to turn on or off each color and see what happens
        to your pixel\r
        * See how many different colors you can create with just
        three bits\r
      CSD U2  layout style body_markdown_instruction: |-
        <div style="float: right;
        height: 150px; width: 400px; overflow-y: scroll; margin-left: 20px;">\r
        <details>\r
        <summary>**What
        is a CSS rule-set?**</summary>\r
        Blah blah answer\r
        </details>\r
        <details>\r
        <summary>**What
        is a selector?**</summary>\r
        blah blah answer\r
        </details>\r
        <details>\r
        <summary>**What
        is a declaration block?**</summary>\r
        blah blah answer\r
        </details>\r
        <details>\r
        <summary>**what
        is a property-value pair?**</summary>\r
        blah blah answer\r
        </details>\r
        <details>\r
        <summary>**How
        do I create a new rule-set?**</summary>\r
        blah blah answer\r
        </details>\r
        <details>\r
        <summary>**Why
        is the "style.css" file in a different language?**</summary>\r
        blah blah
        answer\r
        </details>\r
        <details>\r
        <summary>**Why is the "style.css" file
        in a different language?**</summary>\r
        blah blah answer\r
        </details>\r
        <details>\r
        <summary>**Why
        is the "style.css" file in a different language?**</summary>\r
        blah blah
        answer\r
        </details>\r
        <details>\r
        <summary>**Why is the "style.css" file
        in a different language?**</summary>\r
        blah blah answer\r
        </details>\r
        <details>\r
        <summary>**Why
        is the "style.css" file in a different language?**</summary>\r
        blah blah
        answer\r
        </details>\r
        </div>\r
        # The Body Element\r
        \r
        * Find the `body`
        rule-set in "style.css"\r
        * Discuss with a partner what you think will
        happen if you add `text-align`, `color`, or other text properties to the `body`
        rule set.\r
        * Try out some different properties to check your guesses.
      CSD U2  layout style textalign_markdown_instruction: |-
        <div style="float: right;
        height: 150px; width: 400px; overflow-y: scroll; margin-left: 20px;">\r
        <details>\r
        <summary>**What
        is a CSS rule-set?**</summary>\r
        Blah blah answer\r
        </details>\r
        <details>\r
        <summary>**What
        is a selector?**</summary>\r
        blah blah answer\r
        </details>\r
        <details>\r
        <summary>**What
        is a declaration block?**</summary>\r
        blah blah answer\r
        </details>\r
        <details>\r
        <summary>**what
        is a property-value pair?**</summary>\r
        blah blah answer\r
        </details>\r
        <details>\r
        <summary>**How
        do I create a new rule-set?**</summary>\r
        blah blah answer\r
        </details>\r
        <details>\r
        <summary>**Why
        is the "style.css" file in a different language?**</summary>\r
        blah blah
        answer\r
        </details>\r
        <details>\r
        <summary>**Why is the "style.css" file
        in a different language?**</summary>\r
        blah blah answer\r
        </details>\r
        <details>\r
        <summary>**Why
        is the "style.css" file in a different language?**</summary>\r
        blah blah
        answer\r
        </details>\r
        <details>\r
        <summary>**Why is the "style.css" file
        in a different language?**</summary>\r
        blah blah answer\r
        </details>\r
        <details>\r
        <summary>**Why
        is the "style.css" file in a different language?**</summary>\r
        blah blah
        answer\r
        </details>\r
        </div>\r
        # Text Align\r
        \r
        * Find the `text-align`
        property in "style.css" in the `p` rule-set.\r
        * Change the text-align
        value to `center` or `right`.\r
        * Add a `text-align` rule in the `body` rule
        set
      CSD U2 CSS explore CSS_markdown_instruction: |-
        <div style="float: right; height:
        250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px"
        markdown="1">\r
        <details>\r
        <summary>**How do I switch between files?**</summary>\r
        Click
        the name of the file you want to look at in the menu on the left side of the
        screen.\r
        </details>\r
        </div>\r
        \r
        # Adding Style\r
        \r
        This Web Lab
        project is using a new language to add style to the page. With a partner explore
        both the `index.html` and `style.css` files. Be ready to discuss the following
        questions.\r
        \r
        * What changes is this new language making to the page?\r
        *
        How is this language different from HTML?\r
        * How are the `index.html` and
        `style.css` files connected?
      CSD U2 CSS explore CSS_2018_markdown_instruction: |-
        <div style="float: right;
        height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px"
        markdown="1">\r
        <details>\r
        <summary>**How do I switch between files?**</summary>\r
        Click
        the name of the file you want to look at in the menu on the left side of the
        screen.\r
        </details>\r
        </div>\r
        \r
        # Adding Style\r
        \r
        This Web Lab
        project is using a new language to add style to the page. With a partner explore
        both the `index.html` and `style.css` files. Be ready to discuss the following
        questions.\r
        \r
        * What changes is this new language making to the page?\r
        *
        How is this language different from HTML?\r
        * How are the `index.html` and
        `style.css` files connected?
      CSD U2 Debugging 1_markdown_instruction: |
        # Debugging\r
        <div style="float:
        right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px"
        markdown="1">\r
        <details>\r
        <summary>**What is a bug?**</summary>\r
        Bugs
        are mistakes in code which causes it not to work as planned.\r
        </details>\r
        <details>\r
        <summary>**What
        is debugging?**</summary>\r
        Debugging is the process of finding and fixing
        bugs.  Debugging is a problem solving process so use your problem solving
        steps as you try to debug. \r
        </details>\r
        <details>\r
        <summary>**What
        are some examples of bugs?**</summary>\r
        Bugs can be anything that causes
        code not to work as planned.  Some examples are misspelling, putting code
        in the wrong place, using the wrong tag, or forgetting to close a tag.\r
        </details>\r
        </div>\r
        \r
        Computer
        code is written by humans, and all humans make mistakes. Part of being a good
        computer scientist is finding your mistakes and fixing them. In computer science
        we call mistakes **bugs**. The process of finding and fixing those bugs is
        called **debugging**.  Over the next couple levels you are going to work on
        your debugging skills.\r
        \r
        # Do This\r
        \r
        <img src="https://images.code.org/9c4d90a5a8293c5aee56e6cb81dae689-image-1500915264278.52.56
        AM.png" style="float:right;border:black solid 5px;">\r
        \r
        * Look at the
        web page code, and discuss with your partner what is causing the following
        two bugs:\r
        \t* The heading is not big enough.\r
        \t* The second item on
        the list doesn't have a number.\r
        * Fix all the bugs in the code so that
        the final result matches the image on the right.\r
      CSD U2 Debugging 1_2018_markdown_instruction: |
        # Debugging\r
        <div style="float:
        right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px"
        markdown="1">\r
        <details>\r
        <summary>**What is a bug?**</summary>\r
        Bugs
        are mistakes in code which causes it not to work as planned.\r
        </details>\r
        <details>\r
        <summary>**What
        is debugging?**</summary>\r
        Debugging is the process of finding and fixing
        bugs.  Debugging is a problem solving process so use your problem solving
        steps as you try to debug. \r
        </details>\r
        <details>\r
        <summary>**What
        are some examples of bugs?**</summary>\r
        Bugs can be anything that causes
        code not to work as planned.  Some examples are misspelling, putting code
        in the wrong place, using the wrong tag, or forgetting to close a tag.\r
        </details>\r
        </div>\r
        \r
        Computer
        code is written by humans, and all humans make mistakes. Part of being a good
        computer scientist is finding your mistakes and fixing them. In computer science
        we call mistakes **bugs**. The process of finding and fixing those bugs is
        called **debugging**.  Over the next couple levels you are going to work on
        your debugging skills.\r
        \r
        # Do This\r
        \r
        <img src="https://images.code.org/9c4d90a5a8293c5aee56e6cb81dae689-image-1500915264278.52.56
        AM.png" style="float:right;border:black solid 5px;">\r
        \r
        * Look at the
        web page code, and discuss with your partner what is causing the following
        two bugs:\r
        \t* The heading is not big enough.\r
        \t* The second item on
        the list doesn't have a number.\r
        * Fix all the bugs in the code so that
        the final result matches the image on the right.\r
      CSD U2 Debugging 2_markdown_instruction: |-
        # Debugging\r
        \r
        <div style="float:
        right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px"
        markdown="1">\r
        <details>\r
        <summary>**What is a bug?**</summary>\r
        Bugs
        are mistakes in code which causes it not to work as planned.\r
        </details>\r
        <details>\r
        <summary>**What
        is debugging?**</summary>\r
        Debugging is the process of finding and fixing
        bugs.  Debugging is a problem solving process so use your problem solving
        steps as you try to debug. \r
        </details>\r
        <details>\r
        <summary>**What
        are some examples of bugs?**</summary>\r
        Bugs can be anything that causes
        code not to work as planned.  Some examples are misspelling, putting code
        in the wrong place, using the wrong tag, or forgetting to close a tag.\r
        </details>\r
        </div>\r
        \r
        More
        debugging practice!  This page is a little more challenging to debug than
        the last one.\r
        \r
        # Do This\r
        \r
        <img src="https://images.code.org/61190513dba270c731251df168b98f80-image-1474383960371.02.38
        AM.png" style="float:right;border:5px black solid;width:250px">\r
        \r
        *
        Discuss with your partner what you think the bugs are in this page.\r
        * Find
        and fix all the bugs so that your page matches the one on the right.
      CSD U2 Debugging 2_2018_markdown_instruction: |-
        # Debugging\r
        \r
        <div style="float:
        right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px"
        markdown="1">\r
        <details>\r
        <summary>**What is a bug?**</summary>\r
        Bugs
        are mistakes in code which causes it not to work as planned.\r
        </details>\r
        <details>\r
        <summary>**What
        is debugging?**</summary>\r
        Debugging is the process of finding and fixing
        bugs.  Debugging is a problem solving process so use your problem solving
        steps as you try to debug. \r
        </details>\r
        <details>\r
        <summary>**What
        are some examples of bugs?**</summary>\r
        Bugs can be anything that causes
        code not to work as planned.  Some examples are misspelling, putting code
        in the wrong place, using the wrong tag, or forgetting to close a tag.\r
        </details>\r
        </div>\r
        \r
        More
        debugging practice!  This page is a little more challenging to debug than
        the last one.\r
        \r
        # Do This\r
        \r
        <img src="https://images.code.org/61190513dba270c731251df168b98f80-image-1474383960371.02.38
        AM.png" style="float:right;border:5px black solid;width:250px">\r
        \r
        *
        Discuss with your partner what you think the bugs are in this page.\r
        * Find
        and fix all the bugs so that your page matches the one on the right.
      CSD U2 Debugging 3_markdown_instruction: |-
        # Debugging\r
        <div style="float:
        right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px"
        markdown="1">\r
        <details>\r
        <summary>**What is a bug?**</summary>\r
        Bugs
        are mistakes in code which causes it not to work as planned.\r
        </details>\r
        <details>\r
        <summary>**What
        is debugging?**</summary>\r
        Debugging is the process of finding and fixing
        bugs.  Debugging is a problem solving process so use your problem solving
        steps as you try to debug. \r
        </details>\r
        <details>\r
        <summary>**What
        are some examples of bugs?**</summary>\r
        Bugs can be anything that causes
        code not to work as planned.  Some examples are misspelling, putting code
        in the wrong place, using the wrong tag, or forgetting to close a tag.\r
        </details>\r
        <details>\r
        <summary>**Why
        does the inspector sometimes stop working?**</summary>\r
        Sometimes there
        are so many bugs in the HTML that the inspector cannot read the code properly
        and it stops working completely, even on the parts of the code that are correct.  Once
        the bugs are corrected, the inspector will work again.\r
        </details>\r
        </div>\r
        \r
        This
        page has images in it. Images make finding bugs a little more tricky. Can
        you debug this page?\r
        \r
        # Do This\r
        \r
        * Discuss with your partner what
        is causing the bugs in this page.\r
        * Fix the bugs so that your page matches
        the target page shown below.\r
        \r
        ![](https://images.code.org/4a9ac71bcf6c04775df791516562cd47-image-1508779270522.56.24
        AM.png)
      CSD U2 Debugging 3_2018_markdown_instruction: |-
        # Debugging\r
        <div style="float:
        right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px"
        markdown="1">\r
        <details>\r
        <summary>**What is a bug?**</summary>\r
        Bugs
        are mistakes in code which causes it not to work as planned.\r
        </details>\r
        <details>\r
        <summary>**What
        is debugging?**</summary>\r
        Debugging is the process of finding and fixing
        bugs.  Debugging is a problem solving process so use your problem solving
        steps as you try to debug. \r
        </details>\r
        <details>\r
        <summary>**What
        are some examples of bugs?**</summary>\r
        Bugs can be anything that causes
        code not to work as planned.  Some examples are misspelling, putting code
        in the wrong place, using the wrong tag, or forgetting to close a tag.\r
        </details>\r
        <details>\r
        <summary>**Why
        does the inspector sometimes stop working?**</summary>\r
        Sometimes there
        are so many bugs in the HTML that the inspector cannot read the code properly
        and it stops working completely, even on the parts of the code that are correct.  Once
        the bugs are corrected, the inspector will work again.\r
        </details>\r
        </div>\r
        \r
        This
        page has images in it. Images make finding bugs a little more tricky. Can
        you debug this page?\r
        \r
        # Do This\r
        \r
        * Discuss with your partner what
        is causing the bugs in this page.\r
        * Fix the bugs so that your page matches
        the target page shown below.\r
        \r
        ![](https://images.code.org/4a9ac71bcf6c04775df791516562cd47-image-1508779270522.56.24
        AM.png)
      CSD U2 Debugging 4_markdown_instruction: |-
        # Formatting\r
        <div style="float:
        right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px"
        markdown="1">\r
        <details>\r
        <summary>**What is whitespace?**</summary>\r
        Whitespace
        refers to any character that shows up as a blank space on the screen, such
        as a space, a tab, or a new line. Whitespace helps separate different parts
        of the document to make it easier to read.  For example, in HTML code new
        elements are usually put on a new line, even though it doesn't make any difference
        in how the page is displayed.\r
        </details>\r
        <details>\r
        <summary>**What
        is indentation?**</summary>\r
        Indentation is the placement of text farther
        to the right, or left, to separate it from surrounding text.  Indentation
        helps to convey the program's structure.  In HTML, elements that are inside
        other elements are usually indented.  Here is an example:\r
        <pre>\r
           &lt;body&gt;\r
              &lt;p&gt;This
        paragraph is inside the "body" element.&lt;/p&gt;\r
           &lt;/body&gt;\r
        </pre>\r
        \r
        </details>\r
        <details>\r
        <summary>**What
        is formatting?**</summary>\r
        Formatting is arranging text in a way that makes
        it easier to understand.  HTML is usually formatted using indentation.  That
        means that elements that are inside other elements are further to the right
        in code.  Here is an example:\r
        <pre>\r
           &lt;body&gt;\r
              &lt;p&gt;This
        paragraph is inside the "body" element.&lt;/p&gt;\r
           &lt;/body&gt;\r
        </pre>\r
        </details>\r
        <details>\r
        <summary>**Why
        does the inspector sometimes stop working?**</summary>\r
        Sometimes there
        are so many bugs in the HTML that the inspector cannot read the code properly
        and it stops working completely, even on the parts of the code that are correct.  Once
        the bugs are corrected, the inspector will work again.\r
        </details>\r
        </div>\r
        \r
        The
        way that you write your code can make it easier or harder to find bugs.  If
        you use **whitespace** and **indentation**, it will make it easier to read
        and easier to fix.\r
        \r
        # Do This\r
        \r
        * Look at the code with your partner
        and discuss how you should format the code to make it easier to read.\r
        *
        Make the code easier to read by adding new lines and indentation.\r
        * Fix
        all the bugs so that your page matches the target page below.\r
        \r
        ![](https://images.code.org/7e194db101f71235340fc075bf09776c-image-1508777739384.46.13
        AM.png)
      CSD U2 Debugging 4_2018_markdown_instruction: |-
        # Formatting\r
        <div style="float:
        right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px"
        markdown="1">\r
        <details>\r
        <summary>**What is whitespace?**</summary>\r
        Whitespace
        refers to any character that shows up as a blank space on the screen, such
        as a space, a tab, or a new line. Whitespace helps separate different parts
        of the document to make it easier to read.  For example, in HTML code new
        elements are usually put on a new line, even though it doesn't make any difference
        in how the page is displayed.\r
        </details>\r
        <details>\r
        <summary>**What
        is indentation?**</summary>\r
        Indentation is the placement of text farther
        to the right, or left, to separate it from surrounding text.  Indentation
        helps to convey the program's structure.  In HTML, elements that are inside
        other elements are usually indented.  Here is an example:\r
        <pre>\r
           &lt;body&gt;\r
              &lt;p&gt;This
        paragraph is inside the "body" element.&lt;/p&gt;\r
           &lt;/body&gt;\r
        </pre>\r
        \r
        </details>\r
        <details>\r
        <summary>**What
        is formatting?**</summary>\r
        Formatting is arranging text in a way that makes
        it easier to understand.  HTML is usually formatted using indentation.  That
        means that elements that are inside other elements are further to the right
        in code.  Here is an example:\r
        <pre>\r
           &lt;body&gt;\r
              &lt;p&gt;This
        paragraph is inside the "body" element.&lt;/p&gt;\r
           &lt;/body&gt;\r
        </pre>\r
        </details>\r
        <details>\r
        <summary>**Why
        does the inspector sometimes stop working?**</summary>\r
        Sometimes there
        are so many bugs in the HTML that the inspector cannot read the code properly
        and it stops working completely, even on the parts of the code that are correct.  Once
        the bugs are corrected, the inspector will work again.\r
        </details>\r
        </div>\r
        \r
        The
        way that you write your code can make it easier or harder to find bugs.  If
        you use **whitespace** and **indentation**, it will make it easier to read
        and easier to fix.\r
        \r
        # Do This\r
        \r
        * Look at the code with your partner
        and discuss how you should format the code to make it easier to read.\r
        *
        Make the code easier to read by adding new lines and indentation.\r
        * Fix
        all the bugs so that your page matches the target page below.\r
        \r
        ![](https://images.code.org/7e194db101f71235340fc075bf09776c-image-1508777739384.46.13
        AM.png)
      CSD U2 Debugging comments_markdown_instruction: |-
        # Debugging\r
        \r
        This page
        has images in it. Images make finding bugs a little more tricky. Can you debug
        this page?\r
        \r
        As you are debugging you may notice a new set of symbols
        that look something like this:\r
        <pre>\r
        &lt;!-- this is a comment --&gt;\r
        </pre>\r
        \r
        This
        is a **comment**. Comments are written by computer scientists creating web
        pages for themselves and other humans who might look at their HTML file. Comments
        explain the different parts of the code and what it should create.  Comments
        might help you debug.\r
        \r
        # Do This\r
        \r
        * Find and fix all bugs in the
        starting HTML\r
        * You know you’ve found all of the bugs when your page matches
        the <a href="https://thimbleprojects.org/danimcavoy/103295/" target="_blank">
        Target Page</a>.
      CSD U2 HTML Add Content_markdown_instruction: |-
        # Adding Content\r
        \r
        Start
        creating your first web page! Try to create a page with a title and two paragraphs.\r
        \r
        #
        Do This\r
        \r
        * Write a sentence about your favorite animal\r
        * On a separate
        line write another sentence about your least favorite animal.\r
        * Above both
        sentences try adding a title that says "Animals"\r
        * Don't forget to click
        <img src="https://images.code.org/6a35d13b10ed2029a9323c9cb555e39e-image-1477681291001.01.12
        PM.png" style="width:100px">\r
        * **What do you notice about the structure
        of your content?**
      CSD U2 HTML Adding Paragraphs Template_markdown_instruction: |
        # Add Text to
        the Body\r
        \r
        When you start any Web Lab project it will automatically add
        `<!DOCTYPE>`, `<html>`, `<head>`, and `<body>` tags to your project. When
        you add content to your projects you'll need to do it between the `<body>`
        and `</body>` tags since it should be part of the body of your webpage.\r
        \r
        #
        Do This\r
        \r
        * Write three separate sentences about any topic you like inside
        of the body tags of your web page\r
        * Hit "Refresh and Save" if you don't
        see the changes in the Preview area\r
        * Compare your work with a neighbor.
        Make sure you're placing code in the same place.\r
      CSD U2 HTML Adding Paragraphs Template_2018_markdown_instruction: |
        # Add Text
        to the Body\r
        \r
        When you start any Web Lab project it will automatically
        add `<!DOCTYPE>`, `<html>`, `<head>`, and `<body>` tags to your project. When
        you add content to your projects you'll need to do it between the `<body>`
        and `</body>` tags since it should be part of the body of your webpage.\r
        \r
        #
        Do This\r
        \r
        * Write three separate sentences about any topic you like inside
        of the body tags of your web page\r
        * Hit "Refresh and Save" if you don't
        see the changes in the Preview area\r
        * Compare your work with a neighbor.
        Make sure you're placing code in the same place.\r
      CSD U2 HTML Adding Paragraphs pt 2_markdown_instruction: |-
        <div style="float:
        right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px"
        markdown="1">\r
        <details>\r
        <summary>**What is a paragraph element?**</summary>\r
        Paragraphs
        are marked by opening(`<p>`) and closing(`</p>`) tags. Paragraphs in HTML
        can be any length of text from one word to a bunch of sentences. Paragraphs
        group together sets of sentences and put some space between that group of
        text and the next group of text.\r
        </details>\r
        <details>\r
        <summary>**How
        do I make multiple paragraphs?**</summary>\r
        Here's an example of several
        paragraph tags in a row. This code would be placed inside of the body of your
        web page.\r
        \r
        <pre>\r
        `<p>This is a paragraph. It has two sentences.</p>`\r
        `<p>This
        is another paragraph.</p>`\r
        </pre>\r
        \r
        </details>\r
        \r
        </div>\r
        \r
        #
        Use Paragraph Tags\r
        \r
        The `<p>` tag or "paragraph" tag is placed around
        text to indicate that it is part of a paragraph. Placing text in a paragraph
        tag lets the computer know that it should be displayed differently, usually
        just by spacing it out from other text.\r
        \r
        # Do This\r
        \r
        * Place the
        text you just wrote inside at least two separate paragraphs by surrounding
        it with `<p>` and `</p>` tags\r
        * Compare the results with a neighbor. What
        has changed about the way your text is displayed?
      CSD U2 HTML Adding Paragraphs pt 2_2018_markdown_instruction: |-
        <div style="float:
        right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px"
        markdown="1">\r
        <details>\r
        <summary>**What is a paragraph element?**</summary>\r
        Paragraphs
        are marked by opening(`<p>`) and closing(`</p>`) tags. Paragraphs in HTML
        can be any length of text from one word to a bunch of sentences. Paragraphs
        group together sets of sentences and put some space between that group of
        text and the next group of text.\r
        </details>\r
        <details>\r
        <summary>**How
        do I make multiple paragraphs?**</summary>\r
        Here's an example of several
        paragraph tags in a row. This code would be placed inside of the body of your
        web page.\r
        \r
        <pre>\r
        `<p>This is a paragraph. It has two sentences.</p>`\r
        `<p>This
        is another paragraph.</p>`\r
        </pre>\r
        \r
        </details>\r
        \r
        </div>\r
        \r
        #
        Use Paragraph Tags\r
        \r
        The `<p>` tag or "paragraph" tag is placed around
        text to indicate that it is part of a paragraph. Placing text in a paragraph
        tag lets the computer know that it should be displayed differently, usually
        just by spacing it out from other text.\r
        \r
        # Do This\r
        \r
        * Place the
        text you just wrote inside at least two separate paragraphs by surrounding
        it with `<p>` and `</p>` tags\r
        * Compare the results with a neighbor. What
        has changed about the way your text is displayed?
      CSD U2 HTML Adding Paragraphs_markdown_instruction: |
        # Add Text to the Body\r
        \r
        When
        you start any Web Lab project, it will automatically add `<!DOCTYPE>`, `<html>`,
        `<head>`, and `<body>` tags to your project. When you add content to your
        projects, you'll need to do it between the `<body>` and `</body>` tags because
        it should be part of the body of your webpage.\r
        \r
        # Do This\r
        \r
        * Write
        three separate sentences about any topic you like inside of the body tags
        of your web page.\r
        * Hit "Refresh and Save" if you don't see the changes
        in the preview area.\r
        * Compare your work with a neighbor. Make sure you're
        placing code in the same place.\r
      CSD U2 HTML Adding Paragraphs_2018_markdown_instruction: |
        # Add Text to the
        Body\r
        \r
        When you start any Web Lab project, it will automatically add
        `<!DOCTYPE>`, `<html>`, `<head>`, and `<body>` tags to your project. When
        you add content to your projects, you'll need to do it between the `<body>`
        and `</body>` tags because it should be part of the body of your webpage.\r
        \r
        #
        Do This\r
        \r
        * Write three separate sentences about any topic you like inside
        of the body tags of your web page.\r
        * Hit "Refresh and Save" if you don't
        see the changes in the preview area.\r
        * Compare your work with a neighbor.
        Make sure you're placing code in the same place.\r
      CSD U2 HTML Debug Paragraphs_markdown_instruction: |-
        <div style="float: right;
        height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px"
        markdown="1">\r
        <details>\r
        <summary><strong>What is a paragraph element?</strong></summary>\r
        Paragraphs
        are marked by opening( `<p>` ) and closing( `</p>` ) tags. Paragraphs in HTML
        can be any length of text from one word to a bunch of sentences. Paragraphs
        group together sets of sentences and put some space between that group of
        text and the next group of text.\r
        </details>\r
        <details>\r
        <summary><strong>Why
        does HTML seem to work even when it's broken?</strong></summary>\r
        HTML
        is read by your web browser to generate web pages. Since people often make
        little mistakes when writing their web pages, browsers are programmed to make
        a best guess of what you intended to do. Sometimes different browsers are
        even programmed to make different guesses! The only way to ensure your code
        looks like you intend is make sure you're always using tags correctly.\r
        </details>\r
        <details>\r
        <summary><strong>Why
        does the code sometimes turn pink?</strong></summary>\r
        Web Lab is programmed
        to automatically detect some mistakes in HTML.  When it notices a mistake,
        it turns that code pink.  The mistake might be in pink, or it might be somewhere
        before the pink code.  You'll need to carefully debug to find your mistake.\r
        </details>\r
        </div>\r
        \r
        #
        Debug: Fix the Broken Tags\r
        \r
        This simple web page has some issues which
        are preventing the content from being displayed correctly. Identify and fix
        the issues. This practice is also called "debugging" your code.\r
        \r
        #
        Do This\r
        \r
        * Fix the broken code so that the web page displays correctly\r
        *
        Compare the problems you fixed with a neighbor
      CSD U2 HTML Debug Paragraphs_2018_markdown_instruction: |-
        <div style="float:
        right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px"
        markdown="1">\r
        <details>\r
        <summary><strong>What is a paragraph element?</strong></summary>\r
        Paragraphs
        are marked by opening( `<p>` ) and closing( `</p>` ) tags. Paragraphs in HTML
        can be any length of text from one word to a bunch of sentences. Paragraphs
        group together sets of sentences and put some space between that group of
        text and the next group of text.\r
        </details>\r
        <details>\r
        <summary><strong>Why
        does HTML seem to work even when it's broken?</strong></summary>\r
        HTML
        is read by your web browser to generate web pages. Since people often make
        little mistakes when writing their web pages, browsers are programmed to make
        a best guess of what you intended to do. Sometimes different browsers are
        even programmed to make different guesses! The only way to ensure your code
        looks like you intend is make sure you're always using tags correctly.\r
        </details>\r
        <details>\r
        <summary><strong>Why
        does the code sometimes turn pink?</strong></summary>\r
        Web Lab is programmed
        to automatically detect some mistakes in HTML.  When it notices a mistake,
        it turns that code pink.  The mistake might be in pink, or it might be somewhere
        before the pink code.  You'll need to carefully debug to find your mistake.\r
        </details>\r
        </div>\r
        \r
        #
        Debug: Fix the Broken Tags\r
        \r
        This simple web page has some issues which
        are preventing the content from being displayed correctly. Identify and fix
        the issues. This practice is also called "debugging" your code.\r
        \r
        #
        Do This\r
        \r
        * Fix the broken code so that the web page displays correctly\r
        *
        Compare the problems you fixed with a neighbor
      CSD U2 Header Demo_markdown_instruction: |-
        # Headers\r
        \r
        <div style="float:
        right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px"
        markdown="1">\r
        <details>\r
        <summary>**What are headers?**</summary>\r
        Headers
        are the different sized section titles throughout a web page. Headers add
        structure to your web page by breaking it up so its easier for a user to read.\r
        </details>\r
        <details>\r
        <summary>**How
        do I make different sized headers?**</summary>\r
        Headers come in 6 different
        sizes. So far you have primarily used the biggest one &lt;h1&gt;. The number
        1 in the HTML tag designates that this is the biggest header. The smallest
        header is &lt;h6&gt;. You can also try the &lt;h2&gt;, &lt;h3&gt;, &lt;h4&gt;,
        and &lt;h5&gt; tags which get smaller as the number gets larger.\r
        </h1>\r
        </details>\r
        <details>\r
        <summary>**What
        is HTML?**</summary>\r
        HTML stands for Hypertext Markup Language. HTML is
        used to add structure to the content of a web page. HTML uses tags to specify
        where certain structures start and end. These tags are sets of characters
        not found in the English language so that the content and structure can be
        differentiated. \r
        </details>\r
        <details>\r
        <summary>**What is an HTML
        element?**</summary>\r
        An HTML element is a piece of a website that is marked
        by a start tag and sometimes closed with an end tag. The element also includes
        the content inside the tags. For example: \r
        <img src="https://images.code.org/fb4df62aa4d879f7021c567be2e28eea-image-1481135855001.png"
        style="width:500px">\r
        </details>\r
        <details>\r
        <summary>**What is an
        HTML tag?**</summary>\r
        An HTML tag is the special set of characters that
        tells the machine where the start or end of an HTML element is and what type
        it is.\r
        </details>\r
        </div>\r
        \r
        So far, you've organized your content
        into paragraphs.  Another way HTML allows you to organize your code is by
        using **headers**.  A header is a short piece of text that goes at the top
        of a section of content, like a title.\r
        \r
        Do This:\r
        * Find the headers
        in the web page below and use the inspector tool to see that code that makes
        them.\r
        * Make sure you and your partner agree on what the tags do.\r
        *
        Change the code so that "Drawing" and "2 years" match the headers on the
        rest of the page.
      CSD U2 Header Sizes_markdown_instruction: |
        # Header Sizes\r
        \r
        <div style="float:
        right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px"
        markdown="1">\r
        <details>\r
        <summary>**What are headers?**</summary>\r
        Headers
        are the different sized section titles throughout a web page. Headers add
        structure to your web page by breaking it up so its easier for a user to read.\r
        </details>\r
        <details>\r
        <summary>**How
        do I make different sized headers?**</summary>\r
        Headers come in 6 different
        sizes.  The most common header is &lt;h1&gt; The number 1 in the HTML tag
        designates that this is the biggest header. The smallest header is &lt;h6&gt;.
        You can also try the &lt;h2&gt;, &lt;h3&gt;, &lt;h4&gt;, and &lt;h5&gt; tags
        which get smaller as the number gets larger.\r
        </details>\r
        <details>\r
        <summary>**What
        is HTML?**</summary>\r
        HTML stands for Hypertext Markup Language. HTML is
        used to add structure to the content of a web page. HTML uses tags to specify
        where certain structures start and end. These tags are sets of characters
        not found in the English language so that the content and structure can be
        differentiated. \r
        </details>\r
        <details>\r
        <summary>**What is an HTML
        element?**</summary>\r
        An HTML element is a piece of a website that is marked
        by a start tag and sometimes closed with an end tag. The element also includes
        the content inside the tags. For example: \r
        <img src="https://images.code.org/fb4df62aa4d879f7021c567be2e28eea-image-1481135855001.png"
        style="width:500px">\r
        </details>\r
        <details>\r
        <summary>**What is an
        HTML tag?**</summary>\r
        An HTML tag is the special set of characters that
        tells the machine where the start or end of an HTML element is and what type
        it is.\r
        </details>\r
        \r
        </div>\r
        \r
        Headers can come in different sizes.  In
        this page, there are six different sized headers, but they are all mixed up.  Can
        you and your partner figure out how to fix them?\r
        \r
        \r
        \r
        Do This:\r
        *
        Use the inspector tool to figure out what makes the headers different sizes\r
        *
        Make sure you and your partner agree on what the different header tags do.\r
        *
        Change the tags so that the headers are in order from biggest to smallest,
        and the text says the correct size, as in the picture below. \r
        \r
        <img
        src="https://images.code.org/762022f97a355dd63dce5ecc8d0127aa-image-1493161154608.58.15
        PM.png" style="width:100px" style="float:left">\r
      CSD U2 Header Test_markdown_instruction: |
        # Headers and Paragraphs\r
        \r
        <div
        style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left:
        20px; font-size:14px" markdown="1">\r
        <details>\r
        <summary>**What is
        a paragraph element?**</summary>\r
        Paragraphs are marked by opening(`<p>`)
        and closing(`</p>`) tags as well. Paragraphs in HTML can be any length of
        text from one word to a bunch of sentences. All of your text in your web page
        should be contained in an HTML element (headers or paragraphs). Paragraphs
        group together sets of sentences and put some space between that group of
        text and the next group of text.\r
        </details>\r
        <details>\r
        <summary>**How
        do I create multiple paragraphs?**</summary>\r
        Paragraphs are marked by opening(`<p>`)
        and closing(`</p>`) tags as well. To create more than one paragraph you will
        want multiple sets of opening and closing `<p>` tags. For example\r
        <pre>\r
        \t&lt;p&gt;\r
            \tThis
        is a paragraph.\r
            &lt;/p&gt;\r
        \t&lt;p&gt;\r
            \tThis is another
        paragraph.\r
            &lt;/p&gt;\r
        </pre>\r
        </details>\r
        <details>\r
        <summary>**What
        are headers?**</summary>\r
        Headers are the different sized section titles
        throughout a web page. Headers add structure to your web page by breaking
        it up so its easier for a user to read.\r
        </details>\r
        <details>\r
        <summary>**How
        do I make different sized headers?**</summary>\r
        Headers come in 6 different
        sizes. So far you have primarily used the biggest one &lt;h1&gt;. The number
        1 in the HTML tag designates that this is the biggest header. The smallest
        header is &lt;h6&gt;. You can also try the &lt;h2&gt;, &lt;h3&gt;, &lt;h4&gt;,
        and &lt;h5&gt; tags which get smaller as the number gets larger.\r
        </h1>\r
        </details>\r
        <details>\r
        <summary>**What
        is HTML?**</summary>\r
        HTML stands for Hypertext Markup Language. HTML is
        used to add structure to the content of a web page. HTML uses tags to specify
        where certain structures start and end. These tags are sets of characters
        not found in the English language so that the content and structure can be
        differentiated. \r
        </details>\r
        <details>\r
        <summary>**What is an HTML
        element?**</summary>\r
        An HTML element is a piece of a website that is marked
        by a start tag and sometimes closed with an end tag. The element also includes
        the content inside the tags. For example: \r
        <img src="https://images.code.org/fb4df62aa4d879f7021c567be2e28eea-image-1481135855001.png"
        style="width:500px">\r
        </details>\r
        <details>\r
        <summary>**What is an
        HTML tag?**</summary>\r
        An HTML tag is the special set of characters that
        tells the machine where the start or end of an HTML element is and what type
        it is.\r
        </details>\r
        \r
        </div>\r
        \r
        The author of this page added in
        a lot of content, but did not think about structure.  All of the text is mashed
        together.\r
        \r
        Do This:\r
        * Look through the content with your partner
        and decide what you think the best structure should be.\r
        * Use your header
        and paragraph tags to code the structure into the page.\r
      CSD U2 Headers_markdown_instruction: |-
        <div style="float: right; height: 250px;
        width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px">\r
        <details>\r
        <summary>**What
        are headers?**</summary>\r
        Headers are the different sized section titles
        throughout a web page. Headers add structure to your web page by breaking
        it up so its easier for a user to read.\r
        </details>\r
        <details>\r
        <summary>**How
        do I create a header?**</summary>\r
        You can make something a header element
        by surrounding it by header tags.  For example:\r
        <pre> &lt;h1&gt; Header
        Text &lt;/h1&gt; </pre> <br> <br>\r
        \r
        Notice how there is a the opening
        tag (&lt;h1&gt;) and closing tag (&lt;/h1&gt;). The closing tag is the same
        as the opening tag except it has `/` after the opening angle bracket. The
        text you want to show as the header goes in the middle of the two tags.\r
        </details>\r
        <details>\r
        <summary>**What
        is HTML?**</summary>\r
        Stands for Hypertext Markup Language. HTML is used
        to add structure to the content of a web page. HTML uses tags to specify where
        certain structures start and end. These tags are sets of characters not found
        in the English language so that the content and structure can be differentiated.
        \r
        </details>\r
        <details>\r
        <summary>**What is an HTML element?**</summary>\r
        A
        piece of a website. Marked by a start tag and sometimes closed with an end
        tag. Also includes the content of the element as well. For example: \r
        <img
        src="https://images.code.org/fb4df62aa4d879f7021c567be2e28eea-image-1481135855001.png"
        style="width:500px">\r
        </details>\r
        <details>\r
        <summary>**What is an
        HTML tag?**</summary>\r
        The special set of characters that tells the machine
        where the start or end of an HTML element is and what type it is. HTML tags
        add structure to the content of a web page.\r
        </details>\r
        <details>\r
        <summary>**Why
        do you need an opening and closing tag?**</summary>\r
        You need both an opening
        and closing tag for many HTML elements because it marks where that structure
        starts and stops. You don't want all the text on your web page to be a title.\r
        </details>\r
        </div>\r
        \r
        #
        Headers\r
        \r
        You may have noticed on the last level that everything you
        type into the editor is getting smashed together. In order to differentiate
        between these different parts we use HTML elements to mark the different parts
        of a web page. In your investigation with the inspector did you come across
        something that made headers?\r
        \r
        # Do This\r
        \r
        * Make your header "Animals"
        stand out using the `<h1>` header element.
      CSD U2 Heading Demo_markdown_instruction: |-
        # Headings\r
        \r
        <div style="float:
        right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px"
        markdown="1">\r
        <details>\r
        <summary>**What are headings?**</summary>\r
        Headings
        are the different sized section titles throughout a web page. Headings add
        structure to your web page by breaking it up so its easier for a user to read.\r
        </details>\r
        <details>\r
        <summary>**How
        do I make different sized headings?**</summary>\r
        Headings come in 6 different
        sizes. So far you have primarily used the biggest one: &lt;h1&gt;. The number
        '1' in the HTML tag designates that this is the biggest heading. The smallest
        heading is &lt;h6&gt;. You can also try the &lt;h2&gt;, &lt;h3&gt;, &lt;h4&gt;,
        and &lt;h5&gt; tags, which get smaller as the number gets larger.\r
        </h1>\r
        </details>\r
        <details>\r
        <summary>**What
        is HTML?**</summary>\r
        HTML stands for Hypertext Markup Language. HTML is
        used to add structure to the content of a web page. HTML uses tags to specify
        where certain structures start and end. These tags are sets of characters
        not found in the English language so that the content and structure can be
        differentiated. \r
        </details>\r
        <details>\r
        <summary>**What is an HTML
        element?**</summary>\r
        An HTML element is a piece of a website that is marked
        by a start tag and sometimes closed with an end tag. The element also includes
        the content inside the tags. For example: \r
        <img src="https://images.code.org/fb4df62aa4d879f7021c567be2e28eea-image-1481135855001.png"
        style="width:500px">\r
        </details>\r
        <details>\r
        <summary>**What is an
        HTML tag?**</summary>\r
        An HTML tag is the special set of characters that
        tells the machine where the start or end of an HTML element is and what type
        it is.\r
        </details>\r
        </div>\r
        \r
        So far, you've organized your content
        into paragraphs.  Another way HTML allows you to organize your code is by
        using **headings**.  A heading is a short piece of text that goes at the top
        of a section of content, like a title.\r
        \r
        Do This:\r
        * Find the headings
        in the web page below and use the Inspector Tool to see the code that makes
        them.\r
        * Make sure you and your partner agree on what the tags do.\r
        *
        Change the code so that "Drawing" and "2 years" match the headings on
        the rest of the page.
      CSD U2 Heading Demo_2018_markdown_instruction: |-
        # Headings\r
        \r
        <div style="float:
        right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px"
        markdown="1">\r
        <details>\r
        <summary>**What are headings?**</summary>\r
        Headings
        are the different sized section titles throughout a web page. Headings add
        structure to your web page by breaking it up so its easier for a user to read.\r
        </details>\r
        <details>\r
        <summary>**How
        do I make different sized headings?**</summary>\r
        Headings come in 6 different
        sizes. So far you have primarily used the biggest one: &lt;h1&gt;. The number
        '1' in the HTML tag designates that this is the biggest heading. The smallest
        heading is &lt;h6&gt;. You can also try the &lt;h2&gt;, &lt;h3&gt;, &lt;h4&gt;,
        and &lt;h5&gt; tags, which get smaller as the number gets larger.\r
        </h1>\r
        </details>\r
        <details>\r
        <summary>**What
        is HTML?**</summary>\r
        HTML stands for Hypertext Markup Language. HTML is
        used to add structure to the content of a web page. HTML uses tags to specify
        where certain structures start and end. These tags are sets of characters
        not found in the English language so that the content and structure can be
        differentiated. \r
        </details>\r
        <details>\r
        <summary>**What is an HTML
        element?**</summary>\r
        An HTML element is a piece of a website that is marked
        by a start tag and sometimes closed with an end tag. The element also includes
        the content inside the tags. For example: \r
        <img src="https://images.code.org/fb4df62aa4d879f7021c567be2e28eea-image-1481135855001.png"
        style="width:500px">\r
        </details>\r
        <details>\r
        <summary>**What is an
        HTML tag?**</summary>\r
        An HTML tag is the special set of characters that
        tells the machine where the start or end of an HTML element is and what type
        it is.\r
        </details>\r
        </div>\r
        \r
        So far, you've organized your content
        into paragraphs.  Another way HTML allows you to organize your code is by
        using **headings**.  A heading is a short piece of text that goes at the top
        of a section of content, like a title.\r
        \r
        Do This:\r
        * Find the headings
        in the web page below and use the Inspector Tool to see the code that makes
        them.\r
        * Make sure you and your partner agree on what the tags do.\r
        *
        Change the code so that "Drawing" and "2 years" match the headings on
        the rest of the page.
      CSD U2 Heading Sizes_markdown_instruction: |
        # Heading Sizes\r
        \r
        <div style="float:
        right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px"
        markdown="1">\r
        <details>\r
        <summary>**What are headings?**</summary>\r
        Headings
        are the different sized section titles throughout a web page. Headings add
        structure to your web page by breaking it up so its easier for a user to read.\r
        </details>\r
        <details>\r
        <summary>**How
        do I make different sized headings?**</summary>\r
        Headings come in 6 different
        sizes.  The most common heading is &lt;h1&gt; The number 1 in the HTML tag
        designates that this is the biggest heading. The smallest heading is &lt;h6&gt;.
        You can also try the &lt;h2&gt;, &lt;h3&gt;, &lt;h4&gt;, and &lt;h5&gt; tags
        which get smaller as the number gets larger.\r
        </details>\r
        <details>\r
        <summary>**What
        is HTML?**</summary>\r
        HTML stands for Hypertext Markup Language. HTML is
        used to add structure to the content of a web page. HTML uses tags to specify
        where certain structures start and end. These tags are sets of characters
        not found in the English language so that the content and structure can be
        differentiated. \r
        </details>\r
        <details>\r
        <summary>**What is an HTML
        element?**</summary>\r
        An HTML element is a piece of a website that is marked
        by a start tag and sometimes closed with an end tag. The element also includes
        the content inside the tags. For example: \r
        <img src="https://images.code.org/fb4df62aa4d879f7021c567be2e28eea-image-1481135855001.png"
        style="width:500px">\r
        </details>\r
        <details>\r
        <summary>**What is an
        HTML tag?**</summary>\r
        An HTML tag is the special set of characters that
        tells the machine where the start or end of an HTML element is and what type
        it is.\r
        </details>\r
        \r
        </div>\r
        \r
        Headings can come in different sizes.  In
        this page, there are six different sized headings, but they are all mixed
        up.  Can you and your partner figure out how to fix them?\r
        \r
        \r
        \r
        Do
        This:\r
        * Use the inspector tool to figure out what makes the headings different
        sizes\r
        * Make sure you and your partner agree on what the different heading
        tags do.\r
        * Change the tags so that the headings are in order from biggest
        to smallest, and the text says the correct size, as in the picture below.
        \r
        \r
        <img src="https://images.code.org/762022f97a355dd63dce5ecc8d0127aa-image-1493161154608.58.15
        PM.png" style="width:100px" style="float:left">\r
      CSD U2 Heading Sizes_2018_markdown_instruction: |
        # Heading Sizes\r
        \r
        <div
        style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left:
        20px; font-size:14px" markdown="1">\r
        <details>\r
        <summary>**What are
        headings?**</summary>\r
        Headings are the different sized section titles throughout
        a web page. Headings add structure to your web page by breaking it up so its
        easier for a user to read.\r
        </details>\r
        <details>\r
        <summary>**How do
        I make different sized headings?**</summary>\r
        Headings come in 6 different
        sizes.  The most common heading is &lt;h1&gt; The number 1 in the HTML tag
        designates that this is the biggest heading. The smallest heading is &lt;h6&gt;.
        You can also try the &lt;h2&gt;, &lt;h3&gt;, &lt;h4&gt;, and &lt;h5&gt; tags
        which get smaller as the number gets larger.\r
        </details>\r
        <details>\r
        <summary>**What
        is HTML?**</summary>\r
        HTML stands for Hypertext Markup Language. HTML is
        used to add structure to the content of a web page. HTML uses tags to specify
        where certain structures start and end. These tags are sets of characters
        not found in the English language so that the content and structure can be
        differentiated. \r
        </details>\r
        <details>\r
        <summary>**What is an HTML
        element?**</summary>\r
        An HTML element is a piece of a website that is marked
        by a start tag and sometimes closed with an end tag. The element also includes
        the content inside the tags. For example: \r
        <img src="https://images.code.org/fb4df62aa4d879f7021c567be2e28eea-image-1481135855001.png"
        style="width:500px">\r
        </details>\r
        <details>\r
        <summary>**What is an
        HTML tag?**</summary>\r
        An HTML tag is the special set of characters that
        tells the machine where the start or end of an HTML element is and what type
        it is.\r
        </details>\r
        \r
        </div>\r
        \r
        Headings can come in different sizes.  In
        this page, there are six different sized headings, but they are all mixed
        up.  Can you and your partner figure out how to fix them?\r
        \r
        \r
        \r
        Do
        This:\r
        * Use the inspector tool to figure out what makes the headings different
        sizes\r
        * Make sure you and your partner agree on what the different heading
        tags do.\r
        * Change the tags so that the headings are in order from biggest
        to smallest, and the text says the correct size, as in the picture below.
        \r
        \r
        <img src="https://images.code.org/762022f97a355dd63dce5ecc8d0127aa-image-1493161154608.58.15
        PM.png" style="width:100px" style="float:left">\r
      CSD U2 Heading Test_markdown_instruction: |
        # Headings and Paragraphs\r
        \r
        <div
        style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left:
        20px; font-size:14px" markdown="1">\r
        <details>\r
        <summary>**What is
        a paragraph element?**</summary>\r
        Paragraphs are marked by opening(`<p>`)
        and closing(`</p>`) tags as well. Paragraphs in HTML can be any length of
        text from one word to a bunch of sentences. All of your text in your web page
        should be contained in an HTML element (headings or paragraphs). Paragraphs
        group together sets of sentences and put some space between that group of
        text and the next group of text.\r
        </details>\r
        <details>\r
        <summary>**How
        do I create multiple paragraphs?**</summary>\r
        Paragraphs are marked by opening(`<p>`)
        and closing(`</p>`) tags as well. To create more than one paragraph you will
        want multiple sets of opening and closing `<p>` tags. For example\r
        <pre>\r
        \t&lt;p&gt;\r
            \tThis
        is a paragraph.\r
            &lt;/p&gt;\r
        \t&lt;p&gt;\r
            \tThis is another
        paragraph.\r
            &lt;/p&gt;\r
        </pre>\r
        </details>\r
        <details>\r
        <summary>**What
        are headings?**</summary>\r
        Headings are the different sized section titles
        throughout a web page. Headings add structure to your web page by breaking
        it up so its easier for a user to read.\r
        </details>\r
        <details>\r
        <summary>**How
        do I make different sized headings?**</summary>\r
        Headings come in 6 different
        sizes. So far you have primarily used the biggest one &lt;h1&gt;. The number
        1 in the HTML tag designates that this is the biggest heading. The smallest
        heading is &lt;h6&gt;. You can also try the &lt;h2&gt;, &lt;h3&gt;, &lt;h4&gt;,
        and &lt;h5&gt; tags which get smaller as the number gets larger.\r
        </h1>\r
        </details>\r
        <details>\r
        <summary>**What
        is HTML?**</summary>\r
        HTML stands for Hypertext Markup Language. HTML is
        used to add structure to the content of a web page. HTML uses tags to specify
        where certain structures start and end. These tags are sets of characters
        not found in the English language so that the content and structure can be
        differentiated. \r
        </details>\r
        <details>\r
        <summary>**What is an HTML
        element?**</summary>\r
        An HTML element is a piece of a website that is marked
        by a start tag and sometimes closed with an end tag. The element also includes
        the content inside the tags. For example: \r
        <img src="https://images.code.org/fb4df62aa4d879f7021c567be2e28eea-image-1481135855001.png"
        style="width:500px">\r
        </details>\r
        <details>\r
        <summary>**What is an
        HTML tag?**</summary>\r
        An HTML tag is the special set of characters that
        tells the machine where the start or end of an HTML element is and what type
        it is.\r
        </details>\r
        \r
        </div>\r
        \r
        The author of this page added in
        a lot of content, but did not think about structure.  All of the text is mashed
        together.\r
        \r
        Do This:\r
        * Look through the content with your partner
        and decide what you think the best structure should be.\r
        * Use your heading
        and paragraph tags to code the structure into the page.\r
      CSD U2 Heading Test_2018_markdown_instruction: |
        # Headings and Paragraphs\r
        \r
        <div
        style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left:
        20px; font-size:14px" markdown="1">\r
        <details>\r
        <summary>**What is
        a paragraph element?**</summary>\r
        Paragraphs are marked by opening(`<p>`)
        and closing(`</p>`) tags as well. Paragraphs in HTML can be any length of
        text from one word to a bunch of sentences. All of your text in your web page
        should be contained in an HTML element (headings or paragraphs). Paragraphs
        group together sets of sentences and put some space between that group of
        text and the next group of text.\r
        </details>\r
        <details>\r
        <summary>**How
        do I create multiple paragraphs?**</summary>\r
        Paragraphs are marked by opening(`<p>`)
        and closing(`</p>`) tags as well. To create more than one paragraph you will
        want multiple sets of opening and closing `<p>` tags. For example\r
        <pre>\r
        \t&lt;p&gt;\r
            \tThis
        is a paragraph.\r
            &lt;/p&gt;\r
        \t&lt;p&gt;\r
            \tThis is another
        paragraph.\r
            &lt;/p&gt;\r
        </pre>\r
        </details>\r
        <details>\r
        <summary>**What
        are headings?**</summary>\r
        Headings are the different sized section titles
        throughout a web page. Headings add structure to your web page by breaking
        it up so its easier for a user to read.\r
        </details>\r
        <details>\r
        <summary>**How
        do I make different sized headings?**</summary>\r
        Headings come in 6 different
        sizes. So far you have primarily used the biggest one &lt;h1&gt;. The number
        1 in the HTML tag designates that this is the biggest heading. The smallest
        heading is &lt;h6&gt;. You can also try the &lt;h2&gt;, &lt;h3&gt;, &lt;h4&gt;,
        and &lt;h5&gt; tags which get smaller as the number gets larger.\r
        </h1>\r
        </details>\r
        <details>\r
        <summary>**What
        is HTML?**</summary>\r
        HTML stands for Hypertext Markup Language. HTML is
        used to add structure to the content of a web page. HTML uses tags to specify
        where certain structures start and end. These tags are sets of characters
        not found in the English language so that the content and structure can be
        differentiated. \r
        </details>\r
        <details>\r
        <summary>**What is an HTML
        element?**</summary>\r
        An HTML element is a piece of a website that is marked
        by a start tag and sometimes closed with an end tag. The element also includes
        the content inside the tags. For example: \r
        <img src="https://images.code.org/fb4df62aa4d879f7021c567be2e28eea-image-1481135855001.png"
        style="width:500px">\r
        </details>\r
        <details>\r
        <summary>**What is an
        HTML tag?**</summary>\r
        An HTML tag is the special set of characters that
        tells the machine where the start or end of an HTML element is and what type
        it is.\r
        </details>\r
        \r
        </div>\r
        \r
        The author of this page added in
        a lot of content, but did not think about structure.  All of the text is mashed
        together.\r
        \r
        Do This:\r
        * Look through the content with your partner
        and decide what you think the best structure should be.\r
        * Use your heading
        and paragraph tags to code the structure into the page.\r
      CSD U2 Image Tag 1_markdown_instruction: |-
        <div style="float: right; height:
        250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px"
        markdown="1">\r
        <details>\r
        <summary>**How do I add images?**</summary>\r
        The
        `<img>` tag allows you to show images on your web page. <br><br>\r
        \r
        Example:\r
        <pre>&lt;img
        src="dog.png" alt="dog jumping"/&gt;</pre><br><br>\r
        \r
        In order to
        tell the browser which file to use, extra information, called an **attribute**,
        is added to the &lt;img&gt; tag inside the brackets. The attribute `src` stands
        for **s**ou**rc**e and tell the name of the image. Image files names include
        extensions which tell the computer which type of image they are working with.
        Common extensions are .jpg, .jpeg, .png. <br><br>\r
        \r
        In addition to have
        the src attribute, image elements also have the `alt` attribute which describe
        the image. This is important in case the image doesn’t load or for people
        who have trouble with their eyesight. <br><br>\r
        \r
        An `<img>` tag is an
        example of a  **self-closing tag** because it starts and closes in one tag.
        To mark this we put the `/` which usually goes in the close tag at the end
        of the image tag.\r
        \r
        </details>\r
        <details>\r
        <summary>**Why does an
        image tag not have a closing tag?**</summary>\r
        An image tag doesn't need
        a closing tag because there is no text content which must be wrapped in tags.
        The content that shows on the screen is specified through the tags attributes.\r
        </details>\r
        <details>\r
        <summary>**What
        is an attribute?**</summary>\r
        Attributes are extra information included
        in a tag.  Attributes have names and values. The name tells what type of information
        is being provided and then the value gives the specific information for that
        tag. \r
        \r
        For example &lt;img&gt; tags have two attributes, src and alt.
        src specifies the name of the image file and alt tells the browser in readable
        text what the image is.\r
        </details>\r
        </div>\r
        \r
        # Images\r
        \r
        A Dog
        vs Cat web page has been started for you. The dog image has already been added
        to the below web page. Use an image tag to add the `cat.jpeg` image to the
        page below the cat heading.
      CSD U2 Image Tag 1_2018_markdown_instruction: |-
        <div style="float: right; height:
        250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px"
        markdown="1">\r
        <details>\r
        <summary>**How do I add images?**</summary>\r
        The
        `<img>` tag allows you to show images on your web page. <br><br>\r
        \r
        Example:\r
        <pre>&lt;img
        src="dog.png" alt="dog jumping"/&gt;</pre><br><br>\r
        \r
        In order to
        tell the browser which file to use, extra information, called an **attribute**,
        is added to the &lt;img&gt; tag inside the brackets. The attribute `src` stands
        for **s**ou**rc**e and tell the name of the image. Image files names include
        extensions which tell the computer which type of image they are working with.
        Common extensions are .jpg, .jpeg, .png. <br><br>\r
        \r
        In addition to have
        the src attribute, image elements also have the `alt` attribute which describe
        the image. This is important in case the image doesn’t load or for people
        who have trouble with their eyesight. <br><br>\r
        \r
        An `<img>` tag is an
        example of a  **self-closing tag** because it starts and closes in one tag.
        To mark this we put the `/` which usually goes in the close tag at the end
        of the image tag.\r
        \r
        </details>\r
        <details>\r
        <summary>**Why does an
        image tag not have a closing tag?**</summary>\r
        An image tag doesn't need
        a closing tag because there is no text content which must be wrapped in tags.
        The content that shows on the screen is specified through the tags attributes.\r
        </details>\r
        <details>\r
        <summary>**What
        is an attribute?**</summary>\r
        Attributes are extra information included
        in a tag.  Attributes have names and values. The name tells what type of information
        is being provided and then the value gives the specific information for that
        tag. \r
        \r
        For example &lt;img&gt; tags have two attributes, src and alt.
        src specifies the name of the image file and alt tells the browser in readable
        text what the image is.\r
        </details>\r
        </div>\r
        \r
        # Images\r
        \r
        A Dog
        vs Cat web page has been started for you. The dog image has already been added
        to the below web page. Use an image tag to add the `cat.jpeg` image to the
        page below the cat heading.
      CSD U2 Image Tag 2_markdown_instruction: |-
        <div style="float: right; height:
        250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px"
        markdown="1">\r
        <details>\r
        <summary>**How do I add images?**</summary>\r
        The
        `<img>` tag allows you to show images on your web page. <br><br>\r
        \r
        Example:\r
        <pre>&lt;img
        src="dog.png" alt="dog jumping"/&gt;</pre><br><br>\r
        \r
        In order to
        tell the browser which file to use, extra information, called an **attribute**,
        is added to the &lt;img&gt; tag inside the brackets. The attribute `src` stands
        for **s**ou**rc**e and tell the name of the image. Image files names include
        extensions which tell the computer which type of image they are working with.
        Common extensions are .jpg, .jpeg, .png. <br><br>\r
        \r
        In addition to have
        the src attribute, image elements also have the `alt` attribute which describe
        the image. This is important in case the image doesn’t load or for people
        who have trouble with their eyesight. <br><br>\r
        \r
        An `<img>` tag is an
        example of a  **self-closing tag** because it starts and closes in one tag.
        To mark this we put the `/` which usually goes in the close tag at the end
        of the image tag.\r
        \r
        </details>\r
        <details>\r
        <summary>**Why does an
        image tag not have a closing tag?**</summary>\r
        An image tag doesn't need
        a closing tag because there is no text content which must be wrapped in tags.
        The content that shows on the screen is specified through the tags attributes.\r
        </details>\r
        <details>\r
        <summary>**What
        is an attribute?**</summary>\r
        Attributes are extra information included
        in a tag.  Attributes have names and values. The name tells what type of information
        is being provided and then the value gives the specific information for that
        tag. \r
        \r
        For example &lt;img&gt; tags have two attributes, src and alt.
        src specifies the name of the image file and alt tells the browser in readable
        text what the image is.\r
        </details>\r
        </div>\r
        \r
        # Uploading Images\r
        \r
        You
        can upload images that you've found elsewhere using the **Add Image** button.
        Go find an image of a different type of pet that you like and download it
        to your computer (using right-click "Save As").\r
        \r
        Once you have your
        images, click ![](https://images.code.org/c35789d00e59b0dbe42879390dabf925-image-1493240590385.01.49
        PM.png) and upload the image from your computer into your project, where you
        can then use it in your page.\r
        \r
        # Do This\r
        \r
        * Upload at least one
        image into this web page\r
        * Use the `<img>` tag to display the image(s)
        in your website.\r
        * Make sure to add an `alt` attribute.
      CSD U2 Image Tag 2_2018_markdown_instruction: |-
        <div style="float: right; height:
        250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px"
        markdown="1">\r
        <details>\r
        <summary>**How do I add images?**</summary>\r
        The
        `<img>` tag allows you to show images on your web page. <br><br>\r
        \r
        Example:\r
        <pre>&lt;img
        src="dog.png" alt="dog jumping"/&gt;</pre><br><br>\r
        \r
        In order to
        tell the browser which file to use, extra information, called an **attribute**,
        is added to the &lt;img&gt; tag inside the brackets. The attribute `src` stands
        for **s**ou**rc**e and tell the name of the image. Image files names include
        extensions which tell the computer which type of image they are working with.
        Common extensions are .jpg, .jpeg, .png. <br><br>\r
        \r
        In addition to have
        the src attribute, image elements also have the `alt` attribute which describe
        the image. This is important in case the image doesn’t load or for people
        who have trouble with their eyesight. <br><br>\r
        \r
        An `<img>` tag is an
        example of a  **self-closing tag** because it starts and closes in one tag.
        To mark this we put the `/` which usually goes in the close tag at the end
        of the image tag.\r
        \r
        </details>\r
        <details>\r
        <summary>**Why does an
        image tag not have a closing tag?**</summary>\r
        An image tag doesn't need
        a closing tag because there is no text content which must be wrapped in tags.
        The content that shows on the screen is specified through the tags attributes.\r
        </details>\r
        <details>\r
        <summary>**What
        is an attribute?**</summary>\r
        Attributes are extra information included
        in a tag.  Attributes have names and values. The name tells what type of information
        is being provided and then the value gives the specific information for that
        tag. \r
        \r
        For example &lt;img&gt; tags have two attributes, src and alt.
        src specifies the name of the image file and alt tells the browser in readable
        text what the image is.\r
        </details>\r
        </div>\r
        \r
        # Uploading Images\r
        \r
        You
        can upload images that you've found elsewhere using the **Add Image** button.
        Go find an image of a different type of pet that you like and download it
        to your computer (using right-click "Save As").\r
        \r
        Once you have your
        images, click ![](https://images.code.org/c35789d00e59b0dbe42879390dabf925-image-1493240590385.01.49
        PM.png) and upload the image from your computer into your project, where you
        can then use it in your page.\r
        \r
        # Do This\r
        \r
        * Upload at least one
        image into this web page\r
        * Use the `<img>` tag to display the image(s)
        in your website.\r
        * Make sure to add an `alt` attribute.
      CSD U2 Image Tag Attribution_markdown_instruction: |-
        <div style="float: right;
        height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px"
        markdown="1">\r
        <details>\r
        <summary>**How do I add images?**</summary>\r
        The
        `<img>` tag allows you to show images on your web page. <br><br>\r
        \r
        Example:\r
        <pre>&lt;img
        src="dog.png" alt="dog jumping"/&gt;</pre><br><br>\r
        \r
        In order to
        tell the browser which file to use, extra information, called an **attribute**,
        is added to the &lt;img&gt; tag inside the brackets. The attribute `src` stands
        for **s**ou**rc**e and tell the name of the image. Image files names include
        extensions which tell the computer which type of image they are working with.
        Common extensions are .jpg, .jpeg, .png. <br><br>\r
        \r
        In addition to have
        the src attribute, image elements also have the `alt` attribute which describe
        the image. This is important in case the image doesn’t load or for people
        who have trouble with their eyesight. <br><br>\r
        \r
        An `<img>` tag is an
        example of a  **self-closing tag** because it starts and closes in one tag.
        To mark this we put the `/` which usually goes in the close tag at the end
        of the image tag.\r
        \r
        </details>\r
        <details>\r
        <summary>**Why does an
        image tag not have a closing tag?**</summary>\r
        An image tag doesn't need
        a closing tag because there is no text content which must be wrapped in tags.
        The content that shows on the screen is specified through the tags attributes.\r
        </details>\r
        <details>\r
        <summary>**What
        is an attribute?**</summary>\r
        Attributes are extra information included
        in a tag.  Attributes have names and values. The name tells what type of information
        is being provided and then the value gives the specific information for that
        tag. \r
        \r
        For example &lt;img&gt; tags have two attributes, src and alt.
        src specifies the name of the image file and alt tells the browser in readable
        text what the image is.\r
        </details>\r
        </div>\r
        \r
        # Giving Credit\r
        \r
        When
        using a Creative Commons licensed image, you need to give credit to the original
        creator (this is also called _attribution_). There are lots of ways to provide
        attribution, but the easiest way is to add text below the image that identifies
        the creator and website it came from.\r
        \r
        # Do This\r
        \r
        In this page
        we've already added and attributed an image of a frog. Use the Creative Commons
        search engine to find another image of an amphibian. Add your found image
        to this page, along with proper attribution, including:\r
        \r
        * The name
        of the creator (if available)\r
        * The website it was found on (e.g. commons.wikimedia.org)\r
        *
        The license it was published under (e.g. CC-BY)
      CSD U2 Image Tag Attribution_2018_markdown_instruction: |-
        <div style="float:
        right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px"
        markdown="1">\r
        <details>\r
        <summary>**How do I add images?**</summary>\r
        The
        `<img>` tag allows you to show images on your web page. <br><br>\r
        \r
        Example:\r
        <pre>&lt;img
        src="dog.png" alt="dog jumping"/&gt;</pre><br><br>\r
        \r
        In order to
        tell the browser which file to use, extra information, called an **attribute**,
        is added to the &lt;img&gt; tag inside the brackets. The attribute `src` stands
        for **s**ou**rc**e and tell the name of the image. Image files names include
        extensions which tell the computer which type of image they are working with.
        Common extensions are .jpg, .jpeg, .png. <br><br>\r
        \r
        In addition to have
        the src attribute, image elements also have the `alt` attribute which describe
        the image. This is important in case the image doesn’t load or for people
        who have trouble with their eyesight. <br><br>\r
        \r
        An `<img>` tag is an
        example of a  **self-closing tag** because it starts and closes in one tag.
        To mark this we put the `/` which usually goes in the close tag at the end
        of the image tag.\r
        \r
        </details>\r
        <details>\r
        <summary>**Why does an
        image tag not have a closing tag?**</summary>\r
        An image tag doesn't need
        a closing tag because there is no text content which must be wrapped in tags.
        The content that shows on the screen is specified through the tags attributes.\r
        </details>\r
        <details>\r
        <summary>**What
        is an attribute?**</summary>\r
        Attributes are extra information included
        in a tag.  Attributes have names and values. The name tells what type of information
        is being provided and then the value gives the specific information for that
        tag. \r
        \r
        For example &lt;img&gt; tags have two attributes, src and alt.
        src specifies the name of the image file and alt tells the browser in readable
        text what the image is.\r
        </details>\r
        </div>\r
        \r
        # Giving Credit\r
        \r
        When
        using a Creative Commons licensed image, you need to give credit to the original
        creator (this is also called _attribution_). There are lots of ways to provide
        attribution, but the easiest way is to add text below the image that identifies
        the creator and website it came from.\r
        \r
        # Do This\r
        \r
        In this page
        we've already added and attributed an image of a frog. Use the Creative Commons
        search engine to find another image of an amphibian. Add your found image
        to this page, along with proper attribution, including:\r
        \r
        * The name
        of the creator (if available)\r
        * The website it was found on (e.g. commons.wikimedia.org)\r
        *
        The license it was published under (e.g. CC-BY)
      CSD U2 Image Tag Debug_markdown_instruction: |-
        <div style="float: right; height:
        250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px"
        markdown="1">\r
        <details>\r
        <summary>**How do I add images?**</summary>\r
        The
        `<img>` tag allows you to show images on your web page. <br><br>\r
        \r
        Example:\r
        <pre>&lt;img
        src="dog.png" alt="dog jumping"/&gt;</pre><br><br>\r
        \r
        In order to
        tell the browser which file to use, extra information, called an **attribute**,
        is added to the &lt;img&gt; tag inside the brackets. The attribute `src` stands
        for **s**ou**rc**e and tell the name of the image. Image files names include
        extensions which tell the computer which type of image they are working with.
        Common extensions are .jpg, .jpeg, .png. <br><br>\r
        \r
        In addition to have
        the src attribute, image elements also have the `alt` attribute which describe
        the image. This is important in case the image doesn’t load or for people
        who have trouble with their eyesight. <br><br>\r
        \r
        An `<img>` tag is an
        example of a  **self-closing tag** because it starts and closes in one tag.
        To mark this we put the `/` which usually goes in the close tag at the end
        of the image tag.\r
        \r
        </details>\r
        <details>\r
        <summary>**Why does an
        image tag not have a closing tag?**</summary>\r
        An image tag doesn't need
        a closing tag because there is no text content which must be wrapped in tags.
        The content that shows on the screen is specified through the tags attributes.\r
        </details>\r
        <details>\r
        <summary>**What
        is an attribute?**</summary>\r
        Attributes are extra information included
        in a tag.  Attributes have names and values. The name tells what type of information
        is being provided and then the value gives the specific information for that
        tag. \r
        \r
        For example &lt;img&gt; tags have two attributes, src and alt.
        src specifies the name of the image file and alt tells the browser in readable
        text what the image is.\r
        </details>\r
        </div>\r
        \r
        # The Details Matter\r
        \r
        The
        `src` attribute needs to point to the _exact_ filename of the image you want
        to use. That means you need to pay attention to spelling, capitalization,
        and the file extension. Each of the three images on this page is broken because
        of an improper `src` attribute. Using the file menu for reference, fix each
        of the image tags.\r
        \r
        _Note: Even though the images are not loading properly,
        our website is still showing descriptive text of what should be there because
        we used `alt` attributes. Cool!_
      CSD U2 Image Tag Debug_2018_markdown_instruction: |-
        <div style="float: right;
        height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px"
        markdown="1">\r
        <details>\r
        <summary>**How do I add images?**</summary>\r
        The
        `<img>` tag allows you to show images on your web page. <br><br>\r
        \r
        Example:\r
        <pre>&lt;img
        src="dog.png" alt="dog jumping"/&gt;</pre><br><br>\r
        \r
        In order to
        tell the browser which file to use, extra information, called an **attribute**,
        is added to the &lt;img&gt; tag inside the brackets. The attribute `src` stands
        for **s**ou**rc**e and tell the name of the image. Image files names include
        extensions which tell the computer which type of image they are working with.
        Common extensions are .jpg, .jpeg, .png. <br><br>\r
        \r
        In addition to have
        the src attribute, image elements also have the `alt` attribute which describe
        the image. This is important in case the image doesn’t load or for people
        who have trouble with their eyesight. <br><br>\r
        \r
        An `<img>` tag is an
        example of a  **self-closing tag** because it starts and closes in one tag.
        To mark this we put the `/` which usually goes in the close tag at the end
        of the image tag.\r
        \r
        </details>\r
        <details>\r
        <summary>**Why does an
        image tag not have a closing tag?**</summary>\r
        An image tag doesn't need
        a closing tag because there is no text content which must be wrapped in tags.
        The content that shows on the screen is specified through the tags attributes.\r
        </details>\r
        <details>\r
        <summary>**What
        is an attribute?**</summary>\r
        Attributes are extra information included
        in a tag.  Attributes have names and values. The name tells what type of information
        is being provided and then the value gives the specific information for that
        tag. \r
        \r
        For example &lt;img&gt; tags have two attributes, src and alt.
        src specifies the name of the image file and alt tells the browser in readable
        text what the image is.\r
        </details>\r
        </div>\r
        \r
        # The Details Matter\r
        \r
        The
        `src` attribute needs to point to the _exact_ filename of the image you want
        to use. That means you need to pay attention to spelling, capitalization,
        and the file extension. Each of the three images on this page is broken because
        of an improper `src` attribute. Using the file menu for reference, fix each
        of the image tags.\r
        \r
        _Note: Even though the images are not loading properly,
        our website is still showing descriptive text of what should be there because
        we used `alt` attributes. Cool!_
      CSD U2 Info Page Content_markdown_instruction: |
        # Adding Your Content\r
        \r
        You
        should now have found a handful of websites that you can use to help make
        your case for the cause you've chosen. If not, keep on researching! Otherwise
        it's time to start structuring the content of your page.\r
        \r
        For all of
        the content you find externally, you'll need to provide attribution to the
        original creator. For now, just include the url of the site where you found
        it in parenthesis. For example\r
        \r
        * According to the ASPCA only 10% of
        animals entering shelters have been spayed or neutered (http://www.aspca.org/animal-homelessness).\r
        *
        Kill shelters euthanize 2.7 million animals per year (http://www.aspca.org/animal-homelessness).\r
        \r
        #
        Do This\r
        \r
        The specifics of your page layout will depend on your topics
        and goals, but in general you should create the following structure\r
        \r
        *
        A first level header with a catchy title for your page\r
        * A second level
        header for each separate argument to support your cause\r
        * Paragraphs of
        content under each second level header\r
        * The urls of any sites where you
        found information\r
        * Don't worry about styling right now you are just getting
        the content\r
      CSD U2 Info Page Create_markdown_instruction: |-
        # Informational Page\r
        \r
        Let's
        start by setting up the page you will be using to create your informational
        page.\r
        \r
        # Do This\r
        \r
        * Add a new HTML file to your project for your
        informational page.\r
        * Add a title and description
      CSD U2 Info Page Final Touches_markdown_instruction: |
        <div style="float: right;
        height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px">\r
        \r
        <h2>\r
        Checklist\r
        </h2>\r
        \r
        <input
        type="checkbox" style="float: left"><span style="display: block; margin-left:
        20px; margin-bottom: 10px">Ensure that your image is properly licensed</span>\r
        <input
        type="checkbox" style="float: left"><span style="display: block; margin-left:
        20px; margin-bottom: 10px">Upload image into Web Lab</span>\r
        <input type="checkbox"
        style="float: left"><span style="display: block; margin-left: 20px; margin-bottom:
        10px">Create an image tag with a descriptive alt attribute</span>\r
        <input
        type="checkbox" style="float: left"><span style="display: block; margin-left:
        20px; margin-bottom: 10px">If the image isn't your own, add attribution
        underneath<br/>\r
        \r
        </div>\r
        \r
        \r
        # Adding Images to Your Site\r
        \r
        You've
        already created some pages with great content on your website, now you can
        add some images!\r
        \r
        # Do This\r
        \r
        Using either your own images or those
        found through a Commons Search, add some images to the pages you've already
        created. Get creative! Use the checklist to the right to keep track of the
        steps you need to follow when adding images.\r
      CSD U2 Info Page Final Touches_2018_markdown_instruction: |
        <div style="float:
        right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px">\r
        \r
        <h2>\r
        Checklist\r
        </h2>\r
        \r
        <input
        type="checkbox" style="float: left"><span style="display: block; margin-left:
        20px; margin-bottom: 10px">Ensure that your image is properly licensed</span>\r
        <input
        type="checkbox" style="float: left"><span style="display: block; margin-left:
        20px; margin-bottom: 10px">Upload image into Web Lab</span>\r
        <input type="checkbox"
        style="float: left"><span style="display: block; margin-left: 20px; margin-bottom:
        10px">Create an image tag with a descriptive alt attribute</span>\r
        <input
        type="checkbox" style="float: left"><span style="display: block; margin-left:
        20px; margin-bottom: 10px">If the image isn't your own, add attribution
        underneath<br/>\r
        \r
        </div>\r
        \r
        \r
        # Adding Images to Your Site\r
        \r
        You've
        already created some pages with great content on your website, now you can
        add some images!\r
        \r
        # Do This\r
        \r
        Using either your own images or those
        found through a Commons Search, add some images to the pages you've already
        created. Get creative! Use the checklist to the right to keep track of the
        steps you need to follow when adding images.\r
      CSD U2 Info Page Images_markdown_instruction: |-
        # Adding Your Images\r
        \r
        With
        images and attribution information in hand, it's time to spruce up your new
        page.\r
        \r
        # Do This\r
        \r
        Upload your images to Web Lab and, using `<img>`
        tags, add them where you'd like them to go. For each image:\r
        \r
        * Add
        a descriptive `alt` attribute\r
        * Add attribution underneath the image, including\r
        \t*
        Name or screenname of author (if available)\r
            * Title of image (if available)\r
            *
        Url to original site\r
            * License image was published under either in
        text (eg CC-BY) or using a badge from the [Creative Commons website](https://creativecommons.org/about/downloads/).\r
        \r
        For
        example\r
        \r
        ![Sad Dog](https://upload.wikimedia.org/wikipedia/commons/thumb/b/b2/Longhaired_Dachshund_portrait.jpg/629px-Longhaired_Dachshund_portrait.jpg)\r
        \r
        Longhaired
        Dachshund portrait by Flickr user Soggydan (ht<span>tps://</span>commons.wikimedia.org/wiki/File:Longhaired_Dachshund_portrait.jpg)
        - CC-BY
      CSD U2 Inspector Warm Up_markdown_instruction: |-
        <div style="float: right;
        height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px">\r
        <details>\r
        <summary>**<span>
        How do I use the Inspector Tool? </span>**</summary>\r
        The Inspector Tool
        is a great way to learn more about unfamiliar code in Web Lab. To turn on
        the Inspector Tool, click <img src="https://images.code.org/188579d7c6e7645d0d2edd203a33bd63-image-1480361561351.31.56
        PM.png" style="width:100px">. You will know that the Inspector Tool is
        on because the button will turn white and say "Inspector: On". Once you
        turn on the Inspector Tool, you can hover over anything in the preview area
        and Web Lab will highlight the code that is making that part of the page appear.\r
        </details>\r
        \r
        </div>\r
        \r
        #
        Explore HTML\r
        \r
        This is a web page written in HTML, the language of the
        web. You'll learn more about how it works, but first explore it by using
        the Inspector Tool.\r
        \r
        # Do This\r
        \r
        * Click the Tip "How do I use
        the Inspector Tool?" on the right to learn how to use the Inspector Tool.\r
        *
        Follow the instructions in the web page to explore the web page and discuss
        with a partner how it is working.
      CSD U2 Inspector Warm Up_2018_markdown_instruction: |-
        <div style="float: right;
        height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px">\r
        <details>\r
        <summary>**<span>
        How do I use the Inspector Tool? </span>**</summary>\r
        The Inspector Tool
        is a great way to learn more about unfamiliar code in Web Lab. To turn on
        the Inspector Tool, click <img src="https://images.code.org/188579d7c6e7645d0d2edd203a33bd63-image-1480361561351.31.56
        PM.png" style="width:100px">. You will know that the Inspector Tool is
        on because the button will turn white and say "Inspector: On". Once you
        turn on the Inspector Tool, you can hover over anything in the preview area
        and Web Lab will highlight the code that is making that part of the page appear.\r
        </details>\r
        \r
        </div>\r
        \r
        #
        Explore HTML\r
        \r
        This is a web page written in HTML, the language of the
        web. You'll learn more about how it works, but first explore it by using
        the Inspector Tool.\r
        \r
        # Do This\r
        \r
        * Click the Tip "How do I use
        the Inspector Tool?" on the right to learn how to use the Inspector Tool.\r
        *
        Follow the instructions in the web page to explore the web page and discuss
        with a partner how it is working.
      CSD U2 Project Start_markdown_instruction: |-
        # Start Your Project\r
        \r
        Now
        that you have a plan for your personal website, you can start coding it here.  Don't
        worry if you can't do everything you want today.  You'll have plenty of
        chances to improve your work as you learn more about developing websites.\r
        \r
        #
        Do This\r
        * Use HTML to create the page that you sketched out.  Make sure
        it includes\r
         * At least **two headings of different sizes**\r
         * At least
        **one paragraph**\r
        * **Reflect** on your page by comparing to your sketch
        and showing it to your partner
      CSD U2 Project Start_2018_markdown_instruction: |-
        # Start Your Project\r
        \r
        Now
        that you have a plan for your personal website, you can start coding it here.  Don't
        worry if you can't do everything you want today.  You'll have plenty of
        chances to improve your work as you learn more about developing websites.\r
        \r
        #
        Do This\r
        * Use HTML to create the page that you sketched out.  Make sure
        it includes\r
         * At least **two headings of different sizes**\r
         * At least
        **one paragraph**\r
        * **Reflect** on your page by comparing to your sketch
        and showing it to your partner
      CSD U2 RGB intro_markdown_instruction: |-
        # RGB Colors\r
        \r
        All colors, whether
        they have names or not, can be described by the level of red, green, and blue
        light it takes to make them.  This is called an RGB value (short for Red-Green-Blue).  You
        can use the widget on your left to try out different RGB values and see what
        colors they make.\r
        \r
        * **Click "Run" to start the widget on the left,**
        and use the sliders to adjust the levels of red, green, and blue light.\r
        *
        For each of the colors below, match it to its RGB value.\r
        \r
        A) red: 216,
        green: 191, blue: 216 - rgb(216,191,216)\r
        \r
        B) red: 255, green: 239, blue:
        213 - rgb(255,239,213)\r
        \r
        C) red: 250, green: 128, blue: 114 - rgb(250,128,114)\r
        \r
        D)
        red: 70, green: 130, blue: 180 - rgb(70, 130, 180)\r
        \r
        E) red: 107, green:
        142, blue: 35 - rgb(107,142,35)\r
        \r
        \r
        <div style="font-size: 16px">\r
        <br
        />\r
        <details>\r
        <summary>**Why do red and green make yellow?**</summary>\r
        <p>When
        you mix paint, red and green make brown, but RGB color mixing uses light instead
        of paint, so the colors mix differently.  RGB uses _additive color mixing_.  In
        additive color mixing, red and green make yellow, red and blue make magenta,
        and blue and green make cyan.  When you mix the three primary colors together
        (red, green, and blue), they make white.  You can read more at <a href="https://en.wikipedia.org/wiki/Additive_color">Wikipedia
        - Additive Color</a>\r
        </p> </details>\r
        <details>\r
        <summary>**How many
        colors can I make with RGB color mixing?**</summary>\r
        <p>\r
        You can make
        over sixteen million different colors with RGB color mixing.\r
        </p></details>\r
        </div>
      CSD U2 RGB intro_2018_markdown_instruction: |-
        # RGB Colors\r
        \r
        All colors,
        whether they have names or not, can be described by the level of red, green,
        and blue light it takes to make them.  This is called an RGB value (short
        for Red-Green-Blue).  You can use the widget on your left to try out different
        RGB values and see what colors they make.\r
        \r
        * **Click "Run" to start
        the widget on the left,** and use the sliders to adjust the levels of red,
        green, and blue light.\r
        * For each of the colors below, match it to its
        RGB value.\r
        \r
        A) red: 216, green: 191, blue: 216 - rgb(216,191,216)\r
        \r
        B)
        red: 255, green: 239, blue: 213 - rgb(255,239,213)\r
        \r
        C) red: 250, green:
        128, blue: 114 - rgb(250,128,114)\r
        \r
        D) red: 70, green: 130, blue: 180
        - rgb(70, 130, 180)\r
        \r
        E) red: 107, green: 142, blue: 35 - rgb(107,142,35)\r
        \r
        \r
        <div
        style="font-size: 16px">\r
        <br />\r
        <details>\r
        <summary>**Why do red
        and green make yellow?**</summary>\r
        <p>When you mix paint, red and green
        make brown, but RGB color mixing uses light instead of paint, so the colors
        mix differently.  RGB uses _additive color mixing_.  In additive color mixing,
        red and green make yellow, red and blue make magenta, and blue and green make
        cyan.  When you mix the three primary colors together (red, green, and blue),
        they make white.  You can read more at <a href="https://en.wikipedia.org/wiki/Additive_color">Wikipedia
        - Additive Color</a>\r
        </p> </details>\r
        <details>\r
        <summary>**How many
        colors can I make with RGB color mixing?**</summary>\r
        <p>\r
        You can make
        over sixteen million different colors with RGB color mixing.\r
        </p></details>\r
        </div>
      CSD U2 RGB others_markdown_instruction: |-
        # Spring and Autumn Colors\r
        \r
        Choose
        RGB values for spring and autumn colors.\r
        \r
        * Click "Run" to start the
        widget.\r
        * Adjust the levels until you find a spring color you like, then
        write down the values on your activity guide.\r
        * Do the same for an autumn
        color.   You will need the RGB values for the next activity.\r
        \r
        \r
        <div
        style="font-size: 16px">\r
        <br />\r
        <details><summary>**Where can I see
        the whole range of color types?**</summary>\r
        You can find many options for
        colors at <a href="http://www.w3schools.com/colors/colors_picker.asp">W3Schools
        - HTML Color Picker</a></details>\r
        <details>\r
        <summary>**Why do red and
        green make yellow?**</summary>\r
        <p>When you mix paint, red and green make
        brown, but RGB color mixing uses light instead of paint, so the colors mix
        differently.  RGB uses _additive color mixing_.  In additive color mixing,
        red and green make yellow, red and blue make magenta, and blue and green make
        cyan.  When you mix the three primary colors together (red, green, and blue),
        they make white.  You can read more at <a href="https://en.wikipedia.org/wiki/Additive_color">Wikipedia
        - Additive Color</a></p> </details>\r
        <details>\r
        <summary>**How many colors
        can I make with RGB color mixing?**</summary>\r
        <p>You can make make over
        sixteen million different colors with RGB color mixing.</p></details>\r
        </div>
      CSD U2 RGB others_2018_markdown_instruction: |-
        # Spring and Autumn Colors\r
        \r
        Choose
        RGB values for spring and autumn colors.\r
        \r
        * Click "Run" to start the
        widget.\r
        * Adjust the levels until you find a spring color you like, then
        write down the values on your activity guide.\r
        * Do the same for an autumn
        color.   You will need the RGB values for the next activity.\r
        \r
        \r
        <div
        style="font-size: 16px">\r
        <br />\r
        <details><summary>**Where can I see
        the whole range of color types?**</summary>\r
        You can find many options for
        colors at <a href="http://www.w3schools.com/colors/colors_picker.asp">W3Schools
        - HTML Color Picker</a></details>\r
        <details>\r
        <summary>**Why do red and
        green make yellow?**</summary>\r
        <p>When you mix paint, red and green make
        brown, but RGB color mixing uses light instead of paint, so the colors mix
        differently.  RGB uses _additive color mixing_.  In additive color mixing,
        red and green make yellow, red and blue make magenta, and blue and green make
        cyan.  When you mix the three primary colors together (red, green, and blue),
        they make white.  You can read more at <a href="https://en.wikipedia.org/wiki/Additive_color">Wikipedia
        - Additive Color</a></p> </details>\r
        <details>\r
        <summary>**How many colors
        can I make with RGB color mixing?**</summary>\r
        <p>You can make make over
        sixteen million different colors with RGB color mixing.</p></details>\r
        </div>
      CSD U2 RGB summer_markdown_instruction: |-
        # Summer Color\r
        \r
        Find the RGB
        values for a summery yellow color.\r
        \r
        * Click "Run" to start the widget.\r
        *
        Adjust the levels until you match the summery yellow at the bottom of the
        widget.\r
        * Write the RGB values on your activity guide.  You will need them
        in the next activity.\r
        \r
        \r
        <div style="font-size: 16px">\r
        <br />\r
        <details>\r
        <summary>**Why
        do red and green make yellow?**</summary>\r
        <p>When you mix paint, red and
        green make brown, but RGB color mixing uses light instead of paint, so the
        colors mix differently.  RGB uses _additive color mixing_.  In additive color
        mixing, red and green make yellow, red and blue make magenta, and blue and
        green make cyan.  When you mix the three primary colors together (red, green,
        and blue), they make white.  You can read more at <a href="https://en.wikipedia.org/wiki/Additive_color">Wikipedia
        - Additive Color</a></p> </details>\r
        <details>\r
        <summary>**How many colors
        can I make with RGB color mixing?**</summary>\r
        <p>You can make make over
        sixteen million different colors with RGB color mixing.</p></details>\r
        </div>
      CSD U2 RGB summer_2018_markdown_instruction: |-
        # Summer Color\r
        \r
        Find the
        RGB values for a summery yellow color.\r
        \r
        * Click "Run" to start the
        widget.\r
        * Adjust the levels until you match the summery yellow at the bottom
        of the widget.\r
        * Write the RGB values on your activity guide.  You will
        need them in the next activity.\r
        \r
        \r
        <div style="font-size: 16px">\r
        <br
        />\r
        <details>\r
        <summary>**Why do red and green make yellow?**</summary>\r
        <p>When
        you mix paint, red and green make brown, but RGB color mixing uses light instead
        of paint, so the colors mix differently.  RGB uses _additive color mixing_.  In
        additive color mixing, red and green make yellow, red and blue make magenta,
        and blue and green make cyan.  When you mix the three primary colors together
        (red, green, and blue), they make white.  You can read more at <a href="https://en.wikipedia.org/wiki/Additive_color">Wikipedia
        - Additive Color</a></p> </details>\r
        <details>\r
        <summary>**How many colors
        can I make with RGB color mixing?**</summary>\r
        <p>You can make make over
        sixteen million different colors with RGB color mixing.</p></details>\r
        </div>
      CSD U2 RGB winter_markdown_instruction: |-
        # Winter Color\r
        \r
        In the next
        few levels, you'll be finding seasonal colors for a website.  Here, you'll
        need to find the RGB values for a wintery blue color.\r
        \r
        * Click "Run"
        to start the widget.\r
        * Adjust the levels until you match the wintery blue
        color at the bottom of the widget.\r
        * Write the RGB values on your activity
        guide.  You will need them in the next activity.\r
        \r
        \r
        <div style="font-size:
        16px">\r
        <br />\r
        <details><summary>**How do I make a color lighter?**</summary>\r
        <p>To
        make a color lighter, you need to add more light (increase the level of the
        slider).  If you have already added the maximum amount of blue light, you
        will need to add more red and green light to make your blue lighter.</p></details>\r
        <details>\r
        <summary>**Why
        do red and green make yellow?**</summary>\r
        <p>When you mix paint, red and
        green make brown, but RGB color mixing uses light instead of paint, so the
        colors mix differently.  RGB uses _additive color mixing_.  In additive color
        mixing, red and green make yellow, red and blue make magenta, and blue and
        green make cyan.  When you mix the three primary colors together (red, green,
        and blue), they make white.  You can read more at <a href="https://en.wikipedia.org/wiki/Additive_color">Wikipedia
        - Additive Color</a></p> </details>\r
        <details>\r
        <summary>**How many colors
        can I make with RGB color mixing?**</summary>\r
        <p>You can make make over
        sixteen million different colors with RGB color mixing.</p></details>\r
        </div>
      CSD U2 RGB winter_2018_markdown_instruction: |-
        # Winter Color\r
        \r
        In the
        next few levels, you'll be finding seasonal colors for a website.  Here,
        you'll need to find the RGB values for a wintery blue color.\r
        \r
        * Click
        "Run" to start the widget.\r
        * Adjust the levels until you match the wintery
        blue color at the bottom of the widget.\r
        * Write the RGB values on your
        activity guide.  You will need them in the next activity.\r
        \r
        \r
        <div
        style="font-size: 16px">\r
        <br />\r
        <details><summary>**How do I make
        a color lighter?**</summary>\r
        <p>To make a color lighter, you need to add
        more light (increase the level of the slider).  If you have already added
        the maximum amount of blue light, you will need to add more red and green
        light to make your blue lighter.</p></details>\r
        <details>\r
        <summary>**Why
        do red and green make yellow?**</summary>\r
        <p>When you mix paint, red and
        green make brown, but RGB color mixing uses light instead of paint, so the
        colors mix differently.  RGB uses _additive color mixing_.  In additive color
        mixing, red and green make yellow, red and blue make magenta, and blue and
        green make cyan.  When you mix the three primary colors together (red, green,
        and blue), they make white.  You can read more at <a href="https://en.wikipedia.org/wiki/Additive_color">Wikipedia
        - Additive Color</a></p> </details>\r
        <details>\r
        <summary>**How many colors
        can I make with RGB color mixing?**</summary>\r
        <p>You can make make over
        sixteen million different colors with RGB color mixing.</p></details>\r
        </div>
      CSD U2 add content_markdown_instruction: |
        # Add HTML\r
        \r
        Next, you should
        add the HTML to your pages.\r
        \r
        # Do This\r
        * For each of the new pages
        that you've created, add HTML to make the page you sketched in your project
        guide.\r
        * You may also add more HTML to the pages you've already created.\r
      CSD U2 add content_2018_markdown_instruction: |
        # Add HTML\r
        \r
        Next, you
        should add the HTML to your pages.\r
        \r
        # Do This\r
        * For each of the new
        pages that you've created, add HTML to make the page you sketched in your
        project guide.\r
        * You may also add more HTML to the pages you've already
        created.\r
      CSD U2 add file - OLD_markdown_instruction: |-
        <div style="float: right; height:
        250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px"
        markdown="1">\r
        <details>\r
        <summary>**What is a style sheet?**</summary>\r
        A
        style sheet is a document that controls how a web page will appear.  External
        style sheets are separate files that are linked to the HTML page.\r
        </details>\r
        <details>\r
        <summary>**What
        is CSS?**</summary>\r
        CSS is a language that controls the way content on
        a web site appears.  It uses rule-sets to change the look of a page.  Each
        rule set has a selector, which specifies which elements on the page will be
        affected, and the rules, which explain how to display the elements.   Each
        rule consists of a property and a value for that property.\r
        \r
        \r
        Here’s
        an example of a rule-set that makes the text in an `h2` tag blue and cursive:\r
        \r
        <pre>h2
        {\r
           color: blue;\r
           font-family: cursive;\r
        </pre>\r
        \r
        In this
        example, `h2` is the selector, `color` and `font-family` are properties, and
        `blue` and `cursive` are the values for those properties.\r
        </details>\r
        <details>\r
        <summary>**How
        do I create a new style sheet?**</summary>\r
        To create a new style sheet,
        click on the "Add CSS" button above the code area.\r
        </details>\r
        <details>\r
        <summary>**What
        should I name my style sheet?**</summary>\r
        You can name your style sheet
        anything, but it's better to choose a relevant name, such as "style.css"
        or "aboutmestyles.css" so that it's clear what the file is.  Your file
        should always end in the ".css" extension.\r
        </details>\r
        <details>\r
        <summary>**How
        do I rename a file?**</summary>\r
        To rename a file, you can right click (or
        control click) on the file name and choose the "Rename" option.  This will
        allow you to type in a new file name.  Clicking on a file name after it is
        already highlighted will also allow you to rename the file.\r
        </details>\r
        <details>\r
        <summary>**How
        do I add a style sheet to a web page?**</summary>\r
        To add a style sheet
        to a web page, open up the code for the web page.  Inside the head tag, add
        the following code `<link rel="stylesheet" href="style.css">`.  Then change
        "style.css" to the name of your style sheet.\r
        </details>\r
        </div>\r
        #
        Adding a Style Sheet\r
        \r
        This is your About Me page from before.  In the
        next level, you'll have a chance to add some different styles to it, but
        first, you need to add a style sheet, name it, and link it to your html page.\r
        \r
        1.
        Create a new style sheet for your project.\r
        2. Rename the style sheet file.\r
        3.
        Add your style sheet to your HTML page.\r
        \r
        <img src="https://cdo-curriculum.s3.amazonaws.com/media/uploads/weblab_stylesheet.png"
        style=" max-width:500px">
      CSD U2 add file_markdown_instruction: |-
        <div style="float: right; height: 250px;
        width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px" markdown="1">\r
        <details>\r
        <summary>**What
        is a style sheet?**</summary>\r
        A style sheet is a document that controls
        how a web page will appear.  External style sheets are separate files that
        are linked to the HTML page.\r
        </details>\r
        <details>\r
        <summary>**What
        is CSS?**</summary>\r
        CSS is a language that controls the way content on
        a web site appears.  It uses rule-sets to change the look of a page.  Each
        rule set has a selector, which specifies which elements on the page will be
        affected, and the rules, which explain how to display the elements.   Each
        rule consists of a property and a value for that property.\r
        \r
        \r
        Here’s
        an example of a rule-set that makes the text in an `h2` tag blue and cursive:\r
        \r
        <pre>h2
        {\r
           color: blue;\r
           font-family: cursive;\r
        </pre>\r
        \r
        In this
        example, `h2` is the selector, `color` and `font-family` are properties, and
        `blue` and `cursive` are the values for those properties.\r
        </details>\r
        <details>\r
        <summary>**How
        do I create a new style sheet?**</summary>\r
        To create a new style sheet,
        click on the "Add CSS" button above the code area.\r
        </details>\r
        <details>\r
        <summary>**What
        should I name my style sheet?**</summary>\r
        You can name your style sheet
        anything, but it's better to choose a relevant name, such as "style.css"
        or "aboutmestyles.css" so that it's clear what the file is.  Your file
        should always end in the ".css" extension.\r
        </details>\r
        <details>\r
        <summary>**How
        do I rename a file?**</summary>\r
        To rename a file, you can right click (or
        control click) on the file name and choose the "Rename" option.  This will
        allow you to type in a new file name.  Clicking on a file name after it is
        already highlighted will also allow you to rename the file.\r
        </details>\r
        <details>\r
        <summary>**How
        do I add a style sheet to a web page?**</summary>\r
        To add a style sheet
        to a web page, open up the code for the web page.  Inside the head tag, add
        the following code `<link rel="stylesheet" href="style.css">`.  Then change
        "style.css" to the name of your style sheet.\r
        </details>\r
        </div>\r
        #
        Adding a Style Sheet\r
        \r
        This is your project from before.  In the next
        level, you'll have a chance to add some different styles to it, but first,
        you need to add a style sheet, name it, and link it to your html page.\r
        \r
        1.
        Create a new style sheet for your project.\r
        2. Rename the style sheet file.\r
        3.
        Add your style sheet to your HTML page.\r
        \r
        <img src="https://cdo-curriculum.s3.amazonaws.com/media/uploads/weblab_stylesheet.png"
        style=" max-width:500px">
      CSD U2 add file_2018_markdown_instruction: |-
        <div style="float: right; height:
        250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px"
        markdown="1">\r
        <details>\r
        <summary>**What is a style sheet?**</summary>\r
        A
        style sheet is a document that controls how a web page will appear.  External
        style sheets are separate files that are linked to the HTML page.\r
        </details>\r
        <details>\r
        <summary>**What
        is CSS?**</summary>\r
        CSS is a language that controls the way content on
        a web site appears.  It uses rule-sets to change the look of a page.  Each
        rule set has a selector, which specifies which elements on the page will be
        affected, and the rules, which explain how to display the elements.   Each
        rule consists of a property and a value for that property.\r
        \r
        \r
        Here’s
        an example of a rule-set that makes the text in an `h2` tag blue and cursive:\r
        \r
        <pre>h2
        {\r
           color: blue;\r
           font-family: cursive;\r
        </pre>\r
        \r
        In this
        example, `h2` is the selector, `color` and `font-family` are properties, and
        `blue` and `cursive` are the values for those properties.\r
        </details>\r
        <details>\r
        <summary>**How
        do I create a new style sheet?**</summary>\r
        To create a new style sheet,
        click on the "Add CSS" button above the code area.\r
        </details>\r
        <details>\r
        <summary>**What
        should I name my style sheet?**</summary>\r
        You can name your style sheet
        anything, but it's better to choose a relevant name, such as "style.css"
        or "aboutmestyles.css" so that it's clear what the file is.  Your file
        should always end in the ".css" extension.\r
        </details>\r
        <details>\r
        <summary>**How
        do I rename a file?**</summary>\r
        To rename a file, you can right click (or
        control click) on the file name and choose the "Rename" option.  This will
        allow you to type in a new file name.  Clicking on a file name after it is
        already highlighted will also allow you to rename the file.\r
        </details>\r
        <details>\r
        <summary>**How
        do I add a style sheet to a web page?**</summary>\r
        To add a style sheet
        to a web page, open up the code for the web page.  Inside the head tag, add
        the following code `<link rel="stylesheet" href="style.css">`.  Then change
        "style.css" to the name of your style sheet.\r
        </details>\r
        </div>\r
        #
        Adding a Style Sheet\r
        \r
        This is your project from before.  In the next
        level, you'll have a chance to add some different styles to it, but first,
        you need to add a style sheet, name it, and link it to your html page.\r
        \r
        1.
        Create a new style sheet for your project.\r
        2. Rename the style sheet file.\r
        3.
        Add your style sheet to your HTML page.\r
        \r
        <img src="https://cdo-curriculum.s3.amazonaws.com/media/uploads/weblab_stylesheet.png"
        style=" max-width:500px">
      CSD U2 add links_markdown_instruction: |-
        # Missing Home Link\r
        \r
        Copying
        your hyperlinks to all your pages allowed you to get to most of the pages
        on your website from any other page. One hyperlink is missing - the one to
        get you to your home page (index.html).\r
        \r
        **Add a hyperlink to your home
        page from all the pages, even your home page itself.** Adding it to your home
        page will keep your navigation header consistent on all pages.
      CSD U2 challenge_markdown_instruction: |
        # Challenge\r
        \r
        Check with your
        teacher before starting on this challenge.\r
        \r
        This page is only partially
        finished, and it has some bugs.  Luckily, there are comments that should help
        you to finish the page as the author intended.\r
        \r
        # Do This\r
        \r
        * Look
        at the code and with your partner and discuss what the page should look like.\r
        *
        Work together to finish the page, paying attention to formatting.\r
        * Compare
        with another pair to see whether your pages are the same.\r
      CSD U2 challenge_2018_markdown_instruction: |
        # Challenge\r
        \r
        Check with
        your teacher before starting on this challenge.\r
        \r
        This page is only partially
        finished, and it has some bugs.  Luckily, there are comments that should help
        you to finish the page as the author intended.\r
        \r
        # Do This\r
        \r
        * Look
        at the code and with your partner and discuss what the page should look like.\r
        *
        Work together to finish the page, paying attention to formatting.\r
        * Compare
        with another pair to see whether your pages are the same.\r
      CSD U2 classes modify_markdown_instruction: |-
        <div style="float: right; height:
        250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px"
        markdown="1">\r
        <details>\r
        <summary>**How does the code work?**</summary>\r
        For
        the code to work, you need to both create a winter class and add elements
        to the class.\r
        \r
        The class is created in the style sheet, with the following
        code.\r
        \r
        <pre>.winter {\r
          color: rgb(195,230,255);\r
        }</pre>\r
        \r
        This
        code creates a class called `winter` and makes everything in the class our
        winter blue, which has the RGB values of (195,230,255).\r
        \r
        The code that
        adds a `h5` element to the winter class is `<h5 class="winter">`.  The `class=winter`
        inside the opening tag adds everything inside the tag to the class.\r
        </details>\r
        <details>\r
        <summary>**What
        rules can be added to a class rule-set?**</summary>\r
        A class rule-set can
        have the same rules as any other type of selector.  If a rule does not apply
        to the content of the class (for example, using `font-size` on an element
        with no text), then the computer will ignore that rule, but still use the
        rules that work.\r
        </details>\r
        <details>\r
        <summary>**Why does the selector
        have a period in front of it?**</summary>\r
        In CSS, a period in front of
        a selector means that the selector is the name of a class.  If there is no
        period, it means that the selector is the name of an HTML tag.\r
        </details>\r
        <details>\r
        <summary>**Why
        would a web developer use classes?**</summary>\r
        A web developer uses classes
        when some elements should be styled differently than others, even if they
        are the same tag.  Classes can also be used to give elements that have different
        tags the same style.\r
        </details>\r
        <details>\r
        <summary>**I got different
        RGB values, but mine are right, too.**</summary>\r
        Because RGB creates millions
        of different colors, some are so similar that people have a hard time telling
        them apart.  That means that there are multiple RGB values that are close
        enough to work for our winter color.\r
        \r
        </details>\r
        </div>\r
        # Adding
        Rules\r
        \r
        Your winter words should all have the same color and font.\r
        \r
        *
        Find the CSS rule-set in the style sheet that gives the winter words their
        style.\r
        * Add a rule that changes the font of the winter words.  It can
        be any font, but it will need to be different from that of the other three
        seasons.\r
        * Add any other rules you'd like for your winter words.
      CSD U2 classes modify_2018_markdown_instruction: |-
        <div style="float: right;
        height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px"
        markdown="1">\r
        <details>\r
        <summary>**How does the code work?**</summary>\r
        For
        the code to work, you need to both create a winter class and add elements
        to the class.\r
        \r
        The class is created in the style sheet, with the following
        code.\r
        \r
        <pre>.winter {\r
          color: rgb(195,230,255);\r
        }</pre>\r
        \r
        This
        code creates a class called `winter` and makes everything in the class our
        winter blue, which has the RGB values of (195,230,255).\r
        \r
        The code that
        adds a `h5` element to the winter class is `<h5 class="winter">`.  The `class=winter`
        inside the opening tag adds everything inside the tag to the class.\r
        </details>\r
        <details>\r
        <summary>**What
        rules can be added to a class rule-set?**</summary>\r
        A class rule-set can
        have the same rules as any other type of selector.  If a rule does not apply
        to the content of the class (for example, using `font-size` on an element
        with no text), then the computer will ignore that rule, but still use the
        rules that work.\r
        </details>\r
        <details>\r
        <summary>**Why does the selector
        have a period in front of it?**</summary>\r
        In CSS, a period in front of
        a selector means that the selector is the name of a class.  If there is no
        period, it means that the selector is the name of an HTML tag.\r
        </details>\r
        <details>\r
        <summary>**Why
        would a web developer use classes?**</summary>\r
        A web developer uses classes
        when some elements should be styled differently than others, even if they
        are the same tag.  Classes can also be used to give elements that have different
        tags the same style.\r
        </details>\r
        <details>\r
        <summary>**I got different
        RGB values, but mine are right, too.**</summary>\r
        Because RGB creates millions
        of different colors, some are so similar that people have a hard time telling
        them apart.  That means that there are multiple RGB values that are close
        enough to work for our winter color.\r
        \r
        </details>\r
        </div>\r
        # Adding
        Rules\r
        \r
        Your winter words should all have the same color and font.\r
        \r
        *
        Find the CSS rule-set in the style sheet that gives the winter words their
        style.\r
        * Add a rule that changes the font of the winter words.  It can
        be any font, but it will need to be different from that of the other three
        seasons.\r
        * Add any other rules you'd like for your winter words.
      CSD U2 classes sample_markdown_instruction: |-
        <div style="float: right; height:
        250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px"
        markdown="1">\r
        <details>\r
        <summary>**How does the code work?**</summary>\r
        For
        the code to work, you need to both create a winter class and add elements
        to the class.\r
        \r
        The class is created in the style sheet, with the following
        code.\r
        \r
        <pre>.winter {\r
          color: rgb(195,230,255);\r
        }</pre>\r
        \r
        This
        code creates a class called `winter` and makes everything in the class our
        winter blue, which has the RGB values of (195,230,255).\r
        \r
        The code that
        adds a `h5` element to the winter class is `<h5 class="winter">`.  The `class=winter`
        inside the opening tag adds everything inside the tag to the class.\r
        </details>\r
        <details>\r
        <summary>**Why
        does the selector have a period in front of it?**</summary>\r
        In CSS, a period
        in front of a selector means that the selector is the name of a class.  If
        there is no period, it means that the selector is the name of an HTML tag.\r
        </details>\r
        <details>\r
        <summary>**Why
        would a web developer use classes?**</summary>\r
        A web developer uses classes
        when some elements should be styled differently than others, even if they
        are the same tag.  Classes can also be used to give elements that have different
        tags the same style.\r
        </details>\r
        <details>\r
        <summary>**I got different
        RGB values, but mine are right, too.**</summary>\r
        Because RGB creates millions
        of different colors, some are so similar that people have a hard time telling
        them apart.  That means that there are multiple RGB values that are close
        enough to work for our winter color.\r
        \r
        </details>\r
        </div>\r
        # Classes\r
        \r
        In
        this page, the web developer has used classes to give some of the words our
        winter color.\r
        \r
        * Look at the HTML code for the winter words.  Why is
        "snowy" the only winter word without the winter color?\r
        * Add code to
        the HTML that will give "snowy" the same winter blue as the other words.\r
        *
        Look inside the style sheet to find the rule that makes all the words in the
        winter class blue, and check whether your RGB numbers are close to the ones
        in the style sheet.  \r
        * Discuss with your partner how the code works.
      CSD U2 classes sample_2018_markdown_instruction: |-
        <div style="float: right;
        height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px"
        markdown="1">\r
        <details>\r
        <summary>**How does the code work?**</summary>\r
        For
        the code to work, you need to both create a winter class and add elements
        to the class.\r
        \r
        The class is created in the style sheet, with the following
        code.\r
        \r
        <pre>.winter {\r
          color: rgb(195,230,255);\r
        }</pre>\r
        \r
        This
        code creates a class called `winter` and makes everything in the class our
        winter blue, which has the RGB values of (195,230,255).\r
        \r
        The code that
        adds a `h5` element to the winter class is `<h5 class="winter">`.  The `class=winter`
        inside the opening tag adds everything inside the tag to the class.\r
        </details>\r
        <details>\r
        <summary>**Why
        does the selector have a period in front of it?**</summary>\r
        In CSS, a period
        in front of a selector means that the selector is the name of a class.  If
        there is no period, it means that the selector is the name of an HTML tag.\r
        </details>\r
        <details>\r
        <summary>**Why
        would a web developer use classes?**</summary>\r
        A web developer uses classes
        when some elements should be styled differently than others, even if they
        are the same tag.  Classes can also be used to give elements that have different
        tags the same style.\r
        </details>\r
        <details>\r
        <summary>**I got different
        RGB values, but mine are right, too.**</summary>\r
        Because RGB creates millions
        of different colors, some are so similar that people have a hard time telling
        them apart.  That means that there are multiple RGB values that are close
        enough to work for our winter color.\r
        \r
        </details>\r
        </div>\r
        # Classes\r
        \r
        In
        this page, the web developer has used classes to give some of the words our
        winter color.\r
        \r
        * Look at the HTML code for the winter words.  Why is
        "snowy" the only winter word without the winter color?\r
        * Add code to
        the HTML that will give "snowy" the same winter blue as the other words.\r
        *
        Look inside the style sheet to find the rule that makes all the words in the
        winter class blue, and check whether your RGB numbers are close to the ones
        in the style sheet.  \r
        * Discuss with your partner how the code works.
      CSD U2 classes spring_markdown_instruction: |-
        <div style="float: right; height:
        250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px"
        markdown="1">\r
        <details>\r
        <summary>**How does the code work?**</summary>\r
        For
        the code to work, you need to both create a spring class and add elements
        to the class.\r
        \r
        The spring class is already created in the style sheet,
        but it doesn't have any rules.\r
        \r
        <pre>.spring {\r
          color: rgb(195,230,255);\r
        }</pre>\r
        \r
        Look
        at the rules in the `winter` class for clues to how to make rules for the
        summer class.\r
        \r
        You will also need to add some elements to the spring
        class inside your HTML file.\r
        \r
        The code in the HTML file that adds a
        `h5` element to the winter class is `<h5 class="winter">`.  Use this pattern
        to add elements to the spring class, too.\r
        </details>\r
        <details>\r
        <summary>**What
        rules can be added to a class rule-set?**</summary>\r
        A class rule-set can
        have the same rules as any other type of selector.  If a rule does not apply
        to the content of the class (for example, using `font-size` on an element
        with no text), then the computer will ignore that rule, but still use the
        rules that work.\r
        </details>\r
        <details>\r
        <summary>**Why does the selector
        have a period in front of it?**</summary>\r
        In CSS, a period in front of
        a selector means that the selector is the name of a class.  If there is no
        period, it means that the selector is the name of an HTML tag.\r
        </details>\r
        <details>\r
        <summary>**Why
        would a web developer use classes?**</summary>\r
        A web developer uses classes
        when some elements should be styled differently than others, even if they
        are the same tag.  Classes can also be used to give elements that have different
        tags the same style.\r
        </details>\r
        </div>\r
        # Spring Class\r
        \r
        Now
        that your winter class is ready, you can start on the other seasons.\r
        \r
        *
        Find the empty CSS rule-set in the style sheet that gives the spring words
        their style.\r
        * Add two rules, one to give the text your spring color for
        earlier in the lesson, and another to give the text a different font, font
        size, or decoration.\r
        * Add the spring class to the spring elements in the
        HTML page.
      CSD U2 classes spring_2018_markdown_instruction: |-
        <div style="float: right;
        height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px"
        markdown="1">\r
        <details>\r
        <summary>**How does the code work?**</summary>\r
        For
        the code to work, you need to both create a spring class and add elements
        to the class.\r
        \r
        The spring class is already created in the style sheet,
        but it doesn't have any rules.\r
        \r
        <pre>.spring {\r
          color: rgb(195,230,255);\r
        }</pre>\r
        \r
        Look
        at the rules in the `winter` class for clues to how to make rules for the
        summer class.\r
        \r
        You will also need to add some elements to the spring
        class inside your HTML file.\r
        \r
        The code in the HTML file that adds a
        `h5` element to the winter class is `<h5 class="winter">`.  Use this pattern
        to add elements to the spring class, too.\r
        </details>\r
        <details>\r
        <summary>**What
        rules can be added to a class rule-set?**</summary>\r
        A class rule-set can
        have the same rules as any other type of selector.  If a rule does not apply
        to the content of the class (for example, using `font-size` on an element
        with no text), then the computer will ignore that rule, but still use the
        rules that work.\r
        </details>\r
        <details>\r
        <summary>**Why does the selector
        have a period in front of it?**</summary>\r
        In CSS, a period in front of
        a selector means that the selector is the name of a class.  If there is no
        period, it means that the selector is the name of an HTML tag.\r
        </details>\r
        <details>\r
        <summary>**Why
        would a web developer use classes?**</summary>\r
        A web developer uses classes
        when some elements should be styled differently than others, even if they
        are the same tag.  Classes can also be used to give elements that have different
        tags the same style.\r
        </details>\r
        </div>\r
        # Spring Class\r
        \r
        Now
        that your winter class is ready, you can start on the other seasons.\r
        \r
        *
        Find the empty CSS rule-set in the style sheet that gives the spring words
        their style.\r
        * Add two rules, one to give the text your spring color for
        earlier in the lesson, and another to give the text a different font, font
        size, or decoration.\r
        * Add the spring class to the spring elements in the
        HTML page.
      CSD U2 classes summer_markdown_instruction: |-
        <div style="float: right; height:
        250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px"
        markdown="1">\r
        <details>\r
        <summary>**How does the code work?**</summary>\r
        For
        the code for the winter class to work, it needs to both create a winter class
        and add elements to the class.\r
        \r
        The class is created in the style sheet,
        with the following code.\r
        \r
        <pre>.winter {\r
          color: rgb(195,230,255);\r
        }</pre>\r
        \r
        This
        code creates a class called `winter` and makes everything in the class our
        winter blue, which has the RGB values of (195,230,255).\r
        \r
        The code that
        adds a `h5` element to the winter class is `<h5 class="winter">`.  The `class=winter`
        inside the opening tag adds everything inside the tag to the class.\r
        </details>\r
        <details>\r
        <summary>**How
        do I create a new rule-set?**</summary>\r
        You can create a new rule-set by
        following the pattern that the `winter` and `spring` classes used in the style
        sheet.\r
        <pre>.winter {\r
          color: rgb(195,230,255);\r
        }</pre>\r
        \r
        The
        selector name and the color values will be different, but the following pattern
        is always the same.\r
        \r
        <pre>.classname {\r
          property1: value1;\r
          property2:
        value2;\r
        }</pre>\r
        </details>\r
        <details>\r
        <summary>**Why does the selector
        have a period in front of it?**</summary>\r
        In CSS, a period in front of
        a selector means that the selector is the name of a class.  If there is no
        period, it means that the selector is the name of an HTML tag.\r
        </details>\r
        <details>\r
        <summary>**Why
        would a web developer use classes?**</summary>\r
        A web developer uses classes
        when some elements should be styled differently than others, even if they
        are the same tag.  Classes can also be used to give elements that have different
        tags the same style.\r
        </details>\r
        </div>\r
        # Summer and Autumn Classes\r
        \r
        *
        Inside the style sheet, create a new rule-set for a "summer" class.\r
        *
        Add a rule to set the text in the summer class to your summer RGB color.\r
        *
        Add the summer class to the summer elements in the HTML page.\r
        * Do the
        same for the autumn class.
      CSD U2 classes summer_2018_markdown_instruction: |-
        <div style="float: right;
        height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px"
        markdown="1">\r
        <details>\r
        <summary>**How does the code work?**</summary>\r
        For
        the code for the winter class to work, it needs to both create a winter class
        and add elements to the class.\r
        \r
        The class is created in the style sheet,
        with the following code.\r
        \r
        <pre>.winter {\r
          color: rgb(195,230,255);\r
        }</pre>\r
        \r
        This
        code creates a class called `winter` and makes everything in the class our
        winter blue, which has the RGB values of (195,230,255).\r
        \r
        The code that
        adds a `h5` element to the winter class is `<h5 class="winter">`.  The `class=winter`
        inside the opening tag adds everything inside the tag to the class.\r
        </details>\r
        <details>\r
        <summary>**How
        do I create a new rule-set?**</summary>\r
        You can create a new rule-set by
        following the pattern that the `winter` and `spring` classes used in the style
        sheet.\r
        <pre>.winter {\r
          color: rgb(195,230,255);\r
        }</pre>\r
        \r
        The
        selector name and the color values will be different, but the following pattern
        is always the same.\r
        \r
        <pre>.classname {\r
          property1: value1;\r
          property2:
        value2;\r
        }</pre>\r
        </details>\r
        <details>\r
        <summary>**Why does the selector
        have a period in front of it?**</summary>\r
        In CSS, a period in front of
        a selector means that the selector is the name of a class.  If there is no
        period, it means that the selector is the name of an HTML tag.\r
        </details>\r
        <details>\r
        <summary>**Why
        would a web developer use classes?**</summary>\r
        A web developer uses classes
        when some elements should be styled differently than others, even if they
        are the same tag.  Classes can also be used to give elements that have different
        tags the same style.\r
        </details>\r
        </div>\r
        # Summer and Autumn Classes\r
        \r
        *
        Inside the style sheet, create a new rule-set for a "summer" class.\r
        *
        Add a rule to set the text in the summer class to your summer RGB color.\r
        *
        Add the summer class to the summer elements in the HTML page.\r
        * Do the
        same for the autumn class.
      CSD U2 commenting_markdown_instruction: |-
        # Comments\r
        <div style="float:
        right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px"
        markdown="1">\r
        <details>\r
        <summary>**What is whitespace?**</summary>\r
        Whitespace
        refers to any character that shows up as a blank space on the screen, such
        as a space, a tab, or a new line. Whitespace helps separate different parts
        of the document to make it easier to read.  For example, in HTML code new
        elements are usually put on a new line, even though it doesn't make any difference
        in how the page is displayed.\r
        </details>\r
        <details>\r
        <summary>**What
        is indentation?**</summary>\r
        Indentation is the placement of text farther
        to the right, or left, to separate it from surrounding text.  Indentation
        helps to convey the program's structure.  In HTML, elements that are inside
        other elements are usually indented.  Here is an example:\r
        <pre>\r
           &lt;body&gt;\r
              &lt;p&gt;This
        paragraph is inside the "body" element.&lt;/p&gt;\r
           &lt;/body&gt;\r
        </pre>\r
        \r
        </details>\r
        <details>\r
        <summary>**What
        is formatting?**</summary>\r
        Formatting is arranging text in a way that makes
        it easier to understand.  HTML is usually formatted using indentation.  That
        means that elements that are inside other elements are further to the right
        in code.  Here is an example:\r
        <pre>\r
           &lt;body&gt;\r
              &lt;p&gt;This
        paragraph is inside the "body" element.&lt;/p&gt;\r
           &lt;/body&gt;\r
        </pre>\r
        </details>\r
        </div>\r
        \r
        You
        can add **comments** to your code to explain the different parts of the code
        and what it should create.  Comments can help you to debug, and will also
        help other people who are trying to understand your code.\r
        \r
        <pre>\r
        &lt;!--
        this is a comment --&gt;\r
        </pre>\r
        \r
        # Do This\r
        \r
        * Look at the code
        with your partner and find the comments.\r
        * Use the comments to help you
        fix the bugs in the HTML.
      CSD U2 commenting_2018_markdown_instruction: |-
        # Comments\r
        <div style="float:
        right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px"
        markdown="1">\r
        <details>\r
        <summary>**What is whitespace?**</summary>\r
        Whitespace
        refers to any character that shows up as a blank space on the screen, such
        as a space, a tab, or a new line. Whitespace helps separate different parts
        of the document to make it easier to read.  For example, in HTML code new
        elements are usually put on a new line, even though it doesn't make any difference
        in how the page is displayed.\r
        </details>\r
        <details>\r
        <summary>**What
        is indentation?**</summary>\r
        Indentation is the placement of text farther
        to the right, or left, to separate it from surrounding text.  Indentation
        helps to convey the program's structure.  In HTML, elements that are inside
        other elements are usually indented.  Here is an example:\r
        <pre>\r
           &lt;body&gt;\r
              &lt;p&gt;This
        paragraph is inside the "body" element.&lt;/p&gt;\r
           &lt;/body&gt;\r
        </pre>\r
        \r
        </details>\r
        <details>\r
        <summary>**What
        is formatting?**</summary>\r
        Formatting is arranging text in a way that makes
        it easier to understand.  HTML is usually formatted using indentation.  That
        means that elements that are inside other elements are further to the right
        in code.  Here is an example:\r
        <pre>\r
           &lt;body&gt;\r
              &lt;p&gt;This
        paragraph is inside the "body" element.&lt;/p&gt;\r
           &lt;/body&gt;\r
        </pre>\r
        </details>\r
        </div>\r
        \r
        You
        can add **comments** to your code to explain the different parts of the code
        and what it should create.  Comments can help you to debug, and will also
        help other people who are trying to understand your code.\r
        \r
        <pre>\r
        &lt;!--
        this is a comment --&gt;\r
        </pre>\r
        \r
        # Do This\r
        \r
        * Look at the code
        with your partner and find the comments.\r
        * Use the comments to help you
        fix the bugs in the HTML.
      CSD U2 create page_markdown_instruction: |
        # Create and Name Your New Page\r
        \r
        Before
        you start coding, you should make sure that you have all the pages that you
        need in your project.\r
        \r
        # Do This\r
        * Create a new HTML page and rename
        it. (Look at <a href="/s/csd2/stage/6/puzzle/8" target="_new">Lesson 6
        Level 8</a> if you've forgotten how.)\r
        * Repeat this process for any other
        pages you want to add.\r
        \r
      CSD U2 create page_2018_markdown_instruction: |
        # Create and Name Your New Page\r
        \r
        Before
        you start coding, you should make sure that you have all the pages that you
        need in your project.\r
        \r
        # Do This\r
        * Create a new HTML page and rename
        it. (Look at <a href="/s/csd2/stage/6/puzzle/8" target="_new">Lesson 6
        Level 8</a> if you've forgotten how.)\r
        * Repeat this process for any other
        pages you want to add.\r
        \r
      CSD U2 debug comments_markdown_instruction: |-
        # Debugging\r
        \r
        This page has
        images in it. Images make finding bugs a little more tricky. Can you debug
        this page?\r
        \r
        As you are debugging you may notice a new set of symbols
        that look something like this:\r
        <pre>\r
        &lt;!-- this is a comment --&gt;\r
        </pre>\r
        \r
        This
        is a **comment**. Comments are written by computer scientists creating web
        pages for themselves and other humans who might look at their HTML file. Comments
        explain the different parts of the code and what it should create.  Comments
        might help you debug.\r
        \r
        # Do This\r
        \r
        * Find and fix all bugs in the
        starting HTML\r
        * You know you’ve found all of the bugs when your page matches
        the <a href="https://thimbleprojects.org/danimcavoy/103295/" target="_blank">
        Target Page</a>.
      CSD U2 header footer_markdown_instruction: |-
        # Navigation Bar and Footer\r
        \r
        Each
        of your pages needs a navigation bar and a footer.\r
        \r
        # Do This\r
        * For
        each page, make sure it has a navigation bar that links to other pages in
        your site.  For a review of the navigation bar, go to <a href="/s/csd2/stage/9/puzzle/4"
        target="_new">Lesson 9 Level 4</a>.\r
        * For each page, make sure it has
        a footer at the bottom that explains the copyright information for your page.
        (Go to <a href="https://creativecommons.org/choose/" target="_new">Creative
        Commons</a> for help in creating this HTML.)
      CSD U2 header footer_2018_markdown_instruction: |-
        # Navigation Bar and Footer\r
        \r
        Each
        of your pages needs a navigation bar and a footer.\r
        \r
        # Do This\r
        * For
        each page, make sure it has a navigation bar that links to other pages in
        your site.  For a review of the navigation bar, go to <a href="/s/csd2/stage/9/puzzle/4"
        target="_new">Lesson 9 Level 4</a>.\r
        * For each page, make sure it has
        a footer at the bottom that explains the copyright information for your page.
        (Go to <a href="https://creativecommons.org/choose/" target="_new">Creative
        Commons</a> for help in creating this HTML.)
      CSD U2 image tag_markdown_instruction: |-
        <div style="float: right; height:
        250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px">\r
        <details>\r
        <summary>**How
        do I add images?**</summary>\r
        The `<img>` tag allows you to show images
        on your web page. <br><br>\r
        \r
        Example:\r
        <pre>&lt;img src="dog.png"
        alt="dog jumping"/&gt;</pre><br><br>\r
        \r
        In order to tell the browser
        which file to use, extra information, called an **attribute**, is added to
        the &lt;img&gt; tag inside the brackets. The attribute `src` stands for **s**ou**rc**e
        and tell the name of the image. Image files names include extensions which
        tell the computer which type of image they are working with. Common extensions
        are .jpg, .jpeg, .png. <br><br>\r
        \r
        In addition to have the src attribute,
        image elements also have the `alt` attribute which describe the image. This
        is important in case the image doesn’t load or for people who have trouble
        with their eyesight. <br><br>\r
        \r
        An `<img>` tag is an example of a  **void
        element** because it starts and closes in one tag. To mark this we put the
        `/` which usually goes in the close tag at the end of the image tag.\r
        \r
        </details>\r
        <details>\r
        <summary>**What
        is a void tag?**</summary>\r
        An `<img>` tag is an example of a  **void element**
        because it starts and closes in one tag. To mark this we put the `/` which
        usually goes in the close tag at the end of the image tag. Void tags do not
        need a closing tag because there is no text content which must be wrapped
        in tags. The content that shows on the screen is specified through the tags
        attributes.\r
        </details>\r
        <details>\r
        <summary>**Why does an image tag
        not have a closing tag?**</summary>\r
        An image tag is a void tag and void
        tags do not need a closing tag because there is no text content which must
        be wrapped in tags. The content that shows on the screen is specified through
        the tags attributes.\r
        </details>\r
        <details>\r
        <summary>**What is an attribute?**</summary>\r
        Attributes
        are extra information included in a tag.  Attributes have names and values.
        The name tells what type of information is being provided and then the value
        gives the specific information for that tag. \r
        \r
        For example &lt;img&gt;
        tags have two attributes, src and alt. src specifies the name of the image
        file and alt tells the browser in readable text what the image is.\r
        </details>\r
        </div>\r
        \r
        #
        Images\r
        \r
        A Dog vs Cat web page has been started for you. The dog image
        has already been added to the below web page. Use an image tag to add the
        cat.jpeg image to the page below the cat header.
      CSD U2 images intro_markdown_instruction: |-
        # Images\r
        <div style="float:
        right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px">\r
        <details>\r
        <summary>**How
        do I add images?**</summary>\r
        The `<img>` tag allows you to show images
        on your web page. <br><br>\r
        \r
        Example:\r
        <pre>&lt;img src="dog.png"
        alt="dog jumping"/&gt;</pre><br><br>\r
        \r
        In order to tell the browser
        which file to use, extra information, called an **attribute**, is added to
        the &lt;img&gt; tag inside the brackets. The attribute `src` stands for **s**ou**rc**e
        and tell the name of the image. Image files names include extensions which
        tell the computer which type of image they are working with. Common extensions
        are .jpg, .jpeg, .png. <br><br>\r
        \r
        In addition to have the src attribute,
        image elements also have the `alt` attribute which describe the image. This
        is important in case the image doesn’t load or for people who have trouble
        with their eyesight. <br><br>\r
        \r
        An `<img>` tag is an example of a  **void
        element** because it starts and closes in one tag. To mark this we put the
        `/` which usually goes in the close tag at the end of the image tag.\r
        \r
        </details>\r
        <details>\r
        <summary>**What
        is a void tag?**</summary>\r
        An `<img>` tag is an example of a  **void element**
        because it starts and closes in one tag. To mark this we put the `/` which
        usually goes in the close tag at the end of the image tag. Void tags do not
        need a closing tag because there is no text content which must be wrapped
        in tags. The content that shows on the screen is specified through the tags
        attributes.\r
        </details>\r
        <details>\r
        <summary>**Why does an image tag
        not have a closing tag?**</summary>\r
        An image tag is a void tag and void
        tags do not need a closing tag because there is no text content which must
        be wrapped in tags. The content that shows on the screen is specified through
        the tags attributes.\r
        </details>\r
        <details>\r
        <summary>**What is an attribute?**</summary>\r
        Attributes
        are extra information included in a tag.  Attributes have names and values.
        The name tells what type of information is being provided and then the value
        gives the specific information for that tag. \r
        \r
        For example &lt;img&gt;
        tags have two attributes, src and alt. src specifies the name of the image
        file and alt tells the browser in readable text what the image is.\r
        </details>\r
        </div>\r
        \r
        The
        recipe page would look a lot better with a picture of the scotcheroos, so
        we added one onto this page.  It might look better somewhere else on the page,
        though.\r
        \r
        # Do This\r
        * Look at the file list on the left of your workspace,
        and find the file named "scotcheroos.jpeg"\r
        * Use the inspector tool to
        find the code that made the image appear on the page.\r
        * Make sure you and
        your partner agree on how the image tag works.\r
        * Try to move the picture
        to the top of the page.
      CSD U2 layout style bgcolor_markdown_instruction: |-
        <div style="float: right;
        height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px"
        markdown="1">\r
        <details>\r
        <summary>**How does the code work?**</summary>\r
        Here
        is the code that is making the background of the page blue:\r
        \r
        <pre>body
        {\r
          background-color: lightblue;\r
        }</pre>\r
        \r
        * `body` is the _selector_.  It
        specifies which elements will have to follow the rules inside the curly braces,
        in this case, the body element is the entire page.\r
        * `background-color:
        lightblue;` is the rule that makes the entire page light blue.\r
         * `background-color`
        is the _property_.  It explains what the rule is about, in this case the color
        of the background.\r
         * `lightblue` is the _value_.  It explains how the
        rule should be applied, in this case making the background light blue.\r
        </details>\r
        <details>\r
        <summary>**What
        colors can I use in CSS?**</summary>\r
        CSS includes most common color names
        (red, blue, green, etc.), and many uncommon ones.  You can see a full list
        of CSS color names at <a href="http://www.w3schools.com/colors/colors_names.asp">W3Schools
        - HTML Color Names</a>.  You can still use colors that are not included in
        the named list, but you will need to use their RGB values.  You can read more
        about using colors in CSS at <a href="http://www.w3schools.com/cssref/css_colors_legal.asp">W3Schools
        - CSS Legal Color Values</a>\r
        </details>\r
        <details>\r
        <summary>**What
        does the `background-color` property do?**</summary>\r
        The `background-color`
        property determines the color of the background of an element.  You can read
        more about the property at <a href="http://www.w3schools.com/cssref/pr_background-color.asp">W3Schools
        - CSS background-color Property</a>\r
        </details>\r
        <details>\r
        <summary>**What
        if an element inside the page has a different background color from the body?**</summary>\r
        You
        can see the answer to this question by adding a `background-color` rule to
        the `p` tag.  The paragraphs will have the background color in the rule for
        the `p` tag, and the rest of the page will follow the rule for the `body`
        tag.\r
        </details>\r
        <details>\r
        <summary>**What is a style sheet?**</summary>\r
        A
        style sheet is a document that controls how a web page will appear.  External
        style sheets are separate files that are linked to the HTML page.\r
        </details>\r
        <details>\r
        <summary>**What
        is CSS?**</summary>\r
        CSS is a language that controls the way content on
        a web site appears.  It uses rule-sets to change the look of a page.  Each
        rule set has a selector, which specifies which elements on the page will be
        affected, and the rules, which explain how to display the elements.   Each
        rule consists of a property and a value for that property.\r
        \r
        \r
        Here’s
        an example of a rule-set that makes the text in an `h2` tag blue and cursive:\r
        \r
        <pre>h2
        {\r
           color: blue;\r
           font-family: cursive;\r
        </pre>\r
        \r
        In this
        example, `h2` is the selector, `color` and `font-family` are properties, and
        `blue` and `cursive` are the values for those properties.\r
        </details>\r
        </div>\r
        \r
        #
        Background Color\r
        \r
        * Find the code in the style sheet that is making
        the background of the entire page light blue.\r
        * Change the code to make
        the page a different color.\r
        * Try to change the background color of just
        the paragraphs.
      CSD U2 layout style bgcolor_2018_markdown_instruction: |-
        <div style="float:
        right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px"
        markdown="1">\r
        <details>\r
        <summary>**How does the code work?**</summary>\r
        Here
        is the code that is making the background of the page blue:\r
        \r
        <pre>body
        {\r
          background-color: lightblue;\r
        }</pre>\r
        \r
        * `body` is the _selector_.  It
        specifies which elements will have to follow the rules inside the curly braces,
        in this case, the body element is the entire page.\r
        * `background-color:
        lightblue;` is the rule that makes the entire page light blue.\r
         * `background-color`
        is the _property_.  It explains what the rule is about, in this case the color
        of the background.\r
         * `lightblue` is the _value_.  It explains how the
        rule should be applied, in this case making the background light blue.\r
        </details>\r
        <details>\r
        <summary>**What
        colors can I use in CSS?**</summary>\r
        CSS includes most common color names
        (red, blue, green, etc.), and many uncommon ones.  You can see a full list
        of CSS color names at <a href="http://www.w3schools.com/colors/colors_names.asp">W3Schools
        - HTML Color Names</a>.  You can still use colors that are not included in
        the named list, but you will need to use their RGB values.  You can read more
        about using colors in CSS at <a href="http://www.w3schools.com/cssref/css_colors_legal.asp">W3Schools
        - CSS Legal Color Values</a>\r
        </details>\r
        <details>\r
        <summary>**What
        does the `background-color` property do?**</summary>\r
        The `background-color`
        property determines the color of the background of an element.  You can read
        more about the property at <a href="http://www.w3schools.com/cssref/pr_background-color.asp">W3Schools
        - CSS background-color Property</a>\r
        </details>\r
        <details>\r
        <summary>**What
        if an element inside the page has a different background color from the body?**</summary>\r
        You
        can see the answer to this question by adding a `background-color` rule to
        the `p` tag.  The paragraphs will have the background color in the rule for
        the `p` tag, and the rest of the page will follow the rule for the `body`
        tag.\r
        </details>\r
        <details>\r
        <summary>**What is a style sheet?**</summary>\r
        A
        style sheet is a document that controls how a web page will appear.  External
        style sheets are separate files that are linked to the HTML page.\r
        </details>\r
        <details>\r
        <summary>**What
        is CSS?**</summary>\r
        CSS is a language that controls the way content on
        a web site appears.  It uses rule-sets to change the look of a page.  Each
        rule set has a selector, which specifies which elements on the page will be
        affected, and the rules, which explain how to display the elements.   Each
        rule consists of a property and a value for that property.\r
        \r
        \r
        Here’s
        an example of a rule-set that makes the text in an `h2` tag blue and cursive:\r
        \r
        <pre>h2
        {\r
           color: blue;\r
           font-family: cursive;\r
        </pre>\r
        \r
        In this
        example, `h2` is the selector, `color` and `font-family` are properties, and
        `blue` and `cursive` are the values for those properties.\r
        </details>\r
        </div>\r
        \r
        #
        Background Color\r
        \r
        * Find the code in the style sheet that is making
        the background of the entire page light blue.\r
        * Change the code to make
        the page a different color.\r
        * Try to change the background color of just
        the paragraphs.
      CSD U2 layout style body_markdown_instruction: |-
        <div style="float: right;
        height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px"
        markdown="1">\r
        <details>\r
        <summary>**What does the `body` selector do?**</summary>\r
        Because
        the content of the web page is all inside the `body` tag, the body selector
        gives style rules for everything on the web page.\r
        </details>\r
        <details>\r
        <summary>**What
        does the `color` property do?**</summary>\r
        The `color` property specifies
        the color of the text.  If there’s no text, it won’t do anything. Read more
        at <a href="http://www.w3schools.com/cssref/pr_text_color.asp"> W3Schools
        - CSS color Property</a>\r
        </details>\r
        <details>\r
        <summary>**What does
        the `text-align` property do?**</summary>\r
        The `text-align` property aligns
        the text to the left, right, or center. You can read more at <a href="http://www.w3schools.com/cssref/pr_text_text-align.asp">W3Schools
        - CSS text-align Property</a>\r
        </details>\r
        <details>\r
        <summary>**What
        does the `text-decoration` property do?**</summary>\r
        The `text-decoration`
        property puts a line over, under, or through a piece of text.  You can read
        more about the property at <a href="http://www.w3schools.com/cssref/pr_text_text-decoration.asp">W3Schools
        - CSS text-decoration Property</a>\r
        </details>\r
        <details>\r
        <summary>**What
        does the `font-family` property do?**</summary>\r
        The `font-family` property
        changes the font of the text.  It gives a general description of the type
        of font that should be used, but each browser might display the font slightly
        differently.  Read more at <a href="http://www.w3schools.com/cssref/pr_font_font-family.asp">W3chools
        - CSS font-family Property</a>\r
        </details>\r
        <details>\r
        <summary>**What
        does the `font-size` property do?**</summary>\r
        The `font-size` property
        changes the size of the text.  You can use general terms, such as `small`,
        `medium`, and `large`, or you can specify the exact size in pixels, such as
        `20px`. Read more at <a href="http://www.w3schools.com/cssref/pr_font_font-size.asp">W3Schools
        - CSS font-size Property</a>\r
        </details>\r
        <details>\r
        <summary>**What
        is a stylesheet?**</summary>\r
        A style sheet is a document that controls
        how a web page will appear.  External style sheets are separate files that
        are linked to the HTML page.\r
        </details>\r
        <details>\r
        <summary>**What
        is CSS?**</summary>\r
        CSS is a language that controls the way content on
        a web site appears.  It uses rule-sets to change the look of a page.  Each
        rule set has a selector, which specifies which elements on the page will be
        affected, and the rules, which explain how to display the elements.   Each
        rule consists of a property and a value for that property.\r
        \r
        \r
        Here’s
        an example of a rule-set that makes the text in an `h2` tag blue and cursive:\r
        \r
        <pre>h2
        {\r
           color: blue;\r
           font-family: cursive;\r
        </pre>\r
        \r
        In this
        example, `h2` is the selector, `color` and `font-family` are properties, and
        `blue` and `cursive` are the values for those properties.\r
        </details>\r
        </div>\r
        \r
        #
        The Body Element\r
        \r
        * Find the `body` rule-set in the style sheet.\r
        *
        Discuss with a partner what you think will happen if you add `text-align`,
        `color`, or other text properties to the `body` rule set.\r
        * Try out some
        different properties to check your guesses.
      CSD U2 layout style body_2018_markdown_instruction: |-
        <div style="float: right;
        height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px"
        markdown="1">\r
        <details>\r
        <summary>**What does the `body` selector do?**</summary>\r
        Because
        the content of the web page is all inside the `body` tag, the body selector
        gives style rules for everything on the web page.\r
        </details>\r
        <details>\r
        <summary>**What
        does the `color` property do?**</summary>\r
        The `color` property specifies
        the color of the text.  If there’s no text, it won’t do anything. Read more
        at <a href="http://www.w3schools.com/cssref/pr_text_color.asp"> W3Schools
        - CSS color Property</a>\r
        </details>\r
        <details>\r
        <summary>**What does
        the `text-align` property do?**</summary>\r
        The `text-align` property aligns
        the text to the left, right, or center. You can read more at <a href="http://www.w3schools.com/cssref/pr_text_text-align.asp">W3Schools
        - CSS text-align Property</a>\r
        </details>\r
        <details>\r
        <summary>**What
        does the `text-decoration` property do?**</summary>\r
        The `text-decoration`
        property puts a line over, under, or through a piece of text.  You can read
        more about the property at <a href="http://www.w3schools.com/cssref/pr_text_text-decoration.asp">W3Schools
        - CSS text-decoration Property</a>\r
        </details>\r
        <details>\r
        <summary>**What
        does the `font-family` property do?**</summary>\r
        The `font-family` property
        changes the font of the text.  It gives a general description of the type
        of font that should be used, but each browser might display the font slightly
        differently.  Read more at <a href="http://www.w3schools.com/cssref/pr_font_font-family.asp">W3chools
        - CSS font-family Property</a>\r
        </details>\r
        <details>\r
        <summary>**What
        does the `font-size` property do?**</summary>\r
        The `font-size` property
        changes the size of the text.  You can use general terms, such as `small`,
        `medium`, and `large`, or you can specify the exact size in pixels, such as
        `20px`. Read more at <a href="http://www.w3schools.com/cssref/pr_font_font-size.asp">W3Schools
        - CSS font-size Property</a>\r
        </details>\r
        <details>\r
        <summary>**What
        is a stylesheet?**</summary>\r
        A style sheet is a document that controls
        how a web page will appear.  External style sheets are separate files that
        are linked to the HTML page.\r
        </details>\r
        <details>\r
        <summary>**What
        is CSS?**</summary>\r
        CSS is a language that controls the way content on
        a web site appears.  It uses rule-sets to change the look of a page.  Each
        rule set has a selector, which specifies which elements on the page will be
        affected, and the rules, which explain how to display the elements.   Each
        rule consists of a property and a value for that property.\r
        \r
        \r
        Here’s
        an example of a rule-set that makes the text in an `h2` tag blue and cursive:\r
        \r
        <pre>h2
        {\r
           color: blue;\r
           font-family: cursive;\r
        </pre>\r
        \r
        In this
        example, `h2` is the selector, `color` and `font-family` are properties, and
        `blue` and `cursive` are the values for those properties.\r
        </details>\r
        </div>\r
        \r
        #
        The Body Element\r
        \r
        * Find the `body` rule-set in the style sheet.\r
        *
        Discuss with a partner what you think will happen if you add `text-align`,
        `color`, or other text properties to the `body` rule set.\r
        * Try out some
        different properties to check your guesses.
      CSD U2 layout style border_markdown_instruction: |-
        <div style="float: right;
        height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px"
        markdown="1">\r
        <details>\r
        <summary>**What colors can I use in CSS?**</summary>\r
        CSS
        includes most common color names (red, blue, green, etc.), and many uncommon
        ones.  You can see a full list of CSS color names at <a href="http://www.w3schools.com/colors/colors_names.asp">W3Schools
        - HTML Color Names</a>.  You can still use colors that are not included in
        the named list, but you will need to use their RGB values.  You can read more
        about using colors in CSS at <a href="http://www.w3schools.com/cssref/css_colors_legal.asp">W3Schools
        - CSS Legal Color Values</a>\r
        </details>\r
        <details>\r
        <summary>**How
        does the code work?**</summary>\r
        Here is the code that is making the image
        borders:\r
        \r
        <pre>img {\r
          border-color: saddlebrown;\r
          border-width:
        4px;\r
          border-style: solid;\r
          border-radius: 10px;\r
        }</pre>\r
        \r
        *
        `img` is the _selector_.  It specifies which elements will have to follow
        the rules inside the curly braces, in this case, the images.\r
        * `border-color:
        saddlebrown;`,`border-width: 4px;`,`border-style: solid;`, and `border-radius:
        10px;` are the rules that make the border.\r
        </details>\r
        <details>\r
        <summary>**What
        does the `border-style` property do?**</summary>\r
        The `border-style` property
        determines what kind of border (solid, dotted, etc.) the element has.  You
        can read more about this property at <a href="http://www.w3schools.com/cssref/pr_border-style.asp">W3Schools
        - CSS border-style Property</a>\r
        </details>\r
        <details>\r
        <summary>**What
        does the `border-radius` property do?**</summary>\r
        The `border-radius` property
        determines the radius of the curves at the corners of the element.  A bigger
        radius makes a bigger, softer curve, and a smaller radius makes a smaller,
        sharper curve.  A radius of zero makes a regular corner.  You can read more
        about this property at <a href="http://www.w3schools.com/cssref/css3_pr_border-radius.asp">W3Schools
        - CSS3 border-radius property</a>\r
        </details>\r
        <details>\r
        <summary>**What
        does the `float` property do?**</summary>\r
        The `float` property makes an
        element "float", meaning that the elements that come after it all flow around
        it.  If the `float` value is `left`, the element will float to the left, and
        the elements after it will show up on its right.  If the `float` value is
        `right`, the element will float to the right, and the elements after it will
        show up on its left.  You can read more about this property at <a href="http://www.w3schools.com/cssref/pr_class_float.asp">W3Schools
        - CSS float Property</a>\r
        </details>\r
        </div>\r
        \r
        # Borders\r
        \r
        *
        Find the rules in the style sheet that set image borders color and width.\r
        *
        Change the color and width of your borders.\r
        * Try out some different border
        styles.\r
          * Choose from `dotted`, `dashed`, `solid`, and `double`\r
        *
        Put a border on another type of page element, such as one of the headings
        or the paragraphs.
      CSD U2 layout style border_2018_markdown_instruction: |-
        <div style="float:
        right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px"
        markdown="1">\r
        <details>\r
        <summary>**What colors can I use in CSS?**</summary>\r
        CSS
        includes most common color names (red, blue, green, etc.), and many uncommon
        ones.  You can see a full list of CSS color names at <a href="http://www.w3schools.com/colors/colors_names.asp">W3Schools
        - HTML Color Names</a>.  You can still use colors that are not included in
        the named list, but you will need to use their RGB values.  You can read more
        about using colors in CSS at <a href="http://www.w3schools.com/cssref/css_colors_legal.asp">W3Schools
        - CSS Legal Color Values</a>\r
        </details>\r
        <details>\r
        <summary>**How
        does the code work?**</summary>\r
        Here is the code that is making the image
        borders:\r
        \r
        <pre>img {\r
          border-color: saddlebrown;\r
          border-width:
        4px;\r
          border-style: solid;\r
          border-radius: 10px;\r
        }</pre>\r
        \r
        *
        `img` is the _selector_.  It specifies which elements will have to follow
        the rules inside the curly braces, in this case, the images.\r
        * `border-color:
        saddlebrown;`,`border-width: 4px;`,`border-style: solid;`, and `border-radius:
        10px;` are the rules that make the border.\r
        </details>\r
        <details>\r
        <summary>**What
        does the `border-style` property do?**</summary>\r
        The `border-style` property
        determines what kind of border (solid, dotted, etc.) the element has.  You
        can read more about this property at <a href="http://www.w3schools.com/cssref/pr_border-style.asp">W3Schools
        - CSS border-style Property</a>\r
        </details>\r
        <details>\r
        <summary>**What
        does the `border-radius` property do?**</summary>\r
        The `border-radius` property
        determines the radius of the curves at the corners of the element.  A bigger
        radius makes a bigger, softer curve, and a smaller radius makes a smaller,
        sharper curve.  A radius of zero makes a regular corner.  You can read more
        about this property at <a href="http://www.w3schools.com/cssref/css3_pr_border-radius.asp">W3Schools
        - CSS3 border-radius property</a>\r
        </details>\r
        <details>\r
        <summary>**What
        does the `float` property do?**</summary>\r
        The `float` property makes an
        element "float", meaning that the elements that come after it all flow around
        it.  If the `float` value is `left`, the element will float to the left, and
        the elements after it will show up on its right.  If the `float` value is
        `right`, the element will float to the right, and the elements after it will
        show up on its left.  You can read more about this property at <a href="http://www.w3schools.com/cssref/pr_class_float.asp">W3Schools
        - CSS float Property</a>\r
        </details>\r
        </div>\r
        \r
        # Borders\r
        \r
        *
        Find the rules in the style sheet that set image borders color and width.\r
        *
        Change the color and width of your borders.\r
        * Try out some different border
        styles.\r
          * Choose from `dotted`, `dashed`, `solid`, and `double`\r
        *
        Put a border on another type of page element, such as one of the headings
        or the paragraphs.
      CSD U2 layout style borderradius_markdown_instruction: |-
        <div style="float:
        right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px"
        markdown="1">\r
        <details>\r
        <summary>**How does the code work?**</summary>\r
        Here
        is the code that is making the image borders:\r
        \r
        <pre>img {\r
          border-color:
        saddlebrown;\r
          border-width: 4px;\r
          border-style: solid;\r
          border-radius:
        10px;\r
        }</pre>\r
        \r
        * `img` is the _selector_.  It specifies which elements
        will have to follow the rules inside the curly braces, in this case, the images.\r
        *
        `border-color: saddlebrown;`,`border-width: 4px;`,`border-style: solid;`,
        and `border-radius: 10px;` are the rules that make the border.\r
        </details>\r
        <details>\r
        <summary>**What
        does the `border-style` property do?**</summary>\r
        The `border-style` property
        determines what kind of border (solid, dotted, etc.) the element has.  You
        can read more about this property at <a href="http://www.w3schools.com/cssref/pr_border-style.asp">W3Schools
        - CSS border-style Property</a>\r
        </details>\r
        <details>\r
        <summary>**What
        does the `border-radius` property do?**</summary>\r
        The `border-radius` property
        determines the radius of the curves at the corners of the element.  A bigger
        radius makes a bigger, softer curve, and a smaller radius makes a smaller,
        sharper curve.  A radius of zero makes a regular corner.  You can read more
        about this property at <a href="http://www.w3schools.com/cssref/css3_pr_border-radius.asp">W3Schools
        - CSS3 border-radius property</a>\r
        </details>\r
        <details>\r
        <summary>**What
        does the `float` property do?**</summary>\r
        The `float` property makes an
        element "float", meaning that the elements that come after it all flow around
        it.  If the `float` value is `left`, the element will float to the left, and
        the elements after it will show up on its right.  If the `float` value is
        `right`, the element will float to the right, and the elements after it will
        show up on its left.  You can read more about this property at <a href="http://www.w3schools.com/cssref/pr_class_float.asp">W3Schools
        - CSS float Property</a>\r
        </details>\r
        </div>\r
        \r
        # Border Radius\r
        \r
        *
        Look at the `border-radius` property inside your `img` rule-set\r
        * Discuss
        with your partner what you think the property does.\r
        * Try different values
        for border radius and decide which one you like the best.
      CSD U2 layout style borderradius_2018_markdown_instruction: |-
        <div style="float:
        right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px"
        markdown="1">\r
        <details>\r
        <summary>**How does the code work?**</summary>\r
        Here
        is the code that is making the image borders:\r
        \r
        <pre>img {\r
          border-color:
        saddlebrown;\r
          border-width: 4px;\r
          border-style: solid;\r
          border-radius:
        10px;\r
        }</pre>\r
        \r
        * `img` is the _selector_.  It specifies which elements
        will have to follow the rules inside the curly braces, in this case, the images.\r
        *
        `border-color: saddlebrown;`,`border-width: 4px;`,`border-style: solid;`,
        and `border-radius: 10px;` are the rules that make the border.\r
        </details>\r
        <details>\r
        <summary>**What
        does the `border-style` property do?**</summary>\r
        The `border-style` property
        determines what kind of border (solid, dotted, etc.) the element has.  You
        can read more about this property at <a href="http://www.w3schools.com/cssref/pr_border-style.asp">W3Schools
        - CSS border-style Property</a>\r
        </details>\r
        <details>\r
        <summary>**What
        does the `border-radius` property do?**</summary>\r
        The `border-radius` property
        determines the radius of the curves at the corners of the element.  A bigger
        radius makes a bigger, softer curve, and a smaller radius makes a smaller,
        sharper curve.  A radius of zero makes a regular corner.  You can read more
        about this property at <a href="http://www.w3schools.com/cssref/css3_pr_border-radius.asp">W3Schools
        - CSS3 border-radius property</a>\r
        </details>\r
        <details>\r
        <summary>**What
        does the `float` property do?**</summary>\r
        The `float` property makes an
        element "float", meaning that the elements that come after it all flow around
        it.  If the `float` value is `left`, the element will float to the left, and
        the elements after it will show up on its right.  If the `float` value is
        `right`, the element will float to the right, and the elements after it will
        show up on its left.  You can read more about this property at <a href="http://www.w3schools.com/cssref/pr_class_float.asp">W3Schools
        - CSS float Property</a>\r
        </details>\r
        </div>\r
        \r
        # Border Radius\r
        \r
        *
        Look at the `border-radius` property inside your `img` rule-set\r
        * Discuss
        with your partner what you think the property does.\r
        * Try different values
        for border radius and decide which one you like the best.
      CSD U2 layout style float_markdown_instruction: |-
        <div style="float: right;
        height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px"
        markdown="1">\r
        \r
        <details>\r
        <summary>**How does the code work?**</summary>\r
        Here
        is the code that is making the image float on the left hand side of the page:\r
        \r
        <pre>img
        {\r
          float: left;\r
        }</pre>\r
        \r
        * `img` is the _selector_.  It specifies
        which elements will have to follow the rules inside the curly braces, in this
        case, the images.\r
        * `float: left;` is the rule that makes the image float
        to the left.\r
        </details>\r
        <details>\r
        <summary>**What does the `float`
        property do?**</summary>\r
        The `float` property makes an element "float",
        meaning that the elements that come after it all flow around it.  If the `float`
        value is `left`, the element will float to the left, and the elements after
        it will show up on its right.  If the `float` value is `right`, the element
        will float to the right, and the elements after it will show up on its left.  You
        can read more about this property at <a href="http://www.w3schools.com/cssref/pr_class_float.asp">W3Schools
        - CSS float Property</a>\r
        </details>\r
        </div>\r
        \r
        # Float\r
        \r
        * Look
        at the `float` property inside your `img` rule-set\r
        * Discuss with your
        partner what you think the property does.\r
        * Change the value from `left`
        to `right`.
      CSD U2 layout style float_2018_markdown_instruction: |-
        <div style="float: right;
        height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px"
        markdown="1">\r
        \r
        <details>\r
        <summary>**How does the code work?**</summary>\r
        Here
        is the code that is making the image float on the left hand side of the page:\r
        \r
        <pre>img
        {\r
          float: left;\r
        }</pre>\r
        \r
        * `img` is the _selector_.  It specifies
        which elements will have to follow the rules inside the curly braces, in this
        case, the images.\r
        * `float: left;` is the rule that makes the image float
        to the left.\r
        </details>\r
        <details>\r
        <summary>**What does the `float`
        property do?**</summary>\r
        The `float` property makes an element "float",
        meaning that the elements that come after it all flow around it.  If the `float`
        value is `left`, the element will float to the left, and the elements after
        it will show up on its right.  If the `float` value is `right`, the element
        will float to the right, and the elements after it will show up on its left.  You
        can read more about this property at <a href="http://www.w3schools.com/cssref/pr_class_float.asp">W3Schools
        - CSS float Property</a>\r
        </details>\r
        </div>\r
        \r
        # Float\r
        \r
        * Look
        at the `float` property inside your `img` rule-set\r
        * Discuss with your
        partner what you think the property does.\r
        * Change the value from `left`
        to `right`.
      CSD U2 layout style freeplay - OLD_markdown_instruction: |-
        # Personal Web Site\r
        \r
        Try
        out these some new CSS properties on your personal web site.\r
        \r
        * Add
        styling of your choice to your web site. Be sure to use at least 3 new CSS
        properties.\r
        \r
        # Checklist\r
        \r
        * At least 3 of the following CSS Properties
        are used:\r
        \r
         * `background-color`\r
         * `height`\r
         * `width`\r
         *
        `border-style`\r
         * `border-radius`\r
         * `border-width`\r
         * `float`\r

        * `margin`\r
        \r
        \r
        If you’ve used at least 3 of the properties from the
        checklist, you can explore some additional CSS properties to add to your About
        Me page.
      CSD U2 layout style freeplay_markdown_instruction: |-
        # Personal Web Site\r
        \r
        Try
        out some of these new CSS properties on your personal web site.\r
        \r
        * Add
        styling of your choice to your web site. Be sure to use at least three new
        CSS properties.\r
        \r
        # Checklist\r
        \r
        * At least three of the following
        CSS Properties are used:\r
        \r
         * `background-color`\r
         * `height`\r
         *
        `width`\r
         * `border-style`\r
         * `border-radius`\r
         * `border-width`\r

        * `float`\r
         * `margin`\r
        \r
        We encourage you to use more than three, though!  Explore
        additional CSS properties and add them to your page.
      CSD U2 layout style freeplay_2018_markdown_instruction: |-
        # Personal Web Site\r
        \r
        Try
        out some of these new CSS properties on your personal web site.\r
        \r
        * Add
        styling of your choice to your web site. Be sure to use at least three new
        CSS properties.\r
        \r
        # Checklist\r
        \r
        * At least three of the following
        CSS Properties are used:\r
        \r
         * `background-color`\r
         * `height`\r
         *
        `width`\r
         * `border-style`\r
         * `border-radius`\r
         * `border-width`\r

        * `float`\r
         * `margin`\r
        \r
        We encourage you to use more than three, though!  Explore
        additional CSS properties and add them to your page.
      CSD U2 layout style margin_markdown_instruction: |-
        <div style="float: right;
        height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px"
        markdown="1">\r
        <details>\r
        <summary>**How does the code work?**</summary>\r
        Here
        is the code that is putting extra space around the images:\r
        \r
        <pre>img
        {\r
        \tmargin: 10px;\r
        }</pre>\r
        \r
        * `img` is the _selector_.  It specifies
        which elements will have to follow the rules inside the curly braces, in this
        case, the images.\r
        * `margin: 10px;` is the rule that puts 10 pixels of
        space around the image.\r
        </details>\r
        <details>\r
        <summary>**What does
        the `margin` property do?**</summary>\r
        The `margin` property determines
        how much space will be around the image.  Most of the time, you will define
        in the margin in pixels.  You can read more about this property at <a href="http://www.w3schools.com/cssref/pr_margin.asp">W3Schools
        - CSS margin Property</a>\r
        </details>\r
        <details>\r
        <summary>**What does
        `px` mean / What is a pixel?**</summary>\r
        Pixel, which is abbreviated `px`,
        is how elements are measured in CSS.  It’s the size of a single point of light
        on the screen.\r
        </details>\r
        </div>\r
        # Margin\r
        \r
        Margins specify
        how much space should be around an element.\r
        \r
        * Find the `margin` property
        in the `img` rule-set.\r
        * Change the margin to be larger, and discuss the
        effect with a partner.\r
        * Choose another element type and give it a margin,
        too.
      CSD U2 layout style margin_2018_markdown_instruction: |-
        <div style="float:
        right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px"
        markdown="1">\r
        <details>\r
        <summary>**How does the code work?**</summary>\r
        Here
        is the code that is putting extra space around the images:\r
        \r
        <pre>img
        {\r
        \tmargin: 10px;\r
        }</pre>\r
        \r
        * `img` is the _selector_.  It specifies
        which elements will have to follow the rules inside the curly braces, in this
        case, the images.\r
        * `margin: 10px;` is the rule that puts 10 pixels of
        space around the image.\r
        </details>\r
        <details>\r
        <summary>**What does
        the `margin` property do?**</summary>\r
        The `margin` property determines
        how much space will be around the image.  Most of the time, you will define
        in the margin in pixels.  You can read more about this property at <a href="http://www.w3schools.com/cssref/pr_margin.asp">W3Schools
        - CSS margin Property</a>\r
        </details>\r
        <details>\r
        <summary>**What does
        `px` mean / What is a pixel?**</summary>\r
        Pixel, which is abbreviated `px`,
        is how elements are measured in CSS.  It’s the size of a single point of light
        on the screen.\r
        </details>\r
        </div>\r
        # Margin\r
        \r
        Margins specify
        how much space should be around an element.\r
        \r
        * Find the `margin` property
        in the `img` rule-set.\r
        * Change the margin to be larger, and discuss the
        effect with a partner.\r
        * Choose another element type and give it a margin,
        too.
      CSD U2 layout style sample_markdown_instruction: |-
        <div style="float: right;
        height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px"
        markdown="1">\r
        <details>\r
        <summary>**What does the `body` selector do?**</summary>\r
        Because
        the content of the web page is all inside the `body` tag, the body selector
        gives style rules for everything on the web page.\r
        </details>\r
        <details>\r
        <summary>**What
        does the `border-style` property do?**</summary>\r
        The `border-style` property
        determines what kind of border (solid, dotted, dashed, etc.) the element has.  You
        can read more about this property at <a href="http://www.w3schools.com/cssref/pr_border-style.asp">W3Schools
        - CSS border-style Property</a>\r
        </details>\r
        <details>\r
        <summary>**What
        does the `border-radius` property do?**</summary>\r
        The `border-radius` property
        determines the radius of the curves at the corners of the element.  A bigger
        radius makes a bigger, softer curve, and a smaller radius makes a smaller,
        sharper curve.  A radius of zero makes a regular corner.  You can read more
        about this property at <a href="http://www.w3schools.com/cssref/css3_pr_border-radius.asp">W3Schools
        - CSS3 border-radius property</a>\r
        </details>\r
        <details>\r
        <summary>**What
        does the `float` property do?**</summary>\r
        The `float` property makes an
        element "float", meaning that the elements that come after it all flow around
        it.  If the `float` value is `left`, the element will float to the left, and
        the elements after it will show up on its right.  If the `float` value is
        `right`, the element will float to the right, and the elements after it will
        show up on its left.  You can read more about this property at <a href="http://www.w3schools.com/cssref/pr_class_float.asp">W3Schools
        - CSS float Property</a>\r
        </details>\r
        </div>\r
        \r
        # Layout and Style\r
        \r
        *
        Look through web page below for new styles.\r
        * Open the style sheet\r
        *
        With your partner, discuss which parts of the CSS code you think are making
        the page appear different.\r
         * What makes the entire page blue?\r
         * How
        are the images positioned to the left of all the other elements?\r
         * What
        made the image corners rounded?\r
        \r
        In the next few levels, you'll be
        changing and adding new styles on this page.
      CSD U2 layout style sample_2018_markdown_instruction: |-
        <div style="float:
        right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px"
        markdown="1">\r
        <details>\r
        <summary>**What does the `body` selector do?**</summary>\r
        Because
        the content of the web page is all inside the `body` tag, the body selector
        gives style rules for everything on the web page.\r
        </details>\r
        <details>\r
        <summary>**What
        does the `border-style` property do?**</summary>\r
        The `border-style` property
        determines what kind of border (solid, dotted, dashed, etc.) the element has.  You
        can read more about this property at <a href="http://www.w3schools.com/cssref/pr_border-style.asp">W3Schools
        - CSS border-style Property</a>\r
        </details>\r
        <details>\r
        <summary>**What
        does the `border-radius` property do?**</summary>\r
        The `border-radius` property
        determines the radius of the curves at the corners of the element.  A bigger
        radius makes a bigger, softer curve, and a smaller radius makes a smaller,
        sharper curve.  A radius of zero makes a regular corner.  You can read more
        about this property at <a href="http://www.w3schools.com/cssref/css3_pr_border-radius.asp">W3Schools
        - CSS3 border-radius property</a>\r
        </details>\r
        <details>\r
        <summary>**What
        does the `float` property do?**</summary>\r
        The `float` property makes an
        element "float", meaning that the elements that come after it all flow around
        it.  If the `float` value is `left`, the element will float to the left, and
        the elements after it will show up on its right.  If the `float` value is
        `right`, the element will float to the right, and the elements after it will
        show up on its left.  You can read more about this property at <a href="http://www.w3schools.com/cssref/pr_class_float.asp">W3Schools
        - CSS float Property</a>\r
        </details>\r
        </div>\r
        \r
        # Layout and Style\r
        \r
        *
        Look through web page below for new styles.\r
        * Open the style sheet\r
        *
        With your partner, discuss which parts of the CSS code you think are making
        the page appear different.\r
         * What makes the entire page blue?\r
         * How
        are the images positioned to the left of all the other elements?\r
         * What
        made the image corners rounded?\r
        \r
        In the next few levels, you'll be
        changing and adding new styles on this page.
      CSD U2 layout style width_markdown_instruction: |-
        <div style="float: right;
        height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px"
        markdown="1">\r
        <details>\r
        <summary>**How does the code work?**</summary>\r
        Here
        is the code that is making the image its current size:\r
        \r
        <pre>img {\r
        \twidth:
        250px;\r
        }</pre>\r
        \r
        * `img` is the _selector_.  It specifies which elements
        will have to follow the rules inside the curly braces, in this case, the images.\r
        *
        `width: 250px` is the rule that makes the image 250 pixels wide.  It also
        changes the height so that the image does not stretch.\r
        </details>\r
        <details>\r
        <summary>**What
        does the `width` property do?**</summary>\r
        The `width` property determines
        how wide the element will be.  Most of the time, you will define in the width
        in pixels, which makes the element take up an exact amount of space on the
        screen.  Defining the width will also change the height so that the image
        does not stretch, unless you have also defined the height.  You can read more
        about this property at <a href="http://www.w3schools.com/cssref/pr_dim_width.asp">W3Schools
        - CSS width Property</a>\r
        </details>\r
        <details>\r
        <summary>**What does
        the `height` property do?**</summary>\r
        The `height` property determines
        how tall the element will be.  Most of the time, you will define in the height
        in pixels, which makes the element take up an exact amount of space on the
        screen.  Defining the height will also change the width so that the image
        does not stretch, unless you have also defined the width.  You can read more
        about this property at <a href="http://www.w3schools.com/cssref/pr_dim_height.asp">W3Schools
        - CSS width Property</a>\r
        </details>\r
        <details>\r
        <summary>**What does
        `px` mean / What is a pixel?**</summary>\r
        Pixel, which is abbreviated `px`,
        is how elements are measured in CSS.  It’s the size of a single point of light
        on the screen.\r
        </details>\r
        <details>\r
        <summary>**Why does using a width
        and height rule at the same time sometimes stretch out the image?**</summary>\r
        When
        the width of an images changes, the height must change by the same percentage,
        otherwise the image will stretch.  For example, if you double the width of
        an image, you must also double the height, or the image will be stretched
        horizonally.  When you only define the width or the height, the computer will
        automatically change the other property so that the image looks the same.\r
        </details>\r
        </div>\r
        \r
        #
        Width and Height\r
        \r
        * Find the property in the style sheet that controls
        the width of the images.\r
        * Change the width of the images to be larger
        or smaller.\r
        * Create a new rule with a `height` property to control the
        height of the images.\r
        * Use the `width` property in the `p` rule-set to
        change the width of your paragraphs.
      CSD U2 layout style width_2018_markdown_instruction: |-
        <div style="float: right;
        height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px"
        markdown="1">\r
        <details>\r
        <summary>**How does the code work?**</summary>\r
        Here
        is the code that is making the image its current size:\r
        \r
        <pre>img {\r
        \twidth:
        250px;\r
        }</pre>\r
        \r
        * `img` is the _selector_.  It specifies which elements
        will have to follow the rules inside the curly braces, in this case, the images.\r
        *
        `width: 250px` is the rule that makes the image 250 pixels wide.  It also
        changes the height so that the image does not stretch.\r
        </details>\r
        <details>\r
        <summary>**What
        does the `width` property do?**</summary>\r
        The `width` property determines
        how wide the element will be.  Most of the time, you will define in the width
        in pixels, which makes the element take up an exact amount of space on the
        screen.  Defining the width will also change the height so that the image
        does not stretch, unless you have also defined the height.  You can read more
        about this property at <a href="http://www.w3schools.com/cssref/pr_dim_width.asp">W3Schools
        - CSS width Property</a>\r
        </details>\r
        <details>\r
        <summary>**What does
        the `height` property do?**</summary>\r
        The `height` property determines
        how tall the element will be.  Most of the time, you will define in the height
        in pixels, which makes the element take up an exact amount of space on the
        screen.  Defining the height will also change the width so that the image
        does not stretch, unless you have also defined the width.  You can read more
        about this property at <a href="http://www.w3schools.com/cssref/pr_dim_height.asp">W3Schools
        - CSS width Property</a>\r
        </details>\r
        <details>\r
        <summary>**What does
        `px` mean / What is a pixel?**</summary>\r
        Pixel, which is abbreviated `px`,
        is how elements are measured in CSS.  It’s the size of a single point of light
        on the screen.\r
        </details>\r
        <details>\r
        <summary>**Why does using a width
        and height rule at the same time sometimes stretch out the image?**</summary>\r
        When
        the width of an images changes, the height must change by the same percentage,
        otherwise the image will stretch.  For example, if you double the width of
        an image, you must also double the height, or the image will be stretched
        horizonally.  When you only define the width or the height, the computer will
        automatically change the other property so that the image looks the same.\r
        </details>\r
        </div>\r
        \r
        #
        Width and Height\r
        \r
        * Find the property in the style sheet that controls
        the width of the images.\r
        * Change the width of the images to be larger
        or smaller.\r
        * Create a new rule with a `height` property to control the
        height of the images.\r
        * Use the `width` property in the `p` rule-set to
        change the width of your paragraphs.
      CSD U2 link demo_markdown_instruction: |-
        # Making a Multi-page Site\r
        \r
        <div
        style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left:
        20px; font-size:14px" markdown="1">\r
        <details>\r
        <summary>**What are
        hyperlinks?**</summary>\r
        Hyperlinks can connect to local web pages or external
        web pages. To add navigation to your website you will need to add hyperlinks
        which connect your individual web pages. You can **add hyperlinks to your
        web page using the `<a>` element**.  The text you want to display as the hyperlink
        goes between the opening and closing hyperlink tags. The `<a>` element has
        an attribute `href` which is the location to link to.  The location of a local
        page is just the file path for that page. <br> <br>\r
        \r
        For example to
        link to the unique houses page you would add the following code inside your
        `<body>` element. <br><br>\r
        \r
        <pre>\r
        &lt;a href=”houses.html”&gt; Unique
        Houses &lt;/a&gt;\r
        </pre>\r
        \r
        </details>\r
        <details>\r
        <summary>**How
        do I add a hyperlink?**</summary>\r
        You can **add hyperlinks to your web
        page using the `<a>` element**.  The text you want to display as the hyperlink
        goes between the opening and closing hyperlink tags. The `<a>` element has
        an attribute `href` which is the location to link to.  The location of a local
        page is just the file path for that page. <br> <br>\r
        \r
        For example to
        link to the unique houses page you would add the following code inside your
        `<body>` element. <br><br>\r
        \r
        <pre>\r
        &lt;a href=”houses.html”&gt; Unique
        Houses &lt;/a&gt;\r
        </pre>\r
        \r
        </details>\r
        </div>\r
        \r
        A web site
        should include more than one web page, and they should connect to each other.   Here's
        an example of a project with multiple pages that are connected by hyperlinks
        (the blue underlined words that take you to another page when you click on
        them).\r
        \r
        # Do This\r
        * Use the inspector tool to see the code that creates
        the hyperlinks on the top of index.html.\r
        * Discuss with your partner how
        you think that code works.\r
        * Click on recipe.html in the files list on
        the left hand side.  Add a hyperlink to the top of this page that will take
        you back to index.html.
      CSD U2 link demo_2018_markdown_instruction: |-
        # Making a Multi-page Site\r
        \r
        <div
        style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left:
        20px; font-size:14px" markdown="1">\r
        <details>\r
        <summary>**What are
        hyperlinks?**</summary>\r
        Hyperlinks can connect to local web pages or external
        web pages. To add navigation to your website you will need to add hyperlinks
        which connect your individual web pages. You can **add hyperlinks to your
        web page using the `<a>` element**.  The text you want to display as the hyperlink
        goes between the opening and closing hyperlink tags. The `<a>` element has
        an attribute `href` which is the location to link to.  The location of a local
        page is just the file path for that page. <br> <br>\r
        \r
        For example to
        link to the unique houses page you would add the following code inside your
        `<body>` element. <br><br>\r
        \r
        <pre>\r
        &lt;a href=”houses.html”&gt; Unique
        Houses &lt;/a&gt;\r
        </pre>\r
        \r
        </details>\r
        <details>\r
        <summary>**How
        do I add a hyperlink?**</summary>\r
        You can **add hyperlinks to your web
        page using the `<a>` element**.  The text you want to display as the hyperlink
        goes between the opening and closing hyperlink tags. The `<a>` element has
        an attribute `href` which is the location to link to.  The location of a local
        page is just the file path for that page. <br> <br>\r
        \r
        For example to
        link to the unique houses page you would add the following code inside your
        `<body>` element. <br><br>\r
        \r
        <pre>\r
        &lt;a href=”houses.html”&gt; Unique
        Houses &lt;/a&gt;\r
        </pre>\r
        \r
        </details>\r
        </div>\r
        \r
        A web site
        should include more than one web page, and they should connect to each other.   Here's
        an example of a project with multiple pages that are connected by hyperlinks
        (the blue underlined words that take you to another page when you click on
        them).\r
        \r
        # Do This\r
        * Use the inspector tool to see the code that creates
        the hyperlinks on the top of index.html.\r
        * Discuss with your partner how
        you think that code works.\r
        * Click on recipe.html in the files list on
        the left hand side.  Add a hyperlink to the top of this page that will take
        you back to index.html.
      CSD U2 link pages_markdown_instruction: |
        # Create a New Page for Your Website.\r
        \r
        Here's
        your project from before.  You'll be adding another page.  Your new page
        can be a top 10 list, a recipe, or anything you like.\r
        \r
        # Do This\r
        *
        Add a new HTML file by clicking  ![](https://images.code.org/9b9f9f78962ef77664333d1b0f762ff1-image-1493252448756.19.38
        PM.png).  The new file will appear in the file list on the left side of the
        workspace.\r
        * Rename the file, either by right clicking it and choosing
        "Rename", or by clicking on it when it's already highlighted.  **Make sure
        the name is unique, descriptive and ends in ".html"**.\r
        * Use HTML to
        fill out your new page.  It should include:\r
         * a list\r
         * a header\r
        \r
      CSD U2 lists intro_markdown_instruction: |-
        # Lists\r
        <div style="float: right;
        height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px"
        markdown="1">\r
        <details>\r
        <summary>**What are the two types of lists?**</summary>\r

        There are two types of lists in HTML, ordered and unordered lists.\r
        </details>\r
        \r
        <details>\r
        <summary>**What
        is an unordered list?**</summary>\r
        An unordered list is just a set of bulleted
        items.\r
        <br /><br />\r
        An unordered list element has the tag `<ul> </ul>`.
        This is an abbreviation for <strong>U</strong>nordered <strong>L</strong>ist.
        Each item in the list is marked by a list item element `<li> </li>`. This
        is an abbreviation for <strong>L</strong>ist <strong>I</strong>tem.  The list
        item element is a child element, which means that it goes inside of its parent
        element, the unordered list.\r
        </details>\r
        \r
        <details>\r
        <summary>**How
        do I make an unordered list?**</summary>\r
        Making an unordered list has two
        steps: making the list and adding the list items.  To make the unordered list,
        write the unordered list tags `<ul> </ul>`.  Next, add your list items **inside**
        the unordered list tags.  To make each list item, use the list item tags `<li>
        </li>` and write the list item inside the tags.\r
        <br /><br />\r
        It can
        be helpful to indent your `<li> </li>` tags so it's clear they are contained
        in the `<ul> </ul>` tags.\r
        </details>\r
        \r
        <details>\r
        <summary>**What
        is an ordered list?**</summary>\r
        An ordered list is a set of bulleted items
        which are numbered.\r
        <br /><br />\r
        An ordered list element has the tags
        `<ol> </ol>`. This is an abbreviation for <strong>O</strong>rdered <strong>L</strong>ist.
        Each item in the list is marked by a list item element `<li> </li>`. This
        is an abbreviation for <strong>L</strong>ist <strong>I</strong>tem.  The list
        item element is a child element, which means that it goes inside of its parent
        element, the ordered list.\r
        </details>\r
        \r
        <details>\r
        <summary>**How
        do I make an ordered list?**</summary>\r
        Making an ordered list has two steps:
        making the list and adding the list items. To make the ordered list, write
        the ordered list tags `<ol> </ol>`. Next, add your list items **inside** the
        ordered list tags. To make each list item, use the list item tags `<li> </li>`
        and write the list item inside the tags.\r
        <br /><br/>\r
        It can be helpful
        to indent your `<li> </li>` tags so it's clear they are contained in the
        `<ol> </ol>` tags.\r
        </details>\r
        </div>\r
        \r
        You can also use HTML to
        make different types of lists on your web page.  This recipe includes two
        different types of lists, one ordered (with numbers) and one unordered (with
        bullets).\r
        \r
        #  Do This\r
        \r
        * Use the inspector tool to see the code
        that is making the two different kinds of lists.\r
        * Make sure you and your
        partner agree on what the different tags do.\r
        * Fix the code so that the
        second item in each list displays correctly
      CSD U2 lists intro_2018_markdown_instruction: |-
        # Lists\r
        <div style="float:
        right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px"
        markdown="1">\r
        <details>\r
        <summary>**What are the two types of lists?**</summary>\r

        There are two types of lists in HTML, ordered and unordered lists.\r
        </details>\r
        \r
        <details>\r
        <summary>**What
        is an unordered list?**</summary>\r
        An unordered list is just a set of bulleted
        items.\r
        <br /><br />\r
        An unordered list element has the tag `<ul> </ul>`.
        This is an abbreviation for <strong>U</strong>nordered <strong>L</strong>ist.
        Each item in the list is marked by a list item element `<li> </li>`. This
        is an abbreviation for <strong>L</strong>ist <strong>I</strong>tem.  The list
        item element is a child element, which means that it goes inside of its parent
        element, the unordered list.\r
        </details>\r
        \r
        <details>\r
        <summary>**How
        do I make an unordered list?**</summary>\r
        Making an unordered list has two
        steps: making the list and adding the list items.  To make the unordered list,
        write the unordered list tags `<ul> </ul>`.  Next, add your list items **inside**
        the unordered list tags.  To make each list item, use the list item tags `<li>
        </li>` and write the list item inside the tags.\r
        <br /><br />\r
        It can
        be helpful to indent your `<li> </li>` tags so it's clear they are contained
        in the `<ul> </ul>` tags.\r
        </details>\r
        \r
        <details>\r
        <summary>**What
        is an ordered list?**</summary>\r
        An ordered list is a set of bulleted items
        which are numbered.\r
        <br /><br />\r
        An ordered list element has the tags
        `<ol> </ol>`. This is an abbreviation for <strong>O</strong>rdered <strong>L</strong>ist.
        Each item in the list is marked by a list item element `<li> </li>`. This
        is an abbreviation for <strong>L</strong>ist <strong>I</strong>tem.  The list
        item element is a child element, which means that it goes inside of its parent
        element, the ordered list.\r
        </details>\r
        \r
        <details>\r
        <summary>**How
        do I make an ordered list?**</summary>\r
        Making an ordered list has two steps:
        making the list and adding the list items. To make the ordered list, write
        the ordered list tags `<ol> </ol>`. Next, add your list items **inside** the
        ordered list tags. To make each list item, use the list item tags `<li> </li>`
        and write the list item inside the tags.\r
        <br /><br/>\r
        It can be helpful
        to indent your `<li> </li>` tags so it's clear they are contained in the
        `<ol> </ol>` tags.\r
        </details>\r
        </div>\r
        \r
        You can also use HTML to
        make different types of lists on your web page.  This recipe includes two
        different types of lists, one ordered (with numbers) and one unordered (with
        bullets).\r
        \r
        #  Do This\r
        \r
        * Use the inspector tool to see the code
        that is making the two different kinds of lists.\r
        * Make sure you and your
        partner agree on what the different tags do.\r
        * Fix the code so that the
        second item in each list displays correctly
      CSD U2 navigation_markdown_instruction: |
        <div style="float: right; height:
        250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px"
        markdown="1">\r
        <details>\r
        <summary>**What are hyperlinks?**</summary>\r
        Hyperlinks
        can connect to local web pages or external web pages. To add navigation to
        your website you will need to add hyperlinks which connect your individual
        web pages. You can **add hyperlinks to your web page using the `<a>` element**.  The
        text you want to display as the hyperlink goes between the opening and closing
        hyperlink tags. The `<a>` element has an attribute `href` which is the location
        to link to.  The location of a local page is just the file path for that page.
        <br> <br>\r
        \r
        For example to link to the unique houses page you would add
        the following code inside your `<body>` element. <br><br>\r
        \r
        <pre>\r
        &lt;a
        href=”houses.html”&gt; Unique Houses &lt;/a&gt;\r
        </pre>\r
        \r
        </details>\r
        <details>\r
        <summary>**How
        do I add a hyperlink?**</summary>\r
        You can **add hyperlinks to your web
        page using the `<a>` element**.  The text you want to display as the hyperlink
        goes between the opening and closing hyperlink tags. The `<a>` element has
        an attribute `href` which is the location to link to.  The location of a local
        page is just the file path for that page. <br> <br>\r
        \r
        For example to
        link to the unique houses page you would add the following code inside your
        `<body>` element. <br><br>\r
        \r
        <pre>\r
        &lt;a href=”houses.html”&gt; Unique
        Houses &lt;/a&gt;\r
        </pre>\r
        \r
        </details>\r
        </div>\r
        \r
        # Create a
        Navigation Bar\r
        \r
        Here's your project from before.  You'll be linking
        the two pages by creating a **navigation bar** at the top of the page.  Websites
        usually have the same navigation bar across all of their pages so you can
        get back and forth between things on the site.  You can see an example of
        a navigation bar on <a href="https://studio.code.org/projects/weblab/2KO4FIjN89QPeYnTG_NzLIjroaG8daOY3jRl5uHm1Co/"
        target="_new">this page</a>\r
        \r
        # Do This\r
        * In your home page (index.html),
        add two hyperlinks at the top of the page, one to your lists page, and one
        to the home page.\r
         * *Even though it might seem strange to link a page
        to itself, it's less confusing if the navigation bar is exactly the same
        on every page.*\r
        * Copy the code for the navigation bar, then add it to
        the top of your lists page.\r
        * Test your links in the preview area by clicking
        on them.\r
      CSD U2 navigation_2018_markdown_instruction: |
        <div style="float: right; height:
        250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px"
        markdown="1">\r
        <details>\r
        <summary>**What are hyperlinks?**</summary>\r
        Hyperlinks
        can connect to local web pages or external web pages. To add navigation to
        your website you will need to add hyperlinks which connect your individual
        web pages. You can **add hyperlinks to your web page using the `<a>` element**.  The
        text you want to display as the hyperlink goes between the opening and closing
        hyperlink tags. The `<a>` element has an attribute `href` which is the location
        to link to.  The location of a local page is just the file path for that page.
        <br> <br>\r
        \r
        For example to link to the unique houses page you would add
        the following code inside your `<body>` element. <br><br>\r
        \r
        <pre>\r
        &lt;a
        href=”houses.html”&gt; Unique Houses &lt;/a&gt;\r
        </pre>\r
        \r
        </details>\r
        <details>\r
        <summary>**How
        do I add a hyperlink?**</summary>\r
        You can **add hyperlinks to your web
        page using the `<a>` element**.  The text you want to display as the hyperlink
        goes between the opening and closing hyperlink tags. The `<a>` element has
        an attribute `href` which is the location to link to.  The location of a local
        page is just the file path for that page. <br> <br>\r
        \r
        For example to
        link to the unique houses page you would add the following code inside your
        `<body>` element. <br><br>\r
        \r
        <pre>\r
        &lt;a href=”houses.html”&gt; Unique
        Houses &lt;/a&gt;\r
        </pre>\r
        \r
        </details>\r
        </div>\r
        \r
        # Create a
        Navigation Bar\r
        \r
        Here's your project from before.  You'll be linking
        the two pages by creating a **navigation bar** at the top of the page.  Websites
        usually have the same navigation bar across all of their pages so you can
        get back and forth between things on the site.  You can see an example of
        a navigation bar on <a href="https://studio.code.org/projects/weblab/2KO4FIjN89QPeYnTG_NzLIjroaG8daOY3jRl5uHm1Co/"
        target="_new">this page</a>\r
        \r
        # Do This\r
        * In your home page (index.html),
        add two hyperlinks at the top of the page, one to your lists page, and one
        to the home page.\r
         * *Even though it might seem strange to link a page
        to itself, it's less confusing if the navigation bar is exactly the same
        on every page.*\r
        * Copy the code for the navigation bar, then add it to
        the top of your lists page.\r
        * Test your links in the preview area by clicking
        on them.\r
      CSD U2 new page_markdown_instruction: |
        # Create a New Page for Your Website.\r
        \r
        Here's
        your project from before.  You'll be adding another page.  Your new page
        can be a top 10 list, a recipe, or anything you like.\r
        \r
        # Do This\r
        *
        Add a new HTML file by clicking  ![](https://images.code.org/9b9f9f78962ef77664333d1b0f762ff1-image-1493252448756.19.38
        PM.png).  The new file will appear in the files list on the left side of the
        workspace.\r
        * Rename the file, either by right clicking it and choosing
        "Rename", or by clicking on it when it's already highlighted.  **Make sure
        the name is unique, descriptive and ends in ".html"**.\r
        * Use HTML to
        fill out your new page.  It should include:\r
         * a list\r
         * a heading\r
        \r
      CSD U2 new page_2018_markdown_instruction: |
        # Create a New Page for Your Website.\r
        \r
        Here's
        your project from before.  You'll be adding another page.  Your new page
        can be a top 10 list, a recipe, or anything you like.\r
        \r
        # Do This\r
        *
        Add a new HTML file by clicking  ![](https://images.code.org/9b9f9f78962ef77664333d1b0f762ff1-image-1493252448756.19.38
        PM.png).  The new file will appear in the files list on the left side of the
        workspace.\r
        * Rename the file, either by right clicking it and choosing
        "Rename", or by clicking on it when it's already highlighted.  **Make sure
        the name is unique, descriptive and ends in ".html"**.\r
        * Use HTML to
        fill out your new page.  It should include:\r
         * a list\r
         * a heading\r
        \r
      CSD U2 ordered list_markdown_instruction: |-
        # Ordered Lists\r
        <div style="float:
        right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px"
        markdown="1">\r
        <details>\r
        <summary>**What are the two types of lists?**</summary>\r

        There are two types of lists in HTML, ordered and unordered lists.\r
        </details>\r
        <details>\r
        <summary>**What
        is an ordered list?**</summary>\r
        An ordered list is a set of bulleted items
        which are numbered.\r
        <br /><br />\r
        An ordered list element has the tag
        `<ol>` . This is an abbreviation for <strong>O</strong>rdered <strong>L</strong>ist.
        Each item in the list is marked by a list item element `<li>`;. This is an
        abbreviation for <strong>L</strong>ist <strong>I</strong>tem.  The list item
        element is a child element, which means that it goes inside of its parent
        element, the ordered list (`<ol>`).\r
        \r
        </details>\r
        \r
        <details>\r
        <summary>**How
        do I make an ordered list?**</summary>\r
        Making an ordered list has two steps:
        making the list and adding the list items.  To make the ordered list, write
        the ordered list tags `<ol></ol>`.  Next, add your list items **inside** the
        ordered list tags.  To make each list item, use the list item tags `<li></li>`
        and write the list item inside the tags.\r
        <br /><br />\r
        It can be helpful
        to indent your `<li>` tags so it's clear they are contained in the `<ol>`
        tag.\r
        \r
        </details>\r
        \r
        <details>\r
        <summary>**Show me working code.**</summary>\r
        <table
        border="1">\r
        <tr>\r
        <td>Example</td>\r
        <td>Result</td>\r
        </tr>\r
        <tr>\r
        <td><pre>
        &lt;ol&gt; <br>   &lt;li&gt;Step 1 &lt;/li&gt; <br>   &lt;li&gt;Step 2 &lt;/li&gt;
        <br>   &lt;li&gt;Step 3 &lt;/li&gt; <br> &lt;/ol&gt; </pre></td>\r
        <td><img
        src="https://images.code.org/3ef357cfad8ac98a8b30beb229ebcb78-image-1473446360428.39.04
        PM.png" style="width:200px"></td>\r
        </tr>\r
        </table>\r
        \r
        </details>\r
        </div>\r
        \r
        This
        page should include an ordered list, but it's missing the list tags.\r
        \r
        #
        Do This\r
        \r
        * Use the `<ol>` and `<li>` tags to structure this content
        into an ordered list that looks like the one below.\r
        \r
        *Hint: There will
        be NO NUMBERS in your code.* \r
        \r
        ![](https://images.code.org/b3186e83c3e3bd2680a1a300e5abd126-image-1493238064706.17.03
        PM.png)
      CSD U2 ordered list_2018_markdown_instruction: |-
        # Ordered Lists\r
        <div style="float:
        right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px"
        markdown="1">\r
        <details>\r
        <summary>**What are the two types of lists?**</summary>\r

        There are two types of lists in HTML, ordered and unordered lists.\r
        </details>\r
        <details>\r
        <summary>**What
        is an ordered list?**</summary>\r
        An ordered list is a set of bulleted items
        which are numbered.\r
        <br /><br />\r
        An ordered list element has the tag
        `<ol>` . This is an abbreviation for <strong>O</strong>rdered <strong>L</strong>ist.
        Each item in the list is marked by a list item element `<li>`;. This is an
        abbreviation for <strong>L</strong>ist <strong>I</strong>tem.  The list item
        element is a child element, which means that it goes inside of its parent
        element, the ordered list (`<ol>`).\r
        \r
        </details>\r
        \r
        <details>\r
        <summary>**How
        do I make an ordered list?**</summary>\r
        Making an ordered list has two steps:
        making the list and adding the list items.  To make the ordered list, write
        the ordered list tags `<ol></ol>`.  Next, add your list items **inside** the
        ordered list tags.  To make each list item, use the list item tags `<li></li>`
        and write the list item inside the tags.\r
        <br /><br />\r
        It can be helpful
        to indent your `<li>` tags so it's clear they are contained in the `<ol>`
        tag.\r
        \r
        </details>\r
        \r
        <details>\r
        <summary>**Show me working code.**</summary>\r
        <table
        border="1">\r
        <tr>\r
        <td>Example</td>\r
        <td>Result</td>\r
        </tr>\r
        <tr>\r
        <td><pre>
        &lt;ol&gt; <br>   &lt;li&gt;Step 1 &lt;/li&gt; <br>   &lt;li&gt;Step 2 &lt;/li&gt;
        <br>   &lt;li&gt;Step 3 &lt;/li&gt; <br> &lt;/ol&gt; </pre></td>\r
        <td><img
        src="https://images.code.org/3ef357cfad8ac98a8b30beb229ebcb78-image-1473446360428.39.04
        PM.png" style="width:200px"></td>\r
        </tr>\r
        </table>\r
        \r
        </details>\r
        </div>\r
        \r
        This
        page should include an ordered list, but it's missing the list tags.\r
        \r
        #
        Do This\r
        \r
        * Use the `<ol>` and `<li>` tags to structure this content
        into an ordered list that looks like the one below.\r
        \r
        *Hint: There will
        be NO NUMBERS in your code.* \r
        \r
        ![](https://images.code.org/b3186e83c3e3bd2680a1a300e5abd126-image-1493238064706.17.03
        PM.png)
      CSD U2 project review_markdown_instruction: |
        # Review Your Project\r
        \r
        You're
        almost ready to publish your project, but you should check one more time that
        you have fulfilled all the requirements for this project.\r
        \r
        # Do This\r
        *
        Check that you are comfortable sharing all the information that's on your
        site.\r
        * Check that all of your images are correctly attributed, and that
        you have the right to put them on your site.\r
        * Check that your project
        includes everything included in the project rubric.\r
        * Use comments and
        whitespace to make your website readable.\r
        * Ask your partner to help you
        find any potential problems with your site.\r
      CSD U2 project review_2018_markdown_instruction: |
        # Review Your Project\r
        \r
        You're
        almost ready to publish your project, but you should check one more time that
        you have fulfilled all the requirements for this project.\r
        \r
        # Do This\r
        *
        Check that you are comfortable sharing all the information that's on your
        site.\r
        * Check that all of your images are correctly attributed, and that
        you have the right to put them on your site.\r
        * Check that your project
        includes everything included in the project rubric.\r
        * Use comments and
        whitespace to make your website readable.\r
        * Ask your partner to help you
        find any potential problems with your site.\r
      CSD U2 project share_markdown_instruction: |
        # Share Your Project\r
        \r
        It's
        time to share your project with the world!\r
        \r
        # Do This\r
        * Click the
        ![](https://images.code.org/26bcf1645e18ac064cf0631fb5ca023c-image-1493744000091.52.27
        AM.png) button at the top of this page.\r
        * Copy the URL it gives you, and
        email it to the people you want to see your page.\r
        \r
      CSD U2 project share_2018_markdown_instruction: |
        # Share Your Project\r
        \r
        It's
        time to share your project with the world!\r
        \r
        # Do This\r
        * Click the
        ![](https://images.code.org/26bcf1645e18ac064cf0631fb5ca023c-image-1493744000091.52.27
        AM.png) button at the top of this page.\r
        * Copy the URL it gives you, and
        email it to the people you want to see your page.\r
        \r
      CSD U2 style background_markdown_instruction: |-
        <div style="float: right; height:
        150px; width: 400px; overflow-y: scroll; margin-left: 20px;">\r
        <details>\r
        <summary>**What
        is a CSS rule-set?**</summary>\r
        Blah blah answer\r
        </details>\r
        <details>\r
        <summary>**What
        is a selector?**</summary>\r
        blah blah answer\r
        </details>\r
        <details>\r
        <summary>**What
        is a declaration block?**</summary>\r
        blah blah answer\r
        </details>\r
        <details>\r
        <summary>**what
        is a property-value pair?**</summary>\r
        blah blah answer\r
        </details>\r
        <details>\r
        <summary>**How
        do I create a new rule-set?**</summary>\r
        blah blah answer\r
        </details>\r
        <details>\r
        <summary>**Why
        is the "style.css" file in a different language?**</summary>\r
        blah blah
        answer\r
        </details>\r
        <details>\r
        <summary>**Why is the "style.css" file
        in a different language?**</summary>\r
        blah blah answer\r
        </details>\r
        <details>\r
        <summary>**Why
        is the "style.css" file in a different language?**</summary>\r
        blah blah
        answer\r
        </details>\r
        <details>\r
        <summary>**Why is the "style.css" file
        in a different language?**</summary>\r
        blah blah answer\r
        </details>\r
        <details>\r
        <summary>**Why
        is the "style.css" file in a different language?**</summary>\r
        blah blah
        answer\r
        </details>\r
        </div>\r
        # Text Alignment\r
        \r
        * Find the "text-align"
        property in the paragraph tag.\r
        * Change the paragraph alignment.\r
          *
        Choose from "left", "right", and "center"
      CSD U2 text style bgcolor_markdown_instruction: |-
        <div style="float: right;
        height: 150px; width: 400px; overflow-y: scroll; margin-left: 20px;">\r
        <details>\r
        <summary>**What
        colors can I choose?**</summary>\r
        Blah blah answer\r
        </details>\r
        <details>\r
        <summary>**How
        does the code work?**</summary>\r
        blah blah answer\r
        </details>\r
        <details>\r
        <summary>**Why
        is the "style.css" file in a different language?**</summary>\r
        blah blah
        answer\r
        </details>\r
        <details>\r
        <summary>**Why is the "style.css" file
        in a different language?**</summary>\r
        blah blah answer\r
        </details>\r
        <details>\r
        <summary>**Why
        is the "style.css" file in a different language?**</summary>\r
        blah blah
        answer\r
        </details>\r
        <details>\r
        <summary>**Why is the "style.css" file
        in a different language?**</summary>\r
        blah blah answer\r
        </details>\r
        <details>\r
        <summary>**Why
        is the "style.css" file in a different language?**</summary>\r
        blah blah
        answer\r
        </details>\r
        <details>\r
        <summary>**Why is the "style.css" file
        in a different language?**</summary>\r
        blah blah answer\r
        </details>\r
        <details>\r
        <summary>**Why
        is the "style.css" file in a different language?**</summary>\r
        blah blah
        answer\r
        </details>\r
        <details>\r
        <summary>**Why is the "style.css" file
        in a different language?**</summary>\r
        blah blah answer\r
        </details>\r
        </div>\r
        #
        Background Color\r
        \r
        * Find the code in "style.css" that is making the
        background of the entire page light blue.\r
        * Change the code to make the
        page a different color.\r
        * Try to change the background color of just the
        paragraphs.
      CSD U2 text style decoration_markdown_instruction: |-
        <div style="float: right;
        height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px"
        markdown="1">\r
        <details>\r
        <summary>**How does the code work?**</summary>\r
        Here
        is the code that makes the `h1` elements underlined:\r
        \r
        <pre>h1 {\r
          text-decoration:
        underline;\r
        }</pre>\r
        \r
        * `h1` is the _selector_.  It specifies which
        elements will have to follow the rules inside the curly braces. The `p` stands
        for paragraph.\r
        * `text-decoration: underline;` is the rule that makes the
        text inside the `h1` tag underlined.\r
         * `text-decoration` is the _property_.  It
        explains what the rule is about, in this case where the line goes.\r
         * `underline`
        is the _value_.  It explains how the rule should be applied, in this case
        making the test underlined.\r
        </details>\r
        <details>\r
        <summary>**What
        are the possible values for text decoration?**</summary>\r
        You can choose
        between "underline", "overline", and "line-through".  You can read more
        about the text-decoration property at <a href="http://www.w3schools.com/cssref/pr_text_text-decoration.asp">W3Schools
        - CSS text-decoration Property</a>\r
        </details>\r
        <details>\r
        <summary>**Why
        do I need all the punctuation?**</summary>\r
        The punctuation, such as the
        curly braces `{}`, the colon `:`, and the semicolon `;`, help the computer
        to understand the rules in the stylesheet.  The curly braces hold all the
        rules for a particular selector.  Each rule should end in a semicolon, and
        the properties and values are always separated by a colon.\r
        </details>\r
        <details>\r
        <summary>**What
        is a stylesheet?**</summary>\r
        A style sheet is a document that controls
        how a web page will appear.  External style sheets are separate files that
        are linked to the HTML page.\r
        </details>\r
        <details>\r
        <summary>**What
        is CSS?**</summary>\r
        CSS is a language that controls the way content on
        a web site appears.  It uses rule-sets to change the look of a page.  Each
        rule set has a selector, which specifies which elements on the page will be
        affected, and the rules, which explain how to display the elements.   Each
        rule consists of a property and a value for that property.\r
        \r
        \r
        Here’s
        an example of a rule-set that makes the text in an `h2` tag blue and cursive:\r
        \r
        <pre>h2
        {\r
           color: blue;\r
           font-family: cursive;\r
        </pre>\r
        \r
        In this
        example, `h2` is the selector, `color` and `font-family` are properties, and
        `blue` and `cursive` are the values for those properties.\r
        </details>\r
        </div>\r
        #
        Underlining\r
        \r
        * Find the code in the style sheet that makes the h1 tag
        underlined.\r
        * Change the text decoration and see which one you like.\r
          *
        Choose from "underline", "overline", and "line-through"\r
        * Add a text
        decoration rule for the paragraph or h3 tag.
      CSD U2 text style decoration_2018_markdown_instruction: |-
        <div style="float:
        right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px"
        markdown="1">\r
        <details>\r
        <summary>**How does the code work?**</summary>\r
        Here
        is the code that makes the `h1` elements underlined:\r
        \r
        <pre>h1 {\r
          text-decoration:
        underline;\r
        }</pre>\r
        \r
        * `h1` is the _selector_.  It specifies which
        elements will have to follow the rules inside the curly braces. The `p` stands
        for paragraph.\r
        * `text-decoration: underline;` is the rule that makes the
        text inside the `h1` tag underlined.\r
         * `text-decoration` is the _property_.  It
        explains what the rule is about, in this case where the line goes.\r
         * `underline`
        is the _value_.  It explains how the rule should be applied, in this case
        making the test underlined.\r
        </details>\r
        <details>\r
        <summary>**What
        are the possible values for text decoration?**</summary>\r
        You can choose
        between "underline", "overline", and "line-through".  You can read more
        about the text-decoration property at <a href="http://www.w3schools.com/cssref/pr_text_text-decoration.asp">W3Schools
        - CSS text-decoration Property</a>\r
        </details>\r
        <details>\r
        <summary>**Why
        do I need all the punctuation?**</summary>\r
        The punctuation, such as the
        curly braces `{}`, the colon `:`, and the semicolon `;`, help the computer
        to understand the rules in the stylesheet.  The curly braces hold all the
        rules for a particular selector.  Each rule should end in a semicolon, and
        the properties and values are always separated by a colon.\r
        </details>\r
        <details>\r
        <summary>**What
        is a stylesheet?**</summary>\r
        A style sheet is a document that controls
        how a web page will appear.  External style sheets are separate files that
        are linked to the HTML page.\r
        </details>\r
        <details>\r
        <summary>**What
        is CSS?**</summary>\r
        CSS is a language that controls the way content on
        a web site appears.  It uses rule-sets to change the look of a page.  Each
        rule set has a selector, which specifies which elements on the page will be
        affected, and the rules, which explain how to display the elements.   Each
        rule consists of a property and a value for that property.\r
        \r
        \r
        Here’s
        an example of a rule-set that makes the text in an `h2` tag blue and cursive:\r
        \r
        <pre>h2
        {\r
           color: blue;\r
           font-family: cursive;\r
        </pre>\r
        \r
        In this
        example, `h2` is the selector, `color` and `font-family` are properties, and
        `blue` and `cursive` are the values for those properties.\r
        </details>\r
        </div>\r
        #
        Underlining\r
        \r
        * Find the code in the style sheet that makes the h1 tag
        underlined.\r
        * Change the text decoration and see which one you like.\r
          *
        Choose from "underline", "overline", and "line-through"\r
        * Add a text
        decoration rule for the paragraph or h3 tag.
      CSD U2 text style font family_markdown_instruction: |-
        <div style="float: right;
        height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px"
        markdown="1">\r
        <details>\r
        <summary>**How does the code work?**</summary>\r
        Here
        is the code that is controlling the paragraph font:\r
        \r
        <pre>p {\r
          font-family:
        cursive;\r
        }</pre>\r
        \r
        * `p` is the _selector_.  It specifies which elements
        will have to follow the rules inside the curly braces. The `p` stands for
        paragraph.\r
        * `font-family: cursive;` is the rule that makes the text inside
        the `p` tags a particular font.\r
         * `font-family` is the _property_.  It
        explains what the rule is about, in this case the font.\r
         * `cursive` is
        the _value_.  It explains how the rule should be applied, in this case making
        the text cursive.\r
        </details>\r
        <details>\r
        <summary>**What are the possible
        values for font family?**</summary>\r
        You can choose between "serif", "sans-serif",
        "cursive", "fantasy", and "monospace".  You can also try more specific
        fonts as described in <a href="http://www.w3schools.com/cssref/css_websafe_fonts.asp">W3Schools
        - CSS Web Safe Font Combinations</a>\r
        </details>\r
        <details>\r
        <summary>**Why
        do I need all the punctuation?**</summary>\r
        The punctuation, such as the
        curly braces `{}`, the colon `:`, and the semicolon `;`, help the computer
        to understand the rules in the stylesheet.  The curly braces hold all the
        rules for a particular selector.  Each rule should end in a semicolon, and
        the properties and values are always separated by a colon.\r
        </details>\r
        <details>\r
        <summary>**What
        is a stylesheet?**</summary>\r
        A style sheet is a document that controls
        how a web page will appear.  External style sheets are separate files that
        are linked to the HTML page.\r
        </details>\r
        <details>\r
        <summary>**What
        is CSS?**</summary>\r
        CSS is a language that controls the way content on
        a web site appears.  It uses rule-sets to change the look of a page.  Each
        rule set has a selector, which specifies which elements on the page will be
        affected, and the rules, which explain how to display the elements.   Each
        rule consists of a property and a value for that property.\r
        \r
        \r
        Here’s
        an example of a rule-set that makes the text in an `h2` tag blue and cursive:\r
        \r
        <pre>h2
        {\r
           color: blue;\r
           font-family: cursive;\r
        </pre>\r
        \r
        In this
        example, `h2` is the selector, `color` and `font-family` are properties, and
        `blue` and `cursive` are the values for those properties.\r
        </details>\r
        </div>\r
        #
        Changing the Font\r
        \r
        * Find the CSS rule-set in the style sheet that determines
        the style for the paragraph tag.\r
        * Change the font family and choose which
        one you like the best.\r
          * Choose from "serif", "sans-serif", "cursive",
        "fantasy", and "monospace"\r
        * Add a font family rule for the h1 or h3
        tags.
      CSD U2 text style font family_2018_markdown_instruction: |-
        <div style="float:
        right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px"
        markdown="1">\r
        <details>\r
        <summary>**How does the code work?**</summary>\r
        Here
        is the code that is controlling the paragraph font:\r
        \r
        <pre>p {\r
          font-family:
        cursive;\r
        }</pre>\r
        \r
        * `p` is the _selector_.  It specifies which elements
        will have to follow the rules inside the curly braces. The `p` stands for
        paragraph.\r
        * `font-family: cursive;` is the rule that makes the text inside
        the `p` tags a particular font.\r
         * `font-family` is the _property_.  It
        explains what the rule is about, in this case the font.\r
         * `cursive` is
        the _value_.  It explains how the rule should be applied, in this case making
        the text cursive.\r
        </details>\r
        <details>\r
        <summary>**What are the possible
        values for font family?**</summary>\r
        You can choose between "serif", "sans-serif",
        "cursive", "fantasy", and "monospace".  You can also try more specific
        fonts as described in <a href="http://www.w3schools.com/cssref/css_websafe_fonts.asp">W3Schools
        - CSS Web Safe Font Combinations</a>\r
        </details>\r
        <details>\r
        <summary>**Why
        do I need all the punctuation?**</summary>\r
        The punctuation, such as the
        curly braces `{}`, the colon `:`, and the semicolon `;`, help the computer
        to understand the rules in the stylesheet.  The curly braces hold all the
        rules for a particular selector.  Each rule should end in a semicolon, and
        the properties and values are always separated by a colon.\r
        </details>\r
        <details>\r
        <summary>**What
        is a stylesheet?**</summary>\r
        A style sheet is a document that controls
        how a web page will appear.  External style sheets are separate files that
        are linked to the HTML page.\r
        </details>\r
        <details>\r
        <summary>**What
        is CSS?**</summary>\r
        CSS is a language that controls the way content on
        a web site appears.  It uses rule-sets to change the look of a page.  Each
        rule set has a selector, which specifies which elements on the page will be
        affected, and the rules, which explain how to display the elements.   Each
        rule consists of a property and a value for that property.\r
        \r
        \r
        Here’s
        an example of a rule-set that makes the text in an `h2` tag blue and cursive:\r
        \r
        <pre>h2
        {\r
           color: blue;\r
           font-family: cursive;\r
        </pre>\r
        \r
        In this
        example, `h2` is the selector, `color` and `font-family` are properties, and
        `blue` and `cursive` are the values for those properties.\r
        </details>\r
        </div>\r
        #
        Changing the Font\r
        \r
        * Find the CSS rule-set in the style sheet that determines
        the style for the paragraph tag.\r
        * Change the font family and choose which
        one you like the best.\r
          * Choose from "serif", "sans-serif", "cursive",
        "fantasy", and "monospace"\r
        * Add a font family rule for the h1 or h3
        tags.
      CSD U2 text style freeplay - OLD_markdown_instruction: |-
        # Adding Styles\r
        \r
        Now
        you can style the text on your personal web site!\r
        \r
        * Open your style
        sheet and add styling of your choice to your page. Be sure to use at least
        3 different CSS properties.\r
        \r
        # Checklist\r
        \r
        * At least 3 of the
        following CSS Properties are used:\r
         * `font-size`\r
         * `font-family`\r

        * `color`\r
         * `text-decoration`\r
         * `text-align`\r
        \r
        If you’ve used
        at least 3 of the properties from the checklist, you can explore some additional
        text properties to add to your project.
      CSD U2 text style freeplay_markdown_instruction: |-
        # Adding Styles\r
        \r
        Now
        you can style the text on your personal web site!\r
        \r
        * Open your style
        sheet and add styling of your choice to your project. Be sure to use at least
        3 different CSS properties.\r
        \r
        # Checklist\r
        \r
        * At least 3 of the
        following CSS Properties are used:\r
         * `font-size`\r
         * `font-family`\r

        * `color`\r
         * `text-decoration`\r
         * `text-align`\r
        \r
        If you’ve used
        at least 3 of the properties from the checklist, you can explore some additional
        text properties to add to your project.
      CSD U2 text style freeplay_2018_markdown_instruction: |-
        # Adding Styles\r
        \r
        Now
        you can style the text on your personal web site!\r
        \r
        * Open your style
        sheet and add styling of your choice to your project. Be sure to use at least
        3 different CSS properties.\r
        \r
        # Checklist\r
        \r
        * At least 3 of the
        following CSS Properties are used:\r
         * `font-size`\r
         * `font-family`\r

        * `color`\r
         * `text-decoration`\r
         * `text-align`\r
        \r
        If you’ve used
        at least 3 of the properties from the checklist, you can explore some additional
        text properties to add to your project.
      CSD U2 text style h1_markdown_instruction: |-
        <div style="float: right; height:
        250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px"
        markdown="1">\r
        <details>\r
        <summary>**What colors can I use in CSS?**</summary>\r
        CSS
        includes most common color names (red, blue, green, etc.), and many uncommon
        ones.  You can see a full list of CSS color names at <a href="http://www.w3schools.com/colors/colors_names.asp">W3Schools
        - HTML Color Names</a>.  You can still use colors that are not included in
        the named list, but you will need to use their RGB values.  You can read more
        about using colors in CSS at <a href="http://www.w3schools.com/cssref/css_colors_legal.asp">W3Schools
        - CSS Legal Color Values</a>\r
        </details><details>\r
        <summary>**How does
        the code work?**</summary>\r
        Here is the code that is making the `h1` heading
        red:\r
        \r
        <pre>h1 {\r
          color: red;\r
        }</pre>\r
        \r
        * `h1` is the _selector_.  It
        specifies which elements will have to follow the rules inside the curly braces.\r
        *
        `color: red;` is the rule that makes the text inside the `h1` tags red.\r

        * `color` is the _property_.  It explains what the rule is about, in this
        case the text color.\r
         * `red` is the _value_.  It explains how the rule
        should be applied, in this case making the text red.\r
        </details>\r
        <details>\r
        <summary>**Why
        do I need all the punctuation?**</summary>\r
        The punctuation, such as the
        curly braces `{}`, the colon `:`, and the semicolon `;`, help the computer
        to understand the rules in the style sheet.  The curly braces hold all the
        rules for a particular selector.  Each rule should end in a semicolon, and
        the properties and values are always separated by a colon.\r
        </details>\r
        <details>\r
        <summary>**What
        is a style sheet?**</summary>\r
        A style sheet is a document that controls
        how a web page will appear.  External style sheets are separate files that
        are linked to the HTML page.\r
        </details>\r
        <details>\r
        <summary>**What
        is CSS?**</summary>\r
        CSS is a language that controls the way content on
        a web site appears.  It uses rule-sets to change the look of a page.  Each
        rule set has a selector, which specifies which elements on the page will be
        affected, and the rules, which explain how to display the elements.   Each
        rule consists of a property and a value for that property.\r
        \r
        \r
        Here’s
        an example of a rule-set that makes the text in an `h2` tag blue and cursive:\r
        \r
        <pre>h2
        {\r
           color: blue;\r
           font-family: cursive;\r
        }\r
        </pre>\r
        \r
        In
        this example, `h2` is the selector, `color` and `font-family` are properties,
        and `blue` and `cursive` are the values for those properties.\r
        </details>\r
        </div>\r
        #
        CSS and Text Color\r
        \r
        This HTML file uses a style sheet ("style.css")
        to give the page a particular style.  The style sheet contains information
        about what each of the HTML elements should look like.\r
        \r
        * Find the code
        in the style sheet (click on "style.css" in the files list) that is making
        the h1 heading red.\r
        * Change the code for the color of the h1 heading from
        `red` to a different color.
      CSD U2 text style h1_2018_markdown_instruction: |-
        <div style="float: right;
        height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px"
        markdown="1">\r
        <details>\r
        <summary>**What colors can I use in CSS?**</summary>\r
        CSS
        includes most common color names (red, blue, green, etc.), and many uncommon
        ones.  You can see a full list of CSS color names at <a href="http://www.w3schools.com/colors/colors_names.asp">W3Schools
        - HTML Color Names</a>.  You can still use colors that are not included in
        the named list, but you will need to use their RGB values.  You can read more
        about using colors in CSS at <a href="http://www.w3schools.com/cssref/css_colors_legal.asp">W3Schools
        - CSS Legal Color Values</a>\r
        </details><details>\r
        <summary>**How does
        the code work?**</summary>\r
        Here is the code that is making the `h1` heading
        red:\r
        \r
        <pre>h1 {\r
          color: red;\r
        }</pre>\r
        \r
        * `h1` is the _selector_.  It
        specifies which elements will have to follow the rules inside the curly braces.\r
        *
        `color: red;` is the rule that makes the text inside the `h1` tags red.\r

        * `color` is the _property_.  It explains what the rule is about, in this
        case the text color.\r
         * `red` is the _value_.  It explains how the rule
        should be applied, in this case making the text red.\r
        </details>\r
        <details>\r
        <summary>**Why
        do I need all the punctuation?**</summary>\r
        The punctuation, such as the
        curly braces `{}`, the colon `:`, and the semicolon `;`, help the computer
        to understand the rules in the style sheet.  The curly braces hold all the
        rules for a particular selector.  Each rule should end in a semicolon, and
        the properties and values are always separated by a colon.\r
        </details>\r
        <details>\r
        <summary>**What
        is a style sheet?**</summary>\r
        A style sheet is a document that controls
        how a web page will appear.  External style sheets are separate files that
        are linked to the HTML page.\r
        </details>\r
        <details>\r
        <summary>**What
        is CSS?**</summary>\r
        CSS is a language that controls the way content on
        a web site appears.  It uses rule-sets to change the look of a page.  Each
        rule set has a selector, which specifies which elements on the page will be
        affected, and the rules, which explain how to display the elements.   Each
        rule consists of a property and a value for that property.\r
        \r
        \r
        Here’s
        an example of a rule-set that makes the text in an `h2` tag blue and cursive:\r
        \r
        <pre>h2
        {\r
           color: blue;\r
           font-family: cursive;\r
        }\r
        </pre>\r
        \r
        In
        this example, `h2` is the selector, `color` and `font-family` are properties,
        and `blue` and `cursive` are the values for those properties.\r
        </details>\r
        </div>\r
        #
        CSS and Text Color\r
        \r
        This HTML file uses a style sheet ("style.css")
        to give the page a particular style.  The style sheet contains information
        about what each of the HTML elements should look like.\r
        \r
        * Find the code
        in the style sheet (click on "style.css" in the files list) that is making
        the h1 heading red.\r
        * Change the code for the color of the h1 heading from
        `red` to a different color.
      CSD U2 text style h3_markdown_instruction: |-
        <div style="float: right; height:
        250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px"
        markdown="1">\r
        <details>\r
        <summary>**What colors can I use in CSS?**</summary>\r
        CSS
        includes most common color names (red, blue, green, etc.), and many uncommon
        ones.  You can see a full list of CSS color names at <a href="http://www.w3schools.com/colors/colors_names.asp">W3Schools
        - HTML Color Names</a>.  You can still use colors that are not included in
        the named list, but you will need to use their RGB values.  You can read more
        about using colors in CSS at <a href="http://www.w3schools.com/cssref/css_colors_legal.asp">W3Schools
        - CSS Legal Color Values</a>\r
        </details>\r
        <details>\r
        <summary>**How
        does the code work?**</summary>\r
        Here is the code that is making the `h1`
        header red:\r
        \r
        <pre>h1 {\r
          color: red;\r
        }</pre>\r
        \r
        * `h1` is
        the _selector_.  It specifies which elements will have to follow the rules
        inside the curly braces.\r
        * `color: red;` is the rule that makes the text
        inside the `h1` tags red.\r
         * `color` is the _property_.  It explains what
        the rule is about, in this case the text color.\r
         * `red` is the _value_.  It
        explains how the rule should be applied, in this case making the text red.\r
        </details>\r
        <details>\r
        <summary>**How
        do I make a new rule-set?**</summary>\r
        To make a new rule set, you'll need
        a selector and a list of rules.  The selector is the name of the tag you want
        the rules to be applied to.  The rules are a list of property and value pairs.  You'll
        also need to pay careful attention to the punctuation in the rule set.  Look
        at the code below for an example of how the code should look.  You'll need
        to change the specifics for your page.\r
        \r
        <pre>h1 {\r
          color: red;\r
        }</pre>\r
        \r
        \r
        *
        `h1` is the _selector_.  It specifies which elements will have to follow the
        rules inside the curly braces.\r
        * `color: red;` is the rule that makes the
        text inside the `h1` tags red.\r
         * `color` is the _property_.  It explains
        what the rule is about, in this case the text color.\r
         * `red` is the _value_.  It
        explains how the rule should be applied, in this case making the text red.\r
        </details>\r
        <details>\r
        <summary>**Why
        do I need all the punctuation?**</summary>\r
        The punctuation, such as the
        curly braces `{}`, the colon `:`, and the semicolon `;`, help the computer
        to understand the rules in the style sheet.  The curly braces hold all the
        rules for a particular selector.  Each rule should end in a semicolon, and
        the properties and values are always separated by a colon.\r
        </details>\r
        <details>\r
        <summary>**What
        is a style sheet?**</summary>\r
        A style sheet is a document that controls
        how a web page will appear.  External style sheets are separate files that
        are linked to the HTML page.\r
        </details>\r
        <details>\r
        <summary>**What
        is CSS?**</summary>\r
        CSS is a language that controls the way content on
        a web site appears.  It uses rule-sets to change the look of a page.  Each
        rule set has a selector, which specifies which elements on the page will be
        affected, and the rules, which explain how to display the elements.   Each
        rule consists of a property and a value for that property.\r
        \r
        \r
        Here’s
        an example of a rule-set that makes the text in an `h2` tag blue and cursive:\r
        \r
        <pre>h2
        {\r
           color: blue;\r
           font-family: cursive;\r
        </pre>\r
        \r
        In this
        example, `h2` is the selector, `color` and `font-family` are properties, and
        `blue` and `cursive` are the values for those properties.\r
        </details>\r
        </div>\r
        #
        Making a new CSS rule-set\r
        \r
        The block of code that gives rules for a
        particular tag is called a _rule-set_.  You can make a new rule set by copying
        the pattern you see in the rule-set for the `h1` tag.\r
        \r
        * Find the CSS
        rule-set in the style sheet that determines the styles for the h1 tag.\r
        *
        Using the same pattern, write a new CSS rule-set that will determine the style
        for the h3 tag.\r
        * Add code to set a different color for the h3 tags.
      CSD U2 text style h3_2018_markdown_instruction: |-
        <div style="float: right;
        height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px"
        markdown="1">\r
        <details>\r
        <summary>**What colors can I use in CSS?**</summary>\r
        CSS
        includes most common color names (red, blue, green, etc.), and many uncommon
        ones.  You can see a full list of CSS color names at <a href="http://www.w3schools.com/colors/colors_names.asp">W3Schools
        - HTML Color Names</a>.  You can still use colors that are not included in
        the named list, but you will need to use their RGB values.  You can read more
        about using colors in CSS at <a href="http://www.w3schools.com/cssref/css_colors_legal.asp">W3Schools
        - CSS Legal Color Values</a>\r
        </details>\r
        <details>\r
        <summary>**How
        does the code work?**</summary>\r
        Here is the code that is making the `h1`
        header red:\r
        \r
        <pre>h1 {\r
          color: red;\r
        }</pre>\r
        \r
        * `h1` is
        the _selector_.  It specifies which elements will have to follow the rules
        inside the curly braces.\r
        * `color: red;` is the rule that makes the text
        inside the `h1` tags red.\r
         * `color` is the _property_.  It explains what
        the rule is about, in this case the text color.\r
         * `red` is the _value_.  It
        explains how the rule should be applied, in this case making the text red.\r
        </details>\r
        <details>\r
        <summary>**How
        do I make a new rule-set?**</summary>\r
        To make a new rule set, you'll need
        a selector and a list of rules.  The selector is the name of the tag you want
        the rules to be applied to.  The rules are a list of property and value pairs.  You'll
        also need to pay careful attention to the punctuation in the rule set.  Look
        at the code below for an example of how the code should look.  You'll need
        to change the specifics for your page.\r
        \r
        <pre>h1 {\r
          color: red;\r
        }</pre>\r
        \r
        \r
        *
        `h1` is the _selector_.  It specifies which elements will have to follow the
        rules inside the curly braces.\r
        * `color: red;` is the rule that makes the
        text inside the `h1` tags red.\r
         * `color` is the _property_.  It explains
        what the rule is about, in this case the text color.\r
         * `red` is the _value_.  It
        explains how the rule should be applied, in this case making the text red.\r
        </details>\r
        <details>\r
        <summary>**Why
        do I need all the punctuation?**</summary>\r
        The punctuation, such as the
        curly braces `{}`, the colon `:`, and the semicolon `;`, help the computer
        to understand the rules in the style sheet.  The curly braces hold all the
        rules for a particular selector.  Each rule should end in a semicolon, and
        the properties and values are always separated by a colon.\r
        </details>\r
        <details>\r
        <summary>**What
        is a style sheet?**</summary>\r
        A style sheet is a document that controls
        how a web page will appear.  External style sheets are separate files that
        are linked to the HTML page.\r
        </details>\r
        <details>\r
        <summary>**What
        is CSS?**</summary>\r
        CSS is a language that controls the way content on
        a web site appears.  It uses rule-sets to change the look of a page.  Each
        rule set has a selector, which specifies which elements on the page will be
        affected, and the rules, which explain how to display the elements.   Each
        rule consists of a property and a value for that property.\r
        \r
        \r
        Here’s
        an example of a rule-set that makes the text in an `h2` tag blue and cursive:\r
        \r
        <pre>h2
        {\r
           color: blue;\r
           font-family: cursive;\r
        </pre>\r
        \r
        In this
        example, `h2` is the selector, `color` and `font-family` are properties, and
        `blue` and `cursive` are the values for those properties.\r
        </details>\r
        </div>\r
        #
        Making a new CSS rule-set\r
        \r
        The block of code that gives rules for a
        particular tag is called a _rule-set_.  You can make a new rule set by copying
        the pattern you see in the rule-set for the `h1` tag.\r
        \r
        * Find the CSS
        rule-set in the style sheet that determines the styles for the h1 tag.\r
        *
        Using the same pattern, write a new CSS rule-set that will determine the style
        for the h3 tag.\r
        * Add code to set a different color for the h3 tags.
      CSD U2 text style sample_markdown_instruction: |
        <div style="float: right;
        height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px">\r
        <details>\r
        <summary>**What
        is a style sheet?**</summary>\r
        A style sheet is a document that controls
        how a web page will appear.  External style sheets are separate files that
        are linked to the HTML page.\r
        </details>\r
        <details>\r
        <summary>**What
        is CSS?**</summary>\r
        CSS is a language that controls the way content on
        a web site appears.  It uses rule-sets to change the look of a page.  Each
        rule set has a selector, which specifies which elements on the page will be
        affected, and the rules, which explain how to display the elements.   Each
        rule consists of a property and a value for that property.\r
        \r
        \r
        Here’s
        an example of a rule-set that makes the text in an `h2` tag blue and cursive:\r
        \r
        <pre>h2
        {\r
           color: blue;\r
           font-family: cursive;\r
        </pre>\r
        \r
        In this
        example, `h2` is the selector, `color` and `font-family` are properties, and
        `blue` and `cursive` are the values for those properties.\r
        </details>\r
        <details>\r
        <summary>**Why
        is the "style.css" file in a different language?**</summary>\r
        Web developers
        intentionally separate content and style to make their code easier to maintain.
        HTML is the language used to structure the content of a web page. CSS is a
        language that adds style to a web page.  \r
        </details>\r
        <details>\r
        <summary>**What
        does `px` mean / What is a pixel?**</summary>\r
        Pixel, which is abbreviated
        `px`, is how elements are measured in CSS.  It’s the size of a single point
        of light on the screen.\r
        </details>\r
        <details>\r
        <summary>**What does
        the `text-decoration` property do?**</summary>\r
        The `text-decoration` property
        puts a line over, under, or through a piece of text.  You can read more about
        the property at <a href="http://www.w3schools.com/cssref/pr_text_text-decoration.asp">W3Schools
        - CSS text-decoration Property</a>\r
        </details>\r
        <details>\r
        <summary>**What
        does the `text-align` property do?**</summary>\r
        The `text-align` property
        aligns the text to the left, right, or center. You can read more at <a href="http://www.w3schools.com/cssref/pr_text_text-align.asp">W3Schools
        - CSS text-align Property</a>\r
        </details>\r
        <details>\r
        <summary>**What
        does the `font-family` property do?**</summary>\r
        The `font-family` property
        changes the font of the text.  It gives a general description of the type
        of font that should be used, but each browser might display the font slightly
        differently.  Read more at <a href="http://www.w3schools.com/cssref/pr_font_font-family.asp">W3chools
        - CSS font-family Property</a>\r
        </details>\r
        </div>\r
        # CSS and Style
        sheets\r
        \r
        * Look at the web page below and find some different types of
        text stylings that you don't know how to code yet.\r
        * Click on the style
        sheet ("style.css" in the files area) and look at the code inside the file.\r
        *
        With your partner, discuss which parts of the code you think are making the
        text appear differently than before.\r
        \r
        In the next few lessons, you'll
        be changing and adding new styles on this page.\r
        \r
      CSD U2 text style size_markdown_instruction: |-
        <div style="float: right; height:
        250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px"
        markdown="1">\r
        <details>\r
        <summary>**How does the code work?**</summary>\r
        Here
        is the code that is controlling the paragraph text size:\r
        \r
        <pre>p {\r
          font-size:
        14px;\r
        }</pre>\r
        \r
        * `p` is the _selector_.  It specifies which elements
        will have to follow the rules inside the curly braces. The `p` stands for
        paragraph.\r
        * `font-size: 14px;` is the rule that makes the text inside
        the `p` tags a particular size.\r
         * `font-size` is the _property_.  It explains
        what the rule is about, in this case the text size.\r
         * `14px` is the _value_.  It
        explains how the rule should be applied, in this case making the text 14 pixels
        big.\r
        </details>\r
        <details>\r
        <summary>**What does `px` mean / What is
        a pixel?**</summary>\r
        Pixel, which is abbreviated `px`, is how elements
        are measured in CSS.  It’s the size of a single point of light on the screen.\r
        </details>\r
        <details>\r
        <summary>**Why
        do I need all the punctuation?**</summary>\r
        The punctuation, such as the
        curly braces `{}`, the colon `:`, and the semicolon `;`, help the computer
        to understand the rules in the style sheet.  The curly braces hold all the
        rules for a particular selector.  Each rule should end in a semicolon, and
        the properties and values are always separated by a colon.\r
        </details>\r
        <details>\r
        <summary>**What
        is a style sheet?**</summary>\r
        A style sheet is a document that controls
        how a web page will appear.  External style sheets are separate files that
        are linked to the HTML page.\r
        </details>\r
        <details>\r
        <summary>**What
        is CSS?**</summary>\r
        CSS is a language that controls the way content on
        a web site appears.  It uses rule-sets to change the look of a page.  Each
        rule set has a selector, which specifies which elements on the page will be
        affected, and the rules, which explain how to display the elements.   Each
        rule consists of a property and a value for that property.\r
        \r
        \r
        Here’s
        an example of a rule-set that makes the text in an `h2` tag blue and cursive:\r
        \r
        <pre>h2
        {\r
           color: blue;\r
           font-family: cursive;\r
        </pre>\r
        \r
        In this
        example, `h2` is the selector, `color` and `font-family` are properties, and
        `blue` and `cursive` are the values for those properties.\r
        </details>\r
        </div>\r
        \r
        #
        Changing text size\r
        \r
        You can control other things besides colors by using
        other properties.\r
        \r
        * Find the CSS rule-set in the style sheet that determines
        the style for the paragraph tag.\r
        * Change the text size of the paragraphs
        to be bigger.\r
        * Add a new rule to your rule-set for your h3 tag to make
        the text bigger or smaller.
      CSD U2 text style size_2018_markdown_instruction: |-
        <div style="float: right;
        height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px"
        markdown="1">\r
        <details>\r
        <summary>**How does the code work?**</summary>\r
        Here
        is the code that is controlling the paragraph text size:\r
        \r
        <pre>p {\r
          font-size:
        14px;\r
        }</pre>\r
        \r
        * `p` is the _selector_.  It specifies which elements
        will have to follow the rules inside the curly braces. The `p` stands for
        paragraph.\r
        * `font-size: 14px;` is the rule that makes the text inside
        the `p` tags a particular size.\r
         * `font-size` is the _property_.  It explains
        what the rule is about, in this case the text size.\r
         * `14px` is the _value_.  It
        explains how the rule should be applied, in this case making the text 14 pixels
        big.\r
        </details>\r
        <details>\r
        <summary>**What does `px` mean / What is
        a pixel?**</summary>\r
        Pixel, which is abbreviated `px`, is how elements
        are measured in CSS.  It’s the size of a single point of light on the screen.\r
        </details>\r
        <details>\r
        <summary>**Why
        do I need all the punctuation?**</summary>\r
        The punctuation, such as the
        curly braces `{}`, the colon `:`, and the semicolon `;`, help the computer
        to understand the rules in the style sheet.  The curly braces hold all the
        rules for a particular selector.  Each rule should end in a semicolon, and
        the properties and values are always separated by a colon.\r
        </details>\r
        <details>\r
        <summary>**What
        is a style sheet?**</summary>\r
        A style sheet is a document that controls
        how a web page will appear.  External style sheets are separate files that
        are linked to the HTML page.\r
        </details>\r
        <details>\r
        <summary>**What
        is CSS?**</summary>\r
        CSS is a language that controls the way content on
        a web site appears.  It uses rule-sets to change the look of a page.  Each
        rule set has a selector, which specifies which elements on the page will be
        affected, and the rules, which explain how to display the elements.   Each
        rule consists of a property and a value for that property.\r
        \r
        \r
        Here’s
        an example of a rule-set that makes the text in an `h2` tag blue and cursive:\r
        \r
        <pre>h2
        {\r
           color: blue;\r
           font-family: cursive;\r
        </pre>\r
        \r
        In this
        example, `h2` is the selector, `color` and `font-family` are properties, and
        `blue` and `cursive` are the values for those properties.\r
        </details>\r
        </div>\r
        \r
        #
        Changing text size\r
        \r
        You can control other things besides colors by using
        other properties.\r
        \r
        * Find the CSS rule-set in the style sheet that determines
        the style for the paragraph tag.\r
        * Change the text size of the paragraphs
        to be bigger.\r
        * Add a new rule to your rule-set for your h3 tag to make
        the text bigger or smaller.
      CSD U2 text style text align_markdown_instruction: |-
        <div style="float: right;
        height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px"
        markdown="1">\r
        <details>\r
        <summary>**How does the code work?**</summary>\r
        Here
        is the code that is controlling the paragraph text alignment:\r
        \r
        <pre>p
        {\r
          text-align: left;\r
        }</pre>\r
        \r
        * `p` is the _selector_.  It specifies
        which elements will have to follow the rules inside the curly braces. The
        `p` stands for paragraph.\r
        * `text-align: left;` is the rule that makes
        the text inside the `p` tags align to the left side of the paragraph.\r

        * `text-align` is the _property_.  It explains what the rule is about, in
        this case the text alignment.\r
         * `left` is the _value_.  It explains how
        the rule should be applied, in this case making the text align to the left
        side of the paragraph.\r
        </details>\r
        <details>\r
        <summary>**Why doesn't
        `text-align: left;` do anything?**</summary>\r
        Most properties have default
        values.  The default values are the styles that an element will have automatically,
        before you add your style sheet.  The default value for `text-align` is `left`,
        so it doesn't change from how it already looked.\r
        </details>\r
        <details>\r
        <summary>**What
        are the possible values for text align?**</summary>\r
        You can choose between
        "left", "right", and "center".  You can read more about the text-align
        property at <a href="http://www.w3schools.com/cssref/pr_text_text-align.asp">W3Schools
        - CSS text-align Property</a>\r
        </details>\r
        <details>\r
        <summary>**Why
        do I need all the punctuation?**</summary>\r
        The punctuation, such as the
        curly braces `{}`, the colon `:`, and the semicolon `;`, help the computer
        to understand the rules in the style sheet.  The curly braces hold all the
        rules for a particular selector.  Each rule should end in a semicolon, and
        the properties and values are always separated by a colon.\r
        </details>\r
        <details>\r
        <summary>**What
        is a style sheet?**</summary>\r
        A style sheet is a document that controls
        how a web page will appear.  External style sheets are separate files that
        are linked to the HTML page.\r
        </details>\r
        <details>\r
        <summary>**What
        is CSS?**</summary>\r
        CSS is a language that controls the way content on
        a web site appears.  It uses rule-sets to change the look of a page.  Each
        rule set has a selector, which specifies which elements on the page will be
        affected, and the rules, which explain how to display the elements.   Each
        rule consists of a property and a value for that property.\r
        \r
        \r
        Here’s
        an example of a rule-set that makes the text in an `h2` tag blue and cursive:\r
        \r
        <pre>h2
        {\r
           color: blue;\r
           font-family: cursive;\r
        </pre>\r
        \r
        In this
        example, `h2` is the selector, `color` and `font-family` are properties, and
        `blue` and `cursive` are the values for those properties.\r
        </details>\r
        </details>\r
        </div>\r
        #
        Text Alignment\r
        \r
        The `text-align` property sets the horizontal (side
        to side) position of the text within each line.\r
        \r
        * Find the "text-align"
        property in the paragraph tag.\r
        * Change the paragraph alignment.\r
          *
        Choose from "left", "right", and "center"
      CSD U2 text style text align_2018_markdown_instruction: |-
        <div style="float:
        right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px"
        markdown="1">\r
        <details>\r
        <summary>**How does the code work?**</summary>\r
        Here
        is the code that is controlling the paragraph text alignment:\r
        \r
        <pre>p
        {\r
          text-align: left;\r
        }</pre>\r
        \r
        * `p` is the _selector_.  It specifies
        which elements will have to follow the rules inside the curly braces. The
        `p` stands for paragraph.\r
        * `text-align: left;` is the rule that makes
        the text inside the `p` tags align to the left side of the paragraph.\r

        * `text-align` is the _property_.  It explains what the rule is about, in
        this case the text alignment.\r
         * `left` is the _value_.  It explains how
        the rule should be applied, in this case making the text align to the left
        side of the paragraph.\r
        </details>\r
        <details>\r
        <summary>**Why doesn't
        `text-align: left;` do anything?**</summary>\r
        Most properties have default
        values.  The default values are the styles that an element will have automatically,
        before you add your style sheet.  The default value for `text-align` is `left`,
        so it doesn't change from how it already looked.\r
        </details>\r
        <details>\r
        <summary>**What
        are the possible values for text align?**</summary>\r
        You can choose between
        "left", "right", and "center".  You can read more about the text-align
        property at <a href="http://www.w3schools.com/cssref/pr_text_text-align.asp">W3Schools
        - CSS text-align Property</a>\r
        </details>\r
        <details>\r
        <summary>**Why
        do I need all the punctuation?**</summary>\r
        The punctuation, such as the
        curly braces `{}`, the colon `:`, and the semicolon `;`, help the computer
        to understand the rules in the style sheet.  The curly braces hold all the
        rules for a particular selector.  Each rule should end in a semicolon, and
        the properties and values are always separated by a colon.\r
        </details>\r
        <details>\r
        <summary>**What
        is a style sheet?**</summary>\r
        A style sheet is a document that controls
        how a web page will appear.  External style sheets are separate files that
        are linked to the HTML page.\r
        </details>\r
        <details>\r
        <summary>**What
        is CSS?**</summary>\r
        CSS is a language that controls the way content on
        a web site appears.  It uses rule-sets to change the look of a page.  Each
        rule set has a selector, which specifies which elements on the page will be
        affected, and the rules, which explain how to display the elements.   Each
        rule consists of a property and a value for that property.\r
        \r
        \r
        Here’s
        an example of a rule-set that makes the text in an `h2` tag blue and cursive:\r
        \r
        <pre>h2
        {\r
           color: blue;\r
           font-family: cursive;\r
        </pre>\r
        \r
        In this
        example, `h2` is the selector, `color` and `font-family` are properties, and
        `blue` and `cursive` are the values for those properties.\r
        </details>\r
        </details>\r
        </div>\r
        #
        Text Alignment\r
        \r
        The `text-align` property sets the horizontal (side
        to side) position of the text within each line.\r
        \r
        * Find the "text-align"
        property in the paragraph tag.\r
        * Change the paragraph alignment.\r
          *
        Choose from "left", "right", and "center"
      CSD U2 unordered list_markdown_instruction: |-
        # Unordered Lists\r
        <div style="float:
        right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px"
        markdown="1">\r
        <details>\r
        <summary>**What are the two types of lists?**</summary>\r

        There are two types of lists in HTML, ordered and unordered lists.\r
        </details>\r
        <details>\r
        <summary>**What
        is an unordered list?**</summary>\r
        An unordered list is just a set of bulleted
        items.\r
        <br /><br />An unordered list element has the tag &lt;ul&gt; . This
        is an abbreviation for <strong>U</strong>nordered <strong>L</strong>ist. Each
        item in the list is marked by a list item element &lt;li&gt;. This is an abbreviation
        for <strong>L</strong>ist <strong>I</strong>tem.  The list item element is
        a child element, which means that it goes inside of its parent element, the
        unordered list (&lt;ul&gt;).\r
        </details>\r
        \r
        <details>\r
        <summary>**How
        do I make an unordered list?**</summary>\r
        Making an unordered list has two
        steps: making the list and adding the list items.  To make the unordered list,
        write the unordered list tags `<ul></ul>`.  Next, add your list items **inside**
        the unordered list tags.  To make each list item, use the list item tags `<li></li>`
        and write the list item inside the tags.\r
        <br /><br />\r
        It can be helpful
        to indent your &lt;li&gt; tags so it's clear they are contained in the &lt;ul&gt;
        tag.\r
        \r
        </details>\r
        \r
        <details>\r
        <summary>**Show me working code.**</summary>\r
        <table
        border="1">\r
        <tr>\r
        <td>Example</td>\r
        <td>Result</td>\r
        </tr>\r
        <tr>\r
        <td><pre>
        &lt;ul&gt; <br>   &lt;li&gt;Red &lt;/li&gt; <br>   &lt;li&gt;Green &lt;/li&gt;
        <br>   &lt;li&gt;Blue&lt;/li&gt; <br> &lt;/ul&gt; </pre></td>\r
        <td><img
        src="https://images.code.org/25d4dfc9b6c448d0da305df66aa1dfb7-image-1473444368948.05.32
        PM.png" style="width:200px"></td>\r
        </tr>\r
        </table>\r
        \r
        </details>\r
        </div>\r
        \r
        This
        page should have an unordered list, but it's missing the list tags.\r
        \r
        #
        Do This\r
        \r
        * Use the `<ul>` and `<li>` tags to structure the content into
        an unordered list like the picture below.\r
        \r
        ![](https://images.code.org/64581a90765cd2d53b6c5235c48f2855-image-1493238358294.25.04
        PM.png)
      CSD U2 unordered list_2018_markdown_instruction: |-
        # Unordered Lists\r
        <div
        style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left:
        20px; font-size:14px" markdown="1">\r
        <details>\r
        <summary>**What are
        the two types of lists?**</summary>\r
         There are two types of lists in HTML,
        ordered and unordered lists.\r
        </details>\r
        <details>\r
        <summary>**What
        is an unordered list?**</summary>\r
        An unordered list is just a set of bulleted
        items.\r
        <br /><br />An unordered list element has the tag &lt;ul&gt; . This
        is an abbreviation for <strong>U</strong>nordered <strong>L</strong>ist. Each
        item in the list is marked by a list item element &lt;li&gt;. This is an abbreviation
        for <strong>L</strong>ist <strong>I</strong>tem.  The list item element is
        a child element, which means that it goes inside of its parent element, the
        unordered list (&lt;ul&gt;).\r
        </details>\r
        \r
        <details>\r
        <summary>**How
        do I make an unordered list?**</summary>\r
        Making an unordered list has two
        steps: making the list and adding the list items.  To make the unordered list,
        write the unordered list tags `<ul></ul>`.  Next, add your list items **inside**
        the unordered list tags.  To make each list item, use the list item tags `<li></li>`
        and write the list item inside the tags.\r
        <br /><br />\r
        It can be helpful
        to indent your &lt;li&gt; tags so it's clear they are contained in the &lt;ul&gt;
        tag.\r
        \r
        </details>\r
        \r
        <details>\r
        <summary>**Show me working code.**</summary>\r
        <table
        border="1">\r
        <tr>\r
        <td>Example</td>\r
        <td>Result</td>\r
        </tr>\r
        <tr>\r
        <td><pre>
        &lt;ul&gt; <br>   &lt;li&gt;Red &lt;/li&gt; <br>   &lt;li&gt;Green &lt;/li&gt;
        <br>   &lt;li&gt;Blue&lt;/li&gt; <br> &lt;/ul&gt; </pre></td>\r
        <td><img
        src="https://images.code.org/25d4dfc9b6c448d0da305df66aa1dfb7-image-1473444368948.05.32
        PM.png" style="width:200px"></td>\r
        </tr>\r
        </table>\r
        \r
        </details>\r
        </div>\r
        \r
        This
        page should have an unordered list, but it's missing the list tags.\r
        \r
        #
        Do This\r
        \r
        * Use the `<ul>` and `<li>` tags to structure the content into
        an unordered list like the picture below.\r
        \r
        ![](https://images.code.org/64581a90765cd2d53b6c5235c48f2855-image-1493238358294.25.04
        PM.png)
      CSD U2 upload image_markdown_instruction: |-
        # Upload a new image\r
        <div style="float:
        right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px">\r
        <details>\r
        <summary>**How
        do I add images?**</summary>\r
        The `<img>` tag allows you to show images
        on your web page. <br><br>\r
        \r
        Example:\r
        <pre>&lt;img src="dog.png"
        alt="dog jumping"/&gt;</pre><br><br>\r
        \r
        In order to tell the browser
        which file to use, extra information, called an **attribute**, is added to
        the &lt;img&gt; tag inside the brackets. The attribute `src` stands for **s**ou**rc**e
        and tell the name of the image. Image files names include extensions which
        tell the computer which type of image they are working with. Common extensions
        are .jpg, .jpeg, .png. <br><br>\r
        \r
        In addition to have the src attribute,
        image elements also have the `alt` attribute which describe the image. This
        is important in case the image doesn’t load or for people who have trouble
        with their eyesight. <br><br>\r
        \r
        An `<img>` tag is an example of a  **void
        element** because it starts and closes in one tag. To mark this we put the
        `/` which usually goes in the close tag at the end of the image tag.\r
        \r
        </details>\r
        <details>\r
        <summary>**What
        is a void tag?**</summary>\r
        An `<img>` tag is an example of a  **void element**
        because it starts and closes in one tag. To mark this we put the `/` which
        usually goes in the close tag at the end of the image tag. Void tags do not
        need a closing tag because there is no text content which must be wrapped
        in tags. The content that shows on the screen is specified through the tags
        attributes.\r
        </details>\r
        <details>\r
        <summary>**Why does an image tag
        not have a closing tag?**</summary>\r
        An image tag is a void tag and void
        tags do not need a closing tag because there is no text content which must
        be wrapped in tags. The content that shows on the screen is specified through
        the tags attributes.\r
        </details>\r
        <details>\r
        <summary>**What is an attribute?**</summary>\r
        Attributes
        are extra information included in a tag.  Attributes have names and values.
        The name tells what type of information is being provided and then the value
        gives the specific information for that tag. \r
        \r
        For example &lt;img&gt;
        tags have two attributes, src and alt. src specifies the name of the image
        file and alt tells the browser in readable text what the image is.\r
        </details>\r
        </div>\r
        \r
        You
        can now add your own images to your personal website.  If you don't have
        the images that you want on your computer, you can search for them here and
        download them.\r
        <form action="https://www.google.com/search" method="GET"
        target="_blank">\r
        <input type=hidden name=site value="imghp" />\r
        <input
        type=hidden name=tbm value=isch />\r
        <input type=hidden name=tbs value="sur:fmc"
        />\r
        <input name=q />\r
        <input type=submit value="search">\r
        <br />\r
        </form>\r
        \r
        Once
        you have your images, click ![](https://images.code.org/c35789d00e59b0dbe42879390dabf925-image-1493240590385.01.49
        PM.png) and upload the image from your computer into your project.\r
        \r
        #
        Do This\r
        * Upload at least two images into your project\r
        * Use the `<img>`
        tag to display the images in your website.
      CSD U2 upload images_markdown_instruction: |
        # Upload Images\r
        \r
        Next, you'll
        need to upload all of your images into your project.\r
        \r
        # Do This\r
        *
        Download all the images you want onto your computer. Visit <a href="/s/csd2/stage/7/puzzle/5"
        target="_new">Lesson 7 Level 5</a> for help if you need it.\r
         * Make sure
        you have the right to use these images.\r
         * Write down all of the attribution
        information that you need.\r
         * Upload all of the images into your project.  Visit
        <a href="/s/csd2/stage/7/puzzle/5" target="_new">Lesson 7 Level 5</a>
        if you've forgotten how.\r
      CSD U2 upload images_2018_markdown_instruction: |
        # Upload Images\r
        \r
        Next,
        you'll need to upload all of your images into your project.\r
        \r
        # Do This\r
        *
        Download all the images you want onto your computer. Visit <a href="/s/csd2/stage/7/puzzle/5"
        target="_new">Lesson 7 Level 5</a> for help if you need it.\r
         * Make sure
        you have the right to use these images.\r
         * Write down all of the attribution
        information that you need.\r
         * Upload all of the images into your project.  Visit
        <a href="/s/csd2/stage/7/puzzle/5" target="_new">Lesson 7 Level 5</a>
        if you've forgotten how.\r
      CSD U3 - Booleans Video_markdown_instruction: "# Boolean Expressions Video"
      CSD U3 - Booleans Video_2018_markdown_instruction: "# Boolean Expressions Video"
      CSD U3 - Simple Counter Predict_markdown_instruction: |
        # The Counter Pattern\r
        \r
        This
        pattern is one of the most important ones in all of programming. \r
        \r
        ![](https://images.code.org/83af2e40443ab294ba635f2a01a48ac7-image-1465506512065.06.56
        PM.png)\r
            \r
        It is used to increase the value of a variable by 1. You
        might call it the **counter pattern** since it can be used to make a variable
        that counts up. You'll use this pattern a lot, especially with the draw loop.
        Let's see what that looks like.\r
        \r
        # Do This\r
        \r
        This program creates
        a variable `counter` and then uses the **counter pattern** to make it count
        up. When you run the program what do you think you'll see on the screen?\r
        \r
        *
        **Read the program** and make a prediction of what the output will be.\r
        *
        **Run the program** to check your prediction.\r
        * **Discuss with a neighbor**.
        Can you explain what you observed?\r
        \r
      CSD U3 - Simple Counter Predict_2018_markdown_instruction: |
        # The Counter Pattern\r
        \r
        This
        pattern is one of the most important ones in all of programming. \r
        \r
        ![](https://images.code.org/83af2e40443ab294ba635f2a01a48ac7-image-1465506512065.06.56
        PM.png)\r
            \r
        It is used to increase the value of a variable by 1. You
        might call it the **counter pattern** since it can be used to make a variable
        that counts up. You'll use this pattern a lot, especially with the draw loop.
        Let's see what that looks like.\r
        \r
        # Do This\r
        \r
        This program creates
        a variable `counter` and then uses the **counter pattern** to make it count
        up. When you run the program what do you think you'll see on the screen?\r
        \r
        *
        **Read the program** and make a prediction of what the output will be.\r
        *
        **Run the program** to check your prediction.\r
        * **Discuss with a neighbor**.
        Can you explain what you observed?\r
        \r
      CSD U3 - Sprites - Sprite v Rect_markdown_instruction: |-
        # Sprites vs Rect\r
        \r
        Curently
        sprites and rectangles seem really similar. It will become clear later on
        why sprites are more powerful than basic shapes. Before you get there though
        it is important to call out a major difference in the way sprites and rectangles
        draw.\r
        \r
        # Do This\r
        Can you will figure out the difference by just trying
        this?\r
        \r
        * Create a rectangle with a width and height of 30\r
        * Set the
        fill for the rectangle to a different color than gray (So its clear which
        is the rectangle)\r
        * Create a sprite and give it the same x and y values
        as you gave the rectangle\r
        * Make sure to call `drawSprites` in the draw
        loop\r
        * Run the program\r
        * Can you see the difference?
      CSD U3 - complex - compound conditionals_markdown_instruction: |
        # Possible
        Solution #2 - Compound Conditionals\r
        \r
        Another way that you might have
        phrased the challenge problem is:\r
        \r
        \tIf the up arrow was pressed AND
        the sprite hasn't gone off the top of the screen, move up.\r
        \r
        This structure
        of asking both questions at the same time is accomplished using a **compound
        conditional**. Compound conditionals use the boolean operators `AND` and `OR`
        to ask multiple questions at once. `AND` only returns true if _both_ of the
        questions it's asking are true, while `OR` will return true if _either_ of
        its questions are true. In JavaScript (and many other languages) `AND` is
        represented by two ampersands (`&&`) while `OR` is represented by two pipes
        (`||`) - their blocks look like this: \r
        \r
        ![](https://images.code.org/c7ab68cb4091472f05d7c862a52730c6-image-1466785066210.48.02.png)\r
        \r
        We
        could pseudocode this solution as \r
        \r
        \tIf the up arrow was pressed AND
        sprite.y > 0\t// Both Questions\r
            \tmove up\t\t\t\t\t\t\t\t\t // Only
        runs if both questions were true\r
        \r
        \r
        # Do This\r
        \r
        Here's the same
        code from the challenge again, but this time the up arrow uses a compound
        conditional. \r
        \r
        * Use the same compound conditional pattern on the other
        three arrow keys.\r
      CSD U3 - complex - key up and down_markdown_instruction: |-
        # Responding to a
        Single Click\r
        \r
        Earlier we learned that `keyWentDown` and `keyWentUp`
        can be used to respond to a keypress a single time. The blocks `mouseWentUp`
        and `mouseWentDown` allow you to do that for the mouse!\r
        \r
        # Do This\r
        \r
        Let's
        make a simple game that counts how many times you've clicked. We've already
        provided a variable `clicks` that you can use to track how many times the
        user has clicked.\r
        \r
        * Add a conditional that checks if the mouse went
        down.\r
        * Inside your conditional, add to the `clicks` variable.\r
        \r
        _Challenge:
        Can you add a sprite that responds to `mouseWentDown` as well? Add an image
        of your choice and increase the sprite's size each time the mouse is clicked._
      CSD U3 - complex - key up and down_2018_markdown_instruction: |-
        # Responding
        to a Single Click\r
        \r
        Earlier we learned that `keyWentDown` and `keyWentUp`
        can be used to respond to a keypress a single time. The blocks `mouseWentUp`
        and `mouseWentDown` allow you to do that for the mouse!\r
        \r
        # Do This\r
        \r
        Let's
        make a simple game that counts how many times you've clicked. We've already
        provided a variable `clicks` that you can use to track how many times the
        user has clicked.\r
        \r
        * Add a conditional that checks if the mouse went
        down.\r
        * Inside your conditional, add to the `clicks` variable.\r
        \r
        _Challenge:
        Can you add a sprite that responds to `mouseWentDown` as well? Add an image
        of your choice and increase the sprite's size each time the mouse is clicked._
      CSD U3 - complex - mouse down_markdown_instruction: |-
        # Mouse Clicks\r
        \r
        Keypresses
        are great, but sometimes you want users to interact through mouse clicks.
        There's a new block called `mouseDown` which, similar to `keyDown`, checks
        whether the left or right mouse buttons is being pressed. If you are using
        a computer with a mouse or trackpad that has only one button, you'll want
        to always use `mouseDown("left")`. \r
        \r
        # Do This\r
        Here's a program
        that drops a balloon down the screen - you're going to program the mouse
        button to raise the balloon back up while it's clicked.\r
        \r
        * Add an if
        else statment that checks for `mouseDown`.\r
        * Inside the conditional, move
        the balloon up one pixel if the mouse is down. Otherwise, move the balloon
        down.\r
        \r
        _Hint: You'll need to move the code that drops the balloon for
        this to work - you only want it to run if `mouseDown` is `false`_\r
        \r
        _Challenge:
        Can you make the balloon drift randomly to the left and right as it rises
        and falls?_
      CSD U3 - complex - mouse down_2018_markdown_instruction: |-
        # Mouse Clicks\r
        \r
        Keypresses
        are great, but sometimes you want users to interact through mouse clicks.
        There's a new block called `mouseDown` which, similar to `keyDown`, checks
        whether the left or right mouse buttons is being pressed. If you are using
        a computer with a mouse or trackpad that has only one button, you'll want
        to always use `mouseDown("left")`. \r
        \r
        # Do This\r
        Here's a program
        that drops a balloon down the screen - you're going to program the mouse
        button to raise the balloon back up while it's clicked.\r
        \r
        * Add an if
        else statment that checks for `mouseDown`.\r
        * Inside the conditional, move
        the balloon up one pixel if the mouse is down. Otherwise, move the balloon
        down.\r
        \r
        _Hint: You'll need to move the code that drops the balloon for
        this to work - you only want it to run if `mouseDown` is `false`_\r
        \r
        _Challenge:
        Can you make the balloon drift randomly to the left and right as it rises
        and falls?_
      CSD U3 - complex - mouse move_markdown_instruction: |-
        # mouseDidMove\r
        \r
        We
        can also use Boolean expressions to check whether or not the mouse has moved.
        The `mouseDidMove` block will return `false` if the mouse is still, but `true`
        if the mouse has been moving.\r
        \r
        # Do This\r
        Right now, this program
        just displays a salt shaker sprite. You'll need to use `mouseDidMove` so
        that you can "shake" the salt by moving the mouse back and forth.\r
        \r
        *
        Add a conditional that checks if `mouseDidMove`.\r
        * If the conditional is
        true, rotate the salt sprite randomly to the left or right.\r
        \r
        _Challenge:
        Can you keep track of how many times the `mouseDidMove` shakes the salt, and
        then rotate it right side up after 100 shakes?_
      CSD U3 - complex - mouse move_2018_markdown_instruction: |-
        # mouseDidMove\r
        \r
        We
        can also use Boolean expressions to check whether or not the mouse has moved.
        The `mouseDidMove` block will return `false` if the mouse is still, but `true`
        if the mouse has been moving.\r
        \r
        # Do This\r
        Right now, this program
        just displays a salt shaker sprite. You'll need to use `mouseDidMove` so
        that you can "shake" the salt by moving the mouse back and forth.\r
        \r
        *
        Add a conditional that checks if `mouseDidMove`.\r
        * If the conditional is
        true, rotate the salt sprite randomly to the left or right.\r
        \r
        _Challenge:
        Can you keep track of how many times the `mouseDidMove` shakes the salt, and
        then rotate it right side up after 100 shakes?_
      CSD U3 - complex - nested conditional_markdown_instruction: |
        # Possible Solution
        #1 - Nested Conditionals\r
        \r
        The way you phrase the previous challenge
        says a lot about how you might approach solving it. For example, you might
        have phrased moving up and staying on screen as:\r
        \r
        \tIf the up arrow
        was pressed then check if the sprite hasn't gone off the top of the screen
        and move up.\r
        \r
        This structure of first asking one question, and then
        asking a second question if the first was true is accomplished using a **nested
        if statement**. Nested if statements put one if statement inside another if
        statement. You can think of this as asking a question and then based on the
        answer asking another question before making a decision. We could pseudocode
        the previous phrase as:\r
        \r
        \tIf the up arrow was pressed\t// First Question\r
            \tIf
        my y > 0\t\t\t\t// Second Question\r
                \tmove up\t\t\t\t// Only runs
        if both questions were true\r
        \r
        \r
        # Do This\r
        \r
        Here's the same code
        from the challenge, with the up arrow using a nested conditional. \r
        \r
        *
        Use the same nested conditional pattern on the other 3 arrow keys.\r
      CSD U3 - conditionals - arrows and gears_markdown_instruction: |-
        # Gears with
        Conditionals\r
        \r
        Let's make the gears spin only when the space key is
        being held down.\r
        \r
        # Do This\r
        \r
        * Add an `if` statement.\r
        * Use
        `keyDown` as input to the if statement to check when the space key is pressed.\r
        *
        Move the code that makes the gears rotate inside the `if`.
      CSD U3 - conditionals - first conditional 2-2018_markdown_instruction: |-
        <img
        src="https://images.code.org/abd459d8d1477ac2f582417f4334cdaa-image-1466107090414.gif"
        style="width:200px;float:right">\r
        # Visible\r
        \r
        Sometimes it's useful
        to hide the image for a while and then show it again. You can do this using
        the `visible` property. The visible property is a little different from other
        properties you have seen in the past: It is a Boolean value, either `true`
        (the sprite is visible) or `false` (the sprite is **not** visible). By default,
        visible is set to `true`.\r
        \r
        # Do This\r
        Make the balloon pop when it
        hits the edge of the game area!\r
        \r
        * Add a conditional that checks to
        see whether the balloon has hit the edge.\r
        \t* Use a watcher on `balloon.scale`
        to help you out.\r
        * Create a pop sprite which uses the "pop" visual in
        the animation tab.\r
        * Use the `visible` property to keep the "pop" sprite
        hidden at the beginning.\r
        * Inside the `if` add two statements.\r
        \t* One
        that sets the `visible` property to hide the balloon sprite.\r
            * One
        that sets the `visible` property to show the pop sprite.
      CSD U3 - conditionals - first conditional 2_markdown_instruction: |-
        <img src="https://images.code.org/abd459d8d1477ac2f582417f4334cdaa-image-1466107090414.gif"
        style="width:200px;float:right">\r
        # Visible\r
        \r
        Now that you have conditionals
        and images, sometimes it's useful to hide the image for a while and then
        show it again. You can do this using the `visible` property. The visible property
        is a little different from other properties you have seen in the past: It
        is a Boolean value, either `true` (the sprite is visible) or `false` (the
        sprite is **not** visible). By default, visible is set to `true`.\r
        \r
        #
        Do This\r
        Make the balloon pop when it hits the edge of the game area!\r
        \r
        *
        Add an `if` statement that checks to see if the balloon has hit the edge.\r
        \t*
        Use a watcher on `balloon.scale` to help you out.\r
        * Create a pop sprite
        which uses the "pop" visual in the animation tab.\r
        * Set the pop's `visible`
        property to `false` to start.\r
        * Inside the `if` add two statements.\r
        \t*
        One that sets the `visible` property to hide the balloon sprite.\r
            *
        One that sets the `visible` property to show the pop sprite.
      CSD U3 - conditionals - first conditional 2_2018_markdown_instruction: |-
        <img
        src="https://images.code.org/abd459d8d1477ac2f582417f4334cdaa-image-1466107090414.gif"
        style="width:200px;float:right">\r
        # Visible\r
        \r
        Sometimes it's useful
        to hide the image for a while and then show it again. You can do this using
        the `visible` property. The visible property is a little different from other
        properties you have seen in the past: It is a Boolean value, either `true`
        (the sprite is visible) or `false` (the sprite is **not** visible). By default,
        visible is set to `true`.\r
        \r
        # Do This\r
        Make the balloon pop when it
        hits the edge of the game area!\r
        \r
        * Add a conditional that checks to
        see whether the balloon has hit the edge.\r
        \t* Use a watcher on `balloon.scale`
        to help you out.\r
        * Create a pop sprite which uses the "pop" visual in
        the animation tab.\r
        * Use the `visible` property to keep the "pop" sprite
        hidden at the beginning.\r
        * Inside the `if` add two statements.\r
        \t* One
        that sets the `visible` property to hide the balloon sprite.\r
            * One
        that sets the `visible` property to show the pop sprite.
      CSD U3 - conditionals - first conditional_markdown_instruction: |
        <img src="https://images.code.org/36c5543076622c96f7dabce8bc37f995-image-1468425774455.54.03
        PM.png" style="float:right;width:100px">\r
        # If Statement\r
        \r
        The Boolean
        expressions you used earlier allow us to ask questions, but in order to _respond
        to those questions_, we need to use an `if` statement.\r
        \r
        `if` statements
        usually go inside your draw loop because we want to check them each time the
        loop runs. \r
        \r
        # Do This\r
        \r
        The race car program you wrote earlier
        is loaded here for you.\r
        \r
        * Add an `if` statement after you update the
        position of the race car.\r
        * Move the Boolean expression from the console.log
        statement to the condition of the if statement.\r
        * Inside the `if` statement
        add a statement to draw text on the screen to say "Winner".\r
      CSD U3 - conditionals - first conditional_2018_markdown_instruction: |
        <img
        src="https://images.code.org/36c5543076622c96f7dabce8bc37f995-image-1468425774455.54.03
        PM.png" style="float:right;width:100px">\r
        # If Statement\r
        \r
        The Boolean
        expressions you used earlier allow us to ask questions, but in order to _respond
        to those questions_, we need to use an `if` statement.\r
        \r
        `if` statements
        usually go inside your draw loop because we want to check them each time the
        loop runs. \r
        \r
        # Do This\r
        \r
        The race car program you wrote earlier
        is loaded here for you.\r
        \r
        * Add an `if` statement after you update the
        position of the race car.\r
        * Move the Boolean expression from the console.log
        statement to the condition of the if statement.\r
        * Inside the `if` statement
        add a statement to draw text on the screen to say "Winner".\r
      CSD U3 - conditionals - transition 2_markdown_instruction: |-
        # More Practice
        With Booleans\r
        \r
        Let's use one more Boolean expression to check the condition
        of a sprite.\r
        \r
        # Do This\r
        There is a growing balloon sprite created
        for you. Can you create an expression to check when the balloon hits the edge
        of the game area?\r
        \r
        * Add a `console.log` statement.\r
        * Add a Boolean
        expression inside the `console.log` that checks whether the balloon has hit
        the edge of the game area.\r
        * Hint: Use the scale of the balloon. You might
        have to do some guess and check testing to find the right scale.
      CSD U3 - conditionals - transition_markdown_instruction: |-
        # Booleans\r
        \r
        In
        the past few levels, we have been comparing values of sprites to find out
        whether something is true or false. Let's start putting that in the context
        of an animation.\r
        \r
        # Do This\r
        The program draws a race car and a finish
        line. We are going to figure out when the race car crosses the finish line.
        The sprites have all been set up for you.\r
        \r
        * Add a `console.log` statement
        inside the draw loop. ( [Show me where](#triggercallout=callout) )\r
        * Add
        an Boolean expression inside the `console.log` that asks "Is the x position
        of the race car less than the x position of the finish line?"\r
        * Look at
        the output of the program as the car moves. When does the output change? Why?
      CSD U3 - conditionals - transition_2018_markdown_instruction: |-
        # Booleans\r
        \r
        In
        the past few levels, we have been comparing values of sprites to find out
        whether something is true or false. Let's start putting that in the context
        of an animation.\r
        \r
        # Do This\r
        The program draws a race car and a finish
        line. We are going to figure out when the race car crosses the finish line.
        The sprites have all been set up for you.\r
        \r
        * Add a `console.log` statement
        inside the draw loop. ( [Show me where](#triggercallout=callout) )\r
        * Add
        an Boolean expression inside the `console.log` that asks "Is the x position
        of the race car less than the x position of the finish line?"\r
        * Look at
        the output of the program as the car moves. When does the output change? Why?
      CSD U3 - images - Embed Project_markdown_instruction: |-
        Example of the Final
        Project
      CSD U3 - images - animations_markdown_instruction: |-
        # Animations\r
        \r
        You
        have seen through out this Unit that when you put together a set of images
        and play them close together back to back it looks like movement! Well sprites
        make that animation easier! You can put together a set of images to create
        an animation. There are pre-loaded animations for you in the animations manager.
        \r
        \r
        Set the animation with setAnimation.\r
        \r
        # Do This\r
        \r
        * Create
        a sprite\r
        * Add the animation.
      CSD U3 - images - changing scene_markdown_instruction: |
        # Images\r
        \r
        Use
        the animations tab to finish making all three sprites fish images.\r
        \r
        <img
        src="https://images.code.org/f947fc6800cd1abda023b08c20a2ee87-image-1477679298953.gif"
        style="float:right">\r
        \r
        # Do This\r
        Your goal is to finish the underwater
        scene so all three sprites are fish like the example on the right. \r
        \r
        *
        There is a rectangle sprite already created for you for each fish.\r
        * Run
        the code to see how it works.\r
        * Add a `setAnimation` command to change
        the look for the remaining two fish. \r
        * Run it to see that your rectangle
        is now an image!\r
      CSD U3 - images - first image_markdown_instruction: |-
        # Images\r
        \r
        Up until
        now all of your sprites have been rectangles. No longer! Now you can use pictures
        for your sprites instead.\r
        \r
        Check out the animations tab by clicking
        the <img src="https://images.code.org/9471c62f11f3c6065c0d2da523f2ac89-image-1465515854142.43.49
        PM.png" style="width:100px"> button above the display area.\r
        \r
        There
        is an image there that have been loaded for you!\r
        \r
        In order to use that
        image you will need to use the `setAnimation` command. You have to create
        the sprite before you can set its animation.\r
        \r
        # Do This\r
        \r
        There
        is a rectangle sprite already created for you. All you need to do is change
        it to an image.\r
        \r
        * Add a call to `setAnimation` to set the animation
        to the image provided\r
        * Run it to see that your rectangle is now an image!
      CSD U3 - images - first sprite with image_markdown_instruction: |-
        # Images\r
        \r
        Rectangles
        are great, but if you're going to make animations and games that really look
        great, you'll need some way to add more interesting images to your sprites.\r
        \r
        Over
        on the **Animations Tab** you'll see three images that have been loaded for
        you! You can get to the animations tab by clicking the <img src="https://images.code.org/9471c62f11f3c6065c0d2da523f2ac89-image-1465515854142.43.49
        PM.png" style="width:100px"> button above the display area.\r
        \r
        <img
        src="https://images.code.org/f694a37bbadcf0533e7b19d8c0f5309b-image-1465580394090.35.11
        PM.png" style="width:300px;float:right">\r
        \r
        Once you have created a
        sprite you can **use the `setAnimation()` command to change the look of your
        sprite from a rectangle to a picture.** The blocks make this super easy to
        do as the names of all the images you have loaded in the animation tab show
        up in the `setAnimation()` dropdown.  The alien is set up for you as an example.\r
        \r
        #
        Do This\r
        Change the sprite to your favorite image from the animations tab.\r
        \r
        *
        A sprite that is set to an image has already been created for you.\r
        * Run
        the code to see how it works.\r
        * Change the input to the `setAnimation`
        command to change the look of the sprite.\r
        * Try out all the different images.
      CSD U3 - images - fish free play_markdown_instruction: |-
        # Fish Free Play\r
        \r
        Here
        are the swimming fish you have been working on. Continue to improve the animation!\r
        \r
        #
        Do This\r
        \r
        * Add another sea creature to the scene.\r
        * Make the sea
        creature move.\r
        * Make one of the fish follow the mouse.\r
        * Add more ideas
        of your own!
      CSD U3 - images - fish with arrows_markdown_instruction: |-
        # Fish With Arrows\r
        \r
        The
        fish are back. Can you make the fish move left only when the left arrow key
        is pressed down?\r
        \r
        # Do This\r
        \r
        * Add an if statement to check when
        the left arrow key is pressed down.\r
        * Move the statements for moving the
        fish inside the if statement.
      CSD U3 - images - kite free play_markdown_instruction: |-
        # Kite Free Play\r
        \r
        Here
        is the flying kite you have been working on. Continue to improve the animation!\r
        \r
        #
        Do This\r
        \r
        * Add at least 1 other sprite.\r
        * Make the sprite move.\r
        *
        Improve the background by adding clouds or other objects.\r
        * Add more ideas
        of your own!
      CSD U3 - images - kiteFlying_markdown_instruction: |-
        # Flying Kite\r
        \r
        Now
        that you have a kite, make it fly around.\r
        \r
        To do this we will need to
        move the kite and update the end position of the line that is the string.
        You have done similar things with variables before but now you will be using
        properties.\r
        \r
        # Do This\r
        \r
        * Make the kite move around the top right
        corner of the screen randomly.\r
        * Move the code for the string of the kite
        to the Draw Animations section since it is now moving!\r
        * Update the end
        position of the line so that one end of string stays at the center of the
        kite.
      CSD U3 - images - nextFrame_markdown_instruction: |-
        # Next Frame\r
        \r
        On the
        last level the animation you used continously looped through the animation
        and never stopped. Sometimes we want to control when the animation changes.  When
        you want to create a sequence but not have it loop you can click the button
        in the anmations tab *** show example***. Then in the code you can control
        when you move to the next frame using `nextFrame`. \r
        \r
        \r
        # Do This\r
        \r
        There
        is a sprite already created for you and 4 images loaded into the animations
        tab. Make the sprite change frames each time the space bar is pressed down.\r
        \r
        *
        Create a conditional to respond to the space bar\r
        * Inside the conditional
        call `nextFrame` to move the sprite to the next frame
      CSD U3 - images - race images_markdown_instruction: |-
        # Race Cars\r
        \r
        You
        made a racing game in the last lesson. You can now make those rectangles look
        like race cars!\r
        \r
        # Do This\r
        \r
        * Use the race car images in the animations
        tab to update your racing animation.
      CSD U3 - images - random movement_markdown_instruction: |
        <img src="https://images.code.org/fccef5d23434917c0a22361cb6e69666-image-1477679738105.gif"
        style="float:right">\r
        \r
        # Updating Fish\r
        \r
        The same thing you did
        on the last level will help your fish look more like they are swimming. Update
        your scene to make the fish look like they don't swim in a perfectly straight
        line. \r
        \r
        # Do This\r
        Your goal is to finish the underwater scene so
        all three sprites are fish like the example on the right. \r
        \r
        * Use a
        small random rotation to **make your fish wiggle**.\r
      CSD U3 - images - review_markdown_instruction: |-
        # Sprites Review\r
        \r
        You
        have learned a lot about sprites already and conditionals. Can you use those
        skills to create a square that moves in all 4 directions in response to the
        arrow keys?\r
        \r
        # Do This\r
        \r
        * Create a sprite\r
        * Make the sprite
        move up, down, left, and right in response to the arrow keys
      CSD U3 - images - scale_markdown_instruction: |-
        # Upload your own image\r
        \r
        So
        the image you uploaded probably was not the size you wanted was it? You can
        fix that!  There is a property for sprites called `scale`.  **Scale controls
        the width and the height of the sprite at once.** Using scale is better than  using
        width and height for images because...\r
        1. It's one property instead of
        two.\r
        2. You keep the image ratio and it doesn't distort it.\r
        \r
        **To
        make the image smaller you want to use a scale less than 1. To make the image
        bigger you want to use a number greater than 1. A scale of 1 would keep it
        the same.**\r
        \r
        # Do This\r
        \r
        * Resize your kite using `scale` to better
        fit the picture.
      CSD U3 - images - setAnimation_markdown_instruction: |-
        # Upload your own image\r
        \r
        You
        can also use the Animation tab to upload your own image.\r
        \r
        # Do This\r
        You
        are going to make a flying kite. The first step is to pick out a kite you
        like.\r
        \r
        * Find an image of a kite you want to use.  It works best if
        it has a clear background.\r
        * Open the animations tab.\r
        * Click <img src="https://images.code.org/346f6657dba57b0c3bd5deb534f76b69-image-1466194432449.13.05
        PM.png" style="width:50px">\r
        * Click <img src="https://images.code.org/60c0371b45b29f10a3c8530db9154428-image-1466194434329.13.16
        PM.png" style="width:50px">\r
        * Select a file from your computer.\r
        *
        Rename your image so it has a name that is easy to remember. To rename it
        click the text below the image. <img src="https://images.code.org/c7809f27743bcb4cd86e46a4493c5c7a-image-1466194516357.15.04
        PM.png" style="width:60px">\r
        * Set the kite sprite to display your image.\r
        \r
        Don't
        worry if your kite image is too big! You'll learn how to fix that in the
        next level.
      CSD U3 - images - switch the picture_markdown_instruction: |-
        # Switching Images\r
        \r
        You
        don't have to keep the same image the whole time. In fact since your *image*
        was moving around the screen it would be cool to have it fact the correct
        direction as it moves.\r
        \r
        # Do This\r
        \r
        Your work was copied here as
        well\r
        \r
        * Add a call to `setAnimation` inside each if statement to the
        correct image
      CSD U3 - images - visible_markdown_instruction: |
        # Visible\r
        \r
        Now that
        you have conditionals and images sometimes it appropriate to hide the image
        for a while and then show it again. You can do this using the `visible` property.
        The visible property is a little different than some of the other properties
        you have seen in the past. It is a boolean value. So visible is either true
        or false. By default visible is set to true.\r
        \r
        \r
        # Do This\r
        \r
        *
        In response to something set the sprite to visible and invisible.\r
      CSD U3 - sprites - motiviation_markdown_instruction: |-
        # How Many Variables?\r
        \r
        In
        the last lesson you learned how to use the **counter pattern** (`x = x + 1`,
        `x = x - 0.5`, `x = x - 1`, etc.) to create smooth animations. Using this
        pattern in many different ways allows you to create interesting and complex
        animations.\r
        \r
        Watch the animation here. With a partner discuss: \r
        \r
        *
        How many counter variables would you need to create to make this animation?
        What are they used to animate?\r
        * What would you name your variables?\r
        *
        What are the challenges of using counter variables in a scene like this?
      CSD U3 AnimationsMulti Play Defender_markdown_instruction: |-
        # Defend Your Cake!\r
        \r
        This
        is an example of a defender game that you'll build by the end of this lesson.
        To defend your cake, move the alien with arrow keys to block the lady bugs
        and push them into the water.\r
        \r
        # Do This\r
        \r
        Turn to a classmate
        and make a list of the following information.\r
        \r
        * How many sprites are
        there in this game. Which are they?\r
        * What variables are needed to make
        this game? What do they store?\r
        * If you were to split the code of this
        game into functions what do you think they would be? What are the major pieces
        of behavior you'd need to create in your code?
      CSD U3 AnimationsMulti Play Defender_2018_markdown_instruction: |-
        # Defend Your
        Cake!\r
        \r
        This is an example of a defender game that you'll build by the
        end of this lesson. To defend your cake, move the alien with arrow keys to
        block the lady bugs and push them into the water.\r
        \r
        # Do This\r
        \r
        Turn
        to a classmate and make a list of the following information.\r
        \r
        * How
        many sprites are there in this game. Which are they?\r
        * What variables are
        needed to make this game? What do they store?\r
        * If you were to split the
        code of this game into functions what do you think they would be? What are
        the major pieces of behavior you'd need to create in your code?
      CSD U3 AnimationsMulti defender animate cake enemies_markdown_instruction: |-
        #
        Getting Started: Set Animations\r
        \r
        You should have already reviewed the
        planning guide for this project. A lot of the work to turn this project guide
        into a working game has already been started. Based on the project guide you're
        going to do the rest of this work.\r
        \r
        # Do This\r
        \r
        Before we get started
        you'll want some better animations for each of your sprites.\r
        \r
        * In
        the Animation Tab are animations for each of your sprites. Go look at what
        they are.\r
        * In your code give each sprite its appropriate animation. **Use
        the ones provided for now** but later you'll be able to go change them.\r
        *
        Head to [Level 4](/s/csd3/stage/20/puzzle/4) if you need help remembering
        how to do this.
      CSD U3 AnimationsMulti defender animate cake enemies_2018_markdown_instruction: |-
        #
        Getting Started: Set Animations\r
        \r
        You should have already reviewed the
        planning guide for this project. A lot of the work to turn this project guide
        into a working game has already been started. Based on the project guide you're
        going to do the rest of this work.\r
        \r
        # Do This\r
        \r
        Before we get started
        you'll want some better animations for each of your sprites.\r
        \r
        * In
        the Animation Tab are animations for each of your sprites. Go look at what
        they are.\r
        * In your code give each sprite its appropriate animation. **Use
        the ones provided for now** but later you'll be able to go change them.\r
        *
        Head to [Level 4](/s/csd3/stage/20/puzzle/4) if you need help remembering
        how to do this.
      CSD U3 AnimationsMulti defender animate player_markdown_instruction: |-
        # Change
        Player Animations\r
        \r
        Right now your player is always facing the same direction.
        You can make things look a lot more realistic by switching between animations.
        Your player should switch between a left-facing and right-facing animation
        depending on which key was last pressed. Remember, you can quickly copy and
        edit animations inside the Animation Tab.\r
        \r
        # Do This\r
        \r
        * Inside
        the Animation Tab copy the animation of your player sprite.\r
        * Flip each
        frame of the new animation so that the sprite is facing in the opposite direction.\r
        *
        Rename your new animation.\r
        * Use the `setAnimation` command inside the
        `movePlayer` function so that the player changes the direction it is facing
        when the "left" and "right" arrows are pressed.
      CSD U3 AnimationsMulti defender animate player_2018_markdown_instruction: |-
        #
        Change Player Animations\r
        \r
        Right now your player is always facing the
        same direction. You can make things look a lot more realistic by switching
        between animations. Your player should switch between a left-facing and right-facing
        animation depending on which key was last pressed. Remember, you can quickly
        copy and edit animations inside the Animation Tab.\r
        \r
        # Do This\r
        \r
        *
        Inside the Animation Tab copy the animation of your player sprite.\r
        * Flip
        each frame of the new animation so that the sprite is facing in the opposite
        direction.\r
        * Rename your new animation.\r
        * Use the `setAnimation` command
        inside the `movePlayer` function so that the player changes the direction
        it is facing when the "left" and "right" arrows are pressed.
      CSD U3 AnimationsMulti defender create set enemies_markdown_instruction: |-
        #
        Creating Functions\r
        \r
        <img src="https://images.code.org/126982cbde9ae62e9a77ca1e53c92024-image-1476291567280.58.00
        AM.png" style="float:right; height:90px">\r
        \r
        Your program now includes
        code in two places to set the enemies on the left side of the screen at a
        random y location. You can create functions to reset each of your two enemies
        to remove repetitions from your program. This will make your program easier
        to read, allow you to change it more easily, and allow you to quickly reset
        your sprites at other points in your program if you need to.\r
        \r
        # Do This\r
        \r
        <img
        src="https://images.code.org/01a2f4d9725162482fda9f74734c992c-image-1476461412974.09.52
        AM.png" style="\r
        float:right; height:70px">\r
        \r
        * At the bottom of
        your program create two new functions, `setEnemy1` and `setEnemy2`.\r
        * Inside
        each of these functions place the code that sets the enemies on the left side
        of the screen and gives them a random y position.\r
        * Wherever the code for
        `setEnemy1` and `setEnemy2` appears in your program replace them with a call
        to the functions you just created.
      CSD U3 AnimationsMulti defender create set enemies_2018_markdown_instruction: |-
        #
        Creating Functions\r
        \r
        <img src="https://images.code.org/126982cbde9ae62e9a77ca1e53c92024-image-1476291567280.58.00
        AM.png" style="float:right; height:90px">\r
        \r
        Your program now includes
        code in two places to set the enemies on the left side of the screen at a
        random y location. You can create functions to reset each of your two enemies
        to remove repetitions from your program. This will make your program easier
        to read, allow you to change it more easily, and allow you to quickly reset
        your sprites at other points in your program if you need to.\r
        \r
        # Do This\r
        \r
        <img
        src="https://images.code.org/01a2f4d9725162482fda9f74734c992c-image-1476461412974.09.52
        AM.png" style="\r
        float:right; height:70px">\r
        \r
        * At the bottom of
        your program create two new functions, `setEnemy1` and `setEnemy2`.\r
        * Inside
        each of these functions place the code that sets the enemies on the left side
        of the screen and gives them a random y position.\r
        * Wherever the code for
        `setEnemy1` and `setEnemy2` appears in your program replace them with a call
        to the functions you just created.
      CSD U3 AnimationsMulti defender displace enemies_markdown_instruction: |-
        # Displace
        Enemies\r
        \r
        It's time to write code for some more sprite interactions.
        Your player sprite should displace the enemy sprites.\r
        \r
        # Do This\r
        \r
        For
        this level you'll be writing code inside the `displaceEnemies` function.\r
        \r
        *
        Write code that makes player displace both enemy sprites.\r
        * Test your program
        to make sure your player is displacing enemies but they keep moving right
        after the player moves away.\r
        \r
        _Hint: You can use `sprite.debug` to see
        your sprites' colliders if you need to debug your program._
      CSD U3 AnimationsMulti defender displace enemies_2018_markdown_instruction: |-
        #
        Displace Enemies\r
        \r
        It's time to write code for some more sprite interactions.
        Your player sprite should displace the enemy sprites.\r
        \r
        # Do This\r
        \r
        For
        this level you'll be writing code inside the `displaceEnemies` function.\r
        \r
        *
        Write code that makes player displace both enemy sprites.\r
        * Test your program
        to make sure your player is displacing enemies but they keep moving right
        after the player moves away.\r
        \r
        _Hint: You can use `sprite.debug` to see
        your sprites' colliders if you need to debug your program._
      CSD U3 AnimationsMulti defender enemies move_markdown_instruction: |-
        # Moving
        The Enemies\r
        \r
        It's time to start writing the code that will move your
        sprites. To begin you'll need to get your enemy sprites to a random position
        and moving across the screen.\r
        \r
        # Do This\r
        \r
        At the top of your program,
        after you create each enemy sprite, write code that will move it to the correct
        position and give it the correct velocity.\r
        \r
        * Use `sprite.x` to set
        the x position to 0.\r
        * Use `sprite.y` to set the y position should be a
        random number between 150 and 250.\r
        * Use `sprite.velocityX` to set the
        x velocity to 2.\r
        \r
        Test your program. Your enemy sprites should now be
        moving across the bridge.
      CSD U3 AnimationsMulti defender enemies move_2018_markdown_instruction: |-
        #
        Moving The Enemies\r
        \r
        It's time to start writing the code that will move
        your sprites. To begin you'll need to get your enemy sprites to a random
        position and moving across the screen.\r
        \r
        # Do This\r
        \r
        At the top
        of your program, after you create each enemy sprite, write code that will
        move it to the correct position and give it the correct velocity.\r
        \r
        *
        Use `sprite.x` to set the x position to 0.\r
        * Use `sprite.y` to set the
        y position should be a random number between 150 and 250.\r
        * Use `sprite.velocityX`
        to set the x velocity to 2.\r
        \r
        Test your program. Your enemy sprites should
        now be moving across the bridge.
      CSD U3 AnimationsMulti defender enemies touch cake sprite2_markdown_instruction: |-
        #
        Touching the Cake: Second Ladybug\r
        \r
        Your first enemy sprite should now
        be resetting when it gets to the cake. Now you'll want the other ladybug
        to reset as well.\r
        \r
        # Do This\r
        \r
        Inside the `enemiesTouchCake` function
        you should have written code that resets `enemy1`.\r
        \r
        * Copy the entire
        if-statement you wrote in the last level (Ctrl-C).\r
        * Paste the code inside
        of the `enemiesTouchCake` function, just below the last one (Ctrl-V).\r
        *
        Change the name of the sprite in that code from `enemy1` to `enemy2`.\r
          \r
        Test
        your code. Now both bugs should reset when they touch the cake.
      CSD U3 AnimationsMulti defender enemies touch cake sprite2_2018_markdown_instruction: |-
        #
        Touching the Cake: Second Ladybug\r
        \r
        Your first enemy sprite should now
        be resetting when it gets to the cake. Now you'll want the other ladybug
        to reset as well.\r
        \r
        # Do This\r
        \r
        Inside the `enemiesTouchCake` function
        you should have written code that resets `enemy1`.\r
        \r
        * Copy the entire
        if-statement you wrote in the last level (Ctrl-C).\r
        * Paste the code inside
        of the `enemiesTouchCake` function, just below the last one (Ctrl-V).\r
        *
        Change the name of the sprite in that code from `enemy1` to `enemy2`.\r
          \r
        Test
        your code. Now both bugs should reset when they touch the cake.
      CSD U3 AnimationsMulti defender enemies touch cake_markdown_instruction: |-
        #
        Touching the Cake\r
        \r
        If the enemies get all the way across to the cake
        you should place them back at the left side of the screen and decrease the
        score. To start you'll **write code for only one of your enemies**.\r
        \r
        #
        Do This\r
        \r
        Inside the `enemiesTouchCake` function you'll need to write
        code that checks when a ladybug is touching the cake, resets its position,
        and changes the score.\r
        \r
        * Use an `if` and `isTouching` to detect whether
        enemy1 has touched the cake.\r
        * Inside your `if` block place code that:\r
          *
        sets enemy1's x position back to 0.\r
          * sets enemy1's y position to a
        random number between 150 and 250.\r
          * uses the counter pattern to decrease
        the score by 2.\r
        \r
        (_Hint: You can reuse some code you already wrote_)\r
        \r
        Test
        your code. One of your ladybugs should now reset when it gets across to the
        cake, and the score should go down by 2.
      CSD U3 AnimationsMulti defender enemies touch cake_2018_markdown_instruction: |-
        #
        Touching the Cake\r
        \r
        If the enemies get all the way across to the cake
        you should place them back at the left side of the screen and decrease the
        score. To start you'll **write code for only one of your enemies**.\r
        \r
        #
        Do This\r
        \r
        Inside the `enemiesTouchCake` function you'll need to write
        code that checks when a ladybug is touching the cake, resets its position,
        and changes the score.\r
        \r
        * Use an `if` and `isTouching` to detect whether
        enemy1 has touched the cake.\r
        * Inside your `if` block place code that:\r
          *
        sets enemy1's x position back to 0.\r
          * sets enemy1's y position to a
        random number between 150 and 250.\r
          * uses the counter pattern to decrease
        the score by 2.\r
        \r
        (_Hint: You can reuse some code you already wrote_)\r
        \r
        Test
        your code. One of your ladybugs should now reset when it gets across to the
        cake, and the score should go down by 2.
      CSD U3 AnimationsMulti defender make it your own_markdown_instruction: |-
        # Make
        It Your Own\r
        \r
        You just walked through someone else's plan for creating
        a game, so now it's time to make it your own. What additional features or
        challenges do you want to create?\r
        \r
        # Do This\r
        \r
        Select one of the
        challenges below to add to the game or come up with a challenge of your own.\r
        \r
        *
        Change the visuals of the game so that your player, enemies, or cake look
        different.\r
        * End the game when the enemies get to the cake and print the
        score. For an extra challenge end the game only after 3 enemies get through.\r
        *
        Randomize the speed of the enemies.\r
        * Create a new background that shows
        up when players reach a higher score.
      CSD U3 AnimationsMulti defender make it your own_2018_markdown_instruction: |-
        #
        Make It Your Own\r
        \r
        You just walked through someone else's plan for creating
        a game, so now it's time to make it your own. What additional features or
        challenges do you want to create?\r
        \r
        # Do This\r
        \r
        Select one of the
        challenges below to add to the game or come up with a challenge of your own.\r
        \r
        *
        Change the visuals of the game so that your player, enemies, or cake look
        different.\r
        * End the game when the enemies get to the cake and print the
        score. For an extra challenge end the game only after 3 enemies get through.\r
        *
        Randomize the speed of the enemies.\r
        * Create a new background that shows
        up when players reach a higher score.
      CSD U3 AnimationsMulti defender move player_markdown_instruction: |-
        # Moving
        Left and Right\r
        \r
        Now that your enemy sprites are moving correctly, it's
        time to write the code to move your player. For now you'll just need to get
        your character moving left and right and changing its animations.\r
        \r
        #
        Do This\r
        \r
        For this level you'll be writing code inside the `movePlayer`
        function.\r
        \r
        * Use an `if` block along with `keyDown` to detect when the
        "right" arrow is pressed.\r
        * Use `sprite.x` and the counter pattern increase
        the player's x position by 3.\r
        * Use another `if` block to move the player
        to the left when the "left" arrow is pressed. This time you'll need to
        decrease the player's x position.\r
        \r
        Test your game. Your character sprite
        should now move left and right when you press the left and right arrows.
      CSD U3 AnimationsMulti defender move player_2018_markdown_instruction: |-
        # Moving
        Left and Right\r
        \r
        Now that your enemy sprites are moving correctly, it's
        time to write the code to move your player. For now you'll just need to get
        your character moving left and right and changing its animations.\r
        \r
        #
        Do This\r
        \r
        For this level you'll be writing code inside the `movePlayer`
        function.\r
        \r
        * Use an `if` block along with `keyDown` to detect when the
        "right" arrow is pressed.\r
        * Use `sprite.x` and the counter pattern increase
        the player's x position by 3.\r
        * Use another `if` block to move the player
        to the left when the "left" arrow is pressed. This time you'll need to
        decrease the player's x position.\r
        \r
        Test your game. Your character sprite
        should now move left and right when you press the left and right arrows.
      CSD U3 AnimationsMulti defender move up down_markdown_instruction: |-
        # Moving
        Up and Down\r
        \r
        You'll want your player sprite to move up and down as
        well.\r
        \r
        # Do This\r
        \r
        For this level you'll still be writing code
        inside the `movePlayer` function.\r
        \r
        * Use an `if` block along with `keyDown`
        to detect when the "up" arrow is pressed.\r
        * Use `sprite.y` to increase
        the player's y position by 3 using the counter pattern.\r
        * Use another
        `if` block to move the player down when the "down" arrow is pressed.\r
        \r
        Test
        your code. Your character should now move in all 4 directions.
      CSD U3 AnimationsMulti defender move up down_2018_markdown_instruction: |-
        #
        Moving Up and Down\r
        \r
        You'll want your player sprite to move up and down
        as well.\r
        \r
        # Do This\r
        \r
        For this level you'll still be writing code
        inside the `movePlayer` function.\r
        \r
        * Use an `if` block along with `keyDown`
        to detect when the "up" arrow is pressed.\r
        * Use `sprite.y` to increase
        the player's y position by 3 using the counter pattern.\r
        * Use another
        `if` block to move the player down when the "down" arrow is pressed.\r
        \r
        Test
        your code. Your character should now move in all 4 directions.
      CSD U3 AnimationsMulti defender template_markdown_instruction: |-
        # Play and
        Pause\r
        \r
        You can use the `sprite.play` and `sprite.pause` commands to
        play and pause a sprite's animation. If the animation is already playing
        or paused, using these commands twice in a row has no effect.  There's one
        important exception, however, which is that **play will restart a non-looping
        animation if it has finished**. We're going to look at some cool behavior
        this lets us create.\r
        \r
        # Do This\r
        \r
        * Use the `sprite.play` command
        after each of your `setAnimation` commands. This will restart the walk animations
        as long as the keys are pressed.
      CSD U3 AnimationsMulti defender template_2018_markdown_instruction: |-
        # Play
        and Pause\r
        \r
        You can use the `sprite.play` and `sprite.pause` commands
        to play and pause a sprite's animation. If the animation is already playing
        or paused, using these commands twice in a row has no effect.  There's one
        important exception, however, which is that **play will restart a non-looping
        animation if it has finished**. We're going to look at some cool behavior
        this lets us create.\r
        \r
        # Do This\r
        \r
        * Use the `sprite.play` command
        after each of your `setAnimation` commands. This will restart the walk animations
        as long as the keys are pressed.
      CSD U3 AnimationsMulti defender touch water_markdown_instruction: |-
        # Touching
        the Water\r
        \r
        The last part of the game that you'll need to write is the
        code to reset the sprites when they touch the water. Luckily you should have
        already written functions that reset each sprite, so you'll just need a good
        way to know when either sprite leaves the bridge. Start by writing the code
        for a single enemy and then copy-paste and make small changes to create code
        for your second enemy.\r
        \r
        # Do This\r
        \r
        For this level you'll be writing
        code inside the `enemiesTouchWater` function.\r
        \r
        * Use an `if` statement
        to check whether enemy1 is off the top of the bridge by checking whether its
        y value is below 140. Within your if statement:\r
            * use your `setEnemy1`
        function to reset the sprite.\r
            * add 1 to the score.\r
        * Use an if
        statement to check whether enemy1 is off the bottom of the bridge by checking
        whether its y value is above 260. Within your if statement:\r
        \t* use your
        `setEnemy1` function to reset the sprite.\r
            * add 1 to the score.\r
        *
        Test your program for the first enemy sprite. Make sure the sprite is resetting
        and the score goes up.\r
        * Once it is working copy and paste the code you
        wrote to create the same behavior for `enemy2`. You'll need to change the
        name of the sprite and the name of the functions you use.
      CSD U3 AnimationsMulti defender touch water_2018_markdown_instruction: |-
        # Touching
        the Water\r
        \r
        The last part of the game that you'll need to write is the
        code to reset the sprites when they touch the water. Luckily you should have
        already written functions that reset each sprite, so you'll just need a good
        way to know when either sprite leaves the bridge. Start by writing the code
        for a single enemy and then copy-paste and make small changes to create code
        for your second enemy.\r
        \r
        # Do This\r
        \r
        For this level you'll be writing
        code inside the `enemiesTouchWater` function.\r
        \r
        * Use an `if` statement
        to check whether enemy1 is off the top of the bridge by checking whether its
        y value is below 140. Within your if statement:\r
            * use your `setEnemy1`
        function to reset the sprite.\r
            * add 1 to the score.\r
        * Use an if
        statement to check whether enemy1 is off the bottom of the bridge by checking
        whether its y value is above 260. Within your if statement:\r
        \t* use your
        `setEnemy1` function to reset the sprite.\r
            * add 1 to the score.\r
        *
        Test your program for the first enemy sprite. Make sure the sprite is resetting
        and the score goes up.\r
        * Once it is working copy and paste the code you
        wrote to create the same behavior for `enemy2`. You'll need to change the
        name of the sprite and the name of the functions you use.
      CSD U3 AnimationsMulti introducing multiframe template_markdown_instruction: |
        #
        Using Multiframe Animations\r
        \r
        You probably noticed in the last game that
        the sprites themselves were animated. Have some fun choosing some of the animations
        from the library.\r
        \r
        \r
        # Do This\r
        \r
        This program already includes
        several sprites but they don't yet have any animations.\r
        \r
        * Go to the
        Animation tab and check out the multi-frame animations already added to your
        project. Choose one for each of your characters.\r
      CSD U3 AnimationsMulti introducing multiframe template_2018_markdown_instruction: |
        #
        Using Multiframe Animations\r
        \r
        You probably noticed in the last game that
        the sprites themselves were animated. Have some fun choosing some of the animations
        from the library.\r
        \r
        \r
        # Do This\r
        \r
        This program already includes
        several sprites but they don't yet have any animations.\r
        \r
        * Go to the
        Animation tab and check out the multi-frame animations already added to your
        project. Choose one for each of your characters.\r
      CSD U3 AnimationsMulti introducing multiframe_markdown_instruction: |-
        # Using
        Multiframe Animations\r
        \r
        In the sample defender game the sprites themselves
        were animated. Before getting started on programming this game, take a minute
        to get familiar with this new way of animating sprites.\r
        \r
        # Do This\r
        \r
        This
        program already includes several sprites but they don't yet have any animations.\r
        \r
        *
        Go to the Animation Tab and check out the multi-frame animations already added
        to your project. Choose one for each of your characters.\r
        * Remember you
        can use `setAnimation` to give your sprites animations you've created in
        the Animation Tab.
      CSD U3 AnimationsMulti introducing multiframe_2018_markdown_instruction: |-
        #
        Using Multiframe Animations\r
        \r
        In the sample defender game the sprites
        themselves were animated. Before getting started on programming this game,
        take a minute to get familiar with this new way of animating sprites.\r
        \r
        #
        Do This\r
        \r
        This program already includes several sprites but they don't
        yet have any animations.\r
        \r
        * Go to the Animation Tab and check out the
        multi-frame animations already added to your project. Choose one for each
        of your characters.\r
        * Remember you can use `setAnimation` to give your
        sprites animations you've created in the Animation Tab.
      CSD U3 AnimationsMulti mirror animation_markdown_instruction: |-
        # Editing Multiframe
        Animations\r
        \r
        Your sprites will look a lot more realistic if they turn
        around when they're moving. You can switch back and forth between multiframe
        animations when the user presses different keys.\r
        \r
        # Do This\r
        \r
        Read
        this code and run the program. Make sure you know how the sprite responds
        to the arrow keys.\r
        \r
        * In the Animation Tab, create a copy of the alien
        animation by clicking the following button: ![](https://images.code.org/aee81f9cd3f63bb8a9c91ac3ab250a87-image-1475699896387.38.09
        PM.png)\r
        * Use the tool to flip your animation. Make sure you flip both
        frames using this button:  ![](https://images.code.org/3b10b4a612f9a7c640dc7bb18f4c2b91-image-1475699599617.33.03
        PM.png) \r
        * Rename your new animation.\r
        * Use your new animation and old
        animation so that the alien faces the correct direction when moving. Where
        do you think you'll need to set the sprite's animation in your code?
      CSD U3 AnimationsMulti mirror animation_2018_markdown_instruction: |-
        # Editing
        Multiframe Animations\r
        \r
        Your sprites will look a lot more realistic if
        they turn around when they're moving. You can switch back and forth between
        multiframe animations when the user presses different keys.\r
        \r
        # Do This\r
        \r
        Read
        this code and run the program. Make sure you know how the sprite responds
        to the arrow keys.\r
        \r
        * In the Animation Tab, create a copy of the alien
        animation by clicking the following button: ![](https://images.code.org/aee81f9cd3f63bb8a9c91ac3ab250a87-image-1475699896387.38.09
        PM.png)\r
        * Use the tool to flip your animation. Make sure you flip both
        frames using this button:  ![](https://images.code.org/3b10b4a612f9a7c640dc7bb18f4c2b91-image-1475699599617.33.03
        PM.png) \r
        * Rename your new animation.\r
        * Use your new animation and old
        animation so that the alien faces the correct direction when moving. Where
        do you think you'll need to set the sprite's animation in your code?
      CSD U3 AnimationsMulti no loop_markdown_instruction: |-
        # Preventing Animations
        from Looping\r
        \r
        By default your animations keep replaying in a loop. You
        can have your animation only play once by clicking this button below your
        animation.\r
        \r
        # Do This\r
        \r
        * Set both the animations in your project
        to non-looping.\r
        * Run the program and confirm your sprite only takes 1
        step when it changes directions
      CSD U3 AnimationsMulti play pause_markdown_instruction: |-
        # Play and Pause\r
        \r
        You
        can use the `sprite.play` and `sprite.pause` commands to play and pause a
        sprite's animation. If the animation is already playing or paused, using
        these commands twice in a row has no effect.  There's one important exception,
        however, which is that **play will restart a non-looping animation if it has
        finished**. We're going to look at some cool behavior this lets us create.\r
        \r
        #
        Do This\r
        \r
        * Use the `sprite.play` command after each of your `setAnimation`
        commands. This will restart the walk animations as long as the keys are pressed.
      CSD U3 AnimationsMulti slow down_markdown_instruction: |
        # Slow Down\r
        \r
        Nice
        work! Time to start learning how to control these multiframe animations.\r
        \r
        #
        Do This\r
        \r
        Your sprites should be animated but they're moving really
        quickly. \r
        \r
        * Head back to the Animation Tab. Underneath each animation
        you should see a slider. ![](https://images.code.org/169e11c1f6f55b607937fe9cb7e5e390-image-1476209267457.07.26
        AM.png)\r
        * Use these sliders to slow down your animations so they look more
        realistic.\r
        \r
      CSD U3 AnimationsMulti slow down_2018_markdown_instruction: |
        # Slow Down\r
        \r
        Nice
        work! Time to start learning how to control these multiframe animations.\r
        \r
        #
        Do This\r
        \r
        Your sprites should be animated but they're moving really
        quickly. \r
        \r
        * Head back to the Animation Tab. Underneath each animation
        you should see a slider. ![](https://images.code.org/169e11c1f6f55b607937fe9cb7e5e390-image-1476209267457.07.26
        AM.png)\r
        * Use these sliders to slow down your animations so they look more
        realistic.\r
        \r
      CSD U3 Background Discuss_markdown_instruction: |-
        <i class="fa fa-hand-paper-o"
        aria-hidden="true" style="color:red; float: right; font-size: 200px; font-weight:
        800;"></i>\r
        \r
        # Animation\r
        Using the draw loop opens up the potential
        to make some neat animations, but it's a bit troublesome that every time
        the loop is run it just draws on top of the last drawing. What if we could
        make this behave more like a flip book animation?\r
        \r
        # Do This Together\r
        \r
        *
        **Run** the provided program together\r
        * **Hypothesize** how does the draw
        loop work?\r
        * **Brainstorm** how could we make it so that we only see the
        most recently drawn rectangle?
      CSD U3 Background Experiment_markdown_instruction: |-
        # Background\r
        We could
        draw a 400 pixel white square each time the `draw()` loop runs, but there's
        actually a built-in command that works even better. The `background()` block
        just takes one input, the color of your background, and fills the whole canvas
        with that color. The nice thing about using `background()` instead of `rect()`
        is that it will fill the screen regardless of how big it is, making your code
        more flexible and usable in more scenarios (like when you get a new phone
        with a bigger screen).\r
        \r
        # Do This\r
        Place the `background()` block
        inside your `draw()` loop before any other shapes are drawn. Choose a background
        color of your choice and then test your code to make sure it only shows a
        single rectangle at a time.
      CSD U3 Boolean Modify_markdown_instruction: |-
        # Boolean Expressions\r
        \r
        The
        simplest Boolean expressions are questions that the computer can answer with
        true or false. These expressions are made using **comparison operators**,
        as shown below.\r
        \r
        |Comparison Operator | Boolean Expression |  Meaning
        |\r
        |:---:|:---:|:---:|\r
        | <img src="https://images.code.org/1a0798d75d4242715e7608d825f95101-image-1447271431312.png"
        style="width: 100px"> | `1 < 9` | Is 1 less than 9? | \r
        | <img src="https://images.code.org/5ff460ac121f0ac51b569e96a4404c57-image-1447271431310.png"
        style="width: 100px"> | `1 > 9` | Is 1 greater than 9 ? |  \r
        | <img src="https://images.code.org/a4daa9efccea2278e165592efe343c1a-image-1447271431308.png"
        style="width: 100px">| `1 == 9` | Is 1 equal to 9?| \r
        <br>\r
        **Note:**
        If you saw the statement 3 < 2 in math class, you'd think something was terribly
        wrong, but this is not math class.  In computer science, the comparison operators
        **ask a question** that the computer will answer with `true` or `false`. So
        you can read 3 < 2 as **"Is 3 less than 2?"** The answer in this case is
        no, or `false`.  \r
        \r
        Another way to say this is that the Boolean expression
        `3 < 2` **evaluates** to `false`.\r
        \r
        # Do This\r
        Can you modify the values
        of the sprite properties so that each of the Boolean expressions evaluates
        to `true`?\r
        \r
        - Read through the entire program to see how `sprite1` and
        `sprite2` are being created and which properties are compared.\r
        - For each
        of the Boolean expressions, identify the sprite properties being compared.\r
        -
        Change the code _in the first **11** lines only_ so that each of the `console.log()`
        statements print `true`.
      CSD U3 Boolean Modify_2018_markdown_instruction: |-
        # Boolean Expressions\r
        \r
        The
        simplest Boolean expressions are questions that the computer can answer with
        true or false. These expressions are made using **comparison operators**,
        as shown below.\r
        \r
        |Comparison Operator | Boolean Expression |  Meaning
        |\r
        |:---:|:---:|:---:|\r
        | <img src="https://images.code.org/1a0798d75d4242715e7608d825f95101-image-1447271431312.png"
        style="width: 100px"> | `1 < 9` | Is 1 less than 9? | \r
        | <img src="https://images.code.org/5ff460ac121f0ac51b569e96a4404c57-image-1447271431310.png"
        style="width: 100px"> | `1 > 9` | Is 1 greater than 9 ? |  \r
        | <img src="https://images.code.org/a4daa9efccea2278e165592efe343c1a-image-1447271431308.png"
        style="width: 100px">| `1 == 9` | Is 1 equal to 9?| \r
        <br>\r
        **Note:**
        If you saw the statement 3 < 2 in math class, you'd think something was terribly
        wrong, but this is not math class.  In computer science, the comparison operators
        **ask a question** that the computer will answer with `true` or `false`. So
        you can read 3 < 2 as **"Is 3 less than 2?"** The answer in this case is
        no, or `false`.  \r
        \r
        Another way to say this is that the Boolean expression
        `3 < 2` **evaluates** to `false`.\r
        \r
        # Do This\r
        Can you modify the values
        of the sprite properties so that each of the Boolean expressions evaluates
        to `true`?\r
        \r
        - Read through the entire program to see how `sprite1` and
        `sprite2` are being created and which properties are compared.\r
        - For each
        of the Boolean expressions, identify the sprite properties being compared.\r
        -
        Change the code _in the first **11** lines only_ so that each of the `console.log()`
        statements print `true`.
      CSD U3 Complex Movement counter prediction_markdown_instruction: |-
        # Velocity
        and the Counter Pattern\r
        \r
        Using the counter pattern with a sprite's
        x and y property makes a sprite move smoothly across the screen. In this program
        **the counter pattern is being used with the `sprite.velocityX` property**
        instead.\r
        \r
        # Predict\r
        \r
        What do you think will happen when the code
        is run? Why? Once you're ready you can run the code to find out.
      CSD U3 Complex Movement counter prediction_2018_markdown_instruction: |-
        # Velocity
        and the Counter Pattern\r
        \r
        Using the counter pattern with a sprite's
        x and y property makes a sprite move smoothly across the screen. In this program
        **the counter pattern is being used with the `sprite.velocityX` property**
        instead.\r
        \r
        # Predict\r
        \r
        What do you think will happen when the code
        is run? Why? Once you're ready you can run the code to find out.
      CSD U3 Compound Nested Challenge_markdown_instruction: |
        # Challenge: Checking
        for Multiple Conditions\r
        _Check with your teacher before taking on this
        challenge._\r
        \r
        \r
        So far we've looked at a lot of ways to check if a
        single condition is true, but often a program needs to check the state of
        many conditions simultaneously before making a decision. For this challenge,
        let's assume the following scenario:\r
        \r
        - The sprite should move up,
        down, left, and right if the corresponding arrow key is pressed.\r
        - The
        sprite should _not_ go all the way off the screen in any direction.\r
        \r
        #
        Do This Together\r
        \r
        Before you tackle writing this program, you'll need
        to figure out how to check multiple conditions at once.\r
        \r
        * **Brainstorm**
        with your neighbors ways you might check for more than one condition.\r
        *
        **Share** back with the whole class so you can see other potential approaches.\r
        *
        **Explore** the toolbox for blocks that might help (pay extra attention to
        the Math and Control drawers).\r
        * **Program** your proposed solution.\r
        *
        **Test** your program to make sure it's actually checking all of the conditions
        you intended.\r
      CSD U3 Compound Nested Challenge_2018_markdown_instruction: |
        # Challenge: Checking
        for Multiple Conditions\r
        _Check with your teacher before taking on this
        challenge._\r
        \r
        \r
        So far we've looked at a lot of ways to check if a
        single condition is true, but often a program needs to check the state of
        many conditions simultaneously before making a decision. For this challenge,
        let's assume the following scenario:\r
        \r
        - The sprite should move up,
        down, left, and right if the corresponding arrow key is pressed.\r
        - The
        sprite should _not_ go all the way off the screen in any direction.\r
        \r
        #
        Do This Together\r
        \r
        Before you tackle writing this program, you'll need
        to figure out how to check multiple conditions at once.\r
        \r
        * **Brainstorm**
        with your neighbors ways you might check for more than one condition.\r
        *
        **Share** back with the whole class so you can see other potential approaches.\r
        *
        **Explore** the toolbox for blocks that might help (pay extra attention to
        the Math and Control drawers).\r
        * **Program** your proposed solution.\r
        *
        **Test** your program to make sure it's actually checking all of the conditions
        you intended.\r
      CSD U3 Compound Nested Examples_markdown_instruction: |-
        # Multiple Paths to
        the Same Outcome\r
        \r
        You may have seen several different approaches to
        solving the previous challenge - one of the beatiful things about programming
        is that it is as much about personal expression as it is about problem solving.
        You could have 10 people attempt to create the same program, and each would
        be unique and reflective of the person who programmed it!\r
        \r
        There are
        two primary approaches to checking for multiple conditions:\r
        \r
        ### Nesting
        Conditionals\r
        \r
        If you think about asking one question first, and then
        asking the second question only if the first was true, you could nest your
        conditionals, like so:\r
        \r
        ```javascript\r
        if (keyDown('up') {\r
          if
        (sprite.y > 0) {\r
            sprite.y = sprite.y - 1;\r
          }\r
        }\r
        ```\r
        \r
        ###
        Compound Booleans\r
        \r
        If you think about asking if both the first and second
        question are true at the same time, you could use `&&` (and) to combine booleans,
        like so:\r
        \r
        ```javascript\r
        if (keyDown('up') && sprite.y < 0) {\r
        \tsprite.y
        = sprite.y - 1;\r
        }\r
        ```\r
        \r
        # Do This\r
        \r
        This program uses a nested
        conditional to check the up arrow and a compound boolean to check the down
        arrow. Use one (or both) techniques to check the left and right arrows as
        well.
      CSD U3 Conditional Predict_markdown_instruction: |
        # Prediction\r
        \r
        In this
        program, the animation has different reactions when the user presses different
        keys. One reaction is a new kind of behavior you haven't seen before. Look
        at the following inputs and match them to their outputs. Once you have made
        your prediction you will be able to test it out.\r
        \r
        | Input  |\r
        | -------------
        | \r
        | Press the _space_ bar  | \r
        | Press the _w_ key  | \r
        | Press the
        _j_ key |\r
        | Press the _j_ and _k_ keys | \r
        | Press the _k_ key |\r
        \r
        \r
        |
        Output |\r
        | ------------------------- |\r
        | blue_sprite rotates clockwise  |\r
        |
        red_sprite moves up and blue_sprite moves down  |\r
        | The sprites don't
        change |\r
        | red_sprite rotates counter clockwise  |\r
        | red_sprite gets
        bigger and blue_sprite gets smaller  |\r
      CSD U3 Conditional Project_markdown_instruction: |-
        # Get Creative\r
        \r
        At
        this point you have all of the tools necessary to make an interactive animation
        or simple game of your own design! This is your chance practice using all
        of the blocks you've seen so far, and to experiment with blocks you haven't
        used yet.\r
        \r
        # Do This\r
        \r
        Design an interactive animation of your
        own. Your program should -\r
        \r
        - Use conditionals to get keyboard input\r
        -
        Use conditionals to react to a sprite's properties\r
        - Allow a user to move
        one or more sprites around the screen\r
        - Change multiple sprite properties
        through conditionals\r
        \r
        _You might notice some new blocks in the Sprites
        drawer, experiment with them and see if you can incorporate them into your
        conditionals._
      CSD U3 Conditionals Apple 2-2018_markdown_instruction: |-
        # Changing Fruit\r
        \r
        Now
        that we know how to use _if_ statements, you can do more than just check if
        the apple has reached a scale of 2. You turn it into a pear once it happens.\r
        \r
        #
        Do This\r
        \r
        Use a conditional in the draw loop to check whether `fruit.scale`
        is greater than 2.  If it is, change the fruit's animation to "pear".\r
        \r
        _Challenge:
        Can you also make the fruit stop growing once it turns into a pear?_
      CSD U3 Conditionals Apple 2_markdown_instruction: |-
        # Turning Red\r
        \r
        Now
        that we know how to use _if_ statements, you can do more than just check if
        the apple has reached a scale of 2, you turn it red once it happens.\r
        \r
        #
        Do This\r
        \r
        Use a conditional in the draw loop to check whether `apple.scale`
        is greater than 2 - if it is, set the apples new animation to "apple_red".\r
        \r
        _Challenge:
        Can you also make the apple stop growing once it turns red?_
      CSD U3 Conditionals Apple 2_2018_markdown_instruction: |-
        # Changing Fruit\r
        \r
        Now
        that we know how to use _if_ statements, you can do more than just check if
        the apple has reached a scale of 2. You turn it into a pear once it happens.\r
        \r
        #
        Do This\r
        \r
        Use a conditional in the draw loop to check whether `fruit.scale`
        is greater than 2.  If it is, change the fruit's animation to "pear".\r
        \r
        _Challenge:
        Can you also make the fruit stop growing once it turns into a pear?_
      CSD U3 Conditionals Apple-2018_markdown_instruction: |-
        # More Practice With
        Booleans\r
        \r
        Let's use one more Boolean expression to check the condition
        of a sprite.  You can use a `console.log` command to check whether its scale
        is 2 yet.\r
        \r
        # Do This\r
        \r
        * Add a `console.log` statement.\r
        * Add
        a Boolean expression inside the `console.log` that checks whether the `apple.scale`
        is greater than 2.
      CSD U3 Conditionals Apple_markdown_instruction: |-
        # More Practice With Booleans\r
        \r
        Let's
        use one more Boolean expression to check the condition of a sprite.\r
        \r
        #
        Do This\r
        There is a growing apple sprite created for you. It starts as green
        and should turn red when it gets to a scale of 2. We won't worry about making
        it red yet, let's just use a `console.log` command to check whether it's
        scale is 2 yet.\r
        \r
        * Add a `console.log` statement.\r
        * Add a Boolean
        expression inside the `console.log` that checks whether the `apple.scale`
        is greater than 2.
      CSD U3 Conditionals Apple_2018_markdown_instruction: |-
        # More Practice With
        Booleans\r
        \r
        Let's use one more Boolean expression to check the condition
        of a sprite.  You can use a `console.log` command to check whether its scale
        is 2 yet.\r
        \r
        # Do This\r
        \r
        * Add a `console.log` statement.\r
        * Add
        a Boolean expression inside the `console.log` that checks whether the `apple.scale`
        is greater than 2.
      CSD U3 Counters assigning an expression_markdown_instruction: |-
        # Assignment
        and Expressions\r
        \r
        You know that **variables can hold a single value**.
        You also know that **expressions are always evaluated to a single value**.
        Why don't we try storing that single value in a variable so that we can use
        it many times in our programs.\r
        \r
        # Do This\r
        \r
        This program generates
        a random multiple of 10 (10, 20, 30, 40 etc) and stores it in the variable
        `size`\r
        \r
        * **Run the progam** to see how it works\r
        * **Change the numbers
        used in the expression on line 3** to see how it affects this simple animation
      CSD U3 Counters counter colors_markdown_instruction: |-
        # Counters in Colors\r
        \r
        The
        counter pattern you've been using is incredibly useful for changing many
        different aspects of your images, not just the position of shapes. **Anything
        that normally would be drawn with a number can easily be animated with a counter
        variable.**\r
        \r
        # Do This\r
        \r
        The goal of this program is to use two
        variables as counters to **transition a circle's color slowly from blue to
        red**.\r
        \r
        * **Run the program** to see what happens.\r
        \t* The `red`
        value **already counts up by 1**\r
        \t* The `blue` value **doesn't change**
        and so the circle becomes purple, not red.\r
        * Use what you know about counters
        to **add code that will make the circle transition smoothly to red**\r
        *
        **Note:** When the `color` command sees a value outside the range of 0 - 255
        it just rounds. For example, 300 becomes 255 and -100 becomes 0.
      CSD U3 Counters counter square movement_markdown_instruction: |-
        # Animating
        with Counters\r
        \r
        The counter pattern can be used to increase the value
        of a variable each time the draw loop runs. You can use this to create smooth
        motion in your programs. You're going to try out a few ways of using this.\r
        \r
        #
        Do This\r
        \r
        This program uses the counter pattern with a variable called
        `xPos`.\r
        \r
        * **Read the program** and make a prediction of how it will
        run.\r
        * **Run the program** to check your prediction\r
        * **Change the code**
        so that `xPos` changes by different amounts each draw loop. For example instead
        of `xPos = xPos + 1` you could try:\r
        \t* `xPos = xPos + 2`\r
            * `xPos
        = xPos + 5`\r
            * `xPos = xPos + 0.1`
      CSD U3 Counters counter subtraction_markdown_instruction: |
        # Counting Down\r
        \r
        Sometimes
        you won't want to count up, you'll want to count down. You can **subtract**
        from a variable's value just as easily as you add. ![](https://images.code.org/8b98effa437da54090926c3451af204d-image-1465325587949.52.49
        PM.png)\r
        \r
        \t// counter pattern, counting down\r
            counter = counter
        - 1;\r
        \r
        Keep getting practice using counters to animate, but this time
        try counting down.\r
        # Do This\r
        \r
        This program uses the counter pattern
        with a variable called `xPos`.\r
        \r
        * The square currently starts in the
        center and **goes off the right side** of the screen\r
        * **Change the program**
        so that the square **goes off the left side of the screen** instead.\r
        \r
      CSD U3 Counters counters expressions_markdown_instruction: |-
        # Using One Counter
        Many Times\r
        \r
        You've already seen and used commands like  `x = x + 1`
        often to update the value of `x`. Sometimes though we want to **do some math
        with a variable without actually changing that variable's value**. \r
        \r
        This
        program draws a rectangle **100 pixels to the right of `x` without changing
        the value of `x`**. Here's the steps your computer goes through to run that
        second line of code.\r
        \r
        ![](https://images.code.org/8f33bbb0189c5e1b854c5b1786168225-image-1465503000293.09.49
        PM.png)\r
        \r
        Using this pattern allows you to use a single counter to animate
        multiple objects, as you're about to see.\r
        \r
        # Do This\r
        \r
        This program
        creates a counter variable called `xPos` and uses it to animate 3 rectangles.\r
        \r
        *
        **Run the program** to see what happens.\r
        * **The red and orange rectangles
        move across the screen but the yellow one doesn't yet.**\r
        * **Write code
        following the pattern shown above** so that the yellow rectangle will move
        across the screen with the others.\r
        * **Hint:** How was the orange rectangle
        made to move?\r
        \r
        ![](https://images.code.org/822941874e7add509bb80266718efb94-image-1463080462625.gif)
      CSD U3 Counters counters sunset night_markdown_instruction: |
        # Challenge: Nightfall\r
        \r
        Think
        you've got drawing with counters down? Try this challenge.\r
        \r
        The color
        block can take a 4th input that controls the opacity of the color. You can
        click the arrows on the side of the color block to expand this 4th input.\r
        \r
        ![](https://images.code.org/7844f8cb46eade7cec452b7a4d98124b-image-1484964689007.10.08
        PM.png)\r
        \r
        # Do This\r
        \r
        This is your same sunset animation from before.
        Can you make the scene slowly change to night?\r
        \r
        ![](https://images.code.org/b055142110b0d0ed092d6496447aad6e-image-1463079830043.gif)\r
        \r
      CSD U3 Counters counters sunset_markdown_instruction: |-
        # Animate a Sunset\r
        \r
        You
        now know a little bit about programming with variables. You've seen that
        they can **store a value to use many times in a program**. You've seen how
        the **counter pattern can allow you to perform smooth animations**. It's
        now time to put everything you've learned together.\r
        \r
        <img src = "https://images.code.org/d0a1386297fae9f21fc046da62b13248-image-1462997082538.gif"
        style="float: right; height: 200px">\r
        # Do This\r
        \r
        This program is
        designed to **animate a sunset**. Some starter code is provided that **creates
        all the counter variables you'll need to run your animation**. You need to
        decide how to use them to animate this image.\r
        \r
        * **Run the program to
        see how it works**\r
        * **Add code** that will:\r
        \t* Make the sun go down\r
            *
        Change the color of the sky from blue to red\r
            * Make the cloud go across
        the screen\r
            \r
        <details><Summary>Need help?</Summary>\r
        <ul>\r
        <li>For
        help animating the sun go check out level 10</li>\r
        <li>For help animating
        the sky go check out level 12</li>\r
        <li>For help animating the cloud go
        check out level 13</li>\r
        </ul>\r
        \r
        </details>
      CSD U3 Counters explaining counters contained 2_markdown_instruction: |
        # The
        Counter Pattern\r
        \r
        This pattern is one of the most important ones in all
        of programming. \r
        \r
        ![](https://images.code.org/83af2e40443ab294ba635f2a01a48ac7-image-1465506512065.06.56
        PM.png)\r
            \r
        It is used to increase the value of a variable by 1. You
        might call it the **counter pattern** since it can be used to make a variable
        that counts up. You'll use this pattern a lot, especially with the draw loop.
        Let's see what that looks like.\r
        \r
        # Do This\r
        \r
        This program creates
        a variable `counter` and then uses the **counter pattern** to make it count
        up. When you run the program what do you think you'll see on the screen?\r
        \r
        *
        **Read the program** and make a prediction of what the output will be.\r
        *
        **Run the program** to check your prediction.\r
        * **Discuss with a neighbor**.
        Can you explain what you observed?\r
        \r
      CSD U3 Counters explaining counters contained 2_2018_markdown_instruction: |
        #
        The Counter Pattern\r
        \r
        This pattern is one of the most important ones
        in all of programming. \r
        \r
        ![](https://images.code.org/83af2e40443ab294ba635f2a01a48ac7-image-1465506512065.06.56
        PM.png)\r
            \r
        It is used to increase the value of a variable by 1. You
        might call it the **counter pattern** since it can be used to make a variable
        that counts up. You'll use this pattern a lot, especially with the draw loop.
        Let's see what that looks like.\r
        \r
        # Do This\r
        \r
        This program creates
        a variable `counter` and then uses the **counter pattern** to make it count
        up. When you run the program what do you think you'll see on the screen?\r
        \r
        *
        **Read the program** and make a prediction of what the output will be.\r
        *
        **Run the program** to check your prediction.\r
        * **Discuss with a neighbor**.
        Can you explain what you observed?\r
        \r
      CSD U3 Counters explaining counters_markdown_instruction: |
        # The Counter Pattern\r
        \r
        This
        pattern is one of the most important ones in all of programming. \r
        \r
        ![](https://images.code.org/83af2e40443ab294ba635f2a01a48ac7-image-1465506512065.06.56
        PM.png)\r
            \r
        It is used to increase the value of a variable by 1. You
        might call it the **counter pattern** since it can be used to make a variable
        that counts up. You'll use this pattern a lot, especially with the draw loop.
        Let's see what that looks like.\r
        \r
        # Do This\r
        \r
        This program creates
        a variable `counter` and then uses the **counter pattern** to make it count
        up. When you run the program what do you think you'll see on the screen?\r
        \r
        *
        **Read the program** and make a prediction of what the output will be.\r
        *
        **Run the program** to check your prediction.\r
        * **Discuss with a neighbor**.
        Can you explain what you observed?\r
        \r
      CSD U3 Counters expressions_markdown_instruction: |-
        # Expressions\r
        \r
        We're
        going to start learning about **expressions** and how to use them in programs.
        Here are two expressions, a short one and a longer one.\r
        \r
        `1 + 2`\r
        \r
        `(1000
        - 400) / (3 * 20)`\r
        \r
        These expressions have two important components:\r
        \r
        *
        **values:** numbers, text, or information in your program \r
        * **operators:**
        commands telling the computer to perform an action with those value `+`, `-`,
        `*`, `/`\r
        \r
        Don't worry if this is a lot of vocabulary all at once. Try
        using some expressions first to get a feel for how they work.\r
        \r
        # Do
        This: \r
        \r
        This program draws a rectangle using 4 separate expressions.
        \r
        \r
        * **Run the program** to see what happens\r
        * **Change some of the
        values and operators in the 4 expressions**. How does it change the rectangle?\r
        *
        Move on once you've changed a few expressions. It's fine if your program
        didn't run properly.
      CSD U3 Counters long expressions_markdown_instruction: |-
        # Expressions Evaluate
        to a Single Value\r
        \r
        As you probably just noticed expressions can be used
        in places where you might normally use a number. That's because your computer
        can **evaluate or calculate the single number that is the result of the expression**.
        When your computer runs the command\r
        \r
        `strokeWeight(10 + 20)`\r
        \r
        It
        will first calculate the value of the expression `10 + 20` to be `30` and
        use that value to set the strokeWeight. In fact, **every expression will eventually
        be evaluated to a single value**.\r
        \r
        # Do This\r
        \r
        This program uses
        console.log to show the single value of a couple long expressions.\r
        \r
        *
        **Run the program** to see that the expressions result in a single value\r
        *
        **Create and display the results of some expressions of your own**. It doesn't
        matter what they are, just throw in something long and complex and convince
        yourself a single value always comes out.
      CSD U3 Counters random expressions_markdown_instruction: |-
        # Random Numbers
        in Expressions\r
        \r
        You can **use random numbers inside of expressions**
        too. For example, \r
        \r
        `10 * randomNumber(1,5)`\r
        \r
        is a perfectly valid
        expression. This is because **`randomNumber` will generate a single random
        value** that can then be used in the expression just like a number.\r
        \r
        #
        Do This\r
        \r
        This program displays random multiples of 10 between 10 and
        50.\r
        \r
        * **Run the program** to see how it works\r
        * **Change the program**
        so that it displays **random multiples of 10 between 10 and 100**.\r
        * Change
        the expression with a random number in it more if you like. Once you're comfortable
        with how it works move on.
      CSD U3 Counters sunset template_markdown_instruction: |-
        # Animate a Sunset\r
        \r
        You
        now know a little bit about how **expressions can be used to create variables
        that count** and you've used these in some simple programs. Try using counter
        variables to animate a more complex scene.\r
        \r
        # Do This\r
        \r
        This program
        is designed to **animate a sunset**. Some starter code is provided but you'll
        need to fill in the rest.\r
        \r
        * **Run the program to see how it works**\r
        *
        **Add code** that will:\r
        \t* Make the sun go down\r
            * Make the cloud
        go across the screen\r
            * Change the color of the sky from blue to red\r
            \r
        <details><Summary>Want
        a hint?</Summary>\r
        <ul>\r
        <li>For help animating the sun go check out level
        [[blah]]</li>\r
        <li>For help animating the cloud go check out level [[blah]]</li>\r
        <li>For
        help animating the sky go check out level [[blah]]</li>\r
        </ul>\r
        \r
        </details>\r
        \r
        ![](https://images.code.org/d0a1386297fae9f21fc046da62b13248-image-1462997082538.gif)
      CSD U3 Counters variables as counters_markdown_instruction: |-
        # x = x + 1\r
        \r
        The
        following line of code **is the most important one to understand in this lesson**.\r
        \r
        `x
        = x + 1;`\r
        \r
        Try it out in a program first, then move on to **learn more
        about what this command is doing**.\r
        \r
        # Do This:\r
        \r
        * **Read the
        program to get a sense of how it should run**\r
        * **Run the program** and
        observe how it works\r
        * **Discuss with a neighbor** what you observe and
        why you think it is happening. Once you've talked, move on.
      CSD U3 Counters variables in expressions_markdown_instruction: |-
        # Variables
        in Expressions\r
        \r
        You just saw that **the result of an expression can
        be stored in a variable**. Get ready though, because we're about to get even
        more interesting.\r
        \r
        **Variables can be used in expressions**. All of
        these expressions are valid (assuming the variables have been created):\r
        \r
        `age
        + 1`\r
        `height / 2`\r
        `(time * speed) + 100`\r
        \r
        In each case **the variable's
        value is used when its label appears**.\r
        \r
        # Do This\r
        \r
        This program
        generates a random multiple of 10 (10, 20, 30, 40 etc) and stores it in the
        variable `size`\r
        \r
        * **Run the progam** to see how it works\r
        * **The
        variable `size` appears in two expressions on lines 7 and 8.**\r
        * **Change
        the values in these expressions** to see how they affect the way your program
        works
      CSD U3 Counters watchers_markdown_instruction: |-
        # Debugging: Watchers\r
        \r
        Once
        you have multiple counter variables it can become difficult to keep track
        of how your program is running. **If you want to debug your code, it's useful
        to be able to see the values of your different variables as they change.**\r
        \r
        You
        can add a **watcher** to a variable at any time by typing `$watch` followed
        by the name of your variable into the Debug Console. This example shows how
        you would create watchers for the variables `x` and `y`. Notice they've now
        **been added to the "Watch" window** to the right.\r
        \r
        ![](https://images.code.org/c5cddda5572e73e3f082287aa076e4a8-image-1465327628344.25.11
        PM.png)\r
        \r
        While your program is running, the values of `x` and `y` in
        the "Watch" window will update to show their current value.\r
        \r
        # Do
        This\r
        \r
        This program draws a dot that slowly grows in size. You want to
        know **the value of `size` when the dot totally covers the screen.**\r
        \r
        *
        **Create a watcher** for `size` by running the command `$watch size` in the
        Debug Console.\r
        * **Run the program** and observe the value of `size` change
        in the "Watch" window.\r
        * **Talk to a neighbor**. How large is `size`
        when the dot covers the whole screen?
      CSD U3 Diagonal Movement_markdown_instruction: |-
        <img src="https://images.code.org/f92774863b17074adc85b8f6bbd017f2-image-1492726926884.gif"
        style="float: right; margin-left: 20px;">\r
        \r
        # Diagonal Movement\r
        \r
        Updating
        only the `x` or `y` properties of a sprite can only make it move straight
        up and down or left and right. If you want a sprite to move on a diagonal
        path you'll need to update _both_ of those properties.\r
        \r
        This program
        currently makes the mouse move straight down the screen - can you update it
        so that it moves diagonally across the screen like the image to the right?\r
        \r
        _Challenge:
        Can you make the mouse point in the same direction as the image?_
      CSD U3 Diagonal Movement_2018_markdown_instruction: |-
        <img src="https://images.code.org/f92774863b17074adc85b8f6bbd017f2-image-1492726926884.gif"
        style="float: right; margin-left: 20px;">\r
        \r
        # Diagonal Movement\r
        \r
        Updating
        only the `x` or `y` properties of a sprite can only make it move straight
        up and down or left and right. If you want a sprite to move on a diagonal
        path you'll need to updated _both_ of those properties.\r
        \r
        This program
        currently makes the mouse move straight down the screen - can you update it
        so that it moves diagonally across the screen like the image to the right?\r
        \r
        _Challenge:
        Can you make the mouse point in the same direction as the image?_
      CSD U3 Direction Animations-2018_markdown_instruction: |-
        # Changing Images as
        you Move\r
        Right now your conditionals only do one thing (change your sprite's
        x or y), but you can actually put as much code as you want inside a conditional.
        A common thing to do in games is to change your character's image depending
        on which direction they're walking.\r
        \r
        # Do This\r
        Using the provided
        program and images:\r
        \r
        - Duplicate your chosen bug image four times.\r
        -
        Edit each of your images to point in one of the four directions.\r
        - Write
        code that uses `sprite.setAnimation()` to change the image on your bug sprite
        when different arrow keys are pressed.
      CSD U3 Direction Animations_markdown_instruction: |-
        # Changing Images as you
        Move\r
        Right now your conditionals only do one thing (change your sprite's
        x or y), but you can actually put as much code as you want inside a conditional.
        A common thing to do in games is to change your character's image depending
        on which direction they're walking.\r
        \r
        # Do This\r
        Using the provided
        program and images:\r
        \r
        - Duplicate your chosen bug image four times.\r
        -
        Edit each of your images to point in one of the four directions.\r
        - Write
        code that uses `sprite.setAnimation()` to change the image on your bug sprite
        when different arrow keys are pressed.
      CSD U3 Direction Animations_2018_markdown_instruction: |-
        # Changing Images as
        you Move\r
        Right now your conditionals only do one thing (change your sprite's
        x or y), but you can actually put as much code as you want inside a conditional.
        A common thing to do in games is to change your character's image depending
        on which direction they're walking.\r
        \r
        # Do This\r
        Using the provided
        program and images:\r
        \r
        - Duplicate your chosen bug image four times.\r
        -
        Edit each of your images to point in one of the four directions.\r
        - Write
        code that uses `sprite.setAnimation()` to change the image on your bug sprite
        when different arrow keys are pressed.
      CSD U3 Direction Arrows-2018_markdown_instruction: |-
        # Move in All Directions\r
        Once
        you've got your sprite moving in one direction by responding to a `keyDown`,
        getting it to move in all four directions should be more of the same. The
        basic keyboard control that you're developing here will become the basis
        for many of the games you make down the road.\r
        \r
        # Do This\r
        The bug
        sprite you made that responds to the right arrow has been brought to this
        level. Add the interaction for the other three arrow keys!\r
        \r
        - Add three
        if statements - one for each arrow.\r
        - Each if statement should move the
        sprite in the direction of the arrow.\r
        \r
        _HINT: Make sure you consider
        both the axis (x or y) of movement, **and** whether you need to increase or
        decrease that value._
      CSD U3 Direction Arrows_markdown_instruction: |-
        # Move in All Directions\r
        Once
        you've got your sprite moving in one direction by responding to a `keyDown`,
        getting it to move in all four directions should be more of the same. The
        basic keyboard control that you're developing here will become the basis
        for many of the games you make down the road.\r
        \r
        # Do This\r
        The bug
        sprite you made that responds to the up arrow has been brought to this level.
        Add the interaction for the other three arrow keys!\r
        \r
        - Add three if
        statements - one for each arrow.\r
        - Each if statement should move the sprite
        in the direction of the arrow.\r
        \r
        _HINT: Make sure you consider both the
        axis (x or y) of movement, **and** whether you need to increase or decrease
        that value._
      CSD U3 Direction Arrows_2018_markdown_instruction: |-
        # Move in All Directions\r
        Once
        you've got your sprite moving in one direction by responding to a `keyDown`,
        getting it to move in all four directions should be more of the same. The
        basic keyboard control that you're developing here will become the basis
        for many of the games you make down the road.\r
        \r
        # Do This\r
        The bug
        sprite you made that responds to the right arrow has been brought to this
        level. Add the interaction for the other three arrow keys!\r
        \r
        - Add three
        if statements - one for each arrow.\r
        - Each if statement should move the
        sprite in the direction of the arrow.\r
        \r
        _HINT: Make sure you consider
        both the axis (x or y) of movement, **and** whether you need to increase or
        decrease that value._
      CSD U3 Draw Loop Discuss_markdown_instruction: |-
        # Draw()ing\r
        Here's a program
        that looks pretty similar to what you've been writing, but may behave quite
        differently. You'll want to **stop and discuss** with the class before moving
        on.\r
        \r
        # Do This Together\r
        You will **not write any code** in this level,
        and you should be working as a whole class.\r
        * **Read** the provided program
        together.\r
        * **Identify** elements that are different than those you have
        seen before.\r
        * **Predict** what the provided program will do. **Be specific!**\r
        *
        **Run** the program several times and **record** the results.\r
        * **Discuss
        with a neighbor.** Was your prediction correct?\r
        * **Hypothesize** what
        is happening when this code is run.
      CSD U3 Draw Loop Experiment_markdown_instruction: |-
        # Do This\r
        Try using some
        of the other shape functions you've learned in the draw loop. What happens
        when you use `randomNumber()` to generate some of the inputs?\r
        \r
        # Challenge\r
        Experiment
        with adding code before and after the `draw()` loop. Can you figure out what
        gets called when?
      CSD U3 Draw Loop Plugged orange and green_markdown_instruction: |-
        <img src="https://images.code.org/2b5b2ce029e2f1d7377db7dcd7760cf0-image-1492031771047.15.45
        PM.png" style="float:right;width:150px">\r
        \r
        # Using the Draw Loop\r
        \r
        Now
        it's your turn to do some work with the draw loop. Remember that the code
        inside the draw loop is run by Game Lab over and over again.\r
        \r
        # Do This\r
        \r
        *
        Add code to this program so that your drawing has orange circles being drawn,
        too.\r
        * Move on when your program looks like the picture to the right.
      CSD U3 Draw Loop Plugged orange and green_2018_markdown_instruction: |-
        <img
        src="https://images.code.org/2b5b2ce029e2f1d7377db7dcd7760cf0-image-1492031771047.15.45
        PM.png" style="float:right;width:150px">\r
        \r
        # Using the Draw Loop\r
        \r
        Now
        it's your turn to do some work with the draw loop. Remember that the code
        inside the draw loop is run by Game Lab over and over again.\r
        \r
        # Do This\r
        \r
        *
        Add code to this program so that your drawing has orange circles being drawn,
        too.\r
        * Move on when your program looks like the picture to the right.
      CSD U3 Draw Loop Plugged predict 1 embed_markdown_instruction: |-
        # Predict\r
        \r
        This
        program has some code in the draw loop and some code outside of it. Remember:\r
        \r
        *
        All your code outside the draw loop is run first, one time\r
        * All your code
        inside the draw loop is run over and over forever\r
        \r
        What will this program
        do? Write your prediction below.
      CSD U3 Draw Loop Plugged predict 1_markdown_instruction: |-
        # Draw Loop\r
        \r
        Here's
        an example of the draw loop at work.\r
        \r
        # Do this\r
        * Run the code and
        see how it works.\r
        * Discuss with your partner whether this looks like the
        flip book you saw in the video.  Why or why not?
      CSD U3 Draw Loop Plugged predict 1_2018_markdown_instruction: |-
        # Draw Loop\r
        \r
        Here's
        an example of the draw loop at work.\r
        \r
        # Do this\r
        * Run the code and
        see how it works.\r
        * Discuss with your partner whether this looks like the
        flip book you saw in the video.  Why or why not?
      CSD U3 Draw Loop Plugged predict 2 embed_markdown_instruction: |-
        # Predict\r
        \r
        This
        program has one small difference that will make it run a little differently.
        Again though, remember:\r
        \r
        * All your code outside the draw loop is run
        first, one time\r
        * All your code inside the draw loop is run over and over
        forever\r
        \r
        What will this program do? Write your prediction below.
      CSD U3 Draw Loop Plugged predict 2 embed_2018_markdown_instruction: |-
        # Predict\r
        \r
        This
        program has one small difference that will make it run a little differently.
        Again though, remember:\r
        \r
        * All your code outside the draw loop is run
        first, one time\r
        * All your code inside the draw loop is run over and over
        forever\r
        \r
        What will this program do? Write your prediction below.
      CSD U3 Draw Loop Plugged update your scene_markdown_instruction: |
        # Extend
        Your Scene\r
        \r
        This is the sprite scene you made in the last lesson. You'll
        now be updating it a little bit to use the draw loop and sprite properties.\r
        \r
        <img
        src="https://images.code.org/ce257c4d91da460c9c2add1733873769-image-1492209174198.32.29
        PM.png" style="float:right;height:100px">\r
        \r
        # Do This\r
        \r
        * Add
        a draw loop to your program (you should only have one).\r
        * Use the lasso
        selector (click, hold and drag) to select all your code and place it inside
        your draw loop. Ctrl-Z will let you undo any mistakes you make.\r
        * Add code
        to your program that updates your sprites' `sprite.x`, `sprite.y`, or `sprite.rotation`
        properties so that they move. You'll need to update them with `randomNumber()`.\r
      CSD U3 Draw Loop Plugged update your scene_2018_markdown_instruction: |
        # Extend
        Your Scene\r
        \r
        This is the sprite scene you made in the last lesson. You'll
        now be updating it a little bit to use the draw loop and sprite properties.\r
        \r
        <img
        src="https://images.code.org/ce257c4d91da460c9c2add1733873769-image-1492209174198.32.29
        PM.png" style="float:right;height:100px">\r
        \r
        # Do This\r
        \r
        * Add
        a draw loop to your program (you should only have one).\r
        * Use the lasso
        selector (click, hold and drag) to select all your code and place it inside
        your draw loop. Ctrl-Z will let you undo any mistakes you make.\r
        * Add code
        to your program that updates your sprites' `sprite.x`, `sprite.y`, or `sprite.rotation`
        properties so that they move. You'll need to update them with `randomNumber()`.\r
      CSD U3 Draw Loop Plugged wiggle sprite rotation_markdown_instruction: |-
        <img
        src="https://images.code.org/03f98fedbe59ceb5ef0a8530cb81c367-image-1492040405357.gif",
        style="float:right;height:150px">\r
        # Updating Properties\r
        \r
        This level
        combines some of the skills you've already seen. It's drawing ellipses in
        the background and also updating sprite properties. This time it's changing
        the sprite's `sprite.rotation` property.\r
        \r
        # Do This\r
        \r
        This animation
        already is updating one sprite's rotation property to make it look like it's
        shaking\r
        \r
        * Run the program to see how it works.\r
        * Add code to this
        program to make the other alien shake just like the first.\r
        * Move on when
        your program looks like the picture to the right.
      CSD U3 Draw Loop Plugged wiggle sprite rotation_2018_markdown_instruction: |-
        <img
        src="https://images.code.org/03f98fedbe59ceb5ef0a8530cb81c367-image-1492040405357.gif",
        style="float:right;height:150px">\r
        # Updating Properties\r
        \r
        This level
        combines some of the skills you've already seen. It's drawing ellipses in
        the background and also updating sprite properties. This time it's changing
        the sprite's `sprite.rotation` property.\r
        \r
        # Do This\r
        \r
        This animation
        already is updating one sprite's rotation property to make it look like it's
        shaking\r
        \r
        * Run the program to see how it works.\r
        * Add code to this
        program to make the other alien shake just like the first.\r
        * Move on when
        your program looks like the picture to the right.
      CSD U3 Draw Loop Plugged wiggle sprite x_markdown_instruction: |
        <img src="https://images.code.org/71ae26edcc3286ff4d7697aaffecf144-image-1492036602240.gif",
        style="float:right;height:150px">\r
        # Updating Properties\r
        \r
        Sprites
        have properties that let the computer know where and how to draw them. Two
        common properties to use are `sprite.x` and `sprite.y` which control the location
        of the sprite. Assigning these properties a new value will move your sprite
        to a new location on the screen.\r
        \r
        # Do This\r
        \r
        This animation already
        is updating one sprite's x property to make it look like it's shaking\r
        \r
        *
        Run the program to see how it works.\r
        * Edit the code in this program to
        make the second sprite shake like the first one.\r
        * Move on when your program
        looks like the picture to the right.\r
        \r
      CSD U3 Draw Loop Plugged wiggle sprite x_2018_markdown_instruction: |
        <img src="https://images.code.org/71ae26edcc3286ff4d7697aaffecf144-image-1492036602240.gif",
        style="float:right;height:150px">\r
        # Updating Properties\r
        \r
        Sprites
        have properties that let the computer know where and how to draw them. Two
        common properties to use are `sprite.x` and `sprite.y` which control the location
        of the sprite. Assigning these properties a new value will move your sprite
        to a new location on the screen.\r
        \r
        # Do This\r
        \r
        This animation already
        is updating one sprite's x property to make it look like it's shaking\r
        \r
        *
        Run the program to see how it works.\r
        * Edit the code in this program to
        make the second sprite shake like the first one.\r
        * Move on when your program
        looks like the picture to the right.\r
        \r
      CSD U3 Draw Loop Plugged wiggle sprite y_markdown_instruction: |
        <img src="https://images.code.org/1e22fb89bcdf99168aee6324d17137ee-image-1493138232702.gif",
        style="float:right;height:150px">\r
        # Updating Properties\r
        \r
        This level
        is very similar to the last, but this time, you'll add in the draw loop yourself.\r
        \r
        #
        Do This\r
        * Add the draw loop block to the bottom of this program.\r
        * Move
        any blocks that need to be inside the draw loop.\r
        * Move on when your program
        looks like the picture to the right.\r
      CSD U3 Draw Loop Plugged wiggle sprite y_2018_markdown_instruction: |
        <img src="https://images.code.org/1e22fb89bcdf99168aee6324d17137ee-image-1493138232702.gif",
        style="float:right;height:150px">\r
        # Updating Properties\r
        \r
        This level
        is very similar to the last, but this time, you'll add in the draw loop yourself.\r
        \r
        #
        Do This\r
        * Add the draw loop block to the bottom of this program.\r
        * Move
        any blocks that need to be inside the draw loop.\r
        * Move on when your program
        looks like the picture to the right.\r
      CSD U3 Drawing Squares to Corners_markdown_instruction: |-
        <img src="https://images.code.org/9e09a96901b1e5ad9d5869b2b1fd3897-image-1498671940133.45.12
        AM.png" style="float:right;width:150px">\r
        \r
        # Place Squares in Corners\r
        \r
        A
        big part of using Game Lab is understanding position. Remember you can always
        turn on the grid or hover with the mouse to help find the x and y position
        you want.\r
        \r
        # Do This\r
        \r
        * Place two rectangles exactly in the corners
        of the screen, just like the picture.
      CSD U3 Drawing Squares to Corners_2018_markdown_instruction: |-
        <img src="https://images.code.org/9e09a96901b1e5ad9d5869b2b1fd3897-image-1498671940133.45.12
        AM.png" style="float:right;width:150px">\r
        \r
        # Place Squares in Corners\r
        \r
        A
        big part of using Game Lab is understanding position. Remember you can always
        turn on the grid or hover with the mouse to help find the x and y position
        you want.\r
        \r
        # Do This\r
        \r
        * Place two rectangles exactly in the corners
        of the screen, just like the picture.
      CSD U3 Else_markdown_instruction: |-
        # What If My Condition Isn't True?\r
        \r
        <img
        src="https://images.code.org/1a997d78fcd88efeb9e6dc5a02aa88e8-image-1464706463138.53.58.png"
        width="125px" style="float:right">\r
        \r
        Sometimes we want to tell our
        program what to do if a condition is `true`, but also what to do if it's
        `false`. Pressing the plus button at the bottom of your conditional block
        will give you another section called `else`. This `else` section is a fallback
        - it will get called whenever the condition in the `if` before it is `false`.\r
        \r
        #
        Do This\r
        The gears are back again. The last time you worked with them, you
        made them spin when the space bar is pressed. Instead of the gears only spinning
        when the space key is pressed, we want them to spin one way when the space
        key is pressed and spin the other way when it's not pressed.\r
        <img src="https://images.code.org/b074d47ca8dfa5ab3bfd08344b4f4e42-image-1464706389475.gif"
        style="float:right">\r
        \r
        * Click the _plus_ button at the bottom of the
        if block to add an else.\r
        * Add commands to make the gears spin opposite
        of the direction that they do when the space bar is pressed.
      CSD U3 Else_2018_markdown_instruction: |-
        # What If My Condition Isn't True?\r
        \r
        <img
        src="https://images.code.org/1a997d78fcd88efeb9e6dc5a02aa88e8-image-1464706463138.53.58.png"
        width="125px" style="float:right">\r
        \r
        Sometimes we want to tell our
        program what to do if a condition is `true`, but also what to do if it's
        `false`. Pressing the plus button at the bottom of your conditional block
        will give you another section called `else`. This `else` section is a fallback
        - it will get called whenever the condition in the `if` before it is `false`.\r
        \r
        #
        Do This\r
        The gears are back again. The last time you worked with them, you
        made them spin when the space bar is pressed. Instead of the gears only spinning
        when the space key is pressed, we want them to spin one way when the space
        key is pressed and spin the other way when it's not pressed.\r
        <img src="https://images.code.org/b074d47ca8dfa5ab3bfd08344b4f4e42-image-1464706389475.gif"
        style="float:right">\r
        \r
        * Click the _plus_ button at the bottom of the
        if block to add an else.\r
        * Add commands to make the gears spin opposite
        of the direction that they do when the space bar is pressed.
      CSD U3 Entertainment Sample 1 - unembed_markdown_instruction: |-
        # Alien Jumper\r
        \r
        Press
        "Run" to play the game on the left.  You can make the alien jump with the
        space bar, and move it to the left and right with the arrow keys.  You score
        by collecting stars, and if you score high enough, the background will change.
      CSD U3 Entertainment Sample 1_markdown_instruction: |-
        # Alien Jumper\r
        \r
        Press
        "Run" to play the game on the left.  You can make the alien jump with the
        space bar, and move it to the left and right with the arrow keys.  You score
        by collecting stars, and if you score high enough, the background will change.
      CSD U3 Entertainment Sample 1_2018_markdown_instruction: |-
        # Alien Jumper\r
        \r
        Press
        "Run" to play the game on the left.  You can make the alien jump with the
        space bar, and move it to the left and right with the arrow keys.  You score
        by collecting stars, and if you score high enough, the background will change.
      CSD U3 Entertainment Sample 2_markdown_instruction: |-
        # Hungry Bunny\r
        \r
        The
        bunny is hungry, and it's looking for mushrooms and carrots for dinner.\r
        \r
        To
        win, you'll need to find a dinner bowl, then collect at least ten carrots
        and five mushrooms.\r
        \r
        Make sure to avoid the bugs.  Ladybugs and snails
        will eat your food, and bees will sting you, making you drop everything!\r
        \r
        Use
        the space bar to jump.  You can squash ladybugs and snails by jumping on them.\r
        \r
        Click
        "Run" to start the program.
      CSD U3 Entertainment Sample 2_2018_markdown_instruction: |-
        # Hungry Bunny\r
        \r
        The
        bunny is hungry, and it's looking for mushrooms and carrots for dinner.\r
        \r
        To
        win, you'll need to find a dinner bowl, then collect at least ten carrots
        and five mushrooms.\r
        \r
        Make sure to avoid the bugs.  Ladybugs and snails
        will eat your food, and bees will sting you, making you drop everything!\r
        \r
        Use
        the space bar to jump.  You can squash ladybugs and snails by jumping on them.\r
        \r
        Click
        "Run" to start the program.
      CSD U3 Entertainment Sample 3_markdown_instruction: |
        # Animated Comics\r
        \r
        Combining
        images, text, and some subtle animation can make for really interesting comics
        or graphic stories.  Click "Run" to see an example.\r
      CSD U3 Entertainment Sample 3_2018_markdown_instruction: |
        # Animated Comics\r
        \r
        Combining
        images, text, and some subtle animation can make for really interesting comics
        or graphic stories.  Click "Run" to see an example.\r
      CSD U3 Entertainment Sample 4_markdown_instruction: |
        # Stamp Pad\r
        \r
        Click
        "Run" to start the program, then use the stamp pad to draw pictures with
        simple colors and animal stamps.\r
      CSD U3 Entertainment Sample 4_2018_markdown_instruction: |
        # Stamp Pad\r
        \r
        Click
        "Run" to start the program, then use the stamp pad to draw pictures with
        simple colors and animal stamps.\r
      CSD U3 Expressions calculator_markdown_instruction: |-
        # Adding and Multiplying\r
        \r
        Your
        computer can calculate the results of many math problems. Try out this example,
        where we add and multiply a few numbers. Then extend it yourself to the numbers
        1 - 10.\r
        \r
        # Do This\r
        \r
        * Run the program code once to see how it
        works\r
        * Following the examples, write a program that **multiplys the numbers
        1 - 10** and **adds the numbers 1 - 10**\r
        * **When you're done confirm
        your results with a neighbor**
      CSD U3 Frame Rate_markdown_instruction: |-
        # Too Fast, Slow Down!\r
        <img src="https://images.code.org/f249b981ead9d196b0f136c402dd0c41-image-1478803334302.gif"
        style="float:right; width:200px"/>\r
        \r
        The animation is working, but
        it's a bit too fast. We're flipping the pages in our virtual flipbook too
        often, so we'll need to slow that down.\r
        \r
        The frequency that our draw
        loop is run is called the **frame rate** - the number of times per second
        the screen is refreshed.\r
        \r
        The default frame rate for Game Lab is 30
        frames per second (or FPS), which is great for a video game, but not so good
        for our animation. We can slow down the frame rate using the `World.frameRate`
        block.\r
        \r
        # Do This\r
        \r
        * Use the `World.frameRate` block at the very
        beginning of your program, setting it to a number (frames per second) that
        slows the animation down a bit. \r
        * Test it out with different numbers to
        see which frame rate you like (the default is 30, and it can't go any higher
        than 60).
      CSD U3 Functions Add Change Background tmp_markdown_instruction: |-
        # Change
        the Background with the Score\r
        \r
        Once you've caught 10 coins it's time
        to celebrate. You should change the background to be something fun.\r
        \r
        <img
        src="https://images.code.org/943c67e59502334fc65a25e690076bdb-image-1475030156530.33.54
        PM.png" style="float:right; height:100px">\r
        \r
        # Do This\r
        \r
        * Use
        an **if-statement** and two separate functions to draw your backgrounds\r
        *
        Then go write your functions outside your draw loop. You get to decide what
        a "simple" or "crazy" background are. Have fun with it!
      CSD U3 Functions Add Change Background_markdown_instruction: |-
        # Change the
        Background with the Score\r
        \r
        Once you've caught 10 coins it's time to
        celebrate. You should change the background to be something fun.\r
        \r
        <img
        src="https://images.code.org/943c67e59502334fc65a25e690076bdb-image-1475030156530.33.54
        PM.png" style="float:right; height:100px">\r
        \r
        # Do This\r
        \r
        * Use
        an **if-statement** and two separate functions to draw your backgrounds.\r
        *
        Then go write your functions outside your draw loop. You get to decide what
        a "simple" or "crazy" background are. Have fun with it!
      CSD U3 Functions Add Change Background_2018_markdown_instruction: |-
        # Change
        the Background with the Score\r
        \r
        Once you've caught 10 coins it's time
        to celebrate. You should change the background to be something fun.\r
        \r
        <img
        src="https://images.code.org/943c67e59502334fc65a25e690076bdb-image-1475030156530.33.54
        PM.png" style="float:right; height:100px">\r
        \r
        # Do This\r
        \r
        * Use
        an **if-statement** and two separate functions to draw your backgrounds.\r
        *
        Then go write your functions outside your draw loop. You get to decide what
        a "simple" or "crazy" background are. Have fun with it!
      CSD U3 Functions Add IsTouching_markdown_instruction: |-
        # Catch the Coin, Increase
        the Score\r
        \r
        Let's make that score change now too to complete the game.
        You'll need to be able to tell when the bunny is touching the coin and the
        reset it.\r
        \r
        # Do This\r
        \r
        * Use an **if-statement** and the **isTouching**
        block to increase the score when the bunny catches the coin.\r
        * Make sure
        you're **calling your function** to reset the coin once it's been caught.\r
        *
        Play the game and **randomize the velocity of the coin** to a range that you
        think is fun.
      CSD U3 Functions Add IsTouching_2018_markdown_instruction: |-
        # Catch the Coin,
        Increase the Score\r
        \r
        Let's make that score change now too to complete
        the game. You'll need to be able to tell when the bunny is touching the coin
        and the reset it.\r
        \r
        # Do This\r
        \r
        * Use an **if-statement** and the
        **isTouching** block to increase the score when the bunny catches the coin.\r
        *
        Make sure you're **calling your function** to reset the coin once it's been
        caught.\r
        * Play the game and **randomize the velocity of the coin** to a
        range that you think is fun.
      CSD U3 Functions Call Draw Loop_markdown_instruction: |-
        # Calling Functions
        in the Draw Loop\r
        \r
        You can call a function inside the draw loop, just
        as you would anywhere else in your code.\r
        \r
        # Do This\r
        \r
        A function
        that will draw a background has been created for you. A sprite has been created
        to move across the background.\r
        \r
        * **Call the function inside the draw
        loop** so that the sprite appears on top of the background.\r
        * **Note:**
        Don't create functions inside the draw loop. Make them at the bottom of your
        code.
      CSD U3 Functions Call Draw Loop_2018_markdown_instruction: |-
        # Calling Functions
        in the Draw Loop\r
        \r
        You can call a function inside the draw loop, just
        as you would anywhere else in your code.\r
        \r
        # Do This\r
        \r
        A function
        that will draw a background has been created for you. A sprite has been created
        to move across the background.\r
        \r
        * **Call the function inside the draw
        loop** so that the sprite appears on top of the background.\r
        * **Note:**
        Don't create functions inside the draw loop. Make them at the bottom of your
        code.
      CSD U3 Functions Call Function_markdown_instruction: |-
        # Calling Functions\r
        \r
        Functions
        let you build your own blocks and decide what code goes inside of them. This
        is the command that lets you create a new function.\r
        \r
        ![](https://images.code.org/2493f74065d4e642ca51429b8832e431-image-1474913839061.17.09
        PM.png)\r
        \r
        You use or "call" your function like any other block by using
        the name you gave it.\r
        \r
        ![](https://images.code.org/61a6eb716e263b580ecd63fab0de7547-image-1474913770359.16.00
        PM.png)\r
        \r
        The blocks to create and call functions can be found in the
        "Functions" tab of the palette.\r
        \r
        ![](https://images.code.org/a570a05be61297ee9f0d79a02df8db6e-image-1474922721897.44.36
        PM.png)\r
        \r
        # Do This\r
        \r
        This program has already created 2 functions.
        Only one of them is being called.\r
        \r
        * **Call the second function** to
        reveal the full image. Use the function that is being called as a guide.\r
        *
        **Tip:** Just as with all other blocks, spelling and capitalization are important
        here.
      CSD U3 Functions Call Function_2018_markdown_instruction: |-
        # Calling Functions\r
        \r
        Functions
        let you build your own blocks and decide what code goes inside of them. This
        is the command that lets you create a new function.\r
        \r
        ![](https://images.code.org/2493f74065d4e642ca51429b8832e431-image-1474913839061.17.09
        PM.png)\r
        \r
        You use or "call" your function like any other block by using
        the name you gave it.\r
        \r
        ![](https://images.code.org/61a6eb716e263b580ecd63fab0de7547-image-1474913770359.16.00
        PM.png)\r
        \r
        The blocks to create and call functions can be found in the
        "Functions" tab of the palette.\r
        \r
        ![](https://images.code.org/a570a05be61297ee9f0d79a02df8db6e-image-1474922721897.44.36
        PM.png)\r
        \r
        # Do This\r
        \r
        This program has already created 2 functions.
        Only one of them is being called.\r
        \r
        * **Call the second function** to
        reveal the full image. Use the function that is being called as a guide.\r
        *
        **Tip:** Just as with all other blocks, spelling and capitalization are important
        here.
      CSD U3 Functions Create Function_markdown_instruction: |-
        # Creating Functions
        to Organize Code\r
        \r
        In Game Lab all the action is happening in the draw
        loop, but too much complex code makes it really confusing to read. To keep
        your draw loop easy to read, use functions for larger chunks of code. You
        can call them inside the draw loop and define them below. This is a really
        good example of using **abstraction** to think about problems at a high level
        and worry about details later.\r
        \r
        <img src="https://images.code.org/1a5beeaad6e55c5b27a43604be4f039a-image-1475199750468.42.07
        PM.png" style="float:right;width:150px">\r
        \r
        # Do This\r
        \r
        This program
        should draw a daytime scene or a nighttime scene, depending on the location
        of the mouse. The draw loop describes what needs to happen but one of the
        functions hasn't been written yet.\r
        \r
        * **Write the `drawNight` function**
        which has been created but is empty.\r
        * Hint: Look at the picture to the
        right for how your night image should look. Can you use the `drawDay` function
        to help you at all?
      CSD U3 Functions Create Function_2018_markdown_instruction: |-
        # Creating Functions
        to Organize Code\r
        \r
        In Game Lab all the action is happening in the draw
        loop, but too much complex code makes it really confusing to read. To keep
        your draw loop easy to read, use functions for larger chunks of code. You
        can call them inside the draw loop and define them below. This is a really
        good example of using **abstraction** to think about problems at a high level
        and worry about details later.\r
        \r
        <img src="https://images.code.org/1a5beeaad6e55c5b27a43604be4f039a-image-1475199750468.42.07
        PM.png" style="float:right;width:150px">\r
        \r
        # Do This\r
        \r
        This program
        should draw a daytime scene or a nighttime scene, depending on the location
        of the mouse. The draw loop describes what needs to happen but one of the
        functions hasn't been written yet.\r
        \r
        * **Write the `drawNight` function**
        which has been created but is empty.\r
        * Hint: Look at the picture to the
        right for how your night image should look. Can you use the `drawDay` function
        to help you at all?
      CSD U3 Functions Improve Side Scroller_markdown_instruction: |-
        # Finish Your
        Side Scroller\r
        \r
        Time to use functions to finish off you side-scroller!\r
        \r
        #
        Do This\r
        \r
        * Change the background of your game depending on the score.
        Use functions to move the code for your background out of your draw loop\r
        *
        Use functions to make sure you're not repeating code when you reset your
        obstacle\r
        \r
        _Challenge: Add another sprite to your game and define how
        it will interact with your main character. It might be another obstacle to
        avoid or some kind of goal to collect_
      CSD U3 Functions Order Functions_markdown_instruction: |-
        # Reordering Code\r
        \r
        Placing
        code inside functions makes it easy to read and make changes to. Good names
        for functions indicate what your program is doing to a reader. You can call
        your functions in a different order to quickly make significant changes to
        how your program runs.\r
        \r
        # Do This\r
        \r
        This program has already created
        4 functions that draw parts of a scene. Unfortunately it's not coming out
        right.\r
        \r
        * **Read the 4 functions** to know what they do\r
        * **Call
        the functions** in an order that draws the scene in the way that looks best
        to you
      CSD U3 Functions Order Functions_2018_markdown_instruction: |-
        # Reordering Code\r
        \r
        Placing
        code inside functions makes it easy to read and make changes to. Good names
        for functions indicate what your program is doing to a reader. You can call
        your functions in a different order to quickly make significant changes to
        how your program runs.\r
        \r
        # Do This\r
        \r
        This program has already created
        4 functions that draw parts of a scene. Unfortunately it's not coming out
        right.\r
        \r
        * **Read the 4 functions** to know what they do\r
        * **Call
        the functions** in an order that draws the scene in the way that looks best
        to you
      CSD U3 Functions Prediction Order of Create Call_markdown_instruction: |
        # When
        Can Your Define Functions?\r
        \r
        So far you've only seen functions created
        at the bottom of your code. What do you think happens if we create the function
        before we call it?\r
        \r
        # Do This\r
        \r
      CSD U3 Functions Randomize Sprite_markdown_instruction: |-
        # Making Changes to
        Functions\r
        \r
        A nice benefit of using functions to remove repeated code
        is that you can now easily make changes to multiple places in your code. Just
        change how you create the functions, and your program will now use the new
        code everywhere your function is called.\r
        \r
        # Do This\r
        \r
        Make changes
        to the `setFlyer` function so that the flyer starts at a random Y location
        between 0 and 400, and moves at a random velocity every time he is reset.
      CSD U3 Functions Randomize Sprite_2018_markdown_instruction: |-
        # Making Changes
        to Functions\r
        \r
        A nice benefit of using functions to remove repeated code
        is that you can now easily make changes to multiple places in your code. Just
        change how you create the functions, and your program will now use the new
        code everywhere your function is called.\r
        \r
        # Do This\r
        \r
        Make changes
        to the `setFlyer` function so that the flyer starts at a random Y location
        between 0 and 400, and moves at a random velocity every time he is reset.
      CSD U3 Functions Reset Sprite_markdown_instruction: |-
        # Calling Functions Multiple
        Times\r
        \r
        You'll often want to use the same code at many places in your
        program. Once you've created a function you can call it as many times as
        you like.\r
        \r
        # Do This\r
        \r
        This code creates a sprite that moves across
        the screen once. How can you make it go back across the screen?\r
        \r
        * **Note:**
        The function is already called once at the beginning of your program\r
        *
        Read the condition of the **if-statement** inside the draw loop. Why do you
        think it's there?\r
        * Use this if-statement and the function written for
        you to make the sprite move across the screen multiple times.
      CSD U3 Functions Reset Sprite_2018_markdown_instruction: |-
        # Calling Functions
        Multiple Times\r
        \r
        You'll often want to use the same code at many places
        in your program. Once you've created a function you can call it as many times
        as you like.\r
        \r
        # Do This\r
        \r
        This code creates a sprite that moves
        across the screen once. How can you make it go back across the screen?\r
        \r
        *
        **Note:** The function is already called once at the beginning of your program\r
        *
        Read the condition of the **if-statement** inside the draw loop. Why do you
        think it's there?\r
        * Use this if-statement and the function written for
        you to make the sprite move across the screen multiple times.
      CSD U3 Functions Template Flyman_markdown_instruction: |-
        # Calling Functions
        Multiple Times\r
        \r
        Often times you'll want to use the same code at many
        places in your program. Once you've created a function you can call it as
        many times as you like.\r
        \r
        # Do This\r
        \r
        This code creates a sprite
        that moves across the screen once. How can you make it go back across the
        screen.\r
        \r
        * Read the condition of the **if-statement** inside the draw
        loop. Why do you think it's there?\r
        * Use this if-statement and the function
        written for you to make the sprite move across the screen multiple times.
      CSD U3 Functions Template Flyman_2018_markdown_instruction: |-
        # Calling Functions
        Multiple Times\r
        \r
        Often times you'll want to use the same code at many
        places in your program. Once you've created a function you can call it as
        many times as you like.\r
        \r
        # Do This\r
        \r
        This code creates a sprite
        that moves across the screen once. How can you make it go back across the
        screen.\r
        \r
        * Read the condition of the **if-statement** inside the draw
        loop. Why do you think it's there?\r
        * Use this if-statement and the function
        written for you to make the sprite move across the screen multiple times.
      CSD U3 Functions Write Reset_markdown_instruction: |-
        # Write Your Own Function\r
        \r
        Time
        to practice writing functions of your own. This is a very simple game in which
        coins fall from the sky and the bunny tries to catch them. All you need to
        do is write the function that sets up the coin.\r
        \r
        # Do This\r
        \r
        *
        **Read and run the code** that already exists to make sure you know how it
        works.\r
        * **Write the code for the `setCoin`** function to make the coin
        fall from the sky.\r
        * You can go look at some of the previous levels if
        you need help.
      CSD U3 Functions Write Reset_2018_markdown_instruction: |-
        # Write Your Own Function\r
        \r
        Time
        to practice writing functions of your own. This is a very simple game in which
        coins fall from the sky and the bunny tries to catch them. All you need to
        do is write the function that sets up the coin.\r
        \r
        # Do This\r
        \r
        *
        **Read and run the code** that already exists to make sure you know how it
        works.\r
        * **Write the code for the `setCoin`** function to make the coin
        fall from the sky.\r
        * You can go look at some of the previous levels if
        you need help.
      CSD U3 Functions Write Your Own_markdown_instruction: |-
        # Write Your Own Function\r
        \r
        Try
        writing your own function to add something to the scene!\r
        \r
        # Do This\r
        \r
        This
        is the same program you wrote in the last level.\r
        \r
        * **Create and call**
        a function that adds something to the scene. No need to get too complex, but
        make sure you get some practice writing a function\r
        * **Share your code**
        with a neighbor. Do they think your function's name clearly describes what
        it does? Make changes if you need to.
      CSD U3 Functions isTouching_markdown_instruction: |-
        # Making Changes to Functions\r
        \r
        A
        nice benefit of using functions to remove repeated code is that you can now
        easily make changes to multiple places in your code. Just change how you create
        the functions, and your program will now use the new code everywhere your
        function is called.\r
        \r
        # Do This\r
        \r
        Make changes to the `setFlyman`
        function so that he starts at a random Y location between 0 and 400, and moves
        at a random speed every time he restarts.
      CSD U3 If Else_markdown_instruction: |-
        # When to Provide a Fallback\r
        \r
        The
        else clause is useful as a fallback to the main condition that you're checking
        - that is, if you _care_ what happens when your primary condition is `false`,
        you should provide an else clause to take care of it.\r
        \r
        <img src="https://images.code.org/730a895b50375781e72c95f5fa21d09d-image-1477681109870.gif"
        style="float:right;">\r
        \r
        # Do This\r
        Click "Run" to see the swarm
        of bees created for you and a flower on the left side of the screen. Make
        the swarm of bees **appear when the mouse is near the flower** (on the left
        side of the screen) and **disappear when the mouse is away from the flower**
        (on the right side of the screen). Look at the example on the right.\r
        \r
        *
        Add an `if else` statement after you update the position of the bees.\r
        *
        In the input of the if use a boolean to check if the x position of the mouse
        is on the side of the screen with the flower.\r
        * Set the `visible` property
        of each bee inside both the if and else statements appropriately to make the
        bees only show near the flower.
      CSD U3 If Else_2018_markdown_instruction: |-
        # When to Provide a Fallback\r
        \r
        The
        else clause is useful as a fallback to the main condition that you're checking
        - that is, if you _care_ what happens when your primary condition is `false`,
        you should provide an else clause to take care of it.\r
        \r
        <img src="https://images.code.org/730a895b50375781e72c95f5fa21d09d-image-1477681109870.gif"
        style="float:right;">\r
        \r
        # Do This\r
        Click "Run" to see the swarm
        of bees created for you and a flower on the left side of the screen. Make
        the swarm of bees **appear when the mouse is near the flower** (on the left
        side of the screen) and **disappear when the mouse is away from the flower**
        (on the right side of the screen). Look at the example on the right.\r
        \r
        *
        Add an `if else` statement after you update the position of the bees.\r
        *
        In the input of the if use a boolean to check if the x position of the mouse
        is on the side of the screen with the flower.\r
        * Set the `visible` property
        of each bee inside both the if and else statements appropriately to make the
        bees only show near the flower.
      CSD U3 Input Fish_markdown_instruction: |-
        # Fish With Arrows\r
        \r
        The fish
        are back. Can you make the fish move left only when the left arrow key is
        pressed down?\r
        \r
        # Do This\r
        \r
        * Add an if statement to check when
        the left arrow key is pressed down.\r
        * Move the commands for moving the
        fish inside the if statement.
      CSD U3 Input Fish_2018_markdown_instruction: |-
        # Fish With Arrows\r
        \r
        The
        fish are back. Can you make the fish move left only when the left arrow key
        is pressed down?\r
        \r
        # Do This\r
        \r
        * Add an if statement to check when
        the left arrow key is pressed down.\r
        * Move the commands for moving the
        fish inside the if statement.
      CSD U3 Input Gears_markdown_instruction: |-
        # Gears with Conditionals\r
        \r
        Let's
        make the gears spin only when the space key is being held down.\r
        \r
        # Do
        This\r
        \r
        * Add an `if` statement.\r
        * Use `keyDown` as input to the if
        statement to check when the space key is pressed.\r
        * Move the code that
        makes the gears rotate inside the `if`.
      CSD U3 Input Gears_2018_markdown_instruction: |-
        # Gears with Conditionals\r
        \r
        Let's
        make the gears spin only when the space key is being held down.\r
        \r
        # Do
        This\r
        \r
        * Add an `if` statement.\r
        * Use `keyDown` as input to the if
        statement to check when the space key is pressed.\r
        * Move the code that
        makes the gears rotate inside the `if`.
      CSD U3 Interactive Card Background_markdown_instruction: |-
        # Laying Out Your
        Background\r
        Before beginning this project, you should have already completed
        the Interactive Card Planning activity, and you'll want to have that paper
        with you as you develop your program. Preparation is one of the **most important**
        elements of successfully creating a program!\r
        \r
        # Do This\r
        Refer to
        your planning activity sheet to help you lay out the shapes that will become
        the background to your card.\r
        \r
        * First, figure out what the lowest layer
        in your image is (this should use the `background()` block) and add it to
        the very top of the draw loop.\r
        * Next, layer each additional drawing block
        in the order you want them to appear in the stack.\r
        * Finally, add a comment
        to the top of this section of code to describe what it does, and if you have
        any particularly complicated chunks of code within (such as code to draw a
        tree or a house), add a descriptive comment to that as well.\r
        \r
        **Challenge:**
        Can you use variables or `randomNumber()` to add some subtle animation to
        your background layer?
      CSD U3 Interactive Card Background_2018_markdown_instruction: |-
        # Laying Out
        Your Background\r
        Before beginning this project, you should have already
        completed the Interactive Card Planning activity, and you'll want to have
        that paper with you as you develop your program. Preparation is one of the
        **most important** elements of successfully creating a program!\r
        \r
        # Do
        This\r
        Refer to your planning activity sheet to help you lay out the shapes
        that will become the background to your card.\r
        \r
        * First, figure out what
        the lowest layer in your image is (this should use the `background()` block)
        and add it to the very top of the draw loop.\r
        * Next, layer each additional
        drawing block in the order you want them to appear in the stack.\r
        * Finally,
        add a comment to the top of this section of code to describe what it does,
        and if you have any particularly complicated chunks of code within (such as
        code to draw a tree or a house), add a descriptive comment to that as well.\r
        \r
        **Challenge:**
        Can you use variables or `randomNumber()` to add some subtle animation to
        your background layer?
      CSD U3 Interactive Card Exemplar_markdown_instruction: |-
        # Example Project\r
        \r
        Run
        the program a few times and answer the following questions:\r
        \r
        1) Which
        elements appear to use drawing commands?\r
        \r
        2) Which elements appear to
        be Sprites?\r
        \r
        3) For each Sprite, which properties are being updated?\r
        \r
        4)
        Where do you see conditionals being used?\r
        \r
        5) Are there elements that
        you don’t understand?
      CSD U3 Interactive Card Exemplar_2018_markdown_instruction: |-
        # Example Project\r
        \r
        Run
        the program a few times and answer the following questions:\r
        \r
        1) Which
        elements appear to use drawing commands?\r
        \r
        2) Which elements appear to
        be Sprites?\r
        \r
        3) For each Sprite, which properties are being updated?\r
        \r
        4)
        Where do you see conditionals being used?\r
        \r
        5) Are there elements that
        you don’t understand?
      CSD U3 Interactive Card Final_markdown_instruction: |-
        # Finishing Touches\r
        Now's
        your chance to put some finishing touches on your card. We've included some
        new blocks that you haven't seen before, so take some time to look around
        and try out some new blocks.\r
        \r
        # Do This\r
        Consider adding any of the
        following to finish up your card:\r
        \r
        * Text\r
        * Additional images for
        your sprites\r
        * Subtle animation in the background\r
        * Sound effects  (Can
        you figure out now to do this?)\r
        * More ways for a user to interact with
        your card
      CSD U3 Interactive Card Final_2018_markdown_instruction: |-
        # Finishing Touches\r
        Now's
        your chance to put some finishing touches on your card. We've included some
        new blocks that you haven't seen before, so take some time to look around
        and try out some new blocks.\r
        \r
        # Do This\r
        Consider adding any of the
        following to finish up your card:\r
        \r
        * Text\r
        * Additional images for
        your sprites\r
        * Subtle animation in the background\r
        * Sound effects  (Can
        you figure out now to do this?)\r
        * More ways for a user to interact with
        your card
      CSD U3 Interactive Card Other Conditionals_markdown_instruction: |-
        # Other Conditionals\r
        The
        _surprise_ in your card comes from conditionals that don't directly respond
        to user input, but to some other element of your card. This could be triggered
        by a variable that gets updated as the user interacts with your card, or a
        Sprite moving into a certain part of the screen.\r
        \r
        # Do This\r
        For each
        of the remaining items on your interactions table:\r
        \r
        * Add an `if` block
        (or `if-else` block if you need a fallback action) inside the draw loop.\r
        *
        Add the appropriate Boolean comparison block to the condition (eg. `<`, `>`,
        or `==`).\r
        * Add the necessary actions inside the `if` block.\r
        \r
        **Challenge:**
        Can you create more sophisticated conditionals by nesting them or using compound
        booleans?
      CSD U3 Interactive Card Other Conditionals_2018_markdown_instruction: |-
        # Other
        Conditionals\r
        The _surprise_ in your card comes from conditionals that don't
        directly respond to user input, but to some other element of your card. This
        could be triggered by a variable that gets updated as the user interacts with
        your card, or a Sprite moving into a certain part of the screen.\r
        \r
        #
        Do This\r
        For each of the remaining items on your interactions table:\r
        \r
        *
        Add an `if` block (or `if-else` block if you need a fallback action) inside
        the draw loop.\r
        * Add the appropriate Boolean comparison block to the condition
        (eg. `<`, `>`, or `==`).\r
        * Add the necessary actions inside the `if` block.\r
        \r
        **Challenge:**
        Can you create more sophisticated conditionals by nesting them or using compound
        booleans?
      CSD U3 Interactive Card Sprites_markdown_instruction: |-
        # Adding Sprites\r
        Now
        that you have the more static elements of your card layed out, it's time
        to add the Sprites. Your Sprites should provide the primary animations and
        interactions for your card - so feel free to get creative here and have fun.\r
        \r
        #
        Do This\r
        Check out the Sprites table on the back of your planning sheet.
        For each Sprite in your table:\r
        \r
        * Initialize the Sprite at the top of
        your program with `createSprite()`.\r
        * Find or create the image(s) for the
        Sprite and set it with `setAnimation()`.\r
        * Inside the `draw()` loop update
        any Sprite properties that we will be constantly animating (we'll deal with
        conditionals in a minute).
      CSD U3 Interactive Card Sprites_2018_markdown_instruction: |-
        # Adding Sprites\r
        Now
        that you have the more static elements of your card layed out, it's time
        to add the Sprites. Your Sprites should provide the primary animations and
        interactions for your card - so feel free to get creative here and have fun.\r
        \r
        #
        Do This\r
        Check out the Sprites table on the back of your planning sheet.
        For each Sprite in your table:\r
        \r
        * Initialize the Sprite at the top of
        your program with `createSprite()`.\r
        * Find or create the image(s) for the
        Sprite and set it with `setAnimation()`.\r
        * Inside the `draw()` loop update
        any Sprite properties that we will be constantly animating (we'll deal with
        conditionals in a minute).
      CSD U3 Interactive Card User Input_markdown_instruction: |-
        # User Input\r
        You've
        got a background, you've got Sprites, now it's time to give your user something
        to do!\r
        \r
        # Do This\r
        On the interactions table from your planning sheet,
        find all of the interactions that rely on user input (key presses and mouse
        movements). For each of those interactions:\r
        \r
        * Add an `if` block (or
        `if-else` block if you need a fallback action) inside the `draw()` loop.\r
        *
        Add the appropriate input block for your condition (such as `keyDown()` or
        `mouseDown()`).\r
        * Add the necessary actions inside the `if` block.\r
        \r
        **Challenge:**
        Can you create more sophisticated conditionals by nesting them or using compound
        booleans?
      CSD U3 Interactive Card User Input_2018_markdown_instruction: |-
        # User Input\r
        You've
        got a background, you've got Sprites, now it's time to give your user something
        to do!\r
        \r
        # Do This\r
        On the interactions table from your planning sheet,
        find all of the interactions that rely on user input (key presses and mouse
        movements). For each of those interactions:\r
        \r
        * Add an `if` block (or
        `if-else` block if you need a fallback action) inside the `draw()` loop.\r
        *
        Add the appropriate input block for your condition (such as `keyDown()` or
        `mouseDown()`).\r
        * Add the necessary actions inside the `if` block.\r
        \r
        **Challenge:**
        Can you create more sophisticated conditionals by nesting them or using compound
        booleans?
      CSD U3 Keyboard Input Challenge-2018_markdown_instruction: |-
        # Challenge\r
        _Check
        with your teacher before trying this challenge._\r
        \r
        Here's the bug program
        you've been working on for the past few levels. Choose one or more of following
        challenges, or add new features of your own!\r
        \r
        * Use the "space" key
        to control another property of your bug sprite, such as rotation or scale.\r
        *
        Add some randomization to your movement.\r
        * Add a second sprite and control
        it with a different set of keys ("w", "a", "s", and "d" are common
        choices).\r
        * Add some shapes to your background to make the scene more interesting.
      CSD U3 Keyboard Input Challenge_markdown_instruction: |-
        # Challenge\r
        _Check
        with your teacher before trying this challenge._\r
        \r
        Here's the bug program
        you've been working on for the past few levels. Choose one or more of following
        challenges, or add new features of your own!\r
        \r
        * Use the "space" key
        to control another property of your bug sprite, such as rotation or scale.\r
        *
        Add some randomization to your movement.\r
        * Add a second sprite and control
        it with a different set of keys ("w", "a", "s", and "d" are common
        choices).\r
        * Add some shapes to your background to make the scene more interesting.
      CSD U3 Keyboard Input Challenge_2018_markdown_instruction: |-
        # Challenge\r
        _Check
        with your teacher before trying this challenge._\r
        \r
        Here's the bug program
        you've been working on for the past few levels. Choose one or more of following
        challenges, or add new features of your own!\r
        \r
        * Use the "space" key
        to control another property of your bug sprite, such as rotation or scale.\r
        *
        Add some randomization to your movement.\r
        * Add a second sprite and control
        it with a different set of keys ("w", "a", "s", and "d" are common
        choices).\r
        * Add some shapes to your background to make the scene more interesting.
      CSD U3 Keypress Boolean Predict_markdown_instruction: |-
        # Make a Prediction:
        keyDown()\r
        The `keyDown()` block is the first of a new set of blocks that
        will let us get input from the user. This is the first step on our road to
        actually making games! See if you can figure out how the `keyDown()` block
        works.\r
        \r
        What do you think will happen when you run the program and press
        the "up" arrow? Write your prediction below and then run the program to
        see if your prediction was accurate.
      CSD U3 Keypress Boolean embed-2018_markdown_instruction: |-
        # Prediction - keyDown()\r
        \r
        The
        `keyDown()` block is the first of a new set of blocks that will let us get
        input from the user. This is the first step on our road to actually making
        games! See if you can predict how the `keyDown()` block works. You will **not
        write any code**.\r
        \r
        # Do This\r
        * Read the program carefully.\r
        * **Make
        a prediction about how the code will run** and write it in the box below.
        Be specific!\r
        * Run the program.\r
        * While the program is running, press
        the space bar on your keyboard.\r
        * Were you correct? Were you surprised?
        Discuss with a classmate.
      CSD U3 Keypress Boolean embed_markdown_instruction: |-
        # Prediction - keyDown()\r
        \r
        The
        `keyDown()` block is the first of a new set of blocks that will let us get
        input from the user. This is the first step on our road to actually making
        games! See if you can predict how the `keyDown()` block works. You will **not
        write any code**.\r
        \r
        # Do This\r
        * Read the program carefully.\r
        * **Make
        a prediction about how the code will run** and write it in the box below.
        Be specific!\r
        * Run the program.\r
        * While the program is running, press
        the up arrow on your keyboard.\r
        * Were you correct? Were you surprised?
        Discuss with a classmate.
      CSD U3 Keypress Boolean embed_2018_markdown_instruction: |-
        # Prediction - keyDown()\r
        \r
        The
        `keyDown()` block is the first of a new set of blocks that will let us get
        input from the user. This is the first step on our road to actually making
        games! See if you can predict how the `keyDown()` block works. You will **not
        write any code**.\r
        \r
        # Do This\r
        * Read the program carefully.\r
        * **Make
        a prediction about how the code will run** and write it in the box below.
        Be specific!\r
        * Run the program.\r
        * While the program is running, press
        the space bar on your keyboard.\r
        * Were you correct? Were you surprised?
        Discuss with a classmate.
      CSD U3 Keypress Boolean_markdown_instruction: |-
        # Prediction - keyDown()\r
        \r
        The
        `keyDown()` block is the first of a new set of blocks that will let us get
        input from the user. This is the first step on our road to actually making
        games! See if you can predict how the `keyDown()` block works. You will **not
        write any code**.\r
        \r
        # Do This\r
        * Read the program carefully.\r
        * **Make
        a prediction about how the code will run** and write it in the box below.
        Be specific!\r
        * Run the program.\r
        * While the program is running, press
        the up arrow on your keyboard.\r
        * Were you correct? Were you surprised?
        Discuss with a classmate.
      CSD U3 Keypress Watchers Predict_markdown_instruction: |-
        # Make a Prediction:
        User Input\r
        \r
        So far you've used `keyDown` as a way to let users control
        your programs, but that's just one of many ways to take input. In fact, just
        one of many ways _to detect keypresses_! Depending on how you want to react
        to a keypress, there are a few other blocks you might want to use.\r
        \r
        Read
        the program and predict below what will happen when you press each of the
        up, down, left, and right arrows.\r
        \r
        After making your prediction, run
        the code and write down or share with your neighbor your observations.\r
        \r
        *
        What seems to be the difference between `keyDown()`, `keyWentDown()`, and
        `keyWentUp()`?\r
        * What do you think the exclamation mark (`!`) on line 10
        does?\r
        * How might you use the different keypress blocks in a game?
      CSD U3 Keypress Watchers Predict_2018_markdown_instruction: |-
        # Make a Prediction:
        User Input\r
        \r
        So far you've used `keyDown` as a way to let users control
        your programs, but that's just one of many ways to take input. In fact, just
        one of many ways _to detect keypresses_! Depending on how you want to react
        to a keypress, there are a few other blocks you might want to use.\r
        \r
        Read
        the program and predict below what will happen when you press each of the
        up, down, left, and right arrows.\r
        \r
        After making your prediction, run
        the code and write down or share with your neighbor your observations.\r
        \r
        *
        What seems to be the difference between `keyDown()`, `keyWentDown()`, and
        `keyWentUp()`?\r
        * What do you think the exclamation mark (`!`) on line 10
        does?\r
        * How might you use the different keypress blocks in a game?
      CSD U3 Keypress Watchers_2018_markdown_instruction: |-
        # More Ways to Get User
        Input\r
        \r
        So far you've used `keyDown` as a way to let users control your
        programs, but that's just one of many ways to take input. In fact, just one
        of many ways _to detect keypresses_! Depending on how you want to react to
        a keypress, there are a few other blocks you might want to use.\r
        \r
        # Do
        This\r
        \r
        You will **not write any code** in this program.\r
        \r
        * Read
        the program and see if you can guess what will happen.\r
        * While the program
        is running, press the arrow keys and observe how the screen responds.\r
        *
        Write down or share with your neighbor your observations.\r
        \t* What seems
        to be the difference between `keyDown()`, `keyWentDown()`, and `keyWentUp()`?\r
            *
        What do you think the exclamation mark (`!`) on line 10 does?\r
            * How
        might you use the different keypress blocks in a game?
      CSD U3 L11 Freeplay_markdown_instruction: |
        # Free Play\r
        \r
        Use what you've
        learned to create whatever you like.  When you're finished, you can click  ![](https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43
        PM.png)  to send your creation to a friend, or ![](https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50
        PM.png) to send it to your Projects Gallery.\r
      CSD U3 L11 Freeplay_2018_markdown_instruction: |
        # Free Play\r
        \r
        Use what
        you've learned to create whatever you like.  When you're finished, you can
        click  ![](https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43
        PM.png)  to send your creation to a friend, or ![](https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50
        PM.png) to send it to your Projects Gallery.\r
      CSD U3 L12 Freeplay_markdown_instruction: |-
        # Free Play\r
        \r
        Use what you've
        learned to create whatever you like.  When you're finished, you can click  ![](https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43
        PM.png)  to send your creation to a friend, or ![](https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50
        PM.png) to send it to your Projects Gallery.
      CSD U3 L12 Freeplay_2018_markdown_instruction: |-
        # Free Play\r
        \r
        Use what
        you've learned to create whatever you like.  When you're finished, you can
        click  ![](https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43
        PM.png)  to send your creation to a friend, or ![](https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50
        PM.png) to send it to your Projects Gallery.
      CSD U3 L13 Freeplay_markdown_instruction: |-
        # Free Play\r
        \r
        Use what you've
        learned to create whatever you like.  When you're finished, you can click  ![](https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43
        PM.png)  to send your creation to a friend, or ![](https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50
        PM.png) to send it to your Projects Gallery.
      CSD U3 L13 Freeplay_2018_markdown_instruction: |-
        # Free Play\r
        \r
        Use what
        you've learned to create whatever you like.  When you're finished, you can
        click  ![](https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43
        PM.png)  to send your creation to a friend, or ![](https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50
        PM.png) to send it to your Projects Gallery.
      CSD U3 L15 Freeplay_markdown_instruction: |-
        # Free Play\r
        \r
        Use what you've
        learned to create whatever you like.  When you're finished, you can click  ![](https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43
        PM.png)  to send your creation to a friend, or ![](https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50
        PM.png) to send it to your Projects Gallery.
      CSD U3 L15 Freeplay_2018_markdown_instruction: |-
        # Free Play\r
        \r
        Use what
        you've learned to create whatever you like.  When you're finished, you can
        click  ![](https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43
        PM.png)  to send your creation to a friend, or ![](https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50
        PM.png) to send it to your Projects Gallery.
      CSD U3 L16 Freeplay_markdown_instruction: |-
        # Free Play\r
        \r
        Use what you've
        learned to create whatever you like.  When you're finished, you can click  ![](https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43
        PM.png)  to send your creation to a friend, or ![](https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50
        PM.png) to send it to your Projects Gallery.
      CSD U3 L16 Freeplay_2018_markdown_instruction: |-
        # Free Play\r
        \r
        Use what
        you've learned to create whatever you like.  When you're finished, you can
        click  ![](https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43
        PM.png)  to send your creation to a friend, or ![](https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50
        PM.png) to send it to your Projects Gallery.
      CSD U3 L17 Freeplay_markdown_instruction: |
        # Free Play\r
        \r
        Use what you've
        learned to create whatever you like.  When you're finished, you can click  ![](https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43
        PM.png)  to send your creation to a friend, or ![](https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50
        PM.png) to send it to your Projects Gallery.\r
      CSD U3 L17 Freeplay_2018_markdown_instruction: |
        # Free Play\r
        \r
        Use what
        you've learned to create whatever you like.  When you're finished, you can
        click  ![](https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43
        PM.png)  to send your creation to a friend, or ![](https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50
        PM.png) to send it to your Projects Gallery.\r
      CSD U3 L18 Freeplay_markdown_instruction: |
        # Free Play\r
        \r
        Use what you've
        learned to create whatever you like.  When you're finished, you can click  ![](https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43
        PM.png)  to send your creation to a friend, or ![](https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50
        PM.png) to send it to your Projects Gallery.\r
      CSD U3 L18 Freeplay_2018_markdown_instruction: |
        # Free Play\r
        \r
        Use what
        you've learned to create whatever you like.  When you're finished, you can
        click  ![](https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43
        PM.png)  to send your creation to a friend, or ![](https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50
        PM.png) to send it to your Projects Gallery.\r
      CSD U3 L19 Freeplay_markdown_instruction: |
        # Free Play\r
        \r
        Use what you've
        learned to create whatever you like.  When you're finished, you can click  ![](https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43
        PM.png)  to send your creation to a friend, or ![](https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50
        PM.png) to send it to your Projects Gallery.\r
        \r
      CSD U3 L19 Freeplay_2018_markdown_instruction: |
        # Free Play\r
        \r
        Use what
        you've learned to create whatever you like.  When you're finished, you can
        click  ![](https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43
        PM.png)  to send your creation to a friend, or ![](https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50
        PM.png) to send it to your Projects Gallery.\r
        \r
      CSD U3 L3 Freeplay_markdown_instruction: |
        # Free Play\r
        \r
        Use what you've
        learned to create whatever you like.  When you're finished, you can click  ![](https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43
        PM.png)  to send your creation to a friend, or ![](https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50
        PM.png) to send it to your Projects Gallery.\r
        \r
        \r
        \r
      CSD U3 L3 Freeplay_2018_markdown_instruction: |
        # Free Play\r
        \r
        Use what
        you've learned to create whatever you like.  When you're finished, you can
        click  ![](https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43
        PM.png)  to send your creation to a friend, or ![](https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50
        PM.png) to send it to your Projects Gallery.\r
        \r
        \r
        \r
      CSD U3 L4 Freeplay_markdown_instruction: |
        # Free Play\r
        \r
        Use what you've
        learned to create whatever you like.  When you're finished, you can click  ![](https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43
        PM.png)  to send your creation to a friend, or ![](https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50
        PM.png) to send it to your Projects Gallery.\r
        \r
        \r
        \r
      CSD U3 L4 Freeplay_2018_markdown_instruction: |
        # Free Play\r
        \r
        Use what
        you've learned to create whatever you like.  When you're finished, you can
        click  ![](https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43
        PM.png)  to send your creation to a friend, or ![](https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50
        PM.png) to send it to your Projects Gallery.\r
        \r
        \r
        \r
      CSD U3 L5 Freeplay_markdown_instruction: |
        # Free Play\r
        \r
        Use what you've
        learned to create whatever you like.  When you're finished, you can click  ![](https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43
        PM.png)  to send your creation to a friend, or ![](https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50
        PM.png) to send it to your Projects Gallery.\r
        \r
        \r
        \r
      CSD U3 L5 Freeplay_2018_markdown_instruction: |
        # Free Play\r
        \r
        Use what
        you've learned to create whatever you like.  When you're finished, you can
        click  ![](https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43
        PM.png)  to send your creation to a friend, or ![](https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50
        PM.png) to send it to your Projects Gallery.\r
        \r
        \r
        \r
      CSD U3 L6 Freeplay_markdown_instruction: |
        # Free Play\r
        \r
        Use what you've
        learned to create whatever you like.  When you're finished, you can click  ![](https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43
        PM.png)  to send your creation to a friend, or ![](https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50
        PM.png) to send it to your Projects Gallery.\r
      CSD U3 L6 Freeplay_2018_markdown_instruction: |
        # Free Play\r
        \r
        Use what
        you've learned to create whatever you like.  When you're finished, you can
        click  ![](https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43
        PM.png)  to send your creation to a friend, or ![](https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50
        PM.png) to send it to your Projects Gallery.\r
      CSD U3 L7 Freeplay_markdown_instruction: |-
        # Free Play\r
        \r
        Use what you've
        learned to create whatever you like.  When you're finished, you can click  ![](https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43
        PM.png)  to send your creation to a friend, or ![](https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50
        PM.png) to send it to your Projects Gallery.
      CSD U3 L7 Freeplay_2018_markdown_instruction: |-
        # Free Play\r
        \r
        Use what
        you've learned to create whatever you like.  When you're finished, you can
        click  ![](https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43
        PM.png)  to send your creation to a friend, or ![](https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50
        PM.png) to send it to your Projects Gallery.
      CSD U3 L9 Freeplay_markdown_instruction: |-
        # Free Play\r
        \r
        Use what you've
        learned to create whatever you like.  When you're finished, you can click  ![](https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43
        PM.png)  to send your creation to a friend, or ![](https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50
        PM.png) to send it to your Projects Gallery.
      CSD U3 L9 Freeplay_2018_markdown_instruction: |-
        # Free Play\r
        \r
        Use what
        you've learned to create whatever you like.  When you're finished, you can
        click  ![](https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43
        PM.png)  to send your creation to a friend, or ![](https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50
        PM.png) to send it to your Projects Gallery.
      CSD U3 Mouse Input Bee 1_markdown_instruction: |
        <img src="https://images.code.org/d2092b4f2debc336f963d48bd6cf4973-image-1477681020928.gif"
        style="float:right">\r
        \r
        # Mouse X and Y\r
        \r
        One of the simplest ways
        to take input is to just make a sprite follow the user's mouse position.
        **You can get the x and y location of the mouse using `World.mouseX` and `World.mouseY`.**  This
        follows the pattern you learned with sprite properties. `World` is the name
        of the object. `mouseX` and `mouseY` are the names of the properties.\r
        \r
        #
        Do This\r
        \r
        You are going to make a bee sprite follow the mouse around
        the game area.\r
        \r
        * The bee image is already loaded in the animation tab
        for you.\r
        * Create a bee sprite that draws in the center of the window.\r
        *
        Inside the draw loop update the position of the sprite to the position of
        the mouse:\r
        \t* Set the x position of the sprite to the value of `World.mouseX`.\r
            *
        Set the y position of the sprite to the value of `World.mouseY`.\r
        * Run
        the program to test that it works.\r
      CSD U3 Mouse Input Bee 1_2018_markdown_instruction: |
        <img src="https://images.code.org/d2092b4f2debc336f963d48bd6cf4973-image-1477681020928.gif"
        style="float:right">\r
        \r
        # Mouse X and Y\r
        \r
        One of the simplest ways
        to take input is to just make a sprite follow the user's mouse position.
        **You can get the x and y location of the mouse using `World.mouseX` and `World.mouseY`.**  This
        follows the pattern you learned with sprite properties. `World` is the name
        of the object. `mouseX` and `mouseY` are the names of the properties.\r
        \r
        #
        Do This\r
        \r
        You are going to make a bee sprite follow the mouse around
        the game area.\r
        \r
        * The bee image is already loaded in the animation tab
        for you.\r
        * Create a bee sprite that draws in the center of the window.\r
        *
        Inside the draw loop update the position of the sprite to the position of
        the mouse:\r
        \t* Set the x position of the sprite to the value of `World.mouseX`.\r
            *
        Set the y position of the sprite to the value of `World.mouseY`.\r
        * Run
        the program to test that it works.\r
      CSD U3 Mouse Input Bee 2_markdown_instruction: |-
        # Random Around Point\r
        \r
        <img
        src="https://images.code.org/d124946bb9e01a3623078c2a87beea8c-image-1477681483067.gif"
        style="float:right">\r
        \r
        Now that you can make the bee follow the mouse,
        lets make a bee fly around the mouse as shown in the picture on the right.  In
        order to do this, you will need to **add a random amount between -50 and 50
        to the `mouseX` or `mouseY`.**\r
        \r
        # Do This\r
        You already have a bee
        sprite that follows the mouse.\r
        \r
        * Update the x and y location to be
        randomly close to the mouse.\r
        \t* Add a random number between -50 and 50
        to the `World.mouseX` and `World.mouseY`.\r
        * If necessary, use the `World.frameRate`
        block to slow down the animation and find the best frame rate.\r
        \r
        _Challenge:
        **Add 3 more bees** that follow the mouse in the same way to make a swarm
        of bees._
      CSD U3 Mouse Input Bee 2_2018_markdown_instruction: |-
        # Random Around Point\r
        \r
        <img
        src="https://images.code.org/d124946bb9e01a3623078c2a87beea8c-image-1477681483067.gif"
        style="float:right">\r
        \r
        Now that you can make the bee follow the mouse,
        lets make a bee fly around the mouse as shown in the picture on the right.  In
        order to do this, you will need to **add a random amount between -50 and 50
        to the `mouseX` or `mouseY`.**\r
        \r
        # Do This\r
        You already have a bee
        sprite that follows the mouse.\r
        \r
        * Update the x and y location to be
        randomly close to the mouse.\r
        \t* Add a random number between -50 and 50
        to the `World.mouseX` and `World.mouseY`.\r
        * If necessary, use the `World.frameRate`
        block to slow down the animation and find the best frame rate.\r
        \r
        _Challenge:
        **Add 3 more bees** that follow the mouse in the same way to make a swarm
        of bees._
      CSD U3 Movement Fish_markdown_instruction: |-
        <img src="https://images.code.org/7852ab38a8222ee827edeff2767e8efd-image-1492037897236.gif"
        style="float: right; margin-left: 20px;">\r
        \r
        # Fish Animation\r
        \r
        Using
        the counter pattern, make all three of the fish move in the image to the left.
        The blue fish should move the fastest, followed by the orange fish, with the
        green fish being the slowest.
      CSD U3 Movement Fish_2018_markdown_instruction: |-
        <img src="https://images.code.org/7852ab38a8222ee827edeff2767e8efd-image-1492037897236.gif"
        style="float: right; margin-left: 20px;">\r
        \r
        # Fish Animation\r
        \r
        Using
        the counter pattern, make all three of the fish move in the image to the left.
        The blue fish should move the fastest, followed by the orange fish, with the
        green fish being the slowest.
      CSD U3 Movement Gears_markdown_instruction: |-
        <img src="https://images.code.org/eac110e64ccad62482c82d4ef66f237b-image-1465518920408.gif"
        style="width:200px; float:right; margin-left: 20px;">\r
        \r
        # Rotation
        Direction\r
        \r
        When you use the counter pattern for the `rotation` property
        with addition, the object will always rotate clockwise. Sometimes however
        you will want your sprite to rotate the other direction. To do this you can
        just use subtraction!\r
        \r
        # Do This\r
        \r
        There are three gears set up
        for you. You need to make the gears all look like they are rotating in sync
        with each other.\r
        \r
        * Make the gears rotate so they look like they are
        working as one system.\r
        * **Hint: They won't all rotate the same direction**.
      CSD U3 Movement Gears_2018_markdown_instruction: |-
        <img src="https://images.code.org/eac110e64ccad62482c82d4ef66f237b-image-1465518920408.gif"
        style="width:200px; float:right; margin-left: 20px;">\r
        \r
        # Rotation
        Direction\r
        \r
        When you use the counter pattern for the `rotation` property
        with addition, the object will always rotate clockwise. Sometimes however
        you will want your sprite to rotate the other direction. To do this you can
        just use subtraction!\r
        \r
        # Do This\r
        \r
        There are three gears set up
        for you. You need to make the gears all look like they are rotating in sync
        with each other.\r
        \r
        * Make the gears rotate so they look like they are
        working as one system.\r
        * **Hint: They won't all rotate the same direction**.
      CSD U3 Movement Your Own 1_markdown_instruction: |-
        # Make an animation of your
        own\r
        \r
        Using the counter pattern and sprite properties, make an animation
        all your own. You might consider building on the static images you've made
        in the past, or come up with a new image to create or story to tell.\r
        \r
        #
        Do This\r
        \r
        To start, let's just get a static scene set up.\r
        \r
        * Add
        images in the Animation Tab.\r
        * Create sprites and assign images.\r
        * Set
        up the draw loop to draw a background and your sprites.
      CSD U3 Movement Your Own 1_2018_markdown_instruction: |-
        # Make an animation
        of your own\r
        \r
        Using the counter pattern and sprite properties, make an
        animation all your own. You might consider building on the static images you've
        made in the past, or come up with a new image to create or story to tell.\r
        \r
        #
        Do This\r
        \r
        To start, let's just get a static scene set up.\r
        \r
        * Add
        images in the Animation Tab.\r
        * Create sprites and assign images.\r
        * Set
        up the draw loop to draw a background and your sprites.
      CSD U3 Movement Your Own 2_markdown_instruction: |-
        # Add movement to your animation\r
        \r
        With
        your static scene set up, you can now add some movement. When you are satisfied
        with your program, click the "Submit" button to turn it in. You can always
        unsubmit and continue working if you want to add features.\r
        \r
        # Do This\r
        \r
        In
        the draw loop\r
        \r
        * Identify which sprite properties to change.\r
        * Update
        those properties using the counter pattern.\r
        \r
        _Tip: If your counter pattern
        isn't working like you expect, add watchers to help debug your program._
      CSD U3 Movement Your Own 2_2018_markdown_instruction: |-
        # Add movement to your
        animation\r
        \r
        With your static scene set up, you can now add some movement.
        When you are satisfied with your program, click the "Submit" button to turn
        it in. You can always unsubmit and continue working if you want to add features.\r
        \r
        #
        Do This\r
        \r
        In the draw loop\r
        \r
        * Identify which sprite properties
        to change.\r
        * Update those properties using the counter pattern.\r
        \r
        _Tip:
        If your counter pattern isn't working like you expect, add watchers to help
        debug your program._
      CSD U3 Plotting Shapes Shape Lab - unembed_markdown_instruction: |-
        # Drawing
        Shapes\r
        \r
        Explore using this tool that lets you draw different colored
        shapes. \r
        \r
        Make sure you hit "Run" and try out turning on the grid
        to help you place shapes precisely.\r
        \r
        ![](https://images.code.org/d52dbc112dcc088858c4b8f54be09aa1-image-1502914103923.07.59
        PM.png)
      CSD U3 Plotting Shapes Shape Lab Open_markdown_instruction: |-
        # Drawing Shapes\r
        \r
        Explore
        using this tool that lets you draw different colored shapes. \r
        \r
        Make
        sure you hit "Run" and try out turning on the grid to help you place shapes
        precisely.\r
        \r
        ![](https://images.code.org/d52dbc112dcc088858c4b8f54be09aa1-image-1502914103923.07.59
        PM.png)
      CSD U3 Plotting Shapes Shape Lab_markdown_instruction: |-
        # Drawing Shapes\r
        \r
        Explore
        using this tool that lets you draw different colored shapes. \r
        \r
        Make
        sure you hit "Run" and try out turning on the grid to help you place shapes
        precisely.\r
        \r
        ![](https://images.code.org/d52dbc112dcc088858c4b8f54be09aa1-image-1502914103923.07.59
        PM.png)
      CSD U3 Plotting Shapes Shape Lab_2018_markdown_instruction: |-
        # Drawing Shapes\r
        \r
        Explore
        using this tool that lets you draw different colored shapes. \r
        \r
        Make
        sure you hit "Run" and try out turning on the grid to help you place shapes
        precisely.\r
        \r
        ![](https://images.code.org/d52dbc112dcc088858c4b8f54be09aa1-image-1502914103923.07.59
        PM.png)
      CSD U3 Property Conditional Multi_markdown_instruction: |
        # Get Creative\r
        \r
        Now
        that you've seen how we can use conditionals both to take input from the
        keyboard and to react to changes is sprite properties, it's time to come
        up with a cool use of conditionals on your own. You'll want to brainstorm
        with a partner to come up with the sprite properties you want to change, and
        the conditions that will decide when they get changed.\r
        \r
        # Do This\r
        -
        Decide which sprite properties will be controlled by conditionals eg:\r
        \t-
        Position (x and y)\r
            - Rotation\r
            - Color\r
            - Size (width,
        height, or scale)\r
            - etc\r
        - For each sprite property, decide on a
        conditional that will impact it:\r
        \t- Keyboard input (`keyDown()`, `keyWentDown()`,
        etc)\r
            - Sprite position\r
            - Mouse position\r
            - Other variables
        or properties\r
        - One at a time, write and test each conditional\r
        \r
        **Challenge**
        - Can you make a single conditional impact multiple properties?\r
      CSD U3 Property Conditional_markdown_instruction: |
        # Doing More With Conditionals\r
        Using
        conditionals to figure out which key was pressed is pretty useful, but we
        can also use conditionals with any value in our program, including sprite
        properties!\r
        \r
        With your neighbor, discuss the kinds of boolean questions
        you could use with the following sprite properties:\r
        \r
        - `sprite.x` and
        `sprite.y`\r
        - `sprite.width` and `sprite.height`\r
        - `sprite.shapeColor`\r
        -
        `sprite.visibility`\r
        \r
        # Do This\r
        Here's a program similar to one you
        just made, it uses `keyDown()` to move the sprite around the screen when you
        click the arrow keys. You're going to add some additional conditionals to
        this program to do the following:\r
        \r
        - Change the color of the sprite
        if it goes into the top quarter of the screen\r
        - Rotate the sprite if it
        goes into the left quarter of the screen\r
        - Make the sprite invisible if
        it goes into the bottom quarter of the screen\r
        - Make the sprite larger
        if it goes into the right quarter of the screen\r
        \r
        _BTW, if you're looking
        for the `keyDown()` block, you'll notice that it's now in the 'Game Lab'
        category._ \r
      CSD U3 Random Add a Door_markdown_instruction: |-
        <img src="https://images.code.org/fd746a708d8a94ad0aad863f3284a1ad-image-1490826372819.25.25
        PM.png" style="float:right;height:150px">\r
        \r
        # Do This\r
        \r
        * Write
        code that makes a red rectangle that is taller than the one already in the
        drawing.\r
        * Don't worry about the exact dimensions as long as your new
        rectangle is taller.
      CSD U3 Random Animation_markdown_instruction: |-
        <img src="https://images.code.org/f249b981ead9d196b0f136c402dd0c41-image-1478803334302.gif"
        style="float:right; width:200px"/>\r
        # Animation\r
        \r
        Look at this face
        made from some simple shapes. We put it in the `draw()` loop so that we could
        animate it, but it doesn't seem to be doing anything. We want the mouth to
        move like the image on the right, so that it looks like it's talking\r
        \r
        #
        Do This\r
        * Find the code that draws the mouth and replace the width and
        height with calls to `randomNumber()`\r
        * Experiment with different ranges
        of random numbers to get the kind of animation you're looking for.\r
        \r
        Hint:
        Don't worry if it's going too fast.  You'll slow it down on the next level.
      CSD U3 Random Choice_markdown_instruction: |-
        # Making Random Choices\r
        \r
        You
        probably noticed that the code from the last puzzle did a few things.\r
        *
        Always produced a whole number (also called an **integer**).\r
        * The lowest
        number that could be produced was 0, which is the first **input** we passed
        to the `randomNumber` block.\r
        * The highest number that could be produced
        was 10, which is the second **input** to the block.\r
        \r
        Let's create a
        program that can randomly make decisions for us. We'll use a **binary** representation
        where `0` means `false` and `1` means `true`.\r
        \r
        # Do This\r
        \r
        * Write
        a program that randomly writes out either 0 or 1 using `console.log()`.\r
        *
        Have your partner ask some true/false or yes/no questions and use your program
        to randomly answer.
      CSD U3 Random Color_markdown_instruction: |-
        # Randomized Colors\r
        \r
        Could
        you use `randomNumber()` to pick random colors as well? Back in Unit 2 you
        learned that colors can be composed of Red, Green, and Blue channel values
        - each of which is represented by a number value. What's the maximum and
        minimum that those channels can be set to?\r
        \r
        # Do This\r
        \r
        Using the
        `color()` function, set the `fill` or `stroke` of your shape to a random color.\r
        \r
        #
        Challenge\r
        \r
        Can you generate random colors that are limited to a narrow
        range of colors, such as a random shade or purple, or a random shade of teal?
      CSD U3 Random Debug Cloud-2018_markdown_instruction: |
        <img src="https://images.code.org/45d1d513f5ed63592e98ea3e4a08840c-image-1520403109680.11.28
        PM.png" style="float:right;height:150px">\r
        \r
        # Debug - Using 4 Parameters\r
        \r
        Now
        that the grass is working, let's add a cloud to the sky. Unfortunately, it
        looks a little funny right now.\r
        \r
        # Do This\r
        \r
        * Debug this program
        to make the cloud wider than it is tall, like in the image.\r
        * Hint: You'll
        need to change two parameters. Which ones set your cloud's width and height?\r
        \r
        _Challenge:
        The sun is not in the exact same place as in the picture.  Can you change
        the sun's coordinates so that the picture matches completely?_\r
      CSD U3 Random Debug Cloud_markdown_instruction: |-
        <img src="https://images.code.org/529b7e5ddda4683e6a0cc5b3028e4dbf-image-1490824752133.58.50
        PM.png" style="float:right;height:150px">\r
        \r
        # Debug - Using 4 Parameters\r
        \r
        Now
        that the grass is working, let's add a cloud to the sky. Unfortunately, it
        looks a little funny right now.\r
        \r
        # Do This\r
        \r
        * Debug this program
        to make the cloud wider than it is tall, like in the image.\r
        * Hint: You'll
        need to change two parameters. Which ones set your cloud's width and height?\r
        \r
        _Challenge:
        The sun is not in the exact same place as in the picture.  Can you change
        the sun's coordinates so that the picture matches completely?_
      CSD U3 Random Debug Cloud_2018_markdown_instruction: |
        <img src="https://images.code.org/45d1d513f5ed63592e98ea3e4a08840c-image-1520403109680.11.28
        PM.png" style="float:right;height:150px">\r
        \r
        # Debug - Using 4 Parameters\r
        \r
        Now
        that the grass is working, let's add a cloud to the sky. Unfortunately, it
        looks a little funny right now.\r
        \r
        # Do This\r
        \r
        * Debug this program
        to make the cloud wider than it is tall, like in the image.\r
        * Hint: You'll
        need to change two parameters. Which ones set your cloud's width and height?\r
        \r
        _Challenge:
        The sun is not in the exact same place as in the picture.  Can you change
        the sun's coordinates so that the picture matches completely?_\r
      CSD U3 Random Debug Grass_markdown_instruction: |-
        <img src="https://images.code.org/83269268e1c4f8af8551253ff4573b43-image-1490825158453.03.45
        PM.png" style="float:right;height:150px">\r
        \r
        # Debug - Using 4 Parameters\r
        \r
        This
        program uses the four parameter version of `rect()` and `ellipse()` to draw
        a simple scene.\r
        \r
        # Do This\r
        \r
        * Debug this program and correct the
        error so that the grass extends across the entire bottom.\r
        * Hint: You only
        have to change one number. Which parameter makes your rectangle (the grass)
        wider?
      CSD U3 Random Debug Grass_2018_markdown_instruction: |-
        <img src="https://images.code.org/08c7c6cd82f4d4ff57459165f29ab624-image-1520402652290.03.37
        PM.png" style="float:right;height:150px">\r
        \r
        # Debug - Using 4 Parameters\r
        \r
        This
        program uses the four parameter version of `rect()` and `ellipse()` to draw
        a simple scene.\r
        \r
        # Do This\r
        \r
        * Debug this program and correct the
        error so that the grass extends across the entire bottom.\r
        * Hint: You only
        have to change one number. Which parameter makes your rectangle (the grass)
        wider?
      CSD U3 Random Ellipse Behind-2018_markdown_instruction: |-
        <img src="https://images.code.org/dd73760e7129225b1e9f53a542960b9a-image-1520402430622.59.19
        PM.png" style="float:right;height:150px">\r
        \r
        # Do This\r
        \r
        * Write
        code that makes an orange ellipse behind the green one.\r
        * Don't worry
        about the exact size as long as the green ellipse is entirely inside the orange
        one.
      CSD U3 Random Ellipse Behind_markdown_instruction: |-
        <img src="https://images.code.org/a8ed6092389aedceceb38a83ac59fae1-image-1490832453029.07.10
        PM.png" style="float:right;height:150px">\r
        \r
        # Do This\r
        \r
        * Write
        code that makes an orange ellipse behind the green one.\r
        * Don't worry
        about the exact size as long as the green ellipse is entirely inside the orange
        one.
      CSD U3 Random Ellipse Behind_2018_markdown_instruction: |-
        <img src="https://images.code.org/dd73760e7129225b1e9f53a542960b9a-image-1520402430622.59.19
        PM.png" style="float:right;height:150px">\r
        \r
        # Do This\r
        \r
        * Write
        code that makes an orange ellipse behind the green one.\r
        * Don't worry
        about the exact size as long as the green ellipse is entirely inside the orange
        one.
      CSD U3 Random FreeResponse_markdown_instruction: |-
        # Randomness\r
        \r
        Sometimes
        you will want your programs to run a bit differently every time, and a simple
        way to do this is to generate **random numbers**. The `randomNumber()` block
        allows you to write programs with a little bit of randomization in them, which
        is also helpful when you you want images that look more natural - for example
        drawing a lots of stars in the sky in random positions, instead of selecting
        the x and y for each star.\r
        \r
        # console.log() \r
        The `console.log()`
        block is a useful tool for testing and debugging - anything that you place
        into `console.log()` block's input will be printed to the debug console,
        which you can find below your code.\r
        \r
        # Do This\r
        \r
        You will **not
        write any code** in this level.\r
        \r
        * Read the program provided\r
        * **Predict**
        what the provided program will do and write your prediction in the box below.
        **Be specific!**\r
        * Run the program several times and **record** the results.\r
        *
        **Discuss the results with a neighbor**. Was your prediction correct?
      CSD U3 Random Intro_markdown_instruction: |-
        # Randomness\r
        \r
        Sometimes you
        will want your programs to run a bit differently every time, and a simple
        way to do this is to generate **random numbers**. The `randomNumber()` block
        allows you to write programs with a little bit of randomization in them, which
        is also helpful when you you want images that look more natural - for example
        drawing a lots of stars in the sky in random positions, instead of selecting
        the x and y for each star.\r
        \r
        # console.log() \r
        The `console.log()`
        block is a useful tool for testing and debugging - anything that you place
        into `console.log()` block's input will be printed to the debug console,
        which you can find below your code.\r
        \r
        # Do This\r
        \r
        You will **not
        write any code** in this level.\r
        \r
        * Read the program provided\r
        * **Predict**
        what the provided program will do. **Be specific!**\r
        * Run the program several
        times and **record** the results.\r
        * **Discuss the results with a neighbor**.
        Was your prediction correct?
      CSD U3 Random Min Max_markdown_instruction: |-
        # Changing the minimum\r
        \r
        So
        far we've only generated numbers from 0 up to some other value, but what
        if we wanted a different minimum? For example, if we want to use `randomNumber()`
        to create circles that have a radius somewhere between 50 and 100 pixels,
        how might we do it?\r
        \r
        The first input (also called an **argument**) of
        the `randomNumber()` block defines the lowest number that will be randomly
        generated. In the previous levels we always used 0, but you could use any
        integer as the lower bound (even negative numbers!)\r
        \r
        # Do This\r
        \r
        Using
        `console.log()` write a program that randomly returns a number in a range
        you define. Try coming up with an interesting range of numbers for your program,
        for example:\r
        * Randomly generate a month number\r
        * Randomly generate
        a temperature below boiling but above freezing\r
        * Randomly generate a year
        you were alive in\r
        \r
        Can you come up with a range that includes negative
        numbers? What about both positive and negative ones?
      CSD U3 Random Number Map_markdown_instruction: |-
        # Random Numbers\r
        \r
        # Using
        Random Numbers\r
        \r
        The `randomNumber()` block can be used to generate random
        numbers in your programs. It can be used in the place of a single number and
        so can make your program run a little differently each time.\r
        \r
        ![](https://images.code.org/ef48e7f0312a567eca8641f349968c2a-image-1491521271912.27.09
        PM.png)\r
        \r
        <img src="https://images.code.org/246e7ac850015aa830d469b7eeb5f00e-image-1491523022253.50.04
        PM.png" style="float:left;width:150px">\r
        \r
        <img src="https://images.code.org/01b10dc034475fd5a90bd3c7bd0c51b8-image-1491523025607.50.17
        PM.png" style="float:left;width:150px">\r
        \r
        <img src="https://images.code.org/0f0c3cc4d42923dc4321809daf189053-image-1491523028093.50.49
        PM.png" style="float:left;width:150px">\r
        \r
        `randomNumber()` has two
        parameters for the minimum and maximum numbers it can choose between. If you
        want you can make these numbers negative.\r
        \r
        # Drawing and Random Numbers\r
        \r
        Below
        this program you can see three examples of possible output. Notice that even
        though it's the same program it's a different image every time.\r
        \r
        You
        can use the `randomNumber()` command multiple times in your programs. Each
        time it's used a new random number will be generated.\r
        \r
        ![](https://images.code.org/2c562cef4ef69c163db2b183225ee954-image-1491522524705.48.33
        PM.png)
      CSD U3 Random Taller Rectangle_markdown_instruction: |
        <img src="https://images.code.org/02871e5c5d041ea1724e4a02d3697941-image-1492721665345.54.10
        PM.png" style="float:right;height:150px; border: 1px solid #CCC">\r
        #
        Rectangle Size\r
        \r
        These `rect` blocks have two more parameters that you
        can use to control the size. Notice that the `noStroke()` block turns off
        the stroke (border) for shapes.\r
        \r
        # Do This\r
        \r
        * Look at the code
        and try to figure out how the last two inputs in `rect` work.\r
        * Change
        the numbers in the second `rect` to make red rectangle longer than the blue
        one.\r
      CSD U3 Random Taller Rectangle_2018_markdown_instruction: |
        <img src="https://images.code.org/02871e5c5d041ea1724e4a02d3697941-image-1492721665345.54.10
        PM.png" style="float:right;height:150px; border: 1px solid #CCC">\r
        #
        Rectangle Size\r
        \r
        These `rect` blocks have two more parameters that you
        can use to control the size. Notice that the `noStroke()` block turns off
        the stroke (border) for shapes.\r
        \r
        # Do This\r
        \r
        * Look at the code
        and try to figure out how the last two inputs in `rect` work.\r
        * Change
        the numbers in the second `rect` to make red rectangle longer than the blue
        one.\r
      CSD U3 Random Width Height_markdown_instruction: |-
        # Randomized Shapes\r
        \r
        Let's
        see how we can use randomization in our drawings. Each of the inputs from
        the shape blocks you've seen can be replaced with calls to `randomNumber()`.
        Try drawing some images that are slightly randomized each time. You might
        try changing the position randomly by using `randomNumber()` in place of the
        x or y inputs, or you could change the size of the shape itself by randomizing
        the length or width inputs.\r
        \r
        # Do This\r
        \r
        Pick a shape command (`ellipse()`,
        `rect()` or `regularPolygon()`) and use `randomNumber()` in place of one or
        more of the inputs. Make sure you run it a few times so you can see the effect
        of randomization.\r
        \r
        _Notice that the `console.log()` block is now in
        the Variables drawer and the `randomNumber()` block is in the Math drawer._
      CSD U3 Random background_markdown_instruction: |-
        # Background\r
        \r
        Sometimes
        you'll want to fill the entire screen with a color.  For that, you can use
        `background`.  It covers everything on the screen with the color you choose.\r
        \r
        #
        Do This\r
        \r
        * Run the code to see `background` work.\r
        * Change the background
        from yellow to orange.\r
        \r
        *Challenge: There is a purple square that is
        covered up by the background.  Can you change the order of the code so you
        can see both the purple and blue squares?*
      CSD U3 Random background2_markdown_instruction: |-
        <img src="https://images.code.org/a68cfd23a13b6bdeef91dc9fd584f657-image-1491332601738.03.04
        PM.png" style="float:right;height:150px">\r
        \r
        # Background\r
        \r
        `background()`
        will draw on top of everything already in your drawing, so it's important
        to think about the order of your code.\r
        \r
        # Do This\r
        \r
        * Use `background()`
        to make a "black" background behind the green circle.
      CSD U3 Random background2_2018_markdown_instruction: |-
        <img src="https://images.code.org/a68cfd23a13b6bdeef91dc9fd584f657-image-1491332601738.03.04
        PM.png" style="float:right;height:150px">\r
        \r
        # Background\r
        \r
        `background()`
        will draw on top of everything already in your drawing, so it's important
        to think about the order of your code.\r
        \r
        # Do This\r
        \r
        * Use `background()`
        to make a "black" background behind the green circle.
      CSD U3 Random background_2018_markdown_instruction: |-
        # Background\r
        \r
        Sometimes
        you'll want to fill the entire screen with a color.  For that, you can use
        `background`.  It covers everything on the screen with the color you choose.\r
        \r
        #
        Do This\r
        \r
        * Run the code to see `background` work.\r
        * Change the background
        from yellow to orange.\r
        \r
        *Challenge: There is a purple square that is
        covered up by the background.  Can you change the order of the code so you
        can see both the purple and blue squares?*
      CSD U3 Random rainbow snake-2018_markdown_instruction: |-
        <img src="https://images.code.org/6af643f712b042e5b076f06cc2f902e2-image-1520404404645.32.58
        PM.png" style="float:right;height:150px">\r
        \r
        # Rainbow Snake\r
        \r
        This
        program draws a very rare breed of rainbow snake. To make the snake draw differently
        every time you'll need to use random numbers.\r
        \r
        # Do This\r
        \r
        * Run
        the program several times to see how the starter code works.\r
        * Add at least
        three new different colored circles to your rainbow snake.\r
        * Use `randomNumber()`
        to make the rest of the snake's body move up and down like the first three.\r
        \r
        *Challenge:
        Can you make size of some of the circles random, too?*
      CSD U3 Random rainbow snake_markdown_instruction: |-
        <img src="https://images.code.org/d1e4780e483ffa510a27e91b2b1f1963-image-1491341267537.26.14
        PM.png" style="float:right;height:150px">\r
        \r
        # Rainbow Snake\r
        \r
        This
        program draws a very rare breed of rainbow snake. To make the snake draw differently
        every time you'll need to use random numbers.\r
        \r
        # Do This\r
        \r
        * Run
        the program several times to see how the starter code works.\r
        * Add at least
        three new different colored circles to your rainbow snake.\r
        * Use `randomNumber()`
        to make the rest of the snake's body move up and down like the first three.\r
        \r
        *Challenge:
        Can you make size of some of the circles random, too?*
      CSD U3 Random rainbow snake_2018_markdown_instruction: |-
        <img src="https://images.code.org/6af643f712b042e5b076f06cc2f902e2-image-1520404404645.32.58
        PM.png" style="float:right;height:150px">\r
        \r
        # Rainbow Snake\r
        \r
        This
        program draws a very rare breed of rainbow snake. To make the snake draw differently
        every time you'll need to use random numbers.\r
        \r
        # Do This\r
        \r
        * Run
        the program several times to see how the starter code works.\r
        * Add at least
        three new different colored circles to your rainbow snake.\r
        * Use `randomNumber()`
        to make the rest of the snake's body move up and down like the first three.\r
        \r
        *Challenge:
        Can you make size of some of the circles random, too?*
      CSD U3 Random random ellipse-2018_markdown_instruction: |-
        # Random Numbers\r
        \r
        `randomNumber()`
        chooses a random number between a minimum and maximum value. You can use this
        code instead of writing in the specific number.  If you make your drawings
        with random numbers it will look a little bit different every time you run
        your program.\r
        \r
        # Do This\r
        \r
        * Run the program several times to see
        how it works.\r
        * Change the numbers inside `randomNumber` and run the code
        again a few times to see what changes.
      CSD U3 Random random ellipse_markdown_instruction: |-
        # Random Numbers\r
        \r
        `randomNumber()`
        chooses a random number between a minimum and maximum value. You can use this
        code instead of writing in the specific number.  If you make your drawings
        with random numbers it will look a little bit different every time you run
        your program.\r
        \r
        # Do This\r
        \r
        * Run the program several times to see
        how it works.\r
        * Change the numbers inside `randomNumber` and run the code
        again a few times to see what changes.
      CSD U3 Random random ellipse2-2018_markdown_instruction: |-
        <img src="https://images.code.org/8306a9fd01470ac8582cf4374dde7033-image-1520403513967.17.40
        PM.png" style="float:right;height:150px">\r
        \r
        # Random Numbers\r
        \r
        Here's
        the same sun from last time.  Right now only the x-coordinate is random, but
        you can make the y-coordinate random, too.\r
        \r
        # Do This\r
        \r
        * Use `randomNumber()`
        for the ellipse's Y parameter so the circle is drawn in a random Y position,
        too.\r
        * As long as your circle is appearing at random X and Y positions,
        you can move on.
      CSD U3 Random random ellipse2_markdown_instruction: |-
        <img src="https://images.code.org/ff3be801c7e634d49584aac103df292a-image-1491334428729.33.18
        PM.png" style="float:right;height:150px">\r
        \r
        # Random Numbers\r
        \r
        Here's
        the same sun from last time.  Right now only the x-coordinate is random, but
        you can make the y-coordinate random, too.\r
        \r
        # Do This\r
        \r
        * Use `randomNumber()`
        for the ellipse's Y parameter so the circle is drawn in a random Y position,
        too.\r
        * As long as your circle is appearing at random X and Y positions,
        you can move on.
      CSD U3 Random random ellipse2_2018_markdown_instruction: |-
        <img src="https://images.code.org/8306a9fd01470ac8582cf4374dde7033-image-1520403513967.17.40
        PM.png" style="float:right;height:150px">\r
        \r
        # Random Numbers\r
        \r
        Here's
        the same sun from last time.  Right now only the x-coordinate is random, but
        you can make the y-coordinate random, too.\r
        \r
        # Do This\r
        \r
        * Use `randomNumber()`
        for the ellipse's Y parameter so the circle is drawn in a random Y position,
        too.\r
        * As long as your circle is appearing at random X and Y positions,
        you can move on.
      CSD U3 Random random ellipse_2018_markdown_instruction: |-
        # Random Numbers\r
        \r
        `randomNumber()`
        chooses a random number between a minimum and maximum value. You can use this
        code instead of writing in the specific number.  If you make your drawings
        with random numbers it will look a little bit different every time you run
        your program.\r
        \r
        # Do This\r
        \r
        * Run the program several times to see
        how it works.\r
        * Change the numbers inside `randomNumber` and run the code
        again a few times to see what changes.
      CSD U3 Scene Example-2018_markdown_instruction: |
        # Sprite Scenes\r
        \r
        By
        combining shapes, sprites, and text, you can create simple scenes, stories,
        or comics. While this example is fairly simple, you can combine as many sprites
        and shapes as you like to create scenes as complex or detailed as you like.\r
        \r
        ##
        Sketch It Out\r
        \r
        Before moving on, take a second to sketch out a scene
        that you'd like to make at the end of this lesson. Consider the simple shapes
        that you've used in the past, sprites for your characters, and any text that
        you'd like on the screen. Once you've sketched out an idea, you'll learn
        about `text` and how to compose a scene.\r
      CSD U3 Scene Example_markdown_instruction: |
        # Sprite Scenes\r
        \r
        By combining
        shapes, sprites, and a new block called `text`, you can create simple scenes,
        stories, or comics. While this example is fairly simple, you can combine as
        many sprites and shapes as you like to create scenes as complex or detailed
        as you like.\r
        \r
        ## Sketch It Out\r
        \r
        Before moving on, take a second
        to sketch out a scene that you'd like to make at the end of this lesson.
        Consider the simple shapes that you've used in the past, sprites for your
        characters, and any text that you'd like on the screen. Once you've sketched
        out an idea, you'll learn about `text` and how to compose a scene.\r
      CSD U3 Scene Example_2018_markdown_instruction: |
        # Sprite Scenes\r
        \r
        By
        combining shapes, sprites, and text, you can create simple scenes, stories,
        or comics. While this example is fairly simple, you can combine as many sprites
        and shapes as you like to create scenes as complex or detailed as you like.\r
        \r
        ##
        Sketch It Out\r
        \r
        Before moving on, take a second to sketch out a scene
        that you'd like to make at the end of this lesson. Consider the simple shapes
        that you've used in the past, sprites for your characters, and any text that
        you'd like on the screen. Once you've sketched out an idea, you'll learn
        about `text` and how to compose a scene.\r
      CSD U3 Simple Drawing - Animation 2_markdown_instruction: |-
        # Rays of Sunshine\r
        \r
        Let's
        add a little bit more animation to the scene. The `line()` block takes in
        two pairs of x,y coordinates and draws a line between them.\r
        \r
        Draw 5
        yellow lines that all start from the center of the sun and move out to a random
        point around the top half.\r
        \r
        # Do This\r
        \r
        * Create 5 lines, each
        of which should start at the center of the sun and go out to a random point.
        You can pick your own random ranges, but you might try:\r
          * `randomNumber(115,135),
        randomNumber(10,20)`\r
          * `randomNumber(145,165), randomNumber(20,30)`\r
          *
        `randomNumber(85, 105), randomNumber(20,30)`\r
          * `randomNumber(165,185),
        randomNumber(40,50)`\r
          * `randomNumber(65, 85 ), randomNumber(40,50)`\r
        *
        Don't forget to set the `strokeColor()` before you draw your lines and to
        reset to `noStroke()` afterwards.
      CSD U3 Simple Drawing - Animation_markdown_instruction: |-
        # Clouds in the Wind\r
        \r
        Now
        that our image is in the draw loop, let's make use of that feature to add
        a little bit of animation. We're going to make our clouds look as though
        they're shifting in the breeze by randomizing their position and size a little
        bit each time the `draw()` loop is run.\r
        \r
        # Do This\r
        \r
        * Replace
        the x input of each cloud ellipse with a call to `randomNumber`\r
          * `randomNumber`
        should vary the x position by + or - 5 pixels. So if your x position was 50,
        replace it with `randomNumber(45,55)`\r
        * Replace the width input of each
        cloud ellipse with a call to `randomNumber`\r
          * `randomNumber` should vary
        the width by + 5 pixels. So if your width was 50, replace it with `randomNumber(50,55)`\r
        *
        Change the **frame rate** to something slower (try 5 or 10 FPS)
      CSD U3 Simple Drawing - Background_markdown_instruction: |-
        # Draw()ing your
        street image\r
        \r
        Here's the street image you started working on in the
        last lesson. We're going to get it ready to add some animation.\r
        \r
        For
        the animation to work you'll need to wrap all of your current code in the
        `draw()` loop, adding a call to `background()` at the top of the loop.\r
        \r
        #
        Do This\r
        \r
        * Add a `draw()` block and move all of your current code inside
        it\r
        * Replace the rectangle that draws your background with a call to the
        `background()` block
      CSD U3 Simple Drawing - Personal Animation_markdown_instruction: |
        # Your Own
        Animation\r
        \r
        Here's the drawing you planned and started in the last lesson
        - let's animate it!\r
        \r
        # Do This\r
        \r
        * Move all of your code into
        a `draw()` loop\r
        * Use `randomNumber()` in the inputs of some of your shapes\r
        *
        Set the speed of your animation using the `World.frameRate` block\r
      CSD U3 Sprite Movement Left_markdown_instruction: |-
        <img src="https://images.code.org/9f9162cb94a02d9b3aba9b6067d0281a-image-1491862771496.gif"
        style="float: right; margin-left: 20px">\r
        \r
        # Moving to the Left\r
        \r
        If
        adding to a sprite's x coordinate makes it move to the right, how could you
        make it move to the left?\r
        \r
        # Do This\r
        \r
        Make your program animate
        like the image to the right. Update `fly.x` inside the draw loop so that in
        each frame the fly is drawn a little bit further to the left.\r
        \r
        _Tip:
        You can make your sprites move faster by adding or subtracting larger numbers.
        The fly in our example moves about twice as fast as the plane in the last
        level._
      CSD U3 Sprite Movement Left_2018_markdown_instruction: |-
        <img src="https://images.code.org/9f9162cb94a02d9b3aba9b6067d0281a-image-1491862771496.gif"
        style="float: right; margin-left: 20px">\r
        \r
        # Moving to the Left\r
        \r
        If
        adding to a sprite's x coordinate makes it move to the right, how could you
        make it move to the left?\r
        \r
        # Do This\r
        \r
        Make your program animate
        like the image to the right. Update `fly.x` inside the draw loop so that in
        each frame the fly is drawn a little bit further to the left.\r
        \r
        _Tip:
        You can make your sprites move faster by adding or subtracting larger numbers.
        The fly in our example moves about twice as fast as the plane in the last
        level._
      CSD U3 Sprite Movement Right_markdown_instruction: |
        <img src="https://images.code.org/629bc615a879f0f3dc9f290bea2358c8-image-1491861334164.gif"
        style="float: right; margin-left: 20px">\r
        \r
        # Sprite Movement\r
        \r
        Using
        the counter pattern, you can write programs that animate sprites smoothly.
        Adding to or removing from a sprite's `x` or `y` property in the draw loop
        makes your sprite move just a bit each time it is redrawn.\r
        \r
        # Do This\r
        \r
        Make
        your program animate like the image to the right. We've already added a line
        to update `plane.x` in the draw loop, but it needs to be finished.\r
      CSD U3 Sprite Movement Right_2018_markdown_instruction: |
        <img src="https://images.code.org/629bc615a879f0f3dc9f290bea2358c8-image-1491861334164.gif"
        style="float: right; margin-left: 20px">\r
        \r
        # Sprite Movement\r
        \r
        Using
        the counter pattern, you can write programs that animate sprites smoothly.
        Adding to or removing from a sprite's `x` or `y` property in the draw loop
        makes your sprite move just a bit each time it is redrawn.\r
        \r
        # Do This\r
        \r
        Make
        your program animate like the image to the right. We've already added a line
        to update `plane.x` in the draw loop, but it needs to be finished.\r
      CSD U3 Sprites Template race_markdown_instruction: |
        # Putting it All Together\r
        \r
        Let's
        put all of this together in a fun way. We're going to make three sprites
        "race" across the screen by combining the counter pattern, random numbers,
        and sprite properties.\r
        \r
        # Do This\r
        \r
        <img src="https://images.code.org/2f9214a801a60af226fa604a9b6533f5-image-1466008001402.26.15
        AM.png" style="float:right; width:200px">\r
        \r
        To begin with make three
        different sprites and put them in a row on the left side of your screen.\r
        \r
        *
        **Create three sprites** and give them labels\r
        * **Add code to the "Drawing"
        section of the draw loop that draws the background and your sprites**\r
        *
        Your animation should look like the example at the right.\r
        \r
      CSD U3 Sprites animating with sprites_markdown_instruction: |-
        # Animating with
        Sprites\r
        \r
        **Sprite properties can be used in the counter pattern too**.\r
        \r
        \t//
        Counter Pattern with variables\r
            x = x + 1;\r
            \r
            // Counter
        Pattern with sprite properties\r
            mySprite.x = mySprite.x + 1\r
        \r
        If
        you call ![](https://images.code.org/16810be94cc61ea828e0acce5b642468-image-1466009389700.19.16
        AM.png) inside the draw loop then you can use this counter pattern to animate
        sprites as well.\r
        \r
        # Do This\r
        \r
        <img src="https://images.code.org/a34d5c36c98c2d61ce341be59cbcf315-image-1466534169200.gif"
        style="float:right; width:200px">\r
        \r
        \r
        This program creates 2 sprites
        and then animates one of them to move across the screen using the counter
        pattern.\r
        \r
        * Inside the draw loop **add code that uses the counter pattern
        to make the orange sprite move across the screen**.\r
        * Hint: How can you
        use the counter pattern here? Look at the code for the redSprite if you need
        help.\r
        * Your animation should look like the example at the right.
      CSD U3 Sprites anitab 1_markdown_instruction: |-
        # Images\r
        \r
        Over on the
        **Animations Tab**, you'll see three images that have been loaded for you.
        You can get to the animations tab by clicking the **Animation** button above
        the display area.\r
        \r
        <img src="https://images.code.org/f694a37bbadcf0533e7b19d8c0f5309b-image-1465580394090.35.11
        PM.png" style="width:300px;float:right">\r
        \r
        Once you have created a
        sprite, you can **use the `sprite.setAnimation()` command to change the look
        of your sprite from a rectangle to a picture.** All the images you have loaded
        in the Animation Tab show up in the `sprite.setAnimation()` dropdown.  The
        alien is set up for you as an example.\r
        \r
        # Do This\r
        Change the sprite
        to your favorite image from the animations tab.\r
        \r
        * A sprite that is
        set to an image has already been created for you.\r
        * Run the code to see
        how it works.\r
        * Change the input to the `setAnimation` command to change
        the look of the sprite.\r
        * Try out all the different images.
      CSD U3 Sprites anitab 1_2018_markdown_instruction: |-
        # Images\r
        \r
        Over on
        the **Animations Tab**, you'll see three images that have been loaded for
        you. You can get to the animations tab by clicking the **Animation** button
        above the display area.\r
        \r
        <img src="https://images.code.org/f694a37bbadcf0533e7b19d8c0f5309b-image-1465580394090.35.11
        PM.png" style="width:300px;float:right">\r
        \r
        Once you have created a
        sprite, you can **use the `sprite.setAnimation()` command to change the look
        of your sprite from a rectangle to a picture.** All the images you have loaded
        in the Animation Tab show up in the `sprite.setAnimation()` dropdown.  The
        alien is set up for you as an example.\r
        \r
        # Do This\r
        Change the sprite
        to your favorite image from the animations tab.\r
        \r
        * A sprite that is
        set to an image has already been created for you.\r
        * Run the code to see
        how it works.\r
        * Change the input to the `setAnimation` command to change
        the look of the sprite.\r
        * Try out all the different images.
      CSD U3 Sprites anitab 2_markdown_instruction: |-
        # Upload your own image\r
        \r
        You
        can also use the Animation tab to upload or draw your own image.\r
        \r
        #
        Do This\r
        You are going to make a flying kite. You can search the web for
        an image or create a new animation from scratch by drawing your own kite.\r
        \r
        *
        Download your kite image. Images with transparent backgrounds work best.\r
        *
        Open the animations tab.\r
        * Click <img src="https://images.code.org/346f6657dba57b0c3bd5deb534f76b69-image-1466194432449.13.05
        PM.png" style="width:50px"> and then <img src="https://images.code.org/60c0371b45b29f10a3c8530db9154428-image-1466194434329.13.16
        PM.png" style="width:50px"> to upload an image.\r
        * Select the file from
        your computer.\r
        * Rename your image so it is easy to remember. To rename
        it click the text below the image.\r
        * Back in code mode, use `sprite.setAnimation()`
        to make your `kite` sprite show your new animation.\r
        \r
        Don't worry if
        your kite image is too big! You'll learn how to fix that in the next level.
      CSD U3 Sprites anitab 2_2018_markdown_instruction: |-
        # Upload your own image\r
        \r
        You
        can also use the Animation tab to upload or draw your own image.\r
        \r
        #
        Do This\r
        You are going to make a flying kite. You can search the web for
        an image or create a new animation from scratch by drawing your own kite.\r
        \r
        *
        Download your kite image. Images with transparent backgrounds work best.\r
        *
        Open the animations tab.\r
        * Click <img src="https://images.code.org/346f6657dba57b0c3bd5deb534f76b69-image-1466194432449.13.05
        PM.png" style="width:50px"> and then <img src="https://images.code.org/60c0371b45b29f10a3c8530db9154428-image-1466194434329.13.16
        PM.png" style="width:50px"> to upload an image.\r
        * Select the file from
        your computer.\r
        * Rename your image so it is easy to remember. To rename
        it click the text below the image.\r
        * Back in code mode, use `sprite.setAnimation()`
        to make your `kite` sprite show your new animation.\r
        \r
        Don't worry if
        your kite image is too big! You'll learn how to fix that in the next level.
      CSD U3 Sprites anitab 3_markdown_instruction: |-
        # Resizing with Scale\r
        \r
        In
        the _Sprites_ drawer of the toolbox, you'll see a new block called `sprite.scale`.
        It lets you change the size of a sprite in relation to its original size.
        `sprite.scale = 1` is the normal size. `sprite.scale = 0.5` makes your sprite
        half as big, while `sprite.scale = 2` makes it twice as big.\r
        \r
        # Do This\r
        \r
        The
        program should already include your newly uploaded image, but it's probably
        not the _perfect_ size. Use `sprite.scale` to change the size of your `kite`
        sprite.\r
        \r
        _Hint: the order of your code matters! You need to add `sprite.scale`
        **after** you've created the sprite, but **before** you draw the sprite with
        `drawSprites()`. For clarity, try to keep all of your sprite code together
        at the top of your program._
      CSD U3 Sprites anitab 3_2018_markdown_instruction: |-
        # Resizing with Scale\r
        \r
        In
        the _Sprites_ drawer of the toolbox, you'll see a new block called `sprite.scale`.
        It lets you change the size of a sprite in relation to its original size.
        `sprite.scale = 1` is the normal size. `sprite.scale = 0.5` makes your sprite
        half as big, while `sprite.scale = 2` makes it twice as big.\r
        \r
        # Do This\r
        \r
        The
        program should already include your newly uploaded image, but it's probably
        not the _perfect_ size. Use `sprite.scale` to change the size of your `kite`
        sprite.\r
        \r
        _Hint: the order of your code matters! You need to add `sprite.scale`
        **after** you've created the sprite, but **before** you draw the sprite with
        `drawSprites()`. For clarity, try to keep all of your sprite code together
        at the top of your program._
      CSD U3 Sprites anitab 4_markdown_instruction: |-
        # Resizing with Scale\r
        \r
        In
        the _Sprites_ drawer of the toolbox you'll see a new block called `sprite.scale`.
        This command let's you change the size of a sprite in relation to its original
        size. `sprite.scale = 1` is the normal size. `sprite.scale = 0.5` would make
        your sprite half as big, while `sprite.scale = 2` would make it twice as big.\r
        \r
        #
        Do This\r
        \r
        At this point the program should include your newly uploaded
        image, but it's probably not the _perfect_ size. Add a `sprite.scale` block
        to change the size of your `kite` sprite.\r
        \r
        _Hint: the order of your
        code matters! You need to add `sprite.scale` **after** you've created the
        sprite, but **before** you draw the sprite with `drawSprites()`. For clarity,
        try to keep all of your sprite code together at the top of your program._
      CSD U3 Sprites createSprite params_markdown_instruction: |-
        # createSprite()
        with parameters\r
        \r
        When you create a variable you often want to set its
        value right away. That's why the command `var x =` exists, to let you perform
        both commands at once.\r
        \r
        It's very common to want to set the x and y
        of your sprite in a single command. To help, the createSprite command accepts
        2 parameters or values that set these properties right away. Instead of writing
        \r
        \r
          \tvar mySprite = createSprite();\r
          \tmySprite.x = 100;\r
          \tmySprite.y
        = 200; \r
        \r
        you can just write the command\r
        \r
        \tvar mySprite = createSprite(100,
        200);\r
        \r
        This code does exactly the same thing, but it's much easier
        to write. \r
        \r
        # Do This\r
        \r
        <img src="https://images.code.org/2f9214a801a60af226fa604a9b6533f5-image-1466008001402.26.15
        AM.png" style="float:right; width:200px">\r
        \r
        This is your code from
        earlier. Note that a new, larger version of `createSprite` is now available.\r
        \r
        <img
        src="https://images.code.org/4a2e6bf1ffbd9782ce637b3e997004e3-image-1468337207497.25.20
        AM.png" style=" width:350px">\r
        \r
        * Update your code to use this new
        version of `createSprite`\r
        * Your program should only be **9 total lines**\r
        *
        You're still trying to make your image look as close as possible to the image
        at the right.
      CSD U3 Sprites debug background_markdown_instruction: |
        # Debug: Ordering in
        the Draw Loop\r
        \r
        As you start animating with sprites you'll have more
        complex code in your draw loop. It's important to stay organized if you don't
        want your code to be confusing.\r
        \r
        Here's the way you should structure
        your draw loop when animating with sprites:\r
        \r
        \tfunction draw(){\r
            \t//
        Draw Background\r
                \r
            \t// Update Sprite Properties\r
                \r
                //
        Draw Animations\r
             \r
            }\r
            \r
        This strategy will work for most
        cases but not all.\r
        \r
        # Do This\r
        \r
        <img src="https://images.code.org/df08c0bb7290e9d255f1cc51be35954d-image-1472665837101.gif"
        style="float:right; width:200px">\r
        \r
        This program is supposed to animate
        a sprite moving across the screen, but **there's a problem that's preventing
        it from running properly**.\r
        \r
        * **Run the program** to see how it works.\r
        *
        **Debug the program** to find the error that prevents it from working properly.\r
        *
        Your animation should look like the example at the right.\r
        * Hint: Order
        matters a lot when drawing.\r
      CSD U3 Sprites debug dot notation_markdown_instruction: |-
        # Debugging: Dot Notation\r
        \r
        **Dot
        Notation:** Sprites all have the same properties, which is really useful.
        It means that once you know the label of a sprite, you know the labels of
        its properties. All you need to do is combine the name of your sprite and
        the name of your property with a period or "dot" in between. This is also
        referred to as **dot notation**. For example, a sprite called `bob` will have
        the properties `bob.x`, `bob.y`, and so on.\r
        \r
        When using dot notation
        it's important that **you spell the label of your sprite and your property
        correctly.** Just like with variables, keep an eye out for:\r
        \r
        Rule |
        Example\r
        ---|---\r
        Correct capitalization|`sprite.x` is not `sprite.X`\r
        Correct
        spelling|`sprite.y` is not `sprte.y`\r
        Whether the label you're trying to
        use actually exists|`sprite.xlocation` does not exist\r
        The sprite's label
        comes before the property's label|`x.sprite` will not work\r
        \r
        # Do This\r
        \r
        <img
        src="https://images.code.org/5c6019e343bc58650c45f66c3e3c9bc5-image-1466089712070.08.20
        AM.png" style="float:right; width:200px">\r
        \r
        This program tries to
        use dot notation to change the properties of two sprites. Unfortunately, errors
        are preventing the program from running correctly.\r
        \r
        * **Use dot notation
        correctly** to fix the errors in this program\r
        * When your program works
        correctly, it should draw the image to the right
      CSD U3 Sprites debug watchers_markdown_instruction: |-
        # Debug: Watchers\r
        \r
        You
        can place watchers on a sprite property just like you would a regular variable.\r
        \r
        ![](https://images.code.org/291b83de4b7d540017df382944474c16-image-1466017776084.09.27
        PM.png)\r
        \r
        # Do This\r
        \r
        <img src="https://images.code.org/1a1a724338e983c2124b0e97d43469a2-image-1466024475859.gif"
        style="float:right; width:200px">\r
        \r
        This program is supposed to animate
        a sprite moving across the screen but **there's a problem that's preventing
        it from running properly**.\r
        \r
        * **Run the program** to see how it works.\r
        *
        **Add a watcher** if you like to help you check individual properties.\r
        *
        **Debug the program** to find the error that prevents it from working properly.\r
        *
        Your animation should look like the example at the right.\r
        * Hint: Read
        the code carefully. Is there a logical error?
      CSD U3 Sprites intro debug_markdown_instruction: |-
        <img src="https://images.code.org/63207a624d751aacb376db18cdf09eec-image-1491255841823.png"
        style="width: 150px; float: right; margin-left: 20px; border: 1px solid #f2f2f2;">\r
        #
        Debug\r
        \r
        This program should create two new sprites, one on the left of
        the screen and one on the right, but it's only drawing one. **You don't
        need to add any code**, just rearrange the code already present to make sure
        that both sprites show up like the picture on the right.
      CSD U3 Sprites intro debug_2018_markdown_instruction: |-
        <img src="https://images.code.org/63207a624d751aacb376db18cdf09eec-image-1491255841823.png"
        style="width: 150px; float: right; margin-left: 20px; border: 1px solid #f2f2f2;">\r
        #
        Debug\r
        \r
        This program should create two new sprites, one on the left of
        the screen and one on the right, but it's only drawing one. **You don't
        need to add any code**, just rearrange the code already present to make sure
        that both sprites show up like the picture on the right.
      CSD U3 Sprites intro sprites_markdown_instruction: |-
        # Sprites\r
        \r
        **Creating
        Sprites:**  <img src = "https://images.code.org/92e06cddc5355dc37aa2c6a033793dd0-image-1466027030772.43.41
        PM.png" style = "height:30px">  creates a new sprite and assigns it to
        a variable.  The default name is `sprite`, so you'll want to change it to
        something more meaningful.\r
        \r
        **Drawing Sprites:** Sprites only appear
        on the screen when you draw them there. Calling ![](https://images.code.org/82a18afda6463323529acaa3dc326d55-image-1466004008638.19.16
        AM.png) will draw all of your created sprites on the screen.\r
        \r
        <img src="https://images.code.org/fe5905d6b89c14dca525865f4e579104-image-1491254588895.png"
        style="width: 150px; float: right; border: 1px solid #f2f2f2; margin-left:
        20px">\r
        \r
        # Do This\r
        \r
        This program includes comments that let you
        know where to place code but otherwise is blank. Your program should look
        like the image on the right.\r
        \r
        * Add `var sprite = createSprite(200,
        200)` under the comment `Creating Sprites`.\r
        \t* You can ignore the yellow
        triangle warning for now.  It's just telling you that you haven't used your
        sprite yet.\r
        * Add `drawSprites()` under the comment `Drawing`.\r
        * **Run
        the code** to draw your first sprite on the screen.\r
        \r
        _Hint: Sprites
        are drawn from their center, which means that center of the square (not the
        top left corner) is at (200, 200)._
      CSD U3 Sprites intro sprites_2018_markdown_instruction: |-
        # Sprites\r
        \r
        **Creating
        Sprites:**  <img src = "https://images.code.org/92e06cddc5355dc37aa2c6a033793dd0-image-1466027030772.43.41
        PM.png" style = "height:30px">  creates a new sprite and assigns it to
        a variable.  The default name is `sprite`, so you'll want to change it to
        something more meaningful.\r
        \r
        **Drawing Sprites:** Sprites only appear
        on the screen when you draw them there. Calling ![](https://images.code.org/82a18afda6463323529acaa3dc326d55-image-1466004008638.19.16
        AM.png) will draw all of your created sprites on the screen.\r
        \r
        <img src="https://images.code.org/fe5905d6b89c14dca525865f4e579104-image-1491254588895.png"
        style="width: 150px; float: right; border: 1px solid #f2f2f2; margin-left:
        20px">\r
        \r
        # Do This\r
        \r
        This program includes comments that let you
        know where to place code but otherwise is blank. Your program should look
        like the image on the right.\r
        \r
        * Add `var sprite = createSprite(200,
        200)` under the comment `Creating Sprites`.\r
        \t* You can ignore the yellow
        triangle warning for now.  It's just telling you that you haven't used your
        sprite yet.\r
        * Add `drawSprites()` under the comment `Drawing`.\r
        * **Run
        the code** to draw your first sprite on the screen.\r
        \r
        _Hint: Sprites
        are drawn from their center, which means that center of the square (not the
        top left corner) is at (200, 200)._
      CSD U3 Sprites make template_markdown_instruction: |-
        # Make Your Own Sprite\r
        \r
        You
        now know how to create a sprite, set its properties with dot notation, and
        draw sprites using `drawSprites`. It's time to put all these pieces together
        on your own.\r
        \r
        # Do This\r
        \r
        <img src="https://images.code.org/2f9214a801a60af226fa604a9b6533f5-image-1466008001402.26.15
        AM.png" style="float:right; width:200px">\r
        \r
        This program creates a
        red sprite in the bottom right hand corner of the screen.\r
        \r
        * **Write
        code** that creates a new separate sprite in the top left corner of the screen.\r
        *
        Be careful with your dot notation, and use the code for the first sprite as
        a guide.\r
        * Try to make your image look as close as possible to the image
        at the right.
      CSD U3 Sprites make your own sprite_markdown_instruction: |-
        # Make Your Own
        Sprite\r
        \r
        You now know how to create a sprite, set its properties with
        dot notation, and draw sprites using `drawSprites`. It's time to put all
        these pieces together on your own.\r
        \r
        # Do This\r
        \r
        <img src="https://images.code.org/2f9214a801a60af226fa604a9b6533f5-image-1466008001402.26.15
        AM.png" style="float:right; width:200px">\r
        \r
        This program creates a
        red sprite in the bottom right hand corner of the screen.\r
        \r
        * **Write
        code** that creates a new separate sprite in the top left corner of the screen.\r
        *
        Be careful with your dot notation, and use the code for the first sprite as
        a guide.\r
        * Try to make your image look as close as possible to the image
        at the right.
      CSD U3 Sprites motivation_markdown_instruction: |-
        # How Many Counter Variables?\r
        \r
        You
        can use counter variables (`x = x + 1` , `x = x - 1` , `x = x + 0.5`, etc.)
        to animate a scene. What happens when scenes start to get larger and more
        complicated? \r
        \r
        Watch this animation. With a partner: \r
        \r
        * Decide
        how many counter variables you would need to create this scene\r
        * Decide
        what you would name your counter variables\r
        * **Draw a Labels-Values-Connectors**
        diagram of your variables at the first frame of this scene. Don't worry about
        getting the values exactly correct.\r
        * Share your answer with another group
        **and be ready to share your ideas with the class**
      CSD U3 Sprites race create sprites_markdown_instruction: |-
        # Putting it All
        Together\r
        \r
        Let's put all of this together in a fun way. You're going
        to make three sprites "race" across the screen by combining the counter
        pattern, random numbers, and sprite properties.\r
        \r
        # Do This\r
        \r
        <img
        src="https://images.code.org/1ee52eac731176211c286023c87c166a-image-1466021038288.03.29
        PM.png" style="float:right; width:200px">\r
        \r
        To begin with, make three
        different sprites and put them in a row on the left side of your screen.\r
        \r
        *
        **Create three sprites** and give them labels.\r
        * **Add code to the "Draw
        Background" section of the draw loop that draws the background**.\r
        * **Add
        code to the "Draw Animations" section of the draw loop that draws your sprites**.\r
        *
        Your picture should look like the example at the right.
      CSD U3 Sprites race finish_markdown_instruction: |-
        # Make It Your Own\r
        \r
        Keep
        adding to this project and make it your own. Do you want to add a finish line?
        Do you want to make one racer a little bit faster than the others? Maybe you
        could add some text and give your race a name. There's a ton of ways you
        can make this animation a lot more interesting and exciting!\r
        \r
        <img src
        = "https://images.code.org/387aec833f243632735c97b56ae6e64e-image-1466022313176.gif"
        style="float:right; width:200px">\r
        # Do This\r
        \r
        * **Keep adding your
        own touches to your race** using what you already know about drawing, sprites,
        and animation.
      CSD U3 Sprites race movement_markdown_instruction: |-
        # Get Those Sprites Moving!\r
        \r
        Now
        that you have three sprites on the screen, it's time to make them "race"
        across the screen. For now, the race will just be a tie, so focus mainly on
        **making sure your code is organized** and that **you use sprite properties
        with the counter pattern correctly**.\r
        \r
        # Do This\r
        \r
        <img src="https://images.code.org/a935615480098eb0a8e7723d87b2308c-image-1466021329937.gif"
        style="float:right; width:200px">\r
        \r
        * **Add code to the "Update Properties"
        section** that makes the sprites move across the screen together.\r
        * Your
        animation should look like the example at the right.
      CSD U3 Sprites race random_markdown_instruction: |-
        # Random Movement\r
        \r
        Right
        now your race isn't very interesting. Let's make one small change to make
        it a lot more exciting. Instead of your sprites moving the same amount forward
        every frame, **they will now move a random amount**. This will make use of
        what we'll call the **random counter pattern**. Here's what the code might
        look like.\r
        \r
        \t// Random Counter Pattern\r
            mySprite.x = mySprite.x
        + randomNumber(0,2);\r
            \r
        Instead of adding the same amount every time
        it will move forward by some random amount between 0 and 2.\r
        \r
        # Do This\r
        \r
        <img
        src="https://images.code.org/accadb669e88a7c2aff8a29b6305da55-image-1466021491106.gif"
        style="float:right; width:200px">\r
        \r
        * **Use the random counter pattern**
        to make your sprites move forward by a random amount in each frame.\r
        * **Run
        the program** to make sure your sprites now move a random amount. Is your
        race predictable anymore?\r
        * Your animation should look similar to the example
        at the right.
      CSD U3 Sprites scene challenge_markdown_instruction: |-
        # Challenge: Extend your
        scene\r
        \r
        _Check with your teacher before starting this challenge._\r
        \r
        Now
        that you've finished your scene, consider adding to it or creating another.
      CSD U3 Sprites scene challenge_2018_markdown_instruction: |-
        # Challenge: Extend
        your scene\r
        \r
        _Check with your teacher before starting this challenge._\r
        \r
        Now
        that you've finished your scene, consider adding to it or creating another.
      CSD U3 Sprites scene drawing_markdown_instruction: |-
        # Create Your Scene - Drawing\r
        \r
        You're
        going to start creating a scene of your own. If you haven't already, take
        a minute to sketch out a picture of your scene (consider using graph paper).
        Once you have an idea and plan for your scene, start drawing the background.\r
        \r
        #
        Do This\r
        \r
        * Use a `background()` command to fill the screen with a color.\r
        *
        Add any necessary shape commands to draw the non-sprite elements of your scene.
      CSD U3 Sprites scene drawing_2018_markdown_instruction: |-
        # Create Your Scene
        - Drawing\r
        \r
        You're going to start creating a scene of your own. If you
        haven't already, take a minute to sketch out a picture of your scene (consider
        using graph paper). Once you have an idea and plan for your scene, start drawing
        the background.\r
        \r
        # Do This\r
        \r
        * Use a `background()` command to
        fill the screen with a color.\r
        * Add any necessary shape commands to draw
        the non-sprite elements of your scene.
      CSD U3 Sprites scene sprites_markdown_instruction: |-
        # Create Your Scene - Sprites\r
        \r
        With
        your background in place, it's time to add your sprites.\r
        # Do This\r
        \r
        *
        Add or create all of your sprite images in the Animation Tab.\r
        * Create
        a variable for each sprite at the top of your program and use `setAnimation()`
        to assign the images you created in the Animation Tab.\r
        * Call `drawSprites()`
        once at the end of your program.\r
        \r
        _Hint: You probably want to call `drawSprites()`
        at the very end of your program so the sprites are on top of your background,
        but for some designs you may want to call `drawSprites()` earlier so that
        your sprites are on top of some shapes but below others._
      CSD U3 Sprites scene sprites_2018_markdown_instruction: |-
        # Create Your Scene
        - Sprites\r
        \r
        With your background in place, it's time to add your sprites.\r
        #
        Do This\r
        \r
        * Add or create all of your sprite images in the Animation
        Tab.\r
        * Create a variable for each sprite at the top of your program and
        use `setAnimation()` to assign the images you created in the Animation Tab.\r
        *
        Call `drawSprites()` once at the end of your program.\r
        \r
        _Hint: You probably
        want to call `drawSprites()` at the very end of your program so the sprites
        are on top of your background, but for some designs you may want to call `drawSprites()`
        earlier so that your sprites are on top of some shapes but below others._
      CSD U3 Sprites scene text_markdown_instruction: |-
        # Create Your Scene - Text\r
        \r
        The
        final piece of your scene is to add text.\r
        \r
        # Do This\r
        \r
        * Add a
        `text()` command for each separate line of text.\r
        * If necessary, use `fill()`
        and `textSize()` to change the appearance of your text.\r
        \r
        _Hint: Most
        scenes have the text on top of everything else, which would require your `text()`
        commands to be the last lines in your program. If, however, you want the text
        layered in with other elements, you might consider changing the order._
      CSD U3 Sprites scene text_2018_markdown_instruction: |-
        # Create Your Scene -
        Text\r
        \r
        The final piece of your scene is to add text.\r
        \r
        # Do This\r
        \r
        *
        Add a `text()` command for each separate line of text.\r
        * If necessary,
        use `fill()` and `textSize()` to change the appearance of your text.\r
        \r
        _Hint:
        Most scenes have the text on top of everything else, which would require your
        `text()` commands to be the last lines in your program. If, however, you want
        the text layered in with other elements, you might consider changing the order._
      CSD U3 Sprites setting properties_markdown_instruction: |-
        # Properties\r
        \r
        <img
        src="https://images.code.org/9567c9df55163104ff91df0920457ad3-image-1466047307713.21.28
        PM.png" style="float:right">\r
        \r
        **Properties:** When you create a sprite
        it will automatically be given many special variables called properties. Properties
        keep track of information about the sprite, which is used when you draw it
        on the screen. For example, these two properties keep track of a sprite's
        x and y position on the screen.\r
        \r
        **Changing Properties:** Properties
        are just variables, so you can change their values using `=` just like any
        other variable. Here's an example of how you might change the `x` property
        of a sprite called `myFavoriteSprite`.\r
        \r
        ![](https://images.code.org/6976d707cba95e92369831729cdb7435-image-1466085767357.02.35
        AM.png)\r
        \r
        <img src="https://images.code.org/2743e55cef5da23bf61db1556c88f174-image-1466049906667.04.41
        PM.png" style="float:right;width:150px">\r
        \r
        # Do This\r
        \r
        This program
        creates a new sprite, gives it a label, and then sets its `x` and `y` properties.\r
        \r
        *
        **Read the code**. Notice that the label given to the sprite is used in the
        sprite's property.\r
        * **Change the values given to the `x` and `y` properties**
        to move the sprite to the bottom right corner of the screen.
      CSD U3 Sprites shapeColor_markdown_instruction: |-
        # shapeColor\r
        \r
        **shapeColor:**
        Another useful property is ![](https://images.code.org/538b61640803ec3b333d7cb2d9a162f5-image-1466050497196.14.46
        PM.png) which can be used to change the color of the sprite. It can be assigned
        values in different ways. For example, you could use the name of a color\r
        \r
        <img
        src="https://images.code.org/e5ffaee2a40c1690958b5c35a1d74719-image-1466086033266.06.45
        AM.png" style="height:30px">\r
        \r
        or you can use the rgb block\r
        \r
        <img
        src="https://images.code.org/670af2867af02830979ff95356ba87d6-image-1488480027884.39.53
        PM.png" style="height:30px">\r
        \r
        To make it easier to program with blocks,
        **when you drag a sprite property onto its own line it will automatically
        be placed inside an "=" block.**\r
        \r
        <img src="https://images.code.org/9790f3285269e9cf909fb820679a472e-image-1466091972429.46.00
        AM.png" style="float:right;width:150px">\r
        \r
        # Do This\r
        \r
        This program
        creates two sprites and places them on the screen. Currently they are still
        gray.\r
        \r
        * Beneath the "Setting Properties" comment add code to **set
        the shapeColor of these two sprites**\r
        \t* Make sure you use dot notation
        correctly. Use the code already written as a guide.\r
            * Try assigning
        one sprite a **named color** and another sprite a color using the **rgb block**.\r
        *
        Your finished work should look something like the image to the right.
      CSD U3 Sprites sprites vs rects_markdown_instruction: |-
        # Sprites vs. Rectangles\r
        \r
        Sprites
        may seem a lot like fancy rectangles right now. In time you'll see that sprites
        are **much more powerful**. But for now, there's one key difference you need
        to know about.\r
        \r
        Sprites have an `x` and a `y` location just like a rectangle.
        The key difference is that **a sprite's `x` and `y` are in the middle of
        the sprite, not the top left corner**. \r
        \r
        \r
        # Do This\r
        \r
        <img src="https://images.code.org/b1b38266c674e43687148a1ec4fd8e82-image-1466007512332.17.59
        AM.png" style="float:right; width:200px">\r
        \r
        This program creates a
        red sprite and a green rectangle that are the same size and have the same
        `x` and `y`. **The sprite does not cover the rectangle since its `x` and `y`
        are at its center**.\r
        \r
        * Change the `x` and `y` properties of the sprite
        so that it entirely covers the green rectangle.\r
        * When your program works
        correctly, it should draw the image to the right.
      CSD U3 Sprites text debug-2018_markdown_instruction: |-
        <img src="https://images.code.org/a313a455ef7033e840dfb21cb15cbb30-image-1491277088617.png"
        style="float: right; width: 200px; margin-left: 20px;">\r
        # Debug\r
        \r
        This
        scene has all the right code, but it's not in the right order. The scene
        should look like the image to the right.  Can you reorder the blocks so that
        each part of the scene is drawn in the correct order?
      CSD U3 Sprites text debug_markdown_instruction: |-
        <img src="https://images.code.org/a313a455ef7033e840dfb21cb15cbb30-image-1491277088617.png"
        style="float: right; width: 200px; margin-left: 20px;">\r
        # Debug\r
        \r
        This
        scene has all the right code, but it's not in the right order. The scene
        should look like the image to the right.  Can you reorder the blocks so that
        each part of the scene is drawn in the correct order?
      CSD U3 Sprites text debug_2018_markdown_instruction: |-
        <img src="https://images.code.org/a313a455ef7033e840dfb21cb15cbb30-image-1491277088617.png"
        style="float: right; width: 200px; margin-left: 20px;">\r
        # Debug\r
        \r
        This
        scene has all the right code, but it's not in the right order. The scene
        should look like the image to the right.  Can you reorder the blocks so that
        each part of the scene is drawn in the correct order?
      CSD U3 Sprites text_markdown_instruction: |-
        # Adding Text\r
        \r
        You can put
        text anywhere you'd like on the screen using `text`. Change the displayed
        text in the provided code, then add a second `text` to write in a different
        part of the screen.\r
        \r
        _Tip: The default text size is pretty small, but
        you can use the `textSize` block to change that. You can also use `fill` to
        change the color of your text._
      CSD U3 Sprites text_2018_markdown_instruction: |-
        # Adding Text\r
        \r
        You can
        put text anywhere you'd like on the screen using `text`. Change the displayed
        text in the provided code, then add a second `text` to write in a different
        part of the screen.\r
        \r
        _Tip: The default text size is pretty small, but
        you can use the `textSize` block to change that. You can also use `fill` to
        change the color of your text._
      CSD U3 Sprites width and height_markdown_instruction: |-
        # Setting Properties\r
        \r
        You
        are going to start programming with **sprites**. A sprite is made up of many
        pieces of information called **properties**. The ![](https://images.code.org/82a18afda6463323529acaa3dc326d55-image-1466004008638.19.16
        AM.png) command can be called whenever you like. It uses the properties of
        your sprites to draw them all at once.\r
        \r
        Sprites have **lots and lots
        of properties** but to get started let's just look at three.\r
        \r
        ![](https://images.code.org/4d0f35bc60aa9d1c80e6dda4db16abc4-image-1466004005360.19.30
        AM.png)\r
        \r
        <img src="https://images.code.org/cb14a5f6add86bf3c0bcf12901366794-image-1466004148640.22.16
        AM.png" style="float:right; width:200px">\r
        # Do This\r
        \r
        This program
        creates a sprite and gives it the label `mySprite`. Then it sets the properties
        `shapeColor`, `x`, and `y` of the sprite. When `drawSprites` is called, this
        information is used to draw the sprite in the correct location and color.\r
        \r
        *
        **Change the values given to each property** so that:\r
        \t* The sprite is
        now in the bottom right corner of the screen\r
            * The sprite is "orange"
        rather than "red"
      CSD U3 Sprites width height_markdown_instruction: |-
        # Width and Height\r
        \r
        When
        you create a sprite, it is automatically set up with all its properties having
        default values. If you know the names of these properties, you can use dot
        notation to change them. This will change the way your sprite looks when you
        draw it.\r
        \r
        Here are two new properties:\r
        \r
        ![](https://images.code.org/158421dbb4f9640ee852d994d2b4a7d6-image-1466006293357.40.26
        AM.png)\r
        \r
        By default each sprite starts with a width and height of 100.\r
        \r
        #
        Do This\r
        \r
        This program creates a sprite and sets its `x`, `y`, and `shapeColor`
        properties.\r
        \r
        * Use the new `width` and `height` properties to make the
        sprite fill up most of the screen.\r
        * Make sure you're using dot notation
        correctly.\r
        * **Note:** If you drag the property block onto a new line it
        will change to include the `=` command automatically.\r
        \r
        ![](https://images.code.org/77d0a16f19a2a7b2c2f1f6b88cda17b3-image-1466006474149.41.53
        AM.png)
      CSD U3 UP_ARROW-2018_markdown_instruction: |-
        # Moving Sprites\r
        \r
        You can
        change your sprite's position based on key presses in the same way you changed
        its animations.\r
        \r
        # Do This\r
        \r
        * Add an `if` statement inside your
        draw loop.\r
        * Check whether the right arrow key has been pressed down.\r
        *
        Add code inside the conditional to move the sprite right if the right arrow
        is down.\r
        \r
        _Do you need to change sprite's x or y property to move it
        right?_
      CSD U3 UP_ARROW_markdown_instruction: |
        # Moving Sprites\r
        \r
        You can change
        your sprite's position based on key presses in the same way you changed its
        animations.\r
        \r
        # Do This\r
        \r
        You have been provided with the start
        of a bug sprite. You need to pick the bug picture you want to use from the
        animation tab.\r
        \r
        * Set the animation of the sprite to your favorite bug.\r
        *
        Add an if statement inside your draw loop.\r
        * Add a call to keyDown as the
        input to the if statement to check if the up arrow was pressed.\r
        * Add code
        inside the conditional to move the sprite up if the up arrow is down.\r
        \r
        _Do
        you need to change sprite's x or y property to move it up?_\r
        \r
        \r
        \r
      CSD U3 UP_ARROW_2018_markdown_instruction: |-
        # Moving Sprites\r
        \r
        You can
        change your sprite's position based on key presses in the same way you changed
        its animations.\r
        \r
        # Do This\r
        \r
        * Add an `if` statement inside your
        draw loop.\r
        * Check whether the right arrow key has been pressed down.\r
        *
        Add code inside the conditional to move the sprite right if the right arrow
        is down.\r
        \r
        _Do you need to change sprite's x or y property to move it
        right?_
      CSD U3 Variable Arithmetic pt2_markdown_instruction: |-
        # Variable Arithmetic
        Pt2\r
        \r
        As we saw in the last level, **you can add, subtract, multiply,
        or divide** your variable **without changing its value**. The only time a
        variable's value will change is when you use the `=` or **gets** command.\r
        \r
        Try
        another example highlighting another common misconception.\r
        \r
        # Do This\r
        \r
        *
        Read the program provided\r
        * **Predict:** What two numbers will get displayed?
        Why? **Explain your reasoning to a neighbor**.\r
        * Run the program. Were
        you surpised by what happened? **Compare notes with a neighbor**.
      CSD U3 Variable Arithmetic_markdown_instruction: |-
        # Variable Arithmetic\r
        \r
        You
        can use the values stored in a variable to perform **addition, subtraction,
        multiplication, and division**. Let's have a look at some common misconceptions.\r
        \r
        #
        Do This\r
        \r
        * Read the program provided\r
        * **Predict:** what will displayed
        when you run the program? Why? **Explain your reasoning to a neighbor**.\r
        *
        Run the program. Were you surpised by what happened? **Compare notes with
        a neighbor**.
      CSD U3 Variable Incrementation pt2_markdown_instruction: |-
        # Variable Reassignment\r
        \r
        This
        example is starting to get a little more complex. Work through it with a partner.
        Why do you get the output you do?\r
        \r
        # Do This\r
        \r
        * Read the program
        provided\r
        * **Predict:** What two numbers will get displayed? Why? **Explain
        your reasoning to a neighbor**.\r
        * Run the program. Were you surpised by
        what happened? **Compare notes with a neighbor**.
      CSD U3 Variable Incrementation_markdown_instruction: |-
        # Variable Incrementation\r
        \r
        To
        **increment** something means to add something to a value. In programming
        if you want to increase or increment the value in a variable you need to use
        the **gets** command to store the new value.\r
        \r
        As you work through this
        example try to discuss with your partner, **What's the difference between
        the left side and the right side of the `=` command?**\r
        \r
        # Do This\r
        \r
        *
        Read the program provided\r
        * **Predict:** What two numbers will get displayed?
        Why? **Explain your reasoning to a neighbor**.\r
        * Run the program. Were
        you surpised by what happened? **Compare notes with a neighbor**.
      CSD U3 Variables CHALLENGE gamelab gary_markdown_instruction: |-
        # Challenge:
        Variables and Game Lab Gary\r
        \r
        * You've been provided code that draws
        a simple version of Game Lab Gary\r
        * **Use variables to animate Gary**.
        How can you extend them?\r
        * [[Question that leads towards incrementation]]
      CSD U3 Variables Challenge_markdown_instruction: |
        # Challenge: Updating Variables\r
        \r
        _Check
        with your teacher before tackling this challenge level._\r
        \r
        So far we've
        only ever assigned a value to a variable once, but did you know you can update
        a variable during a program?  Read through the example program we've provided,
        run it a few times to understand how it works, and then attempt to modify
        the program to draw one of the following images.\r
        \r
        \r
        <img src="https://images.code.org/29f4d46d5aa041fb7d27aa2e3c77652e-image-1493161823337.png"
        style="width:150px; border: 1px solid grey; margin:20px;">\r
        <img src="https://images.code.org/629819fe91016ee1b8275c81e41770b5-image-1493161823334.png"
        style="width:150px; border: 1px solid grey; margin:20px;">\r
        <img src="https://images.code.org/acf7b8223b3a87594e20348306464de7-image-1493161823305.png"
        style="width:150px; border: 1px solid grey; margin:20px;">\r
      CSD U3 Variables Challenge_2018_markdown_instruction: |
        # Challenge: Updating
        Variables\r
        \r
        _Check with your teacher before tackling this challenge level._\r
        \r
        So
        far we've only ever assigned a value to a variable once, but did you know
        you can update a variable during a program?  Read through the example program
        we've provided, run it a few times to understand how it works, and then attempt
        to modify the program to draw one of the following images.\r
        \r
        \r
        <img
        src="https://images.code.org/29f4d46d5aa041fb7d27aa2e3c77652e-image-1493161823337.png"
        style="width:150px; border: 1px solid grey; margin:20px;">\r
        <img src="https://images.code.org/629819fe91016ee1b8275c81e41770b5-image-1493161823334.png"
        style="width:150px; border: 1px solid grey; margin:20px;">\r
        <img src="https://images.code.org/acf7b8223b3a87594e20348306464de7-image-1493161823305.png"
        style="width:150px; border: 1px solid grey; margin:20px;">\r
      CSD U3 Variables Draw Challenge_markdown_instruction: |
        # Challenge: Draw an
        Image\r
        \r
        _Check with your teacher before tackling this challenge level._\r
        \r
        Using
        variables, draw an image where many of the items rely on a common variable
        for size or placement. For example, draw a face with variables controlling
        the size and/or placement of both eyes, ears, and nostrils. Once you have
        your drawing completed, try changing the values of your variables to make
        sure that the whole image changes together.\r
      CSD U3 Variables Draw Challenge_2018_markdown_instruction: |
        # Challenge: Draw
        an Image\r
        \r
        _Check with your teacher before tackling this challenge level._\r
        \r
        Using
        variables, draw an image where many of the items rely on a common variable
        for size or placement. For example, draw a face with variables controlling
        the size and/or placement of both eyes, ears, and nostrils. Once you have
        your drawing completed, try changing the values of your variables to make
        sure that the whole image changes together.\r
      CSD U3 Variables Draw Poppy_markdown_instruction: |-
        # Using a Variable Many
        Times\r
        \r
        This program has only one variable called `petalSize` but it
        uses it 8 different times. This makes it easy to quickly make lots of changes
        to how your picture is drawn.\r
        \r
        # Do This\r
        \r
        * Change the number
        assigned to `petalSize` so the red petals touch one another.\r
        * Try to find
        the size that makes the most sense. Compare your answer with someone around
        you.
      CSD U3 Variables Draw Poppy_2018_markdown_instruction: |-
        # Using a Variable
        Many Times\r
        \r
        This program has only one variable called `petalSize` but
        it uses it 8 different times. This makes it easy to quickly make lots of changes
        to how your picture is drawn.\r
        \r
        # Do This\r
        \r
        * Change the number
        assigned to `petalSize` so the red petals touch one another.\r
        * Try to find
        the size that makes the most sense. Compare your answer with someone around
        you.
      CSD U3 Variables Initialize_markdown_instruction: |-
        # Using a Variable's Value\r
        \r
        This
        program creates a variable called `size`. You will need to **assign it a value**.
        It will then be used to set the size of a square on the screen.\r
        \r
        # Do
        This\r
        \r
        * **Assign the variable `size` a value** and run the program to
        see how its value is used\r
        * **Change the value** and rerun the program
        to see how it affects the output of your program.
      CSD U3 Variables Intro_markdown_instruction: |-
        # Your first variable\r
        \r
        The
        `var` command **creates a new variable**. You only need to use it once with
        each variable you create.\r
        \r
        # Do This\r
        \r
        * Create a new variable
        with a **name of your choosing**, as shown in the starter code.
      CSD U3 Variables Predict Where X Embed_markdown_instruction: |-
        # Predict\r
        \r
        In
        which corner of the screen will the circle be drawn?
      CSD U3 Variables Predict Where X_markdown_instruction: |-
        # Using Variables\r
        \r
        In
        this program, the variable `xPosition` is used to store the x-coordinate of
        the circle.\r
        \r
        # Do This\r
        * Run the program to see how it works.\r
        *
        Change the number that is stored into the variable ([Show me where](#triggercallout=code_triggered))
        and run the code again.
      CSD U3 Variables Predict Where XY Embed_markdown_instruction: |-
        # Predict\r
        \r
        In
        which corner of the screen will the circle be drawn?\r
        \r
        _Hint: Click the
        "Show grid" box to help you find the exact coordinates on the screen._
      CSD U3 Variables Predict Where XY Embed_2018_markdown_instruction: |-
        # Predict\r
        \r
        In
        which corner of the screen will the circle be drawn?\r
        \r
        _Hint: Click the
        "Show grid" box to help you find the exact coordinates on the screen._
      CSD U3 Variables Predict Where X_2018_markdown_instruction: |-
        # Using Variables\r
        \r
        In
        this program, the variable `xPosition` is used to store the x-coordinate of
        the circle.\r
        \r
        # Do This\r
        * Run the program to see how it works.\r
        *
        Change the number that is stored into the variable ([Show me where](#triggercallout=code_triggered))
        and run the code again.
      CSD U3 Variables Random_markdown_instruction: |-
        # Variables random values\r
        \r
        You
        can use a variable to store a **randomly generated number**.\r
        \r
        # Do This\r
        \r
        *
        In the starter code a variable is **initialized with a random number** and
        then **displayed twice**\r
        * **Predict:** Will the value displayed change
        between the two `console.log` statements?\r
        * Run the program. Was your prediction
        correct? Were you surprised?\r
        * **Compare notes with a neighbor**
      CSD U3 Variables Reassign Predict_markdown_instruction: |
        # Make a Prediction

        This
        program **creates a variable** and then sets its value twice in a row. **What
        value will be displayed when the console.log() statement runs?**

        ![](https://images.code.org/0375d4215c5cc4b937c9333390deb81c-image-1460404063955.47.09
        PM.png)

        **Once you've submitted your answer be prepared to discuss your
        reasoning with your classmates.**
      CSD U3 Variables Reassign pt2_markdown_instruction: |-
        # Creating and assigning
        in one line\r
        \r
        You can use `var` and `=` in a single line to **assign
        a value to a variable as soon as it is created**, for example: `var size =
        10;`\r
        \r
        # Do This\r
        \r
        * **Create a new variable and assign it a value**
        in a single line.
      CSD U3 Variables Reassign_markdown_instruction: |-
        # Assiging a Variable\r
        \r
        Variables
        **store a single piece of information that can change throughout your program**.
        The `=` command gives a variable a new value.\r
        \r
        You read the command
        `size = 10;` as "size gets the value 10". You can also say "size gets 10".\r
        \r
        #
        Do This\r
        \r
        **Use the `=` command** to assign a value to the variable `numberOfDogs`
      CSD U3 Variables Square Random Loop_markdown_instruction: |-
        # Random Values
        and the Draw Loop\r
        \r
        In the last level you should have **made a prediction**
        about the difference between two programs. They are both available here, with
        the second one commented out.\r
        \r
        # Do This\r
        \r
        * Run the first program\r
        *
        **Comment out** the first program and **uncomment** the second program\r
        *
        Run the second program\r
        * **Compare what you observed to your prediction.
        Discuss the results with a neighbor**
      CSD U3 Variables Square Random_markdown_instruction: |-
        # Variables and Random
        Drawing\r
        \r
        Variables can be used to **store a randomly generated value**
        that you want to use many times in your program.\r
        \r
        # Do This\r
        \r
        *
        Assign size a **random number between 1 and 200**.\r
        * **Run the program
        multiple times**\r
        * **Discuss with a neighbor:** Can you explain why the
        program always drawing a square?
      CSD U3 Variables Square_markdown_instruction: |-
        # Variables and Drawing\r
        \r
        Variables
        allow you to **use the same value multiple times in your program**. If a value
        will always be used many times in a program it is really useful to place that
        value in a variabnle. This lets you **quickly change the same value at many
        places in your program**. It also can make move obvious **how that value is
        used**.\r
        \r
        # Do This\r
        \r
        * Change the value that `size` is initialized
        to so that the program draws a **larger square**
      CSD U3 Variables TEMPLATE square_markdown_instruction: |-
        # Drawing with Variables\r
        \r
        **Get
        excited because you're about to see your first variable used in a program!**
        This program uses a variable in three separate ways.\r
        \r
        * `var size;`
        Creates a new variable with the label size\r
        * `size = 50;` Assigns the value
        50 to size\r
        * `rect(200, 200, size, size);` Uses the value in size to draw
        a rectangle with equal width and height.\r
        \r
        # Do This\r
        \r
        * Run the
        program once to see how it works\r
        * **Change the value assigned to size
        in line 2** and rerun the program to see what changed.
      CSD U3 Variables change circle size_markdown_instruction: |-
        <img src="https://images.code.org/acc7f5763a9ca1c17647f7dd9711c9f5-image-1490977696189.28.01
        AM.png" style="float:right; height:150px">\r
        \r
        # Debug: Using Variables\r
        \r
        This
        program uses the variable `circleSize` to control the width and height of
        a circle.  If you make the circle big enough, it will fill up the entire screen,
        as in the picture on the right.\r
        \r
        # Do This\r
        \r
        * Change the value
        assigned to `circleSize` so that the circle takes up the entire screen.
      CSD U3 Variables change circle size_2018_markdown_instruction: |-
        <img src="https://images.code.org/acc7f5763a9ca1c17647f7dd9711c9f5-image-1490977696189.28.01
        AM.png" style="float:right; height:150px">\r
        \r
        # Debug: Using Variables\r
        \r
        This
        program uses the variable `circleSize` to control the width and height of
        a circle.  If you make the circle big enough, it will fill up the entire screen,
        as in the picture on the right.\r
        \r
        # Do This\r
        \r
        * Change the value
        assigned to `circleSize` so that the circle takes up the entire screen.
      CSD U3 Variables create and assign_markdown_instruction: |
        # Create and Assign\r
        \r
        When
        you create a new variable you will often want to assign it a value right away.
        You can **create and assign a value** to a variable in a single command as
        shown below.\r
        \r
        ![](https://images.code.org/2110bcf19415401434a876503ddecab5-image-1462472203840.16.37
        PM.png)\r
        \r
        # Do This\r
        \r
        This program needs you to **create and assign
        a value to the variable `size`** in order to draw a square.\r
        \r
        * Use the
        block shown above to create the rectangle and assign it a value in a single
        line of code.\r
        \r
      CSD U3 Variables draw loop newVars_markdown_instruction: |-
        # Keep going!\r
        \r
        **Keep
        using the patterns we just explored to build your own visualization**\r
        \r
        #
        Do This\r
        \r
        * Extend your project to create a **personal randomized piece
        of art**\r
        * Some techniques you might try:\r
        \t* Use **new shapes** like
        `rect`, `regularPolygon`, or `line`\r
            * Use **variables in unexpected
        ways**, (e.g. `red` also controls the size of your ellipse)\r
            * Create
        **new variables** to control new parts of your program\r
            * Pick **new
        ranges** for your random values\r
            * Switch which variables are assigned
        values **inside or outside the draw loop**
      CSD U3 Variables draw loop rgb_markdown_instruction: |-
        # Using variables in
        the draw loop\r
        \r
        Now try randomizing the `red`, `green`, and `blue` variables.
        Try setting their values to random numbers **before the draw loop** or **inside
        the draw loop** like you did with `x1` and `y1` in the previous level.  \r
        \r
        #
        Do This\r
        \r
        * Randomize the values of `red`, `green`, and `blue`, changing
        some **before the draw loop** and some **inside the draw loop**\r
        * Find
        a visual effect you really like and share with a neighbor before moving on
      CSD U3 Variables draw loop xy_markdown_instruction: |-
        # Using variables in the
        draw loop\r
        \r
        As you saw in the last example, **you can update a value
        repeatedly within the draw loop**. Using this allows you to redraw an image
        with random changes every time. By storing these random values in a variable
        you can **use the same random value multiple times**.\r
        \r
        # Do This\r
        \r
        *
        Add to the starter code provided so that the variables `x1` and `y1` are updated
        randomly in the draw loop.\r
        * Use these values to redraw the ellipses at
        random locations.
      CSD U3 Variables eyeBrows_markdown_instruction: |-
        # Create Your Own\r
        \r
        The
        pattern you just saw is very common. The steps were:\r
        \r
        * **Create** a
        variable **outside** the draw loop\r
        * **Assign** the variable a new value
        **inside** the draw loop\r
        * **Use** the new value **inside** the draw loop
        to draw the current frame\r
        \r
        Let's see if you can put together everything
        you've done so far to use this pattern yourself.\r
        \r
        # Do This\r
        \r
        You
        will be adding **eyebrows that move up and down together** to your smiley
        face.\r
        \r
        * **Create** a variable **outside** the draw loop with a good
        label. Remember this variable will control **the height of the eyebrows**\r
        *
        **Assign** your variable a new random value **inside** your draw loop\r
        *
        **Use** your value inside the draw loop to create **two new ellipses**. The
        value in your variable should control the height\r
        \r
        **Hints and Tips:**\r
        \r
        *
        The x values of your eyes can help you line up your eyebrows. \r
        * Don't
        be afraid to work **iteratively** here (that means try something and keep
        improving). It's ok to have something not work the first time.\r
        * Talk
        with a neighbor if you're having trouble, or go check your work from earlier
        in the lesson.\r
        \r
        ![](https://images.code.org/05e5ea214c8ccc37fc8dd4223569602a-image-1462474590368.gif)
      CSD U3 Variables make a big square_markdown_instruction: |
        # Replacing Labels
        with Values \r
        \r
        The last command in the program you just ran is:\r
        \r
        \tconsole.log(size);\r
        \r
        But
        the output you saw was\r
        \r
        \t10\r
            \r
        The reason is that **variables
        are replaced with their values before running almost all commands.** The only
        exceptions are the commands `var size` and `size = `.\r
        \r
        # Do This\r
        \r
        This
        program is very similar to the one you just ran, except now you'll be using
        a variable to draw. **Can you fill the entire screen?**\r
        \r
        * **Predict**
        what this program will do.\r
        \t* Does it generate an error? What will it
        draw?\r
        * **Run** the program and check your prediction.\r
        * **Change the
        value** assigned on line 2 so that **the rectangle drawn fills the whole screen**.\r
        \r
      CSD U3 Variables make a square_markdown_instruction: |-
        # Drawing with Variables\r
        \r
        A
        **variable** is a named piece of information in a program. You can think of
        it as a **label** that identifies a **value** that we wish to use and update
        many times in our programs. In the previous lesson, you learned two important
        commands with variables.\r
        \r
        \tvar size;        // Creates a new label
        (or variable) called size\r
            size = 10;       // size "gets" 10. The
        label score is now connected to the value 10\r
            \r
        Once these connections
        have been formed, we can use them to make much more interesting drawings and
        animations.\r
        \r
        # Do This\r
        \r
        This program creates a variable called
        `size` and assigns it the value `10`. These two commands are familiar, but
        line 3 should look new to you. What do you think will happen?\r
        \r
        * **Predict**
        what this program will do.\r
        \t* Does it generate an error? Output some text?
        Output a value? Why do you think so?\r
        * **Run** the program and check your
        prediction.\r
        * **Change the value** that size "gets" on line 2 and re-run
        your program. Notice anything?
      CSD U3 Variables multiple assignments_markdown_instruction: |-
        # Multiple Assignments\r
        \r
        A
        variable contains a single piece of information called its **value**. To tell
        variables apart each one has a **label** or name. In your last program, the
        variable had the label `size` and originally had a value of `10`. **Here's
        how each command you just saw works**\r
        \r
        ![](https://images.code.org/a8d2c5a88a8fbb8284a18bcb7464cb9b-image-1462301535506.51.32
        PM.png) **Create a new variable** with the label `size`\r
        \r
        ![](https://images.code.org/d2a2578e6d0190f7db69872c1ad64572-image-1462301539050.51.43
        PM.png) **Assign the value `10`** to the variable `size`\r
        \r
        ![](https://images.code.org/84b01d13b210c8cca8a71934b77acc56-image-1462301542169.51.53
        PM.png) **Use the value in `size`** as the width and height of the rectangle.
        (Since they're the same we end up with a square)\r
        \r
        # Do This\r
        \r
        This
        program is similar to the first but it assigns multiple values to `size` before
        drawing the rectangle.\r
        \r
        * **Run the program once** to see how it works\r
        *
        **One at a time change the values assigned to `size` in lines 2-4 and rerun
        the program** \r
        * **Discuss / Reflect:**\r
        \t* Which lines is changing
        the rectangle drawn? How can you tell?\r
            * Can you explain what you're
        seeing?
      CSD U3 Variables naming rules v2-2018_markdown_instruction: |-
        <img style="float:
        right" src="https://images.code.org/f4b306422763c84bb924f4f7d3a6dca6-image-1492798058864.06.38
        AM.png">\r
        # Debug: Naming Variables\r
        \r
        This program has multiple errors
        caused by bad label names.  The errors prevent the program from being viewed
        in block mode, so the code is in text.\r
        \r
        # Do This\r
        \r
        * Find the
        rule each variable label violates.\r
        * **Correct the errors by picking new
        names that follow the rules you learned in the last level.**\r
        * If your
        program works it should draw the image on the right.\r
        \r
        <summary><em>Hint:
        Click the arrow for a quick review of the rules.</em><details><ul>\r
        <li>Labels
        can't have spaces.</li>\r
        <li>Labels can't start with a number.</li>\r
        <li>Capitalization
        and spelling must be exactly the same.</li>\r
        </ul></details></summary>
      CSD U3 Variables naming rules v2_markdown_instruction: |-
        <img style="float:
        right" src="https://images.code.org/f4b306422763c84bb924f4f7d3a6dca6-image-1492798058864.06.38
        AM.png">\r
        # Debug: Naming Variables\r
        \r
        This program has multiple errors
        caused by bad label names.  The errors prevent the program from being viewed
        in block mode, so the code is in text.\r
        \r
        # Do This\r
        \r
        * Find the
        rule each variable label violates.\r
        * **Correct the errors by picking new
        names that follow the rules you learned in the last level.**\r
        * If your
        program works it should draw the image on the right.\r
        \r
        <summary><em>Hint:
        Click the arrow for a quick review of the rules.</em><details><ul>\r
        <li>Labels
        can't have spaces.</li>\r
        <li>Labels can't start with a number.</li>\r
        <li>Capitalization
        and spelling must be exactly the same.</li>\r
        </ul></details></summary>
      CSD U3 Variables naming rules v2_2018_markdown_instruction: |-
        <img style="float:
        right" src="https://images.code.org/f4b306422763c84bb924f4f7d3a6dca6-image-1492798058864.06.38
        AM.png">\r
        # Debug: Naming Variables\r
        \r
        This program has multiple errors
        caused by bad label names.  The errors prevent the program from being viewed
        in block mode, so the code is in text.\r
        \r
        # Do This\r
        \r
        * Find the
        rule each variable label violates.\r
        * **Correct the errors by picking new
        names that follow the rules you learned in the last level.**\r
        * If your
        program works it should draw the image on the right.\r
        \r
        <summary><em>Hint:
        Click the arrow for a quick review of the rules.</em><details><ul>\r
        <li>Labels
        can't have spaces.</li>\r
        <li>Labels can't start with a number.</li>\r
        <li>Capitalization
        and spelling must be exactly the same.</li>\r
        </ul></details></summary>
      CSD U3 Variables naming rules_markdown_instruction: |
        # Choosing Labels\r
        \r
        Good
        labels **indicate how the variable will be used in the program**. The label
        `size` is a good choice for a variable that controls the size of something.
        You could always choose `potato` or `s`, but confusing or unclear names make
        your program hard to read for you and others.\r
        \r
        There are a **few rules**
        when choosing labels:\r
        \r
        * Labels **cannot include spaces**. For example,
        `size of rectangle` would generate an error.\r
        * Labels with multiple words
        can be easier to read in **camelCase**. CamelCase looks like `sizeOfRectangle`
        or `aReallyLongLabelName`\r
        * Labels **cannot begin with a number**. `4sides`
        and `2morrow` will generate errors.\r
        * Be very careful with **spelling**.\r
        *
        Labels are **case-sensitive**. `size` is not the same as `Size` or `SIZE`.\r
        \r
        \r
        <img
        src="https://images.code.org/39340782150ad1635f6274f6edadb114-image-1462314883756.34.32
        PM.png" style="float:right; height:200px"> \r
        \r
        # Do This\r
        \r
        This
        program has multiple errors caused by bad label names.\r
        \r
        * **Correct
        the errors by picking new names that follow the rules listed above.**\r
        *
        **Note:** The errors prevent the program from being viewed in block mode.\r
        *
        If your program works it should draw the image on the right.\r
        \r
      CSD U3 Variables random assignment_markdown_instruction: |-
        # Random Assignment\r
        \r
        Variables
        are really helpful when you want to **store a number that you'll use many
        times in your program**. For example, if you generate a random number you
        could store it in a variable so that you can use that same random number as
        many times as you wish, like this.\r
        \r
        \tvar randomSize;                     //
        Create variable randomSize\r
            randomSize = randomNumber(10,100);  // randomSize
        "gets" a randomly generated number between 10 and 100\r
        \r
        # Do This\r
        \r
        This
        program **assigns a random number** to `eyeSize` on line 1. It's already
        being used to change the size of one of the eyes on the smiley face, but not
        the other. **Can you get both eyes to always be the same random size?**\r
        \r
        *
        **Run the program** to see how it works\r
        * **Change the program** so that
        both eyes are always the same random size. Check line 12 if you need some
        help.\r
        \r
        Note: Read the documentation about the `arc` command if you want
        to know more about how the mouth on the smiley was made.
      CSD U3 Variables random draw loop_markdown_instruction: |-
        # Variables and the
        Draw Loop\r
        \r
        You already know that draw loop **runs over and over again
        so long as your program is running**. If you assign a value to a variable
        outside the draw loop it will not change while the draw loop runs. If your
        assignment happens **inside the draw loop the variable will be constantly
        updated, once for each time the loop runs**. \r
        \r
        # Do This\r
        \r
        This
        program draws a smiley face with randomly sized eyes. You are going to **move
        the assignment of `eyeSize` inside of the draw loop, but first...**\r
        \r
        *
        **Run the program** without making changes to remind yourself how it works\r
        *
        **Predict what will happen** when you move the assignment statement inside
        the draw loop\r
        * **Move the assignment inside the draw loop** and run your
        program\r
        * **Discuss / Reflect:**\r
        \t* Was your prediction correct?\r
            *
        Can you explain what you see?\r
            * Try changing the range of random values
        to get a different effect.
      CSD U3 Variables random drawing exemplar_markdown_instruction: |-
        # Exemplar:
        Random Drawing\r
        \r
        To practice using **variables with the draw loop** you
        will be building your own **randomized art project**. Check out the exemplar
        to see one possible outcome. Then move on to get started building your own.
      CSD U3 Variables random with assignment_markdown_instruction: |-
        <img src="https://images.code.org/ba9592e887f52c1a538a0517560cdacf-image-1493913633878.gif"
        style="float:right;height:150px">\r
        \r
        # Debug: Variables and Random Numbers\r
        \r
        Variables
        can be assigned a random number too. This lets you save a single random value
        so that you can use it as many times as you want in your program.\r
        \r
        #
        Do This\r
        \r
        `eyeSize` is assigned a random number. Unfortunately only one
        of the eyes is currently using it.\r
        \r
        * **Run the program** to see how
        it works.\r
        * **Change the program** so that both eyes are always the same
        random size. Hint: you'll only need to make changes to one line of code.
      CSD U3 Variables random with assignment_2018_markdown_instruction: |-
        <img src="https://images.code.org/ba9592e887f52c1a538a0517560cdacf-image-1493913633878.gif"
        style="float:right;height:150px">\r
        \r
        # Debug: Variables and Random Numbers\r
        \r
        Variables
        can be assigned a random number too. This lets you save a single random value
        so that you can use it as many times as you want in your program.\r
        \r
        #
        Do This\r
        \r
        `eyeSize` is assigned a random number. Unfortunately only one
        of the eyes is currently using it.\r
        \r
        * **Run the program** to see how
        it works.\r
        * **Change the program** so that both eyes are always the same
        random size. Hint: you'll only need to make changes to one line of code.
      CSD U3 Variables use value rect_markdown_instruction: |-
        # Using a Variable's
        Value\r
        \r
        This program creates a variable called `size`. You will need
        to **assign it a value**. It will then be used to set the size of a square
        on the screen.\r
        \r
        # Do This\r
        \r
        * **Assign the variable `size` a value**
        and run the program to see how its value is used\r
        * **Change the value**
        and rerun the program to see how it affects the output of your program.
      CSD U3 Variables write_markdown_instruction: |-
        # Displaying a Variable's Value\r
        \r
        Often
        you want to see the exact value contained in a variable, especially if it
        was randomly generated. Both `console.log` and `text` can be used with variables
        to specifically see their values. This is an important skill when **debugging**
        your programs.\r
        \r
        # Do This\r
        \r
        This program uses a variable `size`
        to draw a square with a randomly generated value.\r
        \r
        * **Use the `text`
        command** to display the value of `size` on the screen.\r
        * **Use the `console.log`
        command** to display the value of `size` in the debug console.
      CSD U3 Variables2 expressions in commands_markdown_instruction: |-
        # Expressions
        inside commands\r
        \r
        **When your computer sees an expression in a program
        it will calculate its value before using it**. This means you can even use
        expressions in unexpected places, like inside drawing commands.\r
        \r
        \tstrokeWeight(4
        * 5);\r
            rect(10 + 10, 5 * 50, 30, 30);\r
            \r
        Notice that the commas
        still separate each expression. This is just further evidence that **even
        though an expression may have multiple parts, it will eventually get treated
        as a single value.**\r
        \r
        # Do This\r
        \r
        Try writing more complex expressions
        inside of the drawing commands provided.
      CSD U3 Variables2 expressions in variables_markdown_instruction: |-
        # Do This\r
        \r
        *
        Use the `=` (assignment operator) to store the value of each expression in
        a variable\r
        * Use `console.log` to display each value\r
        * Repeat the pattern
        with some expressions of your own. What do you want to calculate?
      CSD U3 Variables2 expressions_markdown_instruction: |
        # Do This\r
        \r
        * Place
        each expression inside of a `console.log` command to display their results\r
        *
        What other expressions can you make? Try writing 3 of your own.\r
      CSD U3 Watcher Debug_markdown_instruction: |-
        <img src="https://images.code.org/20cc981b4b4f99b2ff96415e19af7600-image-1492034149715.gif"
        style="float: right; margin-left: 20px;">\r
        \r
        # Debug: Watching the Counter
        Pattern\r
        \r
        Let's practice using watchers to debug your code. This program
        should move the motorcycle from the bottom left to the top right, like the
        image to the right. Unfortunately the motorcycle moves off screen too quickly
        to see what's going wrong.\r
        \r
        Using the provided watchers for `cycle.x`
        and `cycle.y`, figure out which one is moving in the wrong direction and fix
        the program.
      CSD U3 Watcher Debug_2018_markdown_instruction: |-
        <img src="https://images.code.org/20cc981b4b4f99b2ff96415e19af7600-image-1492034149715.gif"
        style="float: right; margin-left: 20px;">\r
        \r
        # Debug: Watching the Counter
        Pattern\r
        \r
        Let's practice using watchers to debug your code. This program
        should move the motorcycle from the bottom left to the top right, like the
        image to the right. Unfortunately the motorcycle moves off screen too quickly
        to see what's going wrong.\r
        \r
        Using the provided watchers for `cycle.x`
        and `cycle.y`, figure out which one is moving in the wrong direction and fix
        the program.
      CSD U3 Watcher Predict response_markdown_instruction: |
        # Watching the Counter
        Pattern\r
        \r
        Watchers are a really useful tool for debugging programs that
        use the counter pattern.\r
        \r
        * **Read the program** and predict what the
        program will do.\r
        * **Run the program** to check your prediction.\r
        * **Look
        at the watchers** and explain to a neighbor what you are seeing.\r
        \r
      CSD U3 Watcher Predict response_2018_markdown_instruction: |
        # Watching the
        Counter Pattern\r
        \r
        Watchers are a really useful tool for debugging programs
        that use the counter pattern.\r
        \r
        * **Read the program** and predict what
        the program will do.\r
        * **Run the program** to check your prediction.\r
        *
        **Look at the watchers** and explain to a neighbor what you are seeing.\r
        \r
      CSD U3 abstraction accelerateX_markdown_instruction: |-
        # Velocity and the Counter
        Pattern\r
        \r
        As you just saw, using a `sprite.velocityX` property with the
        counter pattern will change a sprite's velocity during the program. This
        makes the sprite speed up. Do a little practice using this pattern yourself.\r
        \r
        #
        Do This\r
        \r
        This program already makes a car move across the screen, but
        it's going very slowly.\r
        \r
        * Use the counter pattern with the sprite's
        velocityX property to make the car speed up. ( [Show me where](#triggercallout=code_triggered)
        )
      CSD U3 abstraction accelerateX_2018_markdown_instruction: |-
        # Velocity and the
        Counter Pattern\r
        \r
        As you just saw, using a `sprite.velocityX` property
        with the counter pattern will change a sprite's velocity during the program.
        This makes the sprite speed up. Do a little practice using this pattern yourself.\r
        \r
        #
        Do This\r
        \r
        This program already makes a car move across the screen, but
        it's going very slowly.\r
        \r
        * Use the counter pattern with the sprite's
        velocityX property to make the car speed up. ( [Show me where](#triggercallout=code_triggered)
        )
      CSD U3 abstraction accelerateY up_markdown_instruction: |-
        # Rising Bubble\r
        \r
        This
        program makes a bubble rise up the water. Can you make it get faster as it
        rises?\r
        \r
        # Do This\r
        \r
        * Use the counter pattern and the sprite's
        y velocity to make the bubble move up more quickly.
      CSD U3 abstraction accelerateY up_2018_markdown_instruction: |-
        # Rising Bubble\r
        \r
        This
        program makes a bubble rise up the water. Can you make it get faster as it
        rises?\r
        \r
        # Do This\r
        \r
        * Use the counter pattern and the sprite's
        y velocity to make the bubble move up more quickly.
      CSD U3 abstraction accelerateY_markdown_instruction: |-
        # Falling Rock\r
        \r
        The
        rock should speed up as it falls down the screen.  Can you use the same counter
        pattern with `velocityY` inside the draw loop to make the rock go faster and
        faster as it falls?\r
        \r
        # Do This\r
        \r
        * Use the counter pattern with
        the sprite's y velocity to make the rock speed up as it falls.  ( [Show me
        where](#triggercallout=code_triggered) )\r
        \r
        *Challenge: Can you make the
        rock spin as it falls?*
      CSD U3 abstraction accelerateY_2018_markdown_instruction: |-
        # Falling Rock\r
        \r
        The
        rock should speed up as it falls down the screen.  Can you use the same counter
        pattern with `velocityY` inside the draw loop to make the rock go faster and
        faster as it falls?\r
        \r
        # Do This\r
        \r
        * Use the counter pattern with
        the sprite's y velocity to make the rock speed up as it falls.  ( [Show me
        where](#triggercallout=code_triggered) )\r
        \r
        *Challenge: Can you make the
        rock spin as it falls?*
      CSD U3 abstraction add coin_markdown_instruction: |-
        # Add a Coin\r
        \r
        In the
        next few levels you'll add to your program to make a simple game. In this
        game the player will collect points to increase the score. This is a good
        chance to see how different kinds of movement can affect the way a game feels,
        and it will also just help you practice programming skills.\r
        \r
        # Do This\r
        \r
        In
        this level you'll just be adding a new coin sprite to the game. You should
        be working at the top of your program, outside the draw loop.\r
        \r
        * Use
        the `createSprite()` block to create a new sprite. Make sure to give it a
        descriptive name such as **coin**.\r
        * Use the `sprite.x` and `sprite.y`
        properties of the sprite to give it a random X and Y position between 0 and
        400.\r
        * In the Animation Tab there is already a coin animation. Use the
        `sprite.setAnimation()` block to give your sprite this animation.\r
        \r
        Test
        your code before moving on. When you run the game, you should see a coin sprite
        appear somewhere randomly on the screen.
      CSD U3 abstraction add coin_2018_markdown_instruction: |-
        # Add a Coin\r
        \r
        In
        the next few levels you'll add to your program to make a simple game. In
        this game the player will collect points to increase the score. This is a
        good chance to see how different kinds of movement can affect the way a game
        feels, and it will also just help you practice programming skills.\r
        \r
        #
        Do This\r
        \r
        In this level you'll just be adding a new coin sprite to the
        game. You should be working at the top of your program, outside the draw loop.\r
        \r
        *
        Use the `createSprite()` block to create a new sprite. Make sure to give it
        a descriptive name such as **coin**.\r
        * Use the `sprite.x` and `sprite.y`
        properties of the sprite to give it a random X and Y position between 0 and
        400.\r
        * In the Animation Tab there is already a coin animation. Use the
        `sprite.setAnimation()` block to give your sprite this animation.\r
        \r
        Test
        your code before moving on. When you run the game, you should see a coin sprite
        appear somewhere randomly on the screen.
      CSD U3 abstraction animation circle_markdown_instruction: "# Animate the Satellite\\r\n\\r\nNow\nyou
        are ready for the final piece of the drawing: making the satellite circle\nthe
        moon.\\r\n\\r\n# Do This\\r\n\\r\nUse `setSpeed()` and `getDirection()` to\nmake
        the satellite circle the moon. "
      CSD U3 abstraction animation rotate_markdown_instruction: |-
        # Rotation\r
        \r
        Make
        earth rotate using the `rotationSpeed` property.
      CSD U3 abstraction animation setSpeed_markdown_instruction: "# Animate Your\nPicture\\r\n\\r\n<img
        style=\"float:right\" src=\"https://images.code.org/d2ad362f37d0e5f9b98691654256d2fb-image-1469469372823.gif\">\\r\n\\r\nNow\nthat
        everything is in the right place, you can make them move using the properties\nand
        methods you have learned.\\r\n\\r\n# Do This\\r\n\\r\nUse `rotationSpeed`,\n`rotationToDirection`,
        `getSpeed`, `getDirection`, and `setSpeed` to animate\nyour scene, as seen
        in the image to the right.  "
      CSD U3 abstraction animation setup_markdown_instruction: |
        # Setting up your
        picture\r
        <img style="float: right; margin: 4px;" src="https://images.code.org/b90748874dc9094386134be8ec1b95e5-image-1469228306235.png">\r
        Before
        you make anything move, you'll need to start all your sprites off in the
        right place.  The Earth has already been positioned for you.\r
        \r
        # Do This\r
        \r
        Create
        sprites for the moon, spaceship, and satellite.  Use `setAnimation` to add
        a picture to each one, and use the `x` and `y` properties to put them in the
        right place on the screen.\r
        \r
      CSD U3 abstraction animation_markdown_instruction: |
        # Setting up your picture\r
        <img
        style="float: right; margin: 4px;" src="https://images.code.org/b90748874dc9094386134be8ec1b95e5-image-1469228306235.png">\r
        Before
        you make anything move, you'll need to start all your sprites off in the
        right place.  The Earth has already been positioned for you.\r
        \r
        # Do This\r
        \r
        Create
        sprites for the moon, spaceship, and satellite.  Use `setAnimation` to add
        a picture to each one, and use the `x` and `y` properties to put them in the
        right place on the screen.\r
        \r
      CSD U3 abstraction bug template_markdown_instruction: |-
        # velocityY\r
        \r
        `velocityY`
        is like `velocityX`, but it moves things up and down.  Can you use it to make
        the dragonfly walk up the screen?\r
        \r
        # Do This\r
        \r
        Use `velocityY`
        to make the sprite go up the screen.\r
        \r
        *Hint: Should velocity by positive
        or negative to move the sprite up the screen?*
      CSD U3 abstraction car rotation_markdown_instruction: |-
        # rotateToDirection\r
        \r
        Here's
        the car you just made move.  It stayed on the road, but it was not pointing
        in the right direction.  You can tell the sprite to always point in the direction
        that it's moving by adding `car.rotateToDirection = true` outside the draw
        loop, right after you create your sprite.\r
        \r
        # Do This\r
        \r
        Use the
        `rotateToDirection` property to make your car face the direction it's moving.
      CSD U3 abstraction car template_markdown_instruction: |-
        # Moving at an Angle\r
        \r
        If
        you use `velocityX` and `velocityY` at the same time, you can move your sprite
        at an angle.  See if you can keep the car on the road by using these two properties.\r
        \r
        #
        Do This\r
        \r
        Use `velocityX` and `velocityY` to make the car move along
        the road.
      CSD U3 abstraction change velocityX_markdown_instruction: |-
        # Moving Faster\r
        \r
        Remember
        when you used the counter pattern `sprite.x = sprite.x + 1` to change your
        sprite's position inside the draw loop?  Now you can use the same type of
        counter pattern with `sprite.velocityX` to change your sprite's speed as
        your program runs. Can you add a line of code in the draw loop to make the
        sprite swim faster and faster?\r
        \r
        # Do This\r
        \r
        Make the fish get faster
        by adding `fish.velocityX = fish.velocityX + 1` inside the draw loop.  [Show
        me where](#triggercallout=code_triggered)
      CSD U3 abstraction change velocityXY_markdown_instruction: |-
        # Getting faster
        at an angle\r
        \r
        Here's a different car that uses the same counter pattern
        we used in the last lesson to make the car go faster, but it changes both
        `velocityX` and `velocityY`. ([Show me where](#triggercallout=code_triggered))  It
        also prints the speed and direction to the debug console.  What do you think
        will happen when you run the code?\r
        \r
        # Do This\r
        \r
        Discuss with your
        partner what you think will happen when the code runs, then run it and see
        whether you were right.  Why do you think the car moves in this way?\r
        \r
        [//]:
        #(https://images.code.org/4d1af9cc274f30b9d9263a47f9f64f13-image-1470941637433.png)
      CSD U3 abstraction change velocityY_markdown_instruction: |-
        # Moving Faster\r
        \r
        Just
        as you can change `velocityX` inside the draw loop, you can change `velocityY`
        to make your sprite move faster up or down.  Can you add code into the draw
        loop to make the dragonfly go faster?\r
        \r
        # Do This\r
        \r
        Use the `velocityY`
        property to make the dragonfly fly faster and faster up the screen.    [Show
        me where](#triggercallout=code_triggered)
      CSD U3 abstraction circle_markdown_instruction: |-
        # getDirection()\r
        \r
        You've
        been using `getSpeed` and `setSpeedAndDirection`  to change the speed of a
        sprite in a particular direction.  What do you think will happen if you keep
        the speed the same, but use `getDirection` and `setSpeedAndDirection` to change
        the direction?  Look at the code below and predict what it will do.  After
        you've run it, try changing the direction by different amounts to see what
        happens.\r
        \r
        # Do This\r
        * Read the code where the direction is changed
        and predict what it will do [Show me where](#triggercallout=code_triggered)\r
        *
        Run the program and observe what it does\r
        * Modify the program to make the
        car spin in large circles\r
        * Modify the program to make the car move in
        the opposite direction\r
        \r
        [//]: #(https://images.code.org/63b04e63fc4bc21700b64ef3d6c6b8b7-image-1471475653020.png)
      CSD U3 abstraction decelerateX_markdown_instruction: |-
        # Slowing Things Down\r
        \r
        Now
        that you've had some practice speeding things up, can you use the counter
        pattern to slow sprites down? \r
        \r
        # Do This\r
        \r
        The car is going to
        run into the water! You'll need to use the counter pattern to slow it down.\r
        \r
        *
        Use the `sprite.velocityX` block with a counter pattern to slow the car down
        by 0.25 as it moves across the screen.  \r
        * Discuss with your Partner: What
        do you think will happen when the car finally stops?\r
        \r
        *Challenge: Add
        code that makes the car slow down only if his velocityX is greater than 0.*
      CSD U3 abstraction decelerateX_2018_markdown_instruction: |-
        # Slowing Things
        Down\r
        \r
        Now that you've had some practice speeding things up, can you
        use the counter pattern to slow sprites down? \r
        \r
        # Do This\r
        \r
        The
        car is going to run into the water! You'll need to use the counter pattern
        to slow it down.\r
        \r
        * Use the `sprite.velocityX` block with a counter
        pattern to slow the car down by 0.25 as it moves across the screen.  \r
        *
        Discuss with your Partner: What do you think will happen when the car finally
        stops?\r
        \r
        *Challenge: Add code that makes the car slow down only if his
        velocityX is greater than 0.*
      CSD U3 abstraction decelerateY_markdown_instruction: |-
        # Simulating Gravity\r
        \r
        In
        the last level you slowed down the car with the `sprite.velocityX` block and
        the counter pattern. It almost looked like the car was getting pulled to the
        left.\r
        \r
        If you use this same pattern with the `sprite.velocityY` block
        it will look like your sprite is always being pulled down, which is exactly
        what gravity does!\r
        \r
        # Do This\r
        \r
        The rock is thrown in the air but
        it never falls back down.\r
        \r
        * Use the `sprite.velocityY` block with the
        counter pattern to make the rock slow down and then fall in the other direction.\r
        *
        Experiment with different values in your counter pattern. Do you want the
        rock to slow down quickly or gradually? What looks most realistic to you?\r
        *
        Discuss with your partner: Why are you setting the rock's initial velocity
        outside the draw loop? Why are you changing the sprite's velocity inside
        the draw loop?
      CSD U3 abstraction decelerateY_2018_markdown_instruction: |-
        # Simulating Gravity\r
        \r
        In
        the last level you slowed down the car with the `sprite.velocityX` block and
        the counter pattern. It almost looked like the car was getting pulled to the
        left.\r
        \r
        If you use this same pattern with the `sprite.velocityY` block
        it will look like your sprite is always being pulled down, which is exactly
        what gravity does!\r
        \r
        # Do This\r
        \r
        The rock is thrown in the air but
        it never falls back down.\r
        \r
        * Use the `sprite.velocityY` block with the
        counter pattern to make the rock slow down and then fall in the other direction.\r
        *
        Experiment with different values in your counter pattern. Do you want the
        rock to slow down quickly or gradually? What looks most realistic to you?\r
        *
        Discuss with your partner: Why are you setting the rock's initial velocity
        outside the draw loop? Why are you changing the sprite's velocity inside
        the draw loop?
      CSD U3 abstraction demo pic_markdown_instruction: |-
        # Space Animation\r
        \r
        In
        the next few puzzles, you'll be building the space animation on the left.  You
        can use your activity guide to help you plan how to make the different type
        of movements you see.\r
        \r
        # Do This\r
        \r
        * Click "Run" to see the animation.\r
        *
        Look at how all the different sprites are moving and update your activity
        guide with any ideas you have.\r
        * Discuss with a partner how you might make
        this picture.
      CSD U3 abstraction dragonfly (OLD)_markdown_instruction: |-
        # velocityY\r
        \r
        `velocityY`
        is like `velocityX`, but it moves things up and down.  Can you use it to make
        the feather float the down screen?\r
        \r
        # Do This\r
        \r
        Use `velocityY`
        to make the sprite go down the screen.&nbsp;&nbsp;  [Show me where](#triggercallout=code_triggered)
      CSD U3 abstraction dragonfly OLD_markdown_instruction: |-
        # velocityY\r
        \r
        `velocityY`
        is like `velocityX`, but it moves things up and down.  Can you use it to make
        the dragonfly walk up the screen?\r
        \r
        # Do This\r
        \r
        Use `velocityY`
        to make the sprite go up the screen.&nbsp;&nbsp;  [Show me where](#triggercallout=code_triggered)\r
        \r
        *Hint:
        Should velocity be positive or negative to move the sprite up the screen?*
      CSD U3 abstraction drive_markdown_instruction: |-
        # Race Your Car\r
        \r
        Now
        that you can steer, you need to control the speed of your car.  Use the `setSpeed`
        method to make the car go faster when you push the up arrow and slower when
        you push the down arrow.\r
        \r
        # Do This\r
        \r
        Add two conditionals to your
        car program.  \r
        \r
        * The first should check whether the up arrow is pressed,
        and increase the speed of the car. \r
        * The second should check whether the
        down arrow is pressed and decrease the speed of the car.\r
        \r
        *Hint:  What's
        the difference between `keyDown` and `keyWentDown`?  Which do you think will
        work better for changing the speed of the car?*
      CSD U3 abstraction fish template_markdown_instruction: |
        # velocityX\r
        \r
        Last
        time you made the fish move, you did it by changing its `x` property in the
        draw loop.  Now, you can use `velocityX` to make your sprites move left or
        right by a certain amount each time they are drawn.\r
        \r
        # Do This\r
        \r
        Use
        the `velocityX` block to make the sprite go across the screen.\r
      CSD U3 abstraction horse_markdown_instruction: |
        # Horse\r
        \r
        The horse is
        trying to make its escape. Can you use the `velocityX` and `velocityY` blocks
        to make the horse jump over the fence?\r
        \r
        \r
        # Do This\r
        \r
        * Set the
        starting `velocityX` and `velocityY` values outside the draw loop [Show me
        where](#triggercallout=code_triggered1)\r
        * Change your sprite's `velocityY`
        using a counter pattern inside the draw loop [Show me where](#triggercallout=code_triggered2)\r
      CSD U3 abstraction horse2_markdown_instruction: |
        # Better Horse\r
        \r
        If you're
        making a game, you'll want the horse to jump according to user input. This
        program automatically moves the horse to the right, but the horse should jump
        when the user presses the up arrow key.  You will need to add three lines
        of code to make this work.  First, you'll need to check whether the up arrow
        key has been pressed, and make the horse move up if it has. \r
        \r
        \r
        #
        Do This\r
        \r
        * Inside the `if` block that checks whether the up arrow key
        has been pressed, use the `velocityY` block to make the horse move up by 4
        each time. [Show me where](#triggercallout=code_triggered)\r
        \r
      CSD U3 abstraction horse3_markdown_instruction: |
        # Better Horse\r
        \r
        Next,
        you'll make the horse fall back down to the ground. You'll need to check
        whether the horse is in the air by looking at its y position. If it's in
        the air it should fall down, but once it touches the ground it should stop.
        The `if/else` block has already been provided for you.\r
        \r
        # Do This\r
        \r
        Look
        at the `if/else` block that checks whether the horse's position is less than
        325. [Show me where](#triggercallout=code_triggered1)\r
        \r
        * If the horse's
        y position is less than 325, use a counter pattern to change the horse's
        velocityY by 0.1 on each tick of the draw loop. \r
        * If the horse's y position
        is not less than 325, use the `velocityY` to change its vertical velocity
        to zero. [Show me where](#triggercallout=code_triggered2)\r
        \r
      CSD U3 abstraction jump-2018_markdown_instruction: |-
        # Jumping\r
        \r
        You now
        have all the blocks you need to make your sprite jump!  The sprite should
        jump up if it's on the ground and the user presses the "up" key, then should
        start moving back down when it reaches the top of its jump.\r
        \r
        # Do this\r
        \r
        *
        Find the `if` statement that checks whether the sprite is on the ground, and
        look at the `if` statement inside of it that checks whether the user has pressed
        the "up" arrow key. ( [Show me where](#triggercallout=code_triggered1) )\r
        \t*
        Make the frog jump up when the user presses the arrow key.\r
        \t* Make the
        frog stop moving otherwise.\r
        * Add code that does the following  ( [Show
        me where](#triggercallout=code_triggered2) )\r
          * Checks whether the frog
        sprite has reached its highest point.\r
          * If so, make the sprite go back
        down.
      CSD U3 abstraction jump_markdown_instruction: |-
        # Jumping\r
        \r
        You now have
        all the blocks you need to make your sprite jump!\r
        \r
        Just as you checked
        whether your fish was at the left edge, you'll need to check whether the
        frog is on the ground.  If it is, it could either jump up or stay still, so
        you'll need one more `if` block to check whether the user has pressed the
        up arrow ( [Show me where](#triggercallout=code_triggered1) ).\r
        \r
        You'll
        also need to check whether the frog has reached its highest point, and send
        it back down if it has.\r
        \r
        # Do this\r
        \r
        * Find the `if` statement
        that checks whether the sprite is on the ground, and look at the `if` statement
        inside of it that checks whether the user has pressed the "up" arrow key.
        ( [Show me where](#triggercallout=code_triggered1) )\r
        \t* Use the `velocityY`
        block to make the frog jump up when the user presses the arrow key.\r
        \t*
        Use the `velocityY` block to make the frog stop moving otherwise.\r
        * Add
        an if statement that does the following  ( [Show me where](#triggercallout=code_triggered2)
        )\r
          * Checks whether the frog sprite has reached its highest point.\r
          *
        If so, use the `velocityY` block to make the sprite fall back down.
      CSD U3 abstraction jump_2018_markdown_instruction: |-
        # Jumping\r
        \r
        You now
        have all the blocks you need to make your sprite jump!  The sprite should
        jump up if it's on the ground and the user presses the "up" key, then should
        start moving back down when it reaches the top of its jump.\r
        \r
        # Do this\r
        \r
        *
        Find the `if` statement that checks whether the sprite is on the ground, and
        look at the `if` statement inside of it that checks whether the user has pressed
        the "up" arrow key. ( [Show me where](#triggercallout=code_triggered1) )\r
        \t*
        Make the frog jump up when the user presses the arrow key.\r
        \t* Make the
        frog stop moving otherwise.\r
        * Add code that does the following  ( [Show
        me where](#triggercallout=code_triggered2) )\r
          * Checks whether the frog
        sprite has reached its highest point.\r
          * If so, make the sprite go back
        down.
      CSD U3 abstraction jumper intro_markdown_instruction: |
        # Horse Jumper\r
        \r
        Now
        that you've learned these new blocks, you can start to make a horse jumper
        game.  Press "Run" to play the game on the left.  You can use the up arrow
        to jump over the tumbleweed.  What block will you need to make the tumbleweed
        move?  How many different ways does the horse move?\r
        \r
        \r
      CSD U3 abstraction jumper template_markdown_instruction: |
        # Horse Jumper\r
        \r
        Now
        that you've learned these new blocks, you can start to make a horse jumper
        game.  Press "Run" to play the game on the left.  You can use the up arrow
        to jump over the tumbleweed.  What block will you need to make the tumbleweed
        move?  How many different ways does the horse move?\r
        \r
        \r
      CSD U3 abstraction jumping advanced_markdown_instruction: |-
        # Jumping with the
        Counter Pattern\r
        \r
        In the last level you just set the sprite's velocity
        to -5 to make it jump. Eventually the sprite slows down and then starts falling
        again. Now you'll build a slightly more realistic jump by using the counter
        pattern with the sprite's y velocity.\r
        \r
        # Do This\r
        \r
        Inside the
        `if` block you should have code that sets the sprite's y velocity to a number.\r
        \r
        *
        Replace that line of code with new code, `flyer.velocityY = flyer.velocityY
        - 5`\r
        * Discuss with Your Partner: How did this change affect the way the
        sprite moves? How does subtracting a different amount change the way your
        sprite moves? Do you prefer one or the other type of jump?
      CSD U3 abstraction jumping template_markdown_instruction: |-
        # Jumping\r
        \r
        Increasing
        a sprite's y velocity inside the counter pattern can simulate gravity. By
        adding user interactions you can make your sprite appear to jump as well.
        For starters you'll make a simple jump and then make it more realistic looking
        in the next level.\r
        \r
        # Do This\r
        \r
        A sprite has already been created
        for you that falls because its y velocity is increased inside the draw loop.
        You'll need to make this sprite appear to jump.\r
        \r
        * Inside the draw
        loop add an `if` block\r
        * Use the `keyWentDown` block to make the block
        respond to the "up" arrow being pressed\r
        * Inside your `if` block set
        the sprite's y velocity to -5\r
        \r
        Run the code to make sure it works.
        Then experiment with different values. How could you make your sprite jump
        higher or lower?
      CSD U3 abstraction jumping template_2018_markdown_instruction: |-
        # Jumping\r
        \r
        Increasing
        a sprite's y velocity inside the counter pattern can simulate gravity. By
        adding user interactions you can make your sprite appear to jump as well.
        For starters you'll make a simple jump and then make it more realistic looking
        in the next level.\r
        \r
        # Do This\r
        \r
        A sprite has already been created
        for you that falls because its y velocity is increased inside the draw loop.
        You'll need to make this sprite appear to jump.\r
        \r
        * Inside the draw
        loop add an `if` block\r
        * Use the `keyWentDown` block to make the block
        respond to the "up" arrow being pressed\r
        * Inside your `if` block set
        the sprite's y velocity to -5\r
        \r
        Run the code to make sure it works.
        Then experiment with different values. How could you make your sprite jump
        higher or lower?
      CSD U3 abstraction jumping_markdown_instruction: |-
        # Jumping\r
        \r
        Increasing
        a sprite's y velocity inside the counter pattern can simulate gravity. By
        adding user interactions you can make your sprite appear to jump as well.
        For starters you'll make a simple jump, and then make it more realistic looking
        in the next level.\r
        \r
        # Do This\r
        \r
        A sprite has already been created
        for you that falls because its y velocity is increased inside the draw loop.
        You'll need to make this sprite appear to jump.\r
        \r
        * Inside the `if`
        block that checks whether the up arrow has been pressed, set the sprite's
        y velocity to -5. ( [Show me where](#triggercallout=callout1) )\r
        * Discuss
        with a neighbor: Why does this code run the way it does? How would using a
        number besides -5 affect the way the code works? How could you jump higher
        or lower?
      CSD U3 abstraction jumping_2018_markdown_instruction: |-
        # Jumping\r
        \r
        Increasing
        a sprite's y velocity inside the counter pattern can simulate gravity. By
        adding user interactions you can make your sprite appear to jump as well.
        For starters you'll make a simple jump, and then make it more realistic looking
        in the next level.\r
        \r
        # Do This\r
        \r
        A sprite has already been created
        for you that falls because its y velocity is increased inside the draw loop.
        You'll need to make this sprite appear to jump.\r
        \r
        * Inside the `if`
        block that checks whether the up arrow has been pressed, set the sprite's
        y velocity to -5. ( [Show me where](#triggercallout=callout1) )\r
        * Discuss
        with a neighbor: Why does this code run the way it does? How would using a
        number besides -5 affect the way the code works? How could you jump higher
        or lower?
      CSD U3 abstraction left right counter 2_markdown_instruction: |-
        # Floating Left\r
        \r
        In
        the last level you got detailed instructions on how to make your sprite start
        floating to the right. This time you'll need to make your sprite float to
        the left on your own. You should be pretty comfortable with using velocity
        and the counter pattern together at this point. If you're having trouble,
        talk to a neighbor or review some of the past levels.\r
        \r
        # Do This\r
        \r
        *
        Add code to your draw loop that will make the sprite start moving to the left
        when the "left" arrow is down.\r
        * Make sure you're using velocity and
        the counter pattern together.\r
        \r
        Once your code is working share what
        you wrote with a partner. Is your sprite easy to control? Does changing the
        amount you add or subtract in the counter patterns you wrote affect the way
        the game feels? What kind of game might be fun to make with a player that
        moves like this?
      CSD U3 abstraction left right counter 2_2018_markdown_instruction: |-
        # Floating
        Left\r
        \r
        In the last level you got detailed instructions on how to make
        your sprite start floating to the right. This time you'll need to make your
        sprite float to the left on your own. You should be pretty comfortable with
        using velocity and the counter pattern together at this point. If you're
        having trouble, talk to a neighbor or review some of the past levels.\r
        \r
        #
        Do This\r
        \r
        * Add code to your draw loop that will make the sprite start
        moving to the left when the "left" arrow is down.\r
        * Make sure you're
        using velocity and the counter pattern together.\r
        \r
        Once your code is
        working share what you wrote with a partner. Is your sprite easy to control?
        Does changing the amount you add or subtract in the counter patterns you wrote
        affect the way the game feels? What kind of game might be fun to make with
        a player that moves like this?
      CSD U3 abstraction left right counter_markdown_instruction: |-
        # Floating Right\r
        \r
        You're
        now using the counter pattern with the sprite's Y velocity to simulate gravity
        and jumping. If you use the sprite's X velocity in the counter pattern then
        you can make your sprite float from side to side as well.\r
        \r
        # Do This\r
        \r
        In
        this level you'll make your sprite start floating to the right when the right
        arrow is pressed.\r
        \r
        * Add an `if` statement inside your draw loop below
        the one you created for the "up" arrow.\r
        * Use the `keyDown` block to
        make the `if` statement respond to when the "right" arrow is pressed.\r
        *
        Inside the `if` block use the counter pattern with the `sprite.velocityX`
        block to add 0.1 to the sprite's X velocity.\r
        \r
        Run your code to see
        how it works. The sprite should start floating to the right when you press
        the right arrow and jump when you press "up". You'll make the left arrow
        work in the next level.
      CSD U3 abstraction left right counter_2018_markdown_instruction: |-
        # Floating
        Right\r
        \r
        You're now using the counter pattern with the sprite's Y velocity
        to simulate gravity and jumping. If you use the sprite's X velocity in the
        counter pattern then you can make your sprite float from side to side as well.\r
        \r
        #
        Do This\r
        \r
        In this level you'll make your sprite start floating to the
        right when the right arrow is pressed.\r
        \r
        * Add an `if` statement inside
        your draw loop below the one you created for the "up" arrow.\r
        * Use the
        `keyDown` block to make the `if` statement respond to when the "right" arrow
        is pressed.\r
        * Inside the `if` block use the counter pattern with the `sprite.velocityX`
        block to add 0.1 to the sprite's X velocity.\r
        \r
        Run your code to see
        how it works. The sprite should start floating to the right when you press
        the right arrow and jump when you press "up". You'll make the left arrow
        work in the next level.
      CSD U3 abstraction looping_markdown_instruction: |-
        # Looping\r
        \r
        The game
        will be more fun if the frog can jump more than once.  You can make the mushroom
        "loop" by checking whether it's moved past the left edge and moving it
        back to the right edge when it has.\r
        \r
        # Do this\r
        * Find the `if` statement
        that checks whether the mushroom has passed the left edge. ( [Show me where](#triggercallout=code_triggered1)
        )\r
        * Use the `sprite.x` block to set the mushroom's position back to the
        right edge if it has.
      CSD U3 abstraction looping_2018_markdown_instruction: |-
        # Looping\r
        \r
        The
        game will be more fun if the frog can jump more than once.  You can make the
        mushroom "loop" by checking whether it's moved past the left edge and moving
        it back to the right edge when it has.\r
        \r
        # Do this\r
        * Find the `if`
        statement that checks whether the mushroom has passed the left edge. ( [Show
        me where](#triggercallout=code_triggered1) )\r
        * Use the `sprite.x` block
        to set the mushroom's position back to the right edge if it has.
      CSD U3 abstraction make it your own_markdown_instruction: |-
        # Make It Your Own\r
        \r
        You
        now have the basic mechanics of your game in place, so it's time to make
        it your own. What do you want to happen? Should the character get points every
        time it collects a coin? Can you add a scoreboard like you learned in the
        last lesson? Do you want to make another coin? What about a "bad coin" that
        takes away points?\r
        \r
        # Do This\r
        \r
        Make at least one improvement to
        the game that makes it your own. Be prepared to share your changes and improvements
        with your classmate.
      CSD U3 abstraction make it your own_2018_markdown_instruction: |-
        # Make It Your
        Own\r
        \r
        You now have the basic mechanics of your game in place, so it's
        time to make it your own. What do you want to happen? Should the character
        get points every time it collects a coin? Can you add a scoreboard like you
        learned in the last lesson? Do you want to make another coin? What about a
        "bad coin" that takes away points?\r
        \r
        # Do This\r
        \r
        Make at least
        one improvement to the game that makes it your own. Be prepared to share your
        changes and improvements with your classmate.
      CSD U3 abstraction parabola_markdown_instruction: |-
        # Basketball\r
        \r
        Here's
        a basketball that's thrown up, then falls back down.  Can you use the `velocityX`
        block to make it go through the hoop?\r
        \r
        \r
        # Do This\r
        \r
        Use the
        `velocityX` block outside the draw loop to make the ball move to the right
        by 3 each time. [Show me where](#triggercallout=code_triggered)\r
        \r
        [//]:
        #(https://images.code.org/119358fc8705640a24d2138439ea7cc1-image-1472496770816.png)
      CSD U3 abstraction race template_markdown_instruction: |-
        Template for the race
        game
      CSD U3 abstraction reset coin_markdown_instruction: |-
        # Reset Coin\r
        \r
        When
        your character touches the coin you should reset it somewhere on the screen.\r
        \r
        #
        Do This\r
        \r
        * Place an `if` block inside of your draw loop.\r
        * Use the
        `sprite.isTouching()` block as the condition to detect when the character
        touches the coin.\r
        * Inside the `if` block write code that sets the coin's
        X and Y position to random numbers between 0 and 400.\r
        \t* *Hint: You've
        already written this code elsewhere in your program.*\r
        \r
        Test your code
        before moving on. When your player touches the coin, it should move somewhere
        else on the screen.
      CSD U3 abstraction reset coin_2018_markdown_instruction: |-
        # Reset Coin\r
        \r
        When
        your character touches the coin you should reset it somewhere on the screen.\r
        \r
        #
        Do This\r
        \r
        * Place an `if` block inside of your draw loop.\r
        * Use the
        `sprite.isTouching()` block as the condition to detect when the character
        touches the coin.\r
        * Inside the `if` block write code that sets the coin's
        X and Y position to random numbers between 0 and 400.\r
        \t* *Hint: You've
        already written this code elsewhere in your program.*\r
        \r
        Test your code
        before moving on. When your player touches the coin, it should move somewhere
        else on the screen.
      CSD U3 abstraction rotation accelerate_markdown_instruction: |-
        # Speeding up\r
        \r
        Now
        that you've used `rotationSpeed` outside the draw loop to start your sprite
        rotating at a certain speed, you can also use `rotationSpeed` inside the draw
        loop to change how fast the sprite rotates.  Look at the code inside the draw
        loop.  It uses the counter pattern to make the wheel speed up when the up
        arrow is pressed.  Can you use a different counter pattern to make the wheel
        slow down when the down arrow is pressed?\r
        \r
        # Do This\r
        \r
        * Look at
        the code that makes the wheel spin faster when the up arrow is pressed [Show
        me where](#triggercallout=code_triggered1)\r
        * Add code that makes the wheel
        spin slower when the down arrow is pressed [Show me where](#triggercallout=code_triggered2)
      CSD U3 abstraction rotation control_markdown_instruction: |-
        # Controlling Speed\r
        \r
        You
        used `rotatationSpeed` outside the draw loop to make your sprite rotate when
        your program started.  You can also use `rotationSpeed` **inside** the draw
        loop to change the speed of the sprite during the game.  For example, a sprite
        can start rotating when the user presses the space bar, and it will keep rotating
        until it's told to stop.\r
        \r
        # Do This\r
        \r
        * Look at the `if` statement
        inside the draw loop that checks whether the space bar has been pressed. (
        [Show me where](#triggercallout=code_triggered1) )\r
        * Use the `rotationSpeed`
        block to make the color wheel start spinning when the user presses the space
        bar.
      CSD U3 abstraction rotation control_2018_markdown_instruction: |-
        # Controlling
        Speed\r
        \r
        You used `rotatationSpeed` outside the draw loop to make your
        sprite rotate when your program started.  You can also use `rotationSpeed`
        **inside** the draw loop to change the speed of the sprite during the game.  For
        example, a sprite can start rotating when the user presses the space bar,
        and it will keep rotating until it's told to stop.\r
        \r
        # Do This\r
        \r
        *
        Look at the `if` statement inside the draw loop that checks whether the space
        bar has been pressed. ( [Show me where](#triggercallout=code_triggered1) )\r
        *
        Use the `rotationSpeed` block to make the color wheel start spinning when
        the user presses the space bar.
      CSD U3 abstraction rotation_markdown_instruction: |-
        # rotationSpeed\r
        \r
        You've
        already learned how to make your sprite spin by using the `rotation` block.  For
        example, when you wanted your sprite to rotate by two degrees each time it
        was drawn, you put `sprite.rotation = sprite.rotation + 2` inside the draw
        loop.\r
        \r
        Now, you can use `rotationSpeed` to make your sprites rotate
        by a certain amount each time they are drawn. If you want your sun to rotate
        by two degrees each time it's drawn, you can use `sun.rotationSpeed = 2`
        before the draw loop, after you create your sprite.\r
        \r
        # Do This\r
        \r
        Make
        the sun rotate by 3 degrees each time using the `rotationSpeed` block. ( [Show
        me where](#triggercallout=callout1) )
      CSD U3 abstraction rotation_2018_markdown_instruction: |-
        # rotationSpeed\r
        \r
        You've
        already learned how to make your sprite spin by using the `rotation` block.  For
        example, when you wanted your sprite to rotate by two degrees each time it
        was drawn, you put `sprite.rotation = sprite.rotation + 2` inside the draw
        loop.\r
        \r
        Now, you can use `rotationSpeed` to make your sprites rotate
        by a certain amount each time they are drawn. If you want your sun to rotate
        by two degrees each time it's drawn, you can use `sun.rotationSpeed = 2`
        before the draw loop, after you create your sprite.\r
        \r
        # Do This\r
        \r
        Make
        the sun rotate by 3 degrees each time using the `rotationSpeed` block. ( [Show
        me where](#triggercallout=callout1) )
      CSD U3 abstraction setSpeed accelerate_markdown_instruction: |-
        # Moving faster
        and faster\r
        \r
        Now that you've started your car off in the right direction,
        you can make it go faster and faster by using a counter pattern inside the
        draw loop.  Because the sprite does not store its speed as it would a property,
        you'll need to use the `getSpeed` block inside the `setSpeedAndDirection`
        block to add one to the speed each time.  The code `car.setSpeedAndDirection(car.getSpeed()
        + 1, -20)` will get the speed of the car, add one to it, and set the new speed
        to be the sum.  Even though it looks different from using a counter pattern
        on a property or variable, the basic pattern of adding one each time is the
        same.\r
        \r
        # Do this\r
        \r
        Use the `getSpeed` and `setSpeedAndDirection`
        blocks to add one to the speed each time the draw loop is called.  [Show me
        where](#triggercallout=code_triggered)
      CSD U3 abstraction setSpeed fish_markdown_instruction: |-
        # Save the Fish\r
        <img
        style="float: right; height: 200px;" src="https://images.code.org/c92db34c78faa59c2d8a3f0df7fe92aa-image-1472492951133.gif"
        />\r
        Your fish is in danger!  The shark is swimming faster than the fish,
        but we can use the counter pattern to make the fish get faster as the program
        runs.   Can use use the counter pattern inside the draw loop to change the
        program to match the animation on the right?\r
        \r
        # Do This\r
        Use `setSpeedAndDirection`
        inside the draw loop to increase the speed of the sprite by 1 each time the
        draw loop is called.\r
        \r
        [//]: # (https://images.code.org/a87dac6c803751292c6fb11a63623e3f-image-1471466985600.png)\r
        \r
        [//]:
        # (https://images.code.org/b63256ffb19a98d9d20f3b3b79364006-image-1471467188241.png)\r
        \r
        [//]:
        # (https://images.code.org/c92db34c78faa59c2d8a3f0df7fe92aa-image-1472492951133.gif)
      CSD U3 abstraction setSpeed intro_markdown_instruction: |
        # getSpeed() and getDirection()\r
        \r
        When
        you move around the world, you probably don't normally think about your velocityX
        and velocityY.  You probably just think about how fast you are going in the
        direction you are heading.  You can figure out a sprite's speed and direction
        with math, but it's faster to teach the computer to do those calculations
        for you.  `getSpeed()` and `getDirection()` are methods that use the information
        in `velocityX` and `velocityY` to find your speed and direction.\r
        \r
        #
        Do this\r
        \r
        * For each of the three sprites in this animation: Look at
        its `velocityX` and `velocityY` and guess what its speed and direction are.  \r
        *
        Then run the code and see the answers in the debug console.\r
      CSD U3 abstraction setSpeed_markdown_instruction: |-
        # setSpeedAndDirection()\r
        \r
        Just
        as you can use the `getSpeed` and `getDirection` blocks to see how your sprite
        is moving, you can use the `setSpeedAndDirection` block to tell the computer
        how you want your sprite to move.  This block takes in two numbers, first
        the new speed of your sprite, then the angle of its direction.\r
        \r
        Before,
        you did this by setting your `velocityX` and `velocityY` properties, but `setSpeedAndDirection`
        lets you input the exact speed and direction of your sprite.  The computer
        calculates the matching `velocityX` and `velocityY` values and sets them for
        you, according to code that another programmer already wrote.\r
        \r
        # Do
        this\r
        \r
        Use `setSpeedAndDirection` to make the car stay on the road.  You
        can see the effect on your sprite's `velocityX` and `velocityY` in the debug
        console.\r
        \r
        *Hint: The angle of the road is -20 degrees*\r
        \r
        *Challenge:
        Make the car point in the correct direction.*
      CSD U3 abstraction sidescroll intro_markdown_instruction: |
        # Horse Jumper\r
        \r
        Now
        that you've learned these new blocks, you can start to make a horse jumper
        game.  Press "Run" to play the game on the left.  You can use the up arrow
        to jump over the tumbleweed.  What block will you need to make the tumbleweed
        move?  How many different ways does the horse move?\r
        \r
        \r
      CSD U3 abstraction sidescroll_markdown_instruction: |-
        # Side Scroller\r
        \r
        Now
        that you can make your sprite jump, you're ready to start a simple side scroller.  In
        a side scroller game, the main sprite stays at the same x location, and the
        background and obstacles slide past it.  In this first part of the project,
        you'll make a hay bale slide across the screen so that your horse can jump
        over it.  You can do this by creating the hay bale off the right hand side
        of the screen, but setting its velocity so that it moves to the left.  Then,
        when the hay bale is completely off the left hand side of the screen, move
        it back to where it started so it can scroll across the screen again.\r
        \r
        #
        Do this\r
        \r
        * Change the line of code where the hay sprite is created to
        make it start off the right side of the screen. [Show me where](#triggercallout=code_triggered1)\r
        *
        Add a line of code to make the sprite move across the screen toward the left.
        [Show me where](#triggercallout=code_triggered2)\r
        * Add an if statement
        that does the following  [Show me where](#triggercallout=code_triggered3)\r
          *
        Checks whether the sprite has gone off the left side of the screen.\r
          *
        If so, moves the sprite back to its initial position off the right side of
        the screen.\r
        \r
        \r
        _Challenge: Can you make the hay bale come out from
        different places on the right hand side of the screen?_\r
        \r
        _Extra fun:
        You can choose your own images to use, rather than the horse and hay bale,
        and draw a new background._\r
        \r
        [](https://images.code.org/0a265cf4c22f69463200dce05989e8e4-image-1474609853181.png)
      CSD U3 abstraction space animation_markdown_instruction: |-
        # Your choice\r
        \r
        <img
        style="float:right" src="https://images.code.org/1c05e3bd228881b77109488b2eb5e737-image-1472408305120.gif">\r
        \r
        Now
        that you have everything moving in the correct way, you can add your own sprite.  You
        can choose between the star and astronaut animations in the animations tab\r
        \r
        #
        Do This\r
        \r
        * Add a new sprite to the picture using the star or astronaut
        in the animations tab\r
        * Make  your sprite move in a new way based on what
        you have learned\r
        * Share your picture with a classmate and compare your
        animations
      CSD U3 abstraction space comet_markdown_instruction: |-
        # Animate The Comet\r
        \r
        <img
        style="float:right" src="https://images.code.org/1c05e3bd228881b77109488b2eb5e737-image-1472408305120.gif">\r
        \r
        Now
        that your sprites are in the right place, you can make them move using the
        properties and methods you have learned.  In this level, you can make the
        comet fly across the sky in a curve.  If you want to animate another sprite,
        you can click on the following links:\r
        \r
        * [Animate the Earth](https://levelbuilder-studio.code.org/s/CSDU3-Draft/stage/12/puzzle/12)\r
        *
        [Animate the Spaceship](https://levelbuilder-studio.code.org/s/CSDU3-Draft/stage/12/puzzle/14)\r
        *
        [Animate the Satellite](https://levelbuilder-studio.code.org/s/CSDU3-Draft/stage/12/puzzle/15)\r
        \r
        #
        Do This\r
        \r
        Use the correct blocks to make the comet fly across the sky
        as in the picture.\r
        \r
        *Hint: Look at [this level](https://levelbuilder-studio.code.org/s/CSDU3-Draft/stage/11/puzzle/13)
        for clues.*
      CSD U3 abstraction space earth_markdown_instruction: |
        # Animate The Earth\r
        \r
        <img
        style="float:right" src="https://images.code.org/1c05e3bd228881b77109488b2eb5e737-image-1472408305120.gif">\r
        \r
        Now
        that everything is in the right place, you can make the sprites move using
        the properties and methods you have learned.  In this level, you can make
        the earth rotate.  If you want to animate another sprite, you can click on
        the following links:\r
        * [Animate the Comet](s/CSDU3-Draft/stage/12/puzzle/13)\r
        *
        [Animate the Spaceship](s/CSDU3-Draft/stage/12/puzzle/14)\r
        * [Animate the
        Satellite](s/CSDU3-Draft/stage/12/puzzle/15)\r
        \r
        # Do This\r
        \r
        Use the
        correct blocks to make the earth rotate as in the picture.\r
      CSD U3 abstraction space satellite_markdown_instruction: |-
        # Animate The Satellite\r
        \r
        <img
        style="float:right" src="https://images.code.org/1c05e3bd228881b77109488b2eb5e737-image-1472408305120.gif">\r
        \r
        Now
        that everything is in the right place, you can make the sprites move using
        the properties and methods you have learned.  In this level, you can make
        the satellite revolve around the moon.  If you want to animate another sprite,
        you can click on the following links:\r
        \r
        * [Animate the Earth](https://levelbuilder-studio.code.org/s/CSDU3-Draft/stage/12/puzzle/12)\r
        *
        [Animate the Comet](https://levelbuilder-studio.code.org/s/CSDU3-Draft/stage/12/puzzle/13)\r
        *
        [Animate the Spaceship](https://levelbuilder-studio.code.org/s/CSDU3-Draft/stage/12/puzzle/14)\r
        \r
        #
        Do This\r
        \r
        Use the correct blocks to make the satellite move as in the
        picture.\r
        \r
        *Hint: Look at [this level](https://levelbuilder-studio.code.org/s/CSDU3-Draft/stage/12/puzzle/8)
        for clues.*
      CSD U3 abstraction space setup_markdown_instruction: |
        # Setting up your picture\r
        <img
        style="float: right; margin: 4px;" src="https://images.code.org/aabf67f8692c025f62a43e54d4bfd830-image-1472408773491.png">\r
        Before
        you make anything move, you'll need to start all your sprites off in the
        right place.  The Earth has already been positioned for you, and all the images
        are loaded for you in the animations tab.\r
        \r
        # Do This\r
        \r
        * Create
        sprites for the moon, spaceship, and satellite.\r
        * Use `setAnimation` to
        add a picture to each sprite.\r
        * Use the `x` and `y` properties to put the
        sprites in the right place on the screen.\r
      CSD U3 abstraction space spaceship_markdown_instruction: |-
        # Animate The Spaceship\r
        \r
        <img
        style="float:right" src="https://images.code.org/1c05e3bd228881b77109488b2eb5e737-image-1472408305120.gif">\r
        \r
        Now
        that everything is in the right place, you can make the sprites move using
        the properties and methods you have learned.  In this level, you can make
        the spaceship speed up as it takes off from Earth.  If you want to animate
        another sprite, you can click on the following links:\r
        \r
        * [Animate the
        Earth](https://levelbuilder-studio.code.org/s/CSDU3-Draft/stage/12/puzzle/12)\r
        *
        [Animate the Comet](https://levelbuilder-studio.code.org/s/CSDU3-Draft/stage/12/puzzle/13)\r
        *
        [Animate the Satellite](https://levelbuilder-studio.code.org/s/CSDU3-Draft/stage/12/puzzle/15)\r
        \r
        #
        Do This\r
        \r
        Use the correct blocks to make the spaceship take off as in
        the picture.\r
        \r
        *Hint: Look at [this level](https://levelbuilder-studio.code.org/s/CSDU3-Draft/stage/12/puzzle/6)
        for clues.*
      CSD U3 abstraction space template_markdown_instruction: |-
        ![](https://images.code.org/b449da443093a6b7fb872c0b65d4ea39-image-1472234725048.png)\r
        \r
        ![](https://images.code.org/87f39110a8cec7a6ca1978989f1d8eaf-image-1472235414354.png)\r
        \r
        ![](https://images.code.org/69cb2daab7d1eec824b8bd2d2b117116-image-1472235429548.png)
      CSD U3 abstraction steer_markdown_instruction: |-
        # Steering your car\r
        \r
        Now
        you have enough information to control your car with the keyboard using conditionals.  Every
        time the left arrow key is pressed, the car will turn to the left.  Can you
        use the `if` block to make the car turn to the right when the right arrow
        key is pressed?  (Don't worry about speeding up and slowing down.  You will
        do that on the next level.)\r
        \r
        # Do This\r
        \r
        Inside the draw loop:\r
        *
        check whether the right arrow key is pressed\r
        * if it's pressed, turn the
        car to the right\r
        \r
        *Challenge: Can you modify the code so that the car
        turns faster?*
      CSD U3 abstraction teaser_markdown_instruction: |-
        # Space Animation\r
        \r
        Look
        at the space animation on the left.\r
        \r
        * What sorts of movements are the
        different sprites making? \r
        * Which types of movement do you already know
        how to program?\r
        * Is there anything you're not sure how to do? \r
        * Discuss
        with a partner how you might make this picture.\r
        \r
        # Do This\r
        \r
        *
        Click "Run" to see the space animation.\r
        * With your partner, discuss
        the different types of movement and how you might code your sprites.\r
        *
        Fill out the activity guide with your notes on the different movements.
      CSD U3 abstraction tumbleweed_markdown_instruction: |
        # Mushroom\r
        \r
        Now
        you just need something for your sprite to jump over.  This program already
        has a mushroom just past the right edge of the screen, but it needs to move
        toward your frog.\r
        \r
        # Do this\r
        * Use the `velocityX` block to make
        the mushroom move left across the screen.\r
        \r
        *Hint: The mushroom should
        start moving at the very beginning of the game, and never change, so should
        it be inside or outside the draw loop?*\r
        \r
      CSD U3 abstraction tumbleweed_2018_markdown_instruction: |
        # Mushroom\r
        \r
        Now
        you just need something for your sprite to jump over.  This program already
        has a mushroom just past the right edge of the screen, but it needs to move
        toward your frog.\r
        \r
        # Do this\r
        * Use the `velocityX` block to make
        the mushroom move left across the screen.\r
        \r
        *Hint: The mushroom should
        start moving at the very beginning of the game, and never change, so should
        it be inside or outside the draw loop?*\r
        \r
      CSD U3 abstraction velocityX control_markdown_instruction: |-
        # Multiple Controls\r
        \r
        As
        you saw in the last level, you can change the sprite's velocity with multiple
        `if` statements. In this program, the fish has three different types of movement,
        each of which should be controlled by its own `if` statement.\r
        \r
        # Do
        This\r
        * Look at the three `if` statements inside the draw loop.\r
        \r
        *
        Use a `sprite.velocityX` block inside each `if` statement to make the three
        following movements:\r
         * If the user presses the right arrow key, move the
        fish to the right.\r
         * If the fish gets to the right-hand side of the screen,
        move the fish to the left.\r
         * If the fish gets to the left-hand side of
        the screen, stop the fish.
      CSD U3 abstraction velocityX control_2018_markdown_instruction: |-
        # Multiple
        Controls\r
        \r
        As you saw in the last level, you can change the sprite's
        velocity with multiple `if` statements. In this program, the fish has three
        different types of movement, each of which should be controlled by its own
        `if` statement.\r
        \r
        # Do This\r
        * Look at the three `if` statements inside
        the draw loop.\r
        \r
        * Use a `sprite.velocityX` block inside each `if` statement
        to make the three following movements:\r
         * If the user presses the right
        arrow key, move the fish to the right.\r
         * If the fish gets to the right-hand
        side of the screen, move the fish to the left.\r
         * If the fish gets to the
        left-hand side of the screen, stop the fish.
      CSD U3 abstraction velocityX if-statements predict_markdown_instruction: |-
        #
        Changing Velocity with Position\r
        \r
        One advantage to using the velocity
        blocks inside conditionals (`if` blocks) is that your sprite keeps moving,
        even after the condition stops being true.  For example, you only had to press
        a key once to launch your fly bot, and it kept flying forever.  The code below
        uses if statements to make a fish sprite move in different directions.\r
        \r
        #
        Do This\r
        \r
        * Look at `if` statements that check the sprite's position
        and set its velocity.\r
        * With your partner, discuss what you think the code
        will do, and write your answer below.\r
        * Once you have submitted your answer,
        run the code.
      CSD U3 abstraction velocityX if-statements predict_2018_markdown_instruction: |-
        #
        Changing Velocity with Position\r
        \r
        One advantage to using the velocity
        blocks inside conditionals (`if` blocks) is that your sprite keeps moving,
        even after the condition stops being true.  For example, you only had to press
        a key once to launch your fly bot, and it kept flying forever.  The code below
        uses if statements to make a fish sprite move in different directions.\r
        \r
        #
        Do This\r
        \r
        * Look at `if` statements that check the sprite's position
        and set its velocity.\r
        * With your partner, discuss what you think the code
        will do, and write your answer below.\r
        * Once you have submitted your answer,
        run the code.
      CSD U3 abstraction velocityX if-statements_markdown_instruction: |-
        # Changing
        Velocity with Position\r
        \r
        One advantage to using the velocity blocks inside
        conditionals (`if` blocks) is that your sprite keeps moving, even after the
        condition stops being true.  For example, you only had to press a key once
        to launch your fly bot, and it kept flying forever.\r
        \r
        In the code below,
        the fish sprite moves to the left when it hits the right edge, and to the
        right when it hits the left edge.  The sprite keeps moving, even when it's
        not touching the edge anymore.\r
        \r
        # Do This\r
        \r
        * Look at `if` statements
        that check the sprite's position and set its velocity.\r
        * With your partner,
        discuss how the sprite knows which way to move when neither of the `if` statements
        are true (the sprite is in the middle of the screen).
      CSD U3 abstraction velocityX if-statements_2018_markdown_instruction: |-
        # Changing
        Velocity with Position\r
        \r
        One advantage to using the velocity blocks inside
        conditionals (`if` blocks) is that your sprite keeps moving, even after the
        condition stops being true.  For example, you only had to press a key once
        to launch your fly bot, and it kept flying forever.\r
        \r
        In the code below,
        the fish sprite moves to the left when it hits the right edge, and to the
        right when it hits the left edge.  The sprite keeps moving, even when it's
        not touching the edge anymore.\r
        \r
        # Do This\r
        \r
        * Look at `if` statements
        that check the sprite's position and set its velocity.\r
        * With your partner,
        discuss how the sprite knows which way to move when neither of the `if` statements
        are true (the sprite is in the middle of the screen).
      CSD U3 abstraction velocityX_markdown_instruction: |-
        # velocityX\r
        \r
        One
        way to move sprites in Game Lab is with the counter pattern. For example `sprite1.x
        = sprite1.x + 1` moves a sprite by 1 pixel each frame of the draw loop. This
        pattern is so common that sprites have a `velocityX` property that does this
        for you.\r
        \r
        # Do This\r
        \r
        * Drag a `sprite.velocityX` block directly
        below where your sprite is created. &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ( [Show
        me where](#triggercallout=code_triggered) )\r
        * Write the name of your sprite
        in the block.\r
        * Assign the `velocityX` property a value of 1.\r
        * Run
        the code. What happens?\r
        * Re-run the code giving the `velocityX` property
        a different value. What's changing?
      CSD U3 abstraction velocityXY_markdown_instruction: |-
        # Moving at an Angle\r
        \r
        For
        the next several levels you'll use the `sprite.velocityX` and `sprite.velocityY`
        blocks to create some interesting sprite movements. As you do so ask yourself
        whether you need the code to run just once (outside the draw loop) or on every
        frame (inside the draw loop).\r
        \r
        # Do This\r
        \r
        This car sprite should
        move along the diagonal road.\r
        \r
        * Set both the X and Y velocities of
        the car to make it move along the road.\r
        * Discuss with a Neighbor: Did
        you set the velocity inside or outside the draw loop? Does it make a difference?
        Why might one be better than the other?
      CSD U3 abstraction velocityX_2018_markdown_instruction: |-
        # velocityX\r
        \r
        One
        way to move sprites in Game Lab is with the counter pattern. For example `sprite1.x
        = sprite1.x + 1` moves a sprite by 1 pixel each frame of the draw loop. This
        pattern is so common that sprites have a `velocityX` property that does this
        for you.\r
        \r
        # Do This\r
        \r
        * Drag a `sprite.velocityX` block directly
        below where your sprite is created. &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ( [Show
        me where](#triggercallout=code_triggered) )\r
        * Write the name of your sprite
        in the block.\r
        * Assign the `velocityX` property a value of 1.\r
        * Run
        the code. What happens?\r
        * Re-run the code giving the `velocityX` property
        a different value. What's changing?
      CSD U3 abstraction velocityY 2_markdown_instruction: |-
        # velocityY\r
        \r
        `velocityY`
        is like `velocityX`, but it moves things up and down.  Can you use it to make
        the feather float the down screen?\r
        \r
        # Do This\r
        \r
        Use `velocityY`
        to make the sprite go down the screen.&nbsp;&nbsp;  [Show me where](#triggercallout=code_triggered)
      CSD U3 abstraction velocityY control_markdown_instruction: |-
        # Controlling Speed\r
        \r
        Your
        code before the draw loop sets up the beginning of your game.  Your code inside
        the draw loop controls how the game will change while it's being played.  In
        this game, the helicopter bot starts off at the bottom of the screen, but
        when the space key is pressed, it flies up.\r
        \r
        # Do This\r
        \r
        * Use
        an `if` statement inside the draw loop to check when the space bar is pressed.\r
        *
        Use the `velocityY` block to make the sprite fly up when the user presses
        the space bar.  The sprite should keep moving up even after you let go of
        the space bar.
      CSD U3 abstraction velocityY control_2018_markdown_instruction: |-
        # Controlling
        Speed\r
        \r
        Your code before the draw loop sets up the beginning of your
        game.  Your code inside the draw loop controls how the game will change while
        it's being played.  In this game, the helicopter bot starts off at the bottom
        of the screen, but when the space key is pressed, it flies up.\r
        \r
        # Do
        This\r
        \r
        * Use an `if` statement inside the draw loop to check when the
        space bar is pressed.\r
        * Use the `velocityY` block to make the sprite fly
        up when the user presses the space bar.  The sprite should keep moving up
        even after you let go of the space bar.
      CSD U3 abstraction velocityY_markdown_instruction: |-
        # Moving Down\r
        \r
        Here
        is a feather sprite that should be floating down the screen.  If `velocityX`
        makes a sprite move to the right, can you find the block that will make the
        feather move down?\r
        \r
        # Do This\r
        \r
        Find the block that will make the
        feather sprite go down the screen, and use it outside the draw loop.&nbsp;&nbsp;
        (  [Show me where](#triggercallout=code_triggered) )
      CSD U3 abstraction velocityY_2018_markdown_instruction: |-
        # Moving Down\r
        \r
        Here
        is a feather sprite that should be floating down the screen.  If `velocityX`
        makes a sprite move to the right, can you find the block that will make the
        feather move down?\r
        \r
        # Do This\r
        \r
        Find the block that will make the
        feather sprite go down the screen, and use it outside the draw loop.&nbsp;&nbsp;
        (  [Show me where](#triggercallout=code_triggered) )
      CSD U3 challenge face_markdown_instruction: |
        <img src="https://images.code.org/aa5aedbcfec082c2886d88b565e5fc09-image-1495732712591.png"
        style="float: right; max-width: 200px; border: 1px solid grey">\r
        # Challenge:
        Face\r
        \r
        _Check with your teacher before starting any of the challenges._\r
        \r
        Write
        a program that uses `rect`, `ellipse`, and `fill` to create the face on the
        right. The colors used are "lightblue", "red", and "lightgreen".\r
        Once
        you've finished, add your own personal touches to the image.\r
        \r
        \r
      CSD U3 challenge face_2018_markdown_instruction: |
        <img src="https://images.code.org/aa5aedbcfec082c2886d88b565e5fc09-image-1495732712591.png"
        style="float: right; max-width: 200px; border: 1px solid grey">\r
        # Challenge:
        Face\r
        \r
        _Check with your teacher before starting any of the challenges._\r
        \r
        Write
        a program that uses `rect`, `ellipse`, and `fill` to create the face on the
        right. The colors used are "lightblue", "red", and "lightgreen".\r
        Once
        you've finished, add your own personal touches to the image.\r
        \r
        \r
      CSD U3 challenge new shape_markdown_instruction: |-
        <img src="https://images.code.org/cc725698ade5282931002db3bf762cbc-image-1495733456927.png"
        style="float: right; max-width: 200px; border: 1px solid grey">\r
        \r
        #
        Challenge: Shape of Shapes\r
        \r
        _Check with your teacher before starting
        any of the challenges._\r
        \r
        Using only the `rect` and `ellipse` commands,
        can you draw a new shape, such as this triangle made out of circles?
      CSD U3 challenge new shape_2018_markdown_instruction: |-
        <img src="https://images.code.org/cc725698ade5282931002db3bf762cbc-image-1495733456927.png"
        style="float: right; max-width: 200px; border: 1px solid grey">\r
        \r
        #
        Challenge: Shape of Shapes\r
        \r
        _Check with your teacher before starting
        any of the challenges._\r
        \r
        Using only the `rect` and `ellipse` commands,
        can you draw a new shape, such as this triangle made out of circles?
      CSD U3 collisions bounce birds_markdown_instruction: |
        # bounce()\r
        \r
        The
        birds are fighting for space on the wire.  Can you change the code so that
        the green bird pushes the yellow bird off the wire?\r
        \r
        # Do This\r
        \r
        Use
        the `bounce` block to the green bird sprite bounce against the yellow bird
        sprite.\r
      CSD U3 collisions bounce intro_markdown_instruction: |
        # bounce()\r
        \r
        You
        can also make sprites bounce when they touch each other, as in the code below.
        Read the code and run it with a partner.  Can you change the code so that
        the green bird pushes the yellow bird off the wire?\r
        \r
        # Do This\r
        \r
        Use
        the `bounce` block to make the green bird sprite bounce against the yellow
        bird sprite.\r
      CSD U3 collisions bounce_markdown_instruction: |-
        # Billiards\r
        \r
        Changing
        your sprites' velocities will change the ways that they bounce when they
        touch each other.  Read the code and run it with a partner, then try out different
        intial velocities for your sprites.  After each change, discuss with your
        partner what you think will happen before you run the code.\r
        \r
        # Do This\r
        Discuss
        with your partner what you think will happen when you run the code, then try
        it again with the following changes:\r
        * set the purple ball's velocity
        to 0\r
        * set the purple ball's velocity to 4\r
        * switch the purple and
        red balls so it says `red_ball.bounce(purple_ball)`\r
        \r
        \r
        [//]: #  (https://images.code.org/8b7730146eaa9d439e6af34c0a21e802-image-1470321391887.png)\r
        \r
        [//]:
        #  (https://images.code.org/eca470a686b01c19981152fdab808804-image-1470321391888.png)
      CSD U3 collisions bounceOff intro_markdown_instruction: |-
        # Basketball\r
        \r
        Run
        the code below and see what happens.  You want the basketball to bounce, but
        the floor should not move!  See if you can find a different block that you
        can use to make the basketball bounce off the floor.\r
        \r
        # Do This\r
        \r
        Replace
        `bounce` with a different block so that the floor sprite does not move, and
        the basketball sprite bounces off it.\r
        \r
        [//]: # (https://images.code.org/24355fc6377cfafdce3ce2b3568a33c3-image-1470343728940.png)\r
        \r
        [//]:
        # (https://images.code.org/87e4306e0371c7975b8fb2583657ee4a-image-1470343728942.png)
      CSD U3 collisions bounceOff_markdown_instruction: |-
        # Mouse\r
        \r
        The mouse
        should be running back and forth between the two walls.  Can you use the `bounceOff`
        block to make it move in the right way?\r
        \r
        # Do This\r
        \r
        Use the `bounceOff`
        block to make the mouse sprite bounce off the wall sprites.\r
        \r
        [//]: #
        (https://images.code.org/e542bc5decf5f57d3184a8d5449776d2-image-1470413949810.png)\r
        \r
        [//]:
        # (https://images.code.org/fcd40235d2a4285723eecec1df041edc-image-1470413965009.png)\r
        \r
        [//]:
        # (https://images.code.org/c3f6298b05a9eb51772c8c03a06abe54-image-1470414415864.png)\r
        \r
        [//]:
        # (https://images.code.org/e89b80c63658eb3607478fe91aceda47-image-1470414741858.png)
      CSD U3 collisions bounciness_markdown_instruction: |-
        # Bounciness\r
        \r
        So
        far, `bounceOff` has made sprites bounce away from other objects as fast as
        they bounced into them.  In the real world, almost everything slows down just
        a little bit when it bounces off something else.  You can use the `bounciness`
        block to tell your sprite how much to slow down or speed up when it bounces
        off something else.\r
        \r
        # Do This\r
        \r
        * Read the code below and press
        "Run" to see the behavior of the basketball and pool ball.\r
        * Use a `bounciness`
        block to set the bounciness of your soccer ball.\r
        * Run the code again to
        see how the sprites bounce off the floor.\r
        \r
        \r
        [//]: #  (https://images.code.org/8b7730146eaa9d439e6af34c0a21e802-image-1470321391887.png)\r
        \r
        [//]:
        #  (https://images.code.org/eca470a686b01c19981152fdab808804-image-1470321391888.png)\r
        \r
        [//]:
        #  (https://images.code.org/0e4e9c26bed0d31d14f6b3f8f8bb4c27-image-1475786966986.png)
      CSD U3 collisions bounciness_2018_markdown_instruction: |-
        # Bounciness\r
        \r
        So
        far, `bounceOff` has made sprites bounce away from other objects as fast as
        they bounced into them.  In the real world, almost everything slows down just
        a little bit when it bounces off something else.  You can use the `bounciness`
        block to tell your sprite how much to slow down or speed up when it bounces
        off something else.\r
        \r
        # Do This\r
        \r
        * Read the code below and press
        "Run" to see the behavior of the basketball and pool ball.\r
        * Use a `bounciness`
        block to set the bounciness of your soccer ball.\r
        * Run the code again to
        see how the sprites bounce off the floor.\r
        \r
        \r
        [//]: #  (https://images.code.org/8b7730146eaa9d439e6af34c0a21e802-image-1470321391887.png)\r
        \r
        [//]:
        #  (https://images.code.org/eca470a686b01c19981152fdab808804-image-1470321391888.png)\r
        \r
        [//]:
        #  (https://images.code.org/0e4e9c26bed0d31d14f6b3f8f8bb4c27-image-1475786966986.png)
      CSD U3 collisions build isTouching_markdown_instruction: |-
        # Balloon\r
        \r
        The
        code below uses the sprites' x and y positions to check whether they are
        touching.  It will change the balloon sprite's animation when the tack touches
        it.  Use the arrow keys to move the tack until it touches the balloon.\r
        \r
        #
        Do This\r
        \r
        * You do not need to change any code on this level.\r
        * Read
        the if statements inside the draw loop and find the different sprite properties
        and how they are compared.\r
        * Discuss the code with your partner.  Would
        you want to write this code every time you checked whether sprites were touching?\r
        \r
        \r
        [//]:
        # (https://images.code.org/7afe11fccea99cd7f31497710cce5ac3-image-1471190004988.png)\r
        \r
        [//]:
        # (https://images.code.org/0b6e98b829379d88b9952ee013cf70bd-image-1471190009596.png)\r
        \r
        [//]:
        # (https://images.code.org/49c7a3b6fe2eff7e51d3f40581b1dcbb-image-1471190256258.png)
      CSD U3 collisions build isTouching_2018_markdown_instruction: |-
        # Balloon\r
        \r
        The
        code below uses the sprites' x and y positions to check whether they are
        touching.  It will change the balloon sprite's animation when the tack touches
        it.  Use the arrow keys to move the tack until it touches the balloon.\r
        \r
        #
        Do This\r
        \r
        * You do not need to change any code on this level.\r
        * Read
        the if statements inside the draw loop and find the different sprite properties
        and how they are compared.\r
        * Discuss the code with your partner.  Would
        you want to write this code every time you checked whether sprites were touching?\r
        \r
        \r
        [//]:
        # (https://images.code.org/7afe11fccea99cd7f31497710cce5ac3-image-1471190004988.png)\r
        \r
        [//]:
        # (https://images.code.org/0b6e98b829379d88b9952ee013cf70bd-image-1471190009596.png)\r
        \r
        [//]:
        # (https://images.code.org/49c7a3b6fe2eff7e51d3f40581b1dcbb-image-1471190256258.png)
      CSD U3 collisions bumper_markdown_instruction: |-
        # Bumper Cars\r
        \r
        The bumper
        cars are almost ready, but they still don't bump into each other.  Can you
        choose the right method to make the cars behave like they do in the picture?\r
        \r
        #
        Do This\r
        \r
        Use `displace`, `collide`, `bounce`, or `bounceOff` to make
        the sprites interact in the right way.\r
        \r
        [//]: # (https://images.code.org/682567536f824cc930ebed5c1b936e5f-image-1470415888369.png)\r
        \r
        [//]:
        # (https://images.code.org/8a6915fe703f4fe097094cad1e754a6f-image-1470415888371.png)\r
        \r
        [//]:
        # (https://images.code.org/0b9f5ca88dc99fc08d472fdba87d6e32-image-1470417254115.png)\r
        \r
        [//]:
        # (https://images.code.org/2085e5de29f7170465b0c7bd5e6b56e9-image-1470417254116.png)
      CSD U3 collisions car intro_markdown_instruction: |-
        # Frog Jump\r
        \r
        Look
        at the frog jumping game to the left.   It looks like the game from the last
        lesson, but the frog moves the mushroom if it hits it.  What code do you think
        would help the computer to know whether two sprites are touching?\r
        \r
        [//]:
        #  (https://images.code.org/ee9b677e93213846fe12abb3b34f563c-image-1469742494237.png)\r
        \r
        [//]:
        #  (https://images.code.org/5f738da1a2b1ef8af124e4470e2babe7-image-1469742830481.png)\r
        \r
        [//]:
        #  (https://images.code.org/f22e6b1a636337820e53fb37a137b3d1-image-1469742992179.png)
      CSD U3 collisions car intro_2018_markdown_instruction: |-
        # Frog Jump\r
        \r
        Look
        at the frog jumping game to the left.   It looks like the game from the last
        lesson, but the frog moves the mushroom if it hits it.  What code do you think
        would help the computer to know whether two sprites are touching?\r
        \r
        [//]:
        #  (https://images.code.org/ee9b677e93213846fe12abb3b34f563c-image-1469742494237.png)\r
        \r
        [//]:
        #  (https://images.code.org/5f738da1a2b1ef8af124e4470e2babe7-image-1469742830481.png)\r
        \r
        [//]:
        #  (https://images.code.org/f22e6b1a636337820e53fb37a137b3d1-image-1469742992179.png)
      CSD U3 collisions car_markdown_instruction: |-
        # Improve Your Game\r
        \r
        Now
        that you know how to use `isTouching` and `playSound`, you can make some fun
        things happen when your sprites run into each other.\r
        \r
        # Do This\r
        \r
        Use
        the `if`, `isTouching`, `playsound`, and any other blocks you want to add
        effects when your sprites collide.  You should have at least two effects.\r
        \r
        _Challenge:
        Can you add a score board to the top of the screen?  How would your game keep
        score, and how would the score be displayed?_
      CSD U3 collisions collide_markdown_instruction: |-
        # Save your treasure\r
        \r
        The
        pirate is trying to steal your treasure!  Use the arrow keys to move the pirate
        around the screen.  Can you change the code so the pirate can't get past
        the wall?\r
        \r
        # Do This\r
        \r
        Use the `collide` block to make the pirate
        sprite collide into the wall.\r
        \r
        [//]: #(https://images.code.org/04a7b28f7228570602238fed87420aab-image-1470944619236.png)\r
        \r
        [//]:
        #(https://images.code.org/8f7ec18621c97ce98d22337a1e21ddab-image-1470944619234.png)\r
        \r
        [//]:
        #(https://images.code.org/6b749a05857ea1e88fa46f7e2740c77c-image-1470944619235.png)
      CSD U3 collisions debug isTouching_markdown_instruction: |-
        # Debugging Collisions\r
        \r
        The
        balloon is popping before the tack touches it.  When sprites aren't doing
        what you expect, you can use the `debug` block to get more information about
        why the sprites are behaving that way.  Can you find out what's wrong in
        the code below?\r
        \r
        # Do This\r
        * Run the code and use the arrow keys
        to move the tack to pop the balloon.\r
        * In the code below, change `balloon.debug
        = false` to `balloon.debug = true`.\r
        * Add a new `debug` block to the code
        and set the tack sprite's debug property to `true`.\r
        * Run the code again,
        then discuss with your partner why the balloon is popping early.\r
        \r
        *Challenge:
        Can you use the animations tab to resize the balloon picture so it pops at
        the correct time?*\r
        \r
        [//]: # (https://images.code.org/7afe11fccea99cd7f31497710cce5ac3-image-1471190004988.png)\r
        \r
        [//]:
        # (https://images.code.org/0b6e98b829379d88b9952ee013cf70bd-image-1471190009596.png)\r
        \r
        [//]:
        # (https://images.code.org/49c7a3b6fe2eff7e51d3f40581b1dcbb-image-1471190256258.png)\r
        \r
        [//]:
        # (https://images.code.org/2892e65635d7a43d0664bb8ff58eb698-image-1471200175665.png)\r
        \r
        [//]:
        # (https://images.code.org/9ffeb3f543033353d073794071316860-image-1471200179449.png)
      CSD U3 collisions debug isTouching_2018_markdown_instruction: |-
        # Debugging
        Collisions\r
        \r
        The balloon is popping before the tack touches it.  When
        sprites aren't doing what you expect, you can use the `debug` block to get
        more information about why the sprites are behaving that way.  Can you find
        out what's wrong in the code below?\r
        \r
        # Do This\r
        * Run the code and
        use the arrow keys to move the tack to pop the balloon.\r
        * In the code below,
        change `balloon.debug = false` to `balloon.debug = true`.\r
        * Add a new `debug`
        block to the code and set the tack sprite's debug property to `true`.\r
        *
        Run the code again, then discuss with your partner why the balloon is popping
        early.\r
        \r
        *Challenge: Can you use the animations tab to resize the balloon
        picture so it pops at the correct time?*\r
        \r
        [//]: # (https://images.code.org/7afe11fccea99cd7f31497710cce5ac3-image-1471190004988.png)\r
        \r
        [//]:
        # (https://images.code.org/0b6e98b829379d88b9952ee013cf70bd-image-1471190009596.png)\r
        \r
        [//]:
        # (https://images.code.org/49c7a3b6fe2eff7e51d3f40581b1dcbb-image-1471190256258.png)\r
        \r
        [//]:
        # (https://images.code.org/2892e65635d7a43d0664bb8ff58eb698-image-1471200175665.png)\r
        \r
        [//]:
        # (https://images.code.org/9ffeb3f543033353d073794071316860-image-1471200179449.png)
      CSD U3 collisions debug_markdown_instruction: |-
        # Debug\r
        \r
        Sometimes sprites
        will behave in ways that are unexpected. There is a special `sprite.debug`
        property you can use to better understand why the sprites interact the way
        that they do.\r
        \r
        # Do This\r
        \r
        These two coins are round, so you would
        expect them to bounce in a certain way. Something weird is happening though!\r
        \r
        *
        Run the code and watch the way that the coins interact.\r
        * Use the `sprite.debug`
        block to make debug 'true' for both the sprites and run the code again.\r
        *
        Change the gold coin's starting x position to 51 and run the code again.\r
        *
        Discuss with a partner: Why do you think the coins are bouncing strangely?
      CSD U3 collisions debug_2018_markdown_instruction: |-
        # Debug\r
        \r
        Sometimes
        sprites will behave in ways that are unexpected. There is a special `sprite.debug`
        property you can use to better understand why the sprites interact the way
        that they do.\r
        \r
        # Do This\r
        \r
        These two coins are round, so you would
        expect them to bounce in a certain way. Something weird is happening though!\r
        \r
        *
        Run the code and watch the way that the coins interact.\r
        * Use the `sprite.debug`
        block to make debug 'true' for both the sprites and run the code again.\r
        *
        Change the gold coin's starting x position to 51 and run the code again.\r
        *
        Discuss with a partner: Why do you think the coins are bouncing strangely?
      CSD U3 collisions displace diagonal_markdown_instruction: |-
        # Diagonal Elevator\r
        \r
        Last
        time we saw balloon, it pushed the feather all the way off screen.  What do
        you think will happen when the balloon moves away from the feather while it's
        moving it?\r
        \r
        # Do This\r
        \r
        Use the `displace` block to make the balloon
        sprite push the feather sprite, and watch what happens when the sprites stop
        touching each other.\r
        \r
        [//]: # (https://images.code.org/a6c891b044cea1b6d8649a153e13739b-image-1470316517410.png)\r
        \r
        [//]:
        # (https://images.code.org/af2df53196186e50a58f64f6559a53ca-image-1470316589121.png)\r
        \r
        [//]:
        # (https://images.code.org/fb739254c4d2f6745977a26e0481162a-image-1470316780326.png)\r
        \r
        [//]:
        # (https://images.code.org/341bb1ce73ba812f2bd0afeb01e08aad-image-1470316853020.png)
      CSD U3 collisions displace intro_markdown_instruction: |-
        # Displace\r
        \r
        The
        interaction you've been programming is so common that there's a block designed
        to do the interaction for you. `sprite.displace()` that will make one sprite
        push the other when they touch. The code underlying this block might look
        a lot like what you just wrote, but now you no longer need to worry about
        writing those details yourself.\r
        \r
        # Do This\r
        \r
        Someone tried to use
        the `sprite.displace()` block to make the **elephant push the hippo**, but
        there is a bug. Can you change the code so that the elephant pushes the hippo
        off the screen?\r
        \r
        * Find the line of code where the `sprite.displace()`
        block is used and fix the error.
      CSD U3 collisions displace intro_2018_markdown_instruction: |-
        # Displace\r
        \r
        The
        interaction you've been programming is so common that there's a block designed
        to do the interaction for you. `sprite.displace()` that will make one sprite
        push the other when they touch. The code underlying this block might look
        a lot like what you just wrote, but now you no longer need to worry about
        writing those details yourself.\r
        \r
        # Do This\r
        \r
        Someone tried to use
        the `sprite.displace()` block to make the **elephant push the hippo**, but
        there is a bug. Can you change the code so that the elephant pushes the hippo
        off the screen?\r
        \r
        * Find the line of code where the `sprite.displace()`
        block is used and fix the error.
      CSD U3 collisions displace x_markdown_instruction: |-
        # Program a Sprite Interaction\r
        \r
        You
        should have discussed with your classmates how you could create the sprite
        interaction you saw in the last level. Now it's your turn to program it yourself.
        How can you make the giraffe move the monkey off the screen?\r
        \r
        # Do This\r
        \r
        The
        giraffe is already moving across the screen toward the monkey but the sprite
        interaction itself hasn't been programmed.\r
        \r
        * Use the plan you developed
        with your classmates on the last level to program the sprite interaction yourself.\r
        \r
        [//]:
        # (https://images.code.org/2e6b993747a39cd5076dce219037903d-image-1470319674401.png)\r
        \r
        [//]:
        # (https://images.code.org/d44d7c1aa87ea7eeceea9e9b023408f9-image-1470319674396.png)
      CSD U3 collisions displace x_2018_markdown_instruction: |-
        # Program a Sprite
        Interaction\r
        \r
        You should have discussed with your classmates how you
        could create the sprite interaction you saw in the last level. Now it's your
        turn to program it yourself. How can you make the giraffe move the monkey
        off the screen?\r
        \r
        # Do This\r
        \r
        The giraffe is already moving across
        the screen toward the monkey but the sprite interaction itself hasn't been
        programmed.\r
        \r
        * Use the plan you developed with your classmates on the
        last level to program the sprite interaction yourself.\r
        \r
        [//]: # (https://images.code.org/2e6b993747a39cd5076dce219037903d-image-1470319674401.png)\r
        \r
        [//]:
        # (https://images.code.org/d44d7c1aa87ea7eeceea9e9b023408f9-image-1470319674396.png)
      CSD U3 collisions displace y_markdown_instruction: |-
        # Write Your Own Sprite
        Interaction\r
        \r
        In the last level you should have written code for a sprite
        interaction that you developed with your classmates. This time try to write
        the program on your own, but you can use the patterns you saw in the last
        level.\r
        \r
        # Do This\r
        \r
        The elephant should **push the hippo off the
        screen**. Notice that the elephant moves at a random Y velocity each time
        the program runs.\r
        \r
        * Using the patterns from the last level, write code
        that makes the elephant push the hippo off the screen.
      CSD U3 collisions displace y_2018_markdown_instruction: |-
        # Write Your Own Sprite
        Interaction\r
        \r
        In the last level you should have written code for a sprite
        interaction that you developed with your classmates. This time try to write
        the program on your own, but you can use the patterns you saw in the last
        level.\r
        \r
        # Do This\r
        \r
        The elephant should **push the hippo off the
        screen**. Notice that the elephant moves at a random Y velocity each time
        the program runs.\r
        \r
        * Using the patterns from the last level, write code
        that makes the elephant push the hippo off the screen.
      CSD U3 collisions egg template_markdown_instruction: |-
        # Template Level\r
        \r
        [//]:
        #  (https://images.code.org/82436176c744caa106cfc4971cd1db6c-image-1470247395711.png)\r
        \r
        [//]:
        #  (https://images.code.org/ea5def7998ed88d016ac7d8223aabb75-image-1470247399852.png)\r
        \r
        [//]:
        #  (https://images.code.org/b3a38abe5aeb799e61b7368ceb210873-image-1470247402163.png)\r
        \r
        [//]:
        #  (https://images.code.org/57c724cf77b338f3c13dc8271a76dd77-image-1470247525113.png)\r
        \r
        [//]:
        #  (https://images.code.org/68b31e0fe8b8b454225d87b0f4a0a5f8-image-1470317549553.png)\r
        \r
        [//]:
        #  (https://images.code.org/00e4ee128c4beb11c0c7a6bba6024494-image-1470317549555.png)
      CSD U3 collisions egg template_2018_markdown_instruction: |-
        # Template Level\r
        \r
        [//]:
        #  (https://images.code.org/82436176c744caa106cfc4971cd1db6c-image-1470247395711.png)\r
        \r
        [//]:
        #  (https://images.code.org/ea5def7998ed88d016ac7d8223aabb75-image-1470247399852.png)\r
        \r
        [//]:
        #  (https://images.code.org/b3a38abe5aeb799e61b7368ceb210873-image-1470247402163.png)\r
        \r
        [//]:
        #  (https://images.code.org/57c724cf77b338f3c13dc8271a76dd77-image-1470247525113.png)\r
        \r
        [//]:
        #  (https://images.code.org/68b31e0fe8b8b454225d87b0f4a0a5f8-image-1470317549553.png)\r
        \r
        [//]:
        #  (https://images.code.org/00e4ee128c4beb11c0c7a6bba6024494-image-1470317549555.png)
      CSD U3 collisions egg_markdown_instruction: |-
        # Applesauce\r
        \r
        When the apple
        hits the blender, the blender should turn on.\r
        \r
        # Do This\r
        \r
        Use
        the `isTouching` block to make the blender shake back and forth when the apple
        sprite touches the blender sprite.  The shaking motion is already coded using
        the random block, so you just have to check when the two sprites are touching.\r
        \r
        *Challenge:
        Can you make the apple disappear when it touches the blender?*\r
        \r
        [//]:
        #  (https://images.code.org/82436176c744caa106cfc4971cd1db6c-image-1470247395711.png)\r
        \r
        [//]:
        #  (https://images.code.org/ea5def7998ed88d016ac7d8223aabb75-image-1470247399852.png)\r
        \r
        [//]:
        #  (https://images.code.org/b3a38abe5aeb799e61b7368ceb210873-image-1470247402163.png)\r
        \r
        [//]:
        #  (https://images.code.org/57c724cf77b338f3c13dc8271a76dd77-image-1470247525113.png)\r
        \r
        [//]:
        #  (https://images.code.org/68b31e0fe8b8b454225d87b0f4a0a5f8-image-1470317549553.png)\r
        \r
        [//]:
        #  (https://images.code.org/00e4ee128c4beb11c0c7a6bba6024494-image-1470317549555.png)
      CSD U3 collisions egg2_markdown_instruction: |-
        # Making Sounds\r
        \r
        You can
        also use code to play a blender sound.\r
        \r
        # Do This\r
        \r
        Use the `playSound`
        block from the "World" drawer to play the "https://docs.code.org/sounds/blender.mp3"
        sound when the apple touches the blender.  You will need to paste the address
        of the sound into the block, so it looks like this: ![](https://images.code.org/8376df7a92ff8e6ba0a2d6e51c24547e-image-1484091385498.34.57
        PM.png)\r
        \r
        [//]: #  (https://images.code.org/82436176c744caa106cfc4971cd1db6c-image-1470247395711.png)\r
        \r
        [//]:
        #  (https://images.code.org/ea5def7998ed88d016ac7d8223aabb75-image-1470247399852.png)\r
        \r
        [//]:
        #  (https://images.code.org/b3a38abe5aeb799e61b7368ceb210873-image-1470247402163.png)\r
        \r
        [//]:
        #  (https://images.code.org/57c724cf77b338f3c13dc8271a76dd77-image-1470247525113.png)\r
        \r
        [//]:
        #  (https://images.code.org/68b31e0fe8b8b454225d87b0f4a0a5f8-image-1470317549553.png)\r
        \r
        [//]:
        #  (https://images.code.org/00e4ee128c4beb11c0c7a6bba6024494-image-1470317549555.png)\r
        \r
        [//]:
        #  (https://images.code.org/8376df7a92ff8e6ba0a2d6e51c24547e-image-1484091385498.34.57
        PM.png)
      CSD U3 collisions egg2_2018_markdown_instruction: |-
        # Making Sounds\r
        \r
        You
        can also use code to play a blender sound.\r
        \r
        # Do This\r
        \r
        Use the
        `playSound` block from the "World" drawer to play the "https://docs.code.org/sounds/blender.mp3"
        sound when the apple touches the blender.  You will need to paste the address
        of the sound into the block, so it looks like this: ![](https://images.code.org/8376df7a92ff8e6ba0a2d6e51c24547e-image-1484091385498.34.57
        PM.png)\r
        \r
        [//]: #  (https://images.code.org/82436176c744caa106cfc4971cd1db6c-image-1470247395711.png)\r
        \r
        [//]:
        #  (https://images.code.org/ea5def7998ed88d016ac7d8223aabb75-image-1470247399852.png)\r
        \r
        [//]:
        #  (https://images.code.org/b3a38abe5aeb799e61b7368ceb210873-image-1470247402163.png)\r
        \r
        [//]:
        #  (https://images.code.org/57c724cf77b338f3c13dc8271a76dd77-image-1470247525113.png)\r
        \r
        [//]:
        #  (https://images.code.org/68b31e0fe8b8b454225d87b0f4a0a5f8-image-1470317549553.png)\r
        \r
        [//]:
        #  (https://images.code.org/00e4ee128c4beb11c0c7a6bba6024494-image-1470317549555.png)\r
        \r
        [//]:
        #  (https://images.code.org/8376df7a92ff8e6ba0a2d6e51c24547e-image-1484091385498.34.57
        PM.png)
      CSD U3 collisions egg_2018_markdown_instruction: |-
        # Applesauce\r
        \r
        When
        the apple hits the blender, the blender should turn on.\r
        \r
        # Do This\r
        \r
        Use
        the `isTouching` block to make the blender shake back and forth when the apple
        sprite touches the blender sprite.  The shaking motion is already coded using
        the random block, so you just have to check when the two sprites are touching.\r
        \r
        *Challenge:
        Can you make the apple disappear when it touches the blender?*\r
        \r
        [//]:
        #  (https://images.code.org/82436176c744caa106cfc4971cd1db6c-image-1470247395711.png)\r
        \r
        [//]:
        #  (https://images.code.org/ea5def7998ed88d016ac7d8223aabb75-image-1470247399852.png)\r
        \r
        [//]:
        #  (https://images.code.org/b3a38abe5aeb799e61b7368ceb210873-image-1470247402163.png)\r
        \r
        [//]:
        #  (https://images.code.org/57c724cf77b338f3c13dc8271a76dd77-image-1470247525113.png)\r
        \r
        [//]:
        #  (https://images.code.org/68b31e0fe8b8b454225d87b0f4a0a5f8-image-1470317549553.png)\r
        \r
        [//]:
        #  (https://images.code.org/00e4ee128c4beb11c0c7a6bba6024494-image-1470317549555.png)
      CSD U3 collisions flyman add obstacles_markdown_instruction: |-
        # Flyer Game
        - Add Obstacle\r
        \r
        This is the flyer game you built in the last lesson.
        For the next several levels, you'll be adding an obstacle sprite to the game,
        using some of the sprite interactions you just learned. At the end you'll
        have a chance to keep adding on ideas of your own.\r
        \r
        <img src="https://images.code.org/47f8c130ca668080d48520ef9aced093-image-1477069764142.08.58
        AM.png" style="float:right;width:200px">\r
        \r
        # Do This\r
        \r
        Add an
        obstacle sprite to the game. You can use whatever image you like from the
        animation tab but the example shown here uses a sun. Right now you just need
        to add the sprite to your game and give it an animation.\r
        \r
        * Add a new
        sprite to your game called "obstacle".\r
        * In the animation tab create
        a new animation for your obstacle. In the example a sun image was chosen.\r
        *
        Use the `sprite.setAnimation()` block to give your sprite the image you chose.\r
        *
        Run the code and make sure the sprite appears where you want it on the screen.
        You may need to set its X, Y, and scale properties to get it to look the way
        you want.
      CSD U3 collisions flyman add obstacles_2018_markdown_instruction: |-
        # Flyer
        Game - Add Obstacle\r
        \r
        This is the flyer game you built in the last lesson.
        For the next several levels, you'll be adding an obstacle sprite to the game,
        using some of the sprite interactions you just learned. At the end you'll
        have a chance to keep adding on ideas of your own.\r
        \r
        <img src="https://images.code.org/47f8c130ca668080d48520ef9aced093-image-1477069764142.08.58
        AM.png" style="float:right;width:200px">\r
        \r
        # Do This\r
        \r
        Add an
        obstacle sprite to the game. You can use whatever image you like from the
        animation tab but the example shown here uses a sun. Right now you just need
        to add the sprite to your game and give it an animation.\r
        \r
        * Add a new
        sprite to your game called "obstacle".\r
        * In the animation tab create
        a new animation for your obstacle. In the example a sun image was chosen.\r
        *
        Use the `sprite.setAnimation()` block to give your sprite the image you chose.\r
        *
        Run the code and make sure the sprite appears where you want it on the screen.
        You may need to set its X, Y, and scale properties to get it to look the way
        you want.
      CSD U3 collisions flyman bounceOff_markdown_instruction: |-
        # Flyer Game - Interacting
        with the Obstacle\r
        \r
        You don't want your player to be able to move through
        the obstacle, so you'll need to use one of the sprite interactions.\r
        \r
        #
        Do This\r
        \r
        * Add code to your game that prevents your player from moving
        through the obstacle.\r
        * If you use one of the bounce interactions, decide
        whether you want to reset the bounciness of your character.\r
        * Discuss with
        a neighbor: Which sprite interaction did you decide to use? Is there more
        than one sprite interaction that works the way you'd expect?
      CSD U3 collisions flyman bounceOff_2018_markdown_instruction: |-
        # Flyer Game
        - Interacting with the Obstacle\r
        \r
        You don't want your player to be able
        to move through the obstacle, so you'll need to use one of the sprite interactions.\r
        \r
        #
        Do This\r
        \r
        * Add code to your game that prevents your player from moving
        through the obstacle.\r
        * If you use one of the bounce interactions, decide
        whether you want to reset the bounciness of your character.\r
        * Discuss with
        a neighbor: Which sprite interaction did you decide to use? Is there more
        than one sprite interaction that works the way you'd expect?
      CSD U3 collisions flyman change colliders_markdown_instruction: |-
        # Flyer Game
        - Change Colliders\r
        \r
        Right now your colliders are all rectangular. Switch
        them over to circles to get more interesting and realistic bounces and collisions.\r
        \r
        #
        Do This\r
        \r
        * Use the `sprite.setCollider()` block to change the colliders
        of your sprites to circles.\r
        * Set your sprites' debug properties to `true`
        to make sure your game is working the way you want.\r
        * Play your game to
        make sure it's working the way you want.
      CSD U3 collisions flyman change colliders_2018_markdown_instruction: |-
        # Flyer
        Game - Change Colliders\r
        \r
        Right now your colliders are all rectangular.
        Switch them over to circles to get more interesting and realistic bounces
        and collisions.\r
        \r
        # Do This\r
        \r
        * Use the `sprite.setCollider()` block
        to change the colliders of your sprites to circles.\r
        * Set your sprites'
        debug properties to `true` to make sure your game is working the way you want.\r
        *
        Play your game to make sure it's working the way you want.
      CSD U3 collisions flyman displace coin_markdown_instruction: |-
        # Flyer Game
        - Coin Behind the Obstacle\r
        \r
        Right now your coin is moving to random
        locations. That means sometimes it even will appear behind your obstacle,
        so your character can't get to it. Using sprite interactions you can fix
        this problem.\r
        \r
        # Do This\r
        \r
        * Add code to your game that prevents
        the coin from moving behind the obstacle. Don't be afraid to try out ideas
        just to see how they work.\r
        * Discuss with a neighbor: Which sprite interaction
        did you decide to use? Is there more than one sprite interaction that works
        the way you'd expect?
      CSD U3 collisions flyman displace coin_2018_markdown_instruction: |-
        # Flyer
        Game - Coin Behind the Obstacle\r
        \r
        Right now your coin is moving to random
        locations. That means sometimes it even will appear behind your obstacle,
        so your character can't get to it. Using sprite interactions you can fix
        this problem.\r
        \r
        # Do This\r
        \r
        * Add code to your game that prevents
        the coin from moving behind the obstacle. Don't be afraid to try out ideas
        just to see how they work.\r
        * Discuss with a neighbor: Which sprite interaction
        did you decide to use? Is there more than one sprite interaction that works
        the way you'd expect?
      CSD U3 collisions flyman make it your own_markdown_instruction: |-
        # Flyer Game
        - Make It Your Own\r
        \r
        Time to make this game your own by using what you've
        learned about sprite interactions.\r
        \r
        # Do This\r
        \r
        Add at least one
        more aspect to your game that uses sprite interactions. There's some ideas
        below or you can choose to add features of your own. Make sure you're ready
        to share your ideas with your classmates.\r
        \r
        * Create "edge" sprites
        to keep your character from bouncing out.\r
        * Add platforms to the game for
        your character to navigate around.\r
        * Add another obstacle to your game.\r
        *
        Create another idea of your own.
      CSD U3 collisions flyman make it your own_2018_markdown_instruction: |-
        # Flyer
        Game - Make It Your Own\r
        \r
        Time to make this game your own by using what
        you've learned about sprite interactions.\r
        \r
        # Do This\r
        \r
        Add at
        least one more aspect to your game that uses sprite interactions. There's
        some ideas below or you can choose to add features of your own. Make sure
        you're ready to share your ideas with your classmates.\r
        \r
        * Create "edge"
        sprites to keep your character from bouncing out.\r
        * Add platforms to the
        game for your character to navigate around.\r
        * Add another obstacle to your
        game.\r
        * Create another idea of your own.
      CSD U3 collisions getSpeed_markdown_instruction: |-
        # Dashboard\r
        \r
        Here's
        a car that can be controlled with the arrow keys.  The dashboard at the bottom
        should show the car's speed and direction, even when it is off the screen.\r
        \r
        #
        Do This\r
        \r
        * Use the `getDirection()` block to turn the compass needle
        to the car's current direction. [Show me where](#triggercallout=code_triggered1)\r
        *
        Use the `getSpeed()` block to display the car's current speed on the dashboard,
        instead of 0. [Show me where](#triggercallout=code_triggered2)\r
        \r
        *Challenge:
        Can you also show the car's current location on the dashboard?*\r
        \r
        [//]:
        #(https://images.code.org/b87e51b8ed026ca239cbf629c9a58b26-image-1472571454000.png)\r
        \r
        [//]:
        #(https://images.code.org/669fd48b2a28602220c2d07b717c1ace-image-1472571454002.png)\r
        \r
        [//]:
        #(https://images.code.org/e3013d8428f54f7fbde63d0a4a8eaafb-image-1472571782304.png)
      CSD U3 collisions horse_markdown_instruction: |-
        # Rainbow Horse\r
        \r
        When
        the rainbow touches the horse, it should turn into a unicorn.\r
        \r
        # Do
        This\r
        \r
        Use the `if`, `isTouching`, and `setAnimation` blocks to change
        the horse sprite's image when the rainbow touches it.  The unicorn image
        is already loaded in the animations tab for you.\r
        \r
        [//]: #  (https://images.code.org/4d1d0e36e574117140ecc377d406c1de-image-1470256869920.png)\r
        \r
        [//]:
        #  (https://images.code.org/b913bc2ee2231b908892472240a70105-image-1470256869922.png)\r
        \r
        [//]:
        #  (https://images.code.org/558b42903bf40cc26410e651a85de922-image-1470256869923.png)\r
        \r
        [//]:
        #  (https://images.code.org/1d41d2e5b3b55037911b8f73bdc2ff48-image-1470257277875.png)
      CSD U3 collisions horse_2018_markdown_instruction: |-
        # Rainbow Horse\r
        \r
        When
        the rainbow touches the horse, it should turn into a unicorn.\r
        \r
        # Do
        This\r
        \r
        Use the `if`, `isTouching`, and `setAnimation` blocks to change
        the horse sprite's image when the rainbow touches it.  The unicorn image
        is already loaded in the animations tab for you.\r
        \r
        [//]: #  (https://images.code.org/4d1d0e36e574117140ecc377d406c1de-image-1470256869920.png)\r
        \r
        [//]:
        #  (https://images.code.org/b913bc2ee2231b908892472240a70105-image-1470256869922.png)\r
        \r
        [//]:
        #  (https://images.code.org/558b42903bf40cc26410e651a85de922-image-1470256869923.png)\r
        \r
        [//]:
        #  (https://images.code.org/1d41d2e5b3b55037911b8f73bdc2ff48-image-1470257277875.png)
      CSD U3 collisions isTouching intro_markdown_instruction: |-
        # isTouching()\r
        \r
        Writing
        out the math each time you want to check whether two sprites are touching
        can take a while, so a programmer created the `isTouching` block, which can
        check whether one sprite is touching another sprite (the *target*).  The computer
        is still doing the same math as in the previous program, but you don't have
        to worry about it because another programmer already did that work.\r
        \r
        #
        Do This\r
        \r
        Inside the draw loop, drag the `isTouching` block into the
        `if` block.  &nbsp;&nbsp; ( [Show me where](#triggercallout=code_triggered)
        )\r
        \r
        *Hint: Don't forget to change the "sprite" to "balloon" and
        the "target" to "tack".*\r
        \r
        [//]: # (https://images.code.org/7afe11fccea99cd7f31497710cce5ac3-image-1471190004988.png)\r
        \r
        [//]:
        # (https://images.code.org/0b6e98b829379d88b9952ee013cf70bd-image-1471190009596.png)\r
        \r
        [//]:
        # (https://images.code.org/49c7a3b6fe2eff7e51d3f40581b1dcbb-image-1471190256258.png)
      CSD U3 collisions isTouching intro_2018_markdown_instruction: |-
        # isTouching()\r
        \r
        Writing
        out the math each time you want to check whether two sprites are touching
        can take a while, so a programmer created the `isTouching` block, which can
        check whether one sprite is touching another sprite (the *target*).  The computer
        is still doing the same math as in the previous program, but you don't have
        to worry about it because another programmer already did that work.\r
        \r
        #
        Do This\r
        \r
        Inside the draw loop, drag the `isTouching` block into the
        `if` block.  &nbsp;&nbsp; ( [Show me where](#triggercallout=code_triggered)
        )\r
        \r
        *Hint: Don't forget to change the "sprite" to "balloon" and
        the "target" to "tack".*\r
        \r
        [//]: # (https://images.code.org/7afe11fccea99cd7f31497710cce5ac3-image-1471190004988.png)\r
        \r
        [//]:
        # (https://images.code.org/0b6e98b829379d88b9952ee013cf70bd-image-1471190009596.png)\r
        \r
        [//]:
        # (https://images.code.org/49c7a3b6fe2eff7e51d3f40581b1dcbb-image-1471190256258.png)
      CSD U3 collisions obstacle_markdown_instruction: |-
        # Mouse Maze\r
        \r
        The mouse
        needs to find its way through the maze to get to the cheese, but right now
        it passes through the walls.  Can you change the code so that the mouse is
        blocked by the walls?\r
        \r
        # Do This\r
        \r
        Add a `displace`, `collide`,
        `bounce`, or `bounceOff` block in the draw loop to make the sprites interact
        in the right way.\r
        \r
        [//]: # (https://images.code.org/cefb99d244b9167314128578e477808c-image-1470948228670.png)\r
        \r
        [//]:
        # (https://images.code.org/e0cf14ae384355129b32b73ef64ed77e-image-1470948281047.png)
      CSD U3 collisions open_markdown_instruction: |-
        # Your Choice\r
        \r
        You've
        seen sprites do many things when they collide with each other: rotate, disappear,
        change animation, or even make a new sprite appear on the screen.  Now it's
        your turn to choose what the sprites can do.  Decide what two animations you
        want to use for your sprite, and what you want to happen when they touch each
        other, then code your choice.  You may also choose to change the position,
        speed, and direction of your sprites.\r
        \r
        # Do This\r
        * Decide what your
        sprites should look like, and use `setAnimation` to give them that image\r
        *
        Change the starting position of your sprites in the `createSprite` block\r
        *
        Use `setSpeedAndDirection` or `velocityX` and `velocityY` to make your sprites
        move how you want\r
        * Use the `if` block, with `isTouching` and `rotate`,
        `visible`, `setAnimation` or any other block to make your sprites react when
        they collide.
      CSD U3 collisions overlap x_markdown_instruction: |-
        # Turtle Race\r
        \r
        The
        turtle moves forward every time you press the left key.  When he touches the
        finish line, he should get a trophy.  The trophy will appear when `isTouchingX`
        is true.  Can you add code to make sure it is set to true when the turtle
        gets to the finish line?\r
        \r
        # Do This\r
        \r
        Add code inside the draw
        loop to set the values of the variables that have been created for you.  Then,
        test your program by playing the game.\r
        \r
        \r
        [//]: #  (https://images.code.org/af2cffe952997258eb6b5573cfe9a29f-image-1470188585528.png)\r
        \r
        [//]:
        #  (https://images.code.org/d2eb9684743d45ef1e10ff4602936107-image-1470188590517.png)\r
        \r
        [//]:
        #  (https://images.code.org/98aee1ed11c7e00cd66718b4c232ab66-image-1470190293465.png)\r
        \r
        [//]:
        #  (https://images.code.org/fb129d34e3089763f35dfc8980d705ea-image-1470191576501.png)\r
        \r
        [//]:
        #  (https://images.code.org/3fc6da739dfd31b256618a560c12a076-image-1470191923150.png)
      CSD U3 collisions overlap y_markdown_instruction: |-
        # Fried Egg\r
        \r
        It's
        breakfast time!  When the egg hits the pan, it should start to fry.  Can you
        add code so that isTouchingX is set to true at the right time?\r
        \r
        # Do
        This\r
        \r
        Set the values of the variables so that `isTouchingX` is true
        when the egg hits the pan.\r
        \r
        [//]: #  (https://images.code.org/82436176c744caa106cfc4971cd1db6c-image-1470247395711.png)\r
        \r
        [//]:
        #  (https://images.code.org/ea5def7998ed88d016ac7d8223aabb75-image-1470247399852.png)\r
        \r
        [//]:
        #  (https://images.code.org/b3a38abe5aeb799e61b7368ceb210873-image-1470247402163.png)\r
        \r
        [//]:
        #  (https://images.code.org/57c724cf77b338f3c13dc8271a76dd77-image-1470247525113.png)\r
        \r
        [//]:
        #  (https://images.code.org/68b31e0fe8b8b454225d87b0f4a0a5f8-image-1470317549553.png)\r
        \r
        [//]:
        #  (https://images.code.org/00e4ee128c4beb11c0c7a6bba6024494-image-1470317549555.png)
      CSD U3 collisions overlap_markdown_instruction: |-
        # IDEK\r
        \r
        This is Tracey's
        idea.  Apparently horses turn into unicorns when they go through rainbows?  Use
        your arrow keys to aim the rainbow at the unicorn, then hit the space bar
        to make it fly toward the horse.\r
        \r
        # Do This\r
        \r
        Use two `if` blocks
        together to change the sprite's animation when the two sprites touch each
        other.  Then play the game to test your code.\r
        \r
        [//]: #  (https://images.code.org/4d1d0e36e574117140ecc377d406c1de-image-1470256869920.png)\r
        \r
        [//]:
        #  (https://images.code.org/b913bc2ee2231b908892472240a70105-image-1470256869922.png)\r
        \r
        [//]:
        #  (https://images.code.org/558b42903bf40cc26410e651a85de922-image-1470256869923.png)\r
        \r
        [//]:
        #  (https://images.code.org/1d41d2e5b3b55037911b8f73bdc2ff48-image-1470257277875.png)
      CSD U3 collisions pinball_markdown_instruction: |
        # Panda Game\r
        \r
        Press
        "Run" to try out the game on the left.  You can use the left and right arrow
        keys to control the paddle.  What types of sprite interactions do you see?  Which
        ones will use the `isTouching` block?  Which interactions have their own blocks?\r
        \r
        #
        Do This\r
        \r
        Play the game a few times and discuss with your partner what
        how you would program the different sprite interactions.\r
      CSD U3 collisions pinball2_markdown_instruction: |
        # Panda Game\r
        \r
        Here
        is the same game, but missing most of the interactions.  All of the missing
        interactions should be inside the "spriteInteractions" function.  ([Show
        me where](#triggercallout=code_triggered))  The comments will help you remember
        which interactions are missing.\r
        \r
        # Do This\r
        \r
        Use the blocks you
        know to program back the missing interactions.\r
      CSD U3 collisions pirate_markdown_instruction: |-
        # Hide your treasure\r
        <img
        style="float: right" src="https://images.code.org/2bcf0ba8d5efe69c4531627f2c4d2a1f-image-1472600812452.gif"
        />\r
        Your enemies are still after your treasure.  Use the arrow keys to move
        the person around the screen.  Can you change the code so that she can push
        the treasure behind the tree?\r
        \r
        # Do This\r
        \r
        Use `displace`, `collide`,
        `bounce`, or `bounceOff` to make the sprites interact in the right way.\r
        \r
        [//]:
        # (https://images.code.org/732942eef4d0c288bf445a4478aee6ec-image-1470947222110.png)\r
        \r
        [//]:
        # (https://images.code.org/1458d90cb97f3bd37508fa0ec3d997f8-image-1470947222109.png)\r
        \r
        [//]:
        # (https://images.code.org/56da2ef5cef40080e0d677c86aec3901-image-1470947222108.png)
      CSD U3 collisions predict set velocity code_markdown_instruction: |-
        # Sprite
        Interactions\r
        \r
        So far you've been able to create simple sprite interactions
        by using the `sprite.isTouching()` block. For example, you've reset a coin
        to a different location on the screen when a character touches it. Now it's
        time to start making sprites have more complex interactions.\r
        \r
        # Do This\r
        \r
        *
        Run the program and observe the interaction between the two sprites.\r
        *
        Discuss with a neighbor: Using only the commands you already know how could
        you create this kind of interaction? There are many ways to do it, but here
        are some blocks to consider:\r
        \t* `sprite.isTouching()`\r
            * `sprite.velocityX`\r
            *
        `sprite.velocityY`\r
            * `sprite.x`\r
            * `sprite.y`\r
        \r
        Be ready
        to share your ideas with your classmates.
      CSD U3 collisions predict set velocity code_2018_markdown_instruction: |-
        # Sprite
        Interactions\r
        \r
        So far you've been able to create simple sprite interactions
        by using the `sprite.isTouching()` block. For example, you've reset a coin
        to a different location on the screen when a character touches it. Now it's
        time to start making sprites have more complex interactions.\r
        \r
        # Do This\r
        \r
        *
        Run the program and observe the interaction between the two sprites.\r
        *
        Discuss with a neighbor: Using only the commands you already know how could
        you create this kind of interaction? There are many ways to do it, but here
        are some blocks to consider:\r
        \t* `sprite.isTouching()`\r
            * `sprite.velocityX`\r
            *
        `sprite.velocityY`\r
            * `sprite.x`\r
            * `sprite.y`\r
        \r
        Be ready
        to share your ideas with your classmates.
      CSD U3 collisions predict set velocity_markdown_instruction: |
        # Setting Velocity\r
        \r
        This
        program creates two sprites, one that's standing still in the middle of the
        screen and the other that moves towards it. Notice the one important line
        of code in this program\r
        \r
        \tif(sprite1.isTouching(sprite2)){\r
        \t\tsprite2.velocityX
        = sprite1.velocityX;\r
            }\r
        \r
        # Predict\r
        \r
        What do you think will
        happen when the two sprites touch? Write your answer and reasonings in the
        space below. Then run the code to see for yourself.\r
        \r
      CSD U3 collisions scoreboard_markdown_instruction: |-
        # Scoreboard\r
        \r
        You
        can also use `isTouching` to decide whether you should increase the score.  In
        this game, the score is stored inside the 'score' variable.  It is displayed
        on the screen using the `text` block.  ( [Show me where](#triggercallout=code_triggered)
        )\r
        \r
        # Do This\r
        \r
        * Use the `if` and `isTouching` blocks to determine
        whether the bunny has caught the carrot. ( [Show me where](#triggercallout=code_triggered2)
        )\r
        * If it has, do the following three things:\r
         * Use the counter pattern
        on the score variable to increase the score.\r
         * Reset the carrot's x position
        off the right-hand side of the screen.\r
         * Set the carrot's y position
        to a random number between 10 and 390.
      CSD U3 collisions scoreboard_2018_markdown_instruction: |-
        # Scoreboard\r
        \r
        You
        can also use `isTouching` to decide whether you should increase the score.  In
        this game, the score is stored inside the 'score' variable.  It is displayed
        on the screen using the `text` block.  ( [Show me where](#triggercallout=code_triggered)
        )\r
        \r
        # Do This\r
        \r
        * Use the `if` and `isTouching` blocks to determine
        whether the bunny has caught the carrot. ( [Show me where](#triggercallout=code_triggered2)
        )\r
        * If it has, do the following three things:\r
         * Use the counter pattern
        on the score variable to increase the score.\r
         * Reset the carrot's x position
        off the right-hand side of the screen.\r
         * Set the carrot's y position
        to a random number between 10 and 390.
      CSD U3 collisions setCollider_markdown_instruction: |-
        # setCollider\r
        \r
        Sprites
        interact based on the size and shape of their collider, not the images that
        are assigned to them. You can only see the collider when debug mode is turned
        on.  You can change the shape of the collider using the `sprite.setCollider()`
        block, which lets you pick between a "rectangle" or a "circle".  By default
        all colliders are "rectangle".\r
        \r
        # Do This\r
        \r
        * Find the `sprite.setCollider()`
        block for the gold coin, and change it from "rectangle" to "circle".\r
        *
        Add a new `sprite.setCollider()` block for the silver coin, and choose "circle"
        for the shape of the collider.\r
        * Run the code again to see how the sprites
        bounce.\r
        \r
        \r
        [//]: #  (https://images.code.org/8b7730146eaa9d439e6af34c0a21e802-image-1470321391887.png)\r
        \r
        [//]:
        #  (https://images.code.org/eca470a686b01c19981152fdab808804-image-1470321391888.png)
      CSD U3 collisions setCollider_2018_markdown_instruction: |-
        # setCollider\r
        \r
        Sprites
        interact based on the size and shape of their collider, not the images that
        are assigned to them. You can only see the collider when debug mode is turned
        on.  You can change the shape of the collider using the `sprite.setCollider()`
        block, which lets you pick between a "rectangle" or a "circle".  By default
        all colliders are "rectangle".\r
        \r
        # Do This\r
        \r
        * Find the `sprite.setCollider()`
        block for the gold coin, and change it from "rectangle" to "circle".\r
        *
        Add a new `sprite.setCollider()` block for the silver coin, and choose "circle"
        for the shape of the collider.\r
        * Run the code again to see how the sprites
        bounce.\r
        \r
        \r
        [//]: #  (https://images.code.org/8b7730146eaa9d439e6af34c0a21e802-image-1470321391887.png)\r
        \r
        [//]:
        #  (https://images.code.org/eca470a686b01c19981152fdab808804-image-1470321391888.png)
      CSD U3 collisions sidescroll2_markdown_instruction: |
        # Improve Your Game\r
        \r
        Now
        that you know how to use `isTouching` and `playSound`, you can make some fun
        things happen when your sprites run into each other.\r
        \r
        *Note: The `playSound`
        block now has an extra parameter called "loop" that can be set to true or
        false.  If this parameter is true, the sound will continue to play in a loop.*\r
        \r
        #
        Do This\r
        \r
        * Add at least two effects when your sprites collide.\r
        \r
        *Challenge:
        Add a scoreboard to the top of your screen.*\r
      CSD U3 collisions sidescroll2_2018_markdown_instruction: |
        # Improve Your Game\r
        \r
        Now
        that you know how to use `isTouching` and `playSound`, you can make some fun
        things happen when your sprites run into each other.\r
        \r
        *Note: The `playSound`
        block now has an extra parameter called "loop" that can be set to true or
        false.  If this parameter is true, the sound will continue to play in a loop.*\r
        \r
        #
        Do This\r
        \r
        * Add at least two effects when your sprites collide.\r
        \r
        *Challenge:
        Add a scoreboard to the top of your screen.*\r
      CSD U3 collisions sundae_markdown_instruction: |-
        # collide()\r
        \r
        The `collide`
        block is similar to `displace`, but it makes the sprite that uses it stop
        when it is touching the other sprite.  Can you use this to make the cherry
        stop when it gets to the top of the ice cream sundae?\r
        \r
        # Do This\r
        \r
        Use
        the `collide` block to make the cherry sprite stop when it runs into the ice
        cream sprite.\r
        \r
        [//]: # (https://images.code.org/491fb8bff907a183bd1cf0061689d193-image-1470419927625.png)\r
        \r
        [//]:
        # (https://images.code.org/ea2066d640e74284b8c48e382f56bf1b-image-1470419927627.png)
      CSD U3 collisions tennis_markdown_instruction: |-
        # Tennis\r
        \r
        Complete the
        tennis game by making sure the ball and the racket interact in the right way.
        You can use your up and down arrows to control the racket.\r
        \r
        # Do This\r
        \r
        Add
        a `displace`, `collide`, `bounce`, or `bounceOff` block in the draw loop to
        make the sprites interact as they do in the picture.\r
        \r
        _Challenge: Can
        you add a scoreboard that will add a point every time the ball is hit, and
        subtract one every time it's missed?_\r
        \r
        [//]: # (https://images.code.org/8d8cf039f50114c07a21e73bbc1c8dfe-image-1470418244037.png)\r
        \r
        [//]:
        # (https://images.code.org/d05be653ae7e4717353dffd08af9c656-image-1470418244039.png)
      CSD U3 collisions try blocks_markdown_instruction: |-
        # More Collision Blocks\r
        \r
        Three
        new types of sprite interactions have been added to the toolbox, `sprite.collide()`,
        `sprite.bounce()`, and `sprite.bounceOff()`. How do you think they'll affect
        the sprites?\r
        \r
        # Do This\r
        \r
        * Switch out the displace block for the
        `sprite.collide()`, `sprite.bounce()`, and `sprite.bounceOff()` blocks. (
        [Show me where](#triggercallout=code_triggered) )\r
        \t* *Hint: If you're
        having trouble doing this with blocks then switch over to text mode.*\r
        *
        Discuss with a neighbor: What is the difference between the four different
        sprite interactions? What do you think the purpose of each block is?\r
        \r
        \r
        [//]:
        #  (https://images.code.org/8b7730146eaa9d439e6af34c0a21e802-image-1470321391887.png)\r
        \r
        [//]:
        #  (https://images.code.org/eca470a686b01c19981152fdab808804-image-1470321391888.png)
      CSD U3 collisions try blocks_2018_markdown_instruction: |-
        # More Collision Blocks\r
        \r
        Three
        new types of sprite interactions have been added to the toolbox, `sprite.collide()`,
        `sprite.bounce()`, and `sprite.bounceOff()`. How do you think they'll affect
        the sprites?\r
        \r
        # Do This\r
        \r
        * Switch out the displace block for the
        `sprite.collide()`, `sprite.bounce()`, and `sprite.bounceOff()` blocks. (
        [Show me where](#triggercallout=code_triggered) )\r
        \t* *Hint: If you're
        having trouble doing this with blocks then switch over to text mode.*\r
        *
        Discuss with a neighbor: What is the difference between the four different
        sprite interactions? What do you think the purpose of each block is?\r
        \r
        \r
        [//]:
        #  (https://images.code.org/8b7730146eaa9d439e6af34c0a21e802-image-1470321391887.png)\r
        \r
        [//]:
        #  (https://images.code.org/eca470a686b01c19981152fdab808804-image-1470321391888.png)
      CSD U3 collisions turtle_markdown_instruction: |-
        # Debugging Sprite Interactions\r
        \r
        Sprite
        interactions just run some code when they're called. The interactions are
        not "remembered" by the game. If you want one sprite to bounce or collide
        with another then it needs to be a part of the draw loop. If you forget then
        this can lead to unexpected behavior.\r
        \r
        # Do This\r
        \r
        The turtle can
        be moved with the arrow keys. It's not supposed to be able to walk through
        the tree, but something is wrong in the code. Can you find and correct the
        bug in the code?\r
        \r
        * Run the code and try to make the turtle collide
        with the tree.\r
        * Look through the code and discuss with your partner what
        the problem is.\r
        * Correct the code, then run it again to make sure it works.
      CSD U3 collisions turtle_2018_markdown_instruction: |-
        # Debugging Sprite Interactions\r
        \r
        Sprite
        interactions just run some code when they're called. The interactions are
        not "remembered" by the game. If you want one sprite to bounce or collide
        with another then it needs to be a part of the draw loop. If you forget then
        this can lead to unexpected behavior.\r
        \r
        # Do This\r
        \r
        The turtle can
        be moved with the arrow keys. It's not supposed to be able to walk through
        the tree, but something is wrong in the code. Can you find and correct the
        bug in the code?\r
        \r
        * Run the code and try to make the turtle collide
        with the tree.\r
        * Look through the code and discuss with your partner what
        the problem is.\r
        * Correct the code, then run it again to make sure it works.
      CSD U3 collisions types_markdown_instruction: |-
        # Collision Types\r
        \r
        There
        are four types of collisions that we use in Game Lab.  These blocks will cause
        a certain type of interaction between the _sprite_ and its _target_.\r
        \r
        ##
        displace\r
        \r
        The `displace` block causes the sprite to push the target
        as long as they are touching each other. The sprite keeps moving normally.\r
        \r
        ##
        collide\r
        \r
        The `collide` block makes the sprite stop when it runs into
        the target.  If the target is moving, it will push the sprite with it.  The
        target keeps moving normally.\r
        \r
        ## bounce\r
        \r
        The `bounce` block makes
        the sprite and the target bounce when they touch each other.  Both the sprite
        and the target change how they are moving.\r
        \r
        ## bounceOff\r
        \r
        The
        `bounceOff` block makes the sprite bounce off the target.  The target keeps
        moving normally.\r
        \r
        \r
        \r
        # Do This\r
        \r
        Choose the best block to
        model the basketball bouncing off the floor. ( [Show me where](#triggercallout=code_triggered)
        )\r
        \r
        [//]: # (https://images.code.org/24355fc6377cfafdce3ce2b3568a33c3-image-1470343728940.png)\r
        \r
        [//]:
        # (https://images.code.org/87e4306e0371c7975b8fb2583657ee4a-image-1470343728942.png)
      CSD U3 collisions types_2018_markdown_instruction: |-
        # Collision Types\r
        \r
        There
        are four types of collisions that we use in Game Lab.  These blocks will cause
        a certain type of interaction between the _sprite_ and its _target_.\r
        \r
        ##
        displace\r
        \r
        The `displace` block causes the sprite to push the target
        as long as they are touching each other. The sprite keeps moving normally.\r
        \r
        ##
        collide\r
        \r
        The `collide` block makes the sprite stop when it runs into
        the target.  If the target is moving, it will push the sprite with it.  The
        target keeps moving normally.\r
        \r
        ## bounce\r
        \r
        The `bounce` block makes
        the sprite and the target bounce when they touch each other.  Both the sprite
        and the target change how they are moving.\r
        \r
        ## bounceOff\r
        \r
        The
        `bounceOff` block makes the sprite bounce off the target.  The target keeps
        moving normally.\r
        \r
        \r
        \r
        # Do This\r
        \r
        Choose the best block to
        model the basketball bouncing off the floor. ( [Show me where](#triggercallout=code_triggered)
        )\r
        \r
        [//]: # (https://images.code.org/24355fc6377cfafdce3ce2b3568a33c3-image-1470343728940.png)\r
        \r
        [//]:
        # (https://images.code.org/87e4306e0371c7975b8fb2583657ee4a-image-1470343728942.png)
      CSD U3 counter example_markdown_instruction: |-
        # The Counter Pattern\r
        \r
        In
        this program, the draw loop is used to make the sprites move across the screen.\r
        \r
        #
        Do This\r
        \r
        * Run the code and discuss with your partner how you think
        it works.
      CSD U3 dancing alien_markdown_instruction: |-
        # Sprites in the Draw Loop\r
        \r
        By
        changing sprite properties in the draw loop, you can animate your characters.
        \r
        \r
        This animation has also been slowed down.  At the beginning of the
        program the `World.frameRate` block has been used to set the frame rate to
        10. Usually the frame rate is 30. Feel free to explore different frame rates.\r
        \r
        #
        Do This\r
        * Run the code to see how it works.\r
        * Discuss with your partner
        why some code is inside the draw loop and some code is outside.\r
        * Try changing
        the frame rate and running the code again.
      CSD U3 dancing alien_2018_markdown_instruction: |-
        # Sprites in the Draw Loop\r
        \r
        By
        changing sprite properties in the draw loop, you can animate your characters.
        \r
        \r
        This animation has also been slowed down.  At the beginning of the
        program the `World.frameRate` block has been used to set the frame rate to
        10. Usually the frame rate is 30. Feel free to explore different frame rates.\r
        \r
        #
        Do This\r
        * Run the code to see how it works.\r
        * Discuss with your partner
        why some code is inside the draw loop and some code is outside.\r
        * Try changing
        the frame rate and running the code again.
      CSD U3 debug_markdown_instruction: |-
        <img src="https://images.code.org/249f124a9bbd3da7d6327a7be8ab73c9-image-1493138569984.41.50
        AM.png" style="float:right;width:150px;">\r
        \r
        # Debugging\r
        \r
        Often,
        code doesn't work the first time it runs, and programmers have to debug it.  The
        code below is supposed to make the picture on the right, but the programmer
        got confused about which order the code should be in, as well as how to put
        a square in the right place on the screen.\r
        \r
        # Do This\r
        \r
        * Look
        at the code in the workspace.\r
        * Change the code so it makes the picture
        on the right.\r
         * (You'll need to move one line of code AND change the
        coordinates of the square.)
      CSD U3 debug_2018_markdown_instruction: |-
        <img src="https://images.code.org/249f124a9bbd3da7d6327a7be8ab73c9-image-1493138569984.41.50
        AM.png" style="float:right;width:150px;">\r
        \r
        # Debugging\r
        \r
        Often,
        code doesn't work the first time it runs, and programmers have to debug it.  The
        code below is supposed to make the picture on the right, but the programmer
        got confused about which order the code should be in, as well as how to put
        a square in the right place on the screen.\r
        \r
        # Do This\r
        \r
        * Look
        at the code in the workspace.\r
        * Change the code so it makes the picture
        on the right.\r
         * (You'll need to move one line of code AND change the
        coordinates of the square.)
      CSD U3 ellipse_markdown_instruction: |
        <img src="https://images.code.org/2ef29be10261f6a2c5df8f214d524f4d-image-1493060602794.02.44
        PM.png" style="float:right;width:150px;">\r
        \r
        # ellipse\r
        \r
        You can
        use `ellipse` to make a circle.\r
        \r
        # Do This\r
        \r
        * Look at the code
        that makes the ellipse.\r
        * Add a new ellipse of a different color.\r
      CSD U3 ellipse_2018_markdown_instruction: |
        <img src="https://images.code.org/2ef29be10261f6a2c5df8f214d524f4d-image-1493060602794.02.44
        PM.png" style="float:right;width:150px;">\r
        \r
        # ellipse\r
        \r
        You can
        use `ellipse` to make a circle.\r
        \r
        # Do This\r
        \r
        * Look at the code
        that makes the ellipse.\r
        * Add a new ellipse of a different color.\r
      CSD U3 fill_markdown_instruction: |
        <img src="https://images.code.org/c91390d63e52a3349c48f7b6b0057258-image-1493060802897.05.19
        PM.png" style="float:right;width:200px;">\r
        # fill(color)\r
        \r
        You can
        also make your rectangles different colors with `fill`. It will set the color
        for every shape that comes after it in the code.\r
        \r
        # Do This\r
        \r
        *
        Look at the code that sets the color. ( [Show me where](#triggercallout=fill)
        )\r
        * Change the color from blue to yellow.\r
        * Add a new square by dragging
        a `rect` block into the code area below the fill command ( [Show me where](#triggercallout=rect_block)
        ).  The new square can go any location on the screen you like.\r
      CSD U3 fill_2018_markdown_instruction: |
        <img src="https://images.code.org/c91390d63e52a3349c48f7b6b0057258-image-1493060802897.05.19
        PM.png" style="float:right;width:200px;">\r
        # fill(color)\r
        \r
        You can
        also make your rectangles different colors with `fill`. It will set the color
        for every shape that comes after it in the code.\r
        \r
        # Do This\r
        \r
        *
        Look at the code that sets the color. ( [Show me where](#triggercallout=fill)
        )\r
        * Change the color from blue to yellow.\r
        * Add a new square by dragging
        a `rect` block into the code area below the fill command ( [Show me where](#triggercallout=rect_block)
        ).  The new square can go any location on the screen you like.\r
      CSD U3 finishing touches_markdown_instruction: |-
        # Finishing Touches\r
        \r
        Now
        that you have the basis for your game, it's time to add some finishing touches.\r
        \r
        To
        make your game even better, try making at least two improvements to it. You
        can use the list below to help you, or you can come up with your own improvements
        that you'd like to make.\r
        \r
        * Find a way to keep your player from going
        off the edges of the screen.\r
        * Add a different item for your player to
        collect or avoid that are worth different point values.\r
        * Make a variable
        to keep track of how many lives your player has, and then end the game when
        the lives run out.\r
        * Add sprites that move in the background of your game.\r
        *
        Make another background to switch to when the score gets even higher, or when
        the game ends.\r
        * Give your game a way to end. Possible events to end your
        game could be the score reaching a certain value, or the amount of lives to
        keep the game running runs out.\r
        * If your game has platforms, try making
        the objects in your game interact with these platforms in some way.
      CSD U3 finishing touches_2018_markdown_instruction: |-
        # Finishing Touches\r
        \r
        Now
        that you have the basis for your game, it's time to add some finishing touches.\r
        \r
        To
        make your game even better, try making at least two improvements to it. You
        can use the list below to help you, or you can come up with your own improvements
        that you'd like to make.\r
        \r
        * Find a way to keep your player from going
        off the edges of the screen.\r
        * Add a different item for your player to
        collect or avoid that are worth different point values.\r
        * Make a variable
        to keep track of how many lives your player has, and then end the game when
        the lives run out.\r
        * Add sprites that move in the background of your game.\r
        *
        Make another background to switch to when the score gets even higher, or when
        the game ends.\r
        * Give your game a way to end. Possible events to end your
        game could be the score reaching a certain value, or the amount of lives to
        keep the game running runs out.\r
        * If your game has platforms, try making
        the objects in your game interact with these platforms in some way.
      CSD U3 game animations_markdown_instruction: |
        # Create your Animations\r
        \r
        Next
        you will create your animations in the animation tab.  Don't forget to make
        multiple animations if you want your sprite to change appearance according
        to how it's moving.\r
      CSD U3 game animations_2018_markdown_instruction: |
        # Create your Animations\r
        \r
        Next
        you will create your animations in the animation tab.  Don't forget to make
        multiple animations if you want your sprite to change appearance according
        to how it's moving.\r
      CSD U3 game backgrounds_markdown_instruction: |-
        # Create your Backgrounds\r
        \r
        Next,
        you'll create all of the background functions that you need for your game.  Some
        games only have one background, and others have more than one that's chosen
        according to user score or another aspect of gameplay.  You'll need to create
        a function for each separate background in your game.  You'll write the code
        to choose the correct background in the next level.\r
        \r
        * [Show me the
        block to create a new function](#triggercallout=callout1)\r
        * [Show me the
        area in the code to put my function](#triggercallout=callout2)\r
        \r
        After
        you create your functions, test them by calling them inside the draw loop,
        one background per test.\r
        \r
        * [Show me the block to call my function](#triggercallout=callout3)
      CSD U3 game backgrounds_2018_markdown_instruction: |-
        # Create your Backgrounds\r
        \r
        Next,
        you'll create all of the background functions that you need for your game.  Some
        games only have one background, and others have more than one that's chosen
        according to user score or another aspect of gameplay.  You'll need to create
        a function for each separate background in your game.  You'll write the code
        to choose the correct background in the next level.\r
        \r
        * [Show me the
        block to create a new function](#triggercallout=callout1)\r
        * [Show me the
        area in the code to put my function](#triggercallout=callout2)\r
        \r
        After
        you create your functions, test them by calling them inside the draw loop,
        one background per test.\r
        \r
        * [Show me the block to call my function](#triggercallout=callout3)
      CSD U3 game choose background_markdown_instruction: |
        # Choose your Backgrounds\r
        \r
        Now
        that you have the backgrounds that you need, you'll write the code to choose
        the correct background.  You've seen this done in [Lesson 15 Level 11](/s/csd3/stage/15/puzzle/11).\r
        \r
        After
        you've written the code, test it by changing the starting value of your variables
        and making sure the correct background shows up.\r
      CSD U3 game choose background_2018_markdown_instruction: |
        # Choose your Backgrounds\r
        \r
        Now
        that you have the backgrounds that you need, you'll write the code to choose
        the correct background.  You've seen this done in [Lesson 15 Level 11](/s/csd3/stage/15/puzzle/11).\r
        \r
        After
        you've written the code, test it by changing the starting value of your variables
        and making sure the correct background shows up.\r
      CSD U3 game create sprites_markdown_instruction: |
        # Create your Sprites\r
        \r
        Next
        you will create your sprites and give them starting properties in the "Create
        Sprites" area of your code.  For each sprite your should:\r
        \r
        * Create
        the sprite in the correct place on the screen\r
        * Set its animation (or color
        and size)\r
        * Set its velocity and rotation speed, if needed\r
        * Set its
        collider and bounciness, if needed\r
        \r
        After you create each sprite, test
        it before making the next one.  If your sprite starts off screen, first place
        it on the screen to test it, them move it back off screen once you know that
        it looks right.\r
        \r
        If your sprites position will need to be reset later
        in your game, it's a good idea to make a function that sets the position
        of this sprite that you can use again later.\r
      CSD U3 game create sprites_2018_markdown_instruction: |
        # Create your Sprites\r
        \r
        Next
        you will create your sprites and give them starting properties in the "Create
        Sprites" area of your code.  For each sprite your should:\r
        \r
        * Create
        the sprite in the correct place on the screen\r
        * Set its animation (or color
        and size)\r
        * Set its velocity and rotation speed, if needed\r
        * Set its
        collider and bounciness, if needed\r
        \r
        After you create each sprite, test
        it before making the next one.  If your sprite starts off screen, first place
        it on the screen to test it, them move it back off screen once you know that
        it looks right.\r
        \r
        If your sprites position will need to be reset later
        in your game, it's a good idea to make a function that sets the position
        of this sprite that you can use again later.\r
      CSD U3 game display boards_markdown_instruction: |
        # Display Boards\r
        \r
        Now
        that your backgrounds are working, you can add your display boards.  Most
        games have a score board, but you might also want to display information about
        player level or lives remaining.  Look at [Lesson 12 Puzzle 9](/s/csd3/stage/12/puzzle/9)
        for an example of how to make a scoreboard.\r
        \r
        For each display board:\r
        *
        Create a function to display the information\r
        * Call the function in the
        draw loop\r
        \r
        Be sure to test your boards by changing the starting value
        of your variables and making sure the board also changes when you run the
        code.\r
      CSD U3 game display boards_2018_markdown_instruction: |
        # Display Boards\r
        \r
        Now
        that your backgrounds are working, you can add your display boards.  Most
        games have a score board, but you might also want to display information about
        player level or lives remaining.  Look at [Lesson 12 Puzzle 9](/s/csd3/stage/12/puzzle/9)
        for an example of how to make a scoreboard.\r
        \r
        For each display board:\r
        *
        Create a function to display the information\r
        * Call the function in the
        draw loop\r
        \r
        Be sure to test your boards by changing the starting value
        of your variables and making sure the board also changes when you run the
        code.\r
      CSD U3 game interactions_markdown_instruction: |-
        # Sprite Interactions\r
        \r
        The
        last step is to create the functions that make your sprites interact in the
        right ways.  You'll need a function for each type of sprite interaction.
        You can use the `collectItems` in [Lesson 21 Puzzle 17](/s/csd3/stage/21/puzzle/17)
        and `displaceEnemies` in [Lesson 20 Puzzle 15](/s/csd3/stage/20/puzzle/15)
        as examples.\r
        \r
        For each interaction:\r
        * Create a function in the functions
        area of your code\r
        * Call the function inside the draw loop\r
        \r
        After
        you make each function, run the code to test it before making another.
      CSD U3 game interactions_2018_markdown_instruction: |-
        # Sprite Interactions\r
        \r
        The
        last step is to create the functions that make your sprites interact in the
        right ways.  You'll need a function for each type of sprite interaction.
        You can use the `collectItems` in [Lesson 21 Puzzle 17](/s/csd3/stage/21/puzzle/17)
        and `displaceEnemies` in [Lesson 20 Puzzle 15](/s/csd3/stage/20/puzzle/15)
        as examples.\r
        \r
        For each interaction:\r
        * Create a function in the functions
        area of your code\r
        * Call the function inside the draw loop\r
        \r
        After
        you make each function, run the code to test it before making another.
      CSD U3 game sprite movement_markdown_instruction: |
        # Sprite Movement Functions\r
        \r
        Now
        you'll make the functions that make the sprite move in different ways as
        the game is played.  Some examples of functions that you've written are `loopPlatforms`
        in [Lesson 17 Puzzle 9](/s/csd3/stage/17/puzzle/9) and `playerFall` in [Lesson
        17 Puzzle 14](/s/csd3/stage/17/puzzle/14).\r
        \r
        For each movement:\r
        *
        Create a function that will make the sprite move in that way\r
        * Call the
        function inside the draw loop\r
      CSD U3 game sprite movement_2018_markdown_instruction: |
        # Sprite Movement Functions\r
        \r
        Now
        you'll make the functions that make the sprite move in different ways as
        the game is played.  Some examples of functions that you've written are `loopPlatforms`
        in [Lesson 17 Puzzle 9](/s/csd3/stage/17/puzzle/9) and `playerFall` in [Lesson
        17 Puzzle 14](/s/csd3/stage/17/puzzle/14).\r
        \r
        For each movement:\r
        *
        Create a function that will make the sprite move in that way\r
        * Call the
        function inside the draw loop\r
      CSD U3 game user controls_markdown_instruction: |-
        # User Controls\r
        \r
        Next,
        you'll want to make sure your user controls are working.  Create a function
        that makes your sprites respond to user controls as defined in your project
        guide.  You can use the function in in [Lesson 20 Puzzle 13](/s/csd3/stage/20/puzzle/13)
        as an example.
      CSD U3 game user controls_2018_markdown_instruction: |-
        # User Controls\r
        \r
        Next,
        you'll want to make sure your user controls are working.  Create a function
        that makes your sprites respond to user controls as defined in your project
        guide.  You can use the function in in [Lesson 20 Puzzle 13](/s/csd3/stage/20/puzzle/13)
        as an example.
      CSD U3 game variables_markdown_instruction: |-
        # Create your Variables\r
        \r
        First,
        you'll need to create all of your variables and put them in the variables
        area of your code.\r
        * [Show me the block](#triggercallout=callout1)\r
        *
        [Show me the area in the code](#triggercallout=callout2)\r
        \r
        Don't forget,
        each variable needs a label (name) and a starting value.  You can change the
        value of the variable later in your code.
      CSD U3 game variables_2018_markdown_instruction: |-
        # Create your Variables\r
        \r
        First,
        you'll need to create all of your variables and put them in the variables
        area of your code.\r
        * [Show me the block](#triggercallout=callout1)\r
        *
        [Show me the area in the code](#triggercallout=callout2)\r
        \r
        Don't forget,
        each variable needs a label (name) and a starting value.  You can change the
        value of the variable later in your code.
      CSD U3 keydown conditional-2018_markdown_instruction: |-
        # Changing Sprites\r
        \r
        You
        saw on the last level that `keyDown` returns `true` while you are holding
        a key down and `false` when the key is not pressed down.   The input for the
        `keyDown` command is the name of key you want to check in quotes. Some examples
        are "x", "up" and "space".\r
        \r
        We can use `keyDown` as an input to
        an `if` statement to change our animations based on key presses!\r
        \r
        #
        Do This\r
        * Run the code and try pressing the "p" and "h" keys.\r
        *
        Look inside the `if` statement to see how the code works.\r
        * Add a block
        inside the third `if` statement to change the animation to a different animal.\r
        \r
        *Challenge:
        When you use `setAnimation`, it keeps the new animation until you change it
        again.  Can you change the code so that the sprite will automatically go back
        to a giraffe when you're not holding one of the keys down?*
      CSD U3 keydown conditional_markdown_instruction: |-
        # Changing Sprites\r
        \r
        You
        saw on the last level that `keyDown` returns `true` while you are holding
        a key down and `false` when the key is not pressed down.   The input for the
        `keyDown` command is the name of key you want to check in quotes. Some examples
        are "x", "up" and "space".\r
        \r
        We can use `keyDown` as an input to
        an `if` statement to change our animations based on key presses!\r
        \r
        #
        Do This\r
        * Run the code and try pressing the up and down arrows.\r
        * Look
        inside the `if` statement to see how the code works.\r
        * Add a block inside
        the third `if` statement to change the animation to a different animal.\r
        \r
        *Hint:
        you can use the rabbit that's already in the Animations tab, or add a new
        animation.*
      CSD U3 keydown conditional_2018_markdown_instruction: |-
        # Changing Sprites\r
        \r
        You
        saw on the last level that `keyDown` returns `true` while you are holding
        a key down and `false` when the key is not pressed down.   The input for the
        `keyDown` command is the name of key you want to check in quotes. Some examples
        are "x", "up" and "space".\r
        \r
        We can use `keyDown` as an input to
        an `if` statement to change our animations based on key presses!\r
        \r
        #
        Do This\r
        * Run the code and try pressing the "p" and "h" keys.\r
        *
        Look inside the `if` statement to see how the code works.\r
        * Add a block
        inside the third `if` statement to change the animation to a different animal.\r
        \r
        *Challenge:
        When you use `setAnimation`, it keeps the new animation until you change it
        again.  Can you change the code so that the sprite will automatically go back
        to a giraffe when you're not holding one of the keys down?*
      CSD U3 my-rect_markdown_instruction: |-
        # rect(x,y)\r
        \r
        Welcome to Game Lab,
        where you can create interactive animations and games!   \r
        \r
        In class
        you already practiced the basics of putting shapes on a grid.  In Game Lab,
        you'll do the same with the display area on the left.\r
        \r
        # Do This\r
        \r
        *
        Look at the line of code in the workspace below these instructions ( [Show
        me where](#triggercallout=block_trigger) ) and discuss with your partner where
        you think the shape will be dawn on the grid.  (insert picture of block here)
        \r
        * Click <img src="https://images.code.org/9e963203e9cafd558b760730d13537ca-image-1461783998310.06.20
        PM.png" width=100> to run the program and see what happens. ( [Show me where](#triggercallout=run_trigger)
        )\r
        * Change the numbers in the two different openings, then try running
        the program again. \r
        * Try to place the rectangle near the bottom right
        of the screen
      CSD U3 picture_markdown_instruction: |-
        # Challenge: Draw an Image\r
        \r
        _Check
        with your teacher before starting any of the challenges._\r
        \r
        In the previous
        lesson you and your partner created several interesting images. See if you
        can recreate one of them using code.
      CSD U3 picture_2018_markdown_instruction: |-
        # Challenge: Draw an Image\r
        \r
        _Check
        with your teacher before starting any of the challenges._\r
        \r
        In the previous
        lesson you and your partner created several interesting images. See if you
        can recreate one of them using code.
      CSD U3 platform background1_markdown_instruction: |-
        # Background\r
        \r
        The
        first thing that you will create for your game is the background.   The sample
        game had two different backgrounds that were chosen according to the user's
        score.  The first background has already been created for you.  Look at the
        `background1` function in the code below to see how it works. ([Show me where](#triggercallout=code_triggered1))\r
        \r
        In
        order for the background function to do something, you have to call it inside
        the draw loop. ([Show me where](#triggercallout=code_triggered2))\r
        \r
        There
        is also an empty function named `background2`. ([Show me where](#triggercallout=code_triggered3))  You
        will need to fill that function with new code to make a different background,
        then test the code by calling the function inside the draw loop.\r
        \r
        #
        Do this\r
        \r
        * Read the code for `background1`.\r
        * Fill the `background2`
        function with new code for a second background.\r
        * Test your `background2`
        function by calling it inside the draw loop.\r
        \r
        _Hint: It's much easier
        to copy, paste, and make small changes to your code in text mode._
      CSD U3 platform background1_2018_markdown_instruction: |-
        # Background\r
        \r
        The
        first thing that you will create for your game is the background.   The sample
        game had two different backgrounds that were chosen according to the user's
        score.  The first background has already been created for you.  Look at the
        `background1` function in the code below to see how it works. ([Show me where](#triggercallout=code_triggered1))\r
        \r
        In
        order for the background function to do something, you have to call it inside
        the draw loop. ([Show me where](#triggercallout=code_triggered2))\r
        \r
        There
        is also an empty function named `background2`. ([Show me where](#triggercallout=code_triggered3))  You
        will need to fill that function with new code to make a different background,
        then test the code by calling the function inside the draw loop.\r
        \r
        #
        Do this\r
        \r
        * Read the code for `background1`.\r
        * Fill the `background2`
        function with new code for a second background.\r
        * Test your `background2`
        function by calling it inside the draw loop.\r
        \r
        _Hint: It's much easier
        to copy, paste, and make small changes to your code in text mode._
      CSD U3 platform background2_markdown_instruction: |
        # Choosing your Background\r
        \r
        Now
        that you have your score variable, you can use it to choose the right background
        for your game.  You can see an example of changing your background according
        to your score in [Lesson 19 Level 11](/s/csd3/stage/19/puzzle/11)\r
        \r
        #
        Do This\r
        \r
        \r
        * Inside the draw loop, use an `if` statement and your
        two background functions to draw your background according to your score level.\r
        *
        Test your code by changing the start score to 100, then running to code to
        see whether the background changes.\r
        \r
        _Challenge: If you have a third
        background, you can click the plus sign at the bottom of the `if` block.  Another
        space will appear for your third background function, as well as a place to
        check the score again._\r
      CSD U3 platform background2_2018_markdown_instruction: |
        # Choosing your Background\r
        \r
        Now
        that you have your score variable, you can use it to choose the right background
        for your game.  You can see an example of changing your background according
        to your score in [Lesson 19 Level 11](/s/csd3/stage/19/puzzle/11)\r
        \r
        #
        Do This\r
        \r
        \r
        * Inside the draw loop, use an `if` statement and your
        two background functions to draw your background according to your score level.\r
        *
        Test your code by changing the start score to 100, then running to code to
        see whether the background changes.\r
        \r
        _Challenge: If you have a third
        background, you can click the plus sign at the bottom of the `if` block.  Another
        space will appear for your third background function, as well as a place to
        check the score again._\r
      CSD U3 platform challenge_markdown_instruction: |-
        # Improve Your Game\r
        \r
        Improve
        your game by adding in two or more of the features you saw in the last two
        examples.  You can use the list below to help you.\r
        \r
        * Choose new animations
        for your player, platform, and items.\r
        * Prevent your player from going
        off the side of the screen.\r
        * Add a different type of item for the player
        to collect or avoid.\r
        * Add a variable that keeps track of how many lives
        the player has, and end the game if the player runs out.\r
        * Make your player's
        animation change direction when the player changes direction.\r
        * Change
        the player to only jump when it is on a platform.\r
        * Add another background
        and make it appear when the score gets even higher.\r
        * Make your items interact
        with the platforms in some way.
      CSD U3 platform challenge1_markdown_instruction: |-
        # Collect Items\r
        \r
        Last,
        you'll want your player to collect the items falling from the top of the
        screen.\r
        \r
        # Do This\r
        \r
        * Create a `collectItems` function and add
        it to the "functions" area of your code.\r
        * Use the `if` and `isTouching`
        blocks to change the x and y position of the items when the player touches
        them.  You can look at the `loopItem` function for clues in how to reset the
        item position.\r
        * Inside your `if` statement, add a counter pattern that
        will increase the score every time the player touches an item.  Look at [Stage
        12 Puzzle 8](https://levelbuilder-studio.code.org/s/CSDU3-Draft/stage/12/puzzle/8)
        for an example.\r
        * Call the function inside the draw loop, in the "update
        sprites" area of your code.\r
        * Run the code to test your function.
      CSD U3 platform challenge_2018_markdown_instruction: |-
        # Improve Your Game\r
        \r
        Improve
        your game by adding in two or more of the features you saw in the last two
        examples.  You can use the list below to help you.\r
        \r
        * Choose new animations
        for your player, platform, and items.\r
        * Prevent your player from going
        off the side of the screen.\r
        * Add a different type of item for the player
        to collect or avoid.\r
        * Add a variable that keeps track of how many lives
        the player has, and end the game if the player runs out.\r
        * Make your player's
        animation change direction when the player changes direction.\r
        * Change
        the player to only jump when it is on a platform.\r
        * Add another background
        and make it appear when the score gets even higher.\r
        * Make your items interact
        with the platforms in some way.
      CSD U3 platform draw loop_markdown_instruction: |-
        # Draw Loop\r
        \r
        Once you
        have functions that can draw what you want, you can put them inside a draw
        loop.\r
        \r
        # Do This\r
        \r
        * Add the `function draw() {}` (draw loop) block
        into the workspace.\r
        * Inside the draw loop, use an `if` block to choose
        the correct background function to use [Remind me how](https://levelbuilder-studio.code.org/s/CSDU3-Draft/stage/13/puzzle/10)\r
        *
        After the if statement, use the function you wrote to display the current
        information\r
        * Test your code by changing the starting value of your variables
        and running it to see whether the correct information and background are drawn.
      CSD U3 platform items_markdown_instruction: |-
        # Create your Items\r
        \r
        Next,
        you need to add in the items that fall from the top of the screen.  In [Stage
        11 Puzzle 6](https://levelbuilder-studio.code.org/s/CSDU3-Draft/stage/11/puzzle/6),
        you modeled falling using the counter pattern on `velocityY`.  You can use
        the same pattern to make your items fall from the sky.  In our sample game,
        our carrots rotated and bounced off the platforms, but you can choose to add
        any other type of interaction that you like in the next level.\r
        \r
        # Do
        This\r
        \r
        * Create an item sprite with the label and starting position that
        you put on your worksheet.\r
        * Give the sprite the starting properties you
        wrote on your worksheet.\r
        * Run the code to test your sprite.\r
        * Create
        a function that checks whether the sprite is off the bottom of the screen,
        and loops it back to the top of the screen if it is.  (Look at [Stage 11 Bubble
        16](https://levelbuilder-studio.code.org/s/CSDU3-Draft/stage/11/puzzle/16)
        to see an example of code that loops a sprite.)\r
        * Run the code to test
        your sprite.
      CSD U3 platform items1_markdown_instruction: |-
        # Create an Item\r
        \r
        <img
        src="https://images.code.org/2cdb64a2e23e68c8a86296240642cd13-image-1476211650103.gif"
        style="float:right;">\r
        \r
        Next, you need to add the items that fall from
        the top of the screen.  These move just like the platforms, but faster.  In
        order to make the game more interesting, the items start at a random location
        above the screen.  For the sample game, the item's x position is a random
        number between 50 and 350, and the y position is a random number between -30
        and -60.\r
        \r
        # Do This\r
        \r
        * Use the `createSprite` block to make an
        item sprite in the "create sprites" section of your code.\r
        * Use the `randomNumber`
        block inside your `createSprite` block to start the item at a random x and
        y position.\r
        * Use `setAnimation` and `velocityY` to give your sprite the
        correct image and make it fall from the top of the screen.\r
        * Run the code
        to test your sprite.
      CSD U3 platform items1_2018_markdown_instruction: |-
        # Create an Item\r
        \r
        <img
        src="https://images.code.org/2cdb64a2e23e68c8a86296240642cd13-image-1476211650103.gif"
        style="float:right;">\r
        \r
        Next, you need to add the items that fall from
        the top of the screen.  These move just like the platforms, but faster.  In
        order to make the game more interesting, the items start at a random location
        above the screen.  For the sample game, the item's x position is a random
        number between 50 and 350, and the y position is a random number between -30
        and -60.\r
        \r
        # Do This\r
        \r
        * Use the `createSprite` block to make an
        item sprite in the "create sprites" section of your code.\r
        * Use the `randomNumber`
        block inside your `createSprite` block to start the item at a random x and
        y position.\r
        * Use `setAnimation` and `velocityY` to give your sprite the
        correct image and make it fall from the top of the screen.\r
        * Run the code
        to test your sprite.
      CSD U3 platform items2_markdown_instruction: |-
        # Loop your Item\r
        \r
        <img
        src="https://images.code.org/bf06ad06acbba65dfd48b63608a08c90-image-1476212006882.gif"
        style="float:right">\r
        Now that your item is falling, you can add code
        to loop it back to the top.  This is similar to what you did for the platform
        sprite, but the item sprite will loop back to a random x and y location when
        it goes to the top of the screen.\r
        \r
        # Do This\r
        \r
        * Create a `loopItems`
        function that uses an `if` block to check whether the item sprite is off the
        bottom of the screen, then sends the item back to a random x and y position,
        just as it did when you first created the sprite.\r
        * Call the function inside
        the draw loop.\r
        * Run the code to test your sprite.
      CSD U3 platform items2_2018_markdown_instruction: |-
        # Loop your Item\r
        \r
        <img
        src="https://images.code.org/bf06ad06acbba65dfd48b63608a08c90-image-1476212006882.gif"
        style="float:right">\r
        Now that your item is falling, you can add code
        to loop it back to the top.  This is similar to what you did for the platform
        sprite, but the item sprite will loop back to a random x and y location when
        it goes to the top of the screen.\r
        \r
        # Do This\r
        \r
        * Create a `loopItems`
        function that uses an `if` block to check whether the item sprite is off the
        bottom of the screen, then sends the item back to a random x and y position,
        just as it did when you first created the sprite.\r
        * Call the function inside
        the draw loop.\r
        * Run the code to test your sprite.
      CSD U3 platform items3_markdown_instruction: |
        # Make your Second Item\r
        \r
        <img
        src="https://images.code.org/dfd53f2ea4b4380c126dde8035bcdc45-image-1476212495388.gif"
        style="float: right">\r
        \r
        Next, you'll copy and paste the code for your
        first item to create a second item.  Remember that this is a lot easier in
        **text mode**, so be sure to try it out if you haven't already.\r
        \r
        You'll
        need to copy two parts of your code: the part at the beginning where you made
        the item, and the part in your `loopItem` function, where you looped the item
        back to the top of the screen.\r
        \r
        # Do This\r
        \r
        * Copy the code you
        used to create the first item sprite (`createSprite`, `setAnimation`, and
        `velocityY`), and paste it directly beneath the original code.\r
        * Change
        the names of the sprite in the new lines.  For example, if you named your
        original sprite "star", you could name this one "star2".\r
        * Inside your
        `loopItems` function, copy the if statement, then paste it directly underneath
        the original code, inside the function.\r
        * Change the sprite name in the
        new lines of code.\r
        * Run your code to test it.\r
      CSD U3 platform items3_2018_markdown_instruction: |
        # Make your Second Item\r
        \r
        <img
        src="https://images.code.org/dfd53f2ea4b4380c126dde8035bcdc45-image-1476212495388.gif"
        style="float: right">\r
        \r
        Next, you'll copy and paste the code for your
        first item to create a second item.  Remember that this is a lot easier in
        **text mode**, so be sure to try it out if you haven't already.\r
        \r
        You'll
        need to copy two parts of your code: the part at the beginning where you made
        the item, and the part in your `loopItem` function, where you looped the item
        back to the top of the screen.\r
        \r
        # Do This\r
        \r
        * Copy the code you
        used to create the first item sprite (`createSprite`, `setAnimation`, and
        `velocityY`), and paste it directly beneath the original code.\r
        * Change
        the names of the sprite in the new lines.  For example, if you named your
        original sprite "star", you could name this one "star2".\r
        * Inside your
        `loopItems` function, copy the if statement, then paste it directly underneath
        the original code, inside the function.\r
        * Change the sprite name in the
        new lines of code.\r
        * Run your code to test it.\r
      CSD U3 platform platform1_markdown_instruction: |
        # Create a Platform Sprite\r
        \r
        <img
        src="https://images.code.org/6e5aa80eb72809d761a695fae1b42b81-image-1476210749306.gif"
        style="float: right;"> \r
        \r
        Now that you have your background and your
        variables, it's time to create your sprites.  Usually, it will be easiest
        to start with the sprites that are part of the environment, such as your platforms.  The
        sample game had two platform sprites, but you'll make just one first, then
        test it before copying and pasting the code to make the second.\r
        \r
        # Do
        This\r
        \r
        * Look at your worksheet and choose a platform sprite to create.\r
        *
        In the "Create sprites" area at the top of your code, create your new sprite
        with the `createSprite` block, giving it the correct position and label (name).
        ([Show me the block](#triggercallout=callout))\r
        * Use the `setAnimation`
        and `velocityY` blocks to give your sprite the correct image and downward
        velocity.\r
        * Test the sprite to make sure that it's moving in the correct
        way.  You might need to adjust its velocity.\r
        \r
        _Hint: The sprite will
        go off the screen and not come back.  You'll make it loop back around in
        the next level._\r
      CSD U3 platform platform1_2018_markdown_instruction: |
        # Create a Platform Sprite\r
        \r
        <img
        src="https://images.code.org/6e5aa80eb72809d761a695fae1b42b81-image-1476210749306.gif"
        style="float: right;"> \r
        \r
        Now that you have your background and your
        variables, it's time to create your sprites.  Usually, it will be easiest
        to start with the sprites that are part of the environment, such as your platforms.  The
        sample game had two platform sprites, but you'll make just one first, then
        test it before copying and pasting the code to make the second.\r
        \r
        # Do
        This\r
        \r
        * Look at your worksheet and choose a platform sprite to create.\r
        *
        In the "Create sprites" area at the top of your code, create your new sprite
        with the `createSprite` block, giving it the correct position and label (name).
        ([Show me the block](#triggercallout=callout))\r
        * Use the `setAnimation`
        and `velocityY` blocks to give your sprite the correct image and downward
        velocity.\r
        * Test the sprite to make sure that it's moving in the correct
        way.  You might need to adjust its velocity.\r
        \r
        _Hint: The sprite will
        go off the screen and not come back.  You'll make it loop back around in
        the next level._\r
      CSD U3 platform platform2_markdown_instruction: |-
        # Loop the Platform Sprite\r
        \r
        <img
        src="https://images.code.org/6bfe6dd078b2022315a7f54a38c90826-image-1476211068588.gif"
        style="float: right;">\r
        \r
        Right now, your platform sprite moves down,
        but it doesn't loop back up to the top of the screen. You can look at [Lesson
        15 Level 13](/s/csd3/stage/15/puzzle/13) to see an example of a sprite looping
        around a screen.\r
        \r
        # Do This\r
        \r
        * Use the `function` block to create
        a `loopPlatforms` function at the bottom of your code.\r
        * Use the `if` block
        inside the function to check whether the platform has gone off the bottom
        of screen and, if it has, move it back to the top of the screen.\r
        * Call
        the function inside the draw loop, in the "update sprites" area.\r
        * Run
        the code to test your sprite.\r
        \r
        _Hint: What will platform.y be when the
        sprite moves off the bottom of the screen?  What should platform.y be when
        you put it back at the top of the screen?_
      CSD U3 platform platform2_2018_markdown_instruction: |-
        # Loop the Platform Sprite\r
        \r
        <img
        src="https://images.code.org/6bfe6dd078b2022315a7f54a38c90826-image-1476211068588.gif"
        style="float: right;">\r
        \r
        Right now, your platform sprite moves down,
        but it doesn't loop back up to the top of the screen. You can look at [Lesson
        15 Level 13](/s/csd3/stage/15/puzzle/13) to see an example of a sprite looping
        around a screen.\r
        \r
        # Do This\r
        \r
        * Use the `function` block to create
        a `loopPlatforms` function at the bottom of your code.\r
        * Use the `if` block
        inside the function to check whether the platform has gone off the bottom
        of screen and, if it has, move it back to the top of the screen.\r
        * Call
        the function inside the draw loop, in the "update sprites" area.\r
        * Run
        the code to test your sprite.\r
        \r
        _Hint: What will platform.y be when the
        sprite moves off the bottom of the screen?  What should platform.y be when
        you put it back at the top of the screen?_
      CSD U3 platform platform3_markdown_instruction: |
        # Make your Second Platform\r
        \r
        <img
        src="https://images.code.org/94abf92949a82f6ba18a8cfafb9231b1-image-1476211447371.gif"
        style="float:right;">\r
        \r
        Making a second platform will be easier than
        making the first, because you can copy and paste a lot of the code, then make
        a few small changes.  This is a lot easier in *text mode*, so be sure to try
        it out if you haven't already.\r
        \r
        You'll need to copy two parts of your
        code: the part at the beginning where you made the platform, and the part
        in your `loopPlatforms` function, where you looped the platform back to the
        top of the screen.\r
        \r
        # Do This\r
        \r
        * Copy the code you used to create
        the first platform sprite (`createSprite`, `setAnimation`, and `velocityY`),
        and paste it directly beneath the original code.\r
        * Change the names of
        the sprite in the new lines.  For example, if you named your original sprite
        "platform", you could name this one "platform2".\r
        * Change the starting
        position of your new platform sprite.\r
        * Inside your `loopPlatforms` function,
        copy the if statement, then paste it directly underneath the original code,
        inside the function.\r
        * Change the sprite name in the new lines of code.\r
        *
        Run your code to test it.\r
        \r
        _Challenge: You can make your platforms appear
        at random x positions when they loop back to the top of the screen._\r
      CSD U3 platform platform3_2018_markdown_instruction: |
        # Make your Second Platform\r
        \r
        <img
        src="https://images.code.org/94abf92949a82f6ba18a8cfafb9231b1-image-1476211447371.gif"
        style="float:right;">\r
        \r
        Making a second platform will be easier than
        making the first, because you can copy and paste a lot of the code, then make
        a few small changes.  This is a lot easier in *text mode*, so be sure to try
        it out if you haven't already.\r
        \r
        You'll need to copy two parts of your
        code: the part at the beginning where you made the platform, and the part
        in your `loopPlatforms` function, where you looped the platform back to the
        top of the screen.\r
        \r
        # Do This\r
        \r
        * Copy the code you used to create
        the first platform sprite (`createSprite`, `setAnimation`, and `velocityY`),
        and paste it directly beneath the original code.\r
        * Change the names of
        the sprite in the new lines.  For example, if you named your original sprite
        "platform", you could name this one "platform2".\r
        * Change the starting
        position of your new platform sprite.\r
        * Inside your `loopPlatforms` function,
        copy the if statement, then paste it directly underneath the original code,
        inside the function.\r
        * Change the sprite name in the new lines of code.\r
        *
        Run your code to test it.\r
        \r
        _Challenge: You can make your platforms appear
        at random x positions when they loop back to the top of the screen._\r
      CSD U3 platform player1_markdown_instruction: |-
        # Create your Player\r
        \r
        <img
        src="https://images.code.org/8358b8d2eef2461e113e0b3093da7403-image-1476212944204.gif"
        style="float:right">\r
        \r
        Now you can create your player sprite.  Just
        like the item sprites, the player sprite will fall from the top of the screen.  Unlike
        the items, your player sprite will get faster as it falls, just like real
        falling objects.  This is what allows it to jump up, and fall back down.\r
        \r
        #
        Do This\r
        \r
        * Use the `createSprite` block to make a player sprite with
        the label and starting position that you put on your worksheet.\r
        * Use `setAnimation`
        to give it the correct image.\r
        * Create a `playerFall` function that makes
        the sprite fall from the top of the screen.  The code inside the function
        should use `velocityY` in a counter pattern, just as when you made the falling
        rock in [Lesson 17 Level 4](/s/csd3/stage/17/puzzle/4).\r
        * Call the `playerFall`
        function inside the draw loop.\r
        * Run the code to test your sprite.
      CSD U3 platform player1_2018_markdown_instruction: |-
        # Create your Player\r
        \r
        <img
        src="https://images.code.org/8358b8d2eef2461e113e0b3093da7403-image-1476212944204.gif"
        style="float:right">\r
        \r
        Now you can create your player sprite.  Just
        like the item sprites, the player sprite will fall from the top of the screen.  Unlike
        the items, your player sprite will get faster as it falls, just like real
        falling objects.  This is what allows it to jump up, and fall back down.\r
        \r
        #
        Do This\r
        \r
        * Use the `createSprite` block to make a player sprite with
        the label and starting position that you put on your worksheet.\r
        * Use `setAnimation`
        to give it the correct image.\r
        * Create a `playerFall` function that makes
        the sprite fall from the top of the screen.  The code inside the function
        should use `velocityY` in a counter pattern, just as when you made the falling
        rock in [Lesson 17 Level 4](/s/csd3/stage/17/puzzle/4).\r
        * Call the `playerFall`
        function inside the draw loop.\r
        * Run the code to test your sprite.
      CSD U3 platform player2_markdown_instruction: |-
        # User Controls\r
        \r
        Next,
        you should add user controls so that you can move your player around.  Your
        player needs to move to the left when the left arrow key is pressed, to the
        right when the right arrow key is pressed, and jump when the space bar is
        pressed.\r
        \r
        # Do This\r
        \r
        * Create a new `controlPlayer` function in
        the "functions" area of your code.\r
        * Inside the `controlPlayer` function,
        use the `if`, `keyDown`, and `sprite.x` blocks to make your player move to
        the left and right according to the arrow keys.  Look at <a href="/s/csd3/stage/12/puzzle/7"
        target="_blank"> Lesson 12 Puzzle 7 </a> for examples.\r
        * Inside the `controlPlayer`
        function, use the `if`, `keyDown`, and `velocityY` blocks to make your player
        jump when the up arrow is pressed.  Look at <a href="/s/csd3/stage/15/puzzle/11"
        target="_blank"> Lesson 15 Puzzle 11 </a> for an example.\r
        * Call the
        `controlPlayer` function inside the draw loop.\r
        * Run the game and test
        your code.
      CSD U3 platform player2_2018_markdown_instruction: |-
        # User Controls\r
        \r
        Next,
        you should add user controls so that you can move your player around.  Your
        player needs to move to the left when the left arrow key is pressed, to the
        right when the right arrow key is pressed, and jump when the space bar is
        pressed.\r
        \r
        # Do This\r
        \r
        * Create a new `controlPlayer` function in
        the "functions" area of your code.\r
        * Inside the `controlPlayer` function,
        use the `if`, `keyDown`, and `sprite.x` blocks to make your player move to
        the left and right according to the arrow keys.  Look at <a href="/s/csd3/stage/12/puzzle/7"
        target="_blank"> Lesson 12 Puzzle 7 </a> for examples.\r
        * Inside the `controlPlayer`
        function, use the `if`, `keyDown`, and `velocityY` blocks to make your player
        jump when the up arrow is pressed.  Look at <a href="/s/csd3/stage/15/puzzle/11"
        target="_blank"> Lesson 15 Puzzle 11 </a> for an example.\r
        * Call the
        `controlPlayer` function inside the draw loop.\r
        * Run the game and test
        your code.
      CSD U3 platform player2b_markdown_instruction: |
        # Add Reset\r
        \r
        Now that
        your player is falling, you can add code to reset him when he gets to the
        top.\r
        \r
        # Do This\r
        \r
        * Create a function that checks whether the player
        sprite is off the bottom of the screen, and decreases the number of lives
        by one if it is.\r
        * Use the function inside the draw loop.\r
        * Run the
        code to test your function.\r
        * Once you have decreased the lives, you need
        to check whether the player has run out.  Add code to your function that checks
        to see whether the player's lives equals 0.  If they do equal zero, use the
        `text` block to write "GAME OVER" in the middle of the screen.  Otherwise,
        reset the sprite to the top of the screen.\r
      CSD U3 platform player3_markdown_instruction: |
        # Player Interactions\r
        \r
        The
        last part of making your game is programming the player interactions with
        the other sprites.  First, your player needs to land on the platforms.\r
        \r
        #
        Do This\r
        \r
        * Create a `playerLands` function and add it to the "functions"
        area of your code.\r
        * Inside the function, use the `collide` block so that
        your player can land on both the platforms.\r
        * Call the function inside
        the draw loop.\r
        * Run the code to test your function.\r
      CSD U3 platform player3_2018_markdown_instruction: |
        # Player Interactions\r
        \r
        The
        last part of making your game is programming the player interactions with
        the other sprites.  First, your player needs to land on the platforms.\r
        \r
        #
        Do This\r
        \r
        * Create a `playerLands` function and add it to the "functions"
        area of your code.\r
        * Inside the function, use the `collide` block so that
        your player can land on both the platforms.\r
        * Call the function inside
        the draw loop.\r
        * Run the code to test your function.\r
      CSD U3 platform player4_markdown_instruction: |-
        # Collect Items\r
        \r
        Last,
        you'll want your player to collect the items falling from the top of the
        screen.\r
        \r
        # Do This\r
        \r
        * Create a `collectItems` function and add
        it to the "functions" area of your code.\r
        * Use the `if` and `isTouching`
        blocks to change the x and y position of the items when the player touches
        them.  You can look at the `loopItem` function for clues in how to reset the
        item position.\r
        * Inside your `if` statement, add a counter pattern that
        will increase the score every time the player touches an item.  Look at [Lesson
        16 Puzzle 9](/s/csd3/stage/16/puzzle/9) for an example.\r
        * Call the function
        inside the draw loop, in the "update sprites" area of your code.\r
        * Run
        the code to test your function.
      CSD U3 platform player4_2018_markdown_instruction: |-
        # Collect Items\r
        \r
        Last,
        you'll want your player to collect the items falling from the top of the
        screen.\r
        \r
        # Do This\r
        \r
        * Create a `collectItems` function and add
        it to the "functions" area of your code.\r
        * Use the `if` and `isTouching`
        blocks to change the x and y position of the items when the player touches
        them.  You can look at the `loopItem` function for clues in how to reset the
        item position.\r
        * Inside your `if` statement, add a counter pattern that
        will increase the score every time the player touches an item.  Look at [Lesson
        16 Puzzle 9](/s/csd3/stage/16/puzzle/9) for an example.\r
        * Call the function
        inside the draw loop, in the "update sprites" area of your code.\r
        * Run
        the code to test your function.
      CSD U3 platform sample_markdown_instruction: |-
        # Platform Jumper\r
        \r
        The
        game on the left is an example of a platform jumper.  Press "Run" to play
        it.  You can make the bunny bump with the space bar, and move it to the left
        and right with the arrow keys.  You score by collecting carrots, and if you
        score high enough, the background will change.\r
        \r
        You have three lives,
        so if you fall to the bottom of the screen three times, the game will be over.\r
        \r
        You
        already know how to use all the blocks you need to make a game just like this
        one, and you'll be making your own platform jumper in this lesson.
      CSD U3 platform sample1_markdown_instruction: |-
        # Platform Jumper\r
        \r
        The
        game on the left is an example of a platform jumper.  Press "Run" to play
        it.  You can make the alien jump with the up arrow, and move it to the left
        and right with the arrow keys.  You score by collecting stars, and if you
        score high enough, the background will change.\r
        \r
        You already know how
        to use all the blocks you need to make a game just like this one, and you'll
        be making your own platform jumper in this lesson.
      CSD U3 platform sample1_2018_markdown_instruction: |-
        # Platform Jumper\r
        \r
        The
        game on the left is an example of a platform jumper.  Press "Run" to play
        it.  You can make the alien jump with the up arrow, and move it to the left
        and right with the arrow keys.  You score by collecting stars, and if you
        score high enough, the background will change.\r
        \r
        You already know how
        to use all the blocks you need to make a game just like this one, and you'll
        be making your own platform jumper in this lesson.
      CSD U3 platform sample2_markdown_instruction: |
        # Plane Jumper\r
        \r
        Here's
        another example of a platform jumper, but it has a few more features.  You
        can use it to get ideas to improve your own game.  For example, there is a
        coin sprite that gives the player an extra life.\r
        \r
        Choose one or more
        of the following changes and add them to your game.\r
        * Choose new animations
        for your player, platform, and items.\r
        * Make it impossible for your player
        to go off the left or right of the screen.\r
        * Add a different type of item
        for the player to collect or avoid.\r
        * Add a variable that keeps track of
        how many lives the player has, and end the game if the player runs out.\r
        \r
      CSD U3 platform sample2_2018_markdown_instruction: |
        # Plane Jumper\r
        \r
        Here's
        another example of a platform jumper, but it has a few more features.  You
        can use it to get ideas to improve your own game.  For example, there is a
        coin sprite that gives the player an extra life.\r
        \r
        Choose one or more
        of the following changes and add them to your game.\r
        * Choose new animations
        for your player, platform, and items.\r
        * Make it impossible for your player
        to go off the left or right of the screen.\r
        * Add a different type of item
        for the player to collect or avoid.\r
        * Add a variable that keeps track of
        how many lives the player has, and end the game if the player runs out.\r
        \r
      CSD U3 platform sample3_markdown_instruction: |
        # Bunny Jumper\r
        \r
        Here's
        another example of a jumper.  In this one, the items get faster when they
        fall, and bounce off the platforms.\r
        \r
        Choose one or more of the following
        changes and add them to your game.\r
        * Make your player's animation change
        direction when the player changes direction.\r
        * Add another background and
        make it appear when the score gets even higher.\r
        * Make your items interact
        with the platforms in some way.\r
        \r
      CSD U3 platform sample3_2018_markdown_instruction: |
        # Bunny Jumper\r
        \r
        Here's
        another example of a jumper.  In this one, the items get faster when they
        fall, and bounce off the platforms.\r
        \r
        Choose one or more of the following
        changes and add them to your game.\r
        * Make your player's animation change
        direction when the player changes direction.\r
        * Add another background and
        make it appear when the score gets even higher.\r
        * Make your items interact
        with the platforms in some way.\r
        \r
      CSD U3 platform scoreboard_markdown_instruction: |-
        # Make the Scoreboard\r
        \r
        <img
        src="https://images.code.org/ea490a1915a70676fd3a783adce93cdd-image-1476142534609.png"
        style="float:right;">\r
        \r
        You'll also need a scoreboard so the player
        can keep track of the score.   There's already a `showScore` function written,
        but it only shows the text "Score" and not the actual score. ([Show me where](#triggercallout=code_triggered))  You
        can see an example of a working scoreboard in [Lesson 16 Level 9](/s/csd3/stage/16/puzzle/9).\r
        \r
        #
        Do This\r
        \r
        * Read the code in the `showScore` function.\r
        * Call the
        function inside the draw loop, right after you draw the backgrounds.\r
        *
        Use the `text` block to display the score at the top of the screen.
      CSD U3 platform scoreboard_2018_markdown_instruction: |-
        # Make the Scoreboard\r
        \r
        <img
        src="https://images.code.org/ea490a1915a70676fd3a783adce93cdd-image-1476142534609.png"
        style="float:right;">\r
        \r
        You'll also need a scoreboard so the player
        can keep track of the score.   There's already a `showScore` function written,
        but it only shows the text "Score" and not the actual score. ([Show me where](#triggercallout=code_triggered))  You
        can see an example of a working scoreboard in [Lesson 16 Level 9](/s/csd3/stage/16/puzzle/9).\r
        \r
        #
        Do This\r
        \r
        * Read the code in the `showScore` function.\r
        * Call the
        function inside the draw loop, right after you draw the backgrounds.\r
        *
        Use the `text` block to display the score at the top of the screen.
      CSD U3 platform variable1_markdown_instruction: |-
        # Score Variable\r
        \r
        Now
        that you've created your backgrounds, you'll need to choose when each background
        is drawn.  For that, you'll need a score variable to hold information about
        your player's score.\r
        \r
        You should always give your variables a starting
        value at the very beginning of the program.  That way, they are available
        for any code that comes after.\r
        \r
        # Do This\r
        \r
        * Create a score variable
        at the beginning of your game program. ( [Show me the block](#triggercallout=callout)
        )\r
        * Set the score equal to 0.
      CSD U3 platform variable1_2018_markdown_instruction: |-
        # Score Variable\r
        \r
        Now
        that you've created your backgrounds, you'll need to choose when each background
        is drawn.  For that, you'll need a score variable to hold information about
        your player's score.\r
        \r
        You should always give your variables a starting
        value at the very beginning of the program.  That way, they are available
        for any code that comes after.\r
        \r
        # Do This\r
        \r
        * Create a score variable
        at the beginning of your game program. ( [Show me the block](#triggercallout=callout)
        )\r
        * Set the score equal to 0.
      CSD U3 platform variables_markdown_instruction: |-
        # Variables and Display\r
        \r
        In
        our sample game, we kept track of the score and the number of lives left,
        then displayed them at the top of the screen.  For your game, you'll need
        to create a variable for each piece of information you want to keep track
        of during the game.  Once you have your variables, you can create a function
        to display information at the top of the screen for the player.\r
        \r
        # Do
        This\r
        \r
        * Create the variables that you listed on your planning sheet
        and give them starting values.\r
        * Use the `text` block to display information
        about the variables on the screen.  You can use `textSize` and `fill` to change
        the way the text looks.\r
        * Make a new function and put the code that displays
        the information inside of it.\r
        \r
        _Hint: You can look at [Stage 12 Bubble
        8](https://levelbuilder-studio.code.org/s/CSDU3-Draft/stage/12/puzzle/8) to
        see a working scoreboard.  Scroll down in the code until you see the comment
        "draw score"_
      CSD U3 rect_markdown_instruction: |-
        # Explore Game Lab\r
        \r
        Welcome to Game
        Lab, where you can create interactive animations and games!   \r
        \r
        You've
        already practiced the basics of putting shapes on a grid.  In Game Lab, you'll
        do the same with the display area on the left.\r
        \r
        # Do This\r
        \r
        * Look
        at the line of code in the workspace below these instructions ( [Show me where](#triggercallout=block_trigger)
        ) and discuss with your partner where you think the shape will be drawn on
        the grid.\r
        * Click <img src="https://images.code.org/9e963203e9cafd558b760730d13537ca-image-1461783998310.06.20
        PM.png" width=100> to run the program and see what happens. ( [Show me where](#triggercallout=run_trigger)
        )\r
        * Change the numbers inside the block, then try running the program again.\r
        *
        Try to place the rectangle near the bottom right of the screen.
      CSD U3 rect_2018_markdown_instruction: |-
        # Explore Game Lab\r
        \r
        Welcome to
        Game Lab, where you can create interactive animations and games!   \r
        \r
        You've
        already practiced the basics of putting shapes on a grid.  In Game Lab, you'll
        do the same with the display area on the left.\r
        \r
        # Do This\r
        \r
        * Look
        at the line of code in the workspace below these instructions ( [Show me where](#triggercallout=block_trigger)
        ) and discuss with your partner where you think the shape will be drawn on
        the grid.\r
        * Click <img src="https://images.code.org/9e963203e9cafd558b760730d13537ca-image-1461783998310.06.20
        PM.png" width=100> to run the program and see what happens. ( [Show me where](#triggercallout=run_trigger)
        )\r
        * Change the numbers inside the block, then try running the program again.\r
        *
        Try to place the rectangle near the bottom right of the screen.
      CSD U3 sequence_markdown_instruction: |-
        <img src="https://images.code.org/30d68fb30db5b61187f104f46292e052-image-1493060980724.08.05
        PM.png" style="float:right">\r
        # Order Matters\r
        \r
        In Game Lab, it
        matters what order your code is in.  New shapes are drawn on top of the ones
        that came before, covering up the shapes that are drawn first.  You can see
        the difference when you use more than one color in your code.\r
        \r
        # Do
        This\r
        \r
        * Look at the code that draws the two rectangles.  The first is
        drawn red, and the second is drawn blue.\r
        * Change the red rectangle's
        color to green.\r
        * Change the order of the code so the green rectangle appears
        on top.
      CSD U3 sequence_2018_markdown_instruction: |-
        <img src="https://images.code.org/30d68fb30db5b61187f104f46292e052-image-1493060980724.08.05
        PM.png" style="float:right">\r
        # Order Matters\r
        \r
        In Game Lab, it
        matters what order your code is in.  New shapes are drawn on top of the ones
        that came before, covering up the shapes that are drawn first.  You can see
        the difference when you use more than one color in your code.\r
        \r
        # Do
        This\r
        \r
        * Look at the code that draws the two rectangles.  The first is
        drawn red, and the second is drawn blue.\r
        * Change the red rectangle's
        color to green.\r
        * Change the order of the code so the green rectangle appears
        on top.
      CSD U4 - Design Mode Input Widgets_markdown_instruction: |
        # Input Elements\r
        \r
        <img
        src="https://images.code.org/108fcc6fc89bf88edde00353afb33d75-image-1469814642375.49.23.png"
        style="float: right; width: 150px"/>\r
        Buttons are a great way to navigate
        around your app, and text labels are the primary way to display content in
        your app. When it comes to taking input from your users, sometimes you need
        a place for them to type or boxes to check. The **Text Input**, **Dropdown**,
        **Radio Button**, and **Checkbox** elements all provide ways for your users
        to input information to your app.\r
        \r
        # Do This\r
        \r
        Choose at least
        two of the input elements, and for each one:\r
        \r
        * Drag it out and position
        it on the screen\r
        * Change the id to something meaningful\r
        * Read through
        the properties and experiment with them\r
        * Add a label element next to each
        that describes what they do (don't forget to give it an id too!)\r
        \r
      CSD U4 - Design Mode Project_markdown_instruction: |-
        # Mocking Up Your App\r
        \r
        Using
        your paper prototype, create a digital version of your screen using the Design
        Mode elements you've learned about.\r
        \r
        # Do This\r
        \r
        * Rename the
        screen to match your _namespace_.\r
        * Use the built-in elements to lay out
        your app screen, giving each a proper ID\r
        \t* For example, if your namespace
        is "home_" you might create IDs like:\r
            \t* "home_title"\r
                *
        "home_login_button"\r
                * "home_logo"\r
        * For any components of
        your app that can't be recreated with the built in elements you can either:\r
        \t*
        Redesign to utilize built in elements\r
            * Find an image to use in place
        of your element\r
            * Draw the element using your preferred image editor\r
        *
        Share your design regularly with your teammates to ensure consistent style
      CSD U4 - Design Mode Text_markdown_instruction: |
        # Adding Text\r
        <img src="https://images.code.org/86ba633e04f90f3ca47dff3dcd064847-image-1469812708683.15.36.png"
        style="float: right; width: 75px"/>\r
        The label element lets you add any
        text you'd like to your app. Just drag out a label block and set its "text"
        property. \r
        \r
        # Do This\r
        Use a label element to create a title for this
        app.\r
        \r
        * Drag out a label and place it on the top of the screen\r
        *
        Change the id to "titleLabel"\r
        * Change the text to "My App"\r
        * Increase
        the font size\r
        * Choose a color you like for the title\r
        \r
      CSD U5 Amazon Data Video_markdown_instruction: |-
        Watch this video to learn how
        this problem is solved by Amazon. As you watch think about what data is being
        collected and where it's coming from.
      CSD U5 Netflix Data Video_markdown_instruction: |-
        Watch this video to learn
        how this problem is solved by Netflix. As you watch think about what data
        is being collected and where it's coming from.
      CSD U5 Pizza 2_markdown_instruction: |-
        # Pizza Party\r
        \r
        When people work
        with data, they know to leave off answers that don't make sense, and that
        some answers, such as "peppers", "pepppers" and "green peppers", actually
        meant the same thing. Computers don't know how to do this, so we have to
        clean the data before the computer is able to use it.\r
        \r
        This version
        of the app has a second column for data to be cleaned.\r
        \r
        ## Do this\r
        *
        Click "Run" to see the new list of answers to be cleaned.\r
        * Click on
        each answer that needs to be cleaned and correct it so that the computer will
        chart it properly. (You may want to delete some answers entirely.)\r
        * When
        you are finished, click "Show Chart" to see the new chart of cleaned answers.
      CSD U5 Pizza_markdown_instruction: |-
        # Pizza Party\r
        \r
        The pizza party data
        has been put into an app for you, and the answers from another class have
        been added.  Because this is an app, we can automate the creation of the bar
        chart from the given data.\r
        \r
        # Do This\r
        * Click "Run" to see the
        list of answers that the classes have given.\r
        * Discuss with a partner what
        you think the chart of this data will look like.\r
        * Click "Show Chart"
        to see for yourself.\r
        \r
        # Spreadsheet Version\r
        \r
        The pizza party data
        has also been put into a spreadsheet for you, if you would like to use it
        instead.  To use the spreadsheet, you'll need to make your own copy of it.\r
        \r
        *
        This link will make you your own copy of the "Pizza Topping Choices" data:
        [Pizza Topping Choices](https://docs.google.com/spreadsheets/d/1q1vdgmIlGgxiqJs_VnqHvko18UD6XvRXrnY3JSU97NQ/copy)\r
        *
        You can also download a CSV version of the file [here](https://docs.google.com/spreadsheets/d/1q1vdgmIlGgxiqJs_VnqHvko18UD6XvRXrnY3JSU97NQ/export?format=csv).
      CSD U5 Waze Data Video_markdown_instruction: |-
        Watch this video to learn how
        this problem is solved by Waze. As you watch think about what data is being
        collected and where it's coming from.
      CSD U5 binary 1_markdown_instruction: |-
        # 5-Bit Number\r
        \r
        When you only
        had four bits, the highest number that you could make was fifteen.  Now you'll
        have a chance to work with more bits to make higher numbers.\r
        \r
        In this
        activity, the dots are replaced with numbers, but you still add up everything
        that's showing to see what number the binary code stands for.  The left-most
        bit doesn't have a number yet, so you'll have to give it one.\r
        \r
        # Do
        This\r
        \r
        * Click on the bits to turn them on and off, and see the different
        numbers you can make.\r
        * With your partner, discuss the pattern in the numbers.  Decide
        what number you think should go in the left most box.\r
        * Click "Edit"
        to change the value of the left most bit.\r
        * Once you've decided on the
        value, try to make the following numbers: 16, 27, 31
      CSD U5 binary 2_markdown_instruction: |-
        # 6-Bit Number\r
        \r
        This widget helps
        you to calculate 6-bit binary numbers.\r
        \r
        # Do This\r
        \r
        * With your
        partner, answer the following questions:\r
          1. What's the biggest number
        you can make with this widget?\r
          2. The record for most skips by a dog
        and person in one minute is 59.  How would you encode 59 in binary?
      CSD U5 binary 3-new_markdown_instruction: |-
        # Decoding multiple numbers\r
        \r
        Here's
        a widget that can calculate numbers of 4, 5, or 6 bits.  You can use it to
        find the two world records encoded in the binary string below.\r
        \r
        1. Most
        number of people lifted and thrown in two minutes. (4 bits)\r
        1. Most canned
        drinks opened by a parrot in one minute. (6 bits)\r
        \r
        # Do This\r
        * Decode
        the two numbers from the binary string.
      CSD U5 binary 3_markdown_instruction: |-
        # Decoding multiple numbers\r
        \r
        Here's
        a widget that can calculate numbers up to to eight bits.  You can use it to
        try to find the three world records encoded in the binary string below.  The
        answers are in order in the string.\r
        \r
        1. Most canned drinks opened by
        a parrot in one minute.\r
        2. Most ice cream scoops balanced on a cone.\r
        3.
        Most number of people lifted and thrown in two minutes.\r
        \r
        ![](https://images.code.org/51fe16afb224a2cc4819def434f6ec9d-image-1502735454689.png)\r
        \r
        #
        Do This\r
        * Try to decode the three numbers from a the binary string\r
        *
        Discuss your answers with your partner.\r
         * Was there any other information
        you need to be certain your numbers are correct?
      CSD U5 binary 4-new_markdown_instruction: |-
        # Decoding multiple numbers\r
        \r
        Here's
        a widget that can calculate numbers of 4, 5, or 6 bits.  You can use it to
        find the two world records encoded in the binary string below.\r
        \r
        ![](https://images.code.org/13b0d3307e688575b53e3e6bc86fb739-image-1505426509385.01.06
        PM.png)\r
        \r
        1. Most number of people lifted and thrown in two minutes.
        (4 bits)\r
        1. Most canned drinks opened by a parrot in one minute. (6 bits)\r
        \r
        #
        Do This\r
        * Decode the two numbers from the binary string.
      CSD U5 binary 4_markdown_instruction: |-
        # Bit Length\r
        \r
        If you don't know
        how many bits long each number is, you won't be able to decode a string of
        numbers.\r
        \r
        For example, the following binary string could be decoded
        many different ways.\r
        \r
        <img src="https://images.code.org/51fe16afb224a2cc4819def434f6ec9d-image-1502735454689.png"
        style="height: 30px;">\r
        \r
        If you split the string like this, the string
        reads 71, 28, 28.\r
        \r
        <img src="https://images.code.org/03f40f140dbdbff92af0784911e66fa2-image-1502741759516.png"
        style="height: 30px;"> &nbsp;&nbsp; <img src="https://images.code.org/b5b34c9ec4d051bd81404756269b1cf0-image-1502741761216.png"
        style="height: 30px;"> &nbsp;&nbsp; <img src="https://images.code.org/b5b34c9ec4d051bd81404756269b1cf0-image-1502741761216.png"
        style="height: 30px;">\r
        \r
        If you split it like this, the string reads
        17, 249, 12.\r
        \r
        <img src="https://images.code.org/ec9a1533c32a23637f9d1021d318f496-image-1502741540345.png"
        style="height: 30px;"> &nbsp;&nbsp;  <img src="https://images.code.org/1239b8d5f24df95e6461165b92a41383-image-1502741542720.png"
        style="height: 30px;">  &nbsp;&nbsp; <img src="https://images.code.org/5e71958697e30b9874ed6f6028a02023-image-1502741545510.png"
        style="height: 30px;">\r
        \r
        \r
        To solve this problem, people agree on
        a fixed length for every number.  The following string uses the same three
        numbers, but each number takes up exactly eight bits.\r
        \r
        \r
        <img src="https://images.code.org/2c55ec3f4ff236cb4ffa8d9b1b46895f-image-1502742909603.png"
        style="height: 30px;">\r
        \r
        # Do This\r
        \r
        * Use the binary widget to
        decode the string that uses eight bit numbers.\r
        * Check you answer with
        a partner to see whether you got the same answer.
      CSD U5 binary 5-new_markdown_instruction: |-
        # Decoding multiple numbers\r
        \r
        Here's
        a widget that can calculate numbers up to to eight bits. You can use it to
        find the values of the two world records below.\r
        \r
        Don't forget to make
        sure that the "1" bit is always the right most bit.  If you have extra bits
        on the left side of the widget, just keep them turned off.\r
        \r
        ![](https://images.code.org/e86788ff9b92a2b01b99749fa1aba8e8-image-1505426626592.01.14
        PM.png)\r
        \r
        1. Longest tail on a dog (in inches) (5 bits)\r
        2. Most spoons
        balanced on someone's face (5 bits)\r
        \r
        # Do This\r
        * Decode the two
        numbers from a the binary string.
      CSD U5 binary 6-new_markdown_instruction: |-
        # Decoding multiple numbers\r
        \r
        Here's
        a new bit string.  This time, you don't know the bit length of the two numbers.  Try
        to decode the numbers without knowing the bit length.\r
        \r
        ![](https://images.code.org/cde9a4d100147b950a9be7540453fe89-image-1505426886341.07.46
        PM.png)\r
        \r
        1. Largest wind chime, in feet (? bits)\r
        2. Furthest arrow
        shot with someone's feet (in feet) (? bits)\r
        \r
        # Do This\r
        * Try to
        decode the two numbers from the binary string.\r
        * Discuss with your partner
        why you cannot know for sure whether your answer is correct.
      CSD U5 binary 7-new_markdown_instruction: |-
        # Bit Length\r
        \r
        If you don't
        know how many bits long each number is, you won't be able to decode a string
        of numbers.\r
        \r
        For example, the following binary string could be decoded
        many different ways.\r
        \r
        ![](https://images.code.org/cde9a4d100147b950a9be7540453fe89-image-1505426886341.07.46
        PM.png)\r
        \r
        If you split the string like this, the string reads 10, 84.\r
        \r
        ![](https://images.code.org/c8586b93427166ae6ecfdb8b1ff66bdd-image-1505427228630.13.01
        PM.png) ![](https://images.code.org/7d9814dc4bae8512dfaebbe459c29c9b-image-1505427230882.13.08
        PM.png)\r
        \r
        \r
        If you split it like this, the string reads 42, 20.\r
        \r
        ![](https://images.code.org/2e62b4a71b98b68bdf04713c508e4cb2-image-1505427233001.13.13
        PM.png) ![](https://images.code.org/10a316c870b575db4b30a687815bf481-image-1505427235482.13.19
        PM.png)\r
        \r
        To solve this problem, people agree on a fixed length for every
        number.  The following string uses the same two numbers, but each number takes
        up exactly eight bits, no matter how many bits it actually needs.\r
        \r
        ![](https://images.code.org/257cb728fde57421e58ef31164be5a51-image-1505427467235.13.26
        PM.png)\r
        \r
        # Do This\r
        \r
        * Use the binary widget to decode the string
        that uses eight bit numbers.\r
        * Check you answer with a partner to see whether
        you got the same answer.
      CSD U5 black white images pixelation 2_markdown_instruction: |-
        # Do This\r
        \r
        Use
        the pixelation widget to draw a smiley face\r
        \r
        ![](https://images.code.org/3e81e7e5c95a63173242552de2e9c094-image-1491425592286.52.47
        PM.png)
      CSD U5 black white images pixelation 3_markdown_instruction: |-
        # Do This\r
        \r
        The
        width and height sliders are set incorrectly for this image so it doesn't
        look like anything. Change them until you find the image.\r
        \r
        ![](https://images.code.org/c2abe82051e700f22ce613e407e71536-image-1491426050751.00.17
        PM.png)
      CSD U5 black white images pixelation 4_markdown_instruction: |-
        # Do This\r
        \r
        Add
        eyebrows to this smiley face. Remember to use the "Readable Format" if you
        get stuck.\r
        \r
        ![](https://images.code.org/269725fa3d9d6857912fe4a20464a830-image-1491427249017.18.37
        PM.png)
      CSD U5 black white images pixelation 5_markdown_instruction: |-
        # Do This\r
        \r
        Now
        it's your turn. Draw anything you want in the pixelation widget. Feel free
        to change the width and height of your image if you wish.
      CSD U5 black white images pixelation_markdown_instruction: |-
        # Do This\r
        \r
        Complete
        the "X" shape by typing 0s and 1s. You can always click "Readable Format"
        if you want to clean up your work.
      CSD U5 collection UPS_markdown_instruction: |
        <img src="https://images.code.org/db7d21a8d28df27dee3449939038c7a9-image-1488501564775.jpg"
        style="float:right;height:250px">\r
        ### Plan a Route\r
        \r
        Routz is a
        company that helps people navigate traffic. It has maps of locations all around
        the world and knows real-time information about traffic conditions. When you
        type in a destination you want to go, it will give you the best route it can
        find.\r
        \r
        Routz wants to improve its data to provide even better directions.
        Your job is to help the company decide what data it could collect to improve
        those directions.\r
        \r
        **What data should Routz collect to improve its recommendations
        AND where could it get that data?**\r
        \r
      CSD U5 collection videos_markdown_instruction: |-
        <img src="https://images.code.org/dbefd53cc9aaa2ee1c54f25afc88d860-image-1488492606296.jpg"
        style="float:right;height:300px">\r
        \r
        ### Make a Recommendation\r
        \r
        MeScreen
        is a website where users can watch videos uploaded from all over the world.
        It has millions of videos and users and new ones every day.\r
        \r
        MeScreen
        recommends a Top Video to each of its users every day. You job is to collect
        information about your users and your videos to make the best recommendation
        you can.\r
        \r
        **What kinds of information should you collect AND how could
        you get it?**
      CSD U5 color image_markdown_instruction: |-
        # Paint by Numbers\r
        \r
        Look at
        the binary code below.  Use the patterns of ones and zeros to create the picture
        the code represents. To paint each square, click on the color you want to
        use, then click on the square.\r
        \r
        \r
        `011 011 011 011 011 011 011 011
        110 110`\r
        \r
        `011 011 111 111 111 011 011 011 110 110`\r
        \r
        `011 111
        111 111 111 111 011 011 011 011`\r
        \r
        `011 011 111 111 111 011 011 011 011
        011`\r
        \r
        `011 011 011 011 011 011 011 010 011 011`\r
        \r
        `011 011 011
        011 011 011 010 010 010 011`\r
        \r
        `011 011 011 011 011 011 010 010 010 011`\r
        \r
        `011
        011 011 011 011 011 011 000 011 011`\r
        \r
        `001 001 001 010 010 010 010 000
        010 010`\r
        \r
        `001 001 001 001 010 010 010 010 010 010`
      CSD U6 Catch the Mouse prediction_markdown_instruction: |-
        # Catch the Mouse\r
        \r
        This
        is a clicker game, similar to the one that you built in the last lesson.\r
        \r
        Look
        at the code with your partner and answer the following question:\r
        \r
        *
        How many times do you need to click the mouse before the LED starts to blink?\r
        \r
        Write
        your answer in the box below, then run the code and see what happens.
      CSD U6 Catch the Mouse prediction_2018_markdown_instruction: |-
        # Catch the Mouse\r
        \r
        This
        is a clicker game, similar to the one that you built in the last lesson.\r
        \r
        Look
        at the code with your partner and answer the following question:\r
        \r
        *
        How many times do you need to click the mouse before the LED starts to blink?\r
        \r
        Write
        your answer in the box below, then run the code and see what happens.
      CSD U6 Catch the Mouse_markdown_instruction: Embedded Prediction
      CSD U6 Catch the Mouse_2018_markdown_instruction: Embedded Prediction
      CSD U6 Driver pt 2_markdown_instruction: |-
        # Limiting Turn\r
        \r
        You might
        have noticed that it was really hard to steer the car unless your hands were
        moving slowly and carefully. This is because the number that `roll` returns
        can be a really big number depending on how much the accelerometer is being
        turned. Remember, `roll` has a range from -90 to 90.\r
        \r
        # Do This\r
        \r
        Find
        a way to make `roll` a smaller number while still using it to steer the car.
        You have all of the math operators available to you for this.\r
        \r
        _Challenge_:
        Can you keep the car from going off the side of the screen?
      CSD U6 Driver pt 2_2018_markdown_instruction: |-
        # Limiting Turn\r
        \r
        You might
        have noticed that it was really hard to steer the car unless your hands were
        moving slowly and carefully. This is because the number that `roll` returns
        can be a really big number depending on how much the accelerometer is being
        turned. Remember, `roll` has a range from -90 to 90.\r
        \r
        # Do This\r
        \r
        Find
        a way to make `roll` a smaller number while still using it to steer the car.
        You have all of the math operators available to you for this.\r
        \r
        _Challenge_:
        Can you keep the car from going off the side of the screen?
      CSD U6 Driver pt1_markdown_instruction: |-
        # Steering Wheel\r
        \r
        This game
        is similar to the goalie game that you just played, except a little different.
        Use your board as a steering wheel for the car (moving side to side). You
        have to get to the checkered flag at while avoiding the red flags along the
        way!\r
        \r
        \r
        # Do This\r
        \r
        * Make the car move down the screen while
        the program runs.\r
        * Give the car the ability to steer side to side.\r
        \r
        Think
        back to the programs you've made up until this point, how can you update
        these values?
      CSD U6 Driver pt1_2018_markdown_instruction: |-
        # Steering Wheel\r
        \r
        This
        game is similar to the goalie game that you just played, except a little different.
        Use your board as a steering wheel for the car (moving side to side). You
        have to get to the checkered flag at while avoiding the red flags along the
        way!\r
        \r
        \r
        # Do This\r
        \r
        * Make the car move down the screen while
        the program runs.\r
        * Give the car the ability to steer side to side.\r
        \r
        Think
        back to the programs you've made up until this point, how can you update
        these values?
      CSD U6 LED all_markdown_instruction: |-
        # Multi-function Light\r
        \r
        This app
        should let you choose between three types of lights: on, blink, and pulse.  It
        should also have a button that turns the light completely off.  Right now
        only the "on" button works, and the "off" button is completely missing.\r
        \r
        #
        Do This\r
        * Add code to make the "blink" and "pulse" buttons work.\r
        *
        In design mode, add a new "off" button.\r
        * Add code to make the "off"
        button work.
      CSD U6 LED all_2018_markdown_instruction: |-
        # Multi-function Light\r
        \r
        This
        app should let you choose between three types of lights: on, blink, and pulse.  It
        should also have a button that turns the light completely off.  Right now
        only the "on" button works, and the "off" button is completely missing.\r
        \r
        #
        Do This\r
        * Add code to make the "blink" and "pulse" buttons work.\r
        *
        In design mode, add a new "off" button.\r
        * Add code to make the "off"
        button work.
      CSD U6 LED toggle_markdown_instruction: |-
        # Light Switch\r
        \r
        There are three
        more LED blocks that you haven't used yet. One of them can make the button
        work like a light switch, turning the LED on when it's off, but off when
        it's on.\r
        \r
        # Do This\r
        * Try the `blink`, `toggle` and `pulse` blocks
        to see what they do.\r
        * Use one of the blocks to make the button work like
        a light switch.\r
         * If the LED is off, the button should turn it on.\r

        * If the LED is on, the button should turn it off.
      CSD U6 LED toggle_2018_markdown_instruction: |-
        # Light Switch\r
        \r
        There are
        three more LED blocks that you haven't used yet. One of them can make the
        button work like a light switch, turning the LED on when it's off, but off
        when it's on.\r
        \r
        # Do This\r
        * Try the `blink`, `toggle` and `pulse`
        blocks to see what they do.\r
        * Use one of the blocks to make the button
        work like a light switch.\r
         * If the LED is off, the button should turn
        it on.\r
         * If the LED is on, the button should turn it off.
      CSD U6 LEDbutton predict embed_markdown_instruction: |-
        # Using Events\r
        \r
        This
        program uses events.  Look at the code with a partner and discuss what you
        think it will do.  Once you have answered the questions click "Run" to check
        your answer.\r
        \r
        * Will the light turn on when the program is "Run"?  Why
        or why not?
      CSD U6 LEDbutton predict embed_2018_markdown_instruction: |-
        # Using Events\r
        \r
        This
        program uses events.  Look at the code with a partner and discuss what you
        think it will do.  Once you have answered the questions click "Run" to check
        your answer.\r
        \r
        * Will the light turn on when the program is "Run"?  Why
        or why not?
      CSD U6 LEDs color_markdown_instruction: |-
        # Adding Some Color\r
        \r
        You probably
        noticed when you used `colorLeds[0].on()` in the last level, the LEDs turned
        on as white. If you don't specify a color, `on()` will turn on all three
        parts of the LED (red, green, and blue) to produce white. You'll see a new
        command in the toolbox called `colorLeds[0].color()` which lets you specify
        a color, either as a string like "blue" or an RGB value using color `color()`
        command.\r
        \r
        # Do This\r
        \r
        Use the `.color()` command to set each of
        the color LEDs to a different color.
      CSD U6 LEDs color_2018_markdown_instruction: |-
        # Adding Some Color\r
        \r
        You
        probably noticed when you used `colorLeds[0].on()` in the last level, the
        LEDs turned on as white. If you don't specify a color, `on()` will turn on
        all three parts of the LED (red, green, and blue) to produce white. You'll
        see a new command in the toolbox called `colorLeds[0].color()` which lets
        you specify a color, either as a string like "blue" or an RGB value using
        color `color()` command.\r
        \r
        # Do This\r
        \r
        Use the `.color()` command
        to set each of the color LEDs to a different color.
      CSD U6 Pedometer_markdown_instruction: |-
        # Jogger\r
        \r
        This program should
        use the `shake` event, which is triggered when the board is shaken.  It should
        add a step to the jogger's total every time the user shakes the board.\r
        \r
        #
        Do This\r
        \r
        * Change the event so it triggers every time the board is shaken.\r
        *
        Add code inside the event so that `steps` increases every time the board is
        shaken.
      CSD U6 Pedometer_2018_markdown_instruction: |-
        # Jogger\r
        \r
        This program should
        use the `shake` event, which is triggered when the board is shaken.  It should
        add a step to the jogger's total every time the user shakes the board.\r
        \r
        #
        Do This\r
        \r
        * Change the event so it triggers every time the board is shaken.\r
        *
        Add code inside the event so that `steps` increases every time the board is
        shaken.
      CSD U6 add LED button_markdown_instruction: |-
        # Using Events\r
        \r
        This program
        has two buttons.  The "on" button works, but the "off" button still needs
        to be programmed.\r
        \r
        # Do This\r
        * Add code so that the second button
        turns the LED off.
      CSD U6 add LED button_2018_markdown_instruction: |-
        # Using Events\r
        \r
        This
        program has two buttons.  The "on" button works, but the "off" button
        still needs to be programmed.\r
        \r
        # Do This\r
        * Add code so that the second
        button turns the LED off.
      CSD U6 airplane predict markdown_markdown_instruction: |-
        # Accelerometer\r
        \r
        Look
        at the code below. What do you think it's going to do? Give it a guess, and
        run the code to find out!
      CSD U6 airplane predict markdown_2018_markdown_instruction: |-
        # Accelerometer\r
        \r
        Look
        at the code below. What do you think it's going to do? Give it a guess, and
        run the code to find out!
      CSD U6 analog challenge_markdown_instruction: |-
        # Challenge\r
        \r
        _Check with
        your teacher before pursuing this challenge_\r
        \r
        Now that you've practiced
        taking input from the various analog sensors and changing their scale to meet
        your needs, can you come up with an interesting use for sensor data? It's
        easy to display the raw numbers coming out of a sensor, but far more interesting
        to present that data in different ways.\r
        \r
        Consider the following ways
        you might communicate sensor data:\r
        \r
        * Use the board outputs\r
        * Change
        the width, height, or position of a UI element\r
        * Use conditionals to display
        different images based on sensor values
      CSD U6 analog challenge_2018_markdown_instruction: |-
        # Challenge\r
        \r
        _Check
        with your teacher before pursuing this challenge_\r
        \r
        Now that you've
        practiced taking input from the various analog sensors and changing their
        scale to meet your needs, can you come up with an interesting use for sensor
        data? It's easy to display the raw numbers coming out of a sensor, but far
        more interesting to present that data in different ways.\r
        \r
        Consider the
        following ways you might communicate sensor data:\r
        \r
        * Use the board outputs\r
        *
        Change the width, height, or position of a UI element\r
        * Use conditionals
        to display different images based on sensor values
      CSD U6 analog change_markdown_instruction: |-
        # Change Event\r
        \r
        The data
        event is fine if you don't mind your code running constantly, but sometimes
        that's not the most efficient solution to your problem. The sensor "change"
        event only fires if the sensor value has changed since the last reading, which
        can make sure your program isn't running code when it's not necessary.\r
        \r
        #
        Do This\r
        \r
        Using the provided event handler, write a program that buzzes
        the buzzer and updates "temp_value" whenever the temperature sensor reading
        changes. Place your thumb over the temperature sensor to get it to change
        and see how your program responds.
      CSD U6 analog change_2018_markdown_instruction: |-
        # Change Event\r
        \r
        The
        data event is fine if you don't mind your code running constantly, but sometimes
        that's not the most efficient solution to your problem. The sensor "change"
        event only fires if the sensor value has changed since the last reading, which
        can make sure your program isn't running code when it's not necessary.\r
        \r
        #
        Do This\r
        \r
        Using the provided event handler, write a program that buzzes
        the buzzer and updates "temp_value" whenever the temperature sensor reading
        changes. Place your thumb over the temperature sensor to get it to change
        and see how your program responds.
      CSD U6 analog data_markdown_instruction: |-
        # Data Event\r
        \r
        Each of these
        analog sensors emits a special event called "data" which occurs every time
        new data comes in from the sensor. Using this event, we can write programs
        that continually update.\r
        \r
        # Do This\r
        \r
        This is the first program
        you worked on in this lesson, let's see if we can make it continually update
        the sound reading using the "data" event.\r
        \r
        * Create an event handler
        to respond to sound sensor's "data" event\r
        * Move the existing code into
        your event handler
      CSD U6 analog data_2018_markdown_instruction: |-
        # Data Event\r
        \r
        Each of
        these analog sensors emits a special event called "data" which occurs every
        time new data comes in from the sensor. Using this event, we can write programs
        that continually update.\r
        \r
        # Do This\r
        \r
        This is the first program
        you worked on in this lesson, let's see if we can make it continually update
        the sound reading using the "data" event.\r
        \r
        * Create an event handler
        to respond to sound sensor's "data" event\r
        * Move the existing code into
        your event handler
      CSD U6 analog light_markdown_instruction: |-
        # Light Sensor Updates\r
        \r
        This
        app is very similar to the last, but we've added a button with the ID "update_button".
        Write a program that displays the current value of the light sensor every
        time the update button is clicked.\r
        \r
        # Do This\r
        \r
        Use an event handler
        to update the text of "light_value" using the `lightSensor.value` block.
      CSD U6 analog light_2018_markdown_instruction: |-
        # Light Sensor Updates\r
        \r
        This
        app is very similar to the last, but we've added a button with the ID "update_button".
        Write a program that displays the current value of the light sensor every
        time the update button is clicked.\r
        \r
        # Do This\r
        \r
        Use an event handler
        to update the text of "light_value" using the `lightSensor.value` block.
      CSD U6 analog rbg 1_markdown_instruction: |-
        # Displaying Sensor Readings in
        Color\r
        \r
        In the earlier prediction level you saw how the `setScale()`
        method can convert the full range of sensor readings (0-1023) into a range
        that can be used for RGB values (0-255). Let's build on that idea to make
        an app that can communicate the current value of all three analog sensors
        with a single color.\r
        \r
        # Do This\r
        \r
        To start, we just need to set
        the sensor scales correctly - don't worry about actually setting the color
        of the background yet.\r
        \r
        * Using the `sensor.setScale()` block, set each
        of light and sound sensors to the right scale for an RGB color channel.\r
        *
        Create a variable for each of the three colors and assign each one to the
        value of a different sensor.\r
        * Use `console.log()` to test that your variables
        are in the correct range.\r
        \r
        _Hint: Order matters. You need to set the
        scale of a sensor before checking its value_\r
        \r
        _Hint: Remember that the
        temperature sensor can be read in both Celsius and Fahrenheit - either way
        it should already give you a value that's within the necessary range for
        RGB_
      CSD U6 analog rbg 1_2018_markdown_instruction: |-
        # Displaying Sensor Readings
        in Color\r
        \r
        In the earlier prediction level you saw how the `setScale()`
        method can convert the full range of sensor readings (0-1023) into a range
        that can be used for RGB values (0-255). Let's build on that idea to make
        an app that can communicate the current value of all three analog sensors
        with a single color.\r
        \r
        # Do This\r
        \r
        To start, we just need to set
        the sensor scales correctly - don't worry about actually setting the color
        of the background yet.\r
        \r
        * Using the `sensor.setScale()` block, set each
        of light and sound sensors to the right scale for an RGB color channel.\r
        *
        Create a variable for each of the three colors and assign each one to the
        value of a different sensor.\r
        * Use `console.log()` to test that your variables
        are in the correct range.\r
        \r
        _Hint: Order matters. You need to set the
        scale of a sensor before checking its value_\r
        \r
        _Hint: Remember that the
        temperature sensor can be read in both Celsius and Fahrenheit - either way
        it should already give you a value that's within the necessary range for
        RGB_
      CSD U6 analog rbg 2_markdown_instruction: |-
        # Putting Color on the Screen\r
        \r
        Now
        that your sensor data is in a scale that works for RGB, you can go about setting
        the screen color.\r
        \r
        # Do This\r
        \r
        * Add a `setProperty()` block and
        set it to change the screen's background color.\r
        * Add an `rgb()` block
        to the last parameter of `setProperty()`.\r
        * Use the three color variables
        you created as inputs to the `rgb()` block.
      CSD U6 analog rbg 2_2018_markdown_instruction: |-
        # Putting Color on the Screen\r
        \r
        Now
        that your sensor data is in a scale that works for RGB, you can go about setting
        the screen color.\r
        \r
        # Do This\r
        \r
        * Add a `setProperty()` block and
        set it to change the screen's background color.\r
        * Add an `rgb()` block
        to the last parameter of `setProperty()`.\r
        * Use the three color variables
        you created as inputs to the `rgb()` block.
      CSD U6 analog rgb 3_markdown_instruction: |-
        # Continuous Updates\r
        \r
        This
        sensor-to-color app isn't super useful if it only sets the color once when
        you start the app. You can use the sensors' "data" event to make your app
        continually update the background color every time the value changes.\r
        \r
        Move
        your `setProperty()` block into a an event handler for one of the sensors
        to make the app update continually.
      CSD U6 analog rgb 3_2018_markdown_instruction: |-
        # Continuous Updates\r
        \r
        This
        sensor-to-color app isn't super useful if it only sets the color once when
        you start the app. You can use the sensors' "data" event to make your app
        continually update the background color every time the value changes.\r
        \r
        Move
        your `setProperty()` block into a an event handler for one of the sensors
        to make the app update continually.
      CSD U6 analog sound_markdown_instruction: |-
        # Reading the Sound Sensor\r
        \r
        The
        `soundSensor.value` block allows you to get the current sound sensor reading\r
        \r
        #
        Do This\r
        \r
        In this app we've already added a text label with the id "sound_value".
        Using the `soundSensor.value` block, display the value of the sound sensor.\r
        \r
        _Tip:
        You can drag the `soundSensor.value` block directly into any other block where
        you could type a value instead._\r
        \r
        ![](https://images.code.org/3bd9ac3f869e42f48aaf190944fe1c22-image-1511293198110.png)
      CSD U6 analog sound_2018_markdown_instruction: |-
        # Reading the Sound Sensor\r
        \r
        The
        `soundSensor.value` block allows you to get the current sound sensor reading\r
        \r
        #
        Do This\r
        \r
        In this app we've already added a text label with the id "sound_value".
        Using the `soundSensor.value` block, display the value of the sound sensor.\r
        \r
        _Tip:
        You can drag the `soundSensor.value` block directly into any other block where
        you could type a value instead._\r
        \r
        ![](https://images.code.org/3bd9ac3f869e42f48aaf190944fe1c22-image-1511293198110.png)
      CSD U6 analog temp_markdown_instruction: |-
        # Make a Thermometer App\r
        \r
        While
        the light and sound sensors have just a raw value with the `value` property,
        the temperature sensor is a little bit smarter. Instead of `tempSensor.value`,
        there are two properties `tempSensor.F` and `tempSensor.C` which convert the
        raw input value to either Fahrenheit or Celsius.\r
        \r
        # Do This\r
        \r
        Make
        a simple thermometer app that reads in values from the temperature sensor.
        Your app can display the temperature in either Fahrenheit or Celsius (or both!)\r
        \r
        *
        Using Design Mode, create a button for updating and a label to display the
        temperature\r
        * Add an event handler to respond to your update button being
        clicked\r
        * Add code to your event handler to read the temperature sensor
        and display the value on screen
      CSD U6 analog temp_2018_markdown_instruction: |-
        # Make a Thermometer App\r
        \r
        While
        the light and sound sensors have just a raw value with the `value` property,
        the temperature sensor is a little bit smarter. Instead of `tempSensor.value`,
        there are two properties `tempSensor.F` and `tempSensor.C` which convert the
        raw input value to either Fahrenheit or Celsius.\r
        \r
        # Do This\r
        \r
        Make
        a simple thermometer app that reads in values from the temperature sensor.
        Your app can display the temperature in either Fahrenheit or Celsius (or both!)\r
        \r
        *
        Using Design Mode, create a button for updating and a label to display the
        temperature\r
        * Add an event handler to respond to your update button being
        clicked\r
        * Add code to your event handler to read the temperature sensor
        and display the value on screen
      CSD U6 analog threshold_markdown_instruction: |-
        # Change Threshold\r
        \r
        By
        default a sensor's "change" event fires every time the sensor value changes
        at all, even by one. The light and sound sensors are constantly fluctuating,
        so you probably want the "change" event to be a little less responsive.
        The `threshold` property allows you to set how much a sensor should change
        before considering it a "change" event - so setting `soundSensor.threshold
        = 100` would cause the sound sensor's "change" event only to trigger if
        its value increased or decreased by at least 100.\r
        \r
        # Do This\r
        \r
        This
        app changes the background color of the screen whenever the sound sensor value
        changes, but we want to only respond to big changes in volume (like a loud
        noise). Use the `soundSensor.threshold` block to fix it.\r
        \r
        * Add a `soundSensor.threshold`
        block before the event handler\r
        * Test out which how different threshold
        values impact the "change" event\r
        * Choose a threshold value that makes
        the screen background change only when a loud noise is sensed.\r
        \r
        _Tip:
        Your threshold depends on how much ambient noise there is in the room, and
        how much it changes. A threshold that works in a quiet room may not work in
        a louder classroom._
      CSD U6 analog threshold_2018_markdown_instruction: |-
        # Change Threshold\r
        \r
        By
        default a sensor's "change" event fires every time the sensor value changes
        at all, even by one. The light and sound sensors are constantly fluctuating,
        so you probably want the "change" event to be a little less responsive.
        The `threshold` property allows you to set how much a sensor should change
        before considering it a "change" event - so setting `soundSensor.threshold
        = 100` would cause the sound sensor's "change" event only to trigger if
        its value increased or decreased by at least 100.\r
        \r
        # Do This\r
        \r
        This
        app changes the background color of the screen whenever the sound sensor value
        changes, but we want to only respond to big changes in volume (like a loud
        noise). Use the `soundSensor.threshold` block to fix it.\r
        \r
        * Add a `soundSensor.threshold`
        block before the event handler\r
        * Test out which how different threshold
        values impact the "change" event\r
        * Choose a threshold value that makes
        the screen background change only when a loud noise is sensed.\r
        \r
        _Tip:
        Your threshold depends on how much ambient noise there is in the room, and
        how much it changes. A threshold that works in a quiet room may not work in
        a louder classroom._
      CSD U6 array piano_markdown_instruction: |-
        # Piano Panic\r
        \r
        So far you’ve
        just been using the elements of an array. Now, you're going to change what's
        inside the array.\r
        \r
        Our good friend the piano is back, except now it
        plays notes from two arrays: `notes`, which holds natural notes (C, D, E,
        F, G, A, B), and `sharpNotes`, which holds sharp notes (C#, D#, F#, G#, A#).\r
        \r
        #
        Do this\r
        \r
        The `sharpNotes` array only has one item inside of it right
        now.\r
        \r
        * Fix the array so that the sharp keys on the piano can actually
        play the right note.\r
        \r
        _Hint: Modifying arrays is much easier in text
        mode.  You can always switch between block and text mode by clicking the button
        at the top right of your code workspace._
      CSD U6 array piano_2018_markdown_instruction: |-
        # Piano Panic\r
        \r
        So far
        you’ve just been using the elements of an array. Now, you're going to change
        what's inside the array.\r
        \r
        Our good friend the piano is back, except
        now it plays notes from two arrays: `notes`, which holds natural notes (C,
        D, E, F, G, A, B), and `sharpNotes`, which holds sharp notes (C#, D#, F#,
        G#, A#).\r
        \r
        # Do this\r
        \r
        The `sharpNotes` array only has one item
        inside of it right now.\r
        \r
        * Fix the array so that the sharp keys on the
        piano can actually play the right note.\r
        \r
        _Hint: Modifying arrays is
        much easier in text mode.  You can always switch between block and text mode
        by clicking the button at the top right of your code workspace._
      CSD U6 balloon clicker predict_markdown_instruction: |-
        # Make the Balloon Fly\r
        \r
        In
        this game, you have to click on the correct buttons to make the balloon fly
        into the sky.\r
        \r
        Look at the code with your partner and answer the following
        questions:\r
        \r
        * When does the value stored in the variable `correct` change?\r
        *
        Why does the program need this line: `var choice = randomNumber(1,3);`?\r
        \r
        Once
        you have answered the questions, run the code and see what happens.
      CSD U6 board getters_markdown_instruction: |-
        # Using the Circuit Playground\r
        \r
        You
        can also use getters and setters with the Circuit Playground.  For this level,
        you'll need to plug in your board.\r
        \r
        Read through the code and predict
        what the program will do, then hit "Run" to test your prediction.
      CSD U6 board getters_2018_markdown_instruction: |-
        # Using the Circuit Playground\r
        \r
        You
        can also use getters and setters with the Circuit Playground.  For this level,
        you'll need to plug in your board.\r
        \r
        Read through the code and predict
        what the program will do, then hit "Run" to test your prediction.
      CSD U6 challenge motorcycle_markdown_instruction: |-
        # Challenge\r
        \r
        Use this
        program to experiment some more with getting and setting properties. Some
        ideas you might try include:\r
        \r
        * Use the toggle switch to change the
        motorcycle's movement to go up and down.\r
        * Use a dropdown with color names
        to change the motorcycle's color\r
        * Make the buzzer or LED turn on when
        the motorcycle reaches the top or bottom of the screen.
      CSD U6 challenge motorcycle_2018_markdown_instruction: |-
        # Challenge\r
        \r
        Use
        this program to experiment some more with getting and setting properties.
        Some ideas you might try include:\r
        \r
        * Use the toggle switch to change
        the motorcycle's movement to go up and down.\r
        * Use a dropdown with color
        names to change the motorcycle's color\r
        * Make the buzzer or LED turn on
        when the motorcycle reaches the top or bottom of the screen.
      CSD U6 change_markdown_instruction: |-
        # Change\r
        \r
        In the last level, the
        program only got the interval value from the slider when you pressed the left
        button.  Sometimes, though, you'll want to change the interval of the LED
        as soon as the user chooses a new value.   For that, you'll need the "change"
        event.\r
        \r
        # Do This\r
        \r
        * Look at the first event block in the program
        and find where it says "change".\r
        * Inside the event block, get the interval
        value from the slider and use it to make the LED blink at that new rate.\r
        *
        Run your program, moving the slider to see whether the LED speed changes automatically.
      CSD U6 change_2018_markdown_instruction: |-
        # Change\r
        \r
        In the last level,
        the program only got the interval value from the slider when you pressed the
        left button.  Sometimes, though, you'll want to change the interval of the
        LED as soon as the user chooses a new value.   For that, you'll need the
        "change" event.\r
        \r
        # Do This\r
        \r
        * Look at the first event block
        in the program and find where it says "change".\r
        * Inside the event block,
        get the interval value from the slider and use it to make the LED blink at
        that new rate.\r
        * Run your program, moving the slider to see whether the
        LED speed changes automatically.
      CSD U6 checkbox_markdown_instruction: Predict Level
      CSD U6 circuit createButton scratch_markdown_instruction: |-
        <div style="float:
        right" markdown="1">\r
        \r
        ![expandable](https://images.code.org/14e51a17975b1eb03a852621f9cd8cac-image-1516048913406.png)\r
        \r
        </div>\r
        \r
        #
        Make Your Own Buttons\r
        \r
        Just like `createLed()` lets us create LED objects
        that can be used like the built-in `led`, you can use `createButton()` to
        create button objects that can be used just like the built-in `buttonL` and
        `buttonR` objects.\r
        \r
        # Do This\r
        \r
        * Grab two wires.\r
        * Connect
        one wire to an free data pin.\r
        * Connect the second wire to a ground pin.\r
        *
        Update line 2 so that it's referencing the pin you chose.\r
        * Run the provided
        code.\r
        * With the program running, touch the unconnected ends of both wires
        together to "press" the button.\r
        \r
        _Tip: A button circuit can be made
        with many different kinds of materials, as long as they are electrically conductive.
        Try making buttons with foil, silverware, or paper clips._
      CSD U6 circuit createButton scratch_2018_markdown_instruction: |-
        <div style="float:
        right" markdown="1">\r
        \r
        ![expandable](https://images.code.org/14e51a17975b1eb03a852621f9cd8cac-image-1516048913406.png)\r
        \r
        </div>\r
        \r
        #
        Make Your Own Buttons\r
        \r
        Just like `createLed()` lets us create LED objects
        that can be used like the built-in `led`, you can use `createButton()` to
        create button objects that can be used just like the built-in `buttonL` and
        `buttonR` objects.\r
        \r
        # Do This\r
        \r
        * Grab two wires.\r
        * Connect
        one wire to an free data pin.\r
        * Connect the second wire to a ground pin.\r
        *
        Update line 2 so that it's referencing the pin you chose.\r
        * Run the provided
        code.\r
        * With the program running, touch the unconnected ends of both wires
        together to "press" the button.\r
        \r
        _Tip: A button circuit can be made
        with many different kinds of materials, as long as they are electrically conductive.
        Try making buttons with foil, silverware, or paper clips._
      CSD U6 circuit createButton_markdown_instruction: |-
        <div style="float: right"
        markdown="1">\r
        \r
        ![expandable](https://cdo-curriculum.s3.amazonaws.com/media/uploads/button_alligator.png)\r
        \r
        </div>\r
        \r
        #
        Make Your Own Buttons\r
        \r
        Similar to LEDs, buttons are a really simple
        circuit that you can add to your board pretty easily. Like LEDs, buttons should
        be wired from a numbered pin to a ground pin, but unlike LEDs, a button circuit
        should be disconnected in the middle. When you connect the circuit, it will
        produce a button press event.\r
        \r
        # Do This\r
        \r
        * Grab two wires.\r
        *
        Connect one wire to an open numbered pin.\r
        * Connect the second wire to
        a ground pin.\r
        * Update line 2 so that it's referencing the pin you chose.\r
        *
        Run the provided code.\r
        * With the program running, touch the unconnected
        ends of both wires together to "press" the button.\r
        \r
        _Tip: A button
        circuit can be made with many different kinds of materials, as long as they
        are electrically conductive. Try making buttons with foil, silverware, or
        paper clips._
      CSD U6 circuit createButton_2018_markdown_instruction: |-
        <div style="float:
        right" markdown="1">\r
        \r
        ![expandable](https://cdo-curriculum.s3.amazonaws.com/media/uploads/button_alligator.png)\r
        \r
        </div>\r
        \r
        #
        Make Your Own Buttons\r
        \r
        Similar to LEDs, buttons are a really simple
        circuit that you can add to your board pretty easily. Like LEDs, buttons should
        be wired from a numbered pin to a ground pin, but unlike LEDs, a button circuit
        should be disconnected in the middle. When you connect the circuit, it will
        produce a button press event.\r
        \r
        # Do This\r
        \r
        * Grab two wires.\r
        *
        Connect one wire to an open numbered pin.\r
        * Connect the second wire to
        a ground pin.\r
        * Update line 2 so that it's referencing the pin you chose.\r
        *
        Run the provided code.\r
        * With the program running, touch the unconnected
        ends of both wires together to "press" the button.\r
        \r
        _Tip: A button
        circuit can be made with many different kinds of materials, as long as they
        are electrically conductive. Try making buttons with foil, silverware, or
        paper clips._
      CSD U6 circuit createLed_markdown_instruction: |-
        # Creating Board Objects\r
        \r
        You
        might have noticed that the new blocks we're using are in a different toolbox
        drawer. The **Circuit** drawer contains all of the board objects that are
        built into the Circuit Playground, but when you start wiring your own circuits
        the Maker Toolkit no longer knows where everything is.\r
        \r
        The new **Maker**
        drawer contains general purpose commands instead of ones that are customized
        for the Circuit Playground. In addition to the `pinMode()` and `digitalWrite()`
        commands you've seen, it includes commands to create new objects on the board
        that can be programmed in the same way as the blocks in the **Circuit** drawer.
        The `var myLed = createLed()` command, for example, creates a new LED object
        that behaves just like the `led` blocks you've been using.\r
        \r
        # Do This\r
        \r
        Now
        that you're creating new board objects that we don't have blocks for, you'll
        need to work in text mode. You can still drag out blocks that you're familiar
        with from the **Circuit** drawer, you'll just need to change the name of
        the object.\r
        \r
        * Keep your LED wired just as it was before (connected
        to pin 2)\r
        * Make sure you're in text mode, not block mode.\r
        * Drag out
        an `led.blink()` block below the comment `// Blink myLed`.\r
        * Replace the
        text `led` with `myLed`.\r
        * Test your code.
      CSD U6 circuit createLed_2018_markdown_instruction: |-
        # Creating Board Objects\r
        \r
        You
        might have noticed that the new blocks we're using are in a different toolbox
        drawer. The **Circuit** drawer contains all of the board objects that are
        built into the Circuit Playground, but when you start wiring your own circuits
        the Maker Toolkit no longer knows where everything is.\r
        \r
        The new **Maker**
        drawer contains general purpose commands instead of ones that are customized
        for the Circuit Playground. In addition to the `pinMode()` and `digitalWrite()`
        commands you've seen, it includes commands to create new objects on the board
        that can be programmed in the same way as the blocks in the **Circuit** drawer.
        The `var myLed = createLed()` command, for example, creates a new LED object
        that behaves just like the `led` blocks you've been using.\r
        \r
        # Do This\r
        \r
        Now
        that you're creating new board objects that we don't have blocks for, you'll
        need to work in text mode. You can still drag out blocks that you're familiar
        with from the **Circuit** drawer, you'll just need to change the name of
        the object.\r
        \r
        * Keep your LED wired just as it was before (connected
        to pin 2)\r
        * Make sure you're in text mode, not block mode.\r
        * Drag out
        an `led.blink()` block below the comment `// Blink myLed`.\r
        * Replace the
        text `led` with `myLed`.\r
        * Test your code.
      CSD U6 circuit mix_markdown_instruction: |-
        # Mix and Match Circuits\r
        \r
        Using
        the 8 numbered pins around the edge of the board, you can combine as many
        buttons and LEDs as you can fit, using a separate numbered pin for each circuit
        and a shared ground pin for all them.\r
        \r
        # Do This\r
        \r
        Disconnect any
        circuits currently attached to your board.\r
        \r
        * Create a button circuit
        connected to pin 0.\r
        * Create an LED circuit connected to pin 2.\r
        * Create
        a new button object for your button circuit with `createButton()`.\r
        * Create
        a new LED object for your LED circuit with `createLed()`\r
        * Add event handlers
        to turn on your new LED when your button is pressed down, and turn it back
        off when the button is released.\r
        \r
        _Tip: When sharing the ground pin
        with multiple circuits it can be useful to connect a larger conductive object
        (like a bare wire) to the pin and then connect all of your circuits to that
        larger object._
      CSD U6 circuit multi led_markdown_instruction: |-
        # Wiring Multiple LEDs\r
        \r
        Using
        the `createLed()` block you can connect and control as many LEDs as your board
        has room for. Each LED needs to be connected to a separate numbered pin, but
        they can all share the same ground pin.\r
        \r
        # Do This\r
        \r
        Leave the
        current LED connected to pin 2, but add another one to a numbered pin of your
        choice. For your new LED:\r
        \r
        * Add a `var myLed = createLed()` block.\r
        *
        Replace the variable label `myLed` with a unique label.\r
        * Make sure you're
        in text mode, not block mode.\r
        * Add an `led.blink()` command.\r
        * Replace
        the text `led` with your new LED variable.\r
        * Test your code.\r
        \r
        _Challenge:
        Try adding a third LED and make all three LED blink at different intervals._
      CSD U6 circuit multi led_2018_markdown_instruction: |-
        # Wiring Multiple LEDs\r
        \r
        Using
        the `createLed()` block you can connect and control as many LEDs as your board
        has room for. Each LED needs to be connected to a separate numbered pin, but
        they can all share the same ground pin.\r
        \r
        # Do This\r
        \r
        Leave the
        current LED connected to pin 2, but add another one to a numbered pin of your
        choice. For your new LED:\r
        \r
        * Add a `var myLed = createLed()` block.\r
        *
        Replace the variable label `myLed` with a unique label.\r
        * Make sure you're
        in text mode, not block mode.\r
        * Add an `led.blink()` command.\r
        * Replace
        the text `led` with your new LED variable.\r
        * Test your code.\r
        \r
        _Challenge:
        Try adding a third LED and make all three LED blink at different intervals._
      CSD U6 circuit pinMode_markdown_instruction: |-
        # Wire a Circuit\r
        \r
        You can
        use any of the numbered pads to add additional circuits to your board. Let's
        use pin 2 to add another LED.\r
        \r
        # Do This\r
        \r
        * Using a wire, connect
        pin 2 to the positive (+) side of an LED\r
        * Using another wire, connect
        the negative (-) side of the LED to a ground (GND) pin (it doesn't matter
        which one)\r
        * Run this program to test your circuit. If it worked, your
        LED should turn on.\r
        \r
        _Debugging Tip: LEDs only work if the electricity
        is flowing from positive to negative. If your LED doesn't light up, make
        sure that it's oriented the right way._
      CSD U6 circuit pinMode_2018_markdown_instruction: |-
        # Wire a Circuit\r
        \r
        You
        can use any of the numbered pads to add additional circuits to your board.
        Let's use pin 2 to add another LED.\r
        \r
        # Do This\r
        \r
        * Using a wire,
        connect pin 2 to the positive (+) side of an LED\r
        * Using another wire,
        connect the negative (-) side of the LED to a ground (GND) pin (it doesn't
        matter which one)\r
        * Run this program to test your circuit. If it worked,
        your LED should turn on.\r
        \r
        _Debugging Tip: LEDs only work if the electricity
        is flowing from positive to negative. If your LED doesn't light up, make
        sure that it's oriented the right way._
      CSD U6 circuit predict multi_markdown_instruction: |-
        # Make a Prediction\r
        \r
        All
        of the devices that you've used so far are actually circuits connected to
        numbered pins! Look for **#13** on your board to see which circuit is connected
        to pin 13, then read through this code and predict what will happen when the
        program is run.
      CSD U6 circuit predict multi_2018_markdown_instruction: |-
        # Make a Prediction\r
        \r
        All
        of the devices that you've used so far are actually circuits connected to
        numbered pins! Look for **#13** on your board to see which circuit is connected
        to pin 13, then read through this code and predict what will happen when the
        program is run.
      CSD U6 circuit project program_markdown_instruction: |-
        # Program Your Prototype\r
        \r
        Using
        your planning guide, program your prototype to simulate basic functionality.\r
        \r
        #
        Do This\r
        \r
        Your physical prototype should by now include one of the buttons
        wired to pin 0, and one of your location indicator LEDs connected to pin 2.
        That's enough to model how the prototype should work, you just need program
        the button to turn on and off the LED.\r
        \r
        * Create your LED and button
        objects using the appropriate `create` commands.\r
        * Program event handlers
        to respond to your button going down and up, which turn on and off the LED.
      CSD U6 circuit project template_markdown_instruction: |-
        # Prototyping Circuit
        Project Template
      CSD U6 circuit project template_2018_markdown_instruction: |-
        # Prototyping Circuit
        Project Template
      CSD U6 circuit smart bike blinker buttons_markdown_instruction: |-
        # Smart Bike
        - Blinker Controls\r
        \r
        With your turn signal LEDs hooked up, you just need
        to program some buttons to control them. You may want to place buttons elsewhere
        on the bike to make controlling your turn signals easier, but for now we'll
        just use the built in left and right buttons.\r
        \r
        # Do This\r
        \r
        * Add
        event handlers to blink the left turn signal when the left button is pressed.\r
        *
        Add event handlers to blink the right turn signal when the right button is
        pressed.\r
        * Test your code!\r
        \r
        _Hint: You'll need to be in text mode
        to make the blinkers work, since there are no built-in blocks for the elements
        that you add on to the board._
      CSD U6 circuit smart bike blinker buttons_2018_markdown_instruction: |-
        # Smart
        Bike - Blinker Controls\r
        \r
        With your turn signal LEDs hooked up, you just
        need to program some buttons to control them. You may want to place buttons
        elsewhere on the bike to make controlling your turn signals easier, but for
        now we'll just use the built in left and right buttons.\r
        \r
        # Do This\r
        \r
        *
        Add event handlers to blink the left turn signal when the left button is pressed.\r
        *
        Add event handlers to blink the right turn signal when the right button is
        pressed.\r
        * Test your code!\r
        \r
        _Hint: You'll need to be in text mode
        to make the blinkers work, since there are no built-in blocks for the elements
        that you add on to the board._
      CSD U6 circuit smart bike blinkers_markdown_instruction: "# Smart Bike - Blinkers\\r\n\\r\nUsing\nyour
        planning guide, wire up the two LEDs that will serve as the blinkers.\nIn
        order to make sure that the blinkers can be mounted at the end of the handlebars,\nmake
        sure you wire them so that they can stretch out in opposite directions.\\r\n\\r\n#\nDo
        This\\r\n\\r\nUsing alligator clips, wire, or other conductive material,\nconnect
        two LEDs to your board, one for each turn signal blinker.\\r\n\\r\n*\nHook
        up each LED to a different numbered pin on the board.\\r\n* Use the `createLed()`\nblock
        to create an LED object for each blinker.\\r\n\\r\n_Tip: Make your wiring\neasier
        by considering how your blinkers will be mounted when selecting a pin\nto
        use._ "
      CSD U6 circuit smart bike blinkers_2018_markdown_instruction: "# Smart Bike\n-
        Blinkers\\r\n\\r\nUsing your planning guide, wire up the two LEDs that will\nserve
        as the blinkers. In order to make sure that the blinkers can be mounted\nat
        the end of the handlebars, make sure you wire them so that they can stretch\nout
        in opposite directions.\\r\n\\r\n# Do This\\r\n\\r\nUsing alligator clips,\nwire,
        or other conductive material, connect two LEDs to your board, one for\neach
        turn signal blinker.\\r\n\\r\n* Hook up each LED to a different numbered\npin
        on the board.\\r\n* Use the `createLed()` block to create an LED object\nfor
        each blinker.\\r\n\\r\n_Tip: Make your wiring easier by considering how\nyour
        blinkers will be mounted when selecting a pin to use._ "
      CSD U6 circuit smart bike buzzer_markdown_instruction: |-
        # Smart Bike - Buzzer\r
        \r
        Now
        that we know how to add more buttons, you can add a button to control the
        smart bike's horn.\r
        \r
        # Do This\r
        \r
        Using the button that you've
        already wired to the board, find a good spot to place your horn button. Then:\r
        \r
        *
        Create a button object for your horn button\r
        * Add an event handler to buzz
        when button is pressed\r
        \r
        _Hint: The button object that you create won't
        be in the `onBoardEvent()` dropdown, so you'll need to type the name you've
        chosen in. Make sure not to use quotation marks!_
      CSD U6 circuit smart bike buzzer_2018_markdown_instruction: |-
        # Smart Bike -
        Buzzer\r
        \r
        Now that we know how to add more buttons, you can add a button
        to control the smart bike's horn.\r
        \r
        # Do This\r
        \r
        Using the button
        that you've already wired to the board, find a good spot to place your horn
        button. Then:\r
        \r
        * Create a button object for your horn button\r
        * Add
        an event handler to buzz when button is pressed\r
        \r
        _Hint: The button object
        that you create won't be in the `onBoardEvent()` dropdown, so you'll need
        to type the name you've chosen in. Make sure not to use quotation marks!_
      CSD U6 circuit smart bike final_markdown_instruction: |-
        # Smart Bike - Final
        Touches\r
        \r
        At this point your smart bike should have all of its basic
        functionality in place. Now is your chance to add any finishing touches.\r
        \r
        #
        Do This\r
        \r
        You may want to divide and conquer at this point, allowing
        some members of your group to focus on the physical aspects of the prototype
        while others work on improving the code. As this is a prototype, don't worry
        about making everything perfect, but do try to ensure that the prototype communicates
        your design well enough to test and get feedback.
      CSD U6 circuit smart bike final_2018_markdown_instruction: |-
        # Smart Bike -
        Final Touches\r
        \r
        At this point your smart bike should have all of its
        basic functionality in place. Now is your chance to add any finishing touches.\r
        \r
        #
        Do This\r
        \r
        You may want to divide and conquer at this point, allowing
        some members of your group to focus on the physical aspects of the prototype
        while others work on improving the code. As this is a prototype, don't worry
        about making everything perfect, but do try to ensure that the prototype communicates
        your design well enough to test and get feedback.
      CSD U6 circuit smart bike light_markdown_instruction: |-
        # Smart Bike - Headlight\r
        \r
        The
        last part of the smart bike plan that we need to figure out is the automatic
        headlight.\r
        \r
        # Do This\r
        \r
        First you'll need to decide what to use
        for your headlight. You could add another LED circuit, or perhaps you can
        find a way to mount the board that allows for using the color LEDs as a headlight.
        Once you've figured out the physical layout of your lights, add code to your
        program that turns on and off the headlight based on how light or dark it
        is.\r
        \r
        _Hint: If you're using the built-in color LEDs, you might need
        to protect the light sensor to make sure that it's responding to the ambient
        light level and not the light from the LEDs._
      CSD U6 circuit smart bike light_2018_markdown_instruction: |-
        # Smart Bike -
        Headlight\r
        \r
        The last part of the smart bike plan that we need to figure
        out is the automatic headlight.\r
        \r
        # Do This\r
        \r
        First you'll need
        to decide what to use for your headlight. You could add another LED circuit,
        or perhaps you can find a way to mount the board that allows for using the
        color LEDs as a headlight. Once you've figured out the physical layout of
        your lights, add code to your program that turns on and off the headlight
        based on how light or dark it is.\r
        \r
        _Hint: If you're using the built-in
        color LEDs, you might need to protect the light sensor to make sure that it's
        responding to the ambient light level and not the light from the LEDs._
      CSD U6 colorLED on_markdown_instruction: |-
        <img src="//curriculum.code.org/images/circuitplayground/colorLedonoff.gif"
        style="float: right; margin: 10px;">\r
        \r
        # colorLeds\r
        \r
        The color
        LEDs can use the same basic commands that you used with the red LED, such
        as `on()` and `off()`. This program should turn on and off the bottom LEDs
        as shown in the picture, but only one LED is working.\r
        \r
        # Do This\r
        \r
        *
        Read and run the code to see how the program turns the bottom left LED on
        and off.\r
        * Add more code to make both bottom LEDs turn on and off.
      CSD U6 colorLED on_2018_markdown_instruction: |-
        <img src="//curriculum.code.org/images/circuitplayground/colorLedonoff.gif"
        style="float: right; margin: 10px;">\r
        \r
        # colorLeds\r
        \r
        The color
        LEDs can use the same basic commands that you used with the red LED, such
        as `on()` and `off()`. This program should turn on and off the bottom LEDs
        as shown in the picture, but only one LED is working.\r
        \r
        # Do This\r
        \r
        *
        Read and run the code to see how the program turns the bottom left LED on
        and off.\r
        * Add more code to make both bottom LEDs turn on and off.
      CSD U6 colorLeds debug_markdown_instruction: |-
        <img src="https://images.code.org/e055be621221385d3503962bee5aa616-image-1491493475417.44.28.png"
        style="width:250px; float:right">\r
        \r
        # Debug: colorLeds\r
        \r
        Can you
        debug the index values so that the rainbow shows up on the board like in the
        picture?
      CSD U6 colorLeds debug_2018_markdown_instruction: |-
        <img src="https://images.code.org/e055be621221385d3503962bee5aa616-image-1491493475417.44.28.png"
        style="width:250px; float:right">\r
        \r
        # Debug: colorLeds\r
        \r
        Can you
        debug the index values so that the rainbow shows up on the board like in the
        picture?
      CSD U6 colorLeds intensity_markdown_instruction: |-
        # Changing Brightness\r
        \r
        The
        `intensity()` command lets you set an LED's brightness (or _intensity_) from
        0 - 100. This program lets you choose three levels of brightness for your
        rainbow lights, but the medium level doesn't work yet.\r
        \r
        # Do This\r
        \r
        *
        Read the program and see how the "Bright" and "Dim" buttons work.\r
        *
        Add code to make the "Medium" button make the rainbow a medium level of
        brightness (between "Bright" and "Dim"). ([Show me where](#triggercallout=code_triggered))
      CSD U6 colorLeds intensity_2018_markdown_instruction: |-
        # Changing Brightness\r
        \r
        The
        `intensity()` command lets you set an LED's brightness (or _intensity_) from
        0 - 100. This program lets you choose three levels of brightness for your
        rainbow lights, but the medium level doesn't work yet.\r
        \r
        # Do This\r
        \r
        *
        Read the program and see how the "Bright" and "Dim" buttons work.\r
        *
        Add code to make the "Medium" button make the rainbow a medium level of
        brightness (between "Bright" and "Dim"). ([Show me where](#triggercallout=code_triggered))
      CSD U6 colorLeds light pattern_markdown_instruction: |-
        # Light Patterns\r
        \r
        This
        app already has one light pattern program, which can be activated by clicking
        a button. Notice that we put this pattern into a function to make the code
        cleaner and clearer.\r
        \r
        # Do This\r
        \r
        Create a light pattern function
        of your own - maybe the colors of your favorite holiday, college, sports team,
        or try to create an image with the lights.\r
        \r
        After you've created your
        new function, add a button and event handler so that you can switch between
        the two light patterns.
      CSD U6 colorLeds light pattern_2018_markdown_instruction: |-
        # Light Patterns\r
        \r
        This
        app already has one light pattern program, which can be activated by clicking
        a button. Notice that we put this pattern into a function to make the code
        cleaner and clearer.\r
        \r
        # Do This\r
        \r
        Create a light pattern function
        of your own - maybe the colors of your favorite holiday, college, sports team,
        or try to create an image with the lights.\r
        \r
        After you've created your
        new function, add a button and event handler so that you can switch between
        the two light patterns.
      CSD U6 colorLeds predict embed_markdown_instruction: |-
        # colorLEDs\r
        \r
        This
        program uses the colorLEDs array, which lets you control the color LEDs in
        your Circuit Playground.\r
        \r
        What do you think this code will do?  Write
        your prediction in the box below, then run the code to see what happens.
      CSD U6 colorLeds predict embed_2018_markdown_instruction: |-
        # colorLEDs\r
        \r
        This
        program uses the colorLEDs array, which lets you control the color LEDs in
        your Circuit Playground.\r
        \r
        What do you think this code will do?  Write
        your prediction in the box below, then run the code to see what happens.
      CSD U6 create LED app 2_markdown_instruction: |-
        # Make Your App - The Code\r
        \r
        Next,
        you'll need to add the code that makes your app work.\r
        \r
        # Do This\r
        \r
        *
        Discuss with your partner what code you will need in your app.  Do you need...\r
          *
        Events?\r
          * Variables?\r
          * Setters?\r
          * Random Numbers?\r
        * In Code
        Mode, add in the code that will make your app work.
      CSD U6 create LED app 2_2018_markdown_instruction: |-
        # Make Your App - The Code\r
        \r
        Next,
        you'll need to add the code that makes your app work.\r
        \r
        # Do This\r
        \r
        *
        Discuss with your partner what code you will need in your app.  Do you need...\r
          *
        Events?\r
          * Variables?\r
          * Setters?\r
          * Random Numbers?\r
        * In Code
        Mode, add in the code that will make your app work.
      CSD U6 create LED app_markdown_instruction: |-
        # Make Your App - The Screen\r
        \r
        Now,
        you and your partner can make your own app using the LED.  Discuss with your
        partner what kind of app you want to make.\r
        \r
        # Do This\r
        \r
        * Discuss
        with your partner what screen elements you will need in your app.  Do you
        want...\r
          * Buttons?\r
          * Images?\r
          * Text?\r
        * In Design Mode, add
        the elements, making sure you give each a meaningful ID.
      CSD U6 create LED app_2018_markdown_instruction: |-
        # Make Your App - The Screen\r
        \r
        Now,
        you and your partner can make your own app using the LED.  Discuss with your
        partner what kind of app you want to make.\r
        \r
        # Do This\r
        \r
        * Discuss
        with your partner what screen elements you will need in your app.  Do you
        want...\r
          * Buttons?\r
          * Images?\r
          * Text?\r
        * In Design Mode, add
        the elements, making sure you give each a meaningful ID.
      CSD U6 design motorcycle_markdown_instruction: |-
        # Add Your Own Elements\r
        \r
        Now
        it's time to add some elements of your own. The motorcycle should be able
        to move up and down right now, but how can you control its speed?\r
        \r
        #
        Do This\r
        \r
        * Add a slider in design mode.\r
          * Make sure you set the
        min and max values of the slider in design mode.\r
        * Create an event that
        will trigger when the slider value is changed.\r
        * Add code to get the slider
        value and store it into the `speed` variable when the event is triggered.
      CSD U6 design motorcycle_2018_markdown_instruction: |-
        # Add Your Own Elements\r
        \r
        Now
        it's time to add some elements of your own. The motorcycle should be able
        to move up and down right now, but how can you control its speed?\r
        \r
        #
        Do This\r
        \r
        * Add a slider in design mode.\r
          * Make sure you set the
        min and max values of the slider in design mode.\r
        * Create an event that
        will trigger when the slider value is changed.\r
        * Add code to get the slider
        value and store it into the `speed` variable when the event is triggered.
      CSD U6 direction theremin_markdown_instruction: |-
        # Accelerated Music\r
        \r
        We're
        going to make music with the board again, this time using the accelerometer.
        \r
        \r
        Since `buzzer.frequency` takes a number as a parameter, we can use
        the number that the accelerometer's pitch and roll properties return to change
        the frequency.\r
        \r
        # Do This\r
        * Make a variable to store either the accelerometer's
        pitch or roll, name it accordingly.\r
        * Use this variable with the buzzer,
        and alter it in some way. You can add or subtract from it, multiply it by
        another number, etc.\r
        * Run the program and alter it again to see what sort
        of sounds you get this time.
      CSD U6 directional LEDs roll_markdown_instruction: |-
        # Roll\r
        \r
        This program
        should display "Left" or "Right" on the screen, depending on which way
        the board is tilted.\r
        \r
        # Do this\r
        * Use the "roll" property of the
        accelerometer to determine whether the board is tilted to the left or right.\r
        *
        Use a conditional to change the text for the "direction" element to be either
        "Left" or "Right", depending on the board's orientation.
      CSD U6 directional LEDs roll_2018_markdown_instruction: |-
        # Roll\r
        \r
        This
        program should display "Left" or "Right" on the screen, depending on which
        way the board is tilted.\r
        \r
        # Do this\r
        * Use the "roll" property of
        the accelerometer to determine whether the board is tilted to the left or
        right.\r
        * Use a conditional to change the text for the "direction" element
        to be either "Left" or "Right", depending on the board's orientation.
      CSD U6 directional leds pitch_markdown_instruction: |-
        # Pitch\r
        \r
        This program
        lights the top LEDs (0 and 9) when you tilt the board forward. If you tilt
        the board back, the LEDs at the bottom (4 and 5) should light.\r
        \r
        # Do
        This\r
        * Use the board's pitch to make LEDs 4 and 5 light up when you tilt
        the board back.\r
        * Run your code and test it a few times.
      CSD U6 directional leds pitch_2018_markdown_instruction: |-
        # Pitch\r
        \r
        This
        program lights the top LEDs (0 and 9) when you tilt the board forward. If
        you tilt the board back, the LEDs at the bottom (4 and 5) should light.\r
        \r
        #
        Do This\r
        * Use the board's pitch to make LEDs 4 and 5 light up when you
        tilt the board back.\r
        * Run your code and test it a few times.
      CSD U6 emoji race demo_markdown_instruction: |-
        # Emoji Race!\r
        \r
        This is
        an example of a race game that you'll build by the end of this lesson. To
        play, pair up with another student. The student on the left will the click
        the left button on the Circuit Playground as fast as they can, while the student
        on the right clicks the right button. Whoever can get their emoji to the bottom
        of the screen first wins.\r
        \r
        # Do This\r
        \r
        Turn to a classmate and
        make a list of the following information.\r
        \r
        * What components of the
        board does this program use?\r
        * What events is this program responding to?\r
        *
        What functions might you create to make this program work?
      CSD U6 emoji race demo_2018_markdown_instruction: |-
        # Emoji Race!\r
        \r
        This
        is an example of a race game that you'll build by the end of this lesson.
        To play, pair up with another student. The student on the left will the click
        the left button on the Circuit Playground as fast as they can, while the student
        on the right clicks the right button. Whoever can get their emoji to the bottom
        of the screen first wins.\r
        \r
        # Do This\r
        \r
        Turn to a classmate and
        make a list of the following information.\r
        \r
        * What components of the
        board does this program use?\r
        * What events is this program responding to?\r
        *
        What functions might you create to make this program work?
      CSD U6 emotion machine 1_markdown_instruction: |-
        # Changing Images\r
        \r
        The
        first thing you'll need your emotion machine to do is change to the appropriate
        image when a button is clicked. If you look at the starting code, you'll
        see that we already added `setProperty("face", "image", "icon://fa-smile-o")`
        to change to a smiley face when you click happy.\r
        \r
        # Do This\r
        \r
        <div
        markdown="1" style="float:right; margin: 20px;">\r
        \r
        ![expandable](https://curriculum.code.org/media/uploads/select_image.gif)\r
        \r
        </div>\r
        \r
        Create
        an event handler for "sad_button" and make it change to a sad emoji. To
        do this you'll need to set the "image" property of the image with id "face".\r
        \r
        _Tip:
        when you click the last dropdown in the `setProperty` block click "Choose..."
        to go to your media library. From there you can select an icon from our icon
        library or upload an image of your own._
      CSD U6 emotion machine 1_2018_markdown_instruction: |-
        # Changing Images\r
        \r
        The
        first thing you'll need your emotion machine to do is change to the appropriate
        image when a button is clicked. If you look at the starting code, you'll
        see that we already added `setProperty("face", "image", "icon://fa-smile-o")`
        to change to a smiley face when you click happy.\r
        \r
        # Do This\r
        \r
        <div
        markdown="1" style="float:right; margin: 20px;">\r
        \r
        ![expandable](https://curriculum.code.org/media/uploads/select_image.gif)\r
        \r
        </div>\r
        \r
        Create
        an event handler for "sad_button" and make it change to a sad emoji. To
        do this you'll need to set the "image" property of the image with id "face".\r
        \r
        _Tip:
        when you click the last dropdown in the `setProperty` block click "Choose..."
        to go to your media library. From there you can select an icon from our icon
        library or upload an image of your own._
      CSD U6 emotion machine 2_markdown_instruction: |-
        # Changing Color\r
        \r
        If
        you look back at the example for this app, you should notice that not only
        do the emojis change when you click a button, but their color changes as well.\r
        \r
        #
        Do This\r
        \r
        In each of the event handlers, set the "icon-color" property
        of "face". Pick a warm color for happy and a cool color for sad.
      CSD U6 emotion machine 2_2018_markdown_instruction: |-
        # Changing Color\r
        \r
        If
        you look back at the example for this app, you should notice that not only
        do the emojis change when you click a button, but their color changes as well.\r
        \r
        #
        Do This\r
        \r
        In each of the event handlers, set the "icon-color" property
        of "face". Pick a warm color for happy and a cool color for sad.
      CSD U6 emotion machine 3_markdown_instruction: |-
        # Setting Text\r
        \r
        Your
        happy and sad buttons should be almost completely functional now. The only
        thing they still need to do is change the text at the bottom of the screen.\r
        \r
        #
        Do This\r
        \r
        Make each of the event handlers change the text of "feeling"
        to the appropriate emotion (either "happy" or "sad")
      CSD U6 emotion machine 3_2018_markdown_instruction: |-
        # Setting Text\r
        \r
        Your
        happy and sad buttons should be almost completely functional now. The only
        thing they still need to do is change the text at the bottom of the screen.\r
        \r
        #
        Do This\r
        \r
        Make each of the event handlers change the text of "feeling"
        to the appropriate emotion (either "happy" or "sad")
      CSD U6 emotion machine 4_markdown_instruction: |-
        # Add Another Emotion\r
        \r
        In
        the example app you saw earlier, you could set the emotion to happy, sad,
        or meh. Your app only has happy and sad, can you add a third emotion?\r
        \r
        #
        Do This\r
        \r
        Using all of the same techniques you used for the happy and
        sad buttons, create a third emotion button. You could stick with meh, or you
        could pick an emotion of your own.\r
        \r
        When you're all done, feel free
        to add more emotions or features before submitting your final version.
      CSD U6 emotion machine 4_2018_markdown_instruction: |-
        # Add Another Emotion\r
        \r
        In
        the example app you saw earlier, you could set the emotion to happy, sad,
        or meh. Your app only has happy and sad, can you add a third emotion?\r
        \r
        #
        Do This\r
        \r
        Using all of the same techniques you used for the happy and
        sad buttons, create a third emotion button. You could stick with meh, or you
        could pick an emotion of your own.\r
        \r
        When you're all done, feel free
        to add more emotions or features before submitting your final version.
      CSD U6 emotion machine example_markdown_instruction: |-
        # The Emotion Machine\r
        \r
        Check
        out this Emotion Machine app that you'll be building next. Try clicking on
        the buttons to see how it works.\r
        \r
        # Do This\r
        \r
        Try out the app,
        and then with a neighbor discuss:\r
        \r
        * What events handlers does this
        app use?\r
        * Which elements are being changed with code?\r
        * Which properties
        are being changed when you click a button?
      CSD U6 emotion machine example_2018_markdown_instruction: |-
        # The Emotion Machine\r
        \r
        Check
        out this Emotion Machine app that you'll be building next. Try clicking on
        the buttons to see how it works.\r
        \r
        # Do This\r
        \r
        Try out the app,
        and then with a neighbor discuss:\r
        \r
        * What events handlers does this
        app use?\r
        * Which elements are being changed with code?\r
        * Which properties
        are being changed when you click a button?
      CSD U6 for loop button array_markdown_instruction: |-
        # Looping Over Arrays\r
        \r
        One
        of the most powerful ways to use a for loop is to loop over an array, running
        code on each item in the array. We can do this by using the for loop counter
        variable (usually `i`) as the index of your array.\r
        \r
        # Do This\r
        \r
        This
        program should loop over the array `buttons` and do two things to each button
        - change the background color to red, and change the height to 50 px.\r
        \r
        *
        Add a second `setProperty` block inside the loop\r
        * Change the target to
        `buttons[i]`\r
        * Set the "height" property to 50\r
        \r
        ![expandable](https://images.code.org/df3d514bae5c23de9e0fbdf1d7798432-image-1512431649584.png)
      CSD U6 for loop button array_2018_markdown_instruction: |-
        # Looping Over Arrays\r
        \r
        One
        of the most powerful ways to use a for loop is to loop over an array, running
        code on each item in the array. We can do this by using the for loop counter
        variable (usually `i`) as the index of your array.\r
        \r
        # Do This\r
        \r
        This
        program should loop over the array `buttons` and do two things to each button
        - change the background color to red, and change the height to 50 px.\r
        \r
        *
        Add a second `setProperty` block inside the loop\r
        * Change the target to
        `buttons[i]`\r
        * Set the "height" property to 50\r
        \r
        ![expandable](https://images.code.org/df3d514bae5c23de9e0fbdf1d7798432-image-1512431649584.png)
      CSD U6 for loop click exit_markdown_instruction: |-
        # Knowing When to Stop\r
        \r
        If
        you clicked the button too many times in the last level, you got an error.
        Whenever you're writing code that repeats, you should think about when to
        _stop_ repeating.\r
        \r
        # Do This\r
        \r
        This program is similar to the previous
        one, but there is a conditional inside the event handler. You'll need to
        complete the conditional so that we don't try to toggle an LED that doesn't
        exist.\r
        \r
        _Would your code work without changes for a board with more
        or fewer LEDs? If not, could you modify it so it would?_
      CSD U6 for loop click exit_2018_markdown_instruction: |-
        # Knowing When to Stop\r
        \r
        If
        you clicked the button too many times in the last level, you got an error.
        Whenever you're writing code that repeats, you should think about when to
        _stop_ repeating.\r
        \r
        # Do This\r
        \r
        This program is similar to the previous
        one, but there is a conditional inside the event handler. You'll need to
        complete the conditional so that we don't try to toggle an LED that doesn't
        exist.\r
        \r
        _Would your code work without changes for a board with more
        or fewer LEDs? If not, could you modify it so it would?_
      CSD U6 for loop click predict question_markdown_instruction: |-
        # Make a Prediction\r
        \r
        Read
        through the code for this program and predict what will happen each time the
        button is clicked?
      CSD U6 for loop click predict question_2018_markdown_instruction: |-
        # Make a
        Prediction\r
        \r
        Read through the code for this program and predict what
        will happen each time the button is clicked?
      CSD U6 for loop images_markdown_instruction: |-
        # Constructing a for loop from
        scratch\r
        \r
        Now that you've had some practice modifying for loops to process
        arrays, let's see if you can do it yourself.\r
        \r
        # Do This\r
        \r
        We've
        provided the design elements and an array to start with, but the rest is on
        you.\r
        \r
        * Add an event handler to respond to the "thumbsup_button" being
        clicked\r
        * Place a _for loop_ inside the event handler\r
        * Modify the exit
        condition of the _for loop_ so that it will run until it gets to the end of
        the array `images`\r
        * Inside your _for loop_ change the current image to
        "icon://fa-thumbs-o-up"\r
        \r
        _Challenge: Can you add a second button that
        turns all of the images back to thumbs down?_
      CSD U6 for loop images_2018_markdown_instruction: |-
        # Constructing a for loop
        from scratch\r
        \r
        Now that you've had some practice modifying for loops
        to process arrays, let's see if you can do it yourself.\r
        \r
        # Do This\r
        \r
        We've
        provided the design elements and an array to start with, but the rest is on
        you.\r
        \r
        * Add an event handler to respond to the "thumbsup_button" being
        clicked\r
        * Place a _for loop_ inside the event handler\r
        * Modify the exit
        condition of the _for loop_ so that it will run until it gets to the end of
        the array `images`\r
        * Inside your _for loop_ change the current image to
        "icon://fa-thumbs-o-up"\r
        \r
        _Challenge: Can you add a second button that
        turns all of the images back to thumbs down?_
      CSD U6 for loop led bonus 1_markdown_instruction: |-
        # Challenge: Add More Buttons\r
        \r
        Extend
        the program by adding more buttons that change the board to different colors.\r
        \r
        #
        Do This\r
        \r
        Add your new buttons in Design Mode and create event handlers
        to respond to your buttons and change the LED colors.
      CSD U6 for loop led bonus 1_2018_markdown_instruction: |-
        # Challenge: Add More
        Buttons\r
        \r
        Extend the program by adding more buttons that change the board
        to different colors.\r
        \r
        # Do This\r
        \r
        Add your new buttons in Design
        Mode and create event handlers to respond to your buttons and change the LED
        colors.
      CSD U6 for loop led bonus 2_markdown_instruction: |-
        # Challenge: Color Patterns\r
        \r
        Extend
        the program by adding more buttons that create different patterns of light.\r
        \r
        #
        Do This\r
        \r
        Add your new buttons in Design Mode and create event handlers
        to respond to your buttons and change the LED colors.\r
        \r
        _Hint: As you
        design your patterns, consider whether a function with parameters could help
        simplify your program._
      CSD U6 for loop led bonus 2_2018_markdown_instruction: |-
        # Challenge: Color
        Patterns\r
        \r
        Extend the program by adding more buttons that create different
        patterns of light.\r
        \r
        # Do This\r
        \r
        Add your new buttons in Design
        Mode and create event handlers to respond to your buttons and change the LED
        colors.\r
        \r
        _Hint: As you design your patterns, consider whether a function
        with parameters could help simplify your program._
      CSD U6 for loop led bonus 3_markdown_instruction: |-
        # Challenge: Music\r
        \r
        Use
        what you learned in the Making Music lesson to make the board play music when
        the lights change.\r
        \r
        # Do This\r
        \r
        Create some arrays of notes for
        different songs and add code to your event handlers to play your music.
      CSD U6 for loop led bonus 3_2018_markdown_instruction: |-
        # Challenge: Music\r
        \r
        Use
        what you learned in the Making Music lesson to make the board play music when
        the lights change.\r
        \r
        # Do This\r
        \r
        Create some arrays of notes for
        different songs and add code to your event handlers to play your music.
      CSD U6 for loop led function call_markdown_instruction: |-
        # Calling Your Function\r
        \r
        Now
        that you've created a function that can behave differently based on the parameter
        it is passed, we can use it in multiple different event handlers to change
        the lights to different colors.\r
        \r
        # Do This\r
        \r
        We'll start simple
        by just creating an event handler for "button_red"\r
        \r
        * Create a new
        event handler to respond to "button_red"\r
        * Inside your event handler,
        add a "call function with parameter" block\r
        ![expandable](https://images.code.org/ee8e026b59682066eccfc4795b5c5036-image-1512771755527.png)\r
        *
        Change the name from `myFunction` to `setLedsColor`\r
        * Change the parameter
        from `n` to "red" (note the quotation marks!)\r
        * Test your program, the
        "Red" button should turn all of your LEDs red
      CSD U6 for loop led function call_2018_markdown_instruction: |-
        # Calling Your
        Function\r
        \r
        Now that you've created a function that can behave differently
        based on the parameter it is passed, we can use it in multiple different event
        handlers to change the lights to different colors.\r
        \r
        # Do This\r
        \r
        We'll
        start simple by just creating an event handler for "button_red"\r
        \r
        *
        Create a new event handler to respond to "button_red"\r
        * Inside your event
        handler, add a "call function with parameter" block\r
        ![expandable](https://images.code.org/ee8e026b59682066eccfc4795b5c5036-image-1512771755527.png)\r
        *
        Change the name from `myFunction` to `setLedsColor`\r
        * Change the parameter
        from `n` to "red" (note the quotation marks!)\r
        * Test your program, the
        "Red" button should turn all of your LEDs red
      CSD U6 for loop led function finish_markdown_instruction: |-
        # Finish the App\r
        \r
        If
        your red button worked, the only thing left is to call your new function when
        all of the remaining buttons is pressed.\r
        \r
        # Do This\r
        \r
        For each
        of the remaining buttons (green, blue, and white):\r
        \r
        * Create a new event
        handler\r
        * Call your `setLedsColor` function with the appropriate color
        ("green", "blue", or "white")\r
        * Test your program to make sure all
        of the buttons work\r
        \r
        When you've got all of your buttons working properly,
        click "Submit" to turn your program in.
      CSD U6 for loop led function finish_2018_markdown_instruction: |-
        # Finish the
        App\r
        \r
        If your red button worked, the only thing left is to call your
        new function when all of the remaining buttons is pressed.\r
        \r
        # Do This\r
        \r
        For
        each of the remaining buttons (green, blue, and white):\r
        \r
        * Create a
        new event handler\r
        * Call your `setLedsColor` function with the appropriate
        color ("green", "blue", or "white")\r
        * Test your program to make sure
        all of the buttons work\r
        \r
        When you've got all of your buttons working
        properly, click "Submit" to turn your program in.
      CSD U6 for loop led function_markdown_instruction: |-
        # Switching Colors with
        a Function\r
        \r
        We could write a for loop for each different color that
        we want to set LEDs to, but that would be a lot of duplicate code that's
        _almost_ the same. This is the perfect place to use a _function with a parameter_!
        You've seen and used functions with parameters before, but now you're going
        to make one from scratch.\r
        \r
        # Do This\r
        \r
        Create a function called
        `setLedsColor` that takes a parameter `color` and uses it to change the color
        of all of the LEDs\r
        \r
        * At the bottom of your program, drag out a function
        with parameter block ![expandable](https://images.code.org/bd6ec3d9a651cf760a7dc8e1949658c0-image-1512761901850.png)\r
        *
        Change the name from `myFunction` to `setLedsColor`\r
        * Change the parameter
        name from `n` to `color`\r
        * Inside your function, add a _for loop_ that
        repeats until it reaches the end of `colorLeds`\r
        * Inside your _for loop_,
        set the color of the current led to the parameter `color` (eg. `colorLeds[i].color(color)`\r
        \r
        We'll
        add event handlers that use this function in the next level, but for now you
        can test your function by your program and typing this into the debug console:
        `setLedsColor("blue")`
      CSD U6 for loop led function_2018_markdown_instruction: |-
        # Switching Colors
        with a Function\r
        \r
        We could write a for loop for each different color
        that we want to set LEDs to, but that would be a lot of duplicate code that's
        _almost_ the same. This is the perfect place to use a _function with a parameter_!
        You've seen and used functions with parameters before, but now you're going
        to make one from scratch.\r
        \r
        # Do This\r
        \r
        Create a function called
        `setLedsColor` that takes a parameter `color` and uses it to change the color
        of all of the LEDs\r
        \r
        * At the bottom of your program, drag out a function
        with parameter block ![expandable](https://images.code.org/bd6ec3d9a651cf760a7dc8e1949658c0-image-1512761901850.png)\r
        *
        Change the name from `myFunction` to `setLedsColor`\r
        * Change the parameter
        name from `n` to `color`\r
        * Inside your function, add a _for loop_ that
        repeats until it reaches the end of `colorLeds`\r
        * Inside your _for loop_,
        set the color of the current led to the parameter `color` (eg. `colorLeds[i].color(color)`\r
        \r
        We'll
        add event handlers that use this function in the next level, but for now you
        can test your function by your program and typing this into the debug console:
        `setLedsColor("blue")`
      CSD U6 for loop led off_markdown_instruction: |-
        # Turning all the Color LEDs
        Off\r
        \r
        Now that you've got one button to turn the color LEDs on, you
        can make another turn them off.\r
        \r
        # Do This\r
        \r
        Add an event handler
        to "button_off" with a for loop that turns each color LED off.
      CSD U6 for loop led off_2018_markdown_instruction: |-
        # Turning all the Color
        LEDs Off\r
        \r
        Now that you've got one button to turn the color LEDs on,
        you can make another turn them off.\r
        \r
        # Do This\r
        \r
        Add an event handler
        to "button_off" with a for loop that turns each color LED off.
      CSD U6 for loop led on_markdown_instruction: |-
        # Turning all the Color LEDs
        On\r
        \r
        Now that you know how to use a _for loop_ to process all of the
        elements in an array, you can turn on all of the Color LEDs much more easily
        than before.\r
        \r
        # Do This\r
        \r
        We're going to start an app that will
        control all of the Color LEDs on your board. The first step is to wire up
        the button that turns all of the LEDs on.\r
        \r
        * Add an event handler for
        "button_on"\r
        * Place a _for loop_ in your event handler that repeats until
        it reaches in the end of the array `colorLeds`\r
        * Inside the for loop, call
        `colorLeds[i].on()` to turn on the current color LED
      CSD U6 for loop led on_2018_markdown_instruction: |-
        # Turning all the Color
        LEDs On\r
        \r
        Now that you know how to use a _for loop_ to process all of
        the elements in an array, you can turn on all of the Color LEDs much more
        easily than before.\r
        \r
        # Do This\r
        \r
        We're going to start an app that
        will control all of the Color LEDs on your board. The first step is to wire
        up the button that turns all of the LEDs on.\r
        \r
        * Add an event handler
        for "button_on"\r
        * Place a _for loop_ in your event handler that repeats
        until it reaches in the end of the array `colorLeds`\r
        * Inside the for loop,
        call `colorLeds[i].on()` to turn on the current color LED
      CSD U6 for loop led template_markdown_instruction: |-
        # Arrays and For Loops
        RGB LED Project Template
      CSD U6 for loop led template_2018_markdown_instruction: |-
        # Arrays and For Loops
        RGB LED Project Template
      CSD U6 for loop list.length_markdown_instruction: |-
        # Array Length\r
        \r
        In
        the last program we told the loop to run three times with the code `for (var
        i = 0; i < 3; i++)`. This works, but we could write smarter programs by using
        the length of the array to decide how many times to loop.\r
        \r
        # Do This\r
        \r
        Change
        the exit condition of this for loop so that it runs while `i < buttons.length`.
      CSD U6 for loop list.length_2018_markdown_instruction: |-
        # Array Length\r
        \r
        In
        the last program we told the loop to run three times with the code `for (var
        i = 0; i < 3; i++)`. This works, but we could write smarter programs by using
        the length of the array to decide how many times to loop.\r
        \r
        # Do This\r
        \r
        Change
        the exit condition of this for loop so that it runs while `i < buttons.length`.
      CSD U6 frequency_markdown_instruction: |-
        # Frequency\r
        \r
        This buzzer controller
        has been expanded to control frequency as well, but the code isn't finished
        yet.\r
        \r
        # Do This\r
        * Using the `duration` variable as a model, create
        a `frequency` variable that gets the value from the *frequency* slider.\r
        *
        Modify the line of code that makes the buzzer sound so that it uses the `frequency`
        variable rather than the default frequency of `500`.\r
        * Run your code, then
        change the frequency and the duration to hear the difference in the buzzer.  (Don't
        forget to hit the button after you make a change!)
      CSD U6 frequency_2018_markdown_instruction: |-
        # Frequency\r
        \r
        This buzzer
        controller has been expanded to control frequency as well, but the code isn't
        finished yet.\r
        \r
        # Do This\r
        * Using the `duration` variable as a model,
        create a `frequency` variable that gets the value from the *frequency* slider.\r
        *
        Modify the line of code that makes the buzzer sound so that it uses the `frequency`
        variable rather than the default frequency of `500`.\r
        * Run your code, then
        change the frequency and the duration to hear the difference in the buzzer.  (Don't
        forget to hit the button after you make a change!)
      CSD U6 game project board events_markdown_instruction: |-
        # Board Events\r
        \r
        Go
        back to the Events section of your activity guide and find any events that
        respond to your board (ones that would use `onBoardEvent()`). Create event
        handlers for each of those now. If these events rely on functions you haven't
        written yet, just leave yourself a comment in the code.
      CSD U6 game project board events_2018_markdown_instruction: |-
        # Board Events\r
        \r
        Go
        back to the Events section of your activity guide and find any events that
        respond to your board (ones that would use `onBoardEvent()`). Create event
        handlers for each of those now. If these events rely on functions you haven't
        written yet, just leave yourself a comment in the code.
      CSD U6 game project finish_markdown_instruction: |-
        # Finishing Touches and Testing\r
        \r
        At
        this point you should have most of your program in place. Now you need to
        add whatever finishing touches are needed and do a little testing. When your
        app is ready, have your classmates try it out. See if you can find any bugs,
        confusing design choices, or missing features you'd like to work on.\r
        \r
        Once
        you're all done with this version of your program, click Submit to turn it
        in.
      CSD U6 game project finish_2018_markdown_instruction: |-
        # Finishing Touches
        and Testing\r
        \r
        At this point you should have most of your program in place.
        Now you need to add whatever finishing touches are needed and do a little
        testing. When your app is ready, have your classmates try it out. See if you
        can find any bugs, confusing design choices, or missing features you'd like
        to work on.\r
        \r
        Once you're all done with this version of your program,
        click Submit to turn it in.
      CSD U6 game project functions call_markdown_instruction: |-
        # Calling your Functions\r
        \r
        With
        your functions defined, you can can call them wherever you need. Go through
        your event handlers, or anywhere else in your program that your function should
        be used, and add calls to the function you created.
      CSD U6 game project functions call_2018_markdown_instruction: |-
        # Calling your
        Functions\r
        \r
        With your functions defined, you can can call them wherever
        you need. Go through your event handlers, or anywhere else in your program
        that your function should be used, and add calls to the function you created.
      CSD U6 game project functions define_markdown_instruction: |-
        # Define Your Functions\r
        \r
        Define
        all of your functions at the bottom of the program, under the comment `//
        Create your functions here`.\r
        \r
        Right now we're only worrying about writing
        the function _definitions_, the part which looks like:\r
        \r
        ```\r
        function
        myFunction() {\r
        \t// Things my function does\r
        }\r
        ```
      CSD U6 game project functions define_2018_markdown_instruction: |-
        # Define Your
        Functions\r
        \r
        Define all of your functions at the bottom of the program,
        under the comment `// Create your functions here`.\r
        \r
        Right now we're
        only worrying about writing the function _definitions_, the part which looks
        like:\r
        \r
        ```\r
        function myFunction() {\r
        \t// Things my function does\r
        }\r
        ```
      CSD U6 game project screen links_markdown_instruction: |-
        # UI Element Events\r
        \r
        Now
        that all of your screens are designed, you can add any event handlers that
        will respond to _screen interaction_. These should be listed in the "Events"
        section of your activity guide. If you run into new events that you hadn't
        thought of in the planning stage, make sure you add them to your project guide.\r
        \r
        Don't
        worry about making these completely functional yet. If your events rely on
        board elements or your own functions, we'll take care of that in later levels.
      CSD U6 game project screen links_2018_markdown_instruction: |-
        # UI Element Events\r
        \r
        Now
        that all of your screens are designed, you can add any event handlers that
        will respond to _screen interaction_. These should be listed in the "Events"
        section of your activity guide. If you run into new events that you hadn't
        thought of in the planning stage, make sure you add them to your project guide.\r
        \r
        Don't
        worry about making these completely functional yet. If your events rely on
        board elements or your own functions, we'll take care of that in later levels.
      CSD U6 game project screens_markdown_instruction: |-
        # Create Your Screens\r
        \r
        The
        first thing you'll need to do is create all of the screens that you've sketched
        in your planning guide.\r
        \r
        # Do This\r
        \r
        Use Design Mode to create
        all of the screens that your program will need. Don't forget to **pick sensible
        IDs** for all of your design elements.
      CSD U6 game project screens_2018_markdown_instruction: |-
        # Create Your Screens\r
        \r
        The
        first thing you'll need to do is create all of the screens that you've sketched
        in your planning guide.\r
        \r
        # Do This\r
        \r
        Use Design Mode to create
        all of the screens that your program will need. Don't forget to **pick sensible
        IDs** for all of your design elements.
      CSD U6 get toggle_markdown_instruction: |-
        # change\r
        \r
        This program has events
        that detect three different changes: the toggle switch, the interval slider,
        and the duration slider.  Because there are so many different things that
        cause the LED and buzzer to reset, it uses functions to organize the code.\r
        \r
        #
        Do This\r
        \r
        * Read the `updateLED` function to see what it does.\r
        * Add
        code to `updateBuzzer` to make the buzzer only turn on when the toggle switch
        is open.
      CSD U6 get toggle_2018_markdown_instruction: |-
        # change\r
        \r
        This program
        has events that detect three different changes: the toggle switch, the interval
        slider, and the duration slider.  Because there are so many different things
        that cause the LED and buzzer to reset, it uses functions to organize the
        code.\r
        \r
        # Do This\r
        \r
        * Read the `updateLED` function to see what
        it does.\r
        * Add code to `updateBuzzer` to make the buzzer only turn on when
        the toggle switch is open.
      CSD U6 getProperty Demo_markdown_instruction: |-
        # Updating Properties\r
        \r
        Here's
        an example of an app that uses both `getProperty` and `setProperty` to update
        elements on the screen. Read through the code, and then test it out by filling
        out the input fields and clicking "Save"\r
        \r
        _Note: you don't need to
        change any code here, but read through the provided code to see how it works._
      CSD U6 getProperty Demo_2018_markdown_instruction: |-
        # Updating Properties\r
        \r
        Here's
        an example of an app that uses both `getProperty` and `setProperty` to update
        elements on the screen. Read through the code, and then test it out by filling
        out the input fields and clicking "Save"\r
        \r
        _Note: you don't need to
        change any code here, but read through the provided code to see how it works._
      CSD U6 getProperty Text Input_markdown_instruction: |-
        # Getting Text\r
        \r
        The
        `getProperty()` block makes it easy to take text input from a user. In this
        app, the user can type in their name, click "Submit," and see their name
        below.\r
        \r
        # Do This\r
        \r
        * Drag out a `setProperty` block\r
        * For the
        first parameter, select "name" (the element's id)\r
        * For the second parameter,
        select "text" (the property you want to set)\r
        * For the third parameter,
        write your name in quotes (the value to set)\r
        \r
        _Note: We've removed
        the Design Mode tab for now so you can practice working with `setProperty`,
        but it'll come back later once you're building apps of your own._
      CSD U6 getProperty board predict_markdown_instruction: |-
        Predict Level (See
        contained level for markdown)
      CSD U6 getProperty board predict_2018_markdown_instruction: |-
        Predict Level
        (See contained level for markdown)
      CSD U6 getProperty buzzer_markdown_instruction: |-
        # Using the Circuit Playground\r
        \r
        Here's
        the same code you saw in the last level, but this time there's another dropdown
        menu to control the buzzer.  You'll have to add the code to make it work.\r
        \r
        #
        Do This\r
        * Using the LED code as a model, add new code inside the buttonL
        event that will play a long or short buzz according to the chosen value property
        of the *buzzer_input* dropdown menu.\r
        * Add new code that will turn the
        buzzer off when the right button is pressed.\r
          * (Hint: the event is already
        in the code.)
      CSD U6 getProperty buzzer_2018_markdown_instruction: |-
        # Using the Circuit Playground\r
        \r
        Here's
        the same code you saw in the last level, but this time there's another dropdown
        menu to control the buzzer.  You'll have to add the code to make it work.\r
        \r
        #
        Do This\r
        * Using the LED code as a model, add new code inside the buttonL
        event that will play a long or short buzz according to the chosen value property
        of the *buzzer_input* dropdown menu.\r
        * Add new code that will turn the
        buzzer off when the right button is pressed.\r
          * (Hint: the event is already
        in the code.)
      CSD U6 getProperty debug_markdown_instruction: |-
        # Debug\r
        \r
        This program
        should change the background color, text color, and text of the button "click_me"
        when it is clicked, but nothing seems to be working. Fix the code so that
        the program works as expected.
      CSD U6 getProperty dropdown_markdown_instruction: |-
        # Dropdowns\r
        \r
        Text
        Inputs are nice when you want users to be able to enter _anything_ they want,
        but often you want to restrict them to just a few choices. For example, if
        you want your user to pick a color, you probably want to make sure they can
        only choose colors that will actually work.\r
        \r
        The provided dropdown with
        the ID "color_input" allows a user to choose from a handful of background
        colors. When the "Set Color" button is clicked, the screen will turn that
        color.\r
        \r
        # Do This\r
        \r
        * Inside the event block, create a variable
        called `color` and assign it a value using the `getProperty` block.\r
          *
        Hint: You'll need to use the "value" property to get the user's choice.\r
        *
        Use the `setProperty` block to set the "background-color" property of "screen1"
        to your variable `color`.\r
          * Hint: Make sure you type `color` without
        quotation marks.\r
        * Test your program by picking a color and clicking "Set
        Color".
      CSD U6 getProperty dropdown_2018_markdown_instruction: |-
        # Dropdowns\r
        \r
        Text
        Inputs are nice when you want users to be able to enter _anything_ they want,
        but often you want to restrict them to just a few choices. For example, if
        you want your user to pick a color, you probably want to make sure they can
        only choose colors that will actually work.\r
        \r
        The provided dropdown with
        the ID "color_input" allows a user to choose from a handful of background
        colors. When the "Set Color" button is clicked, the screen will turn that
        color.\r
        \r
        # Do This\r
        \r
        * Inside the event block, create a variable
        called `color` and assign it a value using the `getProperty` block.\r
          *
        Hint: You'll need to use the "value" property to get the user's choice.\r
        *
        Use the `setProperty` block to set the "background-color" property of "screen1"
        to your variable `color`.\r
          * Hint: Make sure you type `color` without
        quotation marks.\r
        * Test your program by picking a color and clicking "Set
        Color".
      CSD U6 getProperty input_markdown_instruction: |-
        # getProperty and Variables\r
        \r
        This
        program uses the `name` variable to display the name typed into "name_input"
        when the Submit button is clicked. It should do the same for *friend_input*
        and *friend_output*, but it's missing a block.\r
        \r
        # Do This\r
        * Read
        the code and comments, then run the program to see how it works. (Make sure
        you type in your name and your friend's name before hitting "Submit".)\r
        *
        Use a `getProperty` block to store the text property of *friend_input* into
        your the variable "friend_name". ([Show me where.](#triggercallout=code_triggered))
      CSD U6 getProperty input_2018_markdown_instruction: |-
        # getProperty and Variables\r
        \r
        This
        program uses the `name` variable to display the name typed into "name_input"
        when the Submit button is clicked. It should do the same for *friend_input*
        and *friend_output*, but it's missing a block.\r
        \r
        # Do This\r
        * Read
        the code and comments, then run the program to see how it works. (Make sure
        you type in your name and your friend's name before hitting "Submit".)\r
        *
        Use a `getProperty` block to store the text property of *friend_input* into
        your the variable "friend_name". ([Show me where.](#triggercallout=code_triggered))
      CSD U6 getProperty predict_markdown_instruction: |-
        # Debug\r
        \r
        This program
        should change the background color, text color, and text of the button "click_me"
        when it is clicked, but nothing seems to be working. Fix the code so that
        the program works as expected.
      CSD U6 getProperty var_markdown_instruction: |-
        # getProperty and Variables\r
        \r
        You
        might have noticed in the last level that we used a _variable_ to store the
        values collected with `getProperty()`. Using variables in this way allows
        us to both get the properties of design elements and to use those values later
        on.\r
        \r
        # Do This\r
        \r
        This program should get the text typed into "name_input"
        when the Submit button is clicked, and then use that to set the text property
        of "name_output". It does this by storing the text in a variable called
        `name`, but it's not finished.\r
        \r
        Using a `getProperty` block, assign
        the `name` variable to the text property of "name_input". Test your program
        by typing in your name and clicking "Submit."
      CSD U6 getProperty xy challenge_markdown_instruction: |-
        # Challenge: Make it
        Your Own\r
        \r
        Use this program to experiment some more with getting and
        setting properties. Some ideas you might try include:\r
        \r
        * Add a button
        that returns the motorcycle to the center of the screen\r
        * Add buttons that
        move the motorcycle in two directions at once (eg up and right)\r
        * Use a
        dropdown with color names to change the motorcycle's color\r
        * Use a text
        input to control how much the motorcycle moves when you click the button
      CSD U6 getProperty xy design_markdown_instruction: |-
        # Design Mode is Back!\r
        \r
        Now
        that you have Design Mode back, you can add some elements of your own. The
        motorcycle should be able to move up and down right now, but what about left
        and right?\r
        \r
        # Do This\r
        \r
        Add two more buttons in design move for
        left and right, then program those buttons to move the motorcycle when clicked.
      CSD U6 getProperty xy_markdown_instruction: |-
        # Movement with Properties\r
        \r
        Earlier
        we used `setProperty` to change the x and y position of elements on the screen,
        but we could only move them to either a single specific location, or a random
        location. By using `getProperty` to find out an element's current position,
        we can use the **counter pattern** from Unit 3 to update that position.\r
        \r
        #
        Do This\r
        \r
        This program includes two buttons to move the motorcycle up
        and down. Using the working "up" button as an example, can you make the
        "down" button work?
      CSD U6 getters debug_markdown_instruction: |-
        # LED and Buzzer Controller\r
        \r
        This
        program operates the LED and the buzzer, but it has some problems.\r
        \r
        #
        Do This\r
        * Read the program to understand how it is supposed to work.\r
        *
        Find and correct the bugs so that the program works properly.
      CSD U6 getters debug_2018_markdown_instruction: |-
        # LED and Buzzer Controller\r
        \r
        This
        program operates the LED and the buzzer, but it has some problems.\r
        \r
        #
        Do This\r
        * Read the program to understand how it is supposed to work.\r
        *
        Find and correct the bugs so that the program works properly.
      CSD U6 goalie_markdown_instruction: |-
        # Updating Values with Data\r
        \r
        In
        this program the goalie is trying to block the soccer ball, but right now
        the ball isn't moving.\r
        \r
        \r
        # Do This\r
        \r
        * Use the counter pattern
        to update the ball's `x` value so that it moves across the screen.
      CSD U6 goalie_2018_markdown_instruction: |-
        # Updating Values with Data\r
        \r
        In
        this program the goalie is trying to block the soccer ball, but right now
        the ball isn't moving.\r
        \r
        \r
        # Do This\r
        \r
        * Use the counter pattern
        to update the ball's `x` value so that it moves across the screen.
      CSD U6 interval predict_markdown_instruction: |-
        # Interval\r
        \r
        Now we're
        using the slider to affect the behavior of the LED.   Just as we could change
        the values for the frequency and duration of the buzzer, we can change the
        value for the blink or pulse interval of the LED.\r
        \r
        # Do This\r
        \r
        *
        Read the code and predict what the program will do, then hit "Run" to test
        your prediction.
      CSD U6 interval predict_2018_markdown_instruction: |-
        # Interval\r
        \r
        Now we're
        using the slider to affect the behavior of the LED.   Just as we could change
        the values for the frequency and duration of the buzzer, we can change the
        value for the blink or pulse interval of the LED.\r
        \r
        # Do This\r
        \r
        *
        Read the code and predict what the program will do, then hit "Run" to test
        your prediction.
      CSD U6 interval_markdown_instruction: Predict Level
      CSD U6 interval_2018_markdown_instruction: Predict Level
      CSD U6 investigate orientation_markdown_instruction: |-
        # Pitch and Roll\r
        \r
        This
        program displays the board's pitch and roll, and it will also change colors
        depending on their values.  \r
        \r
        # Do This\r
        \r
        Make the program change
        the following colors by tilting the board to the correct pitch and roll.\r
        \r
        <div
        style="display:inline-block; background-color: skyblue; height: 30px; width:30px">&nbsp;</div>
        Pitch: 0 | Roll: -20\r
        \r
        <div style="display:inline-block; background-color:
        burlywood; height: 30px; width:30px">&nbsp;</div> Pitch: 30 | Roll: 0 \r
        \r
        <div
        style="display:inline-block; background-color: mistyrose; height: 30px; width:30px">&nbsp;</div>
        Pitch: -15 | Roll: 10 \r
        \r
        <div style="display:inline-block; background-color:
        yellowgreen; height: 30px; width:30px">&nbsp;</div> Pitch: 5 | Roll: -25
        \r
        \r
        <div style="display:inline-block; background-color: thistle; height:
        30px; width:30px">&nbsp;</div> Pitch: 10 | Roll: 30 \r
        \r
        Which way should
        you tilt to get a positive pitch?\r
        \r
        Which way should you tilt to get
        a negative roll?
      CSD U6 investigate orientation_2018_markdown_instruction: |-
        # Pitch and Roll\r
        \r
        This
        program displays the board's pitch and roll, and it will also change colors
        depending on their values.  \r
        \r
        # Do This\r
        \r
        Make the program change
        the following colors by tilting the board to the correct pitch and roll.\r
        \r
        <div
        style="display:inline-block; background-color: skyblue; height: 30px; width:30px">&nbsp;</div>
        Pitch: 0 | Roll: -20\r
        \r
        <div style="display:inline-block; background-color:
        burlywood; height: 30px; width:30px">&nbsp;</div> Pitch: 30 | Roll: 0 \r
        \r
        <div
        style="display:inline-block; background-color: mistyrose; height: 30px; width:30px">&nbsp;</div>
        Pitch: -15 | Roll: 10 \r
        \r
        <div style="display:inline-block; background-color:
        yellowgreen; height: 30px; width:30px">&nbsp;</div> Pitch: 5 | Roll: -25
        \r
        \r
        <div style="display:inline-block; background-color: thistle; height:
        30px; width:30px">&nbsp;</div> Pitch: 10 | Roll: 30 \r
        \r
        Which way should
        you tilt to get a positive pitch?\r
        \r
        Which way should you tilt to get
        a negative roll?
      CSD U6 iter create notes_markdown_instruction: |-
        # Music Player\r
        \r
        This
        program lets you play music by waving a wand over the different notes, but
        it's missing a function definition.\r
        \r
        # Do This\r
        * Create a `checkNotes()`
        function that will call `checkNote(note)` on everything in the "notes" array.
      CSD U6 iter create notes_2018_markdown_instruction: |-
        # Music Player\r
        \r
        This
        program lets you play music by waving a wand over the different notes, but
        it's missing a function definition.\r
        \r
        # Do This\r
        * Create a `checkNotes()`
        function that will call `checkNote(note)` on everything in the "notes" array.
      CSD U6 iter modify bugs_markdown_instruction: |-
        # Bug Shaker\r
        \r
        This program
        shakes bugs around when the board is shaken, but it's only working for one
        bug.\r
        \r
        # Do This\r
        * Change the `moveBugs()` function so that it calls
        `moveBug(color)` on every bug color.\r
          * (Hint: Look at the `detectHits()`
        function for clues how to do this.)
      CSD U6 iter modify bugs_2018_markdown_instruction: |-
        # Bug Shaker\r
        \r
        This
        program shakes bugs around when the board is shaken, but it's only working
        for one bug.\r
        \r
        # Do This\r
        * Change the `moveBugs()` function so that
        it calls `moveBug(color)` on every bug color.\r
          * (Hint: Look at the `detectHits()`
        function for clues how to do this.)
      CSD U6 iter predict bubbles contained_markdown_instruction: |-
        # Fish Bubbles\r
        \r
        This
        program uses the sound sensor in the same way as the clouds program.  How
        many bubbles will move when you blow on the board?
      CSD U6 iter predict bubbles contained_2018_markdown_instruction: |-
        # Fish Bubbles\r
        \r
        This
        program uses the sound sensor in the same way as the clouds program.  How
        many bubbles will move when you blow on the board?
      CSD U6 iter predict bubbles_markdown_instruction: "![](https://images.code.org/52f474adbbc3bdd87aaae407c9ebf588-image-1515690462464.png)"
      CSD U6 iter predict bubbles_2018_markdown_instruction: "![](https://images.code.org/52f474adbbc3bdd87aaae407c9ebf588-image-1515690462464.png)"
      CSD U6 light pattern challenge_markdown_instruction: |-
        # Challenge: More Patterns\r
        \r
        Add
        some more patterns to your app. Find a partner and add their pattern as an
        option. Make sure to put each pattern into its own function.
      CSD U6 light pattern challenge_2018_markdown_instruction: |-
        # Challenge: More
        Patterns\r
        \r
        Add some more patterns to your app. Find a partner and add
        their pattern as an option. Make sure to put each pattern into its own function.
      CSD U6 light pattern off_markdown_instruction: |-
        # Turning It Off\r
        \r
        When
        you start this app your lights are off, but as soon as choose a pattern, there's
        no way to turn the lights back off!\r
        \r
        # Do This\r
        \r
        Create a function
        that turns all of the LEDs off, and then add a "Off" button to your app
        and make it turn off all of the color LEDs.
      CSD U6 light pattern off_2018_markdown_instruction: |-
        # Turning It Off\r
        \r
        When
        you start this app your lights are off, but as soon as choose a pattern, there's
        no way to turn the lights back off!\r
        \r
        # Do This\r
        \r
        Create a function
        that turns all of the LEDs off, and then add a "Off" button to your app
        and make it turn off all of the color LEDs.
      CSD U6 light show predict_markdown_instruction: |-
        # Put on a Light Show\r
        \r
        This
        app lets you put on a light show with the LED.\r
        \r
        Look at the code with
        your partner and answer the following questions:\r
        \r
        * What does this line
        of code do: `setProperty("screen", "background-color", rgb(randomNumber(0,255),
        randomNumber(0,255), randomNumber(0,255)));`?\r
        \r
        Once you have answered
        the question, run the code and click the buttons to see what happens.
      CSD U6 light show predict_2018_markdown_instruction: |-
        # Put on a Light Show\r
        \r
        This
        app lets you put on a light show with the LED.\r
        \r
        Look at the code with
        your partner and answer the following questions:\r
        \r
        * What does this line
        of code do: `setProperty("screen", "background-color", rgb(randomNumber(0,255),
        randomNumber(0,255), randomNumber(0,255)));`?\r
        \r
        Once you have answered
        the question, run the code and click the buttons to see what happens.
      CSD U6 making music w arrays mod_markdown_instruction: |-
        # Changing Elements
        in Arrays\r
        \r
        So far you’ve just been using the elements of arrays. Now,
        you're going to change what these elements are.\r
        \r
        In the code below
        there's an array called `notes`, which is filled with notes the buzzer can
        play. Every time the left button is pressed, the buzzer plays one of these
        notes randomly. However, all of the notes in the `notes` array are the same.\r
        \r
        #
        Do this\r
        \r
        * Change the elements of `notes` so that each one is a different
        note.
      CSD U6 move motorcycle_markdown_instruction: |-
        # Movement with Properties\r
        \r
        Earlier
        we used `setProperty` to change the x and y position of elements on the screen,
        but we could only move them to either a single specific location, or a random
        location. By using `getProperty` to find out an element's current position,
        we can use the **counter pattern** from Unit 3 to update that position.\r
        \r
        #
        Do This\r
        \r
        * Read the program and discuss with your partner how the left
        button makes the motorcycle go up.\r
        * Using the working left button as an
        example, program the right button to make the motorcycle go down.
      CSD U6 move motorcycle_2018_markdown_instruction: |-
        # Movement with Properties\r
        \r
        Earlier
        we used `setProperty` to change the x and y position of elements on the screen,
        but we could only move them to either a single specific location, or a random
        location. By using `getProperty` to find out an element's current position,
        we can use the **counter pattern** from Unit 3 to update that position.\r
        \r
        #
        Do This\r
        \r
        * Read the program and discuss with your partner how the left
        button makes the motorcycle go up.\r
        * Using the working left button as an
        example, program the right button to make the motorcycle go down.
      CSD U6 onChange_markdown_instruction: |-
        # onChange\r
        \r
        In the last level,
        the program only got the interval value from the slider when you pressed the
        left button.  Sometimes, though, you'll want to change the interval of the
        LED as soon as the user chooses a new value.   For that, you'll need the
        "onChange" event.\r
        \r
        # Do This\r
        \r
        * Look at the first event block
        in the program and find where it says "onChange".\r
        * Inside the event
        block, get the interval value from the slider and use it to make the LED blink
        at that new rate.\r
        * Run your program, moving the slider to see whether
        the LED speed changes automatically.
      CSD U6 params create colors_markdown_instruction: |-
        # Color Picker\r
        \r
        In
        this program, pressing the buttons at the bottom of the screen changes the
        color of the images and the color LEDs.\r
        \r
        # Do This\r
        * Create a function
        `chooseColor(color)` that changes each of the images and the color LEDs to
        the given color.\r
        * Call your function in the event blocks so that all the
        buttons work.
      CSD U6 params create colors_2018_markdown_instruction: |-
        # Color Picker\r
        \r
        In
        this program, pressing the buttons at the bottom of the screen changes the
        color of the images and the color LEDs.\r
        \r
        # Do This\r
        * Create a function
        `chooseColor(color)` that changes each of the images and the color LEDs to
        the given color.\r
        * Call your function in the event blocks so that all the
        buttons work.
      CSD U6 params predict contained_markdown_instruction: |-
        # Bug Crawl\r
        \r
        Look
        at the program below, paying special attention to the function `crawl(bug)`.  What
        happens if you press the left or right button?
      CSD U6 params predict contained_2018_markdown_instruction: |-
        # Bug Crawl\r
        \r
        Look
        at the program below, paying special attention to the function `crawl(bug)`.  What
        happens if you press the left or right button?
      CSD U6 params starchaser 1_markdown_instruction: |-
        # Make your `loopStar(color)`
        function\r
        \r
        Right now only the red star works, so you'll need to change
        this code.\r
        \r
        # Do This\r
        * Use the code from the `loopRedStar()` function
        to create a `loopStar(color)` function that will work with any star.\r
        *
        Test your function by calling `loopStar("red")` and `loopStar("blue")`
        inside the `loopStars()` function.
      CSD U6 params starchaser 1_2018_markdown_instruction: |-
        # Make your `loopStar(color)`
        function\r
        \r
        Right now only the red star works, so you'll need to change
        this code.\r
        \r
        # Do This\r
        * Use the code from the `loopRedStar()` function
        to create a `loopStar(color)` function that will work with any star.\r
        *
        Test your function by calling `loopStar("red")` and `loopStar("blue")`
        inside the `loopStars()` function.
      CSD U6 params starchaser 2_markdown_instruction: |-
        # Star Chaser\r
        \r
        Now
        you'll need to make all the stars loop around the screen.\r
        \r
        # Do This\r
        *
        Use a `for` loop inside your `loopStars()` function to make every star in
        "starArray" loop around the screen.
      CSD U6 params starchaser 2_2018_markdown_instruction: |-
        # Star Chaser\r
        \r
        Now
        you'll need to make all the stars loop around the screen.\r
        \r
        # Do This\r
        *
        Use a `for` loop inside your `loopStars()` function to make every star in
        "starArray" loop around the screen.
      CSD U6 params starchaser 3_markdown_instruction: |-
        # Star Chaser\r
        \r
        All
        the stars loop, but you can still only catch the red star.\r
        \r
        # Do This\r
        *
        Use code from the `moveRedStar()` function to make a `moveStar(color)` function
        that can move any star.\r
        * Use code from the `checkRedStar()` function to
        make a `checkStar(color)` function that works for any star.\r
        * Test your
        code by calling `checkStar("red")` and `checkStar("blue")` inside your
        event block.
      CSD U6 params starchaser 3_2018_markdown_instruction: |-
        # Star Chaser\r
        \r
        All
        the stars loop, but you can still only catch the red star.\r
        \r
        # Do This\r
        *
        Use code from the `moveRedStar()` function to make a `moveStar(color)` function
        that can move any star.\r
        * Use code from the `checkRedStar()` function to
        make a `checkStar(color)` function that works for any star.\r
        * Test your
        code by calling `checkStar("red")` and `checkStar("blue")` inside your
        event block.
      CSD U6 params starchaser 4_markdown_instruction: |-
        # Star Chaser\r
        \r
        Now
        make it work for all the stars\r
        \r
        # Do This\r
        * Create a `checkStars()`
        functions that uses a `for` loop to check every star in the star array.\r
        *
        Test your code by calling the `checkStars()` function inside the event block.
      CSD U6 params starchaser 4_2018_markdown_instruction: |-
        # Star Chaser\r
        \r
        Now
        make it work for all the stars\r
        \r
        # Do This\r
        * Create a `checkStars()`
        functions that uses a `for` loop to check every star in the star array.\r
        *
        Test your code by calling the `checkStars()` function inside the event block.
      CSD U6 params starchaser 5_markdown_instruction: |-
        # Star Chaser\r
        \r
        Now
        you can add extra stars, and your functions will work with them, too.\r
        \r
        #
        Do This\r
        * In design mode, copy one of the stars, and change its name and
        color to "yellow".\r
        * Add a new element, "yellow", to your star array.\r
        *
        Test the game with your new star.
      CSD U6 params starchaser 5_2018_markdown_instruction: |-
        # Star Chaser\r
        \r
        Now
        you can add extra stars, and your functions will work with them, too.\r
        \r
        #
        Do This\r
        * In design mode, copy one of the stars, and change its name and
        color to "yellow".\r
        * Add a new element, "yellow", to your star array.\r
        *
        Test the game with your new star.
      CSD U6 params starchaser challenge 1_markdown_instruction: |-
        # Star Chaser\r
        \r
        Now
        that you have a working game, you can challenge yourself with some different
        features.\r
        \r
        # Do This\r
        * Start the user with 5 "lives", and take
        one away every time the user touches the **wrong** star.\r
        * Make an end
        screen, and change to that screen when the user runs out of lives.
      CSD U6 params starchaser challenge 1_2018_markdown_instruction: |-
        # Star Chaser\r
        \r
        Now
        that you have a working game, you can challenge yourself with some different
        features.\r
        \r
        # Do This\r
        * Start the user with 5 "lives", and take
        one away every time the user touches the **wrong** star.\r
        * Make an end
        screen, and change to that screen when the user runs out of lives.
      CSD U6 params starchaser challenge 2_markdown_instruction: |-
        # Star Chaser\r
        \r
        Now
        that you have a working game, you can challenge yourself with some different
        features.\r
        \r
        # Do This\r
        * Make the player go back to the middle of the
        screen when the left button is pressed.
      CSD U6 params starchaser challenge 2_2018_markdown_instruction: |-
        # Star Chaser\r
        \r
        Now
        that you have a working game, you can challenge yourself with some different
        features.\r
        \r
        # Do This\r
        * Make the player go back to the middle of the
        screen when the left button is pressed.
      CSD U6 params starchaser challenge_markdown_instruction: |-
        # Star Chaser\r
        \r
        Now
        that you have a working game, you can challenge yourself with some different
        features.\r
        \r
        # Do This\r
        * Start the user with 5 "lives", and take
        one away every time the user touches the **wrong** star.\r
        * Make an end
        screen, and change to that screen when the user runs out of lives.
      CSD U6 params starchaser intro_markdown_instruction: |-
        # Star Chaser\r
        \r
        In
        this game, the user tries to catch the stars according to the color of the
        LEDs.\r
        \r
        # Do This\r
        * Play the game, and discuss the following with
        a partner:\r
         * What functions might this program need?\r
         * What parameters
        should these functions have?
      CSD U6 params starchaser intro_2018_markdown_instruction: |-
        # Star Chaser\r
        \r
        In
        this game, the user tries to catch the stars according to the color of the
        LEDs.\r
        \r
        # Do This\r
        * Play the game, and discuss the following with
        a partner:\r
         * What functions might this program need?\r
         * What parameters
        should these functions have?
      CSD U6 params starchaser template_markdown_instruction: Template Level.
      CSD U6 params starchaser template_2018_markdown_instruction: Template Level.
      CSD U6 plane shake_markdown_instruction: |-
        # Shaking Things Up\r
        \r
        Like the
        `change` event, the `shake` event updates every time the board moves. However,
        `shake` is a lot less sensitive than `change`. In order to actually trigger
        it, the board has to be shaken, not just slightly moved.\r
        \r
        # Do This\r
        \r
        The
        airplane needs to be shaken in order to take off.\r
        \r
        * Use the `shake`
        event move the airplane\r
        * Update the airplane's x and y coordinates in
        order to move it.
      CSD U6 predict LED button_markdown_instruction: Embedded Prediction
      CSD U6 predict LED button_2018_markdown_instruction: Embedded Prediction
      CSD U6 random array notes_markdown_instruction: |-
        # Random Song Generator\r
        \r
        You're
        going to make a random song generator. When you press a button, a random note
        should play. Press it enough times, and you have yourself a beautiful arrangement
        of bleeps and bloops. \r
        \r
        You used `randomNumber()` to select an element
        from an array in the previous lesson, so this should be familiar.\r
        \r
        #
        Do This\r
        \r
        * Add code to randomly select a note from the `notes` array
        and play it.\r
        * Run the program and press the left button to hear your buzzer
        sing its beautiful tune.
      CSD U6 random array notes_2018_markdown_instruction: |-
        # Random Song Generator\r
        \r
        You're
        going to make a random song generator. When you press a button, a random note
        should play. Press it enough times, and you have yourself a beautiful arrangement
        of bleeps and bloops. \r
        \r
        You used `randomNumber()` to select an element
        from an array in the previous lesson, so this should be familiar.\r
        \r
        #
        Do This\r
        \r
        * Add code to randomly select a note from the `notes` array
        and play it.\r
        * Run the program and press the left button to hear your buzzer
        sing its beautiful tune.
      CSD U6 sensor experiment embedded_markdown_instruction: |-
        # Sensor Experiment\r
        \r
        Run
        the program to the right and experiment with your board. Try interacting with
        your board in many different ways to figure out what each sensor might be.
        As you experiment with each sensor, discuss with a neighbor:\r
        \r
        * What
        does this sensor measure?\r
        * What is its maximum value?\r
        * What is its
        minimum value?
      CSD U6 sensor experiment embedded_2018_markdown_instruction: |-
        # Sensor Experiment\r
        \r
        Run
        the program to the right and experiment with your board. Try interacting with
        your board in many different ways to figure out what each sensor might be.
        As you experiment with each sensor, discuss with a neighbor:\r
        \r
        * What
        does this sensor measure?\r
        * What is its maximum value?\r
        * What is its
        minimum value?
      CSD U6 setProperty Text_markdown_instruction: |-
        # Changing the Text\r
        \r
        The
        `setProperty` block can be used to change lots of things about your design
        elements, including the text they contain.\r
        \r
        # Do This\r
        \r
        * Drag
        out a `setProperty` block\r
        * For the first parameter, select "name" (the
        element's id)\r
        * For the second parameter, select "text" (the property
        you want to set)\r
        * For the third parameter, write your name in quotes (the
        value to set)\r
        \r
        _Note: We've removed the Design Mode tab for now so
        you can practice working with `setProperty`, but it'll come back later once
        you're building apps of your own._
      CSD U6 setProperty Text_2018_markdown_instruction: |-
        # Changing the Text\r
        \r
        The
        `setProperty` block can be used to change lots of things about your design
        elements, including the text they contain.\r
        \r
        # Do This\r
        \r
        * Drag
        out a `setProperty` block\r
        * For the first parameter, select "name" (the
        element's id)\r
        * For the second parameter, select "text" (the property
        you want to set)\r
        * For the third parameter, write your name in quotes (the
        value to set)\r
        \r
        _Note: We've removed the Design Mode tab for now so
        you can practice working with `setProperty`, but it'll come back later once
        you're building apps of your own._
      CSD U6 setProperty hidden 2_markdown_instruction: |-
        # Showing/Hiding\r
        \r
        This
        alarm app isn't super useful if you can't turn the alarm off once it's
        been triggered. Let's fix that.\r
        \r
        # Do This\r
        \r
        Add a second `onEvent`
        block to watch for the "stopAlarmButton" to be clicked. Inside that block:\r
        \r
        *
        Change the status text to "OFF"\r
        * Hide the "stopAlarmButton"\r
        \r
        _Hint:
        "hidden" is a boolean property. If we used `false` to make the button show
        up, what should you use to make it hidden again?_
      CSD U6 setProperty hidden 2_2018_markdown_instruction: |-
        # Showing/Hiding\r
        \r
        This
        alarm app isn't super useful if you can't turn the alarm off once it's
        been triggered. Let's fix that.\r
        \r
        # Do This\r
        \r
        Add a second `onEvent`
        block to watch for the "stopAlarmButton" to be clicked. Inside that block:\r
        \r
        *
        Change the status text to "OFF"\r
        * Hide the "stopAlarmButton"\r
        \r
        _Hint:
        "hidden" is a boolean property. If we used `false` to make the button show
        up, what should you use to make it hidden again?_
      CSD U6 setProperty hidden_markdown_instruction: |-
        # Hidden\r
        \r
        Design elements
        have a property called "hidden" that controls whether the element should
        show on screen or not. We are going to use this property to create an alarm
        app. Notice that when the program starts one button is hidden, and one is
        not.\r
        \r
        We have already set up an event handler for the "triggerAlarmButton"
        which will do two things when clicked:\r
        \r
        * Change the "text" property
        of "statusLabel" to "on"\r
        * Set the "hidden" property of "stopAlarmButton"
        to `false` (meaning it should _not_ be hidden)\r
        \r
        # Do This\r
        \r
        * Run
        the program and click "Trigger Alarm" to see how it works\r
        * Add code
        to the provided event handler that hides the "triggerAlarmButton"\r
        \r
        _Note:
        the button "stopAlarmButton" is already on the screen, but because its "hidden"
        property is marked true, it isn't shown when the program starts._
      CSD U6 setProperty hidden_2018_markdown_instruction: |-
        # Hidden\r
        \r
        Design
        elements have a property called "hidden" that controls whether the element
        should show on screen or not. We are going to use this property to create
        an alarm app. Notice that when the program starts one button is hidden, and
        one is not.\r
        \r
        We have already set up an event handler for the "triggerAlarmButton"
        which will do two things when clicked:\r
        \r
        * Change the "text" property
        of "statusLabel" to "on"\r
        * Set the "hidden" property of "stopAlarmButton"
        to `false` (meaning it should _not_ be hidden)\r
        \r
        # Do This\r
        \r
        * Run
        the program and click "Trigger Alarm" to see how it works\r
        * Add code
        to the provided event handler that hides the "triggerAlarmButton"\r
        \r
        _Note:
        the button "stopAlarmButton" is already on the screen, but because its "hidden"
        property is marked true, it isn't shown when the program starts._
      CSD U6 setProperty xy click_markdown_instruction: |-
        # Changing With a Click\r
        \r
        It's
        not really useful to only set a property when your program is first run. After
        all, you could just do all of that in Design Mode. When you use an `onEvent`
        block with `setProperty`, you're able to do things you couldn't do with
        Design Mode alone.\r
        \r
        # Do This\r
        \r
        We've provided an empty `onEvent`
        block that's watching the "smiley" image. Inside the `onEvent` block, use
        two `setProperty` blocks to move the smiley somewhere else (it doesn't really
        matter where for now). Test your program by running it and clicking on the
        smiley.
      CSD U6 setProperty xy click_2018_markdown_instruction: |-
        # Changing With a Click\r
        \r
        It's
        not really useful to only set a property when your program is first run. After
        all, you could just do all of that in Design Mode. When you use an `onEvent`
        block with `setProperty`, you're able to do things you couldn't do with
        Design Mode alone.\r
        \r
        # Do This\r
        \r
        We've provided an empty `onEvent`
        block that's watching the "smiley" image. Inside the `onEvent` block, use
        two `setProperty` blocks to move the smiley somewhere else (it doesn't really
        matter where for now). Test your program by running it and clicking on the
        smiley.
      CSD U6 setProperty xy random_markdown_instruction: |-
        <img src="https://images.code.org/67c6cc358b235e2c2ae39f3f72a3e0b1-image-1507326303839.gif"
        style="float:right; max-width: 150px; margin: 10px;">\r
        \r
        # Randomization\r
        \r
        Moving
        on the first click is fine, but this smiley would be even cooler if it moved
        somewhere new _every time_ we clicked. Fortunately, we can use the `randomNumber`
        block to do just that.\r
        \r
        # Do This\r
        \r
        Instead of setting the "x"
        and "y" properties to a specific number, use the `randomNumber` block to
        pick a new random "x" and "y" each time the smiley is clicked.\r
        \r
        _Tip:
        The App Lab screen is 320 pixels wide by 450 pixels tall. What range of random
        numbers will ensure that the smiley is always visible on screen?_
      CSD U6 setProperty xy random_2018_markdown_instruction: |-
        <img src="https://images.code.org/67c6cc358b235e2c2ae39f3f72a3e0b1-image-1507326303839.gif"
        style="float:right; max-width: 150px; margin: 10px;">\r
        \r
        # Randomization\r
        \r
        Moving
        on the first click is fine, but this smiley would be even cooler if it moved
        somewhere new _every time_ we clicked. Fortunately, we can use the `randomNumber`
        block to do just that.\r
        \r
        # Do This\r
        \r
        Instead of setting the "x"
        and "y" properties to a specific number, use the `randomNumber` block to
        pick a new random "x" and "y" each time the smiley is clicked.\r
        \r
        _Tip:
        The App Lab screen is 320 pixels wide by 450 pixels tall. What range of random
        numbers will ensure that the smiley is always visible on screen?_
      CSD U6 setProperty xy_markdown_instruction: |-
        # Changing Position\r
        \r
        Every
        design element (except for the screen) has an "x" and a "y" property that
        controls its position.\r
        \r
        # Do This\r
        \r
        <div markdown="1" style="float:right">\r
        \r
        ![expandable](https://images.code.org/e5c325d8105a0cf7cf681d6eab898595-image-1507319516043.png)\r
        \r
        </div>\r
        \r
        Using
        the `setProperty` block, move "red_button" so that it matches the image
        to the right. (Click on the image to see the full size.)\r
        \r
        _Note: We've
        removed the Design Mode tab for now so you can practice working with setProperty,
        but it'll come back later once you're building apps of your own._
      CSD U6 setProperty xy_2018_markdown_instruction: |-
        # Changing Position\r
        \r
        Every
        design element (except for the screen) has an "x" and a "y" property that
        controls its position.\r
        \r
        # Do This\r
        \r
        <div markdown="1" style="float:right">\r
        \r
        ![expandable](https://images.code.org/e5c325d8105a0cf7cf681d6eab898595-image-1507319516043.png)\r
        \r
        </div>\r
        \r
        Using
        the `setProperty` block, move "red_button" so that it matches the image
        to the right. (Click on the image to see the full size.)\r
        \r
        _Note: We've
        removed the Design Mode tab for now so you can practice working with setProperty,
        but it'll come back later once you're building apps of your own._
      CSD U6 slider intro_markdown_instruction: |-
        # Sliders\r
        \r
        Last time, your
        users were only able to choose between a short and long buzz.  To give the
        user control over the exact duration of the buzzer, you'll want to use a
        slider.\r
        \r
        This slider lets users choose a value between 100 and 1000
        for the duration of the buzz, but there's something not quite right about
        how it's working.\r
        \r
        # Do This\r
        * Look over the code and find the bug
        that's keeping the duration from being set correctly.\r
        \t* (Hint: Hover
        over the yellow triangles for clues as to what might be wrong with the code.)
      CSD U6 slider intro_2018_markdown_instruction: |-
        # Sliders\r
        \r
        Last time,
        your users were only able to choose between a short and long buzz.  To give
        the user control over the exact duration of the buzzer, you'll want to use
        a slider.\r
        \r
        This slider lets users choose a value between 100 and 1000
        for the duration of the buzz, but there's something not quite right about
        how it's working.\r
        \r
        # Do This\r
        * Look over the code and find the bug
        that's keeping the duration from being set correctly.\r
        \t* (Hint: Hover
        over the yellow triangles for clues as to what might be wrong with the code.)
      CSD U6 stillness game predict code_markdown_instruction: |-
        # Change with the
        Accelerometer\r
        \r
        This program uses the change event to increase a movement
        meter every time the board moves. When the movement meter reaches 100, the
        alarm will sound.\r
        \r
        \r
        # Do This\r
        This program has two bugs that you
        need to fix:\r
        \r
        * The movement meter is being triggered by a button press,
        instead of the accelerometer's `change` event.\r
        * The programmer forgot
        how to use the counter pattern to increase the movement variable.\r
        \r
        Once
        you have found the bugs, run the program and try to pass the board to your
        partner without setting off the alerm.
      CSD U6 stillness game predict code_2018_markdown_instruction: |-
        # Change with
        the Accelerometer\r
        \r
        This program uses the change event to increase a
        movement meter every time the board moves. When the movement meter reaches
        100, the alarm will sound.\r
        \r
        \r
        # Do This\r
        This program has two bugs
        that you need to fix:\r
        \r
        * The movement meter is being triggered by a
        button press, instead of the accelerometer's `change` event.\r
        * The programmer
        forgot how to use the counter pattern to increase the movement variable.\r
        \r
        Once
        you have found the bugs, run the program and try to pass the board to your
        partner without setting off the alerm.
      CSD U6 stillness game predict_markdown_instruction: |
        # Accelerometer Events\r
        \r
        Look
        at the code below with a partner. What do you think it's going to do? Give
        it a guess, then run the code to find out!\r
      CSD U6 test LED_markdown_instruction: |-
        # Control the LED\r
        \r
        Now that you
        know your board is working, you can try out the different LED blocks.\r
        \r
        #
        Do This\r
        * Click "Run" and discuss with your partner how the code works.\r
        *
        Try the different LED blocks to see what they do.\r
          * Hint: Don't forget
        to hit "Reset" and run your code again after you change it
      CSD U6 test LED_2018_markdown_instruction: |-
        # Control the LED\r
        \r
        Now that
        you know your board is working, you can try out the different LED blocks.\r
        \r
        #
        Do This\r
        * Click "Run" and discuss with your partner how the code works.\r
        *
        Try the different LED blocks to see what they do.\r
          * Hint: Don't forget
        to hit "Reset" and run your code again after you change it
      CSD U6 tugowar buzzer_markdown_instruction: |-
        # Winning Buzzer\r
        \r
        That last
        thing that that is missing from your project guide's description of this
        project is the buzzer. It should buzz a high tone if player 1 wins and a low
        tone if player 2 wins. \r
        \r
        # Do This\r
        \r
        So far we've been able to
        just use the `player` parameter directly to report which player won, but that
        won't work for buzzing different sounds. Inside the conditional that checks
        if a player won, you'll need to add _another_ conditional that checks which
        player it was. If `player == "red"` the buzzer should play a high note,
        otherwise (else) it should play a low note.
      CSD U6 tugowar buzzer_2018_markdown_instruction: |-
        # Winning Buzzer\r
        \r
        That
        last thing that that is missing from your project guide's description of
        this project is the buzzer. It should buzz a high tone if player 1 wins and
        a low tone if player 2 wins. \r
        \r
        # Do This\r
        \r
        So far we've been able
        to just use the `player` parameter directly to report which player won, but
        that won't work for buzzing different sounds. Inside the conditional that
        checks if a player won, you'll need to add _another_ conditional that checks
        which player it was. If `player == "red"` the buzzer should play a high
        note, otherwise (else) it should play a low note.
      CSD U6 tugowar conditional_markdown_instruction: |-
        # Check for a Winner\r
        \r
        Your
        game should be pretty playable by now. Two players can click their respective
        buttons, and their emojies will race down the screen. We still need a way
        for a player to win though.\r
        \r
        # Do This\r
        \r
        Using a conditional inside
        the `checkWin()` function, you want to check if a player has won each time
        they click. For now, we can just use `console.log` to report the winner.\r
        \r
        *
        Add an if statement to the bottom of `checkWin()`\r
        * For the condition of
        your if statement, check if `player_y` is greater than 350 (or use the bottom
        of screen value you decided on in the last level)\r
        * In your conditional,
        add a `console.log` that reports which player won\r
        * Test your program to
        make sure that it reports a winner when one of the emojis makes it to the
        bottom of the screen
      CSD U6 tugowar conditional_2018_markdown_instruction: |-
        # Check for a Winner\r
        \r
        Your
        game should be pretty playable by now. Two players can click their respective
        buttons, and their emojies will race down the screen. We still need a way
        for a player to win though.\r
        \r
        # Do This\r
        \r
        Using a conditional inside
        the `checkWin()` function, you want to check if a player has won each time
        they click. For now, we can just use `console.log` to report the winner.\r
        \r
        *
        Add an if statement to the bottom of `checkWin()`\r
        * For the condition of
        your if statement, check if `player_y` is greater than 350 (or use the bottom
        of screen value you decided on in the last level)\r
        * In your conditional,
        add a `console.log` that reports which player won\r
        * Test your program to
        make sure that it reports a winner when one of the emojis makes it to the
        bottom of the screen
      CSD U6 tugowar demo_markdown_instruction: |-
        # Grab that Bug!\r
        \r
        This is
        an example of a tug o' war game that could be built in this lesson. To play,
        pair up with another student. The student on the left will the click the left
        button on the Circuit Playground as fast as they can, while the student on
        the right clicks the right button. Whoever can get the bug over to their side
        first wins.
      CSD U6 tugowar demo_2018_markdown_instruction: |-
        # Grab that Bug!\r
        \r
        This
        is an example of a tug o' war game that could be built in this lesson. To
        play, pair up with another student. The student on the left will the click
        the left button on the Circuit Playground as fast as they can, while the student
        on the right clicks the right button. Whoever can get the bug over to their
        side first wins.
      CSD U6 tugowar design 1.5_markdown_instruction: |-
        # Game Screen Design\r
        \r
        We've
        also added a "game" screen where the game will be played. It just needs
        a couple of tweaks.\r
        \r
        # Do This\r
        \r
        Switch to the "game" screen
        and, using your planning guide, fix this screen by changing the color of the
        two emoji images.\r
        \r
        Feel free to add any other design tweaks that you'd
        like.
      CSD U6 tugowar design 1.5_2018_markdown_instruction: |-
        # Game Screen Design\r
        \r
        We've
        also added a "game" screen where the game will be played. It just needs
        a couple of tweaks.\r
        \r
        # Do This\r
        \r
        Switch to the "game" screen
        and, using your planning guide, fix this screen by changing the color of the
        two emoji images.\r
        \r
        Feel free to add any other design tweaks that you'd
        like.
      CSD U6 tugowar design 1_markdown_instruction: |-
        # Getting Started: Screen Design\r
        \r
        You
        should have already reviewed the planning guide for this project. Some of
        the work to turn this project guide into a working program has already been
        started. Based on the project guide you're going to do the rest of this work.\r
        \r
        #
        Do This\r
        \r
        We've already created a "start" screen and included a title
        and "play" button. Using your planning guide, finish creating this screen.
        Specifically you'll want to:\r
        \r
        * Update the title text to say "Emoji
        Race"\r
        * Add instructions for playing using the ID "instructions"\r
        \r
        Feel
        free to add any other design tweaks that you'd like.
      CSD U6 tugowar design 1_2018_markdown_instruction: |-
        # Getting Started: Screen
        Design\r
        \r
        You should have already reviewed the planning guide for this
        project. Some of the work to turn this project guide into a working program
        has already been started. Based on the project guide you're going to do the
        rest of this work.\r
        \r
        # Do This\r
        \r
        We've already created a "start"
        screen and included a title and "play" button. Using your planning guide,
        finish creating this screen. Specifically you'll want to:\r
        \r
        * Update
        the title text to say "Emoji Race"\r
        * Add instructions for playing using
        the ID "instructions"\r
        \r
        Feel free to add any other design tweaks that
        you'd like.
      CSD U6 tugowar design 2_markdown_instruction: |-
        # Designing the Win Screen\r
        \r
        The
        final screen in this program shows who won. It's totally blank right now.\r
        \r
        #
        Do This\r
        \r
        Switch to "win" and design it based on your project guide.
        Make sure to pay close attention to the ID of each element. Once you've added
        the required elements, feel free to add any other design tweaks that you'd
        like.
      CSD U6 tugowar design 2_2018_markdown_instruction: |-
        # Designing the Win Screen\r
        \r
        The
        final screen in this program shows who won. It's totally blank right now.\r
        \r
        #
        Do This\r
        \r
        Switch to "win" and design it based on your project guide.
        Make sure to pay close attention to the ID of each element. Once you've added
        the required elements, feel free to add any other design tweaks that you'd
        like.
      CSD U6 tugowar final_markdown_instruction: |-
        # Make It Your Own\r
        \r
        You just
        walked through someone else's plan for creating a program, so now it's time
        to make it your own. What additional features or challenges do you want to
        create?\r
        \r
        # Do This\r
        \r
        Select one of the challenges below to add
        to the game or come up with a challenge of your own.\r
        \r
        * Change the look
        and layout of the screens\r
        * Use the buzzer or the led to show when one
        of the buttons has been clicked\r
        * Set the "icon-color" property of "winner_image"
        to the winning color\r
        * Make the emojis start out sad, change to meh halfway,
        and end up happy\r
        * Use a variable and conditionals to make sure that players
        can only move their emojis when the "game" screen is showing
      CSD U6 tugowar final_2018_markdown_instruction: |-
        # Make It Your Own\r
        \r
        You
        just walked through someone else's plan for creating a program, so now it's
        time to make it your own. What additional features or challenges do you want
        to create?\r
        \r
        # Do This\r
        \r
        Select one of the challenges below to add
        to the game or come up with a challenge of your own.\r
        \r
        * Change the look
        and layout of the screens\r
        * Use the buzzer or the led to show when one
        of the buttons has been clicked\r
        * Set the "icon-color" property of "winner_image"
        to the winning color\r
        * Make the emojis start out sad, change to meh halfway,
        and end up happy\r
        * Use a variable and conditionals to make sure that players
        can only move their emojis when the "game" screen is showing
      CSD U6 tugowar movement 1_markdown_instruction: |
        # Tracking the Score\r
        \r
        Your
        `score` variable should keep track of how many times each user has clicked
        their button. Instead of just going up, `score` should _decrease_ if the player
        1 clicks `buttonL` and _increase_ if player 2 clicks `buttonR`.\r
        \r
        # Do
        This\r
        \r
        Inside each `onBoardEvent`, use the counter pattern to increase
        or decrease `score`. The amount that you change `score` will change how difficult
        the game is to win. Start with changing by 10 - you can always experiment
        with different values when the program is more complete.\r
      CSD U6 tugowar setProperty_markdown_instruction: |-
        # Display the Winner\r
        \r
        The
        winning screen doesn't actually know _who_ won the game. Let's fix that
        now.\r
        \r
        # Do This\r
        \r
        Before each call to `setScreen`, add a `setProperty`
        block to change the "text" property of "winner" to display the actual
        winner.
      CSD U6 tugowar setProperty_2018_markdown_instruction: |-
        # Display the Winner\r
        \r
        The
        winning screen doesn't actually know _who_ won the game. Let's fix that
        now.\r
        \r
        # Do This\r
        \r
        Before each call to `setScreen`, add a `setProperty`
        block to change the "text" property of "winner" to display the actual
        winner.
      CSD U6 tugowar setScreen_markdown_instruction: |-
        # Change to the Win Screen\r
        \r
        Now
        that we have conditionals to check which player won, let's switch to the
        "win" screen when a player wins.\r
        \r
        # Do This\r
        \r
        Inside the conditional
        that you've created to check if a player has reached the bottom, add a `setScreen`
        block to change to the "win" screen. Make sure you test that your new code
        works before moving on!
      CSD U6 tugowar setScreen_2018_markdown_instruction: |-
        # Change to the Win Screen\r
        \r
        Now
        that we have conditionals to check which player won, let's switch to the
        "win" screen when a player wins.\r
        \r
        # Do This\r
        \r
        Inside the conditional
        that you've created to check if a player has reached the bottom, add a `setScreen`
        block to change to the "win" screen. Make sure you test that your new code
        works before moving on!
      CSD U6 tugowar variables 1_markdown_instruction: |-
        # The startGame() Function\r
        \r
        If
        you look at the events we planned for in the planning guide, you may notice
        that two events do essentially the same thing. The events that respond to
        both the "play" and "replay" buttons could be written with identical code,
        but duplicate code like this is a perfect place to use a **function**.\r
        \r
        #
        Do This\r
        \r
        We've already added blocks that call a new function named
        `startGame()` to the appropriate event handlers, and we've created an empty
        function for you to build out. \r
        \r
        * Find the `startGame()` function definition
        ( [Show me where](#triggercallout=block_trigger) )\r
        * Inside the function:\r
        \t*
        Move both of the emoji images to the top of the screen by setting each one's
        "y" property to 0\r
        \t* Change the screen to "game"\r
        \r
        Once you've
        fleshed out the `startGame()` function, try clicking the "play" button to
        check that it's working.
      CSD U6 tugowar variables 1_2018_markdown_instruction: |-
        # The startGame() Function\r
        \r
        If
        you look at the events we planned for in the planning guide, you may notice
        that two events do essentially the same thing. The events that respond to
        both the "play" and "replay" buttons could be written with identical code,
        but duplicate code like this is a perfect place to use a **function**.\r
        \r
        #
        Do This\r
        \r
        We've already added blocks that call a new function named
        `startGame()` to the appropriate event handlers, and we've created an empty
        function for you to build out. \r
        \r
        * Find the `startGame()` function definition
        ( [Show me where](#triggercallout=block_trigger) )\r
        * Inside the function:\r
        \t*
        Move both of the emoji images to the top of the screen by setting each one's
        "y" property to 0\r
        \t* Change the screen to "game"\r
        \r
        Once you've
        fleshed out the `startGame()` function, try clicking the "play" button to
        check that it's working.
      CSD U6 tugowar variables 2_markdown_instruction: |-
        # Functions with Parameters\r
        \r
        Most
        of the existing functions you use in App Lab need inputs, or **parameters**,
        to pass the function necessary information. For example, when changing a screen,
        you pass the ID of that screen as a parameter, which looks like `setScreen("win")`.\r
        \r
        These
        parameters show up as a variable that can be used inside the function, and
        you can create functions that use parameters too!\r
        \r
        # Do This\r
        \r
        <div
        markdown="1" style="float:right; margin: 20px;">\r
        \r
        ![expandable](https://images.code.org/2eccd9fc9f4887aefd0bfd94d7f332c8-image-1509402194012.png)\r
        \r
        <br/>\r
        \r
        Click
        to expand\r
        \r
        </div>\r
        \r
        Instead of a separate function to move the
        red and the blue players, we've created one function called `movePlayer()`
        that takes the ID of the player image as a parameter called `player`. Inside
        this function, you can use `player` any place where you need to specify the
        ID of the player you want to control.\r
        \r
        * Find where `movePlayer()` is
        defined ( [Show me where](#triggercallout=block_trigger) )\r
        * Inside the
        `movePlayer()` definition:\r
          * Get the current "y" property of the player
        and save it to a variable called `player_y`\r
          * Increase the value of `player_y`
        by 10\r
          * Set the "y" property of player to your new value `player_y`\r
        \r
        Once
        you've added your code, test it. You should see that _both buttons_ work
        even though we only created one function - cool!
      CSD U6 tugowar variables 2_2018_markdown_instruction: |-
        # Functions with Parameters\r
        \r
        Most
        of the existing functions you use in App Lab need inputs, or **parameters**,
        to pass the function necessary information. For example, when changing a screen,
        you pass the ID of that screen as a parameter, which looks like `setScreen("win")`.\r
        \r
        These
        parameters show up as a variable that can be used inside the function, and
        you can create functions that use parameters too!\r
        \r
        # Do This\r
        \r
        <div
        markdown="1" style="float:right; margin: 20px;">\r
        \r
        ![expandable](https://images.code.org/2eccd9fc9f4887aefd0bfd94d7f332c8-image-1509402194012.png)\r
        \r
        <br/>\r
        \r
        Click
        to expand\r
        \r
        </div>\r
        \r
        Instead of a separate function to move the
        red and the blue players, we've created one function called `movePlayer()`
        that takes the ID of the player image as a parameter called `player`. Inside
        this function, you can use `player` any place where you need to specify the
        ID of the player you want to control.\r
        \r
        * Find where `movePlayer()` is
        defined ( [Show me where](#triggercallout=block_trigger) )\r
        * Inside the
        `movePlayer()` definition:\r
          * Get the current "y" property of the player
        and save it to a variable called `player_y`\r
          * Increase the value of `player_y`
        by 10\r
          * Set the "y" property of player to your new value `player_y`\r
        \r
        Once
        you've added your code, test it. You should see that _both buttons_ work
        even though we only created one function - cool!
      CSD U6 tugowar variables 3_markdown_instruction: |-
        # The checkWin() Function\r
        \r
        The
        last function that you need to figure out is the `checkWin()` function, which
        after each player is moved, and is used to both check if that player has made
        it to the bottom of the screen and to announce the winner if necessary. For
        now, we're just going to find out where the player is and log it to the console.\r
        \r
        #
        Do This\r
        \r
        Just like the `movePlayer()` function, `checkWin()` takes a
        single parameter called `player`. If you call `checkWin("red")`, then the
        variable `player` will have the value "red".\r
        \r
        * Find where the function
        is defined ( [Show me where](#triggercallout=block_trigger) )\r
        * Create
        a variable called `player_y` and assign it the "y" property of the player\r
        *
        Use either a `console.log()` command or a watcher to report the value of `player_y`\r
        *
        Play the game with only one button, keeping an eye on the value of `player_y`\r
        *
        Decide what value of `player_y` should be considered the bottom of the screen
      CSD U6 tugowar variables 3_2018_markdown_instruction: |-
        # The checkWin() Function\r
        \r
        The
        last function that you need to figure out is the `checkWin()` function, which
        after each player is moved, and is used to both check if that player has made
        it to the bottom of the screen and to announce the winner if necessary. For
        now, we're just going to find out where the player is and log it to the console.\r
        \r
        #
        Do This\r
        \r
        Just like the `movePlayer()` function, `checkWin()` takes a
        single parameter called `player`. If you call `checkWin("red")`, then the
        variable `player` will have the value "red".\r
        \r
        * Find where the function
        is defined ( [Show me where](#triggercallout=block_trigger) )\r
        * Create
        a variable called `player_y` and assign it the "y" property of the player\r
        *
        Use either a `console.log()` command or a watcher to report the value of `player_y`\r
        *
        Play the game with only one button, keeping an eye on the value of `player_y`\r
        *
        Decide what value of `player_y` should be considered the bottom of the screen
      CSD-Arrays_markdown_instruction: |-
        Today you’re going to learn how to use and
        create **functions**.\r
        \r
        Creating a function lets you make your own blocks!
        There are two parts to a function: \r
        \r
        Making a newly named block that
        has all of the code you want to run inside of it. \r
        -xml of function definition-
        \r
        \r
        The single green block itself that you use, or call, to run the function
        you created.\r
        -xml of function call-\r
        \r
        Prepare to get familiar with
        functions, learn how to edit them, and create your own!
      CSD-Arrays_2018_markdown_instruction: |-
        Today you’re going to learn how to use
        and create **functions**.\r
        \r
        Creating a function lets you make your own
        blocks! There are two parts to a function: \r
        \r
        Making a newly named block
        that has all of the code you want to run inside of it. \r
        -xml of function
        definition- \r
        \r
        The single green block itself that you use, or call, to
        run the function you created.\r
        -xml of function call-\r
        \r
        Prepare to
        get familiar with functions, learn how to edit them, and create your own!
      'CSD: Boolean Expressions_markdown_instruction': "# Boolean Expressions Video"
      'CSD: Cake Defender Exemplar_markdown_instruction': |-
        # Defend Your Cake!\r
        \r
        This
        is an example of a defender game that you'll build by the end of this lesson.
        Move the alien with arrow keys to keep the ladybugs from getting to your cake.
        How high of a score can you get?\r
        \r
        # Do This\r
        \r
        Turn to a classmate
        and make a list of the following information.\r
        \r
        * How many sprites are
        there in this game. Which are they?\r
        * What variables are needed to make
        this game? What do they store?\r
        * If you were to split the code of this
        game into functions what do you think they would be? What are the major pieces
        of behavior you'd need to create in your code?
      'CSD: Platform Jumper Exemplar_markdown_instruction': |-
        # Platform Jumper\r
        \r
        The
        game on the left is an example of a platform jumper.  Press "Run" to play
        it.  You can make the alien jump with the up arrow, and move it to the left
        and right with the arrow keys.  You score by collecting stars, and if you
        score high enough, the background will change.\r
        \r
        You already know how
        to use all the blocks you need to make a game just like this one, and you'll
        be making your own platform jumper in this lesson.\r
        \r
        You can see other
        examples of platform jumpers in the next two levels.
      'CSD: Slider Example_markdown_instruction': |-
        # RGB Slider\r
        \r
        Over the next
        couple levels you are going to learn about using sliders to get user input.
        You will be creating this slider which controls the color of a button. You
        will return to this project in later lessons to control lights!
      CSDU2 - 2nd Validator issue_markdown_instruction: |-
        # Add head and title tags\r
        \r
        You
        should have ended up on this level because of one of the following errors:\r
        \r
        *
        Element head is missing a required instance of child element title.\r
        * Element
        title must not be empty.\r
        \r
        Both of these error messages point out that
        **every web page needs a title**. The title is more than just putting a header
        on your page. A computer won't be able to easily go through the content of
        your web page to find your header (it could be in lots of different types
        of tags). So instead **every web page includes a title element marked by a
        &lt;title&gt; tag.** This title does not show up anywhere on your page so
        it is not part of the content of your page.\r
        \r
        Since the title is not
        part of web page content it goes in a special area at the top. This area is
        for all information about your web page that is not content. This information
        is often called **metadata**.  **Metadata goes in the head element marked
        by a &lt;head&gt; tag.**  The title element is a child element of the head
        element so the title element goes inside the head element.\r
        \r
        Example:\r
        \r
        <pre>\r
        &lt;head&gt;\r
           &lt;title&gt;
        My Awesome Website &lt;/title&gt;\r
        &lt;/head&gt;\r
        </pre>\r
        \r
        # Do This\r
        \r
        *
        Add a &lt;head&gt; element above the first content in your page\r
        * Add a
        &lt;title&gt; element inside the &lt;head&gt; element. Makes sure to give
        your page a descriptive title.\r
        * Once you have done this return to the
        <a href="https://studio.code.org/s/csd2/stage/5/puzzle/3">validator level</a>
      CSDU2 - About Me Page Styling_markdown_instruction: |-
        # About Me Page\r
        \r
        There
        are many CSS properties and values that can be applied to HTML elements in
        order to change their style. Use the checklist below to add style to the text,
        image, and body elements. Remember to think about how your styling choices
        will impact users view of the web page.\r
        \r
        # Do This\r
        \r
        * Add `<head>`
        and `<body>` elements to your page\r
        * Add a `<title>` element to your page
        inside the `<head>` element\r
        * Add a `<style>` element to your page\r
        *
        Add styling of your choice to your About Me Page. Be sure to use at least
        5 different CSS properties.\r
        \r
        # Checklist\r
        \r
        * All content contained
        in body element\r
        * All style contained in head element\r
        * At least 5 of
        the following CSS Properties are used:\r
        \r
        | Color Properties | Text Properties
        | Images Properties |\r
        | ---------------  | --------------- |-----------------  |\r
        |
        `color` <br> `background-color` | `text-align` <br> `text-decoration` <br>
        `font-family` <br> `font-size` | `height` <br> `width` <br> `border-width`
        <br> `border-color` <br> `border-style` |\r
        \r
        If you’ve used at least 5
        of the properties from the checklist, you can explore some additional text
        and image CSS properties to add to your About Me page.
      CSDU2 - About Me Page start_markdown_instruction: |-
        # About Me Page\r
        \r
        You
        are going to make another page for your portfolio. This one will be your About
        Me page. The project has been loaded with 6 different images. Two pictures
        are associated with each question below.\r
        \r
        * Do you prefer chocolate
        or vanilla ice cream?\r
        * Are you a dog or a cat person?\r
        * Do you prefer
        watching a movie or reading a book?\r
        \r
        Create a website that tells your
        user more about you by answering the 3 questions and showing pictures for
        each answer.\r
        \r
        # Checklist\r
        \r
        * At least three images\r
        * A large
        header with the name of the page\r
        * Descriptions of your image choices for
        each category inside a paragraph element\r
        * HTML document uses the correct
        structure. (Doctype, html, head, and body)
      CSDU2 - Add doctype and html_markdown_instruction: |-
        # Doctype and HTML tag\r
        \r
        When
        a web browswer is trying to read your document it looks for alerts which tell
        it which language you are using. In order to let the web browser know that
        this is an html document you need to do two things:\r
        \r
        1. Add &lt;!DOCTYPE
        html&gt; at the very top of your html file. &lt;!DOCTYPE html&gt; is always
        the first thing in an html document because it notifies the computer that
        this is an html document and to interpret it as such. &lt;!DOCTYPE html&gt;
        is not technically a tag but instead an instruction to the web browser. \r
        \r
        2.
        Wrap all the content of the file in an HTML element using the &lt;html&gt;
        tag. The &lt;html&gt; tag notifies the computer where the html starts and
        ends. The  &lt;html&gt; tag is the container for all other HTML elements (except
        for the &lt;!DOCTYPE html&gt; tag).  So you need an opening and closing &lt;html&gt;
        tag.\r
        \r
        # Do This\r
        This is your Hobbies page from the last lesson.\r
        \r
        *
        Add &lt;!DOCTYPE html&gt; at the top of your index.html file\r
        * Add &lt;html&gt;
        right underneath &lt;!DOCTYPE html&gt; and add a closing &lt;/html&gt; tag
        at the end of index.html
      CSDU2 - Adding Personal Cause_markdown_instruction: |-
        # Personal Cause\r
        \r
        **Circulate:**
        As students are working on their research and website, check to make sure
        that thay are using appropriately licensed media and proving accurate attribution.
        Spot check by asking for the license details of specific images.\r
        \r
        \r
        #
        Do This\r
        \r
        * Finish your personal website
      CSDU2 - Classes on ESS_markdown_instruction: |-
        # Classes in External Style Sheets\r
        You
        may have also noticed these issues appearing.\r
        \r
        \t1.\tThe styling of
        the `<img>` elements on one page should be different than the other\r
        \t2.\tFor
        the `<h1>` headers, on one page we want to style them and on the other we
        don't.\r
        \r
        Luckily you know classes and we can fix these with classes!\r
        ￼\r
        #
        Do This\r
        \r
        * Put the image on the home page in the "home-image" class\r
        *
        Find the old style rule for images on the home page (width: 600px) and change
        the selector so it will style the "home-image" class instead\r
        * Put all
        the images on the technology page in the "tech-images" class\r
        * Find the
        old style rule for images on the technology page (width: 100px) and change
        the selector so it will style the "tech-images" class instead\r
        * Find
        the h1 element on the technology page and put it in the class "page-header"\r
        *
        Change the secltor for the style rule for h1 elements to be just a style rule
        for the page-header class
      CSDU2 - Classes_markdown_instruction: |-
        # Classes\r
        \r
        Sometimes you only
        want to style one specific element of a certain type instead of all elements
        of one type. **Classes are HTML attributes that can be added to any HTML element
        to group it with other elements. Classes allow for the group of elements to
        have their own unique style.** This applies to elements on the same page or
        on separate pages.\r
        \r
        To style using classes:\r
        \r
        1. First you need
        to mark the elements in html that will be in that class.  \r
        2. Second you
        need to write a style rule for that class. To write a rule for a class of
        elements, the selector for the rule is a `.` before the class name. \r
        \r
        For
        example the code below would style the fancy class which has been set up for
        a paragraph element:\r
        \r
        | HTML file | CSS File | Result |\r
        | ---------
        | -------- | ------ |\r
        | <pre> &lt;p class="fancy"&gt;Good Day&lt;/p&gt;</pre>
        |<pre>.fancy {<br>  color: darkblue;<br>  font-family: cursive;<br>} </pre>|<img
        src="https://images.code.org/05110876c62dafe72a7d0ddf34f7ae07-image-1475009963479.58.30
        PM.png" alt="result image"> | \r
        \r
        # Do This\r
        \r
        There are lots of
        different `<h5>` elements on the page. We want to style them differently depending
        on what season they are associated with.\r
        \r
        * For each season put all
        the `<h5>` elements for that season in a class specific to that season. For
        example all the winter `<h5>` elements would be in the class "winter".\r
        *
        Style each class of `<h5>` elements with a different `color`
      CSDU2 - Copy Code_markdown_instruction: |-
        # Adding HTML and CSS\r
        \r
        Now that
        you have the files set up bring over your code for your Guinness Book of World
        Records page.\r
        \r
        ## Copy Code\r
        * Go to <a href="https://studio.code.org/s/csd2/stage/7/puzzle/8"
        target="_blank">this level</a> and copy all the code from the HTML file.
        Paste the code into the HTML file you just created.\r
        * Copy the CSS code
        from the style sheet at <a href="https://studio.code.org/s/csd2/stage/7/puzzle/8"
        target="_blank">this level</a> and copy it into the CSS file you just created.
      CSDU2 - Debug images_markdown_instruction: |-
        # Debug\r
        \r
        \r
        \r
        # Do This\r
        *
        Look through at the src attribute and determine the cause. \r
        * Your goal
        is to have an HTML page that displays 5 images. \r
        * Notice that the “alt”
        attribute serves as a placeholder in case the image doesn’t load\r
        * It’s
        also helpful to know what the picture should be about in case there’s a problem
        with the file path
      CSDU2 - Debugging 1_markdown_instruction: |-
        # Debugging\r
        \r
        Computer code
        is written by humans and humans make mistakes. All computer scientists make
        mistakes.  So part of being a good computer scientists is about being able
        to find your mistakes and fix them. In computer science we call mistakes **bugs**.
        Bugs can be anything in code which causes it not to work as planned. The process
        of finding and fixing those bugs is called **debugging**.  Debugging is a
        problem solving process so use your problem solving steps as you try to debug.
        Over the next couple levels you are going to work on your debugging skills.\r
        \r
        <img
        src="https://images.code.org/ed7cb1f2e093b9c36b82bfbf9bbcd76b-image-1474383288840.54.26
        AM.png" style="float:right;border:black solid 5px;width:200px">\r
        \r
        The
        desired web page is on the right. There are two issues with the starter web
        page:\r
        \r
        1. The header won't show up as an h1 header.\r
        2. The list
        doesn't seem to be formatting correctly.\r
        \r
        # Do This\r
        \r
        * Find and
        fix all bugs in the starting HTML\r
        * Check that the final result matches
        the image on the right.
      CSDU2 - Debugging 2_markdown_instruction: |-
        # Debugging\r
        <img src="https://images.code.org/61190513dba270c731251df168b98f80-image-1474383960371.02.38
        AM.png" style="float:right;border:5px black solid;width:250px">\r
        \r
        More
        debugging practice!  This page is a little more challenging to debug than
        the last one.\r
        \r
        # Do This\r
        \r
        Fix the HTML so that the web page makes
        the example on the right.\r
        \r
        * Find and fix all bugs in the starting HTML\r
        *
        You will know you have found all the bugs when your page matches the one on
        the right.
      CSDU2 - Debugging 3_markdown_instruction: |-
        # Debugging\r
        \r
        This page has
        images in it. Images make finding bugs a little more tricky. Can you debug
        this page?\r
        \r
        As you are debugging you may notice a new set of symbols
        that look something like this:\r
        <pre>\r
        &lt;!-- this is a comment --&gt;\r
        </pre>\r
        \r
        This
        is a **comment**. Comments are written by computer scientists creating web
        pages for themselves and other humans who might look at their HTML file. Comments
        explain the different parts of the code and what it should create.  Comments
        might be able to help you debug.\r
        \r
        # Do This\r
        \r
        * Find and fix all
        bugs in the starting HTML\r
        * You know you’ve found all of the bugs when
        your page matches the <a href="https://thimbleprojects.org/danimcavoy/103295/"
        target="_blank"> Target Page</a>.
      CSDU2 - Debugging 4_markdown_instruction: |-
        # Debugging\r
        \r
        Sometimes bugs
        in code aren't obvious in how the page displays. Remember that you want your
        web page to display on any browser so even though it displays nicely in one
        place may not mean that it works everywhere. \r
        \r
        # Do This\r
        \r
        * Find
        and fix all bugs in the starting HTML\r
        * You know you’ve found all of the
        bugs when your page matches the <a href="https://thimbleprojects.org/danimcavoy/103456"
        target="_blank"> Target Page</a>
      CSDU2 - Developing Brand Style_markdown_instruction: |-
        # Developing Brand Style\r
        \r
        Alright
        now its time to start writing the style rules for your brand!\r
        \r
        You will
        notice that all the different basic elements you could have used on your web
        pages are included on this page and you are given a style rule for each to
        start with.\r
        \r
        In addition there is a style rule for two classes: header
        and content. You will be setting up these classes on all the pages of your
        website using divs. The header class contains the title of the website as
        well as the navigation to get around it. The content class contains everything
        else.\r
        \r
        # Do This\r
        \r
        * Look up your colors RGB values from your <a
        href="https://studio.code.org/s/csd2/stage/10/puzzle/4" target="_blank">
        Color Choice Level </a> and copy the RGB values into the block comment to
        make it easier to style your page\r
        * Create style rules for all the basic
        elements of a web page that might be included on your website\r
        * Create
        style rules for the header and content classes. Consider having background
        colors and borders on these sections to make them stand out from the background.
      CSDU2 - Div_markdown_instruction: |-
        # Div Element\r
        \r
        HTML elements allow
        you to group together content on your web page that is connected. However
        sometimes you want to group together multiple HTML elements into one connected
        chunk and give it a style.  To connect a set of HTML elements inside one element
        you can use the `<div>` element.\r
        \r
        For your Personal Website you are
        going to start out by using this to group together the header section you
        want to go on every page of your website. This will include the title of your
        website as well as any navigation. Once you do this you can put a background
        color on the whole div to make it look like one connected block.\r
        \r
        <pre>\r
        &lt;div&gt;\r
            &lt;h1&gt;
        Title of Website &lt;/h1&gt;\r
            &lt;a href="index.html"&gt; Home &lt;/a&gt;\r
            &lt;a
        href="page1.html"&gt; Page 1 &lt;/a&gt;\r
            &lt;a href="page2.html"&gt;
        Page 1 &lt;/a&gt;\r
            &lt;a href="page3.html"&gt; Page 1&lt;/a&gt;\r
        &lt;/div&gt;\r
        </pre>\r
        \r
        #
        Do This\r
        \r
        * Put all the navigation hyperlinks and page title in `<div>`
        element\r
        * Add a `background-color` for the `<div>` element
      CSDU2 - External Style Sheets_markdown_instruction: |-
        # External Style Sheet\r
        \r
        Now
        that you have your colors and fonts, you can begin to think more about the
        style rules of your brand. This is a simple template page that contains the
        features your website might contain. You will use this page to play around
        with the style rules until you find the right set of style rules for your
        brand. These style rules will be common across all the pages on your website.
        They will promote your own personal brand. Since they will be common across
        all the web pages it would be nice if they could all be written in one place
        instead of duplicating them on every page.\r
        \r
        You can get clearer separation
        of content and style by putting content and style in separate files. The new
        file for CSS will be called an **external style sheet**. Most of the time
        the file name will be **style.css**. Since the file ends in .css the web browswer
        already knows that this is CSS code so we no longer need the `<style>` element
        around it. \r
        \r
        # Do This\r
        \r
        * Add a new CSS file called style.css\r
        *
        Copy all the CSS from inside the `<style>` element from the .html file to
        the .css file\r
        * Delete the `<style>` element from the .html file
      CSDU2 - Finalize Personal Website_markdown_instruction: |-
        # Consistent Style\r
        \r
        Your
        site’s pages might look crazy since you pulled together the style of all the
        pages in the last level. It is time to work on that. It will be up to you
        to determine the style rules for your page.  Remember best practice is to
        only have one rule per html element. If you want to keep two different styles
        for certain elements remember you can use classes. In addition you should
        have taken time to plan out your consistent style design for website.\r
        \r
        #
        Do This\r
        \r
        * Work on creating a consistent style for your website using
        the external style sheet and style rules.\r
        * Use classes to make parts of
        your website stand out.
      CSDU2 - Finish Recipe_markdown_instruction: |-
        # Finishing Recipe Page\r
        \r
        Now
        its time to finish off your Recipe Page.\r
        \r
        * Add any more information
        to your recipe page you think would be helpful such as how long it takes to
        make or what meal of the day you usually eat it.\r
        * Finalize your Recipe
        Page. Use the checklist below to make sure your page is complete. Remember
        you can always go back and look at the example page.\r
        \r
        ## Checklist\r
        \r
        *
        All text contained in an HTML tag (header, paragraph, or list)\r
        * Unordered
        list of ingredients\r
        * Ordered list of directions\r
        * Paragraph description
        of the dish\r
        * Headers for each section\r
        * Title header at the top of
        the page
      CSDU2 - First Debug_markdown_instruction: |-
        # Debug\r
        \r
        Mistakes happen when
        you are programming. The great thing is that these mistakes help your code
        get better and you become a better developer as you learn how to find the
        mistakes. Mistakes in code are called **bugs** and the process of fixing the
        bugs is called **debugging**. \r
        \r
        # Do This\r
        The creator of this website
        is having trouble so trouble. Debug this page so that it matches the example
        on the next level.  Your teacher may also be displaying the website at the
        front of the room.\r
        \r
        As you work to debug look specifically at:\r
        \r
        *
        header elements\r
        * list elements\r
        * list item elements
      CSDU2 - First-Weblab_markdown_instruction: |-
        # Adding Content\r
        \r
        Start creating
        your first web page! Try to create a page with a title and two paragraphs.\r
        \r
        #
        Do This\r
        \r
        * Write a sentence about your favorite animal\r
        * On a separate
        line write another sentence about your least favorite animal.\r
        * Above both
        sentences try adding a title that says "Animals"\r
        * Don't forget to click
        <img src="https://images.code.org/6a35d13b10ed2029a9323c9cb555e39e-image-1477681291001.01.12
        PM.png" style="width:100px">\r
        * **What do you notice about the structure
        of your content?**
      CSDU2 - Footer_markdown_instruction: |-
        # Recreating Page\r
        \r
        At the beginning
        of class you looked at a web page and figured out which elements were styled
        similarly. Using those guesses and the classes in the starter code can you
        recreate the original page?\r
        \r
        # Do This\r
        * Look at the class style
        rules to see what they do. Don't worry if you don't know every property
        yet. Just use the ones you do know.\r
        * Put elements in the appropriate classes
        to recreate the <a href="https://studio.code.org/s/csd2/stage/9/puzzle/2"
        target="_blank"> original page </a>
      CSDU2 - Header of Page_markdown_instruction: |-
        # Header Area\r
        \r
        Websites
        usually have the same navigation bar across all of their pages so you can
        get back and forth between things on the site. To do this you need to add
        the navigation links to all the pages on your website.\r
        \r
        # Do This\r
        \r
        *
        Copy the navigation links section onto all the web pages.\r
        * Copy any styles
        you need into the style sheets for those pages.
      CSDU2 - Headers_markdown_instruction: |-
        <div style="float: right; height: 250px;
        width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px">\r
        <details>\r
        <summary>**What
        are headers?**</summary>\r
        Headers are the different sized section titles
        throughout a web page. Headers add structure to your web page by breaking
        it up so its easier for a user to read.\r
        </details>\r
        <details>\r
        <summary>**How
        do I create a header?**</summary>\r
        You can make something a header element
        by surrounding it by header tags.  For example:\r
        <pre> &lt;h1&gt; Header
        Text &lt;/h1&gt; </pre> <br> <br>\r
        \r
        Notice how there is a the opening
        tag (&lt;h1&gt;) and closing tag (&lt;/h1&gt;). The closing tag is the same
        as the opening tag except it has `/` after the opening angle bracket. The
        text you want to show as the header goes in the middle of the two tags.\r
        </details>\r
        <details>\r
        <summary>**What
        is HTML?**</summary>\r
        Stands for Hypertext Markup Language. HTML is used
        to add structure to the content of a web page. HTML uses tags to specify where
        certain structures start and end. These tags are sets of characters not found
        in the English language so that the content and structure can be differentiated.
        \r
        </details>\r
        <details>\r
        <summary>**What is an HTML element?**</summary>\r
        A
        piece of a website. Marked by a start tag and sometimes closed with an end
        tag. Also includes the content of the element as well. For example: \r
        <img
        src="https://images.code.org/fb4df62aa4d879f7021c567be2e28eea-image-1481135855001.png"
        style="width:500px">\r
        </details>\r
        <details>\r
        <summary>**What is an
        HTML tag?**</summary>\r
        The special set of characters that tells the machine
        where the start or end of an HTML element is and what type it is. HTML tags
        add structure to the content of a web page.\r
        </details>\r
        <details>\r
        <summary>**Why
        do you need an opening and closing tag?**</summary>\r
        You need both an opening
        and closing tag for many HTML elements because it marks where that structure
        starts and stops. You don't want all the text on your web page to be a title.\r
        </details>\r
        </div>\r
        \r
        #
        Headers\r
        \r
        You may have noticed on the last level that everything you
        type into the editor is getting smashed together. In order to differentiate
        between these different parts we use HTML elements to mark the different parts
        of a web page. In your investigation with the inspector did you come across
        something that made headers?\r
        \r
        # Do This\r
        \r
        * Make your header "Animals"
        stand out using the `<h1>` header element.
      CSDU2 - Hobbies Valid Update_markdown_instruction: |-
        <div style="float: right;
        height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px">\r
        <details>\r
        <summary>**What
        is Doctype and how do I use it? **</summary>\r
        &lt;!DOCTYPE html&gt; is always
        the first thing in an html document because it notifies the computer that
        this is an html document and to interpret it as such. &lt;!DOCTYPE html&gt;
        is not technically a tag but instead an instruction to the web browser. <br>
        <br>\r
        \r
        Add &lt;!DOCTYPE html&gt; at the very top of your html file.  \r
        </details>\r
        \r
        <details>\r
        <summary>**What
        is the &lt;html&gt; element and how do I use it? **</summary>\r
        \r
        The &lt;html&gt;
        tag notifies the computer where the html starts and ends. The  &lt;html&gt;
        tag is the container for all other HTML elements (The &lt;!DOCTYPE html&gt;
        tag does NOT go inside the html element).  You will need an opening and closing
        &lt;html&gt; tag. This will also make your preview of your website update
        automatically if there are no issues with your code! <br> <br>\r
         \r
        Wrap
        all the content of the file in an HTML element using the &lt;html&gt; tag.\r
        \r
        </details>\r
        <details>\r
        <summary>**Why
        do I need to structure the HTML document this way?**</summary>\r
        Although
        many modern web browsers can make good assumptions about what language you
        are writing in and where to find different information in your document, you
        don't want to leave the display of you web page up to chance. To guarantee
        the best results for displaying your web page on all computers you need to
        assist the computer in figuring out where to find information. <br> <br>\r
        \r
        As
        you go forward you are going to need two different sections in your HTML file.
        They will serve different purposes.\r
        <br><br>\r
        1. Content of the page<br>\r
        2.
        Information about the page<br>\r
        <br>\r
        By breaking up a web page this way
        it is clear where to find the code that is creating the physical output on
        the web page and which code is just information for the computer about the
        page.<br><br>\r
        \r
        In creating web pages we differentiate between these
        two areas using the &lt;head&gt; and &lt;body&gt; elements. The &lt;head&gt;
        element contains all the information about the page.  The &lt;body&gt; element
        contains all the content for a web page.\r
        \r
        </details>\r
        \r
        <details>\r
        <summary>**What
        is a head element?**</summary>\r
        The &lt;head&gt; element contains all the
        information about the page. This is extra information that is helpful for
        the computer in displaying your web page but is not the physical content of
        the web page. \r
        \r
        The &lt;head&gt; element usually comes above the body
        element but inside the &lt;html&gt; element. For right now it will be blank
        but later we will learn important things that are added to the head.\r
        </details>\r
        \r
        <details>\r
        <summary>**How
        is the head element different than the header elements? **</summary>\r
        The
        header elements (&lt;h1&gt; to &lt;h6&gt;) are used to display headers directly
        on your web page for your user to see. The head tag marks the information
        that is not user facing in your HTML document. \r
        </details>\r
        \r
        <details>\r
        <summary>**What
        is the body element? **</summary>\r
        \r
         The &lt;body&gt; element contains
        all the content for a web page.  The HTML elements for your headers, paragraphs,
        and lists should all go inside the &lt;body&gt; element.\r
        \r
        </details>\r
        \r
        </div>\r
        \r
        #
        Update Hobbies Page\r
        \r
        &lt;!DOCTYPE html&gt;, &lt;html&gt;, &lt;head&gt;,
        and &lt;body&gt; are important to add to your web page. Practice adding them
        to update your Hobbies page. In all future levels they will be included for
        you so you won't need to add themselves.
      CSDU2 - HobbiesPage_markdown_instruction: |-
        # Hobbies Page\r
        \r
        In this level,
        you’ll use what you’ve learned to create your Hobbies page. Get creative with
        your Hobbies Page but make sure it meets the basic requirements in the Checklist
        first.\r
        \r
        # Checklist\r
        \r
        * 1 title with large header size\r
        * At
        least 3 medium headers with each hobby name\r
        * At least 3 small headers
        with the amount of time you’ve been doing each hobby\r
        * At least a 2 to
        3 sentence description of each hobby under the hobby’s time inside paragraph
        tags
      CSDU2 - HobbiesPageExample_markdown_instruction: |-
        # Example Hobbies Page\r
        \r
        TO
        DO: Make this an embed level\r
        \r
        On the next level you are going to work
        on creating your own Hobbies Page. This is an example of the type of page
        you are working to create. Come back to this level for reference as needed
        while creating your page.
      CSDU2 - Inspector Warm Up_markdown_instruction: |-
        <div style="float: right;
        height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px">\r
        <details>\r
        <summary>**<span>
        How do I use the Inspector Tool? </span>**</summary>\r
        The Inspector Tool
        is a great way to figure out what unfamiliar code in Web Lab. To turn on the
        Inspector Tool click the <img src="https://images.code.org/188579d7c6e7645d0d2edd203a33bd63-image-1480361561351.31.56
        PM.png" style="width:100px">. You will know that the Inspector Tool is
        on because the button will turn white and say Inspector: On. Once you turn
        on the Inspector Tool you can hover over any element in the preview area and
        Web Lab will highlight the associated code.\r
        </details>\r
        \r
        </div>\r
        \r
        #
        Language Detective\r
        \r
        Use the Inspector Tool to check out the code for
        this website someone created on Web Lab! Focus on the index.html file open
        for now.\r
        \r
        Try to answer the following questions:\r
        \r
        * In what ways
        is this language similar to or different from the languages your groups invented
        in the last lesson?\r
        * What are the rules of this language?\r
        * How does
        this language add structure to the website?\r
        \r
        **Wait for instructions
        from your teacher before going on to the next level.**
      CSDU2 - Internet Speed Test_markdown_instruction: |-
        # Peer Review\r
        \r
        Today
        you are going to have other people look at your website and give feedback
        on it.\r
        \r
        # Do This\r
        \r
        * Leave this open on your screen so your peer
        reviewers can look at your work
      CSDU2 - Intro to CSS_markdown_instruction: |-
        # Style Element\r
        \r
        Up until
        now you have only been able to add content to your page. In Web Developers
        intentionally separate content and style to make their code easier to maintain.  HTML
        is the language used to add content to a web page. CSS is a language that
        adds style to a web page. \r
        \r
        In CSS style rules are used to style certain
        elements of HTML.  Style rules explicitly call out certain properties of the
        element to be styled. To add CSS style rules to an HTML page, you need to
        first add an HTML `<style>` element. This signals to the web browser that
        all the stuff inside the `<style>` element is CSS styling instructions. \r
        \r
        \r
        #
        Do This\r
        \r
        * Add the `<style>` element right below the opening `<html>`
        tag. \r
        \r
        We will add CSS to change the look of the page on the next level!
      CSDU2 - Intro to Validator_markdown_instruction: |-
        # Validator\r
        \r
        The validator
        is a tool that allows you to check if a page is following good HTML fundamentals
        and will work consistently across many different computers and web browsers.\r
        \r
        #
        Do This\r
        \r
        Use the validator to check if the web page on this level meets
        the requirements for consistent web pages. To use the validator, it’s important
        to work on it one error at a time.\r
        \r
        1. Open up the <a href="https://validator.w3.org/"
        target="_blank">W3 validator</a>.\r
        2. Click **"Validate by Direct Input"**\r
        3.**
        Copy and paste the contents of index.html** file into the box.\r
        4. Click
        **“Check”**\r
        5. If there is an error message click the top error below:\r
        \r
        \t*
        <a href="https://studio.code.org/s/csd2/stage/5/puzzle/4"> Unable to Determine
        Parse Mode! </a>\r
        \t* <a href="https://studio.code.org/s/csd2/stage/5/puzzle/4">
        No DOCTYPE found, and unknown root element. Aborting validation. </a>\r
            *
        <a href="https://studio.code.org/s/csd2/stage/5/puzzle/5"> Element head
        is missing a required instance of child element title. </a>\r
            * <a href="https://studio.code.org/s/csd2/stage/5/puzzle/5">
        Element title must not be empty.</a>\r
            * <a href="https://studio.code.org/s/csd2/stage/5/puzzle/4">
        Start tag seen without seeing a doctype first. Expected e.g. <!DOCTYPE html>.</a>\r
        \r
        \tOnce
        you fix the error start again at step 1.\r
        \r
        6. If there are no error messages
        <a href="https://studio.code.org/s/csd2/stage/5/puzzle/6">click here </a>
        to head to the next set of levels!
      CSDU2 - Link Tag_markdown_instruction: |-
        # Link Element\r
        \r
        In the last level
        you moved your style out into an external style sheet. You may have noticed
        though that the style was no longer appearing on the page. To get the style
        to apply to the web page we need to connect the html and css files.\r
        \r
        **To
        link sheets you will need to add a `<link>` element.** The `<link>` element
        goes inside the `<head>` element since it is information about the page and
        not content of the page. You can link a stylesheet to multiple pages if you
        want them all to have the same style.\r
        \r
        `<link>` element has two main
        attributes: `rel` and `href`.\r
        \r
        * As you learned before for images the
        `href` attribute is the file path, in this case just the same of the CSS file.  \r
        *
        The `rel` attribute indicates the relationship that the linked file has to
        the current file, in this case its a stylesheet.\r
        \r
        For example:\r
        <pre>\r
        &lt;head&gt;\r
            &lt;link
        rel="stylesheet" href="styles.css"&gt;\r
        &lt;/head&gt;\r
        </pre>\r
        \r
        #
        Do This\r
        \r
        * For the index.html link the css file using the `<link>` element
        in the `<head>` element
      CSDU2 - Link and Nav_markdown_instruction: |-
        <div style="float: right; height:
        250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px">\r
        <details>\r
        <summary>**What
        are hyperlinks?**</summary>\r
        Hyperlinks can connect to local web pages or
        external web pages. To add navigation to your website you will need to add
        hyperlinks which connect your individual web pages. You can **add hyperlinks
        to your web page using the `<a>` element**.  The text you want to display
        as the hyperlink goes between the opening and closing hyperlink tags. The
        `<a>` element has an attribute `href` which is the location to link to.  The
        location of a local page is just the file path for that page. <br> <br>\r
        \r
        For
        example to link to the unique houses page you would add the following code
        inside your `<body>` element. <br><br>\r
        \r
        <pre>\r
        &lt;a href=”houses.html”&gt;
        Unique Houses &lt;/a&gt;\r
        </pre>\r
        \r
        </details>\r
        <details>\r
        <summary>**How
        do I add a hyperlink?**</summary>\r
        You can **add hyperlinks to your web
        page using the `<a>` element**.  The text you want to display as the hyperlink
        goes between the opening and closing hyperlink tags. The `<a>` element has
        an attribute `href` which is the location to link to.  The location of a local
        page is just the file path for that page. <br> <br>\r
        \r
        For example to
        link to the unique houses page you would add the following code inside your
        `<body>` element. <br><br>\r
        \r
        <pre>\r
        &lt;a href=”houses.html”&gt; Unique
        Houses &lt;/a&gt;\r
        </pre>\r
        \r
        </details>\r
        </div>\r
        \r
        # Hyperlink
        Element\r
        \r
        * In the index.html file, find the line of code that says `<a
        href="houses.html">Odd Houses</a>`.  This is a link that will take you to
        the Odd Houses page at `houses.html`.\r
        * Discuss with a partner how the
        code works.\r
         * Where does the file name go?\r
         * Where does the label
        of the link go?\r
        * Below the hyperlink to the Odd Houses page add two new
        hyperlinks (`<a>`) to the following pages:\r
            * Crazy Signs Page\r
            *
        Guinness Book of World Records Page\r
        * Test it out to see if clicking the
        links take you to the other pages of your site.
      CSDU2 - Local Images_markdown_instruction: |-
        <div style="float: right; height:
        250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px">\r
        <details>\r
        <summary>**How
        do I add images?**</summary>\r
        The `<img>` tag allows you to show images
        on your web page. <br><br>\r
        \r
        Example:\r
        <pre>&lt;img src="dog.png"
        alt="dog jumping"/&gt;</pre><br><br>\r
        \r
        In order to tell the browser
        which file to use, extra information, called an **attribute**, is added to
        the &lt;img&gt; tag inside the brackets. The attribute `src` stands for **s**ou**rc**e
        and tell the name of the image. Image files names include extensions which
        tell the computer which type of image they are working with. Common extensions
        are .jpg, .jpeg, .png. <br><br>\r
        \r
        In addition to have the src attribute,
        image elements also have the `alt` attribute which describe the image. This
        is important in case the image doesn’t load or for people who have trouble
        with their eyesight. <br><br>\r
        \r
        An `<img>` tag is an example of a  **void
        element** because it starts and closes in one tag. To mark this we put the
        `/` which usually goes in the close tag at the end of the image tag.\r
        \r
        </details>\r
        <details>\r
        <summary>**What
        is a void tag?**</summary>\r
        An `<img>` tag is an example of a  **void element**
        because it starts and closes in one tag. To mark this we put the `/` which
        usually goes in the close tag at the end of the image tag. Void tags do not
        need a closing tag because there is no text content which must be wrapped
        in tags. The content that shows on the screen is specified through the tags
        attributes.\r
        </details>\r
        <details>\r
        <summary>**Why does an image tag
        not have a closing tag?**</summary>\r
        An image tag is a void tag and void
        tags do not need a closing tag because there is no text content which must
        be wrapped in tags. The content that shows on the screen is specified through
        the tags attributes.\r
        </details>\r
        <details>\r
        <summary>**What is an attribute?**</summary>\r
        Attributes
        are extra information included in a tag.  Attributes have names and values.
        The name tells what type of information is being provided and then the value
        gives the specific information for that tag. \r
        \r
        For example &lt;img&gt;
        tags have two attributes, src and alt. src specifies the name of the image
        file and alt tells the browser in readable text what the image is.\r
        </details>\r
        </div>\r
        \r
        #
        Images\r
        \r
        A Dog vs Cat web page has been started for you. The dog image
        has already been added to the below web page. Use an image tag to add the
        cat.jpeg image to the page below the cat header.
      CSDU2 - Matching Class Style Checker_markdown_instruction: |-
        # Check your matching
        answers\r
        \r
        Test out your guesses from the matching activity by applying
        the class styling to the elements and see if it produces the same result.
        The results from the slide show are shown below.\r
        \r
        | Question 1 | Question
        2 | Question 3 | Question 4 | Question 5 |\r
        | ---------- | ---------  |
        ---------- | ---------- | ---------- |\r
        | <img src="https://images.code.org/702e804602dbf28874f516f1578fd883-image-1475259238611.54.05
        PM.png" style="width:250px"> | <img src="https://images.code.org/7f6a2c9561213f6b5c8c9285f94ae850-image-1475259241204.25.16
        PM.png" style="width:250px"> | <img src="https://images.code.org/291f01b170f9242a26f04f8eb8296471-image-1475259238611.52.46
        PM.png" style="width:250px"> | <img src="https://images.code.org/81c9db1d1258f0fd709ba4508806388c-image-1475259238611.53.08
        PM.png" style="width:250px"> | <img src="https://images.code.org/43df26d786235bf2402854b56c8bbcf5-image-1475259238610.50.22
        PM.png" style="width:250px"> |
      CSDU2 - Missing Home Link_markdown_instruction: |-
        # Missing Home Link\r
        \r
        Copying
        your hyperlinks to all your pages allowed you to get to most of the pages
        on your website from any other page. One hyperlink is missing - the one to
        get you to your home page (index.html).\r
        \r
        **Add a hyperlink to your home
        page from all the pages, even your home page itself.** Adding it to your home
        page will keep your navigation header consistent on all pages.
      CSDU2 - Multi Site First_markdown_instruction: |-
        # Making a Multi-page Site\r
        \r
        A
        web site should include more than one web page, and they should connect to
        each other.  The first multi-page site you make will be a site of Odd Stuff.  Most
        of the site is already here, but you will need to add your Guinness Book of
        World Records page.\r
        \r
        * In the list of project files, find index.html
        and click on it.   **index.html is used in Web Lab to mark the home page of
        a website**, the first page that your visitors will see.\r
        * Click on some
        of the other HTML files.  These are also web pages, but they have different
        names.  **Every file needs a unique name that will help you know what it is.**\r
        *
        Look around through all the files provided. Can you figure out which style
        sheets go with which web pages?
      CSDU2 - Nav add to Personal Site_markdown_instruction: |-
        # Navigation on Personal
        Website\r
        \r
        Now that you have all the files for your website, connect them
        together!\r
        \r
        # Do This\r
        \r
        * Add hyperlinks at the top of your index.html
        file for every page on your site (including the index.html page).\r
        * In
        your style sheet, create a rule-set for the `a` tag that gives it the style
        that you want.\r
        * Copy the hyperlinks and put them in every page.\r
        \r
        \r
        *
        Add the `a` rule-set to every style sheet, or combine your style sheets to
        make your entire page have the same look and feel!\r
        \r
        Once your website
        is set up and connected, feel free to make improvements to any pages on your
        website.\r
        \r
        Before leaving this level:\r
        * Take a screenshot of your
        home page and save it somewhere on your computer so you can find it later
        (*Need help with how to screenshot? Check out this <a href="http://www.take-a-screenshot.org/">website
        </a>.*)\r
        \r
        ## Check List\r
        \r
        * All of your web pages are individual
        HTML files in this Portfolio Project
      CSDU2 - Nav on Personal Website_markdown_instruction: |-
        # Multi-Page Personal
        Website\r
        \r
        Now that you know how to set up a website, go ahead and set
        up your own personal website.\r
        \r
        # Do This\r
        Your personal website is
        back. So far you have just your personal home page.\r
        \r
        * Add html files
        for each of the Hobbies Page, Recipe Page, and About Me page\r
        * Copy the
        code from the following levels <a href="https://studio.code.org/s/csd2-old/stage/4/puzzle/13"
        target="_blank">Hobbies Page</a>, <a href="https://studio.code.org/s/csd2-old/stage/4/puzzle/17"
        target="_blank">Recipe Page</a>, and <a href="https://studio.code.org/s/csd2-old/stage/8/puzzle/12"
        target="_blank">About Me page</a> into the files you created.\r
        * Add a
        CSS file for your <a href="https://studio.code.org/s/csd2-old/stage/8/puzzle/12"
        target="_blank">"About Me" page style sheet</a>.
      CSDU2 - New Class Files_markdown_instruction: |-
        <div style="float: right; height:
        250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px">\r
        <details>\r
        <summary>**Why
        is the style sheet not working? **</summary>\r
        Check in the HTML of the records
        page to make sure that your link (`<link rel="stylesheet" href="nameofstylesheet.css">`)
        is linking to the correct CSS file.\r
        </details>\r
        </div>\r
        # Making a
        Multi-page Site\r
        \r
        You may notice that your styles for your Guinness Book
        of World Records don't seem to be working. Can you figure out why? \r
        \r
        **Hint:**
        When you brought over your code you had to change the name of the style sheet
        from "style.css" to something else.
      CSDU2 - New Html Files_markdown_instruction: |-
        # Adding HTML and CSS\r
        \r
        You
        will need to add your Guinness Book of World Records page. First create an
        HTML and CSS file. On the next level you will bring over the code.\r
        \r
        ##
        Adding File\r
        * Add a new HTML file by clicking the "Add HTML" button.\r
        *
        Rename the file, either by right clicking it and choosing "Rename", or by
        clicking on it when it's already highlighted.  **Make sure the name is unique,
        descriptive and ends in ".html"**.\r
        * Create a new CSS file and rename
        it, too.
      CSDU2 - PW - Class Style Personal Site - OLD_markdown_instruction: |-
        # Free
        Play Styling\r
        \r
        Your turn to decide what you want to style! Play with
        the classes styling and RGB colors to improve your personal website.\r
        \r
        *
        Make sure you have completed the checklist below.\r
        * Take a screenshot of
        your home page and save it somewhere on your computer so you can find it later.\r
        \r
        ##
        Checklist\r
        \r
        * Somewhere on your site, give text a particular color using
        RGB values.\r
        * On your lists page, give all the list items the same background
        color.\r
        * Use classes to style at least 2 other elements of your personal
        website
      CSDU2 - PW - Class Style Personal Site_markdown_instruction: |-
        # Free Play Styling\r
        \r
        Your
        turn to decide what you want to style! Play with the classes styling and RGB
        colors to improve your personal website.\r
        \r
        * Make sure you have completed
        the checklist below.\r
        * Take a screenshot of your home page and save it
        somewhere on your computer so you can find it later.\r
        \r
        ## Checklist\r
        \r
        *
        Somewhere on your site, give text a particular color using RGB values.\r
        *
        On your lists page, give all the list items the same background color.\r
        *
        Use classes to style at least two other elements of your personal website
      CSDU2 - PW - Class Style Personal Site_2018_markdown_instruction: |-
        # Free Play
        Styling\r
        \r
        Your turn to decide what you want to style! Play with the classes
        styling and RGB colors to improve your personal website.\r
        \r
        * Make sure
        you have completed the checklist below.\r
        * Take a screenshot of your home
        page and save it somewhere on your computer so you can find it later.\r
        \r
        ##
        Checklist\r
        \r
        * Somewhere on your site, give text a particular color using
        RGB values.\r
        * On your lists page, give all the list items the same background
        color.\r
        * Use classes to style at least two other elements of your personal
        website
      CSDU2 - PW - Classes on Recipe_markdown_instruction: |-
        # Classes on Recipe Page\r
        \r
        In
        the next few levels, as a little more practice with style, you will style
        some of the elements on your recipe page in order to give the appearance of
        a notecard. You will want to make the background of the ingredients list and
        the directions lists look like notecards.\r
        \r
        # Do This\r
        \r
        * In the
        recipe page add the ordered list for directions to the "notecard" class\r
        *
        In the recipe page add the unordered list for the ingredients to the "notecard"
        class\r
        * Add a style rule for the notecard class but don't put anything
        in it. You will start working on it on the next level.
      CSDU2 - PW - Consistent Personal Site Style_markdown_instruction: |-
        # Consistent
        Style\r
        \r
        Your site’s pages might look crazy since you pulled together
        the style of all the pages in the last level. It is time to work on that by
        creating classes for style exceptions.\r
        \r
        # Do This\r
        \r
        * Identify
        the exceptions to the style rules such as the note card styling\r
        * Use classes
        to separate the styling of those unique elements\r
        * Move the styling for
        those classes into your style.css file\r
        * Get ride of all `<style>` elements
        and the style rules inside them\r
        * Your website should now have a consistent
        look!
      CSDU2 - PW - Divs to break up the page_markdown_instruction: |-
        # Header and
        Content Divs\r
        \r
        Grouping together the different sections of a web page
        will make styling the web page easier. It also helps make clear to the user
        where to look for different content. You saw an example of this earlier in
        the levels.\r
        \r
        # Do This\r
        \r
        * Put all the elements for the navigation
        of the website and the title of the website in div if it not already\r
        *
        Set the class of that div to be "header"\r
        * Put all the rest of the elements
        on the page in a different div \r
        * Set the class for the second div to be
        "content"\r
        * These will get styled on the next level!
      CSDU2 - PW - ESS Final touches_markdown_instruction: |-
        # Finalizing Styling\r
        \r
        You
        should have completed styling your page with an external style sheet. Now
        it is time to finish up anything you still want to work on.\r
        \r
        # Do This\r
        \r
        *
        Go over the checklist below to make sure you have completed everything\r
        *
        Work on continuing to improve your website!\r
        * Take a screenshot of your
        home page and save it somewhere on your computer so you can find it later
        (*Need help with how to screenshot? Check out this <a href="http://www.take-a-screenshot.org/">website
        </a>.*)\r
        \r
        ## Checklist\r
        \r
        * Picked and used a font pair consistently
        across your website\r
        * Pick and used a color set of no more than 4 primary
        colors across your website. It is okay if you use different shades of those
        colors as well.\r
        * All style rules are in an external style sheet named
        style.css\r
        * The style.css file is linked to all pages on the website\r
        *
        Each page has:\r
        \t* Header div with the title of the website, the logo for
        your website, and the navigation bar\r
            * Content div with the main content
        of the web page\r
            * The logo as the favicon for that page\r
        * Clicking
        the logo on any page will take you back to the home page
      CSDU2 - PW - External Style Sheets_markdown_instruction: |-
        # External Style
        Sheet\r
        \r
        Alright you just learned how to add an external style sheet to
        create consistent style across a website. When there are specific things you
        want to style differently you have practiced using classes. It is time to
        use these in your Personal Website. To start, get all the style into one external
        style sheet linked to each web page.\r
        \r
        You can mark the different sections
        of the .css file with comments. Comments in CSS use different notation than
        comments in HTML. Comments in CSS look like this: `/* This is a comment */`\r
        \r
        #
        Do This\r
        \r
        * Create a CSS file and name it style.css\r
        * Cut/Paste the
        CSS code from your <a href="" target="_blank">style tester level</a> to
        style.css\r
        * Link the stylesheet to each document in a project.
      CSDU2 - PW - Favicon_markdown_instruction: |-
        # Favicon\r
        \r
        Since you have
        a logo for your website it would also be cool to have it be small image associated
        your website. The small image associate with your website is called a **favicons**.
        Favicon is short for favorite icon. It displays in the tab for a website,
        when a website is bookmarked, and sometimes in the browsers address bar.\r
        \r
        For
        example when you open a tab for Code.org it might look like this. The icon
        on the left is the favicon.\r
        \r
        <img src="https://images.code.org/9db8bd43bf27355cd6ed799358775140-image-1475697356699.55.40
        PM.png">\r
        \r
        Favicons are metadata for the website since they are used
        by the web browser and not content on the web page itself. Therefor they are
        included in the `<head>` element. To add the favicon you use the `<link>`
        element. The `href` still is the file path but the `rel` is "shortcut icon".\r
        \r
        For
        Example:\r
        \r
        <pre>\r
        &lt;head&gt;\r
        \t&lt;link rel="shortcut icon"
        href="logo.png" /&gt;\r
        &lt;/head&gt;\r
        </pre>\r
        \r
        # Do This\r
        \r
        *
        Set your icon to be the favicon for your website. You need to add it to every
        page for it show up on each page.
      CSDU2 - PW - Final Classes Style_markdown_instruction: |-
        # Note Card Styling\r
        \r
        Now
        that you have the background of the note cards, you can finish up the styling
        of the note card. \r
        \r
        Before you start styling it is important to know
        something about borders. So far you have controlled all four-sides of a border
        at the same time. Sometimes you want to style just one border edge at a time.
        To do this we just add the name of the side to the property.  For example:\r
        \r
        <pre>\r
        p
        {\r
        \tborder-top-color: green;\r
        \tborder-bottom-style: solid;\r
        \tborder-right-width:
        20px;\r
        }\r
        </pre>\r
        \r
        # Do This\r
        <img src="https://images.code.org/b38ebda06d6ce76bd59aa93fa050290c-image-1475159743251.30.18
        AM.png" style="width:400px;float:right">\r
        \r
        Style the note card so
        it looks similar to the image on the right.\r
        \r
        * Make the writing on the
        note card look like handwriting by using the font-family property and coloring
        it different than the rest of the text on the page\r
        * Make all note cards
        have a fixed width by setting the width of the notecard class to 500 pixels\r
        *
        Make the note card pop and look 3D using border properties.\r
        \t* Set the
        border color to the same color as the background of the card.\r
            * Set
        the style to `outset`\r
            * Set the width to a small number of pixels\r
        *
        Style the bottom border of all li elements to be black, solid, and 1 pixel.\r
        *
        Style the bottom border of all h3 elements to be red, solid, and 1 pixel.
      CSDU2 - PW - Image as A Link_markdown_instruction: |-
        # Image as a Link\r
        \r
        Now
        that you have a logo lets add it to your website. It will go on every individual
        page in your header with your navigation and website title. Often clicking
        on the logo of a website will take you back to the home page of a website.
        So we will set that up as well.\r
        \r
        To make an image also a link we just
        wrap the `<img>` element in a `<a>` element.\r
        \r
        <pre>\r
        &lt;a href="index.html"&gt;
        &lt;img src="logo.png" alt="logo"&gt; &lt;/a&gt;\r
        </pre>\r
        \r
        # Do
        This\r
        \r
        * Upload your logo to your project.\r
        * Insert the logo using
        an `<img>` element in the header div of each page\r
        * Make the image a link
        by surronding the `<img>` element in an `<a>` element that directs to the
        index.html page
      CSDU2 - PW - Pre Publishing 2_markdown_instruction: |-
        # HTML Tags Check\r
        \r
        The
        next check should be for bugs or issues with your HTML. \r
        \r
        # Do This\r
        \r
        *
        Make sure you are viewing your index.html file on Web Lab\r
        * Open your Web
        Development Practices to page 2\r
        * Read through the list of basic HTML tags
        you have seen\r
        * Check through your page to make sure you are using the
        tags correctly and not missing tags
      CSDU2 - PW - Pre Publishing 3_markdown_instruction: |-
        # Bugs Check\r
        \r
        The
        next check should be for general bugs.\r
        \r
        # Do This\r
        \r
        * Open your
        Web Development Practices to page 3\r
        * Read through the list of bugs you
        have seen\r
        * Check through your page to make sure none of those bugs are
        appearing in your current website
      CSDU2 - PW - Pre Publishing 4_markdown_instruction: |-
        # CSS Properties Check\r
        \r
        The
        next check should be for styles you still want to add or fix.\r
        \r
        # Do
        This\r
        \r
        * Make sure you are viewing your style.css file on Web Lab\r
        *
        Open your Web Development Practices to page 4\r
        * Read through the list of
        basic CSS properties you have seen\r
        * Think about if there are styles you
        still want to add or improve
      CSDU2 - PW - Pre Publishing 5_markdown_instruction: |-
        # Personally Identifiable
        Information Check\r
        \r
        Earlier in this lesson you made a list of information
        you would not want to give away on your website. Use that list to check your
        site. This is the most important step before publishing your website for all
        to see.\r
        \r
        # Do This\r
        \r
        * Open your Web Development Practices to page
        5\r
        * Read through your list of rules for protecting your PII\r
        * Be a sleuth
        on your own page and make sure people can not find out that important information
        you want to protect.\r
        * Remove the information you don't want people to
        know. This doesn’t have to mean stripping all of the personal importance out
        of your site, it can be as simple as cropping an image to remove faces or
        replacing your school’s name with “my school”.
      CSDU2 - PW - Pre Publishing 6_markdown_instruction: |-
        # Publishing!\r
        \r
        It
        is time to share your website!\r
        \r
        # Do This\r
        \r
        * Check your website
        one more time to make sure you are ready to share it with others\r
        * Notice
        the "Share" button has appeared at the top of the screen.\r
        * Click the
        share button and copy the URL for your website.\r
        * Send that URL to friends
        and family as instructed by your teacher.\r
        \r
        If you made changes to your
        home page during class make sure to take a screenshot of your home page and
        save it somewhere on your computer so you can find it later (*Need help with
        how to screenshot? Check out this <a href="http://www.take-a-screenshot.org/">website
        </a>.*)
      CSDU2 - PW - Pre Publishing Access_markdown_instruction: |-
        # Accessibility Check\r
        \r
        The
        next check should be for accessibility issues.\r
        \r
        # Do This\r
        \r
        * Open
        your Web Development Practices to page 5\r
        * Read through the list of accessibility
        issues you had identified\r
        * Make sure you fixed all the issues you had
        listed\r
        * Check for any new content you have added for accessibility issues
      CSDU2 - PW - Pre Publishing Check_markdown_instruction: |-
        # High Quality Features
        Check\r
        \r
        Use your Web Development Practices - Project Guide to review
        your website for publishing. First you will look at the list of features you
        said you thought made something a high quality website to make sure you are
        doing those things.\r
        \r
        # Do This\r
        \r
        * Open your Web Development Practices
        to page 1\r
        * Read through the feature list\r
        * Pick a couple features you
        might want to improve after reading the list
      CSDU2 - PW - Publish It_markdown_instruction: |-
        # Publish It\r
        \r
        \r
        # Do
        This\r
        \r
        * Publish it
      CSDU2 - PW - RGB color_markdown_instruction: |-
        # RGB Color\r
        \r
        In order to
        get a nice “fake” notecard color, you will have to break out from the named
        color values given in Web Lab. \r
        Instead, you will be using the RGB function,
        which takes three values, the amount of red, green and blue you want in  your
        color. Each component of the color (red, green, blue) can have a value of
        0 to 255. Where 0 means the component color is not present or dark and 255
        means it is full present or bright.\r
        \r
        For example:\r
        \r
        <pre>\r
        \r
        h1
        {\r
        \tcolor: rgb(120, 0, 255);\r
        }\r
        </pre>\r
        \r
        To explore RGB colors
        go to <a href="http://www.w3schools.com/colors/colors_rgb.asp">W3 Schools
        - RGB Colors </a>. There is a tool for you to play around with different RGB
        values.\r
        \r
        # Do This\r
        \r
        * Play with the <a href="http://www.w3schools.com/colors/colors_rgb.asp">W3
        Schools - RGB Colors </a> tool and find a color similar to this color: <img
        src="https://images.code.org/2de78dc9667e9e6c77dc5e28b1de6b0d-image-1475095252137.40.30
        PM.png" style="width:50px">\r
        \r
        * Set the `background-color` of the
        notecard class to the yellow you just created.\r
        \r
        *Hint: Yellow is a **bright**
        color with **equal amounts of red and green**. *
      CSDU2 - PW - Title for Your Site_markdown_instruction: |-
        # Website Title\r
        \r
        in
        head element need to add title element with your title\r
        \r
        shows up in
        the name of the tab\r
        \r
        # Do This\r
        \r
        * Stuff
      CSDU2 - PW - Validate Your Website_markdown_instruction: |-
        # Validator\r
        \r
        The
        HTML is designed to display the same way on all computers, but sometimes you’ll
        notice that different web browsers, or even different versions of the same
        browser, display a website differently. Often this is because you either missed
        a rule of HTML, or didn’t describe your content specifically enough. Fortunately
        there’s a tool called the Validator that can check your code for errors!\r
        \r
        #
        Do This\r
        \r
        * Open up the <a href="https://validator.w3.org/#validate_by_input"
        target="_blank">Validator - Website</a>\r
        * For each html file in your
        project\r
        \t* Copy the html into the box\r
            * Click check to see if there
        are an error\r
        \t* Make a list of all unique errors.\r
            * For each error,
        write in your own words what you think it means\r
            * For each error, search
        to find a potential solution.
      CSDU2 - Paragraphs 2_markdown_instruction: |-
        <div style="float: right; height:
        250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px">\r
        <details>\r
        <summary>**What
        is a paragraph element?**</summary>\r
        Paragraphs are marked by opening(`<p>`)
        and closing(`</p>`) tags as well. Paragraphs in HTML can be any length of
        text from one word to a bunch of sentences. All of your text in your web page
        should be contained in an HTML element (headers or paragraphs). Paragraphs
        group together sets of sentences and put some space between that group of
        text and the next group of text.\r
        </details>\r
        <details>\r
        <summary>**How
        do I create multiple paragraphs?**</summary>\r
        Paragraphs are marked by opening(`<p>`)
        and closing(`</p>`) tags as well. To create more than one paragraph you will
        want multiple sets of opening and closing `<p>` tags. For example\r
        <pre>\r
        \t&lt;p&gt;\r
            \tThis
        is a paragraph.\r
            &lt;/p&gt;\r
        \t&lt;p&gt;\r
            \tThis is another
        paragraph.\r
            &lt;/p&gt;\r
        </pre>\r
        </details>\r
        <details>\r
        <summary>**What
        is HTML?**</summary>\r
        Stands for Hypertext Markup Language. HTML is used
        to add structure to the content of a web page. HTML uses tags to specify where
        certain structures start and end. These tags are sets of characters not found
        in the English language so that the content and structure can be differentiated.
        \r
        </details>\r
        <details>\r
        <summary>**What is an HTML element?**</summary>\r
        A
        piece of a website. Marked by a start tag and sometimes closed with an end
        tag. Also includes the content of the element as well. For example: \r
        <img
        src="https://images.code.org/fb4df62aa4d879f7021c567be2e28eea-image-1481135855001.png"
        style="width:500px">\r
        </details>\r
        <details>\r
        <summary>**What is an
        HTML tag?**</summary>\r
        The special set of characters that tells the machine
        where the start or end of an HTML element is and what type it is.\r
        </details>\r
        </div>\r
        \r
        #
        Paragraphs\r
        \r
        Now that you have a header try to separate the two sentences
        like the example below using the paragraph element.\r
        \r
        <img src="https://images.code.org/12f8d4230fcd2144a5880815c8375149-image-1480364278934.12.18
        PM.png" style="width:300px">
      CSDU2 - Paragraphs 3_markdown_instruction: |-
        <div style="float: right; height:
        250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px">\r
        <details>\r
        <summary>**How
        do I make different sized headers?**</summary>\r
        Headers come in 6 different
        sizes. So far you have primarily used the biggest one &lt;h1&gt;. The number
        1 in the HTML tag designates that this is the biggest header. The smallest
        header is &lt;h6&gt;. You can also try the &lt;h2&gt;, &lt;h3&gt;, &lt;h4&gt;,
        and &lt;h5&gt; tags which get smaller as the number gets larger.\r
        </h1>\r
        </details>\r
        <details>\r
        <summary>**What
        are headers?**</summary>\r
        Headers are the different sized section titles
        throughout a web page. Headers add structure to your web page by breaking
        it up so its easier for a user to read.\r
        </details>\r
        <details>\r
        <summary>**What
        is HTML?**</summary>\r
        Stands for Hypertext Markup Language. HTML is used
        to add structure to the content of a web page. HTML uses tags to specify where
        certain structures start and end. These tags are sets of characters not found
        in the English language so that the content and structure can be differentiated.
        \r
        </details>\r
        <details>\r
        <summary>**What is an HTML element?**</summary>\r
        A
        piece of a website. Marked by a start tag and sometimes closed with an end
        tag. Also includes the content of the element as well. For example: \r
        <img
        src="https://images.code.org/fb4df62aa4d879f7021c567be2e28eea-image-1481135855001.png"
        style="width:500px">\r
        </details>\r
        <details>\r
        <summary>**What is an
        HTML tag?**</summary>\r
        The special set of characters that tells the machine
        where the start or end of an HTML element is and what type it is.\r
        </details>\r
        </div>\r
        \r
        #
        Header Sizes\r
        Add the names of your favorite animals above the sentence
        they go with. Make the names of the animals smaller headers than the "Animals"
        title for the page. See the example below.\r
        \r
        <img src="https://images.code.org/1462f452bd2d983902f47e275da9fa90-image-1481137414337.03.11
        PM.png" style="width:250px">
      CSDU2 - Priority of CSS Rules_markdown_instruction: |-
        # Priority of CSS Rules\r
        \r
        On
        the last level you moved all the style rules to one style.css file that is
        linked to both web pages on the website. You may have noticed that the way
        some of the styling of the elements on the two pages changed. Over the next
        couple levels you will be working to fix this.\r
        \r
        ## Multiple Rules for
        One Element\r
        \r
        By copying the style rules from two different pages into
        one style sheet we created a couple cases where we have two style rules for
        one element. Style rules are applied from top to bottom so when there are
        multiple style-rules for the same properties of one element the one closer
        to the bottom is the one that will appear.\r
        \r
        For example if you had the
        following style rules.\r
        \r
        <pre>\r
        p{\r
          background-color: blue;\r
        }\r
        p{\r
          background-color:
        red;\r
        }\r
        </pre>\r
        \r
        The pargraph elements would have a red background.\r
        \r
        To
        fix this issue the best thing to do is have one rule for each type of element.\r
        \r
        #
        Do This\r
        \r
        * There are two style rules for `<div>` elements. They are
        both the same. Delete one of them.\r
        * There are two style rules for `<body>`
        elements. They are **different** but both just control the `background-color`
        decide which of the two you would like to keep and get rid of the other one.\r
        *
        Leave the duplicate `<img>` element style rules for now we will deal with
        them on the next level.
      CSDU2 - Recipe Page Start_markdown_instruction: |-
        <div style="float: right;
        height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px">\r
        <details>\r
        <summary>**What
        is HTML?**</summary>\r
        Stands for Hypertext Markup Language. HTML is used
        to add structure to the content of a web page. HTML uses tags to specify where
        certain structures start and end. These tags are sets of characters not found
        in the English language so that the content and structure can be differentiated.
        \r
        </details>\r
        <details>\r
        <summary>**What is an HTML element?**</summary>\r
        A
        piece of a website. Marked by a start tag and sometimes closed with an end
        tag. Also includes the content of the element as well. For example:<br>\r
        \r
        <img
        src="https://images.code.org/fb4df62aa4d879f7021c567be2e28eea-image-1481135855001.png"
        style="width:500px">\r
        </details>\r
        <details>\r
        <summary>**What is an
        HTML tag?**</summary>\r
        The special set of characters that tells the machine
        where the start or end of an HTML element is and what type it is. HTML tags
        add structure to the content of a web page.\r
        </details>\r
        </div>\r
        \r
        #
        Recipe Page\r
        \r
        You are going to start a new web page. This will be a favorite
        recipe page. It will take a couple levels to build the page.  Use your knowledge
        from earlier in class to start getting it set up.\r
        \r
        # Do This\r
        \r
        *
        Take out your recipe you picked.\r
        * Using a large header tag, put the name
        of the recipe at the top of the page.\r
        * Create three smaller headers: Description,
        Ingredients, and Instructions.\r
        * Add a paragraph element under the "Description"
        describing the dish the recipe creates.
      CSDU2 - Recipe Valid Update_markdown_instruction: |-
        <div style="float: right;
        height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px">\r
        <details>\r
        <summary>**How
        do I alert the web browser what language I'm writing in?**</summary>\r
        \r
        You
        will need to add two things to your HTML document, Doctype and an html element.
        \r
        \r
        </details>\r
        \r
        <details>\r
        <summary>**Why do I need to add these
        elements?**</summary>\r
        \r
        When a web browser is trying to read your document
        it looks for alerts which tell it which language you are using. In order to
        let the web browser know that this is an html document you need to tell it
        what type of document it is deal with (Doctype) and where to find the code
        (inside the html element).\r
        \r
        </details>\r
        \r
        <details>\r
        <summary>**What
        is DOCTYPE and how do I use it? **</summary>\r
        &lt;!DOCTYPE html&gt; is always
        the first thing in an html document because it notifies the computer that
        this is an html document and to interpret it as such. &lt;!DOCTYPE html&gt;
        is not technically a tag but instead an instruction to the web browser. <br>
        <br>\r
        \r
        Add &lt;!DOCTYPE html&gt; at the very top of your html file.  \r
        </details>\r
        \r
        <details>\r
        <summary>**What
        is the HTML element and how do I use it? **</summary>\r
        \r
        The &lt;html&gt;
        tag notifies the computer where the html starts and ends. The  &lt;html&gt;
        tag is the container for all other HTML elements (The &lt;!DOCTYPE html&gt;
        tag does NOT go inside the html element).  You will need an opening and closing
        &lt;html&gt; tag. This will also make your preview of your website update
        automatically if there are no issues with your code! <br> <br>\r
         \r
        Wrap
        all the content of the file in an HTML element using the &lt;html&gt; tag.\r
        \r
        </details>\r
        \r
        </div>\r
        \r
        #
        Doctype and HTML tag\r
        \r
        This is your Recipe page from the last lesson.
        Update it with elements that alert your browser which language the document
        was written in by adding DOCTYPE and &lt;html&gt; elements.\r
        \r
        ![](https://images.code.org/f75e718b8e40870e7b6d87c0efdfc0ae-image-1481320053480.png)
      CSDU2 - SEO 1_markdown_instruction: |-
        # Personal Website: Search Engine Optimization\r
        \r
        You
        are going to update your website to optimize for finding it on a search engine.
        It is important to know that your website might not be easy to find on a search
        engine.  This might be partially a result of improvements you could make to
        your website. However since your website is hosted by Code.org and does not
        have a descriptive URL it might be harder to find.\r
        \r
        # Do This\r
        \r
        *
        Run your website through the <a href="http://www.seocentro.com/tools/seo/seo-analyzer.html"
        target="_blank"> SEO </a>\r
        * Write down the issues it highlights with
        your website\r
        * We will learn how to fix some of those issues in the next
        couple levels however some may be things you want to investigate on your own
        later such as Social Media presence.
      CSDU2 - SEO 2_markdown_instruction: |-
        # Search Engine Optimization: Title\r
        \r
        One
        piece of metadata that should be included in every web page you create is
        the website title. Although you may put an `<h1>` element on your page content
        with the title of your website, the computer does not necessarily know that
        is the title as there may be multiple `<h1>` tags on your page. To make clear
        to the computer what the title is the `<title>` element is added as metadata
        in the `<head>` element. Every page on your website needs it own title.\r
        \r
        Example:\r
        <pre>\r
        &lt;head&gt;\r
        \t&lt;title&gt;
        My Website Title&lt;/title&gt;\r
        &lt;/head&gt;\r
        </pre>\r
        \r
        This `<title>`
        element is not displayed anywhere on the page but the browser may use it to
        put a name in the tab of your web browser or display it when someone searches
        for your website. In fact titles are very important to search engines because
        titles are often a primary piece of information looked at by users to decide
        which websites fulfill their needs.\r
        \r
        *Sometimes search engines will
        still generate their own title for your page based on the user search and
        what the algorithm of the search engine thinks is best for supporting what
        the user is looking for.*\r
        \r
        ## Guidelines for Creating Good Titles\r
        \r
        Since
        titles are so important you will want to make sure you have good titles for
        all the pages of your website. Here are a couple practices for making good
        titles. \r
        \r
        Make your title:\r
        * **Descriptive:** Make sure your title
        explains what someone will find on that page.\r
        * **Concise:** Keep your
        title short. 5 words or less.\r
        * **Individual:** Don't use the same title
        for multiple pages.\r
        \r
        # Do This\r
        \r
        * Add a `<title>` element to each
        web page on your website
      CSDU2 - SEO 3_markdown_instruction: |-
        # Search Engine Optimization: Description\r
        \r
        Another
        important piece of meta data used by search engines is the description. The
        description is added using the `<meta>` element. It has two attributes, the
        name and the content. The content is where the actual description goes. **Every
        page should have its own description.**\r
        \r
        <pre>\r
        &lt;head&gt; \r
        \t&lt;meta
        name="description" content="Your meta description goes here " /&gt;\r
        &lt;/head&gt;\r
        </pre>\r
        \r
        Just
        like the title tag this will not show up physically on the page but will be
        used by search engines to display information about your page. Sometimes the
        description will also be used when you share the link on social media platforms.
        \r
        \r
        *Just like titles the search engine might decide it knows best and
        generate a description for the page that is different than the one you provided.*\r
        \r
        ##
        What goes in a description?\r
        \r
        A good description will follow these guidelines:\r
        \r
        *
        **Descriptive:** Unique description of what someone will find on this page\r
        *
        **Keywords:** Uses keywords in full sentence descriptions which someone might
        use to search for your page\r
        * **Short:** Less than 150 characters\r
        *
        **Avoid Special Characters:** Don't use special characters such as ‘”<>{}[]()\r
        *
        **Enticing:** It makes someone want to look at your web page.\r
        \r
        # Do
        This\r
        \r
        * Add descriptions to each web page on your website using the
        `<meta>` tag \r
        * Test it out!\r
        \t* Open <a href="http://www.seocentro.com/tools/seo/seo-analyzer.html"
        target="_blank"> SEO </a>\r
            * Re-load the results for your page to
        use the most updated version\r
            * Under the <img src="https://images.code.org/01e0d19ff0278ba750efc3b3824b31b0-image-1477075078800.37.19
        PM.png" style="width:80px"> section there is a preview of the Google Search
        results.\r
            \r
        *Remember that the search engine might still decide to
        use something else as your description. It is not a big deal and it is still
        important to have a description.*
      CSDU2 - SEO 4_markdown_instruction: |-
        # Search Engine Optimization: Keywords\r
        \r
        \r
        \r
        \r
        #
        Do This\r
        \r
        * Meta name =”keywords” content=”blah” (http://searchengineland.com/meta-keywords-tag-101-how-to-legally-hide-words-on-your-pages-for-search-engines-12099)
      CSDU2 - SEO 5_markdown_instruction: |-
        # Search Engine Optimization: Viewport\r
        \r
        Your
        website can be used on many different devices. Those devices have different
        screen sizes. Viewport tells the browser how to load your website depending
        on the size of the browser. To get the browser to display your web page at
        the width of the device you can use the `<meta>` element with the attributes
        below. The `<meta>` element should go inside the `<head>` element with all
        the other meta data.\r
        \r
        <pre>\r
        &lt;meta name="viewport" content="width=device-width,
        initial-scale=1"&gt;\r
        </pre>\r
        \r
        # Do This\r
        \r
        * Set the viewport
        of your website using the above code.
      CSDU2 - SEO Final_markdown_instruction: |-
        # Search Engine Optimization: Final\r
        \r
        In
        the past levels you added metadata to your website to improve your search
        engine optimization. Go back to your list of issues the Search Engine Optimizer
        identified and see if there are any others you can solve.\r
        \r
        # Do This\r
        \r
        *
        Check to make sure you have completed the checklist below\r
        * Continue to
        optimize your site for better search engine results\r
        * Take a screenshot
        of your home page and save it somewhere on your computer so you can find it
        later (*Need help with how to screenshot? Check out this <a href="http://www.take-a-screenshot.org/">website
        </a>.*)\r
        \r
        ## Checklist\r
        \r
        * Every web page has metadata for title,
        description and viewport to improve search engine optimization.
      CSDU2 - Selector and Property_markdown_instruction: |-
        # CSS Style Rules\r
        \r
        Style
        rules consists of two main parts: the selector and the property. All style
        rules go inside the `<style>` element.\r
        \r
        # Selector\r
        The selectors
        can be any part of the web page you want to style. One way you can identify
        parts of the web page is using the names of the element. Selecting an element
        will make all elements of that type have the given styling. The selector name
        for HTML elements is the name of the tag with the brackets removed. In the
        below example the selector is `h1` and it will style all the h1 tags with
        the properties inside the `{ }`.\r
        \r
        # Property\r
        The property describes
        which style component of the selected element to change. There are lots of
        different style properties you can change about your web page. Not all properties
        can be used for all elements.\r
        \r
        The first property we will use is the
        `color` property. The **`color` property sets the color of text** and works
        for any text elements including paragraphs, lists and headers. There are tons
        of colors you can choose. Luckily Web Lab pops up a list as you type. You
        can also look at the full list of colors at <a href="http://www.w3schools.com/cssref/css_colors.asp">W3
        Schools - CSS Colors</a>.\r
        \r
        Example:\r
        \r
        The below style will make
        all the h1 headers on the page have blue text.\r
        \r
        <pre>\r
          &lt;style&gt;\r
            h1{\r
              color:blue;\r
            }\r
          &lt;/style&gt;\r
        </pre>\r
        \r
        #
        Do This\r
        \r
        * Add a style rule for h1 headers so the text is green.\r
        *
        Add another rule that defines the color of h3 headers. Pick any color you
        would like.
      CSDU2 - Separate Content and Style_markdown_instruction: |-
        # Separate Content
        and Style\r
        \r
        Soon you will get to apply your new brand style rules to
        your website. Before you do that, though, let's investigate how to style
        a multi-page website.\r
        \r
        As already mentioned, from this point forward
        we will be using external style sheets instead of styling inside the HTML
        file because this keeps all the styling for the website in one place.  However,
        in order to do this you are going to have to pay extra close attention as
        you remove your old styling. Even though you want consistent style on your
        website, you will have exceptions to the style rules in certain cases. Exceptions
        to the style rules might include the note card styling, which you worked on
        in the last lesson. We would not want every list to have the note card styling,
        just those specific ones on the recipe page.\r
        \r
        You will never want to
        have duplicate rules for the same selector. So there should not be two stylings
        with `p` as the selector. Instead you need to leverage the ability to make
        classes in order to have multiple styles for `<p>` elements. \r
        \r
        To practice
        this, we have a website with an external style sheet that also still has styling.
        You will need to figure out how to keep the unique elements of the individual
        web pages while getting a more consistent style across the pages.\r
        \r
        Unique
        Elements You Want to Keep:\r
        \r
        \t1.\tThe styling of the `<img>` elements
        on one page should be different than the other\r
        \t2.\tFor the `<h1>` headers,
        on one page we want to style them and on the other we don't.\r
        ￼\r
        # Do
        This\r
        \r
        * Put the image on the home page in the "home-image" class\r
        *
        Find the old style rule for images on the home page (width: 600px) and change
        the selector so it will style the "home-image" class instead\r
        * Put all
        the images on the technology page in the "tech-images" class\r
        * Find the
        old style rule for images on the technology page (width: 100px) and change
        the selector so it will style the "tech-images" class instead\r
        * Find
        the h1 element on the technology page and put it in the class "page-header"\r
        *
        Change the secltor for the style rule for h1 elements to be just a style rule
        for the page-header class\r
        * Copy the three new style rules you created
        into your style.css file.\r
        * Delete the `<style>` element and its contents
        from both pages.
      CSDU2 - SizeOfHeaders_markdown_instruction: |-
        # Size of Headers\r
        \r
        There
        are different sized headers which are marked by the number next to the h in
        the header tag. They go from &lt;h1&gt; to &lt;h6&gt; .\r
        \r
        | Example |
        Result |\r
        | ------- | ------ |\r
        | <pre>&lt;h1&gt; Shoulders &lt;/h1&gt;
        <br> &lt;h2&gt; Knees &lt;/h2&gt; <br> &lt;h3&gt; Toes &lt;/h3&gt;</pre> |
        <img src="https://images.code.org/4f252e3dce84a14e1bfdab373d3edbad-image-1473432674187.50.43
        AM.png" style="width:200px"> |\r
        \r
        # Do This\r
        * Predict what the result
        of the code in the index.html file will look like. Pick from one of the 4
        options below.\r
        \r
        | Option 1 | Option 2 | Option 3 | Option 4 |\r
        | --------
        | -------- | -------- | -------- |\r
        | <img src="https://images.code.org/a4e973cc13db380ca1e1efeb4263974f-image-1473432905067.53.47
        AM.png" style="width:200px"> | <img src="https://images.code.org/1c660b4e54a3e835250597cb261d8e17-image-1473432905068.54.08
        AM.png" style="width:200px"> | <img src="https://images.code.org/22e9ae6a04afd8251b29939a6fa63411-image-1473432905069.54.25
        AM.png" style="width:200px"> | <img src="https://images.code.org/0eee565202089d44a6bb5633603c45e0-image-1473432905069.54.50
        AM.png" style="width:200px"> |
      CSDU2 - Starting Personal Home Page_markdown_instruction: |-
        # Starting Your
        Home Page\r
        \r
        In this lesson we are going to start putting together your
        personal website! In order to do this you need to create your personal home
        page.\r
        \r
        # Do This\r
        \r
        Using your sketch of your personal home page
        and personal web development practice packet as a guide:\r
        * Create as much
        of the home page design as you currently know how to.\r
        * Take a screenshot
        of your work and save it somewhere on your computer so you can find it later
        (*Need help with how to screenshot? Check out this <a href="http://www.take-a-screenshot.org/">website
        </a>.*)
      CSDU2 - Style to Personal Site_markdown_instruction: |-
        # Style on Personal Website\r
        \r
        Now
        that you have navigation on each page, you need to figure out how you want
        to style your website. You have two choices:\r
        \r
        1. Make a style sheet
        for each web page on your website\r
        2. Have one style sheet for your whole
        website to give it a more consistent feel.\r
        \r
        Pick one of the two choices
        and style your website appropriately. Make sure to link the style sheet to
        the page(s) you want it to apply to. Also make sure that the `a` rule-set
        you created on the last level is applied to all your `a` tags.\r
        \r
        Once
        your website is set up and connected, feel free to make improvements to any
        pages on your website.\r
        \r
        Before leaving this level:\r
        * Take a screenshot
        of your home page and save it somewhere on your computer so you can find it
        later (*Need help with how to screenshot? Check out this <a href="http://www.take-a-screenshot.org/">website
        </a>.*)\r
        \r
        ## Check List\r
        \r
        * All of your web pages are individual
        HTML files in this Portfolio Project\r
        * Navigation to all the pages exists
        at the top of each individual page\r
        * Style has been applied to all pages
        on the website
      CSDU2 - Sub Folders_markdown_instruction: |-
        # Images\r
        \r
        When you have a
        bunch of images in your project its good to put them all in a folder to help
        organize your files.\r
        \r
        Once files are in a folder you need to help the
        computer find them by giving both the folder name and the file name.  For
        example to display the dog.png file in the folder called images we would use:\r
        \r
        <pre>
        &lt;img src="images/dog.png" alt="dog jumping" /&gt; </pre>\r
        \r
        The
        folder names comes first follow by the image name. We separate them with a
        / .\r
        \r
        # Do This\r
        * Add a folder called pictures\r
        * Move all the image
        files into the pictures folder\r
        * Notice how all the pictures no longer
        show but the text in the alt attribute does.\r
        * Update the links to the
        images so they display again
      CSDU2 - Type Anything_markdown_instruction: |-
        <img src="https://images.code.org/12ffe6980a25a3664eabe69be487a921-image-1485384422334.jpg"
        style="width:400px; float:right">\r
        \r
        # Welcome to Web Lab!\r
        \r
        The
        platform you are in is called Web Lab. There are three main parts of the screen
        in Web Lab.\r
        \r
        # Do This\r
        \r
        * Try typing something in the workspace.\r
        *
        Press <img src="https://images.code.org/678619085e37ea6ce904ac8abd0df2f2-image-1493226906609.14.45
        AM.png" style="width:150px"> to see it in the preview area!
      CSDU2 - Type Anything_2018_markdown_instruction: |-
        <img src="https://images.code.org/12ffe6980a25a3664eabe69be487a921-image-1485384422334.jpg"
        style="width:400px; float:right">\r
        \r
        # Welcome to Web Lab!\r
        \r
        The
        platform you are in is called Web Lab. There are three main parts of the screen
        in Web Lab.\r
        \r
        # Do This\r
        \r
        * Try typing something in the workspace.\r
        *
        Press <img src="https://images.code.org/678619085e37ea6ce904ac8abd0df2f2-image-1493226906609.14.45
        AM.png" style="width:150px"> to see it in the preview area!
      CSDU2 - Unordered Lists_markdown_instruction: |-
        <div style="float: right; height:
        250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px">\r
        <details>\r
        <summary>**What
        are the two types of lists?**</summary>\r
         There are two types of lists in
        HTML, ordered and unordered lists.\r
        </details>\r
        <details>\r
        <summary>**What
        is an unordered list?**</summary>\r
        An unordered list is just a set of bulleted
        items.\r
        </details>\r
        <details>\r
        <summary>**How do I make an unordered
        list?**</summary>\r
        \r
        An unordered list element has the tag &lt;ul&gt;
        . Notice that this is an abbreviation for <strong>U</strong>nordered <strong>L</strong>ist.
        Each item on the list is marked by a list item element &lt;li&gt;. Notice
        that this is also an abbreviation for <strong>L</strong>ist <strong>I</strong>tem.  The
        list item element is a child element which means that you don't use it on
        its own. It is contained inside a list element. It can be helpful to indent
        your &lt;li&gt; tags so its clear that is contained in the &lt;ul&gt; tags.\r
        \r
        <table
        border="1">\r
        <tr>\r
        <td>Example</td>\r
        <td>Result</td>\r
        </tr>\r
        <tr>\r
        <td><pre>
        &lt;ul&gt; <br>   &lt;li&gt;Red &lt;/li&gt; <br>   &lt;li&gt;Green &lt;/li&gt;
        <br>   &lt;li&gt;Blue&lt;/li&gt; <br> &lt;/ul&gt; </pre></td>\r
        <td><img
        src="https://images.code.org/25d4dfc9b6c448d0da305df66aa1dfb7-image-1473444368948.05.32
        PM.png" style="width:200px"></td>\r
        </tr>\r
        </table>\r
        \r
        </details>\r
        <details>\r
        <summary>**What
        is an ordered list?**</summary>\r
        An ordered list is a set of bulleted items
        which are numbered.\r
        </details>\r
        \r
        <details>\r
        <summary>**How do I
        make an ordered list?**</summary>\r
        \r
        An ordered list element has the tag
        &lt;ol&gt; . Notice that this is an abbreviation for <strong>O</strong>rdered
        <strong>L</strong>ist. Each item on the list is marked by a list item element
        &lt;li&gt;. Notice that this is also an abbreviation for <strong>L</strong>ist
        <strong>I</strong>tem.  The list item element is a child element which means
        that you don't use it on its own. It is contained inside a list element.
        It can be helpful to indent your &lt;li&gt; tags so its clear that is contained
        in the &lt;ol&gt; tag.\r
        \r
        <table border="1">\r
        <tr>\r
        <td>Example</td>\r
        <td>Result</td>\r
        </tr>\r
        <tr>\r
        <td><pre>
        &lt;ol&gt; <br>   &lt;li&gt;Step 1 &lt;/li&gt; <br>   &lt;li&gt;Step 2 &lt;/li&gt;
        <br>   &lt;li&gt;Step 3 &lt;/li&gt; <br> &lt;/ol&gt; </pre></td>\r
        <td><img
        src="https://images.code.org/3ef357cfad8ac98a8b30beb229ebcb78-image-1473446360428.39.04
        PM.png" style="width:200px"></td>\r
        </tr>\r
        </table>\r
        \r
        </details>\r
        <details>\r
        <summary>**What
        is HTML?**</summary>\r
        Stands for Hypertext Markup Language. HTML is used
        to add structure to the content of a web page. HTML uses tags to specify where
        certain structures start and end. These tags are sets of characters not found
        in the English language so that the content and structure can be differentiated.
        \r
        </details>\r
        <details>\r
        <summary>**What is an HTML element?**</summary>\r
        A
        piece of a website. Marked by a start tag and sometimes closed with an end
        tag. Also includes the content of the element as well. For example:<br>\r
        \r
        <img
        src="https://images.code.org/fb4df62aa4d879f7021c567be2e28eea-image-1481135855001.png"
        style="width:500px">\r
        </details>\r
        <details>\r
        <summary>**What is an
        HTML tag?**</summary>\r
        The special set of characters that tells the machine
        where the start or end of an HTML element is and what type it is. HTML tags
        add structure to the content of a web page.\r
        </details>\r
        </div>\r
        \r
        #
        Unordered Lists\r
        \r
        Now that you have the basic layout for your Recipe
        page you need two lists. An ingredients list and a directions list. Start
        by trying to create the ingredients list. All text on your web page should
        go inside one type of HTML element (header, list, or paragraph).\r
        \r
        #
        Do This\r
        Under your ingredients header create an unordered list of ingredients.
      CSDU2 - Using Your Colors_markdown_instruction: |-
        # Using Your Font\r
        \r
        There
        are other uses for the `<link>` element.  The `<link>` element also used to
        import your chosen fonts. Since you will be using a font not from the typical
        five font families, the browser needs to have a fall back plan in case it
        can't load the font you wanted. To do this a back up font name is given.\r
        \r
        For
        Example:\r
        <pre>\r
        font-family: 'Cabin', sans-serif;\r
        </pre>\r
        \r
        The
        font you want to use is listed first in `''` and then after a comma a back
        up font from the 5 normal font families is give.\r
        \r
        # Do This\r
        Set up
        your style rules to use your fonts you picked out.\r
        \r
        * Open the <a href="https://studio.code.org/s/csd2/stage/10/puzzle/3"
        target="_blank">level where you chose your fonts. </a>\r
        * Open the link
        for each of your chosen fonts.\r
        * For each font:\r
        \t* Click <img src="https://images.code.org/91720f2ecae50e22d3287a92e988ee35-image-1475609982999.39.20
        PM.png" style="width:130px"> at the top right of the page.\r
            * That
        will pop up a tab at the bottom. Click on the tab to open it. The pop up will
        contain the link tag as well as the style rule for your font-family.\r
            <img
        src="https://images.code.org/1e8712c56112e85157da093349f4b93d-image-1475610080515.40.26
        PM.png" style="width:330px">\r
            * Copy the link tag in the `<head>`
        element of your index.html file.\r
            <img src="https://images.code.org/65fe1b66992e199f7c82c1f59c98cac5-image-1475610080516.40.38
        PM.png" style="width:330px">\r
            * Copy the style property example into
        your style.css file for later use. There is a block comment where you can
        copy it for keeping. You can determine where it goes on the next level.\r
           <img
        src="https://images.code.org/da2f5cdec56681e0e8fa161bdf40d7a0-image-1475610080516.40.43
        PM.png" style="width:330px">
      CSDU2 - Using Your Font_markdown_instruction: |-
        # Using Your Font\r
        \r
        There
        are other uses for the `<link>` element.  The `<link>` element is also used
        to import your chosen fonts. Since you will be using a font not from the typical
        five font families, the browser needs to have a fall back plan in case it
        can't load the font you wanted. To do this a back up font name is given.\r
        \r
        For
        Example:\r
        <pre>\r
        font-family: 'Cabin', sans-serif;\r
        </pre>\r
        \r
        The
        font you want to use is listed first in `''` and then after a comma a back
        up font from the 5 normal font families is give.\r
        \r
        # Do This\r
        Set up
        your style rules to use your fonts you picked out.\r
        \r
        * Open the <a href="https://studio.code.org/s/csd2/stage/10/puzzle/3"
        target="_blank">level where you chose your fonts. </a>\r
        * Open the link
        for each of your chosen fonts.\r
        * For each font:\r
        \t* Click <img src="https://images.code.org/91720f2ecae50e22d3287a92e988ee35-image-1475609982999.39.20
        PM.png" style="width:130px"> at the top right of the page.\r
            * That
        will pop up a tab at the bottom. Click on the tab to open it. The pop up will
        contain the link tag as well as the style rule for your font-family.\r
            <img
        src="https://images.code.org/1e8712c56112e85157da093349f4b93d-image-1475610080515.40.26
        PM.png" style="width:330px">\r
            * Copy the link tag in the `<head>`
        element of your index.html file.\r
            <img src="https://images.code.org/65fe1b66992e199f7c82c1f59c98cac5-image-1475610080516.40.38
        PM.png" style="width:330px">\r
            * Copy the style property example into
        your style.css file for later use. There is a block comment where you can
        copy it for keeping. You can determine where it goes on the next level.\r
           <img
        src="https://images.code.org/da2f5cdec56681e0e8fa161bdf40d7a0-image-1475610080516.40.43
        PM.png" style="width:330px">
      CSDU2 - Validator Extension_markdown_instruction: |-
        # Favorite Places\r
        \r
        Lets
        start a new page. This page will be about your favorite places to spend time.
        This could be on your block, in your city or even somewhere you like to go
        on vacation.\r
        \r
        # Do This\r
        \r
        * Add &lt;!Doctype&gt;, &lt;html&gt;,
        &lt;head&gt;, &lt;title&gt; tags to set up your page correctly from the beginning.\r
        *
        Use header and list elements to make a page describing your favorite places.\r
        \r
        #
        Checklist\r
        * At least 1 header\r
        * At least 1 list\r
        * Description of
        each of your favorite places\r
        * Consistency tags used correctly - &lt;!Doctype&gt;,
        &lt;html&gt;, &lt;head&gt;, and &lt;title&gt;
      CSDU2 - Welcome-to-Weblab_markdown_instruction: |-
        # Welcome to Web Lab!\r
        \r
        Stuff\r
        \r
        #
        Do This\r
        \r
        * Thing 1\r
        * Thing 2
      CSDU2 - add header to content_markdown_instruction: |-
        # Adding Content Part
        2\r
        \r
        Let's add some headers to the document.\r
        \r
        # Do This\r
        \r
        *
        Add a "Favorite Animal" title above your paragraph about your favorite animal.\r
        *
        Add a "Favorite Way to Travel" title above your paragraph about your favorite
        way to travel (car, plane, train, etc.).
      CSDU2 - body tags_markdown_instruction: |-
        # Body Element\r
        \r
        As mentioned
        on the last level the `<body>`element can be useful for more than breaking
        up your code. What if you wanted to put a background color on the whole page?
        Since the `<body>` element contains all the content of the web page, styling
        its `background-color` property will give the whole page a background color.\r
        \r
        #
        Do This\r
        \r
        * Use a selector for the `<body>` element to set the `background-color`
        of the page to something other than white
      CSDU2 - font properties_markdown_instruction: |-
        # Font Properties\r
        The way
        text looks is called a font. Two properties that control font are `font-family`
        and `font-size`.\r
        \r
        ## font-family\r
        There are 5 fonts that will look
        the same across any browser:\r
        \r
        * serif\r
        * sans-serif\r
        * monospace\r
        *
        cursive\r
        * fantasy\r
        \r
        We will focus on using those font families to
        start. To read more about font families you can go to <a href="http://www.w3schools.com/cssref/pr_font_font-family.asp">
        W3 Schools - CSS font-family</a>\r
        \r
        ## font-size\r
        There are many values
        that can be used to determine font-size. Pixels are the easiest to use. A
        pixel is one tiny square on the screen. So when a font is 14px that means
        its 14 pixels tall.\r
        \r
        For more details on font properties go to <a href="http://www.w3schools.com/cssref/pr_font_font-size.asp">W3
        Schools - font-size</a>.\r
        \r
        # Do This\r
        \r
        * Add a font-family property
        to h1 style to make the font cursive\r
        * Make the text in all the paragraph
        elements larger.
      CSDU2 - head and body tag intro_markdown_instruction: |-
        <div style="float:
        right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px">\r
        <details>\r
        <summary>**Why
        do I need to structure the HTML document this way?**</summary>\r
        Although
        many modern web browsers can make good assumptions about what language you
        are writing in and where to find different information in your document, you
        don't want to leave the display of you web page up to chance. To guarantee
        the best results for displaying your web page on all computers you need to
        assist the computer in figuring out where to find information. <br> <br>\r
        \r
        As
        you go forward you are going to need two different sections in your HTML file.
        They will serve different purposes.\r
        <br><br>\r
        1. Content of the page<br>\r
        2.
        Information about the page<br>\r
        <br>\r
        By breaking up a web page this way
        it is clear where to find the code that is creating the physical output on
        the web page and which code is just information for the computer about the
        page.<br><br>\r
        \r
        In creating web pages we differentiate between these
        two areas using the &lt;head&gt; and &lt;body&gt; elements. The &lt;head&gt;
        element contains all the information about the page.  The &lt;body&gt; element
        contains all the content for a web page.\r
        \r
        </details>\r
        \r
        <details>\r
        <summary>**What
        is a head element?**</summary>\r
        The &lt;head&gt; element contains all the
        information about the page. This is extra information that is helpful for
        the computer in displaying your web page but is not the physical content of
        the web page. \r
        \r
        The &lt;head&gt; element usually comes above the body
        element but inside the &lt;html&gt; element. For right now it will be blank
        but later we will learn important things that are added to the head.\r
        </details>\r
        \r
        <details>\r
        <summary>**How
        is the head element different than the header elements? **</summary>\r
        The
        header elements (&lt;h1&gt; to &lt;h6&gt;) are used to display headers directly
        on your web page for your user to see. The head tag marks the information
        that is not user facing in your HTML document. \r
        </details>\r
        \r
        <details>\r
        <summary>**What
        is the body element? **</summary>\r
        \r
         The &lt;body&gt; element contains
        all the content for a web page.  The HTML elements for your headers, paragraphs,
        and lists should all go inside the &lt;body&gt; element.\r
        \r
        </details>\r
        </div>\r
        \r
        #
        Head and Body\r
        \r
        Format your HTML document with two sections using the
        &lt;head&gt; and &lt;body&gt; elements as shown in the image below. From this
        point forward anything you add to an HTML document should go inside either
        the &lt;head&gt; or the &lt;body&gt; elements. Put all the content and structure
        you have created so far inside the &lt;body&gt; element.\r
        \r
        <img src="https://images.code.org/2513d8f7c31e76c2ee5427e512a54a1c-image-1481559174341.png"
        style="width:300px">
      CSDU2 - head body_markdown_instruction: |-
        # Head and Body\r
        \r
        There are now
        two different sections of code in our HTML file:\r
        \r
        1. Content of the
        page\r
        2. Information about the page (for right now just how to style it).\r
        \r
        In
        creating web pages we differentiate between these two areas using the &lt;head&gt;
        and &lt;body&gt; elements. These elements are important for creating maintainable
        code but will also be useful for other things as well. The &lt;head&gt; element
        contains all the information about the page, also sometimes called **metadata**.  The
        &lt;body&gt; element contains all the content for a web page.\r
        \r
        Outline
        of the structure of your web page:\r
        \r
        <pre>\r
        &lt;!DOCTYPE html&gt;\r
        &lt;html&gt;\r
        \t&lt;head&gt;\r
        \t\t&lt;style&gt;\r
            \t\t&lt;!--Styling
        Goes Here--&gt;\r
        \t\t&lt;/style&gt;\r
        \t&lt;/head&gt;\r
        \r
        \t&lt;body&gt;\r
        \t\t&lt;!--Content
        Goes Here--&gt;\r
        \t&lt;/body&gt;\r
            \r
        &lt;/html&gt;\r
        </pre>\r
        \r
        \r
        #
        Do This\r
        \r
        * Add a &lt;head&gt; element surrounding the styling for the
        web page.\r
        * Add a &lt;body&gt; element surrounding the content for the
        web page.
      CSDU2 - image properties_markdown_instruction: |-
        # Image Properties\r
        \r
        Images
        elements also have properties that can change their style.\r
        \r
        ## Size\r
        One
        of the image properties is size. You can control size of an image using the
        `width` and `height` properties. The size is determined by the number of pixels
        tall and wide an image is. Pixels is abbreviated to `px`.  For example to
        make all the images 100 pixels wide you would use:\r
        \r
        <pre>\r
        img {\r
        \twidth:
        100px;\r
        }\r
        </pre>\r
        \r
        Although you can control both width and height
        it is best practice to only set either width and height since setting both
        can distort the image.\r
        \r
        \r
        \r
        ## Borders\r
        Borders are a common property
        for many elements including images. Borders consist of three properties: `border-style`,
        `border-width` and `border-color`.\r
        \r
        <pre>\r
        img {\r
              border-style:
        dashed;\r
              border-width: 5px;\r
              border-color: blue;\r
        }\r
        </pre>\r
        \r
        For
        more information about borders go to <a href="http://www.w3schools.com/css/css_border.asp">
        W3 Schools - Border Properties</a>.\r
        \r
        # Do This\r
        \r
        * Add a rule to
        style img elements\r
        * Use the rule to set the width of all images to 200
        pixels\r
        * Add borders to all images. Be creative and try different border
        styles and colors.
      CSDU2 - ordered Lists_markdown_instruction: |-
        <div style="float: right; height:
        250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px">\r
        <details>\r
        <summary>**What
        are the two types of lists?**</summary>\r
         There are two types of lists in
        HTML, ordered and unordered lists.\r
        </details>\r
        <details>\r
        <summary>**What
        is an unordered list?**</summary>\r
        An unordered list is just a set of bulleted
        items.\r
        </details>\r
        <details>\r
        <summary>**How do I make an unordered
        list?**</summary>\r
        \r
        An unordered list element has the tag &lt;ul&gt;
        . Notice that this is an abbreviation for <strong>U</strong>nordered <strong>L</strong>ist.
        Each item on the list is marked by a list item element &lt;li&gt;. Notice
        that this is also an abbreviation for <strong>L</strong>ist <strong>I</strong>tem.  The
        list item element is a child element which means that you don't use it on
        its own. It is contained inside a list element. It can be helpful to indent
        your &lt;li&gt; tags so its clear that is contained in the &lt;ul&gt; tags.\r
        \r
        <table
        border="1">\r
        <tr>\r
        <td>Example</td>\r
        <td>Result</td>\r
        </tr>\r
        <tr>\r
        <td><pre>
        &lt;ul&gt; <br>   &lt;li&gt;Red &lt;/li&gt; <br>   &lt;li&gt;Green &lt;/li&gt;
        <br>   &lt;li&gt;Blue&lt;/li&gt; <br> &lt;/ul&gt; </pre></td>\r
        <td><img
        src="https://images.code.org/25d4dfc9b6c448d0da305df66aa1dfb7-image-1473444368948.05.32
        PM.png" style="width:200px"></td>\r
        </tr>\r
        </table>\r
        \r
        </details>\r
        <details>\r
        <summary>**What
        is an ordered list?**</summary>\r
        An ordered list is a set of bulleted items
        which are numbered.\r
        </details>\r
        \r
        <details>\r
        <summary>**How do I
        make an ordered list?**</summary>\r
        \r
        An ordered list element has the tag
        &lt;ol&gt; . Notice that this is an abbreviation for <strong>O</strong>rdered
        <strong>L</strong>ist. Each item on the list is marked by a list item element
        &lt;li&gt;. Notice that this is also an abbreviation for <strong>L</strong>ist
        <strong>I</strong>tem.  The list item element is a child element which means
        that you don't use it on its own. It is contained inside a list element.
        It can be helpful to indent your &lt;li&gt; tags so its clear that is contained
        in the &lt;ul&gt; tag.\r
        \r
        <table border="1">\r
        <tr>\r
        <td>Example</td>\r
        <td>Result</td>\r
        </tr>\r
        <tr>\r
        <td><pre>
        &lt;ol&gt; <br>   &lt;li&gt;Step 1 &lt;/li&gt; <br>   &lt;li&gt;Step 2 &lt;/li&gt;
        <br>   &lt;li&gt;Step 3 &lt;/li&gt; <br> &lt;/ol&gt; </pre></td>\r
        <td><img
        src="https://images.code.org/3ef357cfad8ac98a8b30beb229ebcb78-image-1473446360428.39.04
        PM.png" style="width:200px"></td>\r
        </tr>\r
        </table>\r
        \r
        </details>\r
        <details>\r
        <summary>**What
        is HTML?**</summary>\r
        Stands for Hypertext Markup Language. HTML is used
        to add structure to the content of a web page. HTML uses tags to specify where
        certain structures start and end. These tags are sets of characters not found
        in the English language so that the content and structure can be differentiated.
        \r
        </details>\r
        <details>\r
        <summary>**What is an HTML element?**</summary>\r
        A
        piece of a website. Marked by a start tag and sometimes closed with an end
        tag. Also includes the content of the element as well. For example:<br>\r
        \r
        <img
        src="https://images.code.org/fb4df62aa4d879f7021c567be2e28eea-image-1481135855001.png"
        style="width:500px">\r
        </details>\r
        <details>\r
        <summary>**What is an
        HTML tag?**</summary>\r
        The special set of characters that tells the machine
        where the start or end of an HTML element is and what type it is. HTML tags
        add structure to the content of a web page.\r
        </details>\r
        </div>\r
        \r
        #
        Ordered Lists\r
        \r
        Create an ordered list for each step in your recipe under
        the Directions header
      CSDU2 - p tags_markdown_instruction: |-
        # Background Color\r
        \r
        Another common
        CSS property used to style pages is `background-color`. This property will
        set the background color of a specific element.  You can use any of the CSS
        colors for background color.\r
        \r
        For example the code below will set the
        text color of all h1 elements to blue and the background color to red.\r
        \r
        <pre>\r
        h1
        {\r
        \tcolor: blue;\r
        \tbackground-color: red;\r
        }\r
        </pre>\r
        \r
        # Do
        This\r
        Try out the `background-color` property with paragraphs.\r
        \r
        *
        Give all the paragraphs (`<p>`) elements a background color of your choice.
      CSDU2 - testing something_markdown_instruction: |-
        # Welcome to Web Lab!\r
        \r
        HTML
        is a language to express content on the web. HTML stands for Hypertext Markup
        Language. This means you are just using special sets of characters to define
        the content of a website.\r
        \r
        The platform you are in is called Web Lab.
        It lets you write HTML on one side of the screen and see the results on the
        other.\r
        \r
        # Do This\r
        \r
        * Use the Inspector Tool to find where the
        HTML code for “Welcome to Web Lab” appears.\r
        * Try to change the text from
        "Welcome to Web Lab" to something different.\r
        * Try typing something else
        on the page and see what happens.
      CSDU2 - text properties_markdown_instruction: |-
        # Text Properties\r
        \r
        Color
        properties are just one type of property. Another is text properties. Text
        properties can be used on an text element (`<p>`, `<h1>` to `<h6>`, `<ul>`,
        `<ol>`, `<li>`).\r
        \r
        * text-align - sets the horizontal (side to side)
        position of the text within each line\r
        * text-decoration - can add a line
        above, below or through the text\r
        \r
        For more details on text properties
        go to <a href="http://www.w3schools.com/cssref/pr_text_text-decoration.asp">W3
        Schools - Text Decoration</a> or <a href="http://www.w3schools.com/cssref/pr_text_text-align.asp">W3
        Schools - Text Align</a>.\r
        \r
        Example:\r
        \r
        The below example will make
        all the paragraphs be right aligned with a green text color and a line through
        all the text.\r
        <pre>\r
        p {\r
        \ttext-decoration: line-through;\r
        \tcolor:
        green;\r
            text-align: right;\r
        }\r
        </pre>\r
        \r
        # Do This\r
        Read the
        W3 resources and figure out how to add the following styles on your page.\r
        \r
        *
        Add an underline to all of the smaller headers by using the text-decoration
        property.\r
        * Use the “text-align” property on paragraphs to align them on
        the page so that each line has the same width.
      CSDU2 - title element in head_markdown_instruction: |-
        # Title Element\r
        \r
        One
        piece of metadata that should be included in every web page you create is
        the website title. Although you may put an `<h1>` element on your page content
        with the title of your website, the computer does not necessarily know that
        is the title as there may be multiple `<h1>` tags on your page.\r
        \r
        To
        make clear what the title of a website is for the computer the `<title>` element
        is added as metadata in the `<head>` element.  This title is not displayed
        on the page anywhere as a result of the title tag but the browser may use
        it to put a name in the tab of your web browser or when someone searches for
        your website.\r
        \r
        Example:\r
        <pre>\r
        &lt;head&gt;\r
        \t&lt;title&gt;
        My Website Title&lt;/title&gt;\r
        &lt;/head&gt;\r
        </pre>\r
        \r
        # Do This\r
        \r
        *
        Add a `<title>` element with the name of the web page inside the `<head>`
        element
      CSDU2 - website comp_markdown_instruction: |-
        # Comparing Websites\r
        \r
        **Prompt:**
        Imagine you have a new puppy at home who has chewed through her old leash.
        Decide between which of these two websites you would ultimately decide to
        buy your puppy’s new leash. Why?\r
        \r
        * Website 1: <a href="https://thimbleprojects.org/nickianselmo/84613/">
        Uncle Joe's Pet Store</a>\r
        * Website 2: <a href="http://www.petsmart.com/">
        PetSmart</a>\r
        \r
        Write your answer in the box below. When you are done
        wait for directions from your teacher before moving on.
      CSDU2 Color Blindness_markdown_instruction: |
        # Color Blindness Filter\r
        \r
        \r
        \r
      CSDU2 IP Add Images_markdown_instruction: |-
        # Adding Your Images\r
        \r
        With
        images and attribution information in hand, it's time to spruce up your new
        page.\r
        \r
        # Do This\r
        \r
        Upload your images to Web Lab and, using `<img>`
        tags, add them where you'd like them to go. For each image:\r
        \r
        * Add
        a descriptive `alt` attribute\r
        * Add attribution underneath the image, including\r
        \t*
        Name or screenname of author (if available)\r
            * Title of image (if available)\r
            *
        Link to original site (you can make the whole attribution text a link)\r
            *
        License image was published under either in text (eg CC-BY) or using a badge
        from the [Creative Commons website](https://creativecommons.org/about/downloads/).\r
        \r
        For
        example\r
        \r
        ![Sad Dog](https://upload.wikimedia.org/wikipedia/commons/thumb/b/b2/Longhaired_Dachshund_portrait.jpg/629px-Longhaired_Dachshund_portrait.jpg)\r
        \r
        [Longhaired
        Dachshund portrait by Flickr user Soggydan](https://commons.wikimedia.org/wiki/File:Longhaired_Dachshund_portrait.jpg)
        - CC-BY
      CSDU2 IP Final Touches_markdown_instruction: |-
        # Finishing Touches\r
        \r
        You
        have the content, you have pretty images, now put the finishing touches on
        your page.\r
        \r
        # Do This\r
        \r
        Make sure you page meets the checklist
        below then make this page your own and get it ready for publishing. Specifically,
        consider the following:\r
        \r
        * **Styling:** Add new style rules to your
        CSS file and give your page some flair.\r
        * **Organization**: Does the structure
        of your content make it easy for users to find the information you want them
        to see?\r
        * **Publishing Review**: Use your Web Development Practices to
        review your site for publishing readiness.\r
        \r
        If you made improvements
        to your home page ake sure to take a screenshot of your home page and save
        it somewhere on your computer so you can find it later (*Need help with how
        to screenshot? Check out this <a href="http://www.take-a-screenshot.org/">website
        </a>.*)\r
        \r
        ## Checklist\r
        \r
        * There is a separate HTML file for your
        cause site with a descriptive name\r
        * The web page has a title, viewpoint,
        and description\r
        * The web page is linked to your stylesheet for your website.
        \r
        * A first level header with a catchy title for your page\r
        * A second
        level header for each separate argument to support your cause\r
        * Paragraphs
        of content under each second level header\r
        * A link to the appropriate site
        where you need to cite outside sources\r
        * All images you are using are uploaded
        into your web lab project\r
        * All images have a descriptive alt attribute\r
        *
        All images have attribution underneath the image, including:\r
        \t* Name or
        screenname of author (if available)\r
        \t* Title of image (if available)\r
        \t*
        Link to original site (you can make the whole attribution text a link)\r
        \t*
        License image was published under either in text (eg CC-BY) or using a badge
        from the Creative Commons website.
      CSDU2 IP Portfolio_markdown_instruction: |-
        # Cause Page\r
        \r
        Let's start
        by setting up the page you will be using to create your cause page.\r
        \r
        #
        Do This\r
        \r
        * Add a new HTML file to your project for your cause page.\r
        *
        Add a title, viewport, and description\r
        * Link the style sheet for your
        website to the cause page
      CSDU2 IP Research Content_markdown_instruction: |-
        # Adding Your Content\r
        \r
        You
        should now have found a handful of websites that you can use to help make
        your case for the cause you've chosen. If not, keep on researching! Otherwise
        it's time to start structuring the content of your page.\r
        \r
        ## Hyperlinks
        to Websites\r
        \r
        Earlier in the unit you learned how to use the `<a>` element
        to link between pages on your website. You can also use this element to link
        to other websites. To do this the `href` attribute needs to contain the full
        URL of the site you wish to link to. For example if I wanted to link to the
        Code.org website in my project I would use the following code:\r
        \r
        | Code
        | Output|\r
        | ---- | ----- |\r
        | <pre> My favorite coding site is &lt;a
        href="https://code.org/" &gt; Code.org &lt;/a &gt; ! </pre> | My favorite
        coding site is <a href="https://code.org/"> Code.org </a> ! |\r
        \r
        # Do
        This\r
        \r
        The specifics of your page layout will depend on your topics and
        goals, but in general you should create the following structure\r
        \r
        * A
        first level header with a catchy title for your page\r
        * A second level header
        for each separate argument to support your cause\r
        * Paragraphs of content
        under each second level header\r
        * A link to the appropriate site where you
        need to cite outside sources\r
        * Don't worry about styling right now you
        are just getting the content\r
        \r
        Attribution links can take many forms,
        for example\r
        \r
        * According to the [ASPCA](http://www.aspca.org/animal-homelessness)
        only 10% of animals entering shelters have been spayed or neutered.\r
        * Kill
        shelters euthanize 2.7 million animals per year (Source: [ASPCA](http://www.aspca.org/animal-homelessness)).
      CSDU2 Make Your Logo_markdown_instruction: |-
        # Create a Logo\r
        \r
        You will
        also need a logo for your brand. Get creative and create something that really
        is you. Remember you probably want to use your colors and fonts as you design
        your logo. If the tools does not have your exact font find something close.\r
        \r
        #
        Do This\r
        \r
        * Use the tool linked below to **create a logo for your brand**\r
        *
        **Hint:** The color picker on this site uses a different encoding called hex.
        Your color picker gave you those values as well. They are the first encoding
        with numbers and letters in it. They start with the # symbol.\r
        * **Save
        that logo somewhere on your computer** so you can use it later.
      CSDU2 Pick Your Colors_markdown_instruction: |-
        # Pick Your Colors\r
        \r
        Another
        component of creating your brand is picking the colors for your brand. These
        should be colors that stand out but also look good together. You want your
        users to enjoy looking at your page. You will want to keep your set of colors
        small so that the combination is memorable. A set of 4 main colors or less
        for your page will be a good place to start. Different shades of those colors
        can be used as well.\r
        \r
        # Do This\r
        \r
        * Go to the <a href="http://paletton.com/">
        Paletton </a> website.\r
        * Decide how many primary colors you want for your
        brand.\r
        * Set the number of primary colors useing these buttons <img src="https://images.code.org/669d2fe15825ea753f804ebb690aab95-image-1475594935612.28.22
        AM.png" style="width:150px">. The number of dots shows the number of primary
        colors.\r
        * Play with dragging around the dots to find the primary colors
        you like. The one that takes up the biggest box on the right will be your
        primary color.\r
        \r
        <img src="https://images.code.org/b5811cea1acf1bf281ab73661db4b7cb-image-1475595405528.gif"
        style="width:400px">\r
        \r
        * Once you have picked your colors click <img
        src="https://images.code.org/3d30144dbe0cadc9bd083f1967e66b20-image-1475595929655.44.22
        AM.png" style="width:100px"> which is below the color boxes on the right.\r
        \r
        *
        A list like the one below will show up click on **"as Text"** below the
        Color List header.\r
        \r
        <img src="https://images.code.org/d39c3112948cd860148f2228f5b1c45a-image-1475595929655.44.43
        AM.png" style="width:150px">\r
        \r
        * A page that looks like the one below
        will open. **Copy the text from this page into the box below.** This will
        give you the RGB values for the colors as well as hex codes which you may
        want on the next level.\r
        \r
        <img src="https://images.code.org/731d2612a1ccb47a4db8085abe910266-image-1475596945480.02.14
        PM.png" style="width:400px">
      CSDU2 Pick Your Fonts_markdown_instruction: |-
        # Pick Your Fonts\r
        \r
        Part
        of any good brand is having a specific font that is associated with the brand.
        Most brands keep to a small set of fonts they use. These fonts however are
        unique to the brand and will need to adventure beyond the 5 font families
        you have been using.\r
        \r
        Picking a small set of fonts for your website
        is also a good practice as when you adventure beyond the 5 font families into
        other fonts the browser has to download the font file. Downloading files is
        something that can add time to how long it takes to your load your website.
        To prevent it from taking too long it is good to stay with just 2 different
        fonts.\r
        \r
        # Do This\r
        \r
        * Go to the <a href="http://fontpair.co/"
        target="_blank">Font Pair </a> website. The website lists sets of heading
        and body font pairs that work nicely together. Each pair is listed like the
        image below.\r
        \r
        <img src="https://images.code.org/7f34c1986c16fbb50e2acc4f72923b60-image-1475593488897.03.00
        AM.png" style="width:400px">\r
        \r
        * Pick a font set you like.\r
        * Copy
        the heading and body font names.\r
        \r
        <img src="https://images.code.org/879b3b41486f728fbb8840469277704e-image-1475594076521.png"
        style="width:400px">\r
        \r
        * Click the link to each font. This should take
        you to a google fonts page.\r
        \r
        <img src="https://images.code.org/6163e64372d8825a7a8ed6a943cb3701-image-1475594076522.png"
        style="width:400px">\r
        \r
        * Copy the URL for the google fonts page into
        the box below so they will be saved for later. An example is below.\r
        \r
        <img
        src="https://images.code.org/92e66b9ffae4d836175d63d87ab5586c-image-1475594389964.17.58
        AM.png" style="width:400px">
      CSDU2 RGB Color Matching_markdown_instruction: |
        # RGB Colors\r
        \r
        All colors,
        whether they have names or not, can be described by the level of red, green,
        and blue light it takes to make them.  This is called an RGB value (short
        for Red-Green-Blue).  You can use the widget on your left to try out different
        RGB values and see what colors they make.\r
        \r
        * **Click "Run" to start
        the widget on the left,** and use the sliders to adjust the levels of red,
        green, and blue light.\r
        * For each of the colors below, match it to its
        RGB value. Type your response in the box below.\r
        \r
        A) red: 216, green:
        191, blue: 216 - rgb(216,191,216)\r
        \r
        B) red: 255, green: 239, blue: 213
        - rgb(255,239,213)\r
        \r
        C) red: 255, green: 140, blue: 105 - rgb(255,140,105)\r
        \r
        D)
        red: 123, green: 104, blue: 238 - rgb(123,104,238)\r
        \r
        E) red: 107, green:
        142, blue: 35 - rgb(107,142,35)\r
      CSDU4 - AppLab - 1_markdown_instruction: |
        # Documentation\r
        As we move forward
        you are going to see more and more (and more!) commands added to the toolbox.  What
        happens if you see a command and don't understand it, or you forget how it
        works?  Don't worry, this happens to professional programmers all the time!
        No one actually memorizes long lists of commands.  Most programming environments
        have ways to quickly look up documentation about the commands of the language
        you're using.  **Good news: App Lab has documentation too!**\r
        \r
        ![](https://images.code.org/3fe10e1b65edb37306099098161be001-image-1441990727053.gif)\r
        \r
        When
        you **hover your mouse over a command** in the block palette a bubble pops
        up with a quick reminder of what a function does, and what its parameters
        are. If you click "See examples", you will be taken to more detailed documentation
        of the command which includes **code examples** that you can even copy and
        paste.\r
      CSDU4 - AppLab - 2_markdown_instruction: |-
        # Assigning User Input to Variables\r
        <img
        src="https://images.code.org/bad81f7d5e514a1d727e51aab52aac10-image-1445552999503.gif"
        style="width: 350px; float:right">\r
        The `promptNum` command appears in
        the variables toolbox because it's typically used as a way to get a value
        from the user that you want to hold on to while the program runs.\r
        \r
        `promptNum`
        is similar to `randomNumber` in that it is a function whose return value *evaluates
        to a number*. The difference here is that `promptNum` pops up an input dialog
        box and waits for the user to type a number.  Once they do and hit "OK"
        the number they typed is returned and we can store it in a variable to use
        in our programs.
      CSDU4 - AppLab - 3_markdown_instruction: |-
        # Debug Console: Variable Values\r
        \r
        Up
        until now, if we wanted to find out the value of a variable at some point
        in the execution of a program, we've used `console.log`. That is still going
        to be a great strategy but **the Debug Console can do even more for us!**\r
        \r
        **Check
        this out:** We can check the value of a variable in real time (as our program
        executes) by typing its name into the prompt within the Debug Console and
        hitting "enter". **This is another powerful tool for debugging your programs.**
        \r
        \r
        ![](https://images.code.org/7e7ff7aa041814cfcd69a1c9a028c439-image-1446826780896.gif)
      CSDU4 - AppLab - 4_markdown_instruction: |-
        # Debug Commands\r
        \r
        <img src="https://images.code.org/c6322845b96b70c9083a6c62736048e5-image-1446739268136.00.34
        AM.png" style="width: 200px; float: right">\r
        \r
        Check out the new **Debug
        Commands toolbox** that has appeared next to the Debug Console! These powerful
        tools allow us to **pause a program at a certain point** while it’s running
        and then execute lines one at a time. \r
        \r
        Using these tools we can investigate
        the state of variables and other elements of the program at any point, mid-execution.
        This makes it much easier to see what’s happening while the programming is
        actually running!\r
        \r
        In order to use the debug commands, you first have
        to indicate which line you want the program to pause at.  This is called adding
        a “breakpoint” (see animation below).\r
        \r
        # Do This:\r
        \r
        * **Add a breakpoint**
        on the line where the `while` loop starts. (**Just click the line number.**)\r
        *
        **Use the <img src="https://images.code.org/bd8f1a67242e64e6b3740eac79f881e8-image-1446748421345.33.09
        PM.png" style="width: 75px"> button** to execute each line one at a time.\r
        *
        **NOTE:** If you hit <img src="https://images.code.org/6c4712da58e32dae2d04c52d9964fca9-image-1446741498097.37.48
        AM.png" style="width: 75px"> it will "continue" executing the program
        normally, unless of course it hits another breakpoint. \r
        \r
        ![](https://images.code.org/68f8e185914c8cc127aa9573ae37f687-image-1446835628580.gif)
      CSDU4 - Design Mode - 1_markdown_instruction: |-
        <img src='https://images.code.org/3fad83213ae72073251c4d5abc1f048a-image-1444060521578.png'
        style='float: right; width: 250px'> A new group of commands has been added
        to the toolbox called **UI Controls** (User Interface Controls) which are
        commands that let you interact with, and respond to, the user of your app.
        To keep it simple, we'll start with just two commands: \r
        * `onEvent` which
        lets you run a function in response to some event occuring (such as a button
        click).\r
        * `button` which puts a button on the screen.
      CSDU4 - Design Mode - 10_markdown_instruction: |
        # New Elements and Events:
        Moving Buttons with Events\r
        \r
        Over the next few exerises we will be exploring
        several new user interface elements and event types. Your code will be pulled
        forward as you progress through the exercises.\r
        \r
        **Moving Past Turtle:**
        We've been using buttons to move the turtle. For example, in the program
        you're about to see a button that moves the turtle to a random location on
        the screen. We're going to alter this program ** so that the button itself
        moves every time you click it**.\r
        \r
        **Notice** that this means that event
        handlers can affect the elements they are attached to, not just other elements!  This
        is an interesting technique for apps.  Now you're going to try it...\r
        \r
        #
        Do This:\r
        * **Change the ID** of the button to something descriptive and
        meaningful.\r
        * **Modify** your event handler so that **it no longer moves
        the turtle** but instead sets the position of the button itself to a random
        location on the screen.\r
        \t* TIP: add `setPosition` to the event handler,
        and just move the `randomNumber` calls from the turtle.\r
        \t* Recall the
        screen is **320 by 450 pixels**.\r
        \r
        **Before** | **After**\r
        ---|---\r
        ![](https://images.code.org/a4172e43b6707a3170e4eaf54a2a7b1d-image-1444335577799.gif)
        | <img src="https://images.code.org/4e17b077bd8fbdd43f960d26bb3d252d-image-1444335766972.gif"
        style="width: 150px">\r
        \r
        \r
      CSDU4 - Design Mode - 11_markdown_instruction: |-
        # New Elements and Events:
        New Event Types\r
        <img src="https://images.code.org/9f013bd84577eb2498061757e18a72f4-image-1444322870272.46.06
        AM.png" style="float: right">\r
        \r
        **New Events**: You may have noticed
        that the `onEvent` block has a pull-down menu for the event **type** (see
        right).\r
        \r
        # Do This:\r
        \r
        * **Experiment** with **each of the different
        types of mouse events** by selecting from the list. You can also read about
        them in the documentation.\r
        \t* click\r
            * mousemove\r
            * movedown\r
            *
        mouseup\r
            * mouseover\r
        * **Choose** the mouse event type you like most
        and change your event handler to use it.\r
        * **Note:** There are some events
        that capture keystroke events. These are interesting, but they do not work
        easily with buttons.  We'll stick to mouse events for now, and get to keys
        later.
      CSDU4 - Design Mode - 12_markdown_instruction: "# New Elements and Events:\nText
        Labels\\r\n<img src=\"https://images.code.org/20d50fd324908fc48633e1325cc37603-image-1444662791509.png\"\nstyle=\"float:
        right\">\\r\nThe UI controls toolbox contains an element called\n`textLabel`.
        A text label is what it sounds like: plain text that you can\nput in your
        app. Even though it's just plain text you can still move and\nresize it using
        `setPosition`, and you can attach event handlers to it as\nwell.\\r\n\\r\n**NOTE:**
        resizing a text label does not change the font size\nof the text.  We'll learn
        how to do that later.  "
      CSDU4 - Design Mode - 13_markdown_instruction: |-
        # New Elements and Events:
        Images\r
        \r
        <img src="https://images.code.org/a84297658be45dc78bc401d387d10436-image-1444663322356.21.25
        AM.png" style="float: right; width: 120px">\r
        Images make applications
        more visually pleasing and interactive. You can add images to your application
        using the `image` command. For now, just add an `image` element to your app
        (the default image link is the Code.org logo) and don't worry about choosing
        a unique image just yet. We'll do that in the very next exercise!
      CSDU4 - Design Mode - 15_markdown_instruction: |
        # Design Mode\r
        \r
        Welcome
        to Design Mode in AppLab! This will allow you to easily create a digital version
        of your sketched wireframes by adding UI elements from the toolbox and and
        styling them the way you want!\r
        \r
        **Goal:** Add a large red button to
        your app using Design Mode.\r
        \r
        # Do This:\r
        \r
        * **Find <img src="https://images.code.org/278f146396c80c97d0b5d73f24d48aec-image-1444335461720.png">
        in the Design Toolbox** and drag out a button and resize it. \r
        \r
        * **Change
        the button text** to say "Click Me".\r
        \r
        * **Set the color for the button**
        to be red.\r
        \r
        <img src="https://images.code.org/4cab6a5233cf07df0d8e312932762012-image-1444314797615.gif"
        style="width: 500px; float: middle">\r
      CSDU4 - Design Mode - 16_markdown_instruction: |-
        # Activate Your Button\r
        In
        the last lesson you focused on laying out a page of your app in Design Mode.
        This is a great, quick way to get the visual side of an app figured out, but
        it's not very functional. If you click any of the buttons you added, nothing
        happens. Now you're work towards adding some basic functionality by making
        the buttons in your app actually _do_ something!\r
        \r
        **Goal:** Add code
        using Design Mode to make the button respond to a click.\r
        \r
        # Do This\r
        Your
        starter app has two elements, a _label_ with the id `titleLabel` and a _button_
        with the id `changeTitleButton`. To start with, you're going to make the
        button log a message to the console when it's clicked.\r
        \r
        * In Design
        Mode, **click on the provided button to edit its properties**\r
        * Click on
        the **Events** tab\r
        * Insert an `onEvent` from Design Mode by clicking **Insert
        and show code** under the **Events Tab**.\r
        * Take a look at the block that
        was added to the **Code Mode** tab.\r
        * Run the program, click your button
        and **look for the output in the *Debug Console* **below the workspace instead
        of the app window. We will discuss the *Debug Console* on the next level.
      CSDU4 - Design Mode - 17_markdown_instruction: |
        # Updating IDs and Debugging
        with Console Log\r
        \r
        Here we have a couple buttons with event handlers
        and `console.log` statements, but they are all switched around!\r
        \r
        We
        should have given the buttons better ID names so we could tell the difference
        based on the ID. **Can you update the ID names and `console.log` messages
        to match the correct button? **\r
        \r
        # Do This\r
        \r
        * **Change the IDs**
        of the buttons in Design Mode to more descriptive names.\r
        \r
        * Switch to
        Code Mode and notice that the **ID pulldowns have been updated to include
        the new IDs**. (You still need to select the correct ID from the pulldown
        menu.)\r
        \r
        * **Update the `console.log` messages** to match the buttons.\r
      CSDU4 - Design Mode - 18_markdown_instruction: |-
        # Layering and Deleting\r
        <img
        src="https://images.code.org/9e620f70869de438c4f0c66663686876-image-1444678130772.gif"
        style="width: 200px; float: right">User interface elements can overlap one
        another, so you'll want the ability to change the order or **depth** at which
        each one is rendered. \r
        \r
        If you **scroll to the bottom of the Properties
        tab** you'll find buttons which allow you to easily **delete or change the
        depth** of an element.\r
        * **Delete an Element** by selecting it (clicking
        on it) in the design view and then clicking **Delete** in the properties tab.\r
        *
        **Change the depth** of elements by using the double or single arrows.\r

        * Click the double arrow to send all the way to front or back.\r
         * Click
        the single arrow to move up or down one layer.\r
            \r
        # Do This:\r
        \r
        Use
        the **delete** and **depth** tools to **create the "After" image**\r
        \r
        \r
        <table>\r
        <tr>\r
        \t<th
        style="text-align:center">Before</th>\r
            <th style="text-align:center">After</th>\r
        </tr>\r
        <tr>\r
        \t<td
        align=center><img src="https://images.code.org/023f749ecb58c91869a4eacab6701203-image-1444685187662.png"
        style="width:200px ; border: solid 1px black"></td>\r
            <td style="text-align:center"><img
        src="https://images.code.org/e45fc7d451c071683fd3b59466b106b0-image-1444684677212.png"
        style="width:200px; border: solid 1px black"></td>\r
        </tr>\r
        </table>
      CSDU4 - Design Mode - 19_markdown_instruction: |
        # Second Screen\r
        \r
        Most
        apps have more than one screen or page that each have different contents.
        With Design Mode you can quickly add new screen to your app.\r
        \r
        # Do This\r
        \r
        You're
        going to add a second screen to your app and add a button to that screen.
        Make sure you're using good IDs!\r
        \r
        * Drag out <img src="https://images.code.org/4337b39cfd797ed9289b70fb6cb365fb-image-1444353631083.17.39
        PM.png" style="width: 50px"> from the Design Toolbox into your app. You
        now have two screens!\r
        * Using Design Mode create a button in your new screen.  <img
        src="https://images.code.org/bbf464e2fc94bacba39407d6842f2336-image-1478300698068.04.35
        PM.png" style="width: 150px"> \r
        * Set the IDs for your screens and buttons
        to something meaningful, for example _"homeScreen"_, _"detailsScreen"_,
        _"homeButton"_, and _"detailsButton"_\r
        \r
        \r
        You can always use the
        screen dropdown menu at the top of the app window to switch between your screens
        <img src="https://images.code.org/404e0b3f520a413c8a5e62e74b70bb19-image-1478300388689.58.59
        PM.png" style="width: 150px"> \r
        \r
      CSDU4 - Design Mode - 2_markdown_instruction: "# Buttons and Unique IDs\\r\nYou\nmay
        have noticed that the button command has two parameters: `button(id, text)`.
        \ The\n`text` is the text that actually shows up on the button display, and
        the `id`\n(we'll typically write **ID**) is a **unique identifier** for that
        element\nin the app.\\r\n\\r\nEach element that appears in the app must have
        a **unique\nID**. In fact, if you try to run a program that has two buttons
        with same\nID you will get a warning message in the console. Watch:\\r\n<img
        src=\"https://images.code.org/47ec46e0563f63641cc10ef152e9f86e-image-1444074330713.gif\"\nstyle=\"border:
        solid 1px black; width:500px\">\\r\n\\r\nNotice that even though\nthe text
        on the buttons was different, the IDs were the same, which caused\nthe error
        message to show up. To get rid of that error message you will have\nto change
        the ID of the button from the default `id` to something else.\\r\n\\r\n**Error\nmessages
        happen to everyone and they are helpful!**: getting an error or warning\nmessage
        when you run your program is *not a big deal*. Programmers actually\nrely
        on error messages to tell them where and how to fix their code.\\r\nSometimes\nerror
        messages are bit cryptic: `WARNING: Line: 2: button() id parameter refers\nto
        an id (id) which already exists.` But a warning like this contains helpful\ninformation
        and clues such as the line the error occured on, or some word\nor command
        it didn't recognize. "
      CSDU4 - Design Mode - 20_markdown_instruction: |-
        # Switching Screens\r
        \r
        You
        can set which screen is showing in your app with the `setScreen()` command.
        If you're working in blocks you can select which screen you want to switch
        to from a dropdown.\r
        \r
        ![](https://images.code.org/615fae136488e1e6d1349e4383388e08-image-1478303858022.13.25
        PM.png)\r
        \r
        # Do This\r
        \r
        You'll use an `onEvent()` block with `setScreen()`
        to make the two buttons in your app switch between the two screen.\r
        \r
        *
        Drag out two `onEvent()` blocks\r
        * Set the IDs for your `onEvent()` blocks
        for each of your two buttons\r
        * Place a `setScreen` block inside each of
        the `onEvent` blocks.\r
        * Choose the appropriate screen from the dropdown
        of each `setScreen` block.\r
        * Test out your app to make sure your buttons
        let you switch back and forth between the two screens
      CSDU4 - Design Mode - 21_markdown_instruction: |
        # Adding Images\r
        Sometimes
        the functionality you want to represent in your prototype is too complicated
        to do with just the default buttons and fields. If you want to mock up more
        advanced interfaces (like a map), the easiest way to do it is with an image\r
        \r
        #
        Do This\r
        * Find and download an image of a map you like\r
        * Drag an image
        element into your app ![](https://images.code.org/cda02ffe3acc869822a551f5cdbf8606-image-1444667846363.37.14
        AM.png)\r
        * Choose your image ![](https://images.code.org/e5b9571ae54af60a3ae597b787e741ea-image-1444667688762.34.42
        AM.png)\r
        \t* **URLs** can be added directly into the "picture" field.  \r
        \t*
        **Upload images** by clicking "Choose".\r
        \t* **Note:** You can always
        see all the files you've uploaded by clicking the gear at the top of the
        toolbox. ![](https://images.code.org/53b405b771bc11bf5d24c84c878c80dd-image-1444668067826.35.10
        AM.png)\r
        * Make sure to give your image a good ID!\r
        \r
      CSDU4 - Design Mode - 22_markdown_instruction: |-
        A new command in the toolbox:
        `playsound`! Read the documentation about how to add sounds.
      CSDU4 - Design Mode - 23_markdown_instruction: |-
        # Changing Elements on Screen
        \r
        \r
        There's another way to display text in your app besides `console.log`
        and `write`.  \r
        \r
        There is a command called `setText` which will **change
        the text of a component on screen** given its id. This is a very powerful
        technique and one that you will use a lot. Here's what it looks like in action....\r
        \r
        <img
        src="https://images.code.org/3e5dd320801720d5c62a49146d9ee3d2-image-1446056202170.gif"
        style="width: 500px">\r
        \r
        Let's do a **very simple** example of using
        `setText`.
      CSDU4 - Design Mode - 24_markdown_instruction: |-
        # Text Input Elements\r
        \r
        <img
        src="https://images.code.org/4436a3ba2a7596c7724380c7c82d5c29-image-1445533665376.36.19
        PM.png" style="width: 100px; float:right;">\r
        \r
        Setting the text of
        an element is all well and good, but things are going to get really interesting
        when we can get text that a user has entered and do something with it.\r
        \r
        \r
        \r
        #
        Do This:\r
        \r
        * **Add two text input elements to this program**, one for
        the name and one for the age of the user.\r
        * **Give your text input elements
        descriptive and meaningful IDs**.\r
        * **In Design Mode** set their default
        text to prompt the user for their name and age.\r
        * **Compare your app to
        the example below**.\r
        \r
        <img src="https://images.code.org/865403f21bdb27246caeb31afa7c0b5f-image-1445902764676.39.11
        PM.png" style="float:left; width:200px;">\r
        <br>
      CSDU4 - Design Mode - 25_markdown_instruction: |
        # Getting Text Input\r
        \r
        As
        we saw a user can now type inside of a text input whenever they want, **but
        now we'll need a way to access that text**. In order to do that you'll need
        to use the `getText` command, which you can now find in the **UI Controls**
        tab.\r
        \r
        <img src="https://images.code.org/0c6774f2b6d33f8107ec2936102b1a10-image-1445533677192.58.24
        PM.png" style="width: 150px;">\r
        \r
        You can use a `getText` command just
        like a string within a `console.log` or `write` command. Just like with `setText`
        you will refer to the UI element by its ID.\r
        \r
        ![](https://images.code.org/c17e419301d0cfeebf7f0ccee13e415f-image-1445892504376.47.54
        PM.png)\r
        \r
        # Do This:\r
        \r
        * **Read the documentation **  for `getText`.\r
        *
        **Add an event handler to the Submit button** that fires when your button
        is clicked.\r
        * **Inside the event handler** place code that will **log the
        name your user input to the console**.\r
        \r
      CSDU4 - Design Mode - 26_markdown_instruction: |-
        # Saving Text Input in Variables\r
        \r
        Often
        we want to save the information we pull in from the user for later use in
        our program. The best way to do this is to save it in a variable.\r
        \r
        #
        Do This:\r
        \r
        * **Create two variables inside your event handler** to store
        the **age** and **name** of the user.\r
        * **Use `getText()` to update the
        values** stored in each of these variables.\r
        * **Change your `console.log`
        statements to use your variable instead of `getText`**.\r
        \r
        ![](https://images.code.org/ca45dcb01ae2d1956ed2f87efeda0264-image-1445976691215.11.13
        PM.png)
      CSDU4 - Design Mode - 27_markdown_instruction: |-
        # Generating Text Output\r
        \r
        So
        far we've been outputting our messages to the console, but now we'd like
        to display them in the app. In order to do so we're going to be using a new
        UI element called a **textArea**. You can use `setText()` with a **textArea**
        just like you would with a **textLabel**.\r
        \r
        ![](https://images.code.org/45e6b6cdb1ca87f53cf1d6bba97cb812-image-1445977693641.24.43
        PM.png)\r
        \r
        If we want to combine user input with default text we can do
        so with **string concatenation** (that's just a fancy phrase for combining
        strings of text). Together with a **textArea** we can use this ability to
        compose longer messages based on user input.\r
        \r
        # Do This:\r
        \r
        * **Add
        a textArea** to your app and give it a descriptive and meaningful ID.\r
        *
        **Create a variable inside your event handler** called `userMessage` to hold
        the full message that will be sent to the user.\r
        * **Use string concatenation**
        to compose a message from the user input.\r
        \t* eg `var userMessage = "Welcome
        " + userName + "!";`\r
        * **Use `setText()`** to place your `userMessage`
        inside the `textArea` you created.\r
        \r
        <img src="https://images.code.org/193af3e0c993dbf0b7af9c571ec5f56d-image-1445977696957.27.08
        PM.png", style="width:250px;">
      CSDU4 - Design Mode - 28_markdown_instruction: |
        # Introducing the  *change*
        Event\r
        Up until now you've been using the click of a button to trigger
        getting the text from an input or text area.\r
        \r
        You can use a new event
        type to get this behavior: The __'change' event__ is triggered when the
        user hits 'enter' in a text input after typing.\r
        \r
        \r
        <img src="https://images.code.org/7d1725b236471f8e2a0efed5870660da-image-1446071579670.32.36.png"
        style="width:350px;">\r
        \r
        # Do This:\r
        <img src="https://images.code.org/f8f1f7ae18acbc570a367886bcd6ca88-image-1445976541574.gif"
        style="width:250px;">\r
        - A text input has been created for you that asks
        for a user's name, as well as a label for the response\r
        - Attach a "change"
        event handler to the text input.\r
        - When the "change" event triggers,
        set the text of "nameResponse" to the user's input.\r
      CSDU4 - Design Mode - 29_markdown_instruction: |-
        # Dropdown\r
        \r
        On the last
        level we used `promptNum` to get the user's guess. However, we had no way
        to limit them to the numbers we wanted. They could have typed 11 even though
        we told them not to. A better way to get input with a limited set of options
        is the dropdown. The <img src="https://images.code.org/3b21b4288a2a155d1e9a3c2cf3a5b09b-image-1446229368079.28.23
        PM.png" style="width: 75px"> is in your Design Mode Toolbox. You can control
        the list of options users can choose and then use `getText` to get the chosen
        number.\r
        \r
        We are going to need an event handler in order to do this.
        The event handler will detect when the user has changed the value of the dropdown.
        \r
        \r
        # Do This:\r
        \r
        * **Add a dropdown** for their guess instead of
        `promptNum`. Make sure to give it a good ID.\r
        \r
        <img src="https://images.code.org/fea164f6e53d1ce0c50981565e066d4c-image-1446229598357.gif"
        style="width: 350px">\r
        \r
        * Under properties **find the Options** and
        change it to the **numbers 1 to 10**\r
        \r
        <img src="https://images.code.org/0cfecbcdcfb95fc30876155ec6a3a021-image-1446229593687.gif"
        style="width: 250px">\r
        \r
        * Add an event handler to detect the `change`
        event on your dropdown.<br><br>\r
        <img src="https://images.code.org/48cffda5b7ff3a446116a39b4dbcbe8c-image-1446232308751.gif"
        style="width: 150px; float: right">\r
        * Move your `if` statement inside
        the event handler so it will check each time the dropdown is changed.<br><br>\r
        *
        When the dropdown is changed **use `getText` to find out the user's guess**.
        Save the guess using a variable. **Don't forget about scope!**<br><br>\r
        *
        Test your app -- it should work like the demo.
      CSDU4 - Design Mode - 3_markdown_instruction: |-
        # How Do Events Work?\r
        Event-driven
        apps are made up of elements that can trigger events (such as buttons) and
        pieces of code called **event handlers**. Event handlers are commands that
        "watch" for certain events to occur in your program, and then run some function
        when an event occurs.\r
        \r
        When you first create an event handler from Design
        Mode, puts a `console.log()` block inside to help you test the event, but
        you can put just about any code you want inside the event hander.\r
        \r
        #
        Do This\r
        \r
        The toolbox has a new block called `setText` which allows you
        to change the text of an element on the screen. You're going to modify the
        button event handler so that it changes the title text when clicked.\r
        \r
        *
        Drag out a `setText()` block to the _inside_ of the `onEvent()` callback function
        (where the `console.log()` block currently is)\r
        * From the block's dropdown,
        select "titleLabel" (the id of the element you want to change)\r
        * In the
        block's second input, replace "text" with a new title for the app\r
        *
        Run your program and click the button to see it work
      CSDU4 - Design Mode - 30_markdown_instruction: |
        # Using `if` to Display Images\r
        \r
        We
        are going to set up a dice game. We want to show a picture of a single die
        for each random number generated 1 to 6. We've already set up the screen
        in Design Mode, with a button to generate the roll and an image to show a
        picture of the die.\r
        \r
        **Note:** The flowchart for the desired behavior
        is below.\r
        \r
        # Do This:\r
        \r
        * Add an event handler for the Roll! button
        so that when the button is clicked it generates a random number from 1 to
        6. \r
        \r
        * Add conditionals (`if`, `else if`, and `else`) to change the
        picture of the image (ID: `dice_image`) to display the correct side of the
        die depending on the random number generated. You will need to use <img src="https://images.code.org/89f2c13ef4ead590475c863a087597f8-image-1446535826599.30.16.png"
        style="width:150px"> with the URLs below to set the images for the die.\r
        \t*
        <img src="https://code.org/images/dice/1.png" style="width: 50px"> Dice
        1 Image URL -  https://code.org/images/dice/1.png\r
            * <img src="https://code.org/images/dice/2.png"
        style="width: 50px"> Dice 2 Image URL -  https://code.org/images/dice/2.png\r
            *
        <img src="https://code.org/images/dice/3.png" style="width: 50px"> Dice
        3 Image URL - https://code.org/images/dice/3.png\r
            * <img src="https://code.org/images/dice/4.png"
        style="width: 50px"> Dice 4 Image URL - https://code.org/images/dice/4.png\r
            *
        <img src="https://code.org/images/dice/5.png" style="width: 50px"> Dice
        5 Image URL - https://code.org/images/dice/5.png\r
            * <img src="https://code.org/images/dice/6.png"
        style="width: 50px"> Dice 6 Image URL -  https://code.org/images/dice/6.png\r
        \r
        <img
        src="https://images.code.org/392c125a2620ac4949091fc075864f4c-image-1446174585241.png"
        style="width: 100%">\r
        <a href="https://images.code.org/392c125a2620ac4949091fc075864f4c-image-1446174585241.png"
        target="_blank">Open diagram in a new tab</a>\r
      CSDU4 - Design Mode - 31_markdown_instruction: |-
        # *keypress*\r
        \r
        If we want
        to add keyboard input to our apps we'll need to learn about how key events
        work in App Lab. To start let's take a closer look at the `onEvent` block.
        We already know that event handlers call a function. What we'll see now is
        that they also **pass a parameter**. The default name for this parameter is
        simply `event` but you can change it to be anything you like. \r
        \r
        The
        `event` parameter is a more complex kind of variable (called an "Object")
        that we'll learn more about later. For now just know that for both mouse
        and keyboard events, the event parameter passes more information about the
        event. In the case of key events **you can find out the key(s) that were actually
        pressed by using `event.key`**.\r
        \r
        # Do This:\r
        \r
        * Drag out an `onEvent`
        block.\r
        * Change the ID to `screen1` and the event type to `keypress`.  \r
        \r
        <img
        src="https://images.code.org/537b5bbef3db62c90155528e6753a00a-image-1447175732347.gif"
        style="width: 450px">\r
        \r
        * Once you hit **Run**, **click on the screen
        so that the keystrokes will register**.\r
        * **Type different combinations
        of keys** and check out the results in the console. Does every key combination
        print to the console? Some keys to try:\r
            * Letter keys\r
            * Number
        keys\r
            * Shift key\r
            * Hold shift and letter\r
            * Delete key\r
            *
        Left and right arrow keys\r
            * Press and hold a key
      CSDU4 - Design Mode - 32_markdown_instruction: |-
        # Using *keyup* and *keydown*\r
        \r
        On
        the last level, we played with the `keypress` event. Let's take a look at
        some of the other key events. \r
        \r
        You are going to get the chance to play
        with `keyup` and `keydown` in this level. **Pay attention to the different
        values of `event.key` for `keydown` and `keypress`. **\r
        \r
        # Do This:\r
        \r
        *
        Switch to the event type to `keydown` or `keyup`. \r
        \r
        <img src="https://images.code.org/fa91b1a9e3240eb65ff75b381e76ce69-image-1447213909054.gif"
        style="width: 350px">\r
        \r
        * Try out the event.\r
        \t* Press and hold
        a key\r
            * Try the arrow keys\r
            * Shift\r
            * Option\r
            *
        Alt\r
            * Others
      CSDU4 - Design Mode - 33_markdown_instruction: |-
        # Play Sound With Keys\r
        \r
        You
        may have noticed from the last couple of levels that the value of `event.key`
        is just a string which is the name of the key. As a result we can check which
        key was pressed with a simple conditional statement.  For example to check
        for the press of the **"a"** key we could write `if (event.key == "a")`.\r
        \r
        #
        Do This:\r
        The **starter code provided** plays the sound whenever ANY key
        is pressed.\r
        \r
        * Use `console.log` to **find out the value of `event.key`
        when the up arrow is pressed.**\r
        \r
        * **Add an `if` statement** so the
        sound only plays when the when the **up arrow** is pressed.
      CSDU4 - Design Mode - 4_markdown_instruction: |-
        # IDs\r
        The `id` (we'll typically
        write **ID**) is a **unique identifier** used for each element in the app.\r
        \r
        Each
        element that appears in the app must have a **unique ID**. In fact, if you
        try to run a program that has two buttons with same ID you will get a warning
        message in the console.\r
        \r
        # Do This\r
        While each element you drag out
        in Design Mode gets a default ID, they aren't really that helpful (like `button1`
        and `button2`), so you should get in the habit of creating your own IDs.\r
        \r
        *
        Change the ID of your "click me" button to something useful (like `redButton`)\r
        *
        Drag out a second button\r
        * Make the second button blue and give it an ID
        of `blueButton`
      CSDU4 - Design Mode - 5_markdown_instruction: |-
        # Debugging Event-Driven Programs:
        IDs\r
        \r
        **Debugging:** As you write more complex event-driven programs,
        you'll need to polish your **debugging** skills. Debugging involves locating
        and correcting errors within a program. It is a critical (and generally unavoidable)
        step when writing code.<img src="https://images.code.org/b5d00d8027dae463eebb7f1c079cb2e2-image-1444156708725.gif"
        style="float: right; width: 200px">\r
        \r
        **Checking IDs:** Your first
        debugging task will be to verify that the button IDs match the IDs in the
        event-handlers. **Remember that IDs are case-sensitive**.
      CSDU4 - Design Mode - 7_markdown_instruction: |-
        **Logical Errors: ** Sometimes
        you can write a program that generates no errors but does not work as you
        intend. This is the result of **logical errors** in your code. These can be
        tricky to catch without knowing what your program is supposed to do in the
        first place, and usually are only found with careful testing of your app's
        functionality.\r
        <img src="https://images.code.org/b5d00d8027dae463eebb7f1c079cb2e2-image-1444156708725.gif"
        style="float: right; width: 150px">
      CSDU4 - Design Mode - 8_markdown_instruction: |-
        # Moving and Sizing Buttons\r
        \r
        An
        important component of designing intuitive and visually appealing user interfaces
        is the location of the elements on the screen. Using the `setPosition` command
        (now added to the Toolbox) you can move and set the size of user interface
        elements.\r
        \r
        ![](https://images.code.org/c3e42223cbcb096f992d758973d09f63-image-1444664597665.42.48
        AM.png)\r
        \r
        **NOTE:**\r
         * If you only want to set the size you can use
        the `setSize` function which looks like this:\r
        \r
         ![](https://images.code.org/cb742ecf96c04477db0f8361ad5dcdaf-image-1448924017288.png)\r
        \r

        * If you *only* want to set the position *without* changing the size of the
        element, you can omit the *width* and *height* parameters from the `setPosition`
        function.  To do that, you need to switch into text mode, like this:\r
        \r

        <img src='https://images.code.org/5b565ef5b74b5cd657ba15c67be92b0d-image-1448924356253.gif'
        style="width: 400px">\r
        \r
        * **Remember:** in an app screen 0,0 is the
        top left corner and you specify a location by how many pixels from the left
        and how many down from the top of the screen it is.  The screen is **320 by
        450 pixels**.
      CSDU4 - Design Mode - 9_markdown_instruction: |-
        # How to Organize the Code\r
        As
        your apps get more complex you'll have to think about how to organize your
        code so it remains readable and easy for you to locate things when debugging
        any problems.  We suggest the following convention which breaks the code into
        3 major sections:\r
        * **Top**:   code for event handlers.\r
        * **Bottom**:
        code for any other other functions you've written. (We don't have any of
        these yet.)
      CSDU4 - Design Mode Icons_markdown_instruction: |
        <img src="https://images.code.org/2b405319f597910b1563ae607958171c-image-1475866226306.49.51.png"
        style="width: 200px; float:right">\r
        \r
        # Icons\r
        Icons help users find
        the right functionality while also making your app feel more polished.\r
        \r
        #
        Do This\r
        Add a few icons to your app. For each icon:\r
        \r
        * Drag out an
        image element\r
        * Next to the "Picture" field click "Choose..."\r
        *
        Click on the "Icons" tab and select one\r
        * Make sure to give your image
        a good ID! (do we still need to say it?)\r
        \r
      CSDU4 Connecting Screens Getting Back_markdown_instruction: |-
        # Navigating Back\r
        \r
        Someone
        using your app can now get to each of the red, green, and blue pages, but
        they can't get back to the homepage. You can add buttons and event handlers
        of your own to help them do this.\r
        \r
        # Do This\r
        \r
        Create buttons and
        event handlers to help a user navigate back to the "home" screen\r
        \r
        *
        Use Design Mode to create a button inside each of the "red", "green",
        and "blue" screens. Make sure to give them descriptive IDs.\r
        * Back in
        your code drag in three `onEvent()` blocks, one for each of the three buttons
        you made.\r
        * Inside each `onEvent()` block use the `setScreen()` block that
        switches back to your "home" screen.\r
        * Test your app. You should now
        be able to navigate back to the home screen from each of the other three.
      CSDU4 Connecting Screens template_markdown_instruction: |-
        # Navigating\r
        \r
        Once
        you start adding multiple screens to an app, you need to make sure that users
        can always get where they want to go. If you forget to provide a link back
        home or to a deeper page.\r
        \r
        # Do This\r
        \r
        Here's an app with four
        different pages, but only the "red" screen is linked so far.\r
        \r
        * Add
        event handlers for "greenButton" and "blueButton" to go to their respective
        screens\r
        * From each of the sub pages, add a button with event handler to
        navigate back to the home page\r
        * Test your app thoroughly to make sure
        all of your buttons work and you can always get back home
      CSDU4 Connecting Screens_markdown_instruction: |-
        # Navigating\r
        \r
        Once you
        start adding multiple screens to an app, you need to make sure that users
        can always get where they want to go. In the next two levels you'll learn
        how to make sure a user can always get back to the "homepage" of your app.\r
        \r
        #
        Do This\r
        \r
        Here's an app with four different pages, but only the "red"
        screen is linked so far. In this level you'll make the other two buttons
        take the user to the correct screen.\r
        \r
        * Add two `onEvent()` blocks,
        one each for the "greenButton" and "blueButton"\r
        * Use the `setScreen()`
        block to make each button switch to the appropriate screen\r
        * Test your
        app to make sure both buttons work. For example, when you click the green
        button you should go to the green screen.
      CSDU4 Crowdsource App Demo_markdown_instruction: |-
        # Crowdsourcing\r
        \r
        Crowdsourcing
        apps allow multiple users to submit content for everyone to use (the _source_
        of content is the _crowd_). This app is very similar to the list app, with
        the main difference being that the list app assumes a single user while this
        app allows all users to add to the same list and "like" submissions.\r
        \r
        This
        example uses a list of crowdsourced information for simplicity, but you could
        display any kind of information in many different formats. A crowdsourcing
        app could allow users to submit locations for display on a map, images to
        go into a gallery, or any number of other types of information.\r
        \r
        # Functionality
        Missing from this Prototype\r
        \r
        * User's can't create accounts or profiles\r
        *
        Submitted things aren't added to the list\r
        * Clicking on the "like" icons
        don't change their state
      CSDU4 Decision App Demo_markdown_instruction: |-
        # Decision Maker\r
        \r
        Similar
        to the quiz app, a decision tree app asks the user a series of questions.
        The primary difference between the two is that a decision tree doesn't check
        for right or wrong answers, but instead attempts to give the user a suggestion
        or help them make a decision based on their answers.\r
        \r
        This simple decision
        maker asks only three questions,  but more advanced ones actually take the
        form of a tree as seen below:\r
        \r
        ![](https://images.code.org/aeadfca116011949855c169905ff89a3-image-1476823699500.png)\r
        \r
        Depending
        on the user's answer to each question, they're given a different page for
        the next question. This allows the app to gradually narrow down the decision
        one question at a time. This type of app can be really useful to help users
        understand complex processes - for example, you might introduce a recycling
        program by using a decision tree app to help users figure out which bin to
        sort items into - first asking what material it's made out of, then whether
        it is clean or not, and so on.\r
        \r
        # Functionality Missing from this Prototype\r
        \r
        *
        Question buttons don't direct you to different screens\r
        * The final screen
        doesn't give you a recommended decision
      CSDU4 Functionality setText button_markdown_instruction: |-
        # setText on More
        than Just Labels\r
        \r
        You can use `setText()` to change the text of labels,
        obviously, but it can also be used to change the text on _any_ element that
        has text, including buttons, text input, and text areas.\r
        \r
        # Do This\r
        \r
        The
        starter program has an event handler already set up for the red button, can
        you write event handlers for the other three buttons so they behave in the
        same way?
      CSDU4 Functionality setText input_markdown_instruction: |-
        # Pre-fill Input Fields
        with setText\r
        \r
        You've set the text of labels, and you've set the text
        of buttons, but did you know you can also use `setText()` to pre-fill text
        input fields?\r
        \r
        # Do This\r
        \r
        This app has four buttons, each of which
        should fill the "nameInput" field with a given name. For each button:\r
        \r
        *
        Add an `onEvent` block to run when the button is clicked\r
        * In the button's
        event handler, set the text of "nameInput" to the appropriate name\r
        \r
        When
        you've gotten all four buttons to work, add another button that will fill
        the input field with your name.
      CSDU4 Functionality setText quiz 1_markdown_instruction: |-
        # Making The Quiz
        App\r
        <img src="https://images.code.org/b87aef1a1fcd238590b2b866f11f47c7-image-1478035551794.15.03.png"
        style="float:right; max-width: 200px;">\r
        Let's look back at the quiz
        app example that we talked about earlier in this lesson. Recall that we proposed
        a single page that could serve three purposes:\r
        \r
        1. Display the question\r
        2.
        Show if the question was answered correctly\r
        3. Show if the question was
        answered incorrectly\r
        \r
        # Do This\r
        \r
        We've already provided the screen
        for a single question. Before worrying about any code, you just need to set
        this up to ask a question.\r
        \r
        * Change the title to a question that you
        want to ask\r
        * Change the text of the two buttons to two potential answers
        to your question
      CSDU4 Functionality setText quiz 2_markdown_instruction: |-
        # Answering the Question\r
        \r
        Now
        that this screen is asking the question you want it to ask, you'll want to
        make it respond to the answer buttons.\r
        \r
        # Do This\r
        \r
        Instead of
        using the buttons to change screens as we did in earlier quiz apps, each one
        of the answer buttons should change the title to say either "Correct" or
        "Incorrect." For each of the answer buttons:\r
        \r
        * Add an event handler
        to watch the button's ID\r
        * In the event handler, set the title text to
        either "Correct" or Incorrect"\r
        \r
        _Challenge: Create a couple more
        question screens just like this on and make the "Next Question" button navigate
        between them._
      CSDU4 Functionality setText quiz 3_markdown_instruction: |-
        # Don't Skip The
        Question\r
        \r
        The way this screen currently works, a user could just click
        immediately on "Next Question" and not bother answering. Worse still, the
        user could click one answer, see that it's wrong, and then click the other.
        Let's use `hideElement()` and `showElement()` to prevent that.\r
        \r
        # Do
        This\r
        \r
        You'll need to hide or show all three of the buttons in order
        to make this work, so let's focus on one at a time:\r
        \r
        **Next Question**\r
        \r
        The
        "Next Question" button should be hidden to start with, and then show up
        once the question has been answered.\r
        \r
        * In Design Mode, select the "Next
        Question" button and check the "hidden" checkbox. This will make sure the
        button is already hidden when the app starts\r
        * In the event handler for
        each of the answer buttons, add code to show the "Next Question" button\r
        \r
        **Answer
        Buttons**\r
        \r
        * In the event handler for each button, add code to hide
        the question buttons\r
        \t* If you want to allow a user to re-answer using
        only the answers they haven't tried yet, you could hide just the button that
        was clicked
      CSDU4 Functionality setText_markdown_instruction: |-
        # Changing text with setText()\r
        \r
        You
        actually saw `setText()` briefly in the last lesson - it's a function that
        allows you to change the text of a design element with code.\r
        \r
        # Do This\r
        \r
        Using
        the provided `onEvent()` block\r
        \r
        * Add a `setText()` block in the event
        handler\r
        * From the dropdown in the `setText()` block, select "title"\r
        *
        Make up a new title for the app and place it in the second parameter of the
        `setText()` block\r
        * Run it and test the button
      CSDU4 Functionality visible_markdown_instruction: |-
        # Controlling Visibility\r
        \r
        Earlier
        in this lesson, when we were proposing ways to simplify the quiz app, we mentioned
        that it was possible to show or hide design elements with code. App Lab has
        two functions that let you control the visibility of an element:\r
        \r
        *
        `hideElement()` makes the specified element invisible\r
        * `showElement()`
        makes the specified element visible\r
        \r
        # Do This\r
        \r
        The provided app
        has an image and two buttons.\r
        \r
        * Attach an event handler to the "Hide"
        button that hides the image when clicked\r
        * Attach an event handler to the
        "Show" button that shows the image when clicked
      CSDU4 List App Demo_markdown_instruction: |-
        # List Manager\r
        \r
        The list manager
        app allows user to keep track of the state of information and can be modified
        to serve many different purposes, such as checking in / out loaned items,
        tracking personal To Dos, or keeping track of where things are in a multi-step
        process.\r
        \r
        While this example focuses on a single list, more sophisticated
        list apps could allow the user to create multiple lists, or even move items
        between lists. This app also only keeps track of the name of an item and whether
        or not it is "Done," but it could be extended to track and organize any
        amount of information about the list items.\r
        \r
        # Functionality Missing
        from this Prototype\r
        \r
        * Delete buttons don't actually delete items from
        the list\r
        * Add screen doesn't actually add an item to the list
      CSDU4 Project Bug Feature_markdown_instruction: |-
        # Improving and Iterating\r
        \r
        You've
        put your app in front of users, gathered feedback, and identified bugs and
        new features - time to do something about it.\r
        \r
        # Do This\r
        \r
        Each
        team member is going to implement select features and bug fixes on their own
        version of the team's app. Start by selecting a sticky note from the **To
        Do** column of your team's chart and moving it to the **Doing** column. For
        each sticky you tackle:\r
        \r
        * Add a comment to the top of your program
        describing the feature or bug fix you are implementing\r
        * Work on your iteration
        until it works. Try to stay focused on only the single feature or bug that
        you've selected.\r
        * When done, move your sticky to the **Done** column,
        pick a new one, and start the process over.
      CSDU4 Project Events_markdown_instruction: |-
        # Linking Screens\r
        \r
        With all
        of your screens in place you can start adding events that will change the
        screens. When you're done with this step you'll actually have an interactive
        prototype!\r
        \r
        # Do This\r
        \r
        For each screen of your app:\r
        \r
        * Find
        all of the button IDs\r
        * For each button, add an event handler that watches
        that ID\r
        * In each event handler, use `setScreen()` to move the the right
        screen\r
        * Test it all out!\r
        \r
        Depending on the number of screens and
        buttons your app has, this can be a pretty involved process. Make sure that
        you test your work often, using `console.log()` blocks to debug any strange
        behavior with your app. When you think you've got the whole thing working,
        compare your app with other members of your group to see if they work the
        same.
      CSDU4 Project Functionality_markdown_instruction: |
        # Add Some Functionality\r
        \r
        Using
        the list you brainstormed with your team, add a single piece of new functionality
        to your app.\r
        \r
        # Do This\r
        \r
        Before adding anything new to a working
        app, it's always a good idea to make a backup. Click the "Remix" button
        in the header, give your remix a good name, and then come back here.\r
        \r
        For
        each piece of functionality you incorporate:\r
        \r
        * Make a remix of your
        app at it's current state\r
        * Return here to work on your app\r
        * Add a
        comment to the top of your program describing the functionality you are trying
        to add\r
        * Work on your app until it works. Try to stay focused on only the
        single piece of functionality you've chosen\r
        * When done, pick a new idea
        and start the process over\r
      CSDU4 Project Import_markdown_instruction: |-
        # Back To Your App\r
        \r
        Now that
        you've had some practice with importing screens, it's time to start working
        on your team's app.\r
        \r
        # Do This\r
        \r
        Each member of your team is going
        to create their own copy of the app, with all of the team members' screens
        imported in. This will be your copy of the app, and the copy that you will
        start to add code to in the next lesson.\r
        \r
        * Collect all of the sharing
        urls for your team's pages\r
        \t* You can find the share url by going back
        to the last level of the previous lesson, or by finding the screen in your
        [projects directory](/projects)\r
        * Import each of the screens, one at a
        time\r
        \t* If you run into an ID error with one of the screens, discuss the
        issue with the screen's creator so it can be fixed and imported\r
        * Delete
        the default "screen1"\r
        * Set the main screen as the default\r
        \r
        Don't
        worry about adding any code at this point; we'll get to that in the next
        level.
      CSDU4 Quiz App Demo_markdown_instruction: |-
        # Quiz Me\r
        \r
        A quiz app can
        be used to teach, or help reinforce, information important to your chosen
        topic.\r
        \r
        At its most basic, a quiz app is composed of a screen for each
        question with two or more buttons for multiple choice answers. Each button
        links to a page that either confirms that you were correct, or gives you information
        about why you were were wrong.\r
        \r
        More advanced quiz apps could include
        features such as:\r
        \r
        * Different types of questions (such as matching,
        free response, or even interactive games)\r
        * Randomizing the order of questions\r
        *
        Changing the questions based on how we'll you're doing\r
        * Providing a
        final score\r
        * Incorporating study material\r
        \r
        # Functionality Missing
        from this Prototype\r
        \r
        * Questions aren't actually checked for correctness
      CSDU4 nameAgeTemplate_markdown_instruction: |-
        # Text Input Elements\r
        \r
        So
        far we've been using `promptNum` as a simple way to get a number as input.
        Now that we know a little about strings were are going to create **user interface
        elements that users can use to submit text (i.e. strings) instead**. The first
        and simplest example is `textInput` which you can find in Design Mode.\r
        \r
        <img
        src="https://images.code.org/4436a3ba2a7596c7724380c7c82d5c29-image-1445533665376.36.19
        PM.png" style="width: 100px">\r
        \r
        # Do This\r
        \r
        * **Add two text
        input elements to this program**, one for the name and one for the age of
        the user.\r
        * **Give your text input elements descriptive and meaningful
        IDs**\r
        * **In Design Mode** set their default text to prompt the user for
        their name in age\r
        * **Compare your app to the example below**\r
        \r
        <img
        src="https://images.code.org/865403f21bdb27246caeb31afa7c0b5f-image-1445902764676.39.11
        PM.png" style="float:left; width:200px;">\r
        <br>
      CSDU6  note array length_markdown_instruction: |-
        # Adding to Arrays\r
        \r
        Arrays
        don't have to be a fixed length, you can add or delete as many items in the
        array as you'd like. The left and right arrows to the side of the array block
        let you add or delete an item at the end of the array.\r
        \r
        ![](https://images.code.org/a9a72527b700740382cae5017f8fa16d-image-1511913249739.jpg)\r
        \r
        #
        Do this\r
        \r
        * Add at least two more unique notes to the existing array.\r
        *
        Run the code to see what happens.
      CSDU6 - Arrays - expressionsAsIndexes_markdown_instruction: |-
        # Expressions
        as Indexes: Using Variables\r
        \r
        * **Starter code** has been provided which
        creates an list of identifiers for icons in the icon library\r
        * **Write
        code** that sets the image on the screen to a random icon from the list
      CSDU6 - Arrays - indexPractice_markdown_instruction: |-
        # Index Practice\r
        \r
        <img
        src="https://images.code.org/d3b8a9275703944808bc832c02f19fda-image-1486501806089.09.45
        PM.png" style="width: 150px; float: right">\r
        \r
        **Starter code** has
        been provided that creates a list called `colors`.\r
        \r
        * Use `setProperty`
        and the list of colors to change the `background-color` of the buttons to
        create a rainbow. The first button has been done for you.
      CSDU6 - Arrays - length_markdown_instruction: |-
        <img src="https://images.code.org/f02914c957acffecbadaa3646388d26c-image-1486499703151.33.50
        PM.png" style="width: 200px; float:right">\r
        \r
        # List Length\r
        \r
        *
        **Starter code** has been provided which creates several long arrays.\r
        *
        **Use `list.length` and `console.log`** to determine how many items are in
        each array. An example of the output is below.
      CSDU6 - Arrays - lengthMinus1_markdown_instruction: |
        # Accessing Last Item
        in List\r
        \r
        * **Starter code** has been provided that which creates several
        lists.\r
        * **Write Code** to display the final item in each list. Make sure
        to use list.length so that your code will work even if the list shrank.\r
      CSDU6 - LED buttonL_markdown_instruction: |-
        # Using Board Events\r
        \r
        Right
        now the LED turns on when the left button (`buttonL`) is pressed down. It
        should turn off when the right button (buttonR) is pressed down.\r
        \r
        <div
        style="float:right;" markdown=1> \r
        \r
        ![expandable](https://images.code.org/402489ec13fb6c6f38910829a9633ac3-image-1510874304220.png)
        \r
        \r
        </div>\r
        \r
        # Do this\r
        \r
        * Add another `onBoardEvent()` block
        to turn the LED off when the right button is pressed down.
      CSDU6 - LED buttonL_2018_markdown_instruction: |-
        # Using Board Events\r
        \r
        Right
        now the LED turns on when the left button (`buttonL`) is pressed down. It
        should turn off when the right button (buttonR) is pressed down.\r
        \r
        <div
        style="float:right;" markdown=1> \r
        \r
        ![expandable](https://images.code.org/402489ec13fb6c6f38910829a9633ac3-image-1510874304220.png)
        \r
        \r
        </div>\r
        \r
        # Do this\r
        \r
        * Add another `onBoardEvent()` block
        to turn the LED off when the right button is pressed down.
      CSDU6 - LED toggle buttonL down_markdown_instruction: |-
        # Other Board Events
        with the Buttons\r
        \r
        The left and right buttons have three event types:`press`,
        `down`, and `up`\r
        \r
        So far you've just been using the `press` event.
        Now, we're going to use the `up` and `down` events to make the LED turn on
        and off with just **one** button.\r
        \r
        ## Do this\r
        * Drag out an `onBoardEvent`
        block for one of the buttons and set the event type to `down`.\r
        * Add code
        to turn the LED on when the button goes down.
      CSDU6 - LED toggle buttonL up_markdown_instruction: |-
        # Other Board Events with
        the Buttons\r
        \r
        Instead of using the right button, you can make the LED
        turn off when the left button comes back up.\r
        \r
        # Do this\r
        * Create
        an 'up' event for the left button.\r
        * Add code to turn the LED off when
        the button pops back up.
      CSDU6 - LED toggle buttonL up_2018_markdown_instruction: |-
        # Other Board Events
        with the Buttons\r
        \r
        Instead of using the right button, you can make the
        LED turn off when the left button comes back up.\r
        \r
        # Do this\r
        * Create
        an 'up' event for the left button.\r
        * Add code to turn the LED off when
        the button pops back up.
      CSDU6 - LED toggle buttonL_markdown_instruction: |-
        # Using Board Events with
        the LED\r
        \r
        Can you toggle the LED on and off using a single board event?\r
        \r
        ##
        Do this\r
        * Pull out one `onBoardEvent()` block.\r
        * Add code to turn the
        LED on and off with just the one event on the Board.
      CSDU6 - UI and Inputs - Debug Screens and IDs_markdown_instruction: |-
        # Debug
        The Program\r
        \r
        In Unit 4 you learned how to set up the UI of an app, give
        elements meaningful IDs, and switch between screens using button clicks.   The
        programmer that created this app did not use good IDs and that caused their
        code to be buggy. Can you fix their code?\r
        \r
        * Go into Design Mode and
        give everything meaningful IDs\r
        * Set up the event handlers so that the
        buttons transition to the correct screen (see diagram below)\r
        \r
        ![](https://images.code.org/f9c9a9b5cbcb6e1cd59b1349625b7e9d-image-1485898200882.png)
      CSDU6 - UI and Inputs - dropdown setText_markdown_instruction: |-
        # setText and
        getText\r
        \r
        Often you will want to get the text of a UI Element and use
        it to set the text of another element on the screen. Can you get the text
        from the dropdown when the user picks a new input and use it to set the text
        of the "choiceDisplay" label.
      CSDU6 - UI and Inputs - event type testing_markdown_instruction: |-
        # Event Testing:
        \r
        \r
        So far you have only used the 'click' event type. However there
        are lots of other event types. You are going to test out a couple different
        event types for 4 different UI elements (Button, Dropdown, Slider, Text Input).\r
        \r
        **Starter
        Code:** The starting code is set up to react to the *click* event for the
        *button*. When that event fires a message will be logged to the console.\r
        \r
        One
        at a time, **change either the ID or event type**. Run the program and write
        down you observations of when this event fires. Keep going until you have
        tried all the combinations of events in the table.
      CSDU6 - UI and Inputs - function_markdown_instruction: |-
        # setColor Function\r
        \r
        At
        this point you probably have the same code inside each of your event handlers.
        Remember that when you have repeated code it is good to put it into a function.
        Can you use functions to get rid of the repeated code?
      CSDU6 - UI and Inputs - get set with text input_markdown_instruction: |-
        # setText
        and getText\r
        \r
        You've seen how to use getText and setText already. Can
        you make this app get the text the user typed once they hit enter and show
        it in the text area at the bottom?\r
        \r
        _Tip: The "change" event is triggered
        when the user clicks "enter" in a field. Use an event handler for the text
        input watching for the "change" event._
      CSDU6 - UI and Inputs - getNumber practice_markdown_instruction: |-
        # getNumber\r
        \r
        **Starter
        Code:** The program tries to update the valueDisplay whenever the slider value
        changes but it always sets the value to 10.\r
        \r
        Can you use `getNumber()`
        to get the value of the slider and update the valueDisplay as it changes?
      CSDU6 - UI and Inputs - getNumber_markdown_instruction: |-
        # getNumber\r
        \r
        **Starter
        Code:** This program creates a simple calculator but **there is something
        wrong with it. Try putting in 2 + 2.**\r
        \r
        We can fix this by using `getNumber()`
        instead of `getText()`. Can you fix the program by changing `getText()` to
        `getNumber()`?
      CSDU6 - UI and Inputs - getText_markdown_instruction: |-
        # getText\r
        \r
        Try
        to set up an event handler that gets the text from the dropdown whenever a
        user selects a new item from the dropdown. You will need to use the getter
        `getText()`. Whenever you use a getter you should save it in a variable. Use
        `console.log()` to make sure it is working.
      CSDU6 - UI and Inputs - hide show_markdown_instruction: |-
        # Hide and Show\r
        \r
        It
        is a little weird that both buttons are on the screen at the same time. You
        don't need the stop alarm button until the alarm is on. Can you make the
        buttons only show when they are needed?\r
        \r
        * You will want the stop alarm
        button to be hidden when the program starts. You can do this in design mode.\r
        \r
        Hint:
        When you click the trigger alarm button, you should change the text, hide
        the trigger alarm button, _and_ show the stop alarm button.
      CSDU6 - UI and Inputs - set slider range_markdown_instruction: |-
        # Set Slider
        Range\r
        \r
        Sliders represent a range of numbers. In order to set that range
        you need to set the minimum value and maximum value for each slider. Do you
        remember what the range of values is you can give for each value in a RGB
        color?
      CSDU6 - UI and Inputs - setProperty Image_markdown_instruction: |
        # setProperty
        image\r
        \r
        **Note:** This level starts in Design Mode.\r
        \r
        There is an
        image element set up for you but it does not show when you leave Design Mode
        because it has not been told what image to display. \r
        \r
        * Use the `setProperty()`
        command to set the image of the UI Image Element on the screen.\r
      CSDU6 - UI and Inputs - setProperty first level_markdown_instruction: |
        # setProperty\r
        \r
        **Starter
        Code:** There is one call to `setProperty()` which sets the text-color to
        blue when you run the program.\r
        \r
        Can you add more calls to `setProperty()`
        that change other things about the text when you run the program? Try to change
        at least 3 more things.\r
      CSDU6 - UI and Inputs - setProperty_markdown_instruction: |-
        # setProperty background-color\r
        \r
        Change
        the `background-color` of a button to a new random color each time it is clicked
        using `setProperty()`.
      CSDU6 - UI and Inputs - setScreen_markdown_instruction: |-
        # setScreen\r
        \r
        Lets
        start with a setter you have used before `setScreen()`. \r
        \r
        * Make the
        About Me button on the Home page go to the About Me page.\r
        * Make the Back
        button on the About Me go to the Home page.
      CSDU6 - UI and Inputs - setText_markdown_instruction: |-
        # setText\r
        \r
        We
        are going to start making an alarm app. We have already set up an event handler
        for the "triggerAlarmButton" which will change the "statusLabel" text
        to ON when clicked. Can you make the stop alarm button change the text to
        OFF when clicked?
      CSDU6 - UI and Inputs - slider UI_markdown_instruction: |-
        # RGB Sliders\r
        \r
        <img
        src="https://images.code.org/f3fb468a73aa35b69d7e64deee34c7c3-image-1486080850211.12.39
        PM.png" style="width:200px;float:right">\r
        \r
        First step to creating
        the RGB Sliders app is to set up the UI elements and event handers for the
        sliders. \r
        \r
        * Can you get the screen to look similar to the one below?
        Hint: The color box is a button with no text.\r
        * Can you set up 3 event
        handlers that listen for when someone has finished moving the slider to a
        new location? Hint: Think back to your event investigation. Which event type
        do you want?
      CSDU6 - board event challenge_markdown_instruction: |-
        # Challenge: Sound Board\r
        \r
        Check
        with your teacher before starting the challenge.\r
        \r
        Now that you know
        how to use board events, the buttons, switch, and the buzzer, try making a
        program that turns your board into a sound board when you press the buttons
        or flip the switch. Play around with the duration and frequencies of the sounds,
        and listen to how it turns out.
      CSDU6 - board event challenge_2018_markdown_instruction: |-
        # Challenge: Sound
        Board\r
        \r
        Check with your teacher before starting the challenge.\r
        \r
        Now
        that you know how to use board events, the buttons, switch, and the buzzer,
        try making a program that turns your board into a sound board when you press
        the buttons or flip the switch. Play around with the duration and frequencies
        of the sounds, and listen to how it turns out.
      CSDU6 - button LED prediction_markdown_instruction: |-
        See contained level for
        markdown
      CSDU6 - button LED prediction_2018_markdown_instruction: |-
        See contained level
        for markdown
      CSDU6 - button debug_markdown_instruction: |-
        <img src="https://cdo-curriculum.s3.amazonaws.com/media/uploads/clickdebug.gif"
        style="float: right; margin: 20px; width: 200px;">\r
        \r
        # Debug\r
        \r
        This
        program should work like the image on the right - toggle LEDs one by one in
        the direction of the button you click. Clicking the left button should cause
        LEDs to toggle counter clockwise, while clicking the right button should toggle
        LEDs clockwise. Find and fix all of the bugs to get the program working again.\r
        \r
        _Challenge:
        Note that in the gif, the last LED on each side doesn't get toggled back.
        Can you update the program so that it doesn't leave an LED on when you change
        directions?_
      CSDU6 - button on off_markdown_instruction: |
        <img src="https://cdo-curriculum.s3.amazonaws.com/media/uploads/button_on_off.gif"
        style="float: right; margin: 20px; width: 200px;"/>\r
        \r
        # On and Off
        Buttons\r
        \r
        Write a program that works like the image to the right. The
        left button should turn on all of the color LEDs, and the right button should
        turn them off again.\r
      CSDU6 - button screen buttonL_markdown_instruction: |-
        # Board Events\r
        \r
        The
        `onBoardEvent()` command allows you to start taking input from your Circuit
        Playground. This app has two screens, "red_screen" and "blue_screen".
        Using the provided board event handler, write a program that switches to the
        blue screen when the left button on your board is pressed.
      CSDU6 - button screen buttonR_markdown_instruction: |-
        # Changing the Input\r
        \r
        <img
        src="https://images.code.org/cc903e4a0fb57b241b90abe220f027ef-image-1487707484420.04.00.png"
        style="float:right; margin-left: 10px; width: 50%">\r
        \r
        Using another
        `onBoardEvent()` block, make `buttonR` change the screen back to "red_screen".
        The first input of the `onBoardEvent()` command lets you pick which board
        object to watch.
      CSDU6 - button switch_markdown_instruction: |-
        # The Toggle Switch\r
        \r
        While
        the toggle switch is in many ways similar to the left and right buttons, the
        reasons you might use it can be different. Unlike the buttons, the toggle
        switch stays in whichever position you place it, so it doesn't have a "press"
        event. In fact, you'll find that none of the events you used with buttons
        are present for the toggle switch.\r
        \r
        <img src="https://cdo-curriculum.s3.amazonaws.com/media/uploads/toggle.gif"
        style="float:right; margin: 20px; width: 200px;">\r
        \r
        # Do This\r
        \r
        Drag
        out an `onBoardEvent()` block and select `toggleSwitch` from the first dropdown\r
        \r
        *
        Look at the options available in the events dropdown. What do you think they
        do?\r
        * Write a program that turns on half of the color LEDs at a time, based
        on the position of the toggle switch
      CSDU6 - button toggle_markdown_instruction: |-
        # Toggle with a Button\r
        \r
        Using
        `onBoardEvent()`, can you write a program that toggles the red LED when you
        click the left button?
      CSDU6 - button tug o war challenge_markdown_instruction: |-
        # Challenge\r
        \r
        _Check
        with your teacher before starting this challenge_\r
        \r
        At this point your
        Tug o' War game should have basic functionality, but there are still a few
        things missing. Continue fleshing out your game. You can make the game your
        own in any way you like, but you might add some of the following features:\r
        \r
        *
        Switch to a "Win" screen when one player reaches their target\r
        * Add a
        "Reset" button to start the game over\r
        * Add different difficulty levels
        or "handicaps" (one user may move two on each click while the other only
        moves one)\r
        * Add visuals to make the game look more interesting\r
        * Use
        the color LEDs to show the score
      CSDU6 - button tug o war left button_markdown_instruction: |-
        # Making Both Buttons
        Work\r
        \r
        If you were successful in the last level, the slider should move
        to the right when the right button is pressed. To get the left button to work
        you need to add another event handler, only this time it should **decrease**
        the variable _score_ and update the slider on each press.
      CSDU6 - button tug o war right button_markdown_instruction: |-
        # Tug o' War\r
        \r
        Let's
        start working on a two player Tug o' War game. Each player will be assigned
        one of the two hardware buttons (`buttonL` or `buttonR`), and they play the
        game by clicking as quickly as possible. Each time one of the buttons is clicked,
        it should move the slider "tug_slider" in the direction of that button.When
        the slider gets to one of the ends (either -10 or 10), that player wins.\r
        \r
        #
        Do This\r
        \r
        First we'll get the right button working. You've already
        been provided an event handler for `buttonR` - when the "press" event occurs,
        your program should:\r
        \r
        * Increase the variable _score_ by one\r
        * Set
        the value of "tug_slider" to the new score\r
        \r
        Don't worry about the
        other button yet, we'll get to that in the next level.
      CSDU6 - button up down predict question_markdown_instruction: |-
        What do you
        think will happen when you run this code? What will happen when you press
        the left and right buttons?
      CSDU6 - button up down_markdown_instruction: |-
        # Down and Up Events\r
        \r
        As
        you saw in the last level, the "down" and "up" events allow you to respond
        to buttons being pressed down and being released back up, respectively.\r
        \r
        #
        Do This\r
        \r
        Using those events, can you write a program that shows the
        label with id "alert_message" while the button is pressed down, but hides
        it again when the button is released?
      CSDU6 - button_LED_prediction_markdown_instruction: |-
        # Board Events\r
        \r
        The
        `onBoardEvent()` block allows you to start taking input from your Circuit
        Playground. Look at the program with a partner and discuss what you think
        it'll do. Once you've come up with an answer, click "Run" to check your
        answer.\r
        \r
        * What will happen when you press the left button down?
      CSDU6 - button_LED_prediction_2018_markdown_instruction: |-
        # Board Events\r
        \r
        The
        `onBoardEvent()` block allows you to start taking input from your Circuit
        Playground. Look at the program with a partner and discuss what you think
        it'll do. Once you've come up with an answer, click "Run" to check your
        answer.\r
        \r
        * What will happen when you press the left button down?
      CSDU6 - buzzer duration buttons_markdown_instruction: |-
        # Buzzer and the Buttons\r
        \r
        This
        program should use the buttons to play long and short buzzes.\r
        \r
        # Do
        this\r
        * Change the duration parameter of `buzzer.frequency` to make the
        left button play a long buzz, and the right button play a short buzz.
      CSDU6 - buzzer duration buttons_2018_markdown_instruction: |-
        # Buzzer and the
        Buttons\r
        \r
        This program should use the buttons to play long and short
        buzzes.\r
        \r
        # Do this\r
        * Change the duration parameter of `buzzer.frequency`
        to make the left button play a long buzz, and the right button play a short
        buzz.
      CSDU6 - buzzer duration_markdown_instruction: |-
        # Buzzer Duration\r
        \r
        As
        you've noticed, `buzzer.frequency()` has two parameters: frequency and duration.
        Both of these take a number as input.\r
        \r
        * Frequency changes how the buzzer
        sounds. The bigger the number you give it, the higher the buzzer's sound
        will be.\r
        \r
        * Duration determines how long the buzzer is going to play
        a sound for in milliseconds.\r
        \r
        For right now we're going to focus on
        duration, the second parameter.\r
        \r
        \r
        # Do this\r
        Try out a few things
        with duration:\r
        \r
        * Change the duration of the buzzer to something longer
        than 100.\r
        * Try setting the duration to 0, what happens?\r
        \r
        Run the
        program multiple times to see what happens before you move on.
      CSDU6 - buzzer duration_2018_markdown_instruction: |-
        # Buzzer Duration\r
        \r
        As
        you've noticed, `buzzer.frequency()` has two parameters: frequency and duration.
        Both of these take a number as input.\r
        \r
        * Frequency changes how the buzzer
        sounds. The bigger the number you give it, the higher the buzzer's sound
        will be.\r
        \r
        * Duration determines how long the buzzer is going to play
        a sound for in milliseconds.\r
        \r
        For right now we're going to focus on
        duration, the second parameter.\r
        \r
        \r
        # Do this\r
        Try out a few things
        with duration:\r
        \r
        * Change the duration of the buzzer to something longer
        than 100.\r
        * Try setting the duration to 0, what happens?\r
        \r
        Run the
        program multiple times to see what happens before you move on.
      CSDU6 - buzzer intro_markdown_instruction: |-
        # Using the Buzzer\r
        \r
        You can
        use the buzzer in a lot of different ways, but right now we're just going
        to use the `buzzer.frequency()`.\r
        \r
        # Do this\r
        * Pull out a `buzzer.frequency()`
        block from the toolbox and play around with it. You'll notice it has two
        parameters, what happens when you change either, or both of those?\r
        * Run
        the program and enjoy the music of your Circuit Playground.
      CSDU6 - buzzer intro_2018_markdown_instruction: |-
        # Using the Buzzer\r
        \r
        You
        can use the buzzer in a lot of different ways, but right now we're just going
        to use the `buzzer.frequency()`.\r
        \r
        # Do this\r
        * Pull out a `buzzer.frequency()`
        block from the toolbox and play around with it. You'll notice it has two
        parameters, what happens when you change either, or both of those?\r
        * Run
        the program and enjoy the music of your Circuit Playground.
      CSDU6 - ch 1 exemplar LEDs_markdown_instruction: |-
        # An Example Using Color
        LEDs\r
        \r
        Here's an example app that uses the color LEDs, event handlers,
        and a for loop to create an visual color mixer. Run this app and analyze how
        you think it was written.
      CSDU6 - ch 1 project design_markdown_instruction: |-
        # Set Up Your Screen\r
        \r
        Using
        the project guide, set up the elements of your screen in Design Mode.
      CSDU6 - ch 1 project events_markdown_instruction: |-
        # Event Handlers\r
        \r
        Set
        up an event handler for each of the elements you plan to use for input. Don't
        worry yet about getting the them fully functional, but you might use `console.log()`
        statements to help with testing.
      CSDU6 - ch 1 project finish_markdown_instruction: |-
        # Add the Finishing Touches\r
        \r
        Go
        back to your project guide and check to see that your app is addressing the
        goals you set out. This is your chance to add finishing touches, improve functionality,
        and get your app ready to be used by other people. When you're are finished,
        and have thoroughly tested it, use the share button to share your app out
        with others.
      CSDU6 - ch 1 project functions_markdown_instruction: |-
        # Functions\r
        \r
        Create
        all of the functions that you identified in your project guide.
      CSDU6 - ch 1 project output_markdown_instruction: |-
        # Board Output\r
        \r
        At
        this point you should have the structure of your app mostly fleshed out. Test
        your program as is to make sure that everything currently works as expected.
        Once you are confident in your program as-is, add the code to send output
        to your board.
      CSDU6 - end challenge_markdown_instruction: |-
        # Challenge: Board Events and
        Outputs\r
        \r
        Check with your teacher before starting the challenge.\r
        \r
        Now
        that you know how to use board events, the led, and the buzzer, try to create
        an app that uses all three.
      CSDU6 - final project 1_markdown_instruction: |-
        # Designing the User Interface\r
        \r
        Before
        worrying about the code for your program, start by laying out the user interface.
        As you add elements in Design Mode, make sure to give everything a meaningful
        ID. Even if you don't plan on accessing an element with code, making sure
        that all of your IDs are descriptive will help make your program more readable
        and easier to program.
      CSDU6 - final project 1_2018_markdown_instruction: |-
        # Designing the User Interface\r
        \r
        Before
        worrying about the code for your program, start by laying out the user interface.
        As you add elements in Design Mode, make sure to give everything a meaningful
        ID. Even if you don't plan on accessing an element with code, making sure
        that all of your IDs are descriptive will help make your program more readable
        and easier to program.
      CSDU6 - final project 2_markdown_instruction: |-
        # Wiring Up the UI\r
        \r
        With
        your user interface in place, you can now add event handlers for your interface
        elements. At this point you may want to just include `console.log()` commands
        to make sure that your events are working as expected - you can add the functional
        code later one.
      CSDU6 - final project 2_2018_markdown_instruction: |-
        # Wiring Up the UI\r
        \r
        With
        your user interface in place, you can now add event handlers for your interface
        elements. At this point you may want to just include `console.log()` commands
        to make sure that your events are working as expected - you can add the functional
        code later one.
      CSDU6 - final project 3_markdown_instruction: |-
        # Board Input Events\r
        \r
        Now
        you can add the events which will take input from the board. Again, feel free
        to just use `console.log()` statements at this point to ensure that your events
        are working.
      CSDU6 - final project 3_2018_markdown_instruction: |-
        # Board Input Events\r
        \r
        Now
        you can add the events which will take input from the board. Again, feel free
        to just use `console.log()` statements at this point to ensure that your events
        are working.
      CSDU6 - final project 4_markdown_instruction: |-
        # Functions\r
        \r
        As you continue
        to work through your program, look for patterns that can be abstracted into
        functions. Can you find code that is repeated multiple places, or chunks of
        code that could be better understood of given a name? Don't forget that you
        can use parameters to write functions for repeated code that is _mostly_ the
        same, but varies a bit (such as setting color on multiple LEDs).
      CSDU6 - final project 4_2018_markdown_instruction: |-
        # Functions\r
        \r
        As you
        continue to work through your program, look for patterns that can be abstracted
        into functions. Can you find code that is repeated multiple places, or chunks
        of code that could be better understood of given a name? Don't forget that
        you can use parameters to write functions for repeated code that is _mostly_
        the same, but varies a bit (such as setting color on multiple LEDs).
      CSDU6 - final project 5_markdown_instruction: |-
        # Board Output\r
        \r
        If you
        haven't already, use some of the output elements on the board to communicate
        useful information to the user.
      CSDU6 - final project 5_2018_markdown_instruction: |-
        # Board Output\r
        \r
        If
        you haven't already, use some of the output elements on the board to communicate
        useful information to the user.
      CSDU6 - final project 6_markdown_instruction: |-
        # Finishing Touches\r
        \r
        Add
        any finishing touches still needed to make your innovation awesome. If you
        have time, test out your innovation with some potential users to gather feedback
        and find opportunities for improvement. When you're totally finished, click
        the "Submit" button to turn it in!
      CSDU6 - final project 6_2018_markdown_instruction: |-
        # Finishing Touches\r
        \r
        Add
        any finishing touches still needed to make your innovation awesome. If you
        have time, test out your innovation with some potential users to gather feedback
        and find opportunities for improvement. When you're totally finished, click
        the "Submit" button to turn it in!
      CSDU6 - for loop - 1_markdown_instruction: |-
        # For Loop - Looping Through A
        List\r
        \r
        * Print out all the items in the colors list using a for loop
      CSDU6 - for loop - 10_markdown_instruction: |-
        # For Loop - Looping Through A
        List\r
        \r
        You saw this for loop on the last level:\r
        \r
        <pre>\r
        for(var
        i = 0; i < daysOfWeek.length; i++){\r
          console.log(i);\r
        }\r
        </pre>\r
        \r
        Which
        prints the numbers from 0 to one less than the list length in this case (0
        to 6). Another way of looking at this is that it prints all the index values
        in the list!  This might be helpful to loop through a list!\r
        \r
        **Starter
        Code:** This program writes out each item of the array individually. \r
        \r
        **Write
        Code** that uses the for loop from the last level to print out all the items
        in the list.
      CSDU6 - for loop - 2_markdown_instruction: |-
        # For Loop - Condition\r
        \r
        *
        Run the program - how many times does it print?\r
        * Change the 2 to another
        positive number less than 5. What happens?
      CSDU6 - for loop - 3_markdown_instruction: |-
        # For Loop - Starting Value\r
        \r
        You
        can change where a for loop starts counting.\r
        \r
        * Run the program what
        number does it start counting at?\r
        * Try changing the 5 to a different number\r
        \t*
        What happens if you make the number negative?\r
            * What happens if you
        make the number bigger than 10 (since the condition is i < 10)?
      CSDU6 - for loop - 4_markdown_instruction: |-
        # For Loop - Incrementor \r
        \r
        *
        Run the program what numbers is it printing?\r
        * Try to change the 2 to another
        number, what happens?
      CSDU6 - for loop - 6_markdown_instruction: |-
        # For Loop - Condition Practice\r
        \r
        Change
        the condition of the for loop so that the word message prints 6 times.
      CSDU6 - for loop - 7_markdown_instruction: |
        # For Loop - Starting Value Practice\r
        \r
        Edit
        the starting value and the condition of the loop so that it counts from 50
        to 100.\r
      CSDU6 - for loop - 8_markdown_instruction: |-
        # For Loop - Incrementor Practice\r
        \r
        Can
        you make the program count from 30 to 60 by 3s?  (30,33,36,39......57,60)
      CSDU6 - for loop - 9_markdown_instruction: |
        # *for* Loop with *if*\r
        \r
        Sometimes
        we want to find values in an array that meet certain conditions.  We can add
        an **`if` statement inside the `for` loop** to individually check every value
        within the array. To practice this, we will create a `for` loop that will
        **display every value in the array greater than 5**.\r
        \r
        # Do This:\r
        **
        Starter code** has been been provided that creates an array of random values.\r
        \r
        *
        Add a `for` loop that references every index in the array.\r
        \r
        * Add an
        `if` statement inside the `for` loop that **displays every value in the array
        greater than 5** using `console.log`\r
        \t![](https://images.code.org/969077ff23232e410ce17520b0a71e1e-image-1447390972867.gif)\r
            \r
        *
        **Note:** Because the original array is being constructed with random values
        it's *possible* that it might not have any values greater than 5.  Just run
        the program a few times to make sure it works.  An example of the possible
        output is below.\r
        \r
        ![](https://images.code.org/266e23afc3533ebd63b393b2ee8682d8-image-1447796380510.39.26
        PM.png)\r
      CSDU6 - for loop - around for loop_markdown_instruction: |-
        # Before and After
        For Loop\r
        \r
        * Run this code and check out when the console.log statements
        before and after the for loop print.
      CSDU6 - for loop - button grid 1_markdown_instruction: |-
        # Random Button Colors\r
        \r
        **Starter
        Code:** An array with the name of the 30 buttons on the screen (not including
        the New Pattern button) is provided for you. \r
        \r
        **Write Code** that loops
        through all the buttons on the screen and gives them each a random color when
        the New Pattern Button is clicked.
      CSDU6 - for loop - color buttons with for_markdown_instruction: |-
        # Lists\r
        \r
        <img
        src="https://images.code.org/d3b8a9275703944808bc832c02f19fda-image-1486501806089.09.45
        PM.png" style="width: 150px; float: right">\r
        \r
        Take a look at the code
        you wrote in the last level. Can you make it better by using a loop to set
        the button colors instead?
      CSDU6 - for loop - color buttons_markdown_instruction: |-
        # Lists\r
        \r
        <img
        src="https://images.code.org/d3b8a9275703944808bc832c02f19fda-image-1486501806089.09.45
        PM.png" style="width: 150px; float: right">\r
        \r
        **Starter code** has
        been provided that creates a list of colors and a list of the buttons on the
        screen. In addition there is code to set each button to a color.\r
        \r
        **Change
        the code** so that instead of the name of each button being used in the call
        to `setProperty`, the list index is used instead.  For example:\r
        \r
        <pre>\r
        setProperty(buttons[0],"background-color",
        colors[0]);\r
        </pre>
      CSDU6 - for loop - condition with for_markdown_instruction: |-
        # *for* Loop with
        *if*\r
        \r
        Another way to use a for loop is to count the number of occurances
        of something in list. \r
        \r
        ** Starter Code:** The program generates an
        list of 5 random numbers from 1 to 3.  \r
        \r
        **Write Code:** Write a program
        that prints the number of 2s in the list.\r
        \r
        * You will need to write
        an if statement to check if the current value of the list is equal to 2\r
        *
        Instead of printing that value inside the if statement like on the last level
        you will want to increment a variable that keeps track of the number of 2s.\r
        *
        Print out the variable after the for loop runs!
      CSDU6 - for loop - count down_markdown_instruction: |-
        # Counting down\r
        \r
        So
        far all the programs you have written count up. Can you make this program
        count down from 10 to 1? Hint: You need to change something about all three
        parts of the for loop!
      CSDU6 - for loop - next day_markdown_instruction: |-
        # Accessing Items in a List\r
        \r
        **Starter
        Code:** There is a list of days of the week provided as well as a command
        to set the label on the screen.\r
        \r
        **Do This:** Can you change the index
        value so that the page displays "Today is: Tuesday"
      CSDU6 - for loop - predict repeat_markdown_instruction: |-
        # For Loop - Condition
        Practice\r
        \r
        Change the condition of the for loop so that the word message
        prints 6 times.
      CSDU6 - for loop - repeatedCode_markdown_instruction: |-
        # Refactoring To For
        Loop\r
        \r
        For loops are just a way of simplifying repeated code and make
        it easier to update in the future.\r
        \r
        * Can you take the repeated code
        here and turn it into a for loop?
      CSDU6 - for loop - why for_markdown_instruction: |-
        # Lists\r
        \r
        <img src="https://images.code.org/d3b8a9275703944808bc832c02f19fda-image-1486501806089.09.45
        PM.png" style="width: 150px; float: right">\r
        \r
        Why are loops so great?  Well
        lets try something out.\r
        \r
        * Add another button to your screen in design
        mode.\r
        * Add a color for that button to the end of your list of colors\r
        *
        Add the button name for that button to the end of your list of buttons\r
        *
        Run your program!\r
        \r
        Did it work? Notice you never changed the for loop
        at all!
      CSDU6 - for loop - winning num_markdown_instruction: "# Debug\\r\n\\r\nThis
        program\nis supposed to generate 3 random winning numbers from 1 to 5. There
        is a list\nof numbers but it seems like there are some bugs with generating
        the 3 random\nnumbers when the Draw Numbers button is clicked. Can you debug
        the program?\nCheck to make sure you can get every number in every slot of
        the winning numbers\narea. "
      CSDU6 - for loops - lights picker_markdown_instruction: |-
        # Challenge: More
        Patterns\r
        \r
        Your work on the color light patterns is back:\r
        \r
        * Consider
        using the all lights on and all lights off functions you made on the last
        level here.\r
        * Can you edit the patterns you created to use for loops where
        appropriate?\r
        * Can you add more patterns that use for loops?
      CSDU6 - lightswitch toggleswitch_markdown_instruction: |-
        # Using the Toggle
        Switch\r
        \r
        The toggle switch can flip in one of two positions: `open` and
        `close`.  This program uses it to make a light switch.  Right now it can only
        turn the light on.\r
        \r
        # Do this\r
        \r
        * Create a new toggle switch event
        that is triggered when the switch is flipped to `close`.\r
        * Add code so
        that when the toggle switch is flipped to `close` the light turns off.
      CSDU6 - lightswitch toggleswitch_2018_markdown_instruction: |-
        # Using the Toggle
        Switch\r
        \r
        The toggle switch can flip in one of two positions: `open` and
        `close`.  This program uses it to make a light switch.  Right now it can only
        turn the light on.\r
        \r
        # Do this\r
        \r
        * Create a new toggle switch event
        that is triggered when the switch is flipped to `close`.\r
        * Add code so
        that when the toggle switch is flipped to `close` the light turns off.
      CSDU6 - lists - lists 1_markdown_instruction: |-
        # Lists\r
        \r
        Let's practice
        adding items and printing out lists.\r
        \r
        * Add a `console.log()` command
        to print out the lettersList\r
        * Add the letter "c" to the letters list
        so it prints [a,b,c,d]
      CSDU6 - lists - lists 2_markdown_instruction: |-
        # Create Your Own Lists\r
        \r
        **Write
        code:** to create and then log to the console _one or more_ of the following
        lists:\r
        \r
        * The numbers from 1 to 10\r
        * A list of the names of 5 different
        shapes\r
        * The names of the months of the year
      CSDU6 - lists - lists 3 - out of bounds_markdown_instruction: |-
        # Accessing
        Items in a List\r
        \r
        **Starter Code:** There is a list of days of the week
        provided as well as well as a console.log statement to access the spot that
        holds "Friday" in the list. \r
        \r
        **Do This:** Can you add three more
        console.log statements that access the spots that hold:\r
        \r
        * Thursday\r
        *
        Monday\r
        * Sunday
      CSDU6 - lists - lists 3_markdown_instruction: |-
        # Accessing Items in a List\r
        \r
        **Starter
        Code:** There is a list of days of the week provided as well as a command
        to set the label on the screen.\r
        \r
        **Do This:** Can you change the index
        value so that the page displays "Today is: Tuesday"
      CSDU6 - lists - lists 5_markdown_instruction: "# Debug\\r\n\\r\nThis program\nis
        supposed to generate 3 random winning numbers from 1 to 5. There is a list\nof
        numbers but it seems like there are some bugs with generating the 3 random\nnumbers
        when the Draw Numbers button is clicked. Can you debug the program?\nCheck
        to make sure you can get every number in every slot of the winning numbers\narea. "
      CSDU6 - sensor love tester demo_markdown_instruction: |-
        # "Love" Tester\r
        \r
        The
        "Love" Tester is a classic carnival game. It works by having a user place
        their palm flat on a sensor or hold a metal handle. The tester then displays
        how in love that person is. The simplest version of these machines simply
        measure the temperature of the user’s hand and equate more love with a higher
        temperature.\r
        \r
        Test out this "Love" Tester by holding your thumb down
        on your Circuit Playground's temperature sensor. Compare your results with
        those of your neighbors - do all of the boards respond in the same way?
      CSDU6 - sensor theremin demo_markdown_instruction: |-
        # Light Theremin\r
        \r
        A
        theremin is an instrument that can be played without the musician actually
        touching it! Traditional theremins use magnetic fields for user interaction,
        but a simpler version can be made by detecting and reacting to light.\r
        \r
        Test
        out this theremin by waving your hand over the light sensor on your Circuit
        Playground. How does the tone change as the amount of light detected changes?
      CSDU6 - sensor vu meter demo_markdown_instruction: |-
        # VU Meter\r
        \r
        Many
        stereo systems feature a row of LEDs that light up as the music plays. This
        display is called a Volume Unit (VU) Meter, and it allows the user to see
        how loud the music is as it plays.\r
        \r
        Test out this VU Meter by speaking
        or otherwise making noise near the Circuit Playground. How do the lights and
        display change as the volume of ambient noise changes?
      CSDU6 - sensors challenge_markdown_instruction: |-
        # Challenge\r
        \r
        _Check
        with your teacher before pursuing this challenge_\r
        \r
        Now that you've
        practiced taking input from the various analog sensors and changing their
        scale to meet your needs, can you come up with an interesting use for sensor
        data? It's easy to display the raw numbers coming out of a sensor, but far
        more interesting to present that data in different ways.\r
        \r
        Consider the
        following ways you might communicate sensor data:\r
        \r
        * Use the board outputs\r
        *
        Change the width, height, or position of a UI element\r
        * Use conditionals
        to display different images based on sensor values
      CSDU6 - sensors experiment_markdown_instruction: |-
        <iframe width="370" height="620"
        style="float:right; margin-left: 25px; border: 0px;" src="https://studio.code.org/projects/applab/kxyJyJI1Bg1fV_5NIl8MHQ/embed"></iframe>\r
        \r
        #
        Sensor Experiment\r
        \r
        Run the program to the right and experiment with
        your board. Try interacting with your board in many different ways to figure
        out what each sensor might be. Once you've completed the experiment, answer
        the following questions for each sensor in the text box below.\r
        \r
        * What
        does this sensor measure?\r
        * What is its maximum value?\r
        * What is its
        minimum value?
      CSDU6 - sensors light_markdown_instruction: |-
        # Light Sensor Updates\r
        \r
        This
        app is very similar to the last, but we've added a button with the ID "update_button".
        Write a program that displays the current value of the light sensor every
        time the update button is clicked.
      CSDU6 - sensors love tester 1_markdown_instruction: |-
        # "Love" Tester: Collecting
        and Scaling Input\r
        \r
        Which sensor do you need to take input from?\r
        What
        scale of input is appropriate for this app?\r
        \r
        # Do This\r
        \r
        Add an
        event handler to continually collect data from your chosen sensor and use
        `console.log()` to track how it changes to user interaction. If necessary,
        change the scale of your input to meet your needs.\r
        \r
        _Tip: Consider which
        type of data is easiest to use from the temperature sensor - the raw value,
        temperature in C, or temperature in F._
      CSDU6 - sensors love tester 2_markdown_instruction: |-
        # "Love" Tester: Displaying
        Output\r
        \r
        How will your collected data be displayed?\r
        Does your data
        need to be transformed or processed before being displayed?\r
        \r
        # Do This\r
        \r
        Replace
        your call to `console.log()` with the kind of output you need for your project.\r
        \r
        _Tip:
        You may want a conditional to determine which output to display depending
        on input._
      CSDU6 - sensors love tester 3_markdown_instruction: |-
        # "Love" Tester: Finishing
        it Up\r
        \r
        Does your app meet the minimum requirements of its objective?\r
        \r
        #
        Do This\r
        \r
        Add the finishing touches to your app. Return to your planning
        guide to make sure that the app meets your initial goals.
      CSDU6 - sensors predict question_markdown_instruction: |-
        # Make a Prediction\r
        \r
        Read
        the code in this program and make a prediction below. What do you think this
        program will do when you run it? How is the user intended to interact with
        the board? You may need to blow onto the board to see the full range of this
        app.
      CSDU6 - sensors predict question_2018_markdown_instruction: |-
        # Make a Prediction\r
        \r
        Read
        the code in this program and make a prediction below. What do you think this
        program will do when you run it? How is the user intended to interact with
        the board? You may need to blow onto the board to see the full range of this
        app.
      CSDU6 - sensors rgb part 1_markdown_instruction: |-
        # Displaying Sensor Readings
        in Color\r
        \r
        In the previous prediction level you saw how the `setScale()`
        method can convert the full range of sensor readings (0-1023) into a range
        that can be used for RGB values (0-255). Let's build on that idea to make
        an app that can communcate the current value of all three analog sensors with
        a single color.\r
        \r
        # Do This\r
        \r
        To start, we just need to set the
        sensor scales correctly - don't worry about actually setting the color of
        the background yet.\r
        \r
        <img src="https://images.code.org/39de88e19682e905a1e08d5f12398f35-image-1488995498849.png"
        style="float: right; width: 300px; margin-left: 20px;"/>\r
        \r
        * Using
        the `sensor.setScale()` block, set each of the three analog sensors to the
        right scale for an RGB color channel.\r
        * Create a variable for each of the
        three colors and assign each one to the `.value` of a different sensor.\r
        *
        Use `console.log()` to test that your variables are in the correct range.\r
        \r
        _Hint:
        Order matters. You need to set the scale of a sensor before checking it's
        value_
      CSDU6 - sensors rgb part 2_markdown_instruction: |-
        # Putting Color on the Screen\r
        \r
        Now
        that your sensor data is in a scale that works for RGB, you can go about setting
        the screen color.\r
        \r
        # Do This\r
        \r
        * Add a `setProperty()` block and
        set it to change the "background-color" property of "screen1".\r
        * Add
        an `rgb()` block to the last parameter of `setProperty()`.\r
        * Use the three
        color variables you created as inputs to the `rgb()` block.
      CSDU6 - sensors rgb part 3_markdown_instruction: |-
        # Continuous Updates\r
        \r
        This
        sensor-to-color app isn't super useful if it only sets the color once when
        you start the app. You can use the sensors' "data" event to make your app
        continually update the background color every time the value changes.\r
        \r
        Move
        your `setScale()` blocks into a an event handler for one of the sensors to
        make the app update continually.
      CSDU6 - sensors sound_markdown_instruction: |-
        # Reading the Sound Sensor\r
        \r
        In
        this app we've already added a text label with the id "sound_value". Using
        the `soundSensor.value` block. display the value of the sound sensor.
      CSDU6 - sensors temp f c_markdown_instruction: |-
        # Temperatures in Fahrenheit
        and Celsius\r
        \r
        While the sound, light, and temperature all behave in the
        same fashion (converting an analog input to a 10 bit number), the temperature
        sensor is often used a bit differently. Typically if you are using a temperature
        sensor, you want to get a temperature in Fahrenheit or Celsius, not just a
        number in a range. To help with this, the temperature sensor how two special
        blocks, `tempSensor.F` and `tempSensor.C`.\r
        \r
        # Do This\r
        \r
        Using an
        event handler, write a program that continuously updates the labels "temp_c"
        and "temp_f" with the appropriate temperature readings.
      CSDU6 - sensors temp_markdown_instruction: |-
        # Make a Thermometer App\r
        \r
        While
        the light and sound sensors have just a raw value with the `value` property,
        the temperature sensor is a little bit smarter. Instead of `tempSensor.value`,
        there are two properties `tempSensor.F` and `tempSensor.C` which convert the
        raw input value to either Fahrenheit or Celsius.\r
        \r
        # Do This\r
        \r
        Make
        a simple thermometer app that reads in values from the temperature sensor.
        Your app can display the temperature in either Fahrenheit or Celsius (or both!)\r
        \r
        _Challenge:
        can you make your app continually update the temperature readings?_
      CSDU6 - sensors theremin 1_markdown_instruction: |-
        # Light Theremin: Collecting
        and Scaling Input\r
        \r
        Which sensor do you need to take input from?\r
        What
        scale of input is appropriate for this app?\r
        \r
        # Do This\r
        \r
        Add an
        event handler to continually collect data from your chosen sensor and use
        `console.log()` to track how it changes to user interaction. If necessary,
        change the scale of your input to meet your needs.
      CSDU6 - sensors theremin 2_markdown_instruction: |-
        # Light Theremin: Displaying
        Output\r
        \r
        How will your collected data be displayed?\r
        Does your data
        need to be transformed or processed before being displayed?\r
        \r
        # Do This\r
        \r
        Replace
        your call to `console.log()` with the kind of output you need for your project.
      CSDU6 - sensors theremin 3_markdown_instruction: |-
        # Light Theremin: Finishing
        it Up\r
        \r
        Does your app meet the minimum requirements of its objective?\r
        \r
        #
        Do This\r
        \r
        Add the finishing touches to your app. Return to your planning
        guide to make sure that the app meets your initial goals.
      CSDU6 - sensors vu meter 1_markdown_instruction: |-
        # VU Meter: Collecting and
        Scaling Input\r
        \r
        Which sensor do you need to take input from?\r
        What
        scale of input is appropriate for this app?\r
        \r
        # Do This\r
        \r
        Add an
        event handler to continually collect data from your chosen sensor and use
        `console.log()` to track how it changes to user interaction. If necessary,
        change the scale of your input to meet your needs.\r
        \r
        _Tip: If you are
        going to use the 10 color LEDs for output, how should you set the scale of
        your sensor?_
      CSDU6 - sensors vu meter 2_markdown_instruction: |-
        # VU Meter: Displaying Output\r
        \r
        How
        will your collected data be displayed?\r
        Does your data need to be transformed
        or processed before being displayed?\r
        \r
        # Do This\r
        \r
        Replace your
        call to `console.log()` with the kind of output you need for your project.\r
        \r
        _Tip:
        You may want to use a conditional to determine which LEDs to turn on, and
        which one's to turn off_
      CSDU6 - sensors vu meter 3_markdown_instruction: |-
        # VU Meter: Finishing it
        Up\r
        \r
        Does your app meet the minimum requirements of its objective?\r
        \r
        #
        Do This\r
        \r
        Add the finishing touches to your app. Return to your planning
        guide to make sure that the app meets your initial goals.
      CSDU6 - switch blink_markdown_instruction: |-
        # Changing the Input\r
        \r
        <img
        src="https://images.code.org/cc903e4a0fb57b241b90abe220f027ef-image-1487707484420.04.00.png"
        style="float:right; margin-left: 10px; width: 50%">\r
        \r
        Using another
        `onBoardEvent()` block, make `buttonR` change the screen back to "red_screen".
        The first input of the `onBoardEvent()` command lets you pick which board
        object to watch.
      CSDU6 - timed loop challenge_markdown_instruction: |-
        # Challenge\r
        \r
        _Ask
        your teacher before embarking on this challenge_\r
        \r
        Using your new _timed
        loop_ skills, create an interesting program of your own design. Consider using
        multiple loops running at different speeds, or combining _timed loops_ with
        the `blink()` and `play()` helpers you saw in the previous level.\r
        \r
        You
        can either start from scratch here, or remix any of the earlier levels in
        this lesson.
      CSDU6 - timed loop console.log()_markdown_instruction: |-
        # Starting From Scratch\r
        \r
        Now
        that you've got some practice with `timedLoop()`, let's see if you can set
        one up from scratch.\r
        \r
        # Do This\r
        \r
        * Get a `timedLoop()` block from
        the _Control_ drawer in your toolbox\r
        * Change the _ms_ input so that the
        loop runs twice a second\r
        * Inside the loop, write the console with `console.log()`
      CSDU6 - timed loop for LEDs_markdown_instruction: |-
        # Turn on Each RGB LED and
        Exit\r
        \r
        Using a _timed loop_ in place of a _for loop_ loop requires that
        you set up a counter variable, increment it each time the loop is run, and
        use a conditional to determine when to exit the loop. Set up a _timed loop_
        to turn on each of the color LEDs one at a time and then exit. Refer back
        to the previous page for examples.\r
        \r
        _Tip: If you're unsure whether
        your loop has exited or not, consider adding a `console.log()` block or displaying
        text on the screen in the same condition that calls `stopTimedLoop()`._
      CSDU6 - timed loop helpers_markdown_instruction: |-
        # Timed Loop Alternatives\r
        \r
        Blinking
        lights and playing notes are common enough activities that we've provided
        some helpers to do them more easily.\r
        \r
        # Do This\r
        \r
        Run this code
        to see how the helpers work, and then **discuss** with a neighbor how you
        might do this with a _timed loop_.
      CSDU6 - timed loop question timed_markdown_instruction: |-
        What do you think
        will happen when you run this code?
      CSDU6 - timed loop random blink_markdown_instruction: |-
        # Timed Blinking\r
        \r
        The
        provided code toggles a randomly selected color LED once. Place that line
        inside a timed loop to make a randomized pattern of blinking lights.
      CSDU6 - timed loop random sound exit_markdown_instruction: |-
        # Ending The Song
        and Light Show\r
        \r
        Here's the randomized light and music app you created
        earlier. Using the `stopTimedLoop()` command, can you make the program stop
        at some point? You can choose one of the following ways to stop:\r
        \r
        *
        Use a _counter_ variable and stop the loop after the counter has reached a
        certain point (like a _for loop_)\r
        * Add a button and event handler to call
        `stopTimedLoop()` when clicked.\r
        \r
        _Make sure you also turn off all of
        the LEDs when the show is over!_
      CSDU6 - timed loop random sound_markdown_instruction: |-
        # Disco Dance Party\r
        \r
        Adding
        some sound to your blinking lights would really kick this program up a notch.\r
        \r
        #
        Do This\r
        \r
        * At the top of the program, create an list of notes, such
        as `var notes = ['C4', 'D4', 'E4']`\r
        * Inside the timed loop, randomly
        select one of the notes to play with `buzzer.note()`\r
        \r
        _Challenge: By
        default the lights are all blinking white - can you set them to random colors?_
      CSDU6 - timed loop smiley event_markdown_instruction: |-
        # What Happens Between
        Repetitions\r
        \r
        When the `timedLoop()` is waiting for the next repetition,
        the rest of your program is free to do whatever else it needs to do, including
        respond to events.\r
        \r
        Add an event handler for the "smiley" image. You
        can make the event do whatever you like - just test it to make sure that your
        event responds each time the image is moved.\r
        \r
        **Heads Up**: Make sure
        to put your event handler **outside** of the loop, otherwise a new event handler
        will be added _every time your loop is run!_ \r
        \r
        _Challenge: At this point
        you've got the start of a simple clicker gamer. Consider keeping track of
        score, or adding additional event handlers._
      CSDU6 - timed loop smiley rand y_markdown_instruction: |-
        # Infinite Loop\r
        \r
        The
        `timedLoop()` is really useful not only for looping code at a slower speed,
        but also to loop code infinitely. The provided program moves the image "smiley"
        to a random x position every second, can you make the image also move to a
        random y?
      CSDU6 - toggle state LED prediction_markdown_instruction: |-
        See contained level
        for markdown
      CSDU6 - toggle state LED prediction_2018_markdown_instruction: |-
        See contained
        level for markdown
      CSDU6 - toggleswitch state setProp_markdown_instruction: |-
        # State and the Toggle
        Switch\r
        \r
        This program tells you whether the toggle switch is opened or
        closed, but it needs the `toggleSwitch.isOpen` block to work.  `toggleSwitch.isOpen`
        is `true` if the switch is opened and `false` if the switch is closed.\r
        \r
        #
        Do this\r
        * Complete the if-statement with the `toggleSwitch.isOpen` property.\r
        *
        Run the program and press the left button, then flip the toggle switch and
        press the button again.
      CSDU6 - toggleswitch state setProp_2018_markdown_instruction: |-
        # State and
        the Toggle Switch\r
        \r
        This program tells you whether the toggle switch
        is opened or closed, but it needs the `toggleSwitch.isOpen` block to work.  `toggleSwitch.isOpen`
        is `true` if the switch is opened and `false` if the switch is closed.\r
        \r
        #
        Do this\r
        * Complete the if-statement with the `toggleSwitch.isOpen` property.\r
        *
        Run the program and press the left button, then flip the toggle switch and
        press the button again.
      CSDU6 - toggleswitch state_markdown_instruction: |-
        # State and the Toggle Switch\r
        \r
        The
        toggle switch has the `toggleSwitch.isOpen` property, which keeps track of
        which **state** (opened or closed) the switch is in. `toggleSwitch.isOpen`
        is a boolean, so its value is `true` if the toggle switch is open, and `false`
        if it's closed.\r
        \r
        \r
        ## Do this\r
        \r
         You'll be adding to the if-else
        statement to check if the toggle switch is open or closed.\r
        \r
        * Drag the
        `toggleSwitch.isOpen` block into the condition of the if-statement. Since
        `toggleSwitch.isOpen` is a boolean, the condition reads "If true".\r
        \r
        *
        Add `console.log()` statements that say "open!" if the switch is open, and
        "closed!" otherwise.\r
        \r
        * Run your code and toggle the switch to see
        what happens.\r
        \r
        Remember: This program is wrapped under an event. You'll
        _have_ to press the left button to update the program when you toggle the
        switch.
      CSDU6 AppLab Input 1_markdown_instruction: |-
        # Input in App Lab\r
        \r
        _You
        don't need to make any changes to the code here_\r
        \r
        Take a minute to
        read through the code and run the program. Discuss with a partner:\r
        \r
        1.
        What is the source of input?\r
        2. Where and how does the program check for
        input?\r
        3. What does the program do when it gets the right input?\r
        3.
        What is the program doing when there is no input?
      CSDU6 AppLab Input 1_2018_markdown_instruction: |-
        # Input in App Lab\r
        \r
        _You
        don't need to make any changes to the code here_\r
        \r
        Take a minute to
        read through the code and run the program. Discuss with a partner:\r
        \r
        1.
        What is the source of input?\r
        2. Where and how does the program check for
        input?\r
        3. What does the program do when it gets the right input?\r
        3.
        What is the program doing when there is no input?
      CSDU6 Circuit Playground Test_markdown_instruction: |-
        # Test Your Board\r
        \r
        This
        level is just a quick test to make sure your board is working. To run this
        test, do the following:\r
        \r
        1. Plug your board into your computer with
        a USB cable\r
        2. Click "Run"\r
        3. Wait a few seconds for either a Success
        or Error screen to pop up\r
        4. If your test was successful, move on to the
        next level. If not, try some of the troubleshooting steps\r
        \r
        ## Troubleshooting\r
        \r
        There
        are a number of things that could prevent your test from passing.\r
        \r
        1.
        Try refreshing the page and running the test again (you should refresh the
        page for each of the following ideas as well)\r
        2. Try connecting your board
        to a different USB port\r
        3. Try a different USB cable. Some USB cables can
        only be used for charging, so make sure your cable supports data transfer!\r
        4.
        Try a different board\r
        5. Go to [studio.code.org/maker/setup](/maker/setup)
        to run a more detailed test
      CSDU6 Circuit Playground Test_2018_markdown_instruction: |-
        # Test Your Board\r
        \r
        This
        level is just a quick test to make sure your board is working. To run this
        test, do the following:\r
        \r
        1. Plug your board into your computer with
        a USB cable\r
        2. Click "Run"\r
        3. Wait a few seconds for either a Success
        or Error screen to pop up\r
        4. If your test was successful, move on to the
        next level. If not, try some of the troubleshooting steps\r
        \r
        ## Troubleshooting\r
        \r
        There
        are a number of things that could prevent your test from passing.\r
        \r
        1.
        Try refreshing the page and running the test again (you should refresh the
        page for each of the following ideas as well)\r
        2. Try connecting your board
        to a different USB port\r
        3. Try a different USB cable. Some USB cables can
        only be used for charging, so make sure your cable supports data transfer!\r
        4.
        Try a different board\r
        5. Go to [studio.code.org/maker/setup](/maker/setup)
        to run a more detailed test
      CSDU6 GameLab Input 1_markdown_instruction: |-
        # Input in Game Lab\r
        \r
        _You
        don't need to make any changes to the code here_\r
        \r
        Take a minute to
        read through the code and run the program. Discuss with a partner:\r
        \r
        1.
        What is the source of input?\r
        2. Where and how does the program check for
        input?\r
        3. What does the program do when it gets the correct input?\r
        3.
        What is the program doing when there is no input?
      CSDU6 GameLab Input 1_2018_markdown_instruction: |-
        # Input in Game Lab\r
        \r
        _You
        don't need to make any changes to the code here_\r
        \r
        Take a minute to
        read through the code and run the program. Discuss with a partner:\r
        \r
        1.
        What is the source of input?\r
        2. Where and how does the program check for
        input?\r
        3. What does the program do when it gets the correct input?\r
        3.
        What is the program doing when there is no input?
      CSDU6 LED alarm silent_markdown_instruction: |-
        # Silent Alarm\r
        \r
        Here's
        the alarm app that you started in the last lesson. Right now it doesn't do
        much, so let's see if we can make it more useful by hooking it up to your
        board. When the alarm is triggered, turn on the red LED. When the alarm is
        stopped, turn the LED off again.\r
        \r
        # Do This\r
        \r
        Add `led.on()` and
        `led.off()` blocks to the events that trigger and disable the alarm.\r
        \r
        _Notice
        that the LED blocks have been moved to a new drawer called Circuit_
      CSDU6 LED basics led.off()_markdown_instruction: |-
        # Turn that LED Off\r
        \r
        Just
        as you can turn your red LED on using `led.on()`, you can turn it back off
        again with `led.off()`. You'll need to add a second button with an event
        handler that calls `led.off()`.\r
        \r
        # Do this\r
        \r
        Add a second button
        and use its "click" event to turn off the LED\r
        \r
        * Drag out a new button
        in Design Mode and give it a good ID\r
        * Insert an event handler for your
        newly created button\r
        * Drag an `led.off()` command into your new event
        handler\r
        \r
        Now you should have two buttons, one that turns the LED on,
        and another that turns it off.\r
        \r
        _Challenge: Can you come up with other
        ways to turn on and off the LED? Could you do it with a single button?_
      CSDU6 LED basics led.on_markdown_instruction: |-
        # Turn on that LED\r
        \r
        The
        red LED on your board is represented in code by an object called `led`. Similar
        to the sprite objects in Game Lab, you can use _dot notation_ to control the
        LED. Try using the command `led.on()` to make your red LED light up when the
        program is run.\r
        \r
        # Do this\r
        \r
        * Drag out the `led.on()` block and
        place it underneath the comment\r
        * Run the program\r
        * Bask in the warm
        red glow of your LED!
      CSDU6 LED basics onEvent_markdown_instruction: |-
        # Turn on that LED - with a
        Button!\r
        \r
        As exciting as an always-on red LED is, an LED that you can
        turn on with the click of a button seems much more useful. If you add a button
        to your screen in Design Mode, then you can use move your `led.on()` command
        into an `onEvent()` block.\r
        \r
        # Do this\r
        \r
        Add a button and use its
        "click" event to turn on the LED\r
        \r
        * Drag out a new button in Design
        Mode and give it a good ID\r
        * Insert an event handler for your newly created
        button\r
        * Move the code that turns your LED on _inside_ the button's event
        handler\r
        \r
        If everything worked out, you should see that your LED starts
        out off, but turns on when you click the button!
      CSDU6 array access modify_markdown_instruction: |-
        # Accessing Items in a List\r
        \r
        **Starter
        Code:** There is a list of days of the week provided as well as a command
        to set the label on the screen.\r
        \r
        **Do This:** Can you change the index
        value so that the page displays "Today is: Tuesday"
      CSDU6 array index predict contained_markdown_instruction: |-
        # Predict\r
        \r
        The
        code below will display four things on the screen.  What do you think they
        will be?
      CSDU6 array index predict contained_2018_markdown_instruction: |-
        # Predict\r
        \r
        The
        code below will display four things on the screen.  What do you think they
        will be?
      CSDU6 array length predict_markdown_instruction: |-
        # Playing Notes from an Array\r
        \r
        You
        may have noticed that when you ran the code from the last bubble, it didn't
        sound any different than the bubble before it. Why do you think that is?
      CSDU6 array select days_markdown_instruction: |-
        # Accessing Items in an Array\r
        \r
        This
        program uses the Circuit Playground.  It creates an array of the days of the
        week.  When the left button is pressed, it displays the day as "Tuesday".\r
        \r
        #
        Do This\r
        \r
        * Add code that will display the day as "Thursday" when the
        right button is pressed.
      CSDU6 array select days_2018_markdown_instruction: |-
        # Accessing Items in an
        Array\r
        \r
        This program uses the Circuit Playground.  It creates an array
        of the days of the week.  When the left button is pressed, it displays the
        day as "Tuesday".\r
        \r
        # Do This\r
        \r
        * Add code that will display the
        day as "Thursday" when the right button is pressed.
      CSDU6 arrays rainbow_markdown_instruction: |-
        # Index Practice\r
        \r
        <img src="https://images.code.org/d3b8a9275703944808bc832c02f19fda-image-1486501806089.09.45
        PM.png" style="width: 150px; float: right">\r
        \r
        **Starter code** has
        been provided that creates a list called `colors`.\r
        \r
        * Use `setProperty`
        and the list of colors to change the `background-color` of the buttons to
        create a rainbow. The first button has been done for you.
      CSDU6 arrays random_markdown_instruction: |-
        # Expressions as Indexes: Using
        Variables\r
        \r
        * **Starter code** has been provided which creates an list
        of identifiers for icons in the icon library\r
        * **Write code** that sets
        the image on the screen to a random icon from the list
      CSDU6 arrays select icons_markdown_instruction: |-
        # Expressions as Indexes:
        Using Variables\r
        \r
        * **Starter code** has been provided which creates
        an list of identifiers for icons in the icon library\r
        * **Write code** that
        sets the image on the screen to a random icon from the list
      CSDU6 arrays select rainbow_markdown_instruction: |-
        # Index Practice\r
        \r
        <img
        src="https://images.code.org/d3b8a9275703944808bc832c02f19fda-image-1486501806089.09.45
        PM.png" style="width: 150px; float: right">\r
        \r
        **Starter code** has
        been provided that creates a list called `colors` and uses it to set the colors
        of the rectangles on the screen.  Unfortunately, the colors are out of order.\r
        \r
        #
        Do This\r
        \r
        * Change the index numbers inside each selection block to make
        the rainbow appear as in the picture on the right.
      CSDU6 arrays select rainbow_2018_markdown_instruction: |-
        # Index Practice\r
        \r
        <img
        src="https://images.code.org/d3b8a9275703944808bc832c02f19fda-image-1486501806089.09.45
        PM.png" style="width: 150px; float: right">\r
        \r
        **Starter code** has
        been provided that creates a list called `colors` and uses it to set the colors
        of the rectangles on the screen.  Unfortunately, the colors are out of order.\r
        \r
        #
        Do This\r
        \r
        * Change the index numbers inside each selection block to make
        the rainbow appear as in the picture on the right.
      CSDU6 arrays select random_markdown_instruction: |-
        # Random Selection\r
        \r
        You
        can also select a random element in the list by using the `randomNumber` block
        instead of an index.  This program selects a random icon from a list and displays
        it on the screen when the left button is pressed.  Right now, the icons are
        always blue.\r
        \r
        # Do This\r
        * Add code that will select a random color
        from the list and use that as the icon color.
      CSDU6 arrays select random_2018_markdown_instruction: |-
        # Random Selection\r
        \r
        You
        can also select a random element in the list by using the `randomNumber` block
        instead of an index.  This program selects a random icon from a list and displays
        it on the screen when the left button is pressed.  Right now, the icons are
        always blue.\r
        \r
        # Do This\r
        * Add code that will select a random color
        from the list and use that as the icon color.
      CSDU6 arrays select variable_markdown_instruction: |-
        # Using Variables\r
        \r
        This
        program is like the last one, but the icons should always match the colors
        (red heart, yellow star, green leaf, and blue water).  You can do this using
        the variable "myIndex", which will store the value of a random number so
        that it can be used to get the icon and the color from the same place on each
        list.\r
        \r
        # Do This\r
        * Change the code so that both the icon and its
        color are chosen using the "myIndex" variable.
      CSDU6 arrays select variable_2018_markdown_instruction: |-
        # Using Variables\r
        \r
        This
        program is like the last one, but the icons should always match the colors
        (red heart, yellow star, green leaf, and blue water).  You can do this using
        the variable "myIndex", which will store the value of a random number so
        that it can be used to get the icon and the color from the same place on each
        list.\r
        \r
        # Do This\r
        * Change the code so that both the icon and its
        color are chosen using the "myIndex" variable.
      CSDU6 arrays variable_markdown_instruction: |-
        # Expressions as Indexes: Using
        Variables\r
        \r
        * **Starter code** has been provided which creates an list
        of identifiers for icons in the icon library\r
        * **Write code** that sets
        the image on the screen to a random icon from the list
      CSDU6 buzzer 2d arrays_markdown_instruction: |-
        # Challenge: 2D Arrays\r
        \r
        Arrays
        can hold all sorts of data, like numbers, strings, and even other arrays.
        When we put an array inside another, this becomes a 2D array. The `buzzer.playSong()`
        block can be used to play songs that sound more precise with 2D arrays.\r
        \r
        The
        structure that you've been using to play notes looks like this:\r
        \r
        `buzzer.playNotes(
        [array of notes to play] , tempo of the whole song);`\r
        \r
        The main difference
        with `buzzer.playSong()` is each element inside the `[array of notes to play]`,
        is an array with two elements: the note you want to play, and the duration
        of the note. Sometime you'll want a quarter note in your song, other times
        you'll want a full note, or maybe somewhere in between. A full song might
        look something like this:\r
        \r
        `buzzer.playSong([\r
          ["G3",0.25],\r
          ["C4",0.25],\r
          ["E4",0.25],\r
          ["G4",0.125],\r
          [null,0.375],\r
          ["E4",0.1875],\r
          ["G4",1]\r
        ],
        120);`\r
        \r
        # Do this\r
        \r
        * Use the `buzzer.playSong` block to make a
        different song.\r
        * When you get comfortable with the structure, add more
        notes to the song.
      CSDU6 buzzer 2d arrays_2018_markdown_instruction: |-
        # Challenge: 2D Arrays\r
        \r
        Arrays
        can hold all sorts of data, like numbers, strings, and even other arrays.
        When we put an array inside another, this becomes a 2D array. The `buzzer.playSong()`
        block can be used to play songs that sound more precise with 2D arrays.\r
        \r
        The
        structure that you've been using to play notes looks like this:\r
        \r
        `buzzer.playNotes(
        [array of notes to play] , tempo of the whole song);`\r
        \r
        The main difference
        with `buzzer.playSong()` is each element inside the `[array of notes to play]`,
        is an array with two elements: the note you want to play, and the duration
        of the note. Sometime you'll want a quarter note in your song, other times
        you'll want a full note, or maybe somewhere in between. A full song might
        look something like this:\r
        \r
        `buzzer.playSong([\r
          ["G3",0.25],\r
          ["C4",0.25],\r
          ["E4",0.25],\r
          ["G4",0.125],\r
          [null,0.375],\r
          ["E4",0.1875],\r
          ["G4",1]\r
        ],
        120);`\r
        \r
        # Do this\r
        \r
        * Use the `buzzer.playSong` block to make a
        different song.\r
        * When you get comfortable with the structure, add more
        notes to the song.
      CSDU6 buzzer alarm_markdown_instruction: |-
        # Noisy Alarm\r
        \r
        Back to the
        Alarm now - now with the buzzer we can make this thing really sound like an
        alarm. Using `buzzer.frequency()` and `buzzer.stop()` make your alarm play
        a sound when it goes off.
      CSDU6 buzzer freq_markdown_instruction: |-
        # Playing Sounds\r
        \r
        The `buzzer.frequency()`
        command takes two inputs - the first is the _frequency_ of the sound to be
        played (higher numbers = higher sounds), and the second is the _duration_
        of the sound (how long it should be played)\r
        \r
        # Do This\r
        \r
        The provided
        app has three buttons with event handlers. Add a `buzzer.frequency()` command
        to each of the event handlers so that the buzzer plays the appropriate sound
        (a low, medium, or high note).
      CSDU6 buzzer stop_markdown_instruction: |
        # Playing Longer Sounds\r
        \r
        <img
        src="https://images.code.org/e5513675e74233d4fe55a0826376b83f-image-1487622642991.gif"
        style="float: right; margin: 10px;">\r
        \r
        The _duration_ input of the
        `buzzer.frequency()` command is an _optional_ input - meaning that you don't
        need to use it. You can remove an optional input by clicking the left arrow
        next to it.\r
        \r
        By removing the duration, you are telling the buzzer to
        buzz continuously. You'll notice that there's a new block in the toolbox
        called `buzzer.stop()` to use in this case.\r
        \r
        # Do This\r
        \r
        Here's
        an app with two buttons, a Start and a Stop. Make these buttons Start and
        Stop the buzzer\r
        \r
        * Add an event handler for each button\r
        * When the
        Start button is clicked, make the buzzer play continuously\r
        * When the Stop
        button is clicked, stop the buzzer from playing\r
        \r
      CSDU6 buzzer.stop_markdown_instruction: |-
        # Stopping the Music\r
        \r
        Sometimes
        you need to be able to stop the music when you want, like in the code below.
        Duration wasn't specified so now the note plays continuously. Luckily, the
        `buzzer.stop()` method is here to save your ears.\r
        \r
        # Do this\r
        \r
        *
        Find a way to get the note to stop playing with `buzzer.stop()`.\r
        * Celebrate
        your win over the endless note!
      CSDU6 buzzer.stop_2018_markdown_instruction: |-
        # Stopping the Music\r
        \r
        Sometimes
        you need to be able to stop the music when you want, like in the code below.
        Duration wasn't specified so now the note plays continuously. Luckily, the
        `buzzer.stop()` method is here to save your ears.\r
        \r
        # Do this\r
        \r
        *
        Find a way to get the note to stop playing with `buzzer.stop()`.\r
        * Celebrate
        your win over the endless note!
      CSDU6 challenge play songs_markdown_instruction: |-
        # Challenge: Song Bot\r
        \r
        You
        have all the tools you need to make an awesome song bot! Try your hand at
        making a musical masterpiece with the buzzer. Here's some additional ideas
        to add to your bot:\r
        \r
        * Consider making a song that uses different octaves.\r
        *
        Maybe you could shuffle through songs by using the buttons on the board.
      CSDU6 circuit playground piano_markdown_instruction: |-
        # Circuit Piano\r
        \r
        Look
        at the code below. You're not going to be changing it, but try to see what
        it does. \r
        \r
        # Do this\r
        \r
        * Run the program and play with the piano
        on the screen.
      CSDU6 circuit playground piano_2018_markdown_instruction: |-
        # Circuit Piano\r
        \r
        Look
        at the code below. You're not going to be changing it, but try to see what
        it does. \r
        \r
        # Do this\r
        \r
        * Run the program and play with the piano
        on the screen.
      CSDU6 frequency creation_markdown_instruction: |-
        # Making the Buzzer Buzz\r
        \r
        Now
        that you can use the buzzer's frequency, try to make the buzzer play a high
        sound when the same button pops back up.\r
        \r
        # Do this\r
        * Add another
        onBoardEvent block so the buzzer plays a high sound when the left button comes
        back **up**
      CSDU6 frequency creation_2018_markdown_instruction: |-
        # Making the Buzzer Buzz\r
        \r
        Now
        that you can use the buzzer's frequency, try to make the buzzer play a high
        sound when the same button pops back up.\r
        \r
        # Do this\r
        * Add another
        onBoardEvent block so the buzzer plays a high sound when the left button comes
        back **up**
      CSDU6 frequency modification_markdown_instruction: |
        # Making the Buzzer Buzz\r
        \r
        The
        frequency of the buzzer determines how high or how low the buzzer will sound
        when it plays. The higher the number you give frequency, the higher the buzzer
        will sound.\r
        \r
        # Do this\r
        * Right now the buzzer plays a high note when
        the left button is pressed. Make the buzzer play a low note instead.\r
      CSDU6 frequency modification_2018_markdown_instruction: |
        # Making the Buzzer
        Buzz\r
        \r
        The frequency of the buzzer determines how high or how low the
        buzzer will sound when it plays. The higher the number you give frequency,
        the higher the buzzer will sound.\r
        \r
        # Do this\r
        * Right now the buzzer
        plays a high note when the left button is pressed. Make the buzzer play a
        low note instead.\r
      CSDU6 frequency template_markdown_instruction: Do a thing!
      CSDU6 frequency template_2018_markdown_instruction: Do a thing!
      CSDU6 light sensor alarm_markdown_instruction: |-
        # Auto Alarm\r
        \r
        Let's
        revisit the alarm app one last time. When we last updated this app we made
        it turn on or off the buzzer in addition to the LED, but it still needs to
        be manually triggered. Now that we know how to use sensor events, you can
        make the alarm trigger automatically!\r
        \r
        # Do This\r
        \r
        Using the an
        event handler for the light sensor, make the alarm turn on when it sees light.
        You can test the alarm by placing an object like a piece of paper over the
        board - if someone tries to take the piece of paper your alarm should start
        buzzing.\r
        \r
        _Challenge: Can you make both the buttons and the sensor play
        nicely together?_
      CSDU6 making new arrays_markdown_instruction: |-
        # Making New Arrays\r
        \r
        You
        know how to change arrays, now it's time for you to make your own.\r
        \r
        #
        Do this\r
        \r
        * Make a new array with whatever notes you want. They can be
        in different octaves, arranged in a certain key, etc. Anything you want!\r
        *
        Have the buzzer play a random note from your array when the **right** button
        is pressed.
      CSDU6 making new arrays_2018_markdown_instruction: |-
        # Making New Arrays\r
        \r
        You
        know how to change arrays, now it's time for you to make your own.\r
        \r
        #
        Do this\r
        \r
        * Make a new array with whatever notes you want. They can be
        in different octaves, arranged in a certain key, etc. Anything you want!\r
        *
        Have the buzzer play a random note from your array when the **right** button
        is pressed.
      CSDU6 note array length p2_markdown_instruction: |
        # Length of an Array\r
        \r
        `randomNumber()`
        was still generating a range of numbers from 0 to 2. You added more indexes
        in the array, so checking for the index of 0-2 isn't helpful if there's
        5 items in the array.\r
        \r
        You can fix this by using the **length** of the
        array with `array.length()`. If we generate a random number that's anywhere
        between 0 and the length of the array, you'll be able to play any of the
        elements in the array! Sort of!\r
        \r
        If the array length is 5, and you want
        to select a random index between 0 (the first index) and 5, then the computer
        can select up to 6 possible indexes, which the array doesn't have. To get
        around this, you'll have to subtract 1 from the length of the array like
        in the code below: \r
        \r
        ![](https://images.code.org/6e4e01b50708667fcd1585b61b1a87ae-image-1512083621011.jpg)\r
        \r
        #
        Do this\r
        \r
        * Set `randomNumber()` to generate numbers between 0 and the
        length of the list minus 1.\r
        * Add as many new notes to the array as you
        want.\r
        * Run the code to see what happens.\r
      CSDU6 note array length_markdown_instruction: |-
        # Adding to Arrays\r
        \r
        Arrays
        don't have to be a fixed length, you can add or delete as many items in the
        array as you'd like. The left and right arrows to the side of the array block
        let you add or delete an item at the end of the array.\r
        \r
        ![](https://images.code.org/a9a72527b700740382cae5017f8fa16d-image-1511913249739.jpg)\r
        \r
        #
        Do this\r
        \r
        * Add at least two more unique notes to the existing array.\r
        *
        Run the code to see what happens.
      CSDU6 piano with notes_markdown_instruction: |-
        # Piano Notes\r
        \r
        This is
        the same piano that you saw at the beginning of the lesson, but there are
        some bugs!\r
        \r
        # Do this\r
        \r
        * Edit the code so that all keys are using
        a `buzzer.note()` block to play the corresponding note.\r
        * Make sure that
        all the values passed in to `buzzer.note()` are notes, and not frequencies.\r
        \r
        _Hint:
        Remember to put quotes around the notes! e.g `buzzer.note("A4", 100);`_
      CSDU6 piano with notes_2018_markdown_instruction: |-
        # Piano Notes\r
        \r
        This
        is the same piano that you saw at the beginning of the lesson, but there are
        some bugs!\r
        \r
        # Do this\r
        \r
        * Edit the code so that all keys are using
        a `buzzer.note()` block to play the corresponding note.\r
        * Make sure that
        all the values passed in to `buzzer.note()` are notes, and not frequencies.\r
        \r
        _Hint:
        Remember to put quotes around the notes! e.g `buzzer.note("A4", 100);`_
      CSDU6 play null notes_markdown_instruction: |-
        # Null Notes\r
        \r
        You may have
        noticed that if you put the same note side-by-side in the array, the buzzer
        just plays that note as one long sound instead of as individual notes. In
        music we often want a break (or _rest_) between notes. You can get your buzzer
        to play a rest by sending it the value `null`.\r
        \r
        `null` is a special
        value that represents emptiness in computer science. `playNotes` plays each
        note for the same duration, so a `null` element in the array is just telling
        `playNotes` to play nothing for the same duration as everything else.\r
        \r
        \r
        #
        Do this\r
        \r
        * Run the code to hear what it sounds like first.\r
        * Examine
        the array inside `buzzer.playNotes()`.\r
        * Put a pause between notes that
        are the same and side-by-side, and any other place you deem appropriate.\r
        \r
        _Tip:
        `null` references a value, just like a variable name. Make sure you don't
        put it in quotation marks!_
      CSDU6 play null notes_2018_markdown_instruction: |-
        # Null Notes\r
        \r
        You may
        have noticed that if you put the same note side-by-side in the array, the
        buzzer just plays that note as one long sound instead of as individual notes.
        In music we often want a break (or _rest_) between notes. You can get your
        buzzer to play a rest by sending it the value `null`.\r
        \r
        `null` is a special
        value that represents emptiness in computer science. `playNotes` plays each
        note for the same duration, so a `null` element in the array is just telling
        `playNotes` to play nothing for the same duration as everything else.\r
        \r
        \r
        #
        Do this\r
        \r
        * Run the code to hear what it sounds like first.\r
        * Examine
        the array inside `buzzer.playNotes()`.\r
        * Put a pause between notes that
        are the same and side-by-side, and any other place you deem appropriate.\r
        \r
        _Tip:
        `null` references a value, just like a variable name. Make sure you don't
        put it in quotation marks!_
      CSDU6 play predict code_markdown_instruction: Markdown is in contained level
      CSDU6 play predict code_2018_markdown_instruction: |-
        Markdown is in contained
        level
      CSDU6 play predict markdown_markdown_instruction: |-
        # Make a Prediction\r
        \r
        Look
        at the code below. What do you think it's going to do?\r
        \r
        Give it a guess
        and run the code to find out!
      CSDU6 play predict markdown_2018_markdown_instruction: |-
        # Make a Prediction\r
        \r
        Look
        at the code below. What do you think it's going to do?\r
        \r
        Give it a guess
        and run the code to find out!
      CSDU6 play songs_markdown_instruction: |-
        # Making Songs\r
        \r
        You can make
        and play full songs with `buzzer.playNotes()`. It takes two parameters: an
        array of notes to play, and a tempo at which to play the notes. In previous
        bubbles you created arrays of notes and played through them randomly, but
        `buzzer.playNotes()` plays each note consecutively instead.\r
        \r
        \r
        # Do
        this\r
        \r
        * Pull out a `buzzer.playNotes` block and change the starting
        array inside.\r
        * Make sure the new array you give it has at least two pairs
        of notes that are next to each other in the list (Example: `["A5", "A5",
        "G4", "G4"]`)\r
        \r
        _Hint: Don't forget that you can always switch back
        and forth between block and text mode._
      CSDU6 play songs_2018_markdown_instruction: |-
        # Making Songs\r
        \r
        You can
        make and play full songs with `buzzer.playNotes()`. It takes two parameters:
        an array of notes to play, and a tempo at which to play the notes. In previous
        bubbles you created arrays of notes and played through them randomly, but
        `buzzer.playNotes()` plays each note consecutively instead.\r
        \r
        \r
        # Do
        this\r
        \r
        * Pull out a `buzzer.playNotes` block and change the starting
        array inside.\r
        * Make sure the new array you give it has at least two pairs
        of notes that are next to each other in the list (Example: `["A5", "A5",
        "G4", "G4"]`)\r
        \r
        _Hint: Don't forget that you can always switch back
        and forth between block and text mode._
      CSDU6 toggle state prediction_markdown_instruction: |-
        # More on the Toggle Switch\r
        \r
        You
        can also check whether the toggle switch is in the `open` or `close` position
        anywhere in your program. \r
        \r
        What different things does the button do
        when the toggle switch is `open` or `close`?
      CSDU6 toggle state prediction_2018_markdown_instruction: |-
        # More on the Toggle
        Switch\r
        \r
        You can also check whether the toggle switch is in the `open`
        or `close` position anywhere in your program. \r
        \r
        What different things
        does the button do when the toggle switch is `open` or `close`?
      CSDU6- predict event types_markdown_instruction: |-
        # Predict: Event Type\r
        \r
        So
        far you have really only used the click event type with buttons. There are
        many different event types you can use in App Lab. Look at the code and predict
        when each of the messages will print to the console log.
      CSDU6L06 - lists and colorLeds - Light Display_markdown_instruction: |
        # Blink\r
        \r
        Make
        lights blink \r
        \r
      CSDU6L06 - lists and colorLeds - blink_markdown_instruction: |
        # Blink\r
        \r
        Make
        lights blink \r
        \r
      CSDU6L06 - lists and colorLeds - create light pattern_markdown_instruction: |-
        #
        Light Pattern\r
        \r
        Find a partner and bring your light patterns together.\r
        \r
        Set
        up the app so the user can use what light pattern they want to see. You should
        put each of your light displays in a function to make this easier
      CSDU6L06 - lists and colorLeds - debug_markdown_instruction: |-
        <img src="https://images.code.org/e055be621221385d3503962bee5aa616-image-1491493475417.44.28.png"
        style="width:250px; float:right">\r
        \r
        # Debug: colorLeds\r
        \r
        Can you
        debug the index values so that the rainbow shows up on the board like in the
        picture?
      CSDU6L06 - lists and colorLeds - intensity_markdown_instruction: |-
        # Changing
        Brightness\r
        \r
        Sometimes you want to do more than just turn a light on
        or off, you might want to set a specific brightness. The `intensity()` command
        lets you set an LED's brightness (or _intensity_) from 0 - 100. Under the
        hood, this works just like `buzzer.frequency()` by rapidly turning the LED
        on and off to make it seem dimmer.\r
        \r
        # Do This\r
        \r
        The provided program
        has a slider that goes from 0 to 100 with an event handler. In the event handler,
        set intensity of your color LEDs to the value of the slider.
      CSDU6L06 - lists and colorLeds - light pattern off_markdown_instruction: |-
        #
        Turning It Off\r
        \r
        When you start this app your lights are off, but as
        soon as choose a pattern, there's no way to turn the lights back off!\r
        \r
        #
        Do This\r
        \r
        Create a function that turns all of the LEDs off, and then
        add a "Off" button to your app and make it turn off all of the color LEDs.
      CSDU6L06 - lists and colorLeds - pulse_markdown_instruction: |
        # Pulse\r
        \r
        Make
        lights pulse\r
        \r
      CSDU6L06 - lists and colorLeds - set color_markdown_instruction: |-
        # Adding
        Some Color\r
        \r
        You probably noticed when you used `colorLeds[0].on()` in
        the last level, the LEDs turned on as white. If you don't specify a color,
        `on()` will turn on all three parts of the LED (red, green, and blue) to produce
        white. You'll see a new command in the toolbox called `colorLeds[0].color()`
        which lets you specify a color, either as a string like "blue" or an RGB
        value using color `color()` command.\r
        \r
        # Do This\r
        \r
        Use the `.color()`
        command to set each of the color LEDs to a different color.
      CSDU6L06 - lists and colorLeds - song list_markdown_instruction: |
        <img src="//curriculum.code.org/images/circuitplayground/colorLedonoff.gif"
        style="float: right; margin: 10px;">\r
        \r
        # colorLeds\r
        \r
        The color
        LEDs can use the same basic commands that you used with the red LED, such
        as `on()` and `off()`. Using the provided buttons, write a program that turns
        on and off the bottom two color LEDs (the ones furthest away from the USB
        cable.\r
        \r
        # Do This\r
        \r
        Add event handlers to the provided buttons
        "on_button" and "off_button" that turn on and off the bottom two color
        LEDs. Which positions in the `colorLeds` list are those two LEDs?\r
        \r
      CSDU6L06 - lists and colorLeds - toggle_markdown_instruction: |
        # Toggle\r
        \r
        The
        `.toggle()` command works like a light switch - whenever you call it on an
        LED, the light will turn on if it was off, or off if it was on. This can be
        a really useful alternative to using both on and off.\r
        \r
        # Do This\r
        \r
        Choose
        a few LEDs and write a program that toggles them on and off when you click
        the Toggle button.\r
      CSDU6L06 - lists and colorLeds -solo light pattern_markdown_instruction: |-
        #
        Light Patterns\r
        \r
        This app already has one light pattern program, which
        can be activated by clicking a button. Notice that we put this pattern into
        a function to make the code cleaner and clearer.\r
        \r
        # Do This\r
        \r
        Create
        a light pattern function of your own - maybe the colors of your favorite holiday,
        college, sports team, or try to create an image with the lights.\r
        \r
        After
        you've created your new function, add a button and event handler so that
        you can switch between the two light patterns.
      CSDu2 IP CC Search_markdown_instruction: |
        # Finding Media\r
        \r
        Now that your
        content is in place, it's time to find some good images and other media to
        help make your page look better, and potentially strengthen your argument.\r
        \r
        Because
        the Creative Commons provides such a simple way to know what media you can
        and can't use, a lot of search engines have integrated Creative Commons filtering
        to ensure they only give you results you can use. The Creative Commons search
        page (linked below) is a compilation of CC friendly search engines that you
        can use to find media for your page.\r
        \r
        # Do This\r
        \r
        Using the Creative
        Commons Search page, find a handful of pictures that you'll want to use on
        your web pages. By default the search is set to the most restrictive settings.
        Next to the the text **I want something that I can...** you can uncheck _use
        for commercial purposes_. You can also uncheck _modify, adapt, or build upon_
        as long as you don't plan on modifying the images you find (such as adding
        text, cropping, or otherwise editing).\r
        \r
        <img src="https://images.code.org/41b70c9ad055b42ed9d9749be2e1fdb2-image-1473978771297.31.58.png"
        style="max-width: 800px"/>\r
        \r
        For each image you plan on using:\r
        \r
        *
        Download a copy to your computer (so that you can upload it to your website
        in the next step)\r
        * Write down all information you can find about the author,
        such as\r
        \t* Name, or screenname\r
            * URL of website (not URL of the
        image itself)\r
            * Title of image\r
      CSP Data Unit - Counting Multiple Things_markdown_instruction: |-
        If you can
        count one thing you can count multiple things\r
        \r
        Find out how many people
        like something other than dogs and cats\r
        \r
        Count dogs\r
        Count cats\r
        Count
        total\r
        Do the math\r
        \r
        blank/ blank total\r
        \r
        Can also use this to
        find percents from this\r
        \r
        x% are dog lovers
      CSP Data Unit -Counting Records - Easy Way_markdown_instruction: |
        ReadRecords
        with specific criteria \r
        find the length of an array\r
      CSP Data Unit -Counting Records - Hard Way_markdown_instruction: |-
        \r
        1. ReadRecords
        for all records\r
        2. Way to loop through and count
      CSP U4 - CreateRecord with JSON_markdown_instruction: |-
        Good news! we can also
        store objects in the easy way!\r
        Starting code is some kind of pre-composed
        object. And call to createRecord that shows using the javascript object as
        the the thing being stored.\r
        Test.\r
        Investigate.\r
        Add a field to the
        object and run again, see what’s there.
      CSP U4 - Export Table_markdown_instruction: |-
        # You can export the table too!\r
        \r
        Make
        a table and then export it to share it with a friend!
      CSP U4 - First Create Record Experience_markdown_instruction: |
        So how can we
        use this?  We can use it to compose a bunch of things we want to store at
        once.  In Data we call this a “record”.  Let’s look at how we create records….new
        level:\r
        \r
        Just drag out createRecord and play with it (non-project level)
        — not triggered by a button. \r
        \r
        CreateRecord should populate with a default
        JSON object (which you can set in level builder when defining params for the
        blocks in the palette.)  Have it be the string version of of JSON object.\r
        Just
        Hit run several times.\r
        View Data.\r
        Investigate problems.\r
        \r
        \r
      CSP U4 - Import Table_markdown_instruction: |-
        You can create a new table by
        importing a CSV file. CSV stands for comma separated values and is a standard
        way to move data between different applications. CSV files usually have multiple
        columns with the first row containing the label for each column. AppLab will
        use this first row to create the column names in the table. \r
        \r
        In AppLab
        you can create a new table in an app by clicking the “View Data” button(a
        new browser tab opens) and type in a new, descriptive table name (the table
        name does not have to match the app name, and an app can have more than one
        table), then click the “Add” button next to the table name(another new browser
        tab opens). Click the “Import” button, then the “Choose File” button and select
        the RottenTomatoes2015.csv file (see below). Finally click the “Overwrite
        & Import” button. Note the unique “Id” field created for each record.
      CSP U4 - JSON Object Intro - Bad Way_markdown_instruction: |-
        # We've Seen Objects
        Before\r
        \r
        We're going to see how we can use objects to organize data
        in our own apps, but this actually isn't the first time we've used objects
        in our programs. **The object that we've used most frequently is the event
        parameter of our event handlers**. This single object contains many pieces
        of information about the event which can be accessed to determine how to respond
        to the event. For example `event.key` contains the key that was pressed for
        key events, and `event.offsetX` and `event.offsetY` contain the location of
        the mouse for mouse events.\r
        \r
        Before we move on to creating objects of
        our own, let's take another look at this event parameter (or as we'll call
        it now event object) and recall how they were used.\r
        \r
        # Do This\r
        \r
        **Starter
        code** is provided which creates event handlers for both a "click" and "keydown"
        event and displays the contents of the event object they create.\r
        \r
        *
        **Run the program** and trigger both a keyboard event and a mouse event.\r
        *
        **Examine the objects displayed in the Debug Console** to recall the different
        pieces of information they contain.\r
        * **Reflect: ** Why wouldn't we want
        this information stored in many variables? Why wouldn't we want this information
        stored in an array?
      CSP U4 - JSON Object Intro - Good Way_markdown_instruction: |-
        # Creating Your
        Own Objects\r
        \r
        **Objects are unordered collections of name value pairs**.
        Like an array they can hold many pieces of information, but where arrays use
        a numeric index to reference specific pieces of information, objects use a
        descriptive name. We lose the "ordered" nature of our data, but we gain
        the ability to describe the purpose of each piece of data within a collection.\r
        \r
        Consider
        the event objects you just looked at. An array can just as easily store all
        the information they contain, but it would be difficult to determine what
        any of the values represent.\r
        \r
        **The syntax for creating objects of your
        own is shown below**\r
        \r
        * Curly braces are placed around the contents
        of an object `{}`\r
        * Names are separated from values with a colon `:`\r
        *
        Name value pairs are separated by commas `,`\r
        * Names must be strings. If
        they are not they will be coerced to strings, possibly creating unpredictable
        behavior.\r
        * **Example:** `var user = {"userName":"Ada", "password":"csIsAwesome",
        "yearBorn":1815};`\r
        \r
        # Do This\r
        \r
        **Starter code** is provided
        which creates an empty object and displays its value.\r
        \r
        * Modify the
        code **using the syntax above** to create an object of your own. Your object
        should contain **at least 5 pieces of information including both strings and
        numbers**.\r
        * **Run the program** and confirm all values in your object
        appear as you expected.
      CSP U4 - Objects - createObject_markdown_instruction: |-
        # Creating Your Own
        Objects\r
        \r
        **Objects are unordered collections of name value pairs**.
        Like an array they can hold many pieces of information, but where arrays use
        a numeric index to reference specific pieces of information, objects use a
        descriptive name. We lose the "ordered" nature of our data, but we gain
        the ability to describe the purpose of each piece of data within a collection.\r
        \r
        Consider
        the event objects you just looked at. An array can just as easily store all
        the information they contain, but it would be difficult to determine what
        any of the values represent.\r
        \r
        **The syntax for creating objects of your
        own is shown below**\r
        \r
        * Curly braces are placed around the contents
        of an object `{}`\r
        * Names are separated from values with a colon `:`\r
        *
        Name value pairs are separated by commas `,`\r
        * Names must be strings. If
        they are not they will be coerced to strings, possibly creating unpredictable
        behavior.\r
        * **Example:** `var user = {"userName":"Ada", "password":"csIsAwesome",
        "yearBorn":1815};`\r
        \r
        # Do This\r
        \r
        **Starter code** is provided
        which creates an empty object and displays its value.\r
        \r
        * Modify the
        code **using the syntax above** to create an object of your own. Your object
        should contain **at least 5 pieces of information including both strings and
        numbers**.\r
        * **Run the program** and confirm all values in your object
        appear as you expected.
      CSP U5 AP Practice Choose the Algorithm_markdown_instruction: |-
        # AP Practice
        - Identify the Algorithm\r
        \r
        One component of the **AP Create Performance
        Task** is selecting an algorithm that you developed.\r
        \r
        <div style="width:
        80%; margin: auto; background-color: #EEEEEE; padding: 10px; font-family:
        serif; font-size: 12pt">\r
        \r
        <b>3. Program Code</b>\r
        <ul>\r
        <li>Mark
        with an <b>oval</b> the segment of program code that implements the algorithm
        you created for your program that integrates other algorithms and integrates
        mathematical and/or logical concepts.</li>\r
        </ul>\r
        </div>\r
        <br>\r
        Here's
        the scoring guide for this question\r
        <div style="magin:auto">\r
        \t<img
        src="https://images.code.org/3240bf9a7f457b8590cf28c4dd4d5418-image-1516294760622.58.32
        AM.png">\r
            <img src="https://images.code.org/4edd1b265ad8932a7d6b9294e5622106-image-1516294762983.58.44
        AM.png">\r
        </div>\r
        \r
        \r
        # Choose the Student-Developed Algorithm\r
        \r
        The
        program code below is taken from the Color Sleuth activity you just completed.\r
        \r
        ![](https://images.code.org/4708875d71e4dc7cd06e2c1e472d8fdc-image-1516311447828.png)\r
        \r
        **Write
        which of the ovals (A, B, C, or D) is placed around code that best meets the
        criteria as a student-developed algorithm.**\r
        \r
        **Explain your answer
        using the criteria in the scoring guide.**
      CSPPD PD goals_markdown_instruction: |
        ***Now that you've learned more about
        the CSP Professional Development, let's consider your goals***

        <br>
        __What
        are your personal goals for your CSP PD experience (what do you hope to accomplish,
        how do you hope to grow)?__ *NOTE: These goals might change over time, and
        we'll revisit your responses as we go through the course so we can check
        in on how we're progressing towards those goals.*
      CSPPD course goals_markdown_instruction: |
        ***Now that you've learned more
        about the CSP curriculum, let's consider your goals***
        <br>
        <br>

        __What
        are your goals for your CSP class?__ *These goals will change over time, and
        we'll revisit this your response as we go through the course so we can check
        in on how we're progressing towards those goals.*

        *NOTE: remember you
        can change the size of the text box by clicking and dragging the bottom-right
        corner of the box.*
      CSPPD impact in program_markdown_instruction: |2

        #### What connections do you
        think might exist between the ideas covered in the videos you just watched
        and the units of CSP that you learned about earlier?
      CSPPD materials question1_markdown_instruction: "We just talked about the types\nof
        materials available through the Code.org CSP curriculum, including teacher\nlesson
        plans, widgets, widget tutorial videos, concept videos, teaching tips\nvideos,
        and student-facing activities. Which of these materials are you most\nexcited
        to have access to? Which are you most uncertain about? "
      CSPPD program overlap_markdown_instruction: |
        #### Now that you've read more
        about the CSP program, what relationship do you see between the curriculum
        and Professional Development? What aspects of the two pieces of the program
        seem most important or interesting to you?
      CSPPD strategies_markdown_instruction: "\nThis space is your __digital journal\nfor
        documenting strategies__ you've picked up during Professional Development\nand
        while teaching the course. We'll revisit this often during PD, and you\nshould
        refer back to it while planning lessons to remind yourself of strategies\nyou
        want to try in class. \n\n\n"
      CSPPD2 PT activity_markdown_instruction: "# Practice PT > Encoding a Complex\nThing\\r\n<img
        src=\"https://s3.amazonaws.com/uploads.hipchat.com/65395/734864/FBlNhEkvsTFskXJ/Screen%20Shot%202015-07-18%20at%205.46.24%20PM.png\"\nclass=\"level-image\">\\r\n\\r\n##
        Doing the Project\\r\nTo wrap up our work\nin this unit, we're going to spend
        an hour doing the practice performance\ntask. After you've read the lesson,
        spend some time looking over the student-facing\nworksheet and think about
        what you would like to encode. This is really open\nended, and there's no
        'right' thing to choose, but to get the juices going,\nhere are a few example
        topics: \\r\n\\r\n- A piece of music (the notes that\nare played, the instruments
        that play them, etc)\\r\n- A food (the smells,\ntastes, appearance, etc) \\r\n-
        A place (the sounds, the smells, what natural\nthings are in the space, what
        man-made things are in the space, etc)\\r\n\\r\n>\nOnce you've selected your
        topic, start working through your protocol for\nencoding the \"complex thing.\"
        Use the <a href =\"https://docs.google.com/document/d/1IPDnC6tKN7yRzog9t7weKISnjXvykTQe3QEpu43uM7c/edit\"\ntarget
        =\"_blank\">student activity guide</a> and the <a href=\"https://docs.google.com/document/d/1rkVbwb8nJBlnF9t3hkyIyckM6gJGEjcUwyQiyV-Jlu4/edit\"\ntarget
        =\"_blank\">lesson plan</a> to work through this.\\r\n\\r\n**See how\nfar
        you can get through the activity in one hour, but please do limit yourself\nto
        60 minutes.** Don't worry about getting through the entire thing in that\ntime,
        but be ready to share your thoughts about the process along with whatever\nyou
        come up with! \\r\n\\r\nUse the text box below to record your protocol.\nYou'll
        have space on the next page to share your final product. "
      CSPPD2 share protocol_markdown_instruction: |
        # Chunk 3: Encoding and Sending
        Text > Creating a Text Message Protocol\r
        \r
        <img src="https://s3.amazonaws.com/uploads.hipchat.com/65395/734864/FCmh8I2x5GTQ3tu/Screen%20Shot%202015-07-18%20at%2012.53.45%20PM.png"
        class="level-image">\r
        \r
        ## Creating a Text Message Protocol\r
        \r
        On
        the right you'll find the student-facing worksheet from lesson 10, which
        builds on students' prior work with protocols and has them develop a text
        messaging protocol that can handle the letters a-z as well as common punctuation.
        \r
        \r
        >Read over the [lesson plan](https://docs.google.com/document/d/1lAHRLpxu05-gSbNF6LX8vUIoDMHEonrmL3bk-Sh1viA/edit)
        and **work through developing a protocol yourself.** Use the text box below
        to record your protocol.\r
        \r
        *Having trouble viewing the activity? [Click
        here](https://s3.amazonaws.com/uploads.hipchat.com/65395/734864/jogZFA5WQK3rYne/text%20protocol.pdf)
        to open it directly.* \r
        \r
      CSPPD3-u2 pick a challenge_markdown_instruction: |-
        # Challenge Overview > What's
        your Challenge?\r
        \r
        Now that you've selected a lesson, head to the forum
        and **share which lesson you plan to complete** for your challenge.\r
        \r
        ####
        <a href="http://forum.code.org/t/unit-2-online-pd-challenge-selection/2222"
        target=_blank>Forums <i class="fa fa-external-link-square" /></a>\r
        \r
        Enter
        the lesson you selected for your challenge below:
      CSPPD3-u2 submit forum link_markdown_instruction: 'Submit Link\r\n\r\n##  Submit
        the Link for your Forum Post for Review\r\n\r\nYou''ve just shared your Challenge
        work on the forum. If you would like to receive payment for this online PD,
        please submit a link to that forum post here so we can review! \r\n\r\nIn
        order to get a dirct link to your post, click the link icon directly under
        your post (shown in the picture below):\r\n\r\n![](https://images.code.org/40fd4bb1aa4f50cfb0d66bbf7881cd0d-image-1443847364702.png)"

'
      CSPPD3-u3 pick a challenge_markdown_instruction: |-
        # Challenge Overview > What's
        your Challenge? \r
        \r
        ## Enter the lesson you selected for your challenge
        in the text box below.\r
        \r
        - 2 - 5: Turtle Drawing\r
        - 6 - 7: Functions
        and Simple Loops\r
        - 14-15: Variables \r
        - 16: Strings\r
        - 18: Programming
        Flow and Conditionals\r
        \r
        Now that you've selected a lesson, head to the
        forum and **share which lesson you plan to complete** for your challenge.
        \r
        \r
        #### <a href="http://forum.code.org/t/unit-3-challenge-selection/2470"
        target=_blank>Forums <i class="fa fa-external-link-square" /></a>
      CSPPD3-u3 submit forum link_markdown_instruction: 'Submit Link\r\n\r\n##  Submit
        the Link for your Forum Post for Review\r\n\r\nYou''ve just shared your Challenge
        work on the forum. If you would like to receive payment for this online PD,
        please submit a link to that forum post here so we can review! \r\n\r\nIn
        order to get a direct link to your post, click the link icon directly under
        your post (shown in the picture below):\r\n\r\n![](https://images.code.org/40fd4bb1aa4f50cfb0d66bbf7881cd0d-image-1443847364702.png)"

'
      CSPPD3-u4 submit forum link_markdown_instruction: 'Submit Link\r\n\r\n##  Submit
        the Link for your Forum Post for Review\r\n\r\nYou''ve just shared your Challenge
        work on the forum. If you would like to receive payment for this online PD,
        please submit a link to that forum post here so we can review! \r\n\r\nIn
        order to get a direct link to your post, click the link icon directly under
        your post (shown in the picture below):\r\n\r\n![](https://images.code.org/40fd4bb1aa4f50cfb0d66bbf7881cd0d-image-1443847364702.png)"

'
      CSPPD3-u5 submit forum link_markdown_instruction: 'Submit Link\r\n\r\n##  Submit
        the Link for your Forum Post for Review\r\n\r\nYou''ve just shared your Challenge
        work on the forum. If you would like to receive payment for this online PD,
        please submit a link to that forum post here so we can review! \r\n\r\nIn
        order to get a direct link to your post, click the link icon directly under
        your post (shown in the picture below):\r\n\r\n![](https://images.code.org/40fd4bb1aa4f50cfb0d66bbf7881cd0d-image-1443847364702.png)"

'
      CSPU5 Add Screens to Chaser Game_markdown_instruction: |
        # Improved Chaser Game\r
        \r
        Now
        lets improve the "Chaser Game".  This is where you get to use your creativity.
        Make it look nice!\r
        \r
        In addition you will notice a new command in the
        toolbox: `playsound`! Read the documentation about how to add sounds.\r
        \r
        **Note:**
        Your code from before has been provided for you.\r
        \r
        # Do This:\r
        \r
        *
        **Create a Welcome Screen** that explains the rules of the game. Include a
        "Start Game" button.\r
        \r
        * Update the your code so that the **image jumps
        to a new location when it is clicked**. \r
        \r
        * **Play a sound** each time
        the image is clicked.\r
        \r
        * **Add a Game Over Screen** with a lose message
        and button to start over. The Start Over Button should direct back to the
        Welcome Screen.\r
        \r
        * **Make the user lose**, by sending them to the Game
        Over Screen, when the background is clicked.\r
        \r
        \r
      CSPU5 Add a 2nd Screen_markdown_instruction: |
        # Design Mode: Adding a Screen\r
        \r
        <img
        src="https://images.code.org/3aab64d77293bda1759586e2cff5c6cc-image-1477366229125.png"
        style="width: 150px; float: right">\r
        \r
        **Now you try it:** Add a new
        screen and a button to the app we've started here.\r
        \r
        **NOTE:** We've
        created one screen for you - the Hello Screen.  You need to add a new screen
        - the new screen should look something like the example shown to the right.\r
        \r
        Here
        are the steps:\r
        \r
        * **Add a new screen**\r
         * Drag out <img src="https://images.code.org/4337b39cfd797ed9289b70fb6cb365fb-image-1444353631083.17.39
        PM.png" style="width: 50px"> from the Design Toolbox.\r
         * Or choose *New
        Screen...* from the pulldown menu at the top of the app display.\r
         \r
        *
        **Set the background color**\r
         * It doesn't have to be orange like the
        example\r
         \r
        * **Add a Button**\r
         * A simple button is fine.  You can
        embelish with an icon if you want.\r
         * Optional: You can also add a text
        label saying "Goodbye!"\r
        \r
        **Click Run...but...you won't see much**\r
        \r
        *
        Because we haven't added code yet **all you'll see is the (default) Hello
        screen**\r
        * You won't have any way to see the orange screen when the app
        is running.\r
        \r
        **Click Finish** to move on to the next level where we'll
        add code\r
        \r
         * Note: you can continue to work on your design on the next
        level too\r
        \r
      CSPU5 Add full screen image to bg of chaser game_markdown_instruction: |-
        # Add
        a Full Screen Image to act as Background to Game\r
        \r
        <img src="https://images.code.org/9898664ee57768dd6e332bfab804c2a6-image-1477324830263.png"
        style="float: right">\r
        \r
        We want to be able to detect when the user
        *misses* clicking on the target. Since we know the screen itself registers
        every click no matter what, the only way to determine that the user missed
        the target is to **add an image that takes up the full screen**.  \r
        \r
        In
        other words we're trying to determine which of two images was clicked - the
        target, or the background - which is do-able since we know when images overlap
        only one will have a click event triggered. \r
        \r
          * When the target is
        clicked, it jumps to a new location\r
          * When the background image is clicked
        we will (eventually) switch to a new screen.\r
        \r
        **Following the Event-Driven
        Pattern...**\r
        \r
        * **Design mode: Add a new image to the game** \r
          *
        and stretch it to fill the whole screen.\r
          * Change the layering order
        (if necessary) so that the target image is in front of the full screen image.\r
          *
        (See example at right which shows an image that is stretched to the full size
        of the screen sitting behind the target image).\r
        \r
        * **Add an onEvent
        handler** for the full screen image with a simple console.log message\r
          *
        **TIP**: this is basically done for you if you add onEvent from Design Mode\r
        \r
        *
        **Run. Test. Debug.**\r
          \r
        Make sure that with each click one of two things
        is happening.\r
         * When the target is clicked, it jumps to a new location
        (and optionally print a message to the console).\r
         * When the background
        image is clicked it should display a message to the console.\r
         * (See example
        console output at right).
      CSPU5 Add game over screen_markdown_instruction: |
        # Add a "game over" screen
        and finalize the game\r
        \r
        * **Add a new Screen** with a "game over" message
        and **add a button** to start over. \r
        \r
        * **Add an event handler** for
        the "Start Over" Button to send the user back to the Welcome Screen.\r
        \r
        *
        **Add `setScreen` to the event handling function for the background image**\r

        * When the background image is clicked, the user should be sent to the "game
        over" screen you just created.\r
        \r
        <img src="https://images.code.org/bb3c0973ee0d83d3540f5ffed797e442-image-1477405500619.gif"
        style="float: right; width: 150px">\r
        \r
        # Run. Test. Debug.\r
        \r
        You
        should now have a 3-screen app with:\r
        \r
        * A welcome screen\r
        * A game
        play screen\r
        * A "game over" screen\r
        \r
        **Avoid dead-ends** -- the
        user should be able to get between all the screens appropriately, and play
        the game.\r
        \r
        If it's not working:\r
        \r
        * Retrace your steps\r
        * See
        if you can figure out where things are going wrong\r
        * Add extra `console.log`
        statements.  \r
        * Ask a friend to help you out.\r
        \r
        **Stick with it until
        you get it!**\r
        \r
      CSPU5 Add onEvent from Design Mode_markdown_instruction: |-
        # Add onEvent from
        Design Mode!\r
        <img src="https://images.code.org/9ff41c3ea30ece355e91eaca5cdc1e36-image-1444417748945.gif"  style="width:
        250px; float: right">\r
        \r
        Design Mode has a shortcut for you to add `onEvent`
        to your code for specific UI Element.  It's quite handy.\r
        \r
        **You try
        it:** Add an event handler to a button from Design Mode\r
        \r
        **Design Mode**\r
          *
        A Red button has already been added to the app.\r
          * In Design Mode click
        on the button to select it\r
          * Click the **EVENTS tab** and then click
        the link that says **Insert and Show Code**\r
          * You may change the ID if
        you like\r
        \r
        This will insert an `onEvent` block with the ID and "click"
        filled in already.\r
        \r
        It also inserts a line of code with a command we
        haven't seen yet: `console.log`.\r
        \r
        **Run. Test. Debug**\r
        * Run the
        program and click on the button to see what happens\r
          * **Hint:** look
        at the **Debug Console** area below the coding workspace.\r
        * If nothing
        happens, retrace your steps and try again.\r
        \r
        Once you see a message displayed
        in the Debug Console click finish to move on.
      CSPU5 Add welcome screen to chaser game_markdown_instruction: |
        # Add A Welcome
        Screen\r
        \r
        <div style="float: right; width: 150px">\r
        \r
        \r
        <img src="https://images.code.org/558ae19d0fb8af8c6ec573e5d7ac4e29-image-1477369385328.png"
        style="float: right; width: 150px"><br>\r
        <em>This is an example showing
        the elements of a welcome screen. Yours <strong> should not </strong> look
        exactly like this.  Yours should be appropriate for your game.</em>\r
        \r
        </div>\r
        \r
        Let's
        improve your "Chaser Game" by **adding a welcome screen that shows when
        the app starts up, and that with a button to start.**\r
        \r
        * NOTE: we've
        imported the chaser game that you made in the last lesson.  That's the starting
        point for this.  You can continue with this lesson if you don't have it.
        But you'll need to make a screen for game play along the way.\r
        \r
        Following
        the Event Driven Programming pattern:\r
        \r
        1. **Design Mode** \r
          * Add
        a New Screen to the App\r
          * Make this new screen the **default screen**\r
          *
        Add a new Button to the screen that says "Start"\r
          * Add text welcoming
        the user to the game.\r
          * Give the button and the screen meaningful IDs\r
        \r
        2.
        **Add an onEvent Handler for the Button**\r
          * Insert a new onEvent block
        (easy way from Design Mode) for the "start" button\r
        \r
        3. **Add code
        to the event handling function**\r
          * When the "start" button is clicked
        it should `setScreen` to the screen that plays the game.\r
          \r
        4. **Run.
        Test. Debug.**\r
        \r
         Make sure that:\r
         \r
         * When app starts up, your
        new welcome screen shows first\r
         * When you click the "start" button it
        takes you to the game play screen\r
         * Note: right now there's no way to
        get back to the welcome screen - it's okay, we'll add that later.\r
        \r
      CSPU5 Adding Screens Template_markdown_instruction: |-
        # Second Screen\r
        \r
        Up
        until now our apps have only been able to have one view. With Design Mode
        we can now make multiple screens and switch between them!\r
        \r
        **Goal:**
        Make a 2 screen app with a black screen and a white screen. \r
        \r
        <img src="https://images.code.org/e35a6f494cf6f0c57c66a1aef651cdb0-image-1444353622241.gif"
        style="width: 250px; float: right">\r
        \r
        # Do This:\r
        \r
        Switch to Design
        Mode and **add a second screen**. There are two ways to add a second screen:
        \r
        \r
        * Drag out <img src="https://images.code.org/4337b39cfd797ed9289b70fb6cb365fb-image-1444353631083.17.39
        PM.png" style="width: 50px"> from the Design Toolbox. Check out the screen
        dropdown menu at the top right of the app window. You should now have two
        screens!  <img src="https://images.code.org/b48d978335701888b744702f25f11b28-image-1444353746012.17.07
        PM.png" style="width: 75px"> \r
        * From the screen dropdown menu at the
        top right of the app window click *New Screen*. \r
        \r
        Make screen1 white
        and screen2 black. **Set the background color for a screen in the Properties
        tab**.  Make sure to rename the screens with appropriate IDs.
      CSPU5 Debugging Overlapping Objects and Screen Events_markdown_instruction: |
        #
        Use console.log to Test Overlapping Objects and the Screen\r
        \r
        There are
        two goals here:\r
        \r
        1. Practice inserting your own console.log statements.\r
        2.
        Investigate how the screen captures events (it's different).\r
        \r
        ## Do
        This:\r
        <img src="https://images.code.org/4100fcc7062f97ce8440003b3a17cd25-image-1477363054051.png"
        style="float: right">\r
        \r
        * **Add `console.log` statements to each of
        the 3 event handlers** we started you out with.\r
         * Make the text that gets
        printed *be descriptive* so that you know exactly what is happening when.\r
        \r
        *
        **Run** the program and try clicking where the diagram (at right) shows.\r
          *
        Click on each button\r
          * Click where the buttons overlap\r
          * Click on
        the screen (i.e. the background)\r
        \r
        **Investigate until you can answer
        these questions:**\r
        1. When you click on a location where two objects are
        overlapping, which event(s) fire(s)?\r
        2. When you click on an non-overlapping
        part of some object what gets triggered?\r
        3. When does a "click" on the
        "screen" get triggered?\r
        \r
        \r
        <details><summary>Answers: [click here]</summary>\r
        <br><br>\r
        1.
        When you click on a location where two objects are overlapping, which event(s)
        fire(s)?\r
        <br>\r
        <li><em> The event-handler for object that is on top gets
        triggered.  The object that is underneath is essentially blocked from being
        clicked in the overlapping portion</em></li>\r
        <br><br>\r
        2. When you click
        on an non-overlapping part of some object what gets triggered?\r
        <li><em>The
        event-handler for the object gets triggered as you might expect</em></li>\r
        <br><br>\r
        3.
        When does a "click" on the "screen" get triggered?\r
        <li><em>Always.
        Events that occur on the screen cannot be blocked by other objects.  If you
        set up an event listener for the screen it will capture EVERY event of that
        type, no matter what other UI elements are on the screen.  This behavior of
        the screen is done on purpose and is useful for certain kinds of things.</em></li>\r
        \r
        \r
        </details>\r
        \r
      CSPU5 First Time Console.log_markdown_instruction: |-
        # Exploring console.log\r
        \r
        <img
        src="https://images.code.org/cdc253db1b9a3685eaf5ea4b6bc30766-image-1444337429645.png"
        style="width: 250px; float: right; border: solid 1px black; margin-right:
        10px">\r
        \r
        In the last level, we saw a new command: `console.log`. You
        should have noticed that it prints out text in the Debug Console below the
        code workspace.\r
        \r
        The Debug Console area is an important tool for programmers.  You've
        seen it display error messages, but you can also have your program display
        messages there.  \r
        \r
        You can find `console.log` in the **Variables** code
        toolbox, and it is the command you use to send messages to the console --
        it's just about the simplest thing you can do to make your code generate
        output.\r
        \r
        **You try it:** Add a console.log statement to say your name\r
        \r
        *
        Drag out a `console.log` statement into the workspace and add it below the
        2 statements there.\r
        \r
        * Following the lead of the first two lines - update
        the code so that it says your name.\r
        \r
        * The output should look something
        like this: \r
        \r
        ![](https://images.code.org/64c82c1bf7ecb859d84192e5bffb3488-image-1477338603375.png)
      CSPU5 Layering and Deleting in Design Mode_markdown_instruction: |-
        # Design
        Mode: Layering and Deleting\r
        <img src="https://images.code.org/9e620f70869de438c4f0c66663686876-image-1444678130772.gif"
        style="width: 150px; float: right">User interface elements can overlap one
        another, so you'll want the ability to change the order or **depth** at which
        each one is shown. \r
        \r
        **You Try it:** Use the **depth** and **delete**
        tools to **create the "After" image** (shown below).\r
        \r
        * **Scroll to
        the bottom of the Properties tab** you'll find buttons which allow you to
        easily **change the depth** of an element.\r
        * **Change the depth** of elements
        by using the double or single arrows.\r
         * Click the double arrow to send
        all the way to front or back.\r
         * Click the single arrow to move up or down
        one layer.\r
         \r
        * **Delete an Element** by selecting it (clicking on it)
        in the design view and then clicking the **Red Delete button** in the properties
        tab.\r
        \r
        \r
        \r
        \r
        \r
        <table>\r
        <tr>\r
        \t<th style="text-align:center">Before</th>\r
            <th
        style="text-align:center">After</th>\r
        </tr>\r
        <tr>\r
        \t<td align=center><img
        src="https://images.code.org/023f749ecb58c91869a4eacab6701203-image-1444685187662.png"
        style="width:200px ; border: solid 1px black"></td>\r
            <td style="text-align:center"><img
        src="https://images.code.org/e45fc7d451c071683fd3b59466b106b0-image-1444684677212.png"
        style="width:200px; border: solid 1px black"></td>\r
        </tr>\r
        </table>
      CSPU5 Project - Multi Screen App_markdown_instruction: |-
        # Multi Screen App\r
        You
        will be creating your own multi-screen app to practice designing user interfaces
        and writing event-driven programs. \r
        \r
        **Look at the Project Guide and
        Planning Sheets before programming**.\r
        \r
        # Requirements Reminder\r
        *
        Your app will have at least **4 screens**.\r
        * Your app should include **text,
        images, buttons, and sound**.\r
        * There should be **no “getting stuck” on
        any screen.**  It should always be possible to navigate from a screen in your
        app to some other screen. \r
        * Your program code should follow **good style**.\r
        *
        Your user interface should be **intuitive to use**.
      CSPU5 Use Console.log to update IDs_markdown_instruction: |
        # Updating IDs and
        Debugging with Console Log\r
        \r
        In the last level you tested out the new
        command: `console.log`.  In this level we have a couple buttons with event
        handlers and `console.log` statements, but they are switched around!\r
        \r
        We
        should have given the buttons better ID names so we could tell the difference
        based on the ID. **Can you update the ID names and `console.log` messages
        to match the correct button? **\r
        \r
        # Do This\r
        \r
        * **Change the IDs**
        of the buttons in Design Mode to more descriptive names.\r
        \r
        * Switch to
        Code Mode and notice that the **ID pulldowns have been updated to include
        the new IDs**. (You still need to select the correct ID from the pulldown
        menu.)\r
        \r
        * **Update the `console.log` messages** to match the buttons.\r
      CSPU5 Use setScreen for first time_markdown_instruction: |
        # Adding Code: Switching
        Screens with *setScreen*\r
        \r
        <img src="https://images.code.org/9232bd923268d36158d63829145c9879-image-1477367827365.gif"
        style="float: right; width: 150px">\r
        \r
        **You Try it:** Add event handlers
        to the buttons that use `setScreen` to switch to the other screen. \r
        \r
        The
        result should be two-screen app which can switch back and forth between the
        "hello" and "go back" screens.  See example at right.\r
        \r
        * **Add an
        onEvent handler** for the smiley face image/button to respond to a "click"\r

        * Do it the easy way by inserting from design mode, or just drag an `onEvent`
        block into the code workspace.\r
        \r
        * **Add `setScreen` into the event handling
        function**\r
         * Make it switch to the other screen when the smiley face is
        clicked.\r
        \r
        **Run. Test. Debug**\r
        \r
        * Test to see if the clicking
        the smiley face switches screens\r
        * If it doesn't work, retrace your steps
        and try again.\r
        \r
        If it works, then **repeat these steps for the "go
        back" button.**\r
        \r
        * The result should look something like the example
        on the right. \r
      CSPU5 console.log debug when mouse events happen_markdown_instruction: |
        # Which
        comes first?\r
        \r
        Another useful thing to do with `console.log` statements
        is to use them to figure out the order in which events are triggered. In the
        code below one button has 3 different event listeners, that will respond to
        the events: `"mousedown"`, `"mouseup"`, and `"click"`\r
        \r
        The question
        is, if you click the button:\r
        \r
        * Will all 3 of these events trigger?
        \r
        * Will any of them trigger?  Which one(s)?\r
        * What order will these
        events be triggered in?\r
        \r
        **You try it**:\r
        1. Study the code and **make
        Prediction**\r
        2. **Run** the program\r
        3. **Were you right?** What's unexpected?\r
        4.
        **Keep testing** until you see what's happening.\r
        \r
      CSPU5 console.log in event v. global_markdown_instruction: |-
        # Predict what
        will happen\r
        \r
        We've added some `console.log` statements *both* in event
        handlers as well as just out in the open, between event handler definitions.
        \r
        \r
        * **Study the code first**\r
         * We've added some white space between
        lines to make it more readable.\r
        \r
        * **Predict:** What do you think will
        happen when you click Run?  What will display? Will it:\r
         * Print all 5
        messages?\r
         * Print only a few? Which ones?\r
         * Halt with an error message?\r

        \r
        * *After* you've made some kind of prediction, **hit Run**.\r
         * If
        the program runs, then try to use it - click on the buttons and such.\r
        \r
        *
        Were you right? Anything unexpected?\r
         * Reset and Run the program again
        a few times until you understand what's happening.\r
         \r
        <details><summary>What's
        happening? [click to expand]</summary>\r
        <li> As soon as you hit Run messages
        "1", "3" and "5" will display immediately. Those statements are out
        in the "open" rather than part of an event handling function - the computer
        can run them right away.</li>\r
        <li>Messages "1", "3" and "5" will
        only print once each time you run the program not matter what else you do</li>\r
        <li>Messages
        "2" and "4" will be displayed when the the buttons are clicked.</li>\r
        <li>In
        case you're wondering: <strong>This is bad code</strong>.  It's hard to
        read because of where the statements fall.  Typically if some code needs to
        run when the program starts up, you'd group it all together at the top of
        the program.  Scattering it about in and between event handlers and other
        functions is a recipe for a lot of buggy code that will be hard for you to
        work out.</li></details>
      CSPU5_AddImageToChaserGame_markdown_instruction: |
        # Now you do it: Add an image\r
        \r
        [lice
        cap]\r
        \r
        * add an image from icon, or from something you upload.\r
        \r
        *
        We'll make the image respond to events on the next level\r
        \r
        * Click continue\r
        \r
      CSPU5_AddImage_andMakeChaserGame_markdown_instruction: |
        # Now you do it: Add
        an image\r
        \r
        [lice cap]\r
        \r
        * add an image from icon, or from something
        you upload.\r
        \r
        * We'll make the image respond to events on the next level\r
        \r
        *
        Click continue\r
        \r
      CSPU5_AddLabelToChaserGame_markdown_instruction: |
        # Design Mode: Add a label\r
        \r
        <img
        src="https://images.code.org/092af4a9c90ad36fa44c636f1227e4d9-image-1476893390336.gif"
        style="float: right">\r
        \r
        Well, now we have the beginnings of a little
        game!  Time to go back to design mode to start embellishing our program.\r
        \r
        **You
        try it:** - Add a text label that says "Try to Catch the Button!"\r
        \r
        \r
        \r
        *
        Switch back to design mode\r
        * Drag a label on the screen <img src="https://images.code.org/c74c0e7fed308af92740d31cbd1098a9-image-1476892918698.png">\r
        *
        Set the text to be something like "Try to Catch the Button!"\r
        * Set any
        other properties or styles of the text label that you want.\r
        \r
        \r
      CSPU5_Debugging predict unexpected behavior - two onEvents to one ID_markdown_instruction: |-
        #
        Debugging Unexpected Behavior\r
        \r
        ## Predict - Observe - Reflect\r
        \r
        To
        understand a new piece of code good programmers often try to **first make
        a prediction about what will happen before running the program**. \r
        \r
        By
        forcing yourself to make a prediction (it doesn't matter if you're right
        or not) you are immediately alerted to any **unusual or unexpected behavior**
        and you can ask yourself, *"Huh? why did it do that?  Was that supposed to
        happen?"*  It might not be an error, but you gain invaluable insight and
        actually **learn faster**.\r
        \r
        **Predict:** For the code that is here,
        what will happen when the "Click Me" button is clicked? \r
        \r
         * **Study
        the code** - This program has **two event handlers** listening for events
        on the same button?\r
         * **Force yourself to make a prediction!** - "I don't
        know" is not a prediction!. \r
        \r
        Here are some options to think about:\r
        \r
        *
        There will be an error in the console immediately after hitting run\r
        * There
        will be an error in the console but not until you hit the button\r
        * Program
        does nothing\r
        * turtle only moves forward\r
        * turtle only turns left\r
        *
        turtle move forward *then* turn left \r
        * turtle turn left *then* move forward?\r
        *
        something else? \r
        \r
        **Observe:** Once you've made a prediction, close
        these instructions and **run the program** to observe what happens.\r
        \r
        **Reflect:**
        Was your prediction correct? If not what about your mental model might need
        to change? Talk about it with a classmate and experiment with the code to
        make sure you understand what is happening.
      CSPU5_FinalizeChaserGame_markdown_instruction: |
        # Add an Image and Make a Chaser
        Game!\r
        <img src="https://images.code.org/ed1e9852b33ca368cf8cd8e0b0159de7-image-1444336815528.gif"
        style="float: right">\r
        \r
        **Now You Try it** - add an image to your app
        and modify the code so that the image jumps around the screen rather than
        the button.  Your little game should have:\r
        \r
        * **Text** on the top of
        the screen with a title or instructions for what to do.\r
        * **An image**
        that "runs away" (moves randomly) based on some mouse event.\r
        \r
        **Tips:**\r

        * **Hint** - the easy way to do this is to simply change the IDs in `onEvent`
        and `setPosition` to respond to the image instead of the button.\r
         * Remove
        the button from the app after the image is working.  We don't need it anymore.\r

        * Change the label text so that the instructions make sense for your game.\r

        * The game is even more fun if you use  the `mouseover` event instead of `click`\r
        \r
        **Optional
        Extensions**:\r
         * Make the background interesting\r
         * Add another image
        that runs away.\r
         * See what happens with the commands `hideElement` and
        `showElement`\r
         * Have two UI elements where interacting with one controls
        or does something to the other.\r
        \r
        **Finalize your "Chaser Game"** and
        click Finish.\r
        \r
      CSPU5_Project - Multi Screen App_markdown_instruction: |-
        # Multi Screen App\r
        You
        will be creating your own multi-screen app to practice designing user interfaces
        and writing event-driven programs. \r
        \r
        **Look at the Project Guide and
        Planning Sheets before programming**.\r
        \r
        # Requirements Reminder\r
        *
        Your app will have at least **4 screens**.\r
        * Your app should include **text,
        images, buttons, and sound**.\r
        * There should be **no “getting stuck” on
        any screen.**  It should always be possible to navigate from a screen in your
        app to some other screen. \r
        * Your program code should follow **good style**.\r
        *
        Your user interface should be **intuitive to use**.
      CSPU5_U3 - Arrays - Demo App_markdown_instruction: |-
        # My Favorite Things\r
        \r
        Check
        out this simple app for creating a collection of your favorite things. **We're
        going to be working towards building this app** over the next several exercises.
        As you might expect, this application **uses an array** to store and organize
        information.\r
        \r
        # Do This:\r
        \r
        * Use the "My Favorite Things" app
        and try to **predict how arrays are used to create the functionality you observe.**
        \r
        * Some features to notice:\r
        \t* The app keeps track of a **list of your
        favorite things**.\r
            * You may use buttons to **move forward and backward
        through your list**.\r
            * The **current entry and total number of entries**
        are indicated at the top.\r
            * You may **add a new entry** at the current
        location in your list.
      CSPU5_U3 - Arrays - Wrap Up 1_markdown_instruction: |
        ## Choose: Array or Variable?\r
        \r
        Your
        app needs to store the following information. For each type of information,
        decide whether you would use an array or a variable to store it:\r
         \r
        *
        All the messages a user has sent\r
        * The highest score a user has ever reached
        on the app\r
        * A username and password to unlock the app\r
      CSPU5_U3 - Arrays - Wrap Up 2_markdown_instruction: |
        ## Free Response: Choosing
        Array or Variable

        In general, when do you think you should store information
        in an array, and when should you use a variable?
      CSPU5_U3 - Arrays - appendItem_markdown_instruction: |-
        # Adding Items to an
        Array\r
        \r
        <img src="https://images.code.org/c9244eb598416b5a3d9baac088bbaca8-image-1447267168567.39.06
        PM.png" style="width: 250px; float: right">\r
        \r
        In our last exercise
        we created our array and initialized it with some values. Another way to do
        this is to **add items to your array on separate lines**. The simplest way
        to do this is to add a new item to the end of your array using the `appendItem`
        command.\r
        \r
        <img src="https://images.code.org/74a2f2660d5aea8dec7dc4933f2c68d3-image-1447185901732.04.50
        PM.png" style="width: 250px; float:right; border: solid 1px black">\r
        \r
        To
        append means to add or to join. When you append an item to an array you actually
        add a new location to the end of the array that contains the new value, so
        that the total size of the array grows by one.  Since you can always add items
        to an array after creating it, it is very common to  **create an empty array
        and then add values in subsequent portions of your program**.\r
        \r
        # Do
        This:\r
        \r
        * **Read the documentation** for `appendItem`.\r
        * Create an
        **empty array** called `oddNumbers`.\r
        * Use `appendItem` to add the odd
        numbers 1-11 to your array.\r
        \r
        ![](https://images.code.org/41883beff3cb9810fed37ae684dc1fe8-image-1448312407634.gif)\r
        \r
        *
        **Use `console.log`** to confirm your array is holding the correct values.
        The output should look like the example below.\r
        \r
        ![](https://images.code.org/4daf7aff37f4796185fc608f20856a12-image-1489697355089.png)
      CSPU5_U3 - Arrays - assignment_markdown_instruction: |
        # Setting Values by Index\r
        \r
        Each
        location in an array can be treated like its own variable. We've already
        seen how we can use bracket notation to reference values stored at specific
        locations in an array. Just like with variables, **we can assign the value
        of a specific location in an array using `=`** (the assignment operator).\r
        \r
        **Example:**
        The value at index 0 of this array is set to 10.\r
        \r
        ![](https://images.code.org/d0bf9901deeffb1cd6553c27c38046a4-image-1447172887059.27.25
        AM.png)\r
        \r
        # Do This:\r
        \r
        <img src="https://images.code.org/cfa8d82d89e5227f22e3afe5f9c49698-image-1447366432447.13.11
        PM.png" style="width: 200px; float: right">\r
        \r
        Starter code is provided
        that creates an array of 0's and 1's. **Set all the values in this array
        to be 0**. \r
        \r
        * Use **indexes** and the **assignment operator** `=` to
        **set all the 1's to be 0**.\r
        * Check the output of the `console.log` to
        confirm **the array only contains 0's**. Example shown on the right.\r
        \r
      CSPU5_U3 - Arrays - assignment2_markdown_instruction: |-
        # Array Values: Arithmetic\r
        \r
        You
        can reference locations in arrays in arithmetic expressions, just like you
        might a variable.\r
        \r
        ![](https://images.code.org/a7d11342d8c72b34f2268e4104e43fbd-image-1447189790574.09.32
        PM.png)\r
        \r
        The starter code **creates an empty array and adds three random
        values to it**. \r
        \r
        ![](https://images.code.org/51b7c713ae398299a85ee8c0b9ee04f3-image-1447190702799.23.46
        PM.png)\r
        \r
        You will be adding code to your program that calculates the
        sum of the values in the array.\r
        \r
        **Notice** the difference between displaying
        an array as part of a string or by itself.  Example:\r
        \r
        * code: `console.log(myNumbers)`
        displays *with* brackets as: `[1, 2, 3, 4]`\r
        * code: `console.log("my list:
        "+myNumbers)` displays *without* brackets as: `my list: 1, 2, 3, 4`\r
        \r
        So
        when it's part of a string it *does not* print the square brackets around
        the ends of the list.  This is a "feature" of the language with no great
        explanation. In the first case it sees only a list and it produces a more
        technical representation. In the second case the system is trying hard to
        convert the list to a nice looking string.\r
        \r
        # Do This:\r
        \r
        * **Add
        a variable** to your program to hold the sum of the array values.\r
        * Assign
        the value of the variable to **the sum of the three array values**.\r
        * Use
        `console.log` to confirm that you have correctly calculated the sum of the
        values. Below is sample output from one run of the program.\r
        \r
        ![](https://images.code.org/a9ca48808e8e833d92b3bcdebc7b0bd4-image-1447189975738.12.31
        PM.png)
      CSPU5_U3 - Arrays - assignment3_markdown_instruction: |
        # Reassigning Array
        Values\r
        \r
        We've already seen many examples of how **a location in an
        array can be treated identically to a variable**. The last exercise we'll
        perform to prove this point is **reassigning array values**. The syntax for
        reassigning values stored in an array is identical to that used when reassigning
        variables. Even the `++` notation to increase a value by one works!\r
        \r
        ![](https://images.code.org/3cbd11c69e42daddce28e059388097db-image-1464228660945.png)\r
        \r
        The
        program you're about to see **creates an empty array and adds three random
        values to it**. You will be adding code to the program that **increases each
        value by one**.\r
        \r
        # Do This:\r
        \r
        * Add code to the program that **increases
        the value stored at each location in the array by one**.\r
        * Use `console.log`
        to confirm that you have correctly increased the values. Below is sample output
        from one run of the program.\r
        \r
        ![](https://images.code.org/42ca1f874a8a7b71e29b2ffd80ec31c3-image-1447191826756.43.37
        PM.png)\r
        \r
      CSPU5_U3 - Arrays - createFirstArray_markdown_instruction: |
        # Creating an Array\r
        \r
        Arrays
        have many features which make them different from variables, but **most of
        what you've learned about variables also applies to arrays**. For example,
        just like a variable:\r
        \r
        * Arrays should be given a **descriptive and
        meaningful** name.\r
        * Arrays are created using `var`.\r
        * Arrays can be
        initialized/set using `=`.\r
        \r
        **Example: Creating an Array**\r
        \r
        ![](https://images.code.org/0b7d201db2990f0189963bb6a565a057-image-1447097600773.33.08
        PM.png)\r
        \r
        This array contains 3 values: 100, 250, 500. Notice that the
        values are separated with commas `,` and that the entire array is enclosed
        in brackets `[ ]` . We can use `console.log` to display the contents of an
        array just like we would a variable.\r
        \r
        ![](https://images.code.org/7d4be70330108e3e5d6325fa4e721ef4-image-1447097904253.38.18
        PM.png)\r
        \r
        # Do This:\r
        \r
        * Following the format described above **create
        an array** which contains **the even numbers from 0 to 10**.\r
        \r
        <img src="https://images.code.org/872be32ff4ba4e9c733435d524a95c9e-image-1448311800271.gif"
        width=450px>\r
        \r
        * Make sure your array has a **descriptive and meaningful
        name**.\r
        * Use `console.log` to display the contents of your array. Below
        is an example of the output your program should generate.\r
        \r
        ![](https://images.code.org/230d988cf99556db04a8a4ad6a8d8a47-image-1447364062049.33.53
        PM.png)\r
        \r
      CSPU5_U3 - Arrays - expressionsAsIndexes_markdown_instruction: |-
        # Expressions
        as Indexes: Using Variables\r
        \r
        We can use **any expression that evaluates
        to a number** as an index in an array. Here are some examples:\r
        \r
        ![](https://images.code.org/6d4ecc9249dc9f3a845196b04d833c1a-image-1447268711944.24.53
        PM.png)\r
        \r
        # Do This:\r
        \r
        * **Starter code** has been provided which
        creates an array of colors.\r
        * **Write code** that logs **a random color
        from this list** to the console by generating a value for a random index.
        Try to write your program using `list.length` rather than hard-coding the
        length of the list.\r
        \r
        ![](https://images.code.org/d0463c0f2528e04c396f3b9cf219c3ed-image-1447370139548.gif)
      CSPU5_U3 - Arrays - favThings Counting Variable_markdown_instruction: |-
        # Current
        Index\r
        \r
        This app also allows a user to scroll through individual items
        in the array. In order to keep track of which index we are currently viewing,
        our application will need **a global variable that stores the current index**.
        In coming exercises we'll want our global index to change, so let's **make
        sure that your code references your global index** rather than fixed values.\r
        \r
        #
        Do This:\r
        \r
        <img src="https://images.code.org/d93b2abfec64ce67e8ccfecee14bae3d-image-1447346228581.36.43
        AM.png" style="width: 250px; float: right">\r
        \r
        * Create a **global
        variable** that will be used to keep track of the current index in the array.
        Set this variable to 0.\r
        * Update `setText` which displays the words to
        show your first favorite thing using **the global index variable** instead
        of a hard-coded number. \r
        * Update `setText` which displays the current
        item number to use **the global index variable** instead of a hard-coded number.\r
        \t*
        **Hint:** since arrays are zero-indexed **you will have to add one to your
        index** to generate the correct value to display.\r
        * **Note:** neither of
        these outputs will be able to change yet. Don't worry, we'll be taking care
        of that in coming exercises!
      CSPU5_U3 - Arrays - favThings Next_markdown_instruction: |-
        # Next Button\r
        \r
        Nice
        work! Your application should now have some simple output displaying one of
        your favorite things and indicating which item of your list you are showing.
        To make things more interesting, however, **we want to be able to change which
        item we display**.\r
        \r
        To change the item displayed, the user will use
        the "Next" and "Last" buttons. These should **increase or decrease the
        global index by one and then you should update the information displayed on
        the screen**. To start out with, however, we'll just be writing code for
        our Next Button. \r
        \r
        # Do This:\r
        \r
        * **Add an event handler** to the
        "Next" button.\r
        * Write code in this event handler that **increments your
        global index variable** and then **updates the output on the screen**.\r
        \t*
        **Note:** If your code from the last exercise was written to reference this
        variable then you should just be able to reuse it once you've incremented
        your variable. We'll talk more about this in the next exercise.\r
        * Run
        your program to **confirm that the user can move forward through the list
        and that the output displayed is correct**.\r
        \t* **Note:** You may notice
        that your program throws an error if the global index variable goes out of
        bounds. Don't worry about this for now - we'll fix it in a later exercise.
      CSPU5_U3 - Arrays - favThings Prev_markdown_instruction: |-
        # Last Button\r
        \r
        Our
        user can now move forward through our list of favorite things, and we're
        about to write code that allows them to move backwards as well. If you've
        written your code to reference your global index then this should only require
        you to decrease its value by one and reuse code that updates the screen output.
        Before we write the code for backwards let's work on cleaning up our code.\r
        \r
        **Removing
        Repeated Code:** Once you add the code for moving backwards through your array,
        your program will have three places where it updates the screen by setting
        the text of your screen elements. Rather than repeating this code we should
        **create a function** that updates the screen and then call it every time
        we need to refresh those elements. This will not only make our program easier
        to read and avoids the errors that can arise from redundant code, but it also
        makes it easier to make changes to how our program runs, since all the code
        that updates the screen is in a single place.\r
        \r
        # Do This:\r
        \r
        * **Write
        a function** that contains the `setText` commands you have used to update
        the screen.\r
        * **Replace** the places in your code where you used to have
        these commands with **calls to your new function**.\r
        * **Add an event handler**
        to the "Last" button that decreases the **global index variable** by one
        and then updates the screen by calling your new function.\r
        * Run your program
        to confirm that the user **can move forward AND backward** through the list
        and that the output displayed is correct.\r
          * **Note:** You may notice
        that your program throws an error if the global index variable goes out of
        bounds. Don't worry about this for now - we'll fix it in a later exercise.
      CSPU5_U3 - Arrays - favThings addItem_markdown_instruction: |-
        # Adding New Items\r
        \r
        Now
        we want our user to be able to add items of their own to the list. As you
        might have guessed, this is as easy as inserting an item into our array at
        the current index.\r
        \r
        # Do This:\r
        \r
        * **Add an event handler** to
        the "Add" button.\r
        * **Write code** in your event handler that:\r
        \t*
        Uses `getText` to access the user's new item.\r
            * Uses`insertItem` to
        add that item to your array at the current index.\r
            * Calls your update
        function to update the screen (the new item should be displayed).\r
        * Run
        your program to confirm that the user **can add items to the list** and that
        the output displayed is correct.
      CSPU5_U3 - Arrays - favThings bounds_markdown_instruction: |-
        # *if* Statements:
        Staying in Bounds\r
        \r
        Currently the user can increase or decrease the value
        in the global index **past the bounds of your array**. As a result you've
        probably already seen that errors are generated.\r
        \r
        To prevent this from
        happening, we're going to **add `if` statements** to the event handlers on
        the "Next" and "Last" buttons. They should check the value of the global
        index variable before changing it. If the user is about to step out of the
        bounds of your array they should either:\r
        \r
        * **Block:** Do not change
        the index if it will result in a value that is out of bounds.\r
        * **Wrap:**
        Set the index to be the other end of the array. In other words, going past
        the end of the array moves the index back to 0 and going past the beginning
        of the array sets the index to the last in the array (`list.length` will be
        helpful here).\r
        \r
        # Do This:\r
        \r
        * **Add `if` statements** to the event
        handlers on the "Next" and "Last" buttons that **prevent the global index
        from going out of bounds** using one of the two strategies described above.\r
        *
        Run your program to confirm that the user **cannot go out of bounds** and
        that the output displayed is correct.
      CSPU5_U3 - Arrays - favThings createArray_markdown_instruction: |-
        # Create Your
        Array\r
        \r
        Now that we've dealt with our design elements we'll need to
        start writing the actual code of our app. This app keeps track of a list of
        items, so we know that **we'll need to create an array** to store them. \r
        \r
        #
        Do This:\r
        \r
        * **Create an array** that will hold your list of favorite
        things.\r
        * **Add three of your own favorite things to your array.**
      CSPU5_U3 - Arrays - favThings firstOutput_markdown_instruction: |
        # Displaying
        Information to the User\r
        \r
        Before we make our application interactive,
        we'll want to practice creating some simple user output. When the app starts
        up, the first item in your list should be displayed. Let's write the code
        that will display this information to the screen. \r
        \r
        # Do This:\r
        \r
        <img
        src="https://images.code.org/d93b2abfec64ce67e8ccfecee14bae3d-image-1447346228581.36.43
        AM.png" style="width: 250px; float:right">\r
        \r
        * Using `setText` set
        the main text area to show your first favorite thing.\r
        * Using `setText`
        and `list.length` set the text indicating what item of the list the user is
        currently viewing.\r
        \t* **Hint:** since arrays are zero-indexed **you will
        have to add one to your index** to generate the correct value to display.
        For now you can just write in a `1` and worry about making it change later.\r
        *
        **Note:** neither of these outputs will be able to change yet. Don't worry,
        we'll be taking care of that in coming exercises!\r
        \r
      CSPU5_U3 - Arrays - favThings giveIDs_markdown_instruction: |-
        # Getting Started:
        Creating IDs\r
        \r
        To get your application off the ground we've provided
        **the user interface elements that you will use in your application**. Unfortunately
        they all currently have **default IDs** which don't reflect how the elements
        will be used.\r
        \r
        # Do This:\r
        \r
        * **Create a descriptive and meaningful
        ID** for each element in your app.
      CSPU5_U3 - Arrays - favThings keepPlaying_markdown_instruction: |-
        # Keep Going!\r
        \r
        Your
        app should now be fully functional - nice job! There are of course plenty
        of new pieces of functionality to add. If you have time feel free to make
        any improvements you wish. Here are some ideas:\r
        \r
        * Allow the user to
        **append items** rather than add them at the current location.\r
        * Give the
        user the ability to **remove** the item at the current index. This can be
        a little tricky if you **remove the item at the end of the list** so see if
        you can account for that.\r
        * Only add words **if they are not blank**.\r
        *
        **Improve the appearance** of the app.
      CSPU5_U3 - Arrays - indexPractice_markdown_instruction: |
        # Index Practice\r
        \r
        It
        will take some practice to get comfortable using array indexes. We'll do
        a couple of exercises to build your confidence.\r
        \r
        # Do This:\r
        \r
        <img
        src="https://images.code.org/4d52429f1d6f8e7812e14d73e2a89c45-image-1447366245418.08.51
        PM.png" style="width: 150px; float: right">\r
        \r
        **Starter code** has
        been provided that creates an array called `myNumbers`.\r
        \r
        * Use `console.log`
        and array indexes to write the contents of `myNumbers` to the screen in order,
        as shown to the right. Your commands should be of the form `console.log(myNumbers[index])`.\r
        \r
      CSPU5_U3 - Arrays - insertingItems_markdown_instruction: |-
        # Inserting Items:
        Array Indexes\r
        \r
        If you want to add elements in the middle of your array
        you can use `insertItem` to specify an **index** at which an item should be
        inserted.\r
        \r
        ![](https://images.code.org/46815edd373b9fe51c4efcf145474ecc-image-1447252675635.37.24
        AM.png)\r
        \r
        Just like `appendItem`, `insertItem` creates a new location
        in the array. However `insertItem` allows you to insert an item anywhere in
        the array, not just at the end, and it shifts all elements at or after its
        index one location over.\r
        \r
        # Do This:\r
        \r
        * **Read the documentation**
        for `insertItem`.\r
        * **Starter code** has been provided which appends some
        strings to an array, but right now they don't form a complete sentence.\r
        *
        Use `insertItem` to **individually insert strings to your array** to form
        a complete sentence.\r
        * Use `console.log` to confirm you succesfully created
        your sentence.\r
        \r
        ![](https://images.code.org/a77efe777082d387f64c4761d890c560-image-1447254451590.06.59
        AM.png)
      CSPU5_U3 - Arrays - insertionErrors_markdown_instruction: "# Out of Bounds\\r\n\\r\nIn\nmany
        languages trying to access indexes of an array that don't exist will\ncreate
        an error. **JavaScript allows for some strange behavior** with arrays\nthat
        it's useful to see, even though **you will likely never use this functionality**.\\r\n\\r\n**Warning:**\nsome
        of this code will generate errors or work in unexpected ways. Don't\nspend
        a long time trying to understand weird results. The point to take from\nthis
        is **referencing indexes that are out of bounds will almost never do\nwhat
        you intend**, and we'll be learning ways to avoid this as we move forward.\\r\n\\r\n#\nDo
        This:\\r\n\\r\n* **Starter code** has been provided which creates an array\nwith
        three elements.\\r\n* Uncomment the **first command that references indexes\nthat
        are out of bounds** and run the code.\\r\n* **Examine the output** and\ntry
        to understand what is happening.\\r\n* Reset and then **recomment** the\nline
        after you've used it. \\r\n* **Repeat the process for all the lines.**\\r\n\\r\n**Note:**\nWe
        have used a different style of comment in this program. `/* long block\ncomment
        */` is used when you want to write a multiple-line comment. "
      CSPU5_U3 - Arrays - introIndex_markdown_instruction: |-
        # Accessing Items in
        an Array\r
        \r
        An array is comprised of many locations. You can individually
        set or reference the information at each location of your array just like
        a variable. To tell your locations apart each has a separate number, or **index**,
        that identifies it.\r
        \r
        Arrays in JavaScript are **zero-indexed** which
        means the first index is 0. This is similar to binary number systems which
        begin counting at 0. For example an array of 10 items would have indexes 0-9.
        As a result **the last index is always one less than the length of the array**.\r
        \r
        **Accessing
        Array Items by Index:** If you know the index of the item you wish to access
        you can reference it using square brackets `list[index]` . The example below
        prints the value of the 4th element in the array.  \r
        \r
        ![](https://images.code.org/8b2da597fccaeeafb30b04991074cd8b-image-1447365422277.56.45
        PM.png)\r
        \r
        # Do This:\r
        \r
        **Starter code** has been provided which
        creates an array of the numbers 1 through 10\r
        \r
        * Use `console.log` to
        display the first item in your array.\r
        * Use `console.log` to display the
        last item  in your array.\r
        * Use `console.log` to display the number 5 from
        the array.
      CSPU5_U3 - Arrays - length_markdown_instruction: |-
        # *Array.length*\r
        \r
        As
        we saw in the last exercise, there are many strange behaviors that can result
        from referencing array indexes that are less than 0 or greater than the highest
        index in your array. **If you want to avoid these kinds of errors then it
        is useful to know how long your array is,** especially since we've seen that
        arrays can grow and shrink during the course of our program.\r
        \r
        ![](https://images.code.org/419a610bedaaf709d400c51a6399f482-image-1447263621427.40.15
        AM.png)\r
        \r
        You can always check the current length of your array using
        the command `list.length` where "list" is the name of your array. It evaluates
        to a number indicating how many items are in your array.\r
        \r
        # Do This:\r
        \r
        *
        **Starter code** has been provided which creates several long arrays.\r
        *
        **Use `list.length` and `console.log`** to determine how many items are in
        each array. An example of the output is below.\r
        \r
        <img src="https://images.code.org/f309b94e58f252599de709dd568441fd-image-1447690174179.08.29
        AM.png" style="width: 250px">
      CSPU5_U3 - Arrays - lengthMinus1_markdown_instruction: |
        # Expressions as Indexes:
        *list.length - 1*\r
        \r
        We have been accessing information in an array by
        using numbers, but we can actually use **any expression that evaluates to
        a number as an index in our array**. The first example of this we will explore
        is accessing the last item in our array.\r
        \r
        Arrays are **zero-indexed**,
        which means that the first index is 0. Therefore an array with a length of
        3 will have indexes 0, 1, and 2. Notice that **the last index is 1 less than
        the length**. This will always be the case, and so we can use this expression
        to access the last element in any array:\r
        \r
        ![](https://images.code.org/4b9d62e451188ea00a58102110e447f6-image-1447267224677.28.31
        PM.png)\r
        \r
        # Do This:\r
        \r
        * **Starter code** has been provided that
        which creates several arrays.\r
        * Use the syntax provided above and `console.log`
        to display the final item in each list.\r
      CSPU5_U3 - Arrays - remove_markdown_instruction: |-
        # Removing Items\r
        \r
        Sometimes
        we want to remove something from an array. In order to do so you'll need
        to specify the **index** of the item that should be removed.\r
        \r
        <img src="https://images.code.org/350e3dfe234b1ce1e47e11bc0629b47d-image-1447272428285.06.40
        PM.png" style="width: 250px">\r
        \r
        **Note:** `removeItem` removes the
        location in the array at the index provided. As a result **the array is one
        location shorter and all the indexes after the index provided will have their
        index decreased by one**.\r
        \r
        # Do This:\r
        \r
        * **Read the documentation**
        for `removeItem`.\r
        * **Starter code** has been provided which creates an
        array of strings.\r
        * Use `removeItem` to **individually remove all the "REMOVE"
        strings in your array** to form a complete sentence. \r
        * Use `console.log`
        to confirm you succesfully created your sentence.\r
        \r
        **Note:** Keep an
        eye out; your indexes will shift as you remove items.\r
        \r
        ![](https://images.code.org/5ba2247cafcfcb5d8be80db32126105e-image-1447273315312.21.17
        PM.png)
      CSPU5_U3 - Arrays - stringsInArrays_markdown_instruction: |-
        # Arrays Can Hold
        Strings\r
        \r
        So far we have been using arrays to hold numbers, but each
        location in an array could hold a string instead.\r
        \r
        ![](https://images.code.org/5088def6c9aa8c114fc415bf25d83511-image-1447195709238.48.13
        PM.png)\r
        \r
        **Note:** It is possible for an array to hold both strings
        and numbers, but **typically you will only want your arrays to hold one type
        of data**.\r
        \r
        # Do This:\r
        \r
        * Create an **empty array**.\r
        * Use
        `appendItem` to **individually add strings to your array**, forming a sentence
        of at least **5 words**.\r
        * Use `console.log` to confirm you succesfully
        created your sentence.\r
        \r
        ![](https://images.code.org/72b8a2bf0a98be39fba73498cb6ed5da-image-1489697463827.png)
      CSPU5_U3 - Canvas - 200dots_markdown_instruction: |
        # Loops on the Canvas\r
        \r
        To
        make things interesting, we're going to quickly add 200 dots to our canvas
        by using a `for` loop. **Locations on the canvas are relative to the top-left
        corner of the canvas, not the screen**. Therefore you will need to know the
        dimensions of your canvas in order to randomly place dots throughout it. You
        can find this information in Design Mode:\r
        \r
        ![](https://images.code.org/8e0c868a21f5c674efb6adef1040ec2b-image-1448040822360.33.29
        AM.png)\r
        \r
        # Do This:\r
        \r
        <img src="https://images.code.org/345b625e6954dc1ea2310c97aa08c59f-image-1448243004939.gif"
        style="float: right">\r
        * Add a **`for` loop that runs 200 times.**\r
        *
        Place the **`circle` command inside the loop** and **decrease the radius**
        (try 20).\r
        * **Use `randomNumber` to randomize the `x` and `y` values used
        to place your dots**. The ranges you select should be the width and height
        of your canvas.  \r
        * **COMMON MISTAKE ALERT:** If you test your code before
        setting the `x` and `y` values of the circle to random numbers, it will look
        like there's only one dot.  But really you will have just drawn 200 dots
        all at the same (x,&nbsp;y) position.\r
        \r
      CSPU5_U3 - Canvas - One Dot sprayPaint_markdown_instruction: |-
        # Making Spray
        Paint\r
        \r
        The next effect we would like to create is a "spray paint"
        effect. Instead of drawing a single dot for every location stored in `eventList`,
        we'll draw many small dots randomly placed around each location.\r
        \r
        We
        are going to start off just practicing **drawing a circle whose x and y locations
        use `offsetX` and `offsetY` with a small random value added**. This makes
        the line of code to draw the circle kind of long, but hopefully it's easy
        to understand if you read it carefully.\r
        \r
        ![](https://images.code.org/c0c0a9df4215be16953a26ec102b2f9c-image-1448294147046.png)\r
        \r
        #
        Do This:\r
        \r
        * **Set the style of another button** in Design Mode, give
        a label like "Spray Paint," give it a descriptive ID, and attach a click
        event handler to it.\r
        * **Copy the code from the "Original"** button into
        the event handler for spray paint.\r
        * Change the code for `circle` so that
        it will **draw a dot whose x and y locations use `offsetX` and `offsetY` with
        a small random value added. **\r
        \r
        ![](https://images.code.org/c0c0a9df4215be16953a26ec102b2f9c-image-1448294147046.png)\r
        \r
        *
        **Run your app** to make sure it is drawing small dots close to the original
        position. Look at the example below.\r
        \r
        ![](https://images.code.org/d6279085a5c6689dd5c745a0d0e28136-image-1448386996780.gif)
      CSPU5_U3 - Canvas - appendToArray_markdown_instruction: |-
        # Store Your Dots\r
        \r
        Now
        we're going to get into the core of the activity. We will be **creating a
        record of every dot your user draws**.\r
        \r
        To do this, we will append *every*
        `event` parameter to an array as events are generated. When we store every
        mouse location in an array, we can make many interesting effects and redraw
        the image in different ways, by looping over the array. First let's just
        make sure we can capture them all.\r
        \r
        # Do This:\r
        \r
        * Create a new
        array outside the event handler function: `var eventList = []`.\r
        \r
        * In
        your event handler, before you call the `circle` command, use `appendItem`
        to add the `event` parameter to `eventList`.\r
        ![](https://images.code.org/98f98c0895fafa87b8f6617e5b4629af-image-1448080702748.gif)\r
        \r
        *
        **Run the program** and draw some dots.\r
        \r
        * In the Debug Console type
        `console.log(eventList)` and inspect the contents. You should have a record
        of every event parameter used to draw a dot! (It might be a lot.)\r
        ![](https://images.code.org/425bdde5f2d87b34c037b533600f19b4-image-1448080857409.gif)
      CSPU5_U3 - Canvas - changeToMouseMove_markdown_instruction: |-
        # Drawing on *mousemove*\r
        \r
        Currently
        the user can click to add dots, but we want **to place dots wherever the user
        moves the mouse on the canvas**.\r
        \r
        To place dots whenever the mouse is
        moved, we'll be **changing the event type from `click` to `mousemove`**.\r
        \r
        #
        Do This:\r
        <img src="https://images.code.org/960ac863ac908506724eeb9f11165672-image-1448246938599.gif"
        style="float: right">\r
        * Change the event type in your event handler **from
        `click` to `mousemove`**.\r
        * **Run your program** to confirm that dots are
        being drawn anywhere the user moves the mouse.\r
        \r
        **Your user is now able
        to draw anywhere they want on the screen!**
      CSPU5_U3 - Canvas - clickToAdd_markdown_instruction: |-
        # Click to Add Dots\r
        \r
        Loops
        are one way of quickly adding dots to our canvas, but now we're going to
        change our app so that the user can decide when and how many dots to add.
        The canvas is a UI element, so **you can attach event handlers to it just
        like you would any other element**. We're going to move the circle command
        inside of a click event handler so that the user can click to add individual
        dots.\r
        \r
        ![](https://images.code.org/ecd25d3ff2bb50f0555ebd012e5c3b88-image-1448078111902.gif)\r
        \r
        #
        Do This:\r
        \r
        * **Add an `onEvent` handler**; set its ID to your canvas
        ID.\r
        * **Move the `circle` command out of your `for` loop and into your
        new event handler**.\r
        * **Remove the `for` loop from your program.**\r
        *
        **Run your program** and confirm that a single dot is added everytime a user
        clicks your canvas.\r
        \r
        ![](https://images.code.org/0064f8ac406a9f09dc742c81d8510f16-image-1448244621879.gif)
      CSPU5_U3 - Canvas - delete_markdown_instruction: |
        # Delete Button\r
        \r
        We
        are finally going to use those buttons! Each one will trigger an event handler
        that **processes the array `eventList` to create a visual effect** with the
        mouse data you have stored. **The first effect we are going to create is delete.**\r
        \r
        You
        may want to provide your user with a way to start over with their drawing.
        In order to do this, you will need to *both* **clear the canvas** and **delete
        all items from `eventList`.**  The easiest way to delete everything from the
        list is to simply set the value of `eventList` to be a new empty list.\r
        \r
        #
        Do This:\r
        \r
        <img src="https://images.code.org/f8fca0d889ae9ddc3ac9b33ba27fadce-image-1448311933871.gif"
        style="width: 200px; float: right">\r
        \r
        * In Design Mode, set the styling
        and text of one button to indicate it's the "delete" or "start over"
        button. Give your button **a descriptive ID**.\r
        \r
        * **Add a click event
        handler** to your button.\r
        \r
        * Within the event handler call `clearCanvas`.\r
        \r
        *
        Set `eventList` to the empty array (i.e., `eventList = []`).\r
        \r
        **Test
        your program** to make sure that starting over works the way it should.  \r
      CSPU5_U3 - Canvas - draw at click point_markdown_instruction: |-
        # Drawing Dots
        at Click\r
        \r
        Currently the user can click to add dots, but they're drawn
        at random locations around the canvas. We're going to use information stored
        in the `event` parameter of the event handler function **to place dots wherever
        the user clicks the mouse on the canvas**.\r
        \r
        The event parameter has
        two critical pieces of information we'll want, which are `event.offsetX`
        and `event.offsetY`. These hold **the location (relative to the top left corner
        of the canvas) that was clicked**. \r
        \r
        # Do This:\r
        \r
        <img src="https://images.code.org/1c6109cfc1b02c3ba737519d3f01d1b4-image-1448301532145.gif"
        style="width: 200px; float: right">\r
        \r
        * **Remove (or comment out) the
        `console.log` statement**.\r
        * Replace the `x` and `y` parameters of the
        `circle` command with `event.offsetX` and `event.offsetY`.\r
        * **Run your
        program** to confirm that dots are being drawn anywhere the user clicks the
        mouse.
      CSPU5_U3 - Canvas - freePlay_markdown_instruction: |-
        # Create Your Own Effect!\r
        \r
        You've
        just seen several ways that we can process our array `eventList` in order
        to create different effects. Now it's time to make your own! **Extend the
        functionality of one of the effects you just created, or create an entirely
        new one**. What else could you do with the information you've stored in your
        array? How else might you combine the programming tools you've developed?\r
        \r
        #
        Do This:\r
        \r
        * **Extend the functionality of one of the effects, or create
        an entirely new one of your own!**
      CSPU5_U3 - Canvas - introCanvas_markdown_instruction: |-
        # Introducing Canvas\r
        \r
        Today
        we are going to be building a drawing app around **a new UI element called
        the canvas**.![](https://images.code.org/26713ddcc9477e64c347c228d68cac0a-image-1447994134674.35.25
        PM.png)\r
        \r
        ![](https://images.code.org/044ad7db1cb4101f54302bd4013d1cc2-image-1448241882228.gif)\r
        \r
        **A
        canvas is simply a transparent rectangle on which you can draw basic shapes**
        like lines, circles, and rectangles. In fact, at first you might feel like
        we're going to end this unit in the way we started it, making turtle drawings.
        Don't worry, we'll quickly move into new and exciting things we can do with
        this new UI element.\r
        \r
        # Do This:\r
        <img src="https://images.code.org/3874f5e430a6290544466b2037490ae4-image-1448242142421.28.33
        PM.png" style="float: right">\r
        * **Starter code** is provided which places
        buttons on the bottom of your screen. **Ignore these for now; we'll be using
        them later**.\r
        * **In Design Mode, drag a canvas element into the empty
        space at the top of your app**, resize it, and give it a descriptive ID.\r
        *
        **Call `setActiveCanvas` with the ID you assigned to your canvas**, which
        makes it responsive to canvas commands.\r
        * **Add a giant circle to the canvas.**
        Use the `circle` command. Make its radius large enough that it goes off the
        edge of your canvas.\r
        \r
        Your code will look something like this:\r
        \r
        ![](https://images.code.org/f0cc22a1de686db72ebce90c720ae6e4-image-1447994225253.36.59
        PM.png)
      CSPU5_U3 - Canvas - movementFunction fix Orig_markdown_instruction: |-
        # Fix
        the "Original" Button\r
        \r
        Our "Original" button is now slightly broken
        because the effect it renders doesn't match our new free-form drawing which
        takes the movement of the mouse into account - it just draws fixed-size cricles.\r
        \r
        Let's
        fix the "Original" button.\r
        \r
        # Do This:\r
        \r
        In the event handler
        function for the "Original" button:\r
        \r
        * Change the value used for the
        radius from a fixed value to the same thing calculated for the free-form drawing.
        Since you wrote a function to do this calculation, it should be easy to call
        it from this code as well!\r
        * The **slight difference will be that you will
        be looping over the array of events.**  So the line of code that draws the
        circle might look like the one below. This line of code is certainly a mouthful,
        but it's basically the same as the line of code in your `mousemove` event
        handler; **it just references the event in the list instead.** <br><img src="https://images.code.org/dbb4cd9b98eba70aa2919a93544c1e03-image-1448314845862.40.21
        PM.png" style="width: 600px">\r
        * **Test your program** to confirm that
        clicking the "Original" button creates the same effect that occurs when
        doing free-form drawing.\r
        \r
        ![](https://images.code.org/4fcf033e87dc407d337941a7adc4766b-image-1448394246410.gif)
      CSPU5_U3 - Canvas - movementFunction_markdown_instruction: |-
        # Adjusting Circle
        Size\r
        \r
        Among the other pieces of information contained in each `event`
        parameter are the values `movementX` and `movementY`. These numbers tell us
        how far (in pixels) the mouse moved since the last mouse event was triggered,
        and can be used to measure the speed of the mouse. ** If the movement is large,
        the mouse is moving fast; if the movement is small, the mouse is moving slowly.**\r
        \r
        Let's
        use the mouse movement speed to make a cool effect. When we draw with a real
        pen or brush, the line usually gets thin when making quick strokes and is
        wider and darker when making slower ones. We can generate this effect by **using
        `movementX` and `movementY` to calculate the radius for the circle.**  Since
        this calculation might be a little tricky, a smart thing to do would be to
        **write a function** that takes `movementX` and `movementY` as parameters
        and **returns** a value that should be used as the radius.\r
        \r
        <img src="https://images.code.org/b9dc4c20d44af7b4e7725b71cd35fa2b-image-1448313734191.21.43
        PM.png" style="width: 350px; float: right; border: solid 1px black">\r
        \r
        There
        are several ways to do this. One possible way to write the function is provided
        on the right, which uses some arithmetic tricks. The function to the right
        is actually only three lines of code but is heavily commented to explain what
        it's doing. It makes use of a function called **`Math.abs` which returns
        the absolute value of a number.** Feel free to use this or another method
        of converting `movementX` and `movementY` into a radius.\r
        \r
        <details>
        <summary><strong>What is Absolute Value?</strong> [click to expand]</summary>\r
        `Math.abs`
        takes a number as input and returns the positive version of this number. \r
        \r
        In
        math, absolute value is often written with this | | symbol. So |10| is the
        absolute value of ten and |-10| is the absolute value of negative ten. Both
        evaluate to 10.\r
        \r
        In Javascript we use `Math.abs` instead of | |.  `Math.abs(-10)`
        and `Math.abs(10)` both evaluate to <strong>10</strong>.\r
        </details> <br>\r
        \r
        #
        Do This:\r
        \r
        * **Write a function like the one above** that accepts two
        parameters (one each for `movementX` and `movementY`) and returns a radius.
        A higher speed should lead to a smaller radius.\r
        * **Inside your `mousemove`
        event handler,** set the radius of the circle to the value returned by your
        function, where the function takes `event.movementX` and `event.movementY`
        as input.  For example, if using the function above, your code would be: <br>![](https://images.code.org/94a379336084954ba2ab27e80b17dee3-image-1448314255797.30.22
        PM.png)\r
        * Run your program and confirm that **when you draw, the speed
        of the mouse affects the radius of the dots**. The effect should look something
        like what's below \r
        \r
        ![](https://images.code.org/ee83d18f04e4d9d486428273b7321f9f-image-1448394071473.gif)
      CSPU5_U3 - Canvas - redrawOriginal_markdown_instruction: |-
        # Redraw Original\r
        \r
        If
        you were able to get that working and understand what you did, congratulations!
        That was some serious programming! If not, take a moment to go back and talk
        through the different components with a classmate. Most of the work we'll
        be doing for the rest of this lesson uses similar patterns, and you'll want
        to be comfortable with them as we add more complexity to our app.\r
        \r
        The
        first thing we are going to do is **create an "Original" button that will
        redraw the image with the same circle radius you used before**. The process
        will be nearly identical to how you added the "Random" button.\r
        \r
        In
        fact, the code to redraw the original is *exactly* the same, except instead
        of making the radius of the circle be random, it will just be the fixed value
        you used originally (probably radius 5 or so).\r
        \r
        ![](https://images.code.org/9238e313e8f635e2e6b31ad19d0fdc41-image-1448290929994.gif)\r
        \r
        #
        Do This:\r
        \r
        <img src="https://images.code.org/6cf1d46af7cd92cc1faf1501366e2e1a-image-1448312993714.gif"
        style="width: 200px; float: right">\r
        (**NOTE:** The instructions below
        are shown in the code animation above.)\r
        \r
        * Style a button, give it label
        like "Original," give it a meaningful ID, and add a "click" event handler.\r
        *
        Inside the event handler for your "Original" button...\r
        \t* Copy the code
        from the "Random" button event handler.\r
            * Paste it inside the event
        handler for the "Original" button.\r
        \t* Set the `radius` parameter to
        **whatever value you used when you originally drew dots**.\r
        * Test your
        program by drawing a figure and then hitting your "Randomize" button. Then
        hit the "Original" button. Your original drawing should appear.
      CSPU5_U3 - Canvas - redrawRandom_markdown_instruction: |-
        # Redraw Random - Part
        1\r
        \r
        The next effect we are going to create is **"random."** We will
        be redrawing the image but with randomly sized dots.\r
        \r
        We'll be doing
        this in two steps. For now, all you need to do is **change the first button
        in the row to have the proper styling and attach a click event handler to
        it**. **In addition, clear the canvas from inside the event handler** so we
        are ready to redraw our new image.  We don't want to delete all the items
        from the array though, as we will use them to redraw. Once you've done that,
        move on to the next exercise where we'll write the actual code in our event
        handler.\r
        \r
        # Do This:\r
        \r
        <img src="https://images.code.org/0116a787b989df18b077cb4657a5d379-image-1448312365660.58.05
        PM.png" style="width: 200px; float: right">\r
        \r
        * In Design Mode, **pick
        a button to use for Random. Set the styling and text of the button**. The
        image below shows one possible option, but you can style it however you like.\r
        \r
        *
        Give your button **a descriptive ID**.\r
        \r
        * **Add a click event handler**
        to your button.\r
        \r
        * **Call `clearCanvas`** from inside the event handler
        so the canvas is ready for the redraw.
      CSPU5_U3 - Canvas - redrawRandom2_markdown_instruction: |-
        # Redraw Random -
        Part 2\r
        \r
        Now we're ready to write the code for our "Random" effect.
        To do this, we will be clearing the canvas and then processing the array `eventList`
        to redraw all the dots with a random radius. \r
        \r
        You already set up the
        clear canvas, so next we'll need to process our array in order to find out
        the event information for each dot. You'll need to create a `for` loop that
        iterates through every index in `eventList` (recall the `length` command).
        Within your loop, you will be drawing dots referencing items stored in the
        array. \r
        \r
        As you write this code, remember that **you can treat an individual
        element of an array exactly like the kind of data it stores**. Inside a `for`
        loop, the event at index `i` can be accessed with the notation `eventList[i]`
        and the `offsetX` of that event can be accessed with `eventList[i].offsetX`.
        Again, you are essentially treating the array element as if it were the data
        it contains.\r
        \r
        ![](https://images.code.org/8ce01658ab31ce5f05101e58e3413681-image-1448250618520.gif)\r
        \r
        #
        Do This:\r
        \r
        <img src="https://images.code.org/6e081911348f3c1b07d17f83bd402249-image-1448312722857.gif"
        style="width: 200px; float: right">\r
        \r
        (**NOTE:** Everything listed
        below is shown in code animation above.)\r
        \r
        **Inside the "Random" button
        event handler...**\r
        * **Add a `for` loop** that runs `i` from 0 up to `eventList.length`
        to process over the array.\r
        * **Add a `circle`** command inside your loop.\r
        *
        **Set the x and y parameters** of the `circle` to `eventList[i].offsetX` and
        `eventList[i].offsetY`, respectively.\r
        * **Set the `radius` parameter**
        to some `randomNumber`. Pick any range you like. You can always change it
        later.\r
        * **Test your program** by drawing a figure and then hitting your
        "Randomize" button. It should be the same drawing, but now with randomly
        sized dots!
      CSPU5_U3 - Canvas - shiftKey_markdown_instruction: |
        # Draw When a Key is Pressed\r
        \r
        This
        app now lets the user draw, but they have no control of whether the pen is
        up or down. Let's give the user the ability to **choose when to put down
        the pen**. We won't even need to add a new event handler to our app! \r
        \r
        You
        may have noticed that the **`event` parameter includes information about whether
        certain keys were pressed when the event fired**. They are stored in variables
        with names like `shiftKey` or `altKey` and are stored as boolean values (true
        / false). We are going to use the `shiftKey` variable to decide when we should
        draw circles. \r
        \r
        # Do This:\r
        <img src="https://images.code.org/1a4b8f12645e5e88dee96d5542933c84-image-1448248202626.gif"
        style="float:right">\r
        \r
        * **Add an `if` statement inside your event
        handler function** where the condition is based on the value stored in `event.shiftKey`:
        **If `shiftKey` is true, then draw the circle.** <img src="https://images.code.org/a542766e8e52fed5ca992f2434ace086-image-1448307484936.37.32
        PM.png" width="200">\r
        \r
        * You might want to **decrease the radius of
        your circle** (for example to 5).\r
        \r
        * **Run the program and confirm that
        dots are only drawn when the shift key is pressed.**\r
        \t* The effect should
        be that the user can pick up and put down the pen to draw.\r
        \t* Hold the
        shift key down and move the mouse to draw.\r
        \t* Release the shift key to
        stop drawing.\r
        \r
        (**NOTE:** If you wish, use `console.log` to display
        the values in `event` again. You'll see `event.shiftKey` is one of the values
        stored.)\r
      CSPU5_U3 - Canvas - sketch_markdown_instruction: |-
        # Relative Indexes\r
        \r
        When
        looping over an array, we use a counter variable (typically `i`) to keep track
        of which index we're at. We can then access the contents at each index with
        the syntax `list[i]`.\r
        \r
        If we want, however, we could access the contents
        of the next element as well, since its index is just one greater. For example,
        if we are currently focused on the element at index `i`, then `list[i+1]`
        gives us access to the next element in the array. In other words, you can
        **reference indexes relative to your counter variable**.\r
        \r
        ![](https://images.code.org/3bb5dfce60951040172bfe08d98a8750-image-1448393281688.png)\r
        \r
        We
        are going to use relative indexing to create our final effect, which will
        look sort of like an etching of the image. The idea is simple:  **for every
        (x,&nbsp;y) location in the event list, draw a straight line between that
        location and the location stored 10 spots further down the array.** You will
        use the **`line` command** to draw a line connecting these points.\r
        \r
        #
        Do This:\r
        \r
        * **Read the documentation for `line`**.\r
        * **Set the style
        of the final button** in Design Mode, give a label like "Etch," give it
        a descriptive ID, and attach a click event handler to it.\r
        * **Call `clearCanvas`**
        to clear the screen.\r
        * Create a `for` loop that counts from **0 to `eventList.length
        - 10`**. \r
        \t* Why do you think we're not counting over the entire array?\r
        *
        Use `line` to draw a line between the (x,&nbsp;y) locations of `eventList[i]`
        and `eventList[i+10]`.  The full line of code will be another big one: ![](https://images.code.org/5de2c40b56042069379ff20ce5d10cab-image-1448393948598.38.49
        PM.png)\r
        * **Use `setStrokeColor` and/or `setStrokeWidth` inside the event
        handler** to make the lines visible; otherwise, they will be transparent,
        since we set the stroke color to transparent at the beginning of the program.\r
        *
        **Run your app** and confirm that your new button creates a sketch effect,
        as shown below.\r
        \r
        ![](https://images.code.org/c06c268a4757e8838435e576a676a0a2-image-1448395181441.gif)
      CSPU5_U3 - Canvas - sprayPaint_markdown_instruction: |-
        # Making Spray Paint
        with Nested Loops\r
        \r
        In order to make "Spray Paint" look more real you
        will need to draw multiple dots randomly placed around the original x and
        y locations. In order to do this, you will place one `for` loop inside of
        another, also known as a **nested loop**. You already have the main loop which
        visits every index in `eventList`. The inner loop should **draw 5 circles
        whose x and y locations use `offsetX` and `offsetY` with a small random value
        added**.   \r
        \r
        # Nested Loops\r
        \r
        <img src="https://images.code.org/15d7590ed9d4c07a40f22da4decc396c-image-1448153719856.54.36
        PM.png" width= 300px ; style="float: right">\r
        **When nesting loops, it
        is important that you use different variables to count your iterations**.
        Look at the example at right.  These nested loops effectively say: **"for
        every possible value in `eventList.length`, run a loop 5 times".  **\r
        \r
        Since
        `i` is used as the counter variable in the outer loop, we need to use a *different
        counter variable for the inner `for` loop*, or things will go haywire. Why?
        **If both loops used `i` as a counter variable, the inner loop would keep
        changing `i` and the outer loop wouldn't count properly.** The example uses
        `j` as the inner loop variable, but you could use anything that's *not* `i`.\r
        \r
        <img
        src="https://images.code.org/b5184430a48ac55d8f6fe7280c983186-image-1448387927473.gif"
        style="width: 450px">\r
        \r
        # Do This:\r
        \r
        <img src="https://images.code.org/290adbb84a51b89ca27414746d3a4a93-image-1448395072342.gif"
        style="width: 200px; float: right">\r
        \r
        (**Note:** Steps shown in animation
        above.)\r
        \r
        * **Add a `for` loop inside the existing `for` loop** in the
        spray paint event handler. \r
        * **Change the counter variable** to something
        other than `i` for the inner `for` loop.\r
        * **Change the boolean condition**
        so the inner loop will run **5 times.**\r
        * **Move the circle** code inside
        both `for` loops.\r
        * **Run your app** and confirm that your new button creates
        a spray paint effect, as shown below.
      CSPU5_U3 - Canvas - transparentDots_markdown_instruction: |-
        # Changing Colors
        in Canvas\r
        \r
        We would like to make our dots transparent so that we can
        see when they are drawn on top of each other. To set the color and transparency
        of shapes you draw on your canvas, you need to change both the **stroke**
        or outline color and the **fill** color. The functions `setStrokeColor` and
        `setFillColor` can be used to set those colors. \r
        \r
        These functions **accept
        strings of the form `"rgba(100, 200, 100, 0.5)"` as input**. The first three
        values in the string are RGB values and the last value is the transparency,
        as represented by a decimal number between 0 and 1.0.  All together it looks
        like this:\r
        \r
        ![](https://images.code.org/5f5692259df092ce4e000cbdf5a7df1b-image-1448077147778.png)\r
        <img
        src="https://images.code.org/e833a63e31dca7d5e8357c0b856dc7cc-image-1448244247180.gif"
        style="float: right; width: 150px">\r
        \r
        # Do This:\r
        \r
        **Before the
        loop: ** \r
        * **Add a `setStrokeColor` command** to set the stroke to **fully
        transparent**.\r
        * **Add a `setFillColor` command** to set your dots to full
        black and mostly transparent **(try a value of 0.2)**.
      CSPU5_U3 - Canvas - usingOffsetXY_markdown_instruction: |
        # The Event Parameter
        for Mouse Events\r
        \r
        We'd like to change the app so that when the user
        clicks on the canvas we draw a circle right where they clicked. To do that,
        we need to learn more about the **parameter passed by our event handler function,
        which by default is called `event`**.\r
        \r
        Recall that when we wanted to
        know what key the user pressed on a `keyPress` event, we checked the value
        stored in `event.key`. **The event parameter actually stores a great deal
        more information about each event**. \r
        \r
        When using the mouse, the event
        parameter carries information like the location of the mouse, how fast it's
        moving, and some other things as well. \r
        \r
        Let's get acquainted with
        the event parameter and what we can find out about the mouse.\r
        \r
        # Do
        This:\r
        \r
        * Add a `console.log` command inside the function of your event
        handler. Use it to display the `event` parameter.\r
        * Run your program and
        click your canvas. **The full contents of the `event` parameter should be
        displayed in the console**. \r
        * **Which values do you think hold the x and
        y coordinates**?  What else is there?\r
        * We won't use all of these, but
        it's interesting to see just how much is available.\r
        * Once you have experimented
        a little, move to the next level.\r
        ![](https://images.code.org/a6875e27019cb938a9576f0485648ca9-image-1448041792987.49.30
        AM.png)\r
      CSPU5_U3 - Conditional Basics - 6_markdown_instruction: |-
        # What happens after
        an *if* ?\r
        \r
        You may have noticed that our flowchart for our game so far
        only does something if the condition is true. What happens after the `if`
        statement? Let's find out.\r
        \r
        <img src="https://images.code.org/90b7a527091704a6ab4612b9f84db305-image-1446234882661.png"
        style="width: 200px">\r
        \r
        # Do This:\r
        \r
        * **Add a `setText` after
        the `if` statement** to "Nope. Guess again."\r
        \r
        <img src="https://images.code.org/f5c5de1b77a9caf16027e65ed24f91ec-image-1446234785600.gif"
        style="width: 450px">\r
        \r
        * **Run the program** a couple times to **look
        for a bug**. We will fix this on the next level.
      CSPU5_U3 - Conditionals - Combine AND OR Simple_markdown_instruction: |
        # Combining
        AND and OR\r
        \r
        You can express more complex conditions by combining **AND**
        and **OR** in one statement.  Here is the example from the previous page which
        you can use as a reference. This statement will evaluate to **true** if the
        day is Tuesday or Thursday AND their age is 15 or 16.\r
        \r
        ![](https://images.code.org/3f3aba7828abd88fdbd90eda60611bd3-image-1448062956405.06.36.png)\r
        \r
        #  Do
        This:\r
        We've provided you with starting code that prompts the user to enter
        a **day** and their **age** and stores the result in variables.\r
        \r
        **Add
        an `if` statement that uses both AND and OR operators**\r
        \r
         * The app
        should write "Sleep in!" if it's a weekend and the user is a teenager.\r

        * Otherwise it should write "Uh oh. Have to wake up."\r
         \r
        \r
        Try it
        out!\r
      CSPU5_U3 - Conditionals - Combine AND OR and NOT_markdown_instruction: |-
        # Combining
        AND and OR and NOT\r
        \r
        You can stick a NOT (`!`) in front of any boolean
        expression to invert its result. This opens the door to express the same logical
        statements in different ways.  \r
        \r
        For example, let's say you want to
        determine if a person, based on his or her age (under 12 or over 65) gets
        to pay a reduced price for a movie ticket.  You might express that like this:\r
        \r
        ```\r
        //
        If your age is less than 12 or greater than 65\r
        if( (age < 12) || (age >
        65) ){\r
        \twrite("You qualify for a reduced price!");\r
        }\r
        ```\r
        \r
        But
        you might also figure out a way to determine if a person gets a reduced price
        ticket by determining if his or her age is between 12 and 65 (`(age >= 12)
        && (age <= 65)`) and then taking the inverse of that.  So using the NOT operator
        this would work as well:\r
        \r
        ```\r
        // If your age is NOT between 12 and
        65\r
        if( !( (age >= 12) && (age <= 65) ) ){\r
        \twrite("You qualify for
        a reduced price!");\r
        }\r
        ```\r
        \r
        **Why use one over the other?** Personal
        preference.  Use the one that makes the most sense to you, but it should be
        a clear expression of what you are trying to say.  \r
        \r
        \r
        # Do This:\r
        We've
        provided you with starting code that prompts the user to enter a **day** and
        their **age** and store it in variables.\r
        \r
        **Add an `if` statement that
        uses both AND and OR operators**\r
        \r
         * The app should write "Time for
        school!" if it's a weekday and the user is under 18.\r
         \t* Hint: one way
        to say that it's a weekday is to say that it's NOT a weekend.\r
         * Otherwise,
        if it's a weekday and the user is 18 or older, it should write "Time to
        go to work!"\r
         * Otherwise, it should write "Time to relax for the weekend!"\r

        \r
         \r
        **WARNING** logic can get tricky sometimes.  Make sure to test your
        program with inputs that cover every possibility. There are 4 basic cases
        to test for:\r
        \r
         * It is a weekday and age is under 18\r
         * It is a weekday
        and age is not under 18\r
         * It's not a weekday and age is under 18\r

        * It's not a weekday and age is not under 18\r
        \r
        Try it out!
      CSPU5_U3 - Conditionals - Simple AND_markdown_instruction: |
        # AND Operator\r
        \r
        <img
        src="https://images.code.org/c1ec7743b3c8a888d76380f789263851-image-1446155863558.57.24
        PM.png" style="width: 100px; float: right">\r
        \r
        Again you will see the
        JavaScript boolean operators AND (`&&`)  and OR (`||`) in code toolbox. You
        can drag them out or simply type them.\r
        \r
        Let's now try out using an
        **AND** operator. As a reminder: **if both statements are true** then AND
        evaluates to **true**.  **If either (or both) are false** the AND operator
        will evaluate to **false**.\r
        \r
        <img src="https://images.code.org/4a461db916ded2acccfcdb9a75ef8838-image-1446483668310.png"
        style="width: 250px; float: right">\r
        \r
        # Do This:\r
        We've provided
        you with starting code that prompts the user to enter their **age** and stores
        it in a variable.\r
        \r
        **Add an `if` statement with a Boolean expression
        that uses an AND operator (`&&`)** to express:\r
        \r
         * IF *the age is between
        13 and 19* write "You are a teenager."\r
         * ELSE write "You are not a
        teenager."\r
      CSPU5_U3 - Conditionals - Simple OR_markdown_instruction: |-
        # OR Operator\r
        \r
        <img
        src="https://images.code.org/c1ec7743b3c8a888d76380f789263851-image-1446155863558.57.24
        PM.png" style="width: 100px; float: right">\r
        \r
        You will now see the
        JavaScript boolean operators AND (`&&`)  and OR (`||`) in code toolbox. You
        can drag them out or simply type them.\r
        \r
        Let's try OR right now.  As
        a reminder: the OR operator will evaluate to true if *either or both* statements
        are true. If both are false, the OR operator will evaluate to false. \r
        \r
        <img
        src="https://images.code.org/48d59f73e701d452dd74ae304db59d93-image-1446482464792.png"
        style="width: 200px; float:right"> \r
        \r
        \r
        # Do This:\r
        We've provided
        you with starting code that prompts the user to enter a day of the week and
        stores it in a variable.\r
        \r
        **Add the boolean expression to the if-statement
        to use an OR (`||`)** to express:\r
        \r
         * IF *it's Saturday or Sunday*
        then write **"It's the weekend!"** \r
         * Else write **"Can't wait for
        the weekend to get here."**
      CSPU5_U3 - Design Mode - Console Log_markdown_instruction: |
        # Updating IDs
        and Debugging with Console Log\r
        \r
        In the last level you tested out the
        new command: `console.log`.  In this level we have a couple buttons with event
        handlers and `console.log` statements, but they are switched around!\r
        \r
        We
        should have given the buttons better ID names so we could tell the difference
        based on the ID. **Can you update the ID names and `console.log` messages
        to match the correct button? **\r
        \r
        # Do This\r
        \r
        * **Change the IDs**
        of the buttons in Design Mode to more descriptive names.\r
        \r
        * Switch to
        Code Mode and notice that the **ID pulldowns have been updated to include
        the new IDs**. (You still need to select the correct ID from the pulldown
        menu.)\r
        \r
        * **Update the `console.log` messages** to match the buttons.\r
      CSPU5_U3 - Design Mode - Layers and Delete_markdown_instruction: |-
        # Layering
        and Deleting\r
        <img src="https://images.code.org/9e620f70869de438c4f0c66663686876-image-1444678130772.gif"
        style="width: 150px; float: right">User interface elements can overlap one
        another, so you'll want the ability to change the order or **depth** at which
        each one is rendered. \r
        \r
        If you **scroll to the bottom of the Properties
        tab** you'll find buttons which allow you to easily **delete or change the
        depth** of an element.\r
        * **Delete an Element** by selecting it (clicking
        on it) in the design view and then clicking **Delete** in the properties tab.\r
        *
        **Change the depth** of elements by using the double or single arrows.\r

        * Click the double arrow to send all the way to front or back.\r
         * Click
        the single arrow to move up or down one layer.\r
            \r
        # Do This:\r
        \r
        Use
        the **delete** and **depth** tools to **create the "After" image**\r
        \r
        \r
        <table>\r
        <tr>\r
        \t<th
        style="text-align:center">Before</th>\r
            <th style="text-align:center">After</th>\r
        </tr>\r
        <tr>\r
        \t<td
        align=center><img src="https://images.code.org/023f749ecb58c91869a4eacab6701203-image-1444685187662.png"
        style="width:200px ; border: solid 1px black"></td>\r
            <td style="text-align:center"><img
        src="https://images.code.org/e45fc7d451c071683fd3b59466b106b0-image-1444684677212.png"
        style="width:200px; border: solid 1px black"></td>\r
        </tr>\r
        </table>
      CSPU5_U3 - Design Mode - Multi Screens 2_markdown_instruction: |-
        # Switching
        Screens\r
        \r
        In the last level you made two screens, a black one and a white
        one. However when you ran the app you probably noticed that you had no way
        to see the second screen. Let's fix that.\r
        \r
        In order to switch between
        screens we have added a new command: `setScreen`. Read the documentation to
        figure out how this command works.\r
        \r
        <img src="https://images.code.org/152f45b312da467f0b553efc9fba20a7-image-1444354703453.gif"
        style="width: 250px; float: right">\r
        \r
        **Goal:** Make a 2 screen app
        which can switch back and forth between a black screen and a white screen
        using buttons.\r
        \r
        # Do This:\r
        \r
        * **Put a button on each screen**.  \r
        \r
        *
        **Set up event handlers** for each of your buttons. \r
        \r
        * **Use the `setScreen`
        block to switch screens** when the buttons are clicked.\r
        \r
        * Test out
        your app to make sure you can switch back and forth between the two screens.
      CSPU5_U3 - Design Mode - Multi Screens_markdown_instruction: |-
        # Second Screen\r
        \r
        Up
        until now our apps have only been able to have one view. With Design Mode
        we can now make multiple screens and switch between them!\r
        \r
        **Goal:**
        Make a 2 screen app with a black screen and a white screen. \r
        \r
        <img src="https://images.code.org/e35a6f494cf6f0c57c66a1aef651cdb0-image-1444353622241.gif"
        style="width: 250px; float: right">\r
        \r
        # Do This:\r
        \r
        Switch to Design
        Mode and **add a second screen**. There are two ways to add a second screen:
        \r
        \r
        * Drag out <img src="https://images.code.org/4337b39cfd797ed9289b70fb6cb365fb-image-1444353631083.17.39
        PM.png" style="width: 50px"> from the Design Toolbox. Check out the screen
        dropdown menu at the top right of the app window. You should now have two
        screens!  <img src="https://images.code.org/b48d978335701888b744702f25f11b28-image-1444353746012.17.07
        PM.png" style="width: 75px"> \r
        * From the screen dropdown menu at the
        top right of the app window click *New Screen*. \r
        \r
        Make screen1 white
        and screen2 black. **Set the background color for a screen in the Properties
        tab**.  Make sure to rename the screens with appropriate IDs.
      CSPU5_U3 - Design Mode - WTF Console Log_markdown_instruction: |-
        # Console Log\r
        In
        the last level, we saw a new command: `console.log`. You may have noticed
        that it prints out text in the Debug Console below the code workspace.\r
        \r
        <img
        src="https://images.code.org/326e0f6c7d3b846ba06db998f06f56aa-image-1444419414248.36.33
        PM.png" style="width: 450px; border: solid 1px black"> \r
        \r
        The Debug
        Console is an important tool for programmers.  You've seen it display error
        messages, but you can also send messages that a user cannot see to the Debug
        Console while a program is running. <img src="https://images.code.org/cdc253db1b9a3685eaf5ea4b6bc30766-image-1444337429645.png"
        style="width: 250px; float: right; border: solid 1px black"> The Debug Console
        is really helpful for debugging programs because you can send messages to
        yourself from within your own code!\r
        \r
        You can find `console.log` in the
        code toolbox under the Variables tab.\r
        \r
        # Do This:\r
        \r
        * Drag out
        3 `console.log` commands into the workspace.\r
        \r
        * Update each `console.log`
        with your own messages.\r
        \r
        * Run the program a couple times to test out
        this new command.
      CSPU5_U3 - Design Mode -Recreate Beyond Buttons_markdown_instruction: |
        # Improved
        Chaser Game\r
        \r
        Now lets improve the "Chaser Game".  This is where you
        get to use your creativity. Make it look nice!\r
        \r
        In addition you will
        notice a new command in the toolbox: `playsound`! Read the documentation about
        how to add sounds.\r
        \r
        **Note:** Your code from before has been provided
        for you.\r
        \r
        # Do This:\r
        \r
        * **Create a Welcome Screen** that explains
        the rules of the game. Include a "Start Game" button.\r
        \r
        * Update the
        your code so that the **image jumps to a new location when it is clicked**.
        \r
        \r
        * **Play a sound** each time the image is clicked.\r
        \r
        * **Add
        a Game Over Screen** with a lose message and button to start over. The Start
        Over Button should direct back to the Welcome Screen.\r
        \r
        * **Make the
        user lose**, by sending them to the Game Over Screen, when the background
        is clicked.\r
        \r
        \r
      CSPU5_U3 - Design Mode 1_markdown_instruction: |
        <img src="https://images.code.org/5e6fa5738796d69775c0786ca9b4a076-image-1476735925167.png"
        style="float: right">\r
        # Design Mode\r
        \r
        **You Try it:** Add a large
        red button to your app using Design Mode.\r
        \r
        * Switch to Design Mode\r
        *
        Drag a button onto the app screen\r
        * Change the text to say "Click Me!"\r
        *
        Make the color of the button red.\r
        \r
        \r
      CSPU5_U3 - Dice - Dropdown and Score_markdown_instruction: |-
        # Adding Guess
        and Score to Dice Game\r
        \r
        Let's have the user guess the number that will
        come up when we roll a single die. \r
        \r
        You can have multiple `if` statements,
        one after another, if they have different purposes which are separate. \r
        \r
        **
        Note: ** Use the flowchart below to help you figure out the logic of the game.\r
        \r
        #
        Do This:\r
        \r
        * **Add a dropdown** to take in the user's guess from 1 to
        6.\r
        \r
        * **Add a set of `if` statements to check if the dice roll number
        is equal to the user guess.** Put this set of `if` statements after your set
        of `if` statements for the dice image. It should be completely separate from
        the other set of `if` statements. \r
        \r
        * Create a variable to **keep track
        of score**. Give 10 points if they guess right and take one point away when
        they guess wrong.\r
        \r
        * **Display the score** on the screen and update
        it after each dice roll.\r
        \r
        <img src="https://images.code.org/ac24917ca18606f6f3c31a6be1a16d73-image-1446174953979.png"
        style="width: 100%">\r
        <a href="https://images.code.org/ac24917ca18606f6f3c31a6be1a16d73-image-1446174953979.png"
        target="_blank">Open diagram in a new tab</a>
      CSPU5_U3 - Dice - Dropdown with Strings_markdown_instruction: |-
        # Adding Difficulty
        Levels: Dropdowns with Strings\r
        \r
        Let's add another element to our dice
        game: **difficulty levels**. The user will pick either "Easy" or "Hard."  These
        are strings so you might be wondering how to check for equality. **The `==`
        works on strings as well!** It checks if the first string is exactly the same
        as the second string. **Strings must be the same letters and even have the
        same case to be equal**! So "dog" and "Dog" would not be equal. \r
        \r
        #
        Do This:\r
        \r
        * **Add a dropdown** for difficulty level with the options
        of "Easy" or "Hard." \r
        \r
        * **Create an `if` statement for difficulty
        level** which prints the difficulty level to the console.\r
        \r
        <img src="https://images.code.org/9db291c8dd4192390e008aa764576cd3-image-1446175136919.png"
        style="width: 100%">\r
        <a href="https://images.code.org/9db291c8dd4192390e008aa764576cd3-image-1446175136919.png"
        target="_blank">Open diagram in a new tab</a>
      CSPU5_U3 - Dice - If_markdown_instruction: |
        # Using `if` to Display Images\r
        \r
        We
        are going to set up a dice game. We want to show a picture of a single die
        for each random number generated 1 to 6. We've already set up the screen
        in Design Mode, with a button to generate the roll and an image to show a
        picture of the die.\r
        \r
        **Note:** The flowchart for the desired behavior
        is below.\r
        \r
        # Do This:\r
        \r
        * Add an event handler for the Roll! button
        so that when the button is clicked it generates a random number from 1 to
        6. \r
        \r
        * Add conditionals (`if`, `else if`, and `else`) to change the
        picture of the image (ID: `dice_image`) to display the correct side of the
        die depending on the random number generated. You will need to use <img src="https://images.code.org/89f2c13ef4ead590475c863a087597f8-image-1446535826599.30.16.png"
        style="width:150px"> with the URLs below to set the images for the die.\r
        \t*
        <img src="https://code.org/images/dice/1.png" style="width: 50px"> Dice
        1 Image URL -  https://code.org/images/dice/1.png\r
            * <img src="https://code.org/images/dice/2.png"
        style="width: 50px"> Dice 2 Image URL -  https://code.org/images/dice/2.png\r
            *
        <img src="https://code.org/images/dice/3.png" style="width: 50px"> Dice
        3 Image URL - https://code.org/images/dice/3.png\r
            * <img src="https://code.org/images/dice/4.png"
        style="width: 50px"> Dice 4 Image URL - https://code.org/images/dice/4.png\r
            *
        <img src="https://code.org/images/dice/5.png" style="width: 50px"> Dice
        5 Image URL - https://code.org/images/dice/5.png\r
            * <img src="https://code.org/images/dice/6.png"
        style="width: 50px"> Dice 6 Image URL -  https://code.org/images/dice/6.png\r
        \r
        <img
        src="https://images.code.org/392c125a2620ac4949091fc075864f4c-image-1446174585241.png"
        style="width: 100%">\r
        <a href="https://images.code.org/392c125a2620ac4949091fc075864f4c-image-1446174585241.png"
        target="_blank">Open diagram in a new tab</a>\r
      CSPU5_U3 - Dice - Nested_markdown_instruction: |-
        # Nested *if* Statements\r
        \r
        <img
        src="https://images.code.org/1774efb17571d3370662e34b705dde47-image-1446485939643.37.11
        PM.png" style="width: 150px; float: right">\r
        \r
        **Let's change the
        scoring of the game to match the difficulty level.** \r
        \r
        New scoring rules:\r
        *
        _Easy: +10 points right answer / -1 point for wrong answer_\r
        * _Hard: +1
        point right answer / -1 point for wrong answer_\r
        \r
        How do we check _both_
        the difficulty level and if the user's guess was correct? **We can actually
        put `if` statements inside of other `if` statements!** So we first want to
        check what the difficulty level is and then check if the user was right or
        wrong to determine the score.\r
        \r
        ** Note: ** The flowchart below outlines
        the logic you are trying to implement.\r
        \r
        # Do This:\r
        \r
        * Move a copy
        of the score `if` statement inside of the difficulty levels. Be careful with
        indenting. All of the `if` statements for score need to be inside of the difficulty
        `if` statement (i.e. indented 1 level more than the difficulty `if` statement)\r
        \r
        <img
        src="https://images.code.org/2125a027997aeca75d18b8423058063d-image-1446485524945.gif"
        style="width: 350px">\r
        \r
        \r
        * Edit the `if` statements to give the
        correct scores\r
        \t* Easy level (+10 right, -1 wrong)\r
            * Hard level
        (+1 right, -1 wrong)\r
        \r
        <img src="https://images.code.org/3b95a9f5cca60fc0ffbf7c2fb174d737-image-1446175290414.png"
        style="width: 100%">\r
        <a href="https://images.code.org/3b95a9f5cca60fc0ffbf7c2fb174d737-image-1446175290414.png"
        target="_blank">Open diagram in a new tab</a>
      CSPU5_U3 - High Low - Debug_markdown_instruction: |
        # Debug Conditionals\r
        \r
        "Help!
        I was trying to give the player a hint when their guess was within 2 of the
        secret number but the code I wrote isn't working. **Can you fix it?**"\r
        \r
        This
        picture shows what the message should be based on the difference between the
        secret number and the player's guess:\r
        \r
        ![](https://images.code.org/8b6e60db87e3c704ae5209c8c608f5d5-image-1481691055804.png)\r
        \r
        *
        Run the code to identify when the program is not working correctly (try guessing
        numbers 1-6)\r
        * Fix the problem with the order of the conditionals.\r
        \r
        **Hint:**
        \r
        * The major problem here is that **conditional statements run in order
        from top to bottom**. \r
        * Remember you have to check the smallest/most narrow
        case first, and work up from there.\r
        * The conditions might be slightly
        non-intuitive at first glance.\r
        * If you want to re-arrange the conditions
        it might be easier if you **switch to text mode**\r
        \r
        <details><summary>Check
        out the flow chart for the logic I wanted. [Click to Expand]</summary>\r
        \r
        <a
        href="https://images.code.org/76681a7d86bd4097417b25b682eee5a8-image-1458309676819.png"
        target="_blank">\r
        <img src="https://images.code.org/76681a7d86bd4097417b25b682eee5a8-image-1458309676819.png"
        style="width: 350px;">\r
        Click image to open larger in a new tab</a>\r
        </details>\r
        \r
      CSPU5_U3 - High Low - Dropdown_markdown_instruction: |-
        # Dropdown\r
        \r
        On
        the last level we used `promptNum` to get the user's guess. However, we had
        no way to limit them to the numbers we wanted. They could have typed 11 even
        though we told them not to. A better way to get input with a limited set of
        options is the dropdown. The <img src="https://images.code.org/3b21b4288a2a155d1e9a3c2cf3a5b09b-image-1446229368079.28.23
        PM.png" style="width: 75px"> is in your Design Mode Toolbox. You can control
        the list of options users can choose and then use `getText` to get the chosen
        number.\r
        \r
        We are going to need an event handler in order to do this.
        The event handler will detect when the user has changed the value of the dropdown.
        \r
        \r
        # Do This:\r
        \r
        * **Add a dropdown** for their guess instead of
        `promptNum`. Make sure to give it a good ID.\r
        \r
        <img src="https://images.code.org/fea164f6e53d1ce0c50981565e066d4c-image-1446229598357.gif"
        style="width: 350px">\r
        \r
        * Under properties **find the Options** and
        change it to the **numbers 1 to 10**\r
        \r
        <img src="https://images.code.org/0cfecbcdcfb95fc30876155ec6a3a021-image-1446229593687.gif"
        style="width: 250px">\r
        \r
        * Add an event handler to detect the `change`
        event on your dropdown.<br><br>\r
        <img src="https://images.code.org/48cffda5b7ff3a446116a39b4dbcbe8c-image-1446232308751.gif"
        style="width: 150px; float: right">\r
        * Move your `if` statement inside
        the event handler so it will check each time the dropdown is changed.<br><br>\r
        *
        When the dropdown is changed **use `getText` to find out the user's guess**.
        Save the guess using a variable. **Don't forget about scope!**<br><br>\r
        *
        Test your app -- it should work like the demo.
      CSPU5_U3 - High Low - Else if_markdown_instruction: |-
        # Guess the Secret Number
        with *else-if*\r
        \r
        In this guess-the-number game, the starting code tells
        the user whether they were right or wrong.  Let's help the user out even
        more by telling them if they guessed correctly or if their guess was too high
        or too low. \r
        \r
        There are **only 3 possible cases:**\r
        \r
        * They were
        right.\r
        * Their guess was higher than the number.\r
        * Their guess was lower
        than the number.\r
        \r
        Use a conditional with and `if`, `else-if`, and a
        final `else` to implement this.\r
        \r
        **Remember:**  You can create an `else-if`
        statement by hitting the <img src="https://images.code.org/f762344bc839dd8385730bb7d909657f-image-1446237096776.31.12
        PM.png" style="width: 40px"> at the bottom of an `if` statement. The first
        <img src="https://images.code.org/f762344bc839dd8385730bb7d909657f-image-1446237096776.31.12
        PM.png" style="width: 40px"> will add an `else`, the second will add an
        `else-if`.\r
        \r
        \r
        # Do This:\r
        \r
        * **Add an `else-if` statement to
        accommodate the 3 conditions.**\r
        \r
        * **Update the conditions** using `<`,
        `>`, and `==` to tell the user if their guess was correct, high, or low.\r
        \r
        *
        **Test out the program** to make sure your updates worked.\r
        \r
        <details><summary>Visual
        Explanation [Click to expand]</summary>\r
        <li>Sometimes it's helpful to
        see how the program should flow with a flow chart.  The flow chart below depicts
        what should happen </li>\r
        \r
        <img src="https://images.code.org/f7e483414dfe1d4585841e653e44d8b0-image-1446169181724.png"
        style="width: 500px">\r
        </details>
      CSPU5_U3 - High Low - Else_markdown_instruction: |-
        # *else*\r
        \r
        <img src="https://images.code.org/b7942d778a54465ad6f9f19fbab8d1ef-image-1446237289306.34.23
        PM.png" style="width: 150px; float: right">\r
        \r
        Let's add an `else`
        statement so we can tell the user when they are right and when they are wrong.\r
        \r
        **Note:**  You
        can create an `else` statement by hitting the <img src="https://images.code.org/f762344bc839dd8385730bb7d909657f-image-1446237096776.31.12
        PM.png" style="width: 40px"> at the bottom of an `if` statement.  There
        is also an `if-else` block in the toolbox. \r
        \r
        \r
        # Do This:\r
        \r
        *
        **Add an `else` statement**\r
        \r
        * **Move your `setText` inside the `else`
        statement.** So it should say "Nope that's not it. Guess again." when the
        user does not guess the secret number.
      CSPU5_U3 - High Low - If_markdown_instruction: |-
        # *if* Statement\r
        \r
        <img
        src="https://images.code.org/040c8364e3795252194b816623e949e5-image-1446227663554.54.03
        PM.png" style="width: 100px; float: right">\r
        \r
        The boolean expression
        we tested on the last level allows us to make decisions. In order to make
        these decisions we need to use something called a conditional. **Conditionals
        check if a boolean expression is true and then will execute the code inside
        of the `if` statement.** \r
        \r
        <img src="https://images.code.org/84123a7c317c63d8876b6b56086d717e-image-1446228290588.png"
        style="width: 150px; float: right">\r
        \r
        Over the number couple levels
        we are going to be creating a **Guess My Number game**. The starter code uses
        `promptNum` to ask the user for a number from 1 to 10. The `if` statement
        checks if the user guess is equal to the secret number.  Right now nothing
        happens when they guess the right number. Can you fix that?\r
        \r
        # Do This:\r
        \r
        *
        Read the code to identify the boolean expression.\r
        * Add a text label to
        the screen. Have it start out with "Guess my secret number!"\r
        * **Set
        the text label to say "You got it right!" from inside the `if` statement**.
        This will tell them they get it right only when that condition is true!\r
        *
        **Test your code out** to make sure it works.\r
        \r
        <img src="https://images.code.org/2f3487ec7a8d7cec1605f3da830c83f8-image-1446227512726.gif"
        style="width: 350px">
      CSPU5_U3 - Keys - Add Image URLs_markdown_instruction: |-
        # Adding Image URLs\r
        \r
        We're
        ready to start improving the "My Favorite Things" app. \r
        \r
        We'll do
        this in two steps:\r
        1. We will change it from scrolling text to scrolling
        images.\r
        2. We will add key events to scroll with the keyboard.\r
        \r
        **Step
        1:**\r
        * The default values in your array should be image URLs.\r
        * The
        large **text area** needs to be changed to an **image**.\r
        * Instead of **setting
        the text**, you'll now be using `setImageURL` to set the URL of the image.\r
        \r
        #
        Do This:\r
        **NOTE: We've re-loaded the code from the "My Favorite Things"
        App you wrote in the previous lesson.** (If you want to refer to code you
        just wrote, you can go back to look at it.)\r
        \r
        * **Set the default values**
        in your array to be image URLs. (You might need to take a minute to go collect
        a few if you didn't in preparation for this lesson.)\r
        * In Design Mode
        **delete the text area** and replace it with an **image**. Make sure your
        image has a descriptive and meaningful ID.\r
        * Inside your function that
        updates the display **replace `setText` with `setImageURL`**. Make sure you
        reference your new image element **by its correct ID**.<br>\r
        <img src="https://images.code.org/9f7f4aeeb9b1a84ae781043602166865-image-1447337890448.gif"
        style="width: 350px">\r
        * ** Test your app** to confirm that it's now
        showing the images in your array.
      CSPU5_U3 - Keys - Buttons and Keys_markdown_instruction: |
        # Buttons and Keys\r
        \r
        We
        now know how to respond to key events, but often we want the user to be able
        to **do the same thing with the app in multiple ways**. For example, we might
        want the app to exhibit the same behavior if the user clicks a button on the
        screen or a key on the keyboard. (This is how so-called "keyboard shortcuts"
        work.)\r
        \r
        In the program you're about to see, we've provided event handlers
        for some buttons on the screen. You're going to **create identical functionality**
        for the key events.\r
        \r
        # Do This:\r
        \r
        * **Add conditional statements
        inside the `keydown` event handler** to check for when the **up and down arrows**
        are pressed.\r
        <img src="https://images.code.org/0e0fe80c821c6a3171ec3a272c42325c-image-1447253300861.gif"
        style="width: 350px">\r
        \r
        * ** Copy the code for the `upImage` button**,
        and paste into the up arrow `if` statement.\r
        ![](https://images.code.org/ad56005d74736c7c9aa8bedf68529c0e-image-1448300088636.gif)\r
        \r
        *
        ** Copy the code for the down button**, and paste it into the down arrow `if`
        statement.\r
        \r
        * Confirm your app **responds to key events** by running
        it.  For example, clicking the image of the up arrow in the app should do
        the same thing as hitting the up arrow on the keyboard.\r
        \r
      CSPU5_U3 - Keys - Demo App_markdown_instruction: |-
        # Making our App an Image
        Scroller\r
        \r
        Over the course of this lesson we are going to be working
        towards improving our "My Favorite Things" app to add some new features.
        Our improved app will be able to:\r
        \r
        * Respond to **key events**.\r
        *
        **Display images** by storing their URLs.\r
        \r
        We'll call this new kind
        of app an **image scroller** but feel free to call it anything you like.\r
        \r
        #
        Do This:\r
        \r
        * Close these instructions.\r
        * **Experiment with the improved
        "My Favorite Things" app** to understand the new features we'll be adding.  \r
        *
        Make sure you try clicking the **left and right arrow keys!**\r
        \r
        Once
        you think you've experimented enough, continue on to the next level.
      CSPU5_U3 - Keys - Final Image Scroller_markdown_instruction: |-
        # Final Image
        Scroller\r
        \r
        You're now ready to add key event functionality to your app!
        As you are doing so, keep an eye out for places where you need to **refactor**
        old code in order to prevent redundancy. **Create functions** that carry out
        repeated tasks and make other changes to keep your code **readable and consistent**.
        \r
        \r
        If you want a reminder of how key events work, you can always go back
        to the example from earlier in this lesson.  You will need to add `if` statements
        to check for which keys were pressed, just as before.\r
        \r
        # Do This:\r
        \r
        *
        Add the ability to respond to **key events** to your app.\r
        \r
        * **Refactor
        your old code** to remove redundant portions.\r
        \r
        * Keeping adding to your
        program. What other features do you want to include?
      CSPU5_U3 - Keys - Functions_markdown_instruction: |-
        # Refactoring Code\r
        \r
        On
        the last level, we copied a few lines of code to a different part of our program.
        **Hopefully warning bells went off in your head!** Any time you are copying
        portions of code from one area of your program to another, it's a good indication
        that you should write a function to capture that behavior in one place. \r
        \r
        When
        you add new features to your code **you will often create redundancies**.
        To keep your code readable and consistent, you may need to rewrite old pieces
        of code. This process of restructuring existing code without changing its
        external behavior is called **refactoring**. It is an important process when
        developing software that improves code readability and reduces complexity.
        As a result, code is much easier to maintain.\r
        \r
        # Do This:\r
        \r
        * **Create
        a function called `doUpArrow`**. \r
        * Move the code from the `upArrow` event
        handler to the function.\r
        * **Call `doUpArrow`** from both your button and
        key event handlers. (The animation below shows the steps above.)\r
        * Repeat
        the same process for the down arrow / button by creating a function called
        `doDownArrow`.\r
        * Once you have **removed these redundancies from your code**
        test your app to make sure it still works!\r
        \r
        ![](https://images.code.org/f47a98a8c9ca169848c682b3e61293cd-image-1448300634062.gif)
      CSPU5_U3 - Keys - Key Up and Down_markdown_instruction: |-
        # Using *keyup* and
        *keydown*\r
        \r
        On the last level, we played with the `keypress` event. Let's
        take a look at some of the other key events. \r
        \r
        You are going to get
        the chance to play with `keyup` and `keydown` in this level. **Pay attention
        to the different values of `event.key` for `keydown` and `keypress`. **\r
        \r
        #
        Do This:\r
        \r
        * Switch to the event type to `keydown` or `keyup`. \r
        \r
        <img
        src="https://images.code.org/fa91b1a9e3240eb65ff75b381e76ce69-image-1447213909054.gif"
        style="width: 350px">\r
        \r
        * Try out the event.\r
        \t* Press and hold
        a key\r
            * Try the arrow keys\r
            * Shift\r
            * Option\r
            *
        Alt\r
            * Others
      CSPU5_U3 - Keys - Multiple Keys_markdown_instruction: |
        # Multiple Keys\r
        \r
        If
        you want your program to respond differently to a couple different keys, you
        will need to use chained conditional statements (`if` and `else-if`). \r
        \r
        Let's
        set up the program to **play a different sound for the down key.**\r
        \r
        #
        Do This:\r
        **We've added another sound** to the app, but it's just sitting
        at the top of the code.\r
        \r
        * Add an `else-if` statement to check if the
        **down arrow** was pressed.\r
        \r
        <img src="https://images.code.org/996914e436cca050f62d5b851899eda9-image-1447215275417.gif"
        style="width: 350px">\r
        \r
        * Move the `playSound` command from the top
        of the program inside the `else-if`. (Notice that in the example, we switch
        to block mode to move this line because it's easier to move blocks around
        that way. You can just copy/paste the text too.)\r
        \r
        <img src="https://images.code.org/42b2df84b4cd98267068592218ac96ed-image-1447215267891.gif"
        style="width: 350px">\r
        \r
        * **Test the program:** it should play one
        sound when the **up** arrow is pressed and a different sound if the **down**
        arrow is pressed.  It shouldn't make any sound if any other keys are pressed.
      CSPU5_U3 - Loops -  Complex Condition_markdown_instruction: |-
        # Expressing Stopping
        Conditions: "Until Loops"\r
        It is often more natural to think about looping
        in terms of when the loop should end rather than when it should continue.
        For example you might say "keep going down the road until you see the gas
        station" or "keep calling until you get through to someone." You might
        think of these as "until loops" rather than "while loops," since we want
        the loop to continue **until a condition is true rather than while a condition
        is true**.\r
        \r
        **There is no "until loop" in JavaScript** but it is actually
        quite easy to translate "until loops" into `while` loops so that you can
        use them in programs. An "until loop" runs *until* a condition is true,
        as opposed to a while loop which runs *as long as* a condition is true.  That
        means an until loop is the logical inverse of a while loop - it runs as long
        as the **condition is false**. The table below shows how you can use the **NOT**
        ( `!` ) operator to translate stopping conditions into `while` loop conditions.\r
        \r
        |
        Expressed as Stopping | Expressed as Until Loop | Expressed as While Loop
        |\r
        | --- | --- | --- |\r
        | **Stop** once you reach the gas station | Keep
        going **until** you reach the gas station | Keep going **while** you have
        **NOT** reached the gas station|\r
        | **Stop** calling when you get through
        to someone | Keep calling **until** you get through to someone | Keep calling
        **while** you have **NOT** gotten through to someone|\r
        | **Stop** when `x
        == y` | `until(x == y){...` | `while(!(x == y)){...`|\r
        <br>\r
        Note how
        we can use the **NOT** operation to find the **logical inverse** (or opposite)
        of the condition from our "until loop" to create a `while` loop. Let's
        do a little practice of that now.\r
        \r
        # Do This:\r
        \r
        **Starter code**
        is provided that repeatedly rolls two dice and writes their values to the
        screen. **Careful: ** before you edit this code it creates an infinite loop.\r
        \r
        *
        Use the technique above to **modify this code** so that the loop **stops when
        both dice are 5 or greater**.\r
        * **Try it out and experiment.** You should
        exit the loop the first time both dice have values greater than or equal to
        5 displayed.\r
        \r
        ![](https://images.code.org/076fb8e95fabc55e8ee45e31e51ca2d5-image-1448925611863.19.59
        PM.png)
      CSPU5_U3 - Loops - 1_markdown_instruction: |-
        # *while* Loops\r
        \r
        <img src="https://images.code.org/bfb82e4caecc3ad1338177e05064ef72-image-1446669721477.41.28
        PM.png" style="width: 100px; float: right">\r
        \r
         **The `while` loop
        uses a boolean condition to repeatedly run a block of code.**  It checks the
        expression, and if it is true it runs the block of code contained within it.
        This process of checking the condition and running the block of code is repeated
        as long as the boolean condition remains true. **Once the boolean expression
        becomes false it will stop.**\r
        \r
        We are going to start exploring a `while`
        loop by **modifying the condition on which a `while` loop runs and using `console.log`
        to ensure it is correctly evaluating its condition**.\r
        \r
        # Do This:\r
        \r
        *
        **Starter code** is provided which creates a `while` loop that repeatedly
        moves the turtle around the screen.\r
        * **Add a `console.log` command** inside
        the loop after `num` is assigned a random number. This way you can see the
        value the loop is based on.\r
        ![](https://images.code.org/1da444fd5c6533ad1cc0de3c593bf92d-image-1446825127341.gif)\r
        *
        **Run the program a couple times** and look at the results.\r
        * **Change
        the condition for the `while` loop** to check if the variable **`num` is less
        than 90**. Your output might look like the example below.\r
        \r
        ![](https://images.code.org/97df98c23c0c03a7ce480108a92627a5-image-1448296906193.41.17
        AM.png)
      CSPU5_U3 - Loops - 10_markdown_instruction: |-
        # Writing a Loop From English\r
        \r
        Alright
        it’s your turn. Can you translate the English into code? This problem also
        involves an "until loop" problem.\r
        # Do This:\r
        \r
        Take this statement
        in English and translate it into code: \r
        \r
        **“Write a program that simulates
        the rolling of two dice. Keep rolling the dice UNTIL the sum of the dice is
        either a 7 OR an 11."**  Your program should display the results of each
        roll.  \r
        \r
        **NOTE**: this one is a *little* tricky.  Hint: In English
        we sometimes say "or" when in cold hard logic we mean "and".\r
        \r
        Here
        is a sample output:\r
        \r
        ![](https://images.code.org/706279a3c167d8c76068a7ded5146eed-image-1456434365077.png)
      CSPU5_U3 - Loops - 11_markdown_instruction: |
        # Debugging: Complex Logic\r
        \r
        In
        this challenge you need to find and fix a bug in a program that simulates
        rolling one die.  \r
        \r
        The given code accidentally loops infinitely, so
        something must be wrong with the condition. Can you figure out how to fix
        it?\r
        \r
        # Do This:\r
        \r
        * **Fix the condition** so that it keeps rolling
        the die as long as the value is **not a 2 or a 3.**\r
        \r
        * **Hint:** Think
        about other ways you can express this idea in English. \r
        \r
      CSPU5_U3 - Loops - 12_markdown_instruction: |-
        # Repeat Specific Number of Times\r
        \r
        Instead
        of writing code that makes the loop run a random number of times, we can control
        the `while` loop by changing the variable used in the boolean expression differently.
        Let’s try just printing a string 5 times.\r
        \r
        # Do This:\r
        \r
        * **Starter
        Code:** Right now the code prints a string "Hi" twice.\r
        * **Change the
        code** so that it prints the string "Hi" 5 times.\r
        * **Notice** how `count`
        is being re-assigned each time through the loop.
      CSPU5_U3 - Loops - 14_markdown_instruction: |-
        # Defensive Loop Conditions\r
        \r
        Take
        a look at the starting code. Instead of counting by 3's we had decided to
        count by 4's. \r
        \r
        But this will run us into a problem. Can you see why?\r
        \r
        We
        wanted to stop counting at 30, but when you count by 4 you will actually never
        hit 30. It would go... 24, 28, 32, 36...  What we really want to do is stop
        when the number is **greater than 30**. This is an important defensive programming
        strategy. Make the condition catch more cases than you think you need so that
        if for some reason something does not go exactly as you planned it will hit
        the stop condition and not go infinitely.\r
        \r
        \r
        # Do This:\r
        \r
        * **Change
        the loop condition** to prevent the infinite loop and stop counting once the
        count is past 30.
      CSPU5_U3 - Loops - 15_markdown_instruction: |-
        # Using an *if* Statement In a
        Loop\r
        \r
        A common thing to do is to use variables to keep track of some
        sort of count.  When used in a loop we count things very quickly.\r
        \r
        **Scenario:**\r
        If
        you roll a pair of dice, rolling a 12 (two sixes) is rare.  How rare?  If
        you were to roll a pair of dice 1,000 times, on average, how many times would
        it come up as 12?\r
        \r
        To figure this out, we could write code to run an
        experiment. It would go something like this:\r
        * Make a loop that simulates
        rolling a pair of dice 1,000 times.\r
        * Inside the loop, add an `if` statement:
        **if die1 + die2 == 12, then add 1 to a counter**.\r
        * After the loop, display
        the result.\r
        \r
        # Do This:\r
        The **starter code** sets up the whole experiment
        for you, except it doesn't count the number of 12's rolled - that's your
        job.\r
        \r
        * **Run the code** to see what the experiment does.\r
        \r
        * **
        Add an `if` statement inside the loop** to check if the sum of the dice is
        equal to 12, and add 1 to `twelveCount`.\r
        \r
        *  Once the loop has completed,
        **display the number of times the sum was 12.**\r
        \r
        **Note:** If you remove
        (or comment out) the `console.log` statement that displays every roll of the
        dice, the experiment will speed up A LOT!  You could do tens of thousands
        of dice rolls in a matter of seconds.
      CSPU5_U3 - Loops - 2_markdown_instruction: |-
        # Infinite *while* Loops\r
        \r
        `while`
        loops run until their condition becomes false, which raises an interesting
        question.  **What happens if the condition never becomes false**? In these
        cases the program enters what is called an **infinite loop** over the commands
        in the `while` loop, and it never reaches the rest of your program. **We normally
        avoid infinite loops in our programs**, but let's try it out to see what
        happens.\r
        \r
        # Do This:\r
        \r
        * **Starter code** is provided which creates
        a `while` loop to move the turtle around the screen.\r
        * **Change the `while`
        loop condition to something that will always be true.** The easiest way to
        do this is to change 50 to be a number that randomNumber will never generate
        such as 200. \r
        * **Run the program.** Notice that it will never stop running.
        You may even get an error from your browser.\r
        * **Hit reset to stop it.**
        Your computer may actually stop running as you expect if you let an infinite
        loop run for too long. **It's possible you may even need to close the browser
        window and reload the page. If you hit reset early enough you can usually
        avoid this problem.**\r
        * **Find a condition using `<` or `>` that will also
        cause an infinite loop.**
      CSPU5_U3 - Loops - 3_markdown_instruction: |
        # Changing *if* to *while*\r
        \r
        **
        How many times would we have to roll a die before it comes up as a 6?** In
        the program you're about to see, we **simulate rolling a die (generating
        a random number between 1 and 6)** in order to answer this question.\r
        \r
        #
        Do This:\r
        \r
        ** Starter code** is provided which re-rolls a die once if
        the first roll is not a 6. \r
        * **Change the `if` statement to a `while`
        loop** so the program will keep rolling the die **while the current roll is
        not a 6.** \r
        \t* **Hint:** The easiest way to do this is to change the text
        from `if` to `while`.\r
        <img src="https://images.code.org/50b97e8858bf5ebf82eb1d358f875854-image-1446739013775.gif"
        style="width: 350px; border: solid 1px black ">\r
        * Run the program to
        test out the change.\r
      CSPU5_U3 - Loops - 4_markdown_instruction: |-
        # Debug Commands\r
        \r
        <img src="https://images.code.org/c6322845b96b70c9083a6c62736048e5-image-1446739268136.00.34
        AM.png" style="width: 200px; float: right">\r
        \r
        Check out the new **Debug
        Commands toolbox** that has appeared next to the Debug Console! These powerful
        tools allow us to **pause a program at a certain point** while it’s running
        and then execute lines one at a time. \r
        \r
        Using these tools we can investigate
        the state of variables and other elements of the program at any point, mid-execution.
        This makes it much easier to see what’s happening while the programming is
        actually running!\r
        \r
        In order to use the debug commands, you first have
        to indicate which line you want the program to pause at.  This is called adding
        a “breakpoint” (see animation below).\r
        \r
        # Do This:\r
        \r
        * **Add a breakpoint**
        on the line where the `while` loop starts. (**Just click the line number.**)\r
        *
        **Use the <img src="https://images.code.org/eb07da547abe4afcd745f3bb44102fdf-image-1490808274422.24.13
        PM.png" style="width: 75px"> button** to execute each line one at a time.\r
        *
        Each time you hit the breakpoint, **use the console to check value of `num`**.
        \r
        * **NOTE:** If you hit <img src="https://images.code.org/6c4712da58e32dae2d04c52d9964fca9-image-1446741498097.37.48
        AM.png" style="width: 75px"> it will "continue" executing the program
        normally, unless of course it hits another breakpoint. \r
        \r
        ![](https://images.code.org/68f8e185914c8cc127aa9573ae37f687-image-1446835628580.gif)
      CSPU5_U3 - Loops - 5_markdown_instruction: |-
        # Update Condition\r
        \r
        In order
        for a `while` loop to stop at some point, the code inside the loop **must
        change something about the state of the program** - usually the value of a
        variable - so that eventually the boolean expression becomes false.  Otherwise
        you'd have an infinite loop!\r
        \r
        # Do This:\r
        **Starter Code:** The starter
        code runs an infinite loop. \r
        * **Run the code** to see the problem in action.
        Remember to hit the reset button to stop the infinite loop.\r
        * **Add code
        inside the `while` loop** which will **update the variable `num` so that the
        condition will eventually become false.**\r
        * **TIP:** you can use the debugging
        tools if you think they would be helpful.
      CSPU5_U3 - Loops - 6_markdown_instruction: |-
        # Starting Condition\r
        \r
        We
        have seen that loops can run infinitely. On the last level we saw that there
        is also the **chance that the loop never runs at all!** If the condition of
        the `while` loop starts out false then the loop will never run.\r
        \r
        We
        fixed this problem in the last exercise by displaying the value of `num` in
        two places: before the loop and in the loop. Duplicating code is generally
        a bad strategy, so the question is: can we be a little clever and get into
        the loop without missing any values?  The answer is yes.\r
        \r
        **The solution**
        is to initialize the values used in our boolean expression so that we are
        **certain** it will evaluate to true the first time the loop checks it.  **For
        example, if your loop condition is: `while (num != 6)` you could initialize
        `num` to anything other than 6 and you'd know that you get into the loop**.  \r
        \r
        If
        you use this technique though...\r
        1. You need to make sure you set the value
        of `num` right away inside the loop.\r
        2. You probably want to use a nonsense
        value like -1, so that if you ever see that displayed it will be obvious something
        is wrong and be easier to debug.\r
        \r
        # Do This:\r
        \r
        * **Starter code**
        is provided which creates a `while` loop that never runs.\r
        * **Run the program**
        once to see that the loop is never entered.\r
        * **Fix** the problem by changing
        the initial value of `num` to a nonsense value such as -1.
      CSPU5_U3 - Loops - 7_markdown_instruction: |-
        # Printing After Setting Value\r
        \r
        We
        started trying to remove the duplicate code we had on the last level by initializing
        a variable to a nonsense, or "dummy," value that would still ensure we entered
        the loop. \r
        \r
        In the code provided, not every number is going to display.
        However, this time we want to try **not to add code** to fix the problem,
        since duplicate code is inefficient. \r
        \r
        # Do This:\r
        \r
        * **Starter
        Code:** The code is completely functional except that it does not print one
        of the numbers it's supposed to. In addition we don't want it to print the
        dummy variable of -1.** Hint: ** What should be the last number that prints
        every time this program runs?\r
        \r
        * Run the program to see the behavior.\r
        \r
        *
        Fix the code so that it prints all the values of `num`. **Hint:** You don't
        need to add any code. Just switch the order of the code you have now!
      CSPU5_U3 - Loops - 8_markdown_instruction: "# Printing Before the Loop Starts\\r\n\\r\nSometimes\nour
        code will be doing the right thing but we won't be able to tell because\nof
        the way we are printing values. We need to make sure we print all the values\nwe
        are interested in. \\r\n\\r\nThis program *should* write all the values of\n`num`
        to the screen as it runs; however it misses one - the first one generated.
        \ \\r\n\\r\n#\nDo This:\\r\n\\r\n* **Run the program** a few times and notice
        that sometimes\nit just prints \"Done.\" and nothing else, even though a number
        was generated.\nThe first value of `num` never gets displayed.\\r\n* **Add
        a `write` statement**\nbefore the loop to print the first number. \\r\n* **Hint:**
        Look at the two\ntimes `num` is assigned a value. Which one isn't being displayed? "
      CSPU5_U3 - Loops - 9_markdown_instruction: |
        # Boolean Operators in *while*
        Loops\r
        \r
        We can create compound boolean expressions to control our `while`
        loops just like our `if` statements. Let's try using boolean operators in
        our `while` loop condition.\r
        \r
        # Do This:\r
        \r
        * Right now this code
        rolls two dice as long as either one of them is less than 3.  **Modify the
        condition so that it keeps rolling as long as *both* are less than 3.**\r
        \r
        *
        **HINT:** To say that both dice are less than 3 the boolean expression must
        say: if die1 less-than 3 AND die2 less-than 3...\r
      CSPU5_U3 - Loops - Minus Minus_markdown_instruction: |
        # *++* Has a Friend!  Introducing
        *--*\r
        \r
        As you may have guessed, just as we can write `count = count +
        1` as `count++` we can also write `count = count - 1` as `count--`.\r
        \r
        Let’s
        write a program that counts **down** from 10 down to 1. \r
        \r
        # Do This:\r
        \r
        *
        **Starter Code: ** The current program counts **up** from 1 to 10. \r
        \r
        *
        **Change the code to use `count--` to count *down* from 10 to 1.** You will
        need to:\r
        \t* Change the looping condition.\r
            * Change `count++` to
        `count--`.\r
            * Change the initial value assigned to `count`.\r
      CSPU5_U3 - Loops - Plus Plus_markdown_instruction: |-
        # *++* Operator\r
        \r
        As
        programmers we are always looking for more concise ways to write code. It
        is so common to add 1 to a variable such as in `count = count + 1` that there
        is actually a shorthand for it. \r
        \r
        # Introducing the *++* Operator\r
        \r
        You
        can write `count++` to add 1 to `count`. `count++` does the exact same thing
        as `count = count + 1`! \r
        \r
        In fact the computer turns `count++` into
        `count = count + 1` behind the scenes - it really is just a convenient shorthand.\r
        \r
        **Note:**
        This is more of a programmer style choice so if you want to write your code
        using `count = count + 1` instead there is nothing wrong with that!\r
        \r
        #
        Do This:\r
        \r
        * Change the code to use `count++` instead of `count = count
        + 1`. (You'll need to be in text mode to do this.)\r
        \r
        ** Misconception
        Alert:** You don't need to write `count = count++` - the computer is doing
        the assignment for you.
      CSPU5_U3 - Loops - Typing in Console_markdown_instruction: |-
        # Debug Console:
        Variable Values\r
        \r
        Up until now, if we wanted to find out the value of
        a variable at some point in the execution of a program, we've used `console.log`.
        That is still going to be a great strategy but **the Debug Console can do
        even more for us!**\r
        \r
        **Check this out:** We can check the value of a
        variable in real time (as our program executes) by typing its name into the
        prompt within the Debug Console and hitting "enter". **This is another powerful
        tool for debugging your programs.** \r
        \r
        ![](https://images.code.org/7e7ff7aa041814cfcd69a1c9a028c439-image-1446826780896.gif)\r
        \r
        #
        Do This:\r
        \r
        * **Run the program.**\r
        \r
        * Use the Debug Console to **check
        the ending value of `num`**. You can do this by typing num in the Debug Console
        and hitting enter!
      CSPU5_U3 - Loops - minus = operator_markdown_instruction: |-
        # Try Out the *-=*
        Operator\r
        \r
        The `-=` operator works almost identically to `+=`, but instead
        it subtracts the value provided from the variable. Let's use this operator
        to **create a loop that counts down from 30 by 3's**.\r
        \r
        # Do This:\r
        \r
        *
        **Change the code to use `-=`** to count from *down* from 30 to 0 by 3's.
      CSPU5_U3 - Loops - plus and minus = operator_markdown_instruction: |-
        # Introducing
        *+=* and *-=* Operators\r
        \r
        Sometimes you want to add or subtract something
        *other than 1* from the current value of a variable. If you wanted to add
        or subtract 3 for example, such as: `count = count + 3` or `count = count
        - 3`, `++` and `--` wouldn’t help. \r
        \r
        It turns out this is pretty common
        as well so there is actually a shorthand version of `count = count + 3`. \r
        \r
        **Introducing
        `+=`  and `-=`**!\r
        \r
        We can use the `+=` or `-=` operator to add or subtract
        any value we want to the current value of a variable. \r
        \r
        So, the shorthand
        versions of `count = count + 3` and `count = count - 3` would be:\r
         * `count
        += 3` \r
         * `count -= 3`\r
        \r
        **Notice** that these 3 statements: `count
        = count + 1`,  `count++`, and `count += 1` all do **exactly** the same thing!\r
        \r
        Which
        one you use as a programmer is your choice, and in the future you can use
        either version, but try out the new operator here.\r
        \r
        # Do This:\r
        \r
        *
        **Change the code to use `count += 3`** instead of `count = count + 3` so
        the program will still count up by 3. (You'll need to be in text mode to
        do this.) \r
        \r
        (You'll get to try out `-=` on the next level.)
      CSPU5_U3 - Loops And Arrays - Add 5_markdown_instruction: |-
        # Updating Values
        in an Array with a *for* Loop\r
        \r
        The `for` loop you set up on the last
        level is actually so common that we will rarely deviate from this `for` loop
        setup.\r
        \r
        <img src="https://images.code.org/fba4d95636869c1c1c1a539fe81ded72-image-1447346793054.45.50
        AM.png">\r
        \r
        This `for` loop basically means **"for every possible index
        in `myArray`..."** and we use it as a basic building block for processing
        arrays. Common array-processing techniques like searching for a value, updating
        all values, or calculating simple stats on an array will all be completed
        using a `for` loop written with the syntax above.\r
        \r
        In fact, we're going
        to see that happen right now as we **use a `for` loop to add 5 to every value
        in an array**.\r
        \r
        # Do This:\r
        **Starter code** has been provided that
        creates an array of random values. You are also given a `for` loop that loops
        over every index in the array.\r
        \r
        * Add code inside the loop to **add
        5 to the value at every location in the array**. \r
        \t* ** Remember: ** `myArray[i]`
        refers to the element in the array at the current value of `i`.\r
        * Confirm
        your code works by **displaying the values in your array before and after
        your loop**. Below is a sample result.  Notice how, after the array has been
        processed, all of the values are 5 greater than the originals.\r
        \r
        ![](https://images.code.org/aaf36ac93098ef7f43fdda04243d17ad-image-1447792214666.29.41
        PM.png)
      CSPU5_U3 - Loops And Arrays - Counting Times_markdown_instruction: |-
        # Counting
        Occurrences of a Value\r
        \r
        Instead of displaying a true/false value for
        *every* item in the list, let's compute one value and display it.  A common
        thing to want to do is **count** the number of times a value occurs.  We can
        do this with a very small change to the code we've already got. \r
        \r
        #
        Do This:\r
        **Starter Code** is similar to past levels.  We've also created
        a variable called `fiveCount`.\r
        \r
        * ** Add an `if` statement** inside
        the `for` loop to **increment `fiveCount` if the value is equal to 5. **\r

        (Note: this will be exactly the same as the `if` statement you wrote in the
        previous level. Just giving you more practice).\r
        \r
        * **Run and re-run
        your code** to make sure that it's accurately counting the number of 5's
        in the array. Since the array is getting a random set of values every time
        you run the program, you might have to run it a bunch of times to thoroughly
        test it. Make sure you get it to run at least once when no 5's appear in
        the array.\r
        \r
        * Finally, if you'd like to, **change the first loop in
        the program to add 100 items to the array** instead of 10. Your code should
        still work to count the number of 5's, no matter how big the original array
        is!
      CSPU5_U3 - Loops And Arrays - Divid by 2_markdown_instruction: |-
        # Divide by
        2\r
        \r
        In the last exercise, you updated every element in an array using
        a `for` loop. Let's get a little bit more practice with the pattern you used
        in the last exercise, this time creating the loop yourself.\r
        \r
        # Do This:\r
        **Starter
        code** is provided which creates an array of random values.\r
        \r
        * Create
        a `for` loop that **iterates over every index in the array**.\r
        \r
        * Within
        your loop, add code that **divides each value in the array by 2**.\r
        \r
        *
        Use the provided `console.log` statements to **confirm your program runs as
        expected**. Below is an example of the expected outcome.\r
        ![](https://images.code.org/04b09b795c30313c67b2242f1773b2f6-image-1447795598583.26.21
        PM.png)
      CSPU5_U3 - Loops And Arrays - Find Min_markdown_instruction: |-
        # Reusing a Function
        Pattern: Find Minimum\r
        \r
        **Nice work! You've just written a function
        that implements an algorithm to process an array!** If you feel comfortable
        with the basic pattern you used to create this function, you can quickly create
        functions for many other useful algorithms that work on arrays.\r
        \r
        **Basic
        Function Pattern**\r
        \r
        * Create a **function that accepts an array** as
        input.\r
        * **Create a "flag" variable** and set its default value before
        looping through the array.\r
        * Loop through your array with a `for` loop
        that **visits every index in the array**.\r
        * **Update your flag** as necessary
        with every iteration of your loop.\r
        * **Display your flag** at the end of
        the loop.\r
        \r
        Let's use this pattern to **write a function that finds
        and displays the smallest value in an array**.\r
        \r
        Instead of using a true/false
        flag to indicate whether we found a value, **we'll use a variable to keep
        track of the smallest value we've seen in the array so far**.\r
        \r
        # Do
        This:\r
        \r
        **Starter code** has been provided which outlines and calls `findMinVal`
        with different inputs. Your job will be to finish writing the function.\r
        \r
        *
        Before programming, try to **develop an algorithm that you could use to find
        the minimum value in an array**. Use the pattern outlined above as a guide.\r
        *
        **Write code** in the places indicated with comments to complete the function.  \r
        \t*
        You'll want to use the `minVal` variable to keep track of the smallest value
        you've found so far.\r
            * You'll need to **write an `if` statement**
        that checks whether the current value in the array is less than `minVal`.
        If it is, then update the smallest value.     \r
        * **Run the code** to ensure
        it is working as you intend.\r
        \r
        <details><summary><strong>HINT: pseudocode</strong>
        [click to expand]</summary>\r
        <p>\r
        Here is some pseduocode that you should
        be able to implement.\r
        </p>\r
        <pre>\r
        minVal = first value in array \r
        for
        EACH value IN array\r
          if value < minVal\r
             minVal = value\r
        \r
        display(minVal)\r
        </pre>\r
        </details>\r
        \r
        \r
        ![](https://images.code.org/e6abdc34c653e4bb0885ffabcf897fc5-image-1447877822696.16.03
        PM.png)
      CSPU5_U3 - Loops And Arrays - General Search Param_markdown_instruction: |-
        #
        General Search\r
        \r
        In order to make a general search function, we should
        be able to **search for any value, not just 5**.  We can do this by making
        the value to search for a parameter as well.\r
        \r
        # Do This:\r
        \r
        * **Add
        a second parameter** to your `search` function to represent the item to search
        for. This example uses the name `searchValue`.\r
        \r
        * **Update the code
        inside the function to check for `searchValue` instead of 5.** \r
        \r
        * **Call
        your search function** to search for different values inside of each array.\r
        \r
        *
        The `console.log` statement **is now inaccurate**. Change it to say "Array
        has searchValue: " followed by the value in flag.\r
        \r
        (These steps are
        shown in the code animation below.)\r
        \r
        ![](https://images.code.org/b71a0bd1cf725d58ae76836a6422ebeb-image-1447695946760.gif)
      CSPU5_U3 - Loops And Arrays - Intro For Loop_markdown_instruction: |
        # *for*
        Loop\r
        \r
        It's very common to want to repeat a set of commands a particular
        number of times. Recently, we have been using the `while` loop to do this
        by creating a counting variable, setting the boolean expression, and incrementing
        the value of the counter by 1 each time. We've also used the `for` loop before,
        and we'll explain it more in-depth now.  The `for` loop was created to wrap
        all of those components related to counting loops into a single line of code.\r
        \r
        <img
        src="https://images.code.org/b93a044fc07cb4bbabb95b43132a005b-image-1447342829632.png"
        style="width: 450px">\r
        \r
        <img src="https://images.code.org/d0d8f34d0f4aabaf66084ceac282448e-image-1447343652405.png"
        style="width: 450px">\r
        \r
        Programmers would typically read a loop `for
        (var i = 0; i < 10; i++)` out like this: <br>\r
        **"for variable i starting
        at 0, while i is less than 10, i plus plus (or increment i by 1)"**\r
        \r
        Notice
        that in reading a `for` loop we still use the word "while".\r
        \r
        You may
        notice that when you drag a `for` loop out from the toolbox that we've set
        it up for you with `i` as the variable. \r
        \r
        <details> \r
        <summary>**Why
        is `i` the variable?** [click to expand]</summary>  \r
        \r
        Using the single
        character `i` as the variable in a `for` loop has become a convention in programming
        for a variety of reasons. One reason is that `for` loops are often used when
        processing arrays - **you can think of `i` as shorthand for index. **   But
        there is no reason why you have to use `i` if you don't want to.  It's just
        a variable.  \r
        </details>\r
        \r
        # Do This:\r
        \r
        * Drag out the `for`
        loop.\r
        \r
        * Insert a `console.log` statement inside the `for` loop that
        displays `i`.\r
        ![](https://images.code.org/2a81206296dc693463d7b147f2f93dcb-image-1447446254447.gif)\r
        \r
        *
        Try changing:\r
        \t* The condition to stop the loop (make it run longer).\r
            *
        The amount you change `i` by each time (try changing `i++` to something like
        `i += 5`).\r
            * The starting value of `i`.\r
        \r
      CSPU5_U3 - Loops And Arrays - Linear Search_markdown_instruction: |-
        # Algorithms
        and General-Purpose Functions\r
        \r
        Over the next several exercises we will
        be **creating a general-purpose function to determine if a value is contained
        within an array**.  Over the course of these exercises, keep an eye out for
        the general pattern we are using, because you'll get to use it again to create
        functions of your own.\r
        \r
        To begin, we'll start simple. We'll write
        code that **checks whether an array contains a specific value**. At every
        index, your program should display "true" if the value at that index is
        a 5 and "false" otherwise.\r
        \r
        # Do This:\r
        The **starter code** is
        similar to past levels, but you'll notice that we use a loop to construct
        `myArray` rather than appending items one line at a time.  You are also given
        the `for` loop you will use.\r
        \r
        * Add an `if` statement inside the `for`
        loop to check if the value of the array at the current index is 5. \r
         *
        If the value is equal to 5, write **true** to the console. Otherwise write
        **false** to the console.\r
        * **Test your code** to make sure it is working
        as you intend. An example output is below.\r
        \r
        ![](https://images.code.org/a64c3be0a23e25bef67494bdfeb61415-image-1447879494916.44.45
        PM.png)
      CSPU5_U3 - Loops And Arrays - Loop Array If_markdown_instruction: |-
        # *for*
        Loop with *if*\r
        \r
        Sometimes we want to find values in an array that meet
        certain conditions.  We can add an **`if` statement inside the `for` loop**
        to individually check every value within the array. To practice this, we will
        create a `for` loop that will **display every value in the array greater than
        5**.\r
        \r
        # Do This:\r
        ** Starter code** has been been provided that creates
        an array of random values.\r
        \r
        * Add a `for` loop that references every
        index in the array.\r
        \r
        * Add an `if` statement inside the `for` loop that
        **displays every value in the array greater than 5** using `console.log`\r
        \t![](https://images.code.org/969077ff23232e410ce17520b0a71e1e-image-1447390972867.gif)\r
            \r
        *
        **Note:** Because the original array is being constructed with random values
        it's *possible* that it might not have any values greater than 5.  Just run
        the program a few times to make sure it works.  An example of the possible
        output is below.\r
        \r
        ![](https://images.code.org/266e23afc3533ebd63b393b2ee8682d8-image-1447796380510.39.26
        PM.png)
      CSPU5_U3 - Loops And Arrays - Make it a Function - add list parameter_markdown_instruction: |-
        #
        Generalize *search* by Making It Into a Function - Part 2\r
        \r
        Right now,
        our function just searches for a 5 in a global array called `testArray`.  We
        would like to be able to **use this function to search through any array**,
        so we will be adding a parameter to allow us to specify which array should
        be searched.\r
        \r
        # Do This:\r
        \r
        * **Add a parameter to the `search`
        function called `list`**.\r
        * **Modify the code inside the function** so
        that it loops over `list` (the parameter) instead of `testArray` (the global
        variable).\r
        * **Call your function** with each of the arrays provided at
        the top of the program.\r
        \r
        (These steps are shown in the code animation
        below.)\r
        \r
        ![](https://images.code.org/af4cf7bd95c09f3e8e3548a3383c4a4e-image-1447693121377.gif)
      CSPU5_U3 - Loops And Arrays - Make it a Function_markdown_instruction: |-
        # Generalize
        *search* by Making It Into a Function\r
        \r
        You've just written code to
        search for a value in a list!  If we could generalize this behavior, it might
        be useful to us in the future - it's probably something that we want to do
        over and over again.  \r
        \r
        Over the next few levels, we'll build up a
        very useful, general function for searching for *any* value in *any* list.  But
        we'll do it one step at a time...\r
        \r
        # Do This:\r
        \r
        **Note:** We've
        provided **new starter code** that implements the pseudocode from the last
        exercise. It also **creates two more arrays** that we'll be using later for
        testing.  For this level just worry about `testArray`. \r
        \r
        * **Run the
        starter** code to verify that it works correctly.\r
        * **Create a new function**.
        Name the function `search`.\r
        * **Move the code that checks for a 5 inside
        the function.** **Note:** You must move the boolean variable inside the function
        as well, or it won't reset each time you call the function!\r
        * **Call the
        function** to make sure your code still works.  The actual behavior will be
        the same as when you ran it the first time.  The difference now is that you're
        calling a function to do it.\r
        \r
        (Steps are shown in code animation below.)\r
        \r
        ![](https://images.code.org/dfad49ac35cd605410c52828716b712c-image-1447631609779.gif)
      CSPU5_U3 - Loops And Arrays - Print Array_markdown_instruction: |
        # Print an
        Array with a *for* Loop\r
        \r
        As you know, we can use variables as indexes
        in an array.  We can take advantage of this fact to create a `for` **loop
        which visits every index in an array**.\r
        \r
        ![](https://images.code.org/5aeb9986535424b1d737b8221685196f-image-1447446416081.26.01
        PM.png)\r
        \r
        In this `for` loop, the `i` eventually gets set to every possible
        index in the array. You are going to use a loop of this kind to display all
        the values in an array.\r
        \r
        # Do This:\r
        **Starter code** is provided
        that adds several random values to an array.\r
        \r
        * Create a `for` loop
        that uses the syntax shown below (and above) to **iterate through every index
        in the array**.\r
        \t![](https://images.code.org/930b40b3e3f204605a0fd27fee9d8b8f-image-1447346008842.gif)\r
            \r
        *
        Use `console.log` to **display the contents of the array at each index**.\r
        \t![](https://images.code.org/43431613ea0c045411499dd0e68e7feb-image-1447345996258.gif)\r
            \r
        *
        Run the program to **confirm it is displaying all the values**.\r
      CSPU5_U3 - Loops And Arrays - Printing Single True_markdown_instruction: |-
        #
        Print a Single True/False Value\r
        \r
        Sometimes we don't care about the
        count and just want to know if the array contains a 5 or not. **Let's try
        to display a single true/false indicating whether the list contains a 5.**
        There are two cases to consider: \r
        \r
        1. The list **does not contain any
        5's**; you need to display **"false"**.  \r
        2. The list **contains at
        least one 5**; you need to display **"true"**.\r
        \r
        **HINT:** one way
        to do this is to reference your counter variable `fiveCount` after the array
        has been processed.\r
        \r
        # Do This:\r
        **We've pulled your code from the
        previous level so you can continue to add to it**.\r
        \r
        * Add a **`console.log`
        statement to display a single "true" or "false"** indicating whether there
        is a 5 anywhere in the array.\r
        \r
        | Example output 1: One or more 5's
        | Example output 2: No 5's |\r
        | --- | --- |\r
        |![](https://images.code.org/15ed45d471e9279a8739bad5f31c3a4d-image-1447452726753.06.31
        PM.png) | ![](https://images.code.org/ed19957449c6b68cb19326a6f430edec-image-1447452740979.06.46
        PM.png)|
      CSPU5_U3 - Loops And Arrays - Search with Boolean Var_markdown_instruction: |
        #
        Using a Boolean Variable as a Flag\r
        \r
        We are going to do a **challenge
        that is similar to the last exercise** but, rather than counting the number
        of 5's in the array, we're going to use a different **interesting programming
        technique for processing arrays** that might prove useful to you in the future.
        \r
        \r
        # Using a Boolean Flag\r
        \r
        <img src="https://images.code.org/756fcab9d5f48ace76eb5d300fcf58af-image-1447624065160.png"
        style="float: right; width: 250px">\r
        The technique is generally referred
        to as **using a boolean "flag."** To understand this idea, think about how
        some mailboxes work: the flag starts down, and when a person wants to let
        the mail carrier know there is something to pick up, she puts the flag up
        to notify the mail carrier that there is outgoing mail in the box.\r
        \r
        We
        can use a variable to do something similar when programming. Rather than incrementing
        a count every time we find a 5 in the array, we will use a variable that acts
        like a **flag**.  We will create a variable before the loop and assign it
        `false` to start (flag is down). Then, as we process the array, if we find
        a 5, set the variable to `true` (put the flag up).  \r
        \r
        Here is some pseudocode:\r
        ```\r
        var
        flag = FALSE\r
        FOR EACH item IN list\r
          IF (item EQUALS 5)\r
            flag
        = TRUE\r
            \r
        DISPLAY (flag)\r
        ```\r
        Notice that it doesn't matter
        if we find more than one 5.  It will just keep setting the flag to `true`.  However,
        if there are no 5's, the `if` statement in the loop will never execute, and
        so the variable will remain the value it was initialized to, which was `false`.\r
        \r
        #
        Do This:\r
        \r
        * **Implement the pseudocode above** in JavaScript. \r
        *
        We've given you code that constructs an array of random values, and the standard
        `for` loop for looping over an array.\r
        * The output will be no different
        from the previous exercise, but you should still **confirm that your program
        correctly identifies when a 5 is in the array.**\r
        \r
        | One or more 5's
        | No 5's |\r
        | --- | --- |\r
        |![](https://images.code.org/15ed45d471e9279a8739bad5f31c3a4d-image-1447452726753.06.31
        PM.png) | ![](https://images.code.org/ed19957449c6b68cb19326a6f430edec-image-1447452740979.06.46
        PM.png)|\r
        \r
      CSPU5_U3 - Movie Bot - Multiple If Sequences_markdown_instruction: |-
        # Adding
        Rating to Keywords\r
        \r
        Up until now our movie suggestions have just been
        based on genre. Let's now also look for keywords related to the movie rating
        like "G", "PG", "PG-13", and "R" so we can give movie suggestions
        based on both genre and rating.\r
         \r
        **Note: ** We've updated the flowchart
        below (highlighted in yellow) to see the logic we are trying to add.\r
        \r
        **Note
        2: ** The logic of the program right now will yield some odd results - there
        are some things you can type that will give 2 suggestions - this is expected,
        for now.  We are just taking a small step here.  We'll refine the code again
        in later levels.\r
        \r
        # Do This:\r
        \r
        * **Add another set of `if`, `else-if`,
        and `else` statements** inside the question `if` statement to **check for
        keywords for movie ratings (G, PG, PG-13, and R).**\r
        \r
        * **Hint:** When
        checking for "G", "PG" and "R" you need to be a little clever.  R and
        G are letters that will show up in lots of words and PG will get confused
        with PG-13. We want to check for "g" and "r" with spaces on either side.
        So make sure to use `" g "` where there is a space on either side of g instead
        of `"g"`. For "pg" you can just add a space after the pg to look for `"pg
        "`\r
        \r
        * **Test out a couple sentences with your keywords** to make sure
        the change worked.\r
        \r
        <img src="https://images.code.org/886713cfedf4802e174b68ed2eb36d4b-image-1455816199174.png"
        style="width: 100%">\r
        \r
        <a href="https://images.code.org/886713cfedf4802e174b68ed2eb36d4b-image-1455816199174.png"
        target="_blank">Click to open in separate window.</a>
      CSPU5_U3 - Movie Bot - Nested Motivation_markdown_instruction: |-
        # Checking
        for a Question\r
        \r
        We're going to start adding some "intelligence" to
        our Movie Bot. Since we've added `includes` it can now tell if its keywords
        appear anywhere in the input. As a result some inputs may be questions while
        others might simply be statements. **We'd like the movie bot to respond differently
        to questions and statements.**\r
        \r
        In order to tell when the user is asking
        a question **we will be checking whether the input includes a question mark
        **.\r
        \r
        # Do This:\r
        \r
        * Add a separate statement to **check if the
        input includes a "?"**. \r
        * If the input includes a question mark **print
        "That's a good question." before the recommendation.**\r
        * Otherwise print
        **"I only answer questions." before the recommendation.**\r
        * **Test out
        a couple sentences with your keywords** to make sure the change worked.\r
        \r
        **Example
        Input --->** | **Output**\r
        ---|---\r
        What's the best action movie? | That's
        a good question. The best action movie is any James Bond movie.\r
        I love
        comedy | I only respond to questions. The best comedy movie is The Princess
        Bride.\r
        <br>\r
        **Note:** Check out the flowchart below to see the logic
        we are trying to change.\r
        \r
        <img src="https://images.code.org/e32fd89b6e03b9d49c94e39e79120c03-image-1446072381510.png"
        style="width: 100%">\r
        \r
        <a href="https://images.code.org/e32fd89b6e03b9d49c94e39e79120c03-image-1446072381510.png"
        target="_blank">Open diagram in a new tab</a>
      CSPU5_U3 - Movie Bot - When Multiple If Statements_markdown_instruction: |-
        #
        Adding a Separate *if*\r
        \r
        It's still the case that sometimes you want
        to have two completely separate groups of `if` statements because there are
        separate conditions you want to check and possibly have responses for both.
        You don't always just keep adding to a giant `if` statement forever.\r
        \r
        In
        the Movie Bot demo you probably saw that if you type "please" and "thank
        you" it adds something extra to the response (it says something like "Thanks
        for being polite!"). Let's add this functionality to your movie bot as well.
        \r
        \r
        **Note: ** Check out the flowchart below to see the logic we are trying
        to add.\r
        \r
        # Do This:\r
        \r
        * ** Add an `if` and `else-if` statement
        that checks for "please" and "thank you"**. \r
        \t* If the string includes
        "please" it should say "Thank you for being so polite!" before it gives
        its response.\r
            * If the string includes "thank you" it should say
        "You are very welcome!" before it gives its response.\r
        \r
        * **Test out
        a couple sentences with your keywords** to make sure the change worked.\r
        \r
        <img
        src="https://images.code.org/3dac4019734e63ecbfd4784c82fbd402-image-1461771319064.png"
        style="width: 100%">\r
        \r
        <a href="https://images.code.org/3dac4019734e63ecbfd4784c82fbd402-image-1461771319064.png"
        target="_blank">Click to open in separate window.</a>
      CSPU5_U3 - Movie Bot - toLowerCase_markdown_instruction: |-
        # Dealing with Character
        Case\r
        \r
        What if the user types **ACTION** instead of **action**? These
        are two different strings to the computer and therefore it won't recognize
        they are the same. We want Movie Bot to treat words the same ignoring the
        case of the letters. We can do this using the string command `toLowerCase`.\r
        \r
        **Note:
        ** Check out the flowchart below to see the logic we are trying to add. \r
        \r
        #
        Do This:\r
        \r
        * **Try typing COMEDY, ACtioN, horroR, and Romance** into
        Movie Bot.\r
        \r
        * **Use the `toLowerCase` command** to change all user input
        into lowercase letters after they enter it.\r
        \r
        * **Check that COMEDY,
        ACtioN, horroR, and Romance generate the same recommendations** as comedy,
        action, horror, and romance.\r
        \r
        <img src="https://images.code.org/183082e89d296b88112a5a5380afac6c-image-1446069165327.png"
        style="width: 100%">\r
        \r
        <a href="https://images.code.org/183082e89d296b88112a5a5380afac6c-image-1446069165327.png"
        target="_blank">Open diagram in a new tab</a>
      CSPU5_U3 - Practice Create Performance Task_markdown_instruction: |-
        # Practice
        Create Performance Task\r
        \r
        You've finally made it to the end of the Programming
        Unit! We will continue some programming in the next unit, but for now we are
        going to use all the new concepts you have learn to create something of your
        own design! \r
        \r
        # Do This:\r
        \r
        * **Read the Project Overview** to understand
        the entire project.\r
        * **Follow the Project Planning Guide**.\r
        * **Implement
        your final program in this level**.
      CSPU5_U3 - Return Values - constrainTurtle_markdown_instruction: |-
        # Use a Function
        that Returns a Value in an App\r
        \r
        We create functions to **contain blocks
        of code that will be used multiple times within our program**. The same is
        true with functions that return values. Let's see an example of how we might
        use one of the functions we've written.\r
        \r
        This exercise comes with starter
        code that creates a **simple turtle driver app**. The x and y location of
        the turtle are stored in the variables `xloc` and `yloc`. An event handler
        is used to update these values when the **arrow keys are pressed**, and then
        a separate `updateTurtle` function is called to draw the turtle on the screen.\r
        \r
        Currently
        the turtle can drive off the screen. If we are clever about how we use our
        `constrain` function, however, we can prevent this from happening.\r
        \r
        #
        Do This:\r
        \r
        * **Starter code** is provided which allows the turtle to
        move. Additionally a **working version of `constrain`** is provided.\r
        *
        **Call the `constrain` function twice** within the `updateTurtle` function
        to prevent the turtle from going outside the screen.\r
        \t* One call to the
        function for `xloc` and one time for `yloc`.\r
            * Recall the screen is
        **320 by 450 pixels**.\r
        * **Run your app** and confirm the turtle cannot
        leave the screen.\r
        \r
        ![](https://images.code.org/f2e24abdf2d4008dfdc4f2ba9e23ff2c-image-1447958362880.gif)
      CSPU5_U3 - Return Values - debuggingConstrain_markdown_instruction: |-
        # Debugging
        and Multiple Return Statements: *constrain*\r
        \r
        We're going to debug another
        function that uses multiple return statements. The function is called `constrain`
        and is used to limit an input number to a certain range. The function accepts
        three parameters.\r
        \r
        * `input` : the number to be constrained.\r
        * `low`
        : the lower bound of the range. If `input` is below this value, the function
        should return the value of `low`.\r
        * `high` : the upper bound of the range.
        If `input` is above this value, the function should return the value of `high`.\r
        \r
        <details>\r
        <summary>**Click
        for sample input and output for `constrain`**</summary>\r
        * `constrain(15,10,20)`
        should return 15 since it is within the range of 10 to 20.\r
        * `constrain(5,10,20)`
        should return 10 since the input is below the range of 10 to 20.\r
        * `constrain(25,10,20)`
        should return 20 since the input is above the range of 10 to 20.\r
        </details>\r
        <br>\r
        Unfortunately,
        because of the way this function was written, it does not always work as expected.
        In particular, **because of how `return` was used, some portions of the function
        never run**. Change the structure of the function to **use the pattern you
        have been shown in previous exercises, included below**.\r
        <br> <br>\r
        **Pattern
        for Functions that Return Values**\r
        * Use parameters to provide input.\r
        *
        Declare a variable that will be used as output, possibly initializing its
        value.\r
        * Update the value in your output variable throughout your program.\r
        *
        Return your output variable on the last line of your function.\r
        \r
        # Do
        This:\r
        \r
        * **Run the program** and identify the errors generated in the
        output.\r
        * **Inspect the logic of `constrain`** to identify the logical
        errors.\r
        * **Rewrite** `constrain` to make use of the **pattern for functions
        that return values**, shown above.\r
        * **Run the program** to ensure it is
        now running as you expect.\r
        \r
        ![](https://images.code.org/38afcc5420e084b3146a8b12cc2d0e72-image-1447952855846.07.25
        AM.png)
      CSPU5_U3 - Return Values - debuggingMaxVal_markdown_instruction: |-
        # Debugging
        and Multiple Return Statements\r
        \r
        **Having multiple `return` statements
        in a program can lead to tricky situations**. You may use multiple return
        statements, but it makes it easier to introduce logical errors into your program.
        We're going to look at some examples of functions with return values that
        include logical errors and debug them. The goal is to **recognize common errors
        with return values now so you can avoid them when writing your own programs**.\r
        \r
        There
        is a logical error somewhere in the version of `maxVal` you are about to see
        which uses multiple return statements. As a result, the function works correctly
        for some inputs but not all. You'll need to inspect the code to understand
        what the issue is and make changes accordingly. In particular, look closely
        for conditions that are *not* currently handled by the program.\r
        \r
        # Do
        This:\r
        \r
        * **Run the program** and identify the errors generated in the
        output.\r
        * **Inspect the logic of `maxVal`** to identify the logical error.\r
        *
        **Correct the logical error** so that the function returns the correct value
        for all inputs.
      CSPU5_U3 - Return Values - useMinVal_markdown_instruction: |
        # Using Functions
        that Return Values\r
        \r
        We have used functions that return values many times
        before, but in this exercise you will see how they are actually created by
        using the `return` command. The function `minVal` accepts two numbers as input
        and returns the minimum of the two as output. You can call this function just
        like any other, and **because it returns a number, you can treat the function
        call as if it were a number**.\r
        \r
        # Do This:\r
        \r
        * **Starter code**
        has been provided that creates the function `minVal` and generates two random
        values.\r
        * **Inspect the code of `minVal` to understand the logic of this
        function**.\r
        * On the `console.log` line **call the function using `rand1`
        and `rand2` as parameters** and ensure the minimum value is returned. You
        should treat the function call **as if it were a number**.\r
        \r
        <img src="https://images.code.org/21c2232acca1ed4a133d648982b0b042-image-1447964963356.gif"
        style="width: 550px">\r
        \r
        * Check that the program generates output similar
        to the output shown below.\r
        \r
        <img src="https://images.code.org/0ec446c772976ca8e75e5eb25d018b24-image-1447964535213.21.49
        PM.png" style="width: 350px">\r
      CSPU5_U3 - Return Values - wrapTurtle_markdown_instruction: |-
        # Use a Function
        that Returns a Value in an App - Part 2\r
        \r
        This time, you're going to
        write a function that returns a value to add functionality to the turtle driver.
        The `updateTurtle` function now is making a call to a function called `wrap`
        that has not been written yet. It accepts three parameters and should work
        in the following way:\r
        \r
        * `input`: the input value to the function. If
        it is within the range it should just be returned.\r
        * `low`: the lower bound
        of the range. If `input` is below this value the output should be the value
        of `high`.\r
        * `high`: the upper bound of the range. If `input` is above
        this value the output should be the value of `low`.\r
        \r
        By using this function
        you can create the illusion that the screen "wraps" around, so when the
        turtle leaves the top of the screen it appears again at the bottom.\r
        \r
        #
        Do This:\r
        \r
        * **Starter code** is provided which allows the turtle to
        move.\r
        * The `updateTurtle` function now makes two calls to `wrap`, but
        the function is not yet written.\r
        * **Write the `wrap` function** so that
        it implements the logic described above.\r
        * **Run your app** and confirm
        the turtle now "wraps" when it leaves the screen.\r
        \r
        ![](https://images.code.org/ebed5130ccdd16202eac0b8cc02df959-image-1447957698820.gif)
      CSPU5_U3 - Return Values - writeMaxVal_markdown_instruction: |-
        # Writing Functions
        that Return Values\r
        \r
        Now you are going to write your own function that
        returns a value, `maxVal`. This function should return the maximum of two
        values provided as input. The code for `minVal` is provided so that you can
        **replicate the pattern used in this function**.\r
        \r
        **Pattern for Functions
        that Return Values**\r
        * Use parameters to provide input.\r
        * Declare a
        variable that will be used as output, possibly initializing its value.\r
        *
        Update the value in your output variable throughout your program.\r
        * Return
        your output variable on the last line of your function.\r
        \r
        You may actually
        recognize many similarities between how we wrote functions that process arrays
        and functions that return values. **These patterns aren't rules of programming,
        but they help make your code easy to read and understand**.\r
        \r
        # Do This:\r
        \r
        *
        **Starter code** has been provided which stubs out `maxVal` and generates
        two random values. `minVal` is still provided **so that you can replicate
        the pattern used**.\r
        * **Write `maxVal`**, replicating the pattern used
        to write `minVal`.\r
        * **Use `maxVal` within the `console.log` statement
        as if it were a number** to generate the output similar to the one shown below.\r
        \r
        ![](https://images.code.org/5941ceeb27f0ad2d59819c9395d0d89a-image-1447947829448.gif)
      CSPU5_U3 - Simulation - 1_markdown_instruction: |-
        # Starting Small\r
        \r
        To
        start, we're going to simulate flipping a coin 10 times. You might be thinking
        that isn't many coin flips, and that we could just do those flips in real
        life, but this is actually an important step in developing a simulation. At
        small scales we can make sure our code is working as intended because **we
        can still visually confirm its output**. Once we're convinced that the logic
        of our program is reliable we'll move up to simulating larger numbers of
        flips.\r
        \r
        The core logic of our program will be focused on **a `while`
        loop** that simulates flipping a coin by repeatedly generating **random 0's
        or 1's using `randomNumber`**. This is a great opportunity to keep practicing
        using loops while applying your knowledge of variables, iteration, and `if`
        statements.\r
        \r
        # Do This:\r
        \r
        * When we want to flip a coin with a
        computer we will instead **generate a random number between 0 and 1**.\r
        *
        Write a program that **uses a `while` loop** to **flip a coin 10 times** and
        writes the value of each flip to the screen. The example below shows how your
        program should run.\r
        * **HINT:** you will need to use a counter variable
        in your `while` loop to keep track of how many times the coin has been flipped.
        \r
        \r
        ![](https://images.code.org/970622047b06af13ea7bdd50ee86bcbf-image-1446739178483.gif)
      CSPU5_U3 - Simulation - 2.1_markdown_instruction: |-
        # Changing the Loop Condition\r
        \r
        Currently
        our loop condition is based on a counter variable that keeps track of the
        total number of flips, but our simulation should only run **while we have
        fewer than the target number of heads**. In this exercise you are going to
        change the condition used by your `while` loop so that your **simulation terminates
        once you have flipped 5 total heads**. At the end of the loop we will **write
        the total number of flips** to know how many flips it took to get 5 heads.\r
        \r
        #
        Do This:\r
        \r
        * Change the looping condition to use the variable you are
        using to keep track of the number of heads. **Your loop should run as long
        as you have fewer than 5 total heads**.\r
        * Add code after your loop that
        **writes the total number of flips**.\r
        * **Test your program** several times
        to make sure it works as expected. See the example below.\r
        * **Note:** the
        simulation is always terminating once it flips its 5th heads. Sometimes this
        means the text output runs off the screen. We will address this in the next
        exercise.\r
        \r
        ![](https://images.code.org/878ff327142ebad8f81ecd8cdf58b14a-image-1446861064994.gif)
      CSPU5_U3 - Simulation - 2.5_markdown_instruction: |-
        # 10,000 Heads!\r
        \r
        You're
        ready to increase the number of heads your simulation is looking for and **test
        your first hypothesis**. Before we move up to the full 10,000 heads, however,
        we're going to perform a quick check of our program logic.  When you make
        changes to your program **it is possible that some portion of your programming
        logic will stop working as you expected**. In order to feel more confident
        about your model you will **first change the number of heads you are looking
        for to a number that we can still visually verify (7 heads)**. If our code
        still works after making changes then we should be confident that it should
        work at 10,000. We will remove the intermediate output and run the full simulation!\r
        \r
        #
        Do This:\r
        \r
        * **Increase the number of heads you are looking for to 7**
        and **visually confirm** that the code is still working as you expect.\r
        *
        If everything seems to be working, **comment out the `write` command that
        displays the results of each flip.** You can use `//` to comment out a single
        line of code. Make sure that the total count of flips still prints though!\r
        *
        **Run your simulation and find out how long it takes to get to 10,000 heads**.
        Then run it a few more times. What patterns are you noticing? Record your
        results and move on.
      CSPU5_U3 - Simulation - 2_markdown_instruction: |-
        # Counting Heads\r
        \r
        Let's
        say that a **1 is a heads**. If we want our simulation to run until we reach
        a certain number of heads then **we will need a way to count the number of
        heads that have been flipped**. In order to do this you will need to add a
        variable that acts **as a counter**. Initialize it to 0, and every time you
        flip a heads (1) **increment your counter by 1**. At the end of your program
        you should write the value to the screen.\r
        \r
        # Do This:\r
        \r
        * Add a
        variable that **counts the number of heads (1's)** and write its value to
        the screen after each flip.\r
        * Run your program severals times **and validate
        that the number of heads recorded is correct** by visually checking the flips
        you've printed to the screen.\r
        * **Hint:** you will also need to store
        your current coin flip in a variable to complete this challenge.\r
        \r
        ![](https://images.code.org/0d99569cd223c63e2166d610d09fd525-image-1446859813702.gif)
      CSPU5_U3 - Simulation - 3_markdown_instruction: |-
        # Streaks of Heads\r
        \r
        We
        are going to alter our simulation so that it doesn't count the total number
        of heads, but rather the longest **streaks of heads**. This will allow us
        to simulate **how many flips it takes to get 12 heads in a row**. \r
        \r
        To
        begin with you will change your looping condition so that **the loop again
        only runs 10 times**. This will allow us to visually confirm our code is working.\r
        \r
        **Keeping
        Track of Streaks:** We know we need to count streaks of heads, how do we do
        this in code?  Do we need to keep track of all the previous flips so we know
        that we're on a streak?\r
        \r
        The answer is: **no**.  We can instead just
        **count in a clever way** that makes our code pretty simple.  Make a variable
        to use as a counter and...\r
        \r
         * every time you see heads, add 1 to a
        counter.\r
         * every time you see tails, set the counter back to 0.\r
        \r
        Here
        is some psuedocode showing how it works.  You might take a minute to study
        and reason about why and how it works.\r
        \r
        **Pseudocode**\r
        ```\r
        //
        Ouside loop\r
        headsCount <-- 0\r
        \r
        // Inside loop\t\r
        IF (current flip
        is a heads)\r
          headsCount <-- headsCount + 1\r
        ELSE\r
          headsCount <--
        0\r
        DISPLAY (current flip)\r
        DISPLAY (headsCount)\r
        ```\r
        # Do This:\r
        \r
        *
        Change your `while` loop's condition so that **it only runs 10 times**.\r
        *
        Add code to the simulation that **displays the length of each streak of heads**
        following the logic described above.  Note that pseudocode should translate
        to JavaScript pretty easily.\r
        * The example below shows an example of what
        output from your program might look like.\r
        \r
        ![](https://images.code.org/22f1a29e9b6abd558198f4704e437498-image-1446751547621.25.07
        PM.png)
      CSPU5_U3 - Simulation - 4_markdown_instruction: |-
        # Changing the Loop Condition:
        Streaks of Heads\r
        \r
        We want our simulation to run** while the streak of
        heads is less than a target length**. In order to do this we'll need to change
        our looping condition to use the variables we've been using to count our
        streak of heads. To begin with **your simulation should look for a streak
        of 3 heads** so that you can still visually confirm the output.\r
        \r
        # Do
        This:\r
        \r
        * **Change the condition** used by your `while` loop so that
        it now runs **while the streak of heads is less than 3**.\r
        * **Test your
        program** by running it and visually confirming that its output is correct.
        It should run like in the example below.\r
        * **Note:** As before it's possible
        that your output will sometimes run off the screen. You can still confirm
        your code is working as you intend (it should never run after a streak of
        3) and we will address this issue in the next exercise.\r
        \r
        ![](https://images.code.org/90ec4022f784ba136e59bb9b7c57a5c7-image-1446862623863.gif)
      CSPU5_U3 - Simulation - 5_markdown_instruction: |-
        # Streaks of Heads: 12 in
        a Row\r
        \r
        We're almost ready to test **our second hypothesis** and find
        out how long it takes to get **12 heads in a row**. Just as before we're
        first going to **visually test our code with a different length streak (4)**
        before removing most of the visual output and running the code for a streak
        of 12.\r
        \r
        # Do This:\r
        \r
        * **Change your simulation to run until you
        get a streak of 4** and visually verify that the values calculated are accurate.\r
        *
        **Comment out** the lines of code that write the current coin flip and the
        current streak count. You can use `//` to comment out a single line of code.\r
        *
        **Change your simulation to run until you get a streak of 12 heads**. \r
        *
        **Run your simulation a few times and record your results!**
      CSPU5_U3 - Simulation - 6_markdown_instruction: |
        # Keep Experimenting!\r
        \r
        Your
        simulation can be updated or changed however you like. What new questions
        do you have? Do you want to look for longer streaks of heads? Do you want
        to roll a die instead of flipping a coin? Make any changes and improvements
        to your simulation that you like.\r
      CSPU5_U3 - User Input - Save getText To Variable_markdown_instruction: |-
        # Saving
        Text Input in Variables\r
        \r
        Often we want to save the information we pull
        in from the user for later use in our program. The best way to do this is
        to save it in a variable.\r
        \r
        # Do This:\r
        \r
        * **Create two variables
        inside your event handler** to store the **age** and **name** of the user.\r
        *
        **Use `getText()` to update the values** stored in each of these variables.\r
        *
        **Change your `console.log` statements to use your variable instead of `getText`**.\r
        \r
        ![](https://images.code.org/ca45dcb01ae2d1956ed2f87efeda0264-image-1445976691215.11.13
        PM.png)
      CSPU5_U3 - Variables - Set to Expression with Other Variables_markdown_instruction: |
        #
        Expressions with Variables\r
        Arithmetic becomes much more interesting when
        we use other variables in our expressions. For example you can do this:\r
        \r
        <table  style="margin-left:
        auto;\r
          margin-right: auto; align: center">\r
        <tr>\r
        <td>\r
        <img src="https://images.code.org/13c21437292031a705744a8c2663c0d4-image-1445547765131.png"
        style="width: 400px;">\r
        </td></tr>\r
        <tr> <td>\r
         <h3>\r
         Mental Model\r
        ![](https://images.code.org/b4a2c125508fb06fd653b90c643cb53b-image-1447272790306.png)</h3>\r
        </td></tr>\r
        <tr><td><img
        src="https://images.code.org/95eb7e859d04c72ed82ed80023a870cf-image-1445546103564.gif"
        style="width: 400px;"></td>\r
        </tr>\r
        </table>\r
        \r
        The end result of
        an expression with variables is the same as one without.  The major difference
        is that values are retrieved from memory in order to do the calculation rather
        than simply hard-coded.\r
        \r
        # Mental Model Check\r
        Watch the animation
        above. To compute the expression the computer will: **first** retrieve each
        of the values of the variables used in the expression; **then** the arithmetic
        expression can be evaluated; **finally** the computed value can be stored
        in memory.\r
        \r
        # Do This:\r
        <img src="https://images.code.org/485f61858e45a39e383497c522c94d64-image-1445548216109.png"
        style="float: right; width: 300px">\r
        * **Scenario:** In the starting code
        we have provided you with variables that might be the kinds of things you
        would keep track of in a game: `totalTime`, `points` and `lives`.  (see right).\r
        \r
        *
        Right now the `totalScore` is just set to 0.  We want you to compute a final
        score so that the person is rewarded for having a lot of points and lives,
        but penalized for taking a lot of time.\r
        \r
        * **Write an expression** that
        calculates the player's total score and stores it in the `totalScore` variable.  The
        calculation is: **the player's points *times* lives *divided* by the total
        time.**\r
        \r
        * For the values provided the app display should look like
        this:\r
         \r
        <img src="https://images.code.org/10c9c6f162004a1b7216ae36c1427478-image-1445548367117.png"
        style="width: 250px">\r
      CSPU5_U3 - Variables - Set to Expression_markdown_instruction: |
        # Variables
        and Arithmetic Expressions\r
        A common thing to want to do is store the result
        of an arithmetic expression.  The 4 basic arithmetic operations `+ - * /`
        are available. \r
        \r
        <details><summary><strong>Here is a quick table that
        shows the arithmetic operators with code examples</strong> [click to expand]</summary>\r
        <table>\r
        <thead>\r
        <tr>\r
        <th
        style="text-align:center">operation</th>\r
        <th style="text-align:center">block</th>\r
        <th
        style="text-align:center">text</th>\r
        <th style="text-align:center">example</th>\r
        <th
        style="text-align:center">result</th>\r
        </tr>\r
        </thead>\r
        <tbody>\r
        <tr>\r
        <td
        style="text-align:center">add</td>\r
        <td style="text-align:center"><img
        src="https://images.code.org/2cf1014a4e0b1dedd361edc73a0f7eb1-image-1445536786715.png"
        alt=""></td>\r
        <td style="text-align:center">`+`</td>\r
        <td style="text-align:center">`result
        = 7 + 3;`</td>\r
        <td style="text-align:center">stores <strong>10</strong>
        in <em>result</em></td>\r
        </tr>\r
        <tr>\r
        <td style="text-align:center">subtract</td>\r
        <td
        style="text-align:center"><img src="https://images.code.org/96b80cd4d866130c7f8567765f9b4b00-image-1445536805959.png"
        alt=""></td>\r
        <td style="text-align:center">`-`</td>\r
        <td style="text-align:center">`value
        = 7 - 3;`</td>\r
        <td style="text-align:center">stores <strong>4</strong>
        in <em>value</em></td>\r
        </tr>\r
        <tr>\r
        <td style="text-align:center">multiply</td>\r
        <td
        style="text-align:center"><img src="https://images.code.org/3574725201e009142126f39ad1df8a78-image-1445536817791.png"
        alt=""></td>\r
        <td style="text-align:center">`*`</td>\r
        <td style="text-align:center">`score
        = 7 * 3;`</td>\r
        <td style="text-align:center">stores <strong>21</strong>
        in <em>score</em></td>\r
        </tr>\r
        <tr>\r
        <td style="text-align:center">divide</td>\r
        <td
        style="text-align:center"><img src="https://images.code.org/5d470b223717c9daac5246af0d013bdf-image-1445536826467.png"
        alt=""></td>\r
        <td style="text-align:center">`/`</td>\r
        <td style="text-align:center">`bonus
        = 7 / 3;`</td>\r
        <td style="text-align:center">stores <strong>2.3333</strong>
        in <em>bonus</em></td>\r
        </tr>\r
        <tr>\r
        <td style="text-align:center">parentheses</td>\r
        <td
        style="text-align:center">none</td>\r
        <td style="text-align:center">`()`</td>\r
        <td
        style="text-align:center">`avg = (99 + 85 + 93) / 3;`</td>\r
        <td style="text-align:center">stores
        <strong>92.3333</strong> in <em>avg</em></td>\r
        </tr>\r
        </tbody>\r
        </table>\r
        </details>\r
        <br>\r
        #
        Misconception Alert \r
        \r
        <img src="https://images.code.org/18eb833aba4a7199a28929dcd43c73f8-image-1445540549754.gif"
        style="float: right">\r
        When you have a statement like `result = 5 + 7;`
        realize that this **does NOT store a mathematical expression in the variable.**  \r
        \r
        Rather,
        with this instruction you are asking to compute 5 + 7 and **THEN** store the
        answer (a single number) in the variable.\r
        \r
        # Do This:\r
        \r
        **GOAL:**
        the goal here is mostly to acquaint yourself with typing arithmetic expressions
        - the answers to the questions below are less important, and should be used
        as interesting things to investigate.  \r
        \r
        We've given you some **starting
        code** with 5 statements similar to ones in the table above.\r
        * **Add `console.log`
        or `write` statements** to display the values of each of the variables.\r
        *
        Experiment with arithmetic expressions, try to make really big and really
        small numbers.\r
        \r
        <hr>\r
        \r
        **Things to Try:**\r
        * Using **multiplication:
        what's the biggest a number you can store** in a variable?\r
         * How many
        digits are in the biggest number before it starts using scientific notation?\r
        *
        Using **subtraction (or multiplication with negative numbers): what's the
        lowest number you store?** (low means a negative number with a lot of digits)\r
        *
        Using **parentheses** make a crazy-big arithmetic expression.  \r
         * NOTE:
        composing arithmetic expressions is ***much* easier in text mode**, and is
        actually almost unreadable in block mode.  Try doing this in text mode.\r

        \r
      CSPU5_U3 Digital Assistant Design_markdown_instruction: |
        # Getting Started
        with Your Digital Assistant\r
        \r
        <img src="https://images.code.org/e875ff7b54c314a378cdb784f92371a0-image-1445989933171.52.04.png"
        style="width:200px;float:right;">\r
        Over the course of the next few lessons,
        you'll be __developing your own digital assistant__. To make your digital
        assistant more useful, it needs to be able to make __decisions__ based on
        questions the user asks it, and respond intelligently.\r
        \r
        To get started,
        __choose a topic__ you want your digital assistant to specialize in. It should
        be something you are interested in and know a lot about. Examples: Country
        Music, Sushi, College Football, Comedy Movies.\r
        \r
        You'll next set up
        the layout for your app. __The basic layout contains just two primary design
        elements:__ a text input and a text area.\r
        \r
        # Do This:\r
        \r
        - __Choose
        a topic__ for your digital assistant to specialize in.\r
        - __Create the layout__
        for your app. Your digital assistant should have:\r
            - A name\r
            -
        A text input for the user to ask a question\r
            - A text area for the digital
        assistant to respond\r
            - The text area should have a greeting for the
        user (e.g. Ask me a question about movies!)\r
      CSPU5_U3 Digital Assistant Set Text_markdown_instruction: |-
        # Respond to Basic
        User Input\r
        \r
        <img src="https://images.code.org/2bed8002ff3c89afb02db5809de1c40e-image-1445996503055.gif"
        style="width:200px;float:right;">\r
        Now you can have your digital assistant
        repeat what the user typed and add a __default response__. It's not the most
        intelligent response, but you'll build up to that over the next couple of
        lessons and it's important to build this program in pieces.  \r
        \r
        # Looking
        Back to Move Forward\r
        You're going to now add to your program without as
        much guidance as usual. Keep in mind that __this is very similar to programs
        you've already built__, so look back at your work for a refresher.\r
        - __Mad
        Libs:__ In Mad Libs you got a user's text when the 'Next' button was clicked,
        filled in the outline with the responses, and displayed the completed Mad
        Lib\r
        - __Introducing the 'change' event:__ You just learned about the
        'change' event that triggers when the user hits 'enter' on a text input.\r
        \r
        #
        Do This:\r
        - __Take the user's question and output it to the text area__
        when the 'enter' key is pressed in the text input\r
        - The response should
        also __include a default phrase__ such as _"I don't know about that yet!"_\r
        -
        __Format the response with newline characters__ to separate the user's response
        from the assistant's response.: `\n`\r
        - The __text input should clear__
        after the user hits 'enter'
      CSPU5_U3 Digital Assistant Target_markdown_instruction: |
        # Introduction to
        the Digital Assistant\r
        \r
        __While digital assistants may seem like magic,
        they are just elaborate computer programs that parse, or process, text__ looking
        for combinations of words to make decisions about what to reply.\r
        \r
        Over
        the next few lessons, __you're going to build up your own digital assistant
        that responds "intelligently" to a user's question__, by making a decision
        about what to reply based on the contents.\r
        \r
        You'll now __explore a
        demo digital assistant__, Movie Bot, that represents the kind of program that
        you'll build up to. Try out some of the prompts below and also try your own.
        You'll quickly find the limits of what this program can and can't do.\r
        \r
        #
        Do This:\r
        __Run Movie Bot. In the _'enter your question here'_ input,
        type each of the following prompts and hit 'enter.' __\r
        - 'help'\r
        -
        'What is the best PG comedy movie ever?'\r
        - 'What PG comedy movie should
        I watch next?'\r
        - 'Could you please tell me the best romance movie?'\r
        -
        'I waNT To WatCH a MovIE!!!'\r
        - 'What is the capital of Kentucky?'\r
        -
        Play around! Ask more questions of Movie Bot and make a prediction about what
        logic it's using to reply.\r
      CSPU5_U3 full clicker demo_markdown_instruction: |
        # Clicker Game Demo\r
        \r
        Try
        out this clicker game! You'll be building your own version (with a theme
        you choose) at the end of the lesson.\r
        \r
        # Things That Are Familiar\r
        You
        know how to build many of the components of this game already:\r
        - Multiple
        screens.\r
        - Buttons that change the screen when clicked.\r
        - Image that
        moves when you click it.\r
        \r
        # Things That Are New\r
        - Keeping track of
        and displaying the __changing score__.\r
        - Keeping track of and displaying
        the __changing lives__.\r
        - Changing to the __win screen if the score is
        25__.\r
        - Changing to the __lose screen if the lives is 0__.\r
      CSPU5_U3- Keys - Code Refactoring Exit Ticket_markdown_instruction: |
        # Free
        Response: Why Refactor?

        Why is refactoring your code important?
      CSPU5_U3- Variables - Create And Assign_markdown_instruction: |
        # Create and
        Assign At Once\r
        \r
        It's so common to want to create a variable and give
        it an initial value, that JavaScript has a shortcut that lets you create and
        assign with one line of code like this:\r
        \r
        <img src="https://images.code.org/84b576f02fe92989d0955dc8d4122eed-image-1445480709312.png"
        style="width:120px">\r
        \r
        \r
        You'll also see a new block in the toolbox
        for this (see right).<img src="https://images.code.org/cbe3f9ffd0bafef72ce18232f746fdbe-image-1445480538334.gif"
        style="float: right; width: 350px">\r
        \r
        # Do This:\r
        We'll just quickly
        practice using this form of variable creation and assignment.  The code you
        write will achieve the same thing as the previous level in fewer lines of
        code. \r
        \r
        * **Create a variable called `lives`** and **assign it the value
        3** using the new one-line version of this command. (See animation at right.)\r
        \r
        *
        **Add** `console.log` statements to display the value of `lives` just as before.  \r
        \r
        *
        The output in the console should (again) look like this:\r
         \r
         <img src="https://images.code.org/6405a3ed95ca3125ea1b2c9ffbdffa94-image-1445349849482.png"
        style="border: solid 1px gray">\r
        \r
      CSPU5_U3- Variables - Text Mode_markdown_instruction: |-
        # Give Text Mode a Try!\r
        The
        block-based mode of programming is useful for getting code into your app fast
        and error free.  But sometimes those little tiny edits are a pain. **Use text
        mode instead!**  Text mode is designed to make typing code fast and easy,
        and it also gives a lot of help to make your code error free. \r
        \r
        Let's
        re-create these variables again, but explore some features of text mode this
        time.\r
        \r
        # Try Each of These 3 Things\r
        We've given you the first two
        lines of code in a program. \r
        Expand each box below and try what's suggested
        - each builds on the previous one, so you might want to go in order.\r
        \r
        <details>\r
        <summary>1.
        **Switch to text mode and try to type.** [click to expand]</summary>\r
         \r

        Switch to text mode and **type out a `console.log` statement** to display
        the value of `score`.<br>\r
         <img src="https://images.code.org/d8cd6968bbb5fb5b5a8b8b3e41ee7ad1-image-1445353098262.gif"
        style="width: 500px">\r
        </details><br>\r
        \r
        <details>\r
        <summary>2.
        **Drag blocks into text mode.** [click to expand]</summary>\r
        \r
         If you
        don't want to type *everything* you can drag a block from the toolbox into
        text mode and it will show you the text version of it. **Add code to create
        the `lives` variable and a `console.log` message**.<br>\r
         \r
         <img src="https://images.code.org/b755a871221705ebdc73e73ffbfd1ad0-image-1445353101095.gif"
        style="width: 500px">\r
        \r
        </details><br>\r
        \r
        <details>\r
        <summary>3.
        **Check out code completion.** [click to expand]\r
        </summary>\r
         When you
        type commands a tool tip pops up that tries to guess what you're trying to
        type. If you see what you want in the box, **highlight it** (you can use arrow
        keys) and then **hit the tab key**. It will auto-complete the code for you!<br>\r

        \r
         <img src="https://images.code.org/177d70ab086d1481ad2ba5d367379aff-image-1445353103029.gif"
        style="width: 500px">\r
         </details>
      CSPU5_U3-Design Mode-ID and Event Handler_markdown_instruction: |-
        # Activate
        Your Button\r
        On the last level you added a button using Design Mode. If
        you click it, nothing happens. Let's make the button work. \r
        Your button
        has been brought over to this level.  \r
        \r
        **Goal:** Add code using Design
        Mode to make the button respond to a click.\r
        \r
        # Do This:\r
        \r
        <img
        src="https://images.code.org/9ff41c3ea30ece355e91eaca5cdc1e36-image-1444417748945.gif"  style="width:
        250px; float: right">\r
        \r
        * **Change ID of button** from “button1” to
        “redButton”.\r
        \r
        * **Insert `onEvent` from Design Mode** by clicking *Insert
        and show code* under the **Events Tab**.\r
        \r
        * Run the program and **look
        for the output in the *Debug Console* **below the workspace instead of the
        app window. We will discuss the *Debug Console* on the next level.
      CSPU5_U3-Design Mode-Image_markdown_instruction: |
        # Testing Overlapping objects
        and the Screen with Console.log\r
        \r
        There are two goals here:\r
        \r
        1.
        Practice inserting your own console.log statements.\r
        2. Investigate how
        the screen captures events (it's different).\r
        \r
        ## Do This:\r
        \r
        *
        Add `console.log` statements to each of the 3 event handlers we started you
        out with.\r
         * Make the text that gets printed *be descriptive* so that you
        know exactly what is happening when.\r
        \r
        * **Run** the program\r
        * **Click
        on the overlapping objects** both the parts that overlap and the parts that
        don't.\r
        * **\r
        \r
        **Investigate until you can answer the questions:**\r
        1.
        When you click on a location where two objects are overlapping, which event(s)
        fire(s)?\r
        2. When you click on an non-overlapping part of some object what
        gets triggered?\r
        3. When does a "click" on the "screen" get triggered?\r
        \r
        \r
        <details><summary>Answers:
        [click here]</summary>\r
        \r
        1. When you click on a location where two objects
        are overlapping, which event(s) fire(s)?\r
        <br>\r
        <li> The event-handler
        for object that is on top gets triggered.  The object that is underneath is
        essentially blocked from being clicked in the overlapping portion</li>\r
        <br><br>\r
        2.
        When you click on an non-overlapping part of some object what gets triggered?\r
        <li>The
        event-handler for the object gets triggered as you might expect</li>\r
        <br><br>\r
        3.
        When does a "click" on the "screen" get triggered?\r
        <li>Always. Events
        that occur on the screen cannot be blocked by other objects.  If you set up
        an event listener for the screen it will capture EVERY event of that type,
        no matter what other UI elements are on the screen.  This behavior of the
        screen is done on purpose and is useful for certain kinds of things.</li>\r
        \r
        \r
        </details>\r
      CSPU5_U313 Two Buttons with Ids_markdown_instruction: |-
        # Predict - Observe
        - Reflect\r
        Here's another one.  \r
        \r
        To understand a new piece of code
        good programmers often try to **first make a prediction about what will happen
        before running the program**. \r
        \r
        By forcing yourself to make a prediction
        (it doesn't matter if you're right or not) you are immediately alerted to
        any **unusual or unexpected behavior** and you can ask yourself, *"Huh? why
        did it do that?  Was that supposed to happen?"*  It might not be an error,
        but you gain invaluable insight and actually **learn faster**.\r
        \r
        **Predict:**
        For the code that is here, what will happen when the "Forward" button is
        clicked? \r
        \r
         * **Study the code** - This program has **two event handlers**
        listening for events on the same button?\r
         * **Force yourself to make a
        prediction!** - "I don't know" is not a prediction!. \r
        \r
        Here are some
        options to think about:\r
        \r
        * There will be an error in the console immediately
        after hitting run\r
        * There will be an error in the console but not until
        you hit the button\r
        * Program does nothing\r
        * turtle only moves forward\r
        *
        turtle only turns left\r
        * turtle move forward *then* turn left \r
        * turtle
        turn left *then* move forward?\r
        * something else? \r
        \r
        **Observe:** Once
        you've made a prediction, close these instructions and **run the program**
        to observe what happens.\r
        \r
        **Reflect:** Was your prediction correct?
        If not what about your mental model might need to change? Talk about it with
        a classmate and experiment with the code to make sure you understand what
        is happening.
      CSPU5_U313 drag Two Buttons_markdown_instruction: |
        # Buttons and Unique IDs\r
        You
        may have noticed that the button command has two parameters: `button(id, text)`.  The
        `text` is the text that actually shows up on the button display, and the `id`
        (we'll typically write **ID**) is a **unique identifier** for that element
        in the app.\r
        \r
        Each element that appears in the app must have a **unique
        ID**. In fact, if you try to run a program that has two buttons with same
        ID you will get a warning message in the console. Watch:\r
        <img src="https://images.code.org/47ec46e0563f63641cc10ef152e9f86e-image-1444074330713.gif"
        style="border: solid 1px black; width:500px">\r
        \r
        Notice that even though
        the text on the buttons was different, the IDs were the same, which caused
        the error message to show up. To get rid of that error message you will have
        to change the ID of the button from the default `id` to something else.\r
        \r
        **Error
        messages happen to everyone and they are helpful!**: getting an error or warning
        message when you run your program is *not a big deal*. Programmers actually
        rely on error messages to tell them where and how to fix their code.\r
        Sometimes
        error messages are bit cryptic: `WARNING: Line: 2: button() id parameter refers
        to an id (id) which already exists.` But a warning like this contains helpful
        information and clues such as the line the error occured on, or some word
        or command it didn't recognize. \r
        \r
        # Do This:\r
        The goal here is to
        experience an error message in a program, study it, and fix it.\r
        * **Drag**
        two buttons into the workspace (same as shown above) with the default IDs.\r
        *
        **Run** the program to see the warning message in the console.\r
        * **Read**
        the warning message to see what it says.\r
        * **Change** the IDs of the buttons
        to make them unique. An ID must be specified in quotes. You can use double-quotes:
        `"myId"`, or single quotes: `'myId'`\r
        * **Re-run the program** to make
        sure you don't get the error.\r
        \r
        Once you've got two buttons on the
        screen with different IDs and the program can run without generating the warning,
        move on to the next level.\r
      CSPU5_U3L13 - Debug Id Problem_markdown_instruction: |
        # Descriptive IDs\r
        \r
        **You
        try it** - give your buttons **descriptive and meaningful IDs** rather than
        the default `button1`, `button2` and so forth.\r
        \r
        Remember to:\r
        \r
        *
        **Change ** the event handler code so that it correctly references the new
        IDs of the buttons\r
        * **Run - Test - Debug ** the program to make sure it
        works, and debug any problems.\r
        \r
        <details><summary><strong>Reminder:</strong>
        Rules About IDs [click to expand]</summary>\r
        \r
        In making descriptive and
        meaningful IDs there **are some rules about IDs** you need to know.  IDs...\r
        \r
        <li>
        cannot contain spaces.\r
        <li>  *must* begin with a letter (A-Z or a-z) and
        may be followed by any number of digits and letters.\r
        <li>  can contain
        hyphens ("-"), underscores ("_"), colons (":"), or periods (".").\r
        \r
        </details>\r
      CSPU5_U3L13 - Debugging 1_markdown_instruction: |
        # Debugging Event-Driven Programs:
        IDs\r
        \r
        Try another one! -- This one is trickier, but very common.\r
        \r
        1.
        **Run the program** and inspect the messages in the Debug Console for clues.\r
        2.
        **Investigate** - track down what the root of the problem might be.\r
        3.
        **Fix it** the program and correct the errors so that it works as intended.\r
        4.
        **Run the program** and verify that both buttons have the intended functionality.\r
        5.
        **Repeat as necessary** until the program works as intended\r
        \r
        <details><summary>Hint?
        [click here]</summary>\r
        \r
        <li>Remember: IDs are **case-sensitive**!!!</li>\r
        <li>The
        error is with the id: **left**[**B/b**]**tn**</li>\r
        </details>\r
      CSPU5_U3L13 - Debugging 2_markdown_instruction: |-
        # Debugging Event-Driven Programs:
        Ordering Event Handlers\r
        \r
        **Ordering Event Handlers: ** Event handlers
        must come **after the object they reference in the code**. If your event handler
        comes before your object (in this case a button) your computer would be looking
        for an event on an object that does not yet exist. You will get an error message
        and your code will not work as you intend.<img src="https://images.code.org/b5d00d8027dae463eebb7f1c079cb2e2-image-1444156708725.gif"
        style="float: right; width: 150px">\r
        \r
        **Target Application:** Just
        like the last exercise, you'll again try to make an app that has two buttons,
        one for moving forward and one for turning left.  \r
        \r
        Once again, we've
        introduced a new error.\r
        \r
        # Do This:\r
        **Run the Existing program**
        to see the error that gets generated.\r
        \r
        **Debug ** this program so that
        it works as intended.\r
        \r
        **Run the program ** and try both buttons to
        make sure they have the intended functionality.
      CSPU5_U3L13 - Debugging 3_markdown_instruction: |-
        # Debugging Logical Errors\r
        \r
        Sometimes
        you can write a program that generates no errors but still does not work as
        intended. \r
        \r
        This is the result of **logical errors** in your code, and
        **making a prediction** can help find these nasty little buggers too.\r
        \r
        Once
        again we've introduced an error or two (a logical error this time) for you
        to debug.\r
        \r
        1. **Investigate the code and make a prediction** - What
        *should* happen here?\r
        2. **Run the program** and experiment to see what's
        wrong.\r
        3. **Reflect** - were you right?  Why or why not?\r
        4. **Fix it**
        - make it work as intended.\r
        5. **Repeat as necessary**
      CSPU5_U3L13 - Debugging IDs case sensitive_markdown_instruction: |
        # Debugging
        Event-Driven Programs: IDs\r
        \r
        Try another one! -- This one is trickier,
        but very common.\r
        \r
        1. **Run the program** and inspect the messages in
        the Debug Console for clues.\r
        2. **Investigate** - track down what the root
        of the problem might be.\r
        3. **Fix it** the program and correct the errors
        so that it works as intended.\r
        4. **Run the program** and verify that both
        buttons have the intended functionality.\r
        5. **Repeat as necessary** until
        the program works as intended\r
        \r
        <details><summary>Hint? [click here]</summary>\r
        \r
        <li>Remember:
        IDs are **case-sensitive**!!!</li>\r
        <li>The error is with the id: **left**[**B/b**]**tn**</li>\r
        </details>\r
      CSPU5_U3L13 - Project_markdown_instruction: |-
        # Multi Screen App\r
        You will
        be creating your own multi-screen app to practice designing user interfaces
        and writing event-driven programs. \r
        \r
        **Look at the Project Guide and
        Planning Sheets before programming**.\r
        \r
        # Requirements Reminder\r
        *
        Your app will have at least **4 screens**.\r
        * Your app should include **text,
        images, buttons, and sound**.\r
        * There should be **no “getting stuck” on
        any screen.**  It should always be possible to navigate from a screen in your
        app to some other screen. \r
        * Your program code should follow **good style**.\r
        *
        Your user interface should be **intuitive to use**.
      CSPU5_U3L13 - Turtle Driver Project_markdown_instruction: "# Create a Turtle\nDriver
        App!\\r\n\\r\nAt this point you know enough about buttons and event handlers,\nand
        how to debug some common issues that arise to be able to **build your\nown
        \"turtle-driver\" app** from scratch. \\r\n\\r\n**Build up the program bit\nby
        bit**. Don't try to write all the code at once.  Add a button with an\nevent
        handler, make sure it works, debug any problems, and then move on to\nthe
        next part.\\r\n\\r\n# Do This:\\r\n\\r\n**Create ** an application with **four\nbuttons**,
        one for moving the turtle forward and one each for turning left\nand right.
        \ The fourth button should do whatever you like.\\r\n\\r\n**Use descriptive\nand
        meaningful IDs** for your buttons and ensure your event handlers work\nas
        you intend.\\r\n\\r\n**If you have extra time** add more buttons that use\nother
        turtle commands you'd like to include.  You can also use colors, and\ndifferent
        line widths, dots, etc. "
      CSPU5_U3L13 - Turtle move with button_markdown_instruction: |-
        # Your First Interactive
        App!\r
        <img src='https://images.code.org/3fad83213ae72073251c4d5abc1f048a-image-1444060521578.png'
        style='float: right; width: 250px'> A new group of commands has been added
        to the toolbox called **UI Controls** (User Interface Controls) which are
        commands that let you interact with, and respond to, the user of your app.
        To keep it simple, we'll start with just two commands: \r
        * `onEvent` which
        lets you run a function in response to some event occuring (such as a button
        click).\r
        * `button` which puts a button on the screen.\r
        \r
        # Do This:\r
        You
        will replicate the small app shown below, which makes the turtle move with
        a button click. You will do three things:\r
        * Add a `button`.\r
        * Add an
        `onEvent` block.\r
        * Add `moveForward` inside the onEvent function block.\r
        \r
        Here's
        what you should do - you can come back to watch this as many times as you
        need to get it right.\r
        <img src="https://images.code.org/1cdc8cfbcef2a43f84b11ebdf14aed0c-image-1444061731350.gif"
        style="border: solid 1px black; width: 500px; margin: auto">\r
        \r
        Once
        you've created the program and gotten it to run, click **Finish** to move
        onto the next level.
      CSPU5_U3L13 Free Response Reflection_markdown_instruction: |+
        Elements in your
        app are required to have **unique IDs**. Given what you now know about how
        event handlers work, why is it important for the IDs of page elements to be
        unique?

      CSPU5_U3L13 eventsDetails_markdown_instruction: |
        # onEvent\r
        \r
        **You try
        it!** - Make the turtle move forward when the button is clicked.\r
        \r
        *
        **Add an `onEvent` block** \r
        * Set the **id** and **type** you want.\r
        *
        Add `moveForward` to the function definition\r
        \r
        * **Run the program**
        to make sure it works.\r
        * **Try changing the event type** to something like
        *"mouseover"* and see what happens.  Not all event types will work with
        buttons but it's fun to play a little bit.\r
        \r
        Once you've got the program
        responding to some event, congratulations! You've just made your first interactive
        app. \r
        \r
        **Click Finish** to move on to the next problem.\r
        \r
      CSPU5_U3L14 - Assigning Random Value_markdown_instruction: |
        # Other Ways to
        Assign Values to Variables\r
        Programs become much more interesting when the
        values in variables change while the program is running. We can also assign
        to a variable the value returned by a function. For example:\r
        \r
        ![](https://images.code.org/31447c1b90c925bba3ca86ead8d84a7d-image-1445892065474.png)\r
        \r
        Because
        the `randomNumber` function *evaluates to a number* it means we can treat
        it *as though it were a number*. We've used it before by just "plugging
        it in" to some function that needed a number as a parameter like:\r
        ![](https://images.code.org/5df0376d562bd75a1899e17c49b00144-image-1445941026356.png)\r
        \r
        Because
        the `randomNumber` function generates a new and different number each time
        you call it, one thing we *could not* do before we had variables was generate
        a random number, and use that *same number* for two different things in a
        program. Now we can.\r
        \r
        # Do This:\r
        <img src="https://images.code.org/df3d2a8f4c1a3061981667c9f85b0071-image-1445549489133.png"
        style="float: right; width: 350px">Write a program that simulates the rolling
        of two dice and reports their individual values as well as the sum. \r
        The
        program should:\r
        * Generate two random numbers between 1 and 6 and store
        each result in its own variable.\r
        * Display the individual values of the
        two dice.\r
        * Display the sum of the two dice (see right).\r
        * Every time
        you run the program the result will be a little different.\r
        \r
        We have
        given you starting code that shows what to do for the first die. The *rest
        of the code is up to you!*  When you're done the output in the app display
        should look like what's above.\r
        \r
      CSPU5_U3L14 - Mini Calculator embed_markdown_instruction: |-
        # Getting User Input
        - A Simple Calculator\r
        Programs become *even more interesting* when we can
        interact with the user. A short way to ask a user for a number is with the
        `promptNum` command, which pops up a dialog box asking the user to enter a
        number.\r
        \r
        This very simple app demonstrates a new behavior: getting input
        from the user.\r
        **You will write code to re-create this program** on the
        next page.\r
        \r
        # Do This:\r
        * Click "Run" on the app.\r
        * You will
        be prompted for two numbers, one right after the other.\r
        * See what happens.\r
        *
        Re-run the program and enter different numbers until you get the idea.\r
        \r
        Click
        **Finish** to move on.
      CSPU5_U3L14 - User Input Division calculator_markdown_instruction: |
        # Assigning
        User Input to Variables\r
        <img src="https://images.code.org/bad81f7d5e514a1d727e51aab52aac10-image-1445552999503.gif"
        style="width: 350px; float:right">\r
        Let's use `promptNum` to make a simple
        calculator. The `promptNum` command appears in the variables toolbox because
        it's typically used as a way to get a value from the user that you want to
        hold on to while the program runs.\r
        \r
        `promptNum` is similar to `randomNumber`
        in that it is a function whose return value *evaluates to a number*. The difference
        here is that `promptNum` pops up an input dialog box and waits for the user
        to type a number.  Once they do and hit "OK" the number they typed is returned
        and we can store it in a variable to use in our programs.\r
        \r
        \r
        # Do
        This:\r
        Write a program that acts as a simple calculator. (An animation of
        the end result is shown at right.) <img src="https://images.code.org/e644d4b17d1d6fdb6b5a93651d512f8a-image-1445552700557.gif"
        style="width: 250px; float: right">\r
        * Ask the user to **enter a number**.\r
        *
        Then ask the user to **enter a second number**.\r
        * **Display the result**
        of *some* calculation.\r
         * The example shows division but you may choose
        something else if you like.\r
        \r
        We have given you starting code that shows
        you how to get the first number.  The rest of the code is up to you.\r
        \r
      CSPU5_U3L14 - Variable ReAssignment pt2_markdown_instruction: |
        # Variable Re-assignment
        - Part 2: Updating Values\r
        \r
        All of our examples so far have shown how
        to set the value of a variable by using combinations of numbers and other
        variables.  But what if you wanted to do something like **add 10 to the *current*
        value of a variable**? \r
        \r
        Because updating the value in a variable is
        just moving memory around, the process has to go something like this:\r
        *
        Read the current value of a variable.\r
        * Add 10 to it.\r
        * Store the new
        value back into the same variable.\r
        \r
        The technical term for this is called
        **variable re-assignment** - when you change the value of a variable based
        on its current contents.   To increase the value of `num1` by 10 you actually
        need to do this:\r
        \r
        <img src="https://images.code.org/c49b1a0fb81de4b90558fdb278e40987-image-1445942169121.png"
        style="float:right">\r
        ```\r
        num1 = num1 + 10;\r
        ```\r
        The diagram at
        right shows a picture of what's happening (it assumes the value of `num1`
        is 7 before the line is executed).  It's actually very similar to what happens
        with plain old arithmetic: compute a value, then store it in a variable.  Because
        the computation has to happen before storing the result in a variable, there
        is no contradiction here.\r
        \r
        <details>\r
        <Summary><strong>Common Mistakes
        & Tips</strong> [click to expand]</Summary>\r
        \r
        <h3>\r
        Mistake 1\r
        </h3>\r
        <p>To
        increase the value of variable by 10 (for example) a common mistake is to
        think that this statement alone will do the trick.\r
        </p><p>\r
        \r
        ```\r
        num1
        + 10;\r
        ```\r
        </p><p>\r
        It doesn't. This tells the computer to add 10
        to whatever the value of `num1` is.  And the computer will do that, and the
        result will go....nowhere.  It will be lost.\r
        </p><p>\r
        Because you are
        trying assign a new value to a variable it should make sense that **the =
        sign must be involved somehow**.  \r
        </p>\r
        <h3>\r
        Mistake 2\r
        </h3>\r
        <p>\r
        If
        you were in math class this statment would make no sense:\r
        ```\r
        num1 =
        num1 + 10;\r
        ```\r
        </p><p>\r
        But **remember to read = as "gets."** If
        you read the statement above as: "num1 *gets* the value of num1's current
        value plus 10" it might make more sense.  Get in the habit of using "gets."\r
        </p>\r
        </details>\r
        \r
        #
        Do This:\r
        \r
         * **Make a prediction.**\r
         We start you out with some code
        again (see below). \r
        \r
         <img src="https://images.code.org/60b25394c387bc111451f0e481528733-image-1447800367736.43.42.png"
        style="width: 500px;"> \r
        \r
         Trace the code and predict what you think
        will be printed to the console.  (NOTE: We're serious about this "make a
        prediction" stuff. When you force yourself to make a prediction about what
        code will do you will learn faster since it triggers you to apply your mental
        model of what's happening.)\r
          \r
         * **Run the program** to see if you
        were right.\r
         \r
         * **Add a `console.log` statement**.\r
         \r
          We've
        left you with a *little bit* of programming to do: add a `console.log` statement
        at the end of the program to see the last value of `someNum` to see if your
        full prediction is correct.\r
      CSPU5_U3L14 - concatenate simple_markdown_instruction: |-
        # Text and Variables
        Living Together!\r
        \r
        Sometimes it’s useful to display text along with the
        value of a variable in the same line of output. To do this you use `+` to
        attach a variable onto a literal string of characters.  Here is an example:\r
        \r
        <img
        src="https://images.code.org/a35e68b062fc814871a8323938cf3384-image-1445888147995.png"
        style="border: solid 1px #BBBBBB; height: 30px;">\r
        \r
        Notice that the
        `+` operator has **two different meanings in JavaScript depending on what
        type of data you're applying it to**. Click the explanations below for more
        details.\r
        \r
        <details>\r
        <summary>If **both operands are numbers** `+`
        means to add those two numbers together.</summary>\r
        \r
        This is standard
        addition.  It works both with numbers and with variables that contain numbers,
        as shown below.<br>\r
        \r
        <img src="https://images.code.org/eb50a1fcea459fe74774d903b07a274f-image-1445887814602.png"
        style="border: solid 1px #BBBBBB; height: 30px;"><br>\r
        \r
        Because `num1`
        is a variable that holds a number, and 10 itself is obviously a number, in
        this case `+` will do addition like you would expect.\r
        \r
        </details>\r
        <br>\r
        <details>\r
        <summary>If
        **either of the operands is a string** `+` treats both as if they were strings
        and combines them to create a single string.</summary>\r
        This is potentially
        confusing behavior and can get pretty weird if the text *looks* like numbers.  For
        example, this code will display **16100** to the screen.<br>\r
        \r
        <img src="https://images.code.org/a9c54b664bd192aa5bf611808d88a3bc-image-1445887893598.png"
        style="border: solid 1px #BBBBBB; height: 30px;"><br>\r
        \r
        Why? Because
        JavaScript sees you trying to display a mix of text and variable values. "16"
        (in quotes) is a string of ASCII characters not a number.  And so JavaScript
        converts everything to text, and the characters in the result of "16"+"100"
        comes out to "16100". \r
        \r
        </details>\r
        <br>\r
         \r
        **TIP:** It's
        common to want to sandwich a variable between some text when displaying it.  You
        can string together multiple pieces of text and variables using the `+` operator.  For
        example, you can do this:\r
        <br> \r
        \r
        <img src="https://images.code.org/65b0e277f058903bd3b956cc59ee5253-image-1445887976271.png"
        style="border: solid 1px #BBBBBB; height: 30px;"><br>\r
         \r
        <br>\r
        <details>\r
        <summary>**Misconception
        Alert**</summary>\r
        \r
        The **key thing to understand** about the `+` symbol
        is that it can _only_ do actual arithmetic addition if the values on either
        side of the `+` are actually numbers or variables that contain numbers. \r
        \r
        **And**
        if the `+` symbol cannot determine whether the value is a number then it **assumes
        it's a string**, and converts everything to a string and tries to concatenate
        it.  \r
         \r
        The computer relies on you - the programmer - to make sure that
        the **type of data** stored in a variable is appropriate for the task at hand.\r
        </details><br>\r
        \r
        On
        the next screen we'll have you play with this a little bit, but you'll write
        statements to display a mix of text and strings from here on out.\r
        \r
        #
        Do This:\r
        We have given you the starting code shown below.  You should **modify**
        the `write` statement on **line 3** to combine text and variables together
        to make the app display a single line of text as shown.\r
        \r
        |starting code|output|\r
        |--|--|\r
        |<img
        src="https://images.code.org/a1b84a8728599e9945c576d3bb459140-image-1445891621155.png"
        style="height:50px">| <img src="https://images.code.org/f5673df128eca0f9637c0cca1729b489-image-1445891800242.png"
        style="width: 250px">|
      CSPU5_U3L14 - moving memory challenge1_markdown_instruction: |
        # Moving Memory
        - Challenge 1\r
        \r
        The next several levels all present challenges related
        to "moving memory" around in your program.  \r
        \r
        **GOAL:** Set the value
        of the variable(s) to make the `console.log` statement display what it's
        supposed to.\r
        \r
        **Rules**:\r
        \r
         * You may **only** add lines of code
        that re-assign values of variables provided.\r
         * You may **only** use assignment
        (`=`) and arithmetic operators (`+` `-` `*` `/`).\r
         * You **MAY NOT** type
        or introduce any numbers.\r
         * You **MAY NOT** add or create any new variables.\r

        * You **MAY NOT** change or alter the `console.log` statement at all.\r
        \r

        \r
        Example:\r
        <table>\r
        <tr>\r
        \t<th>Code Provided</th>\r
        </tr>\r
        <tr>\r

        <td >\r
                <img src="https://images.code.org/bd3c9a918b22a2874ae77fc82289aab5-image-1447800921923.52.14.png"><br>\r
                <br>The
        code you're given will have a few variables initialized to some values.  The
        last line will be one or more `console.log` statements with a comment indicating
        what the expected value to display should be.\r
                <hr>\r
            </td>\r
        </tr>\r
        <tr>\r
        \t<th>A
        Possible Solution</th>\r
        </tr>\r
        <tr>\r
        \t<td valign=top >\r
            <img
        src="https://images.code.org/4742fed6bff4ad62411b9090f8468db0-image-1447800924556.54.37.png"
        >\r
            <br><br>You need to add a line (or multiple lines) of code to re-assign
        the values in variables so the `console.log` statement displays what's expected.  In
        this example we show a solution on line 5.  Please note that there are several
        different things you could do. For example, you could go crazy and do something
        like: <strong>y = x + x + (x/x);</strong>.  What you do is up to you.\r
            </td>
        \r
        </tr>\r
        </table>\r
        <br><br>\r
        ### Try this example yourself...\r
        \r
      CSPU5_U3L14 - moving memory challenge2_markdown_instruction: |
        # Moving Memory
        - Challenge 2\r
        \r
        # Try another one!! \r
        * Click through to see a new
        problem provided in the starter code.  \r
        * A reminder of the rules and example
        are below if you need to sneak a peek.\r
        \r
        <details>\r
        <summary><strong>Reminder
        of the rules</strong> (click to expand)</summary>\r
        \r
        <p>\r
        **GOAL:**
        Set the value of the variable(s) to make the `console.log` statement display
        what it's supposed to.\r
        </p><p>\r
        \r
        **Rules**:\r
        </p><p>\r
         <li>You
        may **only** add lines of code that re-assign values of variables provided.\r

        <li> You may **only** use assignment (`=`) and arithmetic operators (`+` `-`
        `*` `/`).\r
         <li> You **MAY NOT** type or introduce any numbers.\r
         <li>
        You **MAY NOT** change or alter the `console.log` statement at all.\r
        </p><p>\r

        \r
        Example:\r
        <table>\r
        <tr>\r
        \t<th>Code Provided</th>\r
        </tr>\r
        <tr>\r

        <td >\r
                <img src="https://images.code.org/bd3c9a918b22a2874ae77fc82289aab5-image-1447800921923.52.14.png"><br>\r
                <br>The
        code you're given will have a few variables initialized to some values.  The
        last line will be one or more `console.log` statements with a comment indicating
        what the expected value to display should be.\r
                <hr>\r
            </td>\r
        </tr>\r
        <tr>\r
        \t<th>A
        Possible Solution</th>\r
        </tr>\r
        <tr>\r
        \t<td valign=top >\r
            <img
        src="https://images.code.org/4742fed6bff4ad62411b9090f8468db0-image-1447800924556.54.37.png"
        >\r
            <br><br>You need to add a line (or multiple lines) of code to re-assign
        the values in variables so the `console.log` statement displays what's expected.  In
        this example we show a solution on line 5.  Please note that there are several
        different things you could do. For example, you could go crazy and do something
        like: <strong>y = x + x + (x/x);</strong>.  What you do is up to you.\r
            </td>
        \r
        </tr>\r
        </table>\r
        \r
        </details>\r
        \r
        <br><br>\r
        ### Try it yourself...\r
      CSPU5_U3L14 - moving memory challenge3_markdown_instruction: |
        # Moving Memory
        - Challenge 3\r
        \r
        Try another one.  Here is the starting code:\r
        \r
        ```\r
        var
        x = 2;\r
        var y = 3;\r
        // your code here\r
        \r
        console.log("The value of
        x is: " + x + " (x should be 7)");\r
        ```\r
        \r
        <details>\r
        <summary><strong>Reminder
        of the rules</strong> (click to expand)</summary>\r
        \r
        <p>\r
        **GOAL:**
        Set the value of the variable(s) to make the `console.log` statement display
        what it's supposed to.\r
        </p><p>\r
        \r
        **Rules**:\r
        </p><p>\r
         <li>You
        may **only** add lines of code that re-assign values of variables provided.\r

        <li> You may **only** use assignment (`=`) and arithmetic operators (`+` `-`
        `*` `/`).\r
         <li> You **MAY NOT** type or introduce any numbers.\r
         <li>
        You **MAY NOT** change or alter the `console.log` statement at all.\r
        </p><p>\r

        \r
        Example:\r
        <table>\r
        <tr>\r
        \t<th>Code Provided</th>\r
        </tr>\r
        <tr>\r

        <td >\r
                <img src="https://images.code.org/bd3c9a918b22a2874ae77fc82289aab5-image-1447800921923.52.14.png"><br>\r
                <br>The
        code you're given will have a few variables initialized to some values.  The
        last line will be one or more `console.log` statements with a comment indicating
        what the expected value to display should be.\r
                <hr>\r
            </td>\r
        </tr>\r
        <tr>\r
        \t<th>A
        Possible Solution</th>\r
        </tr>\r
        <tr>\r
        \t<td valign=top >\r
            <img
        src="https://images.code.org/4742fed6bff4ad62411b9090f8468db0-image-1447800924556.54.37.png"
        >\r
            <br><br>You need to add a line (or multiple lines) of code to re-assign
        the values in variables so the `console.log` statement displays what's expected.  In
        this example we show a solution on line 5.  Please note that there are several
        different things you could do. For example, you could go crazy and do something
        like: <strong>y = x + x + (x/x);</strong>.  What you do is up to you.\r
            </td>
        \r
        </tr>\r
        </table>\r
        \r
        </details>\r
        \r
        <br><br>\r
        ### Try it yourself...\r
      CSPU5_U3L14 - moving memory challenge4_markdown_instruction: |
        # Moving Memory
        - Challenge 4\r
        \r
        Try another one.  Here is the starting code:\r
        \r
        ```\r
        var
        x = 2;\r
        // your code here\r
        \r
        console.log("The value of x is: " + x
        + " (x should be 8)");\r
        ```\r
        \r
        <details>\r
        <summary><strong>Reminder
        of the rules</strong> (click to expand)</summary>\r
        \r
        <p>\r
        **GOAL:**
        Set the value of the variable(s) to make the `console.log` statement display
        what it's supposed to.\r
        </p><p>\r
        \r
        **Rules**:\r
        </p><p>\r
         <li>You
        may **only** add lines of code that re-assign values of variables provided.\r

        <li> You may **only** use assignment (`=`) and arithmetic operators (`+` `-`
        `*` `/`).\r
         <li> You **MAY NOT** type or introduce any numbers.\r
         <li>
        You **MAY NOT** change or alter the `console.log` statement at all.\r
        </p><p>\r

        \r
        Example:\r
        <table>\r
        <tr>\r
        \t<th>Code Provided</th>\r
        </tr>\r
        <tr>\r

        <td >\r
                <img src="https://images.code.org/bd3c9a918b22a2874ae77fc82289aab5-image-1447800921923.52.14.png"><br>\r
                <br>The
        code you're given will have a few variables initialized to some values.  The
        last line will be one or more `console.log` statements with a comment indicating
        what the expected value to display should be.\r
                <hr>\r
            </td>\r
        </tr>\r
        <tr>\r
        \t<th>A
        Possible Solution</th>\r
        </tr>\r
        <tr>\r
        \t<td valign=top >\r
            <img
        src="https://images.code.org/4742fed6bff4ad62411b9090f8468db0-image-1447800924556.54.37.png"
        >\r
            <br><br>You need to add a line (or multiple lines) of code to re-assign
        the values in variables so the `console.log` statement displays what's expected.  In
        this example we show a solution on line 5.  Please note that there are several
        different things you could do. For example, you could go crazy and do something
        like: <strong>y = x + x + (x/x);</strong>.  What you do is up to you.\r
            </td>
        \r
        </tr>\r
        </table>\r
        \r
        </details>\r
        \r
        <br><br>\r
        ### Try it yourself...\r
      CSPU5_U3L14 - moving memory challenge5_markdown_instruction: |
        # Moving Memory
        - Challenge 5\r
        \r
        Try another one.  Here is the starting code:\r
        \r
        ```\r
        var
        x = 2;\r
        var y = 3;\r
        var z = 0;\r
        // your code here\r
        \r
        console.log("The
        value of x is: " + x + " (x should be 3)");\r
        console.log("The value
        of y is: " + y + " (y should be 2)");\r
        ```\r
        </p><p>\r
        <details>\r
        <summary><strong><big>HINT:</big></strong>(click
        to expand)</summary>\r
        Since this one requires you to change the value of
        two variables you need to be careful about which one you change first, since
        its new value will affect the next lines of code.\r
        <p></p>\r
        You can also
        take advantage of the fact that since `z` is not used as a display value,
        you can use it as a temporary holding ground for one value while you change
        another.\r
        \r
        </details>\r
        </p><p>\r
        </p><p>\r
        \r
        <details>\r
        <summary><strong>Reminder
        of the rules</strong> (click to expand)</summary>\r
        \r
        <p>\r
        **GOAL:**
        Set the value of the variable(s) to make the `console.log` statement display
        what it's supposed to.\r
        </p><p>\r
        \r
        **Rules**:\r
        </p><p>\r
         <li>You
        may **only** add lines of code that re-assign values of variables provided.\r

        <li> You may **only** use assignment (`=`) and arithmetic operators (`+` `-`
        `*` `/`).\r
         <li> You **MAY NOT** type or introduce any numbers.\r
         <li>
        You **MAY NOT** change or alter the `console.log` statement at all.\r
        </p><p>\r

        \r
        Example:\r
        <table>\r
        <tr>\r
        \t<th>Code Provided</th>\r
        </tr>\r
        <tr>\r

        <td >\r
                <img src="https://images.code.org/bd3c9a918b22a2874ae77fc82289aab5-image-1447800921923.52.14.png"><br>\r
                <br>The
        code you're given will have a few variables initialized to some values.  The
        last line will be one or more `console.log` statements with a comment indicating
        what the expected value to display should be.\r
                <hr>\r
            </td>\r
        </tr>\r
        <tr>\r
        \t<th>A
        Possible Solution</th>\r
        </tr>\r
        <tr>\r
        \t<td valign=top >\r
            <img
        src="https://images.code.org/4742fed6bff4ad62411b9090f8468db0-image-1447800924556.54.37.png"
        >\r
            <br><br>You need to add a line (or multiple lines) of code to re-assign
        the values in variables so the `console.log` statement displays what's expected.  In
        this example we show a solution on line 5.  Please note that there are several
        different things you could do. For example, you could go crazy and do something
        like: <strong>y = x + x + (x/x);</strong>.  What you do is up to you.\r
            </td>
        \r
        </tr>\r
        </table>\r
        \r
        </details>\r
        \r
        <br><br>\r
        ### Try it yourself...\r
      CSPU5_U3L14 - moving memory challenge6_markdown_instruction: |
        # Moving Memory
        - Challenge 5\r
        \r
        Try another one.  Here is the starting code:\r
        \r
        ```\r
        var
        x = 5;\r
        var y = 11;\r
        var z = 4;\r
        // your code here\r
        \r
        console.log("The
        value of x is: " + x + " (x should be 2)");\r
        console.log("The value
        of y is: " + y + " (y should be 6)");\r
        console.log("The value of z is:
        " + z + " (z should be 8)");\r
        ```\r
        </p><p>\r
        <details>\r
        <summary><strong><big>HINT:</big></strong>
        (click to expand)</summary>\r
        This one requires you to be a little clever.  Think
        about setting the value of one variable that you could then use to easily
        set the value of the other variables.  Then the trick is to figure out how
        to use the variables you've been given to make that useful value.\r
        \r
        </details>\r
        </p><p>\r
        </p><p>\r
        \r
        <details>\r
        <summary><strong>Reminder
        of the rules</strong> (click to expand)</summary>\r
        \r
        <p>\r
        **GOAL:**
        Set the value of the variable(s) to make the `console.log` statement display
        what it's supposed to.\r
        </p><p>\r
        \r
        **Rules**:\r
        </p><p>\r
         <li>You
        may **only** add lines of code that re-assign values of variables provided.\r

        <li> You may **only** use assignment (`=`) and arithmetic operators (`+` `-`
        `*` `/`).\r
         <li> You **MAY NOT** type or introduce any numbers.\r
         <li>
        You **MAY NOT** change or alter the `console.log` statement at all.\r
        </p><p>\r

        \r
        Example:\r
        <table>\r
        <tr>\r
        \t<th>Code Provided</th>\r
        </tr>\r
        <tr>\r

        <td >\r
                <img src="https://images.code.org/bd3c9a918b22a2874ae77fc82289aab5-image-1447800921923.52.14.png"><br>\r
                <br>The
        code you're given will have a few variables initialized to some values.  The
        last line will be one or more `console.log` statements with a comment indicating
        what the expected value to display should be.\r
                <hr>\r
            </td>\r
        </tr>\r
        <tr>\r
        \t<th>A
        Possible Solution</th>\r
        </tr>\r
        <tr>\r
        \t<td valign=top >\r
            <img
        src="https://images.code.org/4742fed6bff4ad62411b9090f8468db0-image-1447800924556.54.37.png"
        >\r
            <br><br>You need to add a line (or multiple lines) of code to re-assign
        the values in variables so the `console.log` statement displays what's expected.  In
        this example we show a solution on line 5.  Please note that there are several
        different things you could do. For example, you could go crazy and do something
        like: <strong>y = x + x + (x/x);</strong>.  What you do is up to you.\r
            </td>
        \r
        </tr>\r
        </table>\r
        \r
        </details>\r
        \r
        <br><br>\r
        ### Try it yourself...\r
      CSPU5_U3L15 - Add reset button to UpDown app_markdown_instruction: |-
        # Add a
        Reset Button\r
        In most apps you want to provide a way to start over. \r
        \r
        To
        do this without having the user quit and restart your app, you need to add
        code to **reset variables and text displays to initial values** so the app
        can effectively start over.\r
        \r
        We've **added a button** to the "gameOverScreen"
        in the *Count Up/Down App* and **added an empty event handler** for it.  \r
        \r
        Right
        now clicking the "start over" button does nothing. You will write code to
        make it work.\r
        \r
        \r
        # Do This:\r
        **Add code to the startOverButton event
        handler to reset the app**.  <img src="https://images.code.org/cb1569accb6a370d2258b5b14d624424-image-1446126849891.gif"
        style="width: 150px; float: right;">\r
        \r
        The app should work like the
        animation shown to the right. **Notice** that when the "start over" button
        is clicked it goes back to the main screen and  the count has been reset to
        0. \r
        \r
        The code should:\r
        \r
        * Set the screen to the gamePlayScreen.\r
        *
        Set the count variable to 0.\r
        * Set the correct text label on the gamePlayScreen
        to show the count is 0.\r
        \r
        Once you get it to work, move on.
      CSPU5_U3L15 - DEMO up down count practice app_markdown_instruction: |
        # All
        the Basics You Need\r
        \r
        <img src="https://images.code.org/abb09baa0b6ccc24ff141590c5b667c3-image-1446417655965.gif"
        style="float:right; width: 150px"> When you close these instructions, you'll
        get to play a little bit with the very simple app (shown at right) to demonstrate
        the basics of concepts involved in making the clicker game.  We'll call it
        the **Count Up/Down App**.  Yes, it's a boring "game," but it has all the
        pieces of a more sophisticated game.\r
        \r
        This app demontrates a few new
        concepts.  We'll step through each one, one at a time, explaining how each
        thing works.  Along the way, we'll also encounter some common challenges,
        and learn how to solve them.\r
        \r
        # Do This:\r
        * Keeping clicking the up
        arrow until something happens (something besides the number increasing).\r
        *
        Start over.\r
        * Click the down arrow until something happens (something besides
        the number decreasing).\r
        * Start over.\r
        \r
        Once you think you've seen
        all the behavior click Finish to see the first part of how this is done.\r
        \r
      CSPU5_U3L15 - Debug forget to update var on reset in UpDown app_markdown_instruction: |-
        #
        Bug Squash!\r
        \r
        The *Count Up/Down App* has a bug! \r
        \r
        A ** common
        mistake** has been introduced into the code.\r
        \r
        It's a tricky one to
        find because at first it looks like everything is okay.\r
        \r
        # Do This:\r
        \r
        *
        **Run the program.**\r
        \r
        * **To see the bug:**\r
         * Click the up or down
        arrow until you get to the "gameOverScreen."\r
         * Click "start over."\r

        * Click the up or down arrow again... what the?\r
         \r
        * **Look at the code
        and fix the problem.**\r
        \r
        * **Read about the common mistake** by expanding
        the area below.\r
        \r
        * **Once you've fixed the issue, move on.**\r
        \r
        <details>\r
        <summary><big><strong>Read
        about the common mistake here...</strong></big> [click to expand]</summary>\r
        <br><br>\r
        <strong><big>...forgetting
        to reset <i>everything</i> you need to actually start over.</big></strong><br><br>\r
        Frequently
        to actually reset you need to set a few variables back to initial values <i>and</i>
        update all the UI components, especially those that rely on those variables,
        so they reflect the new values.<br><br>\r
        \r
        Another common mistake shown
        here is setting the text of a label to "0" rather than the value of the
        count variable.  For example, these two lines of code are a little dangerous:<br><br>\r
        <pre>\r
        count
        = 0;\r
        setText("countDisplayLabel", 0);\r
        </pre>\r
        \r
        To be safe, if
        a label is supposed to display the value of a variable, you should always
        use the variable <i>instead of hard-coding numbers</i> as a check on yourself.  The
        general rule of thumb is: never hard-code a value instead of using a variable
        that holds the value you need to show.<br><br>\r
        \r
        <b>A common strategy</b>
        for handling this is to put everything you need to reset the app into a function
        which you can call at both the beginning of your program, and from other screens
        later on.  For example:<br><br>\r
        \r
        <pre>\r
        function resetAll(){\r
          count
        = 0;\r
          setText("countDisplayLabel", count);\r
          setScreen("gamePlayScreen");\r
        }\r
        </pre>\r
        \r
        Then
        in some other code like a button event handler you can just call your reset
        \r
        function:<br><br>\r
        \r
        <pre>\r
        onEvent("startOverButton", "click",
        \r
        function() {\r
          <span style="background-color:yellow">resetAll();</span>\r
        });\r
        </pre>\r
        \r
        </details>
      CSPU5_U3L15 - Debug if never triggers in UpDown app_markdown_instruction: |-
        #
        Bug Squash!\r
        \r
        The *Count Up/Down App* has a bug! \r
        \r
        A ** common
        mistake** has been introduced into the code.\r
        \r
        We've changed the app
        so that it counts up and down by 3 rather than by 1.\r
        \r
        # Do This:\r
        \r
        *
        **Run the program.**\r
        \r
        * **To see the bug:**\r
         * Click the up or down
        arrow trying to get to the game over screen.\r
         * It should be impossible
        to get to the game over screen.\r
         \r
        * **Look at the code and fix the problem.**\r
        \r
        *
        **Read about the common mistake** by expanding the area below.\r
        \r
        * **Once
        you've fixed the issue, move on.**\r
        \r
        <details>\r
        <summary><big><strong>Read
        about the common mistake here...</strong></big> [click to expand]</summary>\r
        <br><br>\r
        <strong><big>...the
        condition you're checking in your `if` statement is actually impossible to
        reach.</big></strong>\r
        <p>\r
        This problem was probably easy to see here,
        but in practice <b>logic errors</b> like this can be devilish to track down.
        It's especially hard because the program gives you no hints that anything
        is wrong - it is syntactially a correct program. The computer cannot tell
        ahead of time whether your `if` statements will ever be true. So you need
        to trace through the logic of your program step by step to try to figure out
        why something's not happening that you expect should have happened.\r
        </p>\r
        \r
        </details>
      CSPU5_U3L15 - Debugging Simple If-statements =v==_markdown_instruction: |
        #
        Bug Squash!\r
        \r
        The *Count Up/Down App* has a bug! \r
        \r
        A **very common
        mistake** has been introduced into the code.  It's one that vexes early programmers,
        but we're sure you'll find it.\r
        \r
        # Do This:\r
        \r
        * **Run the program.**\r
        \r
        *
        **To see the bug:**\r
         * Click the up arrow just once.\r
         * Restart the
        program.\r
         * Click the down arrow just once.\r
         \r
        * **Look at the code
        and fix the problem.**\r
        \r
        * **Read about the common mistake** by expanding
        the area below.\r
        \r
        * **Once you've fixed the issue, move on.**\r
        \r
        <details>\r
        <summary><big><strong>Read
        about the common mistake here...</strong></big> [click to expand]</summary>\r
        <br><br>\r
        <strong><big>...using
        `=` instead of `==`</big></strong>\r
        <p>\r
        <b>Yup,</b> we told you this
        is a common mistake!  And it's an easy one to make.\r
        </p>\r
        <p>\r
        Remember
        that the single `=` sign does assignment and it actually *also* evaluates
        to true.  This means that if you stick it in an `if` statement, that `if`
        statement will <i>always</i> be true.\r
        </p>\r
        <p>\r
        One strategy to avoid
        this mistake is to **read code aloud in your head** and don't even use the
        single word "equal":\r
        <li> think **"gets"** every time you see `=`</li>\r
        <li>
        think **"equal-equal"** every time you see `==` </li>\r
        </p>\r
        <p>\r
        If
        you get in the habit of thinking that way, these mistakes are easier to catch.  For
        example you'd see this:<br>\r
        `if (count = 20)`<br>\r
        and read:<br>\r
        <i>"if
        count gets 20"</i> ...and know that that doesn't make sense.\r
        </p>\r
        \r
        <p></p>\r
        </details>\r
        \r
      CSPU5_U3L15 - Simple If-statements in UpDown App_markdown_instruction: |
        # Add
        Your Own *if* Statement\r
        \r
        In most apps you want to make decisions based
        on the state of some data you're keeping track of in the app.  \r
        \r
        We've
        **modified** the *Count Up/Down App* to add another screen.  When the count
        reaches certain values, we'll switch screens.  In the code you'll see an
        `if` statement has been added to the event handler for up arrow that states:\r
        \r
        ![](https://images.code.org/6e8acfef603fc7bd900d5ffb3a045150-image-1446125072632.png)\r
        \r

        * **If** the value of `count` is equal to **20, then** set the screen to *"gameOverScreen"*.\r
        <img
        src="https://images.code.org/b737f4a8924a114c8f320130e73949a6-image-1446124106409.gif"
        style="width: 150px; float: right">\r
        \r
        # Do This:\r
        **Add an `if` statement
        so that when counting down the app changes screens when the count reaches
        -5. **\r
        \r
        * **Run the app** and click the up arrow 20 times to see what
        happens when the `if` statement is triggered.\r
        * **Study the `if` statement**
        for the up arrow button to see how it works.\r
        * **Add an `if` statement**
        to the down arrow event handler:\r
        \t* **If** `count` is equal to **-5, then**
        set the screen to the "gameOverScreen."\r
        * **Goal:** Once you're finished,
        clicking the down arrow in the app should work like the animation shown to
        the right.\r
        \r
        <details><summary><strong><big>HINT:</big></strong> [click
        to expand]</summary>\r
        There is a subtle challenge here that you need to
        set the text of the label on the <i>gameOverScreen</i> when you change screens.\r
        <p>\r
        </p>\r
        <b>NOTE:</b>
        Your code can call `setText` for any UI element, on any screen, at any time
        - even if the element isn't on the screen that's currently showing.\r
        </details>\r
        \r
      CSPU5_U3L15 - add code to make count down work_markdown_instruction: |
        # Make
        Count Down Work\r
        \r
        <img src="https://images.code.org/0044a46a27f7af5da74daeae8de021f7-image-1446063781449.gif"
        style="float: right; width: 200px">You now know enough about using global
        variables (and some of the problems you might run into) to try it yourself.\r
        \r
        Let's
        start with an easy task. Right now clicking the up arrow works as expected;
        **clicking the down arrow does not**. So...\r
        \r
        # Do This:\r
        **Make the
        count go down by 1 every time the down arrow is clicked**\r
        \r
        * Study how
        the up arrow works, and use it as an example for writing the code for the
        down arrow.\r
        * Add and modify the code so that when the down arrow is clicked
        the count goes down.\r
        * When you're done the app should work like the animation
        shown to the right.\r
        * HINT: Don't forget to set the text of the label.\r
        \r
      CSPU5_U3L15 - count upDown bug forget to set text_markdown_instruction: |
        #
        Bug Squash!\r
        \r
        This program has a bug that doesn't produce an error.
        It just doesn't do what's expected.  The reason is a common mistake that
        all programmers make.\r
        \r
        # Do This:\r
        * **Run the program.**\r
        * **To
        see the bug:**\r
         * Click the up arrow about 5 times.\r
         * Click the down
        arrow about 10 times.\r
         * Click the up arrow again.\r
        * **Look at the code
        and fix the problem.**\r
        * **Read about the common mistake** by expanding
        the area below.\r
        * **Once you've fixed the issue, move on.**\r
         <p>\r
        \r
        </p>\r
        <details>\r
        <summary><big><strong>Read
        about the common mistake here...</strong></big> [click to expand]</summary>\r
        <big>...forgetting
        to update the display after changing something in the program</big>\r
        \r
        \r
        <h1>
        Misconception Alert - Changing a Variable Doesn't Change the Display</h1>\r
        \r
        A
        common misunderstanding about variables and displaying them is to think that
        a text label that's displaying a variable will change when the variable changes.
        NO.  A text label is just "dumb" container for text.  It's similar to a
        variable itself in that it won't change unless you explicitly tell it to.\r
        <p></p>\r
        <h1>Concept:
        Separation of Program Data from How It's Viewed</h1>\r
        Maintaining variables
        and program data is a **different task** from maintaining the display of the
        app.  Your program could actually run without updating the display at all
        - it would still be working behind the scenes; it just wouldn't be very fun
        or interesting to use.\r
        <p></p>\r
        </details>\r
        \r
        \r
      CSPU5_U3L15 - count upDown bug logic error wrong update_markdown_instruction: |-
        #
        Bug Squash!\r
        \r
        This program has a few different bugs. Find them and squash
        them!\r
        \r
        # Do This:\r
        * **Run the program.**\r
        * **To see the bug:**\r

        * Click the up arrow exactly twice.\r
         \t* Restart the program and do this
        a few times - you'll notice nothing happens the first time you click.\r

        * Click the down arrow several times.\r
        * **Look at the code and fix the
        problem.**\r
        * **Read about the common mistake** by expanding the area below.\r
        *
        **Once you've fixed the issue, move on.**\r
        \r
        <details>\r
        <summary><big><strong>Read
        about the common mistake here...</strong></big> [click to expand]</summary>\r
        <big>...updating
        the wrong thing in the wrong event handler.</big>\r
        <p></p>\r
        There are
        two common mistakes here:\r
        <p></p>\r
        1. Mixing up which event handler should
        do what.\r
        <p></p>\r
        2. Updating the display **before** any change is made
        to the underlying data of the program. \r
        \tThis can make the app seem oddly
        out of sync where each event triggers an update to the display that reflects
        the **last** thing done, not the current thing.\r
        <p></p>\r
        </details>
      CSPU5_U3L15 - count upDown bug var not created globally_markdown_instruction: |
        #
        Bug Squash!\r
        \r
        This program has a few different bugs that are related
        to the same problem.\r
        \r
        # Do This:\r
        * **Run the program.**\r
        * **To
        see the bug:**\r
         * Click the up arrow several times.\r
         * Click the down
        arrow.\r
        * **Look at the code and fix the problem.**\r
        * **Read about the
        common mistake** by expanding the area below.\r
        * **Once you've fixed the
        issue, move on.**\r
        \r
        <details>\r
        <summary><big><strong>Read about the
        common mistake here...</strong></big> [click to expand]</summary>\r
        <big>...thinking
        you're referencing a global variable when you're not.</big><br>\r
        \r
        A
        common mistake is basically a syntax/spelling error. These mistakes can be
        really tricky to work out because you *think* you know what you wrote, but
        the computer doesn't see it that way :)\r
        <p></p>\r
        </details>\r
        \r
        \r
      CSPU5_U3L15 - global var example count up_markdown_instruction: |
        # Using Variables
        in Apps!\r
        <img src="https://images.code.org/f156f8d8524c3c0316e4db394e331bdc-image-1446060829590.gif"
        style="float: right; width: 200px;">\r
        The example program here has a small
        portion of the *Count Up/Down App* written.  Right now, what the app should
        do is  shown in the animation to the right.\r
        \r
        # Important Concept!\r
        \r
        This
        small functionality **demonstrates an important concept** - how to create
        a variable in the app and update it when an event occurs. It may seem fairly
        straightforward but there are some common misconceptions that we want to alert
        you to.\r
        \r
        # Do This: Misconception Investigation\r
        Over the next few
        levels you are going to do a small investigation of two apps that do almost
        the same thing but *one  works as expected* and *one with a bug* that demonstrates
        an important concept about using variables in apps.  Here is what you'll
        do:\r
        \r
        1. **Run this app, which works properly.**\r
         * Study the code
        until you think you understand what's happening.\r
         * Pay attention to the
        code that handles the up arrow being clicked.\r
        \r
        2. **Run the app on the
        next screen, which has a bug.**\r
         * On the next screen we show you almost
        the same app, but with a subtle problem.\r
         * See if you can spot the difference
        and fix it.\r
        \r
        3. **Report what you found!**\r
         * We'll ask you to report
        what you found.  It's not a quiz.  You can go back and forth until you spot
        the problem, but you should find it and be able to write what it is.\r
      CSPU5_U3L15 - mini clicker update score_markdown_instruction: |-
        # Using Global
        Variables\r
        \r
        You'll now look at a version of the clicker game. We've
        set up the basic functionality to move the apple around the screen, and have
        __created a global variable to keep track of the score.__\r
        \r
        # Do This:\r
        __Add
        code to update the score when the apple is clicked.__ Remember that you'll
        have to update both the global variable _and_ the label text!\r
        \r
        <img
        src="https://images.code.org/001640fd24fc487af534ab769ed196e2-image-1446136596261.gif"
        style="width:200px">
      CSPU5_U3L15 - practice with setText_markdown_instruction: |
        # Changing Elements
        on Screen \r
        \r
        There's another way to display text in your app besides
        `console.log` and `write`.  \r
        \r
        There is a command called `setText` which
        will **change the text of a component on screen** given its id. This is a
        very powerful technique and one that you will use a lot. Here's what it looks
        like in action....\r
        \r
        <img src="https://images.code.org/3e5dd320801720d5c62a49146d9ee3d2-image-1446056202170.gif"
        style="width: 500px">\r
        \r
        Let's do a **very simple** example of using
        `setText`.\r
        \r
        # Do This:\r
        <img src="https://images.code.org/5fc22aef5e8f5161f95a2507c1ec006b-image-1446056758249.gif"
        style="float: right; width: 175px; border: solid 1px #AAAAAA">\r
        * **Run
        the code** in the app.\r
         \r
         Look at the code for the "upArrow" event
        handler and how it sets the text of the label.\r
         \r
        * **Modify the code.**\r

        \r
         When the down arrow is clicked, set the text of the label to something
        else.\r
        \r
        * **GOAL:**\r
         * Your only goal is to successfully use `setText`
        in this example app.\r
         * The app should do something similar to the animated
        example at right.\r
        \r
        Once you've got it functional, click Finish to move
        on.\r
         \r
        \r
      CSPU5_U3L15 - variable scoping problem debugging_markdown_instruction: |-
        # Debugging
        Problem!\r
        \r
        **Uh oh!** The code here is subtly different from the one
        in the previous example and **now there is a problem**.\r
        \r
        # Do This:\r
        \r
        *
        **Run the app** and try it to see the problem. \r
        * **See the error.**\r

        * Note that **NaN** stands for "Not a Number" - why would it say this?\r
        *
        **Note the difference** between this broken version and the previous one that
        worked.\r
        * **Fix the problem** so that it works as before.
      CSPU5_U3L15 click add lives_markdown_instruction: |-
        # Tracking Lives\r
        \r
        In
        the game, the number of lives starts at 3 and decrements by 1 every time the
        background image is clicked. Add this functionality to your game!\r
        \r
        #
        Do This:\r
        - __Add your variable to keep track of lives.__\r
        - __Add a click
        handler for the background image.__ _ID: "background"_\r
        - __When the background
        is clicked, decrement the number of lives by 1.__\r
        \r
        <img src="https://images.code.org/79f1352aebb2e40c302d1900aacd31f4-image-1446138180044.gif"
        style="width:200px;">
      CSPU5_U3L15 full clicker app_markdown_instruction: |
        # Make Your Own "Clicker"
        Game\r
        You will be creating your own “clicker” game similar to the Apple
        Grabber game you worked on in this lesson. \r
        The general object of the game
        is to click on an element that jumps around every time you click it. You will
        pick your own theme and decide what the rules are and how to keep score.\r
        \r
        **
        Your Main Tasks Are To:**\r
        \r
         * Pick a theme for your game and add appropriate
        images and styling.\r
         * Add variables to track some data during gameplay.\r

        * Add code to event handlers to update the variables and display appropriately.\r

        \r
        **See Activity Guide for Requirements**\r
        \r
        There is a full activity
        guide and rubric for this project.  You can find a link to it in the student
        resources section for this lesson. Or ask your teacher for it.\r
         \r
        <img
        src="https://images.code.org/146107536c50b4a3317f3ebbe2e66f37-image-1446418612319.png"
        style="float: right; width: 300px">\r
        ** Template **\r
        \r
        This level
        is a template for the app. You should **run it to see what it does** right
        now. You will modify *this* template, both the design elements and the code,
        for your project.\r
        \r
        The template has 4 screens and some basic navigation
        functionality and event handlers set up for you.  The game play screen uses
        the images from the Apple Grabber game, but you should replace these with
        images related to your chosen theme.\r
        \r
      CSPU5_U3L15 spot the difference variable debugging_markdown_instruction: |
        Respond
        to the following questions about your investigation into the bug with the
        counting game. Feel free to go back and look at the game again (but do so
        in another tab or be sure to click "Submit" to save your work!):

        - From
        the user's perspective, what was the difference between the first version
        of the game and the one with the bug?
        - From looking at the code, what specifically
        was the difference between the two, and why is that an issue?
        - How did you
        fix the bug?
      CSPU5_U3L16 - challenge say hi app_markdown_instruction: |
        # Introducing the  *change*
        Event\r
        \r
        Did you notice with the demo digital assistant that you could
        just __type a question, hit 'enter', and the assistant would respond__?
        Up until now you've been using the click of a button to trigger getting the
        text from an input or text area.\r
        \r
        You can use a new event type to get
        this behavior: The __'change' event__ is triggered when the user hits 'enter'
        in a text input after typing.\r
        \r
        \r
        <img src="https://images.code.org/7d1725b236471f8e2a0efed5870660da-image-1446071579670.32.36.png"
        style="width:350px;">\r
        \r
        # Do This:\r
        <img src="https://images.code.org/f8f1f7ae18acbc570a367886bcd6ca88-image-1445976541574.gif"
        style="width:250px;">\r
        - A __text input__ has been created for you that
        asks for a user's name.\r
        - Attach a __'change'__ event handler to the
        text input.\r
        - When the 'change' event triggers, __write the user's name
        and a greeting__.\r
      CSPU5_U3L16 - chaserApp_markdown_instruction: |
        # Chaser Game\r
        \r
        You now
        have all the skills you need to make a simple "chaser" game. A chaser game
        is just a game where an image runs away from your mouse.\r
        <img src="https://images.code.org/ed1e9852b33ca368cf8cd8e0b0159de7-image-1444336815528.gif"
        style="float: right">\r
        \r
        # Do This:\r
        \r
        **Create a "Chaser Game"**
        which includes the following components:\r
        \r
        * **Text** on the top of the
        screen with a title or instructions for what to do.\r
        * **An image** that
        "runs away" (moves randomly) based on some mouse event.\r
        \r
        Once you
        have the basic functionality down feel free to spend time adding more features
        to your application.\r
        <br><br><br>\r
        \r
      CSPU5_U3L16 - chooseImages_markdown_instruction: |-
        # Choosing Your Own Images\r
        \r
        The
        second parameter of the `image` command allows you to set the image to be
        displayed.  There are two ways to do this:\r
        1. Provide the URL of an image
        on the web.\r
        2. Upload an image from your computer (by clicking "choose...").\r
        \r
        ![](https://images.code.org/e726e56fd3e4c7cd4a0d58cba731a855-image-1444240440116.53.49
        PM.png)\r
        \r
        \r
        # Do This:\r
        \r
        * **Read the documentation for `image`**
        for tips on how to find an image's URL and how to upload.\r
        * **Change the
        image** to one you've found online or from your own computer.\r
        \r
        **NOTE:**
        many images are bigger than the screen of your app, so it's likely you'll
        need to add a `setPosition` command to get it on the screen sized the way
        you want.
      CSPU5_U3L16 - doubleQuotes_markdown_instruction: |
        # Importance of Double Quotes\r
        \r
        You
        may have noticed that the strings we've seen are **wrapped in double quotes**.
        These double quotes **are not part of the string**. Instead this is how you
        indicate that a sequence of characters **is a string and not the name of a
        variable**.\r
        \r
        As you start writing programs with strings **it is common
        to generate errors from forgetting to place them in double quotes**. We're
        going to generate some of those errors now so that we can recognize them more
        easily later.\r
        \r
        ![](https://images.code.org/89235457b9b9bf76ac4f8221cae5a62e-image-1445987270682.07.24
        PM.png)\r
        \r
        # Do This:\r
        \r
        * **This program generates many errors**
        because strings were not placed in quotes.\r
        * **Run the program** before
        you change it to see the errors that are generated.\r
        * **Add double quotes**
        around all the strings so that the program runs without errors.\r
        \r
      CSPU5_U3L16 - intro getText_markdown_instruction: |
        # Getting Text Input\r
        \r
        As
        we saw a user can now type inside of a text input whenever they want, **but
        now we'll need a way to access that text**. In order to do that you'll need
        to use the `getText` command, which you can now find in the **UI Controls**
        tab.\r
        \r
        <img src="https://images.code.org/0c6774f2b6d33f8107ec2936102b1a10-image-1445533677192.58.24
        PM.png" style="width: 150px;">\r
        \r
        You can use a `getText` command just
        like a string within a `console.log` or `write` command. Just like with `setText`
        you will refer to the UI element by its ID.\r
        \r
        ![](https://images.code.org/c17e419301d0cfeebf7f0ccee13e415f-image-1445892504376.47.54
        PM.png)\r
        \r
        # Do This:\r
        \r
        * **Read the documentation **  for `getText`.\r
        *
        **Add an event handler to the Submit button** that fires when your button
        is clicked.\r
        * **Inside the event handler** place code that will **log the
        name your user input to the console**.\r
        \r
      CSPU5_U3L16 - introSetPosition_markdown_instruction: |-
        # How to Organize the
        Code\r
        As your apps get more complex you'll have to think about how to organize
        your code so it remains readable and easy for you to locate things when debugging
        any problems.  We suggest the following convention which breaks the code into
        3 major sections:\r
        * **Top**:  code for UI elements **and** any code for
        positioning them.\r
        * **Middle**: code for event handlers.\r
        * **Bottom**:
        code for any other other functions you've written. (We don't have any of
        these yet.)\r
        \r
        So if you have some existing code and want to insert a
        `setPosition` command, you should place it after `button` but before `onEvent`
        in the code, like this:\r
        \r
        <img src="https://images.code.org/ae17e62c077aa9698526371d22db1307-image-1448404255046.gif"
        style="width: 500px">\r
        \r
        # Do This:\r
        \r
        <img src="https://images.code.org/3a834b8a4313e31a453525a69acda1f4-image-1444335250982.png"
        style="float: right; width: 175px">\r
        \r
        * **Starter code** has been provided
        which creates two buttons and event handlers.\r
        * **Insert** `setPosition`
        commands for each button so they appear at the bottom of the screen (as shown).\r
          *
        **Remember:** in an app screen 0,0 is the top left corner and you specify
        a location by how many pixels from the left and how many down from the top
        of the screen it is.  The screen is **320 by 450 pixels**.
      CSPU5_U3L16 - introStrings_markdown_instruction: |-
        # Strings\r
        \r
        The primary
        data type we have used so far is **Numbers**. If we want to interact with
        user-submitted text, however, we'll need to learn about a new data type called
        a **String**.  A string is a **sequence of ASCII characters**.\r
        \r
        **Example**
        | **Rule**\r
        ---|---\r
        `"aString"` | Strings **might** look a lot like
        a variable name but there are **many differences**.\r
        `"look at all these
        spaces"` | Strings can **contain spaces**.\r
        `"$2 bills are the coolest"`
        | Strings can **contain special characters** (and even start with them).\r
        `"11"`
        | Strings might **contain only digits**. This looks like a number but it is
        really 2 ASCII characters.\r
        `""` | Strings might **contain no characters**.\r
        <br>\r
        You
        can **store strings in a variable just like a number**. In this example the
        variable name is `str` but you should choose a name that is **descriptive
        and meaningful**.\r
        \r
        ![](https://images.code.org/56e6b30a51556aa3b516e0a49b51cbeb-image-1445894334432.18.40
        PM.png)\r
        \r
        **Combining Strings:** often you will want to combine multiple
        strings to create one longer string. You can do this with the `+` operator.
        The formal name of this process is **concatenation**.\r
        \r
        The program you're
        about to see is a very simple Mad Libs app that uses strings that are created
        inside the program and  saved inside of variables. These strings are then
        **concatenated** with other strings to create a Mad Lib.\r
        \r
        # Do This:\r
        \r
        *
        The input words of this Mad Lib are **currently set to the empty string**.\r
        *
        **Add your own input words** and run the program to generate the Mad Lib.
      CSPU5_U3L16 - newEventTypes_markdown_instruction: |
        # New Elements and Events:
        New Event Types\r
        You just wrote your first program that **does not include
        the turtle**! Moving forward we're going to focus much more on programming
        apps that use User Interface (UI) elements, but we'll keep the turtle library
        around in case you want to use it.\r
        \r
        <img src="https://images.code.org/9f013bd84577eb2498061757e18a72f4-image-1444322870272.46.06
        AM.png" style="float: right">\r
        \r
        **New Events**: You may have noticed
        that the `onEvent` block has a pull-down menu for the event **type** (see
        right).\r
        \r
        # Do This:\r
        \r
        * **Experiment** with **each of the different
        types of mouse events** by selecting from the list. You can also read about
        them in the documentation.\r
        \t* click\r
            * mousemove\r
            * movedown\r
            *
        mouseup\r
            * mouseover\r
        * **Choose** the mouse event type you like most
        and change your event handler to use it.\r
        * **Note:** There are some events
        that capture keystroke events. These are interesting, but they do not work
        easily with buttons.  We'll stick to mouse events for now, and get to keys
        later.\r
        \r
        **Be sure** to experiment with each one.  The next exercise
        will quiz you on which one is which.\r
        \r
      CSPU5_U3L16 - outputWithTextArea_markdown_instruction: |-
        # Generating Text Output\r
        \r
        So
        far we've been outputting our messages to the console, but now we'd like
        to display them in the app. In order to do so we're going to be using a new
        UI element called a `textArea`. You can use `setText` with a `textArea` just
        like you would with a `textLabel`.\r
        \r
        ![](https://images.code.org/45e6b6cdb1ca87f53cf1d6bba97cb812-image-1445977693641.24.43
        PM.png)\r
        \r
        If we want to combine user input with default text we can do
        so with **string concatenation**. Together with a `textArea` we can use this
        ability to compose longer messages based on user input.\r
        \r
        # Do This:\r
        \r
        *
        **Add a `textArea`** to your app and give it a descriptive and meaningful
        ID.\r
        * **Create a variable inside your event handler** called `userMessage`
        to hold the full message that will be sent to the user.\r
        * **Use string
        concatenation** to compose a message from the user input.\r
        * **Use `setText`**
        to place your `userMessage` inside the `textArea` you created.\r
        \r
        <img
        src="https://images.code.org/193af3e0c993dbf0b7af9c571ec5f56d-image-1445977696957.27.08
        PM.png", style="width:250px;">
      CSPU5_U3L16 - setPosition to fixed location_markdown_instruction: |
        # Using
        setPosition\r
        \r
        <img src="https://images.code.org/b664824ffeb3347b2e0b6d12447b4e8b-image-1476891499229.gif"
        style="width: 150px; float: right;">\r
        \r
        **Now you try it** - use  [setPosition](#triggercallout=setPosHover)
        to **move the button to the middle of the screen when clicked**. We've set
        up a small project for you with a button (id: `moveBtn`) already added in
        design mode.\r
        \r
        1. Add an `onEvent` block\r
        2. Drag a `setPosition` command
        into the event handler function\r
        3. Set the x,y coordinate so that the button
        ends up in the middle of the screen.\r
         * You'll need to experiment a little
        bit to find coordinates that work for you.\r
         * Hover over the screen to
        find a good starting point.\r
        \r
        **Tip**: when you see a command that is
        linked like this: [setPosition](#triggercallout=setPosHover) click it! --
        it will show you other hints.\r
        \r
        Once you've got the button moving to
        the middle of the screen click Finish to move on to the next challenge.\r
      CSPU5_U3L16 - setPosition to move button_markdown_instruction: |
        <img src="https://images.code.org/dc1f942b805f07b3581c678ed1669a27-image-1476892595302.gif"
        style="float: right">\r
        # Using setPosition and randomNumber\r
        \r
        <img
        src="https://images.code.org/a501391fac0c396a197aaaf357e73972-image-1476892143359.gif">\r
        \r
        **Now
        you try it** - instead of using a fixed value, you use [randomNumber](#triggercallout=showRand)
        to set the x and y coordinates for setPosition.  Now you'll have to chase
        the button all over the screen!\r
        \r
        * Make it so that the button could
        jump *anywhere* on the visible screen each time it's clicked.\r
        * Extend
        it: if you want to get really nuts, you could add back in the *width* and
        *height* parameters of setPosition and make the size of the button *also*
        change randomly with each click!\r
        \r
        Once you've got the button jumping
        around the screen.  Click **Finish** to move onto the next level.\r
      CSPU5_U3L16 - singleSetPosition_markdown_instruction: |
        # Moving and Sizing
        Buttons\r
        \r
        An important component of designing intuitive and visually
        appealing user interfaces is the location of the elements on the screen. Using
        the `setPosition` command (now added to the Toolbox) you can move and set
        the size of user interface elements.\r
        \r
        ![](https://images.code.org/c3e42223cbcb096f992d758973d09f63-image-1444664597665.42.48
        AM.png)\r
        \r
        **NOTE:**\r
         * If you only want to set the size you can use
        the `setSize` function which looks like this:\r
        \r
         ![](https://images.code.org/cb742ecf96c04477db0f8361ad5dcdaf-image-1448924017288.png)\r
        \r

        * If you *only* want to set the position *without* changing the size of the
        element, you can omit the *width* and *height* parameters from the `setPosition`
        function.  To do that, you need to switch into text mode, like this:\r
        \r

        <img src='https://images.code.org/5b565ef5b74b5cd657ba15c67be92b0d-image-1448924356253.gif'
        style="width: 400px">\r
        \r
        # Do This:\r
        \r
        * **Read the documentation**
        for `setPosition`.\r
        * **Starter code** has been provided which creates a
        single button.\r
        * **Move the button to the middle of the screen** using
        `setPosition`, as in the image below. (You may need to experiment a little
        bit with the x,y location to get it right).\r
        * **Remember:** in an app screen
        0,0 is the top left corner and you specify a location by how many pixels from
        the left and how many down from the top of the screen it is.  The screen is
        **320 by 450 pixels**.\r
        \r
        ![](https://images.code.org/62840468826ce153d3d0d80bca303827-image-1444662614963.10.05
        AM.png)\r
        \r
      CSPU5_U3L16 - text labels_markdown_instruction: |
        # New Elements and Events:
        Text Labels\r
        <img src="https://images.code.org/20d50fd324908fc48633e1325cc37603-image-1444662791509.png"
        style="float: right">\r
        The UI controls toolbox contains an element called
        `textLabel`. A text label is what it sounds like: plain text that you can
        put in your app. Even though it's just plain text you can still move and
        resize it using `setPosition`, and you can attach event handlers to it as
        well.\r
        \r
        **NOTE:** resizing a text label does not change the font size
        of the text.  We'll learn how to do that later.  \r
        \r
        # Do This:\r
        \r
        *
        **Read the documentation** for `textLabel`<img src="https://images.code.org/fe2ce5f335fd124dc3052270ca0af31f-image-1444336014658.gif"
        style="float: right; width: 150px">.\r
        * **Modify** the program so that
        your button is now a text label. Just as before, it should move randomly around
        the screen when clicked. You can make the text whatever you like.\r
        * **Tip:**
        If you reuse your button's ID you'll only need to change a single line of
        code to make your program work. Once you have your program working **choose
        a descriptive and meaningful ID** for your text label and make the appropriate
        changes in the event handler.\r
        \r
        <br>\r
        <br>\r
        <br>\r
        \r
      CSPU5_U3L16 - textInput getText write_markdown_instruction: |-
        # Text Input Elements\r
        \r
        So
        far we've been using `promptNum` as a simple way to get a number as input.
        Now that we know a little about strings we are going to create **user interface
        elements that users can use to submit text (i.e. strings) instead**. The first
        and simplest example is `textInput` which you can find in Design Mode.\r
        \r
        <img
        src="https://images.code.org/4436a3ba2a7596c7724380c7c82d5c29-image-1445533665376.36.19
        PM.png" style="width: 100px">\r
        \r
        # Do This:\r
        \r
        * **Add two text
        input elements to this program**, one for the name and one for the age of
        the user.\r
        * **Give your text input elements descriptive and meaningful
        IDs**.\r
        * **In Design Mode** set their default text to prompt the user for
        their name and age.\r
        * **Compare your app to the example below**.\r
        \r
        <img
        src="https://images.code.org/865403f21bdb27246caeb31afa7c0b5f-image-1445902764676.39.11
        PM.png" style="float:left; width:200px;">\r
        <br>
      CSPU5_U3L16 - toUpper_markdown_instruction: |-
        # String Capitalization\r
        \r
        If
        you want to change the capitalization of a string you can do so with two new
        functions\r
        \r
        ![](https://images.code.org/d8523cdae7c07b34baa1c61809bb80d4-image-1445980407200.42.31
        PM.png)\r
        \r
        Note that the syntax is similar to `console.log` . This is
        because `toUpperCase` really only makes sense as a command when you are using
        a **string**, just as `log` only makes sense when you are talking about the
        console. This function **evaluates to a new string in which all characters
        have been made uppercase / lowercase**. If you want to update the value in
        your original variable you'll have to do so explicitly, as in\r
        \r
        ```\r
        var
        myString = "lower case for now";\r
        myString = myString.toUpperCase();\r
        ```\r
        \r
        #
        Do This:\r
        \r
        * **Update your application so that the user's name is printed
        in UPPERCASE**.\r
        \r
        <img src="https://images.code.org/26d8ffb7c631c1c510f781b5bf46d494-image-1445980322936.04.55
        PM.png", style="width:250px;">
      CSPU5_U3L16 - use images_markdown_instruction: |-
        # New Elements and Events:
        Images\r
        \r
        <img src="https://images.code.org/a84297658be45dc78bc401d387d10436-image-1444663322356.21.25
        AM.png" style="float: right; width: 120px">\r
        Images make applications
        more visually pleasing and interactive. You can add images to your application
        using the `image` command. For now, just add an `image` element to your app
        (the default image link is the Code.org logo) and don't worry about choosing
        a unique image just yet. We'll do that in the very next exercise!\r
        \r
        \r
        #
        Do This:\r
        <img src="https://images.code.org/8df7b1b56c71de7ad9770646bd7f8792-image-1444336140877.gif"
        style="float: right; width: 250px">\r
        \r
        * **Modify** the program - change
        the `textLabel` to an `image` so that the image moves randomly around the
        screen based on the event you chose.\r
        * **Tip:** If you reuse your text
        label's ID you'll only need to change a single line of code to make your
        program work! Once you have your program working though, it's probably a
        good idea to choose a descriptive and meaningful ID for your image and make
        the appropriate changes in the event handler.\r
        \r
        <br>
      CSPU5_U3L16 Mad Lib Clear Input_markdown_instruction: |
        # Play It Again and
        Again!\r
        \r
        When the user clicks the "Play again" button, the first screen
        should reset and not show the user's previous text.\r
        \r
        # Do This:\r
        -
        When the "Play again" button is clicked, __clear the text from each text
        input__ on Screen 1.\r
        - __Free play:__ Add images, or more How-to steps
        for your Mad Libs, and invite others to play!\r
        \r
        <img src="https://images.code.org/a49fe3eba4d2d2fb03e45d15aad53dbf-image-1450143105779.16.14
        Mad Libs play again button.gif" style="width:200px">\r
        \r
        \r
        <details>\r
        <summary>**Hint**</summary>\r
        Try
        setting the text to the empty string: `""`.\r
        </details>\r
      CSPU5_U3L16 Mad Lib Demo_markdown_instruction: |-
        # Getting Text from the User\r
        \r
        Up
        until now, the event-driven apps you have created responded to the user clicking
        an element or typing a number when you used `promptNum`. __What if we want
        the user to provide _text_ instead of a number?__ You can probably think of
        many apps and websites that ask you to provide text in order to do something.\r
        \r
        In
        programming, we have to represent text in a specific way to distinguish it
        from other words in our code, such as variable names. But we'll cover that
        later...\r
        \r
        At the beginning of class you created a Mad Libs on paper,
        which takes user input in the form of nouns, adjectives, and verbs to create
        a unique "How-to" manual. You'll be translating your own Mad Libs How-to
        into an app in this lesson.\r
        \r
        # Do This:\r
        \r
        - __Play with this Mad
        Libs app__ a couple of times to see a digital version of the paper game. \r
        -
        __Think about how the final text is created__ based on the input from the
        user. How would you describe in words the algorithm for creating it?
      CSPU5_U3L16 Mad Lib Student Setup_markdown_instruction: |-
        # Back to Mad Libs:
        Design Your App\r
        Now that you've had some practice getting user text and
        making new strings with it, you're ready to turn your How-to Mad Libs into
        an app. To get started, you'll set up the layout. There are two main screens:\r
        \r
        __Screen
        1: Collect User Input__  \r
        - On this screen, you'll use __text labels__
        and __text input__ design elements to set up the different words you want
        the user to provide.\r
        - A __Next__ button takes you to Screen 2 to view
        the full Mad Libs.\r
        \r
        __Screen 2: View Mad Libs__  \r
        - On this screen,
        you'll use the __text area__ design element to create the space where the
        user's completed Mad Libs will be displayed.\r
        - A __Play again__ button
        takes you back to Screen 1.\r
        <br>\r
        <br>\r
        \r
        \r
        \r
        <table>\r
        <tr>\r
        <td>\r
        <strong>Screen
        1:</strong>\r
        </td>\r
        <td>\r
        <strong>Screen 2:</strong>\r
        </td>\r
        </tr>\r
        <tr>\r
        <td>\r
        <img
        src="https://images.code.org/ccea092b516047dff82fafa50b47bcc7-image-1447974038265.00.17
        PM.png" style="width:150px;float:right;">\r
        </td>\r
        <td>\r
        <img src="https://images.code.org/0f832e6314ad98170a3cddb317d26e41-image-1445898480304.27.45.png"
        style="width:151px;float:right;">\r
        </td>\r
        </tr>\r
        </table>\r
        \r
        #
        Do This:\r
        \r
        - Create the two screens for your app, including the design
        elements in each one.\r
        - Requirement: Request at least 3 separate words
        from the user on Screen 1.\r
        - Create the event handlers for the __Next__
        and __Play again__ buttons to respond to clicks.\r
        - Use `setScreen` in the
        event handlers to get the screen navigation working.
      CSPU5_U3L16 Mad Lib getText_markdown_instruction: |-
        # Make It Mad! Add the User's
        Text to Your Mad Libs Outline\r
        \r
        Now that you have your Mad Libs outline
        appearing in the text area, it's time to __incorporate the user's text__
        to make your Mad Libs come alive.\r
        \r
        # Do This:\r
        \r
        - Did you pick
        good ID names for your text input elements? Update them now if you didn't!\r
        -
        When the __Next__ button is clicked, __get the user's text from the text
        inputs on Screen 1 and store each in a separate variable__.\r
        - Use string
        concatenation to __incorporate the user's text into your Mad Labs string__
        before updating the text area on Screen 2. \r
        \r
        <details>\r
        <summary>**Hint**</summary>\r
        Use
        `getText` to get the text from each of the text inputs on Screen 1.\r
        </details>\r
        <details>\r
        <summary>**Should
        I make local or global variables?**</summary>\r
        Remember that the decision
        to create local variables or global variables is a question of _scope_. Where
        will you need to access these variables in your program? If you are only using
        the variables in the click callback function for the "Next" button, then
        they can be _local_ variables in that function. \r
        </details>
      CSPU5_U3L16 Mad Lib setText_markdown_instruction: |-
        # Update the Text Area with
        Your Mad Libs Outline\r
        \r
        When figuring out how to make progress with a
        program, it helps to break the problem down into smaller steps and test your
        program incrementally. So rather than jumping straight to getting the user
        input and __concatenating__ it with your Mad Libs outline, start first by
        just making sure that you can get your Mad Libs outline to appear in the text
        area when the __Next__ button is clicked on the first screen. \r
        \r
        But
        wait! If you just use `setText` and pass in the string of your Mad Libs outline,
        it will look like the screen on the left where all the steps are smushed together.
        You can use one or more newline characters, `"\n"`, in your string to create
        a line break in your text.\r
        \r
        <table>\r
        <tr>\r
        <td>\r
        <strong>Without
        newlines</strong>\r
        </td>\r
        <td>\r
        <strong>With newlines</strong>\r
        </td>\r
        </tr>\r
        <tr>\r
        <td>\r
        \r
        <img
        src="https://images.code.org/24fb1385d6199cd52c6e1d3d11e547fc-image-1448404478181.png"
        style="width:201px;float:right;">\r
        </td>\r
        <td>\r
        <img src="https://images.code.org/3a627993f9e0e4a6d462c8a21b335058-image-1448404299215.png"
        style="width:200px;float:right;">\r
        </td>\r
        </tr>\r
        </table>\r
        \r
        \r
        #
        Do This:\r
        \r
        - When the __Next__ button is clicked, you already switch
        to Screen 2, but now you should also call `setText` on the text area on Screen
        2 to your Mad Libs outline. See the images above for one way to temporarily
        handle the word placeholders.\r
        - Add in newline characters `"\n"` in
        your Mad Libs string to format it.\r
        \r
        <details>\r
        <summary>**Newline
        Examples**</summary>\r
        <table style="width:100%; margin-left:25px;">\r
        <tr>\r
        <td
        style="vertical-align: text-top; border-right:1px solid #000">\r
        \t**Example1:**<br/><br/>\r
            \r
            <samp>console.log("How
        to Drive\nStep 1.");<br/><br/></samp>\r
            \r
            *will be displayed
        as...*<br/><br/>\r
            \r
            <samp>How to Drive<br/>Step 1.<br/><br/></samp>\r
            \r
            *...on
        your console.*\r
        </td>\r
        <td style="padding-left:20px;">\r
        <samp>**Example2:**<br/><br/>\r
            \r
            var
        step1 = "Step 1: ...";<br/>\r
            \r
            var step2 = "Step 2: ...";<br/>\r
            \r
            console.log(step1
        + "\n" + step2);<br/><br/></samp>\r
            \r
            *will be displayed as...*<br/><br/>\r
            \r
            <samp>Step
        1: ...<br/>Step 2: ...<br/><br/></samp>\r
            \r
            *...on your console.*\r
        </td>\r
        </tr>\r
        </table>\r
        </details>
      CSPU5_U3L16 Mad Lib toUpper_markdown_instruction: |-
        # Why Are You Yelling At
        Me?! *toUpperCase* and *toLowerCase*\r
        \r
        The main functionality of the
        Mad Libs app is complete, but there are some finishing touches to add. The
        user may type input with random letter capitalization, but the Mad Libs output
        string should be consistently capitalized.\r
        \r
        # Do This:\r
        \r
        - Pick
        one or more pieces of the user's input text to transform into "yelling"
        or emphasize by __making it uppercase__ before displaying it.\r
        - For the
        other pieces of the user's input text, __make it lowercase__ before displaying
        it.\r
        \r
        <details>\r
        <summary>**Hint**</summary>\r
        Remember the rules
        of updating variables! You can update a variable after first getting its current
        value and then doing something with it. <br> Example: `song = song.toUpperCase();`\r
        </details>
      CSPU5_U3L18 comparison operators_markdown_instruction: |
        # Explore Comparison
        Operators with Console.log\r
        \r
        **Your task:** Make each expression evaluate
        to **true** by changing only the comparison operator.\r
        \r
        We can easily
        test the results of comparison operators with `console.log`. \r
        \r
        * Run
        the code provided - see results in the console debug area below.\r
        * All
        of the Boolean expressions currently evaluate to `false`.\r
        * **Modify the
        code** so they all evaluate to `true`\r
        * **Change only the operator**\r
        \r
        Example:\r
        \r
        *
        `(3 > 4)` evaluates to **false**...\r
        * Change it to `(3 < 4)` (*3 is **less
        than** 4*) to make it **true*\r
        \r
        **HINT:** The workspace starts in text
        mode because you might find that doing this in text mode is much easier and
        faster than dragging out new blocks.  You can flip back to block mode if you
        like.\r
      CSPU5_U3L19 - fix the var name syntax error v2_markdown_instruction: |
        <!---\r
        #
        Debugging Variables\r
        <img src="https://images.code.org/18cb0f3b0fc43def369a3329854edc2e-image-1447272068495.png\r
        "
        style="float: right; border: solid 1px black; width: 350px">\r
        \r
        One
        of the most common errors that can happen when you try to run a program is
        `Unknown identifer`.\r
        This is just the computer trying to tell you that
        it doesn't recognize something you wrote.  Usually it's the name of a variable
        or function that you're trying to write and there is a small misspelling.\r
        \r
        **The
        computer doesn't hate you :)** It just needs everything to be exact so it
        can understand what you're trying to get it to do.\r
        \r
        **App Lab** alerts
        you to potential errors in two ways:<img src="https://images.code.org/329990c2e51e1e07a16d5e550cf766f0-image-1447272337465.gif"
        style="width: 350px; float: right; border: solid 1px black">\r
        \r
        * Hover
        your mouse over the yellow triangles or red squares next to line numbers in
        the code to see what they say.\r
        * As usual, the Debug Console will also
        tell you about any errors while your program is running. \r
        --->\r
        \r
        #
        Do This:\r
        We've given you some code with some errors in it.  Look at the
        error messages and try to figure out the problem.\r
        \r
        * **Run the program**.\r
        *
        **Locate and fix the error**.\r
        \r
        When you get it right the output to the
        console should look like this:\r
        \r
        ![](https://images.code.org/9c7a8eb5db973f81eb2faa89713d4f30-image-1445477911014.png)\r
        \r
        As
        a reminder, App Lab gives you hints about errors in two ways: \r
        \r
        * Hover
        your mouse over the yellow triangles or red squares next to line numbers in
        the code to see what they say.\r
        * As usual, the Debug Console will also
        tell you about any errors while your program is running. \r
      CSPU5_U3L19 - test reassignment of two vars_markdown_instruction: |
        # Variable
        Reassignment - Part 1\r
        \r
        So far we have only set a variable's value once.  But
        it's called a *variable* for a reason - its value can change (or vary) throughout
        a program. This is useful and necessary for keeping track of things like a
        score in a game.\r
        \r
        To re-assign a value to a variable all you have to
        do is maintain the mental model of what's happening:\r
        \r
         * Variables
        are containers for information.\r
         * The `=` sign is an instruction to set
        the value.\r
         * A series of assignment statements (see example to right)
        is a list of instructions to execute one at a time - it's not a series of
        equations that define the state of the world.\r
        \r
        # Do This:\r
        <img src="https://images.code.org/066db834ae289ac538609b68c6492c4a-image-1445944263895.png"
        style="float: right">\r
        \r
         * **Make a prediction.**\r
        \r
         The code
        on the following screen looks like what is shown at right.  Study it and make
        a prediction about what will happen when you run the code. What will the values
        of `a` and `b` be at the end of the program?\r
        \r
        * **Add `console.log`
        statements.** \r
        \r
         Prove it to yourself by adding `console.log` statements
        at the end of the program to find out what the value of `a` and  `b` are.\r

        \r
        * **NOTICE:** in the code above, after the variable `a` has been created
        using `var`, to change a variable's value, you only need to refer to the
        variable by its name. The word `var` only needs to be used once - when the
        variable is created for the first time. \r
        \r
        * It's a **common mistake**
        to use `var` everytime you want to *use* a variable but just **remember `var`
        means CREATE a new variable**.  When you create a new variable it will lose
        its old value.  We'll look at errors related to this later.\r
        \r
      CSPU5_U3L19 - three basic ops of variables_markdown_instruction: |-
        # Variables
        Toolbox\r
        Let's get started with the most basic example of using and controlling
        the computer's memory with variables. The toolbox has a couple of new commands
        for working with variables.\r
        \r
        We've given you some starter code that
        does three things:\r
        <table>\r
        <tr>\r
        <td>\r
        <ol>\r
        <li>**Creates** a
        variable called `score`</li>\r
        <li> **Assigns** the value *0* to `score`</li>\r
        <li>**Displays**
        the value of the `score` to the console (see hint below about quotes) </li>\r
        </ol>
        \r
        </td>\r
        <td>\r
        <img src="https://images.code.org/056a735a96a603e23768d66f0de32961-image-1445462590619.png"
        style="width: 350px">\r
        </td>\r
        </tr>\r
        </table>\r
        \r
        \r
        # Do This:\r
        You're
        going to add another variable, assign it a value, and then display it to the
        console.\r
        Use the starting code as a model for what you need to create now.\r
        <img
        src="https://images.code.org/72744382133081947777e67a5988d4ea-image-1445462803999.gif"
        style="float: right; width: 350px">\r
        * **Create a new variable** by dragging
        out the `var` block.\r
        * **Change the name of the variable** from the default
        `x` to `lives` (see animation at right).\r
        * **Set the value of `lives` to
        be 3**.\r
        * **Add** `console.log` **messages** to show the value of `lives`.\r
        \r
        The
        output in the debug console should look like this:\r
         \r
          <img src="https://images.code.org/6405a3ed95ca3125ea1b2c9ffbdffa94-image-1445349849482.png"
        style="border: solid 1px gray">\r
        <details>\r
          <summary>  Debugging Tip:
        Displaying values of variables [click to expand]</summary>\r
           **NOTE: To
        print the value of a variable you *should not* use quotes.**\r
           Notice
        the difference between these two statements: <br>\r
           `console.log("score")`<br>\r
           `console.log(score)`<br>\r
           It's
        subtle but important:\r
           <br>\r
           <li>When `console.log` sees quotation
        marks it thinks you want to print out the literal characters in the quotes.\r
           <li>When
        `console.log` sees something **without quotation marks** it assumes you're
        trying to print a variable, and it goes to retrieve its value and displays
        that. </li>\r
         \r
        </details>
      CSPU5_U3L19 - variable reassignment challenge pt2_markdown_instruction: |
        #
        Wrapping Up Variables - This is Not Math Class\r
        \r
        Hopefully you now understand
        the gist of working with variables.  The major thing to remember is that every
        time you see an `=` sign it means that you are instructing the computer to
        set a variable to a new value.  \r
        \r
        <img src="https://images.code.org/ecced8eb916809f66ac7d555a819c2a6-image-1447803015383.17.43.png"
        style="float: right">\r
        The example to the right is something that definitely
        wouldn't make sense in math class, but you should be able to reason about
        it as a piece of code.  Because it's code, you can also **insert** statements
        to display the value of variables as they change.  You don't have to guess!\r
        \r
        #
        Do This:\r
        * ** Make a prediction.** \r
        \r
         As usual you should **first**
        look at the code given to you and reason about what it does.  You should try
        to predict what the value of `num` will be after all lines have executed.\r
        \r
        *
        ** Insert 3 `console.log` statements.**\r
        \r
         Insert `console.log` statements
        into the existing code to display each value of `num` immediately after it's
        changed. (The animation below shows how to get started.)\r
         \r
         ![](https://images.code.org/0e425ce1a186d49d230395032f970913-image-1447802992249.19.24
        add console message.gif)\r
         \r
        * **Was your prediction right?**\r
         \r

        After you figure out the answer, if your prediction was off, try to understand
        why.  Where was your misunderstanding?\r
      CSPU5_U3L19 - write var and string with same name v2_markdown_instruction: |-
        #
        Debugging Variables\r
        <img src="https://images.code.org/1363b1799cd0f70e383664b4c6359ef4-image-1445479475849.png"
        style="float:right; width: 200px">There is a simple command called `write`
        in the UI Controls toolbox that is a fast and easy way to display text in
        the app itself. The way you use it is very similar to `console.log`.  Let's
        debug another problem only using `write` instead of `console.log`.  \r
        \r
        You
        may have already run into this problem!  But it's worth mentioning again.
        To display the value of a variable you *should not* use quotes. Notice the
        difference between these two statements - the comments next to each line explains
        the differences:\r
        ``` \r
         write("score");  // will display the literal
        characters s-c-o-r-e\r
         write(score);    // will retrieve the value of score
        and display it\r
        ```\r
        \r
        # Do This:\r
        <img src="https://images.code.org/a0ff680a245dba5546183e07ebbeaef2-image-1447270477159.png"
        style="float: right; width: 250px">To solve these problems you **should
        only add or remove quotation marks**.\r
        * **Run the starter code**\r
        * **Locate
        and fix the problems**\r
        \r
        **GOAL:** Make the app display what's shown
        at right by only adding or removing quotation marks from the code given.
      CSPU5_U3L23 Chatbot Conditionals 1_markdown_instruction: |
        # Adding Intelligence
        Using Conditionals\r
        \r
        So far the digital assistant you created responds
        with the same message no matter what the user types. Let's look at how to
        make the digital assistant smarter. Let's work on creating a Movie Bot example
        before returning to your digital assistant.\r
        \r
        In the last lesson we learned
        about `if`, `else-if`, and `else` statements. These allow us to make decisions.
        In the digital assistant we want to make decisions based on keywords. **The
        first keywords we want the Movie Bot to respond to are the movie genres: comedy,
        romance, action, and horror. **\r
        \r
        **Note: ** Check out the flowchart
        below to see the logic we are trying to add. The current portions of the diagram
        that we are creating are <mark>highlighted in yellow</mark>.\r
        \r
        # Do This:\r
        \r
        *
        **Run the code** to understand what it does.\r
        \r
        * **Add `else-if` statements**
        to the `if` to check if the word the user typed matches **action, romance
        and horror**.  **Note:** Movie Bot will only understand input in the form
        of "comedy" not "Comedy" or "What is a comedy?" \r
        \r
        * **Add an `else`
        statement** to print a default answer for any other input.\r
        \r
        <img src="https://images.code.org/8ec655795042a2a3a22a85f0886f0d21-image-1446067226646.png"
        style="width: 100%">\r
        \r
        <a href="https://images.code.org/8ec655795042a2a3a22a85f0886f0d21-image-1446067226646.png"
        target="_blank">Open diagram in a new tab</a>\r
      CSPU5_U3L23 Free Response Getting Started_markdown_instruction: "Siri is a\ndigital
        assistant built into Apple's iOS devices, including iPhones and iPads.\nWatch
        the advertisement for Siri, below. \n\n<iframe width=\"637px\" height=\"375px\"\nsrc=\"https://www.youtube.com/embed/8ciagGASro0\"
        frameborder=\"0\" allowfullscreen></iframe>\n\n<br/>\n__Reflect\non the prompts
        below:__ \n\n- What types of information does Siri respond\nto in the video?\n-
        What do you think Siri is paying attention to in order\nto create these answers?\n"
      CSPU5_U3L23 Free Response Wrap Up_markdown_instruction: "Identify a global\nproblem
        that a NLP (Natural Language Processing) application could be used\nto help
        solve. \n\n* Describe the problem.\n* Explain how you think a NLP\napp could
        contribute to a solution.\n* Describe how the app would interact\nwith the
        user. \n* What would you name the app? \n\n"
      CSPU5_U3L24 Chatbot Basic Conditionals_markdown_instruction: |
        # Digital Assistant
        Project\r
        \r
        **Your Digital Assistant Project is back!** Now that you've
        learned how to use conditional logic to control your program flow, it's time
        to add functionality to the digital assistant you previously designed.\r
        \r
        #
        Do This:\r
        \r
        * You should have already created a flowchart to design the
        logic for your digital assistant. \r
        * **Use your flowchart to program your
        digital assistant so that it "intelligently" responds to user input.**\r
        \t*
        Feel free to make changes to your existing project in Design Mode, if needed.\r
        *
        **Test your program thoroughly** to make sure your digital assistant responds
        to user input appropriately.\r
        * Once you're done, **submit your project!**\r
      CSPU5_U3L24 Nested Conditionals 1_markdown_instruction: |-
        # Adding *includes*
        to the Movie Bot\r
        \r
        If our Movie Bot is asked a question like "What is
        a good comedy movie?" it currently won't know how to respond, **even though
        the question includes one of its keywords.** By using `includes` we can allow
        our Movie Bot to sense if a keyword appears anywhere in the question.\r
        \r
        #
        Do This:\r
        \r
        * **Suggestion: Switch to Text Mode.** This will be much easier
        in Text Mode.\r
        * **Change all your boolean expressions to use `includes`
        instead of `==`**.\r
        * **Test out a couple sentences with your keywords**
        to make sure the change worked.\r
        \r
        ![](https://images.code.org/0df459c4ccd9b613b23409af7ff5f59e-image-1446139233341.gif)\r
        \r
        **Note:
        ** Check out the flowchart below to see the logic we are trying to change.\r
        \r
        \r
        <img
        src="https://images.code.org/ea8340252f50774c352f58fa7cc12e5c-image-1446069734921.png"
        style="width: 100%">\r
        \r
        <a href="https://images.code.org/ea8340252f50774c352f58fa7cc12e5c-image-1446069734921.png"
        target="_blank">Open diagram in a new tab</a>
      CSPU5_U3L24 Nested Conditionals 2_markdown_instruction: |-
        # Nested Conditionals\r
        \r
        The
        way we left the Movie Bot in the last exercise is a little strange to see
        as a user. **Currently when the input doesn't have a question mark the Movie
        Bot says "I only respond to questions." but it still provides a recommendation**.
        We're going to alter our code so that the movie recommendation is only provided
        if the user asks a question.\r
        \r
        # Do This:\r
        \r
        * **Nest your movie
        genre `if` statements** inside the "?" `if` statement so that **a recommendation
        is made only if a question was asked**.\r
        * **Remove the "That's a good
        question."** output.\r
        * Ensure that **if your input is not a question**
        then the response is **I only respond to questions.**\r
        * **Test out a couple
        sentences with your keywords** to make sure the change worked.\r
        \r
        **Example
        Input --->** | **Output**\r
        ---|---\r
        What's the best action movie? | The
        best action movie is any James Bond movie.\r
        I love comedy | I only respond
        to questions.\r
        <br>\r
        **Note: ** Check out the flowchart below to see the
        logic we are trying to change.\r
        \r
        <img src="https://images.code.org/c319d7ba43112451a6b25aa9475cacb5-image-1446074593924.png"
        style="width: 100%">\r
        \r
        <a href="https://images.code.org/c319d7ba43112451a6b25aa9475cacb5-image-1446074593924.png"
        target="_blank">Open diagram in a new tab</a>
      CSPU5_U3L24 introIncludes_markdown_instruction: |-
        # *includes*\r
        <img src="https://images.code.org/7373ad2ad98b0d815ce0b8196c2ec177-image-1446070324010.11.43
        PM.png" style="width: 250px; float:right">\r
        \r
        We're going to explore
        a new function called `includes`. This function can be used to check if one
        string appears anywhere inside of another. Just like `toUpperCase` and `toLowerCase`
        this function is called using **dot notation**.\r
        \r
        # *includes* Returns
        a Boolean\r
        **`includes` is a function that returns a boolean.** In other
        words, when the function runs it will **evaulate to either `true` or `false`**.
        This function can be used **anywhere you would normally use a boolean expression**.\r
        \r
        You've
        actually **seen a few functions that return a value before this**. `randomNumber`
        is a function that returns a number and `getText` is a function that returns
        a string. In every case we've used these functions **as if they were the
        data type they return (or evaulate to)**. Notice that in block mode these
        functions don't have the connectors that other commands do since they will
        be used as a piece of data within another function.\r
        \r
        # Do This:\r
        \r
        *
        **Read the documentation** for `includes`.\r
        * **Starter code** has been
        provided which shows one instance where a string does include a `searchValue`
        and one where it does not.\r
        * **Replicate the style** of these commands
        to check the rest of questions provided.\r
        * **Create three statements of
        your own using `includes`** making use of the `console.log` statements provided.\r
        *
        **Once you're comfortable with this command move on.**
      CSPU5_U3L25 - drag out key event_markdown_instruction: |-
        # *keypress*\r
        \r
        If
        we want to add keyboard input to our apps we'll need to learn about how key
        events work in App Lab. To start let's take a closer look at the `onEvent`
        block. We already know that event handlers call a function. What we'll see
        now is that they also **pass a parameter**. The default name for this parameter
        is simply `event` but you can change it to be anything you like. \r
        \r
        The
        `event` parameter is a more complex kind of variable (called an "Object")
        that we'll learn more about later. For now just know that for both mouse
        and keyboard events, the event parameter passes more information about the
        event. In the case of key events **you can find out the key(s) that were actually
        pressed by using `event.key`**.\r
        \r
        # Do This:\r
        \r
        * Drag out an `onEvent`
        block.\r
        * Change the ID to `screen1` and the event type to `keypress`.  \r
        \r
        <img
        src="https://images.code.org/537b5bbef3db62c90155528e6753a00a-image-1447175732347.gif"
        style="width: 450px">\r
        \r
        * Once you hit **Run**, **click on the screen
        so that the keystrokes will register**.\r
        * **Type different combinations
        of keys** and check out the results in the console. Does every key combination
        print to the console? Some keys to try:\r
            * Letter keys\r
            * Number
        keys\r
            * Shift key\r
            * Hold shift and letter\r
            * Delete key\r
            *
        Left and right arrow keys\r
            * Press and hold a key
      CSPU5_U3L25 - play sound when up key_markdown_instruction: |-
        # Play Sound With
        Keys\r
        \r
        You may have noticed from the last couple of levels that the value
        of `event.key` is just a string which is the name of the key. As a result
        we can check which key was pressed with a simple conditional statement.  For
        example to check for the press of the **"a"** key we could write `if (event.key
        == "a")`.\r
        \r
        # Do This:\r
        The **starter code provided** plays the sound
        whenever ANY key is pressed.\r
        \r
        * Use `console.log` to **find out the
        value of `event.key` when the up arrow is pressed.**\r
        \r
        * **Add an `if`
        statement** so the sound only plays when the when the **up arrow** is pressed.
      CSPU5_U3L25 Free Response 3_markdown_instruction: |
        What is the output of this
        code segment?

        \tvar phrase = "I am so";
        \tvar emotion = "excited";
        \tvar
        sentence = phrase + " " + emotion.toUpperCase() + "!";
        \tconsole.log(sentence);
        <br/>
      CSPU5_U3L26 AND operator_markdown_instruction: |-
        # AND Operator in Movie Bot\r
        \r
        On
        the last level you may have noticed that if you typed in a question like "What
        is an R rated comedy movie?" It gives two movie suggestions! It would make
        more sense for it to give one suggestion.\r
        \r
        We could use nested `if`
        statements to do this by nesting `if` statements about ratings inside of `if`
        statements about genre. However, you might be getting a sinking feeling that
        this could become a lot of nested `if` statements very quickly! \r
        \r
        **Instead
        let's use the AND operator (`&&`) to check for a genre and a rating at the
        same time.** \r
        \r
        <img src="https://images.code.org/a9307ead3b147e0a8016f2054f47f5f2-image-1446153610104.png"
        style="width: 200px; float:right">\r
        \r
        Be careful about the order of
        the `if` statements. As a general principle you want to check the most specific
        conditions before checking more general ones.  For example, you want to have
        an `if` statement that checks for rating AND genre evaluated before one that
        just checks for genre on its own. Having a more general `if` statement checked
        first might cut off or prevent more specific conditions from being reached.\r
        \r
        You
        still want your app to give suggestions when just a rating or just a genre
        is detected, so keep this principle of ordering in mind. (Try them in the
        reverse order if you're interested in seeing what happens :))\r
        \r
        **Note:
        ** Check out the flowchart below to see the logic we are trying to add.\r
        \r
        #
        Do This:\r
        \r
        * **Try the question "What is an R rated comedy movie?**
        to see the result.\r
        \r
        * **Update the code to give only one movie suggestion
        when a genre and a rating are detected in the input.**\r
        \t* Make one set
        of `if`, `else-if`, and `else` statements about genre and rating\r
            *
        Add conditional statements to check for a comedy movie AND a rating. You could
        do this for all the genres but stick to one for now.\r
        \r
        * **Test out a
        couple sentences with your keywords** to make sure the change worked.\r
        \r
        <img
        src="https://images.code.org/e64c26fed584ddbb5e5a62e6800d5e69-image-1455816162662.png"
        style="width: 100%">\r
        \r
        <a href="https://images.code.org/e64c26fed584ddbb5e5a62e6800d5e69-image-1455816162662.png"
        target="_blank">Click to open in separate window.</a>
      CSPU5_U3L26 OR operator_markdown_instruction: |
        # OR Operator in Movie Bot\r
        \r
        Let's
        try to check for the keywords related to questions ("who", "what", "where",
        "when", "why", "how", and "?") to decide if the user asked a question.
        You could do this with a chain of `if-else-if` statements, but it would not
        be very efficient. \r
        \r
        Instead let's use a **series of OR operators (`||`)**
        to check whether "who", "what", "where", "when", "why", "how"
        or "?" show up in the user input. \r
        \r
        **Note: ** We've updated the
        the flowchart below to show the logic we are trying to add to the initial
        question.\r
        \r
        # Do This:\r
        \r
        * **Update the `if` statement** to check
        if **"who" OR "what" OR "where" OR "when" OR "why" OR "how" OR
        "?"** have been typed in by the user.\r
        \r
        * **Test out a couple sentences
        with your keywords** to make sure the change worked.\r
        \r
        <img src="https://images.code.org/6104c7fd0ecd31010d12be79bc350831-image-1446495141539.png"
        style="width=500px">\r
      CSPU5_addDescriptiveIDsToTurtleDriver_markdown_instruction: |
        # Descriptive
        IDs\r
        \r
        **You try it** - give your buttons **descriptive and meaningful
        IDs** rather than the default `button1`, `button2` and so forth.\r
        \r
        After
        you change the ID in Design Mode remember to:\r
        \r
        * **Change the event
        handler code** so that it correctly references the new IDs of the buttons\r
        *
        **Run - Test - Debug ** the program to make sure it works, and debug any problems.\r
        \r
        <details><summary><strong>Reminder:</strong>
        Rules About IDs [click to expand]</summary>\r
        \r
        In making descriptive and
        meaningful IDs there **are some rules about IDs** you need to know.  IDs...\r
        \r
        <li>
        are case sensitive</li>\r
        <li> cannot contain spaces.\r
        <li>  *must* begin
        with a letter (A-Z or a-z) and may be followed by any number of digits and
        letters.\r
        <li>  can contain hyphens ("-"), underscores ("_"), colons
        (":"), or periods (".").\r
        \r
        </details>\r
      CSPU5_basic if - DIY secret number_markdown_instruction: |
        # Do it yourself
        - What's the secret number?\r
        \r
        Insert lines of code between the "Welcome"
        and "Goodbye" that do the following:\r
        \r
        1. use `promptNum` to ask the
        user to enter the "secret number"\r
        2. add an `if` statement to check if
        the number is the secret (you can make up your own secret number)\r
        3. use
        `console.log` to display a message if the user guessed correctly\r
        \r
        **NOTE:**
        Don't go overboard here adding messages. Just get practice adding a prompt
        and an if-statement on your own.  Make sure it works and move on.\r
      CSPU5_basic if - check driving age_markdown_instruction: |-
        # You try it\r
        \r
        This
        is only *slightly* different from the voting example you just saw.\r
        \r
        *
        **Add an if-statement** to the code to check the `age` to see if the person
        is old enough to drive. (In most states you need to be 16 or older).\r
        *
        **Display a message if the person is old enough drive.**\r
        \r
        You can add
        an if-statement by dragging it out from the toolbox.  We've provided the
        console.log message you should use.  Just drag it inside the if-statement.  This
        animation shows most of what you have to do.\r
        \r
        ![](https://images.code.org/4ef3562d035ffacf292daac508fea34f-image-1479746969387.gif)
      CSPU5_basic if - voting examle_markdown_instruction: |
        # Recreate the voting
        example\r
        \r
        * Replace `condition` with a Boolean expression to check if
        the person is 18 or older.\r
        * Run the program a few times, entering different
        ages at the prompt\r
        * Make sure you generate the two outputs that are possible
        from this code.\r
        \r
      CSPU5_basic if-else - driving age_markdown_instruction: |-
        # You try it\r
        \r
        Let's
        modify the driving age example to add an `else` clause.\r
        \r
        * **Add an
        `else` ** to the if-statement.\r
        * **Add a console.log** message inside the
        else clause that says something like "sorry you can't drive yet".\r
        \r
        You
        can add an else-statement by clicking on the `+` attached to the if statement.  We've
        provided some starting code.\r
        \r
        **BONUS** - if they are not old enough
        to drive you could do the math and tell them how many years they have to wait.
      CSPU5_moveTurtleOnButtonClick_markdown_instruction: |
        # onEvent\r
        \r
        **You
        try it!** - Make the turtle move forward when the button is clicked.\r
        \r
        *
        **Add an `onEvent` block** \r
        * Set the **id** of your button\r
        * Add `moveForward`
        to the function definition\r
        \r
        * **Run the program** to make sure it works.\r
        *
        **Try changing the event type** to something like *"mouseover"* and see
        what happens.  Not all event types will work with buttons but it's fun to
        play a little bit.\r
        \r
        Once you've got the program responding to some
        event, congratulations! You've just made your first interactive app. \r
        \r
        **Click
        Finish** to move on to the next problem.\r
        \r
      CSPU5_playWithEventTypes_markdown_instruction: |
        \r
        # Play with different event
        types\r
        \r
        <img src="https://images.code.org/9f013bd84577eb2498061757e18a72f4-image-1444322870272.46.06
        AM.png" style="float: right">\r
        If you haven't yet, you should experiment
        with different event types with your `onEvent` blocks.  The ones that will
        work best here are mouse-related ones such as:\r
          * click\r
          * mousemove\r
          *
        mousedown\r
          * mouseup\r
          * mouseover\r
        \r
        *There are some events that
        capture keystrokes from the keyboard. These are interesting, but they do not
        work easily with buttons. We'll stick to mouse events for now, and get to
        keys later.*\r
        \r
        **Be sure** to experiment with each of the ones that start
        with "mouse...".\r
        \r
        Once you've have played a little bit, click Finish
        to move on.\r
      CSPU5_predict_applab_onEventWithWrongID_markdown_instruction: |
        # Debugging
        Event-Driven Programs: IDs\r
        \r
        **You Try it: Checking IDs** -- Your first
        debugging task will be to verify that the button IDs match the event-handlers.  You'll
        also see error messages in the **"Debug Console"**\r
        \r
        ![](https://images.code.org/6bb61c1ab1af5c0ce84a8cc4dc9b95cd-image-1476970435861.png)\r
        \r
        1.
        **Run the program** and inspect the error messages in the Debug Console.\r
          *
        **NOTE:** an error message *only* indicates where the computer ran into trouble.  It
        doesn't tell you the root cause of the problem, necessarily.\r
        2. **Investigate**
        -- Use the **error message as a clue** to investigate the possible problem.\r
        3.
        **Fix it** -- Make a change that you think will fix the problem.\r
        4. **Run
        the program** and verify that not only are there no error messages but the
        program works as intended (turtle moves forward on button click).\r
        5. **Didn't
        work?** - repeat the steps above.  And stick with it!  You'll get it eventually.\r
        \r
        **Remember:**
        You can see the ID of a UI element by just hovering your mouse over it.\r
        <details><summary>Hint?
        [click here]</summary>\r
        \r
        <li>In this case the ID of the button does not
        match the ID in the onEvent command</li>\r
        <li>The error message is saying:
        "you're telling me to listen to events on a UI Element with id 'button1'
        and no such thing exists!" </li><br>\r
        There are two ways to fix this:<br>\r
        <li>Change
        the ID in the event handler code to match the button ID in design mode.</li>\r
        <li>...or
        Change the button ID in design mode to match the event handler</li></details>\r
        \r
      CSPU5_setPosition to fixed location_markdown_instruction: |
        # Using setPosition\r
        \r
        <img
        src="https://images.code.org/b664824ffeb3347b2e0b6d12447b4e8b-image-1476891499229.gif"
        style="width: 150px; float: right;">\r
        \r
        **Now you try it** - use  [setPosition](#triggercallout=setPosHover)
        to **move the button to the middle of the screen when clicked**. \r
        \r
        We've
        set up a small project for you with a button (id: `moveBtn`) already added
        in design mode.\r
        \r
        1. Add an `onEvent` block\r
        2. Drag a `setPosition`
        command into the event handler function\r
        3. Set the x,y coordinate so that
        the button ends up in the middle of the screen.\r
         * You'll need to experiment
        a little bit to find coordinates that work for you.\r
         * Hover over the screen
        to find a good starting point.\r
        \r
        **Tip**: when you see a command that
        is linked like this: [setPosition](#triggercallout=setPosHover) click it!
        -- it will show you other hints.\r
        \r
        Once you've got the button moving
        to the middle of the screen click Finish to move on to the next challenge.\r
      CSPU5_turtleDriver_add2ndButton_markdown_instruction: |
        <img src="https://images.code.org/7447f9f6df9a1931297e1f8fa7284f28-image-1481582422206.gif"
        style="float: right; width: 200px">\r
        \r
        # Practice! Add another button\r
        \r
        Now
        that you know the pattern try it out.  **Add a 2nd button to the screen that
        turns the turtle to the left when clicked.**  The finished product should
        look similar to the image shown here.\r
        \r
        Remember the steps:\r
        \r
          1.
        **Design Mode**: drag another button onto the screen\r
          2. Switch to Code
        Mode: **add an onEvent block** to the code\r
          3. **Add code** inside the
        function to make the turtle turn left\r
          4. Run. Test. Debug\r
        \r
        <details><summary>Need
        Help? [Click Here]</summary>\r
        \r
        <h3>\r
        Here is an example of adding other
        button to make the turtle turn left\r
        </h3> \r
        \r
        <div style="column-count:
        3; column-gap: 20px; column-rule: 0.5px solid #00adbc; -moz-column-count:
        3; width: 100%">\r
        \r
        <p><span style="font-weight: bold; color: #00adbc;
        font-size: 200%;">1.</span>\r
        Add a UI element to the screen in Design Mode</p>\r
        \r
        <p><span
        style="font-weight: bold; color: #00adbc; font-size: 200%;">2.</span>\r
        Add
        another onEvent block to the code.  <strong>Note:</strong> you need new onEvent
        block <em>for every</em> event you want to capture.</p>\r
        \r
        <p><span style="font-weight:
        bold; color: #00adbc; font-size: 200%;">3.</span>\r
        Add code to the event
        handler function you want.</p>\r
        \r
        </div>\r
        \r
        <img src="https://images.code.org/f695b83911560bf628750ed2a134a38c-image-1476818017592.png"
        style="display: block; width: 100%">\r
        \r
        <div style="column-count: 1;
        column-gap: 20px; column-rule: 0.5px solid #00adbc; -moz-column-count: 3;
        width: 33%;">\r
        \r
        <p><span style="font-weight: bold; color: #00adbc;
        font-size: 200%;">4.</span>\r
        <strong>Debugging Tip:</strong> if you hover
        your mouse over a UI element while in code mode, it will show you the ID of
        the element.  This very useful when you have a lot of elements on the screen.\r
        \r
        </div>\r
        \r
        <div
        style="clear: both">\r
        &nbsp;\r
        </div>\r
        \r
        \r
        \r
        \r
        </details>\r
      CSP_U2_Shakespeare_Question_markdown_instruction: |-
        Respond to this prompt or
        to another as directed by your teacher.\r
        \r
        Shakespeare’s complete works
        have approximately 3.5 million characters.  Which is bigger in file size:
        Shakespeare’s complete works stored in plain ASCII text or a 4 minute song
        on mp3?  How much bigger?
      Calc Circles of Eval .1_markdown_instruction: |-
        You’ll be writing a kind of
        code called Evaluation Blocks, because each block of code evaluates to a single
        value. Change the ??? in this code so that the block evaluates to 5.
      Calc Circles of Eval .2_markdown_instruction: |-
        This Evaluation Block is a multiplication
        function which takes two numbers and returns the product of those numbers.
        Edit this block so that it multiplies 2 * 5
      Calc Circles of Eval .3_markdown_instruction: |-
        Here's a function for addition
        which takes two numbers and returns their sum. Use this Addition Block to
        add 3 + 6.
      Calc Circles of Eval .4_markdown_instruction: |-
        Here we've nested an Addition
        Block inside a Multiplication Block. Complete this code so it multiplies 3
        by (4 + 1)
      Calc Circles of Eval 2_markdown_instruction: |-
        Use a Multiplication Block to
        complete this code.
      Calc Circles of Eval 3_markdown_instruction: |-
        Complete the Evaluation Blocks
        to match this statement.
      Calc Circles of Eval 4_markdown_instruction: |-
        This code is missing a couple
        of Evaluation Blocks - make sure you put everything in the right order.
      Calc Circles of Eval 7_markdown_instruction: |-
        Complete the Evaluation Blocks
        to match this statement.
      Calc Circles of Eval 8_markdown_instruction: |-
        Complete the Evaluation Blocks
        to match this statement.
      Calc Circles of Eval 9_markdown_instruction: |-
        Complete the Evaluation Blocks
        to match this statement.
      Calc Circles of Eval Free Play_markdown_instruction: |-
        Free Play: Try using
        the Evaluation Blocks to write some equations of your own. How does nesting
        the blocks in different ways impact their evaluation?
      Calc Define Funcs 1_markdown_instruction: |-
        Let's look at some more traditional
        algebraic functions now. Here's a function translated from the simple algebraic
        function `f(x) = x + 1`. What would you expect this function to output if
        provided an input of 15?
      Calc Define Funcs 2_markdown_instruction: |-
        Write a function `f` that takes
        a parameter `x` and returns `x - 10`. Test your function using `f(15)`.
      Calc Define Funcs 3_markdown_instruction: |-
        We don't have to call our function
        `f` every time; create a function called `times-ten` that should take a parameter
        `x` and return `x * 10`. Once you've created the function, run `times-ten(50)`.
      Calc Define Funcs 4_markdown_instruction: |-
        Write a function called `half` that
        takes a number `x` and returns half that number. Once you've written the
        function, use it to calculate `half(21)`
      Calc Design Recipe 1_markdown_instruction: |-
        Let's use the Design Recipe to
        create a function called `cube` - this function should take in a Number and
        return that number to the power of 3. Make sure to write two example cases!
        When you're done, use your new function to calculate `cube(7)`.
      Calc Design Recipe 2_markdown_instruction: |-
        Your school is holding a bake sale,
        and you need to track the cost of making each cookie, the money paid, and
        the total profit. Cookies cost $0.25 each to make, and sell for $1.50/cookie.\r
        Write
        the function `cost`, which takes in the number of cookies you intend to sell,
        and returns the cost of making those cookies.\r
        \r
        _Test your function by
        calculating the cost of 42 cookies_
      Calc Design Recipe 3_markdown_instruction: |-
        Write the function `sales` which
        takes in the number of cookies sold, and produces the amount of money customers
        spent to buy those cookies (each cookie is sold at $1.50).\r
        \r
        _Test your
        function by calculating the sales for 135 cookies_
      Calc Design Recipe 4_markdown_instruction: |-
        Using the two functions we just
        wrote, write the function `profit`, which takes in the number of cookies you
        sold, and gives you back the total profit you make from selling your cookies,
        accounting for the cost of baking them.\r
        \r
        _Test your function by calculating
        the total profit for 15 cookies_
      Calc Rocket 1_markdown_instruction: |-
        In the last puzzle you wrote a contract
        for the function `rocket-height` that states it has a range of Number, domain
        of Number, and should return the height of the rocket traveling at 15 m/s
        after a given number of seconds. Let's write an example case now for the
        height of the rocket at 3 seconds.
      Calc Rocket 2_markdown_instruction: |-
        Great, let's do one more example before
        writing the function - what should the rocket height be after 30 seconds?
      Calc Vars 1.1_markdown_instruction: |-
        Here we've set the `age` variable to
        17 years. Can you write an expression that calculates `age` in days?
      Calc Vars 1_markdown_instruction: |-
        Variables allow us to name values so that
        we can easily refer to them repeatedly throughout our programs. Here's a
        variable called `age`. Set its value to your age and click run.
      Calc Vars 2.1_markdown_instruction: |-
        Here's a new variable called `age-in-months`.
        Use the variable `age` to set `age-in-months`.
      Calc Vars 2_markdown_instruction: |-
        Can you write an expression that calculates
        `age` in months?
      'Challenge: Buzzer and LED_markdown_instruction': |-
        # Challenge\r
        \r
        Check
        with your teacher before starting the challenge.\r
        \r
        Now that you know
        how to use the LED and buzzer, try creating an app that can play a variety
        of different sounds and which uses the LED. You could make a keyboard or synthesizer
        that plays various sounds when you click different buttons.
      'Challenge: Input and UI_markdown_instruction': |-
        # Stop\r
        \r
        You have reached
        the end of the lesson. Check in with your teacher to see if you should work
        on the challenge level before you start. This is an extra challenge to practice
        your skills if you have time. If you don't have time for it no big deal!\r
        \r
        #
        Challenge\r
        \r
        Go to <a href="https://studio.code.org/p/applab" target="_blank">Full
        App Lab</a> and try to make your own profile creator like the example program
        on this level.
      'Challenge: Lights Picker_markdown_instruction': |-
        # Challenge: More Patterns\r
        \r
        Add
        some more patterns to your app. Find a partner and add their pattern as an
        option. Make sure to put each pattern into its own function.
      'Challenge: List of Notes_markdown_instruction': |
        # Challenge: \r
        \r
        Check
        with your teacher before starting the challenge.\r
        \r
        **Starter Code:**
        An array with the name of the 30 buttons on the screen (not including the
        New Pattern button) is provided for you. \r
        \r
        **Write Code:** Each time
        the New Pattern button is clicked at least one random button from the list
        is set to a random color.\r
      'Challenge: Random Button Colors_markdown_instruction': |
        # Challenge: Random
        Button Colors\r
        \r
        Check with your teacher before starting the challenge.\r
        \r
        **Starter
        Code:** An array with the name of the 30 buttons on the screen (not including
        the New Pattern button) is provided for you. \r
        \r
        **Write Code:** Each
        time the New Pattern button is clicked at least one random button from the
        list is set to a random color.\r
      'Challenge: Sunset with Counters_markdown_instruction': |
        # Challenge: Nightfall\r
        \r
        Think
        you've got drawing with counters down? Try this challenge.\r
        \r
        The color
        block can take a 4th input that controls the opacity of the color. You can
        click the arrows on the side of the color block to expand this 4th input.\r
        \r
        ![](https://images.code.org/7844f8cb46eade7cec452b7a4d98124b-image-1484964689007.10.08
        PM.png)\r
        \r
        # Do This\r
        \r
        This is your same sunset animation from before.
        Can you make the scene slowly change to night?\r
        \r
        ![](https://images.code.org/b055142110b0d0ed092d6496447aad6e-image-1463079830043.gif)\r
        \r
      Classroom Assessment Techniques_markdown_instruction: |-
        The following link is
        a resource that presents the process of designing and using classroom assessment
        techniques:
      Classroom Management Tips for School Computer Labs_markdown_instruction: |-
        ##
        Strategies for Managing a Computer Lab\r
        \r
        \r
        If you're new to teaching
        a computer lab, consider implementing some of the 7 tips for establishing
        strong instructional routines, outlined in this article by Angela Watson.
        \r
        \r
        <br><br>
      'Collaborative Learning and Group Work: Description and Strategies_markdown_instruction': "The\nfollowing
        link to Cornell University Center for Teaching Excellence provides\na brief
        description of group learning along with a handful of specific techniques\nfor
        designing and implementing group work activities:  "
      Color Blindness Filter_markdown_instruction: |
        # Color Blindness Filter\r
        \r
        \r
        \r
      Color Contrast Checker_markdown_instruction: |-
        # Color Contrast\r
        \r
        People
        need to be able to see and read the content on your web page for it to be
        useful. Some people might have bad eye sight, others are color blind. How
        do you design with these differences in mind? \r
        \r
        One of the easiest ways
        to insure that many people will be able to read the content on your website
        is to make sure their is enough contrast between the different colors you
        are using together on your site.\r
        \r
        http://gomedia.com/zine/tutorials/rule-three-contrast-contrast-contrast/\r
        \r
        \r
        #
        Do This\r
        \r
        * Use the color contrast checker to see the difference in contrast
        of the different colors you are using together on your site.
      Considerations for the 1-to-1 Classroom_markdown_instruction: |-
        ## 1-1 Classroom\r
        \r
        If
        you're new to managing a classroom with computers, check out this article
        in Education Week, which outlines some important considerations.\r
        \r
        <br><br>
      Course 4 Artist 1_markdown_instruction: |
        Help me draw a box.   \r
        (Each line
        is 200 pixels long) \r
        \r
        <br/><br/>\r
        \r
      Course 4 Artist 10_markdown_instruction: "<img src=\"https://images.code.org/c876143212d195192013582f57c6df04-image-1445625392518.36.18.png\"\nwidth=\"150px;\"
        style=\"mix-blend-mode: multiply;\" />\\r\n\\r\n**Play time:**  Here\nis the
        code for an interesting shape.   \\r\n\\r\nWhat happens when you repeat\nit
        multiple times, turning between each iteration?   \\r\n\\r\nNotice that the\nturns
        in this shape add up to *420 degrees*, which means that when your artist\nis
        done drawing, it will be facing a different direction than when you started.
        \ That\nnew direction is exactly *60 degrees* to the *right* of where you
        began.\\r\n\\r\n<hr/>\\r\n\\r\n<h4>\\r\n<details>\\r\n<summary><b>Repeat\n4</b></summary>\\r\n<br/>\\r\nIf
        you want to come full circle in just 4 repetitions,\nyou need the artist to
        turn a total of **360 degrees/4 = 90 degrees** each\ntime.  You can do that
        by adding an extra `turn right by 30 degrees` block\nto the outer loop (since
        **60+30 = 90**.)  \\r\n<br/>\\r\n<img src=\"https://images.code.org/9da67a628ed72e87520a02a0d917e2af-image-1440132370113.44.12.png\"\nwidth=\"500px;\"
        style=\"mix-blend-mode: multiply;\" />\\r\n<br/><br/>\\r\n</details>\\r\n</h4>\\r\n\\r\n<h4>\\r\n<details>\\r\n<summary><b>Repeat\n6</b></summary>\\r\n<br/>\\r\nWhen
        you repeat the shape as-is 6 times, you get\na total rotation of **6x60 degrees**
        which is a full **360 degree** cycle.  \\r\n<img\nsrc=\"https://images.code.org/b79f96b87097ce3afe8a6a5608d04e36-image-1440132287456.44.27.png\"
        \ width=\"500px;\"  style=\"mix-blend-mode:\nmultiply;\" />\\r\n</details>\\r\n</h4>\\r\n\\r\n<h4>\\r\n<details>\\r\n<summary><b>Repeat\n12</b></summary>\\r\n<br/>\\r\nIf
        you want to repeat the image 12 times, you\nneed the artist to turn a total
        of **360 degrees/12 = 30 degrees** each iteration.  That\nmeans you will need
        to adjust the artist back a bit with `turn left by 30\ndegrees` before you
        repeat the shape again.   <br/><br/>\\r\n<img src=\"https://images.code.org/ad254952522674496918561096817c66-image-1440132424792.44.01.png\"\nwidth=\"500px;\"
        style=\"mix-blend-mode: multiply;\" />\\r\n</details>\\r\n</h4>\\r\n\\r\nNow\nit's
        your turn!  Can you recreate each image by repeating the starting shape?  "
      Course 4 Artist 11_markdown_instruction: "<img src=\"https://images.code.org/6cac10470af71bbb5d75bf5e2669046f-image-1439939145211.png\"\nwidth=\"200px\"/>\\r\n\\r\nNow
        for a challenge!  \\r\n\\r\nHere is a design that\nuses only blocks that you
        have already been shown.  Can you figure out how\nto recreate it?  Feel free
        to use trial and error. You are not expected to\nget it perfect the first
        time.\\r\n\\r\nThe repeated shape is almost identical\nto the one from the
        last puzzle, except that the length used in the first\nloop is a little smaller. "
      Course 4 Artist 12_markdown_instruction: |-
        <img src="https://images.code.org/70795d84048767ae7fb65883f476b27c-image-1440050836837.01.09.png"
        width="250px"/>\r
        \r
        Free Play Inspiration: You've now learned everything
        you need to know to make a pattern like this! If this picture inspires you,
        try to make something similar. Otherwise, create something all your own. \r
        \r
        <br/>
      Course 4 Artist 13_markdown_instruction: |-
        Still playing?  Here is a blank canvas
        where you can design anything you want!
      Course 4 Artist 2_markdown_instruction: |-
        Can you use a loop to draw the greyed
        out square?  \r
        (Each side is 300px long)
      Course 4 Artist 20_markdown_instruction: |-
        Still playing?  \r
        \r
        Here is a
        blank canvas where you can create whatever you want!
      Course 4 Artist 3_markdown_instruction: |-
        Try to figure out what happens if
        you run this code (or press "Run" to test it).  \r
        \r
        Then, repeat it
        enough times to complete the drawing.
      Course 4 Artist 4_markdown_instruction: |-
        How many degrees are in a circle?  \r
        Fill
        in the repeat block with that number to create a circle of colors.
      Course 4 Artist 5_markdown_instruction: |-
        Draw the other half of this design
        so it's symmetrical. \r
        The triangles are equilateral and are 50 pixels
        long.  \r
        \r
        You may have to run the code several times to figure out all
        of the blocks that need to be added.
      Course 4 Artist 6_markdown_instruction: |-
        Complete the code to draw these three,
        equilateral triangles.
      Course 4 Artist 7_markdown_instruction: "Now nest this loop inside another\nloop
        to draw 10 triangles. "
      Course 4 Artist 8_markdown_instruction: |-
        Draw this sun by looping this whole
        block of code multiple times.
      Course 4 Artist 8a_markdown_instruction: |-
        Remember this shape?  Now we're
        going to let you build it without giving you any blocks to start!
      Course 4 Artist 9_markdown_instruction: "Loop this design 10 times and make\nsure
        to turn between each shape that's drawn. "
      Course 4 Artist Binary 1_markdown_instruction: |-
        Here's a function that takes
        a binary string of 1's and 0's and instructs the artist to follow them from
        left to right, top to bottom.  \r
        \r
        The artist will fill-in the squares
        when it sees a 1 and ignore the square when it sees a 0. \r
        \r
        **Run this
        code to see how the artist uses binary to draw this pattern.**
      Course 4 Artist Binary 1a_markdown_instruction: |-
        Here's a function that takes
        a binary string of 1's and 0's and instructs the artist to follow them from
        left to right, top to bottom.  The artist will fill-in the squares when it
        sees a 1 and ignore the square when it sees a 0. \r
        \r
        Run this code to
        see how the artist uses binary to draw this pattern.
      Course 4 Artist Binary Free Play 2b_markdown_instruction: |-
        <img src="https://images.code.org/0a30f23ff6138828d053267719d34fa8-image-1444435986654.00.22.png"
        width="250px"/>\r
        \r
        **Free-Play Inspiration:** You've now learned everything
        you need to know to make a pattern like this! \r
        \r
        If this picture inspires
        you, try to make something similar. Otherwise, create something all your own.
        \r
        <br/>
      Course 4 Artist Binary pre1_markdown_instruction: |-
        Binary is a way of representing
        information using only two options. In this case, <b>off</b> and <b>on</b>.\r
        <br/>\r
        Here,
        we're going to use the number <b>0</b> as code for "off" and the number
        <b>1</b> as code for "on".\r
        <hr/>\r
        We've provided you with a grid of
        "pixels" that you can walk through and make designs by turning on only certain
        squares.\r
        \r
        <b>Use the blocks below to have the artist draw "01010101"
        in binary in the first row.</b>
      Course 4 Artist Binary ryan_markdown_instruction: |-
        Binary is a way of representing
        information using only two options.  Here, we're going to use the options
        "off" (represented by the number 0) and "on" (represented by the number
        1).   \r
        \r
        We've provided you with a grid of "pixels" that you can walk
        through and make designs by turning on only certain squares.  Can you have
        the artist draw "01010101" in binary in the first row?
      Course 4 Artist For Loops 1_markdown_instruction: |
        Use a repeat block to draw
        this triangle that is 50 pixels wide.\r
        \r
      Course 4 Artist For Loops 10_markdown_instruction: |-
        Free Play Time! Have fun
        drawing whatever you like with the blocks you have learned how to use.
      Course 4 Artist For Loops 11_markdown_instruction: |-
        Remember back in a previous
        stage when we used a variable to control the number of sides in a shape? We
        are going to do the same thing with the `counter` variable now.  \r
        \r
        This
        pattern starts with a triangle and adds one side at a time until it draws
        a decagon (10 sides). Each side should be 100 pixels long. \r
        \r
        How will
        you use the `counter` variable from the `for` loop to recreate this drawing?
      Course 4 Artist For Loops 11a_markdown_instruction: |-
        Let's put it all together!   \r
        \r
        Using
        your knowledge of `for` loops and the `counter` variable, create this drawing
        where each shape has two more sides than the last.  Make sure that each side
        is 10 times as long as the number of sides in the polygon.\r
        \r
        Very little
        of the code has been provided for you.
      Course 4 Artist For Loops 12_markdown_instruction: |-
        That looked pretty cool,
        but now I'd like to draw each shape next to the last one. This time each
        side is 20 pixels. Use a jump block to jump forward 40 pixels after each shape.
      Course 4 Artist For Loops 13_markdown_instruction: |-
        Hmmm, those shapes are
        getting bigger every time! Didn't we already solve this problem with variables?
        How can we use the counter variable to make the sides smaller as there are
        more of them? Instead of moving forward by a set amount, try moving forward
        (100 / counter) pixels.
      Course 4 Artist For Loops 14_markdown_instruction: |-
        If you turn a little bit
        more or less than you normally would for a shape, it creates a neat effect.
        \r
        \r
        Try using some of the code from the last level, but turning 89 degrees
        to create this twisted square spiral.
      Course 4 Artist For Loops 15_markdown_instruction: |-
        **Free Play:** Try making
        some drawings of your own using `for loops`. We've added a few useful variables
        for you as well.
      Course 4 Artist For Loops 2_markdown_instruction: |-
        I've put the code for drawing
        a triangle inside a `for loop` that counts from 50 to 100 by 10. \r
        \r
        <br/>\r
        <strong>NOTE:</strong>
        Make sure you look at the code *before* you hit "Run".
      Course 4 Artist For Loops 3_markdown_instruction: |-
        Use the last puzzle as a
        reference to complete this one.  The smallest triangle has 20 pixel sides,
        the largest has 200 pixel sides, and each triangle is 20 pixels larger than
        the last.
      Course 4 Artist For Loops 4_markdown_instruction: "How would you modify what\nyou've
        learned to draw these squares? They start at 15 pixels long, the largest\nis
        300 pixels long, and each square is 15 pixels larger than the last. "
      Course 4 Artist For Loops 5_markdown_instruction: |
        Good job on the last puzzle!
        Let's use that "counter" variable block again to draw this cool picture.
        \r
        \r
      Course 4 Artist For Loops 6_markdown_instruction: |-
        Free Play! Try using a for
        loop to draw a growing shape pattern of your own design.
      Course 4 Artist For Loops 6a_markdown_instruction: |-
        Make three small changes
        to the code from the last level to get this!
      Course 4 Artist For Loops 7_markdown_instruction: |
        What happens if you remove
        the "Repeat 3" from this algorithm, keeping the "move" and "turn" blocks
        in the for loop? \r
        \r
        <br/>\r
        In this spiraling triangle, each side is
        20 pixels longer than the last.\r
        \r
      Course 4 Artist For Loops 8_markdown_instruction: "Just one little change to\nthe
        code from the last image can create this drawing. Can you figure out what\nthat
        change is?\\r\n\\r\nHint:  You need to remove something!  "
      Course 4 Artist For Loops 8a_markdown_instruction: |-
        Just one little change
        to the code from the last image can create this image. Can you figure out
        what that change is?
      Course 4 Artist For Loops 9_markdown_instruction: |
        Can you make a spiral? Move
        forward from 1 to 75 pixels, increasing by 1 pixel each time.\r
        \r
      Course 4 Artist For Loops Challenge_markdown_instruction: |-
        **Challenge:** Can
        you figure out how to use all of the things you've learned to create this
        image of polygons, all with 40 pixel sides?\r
        \r
        Remember, in order to create
        a spiral, you cannot close the polygon.  This means that each shape will need
        to have one fewer sides than usual.
      Course 4 Artist For Loops Challenge_a_markdown_instruction: |-
        **Challenge:**
        Can you figure out how to use all of the things you've learned to create
        this image of polygons, all with 40 pixel sides?
      Course 4 Artist For Loops inspire_markdown_instruction: |-
        <br/><br/>\r
        <img
        src="https://images.code.org/9b5897e059bb29bd2faf8504659a3cfc-image-1440719685627.49.33.png"
        width="250px"/>  \r
        <br/><br/>\r
        **Free-Play Inspiration:** You've now
        learned everything you need to know to make a pattern like this! If this picture
        inspires you, try to make something similar. Otherwise, create something all
        your own.
      Course 4 Artist Functions 12.1_markdown_instruction: |-
        Let's create a function
        called `draw an octagon 20` that draws an octagon where each side is 20 pixels
        long.
      Course 4 Artist Functions 13.1_markdown_instruction: "Now, let's make a function\ncalled
        `jump to upper right` that moves the artist to the upper-right of the\noctagon
        that you just drew so we can finish this pattern.  \\r\n<br/>\\r\n*Hint:  To\nget
        yourself to the upper-right corner, try jumping in a pattern that makes\njust
        3/8 of the octagon.*  "
      Course 4 Artist Functions 14.1_markdown_instruction: "Now, let's make a function\ncalled
        `jump to upper right` that moves the artist to the top-right of the\noctagon
        that you just drew so we can finish this pattern.  "
      Course 4 Artist Functions Inspiration_markdown_instruction: |
        <img src="https://images.code.org/cf373e03bede480ae54aec72ce823454-image-1442951867535.54.11.png"
        width="250px"/>\r
        \r
        **Free-Play Inspiration:** You've now learned everything
        you need to know to make a pattern like this! \r
        \r
        If this picture inspires
        you, try to make something similar. Otherwise, create something all your own.
      Course 4 Artist Functions challenge_markdown_instruction: "<img src=\"https://images.code.org/69f1c2b415f907c86aaa6ed2534c3682-image-1442870371171.13.38.png\"\nwidth=\"250px\"/>\\r\n\\r\n**Challenge
        Level:** Use what you've learned in\nthis stage and others to figure out how
        to make the drawing above.  "
      Course 4 Artist Functions inspire_markdown_instruction: |-
        <img src="https://images.code.org/6c6ff8e3b5a763926102033a94720f8b-image-1441300952649.19.47.png"
        width="250px"/>\r
        \r
        **Free-Play Inspiration:** You've now learned everything
        you need to know to make a pattern like this! \r
        \r
        If this picture inspires
        you, try to make something similar. Otherwise, create something all your own.  \r
        <br/>\r
        \r
        <h4>\r
        <details>\r
        <summary><b>Hints</b></summary>\r
        \t<br/><br/>\r
        \t<h5>\r
        \t<details>\r
        \t<summary><b>Hint
        #1</b></summary>\r
            \t<br/>\r
            \tUse a `for loop`, then use its counter
        variable inside of a nested `repeat` loop. \r
            \t<br/><br/>\r
            </details>\r
        \t</h5>\r
            \r
            <h5>\r
        \t<details>\r
        \t<summary><b>Hint
        #2</b></summary>\r
            \t<br/>\r
            \tEach iteration, you should `draw
        a square` then jump forward.\r
            \t<br/><br/>\r
            </details>\r
        \t</h5>\r
            \r
            <h5>\r
        \t<details>\r
        \t<summary><b>Hint
        #3</b></summary>\r
            \t<br/>\r
            \tYou will need to turn left by 90
        degrees outside of your `repeat`, but still inside the `for loop`.\r
            \t<br/><br/>\r
            </details>\r
        \t</h5>\r
            \r
            <h5>\r
        \t<details>\r
        \t<summary><b>Solution</b></summary>\r
            \t<br/>\r
            \t<br/>\r
            \t<img
        src="https://images.code.org/6b07c5de58a1fa573bef19182105f516-image-1441300922567.14.00.png"
        width="450px"/>\r
            \t<br/><br/>\r
            </details>\r
        \t</h5>\r
        </details>\r
        </h4>\r
        \r
        <br/>\r
        What
        happens if you make the squares a little bigger or smaller?  How about if
        you turn right instead of left?
      Course 4 Artist Inspire_markdown_instruction: "<img src=\"https://images.code.org/b5e28b084cb331ee030ea3853ed921bd-image-1440060815818.51.21.png\"\nwidth=\"250px\"/>\\r\n\\r\n**Free-Play
        Inspiration:** You've now learned everything\nyou need to know to make a pattern
        like this! If this picture inspires you,\ntry to make something similar. Otherwise,
        create something all your own. "
      Course 4 Artist Vars 1_markdown_instruction: |
        Let's draw an equilateral triangle.
        \r
        \r
        It has to be exactly 100 pixels long on each side.\r
        \r
        <br/>\r
      Course 4 Artist Vars 10_markdown_instruction: |-
        Here's an algorithm that draws
        a triangle out of smaller triangles. Can you modify it so that it uses the
        `sides` variable to draw each triangle? \r
        \r
        </br>\r
        Look through the
        code, and every time you see the number 3, replace it with your `sides` variable.
        Remember to use the `set sides` block.
      Course 4 Artist Vars 11_markdown_instruction: |-
        Here’s some more complicated
        code using the same concepts from the last puzzle - what should you set the
        `sides` variable to in order to draw this picture made of squares?\r
        \r
        <p
        style="font-size:small; padding: 15px 15px 15px 40px; background-color:#dcf3f3;
        border-radius:10px;">\r
        \tJust for fun: Try using a few different numbers
        to see what happens to the pattern!\r
        </p>
      Course 4 Artist Vars 12_markdown_instruction: |-
        Let's set the `sides` variable
        to 5. The more sides we add to this algorithm, the bigger this whole pattern
        gets! \r
        \r
        <br/>\r
        Notice that there is another variable called `length`.
        \r
        We can now use that variable wherever we have a `move forward` block.
        \r
        \r
        Set the `length` variable to 75 for this shape.
      Course 4 Artist Vars 13_markdown_instruction: |-
        When a shape has lots of sides,
        each side needs to be shorter if you want the whole pattern to fit on the
        screen. \r
        \r
        Let's recreate the algorithm for this amazing pattern, but
        instead of manually setting the `length` variable, let's use a math block
        with the `sides` variable inside to make sure that each shape fits correctly.  \r
        \r
        The
        perimeter of each polygon is 300 pixels.
      Course 4 Artist Vars 14_markdown_instruction: |-
        **Free Play**: Check it out!
        Now your algorithm is nested within one more loop. Experiment with changing
        the values of your two variables to draw cool patterns.\r
        \r
        For even more
        effect, try playing with color!  Use random colors inside loops to see how
        it changes your design.
      Course 4 Artist Vars 2_markdown_instruction: |-
        Instead of using `move forward
        by 150`, the `move` block is now referencing a variable called `length`. Can
        you set `length` to 150 to draw this new triangle?
      Course 4 Artist Vars 3_markdown_instruction: "Here's a loop that draws a square,\nbut
        something's missing. Can you fix it so that it uses the variable \"length\"\nto
        figure out how long each side should be? "
      Course 4 Artist Vars 4_markdown_instruction: |-
        Now I want to make a rectangle
        that is twice as tall as it is wide. We've got a variable called `width`
        that needs to be set to 100. Can you use the math blocks to complete the code?
      Course 4 Artist Vars 6_markdown_instruction: |-
        Here’s some code that can draw
        any regular polygon. \r
        \r
        There’s a new variable called `sides` that is
        set to 4. \r
        \r
        Can you use the `sides` variable (along with the math block)
        to turn the right amount regardless of how many sides are in the polygon?
      Course 4 Artist Vars 7_markdown_instruction: |-
        Use what you learned in the last
        puzzle to create this hexagon using the `sides` variable.\r
        \r
        See how you
        could change just one value to draw a triangle,  square, pentagon, or octagon?
      Course 4 Artist Vars 8_markdown_instruction: |
        **Free Play:** Experiment with
        the number of sides this shape has. Can you change the algorithm so that the
        overall size of the shape stays the same, no matter how many sides it has?
      Course 4 Artist Vars 9_markdown_instruction: |-
        Modify this algorithm so it uses
        the `sides` variable instead of a fixed number to draw a triangle. Don't
        forget to use the `set sides to` block.
      Course 4 Bee 1_markdown_instruction: |-
        The bee can't tell what's under the
        cloud! \r
        \r
        Use the `if` block to check whether there is a flower under
        the cloud. \r
        \r
        Get nectar one time, **ONLY** if there is a flower.
      Course 4 Bee 2_markdown_instruction: |-
        Use the `if/else` block to check each
        object to see if it's a flower or a honeycomb. \r
        \r
        If it's a flower,
        collect one nectar...otherwise, make one honey!
      Course 4 Bee 3_markdown_instruction: |-
        The unknown object is either a flower
        or a honeycomb. \r
        \r
        This time, use the `if/else` block to collect one
        nectar **if** it is a flower, **else** make one honey (because then it would
        be a honeycomb).
      Course 4 Bee 4_markdown_instruction: |-
        This purple flower may have either 3,
        2, or 1 nectar. \r
        \r
        Here an `if/else` block is combined with another `if/else`
        block to create an `if/else-if/else` statement. \r
        \r
        Complete the solution
        to collect the unknown amount of nectar.
      Course 4 Bee 5_markdown_instruction: |-
        This purple flower may have either 3,
        2, or 1 nectar. Add an `if-else` block to create an `if, else-if, else` block.
        Complete the solution to collect the unknown amount of nectar.
      Course 4 Bee 6_markdown_instruction: |-
        This purple flower may have either 3,
        2, or 1 nectar. Create an `if, else-if, else` block to collect the unknown
        amount of nectar.
      Course 4 Bee 7_markdown_instruction: |-
        Use everything you have learned so far
        to collect all the nectar. The purple flower may have either 3, 2, or 1 nectar.
      Course 4 Bee For Loops 11_markdown_instruction: |-
        What's wrong with this loop?
        See if you can fix it and make the bee collect all the nectar.
      Course 4 Bee Params 1_markdown_instruction: |-
        Write a sequence to collect all
        of the nectar using `get 3 nectar` which turns, moves to collect the nectar,
        and then returns to the original location.
      Course 4 Bee Params 2_markdown_instruction: |-
        Modify the `get 3 nectar` function
        so it makes me turn right instead of left to the flowers.
      Course 4 Bee Params 3_markdown_instruction: |-
        Now there are flowers on both
        sides!  \r
        \r
        We've added variables called `left` and `right` for you to
        use, and now there is a parameter called `direction` inside `get 3 nectar`.
        \r
        \r
        **Edit `get 3 nectar` so that the bee turns the correct direction
        when the variables `left` or `right` are passed into the function.**
      Course 4 Bee Params 5_markdown_instruction: |-
        Let's start from scratch - can
        you create a new function called `get 5 nectar` with a direction parameter?
      Course 4 Bee Params 6_markdown_instruction: |-
        Wouldn't it be nice if we could
        collect all of these nectars with a single function? \r
        \r
        <br/>\r
        Try
        adding a new parameter to your function called `nectar units` to control the
        amount of nectar to collect. You'll probably want to rename the function
        too!
      Course 4 Bee Params 7_markdown_instruction: |
        Try using your new function to
        collect all of this nectar.\r
        \r
        <br/>\r
      Course 4 Bee Params 8_markdown_instruction: |-
        **Challenge:** Now there's honey
        to deal with too! \r
        \r
        Rewrite your function to use both the number of
        honey units and the number of nectar units.  How would you use those numbers
        to decide what you should do?
      Course 4 EC 1a_markdown_instruction: |-
        **Extreme Challenge:**  No rules. No
        clues. Just the challenge!
      Course 4 EC 1b_markdown_instruction: |-
        **Extreme Challenge:**  No rules. No
        clues. Just the challenge!
      Course 4 EC 2a_markdown_instruction: |-
        **Extreme Challenge:**  No rules. No
        clues. Just the challenge!
      Course 4 EC 2b_markdown_instruction: |-
        **Extreme Challenge:**  No rules. No
        clues. Just the challenge!
      Course 4 EC 2c_markdown_instruction: |-
        **Extreme Challenge:**  No rules. No
        clues. Just the challenge!
      Course 4 EC 2d_markdown_instruction: |-
        **Extreme Challenge:**  No rules. No
        clues. Just the challenge!
      Course 4 EC 3_markdown_instruction: |
        **Functions Super Challenge:** Use what
        you learned in the previous level to draw an image like this.\r
        \r
        *Note:
        The code becomes more simple if you incorporate parameters.*\r
        \r
        <br/>\r
        <img
        src="https://images.code.org/d3d6a51fafdcc0a09a5c6b0e0f3c2b92-image-1446239805818.08.59.png"
        width="300px"/>\r
        <br/>  \r
        \r
        \r
      Course 4 EC 3a_markdown_instruction: |
        **Extreme Challenge:** No rules. No clues.
        Just the challenge!\r
        \r
        <br/>\r
        <img src="https://images.code.org/d3d6a51fafdcc0a09a5c6b0e0f3c2b92-image-1446239805818.08.59.png"
        width="300px"/>\r
        <br/>  \r
        \r
        \r
      Course 4 Maze 4_markdown_instruction: |-
        Try the `repeat` block to use fewer
        blocks when solving this puzzle...
      Course 4 Play Lab Params 1_markdown_instruction: |-
        Here's a function called
        `jump` that causes your main character to jump up 100 pixels. \r
        \r
        Run
        the program and use the jump function to collect all of the flags by moving
        the dog with the arrow keys.
      Course 4 Play Lab Params 10_markdown_instruction: |-
        We've added one last function
        for you.\r
        <hr/>\r
        \r
        <h4>\r
        Use an `if` statement to program your game
        to call the `level_up` function only when `player_score` becomes greater than
        a certain number.<br/><br/>\r
        </h4>\r
        <i>For example: `player_score` > 6</i>\r
        \r
        \r
        <hr/>\r
        <i>Play
        the game, and make it to level 3 to move to the next puzzle.</i>
      Course 4 Play Lab Params 2_markdown_instruction: |
        Now we've got flags that
        are too high for our current jump! Let's use both the "up" and "down"
        arrows so that we can have multiple jump heights.  \r
        \r
        We need to add
        a parameter to our jump function called `height`.  \r
        - The up arrow should
        cause the dog to jump 200 pixels \r
        - The down arrow should make it jump
        only 100 pixels. \r
      Course 4 Play Lab Params 3_markdown_instruction: "We have added another parameter\nto
        the jump function so that we can use it with other actors. Each actor is\nrepresented
        by a number, starting from one. \\r\n\\r\n<br/>\\r\nEdit the `jump`\nfunction
        so that it uses the `actor` parameter to make the correct character\njump. "
      Course 4 Play Lab Params 4_markdown_instruction: |-
        Here's a function called
        `patrol`. \r
        \r
        Edit `patrol` to move Cat up 400 pixels and then down 400
        pixels.
      Course 4 Play Lab Params 5_markdown_instruction: |-
        Edit the the `patrol` function
        to add an `actor` parameter, so that we can call it for each of the actors
        on the screen. Remember, the actors correspond to numbers 1, 2, and 3.
      Course 4 Play Lab Params 6_markdown_instruction: |-
        Add another parameter called
        `speed` to the `patrol` function. Try using a `set speed` block with the new
        `speed` parameter to help Penguin get both flags before the other sprites
        even get one.
      Course 4 Play Lab Params 7_markdown_instruction: |-
        Let's have some fun! Look
        at the code provided to see if you can figure out what each block does.  \r
        \r
        When
        you're done, use the arrow keys to control Dog and collect all of the flags.\r
        \r
        **NOTE:**
        You don't need to make any changes to the program
      Course 4 Play Lab Params 8_markdown_instruction: |-
        Use the `when actor touches`
        block to send Dog back to the top-left ONLY if Dog touches any of the other
        actors.
      Course 4 Play Lab Params 9_markdown_instruction: |-
        Here's our game from an
        earlier stage but most of the code is hidden. We've added a new function
        called `score_points.`\r
        <br/>\r
        <hr>\r
        <br/>\r
        <h4>\r
        Edit the function
        so that a new parameter called `points` is added to `player_score`.  \r
        <br/>\r
        The
        variable `player_score` should increase each time Dog tags Cat with pie, and
        decrease each time that Cat tags Dog with a sandwich.\r
        </h4>\r
        <br/>\r
        <hr>\r
        *Note:
        When you're done, click "Run" to play.  When Dog scores 6 points, you will
        move on to the next puzzle.*
      Course 4 Play Lab Vars 1_markdown_instruction: |-
        This time you don't have to
        write any code, just hit `Run` to play the game! \r
        \r
        <br/>\r
        In this
        game, you're the dog who is trying to collect more flags than the cat. Use
        the down arrow to control the dog. Press `Finish` when you're done playing.
      Course 4 Play Lab Vars 2_markdown_instruction: |-
        The race in that last puzzle
        wasn't very fair! Change the `dog_speed` variable to make sure you can collect
        more flags than Cat. The first to collect 10 flags wins!
      Course 4 Play Lab Vars 3_markdown_instruction: |-
        Here's a new kind of game!
        \r
        \r
        You don't need to change anything on this level.\r
        \r
        **Directions:**
        Use the left and right arrows to move, and the up arrow to jump. See if you
        can collect all of the flags.
      Course 4 Play Lab Vars 4_markdown_instruction: |
        Now we're using a variable
        called `height` to control how high the dog can jump. Update the `height`
        variable so that the dog can jump high enough to reach all the flags. \r
      Course 4 Play Lab Vars 6_markdown_instruction: |-
        <h5><b>\r
        In our game, how
        should we score points? \r
        </b></h5> \r
        <br/>\r
        \r
        1. Add 1 to your `points`
        variable each time Dog hits Cat with a piece of pie.  <br/>    <br/> \r
        2.
        Use the `when actor 2 touches anything` event to trigger an update to your
        score. You can increment your variable by setting `points = points + 1.`  <br/>   <br/>
        \r
        3. Get your score up to 10 to pass the level.\r
        \r
        <br/><br/>\r
        <h4>\r
        **Note:**
        Use the right arrow to throw pie!\r
        </h4>
      Course 4 Play Lab Vars 7_markdown_instruction: |-
        Nice, now let's make sure
        this game isn't too easy to play!  \r
        \r
        Any time Dog (actor 1) gets hit
        by a sandwich from Cat (actor 2), you should lose a point. \r
        \r
        Start with
        10 points so it's not too hard. Let your score drop down from 10 to 0 to
        pass the level.
      Course 4 Play Lab Vars 9_markdown_instruction: |-
        Free Play time! Here are all
        of the variables we've played with so far in this stage, as well as a few
        more in case you want them. \r
        \r
        Notice that there are now so many blocks
        in our toolbox that they need to be organized!  Here, we've put each piece
        into an appropriate category.  Take some time to explore everything that is
        available. When you're done browsing, make a game or story using repeats,
        variables, and events.  \r
        \r
        *Hint: scroll down to see all the commands
        in the workspace.*
      Course 4 Play Labs For Loops 1_markdown_instruction: |-
        Let's make the dog speak
        every number from 1 to 100. Use a `for` loop and the counter block to speak
        the counter variable each time the loop is run.
      Course 4 Play Labs For Loops 4_markdown_instruction: |-
        Changing the increment
        can be helpful, but we're still counting linearly (each number is the same
        distance from the last) What if I wanted to count exponentially? \r
        \r
        <br/>\r
        Without
        changing the settings in this for loop, can you count 1, 4, 9, 16, 25... (counter
        squared)?
      Course 4 Play Labs For Loops 4a_markdown_instruction: |-
        Now, let's blend the
        variables from Stage 7 together with your `counter` variable to make some
        magic happen.   \r
        \r
        In this puzzle, Dog will count from **0** to **1000**
        by `increment`.  Set the `increment` variable to **10** at the beginning of
        your code to see what happens.
      Course 4 Play Labs For Loops 5_markdown_instruction: |-
        In the last stage we
        counted the square of each number. Try changing `counter ^ 2` to `counter
        ^ 3` to count the cube of each number (1, 8, 27, 64, 125, 216, 343…)
      Course 4 Play Labs For Loops 5a_markdown_instruction: |-
        In this puzzle, Dog
        will be your time keeper.\r
        \r
        Dog will count from **0** to **30** by `increment`.  The
        `increment` variable will begin with a value of **1**.\r
        \r
        Can you make
        it so that each time you click Dog, `increment` increases by **2**?  Click
        the forward arrow to run the `for loop`.  \r
        \r
        **Note:** Run the loop a
        couple of times, clicking Dog before each one.
      Course 4 Play Labs For Loops 6a_markdown_instruction: |-
        Now that we've seen
        how to control our `for loop` using variables inside of our program, let's
        make a game!\r
        \r
        Dog will still keep time by counting with our `for loop`
        by `increment`, but this time we will add The Wizard into the mix.  Can you
        change the code so that `increment` goes up by two each time The Wizard is
        clicked?\r
        \r
        Watch out!  The Wizard moves quickly!
      Course 4 Play Labs For Loops 7a_markdown_instruction: |-
        Now we're getting somewhere!  What
        if we start counting how many times we can click The Wizard before Dog gets
        to 30?  \r
        \r
        Finish adding blocks to The Wizard so that every time he's
        clicked the variable `clicked` increases by one. You can ignore `increment`
        for now.\r
        \r
        **Note:** Dog will start counting when you click `Run`.
      Course 4 Play Labs For Loops 8_markdown_instruction: |-
        Now, help the actors
        move as they count.  \r
        \r
        Dog should move and count by adding 2 (`counter
        + 2`) each time.  Cat will move and count by multiplying by 2 (`counter *2`)  each
        time. Penguin will move and count to the power of 2 (`counter ^ 2`) each time.  Who
        will reach their flag first?
      Course 4 Play Labs For Loops 8a_markdown_instruction: "To finish our game,\nwe
        need to bring back the `increment` variable!    Let's tie it to the level\nof
        the game.\\r\n\\r\n1) Keep track of the number of times The Wizard is clicked.
        \ \\r\n2)\nIf The Wizard is clicked at least 10 times before Dog counts to
        30, raise\n`increment` by 1 and start again.  \\r\n3) If The Wizard does not
        get clicked\nat least 10 times, the game is over.  "
      Course 4 Playlab For Loop Freeplay_markdown_instruction: |-
        **Freeplay:** Use
        everything you've learned so far to make a game that includes a `for` loop!
      Course 4 Playlab For Loops 4b_markdown_instruction: |-
        Now, these two characters
        are going to race!  \r
        \r
        Each of them will move `counter` steps at a time,
        but their counters will have different values because of the `for` loops.  \r
        \r
        Can
        you change the **increment** in one of the loops so that the race is a tie?
      Course 4 Playlab For Loops 5b_markdown_instruction: |-
        Adjust the interval on
        these `for` loops so that the two characters end in the exact same place.
      Course 4 Playlab For Loops 6b_markdown_instruction: "Now we're going to use\n`for`
        loops in a whole different way!\\r\n\\r\nThis game gets hard quickly because\nthe
        time between disappearances shrinks fast!\\r\n\\r\n<hr/>\\r\n\\r\n**Edit this\n`for`
        loop to create a game that's fun for you to play!**  \\r\n\\r\n<hr/>\\r\n\\r\nPress\n\"Run\"
        and click Madame Unicorn as many times as you can.  Can you beat our\nscore
        of 24? "
      Course 4 SCF 1_markdown_instruction: |-
        **Functions Super Challenge:** Use the
        suggested functions to draw four rows of hexagons. Notice how our even numbered
        rows are shifted to the right?
      Course 4 SCF 1a_markdown_instruction: |-
        **Functions Super Challenge:** Can you
        figure out how to collect all of this nectar with the fewest blocks possible?
      Course 4 SCF 1b_markdown_instruction: |
        **Functions Super Challenge:** Can you
        figure out how to collect all of this honey with the fewest blocks possible?\r
      Course 4 SCF 2_markdown_instruction: "**Functions Super Challenge:** Use what\nyou
        learned in the previous level to draw an image like this.\\r\n\\r\n*Note:\nThe
        code becomes more simple if you incorporate parameters.*  "
      Course 4 SCF 3 Fail 1_markdown_instruction: |
        **Functions Super Challenge #1:**
        \r
        \r
      Course 4 SCF 3 Fail 2_markdown_instruction: |
        **Functions Super Challenge #1:**
        \r
        \r
      Course 4 SCF 3_markdown_instruction: "**Functions Super Challenge:** Use what\nyou
        learned in the previous level to draw an image like this.\\r\n\\r\n*Note:\nThe
        code becomes more simple if you incorporate parameters.*\\r\n\\r\n<br/>\\r\n<img\nsrc=\"https://images.code.org/d3d6a51fafdcc0a09a5c6b0e0f3c2b92-image-1446239805818.08.59.png\"\nwidth=\"300px\"/>\\r\n<br/>
        \ "
      Course 4 SCFL 1_markdown_instruction: |-
        **For-Loops Super Challenge:** Solve
        this puzzle with the fewest number of blocks possible.
      Course 4 SCFL 1a_markdown_instruction: |
        **For Loops Super Challenge:** Can
        you get Scrat to his acorn using as few blocks as possible?\r
      Course 4 SCFL 1b_markdown_instruction: |-
        **For Loops Super Challenge:** Can
        you get Scrat to his acorn using as few blocks as possible?
      Course 4 SCFL 2_markdown_instruction: |-
        **For-Loops Super Challenge:** Solve
        this puzzle with the fewest number of blocks possible.  \r
        <br/>
      Course 4 SCFL 3_markdown_instruction: |-
        **For-Loops Super Challenge:** Can you
        figure out how to re-create this drawing? \r
        \r
        <img src="https://images.code.org/724b2efa8aefe863bd0d6491a3f1590f-image-1445563707400.26.50.png"
        width="350px"/>
      Course 4 SCFL 4_markdown_instruction: |-
        **For-Loops Super Challenge:** Can you
        figure out how to re-create this drawing? \r
        \r
        <img src="https://images.code.org/407f502735beec686187451bdf67aada-image-1446002848700.59.34.png"
        width="350px"/>
      Course 4 SCFL 5_markdown_instruction: |-
        **For-Loops Super Challenge #5:** Can
        you figure out how to re-create this drawing? \r
        \r
        <img src="https://images.code.org/407f502735beec686187451bdf67aada-image-1446002848700.59.34.png"
        width="350px"/>\r
        \r
        <h4>\r
        <details>\r
        <summary><b>Hints</b></summary>\r
        \t<br/><br/>\r
        \t<h5>\r
        \t<details>\r
        \t<summary><b>Hint
        #1</b></summary>\r
            \t<br/>\r
            \tThe color change happens using the
        `set color with red, green, blue` block.  Red is always the value of `counter`,
        green is always `255 - counter`, and blue remains constant at 255 exactly.\r
            \t<br/><br/>\r
            </details>\r
        \t</h5>\r
            \r
            <h5>\r
        \t<details>\r
        \t<summary><b>Hint
        #2</b></summary>\r
            \t<br/>\r
            \tEach shape is a square with sides
        that are `counter` pixels long, starting with 5px, and increasing by 5px all
        the way up to 200px.\r
            \t<br/><br/>\r
            </details>\r
        \t</h5>\r
            \r
            <h5>\r
        \t<details>\r
        \t<summary><b>Hint
        #3</b></summary>\r
            \t<br/>\r
            \tThe artist turns 15 degrees between
        each square.\r
            \t<br/><br/>\r
            </details>\r
        \t</h5>\r
            \r
            <h5>\r
        \t<details>\r
        \t<summary><b>Solution</b></summary>\r
            \t<br/>\r
            \t<br/>\r
            \t<img
        src="https://images.code.org/0bf4c87e33459f832258939ec53ad595-image-1446002848701.59.15.png"
        width="450px"/>\r
            \t<br/><br/>\r
            </details>\r
        \t</h5>\r
        </details>\r
        </h4>
      Course 4 SCFL 6_markdown_instruction: |-
        **For-Loops Super Challenge:** Can you
        figure out how to re-create this drawing with a single loop? \r
        \r
        <img
        src="https://images.code.org/b0d15d06465d645c5ca533e5da6387b3-image-1446075597132.36.04.png"
        width="350px"/>
      Course 4 SCFL 7_markdown_instruction: |-
        **For-Loops Super Challenge:** The artist
        wants to catch some waves! Can you figure out how to re-create this drawing?
        \r
        \r
        <img src="https://images.code.org/fba3423f2e9a405d4d3859de32cdb0f3-image-1446102880655.13.36.png"
        width="350px"/>
      Course 4 SCFP 1_markdown_instruction: |-
        Create a function with parameters that
        allows the artist to jump backward and forward by x pixels, and also up and
        down by y pixels (using positive and negative numbers).
      Course 4 SCV 1_markdown_instruction: |-
        <img src="https://images.code.org/7469d6b9aaaae532d864caecb65bd2cc-image-1444706295435.54.39.png"
        width="250px"/>\r
        \r
        **Variables Super Challenge:** You've now learned
        everything you need to know to make a pattern like this! This puzzle is meant
        to be difficult.  Can you stick with it until you figure out the solution?
      Course 4 SCV 2_markdown_instruction: |-
        <img src="https://images.code.org/85f0b27009edd86eff78692004b9ed52-image-1444712655590.02.32.png"
        width="250px"/>\r
        \r
        **Variables Super Challenge:** You've now learned
        everything you need to know to make a pattern like this! This puzzle is meant
        to be difficult.  Can you stick with it until you figure out the solution?
      Course 4 SCV 3_markdown_instruction: |-
        **Variables Super Challenge:** You've
        now learned everything you need to know to solve this puzzle! This game is
        meant to be difficult.  Can you stick with it until you figure out the solution?\r
        \r
        <hr/>\r
        \r
        Now
        for a game of tag!  Tag Cat to get 2 points. Tag Penguin to get 3 points.  Get
        exactly 10 points to win!\r
        But be careful, when Cat and Penguin tag each
        other, they take points away.\r
        \r
        <strong>\r
        Add the blocks necessary
        to make this game work the way it's been explained. \r
        - How will you get
        Dog to move in all directions using the arrow keys?  \r
        - How will you add
        points when Dog tags Cat or Penguin?  \r
        - How will you subtract points when
        Cat and Penguin touch?\r
        </strong>\r
        \r
        <hr/>
      Course 4 SCV 4_markdown_instruction: |-
        **Variables Super Challenge:** Solve
        this puzzle with the fewest number of blocks possible.
      Course 4 SCV 5_markdown_instruction: |-
        **Variables Super Challenge:** Solve
        this puzzle with the fewest number of blocks possible.
      Course 4 SCV 6_markdown_instruction: "<img src=\"https://images.code.org/499fc71a0a06bacb68a9789ad57f8148-image-1445574373673.16.44.png\"\nwidth=\"250px\"/>\\r\n\\r\n**Variables
        Super Challenge:** You've now learned\neverything you need to know to make
        a pattern like this! This puzzle is meant\nto be difficult.  Can you stick
        with it until you figure out the solution?  "
      Course 4 SCVP 1_markdown_instruction: |-
        Create a function with parameters that
        allows the artist to jump backward and forward by x pixels, and also up and
        down by y pixels (using positive and negative numbers).
      Course 4 Variables Assessment_markdown_instruction: |-
        Can you create this image
        using a variable for `sides`? Each line should be 50 pixels long.
      CourseF_PlayLab_vars1_markdown_instruction: |-
        To play this game, you don't
        have to write any code, just hit "Run"! \r
        <hr/>\r
        Here, you're the dog
        who is trying to collect more flags than the cat.  \r
        _(Use the down arrow
        to move.)_
      CourseF_PlayLab_vars10_markdown_instruction: |-
        Free Play time! Here are all
        of the variables we've played with so far in this stage, as well as a few
        more in case you want them. \r
        \r
        Notice that there are now so many blocks
        in our toolbox that they need to be organized!  Here, we've put each piece
        into an appropriate category.  Take some time to explore everything that is
        available. When you're done browsing, make a game or story using repeats,
        variables, and events.  \r
        \r
        *Hint: scroll down to see all the commands
        in the workspace.*
      CourseF_PlayLab_vars2_markdown_instruction: |-
        The race in that last puzzle wasn't
        very fair! Change the `dog_speed` variable to make sure you can collect more
        flags than Cat. The first to collect 10 flags wins!
      CourseF_PlayLab_vars3_markdown_instruction: |-
        Here's a new kind of game! \r
        \r
        You
        don't need to change anything on this level.\r
        \r
        **Directions:** Use the
        left and right arrows to move, and the up arrow to jump. See if you can collect
        all of the flags.
      CourseF_PlayLab_vars4_markdown_instruction: "Now we're using a variable called\n`height`
        to control how high the dog can jump. Update the `height` variable\nso that
        the dog can jump high enough to reach all the flags. "
      CourseF_PlayLab_vars6_markdown_instruction: |-
        <h5><b>\r
        In our game, how should
        we score points? \r
        </b></h5> \r
        <br/>\r
        \r
        1. Add 1 to your `points`
        variable each time Dog hits Cat with a piece of pie.  <br/>    <br/> \r
        2.
        Use the `when actor 2 touches anything` event to trigger an update to your
        score. You can increment your variable by setting `points = points + 1.`  <br/>   <br/>
        \r
        3. Get your score up to 10 to pass the level.\r
        \r
        <br/><br/>\r
        <h4>\r
        **Note:**
        Use the right arrow to throw pie!\r
        </h4>
      CourseF_PlayLab_vars7_markdown_instruction: |-
        <h5><b>\r
        In our game, how should
        we score points? \r
        </b></h5> \r
        <br/>\r
        \r
        1. Add 1 to your `points`
        variable each time Dog hits Cat with a piece of pie.  <br/>    <br/> \r
        2.
        Use the `when actor 2 touches anything` event to trigger an update to your
        score. You can increment your variable by setting `points = points + 1.`  <br/>   <br/>
        \r
        3. Get your score up to 10 to pass the level.\r
        \r
        <br/><br/>\r
        <h4>\r
        **Note:**
        Use the right arrow to throw pie!\r
        </h4>
      CourseF_PlayLab_vars8_markdown_instruction: |-
        <h5><b>\r
        In our game, how should
        we score points? \r
        </b></h5> \r
        <br/>\r
        \r
        1. Add 1 to your `points`
        variable each time Dog hits Cat with a piece of pie.  <br/>    <br/> \r
        2.
        Use the `when actor 2 touches anything` event to trigger an update to your
        score. You can increment your variable by setting `points = points + 1.`  <br/>   <br/>
        \r
        3. Get your score up to 10 to pass the level.\r
        \r
        <br/><br/>\r
        <h4>\r
        **Note:**
        Use the right arrow to throw pie!\r
        </h4>
      CourseF_PlayLab_vars9_markdown_instruction: |-
        Nice, now let's make sure this
        game isn't too easy to play!  \r
        \r
        Any time Dog (actor 1) gets hit by
        a sandwich from Cat (actor 2), you should lose a point. \r
        \r
        Start with
        10 points so it's not too hard. Let your score drop down from 10 to 0 to
        pass the level.
      Crack Random Substitution_markdown_instruction: |-
        # Break a random substitution
        cipher!\r
        \r
        This version of the tool gives you more information about the
        encrypted text and more options for how to try out different substitutions.\r
        \r
        ###
        Different ways to analyze text\r
        - Play with some of the sorting options
        available in the Random substitution cipher tab to get different views on
        the letter frequencies in the input text as well as standard English text.\r
        ![](https://images.code.org/82efbca1807206c9a07de520fdb22027-image-1443572614493.23.28.png)\r
        \r
        ###
        Different ways to substitute\r
        - To substitute a letter you can drag a blue
        letter of the alphabet directly underneath the orange letter you want changed
        in the original ciphertext.\r
        ![](https://images.code.org/da9a7af7568d8c1698872ab91b4d79d7-image-1443572471212.gif)\r
        \r
        ###
        Play.  Always play.\r
        - There are other ways to analyze and substitute characters
        that you can find by clicking on the buttons and trying out whatever you like.\r
        -
        Remember: you can't break it :)\r
        \r
        See how long it takes you to crack
        the cipher! Is this a good method of encrypting secret data?\r
        \r
        <img src="http://code.org/api/hour/finish_encryption.png">
      Crack a Caesar Cipher_markdown_instruction: |
        # Crack a Caesar cipher!\r
        \r
        This
        tool lets you play with text and do Caesar ciphers. You can use this to either
        encrypt a message or decrypt it.\r
        \r
        # Do this\r
        - Load a **Sample message**
        from the message dropdown. This will load a message that has been encrypted
        with a Caesar cipher.\r
        \r
        ![](https://images.code.org/347139486c8c729bf3c6e72ce67da878-image-1476286380409.gif)\r
        \r
        -
        Using the buttons in the Caesar substitution tab, you can shift the alphabet
        forwards or backwards to try to unscramble the message.\r
        \r
        ![](https://images.code.org/ef9ebc16d2f1442dc46fba9bd48b5d43-image-1476285966821.gif)\r
        \r
        See
        how long it takes you to crack the cipher! Is this a good method of encrypting
        secret data?\r
        \r
        <img src="http://code.org/api/hour/begin_encryption.png">\r
        \r
      D_Frozen_nested3_markdown_instruction: |-
        ![](https://images.code.org/109aa2afaa3b7b1ecebff518bacdf3c5-image-1500660008987.png)
        _"Let’s make it into a snowflake."_\r
        \r
        Next, jump Elsa back to the center
        using the `jump to 200 over and 200 down` block, and spin her around to draw
        the line of shapes again and again in a bunch of different directions.   \r
        \r
        What
        amazing snowflakes you can make!\r
        <hr/>\r
        Take a look at these examples
        with polygons:  \r
        ![](https://images.code.org/b32ebfb3be559bf8a6d017a854e0b97e-image-1495821528995.42.08.png)\r
        ![](https://images.code.org/08d7155f6829f82d878dfa57ad5dcaf3-image-1495821528996.42.26.png)\r
        ![](https://images.code.org/7d461ee9046871e6993406e558f28176-image-1495821528996.42.58.png)\r
        \r
        Abstract
        shapes might make a snowflake more like one of these:  \r
        ![](https://images.code.org/376d7ba20b6bb86e08b1675370e87b92-image-1496695869798.44.00.png)\r
        ![](https://images.code.org/4f649cc779920632674afac5acce5c95-image-1496695869798.47.51.png)\r
        ![](https://images.code.org/a68f925ffd87241ebc09183acc908b4b-image-1496695869796.31.49.png)
      D_Frozen_nested4_markdown_instruction: "![](https://images.code.org/109aa2afaa3b7b1ecebff518bacdf3c5-image-1500660008987.png)\n_\"What
        happens if we draw snowflakes on top of each other?\"_\\r\n\\r\nTry\nlayering
        two different shapes of snowflakes on top of one another with a little\nturn
        in between - see what you get! "
      D_Frozen_nested5_markdown_instruction: |
        ![](https://images.code.org/109aa2afaa3b7b1ecebff518bacdf3c5-image-1500660008987.png)
        _"Get creative with shapes and angles to see what kind of new snowflakes
        we can draw!"_\r
      D_Frozen_nested6_markdown_instruction: |-
        ![](https://images.code.org/109aa2afaa3b7b1ecebff518bacdf3c5-image-1500660008987.png)
        _"Let’s try something new. This time, skate in a zig-zag."_\r
        \r
        \r
        <img
        src="https://images.code.org/73b1310fca6cf884ec8fb8b026210212-image-1495839168718.16.10.png"
        width="200px" style="float: left; margin: 0 15px 15px 0;" />\r
        Draw a
        stair-step pattern that uses turns between 75 and 105 degrees -- but make
        sure that your left and right turns use the same angle.  \r
        (You will see
        why later.)
      D_Frozen_nested7_markdown_instruction: |-
        ![](https://images.code.org/109aa2afaa3b7b1ecebff518bacdf3c5-image-1500660008987.png)
        _"Now let’s turn and go back the way we came."_\r
        \r
        Turn around 180 degrees
        and draw the exact same stair pattern again!  \r
        \r
        - The rest of this stage
        will be easier if you put all of your code inside of a loop to make Elsa  draw,
        turn around 180 degrees, draw, then turn around 180 degrees again.\r
        \r
        <hr/>\r
        \r
        Here
        is an example of stairs that use a 76 degree turn:\r
        \r
        ![](https://images.code.org/ceea66fad37e79cc45a850911f90440c-image-1496696286635.16.27.png)
      D_Frozen_nested8_markdown_instruction: |-
        ![](https://images.code.org/109aa2afaa3b7b1ecebff518bacdf3c5-image-1500660008987.png)
        _"Let’s spin and make it into a snowflake."_\r
        \r
        Spin that shape around
        5 or 6 times in a circle.\r
        - If you choose 5 times,  try a turn of 72 degrees\r
        -
        If you choose 6 times,  try a turn of 60 degrees\r
        <hr/>\r
        \r
        Here's an
        example of Elsa turning a pattern 6 times:\r
        \r
        ![](https://images.code.org/b0fe02e728f80ae7a4b731f32371a37b-image-1496697582505.19.34.png)
      D_Frozen_nested9_markdown_instruction: |
        ![](https://images.code.org/109aa2afaa3b7b1ecebff518bacdf3c5-image-1500660008987.png)  _"Now,
        what should we do? Let’s explore and create our own winter wonderland!"_\r
        \r
        Try
        playing around with what you've created. Draw whatever you like!\r
        - What
        happens if you use two different angles in your stair step pattern?\r
        - What
        happens if you make your diamond pattern longer or shorter?\r
        - What does
        it look like to draw two snowflakes on top of one another?\r
      Data Visualizations 101_markdown_instruction: |
        ## Data Visualization 101: How
        to design charts and graphs\r
        \r
        In lesson 10, students evaluate a curated
        set of visualizations based on how effective they are at clearly and accurately
        communicating what they're representing. After they've done this evaluation
        for themselves, they explore this resource, which formally introduces the
        names of the different types of charts they've been seeing and goes into
        detail about what types of data each chart can represent most appropriately,
        as well as best practices for designing each type of chart.\r
        \r
      Designing Assessment Questions_markdown_instruction: |
        ## Designing Test Questions\r
        \r
        The
        following resource is from the University of North Carolina Charlotte's Center
        for Teaching and Learning. In it you will find a breakdown of the uses and
        tradeoffs for common assessment types, along with tips for writing good items.\r
        \r
        \r
      'Discovery Learning: Definition and History_markdown_instruction': |
        The following
        link is a resource that shows some of the history behind discovery learning:
      'Discovery Learning: Principals and Techniques_markdown_instruction': "The\nfollowing
        link is a resource that shows the principles and techniques of discovery\nlearning: "
      'Discovery Learning: Principles and Techniques_markdown_instruction': "The\nfollowing
        link is a resource that shows the principles and techniques of discovery\nlearning: "
      Discovery learning definition and history_markdown_instruction: |
        The following
        link is a resource that shows some of the history behind discovery learning:
      Discovery learning techniques_markdown_instruction: |
        The following link is
        a resource that shows the principles and techniques of discovery learning:
      ECS Unit 2 Challenge Selection_markdown_instruction: |-
        # Challenge Overview
        > What's your Challenge? \r
        \r
        ## Enter the lesson you selected for your
        challenge in the text box below.\r
        \r
        - Day 7-9: CSDT Cornrow Braiding\r
        -
        Day 10-12: Binary\r
        - Day 13-14: Linear and Binary Search (Tower Building)
        \r
        - Day 15-16: Sorting \r
        - Day 17: Minimal Spanning Trees\r
        - Day 18-21:
        Unit Final Project\r
        \r
        Now that you've selected a lesson, head to the
        forum and **share which lesson you plan to complete** for your challenge.\r
        \r
        ####
        <a href="http://forum.code.org/c/ecs/ecs-unit2" target=_blank>Forums <i
        class="fa fa-external-link" /></a>
      ECS Unit 2 Challenge Submission_markdown_instruction: |-
        # Share Out and Submit
        > Submit Link\r
        \r
        ##  Share your Artifacts and Advice\r
        **Head to the
        forum** and share: \r
        \r
        - Any data visualization or other artifact you
        created in doing the \r
         - Use the “SHARE” button in code studio to get a
        link to your program:   \r
        - The assessment question or extending learning
        activity that you produced for this lesson.\r
        - Notes for others who are
        going to teach this lesson. This should include: \r
         - Advice for someone
        who is going to teach this lesson (consider what was challenging about doing
        the lesson, what you think students will struggle with, etc).\r
         - What ideas
        do you have about how to structure and teach this lesson? what modifications
        do you plan to make to the lesson?\r
         - What additional resources (if any)
        might be helpful in teaching this lesson\r
        \r
        \r
        <hr>\r
        ### <a href= "http://forum.code.org/c/ecs/ecs-unit2"
        target=_blank> Head to the Forum >></a>\r
        <hr>\r
        \r
        ## Check out what others
        have posted! \r
        Once you've posted your own challenge results, check out
        what others have posted! Be sure to click through the other lessons as well
        and read through their work. Remember, a big goal here is to learn from one
        another so let people know when your find their suggestions helpful, or provide
        your own ideas when you come across questions. Be sure to use the **heart**
        feature on the forum to vote for posts you find particularly useful! \r
        \r
        <br/><br/>\r
        \r
        ##  Submit
        the Link for your Forum Post for Review\r
        \r
        If you would like to receive
        payment for this online PD, please submit a link to that forum post here so
        we can review! \r
        \r
        In order to get a dirct link to your post, click the
        link icon directly under your post (shown in the picture below):\r
        \r
        ![](https://images.code.org/40fd4bb1aa4f50cfb0d66bbf7881cd0d-image-1443847364702.png)
      ECS Unit 3 Challenge Selection_markdown_instruction: |-
        # Challenge Overview
        > What's your Challenge? \r
        \r
        ## Enter the lesson you selected for your
        challenge in the text box below.\r
        \r
        HTML Beginners:\r
        \r
        - Day 3-4,5:
        Basic HTML - Paragraph, Header, Strong, and EM Tags\r
        - Day 6--7: HTML -
        Images\r
        - Day 14: HTML - Links\r
        \r
        CSS Beginners:\r
        \r
        - Day 8-10:
        Basic CSS \r
        \r
        More Experienced with HTML and CSS:\r
        \r
        - Day 11-13:
        HTML and CSS \r
        - Day 17-19: HTML and CSS: Create Your Own Webpage\r
        - Day
        22-25: Unit Final Project\r
        - Day 18-21 Final Unit Project\r
        \r
        \r
        Now
        that you've selected a lesson, head to the forum and **share which lesson
        you plan to complete** for your challenge.\r
        \r
        #### <a href="http://forum.code.org/c/ecs/ecs-unit3"
        target=_blank>Forums <i class="fa fa-external-link" /></a>
      ECS Unit 3 Challenge Submission_markdown_instruction: 'Submit Link\r\n\r\n##  Share
        your Artifacts and Advice\r\n**Head to the forum** and share: \r\n\r\n- Any
        data visualization or other artifact you created in doing the \r\n - Use the
        “SHARE” button in code studio to get a link to your program:   \r\n- The assessment
        question or extending learning activity that you produced for this lesson.\r\n-
        Notes for others who are going to teach this lesson. This should include:
        \r\n - Advice for someone who is going to teach this lesson (consider what
        was challenging about doing the lesson, what you think students will struggle
        with, etc).\r\n - What ideas do you have about how to structure and teach
        this lesson? what modifications do you plan to make to the lesson?\r\n - What
        additional resources (if any) might be helpful in teaching this lesson\r\n\r\n\r\n<hr>\r\n###
        <a href= \"http://forum.code.org/c/ecs/ecs-unit3\" target=_blank> Head to
        the Forum >></a>\r\n<hr>\r\n\r\n## Check out what others have posted! \r\nOnce
        you''ve posted your own challenge results, check out what others have posted!
        Be sure to click through the other lessons as well and read through their
        work. Remember, a big goal here is to learn from one another so let people
        know when your find their suggestions helpful, or provide your own ideas when
        you come across questions. Be sure to use the **heart** feature on the forum
        to vote for posts you find particularly useful! \r\n\r\n<br/><br/>\r\n\r\n##  Submit
        the Link for your Forum Post for Review\r\n\r\nIf you would like to receive
        payment for this online PD, please submit a link to that forum post here so
        we can review! \r\n\r\nIn order to get a direct link to your post, click the
        link icon directly under your post (shown in the picture below):\r\n\r\n![](https://images.code.org/40fd4bb1aa4f50cfb0d66bbf7881cd0d-image-1443847364702.png)"

'
      ECS Unit 4 Challenge Selection_markdown_instruction: |-
        # Challenge Overview
        > What's your Challenge? \r
        \r
        ## Enter the lesson you selected for your
        challenge in the text box below.\r
        \r
        New to Programming?\r
        \r
        - Day 2-3:
        Scratch - Name Project\r
        - Day 4: Scratch - Knock Knock Joke\r
        - Day 5-6:
        Scratch - Moving Sprites \r
        \r
        New to Scratch:\r
        \r
        - Day 7-8: Scratch
        - Event Driven Programming\r
        - Day 9: Scratch - Broadcast Roleplay\r
        - Day
        10-13: Scratch - Broadcasting\r
        \r
        Some Experience with Scratch and Programming:\r
        \r
        -
        Day 18, 19: Rock Paper Scissors and Timer\r
        - Day 20-23: Scratch - Timing
        Game\r
        - Day 25-30: Unit Final Project\r
        \r
        \r
        \r
        Now that you've selected
        a lesson, head to the forum and **share which lesson you plan to complete**
        for your challenge.\r
        \r
        #### <a href="http://forum.code.org/c/ecs/ecs-unit4"
        target=_blank>Forums <i class="fa fa-external-link" /></a>
      ECS Unit 4 Challenge Submission_markdown_instruction: |-
        # Submit a Link\r
        \r
        ##  Share
        your Artifacts and Advice\r
        **Head to the forum** and share: \r
        \r
        - Any
        data visualization or other artifact you created in doing the \r
         - Use the
        “SHARE” button in code studio to get a link to your program:   \r
        - The assessment
        question or extending learning activity that you produced for this lesson.\r
        -
        Notes for others who are going to teach this lesson. This should include:
        \r
         - Advice for someone who is going to teach this lesson (consider what
        was challenging about doing the lesson, what you think students will struggle
        with, etc).\r
         - What ideas do you have about how to structure and teach
        this lesson? what modifications do you plan to make to the lesson?\r
         - What
        additional resources (if any) might be helpful in teaching this lesson\r
        \r
        \r
        <hr>\r
        ###
        <a href= "http://forum.code.org/c/ecs/ecs-unit4" target=_blank> Head to
        the Forum >></a>\r
        <hr>\r
        \r
        ## Check out what others have posted! \r
        Once
        you've posted your own challenge results, check out what others have posted!
        Be sure to click through the other lessons as well and read through their
        work. Remember, a big goal here is to learn from one another so let people
        know when your find their suggestions helpful, or provide your own ideas when
        you come across questions. Be sure to use the **heart** feature on the forum
        to vote for posts you find particularly useful! \r
        \r
        <br/><br/>\r
        \r
        ##  Submit
        the Link for your Forum Post for Review\r
        \r
        If you would like to receive
        payment for this online PD, please submit a link to that forum post here so
        we can review! \r
        \r
        In order to get a direct link to your post, click the
        link icon directly under your post (shown in the picture below):\r
        \r
        ![](https://images.code.org/40fd4bb1aa4f50cfb0d66bbf7881cd0d-image-1443847364702.png)
      ECS Unit 5 Challenge Selection_markdown_instruction: |-
        # What's your Challenge?
        \r
        \r
        ## Enter the lesson you selected for your challenge in the text box
        below.\r
        \r
        - Day 1 - 3: Room data project, set up final project\r
        - Day
        4 - 5: Developing research questions\r
        - Day 6 - 7: Building group norms\r
        -
        Day 8: Check in Day\r
        - Day 9 - 11: Maps, identifying variables, subsetting
        data, sorting data, frequency of types.\r
        - Day 12: Bubble Charts\r
        - Day
        13: Review: Bubble Charts\r
        - Day 14 - 15: Bar Plots\r
        - Day 16: Mosaic
        Plots\r
        - Day 17: Review: Bar and Mosaic Plots\r
        - Day 18 - 20: Mean, Median,
        Minimum, Maximum, Histograms, Box Plots\r
        - Day 21: Review: Mean, Median,
        Minimum, Maximum\r
        - Days 22 - 24: Filtering Text data (remove punctuation,
        remove case, remove stop words, stemming), Analyzing word counts.\r
        - Day
        25: Review: Text Data\r
        - Day 26 - 27: Incorporate  data techniques into
        final project\r
        - Day 28 - 29: Build project presentations\r
        - Day 30: Present
        final project\r
        \r
        Now that you've selected a lesson, head to the forum
        and **share which lesson you plan to complete** for your challenge.\r
        \r
        ####
        <a href="http://forum.code.org/c/ecs/ecs-unit5" target=_blank>Forums <i
        class="fa fa-external-link" /></a>
      ECS Unit 5 Challenge Submission_markdown_instruction: |-
        # Submit a Link\r
        \r
        ##  Share
        your Artifacts and Advice\r
        **Head to the forum** and share: \r
        \r
        - Any
        data visualization or other artifact you created in doing the \r
         - Use the
        “SHARE” button in code studio to get a link to your program:   \r
        - The assessment
        question or extending learning activity that you produced for this lesson.\r
        -
        Notes for others who are going to teach this lesson. This should include:
        \r
         - Advice for someone who is going to teach this lesson (consider what
        was challenging about doing the lesson, what you think students will struggle
        with, etc).\r
         - What ideas do you have about how to structure and teach
        this lesson? what modifications do you plan to make to the lesson?\r
         - What
        additional resources (if any) might be helpful in teaching this lesson\r
        \r
        \r
        <hr>\r
        ###
        <a href= "http://forum.code.org/c/ecs/ecs-unit5" target=_blank> Head to
        the Forum >></a>\r
        <hr>\r
        \r
        ## Check out what others have posted! \r
        Once
        you've posted your own challenge results, check out what others have posted!
        Be sure to click through the other lessons as well and read through their
        work. Remember, a big goal here is to learn from one another so let people
        know when your find their suggestions helpful, or provide your own ideas when
        you come across questions. Be sure to use the **heart** feature on the forum
        to vote for posts you find particularly useful! \r
        \r
        <br/><br/>\r
        \r
        ##  Submit
        the Link for your Forum Post for Review\r
        \r
        If you would like to receive
        payment for this online PD, please submit a link to that forum post here so
        we can review! \r
        \r
        In order to get a direct link to your post, click the
        link icon directly under your post (shown in the picture below):\r
        \r
        ![](https://images.code.org/40fd4bb1aa4f50cfb0d66bbf7881cd0d-image-1443847364702.png)
      ECS Unit 6 Challenge Selection_markdown_instruction: |-
        # Unit 6 Challenge Selection\r
        \r
        ##
        Enter the lesson you selected for your challenge in the text box below.\r

        \r
        From the curriculum\r
        \r
        - Day: 1 What is a robot / what makes a computer
        robotic?\r
        - Days: 2-3 Evaluate robot body designs and  algorithms that control
        robot behavior\r
        - Day: 4 Set up the Lego kit\r
        - Day: 5 Build robot base\r
        -
        Day: 6-7 Introduce NXT brick features\r
        - Day: 8-9 Introduce NXT software\r
        -
        Day: 10-13 Program robot using tutorials (using sensors for input)\r
        - Day:
        14 Describe RoboCup & RoboCupJunior\r
        - Day: 15 Human robot tic-tac-toe\r
        -
        Days: 16-18 Program dancing robot\r
        - Days 19-23 Program rescue robot\r
        -
        Days 24-33 Final projects and presentations\r
        \r
        Alternative Topics\r
        \r
        -
        Online simulations\r
        - Physical computing options\r
        - Projects and portfolios\r
        \r
        Now
        that you've selected a challenge topic, **share what you plan to do** for
        your challenge.\r
        \r
        #### <a href="http://forum.code.org/c/ecs/ecs-unit6"
        target=_blank>Head to the Forums <i class="fa fa-external-link-square" /></a>
      ECS Unit 6 Challenge Submission_markdown_instruction: |-
        # Submit a Link\r
        \r
        ##  Share
        your Artifacts and Advice\r
        **Head to the forum** and share: \r
        \r
        - Any
        data visualization or other artifact you created in doing the \r
         - Use the
        “SHARE” button in code studio to get a link to your program:   \r
        - The assessment
        question or extending learning activity that you produced for this lesson.\r
        -
        Notes for others who are going to teach this lesson. This should include:
        \r
         - Advice for someone who is going to teach this lesson (consider what
        was challenging about doing the lesson, what you think students will struggle
        with, etc).\r
         - What ideas do you have about how to structure and teach
        this lesson? what modifications do you plan to make to the lesson?\r
         - What
        additional resources (if any) might be helpful in teaching this lesson\r
        \r
        \r
        <hr>\r
        ###
        <a href= "http://forum.code.org/c/ecs/ecs-unit6" target=_blank> Head to
        the Forum >></a>\r
        <hr>\r
        \r
        ## Check out what others have posted! \r
        Once
        you've posted your own challenge results, check out what others have posted!
        Be sure to click through the other lessons as well and read through their
        work. Remember, a big goal here is to learn from one another so let people
        know when your find their suggestions helpful, or provide your own ideas when
        you come across questions. Be sure to use the **heart** feature on the forum
        to vote for posts you find particularly useful! \r
        \r
        <br/><br/>\r
        \r
        ##  Submit
        the Link for your Forum Post for Review\r
        \r
        If you would like to receive
        payment for this online PD, please submit a link to that forum post here so
        we can review! \r
        \r
        In order to get a direct link to your post, click the
        link icon directly under your post (shown in the picture below):\r
        \r
        ![](https://images.code.org/40fd4bb1aa4f50cfb0d66bbf7881cd0d-image-1443847364702.png)
      ECSPD Binary Odometer_markdown_instruction: |
        # Binary Odometer Widget\r
        \r
        This
        widget was created as part of the Code.org Computer Science Principles class.
        It is a great additional resource for teaching binary!\r
      ECSPD Fence post Q1_markdown_instruction: |
        ## Fence Post Problem:

        You need
        to build one side of a fence that is 12 yards long. This fence will be built
        with fence posts and rails that connect one fence post to another. If each
        fence post is 1 yard away from the next fence post, how many fence posts will
        be needed for this side of the fence? How many fence posts will be needed
        for a side of a fence that is N (where N > 0) yards long?
      ECSPD Handshake Q1_markdown_instruction: |
        ## Handshake Problem #1:

        Assume
        there are 20 people in a room, including you. You must shake hands with everyone
        else in the room. How many hands will you shake? If there are N (where N>0)
        people in the room, how many hands will you shake?
      ECSPD Online U1D1-2 Assessment 1_markdown_instruction: |
        Did you have coffee
        this morning? If you did, odds are you used a computer. If you made the coffee
        yourself, your coffee maker probably had a digital clock or a programmable
        timer. If you bought it, the barista likely used a card reader with an electronic
        cash register to take your payment. Think through your day and record how
        many computers you used before sitting down in front of a desktop or a laptop
        (or whatever device you are using right now). Don't forget the computers
        in your car, your refrigerator, your alarm clock...
      ECSPD Online U1D1-2 Reflection_markdown_instruction: |
        You have experienced
        the lesson both online and on the first day of the in-person PD. Additionally,
        you have watched a video defining computers. What have you learned that you
        can take back to your classroom? Use this space to record your ideas for this
        lesson. You will have a chance to share your ideas and questions in a forum
        in the following level.
      ECSPD Online U1D10 Reflection_markdown_instruction: |-
        You have experienced the
        lesson both online and on the first day of the in-person PD. Additionally,
        you have watched a TED talk about the representation of data. What have you
        learned that you can take back to your classroom? Use this space to record
        your ideas for this lesson. You will have a chance to share your ideas and
        questions in a forum in the following level.
      ECSPD Online U1D11-14 Reflection_markdown_instruction: |
        You have experienced
        part of this lesson online and have investigated other design tools. What
        have you learned that you can take back to your classroom? How will you tackle
        this lesson's unique challenges? Use this space to record your ideas for
        this lesson. You will have a chance to share your ideas and questions in a
        forum in the following level.
      ECSPD Online U1D15-16 Reflection_markdown_instruction: |-
        You have experienced
        the lesson on the first day of the in-person PD and have watched a TED talk
        about the extent of the use of algorithms in the world. What have you learned
        that you can take back to your classroom? Use this space to record your ideas
        for this lesson. You will have a chance to share your ideas and questions
        in a forum in the following level.
      ECSPD Online U1D17-19 Assessment_markdown_instruction: |-
        Take some time to look
        over the lesson and the unplugged activity. Think about your classroom and
        the space you have available to run the Turing Test Activity. How are you
        planning to set up your classroom to best facilitate the Turing Test Activity?
      ECSPD Online U1D17-19 Reflection_markdown_instruction: |-
        This is the last lesson
        in the unit. How does it combine what was covered previously in the unit?
        Now that you have taken time to examine this lesson, what have you learned
        that you can take back to your classroom? Use this space to record your ideas
        for this lesson. You will have a chance to share your ideas and questions
        in a forum in the following level.
      ECSPD Online U1D3-4 Reflection_markdown_instruction: "You have experienced\npart
        of this lesson online and studied the components of computers. What have\nyou
        learned that you can take back to your classroom? Use this space to record\nyour
        ideas for this lesson. You will have a chance to share your ideas and\nquestions
        in a forum in the following level. "
      ECSPD Online U1D5-7 Reflection_markdown_instruction: |-
        You have experienced
        this lesson in person and have examined additional resources online. What
        have you learned that you can take back to your classroom? Use this space
        to record your ideas for this lesson. You will have a chance to share your
        ideas and questions in a forum in the following level.
      ECSPD Online U1D8-9 Assessment_markdown_instruction: |-
        List three points either
        from the articles or the lesson plan that you would want to discuss with your
        class. Describe one strategy you plan to use to facilitate discussion.
      ECSPD Online U1D8-9 Reflection_markdown_instruction: |-
        You have experienced
        part of this lesson online and have read a few articles regarding the impact
        of computers and the internet on communication. What have you learned that
        you can take back to your classroom? Use this space to record your ideas for
        this lesson. You will have a chance to share your ideas and questions in a
        forum in the following level.
      ECSPD Online U1Reflection_markdown_instruction: "## Telling the story of Unit\n1\n\nNow
        that you've explored all of the lessons and resources from Unit\n1, how would
        you describe the learning that happens? \n\nIn a few sentences,\ntell the
        story of Unit 1, how the lessons relate and build off one another,\nand what
        students will walk away with.\n"
      ECSPD PD goals_markdown_instruction: |+
        ***Now that you've learned more about
        the ECS Professional Development, let's consider your goals***

        <br>
        <br>
        __What
        are your personal goals for your ECS PD experience (what do you hope to accomplish,
        how do you hope to grow)?__ *NOTE: These goals might change over time, and
        we'll revisit this your response as we go through the course so we can check
        in on how we're progressing towards those goals.*


      ECSPD Personal Problem Solving Strategies_markdown_instruction: |
        # Problem
        Solving Strategies
        ### Make a list of Problem Solving Strategies

        We have
        all learned different problem solving strategies through out our lives. Some
        work all the time and others only in certain situations. Make a list of all
        the problem solving strategies you can think of. You will continue to add
        to this list over the course of this unit PD. You can also share strategies
        or find new strategies on the forum.

        ### <strong><a href="http://forum.code.org/t/pd-discussion-topic-problem-solving-strategies/2086/1"
        target="_blank">Problem Solving Strategies>></a></strong>
        <br>

        **Each
        time you see this page pop up think about the problem solving strategies you
        and your students will need for the current lesson. Then add to the list if
        you think of new things.**
      ECSPD course goals_markdown_instruction: |
        # Documenting Your Course Goals\r
        \r
        ##
        Now that you know more about the ECS curriculum, let's consider your goals\r
        \r
        **What
        are your goals for your ECS class?** *These goals will change over time, and
        we'll revisit this your response as we go through PD so we can check in on
        how we're progressing towards those goals.*\r
        \r
        **NOTE:** remember you
        can change the size of the text box by clicking and dragging the bottom-right
        corner of the box.\r
      ECSPD impact in program_markdown_instruction: |2


        #### What connections do
        you think might exist between the ideas covered in the videos you just watched
        and the units of ECS that you learned about earlier?
      ECSPD program overlap_markdown_instruction: |2

        #### Now that you've read more
        about the ECS program, what relationship do you see between the curriculum
        and Professional Development? What aspects of the two piece of the program
        seem most important or interesting to you?
      ECSPD strategies_markdown_instruction: |
        # Classroom Strategies Journal\r
        \r
        This
        space is your **digital journal for documenting strategies** you've picked
        up during Professional Development and while teaching the course. We'll revisit
        this in online pd for each unit, and you should refer back to it while planning
        lessons to remind yourself of strategies you want to try in class. \r
        \r
        \r
      ECSPD your goals_markdown_instruction: |
        __What are your goals for your ECS
        class?__ *These goals will change over time, and we'll revisit this your
        response as we go through the course so we can check in on how we're progressing
        towards those goals.*
      ECSPD3-u5 pick a challenge_markdown_instruction: |-
        # Challenge Overview > What's
        your Challenge? \r
        \r
        ## Enter the lesson you selected for your challenge
        in the text box below.\r
        \r
        - Day 1 - 3: Room data project, set up final
        project\r
        - Day 4 - 5: Developing research questions\r
        - Day 6 - 7: Building
        group norms\r
        - Day 8: Check in Day\r
        - Day 9 - 11: Maps, identifying variables,
        subsetting data, sorting data, frequency of types.\r
        - Day 12: Bubble Charts\r
        -
        Day 13: Review: Bubble Charts\r
        - Day 14 - 15: Bar Plots\r
        - Day 16: Mosaic
        Plots\r
        - Day 17: Review: Bar and Mosaic Plots\r
        - Day 18 - 20: Mean, Median,
        Minimum, Maximum, Histograms, Box Plots\r
        - Day 21: Review: Mean, Median,
        Minimum, Maximum\r
        - Days 22 - 24: Filtering Text data (remove punctuation,
        remove case, remove stop words, stemming), Analyzing word counts.\r
        - Day
        25: Review: Text Data\r
        - Day 26 - 27: Incorporate  data techniques into
        final project\r
        - Day 28 - 29: Build project presentations\r
        - Day 30: Present
        final project\r
        \r
        Now that you've selected a lesson, head to the forum
        and **share which lesson you plan to complete** for your challenge.\r
        \r
        ####
        <a href="http://forum.code.org/c/ecs/ecs-unit5" target=_blank>Forums <i
        class="fa fa-external-link" /></a>
      ECSPD3-u5 submit forum link_markdown_instruction: 'Submit Link\r\n\r\n##  Submit
        the Link for your Forum Post for Review\r\n\r\nYou''ve just shared your Challenge
        work on the forum. If you would like to receive payment for this online PD,
        please submit a link to that forum post here so we can review! \r\n\r\nIn
        order to get a direct link to your post, click the link icon directly under
        your post (shown in the picture below):\r\n\r\n![](https://images.code.org/40fd4bb1aa4f50cfb0d66bbf7881cd0d-image-1443847364702.png)"

'
      ECSPD3-u5 submit_markdown_instruction: |-
        # Share Out and Submit > Submit Link\r
        \r
        ##  Submit
        the Link for your Forum Post for Review\r
        \r
        You've just shared your Challenge
        work on the forum. If you would like to receive payment for this online PD,
        please submit a link to that forum post here so we can review! \r
        \r
        In
        order to get a direct link to your post, click the link icon directly under
        your post (shown in the picture below):\r
        \r
        ![](https://images.code.org/40fd4bb1aa4f50cfb0d66bbf7881cd0d-image-1443847364702.png)
      ECSPD3-u6 pick a challenge_markdown_instruction: |-
        # Unit 6 Challenge > What's
        your Challenge?\r
        \r
        ## Enter the lesson you selected for your challenge
        in the text box below.\r
         \r
        From the curriculum\r
        \r
        - Day: 1 What is
        a robot / what makes a computer robotic?\r
        - Days: 2-3 Evaluate robot body
        designs and  algorithms that control robot behavior\r
        - Day: 4 Set up the
        Lego kit\r
        - Day: 5 Build robot base\r
        - Day: 6-7 Introduce NXT brick features\r
        -
        Day: 8-9 Introduce NXT software\r
        - Day: 10-13 Program robot using tutorials
        (using sensors for input)\r
        - Day: 14 Describe RoboCup & RoboCupJunior\r
        -
        Day: 15 Human robot tic-tac-toe\r
        - Days: 16-18 Program dancing robot\r
        -
        Days 19-23 Program rescue robot\r
        - Days 24-33 Final projects and presentations\r
        \r
        Alternative
        Topics\r
        \r
        - Online simulations\r
        - Physical computing options\r
        - Projects
        and portfolios\r
        \r
        Now that you've selected a challenge topic, **share
        what you plan to do** for your challenge.\r
        \r
        #### <a href="http://forum.code.org/c/ecs/ecs-unit6"
        target=_blank>Head to the Forums <i class="fa fa-external-link-square" /></a>
      ECSPD3-u6 submit forum link_markdown_instruction: 'Submit Link\r\n\r\n##  Submit
        the Link to your Forum Post for Review\r\n\r\nYou''ve just shared your Challenge
        work on the forum. If you would like to receive payment for this online PD,
        please submit a link to that forum post here so we can review!\r\n\r\nIn order
        to get a direct link to your post, click the link icon directly under your
        post (shown in the picture below): \r\n\r\n![](https://images.code.org/40fd4bb1aa4f50cfb0d66bbf7881cd0d-image-1443847364702.png)"

'
      ECSU2 Challenge Submission_markdown_instruction: 'Submit Link\r\n\r\n##  Share
        your Artifacts and Advice\r\n**Head to the forum** and share: \r\n\r\n- Any
        data visualization or other artifact you created in doing the \r\n - Use the
        “SHARE” button in code studio to get a link to your program:   \r\n- The assessment
        question or extending learning activity that you produced for this lesson.\r\n-
        Notes for others who are going to teach this lesson. This should include:
        \r\n - Advice for someone who is going to teach this lesson (consider what
        was challenging about doing the lesson, what you think students will struggle
        with, etc).\r\n - What ideas do you have about how to structure and teach
        this lesson? what modifications do you plan to make to the lesson?\r\n - What
        additional resources (if any) might be helpful in teaching this lesson\r\n\r\n\r\n<hr>\r\n###
        <a href= \"http://forum.code.org/c/ecs/ecs-unit2\" target=_blank> Head to
        the Forum >></a>\r\n<hr>\r\n\r\n## Check out what others have posted! \r\nOnce
        you''ve posted your own challenge results, check out what others have posted!
        Be sure to click through the other lessons as well and read through their
        work. Remember, a big goal here is to learn from one another so let people
        know when your find their suggestions helpful, or provide your own ideas when
        you come across questions. Be sure to use the **heart** feature on the forum
        to vote for posts you find particularly useful! \r\n\r\n<br/><br/>\r\n\r\n##  Submit
        the Link for your Forum Post for Review\r\n\r\nIf you would like to receive
        payment for this online PD, please submit a link to that forum post here so
        we can review! \r\n\r\nIn order to get a dirct link to your post, click the
        link icon directly under your post (shown in the picture below):\r\n\r\n![](https://images.code.org/40fd4bb1aa4f50cfb0d66bbf7881cd0d-image-1443847364702.png)"

'
      ECSU3 Challenge Submission_markdown_instruction: 'Submit Link\r\n\r\n##  Submit
        the Link for your Forum Post for Review\r\n\r\nYou''ve just shared your Challenge
        work on the forum. If you would like to receive payment for this online PD,
        please submit a link to that forum post here so we can review! \r\n\r\nIn
        order to get a dirct link to your post, click the link icon directly under
        your post (shown in the picture below):\r\n\r\n![](https://images.code.org/40fd4bb1aa4f50cfb0d66bbf7881cd0d-image-1443847364702.png)"

'
      ECSU4 Challenge Submission fin_markdown_instruction: |-
        # Share Out and Submit
        > Submit Link\r
        \r
        ##  Submit the Link for your Forum Post for Review\r
        \r
        You've
        just shared your Challenge work on the forum. If you would like to receive
        payment for this online PD, please submit a link to that forum post here so
        we can review! \r
        \r
        In order to get a direct link to your post, click the
        link icon directly under your post (shown in the picture below):\r
        \r
        ![](https://images.code.org/40fd4bb1aa4f50cfb0d66bbf7881cd0d-image-1443847364702.png)
      Escape Room Example_markdown_instruction: |-
        # Room Escape\r
        \r
        In today's
        workshop you are going to be working on making a room escape app!  This level
        has an example app that you should play around with to get the feel for what
        you will be creating.\r
        \r
        # Do This\r
        \r
        * Click RUN to start the app\r
        *
        Try to find the key that will open the door.
      Eval Booleans 1_markdown_instruction: |-
        Boolean operators (like >, <, =) allow
        us to compare different values, returning either *true* or *false*. Click
        "Run" to see how this expression evaluates.
      Eval Booleans 2_markdown_instruction: |-
        Can you set the values so that this
        expression evaluates as *true*?
      Eval Booleans 3_markdown_instruction: |-
        The `string-length` function returns
        the number of characters in a string (including spaces!) - make this code
        evaluate to *true*.
      Eval Booleans 4_markdown_instruction: |-
        Here's an Evaluation Block called `and`
        - it returns *true* if both of its parameters are *true*, otherwise it returns
        *false*. Edit the x variable so that this expression returns *true*.
      Eval Booleans 5_markdown_instruction: |-
        This `or` block returns *true* if either
        of its parameters is *true*. Otherwise, if both parameters are *false* it
        will return *false*. Set the y variable to a value that will cause this expression
        to return *false*.
      Eval Booleans 6_markdown_instruction: |-
        Here's one more boolean block called
        `not`. This block flips *true* to *false*, or *false* to *true*. If you wrap
        this block of code in a NOT block, it should return *true* (because we are
        asking if the two expressions do NOT produce equal values).
      Eval Booleans Free Play_markdown_instruction: |-
        Free Play: Try out some creations
        of your own using Booleans.
      Eval Cond 4_markdown_instruction: |-
        We can use the `string=?` function to make
        conditionals that respond to text input. Here's a function called `green
        shape` that takes a string for the type of shape. Complete the conditions
        so that the correct solid green shape is returned when the function is run
        with "circle", "triangle", "square", or "rectangle".
      Eval Cond 5_markdown_instruction: |-
        Here's a similar function `red shape` with
        an additional variable for size. Complete the conditionals so the correct
        solid red image of a given size is drawn for "circle", "triangle", and
        "star".
      Eval Contracts 4_markdown_instruction: |-
        The `scale` function returns an image
        that is either larger or smaller than the input image. Try scaling this circle
        by a factor of 10. How is the returned image different than if you'd just
        made a circle of that size in the first place?
      Eval Contracts A_markdown_instruction: |-
        Use the `star` function to produce
        a solid red star with a 60 pixel radius
      Eval Contracts C_markdown_instruction: |-
        Check out the `rotate` function - can
        you use it to rotate this 90 pixel green square by 45 degrees?
      Eval Contracts E_markdown_instruction: |-
        Try using the `text` function to write
        this "Hello, world!" in teal at size 40.
      Eval Define Funcs 1_markdown_instruction: |-
        Here's a new function called `green-triangle`
        that takes a single Number for size and produces a green triangle. Use the
        new function to create a 125 pixel green triangle
      Eval Define Funcs 2_markdown_instruction: |-
        Let's look inside that `green-triangle`
        function to see how it works. Can you modify it so that the `green-triangle`
        function always draws outlined green triangles? **Don't forget to change
        the examples too!**
      Eval Define Funcs 3_markdown_instruction: |-
        Here's the start of another new
        function called `purple-circle` with a domain of one Number (the radius) and
        a range of Image. The body of the function is broken though, it always draws
        a circle of 50 pixel radius instead of using the radius parameter. Replace
        the current Number with the `radius` block from the domain.\r
        \r
        When you've
        fixed the function, test your new function with a 150 pixel radius.
      Eval Define Funcs 4_markdown_instruction: |-
        Create a new function called `aqua-star`
        that has a Domain of a single Number for radius and returns an aqua star of
        the given radius. Run your new function with a radius of 75.
      Eval Define Funcs 5_markdown_instruction: |-
        Let's use that `aqua-star` function
        to make a row of different sized stars. From left to right, the stars should
        have radii of 25, 50, and 75.
      Eval Define Funcs Test_markdown_instruction: |-
        Here's the start of another
        new function called `purple-circle` with a domain of one Number (the radius)
        and a range of Image. The body of the function is broken though, it always
        draws a circle of 50 pixel radius instead of using the radius parameter. Replace
        the current Number with the `radius` block from the domain.\r
        \r
        When you've
        fixed the function, test your new function with a 150 pixel radius.
      Eval Defining Vars Free Play 1_markdown_instruction: |-
        Free Play: We've provided
        a function that fills your screen with `my-image`. Change `my-image` to see
        what patterns you can make.
      Eval Design Recipe .1_markdown_instruction: |-
        Here's a Design Recipe for a
        function called `square-circle` with domain Number String and range Image.
        Click Edit to write the function definition (you will see two examples provided).
      Eval Design Recipe 3_markdown_instruction: |-
        The Design Recipe for `wide-rect`
        already has a contract and one example. Can you write a second example and
        then complete the definition? The `wide-rect` function should produce a rectangle
        of given color that is twice as wide as it is high.
      Eval Design Recipe 4_markdown_instruction: |-
        Use the Design Recipe to create
        a function `starburst`. When given a number of points and an outer radius,
        `starburst` returns a yellow radial star with given points, and an inner radius
        that is half the outer radius.
      Eval Design Recipe 5_markdown_instruction: |-
        Write a function `striped-flag`
        that takes two colors and produces a flag that is 250 pixels wide, 150 pixels
        tall, with three even horizontal stripes of given colors, in the order color2,
        color1, color2.
      Eval Design Recipe 6_markdown_instruction: |-
        Write a function `large-polygon`
        that should output a solid polygon of given sides and color that takes up
        most of the window, regardless of the number of sides. To make sure that the
        polygon doesn't get too large as you increase the number of sides, side length
        should be inversely proportional to side number, with a length of **(800/sides)**.
      Eval Design Recipe Free Play_markdown_instruction: |-
        Free Play: Use the Design
        Recipe to create some functions of your own design
      Eval Strings Images .1_markdown_instruction: |-
        So far we've only dealt with
        a single type of data, Numbers. Another type of data is a String, which is
        any combination of letters, numbers, or other characters wrapped in quotation
        marks. Run the String "Hello, world!" and see what happens.
      Eval Strings Images .2_markdown_instruction: |-
        The `string-append` function
        takes two Strings and returns a single combined String. Add a String "Universe"
        to the second argument of `string-append`.
      Eval Strings Images 1_markdown_instruction: |-
        The third type of data we're
        going to use is an Image. This `star` function takes in a Number and two Strings,
        and it evaluates to an Image. Use this function to make a solid red star with
        radius of 100.
      Eval Strings Images 2_markdown_instruction: |-
        Free Play: Every Evaluation Block
        is color-coded to let you know which data type it returns and which types
        it needs for its parameters. The last parameter of the triangle function takes
        a String that controls its color - try some different colors to see what works.
      Eval Strings Images 3_markdown_instruction: |-
        Some functions can only take a
        specific set of Strings, such as the second argument of this `circle` function,
        which controls its style. Draw this orange outline circle using the special
        String block with a dropdown to make sure you only use valid styles.
      Eval Strings Images 4_markdown_instruction: |-
        Try using the `rectangle` block
        to draw this solid, red rectangle - it is 175 pixels wide and 100 pixels tall.
      Eval Strings Images 5_markdown_instruction: |-
        Try using this new Evaluation
        Block called `overlay` to place a 100 pixel white triangle on top of a 200
        pixel red circle.
      Eval Strings Images 6_markdown_instruction: |-
        Use the overlay block to place
        a 75 pixel radius yellow star on top of a 150 pixel long blue square.
      Eval Strings Images 7_markdown_instruction: |-
        The `offset` block lets you move
        an image relative to where it would normally be placed. Use this block to
        offset the square by 100 pixels on the y-axis.
      Eval Strings Images 8_markdown_instruction: |-
        Here's a different kind of star
        block - it's called `radial-star` and it allows you to draw stars with any
        number of points! Use it to create a 7 point solid orange star with an inner
        radius of 75 pixels and an outer radius of 175 pixels.
      Eval Strings Images Free Play_markdown_instruction: |-
        Free Play: Explore the
        blocks available to create something interesting. Make sure to share your
        favorite creations.
      Final Personal Website - OLD_markdown_instruction: |-
        # Personal Website\r
        \r
        This
        is it! You have been working on your Personal Website for the whole unit.
        Put the finishing touches on it and submit it to your teacher! Remember to
        use the problem solving process as your guide in preparing your final product.\r
        \r
        #
        Do This\r
        \r
        * Define: Read the rubric so you know what is expected\r
        *
        Plan: Decide what you still need to work on and put those things in priority
        order\r
        * Try: Implement your improvements to your personal website.\r
        *
        Reflect: Get feedback from a classmate and decide what of that feedback to
        act on.\r
        \r
        Don't forget to take a screenshot of your home page and save
        it somewhere on your computer so you can find it later (*Need help with how
        to screenshot? Check out this <a href="http://www.take-a-screenshot.org/">website
        </a>.*)
      Final Personal Website_markdown_instruction: |-
        # Personal Website\r
        \r
        This
        is it! You have been working on your Personal Website for the whole unit.
        Put the finishing touches on it and submit it to your teacher! Remember to
        use the problem solving process as your guide in preparing your final product.\r
        \r
        #
        Do This\r
        \r
        * Define: Read the rubric so you know what is expected\r
        *
        Plan: Decide what you still need to work on and put those things in priority
        order\r
        * Try: Implement your improvements to your personal website.\r
        *
        Reflect: Get feedback from a classmate and decide what of that feedback to
        act on.\r
        \r
        Don't forget to take a screenshot of your home page and save
        it somewhere on your computer so you can find it later (*Need help with how
        to screenshot? Check out this <a href="http://www.take-a-screenshot.org/">website
        </a>.*)
      Final Personal Website_2018_markdown_instruction: |-
        # Personal Website\r
        \r
        This
        is it! You have been working on your Personal Website for the whole unit.
        Put the finishing touches on it and submit it to your teacher! Remember to
        use the problem solving process as your guide in preparing your final product.\r
        \r
        #
        Do This\r
        \r
        * Define: Read the rubric so you know what is expected\r
        *
        Plan: Decide what you still need to work on and put those things in priority
        order\r
        * Try: Implement your improvements to your personal website.\r
        *
        Reflect: Get feedback from a classmate and decide what of that feedback to
        act on.\r
        \r
        Don't forget to take a screenshot of your home page and save
        it somewhere on your computer so you can find it later (*Need help with how
        to screenshot? Check out this <a href="http://www.take-a-screenshot.org/">website
        </a>.*)
      Final Room Escape App_markdown_instruction: |-
        # You've done it!\r
        \r
        You
        made a room escape! Now its time to customize it. \r
        \r
        Consider:\r
        \r
        *
        Add more style to the room\r
        * Adding more things users can interact with
        in the room\r
        * Try to make your secret code random\r
        * Adding more rooms
      Finalize Your Chaser Game v.1_markdown_instruction: |
        # Add an Image and Make
        a Chaser Game!\r
        <img src="https://images.code.org/ed1e9852b33ca368cf8cd8e0b0159de7-image-1444336815528.gif"
        style="float: right">\r
        \r
        **Now You Try it** - add an image to your app
        and modify the code so that the image jumps around the screen rather than
        the button.  Your little game should have:\r
        \r
        * **Text** on the top of
        the screen with a title or instructions for what to do.\r
        * **An image**
        that "runs away" (moves randomly) based on some mouse event.\r
        \r
        **Tips:**\r

        * **Hint** - the easy way to do this is to simply change the IDs in `onEvent`
        and `setPosition` to respond to the image instead of the button.\r
         * Remove
        the button from the app after the image is working.  We don't need it anymore.\r

        * Change the label text so that the instructions make sense for your game.\r

        * The game is even more fun if you use  the `mouseover` event instead of `click`\r
        \r
        **Optional
        Extensions**:\r
         * Make the background interesting\r
         * Add another image
        that runs away.\r
         * See what happens with the commands `hideElement` and
        `showElement`\r
         * Have two UI elements where interacting with one controls
        or does something to the other.\r
        \r
        **Finalize your "Chaser Game v.1"**
        and click Finish.\r
        \r
         * **Note**: We'll revisit this game in the next
        lesson where you can improve it.  This is **just version 1**\r
        \r
      Fish Tank 1_markdown_instruction: |-
        **Make a prediction**: What do you think
        will happen when you run this code?
      Fish Tank 2_markdown_instruction: |-
        We're going to make a fish tank. Change
        the Dusty the tumbleweed to a fish.
      Fish Tank 3_markdown_instruction: |-
        All this spinning is going to make our fish
        dizzy! Change the fish's behavior to make it swim around the tank.
      Fish Tank 4_markdown_instruction: |-
        Our fish tank needs some water! Use the
        `set background color` block to make the background blue.
      Fish Tank 5_markdown_instruction: |-
        Our fish is getting a little lonely. Create
        a new sprite inside the fish tank.
      Fish Tank 6_markdown_instruction: |-
        What do you want your fish’s friend to do?
        Add a behavior and watch them go!
      Fish Tank 7_markdown_instruction: |-
        There are a lot of new blocks in the toolbox.
        Play with them to make your fish tank special.
      Food Fight!_markdown_instruction: |-
        We've added one last function for you.\r
        <hr/>\r
        \r
        <h4>\r
        Use
        an `if` statement to program your game to call the `level_up` function only
        when `player_score` becomes greater than a certain number.<br/><br/>\r
        </h4>\r
        <i>For
        example: `player_score` > 6</i>\r
        \r
        \r
        <hr/>\r
        <i>Play the game, and
        make it to level 3 to move to the next puzzle.</i>
      Formative versus Summative Assessment_markdown_instruction: |-
        The following
        link is a resource that provides definitions and examples of formative and
        summative assessments:
      Frequency Analysis_markdown_instruction: |
        # Break a random substitution cipher!\r
        \r
        Messages
        encrypted with the **Caesar cipher** are very easy to crack. What if instead
        of shifting the whole alphabet, we mapped every letter of the alphabet to
        a random different letter of the alphabet? This is called a **random substitution
        cipher**.\r
        \r
        In this version of the tool, you'll be interacting more
        with the graphs that show letter frequency. By analyzing the frequency of
        the letters in the encrypted input message compared to the frequency of letters
        in a typical piece of English prose, you can start to narrow in on what some
        of the letter mappings might be. Did you know that *'E'* is the most common
        letter used in the English language? Maybe the most common letter in your
        encrypted text maps to the letter *'E'*, but maybe not! You'll have to
        do a bit of guess and check to see if that substitution makes sense.\r
        \r
        \r
        #
        Do this\r
        - Load the **Sample message (hard)** from the message dropdown.
        This will load a message that has been encrypted with a random substitution
        cipher.  \r
        ![](https://images.code.org/04c6230c9607110126581c298bc09183-image-1443569176380.gif)\r
        \r
        -
        You will crack the message by guessing what each letter of the alphabet contained
        in the original ciphertext should be changed to. You can do so by dragging
        the blue letters of the alphabet directly underneath the orange letter you
        want changed in the original ciphertext. Letters that have been changed using
        your guesses will no longer be highlighted orange in the message window on
        the left.\r
        ![](https://images.code.org/da9a7af7568d8c1698872ab91b4d79d7-image-1443572471212.gif)\r
        \r
        -
        Play with some of the sorting options available in the Random substitution
        cipher tab to get different views on the letter frequencies in the input text
        as well as standard English text.\r
        ![](https://images.code.org/82efbca1807206c9a07de520fdb22027-image-1443572614493.23.28.png)\r
        \r
        See
        how long it takes you to crack the cipher! Is this a good method of encrypting
        secret data?\r
        \r
      Function intro Ryan_markdown_instruction: |-
        A **function** named `build bridge`
        is in your workspace.  All of the code you need to cross the river is built
        right in! \r
         \r
        Snap the small, green block twice into your workspace to
        fix the path and get {currentPlayerName} to the Redstone Torch [redstone_torch].
      GLJ_Crawl_Exemplar_1_markdown_instruction: |-
        **Free Play**: Try using what you've
        learned to make something new. Make sure to explore some of the new blocks
        in the toolbox.
      GLJr_Behavior_7_markdown_instruction: |-
        Check out these two new blocks - the
        green "When dog is touching cat" block will run everything attached to it
        when the dog touches the cat, and the "Remove behavior" block removes a
        behavior from a sprite.\r
        \r
        See if you can make both the dog and cat stop
        moving when they run into each other.
      GLJr_Behavior_8_markdown_instruction: |-
        The cat and dog are so excited to see
        each other that they want to have a dance party. In addition to removing their
        move behaviors when the two sprites touch, add the "dance party" behavior
        so they celebrate!
      GLJr_Behavior_9_markdown_instruction: |-
        **Free Play**: Try using what you've
        learned to make something new. Make sure to explore some of the new blocks
        in the toolbox.
      GLJr_Forever_5_markdown_instruction: |-
        Now we have two sprites! Use a loop to
        make the dog jittery and make the cat wander
      GLJr_Forever_6_markdown_instruction: |-
        Let's try some more movement blocks
        - make the dog run up and make the cat run right.
      GLJr_Forever_7_markdown_instruction: |-
        Check out this new "if-else" block
        - it lets you run one set of code _if_ a condition is true, and a different
        set of code if it's false. Inside it we're using another new block that
        tells you _if_ two sprites are touching.\r
        \r
        See if you can make both the
        dog and cat stop moving when they run into each other.
      GLJr_Forever_8_markdown_instruction: |-
        The cat and dog are so excited to see
        each other that they want to have a dance party. If the two sprites are touching,
        have each run the "dance party" block.
      GLJr_Forever_9_markdown_instruction: |-
        **Free Play**: Try using what you've
        learned to make something new. Make sure to explore some of the new blocks
        in the toolbox.
      'Game Lab Workshop: Random_markdown_instruction': |
        # Randomized Shapes\r
        \r
        Let's
        see how we can use randomization in our drawings. Each of the inputs from
        the shape blocks you've seen can be replaced with calls to `randomNumber()`.
        Try drawing some images that are slightly randomized each time. You might
        try changing the position randomly by using `randomNumber()` in place of the
        x or y inputs, or you could change the size of the shape itself by randomizing
        the length or width inputs.\r
        \r
        # Do This\r
        \r
        Pick a shape command (`ellipse()`,
        `rect()` or `regularPolygon()`) and use `randomNumber()` in place of one or
        more of the inputs. Make sure you run it a few times so you can see the effect
        of randomization.\r
      GameLab Livecode Demo 1_markdown_instruction: |
        # Animating Sprites\r
        \r
        To
        start this demo, we'll do the following:\r
        \r
        1. Create a new sprite with
        the `createSprite()` block\r
        2. Click on the Animation tab and select an
        image for the sprite\r
        3. Set the animation using the `sprite.setAnimation()`
        block\r
        4. Move the sprite by incrementing (slowly increasing) its x and
        y value using the draw loop\r
      GameLab Livecode Demo 2_markdown_instruction: |
        # Move With Keys\r
        \r
        Now
        that we've got a sprite on the screen, let's make it respond to keyboard
        input.\r
        \r
        1. Read through the blocks at lines 14 and 21 - what is going
        on?\r
        2. Add two more conditionals to respond to the up and left keys\r
        3.
        Experiment with some of the additional provided blocks, such as `sprite.scale`
        and `sprite.rotation`\r
      GameLab Livecode Demo 3_markdown_instruction: |
        # Sprite Interactions\r
        \r
        At
        this point there's one sprite on screen, and we can move it around with the
        arrow keys. Now let's add a second sprite and get the two interacting.\r
        \r
        1.
        Add a new animation in the animation tab\r
        2. Create a new sprite called
        "target" and set its animation\r
        3. Use the `sprite.isTouching()` block
        in a conditional to make the target sprite react to the player sprite\r
        \t*
        Make the target sprite shrink or grow\r
            * Make the target move to a random
        location\r
            * Make the target rotate\r
      GameLab Livecode Demo 4_markdown_instruction: |-
        # Make it Your Own\r
        \r
        Now
        that we've created a simple game, take some time to explore the environment
        on your own and add to your game. You'll notice that there are a bunch of
        new blocks available to you in the toolbox - take a look around and try some
        out!
      'GameLab Workshop: Draw Loop Shapes_markdown_instruction': |-
        # Experiment with
        the Draw Loop\r
        \r
        Here's a simple app that we've slowed down by changing
        the _frame rate_ (the number of times the draw loop is run each second).\r
        \r
        With
        a neighbor:\r
        \r
        * Read through the code and discuss what you think it will
        do\r
        * Run and observe the program\r
        * Try reordering the blocks to see
        how it impacts the drawing\r
        \t* Can you make the rectangle appear above
        the circle?\r
            * What happens if you place one of the commands before
        or after the draw loop?\r
            * Try adding some new shapes to the program
      Gamelab AllTheThings Embed Level_markdown_instruction: |-
        # How Many Counter
        Variables?\r
        \r
        You can use counter variables (`x = x + 1` , `x = x - 1`
        , `x = x + 0.5`, etc.) to animate a scene. What happens when scenes start
        to get larger and more complicated? \r
        \r
        Watch this animation. With a partner:
        \r
        \r
        * Decide how many counter variables you would need to create this
        scene\r
        * Decide what you would name your counter variables\r
        * **Draw a
        Labels-Values-Connectors** diagram of your variables at the first frame of
        this scene. Don't worry about getting the values exactly correct.\r
        * Share
        your answer with another group **and be ready to share your ideas with the
        class**
      Geometric Pattern_markdown_instruction: |-
        **Project Idea:** Create a pattern
        using geometric ideas like shapes. This requires persistence and planning!
      Geometric Sun_markdown_instruction: |-
        **Project Idea:** Create a pattern using
        geometric ideas like shapes. This requires persistence and planning!
      Geometric Sun_2018_markdown_instruction: |-
        **Project Idea:** Create a pattern
        using geometric ideas like shapes. This requires persistence and planning!
      Glossary O_markdown_instruction: "## Vocabulary\n\nEncouraging students to\nlearn
        and use 'professional' terms enables them to communicate correctly\nand efficiently
        with others and builds their knowledge such that it can be\nfurther developed
        without having to relearn terms and concepts at a later\ntime. The terms and
        concepts used in the unplugged lessons are defined using\nwords that young
        students can understand.\n\n# TEACHING TIP\nBest practice\nis to introduce
        the terms with easy-to-understand language, relate the terms\nto previous
        experiences, use the terms repeatedly beyond the lesson itself\nthroughout
        the entire course (and in other situations) when appropriate, and\nreinforce
        students' use in oral and written communication.\n\nThe following\nterms are
        introduced in an unplugged lesson as either a Vocabulary word or\nas a term
        related to the online Blockly programming interface. Terms are subsequently\nreinforced
        in the following online puzzles and activities. Most terms appear\nmultiple
        times throughout the courses and lessons providing the students with\nmany
        opportunities to deepen their understanding and assimilate the words\ninto
        conversations, both in and outside of the classroom.\n\nThe course and\nlesson
        numbers after each term indicate the unplugged lessons in which the\nterm
        is emphasized.\n\n# Look through this list of vocabulary words and then\nanswer
        the prompt at the bottom of the page. You don't have to learn all\nthe vocabulary
        words all right now, but you they are here so you can refer\nback them during
        this online course. \n\nabstraction\n\nPulling out specific\ndifferences to
        make one solution work for multiple problems students.\n\n(Course\n3: Lesson
        1)\n\nalgorithm\n\nA list of steps to finish a task. A set of instructions\nthat
        can be performed with or without a computer. For example, the collection\nof
        steps to make a peanut butter and jelly sandwich is an algorithm.\n\n(Course\n1:
        Lessons 1, 6 | Course 2: Lessons 1, 2 | Course 3: Lessons 1, 10)\n\nbinary\n\nA\nway
        of representing information using only two options.\n\n(Course 2: Lesson\n14)\n\nBlockly\n\nThe
        visual programming language used in Code.org's online\nlearning system for
        K-5 students. (Course 1: Lesson 3)\n\nbug\n\nAn error\nin a program that prevents
        the program from running as expected. (Course 2:\nLesson 9)\n\ncode\n\nOne
        or more commands or algorithm(s) designed to be carried\nout by a computer.
        See Program. (Course 1: Lesson 2)\n\ncommand\n\nAn instruction\nfor the computer.
        Many commands put together make up algorithms and computer\nprograms. (Course
        1: Lesson 2)\n\ncomputational thinking\n\nMental processes\nand strategies
        that include: decomposition, pattern matching, abstraction,\nalgorithms (decomposing
        problems into smaller, more manageable problems, finding\nrepeating patterns,
        abstracting specific differences to make one solution\nwork for multiple problems,
        and creating step-by-step algorithms). (Course\n3: Lesson 1)\n\ncomputer science\n\nA
        field in which people use the power\nof computers to solve big problems. (Course
        1: Lesson 2)\n\nconditionals\n\nStatements\nthat only run under certain conditions
        or situations. (Course 2: Lesson 12)\n\ncrowdsourcing\n\nGetting\nhelp from
        a large group of people to finish something faster. (Course 3: Lesson\n19)\n\ndata\n\nQuantities,
        characters, or symbols that are the inputs and\noutputs of computer programs.
        (Course 2: Lesson 14 | Course 3: Lessons 1)\n\ndebugging\n\nFinding\nand fixing
        errors in programs. (Course 2: Lesson 9)\n\ndecompose\n\nBreak\na problem
        down into smaller pieces. (Course 3: Lesson 1)\n\ndigital citizen\n\nSomeone\nwho
        acts safely, responsibly, and respectfully online. (Course 3: Lesson 20)\n\ndigital\nfootprint\n\nThe
        information about someone on the Internet. (Course 2: Lesson\n18)\n\nDNS (domain
        name service)\n\nThe service that translates URLs to IP\naddresses. (Course
        3: Lesson 18)\n\nDSL/cable\n\nA method of sending information\nusing telephone
        or television cables. (Course 3: Lesson 18)\n\nevent\n\nAn\naction that causes
        something to happen. (Course 1: Lesson 15 | Course 2: Lesson\n15)\n\nevent-handler\n\nAn
        action or event that is being constantly monitored\nfor by the computer. When
        you write code for the computer to perform after\nthat an action occurs, that
        code, the event-handler, will run every time the\naction is performed without
        having to put the commands inside of a loop. Many\nevent-handlers are human-initiated.
        For example: an event handler might respond\nwhen the user clicks the mouse
        by making the bird flap its wings. \"When the\nmouse is clicked\" is an event-handler.
        (Course 1: Lesson 15 | Course 2: Lesson\n15)\n\nfiber optic cable\n\nA connection
        that uses light to transmit information.\n(Course 3: Lesson 18)\n\nfunction\n\nA
        piece of code that you can easily call\nover and over again. Functions are
        sometimes called 'procedures.' A function\ndefinition is a segment of code
        that includes the steps performed in the function.\nA function call is the
        code segment, typically within the main logic of the\nprogram, which invokes
        the function. (Course 3: Lesson 4, 9)\n\nInternet\n\nA\ngroup of computers
        and servers that are connected to each other. (Course 1:\nLesson 17 | Course
        3: Lessons 18, 20)\n\nIP address\n\nA number assigned to\nany item that is
        connected to the Internet. (Course 3: Lesson 18)\n\niteration\n\nA\nrepetitive
        action or command typically created with programming loops. (Course\n1: Lesson
        12 | Course 2: Lesson 5)\n\nloop\n\nThe action of doing something\nover and
        over again. (Course 1: Lesson 12 | Course 2: Lesson 5)\n\npackets\n\nSmall\nchunks
        of information that have been carefully formed from larger chunks of\ninformation.
        (Course 3: Lesson 18)\n\npattern matching\n\nFinding similarities\nbetween
        things. (Course 3: Lesson 1)\n\npersistence\n\nTrying again and again,\neven
        when something is very hard. (Course 1: Lesson 9)\n\nprogram\n\nA program\nis
        an algorithm that has been coded into something that can be run by a machine.\n(Course
        1: Lesson 2 | Course 2: Lesson 1 | Course 3: Lesson 10)\n\nrun program\n\nTo\nhave
        the computer execute the commands you've written in your program. (Course\n1:
        Lesson 4)\n\nservers\n\nComputers that exist only to provide things to\nothers.
        (Course 3: Lesson 18)\n\ntoolbox\n\nThe tall grey bar in the middle\nsection
        of Code.org's online learning system where all the commands you can\nuse to
        write your program are displayed. (Course 1: Lesson 4)\n\nURL (universal\nresource
        locator)\n\nAn easy-to-remember address for calling a web page (like\nwww.code.org).
        (Course 3: Lesson 18)\n\nusername\n\nA name you make up so\nthat you can see
        or do things on a website, sometimes called a \"screen name.\"\n(Course 1:
        Lesson 18)\n\nvariable\n\nA placeholder for a piece of information\nthat can
        change. (Course 3: Lesson 4)\n\nWi-Fi\n\nA wireless method of sending\ninformation
        using radio waves. (Course 3: Lesson 18)\n\nworkspace\n\nThe white\narea on
        the right side of Code.org's online learning system where you drag\nand drop
        commands to build your program. (Course 1: Lesson 4)\n\n### What\nis one way
        you can include computer science vocabulary terms in your class?\n"
      Hardware Accessibility_markdown_instruction: |-
        # Hardware Accessibility: Screen
        Size\r
        \r
        Another thing to consider about accessibility for different users
        is the size of the device they are using to view the web page. You can do
        a basic test for this by resizing the view area to see how the website changes
        with the changes in size.\r
        \r
        # Do This\r
        \r
        * Use the dragger to resize
        your preview area to see how your website adapts.\r
        * Shrink the size of
        the instructions area to resize how tall the web page is
      Harvesting_markdown_instruction: |-
        Uh oh, I lost my map and can't remember
        what I planted! Every sprout could grow up to be **corn** ![picture of corn](https://images.code.org/cac3133c40781553a70066a67298b2b5-image-1472493202556.png)
        , **beans** ![picture of beans](https://images.code.org/5e379ff595be17722237d9685b29fd96-image-1472493220871.png)
        , or **pumpkins** ![picture of pumpkin](https://images.code.org/03cf76a978e0788ccb53f14e9d264695-image-1472493237148.png)
        . Can you write some code to pick all the crops, no matter what they are?
      'How to: Setup your Class Data Tracker_markdown_instruction': "## Setting up\nyour
        copy of the Class Data Tracker\\r\n\\r\nThe second chapter of unit 2 dives\ninto
        data collection, analysis, and visualization. Starting in lesson 7 you\nwill
        set up and use a class data tracker, which students will fill out each\nday
        until lesson 13, when they start cleaning the data they've been collecting.\\r\n\\r\nLesson\n7
        includes the following detailed guide that walks you through setting up\nyour
        shared data tracker from the template provided in the curriculum. Feel\nfree
        to check out this instructions and setup your tracker now! "
      'How to: Use Google Trends_markdown_instruction': "## How to Use Google Trends\\r\n\\r\nIn\nlesson
        8, students will use Google Trends as a tool to visualize the relationship\nbetween
        historical google search data. If you're not familiar with Google\nTrends,
        check out the following How-to guide that details how to explore trends\nusing
        the tool! "
      If and If-Else part 1_markdown_instruction: |
        ### Points to pay attention to:\r
        \r
        *
        **NOTE:** Stop play at 1:37.  \r
            It's all you need for the exercises
        that follow.  You'll watch the remainder of the video after that.\r
        \r
        *
        An IF statement can have an else clause, but an ELSE clause cannot exist on
        its own.\r
        * With an else clause you are *guaranteeing* that one of two portions
        of code will run.\r
        \r
      If and If-Else part 2_markdown_instruction: |
        ### Points to pay attention to:\r
        \r
        **Start**
        play at 1:37 \r
        **Stop** play at 2:20\r
        \r
        It's all you need for the exercises
        that follow.  You'll watch the remainder of the video after that.\r
        \r
        *
        An IF statement can have an else clause, but an ELSE clause cannot exist on
        its own.\r
        * With an else clause you are *guaranteeing* that one of two portions
        of code will run.\r
        \r
      Inspirational Artwork_markdown_instruction: |-
        <img src="https://images.code.org/1df195df9d808f0dd539bef0f5c2958b-image-1443049871563.02.54.png"
        width="250px"/>\r
        \r
        **Free-Play Inspiration:** You've now learned everything
        you need to know to make a pattern like this! \r
        \r
        If this picture inspires
        you, try to make something similar. Otherwise, create something all your own.\r
        \r
        Notice:
        We've used the `set alpha` block to make the "petals" fade toward the outside.
      InspirationalArtwork_markdown_instruction: |-
        You've now learned everything
        you need to know to make a pattern like this! \r
        \r
        If this picture inspires
        you, try to make something similar. Otherwise, create something all your own.
      InspirationalArtwork_2018_markdown_instruction: |-
        You've now learned everything
        you need to know to make a pattern like this! \r
        \r
        If this picture inspires
        you, try to make something similar. Otherwise, create something all your own.
      Internet Accessibility_markdown_instruction: |-
        # Internet Accessibility: Internet
        Speed\r
        \r
        Another difference in how people will experience your website
        is in the speed of their internet connection as they try to load the content
        on your web page. To check this we can use the Google Chrome Developer Tools
        to simulate a slow internet connection.\r
        \r
        # Do This\r
        \r
        * Open this
        page in the Google Chrome Web Browser\r
        * From the _View_ menu, find _Developer_
        \r
        \r
        <img src="https://images.code.org/c6f91de459cec7ed561b11783ea833bd-image-1475634452345.png"
        style="width:200px">\r
        \r
        * In the _Developer_ submenu, select _Developer
        Tools_ \r
        \r
        <img src="https://images.code.org/fb8402f57f9121c729c0880d7bf06dfa-image-1475634452345.png"
        style="width:200px">\r
        \r
        * The _Developer Tools_ will open as a frame
        at the bottom of your browser window\r
        \r
        <img src="https://images.code.org/95be9a273afd32305a0bc4c20b530647-image-1475634452344.png"
        style="width:400px">\r
        \r
        * Click the menu that says "No throttling"
        and select "GPRS" \r
        \r
        <img src="https://images.code.org/07240b96943b01a80505ba6b3900b7da-image-1475634452344.png"
        style="width:200px">\r
        \r
        *  Hold down _Shift_ while reloading the page
        (this will delete cached files so the browser has to re download them while
        throttled)
      'Internet Simulator: DNS Mode_markdown_instruction': |-
        ## The Need for DNS\r
        \r
        In
        this version of the Internet Simulator, a Domain Name System (DNS) is provided
        for you and knows the IP addresses of all connected computers. You can only
        see the hostnames of other connected computers.   \r
        ![](https://images.code.org/3ac2c23ed610abc7e785ec85054e89a9-image-1434746293690.PNG)\r
        \r
        The
        address of the DNS is always &lt;yourRouterNumber&gt;.15. Send a message with
        protocol `GET [hostname]`, for example `GET Bob2`, to the DNS to get another
        student's address. You can keep track of the responses in the Notes section
        in the DNS tab.  \r
        ![](https://images.code.org/c81c1a6b876eb46674a7f7e5e70506ce-image-1434746797267.png)
      'Internet Simulator: DNS_markdown_instruction': |-
        ## The Need for DNS\r
        \r
        In
        this version of the Internet Simulator, a Domain Name System (DNS) is provided
        for you and knows the IP addresses of all connected computers. You can only
        see the hostnames of other connected computers.   \r
        ![](https://images.code.org/3ac2c23ed610abc7e785ec85054e89a9-image-1434746293690.PNG)\r
        \r
        The
        address of the DNS is always &lt;yourRouterNumber&gt;.15. Send a message with
        protocol `GET [hostname]`, for example `GET Bob2`, to the DNS to get another
        student's address. You can keep track of the responses in the Notes section
        in the DNS tab.  \r
        ![](https://images.code.org/c81c1a6b876eb46674a7f7e5e70506ce-image-1434746797267.png)
      'Internet Simulator: DNS_2018_markdown_instruction': |-
        ## The Need for DNS\r
        \r
        In
        this version of the Internet Simulator, a Domain Name System (DNS) is provided
        for you and knows the IP addresses of all connected computers. You can only
        see the hostnames of other connected computers.   \r
        ![](https://images.code.org/3ac2c23ed610abc7e785ec85054e89a9-image-1434746293690.PNG)\r
        \r
        The
        address of the DNS is always &lt;yourRouterNumber&gt;.15. Send a message with
        protocol `GET [hostname]`, for example `GET Bob2`, to the DNS to get another
        student's address. You can keep track of the responses in the Notes section
        in the DNS tab.  \r
        ![](https://images.code.org/c81c1a6b876eb46674a7f7e5e70506ce-image-1434746797267.png)
      'Internet Simulator: Packets_markdown_instruction': |-
        ## Packets and Making
        a Reliable Internet\r
        \r
        **Challenge:** Develop a protocol for reliably
        sending a message across an unreliable network\r
        \r
        **An Unreliable Internet
        Simulator:** The current version of the Internet Simulator is modeled after
        some actual constraints of the Internet\r
        - Messages must be divided into
        packets which may contain <em><strong> at most eight (8) ASCII characters
        </em></strong>\r
        - Messages should be long enough to require at least 10
        packets\r
        - Packets may not arrive in the order sent\r
        - Packets may be
        dropped while in transmission\r
        \r
        **Directions:** In a group or individually
        join a router in the Internet Simulator and practice sending messages given
        these new constraints. Once you are comfortable with the challenge, iteratively
        design a protocol that can reliably send a message to a partner. You and your
        partner should join <em><strong> DIFFERENT </strong></em> routers.\r
        \r
        **Protocol
        Requirements:**\r
        - All communication can only be done through the Internet
        Simulator\r
        - You must send a message that spans at least 10 packets (i.e.
        an 80 character ASCII message). \r
        - The protocol should account for the
        possibility that the characters might be entirely random (i.e. not necessarily
        English - do not count on human intuition to reconstruct the message. The
        message is not known beforehand.)\r
        - The sender and receiver must be confident
        the full message was successfully transmitted and reconstructed.
      'Internet Simulator: Packets_2018_markdown_instruction': |-
        ## Packets and Making
        a Reliable Internet\r
        \r
        **Challenge:** Develop a protocol for reliably
        sending a message across an unreliable network\r
        \r
        **An Unreliable Internet
        Simulator:** The current version of the Internet Simulator is modeled after
        some actual constraints of the Internet\r
        - Messages must be divided into
        packets which may contain <em><strong> at most eight (8) ASCII characters
        </em></strong>\r
        - Messages should be long enough to require at least 10
        packets\r
        - Packets may not arrive in the order sent\r
        - Packets may be
        dropped while in transmission\r
        \r
        **Directions:** In a group or individually
        join a router in the Internet Simulator and practice sending messages given
        these new constraints. Once you are comfortable with the challenge, iteratively
        design a protocol that can reliably send a message to a partner. You and your
        partner should join <em><strong> DIFFERENT </strong></em> routers.\r
        \r
        **Protocol
        Requirements:**\r
        - All communication can only be done through the Internet
        Simulator\r
        - You must send a message that spans at least 10 packets (i.e.
        an 80 character ASCII message). \r
        - The protocol should account for the
        possibility that the characters might be entirely random (i.e. not necessarily
        English - do not count on human intuition to reconstruct the message. The
        message is not known beforehand.)\r
        - The sender and receiver must be confident
        the full message was successfully transmitted and reconstructed.
      'Internet Simulator: Routers_markdown_instruction': |-
        # An Updated Internet
        Simulator\r
        Many changes have been made to the Internet Simulator. \r
        \r
        **Routers:**
        Rather than being connected to your entire class you are now connected to
        a single router. You can see who else is on your router in the network diagram.\r
        \r
        ![](https://images.code.org/0311148470dc358fe435568e2b333062-image-1442008896037.51.04
        PM.png)\r
        \r
        \r
        **IP Addresses:** Every user has a unique IP address. The
        first portion is the number of your router and the second is your own unique
        number. You can figure out the IP addresses of people on the router by looking
        at the network diagram.\r
        \r
        ![](https://images.code.org/b03d841ebd8299ca43197ee4df35d273-image-1442008949041.51.59
        PM.png)\r
        \r
        **Sending Messages: ** You can now send messages to a single
        other user. Fill in the "To" portion of the message with the IP address
        (including the period) of the person you'd like to send your message to.\r
        \r
        ![](https://images.code.org/8e9b073526f24e69147d5c7f34492bec-image-1442009069243.52.34
        PM.png)\r
        \r
        **Router Statistics: ** You can see useful information about
        the functioning of your router in the "Router" tab.\r
        \r
        ![](https://images.code.org/7390cfa12f65b933145a391fa65ab4b1-image-1442009194697.58.23
        PM.png)\r
        \r
        **Router Logs: ** You can read a log of traffic both at the
        level of your router and the entire network by clicking the "Log Browser"
        button.\r
        \r
        ![](https://images.code.org/b24975e33f1a2b10fc6a2ca8cf1c9ad2-image-1442009358166.58.48
        PM.png)
      'Internet Simulator: Routers_2018_markdown_instruction': |-
        # An Updated Internet
        Simulator\r
        Many changes have been made to the Internet Simulator. \r
        \r
        **Routers:**
        Rather than being connected to your entire class you are now connected to
        a single router. You can see who else is on your router in the network diagram.\r
        \r
        ![](https://images.code.org/0311148470dc358fe435568e2b333062-image-1442008896037.51.04
        PM.png)\r
        \r
        \r
        **IP Addresses:** Every user has a unique IP address. The
        first portion is the number of your router and the second is your own unique
        number. You can figure out the IP addresses of people on the router by looking
        at the network diagram.\r
        \r
        ![](https://images.code.org/b03d841ebd8299ca43197ee4df35d273-image-1442008949041.51.59
        PM.png)\r
        \r
        **Sending Messages: ** You can now send messages to a single
        other user. Fill in the "To" portion of the message with the IP address
        (including the period) of the person you'd like to send your message to.\r
        \r
        ![](https://images.code.org/8e9b073526f24e69147d5c7f34492bec-image-1442009069243.52.34
        PM.png)\r
        \r
        **Router Statistics: ** You can see useful information about
        the functioning of your router in the "Router" tab.\r
        \r
        ![](https://images.code.org/7390cfa12f65b933145a391fa65ab4b1-image-1442009194697.58.23
        PM.png)\r
        \r
        **Router Logs: ** You can read a log of traffic both at the
        level of your router and the entire network by clicking the "Log Browser"
        button.\r
        \r
        ![](https://images.code.org/b24975e33f1a2b10fc6a2ca8cf1c9ad2-image-1442009358166.58.48
        PM.png)
      'Internet Simulator: Sending Binary Messages 1_markdown_instruction': |-
        ## Coordination
        and Binary Messages Activity\r
        \r
        **Develop your Protocol**\r
        Develop a
        protocol that allows you to use Internet Simulator to relay a message, i.e.
        one member sends a message and the other member sends the same message back.
        You or a teacher will say “Go” to begin the exchange but otherwise all communication
        must be through the widget. As you’re working, consider:\r
        \r
        - How will
        you know when the exchange is supposed to begin?\r
        - How will you know whose
        turn it is to send or receive the message?\r
        - How will you coordinate your
        actions?\r
        \r
        Document your protocol on the worksheet provided, and test
        your protocol using the Internet Simulator
      'Internet Simulator: Sending Binary Messages_markdown_instruction': |-
        ## Coordination
        and Binary Messages Activity\r
        \r
        **Develop your Protocol**\r
        Develop a
        protocol that allows you to use Internet Simulator to relay a message, i.e.
        one member sends a message and the other member sends the same message back.
        You or a teacher will say “Go” to begin the exchange but otherwise all communication
        must be through the widget. As you’re working, consider:\r
        \r
        - How will
        you know when the exchange is supposed to begin?\r
        - How will you know whose
        turn it is to send or receive the message?\r
        - How will you coordinate your
        actions?\r
        \r
        Document your protocol on the worksheet provided, and test
        your protocol using the Internet Simulator
      'Internet Simulator: Sending Binary Messages_2018_markdown_instruction': |-
        ##
        Coordination and Binary Messages Activity\r
        \r
        **Develop your Protocol**\r
        Develop
        a protocol that allows you to use Internet Simulator to relay a message, i.e.
        one member sends a message and the other member sends the same message back.
        You or a teacher will say “Go” to begin the exchange but otherwise all communication
        must be through the widget. As you’re working, consider:\r
        \r
        - How will
        you know when the exchange is supposed to begin?\r
        - How will you know whose
        turn it is to send or receive the message?\r
        - How will you coordinate your
        actions?\r
        \r
        Document your protocol on the worksheet provided, and test
        your protocol using the Internet Simulator
      'Internet Simulator: Sending Numbers_markdown_instruction': |-
        ## Sending Numbers
        Activity\r
        \r
        **Challenge:** Develop a protocol or set of rules for communicating
        a drawing to your partners using only bits.\r
        \r
        **Challenge Rules:**\r
        The
        image will be a line drawing created by connecting points on a grid, like
        the one seen here.\r
        You can discuss and agree on a protocol ahead of time,
        but the image exchange must happen without communication between the two parties
        other than through using the Internet Simulator.\r
        \r
        **Things to Consider:**\r
        -
        How will your points be formatted?\r
        - How does the recipient know when one
        number ends and the next begins?\r
        \r
        **Your Protocol:** Write the steps
        of your protocol on the worksheet provided by your teacher.\r
        \r
        ![](https://images.code.org/d79263f7a6e129962f830ce0af2ed3cc-image-1434414362601.PNG)
      'Internet Simulator: Sending Numbers_2018_markdown_instruction': |-
        ## Sending
        Numbers Activity\r
        \r
        **Challenge:** Develop a protocol or set of rules
        for communicating a drawing to your partners using only bits.\r
        \r
        **Challenge
        Rules:**\r
        The image will be a line drawing created by connecting points
        on a grid, like the one seen here.\r
        You can discuss and agree on a protocol
        ahead of time, but the image exchange must happen without communication between
        the two parties other than through using the Internet Simulator.\r
        \r
        **Things
        to Consider:**\r
        - How will your points be formatted?\r
        - How does the recipient
        know when one number ends and the next begins?\r
        \r
        **Your Protocol:** Write
        the steps of your protocol on the worksheet provided by your teacher.\r
        \r
        ![](https://images.code.org/d79263f7a6e129962f830ce0af2ed3cc-image-1434414362601.PNG)
      'Internet Simulator: Sending Text_markdown_instruction': |
        ## Sending Formatted
        Text Activity\r
        \r
        **Directions:**  \r
        Work with a partner or in a small
        team to develop a protocol that allows you to send formatted text. \r
        \r
        **Guidelines:**  \r
        -
        Both the text and the formatting instructions must be derived from the printable
        ASCII character set (i.e. codes 32-126).\r
        - Your protocol must encode at
        least:\r
        \t- bold, italics, and underlining\r
        \t- three different font sizes
        (large, medium, and small)\r
        \t- three different font colors (red, black,
        blue)\r
        - You will demonstrate that your protocol works by having the recipient
        be able to faithfully draw (or produce in some fashion) the formatted text
        based only on the data she received through an ASCII-text version of the Internet
        Simulator. A sample message can be found below.\r
        \r
        ![](https://images.code.org/6fa1d53e4d36a9d0bac5b9b8fb4bc81d-image-1434427211242.PNG)\r
        \r
        **Develop
        Your Protocol:**  \r
        Use the worksheet handed out by your teacher to brainstorm
        ideas for your protocol. Iteratively improve your protocol by testing it out
        with simple sample messages.\r
      'Internet Simulator: Sending Text_2018_markdown_instruction': |
        ## Sending Formatted
        Text Activity\r
        \r
        **Directions:**  \r
        Work with a partner or in a small
        team to develop a protocol that allows you to send formatted text. \r
        \r
        **Guidelines:**  \r
        -
        Both the text and the formatting instructions must be derived from the printable
        ASCII character set (i.e. codes 32-126).\r
        - Your protocol must encode at
        least:\r
        \t- bold, italics, and underlining\r
        \t- three different font sizes
        (large, medium, and small)\r
        \t- three different font colors (red, black,
        blue)\r
        - You will demonstrate that your protocol works by having the recipient
        be able to faithfully draw (or produce in some fashion) the formatted text
        based only on the data she received through an ASCII-text version of the Internet
        Simulator. A sample message can be found below.\r
        \r
        ![](https://images.code.org/6fa1d53e4d36a9d0bac5b9b8fb4bc81d-image-1434427211242.PNG)\r
        \r
        **Develop
        Your Protocol:**  \r
        Use the worksheet handed out by your teacher to brainstorm
        ideas for your protocol. Iteratively improve your protocol by testing it out
        with simple sample messages.\r
      Internet Speed Test_markdown_instruction: |-
        # Check for Internet Accessibility\r
        \r
        Another
        difference in how people will experience your website is in the speed of their
        internet connection as they try to load the content on your web page. To check
        this we can use the Google Chrome Developer Tools to simulate a slow internet
        connection.\r
        \r
        # Do This\r
        \r
        * Open this page in the Google Chrome
        Web Browser\r
        * From the _View_ menu, find _Developer_ \r
        \r
        <img src="https://images.code.org/c6f91de459cec7ed561b11783ea833bd-image-1475634452345.png"
        style="width:200px">\r
        \r
        * In the _Developer_ submenu, select _Developer
        Tools_ \r
        \r
        <img src="https://images.code.org/fb8402f57f9121c729c0880d7bf06dfa-image-1475634452345.png"
        style="width:200px">\r
        \r
        * The _Developer Tools_ will open as a frame
        at the bottom of your browser window\r
        \r
        <img src="https://images.code.org/95be9a273afd32305a0bc4c20b530647-image-1475634452344.png"
        style="width:400px">\r
        \r
        * Click the menu that says "No throttling"
        and select "GPRS" \r
        \r
        <img src="https://images.code.org/07240b96943b01a80505ba6b3900b7da-image-1475634452344.png"
        style="width:200px">\r
        \r
        *  Hold down _Shift_ while reloading the page
        (this will delete cached files so the browser has to re download them while
        throttled)
      Introduction to App Lab and Turtle Programming_markdown_instruction: "The video\nbelow
        is from lesson 4, and introduces App Lab and the Turtle. "
      Introduction to Conditionals - Part 2.2_markdown_instruction: |
        ### Points to
        pay attention to:\r
        \r
        **Start** play at 1:37 \r
        **Stop** play at 2:20\r
        \r
        It's
        all you need for the exercises that follow.  You'll watch the remainder of
        the video after that.\r
        \r
        * An IF statement can have an else clause, but
        an ELSE clause cannot exist on its own.\r
        * With an else clause you are *guaranteeing*
        that one of two portions of code will run.\r
        \r
      'Introduction to Conditionals: Boolean Expressions_markdown_instruction': |-
        ###
        Points to pay attention to:\r
        \r
        1. What's a *Boolean Expression?*\r
        2.
        Why is it called a "Boolean"?\r
        3. Is this a legal expression?  `10 > 25`?
      'Introduction to Conditionals: Compound Boolean Expressions_markdown_instruction': |
        ###
        Points to pay attention to:\r
        \r
        * The "Boolean operators" are AND and
        OR.  \r
        * In JavaScript you write them as `&&` for AND and `||` for OR.\r
        *
        You use them to combine boolean expressions into a single statement when you
        need to check multiple conditions before executing a particular segment of
        code.\r
        \r
      'Introduction to Conditionals: if-else Statements_markdown_instruction': |
        ###
        Points to pay attention to:\r
        \r
        * An IF statement can have an else clause,
        but an ELSE clause cannot exist on its own.\r
        * With an else clause you are
        *guaranteeing* that one of two portions of code will run.\r
        \r
      'Introduction to Conditionals: if-else-if Statements_markdown_instruction': |
        ###
        Points to pay attention to:\r
        \r
        * An if-else-if statement lets you check
        more than one condition at a time.\r
        * The **order of conditions matters**.
        Since conditions are checked sequentially from top to bottom, the code that
        gets executed will be the *first* statement to evaluate to true.\r
        \r
      Introduction to Design Mode_markdown_instruction: |-
        **You do not need to watch
        this video** to understand or complete this lesson - it is merely here if
        you are interested in getting a general overview.  \r
        \r
        In this lesson
        to get started we will only use a few of the features depicted.
      Just for Testing_markdown_instruction: Other test instructions
      K-1 Bee Loops 2_markdown_instruction: |-
        Use a `repeat` loop to move and then
        get the nectar and make honey!
      K-1 Bee Loops 3_markdown_instruction: |-
        Use three `repeat` loops to get the
        nectar and make honey!
      K-1 Bee Loops 4_markdown_instruction: |-
        Use `repeat` loops to get the nectar,
        make honey, and to move!
      K-1 Bee Loops 5_markdown_instruction: |-
        Use `repeat` loops to get the nectar
        and honey!
      K-1 Bee Loops 6_markdown_instruction: |-
        Use a `repeat` loop to get the nectar,
        get honey, and to move!
      K-1 Maze Loops 10_markdown_instruction: |-
        Get me to the pig!   \r
        Using the
        `repeat` loop will make it much easier.
      K-1 Maze Loops 11_markdown_instruction: |-
        Get me to the pig!  \r
        The `repeat`
        loop will make this easier.
      K-1 Maze Loops 12_markdown_instruction: |-
        Get me to the pig!  \r
        The `repeat`
        loop will make this easier.
      K-1 Maze Loops 2_markdown_instruction: |-
        Use the `repeat` block to get me to
        the pig!
      K-1 Maze Loops 3_markdown_instruction: |-
        Get me to the pig!  \r
        Be sure to
        use `repeat` loops.
      K-1 Maze Loops 5_markdown_instruction: |-
        Get me to the pig!  \r
        Be sure to
        use `repeat` loops.
      K-1 Maze Loops 6_markdown_instruction: |-
        Get me to the pig!  \r
        Be sure to
        use `repeat` loops.
      K-1 Maze Loops 7_markdown_instruction: |-
        Get me to the pig!  \r
        Be sure to
        use `repeat` loops.
      K-1 Maze Loops 8_markdown_instruction: |-
        Use `repeat` loops to get me to the
        pig.
      K-1 Maze Loops Assessment 1_markdown_instruction: |-
        Look at all we've learned!   \r
        Use
        a `repeat` loop to get me to the pig!
      K2.0 sequence 1_markdown_instruction: |-
        A bug! Fix the code to get me to the
        pig.\r
        \r
        ![](https://images.code.org/2843193ce2d869ad2f06f0f5b114c9d0-image-1467924400663.gif)
      K2.0 sequence 10_markdown_instruction: |-
        **Challenge:** Move me around the TNT
        to get to the pig.\r
        \r
        ![](https://images.code.org/4873075cd34a942f5006d59b05422bd0-image-1467932801138.gif)
      K2.0 sequence 12_markdown_instruction: |
        Let's get that pig!\r
        \r
        ![](https://images.code.org/f908ff77eb81ee85d405a7ba66cc2986-image-1467933103380.gif)\r
      K2.0 sequence 2_markdown_instruction: |-
        Fix the code to get me to the pig!\r
        \r
        ![](https://images.code.org/629cddc754f9ad02929f06fc68462e4d-image-1467924800613.gif)
      K2.0 sequence 3_markdown_instruction: |-
        Something is not quite right. REMOVE
        a block to get me to the pig!\r
        \r
        ![](https://images.code.org/dd6d92233199ee0f524caa4051b99275-image-1467920800577.gif)
      K2.0 sequence 4_markdown_instruction: |
        Time for a shorter puzzle!  Move one
        way, then another to get me to the pig.\r
        \r
        ![](https://images.code.org/c2e2d7ea98a18d899c6de183ce6d82e1-image-1471385293382.gif)\r
      K2.0 sequence 5_markdown_instruction: |-
        Move one way, then another to get me
        to the pig!\r
        \r
        ![](https://images.code.org/0b324bc0f684f7a22171acd8b38c8d9f-image-1467931807767.gif)
      K2.0 sequence 6_markdown_instruction: |-
        Figure out what is missing and then
        add blocks to get me to the pig!\r
        \r
        ![](https://images.code.org/b9803e12911694d8bb18bd55304f85d5-image-1467932006704.gif)
      K2.0 sequence 7_markdown_instruction: |-
        Solve this level and get me to the pig!\r
        \r
        ![](https://images.code.org/1eb9139e2887083dc80b98d9aeb3bef2-image-1467932105884.gif)
      K2.0 sequence 8_markdown_instruction: |-
        **Challenge:** Debug this level by adding
        blocks to get me to the pig!\r
        \r
        ![](https://images.code.org/810d7189bcd0767d37ea82319b4c678c-image-1467932445247.gif)
      K2.0 sequence 9_markdown_instruction: |-
        **Challenge:** Go around the TNT to
        get me to the pig!\r
        \r
        ![](https://images.code.org/fa04813e9451e0bc070af50bc01d4a6b-image-1467932582838.gif)
      KIKI GLJ Test Response_markdown_instruction: |
        Look carefully at the code below.  What
        do you think the plane will do when you click "Run"?\r
      LaurelDebugging4Video1_markdown_instruction: |-
        This is Laurel the Adventurer!\r
        \r
        Move
        her around and get as much gold as you can.
      'Lesson 7: Teaching and Student Support Plan_markdown_instruction': "> **NOTE:\nbefore
        you start this task, make sure you’ve reviewed the lesson resources\nin this
        module, and have a good sense of how the lesson works. If you haven’t\nalready
        reviewed the materials, do that now and come back to this task later.**\\r\n\\r\n#\nLesson
        7: Teaching and Student Support Plan\\r\n\\r\n## Task Description\\r\n\\r\nNow\nthat
        you have a better sense of this lesson, let’s think about the types of\nsupports
        students will need in order to successfully complete it. Since the\ncurriculum
        is based on inquiry learning, lessons feature activities that engage\nstudents
        in discovering core concepts themselves. It’s important to think\nthrough
        implementation plans and student support. In this task you will make\na plan
        for teaching and student support that takes into account differentiation\nstrategies
        and make-up work for absent students. Your teaching and student\nsupport plan
        should cover the following: \\r\n\\r\n- **Details on how you will\nimplement
        and differentiate the lesson:**\\r\n\\r\n - An outline of any changes\nyou
        will need to make to the lesson to fit your local constraints or context\n(for
        example: pacing and time, dealing with classroom setup, etc). \\r\n -\nAn
        overview of the types of student needs you’ll likely need to support in\nyour
        classroom (for example: students who are struggling to understand the\nunderlying
        concept; students who are already familiar with the concept, but\nstill have
        room to learn more; etc)\\r\n - Your plan for addressing each of\nthe needs
        outlined above (for example: integrating extension activities or\nother materials
        for students who already know something about the topic)\\r\n<br><Br>\\r\n\\r\n-\n**Plan
        for catching up absent students:**\\r\n\\r\n - How will absent students\ncatch
        up on activities they missed? \\r\n\\r\nYou can type out your teaching\nand
        student support plan in the box below, or you can upload a word doc or\npdf
        file. \\r\n\\r\n## Getting Credit for Completing this Task\\r\n\\r\n#### Task\nReview
        Details\\r\n\\r\nIf this module is listed as  your “focus area”, then\nyour
        response to the prompt above will be shared anonymously and reviewed\nby your
        peers, and you will review the work done by other teachers. Reviewers\nwill
        be looking for thoughtful and thorough answers that demonstrate that\nyou
        have spent time considering how the lesson will play out in your own classroom.\nReviewers
        will have an opportunity to give feedback on your submission, and\nyou can
        respond to that feedback and resubmit. \\r\n\\r\nIn order to get credit\nfor
        completing this task, two reviewers need to agree that you have responded\nto
        the prompts fully. If reviewers don’t feel comfortable making a decision\nabout
        your task submission, they can elevate to a facilitator to review. You\nwill
        always have a chance to address feedback from your reviewers and resubmit\nyour
        task! Reviewer feedback will show up at the bottom of this page, once\nit’s
        available. "
      'Lesson 9: Teaching and Student Support Plan_markdown_instruction': "> **NOTE:\nbefore
        you start this task, make sure you’ve reviewed the lesson resources\nin this
        module, and have a good sense of how the lesson works. If you haven’t\nalready
        reviewed the materials, do that now and come back to this task later.**\\r\n\\r\n#\nLesson
        9 Teaching and Student Support Plan\\r\n\\r\n## Task Description\\r\n\\r\nNow\nthat
        you have a better sense of this lesson, let’s think about the types of\nsupports
        students will need in order to successfully complete it. Since the\ncurriculum
        is based on inquiry learning, lessons feature activities that engage\nstudents
        in discovering core concepts themselves. It’s important to think\nthrough
        implementation plans and student support. In this task you will make\na plan
        for teaching and student support that takes into account differentiation\nstrategies
        and make-up work for absent students. Your teaching and student\nsupport plan
        should cover the following: \\r\n\\r\n- **Details on how you will\nimplement
        and differentiate the lesson:**\\r\n\\r\n - An outline of any changes\nyou
        will need to make to the lesson to fit your local constraints or context\n(for
        example: pacing and time, dealing with classroom setup, etc). \\r\n -\nAn
        overview of the types of student needs you’ll likely need to support in\nyour
        classroom (for example: students who are struggling to understand the\nunderlying
        concept; students who are already familiar with the concept, but\nstill have
        room to learn more; etc)\\r\n - Your plan for addressing each of\nthe needs
        outlined above (for example: integrating extension activities or\nother materials
        for students who already know something about the topic)\\r\n<br><Br>\\r\n\\r\n-\n**Plan
        for catching up absent students:**\\r\n\\r\n - How will absent students\ncatch
        up on activities they missed? \\r\n\\r\nYou can type out your teaching\nand
        student support plan in the box below, or you can upload a word doc or\npdf
        file. \\r\n\\r\n## Getting Credit for Completing this Task\\r\n\\r\n#### Task\nReview
        Details\\r\n\\r\nIf this module is listed as  your “focus area”, then\nyour
        response to the prompt above will be shared anonymously and reviewed\nby your
        peers, and you will review the work done by other teachers. Reviewers\nwill
        be looking for thoughtful and thorough answers that demonstrate that\nyou
        have spent time considering how the lesson will play out in your own classroom.\nReviewers
        will have an opportunity to give feedback on your submission, and\nyou can
        respond to that feedback and resubmit. \\r\n\\r\nIn order to get credit\nfor
        completing this task, two reviewers need to agree that you have responded\nto
        the prompts fully. If reviewers don’t feel comfortable making a decision\nabout
        your task submission, they can elevate to a facilitator to review. You\nwill
        always have a chance to address feedback from your reviewers and resubmit\nyour
        task! Reviewer feedback will show up at the bottom of this page, once\nit’s
        available. "
      'Lessons 10 - 11: Teaching and Student Support Plan_markdown_instruction': |-
        <br><br>\r
        >
        **NOTE: before you start this task, make sure you’ve reviewed the lesson resources
        in this module, and have a good sense of how the lesson works. If you haven’t
        already reviewed the materials, do that now and come back to this task later.**\r
        \r
        #
        Lessons 10 - 11: Teaching and Student Support Plan\r
        \r
        ## Task Description\r
        \r
        Now
        that you have a better sense of this lessons in this sequence, let’s think
        about the types of supports students will need in order to be successful.
        Since the curriculum is based on inquiry learning, lessons feature activities
        that engage students in discovering core concepts themselves. It’s important
        to think through implementation plans and student support. In this task you
        will make a plan for teaching and student support **for one of the lessons
        in this sequence** that takes into account differentiation strategies and
        make-up work for absent students. Your teaching and student support plan should
        cover the following: \r
        \r
        \r
        - **Which lesson in the sequence are you
        discussing?** \r
        \r
        - **Details on how you will implement and differentiate
        the lesson:**\r
        \r
         - An outline of any changes you will need to make to
        the lesson to fit your local constraints or context (for example: pacing and
        time, dealing with classroom setup, etc). \r
         - An overview of the types
        of student needs you’ll likely need to support in your classroom (for example:
        students who are struggling to understand the underlying concept; students
        who are already familiar with the concept, but still have room to learn more;
        etc)\r
         - Your plan for addressing each of the needs outlined above (for
        example: integrating extension activities or other materials for students
        who already know something about the topic)\r
         - How will you address or
        emphasize the connection between lessons in this sequence? \r
        \r
        <br>\r
        -
        **Plan for catching up absent students:**\r
        \r
         - How will absent students
        catch up on activities they missed? \r
         - How will you use the fact that
        the lessons in this sequence are related and build on one another to address
        make-up work? \r
        \r
        You can type out your teaching and student support plan
        in the box below, or you can upload a word doc or pdf file. \r
        \r
        ## Getting
        Credit for Completing this Task\r
        \r
        #### Task Review Details\r
        \r
        If
        this module is listed as  your “focus area”, then your response to the prompt
        above will be shared anonymously and reviewed by your peers, and you will
        review the work done by other teachers. Reviewers will be looking for thoughtful
        and thorough answers that demonstrate that you have spent time considering
        how the lesson will play out in your own classroom. Reviewers will have an
        opportunity to give feedback on your submission, and you can respond to that
        feedback and resubmit. \r
        \r
        In order to get credit for completing this
        task, two reviewers need to agree that you have responded to the prompts fully.
        If reviewers don’t feel comfortable making a decision about your task submission,
        they can elevate to a facilitator to review. You will always have a chance
        to address feedback from your reviewers and resubmit your task! Reviewer feedback
        will show up at the bottom of this page, once it’s available. \r
        \r
        <br><br>
      'Lessons 12 - 13: Teaching and Student Support Plan_markdown_instruction': |-
        <br><br>\r
        >
        **NOTE: before you start this task, make sure you’ve reviewed the lesson resources
        in this module, and have a good sense of how the lesson works. If you haven’t
        already reviewed the materials, do that now and come back to this task later.**\r
        \r
        #
        Lessons 12 - 13: Teaching and Student Support Plan\r
        \r
        ## Task Description\r
        \r
        Now
        that you have a better sense of this lessons in this sequence, let’s think
        about the types of supports students will need in order to be successful.
        Since the curriculum is based on inquiry learning, lessons feature activities
        that engage students in discovering core concepts themselves. It’s important
        to think through implementation plans and student support. In this task you
        will make a plan for teaching and student support **for one of the lessons
        in this sequence** that takes into account differentiation strategies and
        make-up work for absent students. Your teaching and student support plan should
        cover the following: \r
        \r
        \r
        - **Which lesson in the sequence are you
        discussing?** \r
        \r
        - **Details on how you will implement and differentiate
        the lesson:**\r
        \r
         - An outline of any changes you will need to make to
        the lesson to fit your local constraints or context (for example: pacing and
        time, dealing with classroom setup, etc). \r
         - An overview of the types
        of student needs you’ll likely need to support in your classroom (for example:
        students who are struggling to understand the underlying concept; students
        who are already familiar with the concept, but still have room to learn more;
        etc)\r
         - Your plan for addressing each of the needs outlined above (for
        example: integrating extension activities or other materials for students
        who already know something about the topic)\r
         - How will you address or
        emphasize the connection between lessons in this sequence? \r
        \r
        <br>\r
        \r
        -
        **Plan for catching up absent students:**\r
        \r
         - How will absent students
        catch up on activities they missed? \r
         - How will you use the fact that
        the lessons in this sequence are related and build on one another to address
        make-up work? \r
        \r
        You can type out your teaching and student support plan
        in the box below, or you can upload a word doc or pdf file. \r
        \r
        ## Getting
        Credit for Completing this Task\r
        \r
        #### Task Review Details\r
        \r
        If
        this module is listed as  your “focus area”, then your response to the prompt
        above will be shared anonymously and reviewed by your peers, and you will
        review the work done by other teachers. Reviewers will be looking for thoughtful
        and thorough answers that demonstrate that you have spent time considering
        how the lesson will play out in your own classroom. Reviewers will have an
        opportunity to give feedback on your submission, and you can respond to that
        feedback and resubmit. \r
        \r
        In order to get credit for completing this
        task, two reviewers need to agree that you have responded to the prompts fully.
        If reviewers don’t feel comfortable making a decision about your task submission,
        they can elevate to a facilitator to review. You will always have a chance
        to address feedback from your reviewers and resubmit your task! Reviewer feedback
        will show up at the bottom of this page, once it’s available. \r
        \r
        <br><br>
      'Lessons 2 - 3: Teaching and Student Support Plan_markdown_instruction': |-
        <br><br>\r
        >
        **NOTE: before you start this task, make sure you’ve reviewed the lesson resources
        in this module, and have a good sense of how the lesson works. If you haven’t
        already reviewed the materials, do that now and come back to this task later.**\r
        \r
        #
        Lessons 2 - 3: Teaching and Student Support Plan\r
        \r
        ## Task Description\r
        \r
        Now
        that you have a better sense of this lessons in this sequence, let’s think
        about the types of supports students will need in order to be successful.
        Since the curriculum is based on inquiry learning, lessons feature activities
        that engage students in discovering core concepts themselves. It’s important
        to think through implementation plans and student support. In this task you
        will make a plan for teaching and student support **for one of the lessons
        in this sequence** that takes into account differentiation strategies and
        make-up work for absent students. Your teaching and student support plan should
        cover the following: \r
        \r
        \r
        - **Which lesson in the sequence are you
        discussing?** \r
        \r
        - **Details on how you will implement and differentiate
        the lesson:**\r
        \r
         - An outline of any changes you will need to make to
        the lesson to fit your local constraints or context (for example: pacing and
        time, dealing with classroom setup, etc). \r
         - An overview of the types
        of student needs you’ll likely need to support in your classroom (for example:
        students who are struggling to understand the underlying concept; students
        who are already familiar with the concept, but still have room to learn more;
        etc)\r
         - Your plan for addressing each of the needs outlined above (for
        example: integrating extension activities or other materials for students
        who already know something about the topic)\r
         - How will you address or
        emphasize the connection between lessons in this sequence? \r
        \r
        <br>\r
        -
        **Plan for catching up absent students:**\r
        \r
         - How will absent students
        catch up on activities they missed? \r
         - How will you use the fact that
        the lessons in this sequence are related and build on one another to address
        make-up work? \r
        \r
        You can type out your teaching and student support plan
        in the box below, or you can upload a word doc or pdf file. \r
        \r
        ## Getting
        Credit for Completing this Task\r
        \r
        #### Task Review Details\r
        \r
        If
        this module is listed as  your “focus area”, then your response to the prompt
        above will be shared anonymously and reviewed by your peers, and you will
        review the work done by other teachers. Reviewers will be looking for thoughtful
        and thorough answers that demonstrate that you have spent time considering
        how the lesson will play out in your own classroom. Reviewers will have an
        opportunity to give feedback on your submission, and you can respond to that
        feedback and resubmit. \r
        \r
        In order to get credit for completing this
        task, two reviewers need to agree that you have responded to the prompts fully.
        If reviewers don’t feel comfortable making a decision about your task submission,
        they can elevate to a facilitator to review. You will always have a chance
        to address feedback from your reviewers and resubmit your task! Reviewer feedback
        will show up at the bottom of this page, once it’s available. \r
        \r
        <br><br>
      'Lessons 2-3: Teaching and Student Support Plan_markdown_instruction': |-
        <br><br>\r
        >
        **NOTE: before you start this task, make sure you’ve reviewed the lesson resources
        in this module, and have a good sense of how the lesson works. If you haven’t
        already reviewed the materials, do that now and come back to this task later.**\r
        \r
        #
        Teaching and Student Support Plan\r
        \r
        ## Task Description\r
        \r
        Now that
        you have a better sense of this lessons in this sequence, let’s think about
        the types of supports students will need in order to be successful. Since
        the curriculum is based on inquiry learning, lessons feature activities that
        engage students in discovering core concepts themselves. It’s important to
        think through implementation plans and student support. In this task you will
        make a plan for teaching and student support **for one of the lessons in this
        sequence** that takes into account differentiation strategies and make-up
        work for absent students. Your teaching and student support plan should cover
        the following: \r
        \r
        \r
        - **Which lesson in the sequence are you discussing?**
        \r
        \r
        - **Details on how you will implement and differentiate the lesson:**\r
        \r

        - An outline of any changes you will need to make to the lesson to fit your
        local constraints or context (for example: pacing and time, dealing with classroom
        setup, etc). \r
         - An overview of the types of student needs you’ll likely
        need to support in your classroom (for example: students who are struggling
        to understand the underlying concept; students who are already familiar with
        the concept, but still have room to learn more; etc)\r
         - Your plan for addressing
        each of the needs outlined above (for example: integrating extension activities
        or other materials for students who already know something about the topic)\r

        - How will you address or emphasize the connection between lessons in this
        sequence? \r
        \r
        <br>\r
        - **Plan for catching up absent students:**\r
        \r

        - How will absent students catch up on activities they missed? \r
         - How
        will you use the fact that the lessons in this sequence are related and build
        on one another to address make-up work? \r
        \r
        You can type out your teaching
        and student support plan in the box below, or you can upload a word doc or
        pdf file. \r
        \r
        ## Getting Credit for Completing this Task\r
        \r
        #### Task
        Review Details\r
        \r
        If this module is listed as  your “focus area”, then
        your response to the prompt above will be shared anonymously and reviewed
        by your peers, and you will review the work done by other teachers. Reviewers
        will be looking for thoughtful and thorough answers that demonstrate that
        you have spent time considering how the lesson will play out in your own classroom.
        Reviewers will have an opportunity to give feedback on your submission, and
        you can respond to that feedback and resubmit. \r
        \r
        In order to get credit
        for completing this task, two reviewers need to agree that you have responded
        to the prompts fully. If reviewers don’t feel comfortable making a decision
        about your task submission, they can elevate to a facilitator to review. You
        will always have a chance to address feedback from your reviewers and resubmit
        your task! Reviewer feedback will show up at the bottom of this page, once
        it’s available. \r
        \r
        <br><br>
      'Lessons 4 - 6: Teaching and Student Support Plan_markdown_instruction': |-
        <br><br>\r
        >
        **NOTE: before you start this task, make sure you’ve reviewed the lesson resources
        in this module, and have a good sense of how the lesson works. If you haven’t
        already reviewed the materials, do that now and come back to this task later.**\r
        \r
        #
        Lessons 4 - 6: Teaching and Student Support Plan\r
        \r
        ## Task Description\r
        \r
        Now
        that you have a better sense of this lessons in this sequence, let’s think
        about the types of supports students will need in order to be successful.
        Since the curriculum is based on inquiry learning, lessons feature activities
        that engage students in discovering core concepts themselves. It’s important
        to think through implementation plans and student support. In this task you
        will make a plan for teaching and student support **for one of the lessons
        in this sequence** that takes into account differentiation strategies and
        make-up work for absent students. Your teaching and student support plan should
        cover the following: \r
        \r
        \r
        - **Which lesson in the sequence are you
        discussing?** \r
        \r
        - **Details on how you will implement and differentiate
        the lesson:**\r
        \r
         - An outline of any changes you will need to make to
        the lesson to fit your local constraints or context (for example: pacing and
        time, dealing with classroom setup, etc). \r
         - An overview of the types
        of student needs you’ll likely need to support in your classroom (for example:
        students who are struggling to understand the underlying concept; students
        who are already familiar with the concept, but still have room to learn more;
        etc)\r
         - Your plan for addressing each of the needs outlined above (for
        example: integrating extension activities or other materials for students
        who already know something about the topic)\r
         - How will you address or
        emphasize the connection between lessons in this sequence? \r
        \r
        <br>\r
        -
        **Plan for catching up absent students:**\r
        \r
         - How will absent students
        catch up on activities they missed? \r
         - How will you use the fact that
        the lessons in this sequence are related and build on one another to address
        make-up work? \r
        \r
        You can type out your teaching and student support plan
        in the box below, or you can upload a word doc or pdf file. \r
        \r
        ## Getting
        Credit for Completing this Task\r
        \r
        #### Task Review Details\r
        \r
        If
        this module is listed as  your “focus area”, then your response to the prompt
        above will be shared anonymously and reviewed by your peers, and you will
        review the work done by other teachers. Reviewers will be looking for thoughtful
        and thorough answers that demonstrate that you have spent time considering
        how the lesson will play out in your own classroom. Reviewers will have an
        opportunity to give feedback on your submission, and you can respond to that
        feedback and resubmit. \r
        \r
        In order to get credit for completing this
        task, two reviewers need to agree that you have responded to the prompts fully.
        If reviewers don’t feel comfortable making a decision about your task submission,
        they can elevate to a facilitator to review. You will always have a chance
        to address feedback from your reviewers and resubmit your task! Reviewer feedback
        will show up at the bottom of this page, once it’s available. \r
        \r
        <br><br>
      Limited Quantity of Blocks Test_markdown_instruction: |-
        Get me to the pig by
        adding only one block.
      Luigi's Pizza 1_markdown_instruction: |-
        Welcome to Luigi's Pizza! To order
        a pizza, type the name of a topping into the `cost` function, and we'll return
        the price of that pizza. Try ordering a pepperoni pizza to start.
      Luigi's Pizza 2_markdown_instruction: |-
        Right now there are only four choices
        available at Luigi's pizza - let's fix that! Add a couple of new toppings
        to the conditional block in the `cost` function. Once you've added your toppings,
        test out the function to make sure it works.
      Luigi's Pizza 3_markdown_instruction: |-
        That's better, everyone loves more
        variety in their pizza toppings! But you still can't please everyone, and
        folks are coming in to order toppings that Luigi doesn't have. Instead of
        saying no to those people, could you update the _else_ clause so that we charge
        them a premium for toppings that we don't normally offer? Let's charge $10,000
        for a topping we don't carry.
      Luigi's Pizza 4_markdown_instruction: |-
        Free Play: What can you do to make Luigi's
        cost function even more useful? Try one (or more) of the following:  \r
        \r
        -
        Create a new function to display an image of the chosen pizza\r
        - Create
        a function that allows for ordering multiple pizzas (the same, or with different
        toppings)\r
        - Create a function that allows you to add a coupon code for
        a 30% discount
      MC Agent Freeplay_markdown_instruction: |-
        **Freeplay:** Now it's up to you!
        Use the Agent's code to help you explore this world.
      MC_2017_Ryan_02_markdown_instruction: |-
        Code like this can be made even shorter
        using loops!  \r
        \r
        Now get the Agent to the pressure plate using a `repeat`
        loop to help him move forward.
      MC_HOC_2017 Agent Test_markdown_instruction: |-
        Click "Run" to move the player
        using the **arrow keys**.  \r
        \r
        To pass this level, you will need to get
        to the door and open it (using the **space bar**) so you can get to the orange
        square inside.
      MC_HOC_2017_01_markdown_instruction: |-
        Click "Run" to move the player using
        the **arrow keys**.  \r
        \r
        To pass this level, you will need to get to the
        door and open it (using the **space bar**) so you can get to the orange square
        inside.
      MC_HOC_2017_01_Cole_markdown_instruction: |-
        You need to collect all the tools
        on this journey. Move around using the **arrow keys**, and get to the chest
        on the path to win
      MC_HOC_2017_01_Kiki_markdown_instruction: "To play this level, click the orange\n\"Run\"
        button beneath the play space, then move the player around using the\n**arrow
        keys**.  "
      MC_HOC_2017_01_RETRY_markdown_instruction: |-
        The door is locked, but the Agent
        is here to help!\r
        \r
        Snap a `move forward` block to the bottom of the `when
        run` block in the workspace to get the Agent to the pressure plate [PressurePlate_Up],
        then press "Run" and use the arrow keys to move out of the house to collect
        the **chest** [chest].
      MC_HOC_2017_02_markdown_instruction: |-
        The player needs to get into that secret
        grove.  Help The Agent open the gate by writing code to get him to the pressure
        plate.
      MC_HOC_2017_02_Cole_markdown_instruction: "{currentPlayerName} is headed on\nan
        adventure! To help, get the **map** [map_empty] behind the locked door\non
        the right. \\r\n \\r\nSnap the code into the workspace to move the Agent\nto
        the pressure plate [PressurePlate_Up] so that {currentPlayerName} can get\nthrough. "
      MC_HOC_2017_02_Kiki_markdown_instruction: |-
        The player is headed out on an adventure,
        but first they have to get the torch that is hidden on the other side of that
        locked door. \r
        \r
        Program the Agent to move forward twice to follow the
        white path and get to the pressure plate so he can open the door for the player.
      MC_HOC_2017_02_Will_markdown_instruction: |-
        To finish this level, the player
        needs to get to the orange square inside of the Secret Grove, which is behind
        the locked door.  \r
        \r
        The code in the workspace will make the Agent move
        forward twice to get to the pressure plate and open the door for Alex or Steve.
      MC_HOC_2017_03_Cole_markdown_instruction: "{currentPlayerName} continues on\nthe
        adventure and needs the **compass** [compass] to prepare for the trip.  \\r\n
        \  \\r\nCode\nthe Agent to open the gate. "
      MC_HOC_2017_03_Kiki_markdown_instruction: |-
        The player's adventure will begin
        behind the locked door, in the Secret Grove!  \r
        \r
        \r
        Help The Agent open
        the door by writing code to get him to the pressure plate.
      MC_HOC_2017_04_markdown_instruction: |-
        Change the loop from the last puzzle
        to help the Agent make a path over the wider part of this river.
      MC_HOC_2017_04POINT5_Cole_markdown_instruction: |-
        You made it out of the swamp!  Now,
        get the player safely to the orange square.\r
        \r
        Help The Agent clear the
        path by finding a simple pattern and using loops to cross the first two pressure
        plates.
      MC_HOC_2017_04POINT5_RYAN_markdown_instruction: |-
        You made it across! \r
        \r
        Now,
        get {currentPlayerName} safely through the maze to collect the **axe** [diamond_axe]
      MC_HOC_2017_04_Cole_markdown_instruction: "The Agent can move across water!
        \ \\r\n\n\\r\nUse a `repeat` loop to solve this puzzle and help {currentPlayerName}\nget
        to the **bucket** [bucket_empty] behind the door. "
      MC_HOC_2017_04_Kiki_markdown_instruction: |-
        The entry to the Secret Grove led
        to this beautiful Oasis!  To pass this level, the player needs to get to the
        orange square in the cabana.  \r
        \r
        Use a `repeat` loop to help the Agent
        get all the way up to the pressure plate, which opens the cabana door.
      MC_HOC_2017_05_markdown_instruction: |-
        Loops are not always helpful.\r
        \r
        These
        cacti are not growing in an obvious pattern, so a loop would not clear them
        correctly.  Instead, we've given you a function called `destroy and move`
        that will do the hard work for you each time the Agent gets to an obstacle.
      MC_HOC_2017_05_Cole_markdown_instruction: |-
        Oh no, the bridge is out! \r
        \r
        Code
        the Agent to rebuild the bridge using the `place` block so that {currentPlayerName}
        can get to the **shovel** [diamond_shovel].
      MC_HOC_2017_05_Josh_markdown_instruction: |-
        Oh no, the bridge is out!\r
        \r
        Help
        the Agent rebuild the bridge so that the player can get to the **shovel**.
      MC_HOC_2017_05_Kiki_markdown_instruction: |-
        It's time for the player to leave
        the Secret Grove and continue the adventure, but the bridge is out! \r
        \r
        Help
        the Agent rebuild the bridge, then move to the wooden plank so that the player
        can get to the orange square.
      MC_HOC_2017_06_Cole_markdown_instruction: "Another river, but this one is much\nwider!
        \\r\n \\r\nFix this code to help the Agent build a bridge so that {currentPlayerName}\ncan
        get to the **pickaxe** [diamond_pickaxe]. "
      MC_HOC_2017_06_Josh_markdown_instruction: |-
        Another river, but this one is much
        wider!  \r
        \r
        Fix this code to help the Agent build a bridge across this
        river.
      MC_HOC_2017_06_Kiki_markdown_instruction: |-
        Another river, but this one is much
        wider!  \r
        \r
        Fix this code to help the Agent build a bridge across the
        water.
      MC_HOC_2017_07_Cole_markdown_instruction: "There's ice in the way!  \\r\n \\r\nThe\n`clear
        path` function can help you destroy the ice and get {currentPlayerName}\nto
        the Minecart [minecart_normal]! "
      MC_HOC_2017_07_Kiki_markdown_instruction: "Loops are not the only way to repeat\ncode!
        \ \\r\n\\r\nHere, we've given you a function called `clear cacti` that\nwill
        do the hard work of clearing three cacti every time you use it.  Use\ntwo
        `clear cacti` blocks to clear the path to the orange square. "
      MC_HOC_2017_07a_Kiki_markdown_instruction: |-
        Now, edit this loop to help the
        Agent clear a path to the orange square.
      MC_HOC_2017_08_Cole_markdown_instruction: |-
        Now, instead of destroying before
        you move, you will need to place a block.  \r
        \r
        Change the provided function
        to work for the desert.
      MC_HOC_2017_08_Kiki_markdown_instruction: |-
        Now, instead of destroying cacti,
        you will need to place stone over lava, then destroy standstone.  \r
        \r
        Change
        the function to work for this level.
      MC_HOC_2017_08_RY_markdown_instruction: |-
        Now there are **TWO** functions to
        choose from!\r
        \r
        Use these functions to quickly build a bridge across the
        lava for {currentPlayerName}.
      MC_HOC_2017_08_Will_markdown_instruction: |-
        Now there are **TWO** functions
        to choose from!\r
        \r
        Use these functions to quickly build a bridge across
        the lava for the player.
      MC_HOC_2017_09_Cole_markdown_instruction: |-
        Use functions to help the Agent
        destroy the giant blocks of dirt that are blocking the player's path to the
        pressure plate.
      MC_HOC_2017_09_Kiki_markdown_instruction: "This starting code cannot be removed.\\r\n\\r\nAdd\ncommands
        to the `create trail` function so that the program in the workspace\nwill
        get the Agent to the pressure plate. "
      MC_HOC_2017_09_RS_CLONE_markdown_instruction: |-
        Fix this function to fill in
        the holes, then step on the pressure plate to clear a path to the torch.
      MC_HOC_2017_10_Cole_markdown_instruction: |-
        Use the functions to clear a path
        for the mine cart, and walk into the Nether Portal.
      MC_HOC_2017_10_Cole_old_markdown_instruction: |-
        Try building a function from
        the beginning that will make it easier for the Agent to finish this minecart
        and get the player to the orange square.
      MC_HOC_2017_10_Kiki_markdown_instruction: |-
        Try building a function from the
        beginning that will make it easier for the Agent to finish this minecart and
        get the player to the orange square.
      MC_HOC_2017_10_RETRY_markdown_instruction: "Can you spot the difference between\nthe
        two functions in your workspace? \\r\n \\r\nUse these functions with other\ncode
        from the toolbox to clear a path for the Minecart, then collect the **Flint\nand
        Steel** [flint_and_steel]. \\r\n "
      MC_HOC_2017_10_RYAN_markdown_instruction: |-
        Try building functions from the
        beginning that will make it easier for the Agent to finish this minecart and
        get the player to the orange square.
      MC_HOC_2017_10_RYAN2_markdown_instruction: |-
        Try building functions from the
        beginning that will make it easier for the Agent to finish this minecart and
        get the player to the orange square.
      MC_HOC_2017_11_Kiki_markdown_instruction: |-
        Now it's up to you! See what you
        can create around this frozen lake.
      MC_HOC_2017_13_Cole_markdown_instruction: |-
        **Freeplay:** Now it's up to you!
        Use the Agent's code to help you explore this world.
      MC_HOC_2017_4.5v2_markdown_instruction: |-
        You made it out of the swamp!  Now,
        get the player safely to the orange square.\r
        \r
        Help The Agent clear the
        path by finding a simple pattern and using loops to cross the first two pressure
        plates.
      MC_HOC_2017_Ali_markdown_instruction: "Look at the functions below.  How can\nyou
        use them to avoid the Ghasts and help {currentPlayerName} make it safely\nto
        the **Enchanted Book** [book_enchanted]?  "
      MC_HOC_2017_FP10x10_markdown_instruction: "**Freeplay:** Now it's up to you!\nCan
        you challenge yourself to collect all of the diamonds in this level? "
      MC_HOC_2017_FP10x10_RE_markdown_instruction: |
        **Freeplay:** Now it's up to
        you! Can you challenge yourself to collect all of the diamonds in this level?
      MC_HOC_2017_FP20x20_markdown_instruction: |-
        **Freeplay:** Now it's up to you!
        Use the Agent's code to help you explore this world.
      MC_HOC_2017_Ryan_03_markdown_instruction: |-
        Did you know that you can put more
        than one piece of code into a loop?  \r
        \r
        Use a `repeat` loop to help the
        Agent build a bridge over the river by placing blocks in the water.
      MC_HOC_2017_Ryan_05_markdown_instruction: |-
        Sometimes you need to knock down
        things that get in the way of your player.  \r
        Use the `destroy` block to
        clear all of the cactii between the Agent and the pressure plate.
      MC_HOC_Kiki_02_markdown_instruction: |-
        Someone needs to be on the pressure plate
        before the side door will open.  Help the Agent get to the plate so the player
        can leave the house.
      MSM Defining Vars 1_markdown_instruction: |-
        Write a program that produces a
        50 pixel solid green triangle.
      MSM Defining Vars 2_markdown_instruction: |-
        If we wanted to make fifty green
        triangles, it would be a pain to repeat that block of code 50 times. Let's
        create a variable called `my-shape` and put the code for a 50 pixel solid
        green triangle inside.
      MSM Defining Vars 3_markdown_instruction: |-
        Take your `my-shape` variable and
        use it with this provided code to draw two identical green triangles that
        are 50 pixels in size.
      MSM Defining Vars 4_markdown_instruction: |-
        Edit your `my-shape` variable so
        that it draws 75 pixel solid red stars.
      Making Music_markdown_instruction: |-
        Today you’re going to learn how to use
        and create **functions**.\r
        \r
        Creating a function lets you make your own
        blocks! There are two parts to a function: \r
        \r
        Making a newly named block
        that has all of the code you want to run inside of it. \r
        -xml of function
        definition- \r
        \r
        The single green block itself that you use, or call, to
        run the function you created.\r
        -xml of function call-\r
        \r
        Prepare to
        get familiar with functions, learn how to edit them, and create your own!
      Making Music_2018_markdown_instruction: |-
        Today you’re going to learn how to
        use and create **functions**.\r
        \r
        Creating a function lets you make your
        own blocks! There are two parts to a function: \r
        \r
        Making a newly named
        block that has all of the code you want to run inside of it. \r
        -xml of function
        definition- \r
        \r
        The single green block itself that you use, or call, to
        run the function you created.\r
        -xml of function call-\r
        \r
        Prepare to
        get familiar with functions, learn how to edit them, and create your own!
      Matt Test Level_markdown_instruction: 'Do 0 bits weigh less than 1 bits?

'
      Middle School Hackathon Pt 1_markdown_instruction: |-
        # MS Hackathon: Fancy Drawing\r
        \r
        The
        blocks you've been provided are those that a student in CS Discoveries would
        likely have available after a week or so of using Game Lab. No sprites yet,
        but you've **just been introduced to some powerful programming constructs
        like generating random numbers, storing values in a variable, and looping.**
        You'll also be pretty familiar with the drawing commands at this point.\r
        \r
        #
        Do This\r
        \r
        * Using only the tools provided to you, **make something awesome!!**\r
        *
        The likely project at this point would be an **animated card** but feel free
        to go other directions if you like.\r
        * **Avoid complex variable arithmetic**
        if you can. You "don't know it" yet.\r
        * **Avoid referencing the iterator
        in your for loops**. At this point it's just a repeat loop.
      Middle School Hackathon Pt 2_markdown_instruction: |-
        # MS Hackathon: Sprites
        and Interactivity\r
        \r
        You now can **create sprites, add images, manipulate
        their properties, and perform simple variable arithmetic to update their values
        (e.g. `sprite.scale = sprite.scale + 1;`)**. You've also been introduced
        to conditional statements and know how to use them to get some interactive
        behavior with the mouse and keyboard.\r
        \r
        # Do This\r
        \r
        * Using only
        the tools provided to you **make something awesome!**\r
        * The likely target
        project here might be a **simple game** or **interactive visualization**.\r
        *
        You don't yet know about **groups, loops, collisions**, or more magical properties
        like **velocity or rotationSpeed**\r
        \r
        **These commands are not in the
        block palette but feel free to use**\r
        \r
        * `mySprite.mouseActive = true;`
        will make your sprite track mouse events\r
        * `mySprite.mouseIsOver` and `mySprite.mouseIsPressed`
        are booleans you can now use to sense mouse-to-sprite interactions.\r
        \r
        **To
        add sprites to images follow the pattern below**\r
        \r
        ```\r
        var spriteImage,
        sprite;\r
        \r
        //You'll need to create a preload function to load the image.\r
        function
        preload(){\t\t\t\r
            spriteImage = loadImage("imageURL");\r
        }\r
        \r
        //Create
        your sprite and add the image\r
        function setup(){\r
            sprite = createSprite(200,200,10,10);\r
            sprite.addImage("someName",
        spriteImage);\r
        }\r
        \r
        //Draw your sprites.\r
        function draw(){\r
        \tbackground(255,255,255);\r
        \tdrawSprites();\r
        }\r
        ```
      Mike Pair Programming_markdown_instruction: Here are markdown instructions
      Mike Test Bee Conditionals 1_markdown_instruction: |-
        This cloud is blocking
        my view! \r
        \r
        Check to see if there's a flower under the cloud, and only
        get nectar if there's a flower.   \r
        Be careful, it can change!
      Mike Test Bee Conditionals 2_markdown_instruction: |-
        **Assessment:** Collect
        all of the nectar.  \r
        Be careful not to try to collect nectar from a purple
        flower if it doesn't have any.
      MikeTest1_markdown_instruction: Markdown
      Modular Arithmetic_markdown_instruction: |-
        # Modular Arithmetic\r
        \r
        \r
        The
        modulo operation (which gives you the remainder of dividing two integers)
        is important in computer science and it turns out to be useful in many contexts
        including encryption. It’s actually not computationally intensive to compute
        a single modulo on a computer; it’s as fast as dividing two numbers. The commutative
        properties of modulo and numbers with large exponents were discovered to be
        the key ingredients for modern day asymmetric encryption.\r
        \r
        \r
        The link
        below introduces the concept of modular arithmetic, and explains the Diffie-Hellman
        key exchange (described in lesson 7 using an analogy with Alice, Eve, and
        Bob).
      NEW Course 4 Artist Functions 1_markdown_instruction: |
        Can you draw a square
        that is 100 pixels in length, using a repeat loop?\r
        \r
      NEW Course 4 Artist Functions 10.1_markdown_instruction: |-
        Use the functions
        from the previous puzzles to draw this pattern.
      NEW Course 4 Artist Functions 10_markdown_instruction: |
        Click "edit" to fill
        out the blocks in the function definition to make a 40 pixel square.\r
        \r
      NEW Course 4 Artist Functions 11_markdown_instruction: |-
        Now we want to create
        a new function called `draw a line of squares` that draws six squares all
        in a row.  \r
        \r
        Can you build this function using this `draw a square 20`
        function that we created for you?\r
        <br/><br/>\r
        \r
        *Note: See that we've
        changed the pen to be much thinner. Click "edit" on the `draw a square 20`
        function to see how!*
      NEW Course 4 Artist Functions 12_markdown_instruction: |-
        Use the `draw a line
        of squares` function from the last puzzle to draw this pattern.
      NEW Course 4 Artist Functions 13_markdown_instruction: |-
        Can you draw a star
        shape using the `draw a line of squares` function?  \r
        \r
        (Be sure to `move
        forward` 60 pixels before you turn 144 degrees!)
      NEW Course 4 Artist Functions 14_markdown_instruction: |-
        It's free-play time!
        Draw anything you like!
      NEW Course 4 Artist Functions 2_markdown_instruction: |-
        Can you draw 3 squares
        20 pixels apart from one another? \r
        \r
        Each square is 100 pixels in size.
      NEW Course 4 Artist Functions 3_markdown_instruction: |-
        Here is a new type of
        Block. It is called a `function` block. Click "edit" then fill it with the
        code for drawing a square with 100 pixel sides. \r
        \r
        When you're done
        editing the function, click "Close" to go back to your program.
      NEW Course 4 Artist Functions 4_markdown_instruction: "Use the `draw a square`\nfunction
        to draw this pattern. "
      NEW Course 4 Artist Functions 5_markdown_instruction: |
        How did the `draw a
        square` block know what commands to run? Click on "edit" in the `draw a
        square` function block. The blocks in the function editor are the definition
        that make up `draw a square`. \r
        \r
        <br/>\r
        When you're done looking around,
        click "Save and Close" and then "Run."\r
        \r
      NEW Course 4 Artist Functions 6_markdown_instruction: |
        Using the "draw a square"
        function block, can you draw this picture? Hint: each square is 20 pixels
        apart.\r
        \r
      NEW Course 4 Artist Functions 7_markdown_instruction: "Are you getting the\nhang
        of how to use function blocks? Let's modify `draw a square` so that\nit draws
        squares that are 200 pixels in size. \\r\n\\r\nClick on \"edit\" to\nenter
        the `draw a square` function editor.\\r\n\\r\nRemember to click on \"Close\"\nto
        get out of the function editor. "
      NEW Course 4 Artist Functions 8_markdown_instruction: |-
        We have created a new
        function for you called `draw a triangle`.  Can you edit the function definition
        to draw a triangle with 100 pixel sides?
      NEW Course 4 Artist Functions 9_markdown_instruction: |-
        Can you solve this by
        adding only one block?
      NEW Course 4 Artist Functions inspire_markdown_instruction: |
        <img src="https://images.code.org/5e50e6ef0cafb40a8b697ea158047412-image-1441260841174.11.12.png"
        width="250px"/>\r
        \r
        **Free-Play Inspiration:** You've now learned everything
        you need to know to make a pattern like this! \r
        \r
        If this picture inspires
        you, try to make something similar. Otherwise, create something all your own.
        \r
        \r
      NEW Course 4 Artist Params 1_markdown_instruction: |
        Let's define this function
        to draw a square with 50 pixel sides. Click "edit" to get started.\r
        \r
      NEW Course 4 Artist Params 10_markdown_instruction: |-
        Create a `draw a hexagon`
        function block with a length parameter. \r
        \r
        This hexagon has sides that
        are 100 pixels in length.
      NEW Course 4 Artist Params 11_markdown_instruction: |-
        Can you figure out how
        to draw this shape? \r
        \r
        Edit the function to use the `sides` parameter.
      NEW Course 4 Artist Params 12_markdown_instruction: |-
        Can you complete this
        drawing? \r
        \r
        The sides of all the shapes are 100 pixels long.
      NEW Course 4 Artist Params 12a_markdown_instruction: |-
        This image is similar
        to the last.  \r
        \r
        Can you use a `for` loop with your function to make
        this design?
      NEW Course 4 Artist Params 13_markdown_instruction: |-
        Let's edit this `draw
        a polygon` function. \r
        \r
        It already has a `sides` parameter. Now, let's
        add a `length` parameter. \r
        \r
        <br/>\r
        The perimeter of each shape is
        200 pixels. Do you remember the equation to make shapes the same size when
        they have a different number of sides?
      NEW Course 4 Artist Params 14_markdown_instruction: "Edit `draw a spiral edge`\nto
        use `length` and `sides` parameters, then recreate these shapes.\\r\n\\r\n-\nThe
        smallest side length of the square is 5 pixels.\\r\n- The smallest side\nlength
        of the triangle is 10 pixels.\\r\n- The smallest side length of the\nhexagon
        is 2 pixels.\\r\n- All increase to 100 pixels.  "
      NEW Course 4 Artist Params 15_markdown_instruction: |-
        **Freeplay:** Here are
        the functions you've written, and some more for you to play with. Play with
        the pen width to see how different your drawings look!
      NEW Course 4 Artist Params 2_markdown_instruction: |-
        Create a `draw triangle`
        function from scratch that makes a triangle with  50 pixel sides.
      NEW Course 4 Artist Params 3_markdown_instruction: |-
        Now let's use the function
        to draw 5 triangles in a row. \r
        \r
        Each triangle is 30 pixels apart.
      NEW Course 4 Artist Params 4_markdown_instruction: |-
        Do you notice anything
        different about these function blocks? Click “Run” to see what happens.
      NEW Course 4 Artist Params 5_markdown_instruction: |-
        Replace the `???` in the
        `length` parameter input block. \r
        \r
        The pentagon has 100 pixel sides.
      NEW Course 4 Artist Params 6_markdown_instruction: "Fill in the `length` parameter\nto
        draw these shapes by replacing the `???` with the right numbers.  \\r\n\\r\nThe\nsquare
        and triangle have 100 pixel sides.  \\r\nThe hexagon sides are 75 pixels\nlong. "
      NEW Course 4 Artist Params 7_markdown_instruction: |-
        Can you complete this drawing?
        \r
        \r
        The sides of each triangle are 25 pixels larger than the last.  \r
        The
        first triangle has 25 pixel sides.
      NEW Course 4 Artist Params 8_markdown_instruction: |-
        The code for this triangle
        function is broken. \r
        \r
        Can you edit the function to fix it, and then
        make triangles of length 25, 50, and 75?
      NEW Course 4 Artist Params 9_markdown_instruction: |-
        Click "edit" to fill
        in the function definition of `draw a square` and add a parameter.  \r
        It
        should take a length parameter just like the triangle. \r
        \r
        **This time,
        draw 3 squares:** 25, 50 and 75 pixels in length. The lefthand corners are
        each 100 pixels away from the last.
      NEW Course 4 Artist Params inspire_markdown_instruction: |-
        <img src="https://images.code.org/1df195df9d808f0dd539bef0f5c2958b-image-1443049871563.02.54.png"
        width="250px"/>\r
        \r
        **Free-Play Inspiration:** You've now learned everything
        you need to know to make a pattern like this! \r
        \r
        If this picture inspires
        you, try to make something similar. Otherwise, create something all your own.\r
        \r
        Notice:
        We've used the `set alpha` block to make the "petals" fade toward the outside.
      NEW Course 4 Artist Vars 12_markdown_instruction: |-
        Now, recreate the algorithm
        from the last level and create a pentagon with sides of length 150.
      NEW Course 4 Artist Vars 2_markdown_instruction: "Drag a number block to the\n`set
        length` block and to the `repeat _ times` block to draw a set of 50 pixel\ntriangles. "
      NEW Course 4 Artist Vars 4_markdown_instruction: |-
        Let's try it again! \r
        \r
        Can
        you set the `length` variable to 60 to make this cool design with hexagons?
      NEW Course 4 Artist Vars 6_markdown_instruction: |-
        Draw this pattern of pentagons
        with 100 pixel sides by setting the right value for `length` and dropping
        the `length` variable into all of the the correct places. \r
        \r
        See how
        you only have to set the value for `length` once, and the code uses the right
        value everywhere?
      NEW Course 4 Bee For Loops 10a_markdown_instruction: |
        Ready for a challenge?  Take
        what you've learned about loops and try to solve this problem. \r
        \r
        Remember:
        You may have to run through solutions multiple times before you figure out
        all of the steps.\r
      NEW Course 4 Bee For Loops 2_markdown_instruction: |-
        Add the code necessary
        to make sure the bee collects all the nectar. \r
        \r
        Look at how much code
        you need for this puzzle!   \r
        (We'll learn a simpler way in the next puzzle.)
      NEW Course 4 Bee For Loops 3_markdown_instruction: "Ah, the `for loop` makes\nthis
        much easier! All the code you need is here, take a look at how it is\nput
        together then click `Run` to see how it works. "
      NEW Course 4 Bee For Loops 4 4_markdown_instruction: |-
        Now we need to `move
        forward` `counter` times, then `get nectar` `counter` times.  Can you use
        two `repeat` loops to solve this challenge?
      NEW Course 4 Bee For Loops 4_markdown_instruction: "Replace the ??? in the\n`for
        loop` with the largest amount of nectar the bee has to collect. "
      NEW Course 4 Bee For Loops 5 5_markdown_instruction: |-
        Are you getting the hang
        of using the `for loop`? Let's help the bee get the rest of the nectar.
      NEW Course 4 Bee For Loops 5_markdown_instruction: |-
        You can also use a `for
        loop` to count down. Try gathering this nectar by counting down from 5 to
        1 by 1.
      NEW Course 4 Bee For Loops 6_markdown_instruction: |-
        The last number in your
        for loop is called the `increment`.  Each time the loop is run, the counter
        variable changes by the value of the increment. \r
        \r
        Try collecting these
        flowers using an increment of 2.
      NEW Course 4 Bee For Loops 7_markdown_instruction: |
        Now, let's combine the
        `counter` variable with a math block! How can you use the `counter` variable
        to navigate this garden with the fewest number of blocks possible? \r
        \r
        What
        do you need to do to collect 3, 6, 9, 12, 15 nectar this time?  The secret
        is in the `counter` variable!\r
        \r
        <br/>\r
        Remember: If your loop is counting
        up, the increment is added to your `counter` variable each time through.\r
        \r
      NEW Course 4 Bee For Loops 8_markdown_instruction: |
        You've got this!  \r
        \r
        What
        should your increment be to collect 3, 6, 9, 12, 15 nectar?\r
        \r
      NEW Course 4 Bee For Loops 95_markdown_instruction: |-
        Take a look at each piece
        of the `for loop` that you have just created.  Can you figure out which numbers
        you need to double to solve this puzzle? Why does it work?
      NEW Course 4 Play Lab Params 11_markdown_instruction: |
        It's free play time!
        Have fun with all the blocks in your tool box.  \r
        <br/>\r
        \r
        <h5>\r
        <details>\r
        <summary><b>Need
        some ideas?</b></summary>\r
        \t<br/>\r
        \t<h5>\r
        \t\t<ul>\r
                \t<li><strong>Tag</strong>
        - Have character 2 patrol and use your arrow keys to make character 1 chase
        until they collide. </li>\r
                    <li><strong>Whack-a-Sprite</strong>
        - Have a character constantly pop up at a random location. Award points for
        clicking the sprite before it disappears. </li>\r
                    <li><strong>Best
        Guess</strong> - Make both characters disappear, change location to a random
        spot, then reappear as a random character.  Click on the first one and get
        a point...but if you click on the second one you LOSE a point! </li>\r
                </ul>\r
        \t</h5>\r
        </details>\r
        </h5>\r
      NEW Course 4 Play Labs For Loops 8a_markdown_instruction: "**Challenge:** How\nwould
        you use the `for loop` to go from top to bottom and get every character\nto
        say their actor number, then vanish from the screen? "
      NetSim Standalone Automatic DNS_markdown_instruction: |-
        # Domain Name System
        (DNS)\r
        \r
        In this version of the Internet Simulator, a Domain Name System
        (DNS) is provided for you and knows the IP addresses of all connected computers.
        You can only see the hostnames of other connected computers.   \r
        ![](https://images.code.org/3ac2c23ed610abc7e785ec85054e89a9-image-1434746293690.PNG)\r
        \r
        The
        address of the DNS is always &lt;yourRouterNumber&gt;.15. Send a message with
        protocol `GET [hostname]`, for example `GET Bob2`, to the DNS to get another
        student's address. You can keep track of the responses in the Notes section
        in the DNS tab.  \r
        ![](https://images.code.org/c81c1a6b876eb46674a7f7e5e70506ce-image-1434746797267.png)\r
        \r
        Your
        teacher will hand out more specific instructions for this activity.
      NetSim Standalone Broadcast_markdown_instruction: |-
        # Broadcast messages in
        the Internet Simulator\r
        \r
        In this version of the Internet Simulator, you
        can connect to up to 5 other people in a room. When you send messages in the
        room, everyone receives them. What are some of the challenges of this system,
        and how might you solve them?\r
        \r
        Your teacher will hand out more specific
        instructions for this activity.
      NetSim Standalone Classroom Routers_markdown_instruction: |-
        # Routing messages
        \r
        \r
        In this version of the Internet Simulator, everyone connects to a
        router and has a specific address. To send messages, you have to address your
        message to the specific address of the recipient, and the router will take
        care of delivering it to the right computer. If there are other routers created
        in your class, ask for the address of one of your classmates and send them
        a message! View the Log Router to see the path the messages have taken through
        the network.\r
        \r
        Your teacher will hand out more specific instructions
        for this activity.
      NetSim Standalone Freeplay_markdown_instruction: |-
        # Internet Simulator Freeplay\r
        \r
        In
        this version of the Internet Simulator, most of the options are turned on
        and are configurable. Messages can be sent to any router within the class,
        and messages will take different paths to reach their destination.\r
        \r
        Your
        teacher will hand out more specific instructions for this activity.
      NetSim Standalone Manual DNS_markdown_instruction: |-
        # Introduction to DNS\r
        \r
        In
        this version of the simulator you can't see the other students' addresses.  Instead,
        one of you must act as a name service, to help share addresses with each other.
        From the DNS tab in the left column, one person can take over as DNS.\r
        \r
        Your
        teacher will hand out more specific instructions for this activity.
      NetSim Standalone Packets TCP_markdown_instruction: |-
        # Packets and Making a
        Reliable Internet\r
        \r
        Messages on the Internet can take many paths to get
        to their destination, and sometimes along the way the message gets dropped.
        In this version of the Internet Simulator:\r
        \r
        - There is a 10% chance
        of a packet being dropped\r
        - Multiple packets may take different paths to
        the destination\r
        - The default max packet size is set to 6 additional characters\r
        \r
        Your
        teacher will hand out more specific instructions for this activity.
      NetSim Standalone SendAB_markdown_instruction: |-
        # Sending bits with the Internet
        Simulator\r
        \r
        You and your partner share a single wire that can only be
        in state A or state B. You can set the wire to either state at any time, and
        you can read the state of the wire at any time. Can you figure out a way to
        effectively communicate with just this system?\r
        \r
        Your teacher will hand
        out more specific instructions for this activity.
      NetSim Standalone Sending Numbers Ascii_markdown_instruction: |-
        # Sending Text
        with the Internet Simulator\r
        \r
        Now that you've transmitted information
        represented as decimal numbers, you can map those numbers to text characters
        to send text-based information back and forth. With a text-based protocol,
        you can easily represent and communicate all kinds of information. \r
        \r
        Your
        teacher will hand out more specific instructions for this activity.
      NetSim Standalone Sending Numbers_markdown_instruction: |-
        # Sending Numbers
        with the Internet Simulator\r
        \r
        You and your partner can now reliably send
        messages back and forth without extra coordination! While you're always sending
        bits back and forth, you can also represent those bits as decimal numbers.
        What kinds of information can you represent with this system? \r
        \r
        Your
        teacher will hand out more specific instructions for this activity.
      NetSim_Variant2_markdown_instruction: |-
        ## NetSim: Variant 2\r
        \r
        Students
        connect directly to one another and send entire packets back and forth, exploring
        systems of encoding data.
      New Minecraft Hero Project_markdown_instruction: |-
        **Freeplay:** Now it's up
        to you! Use the Agent's code to help you explore this world.
      Nike Example Brand Book_markdown_instruction: |
        # Brand Book\r
        \r
        Check out
        the example of a brand book\r
        \r
      October15 JoL 1_markdown_instruction: |
        Program the artist to design a face
        for your jack-o-lantern!\r
        \r
      October15 bat_markdown_instruction: |
        Freeplay: Here are the functions you've
        written, and some more for you to play with. Play with the pen width to see
        how different your drawings look!\r
        \r
      October15 ghost 1_markdown_instruction: |
        Give the ghost eyes, using the `draw
        a circle` function.\r
        \r
      October15 pumpkin 1_markdown_instruction: |
        Finish this jack-o-lantern by drawing
        the eyes and nose in any style you would like.\r
        \r
      October15 stars 1_markdown_instruction: |-
        Use loops and the `random integer`
        block to fill the night sky with stars of different shapes and sizes.
      Open text response example_markdown_instruction: |
        # Open text response example

        This
        is an example Markdown content header.

        ## YouTube video

        <iframe width="560"
        height="315" src="https://www.youtube.com/embed/nKIu9yen5nc" frameborder="0"
        allowfullscreen></iframe>

        What did you think of the video?
      Overworld Chop Tree_markdown_instruction: |-
        Wood is a very important resource.
        Many things are made from it. Walk to the tree and use the `destroy` block
        command to chop it down.
      Overworld Chop Tree_2018_markdown_instruction: |-
        Wood is a very important resource.
        Many things are made from it. Walk to the tree and use the `destroy` block
        command to chop it down.
      Overworld House Frame Chosen_markdown_instruction: |-
        Build the rest of your
        house from any material you'd like. The `repeat` command will come in handy.
      Overworld House Frame Chosen_2018_markdown_instruction: |-
        Build the rest of
        your house from any material you'd like. The `repeat` command will come in
        handy.
      Overworld Move to Sheep_markdown_instruction: |-
        Add a second `move forward`
        block to reach the sheep.
      Overworld Move to Sheep_2018_markdown_instruction: |-
        Add a second `move forward`
        block to reach the sheep.
      Overworld Place Wall_markdown_instruction: |-
        Every house starts with a wall.
        Build the first part of your house by putting the `place` and `move forward`
        commands inside the repeat loop.
      Overworld Place Wall_2018_markdown_instruction: |-
        Every house starts with a
        wall. Build the first part of your house by putting the `place` and `move
        forward` commands inside the repeat loop.
      Overworld Shear Sheep_markdown_instruction: |-
        Sheep-shearing time! Use the `shear`
        command to gather wool from both sheep.
      Overworld Shear Sheep_2018_markdown_instruction: |-
        Sheep-shearing time! Use
        the `shear` command to gather wool from both sheep.
      PDAlg 13-16 Sam Extension Puzzle_markdown_instruction: |-
        Add a second parameter
        to `onscreen?` for Sam's y coordinate and update the function so it keeps
        him safe on all four sides.
      PDAlg 17-20 Luigi Extension Puzzle_markdown_instruction: |-
        Without modifying
        your existing `cost` function, create a new `coupon` function that takes a
        pizza topping and coupon code and returns the cost of a pizza with that topping.
        If the coupon code is correct (you get to decide what it is), apply a 30%
        discount to the pizza.
      PDAlg 8-12 Rocket Height Puzzle_markdown_instruction: |-
        Let's write a `rocket-height`
        function with simple acceleration. Write a function that ensures the rocket
        is at 15 meters at 1 second, 45 meters at 2 seconds, 95 at 3 seconds, and
        165 at 4 seconds.
      PDAlg 8-12 ex dr 2_markdown_instruction: |-
        This student has created two examples
        for the function `apples` but something's not quite right. How would you
        direct this student to correct their mistake?
      PDAlg Big Game History_markdown_instruction: |-
        Now that you've played through
        a Big Game level you should see a new entry in your history. Click the _Version
        History_ button and you should see at least one version. Each time you go
        back to a Big Game level you'll get a new record in your version history
        that you can revert back to.\r
        \r
        Make sure to click _Run_ and _Finish_
        to move on to the next puzzle.
      PDAlg Big Game Remix_markdown_instruction: |-
        Here's your Big Game as you last
        left it. Try clicking the _Remix_ button to spin off a new remix of your project.
        Any changes you make after you click _Remix_ will be saved on your new remix
        and not on your main Big Game.\r
        \r
        **Clicking Remix will take you to a
        new page** - make sure you come back here and click _Run_ and _Finish_ after
        you've made a remix.
      PDAlg Classroom Culture 2_markdown_instruction: "### Strategies for facilitating\nan
        engaged computer science classroom:\n\n- Be open to learning from your\nstudents.
        This is a very valid way for you to learn something new and if the\nstudents
        see you learning from others; they'll feel more comfortable to do\nit themselves.\n-
        Be calm yet persistent when problems arise (which they will)\nbecause your
        reaction sets the tone for students. If at the first sign of\nan issue, you
        proclaim \"I'm terrible at technology. I give up,\" your students\nwill think
        it's okay to do that too. \n- Implement the \"Ask 3 and then me\"\nrule in
        your classroom, which is when students have to ask 3 classmates for\nhelp
        before they can ask the teacher that same question. This reduces the\nnumber
        of students that you have to answer individually and promotes peer\nlearning.\n-
        Take pride in their programs. Show it off, put it to work, post\nit online.
        This is a big accomplishment for you and your students that should\nbe celebrated.\n-
        Your students may not need you in the way you think they\nneed you. You don't
        need to be the expert. Ask probing questions to a student\n(even if you don't
        know the answer to the questions). Or ask the class if\nanyone has the answer.
        Or say \"I don't know; let's figure this out together\"\n-\nAsk probing questions
        to help a student instead of taking their mouse away\nto solve the puzzle
        for them. Students will be more engaged if they have to\nmove the mouse themselves.
        Also, make it a classroom rule that if a student\nis helping another student
        at a computer, they can't take the mouse from\nthem either. \n- Understanding
        how to get the help you need is an important\npart of becoming a successful
        facilitator of a computer science classroom.\nThere are a variety of ways
        to get questions answered: online groups, the\nperson sitting next to you,
        email to a mentor or peer, Code.org community\nforums, or other computer science
        educators in your district.\n\nIt's possible\nthat you might find something
        that's broken, unusable, or missing on our\nwebsite, which in the computer
        science world is called a \"bug\". Take a screenshot\nof what happened, and
        describe the problem in an email to pd@code.org. Also\ninclude what operating
        system and browser version you're using (example:\nWindows 7, Internet explorer
        9). We really appreciate teachers and users sending\nus bug reports.\n\n###
        How will you foster a healthy CS classroom environment?\nNow\nthat you know
        more about our curriculum, what practices do you want to use\nto promote a
        healthy atmosphere in your computer science classroom?'\n"
      PDAlg DR Text 1_markdown_instruction: |
        Here's the same contract from the last
        page. What could you ask this student to help them identify and correct their
        error?

        ### Question

        If you have a budget in dollars, can you write a
        function `treats` that returns the number of treats you could afford at 50
        cents each?

        ### Contract

        `treats: Number Number -> Number`
      PDAlg Design Recipe Delete_markdown_instruction: |-
        When developing complex programs
        it's not uncommon to end up with functions that you no longer want, which
        used to just crowd your functions drawer, but now you can **delete** them.
        Click the **delete** button to get rid of this function, then try creating
        and deleting a few of your own.
      PDAlg Design Recipe Required_markdown_instruction: |-
        In addition to testing
        examples, we can also _require_ that students use examples in their functions.
        Complete the Design Recipe for the `eggs` function, making sure to create
        and test your examples. (You can ignore creating examples if you want to see
        the error message.)
      PDAlg Prep on Paper_markdown_instruction: |-
        # Lesson Prep > Thinking on Paper\r
        \r
        As
        you learned in the summer PD, thinking through the Design Recipe on paper
        is an essential step for success, particularly when it comes to solving complex
        or novel problems. Print out a copy of the [Design Recipe worksheet](https://code.org/curriculum/docs/algebra/worksheets/design_recipe.pdf)
        and go through your chosen word problem as if you were a student.\r
        \r
        ##
        Put on your student hat\r
        \r
        Viewing these problems as your students will
        can help you identify potential pain points, lack of clarity, or misconceptions.
        It's sometimes difficult to drop our teacher assumptions and expectations,
        but the more authentically you can wear your student hat, the more you will
        learn about the possible difficulties in your plan.\r
        \r
        ## What's tough
        about this problem?\r
        \r
        After you complete your Design Recipe on paper,
        think about the difficult elements of your particular word problem. Where
        might students stumble, and what can you do to support them in that struggle?
        The goal here is not necessarily to remove the struggle (as that's where
        we learn the most), but to prepare for it.
      PDAlg Updates Cond_markdown_instruction: |-
        When you went to PD in the summer,
        the **Conditional** block that you were introduced to was black and allowed
        any data type to be used. This proved to be confusing, given that every other
        function we've seen always produces the same type of data. To help make conditionals
        clearer and more consistent we've replaced the single black block with a
        separate block for each data type.\r
        \r
        ![conditional blocks](//studio.code.org/script_assets/pd/newcond.png)
      PDAlg Updates Errors_markdown_instruction: |-
        Few things in programming are as
        frustrating as ambiguous or unclear error messages. When things go wrong in
        a program we rely on helpful error messages for direction, so we've spend
        a lot of time creating error messages that help direct students to solve their
        own problems.\r
        \r
        Run the provided program and use the error messages to
        try and track down the bugs.
      PDAlg Updates Space_markdown_instruction: |-
        Making use of limited programming
        space (especially on small screens) is challenging with a block based language.
        To help with this we've added a few features:\r
        \r
        - A draggable bar (three
        vertical dots) between the programming space and the game space allowing you
        to shrink the game space for more room to code.\r
        - A handful of redesigned
        blocks that take up less horizontal space (check out the new `overlay` block.)\r
        -
        The programming space will scroll vertically when the blocks extend past the
        visible screen space.\r
        - Zoom in and out using Cmd +/- (Mac) or Ctrl +/-
        (Windows)\r
        \r
        Experiment with this provided code to see how the space can
        be manipulated to deal with larger programs.
      PDAlg course goals_markdown_instruction: |
        # Documenting Your Course Goals\r
        \r
        **Now
        that you've learned more about the CS in Algebra Professional Learning Program
        and curriculum, let's consider your goals**\r
        \r
         - What are your goals
        for your CS in Algebra class?\r
         - How do you you see it integrating into
        your class, and what do you hope that you and your students get out of the
        experience?\r
        \r
        *These goals will change over time, and we'll revisit
        your response as we go through the course so we can check in on how we're
        progressing towards those goals.*\r
      PDK5 Challenges_markdown_instruction: |
        What are your biggest challenges to
        implementing Code.org's curriculum in your classroom?
      PDK5 Classroom Culture 2_markdown_instruction: "### Strategies for facilitating\nan
        engaged computer science classroom:\n\n- Be open to learning from your\nstudents.
        This is a very valid way for you to learn something new and if the\nstudents
        see you learning from others; they'll feel more comfortable to do\nit themselves.\n-
        Be calm yet persistent when problems arise (which they will)\nbecause your
        reaction sets the tone for students. If at the first sign of\nan issue, you
        proclaim \"I'm terrible at technology. I give up,\" your students\nwill think
        it's okay to do that too. \n- Implement the \"Ask 3 and then me\"\nrule in
        your classroom, which is when students have to ask 3 classmates for\nhelp
        before they can ask the teacher that same question. This reduces the\nnumber
        of students that you have to answer individually and promotes peer\nlearning.\n-
        Take pride in their programs. Show it off, put it to work, post\nit online.
        This is a big accomplishment for you and your students that should\nbe celebrated.\n-
        Your students may not need you in the way you think they\nneed you. You don't
        need to be the expert. Ask probing questions to a student\n(even if you don't
        know the answer to the questions). Or ask the class if\nanyone has the answer.
        Or say \"I don't know; let's figure this out together\"\n-\nAsk probing questions
        to help a student instead of taking their mouse away\nto solve the puzzle
        for them. Students will be more engaged if they have to\nmove the mouse themselves.
        Also, make it a classroom rule that if a student\nis helping another student
        at a computer, they can't take the mouse from\nthem either. \n- Understanding
        how to get the help you need is an important\npart of becoming a successful
        facilitator of a computer science classroom.\nThere are a variety of ways
        to get questions answered: online groups, the\nperson sitting next to you,
        email to a mentor or peer, Code.org community\nforums, or other computer science
        educators in your district.\n\nIt's possible\nthat you might find something
        that's broken, unusable, or missing on our\nwebsite, which in the computer
        science world is called a \"bug\". Take a screenshot\nof what happened, and
        describe the problem in an email to support@code.org.\nAlso include what operating
        system and browser version you're using (example:\nWindows 7, Internet explorer
        9). We really appreciate teachers and users sending\nus bug reports.\n\n###
        How will you foster a healthy CS classroom environment?\nNow\nthat you know
        more about our curriculum, what practices do you want to use\nto promote a
        healthy atmosphere in your computer science classroom?'\n"
      PDK5 Course Descriptions_markdown_instruction: |
        The courses use a spiraling
        curriculum design, in which concepts and skills are revisited in each course
        while delving deeper each time.

        Each course experience is a blend of online
        activities and "unplugged" activities, which are lessons where students
        learn computing concepts without a computer. The online experiences are composed
        of self-guided and self-paced tutorials, which use scaffolded sets of programming
        instructions to explore and practice algorithmic thinking. The unplugged lessons
        take a hands-on, often kinesthetic approach, making use of physical manipulatives
        to model computational concepts.

        Each course consists of about 18 to 20
        lessons, each lasting between 25 and 45 minutes. They can be taught at a comfortable
        pace whether in consecutive days as a sub-unit or one day a week for 18 weeks.
        The content of each course builds conceptually on the previous course, so
        that a student can progress through all three experiences learning new concepts
        along the way.

        Code.org's K-5 curriculum aligns to CSTA Computer Science
        Standards and ISTE standards, while some lessons also integrate national Math,
        English Language Arts, and Science standards.

        Across the entire K-5 curriculum,
        the use of *Computer Science Themes* scaffolds the development of ideas and
        recognizes the continual construction of knowledge:

        - Algorithms
        - Data
        -
        Abstraction
        - Computing Practice and Programming (Use of computational tools)
        -
        Computers and Communication Devices (Elements of computing devices and networks)
        -
        Community, Global, and Ethical Impacts

        Across the entire K-5 curriculum,
        students will develop the skills of a computer scientist through the development
        of *Computational Thinking Practices*:

        - Creativity
        - Collaboration
        -
        Communication
        - Persistence
        - Problem Solving

        ### Concepts Learned in
        each Course

        By the end of **Course 1**, students will learn the following
        computer science concepts:

        - Sequence
        - Loops
        - Events
        - Debugging
        -
        Internet safety

        By the end of **Course 2**, students will learn the following
        computer science concepts:

        - Sequence
        - Loops and nested loops
        - Conditionals
        -
        Introductory binary
        - Events
        - Debugging
        - Internet safety

        By the end
        of **Course 3**, *which has a pre-requisite of Course 2*, students will learn
        the following computer science concepts:

        - Steps of computational thinking
        -
        Using and creating functions
        - Nested conditionals
        - While loops
        - Crowdsourcing
        -
        Methods of Internet data transmission
        - Digital Citizenship

        #### Which
        course is appropriate for the students you'll be working with?
      PDK5 Difficulty_markdown_instruction: |-
        Was programming as hard as you expected?
        Explain why or why not. How does this impact your teaching of computer science?
      PDK5 Foundation_markdown_instruction: |-
        Do you see computer science as a foundational
        skill for your students? Why or why not?
      PDK5 Goals_markdown_instruction: |
        What are your goals or intentions for integrating
        Code.org in your classroom?
      PDK5 Impact 1_markdown_instruction: |-
        Do you think your students will find the
        online activities in the K-5 courses fun and engaging? Why or Why not?
      PDK5 Impact 2_markdown_instruction: |-
        Does computer science connect to other
        topics or subjects your students are learning about? Explain why or why not.
      PDK5 Impact 3_markdown_instruction: |-
        Does learning about computer science help
        students grow into the kind of citizens you are preparing them to be? Explain
        why or why not.
      PDK5 Loops 2_markdown_instruction: |
        In the last puzzle, you used a loop to
        get the bird to the pig with 2 blocks instead of using 5 "move forward"
        blocks. Why do you think it's important to write computer programs efficiently?
      PDK5 Problem Solving_markdown_instruction: "<div style=\"width:800px;\">\nCreating\na
        positive classroom culture before you start writing programs with your class\ngoes
        a long way. Discuss with your students the strategies they should try,\neither
        individually or with a partner, to help get themselves unstuck while\ntrying
        to solve a puzzle or write a program. Having common vocabulary as a\nclass
        can be very helpful, so that when a student asks you for help, you can\nask
        them what parts of the puzzle-solving process they have executed. Here\nare
        the 4 main steps:\n<ul>\n<li>Understand the puzzle</li>\n<li>Create a\nplan</li>\n<li>Perform
        and perfect the plan</li>\n<li>Check your work</li>\n</ul>\n<br/>\n<a\nhref=\"http://code.org/curriculum/docs/k-5/PuzzleSolvingStudent.pdf\"
        target=\"_new\">This\nworksheet</a> is available in the Teacher Dashboard
        in the \"Lesson Plans\nand Resources\" tile. \n<br/>\n<br/>\n</div>\n![image](//code.org/images/puzzlesolving.png)\n\n</br>\n\n###\nHow
        could you integrate this in your classroom? \n\n"
      PDK5 Promo Video 2_markdown_instruction: |
        <iframe width="640" height="390"
        src="https://youtubeeducation.com/embed/rNIM1fzJ8u0" frameborder="0" allowfullscreen></iframe>

        <br>

        **[Can't
        see the video? Click here.](https://www.dropbox.com/s/q85v0y83rws4yd1/k5-affiliate-video-09032014.mp4?dl=0)**

        <br>


        ####
        What are your first impressions of Code Studio?
      PDK5 Promo Video_markdown_instruction: |
        <iframe width="560" height="315"
        src="https://www.youtube.com/embed/rNIM1fzJ8u0" frameborder="0" allowfullscreen></iframe>

        ###
        What are your first impressions of Code Studio?
      PDK5 Strategies O_markdown_instruction: "Is teaching _computer science_ different\nthan
        teaching other subjects like math or reading? Read this list of strategies\nand
        comment below on some of the differences you think you'll encounter when\nteaching
        computer science versus other subjects.\n\n[This worksheet](http://code.org/curriculum/docs/k-5/ClassroomStrategies.pdf)\nis
        also available in the Teacher Dashboard in the \"Lesson Plans and Resources\"\ntile.
        \n\n![image](//code.org/images/strategiesforteachingcs.png)\n\n</br>\n\n\n\n"
      PDK5 Test5_markdown_instruction: |
        ## What did you think about things?

        What
        are your thoughts?
      PS - test - pixelation_markdown_instruction: |-
        # Do This\r
        \r
        Complete the
        "X" shape by typing 0s and 1s. You can always click "Readable Format"
        if you want to clean up your work.
      PS FR test 7-25_markdown_instruction: Here is *some* **markdown**
      PS Log test - Define and use turnAround_markdown_instruction: |-
        # Do This:\r
        **Define**
        a function called `turnAround` which turns the turtle around. Once you've
        defined the function **call** it to make sure it works as you expect and then
        move the turtle forward, as shown below. \r
        \r
        ![](https://images.code.org/4c31307ec14cc6dfd65589f2a813120e-image-1447884881189.gif)
      PS copy - CSD U3 Variables Predict Where XY Embed_markdown_instruction: |-
        #
        Predict\r
        \r
        In which corner of the screen will the circle be drawn?\r
        \r
        _Hint:
        Click the "Show grid" box to help you find the exact coordinates on the
        screen._ [Show me where](#triggercallout=code_triggered)
      PS copy - CSD U3 Variables change circle size_markdown_instruction: |-
        \r
        \r
        #
        Debug: Using Variables\r
        \r
        This program uses the variable `circleSize`
        to control the width and height of a circle.  If you make the circle big enough,
        it will fill up the entire screen, as in the picture on the right.\r
        \r
        #
        Do This\r
        \r
        * Change the value assigned to `circleSize` so that the circle
        takes up the entire screen.
      PS copy 2-3 Bee Conditionals 5_markdown_instruction: |-
        These magic purple flowers
        change!\r
        \r
        Each time you try the puzzle, purple flowers can have either
        1 nectar or none at all...but you won't know the number until you run the
        code! \r
        \r
        Be careful not to collect nectar from a purple flower if it
        doesn't have any. \r
        You must first check if the nectar is equal to 1 using
        the `if nectar` block.
      PS fr prediction q1_markdown_instruction: 'What do *you* think will happen?

'
      Peer Review Level 1 - Tuesday Report_markdown_instruction: |-
        Vacations are really
        fun. Please document a short and amusing story about a recent vacation.\r
        \r
        Some
        guidelines\r
        \r
        * Pics or it didn't happen\r
        * Keep it to 4 sentences
        or less please\r
        * Puns are strictly prohibited
      Peer Review Level 2 - Wednesday Report_markdown_instruction: |-
        Cats are the
        best. Dogs are pretty cool as well. What do you like more, and why?\r
        \r
        Some
        guidelines\r
        \r
        * Cats are awesome\r
        * Cats don't give a what\r
        * Cats
        make for better GIFs\r
        * Pictures are great
      'Peer Review: Personal Website_markdown_instruction': |-
        # Peer Review\r
        \r
        Today
        you are going to have other people look at your website and give feedback
        on it.\r
        \r
        # Do This\r
        \r
        * Leave this open on your screen so your peer
        reviewers can look at your work
      Pixel Filterator_markdown_instruction: |-
        # Free Play\r
        \r
        Do as you will,
        make something awesome
      Pixelation - AllTheThings 4_markdown_instruction: "# Pixelation: AllTheThings\n4\\r\nThis
        pixelation level demonstrates the use of the `hide_encoding_controls`\noption.
        \ Notice that the level displays the image data in hexadecimal and\ndoes not
        let you change it back to binary.\\r\n            "
      Pixelation - AllTheThings 5_markdown_instruction: |-
        # Pixelation: AllTheThings
        5\r
        This pixelation level demonstrates the use of the "Hide sliders" option.  Notice
        that the width and height sliders are not available, and the width and height
        fields are not editable.
      Pixelation - Lesson 14 - Fix bit offset v.2_markdown_instruction: |-
        Something
        happened to the bits in this image! Find the error and fix it! Hint: a few
        extra bits were added. You should only need to remove some bits.
      Pixelation - Lesson 14 - Fix bit offset_markdown_instruction: "# Oh no! An\nimage
        got messed up during transmission!\n\n<img src = \"https://images.code.org/1f78b53ad4892dc8f9b50111fce35c7e-image-1439474859998.17.43\nPM.png\"
        align=right width=200 hspace=20>\n\n**The problem:** A single extra\nbit was
        inserted into the stream of bits that make up the C of the Code.org\nlogo.
        <br>That extra bit bumps all of the other bits down the line which makes\nthe
        logo look messed up.\n<br>**Your task:** Hunt down the extra bit and remove\nit
        to fix the Code.org logo. \n<br>**HINT:** One bit early on would make it\nlook
        like many bits were out of order. \n"
      Pixelation - Lesson 14 - Fix the error_markdown_instruction: |-
        Something happened
        to the bits in this image!  Find error and fix it!  Hint: a few extra bits
        were added.  You should only need to remove some bits.
      Pixelation - Lesson 14 - Make the Letter A_markdown_instruction: |-
        <img align="right"
        src="https://code.org/images/cspunit1/letterA.png" width="150" hspace="20">\r
        #
        Task 1: Make a 3x5 letter 'A'\r
        Start by trying to recreate the 3x5 letter
        "A" depicted (at right) using the pixelation widget. \r
        \r
        The image is
        initially setup with the *incorrect* dimensions. Your first task is to set
        the second byte to the 8-bit binary code for 5: 0000 0101. Then you can start
        entering pixel data to make the A.
      Pixelation - Lesson 14 - Make your own B and W Image_markdown_instruction: |
        #
        Make your own image of any size\r
        \r
        ![](https://images.code.org/01c15fed4f1a2c6c3af531edc35e736e-image-1439596066108.png)\r
        ![](https://images.code.org/24efcaa184d1fc852f37c32911b3b87c-image-1439596070178.png)\r
        ![](https://images.code.org/c9a5d0fd5ba445b7f6b5744e08b50e49-image-1439596071878.png)\r
        ![](https://images.code.org/f14e1b8dd722b0ca5bc54fa96b34f2eb-image-1439596074236.png)\r
        ![](https://images.code.org/fe938c0c16453b9d461b4023098079df-image-1439596075744.png)\r
        ![](https://images.code.org/02c88a7da51289b2f2d1f64bd8c97b28-image-1439596077514.png)\r
        ![](https://images.code.org/309e3157dcfd91956181007f483f8e58-image-1439596079084.png)\r
        \r
        \r
        **Directions:**\r
        \r
        *
        Encode an image of anything you like.\r
        * You might want to do some planning
        and sketching with graph paper first.\r
        * DO NOT simply make an abstract
        pattern, like a checkerboard. \r
        * Depict something, perhaps your name written
        out, your initials, an icon or logo of some sort.\r
        * Get creative! The image
        doesn't have to be a perfect square, it can be long and skinny.\r
        * Optional:
        for fun, send your image bits to a friend using the <a href ="https://studio.code.org/s/cspunit1/stage/11/puzzle/2"
        target="_blank">sending bits widget.</a> *(note: this is just a link to
        the sending formatted text level from a couple of classes ago)*\r
        \r
        \r
      Pixelation - Lesson 15 - Color Free Play_markdown_instruction: "# Personal\nFavicon\n**Requirements:**\n<img
        src = \"https://images.code.org/28fc33ea82996a10863688702af55e65-image-1439596268865.png\"\nalign=right
        hspace=20>\n\n* The icon must be 16x16 pixels. \n* You must use\nthe Pixelation
        Widget to encode the bits of color information.\n* The image\nmust be encoded
        with at least 12 bits per pixel.\n\n"
      Pixelation - Lesson 15 - Color Shades 4x4_markdown_instruction: |
        # Pixelation:
        Task 3\r
        <img src = "https://code.org/images/cspunit1/ColorTask3.png" align=right
        width=200 hspace=20>\r
        **Directions:**\r
        We start you out with the 4x4 image
        Maddie created in the video.\r
        \r
        Your task is to fill a 4x4 grid with colors
        using *12-bits per pixel*. The result should look something like (but not
        exactly) the image shown at right.  \r
        \r
        Here are the requirements:\r
        \r

        * Row 1 - fill with shades of red. \r
         * Row 2 - shades of green. \r
         *
        Row 3 - shades of blue. \r
         * Row 4 - shades of gray.\r
      Pixelation - Lesson 15 - Color Shades_markdown_instruction: |-
        # Color Pixelation:
        Task 2
        **Directions:**
        <img src='https://images.code.org/548d1daa698a17b1005b1747f152587f-image-1439476855059.png'
        style="width: 150px;" align=right>We start you out with the row of shades
        of red that Maddie created in the video. Experiment with 6-bit color by filling
        in the bottom row of the image with shades of a different color.  Here is
        an example with some shades of blue.  Try your own color!
      Pixelation - Lesson 15 - Complete 3-bit color_markdown_instruction: |
        # Color
        Pixelation: Task 1\r
        **Directions:**\r
        \r
        * We start you with the 4x2 image
        Maddie was creating, but we've left out the last two squares. \r
        * Finish
        off the image by figuring out which two colors are missing and encode them.\r
      Pixelation 2_markdown_instruction: |-
        Something happened to the bits in this
        image!  Find error and fix it!
      Pixelation 4x4 Empty_markdown_instruction: |-
        The width and height are now encoded
        in the pixel data. Can you figure out how to adjust the dimensions?
      Pixelation Bee_markdown_instruction: |-
        # Example of 12 bits per pixel
        * This
        larger image of a bee encodes color with 12 bits per pixel, but viewing in
        hex makes it easier to see the color of each pixel.
        * If you switch to binary
        mode - hold on to your hat - it's a lot of bits.
        * Here's another mind-blowing
        thing to try: slide the bits per pixel up to 24 bits per pixel. What happens?
        Can you explain this behavior?
      Pixelation Flappy_markdown_instruction: |-
        # Example of more bits per pixel
        Here
        is a bigger image at 9 bits per pixel. With 9 bits per pixel you can express
        512 different colors. Click through to see the next image which is even more
        sophisticated, but easier to understand.
      Pizza on a Plate_markdown_instruction: |-
        **Project Idea:** Create a picture
        of something familiar from the real world. This requires persistence and planning!
      Play Lab Rocket 2_markdown_instruction: |-
        We've started the Design Recipe for
        `rocket-height` using the contract and examples you just wrote. Complete the
        function definition for `rocket-height` and run your animation.
      Play Lab Rocket 3_markdown_instruction: |-
        Awesome, now can you update that function
        so that our rocket moves more quickly? Make sure to update the purpose statement,
        examples, and function definition to launch a rocket at 40 meters per second.
      Play Lab Rocket Free Play_markdown_instruction: |-
        Free Play: Experiment with
        your `rocket-height` function to make the rocket fly in different ways. Click
        "Finish" when you are done.
      Poorva copy U3L2 Using Simple Commands_markdown_instruction: |-
        <img src="https://images.code.org/0aca9e3ba0945f31ddd56438a45ed69c-image-1436286498758.png"
        align=right>\r
        \r
        Given only 4 turtle commands, write code in App Lab to
        complete the drawings in each of the challenges below.  Your goal is to write
        code that solves the problem as efficiently as possible using only the commands
        provided.\r
        \r
        What does “efficient” mean?  In computer science it can actually
        mean several different things depending on what you’re talking about.  Work
        on these challenges, try to solve them in a way that you think is best and
        we’ll ask about efficiency at the end.\r
        \r
        <img src="https://images.code.org/d26ed114448c5ffe75a75ed761fab5f0-image-1447888033281.gif"
        align=right>\r
        # Do This: \r
        Draw a 1 x 1 square to the front and left of
        the turtle as efficiently as possible. The program should stop with turtle
        in its original position, facing its original direction.\r
        \r
        Once you think
        you have a solution, click the Finish button - it will appear once you run
        the program.
      Poorva-test_markdown_instruction: "# Header 1\\r\n## Header 2\\r\n### Header\n3\\r\n####
        Header 4\\r\n##### Header 5\\r\n\\r\nThis is regular text, **bolded\ntext**
        and *italicized text*. "
      Practice Create Performance Task_markdown_instruction: |-
        # Practice Create Performance
        Task\r
        \r
        You've finally made it to the end of the Building Apps Unit!
        We will continue some programming in the next unit, but for now we are going
        to use all the new concepts you have learn to create something of your own
        design! \r
        \r
        # Do This:\r
        \r
        * **Read the Project Overview** to understand
        the entire project.\r
        * **Follow the Project Planning Guide**.\r
        * **Implement
        your final program in this level**.
      Predict Loop I_markdown_instruction: |-
        # Predict\r
        \r
        What will print as a
        result of this loop?
      Predict Loop I_2018_markdown_instruction: |-
        # Predict\r
        \r
        What will print
        as a result of this loop?
      Project - Final Image Scroller_markdown_instruction: |-
        # Final Image Scroller\r
        \r
        You're
        now ready to add key event functionality to your app! As you are doing so,
        keep an eye out for places where you need to **refactor** old code in order
        to prevent redundancy. **Create functions** that carry out repeated tasks
        and make other changes to keep your code **readable and consistent**. \r
        \r
        If
        you want a reminder of how key events work, you can always go back to the
        example from earlier in this lesson.  You will need to add `if` statements
        to check for which keys were pressed, just as before.\r
        \r
        # Do This:\r
        \r
        *
        Add the ability to respond to **key events** to your app.\r
        \r
        * **Refactor
        your old code** to remove redundant portions.\r
        \r
        * Keeping adding to your
        program. What other features do you want to include?
      Project - Finish your canvas app_markdown_instruction: |-
        # Create Your Own Effect!\r
        \r
        You've
        just seen several ways that we can process our array `eventList` in order
        to create different effects. Now it's time to make your own! **Extend the
        functionality of one of the effects you just created, or create an entirely
        new one**. What else could you do with the information you've stored in your
        array? How else might you combine the programming tools you've developed?\r
        \r
        #
        Do This:\r
        \r
        * **Extend the functionality of one of the effects, or create
        an entirely new one of your own!**
      Project - Make Your Own Clicker Game_markdown_instruction: |
        # Make Your Own
        "Clicker" Game\r
        You will be creating your own “clicker” game similar to
        the Apple Grabber game you worked on in this lesson. \r
        The general object
        of the game is to click on an element that jumps around every time you click
        it. You will pick your own theme and decide what the rules are and how to
        keep score.\r
        \r
        ** Your Main Tasks Are To:**\r
        \r
         * Pick a theme for
        your game and add appropriate images and styling.\r
         * Add variables to track
        some data during gameplay.\r
         * Add code to event handlers to update the
        variables and display appropriately.\r
         \r
        **See Activity Guide for Requirements**\r
        \r
        There
        is a full activity guide and rubric for this project.  You can find a link
        to it in the student resources section for this lesson. Or ask your teacher
        for it.\r
         \r
        <img src="https://images.code.org/146107536c50b4a3317f3ebbe2e66f37-image-1446418612319.png"
        style="float: right; width: 300px">\r
        ** Template **\r
        \r
        This level
        is a template for the app. You should **run it to see what it does** right
        now. You will modify *this* template, both the design elements and the code,
        for your project.\r
        \r
        The template has 4 screens and some basic navigation
        functionality and event handlers set up for you.  The game play screen uses
        the images from the Apple Grabber game, but you should replace these with
        images related to your chosen theme.\r
        \r
      Project - Your Own Multi Screen App_markdown_instruction: |-
        # Multi Screen App\r
        You
        will be creating your own multi-screen app to practice designing user interfaces
        and writing event-driven programs. \r
        \r
        **Look at the Project Guide and
        Planning Sheets before programming**.\r
        \r
        # NOTE: Bigger toolbox\r
        \r
        *
        You may notice that we've included all of the commands you know so far in
        the coding toolbox **plus a few more**\r
        * Remember you can hover over a
        command to see documentation for it.\r
        * You can also just try it out to
        see what it does.\r
        \r
        # Requirements Reminder\r
        * Your app must have a
        purpose\r
        * Your app will have at least **4 screens**.\r
        * Your app should
        include **text, images, buttons, and sound**.\r
        * There should be **no “getting
        stuck” on any screen.**  It should always be possible to navigate from a screen
        in your app to some other screen. \r
        * Your program code should follow **good
        style**.\r
        * Your user interface should be **intuitive to use**.
      'Project: Finish Color Sleuth_markdown_instruction': |
        # Challenge - Pick a
        way for the game to end and implement it\r
        \r
        Your challenge now is to add
        some code completely on your own.  Use what you've learned so far, and Alexis
        and Michael's discussion to help you.\r
        \r
        **This is the last programming
        level**\r
        \r
        * Make all changes and additions to the program that you want
        here\r
        * When you're done hit **Submit**\r
        \r
        **Goal:** Add code that
        provides a way for the game to end which:\r
        * Switches to the `gameOver_screen`\r
        *
        Shows which player won the game by showing `player1Win_label` or `player2Win_label`\r
        \r
        *We've
        provided `gameOver_screen` as part of the template for this project -- Switch
        to Design Mode to take a look at what's there*\r
        \r
        **Suggestions**\r
        *
        If you're stuck for ideas, try to implement the end game condition of "first
        to 10" - first player to reach a score of 10 wins.\r
        * You should use the
        suggestion from the discussion to add a function like `checkGameOver()` and
        call it from `checkCorrect`\r
        \r
        <details><summary><strong>Above and Beyond:
        optional extra options for your project [Click to expand]</strong></summary>\r
        \r
        <p>\r
        Here
        are a bunch of ways you can add to or extend the project:\r
        \r
        </p>\r
        <ul>\r
        \r
        \r
        <li>Add
        "start over" button on the last screen, which should reset everything, and
        go back to the game play screen\r
        </li>\r
        <li>Add a welcome screen that
        explains the rules and invites the player to start the game (make it the default
        screen)\r
        </li>\r
        <li>Make the game more difficult:</li>\r
        <uL>\r
        <li>Make
        the colors more similar (we added 20 to every RGB value, try 15 or 10).</li>\r
            <li>Or
        make the difficulty variable - you can generate a random number between 5
        and 20 and add that to the RGB values. </li>\r
            <li>Or make it get progressively
        more difficult - use a variable to keep track of how much to add to each RGB
        value and decrease it over time.</li>\r
        \t<li>Or on a welcome screen ask
        if the player wants to play easy, medium, or hard.</li>\r
        </uL>\r
        \r
        <li>Add
        a timing element - lookup the documentation for setTimeout which calls a function
        after a certain amount of time. (Note: you may need to remix the project in
        as a free-play App Lab project to do this).\r
        </li>\r
        <li>You can also use
        <code>getTime()</code> at the beginning and end of your code to figure out
        how long it took for the game to end, which you could use to adjust the score.</li>\r
        </ul>\r
        </details>\r
      'Raw Data Podcast: Data Confidential_markdown_instruction': "## Raw Data Podcast:\nData
        Confidential <i class=\"fa fa-volume-up\" aria-hidden=\"true\"></i>\\r\n\\r\nRaw\nData
        is a podcast from the Stanford Cyber Initiative that explores the uses\nand
        impact of data. This episode explores some of the practical implications\nand
        needs for having access to secure communication online. \\r\n\\r\nCheck\nout
        the Episode via the link below: "
      'Raw Data Podcast: Gold or Pyrite_markdown_instruction': "## Raw Data Podcast:\nGold
        or Pyrite <i class=\"fa fa-volume-up\" aria-hidden=\"true\"></i>\\r\n\\r\nRaw\nData
        is a podcast from the Stanford Cyber Initiative that explores the uses\nand
        impact of data. This episode explores some of the ways companies can use\nthe
        data they collect about us, and guests explore how our future might look.\\r\n\\r\nCheck\nout
        the Episode via the link below: "
      'Reflection: Create your Own Number System_markdown_instruction': |
        # Create
        a Number System\r
        \r
        ## Do the Activity\r
        \r
        One of the best ways to prepare
        to teach a lesson is by actually doing the activity yourself.  As you complete
        the activity, consider the misconceptions that your students may have and
        what sorts of questions you can ask to help them overcome these barriers.  \r
        Notes:\r
        <ol>\r
        <li>There
        are many 'correct' answers to this activity. The important part is that
        rules are applied consistently. </li>\r
        <li> The difficult part of this task
        is not to find all of the shapes, but to create an ordering that does not
        ever repeat a pattern and articulating that ordering as a set of rules or
        a protocol. </li></ol>\r
        \r
        <a href= "http://docs.google.com/document/d/1vFg7GG-kFJGw9MgxQ5g3yW7R5rE6f3udVK3C9Hj9P6E/edit"
        target=_blank> Click here to Access Number Systems Activity</a>\r
        \r
        <hr>\r
        ###
        <a href= "http://forum.code.org/c/csp1/lesson04" target=_blank> Head to
        the Forum >></a>\r
        <hr>\r
        \r
        \r
        ## Share Your Protocol and Ideas\r
        Head
        to the forum and share your ideas about this activity. Specifically, share:
        \r
        \r
        - The pattern and rules for your number system\r
        - Misconceptions
        that your students may have and what sorts of questions you can ask to help
        them overcome these barriers.  \r
        \r
        ##  Submit the Link for your Forum
        Post for Review\r
        \r
        Once you’ve posted in the forum, share a link here.
        In order to get a direct link to your post, click the link icon directly under
        your post (shown in the picture below):\r
        \r
        ![](https://images.code.org/40fd4bb1aa4f50cfb0d66bbf7881cd0d-image-1443847364702.png)\r
        \r
        \r
        \r
      Repeat Predict Contained_markdown_instruction: |-
        # Predict\r
        \r
        How many times
        will the for loop below run?
      Revisiting the Counter Pattern_markdown_instruction: |-
        Today you’re going to
        learn how to use and create **functions**.\r
        \r
        Creating a function lets
        you make your own blocks! There are two parts to a function: \r
        \r
        Making
        a newly named block that has all of the code you want to run inside of it.
        \r
        -xml of function definition- \r
        \r
        The single green block itself that
        you use, or call, to run the function you created.\r
        -xml of function call-\r
        \r
        Prepare
        to get familiar with functions, learn how to edit them, and create your own!
      Revisiting the Counter Pattern_2018_markdown_instruction: |-
        Today you’re going
        to learn how to use and create **functions**.\r
        \r
        Creating a function lets
        you make your own blocks! There are two parts to a function: \r
        \r
        Making
        a newly named block that has all of the code you want to run inside of it.
        \r
        -xml of function definition- \r
        \r
        The single green block itself that
        you use, or call, to run the function you created.\r
        -xml of function call-\r
        \r
        Prepare
        to get familiar with functions, learn how to edit them, and create your own!
      Robot Doodle_markdown_instruction: |-
        **Project Idea:** Create a picture of something
        familiar from the real world. This requires persistence and planning!
      Robot Doodle_2018_markdown_instruction: |-
        **Project Idea:** Create a picture
        of something familiar from the real world. This requires persistence and planning!
      Robot Drawing_markdown_instruction: |-
        **Project Idea:** Create a picture of
        something familiar from the real world. This requires persistence and planning!
      Robot_markdown_instruction: |-
        **Project Idea:** Create a picture of something
        familiar from the real world. This requires persistence and planning!
      Rocket Height Course A_markdown_instruction: |-
        Follow the Design Recipe to create
        a function `rocket-height` which produces the height of a rocket traveling
        at 15 meters per second.
      Room Escape Workshop - 1_markdown_instruction: |-
        # Setting Up Rooms\r
        \r
        <img
        src="https://images.code.org/9d103d74f7c2da05aeccd5fc317e6ab6-image-1490368234432.08.44
        AM.png" style="width:200px; float:right">\r
        \r
        In order to make your
        room escape you will need to set up the room the user will be able to adventure
        around in. Some of the work has already been done for you.  You just need
        to decide what the different parts of the room will look like by picking pictures!\r
        \r
        #
        Do This\r
        \r
        * The level starts in Design Mode\r
        * For each image element
        that is blank (gray rectangle) add an appropriate image. For example you will
        need a door image for the image element labeled door.\r
        * An example of what
        the room might look like are on the right.
      Room Escape Workshop - 10 - 2_markdown_instruction: |-
        # Door Open\r
        \r
        <img
        src="https://images.code.org/57407cb51f50e08ecddb8ce7d2d89157-image-1491065952915.58.58
        PM.png" style="width:200px;float:right">\r
        \r
        Open the door if they have
        the key!\r
        \r
        # Do This\r
        \r
        * Add an `onEvent` block for clicking on
        the door\r
        * Add an `if` statement inside the `onEvent` to check if the key
        position has moved to the bottom of the screen\r
        \t* Add an if statement\r
            *
        In the if statement add the `==`\r
            * On one side of the `==` put the
        x position you move the key to when it is clicked\r
            * On the other side
        add the `getXPosition()` block - The ID for that should be the ID of your
        key!\r
        * Inside the `if` statement use `showElement` to show the hidden outdoors
        image if they got the key
      Room Escape Workshop - 10_markdown_instruction: |-
        # Door Open\r
        \r
        <img src="https://images.code.org/3651f7d5306bdcfd2d9a3d9bb842626e-image-1491066778787.12.36
        PM.png" style="width:200px;float:right">\r
        \r
        Getting close! Lets set
        up the door to get ready for opening it.\r
        \r
        # Do This\r
        \r
        * Add image
        for the outdoors\r
        * Give it a good ID (maybe *outside*)\r
        * Hide the image
        for the outdoors (It will be shown when door opens)
      Room Escape Workshop - 11_markdown_instruction: |-
        # Got Key\r
        \r
        In order
        to make sure the user got the key before trying to open the door we will need
        a variable to keep track of if they got the key.\r
        \r
        # Do This\r
        \r
        *
        Add a variable at the top of the program called gotKey and set the right side
        of the gotKey variable to the word false\r
        <img src="https://images.code.org/58e88b028ee9190b0288c7fcbabe389f-image-1490371419468.02.50
        PM.png" style="width:300px">\r
        \r
        * Inside the `onEvent` command for
        the key in the safe set gotKey to true to indicate they got the key.\r
        \r
        <img
        src="https://images.code.org/def02108cabc85383129c5bb29b3af4f-image-1490371463514.04.10
        PM.png" style="width:400px">\r
        \r
        * You will use this to set up the door
        on the next level
      Room Escape Workshop - 2_markdown_instruction: |-
        # Connecting Rooms\r
        \r
        Lets
        make it so the user can go between the rooms. There is an arrow button in
        each room which will be used to move between rooms. To make buttons react
        to your click you will need an event handler for each button.\r
        \r
        # Do
        This\r
        \r
        * Add an `onEvent` block for each of the arrow buttons\r
        * Inside
        each `onEvent` block use the `setScreen` command to say which screen to switch
        to
      Room Escape Workshop - 3-2_markdown_instruction: |-
        # Move Picture\r
        \r
        Now
        make it so the user can find the secret code by clicking the picture. When
        they click the picture it should move up and out of the way.\r
        \r
        # Do This\r
        \r
        *
        Pull out an `onEvent` block\r
        * Change the id spot in the `onEvent` block
        to picture (which is the ID of the picture element)\r
        * Inside the `onEvent`
        block add the `setPosition` block with the following inputs\r
        \t* ID: picture\r
            *
        The next two inputs are x and y values - test out some numbers to try to get
        the picture to move like in the pictures on the right
      Room Escape Workshop - 3_markdown_instruction: |-
        # Hide the Code\r
        \r
        <img
        src="https://images.code.org/6fa80456a39d9b6417545f5f66ec83a5-image-1490368827625.png"
        style="width:400px;float:right">\r
        \r
        1. In Design Mode Click on the white
        square where it says "CODE". Change it to show a secret code of your choice\r
        2.
        Drag the picture down to cover the secret code\r
        \r
        ![]()
      Room Escape Workshop - 4_markdown_instruction: |-
        # Setting Up the Safe\r
        \r
        You
        have generated a secret code and made it so users can navigate to the second
        room. Lets give the user the ability to enter the secret code when they click
        on the safe\r
        \r
        # Do This\r
        \r
        * Add an `onEvent` block\r
        \t* Pick the
        ID for the safe\r
        * Inside the `onEvent` block add a <img src="https://images.code.org/c0964a8543728d018d5d9583319e22b9-image-1491060910093.34.36
        AM.png" style="width:300px"> block\r
        \t* On the left side change the *x*
        (the name of the variable) to be *guess* \r
            * On the right side change
        *"Enter a value"* (the prompt to ask the user) to *"Enter the code"*
      Room Escape Workshop - 5_markdown_instruction: |-
        # Checking the Secret Code\r
        \r
        Now
        that you have collected a guess of the secret code from the user you will
        need to check if it is correct! We can do this using an `if` statement. An
        if statement checks if a condition is true, in this case it will check if
        the number the user entered is equal to the secret code\r
        \r
        # Do This\r
        \r
        *
        Inside the `onEvent` block for the safe below the prompt command add an <img
        src="https://images.code.org/5e9a434b1ad6b8f010db928b668127a5-image-1491061131564.37.01
        AM.png" style="width:100px"> statement \r
        * Create the condition by pulling
        out the <img src="https://images.code.org/f0680979704c30975550211b03ed222e-image-1491061134985.37.08
        AM.png" style="width:100px"> block which will check if two things are equal\r
        *
        On one side of <img src="https://images.code.org/f0680979704c30975550211b03ed222e-image-1491061134985.37.08
        AM.png" style="width:100px"> put *guess* (the name of the value we used
        to store the users guess)\r
        * On the other side put the value for your secret
        code
      Room Escape Workshop - 6_markdown_instruction: |-
        # Random Code\r
        \r
        <img src="https://images.code.org/dfa3a28d30b7a1d2879e3fc95b8f42dc-image-1489603534640.44.51
        PM.png" style="width:200px;float:right">\r
        \r
        Our secret room has a safe
        with a combination lock. That combination will be hidden behind a picture
        where it says "CODE" right now in Room 1. To make this more fun we will
        generate a random 4 digit number to be the code.\r
        \r
        # Do This\r
        \r
        *
        Add a variable that will hold the secret code.\r
        \t* Drag out the variable
        block\r
            * In the space next to var pick a name for your variable such
        as safeCode\r
        * On the right side of the variable set your secret code to
        be a random number\r
        \t* Add the random number block on the right side of
        the variable\r
            * Random number takes two inputs which set the range of
        numbers it can randomly generate\r
            * You want it to generate numbers
        between 1000 and 9999\r
        * Set the text in the secret code element in room
        1\r
        \t* Use the setText block to set the text of the secretCode element
      Room Escape Workshop - 7_markdown_instruction: |-
        # Showing inside the safe\r
        \r
        <img
        src="https://images.code.org/71e74305187a46d0badeb29a9a69ac56-image-1490371014841.55.37
        AM.png" style="width:200px;float:right">\r
        \r
        Once you have the program
        working to check the secret code you are going to want to "open" the safe
        and show the key inside. First you will need to create these elements in design
        mode.\r
        \r
        # Do This\r
        \r
        * Go to Design Mode and add a gray square image\r
        \t*
        Click and Drag a Image Element <img src="https://images.code.org/8f4bc108415d83e5c528c9204502efc2-image-1491059181186.06.13
        AM.png" style="width:75px"> onto the screen\r
            * Give it a good ID
        (maybe *insideSafe*)\r
            * Find an gray square to use as the picture\r
            *
        This will act as the inside of the safe as it will hide the front of the safe
        when shown\r
        * Add a key image\r
        \t* Click and Drag a Image Element <img
        src="https://images.code.org/8f4bc108415d83e5c528c9204502efc2-image-1491059181186.06.13
        AM.png" style="width:75px"> onto the screen\r
            * Give it a good ID
        (maybe *key*)\r
            * Find an key image to use \r
        * Click the hidden property
        in Design Mode for the gray square and key. When they are hidden it will look
        something like below in Design Mode\r
        \r
        <img src="https://images.code.org/2c2c7e9996515f2b30d416b558fd1360-image-1489605526794.17.55
        PM.png" style="width:200px">
      Room Escape Workshop - 8_markdown_instruction: |-
        # Showing inside the safe\r
        \r
        Now
        set up the code to show the key and the gray square when the user inputs the
        correct code.\r
        \r
        # Do This\r
        \r
        * Inside the `if` statement you created
        in the `onEvent` command for the safe add:\r
            * The `showElement` block
        to show the gray square\r
            * The `showElement` block to show the key
      Room Escape Workshop - 9-2_markdown_instruction: |-
        # Click Key\r
        \r
        <img src="https://images.code.org/1a736d2774860bebc5072b8ae8b38f34-image-1491066638078.10.00
        PM.png" style="width:170px;float:right">\r
        \r
        Once a user clicks the
        key you will want to show they are holding it. You can do this by moving the
        key to the bottom corner of the room. \r
        \r
        # Do This\r
        \r
        * Add an `onEvent`
        block for when the user clicks the key. \r
        * Inside the `onEvent` block:\r
        \t*
        Use `setPosition` to move the key to the bottom corner of the screen
      Room Escape Workshop - 9_markdown_instruction: |-
        # Click Key\r
        \r
        <img src="https://images.code.org/349cff555af4337118791d84acf1a5b2-image-1490371172781.59.08
        AM.png" style="width:200px;float:right">\r
        \r
        Once a user clicks the
        key you will want to show they are holding it. You can do this by adding a
        key at the bottom corner of the room. \r
        \r
        # Do This\r
        \r
        * Add a key
        image at the bottom right corner of the room\r
        * Set the key to hidden in
        Design Mode
      Room Escape Workshop - free play_markdown_instruction: |-
        # You've done it!\r
        \r
        You
        made a room escape! Now its time to customize it. \r
        \r
        Consider:\r
        \r
        *
        Adding more rooms\r
        * Adding more things users can interact with in the rooms\r
        *
        Add more style to the rooms
      Ryan Test Locked Blocks_markdown_instruction: |-
        Here's a function called `patrol`.
        Edit it to move the Cat up 400 pixels and then down 400 pixels.
      Ryan's clone of C4S15P10_markdown_instruction: |-
        We've added one last function
        for you.\r
        <hr/>\r
        \r
        <h4>\r
        Use an `if` statement to program your game
        to call the `level_up` function only when `player_score` becomes greater than
        a certain number.<br/><br/>\r
        </h4>\r
        <i>For example: `player_score` > 6</i>\r
        \r
        \r
        <hr/>\r
        <i>Play
        the game, and make it past level 4 to move to the next puzzle.</i>
      SG Add Subgoals practice_markdown_instruction: |-
        # Now you try adding subgoals!\r
        \r
        This
        time we have provided you with an empty workspace and new problem. To solve
        it this time you'll **start** by adding subgoals first, *then* adding the
        code.\r
        \r
        The *benefit* of using subgoals is that you can lay out a solution
        to your problem ahead of time before getting overwhelmed or stuck in the code.  Once
        you've solved a subgoal, you can move on to the next one.\r
        \r
        # Do this\r
        <img
        src="https://images.code.org/4bc7896538039f1904699eba35bcd5e3-image-1508447681081.png"
        style="float: right">\r
        \r
        **Goal**: make the turtle draw two steps (shown
        at right).\r
        \r
        After you have understood and thought about the problem
        you should:\r
        \r
        1. **Start by dragging subgoals into the workspace** that
        you think express a solution to the problem.\r
        2. **Then** start filling
        it in with turtle blocks\r
        3. You should **test incrementally** as you go
        - add the commands to complete one goal, run the code, fix if it doesn't
        work, then add commands to complete the next goal and so on.\r
        \r
        When you
        think you're done click `Finish` and move on.\r
        \r
        **Stuck?** This animation
        shows a programmer adding goals and then code.\r
        \r
        ![expandable](https://images.code.org/1805d750cb4e653ebf505f4a8a2c7840-image-1508447936880.gif)
      SG U3L01 Assessment1_markdown_instruction: |
        Consider the algorithm you designed
        for today’s activity. Identify two instances where there may be multiple ways
        to interpret your instructions and suggest improvements that could be made
        to improve their clarity.\r
      SG U3L01 Assessment3_markdown_instruction: |
        Describe the features of a programming
        language that make it different from the language you typically use in everyday
        life. Explain why a programming language must be created in this way.\r
      SG U3L02 Assessment_markdown_instruction: |-
        This lesson introduced the notion
        of "efficiency" in programming, and that it might mean different things
        at different times.  Think of an example *outside* of computer science in
        which you have heard the term “efficiency” and compare it to the ways we talked
        about efficiency in programming.  \r
        \r
        In what ways is the meaning of "efficiency"
        the same? In what ways is it different?
      SG U3L02 Free Response Getting Started_markdown_instruction: |-
        In this lesson
        we solved a series of problems with a limited set of commands (only 2). Give
        at least one reason why it's useful to learn how to solve and program solutions
        with a limited set of commands.\r
        \r
        In this lesson we solved a series of
        problems using the `Move turtle` and `Orient turtle` subgoals. Give at least
        one reason that breaking problems down into subgoals is a good approach to
        solving problems.
      SG U3L02 Free Response Wrap Up_markdown_instruction: |-
        Summarize your experiences
        with this first App Lab lesson by answering the following questions:\r
        \r
        \r
        *
        Were you able to be creative with such a limited set of tools?\r
        * What was
        most frustrating about this activity? If you could add one additional block,
        what would it be and why? What subgoal would that block achieve?
      SG U3L03 - draw rect function_markdown_instruction: |-
        This is your code from
        the previous level.  Did you know that you can write functions that call your
        other functions?\r
        \r
        Take the code that draws the rectangle and move it
        into a new function called `drawRectangle()`. The first line of your program
        should be a single call to `drawRectangle()`. The rest of the code should
        just be function definitions, including your definition for **right**.\r
        \r
        You'll
        only need one subgoal for this, `//Define function`.\r
        \r
        NOTE: your program
        will still do the same thing.  We are just changing the way it is written
        to demonstrate that you can use functions you've already written as building
        blocks in new functions.\r
        \r
        ![](https://images.code.org/fd6e8b4d2218a242bae19ac9c78b5d5f-image-1447799438050.gif)
      SG U3L03 - draw step_markdown_instruction: |-
        We are going to walk you through
        a process that shows you the benefit of thinking about programming tasks in
        terms of writing functions.\r
        \r
        * Over the next 3 levels we are going to
        write a program that draws the figure shown at right which sort of looks like
        a jagged diamond shape. <img src="https://images.code.org/53679cc10ff90b6120184d93ad012797-image-1441770558200.png"
        align='right'>\r
        \r
        * If you look at this image you might recognize elements
        that repeat: this is a 4-sided figure, and each side is made up of some zig-zag
        steps.\r
        \r
        * We're going to break the programming down into useable parts
        and then use those parts as building blocks to make this more complex drawing.\r
        \r
        *
        First let's **define** a function that *draws just one of these zig-zag steps.*  We've
        started you out with a definition of `right()` that you can use...\r
        \r
        #
        Do This:\r
        \r
        **Define** and call a function named `drawStep()` which makes
        the turtle move forward and left as shown. \r
        \r
        **Note**: at the end the
        turtle should be facing the same direction it started.\r
        \r
        \r
        You'll
        use four subgoals for this. First, you'll **define a function** (`//Define
        function`), which will include **moving the turtle** (`//Move turtle`) and
        **orienting the turtle** (`//Orient turtle`). Last, don't forget to **call
        the function** (`//Call function`). If you get stuck, plan your solution with
        subgoals.\r
        \r
        ![](https://images.code.org/4fa605353695afa0cd01ec01a1e2c709-image-1441772033658.gif)
      SG U3L03 Define and use turnAround_markdown_instruction: |-
        # Do This:\r
        **Define**
        a function called `turnAround()` which turns the turtle around. Once you've
        defined the function **call** it to make sure it works as you expect and then
        move the turtle forward, as shown below. \r
        \r
        ![](https://images.code.org/4c31307ec14cc6dfd65589f2a813120e-image-1447884881189.gif)\r
        \r
        **Remember**
        typically, you call a function in lines of code *above* the function definition
        - this might make you  feel like you are working in reverse, since you first
        write the code to define the function and *then* add a line to call it.  Here
        is the `moveTwice` example from the video. You should do something similar
        for turnAround:\r
        \r
        ![](https://images.code.org/3faf16575757ffae616dffd761085ab5-image-1467818996127.gif)\r
        \r
        You'll
        use four subgoals to solve this problem (sort of). First you'll `//Define
        function`, which will include `//Orient turtle`. As you will start to see,
        even subgoals can be broken down into subgoals sometimes. This will be helpful
        when you start creating more complex functions. \r
        \r
        Then you'll `//Call
        function` and `//Move turtle`.\r
        \r
        Don't forget to name your functions.
      SG U3L03 Draw a T using turnAround_markdown_instruction: |-
        # Do This:\r
        Get
        some more practice **calling** a function by using `turnAround()` along with
        your old friend the `moveForward()` function to create a plus sign that is
        centered at the turtle's first position, as shown below. Even though you
        just wrote this function, we've already **defined** `turnAround()` for you.
        \r
        \r
        Remember, add lines of code that call the function *above* the definition.
        The function definition is after the function call to support **abstraction**.
        If you don't need to know how the function works inside, you never have to
        look at it, you can just call it.\r
        \r
        *NOTE: the turtle should end where
        it started, which is also the middle of the plus sign, as shown below. Each
        of the four segments of the plus sign are one `moveForward()` long.* \r
        \r
        ![](https://images.code.org/9d6c2d7d69c2f1c68c5b273bdbae65c7-image-1441296690812.11.14
        AM.png)\r
        \r
        \r
        You'll use three subgoals for this problem: `//call function`,
        `//orient turtle`, and `//move turtle`. Defining the function is already done
        for you. We've put subgoals for the first few steps in already. Plan the
        rest of the code with subgoal blocks (in the **Goals** tab) to get the most
        efficient path before filling it in with blocks.
      SG U3L03 Free Response Wrap Up_markdown_instruction: |
        In your own words, explain
        at least one reason why programming languages have functions.  Include an
        example of something you did in this lesson that demonstrates the reason you
        describe.\r
      SG U3L03 Three Steps_markdown_instruction: |-
        # Do This:\r
        <img src="https://images.code.org/5f20ab5fd8b95754e8cfc948a4b41522-image-1441772307480.png"
        align=right width=200>\r
        We are going to continue to build up towards a diamond
        by **defining** a function that draws one side of the diamond.\r
        If you look
        at the whole image we are trying to draw, you'll notice that each of the
        4 sides is comprised of 3 calls to `drawStep()`, plus a few extra moves (shown
        in orange).\r
        \r
        Right now we'll write the code for one of those sides.
        So...\r
        \r
        **Define** a new function named `drawSide()` which makes three
        calls in a row to `drawStep()` followed by a `moveForward()` and a `right()`.  \r
        \r
        **Replace**
        the original function call to `drawStep()` with a call to your newly defined
        `drawSide()` function. \r
        \r
        The diagrams below show the intended actions.\r
        <table>\r
        <tr>\r
        <td>![](https://images.code.org/480f6787e4d2daf34d67642e25b29de6-image-1441772552026.png)
        </td>\r
        <td>![](https://images.code.org/02f52d406854d6f86535adf2f593ccc9-image-1441772709549.gif)
        </td>\r
        </tr>\r
        </table>\r
        \r
        To solve this puzzle, you’ll use three subgoals.
        You’ll **Define the function** (`//Define function`), which will include **calling**
        2 different functions (`//Call function`) and **moving the turtle** (`//Move
        turtle`). Then you'll **call the function** (`//Call function`) that you
        defined.
      SG U3L03 define turnRight and draw a rectangle_markdown_instruction: |-
        # Draw
        a rectangle with right\r
        \r
        As you know, in order to turn right we have
        to call `turnLeft()` three times.  We've started you out with a stub that
        **defines** a function called `right()`.  Start by adding code inside the
        function definition that will turn the turtle to the right (by turning left
        three times) when called. \r
        \r
        Then **use** this function in some code
        to draw a rectangle, as shown below.  Make sure the turtle ends facing the
        same direction and in the same location it started. The rectangle below is
        2 `moveForward`s tall and 1 `moveForward` wide.\r
        \r
        ![](https://images.code.org/fd6e8b4d2218a242bae19ac9c78b5d5f-image-1447799438050.gif)\r
        \r
        **Note**:
        Your program will still do the same thing. We are just changing the way it
        is written to demonstrate that you can use functions you've already written
        as building blocks in new functions.\r
        \r
        You'll use three subgoals to
        solve the problem: `//Orient turtle`, `//Move turtle`, and `//Call function`.
        `//Define function` is already done for you. Notice that we haven't filled
        the subgoals in for you (for the right function or drawing the rectangle).
        If you are having trouble finding the solution, plan your approach with subgoals
        before filling it in with blocks. If you're not having trouble, feel free
        to skip the subgoals.
      SG U3L03 draw diamond_markdown_instruction: |-
        # Do This:\r
        We're finally ready
        to make our diamond! **Define** a function named `function drawDiamond()`
        that **calls** `drawSide()` multiple times in order to complete the drawing.
        Your final solution should be triggered by **a single call** to `drawDiamond()`.
        \r
        \r
        <table>\r
        <tr>\r
        <td><img src="https://s3.amazonaws.com/uploads.hipchat.com/65395/961892/NoxVhFlLf9HlybZ/upload.png"
        width=200></td>\r
        <td><img src="https://images.code.org/dca51c5b17a8c0778787337c3609557c-image-1441802821237.gif"
        width=200></td>\r
        </tr>\r
        </table>\r
        \r
        <hr>\r
        \r
        **Notes**:\r
        \r
        In
        the end you will have 4 functions defined:\r
        \r
        * drawDiamond()\r
        * drawSide()\r
        *
        drawStep()\r
        * right()\r
        \r
        These 4 functions work sort of like a hierarchy
        of top-down design.  At the top is `drawDiamond()` which makes calls to `drawSide()`,
        which makes calls to `drawStep()` and `right()`.\r
        \r
        For most programming
        problems that you face, the problem won't be broken down into pieces like
        it was for this series of puzzles. You'll have to figure out your own hierarchy
        of functions based on which patterns you want to use multiple times. This
        is why planning your solution ahead of time can make your code more efficient.
        \r
        \r
        Subgoals will help you do this. Once you recognize that the diamond
        can be drawn using the same function repeated 4 times, you can note with a
        subgoal comment that you'll need to define and call a function for `drawSide()`.
        Then you can figure out that one side can be drawn using the same function
        3 times plus a couple of steps, you can make note to define and call `drawStep()`.
        Once you've planned the solution, you can fill in blocks to complete it.
      SG U3L04 - 3 by 3 with functions_markdown_instruction: |-
        # Do This:\r
        \r
        We're
        going to revisit a familiar problem, **drawing the 3x3 square as efficiently
        as possible**. The only difference is that this time you are armed with the
        ability to create **layers of functions** to help you design more elegant
        and efficient solutions. Use the techniques you've learned for **breaking
        down problems into layers of functions** in order to improve upon your previous
        solution. Think about how to combine functions to use as few blocks as possible.\r
        \r
        You'll
        need 4 subgoals for this task. Think about how you can `//Define function`
        and `//Call function` to draw most of the square, then fill in the rest using
        `//Move turtle` and `//Orient turtle`.\r
        \r
        ![](https://images.code.org/121251ed82b4986848062abacdef6963-image-1441824892425.54.18
        PM.png)
      SG U3L04 - snowflake_markdown_instruction: |-
        # Do This:\r
        \r
        You should have
        already worked with a partner to break down the design below into its multiple
        layers of functions. Now you'll have an opportunity to program your solution.
        Here are a few things to keep in mind:\r
        \r
        * Identify useful patterns that
        can be reused and give them **their own functions**.\r
        * Remember: The functions
        you design **can call one another**. This is how you create layers of abstraction.\r
        *
        Functions should be given names that are **descriptive and meaningful**.\r
        *
        Your program should be kicked off with a single call to a function that makes
        calls to subsequent functions.\r
        \r
        You'll use four subgoals for this:
        `//Define function` and `//Call function` and `//Move turtle` and `//Orient
        turtle`. If you don't already have a plan somewhere else, plan out your program
        with subgoals first.\r
        \r
        \r
        ![](https://images.code.org/afed66de9dc3cdb10f627a176139c58f-image-1441822234028.09.33
        PM.png)
      SG U3L04 Assessment1_markdown_instruction: |
        Consider the figure below.  Use
        top-down thinking to design a solution to the problem.  In the space provided
        write a list of **just the names** of the functions that you would write in
        a program that draws this figure.  (Assume that the long line segments are
        6 turtle moves long).\r
        \r
        ![](https://images.code.org/43895f8ceccb12f72e7f5ba03152a6e6-image-1441914144956.png)\r
      SG U3L04 Free Response Wrap Up_markdown_instruction: |-
        In the Create Performance
        Task, you will be asked to identify an abstraction in your program and explain
        how it helps manage the complexity of the program. Functions are a form of
        abstraction. Pick a function you wrote in your solution to the 3x3 square
        problem and explain how it helps manage the complexity of your program.
      SG U3L06 - moveForwardwithParams_markdown_instruction: |-
        # A New Way to Move
        the Turtle\r
        The `moveForward()` turtle command that we've used so far moves
        the turtle the same amount every time (25 pixels in fact). Similarly, `turnLeft()`
        turns the turtle to the left exactly 90 degrees. Today we are going to see
        how some functions can **accept input**, such as a number, to be used more
        flexibly. For example, you can write `moveForward(103)` to move the turtle
        forward exactly 103 pixels if you like.\r
        \r
        # Do This:\r
        \r
        **How far
        is it to the top edge of the screen?**\r
        \r
        Run the program to see the new
        version of `moveForward()` in action. Then **changing only the number supplied
        to `moveForward()`**, move the turtle to the top edge of the screen. Experiment
        to find out the distance in pixels between where the turtle starts and the
        top edge of the screen.\r
        \r
        Once you've found it, compare with a neighbor
        to see that you're seeing the same thing and click **Finish** to move on.\r
        \r
        You'll
        only use one subgoal - `//Move turtle` -but now you have more flexibility
        in how this subgoal is achieved.\r
        \r
        **Note:** There might be slight differences
        depending on whether you get the turtle to just touch the edge, or go off
        the screen entirely.
      SG U3L06 Assessment_markdown_instruction: |
        It is said that *functions with
        parameters generalize the behavior of a more specific command and allow programmers
        to use functions instead of duplicated code.* Explain what this means to you
        using the difference between turnLeft() and turnLeft(angle) as an example.\r
      SG U3L06 Challenge 1 triangle_markdown_instruction: |-
        # Terminology: *Parameter*\r
        \r
        When
        you have a command like: `moveForward(100)` we say that the `moveForward()`
        command *accepts a **parameter***.  And 100 is the value *given* or *supplied*
        to `moveForward()`'s **parameter**.  Since this value can change, you will
        often see a written description for the command that looks something like
        **`moveForward(pixels)`** to indicate that the value supplied to `moveForward()`'s
        **parameter** should be the number of pixels you want it move.\r
        \r
        The
        good old `moveForward()` command still exists.  In fact it's the **same command**
        as `moveForward(pixels)`. The "parameter-less" version of `moveForward()`
        simply supplies a **default value** to the parameter.  We might also say that
        the `moveForward()` command has an **optional parameter** since you could
        call either `moveForward()` or `moveForward(50)` and it doesn't cause an
        error when you run the program.\r
        \r
        \r
        # New Commands!\r
        \r
        Check it
        out.  The turtle toolbox now contains the *parameterized* versions of the
        turtle commands including `turnLeft(angle)` and `turnRight(angle)`.  \r
        \r
        #
        Do This:\r
        \r
        Use the parameterized versions of the commands to draw a triangle
        with sides that are 100 pixels long. Don't forget that you can define and
        call functions to make the code more efficient.\r
        \r
        At a minimum, you'll
        use `//Move turtle` and `//Orient turtle` to do this. You can also solve the
        problem by using `//Define function` and `//Call function`.\r
        \r
        <img src="https://images.code.org/0207568ff82b0571fa6757081330749d-image-1441901783815.png"
        width=150>
      SG U3L06 Challenge 2 purple square_markdown_instruction: |
        # Do This:\r
        \r
        **Draw
        the square:** Use pen color and width functions to draw the thick blue square
        shown below.  The size of the square doesn't matter.\r
        \r
        In addition to
        the usual `//Move turtle` and `//Orient turtle` (and `//Define function` and
        `//Call function` if you want to be extra efficient), you'll also need to
        use the new subgoal `//Set pen properties`.\r
        \r
        <img src="https://images.code.org/6ed36a408e568a0410f10d017550843f-image-1441904430698.png"
        style="height: 250px">\r
        \r
        **Remember:** If you get stuck on what a specific
        block does, you can read through the documentation by **hovering over** `penColor()`
        and `penWidth()` which let you set the color and size of the pen your turtle
        uses to draw. \r
        \r
      SG U3L06 Challenge 3 fill pink_markdown_instruction: |-
        # Drawing with Dots\r
        \r
        We've
        added a new command called `dot()`.  \r
        \r
        **Read the documentation** for
        the `dot()` command.\r
        \r
        **Make a "snowman"**\r
        \r
        1. Set the pen color
        to some new color (we made ours pink)\r
        \t* Note: even if you just want the
        default dot color - black - explicitly set the color to black here.\r
        \r
        2.
        Using that color, make a dot so big that it fills the screen.\r
        \r
        3. In
        a different color, make 3 dots in a row, each one smaller than the next. (We
        made our dots white to look like a snowman)\r
        \r
        You might want to go back
        to the documentation for `penColor()` to look up other colors to use.\r
        \r
        ![](https://images.code.org/e63f3cf801abf22c01c475031c46ff66-image-1441992129690.gif)\r
        \r
        You'll
        need two subgoals for this: `//Set pen properties` and `//Move Turtle`. Because
        you need to make two dots at the beginning without moving the turtle, you're
        really doing `//Set pen properties` twice in a row. Because this problem will
        take a little bit of experimentation to get the dots the right size, we've
        already outlined the problem solution with subgoals.
      SG U3L06 Challenge 4 bullseye_markdown_instruction: |-
        # Hexadecimal Colors\r
        \r
        In
        reading the documentation, you may have noticed that `penColor()` can accept
        colors in the **hexadecimal format (e.g. "#AC9100")**. Colors on websites
        will often be represented in this format. It's useful to know how to interpret
        and use this format when trying  to duplicate colors in your own images.\r
        \r
        **Read
        the documentation:** Review the documentation for `penColor()` and pay particular
        attention to how to define colors in hexadecimal.\r
        \r
        # Do This:\r
        **Draw
        the bullseye: ** Draw the bullseye below using a combination of `penColor()`
        and `dot()`.\r
        \r
        ***Hint:*** *The sample image was created using three
        of the following hexadecimal colors: #00ABDC, #CC4400, #1188CC, #006699, #11CC00.
        Can you recall how hexadecimal color works to select the correct colors on
        your first try?*\r
        \r
        For each circle in the bullseye, you'll complete
        the same subgoal: `//Set pen properties`.\r
        \r
        <img src="https://images.code.org/d53ae656d6eeae3611449b65db669242-image-1441981098736.png"
        style="height: 250px">\r
        \r
        **Remember:** The hex colors must have quotes
        around them so penColor(“#FF0099”)  not penColor(#FF0099).
      SG U3L06 Challenge 5 overlapping circles_markdown_instruction: |-
        # Transparency
        - Red, Green, Blue, Alpha\r
        \r
        There is another command that lets you set
        the pen color called `penRGB(r,g,b,a)`.\r
        \r
        * The first 3 parameters represent
        values (in the range 0-255) for the red, green, and blue channels. \r
        * The
        4th parameter `a` stands for "alpha".  The "alpha channel" for color lets
        you set the level of **opacity** as a decimal value between 0 and 1. It is
        interpreted as a percentage, so 0.5 equates to 50% opaque.  For example: `penRGB(113,
        102, 160, 0.5)`.\r
        \r
        So far, we've always moved the turtle with the pen
        tracing the path. In the original robotic turtle used 50 years ago, this meant
        that the pen was down so that it would draw on the paper. The turtle can also
        move with the pen up, or not tracing its path. The commands to switch between
        these two are `penUp()` and `penDown()`. The pen by default is set to down
        position, so to stop drawing with the pen use `penUp()`. When you want to
        start drawing again, use `penDown()`.\r
        \r
        # Do This:\r
        \r
        **Read the
        Documentation:** To figure out how to use `penRGB()` go read the documentation,
        paying special attention to the syntax used to give a command **multiple values**.\r
        \r
        <img
        src="https://images.code.org/3247af8d88da11a042d0bd9a76b49f12-image-1441982501960.png"
        style="height: 250px; float: left; margin: 10px">\r
        \r
        **Draw the circles:
        ** \r
        \r
        Use `penRGB()`,`penUp()` and `dot()` to draw two overlapping circles
        as shown in the image.\r
        \r
        All of these new blocks give you new ways to
        achieve the subgoal `//Set pen properties`. You use this subgoal multiple
        times to complete this problem as well as the `//Move turtle` subgoal.
      SG U3L06 Challenge 6 squiggles_markdown_instruction: "# Multiple Parameters\n-
        Making Arcs\\r\n\\r\nMany commands need more than one parameter to make sense.\nWhen
        a command needs more than one parameter, the parameters are separated\nby
        commas. **The order of the parameters matters**.\\r\n\\r\nTwo new commands\nhave
        been added to the block palette, `arcLeft()` and `arcRight()` which both\naccept
        two parameters. These two blocks are another way to accomplish the\n`//Move
        turtle` subgoal.\\r\n\\r\nRead the documentation for `arcLeft()` and\n`arcRight()`.
        Notice that in the documentation you can see what the order\nof parameters
        is: first angle, then radius.\\r\n\\r\n\\r\n# Do This:\\r\n<img\nsrc=\"https://images.code.org/320a5e54abb95b267738d5e15946b51c-image-1441985535028.png\"\nstyle=\"height:
        250px; float: left; margin: 10px\">\\r\n\\r\n**Draw a squiggly\nline: ** \\r\n\\r\nUsing
        `arcLeft` and `arcRight` along with the functions you\nhave already learned
        to draw a **purple squiggle on a blue background**. Feel\nfree to use any
        of the methods for choosing colors.\\r\n\\r\n\\r\n\\r\nHints:\\r\n*\nTo make
        the figure exactly, you need to `//Orient turtle` before calling `arcLeft()`\nor
        `arcRight()` by turning the turtle first.\\r\n* The parameters to `arcLeft()`\nand
        `arcRight()` are the same.\\r\n* The colors are \"PowderBlue\" and \"Purple\"\n-
        though you can use other colors if you like.\\r\n\\r\nThe subgoals for this\nproblem
        are already in the workspace to help you get started. The first `//Set\npen
        properties` is for drawing the background. Then you will draw the squiggle.\nNotice
        that you'll achieve `//Move turtle` using the new arc blocks. As we\nlearn
        more features of App Lab, you'll have more options for how to complete\nsubgoals. "
      SG U3L06 Challenge 7 smiley face_markdown_instruction: |-
        # Moving Relative to
        the Screen\r
        \r
        The turtle commands we've seen so far move the turtle **relative
        to the turtle's location and direction**. If you want to get the turtle to
        a specific position on the screen using only `moveForward()` or `turnLeft()`,
        you need to know the turtle's location beforehand.\r
        \r
        Two new commands
        in the toolbox help resolve this issue. `moveTo()` moves the turtle to a location
        on the screen based on its X and Y coordinates. `turnTo()` turns the turtle
        in a specific direction. Together these commands can make many drawings easier
        to complete.\r
        \r
        Just like `moveForward()`, `moveTo()` achieves the subgoal
        `//Move turtle`. And just like `turnLeft()`, `turnTo()` achieves the subgoal
        `//Orient turtle`.\r
        \r
        # Do This:\r
        \r
        **Read the documentation: ** Read
        the documentation for `moveTo()` and `turnTo()`. Pay specific attention to
        how the coordinate system is arranged in App Lab as it is different from what
        you might have seen in a math class.\r
        \r
        **Draw the smiley: ** Use these
        new commands to help you draw the smiley face pictured below.\r
        \r
        **HINT:
        ** Don't forget to use `penUp()` and `penDown()`.\r
        \r
        Make sure that you
        plan your program with subgoals before you start filling in the blocks. Especially
        because you'll have to do some trial and error with the parameters, planning
        with subgoals will help keep you organized.\r
        \r
        ![](https://images.code.org/20cab2a0b3a4fdfd53d7a1876963fa10-image-1441990625064.png)
      SG U3L06 Challenge 8 make your own_markdown_instruction: |-
        # The Full Turtle
        API\r
        \r
        We've added a few more commands to the toolbox. At this point
        you have access to every turtle command provided by App Lab. As we've already
        seen with our exploration of functions you can combine these commands to create
        more complex functionality, but at the lowest level all of your code will
        be making use of the set of commands provided by App Lab.\r
        \r
        <img src="https://images.code.org/7648c5293d04a57e4f715b5c08899ff9-image-1441996324573.png"
        style="height: 250px; float: left; margin: 10px">\r
        \r
        Code you write
        will always be based upon the commands that are provided by the programming
        language you are using. When several commands are provided in a logical chunk,
        like the set of turtle commands, we refer to them collectively as a **library**
        of functions. The total set of commands that a language provides access to
        is called the **application program interface**, or simply an **API**. \r
        \r
        As
        you gain more experience you will gain familiarity with the API for the language
        you are using, but you will still want to return to the **API documentation**
        from time to time to remind yourself what functionality a language offers.\r
        \r
        Congratulations,
        you've really come a long way as a turtle artist! \r
        \r
        # Do This:\r
        \r
        **Draw
        whatever you like!**  The only requirements are:\r
        \r
        * use at least 3 different
        colors\r
        * use moveTo\r
        \r
        Explore the documentation for any new commands
        you see and use your skills as both an artist and user of **API documentation**
        to **draw something of your own choosing.** Don't forget to plan it out using
        subgoal labels.\r
        \r
        If in doubt: try to re-create "I [heart] CS" drawing
        shown here.
      SG U3L07 - Free Play Loops and Random_markdown_instruction: |-
        # Free Play!\r
        (Optional)\r
        \r
        Mess
        around with your "Under the Sea" scene to make it do different things.  \r
        \r
        **Ideas:**\r
        *
        Make different amounts of each component.\r
        * Play with the ranges of random
        values.\r
        * Add other creatures.\r
        * Play with color values to give the
        scene a different feel (nighttime? red dawn?).\r
        * Get creative!\r
        \r
        #
        Don't Worry... You Can't Screw It Up\r
        * Play around as much as you want
        - you can **always go back to a previous version**.\r
        * Each time you hit
        "Run" your code is saved in a way that lets you get back to it.\r
        * Notice
        that there is button at the top of the page called **Version History** that
        lets you see and use any previous version of your code.\r
        \r
        ![](https://images.code.org/881d72d190c0637705f8021369962701-image-1443117323816.gif)
      SG U3L07 - allSeaGrass_markdown_instruction: |-
        # Add Seagrass\r
        <img src="https://images.code.org/a67f893ea9187b253ec4f6abcb16b7cf-image-1443048301130.30.42
        PM.png" style="width: 200px; float: right">\r
        Our new version of `drawSeagrass`
        now draws a single piece of seagrass with a random height.  Now let's use
        a loop in `drawAllSeagrass` to fill the sea floor with it.\r
        \r
        # Do This:\r
        \r
        *
        **Add a `for` loop** to `drawAllSeagrass` that draws about **50 pieces** of
        seagrass using your updated `drawSeagrass` function.
      SG U3L07 - bubbles_markdown_instruction: |-
        # Add Bubbles\r
        <img src="https://images.code.org/ffeec83d7bb838f87f46ec1638710440-image-1443019519379.44.49
        AM.png" style="width: 200px; float: right">\r
        The first high-level function
        you will write is `drawAllBubbles`. You may have noticed that the bubbles
        in the image look very similar to the dots example we've already drawn in
        this lesson. Now we'll use that skill to add to our image.\r
        \r
        # Do This:\r
        \r
        *
        **Read** the `drawBubble` function to know how it works and what **parameters**
        it accepts.\r
        \r
        * **Modify the code** of `drawAllBubbles`:\r
         * **Add
        a loop** inside the function.\r
         * **Move the commands that were already
        inside the function *inside the loop* instead** -- In other words "wrap a
        loop around the existing lines of code that are inside the function. This
        way your code will move the turtle randomly and call `drawBubble` many times.\r

        * **Set the number of iterations** in your loop so that the screen is filled
        with bubbles. Try starting with 200 and then adjust to whatever number you
        like.
      SG U3L07 - createTriangleParam_markdown_instruction: |
        # Defining Functions
        with Parameters\r
        \r
        This time you're going to write your own function
        with parameters to complete an image. Two function calls to `drawTriangle()`
        have been placed at the top of the program but the function itself needs to
        be defined.  The program should draw this:\r
        \r
        ![](https://images.code.org/4a96eff03ba79b881b98137048140953-image-1442523578705.59.20
        PM.png)\r
        \r
        # Do This:\r
        **Complete** the function definition for `drawTriangle(sideLength)`
        . Notice that you have already been given a **descriptive and meaningful parameter
        name**, `sideLength`, but you can change it if you wish.\r
        \r
        **Hint:**
        you should put the pen down and pick it up as part of the definition of `drawTriangle()`
        - that way you guarantee that a call to drawTriangle will always actually
        draw. Picking the pen up as the last act of the function is a nice thing to
        do for any other code that might not be expecting drawTriangle to have a side
        effect of putting the pen down.\r
        \r
        As a reminder of how to use a parameter
        within the function here is a correct version of `drawSquare(size)` for reference.\r
        \r
        ![](https://images.code.org/ead2720df19b117cae753c4397dd832d-image-1442868072299.png)\r
        \r
        When
        we used the subgoal `//Define function` before, we only gave the function
        a name and then filled it in with blocks. In this problem the subgoal `//Define
        function` includes giving the function a name, defining the parameters, and
        filling it in with blocks. For this puzzle, we've done the first two steps
        for you, but you'll be doing it all in the coming puzzles.\r
        \r
      SG U3L07 - fish_markdown_instruction: |-
        # Add Fish\r
        \r
        The next high-level
        function you will write is `drawAllFish`. A version of `drawFish` with parameters
        has been provided for you to use.\r
        \r
        # Do This:\r
        \r
        * **Read** the
        `drawFish` function to know how it works and what **parameters** it accepts.\r
        \r
        *
        **Add a loop** to `drawAllFish`.\r
        \r
        * **Place the commands already inside
        the function in your loop.** This way your code will **move the turtle randomly**
        around the **top 360 pixels** of the image and draw **15 fish** of random
        size between **5 and 20** using `drawFish`.\r
        \r
        * Once you have your loop
        working try calling `drawFish` with random values for its `red`, `green`,
        and `blue` parameters to get differently colored fish.\r
        \r
        ![](https://images.code.org/cbbb8e02c14cbc2d199ede4531090513-image-1443046439253.12.35
        PM.png)
      SG U3L07 - introSquare_markdown_instruction: |
        # Getting Started with Loops\r
        \r
        A
        **loop** is a block of code that is repeated or "looped through" in a program.
        You will be creating a loop using the `for` loop block.\r
        \r
        We'll start
        by experimenting with a program similar to what you saw in the video.\r
        \r
        #
        Do This:\r
        * **Drag** out a `for` loop block. This serves the subgoal `//Write
        a loop`. Much like the subgoal `//Define function`, you will then fill in
        the loop, which might involve achieving more subgoals, like `//Move turtle`
        and `//Orient turtle`.\r
        \r
        * **Inside the loop:**\r
        \t* **Add** a call
        to `moveForward()`.\r
            * **Add** a call `turnLeft()`. (HINT: try turning
        by 137 degrees to start. You can change after that.)\r
            \r
        ![](https://images.code.org/4da4a0c8a10a3c9637df96507fece183-image-1443038466204.gif)\r
        \r
        *
        **Run** the program to see the loop in action.\r
        * **Experiment:**\r
         *
        **Change** the number of times the loop runs.\r
         * **Increase** the run speed
        to see how fast loops can execute.\r
         * **How many times** can the loop run
        before you can no longer tell the difference in the image?\r
         \r
        **Move
        on** once you feel like you have a decent grasp of using a `for` loop: setting
        the number of times to repeat, running the program, and setting the run speed.\r
      SG U3L07 - loopsWithRandom_markdown_instruction: |-
        # Using Multiple Loops\r
        \r
        Some
        repeated tasks can't easily be solved with a single loop. Instead, you'll
        need to use **one loop after another**, each one solving a part of the problem.
        \r
        \r
        # Do This:\r
        \r
        Add a loop to fill the screen with semi-transparent
        white dots until the original dots are "erased".\r
        \r
        <img src="https://images.code.org/329912b3c61cc62acbd36035ff4b823a-image-1443109101866.gif"
        style="float: right; width: 100px">\r
        * **Drag ** a second loop into your
        code that will run after the first loop.\r
        * **Add** commands to draw dots
        in random locations that are white with opacity set to 0.5.\r
        * **Increase
        the iterations** so that the colored dots are totally erased. How many does
        it take?\r
        \r
        HINT: you can copy/paste the original loop and just change
        the color of the dots and number of iterations.
      SG U3L07 - randomDots1_markdown_instruction: |-
        # Looping with Random Values\r
        \r
        <img
        src="https://images.code.org/520e45a90988b04bb0ff3baa184f080a-image-1443108426597.png"
        style="width: 100px; float: right;">\r
        \r
        If you add some randomness to
        turtle behavior inside a loop, the program will run a little differently every
        time which can make for some cool effects.\r
        \r
        You're about to see a program
        in which the turtle **moves to a random location** each iteration of the loop,
        and **draws a randomly-sized dot** that also has a **random color**.  We've
        also made the dot semi-transparent by setting the alpha value to 0.5 (50%
        transparency).\r
        \r
        # Do This:\r
        \r
        **Figure out how many iterations**
        (number of times the loop runs) you need to consistently fill the screen entirely
        with dots so none of the background is showing.  It will be a little different
        every time so you'll need to experiment.\r
        \r
        **Compare what you found**
        with a neighbor to see how close your results are.  Then **move on**.
      SG U3L07 - randomSquare_markdown_instruction: |-
        # Practice Using Loops - Part
        2\r
        \r
        Let's look at the second example from the video. \r
        \r
        Use a `for`
        loop to call a function that you wrote.  We've provided the code for the
        `drawSquare()` function for you. \r
        \r
        **Drag out** a `for` loop.\r
        \r
        **Inside
        the loop** add a call to `drawSquare()`, and a call to `turnRight()`.\r
        \r
        **Run
        the program** to see what's happening.\r
        \r
        # Do This:\r
        Change the number
        of loop iterations to draw a lot of squares.  Try to create the figure shown
        below (or something similar).  HINT: the image below has 72 squares in it.\r
        \r
        ![](https://images.code.org/e4d3f180b2f1e421a96d40ecacce029a-image-1443104869913.gif)\r
        \r
        Once
        you've played enough to get the hang of calling a function from inside a
        loop then **move on**.\r
        \r
        To solve the problem, you'll achieve the subgoal
        `//Write a loop` and within your loop, you'll use `//Call function` and `//Orient
        turtle`.
      SG U3L07 - seaGrass_markdown_instruction: |-
        # Controlling Loops with Parameters\r
        <img
        src="https://images.code.org/37d6dbcab707f67485ab3b0cc2a1cae9-image-1443114033511.png"
        style="width: 200px; float: right">\r
        This time you will modify one of
        the lower-level functions - `drawSeagrass`. Notice that the current version
        of `drawSeagrass` actually uses a loop. We want to modify this function so
        that we control the number of times it loops with **a parameter**.\r
        \r
        #
        Do This:\r
        \r
        * **Look at** the `drawSeagrass` function to see how it currently
        works.\r
        \r
        * **Add a parameter ** that will be used to indicate how many
        waves the seagrass makes.\r
        \r
        <img src="https://images.code.org/1f2f0c5e1fc17e541760c4f0fd24b13b-image-1447887194713.7.10
        drawSeagrass add param.gif" style="width:350px;padding-left:22px;">\r
        \r
        *
        **Modify the `'for` loop** so that it uses that **parameter** as the number
        of times to repeat.\r
        \r
         ![](https://images.code.org/23e8e43ec4853c0bdbbbd50b9651300a-image-1443113032135.gif)\r

        \r
        * Finally, **modify `drawAllSeagrass`** to call this new two-param version
        of `drawSeagrass` supplying a reasonable random value for the second parameter
        as well.\r
        \r
        <img src="https://images.code.org/4f15021cd9cebb62562665d3ddc82c51-image-1447885963677.PNG"
        style="width:400px;padding-left:22px;">
      SG U3L07 - seaStar_markdown_instruction: |-
        # Add Sea Stars\r
        \r
        We're now
        ready to add sea stars to our image by writing `drawAllSeaStars`. Recall that
        we've already written loops to draw much more complex stars. \r
        \r
        # Do
        This:\r
        \r
        * **Read** the `drawSeaStar` function to know how it works and
        what **parameters** it accepts.\r
        \r
        * **First: Update** `drawSeaStar` to
        use a `for` loop \r
        \r
        \t* `drawSeaStar` has a portion of code that uses
        a longer sequence of repetitious single commands.  \r
            * Find the pattern
        and "wrap a loop" around it so that the repetition is done with a loop rather
        than many lines of declarative function calls.\r
        \r
        * **Second: Add a loop**
        to `drawAllSeaStars`.\r
            \r
        \t* **Place the commands already inside the
        function in your loop.** This way your code will **move the turtle randomly**
        around the **bottom pixels (y values between 360 and 450)** of the image.\r
        \r
        *
        **Draw 5 sea stars** of random size between **10 and 30** using `drawSeaStar`.\r
        \r
        ![](https://images.code.org/1aadf83bcecaf5ca6c505e46d43e5f45-image-1443046811335.20.04
        PM.png)
      SG U3L07 - sunBeams_markdown_instruction: |-
        # Add Sunbeams\r
        <img src="https://images.code.org/9e08dae8486f66422d492b8d8a6777eb-image-1443048962131.55.54
        PM.png" style="width: 200px; float: right">\r
        Finally, we'll add some
        visual flourish by writing `drawAllSunbeams`. Note: The `turnTo` command makes
        the turtle face a random direction prior to drawing each sun beam.  \r
        \r
        #
        Do This:\r
        \r
        * **Read** the `drawSunbeam` function to know how it works
        and what **parameters** it accepts.\r
        \r
        * **Add a loop** to `drawAllSunbeams`
        to draw about 100 sunbeams. Inside your loop:\r
         \r
        * **Place the commands
        already inside the function in your loop.** This way your code will move the
        turtle to a random x location at the top of the image (y is 0), `turnTo` a
        random angle between **165 and 175 degrees**, and call `drawSunbeam`.
      SG U3L07 - topDownDesign_markdown_instruction: |-
        # Top-Down Design\r
        <img src="https://images.code.org/b4379f51db96b8b1c921de2579e16357-image-1443011791766.21.53
        AM.png" style="width: 150px; float: right">\r
        Look at this complex version
        of the "Under the Sea" scene you drew in the previous lesson. **You now
        have all the skills you need to recreate this digital scene.**\r
        \r
        We will
        use **Top-Down Design** to help manage the complexity of drawing this image.
        The starter code you will be provided already has broken the problem into
        multiple levels.\r
        \r
        # Overview of Program Structure\r
        You are about to
        see that we've provided you with a good amount of starting code.  Here's
        a brief tour:\r
        \r
        **High-Level Function Calls:** These read almost like
        a story of how you will draw the image. There's one function for every major
        component of the scene.\r
        \r
        <img src="https://images.code.org/c07a9b544ab982a91c7cd99339cbe3c9-image-1447885047812.PNG"
        style="width:200px;">\r
        \r
        **High-Level Function Definitions:** These
        currently draw **a single copy of each component**. You will add code to these
        functions to draw many copies of each component in a variety of sizes and
        colors.\r
        \r
        ![](https://images.code.org/1782d088206fede56df1e93482d35faa-image-1443019051470.37.20
        AM.png)\r
        \r
        **Low-Level Functions:** These draw single elements of the
        scene. Most have been written for you already, but we've left a few for you
        to complete as well.\r
        \r
        ![](https://images.code.org/bb081efc86641155eae5f4d363e3ccf4-image-1443019108814.38.22
        AM.png)\r
        \r
        \r
        # Do This:\r
        \r
        * Review the structure of the code in
        this level.\r
        * Run the code to familiarize yourself with what it currently
        draws.\r
        * When you are ready to do so, move on!
      SG U3L07 Free Response Reflection_markdown_instruction: |
        When breaking a problem
        down, you often encounter elements that you want to use repeatedly in your
        code. Sometimes it's appropriate to write a new function; at other times
        it's appropriate to write a loop.  \r
        \r
        There is no hard-and-fast rule
        as to which is better, but what do you think?  What kinds of circumstances
        would lead you to writing a function versus using a loop?\r
        \r
      SG U3L07 More Subgoals_markdown_instruction: |-
        # More New Commands: Pen Properties\r
        \r
        Two
        powerful new commands have been added to the toolbox, `penColor()` and `penWidth()`.
        These both serve the new subgoal `//Set pen properties`. By changing the properties
        of the pen, you are no longer limited to just a thin black line. \r
        \r
        #
        Documentation\r
        As we move forward you are going to see more and more (and
        more!) commands added to the toolbox.  What happens if you see a command and
        don't understand it, or you forget how it works?  Don't worry, this happens
        to professional programmers all the time! No one actually memorizes long lists
        of commands.  Most programming environments have ways to quickly look up documentation
        about the commands of the language you're using.  **Good news: App Lab has
        documentation too!**\r
        \r
        ![](https://images.code.org/3fe10e1b65edb37306099098161be001-image-1441990727053.gif)\r
        \r
        When
        you **hover your mouse over a non-subgoal command** in the block palette a
        bubble pops up with a quick reminder of what a function does, and what its
        parameters are. If you click "See examples", you will be taken to more detailed
        documentation of the command which includes **code examples** that you can
        even copy and paste.\r
        \r
        **Read the documentation:** Read through the documentation
        by **hovering over** `penColor()` and `penWidth()` which let you set the color
        and size of the pen your turtle uses to draw. The documentation for `penColor()`
        has a lot in it!  For now just look at the **named colors**, things like "red",
        "green", etc.  Don't worry, you'll get a lot of opportunities to practice
        with colors in a variety of ways.  We're just getting started!\r
        \r
        # Do
        This\r
        You should explore some of the documentation. Then Run the code and
        click Finish.
      SG U3L08 - createTwoParamTriangle_markdown_instruction: |-
        # Defining Functions
        with Multiple Parameters\r
        \r
        Now it's your turn to define a function that
        accepts multiple parameters. Just like in the previous example make sure you
        **separate your parameters with commas** and give them **descriptive and meaningful**
        names.\r
        \r
        # Do This:\r
        * **Drag out ** the function block, and **name**
        your function `drawTriangle()`. \r
        * **Define `drawTriangle()` to have two
        parameters ** within the parentheses making sure to give them **descriptive
        and meaningful** names separated by commas, such as `(size,width)`. \r
            *
        This animation shows you how (without subgoals in the code) ![expandable](https://images.code.org/b1f5eead2ccb60e5ae607feff590bd3c-image-1442850344677.gif)\r
            \r
        *
        Then **write ** the code inside `drawTriangle(size, width)` that will make
        it work as described.\r
        * If you get stuck, come up with a top-down plan
        and the subgoals you need for creating a function that draws a triangle.\r
        *
        Test it out!  **Run ** the code and experiment to create an image similar
        to the one below.\r
        \r
        Remember that to achieve the subgoal `//Define function`,
        you need to give it a name, identify the parameters, and fill it in with blocks.\r
        \r
        ![](https://images.code.org/a389c07c259c8877989b6920328a4c78-image-1442529590755.39.38
        PM.png)
      SG U3L08 - digitalScene_markdown_instruction: |-
        # Design Your Digital Scene\r
        \r
        This
        is the final project that you will submit.\r
        \r
        # Do This:\r
        \r
        **Copy**
        all of the individual functions you and your group members have written at
        the bottom of this program.\r
        \r
        **Design your scene** using these functions,
        placing your calls at the top of the file.
      SG U3L08 - drawSquareWithParam_markdown_instruction: |-
        # Defining and Using
        a Function with a Parameter\r
        From the video, you learned that defining multiple
        functions to draw different sized squares results in lots of repetitive functions
        - they are essentially the same, with a few numbers changed - and this is
        not desirable.\r
        Any time you find yourself effectively copy and pasting
        large sections of code, it's usually a sign that there is a better way.\r
        \r
        #
        Do This:\r
        Uh oh! Something's wrong! We've set up a program that runs,
        but doesn't do what it's supposed to do. The program is supposed to make
        a drawing with two squares that looks like this:\r
        \r
        <img src="https://images.code.org/3eae30651dabc2f83a8bbbbbf8bea7ad-image-1442420537113.26.34
        AM.png" style="width: 150px;"> \r
        \r
        We've given you the `drawSquare(size)`function
        that was created in the video, but it's not quite right. **Fix the code inside
        the `drawSquare()` function so that the program creates the drawing correctly.**\r
        \r
        **HINT:**
        You should only need to change one thing about an existing line of code. You
        don't need to add or remove any lines of code. Remember: The parameter `size`
        acts like a placeholder for a value that gets plugged into each call to `moveForward()`.
      SG U3L08 - fish_markdown_instruction: |-
        # Adding parameters to functions: *drawFish*\r
        \r
        Let's
        update our `drawFish()` function to accept a parameter. Currently `drawFish()`
        can only draw a fish of size 30.\r
        \r
        **Add a parameter** to the function
        definition for `drawFish()` that allows you to control its size (Note: the
        pen width is important here.) Make sure your parameter has a **descriptive
        and meaningful** name.\r
        \r
        **Update your function calls** to use your new
        version of `drawFish()` and change the size of the fish in your image.\r
        \r
        ![](https://images.code.org/35f9a55244004dad62781f4ae0ce7eb2-image-1442608034411.26.55
        PM.png)
      SG U3L08 - freePlay_markdown_instruction: |-
        # Keep Going!\r
        \r
        At this point
        you've seen how parameters can help **generalize the behavior of a function**
        to perform a variety of tasks, not just one. This will prove to be a very
        useful skill as we continue to develop as programmers.\r
        \r
        For now, **keep
        adding to your drawing**. Make more function calls and see if you can continue
        to use **random numbers** to add variety to your drawings.\r
        \r
        ![](https://images.code.org/514994b00554eac86c2a762177b77493-image-1442611547075.58.11
        PM.png)
      SG U3L08 - individualCode_markdown_instruction: |-
        # Design Your Component\r
        \r
        With
        your **group** you should have already identified and assigned the high-level
        functions that should be used to create your digital scene. \r
        \r
        # Do This:\r
        Use
        the space here to design your functions. Once you're done you can **share**
        this project with your groupmates.
      SG U3L08 - introUnderTheSea - recovery_markdown_instruction: |-
        # Under the Sea!\r
        \r
        In
        the next several challenges you will be working to improve **one program**
        that draws an underwater scene.  Each time you  finish a puzzle and move on
        to the next one, your code will be pulled forward and you'll get new instructions
        telling you what to add.\r
        \r
        # Do This:\r
        \r
        * **Read through ** the
        program provided to get a basic understanding of what it does.\r
        * **Add
        function calls ** to the top of the program so that **two fish, two starfish,
        and two pieces of seagrass** appear somewhere in the scene.You don't need
        to provide values for the parameters at this stage.\r
        * **Hint:** you need
        to call `moveTo` before drawing a second fish, starfish or seagrass, otherwise
        you won't see the second one because it will draw exactly over the first
        one -- those functions draw based on where the turtle is just before the call.\r
        *
        Test out your code. If something doesn't work like you expect, consider whether
        you can add anything to the functions' definitions to make them better.\r
        *
        **Continue ** to the next level, **where your code will be waiting for you.**\r
        \r
        ![](https://images.code.org/a53accb7edf7ed4e09d56bab903e1af9-image-1442604192660.22.35
        PM.png)
      SG U3L08 - introUnderTheSea_markdown_instruction: |-
        # Under the Sea!\r
        \r
        In
        the next several challenges you will be working to improve **one program**
        that draws an underwater scene.  Each time you  finish a puzzle and move on
        to the next one, your code will be pulled forward and you'll get new instructions
        telling you what to add.\r
        \r
        # Do This:\r
        \r
        * **Read through ** the
        program provided to get a basic understanding of what it does.\r
        * **Add
        function calls ** to the top of the program so that **two fish, two starfish,
        and two pieces of seagrass** appear somewhere in the scene.You don't need
        to provide values for the parameters at this stage.\r
        * **Hint:** you need
        to call `moveTo` before drawing a second fish, starfish or seagrass, otherwise
        you won't see the second one because it will draw exactly over the first
        one -- those functions draw based on where the turtle is just before the call.\r
        *
        Test out your code. If something doesn't work like you expect, consider whether
        you can add anything to the functions' definitions to make them better.\r
        *
        **Continue ** to the next level, **where your code will be waiting for you.**\r
        \r
        ![](https://images.code.org/a53accb7edf7ed4e09d56bab903e1af9-image-1442604192660.22.35
        PM.png)
      SG U3L08 - multiParamFish_markdown_instruction: |-
        # Multiple Parameters\r
        \r
        Let's
        make our drawings even more interesting by adding some variety to the color.\r
        \r
        **Add**
        three more parameters called `red` , `green` , and `blue` to your function
        definition for `drawFish` which allow you to set the color of the fish when
        you call the function. Remember to separate them with commas!\r
        \r
        **Note:**
        this means that drawFish will now have 4 parameters total: size, red, green,
        and blue. Remember that identifying these parameters are all part of the subgoal
        `//Define function`.\r
        \r
        **HINT:** inside drawFish just replace the numbers
        of the penRGB values with the parameters of your function.\r
        \r
        **Change**
        the function calls at the top your code to draw different colored fish.\r
        \r
        ![](https://images.code.org/14b52d152c818903b0fc87061126f0f8-image-1442608501173.34.30
        PM.png)
      SG U3L08 - paramsToStarfish_markdown_instruction: |-
        # Adding Parameters to Functions:
        *drawStarfish*\r
        \r
        We want to make our picture more interesting by adding
        some variety. Currently the `drawStarfish()` function can only draw a starfish
        of size 60.\r
        \r
        **Add a parameter** to the function definition for `drawStarfish()`
        that allows you to control its size - like `drawStarfish(size)`. Make sure
        your parameter has a **descriptive and meaningful** name. Also make sure to
        change the blocks within the function to use the parameter name that you chose.\r
        \r
        **Update
        your function calls** to use your new version of `drawStarfish()` and change
        the size of your starfish.\r
        \r
        ![](https://images.code.org/320485cb05b50bcdb8aa8d13c0164502-image-1442606362191.59.12
        PM.png)
      SG U3L08 - randomInput_markdown_instruction: |-
        # Random Input\r
        \r
        You have
        a new block that allows you to generate a random number. You can use this
        instead of hard-coding in values every time you call a function.\r
        \r
        ![](https://images.code.org/5ff13bfdf582692f009b787570d467d0-image-1470145136252.png)\r
        \r
        **Read
        the documentation** for the randomNumber block.\r
        \r
        # Do This\r
        **Use
        randomNumber to provide random input** to *all three* of your drawing functions.  Just
        insert the call to randomNumber where you would otherwise put numbers.  \r
        \r
        Like
        this:\r
        ![](https://images.code.org/ad87d7d122ac585a6de9e46a49736228-image-1470146652402.png)\r
        \r
        Use
        randomNumber in calls to all three of your drawing functions:\r
        \r
        * drawStarfish\r
        *
        drawSeagrass\r
        * drawFish\r
        \r
        This is a great way to **test** out functions
        and also get some **interesting looking images**. Every time you run the program
        you can get slightly different looking scenes like the ones below.\r
        \r
        ![](https://images.code.org/d2031f555ed23bcfa4a6a6165074b559-image-1442852053630.png)
      SG U3L08 - seaGrass_markdown_instruction: |-
        # Adding Parameters to Functions:
        *drawSeagrass*\r
        \r
        To keep adding variety to our image let's keep adding
        parameters to our functions. Currently the `drawSeagrass()` function can only
        draw a piece of seagrass with arcs of radius 100.\r
        \r
        **Add a parameter**
        to the function definition for `drawSeagrass()` that allows you to control
        its size. (You'll only need to change the radius of each arc.) Make sure
        your parameter has a **descriptive and meaningful** name.\r
        \r
        **Update
        your function calls** to use your new version of `drawSeagrass()` and change
        the size of the seagrass in your image.\r
        \r
        ![](https://images.code.org/0b7d1750101a4c81ef8d77d8668f94f2-image-1442606862829.07.30
        PM.png)
      SG U3L08 - squareTwoParams_markdown_instruction: |-
        # Calling Functions with
        Multiple Parameters\r
        \r
        Here is a new definition for `drawSquare()` that
        has two parameters: `drawSquare(size, borderWidth)` Notice how **multiple
        parameters are separated by commas**.\r
        \r
        ![](https://images.code.org/c9766f914d59531614c753e9147d29dd-image-1447801298794.01.15
        PM.png)\r
        \r
        # Do This:\r
        Add to the code to **make two calls** to the
        new two-parameter version of `drawSquare()` to make an image similar to this
        one.\r
        \r
        ![](https://images.code.org/ddd85deb33ff82f3c257d25cdc9e6384-image-1442526350229.45.38
        PM.png)\r
        \r
        Just like for the subgoal `//Define function`, the subgoal
        `//Call function` used to involve only identifying the function's name. Now
        when you call a function, you need to identify the function's name and the
        value of the parameters for the function.
      SG U3L08 Assessment2_markdown_instruction: |-
        “Abstraction” is often used to
        focus on a general case and ignore a specific instance of a problem. \r
        \r
        Given
        this meaning of the word, how are functions with parameters an example of
        abstraction?
      SG U3L08 comments_markdown_instruction: |-
        # Commenting code for yourself and
        for collaboration\r
        \r
        Programmers write comments into their code for two
        main reasons: (1) sharing code with other programmers (2) remembering their
        own thoughts or plans for code they write.  \r
        \r
        For both cases a programmers
        **write comments into their code to explain their thinking to the reader.**\r
        \r
        The
        subgoal comments you've seen are a specific type of commenting meant to help
        you learn.  As you get more experience  programming, comments you write can
        be in addition to, or simply replace your subgoal comments.\r
        \r
        <details><summary
        ><b>More: Why write comments?</b></summary>\r
        <div style="background-color:
        #e9f7f7; margin-left: 20px; padding: 10px">\r
        <p>\r
        When sharing code with
        others, comments are useful to point out sections of code you might want help
        with, or to explain a complicated section of code that's hard to reason about.  It's
        useful for example to write a comment like: <code>//This function assumes
        that the fish have already been drawn</code> because it helps the reader understand
        when, where, why that section of code might be executed.\r
        </p>\r
        <p></p>\r
        <p>\r
        When
        writing comments for yourself, it might be a note about how you plan to solve
        a problem, or jotting down the reason you did something to remind yourself
        later when you come back to it.  For example you might write a comment like:
        <code>//to do: make a function to handle this code below</code>\r
          </p>\r
          <p>\r
          Many
        programmers, when starting from scratch, like to write out a high level plan
        for the code they want to write in comments, and then go in starting writing
        code to fill in the plan. This is particularly useful if you're facing a
        large problem that needs to be broken down into parts.  You can think about
        the big picture to start and write out a strategy in comments so you don't
        forget it later -- which happens -- because once you start writing code you'll
        run into lots of micro-hurdles that might take time to solve or work out the
        bugs and you need your brain space to work on those.  A plan for drawing an
        under the sea scene might look like this:\r
        <pre>\r
            // setup for drawing\r
            //
        draw background with color and bubbles\r
            // draw all the fish\r
            //
        draw all the seagrass\r
            // draw bubbles again\r
         </pre>\r
        </p>\r
        </div>\r
        </details>\r
        \r
        #
        Do This\r
        \r
        **Add your own comments** to the code that you've been working
        on. Imagine that you are describing the purpose of the code to one of your
        classmates.  Or find the most complicated part and try to explain it.\r
        \r
        The
        way that you add comments is with the `// Comment` block, which is in the
        **Functions** tab of the toolbox.\r
        \r
        **See how:** ![expandable](https://images.code.org/fc29157949ee10369cb8a8db280b886f-image-1508515330684.gif)
      SG U3L08 how to add comments_markdown_instruction: |-
        # Now you try it - Add
        a comment\r
        \r
        The starting code provided has some comments already in it.\r
        \r
        #
        Do This\r
        \r
        Insert a comment that says `// Draw a starfish at specific
        location` just above the section of code that will draw the starfish. \r
        \r
        The
        way that you add comments is with the `// Comment` block, which is in the
        **Functions** tab of the toolbox ([Show me](#triggercallout=show_comment)).\r
        \r
        **See
        how:** ![expandable](https://images.code.org/fc29157949ee10369cb8a8db280b886f-image-1508515330684.gif)\r
        \r
        **Add
        more comments** to the code that explain what each section of code is for.
        Imagine that you are describing the purpose of the code to one of your classmates.  Or
        find the most complicated part and try to explain it.\r
        \r
        **Click finish**
        once you've added the comment.  And keep adding comments as you go!!!
      SG U3L2 Using Simple Commands part 1_markdown_instruction: |
        # Welcome to App
        Lab - Let's get started\r
        <img src="htt\r
        ps://images.code.org/f93dfb56ab00f689dcd5867eb4398fa8-image-1508424086651.png"
        align=right>\r
        \r
        We're going to start learning how to program with turtle
        commands. Given only 2 turtle commands, write code to complete the drawings
        in each of the following challenges. \r
        \r
        <img src="https://images.code.org/d26ed114448c5ffe75a75ed761fab5f0-image-1447888033281.gif"
        align=right>\r
        # Do This: \r
        Add code to draw a 1 x 1 square to the front
        and left of the turtle as efficiently as possible. The program should stop
        with turtle in its original position, facing its original direction.\r
        \r
        Once
        you think you have a solution, click the `Finish` button - it will appear
        after you run the program once.\r
      SG U3L2 Using Simple Commands_markdown_instruction: |-
        # Now you try it!\r
        \r
        We'll
        be learning how to code with subgoals throughout this unit.\r
        \r
        Typically,
        you'll solve problems by dragging blocks from the toolbox to the workspace.
        Sometimes we'll put subgoals that solve the problem into the workspace, and
        sometimes you'll have to identify the subgoals yourself.\r
        \r
        Here we've
        added a series of `// Move turtle` and `// Orient turtle` subgoals into the
        workspace that describe how to solve the 1x1 square problem...but it's incomplete.\r
        \r
        #
        Do This: \r
        \r
        * Complete the code for the the 1x1 square solution we've
        started below.\r
        * Drag each turtle block beneath the proper subgoal in the
        code. \r
        \r
        **Click here to see how** ![expandable](https://images.code.org/5818d0b6080e3a30dc081a166cfbffcb-image-1508437404576.gif)\r
        \r
        <img
        src="https://images.code.org/d26ed114448c5ffe75a75ed761fab5f0-image-1447888033281.gif"
        align=right>\r
        \r
        * Reminder: the turtle should end up in its original position,
        facing its original direction.\r
        \r
        Once you think you have a solution,
        click the `Finish` button.
      SG U3L2_Add-subgoals_markdown_instruction: |
        # New challenge <img src="https://images.code.org/c15fee1f27c817a352a521c7ddcb5006-image-1436282127747.png"
        style="float: right">\r
        \r
        Draw a 3x3 grid to the *front* and *right*
        of the turtle *as efficiently* as possible.\r
        \r
        What does “efficient” mean?
        In computer science it can actually mean several different things depending
        on the situation. For this problem let's say that efficient means: **using
        the fewest turtle commands possible**\r
        \r
        # Do this\r
        \r
        1. This problem
        presents some subtle challenges. Before you start creating the program, you
        might want to test your ideas on paper for faster brainstorming. Work with
        your partner to discuss possible solutions or strategies. Try more than one.\r
        \r
        2.
        Once you have a solution, **start** by identifying the subgoals and drag them
        from the **Goals** tab into the workspace. \r
        \r
        3. Then start filling it
        in with turtle blocks, and **testing** it out as you go by adding a few commands,
        then running the program, adding a few more, run again, and so on.\r
        \r
        When
        you think you're done click `Finish` and move on.\r
      SG U3L2_Turtle3by3Grid_markdown_instruction: |-
        # New challenge <img src="https://images.code.org/c15fee1f27c817a352a521c7ddcb5006-image-1436282127747.png"
        style="float: right">\r
        \r
        Draw a 3x3 grid to the *front* and *right*
        of the turtle *as efficiently* as possible.\r
        \r
        What does “efficient” mean?
        In computer science it can actually mean several different things depending
        on the situation. For this problem let's say that efficient means: **using
        the fewest turtle commands possible**\r
        \r
        **note:** From now on, the 4
        turtle commands mentioned in the video will always be in toolbox.  You don't
        necessarily need `penUp()` and `penDown()` for this challenge, but in the
        future you might want to use them. ([Show me where](#triggercallout=show_penup))\r
        \r
        #
        Do this\r
        \r
        1. This problem presents some subtle challenges. Before you
        start creating the program, you might want to test your ideas on paper for
        faster brainstorming. Work with your partner to discuss possible solutions
        or strategies. Try more than one.\r
        \r
        2. Once you have a solution, **start**
        by identifying the subgoals and drag them from the **Goals** tab into the
        workspace. ([Show me where](#triggercallout=show_goals))\r
        \r
        3. Then start
        filling it in with turtle blocks, and **testing** it out as you go by adding
        a few commands, then running the program, adding a few more, run again, and
        so on.\r
        \r
        When you think you're done click `Finish` and move on.
      SG U3L2_TurtleSquare_right_markdown_instruction: |
        # New problem <img src="https://images.code.org/ad48e7224312a6c41f4fc5727af53cc0-image-1436287265071.png"
        align=right> \r
        \r
        This time, draw a 1 x 1 square, so the square is above
        and to the right of the turtle.  This means you need to draw it by moving
        and *turning right*.  **But there there is no command to turn right!** \r
        \r
        How
        do you turn right when the only command you have is `turnLeft()`?  You need
        to figure it out.\r
        \r
        ## One Subgoal - multiple lines of code <img src="https://images.code.org/ae8ac9b14b7c016437455d07fdbb6a7c-image-1508440383741.png"
        style="float: right">\r
        Sometimes a single subgoal like `// Orient Turtle`
        might require several lines of code to accomplish. \r
        \r
        For example in
        this problem the *goal* of orienting the turtle for each right turn means
        turning left a few times.  So you would add multiple `turnLeft()` commands
        under a single `//Orient Turtle` subgoal. (shown at right).\r
        \r
        <div style="clear:
        both"> </div>\r
        \r
        # Do this\r
        \r
        \r
        * We've again added subgoals to
        solve this problem into the workspace.  Notice that we still only use `Move
        turtle` and `Orient turtle`.\r
        * Add code beneath each subgoal, to draw a
        1 x 1 square by moving and *turning right*.\r
        * Reminder: The program should
        stop with turtle in its original position, facing its original direction.\r
        \r
        When
        you're done click the `Finish` button to move onto the next problem.\r
        \r
      SG csp_U3_plan_code_FR_markdown_instruction: |-
        <img src="https://images.code.org/01d3b0664443216b4363ec31914e592a-image-1506460763004.png"
        style="float: right">\r
        \r
        <br>\r
        \r
        In this lesson we talked about
        top-down design for building up solutions to larger programming problems.  Plan
        the code that you would use to draw this image (shown at right). Describe
        each of the functions that you would create. You should not write all the
        code, only the names of the functions that you would create with a brief description
        of what each function would do. \r
        \r
        Write your plan following the format:\r
        \r
        <div
        style="clear: both"> </div>\r
        \r
            Name of function - description of
        what it does\r
        \r
            Name of function 2 - description of what it does\r
            ...
      SG csp_U3_square_v_rect_FR_markdown_instruction: |-
        <img src="https://images.code.org/2f9b8b6a1c42b7c6c881f89867352907-image-1506460228029.png"
        style="float: right">\r
        \r
        In this lesson you wrote code to make the turtle
        draw squares. Briefly describe how the code for drawing a rectangle would
        be different than drawing a square.  (Example rectangle at right)
      SG subgoals_U3_turtle_prediction_FR_markdown_instruction: |-
        ## Code Trace\r
        \r
        In
        1-2 sentences, explain what you think the following code does.\r
        \r
        ![](https://images.code.org/5bc66acc4712cf1c835daac0c45422a8-image-1506532056958.png)
      SG subgoals_u3_top_down_FR_markdown_instruction: |-
        # Design a program\r
        \r
        Describe,
        using a top-down approach, how you would create a program to draw a white
        snowflake on a blue background that uses random numbers, so the snowflake
        will be unique every time you run the code. \r
        \r
        You don’t need to write
        the exact code or blocks that you would use, but you should describe what
        functions you would need to create, where you would or would not use loops,
        and where you would or would not use random numbers.
      SGU3L07 - randomDots1_markdown_instruction: |-
        # Looping with Random Values\r
        \r
        <img
        src="https://images.code.org/520e45a90988b04bb0ff3baa184f080a-image-1443108426597.png"
        style="width: 100px; float: right;">\r
        \r
        If you add some randomness to
        turtle behavior inside a loop, the program will run a little differently every
        time which can make for some cool effects.\r
        \r
        You're about to see a program
        in which the turtle **moves to a random location** each iteration of the loop,
        and **draws a randomly-sized dot** that also has a **random color**.  We've
        also made the dot semi-transparent by setting the alpha value to 0.5 (50%
        transparency).\r
        \r
        # Do This:\r
        \r
        **Figure out how many iterations**
        (number of times the loop runs) you need to consistently fill the screen entirely
        with dots so none of the background is showing.  It will be a little different
        every time so you'll need to experiment.\r
        \r
        **Compare what you found**
        with a neighbor to see how close your results are.  Then **move on**.
      SGU3L2A Introducing Subgoals_markdown_instruction: |-
        # Introducing Subgoals\r
        Writing
        code is fun, but as you write longer programs that solve more complex problems
        it's useful to think at a higher level about the **series of subgoals** that
        build toward the solution.\r
        \r
        In App Lab we have provided special blocks
        called [`Goals`](#triggercallout=goals_palette) to help you think about the
        **subgoals** of the problems you're solving. ([Show me](#triggercallout=goals_palette))\r
        \r
        These
        subgoal blocks are known as "comments" which programmers use to make notes
        to themselves or other people who might view the code. You can drag these
        blocks into your code to help label things and stay organized, but they won't
        do anything when you run the program.  Try it out.\r
        \r
        # Do This:\r
        \r
        *
        Don't add any code, just click `Run` and notice the following:\r
        * In the
        workspace we've added the subgoals `//Move turtle` and `//Orient turtle`
        a few places in the code. ([Show me](#triggercallout=show_code)) \r
        * Underneath
        each subgoal, we've added the blocks to complete the subgoal.\r
        * The point
        is to simply notice that the subgoals don't change the drawing or what the
        turtle does.\r
        * The turtle is still only controlled by the blue turtle command
        blocks\r
        \r
        After running the program, click `Finish` to move on to try
        it yourself.\r
        \r
        \r
        <!--\r
        \r
        This is how we'll be using App Lab throughout
        this unit. You'll get several puzzles to solve by dragging blocks from the
        toolbox to the workspace. Sometimes the workspace will tell you the subgoals
        of the puzzle, and sometimes you'll have to identify the subgoals yourself.\r
        \r
        The
        first step of every puzzle will be to put the subgoals of the problem in the
        workspace (if they aren't already there). Then you'll put the blocks that
        solve the subgoals underneath.\r
        \r
        In the workspace below, we've added
        two subgoals, Move turtle and Orient turtle. Underneath each subgoal, we've
        added the blocks to complete the subgoal.\r
        \r
        The subgoals are described
        in comment blocks. This means that the subgoal comment will be visible in
        your code, but they won't do anything when you run the code. Comments are
        purely to make notes to yourself or other people who might view the code.\r
        \r
        Do
        This:\r
        \r
        Press the Run button to `run` the code. Notice that the subgoals
        don't show up in the drawing. Only the blocks will make the turtle do something.\r
        \r
        -->
      Sam the Butterfly 2_markdown_instruction: |-
        Sam's mom wants to make sure that
        she can always see at least a bit of him, so lets write some functions that
        help make sure he doesn't go too far out of the yard. Here's a function
        called `safe-left?` - it should take a Number for its domain that represents
        Sam's x-coordinates and return *true* if he's completely visible on screen.
        If your function works, Sam shouldn't be able to leave the yard from the
        left side.
      Sam the Butterfly 3_markdown_instruction: |-
        In the last puzzle we kept Sam from
        leaving on the left, now let's do the same thing on the right. Complete the
        `safe-right?` function to make sure Sam can't go off the right side of the
        screen.
      Sam the Butterfly 4_markdown_instruction: |-
        Huh, we can keep Sam from leaving
        on the left, or we can keep him from leaving on the right, but how can we
        keep him safe from leaving both directions? Try using the `and` block to program
        the function `on-screen?` to check if Sam is `safe-left?` and `safe-right?`
      Sam the Butterfly 5_markdown_instruction: |-
        Free Play: Awesome, we've kept
        Sam safe on the left and right! Use this free play stage to experiment with
        your functions and further improve `onscreen?`
      Sample Free Response_markdown_instruction: |-
        In this module, you learned about
        how information gets shuttled from place-to-place on the internet, and the
        major steps along the way.  **Write a lesson plan for your students about
        how packets are constructed.**\r
        \r
        ### How this task is reviewed\r
        This
        task is peer-reviewed by 2 peers, using the following rubric:\r
        \r
         - Lesson
        includes lecture\r
         - Lesson includes activity on network simulator
      Screen Size_markdown_instruction: |-
        # Hardware Accessibility: Screen Size\r
        \r
        Another
        thing to consider about accessibility for different users is the size of the
        device they are using to view the web page. You can do a basic test for this
        by resizing the view area to see how the website changes with the changes
        in size.\r
        \r
        # Do This\r
        \r
        * Use the dragger to resize your preview
        area to see how your website adapts.\r
        * Shrink the size of the instructions
        area to resize how tall the web page is
      Search Engine Optimizer_markdown_instruction: |-
        # Search Engine Optimizer (SEO)\r
        \r
        **Search
        Engine Optimization** is the process of maximizing the number of visitors
        to a particular website by ensuring that the site appears high on the list
        of results returned by a search engine.  A **Search Engine Optimizer** is
        a tool that analyzes a website on different qualities that lead to a higher
        rank on different search engines.\r
        \r
        # Do This\r
        \r
        * Open the SEO tool
        linked below in another tab\r
        * Try each of the websites on your list on
        the SEO:\r
        \t* Look at the score each website receives\r
            * Does your
        ranking generally correlate to the SEO scores?\r
        * Take a look at how the
        SEO is rating websites:\r
            * Look through the different sections of the
        rating\r
            ![](https://images.code.org/dc938c470e578683f788d641c22a2699-image-1476900428201.05.20
        PM.png) \r
            * What factors does the SEO use to score websites? \r
            *
        Are there new factors you could use in your algorithm that you had not thought
        of before?
      Software Accessibility_markdown_instruction: |-
        # Software Accessibility: Validator\r
        \r
        HTML
        is designed to display the same way on all computers, but sometimes you’ll
        notice that different web browsers, or even different versions of the same
        browser, display a website differently. Often this is because you either missed
        a rule of HTML, or didn’t describe your content specifically enough. Fortunately
        there’s a tool called the Validator that can check your code for errors!\r
        \r
        #
        Do This\r
        \r
        * Open up the <a href="https://validator.w3.org/#validate_by_input"
        target="_blank">Validator - Website</a>\r
        * For each html file in your
        project\r
        \t* Copy the html into the box\r
            * Click check to see if there
        are an error\r
        \t* Make a list of all unique errors.\r
            * For each error,
        write in your own words what you think it means\r
            * For each error, search
        to find a potential solution.
      Standalone_Artist_1_markdown_instruction: |
        Welcome to Artist! First off, let's
        try to make a simple square using the turn right block and move forward block.
        Each side should be 100 pixels long.\r
        \r
      Standalone_Artist_2_markdown_instruction: |
        Draw this diamond with 120 and 60
        degree angles and 150 pixel long sides.\r
        \r
      Standalone_Artist_3_markdown_instruction: |
        Can you draw this hexagon with 100
        pixel sides and 60 degree turns?\r
        \r
      Standalone_Artist_4_markdown_instruction: |
        Now you've got a new block to play
        with, the loop. This will repeat a set of commands. What happens if you loop
        these commands 6 times?\r
        \r
      Standalone_Artist_5.5_markdown_instruction: |
        Notice how we simplified the diamond
        code by turning it into a loop. You can loop that whole sequence 12 times
        to draw the flower. Hint: You'll need to turn 30 degrees after your diamond
        loop so you don't keep drawing over the same diamond.\r
        \r
      Standalone_Artist_5_markdown_instruction: |
        How many times do you need to loop
        this diamond to draw the flower?\r
        \r
      Standalone_Artist_6_markdown_instruction: |
        Loop this hexagon code 6 times to
        create the design. How many degrees will you need to turn each time? Hint:
        divide the number of degrees in a circle by the number of times you are looping.\r
        \r
      Standalone_Artist_7_markdown_instruction: |
        A function is another programming
        tool to help you avoid repeating yourself. This function draws a flower, so
        you can use it any time you want to draw a flower. Use this and the new jump
        block to draw these flowers. Hint: The flowers are 150 pixels apart\r
        \r
      Standalone_Artist_8_markdown_instruction: |
        Here's a function called `Draw
        a shape` that we've programmed to draw hexagons. Run the code to see what
        it does and then experiment with the function to see what happens. Can you
        make it draw a pattern of squares, triangles, or octagons?\r
        \r
      Standalone_Artist_9_markdown_instruction: |
        Now go ahead and make whatever picture
        you'd like! You've even got an empty function that you can make do whatever
        you want!\r
        \r
      'Stop: List Review_markdown_instruction': |
        ## Choose: Array or Variable?\r
        \r
        Your
        app needs to store the following information. For each type of information,
        decide whether you would use an array or a variable to store it:\r
         \r
        *
        All the messages a user has sent\r
        * The highest score a user has ever reached
        on the app\r
        * A username and password to unlock the app\r
        \r
      'Stop: Review Getters and Setters_markdown_instruction': |-
        # Reflection\r
        \r
        Questions:\r
        \r
        *
        What is the difference between getters and setters?\r
        * Why would you want
        to save the information from a getter in a variable?
      'Task: ASCII Representation of your Name_markdown_instruction': |
        # TASK: Write
        your name in ASCII\r
        \r
        Use the ASCII Table below to write your name in
        the decimal and binary representations: \r
        <br><br>\r
        \r
        ![](https://images.code.org/8dc285b920911bdfb8c53db74db5c272-image-1474246518064.54.59
        PM.png)\r
        \r
        <br><br>\r
        The full ASCII table can be found <a href="https://upload.wikimedia.org/wikipedia/commons/d/dd/ASCII-Table.svg"
        target=_blank> here</a>.\r
        \r
      'Task: Develop a Battleship Protocol_markdown_instruction': |-
        # Task: Create
        a Battleship Protocol\r
        \r
        One of the best ways to prepare to teach a lesson
        is by actually doing the activity yourself.  As you complete the activity,
        consider the misconceptions that your students may have and what sorts of
        questions you can ask to help them overcome these barriers.  \r
        <br>\r
        While
        completing this activity, note: \r
        <ol>\r
        <li>There are many 'correct'
        answers as long as the rules are used consistently. </li>\r
        <li> Challenge
        yourself to develop an *efficient* protocol.  In this case, this means you
        should consider the fewest number of bits necessary to encode the whole message.
        </li>\r
        <li> If you have already looked at the exemplar protocol in this
        lesson, try to create your own unique protocol.  This will help you empathize
        with students as you think about the design process necessary to develop the
        protocol.</li></ol>\r
        <br>\r
        \r
        ><a href=”https://docs.google.com/document/d/1hq1UNK1Q4K0LHqmu0_yeO0a0NQKHzC8W--Q0QaISHVI/edit”
        target=_blank> Click here for the Battleship Protocols Activity Guide >> </a>\r
        <br>\r
        ><a
        href= "https://code.org/curriculum/docs/csp/U2L03-battleship-exemplar.png"
        target=_blank > Click here for an exemplar solution >> </a>\r
        \r
        <br><br>\r
        \r
        Use
        the space below to share your protocol.
      'Task: Encode an Experience_markdown_instruction': |
        # Task: Encode an Experience\r
        \r
        ##
        Do the Activity\r
        One of the best ways to prepare to help students with the
        challenges of this Practice PT is by actually encoding an experience yourself.  As
        you complete the activity, consider the misconceptions that your students
        may have and what sorts of questions you can ask to help them overcome these
        barriers. In order to do this activity, you'll want to access the encode
        an experience activity guide and project template, both linked below. \r
        \r
        \r
        -
        First, you'll want to read through the <a href =”https://curriculum.code.org/csp/unit2/6/”
        target=_blank> lesson plan <i class="fa fa-external-link-square"/></a> and
        the <a href=”https://docs.google.com/document/d/1kmIJlEyS4V6kU47vzyZMlENsdgLJoV-ZLyYQ2RIjuN8/edit”
        target=_blank> project activity guide <i class="fa fa-external-link-square"/></a>\r
        -
        Then, encode a real life experience or event in binary! Follow the <a href
        = “https://docs.google.com/document/d/1Qao_Qq5Z4Ta1ns_K3T7wip53MLQvJOouwFHIP2zmKsE/edit”
        target=_blank> project tempalte <i class="fa fa-external-link-square"/></a>
        to step through encoding an experience of your own. \r
        \r
        \r
        <hr>\r
        ###
        <a href= "http://forum.code.org/c/csp2/lesson06" target=_blank> Head to
        the Forum >></a>\r
        <hr>\r
        \r
        \r
        ## Share Your Encoding and Ideas\r
        Head
        to the forum and share your ideas about this activity. Specifically, share:
        \r
        \r
        \r
        - Your encoded experience (feel free to upload and share your
        completed template).\r
        - Misconceptions that your students may have and what
        sorts of questions you can ask to help them overcome these barriers.\r
        \r
        \r
        ##  Submit
        the Link for your Forum Post\r
        Once you’ve posted in the forum, share a link
        here. In order to get a direct link to your post, click the link icon directly
        under your post (shown in the picture below):\r
        \r
        \r
        ![](https://images.code.org/40fd4bb1aa4f50cfb0d66bbf7881cd0d-image-1443847364702.png)\r
        \r
        \r
      'Task: Explore Google Trends_markdown_instruction': |
        # Task: Explore Google
        Trends\r
        \r
        \r
        One of the best ways to prepare to help students with this
        chunk of lessons is to start understanding ways to see trends in data. Here
        we’ll give some examples of related topics to search in google trends. In
        order to do this activity you’ll first want to review the how to guide for
        google trends (the last resource in this module). \r
        \r
        \r
        - Once you’ve
        read the how to guide, head to <a href = "https://www.google.com/trends/"
        target=_blank> Google Trends <i class="fa fa-external-link-square"/></a>\r
        -
        Play around with different queries that might reveal interesting relationships
        in what people are searching for on Google. For example: \r
         -  s7 note and  samsung
        stock\r
         - early voting and voter registration\r
         - earthquake and  italy\r
        -
        Explore differences over time and by location \r
         - Look at different time
        periods (1 week, 30 days, 90 days, 1 year)\r
         - Look at different locations
        (different countries, states, cities)\r
        \r
        \r
        <hr>\r
        ### <a href= "http://forum.code.org/c/csp2/lesson08"
        target=_blank> Head to the Forum >></a>\r
        <hr>\r
        \r
        ## Share Your Findings\r
        Head
        to the forum and share your findings. Specifically, share: \r
        \r
        \r
        - The
        topics you explored in Google Trends\r
        - Surprising or interesting relationships
        or trends \r
        - Misconceptions that your students may have and what sorts
        of questions you can ask to help them overcome these barriers.\r
        \r
        \r
        ##  Submit
        the Link for your Forum Post\r
        Once you’ve posted in the forum, share a link
        here. In order to get a direct link to your post, click the link icon directly
        under your post (shown in the picture below):\r
        \r
        \r
        ![](https://images.code.org/40fd4bb1aa4f50cfb0d66bbf7881cd0d-image-1443847364702.png)\r
      'Task: Make your own Favicon_markdown_instruction': |
        # Task: Make your own
        Favicon\r
        \r
        ## Do the Activity\r
        \r
        One of the best ways to prepare to
        teach a lesson is by actually doing the activity yourself.  As you complete
        the activity, consider the misconceptions that your students may have and
        what sorts of questions you can ask to help them overcome these barriers.
        In order to do this activity, you'll want to access the color pixelation
        widget (which is a bubble in this module) as well as the favicon project description
        (linked below). \r
        \r
        \r
        - First, you'll want to play around with the
        color pixelation widget and get a sense of how it works.\r
        - Then, work to
        make your own favicon! Follow the instructions which are available in <a href
        = “studio.code.org/s/csp2/stage/4/puzzle/8” target=_blank>unit 2 lesson 4  <i
        class="fa fa-external-link-square"/></a> \r
        \r
        \r
        <hr>\r
        ### <a href=
        "http://forum.code.org/c/csp2/lesson04" target=_blank> Head to the Forum
        >></a>\r
        <hr>\r
        \r
        \r
        ## Share Your Favicon and Ideas\r
        Head to the forum
        and share your ideas about this activity. Specifically, share: \r
        \r
        - A
        screenshot of your Favicon.\r
        - Misconceptions that your students may have
        and what sorts of questions you can ask to help them overcome these barriers.\r
        \r
        \r
        ##  Submit
        the Link for your Forum Post\r
        \r
        Once you’ve posted in the forum, share
        a link here. In order to get a direct link to your post, click the link icon
        directly under your post (shown in the picture below):\r
        \r
        ![](https://images.code.org/40fd4bb1aa4f50cfb0d66bbf7881cd0d-image-1443847364702.png)\r
        \r
        \r
        \r
        \r
        \r
        \r
      'Task: Write your own Heuristic_markdown_instruction': |
        # Task: Write your
        own Heuristic\r
        \r
        ## Do the Activity\r
        \r
        One of the best ways to prepare
        to teach a lesson is by actually doing the activity yourself.  As you complete
        the activity, consider the misconceptions that your students may have and
        what sorts of questions you can ask to help them overcome these barriers.
        In order to do this activity, you'll want to access the text compression
        widget (which is a bubble in this module) as well as the heuristic worksheet
        (linked below). \r
        \r
        - First, you'll want to play around with the text
        compression widget and get a sense of the types of patterns that you can pull
        out. \r
        - Then, work to develop your own heuristic! Feel free to follow <a
        href=”https://docs.google.com/document/d/1U1SPSyBYS9tnJmpnQd-xbWnhb6TpwdJ6i82H662hxdM/edit”
        target=_blank>this activity guide, from lesson 2.</a>\r
        \r
        <hr>\r
        ### <a
        href= "http://forum.code.org/c/csp2/lesson02" target=_blank> Head to the
        Forum >></a>\r
        <hr>\r
        \r
        \r
        ## Share Your Heuristic and Ideas\r
        Head
        to the forum and share your ideas about this activity. Specifically, share:
        \r
        \r
        - The heuristic you developed.\r
        - Misconceptions that your students
        may have and what sorts of questions you can ask to help them overcome these
        barriers.\r
        \r
        ##  Submit the Link for your Forum Post\r
        \r
        Once you’ve
        posted in the forum, share a link here. In order to get a direct link to your
        post, click the link icon directly under your post (shown in the picture below):\r
        \r
        ![](https://images.code.org/40fd4bb1aa4f50cfb0d66bbf7881cd0d-image-1443847364702.png)\r
        \r
        \r
        \r
      'Teaching Practice Plan: Assessing Student Learning_markdown_instruction': '**NOTE:
        before you start this task, make sure you’ve reviewed the resources in this
        module, and have a good sense of the connections to unit 1. If you haven’t
        already reviewed the materials, do that now and come back to this task later.**\r\n\r\n#
        Teaching Practice Plan: Assessing Student Learning\r\n\r\nFor this task, you’re
        going to develop and submit a Teaching Practice Plan, which details your plan
        for assessing student learning throughout unit 1. Your plan should address
        the following: \r\n\r\n- Using what’s in the curriculum\r\n \r\n - How do
        you plan to use the assessment opportunities that have been provided in the
        curriculum? Your response should include how you plan to use formative lessons
        questions (blue bubbles in code studio), project rubrics, AP-style questions
        (following lesson 7 and lesson 14), practice performance task (lesson 14)\r\n\r\n\r\n-
        Making your own assessments\r\n\r\n - What types of assessments might you
        need to create or use on top of those provided in the curriculum? \r\n - What
        is your strategy for developing assessment opportunities that are consistent
        with the philosophy of the curriculum and activities? \r\n\r\nYou can type
        out your teaching practice plan in the box below, or you can upload a word
        doc or pdf file. \r\n\r\n## Getting Credit for Completing this Task\r\n\r\n####
        Task Review Details\r\n\r\nIf this module is listed as  your “focus area”,
        then your response to the prompt above will be shared anonymously and reviewed
        by your peers, and you will review the work done by other teachers. Reviewers
        will be looking for thoughtful and thorough answers that demonstrate that
        you have spent time considering how this practice will fit into your own classroom.
        Reviewers will have an opportunity to give feedback on your submission, and
        you can respond to that feedback and resubmit. \r\n\r\nIn order to get credit
        for completing this task, two reviewers need to agree that you have responded
        to the prompts fully. If reviewers don’t feel comfortable making a decision
        about your task submission, they can elevate to a facilitator to review. You
        will always have a chance to address feedback from your reviewers and resubmit
        your task! Reviewer feedback will show up at the bottom of this page, once
        it’s available. \r\n\r\n"

'
      'Teaching Practice Plan: Balancing Teacher and Tools_markdown_instruction': '**NOTE:
        before you start this task, make sure you’ve reviewed the resources in this
        module, and have a good sense of the connections to unit 1. If you haven’t
        already reviewed the materials, do that now and come back to this task later.**\r\n\r\n\r\n#
        Teaching Practice Plan: Balancing Teacher and Tools\r\n\r\n<img src=\"https://images.code.org/cd0612e68d70f40e2fd058fbf55b4abc-image-1474643895905.19.03
        AM.png\" style=\"float:right; margin-left:30px; width:45%\">\r\n\r\nFor this
        task, you’re going to develop and submit a Teaching Practice Plan, which details
        your general plan for managing technology throughout unit 1, as well as a
        specific plan for one of the technology-dependent lessons highlighted in red
        on the right. Your plan should be broken into two parts, and address the following
        things: \r\n\r\n- General strategies that you’ll apply throughout unit 1\r\n
        - Throughout unit 1, what classroom and technology management techniques will
        you use to help students stay focused on the lesson tasks? \r\n\r\n\r\n- Strategies
        specific to a selected lesson\r\n - Which of the highlighted lessons on the
        right are you discussing? \r\n - What is your plan for managing transitions
        between your instruction and students being in the tool? *Note: your response
        should include specifics about the lesson*\r\n - How do you plan to introduce
        the lesson challenge and the tool that students will use to complete the challenge?
        *Note: your response should include specifics about the lesson*\r\n\r\n\r\nYou
        can type out your teaching practice plan in the box below, or you can upload
        a word doc or pdf file. \r\n\r\n## Getting Credit for Completing this Task\r\n\r\n####
        Task Review Details\r\n\r\nIf this module is listed as  your “focus area”,
        then your response to the prompt above will be shared anonymously and reviewed
        by your peers, and you will review the work done by other teachers. Reviewers
        will be looking for thoughtful and thorough answers that demonstrate that
        you have spent time considering how this practice will fit into your own classroom.
        Reviewers will have an opportunity to give feedback on your submission, and
        you can respond to that feedback and resubmit. \r\n\r\nIn order to get credit
        for completing this task, two reviewers need to agree that you have responded
        to the prompts fully. If reviewers don’t feel comfortable making a decision
        about your task submission, they can elevate to a facilitator to review. You
        will always have a chance to address feedback from your reviewers and resubmit
        your task! Reviewer feedback will show up at the bottom of this page, once
        it’s available. \r\n \r\n"

'
      'Teaching Practice Plan: Discovery Learning_markdown_instruction': |
        > **NOTE:
        before you start this task, make sure you’ve reviewed the resources in this
        module, and have a good sense of the connections to unit 1. If you haven’t
        already reviewed the materials, do that now and come back to this task later.**\r
        \r
        #
        Teaching Practice Plan: Discovery Learning\r
        \r
        For this task, you’re going
        to develop and submit a Teaching Practice Plan, which details your plan for
        building and supporting a culture of discovery learning in your classroom
        throughout unit 1. Your plan should address the following: \r
        \r
        - For lessons
        that call for students to discover a key computer science concept, how do
        you plan to balance your time frontloading content instruction with students’
        time completing the activity and constructing their own knowledge? \r
        - What
        is your strategy for supporting students who struggle with this model of teaching
        and learning, and look to you to ‘just give them the answer’?\r
        - How do
        you plan to make sure students leave a lesson having discovered the underlying
        concept(s)? \r
        \r
        You can type out your teaching practice plan in the box
        below, or you can upload a word doc or pdf file. \r
        \r
        ## Getting Credit
        for Completing this Task\r
        \r
        #### Task Review Details\r
        \r
        If this module
        is listed as  your “focus area”, then your response to the prompt above will
        be shared anonymously and reviewed by your peers, and you will review the
        work done by other teachers. Reviewers will be looking for thoughtful and
        thorough answers that demonstrate that you have spent time considering how
        this practice will fit into your own classroom. Reviewers will have an opportunity
        to give feedback on your submission, and you can respond to that feedback
        and resubmit. \r
        \r
        In order to get credit for completing this task, two
        reviewers need to agree that you have responded to the prompts fully. If reviewers
        don’t feel comfortable making a decision about your task submission, they
        can elevate to a facilitator to review. You will always have a chance to address
        feedback from your reviewers and resubmit your task! Reviewer feedback will
        show up at the bottom of this page, once it’s available. \r
        \r
        \r
        \r
      'Teaching Practice Plan: Group Work and Peer Learning_markdown_instruction': '**NOTE:
        before you start this task, make sure you’ve reviewed the resources in this
        module, and have a good sense of the connections to unit 1. If you haven’t
        already reviewed the materials, do that now and come back to this task later.**\r\n\r\n\r\n#
        Teaching Practice Plan: Group Work and Peer Learning\r\n\r\nFor this task,
        you’re going to develop and submit a Teaching Practice Plan, which details
        your plan for supporting group work throughout unit 1. Your plan should address
        the following things: \r\n\r\n- What is your plan for supporting students
        who are struggling to engage in group work, either because they prefer to
        work alone, or because they are having issues collaborating with their partner(s)?
        \r\n- How do you plan to help make sure all members of the team have a voice
        in their groups’ discussions?\r\n- How can you help students understand and
        appreciate the importance of learning through and from one another? \r\n\r\nYou
        can type out your teaching practice plan in the box below, or you can upload
        a word doc or pdf file. \r\n\r\n## Getting Credit for Completing this Task\r\n\r\n####
        Task Review Details\r\n\r\nIf this module is listed as  your “focus area”,
        then your response to the prompt above will be shared anonymously and reviewed
        by your peers, and you will review the work done by other teachers. Reviewers
        will be looking for thoughtful and thorough answers that demonstrate that
        you have spent time considering how this practice will fit into your own classroom.
        Reviewers will have an opportunity to give feedback on your submission, and
        you can respond to that feedback and resubmit. \r\n\r\nIn order to get credit
        for completing this task, two reviewers need to agree that you have responded
        to the prompts fully. If reviewers don’t feel comfortable making a decision
        about your task submission, they can elevate to a facilitator to review. You
        will always have a chance to address feedback from your reviewers and resubmit
        your task! Reviewer feedback will show up at the bottom of this page, once
        it’s available. \r\n\r\n\r\n\r\n\r\n"

'
      'Teaching Practice Plan: Group Work and Peer Learning`_markdown_instruction': '**NOTE:
        before you start this task, make sure you’ve reviewed the resources in this
        module, and have a good sense of the connections to unit 1. If you haven’t
        already reviewed the materials, do that now and come back to this task later.**\r\n\r\n\r\n#
        Teaching Practice Plan: Group Work and Peer Learning`\r\n\r\nFor this task,
        you’re going to develop and submit a Teaching Practice Plan, which details
        your plan for supporting group work throughout unit 1. Your plan should address
        the following things: \r\n\r\n- What is your plan for supporting students
        who are struggling to engage in group work, either because they prefer to
        work alone, or because they are having issues collaborating with their partner(s)?
        \r\n- How do you plan to help make sure all members of the team have a voice
        in their groups’ discussions?\r\n- How can you help students understand and
        appreciate the importance of learning through and from one another? \r\n\r\nYou
        can type out your teaching practice plan in the box below, or you can upload
        a word doc or pdf file. \r\n\r\n## Getting Credit for Completing this Task\r\n\r\n####
        Task Review Details\r\n\r\nIf this module is listed as  your “focus area”,
        then your response to the prompt above will be shared anonymously and reviewed
        by your peers, and you will review the work done by other teachers. Reviewers
        will be looking for thoughtful and thorough answers that demonstrate that
        you have spent time considering how this practice will fit into your own classroom.
        Reviewers will have an opportunity to give feedback on your submission, and
        you can respond to that feedback and resubmit. \r\n\r\nIn order to get credit
        for completing this task, two reviewers need to agree that you have responded
        to the prompts fully. If reviewers don’t feel comfortable making a decision
        about your task submission, they can elevate to a facilitator to review. You
        will always have a chance to address feedback from your reviewers and resubmit
        your task! Reviewer feedback will show up at the bottom of this page, once
        it’s available. \r\n\r\n\r\n\r\n\r\n"

'
      Teaching and Student Support Plan_markdown_instruction: "> **NOTE: before you\nstart
        this task, make sure you’ve reviewed the lesson resources in this module,\nand
        have a good sense of how the lesson works. If you haven’t already reviewed\nthe
        materials, do that now and come back to this task later.**\\r\n\\r\n# Teaching\nand
        Student Support plan\\r\n## Task Description\\r\n\\r\nNow that you have a\nbetter
        sense of this lesson, let’s think about the types of supports students\nwill
        need in order to successfully complete it. Since the curriculum is based\non
        inquiry learning, lessons feature activities that engage students in discovering\ncore
        concepts themselves. It’s important to think through implementation plans\nand
        student support. In this task you will make a plan for teaching and student\nsupport
        that takes into account differentiation strategies and make-up work\nfor absent
        students. Your teaching and student support plan should cover the\nfollowing:
        \\r\n\\r\n- **Details on how you will implement and differentiate\nthe lesson:**\\r\n\\r\n
        - An outline of any changes you will need to make to\nthe lesson to fit your
        local constraints or context (for example: pacing and\ntime, dealing with
        classroom setup, etc). \\r\n - An overview of the types\nof student needs
        you’ll likely need to support in your classroom (for example:\nstudents who
        are struggling to understand the underlying concept; students\nwho are already
        familiar with the concept, but still have room to learn more;\netc)\\r\n -
        Your plan for addressing each of the needs outlined above (for\nexample: integrating
        extension activities or other materials for students\nwho already know something
        about the topic)\\r\n<br><Br>\\r\n\\r\n- **Plan for\ncatching up absent students:**\\r\n\\r\n
        - How will absent students catch up\non activities they missed? \\r\n\\r\nYou
        can type out your teaching and student\nsupport plan in the box below, or
        you can upload a word doc or pdf file. \\r\n\\r\n##\nGetting Credit for Completing
        this Task\\r\n\\r\n#### Task Review Details\\r\n\\r\nIf\nthis module is listed
        as  your “focus area”, then your response to the prompt\nabove will be shared
        anonymously and reviewed by your peers, and you will\nreview the work done
        by other teachers. Reviewers will be looking for thoughtful\nand thorough
        answers that demonstrate that you have spent time considering\nhow the lesson
        will play out in your own classroom. Reviewers will have an\nopportunity to
        give feedback on your submission, and you can respond to that\nfeedback and
        resubmit. \\r\n\\r\nIn order to get credit for completing this\ntask, two
        reviewers need to agree that you have responded to the prompts fully.\nIf
        reviewers don’t feel comfortable making a decision about your task submission,\nthey
        can elevate to a facilitator to review. You will always have a chance\nto
        address feedback from your reviewers and resubmit your task! Reviewer feedback\nwill
        show up at the bottom of this page, once it’s available. "
      Test Contained Free Response_markdown_instruction: |-
        My free response markdown
        instructions
      Test Free Response Assessment Question_markdown_instruction: |
        Imagine that
        you have to send a list of 10 numbers to friend in binary using the bit-sending
        widget. The numbers are all between 0 and 100. Describe the issues or problems
        that you and your friend would encounter in trying to do this. How would you
        address these problem?

        ### Hello!
      Test Markdown level_markdown_instruction: |+
        Enter prompt here

        # Test Markdown
        title

        Test Markdown prompt


      Test embedded K1 Blockly in instructions_markdown_instruction: |-
        Use <xml><block
        type="maze_moveWest"/></xml> **three** times to get the harvester to the
        corn! Don't forget to use <xml><block type="harvester_corn"/></xml> to
        pick the corn!
      Test of comment block_markdown_instruction: |-
        ## instructions\r
        \r
        Drag out
        the subgoal label block you want.
      Testing Quantum Farmer_markdown_instruction: "Wow, look at that! \\r\n\\r\nI\ndon't
        know how many shovelfuls of dirt this hole needs.  \\r\nCan you write\na program
        that keeps using the `fill` block until the ground is even?  "
      Text Compression 1_markdown_instruction: |-
        Look for patterns (repeated words
        or phrases) in the text. Enter the patterns you see into the dictionary on
        the right. As you type entries into the dictionary, the symbol for the entry
        is inserted into the text in place of the pattern.\r
        \r
        <img src="http://code.org/api/hour/begin_text_compression.png">
      The Accelerometer_markdown_instruction: |-
        Today you’re going to learn how to
        use and create **functions**.\r
        \r
        Creating a function lets you make your
        own blocks! There are two parts to a function: \r
        \r
        Making a newly named
        block that has all of the code you want to run inside of it. \r
        -xml of function
        definition- \r
        \r
        The single green block itself that you use, or call, to
        run the function you created.\r
        -xml of function call-\r
        \r
        Prepare to
        get familiar with functions, learn how to edit them, and create your own!
      The Accelerometer_2018_markdown_instruction: |-
        Today you’re going to learn how
        to use and create **functions**.\r
        \r
        Creating a function lets you make
        your own blocks! There are two parts to a function: \r
        \r
        Making a newly
        named block that has all of the code you want to run inside of it. \r
        -xml
        of function definition- \r
        \r
        The single green block itself that you use,
        or call, to run the function you created.\r
        -xml of function call-\r
        \r
        Prepare
        to get familiar with functions, learn how to edit them, and create your own!
      'The Internet: IP Addresses & DNS_markdown_instruction': |-
        [Video guide and
        questions](https://docs.google.com/document/d/1ngw37cKFH4Dl_lhWXuXROH5WDdgHatz3gJo3pAdpqkg/edit?usp=sharing)
      'The Internet: IP Addresses & DNS_2018_markdown_instruction': |-
        [Video guide
        and questions](https://docs.google.com/document/d/1ngw37cKFH4Dl_lhWXuXROH5WDdgHatz3gJo3pAdpqkg/edit?usp=sharing)
      'The Internet: Wires, Cables, and Wifi_markdown_instruction': |-
        [Video guide
        and questions](https://docs.google.com/document/d/1k-qKthfOewieVcWgsAP8v2hW-dh3CbK-f7oXlHpF6Cs/edit)
      'The Internet: Wires, Cables, and Wifi_2018_markdown_instruction': |-
        [Video
        guide and questions](https://docs.google.com/document/d/1k-qKthfOewieVcWgsAP8v2hW-dh3CbK-f7oXlHpF6Cs/edit)
      The Official Peer Instruction Blog_markdown_instruction: "The following link\nis
        to a recent blog post describing the basic approach to and benefits of\npeer
        learning: "
      The Vigenere Cipher Widget_markdown_instruction: |-
        # Encrypt and decrypt a message
        with the Vigenère cipher\r
        \r
        This is an interactive version of the Vigenère
        cipher that animates the encryption and decryption as it’s happening, given
        a piece of text to encrypt or decrypt and the key.\r
        \r
        # Do this\r
        ###
        Encrypt a message\r
        Click Step several times, and trace what’s happening.
        Pay attention to:\r
        \r
        - How the ciphertext is being produced\r
        - What
        happens when you get to the last character of the key\r
        - After you’ve stepped
        through a few characters click Play to watch the rest animate\r
        - Hit Restart
        and play the animation again. You can use the speed slider to speed it up
        or slow it down  \r
        \r
        ![](https://images.code.org/06858f88ac12997bba73f4f76638a068-image-1443574425185.gif)\r
        \r
        ###
        Decrypt a message\r
        Encrypt a message as above, then:  \r
        \r
        - Highlight
        and copy the ciphertext\r
        - Paste it into the plaintext area. Note: Don’t
        change the key\r
        - Change the Encrypt/Decrypt toggle to Decrypt\r
        - Hit
        Step a few times, and then Play\r
        \r
        You should see the original text emerge.  \r
        ![](https://images.code.org/dc89d6c19c17adb23b6b5ff9a62c4583-image-1443574425182.gif)\r
        \r
        \r
        How
        hard would it be to crack a message encrypted with this cipher? Does the length
        of the key make a difference?
      The Vigenere Cipher_markdown_instruction: |-
        # Encrypt and decrypt a message
        with the Vigenère cipher\r
        \r
        This is an interactive version of the Vigenère
        cipher that animates the encryption and decryption as it’s happening, given
        a piece of text to encrypt or decrypt and the key.\r
        \r
        # Do this\r
        ###
        Encrypt a message\r
        Click Step several times, and trace what’s happening.
        Pay attention to:\r
        \r
        - How the ciphertext is being produced\r
        - What
        happens when you get to the last character of the key\r
        - After you’ve stepped
        through a few characters click Play to watch the rest animate\r
        - Hit Restart
        and play the animation again. You can use the speed slider to speed it up
        or slow it down  \r
        \r
        ![](https://images.code.org/06858f88ac12997bba73f4f76638a068-image-1443574425185.gif)\r
        \r
        ###
        Decrypt a message\r
        Encrypt a message as above, then:  \r
        \r
        - Highlight
        and copy the ciphertext\r
        - Paste it into the plaintext area. Note: Don’t
        change the key\r
        - Change the Encrypt/Decrypt toggle to Decrypt\r
        - Hit
        Step a few times, and then Play\r
        \r
        You should see the original text emerge.  \r
        ![](https://images.code.org/dc89d6c19c17adb23b6b5ff9a62c4583-image-1443574425182.gif)\r
        \r
        \r
        How
        hard would it be to crack a message encrypted with this cipher? Does the length
        of the key make a difference?
      Top-Down Design_markdown_instruction: "## What is Top-Down Design? \\r\n\\r\nIn\nlesson
        6 students are introduced to the concept of `Top-Down Design` which\nis a
        planning process we use here to help students break their ideas down\ninto
        parts. It might sound like a complex idea, but really the focus is just\non
        starting at a high level and stating the elements you want to put into\nyour
        program, then grouping concepts that are similar and using abstraction\n(functions)
        to put a label on those like parts. For example, you might say\nthat you want
        to create a turtle drawing that has dogs, cats, and bikes. Then\nyou would
        need to go one step further and describe how each of those components\nof
        your drawing are composed.\\r\n\\r\nCheck out the resource below for a non-programming\nexample
        of how this grouping might work. "
      Total Artist Clone Me_markdown_instruction: |
        Freeplay: Here are the functions
        you've written, and some more for you to play with. Play with the pen width
        to see how different your drawings look!\r
        \r
      Trent Test Level_markdown_instruction: 'More questions!

'
      'Tuesday Report: Balancing Teachers and Tools in Unit 1_markdown_instruction': |-
        So
        far we've seen four lessons from unit 1 — two model lessons delivered by
        facilitators and two lessons by participants. With your partner, consider:\r
        \r
        -
        How have people wearing teacher hats been balancing their time leading or
        guiding with the student-hat’s time to get into activities and tools?\r
        -
        What strategies have been effective for managing the transition to tools?
        What strategies are effective in getting peoples’ attention once they’re lost
        in a tool?\r
        - What are your  current thoughts about the appropriate balance
        of teacher-guided time VS time in the tools or with the activities?\r
        \r
        Use
        the space below to record any thoughts, recommendations, or commentary.
      'Tuesday Report: Discovery Learning in Unit 1_markdown_instruction': |-
        So far
        we've seen four lessons from unit 1 — two model lessons delivered by facilitators
        and two lessons by participants. With your partner, consider:\r
        \r
        - What
        opportunities have you seen for learners to discover concepts for themselves?\r
        -
        How did the process of engaging in discovery activities change the pacing,
        flow, or outcome of the lesson?\r
        - What benefits and pitfalls did you see
        in discovery activities?\r
        \r
        Use the space below to record any thoughts,
        recommendations, or commentary.
      'Tuesday Report: Group Work and Peer Learning in Unit 1_markdown_instruction': |-
        So
        far we've seen four lessons from unit 1 — two model lessons delivered by
        facilitators and two lessons by participants. With your partner, consider:\r
        \r
        -
        Where did you see group work and peer learning in these lessons? \r
        - What
        are the benefits of using group work and peer learning here? \r
        - How does
        using peer learning and group work as a strategy in the lesson impact how
        the activities run? \r
        \r
        Use the space below to record any thoughts, recommendations,
        or commentary.
      'Tuesday Report: Measuring Student Learning in Unit 1_markdown_instruction': |-
        So
        far we've seen four lessons from unit 1 — two model lessons delivered by
        facilitators and two lessons by participants. With your partner, consider:\r
        \r
        -
        What opportunities have you seen for assessing learners’ knowledge (prior
        knowledge, knowledge gained during the lesson, etc)?\r
        - What assessments
        are available in the curriculum?\r
        - What strategies would be effective for
        checking in on what students know?\r
        \r
        Use the space below to record any
        thoughts, recommendations, or commentary.
      'Tuesday Report: discovery learning_markdown_instruction': |-
        So far we've seen
        four lessons from unit 1 -- two model lessons delivered by facilitators and
        two lessons by participants. With your partner, consider:\r
        \r
        - What opportunities
        have you seen for learners to discover concepts for themselves? \r
        - How
        did the process of engaging in discovery activities change the pacing, flow,
        or outcome of the lesson? \r
        - What benefits and pitfalls did you see in
        discovery activities? \r
        \r
        Use the space below to record any thoughts,
        recommendations, or commentary
      U1L1 - FR computer science word association_markdown_instruction: |+
        **Directions:**

        You're
        in a class called *Computer Science Principles*.

        You might not know anything
        about computer science right now.  You might know a few things.  We're going
        to take the pulse of the class to see on the first day what we think computer
        science involves, and we'll revisit this occasionally.

        **Do this:**

        **Without
        using the words _computer_ or *science* write 5 to 10 words or phrases** that
        come to mind when you hear the term "computer science". What do you think
        about?



      U1L10 Assessment Free Response_markdown_instruction: |
        Many languages do not
        use the characters of U.S. English. Suppose you wanted to be able to encode
        the characters of every language on earth within a single protocol. Guess
        how many characters would need to be encoded and calculate the number of bits
        that would be required per character. Then discuss the benefits and drawbacks
        of using this single unified system.
      U1L10 Assessment Free Response_2018_markdown_instruction: |
        Many languages do
        not use the characters of U.S. English. Suppose you wanted to be able to encode
        the characters of every language on earth within a single protocol. Guess
        how many characters would need to be encoded and calculate the number of bits
        that would be required per character. Then discuss the benefits and drawbacks
        of using this single unified system.
      U1L10 Journal Free Response_markdown_instruction: |
        Respond to this prompt or
        to another as directed by your teacher.

        Describe the steps involved in
        getting a text message from an idea in your head to your friend's computer
        screen.
      U1L10 NetSim numbers with decimal_markdown_instruction: |-
        **Instructions**:\r
        \r
        Invent
        and test a protocol for encoding and sending text messages. Your protocol
        must include the letters a-z, spaces, and common punctuation marks. You may
        add additional characters if you wish. See the worksheet handed out by your
        teacher for more detailed instructions!
      U1L11 Collaboration Reflection_markdown_instruction: |
        What problems arose in
        your efforts to create a working protocol? How did you think about the problem(s)
        in order to solve it?

        Describe one instance in which collaboration with
        a partner influenced the final protocol your team produced.
      U1L11 Collaboration Reflection_2018_markdown_instruction: |
        What problems arose
        in your efforts to create a working protocol? How did you think about the
        problem(s) in order to solve it?

        Describe one instance in which collaboration
        with a partner influenced the final protocol your team produced.
      U1L11 NetSim numbers with Ascii_markdown_instruction: |
        ## Sending Formatted
        Text Activity\r
        \r
        **Directions:**  \r
        Work with a partner or in a small
        team to develop a protocol that allows you to send formatted text. \r
        \r
        **Guidelines:**  \r
        -
        Both the text and the formatting instructions must be derived from the printable
        ASCII character set (i.e. codes 32-126).\r
        - Your protocol must encode at
        least:\r
        \t- bold, italics, and underlining\r
        \t- three different font sizes
        (large, medium, and small)\r
        \t- three different font colors (red, black,
        blue)\r
        - You will demonstrate that your protocol works by having the recipient
        be able to faithfully draw (or produce in some fashion) the formatted text
        based only on the data she received through an ASCII-text version of the Internet
        Simulator. A sample message can be found below.\r
        \r
        ![](https://images.code.org/6fa1d53e4d36a9d0bac5b9b8fb4bc81d-image-1434427211242.PNG)\r
        \r
        **Develop
        Your Protocol:**  \r
        Use the worksheet handed out by your teacher to brainstorm
        ideas for your protocol. Iteratively improve your protocol by testing it out
        with simple sample messages.\r
      U1L11 Reflection Free Response_markdown_instruction: "Respond to this prompt\nor
        to another as directed by your teacher.\n\nHow long did it take to send\na
        formatted text message using your protocol? \n\nHow many extra bits did\nyour
        encoding scheme need to communicate the text?  Calculate the percentage\nof
        bits that were used for formatting instead of sending the actual text message.\n\n\npercent
        = (formatting bits)/(total bits) * 100\n\n\n"
      U1L11 Reflection Free Response_2018_markdown_instruction: "Respond to this\nprompt
        or to another as directed by your teacher.\n\nHow long did it take\nto send
        a formatted text message using your protocol? \n\nHow many extra bits\ndid
        your encoding scheme need to communicate the text?  Calculate the percentage\nof
        bits that were used for formatting instead of sending the actual text message.\n\n\npercent
        = (formatting bits)/(total bits) * 100\n\n\n"
      U1L12 Reflection Free Response_markdown_instruction: "Respond to this prompt\nor
        to another as directed by your teacher.\n\nThe salesperson in a cell phone\nstore
        is telling me that the phone I'm considering has 8GB of memory, which\nmeans
        I can save 10,000 photos taken with the phone's camera! \n\nIs the\nsalesperson
        telling me the truth? Why or why not?\n"
      U1L13 Assess Text Compression amount_markdown_instruction: "Here's the same\ncompressed
        text that you saw on the last level, but now we also see the size\nof the
        original, uncompressed text. On the previous level you reconstructed\nthe
        text by tracing back through the dictionary. Now we're going to think\nabout
        if this is a \"good\" compression rate.\n\n![](https://images.code.org/ffb941527193cd04c02ff2ce392d02e6-image-1439479301236.20.23\nAM.png)\n\nIn
        the text box below, answer the following two questions:\n\n-\nWhat is the
        compression rate, or the compressed text size + dictionary size\ncompared
        to the original text size? (as a percentage) \n- Is this a \"good\"\ncompression
        rate? Why or why not? \n\n\n"
      U1L13 Assessment 1_markdown_instruction: |
        Why do you want to compress anything?
        What's the point?\r
      U1L13 Assessment 2_markdown_instruction: |
        Why is compression a "hard problem"
        for computers?  Draw on your own experience compressing text with the text
        compression widget. Is there a way to know when you've compressed it the
        most? Explain why you can or can't know.\r
      U1L13 Reflection 1_markdown_instruction: |-
        What made compressing text hard to
        do?
      U1L13 Reflection 2_markdown_instruction: |-
        Describe the thinking process you
        used in solving this challenge.
      U1L13 Reflection Free Response_markdown_instruction: "If you send a compressed\nsegment
        of text would your friend will be able to read it?  \n\nWhy is the\ndictionary
        important?\n"
      U1L13 Text Compression_markdown_instruction: |-
        Look for patterns (repeated words
        or phrases) in the text. Enter the patterns you see into the dictionary on
        the right. As you type entries into the dictionary, the symbol for the entry
        is inserted into the text in place of the pattern.
      U1L14 - Assessment 2_markdown_instruction: |
        What would happen if we didn't
        include width and height bits in our protocol?\r
        \r
        Assume your friend just
        sent you 32 bits of pixel data (just the 0s and 1s for black and white pixels).
        Could you recover the original image? If so, how? If not, why not?\r
        \r
        \r
      U1L14 Assessment 1_markdown_instruction: |
        Please answer the following 3 questions
        in the space below.\r
        \r
        1. What are the **dimensions** (width and height)
        of the **largest image** we can make with the pixelation widget? \r
        \r
        2.
        How many **total bits** would there be in the the largest possible image we
        could make with the pixelation widget (assuming 1 bit per pixel)?\r
        \r
        3.
        How many **total bits** bits would it take to represent **the smallest possible
        image** (i.e. an image with one pixel)?\r
      U1L16 Reflection Free Response_markdown_instruction: |+
        Respond to this prompt
        or to another as directed by your teacher.

        If you had the opportunity to
        repeat this lesson, what would you do differently?

        Describe something you
        learned in this unit that will impact your future work in this class.


      U1L2 Free response assessment question_markdown_instruction: |
        Provide an example
        of a question that could NOT be answered with a single binary message. Explain
        why this is the case, making reference to the definition of a binary message.
        \r
        \r
      U1L2 Free response assessment question_2018_markdown_instruction: |
        Provide
        an example of a question that could NOT be answered with a single binary message.
        Explain why this is the case, making reference to the definition of a binary
        message. \r
        \r
      U1L2 Free response reflection question_markdown_instruction: |2+
         Modify your
        question so that it could be answered with a binary message. Explain why it
        can now be answered with a binary message.


      U1L3 Free Response_markdown_instruction: |-
        How did collaboration impact the
        development of your protocol? What challenges did working in a group present
        and in what ways did it positively impact your final product?
      U1L3 Free Response_2018_markdown_instruction: |-
        How did collaboration impact
        the development of your protocol? What challenges did working in a group present
        and in what ways did it positively impact your final product?
      U1L3 Free response reflection question_markdown_instruction: |
        Recall when you
        built your binary message sending device. Why did we decide to send a message
        as a sequence of states (A and B) rather than modifying our devices to represent
        more states (State C, State D, State E, ...)?\r
      U1L3 Free response reflection question_2018_markdown_instruction: |
        Recall when
        you built your binary message sending device. Why did we decide to send a
        message as a sequence of states (A and B) rather than modifying our devices
        to represent more states (State C, State D, State E, ...)?\r
      U1L4 Free Response Reflection_markdown_instruction: |+
        A binary message was recorded
        as a wave as shown in the image below. Can you decode the message? Explain
        what information you would need in order to successfully decode the message
        into A’s and B’s.

        ![](https://images.code.org/c8ba0db14fabb778dc034ac4656259fa-image-1434429617999.png)

      U1L4 Free Response Reflection_2018_markdown_instruction: |+
        A binary message
        was recorded as a wave as shown in the image below. Can you decode the message?
        Explain what information you would need in order to successfully decode the
        message into A’s and B’s.

        ![](https://images.code.org/c8ba0db14fabb778dc034ac4656259fa-image-1434429617999.png)

      U1L4 Free response reflection question_markdown_instruction: |
        Complete the
        Lesson 2 Rubric.

        A binary message consisting of four bits was sent to you
        by a friend. The message was supposed to be ABAB. Unfortunately, your friend
        sent the message at 1/2 the bit rate you agreed upon. What message did you
        receive instead?
      U1L4 NetSim SendAB_markdown_instruction: |-
        ## Coordination and Binary Messages
        Activity\r
        \r
        **Develop your Protocol**\r
        Develop a protocol that allows
        you to use Internet Simulator to relay a message, i.e. one member sends a
        message and the other member sends the same message back. You or a teacher
        will say “Go” to begin the exchange but otherwise all communication must be
        through the widget. As you’re working, consider:\r
        \r
        - How will you know
        when the exchange is supposed to begin?\r
        - How will you know whose turn
        it is to send or receive the message?\r
        - How will you coordinate your actions?\r
        \r
        Document
        your protocol on the worksheet provided, and test your protocol using the
        Internet Simulator
      U1L5 Free Response Assessment_markdown_instruction: "Complete the rubric for\nLesson
        5. Then respond to this prompt using approximately 100 words.\n\nReflect\non
        the progress of communication innovations. \n\nWhat do you notice across\nthe
        variety of systems? \n\nSpeculate on the next phase of communication innovations.\n"
      U1L5 Free Response Lesson Review_markdown_instruction: "Complete these three\nsentences.\n\nThree
        big ideas from the lesson today are _____ and _____ and\n_____ . \nBut the
        most important or interesting thing I learned today is _____.\n\n\nAt the
        beginning of the class, I thought _______ but now i know _______.\n"
      U1L5 How the Internet Works - Video_markdown_instruction: |-
        [Video guide and
        questions](https://docs.google.com/document/d/1YviZiL1VjpUa9Gbe3j_4lETKyoZqEW14_RG7EEWEwgU/edit)
      U1L6 Free Response Assessment_markdown_instruction: |+
        If you had to represent
        numbers with A/B states from sending-bits widget, could you?

        Write a represent
        of the numbers 0 through 15 using only the letters A and B.


      U1L6 Free Response Reflection_markdown_instruction: " In 50 words or less,\ndescribe
        the concept of a number system. \n\nWhy are rules required for a\nnumber system
        to be useful?\n"
      U1L6 Free Response Reflection_2018_markdown_instruction: " In 50 words or less,\ndescribe
        the concept of a number system. \n\nWhy are rules required for a\nnumber system
        to be useful?\n"
      U1L7 Free Response Assessment_markdown_instruction: |
        In 100 words or less describe
        how place value is used in the binary number system. How is it similar or
        different from the way place value is used in the base 10 number system.
      U1L7 Free Response Assessment_2018_markdown_instruction: |
        In 100 words or less
        describe how place value is used in the binary number system. How is it similar
        or different from the way place value is used in the base 10 number system.
      U1L7 Free Response Reflection_markdown_instruction: "Reflect on your learning\nin
        this lesson. In the space below, enter:\n\n3 recollections (things you\nremember),
        \n\n2 observations (things you noticed), and \n\n1 insight (something\nyou
        fully understand the significance of).\n"
      U1L7 Free Response Reflection_2018_markdown_instruction: "Reflect on your learning\nin
        this lesson. In the space below, enter:\n\n3 recollections (things you\nremember),
        \n\n2 observations (things you noticed), and \n\n1 insight (something\nyou
        fully understand the significance of).\n"
      U1L8 Free Response Getting Started_markdown_instruction: |
        Respond to the following
        question.

        List two or three challenges you faced when trying to send multi-bit
        messages using the bit-sending widget during previous classes?
      U1L8 Free Response Reflection_markdown_instruction: |
        <strong>Complete the Sending
        Numbers Rubric (on the second page of the <a href= "https://docs.google.com/document/d/1cSlWYnxOciDQut0OAUcsddmM56bveHely71LUb_CHkM/edit"
        target="_blank">Sending Number activity guide</a>) and then respond to the
        following prompt.</strong>

        What problems arose in your efforts to create
        a working protocol? How did you think about the problem(s) in order to solve
        it?
      U1L8 Free Response Reflection_2018_markdown_instruction: |
        <strong>Complete
        the Sending Numbers Rubric (on the second page of the <a href= "https://docs.google.com/document/d/1cSlWYnxOciDQut0OAUcsddmM56bveHely71LUb_CHkM/edit"
        target="_blank">Sending Number activity guide</a>) and then respond to the
        following prompt.</strong>

        What problems arose in your efforts to create
        a working protocol? How did you think about the problem(s) in order to solve
        it?
      U1L8 Free Response2_markdown_instruction: |-
        How did collaboration play a role
        in the creation of your protocol?
      U1L8 NetSim numbers with decimal_markdown_instruction: |-
        ## Sending Numbers
        Activity\r
        \r
        **Challenge:** Develop a protocol or set of rules for communicating
        a drawing to your partners using only bits.\r
        \r
        **Challenge Rules:**\r
        The
        image will be a line drawing created by connecting points on a grid, like
        the one seen here.\r
        You can discuss and agree on a protocol ahead of time,
        but the image exchange must happen without communication between the two parties
        other than through using the Internet Simulator.\r
        \r
        **Things to Consider:**\r
        -
        How will your points be formatted?\r
        - How does the recipient know when one
        number ends and the next begins?\r
        \r
        **Your Protocol:** Write the steps
        of your protocol on the worksheet provided by your teacher.\r
        \r
        ![](https://images.code.org/d79263f7a6e129962f830ce0af2ed3cc-image-1434414362601.PNG)
      U1L9 Free Response Assessment_markdown_instruction: |
        Choose one of the topics
        you most enjoyed learning about today. Describe what new information you learned
        and how it relates to the way we create and use number systems.
      'U2 L 1 - 2: Teaching and Student Support Plan_markdown_instruction': |-
        <br><br>\r
        >
        **NOTE: before you start this task, make sure you’ve reviewed the lesson resources
        in this module, and have a good sense of how the lesson works. If you haven’t
        already reviewed the materials, do that now and come back to this task later.**\r
        \r
        #
        Lessons 1 - 2: Teaching and Student Support Plan\r
        \r
        ## Task Description\r
        \r
        Now
        that you have a better sense of this lessons in this sequence, let’s think
        about the types of supports students will need in order to be successful.
        Since the curriculum is based on inquiry learning, lessons feature activities
        that engage students in discovering core concepts themselves. It’s important
        to think through implementation plans and student support. In this task you
        will make a plan for teaching and student support **for one of the lessons
        in this sequence** that takes into account differentiation strategies and
        make-up work for absent students. Your teaching and student support plan should
        cover the following: \r
        \r
        \r
        - **Which lesson in the sequence are you
        discussing?** \r
        \r
        - **Details on how you will implement and differentiate
        the lesson:**\r
        \r
         - An outline of any changes you will need to make to
        the lesson to fit your local constraints or context (for example: pacing and
        time, dealing with classroom setup, etc). \r
         - An overview of the types
        of student needs you’ll likely need to support in your classroom (for example:
        students who are struggling to understand the underlying concept; students
        who are already familiar with the concept, but still have room to learn more;
        etc)\r
         - Your plan for addressing each of the needs outlined above (for
        example: integrating extension activities or other materials for students
        who already know something about the topic)\r
         - How will you address or
        emphasize the connection between lessons in this sequence? \r
        \r
        - **Plan
        for catching up absent students:**\r
        \r
         - How will absent students catch
        up on activities they missed? \r
         - How will you use the fact that the lessons
        in this sequence are related and build on one another to address make-up work?
        \r
        \r
        You can type out your teaching and student support plan in the box
        below, or you can upload a word doc or pdf file. \r
        \r
        ## Getting Credit
        for Completing this Task\r
        \r
        #### Task Review Details\r
        \r
        If this module
        is listed as  your “focus area”, then your response to the prompt above will
        be shared anonymously and reviewed by your peers, and you will review the
        work done by other teachers. Reviewers will be looking for thoughtful and
        thorough answers that demonstrate that you have spent time considering how
        the lesson will play out in your own classroom. Reviewers will have an opportunity
        to give feedback on your submission, and you can respond to that feedback
        and resubmit. \r
        \r
        In order to get credit for completing this task, two
        reviewers need to agree that you have responded to the prompts fully. If reviewers
        don’t feel comfortable making a decision about your task submission, they
        can elevate to a facilitator to review. You will always have a chance to address
        feedback from your reviewers and resubmit your task! Reviewer feedback will
        show up at the bottom of this page, once it’s available. \r
        \r
        <br><br>
      'U2 L1 - 2: Teaching and Student Support Plan_markdown_instruction': |-
        <br><br>\r
        >
        **NOTE: before you start this task, make sure you’ve reviewed the lesson resources
        in this module, and have a good sense of how the lesson works. If you haven’t
        already reviewed the materials, do that now and come back to this task later.**\r
        \r
        #
        Lessons 1 - 2: Teaching and Student Support Plan\r
        \r
        ## Task Description\r
        \r
        Now
        that you have a better sense of this lessons in this sequence, let’s think
        about the types of supports students will need in order to be successful.
        Since the curriculum is based on inquiry learning, lessons feature activities
        that engage students in discovering core concepts themselves. It’s important
        to think through implementation plans and student support. In this task you
        will make a plan for teaching and student support **for one of the lessons
        in this sequence** that takes into account differentiation strategies and
        make-up work for absent students. Your teaching and student support plan should
        cover the following: \r
        \r
        \r
        - **Which lesson in the sequence are you
        discussing?** \r
        \r
        - **Details on how you will implement and differentiate
        the lesson:**\r
        \r
         - An outline of any changes you will need to make to
        the lesson to fit your local constraints or context (for example: pacing and
        time, dealing with classroom setup, etc). \r
         - An overview of the types
        of student needs you’ll likely need to support in your classroom (for example:
        students who are struggling to understand the underlying concept; students
        who are already familiar with the concept, but still have room to learn more;
        etc)\r
         - Your plan for addressing each of the needs outlined above (for
        example: integrating extension activities or other materials for students
        who already know something about the topic)\r
         - How will you address or
        emphasize the connection between lessons in this sequence? \r
        \r
        - **Plan
        for catching up absent students:**\r
        \r
         - How will absent students catch
        up on activities they missed? \r
         - How will you use the fact that the lessons
        in this sequence are related and build on one another to address make-up work?
        \r
        \r
        You can type out your teaching and student support plan in the box
        below, or you can upload a word doc or pdf file. \r
        \r
        ## Getting Credit
        for Completing this Task\r
        \r
        #### Task Review Details\r
        \r
        If this module
        is listed as  your “focus area”, then your response to the prompt above will
        be shared anonymously and reviewed by your peers, and you will review the
        work done by other teachers. Reviewers will be looking for thoughtful and
        thorough answers that demonstrate that you have spent time considering how
        the lesson will play out in your own classroom. Reviewers will have an opportunity
        to give feedback on your submission, and you can respond to that feedback
        and resubmit. \r
        \r
        In order to get credit for completing this task, two
        reviewers need to agree that you have responded to the prompts fully. If reviewers
        don’t feel comfortable making a decision about your task submission, they
        can elevate to a facilitator to review. You will always have a chance to address
        feedback from your reviewers and resubmit your task! Reviewer feedback will
        show up at the bottom of this page, once it’s available. \r
        \r
        <br><br>
      'U2 L11 - 15: Teaching and Student Support Plan_markdown_instruction': |-
        <br><br>\r
        >
        **NOTE: before you start this task, make sure you’ve reviewed the lesson resources
        in this module, and have a good sense of how the lesson works. If you haven’t
        already reviewed the materials, do that now and come back to this task later.**\r
        \r
        #
        Lessons 11 - 15: Teaching and Student Support Plan\r
        \r
        ## Task Description\r
        \r
        Now
        that you have a better sense of this lessons in this sequence, let’s think
        about the types of supports students will need in order to be successful.
        Since the curriculum is based on inquiry learning, lessons feature activities
        that engage students in discovering core concepts themselves. It’s important
        to think through implementation plans and student support. In this task you
        will make a plan for teaching and student support **for one of the lessons
        in this sequence** that takes into account differentiation strategies and
        make-up work for absent students. Your teaching and student support plan should
        cover the following: \r
        \r
        \r
        - **Which lesson in the sequence are you
        discussing?** \r
        \r
        - **Details on how you will implement and differentiate
        the lesson:**\r
        \r
         - An outline of any changes you will need to make to
        the lesson to fit your local constraints or context (for example: pacing and
        time, dealing with classroom setup, etc). \r
         - An overview of the types
        of student needs you’ll likely need to support in your classroom (for example:
        students who are struggling to understand the underlying concept; students
        who are already familiar with the concept, but still have room to learn more;
        etc)\r
         - Your plan for addressing each of the needs outlined above (for
        example: integrating extension activities or other materials for students
        who already know something about the topic)\r
         - How will you address or
        emphasize the connection between lessons in this sequence? \r
        \r
        - **Plan
        for catching up absent students:**\r
        \r
         - How will absent students catch
        up on activities they missed? \r
         - How will you use the fact that the lessons
        in this sequence are related and build on one another to address make-up work?
        \r
        \r
        You can type out your teaching and student support plan in the box
        below, or you can upload a word doc or pdf file. \r
        \r
        ## Getting Credit
        for Completing this Task\r
        \r
        #### Task Review Details\r
        \r
        If this module
        is listed as  your “focus area”, then your response to the prompt above will
        be shared anonymously and reviewed by your peers, and you will review the
        work done by other teachers. Reviewers will be looking for thoughtful and
        thorough answers that demonstrate that you have spent time considering how
        the lesson will play out in your own classroom. Reviewers will have an opportunity
        to give feedback on your submission, and you can respond to that feedback
        and resubmit. \r
        \r
        In order to get credit for completing this task, two
        reviewers need to agree that you have responded to the prompts fully. If reviewers
        don’t feel comfortable making a decision about your task submission, they
        can elevate to a facilitator to review. You will always have a chance to address
        feedback from your reviewers and resubmit your task! Reviewer feedback will
        show up at the bottom of this page, once it’s available. \r
        \r
        <br><br>
      'U2 L3 - 4: Teaching and Student Support Plan_markdown_instruction': |-
        <br><br>\r
        >
        **NOTE: before you start this task, make sure you’ve reviewed the lesson resources
        in this module, and have a good sense of how the lesson works. If you haven’t
        already reviewed the materials, do that now and come back to this task later.**\r
        \r
        #
        Lessons 3 - 4: Teaching and Student Support Plan\r
        \r
        ## Task Description\r
        \r
        Now
        that you have a better sense of this lessons in this sequence, let’s think
        about the types of supports students will need in order to be successful.
        Since the curriculum is based on inquiry learning, lessons feature activities
        that engage students in discovering core concepts themselves. It’s important
        to think through implementation plans and student support. In this task you
        will make a plan for teaching and student support **for one of the lessons
        in this sequence** that takes into account differentiation strategies and
        make-up work for absent students. Your teaching and student support plan should
        cover the following: \r
        \r
        \r
        - **Which lesson in the sequence are you
        discussing?** \r
        \r
        - **Details on how you will implement and differentiate
        the lesson:**\r
        \r
         - An outline of any changes you will need to make to
        the lesson to fit your local constraints or context (for example: pacing and
        time, dealing with classroom setup, etc). \r
         - An overview of the types
        of student needs you’ll likely need to support in your classroom (for example:
        students who are struggling to understand the underlying concept; students
        who are already familiar with the concept, but still have room to learn more;
        etc)\r
         - Your plan for addressing each of the needs outlined above (for
        example: integrating extension activities or other materials for students
        who already know something about the topic)\r
         - How will you address or
        emphasize the connection between lessons in this sequence? \r
        \r
        - **Plan
        for catching up absent students:**\r
        \r
         - How will absent students catch
        up on activities they missed? \r
         - How will you use the fact that the lessons
        in this sequence are related and build on one another to address make-up work?
        \r
        \r
        You can type out your teaching and student support plan in the box
        below, or you can upload a word doc or pdf file. \r
        \r
        ## Getting Credit
        for Completing this Task\r
        \r
        #### Task Review Details\r
        \r
        If this module
        is listed as  your “focus area”, then your response to the prompt above will
        be shared anonymously and reviewed by your peers, and you will review the
        work done by other teachers. Reviewers will be looking for thoughtful and
        thorough answers that demonstrate that you have spent time considering how
        the lesson will play out in your own classroom. Reviewers will have an opportunity
        to give feedback on your submission, and you can respond to that feedback
        and resubmit. \r
        \r
        In order to get credit for completing this task, two
        reviewers need to agree that you have responded to the prompts fully. If reviewers
        don’t feel comfortable making a decision about your task submission, they
        can elevate to a facilitator to review. You will always have a chance to address
        feedback from your reviewers and resubmit your task! Reviewer feedback will
        show up at the bottom of this page, once it’s available. \r
        \r
        <br><br>
      'U2 L5 - 6: Teaching and Student Support Plan_markdown_instruction': |-
        <br><br>\r
        >
        **NOTE: before you start this task, make sure you’ve reviewed the lesson resources
        in this module, and have a good sense of how the lesson works. If you haven’t
        already reviewed the materials, do that now and come back to this task later.**\r
        \r
        #
        Lessons 5 - 6: Teaching and Student Support Plan\r
        \r
        ## Task Description\r
        \r
        Now
        that you have a better sense of this lessons in this sequence, let’s think
        about the types of supports students will need in order to be successful.
        Since the curriculum is based on inquiry learning, lessons feature activities
        that engage students in discovering core concepts themselves. It’s important
        to think through implementation plans and student support. In this task you
        will make a plan for teaching and student support **for one of the lessons
        in this sequence** that takes into account differentiation strategies and
        make-up work for absent students. Your teaching and student support plan should
        cover the following: \r
        \r
        \r
        - **Which lesson in the sequence are you
        discussing?** \r
        \r
        - **Details on how you will implement and differentiate
        the lesson:**\r
        \r
         - An outline of any changes you will need to make to
        the lesson to fit your local constraints or context (for example: pacing and
        time, dealing with classroom setup, etc). \r
         - An overview of the types
        of student needs you’ll likely need to support in your classroom (for example:
        students who are struggling to understand the underlying concept; students
        who are already familiar with the concept, but still have room to learn more;
        etc)\r
         - Your plan for addressing each of the needs outlined above (for
        example: integrating extension activities or other materials for students
        who already know something about the topic)\r
         - How will you address or
        emphasize the connection between lessons in this sequence? \r
        \r
        - **Plan
        for catching up absent students:**\r
        \r
         - How will absent students catch
        up on activities they missed? \r
         - How will you use the fact that the lessons
        in this sequence are related and build on one another to address make-up work?
        \r
        \r
        You can type out your teaching and student support plan in the box
        below, or you can upload a word doc or pdf file. \r
        \r
        ## Getting Credit
        for Completing this Task\r
        \r
        #### Task Review Details\r
        \r
        If this module
        is listed as  your “focus area”, then your response to the prompt above will
        be shared anonymously and reviewed by your peers, and you will review the
        work done by other teachers. Reviewers will be looking for thoughtful and
        thorough answers that demonstrate that you have spent time considering how
        the lesson will play out in your own classroom. Reviewers will have an opportunity
        to give feedback on your submission, and you can respond to that feedback
        and resubmit. \r
        \r
        In order to get credit for completing this task, two
        reviewers need to agree that you have responded to the prompts fully. If reviewers
        don’t feel comfortable making a decision about your task submission, they
        can elevate to a facilitator to review. You will always have a chance to address
        feedback from your reviewers and resubmit your task! Reviewer feedback will
        show up at the bottom of this page, once it’s available. \r
        \r
        <br><br>
      'U2 L7 - 10: Teaching and Student Support Plan_markdown_instruction': |-
        <br><br>\r
        >
        **NOTE: before you start this task, make sure you’ve reviewed the lesson resources
        in this module, and have a good sense of how the lesson works. If you haven’t
        already reviewed the materials, do that now and come back to this task later.**\r
        \r
        #
        Lessons 7 - 10: Teaching and Student Support Plan\r
        \r
        ## Task Description\r
        \r
        Now
        that you have a better sense of this lessons in this sequence, let’s think
        about the types of supports students will need in order to be successful.
        Since the curriculum is based on inquiry learning, lessons feature activities
        that engage students in discovering core concepts themselves. It’s important
        to think through implementation plans and student support. In this task you
        will make a plan for teaching and student support **for one of the lessons
        in this sequence** that takes into account differentiation strategies and
        make-up work for absent students. Your teaching and student support plan should
        cover the following: \r
        \r
        \r
        - **Which lesson in the sequence are you
        discussing?** \r
        \r
        - **Details on how you will implement and differentiate
        the lesson:**\r
        \r
         - An outline of any changes you will need to make to
        the lesson to fit your local constraints or context (for example: pacing and
        time, dealing with classroom setup, etc). \r
         - An overview of the types
        of student needs you’ll likely need to support in your classroom (for example:
        students who are struggling to understand the underlying concept; students
        who are already familiar with the concept, but still have room to learn more;
        etc)\r
         - Your plan for addressing each of the needs outlined above (for
        example: integrating extension activities or other materials for students
        who already know something about the topic)\r
         - How will you address or
        emphasize the connection between lessons in this sequence? \r
        \r
        - **Plan
        for catching up absent students:**\r
        \r
         - How will absent students catch
        up on activities they missed? \r
         - How will you use the fact that the lessons
        in this sequence are related and build on one another to address make-up work?
        \r
        \r
        You can type out your teaching and student support plan in the box
        below, or you can upload a word doc or pdf file. \r
        \r
        ## Getting Credit
        for Completing this Task\r
        \r
        #### Task Review Details\r
        \r
        If this module
        is listed as  your “focus area”, then your response to the prompt above will
        be shared anonymously and reviewed by your peers, and you will review the
        work done by other teachers. Reviewers will be looking for thoughtful and
        thorough answers that demonstrate that you have spent time considering how
        the lesson will play out in your own classroom. Reviewers will have an opportunity
        to give feedback on your submission, and you can respond to that feedback
        and resubmit. \r
        \r
        In order to get credit for completing this task, two
        reviewers need to agree that you have responded to the prompts fully. If reviewers
        don’t feel comfortable making a decision about your task submission, they
        can elevate to a facilitator to review. You will always have a chance to address
        feedback from your reviewers and resubmit your task! Reviewer feedback will
        show up at the bottom of this page, once it’s available. \r
        \r
        <br><br>
      'U2 The Internet: Cybersecurity and Crime - Video_markdown_instruction': |-
        [Video
        guide and questions](https://drive.google.com/open?id=1Qv4lgMMtP42sRlofUmGtElViD1AJ7yETvQ4pCh0rDjw)
      U2 Vigenere_markdown_instruction: |
        # Encrypt and decrypt a message with the
        Vigenère cipher\r
        \r
        This is an interactive version of the Vigenère cipher
        that animates the encryption and decryption as it’s happening, given a piece
        of text to encrypt or decrypt and the key.\r
        \r
        # Do this\r
        ### Encrypt
        a message\r
        Click Step several times, and trace what’s happening. Pay attention
        to:\r
        \r
        - How the ciphertext is being produced\r
        - What happens when you
        get to the last character of the key\r
        - After you’ve stepped through a few
        characters click Play to watch the rest animate\r
        - Hit Restart and play
        the animation again. You can use the speed slider to speed it up or slow it
        down  \r
        \r
        ![](https://images.code.org/06858f88ac12997bba73f4f76638a068-image-1443574425185.gif)\r
        \r
        ###
        Decrypt a message\r
        Encrypt a message as above, then:  \r
        \r
        - Highlight
        and copy the ciphertext\r
        - Paste it into the plaintext area. Note: Don’t
        change the key\r
        - Change the Encrypt/Decrypt toggle to Decrypt\r
        - Hit
        Step a few times, and then Play\r
        \r
        You should see the original text emerge.  \r
        ![](https://images.code.org/dc89d6c19c17adb23b6b5ff9a62c4583-image-1443574425182.gif)\r
        \r
        \r
        How
        hard would it be to crack a message encrypted with this cipher? Does the length
        of the key make a difference?\r
      U2 frequency caesar_markdown_instruction: |
        # Break a Caesar cipher!\r
        \r
        This
        tool lets you play with text and do substitution ciphers. It also shows you
        a frequency analysis of the input text. (We’ll look at that more in a later
        lesson.) You can use this to either encrypt a message or decrypt it.\r
        \r
        #
        Do this\r
        - Load the **Sample message (easy)** from the message dropdown.
        This will load a message that has been encrypted with a Caesar cipher.\r
        \r
        ![](https://images.code.org/336a6a68cc34636df21fe5ad9f43992c-image-1443566879847.gif)\r
        \r
        -
        Using the buttons in the Caesar substitution tab, you can shift the alphabet
        forwards or backwards to try to unscramble the message.\r
        \r
        ![](https://images.code.org/1783d62a944fd758cc19c5d0f73ec2c4-image-1443567014825.gif)\r
        \r
        See
        how long it takes you to crack the cipher! Is this a good method of encrypting
        secret data?\r
      U2 frequency random sub_markdown_instruction: |-
        # Break a random substitution
        cipher!\r
        \r
        This version of the tool gives you more information about the
        encrypted text and more options for how to try out different substitutions.\r
        \r
        ###
        Different ways analyze text\r
        - Play with some of the sorting options available
        in the Random substitution cipher tab to get different views on the letter
        frequencies in the input text as well as standard English text.\r
        ![](https://images.code.org/82efbca1807206c9a07de520fdb22027-image-1443572614493.23.28.png)\r
        \r
        ###
        Different ways to substitute\r
        - To substitute a letter you can drag a blue
        letter of the alphabet directly underneath the orange letter you want changed
        in the original ciphertext.\r
        ![](https://images.code.org/da9a7af7568d8c1698872ab91b4d79d7-image-1443572471212.gif)\r
        \r
        ###
        Play.  Always play.\r
        - There are other ways to analyze and substitute characters
        that you can find by clicking on the buttons and trying out whatever you like.\r
        -
        Remember: you can't break it :)\r
        \r
        See how long it takes you to crack
        the cipher! Is this a good method of encrypting secret data?
      U2 vigenere cipher_markdown_instruction: |-
        # Encrypt and decrypt a message with
        the Vigenère cipher\r
        \r
        This is an interactive version of the Vigenère
        cipher that animates the encryption and decryption as it’s happening, given
        a piece of text to encrypt or decrypt and the key.\r
        \r
        # Do this\r
        ###
        Encrypt a message\r
        Click Step several times, and trace what’s happening.
        Pay attention to:\r
        \r
        - How the ciphertext is being produced\r
        - What
        happens when you get to the last character of the key\r
        - After you’ve stepped
        through a few characters click Play to watch the rest animate\r
        - Hit Restart
        and play the animation again. You can use the speed slider to speed it up
        or slow it down  \r
        \r
        ![](https://images.code.org/06858f88ac12997bba73f4f76638a068-image-1443574425185.gif)\r
        \r
        ###
        Decrypt a message\r
        Encrypt a message as above, then:  \r
        \r
        - Highlight
        and copy the ciphertext\r
        - Paste it into the plaintext area. Note: Don’t
        change the key\r
        - Change the Encrypt/Decrypt toggle to Decrypt\r
        - Hit
        Step a few times, and then Play\r
        \r
        You should see the original text emerge.  \r
        ![](https://images.code.org/dc89d6c19c17adb23b6b5ff9a62c4583-image-1443574425182.gif)\r
        \r
        \r
        How
        hard would it be to crack a message encrypted with this cipher? Does the length
        of the key make a difference?
      U2L01 Assessment 4_markdown_instruction: |
        ## The Internet is for Everyone:
        Assessment 4

        Explain one challenge raised by Vint Cerf in “The Internet
        is for Everyone - but it won’t be if….” and give one example of it that you
        know about.
      U2L01 Assessment 4_2018_markdown_instruction: |
        ## The Internet is for Everyone:
        Assessment 4

        Explain one challenge raised by Vint Cerf in “The Internet
        is for Everyone - but it won’t be if….” and give one example of it that you
        know about.
      U2L02 Assessment 5_markdown_instruction: |-
        Even with a good protocol, what are
        some privacy and security challenges while playing battleship on the Internet
        Simulator?
      U2L02 Assessment 5_2018_markdown_instruction: |-
        Even with a good protocol, what
        are some privacy and security challenges while playing battleship on the Internet
        Simulator?
      U2L02 Assessment1_markdown_instruction: |
        Why was it necessary to include the
        sender's and recipient's names in the NetSim version of Battleship, but
        not in the face-to-face game?
      U2L02 Assessment2_markdown_instruction: |2+

        If the messaging scheme your group
        designed was really used on the internet, what could go wrong in terms of
        security and privacy?

        *In your response, think about what a malicious person
        could do. What if the messages sent weren't about a game but about something
        more personal like a conversation with a friend, or communicating with a bank?*


      U2L02 Free Response Getting Started_markdown_instruction: "Have you ever played\nthe
        game of Battleship? \n\nWhat rules did you follow? \n\nDid you have a\nstrategy
        for winning?\n"
      U2L02 Free Response Reflection_markdown_instruction: "Describe the addressing\nsystem
        your group devised.\n\nHow did your group decide upon a system for\nsending
        messages in the Battleship simulator? \n\nWere there disagreements\nor problems?
        How were they resolved?\n\n\n"
      U2L02 Free Response Reflection_2018_markdown_instruction: "Describe the addressing\nsystem
        your group devised.\n\nHow did your group decide upon a system for\nsending
        messages in the Battleship simulator? \n\nWere there disagreements\nor problems?
        How were they resolved?\n\n\n"
      U2L04 - NetSim Routers with Addresses_markdown_instruction: |-
        # An Updated Internet
        Simulator\r
        Many changes have been made to the Internet Simulator. \r
        \r
        **Routers:**
        Rather than being connected to your entire class you are now connected to
        a single router. You can see who else is on your router in the network diagram.\r
        \r
        ![](https://images.code.org/0311148470dc358fe435568e2b333062-image-1442008896037.51.04
        PM.png)\r
        \r
        \r
        **IP Addresses:** Every user has a unique IP address. The
        first portion is the number of your router and the second is your own unique
        number. You can figure out the IP addresses of people on the router by looking
        at the network diagram.\r
        \r
        ![](https://images.code.org/b03d841ebd8299ca43197ee4df35d273-image-1442008949041.51.59
        PM.png)\r
        \r
        **Sending Messages: ** You can now send messages to a single
        other user. Fill in the "To" portion of the message with the IP address
        (including the period) of the person you'd like to send your message to.\r
        \r
        ![](https://images.code.org/8e9b073526f24e69147d5c7f34492bec-image-1442009069243.52.34
        PM.png)\r
        \r
        **Router Statistics: ** You can see useful information about
        the functioning of your router in the "Router" tab.\r
        \r
        ![](https://images.code.org/7390cfa12f65b933145a391fa65ab4b1-image-1442009194697.58.23
        PM.png)\r
        \r
        **Router Logs: ** You can read a log of traffic both at the
        level of your router and the entire network by clicking the "Log Browser"
        button.\r
        \r
        ![](https://images.code.org/b24975e33f1a2b10fc6a2ca8cf1c9ad2-image-1442009358166.58.48
        PM.png)
      U2L04 Assessment2_markdown_instruction: |
        Describe the relative benefits of
        routing over a broadcast style of communication. Is routed traffic more secure
        than broadcasting? Justify your answer.
      U2L04 Assessment2_2018_markdown_instruction: |
        Describe the relative benefits
        of routing over a broadcast style of communication. Is routed traffic more
        secure than broadcasting? Justify your answer.
      U2L04 Assessment3_markdown_instruction: |
        Can you know in advance the path a
        message will take between you and another computer on the Internet? Justify
        your answer.
      U2L04 Assessment3_2018_markdown_instruction: |
        Can you know in advance the path
        a message will take between you and another computer on the Internet? Justify
        your answer.
      U2L04 Free Response Wrap Up_markdown_instruction: |
        How do you think the routers
        are physically connected? Does it matter to you? Why or why not?
      U2L05 - NetSim - Packets and Building TCP_markdown_instruction: |-
        ## Packets
        and Making a Reliable Internet\r
        \r
        **Challenge:** Develop a protocol for
        reliably sending a message across an unreliable network\r
        \r
        **An Unreliable
        Internet Simulator:** The current version of the Internet Simulator is modeled
        after some actual constraints of the Internet\r
        - Messages must be divided
        into packets which may contain <em><strong> at most eight (8) ASCII characters
        </em></strong>\r
        - Messages should be long enough to require at least 10
        packets\r
        - Packets may not arrive in the order sent\r
        - Packets may be
        dropped while in transmission\r
        \r
        **Directions:** In a group or individually
        join a router in the Internet Simulator and practice sending messages given
        these new constraints. Once you are comfortable with the challenge, iteratively
        design a protocol that can reliably send a message to a partner. You and your
        partner should join <em><strong> DIFFERENT </strong></em> routers.\r
        \r
        **Protocol
        Requirements:**\r
        - All communication can only be done through the Internet
        Simulator\r
        - You must send a message that spans at least 10 packets (i.e.
        an 80 character ASCII message). \r
        - The protocol should account for the
        possibility that the characters might be entirely random (i.e. not necessarily
        English - do not count on human intuition to reconstruct the message. The
        message is not known beforehand.)\r
        - The sender and receiver must be confident
        the full message was successfully transmitted and reconstructed.
      U2L05 Reflection 1_markdown_instruction: |
        In your own words, what were the
        primary obstacles you needed to overcome in today’s challenge? How do these
        obstacles mirror actual problems encountered on the Internet?
      U2L05 Reflection 1_2018_markdown_instruction: |
        In your own words, what were
        the primary obstacles you needed to overcome in today’s challenge? How do
        these obstacles mirror actual problems encountered on the Internet?
      U2L07 Assessment5_markdown_instruction: |
        When analyzing algorithms why doesn't
        the amount of real time (clock time) tell us very much about the algorithm's
        "efficiency"?
      U2L08 Assessment 0_markdown_instruction: |
        ## Router Table: Assessment

        In
        this activity you filled in a routing table by visiting other routers you
        were directly connected to find out what paths they were using. Why do routers
        need to use this method of talking to their direct neighbors in order to fill
        in their routing tables?
      U2L08 Free Response 1_markdown_instruction: |
        How is creating a router table
        similar to finding the shortest path in a graph?  How is it different?
      U2L08 Free Response 2_markdown_instruction: "Why do routers store information\nabout
        neighbors and costs, rather than the whole path from themselves to another\nrouter?
        \n"
      U2L08 Free Response 3_markdown_instruction: |+
        Why does a router keep track of
        the cost to a destination through multiple routers instead of only the fastest
        one?

      U2L09 Assessment2_markdown_instruction: |
        Why do computers need to periodically
        check the DNS for websites you have already visited?
      U2L09 Assessment2_2018_markdown_instruction: |
        Why do computers need to periodically
        check the DNS for websites you have already visited?
      U2L09 Free Response Wrap Up_markdown_instruction: |
        Why don’t we need to know
        the IP addresses for our favorite sites?
      U2L09 Free Response Wrap Up_2018_markdown_instruction: |
        Why don’t we need to
        know the IP addresses for our favorite sites?
      U2L10 Assessment3_markdown_instruction: |
        Why do multiple websites at your school
        and the computers in your classroom all have IP addresses that start with
        the same two sets of numbers?
      U2L10 FR describe what you made from lesson prompt_markdown_instruction: |-
        What
        was the most interesting visualization you were able to create with the data
        set provided? What did it help you discover about the data?\r
        \r
        Make sure
        that your response includes the following:\r
        \r
        1. What type of chart it
        was\r
        2. What specific data it plotted\r
        3. What it helped you discover
        and/or *why* it was the most interesting to you\r
        \r
        Try to keep your response
        to 150 words or less (5-7 sentences).
      U2L10 FR why best worst viz_markdown_instruction: |
        \r
        Choose the visualization
        that you thought was the best or worst (pick one) from the ones you saw in
        class and do the following:\r
        \r
        1. Describe the visualization so the reader
        knows which one you are talking about (example: "Collection A #2 -- Average
        divorce rates in America")\r
        \r
        2. Say whether this was the best or worst
        visualization for you and *and why*.  Justify your opinion by citing principles
        of visualizations that you have learned about.  Use the visualization 101
        guide as a resource. \r
        \r
        Try to keep your response to around 100 words
        (about 3-5 sentences).\r
      U2L10 Free Response Getting Started_markdown_instruction: |
        Explain the similarities
        between DNS and the Postal Service.  Describe their analogous hierarchical
        structure.
      U2L10 Free Response Wrap Up_markdown_instruction: "Complete this sentence.\n\nI\nlearned
        three things today about DNS: ______(1)______ , ______(2)______ ,\nand ______(3)______.
        \n\nHowever, the most important thing I learned is ______(4)______.\n"
      U2L10 NetSim Automatic DNS_markdown_instruction: |-
        ## The Need for DNS\r
        \r
        In
        this version of the Internet Simulator, a Domain Name System (DNS) is provided
        for you and knows the IP addresses of all connected computers. You can only
        see the hostnames of other connected computers.   \r
        ![](https://images.code.org/3ac2c23ed610abc7e785ec85054e89a9-image-1434746293690.PNG)\r
        \r
        The
        address of the DNS is always &lt;yourRouterNumber&gt;.15. Send a message with
        protocol `GET [hostname]`, for example `GET Bob2`, to the DNS to get another
        student's address. You can keep track of the responses in the Notes section
        in the DNS tab.  \r
        ![](https://images.code.org/c81c1a6b876eb46674a7f7e5e70506ce-image-1434746797267.png)
      U2L11 Free Response_markdown_instruction: |
        The definition of HTTP makes use
        of the ASCII character set without reference to how these characters are encoded.
        Explain why this is an example of abstraction.
      U2L11 Free Response_2018_markdown_instruction: |
        The definition of HTTP makes
        use of the ASCII character set without reference to how these characters are
        encoded. Explain why this is an example of abstraction.
      U2L12 FR reflection on collaboration_markdown_instruction: |-
        *NOTE: The following
        is modification of one of the prompts given on the AP Create Performance task.*\r
        \r
        Describe
        the development process of discovering your data story and creating a visualization.  Describe
        the difficulties and/or opportunities you encountered along the way, and describe
        the collaborative process between you and your partner.\r
        \r
        Please limit
        your response to about 200 words.
      U2L13 Assessment1_markdown_instruction: |
        What is a Caesar cipher?  As part
        of your answer demonstrate encrypting the plaintext messages: `CS IS COOL`
        with a caesar cipher.\r
      U2L13 Assessment2_markdown_instruction: |
        What makes one encryption better than
        another?
      U2L13 FR Reflection data analysis objective_markdown_instruction: |
        In order
        to analyze data with a computer, we need to clean the data first. Based on
        your experience today, would you say that data analysis is a perfectly objective
        process? Why or why not? (Limit to about 100 words)\r
      U2L13 Free Response Getting Started_markdown_instruction: "In what situations\non
        the Internet do you typically want to keep information secret? \n\nFrom\nwhom
        do you want to keep it to be secret? \n\nHow do you think your privacy\nis
        maintained on the Internet now?\n\n\n"
      U2L13 Free Response Wrap Up_markdown_instruction: |
        List 3 characteristics of
        the ideal encryption scheme.\r
      U2L14 Assessment2_markdown_instruction: |-
        Using the Vigenere cipher, does the
        length of the key matter? \r
        For example, if one key is length 5 and another
        is 20, does one produce a “better” encrypted message than the other, or is
        it basically the same? Yes or no? Explain your reasoning.
      U2L14 Free Response Getting Started_markdown_instruction: |
        What is the difference
        is between “cracking” a code and “decrypting” a message?\r
      U2L14 Free Response Wrap Up_markdown_instruction: |
        Knowing what you know now
        about frequency analysis, would you feel comfortable sending your password
        over the Internet using a substitution cipher?\r
        \r
        Why or why not?\r
      U2L14 frequency random_markdown_instruction: |-
        # Break a Caesar cipher!\r
        \r
        This
        tool lets you play with text and do substitution ciphers. It also shows you
        a frequency analysis of the input text. (We’ll look at that more in a later
        lesson.) You can use this to either encrypt a message or decrypt it.\r
        \r
        #
        Do this\r
        - Load the "Sample message (easy)" from the message dropdown.
        This will load a message that has been encrypted with a Caesar cipher\r
        \r
        ![](https://images.code.org/336a6a68cc34636df21fe5ad9f43992c-image-1443566879847.gif)\r
        \r
        -
        Using the buttons in the Caesar substitution tab, you can shift the alphabet
        forwards or backwards to try to unscramble the message.\r
        \r
        ![](https://images.code.org/1783d62a944fd758cc19c5d0f73ec2c4-image-1443567014825.gif)\r
        \r
        See
        how long it takes you to crack the cipher! Is this a good method of encrypting
        secret data?
      U2L15 Assessment2_markdown_instruction: |
        What problems exist with encryption
        schemes such as the Vigenere cipher even when strong encryption keys are used?
      U2L15 Free Response Getting Started_markdown_instruction: |
        Why do you think
        Internet hacking becomes "really big news" when it occurs?
      U2L15 Free Response Wrap Up_markdown_instruction: "Companies and organizations\ncommonly
        require users to change their passwords frequently. Websites have\npassword
        length and complexity requirements. \n\nIs it better to change your\npassword
        frequently or to have a longer password? \n\nWhat level of security\nis appropriate
        to require of end users? Does this change, depending on the\ncontext (for
        example, employee or customer)?\\t\n"
      U2L16 Free Response Assessment 3_markdown_instruction: |-
        Why are computationally-hard
        problems important in encryption strategies?
      U2L16 Free Response assessment 2_markdown_instruction: |-
        What do people do who
        need solutions to large computationally-hard problems?
      U2L16 Free response assessment 1_markdown_instruction: |-
        What does "computationally
        hard" mean?
      U2L17 Assessment 1_markdown_instruction: |-
        Describe what it means for a problem
        to be “computationally hard.”
      U2L17 Assessment 2_markdown_instruction: |-
        What strategies do people use to
        solve large computationally-hard problems?
      U2L17 Free Response Getting Started_markdown_instruction: |-
        What kinds of problems
        do you think are “computationally hard"?
      U2L17 Free Response Wrap Up_markdown_instruction: |-
        If the TSP is unsolvable
        for finding an exact solution, how do you think package delivery companies
        optimize their delivery routes?
      U2L18 Assessment_markdown_instruction: |
        How is the Wireless Hotspot problem
        different from another “hard” problem you saw, the Traveling Salesman problem?
      U2L18 FR why is asymmetric encryption useful_markdown_instruction: |
        * In symmetric
        encryption the same key is used to encrypt and decrypt a message.
        * In **a**symmetric
        encryption different keys are used to encrypt and decrypt.

        #### Give at
        least one reason (more are welcome) why **a**symmetric encryption is useful?
      U2L18 Free Response Assessment 1_markdown_instruction: |-
        In symmetric encryption
        the same key is used to encrypt and decrypt a message. In asymmetric encryption
        different keys are used to encrypt and decrypt. Give at least one reason why
        asymmetric encryption is useful
      U2L18 Free Response Assessment 3_markdown_instruction: |-
        List other examples
        of one-way functions. Can you think of a one-way function in real life?
      U2L18 Free Response Getting Started_markdown_instruction: |
        Given that the Travelling
        Salesman Problem and the Wireless Hotspot Problem are computationally hard
        to solve, why might the Wireless Hotspot Problem be a more ideal candidate
        for using an encryption method? Make reference to properties of the two problems
        in your answer.
      U2L18 Free Response Wrap Up_markdown_instruction: |+
        Mixing paint is an easy-to-understand
        example of a one-way function. The process is clear -- mix together a few
        colors to get a new color -- but it's difficult to "un-mix" the paint to
        get back to the original colors used.

        How is this related to encryption?


      U2L19 Assessment_markdown_instruction: |
        Explain how modulo acts as a one-way
        function?
      U2L19 Free Response Getting Started_markdown_instruction: |
        Explain in your
        own words what the modulo operation does.  You may use the analogy of a clock
        in your answer if you like.\r
      U2L19 Free Response Wrap Up_markdown_instruction: |
        Describe to a person who
        knows nothing about encryption why public key encryption is secure and is
        hard to crack.
      U2L20 - Free Response - exploited technology_markdown_instruction: |+
        ## Security
        and Hacking in the Real World: Written Response
        *Answer this prompt below
        with 200 words or less.*

        **Prompt:** Identify and explain how some Internet
        technologies are exploited, circumvented, or allow for the cyber threat. Refer
        to technologies you've learned about in this unit.

      U2L20 Free Response Getting Started_markdown_instruction: |
        Why do you think
        Internet hacking becomes "really big news" when it occurs?
      U2L20 Free Response Wrap Up 2_markdown_instruction: |+
        ## Security and Hacking
        in the Real World: Written Response
        *Answer this prompt below with 200 words
        or less.*

        **Prompt:** Explain how the information covered in your visual
        artifact is related to one of the topics below. Use relevant terminology in
        your answer. Include specific references to lessons and activities.

        Encryption
        and Algorithms <br>
        Cracking an Encryption with Heuristics (i.e. Frequency
        Analysis)<br>
        Symmetric Encryption (i.e. Caesar)<br>
        Harder to Crack Encryption
        (i.e. Vigenere)<br>
        Asymmetric Encryption (Alice and Bob)<br>
        Computationally
        Hard Problems<br>
        Public Key Encryption<br>
        One-way Functions<br>
        Open
        Standards<br>
        Certificate Authorities<br>

      U2L20 Free Response Wrap Up_markdown_instruction: |
        ## Security and Hacking
        in the Real World: Written Response
        *Answer this prompt below with 200 words
        or less.*

        **Prompt:** Clearly describe the computing tools, techniques,
        and development process used to create the artifact such that someone can
        reproduce the artifact.
      U2L3 Assessment 4_markdown_instruction: |-
        Why does it not make sense for users
        to be identified by their real names on the Internet?
      U2L3 Free Response Getting Started_markdown_instruction: |
        What are the benefits
        of using a phone number instead of a person's name? How many total phone
        numbers are there?
      U2L3 Free Response Wrap Up_markdown_instruction: |
        Why does it make more sense
        to use IP addresses for online accounts instead of users' real names?
      U2L3 NetSim Hub Mode_markdown_instruction: |-
        # Test It Out! (Optional)\r
        \r
        After
        you've finished developing your protocol feel free to test it out using the
        Internet Simulator. Does your protocol work as well as you thought?
      'U2L3: IP DNS Video_markdown_instruction': "[Video guide and questions](https://docs.google.com/document/d/1ngw37cKFH4Dl_lhWXuXROH5WDdgHatz3gJo3pAdpqkg/edit?usp=sharing)"
      U2L4 Free Response Getting Started_markdown_instruction: "Imagine that you\nwant
        to send a postcard to a friend in a city on the far side of the country.\nAfter
        you write a message, you address it, add a return address, put a stamp\non
        it, and drop it in the mail.\n\nThen what happens? What is the route that\npostcard
        takes to get to your friend? \n\nList the steps that you think it\ntakes for
        a postcard gets from you to your friend. Include each of the potential\nstops
        along the way and how it gets transported from one place to another.\n\n\n"
      U2L5 FR brighten darken image_markdown_instruction: |
        Imagine that you have
        an image that is too dark or too bright. Describe how you would alter the
        RGB settings to brighten or darken it. Give an example.\r
      U2L8 google trends hypothesis_markdown_instruction: |-
        Consider the Google Trends
        graph of dogs and cats below (same graph as previous question).\r
        \r
        Give
        a plausible explanation or hypothesis for the spike in dog searches that occurred
        between 2014 and 2015 that would lead to further investigation or research.
        Give your explanation and what you would want to investigate next.\r
        \r
        <a
        href="https://images.code.org/bd40b81c105978fe26ff787a6bf82795-image-1469633006237.png"
        target=_blank><img src="https://images.code.org/bd40b81c105978fe26ff787a6bf82795-image-1469633006237.png"><br>Click
        to Enlarge</a>
      U2L9 FR digital divide issue_markdown_instruction: |-
        Consider the following
        statement from the CS Principles course framework:\r
        \r
        ```\r
        7.4.1C The
        global distribution of computing resources raises issues of equity, access,
        and power.\r
        ```\r
        \r
        Briefly describe one of these issues that you learned
        about in the lesson and how it affects your life or the lives of people you
        know.  Keep your response to about 100 words (about 3-5 sentences).
      U2L9 Free Response Getting Started_markdown_instruction: "On the Internet,\ncomputers
        can only communicate with each other through IP addresses. Typically,\nyou
        will know the name (or URL) of a computer you wish to talk to, but not\nits
        IP address. \n\nList two impacts that would result if you HAD TO KNOW\nIP
        addresses to get to websites?\n"
      U3 - Arrays - Demo App_markdown_instruction: |-
        # My Favorite Things\r
        \r
        Check
        out this simple app for creating a collection of your favorite things. **We're
        going to be working towards building this app** over the next several exercises.
        As you might expect, this application **uses an array** to store and organize
        information.\r
        \r
        # Do This:\r
        \r
        * Use the "My Favorite Things" app
        and try to **predict how arrays are used to create the functionality you observe.**
        \r
        * Some features to notice:\r
        \t* The app keeps track of a **list of your
        favorite things**.\r
            * You may use buttons to **move forward and backward
        through your list**.\r
            * The **current entry and total number of entries**
        are indicated at the top.\r
            * You may **add a new entry** at the current
        location in your list.
      U3 - Arrays - Wrap Up 1_markdown_instruction: "## Choose: Array or Variable?\n\nYour\napp
        needs to store the following information. For each type of information,\ndecide
        whether you would use an array or a variable to store it:\n \n* All\nthe messages
        a user has sent\n* The highest score a user has ever reached\non the app\n*
        A username and password to unlock the app\n\n"
      U3 - Arrays - Wrap Up 2_markdown_instruction: |
        ## Free Response: Choosing Array
        or Variable

        In general, when do you think you should store information
        in an array, and when should you use a variable?
      U3 - Arrays - appendItem_markdown_instruction: |
        # Adding Items to an Array\r
        \r
        <img
        src="https://images.code.org/c9244eb598416b5a3d9baac088bbaca8-image-1447267168567.39.06
        PM.png" style="width: 250px; float: right">\r
        \r
        In our last exercise
        we created our array and initialized it with some values. Another way to do
        this is to **add items to your array on separate lines**. The simplest way
        to do this is to add a new item to the end of your array using the `appendItem`
        command.\r
        \r
        <img src="https://images.code.org/74a2f2660d5aea8dec7dc4933f2c68d3-image-1447185901732.04.50
        PM.png" style="width: 250px; float:right; border: solid 1px black">\r
        \r
        To
        append means to add or to join. When you append an item to an array you actually
        add a new location to the end of the array that contains the new value, so
        that the total size of the array grows by one.  Since you can always add items
        to an array after creating it, it is very common to  **create an empty array
        and then add values in subsequent portions of your program**.\r
        \r
        # Do
        This:\r
        \r
        * **Read the documentation** for `appendItem`.\r
        * Create an
        **empty array** called `oddNumbers`.\r
        * Use `appendItem` to add the odd
        numbers 1-11 to your array.\r
        \r
        ![](https://images.code.org/41883beff3cb9810fed37ae684dc1fe8-image-1448312407634.gif)\r
        \r
        *
        **Use `console.log`** to confirm your array is holding the correct values.
        The output should look like the example below.\r
        \r
        <img src="https://images.code.org/60d41e3ea1927edbee9cfc1cc408bbb5-image-1447187862124.37.01
        PM.png" style="width: 150px">\r
        \r
      U3 - Arrays - assignment_markdown_instruction: |
        # Setting Values by Index\r
        \r
        Each
        location in an array can be treated like its own variable. We've already
        seen how we can use bracket notation to reference values stored at specific
        locations in an array. Just like with variables, **we can assign the value
        of a specific location in an array using `=`** (the assignment operator).\r
        \r
        **Example:**
        The value at index 0 of this array is set to 10.\r
        \r
        ![](https://images.code.org/d0bf9901deeffb1cd6553c27c38046a4-image-1447172887059.27.25
        AM.png)\r
        \r
        # Do This:\r
        \r
        <img src="https://images.code.org/cfa8d82d89e5227f22e3afe5f9c49698-image-1447366432447.13.11
        PM.png" style="width: 200px; float: right">\r
        \r
        Starter code is provided
        that creates an array of 0's and 1's. **Set all the values in this array
        to be 0**. \r
        \r
        * Use **indexes** and the **assignment operator** `=` to
        **set all the 1's to be 0**.\r
        * Check the output of the `console.log` to
        confirm **the array only contains 0's**. Example shown on the right.\r
        \r
      U3 - Arrays - assignment2_markdown_instruction: |-
        # Array Values: Arithmetic\r
        \r
        You
        can reference locations in arrays in arithmetic expressions, just like you
        might a variable.\r
        \r
        ![](https://images.code.org/a7d11342d8c72b34f2268e4104e43fbd-image-1447189790574.09.32
        PM.png)\r
        \r
        The starter code **creates an empty array and adds three random
        values to it**. \r
        \r
        ![](https://images.code.org/51b7c713ae398299a85ee8c0b9ee04f3-image-1447190702799.23.46
        PM.png)\r
        \r
        You will be adding code to your program that calculates the
        sum of the values in the array.\r
        \r
        # Do This:\r
        \r
        * **Add a variable**
        to your program to hold the sum of the array values.\r
        * Assign the value
        of the variable to **the sum of the three array values**.\r
        * Use `console.log`
        to confirm that you have correctly calculated the sum of the values. Below
        is sample output from one run of the program.\r
        \r
        ![](https://images.code.org/a9ca48808e8e833d92b3bcdebc7b0bd4-image-1447189975738.12.31
        PM.png)
      U3 - Arrays - assignment3_markdown_instruction: |
        # Reassigning Array Values\r
        \r
        We've
        already seen many examples of how **a location in an array can be treated
        identically to a variable**. The last exercise we'll perform to prove this
        point is **reassigning array values**. The syntax for reassigning values stored
        in an array is identical to that used when reassigning variables. Even the
        `++` notation to increase a value by one works!\r
        \r
        ![](https://images.code.org/3cbd11c69e42daddce28e059388097db-image-1464228660945.png)\r
        \r
        The
        program you're about to see **creates an empty array and adds three random
        values to it**. You will be adding code to the program that **increases each
        value by one**.\r
        \r
        # Do This:\r
        \r
        * Add code to the program that **increases
        the value stored at each location in the array by one**.\r
        * Use `console.log`
        to confirm that you have correctly increased the values. Below is sample output
        from one run of the program.\r
        \r
        ![](https://images.code.org/42ca1f874a8a7b71e29b2ffd80ec31c3-image-1447191826756.43.37
        PM.png)\r
        \r
      U3 - Arrays - createFirstArray_markdown_instruction: |
        # Creating an Array\r
        \r
        Arrays
        have many features which make them different from variables, but **most of
        what you've learned about variables also applies to arrays**. For example,
        just like a variable:\r
        \r
        * Arrays should be given a **descriptive and
        meaningful** name.\r
        * Arrays are created using `var`.\r
        * Arrays can be
        initialized/set using `=`.\r
        \r
        **Example: Creating an Array**\r
        \r
        ![](https://images.code.org/0b7d201db2990f0189963bb6a565a057-image-1447097600773.33.08
        PM.png)\r
        \r
        This array contains 3 values: 100, 250, 500. Notice that the
        values are separated with commas `,` and that the entire array is enclosed
        in brackets `[ ]` . We can use `console.log` to display the contents of an
        array just like we would a variable.\r
        \r
        ![](https://images.code.org/7d4be70330108e3e5d6325fa4e721ef4-image-1447097904253.38.18
        PM.png)\r
        \r
        # Do This:\r
        \r
        * Following the format described above **create
        an array** which contains **the even numbers from 0 to 10**.\r
        \r
        <img src="https://images.code.org/872be32ff4ba4e9c733435d524a95c9e-image-1448311800271.gif"
        width=450px>\r
        \r
        * Make sure your array has a **descriptive and meaningful
        name**.\r
        * Use `console.log` to display the contents of your array. Below
        is an example of the output your program should generate.\r
        \r
        ![](https://images.code.org/230d988cf99556db04a8a4ad6a8d8a47-image-1447364062049.33.53
        PM.png)\r
        \r
      U3 - Arrays - expressionsAsIndexes_markdown_instruction: |-
        # Expressions as
        Indexes: Using Variables\r
        \r
        We can use **any expression that evaluates
        to a number** as an index in an array. Here are some examples:\r
        \r
        ![](https://images.code.org/6d4ecc9249dc9f3a845196b04d833c1a-image-1447268711944.24.53
        PM.png)\r
        \r
        # Do This:\r
        \r
        * **Starter code** has been provided which
        creates an array of colors.\r
        * **Write code** that logs **a random color
        from this list** to the console by generating a value for a random index.
        Try to write your program using `list.length` rather than hard-coding the
        length of the list.\r
        \r
        ![](https://images.code.org/d0463c0f2528e04c396f3b9cf219c3ed-image-1447370139548.gif)
      U3 - Arrays - favThings Counting Variable_markdown_instruction: |-
        # Current
        Index\r
        \r
        This app also allows a user to scroll through individual items
        in the array. In order to keep track of which index we are currently viewing,
        our application will need **a global variable that stores the current index**.
        In coming exercises we'll want our global index to change, so let's **make
        sure that your code references your global index** rather than fixed values.\r
        \r
        #
        Do This:\r
        \r
        <img src="https://images.code.org/d93b2abfec64ce67e8ccfecee14bae3d-image-1447346228581.36.43
        AM.png" style="width: 250px; float: right">\r
        \r
        * Create a **global
        variable** that will be used to keep track of the current index in the array.
        Set this variable to 0.\r
        * Update `setText` which displays the words to
        show your first favorite thing using **the global index variable** instead
        of a hard-coded number. \r
        * Update `setText` which displays the current
        item number to use **the global index variable** instead of a hard-coded number.\r
        \t*
        **Hint:** since arrays are zero-indexed **you will have to add one to your
        index** to generate the correct value to display.\r
        * **Note:** neither of
        these outputs will be able to change yet. Don't worry, we'll be taking care
        of that in coming exercises!
      U3 - Arrays - favThings Next_markdown_instruction: |-
        # Next Button\r
        \r
        Nice
        work! Your application should now have some simple output displaying one of
        your favorite things and indicating which item of your list you are showing.
        To make things more interesting, however, **we want to be able to change which
        item we display**.\r
        \r
        To change the item displayed, the user will use
        the "Next" and "Last" buttons. These should **increase or decrease the
        global index by one and then you should update the information displayed on
        the screen**. To start out with, however, we'll just be writing code for
        our Next Button. \r
        \r
        # Do This:\r
        \r
        * **Add an event handler** to the
        "Next" button.\r
        * Write code in this event handler that **increments your
        global index variable** and then **updates the output on the screen**.\r
        \t*
        **Note:** If your code from the last exercise was written to reference this
        variable then you should just be able to reuse it once you've incremented
        your variable. We'll talk more about this in the next exercise.\r
        * Run
        your program to **confirm that the user can move forward through the list
        and that the output displayed is correct**.\r
        \t* **Note:** You may notice
        that your program throws an error if the global index variable goes out of
        bounds. Don't worry about this for now - we'll fix it in a later exercise.
      U3 - Arrays - favThings Prev_markdown_instruction: |-
        # Last Button\r
        \r
        Our
        user can now move forward through our list of favorite things, and we're
        about to write code that allows them to move backwards as well. If you've
        written your code to reference your global index then this should only require
        you to decrease its value by one and reuse code that updates the screen output.
        Before we write the code for backwards let's work on cleaning up our code.\r
        \r
        **Removing
        Repeated Code:** Once you add the code for moving backwards through your array,
        your program will have three places where it updates the screen by setting
        the text of your screen elements. Rather than repeating this code we should
        **create a function** that updates the screen and then call it every time
        we need to refresh those elements. This will not only make our program easier
        to read and avoids the errors that can arise from redundant code, but it also
        makes it easier to make changes to how our program runs, since all the code
        that updates the screen is in a single place.\r
        \r
        # Do This:\r
        \r
        * **Write
        a function** that contains the `setText` commands you have used to update
        the screen.\r
        * **Replace** the places in your code where you used to have
        these commands with **calls to your new function**.\r
        * **Add an event handler**
        to the "Last" button that decreases the **global index variable** by one
        and then updates the screen by calling your new function.\r
        * Run your program
        to confirm that the user **can move forward AND backward** through the list
        and that the output displayed is correct.\r
          * **Note:** You may notice
        that your program throws an error if the global index variable goes out of
        bounds. Don't worry about this for now - we'll fix it in a later exercise.
      U3 - Arrays - favThings addItem_markdown_instruction: |-
        # Adding New Items\r
        \r
        Now
        we want our user to be able to add items of their own to the list. As you
        might have guessed, this is as easy as inserting an item into our array at
        the current index.\r
        \r
        # Do This:\r
        \r
        * **Add an event handler** to
        the "Add" button.\r
        * **Write code** in your event handler that:\r
        \t*
        Uses `getText` to access the user's new item.\r
            * Uses`insertItem` to
        add that item to your array at the current index.\r
            * Calls your update
        function to update the screen (the new item should be displayed).\r
        * Run
        your program to confirm that the user **can add items to the list** and that
        the output displayed is correct.
      U3 - Arrays - favThings bounds_markdown_instruction: |-
        # *if* Statements: Staying
        in Bounds\r
        \r
        Currently the user can increase or decrease the value in
        the global index **past the bounds of your array**. As a result you've probably
        already seen that errors are generated.\r
        \r
        To prevent this from happening,
        we're going to **add `if` statements** to the event handlers on the "Next"
        and "Last" buttons. They should check the value of the global index variable
        before changing it. If the user is about to step out of the bounds of your
        array they should either:\r
        \r
        * **Block:** Do not change the index if it
        will result in a value that is out of bounds.\r
        * **Wrap:** Set the index
        to be the other end of the array. In other words, going past the end of the
        array moves the index back to 0 and going past the beginning of the array
        sets the index to the last in the array (`list.length` will be helpful here).\r
        \r
        #
        Do This:\r
        \r
        * **Add `if` statements** to the event handlers on the "Next"
        and "Last" buttons that **prevent the global index from going out of bounds**
        using one of the two strategies described above.\r
        * Run your program to
        confirm that the user **cannot go out of bounds** and that the output displayed
        is correct.
      U3 - Arrays - favThings createArray_markdown_instruction: |-
        # Create Your Array\r
        \r
        Now
        that we've dealt with our design elements we'll need to start writing the
        actual code of our app. This app keeps track of a list of items, so we know
        that **we'll need to create an array** to store them. \r
        \r
        # Do This:\r
        \r
        *
        **Create an array** that will hold your list of favorite things.\r
        * **Add
        three of your own favorite things to your array.**
      U3 - Arrays - favThings firstOutput_markdown_instruction: |
        # Displaying Information
        to the User\r
        \r
        Before we make our application interactive, we'll want
        to practice creating some simple user output. When the app starts up, the
        first item in your list should be displayed. Let's write the code that will
        display this information to the screen. \r
        \r
        # Do This:\r
        \r
        <img src="https://images.code.org/d93b2abfec64ce67e8ccfecee14bae3d-image-1447346228581.36.43
        AM.png" style="width: 250px; float:right">\r
        \r
        * Using `setText` set
        the main text area to show your first favorite thing.\r
        * Using `setText`
        and `list.length` set the text indicating what item of the list the user is
        currently viewing.\r
        \t* **Hint:** since arrays are zero-indexed **you will
        have to add one to your index** to generate the correct value to display.\r
        *
        **Note:** neither of these outputs will be able to change yet. Don't worry,
        we'll be taking care of that in coming exercises!\r
        \r
      U3 - Arrays - favThings giveIDs_markdown_instruction: |-
        # Getting Started: Creating
        IDs\r
        \r
        To get your application off the ground we've provided **the user
        interface elements that you will use in your application**. Unfortunately
        they all currently have **default IDs** which don't reflect how the elements
        will be used.\r
        \r
        # Do This:\r
        \r
        * **Create a descriptive and meaningful
        ID** for each element in your app.
      U3 - Arrays - favThings keepPlaying_markdown_instruction: |-
        # Keeping Going!\r
        \r
        Your
        app should now be fully functional - nice job! There are of course plenty
        of new pieces of functionality to add. If you have time feel free to make
        any improvements you wish. Here are some ideas:\r
        \r
        * Allow the user to
        **append items** rather than add them at the current location.\r
        * Give the
        user the ability to **remove** the item at the current index. This can be
        a little tricky if you **remove the item at the end of the list** so see if
        you can account for that.\r
        * Only add words **if they are not blank**.\r
        *
        **Improve the appearance** of the app.
      U3 - Arrays - favThings template_markdown_instruction: |-
        # Getting Started:
        Creating IDs\r
        \r
        To get your application off the ground we've provided
        **the user interface elements that you will use in your application**. Unfortunately
        they all currently have **default IDs** which don't reflect how the elements
        will be used.\r
        \r
        # Do This\r
        \r
        * **Create a descriptive and meaningful**
        for each element in your app.
      U3 - Arrays - globalVariableIndex_markdown_instruction: |-
        # Getting Started:
        Creating IDs\r
        \r
        To get your application off the ground we've provided
        **the user interface elements that you will use in your application**. Unfortunately
        they all currently have **default IDs** which don't reflect how the elements
        will be used.\r
        \r
        # Do This\r
        \r
        * **Create a descriptive and meaningful**
        for each element in your app.
      U3 - Arrays - indexPractice_markdown_instruction: |
        # Index Practice\r
        \r
        It
        will take some practice to get comfortable using array indexes. We'll do
        a couple of exercises to build your confidence.\r
        \r
        # Do This:\r
        \r
        <img
        src="https://images.code.org/4d52429f1d6f8e7812e14d73e2a89c45-image-1447366245418.08.51
        PM.png" style="width: 150px; float: right">\r
        \r
        **Starter code** has
        been provided that creates an array called `myNumbers`.\r
        \r
        * Use `console.log`
        and array indexes to write the contents of `myNumbers` to the screen in order,
        as shown to the right. Your commands should be of the form `console.log(myNumbers[index])`.\r
        \r
      U3 - Arrays - insertingItems_markdown_instruction: |-
        # Inserting Items: Array
        Indexes\r
        \r
        If you want to add elements in the middle of your array you
        can use `insertItem` to specify an **index** at which an item should be inserted.\r
        \r
        ![](https://images.code.org/46815edd373b9fe51c4efcf145474ecc-image-1447252675635.37.24
        AM.png)\r
        \r
        Just like `appendItem`, `insertItem` creates a new location
        in the array. However `insertItem` allows you to insert an item anywhere in
        the array, not just at the end, and it shifts all elements at or after its
        index one location over.\r
        \r
        # Do This:\r
        \r
        * **Read the documentation**
        for `insertItem`.\r
        * **Starter code** has been provided which appends some
        strings to an array, but right now they don't form a complete sentence.\r
        *
        Use `insertItem` to **individually insert strings to your array** to form
        a complete sentence.\r
        * Use `console.log` to confirm you succesfully created
        your sentence.\r
        \r
        ![](https://images.code.org/a77efe777082d387f64c4761d890c560-image-1447254451590.06.59
        AM.png)
      U3 - Arrays - insertionErrors_markdown_instruction: "# Out of Bounds\\r\n\\r\nIn\nmany
        languages trying to access indexes of an array that don't exist will\ncreate
        an error. **JavaScript allows for some strange behavior** with arrays\nthat
        it's useful to see, even though **you will likely never use this functionality**.\\r\n\\r\n**Warning:**\nsome
        of this code will generate errors or work in unexpected ways. Don't\nspend
        a long time trying to understand weird results. The point to take from\nthis
        is **referencing indexes that are out of bounds will almost never do\nwhat
        you intend**, and we'll be learning ways to avoid this as we move forward.\\r\n\\r\n#\nDo
        This:\\r\n\\r\n* **Starter code** has been provided which creates an array\nwith
        three elements.\\r\n* Uncomment the **first command that references indexes\nthat
        are out of bounds** and run the code.\\r\n* **Examine the output** and\ntry
        to understand what is happening.\\r\n* Reset and then **recomment** the\nline
        after you've used it. \\r\n* **Repeat the process for all the lines.**\\r\n\\r\n**Note:**\nWe
        have used a different style of comment in this program. `/* long block\ncomment
        */` is used when you want to write a multiple-line comment. "
      U3 - Arrays - introIndex_markdown_instruction: |-
        # Accessing Items in an Array\r
        \r
        An
        array is comprised of many locations. You can individually set or reference
        the information at each location of your array just like a variable. To tell
        your locations apart each has a separate number, or **index**, that identifies
        it.\r
        \r
        Arrays in JavaScript are **zero-indexed** which means the first
        index is 0. This is similar to binary number systems which begin counting
        at 0. For example an array of 10 items would have indexes 0-9. As a result
        **the last index is always one less than the length of the array**.\r
        \r
        **Accessing
        Array Items by Index:** If you know the index of the item you wish to access
        you can reference it using square brackets `list[index]` . The example below
        prints the value of the 4th element in the array.  \r
        \r
        ![](https://images.code.org/8b2da597fccaeeafb30b04991074cd8b-image-1447365422277.56.45
        PM.png)\r
        \r
        # Do This:\r
        \r
        **Starter code** has been provided which
        creates an array of the numbers 1 through 10\r
        \r
        * Use `console.log` to
        display the first item in your array.\r
        * Use `console.log` to display the
        last item  in your array.\r
        * Use `console.log` to display the number 5 from
        the array.
      U3 - Arrays - length_markdown_instruction: |-
        # *Array.length*\r
        \r
        As we saw
        in the last exercise, there are many strange behaviors that can result from
        referencing array indexes that are less than 0 or greater than the highest
        index in your array. **If want to avoid these kinds of errors then it is useful
        to know how long your array is,** especially since we've seen that arrays
        can grow and shrink during the course of our program.\r
        \r
        ![](https://images.code.org/419a610bedaaf709d400c51a6399f482-image-1447263621427.40.15
        AM.png)\r
        \r
        You can always check the current length of your array using
        the command `list.length` where "list" is the name of your array. It evaluates
        to a number indicating how many items are in your array.\r
        \r
        # Do This:\r
        \r
        *
        **Starter code** has been provided which creates several long arrays.\r
        *
        **Use `list.length` and `console.log`** to determine how many items are in
        each array. An example of the output is below.\r
        \r
        <img src="https://images.code.org/f309b94e58f252599de709dd568441fd-image-1447690174179.08.29
        AM.png" style="width: 250px">
      U3 - Arrays - lengthMinus1_markdown_instruction: |
        # Expressions as Indexes:
        *list.length - 1*\r
        \r
        We have been accessing information in an array by
        using numbers, but we can actually use **any expression that evaluates to
        a number as an index in our array**. The first example of this we will explore
        is accessing the last item in our array.\r
        \r
        Arrays are **zero-indexed**,
        which means that the first index is 0. Therefore an array with a length of
        3 will have indexes 0, 1, and 2. Notice that **the last index is 1 less than
        the length**. This will always be the case, and so we can use this expression
        to access the last element in any array:\r
        \r
        ![](https://images.code.org/4b9d62e451188ea00a58102110e447f6-image-1447267224677.28.31
        PM.png)\r
        \r
        # Do This:\r
        \r
        * **Starter code** has been provided that
        which creates several arrays.\r
        * Use the syntax provided above and `console.log`
        to display the final item in each list.\r
      U3 - Arrays - remove_markdown_instruction: |-
        # Removing Items\r
        \r
        Sometimes
        we want to remove something from an array. In order to do so you'll need
        to specify the **index** of the item that should be removed.\r
        \r
        <img src="https://images.code.org/350e3dfe234b1ce1e47e11bc0629b47d-image-1447272428285.06.40
        PM.png" style="width: 250px">\r
        \r
        **Note:** `removeItem` removes the
        location in the array at the index provided. As a result **the array is one
        location shorter and all the indexes after the index provided will have their
        index decreased by one**.\r
        \r
        # Do This:\r
        \r
        * **Read the documentation**
        for `removeItem`.\r
        * **Starter code** has been provided which creates an
        array of strings.\r
        * Use `removeItem` to **individually remove all the "REMOVE"
        strings in your array** to form a complete sentence. \r
        * Use `console.log`
        to confirm you succesfully created your sentence.\r
        \r
        **Note:** Keep an
        eye out; your indexes will shift as you remove items.\r
        \r
        ![](https://images.code.org/5ba2247cafcfcb5d8be80db32126105e-image-1447273315312.21.17
        PM.png)
      U3 - Arrays - stringsInArrays_markdown_instruction: |-
        # Arrays Can Hold Strings\r
        \r
        So
        far we have been using arrays to hold numbers, but each location in an array
        could hold a string instead.\r
        \r
        ![](https://images.code.org/5088def6c9aa8c114fc415bf25d83511-image-1447195709238.48.13
        PM.png)\r
        \r
        **Note:** It is possible for an array to hold both strings
        and numbers, but **typically you will only want your arrays to hold one type
        of data**.\r
        \r
        # Do This:\r
        \r
        * Create an **empty array**.\r
        * Use
        `appendItem` to **individually add strings to your array**, forming a sentence
        of at least **5 words**.\r
        * Use `console.log` to confirm you succesfully
        created your sentence.\r
        \r
        ![](https://images.code.org/75fc0b55a44d02e2366c60b30aeb28d1-image-1447252397993.33.06
        AM.png)
      U3 - Basic Conditionals - 1_markdown_instruction: |-
        0-  True and False statement\r
        \r
        if
        ( 1 < 5) {\r
          console.log("Hello");\r
        }
      U3 - Basic Conditionals - 2_markdown_instruction: |-
        # Greater and Less Than\r
        In
        the last level we saw a simple if statement. If statements are just simple
        questions. The answer to questions in if statements are either True or False.
        This is just another place where we see binary in computer science. If the
        expressoin inside the if statement is true than the code inside the brackets
        excutes. If its false then it won't execute.\r
        \r
        Below is an if statement.
        Can you change the expression to be true?\r
        \r
        **Remember:** A good trick
        for remembering how greater than and less than work is to think of it like
        a gator with its mouth open. The gator always wants to eat the bigger number.\r
        \r
        #
        Do This\r
        \r
        * Fix the expression inside the if statement to be true so
        the message will print
      U3 - Basic Conditionals - 3_markdown_instruction: |
        Adding a variable\r
        \r
        var
        x = 8;\r
        if( 3 < x){\r
         console.log(“Is this working?”)\r
        }\r
        \r
        its
        the same thing with a variable just the x stands for the 5!\r
      U3 - Basic Conditionals - 4_markdown_instruction: |
        User input\r
        \r
        var x
        = prompt(“Enter number”)\r
        if( 3 < x){\r
         console.log(“Bigger”)\r
        }\r
      U3 - Basic Conditionals - 5_markdown_instruction: |2-
         Random number\r
        var dice
        = randomNumber(1,6)\r
        if( 3 < dice){\r
         console.log(“Bigger”)\r
        }
      U3 - Canvas - 200dots_markdown_instruction: |
        # Loops on the Canvas\r
        \r
        To
        make things interesting, we're going to quickly add 200 dots to our canvas
        by using a `for` loop. **Locations on the canvas are relative to the top-left
        corner of the canvas, not the screen**. Therefore you will need to know the
        dimensions of your canvas in order to randomly place dots throughout it. You
        can find this information in Design Mode:\r
        \r
        ![](https://images.code.org/8e0c868a21f5c674efb6adef1040ec2b-image-1448040822360.33.29
        AM.png)\r
        \r
        # Do This:\r
        \r
        <img src="https://images.code.org/345b625e6954dc1ea2310c97aa08c59f-image-1448243004939.gif"
        style="float: right">\r
        * Add a **`for` loop that runs 200 times.**\r
        *
        Place the **`circle` command inside the loop** and **decrease the radius**
        (try 20).\r
        * **Use `randomNumber` to randomize the `x` and `y` values used
        to place your dots**. The ranges you select should be the width and height
        of your canvas.  \r
        * **COMMON MISTAKE ALERT:** If you test your code before
        setting the `x` and `y` values of the circle to random numbers, it will look
        like there's only one dot.  But really you will have just drawn 200 dots
        all at the same (x,&nbsp;y) position.\r
        \r
      U3 - Canvas - One Dot sprayPaint_markdown_instruction: |-
        # Making Spray Paint\r
        \r
        The
        next effect we would like to create is a "spray paint" effect. Instead of
        drawing a single dot for every location stored in `eventList`, we'll draw
        many small dots randomly placed around each location.\r
        \r
        We are going
        to start off just practicing **drawing a circle whose x and y locations use
        `offsetX` and `offsetY` with a small random value added**. This makes the
        line of code to draw the circle kind of long, but hopefully it's easy to
        understand if you read it carefully.\r
        \r
        ![](https://images.code.org/c0c0a9df4215be16953a26ec102b2f9c-image-1448294147046.png)\r
        \r
        #
        Do This:\r
        \r
        * **Set the style of another button** in Design Mode, give
        a label like "Spray Paint," give it a descriptive ID, and attach a click
        event handler to it.\r
        * **Copy the code from the "Original"** button into
        the event handler for spray paint.\r
        * Change the code for `circle` so that
        it will **draw a dot whose x and y locations use `offsetX` and `offsetY` with
        a small random value added. **\r
        \r
        ![](https://images.code.org/c0c0a9df4215be16953a26ec102b2f9c-image-1448294147046.png)\r
        \r
        *
        **Run your app** to make sure it is drawing small dots close to the original
        position. Look at the example below.\r
        \r
        ![](https://images.code.org/d6279085a5c6689dd5c745a0d0e28136-image-1448386996780.gif)
      U3 - Canvas - appendToArray_markdown_instruction: |-
        # Store Your Dots\r
        \r
        Now
        we're going to get into the core of the activity. We will be **creating a
        record of every dot your user draws**.\r
        \r
        To do this, we will append *every*
        `event` parameter to an array as events are generated. When we store every
        mouse location in an array, we can make many interesting effects and redraw
        the image in different ways, by looping over the array. First let's just
        make sure we can capture them all.\r
        \r
        # Do This:\r
        \r
        * Create a new
        array outside the event handler function: `var eventList = []`.\r
        \r
        * In
        your event handler, before you call the `circle` command, use `appendItem`
        to add the `event` parameter to `eventList`.\r
        ![](https://images.code.org/98f98c0895fafa87b8f6617e5b4629af-image-1448080702748.gif)\r
        \r
        *
        **Run the program** and draw some dots.\r
        \r
        * In the Debug Console type
        `console.log(eventList)` and inspect the contents. You should have a record
        of every event parameter used to draw a dot! (It might be a lot.)\r
        ![](https://images.code.org/425bdde5f2d87b34c037b533600f19b4-image-1448080857409.gif)
      U3 - Canvas - changeToMouseMove_markdown_instruction: |-
        # Drawing on *mousemove*\r
        \r
        Currently
        the user can click to add dots, but we want **to place dots wherever the user
        moves the mouse on the canvas**.\r
        \r
        To place dots whenever the mouse is
        moved, we'll be **changing the event type from `click` to `mousemove`**.\r
        \r
        #
        Do This:\r
        <img src="https://images.code.org/960ac863ac908506724eeb9f11165672-image-1448246938599.gif"
        style="float: right">\r
        * Change the event type in your event handler **from
        `click` to `mousemove`**.\r
        * **Run your program** to confirm that dots are
        being drawn anywhere the user moves the mouse.\r
        \r
        **Your user is now able
        to draw anywhere they want on the screen!**
      U3 - Canvas - clickToAdd_markdown_instruction: |-
        # Click to Add Dots\r
        \r
        Loops
        are one way of quickly adding dots to our canvas, but now we're going to
        change our app so that the user can decide when and how many dots to add.
        The canvas is a UI element, so **you can attach event handlers to it just
        like you would any other element**. We're going to move the circle command
        inside of a click event handler so that the user can click to add individual
        dots.\r
        \r
        ![](https://images.code.org/ecd25d3ff2bb50f0555ebd012e5c3b88-image-1448078111902.gif)\r
        \r
        #
        Do This:\r
        \r
        * **Add an `onEvent` handler**; set its ID to your canvas
        ID.\r
        * **Move the `circle` command out of your `for` loop and into your
        new event handler**.\r
        * **Remove the `for` loop from your program.**\r
        *
        **Run your program** and confirm that a single dot is added everytime a user
        clicks your canvas.\r
        \r
        ![](https://images.code.org/0064f8ac406a9f09dc742c81d8510f16-image-1448244621879.gif)
      U3 - Canvas - delete_markdown_instruction: |
        # Delete Button\r
        \r
        We are finally
        going to use those buttons! Each one will trigger an event handler that **processes
        the array `eventList` to create a visual effect** with the mouse data you
        have stored. **The first effect we are going to create is delete.**\r
        \r
        You
        may want to provide your user with a way to start over with their drawing.
        In order to do this, you will need to *both* **clear the canvas** and **delete
        all items from `eventList`.**  The easiest way to delete everything from the
        list is to simply set the value of `eventList` to be a new empty list.\r
        \r
        #
        Do This:\r
        \r
        <img src="https://images.code.org/f8fca0d889ae9ddc3ac9b33ba27fadce-image-1448311933871.gif"
        style="width: 200px; float: right">\r
        \r
        * In Design Mode, set the styling
        and text of one button to indicate it's the "delete" or "start over"
        button. Give your button **a descriptive ID**.\r
        \r
        * **Add a click event
        handler** to your button.\r
        \r
        * Within the event handler call `clearCanvas`.\r
        \r
        *
        Set `eventList` to the empty array (i.e., `eventList = []`).\r
        \r
        **Test
        your program** to make sure that starting over works the way it should.  \r
      U3 - Canvas - draw at click point_markdown_instruction: |-
        # Drawing Dots at
        Click\r
        \r
        Currently the user can click to add dots, but they're drawn
        at random locations around the canvas. We're going to use information stored
        in the `event` parameter of the event handler function **to place dots wherever
        the user clicks the mouse on the canvas**.\r
        \r
        The event parameter has
        two critical pieces of information we'll want, which are `event.offsetX`
        and `event.offsetY`. These hold **the location (relative to the top left corner
        of the canvas) that was clicked**. \r
        \r
        # Do This:\r
        \r
        <img src="https://images.code.org/1c6109cfc1b02c3ba737519d3f01d1b4-image-1448301532145.gif"
        style="width: 200px; float: right">\r
        \r
        * **Remove (or comment out) the
        `console.log` statement**.\r
        * Replace the `x` and `y` parameters of the
        `circle` command with `event.offsetX` and `event.offsetY`.\r
        * **Run your
        program** to confirm that dots are being drawn anywhere the user clicks the
        mouse.
      U3 - Canvas - freePlay_markdown_instruction: |-
        # Create Your Own Effect!\r
        \r
        You've
        just seen several ways that we can process our array `eventList` in order
        to create different effects. Now it's time to make your own! **Extend the
        functionality of one of the effects you just created, or create an entirely
        new one**. What else could you do with the information you've stored in your
        array? How else might you combine the programming tools you've developed?\r
        \r
        #
        Do This:\r
        \r
        * **Extend the functionality of one of the effects, or create
        an entirely new one of your own!**
      U3 - Canvas - introCanvas_markdown_instruction: |-
        # Introducing Canvas\r
        \r
        Today
        we are going to be building a drawing app around **a new UI element called
        the canvas**.![](https://images.code.org/26713ddcc9477e64c347c228d68cac0a-image-1447994134674.35.25
        PM.png)\r
        \r
        ![](https://images.code.org/044ad7db1cb4101f54302bd4013d1cc2-image-1448241882228.gif)\r
        \r
        **A
        canvas is simply a transparent rectangle on which you can draw basic shapes**
        like lines, circles, and rectangles. In fact, at first you might feel like
        we're going to end this unit in the way we started it, making turtle drawings.
        Don't worry, we'll quickly move into new and exciting things we can do with
        this new UI element.\r
        \r
        # Do This:\r
        <img src="https://images.code.org/3874f5e430a6290544466b2037490ae4-image-1448242142421.28.33
        PM.png" style="float: right">\r
        * **Starter code** is provided which places
        buttons on the bottom of your screen. **Ignore these for now; we'll be using
        them later**.\r
        * **In Design Mode, drag a canvas element into the empty
        space at the top of your app**, resize it, and give it a descriptive ID.\r
        *
        **Call `setActiveCanvas` with the ID you assigned to your canvas**, which
        makes it responsive to canvas commands.\r
        * **Add a giant circle to the canvas.**
        Use the `circle` command. Make its radius large enough that it goes off the
        edge of your canvas.\r
        \r
        Your code will look something like this:\r
        \r
        ![](https://images.code.org/f0cc22a1de686db72ebce90c720ae6e4-image-1447994225253.36.59
        PM.png)
      U3 - Canvas - movementFunction fix Orig_markdown_instruction: |-
        # Fix the "Original"
        Button\r
        \r
        Our "Original" button is now slightly broken because the effect
        it renders doesn't match our new free-form drawing which takes the movement
        of the mouse into account - it just draws fixed-size cricles.\r
        \r
        Let's
        fix the "Original" button.\r
        \r
        # Do This:\r
        \r
        In the event handler
        function for the "Original" button:\r
        \r
        * Change the value used for the
        radius from a fixed value to the same thing calculated for the free-form drawing.
        Since you wrote a function to do this calculation, it should be easy to call
        it from this code as well!\r
        * The **slight difference will be that you will
        be looping over the array of events.**  So the line of code that draws the
        circle might look like the one below. This line of code is certainly a mouthful,
        but it's basically the same as the line of code in your `mousemove` event
        handler; **it just references the event in the list instead.** <br><img src="https://images.code.org/dbb4cd9b98eba70aa2919a93544c1e03-image-1448314845862.40.21
        PM.png" style="width: 600px">\r
        * **Test your program** to confirm that
        clicking the "Original" button creates the same effect that occurs when
        doing free-form drawing.\r
        \r
        ![](https://images.code.org/4fcf033e87dc407d337941a7adc4766b-image-1448394246410.gif)
      U3 - Canvas - movementFunction_markdown_instruction: |-
        # Adjusting Circle Size\r
        \r
        Among
        the other pieces of information contained in each `event` parameter are the
        values `movementX` and `movementY`. These numbers tell us how far (in pixels)
        the mouse moved since the last mouse event was triggered, and can be used
        to measure the speed of the mouse. ** If the movement is large, the mouse
        is moving fast; if the movement is small, the mouse is moving slowly.**\r
        \r
        Let's
        use the mouse movement speed to make a cool effect. When we draw with a real
        pen or brush, the line usually gets thin when making quick strokes and is
        wider and darker when making slower ones. We can generate this effect by **using
        `movementX` and `movementY` to calculate the radius for the circle.**  Since
        this calculation might be a little tricky, a smart thing to do would be to
        **write a function** that takes `movementX` and `movementY` as parameters
        and **returns** a value that should be used as the radius.\r
        \r
        <img src="https://images.code.org/b9dc4c20d44af7b4e7725b71cd35fa2b-image-1448313734191.21.43
        PM.png" style="width: 350px; float: right; border: solid 1px black">\r
        \r
        There
        are several ways to do this. One possible way to write the function is provided
        on the right, which uses some arithmetic tricks. The function to the right
        is actually only three lines of code but is heavily commented to explain what
        it's doing. It makes use of a function called **`Math.abs` which returns
        the absolute value of a number.** Feel free to use this or another method
        of converting `movementX` and `movementY` into a radius.\r
        \r
        <details>
        <summary><strong>What is Absolute Value?</strong> [click to expand]</summary>\r
        `Math.abs`
        takes a number as input and returns the positive version of this number. \r
        \r
        In
        math, absolute value is often written with this | | symbol. So |10| is the
        absolute value of ten and |-10| is the absolute value of negative ten. Both
        evaluate to 10.\r
        \r
        In Javascript we use `Math.abs` instead of | |.  `Math.abs(-10)`
        and `Math.abs(10)` both evaluate to <strong>10</strong>.\r
        </details> <br>\r
        \r
        #
        Do This:\r
        \r
        * **Write a function like the one above** that accepts two
        parameters (one each for `movementX` and `movementY`) and returns a radius.
        A higher speed should lead to a smaller radius.\r
        * **Inside your `mousemove`
        event handler,** set the radius of the circle to the value returned by your
        function, where the function takes `event.movementX` and `event.movementY`
        as input.  For example, if using the function above, your code would be: <br>![](https://images.code.org/94a379336084954ba2ab27e80b17dee3-image-1448314255797.30.22
        PM.png)\r
        * Run your program and confirm that **when you draw, the speed
        of the mouse affects the radius of the dots**. The effect should look something
        like what's below \r
        \r
        ![](https://images.code.org/ee83d18f04e4d9d486428273b7321f9f-image-1448394071473.gif)
      U3 - Canvas - redrawOriginal_markdown_instruction: |-
        # Redraw Original\r
        \r
        If
        you were able to get that working and understand what you did, congratulations!
        That was some serious programming! If not, take a moment to go back and talk
        through the different components with a classmate. Most of the work we'll
        be doing for the rest of this lesson uses similar patterns, and you'll want
        to be comfortable with them as we add more complexity to our app.\r
        \r
        The
        first thing we are going to do is **create an "Original" button that will
        redraw the image with the same circle radius you used before**. The process
        will be nearly identical to how you added the "Random" button.\r
        \r
        In
        fact, the code to redraw the original is *exactly* the same, except instead
        of making the radius of the circle be random, it will just be the fixed value
        you used originally (probably radius 5 or so).\r
        \r
        ![](https://images.code.org/9238e313e8f635e2e6b31ad19d0fdc41-image-1448290929994.gif)\r
        \r
        #
        Do This:\r
        \r
        <img src="https://images.code.org/6cf1d46af7cd92cc1faf1501366e2e1a-image-1448312993714.gif"
        style="width: 200px; float: right">\r
        (**NOTE:** The instructions below
        are shown in the code animation above.)\r
        \r
        * Style a button, give it label
        like "Original," give it a meaningful ID, and add a "click" event handler.\r
        *
        Inside the event handler for your "Original" button...\r
        \t* Copy the code
        from the "Random" button event handler.\r
            * Paste it inside the event
        handler for the "Original" button.\r
        \t* Set the `radius` parameter to
        **whatever value you used when you originally drew dots**.\r
        * Test your
        program by drawing a figure and then hitting your "Randomize" button. Then
        hit the "Original" button. Your original drawing should appear.
      U3 - Canvas - redrawRandom_markdown_instruction: |-
        # Redraw Random - Part 1\r
        \r
        The
        next effect we are going to create is **"random."** We will be redrawing
        the image but with randomly sized dots.\r
        \r
        We'll be doing this in two
        steps. For now, all you need to do is **change the first button in the row
        to have the proper styling and attach a click event handler to it**. **In
        addition, clear the canvas from inside the event handler** so we are ready
        to redraw our new image.  We don't want to delete all the items from the
        array though, as we will use them to redraw. Once you've done that, move
        on to the next exercise where we'll write the actual code in our event handler.\r
        \r
        #
        Do This:\r
        \r
        <img src="https://images.code.org/0116a787b989df18b077cb4657a5d379-image-1448312365660.58.05
        PM.png" style="width: 200px; float: right">\r
        \r
        * In Design Mode, **pick
        a button to use for Random. Set the styling and text of the button**. The
        image below shows one possible option, but you can style it however you like.\r
        \r
        *
        Give your button **a descriptive ID**.\r
        \r
        * **Add a click event handler**
        to your button.\r
        \r
        * **Call `clearCanvas`** from inside the event handler
        so the canvas is ready for the redraw.
      U3 - Canvas - redrawRandom2_markdown_instruction: |-
        # Redraw Random - Part 2\r
        \r
        Now
        we're ready to write the code for our "Random" effect. To do this, we will
        be clearing the canvas and then processing the array `eventList` to redraw
        all the dots with a random radius. \r
        \r
        You already set up the clear canvas,
        so next we'll need to process our array in order to find out the event information
        for each dot. You'll need to create a `for` loop that iterates through every
        index in `eventList` (recall the `length` command). Within your loop, you
        will be drawing dots referencing items stored in the array. \r
        \r
        As you
        write this code, remember that **you can treat an individual element of an
        array exactly like the kind of data it stores**. Inside a `for` loop, the
        event at index `i` can be accessed with the notation `eventList[i]` and the
        `offsetX` of that event can be accessed with `eventList[i].offsetX`. Again,
        you are essentially treating the array element as if it were the data it contains.\r
        \r
        ![](https://images.code.org/8ce01658ab31ce5f05101e58e3413681-image-1448250618520.gif)\r
        \r
        #
        Do This:\r
        \r
        <img src="https://images.code.org/6e081911348f3c1b07d17f83bd402249-image-1448312722857.gif"
        style="width: 200px; float: right">\r
        \r
        (**NOTE:** Everything listed
        below is shown in code animation above.)\r
        \r
        **Inside the "Random" button
        event handler...**\r
        * **Add a `for` loop** that runs `i` from 0 up to `eventList.length`
        to process over the array.\r
        * **Add a `circle`** command inside your loop.\r
        *
        **Set the x and y parameters** of the `circle` to `eventList[i].offsetX` and
        `eventList[i].offsetY`, respectively.\r
        * **Set the `radius` parameter**
        to some `randomNumber`. Pick any range you like. You can always change it
        later.\r
        * **Test your program** by drawing a figure and then hitting your
        "Randomize" button. It should be the same drawing, but now with randomly
        sized dots!
      U3 - Canvas - shiftKey_markdown_instruction: |
        # Draw When a Key is Pressed\r
        \r
        This
        app now lets the user draw, but they have no control of whether the pen is
        up or down. Let's give the user the ability to **choose when to put down
        the pen**. We won't even need to add a new event handler to our app! \r
        \r
        You
        may have noticed that the **`event` parameter includes information about whether
        certain keys were pressed when the event fired**. They are stored in variables
        with names like `shiftKey` or `altKey` and are stored as boolean values (true
        / false). We are going to use the `shiftKey` variable to decide when we should
        draw circles. \r
        \r
        # Do This:\r
        <img src="https://images.code.org/1a4b8f12645e5e88dee96d5542933c84-image-1448248202626.gif"
        style="float:right">\r
        \r
        * **Add an `if` statement inside your event
        handler function** where the condition is based on the value stored in `event.shiftKey`:
        **If `shiftKey` is true, then draw the circle.** <img src="https://images.code.org/a542766e8e52fed5ca992f2434ace086-image-1448307484936.37.32
        PM.png" width="200">\r
        \r
        * You might want to **decrease the radius of
        your circle** (for example to 5).\r
        \r
        * **Run the program and confirm that
        dots are only drawn when the shift key is pressed.**\r
        \t* The effect should
        be that the user can pick up and put down the pen to draw.\r
        \t* Hold the
        shift key down and move the mouse to draw.\r
        \t* Release the shift key to
        stop drawing.\r
        \r
        (**NOTE:** If you wish, use `console.log` to display
        the values in `event` again. You'll see `event.shiftKey` is one of the values
        stored.)\r
      U3 - Canvas - sketch_markdown_instruction: |-
        # Relative Indexes\r
        \r
        When
        looping over an array, we use a counter variable (typically `i`) to keep track
        of which index we're at. We can then access the contents at each index with
        the syntax `list[i]`.\r
        \r
        If we want, however, we could access the contents
        of the next element as well, since its index is just one greater. For example,
        if we are currently focused on the element at index `i`, then `list[i+1]`
        gives us access to the next element in the array. In other words, you can
        **reference indexes relative to your counter variable**.\r
        \r
        ![](https://images.code.org/3bb5dfce60951040172bfe08d98a8750-image-1448393281688.png)\r
        \r
        We
        are going to use relative indexing to create our final effect, which will
        look sort of like an etching of the image. The idea is simple:  **for every
        (x,&nbsp;y) location in the event list, draw a straight line between that
        location and the location stored 10 spots further down the array.** You will
        use the **`line` command** to draw a line connecting these points.\r
        \r
        #
        Do This:\r
        \r
        * **Read the documentation for `line`**.\r
        * **Set the style
        of the final button** in Design Mode, give a label like "Etch," give it
        a descriptive ID, and attach a click event handler to it.\r
        * **Call `clearCanvas`**
        to clear the screen.\r
        * Create a `for` loop that counts from **0 to `eventList.length
        - 10`**. \r
        \t* Why do you think we're not counting over the entire array?\r
        *
        Use `line` to draw a line between the (x,&nbsp;y) locations of `eventList[i]`
        and `eventList[i+10]`.  The full line of code will be another big one: ![](https://images.code.org/5de2c40b56042069379ff20ce5d10cab-image-1448393948598.38.49
        PM.png)\r
        * **Use `setStrokeColor` and/or `setStrokeWidth` inside the event
        handler** to make the lines visible; otherwise, they will be transparent,
        since we set the stroke color to transparent at the beginning of the program.\r
        *
        **Run your app** and confirm that your new button creates a sketch effect,
        as shown below.\r
        \r
        ![](https://images.code.org/c06c268a4757e8838435e576a676a0a2-image-1448395181441.gif)
      U3 - Canvas - sprayPaint_markdown_instruction: |-
        # Making Spray Paint with Nested
        Loops\r
        \r
        In order to make "Spray Paint" look more real you will need
        to draw multiple dots randomly placed around the original x and y locations.
        In order to do this, you will place one `for` loop inside of another, also
        known as a **nested loop**. You already have the main loop which visits every
        index in `eventList`. The inner loop should **draw 5 circles whose x and y
        locations use `offsetX` and `offsetY` with a small random value added**.   \r
        \r
        #
        Nested Loops\r
        \r
        <img src="https://images.code.org/15d7590ed9d4c07a40f22da4decc396c-image-1448153719856.54.36
        PM.png" width= 300px ; style="float: right">\r
        **When nesting loops, it
        is important that you use different variables to count your iterations**.
        Look at the example at right.  These nested loops effectively say: **"for
        every possible value in `eventList.length`, run a loop 5 times".  **\r
        \r
        Since
        `i` is used as the counter variable in the outer loop, we need to use a *different
        counter variable for the inner `for` loop*, or things will go haywire. Why?
        **If both loops used `i` as a counter variable, the inner loop would keep
        changing `i` and the outer loop wouldn't count properly.** The example uses
        `j` as the inner loop variable, but you could use anything that's *not* `i`.\r
        \r
        <img
        src="https://images.code.org/b5184430a48ac55d8f6fe7280c983186-image-1448387927473.gif"
        style="width: 450px">\r
        \r
        # Do This:\r
        \r
        <img src="https://images.code.org/290adbb84a51b89ca27414746d3a4a93-image-1448395072342.gif"
        style="width: 200px; float: right">\r
        \r
        (**Note:** Steps shown in animation
        above.)\r
        \r
        * **Add a `for` loop inside the existing `for` loop** in the
        spray paint event handler. \r
        * **Change the counter variable** to something
        other than `i` for the inner `for` loop.\r
        * **Change the boolean condition**
        so the inner loop will run **5 times.**\r
        * **Move the circle** code inside
        both `for` loops.\r
        * **Run your app** and confirm that your new button creates
        a spray paint effect, as shown below.
      U3 - Canvas - transparentDots_markdown_instruction: |-
        # Changing Colors in Canvas\r
        \r
        We
        would like to make our dots transparent so that we can see when they are drawn
        on top of each other. To set the color and transparency of shapes you draw
        on your canvas, you need to change both the **stroke** or outline color and
        the **fill** color. The functions `setStrokeColor` and `setFillColor` can
        be used to set those colors. \r
        \r
        These functions **accept strings of the
        form `"rgba(100, 200, 100, 0.5)"` as input**. The first three values in
        the string are RGB values and the last value is the transparency, as represented
        by a decimal number between 0 and 1.0.  All together it looks like this:\r
        \r
        ![](https://images.code.org/5f5692259df092ce4e000cbdf5a7df1b-image-1448077147778.png)\r
        <img
        src="https://images.code.org/e833a63e31dca7d5e8357c0b856dc7cc-image-1448244247180.gif"
        style="float: right; width: 150px">\r
        \r
        # Do This:\r
        \r
        **Before the
        loop: ** \r
        * **Add a `setStrokeColor` command** to set the stroke to **fully
        transparent**.\r
        * **Add a `setFillColor` command** to set your dots to full
        black and mostly transparent **(try a value of 0.2)**.
      U3 - Canvas - usingOffsetXY_markdown_instruction: |
        # The Event Parameter for
        Mouse Events\r
        \r
        We'd like to change the app so that when the user clicks
        on the canvas we draw a circle right where they clicked. To do that, we need
        to learn more about the **parameter passed by our event handler function,
        which by default is called `event`**.\r
        \r
        Recall that when we wanted to
        know what key the user pressed on a `keyPress` event, we checked the value
        stored in `event.key`. **The event parameter actually stores a great deal
        more information about each event**. \r
        \r
        When using the mouse, the event
        parameter carries information like the location of the mouse, how fast it's
        moving, and some other things as well. \r
        \r
        Let's get acquainted with
        the event parameter and what we can find out about the mouse.\r
        \r
        # Do
        This:\r
        \r
        * Add a `console.log` command inside the function of your event
        handler. Use it to display the `event` parameter.\r
        * Run your program and
        click your canvas. **The full contents of the `event` parameter should be
        displayed in the console**. \r
        * **Which values do you think hold the x and
        y coordinates**?  What else is there?\r
        * We won't use all of these, but
        it's interesting to see just how much is available.\r
        * Once you have experimented
        a little, move to the next level.\r
        ![](https://images.code.org/a6875e27019cb938a9576f0485648ca9-image-1448041792987.49.30
        AM.png)\r
      U3 - Conditional Basics - 6_markdown_instruction: |-
        # What happens after an
        *if* ?\r
        \r
        You may have noticed that our flowchart for our game so far
        only does something if the condition is true. What happens after the `if`
        statement? Let's find out.\r
        \r
        <img src="https://images.code.org/90b7a527091704a6ab4612b9f84db305-image-1446234882661.png"
        style="width: 200px">\r
        \r
        # Do This:\r
        \r
        * **Add a `setText` after
        the `if` statement** to "Nope. Guess again."\r
        \r
        <img src="https://images.code.org/f5c5de1b77a9caf16027e65ed24f91ec-image-1446234785600.gif"
        style="width: 450px">\r
        \r
        * **Run the program** a couple times to **look
        for a bug**. We will fix this on the next level.
      U3 - Conditionals - Combine AND OR Simple_markdown_instruction: |
        # Combining
        AND and OR\r
        \r
        You can express more complex conditions by combining **AND**
        and **OR** in one statement.  Here is the example from the previous page which
        you can use as a reference. This statement will evaluate to **true** if the
        day is Tuesday or Thursday AND their age is 15 or 16.\r
        \r
        ![](https://images.code.org/3f3aba7828abd88fdbd90eda60611bd3-image-1448062956405.06.36.png)\r
        \r
        #  Do
        This:\r
        We've provided you with starting code that prompts the user to enter
        a **day** and their **age** and stores the result in variables.\r
        \r
        **Add
        an `if` statement that uses both AND and OR operators**\r
        \r
         * The app
        should write "Sleep in!" if it's a weekend and the user is a teenager.\r

        * Otherwise it should write "Uh oh. Have to wake up."\r
         \r
        \r
        Try it
        out!\r
      U3 - Conditionals - Combine AND OR and NOT_markdown_instruction: |-
        # Combining
        AND and OR and NOT\r
        \r
        You can stick a NOT (`!`) in front of any boolean
        expression to invert its result. This opens the door to express the same logical
        statements in different ways.  \r
        \r
        For example, let's say you want to
        determine if a person, based on his or her age (under 12 or over 65) gets
        to pay a reduced price for a movie ticket.  You might express that like this:\r
        \r
        ```\r
        //
        If your age is less than 12 or greater than 65\r
        if( (age < 12) || (age >
        65) ){\r
        \twrite("You qualify for a reduced price!");\r
        }\r
        ```\r
        \r
        But
        you might also figure out a way to determine if a person gets a reduced price
        ticket by determining if his or her age is between 12 and 65 (`(age >= 12)
        && (age <= 65)`) and then taking the inverse of that.  So using the NOT operator
        this would work as well:\r
        \r
        ```\r
        // If your age is NOT between 12 and
        65\r
        if( !( (age >= 12) && (age <= 65) ) ){\r
        \twrite("You qualify for
        a reduced price!");\r
        }\r
        ```\r
        \r
        **Why use one over the other?** Personal
        preference.  Use the one that makes the most sense to you, but it should be
        a clear expression of what you are trying to say.  \r
        \r
        \r
        # Do This:\r
        We've
        provided you with starting code that prompts the user to enter a **day** and
        their **age** and store it in variables.\r
        \r
        **Add an `if` statement that
        uses both AND and OR operators**\r
        \r
         * The app should write "Time for
        school!" if it's a weekday and the user is under 18.\r
         \t* Hint: one way
        to say that it's a weekday is to say that it's NOT a weekend.\r
         * Otherwise,
        if it's a weekday and the user is 18 or older, it should write "Time to
        go to work!"\r
         * Otherwise, it should write "Time to relax for the weekend!"\r

        \r
         \r
        **WARNING** logic can get tricky sometimes.  Make sure to test your
        program with inputs that cover every possibility. There are 4 basic cases
        to test for:\r
        \r
         * It is a weekday and age is under 18\r
         * It is a weekday
        and age is not under 18\r
         * It's not a weekday and age is under 18\r

        * It's not a weekday and age is not under 18\r
        \r
        Try it out!
      U3 - Conditionals - Combine AND and OR_markdown_instruction: |-
        # Combining AND
        and OR and NOT\r
        \r
        You can stick a NOT (`!`) in front of any boolean expression
        to invert it's truthiness.  This is useful if you want to express the inverse
        of a more complex expression.  This opens the door to express the same logical
        statments in different ways.  \r
        \r
        For example, let's say you want to
        determine if a person, based on their age (under 12 or over 65) gets to pay
        a reduced price for a movie ticket.  You might express that like this:\r
        \r
        ```\r
        if(
        (age < 12) || (age > 65) ){\r
        \twrite("You qualify for a reduced price!");\r
        }\r
        ```\r
        \r
        But
        you might also figure out a way to determine if the age is between 12 and
        65 (`(age > 5) && (age < 65)`) and then take the inverse of that.  So using
        the NOT operator this would work as well:\r
        \r
        ```\r
        if( !( (age > 5) &&
        (age < 18) ) ){\r
        \twrite("You qualify for a reduced price!");\r
        }\r
        ```\r
        \r
        **Why
        use one over the other?** Personal preference.  Use the one that makes the
        most sense to you, but it should be a clear expression of what you are trying
        to say.  \r
        \r
        \r
        # Logic Challenge! Do This\r
        We've provided you with
        starting code that prompts the user to enter a **day** and their **age** and
        store it in variables.\r
        \r
        **Add an if statement that uses both AND and
        OR operators**\r
        \r
         * The app should write "Time for school!" if it's
        a weekday and the user is under 18.\r
         \t* Hint: one way to say that it's
        a weekday is to say that it's NOT a weekend.\r
         * Otherwise it should write
        "Time to go to work!"\r
         \r
         \r
        **WARNING** logic can get tricky sometimes.  Make
        sure to test your program with inputs that cover every possibility. There
        are 4 basic cases to test for:\r
        \r
         * It is a weekday and age is under
        18\r
         * It is a weekday and age is not under 18\r
         * It's not a weekday
        and age is under 18\r
         * It's not a weekday and age is not under 18\r
        \r
        Try
        it out!
      U3 - Conditionals - Simple AND_markdown_instruction: |
        # AND Operator\r
        \r
        <img
        src="https://images.code.org/c1ec7743b3c8a888d76380f789263851-image-1446155863558.57.24
        PM.png" style="width: 100px; float: right">\r
        \r
        Again you will see the
        JavaScript boolean operators AND (`&&`)  and OR (`||`) in code toolbox. You
        can drag them out or simply type them.\r
        \r
        Let's now try out using an
        **AND** operator. As a reminder: **if both statements are true** then AND
        evaluates to **true**.  **If either (or both) are false** the AND operator
        will evaluate to **false**.\r
        \r
        <img src="https://images.code.org/4a461db916ded2acccfcdb9a75ef8838-image-1446483668310.png"
        style="width: 250px; float: right">\r
        \r
        # Do This:\r
        We've provided
        you with starting code that prompts the user to enter their **age** and stores
        it in a variable.\r
        \r
        **Add an `if` statement that uses an AND operator
        (`&&`)**\r
        \r
         * The app should write "You are a teenager." if the age
        is between 13 and 19.\r
         * Otherwise it should write "You are not a teenager."\r
      U3 - Conditionals - Simple OR_markdown_instruction: |-
        # OR Operator\r
        \r
        <img
        src="https://images.code.org/c1ec7743b3c8a888d76380f789263851-image-1446155863558.57.24
        PM.png" style="width: 100px; float: right">\r
        \r
        You will now see the
        JavaScript boolean operators AND (`&&`)  and OR (`||`) in code toolbox. You
        can drag them out or simply type them.\r
        \r
        Let's try OR right now.  As
        a reminder: the OR operator will evaluate to true if *either or both* statements
        are true. If both are false, the OR operator will evaluate to false. \r
        \r
        <img
        src="https://images.code.org/48d59f73e701d452dd74ae304db59d93-image-1446482464792.png"
        style="width: 200px; float:right"> \r
        \r
        \r
        # Do This:\r
        We've provided
        you with starting code that prompts the user to enter a day of the week and
        stores it in a variable.\r
        \r
        **Add an `if` statement that uses an OR (`||`)**
        \r
        \r
         * The program should write **"It's the weekend!"** if the day
        entered by the user is a weekend day.  \r
         * Otherwise it should write **"Can't
        wait for the weekend to get here."**
      U3 - Conditionals - intoOr_markdown_instruction: |-
        # OR Operator\r
        \r
        <img
        src="https://images.code.org/c1ec7743b3c8a888d76380f789263851-image-1446155863558.57.24
        PM.png" style="width: 100px; float: right">\r
        \r
        Up till now we have
        seen the boolean operators ==, >, and <. There are a couple more boolean operators
        that are very useful to know about. AND(`&&`)  and OR (`||`). Let's take
        a look at OR.\r
        \r
        OR allows you to check multiple boolean expressions together.\r
        \r
        <img
        src="https://images.code.org/df380925c0c598f06a5192ff2cfc8401-image-1446156668504.08.03
        PM.png" style="width: 100px; float:right"> \r
        \r
        If either or both statements
        are true, the OR operator will evaluate to true. If both are false, the OR
        operator will evaluate to false.  \r
        \r
        # Do This\r
        \r
        * **Run the code**
        to see what it does.\r
        \r
        * **Add another conditional that check if color
        is purple or number is greater than 2**\r
        \r
        * **Add another conditional
        that check if direction is left or animal is zebra or number is 4**
      U3 - Conditionals - introAND_markdown_instruction: |-
        # OR Operator\r
        \r
        <img
        src="https://images.code.org/c1ec7743b3c8a888d76380f789263851-image-1446155863558.57.24
        PM.png" style="width: 100px; float: right">\r
        \r
        Up till now we have
        seen the boolean operators ==, >, and <. There are a couple more boolean operators
        that are very useful to know about. AND(`&&`)  and OR (`||`). Let's take
        a look at OR.\r
        \r
        OR allows you to check multiple boolean expressions together.\r
        \r
        <img
        src="https://images.code.org/df380925c0c598f06a5192ff2cfc8401-image-1446156668504.08.03
        PM.png" style="width: 100px; float:right"> \r
        \r
        If either or both statements
        are true, the OR operator will evaluate to true. If both are false, the OR
        operator will evaluate to false.  \r
        \r
        # Do This\r
        \r
        * **Run the code**
        to see what it does.\r
        \r
        * **Add another conditional that check if color
        is purple or number is greater than 2**\r
        \r
        * **Add another conditional
        that check if direction is left or animal is zebra or number is 4**
      U3 - Design Mode - Console Log_markdown_instruction: |
        # Updating IDs and Debugging
        with Console Log\r
        \r
        In the last level you tested out the new command:
        `console.log`.  In this level we have a couple buttons with event handlers
        and `console.log` statements, but they are switched around!\r
        \r
        We should
        have given the buttons better ID names so we could tell the difference based
        on the ID. **Can you update the ID names and `console.log` messages to match
        the correct button? **\r
        \r
        # Do This\r
        \r
        * **Change the IDs** of the
        buttons in Design Mode to more descriptive names.\r
        \r
        * Switch to Code
        Mode and notice that the **ID pulldowns have been updated to include the new
        IDs**. (You still need to select the correct ID from the pulldown menu.)\r
        \r
        *
        **Update the `console.log` messages** to match the buttons.\r
      U3 - Design Mode - Layers and Delete_markdown_instruction: |-
        # Layering and
        Deleting\r
        <img src="https://images.code.org/9e620f70869de438c4f0c66663686876-image-1444678130772.gif"
        style="width: 150px; float: right">User interface elements can overlap one
        another, so you'll want the ability to change the order or **depth** at which
        each one is rendered. \r
        \r
        If you **scroll to the bottom of the Properties
        tab** you'll find buttons which allow you to easily **delete or change the
        depth** of an element.\r
        * **Delete an Element** by selecting it (clicking
        on it) in the design view and then clicking **Delete** in the properties tab.\r
        *
        **Change the depth** of elements by using the double or single arrows.\r

        * Click the double arrow to send all the way to front or back.\r
         * Click
        the single arrow to move up or down one layer.\r
            \r
        # Do This:\r
        \r
        Use
        the **delete** and **depth** tools to **create the "After" image**\r
        \r
        \r
        <table>\r
        <tr>\r
        \t<th
        style="text-align:center">Before</th>\r
            <th style="text-align:center">After</th>\r
        </tr>\r
        <tr>\r
        \t<td
        align=center><img src="https://images.code.org/023f749ecb58c91869a4eacab6701203-image-1444685187662.png"
        style="width:200px ; border: solid 1px black"></td>\r
            <td style="text-align:center"><img
        src="https://images.code.org/e45fc7d451c071683fd3b59466b106b0-image-1444684677212.png"
        style="width:200px; border: solid 1px black"></td>\r
        </tr>\r
        </table>
      U3 - Design Mode - Multi Screens 2_markdown_instruction: |-
        # Switching Screens\r
        \r
        In
        the last level you made two screens, a black one and a white one. However
        when you ran the app you probably noticed that you had no way to see the second
        screen. Let's fix that.\r
        \r
        In order to switch between screens we have
        added a new command: `setScreen`. Read the documentation to figure out how
        this command works.\r
        \r
        <img src="https://images.code.org/152f45b312da467f0b553efc9fba20a7-image-1444354703453.gif"
        style="width: 250px; float: right">\r
        \r
        **Goal:** Make a 2 screen app
        which can switch back and forth between a black screen and a white screen
        using buttons.\r
        \r
        # Do This:\r
        \r
        * **Put a button on each screen**.  \r
        \r
        *
        **Set up event handlers** for each of your buttons. \r
        \r
        * **Use the `setScreen`
        block to switch screens** when the buttons are clicked.\r
        \r
        * Test out
        your app to make sure you can switch back and forth between the two screens.
      U3 - Design Mode - Multi Screens_markdown_instruction: |-
        # Second Screen\r
        \r
        Up
        until now our apps have only been able to have one view. With Design Mode
        we can now make multiple screens and switch between them!\r
        \r
        **Goal:**
        Make a 2 screen app with a black screen and a white screen. \r
        \r
        <img src="https://images.code.org/e35a6f494cf6f0c57c66a1aef651cdb0-image-1444353622241.gif"
        style="width: 250px; float: right">\r
        \r
        # Do This:\r
        \r
        Switch to Design
        Mode and **add a second screen**. There are two ways to add a second screen:
        \r
        \r
        * Drag out <img src="https://images.code.org/4337b39cfd797ed9289b70fb6cb365fb-image-1444353631083.17.39
        PM.png" style="width: 50px"> from the Design Toolbox. Check out the screen
        dropdown menu at the top right of the app window. You should now have two
        screens!  <img src="https://images.code.org/b48d978335701888b744702f25f11b28-image-1444353746012.17.07
        PM.png" style="width: 75px"> \r
        * From the screen dropdown menu at the
        top right of the app window click *New Screen*. \r
        \r
        Make screen1 white
        and screen2 black. **Set the background color for a screen in the Properties
        tab**.  Make sure to rename the screens with appropriate IDs.
      U3 - Design Mode - WTF Console Log_markdown_instruction: |-
        # Console Log\r
        In
        the last level, we saw a new command: `console.log`. You may have noticed
        that it prints out text in the Debug Console below the code workspace.\r
        \r
        <img
        src="https://images.code.org/326e0f6c7d3b846ba06db998f06f56aa-image-1444419414248.36.33
        PM.png" style="width: 450px; border: solid 1px black"> \r
        \r
        The Debug
        Console is an important tool for programmers.  You've seen it display error
        messages, but you can also send messages that a user cannot see to the Debug
        Console while a program is running. <img src="https://images.code.org/cdc253db1b9a3685eaf5ea4b6bc30766-image-1444337429645.png"
        style="width: 250px; float: right; border: solid 1px black"> The Debug Console
        is really helpful for debugging programs because you can send messages to
        yourself from within your own code!\r
        \r
        You can find `console.log` in the
        code toolbox under the Variables tab.\r
        \r
        # Do This:\r
        \r
        * Drag out
        3 `console.log` commands into the workspace.\r
        \r
        * Update each `console.log`
        with your own messages.\r
        \r
        * Run the program a couple times to test out
        this new command.
      U3 - Design Mode -Recreate Beyond Buttons_markdown_instruction: |
        # Improved
        Chaser Game\r
        \r
        Now lets improve the "Chaser Game".  This is where you
        get to use your creativity. Make it look nice!\r
        \r
        In addition you will
        notice a new command in the toolbox: `playsound`! Read the documentation about
        how to add sounds.\r
        \r
        **Note:** Your code from before has been provided
        for you.\r
        \r
        # Do This:\r
        \r
        * **Create a Welcome Screen** that explains
        the rules of the game. Include a "Start Game" button.\r
        \r
        * Update the
        your code so that the **image jumps to a new location when it is clicked**.
        \r
        \r
        * **Play a sound** each time the image is clicked.\r
        \r
        * **Add
        a Game Over Screen** with a lose message and button to start over. The Start
        Over Button should direct back to the Welcome Screen.\r
        \r
        * **Make the
        user lose**, by sending them to the Game Over Screen, when the background
        is clicked.\r
        \r
        \r
      U3 - Design Mode 1_markdown_instruction: |
        # Design Mode\r
        \r
        <img src="https://images.code.org/ec23eb303d31fcd8274fac6c2c0f7b9a-image-1444330773327.32.34
        AM.png" style="width: 150px; float: right">\r
        \r
        You now have Design
        Mode!  Check out the new button at the top of your App window. Design Mode
        will allow you to easily add UI elements to your projects and style them the
        way you want!\r
        \r
        **Goal:** Add a large red button to your app using Design
        Mode.\r
        \r
        # Do This:\r
        \r
        * **Switch to Design Mode:** the switch appears
        above your app window on the left.\r
        \r
        * **Find <img src="https://images.code.org/278f146396c80c97d0b5d73f24d48aec-image-1444335461720.png">
        in the Design Toolbox** and drag out a button and resize it. \r
        \r
        * **Change
        the button text** to say "Click Me".\r
        \r
        * **Set the color for the button**
        to be red.\r
        \r
        <img src="https://images.code.org/4cab6a5233cf07df0d8e312932762012-image-1444314797615.gif"
        style="width: 500px; float: middle">\r
      U3 - Dice - Dropdown and Score_markdown_instruction: |-
        # Adding Guess and Score
        to Dice Game\r
        \r
        Let's have the user guess the number that will come up
        when we roll a single die. \r
        \r
        You can have multiple `if` statements,
        one after another, if they have different purposes which are separate. \r
        \r
        **
        Note: ** Use the flowchart below to help you figure out the logic of the game.\r
        \r
        #
        Do This:\r
        \r
        * **Add a dropdown** to take in the user's guess from 1 to
        6.\r
        \r
        * **Add a set of `if` statements to check if the dice roll number
        is equal to the user guess.** Put this set of `if` statements after your set
        of `if` statements for the dice image. It should be completely separate from
        the other set of `if` statements. \r
        \r
        * Create a variable to **keep track
        of score**. Give 10 points if they guess right and take one point away when
        they guess wrong.\r
        \r
        * **Display the score** on the screen and update
        it after each dice roll.\r
        \r
        <img src="https://images.code.org/ac24917ca18606f6f3c31a6be1a16d73-image-1446174953979.png"
        style="width: 100%">\r
        <a href="https://images.code.org/ac24917ca18606f6f3c31a6be1a16d73-image-1446174953979.png"
        target="_blank">Open diagram in a new tab</a>
      U3 - Dice - Dropdown with Strings_markdown_instruction: |-
        # Adding Difficulty
        Levels: Dropdowns with Strings\r
        \r
        Let's add another element to our dice
        game: **difficulty levels**. The user will pick either "Easy" or "Hard."  These
        are strings so you might be wondering how to check for equality. **The `==`
        works on strings as well!** It checks if the first string is exactly the same
        as the second string. **Strings must be the same letters and even have the
        same case to be equal**! So "dog" and "Dog" would not be equal. \r
        \r
        #
        Do This:\r
        \r
        * **Add a dropdown** for difficulty level with the options
        of "Easy" or "Hard." \r
        \r
        * **Create an `if` statement for difficulty
        level** which prints the difficulty level to the console.\r
        \r
        <img src="https://images.code.org/9db291c8dd4192390e008aa764576cd3-image-1446175136919.png"
        style="width: 100%">\r
        <a href="https://images.code.org/9db291c8dd4192390e008aa764576cd3-image-1446175136919.png"
        target="_blank">Open diagram in a new tab</a>
      U3 - Dice - If_markdown_instruction: |
        # Using `if` to Display Images\r
        \r
        We
        are going to set up a dice game. We want to show a picture of a single die
        for each random number generated 1 to 6. We've already set up the screen
        in Design Mode, with a button to generate the roll and an image to show a
        picture of the die.\r
        \r
        **Note:** The flowchart for the desired behavior
        is below.\r
        \r
        # Do This:\r
        \r
        * Add an event handler for the Roll! button
        so that when the button is clicked it generates a random number from 1 to
        6. \r
        \r
        * Add conditionals (`if`, `else if`, and `else`) to change the
        picture of the image (ID: `dice_image`) to display the correct side of the
        die depending on the random number generated. You will need to use <img src="https://images.code.org/89f2c13ef4ead590475c863a087597f8-image-1446535826599.30.16.png"
        style="width:150px"> with the URLs below to set the images for the die.\r
        \t*
        <img src="https://code.org/images/dice/1.png" style="width: 50px"> Dice
        1 Image URL -  https://code.org/images/dice/1.png\r
            * <img src="https://code.org/images/dice/2.png"
        style="width: 50px"> Dice 2 Image URL -  https://code.org/images/dice/2.png\r
            *
        <img src="https://code.org/images/dice/3.png" style="width: 50px"> Dice
        3 Image URL - https://code.org/images/dice/3.png\r
            * <img src="https://code.org/images/dice/4.png"
        style="width: 50px"> Dice 4 Image URL - https://code.org/images/dice/4.png\r
            *
        <img src="https://code.org/images/dice/5.png" style="width: 50px"> Dice
        5 Image URL - https://code.org/images/dice/5.png\r
            * <img src="https://code.org/images/dice/6.png"
        style="width: 50px"> Dice 6 Image URL -  https://code.org/images/dice/6.png\r
        \r
        <img
        src="https://images.code.org/392c125a2620ac4949091fc075864f4c-image-1446174585241.png"
        style="width: 100%">\r
        <a href="https://images.code.org/392c125a2620ac4949091fc075864f4c-image-1446174585241.png"
        target="_blank">Open diagram in a new tab</a>\r
      U3 - Dice - Nested_markdown_instruction: |-
        # Nested *if* Statements\r
        \r
        <img
        src="https://images.code.org/1774efb17571d3370662e34b705dde47-image-1446485939643.37.11
        PM.png" style="width: 150px; float: right">\r
        \r
        **Let's change the
        scoring of the game to match the difficulty level.** \r
        \r
        New scoring rules:\r
        *
        _Easy: +10 points right answer / -1 point for wrong answer_\r
        * _Hard: +1
        point right answer / -1 point for wrong answer_\r
        \r
        How do we check _both_
        the difficulty level and if the user's guess was correct? **We can actually
        put `if` statements inside of other `if` statements!** So we first want to
        check what the difficulty level is and then check if the user was right or
        wrong to determine the score.\r
        \r
        ** Note: ** The flowchart below outlines
        the logic you are trying to implement.\r
        \r
        # Do This:\r
        \r
        * Move a copy
        of the score `if` statement inside of the difficulty levels. Be careful with
        indenting. All of the `if` statements for score need to be inside of the difficulty
        `if` statement (i.e. indented 1 level more than the difficulty `if` statement)\r
        \r
        <img
        src="https://images.code.org/2125a027997aeca75d18b8423058063d-image-1446485524945.gif"
        style="width: 350px">\r
        \r
        \r
        * Edit the `if` statements to give the
        correct scores\r
        \t* Easy level (+10 right, -1 wrong)\r
            * Hard level
        (+1 right, -1 wrong)\r
        \r
        <img src="https://images.code.org/3b95a9f5cca60fc0ffbf7c2fb174d737-image-1446175290414.png"
        style="width: 100%">\r
        <a href="https://images.code.org/3b95a9f5cca60fc0ffbf7c2fb174d737-image-1446175290414.png"
        target="_blank">Open diagram in a new tab</a>
      U3 - High Low - Debug_markdown_instruction: |-
        # Debug Conditionals\r
        \r
        Help!
        **I was trying to give the player a hint when their guess was within 2 of
        the secret number but the code I wrote isn't working.** Can you fix it?\r
        \r
        Check
        out the flow chart for the logic I wanted. **Hint:** The major problem here
        is that **conditional statements run in order from top to bottom**. Remember
        you have to check the smallest/most narrow case first. Which set of numbers
        is larger/more broad (guess > secret number) or (guess > secret number + 2)
        ? Another way to think about this is which case is contained completely in
        the other case?\r
        \r
        # Do This:\r
        \r
        * Run the code to identify when the
        program is not working correctly.\r
        \r
        * Fix the problem with the order
        of the conditionals.\r
        \r
        <img src="https://images.code.org/76681a7d86bd4097417b25b682eee5a8-image-1458309676819.png"
        style="width: 100%; float: right">\r
        <a href="https://images.code.org/76681a7d86bd4097417b25b682eee5a8-image-1458309676819.png"
        target="_blank">Open diagram in a new tab</a>
      U3 - High Low - Dropdown_markdown_instruction: |-
        # Dropdown\r
        \r
        On the last
        level we used `promptNum` to get the user's guess. However, we had no way
        to limit them to the numbers we wanted. They could have typed 11 even though
        we told them not to. A better way to get input with a limited set of options
        is the dropdown. The <img src="https://images.code.org/3b21b4288a2a155d1e9a3c2cf3a5b09b-image-1446229368079.28.23
        PM.png" style="width: 75px"> is in your Design Mode Toolbox. You can control
        the list of options users can choose and then use `getText` to get the chosen
        number.\r
        \r
        We are going to need an event handler in order to do this.
        The event handler will detect when the user has changed the value of the dropdown.
        \r
        \r
        # Do This:\r
        \r
        * **Add a dropdown** for their guess instead of
        `promptNum`. Make sure to give it a good ID.\r
        \r
        <img src="https://images.code.org/fea164f6e53d1ce0c50981565e066d4c-image-1446229598357.gif"
        style="width: 350px">\r
        \r
        * Under properties **find the Options** and
        change it to the **numbers 1 to 10**\r
        \r
        <img src="https://images.code.org/0cfecbcdcfb95fc30876155ec6a3a021-image-1446229593687.gif"
        style="width: 250px">\r
        \r
        * Add an event handler to detect the `change`
        event on your dropdown.<br><br>\r
        <img src="https://images.code.org/48cffda5b7ff3a446116a39b4dbcbe8c-image-1446232308751.gif"
        style="width: 150px; float: right">\r
        * Move your `if` statement inside
        the event handler so it will check each time the dropdown is changed.<br><br>\r
        *
        When the dropdown is changed **use `getText` to find out the user's guess**.
        Save the guess using a variable. **Don't forget about scope!**<br><br>\r
        *
        Test your app -- it should work like the demo.
      U3 - High Low - Else if_markdown_instruction: |-
        # *else-if*\r
        \r
        Let's help
        the user even more by telling them if they were right or if their guess was
        high or low. There are **only 3 possible cases:** \r
        * They were right.\r
        *
        Their guess was higher than the number.\r
        * Their guess was lower than the
        number. \r
        \r
        Therefore, we can use a conditional set with one `if`, one
        `else-if`, and one `else` to implement this. Check out the flowchart below
        to see the logic. In order to check if something is high remember you can
        use the greater than `>` symbol.\r
        \r
        **Remember:**  You can create an `else-if`
        statement by hitting the <img src="https://images.code.org/f762344bc839dd8385730bb7d909657f-image-1446237096776.31.12
        PM.png" style="width: 40px"> at the bottom of an `if` statement. The first
        <img src="https://images.code.org/f762344bc839dd8385730bb7d909657f-image-1446237096776.31.12
        PM.png" style="width: 40px"> will add an `else`, the second will add an
        `else-if`.\r
        \r
        \r
        # Do This:\r
        \r
        * **Add an `else-if` statement to
        accommodate the 3 conditions.**\r
        \r
        * **Update the conditions** using `<`,
        `>`, and `==` to tell the user if their guess was correct, high, or low.\r
        \r
        *
        **Test out the program** to make sure your updates worked.\r
        \r
        <img src="https://images.code.org/f7e483414dfe1d4585841e653e44d8b0-image-1446169181724.png"
        style="width: 100%">
      U3 - High Low - Else_markdown_instruction: |-
        # *else*\r
        \r
        <img src="https://images.code.org/b7942d778a54465ad6f9f19fbab8d1ef-image-1446237289306.34.23
        PM.png" style="width: 150px; float: right">\r
        \r
        Let's add an `else`
        statement so we can tell the user when they are right and when they are wrong.\r
        \r
        **Note:**  You
        can create an `else` statement by hitting the <img src="https://images.code.org/f762344bc839dd8385730bb7d909657f-image-1446237096776.31.12
        PM.png" style="width: 40px"> at the bottom of an `if` statement.  There
        is also an `if-else` block in the toolbox. \r
        \r
        \r
        # Do This:\r
        \r
        *
        **Add an `else` statement**\r
        \r
        * **Move your `setText` inside the `else`
        statement.** So it should say "Nope that's not it. Guess again." when the
        user does not guess the secret number.
      U3 - High Low - If_markdown_instruction: |-
        # *if* Statement\r
        \r
        <img src="https://images.code.org/040c8364e3795252194b816623e949e5-image-1446227663554.54.03
        PM.png" style="width: 100px; float: right">\r
        \r
        The boolean expression
        we tested on the last level allows us to make decisions. In order to make
        these decisions we need to use something called a conditional. **Conditionals
        check if a boolean expression is true and then will execute the code inside
        of the `if` statement.** \r
        \r
        <img src="https://images.code.org/84123a7c317c63d8876b6b56086d717e-image-1446228290588.png"
        style="width: 150px; float: right">\r
        \r
        Over the number couple levels
        we are going to be creating a **Guess My Number game**. The starter code uses
        `promptNum` to ask the user for a number from 1 to 10. The `if` statement
        checks if the user guess is equal to the secret number.  Right now nothing
        happens when they guess the right number. Can you fix that?\r
        \r
        # Do This:\r
        \r
        *
        Read the code to identify the boolean expression.\r
        * Add a text label to
        the screen. Have it start out with "Guess my secret number!"\r
        * **Set
        the text label to say "You got it right!" from inside the `if` statement**.
        This will tell them they get it right only when that condition is true!\r
        *
        **Test your code out** to make sure it works.\r
        \r
        <img src="https://images.code.org/2f3487ec7a8d7cec1605f3da830c83f8-image-1446227512726.gif"
        style="width: 350px">
      U3 - Keys - Add Image URLs_markdown_instruction: |-
        # Adding Image URLs\r
        \r
        We're
        ready to start improving the "My Favorite Things" app. \r
        \r
        We'll do
        this in two steps:\r
        1. We will change it from scrolling text to scrolling
        images.\r
        2. We will add key events to scroll with the keyboard.\r
        \r
        **Step
        1:**\r
        * The default values in your array should be image URLs.\r
        * The
        large **text area** needs to be changed to an **image**.\r
        * Instead of **setting
        the text**, you'll now be using `setImageURL` to set the URL of the image.\r
        \r
        #
        Do This:\r
        **NOTE: We've re-loaded the code from the "My Favorite Things"
        App you wrote in the previous lesson.** (If you want to refer to code you
        just wrote, you can go back to look at it.)\r
        \r
        * **Set the default values**
        in your array to be image URLs. (You might need to take a minute to go collect
        a few if you didn't in preparation for this lesson.)\r
        * In Design Mode
        **delete the text area** and replace it with an **image**. Make sure your
        image has a descriptive and meaningful ID.\r
        * Inside your function that
        updates the display **replace `setText` with `setImageURL`**. Make sure you
        reference your new image element **by its correct ID**.<br>\r
        <img src="https://images.code.org/9f7f4aeeb9b1a84ae781043602166865-image-1447337890448.gif"
        style="width: 350px">\r
        * ** Test your app** to confirm that it's now
        showing the images in your array.
      U3 - Keys - Buttons and Keys_markdown_instruction: |
        # Buttons and Keys\r
        \r
        We
        now know how to respond to key events, but often we want the user to be able
        to **do the same thing with the app in multiple ways**. For example, we might
        want the app to exhibit the same behavior if the user clicks a button on the
        screen or a key on the keyboard. (This is how so-called "keyboard shortcuts"
        work.)\r
        \r
        In the program you're about to see, we've provided event handlers
        for some buttons on the screen. You're going to **create identical functionality**
        for the key events.\r
        \r
        # Do This:\r
        \r
        * **Add conditional statements
        inside the `keydown` event handler** to check for when the **up and down arrows**
        are pressed.\r
        <img src="https://images.code.org/0e0fe80c821c6a3171ec3a272c42325c-image-1447253300861.gif"
        style="width: 350px">\r
        \r
        * ** Copy the code for the `upImage` button**,
        and paste into the up arrow `if` statement.\r
        ![](https://images.code.org/ad56005d74736c7c9aa8bedf68529c0e-image-1448300088636.gif)\r
        \r
        *
        ** Copy the code for the down button**, and paste it into the down arrow `if`
        statement.\r
        \r
        * Confirm your app **responds to key events** by running
        it.  For example, clicking the image of the up arrow in the app should do
        the same thing as hitting the up arrow on the keyboard.\r
        \r
      U3 - Keys - Demo App_markdown_instruction: |-
        # Making our App an Image Scroller\r
        \r
        Over
        the course of this lesson we are going to be working towards improving our
        "My Favorite Things" app to add some new features. Our improved app will
        be able to:\r
        \r
        * Respond to **key events**.\r
        * **Display images** by
        storing their URLs.\r
        \r
        We'll call this new kind of app an **image scroller**
        but feel free to call it anything you like.\r
        \r
        # Do This:\r
        \r
        * Close
        these instructions.\r
        * **Experiment with the improved "My Favorite Things"
        app** to understand the new features we'll be adding.  \r
        * Make sure you
        try clicking the **left and right arrow keys!**\r
        \r
        Once you think you've
        experimented enough, continue on to the next level.
      U3 - Keys - Final Image Scroller_markdown_instruction: |-
        # Final Image Scroller\r
        \r
        You're
        now ready to add key event functionality to your app! As you are doing so,
        keep an eye out for places where you need to **refactor** old code in order
        to prevent redundancy. **Create functions** that carry out repeated tasks
        and make other changes to keep your code **readable and consistent**. \r
        \r
        If
        you want a reminder of how key events work, you can always go back to the
        example from earlier in this lesson.  You will need to add `if` statements
        to check for which keys were pressed, just as before.\r
        \r
        # Do This:\r
        \r
        *
        Add the ability to respond to **key events** to your app.\r
        \r
        * **Refactor
        your old code** to remove redundant portions.\r
        \r
        * Keeping adding to your
        program. What other features do you want to include?
      U3 - Keys - Functions_markdown_instruction: |-
        # Refactoring Code\r
        \r
        On the
        last level, we copied a few lines of code to a different part of our program.
        **Hopefully warning bells went off in your head!** Any time you are copying
        portions of code from one area of your program to another, it's a good indication
        that you should write a function to capture that behavior in one place. \r
        \r
        When
        you add new features to your code **you will often create redundancies**.
        To keep your code readable and consistent, you may need to rewrite old pieces
        of code. This process of restructuring existing code without changing its
        external behavior is called **refactoring**. It is an important process when
        developing software that improves code readability and reduces complexity.
        As a result, code is much easier to maintain.\r
        \r
        # Do This:\r
        \r
        * **Create
        a function called `doUpArrow`**. \r
        * Move the code from the `upArrow` event
        handler to the function.\r
        * **Call `doUpArrow`** from both your button and
        key event handlers. (The animation below shows the steps above.)\r
        * Repeat
        the same process for the down arrow / button by creating a function called
        `doDownArrow`.\r
        * Once you have **removed these redundancies from your code**
        test your app to make sure it still works!\r
        \r
        ![](https://images.code.org/f47a98a8c9ca169848c682b3e61293cd-image-1448300634062.gif)
      U3 - Keys - Key Up and Down_markdown_instruction: |-
        # Using *keyup* and *keydown*\r
        \r
        On
        the last level, we played with the `keypress` event. Let's take a look at
        some of the other key events. \r
        \r
        You are going to get the chance to play
        with `keyup` and `keydown` in this level. **Pay attention to the different
        values of `event.key` for `keydown` and `keypress`. **\r
        \r
        # Do This:\r
        \r
        *
        Switch to the event type to `keydown` or `keyup`. \r
        \r
        <img src="https://images.code.org/fa91b1a9e3240eb65ff75b381e76ce69-image-1447213909054.gif"
        style="width: 350px">\r
        \r
        * Try out the event.\r
        \t* Press and hold
        a key\r
            * Try the arrow keys\r
            * Shift\r
            * Option\r
            *
        Alt\r
            * Others
      U3 - Keys - Multiple Keys_markdown_instruction: |
        # Multiple Keys\r
        \r
        If
        you want your program to respond differently to a couple different keys, you
        will need to use chained conditional statements (`if` and `else-if`). \r
        \r
        Let's
        set up the program to **play a different sound for the down key.**\r
        \r
        #
        Do This:\r
        **We've added another sound** to the app, but it's just sitting
        at the top of the code.\r
        \r
        * Add an `else-if` statement to check if the
        **down arrow** was pressed.\r
        \r
        <img src="https://images.code.org/996914e436cca050f62d5b851899eda9-image-1447215275417.gif"
        style="width: 350px">\r
        \r
        * Move the `playSound` command from the top
        of the program inside the `else-if`. (Notice that in the example, we switch
        to block mode to move this line because it's easier to move blocks around
        that way. You can just copy/paste the text too.)\r
        \r
        <img src="https://images.code.org/42b2df84b4cd98267068592218ac96ed-image-1447215267891.gif"
        style="width: 350px">\r
        \r
        * **Test the program:** it should play one
        sound when the **up** arrow is pressed and a different sound if the **down**
        arrow is pressed.  It shouldn't make any sound if any other keys are pressed.
      U3 - Keys - Practice Adding Images with URL_markdown_instruction: |-
        # Adding
        Image URLs\r
        \r
        You are going to be creating your own image scroller! Lets
        set up the array of image URLs. There are a couple different ways to set up
        an array but we are going to use `appendItem` to add all the image URLs. \r
        \r
        **Note:**
        At this point you should have collected image URLs to use for your image scroller.
        If you have not collected your image URLs yet, go do that now. \r
        \r
        # Do
        This\r
        \r
        *  ** Add your image URLs to the images array.**  Pull out an
        `appendItem` command. Change the array name to match the array. Change the
        item parameter to your image URL.\r
        \r
        <img src="https://images.code.org/91fcb850da2f4b2f4cad24d094135867-image-1447174515231.gif"
        style="width: 350px">\r
        \r
        * ** Test the the 'Add' button** to check
        that it adds a new image at the current index of the array.\r
        \r
        <img src="https://images.code.org/0388145b2221da0255ad98005d749a0e-image-1447174724522.gif"
        style="width: 200px">\r
        \r
        * ** Set the colors and theme **of your app
        to personalize it. ** Note: ** You can change the way the screen looks but
        make sure to keep all the elements currently on the screen or your app might
        not work.
      U3 - Keys - Words to Images_markdown_instruction: |-
        # Adding Image URLs\r
        \r
        You
        are going to be creating your own image scroller! Lets set up the array of
        image URLs. There are a couple different ways to set up an array but we are
        going to use `appendItem` to add all the image URLs. \r
        \r
        **Note:** At
        this point you should have collected image URLs to use for your image scroller.
        If you have not collected your image URLs yet, go do that now. \r
        \r
        # Do
        This\r
        \r
        *  ** Add your image URLs to the images array.**  Pull out an
        `appendItem` command. Change the array name to match the array. Change the
        item parameter to your image URL.\r
        \r
        <img src="https://images.code.org/91fcb850da2f4b2f4cad24d094135867-image-1447174515231.gif"
        style="width: 350px">\r
        \r
        * ** Test the the 'Add' button** to check
        that it adds a new image at the current index of the array.\r
        \r
        <img src="https://images.code.org/0388145b2221da0255ad98005d749a0e-image-1447174724522.gif"
        style="width: 200px">\r
        \r
        * ** Set the colors and theme **of your app
        to personalize it. ** Note: ** You can change the way the screen looks but
        make sure to keep all the elements currently on the screen or your app might
        not work.
      U3 - Loops -  9 Part 2_markdown_instruction: |-
        # Boolean Operators in While
        Loops Part 2\r
        \r
        We just saw that you can create more complex boolean expressions
        for our while loops just like our for loops. Lets try something a little more
        complex. \r
        \r
        Right now this code rolls two dice as long as either one
        of them is less than 3.   Modify the condition so that both dice have to be
        greater than 3 for the loop to stop.\r
        \r
        # Do This\r
        \r
        * **Change the
        boolean expression** for the while loop so that it will roll until both dice
        are greater than 3. **Hint:** A NOT( `!`) operator might be helpful for this
        one.
      U3 - Loops -  Complex Condition_markdown_instruction: |-
        # Expressing Stopping
        Conditions: "Until Loops"\r
        It is often more natural to think about looping
        in terms of when the loop should end rather than when it should continue.
        For example you might say "keep going down the road until you see the gas
        station" or "keep calling until you get through to someone." You might
        think of these as "until loops" rather than "while loops," since we want
        the loop to continue **until a condition is true rather than while a condition
        is true**.\r
        \r
        **There is no "until loop" in JavaScript** but it is actually
        quite easy to translate "until loops" into `while` loops so that you can
        use them in programs. An "until loop" runs *until* a condition is true,
        as opposed to a while loop which runs *as long as* a condition is true.  That
        means an until loop is the logical inverse of a while loop - it runs as long
        as the **condition is false**. The table below shows how you can use the **NOT**
        ( `!` ) operator to translate stopping conditions into `while` loop conditions.\r
        \r
        |
        Expressed as Stopping | Expressed as Until Loop | Expressed as While Loop
        |\r
        | --- | --- | --- |\r
        | **Stop** once you reach the gas station | Keep
        going **until** you reach the gas station | Keep going **while** you have
        **NOT** reached the gas station|\r
        | **Stop** calling when you get through
        to someone | Keep calling **until** you get through to someone | Keep calling
        **while** you have **NOT** gotten through to someone|\r
        | **Stop** when `x
        == y` | `until(x == y){...` | `while(!(x == y)){...`|\r
        <br>\r
        Note how
        we can use the **NOT** operation to find the **logical inverse** (or opposite)
        of the condition from our "until loop" to create a `while` loop. Let's
        do a little practice of that now.\r
        \r
        # Do This:\r
        \r
        **Starter code**
        is provided that repeatedly rolls two dice and writes their values to the
        screen. **Careful: ** before you edit this code it creates an infinite loop.\r
        \r
        *
        Use the technique above to **modify this code** so that the loop **stops when
        both dice are 5 or greater**.\r
        * **Try it out and experiment.** You should
        exit the loop the first time both dice have values greater than or equal to
        5 displayed.\r
        \r
        ![](https://images.code.org/076fb8e95fabc55e8ee45e31e51ca2d5-image-1448925611863.19.59
        PM.png)
      U3 - Loops - 1_markdown_instruction: |-
        # *while* Loops\r
        \r
        <img src="https://images.code.org/bfb82e4caecc3ad1338177e05064ef72-image-1446669721477.41.28
        PM.png" style="width: 100px; float: right">\r
        \r
         **The `while` loop
        uses a boolean condition to repeatedly run a block of code.**  It checks the
        expression, and if it is true it runs the block of code contained within it.
        This process of checking the condition and running the block of code is repeated
        as long as the boolean condition remains true. **Once the boolean expression
        becomes false it will stop.**\r
        \r
        We are going to start exploring a `while`
        loop by **modifying the condition on which a `while` loop runs and using `console.log`
        to ensure it is correctly evaluating its condition**.\r
        \r
        # Do This:\r
        \r
        *
        **Starter code** is provided which creates a `while` loop that repeatedly
        moves the turtle around the screen.\r
        * **Add a `console.log` command** inside
        the loop after `num` is assigned a random number. This way you can see the
        value the loop is based on.\r
        ![](https://images.code.org/1da444fd5c6533ad1cc0de3c593bf92d-image-1446825127341.gif)\r
        *
        **Run the program a couple times** and look at the results.\r
        * **Change
        the condition for the `while` loop** to check if the variable **`num` is less
        than 90**. Your output might look like the example below.\r
        \r
        ![](https://images.code.org/97df98c23c0c03a7ce480108a92627a5-image-1448296906193.41.17
        AM.png)
      U3 - Loops - 10_markdown_instruction: |-
        # Writing a Loop From English\r
        \r
        Alright
        it’s your turn. Can you translate the English into code? This problem also
        involves an "until loop" problem.\r
        # Do This:\r
        \r
        Take this statement
        in English and translate it into code: \r
        \r
        **“Write a program that simulates
        the rolling of two dice. Keep rolling the dice UNTIL the sum of the dice is
        either a 7 OR an 11."**  Your program should display the results of each
        roll.  \r
        \r
        **NOTE**: this one is a *little* tricky.  Hint: In English
        we sometimes say "or" when in cold hard logic we mean "and".\r
        \r
        Here
        is a sample output:\r
        \r
        ![](https://images.code.org/706279a3c167d8c76068a7ded5146eed-image-1456434365077.png)
      U3 - Loops - 11_markdown_instruction: |
        # Debugging: Complex Logic\r
        \r
        In
        this challenge you need to find and fix a bug in a program that simulates
        rolling one die.  \r
        \r
        The given code accidentally loops infinitely, so
        something must be wrong with the condition. Can you figure out how to fix
        it?\r
        \r
        # Do This:\r
        \r
        * **Fix the condition** so that it keeps rolling
        the die as long as the value is **not a 2 or a 3.**\r
        \r
        * **Hint:** Think
        about other ways you can express this idea in English. \r
        \r
      U3 - Loops - 12_markdown_instruction: |-
        # Repeat Specific Number of Times\r
        \r
        Instead
        of writing code that makes the loop run a random number of times, we can control
        the `while` loop by changing the variable used in the boolean expression differently.
        Let’s try just printing a string 5 times.\r
        \r
        # Do This:\r
        \r
        * **Starter
        Code:** Right now the code prints a string "Hi" twice.\r
        * **Change the
        code** so that it prints the string "Hi" 5 times.\r
        * **Notice** how `count`
        is being re-assigned each time through the loop.
      U3 - Loops - 13_markdown_instruction: |-
        # Counting by More Than 1\r
        \r
        Sometimes
        you want to count up by something other than 1. In that case we do need to
        use the form of `count = count + 1` where we can change 1 to be any number
        we want to count up by. The `++` and `--` operators only work for counting
        by one.\r
        \r
        Lets try counting by 3. \r
        \r
        \r
        # Do This\r
        \r
        * **Starter
        Code: ** The program right now will count from 1 to 30.\r
        \r
        * **Update
        the code to count up by 3 instead of 1.** So it will say 3,6,9,12,15...
      U3 - Loops - 14_markdown_instruction: |-
        # Defensive Loop Conditions\r
        \r
        Take
        a look at the starting code. Instead of counting by 3's we had decided to
        count by 4's. \r
        \r
        But this will run us into a problem. Can you see why?\r
        \r
        We
        wanted to stop counting at 30, but when you count by 4 you will actually never
        hit 30. It would go... 24, 28, 32, 36...  What we really want to do is stop
        when the number is **greater than 30**. This is an important defensive programming
        strategy. Make the condition catch more cases than you think you need so that
        if for some reason something does not go exactly as you planned it will hit
        the stop condition and not go infinitely.\r
        \r
        \r
        # Do This:\r
        \r
        * **Change
        the loop condition** to prevent the infinite loop and stop counting once the
        count is past 30.
      U3 - Loops - 15_markdown_instruction: |-
        # Using an *if* Statement In a Loop\r
        \r
        A
        common thing to do is to use variables to keep track of some sort of count.  When
        used in a loop we count things very quickly.\r
        \r
        **Scenario:**\r
        If you
        roll a pair of dice, rolling a 12 (two sixes) is rare.  How rare?  If you
        were to roll a pair of dice 1,000 times, on average, how many times would
        it come up as 12?\r
        \r
        To figure this out, we could write code to run an
        experiment. It would go something like this:\r
        * Make a loop that simulates
        rolling a pair of dice 1,000 times.\r
        * Inside the loop, add an `if` statement:
        **if die1 + die2 == 12, then add 1 to a counter**.\r
        * After the loop, display
        the result.\r
        \r
        # Do This:\r
        The **starter code** sets up the whole experiment
        for you, except it doesn't count the number of 12's rolled - that's your
        job.\r
        \r
        * **Run the code** to see what the experiment does.\r
        \r
        * **
        Add an `if` statement inside the loop** to check if the sum of the dice is
        equal to 12, and add 1 to `twelveCount`.\r
        \r
        *  Once the loop has completed,
        **display the number of times the sum was 12.**\r
        \r
        **Note:** If you remove
        (or comment out) the `console.log` statement that displays every roll of the
        dice, the experiment will speed up A LOT!  You could do tens of thousands
        of dice rolls in a matter of seconds.
      U3 - Loops - 16_markdown_instruction: |-
        # Changing Loop Conditions\r
        \r
        We
        want to find out how many times you have to roll to get the sum of 7 100 times.
        In order to do this we still need to keep track of the number of times we
        get a sum of 7 as well as the number of times we have rolled so far. The code
        will be similar to what we had before.\r
        \r
        # Do This\r
        \r
        * Update the
        while loop condition to **stop when the sum of 7 has come up 100 times**.\r
        \r
        *
        Update the code to **print the number of rolls it took to get the sum of 7
        100 times**.
      U3 - Loops - 2_markdown_instruction: |-
        # Infinite *while* Loops\r
        \r
        `while`
        loops run until their condition becomes false, which raises an interesting
        question.  **What happens if the condition never becomes false**? In these
        cases the program enters what is called an **infinite loop** over the commands
        in the `while` loop, and it never reaches the rest of your program. **We normally
        avoid infinite loops in our programs**, but let's try it out to see what
        happens.\r
        \r
        # Do This:\r
        \r
        * **Starter code** is provided which creates
        a `while` loop to move the turtle around the screen.\r
        * **Change the `while`
        loop condition to something that will always be true.** The easiest way to
        do this is to change 50 to be a number that randomNumber will never generate
        such as 200. \r
        * **Run the program.** Notice that it will never stop running.
        You may even get an error from your browser.\r
        * **Hit reset to stop it.**
        Your computer may actually stop running as you expect if you let an infinite
        loop run for too long. **It's possible you may even need to close the browser
        window and reload the page. If you hit reset early enough you can usually
        avoid this problem.**\r
        * **Find a condition using `<` or `>` that will also
        cause an infinite loop.**
      U3 - Loops - 3_markdown_instruction: |
        # Changing *if* to *while*\r
        \r
        **
        How many times would we have to roll a die before it comes up as a 6?** In
        the program you're about to see, we **simulate rolling a die (generating
        a random number between 1 and 6)** in order to answer this question.\r
        \r
        #
        Do This:\r
        \r
        ** Starter code** is provided which re-rolls a die once if
        the first roll is not a 6. \r
        * **Change the `if` statement to a `while`
        loop** so the program will keep rolling the die **while the current roll is
        not a 6.** \r
        \t* **Hint:** The easiest way to do this is to change the text
        from `if` to `while`.\r
        <img src="https://images.code.org/50b97e8858bf5ebf82eb1d358f875854-image-1446739013775.gif"
        style="width: 350px; border: solid 1px black ">\r
        * Run the program to
        test out the change.\r
      U3 - Loops - 4_markdown_instruction: |-
        # Debug Commands\r
        \r
        <img src="https://images.code.org/c6322845b96b70c9083a6c62736048e5-image-1446739268136.00.34
        AM.png" style="width: 200px; float: right">\r
        \r
        Check out the new **Debug
        Commands toolbox** that has appeared next to the Debug Console! These powerful
        tools allow us to **pause a program at a certain point** while it’s running
        and then execute lines one at a time. \r
        \r
        Using these tools we can investigate
        the state of variables and other elements of the program at any point, mid-execution.
        This makes it much easier to see what’s happening while the programming is
        actually running!\r
        \r
        In order to use the debug commands, you first have
        to indicate which line you want the program to pause at.  This is called adding
        a “breakpoint” (see animation below).\r
        \r
        # Do This:\r
        \r
        * **Add a breakpoint**
        on the line where the `while` loop starts. (**Just click the line number.**)\r
        *
        **Use the <img src="https://images.code.org/bd8f1a67242e64e6b3740eac79f881e8-image-1446748421345.33.09
        PM.png" style="width: 75px"> button** to execute each line one at a time.\r
        *
        Each time you hit the breakpoint, **use the console to check value of `num`**.
        \r
        * **NOTE:** If you hit <img src="https://images.code.org/6c4712da58e32dae2d04c52d9964fca9-image-1446741498097.37.48
        AM.png" style="width: 75px"> it will "continue" executing the program
        normally, unless of course it hits another breakpoint. \r
        \r
        ![](https://images.code.org/68f8e185914c8cc127aa9573ae37f687-image-1446835628580.gif)
      U3 - Loops - 5_markdown_instruction: |-
        # Update Condition\r
        \r
        In order for
        a `while` loop to stop at some point, the code inside the loop **must change
        something about the state of the program** - usually the value of a variable
        - so that eventually the boolean expression becomes false.  Otherwise you'd
        have an infinite loop!\r
        \r
        # Do This:\r
        **Starter Code:** The starter
        code runs an infinite loop. \r
        * **Run the code** to see the problem in action.
        Remember to hit the reset button to stop the infinite loop.\r
        * **Add code
        inside the `while` loop** which will **update the variable `num` so that the
        condition will eventually become false.**\r
        * **TIP:** you can use the debugging
        tools if you think they would be helpful.
      U3 - Loops - 6_markdown_instruction: |-
        # Starting Condition\r
        \r
        We have seen
        that loops can run infinitely. On the last level we saw that there is also
        the **chance that the loop never runs at all!** If the condition of the `while`
        loop starts out false then the loop will never run.\r
        \r
        We fixed this problem
        in the last exercise by displaying the value of `num` in two places: before
        the loop and in the loop. Duplicating code is generally a bad strategy, so
        the question is: can we be a little clever and get into the loop without missing
        any values?  The answer is yes.\r
        \r
        **The solution** is to initialize the
        values used in our boolean expression so that we are **certain** it will evaluate
        to true the first time the loop checks it.  **For example, if your loop condition
        is: `while (num != 6)` you could initialize `num` to anything other than 6
        and you'd know that you get into the loop**.  \r
        \r
        If you use this technique
        though...\r
        1. You need to make sure you set the value of `num` right away
        inside the loop.\r
        2. You probably want to use a nonsense value like -1,
        so that if you ever see that displayed it will be obvious something is wrong
        and be easier to debug.\r
        \r
        # Do This:\r
        \r
        * **Starter code** is provided
        which creates a `while` loop that never runs.\r
        * **Run the program** once
        to see that the loop is never entered.\r
        * **Fix** the problem by changing
        the initial value of `num` to a nonsense value such as -1.
      U3 - Loops - 7_markdown_instruction: |-
        # Printing After Setting Value\r
        \r
        We
        started trying to remove the duplicate code we had on the last level by initializing
        a variable to a nonsense, or "dummy," value that would still ensure we entered
        the loop. \r
        \r
        In the code provided, not every number is going to display.
        However, this time we want to try **not to add code** to fix the problem,
        since duplicate code is inefficient. \r
        \r
        # Do This:\r
        \r
        * **Starter
        Code:** The code is completely functional except that it does not print one
        of the numbers it's supposed to. In addition we don't want it to print the
        dummy variable of -1.** Hint: ** What should be the last number that prints
        every time this program runs?\r
        \r
        * Run the program to see the behavior.\r
        \r
        *
        Fix the code so that it prints all the values of `num`. **Hint:** You don't
        need to add any code. Just switch the order of the code you have now!
      U3 - Loops - 8_markdown_instruction: "# Printing Before the Loop Starts\\r\n\\r\nSometimes\nour
        code will be doing the right thing but we won't be able to tell because\nof
        the way we are printing values. We need to make sure we print all the values\nwe
        are interested in. \\r\n\\r\nThis program *should* write all the values of\n`num`
        to the screen as it runs; however it misses one - the first one generated.
        \ \\r\n\\r\n#\nDo This:\\r\n\\r\n* **Run the program** a few times and notice
        that sometimes\nit just prints \"Done.\" and nothing else, even though a number
        was generated.\nThe first value of `num` never gets displayed.\\r\n* **Add
        a `write` statement**\nbefore the loop to print the first number. \\r\n* **Hint:**
        Look at the two\ntimes `num` is assigned a value. Which one isn't being displayed? "
      U3 - Loops - 9_markdown_instruction: |
        # Boolean Operators in *while* Loops\r
        \r
        We
        can create compound boolean expressions to control our `while` loops just
        like our `if` statements. Let's try using boolean operators in our `while`
        loop condition.\r
        \r
        # Do This:\r
        \r
        * Right now this code rolls two dice
        as long as either one of them is less than 3.  **Modify the condition so that
        it keeps rolling as long as *both* are less than 3.**\r
        \r
        * **HINT:** To
        say that both dice are less than 3 the boolean expression must say: if die1
        less-than 3 AND die2 less-than 3...\r
      U3 - Loops - Continue_markdown_instruction: |-
        # Debug Commands\r
        \r
        <img src="https://images.code.org/c6322845b96b70c9083a6c62736048e5-image-1446739268136.00.34
        AM.png" style="width: 250px; float: right">\r
        \r
        Check out the new box
        that has appeared next to the Debug Console! These are the debug commands
        and they are extremely powerful.  These commands allow us to stop a program
        at a certain point in its execution and slowly follow, step-by-step, what
        is happening during the run. \r
        \r
        In order, **to use the debug commands
        you first have to add a breakpoint**. Breakpoitns tell the computer that when
        you hit this line of code pause and wait for the programmer to tell you what
        to do next. A breakpoint is marked by <img src="https://images.code.org/99c9685af5b15840287b41620cdc82ea-image-1446739738049.08.36
        AM.png" style="width: 35px">. You can create a breakpoint by clicking on
        the number next to the line of code your want the computer to stop at.\r
        \r
        **Note:**
        You'll notice that once you hit run the <img src="https://images.code.org/4eea3a317da5b0781275493955a2d782-image-1446741391883.36.03
        AM.png" style="width: 75px"> button becomes the <img src="https://images.code.org/6c4712da58e32dae2d04c52d9964fca9-image-1446741498097.37.48
        AM.png" style="width: 75px">button.\r
        \r
        # Do This\r
        \r
        * **Add a breakpoint**
        to your code so the program will pause each time it restarts the while loop.\r
        \r
        <img
        src="https://images.code.org/ae81079677c78d7421b3acc55947fb08-image-1446739414661.gif"
        style="width: 250px">\r
        <br>\r
        \r
        * **Use the Debug Commands to to make
        a list of all the values rolled before a 6**.\r
        \t* Each time you hit the
        breakpoint, **use console to check value of num**. \r
            * To **move to
        the next time the value of num changes** use either  <img src="https://images.code.org/bd8f1a67242e64e6b3740eac79f881e8-image-1446748421345.33.09
        PM.png" style="width: 75px"> or  <img src="https://images.code.org/6c4712da58e32dae2d04c52d9964fca9-image-1446741498097.37.48
        AM.png" style="width: 75px">\r
        \t\t* **Step Over** - Executes the current
        line of code and steps over to the next one.\r
        \t\t* **Continue**  -  Execute
        until you hit the next break point\r
        \t\t* ( Note: We will talk about Step
        in and Step out later.)
      U3 - Loops - Minus Minus_markdown_instruction: |
        # *++* Has a Friend!  Introducing
        *--*\r
        \r
        As you may have guessed, just as we can write `count = count +
        1` as `count++` we can also write `count = count - 1` as `count--`.\r
        \r
        Let’s
        write a program that counts **down** from 10 down to 1. \r
        \r
        # Do This:\r
        \r
        *
        **Starter Code: ** The current program counts **up** from 1 to 10. \r
        \r
        *
        **Change the code to use `count--` to count *down* from 10 to 1.** You will
        need to:\r
        \t* Change the looping condition.\r
            * Change `count++` to
        `count--`.\r
            * Change the initial value assigned to `count`.\r
      U3 - Loops - Plus Plus_markdown_instruction: |-
        # *++* Operator\r
        \r
        As programmers
        we are always looking for more concise ways to write code. It is so common
        to add 1 to a variable such as in `count = count + 1` that there is actually
        a shorthand for it. \r
        \r
        # Introducing the *++* Operator\r
        \r
        You can
        write `count++` to add 1 to `count`. `count++` does the exact same thing as
        `count = count + 1`! \r
        \r
        In fact the computer turns `count++` into `count
        = count + 1` behind the scenes - it really is just a convenient shorthand.\r
        \r
        **Note:**
        This is more of a programmer style choice so if you want to write your code
        using `count = count + 1` instead there is nothing wrong with that!\r
        \r
        #
        Do This:\r
        \r
        * Change the code to use `count++` instead of `count = count
        + 1`. (You'll need to be in text mode to do this.)\r
        \r
        ** Misconception
        Alert:** You don't need to write `count = count++` - the computer is doing
        the assignment for you.
      U3 - Loops - Typing in Console_markdown_instruction: |-
        # Debug Console: Variable
        Values\r
        \r
        Up until now, if we wanted to find out the value of a variable
        at some point in the execution of a program, we've used `console.log`. That
        is still going to be a great strategy but **the Debug Console can do even
        more for us!**\r
        \r
        **Check this out:** We can check the value of a variable
        in real time (as our program executes) by typing its name into the prompt
        within the Debug Console and hitting "enter". **This is another powerful
        tool for debugging your programs.** \r
        \r
        ![](https://images.code.org/7e7ff7aa041814cfcd69a1c9a028c439-image-1446826780896.gif)\r
        \r
        #
        Do This:\r
        \r
        * **Run the program.**\r
        \r
        * Use the Debug Console to **check
        the ending value of `num`**. You can do this by typing num in the Debug Console
        and hitting enter!
      U3 - Loops - minus = operator_markdown_instruction: |-
        # Try Out the *-=* Operator\r
        \r
        The
        `-=` operator works almost identically to `+=`, but instead it subtracts the
        value provided from the variable. Let's use this operator to **create a loop
        that counts down from 30 by 3's**.\r
        \r
        # Do This:\r
        \r
        * **Change the
        code to use `-=`** to count from *down* from 30 to 0 by 3's.
      U3 - Loops - plus and minus = operator_markdown_instruction: |-
        # Introducing
        *+=* and *-=* Operators\r
        \r
        Sometimes you want to add or subtract something
        *other than 1* from the current value of a variable. If you wanted to add
        or subtract 3 for example, such as: `count = count + 3` or `count = count
        - 3`, `++` and `--` wouldn’t help. \r
        \r
        It turns out this is pretty common
        as well so there is actually a shorthand version of `count = count + 3`. \r
        \r
        **Introducing
        `+=`  and `-=`**!\r
        \r
        We can use the `+=` or `-=` operator to add or subtract
        any value we want to the current value of a variable. \r
        \r
        So, the shorthand
        versions of `count = count + 3` and `count = count - 3` would be:\r
         * `count
        += 3` \r
         * `count -= 3`\r
        \r
        **Notice** that these 3 statements: `count
        = count + 1`,  `count++`, and `count += 1` all do **exactly** the same thing!\r
        \r
        Which
        one you use as a programmer is your choice, and in the future you can use
        either version, but try out the new operator here.\r
        \r
        # Do This:\r
        \r
        *
        **Change the code to use `count += 3`** instead of `count = count + 3` so
        the program will still count up by 3. (You'll need to be in text mode to
        do this.) \r
        \r
        (You'll get to try out `-=` on the next level.)
      U3 - Loops And Arrays - Add 5_markdown_instruction: |-
        # Updating Values in an
        Array with a *for* Loop\r
        \r
        The `for` loop you set up on the last level
        is actually so common that we will rarely deviate from this `for` loop setup.\r
        \r
        <img
        src="https://images.code.org/fba4d95636869c1c1c1a539fe81ded72-image-1447346793054.45.50
        AM.png">\r
        \r
        This `for` loop basically means **"for every possible index
        in `myArray`..."** and we use it as a basic building block for processing
        arrays. Common array-processing techniques like searching for a value, updating
        all values, or calculating simple stats on an array will all be completed
        using a `for` loop written with the syntax above.\r
        \r
        In fact, we're going
        to see that happen right now as we **use a `for` loop to add 5 to every value
        in an array**.\r
        \r
        # Do This:\r
        **Starter code** has been provided that
        creates an array of random values. You are also given a `for` loop that loops
        over every index in the array.\r
        \r
        * Add code inside the loop to **add
        5 to the value at every location in the array**. \r
        \t* ** Remember: ** `myArray[i]`
        refers to the element in the array at the current value of `i`.\r
        * Confirm
        your code works by **displaying the values in your array before and after
        your loop**. Below is a sample result.  Notice how, after the array has been
        processed, all of the values are 5 greater than the originals.\r
        \r
        ![](https://images.code.org/aaf36ac93098ef7f43fdda04243d17ad-image-1447792214666.29.41
        PM.png)
      U3 - Loops And Arrays - Challenge 1_markdown_instruction: |-
        # Challenge 1: Loops
        and Arrays\r
        \r
        Let's practice loops over arrays and functions.  \r
        \r
        **Challenge:**
        Write a function that finds and returns the minimum value in an array.  \r
        \r
        \r
        #
        Do This\r
        \r
        * **Starter Code: ** We have given you an array to use to test
        your function.\r
        \r
        * Write a function that finds and **returns the minimum
        value in an array.**   **Hint:** use a variable to keep track of smallest
        value you've found so far, and update it when you find a smaller one.
      U3 - Loops And Arrays - Challenge 2_markdown_instruction: "# Challenge 2: Loops\nand
        Arrays\\r\n\\r\n**Challenge:** Write a function that returns the largest\nvalue
        in an array.\\r\n\\r\n\\r\n# Do This\\r\n\\r\n* **Starter Code: ** We have\ngiven
        you an array to use to test your function.\\r\n\\r\n* Write a function\nthat
        finds and **returns the maximum value in an array.**  "
      U3 - Loops And Arrays - Counting Times_markdown_instruction: |-
        # Counting Occurrences
        of a Value\r
        \r
        Instead of displaying a true/false value for *every* item
        in the list, let's compute one value and display it.  A common thing to want
        to do is **count** the number of times a value occurs.  We can do this with
        a very small change to the code we've already got. \r
        \r
        # Do This:\r
        **Starter
        Code** is similar to past levels.  We've also created a variable called `fiveCount`.\r
        \r
        *
        ** Add an `if` statement** inside the `for` loop to **increment `fiveCount`
        if the value is equal to 5. **\r
         (Note: this will be exactly the same as
        the `if` statement you wrote in the previous level. Just giving you more practice).\r
        \r
        *
        **Run and re-run your code** to make sure that it's accurately counting the
        number of 5's in the array. Since the array is getting a random set of values
        every time you run the program, you might have to run it a bunch of times
        to thoroughly test it. Make sure you get it to run at least once when no 5's
        appear in the array.\r
        \r
        * Finally, if you'd like to, **change the first
        loop in the program to add 100 items to the array** instead of 10. Your code
        should still work to count the number of 5's, no matter how big the original
        array is!
      U3 - Loops And Arrays - Divid by 2_markdown_instruction: |-
        # Divide by 2\r
        \r
        In
        the last exercise, you updated every element in an array using a `for` loop.
        Let's get a little bit more practice with the pattern you used in the last
        exercise, this time creating the loop yourself.\r
        \r
        # Do This:\r
        **Starter
        code** is provided which creates an array of random values.\r
        \r
        * Create
        a `for` loop that **iterates over every index in the array**.\r
        \r
        * Within
        your loop, add code that **divides each value in the array by 2**.\r
        \r
        *
        Use the provided `console.log` statements to **confirm your program runs as
        expected**. Below is an example of the expected outcome.\r
        ![](https://images.code.org/04b09b795c30313c67b2242f1773b2f6-image-1447795598583.26.21
        PM.png)
      U3 - Loops And Arrays - Find Max_markdown_instruction: |-
        # Reusing a function
        pattern: find maximum\r
        \r
        Let's use this pattern one more time. This time
        we'll provide you less guidance, but you can go back and look at old exercise
        if you like. You'll need to **write a function that finds the maximum value
        in an array**.\r
        \r
        **Basic Function Pattern**\r
        * Create a **function
        that accepts an array** as input\r
        * **Create a "flag" variable** and set
        its default value before looping through the array\r
        * Loop through your
        array with a `for` loop that **visits every index in the array**\r
        * **Update
        your flag** as necessary with every iteration of your loop\r
        * **Display
        your flag** at the end of the loop.\r
        \r
        # Do This\r
        \r
        * **Starter code**
        has been provided which outlines and calls `findMaxVal` with different inputs.
        Your job will be to finish writing the function.\r
        * **Finish writing the
        function** so that it finds the maximum value in the array. Use the pattern
        outlined above to guide you, or go back to previous exercise if you need.\r
        *
        **Run the code** to ensure it is working as you intend.\r
        \r
        ![](https://images.code.org/6abb5efba9b4d179db8aa0d6df471665-image-1447878763623.32.23
        PM.png)
      U3 - Loops And Arrays - Find Min_markdown_instruction: |-
        # Reusing a Function
        Pattern: Find Minimum\r
        \r
        **Nice work! You've just written a function
        that implements an algorithm to process an array!** If you feel comfortable
        with the basic pattern you used to create this function, you can quickly create
        functions for many other useful algorithms that work on arrays.\r
        \r
        **Basic
        Function Pattern**\r
        \r
        * Create a **function that accepts an array** as
        input.\r
        * **Create a "flag" variable** and set its default value before
        looping through the array.\r
        * Loop through your array with a `for` loop
        that **visits every index in the array**.\r
        * **Update your flag** as necessary
        with every iteration of your loop.\r
        * **Display your flag** at the end of
        the loop.\r
        \r
        Let's use this pattern to **write a function that finds
        and displays the smallest value in an array**.\r
        \r
        Instead of using a true/false
        flag to indicate whether we found a value, **we'll use a variable to keep
        track of the smallest value we've seen in the array so far**.\r
        \r
        # Do
        This:\r
        \r
        **Starter code** has been provided which outlines and calls `findMinVal`
        with different inputs. Your job will be to finish writing the function.\r
        \r
        *
        Before programming, try to **develop an algorithm that you could use to find
        the minimum value in an array**. Use the pattern outlined above as a guide.\r
        *
        **Write code** in the places indicated with comments to complete the function.  \r
        \t*
        You'll want to use the `minVal` variable to keep track of the smallest value
        you've found so far.\r
            * You'll need to **write an `if` statement**
        that checks whether the current value in the array is less than `minVal`.
        If it is, then update the smallest value.     \r
        * **Run the code** to ensure
        it is working as you intend.\r
        \r
        <details><summary><strong>HINT: pseudocode</strong>
        [click to expand]</summary>\r
        <p>\r
        Here is some pseduocode that you should
        be able to implement.\r
        </p>\r
        <pre>\r
        minVal = first value in array \r
        for
        EACH value IN array\r
          if value < minVal\r
             minVal = value\r
        \r
        display(minVal)\r
        </pre>\r
        </details>\r
        \r
        \r
        ![](https://images.code.org/e6abdc34c653e4bb0885ffabcf897fc5-image-1447877822696.16.03
        PM.png)
      U3 - Loops And Arrays - Functions that Return Value_markdown_instruction: |-
        #
        Using functions that return values\r
        \r
        We have used functions that return
        values many times before, but in this exercise you will see how they are actually
        created by using the `return` command. The function `minVal` accepts two numbers
        as input and returns the minimum of the two as output. You can call this function
        just like any other, and **because it returns a number you can treat the function
        call as if it were a number**\r
        \r
        # Do This\r
        \r
        * **Starter code** has
        been provided which creates the function `findMin` and generates two random
        values.\r
        * **Inspect the code of `findMin` to understand the logic of this
        function**.\r
        * **Call the function with the values provided** and ensure
        the minimum value is returned. You should treat the function call **as if
        it were a number** to generate the output shown below.\r
        \r
        ![](https://images.code.org/32ddaacdc9c0f820b9b58514b55dcbba-image-1447946068945.gif)
      U3 - Loops And Arrays - General Search Param_markdown_instruction: |-
        # General
        Search\r
        \r
        In order to make a general search function, we should be able
        to **search for any value, not just 5**.  We can do this by making the value
        to search for a parameter as well.\r
        \r
        # Do This:\r
        \r
        * **Add a second
        parameter** to your `search` function to represent the item to search for.
        This example uses the name `searchValue`.\r
        \r
        * **Update the code inside
        the function to check for `searchValue` instead of 5.** \r
        \r
        * **Call your
        search function** to search for different values inside of each array.\r
        \r
        *
        The `console.log` statement **is now inaccurate**. Change it to say "Array
        has searchValue: " followed by the value in flag.\r
        \r
        (These steps are
        shown in the code animation below.)\r
        \r
        ![](https://images.code.org/b71a0bd1cf725d58ae76836a6422ebeb-image-1447695946760.gif)
      U3 - Loops And Arrays - Intro For Loop_markdown_instruction: |
        # *for* Loop\r
        \r
        It's
        very common to want to repeat a set of commands a particular number of times.
        Recently, we have been using the `while` loop to do this by creating a counting
        variable, setting the boolean expression, and incrementing the value of the
        counter by 1 each time. We've also used the `for` loop before, and we'll
        explain it more in-depth now.  The `for` loop was created to wrap all of those
        components related to counting loops into a single line of code.\r
        \r
        <img
        src="https://images.code.org/b93a044fc07cb4bbabb95b43132a005b-image-1447342829632.png"
        style="width: 450px">\r
        \r
        <img src="https://images.code.org/d0d8f34d0f4aabaf66084ceac282448e-image-1447343652405.png"
        style="width: 450px">\r
        \r
        Programmers would typically read a loop `for
        (var i = 0; i < 10; i++)` out like this: <br>\r
        **"for variable i starting
        at 0, while i is less than 10, i plus plus (or increment i by 1)"**\r
        \r
        Notice
        that in reading a `for` loop we still use the word "while".\r
        \r
        You may
        notice that when you drag a `for` loop out from the toolbox that we've set
        it up for you with `i` as the variable. \r
        \r
        <details> \r
        <summary>**Why
        is `i` the variable?** [click to expand]</summary>  \r
        \r
        Using the single
        character `i` as the variable in a `for` loop has become a convention in programming
        for a variety of reasons. One reason is that `for` loops are often used when
        processing arrays - **you can think of `i` as shorthand for index. **   But
        there is no reason why you have to use `i` if you don't want to.  It's just
        a variable.  \r
        </details>\r
        \r
        # Do This:\r
        \r
        * Drag out the `for`
        loop.\r
        \r
        * Insert a `console.log` statement inside the `for` loop that
        displays `i`.\r
        ![](https://images.code.org/2a81206296dc693463d7b147f2f93dcb-image-1447446254447.gif)\r
        \r
        *
        Try changing:\r
        \t* The condition to stop the loop (make it run longer).\r
            *
        The amount you change `i` by each time (try changing `i++` to something like
        `i += 5`).\r
            * The starting value of `i`.\r
        \r
      U3 - Loops And Arrays - Linear Search_markdown_instruction: |-
        # Algorithms and
        General-Purpose Functions\r
        \r
        Over the next several exercises we will be
        **creating a general-purpose function to determine if a value is contained
        within an array**.  Over the course of these exercises, keep an eye out for
        the general pattern we are using, because you'll get to use it again to create
        functions of your own.\r
        \r
        To begin, we'll start simple. We'll write
        code that **checks whether an array contains a specific value**. At every
        index, your program should display "true" if the value at that index is
        a 5 and "false" otherwise.\r
        \r
        # Do This:\r
        The **starter code** is
        similar to past levels, but you'll notice that we use a loop to construct
        `myArray` rather than appending items one line at a time.  You are also given
        the `for` loop you will use.\r
        \r
        * Add an `if` statement inside the `for`
        loop to check if the value of the array at the current index is 5. \r
         *
        If the value is equal to 5, write **true** to the console. Otherwise write
        **false** to the console.\r
        * **Test your code** to make sure it is working
        as you intend. An example output is below.\r
        \r
        ![](https://images.code.org/a64c3be0a23e25bef67494bdfeb61415-image-1447879494916.44.45
        PM.png)
      U3 - Loops And Arrays - Loop Array If_markdown_instruction: |-
        # *for* Loop with
        *if*\r
        \r
        Sometimes we want to find values in an array that meet certain
        conditions.  We can add an **`if` statement inside the `for` loop** to individually
        check every value within the array. To practice this, we will create a `for`
        loop that will **display every value in the array greater than 5**.\r
        \r
        #
        Do This:\r
        ** Starter code** has been been provided that creates an array
        of random values.\r
        \r
        * Add a `for` loop that references every index in
        the array.\r
        \r
        * Add an `if` statement inside the `for` loop that **displays
        every value in the array greater than 5** using `console.log`\r
        \t![](https://images.code.org/969077ff23232e410ce17520b0a71e1e-image-1447390972867.gif)\r
            \r
        *
        **Note:** Because the original array is being constructed with random values
        it's *possible* that it might not have any values greater than 5.  Just run
        the program a few times to make sure it works.  An example of the possible
        output is below.\r
        \r
        ![](https://images.code.org/266e23afc3533ebd63b393b2ee8682d8-image-1447796380510.39.26
        PM.png)
      U3 - Loops And Arrays - Make it a Function - add list parameter_markdown_instruction: |-
        #
        Generalize *search* by Making It Into a Function - Part 2\r
        \r
        Right now,
        our function just searches for a 5 in a global array called `testArray`.  We
        would like to be able to **use this function to search through any array**,
        so we will be adding a parameter to allow us to specify which array should
        be searched.\r
        \r
        # Do This:\r
        \r
        * **Add a parameter to the `search`
        function called `list`**.\r
        * **Modify the code inside the function** so
        that it loops over `list` (the parameter) instead of `testArray` (the global
        variable).\r
        * **Call your function** with each of the arrays provided at
        the top of the program.\r
        \r
        (These steps are shown in the code animation
        below.)\r
        \r
        ![](https://images.code.org/af4cf7bd95c09f3e8e3548a3383c4a4e-image-1447693121377.gif)
      U3 - Loops And Arrays - Make it a Function_markdown_instruction: |-
        # Generalize
        *search* by Making It Into a Function\r
        \r
        You've just written code to
        search for a value in a list!  If we could generalize this behavior, it might
        be useful to us in the future - it's probably something that we want to do
        over and over again.  \r
        \r
        Over the next few levels, we'll build up a
        very useful, general function for searching for *any* value in *any* list.  But
        we'll do it one step at a time...\r
        \r
        # Do This:\r
        \r
        **Note:** We've
        provided **new starter code** that implements the pseudocode from the last
        exercise. It also **creates two more arrays** that we'll be using later for
        testing.  For this level just worry about `testArray`. \r
        \r
        * **Run the
        starter** code to verify that it works correctly.\r
        * **Create a new function**.
        Name the function `search`.\r
        * **Move the code that checks for a 5 inside
        the function.** **Note:** You must move the boolean variable inside the function
        as well, or it won't reset each time you call the function!\r
        * **Call the
        function** to make sure your code still works.  The actual behavior will be
        the same as when you ran it the first time.  The difference now is that you're
        calling a function to do it.\r
        \r
        (Steps are shown in code animation below.)\r
        \r
        ![](https://images.code.org/dfad49ac35cd605410c52828716b712c-image-1447631609779.gif)
      U3 - Loops And Arrays - Multiple Returns_markdown_instruction: |-
        # Multiple
        Returns\r
        \r
        You can actually include multiple return statements in a function.  Our
        function for findMax could be written like this:\r
        \r
        <img src="https://images.code.org/bfc70bf49e97f7aa9354ba867076284c-image-1447380154324.02.17
        PM.png" style="width: 270px; float:right">\r
        \r
        This functions returns
        a value **as soon as it knows the result of the boolean condition**. As a
        result **some lines of code may never run**. This can lead to some very devious
        errors in which statements effectively become unreachable because of small
        mistakes in logic. Having many return statements within a larger function
        can make it very difficult to understand how a function works. Some tips to
        avoid these issues are below.\r
        \r
        **Best practices when writing Functions
        with returns:** \r
        \r
        * Calculate whatever you need\r
        * Store it in a variable\r
        *
        Return that variable at the end of the function\r
        \r
        **Note:** You may sometimes
        break the process described above,  but for now this is a way to help you
        think about what your code needs to do.\r
        \r
        \r
        # Do This\r
        \r
        * Check
        out the example of a function that accepts two numbers and returns the larger
        the two.\r
        \r
        * **Call the function with a couple different sets of numbers.
        `console.log` the results.**
      U3 - Loops And Arrays - Print Array_markdown_instruction: |
        # Print an Array
        with a *for* Loop\r
        \r
        As you know, we can use variables as indexes in an
        array.  We can take advantage of this fact to create a `for` **loop which
        visits every index in an array**.\r
        \r
        ![](https://images.code.org/5aeb9986535424b1d737b8221685196f-image-1447446416081.26.01
        PM.png)\r
        \r
        In this `for` loop, the `i` eventually gets set to every possible
        index in the array. You are going to use a loop of this kind to display all
        the values in an array.\r
        \r
        # Do This:\r
        **Starter code** is provided
        that adds several random values to an array.\r
        \r
        * Create a `for` loop
        that uses the syntax shown below (and above) to **iterate through every index
        in the array**.\r
        \t![](https://images.code.org/930b40b3e3f204605a0fd27fee9d8b8f-image-1447346008842.gif)\r
            \r
        *
        Use `console.log` to **display the contents of the array at each index**.\r
        \t![](https://images.code.org/43431613ea0c045411499dd0e68e7feb-image-1447345996258.gif)\r
            \r
        *
        Run the program to **confirm it is displaying all the values**.\r
      U3 - Loops And Arrays - Printing Single True_markdown_instruction: |-
        # Print
        a Single True/False Value\r
        \r
        Sometimes we don't care about the count
        and just want to know if the array contains a 5 or not. **Let's try to display
        a single true/false indicating whether the list contains a 5.** There are
        two cases to consider: \r
        \r
        1. The list **does not contain any 5's**;
        you need to display **"false"**.  \r
        2. The list **contains at least one
        5**; you need to display **"true"**.\r
        \r
        **HINT:** one way to do this
        is to reference your counter variable `fiveCount` after the array has been
        processed.\r
        \r
        # Do This:\r
        **We've pulled your code from the previous
        level so you can continue to add to it**.\r
        \r
        * Add a **`console.log` statement
        to display a single "true" or "false"** indicating whether there is a
        5 anywhere in the array.\r
        \r
        | Example output 1: One or more 5's | Example
        output 2: No 5's |\r
        | --- | --- |\r
        |![](https://images.code.org/15ed45d471e9279a8739bad5f31c3a4d-image-1447452726753.06.31
        PM.png) | ![](https://images.code.org/ed19957449c6b68cb19326a6f430edec-image-1447452740979.06.46
        PM.png)|
      U3 - Loops And Arrays - Return Index_markdown_instruction: |-
        # Search with Return
        Value of Index\r
        \r
        The search function you were working on before is back.
        We are going to try a new challenge. **Instead of returning true or false,
        return the index at which the value was found.**  \r
        \r
        **What if the value
        doesn't exist?** You should return -1.  The reason for returning -1 is that
        when you write a function that returns a value it's expected that it will
        return one type of data.  So if we're returning a number for the index, we
        should also return a number that indicates it wasn't found. Since -1 (or
        any negative number) is not a possible index for an array, we can use -1 to
        indicate that whatever we're looking for wasn't found.\r
        \r
        # Do This\r
        \r
        *
        **Update the function search(list, val) to return the index at which the value
        was found.** If the value is not found return -1. (**Note:** If the value
        appears more than once you can return any of the indexes at which it appears.)
      U3 - Loops And Arrays - Return Value_markdown_instruction: |-
        # Use a function
        that returns a value in an app\r
        \r
        We create functions to **contain blocks
        of code that will be used multiple times within our program**. The same is
        true with functions that return values. Let's see an example of how we might
        use one of the functions we've written.\r
        \r
        This exercise comes with starter
        code that creates a **simple turtle driver app**. The x and y location of
        the turtle are stored in the variables `xloc` and `yloc`. An event handler
        is used to update these values when the arrow keys are pressed, and then a
        separate `updateTurtle` function is called to draw the turtle on the screen.\r
        \r
        Currently
        the turtle can drive off the screen. If we are clever about how we use our
        `constrain` function, however, we can prevent this from happening.\r
        \r
        #
        Do This\r
        \r
        * **Starter code** is provided which allows the turtle to move.
        Additionally a **working version of `constrain`** is provided.\r
        * **Use
        the `constrain` function** within the `updateTurtle` function to prevent the
        values of `xloc` and `yloc` from going outside the size of the screen. Recall
        the screen is **320 by 450 pixels**.\r
        * **Run your app** and confirm the
        turtle cannot leave the screen.
      U3 - Loops And Arrays - Search and Remove_markdown_instruction: |-
        # Search and
        Remove\r
        \r
        When search returns the index of the item we can use that information
        to do some useful things. One thing we can do is  search for a value and remove
        it. \r
        \r
        # Do This\r
        \r
        * Use search to **find the index of 5.**\r
        \r
        *
        **Save the index in a variable.**\r
        \r
        * **Remove the saved item at the
        index as long as the value is not -1.**
      U3 - Loops And Arrays - Search with Boolean Var_markdown_instruction: |
        # Using
        a Boolean Variable as a Flag\r
        \r
        We are going to do a **challenge that
        is similar to the last exercise** but, rather than counting the number of
        5's in the array, we're going to use a different **interesting programming
        technique for processing arrays** that might prove useful to you in the future.
        \r
        \r
        # Using a Boolean Flag\r
        \r
        <img src="https://images.code.org/756fcab9d5f48ace76eb5d300fcf58af-image-1447624065160.png"
        style="float: right; width: 250px">\r
        The technique is generally referred
        to as **using a boolean "flag."** To understand this idea, think about how
        some mailboxes work: the flag starts down, and when a person wants to let
        the mail carrier know there is something to pick up, she puts the flag up
        to notify the mail carrier that there is outgoing mail in the box.\r
        \r
        We
        can use a variable to do something similar when programming. Rather than incrementing
        a count every time we find a 5 in the array, we will use a variable that acts
        like a **flag**.  We will create a variable before the loop and assign it
        `false` to start (flag is down). Then, as we process the array, if we find
        a 5, set the variable to `true` (put the flag up).  \r
        \r
        Here is some pseudocode:\r
        ```\r
        var
        flag = FALSE\r
        FOR EACH item IN list\r
          IF (item EQUALS 5)\r
            flag
        = TRUE\r
            \r
        DISPLAY (flag)\r
        ```\r
        Notice that it doesn't matter
        if we find more than one 5.  It will just keep setting the flag to `true`.  However,
        if there are no 5's, the `if` statement in the loop will never execute, and
        so the variable will remain the value it was initialized to, which was `false`.\r
        \r
        #
        Do This:\r
        \r
        * **Implement the pseudocode above** in JavaScript. \r
        *
        We've given you code that constructs an array of random values, and the standard
        `for` loop for looping over an array.\r
        * The output will be no different
        from the previous exercise, but you should still **confirm that your program
        correctly identifies when a 5 is in the array.**\r
        \r
        | One or more 5's
        | No 5's |\r
        | --- | --- |\r
        |![](https://images.code.org/15ed45d471e9279a8739bad5f31c3a4d-image-1447452726753.06.31
        PM.png) | ![](https://images.code.org/ed19957449c6b68cb19326a6f430edec-image-1447452740979.06.46
        PM.png)|\r
        \r
      U3 - Loops And Arrays - useFindMin_markdown_instruction: |-
        # Using functions
        that return values\r
        \r
        We have used functions that return values many times
        before, but in this exercise you will see how they are actually created by
        using the `return` command. The function `minVal` accepts two numbers as input
        and returns the minimum of the two as output. You can call this function just
        like any other, and **because it returns a number you can treat the function
        call as if it were a number**\r
        \r
        # Do This\r
        \r
        * **Starter code** has
        been provided which creates the function `findMin` and generates two random
        values.\r
        * **Inspect the code of `findMin` to understand the logic of this
        function**.\r
        * **Call the function with the values provided** and ensure
        the minimum value is returned. You should treat the function call **as if
        it were a number** to generate the output shown below.\r
        \r
        ![](https://images.code.org/32ddaacdc9c0f820b9b58514b55dcbba-image-1447946068945.gif)
      U3 - Movie Bot - Multiple If Sequences_markdown_instruction: |-
        # Adding Rating
        to Keywords\r
        \r
        Up until now our movie suggestions have just been based
        on genre. Let's now also look for keywords related to the movie rating like
        "G", "PG", "PG-13", and "R" so we can give movie suggestions based
        on both genre and rating.\r
         \r
        **Note: ** We've updated the flowchart
        below (highlighted in yellow) to see the logic we are trying to add.\r
        \r
        **Note
        2: ** The logic of the program right now will yield some odd results - there
        are some things you can type that will give 2 suggestions - this is expected,
        for now.  We are just taking a small step here.  We'll refine the code again
        in later levels.\r
        \r
        # Do This:\r
        \r
        * **Add another set of `if`, `else-if`,
        and `else` statements** inside the question `if` statement to **check for
        keywords for movie ratings (G, PG, PG-13, and R).**\r
        \r
        * **Hint:** When
        checking for "G", "PG" and "R" you need to be a little clever.  R and
        G are letters that will show up in lots of words and PG will get confused
        with PG-13. We want to check for "g" and "r" with spaces on either side.
        So make sure to use `" g "` where there is a space on either side of g instead
        of `"g"`. For "pg" you can just add a space after the pg to look for `"pg
        "`\r
        \r
        * **Test out a couple sentences with your keywords** to make sure
        the change worked.\r
        \r
        <img src="https://images.code.org/886713cfedf4802e174b68ed2eb36d4b-image-1455816199174.png"
        style="width: 100%">\r
        \r
        <a href="https://images.code.org/886713cfedf4802e174b68ed2eb36d4b-image-1455816199174.png"
        target="_blank">Click to open in separate window.</a>
      U3 - Movie Bot - Nested Motivation_markdown_instruction: |-
        # Checking for a
        Question\r
        \r
        We're going to start adding some "intelligence" to our
        Movie Bot. Since we've added `includes` it can now tell if its keywords appear
        anywhere in the input. As a result some inputs may be questions while others
        might simply be statements. **We'd like the movie bot to respond differently
        to questions and statements.**\r
        \r
        In order to tell when the user is asking
        a question **we will be checking whether the input includes a question mark
        **.\r
        \r
        # Do This:\r
        \r
        * Add a separate statement to **check if the
        input includes a "?"**. \r
        * If the input includes a question mark **print
        "That's a good question." before the recommendation.**\r
        * Otherwise print
        **"I only answer questions." before the recommendation.**\r
        * **Test out
        a couple sentences with your keywords** to make sure the change worked.\r
        \r
        **Example
        Input --->** | **Output**\r
        ---|---\r
        What's the best action movie? | That's
        a good question. The best action movie is any James Bond movie.\r
        I love
        comedy | I only respond to questions. The best comedy movie is The Princess
        Bride.\r
        <br>\r
        **Note:** Check out the flowchart below to see the logic
        we are trying to change.\r
        \r
        <img src="https://images.code.org/e32fd89b6e03b9d49c94e39e79120c03-image-1446072381510.png"
        style="width: 100%">\r
        \r
        <a href="https://images.code.org/e32fd89b6e03b9d49c94e39e79120c03-image-1446072381510.png"
        target="_blank">Open diagram in a new tab</a>
      U3 - Movie Bot - When Multiple If Statements_markdown_instruction: |-
        # Adding
        a Separate *if*\r
        \r
        It's still the case that sometimes you want to have
        two completely separate groups of `if` statements because there are separate
        conditions you want to check and possibly have responses for both. You don't
        always just keep adding to a giant `if` statement forever.\r
        \r
        In the Movie
        Bot demo you probably saw that if you type "please" and "thank you" it
        adds something extra to the response (it says something like "Thanks for
        being polite!"). Let's add this functionality to your movie bot as well.
        \r
        \r
        **Note: ** Check out the flowchart below to see the logic we are trying
        to add.\r
        \r
        # Do This:\r
        \r
        * ** Add an `if` and `else-if` statement
        that checks for "please" and "thank you"**. \r
        \t* If the string includes
        "please" it should say "Thank you for being so polite!" before it gives
        its response.\r
            * If the string includes "thank you" it should say
        "You are very welcome!" before it gives its response.\r
        \r
        * **Test out
        a couple sentences with your keywords** to make sure the change worked.\r
        \r
        <img
        src="https://images.code.org/3dac4019734e63ecbfd4784c82fbd402-image-1461771319064.png"
        style="width: 100%">\r
        \r
        <a href="https://images.code.org/3dac4019734e63ecbfd4784c82fbd402-image-1461771319064.png"
        target="_blank">Click to open in separate window.</a>
      U3 - Movie Bot - toLowerCase_markdown_instruction: |-
        # Dealing with Character
        Case\r
        \r
        What if the user types **ACTION** instead of **action**? These
        are two different strings to the computer and therefore it won't recognize
        they are the same. We want Movie Bot to treat words the same ignoring the
        case of the letters. We can do this using the string command `toLowerCase`.\r
        \r
        **Note:
        ** Check out the flowchart below to see the logic we are trying to add. \r
        \r
        #
        Do This:\r
        \r
        * **Try typing COMEDY, ACtioN, horroR, and Romance** into
        Movie Bot.\r
        \r
        * **Use the `toLowerCase` command** to change all user input
        into lowercase letters after they enter it.\r
        \r
        * **Check that COMEDY,
        ACtioN, horroR, and Romance generate the same recommendations** as comedy,
        action, horror, and romance.\r
        \r
        <img src="https://images.code.org/183082e89d296b88112a5a5380afac6c-image-1446069165327.png"
        style="width: 100%">\r
        \r
        <a href="https://images.code.org/183082e89d296b88112a5a5380afac6c-image-1446069165327.png"
        target="_blank">Open diagram in a new tab</a>
      U3 - Practice Create Performance Task_markdown_instruction: |-
        # Practice Create
        Performance Task\r
        \r
        You've finally made it to the end of the Programming
        Unit! We will continue some programming in the next unit, but for now we are
        going to use all the new concepts you have learn to create something of your
        own design! \r
        \r
        # Do This:\r
        \r
        * **Read the Project Overview** to understand
        the entire project.\r
        * **Follow the Project Planning Guide**.\r
        * **Implement
        your final program in this level**.
      U3 - Read Record - 1.2_markdown_instruction: |-
        # Callback Functions\r
        \r
        In
        the last exercise you **read records from a remote database back into your
        app**. There are a few steps that happened in that process.\r
        \r
        * Your
        program called `readRecords`, **sending a request for data across the Internet**
        to your remote database.\r
        * The database collects the requested records,
        places them in an array of objects, and **sends that array back across the
        Internet**.\r
        * Your program **receives the array of objects**.\r
        * Your
        program **calls the callback function of the `readRecords` command**, placing
        that array **in the `records` parameter** of that callback function.\r
        \r
        There's
        actually a **delay between when your program calls `readRecords` and when
        the callback function is called**. We can even see this delay in App Lab.\r
        \r
        #
        Do This\r
        \r
        **Your code from the previous exercise** is provided.\r
        \r
        *
        **The speed on App Lab has been set to its slowest setting**. This won't
        change the way your program runs, but it makes it easier to see the order
        in which commands are run.\r
        * **After your `readRecords` command place another
        `console.log` statement**\r
        * **Run the program** and pay close attention
        to **the order in which the commands run**. You can **check the Debug Console**
        to see which `console.log` command ran first.
      U3 - Read Record - 1.5_markdown_instruction: |-
        # Data Commands are Slow\r
        \r
        Typically
        we think of programs running one command after the other in the order they
        are written. This makes it easy to keep track of what is happening in your
        program. Since commands running locally on your computer happen **essentially
        instantaneously**, you never get "stuck" waiting for one command to finish
        before running the next one.\r
        \r
        **Data commands take a long time to run**.
        Once your computer sends a request to your database it needs to wait for the
        response to be sent across the Internet. We're going to see **how much slower
        the data commands are**.\r
        \r
        The `getTime()` block returns the current
        time on your computer. It is stored as a number which counts **how many milliseconds
        have passed since January 1st, 1970**. By repeatedly calling this command
        you can determine how long different commands take to run.\r
        \r
        # Do This\r
        \r
        **Starter
        code has been provided** that displays the current time at multiple points
        in your program\r
        \r
        * Run the program. Notice that the same information
        from the table is printed in the console.
      U3 - Read Record - 1.6_markdown_instruction: |-
        # Data Commands are Slow\r
        \r
        Typically
        we think of programs running one command after the other in the order they
        are written. This makes it easy to keep track of what is happening in your
        program. Since commands running locally on your computer happen **essentially
        instantaneously**, you never get "stuck" waiting for one command to finish
        before running the next one.\r
        \r
        **Data commands take a long time to run**.
        Once your computer sends a request to your database it needs to wait for the
        response to be sent across the Internet. \r
        \r
        **Let's have a look at just
        how much slower the data commands are**.\r
        \r
        \r
        \r
        **The array of objects
        is passed back as the parameter of the callback function for `readRecords`.
        ** A callback function is required for readRecords just like createRecord
        as the request out to the database for records will take varying amounts of
        time and it is necessary to have a way to notify the program once all the
        records have been collected and return. \r
        \r
        Remember that because of scope
        function **parameters are only accessible inside their function.** Thus we
        must **use the records from inside the readRecords callback function.**  This
        is also good programming practice as the asyncronous nature of fetching data
        from remote locations requires that we **wait for the callback function to
        be called to know that we have recieved all the information from the data
        table.**\r
        \r
        # Do This\r
        \r
        **A set of data has been provided** in a
        table named 'myTable'\r
        \r
        * **Open the Data Viewer** to look at the table
        in 'myTable'\r
        * **Add a `readRecords` command** to your app.\r
        * **Add
        a `console.log`** inside the callback function of `readRecords` to **print
        the `records`**\r
        * Run the program. Notice that the same information from
        the table is printed in the console.\r
        \r
        ![](https://images.code.org/fe3db85465b5dd8a983ba5615f4e851d-image-1449504949223.gif)
      U3 - Read Record - 1_markdown_instruction: |-
        # Reading Records\r
        \r
        You have
        learned how `createRecord` can be used to create permanent copies of your
        data in a remote database. This allows your app to save information it has
        collected across multiple runs of your program. **In order to use this data
        you'll need a way to read it out of your database and back into your app**.\r
        \r
        <img
        src="https://images.code.org/ac5fb29d4935df7b5825f4cabd6b89e8-image-1449502640243.35.37
        AM.png" style="width: 350px; float: right">\r
        \r
        Check out the new command
        `readRecords`. This command **requests all of the records stored in one of
        the tables of your database**. Follow the instructions below to try running
        this command before moving on to learn more about how it works.\r
        \r
        When
        the database has collected all the records it responds by the sending an array
        of objects back to your program, one object for every record in the table.
        Your system will then **call the callback function of the `readRecords` command,
        placing this array of objects in the `records` parameter**.\r
        \r
        # Do This\r
        \r
        **Your
        database already contains data** in a table named 'myTable'\r
        \r
        * **Open
        the Data Viewer** to look at the data in 'myTable'\r
        * **Add a `readRecords`
        command** to your app.\r
        * **Add a `console.log` command** inside the callback
        function of `readRecords` to **display the `records`**\r
        * Run the program
        and **confirm that the same information you saw in the Data Viewer is displayed
        in the console**.\r
        \r
        ![](https://images.code.org/fe3db85465b5dd8a983ba5615f4e851d-image-1449504949223.gif)
      U3 - Read Record - 2_markdown_instruction: |-
        # Changing the Table\r
        \r
        The
        first parameter in the `readRecords` command is the name of the table you
        wish to read records from.\r
        \r
        ![](https://images.code.org/9f809d3a5e5c43871dd237dbc0ca66dc-image-1449515754521.png)\r
        \r
        You
        have been using the name "myTable", but just like variables and IDs **your
        tables should be given descriptive and meaningful names**.\r
        \r
        # Do This\r
        \r
        **Starter
        code is provided** which calls `readRecords` for a table that does not exist.
        \r
        **The database already includes a table**\r
        \r
        * Open the Data Viewer
        to **find the name of the new tables**\r
        * **Change the table parameter**
        to pull the records from the new table\r
        * Run the program.  Your output
        should look like below.\r
        \r
        ![](https://images.code.org/adaca79af4c7b521674b58f721eed0c0-image-1449516148398.21.43
        PM.png)
      U3 - Read Record - 3_markdown_instruction: |-
        # Debugging: Wrong Table Name\r
        \r
        When
        debugging programs with data commands it's useful to know some common errors
        you might be making. Let's see what happens when we try to `readRecords`
        from a table that doesn't exist in our database.\r
        \r
        # Do This\r
        \r
        **Starter
        code is provided** that calls `readRecords` and displays the `records` parameter
        from the callback function.\r
        \r
        * **Change the table name** in readRecords
        to a table that does not exist\r
        * **Run the program** to see what value
        is passed to the `records` parameter.\r
        * **Did you get an error? Did anything
        else change? Make a note of the behavior you see for future debugging**\r
        \r
        <details><summary>**What
        you should see (read this after trying it yourself)**</summary>If you read
        from a table that doesn't exist you won't get any error messages and the
        database will respond with an empty array. Your database is left as it was
        before.</details>
      U3 - Read Record - 4.1_markdown_instruction: |-
        # Using Your Records\r
        \r
        The
        `records` parameter in your callback function is **an array of objects**,
        just like you have used before in this class. You can use reference **the
        indexes of the array and properties of each object** just like before. Just
        remember, **you only can use the `records` parameter** within the callback
        function, and **the callback function is not called immediately**.\r
        \r
        #
        Do This\r
        \r
        **Starter code is provided** which reads records from a table
        called "myMovies"\r
        \r
        * **Add code** inside the callback function of
        `readRecords` that only displays the first movie in the array\r
        * **Run the
        program** and confirm that you are displaying the correct movie.\r
        \r
        ![](https://images.code.org/827a410730369edf42ca7e21f0fa6b01-image-1449517957324.51.38
        PM.png)
      U3 - Read Record - 4_markdown_instruction: |-
        # Reading Records: Printing Individual
        Records\r
        \r
        Usually we want to pull out each record individually. We have
        already seen that records is an array of objects. Therefore we can do this
        by using the array notation to access each object by its index.\r
        \r
        # Do
        This\r
        \r
        The data from the last level has been provided. \r
        \r
        * Add
        a call to `readRecords`\r
        * Set the table name to the movies table.\r
        *
        Inside the callback function add a `for` loop to loop over the records.\r
        *
        Inside the for loop add a console.log statment to print out the current object
        using its location in the array.\r
        * Run the program. Your output should
        look like below.\r
        \r
        ![](https://images.code.org/827a410730369edf42ca7e21f0fa6b01-image-1449517957324.51.38
        PM.png)
      U3 - Read Record - 5 and half_markdown_instruction: |-
        # Reading Records: Printing
        Individual Records\r
        \r
        Sometimes we want to get even more specific than
        printing out the whole object. We already say we can get each individual object
        using array notation. So we can then use dot notation to get the value of
        a specific property. Let's print out just the names of the movies.\r
        \r
        #
        Do This\r
        \r
        <img src="https://images.code.org/fc419dc05837b049e40e50c04166e0b8-image-1449518323083.58.00
        PM.png" style="width: 250px; float: right">\r
        \r
        Starter code has been
        provided that prints out each object in the array. The data from the last
        level has also been provided. \r
        \r
        * Update the console.log inside the
        `for` loop to print out the names of each individual movie.\r
        * Run the program
      U3 - Read Record - 5_markdown_instruction: |-
        # Reading Records: Looping over
        the Array\r
        \r
        We can loop over the `records` array just like any other
        array. This allows us to **perform the same action for every object in the
        array**. Recall that the standard way of doing this is to use a `for` loop,
        as in.\r
        \r
        `for(var i = 0; i < records.length; i++)`\r
        \r
        # Do This\r
        **Starter
        code is provided** which reads records from a table called "topMovies"\r
        \r
        **Your
        database already includes a table called "topMovies"**\r
        \r
        * Add a `for`
        loop to the callback function of the `readRecords` command\r
        * Add code to
        your `for` loop that displays **only the title of every movie in the list**.\r
        \r
        ![](https://images.code.org/5b13735c52308f57241e7c34707c82e6-image-1449783907117.44.02
        PM.png)
      U3 - Return Values - constrainTurtle_markdown_instruction: |-
        # Use a Function
        that Returns a Value in an App\r
        \r
        We create functions to **contain blocks
        of code that will be used multiple times within our program**. The same is
        true with functions that return values. Let's see an example of how we might
        use one of the functions we've written.\r
        \r
        This exercise comes with starter
        code that creates a **simple turtle driver app**. The x and y location of
        the turtle are stored in the variables `xloc` and `yloc`. An event handler
        is used to update these values when the **arrow keys are pressed**, and then
        a separate `updateTurtle` function is called to draw the turtle on the screen.\r
        \r
        Currently
        the turtle can drive off the screen. If we are clever about how we use our
        `constrain` function, however, we can prevent this from happening.\r
        \r
        #
        Do This:\r
        \r
        * **Starter code** is provided which allows the turtle to
        move. Additionally a **working version of `constrain`** is provided.\r
        *
        **Call the `constrain` function twice** within the `updateTurtle` function
        to prevent the turtle from going outside the screen.\r
        \t* One call to the
        function for `xloc` and one time for `yloc`.\r
            * Recall the screen is
        **320 by 450 pixels**.\r
        * **Run your app** and confirm the turtle cannot
        leave the screen.\r
        \r
        ![](https://images.code.org/f2e24abdf2d4008dfdc4f2ba9e23ff2c-image-1447958362880.gif)
      U3 - Return Values - debuggingConstrain_markdown_instruction: |-
        # Debugging
        and Multiple Return Statements: *constrain*\r
        \r
        We're going to debug another
        function that uses multiple return statements. The function is called `constrain`
        and is used to limit an input number to a certain range. The function accepts
        three parameters.\r
        \r
        * `input` : the number to be constrained.\r
        * `low`
        : the lower bound of the range. If `input` is below this value, the function
        should return the value of `low`.\r
        * `high` : the upper bound of the range.
        If `input` is above this value, the function should return the value of `high`.\r
        \r
        <details>\r
        <summary>**Click
        for sample input and output for `constrain`**</summary>\r
        * `constrain(15,10,20)`
        should return 15 since it is within the range of 10 to 20.\r
        * `constrain(5,10,20)`
        should return 10 since the input is below the range of 10 to 20.\r
        * `constrain(25,10,20)`
        should return 20 since the input is above the range of 10 to 20.\r
        </details>\r
        <br>\r
        Unfortunately,
        because of the way this function was written, it does not always work as expected.
        In particular, **because of how `return` was used, some portions of the function
        never run**. Change the structure of the function to **use the pattern you
        have been shown in previous exercises, included below**.\r
        <br> <br>\r
        **Pattern
        for Functions that Return Values**\r
        * Use parameters to provide input.\r
        *
        Declare a variable that will be used as output, possibly initializing its
        value.\r
        * Update the value in your output variable throughout your program.\r
        *
        Return your output variable on the last line of your function.\r
        \r
        # Do
        This:\r
        \r
        * **Run the program** and identify the errors generated in the
        output.\r
        * **Inspect the logic of `constrain`** to identify the logical
        errors.\r
        * **Rewrite** `constrain` to make use of the **pattern for functions
        that return values**, shown above.\r
        * **Run the program** to ensure it is
        now running as you expect.\r
        \r
        ![](https://images.code.org/38afcc5420e084b3146a8b12cc2d0e72-image-1447952855846.07.25
        AM.png)
      U3 - Return Values - debuggingMaxVal_markdown_instruction: |-
        # Debugging and
        Multiple Return Statements\r
        \r
        **Having multiple `return` statements in
        a program can lead to tricky situations**. You may use multiple return statements,
        but it makes it easier to introduce logical errors into your program. We're
        going to look at some examples of functions with return values that include
        logical errors and debug them. The goal is to **recognize common errors with
        return values now so you can avoid them when writing your own programs**.\r
        \r
        There
        is a logical error somewhere in the version of `maxVal` you are about to see
        which uses multiple return statements. As a result the function works correctly
        for some inputs but not all. You'll need to inspect the code to understand
        what the issue is and make changes accordingly.\r
        \r
        # Do This:\r
        \r
        *
        **Run the program** and identify the errors generated in the output.\r
        *
        **Inspect the logic of `maxVal`** to identify the logical error.\r
        * **Correct
        the logical error** so that the function returns the correct value for all
        inputs.
      U3 - Return Values - debuggingReturns_markdown_instruction: |-
        # Debugging and
        multiple return values\r
        \r
        **It is generally bad form to use multiple `return`
        statements in a program**. You may do so, but it makes it easier to introduce
        logical errors into your program. We're going to look at some examples of
        functions with return values that include logical errors and debug them. The
        goal is to **recognize bad patterns early so you don't repeat them**.\r
        \r
        There
        is a logical error somewhere in the version of `maxVal` you are about to see
        which uses multiple return values. As a result the function works correctly
        for some inputs but not all. You'll need to inspect the code to understand
        what the issue is and make changes accordingly.\r
        \r
        # Do This\r
        \r
        *
        **Run the program** and identify the errors generated in the output.\r
        *
        **Inspect the logic of `maxVal`** to identify the logical error.\r
        * **Correct
        the logical error** so that the function returns the correct value for all
        inputs.
      U3 - Return Values - increase1_markdown_instruction: |-
        # Use a function that
        returns a value\r
        \r
        The return command allows functions to generate output
        that you can use elsewhere in your code. You've already used functions that
        return values many times, but you've never seen how they're actually made.
        This exercise includes a simple function that returns a value. For now you're
        just going to practice **using it like the type of value it returns** which
        in this case is a number.\r
        \r
        # Do This\r
        \r
        * **Starter code** is provided
        which creates a function called `increase` that accepts a number as input
        and returns twice that number as output.\r
        * Call the function within the
        `moveForward`, `write`, `console.log` functions provided.\r
        * **Run your
        program** and confirm the output is what you expected.
      U3 - Return Values - increase2_markdown_instruction: |-
        # Alter a function that
        returns a value\r
        \r
        In the last exercise you should have used the `increase`
        function at multiple places within your code. If we were to change the way
        that `increase` processes input to generate output, you would immediately
        be able to make use of this change at every place your function was called.\r
        \r
        #
        Do This\r
        \r
        * **Alter the `increase` function** so that it now multiplies
        input values by **3 rather than 2**. \r
        * **Run your program** and confirm
        that the change has affected the output from `moveForward` , `write` , and
        `console.log`
      U3 - Return Values - min1_markdown_instruction: |-
        # Use a function that returns
        a value\r
        \r
        The return command allows functions to generate output that
        you can use elsewhere in your code. You've already used functions that return
        values many times, but you've never seen how they're actually made. This
        exercise includes a simple function that returns a value. For now you're
        just going to practice **using it like the type of value it returns** which
        in this case is a number.\r
        \r
        # Do This\r
        \r
        * **Starter code** is provided
        which creates a function called `increase` that accepts a number as input
        and returns twice that number as output.\r
        * Call the function within the
        `moveForward`, `write`, `console.log` functions provided.\r
        * **Run your
        program** and confirm the output is what you expected.
      U3 - Return Values - useFindMin_markdown_instruction: |-
        # Using functions that
        return values\r
        \r
        We have used functions that return values many times
        before, but in this exercise you will see how they are actually created by
        using the `return` command. The function `minVal` accepts two numbers as input
        and returns the minimum of the two as output. You can call this function just
        like any other, and **because it returns a number you can treat the function
        call as if it were a number**\r
        \r
        # Do This\r
        \r
        * **Starter code** has
        been provided which creates the function `findMin` and generates two random
        values.\r
        * **Inspect the code of `findMin` to understand the logic of this
        function**.\r
        * **Call the function with the values provided** and ensure
        the minimum value is returned. You should treat the function call **as if
        it were a number** to generate the output shown below.\r
        \r
        ![](https://images.code.org/32ddaacdc9c0f820b9b58514b55dcbba-image-1447946068945.gif)
      U3 - Return Values - useMinVal_markdown_instruction: |
        # Using Functions that
        Return Values\r
        \r
        We have used functions that return values many times
        before, but in this exercise you will see how they are actually created by
        using the `return` command. The function `minVal` accepts two numbers as input
        and returns the minimum of the two as output. You can call this function just
        like any other, and **because it returns a number, you can treat the function
        call as if it were a number**.\r
        \r
        # Do This:\r
        \r
        * **Starter code**
        has been provided that creates the function `minVal` and generates two random
        values.\r
        * **Inspect the code of `minVal` to understand the logic of this
        function**.\r
        * On the `console.log` line **call the function using `rand1`
        and `rand2` as parameters** and ensure the minimum value is returned. You
        should treat the function call **as if it were a number**.\r
        \r
        <img src="https://images.code.org/21c2232acca1ed4a133d648982b0b042-image-1447964963356.gif"
        style="width: 550px">\r
        \r
        * Check that the program generates output similar
        to the output shown below.\r
        \r
        <img src="https://images.code.org/0ec446c772976ca8e75e5eb25d018b24-image-1447964535213.21.49
        PM.png" style="width: 350px">\r
      U3 - Return Values - wrapTurtle_markdown_instruction: |-
        # Use a Function that
        Returns a Value in an App - Part 2\r
        \r
        This time, you're going to write
        a function that returns a value to add functionality to the turtle driver.
        The `updateTurtle` function now is making a call to a function called `wrap`
        that has not been written yet. It accepts three parameters and should work
        in the following way:\r
        \r
        * `input`: the input value to the function. If
        it is within the range it should just be returned.\r
        * `low`: the lower bound
        of the range. If `input` is below this value the output should be the value
        of `high`.\r
        * `high`: the upper bound of the range. If `input` is above
        this value the output should be the value of `low`.\r
        \r
        By using this function
        you can create the illusion that the screen "wraps" around, so when the
        turtle leaves the top of the screen it appears again at the bottom.\r
        \r
        #
        Do This:\r
        \r
        * **Starter code** is provided which allows the turtle to
        move.\r
        * The `updateTurtle` function now makes two calls to `wrap`, but
        the function is not yet written.\r
        * **Write the `wrap` function** so that
        it implements the logic described above.\r
        * **Run your app** and confirm
        the turtle now "wraps" when it leaves the screen.\r
        \r
        ![](https://images.code.org/ebed5130ccdd16202eac0b8cc02df959-image-1447957698820.gif)
      U3 - Return Values - writeMaxVal_markdown_instruction: |-
        # Writing Functions
        that Return Values\r
        \r
        Now you are going to write your own function that
        returns a value, `maxVal`. This function should return the maximum of two
        values provided as input. The code for `minVal` is provided so that you can
        **replicate the pattern used in this function**.\r
        \r
        **Pattern for Functions
        that Return Values**\r
        * Use parameters to provide input.\r
        * Declare a
        variable that will be used as output, possibly initializing its value.\r
        *
        Update the value in your output variable throughout your program.\r
        * Return
        your output variable on the last line of your function.\r
        \r
        You may actually
        recognize many similarities between how we wrote functions that process arrays
        and functions that return values. **These patterns aren't rules of programming,
        but they help make your code easy to read and understand**.\r
        \r
        # Do This:\r
        \r
        *
        **Starter code** has been provided which stubs out `maxVal` and generates
        two random values. `minVal` is still provided **so that you can replicate
        the pattern used**.\r
        * **Write `maxVal`**, replicating the pattern used
        to write `minVal`.\r
        * **Use `maxVal` within the `console.log` statement
        as if it were a number** to generate the output similar to the one shown below.\r
        \r
        ![](https://images.code.org/5941ceeb27f0ad2d59819c9395d0d89a-image-1447947829448.gif)
      U3 - Search Terms - 1_markdown_instruction: |-
        # Printing Specific Records\r
        \r
        Sometimes
        we want to search through the records in the table to find certain records.
        For instance let's search through the records for all the movies made in
        2008.\r
        \r
        loop over element in the array returned from readRecord and print
        out only the ones that meet a certain criteria - uses if statement and forshadows
        to search terms\r
        \r
        # Do This\r
        \r
        The data from the last level has also
        been provided. \r
        \r
        * Add a call to readRecords to get the most current
        version of the data table.\r
        * Make a global array which will hold the movies
        that match our search\r
        * Add a for loop to loop over all the records in
        the array\r
        * As you loop over the array check each object to see if the
        year is equal to 2008\r
        * If the movie was made in 2008 add the whole object
        to our global array.\r
        * After you have checked all the items in the array
        print out the array of movies matching the search.
      U3 - Search Terms - 2_markdown_instruction: |-
        # Search Terms\r
        \r
        That was
        a lot of work just to find the records which matched 1 search criteria! Well
        good news! There is an easier way! We haven't talked about the second parameter
        in readRecords, the search terms. Up until now we have given it an empty object.
        This means it will return all the records beacuse it does not filter records
        based on any criteria. However if we want to search for something like all
        the movies made in 2008. We can easily do this by providing an object with
        those search criteria!\r
        \r
        The object will contain just the key value pairs
        to look for. Any record that contains those key value pairs will be returned
        as part of the records to the readRecords call.  The key of the key value
        pair will be the column name to look under for a certain value. For example
        to look for movies made in 2008 in our table we would pass an object that
        looked like this:\r
        \r
        `{year: 2008}`\r
        \r
        # Do This\r
        \r
        The data from
        the last level has also been provided. \r
        \r
        * Add a call to readRecords\r
        *
        Change the table to read from the movies table\r
        * Change the search terms
        to look for movies with the year 2008\r
        * Print the records returned as the
        parameter to the callback function.\r
        * Notice that it is the same list from
        the last level!
      U3 - Search Terms - 3_markdown_instruction: |-
        # Are there any results?\r
        \r
        One
        of the easiest things to check when using search terms for readRecords is
        whether there were records that matched your search. We can check this by
        checking the length of the array of records returned.\r
        \r
        # Do This\r
        \r
        The
        data from the last level has also been provided. \r
        \r
        * Add a call to readRecords\r
        *
        Change the table to read from the movies table\r
        * Change the search terms
        to look for movies with the year 2010\r
        * Add an if else statement inside
        the callback function to check the length of array\r
        \t* If there are greater
        than 0 records print "There was a match"\r
            * Otherwise print "There
        are no records matching that search"
      U3 - Search Terms - 4_markdown_instruction: "# Searching With Multiple Criteria\\r\n\\r\nWhat\nif
        we want to search with more specific criteria?  We can add more criteria\nto
        the search terms object.\\r\n\\r\nFor example we can search for the city\nin
        California with population of 2,000,000.  We would use: `{state: \"California\",\npopulation:
        2,000,000}` as the object for the search criteria.\\r\n\\r\n# Do\nThis\\r\n\\r\nThe
        data from the last level has also been provided. \\r\n\\r\n*\nAdd a call to
        readRecords\\r\n* Change the table to read from the cities table\\r\n*\nChange
        the search terms to look for cities in California with population 2,000,000\\r\n*\nPrint
        out the records match the search results. "
      U3 - Search Terms - 5_markdown_instruction: "# Searching With Multiple Criteria\\r\n\\r\nOn\nthe
        last level we search for the criteria that a city was in California AND\nits
        population was 2,000,000. What if we want to search for cities that are\nin
        California OR have a population of 2,000,000?  We actually can't put that\nas
        a search criteria in readRecords so we have to use a different method.\\r\n\\r\nOne\nway
        to do a search with OR is to do two different readRecord calls. One for\nthe
        state and one for the population.  Then we can combine the lists.\\r\n\\r\n#\nDo
        This\\r\n\\r\nThe data from the last level has also been provided. \\r\n\\r\n*\nAdd
        TWO calls to readRecords\\r\n* Create a global list to hold the combine\nsearch
        results.\\r\n* Change the table to read from the cities table\\r\n* Change\nthe
        search terms\\r\n\\t* Set one to search for cities in California\\r\n    *\nSet
        the other to search cities with a population of 2,000,000\\r\n* Inside\neach
        callback function loop through the lists of records returned and add\neach
        element to the global array.\\r\n* Print out the records matching the\nsearch
        results. "
      U3 - Search Terms - 6_markdown_instruction: "# Searching With Multiple Criteria\\r\n\\r\nOn\nthe
        last level we search for the criteria that a city was in California AND\nits
        population was 2,000,000. What if we want to search for cities that are\nin
        California OR have a population of 2,000,000?  We actually can't put that\nas
        a search criteria in readRecords so we have to use a different method.\\r\n\\r\nOne\nway
        to do a search with OR is to do two different readRecord calls. One for\nthe
        state and one for the population.  Then we can combine the lists.\\r\n\\r\n#\nDo
        This\\r\n\\r\nThe data from the last level has also been provided. \\r\n\\r\n*\nAdd
        TWO calls to readRecords\\r\n* Create a global list to hold the combine\nsearch
        results.\\r\n* Change the table to read from the cities table\\r\n* Change\nthe
        search terms\\r\n\\t* Set one to search for cities in California\\r\n    *\nSet
        the other to search cities with a population of 2,000,000\\r\n* Inside\neach
        callback function loop through the lists of records returned and add\neach
        element to the global array.\\r\n* Print out the records matching the\nsearch
        results. "
      U3 - Simple Drawing - Color_markdown_instruction: |-
        # RGB Color\r
        \r
        Just
        like in HTML and CSS we can use RGB values to determine the color.\r
        \r
        In
        game lab we do this with the color block\r
        \r
        \r
        # Do This\r
        \r
        * Make
        each rectangle a different color using the rgb color functions
      U3 - Simple Drawing - Comments_markdown_instruction: |-
        # Comments and White
        Space\r
        \r
        In HTML and CSS you learned about commenting and white space
        as important practices. You can comment in Game Lab using `//` before our
        comment.  For example <img src="https://images.code.org/c5e94b8bc9e0160e2c98c3adff2ac53f-image-1461101058517.02.55
        PM.png" style="width:110px">. You have already seen examples of this in
        some of the past levels. The comment block can be found in the most tabs.
        However it may be easier to switch to text mode and type in comments yourself.
        If you haven't tried it yet click <img src="https://images.code.org/d7811c0d29028daa74ae9e9561e01bee-image-1461101470090.30.45
        PM.png" style="width:110px"> and try using Game Lab in text mode. It is
        actually impossible to add white space without switching to text mode, so
        in order to group your code using white space, you will have to switch to
        text mode. \r
        \r
        # Do This\r
        You are going to practice using comments and
        white space in your rainbow program. \r
        \r
        * Separate each band of the rainbow
        and the grass into its own block of code\r
        * Put a comment before the block
        to tell which color band it is\r
        \r
        For example your first couple lines
        of code should look like this:\r
        \r
        <img src="https://images.code.org/cfd27e7132ab45757713b7234fa06ae0-image-1460643736548.21.24
        AM.png" style="width:250px">
      U3 - Simple Drawing - Ellipse and No Fill_markdown_instruction: |-
        # Project
        Levels\r
        \r
        Alright, let's start drawing some pictures! You are going to
        work on drawing a rainbow. You are going to do this in steps broken out over
        a series of levels. Don't worry, though; your code will pass from one level
        to the next as you make updates. As a result, you can work on one project
        over a bunch of levels. In the future, you will call this a set of **Project
        Levels**.  Whenever something is part of a set of project levels you will
        see this warning: \r
        \r
        <img src="https://images.code.org/f931e61d4b18026d8d615e3ee87a35c4-image-1461785315914.28.23
        PM.png" style="width:600px">\r
        \r
        # Draw Rainbow\r
        <img src="https://images.code.org/028794b8d825d5fa6130582e4271abce-image-1460574974541.15.00
        PM.png" style="width:200px; float:right"> \r
        <img src="https://images.code.org/1d76fb4c8742648bff07f9edda631f6f-image-1460736028983.59.44
        AM.png" style="width:200px; float:right">\r
        In order to draw a rainbow
        you are going to use ellipses. You are probably wondering how you can draw
        a rainbow with circles. You are going to use a sneaky trick! You can hide
        half of the circle under rectangles so it looks like they don't exist. Check
        out the images to the right.\r
        \r
        # Do This\r
        The starter code contains
        3 of the ellipses for the rainbow. Your final result should look like the
        drawing above on the right. You will need to:\r
        \r
        * Add 4 more ellipses
        all with the same x and y position as the first three\r
        * Size the ellipses
        appropriately\r
        \t* The smallest ellipse has a width of 100 and a height
        of 100\r
            * Each ellipse's width and height are 50 bigger than the one
        inside of it\r
        * Add a rectangle for grass
      U3 - Simple Drawing - Fill_markdown_instruction: |-
        # Fill\r
        \r
        Now, let's
        add some color to your rectangles! You can do that with the `fill` block.  Setting
        the `fill` is like picking the color of pen you are going to draw with, and
        using only that color of pen until you choose a different one.\r
        \r
        * When
        you set `fill`, everything that is drawn after that point will have that fill
        color. \r
        * You need to set `fill` **before** the shape you want it to apply
        to. \r
        \r
        The color of the pen is specified by a lowercase word inside `"
        "` and is the name of the color. You can use any color name you have used
        in CSS. For example `fill("blue")` will set the fill color to blue.  A full
        list of names can be found at <a href="http://www.w3schools.com/colors/colors_names.asp"
        target="_blank">W3 Schools - Colors</a>. \r
        \r
        # Do This\r
        \r
        If you
        run the program, you will notice that all the rectangles are set to red. Make
        each rectangle a different color:\r
        \r
        * Add 3 more fill statements - one
        before each rectangle\r
        * Change the fill colors so that each rectangle is
        a different color
      U3 - Simple Drawing - Many Rects_markdown_instruction: |-
        # Many Rects\r
        \r
        We
        can have more than one rect on the screen at a time\r
        \r
        currently there
        are 4 rectangles on the screen but its hard to tell\r
        \r
        \r
        \r
        # Do This\r
        \r
        *
        Make each rectangle a different color\r
        * Make the rects each take up one
        corner of the screen like such\r
        \r
        <img src="https://images.code.org/8dd4caff4b06c5d0738c47a0601be445-image-1460483873266.57.23
        PM.png" width=200>
      U3 - Simple Drawing - No Fill_markdown_instruction: |
        # Stroke Weight, No Fill
        and No Stroke\r
        \r
        Alright, now that you have made the outlines the correct
        colors, let's remove the gray fill. You can remove the fill with the command
        <img src="https://images.code.org/15b0024a999ac91e0be7b45e702cd0da-image-1461100870733.20.55
        PM.png" style="width:110px">.  This is similar to fill in that it has to
        go before the things you want to not have fill. \r
        \r
        Another new block
        you are going to leverage is <img src="https://images.code.org/9c872b32bffc3a6cdb5e37f2a678e6eb-image-1461100747419.02.37
        PM.png" style="width:150px">. This allows you to make the outline you create
        thicker. The value you input is the thickness.\r
        \r
        Lastly, you can use
        <img src="https://images.code.org/377cc0c5890eac0756c46e36cbdf8b2e-image-1461100823984.02.44
        PM.png" style="width:110px"> to remove the stroke. You are going to want
        this for the grass as you just want a green rectangle with no outline. \r
        \r
        #
        Do This\r
        \r
        <img src="https://images.code.org/d39b81417cb5e2bd64539e9e21c88395-image-1460642887253.07.50
        AM.png" style="width:150px; float:right">\r
        \r
        The final product is shown
        to the right. In order to get there:\r
        \r
        * Add `noFill` as the first line
        in the program so that the gray middle of all the shapes disappears\r
        * Make
        the `strokeWeight` large enough that the bands all touch (25)\r
        * Notice
        that the fill disappeared for the grass. Add `fill` for grass\r
        * Remove
        the border on the grass by using `noStroke`\r
      U3 - Simple Drawing - Order of Blocks_markdown_instruction: "# Order of Code\nMatters\\r\n\\r\nThe
        order of the blocks of code matters. Computer code is read\nfrom top to bottom,
        in order. The computer will run the step on the first\nline, then the second
        line, and so on. This means that when you want something\nat the **back of
        your picture, it should be at the top of the program** and\nwhen you want
        something at the **front of your picture, it should be at the\nbottom of the
        program.**\\r\n\\r\n# Do This\\r\n<img src=\"https://images.code.org/ff378579f623f93e36bdd7c66e091e20-image-1480368475986.27.20\nPM.png\"
        style=\"float:right\">\\r\nThere is another bug in the program. The\nprogram
        is supposed to look like the picture on the right, but when you run\nit you
        won't be able to see all the squares. Can you fix it? \\r\n* **DON'T\nchange
        the values for the rectangles.**\\r\n* **Change the order of the blocks**\nso
        that the image looks like the one on the right. "
      U3 - Simple Drawing - Oval_markdown_instruction: |-
        # Oval\r
        \r
        Ellipse is
        just a fancy name for oval.  You can use the `ellipse` block to draw an oval.  The
        values for ellipse are very similar to rectangle but have one major difference.
        Can you figure out the difference?\r
        \r
        # Do This\r
        \r
        * Add a `rect`
        command\r
        * Add an `ellipse` command\r
        * Give `ellipse` the same input values
        you give `rect`\r
        * What do you think might happen?\r
        * What do you notice?
      U3 - Simple Drawing - Personal Drawing_markdown_instruction: |
        # Your Own Drawing\r
        \r
        It
        is your turn to create your own drawing. You should have drawn out your plan
        on paper first.\r
        \r
        # Do This\r
        As a reminder make sure you hit the objectives:\r
        \r
        *
        Creates an identifiable and named object or design (i.e. no random splatters
        of shapes)\r
        * Uses at least 10 shapes or text items (rect, ellipse, regularPolygon,
        text)\r
        * Uses at least 4 different color fills\r
        * Uses at least 2 different
        color outlines\r
        * Contains at least 3 different logical blocks of code with
        comments\r
      U3 - Simple Drawing - Rectangle Width and Height_markdown_instruction: |-
        # Drawing
        Rules\r
        \r
        So, what did you discover on the last level?\r
        \r
        * What do
        each of the four openings control?\r
        \r
        \t* First Opening - controls the
        **location of the rectangle from left to right** - call this the **x position**\r
            *
        Second Opening - controls the **location of the rectangle from top to bottom**
        - call this the **y position**\r
            * Third Opening - controls the **width**
        of the rectangle\r
            * Fourth Opening - controls the **height** of the
        rectangle\r
        \r
        * What is the size of the drawing area?\r
        \r
        \t* Width:
        400\r
            * Height: 400\r
        \r
        * Where is (0,0) or x = 0 and y = 0?\r
        \r
        \t*
        The **upper left corner of the grid!**\r
        \r
        # Do This\r
        \r
        There is code
        provided for a rectangle that draws in the upper left corner when you run
        the program. Using your new knowledge of the workspace and the inputs for
        a rectangle:\r
        \r
        * **Change the width and height of the rectangle so that
        it fills the whole drawing area**\r
        * **HINT:** Remember that the rectangle
        block is `rect(x, y, width, height)`, in that order
      U3 - Simple Drawing - Rectangle_markdown_instruction: |-
        # Rectangles\r
        \r
        Welcome
        to Game Lab.  Game Lab allows you to create interactive games and animations!
        You are going to start with drawing shapes and build up to games over time.
        In class you already practiced the basics of drawing shapes. You are just
        going to translate that skill to the computer. Check out the game area on
        the left. This is where you will see the output of your program.\r
        \r
        The
        first shape you are going to use is the rectangle. The block for a rectangle
        is `rect()`. As you can see, there are four openings in the rect block. These
        values control some aspect of the way the shape is drawn.\r
        \r
        # Do This\r
        \r
        *
        Add a `rect()` command to the workspace. \r
        * Click <img src="https://images.code.org/9e963203e9cafd558b760730d13537ca-image-1461783998310.06.20
        PM.png" width=100> to run the program and see what happens. \r
        * Change
        the numbers in the four different openings, then try running the program again.
        \r
        * Repeat that process until you can answer:\r
        \t* What do each of the
        four openings control?\r
            * What is the size of the drawing area?
      U3 - Simple Drawing - Road Ellipse_markdown_instruction: "# Clouds and Sun\\r\n\\r\nNext,\nyou
        are going to add the clouds and sun to our picture. Here is an example\nof
        what your work could look like at the end of the level, but use some creativity\nas
        you create your sun and clouds.\\r\n\\r\n<img src=\"https://images.code.org/c3a26070e316d0fda19caba59af710ba-image-1460644884454.41.10\nAM.png\"
        width=200>\\r\n\\r\n# Do This\\r\n* Add ellipses for clouds and the\nsun.\\r\n*
        Make sure there is no outline on the clouds and sun\\r\n* Set the\ncolors
        of the clouds and sun. "
      U3 - Simple Drawing - Road Rects and Color_markdown_instruction: |-
        <img src="https://images.code.org/86a9f34aadf57bb8e3b897b8c6ddf52e-image-1460646615062.09.59
        AM.png" style="float:right" width=150>\r
        \r
        # Road Drawing\r
        \r
        \r
        \r
        Let's
        try out another example! This is going to be another set of project levels.
        The final product will look like the image on the right, but we'll start
        by setting up the background, grass, and road.\r
        \r
        # Do This\r
        \r
        \r
        <img
        src="https://images.code.org/fcee25a3bbfea2859e0407b73ef9edd8-image-1460644263112.30.18
        AM.png" style="float:right" width=150>\r
        There are starter comments to
        help you out - don't forget to do this as you go!\r
        * Add rectangles for
        the background, grass and road\r
        * Change the colors to appropriate colors
        for each item used: \r
        * Remove the black outline\r
        \r
        Don't worry about
        finishing the whole picture right now. You'll do that in the next few levels.
      U3 - Simple Drawing - Simple Shape Drawing_markdown_instruction: |
        # Simple
        Drawing\r
        \r
        <img src="https://images.code.org/47dce1fc1ac728bcc523909573812099-image-1461787179482.59.14
        PM.png" style="width:200px; float:right">\r
        \r
        This is a mess! Can you
        help debug this program? All the necessary lines of code are here, but they
        are not in the correct order to draw the picture on the right.\r
        \r
        # Do
        This\r
        \r
        * Re-order the code to produce the picture\r
        \r
        *Note: You don't
        need to add any new lines of code*\r
        \r
      U3 - Simple Drawing - Stroke and Stroke Weight_markdown_instruction: "# Stroke\\r\n\\r\nLet's\nstart
        adding color to the rainbow. You may have noticed that all the shapes\nhave
        a middle color and an outline color. The middle is gray and the outline\nis
        black by default. **For the rainbow, you are going to change the OUTLINE\ncolor.
        This will allow you to get the arch shape without the middle fill.**\n\\r\n\\r\nYou
        can change the look of the outline using `stroke()` which sets\nthe color
        of the outline.  Stroke takes names of colors ('red', 'orange',\netc) just
        like fill. However, you will want to be more specific about the\ncolors of
        the rainbow.\\r\n\\r\n# Color\\r\nYou can set colors using RGB values\njust
        like you did in HTML and CSS. We do this by using the `rgb()` block in\nplace
        of the color name. For example `stroke(rgb(255,0,0))`. Like fill, you\nneed
        to set stroke before drawing the object you want to have that stroke.\\r\n\\r\n#\nDo
        This\\r\n<img src=\"https://images.code.org/023bd330cc9ccced5c665330c5e997b4-image-1485287796998.56.13\nPM.png\"
        style=\"width: 250px; float: right\">\\r\n\\r\n* Use `stroke()` to\nmake each
        ring of the rainbow the appropriate color. \\r\n* The final picture\nshould
        look like the one shown to the right. You will continue to improve\nit on
        the next level.\\r\n\\r\n| Color | RGB Values |\\r\n|---|---|\\r\n| red\n|
        (255,0,0)|\\r\n| orange | (255,127,0) |\\r\n| yellow | (255, 255, 0) |\\r\n|\ngreen
        | (0,255,0) |\\r\n| blue | (0, 0, 255) |\\r\n| indigo | (75, 0, 130) |\\r\n|\nviolet
        | (139, 0, 255) | "
      U3 - Simple Drawing - X and Y values_markdown_instruction: |-
        # Bugs\r
        \r
        Not
        every program you write in computer science works perfectly or even well the
        first time. The things that go wrong with a computer program are called **bugs**.  The
        process of fixing those bugs is called **debugging**. Computer scientists
        do a lot of debugging, so it is a very valuable skill. Because of this, you
        are going to do many levels that help you practice debugging strategies.\r
        \r
        #
        Do This\r
        \r
        <img src="https://images.code.org/70f4ce3f9362d8dbb361e36906617d32-image-1460733825166.23.26
        AM.png" style="width:200px; float:right">\r
        \r
        You are going to debug
        a problem. In the code there is a rectangle block, but when you run the program
        the rectangle is nowhere to be found! Can you fix the problem?\r
        \r
        * Figure
        out why the rectangle is not showing. **HINT** What are the biggest x and
        y positions that will show on the canvas?\r
        * **Move the rectangle to the
        lower left corner of the drawing area** as in the example on the right.
      U3 - Simple Drawing - regular polygon_markdown_instruction: |-
        # Regular Polygons\r
        \r
        You
        are now going to add the stop sign.\r
        \r
        <img src="https://images.code.org/0ea048eca4b3a7f3263cf8e0a9882d2b-image-1460646035610.53.20
        AM.png" style="width:200px">\r
        \r
        In order to create a stop sign you
        are going to need a new block. The `regularPolygon()` block draws any shape
        with sides that are all the same length.  Some examples are:\r
        \r
        triangle
        (3 sides) <img src="https://images.code.org/9bcbae86518007a3141ae5dbde5f1305-image-1460750039357.52.36
        PM.png" style="width:100px"> square (4 sides) <img src="https://images.code.org/1def6a4326b78b76a5fcf95c6ec33b8b-image-1460750039357.52.53
        PM.png" style="width:100px"> pentagon (5 sides) <img src="https://images.code.org/ba7262caf5ad0f9ec926027a2d281ceb-image-1460750039358.53.05
        PM.png" style="width:100px"> \r
        \r
        The `regularPolygon` has 4 parameters
        x, y, number of sides, and the radius. x and y specify the center of the shape.
        The radius is the distance from the center to the end of each of the sides.\r
        \r
        To
        make a stop sign you are going to need an octagon, which has 8 sides. <img
        src="https://images.code.org/4e8c23c88e33aa5e06ed3e5ca702e3ab-image-1460750174518.56.05
        PM.png" style="width:100px">\r
        \r
        # Do This\r
        \r
        * Add a pole for the
        stop sign\r
        * Add an octagon (8 sided shape) for the sign. Hint: The center
        of the octagon should be at the top of the pole.\r
        * Set the color of the
        objects.\r
        * Make the stroke white and make the outline thicker
      U3 - Simple Drawing - text_markdown_instruction: |-
        # Text\r
        \r
        The last step
        is to add text to our stop sign. You can add text with the <img src="https://images.code.org/302a9fa63cce41d49ce101df08a378f3-image-1472661577637.39.29.png"
        style="width:150px"> block. The `text()` block has 3 parameters: `text`,
        `x` and `y`. `text` is the string of text you want to print on the screen.  This
        text needs to go inside `' '` so that the computer knows it's a string.  `x`
        and `y` are the x and y coordinates of the bottom left corner of the text.\r
        \r
        Also,
        don't forget to comment your code and use white space to block out connected
        lines. \r
        \r
        # Do This\r
        * Add text to the center of the sign\r
        * Make
        sure the text has no stroke and that the fill is white\r
        \r
        <img src="https://images.code.org/86a9f34aadf57bb8e3b897b8c6ddf52e-image-1460646615062.09.59
        AM.png" width=200>
      U3 - Simulation - 1_markdown_instruction: |-
        # Starting Small\r
        \r
        To start,
        we're going to simulate flipping a coin 10 times. You might be thinking that
        isn't many coin flips, and that we could just do those flips in real life,
        but this is actually an important step in developing a simulation. At small
        scales we can make sure our code is working as intended because **we can still
        visually confirm its output**. Once we're convinced that the logic of our
        program is reliable we'll move up to simulating larger numbers of flips.\r
        \r
        The
        core logic of our program will be focused on **a `while` loop** that simulates
        flipping a coin by repeatedly generating **random 0's or 1's using `randomNumber`**.
        This is a great opportunity to keep practicing using loops while applying
        your knowledge of variables, iteration, and `if` statements.\r
        \r
        # Do This:\r
        \r
        *
        When we want to flip a coin with a computer we will instead **generate a random
        number between 0 and 1**.\r
        * Write a program that **uses a `while` loop**
        to **flip a coin 10 times** and writes the value of each flip to the screen.
        The example below shows how your program should run.\r
        * **HINT:** you will
        need to use a counter variable in your `while` loop to keep track of how many
        times the coin has been flipped. \r
        \r
        ![](https://images.code.org/970622047b06af13ea7bdd50ee86bcbf-image-1446739178483.gif)
      U3 - Simulation - 2.1_markdown_instruction: |-
        # Changing the Loop Condition\r
        \r
        Currently
        our loop condition is based on a counter variable that keeps track of the
        total number of flips, but our simulation should only run **while we have
        fewer than the target number of heads**. In this exercise you are going to
        change the condition used by your `while` loop so that your **simulation terminates
        once you have flipped 5 total heads**. At the end of the loop we will **write
        the total number of flips** to know how many flips it took to get 5 heads.\r
        \r
        #
        Do This:\r
        \r
        * Change the looping condition to use the variable you are
        using to keep track of the number of heads. **Your loop should run as long
        as you have fewer than 5 total heads**.\r
        * Add code after your loop that
        **writes the total number of flips**.\r
        * **Test your program** several times
        to make sure it works as expected. See the example below.\r
        * **Note:** the
        simulation is always terminating once it flips its 5th heads. Sometimes this
        means the text output runs off the screen. We will address this in the next
        exercise.\r
        \r
        ![](https://images.code.org/878ff327142ebad8f81ecd8cdf58b14a-image-1446861064994.gif)
      U3 - Simulation - 2.5_markdown_instruction: |-
        # 10,000 Heads!\r
        \r
        You're
        ready to increase the number of heads your simulation is looking for and **test
        your first hypothesis**. Before we move up to the full 10,000 heads, however,
        we're going to perform a quick check of our program logic.  When you make
        changes to your program **it is possible that some portion of your programming
        logic will stop working as you expected**. In order to feel more confident
        about your model you will **first change the number of heads you are looking
        for to a number that we can still visually verify (7 heads)**. If our code
        still works after making changes then we should be confident that it should
        work at 10,000. We will remove the intermediate output and run the full simulation!\r
        \r
        #
        Do This:\r
        \r
        * **Increase the number of heads you are looking for to 7**
        and **visually confirm** that the code is still working as you expect.\r
        *
        If everything seems to be working, **comment out the `write` command that
        displays the results of each flip.** You can use `//` to comment out a single
        line of code. Make sure that the total count of flips still prints though!\r
        *
        **Run your simulation and find out how long it takes to get to 10,000 heads**.
        Then run it a few more times. What patterns are you noticing? Record your
        results and move on.
      U3 - Simulation - 2_markdown_instruction: |-
        # Counting Heads\r
        \r
        Let's say
        that a **1 is a heads**. If want our simulation to run until we reach a certain
        number of heads then **we will need a way to count the number of heads that
        have been flipped**. In order to do this you will need to add a variable that
        acts **as a counter**. Initialize it to 0, and every time you flip a heads
        (1) **increment your counter by 1**. At the end of your program you should
        write the value to the screen.\r
        \r
        # Do This:\r
        \r
        * Add a variable that
        **counts the number of heads (1's)** and write its value to the screen after
        each flip.\r
        * Run your program severals times **and validate that the number
        of heads recorded is correct** by visually checking the flips you've printed
        to the screen.\r
        * **Hint:** you will also need to store your current coin
        flip in a variable to complete this challenge.\r
        \r
        ![](https://images.code.org/0d99569cd223c63e2166d610d09fd525-image-1446859813702.gif)
      U3 - Simulation - 3_markdown_instruction: |-
        # Streaks of Heads\r
        \r
        We are
        going to alter our simulation so that it doesn't count the total number of
        heads, but rather the longest **streaks of heads**. This will allow us to
        simulate **how many flips it takes to get 12 heads in a row**. \r
        \r
        To
        begin with you will change your looping condition so that **the loop again
        only runs 10 times**. This will allow us to visually confirm our code is working.\r
        \r
        **Keeping
        Track of Streaks:** We know we need to count streaks of heads, how do we do
        this in code?  Do we need to keep track of all the previous flips so we know
        that we're on a streak?\r
        \r
        The answer is: **no**.  We can instead just
        **count in a clever way** that makes our code pretty simple.  Make a variable
        to use as a counter and...\r
        \r
         * every time you see heads, add 1 to a
        counter.\r
         * every time you see tails, set the counter back to 0.\r
        \r
        Here
        is some psuedocode showing how it works.  You might take a minute to study
        and reason about why and how it works.\r
        \r
        **Pseudocode**\r
        ```\r
        //
        Ouside loop\r
        headsCount <-- 0\r
        \r
        // Inside loop\t\r
        IF (current flip
        is a heads)\r
          headsCount <-- headsCount + 1\r
        ELSE\r
          headsCount <--
        0\r
        DISPLAY (current flip)\r
        DISPLAY (headsCount)\r
        ```\r
        # Do This:\r
        \r
        *
        Change your `while` loop's condition so that **it only runs 10 times**.\r
        *
        Add code to the simulation that **displays the length of each streak of heads**
        following the logic described above.  Note that pseudocode should translate
        to JavaScript pretty easily.\r
        * The example below shows an example of what
        output from your program might look like.\r
        \r
        ![](https://images.code.org/22f1a29e9b6abd558198f4704e437498-image-1446751547621.25.07
        PM.png)
      U3 - Simulation - 4_markdown_instruction: |-
        # Changing the Loop Condition: Streaks
        of Heads\r
        \r
        We want our simulation to run** while the streak of heads
        is less than a target length**. In order to do this we'll need to change
        our looping condition to use the variables we've been using to count our
        streak of heads. To begin with **your simulation should look for a streak
        of 3 heads** so that you can still visually confirm the output.\r
        \r
        # Do
        This:\r
        \r
        * **Change the condition** used by your `while` loop so that
        it now runs **while the streak of heads is less than 3**.\r
        * **Test your
        program** by running it and visually confirming that its output is correct.
        It should run like in the example below.\r
        * **Note:** As before it's possible
        that your output will sometimes run off the screen. You can still confirm
        your code is working as you intend (it should never run after a streak of
        3) and we will address this issue in the next exercise.\r
        \r
        ![](https://images.code.org/90ec4022f784ba136e59bb9b7c57a5c7-image-1446862623863.gif)
      U3 - Simulation - 5_markdown_instruction: |-
        # Streaks of Heads: 12 in a Row\r
        \r
        We're
        almost ready to test **our second hypothesis** and find out how long it takes
        to get **12 heads in a row**. Just as before we're first going to **visually
        test our code with a different length streak (4)** before removing most of
        the visual output and running the code for a streak of 12.\r
        \r
        # Do This:\r
        \r
        *
        **Change your simulation to run until you get a streak of 4** and visually
        verify that the values calculated are accurate.\r
        * **Comment out** the lines
        of code that write the current coin flip and the current streak count. You
        can use `//` to comment out a single line of code.\r
        * **Change your simulation
        to run until you get a streak of 12 heads**. \r
        * **Run your simulation a
        few times and record your results!**
      U3 - Simulation - 6_markdown_instruction: |
        # Keep Experimenting!\r
        \r
        Your
        simulation can be updated or changed however you like. What new questions
        do you have? Do you want to look for longer streaks of heads? Do you want
        to roll a die instead of flipping a coin? Make any changes and improvements
        to your simulation that you like.\r
      U3 - Simulation - App_markdown_instruction: |-
        # More Flips\r
        \r
        If your code
        is working well for 10 flips then we should be reasonably confident that it
        will continue working for more. You will now want to **run your full simulation
        on 10,000 flips**.\r
        \r
        Prior to this we have been printing our output after
        every flip. This is a useful form of **debugging** but we will not want our
        programs to print 10,000 different coins flips. **We only want the final output**.\r
        \r
        #
        Do This\r
        \r
        * **Change your program to flip 20 coins** and visually verify
        that the values calculated are accurate\r
        * **Comment out** the lines of
        code that print each coin flip and the current streak count. You can use `//`
        to comment out a line of code.\r
        * **Change your program to flip 10,000 coins,
        predict what the longest streak will be, and run your program**.\r
        * Rerun
        it a few times. **Does the answer stay fairly consistent? Are you surprised
        by the result?**
      U3 - Simulation - Template_markdown_instruction: |-
        # Simulating Coin Flips\r
        \r
        Over
        the next several exercises we are going to be building a program that simulates
        flipping 10,000 coins, or even more if you like. Along the way we're going
        to be keeping track of the patterns that develop and hopefully learning something
        about the patterns that develop.\r
        \r
        This is a great problem to simulate
        on a computer. If you wanted to flip 10 coins you'd probably just do it by
        hand. Flipping 10,000 coins would take significantly longer (about 3 hours
        if you flip one per second) and so **we'd much rather use a program to do
        the work for us.** Not only is it a lot faster to write the program, but once
        you're done you can run your program over and over, repeating the experiment.
        As we'll see, **simulations like this make it much easier to quickly notice
        patterns, test hypotheses, and develop new ideas to investigate**.\r
        \r
        **Starting
        Small:** Our simulations are going to start small. We'll actually only be
        flipping 10 coins to begin with, and then developing programs that keep track
        of patterns in this smaller set of data. That way we'll be able to visually
        confirm that our programs are working as intended. **Once we've verified
        that our programs work at a smaller scale we'll gradually increaese the number
        of flips our program is working on until we're at the full 10,000.**\r
        \r
        #
        Do This\r
        \r
        * When we want to flip a coin with a computer we will instead
        **generate a random number between 0 and 1**\r
        * Write a program that **uses
        a while loop** that **flips 10 coins** and writes their values to the screen\r
        \r
        ![](https://images.code.org/970622047b06af13ea7bdd50ee86bcbf-image-1446739178483.gif)
      U3 - Sprites - Intro Sprites_markdown_instruction: |-
        # Sprites\r
        \r
        You are
        going to start creating animations with **sprites**. A sprite is like a character
        in your animations. Your program will control how your sprite moves and appears
        on the screen.\r
        \r
        **Creating Sprites:** The first step to using a sprite
        is creating the sprite. In order to do that you'll need to give it a label,
        just like a variable. This block will create a new sprite for you and let
        you choose its label.\r
        \r
        ![](https://images.code.org/92e06cddc5355dc37aa2c6a033793dd0-image-1466027030772.43.41
        PM.png)\r
        \r
        **Drawing Sprites:** The next step to using a sprite is to
        draw it on the screen. Whenever you call the ![](https://images.code.org/82a18afda6463323529acaa3dc326d55-image-1466004008638.19.16
        AM.png) command all the sprites in your animation will be drawn on the screen.\r
        \r
        #
        Do This\r
        \r
        This program creates a sprite but it doesn't draw it on the
        screen\r
        \r
        * **Add a ![](https://images.code.org/82a18afda6463323529acaa3dc326d55-image-1466004008638.19.16
        AM.png) command** after you've created a sprite so it will actually draw\r
        *
        **Run the code** to draw your first sprite on the screen. Right now sprites
        just look like gray rectangles but soon they'll do a lot more.
      U3 - Sprites -Draw Sprites_markdown_instruction: |-
        # Draw Sprites\r
        \r
        This
        program is supposed to draw two sprites but when the program is run they don't
        show up on screen. `createSprites` only creates the sprite but does not draw
        it on the game area. In order draw your sprite on the display you need another
        block that was in the draw loop on the last level.\r
        \r
        Can you fix it?
        \r
        \r
        # Do This\r
        \r
        * Run the program and see what happens\r
        * Take
        a look back at the last level to see what is missing\r
        * Fix the program
        so that both sprites show up
      U3 - Sprites and Mod - Clone No Draw Sprites_markdown_instruction: |-
        # Random
        Shape Color\r
        \r
        ** Video on Properties**\r
        \r
        The built in variables
        for sprites are called properties. Properties can be updated with in the draw
        loop to create animations just like variables.\r
        \r
        One thing you need to
        be careful of as you write programs with sprites is that you keep `drawSprites`
        as the last line inside the draw loop. You don't want to draw the sprties
        until after all the updates in the loop have happened.\r
        \r
        # Do This\r
        Create
        a sprite that is set to a new random color every loop of the draw loop.\r
        \r
        *
        Create a new sprite and make sure it draws on the game area\r
        * Set the `shapeColor`
        of the sprite to a random color inside the draw loop\r
        * Run the program
        and test that it works
      U3 - Sprites and Mod - Create  and Draw Sprite_markdown_instruction: |-
        # Sprites\r
        \r
        #
        Do This\r
        * Create spirte\r
        * Change the name of your sprite\r
        * call drawsprites
        in draw loop
      U3 - Sprites and Mod - Debug DrawSprites_markdown_instruction: "# Debug\\r\n\\r\nThis\nprogram
        is supposed to create a sprite that changes to a random color and\nmoves randomly
        around the screen. It's not working. Can you figure out why\nits not working?\\r\n\\r\nHint:
        There are two bugs in this program.  Sometimes\nwhen you fix one problem it
        may look like you made the initial problem worse.\nDon't worry. Remember the
        things you have learned so far. How would you write\nthe code for this level?\\r\n\\r\n#
        Do This\\r\n\\r\n* Run the program to see\nwhat is happening\\r\n* Debug the
        program. "
      U3 - Sprites and Mod - Debug Name Sprite_markdown_instruction: |-
        # Debug\r
        \r
        This
        program is supposed to create a sprite that changes to a random color, width
        and height. It's not working. Can you figure out why its not working?\r
        \r
        #
        Do This\r
        \r
        * Run the program to see what is happening\r
        * Debug the program.
        Hint: You do not need to add any new commands to make this work.
      U3 - Sprites and Mod - Free Play_markdown_instruction: |-
        # Make Something\r
        \r
        You've
        now learned a bunch sprites, properties, and objects. What kind of animation
        can you create with what you have learned?\r
        \r
        Sprite Properties\r
        \r
        *
        x\r
        * y\r
        * width\r
        * height\r
        * shapeColor\r
        \r
        # Do This\r
        \r
        Use
        the properties you have learned in this lesson to create an animation.\r
        \r
        Stuck
        on ideas? Try one of these.\r
        \r
        * Create a sprite in the middle of the
        screen that grows and rotates
      U3 - Sprites and Mod - Mouse Width and Height_markdown_instruction: |-
        # Random
        Around Point
      U3 - Sprites and Mod - Mouse X and Y_markdown_instruction: |
        <img src="https://images.code.org/d2092b4f2debc336f963d48bd6cf4973-image-1477681020928.gif"
        style="float:right">\r
        \r
        # Mouse X and Y\r
        \r
        Sprites are actually
        part of a larger type of item that you will use frequently in computer science.
        This type of item is called an **object**. An object is **a location in memory
        with a name and properties**. It **associates a bunch of smaller pieces of
        information together**. \r
        \r
        Another type of object is the **Game object**.
        Each game only has one Game object which is set up with initial properties
        for you and it is called Game.\r
        \r
        One of the coolest properties that the
        Game has are the x and y location of the mouse! **You can get the x and y
        location of the mouse using `World.mouseX` and `World.mouseY`.**  This follows
        the pattern you learned before. `Game` is the name of the object. `mouseX`
        and `mouseY` are the names of the properties.\r
        \r
        # Do This\r
        \r
        You
        are going to make a bee sprite follow the mouse around the game area.\r
        \r
        *
        The bee image is already loaded in the animation tab for you.\r
        * Create
        a bee sprite that draws in the center of the window.\r
        * Inside the draw
        loop update the position of the sprite to the position of the mouse:\r
        \t*
        Set the x position of the sprite to the value of `World.mouseX`.\r
            *
        Set the y position of the sprite to the value of `World.mouseY`.\r
        * Run
        the program to test that it works.\r
      U3 - Sprites and Mod - Move Across_markdown_instruction: |-
        # Moving Animation\r
        \r
        You
        are going to practice using the x and y properties of a sprite. Don't forget
        that they designate the center of the rectangle. This may seems strange right
        now while sprites are just rectangles but in the future sprites will be able
        to be any image you want.  When you use an image with weird edges its a little
        less clear where the upper left corner is. In addition, for things such as
        rotation its much easier to have the x and y at the center because thats the
        point around which is rotates.\r
        \r
        # Do This\r
        \r
        Create two sprites.
        One that moves from left to right and one that moves from top to bottom. \r
        \r
        *
        Create a sprite that draw on the screen\r
        * Increment the x property of one
        to get movement from left to right\r
        * Increment the y property of the other
        to get the movement from top to bottom
      U3 - Sprites and Mod - Rand Around Mouse_markdown_instruction: |
        # Random Around
        Point\r
        \r
        <img src="https://images.code.org/d124946bb9e01a3623078c2a87beea8c-image-1477681483067.gif"
        style="float:right">\r
        \r
        Now that you can make the bee follow the mouse
        lets make a bunch of bees fly near the mouse like shown in the visual on the
        right.  In order to do this you will need to **add a random amount between
        -50 and 50 to the `mouseX` or `mouseY`.**  \r
        \r
        # Do This\r
        You already
        have one bee sprite that follows the mouse.\r
        \r
        * **Add 3 more bees** that
        follow the mouse\r
        * Update the x and y location to be randomly close to
        the mouse\r
        \t* Add a random number between -50 and 50 to the `mouseX` and
        `mouseY` \r
        * Use the `frameRate` block to find the best frame rate\r
      U3 - Sprites and Mod - Rand Shape Color_markdown_instruction: |-
        # Properties\r
        \r
        In
        past levels you created rectangles and then made a bunch of variables to keep
        track of different qualities about that rectangles such as its position and
        color. Sprites take away the need to make lots of separate variables because
        those qualities can be controlled by built in variables. The first built in
        variable we are going to try is `shapeColor`.  In order to access the built
        in variable you need to type something like `sprite.shapeColor` where sprite
        is the name of the sprite you are setting the color of.\r
        \r
        # Do This\r
        \r
        The
        shape color of the first sprite is set for you. Can you set the color of the
        second sprite?\r
        \r
        * Add a command to set the `shapeColor` of the second
        sprite\r
        * Run the program and test it out.
      U3 - Sprites and Mod - Rotation Direction_markdown_instruction: |-
        <img src="https://images.code.org/eac110e64ccad62482c82d4ef66f237b-image-1465518920408.gif"
        style="width:300px; float:right">\r
        # Rotation Direction\r
        \r
        When you
        use the counter pattern for the `rotation` property with addition, the object
        will always rotate clockwise. Sometimes however you will want your sprite
        to rotate the other direction. To do this you can just use subtraction!\r
        \r
        #
        Do This\r
        \r
        There are three gears set up for you. You need to make the
        gears all look like they are rotating in sync with each other. \r
        \r
        * Make
        the gears rotate so they look like they are working as one system.\r
        * **Hint:
        They won't all rotate the same direction**.
      U3 - Sprites and Mod - Shape Color_markdown_instruction: |
        # Predict\r
        \r
        What
        do you think this code will do?\r
      U3 - Sprites and Mod - Sprite Rotation Command_markdown_instruction: |-
        # Rotation\r
        \r
        One
        of the cool things about properties are there are new things you can control
        about a sprite that you could not about a shape! \r
        \r
        One of those things
        you can control about a sprite is its rotation.  The `rotation` property sets
        the angle in degrees that the sprite should be turned to. With this you can
        angle a sprite to a certain orientation.\r
        \r
        # Do This\r
        Rotate the gears
        so they sockets don't overlap.\r
        \r
        * Add a command for top and bottom
        gears to set the rotation property of the sprite\r
        * Play with the value
        of the rotation until you get it to look like the picutre on the right.
      U3 - Sprites and Mod - Sprite Rotation_markdown_instruction: |-
        <img src="https://images.code.org/dfdc813b35a6773684e77618cffb04c9-image-1465570394783.gif"
        alt="wheel spinning" style="width:200px;float:right" >\r
        \r
        # Rotation\r
        \r
        You
        can control sprites in ways you never could with just shapes.\r
        \r
        One of
        those things you can control about a sprite is its rotation.  The **`rotation`
        property sets the angle in degrees that the sprite should be turned to**.
        With this you can angle a sprite to a certain orientation or make it spin!\r
        \r
        #
        Do This\r
        You are going to start creating a spinner wheel similar to one
        you might find at a carnival.\r
        \r
        * Create a **new sprite**\r
        * **Set
        the image** of the sprite to the provided wheel.png\r
        * Use the **`rotation`
        property as a counter** by 1 to produce a spinning effect\r
        * Test it out\r
        *
        Play with the increment amount to find a speed you like\r
        \r
        # Till The
        Animation Tab Works\r
        \r
        * <a href="https://images.code.org/60ce4d33daafb50996f53597b4f1547e-image-1466193542771.png">
        Wheel</a>
      U3 - Sprites and Mod - Width and Height Rand_markdown_instruction: |-
        # Width
        and Height\r
        \r
        Sprites have other properties. There are properties for
        width and height of the sprite. The property names are `width` and `height`.
        So to access the width of a sprite named `cat` you would say `cat.width`.\r
        \r
        #
        Do This\r
        \r
        The provided code draws a sprite that changes colors. Can you
        change the initial size of the sprite?\r
        \r
        * Set the width and height of
        the sprite before the draw loop using properties
      U3 - Sprites and Mod - Wrap Many Squares_markdown_instruction: "# Stuff"
      U3 - Sprites and Mod - X and Y Prop_markdown_instruction: |-
        # Predict\r
        \r
        What
        do you think this program will do when we run it?
      U3 - Sprites and Mod - two sprites_markdown_instruction: |
        # Two Sprites\r
        \r
        two
        rects - make one move on the left side of the screen and one on the right
        side of the screen\r
        \r
      U3 - User Input - Save getText To Variable_markdown_instruction: |-
        # Saving
        Text Input in Variables\r
        \r
        Often we want to save the information we pull
        in from the user for later use in our program. The best way to do this is
        to save it in a variable.\r
        \r
        # Do This:\r
        \r
        * **Create two variables
        inside your event handler** to store the **age** and **name** of the user.\r
        *
        **Use `getText()` to update the values** stored in each of these variables.\r
        *
        **Change your `console.log` statements to use your variable instead of `getText`**.\r
        \r
        ![](https://images.code.org/ca45dcb01ae2d1956ed2f87efeda0264-image-1445976691215.11.13
        PM.png)
      U3 - User Input - Saving After Input_markdown_instruction: |-
        # Saving After
        Input\r
        \r
        \r
        # Do This\r
        \r
        * **Starter Code:**  The starter code has
        already saved the name to a variable for later use.\r
        \r
        * ** Create a variable
        to store age ** and use `getText()` to save age for later use.\r
        \r
        * **
        Remember ** you can always check the value of a variable during execution
        by typing the name of the variable in the Debug Console.
      U3 - User Input and String -  Concat_markdown_instruction: |
        # Concat String\r
        \r
        On
        the last level we saved the variables as we said we would want to use them
        in the future. We are going to use them now to print nice messages out to
        our user welcoming them and congratulating them on their age. \r
        \r
        Up until
        now we have just printed out different variables on separate lines of code.
        However sometimes we want to combine the variable with some text on the same
        line. \r
        \r
        For example what if I want to say "Welcome to the game, Dani!".
        I need to be able to combine strings. \r
        \r
        The way we do this is with the
        + operator. \r
        \r
        `var sampleSentence = "Welcome to my app, " + name ;`\r
        \r
        Note:
        This may seem a little weird as you can't use any other math symbols on strings
        but someone decided this was easier than writing out a long method name so
        they set it up to work nicely for us. \r
        \r
        \r
        \r
        We are going to user
        Text Area to put text onto the screen as it allows you to put longer blocks
        of text on the screen easily. \r
        \r
        \r
        # Do This\r
        \r
        * **Starter Code:**  The
        starter code looks like your code from the last level expect now we have a
        Text Area where we output a welcome message to the user.\r
        \r
        * ** Add a
        TextArea ** to put a message about the users age.\r
        \r
        * ** Print in the
        TextArea** "I never would have guess you were ____" where the blank is the
        age they input. \r
      U3 - Variables - Clicker Game_markdown_instruction: |-
        ### 'Chaser-game' Continued\r
        \r
        Now,
        you'll finally get to modify your 'chaser-game'.  Making the minimum requirement
        might be pretty easy at this point.  Consider some of the enhancements suggested.\r
        \r
        ####
        Minimum requirement - Clicker version 1\r
        \r
        * Starting from your previous
        clicker app and use a variable to store a click counter. \r
        * Declare and
        initialize your counter variable as a global variable\r
        * update your counter
        variable within the click event handler. \r
        * A textLabel can be updated
        on each click to output the click counter value along with a message. \r
        \r
        ####
        Enhancements\r
        \r
        There are lots of ways to enhance this app.  Here are
        some things you can do in no particular order...\r
        \r
        * Add a big image
        which can serve as a background image. If the player clicks on the background
        image they lose a point. \r
        * Add a button that lets the user start over
        - reset the score.\r
        * Add another image that jumps around randomly, or appears
        and disappears that the user can click\r
        * Use arithmetic to change how the
        score is calculated with each click (e.g. rather than losing a point for doing
        something wrong, divide the score by 2).  \r
        * Add more and different event
        handlers that alter the score in different ways.\r
        * Use arithmetic to change
        the size of the image you need to click based on the score.  For example,
        make the image smaller and smaller as the score gets higher.\r
        * Make the
        size of the image change to a random value each time\r
        * Make the score go
        up and down by a random value
      U3 - Variables - Debug Scope_markdown_instruction: |-
        # Debugging Variables:
        Part 4\r
        \r
        We have the same starting code as last time with a few things
        added to it. I'm trying to change the value of foo to 4. It seems to be 4
        in some places but not others?  Can you fix it?\r
        \r
        # Do This\r
        \r
        *
        **Run the program**\r
        \r
        * **Add console log statements to try to figure
        out the value of the variable at different points**\r
        \r
        * Take a guess
        at what the problem is. We will discuss it on the next level.
      U3 - Variables - Debugging with Turtle_markdown_instruction: |-
        # Practice Debugging\r
        \r
        On
        the last two levels you learned two different common variable problems\r
        \r
        1.
        Foo vs foo\r
        2. "foo" vs foo\r
        \r
        On this level there are a bunch of
        errors you will need trace down to get the program to run correctly.\r
        \r
        #
        Do This\r
        \r
        <img src="https://images.code.org/256c4c3a041b107b4f2a6a743b963bf5-image-1445204671406.44.21
        PM.png" style="width: 150px; float: right; border: solid 1px black">\r
        \r
        *
        **Run the program**\r
        \r
        * **Locate the errors**\r
        \r
        * **Fix the program**.
        The final product should look like the image on the right.
      U3 - Variables - Decrement_markdown_instruction: |-
        # Decrementing Variables\r
        \r
        In
        last level we increased the value of our variable. Now what if we want to
        decrease it. Well you probably guessed it. Its just subtraction instead of
        addition!\r
        \r
        Hint: You may find it easier to edit the code in Text Mode
        instead of Block Mode. Text Mode allows you to type code instead of dragging
        blocks out. It is very helpful for changing certain parts of your code and
        you should feel free to use it whenever you feel it helps you. You can always
        switch back to Block Mode at any point! You can find Text Mode by clicking
        <img src="https://images.code.org/8020c9f5f3766a2d82c2376d6df1b896-image-1444966181885.04.50
        PM.png" width="100px"> in the upper right corner of the Code Workspace.\r
        \r
        #
        Do This\r
        \r
        * Update the program to decrement the value of the variable
        instead of increment.\r
        \r
        * Use console.log statements to check your work.
      U3 - Variables - Identify Variables_markdown_instruction: |-
        # What happened
        in the last level?\r
        \r
        In the last level we saw the difference between
        a var name `foo` and one names `Foo`.  Variable names are ** case sensitive**
        meaning that capital letters are different than lower case letters. \r
        \r
        #
        Debugging Variables: Part 3\r
        \r
        Sometimes you have lots of console log
        statments going on at once and its very difficult to tell which part of the
        code is printing each message. One strategy to deal with this is to name messages
        by putting some output in front of them. \r
        \r
        # Do This\r
        \r
        * **Run
        the program**. Check out what happens when you click Button 1 in comparison
        to the other buttons.\r
        \r
        * **Add `console.log()` statements** for the
        other buttons to identify where the value is coming from.
      U3 - Variables - Increment_markdown_instruction: |-
        # Incrementing Variables\r
        \r
        So
        far we have seen explicitly changing the value of a variable to a specific
        value. What if we want to increase the current value by a certain amount?
        We can add to the current value. This is called **incrementing** a value.\r
        \r
        #
        Do This\r
        \r
        * **Run the program** and add `console.log()` statements to
        see what is happening. \r
        \r
        * ** Add another increment of the current variable**\r
        \r
        *
        **Create another variable**\r
        \r
        * **Increment the value of the new variable**.
      U3 - Variables - Incrementing Variables_markdown_instruction: |-
        # Incrementing
        Variables\r
        \r
        We have brought back the turtle level we looked at before.
        You may notice that we repeat a lot of the same code in this example and the
        only thing that changes during the programm is the value of the variables.
        Your mind should be scream loop.  That would be a great thing but how do we
        deal with updating the variables?\r
        \r
        Well take a look at the variable.\r
        \r
        moveAmount
        goes up by 25 each time. So we could use incrementing!\r
        \r
        # Do This\r
        \r
        *
        **Run the code** and to see what it does. We want to recreate the same behavior
        with the loop\r
        \r
        * **Create a repeat loop for the repeated code**\r
        \r
        *
        **Increment moveAmount by 25 to create the same program you started with but
        with less code!**
      U3 - Variables - Read Using Turtle_markdown_instruction: |
        # Multiple Ways to
        Read\r
        \r
        Reading the value of a variable doesnt just have to be console.log\r
        Bring
        back turtle\r
        \r
        # Do This\r
        xPosition\r
        yPosition\r
        moveTo for Turtle\r
      U3 - Variables - Reassigning Variables with Console.log_markdown_instruction: |-
        #
        Variable Reassignment\r
        \r
        So far we have seen a bunch of programs that
        create one variable and keep the value of that variable the same through out
        the program. However somtimes we want to change the value of the variable
        as the program executes. The rest of the levels in this progression are all
        about different ways we can change the variable as the program is running.
        \r
        \r
        The first and most important thing about variable reassignment is
        that when you want to change the value of the variable you don't say var
        in front of the name. This tells the computer "Go look for this variable
        in your memory because I already made it".   The computer will go look for
        the variable in memory and update its value for you.\r
        \r
        # Do This\r
        \r
        *
        **Starter Code:** We have started you off with a variable that changes value
        and a couple `console.log()` statements. \r
        \r
        * **Run the program** to
        see how variable reassignment works.\r
        \r
        * ** Change the values of the
        variable** to see how that changes the program.\r
        \r
        * ** Add another reassignment
        statement** at the end of the program in order to change the value a second
        time.
      U3 - Variables - Set to Expression with Other Variables and Turtle_markdown_instruction: |-
        #
        Turtle Level for Expressions with variables
      U3 - Variables - Set to Expression with Other Variables_markdown_instruction: |
        #
        Expressions with Variables\r
        Arithmetic becomes much more interesting when
        we use other variables in our expressions. For example you can do this:\r
        \r
        <table  style="margin-left:
        auto;\r
          margin-right: auto; align: center">\r
        <tr>\r
        <td>\r
        <img src="https://images.code.org/13c21437292031a705744a8c2663c0d4-image-1445547765131.png"
        style="width: 400px;">\r
        </td></tr>\r
        <tr> <td>\r
         <h3>\r
         Mental Model\r
        ![](https://images.code.org/b4a2c125508fb06fd653b90c643cb53b-image-1447272790306.png)</h3>\r
        </td></tr>\r
        <tr><td><img
        src="https://images.code.org/95eb7e859d04c72ed82ed80023a870cf-image-1445546103564.gif"
        style="width: 400px;"></td>\r
        </tr>\r
        </table>\r
        \r
        The end result of
        an expression with variables is the same as one without.  The major difference
        is that values are retrieved from memory in order to do the calculation rather
        than simply hard-coded.\r
        \r
        # Mental Model Check\r
        Watch the animation
        above. To compute the expression the computer will: **first** retrieve each
        of the values of the variables used in the expression; **then** the arithmetic
        expression can be evaluated; **finally** the computed value can be stored
        in memory.\r
        \r
        # Do This:\r
        <img src="https://images.code.org/485f61858e45a39e383497c522c94d64-image-1445548216109.png"
        style="float: right; width: 300px">\r
        * **Scenario:** In the starting code
        we have provided you with variables that might be the kinds of things you
        would keep track of in a game: `totalTime`, `points` and `lives`.  (see right).\r
        \r
        *
        Right now the `totalScore` is just set to 0.  We want you to compute a final
        score so that the person is rewarded for having a lot of points and lives,
        but penalized for taking a lot of time.\r
        \r
        * **Write an expression** that
        calculates the player's total score and stores it in the `totalScore` variable.  The
        calculation is: **the player's points *times* lives *divided* by the total
        time.**\r
        \r
        * For the values provided the app display should look like
        this:\r
         \r
        <img src="https://images.code.org/10c9c6f162004a1b7216ae36c1427478-image-1445548367117.png"
        style="width: 250px">\r
      U3 - Variables - Set to Expression with Turtle_markdown_instruction: "** @Baker\nnote:
        not sure what this level should be... was just playing around**\\r\n\\r\n#\nVariable
        Expression Assignment Practice\\r\n\\r\nOn the last level we saw how\nvariables
        can be set to the value of an expression. A good thing to remember\nis that
        expressions can contain more than one symbol in them so we are going\nto practice
        some of that on this level with turle. \\r\n\\r\n# Do This\\r\n\\r\n*\n**Run
        the current program**\\r\n\\r\n* \\r\n\\r\n* "
      U3 - Variables - Set to Expression_markdown_instruction: |
        # Variables and Arithmetic
        Expressions\r
        A common thing to want to do is store the result of an arithmetic
        expression.  The 4 basic arithmetic operations `+ - * /` are available. \r
        \r
        <details><summary><strong>Here
        is a quick table that shows the arithmetic operators with code examples</strong>
        [click to expand]</summary>\r
        <table>\r
        <thead>\r
        <tr>\r
        <th style="text-align:center">operation</th>\r
        <th
        style="text-align:center">block</th>\r
        <th style="text-align:center">text</th>\r
        <th
        style="text-align:center">example</th>\r
        <th style="text-align:center">result</th>\r
        </tr>\r
        </thead>\r
        <tbody>\r
        <tr>\r
        <td
        style="text-align:center">add</td>\r
        <td style="text-align:center"><img
        src="https://images.code.org/2cf1014a4e0b1dedd361edc73a0f7eb1-image-1445536786715.png"
        alt=""></td>\r
        <td style="text-align:center">`+`</td>\r
        <td style="text-align:center">`result
        = 7 + 3;`</td>\r
        <td style="text-align:center">stores <strong>10</strong>
        in <em>result</em></td>\r
        </tr>\r
        <tr>\r
        <td style="text-align:center">subtract</td>\r
        <td
        style="text-align:center"><img src="https://images.code.org/96b80cd4d866130c7f8567765f9b4b00-image-1445536805959.png"
        alt=""></td>\r
        <td style="text-align:center">`-`</td>\r
        <td style="text-align:center">`value
        = 7 - 3;`</td>\r
        <td style="text-align:center">stores <strong>4</strong>
        in <em>value</em></td>\r
        </tr>\r
        <tr>\r
        <td style="text-align:center">multiply</td>\r
        <td
        style="text-align:center"><img src="https://images.code.org/3574725201e009142126f39ad1df8a78-image-1445536817791.png"
        alt=""></td>\r
        <td style="text-align:center">`*`</td>\r
        <td style="text-align:center">`score
        = 7 * 3;`</td>\r
        <td style="text-align:center">stores <strong>21</strong>
        in <em>score</em></td>\r
        </tr>\r
        <tr>\r
        <td style="text-align:center">divide</td>\r
        <td
        style="text-align:center"><img src="https://images.code.org/5d470b223717c9daac5246af0d013bdf-image-1445536826467.png"
        alt=""></td>\r
        <td style="text-align:center">`/`</td>\r
        <td style="text-align:center">`bonus
        = 7 / 3;`</td>\r
        <td style="text-align:center">stores <strong>2.3333</strong>
        in <em>bonus</em></td>\r
        </tr>\r
        <tr>\r
        <td style="text-align:center">parentheses</td>\r
        <td
        style="text-align:center">none</td>\r
        <td style="text-align:center">`()`</td>\r
        <td
        style="text-align:center">`avg = (99 + 85 + 93) / 3;`</td>\r
        <td style="text-align:center">stores
        <strong>92.3333</strong> in <em>avg</em></td>\r
        </tr>\r
        </tbody>\r
        </table>\r
        </details>\r
        <br>\r
        #
        Misconception Alert \r
        \r
        <img src="https://images.code.org/18eb833aba4a7199a28929dcd43c73f8-image-1445540549754.gif"
        style="float: right">\r
        When you have a statement like `result = 5 + 7;`
        realize that this **does NOT store a mathematical expression in the variable.**  \r
        \r
        Rather,
        with this instruction you are asking to compute 5 + 7 and **THEN** store the
        answer (a single number) in the variable.\r
        \r
        # Do This:\r
        \r
        **GOAL:**
        the goal here is mostly to acquaint yourself with typing arithmetic expressions
        - the answers to the questions below are less important, and should be used
        as interesting things to investigate.  \r
        \r
        We've given you some **starting
        code** with 5 statements similar to ones in the table above.\r
        * **Add `console.log`
        or `write` statements** to display the values of each of the variables.\r
        *
        Experiment with arithmetic expressions, try to make really big and really
        small numbers.\r
        \r
        <hr>\r
        \r
        **Things to Try:**\r
        * Using **multiplication:
        what's the biggest a number you can store** in a variable?\r
         * How many
        digits are in the biggest number before it starts using scientific notation?\r
        *
        Using **subtraction (or multiplication with negative numbers): what's the
        lowest number you store?** (low means a negative number with a lot of digits)\r
        *
        Using **parentheses** make a crazy-big arithmetic expression.  \r
         * NOTE:
        composing arithmetic expressions is ***much* easier in text mode**, and is
        actually almost unreadable in block mode.  Try doing this in text mode.\r

        \r
      U3 - image - Rotation Random Amount_markdown_instruction: |-
        <img src="https://images.code.org/a7697b89e2c6ea67ae453410a1da6d47-image-1465572156435.gif"
        alt="wheel spinning" style="width:200px;float:right" >\r
        \r
        # Random
        Rotation\r
        \r
        Using random numbers with rotation can add interesting animation
        effects. One effect you can use rotation for is shaking. **An object can look
        like its shaking a little when you set its rotation to a small random number
        repeatedly.**\r
        \r
        # Do This\r
        You are going to start creating a spinner
        wheel similar to one you might find at a carnival. You set up the wheel on
        the last level so you are just adding the clicker at the top.\r
        \r
        * Create
        a clicker sprite.\r
        * Set the sprite to the provided clicker image.\r
        *
        Set the rotation to a random number between -5 and 5.\r
        * Test it out.
      U3 - image - wheel free play_markdown_instruction: |-
        # Wheel Free Play\r
        \r
        Here
        is the spinning wheel you created so far. Continue to improve it.\r
        \r
        #
        Do This\r
        \r
        * Create a background scene for the wheel to go in.\r
        * Resize
        the wheel to fit the scene.\r
        * Add at least 1 other sprite to the scene
        and give it some movement.\r
        * Add your own ideas!
      U3 - images - bee free play_markdown_instruction: |-
        # Bee Free Play\r
        \r
        Here
        is the swarm of bees you have been working on. Continue to improve the animation!\r
        \r
        #
        Do This\r
        * Add a background.\r
        * Add a flower or hive sprite.\r
        * Make
        the flower or hive sprite move.\r
        * Add more ideas of your own!
      U3 - images - gears conditionals_markdown_instruction: |
        # Gears Conditionals\r
        \r
        The
        gears are back! Lets change the direction of spinning based on some conditions!\r
        \r
        #
        Do This\r
        \r
      U3 - images - gears free play_markdown_instruction: |-
        # Gears Free Play\r
        \r
        Here
        are the spinning gears you have been working on. Continue to improve the animation!\r
        \r
        #
        Do This\r
        \r
        * Add more gears of different sizes.\r
        * Make the gears line
        up and spin with the existing ones.\r
        * Create a background for the gears.\r
        *
        Add more ideas of your own!
      U3 AnimationsMulti Play Defender_markdown_instruction: |-
        # Defend Your Cake!\r
        \r
        In
        this lesson you will be learning to make a "Defender" style game. Push the
        ladybugs out of the way to prevent them from getting the cake. Once you lose
        3 candles the game is over!
      U3 Digital Assistant Design_markdown_instruction: |
        # Getting Started with Your
        Digital Assistant\r
        \r
        <img src="https://images.code.org/e875ff7b54c314a378cdb784f92371a0-image-1445989933171.52.04.png"
        style="width:200px;float:right;">\r
        Over the course of the next few lessons,
        you'll be __developing your own digital assistant__. To make your digital
        assistant more useful, it needs to be able to make __decisions__ based on
        questions the user asks it, and respond intelligently.\r
        \r
        To get started,
        __choose a topic__ you want your digital assistant to specialize in. It should
        be something you are interested in and know a lot about. Examples: Country
        Music, Sushi, College Football, Comedy Movies.\r
        \r
        You'll next set up
        the layout for your app. __The basic layout contains just two primary design
        elements:__ a text input and a text area.\r
        \r
        # Do This:\r
        \r
        - __Choose
        a topic__ for your digital assistant to specialize in.\r
        - __Create the layout__
        for your app. Your digital assistant should have:\r
            - A name\r
            -
        A text input for the user to ask a question\r
            - A text area for the digital
        assistant to respond\r
            - The text area should have a greeting for the
        user (e.g. Ask me a question about movies!)\r
      U3 Digital Assistant Set Text_markdown_instruction: |-
        # Respond to Basic User
        Input\r
        \r
        <img src="https://images.code.org/2bed8002ff3c89afb02db5809de1c40e-image-1445996503055.gif"
        style="width:200px;float:right;">\r
        Now you can have your digital assistant
        repeat what the user typed and add a __default response__. It's not the most
        intelligent response, but you'll build up to that over the next couple of
        lessons and it's important to build this program in pieces.  \r
        \r
        # Looking
        Back to Move Forward\r
        You're going to now add to your program without as
        much guidance as usual. Keep in mind that __this is very similar to programs
        you've already built__, so look back at your work for a refresher.\r
        - __Mad
        Libs:__ In Mad Libs you got a user's text when the 'Next' button was clicked,
        filled in the outline with the responses, and displayed the completed Mad
        Lib\r
        - __Introducing the 'change' event:__ You just learned about the
        'change' event that triggers when the user hits 'enter' on a text input.\r
        \r
        #
        Do This:\r
        - __Take the user's question and output it to the text area__
        when the 'enter' key is pressed in the text input\r
        - The response should
        also __include a default phrase__ such as _"I don't know about that yet!"_\r
        -
        __Format the response with newline characters__ to separate the user's response
        from the assistant's response.: `\n`\r
        - The __text input should clear__
        after the user hits 'enter'
      U3 Digital Assistant Target - Mehal_markdown_instruction: |
        # Introduction to
        the Digital Assistant\r
        \r
        __While digital assistants may seem like magic,
        they are just elaborate computer programs that parse, or process, text__ looking
        for combinations of words to make decisions about what to reply.\r
        \r
        Over
        the next few lessons, __you're going to build up your own digital assistant
        that responds "intelligently" to a user's question__, by making a decision
        about what to reply based on the contents.\r
        \r
        You'll now __explore a
        demo digital assistant__, Movie Bot, that represents the kind of program that
        you'll build up to. Try out some of the prompts below and also try your own.
        You'll quickly find the limits of what this program can and can't do.\r
        \r
        #
        Do this\r
        __Run Movie Bot. In the _'enter your question here'_ input, type
        each of the following prompts and hit 'enter' __\r
        - 'help'\r
        - 'What
        is the best PG comedy movie ever?'\r
        - 'What PG comedy movie should I watch
        next?'\r
        - 'Could you please tell me the best romance movie?'\r
        - 'I
        waNT To WatCH a MovIE!!!'\r
        - 'What is the capital of Kentucky?'\r
        -
        Play around! Ask more questions of Movie Bot and make a prediction about what
        logic it's using to reply\r
      U3 Digital Assistant Target_markdown_instruction: |
        # Introduction to the Digital
        Assistant\r
        \r
        __While digital assistants may seem like magic, they are
        just elaborate computer programs that parse, or process, text__ looking for
        combinations of words to make decisions about what to reply.\r
        \r
        Over the
        next few lessons, __you're going to build up your own digital assistant that
        responds "intelligently" to a user's question__, by making a decision about
        what to reply based on the contents.\r
        \r
        You'll now __explore a demo digital
        assistant__, Movie Bot, that represents the kind of program that you'll build
        up to. Try out some of the prompts below and also try your own. You'll quickly
        find the limits of what this program can and can't do.\r
        \r
        # Do This:\r
        __Run
        Movie Bot. In the _'enter your question here'_ input, type each of the following
        prompts and hit 'enter.' __\r
        - 'help'\r
        - 'What is the best PG comedy
        movie ever?'\r
        - 'What PG comedy movie should I watch next?'\r
        - 'Could
        you please tell me the best romance movie?'\r
        - 'I waNT To WatCH a MovIE!!!'\r
        -
        'What is the capital of Kentucky?'\r
        - Play around! Ask more questions
        of Movie Bot and make a prediction about what logic it's using to reply.\r
      U3 Digital_markdown_instruction: |
        Time to make your own specialized digital
        assistant! We'll be working with this a lot, so make it personalized and
        fun!\r
        \r
        ### Instructions:\r
        \r
        * Choose a topic you want your digital
        assistant to specialize in. It should be something you are interested in and
        know a lot about. Examples: Country Music, Sushi, College Football, Comedy
        Movies\r
        \r
        * Create your digital assistant\r
        \r
        \t* Your digital assistant
        should read the user's input and display it back to them along with some
        default response.\r
            \r
            * Anyone should be able to easily distinguish
        between the text that the user typed and the response from the digital assistant.\r
      'U3 L1 - 3: Teaching and Student Support Plan_markdown_instruction': |-
        <br><br>\r
        >
        **NOTE: before you start this task, make sure you’ve reviewed the lesson resources
        in this module, and have a good sense of how the lesson works. If you haven’t
        already reviewed the materials, do that now and come back to this task later.**\r
        \r
        #
        Lessons 1 - 3: Teaching and Student Support Plan\r
        \r
        ## Task Description\r
        \r
        Now
        that you have a better sense of this lessons in this sequence, let’s think
        about the types of supports students will need in order to be successful.
        Since the curriculum is based on inquiry learning, lessons feature activities
        that engage students in discovering core concepts themselves. It’s important
        to think through implementation plans and student support. In this task you
        will make a plan for teaching and student support **for one of the lessons
        in this sequence** that takes into account differentiation strategies and
        make-up work for absent students. Your teaching and student support plan should
        cover the following: \r
        \r
        \r
        - **Which lesson in the sequence are you
        discussing?** \r
        \r
        - **Details on how you will implement and differentiate
        the lesson:**\r
        \r
         - An outline of any changes you will need to make to
        the lesson to fit your local constraints or context (for example: pacing and
        time, dealing with classroom setup, etc). \r
         - An overview of the types
        of student needs you’ll likely need to support in your classroom (for example:
        students who are struggling to understand the underlying concept; students
        who are already familiar with the concept, but still have room to learn more;
        etc)\r
         - Your plan for addressing each of the needs outlined above (for
        example: integrating extension activities or other materials for students
        who already know something about the topic)\r
         - How will you address or
        emphasize the connection between lessons in this sequence? \r
        \r
        - **Plan
        for catching up absent students:**\r
        \r
         - How will absent students catch
        up on activities they missed? \r
         - How will you use the fact that the lessons
        in this sequence are related and build on one another to address make-up work?
        \r
        \r
        You can type out your teaching and student support plan in the box
        below, or you can upload a word doc or pdf file. \r
        \r
        ## Getting Credit
        for Completing this Task\r
        \r
        #### Task Review Details\r
        \r
        If this module
        is listed as  your “focus area”, then your response to the prompt above will
        be shared anonymously and reviewed by your peers, and you will review the
        work done by other teachers. Reviewers will be looking for thoughtful and
        thorough answers that demonstrate that you have spent time considering how
        the lesson will play out in your own classroom. Reviewers will have an opportunity
        to give feedback on your submission, and you can respond to that feedback
        and resubmit. \r
        \r
        In order to get credit for completing this task, two
        reviewers need to agree that you have responded to the prompts fully. If reviewers
        don’t feel comfortable making a decision about your task submission, they
        can elevate to a facilitator to review. You will always have a chance to address
        feedback from your reviewers and resubmit your task! Reviewer feedback will
        show up at the bottom of this page, once it’s available. \r
        \r
        <br><br>
      'U3 L4 - 6: Teaching and Student Support Plan_markdown_instruction': |-
        <br><br>\r
        >
        **NOTE: before you start this task, make sure you’ve reviewed the lesson resources
        in this module, and have a good sense of how the lesson works. If you haven’t
        already reviewed the materials, do that now and come back to this task later.**\r
        \r
        #
        Lessons 4 - 6: Teaching and Student Support Plan\r
        \r
        ## Task Description\r
        \r
        Now
        that you have a better sense of this lessons in this sequence, let’s think
        about the types of supports students will need in order to be successful.
        Since the curriculum is based on inquiry learning, lessons feature activities
        that engage students in discovering core concepts themselves. It’s important
        to think through implementation plans and student support. In this task you
        will make a plan for teaching and student support **for one of the lessons
        in this sequence** that takes into account differentiation strategies and
        make-up work for absent students. Your teaching and student support plan should
        cover the following: \r
        \r
        \r
        - **Which lesson in the sequence are you
        discussing?** \r
        \r
        - **Details on how you will implement and differentiate
        the lesson:**\r
        \r
         - An outline of any changes you will need to make to
        the lesson to fit your local constraints or context (for example: pacing and
        time, dealing with classroom setup, etc). \r
         - An overview of the types
        of student needs you’ll likely need to support in your classroom (for example:
        students who are struggling to understand the underlying concept; students
        who are already familiar with the concept, but still have room to learn more;
        etc)\r
         - Your plan for addressing each of the needs outlined above (for
        example: integrating extension activities or other materials for students
        who already know something about the topic)\r
         - How will you address or
        emphasize the connection between lessons in this sequence? \r
        \r
        - **Plan
        for catching up absent students:**\r
        \r
         - How will absent students catch
        up on activities they missed? \r
         - How will you use the fact that the lessons
        in this sequence are related and build on one another to address make-up work?
        \r
        \r
        You can type out your teaching and student support plan in the box
        below, or you can upload a word doc or pdf file. \r
        \r
        ## Getting Credit
        for Completing this Task\r
        \r
        #### Task Review Details\r
        \r
        If this module
        is listed as  your “focus area”, then your response to the prompt above will
        be shared anonymously and reviewed by your peers, and you will review the
        work done by other teachers. Reviewers will be looking for thoughtful and
        thorough answers that demonstrate that you have spent time considering how
        the lesson will play out in your own classroom. Reviewers will have an opportunity
        to give feedback on your submission, and you can respond to that feedback
        and resubmit. \r
        \r
        In order to get credit for completing this task, two
        reviewers need to agree that you have responded to the prompts fully. If reviewers
        don’t feel comfortable making a decision about your task submission, they
        can elevate to a facilitator to review. You will always have a chance to address
        feedback from your reviewers and resubmit your task! Reviewer feedback will
        show up at the bottom of this page, once it’s available. \r
        \r
        <br><br>
      'U3 L7 - 9: Teaching and Student Support Plan_markdown_instruction': |-
        <br><br>\r
        >
        **NOTE: before you start this task, make sure you’ve reviewed the lesson resources
        in this module, and have a good sense of how the lesson works. If you haven’t
        already reviewed the materials, do that now and come back to this task later.**\r
        \r
        #
        Lessons 7 - 9: Teaching and Student Support Plan\r
        \r
        ## Task Description\r
        \r
        Now
        that you have a better sense of this lessons in this sequence, let’s think
        about the types of supports students will need in order to be successful.
        Since the curriculum is based on inquiry learning, lessons feature activities
        that engage students in discovering core concepts themselves. It’s important
        to think through implementation plans and student support. In this task you
        will make a plan for teaching and student support **for one of the lessons
        in this sequence** that takes into account differentiation strategies and
        make-up work for absent students. Your teaching and student support plan should
        cover the following: \r
        \r
        \r
        - **Which lesson in the sequence are you
        discussing?** \r
        \r
        - **Details on how you will implement and differentiate
        the lesson:**\r
        \r
         - An outline of any changes you will need to make to
        the lesson to fit your local constraints or context (for example: pacing and
        time, dealing with classroom setup, etc). \r
         - An overview of the types
        of student needs you’ll likely need to support in your classroom (for example:
        students who are struggling to understand the underlying concept; students
        who are already familiar with the concept, but still have room to learn more;
        etc)\r
         - Your plan for addressing each of the needs outlined above (for
        example: integrating extension activities or other materials for students
        who already know something about the topic)\r
         - How will you address or
        emphasize the connection between lessons in this sequence? \r
        \r
        - **Plan
        for catching up absent students:**\r
        \r
         - How will absent students catch
        up on activities they missed? \r
         - How will you use the fact that the lessons
        in this sequence are related and build on one another to address make-up work?
        \r
        \r
        You can type out your teaching and student support plan in the box
        below, or you can upload a word doc or pdf file. \r
        \r
        ## Getting Credit
        for Completing this Task\r
        \r
        #### Task Review Details\r
        \r
        If this module
        is listed as  your “focus area”, then your response to the prompt above will
        be shared anonymously and reviewed by your peers, and you will review the
        work done by other teachers. Reviewers will be looking for thoughtful and
        thorough answers that demonstrate that you have spent time considering how
        the lesson will play out in your own classroom. Reviewers will have an opportunity
        to give feedback on your submission, and you can respond to that feedback
        and resubmit. \r
        \r
        In order to get credit for completing this task, two
        reviewers need to agree that you have responded to the prompts fully. If reviewers
        don’t feel comfortable making a decision about your task submission, they
        can elevate to a facilitator to review. You will always have a chance to address
        feedback from your reviewers and resubmit your task! Reviewer feedback will
        show up at the bottom of this page, once it’s available. \r
        \r
        <br><br>
      U3 Variables consolelog_markdown_instruction: |-
        # Console.log\r
        \r
        The **Debug
        Console** is an area below your code. Your user will never see the debug console.
        It is useful for **displaying information only you want to see, especially
        while debugging your program**.\r
        \r
        The `console.log` command can be used
        with **numbers, text, and the labels of a variable**, and will display the
        information provided on a new line in the Debug Console.\r
        \r
        ```\r
        var
        size = 100;\r
        console.log("The value of size is"); //displays this text
        on a line\r
        console.log(size);                   //displays the value of
        size (100)\r
        ```\r
        \r
        # Do This\r
        \r
        * **Use the `console.log` command**
        to display the random value currently stored in `size`
      U3 Variables flower example_markdown_instruction: |-
        # Drawing with Variables\r
        \r
        **Get
        excited because you're about to see your first variable used in a program!**
        You won't need to write any new lines of code. Instead run the program and
        then try changing the number assigned to the variable `petalSize` in line
        3. Be ready to discuss the changes you see and why you think they're happening.\r
        \r
        #
        Do This\r
        \r
        * Change the value assigned to `petalSize` and rerun the program.\r
        *
        **Turn to a neighbor and discuss:**\r
        \t* What changes in your program when
        you change this value?\r
            * Where in the code can you see the value of
        `petalSize` being used?
      U3 Variables gray square_markdown_instruction: |-
        # Drawing with Variables\r
        \r
        **Get
        excited because you're about to see your first variable used in a program!**
        This program uses a variable in three separate ways.\r
        \r
        * `var size;`
        Creates a new variable with the label size\r
        * `size = 50;` Assigns the value
        50 to size\r
        * `rect(200, 200, size, size);` Uses the value in size to draw
        a rectangle with equal width and height.\r
        \r
        # Do This\r
        \r
        * Run the
        program once to see how it works\r
        * **Change the value assigned to size
        in line 2** and rerun the program to see what changed.
      U3 Variables make a square_markdown_instruction: |-
        # Drawing with Variables\r
        \r
        You're
        going to start using **variables** in your programs. Variables are like **containers
        that can store a single piece of information**. There are only three ways
        to use a variable:\r
        \r
        * **Create** a new variable\r
        * **Assign a value**
        to a variable (Assign is just a fancy word for "give")\r
        * **Use the value**
        currently assigned to a variable \r
        \r
        You'll be learning how to use each
        type of command, but first have a look at a program that makes use of all
        three.\r
        \r
        # Do This\r
        \r
        * **Run the program once** to see how it works\r
        *
        **Change the number in line 2** and rerun the program\r
        * **Discuss / Reflect:**
        \r
        \t* What changed when you ran the program? Why do you think this happened?\r
        \t*
        On each line do you think you are **creating**, **assigning**, or **using**
        the variable?\r
            * Don't worry if you're confused, we're just exploring
        for now.
      U3 Variables misconceptions 1_markdown_instruction: |-
        # Test Your Predictions\r
        \r
        If
        you haven't already, **make a prediction for the output of each of the 4
        programs**.\r
        \r
        # Do This\r
        \r
        * Put your predictions in the answer box
        below.\r
        * Run this program and examine the results.\r
        * Compare the results
        to your predictions.\r
        \r
        **With a partner talk through:**\r
        \r
        * Whether
        your predictions matched the output\r
        * Why you think you see the output
        you do\r
        * Any misconceptions you might need to avoid in the future.
      U3 Variables misconceptions 2_markdown_instruction: What will Program 2 output?
      U3 Variables misconceptions 3_markdown_instruction: What will Program 3 output?
      U3 Variables misconceptions 4_markdown_instruction: What will Program 4 output?
      U3 Variables misconceptions try it_markdown_instruction: |-
        # Test Your Predictions\r
        \r
        If
        you haven't already, **make a prediction for the output of each of the 4
        programs**.\r
        \r
        # Do This\r
        \r
        * Run this program and examine the results\r
        *
        Compare the results to your predictions\r
        \r
        **With a partner talk through:**\r
        *
        Whether your predictions matched the output\r
        * Why you think you see the
        output you do\r
        * Any misconceptions you might need to avoid in the future.
      U3 Variables randomize your square_markdown_instruction: |-
        # Multiple Assignments\r
        \r
        A
        variable contains a single piece of information called its **value**. To use
        that value in a program you need an easy way to tell your program which variable
        to use. Each variable has a **label** or name to let you refer to it. In your
        last program, the variable had the label `size` and originally had a **value**
        of `10`. **Here's a summary of what each command does**\r
        \r
        ![](https://images.code.org/a8d2c5a88a8fbb8284a18bcb7464cb9b-image-1462301535506.51.32
        PM.png) **Create a new variable** with the label `size`\r
        \r
        ![](https://images.code.org/d2a2578e6d0190f7db69872c1ad64572-image-1462301539050.51.43
        PM.png) **Assign the value `10`** to the variable `size`\r
        \r
        ![](https://images.code.org/84b01d13b210c8cca8a71934b77acc56-image-1462301542169.51.53
        PM.png) **Use the value in `size`** to determine the width and height of the
        rectangle.\r
        \r
        # Do This\r
        \r
        This program is similar to the first but
        it assigns multiple values to `size` before drawing the rectangle.\r
        \r
        *
        **Run the program once** to see how it works\r
        * **Change the values in each
        of the assignments commands ![](https://images.code.org/d2a2578e6d0190f7db69872c1ad64572-image-1462301539050.51.43
        PM.png) to something new**\r
        * **Run the program again**. Which of your assignments
        is being used? How can you tell?
      U3 Variables write_markdown_instruction: |-
        # Displaying a Variable's Value\r
        \r
        Often
        you want to see the exact value contained in a variable, especially if it
        was randomly generated. Both `console.log` and `text` can be used with variables
        to specifically see their values. This is an important skill when **debugging**
        your programs.\r
        \r
        # Do This\r
        \r
        This program uses a variable `size`
        to draw a square with a randomly generated value.\r
        \r
        * **Use the `text`
        command** to display the value of `size` on the screen.\r
        * **Use the `console.log`
        command** to display the value of `size` in the debug console.
      U3 full clicker demo_markdown_instruction: |
        # Clicker Game Demo\r
        \r
        Try
        out this clicker game! You'll be building your own version (with a theme
        you choose) at the end of the lesson.\r
        \r
        # Things That Are Familiar\r
        You
        know how to build many of the components of this game already:\r
        - Multiple
        screens.\r
        - Buttons that change the screen when clicked.\r
        - Image that
        moves when you click it.\r
        \r
        # Things That Are New\r
        - Keeping track of
        and displaying the __changing score__.\r
        - Keeping track of and displaying
        the __changing lives__.\r
        - Changing to the __win screen if the score is
        25__.\r
        - Changing to the __lose screen if the lives is 0__.\r
      U3 mehal's clone_markdown_instruction: |
        # Introduction to the Digital Assistant\r
        \r
        __While
        digital assistants may seem like magic, they are just elaborate computer programs
        that parse, or process, text__ looking for combinations of words to make decisions
        about what to reply.\r
        \r
        Over the next few lessons, __you're going to
        build up your own digital assistant that responds "intelligently" to a user's
        question__, by making a decision about what to reply based on the contents.\r
        \r
        You'll
        now __explore a demo digital assistant__, Movie Bot, that represents the kind
        of program that you'll build up to. Try out some of the prompts below and
        also try your own. You'll quickly find the limits of what this program can
        and can't do.\r
        \r
        # Do this\r
        __Run Movie Bot. In the _'enter your question
        here'_ input, type each of the following prompts and hit 'enter' __\r
        -
        'help'\r
        - 'What is the best PG comedy movie ever?'\r
        - 'What PG comedy
        movie should I watch next?'\r
        - 'Could you please tell me the best romance
        movie?'\r
        - 'I waNT To WatCH a MovIE!!!'\r
        - 'What is the capital of
        Kentucky?'\r
        - Play around! Ask more questions of Movie Bot and make a prediction
        about what logic it's using to reply\r
      U3- Keys - Code Refactoring Exit Ticket_markdown_instruction: |
        # Free Response:
        Why Refactor?

        Why is refactoring your code important?
      U3- Variables - Assign Random For Turtle Draw_markdown_instruction: |
        # Putting
        random numbers into variables\r
        We can also store things in variables besides
        hard-coded numbers. The whole point of variables is to use them as placeholders
        for values that might be different each time you run the program.\r
        \r
        Let's
        assign a random nubmer to a variable.  Sometimes you want to generate a randomNumber
        but then use that same number repeatedly - so you need to store the number
        that was generated and use it several times in the code.\r
        \r
        We can assign
        a variable the result of an expression, or in the case where a function returns
        a value, like randomNUmber.  For example:\r
        \r
        var randSize = randomNumber(5,30);\r
        \r
      U3- Variables - Changing the Value_markdown_instruction: |-
        # Variable Reassignment\r
        \r
        Our
        old friend Turtle is back! Turtle is going to allow us to easily play with
        some variables. \r
        \r
        In the programs we have seen so far the value of the
        variable stays the same through the whole program. You don't have to keep
        a variable the same value for the whole program. We can change its value as
        the program runs.\r
        \r
        # Do This\r
        \r
        * ** Run the code** and see what
        happens.\r
        \r
        * ** Update the value of 'turnAmount' before each moveForward**
        so the turtle turns a different amount each time.
      U3- Variables - Create And Assign_markdown_instruction: |
        # Create and Assign
        At Once\r
        \r
        It's so common to want to create a variable and give it an
        initial value, that JavaScript has a shortcut that lets you create and assign
        with one line of code like this:\r
        \r
        <img src="https://images.code.org/84b576f02fe92989d0955dc8d4122eed-image-1445480709312.png"
        style="width:120px">\r
        \r
        \r
        You'll also see a new block in the toolbox
        for this (see right).<img src="https://images.code.org/cbe3f9ffd0bafef72ce18232f746fdbe-image-1445480538334.gif"
        style="float: right; width: 350px">\r
        \r
        # Do This:\r
        We'll just quickly
        practice using this form of variable creation and assignment.  The code you
        write will achieve the same thing as the previous level in fewer lines of
        code. \r
        \r
        * **Create a variable called `lives`** and **assign it the value
        3** using the new one-line version of this command. (See animation at right.)\r
        \r
        *
        **Add** `console.log` statements to display the value of `lives` just as before.  \r
        \r
        *
        The output in the console should (again) look like this:\r
         \r
         <img src="https://images.code.org/6405a3ed95ca3125ea1b2c9ffbdffa94-image-1445349849482.png"
        style="border: solid 1px gray">\r
        \r
      U3- Variables - Text Mode_markdown_instruction: |-
        # Give Text Mode a Try!\r
        The
        block-based mode of programming is useful for getting code into your app fast
        and error free.  But sometimes those little tiny edits are a pain. **Use text
        mode instead!**  Text mode is designed to make typing code fast and easy,
        and it also gives a lot of help to make your code error free. \r
        \r
        Let's
        re-create these variables again, but explore some features of text mode this
        time.\r
        \r
        # Try Each of These 3 Things\r
        We've given you the first two
        lines of code in a program. \r
        Expand each box below and try what's suggested
        - each builds on the previous one, so you might want to go in order.\r
        \r
        <details>\r
        <summary>1.
        **Switch to text mode and try to type.** [click to expand]</summary>\r
         \r

        Switch to text mode and **type out a `console.log` statement** to display
        the value of `score`.<br>\r
         <img src="https://images.code.org/d8cd6968bbb5fb5b5a8b8b3e41ee7ad1-image-1445353098262.gif"
        style="width: 500px">\r
        </details><br>\r
        \r
        <details>\r
        <summary>2.
        **Drag blocks into text mode.** [click to expand]</summary>\r
        \r
         If you
        don't want to type *everything* you can drag a block from the toolbox into
        text mode and it will show you the text version of it. **Add code to create
        the `lives` variable and a `console.log` message**.<br>\r
         \r
         <img src="https://images.code.org/b755a871221705ebdc73e73ffbfd1ad0-image-1445353101095.gif"
        style="width: 500px">\r
        \r
        </details><br>\r
        \r
        <details>\r
        <summary>3.
        **Check out code completion.** [click to expand]\r
        </summary>\r
         When you
        type commands a tool tip pops up that tries to guess what you're trying to
        type. If you see what you want in the box, **highlight it** (you can use arrow
        keys) and then **hit the tab key**. It will auto-complete the code for you!<br>\r

        \r
         <img src="https://images.code.org/177d70ab086d1481ad2ba5d367379aff-image-1445353103029.gif"
        style="width: 500px">\r
         </details>
      U3-AP-Practice-Choose-The-Abstraction_markdown_instruction: |-
        # AP Practice
        - Identify the Abstraction\r
        \r
        One component of the **AP Create Performance
        Task** is selecting an abstraction that you developed.\r
        \r
        <div style="width:
        80%; margin: auto; background-color: #EEEEEE; padding: 10px; font-family:
        serif; font-size: 12pt">\r
        \r
        <b>3. Program Code</b>\r
        <ul>\r
        <li>Mark
        with a <b>rectangle</b> the segment of program code that represents an abstraction
        you developed.</li>\r
        </ul>\r
        </div>\r
        <br>\r
        \r
        Here's the scoring
        guide for this question\r
        \r
        <div style="magin:auto">\r
        \t<img src="https://images.code.org/341764b27f16965cf27680e20c893a23-image-1508190677805.50.59
        PM.png">\r
        </div>\r
        \r
        # Choose the Student-Created Abstraction\r
        \r
        The
        program code below is from a program a student developed. \r
        \r
        ![](https://images.code.org/86d48cfc2c9c81551aa059281e9c62f3-image-1508189804595.34.48
        PM.png)\r
        \r
        **Write which of the rectangles (A, B, C, or D) is placed around
        a student-developed abstraction.**\r
        \r
        **Then explain your answer using
        the criteria in the scoring guide.**
      U3-AP-Practice-FR-design-process_markdown_instruction: |-
        # AP Practice - Performance
        Task Response\r
        \r
        Top-down design is design process and strategy for breaking
        down complex things.  The AP Create Peformance task asks you to write about
        your development process when writing code.  \r
        \r
        Let's take a minute
        to understand this writing prompt and how it is scored. Here is the actual
        writing prompt **2b** from the AP Create Task guidelines:\r
        \r
        <div style="width:
        70%; margin: auto; font-family: serif; font-size: 12pt; line-height: 1.3;
        background-color: #EEEEEE; padding: 10px">\r
        \r
        <b>2b.</b> Describe the
        incremental and iterative development process of your program, focusing on
        two distinct points in that process. Describe the difficulties and/or opportunities
        you encountered and how they were resolved or incorporated. In your description
        clearly indicate whether the development described was collaborative or independent.
        At least one of these points must refer to independent program development.
        <i>(Must not exceed 200 words)</i>\r
        </div>\r
        <br>\r
        Your response to this
        prompt can get up to 2 points, and is scored looking at two major things:\r
        \r
        1.
        (1 point) Do you describe a real *iterative* process for writing the *whole*
        program - "Incremental and iterative" means that you continuously improved
        your program based on testing, reflection, or feedback from a partner.\r
        \r
        2.
        (1 point) Do you actually describe *two* points in time while writing your
        code, what the specific issue was, and how you got past it by *reflecting*
        or *incorporating feedback* from a collaborative partner.\r
        \r
        Here are
        the actual scoring guidelines:\r
        \r
        ![](https://images.code.org/1cb4a1840d281a9c5c5096becc8c9054-image-1507827422107.png)\r
        \r
        ##
        Now you try it\r
        \r
        Try to write a response to this AP Prompt thinking about
        either how you developed the idea for the snowflake drawing program, or how
        you resolved to make the 3x3 grid program.  You might have to use a little
        bit of imagination to assume that it's part of a larger program you created
        yourself.  The point is to *practice writing* about your development process.\r
        \r
        NOTE:
        Writing a response like this will take some time to think about and compose.
      U3-AP-Practice-FR-manage-complexity_markdown_instruction: |-
        # AP Practice -
        Performance Task Response\r
        \r
        The AP Create Performance task asks you to
        write about an abstraction that you developed and wrote into your code. Most
        of the time that means identifying a function or procedure you wrote to help
        "manage complexity" in your program.\r
        \r
        Here is the actual prompt from
        the Create Performance Task:\r
        \r
        <div style="width: 70%; margin: auto;
        background-color: #EEEEEE; padding: 10px; font-family: serif; font-size: 12pt">\r
        \r
        <b>2d.</b>
        Capture and paste a program code segment that contains an abstraction you
        developed individually on your own (marked with a <b>rectangle</b>). This
        abstraction must integrate mathematical and logical concepts. Explain how
        your abstraction helped manage the complexity of your program.\r
        <br>\r
        <i>(Must
        not exceed 200 words)</i>\r
        \r
        </div>\r
        \r
        <br>\r
        \r
        Below is a segment
        of code from an "under the sea" program with a rectangle drawn around a
        portion of the code identifying an abstraction. Imagine that you wrote this
        and are composing an AP response about how this abstraction manages complexity.  (Note:
        ignore the requirement that the abstraction integrate "mathematical and logical
        concepts" for this practice response.  Just write about managing complexity).\r
        \r
        ![](https://images.code.org/d98fa58fce78eff86fd734f32e2960e4-image-1507913593511.png)\r
        \r
        Explain
        how the abstraction marked with the rectangle in the code above helps manage
        complexity of this program.
      U3-AP-Practice-FR-score-abstraction-response_markdown_instruction: |-
        # AP Practice
        - Scoring a PT Response\r
        \r
        In this scenario imagine that **you are scoring
        an AP Performance Task response.**  Below we show the student's submitted
        code as well as their written response for writing prompt **2d**.\r
        \r
        As
        a reminder, here is that prompt:\r
        \r
        <div style="width: 80%; margin: auto;
        background-color: #EEEEEE; padding: 10px; font-family: serif; font-size: 12pt">\r
        \r
        <b>2d.</b>
        Capture and paste a program code segment that contains an abstraction you
        developed individually on your own (marked with a <b>rectangle</b>). The abstraction
        must integrate mathematical and logical concepts. Explain how your abstraction
        helped manage the complexity of your program. \r
        <br>\r
        <i>(Must not exceed
        200 words)</i>\r
        </div>\r
        <br>\r
        \r
        And here is the student written response
        that goes with the code shown at right:\r
        \r
        <div style="width: 80%; margin:
        auto; background-color: #d9eff7; padding: 10px; font-family: monospace; font-size:
        12pt; line-height: 18pt; display: inline-block">\r
        \r
        <img src="https://images.code.org/732ea3633d67312724382facaa281955-image-1507928836621.png"
        style="float: right; margin-right: 40px">\r
        <strong>Student response:</strong><br>\r
        2d).\r
        The
        abstraction I have identified draws a heart in the program.  The whole program
        draws a picture with turtle graphics that says "I [heart] CS" where the
        [heart] is actually a drawing of a heart shape. Because I am using the parameterized
        versions of these turtle functions it helps manage the complexity of the code.
        Without the parameters the drawing is achieve-able but would require many
        many more lines of code.  For example: the command to <code>arcRight(220,
        30)</code>  - which moves the turtle in a 220-degree arc with a 30-pixel radius
        - is possible to do with a long series of repeated <code>moveForward</code>,
        and <code>turnRight</code> commands, possibly hundreds. By using the <code>arcRight</code>
        command I encapsulate in one line what the code should be doing rather than
        having to reason about hundreds of lines of code.\r
        </div>\r
        <div style="clear:
        both"></div>\r
        <br>\r
        Use the scoring guide (shown below) to determine
        if the student should be awarded the point for each of the two criteria about
        abstractions (row 7 and 8)\r
        \r
        ![](https://images.code.org/478c762d2ac876b8b830caabd62c1571-image-1507929333152.png)\r
        \r
        #
        You score it\r
        Each row of the scoring guide one is worth one point, so response
        2d is worth up to 2 points total.  Should the student get 0, 1 or 2 points
        total?\r
        \r
        Below explain how you would score it, and why you would or wouldn't
        award the point for each row. Cite the specific criteria in the scoring guide
        to justify your response.
      U3-Design Mode-ID and Event Handler_markdown_instruction: |-
        # Activate Your
        Button\r
        On the last level you added a button using Design Mode. If you click
        it, nothing happens. Let's make the button work. \r
        Your button has been
        brought over to this level.  \r
        \r
        **Goal:** Add code using Design Mode
        to make the button respond to a click.\r
        \r
        # Do This:\r
        \r
        <img src="https://images.code.org/9ff41c3ea30ece355e91eaca5cdc1e36-image-1444417748945.gif"  style="width:
        250px; float: right">\r
        \r
        * **Change ID of button** from “button1” to
        “redButton”.\r
        \r
        * **Insert `onEvent` from Design Mode** by clicking *Insert
        and show code* under the **Events Tab**.\r
        \r
        * Run the program and **look
        for the output in the *Debug Console* **below the workspace instead of the
        app window. We will discuss the *Debug Console* on the next level.
      U3-Design Mode-ID_markdown_instruction: |
        # Baker note: we might not need this
        level, or the message about IDs being important might be able to shift to
        another level (stays here for now...pending).\r
        \r
        # IDs Are Still Important\r
        \r
        \r
        #
        Do This\r
        \r
        Try updating the ID name and then update the code to match.
        \r
        \r
        **Switch to Design Mode** and **edit the ID** to be more descriptive.
        You can edit it from either the Properties tab or the Events tab.\r
        \r
        **Switch
        to Code Mode** and check out the **dropdown ID menu**. Your new ID should
        be in the dropdown list!\r
        \r
        **Test it out** to make sure it works.\r
        <img
        src="https://images.code.org/43e3536af5af3ff17b0972a1c6c2a300-image-1444333589342.gif"
        style="width: 500px;">\r
      U3-Design Mode-Image_markdown_instruction: |-
        # Adding Images\r
        \r
        To practice
        using images in Design Mode we are going to **recreate the "Chaser Game"**
        from the last lesson.\r
        \r
        # Do This:\r
        \r
        * **Add an Image element**
        ![](https://images.code.org/cda02ffe3acc869822a551f5cdbf8606-image-1444667846363.37.14
        AM.png)\r
        * **Choose your image** ![](https://images.code.org/e5b9571ae54af60a3ae597b787e741ea-image-1444667688762.34.42
        AM.png)\r
        \t* **URLs** can be added directly into the "picture" field.  \r
        \t*
        **Upload images** by clicking "Choose".\r
        \t* **Note:** You can always
        see all the files you've uploaded by clicking the gear at the top of the
        toolbox. ![](https://images.code.org/53b405b771bc11bf5d24c84c878c80dd-image-1444668067826.35.10
        AM.png)\r
        * **Insert an event handler** for the image.\r
        * From here you
        can **work in Code Mode** to complete the remainder of your application. Recall
        that in the "Chaser Game" you just need an image that runs away from the
        mouse.\r
        * If you have time **use Design Mode** to quickly improve some of
        the visual components of your game.
      U313 Two Buttons with Ids_markdown_instruction: |
        # Make a Prediction - Learning
        to Code Better, Faster\r
        Research has shown that when you encounter a new
        piece of code you learn faster by simply **making a prediction about what
        will happen before you run the program**. It's not actually important if
        your prediction is correct, but the act of predicting allows you to construct
        a stronger mental model for how code works and then test your understanding
        when you run the code.\r
        \r
        Good programmers do this all the time. **They
        don't expect their code is correct the first time they write it.** Instead
        they get in the habit of running their code, checking their assumptions, and
        making changes as needed. Programming isn't a fixed set of steps. It's a
        creative and continuous cycle of writing, testing, and improving code.\r
        \r
        #
        Predict - Observe - Reflect\r
        <img src="https://images.code.org/5fc24f3f3e1ceae4bb196f1005d9e866-image-1444083405061.png"
        align=right>This program creates a button and **two event handlers** which
        listen for a click on that button. \r
        \r
        **Predict:** What will happen when
        the "Forward" button is clicked? Force yourself to make a prediction about
        what the turtle will do! **"I don't know" is not a prediction**. Think
        about the options and talk about it with a classmate: Will it..\r
        * move
        forward?\r
        * turn left?\r
        * turn left *and* move forward?\r
        * do nothing?\r
        *
        move forward *and* turn left?\r
        * cause an error?\r
        * something else? \r
        \r
        **Observe:**
        Once you've made a prediction, close these instructions and **run the program**
        to observe what happens.\r
        \r
        **Reflect:** Was your prediction correct?
        If not what about your mental model might need to change? Talk about it with
        a classmate and experiment with the code to make sure you understand what
        is happening.\r
      U313 drag Two Buttons_markdown_instruction: |
        # Buttons and Unique IDs\r
        You
        may have noticed that the button command has two parameters: `button(id, text)`.  The
        `text` is the text that actually shows up on the button display, and the `id`
        (we'll typically write **ID**) is a **unique identifier** for that element
        in the app.\r
        \r
        Each element that appears in the app must have a **unique
        ID**. In fact, if you try to run a program that has two buttons with same
        ID you will get a warning message in the console. Watch:\r
        <img src="https://images.code.org/47ec46e0563f63641cc10ef152e9f86e-image-1444074330713.gif"
        style="border: solid 1px black; width:500px">\r
        \r
        Notice that even though
        the text on the buttons was different, the IDs were the same, which caused
        the error message to show up. To get rid of that error message you will have
        to change the ID of the button from the default `id` to something else.\r
        \r
        **Error
        messages happen to everyone and they are helpful!**: getting an error or warning
        message when you run your program is *not a big deal*. Programmers actually
        rely on error messages to tell them where and how to fix their code.\r
        Sometimes
        error messages are bit cryptic: `WARNING: Line: 2: button() id parameter refers
        to an id (id) which already exists.` But a warning like this contains helpful
        information and clues such as the line the error occured on, or some word
        or command it didn't recognize. \r
        \r
        # Do This:\r
        The goal here is to
        experience an error message in a program, study it, and fix it.\r
        * **Drag**
        two buttons into the workspace (same as shown above) with the default IDs.\r
        *
        **Run** the program to see the warning message in the console.\r
        * **Read**
        the warning message to see what it says.\r
        * **Change** the IDs of the buttons
        to make them unique. An ID must be specified in quotes. You can use double-quotes:
        `"myId"`, or single quotes: `'myId'`\r
        * **Re-run the program** to make
        sure you don't get the error.\r
        \r
        Once you've got two buttons on the
        screen with different IDs and the program can run without generating the warning,
        move on to the next level.\r
      U313 eventsDetails_markdown_instruction: |
        # Buttons and Unique Ids\r
        You may
        have noticed that the button command has two parameters: `button(id, text)`.  The
        'text' is the text that actually shows up on the button display, and the
        'id' (which is shorthand for I.D.) is a **unique identifier** for that element
        in the app.\r
        \r
        Each element that appears in the app must have a **unique
        id**. In fact, if you try to run a program that has two buttons with same
        id you will get a warning message in the console. Watch:\r
        <img src="https://images.code.org/47ec46e0563f63641cc10ef152e9f86e-image-1444074330713.gif"
        style="border: solid 1px black; width:500px">\r
        \r
        Notice that even though
        the text on the buttons was different, the ids were the same, which caused
        the error message to show up. To get rid of that error message you will have
        to change the default button ID of `"id"`.\r
        \r
        # Do This\r
        The only
        goal here is to experience this kind of warning message. It's not a big deal
        if it happens to you. It's a very common thing to happen and the computer
        is trying to tell you how to fix your code.\r
        \r
        * **Drag** two buttons
        into the workspace (same as shown above)\r
        * **Run** the program with the
        default values to see the warning message in the console.\r
        * **Read** the
        warning message to see what it says.\r
        * **Change** the ids of the buttons
        to make them unique, and re-run the program to make sure you don't get the
        error.\r
        * **NOTE:** an id must be specified in quotes. You can use double-quotes:
        `"myId"`, or single quotes: `'myId'` \r
        \r
        \r
      U3L01 Assessment1_markdown_instruction: |+
        Consider the algorithm you designed
        for today’s activity. Identify two instances where there may be multiple ways
        to interpret your instructions and suggest improvements that could be made
        to improve their clarity.

      U3L01 Assessment3_markdown_instruction: |+
        Describe the features of a programming
        language that make it different from the language you typically use in everyday
        life. Explain why a programming language must be created in this way.

      U3L01 Free Response Getting Started_markdown_instruction: "Complete the \"thinking\"\nportion
        of a Think-Pair-Share activity here. \n\nPlay the part of a \"lazy\nworker.\"
        \n\n* What task do you dislike doing that you can imagine a computer\nprogram
        could take over for you? \n* List a few important steps that a computer\nprogram
        would have to complete. \n* Do you think this would be an easy or\nhard task
        to program? Why?\n"
      U3L01 Free Response Wrap Up_markdown_instruction: "* Describe the instructions\nyou
        followed in the block sculpture algorithm that were the most helpful?\n*\nWhat
        do you think is the hardest part of writing a useful algorithm? \n* If\nyou
        were to repeat this activity, how would you improve the algorithm you\nwrote?
        \n\n\n"
      U3L02 Assessment_markdown_instruction: "This lesson introduced the notion of\n\"efficiency\"
        in programming, and that it might mean different things at\ndifferent times.
        \ Think of an example *outside* of computer science in which\nyou have heard
        the term “efficiency” and compare it to the ways we talked\nabout efficiency
        in programming.  \n\nIn what ways is the meaning of \"efficiency\"\nthe same?
        In what ways is it different?\n"
      U3L02 Free Response Getting Started_markdown_instruction: "Today we solved\na
        series of problems with a limited set of commands (only 4). Give at least\none
        reason why it's useful to learn how to solve and program solutions with\na
        limited set of commands.  \n"
      U3L02 Free Response Wrap Up_markdown_instruction: |+
        Summarize your experiences
        with this first App Lab lesson by answering the following questions:

        *
        What surprised you about programming with such a small set of basic commands?
        *
        Were you able to be creative with such a limited set of tools?
        * What was
        most frustrating about this activity? If you could add one additional simple
        command, what would it be and why?


      U3L03 - draw rect function_markdown_instruction: |-
        This is your code from the
        previous level.  Did you know that you can write functions that call your
        own functions?\r
        \r
        Take the code that draws the rectangle and move into
        a new function called `drawRectangle()`. The first line of your program should
        be a single call to `drawRectangle()`. The rest of the code should just be
        function definitions. \r
        \r
        NOTE: your program will still do the same thing.  We
        are just changing the way it is written to demonstrate that you can use functions
        you've already written as building blocks in new functions.\r
        \r
        ![](https://images.code.org/fd6e8b4d2218a242bae19ac9c78b5d5f-image-1447799438050.gif)
      U3L03 - draw step_markdown_instruction: |-
        We are going to walk you through a
        process that shows you the benefit of thinking about programming tasks in
        terms of writing functions.\r
        \r
        * Over the next 3 levels we are going to
        write a program that draws the figure shown at right which sort of looks like
        a jagged diamond shape. <img src="https://images.code.org/53679cc10ff90b6120184d93ad012797-image-1441770558200.png"
        align='right'>\r
        \r
        * If you look at this image you might recognize elements
        that repeat: this is a 4-sided figure, and each side is made up of some zig-zag
        steps.\r
        \r
        * We're going to break the programming down into useable parts
        and then use those parts as building blocks to make this more complex drawing.\r
        \r
        *
        First let's **define** a function that *draws just one of these zig-zag steps.*  We've
        started you out with a definition of `right()` that you can use...\r
        \r
        #
        Do This:\r
        \r
        **Define** a function named `function drawStep()` which makes
        the turtle move forward and left as shown. \r
        \r
        **Note**: at the end the
        turtle should be facing the same direction it started.\r
        \r
        ![](https://images.code.org/4fa605353695afa0cd01ec01a1e2c709-image-1441772033658.gif)
      U3L03 Define and use turnAround_markdown_instruction: |-
        # Do This:\r
        **Define**
        a function called `turnAround` which turns the turtle around. Once you've
        defined the function **call** it to make sure it works as you expect and then
        move the turtle forward, as shown below. \r
        \r
        ![](https://images.code.org/4c31307ec14cc6dfd65589f2a813120e-image-1447884881189.gif)\r
        \r
        **Remember**
        typically, you call a function in lines of code *above* the function definition
        - this might make you  feel like you are working in reverse, since you first
        write the code to define the function and *then* add a line to call it.  Here
        is the `moveTwice` example from the video. You should do something similar
        for turnAround:\r
        \r
        ![](https://images.code.org/3faf16575757ffae616dffd761085ab5-image-1467818996127.gif)
      U3L03 Draw a T using turnAround_markdown_instruction: |-
        # Do This:\r
        Get some
        more practice **calling** a function by using `turnAround()` along with your
        old friend the `moveForward()` function to create a plus sign that is centered
        at the turtle's first position, as shown below. Even though you just wrote
        this function, we've already **defined** `turnAround()` for you. Remember,
        add lines of code that call the function *above* the definition.\r
        \r
        *NOTE:
        the turtle should end where it started, which is also the middle of the plus
        sign, as shown below. Each of the four segments of the plus sign are one `moveForward()`
        long.* \r
        \r
        ![](https://images.code.org/9d6c2d7d69c2f1c68c5b273bdbae65c7-image-1441296690812.11.14
        AM.png)
      U3L03 Free Response Getting Started_markdown_instruction: |
        In the previous
        lesson we created simple turtle drawings using only four commands. At some
        point you probably wished that more commands were available to you. Describe
        a command you wanted to be able to use and explain why you wanted to use it.
        If you have time try to brainstorm additional commands as well.
      U3L03 Free Response Reflection_markdown_instruction: |
        Respond to your teacher's
        prompt in the space below.
      U3L03 Free Response Wrap Up_markdown_instruction: |+
        In your own words, explain
        at least one reason why programming languages have functions.  Include an
        example of something you did in this lesson that demonstrates the reason you
        describe.

      U3L03 Three Steps_markdown_instruction: |
        # Do This:\r
        <img src="https://images.code.org/5f20ab5fd8b95754e8cfc948a4b41522-image-1441772307480.png"
        align=right width=200>\r
        We are going to continue to build up towards a diamond
        by **defining** a function that draws one side of the diamond.\r
        If you look
        at the whole image we are trying to draw, you'll notice that each of 4 sides
        is comprised of 3 calls to `drawStep()`, plus a few extra moves (shown in
        orange).\r
        \r
        Right now we'll write the code for one of those sides. So...\r
        \r
        **Define**
        a new function named `drawSide()` which makes three calls in a row to `drawStep()`
        followed by a `moveForward()` and `right()`.  \r
        \r
        **Replace** the original
        function call to `drawStep()` with a call to your newly defined `drawSide()`
        function. \r
        \r
        The diagrams below show the intended actions.\r
        <table>\r
        <tr>\r
        <td>![](https://images.code.org/480f6787e4d2daf34d67642e25b29de6-image-1441772552026.png)
        </td>\r
        <td>![](https://images.code.org/02f52d406854d6f86535adf2f593ccc9-image-1441772709549.gif)
        </td>\r
        </tr>\r
        </table>\r
        \r
        \r
      U3L03 define turnRight and draw a rectangle_markdown_instruction: |-
        # Draw a
        rectangle with right\r
        \r
        As you know, in order to turn right we have to
        call `turnLeft()` three times.  We've started you out with a stub that **defines**
        a function called `right()`.  Start by adding code inside the function definition
        that will turn the turtle to the right (by turning left three times) when
        called. \r
        \r
        Then **use** this function in some code to draw a rectangle,
        as shown below.  Make sure the turtle ends facing the same direction and in
        the same location it started. *Note that the rectangle below is 2 moveForwards
        tall and 1 moveForward wide*\r
        \r
        ![](https://images.code.org/fd6e8b4d2218a242bae19ac9c78b5d5f-image-1447799438050.gif)\r
        \r
        **Note**:
        Your program will still do the same thing. We are just changing the way it
        is written to demonstrate that you can use functions you've already written
        as building blocks in new functions.
      U3L03 draw diamond_markdown_instruction: |
        # Do This:\r
        We're finally ready
        to make our diamond! **Define** a function named `function drawDiamond()`
        that **calls** `drawSide()` multiple times in order to complete the drawing.
        Your final solution should be triggered by **a single call** to `drawDiamond()`.
        \r
        \r
        <table>\r
        <tr>\r
        <td><img src="https://s3.amazonaws.com/uploads.hipchat.com/65395/961892/NoxVhFlLf9HlybZ/upload.png"
        width=200></td>\r
        <td><img src="https://images.code.org/dca51c5b17a8c0778787337c3609557c-image-1441802821237.gif"
        width=200></td>\r
        </tr>\r
        </table>\r
        \r
        <hr>\r
        \r
        **Notes**:\r
        \r
        In
        the end you will have 4 functions defined:\r
        \r
        * drawDiamond()\r
        * drawSide()\r
        *
        drawStep()\r
        * right()\r
        \r
        These 4 functions work sort of like a hierarchy
        of top-down design.  At the top is `drawDiamond()` which makes calls to `drawSide()`,
        which makes calls to `drawStep()` and `right()`.\r
        \r
        \r
      U3L04 - 3 by 3 with functions_markdown_instruction: |-
        # Do This:\r
        \r
        We're
        going to revisit a familiar problem, **drawing the 3x3 square as efficiently
        as possible**. The only difference is that this time you are armed with the
        ability to create **layers of functions** to help you design more elegant
        and efficient solutions. Use the techniques you've learned for **breaking
        down problems into layers of functions** in order to improve upon your previous
        solution.\r
        \r
        ![](https://images.code.org/121251ed82b4986848062abacdef6963-image-1441824892425.54.18
        PM.png)
      U3L04 - six by six lines_markdown_instruction: |-
        Code a solution to the highway
        lines problem.  Your solution should use functions to reduce clutter and improve
        readability of your solution.\r
        \r
        ![](https://images.code.org/23a714face9925e1eb8dfe3c133eb22d-image-1441815998620.png)
      U3L04 - snowflake_markdown_instruction: |-
        # Do This:\r
        \r
        You should have
        already worked with a partner to break down the design below into its multiple
        layers of functions. Now you'll have an opportunity to program your solution.
        Here are a few things to keep in mind:\r
        \r
        * Identify useful patterns that
        can be reused and give them **their own functions**.\r
        * Remember: The functions
        you design **can call one another**. This is how you create layers of abstraction.\r
        *
        Functions should be given names that are **descriptive and meaningful**.\r
        *
        Your program should be kicked off with a single call to a function that makes
        calls to subsequent functions.\r
        \r
        \r
        ![](https://images.code.org/afed66de9dc3cdb10f627a176139c58f-image-1441822234028.09.33
        PM.png)
      U3L04 Assessment1_markdown_instruction: |+
        Consider the figure below.  Use top-down
        thinking to design a solution to the problem.  In the space provided write
        a list of **just the names** of the functions that you would write in a program
        that draws this figure.  (Assume that the long line segments are 6 turtle
        moves long).

        ![](https://images.code.org/43895f8ceccb12f72e7f5ba03152a6e6-image-1441914144956.png)

      U3L04 Free Response Getting Started_markdown_instruction: "Define the term\n\"abstraction.\"
        \n\nWhy is abstraction an important concept in computer science?\n"
      U3L04 Free Response Reflection_markdown_instruction: |
        Respond to your teacher's
        prompt below.
      U3L04 Free Response Wrap Up_markdown_instruction: |
        In the Create Performance
        Task, you will be asked to identify an abstraction in your program and explain
        how it helps manage the complexity of the program. Functions are a form of
        abstraction. Pick a function you wrote in your solution to the 3x3 square
        problem and explain how it helps manage the complexity of your program.
      U3L05 Assessment2_markdown_instruction: |
        Describe the trade-offs of writing
        highly efficient code. Give an example.
      U3L05 Assessment3_markdown_instruction: |
        How can functions be used to make
        code more readable?
      U3L05 Assessment4_markdown_instruction: |
        How can functions be used to make
        code more efficient in effort, space, or time?
      U3L05 Free Response Getting Started_markdown_instruction: "Efficiency means\ndifferent
        things depending upon the activity. What does it mean to be efficient\nin
        these activities?\n\n* Doing homework\n* Packing a bag \n* Getting from\none
        place to another \n* Doing household chores \n* Driving a car \n* Managing\na
        budget \n\n\n"
      U3L05 Free Response Reflection_markdown_instruction: |
        In less than 50 words,
        summarize what efficiency means in programming.
      U3L06 - moveForwardwithParams_markdown_instruction: |-
        # A New Way to Move\r
        The
        `moveForward()` turtle command that we've used so far moves the turtle the
        same amount every time (25 pixels in fact). Similarly, `turnLeft()` turns
        the turtle to the left exactly 90 degrees. Today we are going to see how some
        functions can **accept input**, such as a number, to more exactly control
        behavior. For example, you can write `moveForward(103)` to move the turtle
        exactly 103 pixels if you like.\r
        \r
        # Do This:\r
        \r
        **How far is it to
        the top edge of the screen?**\r
        \r
        Run the program to see the new version
        of `moveForward()` in action. Then **changing only the number supplied to
        `moveForward()`**, move the turtle to the top edge of the screen. Experiment
        to find out the distance in pixels between where the turtle starts and the
        top edge of the screen.\r
        \r
        Once you've found it, compare with a neighbor
        to see that you're seeing the same thing and click **Finish** to move on.  \r
        \r
        **Note:**
        There might be slight differences depending on whether you get the turtle
        to just touch the edge, or go off the screen entirely.
      U3L06 Assessment_markdown_instruction: |+
        It is said that *functions with parameters
        generalize the behavior of a more specific command and allow programmers to
        use functions instead of duplicated code.* Explain what this means to you
        using the difference between turnLeft() and turnLeft(angle) as an example.

      U3L06 Challenge 1 triangle_markdown_instruction: |-
        # Terminology: *Parameter*\r
        \r
        When
        you have a command like: `moveForward(100)` we say that the `moveForward()`
        command *accepts a **parameter***.  And 100 is the value *given* or *supplied*
        to `moveForward()`'s **parameter**.  Since this value can change, you will
        often see a written description for the command that looks something like
        **`moveForward(pixels)`** to indicate that the value supplied to `moveForward()`'s
        **parameter** should be the number of pixels you want it move.\r
        \r
        The
        good old `moveForward()` command still exists.  In fact it's the **same command**
        as `moveForward(pixels)`. The "parameter-less" version of `moveForward()`
        simply supplies a **default value** to the parameter.  We might also say that
        the `moveForward()` command has an **optional parameter** since you could
        call either `moveForward()` or `moveForward(50)` and it doesn't cause an
        error when you run the program.\r
        \r
        NOTE: you can write your own functions
        that accept parameters, too!  But we'll get to that in later lessons.\r
        \r
        #
        New Commands!\r
        \r
        Check it out.  The turtle toolbox now contains the *parameterized*
        versions of the turtle commands including `turnLeft(angle)` and `turnRight(angle)`.  Notice
        that `penUp()` and `penDown()` don't have parameters.  \r
        \r
        # Do This:\r
        \r
        Use
        the parameterized versions of the commands to draw a triangle with sides that
        are 100 pixels long.\r
        \r
        <img src="https://images.code.org/0207568ff82b0571fa6757081330749d-image-1441901783815.png"
        width=150>
      U3L06 Challenge 2 purple square_markdown_instruction: |
        # Documentation\r
        As
        we move forward you are going to see more and more (and more!) commands added
        to the toolbox.  What happens if you see a command and don't understand it,
        or you forget how it works?  Don't worry, this happens to professional programmers
        all the time! No one actually memorizes long lists of commands.  Most programming
        environments have ways to quickly look up documentation about the commands
        of the language you're using.  **Good news: App Lab has documentation too!**\r
        \r
        ![](https://images.code.org/3fe10e1b65edb37306099098161be001-image-1441990727053.gif)\r
        \r
        When
        you **hover your mouse over a command** in the block palette a bubble pops
        up with a quick reminder of what a function does, and what its parameters
        are. If you click "See examples", you will be taken to more detailed documentation
        of the command which includes **code examples** that you can even copy and
        paste.\r
        \r
        # More New Commands: Color and Width\r
        \r
        Two powerful new
        commands have been added to the toolbox, `penColor()` and `penWidth()`. \r
        \r
        **Read
        the documentation:** Read through the documentation for `penColor()` and `penWidth()`
        which let you set the color and size of the pen your turtle uses to draw.
        The documentation for `penColor()` has a lot in it!  For now just look at
        the **named colors**, things like "red", "green", etc.  Don't worry,
        you'll get a lot of opportunities to practice with colors in a variety of
        ways.  We're just getting started!\r
        \r
        # Do This:\r
        \r
        **Draw the square:**
        Use pen color and width functions to draw the thick blue square shown below.  The
        size of the square doesn't matter.\r
        \r
        <img src="https://images.code.org/6ed36a408e568a0410f10d017550843f-image-1441904430698.png"
        style="height: 250px">\r
      U3L06 Challenge 3 fill pink_markdown_instruction: |-
        # Drawing with Dots\r
        \r
        We've
        added a new command called `dot()`.  \r
        \r
        **Read the documentation** for
        the `dot()` command.\r
        \r
        **Make a "snowman"**\r
        \r
        1. Set the pen color
        to some new color (we made ours pink)\r
        \t* Note: even if you just want the
        default dot color - black - explicitly set the color to black here.\r
        \r
        2.
        Using that color, make a dot so big that it fills the screen.\r
        \r
        3. In
        a different color, make 3 dots in a row, each one smaller than the next. (We
        made our dots white to look like a snowman)\r
        \r
        You might want to go back
        to the documentation for `penColor()` to look up other colors to use.\r
        \r
        ![](https://images.code.org/e63f3cf801abf22c01c475031c46ff66-image-1441992129690.gif)
      U3L06 Challenge 4 bullseye_markdown_instruction: |-
        # Hexadecimal Colors\r
        \r
        In
        reading the documentation, you may have noticed that `penColor()` can accept
        colors in the **hexadecimal format (e.g. "#AC9100")**. Colors on websites
        will often be represented in this format. It's useful to know how to interpret
        and use this format when trying  to duplicate colors in your own images.\r
        \r
        **Read
        the documentation:** Review the documentation for `penColor()` and pay particular
        attention to how to define colors in hexadecimal.\r
        \r
        # Do This:\r
        **Draw
        the bullseye: ** Draw the bullseye below using a combination of `penColor()`
        and `dot()`.\r
        \r
        ***Hint:*** *The sample image was created using three
        of the following hexadecimal colors: #00ABDC, #CC4400, #1188CC, #006699, #11CC00.
        Can you recall how hexadecimal color works to select the correct colors on
        your first try?*\r
        \r
        <img src="https://images.code.org/d53ae656d6eeae3611449b65db669242-image-1441981098736.png"
        style="height: 250px">\r
        \r
        **Remember:** The hex colors must have quotes
        around them so penColor(“#FF0099”)  not penColor(#FF0099).
      U3L06 Challenge 5 overlapping circles_markdown_instruction: |
        # Transparency
        - Red, Green, Blue, Alpha\r
        \r
        There is another command that lets you set
        the pen color called `penRGB(r,g,b,a)`.\r
        \r
        * The first 3 parameters are
        for values (in the range 0-255) for the red, green, and blue channels. \r
        *
        The 4th parameter `a` stands for "alpha".  The "alpha channel" for color
        lets you set the level of **opacity** as a decimal value between 0 and 1 -
        it is interpreted as a percentage, so 0.5 equates to 50% opaque.  For example:
        `penRGB(113, 102, 160, 0.5)`.\r
        \r
        # Do This:\r
        \r
        **Read the Documentation:**
        To figure out how to use `penRGB()` go read the documentation, paying special
        attention to the syntax used to give a command **multiple values**.\r
        \r
        <img
        src="https://images.code.org/3247af8d88da11a042d0bd9a76b49f12-image-1441982501960.png"
        style="height: 250px; float: left; margin: 10px">\r
        \r
        **Draw the circles:
        ** \r
        \r
        Use `penRGB()` and `dot()` to draw two overlapping circles as shown
        in the image.\r
      U3L06 Challenge 6 squiggles_markdown_instruction: |-
        # Multiple Parameters -
        Making Arcs\r
        \r
        Many commands need more than one parameter to make sense.
        When a command needs more than one parameter, the parameters are separated
        by commas and the **order of the parameters matters**.\r
        \r
        Two new commands
        have been added to the block palette, `arcLeft()` and `arcRight()` which both
        accept two parameters.\r
        \r
        **Read the documentation: ** Read the documentation
        for `arcLeft()` and `arcRight()` .\r
        \r
        <img src="https://images.code.org/320a5e54abb95b267738d5e15946b51c-image-1441985535028.png"
        style="height: 250px; float: left; margin: 10px">\r
        \r
        # Do This:\r
        \r
        **Draw
        a squiggly line: ** \r
        \r
        Using `arcLeft` and `arcRight` along with the
        ones you have already learned draw a **purple squiggle on a blue background**.
        Feel free to use any of the methods for choosing colors you have already learned.\r
        \r
        \r
        \r
        Hints:\r
        *
        To make the figure exactly, you need to turn before calling arcLeft or arcRight
        to orient the turtle first.\r
        * The parameters to arcLeft and arcRight are
        the same and they are multiples of 10\r
        * The colors are "PowderBlue" and
        "Purple" - though you can use other colors if you like.
      U3L06 Challenge 7 smiley face_markdown_instruction: |-
        # Moving Relative to the
        Screen\r
        \r
        The turtle commands we've seen so far move the turtle **relative
        to the turtle's location and direction**. If you want to get the turtle to
        a specific position on the screen using only `moveForward()` or `turnLeft()`,
        you need to know the turtle's location beforehand.\r
        \r
        Two new commands
        in the toolbox help resolve this issue. `moveTo()` moves the turtle to a location
        on the screen based on its X and Y coordinates. `turnTo()` turns the turtle
        in a specific direction. Together these commands can make many drawings easier
        to complete.\r
        \r
        # Do This:\r
        \r
        **Read the documentation: ** Read the
        documentation for `moveTo()` and `turnTo()`. Pay specific attention to how
        the coordinate system is arranged in App Lab as it is different from what
        you might have seen in a math class.\r
        \r
        **Draw the smiley: ** Use these
        new commands to help you draw the smiley face pictured below.\r
        \r
        **HINT:
        ** You can't really do this one without using `penUp()` and `penDown()`.\r
        \r
        ![](https://images.code.org/20cab2a0b3a4fdfd53d7a1876963fa10-image-1441990625064.png)
      U3L06 Challenge 8 make your own_markdown_instruction: |-
        # The Full Turtle API\r
        \r
        We've
        added a few more commands to the toolbox. At this point you have access to
        every turtle command provided by App Lab. As we've already seen with our
        exploration of functions you can combine these commands to create more complex
        functionality, but at the lowest level all of your code will be making use
        of the set of commands provided by App Lab.\r
        \r
        <img src="https://images.code.org/7648c5293d04a57e4f715b5c08899ff9-image-1441996324573.png"
        style="height: 250px; float: left; margin: 10px">\r
        \r
        Code you write
        will always be based upon the commands that are provided by the programming
        language you are using. When several commands are provided in a logical chunk,
        like the set of turtle commands, we refer to them collectively as a **library**
        of functions. The total set of commands that a language provides access to
        is called the **application program interface**, or simply an **API**. \r
        \r
        As
        you gain more experience you will gain familiarity with the API for the language
        you are using, but you will still want to return to the **API documentation**
        from time to time to remind yourself what functionality a language offers.\r
        \r
        Congratulations,
        you've really come a long way as a turtle artist! \r
        \r
        # Do This:\r
        \r
        **Draw
        whatever you like!**  The only requirements are:\r
        \r
        * use at least 3 different
        colors\r
        * use moveTo\r
        \r
        Explore the documentation for any new commands
        you see and use your skills as both an artist and user of **API documentation**
        to **draw something of your own choosing.**\r
        \r
        If in doubt: try to re-create
        "I [heart] CS" drawing shown here.
      U3L06 Free Response Getting Started_markdown_instruction: "Brainstorm a new\ncommand
        you would like to include in a turtle drawing program. \n\n* Would\nyou choose
        to improve a commands you have already used or something entirely\nnew? \n*
        How would it work? \n* Would the command need any additional information\nto
        successfully execute the instructions?\n"
      U3L06 Free Response Reflection_markdown_instruction: |
        Respond to your teacher's
        prompt in the space below.
      U3L06 Free Response Wrap Up_markdown_instruction: "List 3 interesting functions\nyou
        discovered in the AppLab API. \n\nSelect one of them and describe how\nyou
        think you might want to use it in a future programming project.\n"
      U3L07 - Free Play Loops and Random_markdown_instruction: |-
        # Free Play!\r
        (Optional)\r
        \r
        Mess
        around with your "Under the Sea" scene to make it do different things.  \r
        \r
        **Ideas:**\r
        *
        Make different amounts of each component.\r
        * Play with the ranges of random
        values.\r
        * Add other creatures.\r
        * Play with color values to give the
        scene a different feel (nighttime? red dawn?).\r
        * Get creative!\r
        \r
        #
        Don't Worry... You Can't Screw It Up\r
        * Play around as much as you want
        - you can **always go back to a previous version**.\r
        * Each time you hit
        "Run" your code is saved in a way that lets you get back to it.\r
        * Notice
        that there is button at the top of the page called **Version History** that
        lets you see and use any previous version of your code.\r
        \r
        ![](https://images.code.org/881d72d190c0637705f8021369962701-image-1443117323816.gif)
      U3L07 - Starry Night Starter Code_markdown_instruction: |-
        You are going to use
        loops and random numbers to generate an image of starry night sky similar
        to one shown here.  We have given you some starter code to generate the ground
        and sky (just two giant dots), you will add code to this project to make the
        stars, grass, and moon.  All of the effects are clever applications of turtle
        dots, lines, and colors.  To get started, follow the series of steps suggested
        in the accompanying worksheet. \r
        \r
        <img src="https://images.code.org/0f42e475e7600ac33d31bdf5dee70726-image-1459547325746.gif"
        style="width: 250px">
      U3L07 - allSeaGrass_markdown_instruction: |
        # Add Seagrass\r
        <img src="https://images.code.org/a67f893ea9187b253ec4f6abcb16b7cf-image-1443048301130.30.42
        PM.png" style="width: 200px; float: right">\r
        Our new version of `drawSeagrass`
        now draws a single piece of seagrass with a random height.  Now let's use
        a loop in `drawAllSeagrass` to fill the sea floor with it.\r
        \r
        # Do This:\r
        \r
        *
        **Add a `for` loop** to `drawAllSeagrass` that draws about **50 pieces** of
        seagrass using your updated `drawSeagrass` function.\r
        \r
      U3L07 - bubbles_markdown_instruction: |-
        # Add Bubbles\r
        <img src="https://images.code.org/ffeec83d7bb838f87f46ec1638710440-image-1443019519379.44.49
        AM.png" style="width: 200px; float: right">\r
        The first high-level function
        you will write is `drawAllBubbles`. You may have noticed that the bubbles
        in the image look very similar to the dots example we've already drawn in
        this lesson. Now we'll use that skill to add to our image.\r
        \r
        # Do This:\r
        \r
        *
        **Read** the `drawBubble` function to know how it works and what **parameters**
        it accepts.\r
        \r
        * **Modify the code** of `drawAllBubbles`:\r
         * **Add
        a loop** inside the function.\r
         * **Move the commands that were already
        inside the function *inside the loop* instead** -- In other words "wrap a
        loop around the existing lines of code that are inside the function. This
        way your code will move the turtle randomly and call `drawBubble` many times.\r

        * **Set the number of iterations** in your loop so that the screen is filled
        with bubbles. Try starting with 200 and then adjust to whatever number you
        like.
      U3L07 - callingFunctionsInLoops_markdown_instruction: |-
        # Calling functions
        in loops\r
        \r
        For more complex drawings with repeated sections **combining
        loops and functions** can make your code efficient to write and easy to read.\r
        \r
        You're
        about to see a program in which a function called `forwardAndLoop()` has been
        defined. \r
        \r
        **Call ** the function without a loop to see how it runs.\r
        \r
        **Use**
        a loop to **call the function multiple times** and complete the figure below.\r
        \r
        ![](https://images.code.org/ac935a93a639d6608d91afbcee0aebb1-image-1442850398315.46.27
        AM.png)
      U3L07 - createTriangleParam_markdown_instruction: |-
        # Defining Functions with
        Parameters\r
        \r
        This time you're going to write your own function with
        parameters to complete an image. Two function calls to `drawTriangle` have
        been placed at the top of the program but the function itself needs to be
        defined.  The program should draw this:\r
        \r
        ![](https://images.code.org/4a96eff03ba79b881b98137048140953-image-1442523578705.59.20
        PM.png)\r
        \r
        # Do This:\r
        **Complete** the function definition for `drawTriangle(sideLength)`
        . Notice that you have already been given a **descriptive and meaningful parameter
        name**, `sideLength`, but you can change it if you wish.\r
        \r
        **Hint:**
        you should put the pen down and pick it up as part of the definition of `drawTriangle`
        - that way you guarantee that a call to drawTriangle will always actually
        draw. Picking the pen up as the last act of the function is a nice thing to
        do for any other code that might not be expecting drawTriangle to have a side
        effect of putting the pen down.\r
        \r
        As a reminder of how to use a parameter
        within the function here is a correct version of `drawSquare(size)` for reference.\r
        \r
        ![](https://images.code.org/ead2720df19b117cae753c4397dd832d-image-1442868072299.png)
      U3L07 - fish_markdown_instruction: |-
        # Add Fish\r
        \r
        The next high-level function
        you will write is `drawAllFish`. A version of `drawFish` with parameters has
        been provided for you to use.\r
        \r
        # Do This:\r
        \r
        * **Read** the `drawFish`
        function to know how it works and what **parameters** it accepts.\r
        \r
        *
        **Add a loop** to `drawAllFish`.\r
        \r
        * **Place the commands already inside
        the function in your loop.** This way your code will **move the turtle randomly**
        around the **top 360 pixels** of the image and draw **15 fish** of random
        size between **5 and 20** using `drawFish`.\r
        \r
        * Once you have your loop
        working try calling `drawFish` with random values for its `red`, `green`,
        and `blue` parameters to get differently colored fish.\r
        \r
        ![](https://images.code.org/cbbb8e02c14cbc2d199ede4531090513-image-1443046439253.12.35
        PM.png)
      U3L07 - introSquare_markdown_instruction: |
        # Getting Started with Loops\r
        \r
        A
        **loop** is a block of code that is repeated or "looped through" in a program.
        You will be creating a loop using the `for` loop block.\r
        \r
        We'll start
        by experimenting with a program similar to what you saw in the video.\r
        \r
        #
        Do This:\r
        * **Drag** out a `for` loop block.\r
        * **Inside the loop:**\r
        \t*
        **Add** a call to `moveForward`.\r
            * **Add** a call `turnLeft`. (HINT:
        try turning by 137 degrees to start. You can change after that.)\r
            \r
        ![](https://images.code.org/4da4a0c8a10a3c9637df96507fece183-image-1443038466204.gif)\r
        \r
        *
        **Run** the program to see the loop in action.\r
        * **Experiment:**\r
         *
        **Change** the number of times the loop runs.\r
         * **Increase** the run speed
        to see how fast loops can execute.\r
         * **How many times** can the loop run
        before you can no longer tell the difference in the image?\r
         \r
        **Move
        on** once you feel like you have a decent grasp of using a `for` loop: setting
        the number of times to repeat, running the program, and setting the run speed.\r
        \r
      U3L07 - loopsWithRandom_markdown_instruction: |
        # Using Multiple Loops\r
        \r
        Some
        repeated tasks can't easily be solved with a single loop. Instead, you'll
        need to use **one loop after another**, each one solving a part of the problem.
        \r
        \r
        # Do This:\r
        \r
        Add a loop to fill the screen with semi-transparent
        white dots until the original dots are "erased".\r
        \r
        <img src="https://images.code.org/329912b3c61cc62acbd36035ff4b823a-image-1443109101866.gif"
        style="float: right; width: 100px">\r
        * **Drag ** a second loop into your
        code that will run after the first loop.\r
        * **Add** commands to draw dots
        in random locations that are white with opacity set to 0.5.\r
        * **Increase
        the iterations** so that the colored dots are totally erased. How many does
        it take?\r
        \r
        HINT: you can copy/paste the original loop and just change
        the color of the dots and number of iterations.\r
        \r
      U3L07 - randomDots1_markdown_instruction: |-
        # Now try it: Looping with Random
        Values\r
        \r
        <img src="https://images.code.org/520e45a90988b04bb0ff3baa184f080a-image-1443108426597.png"
        style="width: 100px; float: right;">\r
        \r
        If you add some randomness to
        turtle behavior inside a loop, the program will run a little differently every
        time which can make for some cool effects.\r
        \r
        You're about to see a program
        in which the turtle **moves to a random location** each iteration of the loop,
        and **draws a randomly-sized dot** that also has a **random color**.  We've
        also made the dot semi-transparent by setting the alpha value to 0.5 (50%
        transparency).\r
        \r
        # Do This:\r
        \r
        **Figure out how many iterations**
        (number of times the loop runs) you need to consistently fill the screen entirely
        with dots so none of the background is showing.  It will be a little different
        every time so you'll need to experiment.\r
        \r
        **Compare what you found**
        with a neighbor to see how close your results are.  Then **move on**.
      U3L07 - randomSquare_markdown_instruction: |-
        # Practice Using Loops - Part 2\r
        \r
        Let's
        look at the second example from the video. \r
        \r
        Use a `for` loop to call
        a function that you wrote.  We've provided the code for the `drawSquare`
        function for you. \r
        \r
        **Drag out** a `for` loop.\r
        \r
        **Inside the loop**
        add a call to `drawSquare`, and a call to `turnRight`.\r
        \r
        ![](https://images.code.org/c4037292ac237ac60919fae2c24790db-image-1443104130552.gif)\r
        \r
        **Run
        the program** to see what's happening.\r
        \r
        # Do This:\r
        Change the number
        of loop iterations to draw a lot of squares.  Try to create the figure shown
        below (or something similar).  HINT: the image below has 72 squares in it.\r
        \r
        ![](https://images.code.org/e4d3f180b2f1e421a96d40ecacce029a-image-1443104869913.gif)\r
        \r
        Once
        you've played enough to get the hang of calling a function from inside a
        loop then **move on**.
      U3L07 - seaGrass_markdown_instruction: |-
        # Controlling Loops with Parameters\r
        <img
        src="https://images.code.org/37d6dbcab707f67485ab3b0cc2a1cae9-image-1443114033511.png"
        style="width: 200px; float: right">\r
        This time you will modify one of
        the lower-level functions - `drawSeagrass`. Notice that the current version
        of `drawSeagrass` actually uses a loop. We want to modify this function so
        that we control the number of times it loops with **a parameter**.\r
        \r
        #
        Do This:\r
        \r
        * **Look at** the `drawSeagrass` function to see how it currently
        works.\r
        \r
        * **Add a parameter ** that will be used to indicate how many
        waves the seagrass makes.\r
        \r
        <img src="https://images.code.org/1f2f0c5e1fc17e541760c4f0fd24b13b-image-1447887194713.7.10
        drawSeagrass add param.gif" style="width:350px;padding-left:22px;">\r
        \r
        *
        **Modify the `'for` loop** so that it uses that **parameter** as the number
        of times to repeat.\r
        \r
         ![](https://images.code.org/23e8e43ec4853c0bdbbbd50b9651300a-image-1443113032135.gif)\r

        \r
        * Finally, **modify `drawAllSeagrass`** to call this new two-param version
        of `drawSeagrass` supplying a reasonable random value for the second parameter
        as well.\r
        \r
        <img src="https://images.code.org/4f15021cd9cebb62562665d3ddc82c51-image-1447885963677.PNG"
        style="width:400px;padding-left:22px;">
      U3L07 - seaStar_markdown_instruction: |-
        # Add Sea Stars\r
        \r
        We're now ready
        to add sea stars to our image by writing `drawAllSeaStars`. Recall that we've
        already written loops to draw much more complex stars. \r
        \r
        # Do This:\r
        \r
        *
        **Read** the `drawSeaStar` function to know how it works and what **parameters**
        it accepts.\r
        \r
        * **First: Update** `drawSeaStar` to use a `for` loop \r
        \r
        \t*
        `drawSeaStar` has a portion of code that uses a longer sequence of repetitious
        single commands.  \r
            * Find the pattern and "wrap a loop" around it
        so that the repetition is done with a loop rather than many lines of declarative
        function calls.\r
        \r
        * **Second: Add a loop** to `drawAllSeaStars`.\r
            \r
        \t*
        **Place the commands already inside the function in your loop.** This way
        your code will **move the turtle randomly** around the **bottom pixels (y
        values between 360 and 450)** of the image.\r
        \r
        * **Draw 5 sea stars**
        of random size between **10 and 30** using `drawSeaStar`.\r
        \r
        ![](https://images.code.org/1aadf83bcecaf5ca6c505e46d43e5f45-image-1443046811335.20.04
        PM.png)
      U3L07 - sunBeams_markdown_instruction: |
        # Add Sunbeams\r
        <img src="https://images.code.org/9e08dae8486f66422d492b8d8a6777eb-image-1443048962131.55.54
        PM.png" style="width: 200px; float: right">\r
        Finally, we'll add some
        visual flourish by writing `drawAllSunbeams`. Note: The `turnTo` command makes
        the turtle face a random direction prior to drawing each sun beam.\r
        \r
        #
        Do This:\r
        \r
        * **Read** the `drawSunbeam` function to know how it works
        and what **parameters** it accepts.\r
        \r
        * **Add a loop** to `drawAllSunbeams`
        to draw about 100 sunbeams. Inside your loop:\r
         \r
        * **Place the commands
        already inside the function in your loop.** This way your code will move the
        turtle to a random x location at the top of the image (y is 0), `turnTo` a
        random angle between **165 and 175 degrees**, and call `drawSunbeam`.\r
      U3L07 - topDownDesign_markdown_instruction: |-
        # Top-Down Design\r
        <img src="https://images.code.org/b4379f51db96b8b1c921de2579e16357-image-1443011791766.21.53
        AM.png" style="width: 150px; float: right">\r
        Look at this complex version
        of the "Under the Sea" scene you drew in the previous lesson. **You now
        have all the skills you need to recreate this digital scene.**\r
        \r
        We will
        use **Top-Down Design** to help manage the complexity of drawing this image.
        The starter code you will be provided already has broken the problem into
        multiple levels.\r
        \r
        # Overview of Program Structure\r
        You are about to
        see that we've provided you with a good amount of starting code.  Here's
        a brief tour:\r
        \r
        **High-Level Function Calls:** These read almost like
        a story of how you will draw the image. There's one function for every major
        component of the scene.\r
        \r
        <img src="https://images.code.org/c07a9b544ab982a91c7cd99339cbe3c9-image-1447885047812.PNG"
        style="width:200px;">\r
        \r
        **High-Level Function Definitions:** These
        currently draw **a single copy of each component**. You will add code to these
        functions to draw many copies of each component in a variety of sizes and
        colors.\r
        \r
        ![](https://images.code.org/1782d088206fede56df1e93482d35faa-image-1443019051470.37.20
        AM.png)\r
        \r
        **Low-Level Functions:** These draw single elements of the
        scene. Most have been written for you already, but we've left a few for you
        to complete as well.\r
        \r
        ![](https://images.code.org/bb081efc86641155eae5f4d363e3ccf4-image-1443019108814.38.22
        AM.png)\r
        \r
        \r
        # Do This:\r
        \r
        * Review the structure of the code in
        this level.\r
        * Run the code to familiarize yourself with what it currently
        draws.\r
        * When you are ready to do so, move on!
      U3L07 Free Response Getting Started_markdown_instruction: "Run the program:\n<a
        href=\"http://studio.code.org/p/applab#eUmMCRRJNxJk9EheYznD6w\" target=\"_blank\">\n\nStarry
        Night </a> several times. \n \n* What's \"weird\" or \"different\"\nabout
        this program from previous ones we've seen?\n* How do you think this\neffect
        is produced?\n\n\n"
      U3L07 Free Response Reflection_markdown_instruction: "When breaking a problem\ndown,
        you often encounter elements that you want to use repeatedly in your\ncode.
        Sometimes it's appropriate to write a new function; at other times\nit's appropriate
        to write a loop.  \n\nThere is no hard-and-fast rule as\nto which is better,
        but what do you think?  What kinds of circumstances would\nlead you to writing
        a function versus using a loop?\n\n\n"
      U3L08 - Enchantment Under the Sea_markdown_instruction: |-
        You have been provided
        with starter code for an “Under the Sea” scene which includes three functions,
        one each for the starfish, seagrass, and fish. Create versions of these functions
        which accept parameters to allow you to add more variation to your scene.  The
        student worksheet provides more details and guidance.\r
        \r
        <img src="https://levelbuilder-studio.code.org/script_assets/k_1_images/instruction_gifs/csp/U3L08%20-%20Under%20the%20sea.gif"
        style="width: 250px">
      U3L08 - createTwoParamTriangle_markdown_instruction: |
        # Defining Functions
        with Multiple Parameters\r
        \r
        Now it's your turn to define a function that
        accepts multiple parameters. Just like in the previous example make sure you
        **separate your parameters with commas** and give them **descriptive and meaningful**
        names.\r
        \r
        # Do This:\r
        * **Drag out ** the function block, and **name**
        your function `drawTriangle`. \r
        * **Define `drawTriangle` to have two parameters
        ** within the parentheses making sure to give them **descriptive and meaningful**
        names separated by commas. \r
        * The example below uses *size* and *width*
        for parameter names but you can use whatever you like.\r
        \r
        ![](https://images.code.org/b1f5eead2ccb60e5ae607feff590bd3c-image-1442850344677.gif)\r
        \r
        *  Then
        **write ** the code inside `function drawTriangle(size, width)` that will
        make it work as described.\r
        * Test it out!  **Run ** the code and experiment
        to create an image similar to the one below.\r
        \r
        ![](https://images.code.org/a389c07c259c8877989b6920328a4c78-image-1442529590755.39.38
        PM.png)\r
        \r
      U3L08 - digitalScene_markdown_instruction: |-
        # Design Your Digital Scene\r
        \r
        This
        is the final project that you will submit.\r
        \r
        # Do This:\r
        \r
        **Copy**
        all of the individual functions you and your group members have written at
        the bottom of this program.\r
        \r
        **Design your scene** using these functions,
        placing your calls at the top of the file.
      U3L08 - drawSquareWithParam - for video_markdown_instruction: |
        # Defining and
        using a function with a parameter\r
        From the video, you learned that defining
        multiple functions to draw different sized squares results in lots of repetitive
        functions - they are essentially the same, with a few numbers changed - and
        this is not desirable.\r
        Any time you find yourself effectively copy and
        pasting large sections of code, it's usually a sign that there is a better
        way.\r
        \r
        # Do This\r
        Uh oh! Something's wrong! We've set up a program
        that runs, but doesn't do what it's supposed to do. The program is supposed
        to make a drawing with two squares that looks like this:\r
        \r
        <img src="https://images.code.org/3eae30651dabc2f83a8bbbbbf8bea7ad-image-1442420537113.26.34
        AM.png" style="width: 150px;"> \r
        \r
        We've given you the `drawSquare(size)`function
        that was created in the video, but it's not quite right. Fix the code inside
        the function so that the program creates the drawing correctly.\r
        \r
        **HINT:**
        You should only need to change one thing about an existing line of code. You
        don't need to add or remove any lines of code. Remember: The parameter `size`
        acts like a placeholder for a value that gets plugged into each call to `moveForward()`.\r
        \r
      U3L08 - drawSquareWithParam_markdown_instruction: |
        # Defining and Using a Function
        with a Parameter\r
        From the video, you learned that defining multiple functions
        to draw different sized squares results in lots of repetitive functions -
        they are essentially the same, with a few numbers changed - and this is not
        desirable.\r
        Any time you find yourself effectively copy and pasting large
        sections of code, it's usually a sign that there is a better way.\r
        \r
        #
        Do This:\r
        Uh oh! Something's wrong! We've set up a program that runs,
        but doesn't do what it's supposed to do. The program is supposed to make
        a drawing with two squares that looks like this:\r
        \r
        <img src="https://images.code.org/3eae30651dabc2f83a8bbbbbf8bea7ad-image-1442420537113.26.34
        AM.png" style="width: 150px;"> \r
        \r
        We've given you the `drawSquare(size)`function
        that was created in the video, but it's not quite right. **Fix the code inside
        the `drawSquare` function so that the program creates the drawing correctly.**\r
        \r
        **HINT:**
        You should only need to change one thing about an existing line of code. You
        don't need to add or remove any lines of code. Remember: The parameter `size`
        acts like a placeholder for a value that gets plugged into each call to `moveForward()`.\r
        \r
      U3L08 - drawSquaresWithParams_markdown_instruction: |-
        # Duplicating functions\r
        \r
        This
        program is supposed to draw two squares, a big one and a small one. The function
        definition for `drawBigSquare()` is written but `drawSmallSquare()` is empty.\r
        \r
        **Write**
        `drawSmallSquare()` to draw a square with sides 25 pixels long.\r
        \r
        **Run
        the code** to match the image below\r
        \r
        **Hint:** Copy-Paste might be a
        useful approach here!\r
        \r
        ![](https://images.code.org/b1cf1767df98f6b7eacdc8a10c5674a7-image-1442417274907.26.34
        AM.png)
      U3L08 - fish_markdown_instruction: |-
        # Adding parameters to functions: *drawFish*\r
        \r
        Let's
        update our `drawFish` function to accept a parameter. Currently `drawFish`
        can only draw a fish of size 30.\r
        \r
        **Add a parameter** to the function
        definition for `drawFish` that allows you to control its size (Note: the pen
        width is important here.) Make sure your parameter has a **descriptive and
        meaningful** name.\r
        \r
        **Update your function calls** to use your new version
        of `drawFish` and change the size of the fish in your image.\r
        \r
        ![](https://images.code.org/35f9a55244004dad62781f4ae0ce7eb2-image-1442608034411.26.55
        PM.png)
      U3L08 - freePlay_markdown_instruction: |-
        # Keep Going!\r
        \r
        At this point
        you've seen how parameters can help **generalize the behavior of a function**
        to perform a variety of tasks, not just one. This will prove to be a very
        useful skill as we continue to develop as programmers.\r
        \r
        For now, **keep
        adding to your drawing**. Make more function calls and see if you can continue
        to use **random numbers** to add variety to your drawings.\r
        \r
        ![](https://images.code.org/514994b00554eac86c2a762177b77493-image-1442611547075.58.11
        PM.png)
      U3L08 - individualCode_markdown_instruction: |-
        # Design Your Component\r
        \r
        With
        your **group** you should have already identified and assigned the high-level
        functions that should be used to create your digital scene. \r
        \r
        # Do This:\r
        Use
        the space here to design your functions. Once you're done you can **share**
        this project with your groupmates.
      U3L08 - introUnderTheSea - clone for recovery_markdown_instruction: |-
        # Recover
        your Under the Sea project code!\r
        \r
        Below you should see your code for
        the Under the Sea project from CSP Unit 3 - Lesson 8 in the state it was in
        around 3pm ET, Monday Oct. 30, 2017.\r
        \r
        **Students:** To get the code
        below back into Unit 3 - Lesson 8...\r
        * Select all your code from the workspace
        below (Highlight with mouse, or ctrl+A)\r
        * Copy it (Edit -> Copy, or ctrl+C)\r
        *
        Paste it (Edit -> Paste, or ctrl+V) into the project in Unit 3\r
            * Here
        is a link to the project that will open in a new window: <a href="https://studio.code.org/s/csp3/stage/8/puzzle/17"
        target=_blank>https://studio.code.org/s/csp3/stage/8/puzzle/17</a>\r
        \r
        **Teachers:**
        You can view your students' work here using the blue teacher tray.  Alternatively,
        you can ask students to use the process above.\r
        \r
        **Details:**\r
        * The
        Under the Sea code is a "project" that sat behind eight levels ("bubbles")
        10-17 in Unit 3, Lesson 8.  \r
        * On Oct. 30, 2017 we updated that project
        in a way that caused code to appear missing for those who had done work prior
        to the change.\r
        * Your code still exists! It's just associated with the
        old project, which is what we have provided below.\r
        * You can copy and paste
        your code from below into any of the current Unit 3, Lesson 8, levels 10-17
        and it will work for all. (In other words, the code for level 17 is actually
        referring to the same project as levels 10-17)\r
        \r
        We're sorry about this
        mistake and for the inconvenience and disappointment it may have caused. Hopefully,
        you were able to recover the code you worked so hard on.\r
        \r
        If you have
        further questions please submit a bug report (option in the top-right menu)
        or send email to support@code.org\r
        \r
        Thanks,\r
        \r
        CSP Team
      U3L08 - introUnderTheSea with comments_markdown_instruction: |-
        # Under the Sea!\r
        \r
        In
        the next several challenges you will be working to improve **one program**
        that draws an underwater scene.  Each time you  finish a puzzle and move on
        to the next one, your code will be pulled forward and you'll get new instructions
        telling you what to add. **Read through ** the program provided to get a basic
        understanding of what it does.\r
        \r
        # Do This:\r
        \r
        * **Add function calls
        ** to the top of the program so that **two fish, two starfish, and two pieces
        of seagrass** appear somewhere in the scene. You don't need to provide values
        for the parameters at this stage.\r
        \r
        * **Hint:** you need to call `moveTo`
        before drawing a second fish, starfish or seagrass, otherwise you won't see
        the second one because it will draw exactly over the first one -- those functions
        draw based on where the turtle is just before the call.\r
        \r
        * **Test out
        your code**. If something doesn’t work like you expect, consider whether you
        can add anything to the functions’ definitions to make them better.\r
        \r
        *
        **Continue ** to the next level, **where your code will be waiting for you.**\r
        \r
        ![](https://images.code.org/a53accb7edf7ed4e09d56bab903e1af9-image-1442604192660.22.35
        PM.png)
      U3L08 - introUnderTheSea_markdown_instruction: |-
        # Under the Sea!\r
        \r
        In
        the next several challenges you will be working to improve **one program**
        that draws an underwater scene.  Each time you  finish a puzzle and move on
        to the next one, your code will be pulled forward and you'll get new instructions
        telling you what to add.\r
        \r
        # Do This:\r
        \r
        * **Read through ** the
        program provided to get a basic understanding of what it does.\r
        * **Add
        function calls ** in the early lines of the program (somewhere after the background
        is drawn) so that **two fish, two starfish, and two pieces of seagrass** appear
        somewhere in the scene. You don't need to provide values for the parameters
        at this stage.\r
        * **Hint:** you need to call `moveTo` before drawing a second
        fish, starfish or seagrass, otherwise you won't see the second one because
        it will draw exactly over the first one -- those functions draw based on where
        the turtle is just before the call.\r
        * Test out your code. If something
        doesn’t work like you expect, consider whether you can add anything to the
        functions’ definitions to make them better.\r
        * **Continue ** to the next
        level, **where your code will be waiting for you.**\r
        \r
        ![](https://images.code.org/a53accb7edf7ed4e09d56bab903e1af9-image-1442604192660.22.35
        PM.png)
      U3L08 - multiParamFish_markdown_instruction: |-
        # Multiple Parameters\r
        \r
        Let's
        make our drawings even more interesting by adding some variety to the color.\r
        \r
        **Add**
        three more parameters called `red` , `green` , and `blue` to your function
        definition for `drawFish` which allow you to set the color of the fish when
        you call the function. Remember to separate them with commas!\r
        \r
        **Note:**
        this means that drawFish will now have 4 parameters total: size, red, green,
        and blue.\r
        \r
        **HINT:** inside drawFish just replace the numbers of the
        penRGB values with the parameters of your function.\r
        \r
        **Change** the
        function calls at the top your code to draw different colored fish.\r
        \r
        ![](https://images.code.org/14b52d152c818903b0fc87061126f0f8-image-1442608501173.34.30
        PM.png)
      U3L08 - multipleLayersofParams_markdown_instruction: |
        # Multiple levels of
        functions\r
        \r
        In this example pay very close attention to how the functions
        have been declared. `drawPlusSign()` accepts a parameter called `size`.\r
        \r
        ![](https://images.code.org/aec14185c20a890db6023ebf8ee214b0-image-1442583027015.30.10
        AM.png)\r
        \r
        Inside of the function this value is used to make a call to
        `drawSingleSide()` \r
        \r
        ![](https://images.code.org/d74c79f74c2f1b0721d014580f69233f-image-1442583086099.31.17
        AM.png)\r
        \r
        `drawSingleSide()` is defined in the code below and also accepts
        a parameter called `lengthOfSide`\r
        \r
        ![](https://images.code.org/52320237a7c952bafef31635a8581f7d-image-1442583208640.33.21
        AM.png)\r
        \r
        Notice that these functions accept the same **value** when
        they're called but they give them **different names**. Each function can
        decide what it will call its parameters. Even if one function calls another,
        **each function is treated as a separate logical unit of code.** In fact,
        you **could name their parameters** the same, but they would still be separate
        blocks of code.\r
        \r
        In programming we call these blocks of code the **scope**
        of the function. It is a complex concept but one that will eventually make
        programming a much simpler process. The benefit of each function being able
        to name its own parameters is that you only need to look at that function
        to know which parameters it is using and what they are called.\r
        \r
        **Call
        `drawplusSign()`** twice in the spaces provided to draw the image below.\r
        \r
      U3L08 - paramsToStarfish_markdown_instruction: |-
        # Adding Parameters to Functions:
        *drawStarfish*\r
        \r
        We want to make our picture more interesting by adding
        some variety. Currently the `drawStarfish` function can only draw a starfish
        of size 60.\r
        \r
        **Add a parameter** to the function definition for drawStarfish
        that allows you to control its size - like `drawStarfish(size)`. Make sure
        your parameter has a **descriptive and meaningful** name.\r
        \r
        **Update
        your function calls** to use your new version of `drawStarfish` and change
        the size of your starfish.\r
        \r
        ![](https://images.code.org/320485cb05b50bcdb8aa8d13c0164502-image-1442606362191.59.12
        PM.png)
      U3L08 - randomInput_markdown_instruction: |-
        # Random Input\r
        \r
        You have a
        new block that allows you to generate a random number. You can use this instead
        of hard-coding in values every time you call a function.\r
        \r
        ![](https://images.code.org/5ff13bfdf582692f009b787570d467d0-image-1470145136252.png)\r
        \r
        **Read
        the documentation** for the randomNumber block.\r
        \r
        # Do This\r
        **Use
        randomNumber to provide random input** to *all three* of your drawing functions.  Just
        insert the call to randomNumber where you would otherwise put numbers.  \r
        \r
        Like
        this:\r
        ![](https://images.code.org/ad87d7d122ac585a6de9e46a49736228-image-1470146652402.png)\r
        \r
        Use
        randomNumber in calls to all three of your drawing functions:\r
        \r
        * drawStarfish\r
        *
        drawSeagrass\r
        * drawFish\r
        \r
        This is a great way to **test** out functions
        and also get some **interesting looking images**. Every time you run the program
        you can get slightly different looking scenes like the ones below.\r
        \r
        ![](https://images.code.org/d2031f555ed23bcfa4a6a6165074b559-image-1442852053630.png)
      U3L08 - seaGrass_markdown_instruction: |-
        # Adding Parameters to Functions: *drawSeagrass*\r
        \r
        To
        keep adding variety to our image let's keep adding parameters to our functions.
        Currently the `drawSeagrass` function can only draw a piece of seagrass with
        arcs of radius 100.\r
        \r
        **Add a parameter** to the function definition
        for `drawSeagrass` that allows you to control its size. (You'll only need
        to change the radius of each arc.) Make sure your parameter has a **descriptive
        and meaningful** name.\r
        \r
        **Update your function calls** to use your new
        version of `drawSeagrass` and change the size of the seagrass in your image.\r
        \r
        ![](https://images.code.org/0b7d1750101a4c81ef8d77d8668f94f2-image-1442606862829.07.30
        PM.png)
      U3L08 - squareTwoParams_markdown_instruction: |
        # Calling Functions with Multiple
        Parameters\r
        \r
        You're about to see a new definition for `drawSquare` that
        has two parameters: `drawSquare(size, borderWidth)` Notice how **multiple
        parameters are separated by commas**.\r
        \r
        ![](https://images.code.org/c9766f914d59531614c753e9147d29dd-image-1447801298794.01.15
        PM.png)\r
        \r
        # Do This:\r
        Add to the code to **make two calls** to the
        new two-parameter version of `drawSquare` to make an image similar to this
        one.\r
        \r
        ![](https://images.code.org/ddd85deb33ff82f3c257d25cdc9e6384-image-1442526350229.45.38
        PM.png)\r
        \r
      U3L08 - starFish_markdown_instruction: |-
        # Under the Sea\r
        \r
        In the next
        several levels you will be working to improve the **same program** that draws
        an under the sea image. Your code will be pulled forward as you receive new
        instructions.\r
        \r
        **Read through ** the program here to understand what
        it does.\r
        \r
        **Add function calls ** to the top of the program so that
        there are now **two fish, two starfish, and two pieces of seagrass** in the
        image. Place them wherever you like.\r
        \r
        **Continue ** to the next level,
        **where your code will be waiting for you.**\r
        \r
        ![](https://images.code.org/a53accb7edf7ed4e09d56bab903e1af9-image-1442604192660.22.35
        PM.png)
      U3L08 - triangleTwoParams_markdown_instruction: |-
        # Calling functions with multiple
        parameters\r
        \r
        We've already called many functions with multiple parameters
        but it can still be helpful to see an example of how it will look when you've
        defined those functions yourself.\r
        \r
        **Look at the function definition**
        for `drawSquare()` . Notice in particular how **multiple parameters are separated
        by commas** in the definition.\r
        \r
        ![](https://images.code.org/a9c29d49444af73851d34445c686e3ba-image-1442526639409.50.19
        PM.png)\r
        \r
        **Call** `drawSquare()` in the spaces above to complete the
        image. Don't worry about exact value, but the larger square should have thinner
        lines.\r
        \r
        ![](https://images.code.org/ddd85deb33ff82f3c257d25cdc9e6384-image-1442526350229.45.38
        PM.png)
      U3L08 Assessment2_markdown_instruction: "“Abstraction” is often used to focus\non
        a general case and ignore a specific instance of a problem. \n\nGiven this\nmeaning
        of the word, how are functions with parameters an example of abstraction?\n"
      U3L08 Free Response Getting Started_markdown_instruction: "In previous lessons,\nyou
        used parameterized functions. \n\n* In what situations are parameterized\nfunctions
        useful? \n* What problems do parameterized functions solve?\n"
      U3L08 Free Response Wrap Up_markdown_instruction: |
        How are parameterized functions
        involved in the children's game "Simon Says?"
      U3L08 how to add comments_markdown_instruction: |-
        # Now you try it - Add a comment\r
        \r
        The
        starting code provided has some comments already in it.\r
        \r
        # Do This\r
        \r
        Insert
        a comment that says `// Draw all the starfish` just above the first call to
        `drawStarfish()`. \r
        \r
        * The `// Comment` block is in the Functions toolbox
        ([Show me](#triggercallout=show_comment))\r
        * **See how:**\r
        ![expandable](https://images.code.org/1f97df1d6fc1ca2d5bd371ad7b0f76a3-image-1508960669302.gif)\r
        \r
        **Click
        finish** once you've added the comment.  And keep adding comments as you
        go!!!
      U3L09 Free Response Getting Started_markdown_instruction: "In computer science,\nwhen
        programmers break a big job into several smaller jobs, it's called decomposition.\n\nWhen\nprogrammers
        think about tasks in the general terms about what is going to\nbe accomplished
        (not specifically about how every step will be accomplished),\nit's called
        abstraction. \n\nWhat non-CS task have you worked on lately that\ninvolved
        decomposition? Explain.\n\nWhat non-CS task have you worked on lately\nthat
        involved abstraction? Explain.\n\n\n"
      U3L09 Free Response Wrap Up_markdown_instruction: |+
        Describe how your team "decomposed"
        the design of the digital scene project.

        Describe the "levels of abstraction"
        that were included in the component you were responsible for.


      U3L1 - Simulation - Template_markdown_instruction: |-
        # Simulating Coin Flips\r
        \r
        Over
        the next several exercises we are going to be building a program that simulates
        flipping 10,000 coins, or even more if you like. Along the way we're going
        to be keeping track of the patterns that develop and hopefully learning something
        about the patterns that develop.\r
        \r
        This is a great problem to simulate
        on a computer. If you wanted to flip 10 coins you'd probably just do it by
        hand. Flipping 10,000 coins would take significantly longer (about 3 hours
        if you flip one per second) and so **we'd much rather use a program to do
        the work for us.** Not only is it a lot faster to write the program, but once
        you're done you can run your program over and over, repeating the experiment.
        As we'll see, **simulations like this make it much easier to quickly notice
        patterns, test hypotheses, and develop new ideas to investigate**.\r
        \r
        **Starting
        Small:** Our simulations are going to start small. We'll actually only be
        flipping 10 coins to begin with, and then developing programs that keep track
        of patterns in this smaller set of data. That way we'll be able to visually
        confirm that our programs are working as intended. **Once we've verified
        that our programs work at a smaller scale we'll gradually increaese the number
        of flips our program is working on until we're at the full 10,000.**\r
        \r
        #
        Do This\r
        \r
        * When we want to flip a coin with a computer we will instead
        **generate a random number between 0 and 1**\r
        * Write a program that **uses
        a while loop** that **flips 10 coins** and writes their values to the screen\r
        \r
        ![](https://images.code.org/970622047b06af13ea7bdd50ee86bcbf-image-1446739178483.gif)
      U3L10 Free Response Getting Started_markdown_instruction: "* What is your personal\ngoal
        for this project? \n\n* How will your personal goal impact the larger\ncollaborative
        project?\n\n\n"
      U3L10 Free Response Wrap Up_markdown_instruction: "What issues have arisen\nduring
        this collaborative project? \n\nHow were they resolved?\n"
      U3L11 Free Response Getting Started_markdown_instruction: |
        What can you learn
        by reflecting on your independent work in this project and on your contributions
        to an effective team effort?
      U3L11 Free Response Reflection_markdown_instruction: |+
        What was the most important
        skill you developed in this project?

        How will you be able to apply that
        skill to future projects both in and out of computer science?


      U3L12 - Reflection - Mission Unsortable_markdown_instruction: "Activity Reflection\n\n**Prompt:**\n\nThinking
        back on the \"Mission Unsortable\" activity, describe a time when\none person's
        mission conflicted with another person's mission. \n\nWhat\nhappened? Describe
        how you might modify the missions so that the problem occur.\n"
      U3L12 Free Response Getting Started_markdown_instruction: "Respond to the following\nprompt\n\nIn
        the programs you have written so far, lines of code and functions\nexecute
        in a predictable order - the order in which you program them to execute.\n\n\nWhat
        if someone came along and said, \"This is hard to read. I'm going\nto re-arrange
        the lines of code so that they are ordered by length from shortest\nto longest.\"
        \n\nIs that a good idea or a bad idea? Explain your reasoning.\n\n\n"
      U3L12 Free Response Reflection_markdown_instruction: |+
        How did your personal
        mission contribute and/or detract from the overall goal of sorting the cards?


        How could your group have sorted the cards more efficiently, assuming
        that everyone still needed to execute the actions as prescribed in their missions?


        If your group was not the first to finish, what slowed your progress?


      U3L13 - Debug Id Problem_markdown_instruction: |
        # Choosing Good IDs\r
        \r
        <img
        src="https://images.code.org/f968ce4b09d2500b224af1bf9bacbacd-image-1444155536105.png"
        style="float: right">**Good IDs** are **meaningful and descriptive**.\r
        Just
        like good names for functions, you will want an ID to describe the intended
        purpose of the element.  For example, if you have many buttons in your program,
        you will want to give each an ID that describes what the button does. For
        example "forwardButton", "leftButton", etc.\r
        \r
        **IDs are also case-sensitive**
        which means you'll want to develop a style for capitalizing IDs. A common
        strategy is to use a style called **camelcase**.  In camelcase style, words
        are combined together with no spaces and each new word, after the first, is
        capitalized. itTypicallyLooksLikeThis.  \r
        \r
        **Why?** Many computer systems
        do not allow keywords like function names and IDs to contain spaces.  You've
        already seen several examples like this: `moveForward`, `onEvent`, `turnLeft`,
        etc.  It's important to realize that camelcase is a style convention, not
        a hard and fast rule. Sometimes you'll see other styles such as using underscores:
        `move_forward`, `turn_left`.  But in App Lab we typically use camelcase.\r
        \r
        #
        Rules About IDs\r
        In making descriptive and meaningful IDs there **are some
        rules about IDs** you need to know.  IDs...\r
        * cannot contain spaces.\r
        *
        *must* begin with a letter (A-Z or a-z) and may be followed by any number
        of digits and letters.\r
        * can contain hyphens ("-"), underscores ("_"),
        colons (":"), or periods (".").\r
        \r
        # Do This:\r
        The code you will
        begin with has an error. If you run it, you'll see that the ID of the button
        and the event handler don't match.\r
        \r
        * **Improve ** the button ID by
        choosing a **descriptive and meaningful** ID.\r
        * **Change ** the event handler
        so that it correctly references the button by its new ID.\r
        * **Run ** the
        program to make sure it works.\r
      U3L13 - Debug Id plus logic problem_markdown_instruction: "# Debugging 1"
      U3L13 - Debugging 1_markdown_instruction: |
        # Debugging Event-Driven Programs:
        IDs\r
        \r
        **Debugging:** As you write more complex event-driven programs,
        you'll need to polish your **debugging** skills. Debugging involves locating
        and correcting errors within a program. It is a critical (and generally unavoidable)
        step when writing code.<img src="https://images.code.org/b5d00d8027dae463eebb7f1c079cb2e2-image-1444156708725.gif"
        style="float: right; width: 200px">\r
        \r
        **Target Application:** In the
        next three exercises, you'll debug this application (shown at right) which
        has two buttons, one for moving forward and one for turning left.\r
        \r
        **Debug
        the problem**:\r
        In each problem, we've added various errors into the program
        and it does not work as intended. You will need to find the errors, debug
        the problems, and make corrections such that the program works correctly.\r
        \r
        **Checking
        IDs:** Your first debugging task will be to verify that the button IDs match
        the event-handlers. **Remember that IDs are case-sensitive**.\r
        \r
        # Do
        This:\r
        **Run the program** and inspect the warnings to find the error.\r
        \r
        **Debug
        ** the program and correct the errors so that it works as intended.\r
        \r
        **Run
        the program** and verify that both buttons have the intended functionality.\r
      U3L13 - Debugging 2_markdown_instruction: |-
        # Debugging Event-Driven Programs:
        Ordering Event Handlers\r
        \r
        **Ordering Event Handlers: ** Event handlers
        must come **after the object they reference in the code**. If your event handler
        comes before your object (in this case a button) your computer would be looking
        for an event on an object that does not yet exist. You will get an error message
        and your code will not work as you intend.<img src="https://images.code.org/b5d00d8027dae463eebb7f1c079cb2e2-image-1444156708725.gif"
        style="float: right; width: 150px">\r
        \r
        **Target Application:** Just
        like the last exercise, you'll again try to make an app that has two buttons,
        one for moving forward and one for turning left.  \r
        \r
        Once again, we've
        introduced a new error.\r
        \r
        # Do This:\r
        **Run the Existing program**
        to see the error that gets generated.\r
        \r
        **Debug ** this program so that
        it works as intended.\r
        \r
        **Run the program ** and try both buttons to
        make sure they have the intended functionality.
      U3L13 - Debugging 3_markdown_instruction: |-
        # Debugging Event-Driven Programs:
        Logical Errors\r
        You're getting good at debugging now!\r
        \r
        **Logical
        Errors: ** Sometimes you can write a program that generates no errors but
        does not work as you intend. This is the result of **logical errors** in your
        code. These can be tricky to catch without knowing what your program is supposed
        to do in the first place, and usually are only found with careful testing
        of your app's functionality.\r
        <img src="https://images.code.org/b5d00d8027dae463eebb7f1c079cb2e2-image-1444156708725.gif"
        style="float: right; width: 150px">\r
        \r
        **Target Application:** Just
        as in the last exercise, you'll try to make an app that has two buttons,
        one for moving forward and one for turning left.\r
        \r
        Once again we've
        introduced an error or two (a logical error this time) for you to debug.\r
        \r
        #
        Do This:\r
        **Run the program ** and experiment to see what's wrong.\r
        \r
        **Debug
        ** this program so that it works as intended.\r
        \r
        **Run the program **
        and try both buttons to make sure they have the intended functionality.
      U3L13 - Project_markdown_instruction: |-
        # Multi Screen App\r
        You will be creating
        your own multi-screen app to practice designing user interfaces and writing
        event-driven programs. \r
        \r
        **Look at the Project Guide and Planning Sheets
        before programming**.\r
        \r
        # Requirements Reminder\r
        * Your app will have
        at least **4 screens**.\r
        * Your app should include **text, images, buttons,
        and sound**.\r
        * There should be **no “getting stuck” on any screen.**  It
        should always be possible to navigate from a screen in your app to some other
        screen. \r
        * Your program code should follow **good style**.\r
        * Your user
        interface should be **intuitive to use**.
      U3L13 - Turtle Driver Project_markdown_instruction: "# Create a Turtle Driver\nApp!\\r\n\\r\nAt
        this point you know enough about buttons and event handlers,\nand how to debug
        some common issues that arise to be able to **build your\nown \"turtle-driver\"
        app** from scratch. \\r\n\\r\n**Build up the program bit\nby bit**. Don't
        try to write all the code at once.  Add a button with an\nevent handler, make
        sure it works, debug any problems, and then move on to\nthe next part.\\r\n\\r\n#
        Do This:\\r\n\\r\n**Create ** an application with **four\nbuttons**, one for
        moving the turtle forward and one each for turning left\nand right.  The fourth
        button should do whatever you like.\\r\n\\r\n**Use descriptive\nand meaningful
        IDs** for your buttons and ensure your event handlers work\nas you intend.\\r\n\\r\n**If
        you have extra time** add more buttons that use\nother turtle commands you'd
        like to include.  You can also use colors, and\ndifferent line widths, dots,
        etc. "
      U3L13 - Turtle move with button_markdown_instruction: |-
        # Your First Interactive
        App!\r
        <img src='https://images.code.org/3fad83213ae72073251c4d5abc1f048a-image-1444060521578.png'
        style='float: right; width: 250px'> A new group of commands has been added
        to the toolbox called **UI Controls** (User Interface Controls) which are
        commands that let you interact with, and respond to, the user of your app.
        To keep it simple, we'll start with just two commands: \r
        * `onEvent` which
        lets you run a function in response to some event occuring (such as a button
        click).\r
        * `button` which puts a button on the screen.\r
        \r
        # Do This:\r
        You
        will replicate the small app shown below, which makes the turtle move with
        a button click. You will do three things:\r
        * Add a `button`.\r
        * Add an
        `onEvent` block.\r
        * Add `moveForward` inside the onEvent function block.\r
        \r
        Here's
        what you should do - you can come back to watch this as many times as you
        need to get it right.\r
        <img src="https://images.code.org/1cdc8cfbcef2a43f84b11ebdf14aed0c-image-1444061731350.gif"
        style="border: solid 1px black; width: 500px; margin: auto">\r
        \r
        Once
        you've created the program and gotten it to run, click **Finish** to move
        onto the next level.
      U3L13 Free Response Getting Started_markdown_instruction: "Give three examples\nof
        familiar applications that respond to you, the user. \n\nFor each, describe\nthe
        actions (means of input) you use to \"talk to the program.\" \n\nIf directed\nby
        your teacher, work with a partner to sketch a mock-up of an app with multiple\nmeans
        of input.\n\n\n"
      U3L13 Free Response Reflection_markdown_instruction: |+
        Elements in your app
        are required to have **unique IDs**. Given what you now know about how event
        handlers work, why is it important for the IDs of page elements to be unique?

      U3L13 eventsDetails_markdown_instruction: |
        # How Do Events Work?\r
        Event-driven
        apps are made up of elements that can trigger events (such as buttons) and
        pieces of code called **event handlers**. Event handlers are commands that
        "watch" for certain events to occur in your program, and then run some function
        when an event occurs.\r
        \r
        <img src="https://images.code.org/96abf7d54a0be221a8b8eda80c696bf4-image-1444142010683.png"
        style="float: right; width: 250px">The `onEvent(id, type, callback)` command
        creates an **event handler** in your app. The three parameters are:\r
        * **id**
        - the ID of the element in the app you want to "watch", one that might trigger
        an event\r
        * **type** - the type of event to "watch" for (e.g. a click,
        a key press, a mousemove, etc.)\r
        * **callback** - a **callback function**
        is only different from a normal function in that you don't call it directly
        from your code. Instead it gets *called by the system at the time the specified
        event occurs*. You put the code into this function just like you would any
        other, and it will run when the event occurs.\r
        \r
        Once created, the event
        handler will always "watch" that element as long as it exists. \r
        \r
        #
        Do This:\r
        The program you are going to see has a button with a new ID but
        no event handler that is attached to it.\r
        * **Add an `onEvent` handler**
        that watches for a click on the button and *moves the turtle forward* when
        it happens. \r
        * **Run the program** to make sure it works.\r
        * **Try changing
        the event type** to something like "mouseover" and see what happens.  Not
        all event types will work with buttons but it's fun to play a little bit.\r
        \r
        Once
        you've got the program responding to some event, move on to the next problem.\r
        \r
      U3L14 - Assigning Random Value_markdown_instruction: |
        # Other Ways to Assign
        Values to Variables\r
        Programs become much more interesting when the values
        in variables change while the program is running. We can also assign to a
        variable the value returned by a function. For example:\r
        \r
        ![](https://images.code.org/31447c1b90c925bba3ca86ead8d84a7d-image-1445892065474.png)\r
        \r
        Because
        the `randomNumber` function *evaluates to a number* it means we can treat
        it *as though it were a number*. We've used it before by just "plugging
        it in" to some function that needed a number as a parameter like:\r
        ![](https://images.code.org/5df0376d562bd75a1899e17c49b00144-image-1445941026356.png)\r
        \r
        Because
        the `randomNumber` function generates a new and different number each time
        you call it, one thing we *could not* do before we had variables was generate
        a random number, and use that *same number* for two different things in a
        program. Now we can.\r
        \r
        # Do This:\r
        <img src="https://images.code.org/df3d2a8f4c1a3061981667c9f85b0071-image-1445549489133.png"
        style="float: right; width: 350px">Write a program that simulates the rolling
        of two dice and reports their individual values as well as the sum. \r
        The
        program should:\r
        * Generate two random numbers between 1 and 6 and store
        each result in its own variable.\r
        * Display the individual values of the
        two dice.\r
        * Display the sum of the two dice (see right).\r
        * Every time
        you run the program the result will be a little different.\r
        \r
        We have
        given you starting code that shows what to do for the first die. The *rest
        of the code is up to you!*  When you're done the output in the app display
        should look like what's above.\r
        \r
      U3L14 - Assigning User Input_markdown_instruction: |
        # Assigning user input
        to variables\r
        Programs become *even more interesting* when we can interact
        with the user. A short way to ask a user for a number is with the `promptNum`
        command.\r
        \r
        `var userInput = promptNum("Enter a number?")`\r
        \r
        `promptNum`
        is similar to `randomNumber` in that it is a function that *evaluates to a
        number*. The difference here is that promptNum pops up an input dialog box
        and waits for the user to type a number.  Once they do and hit 'Ok' the
        number they typed is returned and we can store it in a variable to use in
        our our programs.\r
        \r
        \r
        # Do This:\r
        Write a program that acts as a
        simple calculator.\r
        * Ask the user to enter one number\r
        * Then ask for
        a second number\r
        * Display the result of some calculation.\r
        * An example
        output is shown at right.\r
        \r
        We have given you starting code that shows
        you how to get the first number.  The rest of the code is up to you.\r
        \r
      U3L14 - Journal Favorite Event_markdown_instruction: "Pick one of the two prompts\nbelow
        to answer.  Start by copy/pasting the prompt you're responding to.\n\n**Pick\none:**\n\n*
        Think back a few lessons to the \"Mission: Unsortable\" card sorting\nactivity.
        Relate something that happened in that activity to something you\nfound with
        event-driven programming in this lesson. Were there any \"unfortunate\nevents\"
        in the card sorting activity that were similar to \"unfortunate events\"\nwhile
        programming in this lesson?  \n\n* What was your favorite event type?\nExplain
        what the event type is and how you might use it in an app that you\nwant to
        write.  \n\nWrite your response below in 100 words or less.\n"
      U3L14 - Mini Calculator embed_markdown_instruction: |-
        # Getting User Input -
        A Simple Calculator\r
        Programs become *even more interesting* when we can
        interact with the user. A short way to ask a user for a number is with the
        `promptNum` command, which pops up a dialog box asking the user to enter a
        number.\r
        \r
        This very simple app demonstrates a new behavior: getting input
        from the user.\r
        **You will write code to re-create this program** on the
        next page.\r
        \r
        # Do This:\r
        * Click "Run" on the app.\r
        * You will
        be prompted for two numbers, one right after the other.  \r
        \t* If you don't
        enter a number it will simply re-prompt you until you do.\r
        * See what happens.  \r
        *
        Re-run the program and enter different numbers until you get the idea.\r
        \r
        Click
        **Finish** to move on.
      U3L14 - User Input Division calculator_markdown_instruction: |
        # Assigning User
        Input to Variables\r
        <img src="https://images.code.org/bad81f7d5e514a1d727e51aab52aac10-image-1445552999503.gif"
        style="width: 350px; float:right">\r
        Let's use `promptNum` to make a simple
        calculator. The `promptNum` command appears in the variables toolbox because
        it's typically used as a way to get a value from the user that you want to
        hold on to while the program runs.\r
        \r
        `promptNum` is similar to `randomNumber`
        in that it is a function whose return value *evaluates to a number*. The difference
        here is that `promptNum` pops up an input dialog box and waits for the user
        to type a number.  Once they do and hit "OK" the number they typed is returned
        and we can store it in a variable to use in our programs.\r
        \r
        \r
        # Do
        This:\r
        Write a program that acts as a simple calculator. (An animation of
        the end result is shown at right.) <img src="https://images.code.org/e644d4b17d1d6fdb6b5a93651d512f8a-image-1445552700557.gif"
        style="width: 250px; float: right">\r
        * Ask the user to **enter a number**.\r
        *
        Then ask the user to **enter a second number**.\r
        * **Display the result**
        of *some* calculation.\r
         * The example shows division but you may choose
        something else if you like.\r
        \r
        We have given you starting code that shows
        you how to get the first number.  The rest of the code is up to you.\r
        \r
      U3L14 - Variable ReAssignment pt2_markdown_instruction: |
        # Variable Re-assignment
        - Part 2: Updating Values\r
        \r
        All of our examples so far have shown how
        to set the value of a variable by using combinations of numbers and other
        variables.  But what if you wanted to do something like **add 10 to the *current*
        value of a variable**? \r
        \r
        Because updating the value in a variable is
        just moving memory around, the process has to go something like this:\r
        *
        Read the current value of a variable.\r
        * Add 10 to it.\r
        * Store the new
        value back into the same variable.\r
        \r
        The technical term for this is called
        **variable re-assignment** - when you change the value of a variable based
        on its current contents.   To increase the value of `num1` by 10 you actually
        need to do this:\r
        \r
        <img src="https://images.code.org/c49b1a0fb81de4b90558fdb278e40987-image-1445942169121.png"
        style="float:right">\r
        ```\r
        num1 = num1 + 10;\r
        ```\r
        The diagram at
        right shows a picture of what's happening (it assumes the value of `num1`
        is 7 before the line is executed).  It's actually very similar to what happens
        with plain old arithmetic: compute a value, then store it in a variable.  Because
        the computation has to happen before storing the result in a variable, there
        is no contradiction here.\r
        \r
        <details>\r
        <Summary><strong>Common Mistakes
        & Tips</strong> [click to expand]</Summary>\r
        \r
        <h3>\r
        Mistake 1\r
        </h3>\r
        <p>To
        increase the value of variable by 10 (for example) a common mistake is to
        think that this statement alone will do the trick.\r
        </p><p>\r
        \r
        ```\r
        num1
        + 10;\r
        ```\r
        </p><p>\r
        It doesn't. This tells the computer to add 10
        to whatever the value of `num1` is.  And the computer will do that, and the
        result will go....nowhere.  It will be lost.\r
        </p><p>\r
        Because you are
        trying assign a new value to a variable it should make sense that **the =
        sign must be involved somehow**.  \r
        </p>\r
        <h3>\r
        Mistake 2\r
        </h3>\r
        <p>\r
        If
        you were in math class this statment would make no sense:\r
        ```\r
        num1 =
        num1 + 10;\r
        ```\r
        </p><p>\r
        But **remember to read = as "gets."** If
        you read the statement above as: "num1 *gets* the value of num1's current
        value plus 10" it might make more sense.  Get in the habit of using "gets."\r
        </p>\r
        </details>\r
        \r
        #
        Do This:\r
        \r
         * **Make a prediction.**\r
         We start you out with some code
        again (see below). \r
        \r
         <img src="https://images.code.org/60b25394c387bc111451f0e481528733-image-1447800367736.43.42.png"
        style="width: 500px;"> \r
        \r
         Trace the code and predict what you think
        will be printed to the console.  (NOTE: We're serious about this "make a
        prediction" stuff. When you force yourself to make a prediction about what
        code will do you will learn faster since it triggers you to apply your mental
        model of what's happening.)\r
          \r
         * **Run the program** to see if you
        were right.\r
         \r
         * **Add a `console.log` statement**.\r
         \r
          We've
        left you with a *little bit* of programming to do: add a `console.log` statement
        at the end of the program to see the last value of `someNum` to see if your
        full prediction is correct.\r
      U3L14 - concatenate simple_markdown_instruction: |-
        # Text and Variables Living
        Together!\r
        \r
        Sometimes it’s useful to display text along with the value
        of a variable in the same line of output. To do this you use `+` to attach
        a variable onto a literal string of characters.  Here is an example:\r
        \r
        <img
        src="https://images.code.org/a35e68b062fc814871a8323938cf3384-image-1445888147995.png"
        style="border: solid 1px #BBBBBB; height: 30px;">\r
        \r
        Notice that the
        `+` operator has **two different meanings in JavaScript depending on what
        type of data you're applying it to**. Click the explanations below for more
        details.\r
        \r
        <details>\r
        <summary>If **both operands are numbers** `+`
        means to add those two numbers together.</summary>\r
        \r
        This is standard
        addition.  It works both with numbers and with variables that contain numbers,
        as shown below.<br>\r
        \r
        <img src="https://images.code.org/eb50a1fcea459fe74774d903b07a274f-image-1445887814602.png"
        style="border: solid 1px #BBBBBB; height: 30px;"><br>\r
        \r
        Because `num1`
        is a variable that holds a number, and 10 itself is obviously a number, in
        this case `+` will do addition like you would expect.\r
        \r
        </details>\r
        <br>\r
        <details>\r
        <summary>If
        **either of the operands is a string** `+` treats both as if they were strings
        and combines them to create a single string.</summary>\r
        This is potentially
        confusing behavior and can get pretty weird if the text *looks* like numbers.  For
        example, this code will display **16100** to the screen.<br>\r
        \r
        <img src="https://images.code.org/a9c54b664bd192aa5bf611808d88a3bc-image-1445887893598.png"
        style="border: solid 1px #BBBBBB; height: 30px;"><br>\r
        \r
        Why? Because
        JavaScript sees you trying to display a mix of text and variable values. "16"
        (in quotes) is a string of ASCII characters not a number.  And so JavaScript
        converts everything to text, and the characters in the result of "16"+"100"
        comes out to "16100". \r
        \r
        </details>\r
        <br>\r
         \r
        **TIP:** It's
        common to want to sandwich a variable between some text when displaying it.  You
        can string together multiple pieces of text and variables using the `+` operator.  For
        example, you can do this:\r
        <br> \r
        \r
        <img src="https://images.code.org/65b0e277f058903bd3b956cc59ee5253-image-1445887976271.png"
        style="border: solid 1px #BBBBBB; height: 30px;"><br>\r
         \r
        <br>\r
        <details>\r
        <summary>**Misconception
        Alert**</summary>\r
        \r
        The **key thing to understand** about the `+` symbol
        is that it can _only_ do actual arithmetic addition if the values on either
        side of the `+` are actually numbers or variables that contain numbers. \r
        \r
        **And**
        if the `+` symbol cannot determine whether the value is a number then it **assumes
        it's a string**, and converts everything to a string and tries to concatenate
        it.  \r
         \r
        The computer relies on you - the programmer - to make sure that
        the **type of data** stored in a variable is appropriate for the task at hand.\r
        </details><br>\r
        \r
        On
        the next screen we'll have you play with this a little bit, but you'll write
        statements to display a mix of text and strings from here on out.\r
        \r
        #
        Do This:\r
        We have given you the starting code shown below.  You should **modify**
        the `write` statement on **line 3** to combine text and variables together
        to make the app display a single line of text as shown.\r
        \r
        |starting code|output|\r
        |--|--|\r
        |<img
        src="https://images.code.org/a1b84a8728599e9945c576d3bb459140-image-1445891621155.png"
        style="height:50px">| <img src="https://images.code.org/f5673df128eca0f9637c0cca1729b489-image-1445891800242.png"
        style="width: 250px">|
      U3L14 - moving memory challenge1_markdown_instruction: |
        # Moving Memory - Challenge
        1\r
        \r
        The next several levels all present challenges related to "moving
        memory" around in your program.  \r
        \r
        **GOAL:** Set the value of the variable(s)
        to make the `console.log` statement display what it's supposed to.\r
        \r
        **Rules**:\r
        \r

        * You may **only** add lines of code that re-assign values of variables provided.\r

        * You may **only** use assignment (`=`) and arithmetic operators (`+` `-`
        `*` `/`).\r
         * You **MAY NOT** type or introduce any numbers.\r
         * You **MAY
        NOT** add or create any new variables.\r
         * You **MAY NOT** change or alter
        the `console.log` statement at all.\r
        \r
         \r
        Example:\r
        <table>\r
        <tr>\r
        \t<th>Code
        Provided</th>\r
        </tr>\r
        <tr>\r
         <td >\r
                <img src="https://images.code.org/bd3c9a918b22a2874ae77fc82289aab5-image-1447800921923.52.14.png"><br>\r
                <br>The
        code you're given will have a few variables initialized to some values.  The
        last line will be one or more `console.log` statements with a comment indicating
        what the expected value to display should be.\r
                <hr>\r
            </td>\r
        </tr>\r
        <tr>\r
        \t<th>A
        Possible Solution</th>\r
        </tr>\r
        <tr>\r
        \t<td valign=top >\r
            <img
        src="https://images.code.org/4742fed6bff4ad62411b9090f8468db0-image-1447800924556.54.37.png"
        >\r
            <br><br>You need to add a line (or multiple lines) of code to re-assign
        the values in variables so the `console.log` statement displays what's expected.  In
        this example we show a solution on line 5.  Please note that there are several
        different things you could do. For example, you could go crazy and do something
        like: <strong>y = x + x + (x/x);</strong>.  What you do is up to you.\r
            </td>
        \r
        </tr>\r
        </table>\r
        <br><br>\r
        ### Try this example yourself...\r
        \r
      U3L14 - moving memory challenge2_markdown_instruction: |
        # Moving Memory - Challenge
        2\r
        \r
        # Try another one!! \r
        * Click through to see a new problem provided
        in the starter code.  \r
        * A reminder of the rules and example are below
        if you need to sneak a peek.\r
        \r
        <details>\r
        <summary><strong>Reminder
        of the rules</strong> (click to expand)</summary>\r
        \r
        <p>\r
        **GOAL:**
        Set the value of the variable(s) to make the `console.log` statement display
        what it's supposed to.\r
        </p><p>\r
        \r
        **Rules**:\r
        </p><p>\r
         <li>You
        may **only** add lines of code that re-assign values of variables provided.\r

        <li> You may **only** use assignment (`=`) and arithmetic operators (`+` `-`
        `*` `/`).\r
         <li> You **MAY NOT** type or introduce any numbers.\r
         <li>
        You **MAY NOT** change or alter the `console.log` statement at all.\r
        </p><p>\r

        \r
        Example:\r
        <table>\r
        <tr>\r
        \t<th>Code Provided</th>\r
        </tr>\r
        <tr>\r

        <td >\r
                <img src="https://images.code.org/bd3c9a918b22a2874ae77fc82289aab5-image-1447800921923.52.14.png"><br>\r
                <br>The
        code you're given will have a few variables initialized to some values.  The
        last line will be one or more `console.log` statements with a comment indicating
        what the expected value to display should be.\r
                <hr>\r
            </td>\r
        </tr>\r
        <tr>\r
        \t<th>A
        Possible Solution</th>\r
        </tr>\r
        <tr>\r
        \t<td valign=top >\r
            <img
        src="https://images.code.org/4742fed6bff4ad62411b9090f8468db0-image-1447800924556.54.37.png"
        >\r
            <br><br>You need to add a line (or multiple lines) of code to re-assign
        the values in variables so the `console.log` statement displays what's expected.  In
        this example we show a solution on line 5.  Please note that there are several
        different things you could do. For example, you could go crazy and do something
        like: <strong>y = x + x + (x/x);</strong>.  What you do is up to you.\r
            </td>
        \r
        </tr>\r
        </table>\r
        \r
        </details>\r
        \r
        <br><br>\r
        ### Try it yourself...\r
      U3L14 - moving memory challenge3_markdown_instruction: |
        # Moving Memory - Challenge
        3\r
        \r
        Try another one.  Here is the starting code:\r
        \r
        ```\r
        var x
        = 2;\r
        var y = 3;\r
        // your code here\r
        \r
        console.log("The value of
        x is: " + x + " (x should be 7)");\r
        ```\r
        \r
        <details>\r
        <summary><strong>Reminder
        of the rules</strong> (click to expand)</summary>\r
        \r
        <p>\r
        **GOAL:**
        Set the value of the variable(s) to make the `console.log` statement display
        what it's supposed to.\r
        </p><p>\r
        \r
        **Rules**:\r
        </p><p>\r
         <li>You
        may **only** add lines of code that re-assign values of variables provided.\r

        <li> You may **only** use assignment (`=`) and arithmetic operators (`+` `-`
        `*` `/`).\r
         <li> You **MAY NOT** type or introduce any numbers.\r
         <li>
        You **MAY NOT** change or alter the `console.log` statement at all.\r
        </p><p>\r

        \r
        Example:\r
        <table>\r
        <tr>\r
        \t<th>Code Provided</th>\r
        </tr>\r
        <tr>\r

        <td >\r
                <img src="https://images.code.org/bd3c9a918b22a2874ae77fc82289aab5-image-1447800921923.52.14.png"><br>\r
                <br>The
        code you're given will have a few variables initialized to some values.  The
        last line will be one or more `console.log` statements with a comment indicating
        what the expected value to display should be.\r
                <hr>\r
            </td>\r
        </tr>\r
        <tr>\r
        \t<th>A
        Possible Solution</th>\r
        </tr>\r
        <tr>\r
        \t<td valign=top >\r
            <img
        src="https://images.code.org/4742fed6bff4ad62411b9090f8468db0-image-1447800924556.54.37.png"
        >\r
            <br><br>You need to add a line (or multiple lines) of code to re-assign
        the values in variables so the `console.log` statement displays what's expected.  In
        this example we show a solution on line 5.  Please note that there are several
        different things you could do. For example, you could go crazy and do something
        like: <strong>y = x + x + (x/x);</strong>.  What you do is up to you.\r
            </td>
        \r
        </tr>\r
        </table>\r
        \r
        </details>\r
        \r
        <br><br>\r
        ### Try it yourself...\r
      U3L14 - moving memory challenge4_markdown_instruction: |
        # Moving Memory - Challenge
        4\r
        \r
        Try another one.  Here is the starting code:\r
        \r
        ```\r
        var x
        = 2;\r
        // your code here\r
        \r
        console.log("The value of x is: " + x +
        " (x should be 8)");\r
        ```\r
        \r
        <details>\r
        <summary><strong>Reminder
        of the rules</strong> (click to expand)</summary>\r
        \r
        <p>\r
        **GOAL:**
        Set the value of the variable(s) to make the `console.log` statement display
        what it's supposed to.\r
        </p><p>\r
        \r
        **Rules**:\r
        </p><p>\r
         <li>You
        may **only** add lines of code that re-assign values of variables provided.\r

        <li> You may **only** use assignment (`=`) and arithmetic operators (`+` `-`
        `*` `/`).\r
         <li> You **MAY NOT** type or introduce any numbers.\r
         <li>
        You **MAY NOT** change or alter the `console.log` statement at all.\r
        </p><p>\r

        \r
        Example:\r
        <table>\r
        <tr>\r
        \t<th>Code Provided</th>\r
        </tr>\r
        <tr>\r

        <td >\r
                <img src="https://images.code.org/bd3c9a918b22a2874ae77fc82289aab5-image-1447800921923.52.14.png"><br>\r
                <br>The
        code you're given will have a few variables initialized to some values.  The
        last line will be one or more `console.log` statements with a comment indicating
        what the expected value to display should be.\r
                <hr>\r
            </td>\r
        </tr>\r
        <tr>\r
        \t<th>A
        Possible Solution</th>\r
        </tr>\r
        <tr>\r
        \t<td valign=top >\r
            <img
        src="https://images.code.org/4742fed6bff4ad62411b9090f8468db0-image-1447800924556.54.37.png"
        >\r
            <br><br>You need to add a line (or multiple lines) of code to re-assign
        the values in variables so the `console.log` statement displays what's expected.  In
        this example we show a solution on line 5.  Please note that there are several
        different things you could do. For example, you could go crazy and do something
        like: <strong>y = x + x + (x/x);</strong>.  What you do is up to you.\r
            </td>
        \r
        </tr>\r
        </table>\r
        \r
        </details>\r
        \r
        <br><br>\r
        ### Try it yourself...\r
      U3L14 - moving memory challenge5_markdown_instruction: |
        # Moving Memory - Challenge
        5\r
        \r
        Try another one.  Here is the starting code:\r
        \r
        ```\r
        var x
        = 2;\r
        var y = 3;\r
        var z = 0;\r
        // your code here\r
        \r
        console.log("The
        value of x is: " + x + " (x should be 3)");\r
        console.log("The value
        of y is: " + y + " (y should be 2)");\r
        ```\r
        </p><p>\r
        <details>\r
        <summary><strong><big>HINT:</big></strong>(click
        to expand)</summary>\r
        Since this one requires you to change the value of
        two variables you need to be careful about which one you change first, since
        its new value will affect the next lines of code.\r
        <p></p>\r
        You can also
        take advantage of the fact that since `z` is not used as a display value,
        you can use it as a temporary holding ground for one value while you change
        another.\r
        \r
        </details>\r
        </p><p>\r
        </p><p>\r
        \r
        <details>\r
        <summary><strong>Reminder
        of the rules</strong> (click to expand)</summary>\r
        \r
        <p>\r
        **GOAL:**
        Set the value of the variable(s) to make the `console.log` statement display
        what it's supposed to.\r
        </p><p>\r
        \r
        **Rules**:\r
        </p><p>\r
         <li>You
        may **only** add lines of code that re-assign values of variables provided.\r

        <li> You may **only** use assignment (`=`) and arithmetic operators (`+` `-`
        `*` `/`).\r
         <li> You **MAY NOT** type or introduce any numbers.\r
         <li>
        You **MAY NOT** change or alter the `console.log` statement at all.\r
        </p><p>\r

        \r
        Example:\r
        <table>\r
        <tr>\r
        \t<th>Code Provided</th>\r
        </tr>\r
        <tr>\r

        <td >\r
                <img src="https://images.code.org/bd3c9a918b22a2874ae77fc82289aab5-image-1447800921923.52.14.png"><br>\r
                <br>The
        code you're given will have a few variables initialized to some values.  The
        last line will be one or more `console.log` statements with a comment indicating
        what the expected value to display should be.\r
                <hr>\r
            </td>\r
        </tr>\r
        <tr>\r
        \t<th>A
        Possible Solution</th>\r
        </tr>\r
        <tr>\r
        \t<td valign=top >\r
            <img
        src="https://images.code.org/4742fed6bff4ad62411b9090f8468db0-image-1447800924556.54.37.png"
        >\r
            <br><br>You need to add a line (or multiple lines) of code to re-assign
        the values in variables so the `console.log` statement displays what's expected.  In
        this example we show a solution on line 5.  Please note that there are several
        different things you could do. For example, you could go crazy and do something
        like: <strong>y = x + x + (x/x);</strong>.  What you do is up to you.\r
            </td>
        \r
        </tr>\r
        </table>\r
        \r
        </details>\r
        \r
        <br><br>\r
        ### Try it yourself...\r
      U3L14 - moving memory challenge6_markdown_instruction: |
        # Moving Memory - Challenge
        5\r
        \r
        Try another one.  Here is the starting code:\r
        \r
        ```\r
        var x
        = 5;\r
        var y = 11;\r
        var z = 4;\r
        // your code here\r
        \r
        console.log("The
        value of x is: " + x + " (x should be 2)");\r
        console.log("The value
        of y is: " + y + " (y should be 6)");\r
        console.log("The value of z is:
        " + z + " (z should be 8)");\r
        ```\r
        </p><p>\r
        <details>\r
        <summary><strong><big>HINT:</big></strong>
        (click to expand)</summary>\r
        This one requires you to be a little clever.  Think
        about setting the value of one variable that you could then use to easily
        set the value of the other variables.  Then the trick is to figure out how
        to use the variables you've been given to make that useful value.\r
        \r
        </details>\r
        </p><p>\r
        </p><p>\r
        \r
        <details>\r
        <summary><strong>Reminder
        of the rules</strong> (click to expand)</summary>\r
        \r
        <p>\r
        **GOAL:**
        Set the value of the variable(s) to make the `console.log` statement display
        what it's supposed to.\r
        </p><p>\r
        \r
        **Rules**:\r
        </p><p>\r
         <li>You
        may **only** add lines of code that re-assign values of variables provided.\r

        <li> You may **only** use assignment (`=`) and arithmetic operators (`+` `-`
        `*` `/`).\r
         <li> You **MAY NOT** type or introduce any numbers.\r
         <li>
        You **MAY NOT** change or alter the `console.log` statement at all.\r
        </p><p>\r

        \r
        Example:\r
        <table>\r
        <tr>\r
        \t<th>Code Provided</th>\r
        </tr>\r
        <tr>\r

        <td >\r
                <img src="https://images.code.org/bd3c9a918b22a2874ae77fc82289aab5-image-1447800921923.52.14.png"><br>\r
                <br>The
        code you're given will have a few variables initialized to some values.  The
        last line will be one or more `console.log` statements with a comment indicating
        what the expected value to display should be.\r
                <hr>\r
            </td>\r
        </tr>\r
        <tr>\r
        \t<th>A
        Possible Solution</th>\r
        </tr>\r
        <tr>\r
        \t<td valign=top >\r
            <img
        src="https://images.code.org/4742fed6bff4ad62411b9090f8468db0-image-1447800924556.54.37.png"
        >\r
            <br><br>You need to add a line (or multiple lines) of code to re-assign
        the values in variables so the `console.log` statement displays what's expected.  In
        this example we show a solution on line 5.  Please note that there are several
        different things you could do. For example, you could go crazy and do something
        like: <strong>y = x + x + (x/x);</strong>.  What you do is up to you.\r
            </td>
        \r
        </tr>\r
        </table>\r
        \r
        </details>\r
        \r
        <br><br>\r
        ### Try it yourself...\r
      U3L15 - Add reset button to UpDown app_markdown_instruction: |-
        # Add a Reset
        Button\r
        In most apps you want to provide a way to start over. \r
        \r
        To
        do this without having the user quit and restart your app, you need to add
        code to **reset variables and text displays to initial values** so the app
        can effectively start over.\r
        \r
        We've **added a button** to the "gameOverScreen"
        in the *Count Up/Down App* and **added an empty event handler** for it.  \r
        \r
        Right
        now clicking the "start over" button does nothing. You will write code to
        make it work.\r
        \r
        \r
        # Do This:\r
        **Add code to the startOverButton event
        handler to reset the app**.  <img src="https://images.code.org/cb1569accb6a370d2258b5b14d624424-image-1446126849891.gif"
        style="width: 150px; float: right;">\r
        \r
        The app should work like the
        animation shown to the right. **Notice** that when the "start over" button
        is clicked it goes back to the main screen and  the count has been reset to
        0. \r
        \r
        The code should:\r
        \r
        * Set the screen to the gamePlayScreen.\r
        *
        Set the count variable to 0.\r
        * Set the correct text label on the gamePlayScreen
        to show the count is 0.\r
        \r
        Once you get it to work, move on.
      U3L15 - DEMO up down count practice app_markdown_instruction: |
        # All the Basics
        You Need\r
        \r
        <img src="https://images.code.org/abb09baa0b6ccc24ff141590c5b667c3-image-1446417655965.gif"
        style="float:right; width: 150px"> When you close these instructions, you'll
        get to play a little bit with the very simple app (shown at right) to demonstrate
        the basics of concepts involved in making the clicker game.  We'll call it
        the **Count Up/Down App**.  Yes, it's a boring "game," but it has all the
        pieces of a more sophisticated game.\r
        \r
        This app demontrates a few new
        concepts.  We'll step through each one, one at a time, explaining how each
        thing works.  Along the way, we'll also encounter some common challenges,
        and learn how to solve them.\r
        \r
        # Do This:\r
        * Keeping clicking the up
        arrow until something happens (something besides the number increasing).\r
        *
        Start over.\r
        * Click the down arrow until something happens (something besides
        the number decreasing).\r
        * Start over.\r
        \r
        Once you think you've seen
        all the behavior click Finish to see the first part of how this is done.\r
        \r
      U3L15 - Debug forget to update var on reset in UpDown app_markdown_instruction: |-
        #
        Bug Squash!\r
        \r
        The *Count Up/Down App* has a bug! \r
        \r
        A ** common
        mistake** has been introduced into the code.\r
        \r
        It's a tricky one to
        find because at first it looks like everything is okay.\r
        \r
        # Do This:\r
        \r
        *
        **Run the program.**\r
        \r
        * **To see the bug:**\r
         * Click the up or down
        arrow until you get to the "gameOverScreen."\r
         * Click "start over."\r

        * Click the up or down arrow again... what the?\r
         \r
        * **Look at the code
        and fix the problem.**\r
        \r
        * **Read about the common mistake** by expanding
        the area below.\r
        \r
        * **Once you've fixed the issue, move on.**\r
        \r
        <details>\r
        <summary><big><strong>Read
        about the common mistake here...</strong></big> [click to expand]</summary>\r
        <br><br>\r
        <strong><big>...forgetting
        to reset <i>everything</i> you need to actually start over.</big></strong><br><br>\r
        Frequently
        to actually reset you need to set a few variables back to initial values <i>and</i>
        update all the UI components, especially those that rely on those variables,
        so they reflect the new values.<br><br>\r
        \r
        Another common mistake shown
        here is setting the text of a label to "0" rather than the value of the
        count variable.  For example, these two lines of code are a little dangerous:<br><br>\r
        <pre>\r
        count
        = 0;\r
        setText("countDisplayLabel", 0);\r
        </pre>\r
        \r
        To be safe, if
        a label is supposed to display the value of a variable, you should always
        use the variable <i>instead of hard-coding numbers</i> as a check on yourself.  The
        general rule of thumb is: never hard-code a value instead of using a variable
        that holds the value you need to show.<br><br>\r
        \r
        <b>A common strategy</b>
        for handling this is to put everything you need to reset the app into a function
        which you can call at both the beginning of your program, and from other screens
        later on.  For example:<br><br>\r
        \r
        <pre>\r
        function resetAll(){\r
          count
        = 0;\r
          setText("countDisplayLabel", count);\r
          setScreen("gamePlayScreen");\r
        }\r
        </pre>\r
        \r
        Then
        in some other code like a button event handler you can just call your reset
        \r
        function:<br><br>\r
        \r
        <pre>\r
        onEvent("startOverButton", "click",
        \r
        function() {\r
          <span style="background-color:yellow">resetAll();</span>\r
        });\r
        </pre>\r
        \r
        </details>
      U3L15 - Debug if never triggers in UpDown app_markdown_instruction: |-
        # Bug
        Squash!\r
        \r
        The *Count Up/Down App* has a bug! \r
        \r
        A ** common mistake**
        has been introduced into the code.\r
        \r
        We've changed the app so that it
        counts up and down by 3 rather than by 1.\r
        \r
        # Do This:\r
        \r
        * **Run
        the program.**\r
        \r
        * **To see the bug:**\r
         * Click the up or down arrow
        trying to get to the game over screen.\r
         * It should be impossible to get
        to the game over screen.\r
         \r
        * **Look at the code and fix the problem.**\r
        \r
        *
        **Read about the common mistake** by expanding the area below.\r
        \r
        * **Once
        you've fixed the issue, move on.**\r
        \r
        <details>\r
        <summary><big><strong>Read
        about the common mistake here...</strong></big> [click to expand]</summary>\r
        <br><br>\r
        <strong><big>...the
        condition you're checking in your `if` statement is actually impossible to
        reach.</big></strong>\r
        <p>\r
        This problem was probably easy to see here,
        but in practice <b>logic errors</b> like this can be devilish to track down.
        It's especially hard because the program gives you no hints that anything
        is wrong - it is syntactially a correct program. The computer cannot tell
        ahead of time whether your `if` statements will ever be true. So you need
        to trace through the logic of your program step by step to try to figure out
        why something's not happening that you expect should have happened.\r
        </p>\r
        \r
        </details>
      U3L15 - Debugging Simple If-statements =v==_markdown_instruction: |
        # Bug Squash!\r
        \r
        The
        *Count Up/Down App* has a bug! \r
        \r
        A **very common mistake** has been
        introduced into the code.  It's one that vexes early programmers, but we're
        sure you'll find it.\r
        \r
        # Do This:\r
        \r
        * **Run the program.**\r
        \r
        *
        **To see the bug:**\r
         * Click the up arrow just once.\r
         * Restart the
        program.\r
         * Click the down arrow just once.\r
         \r
        * **Look at the code
        and fix the problem.**\r
        \r
        * **Read about the common mistake** by expanding
        the area below.\r
        \r
        * **Once you've fixed the issue, move on.**\r
        \r
        <details>\r
        <summary><big><strong>Read
        about the common mistake here...</strong></big> [click to expand]</summary>\r
        <br><br>\r
        <strong><big>...using
        `=` instead of `==`</big></strong>\r
        <p>\r
        <b>Yup,</b> we told you this
        is a common mistake!  And it's an easy one to make.\r
        </p>\r
        <p>\r
        Remember
        that the single `=` sign does assignment and it actually *also* evaluates
        to true.  This means that if you stick it in an `if` statement, that `if`
        statement will <i>always</i> be true.\r
        </p>\r
        <p>\r
        One strategy to avoid
        this mistake is to **read code aloud in your head** and don't even use the
        single word "equal":\r
        <li> think **"gets"** every time you see `=`</li>\r
        <li>
        think **"equal-equal"** every time you see `==` </li>\r
        </p>\r
        <p>\r
        If
        you get in the habit of thinking that way, these mistakes are easier to catch.  For
        example you'd see this:<br>\r
        `if (count = 20)`<br>\r
        and read:<br>\r
        <i>"if
        count gets 20"</i> ...and know that that doesn't make sense.\r
        </p>\r
        \r
        <p></p>\r
        </details>\r
        \r
      U3L15 - Simple If-statements in UpDown App_markdown_instruction: |
        # Add Your
        Own *if* Statement\r
        \r
        In most apps you want to make decisions based on
        the state of some data you're keeping track of in the app.  \r
        \r
        We've
        **modified** the *Count Up/Down App* to add another screen.  When the count
        reaches certain values, we'll switch screens.  In the code you'll see an
        `if` statement has been added to the event handler for up arrow that states:\r
        \r
        ![](https://images.code.org/6e8acfef603fc7bd900d5ffb3a045150-image-1446125072632.png)\r
        \r

        * **If** the value of `count` is equal to **20, then** set the screen to *"gameOverScreen"*.\r
        <img
        src="https://images.code.org/b737f4a8924a114c8f320130e73949a6-image-1446124106409.gif"
        style="width: 150px; float: right">\r
        \r
        # Do This:\r
        **Add an `if` statement
        so that when counting down the app changes screens when the count reaches
        -5. **\r
        \r
        * **Run the app** and click the up arrow 20 times to see what
        happens when the `if` statement is triggered.\r
        * **Study the `if` statement**
        for the up arrow button to see how it works.\r
        * **Add an `if` statement**
        to the down arrow event handler:\r
        \t* **If** `count` is equal to **-5, then**
        set the screen to the "gameOverScreen."\r
        * **Goal:** Once you're finished,
        clicking the down arrow in the app should work like the animation shown to
        the right.\r
        \r
        <details><summary><strong><big>HINT:</big></strong> [click
        to expand]</summary>\r
        There is a subtle challenge here that you need to
        set the text of the label on the <i>gameOverScreen</i> when you change screens.\r
        <p>\r
        </p>\r
        <b>NOTE:</b>
        Your code can call `setText` for any UI element, on any screen, at any time
        - even if the element isn't on the screen that's currently showing.\r
        </details>\r
        \r
      U3L15 - add code to make count down work_markdown_instruction: |
        # Make Count
        Down Work\r
        \r
        <img src="https://images.code.org/0044a46a27f7af5da74daeae8de021f7-image-1446063781449.gif"
        style="float: right; width: 200px">You now know enough about using global
        variables (and some of the problems you might run into) to try it yourself.\r
        \r
        Let's
        start with an easy task. Right now clicking the up arrow works as expected;
        **clicking the down arrow does not**. So...\r
        \r
        # Do This:\r
        **Make the
        count go down by 1 every time the down arrow is clicked**\r
        \r
        * Study how
        the up arrow works, and use it as an example for writing the code for the
        down arrow.\r
        * Add and modify the code so that when the down arrow is clicked
        the count goes down.\r
        * When you're done the app should work like the animation
        shown to the right.\r
        * HINT: Don't forget to set the text of the label.\r
        \r
      U3L15 - clicker update score_markdown_instruction: |-
        # Using global variables\r
        \r
        You'll
        now look at a version of the clicker game. We've set up the basic functionality
        to move the apple around the screen, and have __created a global variable
        to keep track of the score.__\r
        \r
        # Do this\r
        __Add code to update the
        score when the apple is clicked.__ Remember that you'll have to update both
        the global variable _and_ the label text!\r
        \r
        <img src="https://images.code.org/001640fd24fc487af534ab769ed196e2-image-1446136596261.gif"
        style="width:200px">
      U3L15 - count upDown bug forget to set text_markdown_instruction: |
        # Bug Squash!\r
        \r
        This
        program has a bug that doesn't produce an error. It just doesn't do what's
        expected.  The reason is a common mistake that all programmers make.\r
        \r
        #
        Do This:\r
        * **Run the program.**\r
        * **To see the bug:**\r
         * Click the
        up arrow about 5 times.\r
         * Click the down arrow about 10 times.\r
         * Click
        the up arrow again.\r
        * **Look at the code and fix the problem.**\r
        * **Read
        about the common mistake** by expanding the area below.\r
        * **Once you've
        fixed the issue, move on.**\r
         <p>\r
        \r
        </p>\r
        <details>\r
        <summary><big><strong>Read
        about the common mistake here...</strong></big> [click to expand]</summary>\r
        <big>...forgetting
        to update the display after changing something in the program</big>\r
        \r
        \r
        <h1>
        Misconception Alert - Changing a Variable Doesn't Change the Display</h1>\r
        \r
        A
        common misunderstanding about variables and displaying them is to think that
        a text label that's displaying a variable will change when the variable changes.
        NO.  A text label is just "dumb" container for text.  It's similar to a
        variable itself in that it won't change unless you explicitly tell it to.\r
        <p></p>\r
        <h1>Concept:
        Separation of Program Data from How It's Viewed</h1>\r
        Maintaining variables
        and program data is a **different task** from maintaining the display of the
        app.  Your program could actually run without updating the display at all
        - it would still be working behind the scenes; it just wouldn't be very fun
        or interesting to use.\r
        <p></p>\r
        </details>\r
        \r
        \r
      U3L15 - count upDown bug logic error wrong update_markdown_instruction: |-
        #
        Bug Squash!\r
        \r
        This program has a few different bugs. Find them and squash
        them!\r
        \r
        # Do This:\r
        * **Run the program.**\r
        * **To see the bug:**\r

        * Click the up arrow exactly twice.\r
         \t* Restart the program and do this
        a few times - you'll notice nothing happens the first time you click.\r

        * Click the down arrow several times.\r
        * **Look at the code and fix the
        problem.**\r
        * **Read about the common mistake** by expanding the area below.\r
        *
        **Once you've fixed the issue, move on.**\r
        \r
        <details>\r
        <summary><big><strong>Read
        about the common mistake here...</strong></big> [click to expand]</summary>\r
        <big>...updating
        the wrong thing in the wrong event handler.</big>\r
        <p></p>\r
        There are
        two common mistakes here:\r
        <p></p>\r
        1. Mixing up which event handler should
        do what.\r
        <p></p>\r
        2. Updating the display **before** any change is made
        to the underlying data of the program. \r
        \tThis can make the app seem oddly
        out of sync where each event triggers an update to the display that reflects
        the **last** thing done, not the current thing.\r
        <p></p>\r
        </details>
      U3L15 - count upDown bug var not created globally_markdown_instruction: |
        #
        Bug Squash!\r
        \r
        This program has a few different bugs that are related
        to the same problem.\r
        \r
        # Do This:\r
        * **Run the program.**\r
        * **To
        see the bug:**\r
         * Click the up arrow several times.\r
         * Click the down
        arrow.\r
        * **Look at the code and fix the problem.**\r
        * **Read about the
        common mistake** by expanding the area below.\r
        * **Once you've fixed the
        issue, move on.**\r
        \r
        <details>\r
        <summary><big><strong>Read about the
        common mistake here...</strong></big> [click to expand]</summary>\r
        <big>...thinking
        you're referencing a global variable when you're not.</big><br>\r
        \r
        A
        common mistake is basically a syntax/spelling error. These mistakes can be
        really tricky to work out because you *think* you know what you wrote, but
        the computer doesn't see it that way :)\r
        <p></p>\r
        </details>\r
        \r
        \r
      U3L15 - global var example count up_markdown_instruction: |-
        # Using Variables
        in Apps!\r
        <img src="https://images.code.org/f156f8d8524c3c0316e4db394e331bdc-image-1446060829590.gif"
        style="float: right; width: 200px;">\r
        The example program here has a small
        portion of the *Count Up/Down App* written.  Right now, what the app should
        do is  shown in the animation to the right.\r
        \r
        # Important Concept!\r
        \r
        This
        small functionality **demonstrates an important concept** - how to create
        a variable in the app and update it when an event occurs. It may seem fairly
        straightforward but there are some common misconceptions that we want to alert
        you to.\r
        \r
        # Do This: Misconception Investigation\r
        Over the next few
        levels you are going to do a small investigation of two apps that do almost
        the same thing but *one  works as expected* and *one with a bug* that demonstrates
        an important concept about using variables in apps.  Here is what you'll
        do:\r
        \r
        1. **Run this app, which works properly.**\r
         * Study the code
        until you think you understand what's happening.\r
         * Pay attention to the
        code that handles the up arrow being clicked.\r
        \r
        2. **Run the app on the
        next screen, which has a bug.**\r
         * On the next screen we show you almost
        the same app, but with a subtle problem.\r
         * See if you can spot the difference
        and fix it.\r
        \r
        3. **Report what you found!**\r
         * We'll ask you to report
        what you found.  It's not a quiz.  You can go back and forth until you spot
        the problem, but you should find it and be able to write what it is.\r
        \r
        ![]()
      U3L15 - mini clicker update score_markdown_instruction: |-
        # Using Global Variables\r
        \r
        You'll
        now look at a version of the clicker game. We've set up the basic functionality
        to move the apple around the screen, and have __created a global variable
        to keep track of the score.__\r
        \r
        # Do This:\r
        __Add code to update the
        score when the apple is clicked.__ Remember that you'll have to update both
        the global variable _and_ the label text!\r
        \r
        <img src="https://images.code.org/001640fd24fc487af534ab769ed196e2-image-1446136596261.gif"
        style="width:200px">
      U3L15 - practice with setText_markdown_instruction: |
        # Changing Elements on
        Screen \r
        \r
        There's another way to display text in your app besides `console.log`
        and `write`.  \r
        \r
        There is a command called `setText` which will **change
        the text of a component on screen** given its id. This is a very powerful
        technique and one that you will use a lot. Here's what it looks like in action....\r
        \r
        <img
        src="https://images.code.org/3e5dd320801720d5c62a49146d9ee3d2-image-1446056202170.gif"
        style="width: 500px">\r
        \r
        Let's do a **very simple** example of using
        `setText`.\r
        \r
        # Do This:\r
        <img src="https://images.code.org/5fc22aef5e8f5161f95a2507c1ec006b-image-1446056758249.gif"
        style="float: right; width: 175px; border: solid 1px #AAAAAA">\r
        * **Run
        the code** in the app.\r
         \r
         Look at the code for the "upArrow" event
        handler and how it sets the text of the label.\r
         \r
        * **Modify the code.**\r

        \r
         When the down arrow is clicked, set the text of the label to something
        else.\r
        \r
        * **GOAL:**\r
         * Your only goal is to successfully use `setText`
        in this example app.\r
         * The app should do something similar to the animated
        example at right.\r
        \r
        Once you've got it functional, click Finish to move
        on.\r
         \r
        \r
      U3L15 - variable scoping problem debugging_markdown_instruction: |-
        # Debugging
        Problem!\r
        \r
        **Uh oh!** The code here is subtly different from the one
        in the previous example and **now there is a problem**.\r
        \r
        # Do This:\r
        \r
        *
        **Run the app** and try it to see the problem. \r
        * **See the error.**\r

        * Note that **NaN** stands for "Not a Number" - why would it say this?\r
        *
        **Note the difference** between this broken version and the previous one that
        worked.\r
        * **Fix the problem** so that it works as before.
      U3L15 click add lives_markdown_instruction: |-
        # Tracking Lives\r
        \r
        In the
        game, the number of lives starts at 3 and decrements by 1 every time the background
        image is clicked. Add this functionality to your game!\r
        \r
        # Do This:\r
        -
        __Add your variable to keep track of lives.__\r
        - __Add a click handler for
        the background image.__ _ID: "background"_\r
        - __When the background is
        clicked, decrement the number of lives by 1.__\r
        \r
        <img src="https://images.code.org/79f1352aebb2e40c302d1900aacd31f4-image-1446138180044.gif"
        style="width:200px;">
      U3L15 full clicker app_markdown_instruction: |
        # Make Your Own "Clicker" Game\r
        You
        will be creating your own “clicker” game similar to the Apple Grabber game
        you worked on in this lesson. \r
        The general object of the game is to click
        on an element that jumps around every time you click it. You will pick your
        own theme and decide what the rules are and how to keep score.\r
        \r
        ** Your
        Main Tasks Are To:**\r
        \r
         * Pick a theme for your game and add appropriate
        images and styling.\r
         * Add variables to track some data during gameplay.\r

        * Add code to event handlers to update the variables and display appropriately.\r

        \r
        **See Activity Guide for Requirements**\r
        \r
        There is a full activity
        guide and rubric for this project.  You can find a link to it in the student
        resources section for this lesson. Or ask your teacher for it.\r
         \r
        <img
        src="https://images.code.org/146107536c50b4a3317f3ebbe2e66f37-image-1446418612319.png"
        style="float: right; width: 300px">\r
        ** Template **\r
        \r
        This level
        is a template for the app. You should **run it to see what it does** right
        now. You will modify *this* template, both the design elements and the code,
        for your project.\r
        \r
        The template has 4 screens and some basic navigation
        functionality and event handlers set up for you.  The game play screen uses
        the images from the Apple Grabber game, but you should replace these with
        images related to your chosen theme.\r
        \r
      U3L15 spot the difference variable debugging_markdown_instruction: |
        Respond
        to the following questions about your investigation into the bug with the
        counting game. Feel free to go back and look at the game again (but do so
        in another tab or be sure to click "Submit" to save your work!):

        - From
        the user's perspective, what was the difference between the first version
        of the game and the one with the bug?
        - From looking at the code, what specifically
        was the difference between the two, and why is that an issue?
        - How did you
        fix the bug?
      U3L16 - challenge say hi app_markdown_instruction: |-
        # Introducing the  *change*
        Event\r
        \r
        Did you notice with the demo digital assistant that you could
        just __type a question, hit 'enter', and the assistant would respond__?
        Up until now you've been using the click of a button to trigger getting the
        text from an input or text area.\r
        \r
        You can use a new event type to get
        this behavior: The __'change' event__ is triggered when the user hits 'enter'
        in a text input after typing.\r
        \r
        \r
        <img src="https://images.code.org/7d1725b236471f8e2a0efed5870660da-image-1446071579670.32.36.png"
        style="width:350px;">\r
        \r
        # Do This:\r
        <img src="https://images.code.org/f8f1f7ae18acbc570a367886bcd6ca88-image-1445976541574.gif"
        style="width:250px;">\r
        - A __text input__ has been created for you that
        asks for a user's name.\r
        - Attach a __'change'__ event handler to the
        text input.\r
        - When the 'change' event triggers, __write the user's name
        and a greeting__.
      U3L16 - chaserApp_markdown_instruction: |
        # Chaser Game\r
        \r
        You now have
        all the skills you need to make a simple "chaser" game. A chaser game is
        just a game where an image runs away from your mouse.\r
        <img src="https://images.code.org/ed1e9852b33ca368cf8cd8e0b0159de7-image-1444336815528.gif"
        style="float: right">\r
        \r
        # Do This:\r
        \r
        **Create a "Chaser Game"**
        which includes the following components:\r
        \r
        * **Text** on the top of the
        screen with a title or instructions for what to do.\r
        * **An image** that
        "runs away" (moves randomly) based on some mouse event.\r
        \r
        Once you
        have the basic functionality down feel free to spend time adding more features
        to your application.\r
        <br><br><br>\r
        \r
      U3L16 - chooseImages_markdown_instruction: |-
        # Choosing Your Own Images\r
        \r
        The
        second parameter of the `image` command allows you to set the image to be
        displayed.  There are two ways to do this:\r
        1. Provide the URL of an image
        on the web.\r
        2. Upload an image from your computer (by clicking "choose...").\r
        \r
        ![](https://images.code.org/e726e56fd3e4c7cd4a0d58cba731a855-image-1444240440116.53.49
        PM.png)\r
        \r
        \r
        # Do This:\r
        \r
        * **Read the documentation for `image`**
        for tips on how to find an image's URL and how to upload.\r
        * **Change the
        image** to one you've found online or from your own computer.\r
        \r
        **NOTE:**
        many images are bigger than the screen of your app, so it's likely you'll
        need to add a `setPosition` command to get it on the screen sized the way
        you want.
      U3L16 - doubleQuotes_markdown_instruction: |
        # Importance of Double Quotes\r
        \r
        You
        may have noticed that the strings we've seen are **wrapped in double quotes**.
        These double quotes **are not part of the string**. Instead this is how you
        indicate that a sequence of characters **is a string and not the name of a
        variable**.\r
        \r
        As you start writing programs with strings **it is common
        to generate errors from forgetting to place them in double quotes**. We're
        going to generate some of those errors now so that we can recognize them more
        easily later.\r
        \r
        ![](https://images.code.org/89235457b9b9bf76ac4f8221cae5a62e-image-1445987270682.07.24
        PM.png)\r
        \r
        # Do This:\r
        \r
        * **This program generates many errors**
        because strings were not placed in quotes.\r
        * **Run the program** before
        you change it to see the errors that are generated.\r
        * **Add double quotes**
        around all the strings so that the program runs without errors.\r
        \r
      U3L16 - intro getText_markdown_instruction: |
        # Getting Text Input\r
        \r
        As
        we saw a user can now type inside of a text input whenever they want, **but
        now we'll need a way to access that text**. In order to do that you'll need
        to use the `getText` command, which you can now find in the **UI Controls**
        tab.\r
        \r
        <img src="https://images.code.org/0c6774f2b6d33f8107ec2936102b1a10-image-1445533677192.58.24
        PM.png" style="width: 150px;">\r
        \r
        You can use a `getText` command just
        like a string within a `console.log` or `write` command. Just like with `setText`
        you will refer to the UI element by its ID.\r
        \r
        ![](https://images.code.org/c17e419301d0cfeebf7f0ccee13e415f-image-1445892504376.47.54
        PM.png)\r
        \r
        # Do This:\r
        \r
        * **Read the documentation **  for `getText`.\r
        *
        **Add an event handler to the Submit button** that fires when your button
        is clicked.\r
        * **Inside the event handler** place code that will **log the
        name your user input to the console**.\r
        \r
      U3L16 - introSetPosition_markdown_instruction: |-
        # How to Organize the Code\r
        As
        your apps get more complex you'll have to think about how to organize your
        code so it remains readable and easy for you to locate things when debugging
        any problems.  We suggest the following convention which breaks the code into
        3 major sections:\r
        * **Top**:  code for UI elements **and** any code for
        positioning them.\r
        * **Middle**: code for event handlers.\r
        * **Bottom**:
        code for any other other functions you've written. (We don't have any of
        these yet.)\r
        \r
        So if you have some existing code and want to insert a
        `setPosition` command, you should place it after `button` but before `onEvent`
        in the code, like this:\r
        \r
        <img src="https://images.code.org/ae17e62c077aa9698526371d22db1307-image-1448404255046.gif"
        style="width: 500px">\r
        \r
        # Do This:\r
        \r
        <img src="https://images.code.org/3a834b8a4313e31a453525a69acda1f4-image-1444335250982.png"
        style="float: right; width: 175px">\r
        \r
        * **Starter code** has been provided
        which creates two buttons and event handlers.\r
        * **Insert** `setPosition`
        commands for each button so they appear at the bottom of the screen (as shown).\r
          *
        **Remember:** in an app screen 0,0 is the top left corner and you specify
        a location by how many pixels from the left and how many down from the top
        of the screen it is.  The screen is **320 by 450 pixels**.
      U3L16 - introStrings_markdown_instruction: |-
        # Strings\r
        \r
        The primary data
        type we have used so far is **Numbers**. If we want to interact with user-submitted
        text, however, we'll need to learn about a new data type called a **String**.  A
        string is a **sequence of ASCII characters**.\r
        \r
        **Example** | **Rule**\r
        ---|---\r
        `"aString"`
        | Strings **might** look a lot like a variable name but there are **many differences**.\r
        `"look
        at all these spaces"` | Strings can **contain spaces**.\r
        `"$2 bills are
        the coolest"` | Strings can **contain special characters** (and even start
        with them).\r
        `"11"` | Strings might **contain only digits**. This looks
        like a number but it is really 2 ASCII characters.\r
        `""` | Strings might
        **contain no characters**.\r
        <br>\r
        You can **store strings in a variable
        just like a number**. In this example the variable name is `str` but you should
        choose a name that is **descriptive and meaningful**.\r
        \r
        ![](https://images.code.org/56e6b30a51556aa3b516e0a49b51cbeb-image-1445894334432.18.40
        PM.png)\r
        \r
        **Combining Strings:** often you will want to combine multiple
        strings to create one longer string. You can do this with the `+` operator.
        The formal name of this process is **concatenation**.\r
        \r
        The program you're
        about to see is a very simple Mad Libs app that uses strings that are created
        inside the program and  saved inside of variables. These strings are then
        **concatenated** with other strings to create a Mad Lib.\r
        \r
        # Do This:\r
        \r
        *
        The input words of this Mad Lib are **currently set to the empty string**.\r
        *
        **Add your own input words** and run the program to generate the Mad Lib.
      U3L16 - nameAgeTemplate_markdown_instruction: |-
        # Text Input Elements\r
        \r
        So
        far we've been using `promptNum` as a simple way to get a number as input.
        Now that we know a little about strings were are going to create **user interface
        elements that users can use to submit text (i.e. strings) instead**. The first
        and simplest example is `textInput` which you can find in Design Mode.\r
        \r
        <img
        src="https://images.code.org/4436a3ba2a7596c7724380c7c82d5c29-image-1445533665376.36.19
        PM.png" style="width: 100px">\r
        \r
        # Do This\r
        \r
        * **Add two text
        input elements to this program**, one for the name and one for the age of
        the user.\r
        * **Give your text input elements descriptive and meaningful
        IDs**\r
        * **In Design Mode** set their default text to prompt the user for
        their name in age\r
        * **Compare your app to the example below**\r
        \r
        <img
        src="https://images.code.org/865403f21bdb27246caeb31afa7c0b5f-image-1445902764676.39.11
        PM.png" style="float:left; width:200px;">\r
        <br>
      U3L16 - newEventTypes_markdown_instruction: |
        # New Elements and Events: New
        Event Types\r
        You just wrote your first program that **does not include the
        turtle**! Moving forward we're going to focus much more on programming apps
        that use User Interface (UI) elements, but we'll keep the turtle library
        around in case you want to use it.\r
        \r
        <img src="https://images.code.org/9f013bd84577eb2498061757e18a72f4-image-1444322870272.46.06
        AM.png" style="float: right">\r
        \r
        **New Events**: You may have noticed
        that the `onEvent` block has a pull-down menu for the event **type** (see
        right).\r
        \r
        # Do This:\r
        \r
        * **Experiment** with **each of the different
        types of mouse events** by selecting from the list. You can also read about
        them in the documentation.\r
        \t* click\r
            * mousemove\r
            * movedown\r
            *
        mouseup\r
            * mouseover\r
        * **Choose** the mouse event type you like most
        and change your event handler to use it.\r
        * **Note:** There are some events
        that capture keystroke events. These are interesting, but they do not work
        easily with buttons.  We'll stick to mouse events for now, and get to keys
        later.\r
        \r
        **Be sure** to experiment with each one.  The next exercise
        will quiz you on which one is which.\r
        \r
      U3L16 - outputWithTextArea_markdown_instruction: |-
        # Generating Text Output\r
        \r
        So
        far we've been outputting our messages to the console, but now we'd like
        to display them in the app. In order to do so we're going to be using a new
        UI element called a `textArea`. You can use `setText` with a `textArea` just
        like you would with a `textLabel`.\r
        \r
        ![](https://images.code.org/45e6b6cdb1ca87f53cf1d6bba97cb812-image-1445977693641.24.43
        PM.png)\r
        \r
        If we want to combine user input with default text we can do
        so with **string concatenation**. Together with a `textArea` we can use this
        ability to compose longer messages based on user input.\r
        \r
        # Do This:\r
        \r
        *
        **Add a `textArea`** to your app and give it a descriptive and meaningful
        ID.\r
        * **Create a variable inside your event handler** called `userMessage`
        to hold the full message that will be sent to the user.\r
        * **Use string
        concatenation** to compose a message from the user input.\r
        * **Use `setText`**
        to place your `userMessage` inside the `textArea` you created.\r
        \r
        <img
        src="https://images.code.org/193af3e0c993dbf0b7af9c571ec5f56d-image-1445977696957.27.08
        PM.png", style="width:250px;">
      U3L16 - setPosition to move button_markdown_instruction: |
        # New Elements and
        Events: Moving Buttons with Events\r
        \r
        Over the next few exerises we will
        be exploring several new user interface elements and event types. Your code
        will be pulled forward as you progress through the exercises.\r
        \r
        **Moving
        Past Turtle:** We've been using buttons to move the turtle. For example,
        in the program you're about to see a button that moves the turtle to a random
        location on the screen. We're going to alter this program ** so that the
        button itself moves every time you click it**.\r
        \r
        **Notice** that this
        means that event handlers can affect the elements they are attached to, not
        just other elements!  This is an interesting technique for apps.  Now you're
        going to try it...\r
        \r
        # Do This:\r
        * **Change the ID** of the button
        to something descriptive and meaningful.\r
        * **Modify** your event handler
        so that **it no longer moves the turtle** but instead sets the position of
        the button itself to a random location on the screen.\r
        \t* TIP: add `setPosition`
        to the event handler, and just move the `randomNumber` calls from the turtle.\r
        \t*
        Recall the screen is **320 by 450 pixels**.\r
        \r
        **Before** | **After**\r
        ---|---\r
        ![](https://images.code.org/a4172e43b6707a3170e4eaf54a2a7b1d-image-1444335577799.gif)
        | <img src="https://images.code.org/4e17b077bd8fbdd43f960d26bb3d252d-image-1444335766972.gif"
        style="width: 150px">\r
        \r
        \r
      U3L16 - setupMoveToRandom_markdown_instruction: |-
        # New Elements and Events:
        Random Movement\r
        \r
        Over the next several exerises we will be exploring
        several new user interface elements and event types. Your code will be pulled
        forward as you progress through the exercises.\r
        \r
        # Do This\r
        \r
        **Starter
        Code:** To begin you have been provided a single button and event handler
        which moves the turtle forward.\r
        \r
        **Modify** the program so that when
        the button is clicked the turtle moves to a random location on the screen.\r
        \r
        **Change
        the ID** of the button to something descriptive and meaningful.\r
        \r
        **Note:**
        Recall the screen is **320 by 450 pixels**. You'll likely want to use `moveTo`
        and `randomNumber`\r
        \r
        ![](https://images.code.org/a4172e43b6707a3170e4eaf54a2a7b1d-image-1444335577799.gif)
      U3L16 - singleSetPosition_markdown_instruction: |
        # Moving and Sizing Buttons\r
        \r
        An
        important component of designing intuitive and visually appealing user interfaces
        is the location of the elements on the screen. Using the `setPosition` command
        (now added to the Toolbox) you can move and set the size of user interface
        elements.\r
        \r
        ![](https://images.code.org/c3e42223cbcb096f992d758973d09f63-image-1444664597665.42.48
        AM.png)\r
        \r
        **NOTE:**\r
         * If you only want to set the size you can use
        the `setSize` function which looks like this:\r
        \r
         ![](https://images.code.org/cb742ecf96c04477db0f8361ad5dcdaf-image-1448924017288.png)\r
        \r

        * If you *only* want to set the position *without* changing the size of the
        element, you can omit the *width* and *height* parameters from the `setPosition`
        function.  To do that, you need to switch into text mode, like this:\r
        \r

        <img src='https://images.code.org/5b565ef5b74b5cd657ba15c67be92b0d-image-1448924356253.gif'
        style="width: 400px">\r
        \r
        # Do This:\r
        \r
        * **Read the documentation**
        for `setPosition`.\r
        * **Starter code** has been provided which creates a
        single button.\r
        * **Move the button to the middle of the screen** using
        `setPosition`, as in the image below. (You may need to experiment a little
        bit with the x,y location to get it right).\r
        * **Remember:** in an app screen
        0,0 is the top left corner and you specify a location by how many pixels from
        the left and how many down from the top of the screen it is.  The screen is
        **320 by 450 pixels**.\r
        \r
        ![](https://images.code.org/62840468826ce153d3d0d80bca303827-image-1444662614963.10.05
        AM.png)\r
        \r
      U3L16 - stringsVsNumbers_markdown_instruction: |-
        # Strings vs. Numbers\r
        \r
        Some
        strings only contain numeric digits (e.g. `"512"`) in which case they look
        a lot like numbers. In some languages strings cannot be treated as numbers,
        but there are instances in JavaScript where **a number will be treated like
        a string or a string will be treated like a number**. This can cause unexpected
        behavior, so it's good to see these instance beforehand.\r
        \r
        The most
        frequent instances you will see number or strings treated like the other type
        is when using **arithmetic operators** (addition, substraction, multiplication,
        division).\r
        \r
        * **Addition:** If either of the values is a string then
        this will be treated as **string concatenation**. Only when both values are
        numbers will it be treated as normal addition.\r
            * "2" + 3 --> "23"\r
            *
        2 + 3 --> 5\r
            * 2 + "a" --> "2a"\r
        * **Multiplication/Division/Subtraction:**
        Since this operation does not exist for strings then **all values with these
        operations will be converted to numbers** if possible.\r
        \t* "8" * "2"
        --> 16\r
            * "8" / 2 --> 4\r
            * 8 - "a" --> NaN (an error)\r
          \r
        **Note:
        In almost all instances you will not want to use the functionality we are
        exploring here. It is important to be aware of it for debugging purposes**\r
        \r
        #
        Do This\r
        \r
        * **This exercise includes some examples of strings and numbers
        being combined with arithmetic operators**\r
        * Use this level to **practice
        with this behavior ** and then move on to complete the matching assessment
        in the next level.
      U3L16 - text labels_markdown_instruction: |
        # New Elements and Events: Text
        Labels\r
        <img src="https://images.code.org/20d50fd324908fc48633e1325cc37603-image-1444662791509.png"
        style="float: right">\r
        The UI controls toolbox contains an element called
        `textLabel`. A text label is what it sounds like: plain text that you can
        put in your app. Even though it's just plain text you can still move and
        resize it using `setPosition`, and you can attach event handlers to it as
        well.\r
        \r
        **NOTE:** resizing a text label does not change the font size
        of the text.  We'll learn how to do that later.  \r
        \r
        # Do This:\r
        \r
        *
        **Read the documentation** for `textLabel`<img src="https://images.code.org/fe2ce5f335fd124dc3052270ca0af31f-image-1444336014658.gif"
        style="float: right; width: 150px">.\r
        * **Modify** the program so that
        your button is now a text label. Just as before, it should move randomly around
        the screen when clicked. You can make the text whatever you like.\r
        * **Tip:**
        If you reuse your button's ID you'll only need to change a single line of
        code to make your program work. Once you have your program working **choose
        a descriptive and meaningful ID** for your text label and make the appropriate
        changes in the event handler.\r
        \r
        <br>\r
        <br>\r
        <br>\r
        \r
      U3L16 - textInput getText write_markdown_instruction: |-
        # Text Input Elements\r
        \r
        So
        far we've been using `promptNum` as a simple way to get a number as input.
        Now that we know a little about strings we are going to create **user interface
        elements that users can use to submit text (i.e. strings) instead**. The first
        and simplest example is `textInput` which you can find in Design Mode.\r
        \r
        <img
        src="https://images.code.org/4436a3ba2a7596c7724380c7c82d5c29-image-1445533665376.36.19
        PM.png" style="width: 100px">\r
        \r
        # Do This:\r
        \r
        * **Add two text
        input elements to this program**, one for the name and one for the age of
        the user.\r
        * **Give your text input elements descriptive and meaningful
        IDs**.\r
        * **In Design Mode** set their default text to prompt the user for
        their name and age.\r
        * **Compare your app to the example below**.\r
        \r
        <img
        src="https://images.code.org/865403f21bdb27246caeb31afa7c0b5f-image-1445902764676.39.11
        PM.png" style="float:left; width:200px;">\r
        <br>
      U3L16 - toUpper_markdown_instruction: |-
        # String Capitalization\r
        \r
        If you
        want to change the capitalization of a string you can do so with two new functions\r
        \r
        ![](https://images.code.org/d8523cdae7c07b34baa1c61809bb80d4-image-1445980407200.42.31
        PM.png)\r
        \r
        Note that the syntax is similar to `console.log` . This is
        because `toUpperCase` really only makes sense as a command when you are using
        a **string**, just as `log` only makes sense when you are talking about the
        console. This function **evaluates to a new string in which all characters
        have been made uppercase / lowercase**. If you want to update the value in
        your original variable you'll have to do so explicitly, as in\r
        \r
        ```\r
        var
        myString = "lower case for now";\r
        myString = myString.toUpperCase();\r
        ```\r
        \r
        #
        Do This:\r
        \r
        * **Update your application so that the user's name is printed
        in UPPERCASE**.\r
        \r
        <img src="https://images.code.org/26d8ffb7c631c1c510f781b5bf46d494-image-1445980322936.04.55
        PM.png", style="width:250px;">
      U3L16 - use images_markdown_instruction: |-
        # New Elements and Events: Images\r
        \r
        <img
        src="https://images.code.org/a84297658be45dc78bc401d387d10436-image-1444663322356.21.25
        AM.png" style="float: right; width: 120px">\r
        Images make applications
        more visually pleasing and interactive. You can add images to your application
        using the `image` command. For now, just add an `image` element to your app
        (the default image link is the Code.org logo) and don't worry about choosing
        a unique image just yet. We'll do that in the very next exercise!\r
        \r
        \r
        #
        Do This:\r
        <img src="https://images.code.org/8df7b1b56c71de7ad9770646bd7f8792-image-1444336140877.gif"
        style="float: right; width: 250px">\r
        \r
        * **Modify** the program - change
        the `textLabel` to an `image` so that the image moves randomly around the
        screen based on the event you chose.\r
        * **Tip:** If you reuse your text
        label's ID you'll only need to change a single line of code to make your
        program work! Once you have your program working though, it's probably a
        good idea to choose a descriptive and meaningful ID for your image and make
        the appropriate changes in the event handler.\r
        \r
        <br>
      U3L16 Assessment Free Response_markdown_instruction: |+
        Self-assess your clicker
        game project using the rubric, then respond to this prompt:

        In 100 words,
        summarize what you learned in this activity and how you might be able to use
        your new knowledge in future projects.


      U3L16 Free Response Getting Started_markdown_instruction: "Until today, you\nhave
        only learned how to add buttons to a program. \n\nWhat other elements,\nin
        addition to buttons, do you interact with in familiar applications? \n\nBesides\nclicking
        on buttons, in what other ways can you get information to the program\nor
        tell the computer to do things?\n\n\n"
      U3L16 Free Response Wrap Up_markdown_instruction: |
        In the next lesson, you
        will enhance the clicker game to make it more interesting and more fun.

        What
        features would you like to add to your program?
      U3L16 Mad Lib Clear Input_markdown_instruction: |
        # Play It Again and Again!\r
        \r
        When
        the user clicks the "Play again" button, the first screen should reset and
        not show the user's previous text.\r
        \r
        # Do This:\r
        - When the "Play
        again" button is clicked, __clear the text from each text input__ on Screen
        1.\r
        - __Free play:__ Add images, or more How-to steps for your Mad Libs,
        and invite others to play!\r
        \r
        <img src="https://images.code.org/a49fe3eba4d2d2fb03e45d15aad53dbf-image-1450143105779.16.14
        Mad Libs play again button.gif" style="width:200px">\r
        \r
        \r
        <details>\r
        <summary>**Hint**</summary>\r
        Try
        setting the text to the empty string: `""`.\r
        </details>\r
      U3L16 Mad Lib Demo_markdown_instruction: |-
        # Getting Text from the User\r
        \r
        Up
        until now, the event-driven apps you have created responded to the user clicking
        an element or typing a number when you used `promptNum`. __What if we want
        the user to provide _text_ instead of a number?__ You can probably think of
        many apps and websites that ask you to provide text in order to do something.\r
        \r
        In
        programming, we have to represent text in a specific way to distinguish it
        from other words in our code, such as variable names. But we'll cover that
        later...\r
        \r
        At the beginning of class you created a Mad Libs on paper,
        which takes user input in the form of nouns, adjectives, and verbs to create
        a unique "How-to" manual. You'll be translating your own Mad Libs How-to
        into an app in this lesson.\r
        \r
        # Do This:\r
        \r
        - __Play with this Mad
        Libs app__ a couple of times to see a digital version of the paper game. \r
        -
        __Think about how the final text is created__ based on the input from the
        user. How would you describe in words the algorithm for creating it?
      U3L16 Mad Lib Student Setup_markdown_instruction: |
        # Back to Mad Libs: Design
        Your App\r
        Now that you've had some practice getting user text and making
        new strings with it, you're ready to turn your How-to Mad Libs into an app.
        To get started, you'll set up the layout. There are two main screens:\r
        \r
        __Screen
        1: Collect User Input__  \r
        - On this screen, you'll use __text labels__
        and __text input__ design elements to set up the different words you want
        the user to provide.\r
        - A __Next__ button takes you to Screen 2 to view
        the full Mad Libs.\r
        \r
        __Screen 2: View Mad Libs__  \r
        - On this screen,
        you'll use the __text area__ design element to create the space where the
        user's completed Mad Libs will be displayed.\r
        - A __Play again__ button
        takes you to back Screen 1.\r
        <br>\r
        <br>\r
        \r
        \r
        \r
        <table>\r
        <tr>\r
        <td>\r
        <strong>Screen
        1:</strong>\r
        </td>\r
        <td>\r
        <strong>Screen 2:</strong>\r
        </td>\r
        </tr>\r
        <tr>\r
        <td>\r
        <img
        src="https://images.code.org/ccea092b516047dff82fafa50b47bcc7-image-1447974038265.00.17
        PM.png" style="width:150px;float:right;">\r
        </td>\r
        <td>\r
        <img src="https://images.code.org/0f832e6314ad98170a3cddb317d26e41-image-1445898480304.27.45.png"
        style="width:151px;float:right;">\r
        </td>\r
        </tr>\r
        </table>\r
        \r
        #
        Do This:\r
        \r
        - Create the two screens for your app, including the design
        elements in each one.\r
        - Requirement: Request at least 3 separate words
        from the user on Screen 1.\r
        - Create the event handlers for the __Next__
        and __Play again__ buttons to respond to clicks.\r
        - Use `setScreen` in the
        event handlers to get the screen navigation working.\r
      U3L16 Mad Lib getText_markdown_instruction: |-
        # Make It Mad! Add the User's
        Text to Your Mad Libs Outline\r
        \r
        Now that you have your Mad Libs outline
        appearing in the text area, it's time to __incorporate the user's text__
        to make your Mad Libs come alive.\r
        \r
        # Do This:\r
        \r
        - Did you pick
        good ID names for your text input elements? Update them now if you didn't!\r
        -
        When the __Next__ button is clicked, __get the user's text from the text
        inputs on Screen 1 and store each in a separate variable__.\r
        - Use string
        concatenation to __incorporate the user's text into your Mad Labs string__
        before updating the text area on Screen 2. \r
        \r
        <details>\r
        <summary>**Hint**</summary>\r
        Use
        `getText` to get the text from each of the text inputs on Screen 1.\r
        </details>\r
        <details>\r
        <summary>**Should
        I make local or global variables?**</summary>\r
        Remember that the decision
        to create local variables or global variables is a question of _scope_. Where
        will you need to access these variables in your program? If you are only using
        the variables in the click callback function for the "Next" button, then
        they can be _local_ variables in that function. \r
        </details>
      U3L16 Mad Lib setText_markdown_instruction: |-
        # Update the Text Area with Your
        Mad Libs Outline\r
        \r
        When figuring out how to make progress with a program,
        it helps to break the problem down into smaller steps and test your program
        incrementally. So rather than jumping straight to getting the user input and
        __concatenating__ it with your Mad Libs outline, start first by just making
        sure that you can get your Mad Libs outline to appear in the text area when
        the __Next__ button is clicked on the first screen. \r
        \r
        But wait! If you
        just use `setText` and pass in the string of your Mad Libs outline, it will
        look like the screen on the left where all the steps are smushed together.
        You can use one or more newline characters, `"\n"`, in your string to create
        a line break in your text.\r
        \r
        <table>\r
        <tr>\r
        <td>\r
        <strong>Without
        newlines</strong>\r
        </td>\r
        <td>\r
        <strong>With newlines</strong>\r
        </td>\r
        </tr>\r
        <tr>\r
        <td>\r
        \r
        <img
        src="https://images.code.org/24fb1385d6199cd52c6e1d3d11e547fc-image-1448404478181.png"
        style="width:201px;float:right;">\r
        </td>\r
        <td>\r
        <img src="https://images.code.org/3a627993f9e0e4a6d462c8a21b335058-image-1448404299215.png"
        style="width:200px;float:right;">\r
        </td>\r
        </tr>\r
        </table>\r
        \r
        \r
        #
        Do This:\r
        \r
        - When the __Next__ button is clicked, you already switch
        to Screen 2, but now you should also call `setText` on the text area on Screen
        2 to your Mad Libs outline. See the images above for one way to temporarily
        handle the word placeholders.\r
        - Add in newline characters `"\n"` in
        your Mad Libs string to format it.\r
        \r
        <details>\r
        <summary>**Newline
        Examples**</summary>\r
        <table style="width:100%; margin-left:25px;">\r
        <tr>\r
        <td
        style="vertical-align: text-top; border-right:1px solid #000">\r
        \t**Example1:**<br/><br/>\r
            \r
            <samp>console.log("How
        to Drive\nStep 1.");<br/><br/></samp>\r
            \r
            *will be displayed
        as...*<br/><br/>\r
            \r
            <samp>How to Drive<br/>Step 1.<br/><br/></samp>\r
            \r
            *...on
        your console.*\r
        </td>\r
        <td style="padding-left:20px;">\r
        <samp>**Example2:**<br/><br/>\r
            \r
            var
        step1 = "Step 1: ...";<br/>\r
            \r
            var step2 = "Step 2: ...";<br/>\r
            \r
            console.log(step1
        + "\n" + step2);<br/><br/></samp>\r
            \r
            *will be displayed as...*<br/><br/>\r
            \r
            <samp>Step
        1: ...<br/>Step 2: ...<br/><br/></samp>\r
            \r
            *...on your console.*\r
        </td>\r
        </tr>\r
        </table>\r
        </details>
      U3L16 Mad Lib toUpper_markdown_instruction: |-
        # Why Are You Yelling At Me?!
        *toUpperCase* and *toLowerCase*\r
        \r
        The main functionality of the Mad Libs
        app is complete, but there are some finishing touches to add. The user may
        type input with random letter capitalization, but the Mad Libs output string
        should be consistently capitalized.\r
        \r
        # Do This:\r
        \r
        - Pick one or
        more pieces of the user's input text to transform into "yelling" or emphasize
        by __making it uppercase__ before displaying it.\r
        - For the other pieces
        of the user's input text, __make it lowercase__ before displaying it.\r
        \r
        <details>\r
        <summary>**Hint**</summary>\r
        Remember
        the rules of updating variables! You can update a variable after first getting
        its current value and then doing something with it. <br> Example: `song =
        song.toUpperCase();`\r
        </details>
      U3L17 - getAndSetKeyValue_markdown_instruction: |-
        # Incrementing a Key Value
        Pair\r
        \r
        In order to increment a key value pair you must first know what
        value it contains. In other words, you will need to **first read from and
        then write to** the same key value pair. \r
        \r
        You are going to build a
        simple app in which users can like a photo on the screen. **The number of
        likes the image has received** will be stored in a key value pair so that
        it is persistent and **multiple users can like the image**.\r
        \r
        # Do This\r
        \r
        *
        **Choose an image** for your app by changing the URL in design mode\r
        * A
        key value pair called **totalLikes** is already added to the app\r
        * **Add
        an event handler** to the **Like** button that increments **totalLikes**.
        Note you'll need to use `getKeyValue` , `setKeyValue` , and **callback functions**
        in order to make this properly work.
      U3L17 - getKeyValue_markdown_instruction: |-
        # Reading from Key Value Pairs\r
        \r
        So
        far we have focused on how to create and update key value pairs. Now we will
        learn how to read from them.\r
        \r
        `getKeyValue` can be used to read the
        value stored in a key value pair. The value is actually returned to your program
        as **a parameter of the callback function**. This actually makes sense since
        you should only be able to use the value retrieved from the server once you've
        actually received a response. As a result **any code that uses the value read
        from a key value pair must appear in the callback function**.\r
        \r
        ![](https://images.code.org/c6457cacaa9fdba39fe28da5353547d9-image-1445368281726.10.05
        PM.png)\r
        \r
        In the example you are about to see `getKeyValue` is used to
        read from two key value pairs. The first demonstrates how to use the parameter
        from the callback function to access the returned value. **You can name the
        value returned in the callback function anything you want**.\r
        \r
        # Do This\r
        \r
        *
        Using the starter code to guide you, **add code to the callback function**
        of the second `getKeyValue` command to log the value stored in `userScore`,
        as in the example below.\r
        \r
        ![](https://images.code.org/b253ed77df628cceab40474a12893dd9-image-1445368291498.11.07
        PM.png)
      U3L17 - introCallbacks_markdown_instruction: |-
        # Callback Functions\r
        \r
        Making
        requests to a remote server makes sequencing a set of commands more challenging,
        if not impossible. In order to address this issue the data commands include
        **an optional third parameter** called a **callback function**. A callback
        function is a function which **will run only after you've received confirmation
        from the server that it has received a request.**\r
        \r
        ![](https://images.code.org/f82d29612f31ca3ec90353b8bc804f0a-image-1445364087348.01.13
        PM.png)\r
        \r
        # Ordering setKeyValue Commands\r
        \r
        The program you are
        about to see contains two `setKeyValue` commands which update the same key
        value pair, called `predictableBit`. Currently we cannot predict the sequence
        in which the commands will run, but if we use the **callback functions** each
        now includes we can. \r
        \r
        # Do This\r
        \r
        * **Alter the program** so that
        the second `setKeyValue` command appears within the **callback function**
        of the first, as in the image below.\r
        * **Run the program multiple times**
        and check the results in the **Data Viewer** to ensure that the requests are
        now consistently arriving in the correct order.\r
        * **Alter the program**
        so that instead of always setting `predictableBit` to **0 and then 1** it
        always sets it to **1 and then 0**\r
        \r
        Before | After\r
        ---|---\r
        ![](https://images.code.org/b3b56f9070fdb9d5f7e6b57aa09bfdf3-image-1445365075454.17.42
        PM.png) | ![](https://images.code.org/04ad6f1a70df9ef01b3b826eb265035b-image-1445363861130.57.13
        PM.png)
      U3L17 - introKeyValue_markdown_instruction: |-
        # What are Key Value Pairs?\r
        \r
        **Key
        value pairs** are how you will permanently store information within your apps.
        Just like a variable a key value pair is referred to by a name ("key") and
        holds one piece of information ("value"). That said, there are some important
        differences between variables and key value pairs.\r
        \r
        # Key Value Pairs
        vs. Variables\r
         | Key Value Pair | Variable\r
        ---|---|---\r
        **Storage**
        | Stored on a remote server (i.e. "in the cloud") | Stored in your computer's
        working memory\r
        **Persistence** | Permanent, even if you close your app
        | Deleted when your program terminates\r
        **Speed** | Accessed by making a
        request over the Internet, takes time | Accessed immediately\r
        **Sharing**
        | All users of your app read and write to the same key value pairs | Each
        user has their own copy of a variable\r
        \r
        # Data Viewer\r
        \r
        The **Data
        Viewer** (shown below) lets you visually explore the permanent data associated
        with your app. You can access the Data Viewer by clicking **View Data** and
        then **view key/value pairs**.\r
        \r
        ![](https://images.code.org/19b2012027d8f197821e48eb9ba4647d-image-1445283825747.43.26
        PM.png)\r
        \r
        # Do This\r
        \r
        * **Access the Data Viewer** by clicking **View
        Data** and then **view key/value pairs**\r
        * A key value pair called `permanentNumber`
        has already been added to your app\r
        * **Change the value** stored in `permanentNumber`
        using the **Edit** button\r
        * **Create your own key value pair** by clicking
        **Add**. Give your key value pair any key and value you wish.\r
        * **Reload**
        the app (you can just refresh the tab) and confirm the data is still there\r
        \r
        ![](https://images.code.org/e3fe8c5f10042d0ddd7f1dfe0c2a48c8-image-1445283727281.41.19
        PM.png)
      U3L17 - readKeyValue_markdown_instruction: |-
        # What are Key Value Pairs?\r
        \r
        **Key
        value pairs** are how you will store information permanently within your apps.
        In some ways key value pairs act a lot like a variable. They are referred
        to by a name (their "key") and hold one piece of information (their "value").
        That said, there are some important differences between variables and key
        value pairs.\r
        \r
        # Key Value Pairs vs. Variables\r
         | Key Value Pair |
        Variable\r
        ---|---|---\r
        **Storage** | Stored on a remote server (i.e. "in
        the cloud") | Stored in your computer's working memory\r
        **Persistence**
        | Permanent, even if you close your app | Deleted when your program terminates\r
        **Speed**
        | Accessed by making a request over the Internet, takes time | Accessed immediately\r
        **Sharing**
        | All users of your app read and write to the same key value pairs | Each
        user has their own copy of a variable\r
        \r
        Don't worry about memorizing
        all of these features now as we'll be exploring them in the coming exercises.
        \r
        \r
        # Data Viewer\r
        \r
        For now we're not even going to write any code
        with our key value pairs. Instead you'll be using the **Data Viewer** to
        visually explore the permanent data associated with your app. You can access
        the Data Viewer by clicking **View Data** and then **view key/value pairs**.\r
        \r
        #
        Do This\r
        \r
        * **Access the Data Viewer** by clicking **View Data** and
        then **view key/value pairs**\r
        * A key value pair called `permanentNumber`
        has already been added to your app\r
        * **Change the value** stored in `permanentNumber`
        using the **Edit** button\r
        * **Create your own key value pair** by clicking
        **Add**. Give your pair any key and value you wish.\r
        * **Reload** the app
        (you can just refresh the tab) and confirm the data is still there
      U3L17 - setKeyValue_markdown_instruction: |-
        # Creating and Updating Key Value
        Pairs\r
        \r
        The Data Viewer is a useful way to check and interact with the
        key value pairs in your app, but you'll also want to control them with code.
        The commands to control the remote data in your app can be found in the **Data**
        tab which has been added to your toolbox.\r
        \r
        The first command we are
        going to explore is the `setKeyValue`. This command is used both to **create**
        and **update** a key value pair. \r
        \r
        ![](https://images.code.org/0d1055cf3a5c707e6a4ebcf49bbb359d-image-1445361975963.26.00
        PM.png)\r
        \r
        The **key parameter** indicates the key of the key value pair
        you wish to update (make sure you put the name in quotes). The **value parameter**
        is used to indicate what value should be stored.\r
        \r
        # Do This\r
        \r
        *
        This app **already contains** a key value pair called `myFavoriteNumber` with
        a value of **10**. You can use the **Data Viewer** to confirm this.\r
        * **Update**
        the key value pair `myFavoriteNumber` to have a value of **20**\r
        * **Create
        a key value pair** called `mySecondFavoriteNumber` with a value of **100**\r
        *
        **Confirm your code worked** by checking in the **Data Viewer**\r
        \r
        ![](https://images.code.org/1dfaff43c28185b44dd014fed0cdb8f4-image-1445288326270.58.13
        PM.png)
      U3L17 - twoSetKeyValue_markdown_instruction: |-
        # Unpredictability with setKeyValue\r
        \r
        Key
        value pairs are **stored remotely** on a network of servers. When you set
        a key value you are actually **sending data across the Internet**, a process
        which **takes an unpredictable amount of time**. We actually cannot assume
        that requests will arrive in the order they are sent.\r
        \r
        The program you
        are about to see contains two `setKeyValue` commands which update the same
        key value pair, called `unpredictableBit`.\r
        \r
        ![](https://images.code.org/0343bc61aab6e14940a6af559074a35a-image-1445353609544.06.13
        AM.png)\r
        \r
        Given the order of the commands you'd expect `unpredictableBit`
        would be set to 0 and then 1. That said, it is possible that the requests
        arrive **out of order**, leaving the value as 0 instead.\r
        \r
        # Do This\r
        \r
        *
        **Run the program**\r
        * **Open the Data Viewer** to see what value `unpredictableBit`
        was set to.\r
        * **Record** what value `unpredictableBit` was set to (0 or
        1)\r
        * **Repeat the experiment** a few more times (5-10). You'll need to
        **refresh the Data Viewer** each time by reloading the tab it is in.\r
        *
        **About what percent of the time do the `setKeyValue` requests arrive out
        of order?**
      U3L18 Free Response Wrap Up_markdown_instruction: "Over the next few lessons,\nyou
        will be gathering skills and knowledge to create a clicker game of your\nown
        design. \nYou probably have some very cool ideas about what you want to\ndesign.
        And obviously, you will gather new ideas and will need to learn some\nnew
        programming skills. \n\nGet ready for the tasks ahead of you by assessing\nwhat
        you already know, and thinking about what you want to know. \nIn the\nspace
        below:\n\n1.  List at least 3 things you already know that will be useful\nin
        designing your clicker game.\n\n2.  Based upon the initial ideas of your\ngame
        design, list at least 3 things you want to know.\n\n\n"
      U3L18 comparison operators_markdown_instruction: |-
        # Explore Comparison Operators\r
        \r
        True/false
        decisions are made using boolean expressions. A __boolean expression__ is
        an expression that only evaluates to TRUE or FALSE, and you can use __comparison
        operators__ to craft boolean expressions.  \r
        \r
        # Do This:\r
        \r
        Use `console.log`
        to **print out the different boolean expressions below to see what information
        they return**.\r
        \r
        | Boolean Expressions |\r
        | --- |\r
        | 3 > 2 |\r
        |
        2 > 3 |\r
        | 5 + 3 < 10 |\r
        | ‘a’ < ‘b’ |\r
        | ‘j’ > ‘c’ |\r
        | 2 == 2 |\r
        |
        2 != 2 |\r
        | true == false |\r
        | "x" == x |\r
        | "Blue" == "blue"
        |\r
        | x < 10 |
      U3L18 comparison operators_for_video_markdown_instruction: |-
        # Explore Comparison
        Operators\r
        \r
        True/false decisions are made using boolean expressions.
        A __boolean expression__ is an expression that only evaluates to TRUE or FALSE,
        and you can use __comparison operators__ to craft boolean expressions.  \r
        \r
        #
        Do This\r
        \r
        Use `console.log` to **print out the different boolean expressions
        below to see what information they return**.\r
        \r
        | Boolean Expressions
        |\r
        | --- |\r
        | 3 > 2 |\r
        | 2 > 3 |\r
        | 5 + 3 < 10 |\r
        | ‘a’ < ‘b’ |\r
        |
        ‘j’ > ‘c’ |\r
        | 2 == 2 |\r
        | 2 != 2 |\r
        | true == false |\r
        | "blue"
        == blue |\r
        | "Blue" == "blue" |\r
        | x < 10 |
      U3L19 - DEMO up down count practice app_markdown_instruction: |
        # All the basics
        you need\r
        \r
        We're going to use this very simple app to demonstrate the
        basics of concepts involved in making the clicker game.  Yes, it's a dumb
        "game", but it has all the pieces of a more sophisticated game.\r
        \r
        This
        app demontrates a few new concepts.  We'll step through each one, one at
        a time, explaining how each thing works.  Along the way, we'll also encounter
        some common challenges, and learn how to solve them.\r
        \r
        # Do This\r
        *
        Click the up arrow until something happens\r
        * Start over\r
        * Click the
        down arrow until something happens\r
        * Start over\r
        \r
        Once you think you've
        seen all the behavior click Finish to see the first part of how this is done.\r
        \r
      U3L19 - Debugging with consoleLog_markdown_instruction: |-
        # Debugging Variables:
        Part 4\r
        \r
        `console.log()` is not just useful at the end of programs. It
        is really helpful when we want to check the value of variables part way through
        the running of a program. Since we can't see the value of the variable change
        on the screen we need to find another way to get that information.\r
        \r
        #
        Do This\r
        \r
        * **Starter Code:** We started you off with the same problem
        from the last level with `console.log()` statements at the beginning and end
        of the program to check the starting and ending values\r
        \r
        * **Add `console.log()`
        statements** to find out the value of a and b after the first reassignment
        statement `a = b;`
      U3L19 - Simple If-statements in UpDown App_markdown_instruction: |
        # Add your
        own if statement\r
        \r
        In most apps you want to make decisions based on the
        state of some data you're keeping track of in the app.  \r
        \r
        We've **modified**
        the *Count Up/Down App* to add another screen.  When the count reaches certain
        values we'll switch screens.  In the code you'll see an if statment has
        been added to the event handler for up arrow that states:\r
        \r
        ![](https://images.code.org/6e8acfef603fc7bd900d5ffb3a045150-image-1446125072632.png)\r
        \r

        * **If** the value of *count* is equal to **20, then** set the screen to *"gameOverScreen"*.\r
        <img
        src="https://images.code.org/b737f4a8924a114c8f320130e73949a6-image-1446124106409.gif"
        style="width: 150px; float: right">\r
        \r
        # Do This\r
        **Add an if statement
        so that when counting down the app changes screens when the count reaches
        -5. **\r
        \r
        * **Run the app** and click the up arrow 20 times to see what
        happens when the if statement is triggered\r
        * **Study the if statement**
        for the up arrow button to see how it works\r
        * **Add an if statement** to
        the down arrow event handler:\r
        \t* **if** the count is equal to **-5, then**
        set the screen to the "gameOverScreen"\r
        * **Goal:** Once you're done,
        clicking the down arrow in the app should work like the animation shown to
        the right.\r
        \r
        <details><summary><strong><big>HINT:</big></strong> [click
        to expand]</summary>\r
        There is a subtle challenge here that you need to
        set the text of of the label on the <i>gameOverScreen</i> when you change
        screens.\r
        <p>\r
        </p>\r
        <b>NOTE:</b> Your code can call `setText` for any
        UI element, on any screen, at any time - even if the element isn't on the
        screen that's currently showing.\r
        </details>\r
        \r
      U3L19 - Target Clicker App_markdown_instruction: "# The Goal\\r\n\\r\nWe have\nseen
        a couple different versions of this app before. At the end of the design\nmode
        lesson we made something very similar to this app. There are a couple\nnew
        elements in the app now. Study how those new elements work. \\r\n\\r\n#\nDo
        This\\r\n* Run the example program\\r\n* Investigate: What happens when you\n**click
        on the Code.org logo**? \\r\n* Investigate: What happens when you **click\nsomewhere
        else**? \\r\n* Investigate: What happens when you hit the **reset\nbutton**.
        \  "
      U3L19 - final prompt_markdown_instruction: |-
        Respond to your teacher's prompt
        below
      U3L19 - fix the var name syntax error v2_markdown_instruction: |
        # Debugging
        Variables\r
        <img src="https://images.code.org/18cb0f3b0fc43def369a3329854edc2e-image-1447272068495.png\r
        "
        style="float: right; border: solid 1px black; width: 350px">\r
        \r
        One
        of the most common errors that can happen when you try to run a program is
        `Unknown identifer`.\r
        This is just the computer trying to tell you that
        it doesn't recognize something you wrote.  Usually it's the name of a variable
        or function that you're trying to write and there is a small misspelling.\r
        \r
        **The
        computer doesn't hate you :)** It just needs everything to be exact so it
        can understand what you're trying to get it to do.\r
        \r
        **App Lab** alerts
        you to potential errors in two ways:<img src="https://images.code.org/329990c2e51e1e07a16d5e550cf766f0-image-1447272337465.gif"
        style="width: 350px; float: right; border: solid 1px black">\r
        \r
        * Hover
        your mouse over the yellow triangles or red squares next to line numbers in
        the code to see what they say.\r
        * As usual, the Debug Console will also
        tell you about any errors while your program is running. \r
        \r
        # Do This:\r
        We've
        given you some code with some errors in it.  Look at the error messages and
        try to figure out the problem.\r
        \r
        * **Run the program**.\r
        * **Locate
        and fix the error**.\r
        \r
        When you get it right the output to the console
        should look like this:\r
        \r
        ![](https://images.code.org/9c7a8eb5db973f81eb2faa89713d4f30-image-1445477911014.png)\r
      U3L19 - fix the var name syntax error_markdown_instruction: |-
        # Debugging Variables:\r
        <img
        src="https://images.code.org/e65caa6cd2f3572dc38d09d6caaeb067-image-1445477367690.png\r
        "
        style="float: right; border: solid 1px black">\r
        \r
        One of the most common
        errors that can happen when you try to run a program is `Unkonwn identifer`.\r
        This
        is just the computer trying to tell you that it doesn't recognize something
        you wrote.  Usually it's the name of a variable or function that you're
        trying to write and there is a small misspelling.\r
        \r
        **The computer doesn't
        hate you :)** It just needs everything to be exact so it can understand what
        you're trying to get it to do.\r
        \r
        **App Lab** alerts you to potential
        errors in two ways:<img src="https://images.code.org/f8cb1bb7d4c8989d67faa3e72e6d1d15-image-1445477022928.gif"
        style="width: 350px; float: right; border: solid 1px black">\r
        \r
        * Hover
        your mouse over the yellow triangles or red squares next to line numbers in
        the code to see what they say.\r
        * As usual, the Debug Console will also
        tell you about any errors while your program is running. \r
        \r
        # Do This\r
        We've
        given you some code with some errors in it.  Look at the error messages snd
        try to figure out the problem\r
        \r
        * **Run the program**\r
        * **Locate and
        fix the error**\r
        * When you get it right the output to console should look
        like this:\r
        \r
        ![](https://images.code.org/9c7a8eb5db973f81eb2faa89713d4f30-image-1445477911014.png)
      U3L19 - global var example count up_markdown_instruction: |-
        # Using Variables
        in Apps!\r
        <img src="https://images.code.org/f156f8d8524c3c0316e4db394e331bdc-image-1446060829590.gif"
        style="float: right; width: 200px;">\r
        The example program here has a small
        portion of the *Count Up/Down App* written.  Right now, what the app should
        do is  shown in the animation to the right.\r
        \r
        # Important Concept!\r
        \r
        This
        small functionality **demonstrates an important concept** -- how to create
        a variable in the app and update it when an event occurs. It may seem fairly
        straightforward but there are some common misconceptions that we want to alert
        you to.\r
        \r
        # Do This: Misconception Investigation\r
        Over the next few
        levels you are going to do a small investigation of two apps that do almost
        the same thing but *one  works as expected* and *one has with a bug* that
        demonstrates an important concept about using variables in apps.  Here is
        what you'll do:\r
        \r
        1. **Run this app which works properly**\r
         * Study
        the code until you think you understand what's happening\r
         * Pay attention
        to the code that handles the up arrow being clicked\r
        \r
        2. **Run the app
        on the next screen which has a bug**\r
         * On the next screen we show you
        almost the same app, but with a subtle problem\r
         * See if you can spot the
        difference and fix it\r
        \r
        3. **Report what you found!**\r
         * We'll ask
        you to report what you found.  It's not a quiz.  You can go back and forth
        until you spot the problem, but you should find it and be able to write what
        it is.\r
        \r
        ![]()
      U3L19 - practice with setText_markdown_instruction: |
        # Changing elements on
        screen \r
        \r
        There's another way to display text in your app besides `console.log`
        and `write`.  \r
        \r
        There is a command called **setText** which will **change
        the text of a component on screen** given its id. This is a very powerful
        technique and one that you will use a lot. Here's what it looks like in action....\r
        \r
        <img
        src="https://images.code.org/3e5dd320801720d5c62a49146d9ee3d2-image-1446056202170.gif"
        style="width: 500px">\r
        \r
        Let's do a **very simple** example of using
        **setText**...\r
        \r
        # Do This\r
        <img src="https://images.code.org/5fc22aef5e8f5161f95a2507c1ec006b-image-1446056758249.gif"
        style="float: right; width: 175px; border: solid 1px #AAAAAA">\r
        * **Run
        the code** in the app\r
         \r
         Look at the code for the 'upArrow' event
        handler and how it sets the text of the label.\r
         \r
        * **Modify the code**\r

        \r
         When the down arrow is clicked, set the text of the label to something
        else.\r
        \r
        * **GOAL**\r
         * Your only goal is to successfully use `setText`
        in this example app\r
         * The app should do something similar the animated
        example at right.\r
        \r
        Once you've got it functional, click Finish to move
        on.\r
         \r
        \r
      U3L19 - test reassignment of two vars_markdown_instruction: |
        # Variable Reassignment
        - Part 1\r
        \r
        So far we have only set a variable's value once.  But it's
        called a *variable* for a reason - its value can change (or vary) throughout
        a program. This is useful and necessary for keeping track of things like a
        score in a game.\r
        \r
        To re-assign a value to a variable all you have to
        do is maintain the mental model of what's happening:\r
        \r
         * Variables
        are containers for information.\r
         * The `=` sign is an instruction to set
        the value.\r
         * A series of assignment statements (see example to right)
        is a list of instructions to execute one at a time - it's not a series of
        equations that define the state of the world.\r
        \r
        # Do This:\r
        <img src="https://images.code.org/066db834ae289ac538609b68c6492c4a-image-1445944263895.png"
        style="float: right">\r
        \r
         * **Make a prediction.**\r
        \r
         The code
        on the following screen looks like what is shown at right.  Study it and make
        a prediction about what will happen when you run the code. What will the values
        of `a` and `b` be at the end of the program?\r
        \r
        * **Add `console.log`
        statements.** \r
        \r
         Prove it to yourself by adding `console.log` statements
        at the end of the program to find out what the value of `a` and  `b` are.\r

        \r
        * **NOTICE:** in the code above, after the variable `a` has been created
        using `var`, to change a variable's value, you only need to refer to the
        variable by its name. The word `var` only needs to be used once - when the
        variable is created for the first time. \r
        \r
        * It's a **common mistake**
        to use `var` everytime you want to *use* a variable but just **remember `var`
        means CREATE a new variable**.  When you create a new variable it will lose
        its old value.  We'll look at errors related to this later.\r
        \r
      U3L19 - three basic ops of variables_markdown_instruction: |-
        # Variables Toolbox\r
        Let's
        get started with the most basic example of using and controlling the computer's
        memory with variables. The toolbox has a couple of new commands for working
        with variables.\r
        \r
        We've given you some starter code that does three
        things:\r
        <table>\r
        <tr>\r
        <td>\r
        <ol>\r
        <li>**Creates** a variable called
        `score`</li>\r
        <li> **Assigns** the value *0* to `score`</li>\r
        <li>**Displays**
        the value of the `score` to the console (see hint below about quotes) </li>\r
        </ol>
        \r
        </td>\r
        <td>\r
        <img src="https://images.code.org/056a735a96a603e23768d66f0de32961-image-1445462590619.png"
        style="width: 350px">\r
        </td>\r
        </tr>\r
        </table>\r
        \r
        \r
        # Do This:\r
        You're
        going to add another variable, assign it a value, and then display it to the
        console.\r
        Use the starting code as a model for what you need to create now.\r
        <img
        src="https://images.code.org/72744382133081947777e67a5988d4ea-image-1445462803999.gif"
        style="float: right; width: 350px">\r
        * **Create a new variable** by dragging
        out the `var` block.\r
        * **Change the name of the variable** from the default
        `x` to `lives` (see animation at right).\r
        * **Set the value of `lives` to
        be 3**.\r
        * **Add** `console.log` **messages** to show the value of `lives`.\r
        \r
        The
        output in the debug console should look like this:\r
         \r
          <img src="https://images.code.org/6405a3ed95ca3125ea1b2c9ffbdffa94-image-1445349849482.png"
        style="border: solid 1px gray">\r
        <details>\r
          <summary>  Debugging Tip:
        Displaying values of variables [click to expand]</summary>\r
           **NOTE: To
        print the value of a variable you *should not* use quotes.**\r
           Notice
        the difference between these two statements: <br>\r
           `console.log("score")`<br>\r
           `console.log(score)`<br>\r
           It's
        subtle but important:\r
           <br>\r
           <li>When `console.log` sees quotation
        marks it thinks you want to print out the literal characters in the quotes.\r
           <li>When
        `console.log` sees something **without quotation marks** it assumes you're
        trying to print a variable, and it goes to retrieve its value and displays
        that. </li>\r
         \r
        </details>\r
        \r
        ![]()\r
        \r
        ![]()
      U3L19 - up down count practice app_markdown_instruction: |-
        # What happened last
        level?\r
        \r
        In JavaScript you should just think of the word var as shorthand
        for "create a variable". In fact in the case of the last level the program
        thinks you want another variable names foo. This is the result of **scope**.
        \r
        \r
        There are two types of variables:\r
        \r
        1. **Gloabl Variables** -
        Created outside of all functions and can be seen and updated by any code.\r
        1.
        **Local Variables** - Create inside of a function and can't be seen by any
        other code. They get created when the function is run, and they get destroyed
        (seriously) when last line of code in the function has executed. If the function
        gets run again, then the variable is created again.\r
        \r
        So if you say `var`
        in front of a variable with the same name as a global variable it actually
        thinks you want another variable named foo just for this function!\r
        \r
        \r
        #
        Incrementing with buttons\r
        \r
        Check it out. We have started using increment
        with a button!  Can you figure out how to set up the Down button to decrement
        the value of count each time it is clicked?\r
        \r
        # Do This\r
        \r
        * **Try
        the starter code.** See how the UP button works.\r
        \r
        * ** Set up the DOWN
        button** to decrease the value of count by 1 each time it is clicked.\r
        \r
        *
        Your app should look like the example when done.
      U3L19 - variable reassignment challenge pt2_markdown_instruction: |
        # Wrapping
        Up Variables - This is Not Math Class\r
        \r
        Hopefully you now understand
        the gist of working with variables.  The major thing to remember is that every
        time you see an `=` sign it means that you are instructing the computer to
        set a variable to a new value.  \r
        \r
        <img src="https://images.code.org/ecced8eb916809f66ac7d555a819c2a6-image-1447803015383.17.43.png"
        style="float: right">\r
        The example to the right is something that definitely
        wouldn't make sense in math class, but you should be able to reason about
        it as a piece of code.  Because it's code, you can also **insert** statements
        to display the value of variables as they change.  You don't have to guess!\r
        \r
        #
        Do This:\r
        * ** Make a prediction.** \r
        \r
         As usual you should **first**
        look at the code given to you and reason about what it does.  You should try
        to predict what the value of `num` will be after all lines have executed.\r
        \r
        *
        ** Insert 3 `console.log` statements.**\r
        \r
         Insert `console.log` statements
        into the existing code to display each value of `num` immediately after it's
        changed. (The animation below shows how to get started.)\r
         \r
         ![](https://images.code.org/0e425ce1a186d49d230395032f970913-image-1447802992249.19.24
        add console message.gif)\r
         \r
        * **Was your prediction right?**\r
         \r

        After you figure out the answer, if your prediction was off, try to understand
        why.  Where was your misunderstanding?\r
      U3L19 - variable reassignment part 1_markdown_instruction: |
        # Variable Reassignment
        part 1\r
        \r
        So far we have only set a variable's value once.  But it's
        called a *variable* for a reason - its value can change (or vary) throughout
        a program. This is useful and necessary for keeping track of things like a
        score in a game.\r
        \r
        To re-assign a value to a variable all you have to
        do is maintain the mental model of what's happening:\r
        \r
         * Variables
        are containers for information\r
         * The '=' sign is an instruction to set
        the value.\r
         * A series of assignment statements (see example to right)
        is a list of instructions to execute one at a time - it's not a series of
        equations that define the state of the world.\r
        \r
        # Do This\r
        <img src="https://images.code.org/066db834ae289ac538609b68c6492c4a-image-1445944263895.png"
        style="float: right">\r
        \r
         * **Make a prediction**\r
        \r
         The code on
        the following screen looks like what is shown at right.  Study it rigth and
        now and make a prediction about what will happen when you run the code. What
        will the values of `a` and `b` be at the end of the program?\r
        \r
        * **Add
        console.log statements** \r
        \r
         Prove it to yourself by adding `console.log`
        statements at the end of the program to find out what the value of a and b
        are.\r
         \r
        * **NOTICE:** in the code above, after the variable `a` has been
        created using `var`, to change  only need to refer to the variable by its
        name.  The word `var` only needs to be used once - when the variable is created
        for the first time. \r
        \r
        * It's a **common mistake** to use `var` everytime
        you want to *use* a variable but just **remember `var` means CREATE a new
        variable**.  When you create a new variable it will lose its old value.  We'll
        look at errors related to this later.\r
        \r
      U3L19 - variable scope problem 2_markdown_instruction: |-
        # Debugging Variables:
        Part 5\r
        \r
        \r
        # Do This\r
        * First run the program to see the problem.  \r
        \r
        *
        You don't need to write code to solve any problem here. But you do need to
        investigate the code and come up with an explanation for WHY what's happening
        is happening. \r
        \t* Why aren't 3 things being written to the screen?  \r
            *
        Why does the variable foo seem to exist once but not the other times?  \r
            *
        If you switch to code mode you'll see some warning messages next to two lines
        of code -- why do you get those messages? \r
            \r
        * Once you think you
        have a good answer, continue to the next page.
      U3L19 - variable scoping problem debugging_markdown_instruction: |-
        # Debugging
        Problem!\r
        \r
        **Uh oh!** The code here is subtly different from the one
        in the previous example and **now there is a problem**.\r
        \r
        # Do This\r
        \r
        *
        **Run the app** and try it to see the problem. \r
        * **See the error**....\r

        * Note that **NaN** stands for "Not a Number" - why would it say this?\r
        *
        **Note the difference** between this broken version and the previous one that
        worked\r
        * **Fix the problem** so that it works as before
      U3L19 - write var and string with same name v2_markdown_instruction: |-
        # Debugging
        Variables\r
        <img src="https://images.code.org/1363b1799cd0f70e383664b4c6359ef4-image-1445479475849.png"
        style="float:right; width: 200px">There is a simple command called `write`
        in the UI Controls toolbox that is a fast and easy way to display text in
        the app itself. The way you use it is very similar to `console.log`.  Let's
        debug another problem only using `write` instead of `console.log`.  \r
        \r
        You
        may have already run into this problem!  But it's worth mentioning again.
        To display the value of a variable you *should not* use quotes. Notice the
        difference between these two statements - the comments next to each line explains
        the differences:\r
        ``` \r
         write("score");  // will display the literal
        characters s-c-o-r-e\r
         write(score);    // will retrieve the value of score
        and display it\r
        ```\r
        \r
        # Do This:\r
        <img src="https://images.code.org/a0ff680a245dba5546183e07ebbeaef2-image-1447270477159.png"
        style="float: right; width: 250px">To solve these problems you **should
        only add or remove quotation marks**.\r
        * **Run the starter code**\r
        * **Locate
        and fix the problems**\r
        \r
        **GOAL:** Make the app display what's shown
        at right by only adding or removing quotation marks from the code given.\r
        \r
        ![]()
      U3L19 - write var and string with same name_markdown_instruction: |-
        # Debugging
        Variables\r
        <img src="https://images.code.org/1363b1799cd0f70e383664b4c6359ef4-image-1445479475849.png"
        style="float:right; width: 200px">There is a simple command called `write`
        in the UI Controls toolbox that is a fast and easy way to display text in
        the app itself. The way you use it is very similar to `console.log`.  Let's
        debug another problem only using `write` instead of `console.log`.  \r
        \r
        You
        may have already run into this problem!  But it's worth mentioning again.
        To display the value of a variable you *should not* use quotes. Notice the
        difference between these two statements - the comments next each line explains
        the differnece:\r
        ``` \r
         write("score");  // will display the literal
        characters s-c-o-r-e\r
         write(score);    // will retrieve the value of score
        and display it\r
        ```\r
        \r
        # Do This\r
        <img src="https://images.code.org/a0ff680a245dba5546183e07ebbeaef2-image-1447270477159.png"
        style="float: right; width: 250px">To solve these problems you **should
        only add or remove quotation marks**\r
        * **Run the starter code**\r
        * **Locate
        and Fix the problems**\r
        \r
        **GOAL:** Make the app display what's shown
        at right by only adding or removing quotation marks from the code given.\r
        \r
        ![]()
      U3L2 Free Response Reflection_markdown_instruction: |
        Respond to your teacher's
        prompt in the space below.
      U3L2 Using Simple Commands (no tooltips)_markdown_instruction: |-
        <img src="https://images.code.org/0aca9e3ba0945f31ddd56438a45ed69c-image-1436286498758.png"
        align=right>**Directions:** Given only 4 turtle commands, write code in App
        Lab to complete the drawings in each of the challenges below.  Your goal is
        to write code that solves the problem as efficiently as possible using only
        the commands provided.  \r
        \r
        What does “efficient” mean?  In computer science
        it can actually mean several different things depending on what you’re talking
        about.  Work on these challenges, try to solve them in a way that you think
        is best and we’ll ask about efficiency at the end.\r
        \r
        <img src="https://levelbuilder-studio.code.org/script_assets/k_1_images/instruction_gifs/csp/U3L02-leftSquare.gif"
        align=right>**Warm up 1:** Draw a 1 x 1 square to the front and left of the
        turtle as efficiently as possible. The program should stop with turtle in
        its original position, facing its original direction.\r
        \r
        Once you think
        you have a solution, click the Finish button - it will appear once you run
        the program.
      U3L2 Using Simple Commands_markdown_instruction: |-
        <img src="https://images.code.org/0aca9e3ba0945f31ddd56438a45ed69c-image-1436286498758.png"
        align=right>\r
        \r
        Given only 4 turtle commands, write code in App Lab to
        complete the drawings in each of the challenges below.  Your goal is to write
        code that solves the problem as efficiently as possible using only the commands
        provided.\r
        \r
        What does “efficient” mean?  In computer science it can actually
        mean several different things depending on what you’re talking about.  Work
        on these challenges, try to solve them in a way that you think is best and
        we’ll ask about efficiency at the end.\r
        \r
        <img src="https://images.code.org/d26ed114448c5ffe75a75ed761fab5f0-image-1447888033281.gif"
        align=right>\r
        # Do This: \r
        Draw a 1 x 1 square to the front and left of
        the turtle as efficiently as possible. The program should stop with turtle
        in its original position, facing its original direction.\r
        \r
        Once you think
        you have a solution, click the Finish button - it will appear once you run
        the program.
      U3L20 Assessment4_markdown_instruction: |
        How do you know if a program needs
        a conditional statement?
      U3L20 Assessment5_markdown_instruction: |
        How do you decide when to use an "if"
        statement or "if-else" statement?
      U3L20 Assessment6_markdown_instruction: |
        When using an "if" statement, what
        line of code is executed if the condition is false?
      U3L20 Assessment7_markdown_instruction: |
        How do you know if the conditionals
        in your code are working correctly?
      U3L20 Assessment8_markdown_instruction: |+
        What is the result of a Boolean expression?


      U3L20 Free Response Getting Started_markdown_instruction: "Think about these\nstatements.
        Are they true or false?\n\n    There are 7 days in the week. \n    Candy\nCrush
        is a fun app.\n    2 + 1 = 4\n    A beach vacation is the best.\n\nIn\n50
        words, speculate on what you think it means to be true or false in a computer\ncompared
        to true or false in life.\n\n\n"
      U3L20 Free Response Wrap Up_markdown_instruction: "Share your game with a partner.\n\nExamine
        the conditional and help each other resolve any problems.\n\nWhat\nhelp or
        suggestions did you provide to your partner? \n\nWhat suggestions\ndid your
        partner offer to you that improved the decision making in your game?\n\n\n"
      U3L21 Assessment Wrap Up_markdown_instruction: |+
        Revisit and examine the Clicker
        Game Enhancement list from Lesson 18 - Controlling Memory and Program Flow.


        What enhancements do you now have the knowledge and skills - related to
        variables and conditionals - necessary to implement?


      U3L22 Assessment_markdown_instruction: |
        Why is an inline function used in your
        clicker game to get or set a key/value pair?
      U3L22 Free Response Getting Started_markdown_instruction: "In the previous\nlesson,
        you added a \"best score\" feature to your clicker game. It worked\nfine for
        multiple plays in one game-playing session. \n\nWhy doesn't it save\nyour
        best score from one session to the next?\"\n"
      U3L22 Reflection_markdown_instruction: "Use the rubric to assess your Clicker\nGame
        project. Then, reflect on your learning by answering the following questions.\n\nAnswer\nin
        100 words:\n\n* What are you most proud of in this project? Why?\n\n* What\nproblems
        did you have?\n\n* How did you resolve them? \n\n* What did you learn\nfrom
        the problems? \n\n* Were some of the problems avoidable? How? \n\n* If\nyou
        were to do this activity again, what would you do differently?\n"
      U3L23 Chatbot Conditionals 1_markdown_instruction: |
        # Adding Intelligence Using
        Conditionals\r
        \r
        So far the digital assistant you created responds with
        the same message no matter what the user types. Let's look at how to make
        the digital assistant smarter. Let's work on creating a Movie Bot example
        before returning to your digital assistant.\r
        \r
        In the last lesson we learned
        about `if`, `else-if`, and `else` statements. These allow us to make decisions.
        In the digital assistant we want to make decisions based on keywords. **The
        first keywords we want the Movie Bot to respond to are the movie genres: comedy,
        romance, action, and horror. **\r
        \r
        **Note: ** Check out the flowchart
        below to see the logic we are trying to add. The current portions of the diagram
        that we are creating are <mark>highlighted in yellow</mark>.\r
        \r
        # Do This:\r
        \r
        *
        **Run the code** to understand what it does.\r
        \r
        * **Add `else-if` statements**
        to the `if` to check if the word the user typed matches **action, romance
        and horror**.  **Note:** Movie Bot will only understand input in the form
        of "comedy" not "Comedy" or "What is a comedy?" \r
        \r
        * **Add an `else`
        statement** to print a default answer for any other input.\r
        \r
        <img src="https://images.code.org/8ec655795042a2a3a22a85f0886f0d21-image-1446067226646.png"
        style="width: 100%">\r
        \r
        <a href="https://images.code.org/8ec655795042a2a3a22a85f0886f0d21-image-1446067226646.png"
        target="_blank">Open diagram in a new tab</a>\r
      U3L23 Chatbot Intro 1a_markdown_instruction: |-
        So far, the digital assisant
        doesn't do much. We'll need to start building up a conversation between
        the user and the digital assistant. Do the tasks for the next several levels
        inside the `generateResponse` function.\r
        \r
        <details>\r
        <summary>**Tips
        of the trade (click)**</summary>\r
        The event handler should only handle an
        event and the actions directly related to it. Everything that is involved
        in the running of the application (such as storing the user's input inside
        a variable), should be abstracted into a different function (i.e. `generateResponse`).
        If that function starts to get complicated, you should create a *helper function*
        to help abstract some of the complexity.\r
        </details>\r
        \r
        ### Instructions:\r
        The
        following instructions should be carried out within the `generateResponse`
        function\r
        \r
        * First store the user's input inside a variable (let's
        call it `userInput`).\r
        \r
        * Make sure the input is correctly stored - log
        the variable to the console\r
        \r
        <details>\r
        <summary>**Example**</summary>\r
        If
        I type "What is a function?" into the input box of my digital assistant,
        the following lines should be logged to the console.\r
        <br/><br/>\r
        &nbsp;&nbsp;&nbsp;text_input
        entered text: What is a function?<br/>\r
        &nbsp;&nbsp;&nbsp;generating response<br/>\r
        &nbsp;&nbsp;&nbsp;What
        is a function?\r
        </details>\r
        <br/>\r
        <details>\r
        <summary>**Hint**</summary>\r
        You
        may need the getText block.\r
        </details>\r
        \r
        <br/>\r
        The next level will
        deal with building the conversation variable
      U3L23 Chatbot Intro 2_markdown_instruction: |-
        Just like Siri and Cortana, you
        will want your digital assistant to display both the user's question as well
        as its own response. How can we build a question-answer conversation?\r
        \r
        ###
        Instructions\r
        \r
        * Use string concatenation to build up the conversation
        variable\r
        * The user's input should be stored as `User: <input>`\r
        * The
        assistant's answer should be stored as `<name>: <default response>`\r
        *
        Once these phrases have been added to the conversation variable, log the variable
        to the console\r
        \r
        <details>\r
        <summary>**Example**</summary>\r
        If the
        user asks "What color is the sky?" and my assistant's name is "Bot" and
        its default response is "I don't know.", the conversation variable should
        log<br/><br/>\r
        &nbsp;&nbsp;&nbsp;User: What color is the sky?Bot: I don't
        know.\r
        <br/><br/>\r
        </details>\r
        \r
        \r
        <details>\r
        <summary>**String
        concatenation review**</summary>\r
        <ul>\r
        <li>You can join two strings together
        by typing `var newString = str1 + str2;` if str1 and str2 are pre-existing
        variables.</li>\r
        <li>If you want to *append* a string to another string,
        you can type `existingString = existingString + "appended string";`</li>\r
        <li>To
        shorten things up, you can type `existingString += "appended string";`</li>\r
        </ul><br/>\r
        </details>\r
        \r
        \r
        <details>\r
        <summary>**Hint**</summary>\r
        The
        variables `NAME`, `conversation`, `DEFAULT_RESPONSE`, and `userInput` already
        exist\r
        </details>\r
        \r
        <br/>\r
        In the next level, we will look at printing
        the conversation onto the screen.
      U3L23 Chatbot Intro 2a_markdown_instruction: |-
        Now we need to control what gets
        displayed onto the screen.\r
        \r
        ### Instructions\r
        \r
        * Display the conversation
        onto the `text_area` element\r
        \r
        <details>\r
        <summary>**Hint**</summary>\r
        You
        may need the `setText` block\r
        </details>\r
        \r
        <br/>\r
        **Going Further**\r
        \r
        After
        the use types a prompt and hits "enter/return", the prompt should disappear
        from the `text_input` element; otherwise, the user will have to erase the
        input every time s/he types a prompt.\r
        \r
        * Add one block to the end of
        your event handler that will clear the `text_input`\r
        \r
        <br/>
      U3L23 Chatbot Intro 3_markdown_instruction: |-
        You have now displayed the user's
        input on the screen, but it is all scrunched together. In this level, we will
        add some nicer formatting by using the newline character.\r
        \r
        ### Instructions\r
        \r
        *
        Add newline characters: Your user's input and your chatbot's response should
        be on separate lines. The character `\n` will add a new line to your message.
        Your newline character needs to live between quotes! \r
        \r
        <table style="width:100%;
        margin-left:25px;">\r
        <tr>\r
        <td style="vertical-align: text-top; border-right:1px
        solid #000">\r
        \t**Example1:**<br/><br/>\r
            \r
            `write("Hi!\nuh
        huh");`<br/><br/>\r
            \r
            *will be displayed as...*<br/><br/>\r
            \r
            Hi!<br/>uh
        huh<br/><br/>\r
            \r
            *...on your screen.*\r
        </td>\r
        <td style="padding-left:20px;">\r
            **Example2:**<br/><br/>\r
            \r
            `var
        firstName = "Jessica";`<br/>\r
            \r
            `var lastName = "Programmer";`<br/>\r
            \r
            `write(firstName
        + "\n" + lastName);`<br/><br/>\r
            \r
            *will be displayed as...*<br/><br/>\r
            \r
            Jessica<br/>Programmer<br/><br/>\r
            \r
            *...on
        your screen.*\r
        </td>\r
        </tr>\r
        </table>
      U3L23 Chatbot Intro 4_markdown_instruction: |-
        Congrats! You've made a basic
        personal assistant!\r
        \r
        Use this level to continue to make your personal
        assistant look and work better. \r
        \r
        #### Some things you can do\r
        \r
        *
        Required: Add a comment before each of your functions describing what they
        do\r
        * Change the coloring of each object\r
        * Change the text color\r
        *
        Update the prompt and default response to seem more conversational\r
        \r
        In
        the next lesson, we will start to make your personal assistant smarter.
      U3L23 Chatbot Intro_markdown_instruction: |
        Time to make your own specialized
        digital assistant! We'll be working with this a lot, so make it personalized
        and fun!\r
        \r
        ### Instructions:\r
        \r
        * Choose a topic you want your digital
        assistant to specialize in. It should be something you are interested in and
        know a lot about. Examples: Country Music, Sushi, College Football, Comedy
        Movies\r
        \r
        * Create your digital assistant\r
        \r
        \t* Your digital assistant
        should read the user's input and display it back to them along with some
        default response.\r
            \r
            * Anyone should be able to easily distinguish
        between the text that the user typed and the response from the digital assistant.\r
      U3L23 Digital Assistant 1_markdown_instruction: |-
        To make a digital assistant,
        you'll need to start by reading and displaying the user's input.\r
        \r
        ###
        Instructions:\r
        \r
        * Get the user's input from the <samp>text_input</samp>
        element.\r
        * Set the <samp>text_area</samp> element to display the user's
        input.\r
        \r
        <details>\r
        <summary>**Example**</summary>\r
        ![](https://images.code.org/77d5e6fe9805bd012207db53ddc7c7d3-image-1439502867128.gif)\r
        </details>\r
        \r
        <details>\r
        <summary>**Hint**</summary>\r
        You
        may need to use the <samp>get_text</samp> and <samp>set_text</samp> blocks\r
        </details>
      U3L23 Digital Assistant 2_markdown_instruction: |
        Next, you need to add a response
        from the digital assistant. For now, just make the digital assistant say "I
        don't know."\r
        \r
        ### Instructions:\r
        \r
        * After each of the user's
        inputs, print the response "I don't know."\r
         * Both the input and the
        response should be visible in the <samp>text_area</samp>\r
        \r
        <details>\r
        <summary>**Example**</summary>\r
        ![](https://images.code.org/df27a7694d7fdb6b62085a9f1cd19088-image-1439503950645.gif)\r
        </details>\r
        \r
        <details>\r
        <summary>**Hint**</summary>\r
        Use
        string concatenation! i.e. var string = "Hello" + " World";\r
        </details>\r
      U3L23 Digital Assistant 3_markdown_instruction: |-
        It can get annoying to have
        to delete the input every time you type a prompt for the digital assistant.\r
        \r
        ###
        Instructions:\r
        \r
        * Every time the user's input is displayed in the <samp>text_area</samp>,
        clear the input from the <samp>text_input</samp>\r
        \r
        <details>\r
        <summary>**Example**</summary>\r
        ![](https://images.code.org/fdc3c64fec527ac9d96a01d90ce71389-image-1439504453388.gif)\r
        </details>\r
        \r
        <details>\r
        <summary>**Hint**</summary>\r
        Try
        setting the text to the empty string: "".\r
        </details>
      U3L23 Digital Assistant 4_markdown_instruction: |
        It makes more sense for the
        user's prompt and the digital assistant's response to be on different lines.
        You can use the newline character, <samp>"\n"</samp>, to split a line.\r
        \r
        ###
        Instructions:\r
        \r
        * Display the user's input and the digital assistant's
        response on different lines.\r
        \r
        <details>\r
        <summary>**Example**</summary>\r
        ![](https://images.code.org/f00e629f9a448c975b4c5c276a191a9d-image-1439504923043.gif)</details>\r
        <details>\r
        <summary>**Hint**</summary>\r
        <table
        style="width:100%; margin-left:25px;">\r
        <tr>\r
        <td style="vertical-align:
        text-top; border-right:1px solid #000">\r
        \t**Example1:**<br/><br/>\r
            \r
            <samp>console.log("Hi!\nuh
        huh");<br/><br/></samp>\r
            \r
            *will be displayed as...*<br/><br/>\r
            \r
            <samp>Hi!<br/>uh
        huh<br/><br/></samp>\r
            \r
            *...on your console.*\r
        </td>\r
        <td
        style="padding-left:20px;">\r
        <samp>**Example2:**<br/><br/>\r
            \r
            var
        firstName = "Jessica";<br/>\r
            \r
            var lastName = "Programmer";<br/>\r
            \r
            console.log(firstName
        + "\n" + lastName);<br/><br/></samp>\r
            \r
            *will be displayed
        as...*<br/><br/>\r
            \r
            <samp>Jessica<br/>Programmer<br/><br/></samp>\r
            \r
            *...on
        your console.*\r
        </td>\r
        </tr>\r
        </table>\r
        </details>\r
        \r
      U3L23 Digital Assistant 5_markdown_instruction: |
        It's a little difficult to
        tell which line is the user's command and which line is the digital assistant's
        response.\r
        \r
        ### Instructions:\r
        \r
        * Start the user's command with
        the phrase "User:"\r
        * Start the digital assistant's response with the
        phrase "Bot:"\r
        \r
        <details>\r
        <summary>**Example**</summary>\r
        ![](https://images.code.org/0ead464a371ef792a5b5acea88b416ae-image-1439506843163.gif)\r
        </details>\r
      U3L23 Digital Assistant 6_markdown_instruction: |
        Now we need to add a starting
        prompt so the user knows how the digital assistant works.\r
        \r
        ### Instructions:\r
        \r
        *
        When the user hits Run, display the text "I'm a generic digital assistant.
        Ask me anything!"\r
        \r
        <details>\r
        <summary>**Example**</summary>\r
        ![](https://images.code.org/255cb1cb52f04d9f8a2d2064ad599a1e-image-1439507318188.gif)\r
        </details>\r
        \r
      U3L23 Free Response Getting Started_markdown_instruction: "Siri is a digital\nassistant
        built into Apple's iOS devices, including iPhones and iPads. Watch\nthe advertisement
        for Siri, below. \n\n<iframe width=\"637px\" height=\"375px\"\nsrc=\"https://www.youtube.com/embed/8ciagGASro0\"
        frameborder=\"0\" allowfullscreen></iframe>\n\n<br/>\n__Reflect\non the prompts
        below:__ \n\n- What types of information does Siri respond\nto in the video?\n-
        What do you think Siri is paying attention to in order\nto create these answers?\n"
      U3L23 Free Response Wrap Up 2_markdown_instruction: |
        "Age Bot" is a personal
        assistant that gives information about age-related milestones in a person's
        life. Write an algorithm so Age Bot can answer the question "What is the
        voting age in the United States?"
      U3L23 Free Response Wrap Up_markdown_instruction: "Identify a global problem\nthat
        a NLP (Natural Language Processing) application could be used to help\nsolve.
        \n\n* Describe the problem.\n* Explain how you think a NLP app could\ncontribute
        to a solution.\n* Describe how the app would interact with the\nuser. \n*
        What would you name the app? \n\n"
      U3L24 Assessment 3_markdown_instruction: "\nHow do you prove that your digital\nassistant
        works the way you want it to work? You need to provide a series\nof test cases
        that will allow anyone to test your digital assistant and verify\nthat it
        works correctly. \n\n<strong>This is a required section for your digital\nassistant</strong>\n\nIn
        the space below, record all keywords and keyword\ncombinations that will cause
        your digital assistant to produce a unique output.\nUse the following format:\n\n<br/>\n<table
        style=\"width:100%;\">\n  <tr>\n    <th>Format</th>\n    <th>Example</th>\n\n
        \ </tr>\n<tr>\n<td style=\"vertical-align: text-top; border-right:1px solid\n#000;
        width:40%;\">\nSpecialty = &lt;digital assistant's specialty here><br/><br/>\n&lt;keyword>:\n&lt;output
        sentence here><br/><br/>\n&lt;keyword1 AND keyword2>: &lt;output\nsentence
        here><br/><br/>\n&lt;\"key word phrase 3\">: &lt;output sentence\nhere><br/><br/>\n&lt;keyword5
        OR keyword6>: &lt;output sentence here><br/><br/>\nDefault\nresponse: &lt;my
        default response here><br/><br/>\n</td>\n<td style=\"padding-left:20px;\">\nSpecialty\n=
        Revolutionary War<br/><br/>\nWashington: General George Washington was commander\nin
        chief of the Continental Army and became our first president.<br/><br/>\n\"Fourth\nof
        July\" OR \"4th of July\":  In July 1776, the Continental Congress officially\ndeclared
        independence from Britain.<br/><br/>\nsoldiers AND train: General\nFriedrich
        Wilhelm von Steuben trained many of the soldiers in the Continental\nArmy.<br/><br/>\nsoldiers
        AND hardship: Soldiers fought through cold weather,\npoor supplies, and diseases.<br/><br/>\nDefault
        response: I don't know much\nabout that. Try asking about George Washington
        or the soldiers.<br/><br/>\n</td>\n</tr>\n</table>\n\n<br/>\n\n*You\nwill
        be given several opportunities update this section as you add more features\nto
        your digital assistant.*\n\n<br/>\n\n"
      U3L24 Basic String Parsing 1_markdown_instruction: |-
        ## String Parsing\r
        \r
        Your
        personal assistant can now respond to many key words. Unfortunately, it doesn't
        understand any keyword if it is in the middle of a sentence. We can solve
        this problem by using the <samp>str.indexOf(searchValue)</samp> function.
        \r
        \r
        <samp>str.indexOf(searchValue)</samp> will return a non-negative number
        if the searchValue is somewhere in str. Otherwise, it will return -1. You
        can use this property to set the condition in an if statement.\r
        \r
        <details>\r
        <summary>**Example**
        </summary>\r
        <pre>`\tif (sentence.indexOf("word") >= 0) {\r
            \tsetText(textArea,
        "'word' is in the sentence!");\r
            }`</pre>\r
        </details>\r
        \r
        ###
        Instructions\r
        \r
        * Adjust the chained conditional to use <samp>indexOf()</samp>
        instead of <samp>str == "word"</samp>\r
        * The chef's assistant should
        respond to a sentence that contains the word pizza or the word soup
      U3L24 Chatbot Basic Conditionals_markdown_instruction: |
        # Digital Assistant
        Project\r
        \r
        **Your Digital Assistant Project is back!** Now that you've
        learned how to use conditional logic to control your program flow, it's time
        to add functionality to the digital assistant you previously designed.\r
        \r
        #
        Do This:\r
        \r
        * You should have already created a flowchart to design the
        logic for your digital assistant. \r
        * **Use your flowchart to program your
        digital assistant so that it "intelligently" responds to user input.**\r
        \t*
        Feel free to make changes to your existing project in Design Mode, if needed.\r
        *
        **Test your program thoroughly** to make sure your digital assistant responds
        to user input appropriately.\r
        * Once you're done, **submit your project!**\r
      U3L24 Chatbot Conditionals 2_markdown_instruction: |-
        ## If/else statement warm-up\r
        \r
        Now
        the Color Bot only responds to the input blue! This isn't really an improvement
        from the bot that always had a default response for anything. Luckily, we
        can add that default response back in by using an `else` statement.\r
        \r
        ###
        Instructions\r
        \r
        * Turn the `if` statement into an `if/else` statement
        to make the bot respond "I don't know that color." if the user types anything
        besides blue.
      U3L24 Chatbot Conditionals 3_markdown_instruction: |
        ## Chained Conditionals\r
        \r
        Now
        we have a bot that responds to anything and has a special response to the
        color blue. How can we add a special response for more colors? By using an
        `if`/`else if`/`else` statement (read "if" ... "else if" ... "else").
        By adding an `else if` statement, we create a chained conditional. \r
        \r
        <details>\r
        <summary>**Example**</summary>\r
        <pre>`\tif
        (yourResponse == myResponse) {\r
            \tsetText("text_area", "We agree!");\r
            }
        else if (yourResponse == mySecondResponse) {\r
            \tsetText("text_area",
        "We agree again!");\r
            } else {\r
            \tsetText("text_area", "We
        don't agree :(");\r
            }`</pre>\r
        </details> \r
        \r
        ### Instructions\r
        \r
        *
        Adjust the `if`/`else` statement to make an `if`/`else if`/`else` statement.\r
        *
        Chain multiple `else if` statements together to create unique responses for
        at least 5 different colors.\r
        \t* Your color bot must have a unique response
        for the colors blue, red, and green, and for two additional colors of your
        choice.\r
            \r
        <details>\r
        <summary>**Chaining Conditionals**</summary>\r
        We
        can chain as many `else if`'s together as we want. A chained conditional
        could look like `if`/`else if`/`else if`/.../`else if`/`else`. The chain always
        starts with an `if`, ends with and `else`, and has only `else if`'s in between.\r
        </details>\r
            \r
        <br/>\r
      U3L24 Chatbot Keyword Record_markdown_instruction: |-
        Now it's time to catch
        the bugs in your own digital assistant. Your code might be working correctly
        right now, but you have to be able to **prove** it. Use the next level to
        record the keywords/phrases that your digital assistant responds to. \r
        \r
        You
        will have many chances to add to this record over the next few days. Remember,
        you will not be able to earn full credit on the digital assistant project
        without a comprehensive record of your keywords.
      U3L24 Chatbot Nested Conditionals_markdown_instruction: |-
        Here's your digital
        assistant again! Time to make it a little smarter.\r
        \r
        ### Instructions\r
        \r
        *
        Add the `contains` function to your digital assistant\r
        * Add a nested conditional
        to your digital assistant so it can respond to at least two subtopics\r
        *
        Your nested conditional should include at least 3 `else if` statements.\r
        \r
        \r
        <details>\r
        <summary>**Example**</summary>\r
        <pre><code>if
        (contains(input, "subtopic_1")) {\r
        \tif (contains(input, "detail_A"))
        {\r
            \tsetText("text_area", "The input contains detail_A and subtopic_1");\r
            }
        else if (contains(input, "detail_B")) {\r
            \tsetText("text_area",
        "The input contains detail_B and subtopic_1");\r
            } else if (contains(input,
        "detail_C")) {\r
            \tsetText("text_area", "The input contains detail_c
        and subtopic_1");\r
            }\r
        } else if (contains(input, "subtopic_2"))
        {\r
        \tif (contains(input, "detail_Z")) {\r
            \tsetText("text_area",
        "The input contains detail_Z and subtopic_2"));\r
            } else if (contains(input,
        "detail_Y")) {\r
            \tsetText("text_area", "The input contains detail_Y
        and subtopic_2"));\r
            } else {\r
            \tsetText("text_area", "The
        input contains subtopic_2, but no details"));\r
            }\r
        } else {\r
        \tsetText("text_area",
        "The input doesn't contain any subtopics I know about");\r
        }</code></pre>\r
        </details>
      U3L24 Nested Conditionals 1_markdown_instruction: |-
        # Adding *includes* to the
        Movie Bot\r
        \r
        If our Movie Bot is asked a question like "What is a good
        comedy movie?" it currently won't know how to respond, **even though the
        question includes one of its keywords.** By using `includes` we can allow
        our Movie Bot to sense if a keyword appears anywhere in the question.\r
        \r
        #
        Do This:\r
        \r
        * **Suggestion: Switch to Text Mode.** This will be much easier
        in Text Mode.\r
        * **Change all your boolean expressions to use `includes`
        instead of `==`**.\r
        * **Test out a couple sentences with your keywords**
        to make sure the change worked.\r
        \r
        ![](https://images.code.org/0df459c4ccd9b613b23409af7ff5f59e-image-1446139233341.gif)\r
        \r
        **Note:
        ** Check out the flowchart below to see the logic we are trying to change.\r
        \r
        \r
        <img
        src="https://images.code.org/ea8340252f50774c352f58fa7cc12e5c-image-1446069734921.png"
        style="width: 100%">\r
        \r
        <a href="https://images.code.org/ea8340252f50774c352f58fa7cc12e5c-image-1446069734921.png"
        target="_blank">Open diagram in a new tab</a>
      U3L24 Nested Conditionals 2_markdown_instruction: |-
        # Nested Conditionals\r
        \r
        The
        way we left the Movie Bot in the last exercise is a little strange to see
        as a user. **Currently when the input doesn't have a question mark the Movie
        Bot says "I only respond to questions." but it still provides a recommendation**.
        We're going to alter our code so that the movie recommendation is only provided
        if the user asks a question.\r
        \r
        # Do This:\r
        \r
        * **Nest your movie
        genre `if` statements** inside the "?" `if` statement so that **a recommendation
        is made only if a question was asked**.\r
        * **Remove the "That's a good
        question."** output.\r
        * Ensure that **if your input is not a question**
        then the response is **I only respond to questions.**\r
        * **Test out a couple
        sentences with your keywords** to make sure the change worked.\r
        \r
        **Example
        Input --->** | **Output**\r
        ---|---\r
        What's the best action movie? | The
        best action movie is any James Bond movie.\r
        I love comedy | I only respond
        to questions.\r
        <br>\r
        **Note: ** Check out the flowchart below to see the
        logic we are trying to change.\r
        \r
        <img src="https://images.code.org/c319d7ba43112451a6b25aa9475cacb5-image-1446074593924.png"
        style="width: 100%">\r
        \r
        <a href="https://images.code.org/c319d7ba43112451a6b25aa9475cacb5-image-1446074593924.png"
        target="_blank">Open diagram in a new tab</a>
      U3L24 Nested Conditionals Bugs 2_markdown_instruction: "# Debugging: Order\nof
        Conditionals\\r\n\\r\nHere is a simplified Movie Bot with just some logic\nto
        detect when the user inputs \"action\" and the different rating types.\nThere
        is a problem though. I can't get some of the recommendations. Can you\nhelp?\\r\n\\r\n#
        Do This\\r\n\\r\n* **Try out the different combinations of \"action\"\nand
        the movie ratings (G, PG, PG-13, and R)**.  You'll see some recommendations\ncannot
        be reached.  Can you figure out why?\\r\n\\r\n* ** Fix the problem with\nthe
        code so that all the conditions can be reached**  "
      U3L24 Nested Conditionals Bugs 3_markdown_instruction: |-
        ## #3: Nested Conditional
        Remix\r
        \r
        We've updated "Synonym Bot" to "Word Bot." It now recognizes
        the subtopics "synonym" and "define"! Unfortunately, Word Bot doesn't
        work correctly just yet.\r
        \r
        ### Instructions\r
        \r
        * Use the "Activity
        Guide - Debugging Conditionals"\r
        * Expose the bugs that still exist in
        this program by typing inputs into the user-input box. \r
        * Track which inputs
        cause unexpected outputs.\r
        * Fix these bugs and prove that the program now
        works as expected.
      U3L24 Nested Conditionals Bugs_markdown_instruction: |-
        ## #1: Why use "else"
        at all?\r
        \r
        You may have noticed that you can simply use multiple `if`
        statements in a row and get the same functionality that you would get by using
        chained or nested conditionals. Why not just use `if` statements?\r
        \r
        <br/>\r
        The
        short answer is that `else if` and `else` make your life easier. \r
        \r
        ###
        Instructions\r
        We've removed all the chained and nested conditionals from
        this level. \r
        \r
        * Use the "Activity Guide - Debugging Conditionals"\r
        *
        Expose the bugs in this problem by typing inputs into the user-input box.
        \r
        * Track which inputs cause unexpected outputs.
      U3L24 introIncludes_markdown_instruction: |-
        # *includes*\r
        <img src="https://images.code.org/7373ad2ad98b0d815ce0b8196c2ec177-image-1446070324010.11.43
        PM.png" style="width: 250px; float:right">\r
        \r
        We're going to explore
        a new function called `includes`. This function can be used to check if one
        string appears anywhere inside of another. Just like `toUpperCase` and `toLowerCase`
        this function is called using **dot notation**.\r
        \r
        # *includes* Returns
        a Boolean\r
        **`includes` is a function that returns a boolean.** In other
        words, when the function runs it will **evaulate to either `true` or `false`**.
        This function can be used **anywhere you would normally use a boolean expression**.\r
        \r
        You've
        actually **seen a few functions that return a value before this**. `randomNumber`
        is a function that returns a number and `getText` is a function that returns
        a string. In every case we've used these functions **as if they were the
        data type they return (or evaulate to)**. Notice that in block mode these
        functions don't have the connectors that other commands do since they will
        be used as a piece of data within another function.\r
        \r
        # Do This:\r
        \r
        *
        **Read the documentation** for `includes`.\r
        * **Starter code** has been
        provided which shows one instance where a string does include a `searchValue`
        and one where it does not.\r
        * **Replicate the style** of these commands
        to check the rest of questions provided.\r
        * **Create three statements of
        your own using `includes`** making use of the `console.log` statements provided.\r
        *
        **Once you're comfortable with this command move on.**
      U3L25 - drag out key event_markdown_instruction: |-
        # *keypress*\r
        \r
        If we
        want to add keyboard input to our apps we'll need to learn about how key
        events work in App Lab. To start let's take a closer look at the `onEvent`
        block. We already know that event handlers call a function. What we'll see
        now is that they also **pass a parameter**. The default name for this parameter
        is simply `event` but you can change it to be anything you like. \r
        \r
        The
        `event` parameter is a more complex kind of variable (called an "Object")
        that we'll learn more about later. For now just know that for both mouse
        and keyboard events, the event parameter passes more information about the
        event. In the case of key events **you can find out the key(s) that were actually
        pressed by using `event.key`**.\r
        \r
        # Do This:\r
        \r
        * Drag out an `onEvent`
        block.\r
        * Change the ID to `screen1` and the event type to `keypress`.  \r
        \r
        <img
        src="https://images.code.org/537b5bbef3db62c90155528e6753a00a-image-1447175732347.gif"
        style="width: 450px">\r
        \r
        * Once you hit **Run**, **click on the screen
        so that the keystrokes will register**.\r
        * **Type different combinations
        of keys** and check out the results in the console. Does every key combination
        print to the console? Some keys to try:\r
            * Letter keys\r
            * Number
        keys\r
            * Shift key\r
            * Hold shift and letter\r
            * Delete key\r
            *
        Left and right arrow keys\r
            * Press and hold a key
      U3L25 - play sound when up key_markdown_instruction: |-
        # Play Sound With Keys\r
        \r
        You
        may have noticed from the last couple of levels that the value of `event.key`
        is just a string which is the name of the key. As a result we can check which
        key was pressed with a simple conditional statement.  For example to check
        for the press of the **"a"** key we could write `if (event.key == "a")`.\r
        \r
        #
        Do This:\r
        The **starter code provided** plays the sound whenever ANY key
        is pressed.\r
        \r
        * Use `console.log` to **find out the value of `event.key`
        when the up arrow is pressed.**\r
        \r
        * **Add an `if` statement** so the
        sound only plays when the when the **up arrow** is pressed.
      U3L25 Assessment_markdown_instruction: "Write a compound conditional/nested\nif
        statement to fit the situation:\n\nHenry and Milton flip a coin twice.\n\n\nIf
        the coin lands on the same side twice, Henry wins. \n\nIf the coin\nlands
        on different sides for each flip, Milton wins.\n"
      U3L25 Chatbot Strings_markdown_instruction: |-
        ## Adding String Manipulation\r
        \r
        Welcome
        back to your digital assistant! Update your digital assistant to use the things
        you have learned about string manipulation.\r
        \r
        ### Instructions\r
        \r
        **Required**:
        Adjust your digital assistant to read inputs the same way regardless of capitalization\r
        \r
        *
        Example: <samp>"input"</samp> should be evaluated the same way as <samp>"Input"</samp>,
        <samp>"INPUT"</samp>, and <samp>"inPUt"</samp>\r
            \r
        \t<details><summary>**Hint**</summary>You
        may need `str.toLower()`.</details>\r
        \r
        <br/>\r
        **Required**: If a user
        asks about a keyword that your digital assistant does not understand, make
        your digital assistant respond <samp>"I don't know what &lt;keyword> is."</samp>\r
        *
        &lt;keyword> in this case represents any keyword unknown to your digital assistant.\r
        *
        You may assume that the user will ask in the format <samp>"What is &lt;keyword>?"</samp>\r
        \r
        \t<details><summary>**Hint**</summary>Use
        `str.substring()`\r
        \t<details><summary>**Big Hint 1**</summary>The first
        input should be `"What is ".length`\r
        \t<details><summary>**Big Hint 2**</summary>The
        second input should be `str.length - 1`</details></details></details>
      U3L25 Free Response 1_markdown_instruction: |
        What is the output of this code
        segment?

        \tvar sentence = "This sentence contains five words?";
        \tvar
        spaceIndex = sentence.indexOf(" ");
        \tvar smallerSentence = sentence.substring(spaceIndex
        + 1, sentence.length);
        \tconsole.log(smallerSentence);

        <br/>
      U3L25 Free Response 2_markdown_instruction: |
        What is the output of this code
        segment?

            var str = "Hello World";
        \tvar worldIndex = str.indexOf("World");
        \tvar
        answer = str.substring(worldIndex, worldIndex + "World".length);
        \tconsole.log(answer);

        <br/>
      U3L25 Free Response 3_markdown_instruction: |
        What is the output of this code
        segment?

        \tvar phrase = "I am so";
        \tvar emotion = "excited";
        \tvar
        sentence = phrase + " " + emotion.toUpperCase() + "!";
        \tconsole.log(sentence);
        <br/>
      U3L25 Free Response Getting Started_markdown_instruction: |+
        Examine these three
        sentences.

        1. If you have the letter S in your name, please stand.

        2.
        If you play an instrument or sing in the choir, please put your head down
        on your desk.

        3. If the number of your home address is an even number please
        stand, otherwise please put your head down on your desk.

        Describe how they
        are logically different.


      U3L25 Free Response Wrap Up_markdown_instruction: |
        Give 2 reasons why Boolean
        statements are important in writing efficient programs.
      U3L25 String Parsing 1_markdown_instruction: |-
        ## Challenge 1\r
        \r
        Given the
        string <samp>"Wisdom begins with wonder."</samp> what is the index of the
        following characters <samp>W</samp>, <samp>t</samp>, <samp>w</samp>, <samp>.</samp>,
        <samp>d</samp>, and <samp>k</samp>? Confirm your expectation using the <samp>string.indexOf()</samp>
        function.
      U3L25 String Parsing 2_markdown_instruction: |
        ## Challenge 2.1\r
        \r
        Use <samp>str.length</samp>
        to find the length of the following strings:\r
        \r
        1. <samp>“Hello World”</samp>\r
        \r
        1.
        <samp>“Computer science rocks!"</samp>\r
        \r
        1. <samp>“I promise to do my
        homework every day.”</samp>\r
      U3L25 String Parsing 3_markdown_instruction: |-
        ## Challenge 2.2\r
        \r
        Write
        a password length checker that writes “yes” to the console if a string has
        a length greater than 10, or “no” if its length is less than or equal to 10.\r
        \r
        Test
        your function using two strings, one that will satisfy each conditional option.
      U3L25 String Parsing 4_markdown_instruction: |-
        ## Challenge 3\r
        \r
        You are
        given the string <samp>"Wisdom begins with wonder."</samp> Use the <samp>string.substring(begin,
        end)</samp> function to print "begin" and "nder" to the console.
      U3L25 String Parsing 5_markdown_instruction: |
        ## Challenge 3.1\r
        \r
        What
        if somebody changes the string from <samp>"Wisdom begins with wonder."</samp>
        to <samp>"Does wisdom begin with wonder?"</samp>? Even though "begin"
        and "nder" still exist in the string, the solution to the last level will
        no longer work. \r
        \r
        ### Instructions\r
        \r
        * Fill in the function, <samp>findBeginNder()</samp>
        to get the strings "begin" and "nder" from a sentence no matter where
        in the sentence they exist.\r
        * This function should print the strings *and*
        their index to the console. \r
        * Test the function on all of the sample inputs.\r
        \r
        <details>\r
        <summary>**Hint**</summary>\r
        You
        may need <samp>string.indexOf(substring)</samp> and <samp>substring.length</samp><br/>\r
        <details>\r
        <summary>**Big
        Hint**</summary>\r
        Try using <samp>string.indexOf("word")</samp> and <samp>(str.indexOf("word")
        + "word".length)</samp> as your inputs into <samp>string.substring()</samp>\r
        </details>\r
        <br/>\r
        </details>\r
        \r
      U3L25 String Parsing 6_markdown_instruction: |-
        ## Challenge 4\r
        \r
        Sometimes
        we want to reorder information in strings. Write a function that takes a name
        (first last) and reorders it (last, first).\r
        \r
        \tExample: “Ada Lovelace”
        -> “Lovelace, Ada”\r
        \r
        Your function should work for all the given sample
        inputs.\r
        \r
        <details>\r
        <summary>**Hint**</summary>\r
        Use substrings,
        length, index of, and your prior knowledge of concatenation.<br/>\r
        <details>\r
        <summary>**Big
        Hint**</summary>\r
        1. Grab the first name, store it in a variable<br/>\r
        2.
        Grab the last name, store it in a variable<br/>\r
        3. Concatenate the last
        name, a comma, and the first name (use the "+" operator)\r
        </details>\r
        </details>\r
        <br/>\r
        \r
        \r
        <br/>
      U3L25 String Parsing 7_markdown_instruction: |-
        ## Challenge 5: \r
        \r
        Other
        string functions include <samp>str.toUpperCase()</samp> and <samp>str.toLowerCase()</samp>.
        \r
        \r
        ### Instructions\r
        You are given the string <samp>var shakespeare
        = "The earth has music for those who listen";</samp>. \r
        * Use each of
        the above functions on the string <samp>shakespeare</samp>\r
        * Output the
        result to the console\r
        * Record the result on your activity guide
      U3L26 AND operator_markdown_instruction: |-
        # AND Operator in Movie Bot\r
        \r
        On
        the last level you may have noticed that if you typed in a question like "What
        is an R rated comedy movie?" It gives two movie suggestions! It would make
        more sense for it to give one suggestion.\r
        \r
        We could use nested `if`
        statements to do this by nesting `if` statements about ratings inside of `if`
        statements about genre. However, you might be getting a sinking feeling that
        this could become a lot of nested `if` statements very quickly! \r
        \r
        **Instead
        let's use the AND operator (`&&`) to check for a genre and a rating at the
        same time.** \r
        \r
        <img src="https://images.code.org/a9307ead3b147e0a8016f2054f47f5f2-image-1446153610104.png"
        style="width: 200px; float:right">\r
        \r
        Be careful about the order of
        the `if` statements. As a general principle you want to check the most specific
        conditions before checking more general ones.  For example, you want to have
        an `if` statement that checks for rating AND genre evaluated before one that
        just checks for genre on its own. Having a more general `if` statement checked
        first might cut off or prevent more specific conditions from being reached.\r
        \r
        You
        still want your app to give suggestions when just a rating or just a genre
        is detected, so keep this principle of ordering in mind. (Try them in the
        reverse order if you're interested in seeing what happens :))\r
        \r
        **Note:
        ** Check out the flowchart below to see the logic we are trying to add.\r
        \r
        #
        Do This:\r
        \r
        * **Try the question "What is an R rated comedy movie?**
        to see the result.\r
        \r
        * **Update the code to give only one movie suggestion
        when a genre and a rating are detected in the input.**\r
        \t* Make one set
        of `if`, `else-if`, and `else` statements about genre and rating\r
            *
        Add conditional statements to check for a comedy movie AND a rating. You could
        do this for all the genres but stick to one for now.\r
        \r
        * **Test out a
        couple sentences with your keywords** to make sure the change worked.\r
        \r
        <img
        src="https://images.code.org/e64c26fed584ddbb5e5a62e6800d5e69-image-1455816162662.png"
        style="width: 100%">\r
        \r
        <a href="https://images.code.org/e64c26fed584ddbb5e5a62e6800d5e69-image-1455816162662.png"
        target="_blank">Click to open in separate window.</a>
      U3L26 Chatbot Compound Conditionals_markdown_instruction: |-
        Here's your digital
        assistant again! Time to make it a little smarter.\r
        \r
        ### Instructions\r
        \r
        *
        Add a compound conditional to your digital assistant\r
        * Your digital assistant
        should include at least one each of AND, OR, and NOT\r
        * As you make updates
        in your digital assistant, record those changes on the next level\r
        \r
        Don't
        stay here too long. We still have lots to do!
      U3L26 Chatbot Final_markdown_instruction: |-
        Here's your digital assistant again!
        Time to make it a little smarter.\r
        \r
        ### Instructions\r
        \r
        * Add a compound
        conditional to your digital assistant\r
        * Your digital assistant should include
        at least one each of AND, OR, and NOT\r
        \r
        Don't stay here too long. We
        still have lots to do!
      U3L26 Compound Logic_markdown_instruction: |
        ## Multiple Operators\r
        \r
        The
        logical operators AND, OR, and NOT can be combined to make more complicated
        logic sentences. Generally, if you use more than one type of logical operator,
        you should put them between parentheses.\r
        \r
        <details>\r
        <summary>**Example**</summary>\r
        <pre>`var
        accurate = true, correct = true, inaccurate = false, incorrect = false;\r
        if
        (!(inaccurate || incorrect) && (accurate && correct)) {\r
        \tsetText("text_area",
        "It must be true!");\r
        } else {\r
        \tsetText("text_area", "Saddly, it's
        false.");\r
        }`</pre>\r
        </details>\r
        \r
        ### Instructions\r
        \r
        In the
        last level, we detected if a command contained the word "bad." That was
        helpful, but there are lots of other words for bad movies that we need to
        catch.\r
        \r
        * Write a function called isBad that detects the words "bad,"
        "worst," and "terrible."\r
        * If all these phrases are detected, make
        Movie Bot respond "The top grossing animated and G-rated film in the 2000
        decade was Finding Nemo."\r
      U3L26 Free Response Getting Started_markdown_instruction: "Think about interactions\nyou
        have experienced in conversations.\n\nHow do you know when someone you're\ntalking
        to is engaged in the conversation? \n\nWhat do they say that indicates\nthat
        they are paying attention?\n\n\n"
      U3L26 Free Response Wrap Up_markdown_instruction: |
        What is the output of this
        code segment?

        \tvar str = "Hello World";
        \tvar worldIndex = str.indexOf("World");
        \tconsole.log(worldIndex);

        <br/>
      U3L26 NOT operator_markdown_instruction: |
        ## NOT Operator\r
        \r
        The NOT operator
        can be used to reverse a boolean statement. If a statements true, the NOT
        operator will evaluate to false. If the statement is false, the NOT operator
        will evaluate to true. The NOT operator looks like "!" in JavaScript.\r
        \r
        <details>\r
        <summary>**Example**</summary>\r
        <pre>`if
        (!contains(sentence, "word1")) {\r
        \tsetText("text_area", "Word1 is
        not in the sentence!");\r
        } else {\r
        \tsetText("text_area", "Word1 is
        in the sentence!");\r
        }`</pre>\r
        </details>\r
        \r
        <details>\r
        <summary>**Where
        is the NOT block?**</summary>\r
        ![](https://images.code.org/85c2de713a94c930611c0fd6afeaf3d6-image-1438876242202.gif)\r
        </details>\r
        \r
        ###
        Instructions\r
        \r
        Movie Bot helps people find the most popular movies.\r
        \r
        *
        Write a conditional statement that detects if a command does not contain the
        phrase "bad"\r
        * If "bad" is not detected, make Movie Bot respond normally.
        Otherwise, make Movie Bot say "Sorry, I don't know about bad movies." \r
        \r
      U3L26 OR operator_markdown_instruction: |
        # OR Operator in Movie Bot\r
        \r
        Let's
        try to check for the keywords related to questions ("who", "what", "where",
        "when", "why", "how", and "?") to decide if the user asked a question.
        You could do this with a chain of `if-else-if` statements, but it would not
        be very efficient. \r
        \r
        Instead let's use a **series of OR operators (`||`)**
        to check whether "who", "what", "where", "when", "why", "how"
        or "?" show up in the user input. \r
        \r
        **Note: ** We've updated the
        the flowchart below to show the logic we are trying to add to the initial
        question.\r
        \r
        # Do This:\r
        \r
        * **Update the `if` statement** to check
        if **"who" OR "what" OR "where" OR "when" OR "why" OR "how" OR
        "?"** have been typed in by the user.\r
        \r
        * **Test out a couple sentences
        with your keywords** to make sure the change worked.\r
        \r
        <img src="https://images.code.org/6104c7fd0ecd31010d12be79bc350831-image-1446495141539.png"
        style="width=500px">\r
      U3L27 Assessment1_markdown_instruction: |
        Assess your digital assistant using
        the rubric.

        Discuss how you incrementally developed your program. What
        did you create first? What came next? What problems did you encounter and
        solve? (100 words max)
      U3L27 Assessment2_markdown_instruction: |+
        What was the most significant feedback
        you provided that helped other students review and revise their programs?
        (100 words max)

      U3L27 Assessment3_markdown_instruction: |
        What was the most significant feedback
        another student provided that helped you review and revise your program? (100
        words max)
      U3L27 Chatbot Final_markdown_instruction: |-
        Here's your digital assistant one
        last time.\r
        \r
        ### Instructions\r
        \r
        * Make your digital assistant awesome!\r
        *
        When you are finished, ask one of your classmates to test it for you using
        the activity guide.\r
        * Remember: as you add features to your digital assistant,
        track them on the next level
      U3L27 Free Response Getting Started_markdown_instruction: "Record the first\nstep
        in the Think-Pair-Share activity here. \n\nThink of three ways to use\nstrings
        within your chatbot to make it respond more ‘intelligently’ or expand\nits
        ‘personality.’\n\nRecord your ideas here and then share with another classmate.\n"
      U3L28 Free Response Getting Started_markdown_instruction: "A while loop is\na
        process that continues as long as some condition is true. \nWe experience\nmany
        of them every day in our normal activities. \n\nDescribe a real-world\nexample
        of a while loop that you personally experience in your daily life.\n\n\nWhat
        is the condition that causes the loop to continue?\n"
      U3L28 Free Response Wrap Up_markdown_instruction: "In your own words, describe\nhow
        a while loop works. \n\nExplain two things to pay attention to when creating\nwhile
        loops.  \n\nIn your response justify why the name \"while loop\" accurately\ndescribes
        the behavior of this new programming construct.\n"
      U3L29 Free Response Getting Started_markdown_instruction: |
        ***Think about gathering
        data from a coin flip game.*** In addition to the number of heads and tails,
        what other data might be interesting to gather?
      U3L29 Free Response Wrap Up_markdown_instruction: |
        ***Describe another game
        that depends upon random numbers.*** List three statistics that might be interesting
        to collect from 10,000 plays of that game?
      U3L2_Turtle3by3Grid_markdown_instruction: |
        # Do This: \r
        Draw a 3x3 grid to
        the *front* and *right* of the turtle as efficiently as possible. The turtle
        should end at its original location, facing its original direction.\r
        \r
        ![](https://images.code.org/c15fee1f27c817a352a521c7ddcb5006-image-1436282127747.png)\r
        \r
        **HINT:**
        This problem presents some subtle challenges. Work with your partner to discuss
        possible solutions. Try more than one path. Testing your ideas on paper might
        be a faster way to brainstorm.\r
        \r
      U3L2_TurtleSquare_right_markdown_instruction: |
        <img src="https://images.code.org/ad48e7224312a6c41f4fc5727af53cc0-image-1436287265071.png"
        align=right> \r
        # Do This:\r
        This time, draw a 1 x 1 square to the *front
        and right* of the turtle as efficiently as possible.  Notice that there is
        no command to turn right! You need to figure out how to draw this by only
        turning left and moving forward.  The program should stop with turtle in its
        original position, facing its original direction.\r
        \r
        When you're done
        click the Finish button to move onto the next problem.\r
        \r
      U3L30 Free Response Getting Started_markdown_instruction: "Why do you think\nhuman
        beings create lists? \n\nWhat types of lists have you created? \n\nHow\ndo
        you use lists?\n"
      U3L30 Free Response Wrap Up_markdown_instruction: "Complete the following sentence:\n\nToday\nI
        learned three things about coding arrays __________, ____________, and __________.\n\n
        \nBut the most important thing I learned about planning an arrays is _____________________.\n"
      U3L31 Assessment1_markdown_instruction: "Assess your photo album project with\nthe
        rubric. Then answer the following questions.\n\nDiscuss how you incrementally\ndeveloped
        your program. (100 words max)\n\n* What did you create first? \n*\nWhat came
        next? \n* What problems did you encounter and solve?\n"
      U3L31 Assessment2_markdown_instruction: |
        Describe how the feedback you gave
        to another student was helpful.(100 words max)

        * What was the most significant
        feedback you provided that helped a peer review, revise and improve the program?

        * How did your suggestions contribute to the improvement?
      U3L31 Assessment3_markdown_instruction: |
        What was the most significant feedback
        another student provided to your project that helped you review, revise, and
        improve your program? (100 words max)
      U3L31 Free Response Getting Started_markdown_instruction: |
        List three reasons
        why you think that electronic photo albums are so popular.
      U3L32 Free Response Getting Started_markdown_instruction: |
        Did you ever own
        a "lite-brite" toy as a child? Describe how an image is created with this
        toy. What would you have to do to change everything that is red to blue?
      U3L33 Free Response Getting Started_markdown_instruction: |+
        Describe the visual
        impact of each of the following effects. What do you have to do to the image
        to create the desired effect?

        * Make an image "warmer"
        * Make an image
        "cooler"
        * Make an image "brighter"
        * Make an image "darker"
        * Make
        an image "gray scale"


      U3L34 Free Response Getting Started_markdown_instruction: |
        Have you ever seen
        hidden-image stereograms...an image hidden within what appears to be a colorful
        geometric pattern? See an example <a href="http://www.vision3d.com/sghidden.html"
        target="_blank"> here.

        </a>How do you think stereograms are created?
      U4 - Add Row By Hand_markdown_instruction: |
        # Add a Record by Hand\r
        \r
        You
        can also add new records in the data table itself by clicking the "Add row"
        button.\r
        \r
        # Do This:\r
         * Go to the "mySongs" data table.\r
         * Click
        the "Add row" button. <img src="https://images.code.org/403521f908a9055f4597f649deb3cfab-image-1449260729474.png"
        style="width: 70px">\r
         * Enter the information for a song of your choosing.\r

        \t* If you can't think of a song use: **Don't Stop Believin'** by *Journey*.  It's
        250 seconds long.\r
         * Once you've added a record in the data table come
        back here and continue to the next level.\r
        \r
      U4 - Charts - Export Data_markdown_instruction: |
        # Exporting Data\r
        \r
        In
        the last level, you saw that **remixing a project doesn’t copy over the data**
        from the original project’s database. But what happens if you want to keep
        that data and use it in your remixed app? To do that, you need to **export
        the data** from your original app.\r
        \r
        **Exporting data is the opposite
        process of importing data.** Remember that when you imported data, you provided
        App Lab with a CSV file of the records you wanted to add to your database.
        Inversely, when you export data, **App Lab will collect all the records that
        are already in your database and put them in a CSV file** which then downloads
        to your computer.\r
        \r
        Once you have the CSV file, you can import it into
        your new project using the method you learned previously.\r
        \r
        # Do This:\r
        \r
        *
        **Open the data viewer** for the “ages” table.\r
        * **Click the “Export” button**
        above the table. This will download the data from your table as a CSV file.\r
        \r
        <img
        src="https://images.code.org/a613c249b75af817ed2468b97ee06b1f-image-1450391880690.27.00.png"
        style="display:block; margin-left:auto; margin-right: auto;">\r
        \r
        * **Remix
        the app** again, and then **import the CSV file** you just downloaded.\r
        *
        Run the app and **verify that the data was successfully loaded** into your
        table. Then **come back here.**\r
        \r
      U4 - Charts - Import Data - 1_markdown_instruction: |-
        We can import data\r
        \r
        Given
        a csv file, have students import it and then go look at in the data viewer
      U4 - Charts - Import Data 1_markdown_instruction: |-
        # Importing Data\r
        \r
        You
        already know how to individually add new records to the tables in your database
        by using the `createRecord` command or by individually adding rows in the
        App Lab data viewer. But **adding new records one by one can quickly become
        tedious** if you want to create several new records.\r
        \r
        Luckily, the data
        viewer allows you to **import data** that you’ve already collected in a **CSV
        file**.\r
        \r
        <details>\r
        <summary>What’s a CSV file? [click to expand]</summary>\r
        \r
        A
        CSV file is a comma-separated values file, which is a plain ASCII text file
        that stores information from a table. Each row in the CSV file corresponds
        to a row in a table of data. The cells in each row are stored as text fields
        separated by commas (hence the name). Because it’s a plain ASCII text document,
        CSV files are a universally-used format for sharing data. Almost all tools
        and programs for working with data - for example, Excel or Google Sheets -
        will allow you to import and export data tables as CSV files.\r
        </details>\r
        <br>\r
        \r
        For
        each row in your CSV file, App Lab will create a new record and populate it
        with the information from that row.\r
        \r
        **Note:** Make sure that **the
        first row in your CSV file lists the names for each column in your table**.
        When you import your file, App Lab will use this row to automatically name
        the columns in your table.\r
        \r
        # Do This:\r
        \r
        We’ve provided you with
        a CSV file of some sample data <a href="https://docs.google.com/spreadsheets/d/1SkbOS1SNbDpRVouU20it_QlOAF_ndtTPGqgQ6smHXJo/edit?usp=sharing"
        target="_blank">here</a>.\r
        \r
        * **Download the file to your computer.**
        Make sure you remember where you saved it!\r
        * Open the data viewer and **view
        the data for the table named “mytable.”**\r
        * Click the **“Import”** button,
        then click the **“Choose File”** button that appears.\r
        * **Select the correct
        file** from your directory, then click the **“Overwrite & Import”** button.\r
        \t*
        **Note:** When you press this button, any data that you currently have in
        your table will be deleted and overwritten! Make sure you really want to overwrite
        your existing data.\r
        * When your page reloads, **your table should be populated
        with the data from the CSV file!**\r
        \r
        The animation below shows how to
        import a CSV file using the data viewer:\r
        \r
        ![](https://images.code.org/db9523cebd1512bee55037e4774822a0-image-1450231058543.gif)
      U4 - Charts - Import Data 2_markdown_instruction: |-
        # Using Imported Data\r
        Once
        you’ve imported a CSV file, **you can use the data in your app using the data
        commands you already learned.**\r
        \r
        # Do This:\r
        \r
        * Practice using
        your newly-imported data by **calling `readRecords` on “mytable."**\r
        *
        In the callback function for `readRecords`, **print each record to the console.**
      U4 - Charts - Line Chart 1_markdown_instruction: |
        You’ve seen a few examples
        of scatter charts already, but **there are other chart types that may be better-suited
        to create a visualization** from your data set. In the next few levels, you
        will learn about one of these chart types: the **line chart.**\r
        \r
        # Line
        Charts\r
        \r
        Your database has been populated with records about the **popularity
        of different hashtags** over time. In this level, you will use this data to
        **create a line chart that shows how the popularity of “#tbt” has changed
        over time.**\r
        \r
        # Do This:\r
        \r
        * **Open the data viewer** and look
        at the data you’ve been provided.\r
        * **Add a chart UI element** to your
        app.\r
        * Use the `drawChartFromRecords` block to create a line chart.\r
        \t*
        **Make sure `chartID` matches** the ID of your UI chart.\r
        \t* **Change `chartType`**
        to “line.”\r
        \t* **Change `tableName`** to match the name of the table in
        your database.\r
        \t* **Fill in the `columns` array.** For this chart, you’ll
        want the **months since January 2012 on your x-axis** and the **#tbt popularity
        on your y-axis.**\r
        * **Run the app** and see the results.\r
        \t* Now that
        your chart has meaningful labels, **what conclusions can you draw about the
        data set?** What trends do you notice in the popularity of #tbt over time?
        When was the hashtag most popular? Least popular? How might this information
        be utilized by people who use hashtags to publicize their posts?\r
      U4 - Charts - Line Chart 2_markdown_instruction: |
        In the last level, you may
        have noticed that **the “hashtags” table also has a column of information
        about a second hashtag, “#nofilter”.** Ideally, it would be helpful if your
        chart could show lines for **both** hashtags, so you could **compare the relationship**
        between the two.\r
        \r
        # Plotting Additional Columns\r
        \r
        Fortunately,
        the `columns` parameter allows you to add additional elements to the array.
        You already learned that the first element in `columns` specifies which table
        column to use for the x-axis of your chart. It turns out that ***each additional
        element* will be plotted as a separate line on the y-axis.** This means that,
        if there are three elements total in `columns`, then there will be *two* separate
        lines plotted on your line chart.\r
        \r
        Let’s try an example of this now.
        \r
        \r
        # Do This:\r
        \r
        * Your code with the line chart from the previous
        level has been provided.\r
        * **Add a third element to the `columns` array**,
        to display another line that shows the change in popularity of #nofilter over
        time. Your code should look something like this (click image to enlarge):\r
        \r
        <a
        href="https://images.code.org/e3239e1f87fc0283ffef918fbbf7aef8-image-1450401624351.20.07.png"
        target="_blank">![](https://images.code.org/e3239e1f87fc0283ffef918fbbf7aef8-image-1450401624351.20.07.png)</a>\r
        \r
        *
        **Run the app** and see the results.\r
        \t* What relationships do you notice
        between the two lines? What conclusions can you draw from this? Which hashtag
        would you want to use if you were trying to publicize your post to the most
        people?\r
        \r
      U4 - Charts - Remixing Apps with Data_markdown_instruction: |
        # Remixing Apps
        That Use Data\r
        \r
        Let’s say you want to **remix** a classmate’s app to
        add some cool new features. You can do this by clicking the “Remix” button
        at the top of your screen.\r
        \r
        <img src="https://images.code.org/71f299efc9b95ab85471f6a66450af26-image-1450299352596.55.40.png">\r
        \r
        **Clicking
        the “Remix” button creates your own copy of the app**, so that you can make
        changes and add things without affecting the original app. Remixing an app
        copies over all the **code** and **design elements** of the original app,
        but what happens to the **data**?\r
        \r
        # Do This:\r
        * **Run this app**
        and see what it prints to the console. Open the data viewer and **see what
        records are stored**.\r
        * **Remix the app** by clicking the “Remix” button
        at the top of your screen.\r
        \t* **Note:** This will take you out of this
        stage and bring you to a more free-form version of App Lab.\r
        * Go **run
        the remixed version** of the app. See what it prints to the console, look
        around in the data viewer, and then **come back here**. We’ll talk about what
        happened in the next level.\r
        \r
      U4 - Charts - Scatter Chart_markdown_instruction: |
        **Congratulations**, you
        made a chart in your app!<br>\r
        \r
        <details><summary><strong>What does it
        all mean?</strong> (Click to expand)</summary><br>\r
        \r
        Although the chart
        you created is pretty, you may have noticed that it’s still difficult to really
        understand what the data set represents, since neither the table nor the columns
        have descriptive and meaningful names.<br>\r
        \r
        In this level, your database
        has been updated so that the **table and column names are more meaningful**.
        Now when you look at the data viewer, you can see that the table actually
        represents **Rotten Tomatoes movie ratings**, and the columns represent the
        **Tomatometer and Audience ratings**. You’re going to have to make some slight
        changes to incorporate these new names, but first you’ll need to learn about
        a few more parameters in the `drawChartFromRecords` block.\r
        </details><br>\r
        \r
        #
        *drawChartFromRecords* Parameters\r
        \r
        You may have noticed in the last
        level that the `drawChartFromRecords` block has a number of different parameters.
        You already used the first two parameters, `chartID` and `chartType`, in the
        last level. In this level, you will learn how to use the next two parameters:
        `tableName` and `columns`.\r
        \r
        ![](https://images.code.org/72fe5a628ad5f4d78489863f6e1db251-image-1450395111592.png)\r
        \r
        \r
        The
        `tableName` parameter lets you specify **which table** from your database
        you want to use to make your chart. This parameter becomes especially important
        if you have more than one table in your database.\r
        \r
        <img src="https://images.code.org/0844592b1473862203c0aeef01d2e83a-image-1450395192097.gif"
        style="width: 200px; float: right">\r
        The `columns` parameter lets you
        specify **which columns** from your table to use when making your chart. `columns`
        is actually an **array of strings**, and **each string specifies the name
        of a column** to be used in your chart. In most cases, the **first element**
        in `columns` will represent which table column you want to use as the **x-axis**
        for your chart. For your scatter chart, the **second element** in `columns`
        will represent which table column you want to plot on the **y-axis**.\r
        \r
        #
        Do This:\r
        \r
        * **Open the data viewer** and look at the data you’ve been
        provided.\r
        * **Add a chart UI element** to your app.\r
        * Use the `drawChartFromRecords`
        block to **create a scatter plot.**\r
        \t* **Make sure `chartID` matches**
        the ID of your UI chart.\r
        \t* **Change `chartType`** to “scatter.”\r
        \t*
        **Change `tableName`** to match the name of the table in your database. Check
        the data viewer if you need to be reminded what your table is named.\r
        \t*
        **Fill in the `columns` array.** For this chart, you’ll want the **Tomatometer
        rating on your x-axis** and the **Audience rating on your y-axis.**\r
        * **Run
        the app** and see the results.\r
        \t* Now that your chart has meaningful labels,
        **what conclusions can you draw about the data set?** What relationships do
        you see between the Tomatometer rating and the Audience rating?\r
        \r
        \r
      U4 - Charts - drawChartFromRecords 1_markdown_instruction: |-
        # Visualizing Data\r
        \r
        So
        far, you’ve been able to visualize the data you collected by using `readRecords`
        and **printing out your table to the console**. But you may have found that
        **it’s hard to draw meaningful conclusions from your data** by looking at
        a long list of text.\r
        \r
        Another way that people visualize data is by **creating
        graphs or charts**. When you plot information on a chart, you can more easily
        see patterns and trends in your data, which allows you to **understand and
        draw conclusions from your data**. In App Lab, the block that lets you chart
        data is `drawChartFromRecords`.\r
        \r
        ![](https://images.code.org/d03c13264c127088e6b505a30c83fde2-image-1450388738029.18.40.png)\r
        \r
        #
        *drawChartFromRecords*\r
        \r
        In the next several levels, you will learn how
        to use a new block called `drawChartFromRecords`. This block allows you to
        **construct charts from records in your database** to create your own data
        visualizations.\r
        \r
        # Do This:\r
        \r
        * **Open the data viewer** and see
        what records are stored in “mytable.”\r
        * In Design Mode, drag a **chart**
        from the toolbox into your app.\r
        \t* Make sure you give your chart a **meaningful
        and descriptive ID**!\r
        \r
        ![](https://images.code.org/419d63a96da5eac9989fa0cb62f0c6f3-image-1450468649142.gif)\r
        \r
        *
        **Drag out the `drawChartFromRecords` block.** It has some default code provided.\r
        *
        **Change the ID** in the `drawChartFromRecords` block to match the ID of the
        chart UI element you created. **Change the chart type** from “bar” to “scatter.”\r
        \r
        ![](https://images.code.org/3d6d79a716afb9a25e81269974615b98-image-1450389317947.gif)\r
        \r
        *
        **Run the program** and see the results.\r
        \t* **Note:** After you hit “Run,”
        it might take a moment for your chart to load the data from the database.
      U4 - Charts - drawChartFromRecords Options 1_markdown_instruction: |
        # Customizing
        Your Charts\r
        \r
        You now have a chart that allows you to **see relationships
        and trends in your data!**\r
        \r
        You may find that you want **greater control
        over the appearance of your chart**. Luckily, `drawChartFromRecords` block
        actually has another parameter that lets you customize different components
        of your chart! Let’s take advantage of that ability now to manipulate some
        components of your chart.\r
        \r
        # The *options* Object\r
        \r
        If you look
        at the `drawChartFromRecords` block, you will see that **there is an additional
        parameter after the `columns` array, called `options`**. This parameter is
        actually an object whose properties correspond to different parts of your
        chart. There are many different properties that you can set for your chart,
        but for this level you’ll only be working with the `title` and `colors` properties.\r
        \r
        #
        Do This:\r
        \r
        * At the beginning of your program, **create a new object
        called `options`.**\r
        * By default, your chart is not labeled with a title,
        but a descriptive title will help others understand your chart more clearly.\r
          *
        **Set the `title` property** to “Popularity of Hashtags Over Time.”\r
        * **Change
        the colors of the lines for each hashtag** by setting the `colors` property.
        `colors` expects an array of strings, where each string is a color name like
        “purple” or “yellow”.\r
        \t* **Note:** When you set `colors`, make sure the
        **number of elements in the array matches the number of columns you’re plotting.**
        For example, if you’re plotting two lines, you’ll need to make sure `colors`
        has two strings - one color for each line.\r
        * **Add your `options` object
        as an additional parameter to `drawChartFromRecords`.** Your code should now
        look something like this (click image to enlarge):<br><a href="https://images.code.org/42fdbac98871d9ebcfca3501a1ae092b-image-1457061566573.6.png"
        target="_blank">![](https://images.code.org/42fdbac98871d9ebcfca3501a1ae092b-image-1457061566573.6.png)</a>\r
        *
        Run the app and verify that your title appears above the chart and that your
        lines have new colors.\r
      U4 - Charts - drawChartFromRecords Options 2_markdown_instruction: |-
        There are
        still **several other chart properties that you can manipulate** using the
        `options` parameter of `drawChartFromRecords`. You can use these properties
        to change the colors in your chart, hide the legend, and much more! **Remember,
        when customizing your chart, it’s less about making a pretty chart and more
        about manipulating your data so that it’s easier for others to read and understand.**\r
        \r
        #
        Do This:\r
        \r
        * **Open the API** for the `drawChartFromRecords` block.\r
        *
        Read through and **pick some of the other interesting options properties to
        customize** for your chart.
      U4 - Charts - drawChartsFromRecords 1_markdown_instruction: |
        Instead of using
        the table to read out the entire table, let's visualize it by using a chart.
        Here's a new block called drawChartsFromRecords [insert image]. We're going
        to use this new block to create a scatter plot [how do they choose those options?]\r
        \r
        LOADING
        DATA: (just use default table name, column names, so all they have to do is
        drag and drop the block, w/o messing with the parameters)\r
        \r
        # Do This:\r
        \r
        Add
        a screen element for charts\r
        \r
        Pull out the drawCharts block\r
        \r
        Make
        the ID match the ID they gave the screen element\r
        \r
        Run the program to
        see what happens!\r
      U4 - CreateRecord - 1_markdown_instruction: |-
        # Permanent Data Storage\r
        \r
        Up
        to now, all the data created in our app disappears or gets lost each time
        we re-run the app.  You were probably frustrated, for example, that a new
        contact added by the user didn't save permanently to the list.  We can change
        that!\r
        \r
        # App Lab's Data Tools\r
        <img src="https://images.code.org/5d596107387e3edcb35aa3d317b0e9f5-image-1448992686641.46.54
        PM.png" style="width: 100px; float: right"> App Lab has a set of commands
        for storing data permanently in a database! You can write code to save data
        and then retrieve it later, even if the app has been stopped and re-started.
        All together we call this set of commands **App Lab's Data Tools**, and they
        have their own toolbox category called "Data".\r
        \r
        "What's a database?
        Where is it? How do I use it?" It's easier to show you these things than
        explain it all at once.  So let's get started, and we'll explain everything
        you need to know along the way.\r
        \r
        # Do This:\r
        \r
        * **Drag out the
        `createRecord` command**. It has some default code provided.\r
        * **Run the
        program**. After a brief pause, you should see the message in the console:
        **"Success! Created record."**\r
        * **What happened? What was created? Where
        is it?** After you've seen the "success" message, click finish to move
        to the next level.  We'll explain there.\r
        \r
        ![](https://images.code.org/fa1c0d6f399ba181d4179838205b93e3-image-1449164742176.gif)
      U4 - CreateRecord - 2.5_markdown_instruction: |-
        # Databases and Tables\r
        \r
        A
        **database** is an organized collection of data that you access and modify.  \r
        A
        **table** is one collection of data in a database made up of rows and columns.\r
        \r
        <img
        src="https://images.code.org/7d5b39f1e9d718ae8274ecf2f12941de-image-1449503932339.58.24
        AM.png" style="block:left; width: 300px">\r
        \r
        A table is very similar
        to a spreadsheet (like the one show above) in which individual pieces of information
        can be referenced by a row and column. **A database in App Lab is just a collection
        of many tables**. Using App Lab's data commands you can add to and modify
        the tables in your database.\r
        \r
        The **first parameter** of `createRecord`
        specifies the name of the table you want to add a record to.\r
        \r
         * If
        you give a table name that **already exists** - App Lab will **add the data
        to that table**.\r
         * If you give a table name that **does not exist** -
        App Lab will **create a new table** with that name and add data to it.\r

        \r
        You can see this in your own app by changing the name of the table in
        your createRecord command.\r
        \r
        # Do This:\r
        <img src="https://images.code.org/a8aff3906ed413464f6f224a163f7325-image-1449176473237.gif"
        style="float: right; width: 300px">\r
        \r
        **Your code from the previous
        excercise** is provided.\r
        \r
        * **Change the name of "mytable"** to something
        else.\r
        * **Run the app.**\r
        * **Check the Data Viewer** to see the new
        table has been added to your database.\r
        * **Note:** If the Data Viewer was
        already open you will need to refresh the page to see the changes.
      U4 - CreateRecord - 2_markdown_instruction: |-
        # Data Viewer\r
        \r
        **Where did
        that data go?** App Lab's database is "remote" which means the data is
        stored separately from the app code on a server. A common term for this is
        "cloud storage".\r
        \r
        To see the data you have to use the **Data Viewer**.
        You may have noticed a button right above the app display that looks like
        this. <img src="https://images.code.org/a816694aad344a14dd44fb14b26a5c64-image-1497459608411.50.42
        PM.png" style="width: 80px">\r
         \r
        * Click **View Data** to see all of
        the "tables" in your database (We'll explain what a table is later).\r
        *
        You should see one table called **mytable**.  \r
        * Click **view** to see
        all of the data stored in that table.\r
        * **Notice** that an **id number
        was automatically generated** for every row in the table.\r
        ![](https://images.code.org/48994996542a35a3473a14d2f99d45e2-image-1449168371760.gif)\r

        \r
        # Do This:\r
        <img src="https://images.code.org/dffe4d9d3b8541189242aa95913ecfee-image-1449168144127.gif"
        style="width: 300px; float: right">\r
        \r
        * In the code, **change "Alice"
        to a different name** in the call to `createRecord`.\r
        * **Run the app**
        a few times by repeatedly clicking "Run" and "Reset."\r
        * **Check the
        Data Viewer** to make sure it worked! \r
        * **Note:** If you already had the
        Data Viewer open you will need to **refresh the page** to see the changes.
      U4 - CreateRecord - 3_markdown_instruction: |-
        # Records are Objects\r
        \r
        **What's
        a record?**\r
        In database terminology, each item that is stored in table
        is called a **record**.  This is why the command is called `createRecord`.
        In App Lab, a **record is an object**, and a data table is essentially a collection
        of JavaScript objects stored in the cloud.\r
        \r
        **The second parameter**
        of `createRecord` is the object you are storing in the database.\r
        \r
        *
        As you have seen you can specify the object using notation like this: `{name:"Alice"}`\r
        *
        But you can **also provide an object variable** and the whole object will
        be stored.\r
        * App Lab **creates a column for each property of the object.**\r
        \r
        #
        Do This:\r
        \r
        **Starter code is provided** that creates a simple JavaScript
        object representing a song.\r
        \r
        * Drag out the `createRecord` command.  \r
        *
        **Set the table name** (the first parameter) to something descriptive like
        "mySongs".\r
        * **Set the second parameter** to the name of the object you
        want to store, in this case `song`.\r
        * **Run the program.**\r
        * In the
        Data Viewer **verify that a new table was created and that the `song` object
        was added as a record**.\r
        \r
        ![](https://images.code.org/d587a1bc977f54d132acafa63764d813-image-1449241390939.gif)
      U4 - CreateRecord - 4_markdown_instruction: |
        # Messing Around with Data\r
        \r
        **The
        third parameter** of `createRecord` is a callback function.  **What does it
        do?**\r
        \r
        ![](https://images.code.org/9a89cca8257b7dc807a1637efe121442-image-1449245629915.png)\r
        \r
        *
        Data commands **must be sent across the Internet to a remote server**.\r
        *
        The database follows a **protocol** in which it **responds to every data command
        with a message**. This message might be a piece of data you requested, or
        it could be an error message.\r
        * You might need to use the contents of this
        response in your program, but because of **delays caused by sending information
        back and forth across the Internet** you don't know when you will receive
        it.\r
        * Therefore, you create a **callback function that will be called by
        the system when the response comes back** (in other words when the database
        "calls back"). The parameter of the **callback function** contains the data
        being sent back.\r
        \r
        For `createRecord` the database **responds by sending
        back a copy of the object that was stored**. The `record` parameter of the
        callback function contains that object.\r
        \r
        **Analogy**: When you made
        an event handler using `onEvent`, you also specified a callback function.  That
        function got called **when the user triggered the specific event you were
        watching for**.  The callback function of a database command like `createRecord`
        gets triggered **when the database sends a message back**.  \r
         \r
        # Do
        This:\r
        \r
        **Starter code is provided** that adds a song object to the database.\r
        \r
        *
        **Run the program.**\r
        * **Look at the Data Viewer** to verify that the object
        you just stored is actually in the database (along with a few extra songs
        we added to start you out).\r
        * **Notice:** The callback function now displays
        the copy of the record that was returned by the database.\r
        \r
      U4 - CreateRecord - 5_markdown_instruction: |-
        # What Happens When You Change
        the Object?\r
        \r
        Let's experiment by adding a property to the object and
        storing it again.\r
        \r
        # Do This:\r
        \r
        * **Add a property** to the song
        object: `song.artist = "Beyonce"`. It should now have 3 properties: title,
        seconds, and artist.\r
        * **Run the program** so that your updated object
        is added to the database. You shouldn't need to change anything about the
        call to `createRecord`.\r
        * In the Data Viewer, **confirm the new record
        was added to the table**. You'll learn more about the changes you see in
        the next exercise.
      U4 - Edit Data Table by Hand_markdown_instruction: |-
        # Editing the Data Table
        by Hand\r
        \r
        In the previous level, you noticed that **a new column was
        added to the table** when you added an object that had a new property called
        "artist". This property is empty for the other objects in the table, since
        they were created without it.\r
        \r
        ![](https://images.code.org/c9bdf5a4b44f5824d083376b011b43e2-image-1449249071321.png)\r
        \r
        \r
        #
        Do This:\r
        \r
        **Your code from the previous exercise** is provided.\r
        \r
        *
        Go to the "mySongs" data table.\r
        * Click the **Edit** button next to each
        row and add the artist for each song already in the database.  \r
        * For reference:\r
        \t*
        Thriller - Michael Jackson\r
            * Wonderwall - Oasis\r
            * I Will Survive
        - Gloria Gaynor\r
        * Since you re-added "Single Ladies" you can **Delete**
        the earlier, incomplete one.\r
        * Move on where your database has **4 songs,
        each with a title, seconds, and artist**.
      U4 - Import Data - 1_markdown_instruction: |-
        We can import data\r
        \r
        Given
        a csv file, have students import it and then go look at in the data viewer
      U4 - Objects - Template Contacts_markdown_instruction: "![](https://images.code.org/53a5bdfb7f4ec83174756c8e094558fd-image-1449518131328.png)"
      U4 - Objects - accessingPropertiesInArray_markdown_instruction: |-
        # Manipulating
        Objects in an Array\r
        \r
        When objects are in an array, we can still **access
        the individual properties of each object**. In order to do so, you will need
        to combine the bracket notation used with arrays and the dot notation we've
        just practiced with objects.\r
        \r
        **Example:** `students[2].name` would
        access the name of the student at index 2 of the "students" array.\r
        \r
        #
        Do This:\r
        \r
        **You code from the previous exercise** is provided.\r
        \r
        *
        Use the syntax shown above **to display the `name` and `grade` of the first
        student in your students array.**\r
        * Use the syntax shown above **to display
        the `name` and `onTimeToClass` for the last student in your students array.**\r
        \r
        \r
        ![](https://images.code.org/2ef563646d857aa975c7970e83bf054f-image-1449517968011.52.36
        PM.png)
      U4 - Objects - appendObject_markdown_instruction: |-
        # Append Object\r
        \r
        #
        Do This
      U4 - Objects - arraysOfObjects_markdown_instruction: |-
        # Arrays of Objects\r
        \r
        Once
        you have a collection of objects with the same properties you'll want to
        do more interesting things to process that data.  In this case, an easy structure
        to use is an array.  You can make **arrays of objects**.\r
        \r
        <img src='https://images.code.org/46bf33a97d4c6c89191bc15864891477-image-1449087125215.11.52
        PM.png'>\r
        \r
        # Do This:\r
        \r
        **Your code from the previous exercise**
        is provided.\r
        \r
        * Create an **empty array** called `students` to hold
        your student objects.\r
        * **Use `appendItem`** to add your student objects
        to the array.\r
        * **Display** the `students` array with a single `console.log`
        statement.\r
        \r
        ![](https://images.code.org/b0e08217f5c87194feda9d48cee89090-image-1449152727737.22.28
        AM.png)
      U4 - Objects - createContactObject_markdown_instruction: |-
        # Create an Object
        and Add To Your Array\r
        \r
        Now that you have the values provided by the
        user, you'll need to actually need to save them in your app. Within your
        event handler for the "Save Contact" button, you'll need to write code
        that creates that object and then appends it to your `contacts` array.\r
        \r
        #
        Do This:\r
        \r
        **Your code from the previous exercise** is provided.\r
        \r
        *
        Within the event handler you created for the "Save Contact" button, **add
        code that creates a new object using the values you have pulled from the user
        interface elements**.\r
        * Append this newly created object to the `contacts`
        array.\r
        * **Run your code** and try to **add a new contact**. When you go
        back to your `showContactsScreen` you should be able to scroll to your newly
        added contact.\r
        * **Debug your program** if there are any errors you observe.\r
        \r
        ![](https://images.code.org/b226e1559dbeeb23aece57e78c3ecfa8-image-1449529119829.gif)
      U4 - Objects - createContactsData_markdown_instruction: |
        # Create Data\r
        \r
        This
        app will need sample data for you to use while you're building the rest of
        its functionality. At the top of the starter code, three objects for holding
        contact information are created. The first one is filled in with some dummy
        values, and the other two are left for you to fill in.\r
        \r
        ![](https://images.code.org/6cbf53690c40d94d8cb12dbd0f143df1-image-1449519452051.png)\r
        \r
        **Note:**
        The `imageURL` property should use a link to an actual image you upload to
        the app or find online.\r
        \r
        # Do This:\r
        \r
        **Your code from the previous
        exercise** is provided.\r
        \r
        * **Provide values** for the three contact
        objects at the top of the starter code.\r
        * Make sure you are using **the
        same properties** in all three contacts.\r
        * Use `appendItem` to **add these
        contacts to the `contacts` array** (the first one is done for you).\r
        * Display
        the `contacts` array with `console.log` to verify all values are in the array.\r
        \r
      U4 - Objects - createDotNotation_markdown_instruction: |-
        # Creating Objects
        with Dot Notation\r
        \r
        We've used dot notation to reference values in an
        object, but **you can also use dot notation to set the values in an object**.
        The example below shows how you might use this ability to build an object.\r
        \r
        ![](https://images.code.org/1f7e0d6b6696d4c6a4b1bfe8b4b5b8a5-image-1449085564719.45.40
        PM.png)\r
        \r
        This pattern works because **setting the value of a new property
        will automatically add it to the object**. This will typically be our preferred
        way of creating and referencing objects. \r
        \r
        <details>\r
        <summary>**Alternate
        Method of Creating Objects** (click to expand)</summary>\r
        You can create
        an object in a single line using the syntax below. **For large objects this
        method can quickly become difficult to read and write**. It will not be used
        in examples but you can use it if you wish.\r
        <ul>\r
        <li>Curly braces are
        placed around the contents of an object `{}`</li>\r
        <li>Properties of the
        object are given a name and a value which are separated by a colon `:`</li>\r
        <li>Properties
        are separated from one another by commas `,`</li>\r
        <li>Property names should
        be strings but do not need to be placed in double quotes. If they are not
        strings they will be coerced to strings, possibly creating unpredictable behavior.</li>\r
        <li>
        **Example:** `var user = {userName:"Ada", password:"csIsAwesome", yearBorn:1815};`</li>\r
        </ul>\r
        </details>\r
        \r
        #
        Do This:\r
        \r
        **Starter code** is provided which creates several student
        objects using the pattern shown above. The last student object is currently
        empty.\r
        \r
        * Use the pattern shown above to **complete the final student
        object for yourself.**\r
        * Make sure your object **has the same property
        names as the other 4**.\r
        * Run the program to **display the contents of
        your objects**. Confirm the values you expected appear there.\r
        \r
        ![](https://images.code.org/304a8cb6ef242292f4e818d40a257dc6-image-1449516213225.23.07
        PM.png)
      U4 - Objects - createEventHandlers_markdown_instruction: |-
        # Create Event Handlers\r
        \r
        #
        Do This
      U4 - Objects - createObject_markdown_instruction: |-
        # Creating Your Own Objects\r
        \r
        We've
        been using objects in our programs, but now we're going to start making objects
        of our own.\r
        \r
        **Syntax for Creating Objects**\r
        \r
        * Curly braces are
        placed around the contents of an object `{}`\r
        * Properties of the object
        are given a name and a value which are separated by a colon `:`\r
        * Properties
        are separated from one another by commas `,`\r
        * Names must be strings and
        should be written in double quotes `"`. If they are not they will be coerced
        to strings, possibly creating unpredictable behavior.\r
        * **Example:** `var
        user = {"userName":"Ada", "password":"csIsAwesome", "yearBorn":1815};`\r
        \r
        #
        Do This\r
        \r
        **Starter code** is provided which creates an empty object
        and displays its value.\r
        \r
        * Modify the code **using the syntax above**
        to create an object of your own. Experiment with including **value of different
        types (string, number, and boolean)**.\r
        * **Run the program** and confirm
        all values in your object appear as you expected.\r
        \r
        ![](https://images.code.org/f3812eb1ff896a1876d2f2abdf021ba4-image-1449080488321.21.14
        PM.png)
      U4 - Objects - dotNotation_markdown_instruction: |-
        # Objects\r
        \r
        For our
        purposes, you can **think of an object as a collection of variables**.\r
        \r
        #
        Properties and Dot Notation\r
        \r
        The variables contained in an object are
        called its **properties.**  Just like a variable, a property has a **descriptive
        name and contains a value**.\r
        \r
        In JavaScript we use **dot notation**
        to access individual **properties** of an object. You have seen this before
        with the event object, when you wrote something like `event.offsetX` or `event.key`.\r
        \r
        #
        Do This:\r
        \r
        **Starter code** is provided which has event handlers for
        both "click" and "keydown" events. You will need to use **dot notation**
        to display individual properties of the event object.\r
        \r
         * **Add code**
        to the "click" event handler that uses `console.log` to display the `offsetX`
        and `offsetY` properties of the event object.\r
         * **Add code** to the "keydown"
        event handler that displays the `key` property of the event object.\r
         *
        **Run your program** and confirm the correct information is being displayed
        in the console.  It should look something like the picture below.\r
        \r
        ![](https://images.code.org/b56d0370a35d11918c754c7132f57ba1-image-1449072748156.12.13
        AM.png)
      U4 - Objects - eventHandlersToSwitchScreen_markdown_instruction: |-
        # Switching
        Screens\r
        \r
        Your Contacts App now lets you view and scroll through your
        contacts, but you can't add any new ones. A second screen in your app called
        `addContactsScreen` was included as part of the starter code you were provided,
        as are some UI elements. You will be writing the code that pulls values from
        the text inputs provided here in order to add contacts to your app. The first
        step will be allowing the user to switch between these screens.\r
        \r
        # Do
        This\r
        \r
        **Your code from the previous exercise** is provided here.\r
        \r
        *
        In Design Mode **give meaningful IDs** to the "Add Contact" and "Go Back"
        buttons that can be found on each screen.\r
        * Use these IDs **to attach event
        handlers to each button that switch the current screen**, as shown below.
      U4 - Objects - eventParameter_markdown_instruction: |
        # We've Seen Objects
        Before\r
        \r
        **The object that we've used most frequently is the `event`
        parameter of our event handlers**.\r
        \r
        ![](https://images.code.org/81b5d14af7f7a81d796627d74990cdfb-image-1449511907664.11.28
        PM.png)\r
        \r
        Before we move on to creating objects of our own, let's take
        another look at this `event` parameter (or as we'll call it now, the "event
        object") and recall how they were used.\r
        \r
        # Do This:\r
        \r
        **Starter
        code** is provided which creates event handlers for both a "click" and "keydown"
        event and displays the contents of the event object they create.\r
        \r
        *
        **Run the program** and trigger both a keyboard event and a mouse event.\r
        *
        **Examine the objects displayed in the Debug Console** to recall the different
        pieces of information they contain.\r
        * **Reflect: ** Why wouldn't we want
        this information stored in many variables? Why wouldn't we want this information
        stored in an array?\r
        \r
      U4 - Objects - exemplarContactsApp_markdown_instruction: |-
        # Contacts App\r
        Once
        you close the instructions you'll see an app we call the *Contacts App* which
        demonstrates where we are headed over the next few lessons.\r
        \r
        This app
        might remind you of the Photo Album project you completed earlier in this
        course. This is because **both apps follow a pattern that is useful and very
        common**: you have a list of information and the user wants to look at each
        item individually, maybe even update or modify it. \r
        \r
        The main difference
        between the Photo Album and the Contacts App is that before, you simply had
        an array of strings, and **now your array will contain objects with multiple
        pieces of information in each object**.\r
        \r
        # Do This:\r
        \r
        * **Use the
        example Contacts App.**\r
        \t* **Left and right arrow keys** change the current
        contact shown.\r
            * **Click "Add Contacts"** and add a contact for yourself.\r
        *
        **Once you are comfortable with the app's functionality move on to begin
        building it yourself!**
      U4 - Objects - loopingArray_markdown_instruction: |-
        # Looping with Arrays of
        Objects\r
        \r
        The benefit of placing objects in an array is that we can easily
        loop over them and perform the same action with each. This is also why it
        is important that we used the same names for each property. The more standardized
        our data is, the easier it is process with a computer.\r
        \r
        The first way
        we will process our array of students is to display only the names of every
        student. In order to do this we will need to loop over the array using a `for`
        loop, and then access the name property of each student.\r
        \r
        ![](https://images.code.org/4d3851cf4dc30afb44e8713d232946b6-image-1449156157996.22.30
        AM.png)\r
        \r
        # Do This\r
        \r
        **You code from the previous exercise** is
        provided.\r
        \r
        * **Remove** your `console.log` command from the previous
        exercise.\r
        * Use a `for` loop to display **only the names** of every student
        in your array.\r
        \r
        ![](https://images.code.org/2e9e5cd620471161e2d0118e1a03ca23-image-1449156697004.31.21
        AM.png)
      U4 - Objects - loopingArray2_markdown_instruction: |-
        # Looping with Arrays of
        Objects: Multiple Properties\r
        \r
        Let's display more information about
        our students. This time when you loop through you should display both the
        name and the grade of each student. Use the syntax from the previous exercise
        as reference.\r
        \r
        # Do This\r
        \r
        **You code from the previous exercise**
        is provided.\r
        \r
        * Add code to the `for` loop from the previous exercise
        so that both the name and grade of each student is displayed.\r
        \r
        ![](https://images.code.org/82d42710c76e556c20e82e598c09866c-image-1449157086594.37.46
        AM.png)
      U4 - Objects - loopingCompoundConditions_markdown_instruction: |-
        # Looping with
        Compound Conditionals\r
        \r
        Let's do one final exercise looping over our
        array of objects. You'll need to use compound conditional statements to print
        the information of students who are present in class and in the 11th grade.\r
        \r
        #
        Do This\r
        \r
        **You code from the previous exercise** is provided.\r
        \r
        *
        **Modify** your `if` statement so that only students who are present in class
        AND in the 11th grade have their information displayed.\r
        * **Run your program**
        and confirm only the students who are in class AND in the 11th grade have
        their information displayed.\r
        \r
        ![](https://images.code.org/31c6cdf55587a533d98a28b4889a089d-image-1449161272150.47.12
        AM.png)
      U4 - Objects - loopingConditions_markdown_instruction: |-
        # Looping with Conditionals\r
        \r
        Let's
        start doing some more complex processing of our array of students. Suppose
        we only wanted to display the names of students who are present in class that
        day. We can reference the properties of each student within a conditional
        statement to only display the names of students whose `inClass` property is
        "true".\r
        \r
        ![](https://images.code.org/da0a7645805675f77cf1fec04cad4c4c-image-1449157900984.51.34
        AM.png)\r
        \r
        Since **`inClass` is stored as a boolean** we can directly
        reference its value without doing a boolean comparison.\r
        \r
        \r
        # Do This\r
        \r
        **You
        code from the previous exercise** is provided.\r
        \r
        * **Add an `if` statement**
        to your `for` loop that checks whether the student is in class before displaying
        their information.\r
        * **Run your program** and confirm only the students
        who are in class have their information displayed.\r
        \r
        ![](https://images.code.org/e4dc84243a97f393d2cfde0f6258b67a-image-1449160488833.34.42
        AM.png)
      U4 - Objects - pullValues_markdown_instruction: |-
        # Getting Data From the User\r
        \r
        The
        `addContactsScreen` is where the user can input information about a new contact.
        We'll treat building its functionality as a three-step process. The first
        step is to make sure you can access the values in each input by displaying
        them in the console.\r
        \r
        # Do This:\r
        \r
        **Your code from the previous
        exercise** is provided.\r
        \r
        * In Design Mode, **go look at the IDs already
        given to the 4 text inputs**.\r
        * Add a "click" event handler for the "Save
        Contact" button.\r
        * Write code within your event handler that **displays
        the contents of all 4 text inputs using `console.log`**. This will let you
        know that you are properly accessing each value.\r
        \r
        <img src="https://images.code.org/1bf71fcf3d2f5978618536527acad710-image-1449528040863.39.22
        PM.png" style="float:left; width:200px">\r
        \r
        <img src="https://images.code.org/e8f6c1838f2d5c596b2dce275ee1becc-image-1449528044430.39.35
        PM.png" style="float:left; width:150px">
      U4 - Objects - readStarterCode_markdown_instruction: |-
        # Getting Started\r
        You've
        learned a little bit about objects, and now you're going to practice using
        them in an app.\r
        \r
        You've been provided some starter code and the UI
        elements needed to make this app. Your primary focus will be on integrating
        what you've learned about objects to create the functionality you saw in
        the Contacts App.\r
        \r
        # Do This:\r
        \r
        **Starter code** is provided, including
        the UI elements of your app and useful code for creating some of the familiar
        functionality we've designed in previous projects.\r
        \r
        * **Run the progam**
        to see what it does right now. (Answer: **Not much** - you'll be adding the
        rest of the functionality.)\r
        * **Look through the starter code** to understand
        what you already have available.\r
        * **Go into Design Mode** as well and
        look at the different UI elements and their IDs. \r
        \t* **Notice that there
        are 2 screens** with descriptive IDs already given.\r
        * Once you're comfortable
        with the starter code, move on to the next exercise.
      U4 - Objects - resetIndexAndShow_markdown_instruction: |
        # Showing the New Contact\r
        \r
        When
        a user adds a contact, they should be **automatically taken to the `showContactsScreen`,
        and the newly added contact should be shown**. Additionally, when they return
        to the `addContactsScreen`, the fields should be cleared out.\r
        \r
        # Do
        This:\r
        \r
        **Your code from the previous exercise** is provided.\r
        \r
        *
        **Add code** to the event handler for the "Save Contact" button that:\r

        * **Clears the text** from the inputs on that page.\r
         * **Switches the screen**
        back to `showContactsScreen`.\r
         * **Sets the `currentIndex`** and calls
        `showCurrentContact` so that the newly-added contact is shown.\r
        \r
        ![](https://images.code.org/734a4db82d61680bc4064eee5509d9c5-image-1449529424169.gif)\r
        \r
      U4 - Objects - showContact1_markdown_instruction: |-
        # Displaying Contacts\r
        \r
        In
        order to keep track of the current contact to display, a variable called `currentIndex`
        has been created. \r
        \r
        ![](https://images.code.org/a116bfa6fdac0b9c4077c076089599ba-image-1449242207423.15.17
        AM.png)\r
        \r
        An event handler has been added, which changes this variable
        when you press the "Left" and "Right" arrow keys and makes sure the index
        is between 0 and the length of the contacts array (similar to the photo album
        project from before). Then it calls `showCurrentContact`.\r
        \r
        ![](https://images.code.org/37cc2e3f0555cd0eb4c683d04a8712f4-image-1449520773029.png)\r
        \r
        **Recall**
        that if you have an array, you can treat any index of the array like a variable.  To
        get at a property of an object in the array at the current index, we can do
        this:\r
        \r
        ![](https://images.code.org/7c5926550471ef8a368e7cd7e4c8d172-image-1449521254405.png)\r
        \r
        #
        Do This:\r
        <img src="https://images.code.org/fa99b8cf8084910b1a4086e06385f9c2-image-1449243444865.37.13
        AM.png" style="float: right; width: 200px">\r
        Let's make `showCurrentContact`
        work. **Your code from the previous exercise** is provided.\r
        \r
        * **Add
        code to the `showCurrentContact` function** that sets the text of the "contactInfo"
        to `contacts[currentIndex].name`.\r
        \r
        * **Run your program** and you should
        be able to use the left and right arrow keys to cycle through the names of
        your contacts.
      U4 - Objects - showContact2_markdown_instruction: |-
        # Show Full Contact Information\r
        \r
        Now
        we'll want to show the full contact information. You'll need to reference
        each property of the contact using the same notation you used in the last
        exercise.\r
        \r
        \r
        # Do This:\r
        \r
        **Your code from the previous exercise**
        is provided.\r
        \r
        * **Add code to your `showCurrentContact` function** so
        that the `phone` and `birthday` information is also displayed. Give each piece
        of information a descriptive header, as shown below.\r
        * **Reminder: ** You
        can concatenate strings with the `+` operator. `\n` will place text on a
        new line.\r
        \r
        ![](https://images.code.org/3aec850ad2c5ce21b1288dbec6fff711-image-1449246407070.26.34
        AM.png)
      U4 - Objects - showContact3_markdown_instruction: |-
        # Show Contact Image\r
        \r
        The
        last piece of information to display for each contact is their image, which
        should be saved in the `imageURL` property of each contact.\r
        \r
        # Do This:\r
        \r
        **Your
        code from the previous exercise** is provided.\r
        \r
        * The main image on
        the "showContactsScreen" has the ID "contactImage".\r
        * **Add code**
        to the `showCurrentContact` function that sets the URL of "contactImage"
        to the `imageURL` property of the contact being displayed. You can use the
        `setImageURL` command.\r
        \r
        ![](https://images.code.org/a606d057df3e5c34fc2908d598c3a9ff-image-1449526996613.23.06
        PM.png)
      U4 - Objects - showSampleImage_markdown_instruction: |-
        # Show Sample Image\r
        \r
        In
        Design Mode, you'll notice that an image called "previewImage" is included
        on the "addContactsScreen". This is there so that the user can see what
        the image will look like before adding it to the contacts list.\r
        \r
        # Do
        This:\r
        \r
        **Your code from the previous exercise** is provided.\r
        \r
        *
        **Add an event handler** for `URLinput` that responds to a new event type
        called **"input"**. This event is triggered every time the input text changes.\r
        *
        Use `setImageURL` within the event handler to change the URL of the image
        to whatever is currently in `URLinput`.\r
        * Run the app and confirm that
        **the image updates when a valid image URL is given**.\r
        \r
        ![](https://images.code.org/955fa56473d949ed7bd326aa87c96e0f-image-1449525666366.gif)
      U4 - Objects - writeWrap_markdown_instruction: |-
        # Wrapping Indexes\r
        \r
        Currently
        you can press the left and right arrow key to change the index of the contact
        you'd like to show. When `showCurrentContact` is called that contact is then
        shown on the screen. Unfortunately right now it is possible to set `currentIndex`
        to a value that is out of bounds. As a result your program will generate an
        error and stop running.\r
        \r
        # Do This\r
        \r
        **Your code from the previous
        exercise** is provided.\r
        \r
        * **Use the wrap function** provided in the
        starter code within `showCurrentContact` to reset `currentIndex` to a value
        that is "in bounds" before showing the contact.\r
        * **Run your program**
        and confirm that you can now scroll through every contact and that the contacts
        list "wraps around"
      U4 - Read Record - 1.2_markdown_instruction: |
        # Callback Functions\r
        \r
        In
        the last exercise, you **read records from a remote database back into your
        app**. There are a few steps that happened in that process.  When you `readRecords`
        you can think of it as triggering a 4-step process as shown in the diagram
        below.\r
        \r
        ![](https://images.code.org/b8c366da4d02776920cfbb229b108c40-image-1450104325687.png)\r
        \r
        Because
        the Internet is involved, there's actually a **delay between when your program
        calls `readRecords` and when the callback function is called**. We can even
        see this delay in App Lab.\r
        \r
        # Do This:\r
        \r
        **Your code from the previous
        exercise** is provided.\r
        \r
        **NOTE:** The speed on App Lab has been set
        to its slowest setting; this will make it easier to see the sequence of events
        in the program.  You can set the speed to the fastest setting and it will
        function the same.\r
        \r
        * **Add another `console.log` statement after your
        `readRecords` command**.\r
        * **Run the program** and pay close attention
        to **the sequence of events**. \r
        * **Check the Debug Console** to see which
        `console.log` command ran first.\r
        \r
        ![](https://images.code.org/7c2a7362736e0796aa191b03760552c3-image-1449687909231.gif)\r
        \r
      U4 - Read Record - 1.3_markdown_instruction: |-
        # Asynchronous Commands\r
        As
        you just saw, **the callback function for a `readRecords` command does not
        run immediately**. In fact, **commands outside of the callback function will
        run**. \r
        \r
        We say that the callback function of `readRecords` is **asynchronous**,
        because the rest of your program will not wait for the response from the database;
        it will continue executing, and eventually the callback function will be triggered
        once the data has arrived from the database.  \r
        \r
        <details><summary><strong>Terminology:
        Synchronous vs. Asynchronous</strong> [Click to expand]</summary>\r
        <P>\r
        "Asynchronous"
        is the opposite of "synchronous".  In programming, we talk about whether
        <strong>functions are synchronous or asynchronous</strong>.\r
        </P>\r
        <p>\r
        <strong>Synchronous</strong>
        (or "in sync") - things happening at the same time.  "The dance moves were
        in sync with the music." \r
        <ul><li>When functions are "synchronous",
        if Function A calls or triggers Function B, Function B will execute immediately,
        at the moment it's called, and A will wait for B to complete before continuing
        on.\r
        </li>\r
        </ul>\r
        </p>\r
        <p>\r
        <strong>Asynchronous</strong> (or
        "NOT in sync") - things happening at different times or not in a prescribed
        sequence. \r
        <ul>\r
        <li>When functions are asynchronous, if Function A calls
        or triggers Function B, Function B will execute at some <strong>later time
        in the future, and A will continue without waiting for B.</strong> </li>\r
        <li>Asynchronous
        functions are used especially when the Internet is involved, because sending
        a request for data and getting it back can take time. The setup is common:
        send a request for data, and as part of the request specify what <i>should
        happen when the data eventually comes back.  This is what the callback function
        is for.</i></li>\r
        </ul>\r
        </p>\r
        </details>\r
        \r
        <br>\r
        This allows
        your program to keep running while you wait for responses from the database,
        but **asynchronous commands can make it challenging to keep track of the order
        your program will run in**.\r
        \r
        You typically think of programs waiting
        for one command to finish before running the next. This style of programming
        is referred to as **synchronous** and is generally much easier to read and
        write.\r
        \r
        # Callback Functions are like Event Handlers\r
        \r
        **Event
        handlers** for UI elements can be triggered at any time. You cannot know ahead
        of time when the event will be triggered, **so all the code that should run
        when the event is triggered needs to go in the event handler**.\r
        \r
        ![](https://images.code.org/a6303ef07bf90ddf22f77950dd29a971-image-1449691163707.gif)\r
        \r
        The
        same thing is true with the callback function for data commands. **If a piece
        of code should run after a response has been received from the database it
        must be placed in the callback function**.\r
        \r
        ![](https://images.code.org/7908fa39f133ec1ce374f8e9943c5257-image-1449692589680.gif)\r
        \r
        **Tip:
        Treat the callback function of a data command like an event handler. It gets
        triggered when you receive the response from the database**\r
        \r
        # Do This:\r
        \r
        **Your
        code from the previous exercise** is provided.\r
        \r
        * **Move your second
        `console.log` command inside the callback function**.\r
        * **Run the program**
        and pay close attention to **the order in which the commands run**. You can
        **check the Debug Console** to see which `console.log` command ran first.
      U4 - Read Record - 1_markdown_instruction: |-
        # Reading Records\r
        You have learned
        how `createRecord` can be used to create permanent copies of your data in
        a remote database. \r
        \r
        **In order to use this data, you'll need a way
        to read it out of your database and back into your app**.\r
        \r
        <img src="https://images.code.org/ac5fb29d4935df7b5825f4cabd6b89e8-image-1449502640243.35.37
        AM.png" style="width: 350px; float: right">\r
        \r
        Check out the new command
        `readRecords`. This command **requests from the database *all* the records
        stored in one table.**. \r
        \r
        The database responds by the sending an **array
        of objects** back to your program - one object for every record in the table.  As
        with `createRecord`, the data sent back by the database will come through
        **callback function in the `records` parameter**.\r
        \r
        # Do This:\r
        \r
        **NOTE**:
        the database with a table called "myTable" already contains some data.\r
        \r
        *
        **Open the Data Viewer** to look at the data in "myTable."\r
        * **Add a
        `readRecords` command** to your app.\r
        * **Add a `console.log` command**
        inside the callback function of `readRecords` to **display the `records`**.\r
        *
        Run the program and **confirm that the data from the database is being displayed
        in the console log.**\r
        \r
        ![](https://images.code.org/fe3db85465b5dd8a983ba5615f4e851d-image-1449504949223.gif)
      U4 - Read Record - 2_markdown_instruction: |-
        # Changing the Table\r
        \r
        The
        first parameter in the `readRecords` command is the name of the table you
        wish to read records from.\r
        \r
        ![](https://images.code.org/9f809d3a5e5c43871dd237dbc0ca66dc-image-1449515754521.png)\r
        \r
        You
        have been using the name "myTable," but - just like variables and IDs -
        **your tables should be given descriptive and meaningful names**.\r
        \r
        #
        Do This:\r
        **Note:** We've given you a new database that already includes
        a table with some data in it.\r
        \r
         * Open the Data Viewer to **find the
        name of the table.**\r
         * Drag out `readRecords` and **change the table name
        parameter** to pull the records from the new table.\r
         * Run the program.  Your
        output should look like below.\r
        \r
        ![](https://images.code.org/ba9812734a1d82fc6866841c3dab0f58-image-1449871040409.png)
      U4 - Read Record - 3_markdown_instruction: |-
        # Debugging: Wrong Table Name\r
        \r
        You
        may have run into this in the previous level already, but let's see what
        happens when we try to `readRecords` from a table that doesn't exist in our
        database.\r
        \r
        # Do This\r
        \r
        \r
        * **Drag out `readRecords`** and leave
        the table name as "myTable"\r
        * **Run the program** to see what value is
        passed to the `records` parameter.\r
        * **Did you get an error? Did anything
        else change? Make a note of the behavior you see for future debugging**\r
        \r
        <details><summary>**What
        you should see (read this after trying it yourself)**</summary>\r
        <br>\r
        <p>\r
        \r
        If
        you read from a table that doesn't exist you won't get any error messages
        and the database will respond by <strong>sending back an empty array of records</strong>.  An
        empty array looks like [] in the console.  Any other tables in the database
        are left unchanged.\r
        </p>\r
        <p>\r
        As a <strong>debugging tip:</strong>
        if your requests for reading records from the database are coming up empty,
        double check that the code and the actual table name are spelled the table
        name <i>exactly the same</i> - capitalization and spaces matter!\r
        </p>\r
        \r
        </details>
      U4 - Read Record - 4.1_markdown_instruction: |-
        # Using Your Records\r
        \r
        The
        `records` parameter in your callback function is **an array of objects**.
        \r
        \r
        It can be used exactly the same as other arrays of objects you have
        seen before.\r
        \r
        | You can... | code|\r
        |:-- |:--|\r
        |**refence each
        object (record) by an index**| `records[5]`|\r
        |**reference each property
        of an object using dot notation**| `records[5].title`|\r
        |**find out the
        number of objects in the array** | `records.length`|\r
        \r
        # Do This:\r
        \r
        **Starter
        code is provided** which reads records from the same **"topMovies" table**
        you saw in the previous level.\r
        \r
        **Add code** inside the callback function
        of `readRecords` that:\r
        \r
         * Displays the **first movie in the array**
        (i.e. displays `records[0]`).\r
         * Displays the **last movie in the array.**\r

        \t* Try using `records.length-1` rather than a hard-coded number.\r
         * Displays
        the `title` of the **third movie in the array**.\r
        \r
        **Run the program**
        and confirm that you are displaying the correct movie.  Your output should
        look like this:\r
        \r
        ![](https://images.code.org/d3c0f6bd73b637828f0057fa91d6f56f-image-1524524661772.03.55
        PM.png)
      U4 - Read Record - 4_markdown_instruction: |-
        # Reading Records: Printing Individual
        Records\r
        \r
        Usually we want to pull out each record individually. We have
        already seen that records is an array of objects. Therefore we can do this
        by using the array notation to access each object by its index.\r
        \r
        # Do
        This\r
        \r
        The data from the last level has been provided. \r
        \r
        * Add
        a call to `readRecords`\r
        * Set the table name to the movies table.\r
        *
        Inside the callback function add a `for` loop to loop over the records.\r
        *
        Inside the for loop add a console.log statment to print out the current object
        using its location in the array.\r
        * Run the program. Your output should
        look like below.\r
        \r
        ![](https://images.code.org/827a410730369edf42ca7e21f0fa6b01-image-1449517957324.51.38
        PM.png)
      U4 - Read Record - 5_markdown_instruction: "# Reading Records: Looping over\nthe
        Array\\r\n\\r\nWe can loop over the `records` array just like any other\narray
        to **perform the an action for every object in the array**. Recall that\nthe
        standard way of doing this is to use a `for` loop.  \\r\n\\r\nFor example,\nif
        you had an array called `records` and each object in the array had a property\ncalled
        `name` you could display every name in your array like this:\\r\n\\r\n![](https://images.code.org/baf9aa7c93c78ad5992e29ebc7baacb8-image-1449872724581.png)\\r\n\\r\n#\nDo
        This:\\r\n**Starter code is provided** which reads records from the \"topMovies\"\ntable.\\r\n\\r\n*
        Add a `for` loop to the callback function of the `readRecords`\ncommand.\\r\n*
        Add code to your `for` loop that displays **only the title of\nevery movie
        in the list**.\\r\n\\t* HINT: to display the title of a movie inside\nthe
        for loop use `records[i].title`.\\r\n* Your output should look like this:\\r\n\\r\n![](https://images.code.org/5b13735c52308f57241e7c34707c82e6-image-1449783907117.44.02\nPM.png) "
      U4 - Read Record - part 1 - template_markdown_instruction: |-
        # Reading Records\r
        You
        have learned how `createRecord` can be used to create permanent copies of
        your data in a remote database. \r
        \r
        **In order to use this data you'll
        need a way to read it out of your database and back into your app**.\r
        \r
        <img
        src="https://images.code.org/ac5fb29d4935df7b5825f4cabd6b89e8-image-1449502640243.35.37
        AM.png" style="width: 350px; float: right">\r
        \r
        Check out the new command
        `readRecords`. This command **requests from the database *all* the records
        stored in one table.**. \r
        \r
        The database responds by the sending an **array
        of objects** back to your program -- one object for every record in the table.  As
        with createRecord, the data sent back by the database will come through **callback
        function of the `readRecords`, with array of objects in the `records` parameter**.\r
        \r
        #
        Do This\r
        \r
        **NOTE**: the database with at table called 'myTable' already
        contains some data.\r
        \r
        * **Open the Data Viewer** to look at the data
        in 'myTable'\r
        * **Add a `readRecords` command** to your app.\r
        * **Add
        a `console.log` command** inside the callback function of `readRecords` to
        **display the `records`**\r
        * Run the program and **confirm that the same
        information you saw in the Data Viewer is displayed in the console**.\r
        \r
        ![](https://images.code.org/fe3db85465b5dd8a983ba5615f4e851d-image-1449504949223.gif)
      U4 - ReadRecords - Contacts App 1_markdown_instruction: |-
        # Contacts App: Loading
        Your Contacts From the Database\r
        \r
        The way you left your Contacts App
        in the last lesson, **your app had stored data in a remote database but could
        not read it back**. Now that you know how to use `readRecords`, you will be
        able to read that data into your app at the start of the program.\r
        \r
        Rather
        than constructing and adding objects one-by-one to the `contacts` array, you
        can simply get the array of records from the database and use that as the
        global variable in our app.  Let's do it.\r
        \r
        # Do This:\r
        \r
        **Your
        code from the "Contacts App" is provided.**\r
        \r
        * Go to the Data Viewer
        for your app and confirm that your contacts data is stored there.\r
        * **Remove
        any code** from your program that:\r
        \t* Constructed an object for a contact,
        (e.g. `contact1`, `contact2`, etc.\r
            * Appended an object to the `contacts`
        array. \r
            \r
        * Drag out a `readRecords` command and place it after the
        command `contacts = [];`\r
        \r
        * In the **callback function** of `readRecords`:\r
          *
        Set `contacts = records`.\r
          * Call `showCurrentContact`.\r
        \r
        <details>\r
        <summary><strong>What
        your code should look like</strong> (click to expand)</summary>\r
        <p>\r
        The
        first few lines of your contacts app should now look like this.  \r
        </p>\r
        ![](https://images.code.org/d0c426401a35ff99ab9eb86128bc7be5-image-1449949740702.48.41
        PM.png)\r
        \r
        <p>Notice that this actually makes the program simpler: rather
        than constructing and adding objects one-by-one to the `contacts` array, we
        simply get the array of records from the database and <strong>assign it to
        `contacts`</strong>.  \r
        </p>\r
        <p>\r
        Since `contacts` is a global variable
        in our app, the rest of the code can use it.  \r
        </p>\r
        \r
        </details>
      U4 - ReadRecords - Contacts App 2_markdown_instruction: |
        # Refreshing Local
        Data\r
        \r
        Your app is still running off of an array called `contacts` that
        is stored in your app. You can think of this as a **local copy of your database**.
        In order to prevent it from getting out of sync with your actual database,
        you should **refresh the contents of this array every time you make changes
        to the database**.\r
        \r
        Since you will need to refresh your app many times
        in your program, **you will create a single function that refreshes the data
        in your app and displays the results**.\r
        \r
        # Do This:\r
        \r
        **Your code
        and database for the Contacts App is provided.**\r
        \r
        **Goal: Move the code
        that loads the data from the database into a function called `refreshLocalData`**.\r
        \r

        * Create a function called `refreshLocalData`. <img src="https://images.code.org/e0e29e916e63bc8c914ee1387729c86b-image-1450115424518.gif"
        style="width: 350px; float: right">\r
        \r
         * Move the call to `readRecords`
        from the top of you code into the function. (See animation).\r
        \r
         * Make
        a call to `refreshLocalData` at the beginning of your program.\r
        \t* You
        need this now to trigger the initial loading of the data.\r
            * <details><summary><strong>The
        top of your program should now look like this.</strong> (click to expand)</summary>![](https://images.code.org/89f5a3a70d66d2fe5b382b79a6aef347-image-1455908393952.PNG)</details>\r
        \r
        *
        Run the program and confirm that **it still copies the data from your database
        into the `contacts` array**.\r
        \r
      U4 - ReadRecords - Contacts App 3_markdown_instruction: |
        # Updating Your Contacts:
        Adding a Contact\r
        \r
        When you add a new contact to your app, it currently
        gets added to your database by calling `createRecord`. Once this happens,
        **your local copy of `contacts` is no longer up to date**. \r
        \r
        We can
        address this by calling `refreshLocalData` any time we add anything to the
        database. For example, any time we `createRecord`, we can refresh the local
        data as soon as we know the new record was successfully added to the database
        (i.e. when the callback function is triggered).\r
        \r
        # Do This:\r
        \r
        **Your
        code and database for the Contacts App is provided.**\r
        \r
         * Your app currently
        **adds a new contact to the database** when you click the "Save Contact"
        button.\r
         \r
         * **Add a call to `refreshLocalData` inside the callback
        function of `createRecord`**.\r
         \r
         * Move the line to update `currentIndex`
        from the event handler for the "Save Contact" button into `refreshLocalData`.\r

        \r
          * <details><summary><strong>Your code should look like this.</strong>
        (click to expand)</summary>![](https://images.code.org/a24b562559cbec49df721908de6969fe-image-1455911309789.PNG)![](https://images.code.org/f969b8e71578ff1cace8a57620b1ba7e-image-1455911311856.PNG)</details>\r
        \r
        *
        Run the program, and **confirm that when you add a contact to your database,
        you can also see it in your app**.\r
        \r
         * <details><summary><strong>Now
        when you run your program, a different contact gets displayed first. Why?</strong>
        (click to expand)</summary>\r
        Since you moved the line to update `currentIndex`,
        now every time you call `refreshLocalData`, the current index gets set to
        the newest contact in your database, which means `showCurrentContact` will
        display the most recently added contact. So when you call `refreshLocalData`
        at the beginning of your program to load your contacts into the `contacts`
        array, it will also make sure the newest contact is displayed first.</details>\r
        \r
        \r
        \r
      U4 - ReadRecords - Contacts App 4_markdown_instruction: |-
        # Create a Delete
        Button\r
        \r
        Now that you can add new contacts to your app, you might want
        to add functionality to remove them. Let's **create a new button the user
        can click to delete the current contact.**\r
        \r
        # Do This:\r
        **Your code
        and database for the Contacts App are provided.**\r
        \r
         * In Design Mode,
        **shrink the "Add Contact" button** on the "showContactsScreen".\r
         \r

        * **Add a new button for delete** in the space you created.\r
         \r
         * Set
        the style of the button, change its text, and give it a descriptive ID.\r
        \r
        ![](https://images.code.org/e390ba49c28b447279bc20dd2b7eef91-image-1449865822878.14.31
        PM.png)
      U4 - ReadRecords - Contacts App 5 make delete work_markdown_instruction: |
        #
        Making the Delete Button Work\r
        \r
        You are keeping the index of the current
        object as a global variable called `currentIndex`.\r
        \r
        Thus, the **current
        object on the "showContactsScreen"** is found at `records[currentIndex]`.\r
        \r
        To
        make the delete button work, we can simply send the object we want to delete
        to `deleteRecord`. \r
         * Notice that because `records[currentIndex]` **contains
        the "id" of the object you hope to delete, you don't need to make any changes
        to the object before sending it**.\r
        \r
        # Do This:\r
        **Your code should
        end up looking similar to the code depicted in the image**. \r
        \r
        Here are
        the steps: <img src="https://images.code.org/c2b534a6178801a829d62fd7f99690d5-image-1455914106048.png"
        style="width: 350px; float: right">\r
         * **Add an event handler** for the
        delete button.\r
         * **Make a variable called `objToDelete` that's a copy
        of the object at the current index**.\r
         * **Add a call to `deleteRecord`**
        in the event handler. \r
          * First Parameter: Make sure to set the table
        name to your contacts table.\r
          * Second Parameter: Set to `objToDelete`.\r

        * **Add a call to `refreshLocalData`** in the callback function of `deleteRecord`.\r

        * **Run your app**.\r
          * Confirm you can now delete contacts and that your
        local and remote data agree.\r
      U4 - add createRecord to contacts App_markdown_instruction: |-
        # Save Your Contacts
        in the Cloud!\r
        \r
        Now that you know how to save objects to the database,
        you can make your contacts app save things permanently.\r
        \r
        Right now you'll
        add the ability for the app to save contacts to the database. In the next
        lesson, you'll learn how to pull data from the database back into the app.\r
        \r
        #
        Do This:\r
        \r
        **The contacts app you created in the previous lesson** is
        provided.\r
        \r
         * Drag the `createRecord` block into the event handler code
        for the "createContactButton" and add it as the last lines of the function.\r

        * Set the **first parameter** to be a descriptive table name like "myContacts."\r

        * Set the **second parameter** to object you created for the new contact (in
        the example the variable is called `newContact`.\r
         * Run the app and **add
        a new contact**.\r
         * In the Data Viewer, **confirm a new table was created
        and that it contains the contact you created**.\r
        \r
        ![](https://images.code.org/36dd0fc06e93b1988a9df72a62c3f99f-image-1449266720880.gif)
      U4 - debug column names are case sensitive_markdown_instruction: |-
        # Are Properties
        Case-Sensitive?\r
        \r
        You saw that if you add a property to an object and
        then store it in the database, the database will add a column to accommodate
        the new data value.  \r
        \r
        If you end up with columns in your table that
        you don't want, you can delete them\r
        ![](https://images.code.org/baecadc168954c794212b419d441679b-image-1449262524542.gif)\r
        \r
        Let's
        do another quick experiment to test the behavior of the data table. **What
        happens if you change how a property is spelled?**\r
        \r
        # Do This:\r
        \r
        **Your
        code from the previous exercise** is provided.\r
        \r
        * Change `song.title`
        to `song.Title` (capital T) where you create your song object.\r
        * **Run
        the program**, then go to the Data Viewer to see what happened.\r
        * If there
        are problems created by the change in spelling, **delete unnecessary columns
        and change your code back**.
      U4 - deleteRecords 0_markdown_instruction: |-
        # Deleting Records with Code\r
        \r
        You
        can delete a record "by hand" in the Data Viewer by clicking the <img src="https://images.code.org/b45cebe6d06d8c2d45a233bd3c472a62-image-1449850229074.png"
        style="width: 50px"> button.\r
        \r
        To delete a record with code you use
        the `deleteRecord` command.  It works similarly to the other data tools in
        that it has 3 parameters:\r
        \r
         * The **name of the table** you want to
        delete from.\r
         * The **object** you want to delete.\r
         * A **callback**
        function.\r
        \r
        `deleteRecord` is **different from the other data commands**
        in one critical way. The object you send to the database ***only* needs to
        contain the id of the record** you want to delete.  \r
         \r
        \r
        # Do This:\r
        \r
        **Your
        database already includes a table called "mytable"**\r
        \r
         * Go to the
        Data Viewer and **look at the data in "mytable"**.\r
         * **Drag out** the
        `deleteRecord` block.\r
         \t* It includes **default code** to delete the record
        with id:1 in "mytable".\r
         * Run the code and **confirm that the record
        with id:1 ("Greg") is deleted from the database**.\r
        \r
        ![](https://images.code.org/f1168e1793f646575f26d86e66ddcae4-image-1457470120824.gif)
      U4 - deleteRecords 1_markdown_instruction: |-
        # Deleting Records Continued...\r
        \r
        The
        other difference with `deleteRecord` is that the database **sends back a boolean
        called `success`.** \r
        \r
        Using the `success` boolean, you can write a callback
        function that will behave differently based on whether or not `deleteRecord`
        ran successfully.\r
        \r
        * If the database was able to successfully delete
        the specified record, `success` will be set to **true** in the callback function.
        \r
        * If the database was **not** able to delete the record, `success` will
        be **false.**\r
        \r
        Let's do a little more experimentation with `deleteRecord`
        on a sample database.  **We've given you a new database that has about 40
        songs in it.** You have a few different things to try so don't miss them.\r
        \r
        #
        Do This:\r
        \r
        * **Click View Data.** Look at the "mySongs" table and **find
        the ID of the song "Little Bunny Foo Foo."** \r
        * **Drag out the `deleteRecord`
        block.**\r
          * Set the table name to "mySongs."\r
          * Set the `id` of
        the object to delete to the ID of "Little Bunny Foo Foo."\r
        * **Add an
        `if` statement to the callback function.**\r
          * If `success` is true, print
        "Record deleted successfully" to the console.\r
          * Otherwise, print "Could
        not delete record" to the console.\r
        * **Run the code.**\r
          * Verify that
        you deleted "Little Bunny Foo Foo" from the list of songs.\r
        * **Run the
        exact same code again.**\r
          * This will attempt to delete a record with
        the ID you just deleted. See what happens...
      U4 - deleteRecords 2 delete object_markdown_instruction: |-
        # Using Objects to
        Specify What to Delete\r
        \r
        When deleting an object in the database **the
        only property the database checks is `id` - *everything else* in the object
        is ignorned by `deleteRecord`**.\r
        \r
        The **key takeway** is that you can
        pass *any* object to `deleteRecord`. As long as it has a property called `id`
        the database will try to delete a record with that ID.\r
        \r
        Let's look
        at an example. \r
        \r
        # Do This:\r
         <img src="https://images.code.org/0af097cf5062c49743275f2c3df21bf7-image-1449864027240.gif"
        style="float: right; width: 350px">\r
         \r
        **Starter code is provided**
        that constructs an object called `song` and sets `song.id = 9` (the ID of
        "Little Bunny Foo Foo"). Additional "junk" properties are added as well.
        The "mySongs" table in the database has been restored to its original state.\r

        \r
        * **Replace the second parameter of deleteRecord to use the `song` object**
        instead of `{id:1}` (see animation at right).\r
        * Run your program and **confirm
        that the record with id 9 is deleted** by checking in the Data Viewer.\r
        *
        **Change the ID in the `song` object** to the ID of a different record in
        your database.\r
        * Run your program and **confirm another record in "mySongs"
        was deleted.**
      U4 - deleteRecords 2_markdown_instruction: |
        # Deleting Records\r
        \r
        Go look
        at the data.  See the ids.  When you try to edit you can't.  Why? Because
        id's are unique, but for all time.  Each record that gets  added gets assigned
        a unique id.  That id will never be used again, even if you delete it. ![](https://images.code.org/352bbbd91c14aa8a4a37fcc309f29d93-image-1449782149871.gif)\r
        \r
        You
        can delete a record using the data viewer by clicking the delete button (duh).\r
        \r
        To
        do it with code you use the delete record block.  It works similarly to the
        other data tools.\r
        \r
        [screen cap diagram - table name, object, callback]\r
        \r
        However,
        deleteRecord is different because the object *only* needs to contain the id
        of the record you want to delete. You can \r
        \r
        # Do This\r
         * Drag out
        the delete records block - set the id to the one you found.\r
         * Run the
        code - verify that you deleted the right record\r
        \r
      U4 - fix contacts by hand in data table_markdown_instruction: |-
        # Add Contacts
        to the Data Table by Hand\r
        \r
        When you originally created this app, you
        hard-coded at least **three contacts"** that were added to your contacts
        list every time the program started running. You'll want to move their information
        into the database as well.\r
        \r
        # Do This:\r
        \r
        **Your code from the previous
        exercise** is provided.\r
        \r
        * In the Data Viewer, go to the table you are
        using to store your contacts.\r
        * Add rows to the table and copy in the url,
        name, phone number, etc. for each of the hard-coded contacts in your app.\r
        *
        **Don't actually delete your hard-coded contacts from your code.**
      U4 - last stage test adding contcts_markdown_instruction: |-
        # Test the App\r
        \r
        If
        you run your app now, you can add contacts and they will be saved to the database,
        but they will also show up "locally" in your app.  That is, until you restart
        it.\r
        \r
        **When you restart the app, it only reloads the hard-coded contacts.
        This is okay for now.**  In the **next lesson** you'll learn how to pull
        data from the database back into the app.\r
        \r
        As a final step for now...\r
        \r
        #
        Do This:\r
        \r
        **Your code from the previous exercise** is provided.\r
        \r

        * **Add a few new contacts to your app and confirm you can scroll through
        them**.\r
         * In the Data Viewer, **confirm those contacts were added to your
        database**.\r
         * Restart your app. Confirm that **the newly added contacts
        are no longer stored locally in your app, but they still exist in the database**.\r

        * In the Data Viewer confirm those **"lost" contacts are still stored in
        your database**.
      'U4 L1 - 4: Teaching and Student Support Plan_markdown_instruction': |-
        <br><br>\r
        >
        **NOTE: before you start this task, make sure you’ve reviewed the lesson resources
        in this module, and have a good sense of how the lesson works. If you haven’t
        already reviewed the materials, do that now and come back to this task later.**\r
        \r
        #
        Lessons 1 - 4: Teaching and Student Support Plan\r
        \r
        ## Task Description\r
        \r
        Now
        that you have a better sense of this lessons in this sequence, let’s think
        about the types of supports students will need in order to be successful.
        Since the curriculum is based on inquiry learning, lessons feature activities
        that engage students in discovering core concepts themselves. It’s important
        to think through implementation plans and student support. In this task you
        will make a plan for teaching and student support **for one of the lessons
        in this sequence** that takes into account differentiation strategies and
        make-up work for absent students. Your teaching and student support plan should
        cover the following: \r
        \r
        \r
        - **Which lesson in the sequence are you
        discussing?** \r
        \r
        - **Details on how you will implement and differentiate
        the lesson:**\r
        \r
         - An outline of any changes you will need to make to
        the lesson to fit your local constraints or context (for example: pacing and
        time, dealing with classroom setup, etc). \r
         - An overview of the types
        of student needs you’ll likely need to support in your classroom (for example:
        students who are struggling to understand the underlying concept; students
        who are already familiar with the concept, but still have room to learn more;
        etc)\r
         - Your plan for addressing each of the needs outlined above (for
        example: integrating extension activities or other materials for students
        who already know something about the topic)\r
         - How will you address or
        emphasize the connection between lessons in this sequence? \r
        \r
        - **Plan
        for catching up absent students:**\r
        \r
         - How will absent students catch
        up on activities they missed? \r
         - How will you use the fact that the lessons
        in this sequence are related and build on one another to address make-up work?
        \r
        \r
        You can type out your teaching and student support plan in the box
        below, or you can upload a word doc or pdf file. \r
        \r
        ## Getting Credit
        for Completing this Task\r
        \r
        #### Task Review Details\r
        \r
        If this module
        is listed as  your “focus area”, then your response to the prompt above will
        be shared anonymously and reviewed by your peers, and you will review the
        work done by other teachers. Reviewers will be looking for thoughtful and
        thorough answers that demonstrate that you have spent time considering how
        the lesson will play out in your own classroom. Reviewers will have an opportunity
        to give feedback on your submission, and you can respond to that feedback
        and resubmit. \r
        \r
        In order to get credit for completing this task, two
        reviewers need to agree that you have responded to the prompts fully. If reviewers
        don’t feel comfortable making a decision about your task submission, they
        can elevate to a facilitator to review. You will always have a chance to address
        feedback from your reviewers and resubmit your task! Reviewer feedback will
        show up at the bottom of this page, once it’s available. \r
        \r
        <br><br>
      'U4 L5 - 7: Teaching and Student Support Plan_markdown_instruction': |-
        <br><br>\r
        >
        **NOTE: before you start this task, make sure you’ve reviewed the lesson resources
        in this module, and have a good sense of how the lesson works. If you haven’t
        already reviewed the materials, do that now and come back to this task later.**\r
        \r
        #
        Lessons 5 - 7: Teaching and Student Support Plan\r
        \r
        ## Task Description\r
        \r
        Now
        that you have a better sense of this lessons in this sequence, let’s think
        about the types of supports students will need in order to be successful.
        Since the curriculum is based on inquiry learning, lessons feature activities
        that engage students in discovering core concepts themselves. It’s important
        to think through implementation plans and student support. In this task you
        will make a plan for teaching and student support **for one of the lessons
        in this sequence** that takes into account differentiation strategies and
        make-up work for absent students. Your teaching and student support plan should
        cover the following: \r
        \r
        \r
        - **Which lesson in the sequence are you
        discussing?** \r
        \r
        - **Details on how you will implement and differentiate
        the lesson:**\r
        \r
         - An outline of any changes you will need to make to
        the lesson to fit your local constraints or context (for example: pacing and
        time, dealing with classroom setup, etc). \r
         - An overview of the types
        of student needs you’ll likely need to support in your classroom (for example:
        students who are struggling to understand the underlying concept; students
        who are already familiar with the concept, but still have room to learn more;
        etc)\r
         - Your plan for addressing each of the needs outlined above (for
        example: integrating extension activities or other materials for students
        who already know something about the topic)\r
         - How will you address or
        emphasize the connection between lessons in this sequence? \r
        \r
        - **Plan
        for catching up absent students:**\r
        \r
         - How will absent students catch
        up on activities they missed? \r
         - How will you use the fact that the lessons
        in this sequence are related and build on one another to address make-up work?
        \r
        \r
        You can type out your teaching and student support plan in the box
        below, or you can upload a word doc or pdf file. \r
        \r
        ## Getting Credit
        for Completing this Task\r
        \r
        #### Task Review Details\r
        \r
        If this module
        is listed as  your “focus area”, then your response to the prompt above will
        be shared anonymously and reviewed by your peers, and you will review the
        work done by other teachers. Reviewers will be looking for thoughtful and
        thorough answers that demonstrate that you have spent time considering how
        the lesson will play out in your own classroom. Reviewers will have an opportunity
        to give feedback on your submission, and you can respond to that feedback
        and resubmit. \r
        \r
        In order to get credit for completing this task, two
        reviewers need to agree that you have responded to the prompts fully. If reviewers
        don’t feel comfortable making a decision about your task submission, they
        can elevate to a facilitator to review. You will always have a chance to address
        feedback from your reviewers and resubmit your task! Reviewer feedback will
        show up at the bottom of this page, once it’s available. \r
        \r
        <br><br>
      'U4 L8 - 9: Teaching and Student Support Plan_markdown_instruction': |-
        <br><br>\r
        >
        **NOTE: before you start this task, make sure you’ve reviewed the lesson resources
        in this module, and have a good sense of how the lesson works. If you haven’t
        already reviewed the materials, do that now and come back to this task later.**\r
        \r
        #
        Lessons 8 - 9: Teaching and Student Support Plan\r
        \r
        ## Task Description\r
        \r
        Now
        that you have a better sense of this lessons in this sequence, let’s think
        about the types of supports students will need in order to be successful.
        Since the curriculum is based on inquiry learning, lessons feature activities
        that engage students in discovering core concepts themselves. It’s important
        to think through implementation plans and student support. In this task you
        will make a plan for teaching and student support **for one of the lessons
        in this sequence** that takes into account differentiation strategies and
        make-up work for absent students. Your teaching and student support plan should
        cover the following: \r
        \r
        \r
        - **Which lesson in the sequence are you
        discussing?** \r
        \r
        - **Details on how you will implement and differentiate
        the lesson:**\r
        \r
         - An outline of any changes you will need to make to
        the lesson to fit your local constraints or context (for example: pacing and
        time, dealing with classroom setup, etc). \r
         - An overview of the types
        of student needs you’ll likely need to support in your classroom (for example:
        students who are struggling to understand the underlying concept; students
        who are already familiar with the concept, but still have room to learn more;
        etc)\r
         - Your plan for addressing each of the needs outlined above (for
        example: integrating extension activities or other materials for students
        who already know something about the topic)\r
         - How will you address or
        emphasize the connection between lessons in this sequence? \r
        \r
        - **Plan
        for catching up absent students:**\r
        \r
         - How will absent students catch
        up on activities they missed? \r
         - How will you use the fact that the lessons
        in this sequence are related and build on one another to address make-up work?
        \r
        \r
        You can type out your teaching and student support plan in the box
        below, or you can upload a word doc or pdf file. \r
        \r
        ## Getting Credit
        for Completing this Task\r
        \r
        #### Task Review Details\r
        \r
        If this module
        is listed as  your “focus area”, then your response to the prompt above will
        be shared anonymously and reviewed by your peers, and you will review the
        work done by other teachers. Reviewers will be looking for thoughtful and
        thorough answers that demonstrate that you have spent time considering how
        the lesson will play out in your own classroom. Reviewers will have an opportunity
        to give feedback on your submission, and you can respond to that feedback
        and resubmit. \r
        \r
        In order to get credit for completing this task, two
        reviewers need to agree that you have responded to the prompts fully. If reviewers
        don’t feel comfortable making a decision about your task submission, they
        can elevate to a facilitator to review. You will always have a chance to address
        feedback from your reviewers and resubmit your task! Reviewer feedback will
        show up at the bottom of this page, once it’s available. \r
        \r
        <br><br>
      U4 Model App_markdown_instruction: |-
        # This is the template for the U4 model
        app
      U4 Model Design 1_markdown_instruction: |-
        <div markdown="1" style="float:
        right; margin: 20px;">\r
        \r
        ![expandable](https://curriculum.code.org/media/screen_model.png)\r
        \r
        <br/>\r
        \r
        Click
        to expand\r
        \r
        </div>\r
        \r
        # Creating a digital prototype\r
        \r
        Using
        the prototype to the right (click the image to enlarge it) you're going to
        create a digital prototype of the example app "Recycling Finder". We've
        already added a few of the elements for you, including the title, but it doesn't
        look quite right yet. We'll go over each element of this as we go, but for
        now let's **just focus on the title**.\r
        \r
        <!--<img src="https://images.code.org/66633526e03550bedb8503fefdc2ece3-image-1502921575904.png"
        style="width: 300px; float: right; clear: both;">-->\r
        \r
        # Do This\r
        \r
        *
        **Make sure you are in Design Mode,** the switch appears above your app window
        on the left.\r
        * **Click on the title text** to view its properties.\r
        *
        **Change the property "text"** to "Recycling Finder".\r
        * **Change the
        "font size"** to make the title larger.\r
        * **Change the "text alignment"**
        so the title is centered on the screen.\r
        \r
        _Note: Make sure you click
        **"Run"** before moving on to save your progress._
      U4 Model Design 2_markdown_instruction: |-
        <div markdown="1" style="float:
        right; margin: 20px;">\r
        \r
        ![expandable](https://images.code.org/c0a6e147bc1cb940893f87ffd25b5015-image-1505758331506.png)\r
        \r
        <br/>\r
        \r
        Click
        to expand\r
        \r
        </div>\r
        \r
        # Adding more text\r
        \r
        Each screen of your
        app is composed of multiple design _elements_. You can drag out elements from
        the "Design Toolbox" on the left side of the workspace. To add more blocks
        of text, just drag out additional "label" elements.\r
        \r
        # Do This\r
        \r
        *
        **Drag out a new "label" element** and place it where the "home_description"
        text should be.\r
        * **Change the id** to match the prototype (home_description)\r
        *
        **Change the field "text"** to match the prototype.\r
        * **Resize** the
        text area by clicking and dragging the bottom right corner.\r
        * **Change
        any other properties** to make the text look like you want it to.
      U4 Model Design 3_markdown_instruction: |-
        <div markdown="1" style="float:
        right; margin: 20px;">\r
        \r
        ![expandable](https://images.code.org/cad5b0e54f67976fee68ecf29c2a603b-image-1505758463551.png)\r
        \r
        <br/>\r
        \r
        Click
        to expand\r
        \r
        </div>\r
        \r
        # Adding images\r
        \r
        The prototype just has
        a plain black square where the logo should be - let's add an image to spice
        it up. The "image" element allows you to either upload an image from your
        computer or select from a library of graphic icons.\r
        \r
        \r
        # Do This\r
        \r
        *
        **Drag out a new "image" element** and place between the description and
        the title.\r
        * **Change the id** to match the prototype.\r
        * **Click the
        "Choose..." link** next to the "image" field.\r
        * **Select the "Icons"
        tab** and choose an icon for your logo.\r
        * **Change the color** of the icon
        using the "icon color" field.
      U4 Model Design 4_markdown_instruction: |-
        <div markdown="1" style="float:
        right; margin: 20px;">\r
        \r
        ![expandable](https://images.code.org/17b565cb2f5da12babc16fbd22685732-image-1505758655682.png)\r
        \r
        <br/>\r
        \r
        Click
        to expand\r
        \r
        </div>\r
        \r
        # Adding buttons\r
        \r
        Buttons allow your
        user to interact with your app. This prototype screen will need three buttons
        (each shaded gray on the prototype.) We've already added the Search button,
        so you just need to add Contact and About.\r
        \r
        # Do This\r
        \r
        * **Drag
        out a new "button" element** for each of the two remaining buttons.\r
        *
        **Change the ids** to match the prototype.\r
        * **Change the text** to match
        the prototype.\r
        * **Modify other properties** to make the screen look like
        you'd like.\r
        \r
        <img src="https://images.code.org/4cab6a5233cf07df0d8e312932762012-image-1444314797615.gif"
        style="width: 500px;">
      U4 Model Design 5_markdown_instruction: |-
        <div markdown="1" style="float:
        right; margin: 20px;">\r
        \r
        ![expandable](https://images.code.org/d257d0b06a24195a40adc60e4c96c0e1-image-1505759167176.png)\r
        \r
        <br/>\r
        \r
        Click
        to expand\r
        \r
        </div>\r
        \r
        # Making a Search Box\r
        \r
        The search box
        in our prototype can be created using a "Text Input" element. This is a
        box that your user can type into, and later your software can read what was
        entered and do something with it.\r
        \r
        # Do This\r
        \r
        * **Add a Text Input**
        element.\r
        * **Change the id** to match the prototype.\r
        * **Add a Label**
        with the text "Location" next to your text input.
      U4 Model Design 6_markdown_instruction: |-
        <div markdown="1" style="float:
        right; margin: 20px;">\r
        \r
        ![expandable](https://images.code.org/7c8f4893c0b1f4bcd2280c950e389c95-image-1505759396699.png)\r
        \r
        <br/>\r
        \r
        Click
        to expand\r
        \r
        </div>\r
        \r
        # Checkboxes\r
        \r
        The type of recyclables
        you're searching for can be set using "Checkbox" elements. We already added
        a checkbox and label for glass, so you just need to add ones for paper and
        plastic.\r
        \r
        # Do This\r
        \r
        * **Add a Checkbox** for each of the options.\r
        *
        **Change the ids** to match the prototype.\r
        * **Add labels** to describe
        each checkbox.
      U4 Model Design 7_markdown_instruction: |-
        <div markdown="1" style="float:
        right; margin: 20px;">\r
        \r
        ![expandable](https://curriculum.code.org/media/screen_model.png)\r
        \r
        <br/>\r
        \r
        Click
        to expand\r
        \r
        </div>\r
        \r
        # Finishing Touches\r
        \r
        By now you should
        have a fairly complete (though non-functional) digital version of the paper
        prototype we started with. All that's left to do is check back over your
        paper prototype and add any final touches you might have missed.\r
        \r
        #
        Do This\r
        \r
        * **Check over the prototype** to make sure you've included
        everything.\r
        * **Read through your IDs** and fix any that aren't descriptive.\r
        *
        **Clean up** any rough edges by resizing or moving around elements.
      U4 Model Program 1.5_markdown_instruction: |-
        <div markdown="1" style="float:
        right; margin: 20px;">\r
        \r
        ![expandable](https://curriculum.code.org/media/screen_model_about.png)\r
        \r
        <br/>\r
        \r
        Click
        to expand\r
        \r
        </div>\r
        \r
        # Design the About Screen\r
        \r
        To add elements
        to your new About screen, you'll need to first select it from the screens
        dropdown.\r
        \r
        # Do This\r
        \r
        * **Complete the About screen** using the
        prototype to the right.\r
        * **Use the screens dropdown** to switch between
        your Home and About screens.
      U4 Model Program 1_markdown_instruction: |-
        # Adding a New Screen\r
        \r
        To complete
        your app, you're going to need more than than just a home screen. Each card
        that you created in your paper prototype is represented by a "screen" in
        App Lab. To create more screens, just click the dropdown at the top of the
        app display and select "New Screen..."\r
        \r
        <img src="https://images.code.org/2b49c36a57fb904d4fcf219ca498647d-image-1504714832027.png"
        style="width: 200px">\r
        \r
        # Do This\r
        \r
        * **Create a New Screen**
        and give it the ID "about".
      U4 Model Program 2.5_markdown_instruction: |-
        # Contact Screen Import\r
        \r
        Yet
        another student created a Contact screen that you can import into your app.
        Their share link is **<a href ="https://studio.code.org/projects/applab/QUAOln68kifScEwQauwNqw/"
        target="_blank">https://studio.code.org/projects/applab/QUAOln68kifScEwQauwNqw/</a>**\r
        \r
        #
        Do This\r
        \r
        * **Select "Import Screen...** from the screens dropdown.\r
        *
        **Copy and paste the above url** into the import screens dialog.\r
        * **Select
        the screen** you wish to import.\r
        * **Click Import** to import the screen.\r
        *
        **Use the screens dropdown** to make sure your app has Home, About, Contact,
        and Search screens.
      U4 Model Program 2_markdown_instruction: |-
        <div markdown="1" style="float:
        right; margin: 20px;">\r
        \r
        ![expandable](https://images.code.org/9ca7398a9b7403dc39ec6a6b2d2b8a5e-image-1477346132059.png)\r
        \r
        <br/>\r
        \r
        Click
        to expand\r
        \r
        </div>\r
        \r
        # Screen Import\r
        \r
        In addition to adding
        new blank screens, you can import screens from "Import Screen..." To import
        a screen from someone else, you'll need them to give you the sharing URL.\r
        \r
        **Note:**
        Screens you import _must not_ share any IDs with elements already in your
        app!\r
        \r
        # Do This\r
        \r
        Another student has created a search results
        screen that you can import into your app. Their app's share link is **<a
        href="https://studio.code.org/projects/applab/XkcpDVj8MJWQvUr9OSgIlA/" target="_blank">https://studio.code.org/projects/applab/XkcpDVj8MJWQvUr9OSgIlA/</a>**\r
        \r
        *
        **Select "Import Screen...** from the screens dropdown.\r
        * **Copy and paste
        the above url** into the import screens dialog.\r
        * **Select the screen**
        you wish to import.\r
        * **Click Import** to import the screen.\r
        * **Use
        the screens dropdown** to switch between your Home, About, and Search screens.
      U4 Model Program 3_markdown_instruction: |-
        # Button Events\r
        \r
        With our screens
        in place, it's time to start actually _programming_ the app so that it responds
        to button clicks. For each button on each screen, you'll want to add an `onEvent`
        block that watches for that button to be clicked and responds appropriately.
        To start off with we'll just watch the "home_search_btn" button and print
        something to the console when it's clicked\r
        \r
        # Do This\r
        \r
        You're
        now in Code Mode (you can use the buttons above your app to switch between
        Code Mode and Design Mode). This is where you can write the code that will
        respond to users interacting with your app.\r
        \r
        ![](https://images.code.org/278b27dd31b6ca014c0dd32c5f964a54-image-1505764431751.png)\r
        \r
        *
        **Drag out an `onEvent` block** from the code toolbox.\r
        * **Select "home_search_btn"**
        from the "id" dropdown.\r
        * **Drag out a `console.log` block** from the
        variables drawer.\r
        * **Run your app**.\r
        * **Click the Search button**
        and look for messages in the console.
      U4 Model Program 4_markdown_instruction: |-
        # Changing Screens On Click\r
        \r
        The
        `setScreen` block will change your app to whichever screen you specify. If
        you place a `setScreen` block _inside_ an `onEvent` block, you can program
        your buttons to change to the correct screen.\r
        \r
        # Do This\r
        \r
        Using
        the `onEvent` block that you've created, make your program change to the
        "search" screen when the "home_search_btn" is clicked.\r
        \r
        * **Drag
        out a `setScreen` block** an put it inside the `onEvent` block.\r
        * **Select
        "search"** from the `setScreen` dropdown.\r
        * **Run your app** and test
        the "home_search_btn" button.
      U4 Model Program 5_markdown_instruction: |-
        # Wire Up the Other Buttons\r
        \r
        Now
        that you've made one button work, just follow the same pattern for all of
        your others.\r
        \r
        # Do This\r
        \r
        * **Add an `onEvent` block** for each
        button.\r
        * **Select the button ID** from the "id" dropdown.\r
        * **Add
        a `setScreen` block** inside each `onEvent` block.\r
        * **Select the screen
        ID** from each `setScreen` dropdown.\r
        * **Run your app** and test that all
        of the buttons work.
      U4 vigenere cipher 2_markdown_instruction: "# Simple Markdown?"
      U4-AP-Practice-Choose-The-Data-Concern_markdown_instruction: |-
        # AP Practice
        - Identify the Data Concern\r
        \r
        One component of the **AP Explore Performance
        Task** is describing a data concern related to a computing innovation.\r
        \r
        <div
        style="width: 80%; margin: auto; background-color: #EEEEEE; padding: 10px;
        font-family: serif; font-size: 12pt">\r
        \r
        <b>Computing Innovation</b>\r
        <br>\r
        <br>\r
        2d.  Using
        specific details, describe\r
        <br>\r
        <br>\r
        \r
        <li>at least one data storage
        concern, data privacy concern, or data security concern directly related to
        the computing innovation.</li>\r
        \r
        </div>\r
        <br>\r
        \r
        ## Sample Responses\r
        \r
        Two
        of the responses below qualify as a data storage, privacy or security concern
        and two do not.  Can you identify the two that do?\r
        \r
        ---\r
        \r
        **Response
        A:** *Facial recognition technology stores data mapping a user's face, for
        example to unlock a phone. A privacy concern for this technology is that governments
        could force technology companies to turn over this data allowing them to passively
        and continuously monitor the movements of its citizens without their knowledge
        or consent.*\r
        \r
        **Response B:** *Software that tracks soccer player movements
        on the field can be used to generate new statistics that help value contributions
        of individual players. A data concern is that this information may be used
        to justify getting rid of less productive players.*\r
        \r
        **Response C:**
        *Social networks allow users to share vast amounts of private information
        about their lives. A security concern of this technology is that this publicly
        available data may enable stalkers or other criminals to identify potential
        targets.*\r
        \r
        **Response D:** *Self-driving vehicles store vast amounts
        of information about their location and the world around them. A data concern
        for the trucking industry is that all of this information could be coordinated
        to make trucks more efficient causing many people who drive trucks for a living
        to lose their jobs.*\r
        \r
        ---\r
        \r
        Here's the scoring guide for this
        part of the question\r
        \r
        <div style="magin:auto">\r
        \t<img src="https://images.code.org/6ff69107762c5afb27661625600d2bfb-image-1510609916491.51.42
        PM.png">\r
        </div>\r
        \r
        <br>\r
        \r
        \r
        ## Choose the two (2) responses
        that are data concerns\r
        \r
        **Choose the two responses (A, B, C, or D) that
        would earn the point as data storage, security or privacy concern. Then justify
        why you chose them.**
      U4-AP-Practice-Choose-The-Harmful-Effect_markdown_instruction: |
        # AP Practice
        - Justify the Score\r
        \r
        One component of the **AP Explore Performance Task**
        is describing a data concern related to a computing innovation.\r
        \r
        <div
        style="width: 80%; margin: auto; background-color: #EEEEEE; padding: 10px;
        font-family: serif; font-size: 12pt">\r
        \r
        <b>Computing Innovation</b>\r
        <br>\r
        <br>\r
        2d.  Using
        specific details, describe\r
        <br>\r
        <br>\r
        <ul>\r
        <li>at least one data
        storage concern, data privacy concern, or data security concern directly related
        to the computing innovation.</li>\r
        </ul>\r
        </div>\r
        <br>\r
        \r
        **Sample
        Student Response:** A student submitted the following response as part of
        this question.\r
        \r
        *"FaceApp has permission to use many devices on your
        smartphone, including the camera. A data concern that arises from this is
        that the company could use this permission to see what you're doing."*\r
        \r
        \r
        **Scoring
        Guide:** Here's the scoring guide for this part of the question\r
        \r
        <div
        style="magin:auto">\r
        \t<img src="https://images.code.org/96f6c02681616656f107dac058d15de6-image-1511206516901.35.08
        AM.png">\r
        </div>\r
        \r
        <br>\r
        \r
        # Justify the Score\r
        \r
        Based on
        the scoring guidelines listed above, the student would NOT get Row 6 of the
        response and would likely not be awarded Row 7.\r
        \r
        **Explain why the student
        would not be awarded either row. Make a suggestion(s) for ways this response
        could be improved**\r
        \r
        \r
      U4-AP-Practice-Device-or-Data?_markdown_instruction: |-
        # AP Practice - Justify
        the Score\r
        \r
        **Written Prompt** -- Here is a portion of the AP Explore
        Performance Task written response prompt 2d:\r
        \r
        <div style="width: 80%;
        margin: auto; background-color: #EEEEEE; padding: 10px; font-family: serif;
        font-size: 12pt">\r
        \r
        <b>Computing Innovation</b>\r
        <br>\r
        <br>\r
        2d.  Using
        specific details, describe\r
        <br><br>\r
        <li>at least one data storage concern,
        data privacy concern, or data security concern directly related to the computing
        innovation.</li>\r
        </div>\r
        <br>\r
        \r
        **Sample Student Response** -- here
        is a snippet of a sample student response addressing a data concern:\r
        \r
        <div
        style="width: 80%; margin: auto; background-color: #d9f3f5; padding: 10px;
        font-family: serif; font-size: 12pt; line-height: 17pt">\r
        \r
        <em> The
        FaceSnap app has permission to use many devices on your smartphone, including
        the camera. A data privacy concern that arises from this is that the company
        could access the camera to see what you're doing without your knowledge.</em>\r
        \r
        </div>\r
        \r
        <br>\r
        \r
        **Zero
        points!!!** -- based on the scoring guidelines listed below the student would
        **NOT** get a point for Row 6 and would likely **NOT** be awarded a point
        for Row 7 either.\r
        \r
        **Why?** Here are the scoring guidelines for rows
        6 and 7.\r
        \r
        ![](https://images.code.org/96f6c02681616656f107dac058d15de6-image-1511206516901.35.08
        AM.png)\r
        \r
        ## Justify the score\r
        \r
        In the space provided below explain:\r
        \r
        1.
        Why the student would not be awarded either row based on the scoring guidelines.
        \r
        2. Make a suggestion(s) for how to modify the response so the student
        would get the point.
      U4-AP-Practice-Justify-the-Score_markdown_instruction: |-
        # AP Practice - Justify
        the Score\r
        \r
        **Written Prompt** -- Here is a portion of the AP Explore
        Performance Task written response prompt 2d:\r
        \r
        <div style="width: 80%;
        margin: auto; background-color: #EEEEEE; padding: 10px; font-family: serif;
        font-size: 12pt">\r
        \r
        <b>Computing Innovation</b>\r
        <br>\r
        <br>\r
        2d.  Using
        specific details, describe\r
        <br><br>\r
        <li>at least one data storage concern,
        data privacy concern, or data security concern directly related to the computing
        innovation.</li>\r
        </div>\r
        <br>\r
        \r
        **Sample Student Response** -- here
        is a snippet of a sample student response addressing a data concern:\r
        \r
        <div
        style="width: 80%; margin: auto; background-color: #d9f3f5; padding: 10px;
        font-family: serif; font-size: 12pt; line-height: 17pt">\r
        \r
        <em> The
        FaceSnap app has permission to use many devices on your smartphone, including
        the camera. A data privacy concern that arises from this is that the company
        could access the camera to see what you're doing without your knowledge.</em>\r
        \r
        </div>\r
        \r
        <br>\r
        \r
        **Zero
        points!!!** -- based on the scoring guidelines listed below the student would
        **NOT** get a point for Row 6 and would likely **NOT** be awarded a point
        for Row 7 either.\r
        \r
        **Why?** Here are the scoring guidelines for rows
        6 and 7.\r
        \r
        ![](https://images.code.org/96f6c02681616656f107dac058d15de6-image-1511206516901.35.08
        AM.png)\r
        \r
        ## Justify the score\r
        \r
        In the space provided below explain:\r
        \r
        1.
        Why the student would not be awarded either row based on the scoring guidelines.
        \r
        2. Make a suggestion(s) for how to modify the response so the student
        would get the point.
      U4L01 Free Response_markdown_instruction: |
        This is the free response question
        text.
      U4L02 - Objects - Template1_markdown_instruction: "# Template"
      U4L02 - Objects - createObject_markdown_instruction: |-
        # Creating Your Own Objects\r
        \r
        **Objects
        are unordered collections of name value pairs**. Like an array they can hold
        many pieces of information, but where arrays use a numeric index to reference
        specific pieces of information, objects use a descriptive name. We lose the
        "ordered" nature of our data, but we gain the ability to describe the purpose
        of each piece of data within a collection.\r
        \r
        Consider the event objects
        you just looked at. An array can just as easily store all the information
        they contain, but it would be difficult to determine what any of the values
        represent.\r
        \r
        **The syntax for creating objects of your own is shown below**\r
        \r
        *
        Curly braces are placed around the contents of an object `{}`\r
        * Names are
        separated from values with a colon `:`\r
        * Name value pairs are separated
        by commas `,`\r
        * Names must be strings. If they are not they will be coerced
        to strings, possibly creating unpredictable behavior.\r
        * **Example:** `var
        user = {"userName":"Ada", "password":"csIsAwesome", "yearBorn":1815};`\r
        \r
        #
        Do This\r
        \r
        **Starter code** is provided which creates an empty object
        and displays its value.\r
        \r
        * Modify the code **using the syntax above**
        to create an object of your own. Your object should contain **at least 5 pieces
        of information including both strings and numbers**.\r
        * **Run the program**
        and confirm all values in your object appear as you expected.
      U4L02 - Objects - eventParameter_markdown_instruction: |-
        # We've Seen Objects
        Before\r
        \r
        We're going to see how we can use objects to organize data
        in our own apps, but this actually isn't the first time we've used objects
        in our programs. **The object that we've used most frequently is the event
        parameter of our event handlers**. This single object contains many pieces
        of information about the event which can be accessed to determine how to respond
        to the event. For example `event.key` contains the key that was pressed for
        key events, and `event.offsetX` and `event.offsetY` contain the location of
        the mouse for mouse events.\r
        \r
        Before we move on to creating objects of
        our own, let's take another look at this event parameter (or as we'll call
        it now event object) and recall how they were used.\r
        \r
        # Do This\r
        \r
        **Starter
        code** is provided which creates event handlers for both a "click" and "keydown"
        event and displays the contents of the event object they create.\r
        \r
        *
        **Run the program** and trigger both a keyboard event and a mouse event.\r
        *
        **Examine the objects displayed in the Debug Console** to recall the different
        pieces of information they contain.\r
        * **Reflect: ** Why wouldn't we want
        this information stored in many variables? Why wouldn't we want this information
        stored in an array?
      U4L02 Free Response_markdown_instruction: "Free response prompt here.\n\n"
      U4L03 Free Response_markdown_instruction: "Free response prompt here.\n\n"
      U4L04 Free Response_markdown_instruction: "Free response prompt here.\n\n"
      U4L05 Free Response_markdown_instruction: "Free response prompt here.\n\n"
      U4L06 Data Storage 1_markdown_instruction: |-
        ## Create Record\r
        \r
        #### Fill
        in your name instead of "Enter Your Name", run the app and click the button.
        Run it multiple times with different names! Watch the console and use the
        ‘View Data” button to see how the table is updated. *As you play around make
        sure you can explain the purpose of each of the circled parts of the diagram.*\r
        \r
        ![](https://images.code.org/2768f0e65aa2167da70d24aa3975588a-image-1441998331790.52.01
        PM.png)
      U4L06 Data Storage 2_markdown_instruction: |-
        ## User Input Data\r
        \r
        The app
        is a continuation of the previous one we started. Add a text label to collect
        the users name and use that as the data input for the record. Instead of creating
        the JSON object and updating the values when the button is click try updating
        the JSON object whenever the value in the textbox is changed. \r
        \r
        **Run
        the app and click the button multiple times and see what happens. Is there
        a problem you notice? **
      U4L06 Data Storage 3_markdown_instruction: |-
        ## Clear the Textbox\r
        \r
        We
        want to improve the user experience. Once they have submitted their data for
        storage, it would be nice to clear the textbox.  Update your app to clear
        the textbox after the data is stored.
      U4L06 Data Storage 4_markdown_instruction: |-
        ## Data From Dropdowns\r
        \r
        Your
        app may need other types of user data to be saved other than just text boxes.
        \r
        \r
        ** Add a label and drop down box to your app and save the data to
        your JSON object and add it to your table. **\r
        \r
        Don't forget about the
        user experience! How can you reset the dropdown after the user information
        has been stored?
      U4L06 Data Storage 5_markdown_instruction: |
        ## Data Collection From Other Design
        Elements\r
        There are other design elements we could use to collect data from
        a user. Check out radio buttons and checkboxes. Lets add a couple radio buttons
        or checkboxes to our app. Then find a way to collect the data from those.
        **Hint** This may take a few more steps than the data we have collected before.
      U4L06 Data Storage 6_markdown_instruction: "## Non-User Provided Data\\r\n\\r\nThere\nare
        ways to collect data without having a user enter data. Two ways to collect\ndata
        not provided by the user are the getTime() and getUserId() blocks. Use\none
        of these blocks to collect additional data. "
      U4L06 Data Storage 7_markdown_instruction: |-
        For your data collection app you
        may need to collect data over multiple screens. Add a second screen to the
        sample app we have been building to capture an image from a user. Return to
        screen 1 after the JSON object has been stored in the table.
      U4L06 Free Response_markdown_instruction: "Free response prompt here.\n\n"
      U4L07 Free Response_markdown_instruction: "Free response prompt here.\n\n"
      U4L08 Free Response_markdown_instruction: "Free response prompt here.\n\n"
      U4L09 Free Response_markdown_instruction: "Free response prompt here.\n\n"
      U4L10 Free Response_markdown_instruction: "Free response prompt here.\n\n"
      U4L11 Free Response_markdown_instruction: "Free response prompt here.\n\n"
      U4L12 Free Response_markdown_instruction: "Free response prompt here.\n\n"
      U4L13 Free Response_markdown_instruction: "Free response prompt here.\n\n"
      U4L14 Free Response_markdown_instruction: "Free response prompt here.\n\n"
      U4L15 Free Response_markdown_instruction: "Free response prompt here.\n\n"
      U4L15 Read Data 1_markdown_instruction: |
        ## Reading Data\r
        \r
        We have looked
        closely at createRecord. Now we are going to to learn how to readRecords out
        of a table. This can be useful for instances where you want to display stored
        data back to your user.\r
        \r
        1. Look at the code and write down on paper
        what you think it will do.  Think back to createRecord as you make your guess.\r
        1.
        Run the level\r
        1. Open the data view\r
        1. Take a look at the outcome and
        see if you connect the code to the output.\r
        1. Make it print a different
        column of information.\r
      U4L15 Read Data 2_markdown_instruction: |-
        Student should create a sentence which
        puts together all the pieces from a record\r
        \r
        **Name** is **Age** years
        old and like **Food**
      U4L15 Read Data 3_markdown_instruction: |-
        Print the sentence using the first
        JSON object in the array.\r
        \r
        ** Hint: ** Delete the for loop - dont forget
        the closing brace! See what happens.
      U4L15 Read Data 4_markdown_instruction: |-
        Now instead of the first record, we
        want a random record from the list of records.  Can you figure out how to
        make this happen?\r
        \r
        **HINT**\r
        1. Find out the length of the records\r
        1.
        Make a variable that holds a random number\r
        1. Use it to get a random record
      U4L16 Free Response_markdown_instruction: "Free response prompt here.\n\n"
      U4L17 Free Response_markdown_instruction: "Free response prompt here.\n\n"
      U4L18 Free Response_markdown_instruction: "Free response prompt here.\n\n"
      U4L19 Free Response_markdown_instruction: "Free response prompt here.\n\n"
      U4L2 - FR Practice AP response about data_markdown_instruction: |
        ## AP Practice\r
        \r
        The
        AP *Explore Performance task* requires you to provide short written responses
        about an innovation that you research.  Here are portions of the AP writing
        prompts to consider:\r
        \r
        \tUsing specific details, describe:\r
            • the
        data your innovation uses;\r
            • how the innovation consumes (as input),
        produces (as output), and/or transforms data\r
        \r
        Practice an AP response
        by responding the prompt above, summarizing the data innovation you researched
        for this lesson. Your first sentence should name the innovation you are writing
        about.\r
      U4L20 Free Response_markdown_instruction: "Free response prompt here.\n\n"
      U4L21 Free Response_markdown_instruction: "Free response prompt here.\n\n"
      U4L22 Free Response_markdown_instruction: "Free response prompt here.\n\n"
      U4L23 Free Response_markdown_instruction: "Free response prompt here.\n\n"
      U4L24 Free Response_markdown_instruction: "Free response prompt here.\n\n"
      U4L3 - FR Identifying people_markdown_instruction: |-
        Consider the following
        scenario:\r
        \r
        *In order to dampen the effect of a potential data breach
        or accidental release of records a health care company has decided to remove
        a lot of personally identifiable information in its health records, like names,
        phone numbers and so on.  In its place, along with all medical information,
        they plan to store ONLY the gender, age, and zip code of the patient.*\r
        \r
        **Give
        your opinion**: Is this health care company doing enough to protect the personal
        information of patients? If yes, explain why this is the best they can do.
        If no, explain what they should do instead.  (Limit your response to a few
        sentences).
      U4L4 - FR cost of free_markdown_instruction: |-
        ## AP Practice\r
        \r
        The AP
        *Explore Performance task* requires you to provide short written responses
        about an innovation that you research.  Here are portions of the prompts to
        consider:\r
        \r
        \r
        1. *Explain at least one beneficial effect and at least
        one harmful effect the computing innovation has had, or has the potential
        to have, on society, economy, or culture.*\r
        \r
        2. *Using specific details,
        describe: at least one data storage concern, data privacy concern, or data
        security concern directly related to the computing innovation.*\r
        \r
        \r
        Respond
        to both of those prompts in light of what you learned about data privacy policies
        in this lesson. The "innovation" you choose could be narrow, like a specific
        app, or if it makes sense broad, like an entire company.  \r
        \r
        The main
        objectives of your response are to:\r
        \r
        * Name one benefit (or potential
        benefit)\r
        * Name one harmful effect (or potentially harmful)\r
        * Be specific
        about the data that (presumably) leads to the harmful effect.\r
        \r
        Limit
        your response to a few sentences for each point above.
      U4LXX Free Response_markdown_instruction: "Free response prompt here.\n\n"
      U5 AP Create Practice onEvent Doesnt Count_markdown_instruction: |-
        # AP Practice
        - Create PT - Choosing an Abstraction\r
        \r
        One component of the **AP Create
        Performance Task** is creating and describing an abstraction in your program.
        Here's the actual prompt.\r
        \r
        <div style="width: 80%; margin: auto; background-color:
        #EEEEEE; padding: 10px; font-family: serif; font-size: 12pt">\r
        \r
        <b>2.
        Written Responses</b>\r
        <ul>\r
        2d. Capture and paste a program code segment
        that contains an abstraction you developed individually on your own (marked
        with a <b>rectangle</b> in <b>section 3</b> below). This abstraction must
        integrate mathematical and logical concepts.\r
        Explain how your abstraction
        helped manage the complexity of your program.\r
        <i>(Must not exceed 200 words)</i>\r
        </ul>\r
        </div>\r
        <br>\r
        \r
        Here's
        one row of the scoring guide for this question\r
        \r
        <div style="magin:auto">\r
        \t<img
        src="https://images.code.org/7d5773ed70d947bf75e0c1b3f7e60911-image-1515454332418.32.05
        PM.png">\r
        </div>\r
        \r
        <br>\r
        \r
        # Grade the Response\r
        \r
        Below is
        a segment of code from a "clicker" program with a rectangle drawn around
        a portion of the code identifying an abstraction.\r
        \r
        ![](https://images.code.org/7ceaa61af4feb06707f593e4b4ec1947-image-1515454046037.26.18
        PM.png)\r
        \r
        Each row is worth one point that either can or cannot be awarded.
        **Explain why you would or would NOT award the point for Row 7 based on the
        criteria given above.**
      U5 AP Practice Create Abstraction Color Sleuth_markdown_instruction: |-
        # AP
        Practice - Create PT - Abstraction\r
        \r
        One component of the **AP Create
        Performance Task** is describing an abstraction within your program.\r
        \r
        <div
        style="width: 80%; margin: auto; background-color: #EEEEEE; padding: 10px;
        font-family: serif; font-size: 12pt">\r
        \r
        <b>2. Written Responses</b>\r
        <ul>\r
        2d.
        Capture and paste a program code segment that contains an abstraction you
        developed individually on your own (marked with a <b>rectangle</b> in <b>section
        3</b> below). This abstraction must integrate mathematical and logical concepts.
        Explain how your abstraction helped manage the complexity of your program.\r
        <i>(Must
        not exceed 200 words)</i></ul>\r
        </div>\r
        <br>\r
        \r
        Here's one row of
        the scoring guide for this question\r
        \r
        <div style="magin:auto">\r
        \t<img
        src="https://images.code.org/d994f69c99550a352de5565ee4d74f54-image-1516226857132.04.40
        PM.png">\r
        </div>\r
        \r
        # Write the Response\r
        \r
        ![](https://images.code.org/33f44fc55155b5e75afd37475640bc16-image-1515653209087.46.40
        PM.png)\r
        \r
        <div style="clear:both"></div>\r
        \r
        <br>\r
        \r
        The code
        selection above is taken from the Color Sleuth activity you just completed.
        This selection **would count as an abstraction** on the Create PT, but to
        earn Row 8 **you will need to describe how this abstraction manages complexity**.
        \r
        \r
        **Write response 2d describing the abstraction above. Use the writing
        prompt and scoring guidelines as a guide.**
      U5 AP Practice Create Algorithm Color Sleuth_markdown_instruction: |-
        # AP Practice
        - Create PT - Algorithm\r
        \r
        One component of the **AP Create Performance
        Task** is describing an algorithm within your program.\r
        \r
        <div style="width:
        80%; margin: auto; background-color: #EEEEEE; padding: 10px; font-family:
        serif; font-size: 12pt">\r
        \r
        <b>2. Written Responses</b>\r
        <ul>\r
        2c.
        Capture and paste a program code segment that implements an algorithm (marked
        with an <b>oval</b> in <b>section 3</b> below) and that is fundamental for
        your program to achieve its intended purpose. This code segment must be an
        algorithm you developed individually on your own, must include two or more
        algorithms, and must integrate mathematical and/or logical concepts. Describe
        how each algorithm within your selected algorithm functions independently,
        as well as in combination with others, to form a new algorithm that helps
        to achieve the intended purpose of the program. <i>(Must not exceed 200 words)</i>\r
        </ul>\r
        </div>\r
        <br>\r
        \r
        Here's
        two rows of the scoring guide for this question\r
        \r
        <div style="magin:auto">\r
        \t<img
        src="https://images.code.org/febdb2c140b9a4f34f2d4a93370c8b53-image-1515518259767.17.31
        AM.png">\r
        </div>\r
        \r
        # Write the Response\r
        \r
        <img src="https://images.code.org/e841e427e8020f075c8718631bf0cfb3-image-1516228295228.31.22
        PM.png" style="float:right">\r
        \r
        This code selection is taken from the
        Color Sleuth activity you just completed and **would count as an algorithm**
        on the Create PT.\r
        \r
        **Write response 2c describing the algorithm above.
        Use the writing prompt and scoring guidelines as a guide.** Here are the main
        points to make sure you include.\r
        \r
        * Name your main algorithm and each
        of the two sub-algorithms\r
        * Explain *what* each sub-algorithm does and
        *how* the code of each actually works\r
        * Explain how the main algorithm
        works and how it helps achieve the purpose of the program
      U5 AP Practice Create Algorithm How vs What_markdown_instruction: |-
        # AP Practice
        - Create PT - Process\r
        \r
        One component of the **AP Create Performance
        Task** is describing the development process used for your program.\r
        \r
        <div
        style="width: 80%; margin: auto; background-color: #EEEEEE; padding: 10px;
        font-family: serif; font-size: 12pt">\r
        \r
        <b>2. Written Responses</b>\r
        <ul>\r
        2b.
        Describe the incremental and iterative development process of your program,
        focusing on two distinct points in that process. Describe the difficulties
        and/or opportunities you encountered and how they were resolved or incorporated.
        In your description clearly indicate whether the development described was
        collaborative or independent. At least one of these points must refer to independent
        program development. <i>(Must not exceed 200 words)</i>\r
        </ul>\r
        </div>\r
        <br>\r
        \r
        Here's
        two rows of the scoring guide for this question\r
        \r
        <div style="magin:auto">\r
        \t<img
        src="https://images.code.org/18480a117da79e3c5599edfe0b98836a-image-1515438403469.06.32
        AM.png">\r
        </div>\r
        \r
        # Grade the Response\r
        \r
        A student wrote the
        following response.\r
        \r
        *"In developing my program I encountered two major
        problems. The first one was early in programming when sometimes the apple
        would disappear from the screen. By debugging my program I was able to recognize
        that the ranges of my random X values went from 0-3200, not 0-320. I was easily
        able to correct this issue in my code. A second issue occurred when I realized
        that classmates using the game often didn't know how to start it. In order
        to fix this problem I made the button significantly larger and a different
        color than the background. Afterwards I no longer saw this problem."*\r
        \r
        \r
        Each
        row is worth one point that either can or cannot be awarded. **Explain why
        you would or would not award the points for Row 2 and Row 3 based on the criteria
        given above**
      U5 AP Practice Create Process_markdown_instruction: |-
        # AP Practice - Create
        PT - Process\r
        \r
        One component of the **AP Create Performance Task** is
        describing the development process used for your program.\r
        \r
        <div style="width:
        80%; margin: auto; background-color: #EEEEEE; padding: 10px; font-family:
        serif; font-size: 12pt">\r
        \r
        <b>2. Written Responses</b>\r
        <ul>\r
        2b.
        Describe the incremental and iterative development process of your program,
        focusing on two distinct points in that process. Describe the difficulties
        and/or opportunities you encountered and how they were resolved or incorporated.
        In your description clearly indicate whether the development described was
        collaborative or independent. At least one of these points must refer to independent
        program development. <i>(Must not exceed 200 words)</i>\r
        </ul>\r
        </div>\r
        <br>\r
        \r
        Here's
        two rows of the scoring guide for this question\r
        \r
        <div style="magin:auto">\r
        \t<img
        src="https://images.code.org/18480a117da79e3c5599edfe0b98836a-image-1515438403469.06.32
        AM.png">\r
        </div>\r
        \r
        # Grade the Response\r
        \r
        A student wrote the
        following response.\r
        \r
        *"In developing my program I encountered two major
        problems. The first one was early in programming when sometimes the apple
        would disappear from the screen. By debugging my program I was able to recognize
        that the ranges of my random X values went from 0-3200, not 0-320. I was easily
        able to correct this issue in my code. A second issue occurred when I realized
        that classmates using the game often didn't know how to start it. In order
        to fix this problem I made the button significantly larger and a different
        color than the background. Afterwards I no longer saw this problem."*\r
        \r
        \r
        Each
        row is worth one point that either can or cannot be awarded. **Explain why
        you would or would not award the points for Row 2 and Row 3**.\r
        \r
        Hint:
        Pay particular attention to the last column of the scoring guidelines and
        the checklists entitled "Do NOT award a point if..."
      U5 Booleans_markdown_instruction: |-
        ### Points to pay attention to:\r
        \r
        1.
        What's a *Boolean Expression?*\r
        2. Why is it called a "Boolean"?\r
        3.
        Is this a legal expression?  `10 > 25`?
      U5 Check Password if statement lock image_markdown_instruction: |
        <img src="https://images.code.org/117a2a8e098760173f16048fde721295-image-1479829058899.gif"
        style="float: right; width: 150px">\r
        ## You try it -- Text Password Checker\r
        \r
        **Key
        idea**: You can use `==` to compare strings as well as numbers.  \r
        \r
        *
        Let's use an if-statement in an event handler to compare text that a user
        inputs in a UI element.\r
        \r
        **The setup:**\r
        * Note the setup in Design
        Mode\r
        * There are two images: a red lock, and a green "unlock".\r
        * The
        green "unlock" is *hidden* at the start.\r
        \r
        ## Do this:\r
        \r
        **Add
        an if-statement to the event handler to check the password and display the
        "unlock" only if the password is correct** \r
        \r
        * You can use `==` to
        compare the text you get from the *password_input* text box and a string you
        want to use as the password. The boolean expression you should use should
        look like this:\r
        \r
        ![](https://images.code.org/9124274f38ed19bdae6cfc4b492162b6-image-1479828796051.png)\r
        \r
        *
        If the user entered the correct password then **show** the green "unlock"
        and **hide** the red lock.\r
        \t* We've provide the code to hide and show
        the images. You just need to add the if-statement.\r
        * Otherwise do nothing.  They
        can try again.\r
        \r
      U5 Check Password if-else string_markdown_instruction: |-
        <img src="https://images.code.org/e878b414d7f8ce4fd96a2c160602e07e-image-1479830181568.gif"
        style="float: right">\r
        \r
        ## You try it - adding else to the password
        checker\r
        \r
        If we add an else clause to the password checker we can make
        it act a little fancier - study the animation at right.\r
        \r
        **Add an `if-else`
        statement to the *login_btn* event handler that:**\r
        \r
         * Shows the unlock
        and displays "Access Granted" if the user enters the password correctly.  \r

        * Otherwise, show the lock and display "Access Denied"\r
        \r
        Note the setup:\r
        \r
        *
        Again we have two images - a lock and an unlock - but this time *both* are
        hidden at the start.\r
        * There is also a text label at the bottom where we'll
        display a message, but it starts empty as well\r
        \r
        There are **two event
        handlers**\r
        \r
        * The first event handler - on *login_btn* "click" - is
        where you should add your `if-else` statement\r
        \t* We've provided the statements
        you need to add into the appropriate clause\r
        \r
        * The second event handler
        - on password_input "click" -- acts as a reset\r
        \t* You do not need to
        modify anything in this event handler\r
            * It simply hides all images
        and sets the message text to `""`\r
        \r
        \r
        <details><summary>HINT: [click
        to expand]</summary>\r
        <br>\r
        Your if-else statement is going to use the
        same boolean expression as before.  The structure of it should look like this:\r
        <pre>\r
        if(
        getText("password_input") == "some secret" ){\r
           // show green unlock\r
           //
        display "Access Granted"\r
        } else {\r
        \t// show red lock\r
           // display
        "Access DENIED"\r
        }\r
        </pre>\r
        </details>
      U5 ColorSleuth add global var correct plus console.log_markdown_instruction: |-
        ##
        Next: display which button was chosen in the console\r
        \r
        In the game the
        "correct" button is the one we randomly chose to make a different color.  Let's
        add a console.log message to display its ID - it will make future work easier.\r
        \r
        *
        add a console.log message like `console.log("correct one is: " + randButtonId)`
        at the end of the `setBoard` function.\r
        * overall the setBoard function
        will look like this:\r
        \r
        \t\tfunction setBoard(){\r
                \t\r
                    //
        generate random color\r
                    // make all 4 buttons have same color\r
                    //
        pick a random Button Id\r
                    // set its color to something different\r
                    \r
                    console.log("correct
        one is: " + randButtonId);  <-- Add this line\r
        \t\t}
      U5 ColorSleuth add score variables and update with console_markdown_instruction: |
        Fun
        part - hide/show player highlight in app.\r
        \r
        DO THIS:\r
        \r
        * in nextTurn()
        hide both player highlights\r
        * in if statement show the correct one in \r
        \r
        [anigif
        showing functionality]\r
        \r
      U5 ColorSleuth checkCorrect make global var_markdown_instruction: |
        ## Step
        1 - Make randButtonId a global variable\r
        \r
        Making `randButtonId` global
        means modifying the code to declare/create it *outside* of any function and
        then setting its value *inside* setBoard().\r
        \r
        * Create a new variable
        on line 1: `var randButtonId`;\r
        * **Switch to text-mode** \r
        * Inside the
        setBoard() function, delete the `var` in front of `randButtonId` so that rather
        than re-creating the variable, we set the value of the global one.\r
        \r
        Updated
        code should look like this (new or updated lines have `<--` arrows)\r
        \r
        \tvar
        randButtonId;     <-- declare as global variable\r
            setBoard();\r
            function
        setBoard(){\r
            \t\r
                //...set board code...\r
                \r
                randButtonId
        = "button"+randomNumber(1,4);    <-- remove "var" from assignment\r
                \r
            }\r
        \r
        **Testing
        it out**\r
        \r
        Unfortunately, there is not much to test here other than to
        determine your code still functions.  This is just a step that doesn't really
        change any functionality.\r
        \r
        * If it works the same as before, it's probably
        right, move on.\r
        * If it's broken or doesn't run double-check the changes
        you made.\r
      U5 ColorSleuth checkCorrect part1 link to event handlers_markdown_instruction: |-
        ##
        Steps 2 and 3 - Add checkCorrect(buttonId) and Event Handlers\r
        \r
        This
        feels like a big step, but it's actually just a few small ones.  We'll see
        some new functionality at the end.\r
        \r
        1. **Add a function definition for
        `checkCorrect(buttonId)` that:**\r
        \t* Contains a console.log message to
        display the parameter\r
            * Calls setBoard()\r
        \r
                    function
        checkCorrect(buttonId){\r
                        console.log("Checking: "+buttonId);\r
                        setBoard();\r
                    }\r
        \r
        2.
        **Add 4 "click" event handlers - one for each button - that call checkCorrect**\r
        \t*
        The event handling functions should call `checkCorrect(...)` with its button
        id.\r
        \t* So for *button1* it should look something like:\r
        \r
        \t\t\tonEvent("button1",
        "click", function(){\r
                \t\tcheckCorrect("button1");\r
                \t});\r
                \r
        \r
        **TESTING**\r
        \r
        Once
        you've added this code you should really see some changes.  When you click
        on buttons you should see:\r
        1. Console messages showing what was clicked\r
        2.
        The board should change each time you click a button\r
        3. Console messages
        showing the correct answer for each new board.\r
        \r
        ![](https://images.code.org/2941465a60c0f61c83979192c1de29ce-image-1481146240419.gif)
      U5 ColorSleuth checkCorrect part2 add if statement to check correct_markdown_instruction: |-
        ##
        Step 4 - add an if-statement in *checkCorrect*\r
        \r
        **Add a simple `if-else`
        statement inside the function `checkCorrect` that:**\r
        \r
        * Compares `buttonId`
        and `randButtonId` and\r
        * Displays a message to console that they got right
        or wrong\r
        \r
        Insert something like this *between* your existing console.log
        statement and the call to setBoard()\r
        \r
        \t\tif( buttonId == randButtonId
        ) {\r
                \tconsole.log("You got it right!");\r
                } else {\r
                \tconsole.log("WRONG");\r
                }\r
        \r
        **TEST
        IT: Verify that the if-statement is giving correct results**\r
        <img src="https://images.code.org/8fd0d14a4c32a6e36299251a2edb56bb-image-1481148748359.png"
        style="float: right">\r
        \r
        * You should be able to click on buttons and
        see messages that verify your if-statement is working\r
        * Be sure to click
        on all the buttons to test the scenarios\r
        \t* Is it detecting correct or
        incorrect button clicks properly?\r
            * Is it changing the board every
        time?\r
        * Your console output might look something like what's shown at
        right.\r
        \r
        **TIP:** It might be useful to temporarily remove or comment
        out the call to `setBoard()` so the board doesn't change every time when
        you click.  This would let you verify that every button works right for a
        single board setup.  Then add it back in once you're done.
      U5 ColorSleuth implement end game_markdown_instruction: |
        # Challenge - Pick
        a way for the game to end and implement it\r
        \r
        Your challenge now is to
        add some code completely on your own.  Use what you've learned so far, and
        Alexis and Michael's discussion to help you.\r
        \r
        **This is the last programming
        level**\r
        \r
        * Make all changes and additions to the program that you want
        here\r
        * When you're done hit **Submit**\r
        \r
        **Goal:** Add code that
        provides a way for the game to end which:\r
        * Switches to the `gameOver_screen`\r
        *
        Shows which player won the game by showing `player1Win_label` or `player2Win_label`\r
        \r
        *We've
        provided `gameOver_screen` as part of the template for this project -- Switch
        to Design Mode to take a look at what's there*\r
        \r
        **Suggestions**\r
        *
        If you're stuck for ideas, try to implement the end game condition of "first
        to 10" - first player to reach a score of 10 wins.\r
        * You should use the
        suggestion from the discussion to add a function like `checkGameOver()` and
        call it from `checkCorrect`\r
        \r
        <details><summary><strong>Above and Beyond:
        optional extra options for your project [Click to expand]</strong></summary>\r
        \r
        <p>\r
        Here
        are a bunch of ways you can add to or extend the project:\r
        \r
        </p>\r
        <ul>\r
        \r
        \r
        <li>Add
        "start over" button on the last screen, which should reset everything, and
        go back to the game play screen\r
        </li>\r
        <li>Add a welcome screen that
        explains the rules and invites the player to start the game (make it the default
        screen)\r
        </li>\r
        <li>Make the game more difficult:</li>\r
        <uL>\r
        <li>Make
        the colors more similar (we added 20 to every RGB value, try 15 or 10).</li>\r
            <li>Or
        make the difficulty variable - you can generate a random number between 5
        and 20 and add that to the RGB values. </li>\r
            <li>Or make it get progressively
        more difficult - use a variable to keep track of how much to add to each RGB
        value and decrease it over time.</li>\r
        \t<li>Or on a welcome screen ask
        if the player wants to play easy, medium, or hard.</li>\r
        </uL>\r
        \r
        <li>Add
        a timing element - lookup the documentation for setTimeout which calls a function
        after a certain amount of time. (Note: you may need to remix the project in
        as a free-play App Lab project to do this).\r
        </li>\r
        <li>You can also use
        <code>getTime()</code> at the beginning and end of your code to figure out
        how long it took for the game to end, which you could use to adjust the score.</li>\r
        </ul>\r
        </details>\r
      U5 ColorSleuth nextTurn pt1 add var and function and console.log_markdown_instruction: |
        #
        Next Step - Alternating Turns\r
        \r
        This is another step that requires 3
        parts.  But **notice there is a pattern** to what we're starting to do, and
        it is a common one:\r
        \r
        1. Add a global variable\r
        2. Add a new function
        definition (that updates that variable in some way)\r
        3. Add a call to the
        new function you just made.\r
        \r
        And that's exactly what you're going
        to do right now.\r
        \r
        1. Add global `var currentPlayer = 1` to the top of
        the program.\r
        2. Add a new function definition in your code for `switchPlayer()`
        with an if-statement and console.log message.  It should look something like
        this:\r
        \r
        \t\tfunction switchPlayer(){\r
                \tif(currentPlayer==1){\r
                    \tcurrentPlayer=2;\r
                    }
        else {\r
                    \tcurrentPlayer=1;\r
                    }\r
                    console.log("current
        player is: "+currentPlayer);\r
                }\r
        \r
        3. Add a call `switchPlayer()`
        as the last line inside the `checkCorrect` function\r
        \r
        **TEST IT OUT**\r
        <img
        src="https://images.code.org/e0cbd1d16fa43842d2352df55caa2959-image-1481210618149.png"
        style="float: right">\r
        \r
        * After you add this code, you should see a
        new message in the console amongst the others indicating whose turn it is.  The
        output might look something like the output shown at right (look for lines
        that say **current player is: 2**)\r
        * Note: right now most of our output
        is in the console because it's easy and fast to verify that things are working.  We'll
        start updating the UI next!\r
      U5 ColorSleuth nextTurn pt1 update UI to indicate turn_markdown_instruction: |
        Fun
        part - hide/show player highlight in app.\r
        \r
        DO THIS:\r
        \r
        * in nextTurn()
        hide both player highlights\r
        * in if statement show the correct one in \r
        \r
        [anigif
        showing functionality]\r
        \r
      U5 ColorSleuth nextTurn pt2 update UI to indicate turn_markdown_instruction: |
        ##
        Update the UI to indicate whose turn it is\r
        \r
        <img src="https://images.code.org/214101a637c0100af7dd17ff9ec5250e-image-1481211801440.gif"
        style="float: right">\r
        \r
        A choice has been made for you in the design
        of the app to indicate whose turn it is in the UI.\r
        \r
        * Notice in the
        design that there are two gray rectangles behind the player scores with ids
        `player1_highlight` and `player2_highlight`.  `player2_highlight` starts out
        hidden.\r
        \r
        Do this:\r
        * Add code to the `if` statement in `switchPlayer`\r
        *
        Use the `hideElement` and `showElement` commands (found in the UI controls
        toolbox) to show and hide these rectangles as a way of indicating whose turn
        it is.\r
        * For example if it's player 1's turn, then show `player1_highlight`
        and hide `player2_highlight`\r
        \r
        When you're done you should see the player
        highlight alternate like the graphic above.\r
        \r
        **TIP**: Make the `player2_highlight`
        start out hidden by checking the "hidden" box for it in design mode.\r
        \r
        \r
        \r
      U5 ColorSleuth part 1_markdown_instruction: |
        # You try it -- use setProperty\r
        \r
        Time
        to get coding!  This is the starting point for a whole new project. \r
        \r
        *
        We've started you out with **all of the UI elements in place**.  You'll
        work with this design and layout for now.\r
        * We've also started you out
        with some code that sets the color of one of the buttons.\r
        * Use setProperty
        3 more times to set the color of the other 3 buttons so all 4 are orange.\r
            *
        We've chosen an orange color `rgb(230,155,0)` for now, but this will change
        later.\r
        \r
      U5 ColorSleuth part 2 small color change_markdown_instruction: |
        # Let's make
        one square slightly different\r
        \r
        Add two lines to the bottom of the code
        you have that look like something like this.\r
        \r
        ![](https://images.code.org/abec0079a632f5e6ad7be28beb30763a-image-1490105722035.png)\r
        \r
        What
        does this do? We're doing two things...\r
        \r
        1. Creating a variable to
        hold the RGB string of a different color, and \r
        2. Overwriting the background
        color of one of the buttons after having just set it a few lines earlier\r
        \r
        Yes,
        this means your code will change the background color of one of the buttons
        a few lines after you just set the color in the first place but it will happen
        so fast you won't notice, and doing it this way will be useful later on.\r
        \r
      U5 ColorSleuth part 3 pick random button_markdown_instruction: |-
        # You try it
        - Pick a button at random to make a different color\r
        \r
        We've included
        the code discussed on the previous page below. \r
        \r
        The last lines of your
        code should look something like this:\r
        \r
        \r
            var diffColor = rgb(250,
        175, 20);\r
            var randButtonId = "button"+randomNumber(1,4);   // create
        a random button Id\r
            setProperty(randButtonId, "background-color",
        diffColor);  // set its color to diffColor\r
        \r
        \r
        Notice that there is
        really only one new line - to make the `randButtonID` variable.  \r
        The other
        change is to replace *"button3"* as the id in setProperty with *randButtonID*.\r
        \r
        Suggestion:\r
        Add
        `console.log(randButtonId)` somewhere after you generate the button ID so
        you can see which button is supposed to have the different color.  It might
        be hard to spot!
      U5 ColorSleuth part 4 make random RGB string_markdown_instruction: |
        ## You
        try it - make a random color\r
        <img src="https://images.code.org/b4910df16847c1b74034f884dc21a528-image-1481043331643.gif"
        style="float: right">\r
        **First:** Make the base `color` be a string with
        random values in it rather than hard-coded.\r
        \r
        **Second:** Add 20 to each
        of the R, G, B values to make `diffColor`\r
        \r
        **This means** you will have
        to insert several lines of code in two different places in your program: just
        before you create `var color` and just before `var diffColor`.\r
        \r
        **Run
        multiple times to test!** - Each time you run the program you should see randomly
        chosen colors with a randomly chosen button that's slightly different.\r
        \r
        <details><summary>Code
        Reference from Alexis and Michael's discussion [click to expand] </summary>\r
        \r
        <p>\r
        Here
        is the code they discussed for creating an RGB string with random values:
        \r
        </p>\r
        \r
        \r
        <pre style="width: 400px"><code>var R = randomNumber(0,235);\r
        var
        G = randomNumber(0,235);\r
        var B = randomNumber(0,235);\r
        \r
        var color
        = rgb(R, G, B);\r
        </code></pre>\r
        \r
        <br>\r
        <p>\r
        And here is the code
        they discussed to make <code>diffColor</code>:\r
        </p>\r
        <pre style="width:
        400px"><code>R = R+20;  //add 20 to current value of R\r
        G = G+20;\r
        B
        = B+20;\r
        \r
        var diffColor = rgb(R, G, B);\r
        </code></pre>\r
        \r
        </details>\r
        \r
      U5 ColorSleuth part 4 make setBoard function_markdown_instruction: |-
        You should
        now have code that sets the color of the buttons and picks one at random to
        make a slightly different color.  \r
        \r
        This is good functionality that,
        now that it's working means we can move onto the next problem. But for the
        game we're going to want to do this multiple times so that's a clue we should
        make a function\r
        \r
        DO THIS:\r
        \r
        * Define a new function called `setBoard`.\r
        *
        Move all of the code that sets the colors of the buttons inside the function
        [licecap]\r
        * add a call to `setBoard` to verify that it works
      U5 ColorSleuth part 5 make random RGB string_markdown_instruction: |-
        We can
        use the *same technique* to generate a random color.\r
        \r
        all colors are
        defined as strings with only difference being the numbers that are used.\r
        \r
        We
        just learned how to do this for ids.  Same principle for colors it just gets
        nasty looking.\r
        \r
        "rgb("+random=", "+random...
      U5 ColorSleuth part 5 make setBoard function_markdown_instruction: |
        ## Next
        Step - encapsulate "game board" creation in a function\r
        \r
        Let's call
        the 4 buttons with random colors the **"Game Board."** Assuming that your
        program now creates a new randomly generated game board each time you run,
        let's take the next step.\r
        \r
        When playing the game we need to create
        a new game board repeatedly, not just when the program starts.  Since we have
        a chunk of code that we want to use repeatedly, **that's a clue we should
        take that code and put it in a function**.\r
        \r
        ## DO THIS:\r
        \r
        * Define
        a new function called `setBoard`.\r
        * Move all of the code that sets the
        colors of the buttons inside the function - this is actually **all** the code
        you have so far.\r
        * Add a call to `setBoard()` as the first line of code
        in the program to verify that it works\r
        * When you're done the code should
        look like this:\r
        \r
            \tsetBoard();  \t\t\t\r
            \tfunction setBoard(){\r
        \r
        \t\t\t<
        all the button color setting code \r
                    you wrote from previous
        exercises >\r
                    \r
        \t\t}\r
            \r
            \r
        <details><summary><strong>TIP:</strong>
        This is easy in text-mode [click to expand]</summary>\r
        \r
        <p>\r
        Because
        this is a relatively large chunk of code to move inside a function, it might
        be easier to do in text mode.\r
        </p>\r
        <li>Add the function definition at
        the top including the opening curly-brace</li>\r
        <li>Type a closing curly-brace
        at the bottom</li>\r
        <li>Optional: indent all the code inside the function
        so it looks cleaner - select all and hit TAB</li>\r
        \r
        <img src="https://images.code.org/ba0de530ca89174bae5fa1be455eb048-image-1481047960566.gif">\r
        \r
        </details>\r
        <br>\r
        **NOTE:**
        The program should not behave any differently after this step - we're just
        organizing the code to make it more useful. In the next step will make more
        use of `setBoard()`.  For now, just make the function and call it once.\r
        \r
      U5 ColorSleuth scoring pt1 vars function stub console_markdown_instruction: |-
        ##
        Next Step - add function updateScoreBy \r
        \r
        We're going to follow the
        same pattern we used when adding switch player.  We'll add variables, a function,
        calls to the function, and for now just use `console.log` statements to verify
        we've got things working.\r
        \r
        1. Add global variables to the top of the
        code: `var p1Score=0;` and `var p2Score=0;`\r
        2. Add a new function definition
        `updateScoreBy` with an if-statement and console.log to verify.  Something
        like this:\r
        \r
        \t\tfunction updateScoreBy(amt){\r
                \tif(currentPlayer
        == 1){\r
                    \tp1Score = p1Score + amt;\r
                    } else {\r
                    \tp2Score
        = p2Score + amt;\r
                    }\r
                    console.log("P1 score: "
        + p1Score);\r
                    console.log("P2 score: " + p2Score);\r
                }\r
        \r
        3.
        Add calls to `updateScoreBy(1)` and `updateScoreBy(-3)` to the appropriate
        place inside the if statement in the `checkCorrect` function.\r
        \t* You can
        leave your console.log statements in there for now as well.  Just add calls
        to `updateScoreBy` along with them.\r
        \r
        **TEST IT OUT**\r
        \r
        When you
        run the program now you should be able to verify in the console that the player's
        scores are updating.  Study the console output to make sure and verify that:\r
        \r
        *
        updateScoreBy is being called from checkCorrect with each click\r
        \t* if
        you have console.log statements in `updateScoreBy` then you should at least
        see that it's being called with each click\r
        * The correct player's score
        is being updated\r
        * The scores are being updated by the correct amount\r
        \r
        A
        sample of the output might look like this:\r
        \r
        ![](https://images.code.org/eb33f7d6d634e4f98e613bc13b231601-image-1481219318239.png)
      U5 ColorSleuth scoring pt2 add scoring if statement console_markdown_instruction: |
        \r
        DO
        THIS:\r
        \r
        * add an if statement to updateScore\r
        * if currentPlayer ==
        player1\r
              player1Score += amt\r
        * else\r
               player2score += amt\r
               \r
        Note:
        cleverness of `amt` var.  Means we don't need to decide whether to add or
        subtract.  \r
        \r
      U5 ColorSleuth scoring pt3 update UI for scoring_markdown_instruction: |
        ##
        Next step - update the UI to show the score.\r
        <img src="https://images.code.org/2614d8d57f91d9a29d86a0223ec35d63-image-1481221332835.gif"
        style="float: right">\r
        This is pretty easy at this point.\r
        \r
        There
        are UI text labels for the player's scores called `score1_label` and `score2_label`.\r
        \r
        Add
        `setText` statements at the end of the function (either replace the console.log
        statements, or just add after them).  The label for player 1 would look like
        this:\r
        \r
        \t\tsetText("score1_label", p1Score);\r
        \r
        **TEST IT OUT**\r
        \r
        *
        After adding the `setText` statements you should see the score being updated
        with each click (see animation).\r
        * You can actually play the game a little
        bit now!\r
        \r
        <details><summary>Why set both text labels each time? [click
        to expand]</summary>\r
        \r
        You might be wondering why we set <em>both</em>
        text labels each time <code>updateScoreBy</code> is called, rather than putting
        it inside the if-statement to set the text of the appropriate label.  After
        all, only one score is changing every time.<br>\r
        <li>The reason is basically:
        laziness.  Even though only one score will change with each click, it really
        doesn't hurt to set both text labels just to be safe.</li>\r
        <li>In the
        future, maybe you might change the app so that both player1 and player2's
        scores might change with a single click. Maybe, maybe not.</li>\r
        <li>But
        we can be lazy and just set both score text labels every time and not have
        to worry about it.</li>\r
        </details>\r
        \r
      'U5 L1 - 3: Teaching and Student Support Plan_markdown_instruction': |-
        <br><br>\r
        >
        **NOTE: before you start this task, make sure you’ve reviewed the lesson resources
        in this module, and have a good sense of how the lessons work. If you haven’t
        already reviewed the materials, do that now and come back to this task later.**\r
        \r
        #
        Lessons 1 - 3: Teaching and Student Support Plan\r
        \r
        ## Task Description\r
        \r
        Now
        that you have a better sense of this lessons in this sequence, let’s think
        about the types of supports students will need in order to be successful.
        Since the curriculum is based on inquiry learning, lessons feature activities
        that engage students in discovering core concepts themselves. It’s important
        to think through implementation plans and student support. In this task you
        will make a plan for teaching and student support **for one of the lessons
        in this sequence** that takes into account differentiation strategies and
        make-up work for absent students. Your teaching and student support plan should
        cover the following: \r
        \r
        \r
        - **Which lesson in the sequence are you
        discussing?** \r
        \r
        - **Details on how you will implement and differentiate
        the lesson:**\r
        \r
         - An outline of any changes you will need to make to
        the lesson to fit your local constraints or context (for example: pacing and
        time, dealing with classroom setup, etc). \r
         - An overview of the types
        of student needs you’ll likely need to support in your classroom (for example:
        students who are struggling to understand the underlying concept; students
        who are already familiar with the concept, but still have room to learn more;
        etc)\r
         - Your plan for addressing each of the needs outlined above (for
        example: integrating extension activities or other materials for students
        who already know something about the topic)\r
         - How will you address or
        emphasize the connection between lessons in this sequence? \r
        \r
        - **Plan
        for catching up absent students:**\r
        \r
         - How will absent students catch
        up on activities they missed? \r
         - How will you use the fact that the lessons
        in this sequence are related and build on one another to address make-up work?
        \r
        \r
        You can type out your teaching and student support plan in the box
        below, or you can upload a word doc or pdf file. \r
        \r
        ## Getting Credit
        for Completing this Task\r
        \r
        #### Task Review Details\r
        \r
        If this module
        is listed as  your “focus area”, then your response to the prompt above will
        be shared anonymously and reviewed by your peers, and you will review the
        work done by other teachers. Reviewers will be looking for thoughtful and
        thorough answers that demonstrate that you have spent time considering how
        the lesson will play out in your own classroom. Reviewers will have an opportunity
        to give feedback on your submission, and you can respond to that feedback
        and resubmit. \r
        \r
        In order to get credit for completing this task, two
        reviewers need to agree that you have responded to the prompts fully. If reviewers
        don’t feel comfortable making a decision about your task submission, they
        can elevate to a facilitator to review. You will always have a chance to address
        feedback from your reviewers and resubmit your task! Reviewer feedback will
        show up at the bottom of this page, once it’s available. \r
        \r
        <br><br>
      'U5 L11 - 14: Teaching and Student Support Plan_markdown_instruction': |-
        <br><br>\r
        >
        **NOTE: before you start this task, make sure you’ve reviewed the lesson resources
        in this module, and have a good sense of how the lessons work. If you haven’t
        already reviewed the materials, do that now and come back to this task later.**\r
        \r
        #
        Lessons 11 - 14: Teaching and Student Support Plan\r
        \r
        ## Task Description\r
        \r
        Now
        that you have a better sense of this lessons in this sequence, let’s think
        about the types of supports students will need in order to be successful.
        Since the curriculum is based on inquiry learning, lessons feature activities
        that engage students in discovering core concepts themselves. It’s important
        to think through implementation plans and student support. In this task you
        will make a plan for teaching and student support **for one of the lessons
        in this sequence** that takes into account differentiation strategies and
        make-up work for absent students. Your teaching and student support plan should
        cover the following: \r
        \r
        \r
        - **Which lesson in the sequence are you
        discussing?** \r
        \r
        - **Details on how you will implement and differentiate
        the lesson:**\r
        \r
         - An outline of any changes you will need to make to
        the lesson to fit your local constraints or context (for example: pacing and
        time, dealing with classroom setup, etc). \r
         - An overview of the types
        of student needs you’ll likely need to support in your classroom (for example:
        students who are struggling to understand the underlying concept; students
        who are already familiar with the concept, but still have room to learn more;
        etc)\r
         - Your plan for addressing each of the needs outlined above (for
        example: integrating extension activities or other materials for students
        who already know something about the topic)\r
         - How will you address or
        emphasize the connection between lessons in this sequence? \r
        \r
        - **Plan
        for catching up absent students:**\r
        \r
         - How will absent students catch
        up on activities they missed? \r
         - How will you use the fact that the lessons
        in this sequence are related and build on one another to address make-up work?
        \r
        \r
        You can type out your teaching and student support plan in the box
        below, or you can upload a word doc or pdf file. \r
        \r
        ## Getting Credit
        for Completing this Task\r
        \r
        #### Task Review Details\r
        \r
        If this module
        is listed as  your “focus area”, then your response to the prompt above will
        be shared anonymously and reviewed by your peers, and you will review the
        work done by other teachers. Reviewers will be looking for thoughtful and
        thorough answers that demonstrate that you have spent time considering how
        the lesson will play out in your own classroom. Reviewers will have an opportunity
        to give feedback on your submission, and you can respond to that feedback
        and resubmit. \r
        \r
        In order to get credit for completing this task, two
        reviewers need to agree that you have responded to the prompts fully. If reviewers
        don’t feel comfortable making a decision about your task submission, they
        can elevate to a facilitator to review. You will always have a chance to address
        feedback from your reviewers and resubmit your task! Reviewer feedback will
        show up at the bottom of this page, once it’s available. \r
        \r
        <br><br>
      'U5 L15 - 17: Teaching and Student Support Plan_markdown_instruction': |-
        <br><br>\r
        >
        **NOTE: before you start this task, make sure you’ve reviewed the lesson resources
        in this module, and have a good sense of how the lessons work. If you haven’t
        already reviewed the materials, do that now and come back to this task later.**\r
        \r
        #
        Lessons 15 - 17: Teaching and Student Support Plan\r
        \r
        ## Task Description\r
        \r
        Now
        that you have a better sense of this lessons in this sequence, let’s think
        about the types of supports students will need in order to be successful.
        Since the curriculum is based on inquiry learning, lessons feature activities
        that engage students in discovering core concepts themselves. It’s important
        to think through implementation plans and student support. In this task you
        will make a plan for teaching and student support **for one of the lessons
        in this sequence** that takes into account differentiation strategies and
        make-up work for absent students. Your teaching and student support plan should
        cover the following: \r
        \r
        \r
        - **Which lesson in the sequence are you
        discussing?** \r
        \r
        - **Details on how you will implement and differentiate
        the lesson:**\r
        \r
         - An outline of any changes you will need to make to
        the lesson to fit your local constraints or context (for example: pacing and
        time, dealing with classroom setup, etc). \r
         - An overview of the types
        of student needs you’ll likely need to support in your classroom (for example:
        students who are struggling to understand the underlying concept; students
        who are already familiar with the concept, but still have room to learn more;
        etc)\r
         - Your plan for addressing each of the needs outlined above (for
        example: integrating extension activities or other materials for students
        who already know something about the topic)\r
         - How will you address or
        emphasize the connection between lessons in this sequence? \r
        \r
        - **Plan
        for catching up absent students:**\r
        \r
         - How will absent students catch
        up on activities they missed? \r
         - How will you use the fact that the lessons
        in this sequence are related and build on one another to address make-up work?
        \r
        \r
        You can type out your teaching and student support plan in the box
        below, or you can upload a word doc or pdf file. \r
        \r
        ## Getting Credit
        for Completing this Task\r
        \r
        #### Task Review Details\r
        \r
        If this module
        is listed as  your “focus area”, then your response to the prompt above will
        be shared anonymously and reviewed by your peers, and you will review the
        work done by other teachers. Reviewers will be looking for thoughtful and
        thorough answers that demonstrate that you have spent time considering how
        the lesson will play out in your own classroom. Reviewers will have an opportunity
        to give feedback on your submission, and you can respond to that feedback
        and resubmit. \r
        \r
        In order to get credit for completing this task, two
        reviewers need to agree that you have responded to the prompts fully. If reviewers
        don’t feel comfortable making a decision about your task submission, they
        can elevate to a facilitator to review. You will always have a chance to address
        feedback from your reviewers and resubmit your task! Reviewer feedback will
        show up at the bottom of this page, once it’s available. \r
        \r
        <br><br>
      'U5 L4 - 6: Teaching and Student Support Plan_markdown_instruction': |-
        <br><br>\r
        >
        **NOTE: before you start this task, make sure you’ve reviewed the lesson resources
        in this module, and have a good sense of how the lessons work. If you haven’t
        already reviewed the materials, do that now and come back to this task later.**\r
        \r
        #
        Lessons 4 - 6: Teaching and Student Support Plan\r
        \r
        ## Task Description\r
        \r
        Now
        that you have a better sense of this lessons in this sequence, let’s think
        about the types of supports students will need in order to be successful.
        Since the curriculum is based on inquiry learning, lessons feature activities
        that engage students in discovering core concepts themselves. It’s important
        to think through implementation plans and student support. In this task you
        will make a plan for teaching and student support **for one of the lessons
        in this sequence** that takes into account differentiation strategies and
        make-up work for absent students. Your teaching and student support plan should
        cover the following: \r
        \r
        \r
        - **Which lesson in the sequence are you
        discussing?** \r
        \r
        - **Details on how you will implement and differentiate
        the lesson:**\r
        \r
         - An outline of any changes you will need to make to
        the lesson to fit your local constraints or context (for example: pacing and
        time, dealing with classroom setup, etc). \r
         - An overview of the types
        of student needs you’ll likely need to support in your classroom (for example:
        students who are struggling to understand the underlying concept; students
        who are already familiar with the concept, but still have room to learn more;
        etc)\r
         - Your plan for addressing each of the needs outlined above (for
        example: integrating extension activities or other materials for students
        who already know something about the topic)\r
         - How will you address or
        emphasize the connection between lessons in this sequence? \r
        \r
        - **Plan
        for catching up absent students:**\r
        \r
         - How will absent students catch
        up on activities they missed? \r
         - How will you use the fact that the lessons
        in this sequence are related and build on one another to address make-up work?
        \r
        \r
        You can type out your teaching and student support plan in the box
        below, or you can upload a word doc or pdf file. \r
        \r
        ## Getting Credit
        for Completing this Task\r
        \r
        #### Task Review Details\r
        \r
        If this module
        is listed as  your “focus area”, then your response to the prompt above will
        be shared anonymously and reviewed by your peers, and you will review the
        work done by other teachers. Reviewers will be looking for thoughtful and
        thorough answers that demonstrate that you have spent time considering how
        the lesson will play out in your own classroom. Reviewers will have an opportunity
        to give feedback on your submission, and you can respond to that feedback
        and resubmit. \r
        \r
        In order to get credit for completing this task, two
        reviewers need to agree that you have responded to the prompts fully. If reviewers
        don’t feel comfortable making a decision about your task submission, they
        can elevate to a facilitator to review. You will always have a chance to address
        feedback from your reviewers and resubmit your task! Reviewer feedback will
        show up at the bottom of this page, once it’s available. \r
        \r
        <br><br>
      'U5 L7 - 10: Teaching and Student Support Plan_markdown_instruction': |-
        <br><br>\r
        >
        **NOTE: before you start this task, make sure you’ve reviewed the lesson resources
        in this module, and have a good sense of how the lessons work. If you haven’t
        already reviewed the materials, do that now and come back to this task later.**\r
        \r
        #
        Lessons 7 - 10: Teaching and Student Support Plan\r
        \r
        ## Task Description\r
        \r
        Now
        that you have a better sense of this lessons in this sequence, let’s think
        about the types of supports students will need in order to be successful.
        Since the curriculum is based on inquiry learning, lessons feature activities
        that engage students in discovering core concepts themselves. It’s important
        to think through implementation plans and student support. In this task you
        will make a plan for teaching and student support **for one of the lessons
        in this sequence** that takes into account differentiation strategies and
        make-up work for absent students. Your teaching and student support plan should
        cover the following: \r
        \r
        \r
        - **Which lesson in the sequence are you
        discussing?** \r
        \r
        - **Details on how you will implement and differentiate
        the lesson:**\r
        \r
         - An outline of any changes you will need to make to
        the lesson to fit your local constraints or context (for example: pacing and
        time, dealing with classroom setup, etc). \r
         - An overview of the types
        of student needs you’ll likely need to support in your classroom (for example:
        students who are struggling to understand the underlying concept; students
        who are already familiar with the concept, but still have room to learn more;
        etc)\r
         - Your plan for addressing each of the needs outlined above (for
        example: integrating extension activities or other materials for students
        who already know something about the topic)\r
         - How will you address or
        emphasize the connection between lessons in this sequence? \r
        \r
        - **Plan
        for catching up absent students:**\r
        \r
         - How will absent students catch
        up on activities they missed? \r
         - How will you use the fact that the lessons
        in this sequence are related and build on one another to address make-up work?
        \r
        \r
        You can type out your teaching and student support plan in the box
        below, or you can upload a word doc or pdf file. \r
        \r
        ## Getting Credit
        for Completing this Task\r
        \r
        #### Task Review Details\r
        \r
        If this module
        is listed as  your “focus area”, then your response to the prompt above will
        be shared anonymously and reviewed by your peers, and you will review the
        work done by other teachers. Reviewers will be looking for thoughtful and
        thorough answers that demonstrate that you have spent time considering how
        the lesson will play out in your own classroom. Reviewers will have an opportunity
        to give feedback on your submission, and you can respond to that feedback
        and resubmit. \r
        \r
        In order to get credit for completing this task, two
        reviewers need to agree that you have responded to the prompts fully. If reviewers
        don’t feel comfortable making a decision about your task submission, they
        can elevate to a facilitator to review. You will always have a chance to address
        feedback from your reviewers and resubmit your task! Reviewer feedback will
        show up at the bottom of this page, once it’s available. \r
        \r
        <br><br>
      U5 Video compound booleans_markdown_instruction: |
        ### Points to pay attention
        to:\r
        \r
        * The "Boolean operators" are AND and OR.  \r
        * In JavaScript
        you write them as `&&` for AND and `||` for OR.\r
        * You use them to combine
        boolean expressions into a single statement when you need to check multiple
        conditions before executing a particular segment of code.\r
        \r
      U5 Video if-else-if_markdown_instruction: |
        ### Points to pay attention to:\r
        \r
        *
        **START at 2:20**  \r
            This is the second half of the video you watched
        earlier. \r
        \r
        * An If-else-if statement let's you check more than one
        condition at a time.\r
        * The **order of conditions matters**. Since conditions
        are checked sequentially from top to bottom, the code that gets executed will
        be the *first* statement to evaluate to true.\r
        \r
      U5 compound boolean museum example_markdown_instruction: |-
        ## You Try It\r
        \r
        **Recreate
        the museum price example from the video.**\r
        \r
        * We've setup everything
        for you **except the boolean expression in the *if* statement is incomplete**\r
        \r
        **Modify
        the boolean expression** (it just says `age < 21` right now) to use combinations
        of `&&` and `||` to reflect the following condition:\r
        \r
        * IF *It's Tuesday
        or Thursday or the age is between 12 and 21* they get a discount\r
        * ELSE
        they pay full price\r
        \r
        **TIP:** switching to text mode might make this
        easier to compose.
      U5 if-else dropdown guess dice_markdown_instruction: |-
        <img src="https://images.code.org/bd3094161d7d58800b1a6a981383fc6c-image-1479848098180.gif"
        style="float: right">\r
        \r
        ## You try it \r
        \r
        This is a slightly more
        involved example.  You'll need to study the starting design and code a little
        bit, but you only have to insert a single if-else statement and move some
        lines of code into the appropriate if or else clause to make it work.\r
        \r
        ##
        Do this\r
        \r
        **Study the starting code first to see what it does**\r
        \r
        *
        You *can* run it to see what happens before doing anything - it just won't
        work right\r
        * **Notice** the function `reset()` - which hides the images.  \r
        \t*
        We made a function because we want to run this code from two different event
        handlers.\r
        \r
        **Add an if-else statement in the *roll_btn* event handler**
        to check if the random number that represents a dice roll matches the user's
        guess in the dropdown\r
        \r
        If they guessed correctly\r
        * Show the trophy
        image\r
        * Add 6 to the score\r
        \r
        Otherwise:\r
        * Show the frowny face
        image\r
        * Subtract 1 from the score\r
        \r
        **Setup Notes:**\r
        * All UI elements
        are added for you (images are hidden) - flip to Design Mode to see.\r
        * All
        lines of code *except* for the if-else statement and condition are also provided
        - you'll need to move them around once you've added the if-else statement.\r
        *
        Notice the global `score` variable which will keep track of the score between
        clicks\r
        * We've added comments in the code to help you out - you can remove
        them if you like.\r
        \r
        <details><summary>Hint: [click to expand]</summary>\r
        <br>\r
        The
        condition needs to us <code>==</code> compare <code>dieVal</code> with the
        value in the dropdown.  To get the value out of the dropdown you use <code>getNumber("guess_dropdown")</code>.<br><br>(You
        could use <code>getText("guess_dropdown")</code> and it would still work,
        because <code>==</code> tries to convert text to a number for comparison so
        <code>"6"==6</code> is true.  But since we're expecting a number in the
        dropdown we should use <code>getNumber</code> so it makes sense when reading
        the code.)\r
        </details>
      U5 if-else dropdown movie checker_markdown_instruction: |-
        <img src="https://images.code.org/38b037a468dd7a9df53ce29b5b720a03-image-1479852997408.gif"
        style="float: right">\r
        \r
        ## You Try It\r
        \r
        This example is very similar
        to the worked example on the previous page - it is a version of the movie
        age checker that uses a dropdown.\r
        \r
        We've provided the starting UI elements,
        including the dropdown - but none of the code.\r
        \r
        **Do this:**\r
        Using
        the examples on the previous page as a guide...\r
        \r
        * Add an event handler
        for the *dropdown menu that triggers on *"change"*.\r
        * Add an if statement
        to check if the age chosen in the dropdown is `>=` to 13 and set the text
        in the *result_label*\r
        \t* if the age is 13 or over set the text to "You
        are old enough to see a PG-13 movie alone"\r
            * Otherwise, set the text
        to "You are not old enough to see a PG-13 movie alone"\r
        \r
        **Tip:** Use
        `getNumber(id)` instead of `getText(id)` to get the value out of the dropdown\r
        \r
        *
        One major difference from the example is that we want to compare the value
        of the dropdown to a number using `>=` rather than with `==`\r
        * You should
        to use `getNumber("age_dropdown")` to extract the value *as a number rather
        than text*. \r
        * This is the same reason we use `promptNum` instead of `prompt`
        for simple console examples.\r
        * It will still work if you use `getText`
        but isn't good form.
      U5 if-else simple movie ratings example_markdown_instruction: |
        ## You Try It\r
        \r
        **Recreate
        the simple movie age example from the video.**\r
        \r
        * We've provided the
        first line to prompt the user to enter their age.\r
        * Add and `if-else` statement
        that checks to see if the age is `>=` 13 and \r
        * Use `console.log` to display
        appropriate messages\r
        \r
        Here is pseudocode for what you should add\r
        \r
        ```\r
        IF
        age >= 13\r
            DISPLAY "You can see a PG-13 movie alone"\r
        ELSE\r
            DISPLAY
        "You are not old enough to see a PG-13 movie alone"\r
        ```\r
        \r
        \r
      U5 if-else weeekend challenge_markdown_instruction: |
        <img src="https://images.code.org/42591321cf2bf9e4b90e89e0ea613c9f-image-1479909970655.gif"
        style="float: right">\r
        \r
        ## Challenge: It's the weekend!\r
        \r
        **Make
        an app tells you whether to stay home or go to school based on what day of
        the week it is.**\r
        \r
        \r
        In this challenge you will:\r
        \r
        * Add your
        own dropdown menu in design mode\r
        * Add an event handler for the dropdown\r
        *
        Write an if-statement that's slightly tricky\r
        \r
        ## Do this:\r
        \r
        *
        In Design Mode **add a dropdown** menu and fill it with the days of the week:
        *Monday, Tuesday,...,Sunday*\r
        * **Add an event handler** for that dropdown
        that activates on *"change"*\r
        * **Add an `if-else` statement** to the
        event handler that checks which day was selected and...\r
        \r
        \t* **If**
        the day selected was a weekend day (*Saturday* or *Sunday*) then display a
        message that says "It's the weekend! Stay home!"\r
        \r
        \t* **Otherwise**
        (the day is a weekday) display a message that says "It's a weekday. Go to
        school".\r
        * Your message should be displayed by setting the text of the
        *msg_label* provided in design mode.\r
        \r
        ## Testing:\r
        \r
        * Once you
        have something functional, make sure you test *every* day of the week to verify
        the output is correct\r
        * The if-statement here is trickier than before.\r
        \r
        <details><summary>HINT:
        [click to expand]</summary>\r
        <br>\r
        \r
        <li>The trick here is that, unless
        you want to check all seven days with individual if-statements, you need to
        <strong>nest</strong> one if-statement inside another.</li>\r
        <li>The reason
        is that in order to know it's a weekday you need to know <em>both</em> that
        it's NOT Sunday <em>and</em> that it's not Saturday either.  That's two
        boolean conditions.</li>\r
        <li>Here is the skeleton of an if-else structure
        that will work.  Notice that the the if-statement that checks for Sunday is
        <em>inside</em> the else clause of the statement that checks for Saturday</li>\r
        \r
        \r
        <pre>\r
        \r
        IF
        it's saturday\r
           ...\r
        ELSE\r
           IF it's sunday\r
              ...\r
           ELSE\r
              ...\r
        \r
        </pre>\r
        \r
        </details>\r
        \r
      U5 if-else-if movie example_markdown_instruction: |
        # *if-else-if*\r
        \r
        Let's
        recreate the movie ratings example from the previous page (and video).\r
        \r
        Add
        an `if-else-if` statement with a series of `else-if`s to display the right
        message based on the user's age.\r
        \r
        We've started you out with code
        that prompts the user for her age.  We've also provided all the console.log
        statements you need.\r
        \r
        **Your task:** Add an `if-else-if` statement with
        the appropriate *Boolean expressions*, and move the `console.log` statements
        into the right clause so the correct message gets displayed.  Here is a reminder
        of what is supposed to happen.\r
        \r
        * **If** the user's age is 17 or over,
        they can see an R-rated movie\r
        * **else if** the user's age is 13 or over,
        they can see a PG-13 movie\r
        * **else if** the user's age is 5 or over they
        can see a PG movie\r
        * **else** display a message about the user being too
        young\r
        \r
        * **Test out the program** to make sure your updates worked.\r
        \r
        ##
        Coding Tips\r
        \r
        **Create an `else-if`** by hitting the <img src="https://images.code.org/f762344bc839dd8385730bb7d909657f-image-1446237096776.31.12
        PM.png" style="width: 40px"> at the bottom of an `if` statement. The first
        <img src="https://images.code.org/f762344bc839dd8385730bb7d909657f-image-1446237096776.31.12
        PM.png" style="width: 40px"> will add an `else`, the second will add an
        `else-if`.\r
        \r
        **Remove an `else-if`** -- if you add an extra `else-if`
        by accident, you can remove it by switching into text mode and deleting the
        text.  Don't forget to delete the curly-braces `{` and `}` that go with it.\r
        \r
        \r
      U5 if-else-if quiz grade_markdown_instruction: |
        # Quiz Grade\r
        \r
        **Prompt
        the user for their quiz score (0-100) and tell them what letter grade (A-F)
        they got.**\r
        \r
        **Example:** if the user enters `84` at the prompt your
        program should output: `Your quiz grade is a B.` Here's the score-to-grade
        breakdown:\r
        ```\r
        Letter Grade:   A       B      C      D      F\r
         Score
        Range: 90-100  80-89  70-79  60-69  0-59\r
        ```\r
        \r
        \r
        \r
        We've started
        you out with the prompt and the `console.log` statements you need.  **Your
        task is to add the *if-else-if* statements to make it work.\r
        \r
        **Remember:**
        the order in which you check the boolean conditions *matters*.\r
        \r
        \r
        \r
      U5 video Booleans_markdown_instruction: |-
        ### Points to pay attention to:\r
        \r
        1.
        What's a *Boolean Expression?*\r
        2. Why is it called a "Boolean"?\r
        3.
        Is this a legal expression?  `10 > 25`?
      U5-AP-Algorithm-Does-It-Count_markdown_instruction: |
        # AP Practice - Algorithm
        - Score the Response\r
        \r
        One component of the **AP Create Performance Task**
        is selecting and describing an algorithm that you developed.\r
        \r
        <div style="width:
        80%; margin: auto; background-color: #EEEEEE; padding: 10px; font-family:
        serif; font-size: 12pt">\r
        \r
        <b>2. Written Responses</b>\r
        <ul>\r
        2c.
        Capture and paste a program code segment that implements an algorithm (marked
        with an <b>oval</b> in <b>section 3</b> below) and that is fundamental for
        your program to achieve its intended purpose. This code segment must be an
        algorithm you developed individually on your own, must include two or more
        algorithms, and must integrate mathematical and/or logical concepts. Describe
        how each algorithm within your selected algorithm functions independently,
        as well as in combination with others, to form a new algorithm that helps
        to achieve the intended purpose of the program. (Must not exceed 200 words)\r
        </ul>\r
        </div>\r
        <br>\r
        \r
        Here's
        the scoring guide for this question\r
        \r
        <div style="magin:auto">\r
        \t<img
        src="https://images.code.org/73352bdcc7c3b46ee949f534a0de9dd4-image-1515191914293.38.22
        PM.png">\r
        </div>\r
        \r
        # Score the Response\r
        \r
        **Written Response:**
        *"My algorithm controls the log-in for the app. This piece of my program
        is important because the data included in my app needs to be secure. The algorithm
        makes sure only users with the correct password get in to the app to use it."*\r
        \r
        **Program
        Code:** \r
        \r
        <img src="https://images.code.org/e1929ddfdc31d0a96c9111a6e76f43d0-image-1517465128952.png"
        style="height:300px">\r
        \r
        **Explain why you would or would not award
        the point for Row 5 based on the criteria given above**\r
      U5-AP-Practice-Choose-The-Algorithm_markdown_instruction: |-
        # AP Practice -
        Identify the Abstraction\r
        \r
        One component of the **AP Create Performance
        Task** is selecting an abstraction that you developed.\r
        \r
        <div style="width:
        80%; margin: auto; background-color: #EEEEEE; padding: 10px; font-family:
        serif; font-size: 12pt">\r
        \r
        <b>3. Program Code</b>\r
        <ul>\r
        <li>Mark
        with a <b>rectangle</b> the segment of program code that represents an abstraction
        you developed.</li>\r
        </ul>\r
        </div>\r
        <br>\r
        \r
        Here's the scoring
        guide for this question\r
        \r
        <div style="magin:auto">\r
        \t<img src="https://images.code.org/341764b27f16965cf27680e20c893a23-image-1508190677805.50.59
        PM.png">\r
        </div>\r
        \r
        # Choose the Student-Created Abstraction\r
        \r
        The
        program code below is from a program a student developed. \r
        \r
        ![](https://images.code.org/86d48cfc2c9c81551aa059281e9c62f3-image-1508189804595.34.48
        PM.png)\r
        \r
        **Write which of the rectangles (A, B, C, or D) is placed around
        a student-developed abstraction.**\r
        \r
        **Then explain your answer using
        the criteria in the scoring guide.**
      U5-AP-Practice-FR-manage-complexity_markdown_instruction: |-
        # AP Practice -
        Performance Task Response\r
        \r
        The AP Create Performance task asks you to
        write about an abstraction that you developed and wrote into your code. Most
        of the time that means identifying a function or procedure you wrote to help
        "manage complexity" in your program.\r
        \r
        Here is the actual prompt from
        the Create Performance Task:\r
        \r
        <div style="width: 70%; margin: auto;
        background-color: #EEEEEE; padding: 10px; font-family: serif; font-size: 12pt">\r
        \r
        <b>2d.</b>
        Capture and paste a program code segment that contains an abstraction you
        developed individually on your own (marked with a <b>rectangle</b>). This
        abstraction must integrate mathematical and logical concepts. Explain how
        your abstraction helped manage the complexity of your program.\r
        <br>\r
        <i>(Must
        not exceed 200 words)</i>\r
        \r
        </div>\r
        \r
        <br>\r
        \r
        Below is a segment
        of code from an "under the sea" program with a rectangle drawn around a
        portion of the code identifying an abstraction. Imagine that you wrote this
        and are composing an AP response about how this abstraction manages complexity.  (Note:
        ignore the requirement that the abstraction integrate "mathematical and logical
        concepts" for this practice response.  Just write about managing complexity).\r
        \r
        ![](https://images.code.org/d98fa58fce78eff86fd734f32e2960e4-image-1507913593511.png)\r
        \r
        Explain
        how the abstraction marked with the rectangle in the code above helps manage
        complexity of this program.
      U6 - Final Project - Project Level_markdown_instruction: |-
        # Congratulations!\r
        \r
        You've
        reached the end of the year! Now it's time to show off everything you've
        learned by creating a final project.\r
        \r
        # Do This:\r
        \r
        * Use this level
        to create and submit your final app.\r
         * Alternatively, if you want to remix
        a previous project and add new features, you can copy the "Share" link for
        your remixed project and paste it into a comment in this level.\r
        * **Have
        fun!**
      U6 - updateRecord - Callback Success Parameter_markdown_instruction: |-
        #*updateRecord*
        Callback Function\r
        \r
        You may have noticed that the callback function for
        `updateRecord` has an additional parameter: `success`. When `updateRecord`
        finishes, it returns the updated record as well as a boolean called `success`,
        which is `true` if the record was successfully updated and `false` otherwise.\r
        \r
        The
        `success` parameter is useful in altering how your program behaves based on
        whether an error occurred when your program tried to update a record.\r
        \r
        **Your
        code from the previous exercise has been provided.**\r
        \r
        # Do This: \r
        \r
        *
        Add a line to the beginning of `updateSong` that sets `songToUpdate.seconds`.\r
        \t*
        **Hint:** "Eye of the Tiger" is 244 seconds long.\r
        * Add an `if-else`
        block inside the callback function for `updateRecord`.\r
        \t* If `updateRecord`
        finishes successfully, print out the updated record’s title and artist.\r
        \t*
        Otherwise, if `updateRecord` does not finish successfully, print out an error
        message.\r
        * Run the program and verify that the updated song title and artist
        are still printed to the console.\r
        * Open the Data Viewer and check that
        the record for "Eye of the Tiger" is now fully filled in.\r
        \r
        **Your
        code should end up looking similar to the code depicted in the image.**\r
        \r
        ![](https://images.code.org/b95ac5c5c45942b3eef85823dee48c42-image-1455666651198.PNG)
      U6 - updateRecord - Contacts - Edit UI_markdown_instruction: |
        # Editing Contacts
        in the Contacts App\r
        \r
        Now that you’re familiar with how `updateRecord`
        works, it’s time to add in functionality to the Contacts App so you can edit
        contacts in your database. First, you’ll need to do some work in Design Mode
        to set up the UI elements you’ll need.\r
        \r
        # Do This:\r
        \r
        ** Your code
        and database from the Contacts App are provided.**\r
        \r
        * **Change the “Delete”
        button on the “viewContactsScreen” to an “Edit” button.** Make sure you **change
        the button text and ID to something descriptive**. You might also want to
        change the style of the button.\r
        \t* **Note:** Leave the event handler for
        the old “Delete” button as is. You’ll still use it  later.\r
        * **Add a new
        screen called “editContactsScreen”** and add UI elements that look similar
        to the ones in the image. Don’t forget to give your UI elements **descriptive
        and meaningful names**.\r
        \t* **Note:** Make sure the ID for your new “Delete”
        button matches the ID in your event handler for the old delete button. If
        you do this, your new “Delete” button should work without needing to change
        anything in your event handler.\r
        \r
        | Updated "viewContactsScreen": |
        New "editContactsScreen": |\r
        |------|------|\r
        | ![](https://images.code.org/aef7efbfea4493037d127ca97d83fcc6-image-1455919502578.png)
        | ![](https://images.code.org/ee5ce040dd52239719c2b4c790134d08-image-1455919496715.png)
        |\r
        \r
      U6 - updateRecord - Contacts - Edit event handler_markdown_instruction: |
        #
        Event Handlers for “Edit” and “Go Back” Buttons\r
        \r
        Now that you have all
        the UI elements you need, it’s time to set up the event handlers. In this
        level, you’ll write the event handlers for the **“Edit” button** and the **new
        “Go Back” button**. (You’ll write the event handler for “Update Contact” in
        the next level.)\r
        \r
        # Do This:\r
        \r
        * **Add an event handler for the
        “Go Back” button** on the screen for editing contacts. In the event handler:\r
        \t*
        Set the screen to `viewContactsScreen`.\r
        * **Add an event handler for the
        “Edit” button.** In the event handler:\r
        \t* Use `setText` to populate each
        of the text inputs with the appropriate information from the current contact
        (which you can access using `contacts[currentIndex]`).\r
        \t* Set the screen
        to `editContactsScreen`.\r
        * **Add an event handler to update the preview
        image** on the “Edit” screen when the user changes the image URL.\r
        \t* This
        event handler should be analogous to the one you wrote for `editURLinput`.\r
        *
        If you haven’t already, **move the `setScreen` line from your “Save Contact”
        button event handler into `showCurrentContact`.** This way, when you delete
        a contact and reload your local copy of `contacts`, your app will redirect
        to the “View Contacts” screen.\r
        * **Run your program** and verify that the
        “Edit,” “Go Back,” and “Delete” buttons all work and that your preview image
        updates when you change the URL text.\r
        \r
        \r
        <details><summary><strong>Your
        code should look similar to this.</strong> (click to expand)</summary>\r
        ![](https://images.code.org/74b697567fae902cad13d7df9e695b2b-image-1455921921229.png)\r
        </details>\r
        \r
      U6 - updateRecord - Contacts - Save edited contact_markdown_instruction: |
        #
        Saving an Updated Contact in the Database\r
        \r
        The last step for your Contacts
        App is to save the updated information from the user in the database. You
        can accomplish this by using `updateRecord`.\r
        \r
        # Do This:\r
        \r
        * **Add
        an event handler for the “Update Contact” button.** In the event handler:\r
        \t*
        Create a new object called `objToUpdate` and set it to a copy of the current
        contact.\r
        \t* Call `updateRecord`, and make sure to set the first and second
        parameters.\r
        \t* In the callback function for `updateRecord`, call `refreshLocalData`
        to update your local copy of the database.\r
        * **Run your program** and verify
        that when you edit the information for a contact, the changes are reflected
        when you return to the "View Contacts" screen.\r
        \r
        <details><summary><strong>Your
        code should look similar to this.</strong> (click to expand)</summary>![](https://images.code.org/8f1c01a434934ee3bfdc4941f657b4dc-image-1455924274767.png)</details><br>\r
        \r
        **Congratulations!**
        You now have a fully-functioning Contacts App!\r
        \r
        You can use this same
        pattern of **create, read, update, and delete** commands (a.k.a. “**CRUD**
        commands”) to store permanent data in many different types of apps.\r
        \r
      U6 - updateRecord - Default Block_markdown_instruction: |
        # Updating Records\r
        \r
        Sometimes
        in your program, you may want to make edits to a record that already exists
        in your database. You can do this using the `updateRecord` block.\r
        \r
        ![](https://images.code.org/c62e74c0fff801bb59a024894f7e8caf-image-1455576434177.PNG)\r
        \r
        `updateRecord`
        has three parameters:\r
        \r
        * The **name of the table** which contains the
        record you want to update\r
        * The **object** you want to update.\r
        * A **callback
        function**\r
        \r
        The object in the second parameter needs to have an ID property.
        As with `deleteRecord`, this object’s ID is used to determine which record
        in the database should be updated.\r
        \r
        \r
        # Do This:\r
        \r
        **Your database
        already includes a table called “mySongs”.**\r
        \r
        * Open the Data Viewer
        for mySongs and note that the record for **“Eye of the Tiger” is missing information**
        for the artist and seconds columns.<br>![](https://images.code.org/3e7f6503480eaeeea2be6eedc51fa5bd-image-1455666147565.PNG)\r
        *
        **Run the starter code provided and take note of what prints to the console.**\r
        *
        **Drag out the `updateRecord` block.**\r
        \t* Set the table name to **“mySongs”**.\r
        \t*
        Set the object  to `songToUpdate`.\r
        \t* In the callback function, add a
        `console.log` statement to **print out the updated record’s title and artist.**\r
        *
        **Run the program again.**\r
        \t* Look at the output to the console.\r
            *
        Refresh the Data Viewer and **verify that the record for “Eye of the Tiger”
        has been updated.**\r
        \r
      U6 - updateRecord - Update Nonexistent Record_markdown_instruction: |
        # What
        If *updateRecord* Fails?\r
        \r
        In the previous exercise, you added functionality
        that should print an error message if `updateRecord` returns without successfully
        updating the record in the database. But when should `updateRecord` fail?\r
        \r
        Remember,
        the object parameter needs to have an ID property that matches the ID of a
        record in the specified table. If the object doesn’t have an ID property or
        if the ID property doesn’t exist in the table, `updateRecord` won’t be able
        to successfully update the record.\r
        \r
        To see this behavior, you’re going
        to add some code that will force `updateRecord` to fail.\r
        \r
        **Your code
        from the previous exercise has been provided.**\r
        \r
        # Do This:\r
        \r
        *
        At the beginning of the `updateSong` function, set `songToUpdate.artist` to
        a different string.\r
        * Add another line to set `songToUpdate.id` to an ID
        that isn’t in the **mySongs** table (e.g., **8**).\r
        * Run the program. Take
        note of what gets printed to the console, then check the "Eye of the Tiger"
        record in the Data Viewer.\r
        \r
        ![](https://images.code.org/db411452ec8b319452395c3383b3dd66-image-1455667133974.gif)\r
        \r
        <details>\r
        <summary><strong>What
        happened?</strong> (click to expand)</summary>\r
        \r
        When the record ID doesn’t
        match any in the specified table, `updateRecord` can’t find a record to update,
        so it sets the `success` parameter in the callback function to `false` and
        finishes without changing any records. Be careful to always make sure the
        object you pass `updateRecord` has an ID that matches a record in the table.\r
        </details>\r
        \r
      Underground Avoiding Lava_markdown_instruction: |-
        Lava is hiding beneath some
        of these blocks, which you'll need to cover up before moving forward. An
        `if` command will come in handy here. Add a `move forward` command in the
        correct place to mine these blocks.
      Underground Avoiding Lava_2018_markdown_instruction: |-
        Lava is hiding beneath
        some of these blocks, which you'll need to cover up before moving forward.
        An `if` command will come in handy here. Add a `move forward` command in the
        correct place to mine these blocks.
      Underground If Statements_markdown_instruction: |-
        Now things are getting tricky.
        Mine 3 redstone, but don’t fall in the lava. Use an `if` command to place
        cobblestone over any lava you uncover.
      Underground If Statements_2018_markdown_instruction: |-
        Now things are getting
        tricky. Mine 3 redstone, but don’t fall in the lava. Use an `if` command to
        place cobblestone over any lava you uncover.
      Unit 2 RGB Mapping_markdown_instruction: |
        # RGB Colors\r
        \r
        All colors, whether
        they have names or not, can be described by the level of red, green, and blue
        light it takes to make them.  This is called an RGB value (short for Red-Green-Blue).  You
        can use the widget on your left to try out different RGB values and see what
        colors they make.\r
        \r
        * **Click "Run" to start the widget on the left,**
        and use the sliders to adjust the levels of red, green, and blue light.\r
        *
        For each of the colors below, match it to its RGB value. Type your response
        in the box below.\r
        \r
        A) red: 216, green: 191, blue: 216 - rgb(216,191,216)\r
        \r
        B)
        red: 255, green: 239, blue: 213 - rgb(255,239,213)\r
        \r
        C) red: 255, green:
        140, blue: 105 - rgb(255,140,105)\r
        \r
        D) red: 123, green: 104, blue: 238
        - rgb(123,104,238)\r
        \r
        E) red: 107, green: 142, blue: 35 - rgb(107,142,35)\r
        \r
        \r
        <div
        style="font-size: 16px">\r
        <br />\r
        <details>\r
        <summary>**Why do red
        and green make yellow?**</summary>\r
        <p>When you mix paint, red and green
        make brown, but RGB color mixing uses light instead of paint, so the colors
        mix differently.  RGB uses _additive color mixing_.  In additive color mixing,
        red and green make yellow, red and blue make magenta, and blue and green make
        cyan.  When you mix the three primary colors together (red, green, and blue),
        they make white.  You can read more at <a href="https://en.wikipedia.org/wiki/Additive_color">Wikipedia
        - Additive Color</a>\r
        </p> </details>\r
        <details>\r
        <summary>**How many
        colors can I make with RGB color mixing?**</summary>\r
        <p>\r
        You can make
        make over sixteen million different colors with RGB color mixing.\r
        </p></details>\r
        </div>\r
      'Unit 2 Teaching Practice Plan: Assessing Student Learning_markdown_instruction': '**NOTE:
        before you start this task, make sure you’ve reviewed the resources in this
        module, and have a good sense of the connections to unit 2. If you haven’t
        already reviewed the materials, do that now and come back to this task later.**\r\n\r\n#
        Unit 2 Teaching Practice Plan: Assessing Student Learning\r\n\r\nFor this
        task, you’re going to develop and submit a Teaching Practice Plan, which details
        your plan for assessing student learning throughout unit 2. Your plan should
        address the following: \r\n\r\n- Using what’s in the curriculum\r\n \r\n -
        How do you plan to use the assessment opportunities that have been provided
        in the curriculum? Your response should include how you plan to use formative
        lessons questions (blue bubbles in code studio), project rubrics, AP-style
        questions (following lesson 6 and lesson 17), practice performance tasks (lessons
        6 and 15)\r\n\r\n\r\n- Making your own assessments\r\n\r\n - What types of
        assessments might you need to create or use on top of those provided in the
        curriculum? \r\n - What is your strategy for developing assessment opportunities
        that are consistent with the philosophy of the curriculum and activities?
        \r\n\r\nYou can type out your teaching practice plan in the box below, or
        you can upload a word doc or pdf file. \r\n\r\n## Getting Credit for Completing
        this Task\r\n\r\n#### Task Review Details\r\n\r\nIf this module is listed
        as  your “focus area”, then your response to the prompt above will be shared
        anonymously and reviewed by your peers, and you will review the work done
        by other teachers. Reviewers will be looking for thoughtful and thorough answers
        that demonstrate that you have spent time considering how this practice will
        fit into your own classroom. Reviewers will have an opportunity to give feedback
        on your submission, and you can respond to that feedback and resubmit. \r\n\r\nIn
        order to get credit for completing this task, two reviewers need to agree
        that you have responded to the prompts fully. If reviewers don’t feel comfortable
        making a decision about your task submission, they can elevate to a facilitator
        to review. You will always have a chance to address feedback from your reviewers
        and resubmit your task! Reviewer feedback will show up at the bottom of this
        page, once it’s available. \r\n\r\n"

'
      'Unit 2 Teaching Practice Plan: Balancing Teacher and Tools_markdown_instruction': '**NOTE:
        before you start this task, make sure you’ve reviewed the resources in this
        module, and have a good sense of the connections to unit 2. If you haven’t
        already reviewed the materials, do that now and come back to this task later.**\r\n\r\n\r\n#
        Unit 2 Teaching Practice Plan: Balancing Teacher and Tools\r\n\r\n<img src=\"https://images.code.org/96277a718d83c091b701cf64a816c1ec-image-1477933390543.00.02
        PM.png\" style=\"float:right; margin-left:30px; width:45%\">\r\n\r\nFor this
        task, you’re going to develop and submit a Teaching Practice Plan, which details
        your general plan for managing technology throughout unit 2, as well as a
        specific plan for one of the technology-dependent lessons highlighted in unit
        overview on the right. Note that the lessons with a `red solid rectangle`
        all require the use of computers, but for the purpose of students looking
        at existing information. In lessons with the `dashed purple rectangle` students
        are creating computational artifacts with spreadsheet tools. Lessons indicated
        with the `solid dark blue oval` use a widget in Code Studio. \r\n\r\nYour
        plan should be broken into two parts, and address the following things: \r\n\r\n-
        General strategies that you’ll apply throughout unit 2\r\n - Throughout unit
        2, what classroom and technology management techniques will you use to help
        students stay focused on the lesson tasks? \r\n\r\n\r\n- Strategies specific
        to a selected lesson\r\n - Which of the highlighted lessons on the right are
        you discussing? \r\n - What is your plan for managing transitions between
        your instruction and students being in the tool? *Note: your response should
        include specifics about the lesson*\r\n - How do you plan to introduce the
        lesson challenge and the tool that students will use to complete the challenge?
        *Note: your response should include specifics about the lesson*\r\n\r\n\r\nYou
        can type out your teaching practice plan in the box below, or you can upload
        a word doc or pdf file. \r\n\r\n## Getting Credit for Completing this Task\r\n\r\n####
        Task Review Details\r\n\r\nIf this module is listed as  your “focus area”,
        then your response to the prompt above will be shared anonymously and reviewed
        by your peers, and you will review the work done by other teachers. Reviewers
        will be looking for thoughtful and thorough answers that demonstrate that
        you have spent time considering how this practice will fit into your own classroom.
        Reviewers will have an opportunity to give feedback on your submission, and
        you can respond to that feedback and resubmit. \r\n\r\nIn order to get credit
        for completing this task, two reviewers need to agree that you have responded
        to the prompts fully. If reviewers don’t feel comfortable making a decision
        about your task submission, they can elevate to a facilitator to review. You
        will always have a chance to address feedback from your reviewers and resubmit
        your task! Reviewer feedback will show up at the bottom of this page, once
        it’s available. \r\n \r\n\r\n"

'
      'Unit 2 Teaching Practice Plan: Discovery Learning_markdown_instruction': |
        <br><br>\r
        >
        **NOTE: before you start this task, make sure you’ve reviewed the resources
        in this module, and have a good sense of the connections to unit 2. If you
        haven’t already reviewed the materials, do that now and come back to this
        task later.**\r
        \r
        # Unit 2 Teaching Practice Plan: Discovery Learning\r
        \r
        For
        this task, you’re going to develop and submit a Teaching Practice Plan, which
        details your plan for building and supporting a culture of discovery learning
        in your classroom throughout unit 2. Your plan should address the following:
        \r
        \r
        - For lessons that call for students to discover a key computer science
        concept, how do you plan to balance your time frontloading content instruction
        with students’ time completing the activity and constructing their own knowledge?
        \r
        - What is your strategy for supporting students who struggle with this
        model of teaching and learning, and look to you to ‘just give them the answer’?\r
        -
        How do you plan to make sure students leave a lesson having discovered the
        underlying concept(s)? \r
        \r
        You can type out your teaching practice plan
        in the box below, or you can upload a word doc or pdf file. \r
        \r
        ## Getting
        Credit for Completing this Task\r
        \r
        #### Task Review Details\r
        \r
        If
        this module is listed as  your “focus area”, then your response to the prompt
        above will be shared anonymously and reviewed by your peers, and you will
        review the work done by other teachers. Reviewers will be looking for thoughtful
        and thorough answers that demonstrate that you have spent time considering
        how this practice will fit into your own classroom. Reviewers will have an
        opportunity to give feedback on your submission, and you can respond to that
        feedback and resubmit. \r
        \r
        In order to get credit for completing this
        task, two reviewers need to agree that you have responded to the prompts fully.
        If reviewers don’t feel comfortable making a decision about your task submission,
        they can elevate to a facilitator to review. You will always have a chance
        to address feedback from your reviewers and resubmit your task! Reviewer feedback
        will show up at the bottom of this page, once it’s available. \r
        \r
        \r
        \r
      'Unit 2 Teaching Practice Plan: Group Work and Peer Learning_markdown_instruction': |
        <br><br>\r
        \r
        >
        **NOTE: before you start this task, make sure you’ve reviewed the resources
        in this module, and have a good sense of the connections to unit 2. If you
        haven’t already reviewed the materials, do that now and come back to this
        task later.**\r
        \r
        \r
        # Unit 2 Teaching Practice Plan: Group Work and Peer
        Learning\r
        \r
        For this task, you’re going to develop and submit a Teaching
        Practice Plan, which details your plan for supporting group work throughout
        unit 2. Your plan should address the following things: \r
        \r
        - What is your
        plan for supporting students who are struggling to engage in group work, either
        because they prefer to work alone, or because they are having issues collaborating
        with their partner(s)?\r
        - How do you plan to help make sure all members
        of the team have a voice in their groups’ discussions?\r
        - How can you help
        students understand and appreciate the importance of learning through and
        from one another? \r
        \r
        You can type out your teaching practice plan in
        the box below, or you can upload a word doc or pdf file. \r
        \r
        ## Getting
        Credit for Completing this Task\r
        \r
        #### Task Review Details\r
        \r
        If
        this module is listed as  your “focus area”, then your response to the prompt
        above will be shared anonymously and reviewed by your peers, and you will
        review the work done by other teachers. Reviewers will be looking for thoughtful
        and thorough answers that demonstrate that you have spent time considering
        how this practice will fit into your own classroom. Reviewers will have an
        opportunity to give feedback on your submission, and you can respond to that
        feedback and resubmit. \r
        \r
        In order to get credit for completing this
        task, two reviewers need to agree that you have responded to the prompts fully.
        If reviewers don’t feel comfortable making a decision about your task submission,
        they can elevate to a facilitator to review. You will always have a chance
        to address feedback from your reviewers and resubmit your task! Reviewer feedback
        will show up at the bottom of this page, once it’s available. \r
        \r
        \r
        \r
        \r
      'Unit 3 Teaching Practice Plan: Assessing Student Learning_markdown_instruction': '**NOTE:
        before you start this task, make sure you’ve reviewed the resources in this
        module, and have a good sense of the connections to unit 3. If you haven’t
        already reviewed the materials, do that now and come back to this task later.**\r\n\r\n#
        Unit 3 Teaching Practice Plan: Assessing Student Learning\r\n\r\nFor this
        task, you’re going to develop and submit a Teaching Practice Plan, which details
        your plan for assessing student learning throughout unit 3. Your plan should
        address the following: \r\n\r\n- Using what’s in the curriculum\r\n \r\n -
        How do you plan to use the assessment opportunities that have been provided
        in the curriculum? Your response should include how you plan to use formative
        lessons questions (blue bubbles in code studio), project rubrics, AP-style
        questions, practice performance tasks (lesson 10).\r\n\r\n\r\n- Making your
        own assessments\r\n\r\n - What types of assessments might you need to create
        or use on top of those provided in the curriculum? \r\n - What is your strategy
        for developing assessment opportunities that are consistent with the philosophy
        of the curriculum and activities? \r\n\r\nYou can type out your teaching practice
        plan in the box below, or you can upload a word doc or pdf file. \r\n\r\n##
        Getting Credit for Completing this Task\r\n\r\n#### Task Review Details\r\n\r\nIf
        this module is listed as  your “focus area”, then your response to the prompt
        above will be shared anonymously and reviewed by your peers, and you will
        review the work done by other teachers. Reviewers will be looking for thoughtful
        and thorough answers that demonstrate that you have spent time considering
        how this practice will fit into your own classroom. Reviewers will have an
        opportunity to give feedback on your submission, and you can respond to that
        feedback and resubmit. \r\n\r\nIn order to get credit for completing this
        task, two reviewers need to agree that you have responded to the prompts fully.
        If reviewers don’t feel comfortable making a decision about your task submission,
        they can elevate to a facilitator to review. You will always have a chance
        to address feedback from your reviewers and resubmit your task! Reviewer feedback
        will show up at the bottom of this page, once it’s available. \r\n\r\n"

'
      'Unit 3 Teaching Practice Plan: Balancing Teacher and Tools_markdown_instruction': '**NOTE:
        before you start this task, make sure you’ve reviewed the resources in this
        module, and have a good sense of the connections to unit 3. If you haven’t
        already reviewed the materials, do that now and come back to this task later.**\r\n\r\n\r\n#
        Unit 3 Teaching Practice Plan: Balancing Teacher and Tools\r\n\r\n\r\nFor
        this task, you’re going to develop and submit a Teaching Practice Plan, which
        details your general plan for managing technology throughout unit 3, as well
        as a specific plan for one of the technology-dependent lessons (which are
        lessons 4 - 10). \r\n\r\nYour plan should be broken into two parts, and address
        the following things: \r\n\r\n- General strategies that you’ll apply throughout
        unit 3\r\n - Throughout unit 3, what classroom and technology management techniques
        will you use to help students stay focused on the lesson tasks? \r\n\r\n\r\n-
        Strategies specific to a selected lesson\r\n - Which of the plugged-in lessons
        are you discussing? \r\n - What is your plan for managing transitions between
        your instruction and students being in the tool? *Note: your response should
        include specifics about the lesson*\r\n - How do you plan to introduce the
        lesson challenge and the tool that students will use to complete the challenge?
        *Note: your response should include specifics about the lesson*\r\n\r\n\r\nYou
        can type out your teaching practice plan in the box below, or you can upload
        a word doc or pdf file. \r\n\r\n## Getting Credit for Completing this Task\r\n\r\n####
        Task Review Details\r\n\r\nIf this module is listed as  your “focus area”,
        then your response to the prompt above will be shared anonymously and reviewed
        by your peers, and you will review the work done by other teachers. Reviewers
        will be looking for thoughtful and thorough answers that demonstrate that
        you have spent time considering how this practice will fit into your own classroom.
        Reviewers will have an opportunity to give feedback on your submission, and
        you can respond to that feedback and resubmit. \r\n\r\nIn order to get credit
        for completing this task, two reviewers need to agree that you have responded
        to the prompts fully. If reviewers don’t feel comfortable making a decision
        about your task submission, they can elevate to a facilitator to review. You
        will always have a chance to address feedback from your reviewers and resubmit
        your task! Reviewer feedback will show up at the bottom of this page, once
        it’s available. \r\n \r\n\r\n"

'
      'Unit 3 Teaching Practice Plan: Discovery Learning_markdown_instruction': |
        <br><br>\r
        >
        **NOTE: before you start this task, make sure you’ve reviewed the resources
        in this module, and have a good sense of the connections to unit 3. If you
        haven’t already reviewed the materials, do that now and come back to this
        task later.**\r
        \r
        # Unit 3 Teaching Practice Plan: Discovery Learning\r
        \r
        For
        this task, you’re going to develop and submit a Teaching Practice Plan, which
        details your plan for building and supporting a culture of discovery learning
        in your classroom throughout unit 3. Your plan should address the following:
        \r
        \r
        - For lessons that call for students to discover a key computer science
        concept, how do you plan to balance your time frontloading content instruction
        with students’ time completing the activity and constructing their own knowledge?
        \r
        - What is your strategy for supporting students who struggle with this
        model of teaching and learning, and look to you to ‘just give them the answer’?\r
        -
        How do you plan to make sure students leave a lesson having discovered the
        underlying concept(s)? \r
        \r
        You can type out your teaching practice plan
        in the box below, or you can upload a word doc or pdf file. \r
        \r
        ## Getting
        Credit for Completing this Task\r
        \r
        #### Task Review Details\r
        \r
        If
        this module is listed as  your “focus area”, then your response to the prompt
        above will be shared anonymously and reviewed by your peers, and you will
        review the work done by other teachers. Reviewers will be looking for thoughtful
        and thorough answers that demonstrate that you have spent time considering
        how this practice will fit into your own classroom. Reviewers will have an
        opportunity to give feedback on your submission, and you can respond to that
        feedback and resubmit. \r
        \r
        In order to get credit for completing this
        task, two reviewers need to agree that you have responded to the prompts fully.
        If reviewers don’t feel comfortable making a decision about your task submission,
        they can elevate to a facilitator to review. You will always have a chance
        to address feedback from your reviewers and resubmit your task! Reviewer feedback
        will show up at the bottom of this page, once it’s available. \r
        \r
        \r
        \r
      'Unit 3 Teaching Practice Plan: Group Work and Peer Learning_markdown_instruction': |
        <br><br>\r
        \r
        >
        **NOTE: before you start this task, make sure you’ve reviewed the resources
        in this module, and have a good sense of the connections to unit 3. If you
        haven’t already reviewed the materials, do that now and come back to this
        task later.**\r
        \r
        \r
        # Unit 3 Teaching Practice Plan: Group Work and Peer
        Learning\r
        \r
        For this task, you’re going to develop and submit a Teaching
        Practice Plan, which details your plan for supporting group work throughout
        unit 3. Your plan should address the following things: \r
        \r
        - What is your
        plan for supporting students who are struggling to engage in group work, either
        because they prefer to work alone, or because they are having issues collaborating
        with their partner(s)?\r
        - How do you plan to help make sure all members
        of the team have a voice in their groups’ discussions?\r
        - How can you help
        students understand and appreciate the importance of learning through and
        from one another? \r
        \r
        You can type out your teaching practice plan in
        the box below, or you can upload a word doc or pdf file. \r
        \r
        ## Getting
        Credit for Completing this Task\r
        \r
        #### Task Review Details\r
        \r
        If
        this module is listed as  your “focus area”, then your response to the prompt
        above will be shared anonymously and reviewed by your peers, and you will
        review the work done by other teachers. Reviewers will be looking for thoughtful
        and thorough answers that demonstrate that you have spent time considering
        how this practice will fit into your own classroom. Reviewers will have an
        opportunity to give feedback on your submission, and you can respond to that
        feedback and resubmit. \r
        \r
        In order to get credit for completing this
        task, two reviewers need to agree that you have responded to the prompts fully.
        If reviewers don’t feel comfortable making a decision about your task submission,
        they can elevate to a facilitator to review. You will always have a chance
        to address feedback from your reviewers and resubmit your task! Reviewer feedback
        will show up at the bottom of this page, once it’s available. \r
        \r
        \r
        \r
        \r
      'Unit 4 Teaching Practice Plan: Assessing Student Learning_markdown_instruction': '**NOTE:
        before you start this task, make sure you’ve reviewed the resources in this
        module, and have a good sense of the connections to unit 4. If you haven’t
        already reviewed the materials, do that now and come back to this task later.**\r\n\r\n#
        Unit 4 Teaching Practice Plan: Assessing Student Learning\r\n\r\nFor this
        task, you’re going to develop and submit a Teaching Practice Plan, which details
        your plan for assessing student learning throughout unit 4. Your plan should
        address the following: \r\n\r\n- **Using what’s in the curriculum** How do
        you plan to use the assessment opportunities that have been provided in the
        curriculum? Your response should include how you plan to use:\r\n - formative
        lessons questions (blue bubbles in code studio), \r\n - project rubrics, \r\n
        - AP-style questions (following lesson 9), \r\n - practice performance tasks
        (lesson 9).\r\n\r\n- **Making your own assessments**\r\n - What types of assessments
        might you need to create or use on top of those provided in the curriculum?
        \r\n - What is your strategy for developing assessment opportunities that
        are consistent with the philosophy of the curriculum and activities? \r\n\r\nYou
        can type out your teaching practice plan in the box below, or you can upload
        a word doc or pdf file. \r\n\r\n## Getting Credit for Completing this Task\r\n\r\n####
        Task Review Details\r\n\r\nIf this module is listed as  your “focus area”,
        then your response to the prompt above will be shared anonymously and reviewed
        by your peers, and you will review the work done by other teachers. Reviewers
        will be looking for thoughtful and thorough answers that demonstrate that
        you have spent time considering how this practice will fit into your own classroom.
        Reviewers will have an opportunity to give feedback on your submission, and
        you can respond to that feedback and resubmit. \r\n\r\nIn order to get credit
        for completing this task, two reviewers need to agree that you have responded
        to the prompts fully. If reviewers don’t feel comfortable making a decision
        about your task submission, they can elevate to a facilitator to review. You
        will always have a chance to address feedback from your reviewers and resubmit
        your task! Reviewer feedback will show up at the bottom of this page, once
        it’s available. \r\n\r\n"

'
      'Unit 4 Teaching Practice Plan: Balancing Teacher and Tools_markdown_instruction': '**NOTE:
        before you start this task, make sure you’ve reviewed the resources in this
        module, and have a good sense of the connections to unit 4. If you haven’t
        already reviewed the materials, do that now and come back to this task later.**\r\n\r\n\r\n#
        Unit 4 Teaching Practice Plan: Balancing Teacher and Tools\r\n\r\n<img src=\"https://images.code.org/1cc3effc2c7fbd1003ecb8a8561f893e-image-1481692026401.38.35
        PM.png\" style=\"float:right; margin-left:30px; width:45%\">\r\n\r\nFor this
        task, you’re going to develop and submit a Teaching Practice Plan, which details
        your general plan for managing technology throughout unit 4, as well as a
        specific plan for one of the technology-dependent lessons highlighted in unit
        overview on the right. Note that lessons with a solid red boarder leverage
        primarily external tools, while lessons with the dashed line use custom-made
        widgets and tools that are housed within Code Studio. \r\n\r\n\r\nYour plan
        should be broken into two parts, and address the following things: \r\n\r\n-
        General strategies that you’ll apply throughout unit 4\r\n - Throughout unit
        4, what classroom and technology management techniques will you use to help
        students stay focused on the lesson tasks? \r\n\r\n- Strategies specific to
        a selected lesson\r\n - Which of the highlighted lessons on the right are
        you discussing? \r\n - What is your plan for managing transitions between
        your instruction and students being in the tool? *Note: your response should
        include specifics about the lesson*\r\n - How do you plan to introduce the
        lesson challenge and the tool that students will use to complete the challenge?
        *Note: your response should include specifics about the lesson*\r\n\r\n\r\nYou
        can type out your teaching practice plan in the box below, or you can upload
        a word doc or pdf file. \r\n\r\n## Getting Credit for Completing this Task\r\n\r\n####
        Task Review Details\r\n\r\nIf this module is listed as  your “focus area”,
        then your response to the prompt above will be shared anonymously and reviewed
        by your peers, and you will review the work done by other teachers. Reviewers
        will be looking for thoughtful and thorough answers that demonstrate that
        you have spent time considering how this practice will fit into your own classroom.
        Reviewers will have an opportunity to give feedback on your submission, and
        you can respond to that feedback and resubmit. \r\n\r\nIn order to get credit
        for completing this task, two reviewers need to agree that you have responded
        to the prompts fully. If reviewers don’t feel comfortable making a decision
        about your task submission, they can elevate to a facilitator to review. You
        will always have a chance to address feedback from your reviewers and resubmit
        your task! Reviewer feedback will show up at the bottom of this page, once
        it’s available. \r\n \r\n\r\n"

'
      'Unit 4 Teaching Practice Plan: Discovery Learning_markdown_instruction': |
        <br><br>\r
        >
        **NOTE: before you start this task, make sure you’ve reviewed the resources
        in this module, and have a good sense of the connections to unit 4. If you
        haven’t already reviewed the materials, do that now and come back to this
        task later.**\r
        \r
        # Unit 4 Teaching Practice Plan: Discovery Learning\r
        \r
        For
        this task, you’re going to develop and submit a Teaching Practice Plan, which
        details your plan for building and supporting a culture of discovery learning
        in your classroom throughout unit 4. **While students will do a lot of hands
        on discovery work throughout unit 4, lessons 5 - 7 are particularly dependent
        on discovery as the mechanism that students use to explore concepts.**  Your
        plan should address the following: \r
        \r
        - For lessons that call for students
        to discover a key computer science concept, how do you plan to balance your
        time frontloading content instruction with students’ time completing the activity
        and constructing their own knowledge? \r
        - What is your strategy for supporting
        students who struggle with this model of teaching and learning, and look to
        you to ‘just give them the answer’?\r
        - How do you plan to make sure students
        leave a lesson having discovered the underlying concept(s)? \r
        \r
        You can
        type out your teaching practice plan in the box below, or you can upload a
        word doc or pdf file. \r
        \r
        ## Getting Credit for Completing this Task\r
        \r
        ####
        Task Review Details\r
        \r
        If this module is listed as  your “focus area”,
        then your response to the prompt above will be shared anonymously and reviewed
        by your peers, and you will review the work done by other teachers. Reviewers
        will be looking for thoughtful and thorough answers that demonstrate that
        you have spent time considering how this practice will fit into your own classroom.
        Reviewers will have an opportunity to give feedback on your submission, and
        you can respond to that feedback and resubmit. \r
        \r
        In order to get credit
        for completing this task, two reviewers need to agree that you have responded
        to the prompts fully. If reviewers don’t feel comfortable making a decision
        about your task submission, they can elevate to a facilitator to review. You
        will always have a chance to address feedback from your reviewers and resubmit
        your task! Reviewer feedback will show up at the bottom of this page, once
        it’s available. \r
        \r
        \r
        \r
      'Unit 4 Teaching Practice Plan: Group Work and Peer Learning_markdown_instruction': |
        <br><br>\r
        \r
        >
        **NOTE: before you start this task, make sure you’ve reviewed the resources
        in this module, and have a good sense of the connections to unit 4. If you
        haven’t already reviewed the materials, do that now and come back to this
        task later.**\r
        \r
        \r
        # Unit 4 Teaching Practice Plan: Group Work and Peer
        Learning\r
        \r
        For this task, you’re going to develop and submit a Teaching
        Practice Plan, which details your plan for supporting group work throughout
        unit 4. Your plan should address the following things: \r
        \r
        - What is your
        plan for supporting students who are struggling to engage in group work, either
        because they prefer to work alone, or because they are having issues collaborating
        with their partner(s)?\r
        - How do you plan to help make sure all members
        of the team have a voice in their groups’ discussions?\r
        - How can you help
        students understand and appreciate the importance of learning through and
        from one another? \r
        \r
        You can type out your teaching practice plan in
        the box below, or you can upload a word doc or pdf file. \r
        \r
        ## Getting
        Credit for Completing this Task\r
        \r
        #### Task Review Details\r
        \r
        If
        this module is listed as  your “focus area”, then your response to the prompt
        above will be shared anonymously and reviewed by your peers, and you will
        review the work done by other teachers. Reviewers will be looking for thoughtful
        and thorough answers that demonstrate that you have spent time considering
        how this practice will fit into your own classroom. Reviewers will have an
        opportunity to give feedback on your submission, and you can respond to that
        feedback and resubmit. \r
        \r
        In order to get credit for completing this
        task, two reviewers need to agree that you have responded to the prompts fully.
        If reviewers don’t feel comfortable making a decision about your task submission,
        they can elevate to a facilitator to review. You will always have a chance
        to address feedback from your reviewers and resubmit your task! Reviewer feedback
        will show up at the bottom of this page, once it’s available. \r
        \r
        \r
        \r
        \r
      'Unit 5 Teaching Practice Plan: Assessing Student Learning_markdown_instruction': '**NOTE:
        before you start this task, make sure you’ve reviewed the resources in this
        module, and have a good sense of the connections to unit 5. If you haven’t
        already reviewed the materials, do that now and come back to this task later.**\r\n\r\n#
        Unit 5 Teaching Practice Plan: Assessing Student Learning\r\n\r\nFor this
        task you’re going to develop and submit a Teaching Practice Plan, which details
        your plan for assessing student learning throughout unit 5. Your plan should
        address the following: \r\n\r\n- **Using what’s in the curriculum** How do
        you plan to use the assessment opportunities that have been provided in the
        curriculum? Your response should include how you plan to use:\r\n - code students
        write while learning about a concept (not the final projects that they build
        towards)\r\n - submittable projects (which typically come after a set of 2-3
        lessons and pull together multiple concepts)\r\n - AP-style questions (following
        lessons 5, 10, 14, and 17), \r\n - practice performance tasks (lesson 18).\r\n\r\n-
        **Making your own assessments**\r\n - What types of assessments might you
        need to create or use on top of those provided in the curriculum? \r\n - What
        is your strategy for developing assessment opportunities that are consistent
        with the philosophy of the curriculum and activities? \r\n\r\nYou can type
        out your teaching practice plan in the box below, or you can upload a word
        doc or pdf file. \r\n\r\n## Getting Credit for Completing this Task\r\n\r\n####
        Task Review Details\r\n\r\nIf this module is listed as  your “focus area”,
        then your response to the prompt above will be shared anonymously and reviewed
        by your peers, and you will review the work done by other teachers. Reviewers
        will be looking for thoughtful and thorough answers that demonstrate that
        you have spent time considering how this practice will fit into your own classroom.
        Reviewers will have an opportunity to give feedback on your submission, and
        you can respond to that feedback and resubmit. \r\n\r\nIn order to get credit
        for completing this task, two reviewers need to agree that you have responded
        to the prompts fully. If reviewers don’t feel comfortable making a decision
        about your task submission, they can elevate to a facilitator to review. You
        will always have a chance to address feedback from your reviewers and resubmit
        your task! Reviewer feedback will show up at the bottom of this page, once
        it’s available. \r\n\r\n"

'
      'Unit 5 Teaching Practice Plan: Balancing Teacher and Tools_markdown_instruction': '**NOTE:
        before you start this task, make sure you’ve reviewed the resources in this
        module, and have a good sense of the connections to unit 5. If you haven’t
        already reviewed the materials, do that now and come back to this task later.**\r\n\r\n\r\n#
        Unit 5 Teaching Practice Plan: Balancing Teacher and Tools\r\n\r\nFor this
        task, you’re going to develop and submit a Teaching Practice Plan, which details
        your general plan for managing technology throughout unit 4, as well as a
        specific plan for a computer-based lesson (which for unit 5, is almost every
        lesson).\r\n\r\nYour plan should be broken into two parts, and address the
        following: \r\n\r\n- General strategies that you’ll apply throughout unit
        5\r\n - Throughout unit 4, what classroom and technology management techniques
        will you use to help students stay focused on the lesson tasks? \r\n\r\n-
        Strategies specific to a selected lesson\r\n - Which lesson are you discussing?
        \r\n - What is your plan for managing transitions between your instruction
        and students being in App Lab? *Note: your response should include specifics
        about the lesson*\r\n - How do you plan to introduce the lesson challenge
        as well as any new features or programming concepts that have been added to
        App Lab since the last lesson? *Note: your response should include specifics
        about the lesson*\r\n\r\n\r\nYou can type out your teaching practice plan
        in the box below, or you can upload a word doc or pdf file. \r\n\r\n## Getting
        Credit for Completing this Task\r\n\r\n#### Task Review Details\r\n\r\nIf
        this module is listed as  your “focus area”, then your response to the prompt
        above will be shared anonymously and reviewed by your peers, and you will
        review the work done by other teachers. Reviewers will be looking for thoughtful
        and thorough answers that demonstrate that you have spent time considering
        how this practice will fit into your own classroom. Reviewers will have an
        opportunity to give feedback on your submission, and you can respond to that
        feedback and resubmit. \r\n\r\nIn order to get credit for completing this
        task, two reviewers need to agree that you have responded to the prompts fully.
        If reviewers don’t feel comfortable making a decision about your task submission,
        they can elevate to a facilitator to review. You will always have a chance
        to address feedback from your reviewers and resubmit your task! Reviewer feedback
        will show up at the bottom of this page, once it’s available. \r\n \r\n\r\n"

'
      'Unit 5 Teaching Practice Plan: Discovery Learning_markdown_instruction': |
        <br><br>\r
        >
        **NOTE: before you start this task, make sure you’ve reviewed the resources
        in this module, and have a good sense of the connections to unit 5. If you
        haven’t already reviewed the materials, do that now and come back to this
        task later.**\r
        \r
        # Unit 5 Teaching Practice Plan: Discovery Learning\r
        \r
        For
        this task, you’re going to develop and submit a Teaching Practice Plan, which
        details your plan for building and supporting a culture of discovery learning
        in your classroom throughout unit 5. Your plan should address the following:
        \r
        \r
        - How do you plan to balance your time frontloading content instruction
        with students’ time experimenting with new programming concepts introduced
        in the unit? \r
        - How do you plan to evaluate students' understanding of
        the programming concepts they're supposed to leran in the unit? \r
        \r
        You
        can type out your teaching practice plan in the box below, or you can upload
        a word doc or pdf file. \r
        \r
        ## Getting Credit for Completing this Task\r
        \r
        ####
        Task Review Details\r
        \r
        If this module is listed as  your “focus area”,
        then your response to the prompt above will be shared anonymously and reviewed
        by your peers, and you will review the work done by other teachers. Reviewers
        will be looking for thoughtful and thorough answers that demonstrate that
        you have spent time considering how this practice will fit into your own classroom.
        Reviewers will have an opportunity to give feedback on your submission, and
        you can respond to that feedback and resubmit. \r
        \r
        In order to get credit
        for completing this task, two reviewers need to agree that you have responded
        to the prompts fully. If reviewers don’t feel comfortable making a decision
        about your task submission, they can elevate to a facilitator to review. You
        will always have a chance to address feedback from your reviewers and resubmit
        your task! Reviewer feedback will show up at the bottom of this page, once
        it’s available. \r
        \r
        \r
        \r
      'Unit 5 Teaching Practice Plan: Group Work and Peer Learning_markdown_instruction': |
        <br><br>\r
        \r
        >
        **NOTE: before you start this task, make sure you’ve reviewed the resources
        in this module, and have a good sense of the connections to unit 5. If you
        haven’t already reviewed the materials, do that now and come back to this
        task later.**\r
        \r
        \r
        # Unit 5 Teaching Practice Plan: Group Work and Peer
        Learning\r
        \r
        For this task, you’re going to develop and submit a Teaching
        Practice Plan, which details your plan for supporting group work throughout
        unit 5. Your plan should address the following things: \r
        \r
        - What is your
        plan for supporting students who are struggling to engage in group work, either
        because they prefer to work alone, or because they are having issues collaborating
        with their partner(s)?\r
        - How do you plan to help make sure all members
        of the team have a voice in their groups’ discussions?\r
        - How can you help
        students understand and appreciate the importance of learning through and
        from one another? \r
        - What recommendations will you give students about
        collaboration on their Create Performance Task? \r
        \r
        You can type out your
        teaching practice plan in the box below, or you can upload a word doc or pdf
        file. \r
        \r
        ## Getting Credit for Completing this Task\r
        \r
        #### Task
        Review Details\r
        \r
        If this module is listed as  your “focus area”, then
        your response to the prompt above will be shared anonymously and reviewed
        by your peers, and you will review the work done by other teachers. Reviewers
        will be looking for thoughtful and thorough answers that demonstrate that
        you have spent time considering how this practice will fit into your own classroom.
        Reviewers will have an opportunity to give feedback on your submission, and
        you can respond to that feedback and resubmit. \r
        \r
        In order to get credit
        for completing this task, two reviewers need to agree that you have responded
        to the prompts fully. If reviewers don’t feel comfortable making a decision
        about your task submission, they can elevate to a facilitator to review. You
        will always have a chance to address feedback from your reviewers and resubmit
        your task! Reviewer feedback will show up at the bottom of this page, once
        it’s available. \r
        \r
        \r
        \r
        \r
      Using Accelerometer Events_markdown_instruction: |-
        Today you’re going to learn
        how to use and create **functions**.\r
        \r
        Creating a function lets you make
        your own blocks! There are two parts to a function: \r
        \r
        Making a newly
        named block that has all of the code you want to run inside of it. \r
        -xml
        of function definition- \r
        \r
        The single green block itself that you use,
        or call, to run the function you created.\r
        -xml of function call-\r
        \r
        Prepare
        to get familiar with functions, learn how to edit them, and create your own!
      Using Accelerometer Events_2018_markdown_instruction: |-
        Today you’re going to
        learn how to use and create **functions**.\r
        \r
        Creating a function lets
        you make your own blocks! There are two parts to a function: \r
        \r
        Making
        a newly named block that has all of the code you want to run inside of it.
        \r
        -xml of function definition- \r
        \r
        The single green block itself that
        you use, or call, to run the function you created.\r
        -xml of function call-\r
        \r
        Prepare
        to get familiar with functions, learn how to edit them, and create your own!
      Valentine_artist_01_markdown_instruction: |-
        Help the artist finish his llama
        heart to change it from llame to llovely! How many llamas does the artist
        still need to draw?
      Valentine_playlab_01_markdown_instruction: |-
        Kiki the Soccer Girl wants to make
        sure her friends are loved on Valentine's Day! Program Kiki (Actor 1) to
        move left and right when the left and right arrows are pressed. When Kiki
        is clicked, she should throw hearts towards her friends. \r
        \r
        ---\r
        Click
        "Run" and play the game to find out how many friends she has to send love
        to in order to win!
      Validator_markdown_instruction: |-
        # Software Accessibility: Validator\r
        \r
        The
        HTML is designed to display the same way on all computers, but sometimes you’ll
        notice that different web browsers, or even different versions of the same
        browser, display a website differently. Often this is because you either missed
        a rule of HTML, or didn’t describe your content specifically enough. Fortunately
        there’s a tool called the Validator that can check your code for errors!\r
        \r
        #
        Do This\r
        \r
        * Open up the <a href="https://validator.w3.org/#validate_by_input"
        target="_blank">Validator - Website</a>\r
        * For each html file in your
        project\r
        \t* Copy the html into the box\r
            * Click check to see if there
        are an error\r
        \t* Make a list of all unique errors.\r
            * For each error,
        write in your own words what you think it means\r
            * For each error, search
        to find a potential solution.
      Video - Cybersecurity and Crime - Video_markdown_instruction: |-
        [Video guide
        and questions](https://drive.google.com/open?id=1Qv4lgMMtP42sRlofUmGtElViD1AJ7yETvQ4pCh0rDjw)
      Video - Cybersecurity and Crime_markdown_instruction: "[Video guide and questions](https://drive.google.com/open?id=1Qv4lgMMtP42sRlofUmGtElViD1AJ7yETvQ4pCh0rDjw)"
      Video. Introduction to Conditionals - Part 1_markdown_instruction: |-
        ### Points
        to pay attention to:\r
        \r
        1. What's a *Boolean Expression?*\r
        2. Why is
        it called a "Boolean"?\r
        3. Is this a legal expression?  `10 > 25`?
      Video. Introduction to Conditionals - Part 2.2_markdown_instruction: |
        ### Points
        to pay attention to:\r
        \r
        **Start** play at 1:37 \r
        **Stop** play at 2:20\r
        \r
        It's
        all you need for the exercises that follow.  You'll watch the remainder of
        the video after that.\r
        \r
        * An IF statement can have an else clause, but
        an ELSE clause cannot exist on its own.\r
        * With an else clause you are *guaranteeing*
        that one of two portions of code will run.\r
        \r
      Video. Introduction to Conditionals - Part 2.3_markdown_instruction: |
        ### Points
        to pay attention to:\r
        \r
        * **START at 2:20**  \r
            This is the second
        half of the video you watched earlier. \r
        \r
        * An If-else-if statement let's
        you check more than one condition at a time.\r
        * The **order of conditions
        matters**. Since conditions are checked sequentially from top to bottom, the
        code that gets executed will be the *first* statement to evaluate to true.\r
        \r
      Video. Introduction to Conditionals - Part 2_markdown_instruction: |
        ### Points
        to pay attention to:\r
        \r
        * **NOTE:** Stop play at 1:37.  \r
            It's
        all you need for the exercises that follow.  You'll watch the remainder of
        the video after that.\r
        \r
        * An IF statement can have an else clause, but
        an ELSE clause cannot exist on its own.\r
        * With an else clause you are *guaranteeing*
        that one of two portions of code will run.\r
        \r
      Vigenere_markdown_instruction: |
        # Encrypt and decrypt a message with the Vigenère
        cipher\r
        \r
        This is an interactive version of the Vigenère cipher that animates
        the encryption and decryption as it’s happening, given a piece of text to
        encrypt or decrypt and the key.\r
        \r
        # Do this\r
        ### Encrypt a message\r
        Click
        Step several times, and trace what’s happening. Pay attention to:\r
        \r
        -
        How the ciphertext is being produced\r
        - What happens when you get to the
        last character of the key\r
        - After you’ve stepped through a few characters
        click Play to watch the rest animate\r
        - Hit Restart and play the animation
        again. You can use the speed slider to speed it up or slow it down  \r
        \r
        ![](https://images.code.org/06858f88ac12997bba73f4f76638a068-image-1443574425185.gif)\r
        \r
        ###
        Decrypt a message\r
        Encrypt a message as above, then:  \r
        \r
        - Highlight
        and copy the ciphertext\r
        - Paste it into the plaintext area. Note: Don’t
        change the key\r
        - Change the Encrypt/Decrypt toggle to Decrypt\r
        - Hit
        Step a few times, and then Play\r
        \r
        You should see the original text emerge.  \r
        ![](https://images.code.org/dc89d6c19c17adb23b6b5ff9a62c4583-image-1443574425182.gif)\r
        \r
        \r
        How
        hard would it be to crack a message encrypted with this cipher? Does the length
        of the key make a difference?\r
      Visual Accessibility_markdown_instruction: |-
        # Visual Accessibility: Color Contrast\r
        \r
        People
        need to be able to see and read the content on your web page for it to be
        useful. Not everyone will see your website the same way you do. Some people
        might have bad eye sight, others are color blind. How do you design with these
        differences in mind?\r
        \r
        One of the easiest ways to insure that many people
        will be able to read the content on your website is to make sure their is
        enough contrast between the different colors you are using together on your
        site. Contrast is the state of being strikingly different from something else.
        Check out the below example of contrasting colors.\r
        \r
        | Example 1 | Example
        2 |\r
        | --------- | --------- |\r
        |<img src="https://images.code.org/f4f8acab4c8fe45cddef0436c52084cf-image-1476231852248.jpg"
        style="width:200px"> | <img src="https://images.code.org/76ea7aba97b7a9717f8b784b0987a055-image-1476231855350.jpg"
        style="width:200px"> |\r
        \r
        Stare at example 1 for a few seconds. You
        might notice that the edges of the text blur with the background or it feels
        like the image is pulsing. This is because the value of the colors is too
        close together. The second is definitely easier to look at because one color
        is dark and one is light.\r
        \r
        A way to test this is convert everything
        to grayscale. Notice how in the example below the example with contrasting
        colors is easier to view in grayscale.\r
        \r
        <img src="https://images.code.org/40be05f66945d5cf0fda69be95986a4a-image-1476232151166.jpg"
        style="width:300px">\r
        \r
        Contrast can be a powerful tool to use in your
        website. You can direct a users eye to a certain part of the page using contrast.
        Check out this page. Where is your eye drawn?\r
        \r
        <img src="https://images.code.org/63af145760dc94d66dfff8791c1dfe65-image-1476232407521.32.15
        PM.jpg" style="width:500px">\r
        \r
        Your answer is probably the orange
        buttons. Thats because those buttons have contrasting colors to the rest of
        the page which are lighter.\r
        \r
        # Do This\r
        \r
        * Use the <a href="http://contrastchecker.com/">
        color contrast checker </a> to see the difference in contrast of the different
        colors you are using together on your site. This website uses hex codes for
        colors. Remember that you can find the hex codes for your colors in your color
        information from lesson 10.\r
        * Click the "See Grayscale" button to see
        how well you can read the different text and background colors\r
        * Consider
        making changes to your color choices by darkening or lightening up certain
        colors to make them easier to read.\r
        \r
        ** Images and examples from http://gomedia.com/zine/tutorials/rule-three-contrast-contrast-contrast/
        **
      Web Lab 1_markdown_instruction: |-
        Make an awesome web page!\r
        \r
        1. Look at
        the web page we gave you to start with. Look how lame it is. 1996 just called
        and wants its web page back. But don't get depressed - YOU can fix it!\r
        2.
        Add a background-color attribute in the body style in style.css to make the
        page background color 'darkcyan'\r
        3. Add a text-align attribute to the
        body style in style.css to center the image and text horizontally\r
        4. Change
        index.html to include an inspiring hashtag\r
        5. Add a color attribute to
        the p style in style.css to make the inspiring hashtag white\r
        6. Add a font-size
        attribute to the p style in style.css to make your inspiring hashtag REALLY
        BIG! (Try 24px and 3em and see what happens.)
      Website Comparison_markdown_instruction: |-
        # Comparing Websites\r
        \r
        **Prompt:**
        Imagine you have a new puppy at home who has chewed through her old leash.
        Decide between which of these two websites you would ultimately decide to
        buy your puppy’s new leash. Why?\r
        \r
        * Website 1: <a href="https://thimbleprojects.org/nickianselmo/84613/">
        Uncle Joe's Pet Store</a>\r
        * Website 2: <a href="http://www.petsmart.com/">
        PetSmart</a>\r
        \r
        Write your answer in the box below. When you are done
        wait for directions from your teacher before moving on.
      'Website: Data Breaches_markdown_instruction': "## Website: Data Breaches\\r\n\\r\nIn\nlesson
        3 students begin to explore the types of security breakdowns that have\nhappened
        over time, and consider what information is actually out there about\nthem.
        The lessons starts with an exploration of an interactive data visualization\nwebsite,
        linked below: "
      'Wednesday Report: Balancing Teachers and Tools in Unit 1_markdown_instruction': "At\nthis
        point you've seen 7 of the 14 lessons from unit 1. Thinking about those\nlessons,
        and looking across the other lessons in <a href=\"//curriculum.code.org/csp/unit1/\"\ntarget=_blank>unit
        1</a>. Again, consider the following questions with your\npartner:\\r\n\\r\n-
        How have people wearing teacher hats been balancing their\ntime leading or
        guiding with the student-hat’s time to get into activities\nand tools?\\r\n-
        What strategies have been effective for managing the transition\nto tools?
        What strategies are effective in getting peoples’ attention once\nthey’re
        lost in a tool?\\r\n- What are your current thoughts about the appropriate\nbalance
        of teacher-guided time VS time in the tools or with the activities?\\r\n\\r\n<br>\\r\n\\r\nOnce\nyou've
        had a chance to think about what you've seen today,  work with your\npartner
        to develop a set of recommendations about balancing the teacher and\nthe tools
        in Unit 1. Your recommendations might include:\\r\n\\r\n- Which lessons\nor
        activities present the biggest challenges with balancing teachers and tools?\n\\r\n-
        What recommendations do you have related to balancing teachers and tools\nin
        Unit 1?  \\r\n\\r\n<br>\\r\n\\r\nUse the space below to record your recommendations\n(you'll
        share them tomorrow). "
      'Wednesday Report: Discovery Learning in Unit 1_markdown_instruction': |
        At
        this point you've seen 7 of the 14 lessons from unit 1. Think about those
        lessons, and look across the other lessons in <a href="//curriculum.code.org/csp/unit1/"
        target=_blank>unit 1</a>. Again, consider the following questions with your
        partner:\r
        \r
        - What opportunities have you seen for learners to discover
        concepts for themselves? \r
        - How did the process of engaging in discovery
        activities change the pacing, flow, or outcome of the lesson? \r
        - What benefits
        and pitfalls did you see in discovery activities? \r
        \r
        <br>\r
        \r
        Once
        you've had a chance to think about what you've seen today,  work with your
        partner to develop a set of recommendations about balancing the teacher and
        the tools in Unit 1. Your recommendations should include:\r
        \r
        - Which lessons
        or activities provide opportunities for discovery learning? \r
        - What recommendations
        do you have for using discovery learning in Unit 1?  \r
        \r
        <br><br>\r
        Use
        the space below to record your recommendations (you'll share them tomorrow).
      'Wednesday Report: Group Work and Peer Learning in Unit 1_markdown_instruction': |-
        At
        this point you've seen 7 of the 14 lessons from unit 1. Thinking about those
        lessons, and looking across the other lessons in <a href="//curriculum.code.org/csp/unit1/"
        target=_blank>unit 1</a> Again, consider the following questions with your
        partner:\r
        \r
        - Where did you see group work and peer learning in these
        lessons?\r
        - What are the benefits of using group work and peer learning
        here?\r
        - How does using peer learning and group work as a strategy in the
        lesson impact how the activities run?\r
        \r
        <br>\r
        \r
        Once you've had
        a chance to think about what you've seen today,  work with your partner to
        develop a set of recommendations about group work and peer learning in Unit
        1. Your recommendations might include:\r
        \r
        - Which lessons or activities
        provide opportunities for group work and peer learning?\r
        - What recommendations
        do you have for using group work and peer learning in Unit 1 lessons?\r
        \r
        <br>\r
        \r
        Use
        the space below to record any recommendations or commentary you have for others.
      'Wednesday Report: Measuring Student Learning in Unit 1_markdown_instruction': |
        At
        this point you've seen 7 of the 14 lessons from unit 1. Thinking about those
        lessons, and looking across the other lessons in <a href="//curriculum.code.org/csp/unit1/"
        target=_blank>unit 1</a>. Again, consider the following questions with your
        partner:\r
        \r
        - What opportunities have you seen for assessing learners’
        knowledge (prior knowledge, knowledge gained during the lesson, etc)? \r
        -
        What assessments are available in the curriculum? \r
        - What strategies would
        be effective for checking in on what students know? \r
        \r
        <br>\r
        \r
        Once
        you've had a chance to think about what you've seen today,  work with your
        partner to develop a set of recommendations about balancing the teacher and
        the tools in Unit 1. Your recommendations should include:\r
        \r
        - Which lessons
        or activities present the biggest challenge with assessing student learning?\r
        -
        What recommendations do you have for assessing student learning in Unit 1?  \r
        \r
        <br>\r
        \r
        Use
        the space below to record your recommendations (you'll share them tomorrow).
      What is a Heuristic?_markdown_instruction: "## What is a Heuristic? \\r\n\\r\nIn\nlesson
        2 students will take on the challenge of compressing various pieces\nof text.
        Over time, they will see that different types of text require different\napproaches
        to compression. The lesson ends with an activity where students\ndevelop a
        heuristic, or a rule of thumb, that can be applied to different\npieces of
        text in order to compress them. \\r\n\\r\nThere are three Essential\nKnowledge
        Statements and one Exclusion Statement in the Framework dealing\nwith Heuristics:
        \\r\n\\r\n>- 4.2.1D Some problems can be solved but not in\na reasonable time.
        In these cases, heuristic approaches may be helpful to\nfind solutions in
        reasonable time. \\r\n- 4.2.2A A heuristic is a technique\nthat may allow
        us to find an approximate solution when typical methods fail\nto find an exact
        solution. \\r\n- 4.2.2B Heuristics may be helpful for finding\nan approximate
        solution more quickly when exact methods are too slow. \\r\n-\nExclusion Statement
        (4.2.2B): Specific heuristic solutions are beyond the\nscope of this course
        and the AP Exam.\\r\n\\r\nMany people are confused by the\ndifference between
        *algorithms* and *heuristics*. Check out the following\nresource for some
        clarification about the overlaps and differences between\nthe two. "
      What is the difference between formative and summative assessment?_markdown_instruction: |-
        The
        following link is a resource that provides definitions and examples of formative
        and summative assessments:
      WhileAdventure_markdown_instruction: |-
        Our adventurer wants to collect coins.  But
        she can only use 4 blocks to get them.  \r
        \r
        Can you help her grab as many
        as she can using just 4 blocks?
      'Widget: Black and White Pixelation_markdown_instruction': |
        # Make your own
        image of any size\r
        \r
        ![](https://images.code.org/01c15fed4f1a2c6c3af531edc35e736e-image-1439596066108.png)\r
        ![](https://images.code.org/24efcaa184d1fc852f37c32911b3b87c-image-1439596070178.png)\r
        ![](https://images.code.org/c9a5d0fd5ba445b7f6b5744e08b50e49-image-1439596071878.png)\r
        ![](https://images.code.org/f14e1b8dd722b0ca5bc54fa96b34f2eb-image-1439596074236.png)\r
        ![](https://images.code.org/fe938c0c16453b9d461b4023098079df-image-1439596075744.png)\r
        ![](https://images.code.org/02c88a7da51289b2f2d1f64bd8c97b28-image-1439596077514.png)\r
        ![](https://images.code.org/309e3157dcfd91956181007f483f8e58-image-1439596079084.png)\r
        \r
        \r
        **Directions:**\r
        \r
        *
        Encode an image of anything you like.\r
        * You might want to do some planning
        and sketching with graph paper first.\r
        * DO NOT simply make an abstract
        pattern, like a checkerboard. \r
        * Depict something, perhaps your name written
        out, your initials, an icon or logo of some sort.\r
        * Get creative! The image
        doesn't have to be a perfect square, it can be long and skinny.\r
        * Optional:
        for fun, send your image bits to a friend using the <a href ="https://studio.code.org/s/cspunit1/stage/11/puzzle/2"
        target="_blank">sending bits widget.</a> *(note: this is just a link to
        the sending formatted text level from a couple of classes ago)*\r
        \r
        \r
      'Widget: Color Pixelation_markdown_instruction': |
        # Personal Favicon\r
        **Requirements:**\r
        <img
        src = "https://images.code.org/28fc33ea82996a10863688702af55e65-image-1439596268865.png"
        align=right hspace=20>\r
        \r
        * The icon must be 16x16 pixels. \r
        * You must
        use the Pixelation Widget to encode the bits of color information.\r
        * The
        image must be encoded with at least 12 bits per pixel.\r
        \r
      'Widget: Text Compression_markdown_instruction': |-
        Look for patterns (repeated
        words or phrases) in the text. Enter the patterns you see into the dictionary
        on the right. As you type entries into the dictionary, the symbol for the
        entry is inserted into the text in place of the pattern.
      aE1_markdown_instruction: |
        <img src="https://images.code.org/fa3c416b74ff9071455535955bc4df35-image-1465507662295.gif"
        style="float:left; width:100px; margin: 0 20px 80px 100px;"/>\r
        \r
        <div
        style="color: #7665a0; font-size: 1.6em; line-height: 1.4em;">\r
        First,
        we need napkins!\r
        \r
        Choose your favorite shape:\r
         - Square (Easy)\r

        - Triangle (Medium)\r
         - Pentagon (Hard)\r
        \r
        </div>\r
        <br/>\r
        \r
      aE2_markdown_instruction: |
        <img src="https://images.code.org/2a67ea28a0fb9f674fd764b350b297da-image-1465514320176.gif"
        style="width:400px; margin: 0 20px 20px 10px;"/>\r
        \r
        <div style="color:
        #7665a0; font-size: 1.6em; line-height: 1.4em;" >Now we need enough for everyone!\r
        <br/><br/>\r
        \r
        Let's
        take the shape we just made and line up a row of 14 napkins.  \r
        <br/>\r
        If
        you place one loop inside another loop, we call that a nested loop. \r
        \r
        How
        can you loop all of the code from your last stage to make sure all 14 napkins
        line up next to each other?</div>\r
      aE3_markdown_instruction: |
        <img src="https://images.code.org/e9fe83556eec68be9ebd7de9a16267b1-image-1465516277348.gif"
        style="width:400px; margin: 0 20px 20px 100px;" loop="infinite"/>\r
        \r
        <div
        style="color: #7665a0; font-size: 1.6em; line-height: 1.4em;" >\r
        We've
        got to have a tablecloth!  <br/></br>\r
        \r
        Take your row of 14 napkins and
        sew 14 of those together with another **outer loop** to make a cover for our
        table.\r
        </div>\r
        \r
      aE3alternate_markdown_instruction: |
        \r
        <div style="color: #7665a0; font-size:
        1.6em; line-height: 1.4em;" >\r
        This alternate shows what the image would
        look like if the user chose pentagon napkins and modified line weight/color.\r
        </div>\r
        \r
      aE3alternateB_markdown_instruction: |
        \r
        <div style="color: #7665a0; font-size:
        1.6em; line-height: 1.4em;" >\r
        This alternate shows what the image would
        look like if the user chose triangle napkins and got bold with the code.\r
        </div>\r
        \r
      aE4_markdown_instruction: |
        \r
        <div style="color: #7665a0; font-size: 1.6em;
        line-height: 1.4em;" >\r
        Oh No! Our napkins are too small! \r
        <br/><br/>\r
        We
        need to have the napkins twice as big and still keep the tablecloth the same
        size. What numbers can you change to make that happen?\r
        <br/><br/>\r
        (as
        shown in triangles)\r
        </div>\r
        \r
      aE5_markdown_instruction: |
        \r
        <div style="color: #7665a0; font-size: 1.6em;
        line-height: 1.4em;" >\r
        Let's pull the look together with some window
        decorations!\r
        <br/><br/>\r
        Here is your original code for drawing a line
        of napkins. Piece 4 lines together to make a pattern that goes around your
        window frame.\r
        </div>\r
        \r
      aE6_markdown_instruction: |-
        <div style="color: #7665a0; font-size: 1.6em; line-height:
        1.4em;" >\r
        The guests are going to need something to sit on!\r
        <br/><br/>\r
        The
        artist has an idea to make some fun chairs. How many times do you need to
        loop this to draw half of a circle?\r
        </div>
      aE7_markdown_instruction: |-
        <div style="color: #7665a0; font-size: 1.6em; line-height:
        1.4em;" >\r
        How about some streamers?\r
        <br/><br/>\r
        If you create another
        loop like this one, but turn left instead of right, what happens? \r
        \r
        Can
        you repeat all of that to draw this wave?\r
        </div>
      aE8_markdown_instruction: |-
        <div style="color: #7665a0; font-size: 1.6em; line-height:
        1.4em;" >\r
        The artist wants to give picture frames as party favors!\r
        <br/><br/>\r
        Let's
        loop the code from our streamers four times to create this frame. \r
        <br/><br/>We've
        added a special block called `curvy corner` to give you fancy round corners!\r
        </div>
      aEfreeplay_markdown_instruction: |
        <div style="color: #7665a0; font-size: 1.6em;
        line-height: 1.4em;" >\r
        <b>Free Play:</b>\r
        For a final touch, we need
        some ornaments to hang around the house.\r
        <br/><br/>\r
        Can you design a
        decoration to spice up the party?\r
        </div>\r
        <br/>\r
        <h4>\r
        <details>\r
        <summary>Need
        Ideas?</summary>\r
        <br/>\r
        <br/>\r
        Try making a tablecloth full of diamond
        napkins!  \r
        <img src="https://images.code.org/2c092ea5edbb33405c019110df3f5710-image-1466095499984.43.56.png"
        width="200px"/>  \r
        <hr/>\r
        <br/>\r
        Make an ornament!   \r
        <img src="https://images.code.org/361d2ad667853418a040ec9383505169-image-1466096394561.56.12.png"
        width="200px"/>  \r
        <hr/>\r
        \r
        <br/>Make something completely new!  \r
        <img
        src="https://images.code.org/6809a1bd2a364ae7e0ff42745ec1fe1b-image-1466097871045.23.44.png"
        width="200px"/>  \r
        <hr/>\r
        \r
        \r
        </details>\r
        </h4>\r
        \r
      allthethings data blocks test_markdown_instruction: |-
        Please sign in to test
        applab levels (By design, applab levels only work if signed in. Normally,
        we make people sign in, but this is only enforceable for a whole script and
        would be annoying to do for the allthethings script).
      allthethings design mode elements_markdown_instruction: |-
        Please sign in to
        test applab levels (By design, applab levels only work if signed in. Normally,
        we make people sign in, but this is only enforceable for a whole script and
        would be annoying to do for the allthethings script).\r
        \r
        .\r
        \r
        .\r
        \r
        .\r
        \r
        .\r
        \r
        .\r
        \r
        .\r
        \r
        .\r
        \r
        .\r
        \r
        .\r
        \r
        .\r
        \r
        .\r
        \r
        .\r
        \r
        .\r
        \r
        .\r
        \r
        .\r
        \r
        .\r
        \r
        .\r
        \r
        .\r
        \r
        End
        of instructions that are long.
      allthethings level dataTables_markdown_instruction: |-
        Please sign in to test
        applab levels (By design, applab levels only work if signed in. Normally,
        we make people sign in, but this is only enforceable for a whole script and
        would be annoying to do for the allthethings script).
      allthethings_U3 - Simple Drawing - Rectangle Width and Height_markdown_instruction: |-
        #
        Drawing Rules\r
        \r
        So what did you discover on the last level?\r
        \r
        *
        What do each of the 4 openings control?\r
        \r
        \t* First Opening - controls
        the **location of the rectangle from left to right** - we call this the **x
        position**\r
            * Second Opening - controls the **location of the rectangle
        from top to bottom** - we call this the **y position**\r
            * Third Opening
        - controls the **width** of the rectangle\r
            * Fourth Opening - controls
        the **height** of the rectangle\r
        \r
        * What is the size of the drawing area?\r
        \r
        \t*
        Width - 400\r
            * Height - 400\r
        \r
        * So where is (0,0) or x = 0 and
        y = 0?\r
        \r
        \t* The **upper left corner of the grid!**\r
        \r
        # Do This\r
        \r
        We
        have provided you with code for a rectangle that draws in the upper left corner
        when you run the program. Using your new knowledge of the workspace and the
        inputs for a rectangle:\r
        \r
        * **Change the width and height of the rectangle
        so that it fills the whole drawing area**\r
        * **HINT:** Remember that the
        rectangle block is `rect(x, y, width, height)` in that order
      allthethings_embed_video_markdown_instruction: "Siri is a digital assistant\nbuilt
        into Apple's iOS devices, including iPhones and iPads. Watch the advertisement\nfor
        Siri, below. \n\n<iframe width=\"637px\" height=\"375px\" src=\"https://www.youtube.com/embed/8ciagGASro0\"\nframeborder=\"0\"
        allowfullscreen></iframe>\n\n<br/>\n__Reflect on the prompts\nbelow:__ \n\n-
        What types of information does Siri respond to in the video?\n-\nWhat do you
        think Siri is paying attention to in order to create these answers?\n"
      allthethings_moviebot_markdown_instruction: |
        # Please sign in to test applab
        levels (By design, applab levels only work if signed in. Normally, we make
        people sign in, but this is only enforceable for a whole script and would
        be annoying to do for the allthethings script).
        # Introduction to the Digital
        Assistant\r
        \r
        __While digital assistants may seem like magic, they are
        just elaborate computer programs that parse, or process, text__ looking for
        combinations of words to make decisions about what to reply.\r
        \r
        Over the
        next few lessons, __you're going to build up your own digital assistant that
        responds "intelligently" to a user's question__, by making a decision about
        what to reply based on the contents.\r
        \r
        You'll now __explore a demo digital
        assistant__, Movie Bot, that represents the kind of program that you'll build
        up to. Try out some of the prompts below and also try your own. You'll quickly
        find the limits of what this program can and can't do.\r
        \r
        # Do this\r
        __Run
        Movie Bot. In the _'enter your question here'_ input, type each of the following
        prompts and hit 'enter' __\r
        - 'help'\r
        - 'What is the best PG comedy
        movie ever?'\r
        - 'What PG comedy movie should I watch next?'\r
        - 'Could
        you please tell me the best romance movie?'\r
        - 'I waNT To WatCH a MovIE!!!'\r
        -
        'What is the capital of Kentucky?'\r
        - Play around! Ask more questions
        of Movie Bot and make a prediction about what logic it's using to reply\r
      allthethings_template_backed1_markdown_instruction: |
        Backed by a template #1.
        Please sign in to test applab levels (By design, applab levels only work if
        signed in. Normally, we make people sign in, but this is only enforceable
        for a whole script and would be annoying to do for the allthethings script).
      allthethings_template_backed2_markdown_instruction: |-
        Backed by a template #2.
        Please sign in to test applab levels (By design, applab levels only work if
        signed in. Normally, we make people sign in, but this is only enforceable
        for a whole script and would be annoying to do for the allthethings script).
      allthethings_ttscsd_markdown_instruction: |-
        <img src="https://images.code.org/a8ed6092389aedceceb38a83ac59fae1-image-1490832453029.07.10
        PM.png" style="float:right;height:150px">\r
        \r
        # Do This\r
        \r
        * Write
        code that makes an orange ellipse behind the green one.\r
        * Don't worry
        about the exact size as long as the green ellipse is entirely inside the orange
        one.
      allthethings_ttscsp_markdown_instruction: |
        \r
        # Play with different event
        types\r
        \r
        <img src="https://images.code.org/9f013bd84577eb2498061757e18a72f4-image-1444322870272.46.06
        AM.png" style="float: right">\r
        If you haven't yet, you should experiment
        with different event types with your `onEvent` blocks.  The ones that will
        work best here are mouse-related ones such as:\r
          * click\r
          * mousemove\r
          *
        movedown\r
          * mouseup\r
          * mouseover\r
        \r
        *There are some events that
        capture keystrokes from the keyboard. These are interesting, but they do not
        work easily with buttons. We'll stick to mouse events for now, and get to
        keys later.*\r
        \r
        **Be sure** to experiment with each of the ones that start
        with "mouse...".\r
        \r
        Once you've have played a little bit, click Finish
        to move on.\r
        \r
      artistDebugVideo1_markdown_instruction: |
        <div style="color: #7665a0; font-size:
        1.6em; line-height: 1.4em;" >\r
        Use the `repeat` loop to add waves to the
        water.<br/>\r
        </div>\r
        \r
        <img src="https://images.code.org/06a1120e0b2da4dbcf960a22c3abc248-image-1470787144854.gif"
        width="300"/>\r
      artistLoopsK2_markdown_instruction: |
        <div style="color: #7665a0; font-size:
        1.6em; line-height: 1.4em;" >\r
        Now, use a `repeat` loop to draw this line
        five times!<br/><br/>\r
        </div>\r
        \r
        <img src="https://images.code.org/6d79b5f8291bd8e11c427bff25f423c2-image-1467935497388.gif"
        width="300"/>\r
      artistLoopsK2gradek_artist_loops3_markdown_instruction: |
        <div style="color:
        #7665a0; font-size: 1.6em; line-height: 1.4em;" >\r
        Now, use a `repeat`
        loop to draw this line five times!<br/><br/>\r
        </div>\r
        \r
        <img src="https://images.code.org/6d79b5f8291bd8e11c427bff25f423c2-image-1467935497388.gif"
        width="300"/>\r
      artistLoopsK3_markdown_instruction: |
        <div style="color: #7665a0; font-size:
        1.6em; line-height: 1.4em;" >\r
        Draw a line eight steps long. This will
        become the land for our kingdom!<br/><br/>\r
        </div>\r
        \r
        <img src="https://images.code.org/c00b930eb5fb13ae946847adc51c9bd3-image-1467935631246.gif"
        width="300"/>\r
      artistLoopsK4_markdown_instruction: |
        <div style="color: #7665a0; font-size:
        1.6em; line-height: 1.4em;" >\r
        Now we need a castle with a draw bridge.  Fix
        the code so that the bridge lays straight instead of falling down.<br/><br/>\r
        </div>\r
        \r
        <img
        src="https://images.code.org/84b93e1b9dad3ee52a46c767524d3558-image-1467935697224.gif"
        width="300"/>\r
      artistLoopsK5_markdown_instruction: |
        <div style="color: #7665a0; font-size:
        1.6em; line-height: 1.4em;" >\r
        Now we need to fix the top of the castle.
        Can you loop the code three times?<br/><br/>\r
        </div>\r
        \r
        <img src="https://images.code.org/f418ccba20b7230baba1328143bd0092-image-1467935762464.gif"
        width="300"/>\r
      artistLoopsK6_markdown_instruction: |
        <div style="color: #7665a0; font-size:
        1.6em; line-height: 1.4em;" >\r
        Someone is stuck in the tower!  Fix the
        stairs to set them free.<br/><br/>\r
        </div>\r
        \r
        <img src="https://images.code.org/1efb95ca15f66b46145725769d3d279c-image-1467935856461.gif"
        width="300"/>\r
      artistLoopsK7_markdown_instruction: |
        <div style="color: #7665a0; font-size:
        1.6em; line-height: 1.4em;" >\r
        This tower is lovely, what is downstairs?
        Build another staircase to find out!<br/><br/>\r
        </div>\r
        \r
        <img src="https://images.code.org/af040c27be11c3a639e18c440c8a047c-image-1467936046481.gif"
        width="300"/>\r
      artistLoopsK8_markdown_instruction: |
        <div style="color: #7665a0; font-size:
        1.6em; line-height: 1.4em;" >\r
        Wow! There's a garden over there!  Help
        fix these stairs so I can get to it.<br/><br/>\r
        </div>\r
        \r
        <img src="https://images.code.org/bf368872da36217b0d19261fc6b84bf6-image-1467936147116.gif"
        width="300"/>\r
      artistLoopsK9_markdown_instruction: |
        <div style="color: #7665a0; font-size:
        1.6em; line-height: 1.4em;" >\r
        **Challenge:**  Lovely! Let's take a walk
        around the garden.<br/><br/>\r
        </div>\r
        \r
        <img src="https://images.code.org/cb5646ef57f68b47fa6c2762253a7044-image-1467936260174.gif"
        width="300"/>\r
      artistLoopsKA_markdown_instruction: |
        <div style="color: #7665a0; font-size:
        1.6em; line-height: 1.4em;" >\r
        These stones are in the wrong place.  Help
        me move them so I don't fall in!<br/><br/>\r
        </div>\r
        \r
        <img src="https://images.code.org/5ba9e8e5c1524eec2b0ba3e4684b0cef-image-1467936361364.gif"
        width="300"/>\r
      artistLoopsKB_markdown_instruction: |
        <div style="color: #7665a0; font-size:
        1.6em; line-height: 1.4em;" >\r
        Look!  It's a theater.  Help me set up
        the chairs so we can all see the stage.<br/><br/>\r
        </div>\r
        \r
        <img src="https://images.code.org/c4263306ebb0ad1d99fe6f200a790d0c-image-1467936424533.gif"
        width="300"/>\r
      artistLoopsKFP_markdown_instruction: |
        Picture time!  Use what you have learned
        to draw a picture of what you think the Artist saw on stage.\r
        \r
        <hr/>\r
        <h3>Ideas</h3>\r
        <table>\r
        <tr>\r
        <td>\r
        <img
        src="https://images.code.org/8f4f2a68dae2cf0aa82cc0a49ea4df04-image-1466787750475.gif"
        width="150"/><br/>\r
        <h4>A Singing Snail</h4><br/><br/>\r
        </td>\r
        \r
        <td>\r
        <img
        src="https://images.code.org/732ce5dd91c7f49f06e88da1a9f664f3-image-1466794904255.gif"
        width="150"/><br/>\r
        <h4>A Big City</h4><br/><br/>\r
        </td>\r
        \r
        <td>\r
        <img
        src="https://images.code.org/37fdd6fdd761df09fd4949d5e43f0a7f-image-1466795165642.gif"
        width="150"/><br/>\r
        <h4>A Concert</h4><br/><br/>\r
        </td>\r
        \r
        <td>\r
        <img
        src="https://images.code.org/f7bf86b0f86669d82ee2c1565738b9cb-image-1466794447737.gif"
        width="150"/><br/>\r
        <h4>A Birthday Cake</h4><br/><br/>\r
        </td>\r
        \r
        </tr>\r
        </table>\r
      beeDebugVideo1_markdown_instruction: Collect all of the nectar.
      collector example_markdown_instruction: |-
        Collect all the gold using the `collect`
        block:\r
        \r
        <xml>\r
          <block type="collector_collect"/></xml>
      collectorDebugVideo2_markdown_instruction: |-
        *"Sequence matters!"*\r
        \r
        The
        blocks you need are already in the workspace, but not connected.  \r
        \r
        Put
        these blocks in order to collect all of the gold and solve the puzzle.
      collectorSkinVideo1_markdown_instruction: |-
        Move Laurel to the treasure, then
        use `collect` to pick it up.\r
        \r
        Collect one pile of treasure to pass this
        level.
      collectorSkinVideo2_markdown_instruction: |-
        Move Laurel to the treasure, then
        use `collect` to pick it up.\r
        \r
        Collect one pile of treasure to pass this
        level.
      comment_intro_maze_2018_markdown_instruction: |-
        *"I'm confused. Help me remember
        how to solve this maze."* \r
        \r
        Use the new `comment` block to leave yourself
        quick reminders. They can help you remember what you were doing and why!\r
        \r
        Comments
        are only used for **you**. Your Play Area won't look different because of
        a comment.
      conditionals_forvideo_harvester_markdown_instruction: |-
        Collect all of the corn
        and lettuce, then pick the pumpkin.
      course1_artist_loops_challenge2_markdown_instruction: |-
        Let's play a game!
        Draw as many X's as you can! Can you get 3 in a row?
      course1_artist_loops_challenge3_markdown_instruction: |-
        **Tweet!**\r
        \r
        *"Can
        you help me make two bird houses?"*
      course1_artist_loops_challenge4_markdown_instruction: |-
        *"It's time to toss
        the dice! Can you help me draw these?"*
      course1_maze_debugging_challenge1_markdown_instruction: |-
        Debug this level.
        Remove the extra blocks, and add the missing blocks. Get the bird to the pig!
      course1_maze_debugging_challenge2_markdown_instruction: |-
        Debug this level.
        These are the right blocks, but they're in the wrong order!
      course1_maze_seq_challenge2_markdown_instruction: |-
        You can only move up to
        four times in each direction. Can you find a path before you run out of blocks?
      course1_playlab_events_challenge1_markdown_instruction: |-
        *"Where are my friends
        hiding? In this game, clicking on me will show my friend Olive the cat!"*\r
        \r
        Clicking
        Olive will make Robin appear! Can you write code to show the rest of the characters
        too?\r
        \r
        In this puzzle, make sure to click for hints! The hints will help
        you do this project step-by-step!\r
        \r
        ![](https://images.code.org/d42103835215d4b070f7f463b5e3073c-image-1494531456899.30.19
        PM.png)
      course1_playlab_events_challenge2_markdown_instruction: |-
        *"Let's have a party!
        Give my friends something to do when you click or tap them."*\r
        \r
        What
        will the animals say? What else will happen?\r
        \r
        \r
        \r
        In this puzzle,
        make sure to click for hints! The hints will give you fun things to try!\r
        \r
        ![](https://images.code.org/d42103835215d4b070f7f463b5e3073c-image-1494531456899.30.19
        PM.png)
      course2_artist_nestedLoops_challenge1_markdown_instruction: |-
        Can you figure
        out how to make a picture like this?\r
        \r
        - Both shapes have **50 pixel
        sides.**\r
        - The *octagons* are made with **45 degree** turns.\r
        - The *triangles*
        are made with **120 degree** turns.
      course2_artist_nestedLoops_challenge2_markdown_instruction: |-
        Can you figure
        out how to make a picture like this?\r
        \r
        - The first inner loop should
        make an octagon.\r
        - The second inner loop should make a hexagon.\r
        - The
        third inner loop should make a square.
      course2_artist_prog_challenge1_markdown_instruction: |-
        Draw rooms for each of
        the animals. There are many different ways to solve this puzzle, so have some
        fun!
      course2_artist_prog_challenge2_markdown_instruction: |-
        *Help me paint the yellow
        lines on this road!*
      course2_bee_conditionals_challenge1_markdown_instruction: |-
        Collect all of the
        nectar or make all the honey. You can only collect nectar from flowers and
        make honey from honeycombs. Check any space to see if there is a flower or
        honeycomb.
      course2_bee_conditionals_challenge2_markdown_instruction: |-
        Collect all of the
        nectar and make all the honey. You can collect all of the nectar in one flower
        by using the `while nectar > 0` loop.
      course2_collector_loops_challenge2_markdown_instruction: |-
        *"Let's hunt for
        treasure - using loops!"*\r
        \r
        Help the collector by debugging this code.
        Get all of the treasure!
      course2_collector_prog_challenge1_markdown_instruction: |-
        Look carefully! Can
        you collect all **10** pieces of treasure?
      course2_collector_prog_challenge2_markdown_instruction: |-
        There are **20** pieces
        of treasure in this cave. Collect at least half to finish the challenge!
      course2_harvester_loops_challenge1_markdown_instruction: |-
        Collect all of the
        corn.
      course2_harvester_loops_challenge2_markdown_instruction: |-
        Collect all of the
        lettuce. Avoid the trees and fields!
      course2_maze_programming_challenge1_markdown_instruction: |-
        *"The pig is hiding!
        Can you help me find a way around?"*
      course2_maze_programming_challenge2_markdown_instruction: |-
        Sometimes there
        is more than one way to solve the same problem. Sometimes it's faster to
        go backwards than it is to go forwards!
      course2_maze_seq_challenge2_markdown_instruction: |-
        You can only move up to
        four times in each direction. Can you find a path before you run out of blocks?
      course2_playlab_stage17_11_markdown_instruction: |
        Create your own story. When
        you're done, click Finish to let friends try your story on their phones.\r
        <br/>\r
        \r
        <h5>\r
        <details>\r
        <summary><b>Need
        some ideas?</b></summary>\r
        \t<br/>\r
        \t<h5>\r
        \t\t<ul>\r
                \t<li><strong>Who's
        there?</strong> - Make characters appear with random images, so no one knows
        who's showing up next.</li>\r
                    <li><strong>Going on an Adventure</strong>
        - Change the background, then have the characters talk about where they are
        now. </li>\r
                    <li><strong>Pinball</strong> - Make one character
        move using the arrow keys (use `when up arrow`, `when down arrow` blocks),
        then play random sounds when it collides with other characters on the screen.
        </li>\r
                </ul>\r
        \t</h5>\r
        </details>\r
        </h5>\r
      course3_artist_concept_challenge1_markdown_instruction: "<img src=\"https://images.code.org/6cac10470af71bbb5d75bf5e2669046f-image-1439939145211.png\"\nwidth=\"200px\"/>\\r\n\\r\nNow
        for a challenge!  \\r\n\\r\nHere is a design that\nuses only blocks that you
        have already been shown.  Can you figure out how\nto recreate it?  Feel free
        to use trial and error. You are not expected to\nget it perfect the first
        time.\\r\n\\r\nThe repeated shape is almost identical\nto the one from the
        last puzzle, except that the length used in the first\nloop is a little smaller. "
      course3_artist_functions_challenge1_markdown_instruction: |-
        Once you define
        a function, you can call it over and over again - whenever and wherever you
        want! Try this code to see how it works, then change it to make your own impressive
        design!
      course3_artist_functions_challenge2_markdown_instruction: |-
        Not only can you
        jump to some pre-set locations, like the corners of the canvas, you can also
        use a `jump to` command to get to absolutely any spot you like! Try this code
        to see how it works, then make the program your own!\r
        <xml>\r
          <block
        type="jump_to_xy">\r
            <title name="XPOS">???</title>\r
            <title
        name="YPOS">???</title>\r
            </block></xml>
      course3_bee_debugging_challenge1_markdown_instruction: |-
        Watch how the bee gets
        the nectar. Can you use the same kind of pattern to help the bee make all
        of the honey?
      course3_bee_functions_challenge1_markdown_instruction: |-
        You are on your own
        for this challenge.  This could "bee" harder than it looks!
      course3_bee_functions_challenge2_markdown_instruction: |-
        You are on your own
        for this challenge!
      course3_bee_functions_challenge3_markdown_instruction: |-
        Create a new function
        to collect all the nectar and honey while there is a path ahead. Use it to
        complete the puzzle!
      course3_bee_functions_challenge4_markdown_instruction: |-
        Use everything you
        have learned to complete this puzzle!
      course3_collector_debugging_challenge2_markdown_instruction: |-
        Are you an expert
        of nested loops? Use what you have learned so far to collect all of the treasure!
      course3_farmer_condLoops_challenge1_markdown_instruction: |-
        The pumpkins mark
        the place where you should turn. *Turn right at the pumpkins.* Otherwise keep
        going forward, but remember to collect all of the lettuce or corn along the
        way. \r
        \r
        **Each hidden crop has only one corn or lettuce.**
      course3_farmer_condLoops_challenge2_markdown_instruction: |-
        *"It's a vegetable
        maze!"* \r
        \r
        Turn right at pumpkins, turn left at the lettuce. Collect
        everything to complete the level.
      course3_farmer_until_challenge2_markdown_instruction: |-
        Use If/Else blocks to
        follow the curvy path. At each corner, use the `remove 1` command in a loop
        to clear the piles.
      course3_maze_debugging_challenge1_markdown_instruction: |-
        *"Am I just going
        around in circles?"*
      course3_maze_debugging_challenge2_markdown_instruction: |-
        *"If I turn too often,
        I might get dizzy! Help me reach the pig with only four `turn` commands."*
      course3_maze_until_challenge1_markdown_instruction: |-
        No hints, just challenge.
        Get the zombie to the sunflower.
      course3_playLab_challenge1_markdown_instruction: |-
        *The **squirrels** are terrified
        to see that a **dinosaur** has come to town! Can the brave **knight** keep
        them all from panicking?*\r
        \r
        Rules:\r
        1. *Touching the squirrels scores
        you points.*\r
        2. *Touching the dinosaur takes many points away.*\r
        \r
        Here
        is a different kind of game that has already been started for you! Play it
        to see how it works. \r
        \r
        \r
        Something should happen when you get enough
        points or when you run out of points. Add some code to the `win game` and
        `lose game` functions to make the game work the way it should. \r
        Click the
        hints for ideas!
      course3_playlab_challenge2_markdown_instruction: |-
        Can you figure out how this
        "Fortune Teller" app works? Try adding some of the following features to
        this game:\r
        \r
        * Change the "yes" and "no" answers to something more
        interesting.\r
        * Let the player ask another question after the actor says
        the fortune.\r
        * Give the witch two more things to say when she is in an
        `angry` or `normal` mood.\r
        * Give the wizard his own set of fortunes.\r
        *
        Make each actor change mood randomly.\r
        \r
        Check the hints if you need help
        with these challenges!
      course4_artist_binary_challenge1_markdown_instruction: |-
        You can only use each
        binary value (0 or 1) once each in this puzzle. Try using nested loops to
        complete this drawing.
      course4_artist_binary_challenge2_markdown_instruction: |-
        There are 256 bits
        represented on this grid - that means it's easy for a small change to cause
        big problems. Are you persistent enough to restore this logo back to normal?\r
        \r
        ![](https://images.code.org/74e15f513982b47762dd33ebbc21e5e9-image-1498776314610.png)
      course4_artist_concept_challenge2_markdown_instruction: |-
        Create five pinwheel
        designs using the code below.
      course4_artist_functions_challenge2_markdown_instruction: |-
        Not only can you
        jump to some pre-set locations, like the corners of the canvas, you can also
        use a `jump to` command to get to absolutely any spot you like! Try this code
        to see how it works, then make the program your own!\r
        <xml>\r
          <block
        type="jump_to_xy">\r
            <title name="XPOS">???</title>\r
            <title
        name="YPOS">???</title>\r
            </block></xml>
      course4_artist_fwp_challenge1_markdown_instruction: |-
        Try running this program,
        and make changes to see what happens. Can you figure out how it works? (Or
        delete it and replace it with something totally different)
      course4_artist_variables_challenge1_markdown_instruction: |-
        Can you create a
        `length` variable and use it to create this interesting pattern?
      course4_artist_variables_challenge2_markdown_instruction: |-
        <img src="https://images.code.org/7469d6b9aaaae532d864caecb65bd2cc-image-1444706295435.54.39.png"
        width="250px"/>\r
        \r
        You've now learned everything you need to know to
        make a pattern like this! This puzzle is meant to be difficult.  Can you stick
        with it until you figure out the solution?
      course4_bee_for_challenge1_markdown_instruction: |-
        Use this for loop to collect
        all of the nectar. There are a few actions that you will want to `repeat 'counter'
        times`.
      course4_bee_fwp_challenge1_markdown_instruction: |-
        Use one `for loop` in a function
        to collect all of the corn. The same `for loop` can count to different maximum
        values by using the `length` parameter.
      course4_bee_fwp_challenge2_markdown_instruction: |-
        Let's see if you can handle
        this one final test! Give it everything you've got!\r
        \r
        Use one `for loop`
        in a function to collect all of the vegetables in the row. Make the `for loop`
        count to different maximum values by using the `length` parameter. Make your
        program as short as possible by using a second `for loop` outside the function.\r
        \r
        Good
        luck!
      course4_collector_nested_loops_challenge2_markdown_instruction: |-
        *"Let's
        hunt for treasure - using loops!"* \r
        \r
        Help the collector reach at least
        two piles of treasure using only the blocks in your toolbox. It is possible
        to collect all 4.
      course4_harvester_nested_loops_challenge1_markdown_instruction: |-
        *"I need
        some help on the farm! Help me harvest this corn using only the blocks in
        your toolbox."*
      course4_playlab_variables_challenge1_markdown_instruction: |-
        Use these blocks
        to make the actors share a knock-knock joke. Change the punchline and setup
        to tell your own joke!
      course4_playlab_variables_challenge3_markdown_instruction: |-
        Can you figure
        out how this "Fortune Teller" app works? Try adding some of the following
        features to this game:\r
        \r
        * Change the "yes" and "no" answers to something
        more interesting.\r
        * Let the player ask another question after the actor
        says the fortune.\r
        * Give the witch two more things to say when she is in
        an `angry` or `normal` mood.\r
        * Give the wizard his own set of fortunes.\r
        *
        Make each actor change mood randomly.\r
        \r
        Check the hints if you need help
        with these challenges!
      courseA_artist_loops10_markdown_instruction: |-
        ## Time to head back to land.
        Help me put down stones so I don't fall in!\r
        \r
        ![expandable](https://images.code.org/d3213d375d0271e114aa4313cdeb34be-image-1498064942606.gif)
      courseA_artist_loops10_2018_markdown_instruction: |-
        ## Time to head back to
        land. Help me put down stones so I don't fall in!\r
        \r
        ![expandable](https://images.code.org/d3213d375d0271e114aa4313cdeb34be-image-1498064942606.gif)
      courseA_artist_loops11_markdown_instruction: |-
        ## Help me build steps to watch
        the ship sail away.\r
        \r
        ![expandable](https://images.code.org/ed19f00a2350b186fbe86ea805e17925-image-1498065450651.gif)
      courseA_artist_loops11_2018_markdown_instruction: |-
        ## Help me build steps to
        watch the ship sail away.\r
        \r
        ![expandable](https://images.code.org/ed19f00a2350b186fbe86ea805e17925-image-1498065450651.gif)
      courseA_artist_loops12_markdown_instruction: |-
        The artist saw something funny
        in the distance.  Draw what you think he saw.\r
        \r
        ___\r
        ### Ideas\r
        \r
        ![](https://images.code.org/b329e035f02cf0273987a530d4ff93b3-image-1497998147979.gif)\r
        ![](https://images.code.org/126edbb030b78586c620fea11bd9c867-image-1497998152966.gif)\r
        ![](https://images.code.org/a4fc9deba0ecdae5f434a828708d997b-image-1497998171788.gif)\r
        ![](https://images.code.org/55271714dcfc01bf49441cdf3bf17649-image-1497998176661.gif)
      courseA_artist_loops12_2018_markdown_instruction: |-
        The artist saw something
        funny in the distance.  Draw what you think he saw.\r
        \r
        ___\r
        ### Ideas\r
        \r
        ![](https://images.code.org/b329e035f02cf0273987a530d4ff93b3-image-1497998147979.gif)\r
        ![](https://images.code.org/126edbb030b78586c620fea11bd9c867-image-1497998152966.gif)\r
        ![](https://images.code.org/a4fc9deba0ecdae5f434a828708d997b-image-1497998171788.gif)\r
        ![](https://images.code.org/55271714dcfc01bf49441cdf3bf17649-image-1497998176661.gif)
      courseA_artist_loops2_markdown_instruction: |-
        Help the artist draw this line
        two times forward.\r
        \r
        ![](https://images.code.org/04501f26a36673460f5c8fe04e3e7686-image-1498002095108.gif)
      courseA_artist_loops2_2018_markdown_instruction: |-
        Help the artist draw this
        line two times forward.\r
        \r
        ![](https://images.code.org/04501f26a36673460f5c8fe04e3e7686-image-1498002095108.gif)
      courseA_artist_loops3_markdown_instruction: |-
        Our artist is trying to draw a
        line five times, but can't get it right. Can you help?\r
        \r
        ![expandable](https://images.code.org/6d79b5f8291bd8e11c427bff25f423c2-image-1467935497388.gif)
      courseA_artist_loops3_2018_markdown_instruction: |-
        Our artist is trying to draw
        a line five times, but can't get it right. Can you help?\r
        \r
        ![expandable](https://images.code.org/6d79b5f8291bd8e11c427bff25f423c2-image-1467935497388.gif)
      courseA_artist_loops4_markdown_instruction: |-
        Now, use a <xml><block type="controls_repeat_simplified_dropdown"><title
        name="TIMES" config="2-6">5</title></block></xml> loop to draw this line
        five times!\r
        \r
        ![](https://images.code.org/b2bc7f52ffdac2ad0d8e7c2d798c24df-image-1501875818062.gif)
      courseA_artist_loops4_2018_markdown_instruction: |-
        Now, use a <xml><block type="controls_repeat_simplified_dropdown"><title
        name="TIMES" config="2-6">5</title></block></xml> loop to draw this line
        five times!\r
        \r
        ![](https://images.code.org/b2bc7f52ffdac2ad0d8e7c2d798c24df-image-1501875818062.gif)
      courseA_artist_loops5_markdown_instruction: |-
        ## Draw a line seven steps long.
        This will become our horizon.\r
        \r
        ![expandable](https://images.code.org/dc7c4317177f2b94421c5aa589c31ac7-image-1498002771889.gif)
      courseA_artist_loops5_2018_markdown_instruction: |-
        ## Draw a line seven steps
        long. This will become our horizon.\r
        \r
        ![expandable](https://images.code.org/dc7c4317177f2b94421c5aa589c31ac7-image-1498002771889.gif)
      courseA_artist_loops6_markdown_instruction: |-
        ## Let's put a nice hill in the
        back.\r
        \r
        ![expandable](https://images.code.org/f64d93b6d9a7d9c3edfce3c227c0dd49-image-1498062074031.gif)
      courseA_artist_loops6_2018_markdown_instruction: |-
        ## Let's put a nice hill
        in the back.\r
        \r
        ![expandable](https://images.code.org/f64d93b6d9a7d9c3edfce3c227c0dd49-image-1498062074031.gif)
      courseA_artist_loops7_markdown_instruction: |-
        ## Use the <xml><block type="controls_repeat_simplified_dropdown"><title
        name="TIMES" config="3-10">???</title></block></xml> loop to add waves
        to the water.\r
        \r
        ![expandable](https://images.code.org/01c5f6772a8b608a2fca5f6de7e25c67-image-1498062629139.gif)
      courseA_artist_loops7_2018_markdown_instruction: |-
        ## Use the <xml><block type="controls_repeat_simplified_dropdown"><title
        name="TIMES" config="3-10">???</title></block></xml> loop to add waves
        to the water.\r
        \r
        ![expandable](https://images.code.org/01c5f6772a8b608a2fca5f6de7e25c67-image-1498062629139.gif)
      courseA_artist_loops7_forVideo_markdown_instruction: |-
        ## Use the <xml><block
        type="controls_repeat_simplified_dropdown"><title name="TIMES" config="3-10">???</title></block></xml>
        loop to add waves to the water.\r
        \r
        ![expandable](https://images.code.org/01c5f6772a8b608a2fca5f6de7e25c67-image-1498062629139.gif)
      courseA_artist_loops8_markdown_instruction: |-
        ## We need a ladder up to the
        boat.\r
        \r
        ![expandable](https://images.code.org/ee90228fae25ecca1fba589b721f9120-image-1498063066878.gif)
      courseA_artist_loops8_2018_markdown_instruction: |-
        ## We need a ladder up to
        the boat.\r
        \r
        ![expandable](https://images.code.org/ee90228fae25ecca1fba589b721f9120-image-1498063066878.gif)
      courseA_artist_loops9_markdown_instruction: |-
        ##**Challenge:** The stairs down
        to the dock are broken.  Help me fix them.\r
        \r
        ![expandable](https://images.code.org/9d36df1afb6a738ba7bcff8734403ff3-image-1498063282074.gif)
      courseA_artist_loops9_2018_markdown_instruction: |-
        ##**Challenge:** The stairs
        down to the dock are broken.  Help me fix them.\r
        \r
        ![expandable](https://images.code.org/9d36df1afb6a738ba7bcff8734403ff3-image-1498063282074.gif)
      courseA_artist_loops_challenge1_markdown_instruction: |-
        You can use a loop to
        draw many lines in a row.\r
        \r
        Can you draw a house? Make it look just the
        way you like it!  Try looking for patterns that repeat!\r
        \r
        Here are some
        ideas:\r
        \r
        ![](https://images.code.org/6e59e881e0aa1d31186e81a203655a0b-image-1501785654664.png)
      courseA_artist_loops_challenge1_2018_markdown_instruction: |-
        You can use a loop
        to draw many lines in a row.\r
        \r
        Can you draw a house? Make it look just
        the way you like it!  Try looking for patterns that repeat!\r
        \r
        Here are
        some ideas:\r
        \r
        ![](https://images.code.org/6e59e881e0aa1d31186e81a203655a0b-image-1501785654664.png)
      courseA_artist_loops_challenge2_markdown_instruction: |-
        **Tweet!**\r
        \r
        *"Can
        you help me make two bird houses?"*
      courseA_artist_loops_challenge2a_markdown_instruction: |-
        *"Help me get the
        camp site ready!"*\r
        \r
        Use the blocks in the toolbox to draw these three
        tents.
      courseA_artist_loops_challenge2a_2018_markdown_instruction: |-
        *"Help me get
        the camp site ready!"*\r
        \r
        Use the blocks in the toolbox to draw these
        three tents.
      courseA_bee_seq1_markdown_instruction: Help the bee get one nectar!
      courseA_bee_seq10_markdown_instruction: Try it by yourself! Get all the nectar.
      courseA_bee_seq11_markdown_instruction: |-
        You've been a busy bee! Get all the
        nectar.
      courseA_bee_seq12_markdown_instruction: Help the bee get one nectar!
      courseA_bee_seq13_markdown_instruction: |-
        *Buzz buzz!*\r
        \r
        Use <xml><block
        type="maze_moveWest"/></xml> **three** times to get the bee to the flower!
        Don't forget to use <xml><block type="maze_nectar"/></xml> to get nectar!
      courseA_bee_seq14_markdown_instruction: |-
        *Buzz buzz!*\r
        \r
        Use <xml><block
        type="maze_moveNorth"/></xml> **three** times to get the bee to the flower!
        Don't forget to get nectar at the end.
      courseA_bee_seq2_markdown_instruction: |-
        Add *one* block to help the bee get
        nectar from the flower.
      courseA_bee_seq3_markdown_instruction: |-
        Can you figure out what is wrong with
        this code? Help the bee get to the flower!
      courseA_bee_seq4_markdown_instruction: Try it yourself!
      courseA_bee_seq5_markdown_instruction: |-
        You have to move in two directions
        to get to the flower! Help the bee pick the right direction.
      courseA_bee_seq6_markdown_instruction: |-
        Now the bee needs to get nectar from
        two flowers!
      courseA_bee_seq7_markdown_instruction: Add two blocks to finish this puzzle!
      courseA_bee_seq8_markdown_instruction: |-
        This maze looks familiar... can you
        figure out what looks different?
      courseA_bee_seq9_markdown_instruction: |-
        This bee needs nectar! Do you see a
        pattern?
      courseA_collector_loops1_markdown_instruction: |-
        **Free Play:** This is Laurel
        the Adventurer! Move her around and get as much treasure as you can.\r
        \r
        Drag
        blocks into the workspace and try to figure out how to get treasure.  Get
        at least one item to pass this level.
      courseA_collector_loops12_markdown_instruction: |-
        *"Eureka!  Get as much treasure
        as you can!"*  \r
        (You do not have to get it all.)
      courseA_collector_loops12_2018_markdown_instruction: |-
        *"Eureka!  Get as much
        treasure as you can!"*  \r
        (You do not have to get it all.)
      courseA_collector_loops1_2018_markdown_instruction: |-
        **Free Play:** This is
        Laurel the Adventurer! Move her around and get as much treasure as you can.\r
        \r
        Drag
        blocks into the workspace and try to figure out how to get treasure.  Get
        at least one item to pass this level.
      courseA_collector_loops2_markdown_instruction: |-
        Get all three piles! Move Laurel
        to each piece of treasure, then use this block:\r
          <xml><block type="collector_collect"/></xml>
      courseA_collector_loops2_2018_markdown_instruction: |-
        Get all three piles! Move
        Laurel to each piece of treasure, then use this block:\r
          <xml><block type="collector_collect"/></xml>
      courseA_collector_loops3_markdown_instruction: |-
        How can Laurel get all five
        piles of treasure using only one <xml><block type="maze_moveEast"/></xml>
        block?
      courseA_collector_loops3_2018_markdown_instruction: |-
        How can Laurel get all
        five piles of treasure using only one <xml><block type="maze_moveEast"/></xml>
        block?
      courseA_collector_loops_challenge1_markdown_instruction: |-
        *"Can you help me
        spot some bugs? I know which way I want to go, but I'm not sure how many
        steps to take."*
      courseA_collector_loops_challenge1_2018_markdown_instruction: |-
        *"Can you help
        me spot some bugs? I know which way I want to go, but I'm not sure how many
        steps to take."*
      courseA_collector_preLoops1_markdown_instruction: |-
        This is Laurel the Adventurer!
        \r
        \r
        Press "Run" to see her walk up to the treasure and grab it.
      courseA_collector_preLoops2_markdown_instruction: |-
        Great!  Now you get to add
        code yourself!  \r
        \r
        Snap a ![](https://images.code.org/563c0deb5c51d43cdfa72d62dec3419d-image-1508904559201.05.30.png)
        block to the bottom of the program and click "Run"!
      courseA_collector_preLoops3_markdown_instruction: |-
        To grab the treasure, snap
        two ![](https://images.code.org/54c206b62a02f1d7ea8f1bee52664ecb-image-1508905670742.25.37.png)
        blocks and one ![](https://images.code.org/563c0deb5c51d43cdfa72d62dec3419d-image-1508904559201.05.30.png)
        block to the bottom of the program and click "Run"!
      courseA_collector_preLoops7_markdown_instruction: |-
        Get all three piles! Move
        Laurel to each piece of treasure, then use this block:\r
          <xml><block type="collector_collect"/></xml>
      courseA_forVideoTest_artist_markdown_instruction: |-
        Repeat loops work for Artist,
        too!
      courseA_harvester_forVideo_markdown_instruction: |-
        Can you pick all the corn
        using only **one** move block?
      courseA_harvester_loops1_markdown_instruction: |-
        Help the harvester pick all
        the corn!
      courseA_harvester_loops10_markdown_instruction: |-
        Help the harvester pick all
        five ears of corn!
      courseA_harvester_loops11_markdown_instruction: 'Try one more on your own!

'
      courseA_harvester_loops2_markdown_instruction: |-
        The harvester needs to pick
        all the corn! Do you see a pattern?
      courseA_harvester_loops3_markdown_instruction: |-
        Can you pick all the corn using
        only **one** move block?
      courseA_harvester_loops4_markdown_instruction: |-
        *"I need help to find what's
        wrong!"*\r
        \r
        Can you help the harvester find the bug in her code?
      courseA_harvester_loops5_markdown_instruction: |-
        Try it yourself! Can you pick
        the corn at the end too?
      courseA_harvester_loops5a_markdown_instruction: |-
        Look at all this corn? Can
        you pick it all by yourself?
      courseA_harvester_loops5b_markdown_instruction: |-
        Can you change your code to
        make the harvester pick all the corn?
      courseA_harvester_loops6_markdown_instruction: |-
        You will need **one** <xml><block
        type="maze_moveWest"></block></xml> block and **one** <xml><block type="maze_moveNorth"></block></xml>
        block to finish this puzzle!
      courseA_harvester_loops7_markdown_instruction: 'Try it on your own! '
      courseA_harvester_loops8_markdown_instruction: |-
        This is the same puzzle, but
        now you have to repeat **three** times instead of two! Use this block:\r
        \r
        <xml><block
        type="controls_repeat_simplified_dropdown">\r
            <title name="TIMES"
        config="2-10">3</title>\r
          </block></xml>
      courseA_harvester_loops9_markdown_instruction: |-
        Can you figure out how to pick
        *all* this corn?
      courseA_harvester_seq1_markdown_instruction: |-
        Help the harvester pick the piece
        of corn!
      courseA_harvester_seq10_markdown_instruction: |-
        The harvester needs to pick
        all the corn! Do you see a pattern?
      courseA_harvester_seq11_markdown_instruction: |-
        Try it by yourself! Pick all
        the corn.
      courseA_harvester_seq12_markdown_instruction: |-
        *Thank you for helping me!*
        \r
        \r
        Pick all the corn.
      courseA_harvester_seq13_markdown_instruction: |-
        Help the harvester pick **one**
        corn!
      courseA_harvester_seq2_markdown_instruction: "Use <xml><block type=\"maze_moveWest\"/></xml>\n**three**
        times to get the harvester to the corn! "
      courseA_harvester_seq3_markdown_instruction: |-
        Use <xml><block type="maze_moveNorth"/></xml>
        **three** times to get the harvester to the corn! Don't forget to pick the
        corn at the end.
      courseA_harvester_seq4_markdown_instruction: |-
        Add *one* block to help the harvester
        pick the corn.
      courseA_harvester_seq5_markdown_instruction: |-
        Can you figure out what is wrong
        with this code? Help the harvester pick the corn!
      courseA_harvester_seq6_markdown_instruction: Try it yourself!
      courseA_harvester_seq7_markdown_instruction: |-
        You have to move in two directions
        to get to the corn! Help the harvester pick the right direction.
      courseA_harvester_seq8_markdown_instruction: |-
        Now the harvester needs to pick
        corn two times!
      courseA_harvester_seq9_markdown_instruction: |-
        Add two blocks to finish this
        puzzle!
      courseA_maze_ramp2_2018_markdown_instruction: |-
        Attach both <xml><block type="maze_moveEast"/></xml>
        blocks to <xml><block type="when_run"/></xml> to finish your code, then
        click ![](https://images.code.org/727d03b75b490aa49ed2e23e1290fdd8-image-1522888269949.11.32.png).
      courseA_maze_ramp2a_2018_markdown_instruction: |-
        Attach both <xml><block type="maze_moveEast"/></xml>
        blocks to <xml><block type="when_run"/></xml> to finish your code, then
        click ![](https://images.code.org/727d03b75b490aa49ed2e23e1290fdd8-image-1522888269949.11.32.png).
      courseA_maze_ramp3_2018_markdown_instruction: |-
        *"This pig is ruffling my feathers."*\r
        \r
        There
        is one extra block that is going to cause the bird to crash.  \r
        Throw it
        away by removing it from the other blocks and dragging it back to the toolbox.
      courseA_maze_ramp3a_2018_markdown_instruction: |-
        Grab a <xml><block type="maze_moveNorth"/></xml>
        from the toolbox and add it to the bottom of the other blocks to finish this
        code, then click ![](https://images.code.org/727d03b75b490aa49ed2e23e1290fdd8-image-1522888269949.11.32.png).
      courseA_maze_ramp4_2018_markdown_instruction: |-
        *"Trace the path and lead me
        to the silly pig."* \r
        \r
        Avoid TNT or feathers will fly!
      courseA_maze_ramp4a_2018_markdown_instruction: |-
        Can you figure out which block
        you need to add to the bottom of the other blocks to finish this code?
      courseA_maze_ramp5_2018_markdown_instruction: |-
        *"Follow this path to get me
        to the pig!"*\r
        \r
        Avoid the TNT.
      courseA_maze_ramp5a_2018_markdown_instruction: Try this one all by yourself!
      courseA_maze_seq1_markdown_instruction: |-
        *"Play with these blocks and try
        to get me to the bad pig!"*
      courseA_maze_seq10_markdown_instruction: |-
        **Challenge:** Go around the TNT
        to get the bird to the pig!\r
        \r
        ![expandable](https://images.code.org/a656e421bc90e530a7e1ce636e507752-image-1497996976195.gif)
      courseA_maze_seq10_2018_markdown_instruction: |-
        **Challenge:** Avoid the TNT
        to get the bird to the pig!
      courseA_maze_seq11_markdown_instruction: |-
        Time for a shorter puzzle!  Move
        one way, then another to get the bird to the pig.\r
        \r
        ![expandable](https://images.code.org/bb4571384fc56702704a0c9395ee3695-image-1497996380902.gif)
      courseA_maze_seq11_2018_markdown_instruction: |
        Time for a shorter puzzle!  Move
        one way, then another to get the bird to the pig.\r
      courseA_maze_seq12_markdown_instruction: |-
        Get that pig!\r
        \r
        ![expandable](https://images.code.org/c6ae5024441e2305db82d06679e5a281-image-1497997160569.gif)
      courseA_maze_seq12_2018_markdown_instruction: |-
        Get that pig!\r
        \r
        ![expandable](https://images.code.org/c6ae5024441e2305db82d06679e5a281-image-1497997160569.gif)
      courseA_maze_seq1_2018_markdown_instruction: |-
        *"Play with these blocks and
        try to get me to the bad pig!"*
      courseA_maze_seq2_markdown_instruction: |-
        *"A bug! Fix the code to get me to
        the pig."*\r
        \r
        \r
        ![expandable](https://images.code.org/4af4959874b3ca1fdd3008dc4f77add4-image-1497994904322.gif)
      courseA_maze_seq2_2018_markdown_instruction: |-
        *"A bug! Fix the code to get
        me to the pig."*\r
        \r
        \r
        ![expandable](https://images.code.org/4af4959874b3ca1fdd3008dc4f77add4-image-1497994904322.gif)
      courseA_maze_seq3_markdown_instruction: |-
        *"Fix the code to get me to the pig!"*\r
        \r
        ![expandable](https://images.code.org/4adca88dc6df7378846a91d0fb0e59d1-image-1497995239069.gif)
      courseA_maze_seq3_2018_markdown_instruction: |-
        *"Fix the code to get me to
        the pig!"*\r
        \r
        ![expandable](https://images.code.org/4adca88dc6df7378846a91d0fb0e59d1-image-1497995239069.gif)
      courseA_maze_seq4_markdown_instruction: |-
        *"Something is not quite right."*
        \r
        \r
        REMOVE a block to get the bird to the pig!\r
        \r
        ![expandable](https://images.code.org/6af44fb0ba5ac5dd5502e2538f51fb9c-image-1497996162453.gif)
      courseA_maze_seq4_2018_markdown_instruction: |-
        *"Something is not quite right."*
        \r
        \r
        REMOVE a block to get the bird to the pig!\r
        \r
        ![expandable](https://images.code.org/6af44fb0ba5ac5dd5502e2538f51fb9c-image-1497996162453.gif)
      courseA_maze_seq5_markdown_instruction: |-
        Try this one yourself from the beginning.\r
        \r
        ![expandable](https://images.code.org/e4ef591b4580db478330c298d1af756f-image-1497997080163.gif)
      courseA_maze_seq5_2018_markdown_instruction: |-
        Try this one yourself from the
        beginning.\r
        \r
        ![expandable](https://images.code.org/e4ef591b4580db478330c298d1af756f-image-1497997080163.gif)
      courseA_maze_seq5a_2018_markdown_instruction: |-
        *"Here piggy, piggy!"*\r
        \r
        What
        can you add to the end of this code to get the bird to the pig?
      courseA_maze_seq6_markdown_instruction: |-
        Move one way, then another to get
        the bird to the pig!\r
        \r
        ![expandable](https://images.code.org/8f71c406afa60c6898937d950c670205-image-1497996506419.gif)
      courseA_maze_seq6_2018_markdown_instruction: |-
        Move one way, then another to
        get the bird to the pig!
      courseA_maze_seq7_markdown_instruction: |-
        Figure out what is missing and then
        add blocks to get the bird to the pig!\r
        \r
        ![expandable](https://images.code.org/35bdb628dabd4259b581286b071c02f3-image-1497996651260.gif)
      courseA_maze_seq7_2018_markdown_instruction: |-
        Figure out what is missing and
        then add blocks to get the bird to the pig!\r
        \r
        ![expandable](https://images.code.org/35bdb628dabd4259b581286b071c02f3-image-1497996651260.gif)
      courseA_maze_seq8_markdown_instruction: |-
        Solve this level and get the bird
        to the pig!\r
        \r
        ![expandable](https://images.code.org/fb4735244f74a4e001d1fa7b5c6028f9-image-1497998330218.gif)
      courseA_maze_seq8_2018_markdown_instruction: |-
        Solve this level and get the
        bird to the pig!
      courseA_maze_seq9_markdown_instruction: |-
        **Challenge:** Debug this level by
        adding blocks to get the bird to the pig!\r
        \r
        ![expandable](https://images.code.org/3f35068dd3cf51c420a536fa078f854d-image-1497996843105.gif)
      courseA_maze_seq9_2018_markdown_instruction: |-
        **Challenge:** Debug this level
        by adding blocks to get the bird to the pig!\r
        \r
        ![expandable](https://images.code.org/3f35068dd3cf51c420a536fa078f854d-image-1497996843105.gif)
      courseA_maze_seq_challenge1_markdown_instruction: |-
        Debug this level. Remove
        the extra blocks, and add the missing blocks. Get the bird to the pig!
      courseA_maze_seq_challenge1_2018_markdown_instruction: |-
        Debug this level. Remove
        the extra blocks, and add the missing blocks. Get the bird to the pig!
      courseA_playLab_events3_markdown_instruction: |-
        Help Jorge the Dog get moving
        by connecting the <xml><block type="studio_move">\r
            <title name="SPRITE">1</title>\r
            <title
        name="DIR">8</title>\r
          </block></xml> block to the <xml><block type="studio_whenArrow">\r
            <title
        name="VALUE">left</title>\r
          </block></xml> event block that is already
        in the workspace.\r
        \r
        Get Jorge to the flag to finish this level!
      courseA_playLab_events3_2018_markdown_instruction: |-
        Help Jorge the Dog get
        moving by connecting the <xml><block type="studio_move">\r
            <title name="SPRITE">1</title>\r
            <title
        name="DIR">8</title>\r
          </block></xml> block to the <xml><block type="studio_whenArrow">\r
            <title
        name="VALUE">left</title>\r
          </block></xml> event block that is already
        in the workspace.\r
        \r
        Get Jorge to the flag to finish this level!
      courseA_playLab_events4_markdown_instruction: |-
        Now, get Jorge to move right
        when the right arrow button is clicked.
      courseA_playLab_events4_2018_markdown_instruction: |-
        Now, get Jorge to move
        right when the right arrow button is clicked.
      courseA_playLab_events5_markdown_instruction: |-
        Add events to have Jorge move
        up and down when the up arrow and down arrow buttons are pressed.
      courseA_playLab_events5_2018_markdown_instruction: |-
        Add events to have Jorge
        move up and down when the up arrow and down arrow buttons are pressed.
      courseA_playlab_events_challenge1_markdown_instruction: |-
        Clicking Olive will
        make Robin appear! Can you write code to show the rest of the characters too?\r
        \r
        In
        this puzzle, make sure to click for hints! The hints will help you do this
        project step-by-step!\r
        \r
        ![](https://images.code.org/d42103835215d4b070f7f463b5e3073c-image-1494531456899.30.19
        PM.png)
      courseA_playlab_events_challenge1_2018_markdown_instruction: |-
        Clicking Olive
        will make Robin appear! Can you write code to show the rest of the characters
        too?\r
        \r
        In this puzzle, make sure to click for hints! The hints will help
        you do this project step-by-step!\r
        \r
        ![](https://images.code.org/d42103835215d4b070f7f463b5e3073c-image-1494531456899.30.19
        PM.png)
      courseA_playlab_events_challenge1a_markdown_instruction: |-
        Where are my friends
        hiding? In this game, clicking on me will show my friend Olive the cat! Clicking
        Olive will make Robin appear! Can you write code to show the rest of my friends
        too?\r
        \r
        \r
        In this puzzle, make sure to click for hints! The hints will
        help you do this project step-by-step!\r
        \r
        ![](https://images.code.org/d42103835215d4b070f7f463b5e3073c-image-1494531456899.30.19
        PM.png)
      courseA_playlab_events_challenge2_markdown_instruction: |-
        Give everyone something
        to do when you click on them. What will the animals say? What else will happen?\r
        \r
        In
        this puzzle, make sure to click for hints. The hints will give you fun things
        to try!\r
        \r
        ![](https://images.code.org/d42103835215d4b070f7f463b5e3073c-image-1494531456899.30.19
        PM.png)
      courseA_playlab_events_challenge2_2018_markdown_instruction: |-
        Give everyone
        something to do when you click on them. What will the animals say? What else
        will happen?\r
        \r
        In this puzzle, make sure to click for hints. The hints
        will give you fun things to try!\r
        \r
        ![](https://images.code.org/d42103835215d4b070f7f463b5e3073c-image-1494531456899.30.19
        PM.png)
      courseA_playlab_events_challengeClone_markdown_instruction: |-
        Where are my friends
        hiding? In this game, clicking on me will show my friend Olive the cat! Clicking
        Olive will make Robin appear! Can you write code to show the rest of my friends
        too?\r
        \r
        \r
        In this puzzle, make sure to click for hints! The hints will
        help you do this project step-by-step!\r
        \r
        ![](https://images.code.org/d42103835215d4b070f7f463b5e3073c-image-1494531456899.30.19
        PM.png)
      courseB_Scrat_ramp1_2018_markdown_instruction: |-
        To get Scrat to the acorn,
        snap the <xml><block type="maze_moveEast"/></xml> block to the bottom of
        the <xml><block type="when_run"/></xml> block, then press ![](https://images.code.org/473d3e1e4a05104502a99048338a45df-image-1522887336604.11.32.png)!
      courseB_Scrat_ramp2_2018_markdown_instruction: |-
        Snap both <xml><block type="maze_moveEast"/></xml>
        blocks to the bottom of the <xml><block type="when_run"/></xml> block to
        finish your code, then click ![](https://images.code.org/727d03b75b490aa49ed2e23e1290fdd8-image-1522888269949.11.32.png).
      courseB_Scrat_ramp3a_2018_markdown_instruction: |-
        Grab a <xml><block type="maze_moveNorth"/></xml>
        from the toolbox and add it to the bottom of the other blocks to finish this
        code, then click ![](https://images.code.org/727d03b75b490aa49ed2e23e1290fdd8-image-1522888269949.11.32.png).
      courseB_Scrat_ramp4a_2018_markdown_instruction: |-
        Can you figure out which block
        you need to add to the bottom of the other blocks to finish this code?
      courseB_Scrat_ramp5a_2018_markdown_instruction: Try this one all by yourself!
      courseB_artist_loops10_markdown_instruction: |-
        Use what you have learned to
        draw a picture of what you think the artist saw when he got home.\r
        \r
        ___\r
        ###
        Ideas\r
        \r
        ![](https://images.code.org/b329e035f02cf0273987a530d4ff93b3-image-1497998147979.gif)\r
        ![](https://images.code.org/126edbb030b78586c620fea11bd9c867-image-1497998152966.gif)\r
        ![](https://images.code.org/a4fc9deba0ecdae5f434a828708d997b-image-1497998171788.gif)\r
        ![](https://images.code.org/55271714dcfc01bf49441cdf3bf17649-image-1497998176661.gif)
      courseB_artist_loops10_2018_markdown_instruction: |-
        Use what you have learned
        to draw a picture of what you think the artist saw when he got home.\r
        \r
        ___\r
        ###
        Ideas\r
        \r
        ![](https://images.code.org/b329e035f02cf0273987a530d4ff93b3-image-1497998147979.gif)\r
        ![](https://images.code.org/126edbb030b78586c620fea11bd9c867-image-1497998152966.gif)\r
        ![](https://images.code.org/a4fc9deba0ecdae5f434a828708d997b-image-1497998171788.gif)\r
        ![](https://images.code.org/55271714dcfc01bf49441cdf3bf17649-image-1497998176661.gif)
      courseB_artist_loops6_markdown_instruction: |-
        Behind the bushes there is a beautiful
        vine full of flowers.  Can you climb the vine and see where it goes?
      courseB_artist_loops6_2018_markdown_instruction: |-
        Behind the bushes there is
        a beautiful vine full of flowers.  Can you climb the vine and see where it
        goes?
      courseB_artist_loops7_markdown_instruction: |-
        **Challenge:**  It's a hidden
        garden! Let's walk around.
      courseB_artist_loops7_2018_markdown_instruction: |-
        **Challenge:**  It's a hidden
        garden! Let's walk around.
      courseB_artist_loops_challenge1_markdown_instruction: |-
        *"It's time to toss
        the dice! Can you help me draw these?"*
      courseB_artist_loops_challenge1_2018_markdown_instruction: |-
        *"It's time to
        toss the dice! Can you help me draw these?"*
      courseB_artist_loops_challenge2_markdown_instruction: |-
        Draw as many X's as
        you can. Can you get 3 in a row?
      courseB_artist_loops_challenge2_2018_markdown_instruction: |-
        Draw as many X's
        as you can. Can you get 3 in a row?
      courseB_collector_loops1_markdown_instruction: |-
        **Free Play:** This is Laurel
        the Adventurer! Move her around and get as much treasure as you can.\r
        \r
        Drag
        blocks into the workspace and try to figure out how to get treasure.  Get
        at least one item to pass this level.
      courseB_collector_loops1_2018_markdown_instruction: |-
        **Free Play:** This is
        Laurel the Adventurer! Move her around and get as much treasure as you can.\r
        \r
        Drag
        blocks into the workspace and try to figure out how to get treasure.  Get
        at least one item to pass this level.
      courseB_collector_loops2_markdown_instruction: |-
        Move Laurel to the treasure,
        then use the<xml><block type="collector_collect"/></xml>block to pick it
        up.\r
        \r
        \r
        Get all four piles to pass this level.
      courseB_collector_loops2_2018_markdown_instruction: |-
        Move Laurel to the treasure,
        then use the<xml><block type="collector_collect"/></xml>block to pick it
        up.\r
        \r
        \r
        Get all four piles to pass this level.
      courseB_collector_loops3_markdown_instruction: |-
        How can Laurel get all five
        piles of treasure using only one <xml><block type="maze_moveEast"/></xml>
        block?
      courseB_collector_loops3_2018_markdown_instruction: |-
        How can Laurel get all
        five piles of treasure using only one <xml><block type="maze_moveEast"/></xml>
        block?
      courseB_collector_loops3_predict1_markdown_instruction: |-
        How can Laurel collect
        all five piles of gold using only one `E -->` block?
      courseB_collector_loops_challenge2a_markdown_instruction: |-
        *"Let's get the
        treasure!"*\r
        \r
        Help Laurel get at least **5** pieces of treasure to finish
        this puzzle.
      courseB_collector_loops_challenge2a_2018_markdown_instruction: |-
        *"Let's get
        the treasure!"*\r
        \r
        Help Laurel get at least **5** pieces of treasure
        to finish this puzzle.
      courseB_collector_prog3_markdown_instruction: |-
        How can Laurel collect all five
        piles of gold using only one `E -->` block?
      courseB_iceage_loops1_markdown_instruction: |-
        Help Scrat across the slippery
        ice to get to the acorn!
      courseB_iceage_loops10_markdown_instruction: |-
        Help Scrat get all the way over
        to the acorn!
      courseB_iceage_loops11_markdown_instruction: Help Scrat get to the acorn!
      courseB_iceage_loops12_markdown_instruction: |-
        Get to the acorn any way you
        can!
      courseB_iceage_loops2_markdown_instruction: |-
        Use both <xml><block type="maze_moveWest"/></xml>
        and <xml><block type="maze_moveSouth"/></xml> blocks to get to the acorn!
      courseB_iceage_loops3_markdown_instruction: |-
        Can you get to the acorn with
        just one <xml><block type="maze_moveWest"/></xml> block? Try using a loop!
      courseB_iceage_loops4_markdown_instruction: |-
        Add one more block to get Scrat
        all the way to the acorn!
      courseB_iceage_loops5_markdown_instruction: |-
        Can you add one more loop to get
        to the acorn?
      courseB_iceage_loops6_markdown_instruction: |-
        Can you add a loop to get to the
        acorn?
      courseB_iceage_loops7_markdown_instruction: 'Scrat really wants that acorn!

'
      courseB_iceage_loops8_markdown_instruction: 'Can you fix this code? '
      courseB_iceage_loops9_markdown_instruction: |-
        The acorn is so far away! Can
        you use loops to help Scrat get there?
      courseB_maze_seq3_markdown_instruction: '*"Fix the code to get me to the pig!"*'
      courseB_maze_seq3_2018_markdown_instruction: |-
        *"Fix the code to get me to
        the acorn!"*
      courseB_maze_seq9_markdown_instruction: |-
        **Challenge:** Move around the TNT
        to get the bird to the pig.
      courseB_maze_seq9_2018_markdown_instruction: |-
        **Challenge:** Move around the
        broken ice to get Scrat to the acorn.
      courseB_maze_seq9_challenge1_markdown_instruction: |-
        *Where's that pig hiding
        now?*
      courseB_maze_seqCold_markdown_instruction: |-
        **Challenge:** Debug this level
        by adding blocks to get the bird to the pig!
      courseB_maze_seq_challenge1_markdown_instruction: |-
        You only have four of each
        move block. Can you find a path before you run out of blocks?
      courseB_maze_seq_challenge1_2018_markdown_instruction: |-
        You only have four
        of each move block. Can you find a path before you run out of blocks?
      courseB_playLab_events1_markdown_instruction: |-
        This game is called "Play Lab".  \r
        \r
        See
        if you can figure out what each block does.
      courseB_playLab_events1_2018_markdown_instruction: |-
        This game is called "Play
        Lab".  \r
        \r
        See if you can figure out what each block does.
      courseB_playlab_events3_markdown_instruction: |-
        Use an event to make Daisy the
        Dragon switch to a random ![](https://images.code.org/c365e065614fea592612264f33624c09-image-1475698889081.17.53.png)
        mood when you click on her.
      courseB_playlab_events3_2018_markdown_instruction: |-
        Use an event to make Daisy
        the Dragon switch to a random ![](https://images.code.org/c365e065614fea592612264f33624c09-image-1475698889081.17.53.png)
        mood when you click on her.
      courseB_playlab_events4_markdown_instruction: |-
        Knight time!  \r
        \r
        Add an
        event so that the knight moves toward the dragon when the left arrow is clicked.
      courseB_playlab_events4_2018_markdown_instruction: |-
        Knight time!  \r
        \r
        Add
        an event so that the knight moves toward the dragon when the left arrow is
        clicked.
      courseB_playlab_events6_markdown_instruction: |-
        Help your knight get all of
        the flags!\r
        \r
        To do this, you'll need to add events to help the knight
        move up, down, left, and right.
      courseB_playlab_events6_2018_markdown_instruction: |-
        Help your knight get all
        of the flags!\r
        \r
        To do this, you'll need to add events to help the knight
        move up, down, left, and right.
      courseB_playlab_events7_markdown_instruction: |-
        Make this game fun by setting
        the knight to vanish when he runs into the dragon on his way to get the flags!
        \r
        \r
        Play a sound when they collide to make it feel more real.\r
        \r
        Visit
        all of the goals, then run into the dragon to pass the level.
      courseB_playlab_events7_2018_markdown_instruction: |-
        Make this game fun by setting
        the knight to vanish when he runs into the dragon on his way to get the flags!
        \r
        \r
        Play a sound when they collide to make it feel more real.\r
        \r
        Visit
        all of the goals, then run into the dragon to pass the level.
      courseB_playlab_events_challenge1_markdown_instruction: |-
        It's time for the
        Great Animal Race! Make the animals move down when you press `▼`. \r
        \r
        Who
        will run the fastest?
      courseB_playlab_events_challenge1_2018_markdown_instruction: |-
        It's time for
        the Great Animal Race! Make the animals move down when you press `▼`. \r
        \r
        Who
        will run the fastest?
      courseB_playlab_events_challenge2_markdown_instruction: |-
        Let's make the animals
        disappear when you click on them.\r
        Try playing with the dog now, then help
        the other animals join in the fun. You can also add sounds and score points
        to create a game of Animal Tag!\r
        \r
        ![](https://images.code.org/d48437a0b08be90110541e0ef21076e0-image-1497907722000.gif)
      courseB_playlab_events_challenge2_2018_markdown_instruction: |-
        Let's make the
        animals disappear when you click on them.\r
        Try playing with the dog now,
        then help the other animals join in the fun. You can also add sounds and score
        points to create a game of Animal Tag!\r
        \r
        ![](https://images.code.org/d48437a0b08be90110541e0ef21076e0-image-1497907722000.gif)
      courseB_starWars_prog1_markdown_instruction: |-
        ![Rey](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)_"Go
        get the scrap metal, BB-8!"_\r
        \r
        Watch out for walls and crates. Scrap
        metal looks like this: ![picture of scrap metal](https://images.code.org/5665566ab779d9b63d03cf8ba127a98f-image-1500570606896.gif)
      courseB_starWars_prog10_markdown_instruction: |-
        ![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)
        _"Can you get it all?"_
      courseB_starWars_prog10_2018_markdown_instruction: |-
        ![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)
        _"Can you get it all?"_
      courseB_starWars_prog11_markdown_instruction: |-
        ![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)
        _"Keep going!"_
      courseB_starWars_prog11_2018_markdown_instruction: |-
        ![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)
        _"Keep going!"_
      courseB_starWars_prog1_2018_markdown_instruction: |-
        ![Rey](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)_"Go
        get the scrap metal, BB-8!"_\r
        \r
        Watch out for walls and crates. Scrap
        metal looks like this: ![picture of scrap metal](https://images.code.org/5665566ab779d9b63d03cf8ba127a98f-image-1500570606896.gif)
      courseB_starWars_prog2_markdown_instruction: |-
        ![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)
        _"Get all the metal."_
      courseB_starWars_prog2_2018_markdown_instruction: |-
        ![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)
        _"Get all the metal."_
      courseB_starWars_prog3_markdown_instruction: |-
        ![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)
        _"Keep going, BB-8!"_
      courseB_starWars_prog3_2018_markdown_instruction: |-
        ![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)
        _"Keep going, BB-8!"_
      courseB_starWars_prog4_markdown_instruction: |-
        ![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)
        _"Get it, BB-8!"_
      courseB_starWars_prog4_2018_markdown_instruction: |-
        ![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)
        _"Get it, BB-8!"_
      courseB_starWars_prog5_markdown_instruction: |-
        ![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)
        _"Can you get it all?"_
      courseB_starWars_prog5_2018_markdown_instruction: |-
        ![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)
        _"Can you get it all?"_
      courseB_starWars_prog6_markdown_instruction: |-
        ![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)
        _"You can do it!"_
      courseB_starWars_prog6_2018_markdown_instruction: |-
        ![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)
        _"You can do it!"_
      courseB_starWars_prog7_markdown_instruction: |-
        ![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)
        _"Go get it!"_
      courseB_starWars_prog7_2018_markdown_instruction: |-
        ![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)
        _"Go get it!"_
      courseB_starWars_prog8_markdown_instruction: |-
        ![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)
        _"Keep it up, BB-8."_\r
        \r
        **Challenge**: Gather all the scrap metal.
      courseB_starWars_prog8_2018_markdown_instruction: |-
        ![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)
        _"Keep it up, BB-8."_\r
        \r
        **Challenge**: Gather all the scrap metal.
      courseB_starWars_prog9_markdown_instruction: |-
        ![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)
        _"You can do it!"_
      courseB_starWars_prog9_2018_markdown_instruction: |-
        ![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)
        _"You can do it!"_
      courseC_PlayLab_events7_markdown_instruction: |-
        The `repeat forever` block allows
        you to run code over and over forever.  Use this block to move Chomp the Dino
        (actor 2) up and down by 400 pixels forever.\r
        \r
        ![](https://images.code.org/0cbe6dd5f4e2251e3f121dbabc0cc19d-image-1523040103822.com-resize.gif)
      courseC_PlayLab_events7_2018_markdown_instruction: |-
        The `repeat forever` block
        allows you to run code over and over forever.  Use this block to move Chomp
        the Dino (actor 2) up and down by 400 pixels forever.\r
        \r
        ![](https://images.code.org/0cbe6dd5f4e2251e3f121dbabc0cc19d-image-1523040103822.com-resize.gif)
      courseC_PlayLab_events8_markdown_instruction: |-
        Can you have Waddles (actor
        1) say "Ouch!" and play a "hit" sound if he runs into Chomp? \r
        \r
        When
        you're done, play the game to make that happen.\r
        \r
        ![](https://images.code.org/a634f249021651f60a1acf37bf78d07d-image-1475342557950.gif)
      courseC_PlayLab_events8_2018_markdown_instruction: |-
        Can you have Waddles (actor
        1) say "Ouch!" and play a "hit" sound if he runs into Chomp? \r
        \r
        When
        you're done, play the game to make that happen.\r
        \r
        ![](https://images.code.org/a634f249021651f60a1acf37bf78d07d-image-1475342557950.gif)
      courseC_PlayLab_events_challenge1_markdown_instruction: |-
        Use a new block to
        make Waddles automatically move back to the start when he runs into the Dinosaur
        and when he scores a point. This will make your game more challenging and
        fun!\r
        \r
        Play the game and move Waddles with the arrows until you score
        enough points. Waddles must be moved to the `middle left` position of the
        screen to complete this challenge.
      courseC_PlayLab_events_challenge1_2018_markdown_instruction: |-
        Use a new block
        to make Waddles automatically move back to the start when he runs into the
        Dinosaur and when he scores a point. This will make your game more challenging
        and fun!\r
        \r
        Play the game and move Waddles with the arrows until you score
        enough points. Waddles must be moved to the `middle left` position of the
        screen to complete this challenge.
      courseC_artist_loop1_markdown_instruction: |-
        Fantastic!  \r
        \r
        Let's add
        some style by changing the brush using the `set pattern` block before our
        loop starts.
      courseC_artist_loop1_2018_markdown_instruction: |-
        Fantastic!  \r
        \r
        Let's
        add some style by changing the brush using the `set pattern` block before
        our loop starts.
      courseC_artist_loops1a_markdown_instruction: |-
        **Free Play:** Let's build something
        bigger, one step at a time!  You can make anything you want, but we're going
        to show you how to make something like this!\r
        \r
        ![expandable](https://images.code.org/5b67ed8d878d6c2a5009eee054427fd5-image-1496711253365.05.35.png)\r
        \r
        Use
        the `jump to 200 over 200 down` to get the artist to the center of the play
        area, then use the `draw a sticker` block to make a bird appear.  \r
        \r
        ---\r
        \r
        Press
        "Finish" when you are happy with what you've made.
      courseC_artist_loops1a_2018_markdown_instruction: |-
        **Free Play:** Let's build
        something bigger, one step at a time!  \r
        \r
        Use the `jump to 200 over 200
        down` to get the artist to the center of the play area, then use the `draw
        a sticker` block to make a bird appear.  \r
        \r
        ---\r
        \r
        Press "Finish"
        when you are happy with what you've made.
      courseC_artist_loops2_markdown_instruction: |-
        Now that the zombie knows his
        way, help him dig **25 pixel long** holes along the path to plant more flowers!\r
        -
        Each hole should be 25 pixels long\r
        - Each hole has 25 pixels of space before
        the next hole
      courseC_artist_loops2a_markdown_instruction: |-
        Now, use a loop to spin your
        bird around 12 times with a 30 degree turn.
      courseC_artist_loops2a_2018_markdown_instruction: |-
        Now, use a loop to spin
        your bird around 12 times with a 30 degree turn.
      courseC_artist_loops3a_markdown_instruction: |-
        So much fun!  \r
        \r
        Now, add
        a bat sticker right after the bird to make an image like the one below.\r
        ___\r
        \r
        ![expandable](https://images.code.org/3aa37f679eabc7a5a337291db614dd98-image-1496711069351.03.49.png)
      courseC_artist_loops3a_2018_markdown_instruction: |-
        So much fun!  \r
        \r
        Now,
        add a bat sticker right after the bird to make an image like the one below.\r
        ___\r
        \r
        ![expandable](https://images.code.org/3aa37f679eabc7a5a337291db614dd98-image-1496711069351.03.49.png)
      courseC_artist_loops4a_markdown_instruction: |-
        Add a block to your code so that
        the artist jumps forward by 75 pixels between stamping the bird and the bat.
        In this puzzle, make sure you have `jump to 200 over 200 down` inside of your
        loop, so you stay in the center!\r
        ___\r
        \r
        ![expandable](https://images.code.org/5b67ed8d878d6c2a5009eee054427fd5-image-1496711253365.05.35.png)
      courseC_artist_loops4a_2018_markdown_instruction: |-
        Edit your code so that you
        jump forward by 75 pixels between stamping the bird and the bat. In this puzzle,
        make sure you have `jump to 200 over 200 down` inside of your loop, so you
        stay in the center!\r
        ___\r
        \r
        ![expandable](https://images.code.org/5b67ed8d878d6c2a5009eee054427fd5-image-1496711253365.05.35.png)
      courseC_artist_loops5_markdown_instruction: |
        Great!  Now it's time to make
        a fence inside to keep the animals out.   \r
        Make any kind of fence that
        you want!\r
        \r
      courseC_artist_loops5a_markdown_instruction: |-
        What happens when you replace
        one or both of the stickers with a different creature?\r
        ___\r
        ![expandable](https://images.code.org/cadb5e244db64a781bc02b55f2e7ccca-image-1496711397989.08.28.png)
      courseC_artist_loops5a_2018_markdown_instruction: |-
        What happens when you replace
        one or both of the stickers with a different creature?\r
        ___\r
        ![expandable](https://images.code.org/cadb5e244db64a781bc02b55f2e7ccca-image-1496711397989.08.28.png)
      courseC_artist_loops5b_markdown_instruction: |-
        What happens when you `move forward`
        then `move backward` by 100, 200, or 400 pixels somewhere inside the loop?  \r
        -
        Try using the `set pattern` block before you start your loop to make a work
        of art!\r
        ___\r
        ![expandable](https://images.code.org/d523de02389fd23db3029327c03b727d-image-1497039953252.24.18.png)
      courseC_artist_loops5b_2018_markdown_instruction: |-
        What happens when you `move
        forward` then `move backward` by 100, 200, or 400 pixels somewhere inside
        the loop?  \r
        - Try using the `set pattern` block before you start your loop
        to make a work of art!\r
        ___\r
        ![expandable](https://images.code.org/d523de02389fd23db3029327c03b727d-image-1497039953252.24.18.png)
      courseC_artist_loops6_markdown_instruction: |
        What should the zombie put inside
        of the garden?  \r
        \r
        Draw anything you'd like inside of the fence.  Would
        you like some flowers or a few bugs? \r
        *(See hints for more suggestions.)*\r
        \r
        \r
      courseC_artist_loops6a_markdown_instruction: |-
        Add a third sticker anywhere
        in the loop that you want! What does it look like now?\r
        - Change the pattern
        on your brush for more variety!\r
        \r
        ___\r
        \r
        ![expandable](https://images.code.org/b0f999ef4b9ab6bd9780e9fbac07dc8d-image-1497040845047.39.55.png)
      courseC_artist_loops6a_2018_markdown_instruction: |-
        Add a third sticker anywhere
        in the loop that you want! What does it look like now?\r
        - Change the pattern
        on your brush for more variety!\r
        \r
        ___\r
        \r
        ![expandable](https://images.code.org/b0f999ef4b9ab6bd9780e9fbac07dc8d-image-1497040845047.39.55.png)
      courseC_artist_loops7a_markdown_instruction: |-
        Try changing the `repeat` loop
        to run a different number of times.  How far do you have to turn to go around
        in a full circle?\r
        - Try changing how many times you spin\r
          - Try a 60
        degree turn for 6 times around\r
          - Try a 20 degree turn for 18 times around\r
        ___\r
        This
        image uses a pirate, a ninja, and a giraffe. They loop 18 times with a 20
        degree turn.\r
        \r
        ![expandable](https://images.code.org/99411638acb44e8a7ba5b9696fe11fa4-image-1496714175039.53.24.png)
      courseC_artist_loops7a_2018_markdown_instruction: |-
        Try changing the `repeat`
        loop to run a different number of times.  How far do you have to turn to go
        around in a full circle?\r
        - Try changing how many times you spin\r
          -
        Try a 60 degree turn for 6 times around\r
          - Try a 20 degree turn for 18
        times around\r
        ___\r
        This image uses a pirate, a ninja, and a giraffe. They
        loop 18 times with a 20 degree turn.\r
        \r
        ![expandable](https://images.code.org/99411638acb44e8a7ba5b9696fe11fa4-image-1496714175039.53.24.png)
      courseC_artist_loops8a_markdown_instruction: |-
        Now make something on your own.  What
        happens when you make two separate circles of different stickers?\r
        ___\r
        Need
        an idea? Try making a design like this one.\r
        \r
        ![expandable](https://images.code.org/d8e0ad6294aa5e04e4aab56631a6b50b-image-1496714582863.02.14.png)
      courseC_artist_loops8a_2018_markdown_instruction: |-
        Now make something on your
        own.  What happens when you make two separate circles of different stickers?\r
        ___\r
        Need
        an idea? Try making a design like this one.\r
        \r
        ![expandable](https://images.code.org/d8e0ad6294aa5e04e4aab56631a6b50b-image-1496714582863.02.14.png)
      courseC_artist_loopsPre1a_markdown_instruction: |-
        Now, put this code into  a
        `repeat` block and loop it **6** times.\r
        - Notice that we have added a 60
        degree turn at the end of the looped code to get a full rotation.
      courseC_artist_loopsPre1a_2018_markdown_instruction: |-
        Now, put this code into  a
        `repeat` block and loop it **6** times.\r
        - Notice that we have added a 60
        degree turn at the end of the looped code to get a full rotation.
      courseC_artist_loopsPrePre1a_markdown_instruction: |-
        Use the <xml><block type="jump_to_xy"
        id="callMe"><title name="XPOS">200</title><title name="YPOS">200</title></block></xml>
        block to get the artist to the center of the play area.  \r
        Then draw a line
        50 pixels long with the <xml><block type="draw_move_by_constant"><title
        name="DIR">moveForward</title><title name="VALUE">50</title></block></xml>
        block.
      courseC_artist_loopsPrePre1a_2018_markdown_instruction: |-
        Use the <xml><block
        type="jump_to_xy" id="callMe"><title name="XPOS">200</title><title name="YPOS">200</title></block></xml>
        block to get the artist to the center of the play area.  \r
        Then draw a line
        50 pixels long with the <xml><block type="draw_move_by_constant"><title
        name="DIR">moveForward</title><title name="VALUE">50</title></block></xml>
        block.
      courseC_artist_loopsTemplateA_markdown_instruction: "Use the `jump to 200 over\n200
        down` to get the artist to the center of the play area, then use the `draw\na
        sticker` block to make a bird appear. "
      courseC_artist_loopsTemplateA_2018_markdown_instruction: "Use the `jump to\n200
        over 200 down` to get the artist to the center of the play area, then\nuse
        the `draw a sticker` block to make a bird appear. "
      courseC_artist_prog1_markdown_instruction: |-
        *"Hi, I'm an artist. You can
        write code to make me draw almost anything."*\r
        \r
        Play with the blocks
        in the toolbox to see what they do!
      courseC_artist_prog1_2018_markdown_instruction: |-
        *"Hi, I'm an artist. You
        can write code to make me draw almost anything."*\r
        \r
        Play with the blocks
        in the toolbox to see what they do!
      courseC_artist_prog2_markdown_instruction: |-
        *"Let's make a cage for my pet
        monster!"*\r
        \r
        Drag blocks onto the screen to have the artist draw over
        the grey lines in the picture.  \r
        (Each line is 100 pixels long)
      courseC_artist_prog2_2018_markdown_instruction: |-
        *"Let's make a cage for
        my pet monster!"*\r
        \r
        Drag blocks onto the screen to have the artist draw
        over the grey lines in the picture.  \r
        (Each line is 100 pixels long)
      courseC_artist_prog3_markdown_instruction: |-
        *"This spaceship needs a window!"*\r
        \r
        Each
        side of the inner square is 100 pixels and all of the angles are 90 degrees.
      courseC_artist_prog3_2018_markdown_instruction: |-
        *"This spaceship needs a
        window!"*\r
        \r
        Each side of the inner square is 100 pixels and all of the
        angles are 90 degrees.
      courseC_artist_prog4_markdown_instruction: |-
        *"Oh no!  Starla's pet alien
        just flew away! Let's help the spacewoman!"*\r
        \r
        Finish Starla's rocket
        so she can chase her pet.  \r
        (Each side of the triangle is 100 pixels long
        and has 120 degree outer angles.)
      courseC_artist_prog4_2018_markdown_instruction: |-
        *"Oh no!  Starla's pet alien
        just flew away! Let's help the spacewoman!"*\r
        \r
        Finish Starla's rocket
        so she can chase her pet.  \r
        (Each side of the triangle is 100 pixels long
        and has 120 degree outer angles.)
      courseC_artist_prog5_markdown_instruction: |-
        *"Maybe we should make a tag for
        each of our pets in case they get lost!"*\r
        \r
        Finish this tag by drawing
        a rectangle around the outside.  \r
        (The long sides are 200 pixels each and
        the short sides are each 100 pixels)
      courseC_artist_prog5_2018_markdown_instruction: |-
        *"Maybe we should make a
        tag for each of our pets in case they get lost!"*\r
        \r
        Finish this tag
        by drawing a rectangle around the outside.  \r
        (The long sides are 200 pixels
        each and the short sides are each 100 pixels)
      courseC_artist_prog6_markdown_instruction: |-
        *"Now a tag for Belle!"*\r
        \r
        Draw
        this diamond with 200 pixel sides.
      courseC_artist_prog6_2018_markdown_instruction: |-
        *"Now a tag for Belle!"*\r
        \r
        Draw
        this diamond with 200 pixel sides.
      courseC_artist_prog7_markdown_instruction: |-
        **Challenge:** This tag is a special
        one!  \r
        \r
        Can you figure out how to draw the outline?  \r
        (The long side
        is 150 pixels and each of the short sides are 75 pixels.)
      courseC_artist_prog7_2018_markdown_instruction: |-
        **Challenge:** This tag is
        a special one!  \r
        \r
        Can you figure out how to draw the outline?  \r
        (The
        long side is 150 pixels and each of the short sides are 75 pixels.)
      courseC_artist_prog8_markdown_instruction: |-
        One more tag.  This is a triangle
        for Pi.  \r
        (Each side is 150 pixels)
      courseC_artist_prog8_2018_markdown_instruction: |-
        One more tag.  This is a triangle
        for Pi.  \r
        (Each side is 150 pixels)
      courseC_artist_prog_challenge1-doghouse_markdown_instruction: |-
        Let's build
        a dog house for Jorge!
      courseC_artist_prog_challenge1_markdown_instruction: |-
        Draw rooms for each of
        the animals. There are many different ways to solve this puzzle, so have some
        fun! Each square has a side length of 100 pixels.
      courseC_artist_prog_challenge1_2018_markdown_instruction: |-
        Draw rooms for each
        of the animals. There are many different ways to solve this puzzle, so have
        some fun! Each square has a side length of 100 pixels.
      courseC_artist_prog_challenge2_markdown_instruction: |-
        *Help me paint the yellow
        lines on this road!*
      courseC_artist_prog_challenge2a_markdown_instruction: |-
        *"Help me paint the
        yellow lines on this road!"*\r
        \r
        The three line segments have lengths
        of 150, 100, and 200 pixels!
      courseC_artist_prog_challenge2a_2018_markdown_instruction: |-
        *"Help me paint
        the yellow lines on this road!"*\r
        \r
        The three line segments have lengths
        of 150, 100, and 200 pixels!
      courseC_collector_loops_challenge2_markdown_instruction: |-
        *"Let's hunt for
        treasure!"*\r
        \r
        Help the collector get at least **5** pieces of treasure.
      courseC_collector_loops_challenge2_2018_markdown_instruction: |-
        *"Let's hunt
        for treasure!"*\r
        \r
        Help the collector get at least **5** pieces of treasure.
      courseC_collector_prog1_markdown_instruction: |-
        **Free Play:** This is Laurel
        the Adventurer! Move her around and get as much treasure as you can. Use the
        `collect` block to pick up the treasure!\r
        \r
        Drag blocks into the workspace
        and try to figure out how to get treasure.  Get at least one item to pass
        this level.
      courseC_collector_prog1_2018_markdown_instruction: |-
        **Free Play:** This is
        Laurel the Adventurer! Move her around and get as much treasure as you can.
        Use the `collect` block to pick up the treasure!\r
        \r
        Drag blocks into the
        workspace and try to figure out how to get treasure.  Get at least one item
        to pass this level.
      courseC_collector_prog2_markdown_instruction: |-
        Move Laurel to the treasure,
        then use <xml><block type="collector_collect"/></xml> to pick it up.
      courseC_collector_prog2_2018_markdown_instruction: |-
        Move Laurel to the treasure,
        then use <xml><block type="collector_collect"/></xml> to pick it up.
      courseC_collector_prog3_markdown_instruction: |-
        *"Sequence matters!"* \r
        \r
        The
        blocks you need are already in the workspace, but not connected.  \r
        Order
        these blocks to collect the treasure and solve the puzzle.
      courseC_collector_prog3_2018_markdown_instruction: |-
        *"Sequence matters!"*
        \r
        \r
        The blocks you need are already in the workspace, but not connected.  \r
        Order
        these blocks to collect the treasure and solve the puzzle.
      courseC_collector_prog4_markdown_instruction: |-
        *"Sequence matters!"*\r
        \r
        The
        blocks you need are already in the workspace, but not connected.  \r
        \r
        Put
        these blocks in order to collect all of the treasure and solve the puzzle.
      courseC_collector_prog4_2018_markdown_instruction: |-
        *"Sequence matters!"*\r
        \r
        The
        blocks you need are already in the workspace, but not connected.  \r
        \r
        Put
        these blocks in order to collect all of the treasure and solve the puzzle.
      courseC_collector_prog5_markdown_instruction: |-
        *"Help me collect each bit
        of treasure!"*\r
        \r
        These blocks are in the wrong order. Can you fix them?
      courseC_collector_prog5_2018_markdown_instruction: |-
        *"Help me collect each
        bit of treasure!"*\r
        \r
        These blocks are in the wrong order. Can you fix
        them?
      courseC_collector_prog6_markdown_instruction: |-
        *"Help me collect all of the
        treasure!"*\r
        \r
        These blocks are in the wrong order. Reorder them to collect
        all of the treasure.
      courseC_collector_prog6_2018_markdown_instruction: |-
        *"Help me collect all
        of the treasure!"*\r
        \r
        These blocks are in the wrong order. Reorder them
        to collect all of the treasure.
      courseC_collector_prog7_markdown_instruction: |-
        **Challenge:** *"What is going
        on here?"*\r
        \r
        Even if we put these in the right order, there will still
        be some missing.  \r
        Use blocks from the toolbox to collect all of the treasure.
      courseC_collector_prog7_2018_markdown_instruction: |-
        **Challenge:** *"What
        is going on here?"*\r
        \r
        Even if we put these in the right order, there
        will still be some missing.  \r
        Use blocks from the toolbox to collect all
        of the treasure.
      courseC_collector_prog8_markdown_instruction: |-
        *"Keep up the good work! Help
        me collect all of the treasure."*
      courseC_collector_prog8_2018_markdown_instruction: |-
        *"Keep up the good work!
        Help me collect all of the treasure."*
      courseC_collector_prog9_markdown_instruction: '*"Let''s get all of the treasure!"*'
      courseC_collector_prog9_2018_markdown_instruction: |-
        *"Let's get all of the
        treasure!"*
      courseC_collector_progA_markdown_instruction: |-
        Help Laurel collect all of the
        treasure.
      courseC_collector_progB_markdown_instruction: |-
        You're almost done!  \r
        \r
        Collect
        as many coins as you can to finish the stage!
      courseC_collector_prog_challenge2_markdown_instruction: |-
        There are 20 pieces
        of treasure in this cave. Collect at least **10** to finish the challenge!
      courseC_collector_prog_challenge2_2018_markdown_instruction: |-
        There are 20
        pieces of treasure in this cave. Collect at least **10** to finish the challenge!
      courseC_flappy_events1_markdown_instruction: |-
        Attach the `flap a normal amount`
        block to the `when click` event, then press "Run".   \r
        \r
        ---\r
        \r
        Click
        or tap on the play space to move Flappy to the target.
      courseC_flappy_events10_markdown_instruction: |-
        Create your own Flappy game!
        \r
        \r
        You can change the visuals and the rules...even the gravity! \r
        When
        you're done, click "Finish" to share with friends on their phones.
      courseC_flappy_events10_2018_markdown_instruction: |-
        Create your own Flappy
        game! \r
        \r
        You can change the visuals and the rules...even the gravity!
        \r
        When you're done, click "Finish" to share with friends on their phones.
      courseC_flappy_events1_2018_markdown_instruction: |-
        Attach the `flap a normal
        amount` block to the `when click` event, then press "Run".   \r
        \r
        ---\r
        \r
        Click
        or tap on the play space to move Flappy to the target.
      courseC_flappy_events2_markdown_instruction: |-
        The `when run` event allows you
        to run code as soon as your game starts.  \r
        \r
        Try adding a block that
        sets the level speed when the "Run" button is pressed. \r
        \r
        ---\r
        \r
        Play
        the game and flap to the target to continue.
      courseC_flappy_events2_2018_markdown_instruction: |-
        The `when run` event allows
        you to run code as soon as your game starts.  \r
        \r
        Try adding a block that
        sets the level speed when the "Run" button is pressed. \r
        \r
        ---\r
        \r
        Play
        the game and flap to the target to continue.
      courseC_flappy_events3_markdown_instruction: |-
        Now we've added the ground.
        \r
        \r
        Attach the `end game` block to the `when hit the ground` event. \r
        \r
        ---\r
        \r
        Play
        the game and crash the bird into the ground to continue.
      courseC_flappy_events3_2018_markdown_instruction: |-
        Now we've added the ground.
        \r
        \r
        Attach the `end game` block to the `when hit the ground` event. \r
        \r
        ---\r
        \r
        Play
        the game and crash the bird into the ground to continue.
      courseC_flappy_events4_markdown_instruction: |-
        Flappy will fly right through
        obstacles unless you write code to make him crash. \r
        \r
        Attach a block
        to the `when hit an obstacle` event so that the game ends when Flappy crashes
        into the first set of pipes.
      courseC_flappy_events4_2018_markdown_instruction: |-
        Flappy will fly right through
        obstacles unless you write code to make him crash. \r
        \r
        Attach a block
        to the `when hit an obstacle` event so that the game ends when Flappy crashes
        into the first set of pipes.
      courseC_flappy_events5_markdown_instruction: |-
        We've added a scoreboard to
        count points when Flappy passes obstacles.  \r
        \r
        Add a block to the `when
        pass an obstacle` event that scores a point, then press "Run" to fly Flappy
        through the first set of pipes.
      courseC_flappy_events5_2018_markdown_instruction: |-
        We've added a scoreboard
        to count points when Flappy passes obstacles.  \r
        \r
        Add a block to the
        `when pass an obstacle` event that scores a point, then press "Run" to fly
        Flappy through the first set of pipes.
      courseC_flappy_events6_markdown_instruction: |-
        Click the down arrow inside of
        the `flap a normal amount` block to pick a different flapping power.  \r
        \r
        See
        if you can still score a point after making Flappy flap either a smaller or
        larger amount each time you click.
      courseC_flappy_events6_2018_markdown_instruction: |-
        Click the down arrow inside
        of the `flap a normal amount` block to pick a different flapping power.  \r
        \r
        See
        if you can still score a point after making Flappy flap either a smaller or
        larger amount each time you click.
      courseC_flappy_events7_markdown_instruction: |-
        Next, try changing the scene
        by attaching a block to the `when run` event.
      courseC_flappy_events7_2018_markdown_instruction: |-
        Next, try changing the scene
        by attaching a block to the `when run` event.
      courseC_flappy_events8_markdown_instruction: |-
        You can set the background under
        any event, not just when the game starts. \r
        \r
        Try setting a **random**
        scene when other events happen...for example, when passing an obstacle.
      courseC_flappy_events8_2018_markdown_instruction: |-
        You can set the background
        under any event, not just when the game starts. \r
        \r
        Try setting a **random**
        scene when other events happen...for example, when passing an obstacle.
      courseC_flappy_events9_markdown_instruction: |-
        To mix things up, instead of
        ending the game when Flappy hits an obstacle, try setting the score back to
        0.
      courseC_flappy_events9_2018_markdown_instruction: |-
        To mix things up, instead
        of ending the game when Flappy hits an obstacle, try setting the score back
        to 0.
      courseC_harvester_loops1_markdown_instruction: |-
        Loops can be used to repeat
        more than moves.  \r
        \r
        Use loops to collect all four of the pumpkins.
      courseC_harvester_loops10_markdown_instruction: |-
        Collect all of the corn and
        all of the pumpkins.
      courseC_harvester_loops10_2018_markdown_instruction: |-
        Collect all of the corn
        and all of the pumpkins.
      courseC_harvester_loops11_markdown_instruction: |-
        Collect all of the corn and
        all of the pumpkins.
      courseC_harvester_loops11_2018_markdown_instruction: |-
        Collect all of the corn
        and all of the pumpkins.
      courseC_harvester_loops1_2018_markdown_instruction: |-
        Loops can be used to repeat
        more than moves.  \r
        \r
        Use loops to collect all four of the pumpkins.
      courseC_harvester_loops2_markdown_instruction: |-
        Can you combine two different
        loops to move toward the pumpkins, then collect them all?
      courseC_harvester_loops2_2018_markdown_instruction: |-
        Can you combine two different
        loops to move toward the pumpkins, then collect them all?
      courseC_harvester_loops3_markdown_instruction: Collect all of the pumpkins.
      courseC_harvester_loops3_2018_markdown_instruction: Collect all of the pumpkins.
      courseC_harvester_loops4_markdown_instruction: |-
        Now there is corn growing,
        too!\r
        \r
        Collect all of the corn and all of the pumpkins.
      courseC_harvester_loops4_2018_markdown_instruction: |-
        Now there is corn growing,
        too!\r
        \r
        Collect all of the corn and all of the pumpkins.
      courseC_harvester_loops5_markdown_instruction: |-
        Collect all of the corn and
        all of the pumpkins.
      courseC_harvester_loops5_2018_markdown_instruction: |-
        Collect all of the corn
        and all of the pumpkins.
      courseC_harvester_loops6_markdown_instruction: |-
        Collect all of the corn and
        all of the pumpkins.
      courseC_harvester_loops6_2018_markdown_instruction: |-
        Collect all of the corn
        and all of the pumpkins.
      courseC_harvester_loops7_markdown_instruction: |-
        Collect all of the corn and
        all of the pumpkins.
      courseC_harvester_loops7_2018_markdown_instruction: |-
        Collect all of the corn
        and all of the pumpkins.
      courseC_harvester_loops8_markdown_instruction: |-
        **Challenge:** Collect all
        of the corn and all of the pumpkins.\r
        \r
        You can complete this challenge
        any way you want, but it will either take a lot of work or a lot of thinking!
      courseC_harvester_loops8_2018_markdown_instruction: |-
        **Challenge:** Collect
        all of the corn and all of the pumpkins.\r
        \r
        You can complete this challenge
        any way you want, but it will either take a lot of work or a lot of thinking!
      courseC_harvester_loops9_markdown_instruction: |-
        Collect all of the corn and
        all of the pumpkins.
      courseC_harvester_loops9_2018_markdown_instruction: |-
        Collect all of the corn
        and all of the pumpkins.
      courseC_harvester_loops_challenge1_markdown_instruction: |-
        Collect all of the
        corn.
      courseC_harvester_loops_challenge2_markdown_instruction: |-
        Collect all of the
        lettuce. Avoid the trees and fields!
      courseC_harvester_loops_challenge2_2018_markdown_instruction: |-
        Collect all
        of the lettuce. Avoid the trees and fields!
      courseC_harvester_loops_forVid_markdown_instruction: |-
        Collect all of the corn
        and all of the pumpkins.
      courseC_maze_debugging1_markdown_instruction: |-
        This code isn't quite right!  \r
        \r
        Fix
        the code to help Scrat get to the acorn.
      courseC_maze_debugging1_2018_markdown_instruction: |-
        This code isn't quite
        right!  \r
        \r
        Fix the code to help Scrat get to the acorn.
      courseC_maze_debugging3_markdown_instruction: |-
        Something is not quite right.
        \r
        \r
        Remove blocks to get Scrat to the acorn!
      courseC_maze_debugging3_2018_markdown_instruction: |-
        Something is not quite
        right. \r
        \r
        Remove blocks to get Scrat to the acorn!
      courseC_maze_debugging_challenge2_markdown_instruction: |-
        If Scrat turns too
        often, he might get dizzy! Help him reach the acorn with only four `turn`
        commands.
      courseC_maze_debugging_challenge2_2018_markdown_instruction: |-
        If Scrat turns
        too often, he might get dizzy! Help him reach the acorn with only four `turn`
        commands.
      courseC_maze_loops2_markdown_instruction: |-
        With the `repeat` block, you can
        loop code over and over.\r
        \r
        Can you get the bird to the pig by creating
        a loop that uses only one `move forward` block inside of a `repeat`?
      courseC_maze_loops2_predict1_markdown_instruction: |-
        Suddenly, a magical block
        appears!  \r
        With the `repeat` block, you can loop code over and over.\r
        \r
        Can
        you get the bird to the pig by creating a loop that uses only one `move forward`
        block inside of a `repeat`?
      courseC_maze_loops3_markdown_instruction: |-
        *"Get me to the pig!"*\r
        \r
        Solve
        this puzzle by creating a loop!
      courseC_maze_loops4_markdown_instruction: |-
        In this puzzle, two `repeat` loops
        will help you get the bird to the pig with the fewest number of blocks!
      courseC_maze_loops5_markdown_instruction: |-
        *"Get me to the pig as quickly
        as possible!"*
      courseC_maze_loops6_markdown_instruction: |-
        *"This pig is ruffling my feathers!"*\r
        \r
        Loops
        even work with more than one block inside!  Can you loop this sequence?
      courseC_maze_loops7_markdown_instruction: |-
        *"Get me to the pig!"*\r
        \r
        Use
        what you learned in other puzzles!
      courseC_maze_loops8_markdown_instruction: |-
        **Challenge:** Combine ideas from
        the last few puzzles to complete this level.
      courseC_maze_loops_challenge2_markdown_instruction: |-
        Let's hunt for treasure
        - using loops! Help the collector by debugging this code. Get all of the treasure!
      courseC_maze_programming1_markdown_instruction: |-
        For this puzzle, drag all
        of the blocks together and click "Run" to watch it go!
      courseC_maze_programming1_2018_markdown_instruction: |-
        For this puzzle, drag
        all of the blocks together and click "Run" to watch it go!
      courseC_maze_programming2_markdown_instruction: |-
        Drag an extra <xml><block
        type="maze_moveForward"/></xml> block out of the toolbox to finish your
        code.
      courseC_maze_programming2_2018_markdown_instruction: |-
        Drag an extra <xml><block
        type="maze_moveForward"/></xml> block out of the toolbox to finish your
        code.
      courseC_maze_programming3_markdown_instruction: |-
        *"This pig is ruffling my
        feathers."*\r
        \r
        There is one extra block that is going to cause the bird
        to crash.  \r
        Throw it away by unhooking it from the grey blocks and dragging
        it back to the toolbox.
      courseC_maze_programming3_2018_markdown_instruction: |-
        *"This pig is ruffling
        my feathers."*\r
        \r
        There is one extra block that is going to cause the
        bird to crash.  \r
        Throw it away by unhooking it from the grey blocks and
        dragging it back to the toolbox.
      courseC_maze_programming4_markdown_instruction: |-
        *"Trace the path and lead
        me to the silly pig."* \r
        \r
        Avoid TNT or feathers will fly!
      courseC_maze_programming4_2018_markdown_instruction: |-
        *"Trace the path and
        lead me to the silly pig."* \r
        \r
        Avoid TNT or feathers will fly!
      courseC_maze_programming5_markdown_instruction: |-
        *"Follow this path to get
        me to the pig!"*\r
        \r
        Avoid the TNT.
      courseC_maze_programming5_2018_markdown_instruction: |-
        *"Follow this path to
        get me to the pig!"*\r
        \r
        Avoid the TNT.
      courseC_maze_programming6_markdown_instruction: |-
        *"Keep calm and help me find
        the bad pig. Otherwise I might get angry!"*\r
        \r
        Get the bird to the pig
        and avoid the TNT.
      courseC_maze_programming6_2018_markdown_instruction: |-
        *"Keep calm and help
        me find the bad pig. Otherwise I might get angry!"*\r
        \r
        Get the bird to
        the pig and avoid the TNT.
      courseC_maze_programming7_markdown_instruction: |-
        *"It's time to get angry!"*\r
        \r
        **Challenge:**
        This code has a lot of bugs. You'll need to remove some blocks and add others.
      courseC_maze_programming7_2018_markdown_instruction: |-
        *"It's time to get
        angry!"*\r
        \r
        **Challenge:** This code has a lot of bugs. You'll need
        to remove some blocks and add others.
      courseC_maze_programming8_markdown_instruction: |-
        *"Keep calm and help me find
        the bad pig."*
      courseC_maze_programming8_2018_markdown_instruction: |-
        *"Keep calm and help
        me find the bad pig."*
      courseC_maze_programming8_predict1_markdown_instruction: |-
        *"Keep calm and
        help me find the bad pig."*
      courseC_maze_programming8_predict1_2018_markdown_instruction: |-
        *"Keep calm
        and help me find the bad pig."*
      courseC_maze_programming9_markdown_instruction: |-
        *"Now, help me sneak up on
        the pig any way you want to!"*
      courseC_maze_programming9_2018_markdown_instruction: |-
        *"Now, help me sneak
        up on the pig any way you want to!"*
      courseC_maze_programming_challenge1_markdown_instruction: "The bird needs your\nhelp!
        The pig is hiding, and the goal is to find it. "
      courseC_maze_programming_challenge1_2018_markdown_instruction: "The bird needs\nyour
        help! The pig is hiding, and the goal is to find it. "
      courseC_maze_programming_challenge2_markdown_instruction: |-
        Sometimes there
        is more than one way to solve the same problem. Sometimes it's faster to
        go backwards than it is to go forwards!
      courseC_maze_programming_challenge2_2018_markdown_instruction: |-
        Sometimes there
        is more than one way to solve the same problem. Sometimes it's faster to
        go backwards than it is to go forwards!
      courseC_playLab_embedded_markdown_instruction: |-
        ##Here's a game for you to
        play! \r
        To win, get the penguin to run into the octopus. Use your arrow
        keys to move the penguin around.\r
        \r
        Once you are done, you will learn
        how to make this game!
      courseC_puppy_loops8_markdown_instruction: |-
        **Challenge:** Combine ideas from
        the last few puzzles to complete this level.
      courseC_puppy_loops8courseC_maze_loops8_markdown_instruction: |-
        **Challenge:**
        Combine ideas from the last few puzzles to complete this level.
      courseC_starWars_loops1_markdown_instruction: |-
        ![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)
        _"Go get the scrap metal, BB-8!"_ \r
        \r
        Use five of the same blocks to
        get the scrap metal. Scrap metal glows like this: ![](https://images.code.org/5665566ab779d9b63d03cf8ba127a98f-image-1500570606896.gif)
      courseC_starWars_loops10_markdown_instruction: |-
        ![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)\r

        _"Go BB-8!"_\r
        \r
        You are doing great! Keep it up!
      courseC_starWars_loops10_2018_markdown_instruction: |-
        ![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)\r

        _"Go BB-8!"_\r
        \r
        You are doing great! Keep it up!
      courseC_starWars_loops11_markdown_instruction: |-
        ![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)
        _"Keep going, BB-8!"_\r
        \r
        You are almost there! This time, choose any
        path you like!
      courseC_starWars_loops11_2018_markdown_instruction: |-
        ![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)
        _"Keep going, BB-8!"_\r
        \r
        You are almost there! This time, choose any
        path you like!
      courseC_starWars_loops1_2018_markdown_instruction: |-
        ![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)
        _"Go get the scrap metal, BB-8!"_ \r
        \r
        Use five of the same blocks to
        get the scrap metal. Scrap metal glows like this: ![](https://images.code.org/5665566ab779d9b63d03cf8ba127a98f-image-1500570606896.gif)
      courseC_starWars_loops2_markdown_instruction: |-
        ![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)
        _"Go BB-8!"_\r
        \r
        To get all the scrap metal, try creating a loop that
        uses only one block inside of a `repeat` block.
      courseC_starWars_loops2_2018_markdown_instruction: |-
        ![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)
        _"Go BB-8!"_\r
        \r
        To get all the scrap metal, try creating a loop that
        uses only one block inside of a `repeat` block.
      courseC_starWars_loops4_markdown_instruction: |-
        ![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)
        _"Keep it up, BB-8."_\r
        \r
        In this puzzle, two `repeat` loops will help
        you get BB-8 to all of the scrap metal with the fewest number of blocks!
      courseC_starWars_loops4_2018_markdown_instruction: |-
        ![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)
        _"Keep it up, BB-8."_\r
        \r
        In this puzzle, two `repeat` loops will help
        you get BB-8 to all of the scrap metal with the fewest number of blocks!
      courseC_starWars_loops5_markdown_instruction: |-
        ![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)
        _"Go BB-8!"_
      courseC_starWars_loops5_2018_markdown_instruction: |-
        ![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)
        _"Go BB-8!"_
      courseC_starWars_loops6_markdown_instruction: |-
        ![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)
        _"Can you get it all?"_\r
        \r
        Loops even work with more than one block
        inside!  Can you loop this sequence?
      courseC_starWars_loops6_2018_markdown_instruction: |-
        ![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)
        _"Can you get it all?"_\r
        \r
        Loops even work with more than one block
        inside!  Can you loop this sequence?
      courseC_starWars_loops7_markdown_instruction: |-
        ![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)
        _"You can do it!"_\r
        \r
        Can you try to get all the scrap metal using just
        one loop? Try programming it all out then finding the repeating code to put
        in a loop.
      courseC_starWars_loops7_2018_markdown_instruction: |-
        ![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)
        _"You can do it!"_\r
        \r
        Can you try to get all the scrap metal using just
        one loop? Try programming it all out then finding the repeating code to put
        in a loop.
      courseC_starWars_loops8_markdown_instruction: |-
        ![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)
        _"Keep it up, BB-8."_\r
        \r
        **Challenge:** Combine ideas from the last
        few puzzles to complete this level.
      courseC_starWars_loops8_2018_markdown_instruction: |-
        ![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)
        _"Keep it up, BB-8."_\r
        \r
        **Challenge:** Combine ideas from the last
        few puzzles to complete this level.
      courseC_starWars_loops9_markdown_instruction: |-
        ![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)
        _"Keep going!"_\r
        \r
        Use what you have learned to pick up all of the scrap
        metal!
      courseC_starWars_loops9_2018_markdown_instruction: |-
        ![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)
        _"Keep going!"_\r
        \r
        Use what you have learned to pick up all of the scrap
        metal!
      courseD_Frozen_nested1_markdown_instruction: |
        ![](https://images.code.org/109aa2afaa3b7b1ecebff518bacdf3c5-image-1500660008987.png)
        _“Hi, I’m Elsa of Arendelle, help me draw a shape.”_\r
        \r
        Draw a small shape,
        between **20 and 50** pixels wide.  It can be any shape that you like.  \r
        <hr/>\r
        \r
        You
        can try making a polygon, like one of these:  \r
        ![](https://images.code.org/14e58b3901ca7c13319cc64f18ae5d82-image-1495765942356.21.06.png)\r
        ![](https://images.code.org/8f79d689ea4936a3725a37025f8fda40-image-1495765942357.25.49.png)\r
        ![](https://images.code.org/e5d222ae7356af4811aa153640af135e-image-1495765942357.26.09.png)  \r
        \r
          \r
          \r
        Or
        even an abstract shape, like one of these:  \r
        ![](https://images.code.org/8471c095219da3044b3830bebeedefb3-image-1496436883704.32.19.png)\r
        ![](https://images.code.org/2fe6ed2db5308f4b34f7632fc6b8a64d-image-1496436883705.40.32.png)\r
        ![](https://images.code.org/abb0947f634bc4b712d47516587a6cb8-image-1496436883705.47.21.png)\r
      courseD_Frozen_nested2_markdown_instruction: |-
        ![](https://images.code.org/109aa2afaa3b7b1ecebff518bacdf3c5-image-1500660008987.png)
        _“Now, let’s draw more than one.”_\r
        \r
        Now take your shape and draw two
        or three in a row by jumping forward some number of pixels.  \r
        \r
        - If
        you jump forward by **less** than the width of your shape, they might overlap\r
        -
        If you jump forward by **more** than the width of your shape, you will get
        a gap\r
        \r
        <hr/>\r
        \r
        Your row might end up straight like with these:\r
        \r
        ![](https://images.code.org/cefc818d8636c7ce185738311870ff1d-image-1495820778762.39.25.png)\r
        ![](https://images.code.org/80dc77914de15685dc696825dff61723-image-1495820778762.39.43.png)\r
        ![](https://images.code.org/00cda078f119b1ddb0af27ae4a44b089-image-1495820778761.39.08.png)\r
        <br/>  <br/>\r
        \r
        \r
        Or,
        your shapes might move around like one of these: \r
        \r
        ![](https://images.code.org/0c4066fe7547bc1f4495aacbeecdea6d-image-1496437220447.47.04.png)\r
        ![](https://images.code.org/4069376b784c147a8d443d49e22f783f-image-1496437220446.40.15.png)\r
        ![](https://images.code.org/02704ab3fb3356f76c544bb64c1a7cce-image-1496437220446.32.04.png)
      courseD_Frozen_nested3_markdown_instruction: |-
        ![](https://images.code.org/109aa2afaa3b7b1ecebff518bacdf3c5-image-1500660008987.png)
        _"Let’s make it into a snowflake."_\r
        \r
        Next, jump Elsa back to the center
        using the `jump to 200 over and 200 down` block, and spin her around to draw
        the line of shapes again and again in a bunch of different directions.   \r
        \r
        What
        amazing snowflakes you can make!\r
        <hr/>\r
        Take a look at these examples
        with polygons:  \r
        ![](https://images.code.org/b32ebfb3be559bf8a6d017a854e0b97e-image-1495821528995.42.08.png)\r
        ![](https://images.code.org/08d7155f6829f82d878dfa57ad5dcaf3-image-1495821528996.42.26.png)\r
        ![](https://images.code.org/7d461ee9046871e6993406e558f28176-image-1495821528996.42.58.png)\r
        \r
        Abstract
        shapes might make a snowflake more like one of these:  \r
        ![](https://images.code.org/376d7ba20b6bb86e08b1675370e87b92-image-1496695869798.44.00.png)\r
        ![](https://images.code.org/4f649cc779920632674afac5acce5c95-image-1496695869798.47.51.png)\r
        ![](https://images.code.org/a68f925ffd87241ebc09183acc908b4b-image-1496695869796.31.49.png)
      courseD_Frozen_nested4_markdown_instruction: "![](https://images.code.org/109aa2afaa3b7b1ecebff518bacdf3c5-image-1500660008987.png)\n_\"What
        happens if we draw snowflakes on top of each other?\"_\\r\n\\r\nTry\nlayering
        two different shapes of snowflakes on top of one another with a little\nturn
        in between - see what you get! "
      courseD_Frozen_nested5_markdown_instruction: |
        ![](https://images.code.org/109aa2afaa3b7b1ecebff518bacdf3c5-image-1500660008987.png)
        _"Get creative with shapes and angles to see what kind of new snowflakes
        we can draw!"_\r
      courseD_Frozen_nested6_markdown_instruction: |-
        ![](https://images.code.org/109aa2afaa3b7b1ecebff518bacdf3c5-image-1500660008987.png)
        _"Let’s try something new. This time, skate in a zig-zag."_\r
        \r
        \r
        <img
        src="https://images.code.org/73b1310fca6cf884ec8fb8b026210212-image-1495839168718.16.10.png"
        width="200px" style="float: left; margin: 0 15px 15px 0;" />\r
        Draw a
        stair-step pattern that uses turns between 75 and 105 degrees -- but make
        sure that your left and right turns use the same angle.  \r
        (You will see
        why later.)
      courseD_Frozen_nested7_markdown_instruction: |-
        ![](https://images.code.org/109aa2afaa3b7b1ecebff518bacdf3c5-image-1500660008987.png)
        _"Now let’s turn and go back the way we came."_\r
        \r
        Turn around 180 degrees
        and draw the exact same stair pattern again!  \r
        \r
        - The rest of this stage
        will be easier if you put all of your code inside of a loop to make Elsa  draw,
        turn around 180 degrees, draw, then turn around 180 degrees again.\r
        \r
        <hr/>\r
        \r
        Here
        is an example of stairs that use a 76 degree turn:\r
        \r
        ![](https://images.code.org/ceea66fad37e79cc45a850911f90440c-image-1496696286635.16.27.png)
      courseD_Frozen_nested8_markdown_instruction: |-
        ![](https://images.code.org/109aa2afaa3b7b1ecebff518bacdf3c5-image-1500660008987.png)
        _"Let’s spin and make it into a snowflake."_\r
        \r
        Spin that shape around
        5 or 6 times in a circle.\r
        - If you choose 5 times,  try a turn of 72 degrees\r
        -
        If you choose 6 times,  try a turn of 60 degrees\r
        <hr/>\r
        \r
        Here's an
        example of Elsa turning a pattern 6 times:\r
        \r
        ![](https://images.code.org/b0fe02e728f80ae7a4b731f32371a37b-image-1496697582505.19.34.png)
      courseD_Frozen_nested9_markdown_instruction: |
        ![](https://images.code.org/109aa2afaa3b7b1ecebff518bacdf3c5-image-1500660008987.png)  _"Now,
        what should we do? Let’s explore and create our own winter wonderland!"_\r
        \r
        Try
        playing around with what you've created. Draw whatever you like!\r
        - What
        happens if you use two different angles in your stair step pattern?\r
        - What
        happens if you make your diamond pattern longer or shorter?\r
        - What does
        it look like to draw two snowflakes on top of one another?\r
      courseD_artist_1_2018_markdown_instruction: |
        ![](https://images.code.org/109aa2afaa3b7b1ecebff518bacdf3c5-image-1500660008987.png)
        _“Hi, I’m Elsa of Arendelle, help me draw a shape.”_\r
        \r
        Draw a hexagon
        with 50 pixel long sides.  \r
        \r
        ---\r
        \r
        To draw a hexagon, you will
        need to: \r
        - move forward by **50** pixels\r
        - turn right by **60** degrees\r
        -
        repeat a total of **6** times\r
        \r
      courseD_artist_2_2018_markdown_instruction: |
        ![](https://images.code.org/109aa2afaa3b7b1ecebff518bacdf3c5-image-1500660008987.png)
        _“Good job!”_\r
        \r
        After your hexagon, turn right by **60** degrees, then
        draw a line that is **150** pixels long.   \r
        \r
        Finish by putting Elsa
        back to the center of the play area, using the <xml><block type="jump_to"><title
        name="VALUE">middle center</title></block></xml> block.\r
        \r
        \r
      courseD_artist_3_2018_markdown_instruction: |
        ![](https://images.code.org/109aa2afaa3b7b1ecebff518bacdf3c5-image-1500660008987.png)
        _“Let’s make a snowflake.”_\r
        \r
        To turn this code into a snowflake, nest
        all of the code inside of another `repeat` loop and run it a total of **6**
        times.  You should only need to add one block.\r
        \r
      courseD_artist_4_2018_markdown_instruction: |-
        ![](https://images.code.org/109aa2afaa3b7b1ecebff518bacdf3c5-image-1500660008987.png)
        _"Let's make our snowflakes special!"_\r
        \r
        **Inspiration:** Where do
        you need to add code if you want to draw a tiny square at the tip of each
        long line?\r
        \r
        ---\r
        You can try whatever you want in this puzzle, but
        here is an idea:\r
        \r
        Try making a tiny square at the end of each line\r
        -
        Each side should be 15 pixels long\r
        - You should turn by 90 degrees\r
        -
        Repeat those actions a total of 4 times
      courseD_artist_5_2018_markdown_instruction: |-
        ![](https://images.code.org/109aa2afaa3b7b1ecebff518bacdf3c5-image-1500660008987.png)
        _"Try changing the shapes or the lengths of the lines to make this your own!"_\r
        \r
        <br/>  \r
        \r
        **Inspiration:**
        You can change your drawing in any way you want, but here is an idea:\r
        \r
        -
        Try switching the types of shape in the middle of the snowflake with the one
        at the end of each line!
      courseD_artist_6_2018_markdown_instruction: |-
        ![](https://images.code.org/109aa2afaa3b7b1ecebff518bacdf3c5-image-1500660008987.png)
        _"Let’s try something new. This time, skate in a zig-zag."_\r
        \r
        <br/>  \r
        \r
        **Inspiration:**
        Try changing your long 150 pixel line into 6 short lines of **25** pixels\r
        \r
        -
        Turn by **45** degrees in alternate directions after each short line to get
        a zig-zag look\r
        - Where do you need to put a new `repeat` block to make
        this happen?\r
        - How many times do you have to repeat your pattern of 2 short
        lines to get 6 total?
      courseD_artist_7_2018_markdown_instruction: |-
        ![](https://images.code.org/109aa2afaa3b7b1ecebff518bacdf3c5-image-1500660008987.png)
        _"Now let’s turn and go back the way we came."_\r
        \r
        Turn around 180 degrees
        and draw the exact same stair pattern again!  \r
        \r
        - The rest of this stage
        will be easier if you put all of your code inside of a loop to make Elsa  draw,
        turn around 180 degrees, draw, then turn around 180 degrees again.\r
        \r
        <hr/>\r
        \r
        Here
        is an example of stairs that use a 76 degree turn:\r
        \r
        ![](https://images.code.org/ceea66fad37e79cc45a850911f90440c-image-1496696286635.16.27.png)
      courseD_artist_8_2018_markdown_instruction: |-
        ![](https://images.code.org/109aa2afaa3b7b1ecebff518bacdf3c5-image-1500660008987.png)
        _"Let’s spin and make it into a snowflake."_\r
        \r
        Spin that shape around
        5 or 6 times in a circle.\r
        - If you choose 5 times,  try a turn of 72 degrees\r
        -
        If you choose 6 times,  try a turn of 60 degrees\r
        <hr/>\r
        \r
        Here's an
        example of Elsa turning a pattern 6 times:\r
        \r
        ![](https://images.code.org/b0fe02e728f80ae7a4b731f32371a37b-image-1496697582505.19.34.png)
      courseD_artist_9_2018_markdown_instruction: |
        ![](https://images.code.org/109aa2afaa3b7b1ecebff518bacdf3c5-image-1500660008987.png)  _"Now,
        what should we do? Let’s explore and create our own winter wonderland!"_\r
        \r
        Try
        playing around with what you've created. Draw whatever you like!\r
        - What
        happens if you use two different angles in your stair step pattern?\r
        - What
        happens if you make your diamond pattern longer or shorter?\r
        - What does
        it look like to draw two snowflakes on top of one another?\r
      courseD_artist_binary1_markdown_instruction: |-
        We've provided you with a grid
        of "pixels" that you can walk through and make designs by turning on only
        certain squares.\r
        \r
        Use the blocks below to have the artist draw "01010101"
        in binary in the first row.
      courseD_artist_binary1_2018_markdown_instruction: |-
        We've provided you with
        a grid of "pixels" that you can walk through and make designs by turning
        on only certain squares.\r
        \r
        Use the blocks below to have the artist draw
        "01010101" in binary in the first row.
      courseD_artist_binary2_markdown_instruction: |-
        Here's a function that takes
        a binary string of 1's and 0's and instructs the artist to follow them from
        left to right, top to bottom.  \r
        ___\r
        The artist will fill-in the squares
        when it sees a 1 and ignore the square when it sees a 0. \r
        ___\r
        **Run
        this code to see how the artist uses binary to draw this pattern.**
      courseD_artist_binary2_2018_markdown_instruction: |-
        Here's a function that
        takes a binary string of 1's and 0's and instructs the artist to follow
        them from left to right, top to bottom.  \r
        ___\r
        The artist will fill-in
        the squares when it sees a 1 and ignore the square when it sees a 0. \r
        ___\r
        **Run
        this code to see how the artist uses binary to draw this pattern.**
      courseD_artist_binary_challenge1_markdown_instruction: |-
        You can only use each
        binary value (0 or 1) once each in this puzzle. Try using nested loops to
        complete this drawing.
      courseD_artist_binary_challenge1_2018_markdown_instruction: |-
        You can only use
        each binary value (0 or 1) once each in this puzzle. Try using nested loops
        to complete this drawing.
      courseD_artist_binary_challenge2_markdown_instruction: |-
        There are 256 bits
        represented on this grid - that means it's easy for a small change to cause
        big problems. Are you persistent enough to restore this logo back to normal?\r
        \r
        ![](https://images.code.org/74e15f513982b47762dd33ebbc21e5e9-image-1498776314610.png)
      courseD_artist_binary_challenge2_2018_markdown_instruction: |-
        There are 256
        bits represented on this grid - that means it's easy for a small change to
        cause big problems. Are you persistent enough to restore this logo back to
        normal?\r
        \r
        ![](https://images.code.org/74e15f513982b47762dd33ebbc21e5e9-image-1498776314610.png)
      courseD_artist_binary_challenge3_markdown_instruction: |-
        There are 256 bits
        represented on this grid - that means it's easy for a small change to cause
        big problems. Are you persistent enough to restore this logo back to normal?\r
        \r
        ![](https://images.code.org/74e15f513982b47762dd33ebbc21e5e9-image-1498776314610.png)
      courseD_artist_functions10_markdown_instruction: |-
        This time, use lines of 8
        hexagons with 25 pixel sides.\r
        \r
        - To make each hexagon, repeat the 6
        times, turning 60 degrees.\r
        - To draw a diamond, you will need to alternate
        between turning 60 degrees and 120 degrees.
      courseD_artist_functions2_markdown_instruction: |-
        Functions let you define new
        blocks! \r
        \r
        We've moved the blocks needed for drawing a square into a
        function called `draw a square`. This time, use the `draw a square` function
        to create the glasses. \r
        <hr/>\r
        \r
        The squares are 75 pixels apart.
      courseD_artist_functions3_markdown_instruction: |-
        We will come back to functions
        shortly. Let's take a break to practice making this star. \r
        \r
        You can
        make this drawing by adding a repeat block.
      courseD_artist_functions4_markdown_instruction: |-
        Now that you can draw a star,
        try drawing four stars!\r
        \r
        - Each branch of the star is 25 pixels long\r
        -
        Turn 45 degrees between branches\r
        - Jump 100 pixels between each star
      courseD_artist_functions5_markdown_instruction: |-
        When is drawing three stars
        harder than drawing four? When you also have to jump over the moon!\r
        \r
        Draw
        only those three stars to finish this puzzle.
      courseD_artist_functions6_markdown_instruction: |-
        You are doing great! \r
        \r
        Make
        this window by drawing a square, then turning 90 degrees before drawing another,
        and so on.
      courseD_artist_functions7_markdown_instruction: |-
        Let's take the code for the
        window and add it to function `draw a window`. Now, we can call the function
        any time we need to draw a window without having to write the code again.
        \r
        \r
        <img src="https://images.code.org/57c016bcafe697e6ddb196e0f13c9ef9-image-1468602046641.gif"
        width="450px"/>\r
        <br/> \r
        \r
        Try solving this puzzle by creating `draw
        a window` and calling it five times. Watch out for the door!\r
        \r
        - The
        top windows are 50 pixels away from each other.  \r
        - The bottom windows
        are 100 pixels below the top set.
      courseD_artist_functions8_markdown_instruction: |-
        **Challenge:** Create as many
        functions as you think you need to make this drawing of 50 pixel squares.
      courseD_artist_functions9_markdown_instruction: |-
        Create this image using only
        the blocks provided.\r
        \r
        - To draw a diamond, you will need to alternate
        between turning 60 degrees and 120 degrees.
      courseD_artist_nestedLoops1a_markdown_instruction: "Now loop the triangle 6\ntimes.
        \\r\n\\r\nAfter each triangle, you'll need to turn 60 degrees before\ndrawing
        the next. "
      courseD_artist_nestedLoops1a_2018_markdown_instruction: "Now loop the triangle\n6
        times. \\r\n\\r\nAfter each triangle, you'll need to turn 60 degrees before\ndrawing
        the next. "
      courseD_artist_nestedLoops2_markdown_instruction: |-
        This time, complete the
        puzzle with the fewest number of blocks possible.\r
        \r
        After each triangle,
        you'll need to turn 60 degrees before drawing the next.\r
        See how much easier
        this is with **nested loops**?
      courseD_artist_nestedLoops2_2018_markdown_instruction: |-
        This time, complete
        the puzzle with the fewest number of blocks possible.\r
        \r
        After each triangle,
        you'll need to turn 60 degrees before drawing the next.\r
        See how much easier
        this is with **nested loops**?
      courseD_artist_nestedLoops4_markdown_instruction: |-
        Great!  Do the same thing
        with these circles. \r
        \r
        - Each circle is made by moving 1 pixel before
        turning 1 degree, 360 times.\r
        - Each circle begins just 50 pixels from where
        the last one ended
      courseD_artist_nestedLoops4_2018_markdown_instruction: |-
        Great!  Do the same
        thing with these circles. \r
        \r
        - Each circle is made by moving 1 pixel
        before turning 1 degree, 360 times.\r
        - Each circle begins just 50 pixels
        from where the last one ended
      courseD_artist_nestedLoops5_markdown_instruction: |-
        What happens if you also
        turn 90 degrees between circles?\r
        \r
        (To get this image, you still need
        to jump 50 pixels between circles)
      courseD_artist_nestedLoops5_2018_markdown_instruction: |-
        What happens if you
        also turn 90 degrees between circles?\r
        \r
        (To get this image, you still
        need to jump 50 pixels between circles)
      courseD_artist_nestedLoops7_markdown_instruction: |-
        Use what you've learned
        to make this drawing.\r
        \r
        - The squares each have **100 pixel sides** and
        **90 degree angles**\r
        - You will need to turn **60 degrees between each
        square**. Why? Because there are 6 squares, and 360 degrees (a full turn around)
        divided by 6 is 60 degrees.\r
        - Make sure you jump **50 pixels to get to
        the next square**
      courseD_artist_nestedLoops7_2018_markdown_instruction: |-
        Use what you've learned
        to make this drawing.\r
        \r
        - The squares each have **100 pixel sides** and
        **90 degree angles**\r
        - You will need to turn **60 degrees between each
        square**. Why? Because there are 6 squares, and 360 degrees (a full turn around)
        divided by 6 is 60 degrees.\r
        - Make sure you jump **50 pixels to get to
        the next square**
      courseD_artist_nestedLoops8_markdown_instruction: |-
        Using what you have learned
        in the last couple of puzzles, build this image from the beginning.\r
        \r
        -
        Each hexagon has **50 pixel sides** and **60 degree turns**
      courseD_artist_nestedLoops8_2018_markdown_instruction: |-
        Using what you have
        learned in the last couple of puzzles, build this image from the beginning.\r
        \r
        -
        Each hexagon has **50 pixel sides** and **60 degree turns**
      courseD_artist_nestedLoops9_markdown_instruction: |-
        **Challenge:** Can you figure
        out how to make a picture like this?\r
        \r
        - Both shapes have **50 pixel
        sides**\r
        - Between each pair of shapes, you will need to jump forward the
        length of a side, and turn 45 degrees.
      courseD_artist_nestedLoops9_2018_markdown_instruction: |-
        **Challenge:** Can
        you figure out how to make a picture like this?\r
        \r
        - Both shapes have
        **50 pixel sides**\r
        - Between each pair of shapes, you will need to jump
        forward the length of a side, and turn 45 degrees.
      courseD_artist_nestedLoops9_predict1_markdown_instruction: |-
        **Challenge:**
        Can you figure out how to make a picture like this?\r
        \r
        - Both shapes have
        50 pixel sides
      courseD_artist_nestedLoops9_predict1_2018_markdown_instruction: |-
        **Challenge:**
        Can you figure out how to make a picture like this?\r
        \r
        - Both shapes have
        50 pixel sides
      courseD_artist_nestedLoopsFP_markdown_instruction: |-
        Now it's your turn.  Take
        the skills you have learned and make something that you love!\r
        \r
        Need
        an idea?  Try to make one of these:\r
        \r
        ![expandable](https://images.code.org/7ac814e356b3548f57bfab8a9eb31dff-image-1497993113904.png)\r
        ![expandable](https://images.code.org/bd29d35c9a8abf9d27591b90b0f3ec0f-image-1497993121072.png)\r
        ![expandable](https://images.code.org/2970f34785e51ae98be7aff6fe0827ce-image-1497993126938.png)
      courseD_artist_nestedLoopsFP_2018_markdown_instruction: |-
        Now it's your turn.  Take
        the skills you have learned and make something that you love!\r
        \r
        Need
        an idea?  Try to make one of these:\r
        \r
        ![expandable](https://images.code.org/7ac814e356b3548f57bfab8a9eb31dff-image-1497993113904.png)\r
        ![expandable](https://images.code.org/bd29d35c9a8abf9d27591b90b0f3ec0f-image-1497993121072.png)\r
        ![expandable](https://images.code.org/2970f34785e51ae98be7aff6fe0827ce-image-1497993126938.png)
      courseD_artist_nestedLoops_challenge1_markdown_instruction: |-
        Can you figure
        out how to make a picture like this?\r
        \r
        - Both shapes have **50 pixel
        sides.**\r
        - The *octagons* are made with **45 degree** turns.\r
        - The *triangles*
        are made with **120 degree** turns.
      courseD_artist_nestedLoops_challenge1_2018_markdown_instruction: |-
        Can you figure
        out how to make a picture like this?\r
        \r
        - Both shapes have **50 pixel
        sides.**\r
        - The *octagons* are made with **45 degree** turns.\r
        - The *triangles*
        are made with **120 degree** turns.
      courseD_artist_nestedLoops_challenge2_markdown_instruction: |-
        This code is just
        a little bit off!  Can you fix it to make the correct drawing in the workspace?\r
        \r
        -
        The first inner loop should make an octagon.\r
        - The second inner loop should
        make a hexagon.\r
        - The third inner loop should make a square.
      courseD_artist_nestedLoops_challenge2_2018_markdown_instruction: |-
        This code
        is just a little bit off!  Can you fix it to make the correct drawing in the
        workspace?\r
        \r
        - The first inner loop should make an octagon.\r
        - The
        second inner loop should make a hexagon.\r
        - The third inner loop should
        make a square.
      courseD_artist_project1_markdown_instruction: |
        ![](https://images.code.org/109aa2afaa3b7b1ecebff518bacdf3c5-image-1500660008987.png)
        _“Hi, I’m Elsa of Arendelle, help me draw a shape.”_\r
        \r
        Draw a small shape,
        between **20 and 50** pixels wide.  It can be any shape that you like.  \r
        <hr/>\r
        \r
        You
        can try making a polygon, like one of these:  \r
        ![](https://images.code.org/14e58b3901ca7c13319cc64f18ae5d82-image-1495765942356.21.06.png)\r
        ![](https://images.code.org/8f79d689ea4936a3725a37025f8fda40-image-1495765942357.25.49.png)\r
        ![](https://images.code.org/e5d222ae7356af4811aa153640af135e-image-1495765942357.26.09.png)  \r
        \r
          \r
          \r
        Or
        even an abstract shape, like one of these:  \r
        ![](https://images.code.org/8471c095219da3044b3830bebeedefb3-image-1496436883704.32.19.png)\r
        ![](https://images.code.org/2fe6ed2db5308f4b34f7632fc6b8a64d-image-1496436883705.40.32.png)\r
        ![](https://images.code.org/abb0947f634bc4b712d47516587a6cb8-image-1496436883705.47.21.png)\r
      courseD_artist_project1_2018_markdown_instruction: |-
        ![](https://images.code.org/109aa2afaa3b7b1ecebff518bacdf3c5-image-1500660008987.png)
        _“Hi, I’m Elsa of Arendelle, help me draw a shape.”_\r
        \r
        Draw a small shape,
        between **20 and 50** pixels wide.  It can be any shape that you like.  \r
        <hr/>\r
        \r
        You
        can try making a polygon, like one of these:  \r
        ![](https://images.code.org/14e58b3901ca7c13319cc64f18ae5d82-image-1495765942356.21.06.png)\r
        ![](https://images.code.org/8f79d689ea4936a3725a37025f8fda40-image-1495765942357.25.49.png)\r
        ![](https://images.code.org/e5d222ae7356af4811aa153640af135e-image-1495765942357.26.09.png)  \r
        \r
          \r
          \r
        Or
        even an abstract shape, like one of these:  \r
        ![](https://images.code.org/8471c095219da3044b3830bebeedefb3-image-1496436883704.32.19.png)\r
        ![](https://images.code.org/2fe6ed2db5308f4b34f7632fc6b8a64d-image-1496436883705.40.32.png)\r
        ![](https://images.code.org/abb0947f634bc4b712d47516587a6cb8-image-1496436883705.47.21.png)
      courseD_artist_project1a_markdown_instruction: |-
        ![](https://images.code.org/109aa2afaa3b7b1ecebff518bacdf3c5-image-1500660008987.png)
        _"Let’s try something new. This time, skate in a zig-zag."_\r
        \r
        \r
        <img
        src="https://images.code.org/73b1310fca6cf884ec8fb8b026210212-image-1495839168718.16.10.png"
        width="200px" style="float: left; margin: 0 15px 15px 0;" />\r
        Draw a
        stair-step pattern that uses turns between 75 and 105 degrees -- but make
        sure that your left and right turns use the same angle.  \r
        (You will see
        why later.)
      courseD_artist_project1a_2018_markdown_instruction: |-
        ![](https://images.code.org/109aa2afaa3b7b1ecebff518bacdf3c5-image-1500660008987.png)
        _"Let’s try something new. This time, skate in a zig-zag."_\r
        \r
        \r
        <img
        src="https://images.code.org/73b1310fca6cf884ec8fb8b026210212-image-1495839168718.16.10.png"
        width="200px" style="float: left; margin: 0 15px 15px 0;" />\r
        Draw a
        stair-step pattern that uses turns between 75 and 105 degrees -- but make
        sure that your left and right turns use the same angle.  \r
        (You will see
        why later.)
      courseD_artist_project2_markdown_instruction: |-
        ![](https://images.code.org/109aa2afaa3b7b1ecebff518bacdf3c5-image-1500660008987.png)
        _“Now, let’s draw more than one.”_\r
        \r
        Now take your shape and draw two
        or three in a row by jumping forward some number of pixels.  \r
        \r
        - If
        you jump forward by **less** than the width of your shape, they might overlap\r
        -
        If you jump forward by **more** than the width of your shape, you will get
        a gap\r
        \r
        <hr/>\r
        \r
        Your row might end up straight like with these:\r
        \r
        ![](https://images.code.org/cefc818d8636c7ce185738311870ff1d-image-1495820778762.39.25.png)\r
        ![](https://images.code.org/80dc77914de15685dc696825dff61723-image-1495820778762.39.43.png)\r
        ![](https://images.code.org/00cda078f119b1ddb0af27ae4a44b089-image-1495820778761.39.08.png)\r
        <br/>  <br/>\r
        \r
        \r
        Or,
        your shapes might move around like one of these: \r
        \r
        ![](https://images.code.org/0c4066fe7547bc1f4495aacbeecdea6d-image-1496437220447.47.04.png)\r
        ![](https://images.code.org/4069376b784c147a8d443d49e22f783f-image-1496437220446.40.15.png)\r
        ![](https://images.code.org/02704ab3fb3356f76c544bb64c1a7cce-image-1496437220446.32.04.png)
      courseD_artist_project2_2018_markdown_instruction: |-
        ![](https://images.code.org/109aa2afaa3b7b1ecebff518bacdf3c5-image-1500660008987.png)
        _“Now, let’s draw more than one.”_\r
        \r
        Now take your shape and draw two
        or three in a row by jumping forward some number of pixels.  \r
        \r
        - If
        you jump forward by **less** than the width of your shape, they might overlap\r
        -
        If you jump forward by **more** than the width of your shape, you will get
        a gap\r
        \r
        <hr/>\r
        \r
        Your row might end up straight like with these:\r
        \r
        ![](https://images.code.org/cefc818d8636c7ce185738311870ff1d-image-1495820778762.39.25.png)\r
        ![](https://images.code.org/80dc77914de15685dc696825dff61723-image-1495820778762.39.43.png)\r
        ![](https://images.code.org/00cda078f119b1ddb0af27ae4a44b089-image-1495820778761.39.08.png)\r
        <br/>  <br/>\r
        \r
        \r
        Or,
        your shapes might move around like one of these: \r
        \r
        ![](https://images.code.org/0c4066fe7547bc1f4495aacbeecdea6d-image-1496437220447.47.04.png)\r
        ![](https://images.code.org/4069376b784c147a8d443d49e22f783f-image-1496437220446.40.15.png)\r
        ![](https://images.code.org/02704ab3fb3356f76c544bb64c1a7cce-image-1496437220446.32.04.png)
      courseD_artist_project2a_markdown_instruction: |-
        ![](https://images.code.org/109aa2afaa3b7b1ecebff518bacdf3c5-image-1500660008987.png)
        _"Now let’s turn and go back the way we came."_\r
        \r
        Turn around 180 degrees
        and draw the exact same stair pattern again!  \r
        \r
        - The rest of this stage
        will be easier if you put all of your code inside of a loop to make Elsa  draw,
        turn around 180 degrees, draw, then turn around 180 degrees again.\r
        \r
        <hr/>\r
        \r
        Here
        is an example of stairs that use a 76 degree turn:\r
        \r
        ![](https://images.code.org/ceea66fad37e79cc45a850911f90440c-image-1496696286635.16.27.png)
      courseD_artist_project2a_2018_markdown_instruction: |-
        ![](https://images.code.org/109aa2afaa3b7b1ecebff518bacdf3c5-image-1500660008987.png)
        _"Now let’s turn and go back the way we came."_\r
        \r
        Turn around 180 degrees
        and draw the exact same stair pattern again!  \r
        \r
        - The rest of this stage
        will be easier if you put all of your code inside of a loop to make Elsa  draw,
        turn around 180 degrees, draw, then turn around 180 degrees again.\r
        \r
        <hr/>\r
        \r
        Here
        is an example of stairs that use a 76 degree turn:\r
        \r
        ![](https://images.code.org/ceea66fad37e79cc45a850911f90440c-image-1496696286635.16.27.png)
      courseD_artist_project3_markdown_instruction: |-
        ![](https://images.code.org/109aa2afaa3b7b1ecebff518bacdf3c5-image-1500660008987.png)
        _"Let’s make it into a snowflake."_\r
        \r
        Next, jump Elsa back to the center
        using the `jump to 200 over and 200 down` block, and spin her around to draw
        the line of shapes again and again in a bunch of different directions.   \r
        \r
        What
        amazing snowflakes you can make!\r
        <hr/>\r
        Take a look at these examples
        with polygons:  \r
        ![](https://images.code.org/b32ebfb3be559bf8a6d017a854e0b97e-image-1495821528995.42.08.png)\r
        ![](https://images.code.org/08d7155f6829f82d878dfa57ad5dcaf3-image-1495821528996.42.26.png)\r
        ![](https://images.code.org/7d461ee9046871e6993406e558f28176-image-1495821528996.42.58.png)\r
        \r
        Abstract
        shapes might make a snowflake more like one of these:  \r
        ![](https://images.code.org/376d7ba20b6bb86e08b1675370e87b92-image-1496695869798.44.00.png)\r
        ![](https://images.code.org/4f649cc779920632674afac5acce5c95-image-1496695869798.47.51.png)\r
        ![](https://images.code.org/a68f925ffd87241ebc09183acc908b4b-image-1496695869796.31.49.png)
      courseD_artist_project3_2018_markdown_instruction: |-
        ![](https://images.code.org/109aa2afaa3b7b1ecebff518bacdf3c5-image-1500660008987.png)
        _"Let’s make it into a snowflake."_\r
        \r
        Next, jump Elsa back to the center
        using the `jump to 200 over and 200 down` block, and spin her around to draw
        the line of shapes again and again in a bunch of different directions.   \r
        \r
        What
        amazing snowflakes you can make!\r
        <hr/>\r
        Take a look at these examples
        with polygons:  \r
        ![](https://images.code.org/b32ebfb3be559bf8a6d017a854e0b97e-image-1495821528995.42.08.png)\r
        ![](https://images.code.org/08d7155f6829f82d878dfa57ad5dcaf3-image-1495821528996.42.26.png)\r
        ![](https://images.code.org/7d461ee9046871e6993406e558f28176-image-1495821528996.42.58.png)\r
        \r
        Abstract
        shapes might make a snowflake more like one of these:  \r
        ![](https://images.code.org/376d7ba20b6bb86e08b1675370e87b92-image-1496695869798.44.00.png)\r
        ![](https://images.code.org/4f649cc779920632674afac5acce5c95-image-1496695869798.47.51.png)\r
        ![](https://images.code.org/a68f925ffd87241ebc09183acc908b4b-image-1496695869796.31.49.png)
      courseD_artist_project3a_markdown_instruction: |-
        ![](https://images.code.org/109aa2afaa3b7b1ecebff518bacdf3c5-image-1500660008987.png)
        _"Let’s spin and make it into a snowflake."_\r
        \r
        Spin that shape around
        5 or 6 times in a circle.\r
        - If you choose 5 times,  try a turn of 72 degrees\r
        -
        If you choose 6 times,  try a turn of 60 degrees\r
        <hr/>\r
        \r
        Here's an
        example of Elsa turning a pattern 6 times:\r
        \r
        ![](https://images.code.org/b0fe02e728f80ae7a4b731f32371a37b-image-1496697582505.19.34.png)
      courseD_artist_project3a_2018_markdown_instruction: |-
        ![](https://images.code.org/109aa2afaa3b7b1ecebff518bacdf3c5-image-1500660008987.png)
        _"Let’s spin and make it into a snowflake."_\r
        \r
        Spin that shape around
        5 or 6 times in a circle.\r
        - If you choose 5 times,  try a turn of 72 degrees\r
        -
        If you choose 6 times,  try a turn of 60 degrees\r
        <hr/>\r
        \r
        Here's an
        example of Elsa turning a pattern 6 times:\r
        \r
        ![](https://images.code.org/b0fe02e728f80ae7a4b731f32371a37b-image-1496697582505.19.34.png)
      courseD_artist_project4_markdown_instruction: "![](https://images.code.org/109aa2afaa3b7b1ecebff518bacdf3c5-image-1500660008987.png)\n_\"What
        happens if we draw snowflakes on top of each other?\"_\\r\n\\r\nTry\nlayering
        two different shapes of snowflakes on top of one another with a little\nturn
        in between - see what you get! "
      courseD_artist_project4_2018_markdown_instruction: "![](https://images.code.org/109aa2afaa3b7b1ecebff518bacdf3c5-image-1500660008987.png)\n_\"What
        happens if we draw snowflakes on top of each other?\"_\\r\n\\r\nTry\nlayering
        two different shapes of snowflakes on top of one another with a little\nturn
        in between - see what you get! "
      courseD_artist_project4a_markdown_instruction: |
        ![](https://images.code.org/109aa2afaa3b7b1ecebff518bacdf3c5-image-1500660008987.png)  _"Now,
        what should we do? Let’s explore and create our own winter wonderland!"_\r
        \r
        Try
        playing around with what you've created. Draw whatever you like!\r
        - What
        happens if you use two different angles in your stair step pattern?\r
        - What
        happens if you make your diamond pattern longer or shorter?\r
        - What does
        it look like to draw two snowflakes on top of one another?\r
      courseD_artist_project4a_2018_markdown_instruction: |-
        ![](https://images.code.org/109aa2afaa3b7b1ecebff518bacdf3c5-image-1500660008987.png)  _"Now,
        what should we do? Let’s explore and create our own winter wonderland!"_\r
        \r
        Try
        playing around with what you've created. Draw whatever you like!\r
        - What
        happens if you use two different angles in your stair step pattern?\r
        - What
        happens if you make your diamond pattern longer or shorter?\r
        - What does
        it look like to draw two snowflakes on top of one another?
      courseD_artist_project5_markdown_instruction: |
        ![](https://images.code.org/109aa2afaa3b7b1ecebff518bacdf3c5-image-1500660008987.png)
        _"Get creative with shapes and angles to see what kind of new snowflakes
        we can draw!"_\r
      courseD_artist_project5_2018_markdown_instruction: |-
        ![](https://images.code.org/109aa2afaa3b7b1ecebff518bacdf3c5-image-1500660008987.png)
        _"Get creative with shapes and angles to see what kind of new snowflakes
        we can draw!"_
      courseD_artist_project_embedded_markdown_instruction: |-
        Here's what you will
        soon be making!
      courseD_artist_ramp11_markdown_instruction: |-
        Great!  Now let's make a square
        using Artist!  The blocks are a little different, but the idea is the same.\r
        ___\r
        Each
        side of the square has a length of 200 pixels, and you will need to turn 90
        degrees to make each angle.
      courseD_artist_ramp12_markdown_instruction: |-
        Use what you've learned to draw
        this triangle inside of a square.\r
        ___\r
        ##### The sides are each 200 pixels
        long. You will need to turn 90 degrees to make the square and 120 degrees
        to make the triangle.
      courseD_bee_conditionals1_markdown_instruction: |-
        *"This cloud is blocking
        my view!"*\r
        \r
        Check to see if there's a flower under the cloud. If there's
        a flower, get nectar.
      courseD_bee_conditionals10_markdown_instruction: |-
        Conditionals can be helpful,
        even when you know exactly what is in each spot!\r
        \r
        Collect all of the
        nectar and make all of the honey.
      courseD_bee_conditionals10_2018_markdown_instruction: |-
        Conditionals can be
        helpful, even when you know exactly what is in each spot!\r
        \r
        Collect all
        of the nectar and make all of the honey.
      courseD_bee_conditionals1_predict1_markdown_instruction: |-
        *"This cloud is
        blocking my view!"*\r
        \r
        Check to see if there's a flower under the cloud.
        If there's a flower, get nectar.
      courseD_bee_conditionals1_predict1_2018_markdown_instruction: |-
        *"This cloud
        is blocking my view!"*\r
        \r
        Check to see if there's a flower under the
        cloud. If there's a flower, get nectar.
      courseD_bee_conditionals2_markdown_instruction: |-
        More clouds! \r
        \r
        Check
        underneath every cloud to see if it is hiding a flower before you get nectar.
        If there is a flower underneath the cloud, the bee will need to get nectar
        *once*.  \r
        \r
        Remember: Not all clouds hide the same thing!
      courseD_bee_conditionals2_2018_markdown_instruction: |-
        More clouds! \r
        \r
        Check
        underneath every cloud to see if it is hiding a flower before you get nectar.
        If there is a flower underneath the cloud, the bee will need to get nectar
        *once*.  \r
        \r
        Remember: Not all clouds hide the same thing!
      courseD_bee_conditionals2_test_markdown_instruction: |-
        More clouds! \r
        \r
        Check
        underneath every cloud to see if it is hiding a flower before you get nectar.
        If there is a flower underneath the cloud, the bee will need to get nectar
        *once*.  \r
        \r
        Remember: Not all clouds hide the same thing!
      courseD_bee_conditionals3_markdown_instruction: |-
        You can only collect nectar
        from flowers, but you can check any space to see if there is a flower. If
        there is a flower under any of these clouds, the bee will need to collect
        nectar *once*.
      courseD_bee_conditionals3_2018_markdown_instruction: |-
        You can only collect
        nectar from flowers, but you can check any space to see if there is a flower.
        If there is a flower under any of these clouds, the bee will need to collect
        nectar *once*.
      courseD_bee_conditionals4_markdown_instruction: |-
        In this puzzle, we know that
        every flower has exactly one nectar, but the flowers aren't spaced evenly.\r
        \r
        Get
        all of the nectar using as few blocks as possible.
      courseD_bee_conditionals4_2018_markdown_instruction: |-
        In this puzzle, we know
        that every flower has exactly one nectar, but the flowers aren't spaced evenly.\r
        \r
        Get
        all of the nectar using as few blocks as possible.
      courseD_bee_conditionals6_markdown_instruction: |-
        *"Now I just want to make
        honey."*\r
        \r
        Some of these clouds might have honeycombs under them.  Be
        sure to check if a honeycomb is hiding behind each cloud! If there is a honeycomb,
        the bee will only need to make honey *once*.
      courseD_bee_conditionals6_2018_markdown_instruction: |-
        *"Now I just want to
        make honey."*\r
        \r
        Some of these clouds might have honeycombs under them.  Be
        sure to check if a honeycomb is hiding behind each cloud! If there is a honeycomb,
        the bee will only need to make honey *once*.
      courseD_bee_conditionals7_markdown_instruction: |-
        Sometimes a cloud covers a
        flower, sometimes it covers a honeycomb! \r
        \r
        Use the `if/else` block to
        collect nectar at flowers and make honey at honeycomb. Remember: if there
        is a flower, the bee only needs to get nectar *once*. If there is a honeycomb,
        the bee only needs to make honey *once*.
      courseD_bee_conditionals7_2018_markdown_instruction: |-
        Sometimes a cloud covers
        a flower, sometimes it covers a honeycomb! \r
        \r
        Use the `if/else` block
        to collect nectar at flowers and make honey at honeycomb. Remember: if there
        is a flower, the bee only needs to get nectar *once*. If there is a honeycomb,
        the bee only needs to make honey *once*.
      courseD_bee_conditionals7_predict2_markdown_instruction: |-
        Sometimes a cloud
        covers a flower, sometimes it covers a honeycomb! \r
        \r
        Use the `if/else`
        block to collect nectar at flowers and make honey at honeycomb. Remember:
        there will only ever **bee** *one* honeycomb or *one* flower behind each cloud.
      courseD_bee_conditionals7_predict2_2018_markdown_instruction: |-
        Sometimes a
        cloud covers a flower, sometimes it covers a honeycomb! \r
        \r
        Use the `if/else`
        block to collect nectar at flowers and make honey at honeycomb. Remember:
        there will only ever **bee** *one* honeycomb or *one* flower behind each cloud.
      courseD_bee_conditionals8_markdown_instruction: |-
        **Challenge:** There will
        be either a flower or a honeycomb under each of those clouds!\r
        \r
        Collect
        nectar once if there is a flower.\r
        Otherwise, make honey once (because there
        is a honeycomb).
      courseD_bee_conditionals8_2018_markdown_instruction: |-
        **Challenge:** There
        will be either a flower or a honeycomb under each of those clouds!\r
        \r
        Collect
        nectar once if there is a flower.\r
        Otherwise, make honey once (because there
        is a honeycomb).
      courseD_bee_conditionals9_markdown_instruction: |-
        Collect all of the nectar
        or make all the honey. You can only collect nectar from flowers and make honey
        from honeycombs. Check any space to see if there is a flower or honeycomb.
        There will only ever be one flower or one honeycomb behind each cloud.
      courseD_bee_conditionals9_2018_markdown_instruction: |-
        Collect all of the nectar
        or make all the honey. You can only collect nectar from flowers and make honey
        from honeycombs. Check any space to see if there is a flower or honeycomb.
        There will only ever be one flower or one honeycomb behind each cloud.
      courseD_bee_conditionals_challenge1_markdown_instruction: |-
        Collect all of the
        nectar and make all of the honey. You can only collect nectar from flowers
        and make honey from honeycombs. Check every space to see if there is a flower
        or honeycomb.
      courseD_bee_conditionals_challenge1_2018_markdown_instruction: |-
        Collect all
        of the nectar and make all of the honey. You can only collect nectar from
        flowers and make honey from honeycombs. Check every space to see if there
        is a flower or honeycomb.
      courseD_bee_conditionals_challenge2_markdown_instruction: |-
        Collect all of the
        nectar and make all the honey. You can collect all of the nectar in one flower
        by using the `while nectar > 0` loop.
      courseD_bee_conditionals_challenge2_2018_markdown_instruction: |-
        Collect all
        of the nectar and make all the honey. You can collect all of the nectar in
        one flower by using the `while nectar > 0` loop.
      courseD_bee_conditionals_challenge3_markdown_instruction: |-
        Collect all of the
        nectar and make all the honey. You can collect all of the nectar in one flower
        by using the `while nectar > 0` loop.
      courseD_bee_debugging1_markdown_instruction: |-
        *"These blocks are really bugging
        me!"*\r
        \r
        Fix the error(s) to collect all of the nectar.
      courseD_bee_debugging2_markdown_instruction: |-
        *"Ooh, this one stings!"*\r
        \r
        Fix
        the error(s) to collect all of the nectar.
      courseD_bee_debugging3_markdown_instruction: |-
        *"This puzzle is a bit sticky."*\r
        \r
        Fix
        the error(s) to collect all of the nectar and make all of the honey.
      courseD_bee_debugging4_markdown_instruction: |-
        *"This could be sweet!"*\r
        \r
        Fix
        the error(s) to make all of the honey.
      courseD_bee_debugging5_markdown_instruction: |-
        **Challenge:** *"This puzzle
        is making me loopy!"*\r
        \r
        All of the commands that you need are already
        here...now use your debugging skills to figure out how to solve this puzzle.
      courseD_bee_debugging6_markdown_instruction: |-
        **Challenge:**  Fix the errors
        to collect all of the nectar and make all of the honey.
      courseD_bee_debugging7_markdown_instruction: |-
        *"Such a sticky situation!"*\r
        \r
        Help
        the bee find his mistakes.
      courseD_bee_debugging8_markdown_instruction: |-
        *"So many lovely flowers!"*\r
        \r
        Help
        the bee fix the code to get all the nectar.
      courseD_bee_debugging9_markdown_instruction: |-
        *"It's nectar-topia!"*\r
        \r
        Help
        the bee fix the code to get all the nectar.
      courseD_bee_debugging_challenge1_markdown_instruction: |-
        Watch how the bees
        gets the nectar. Can you use the same kind of pattern to help the bee make
        all of the honey?
      courseD_bee_debugging_challenge1_2018_markdown_instruction: |-
        Watch how the
        bees gets the nectar. Can you use the same kind of pattern to help the bee
        make all of the honey?
      courseD_bee_debugging_challenge1a_markdown_instruction: |-
        *"Buzz buzz! I know
        how to get nectar, now help me make honey!"*\r
        \r
        Watch how the bee gets
        the nectar. Can you use the same kind of pattern to help the bee make all
        of the honey?
      courseD_bee_debugging_challenge2_markdown_instruction: |-
        Watch how the bees
        gets the nectar. Can you use the same kind of pattern to help the bee make
        all of honey?
      courseD_bee_nestedLoops1_markdown_instruction: |-
        *"This is going to **BEE**
        great!"*\r
        \r
        Help the bee collect all of the nectar.
      courseD_bee_nestedLoops1_2018_markdown_instruction: |-
        *"This is going to **BEE**
        great!"*\r
        \r
        Help the bee collect all of the nectar.
      courseD_bee_nestedLoops1a_markdown_instruction: |-
        *"This is going to **BEE**
        great!"*\r
        \r
        Help the bee collect all of the nectar.
      courseD_bee_nestedLoops1a_2018_markdown_instruction: |-
        *"This is going to **BEE**
        great!"*\r
        \r
        Help the bee collect all of the nectar.
      courseD_bee_nestedLoops2_markdown_instruction: |-
        This time, help the bee collect
        all of the nectar using as few blocks as possible.
      courseD_bee_nestedLoops2_2018_markdown_instruction: |-
        This time, help the bee
        collect all of the nectar using as few blocks as possible.
      courseD_bee_nestedLoops2_predict1_markdown_instruction: |-
        This time, help the
        bee collect all of the nectar using as few blocks as possible.
      courseD_bee_nestedLoops2_predict1_2018_markdown_instruction: |-
        This time, help
        the bee collect all of the nectar using as few blocks as possible.
      courseD_bee_nestedLoops3_markdown_instruction: "*\"Can you BEE-lieve all of\nthese
        flowers?\"*\\r\n\\r\nCollect all of the nectar from each flower. "
      courseD_bee_nestedLoops5_markdown_instruction: "Collect all of the nectar from\neach
        flower and make honey at the honeycomb. "
      courseD_bee_nestedLoops6_markdown_instruction: Make all of the nectar.
      courseD_bee_nestedLoops6_2018_markdown_instruction: |-
        *"Must eat sunflower!"*\r
        \r
        Get
        the zombie to the sunflower using only the blocks available.
      courseD_bee_nestedLoops7_markdown_instruction: |-
        **Challenge:** Figure out how
        to get all of the nectar using only the blocks available.
      courseD_bee_nestedLoops7_2018_markdown_instruction: |-
        **Challenge:** Figure
        out how to get all of the nectar using only the blocks available.
      courseD_bee_nestedLoops8_markdown_instruction: "Collect all of the nectar from\neach
        flower and make honey at the honeycomb. "
      courseD_bee_nestedLoops8_2018_markdown_instruction: "Collect all of the nectar\nfrom
        each flower and make honey at the honeycomb. "
      courseD_bee_nestedLoops9_markdown_instruction: Make all of the honey.
      courseD_bee_nestedLoops9_2018_markdown_instruction: Make all of the honey.
      courseD_bee_nestedLoops9_predict2_markdown_instruction: Make all of the honey.
      courseD_bee_nestedLoops9_predict2_2018_markdown_instruction: |-
        Make all of the
        honey.
      courseD_bee_nested_loops_challenge1_markdown_instruction: |-
        Let's hunt for
        treasure - using loops! Help the collector reach at least two piles of treasure
        using only the blocks in your toolbox.
      courseD_bee_nested_loops_challenge2_markdown_instruction: |-
        Let's hunt for
        treasure - using loops! Help the collector reach at least two piles of treasure
        using only the blocks in your toolbox.
      courseD_bounce_events1_markdown_instruction: |-
        Get to the flag! Attach a block
        to the "when left arrow" block and press "Run" to move the player to the
        flag.
      courseD_bounce_events10s_markdown_instruction: |-
        There is now a hoop at the
        top.  \r
        \r
        Attach the `score point` block to the `when ball in goal` event
        and the `score opponent point` block to the `when ball misses hand` event
        to make a game. \r
        \r
        ---\r
        \r
        See how many points you can score before
        your opponent scores twice.
      courseD_bounce_events10s_2018_markdown_instruction: |-
        There is now a hoop at
        the top.  \r
        \r
        Attach the `score point` block to the `when ball in goal`
        event and the `score opponent point` block to the `when ball misses hand`
        event to make a game. \r
        \r
        ---\r
        \r
        See how many points you can score
        before your opponent scores twice.
      courseD_bounce_events11s_markdown_instruction: |-
        Now, you are in control of
        the ball!  Attach the `throw new ball` block in all of the places where the
        game needs a new ball.\r
        \r
        ---\r
        \r
        See how many points you can score
        before your opponent scores twice!
      courseD_bounce_events11s_2018_markdown_instruction: |-
        Now, you are in control
        of the ball!  Attach the `throw new ball` block in all of the places where
        the game needs a new ball.\r
        \r
        ---\r
        \r
        See how many points you can score
        before your opponent scores twice!
      courseD_bounce_events1s_markdown_instruction: |-
        Get the ball to the hoop!   \r
        Attach
        a block to the `when left arrow` event and press "Run" to move the player
        to the net.
      courseD_bounce_events1s_2018_markdown_instruction: |-
        Get the ball to the hoop!   \r
        Attach
        a block to the `when left arrow` event and press "Run" to move the player
        to the net.
      courseD_bounce_events2s_markdown_instruction: |-
        Now, attach a block to the `when
        right event` so that the hand can get to both baskets.
      courseD_bounce_events2s_2018_markdown_instruction: |-
        Now, attach a block to
        the `when right event` so that the hand can get to both baskets.
      courseD_bounce_events5s_markdown_instruction: |-
        We're going to send a basketball
        flying down towards the hand.  Attach a block to the `when ball hits hand`
        event to ensure the ball reaches the basket.
      courseD_bounce_events5s_2018_markdown_instruction: |-
        We're going to send a
        basketball flying down towards the hand.  Attach a block to the `when ball
        hits hand` event to ensure the ball reaches the basket.
      courseD_bounce_events6s_markdown_instruction: |-
        Now the basket is at the top.  \r
        \r
        Attach
        code to make the ball bounce when it hits the wall so you can solve this puzzle.
      courseD_bounce_events6s_2018_markdown_instruction: |-
        Now the basket is at the
        top.  \r
        \r
        Attach code to make the ball bounce when it hits the wall so
        you can solve this puzzle.
      courseD_bounce_events7s_markdown_instruction: |-
        Attach sound blocks to make
        the net swish when you hit the basket and have the whistle blow when the ball
        misses your hand.  \r
        \r
        ---\r
        \r
        Bounce the ball until it hits the finish
        target.
      courseD_bounce_events7s_2018_markdown_instruction: |-
        Attach sound blocks to
        make the net swish when you hit the basket and have the whistle blow when
        the ball misses your hand.  \r
        \r
        ---\r
        \r
        Bounce the ball until it hits
        the finish target.
      courseD_collector_debugging1_markdown_instruction: |-
        *"Oh no! I see a problem."*\r
        \r
        Fix
        the error(s) to collect all of the treasure.
      courseD_collector_debugging10_predict1_markdown_instruction: |-
        *"It's treasure
        island!"*\r
        \r
        Help Laurel fix the code to get all the treasure.
      courseD_collector_debugging10_predict1_2018_markdown_instruction: |-
        *"It's
        treasure island!"*\r
        \r
        Help Laurel fix the code to get all the treasure.
      courseD_collector_debugging1_2018_markdown_instruction: |-
        *"Oh no! I see a
        problem."*\r
        \r
        Fix the error(s) to collect all of the treasure.
      courseD_collector_debugging1a_markdown_instruction: |-
        *"Oh no! I see a problem."*\r
        \r
        Fix
        the error(s) to collect all of the treasure.
      courseD_collector_debugging1a_2018_markdown_instruction: |-
        *"Oh no! I see a
        problem."*\r
        \r
        Fix the error(s) to collect all of the treasure.
      courseD_collector_debugging2_markdown_instruction: |-
        *"You can do this!"*\r
        \r
        Fix
        the error(s) to collect all of the treasure.
      courseD_collector_debugging2_2018_markdown_instruction: |-
        *"You can do this!"*\r
        \r
        Fix
        the error(s) to collect all of the treasure.
      courseD_collector_debugging2a_markdown_instruction: |-
        *"You can do this!"*\r
        \r
        Fix
        the error(s) to collect all of the treasure.
      courseD_collector_debugging2a_2018_markdown_instruction: |-
        *"You can do this!"*\r
        \r
        Fix
        the error(s) to collect all of the treasure.
      courseD_collector_debugging3_markdown_instruction: |-
        *"Be persistent and you
        will figure this out."*\r
        \r
        Fix the error(s) to collect all of the treasure.
      courseD_collector_debugging3_2018_markdown_instruction: |-
        *"Be persistent and
        you will figure this out."*\r
        \r
        Fix the error(s) to collect all of the
        treasure.
      courseD_collector_debugging3a_markdown_instruction: |-
        *"Be persistent and you
        will figure this out."*\r
        \r
        Fix the error(s) to collect all of the treasure.
      courseD_collector_debugging3a_2018_markdown_instruction: |-
        *"Be persistent
        and you will figure this out."*\r
        \r
        Fix the error(s) to collect all of
        the treasure.
      courseD_collector_debugging4_markdown_instruction: |-
        *"Don't get frustrated.
        You can do it!"*\r
        \r
        Fix the error(s) to collect all of the treasure.
      courseD_collector_debugging4_2018_markdown_instruction: |-
        *"Don't get frustrated.
        You can do it!"*\r
        \r
        Fix the error(s) to collect all of the treasure.
      courseD_collector_debugging4a_markdown_instruction: |-
        *"Don't get frustrated.
        You can do it!"*\r
        \r
        Fix the error(s) to collect all of the treasure.
      courseD_collector_debugging4a_2018_markdown_instruction: |-
        *"Don't get frustrated.
        You can do it!"*\r
        \r
        Fix the error(s) to collect all of the treasure.
      courseD_collector_debugging5_markdown_instruction: |-
        *"This puzzle is making
        me loopy!"*\r
        \r
        All of the commands that you need are already here...now
        use your debugging skills to figure out how to solve this puzzle.
      courseD_collector_debugging5_2018_markdown_instruction: |-
        *"This puzzle is
        making me loopy!"*\r
        \r
        All of the commands that you need are already here...now
        use your debugging skills to figure out how to solve this puzzle.
      courseD_collector_debugging5a_markdown_instruction: |-
        *"This puzzle is making
        me loopy!"*\r
        \r
        All of the commands that you need are already here...now
        use your debugging skills to figure out how to solve this puzzle.
      courseD_collector_debugging5a_2018_markdown_instruction: |-
        *"This puzzle is
        making me loopy!"*\r
        \r
        All of the commands that you need are already here...now
        use your debugging skills to figure out how to solve this puzzle.
      courseD_collector_debugging6_markdown_instruction: |-
        **Challenge:**  All of
        the blocks that you need are already here...Now use your debugging skills
        to fix the errors and collect all of the treasure.
      courseD_collector_debugging6_2018_markdown_instruction: |-
        **Challenge:**  All
        of the blocks that you need are already here...Now use your debugging skills
        to fix the errors and collect all of the treasure.
      courseD_collector_debugging6a_markdown_instruction: |-
        Challenge: Use the code
        in the work area to get at least **6** pieces of treasure!
      courseD_collector_debugging6a_2018_markdown_instruction: |-
        Challenge: Use the
        code in the work area to get at least **6** pieces of treasure!
      courseD_collector_debugging7_markdown_instruction: |-
        **Challenge**: All of the
        commands that you need are already here...now use your debugging skills to
        figure out how to solve this puzzle.
      courseD_collector_debugging8_markdown_instruction: |-
        *"So much treasure!"*\r
        \r
        Help
        Laurel fix the code to get all the treasure.
      courseD_collector_debugging8_2018_markdown_instruction: |-
        *"So much treasure!"*\r
        \r
        Help
        Laurel fix the code to get all the treasure.
      courseD_collector_debugging8a_markdown_instruction: |-
        *"So much treasure!"*\r
        \r
        Help
        Laurel fix the code to get all the treasure.
      courseD_collector_debugging8a_2018_markdown_instruction: |-
        *"So much treasure!"*\r
        \r
        Help
        Laurel fix the code to get all the treasure.
      courseD_collector_debugging9_markdown_instruction: |-
        *"It's treasure island!"*\r
        \r
        Help
        Laurel fix the code to get all the treasure.
      courseD_collector_debugging9_2018_markdown_instruction: |-
        *"It's treasure
        island!"*\r
        \r
        Help Laurel fix the code to get all the treasure.
      courseD_collector_debugging9a_markdown_instruction: |-
        *"It's treasure island!"*\r
        \r
        Help
        Laurel fix the code to get all the treasure.
      courseD_collector_debugging9a_2018_markdown_instruction: |-
        *"It's treasure
        island!"*\r
        \r
        Help Laurel fix the code to get all the treasure.
      courseD_collector_nested_loops_challenge2_markdown_instruction: |-
        *"Let's
        hunt for treasure - using loops!"* \r
        \r
        Help the collector reach at least
        two piles of treasure using only the blocks in your toolbox. It is possible
        to collect all 4.
      courseD_collector_nested_loops_challenge2_2018_markdown_instruction: |-
        *"Let's
        hunt for treasure - using loops!"* \r
        \r
        Help the collector reach at least
        two piles of treasure using only the blocks in your toolbox. It is possible
        to collect all 4.
      courseD_collector_nested_loops_challenge2a_markdown_instruction: |-
        *"Let's
        hunt for treasure - using loops!"* \r
        \r
        Help Laurel collect at least two
        piles of treasure using only the blocks in your toolbox. It is possible to
        collect all 4.
      courseD_collector_ramp10_markdown_instruction: |-
        Walk Laurel around this square
        collecting the treasure as you find it.
      courseD_collector_ramp8_markdown_instruction: |
        This puzzle is a lot like the
        last one, but now it stars Laurel the Adventurer!\r
        ___\r
        \r
        Take the same
        path as before, but this time, use a repeat loop to collect treasure when
        you get to it.\r
      courseD_collector_ramp9_markdown_instruction: |-
        Now there's more treasure.  Can
        you help Laurel collect it all?
      courseD_collector_until_challenge1_markdown_instruction: |-
        Watch how the bees
        gets the nectar. Can you use the same kind of pattern to help the bee make
        all of honey?
      courseD_debugging_1_markdown_instruction: |-
        *"These blocks are really bugging
        me!"*\r
        \r
        Fix the error(s) to collect all of the nectar.
      courseD_debugging_2_markdown_instruction: |-
        *"Ooh, this one stings!"*\r
        \r
        Fix
        the error(s) to collect all of the nectar.
      courseD_debugging_3_markdown_instruction: |-
        *"These blocks are really bugging
        me."*\r
        \r
        Fix the error(s) to collect all of the nectar and make all of
        the honey.
      courseD_debugging_4_markdown_instruction: |-
        *"This could be sweet!"*\r
        \r
        Fix
        the error(s) to make all of the honey.
      courseD_debugging_5_markdown_instruction: |-
        **Challenge:** *"This puzzle is
        making me loopy!"*\r
        \r
        All of the commands that you need are already here...now
        use your debugging skills to figure out how to solve this puzzle.
      courseD_debugging_6_markdown_instruction: |-
        **Challenge:**  Fix the errors to
        collect all of the nectar and make all of the honey.
      courseD_farmer_condLoops1_markdown_instruction: |-
        *"Corn you help me harvest
        today?"*\r
        \r
        Help the harvester check her row of corn to see if anything
        is ready to pick.  Use conditionals to look at each sprout.  Every stalk will
        have either **0 or 1** pieces of corn ready to harvest.
      courseD_farmer_condLoops1_2018_markdown_instruction: |-
        *"Corn you help me harvest
        today?"*\r
        \r
        Help the harvester check her row of corn to see if anything
        is ready to pick.  Use conditionals to look at each sprout.  Every stalk will
        have either **0 or 1** pieces of corn ready to harvest.
      courseD_farmer_condLoops2_markdown_instruction: |-
        *"Lettuce collect both crops
        from this row!"*\r
        \r
        This garden is all mixed up, it has both **corn and
        lettuce**!  \r
        \r
        Help the harvester pick the items that are ready for harvesting.  Each
        plant will have either **one** corn or **one** lettuce.
      courseD_farmer_condLoops2_2018_markdown_instruction: |-
        *"Lettuce collect both
        crops from this row!"*\r
        \r
        This garden is all mixed up, it has both **corn
        and lettuce**!  \r
        \r
        Help the harvester pick the items that are ready for
        harvesting.  Each plant will have either **one** corn or **one** lettuce.
      courseD_farmer_condLoops3_markdown_instruction: |-
        *"Corn, lettuce, AND pumpkins!
        Help me harvest them all."*\r
        \r
        Each plant will have either one piece
        of corn, one head of lettuce, or one pumpkin.
      courseD_farmer_condLoops3_2018_markdown_instruction: |-
        *"Corn, lettuce, AND
        pumpkins! Help me harvest them all."*\r
        \r
        Each plant will have either
        one piece of corn, one head of lettuce, or one pumpkin.
      courseD_farmer_condLoops4_markdown_instruction: |-
        *"Gosh! Now the lettuce is
        growing in clusters!"*  \r
        \r
        The harvester wants to pick everything from
        her lettuce garden. Each plant will now have more than one head of lettuce
        on it, so the farmer will need to keep picking while there is still lettuce
        growing.  \r
        \r
        ##### (Remember: This garden only has lettuce!)
      courseD_farmer_condLoops4_2018_markdown_instruction: |-
        *"Gosh! Now the lettuce
        is growing in clusters!"*  \r
        \r
        The harvester wants to pick everything
        from her lettuce garden. Each plant will now have more than one head of lettuce
        on it, so the harvester will need to keep picking while there is still lettuce
        growing.  \r
        \r
        ##### (Remember: This garden only has lettuce!)
      courseD_farmer_condLoops4a_markdown_instruction: |-
        *"Gosh! Now the crops are
        growing in clusters!"*  \r
        \r
        Help the farmer pick all of the lettuce in
        each cluster before moving on to the next bunch. Keep it up until you get
        to the pumpkin!
      courseD_farmer_condLoops5_markdown_instruction: |-
        *"What a bountiful crop!"*\r
        \r
        This
        field has clusters of corn and lettuce growing together -- with one pumpkin
        at the end.  Can you harvest everything?
      courseD_farmer_condLoops5_2018_markdown_instruction: |-
        *"What a bountiful crop!"*\r
        \r
        This
        field has clusters of corn and lettuce growing together -- with one pumpkin
        at the end.  Can you harvest everything?
      courseD_farmer_condLoops6_markdown_instruction: |-
        *"Let's take this one step
        further!"*\r
        \r
        Can you figure out how to pick the pumpkin?  Make sure
        to collect all of the corn along the way!
      courseD_farmer_condLoops6_2018_markdown_instruction: |-
        *"Let's take this one
        step further!"*\r
        \r
        Can you figure out how to pick the pumpkin?  Make
        sure to collect all of the corn along the way!
      courseD_farmer_condLoops7_markdown_instruction: |-
        **Challenge:** Collect all
        of the corn and lettuce, then pick the pumpkin.
      courseD_farmer_condLoops7_2018_markdown_instruction: |-
        **Challenge:** Collect
        all of the corn and lettuce, then pick the pumpkin.
      courseD_farmer_condLoops8_markdown_instruction: |-
        Collect all of the corn and
        lettuce, then pick the pumpkin.
      courseD_farmer_condLoops8_2018_markdown_instruction: |-
        Collect all of the corn
        and lettuce, then pick the pumpkin.
      courseD_farmer_condLoops9_markdown_instruction: |-
        Collect all of the corn and
        lettuce, then pick the pumpkin.
      courseD_farmer_condLoops9_2018_markdown_instruction: |-
        Collect all of the corn
        and lettuce, then pick the pumpkin.
      courseD_farmer_condLoops9_predict1_markdown_instruction: |-
        Collect all of the
        corn and lettuce, then pick the pumpkin.
      courseD_farmer_condLoops9_predict1_2018_markdown_instruction: |-
        Collect all
        of the corn and lettuce, then pick the pumpkin.
      courseD_farmer_condLoops_challenge1_markdown_instruction: |-
        The pumpkins mark
        the place where you should `turn right`. Otherwise keep going forward, but
        remember to collect all of the lettuce or corn along the way. \r
        \r
        **Each
        hidden crop has only one corn or lettuce.**
      courseD_farmer_condLoops_challenge1_2018_markdown_instruction: |-
        The pumpkins
        mark the place where you should `turn right`. Otherwise keep going forward,
        but remember to collect all of the lettuce or corn along the way. \r
        \r
        **Each
        hidden crop has only one corn or lettuce.**
      courseD_farmer_condLoops_challenge2_markdown_instruction: |-
        *"It's a very
        varied vegetable maze!"* \r
        \r
        Turn right at pumpkins, turn left at lettuce.
        Collect everything to complete the level.
      courseD_farmer_condLoops_challenge2_2018_markdown_instruction: |-
        *"It's a
        very varied vegetable maze!"* \r
        \r
        Turn right at pumpkins, turn left at
        lettuce. Collect everything to complete the level.
      courseD_farmer_condLoops_challenge2_clone_markdown_instruction: |-
        It's a vegetable
        maze. Turn right at pumpkins, turn left at the lettuce. Collect everything
        to complete the level.
      courseD_farmer_conditionals1_markdown_instruction: |-
        *"Hi, I'm a farmer. I
        need your help to flatten the field on my farm so it's ready for planting!"*  \r
        \r
        Move
        to the pile of dirt and use the `remove` block to remove it.
      courseD_farmer_conditionals3_markdown_instruction: |-
        *"Move to the pile of
        dirt and tell me how many shovelfuls to remove."*\r
        \r
        Use as few blocks
        as possible to solve this puzzle.
      courseD_farmer_conditionals4_markdown_instruction: |-
        *"I don't know how much
        dirt is in this pile!"*\r
        \r
        Help the farmer remove this entire pile using
        a `while` loop.
      courseD_farmer_conditionals6_markdown_instruction: |-
        Look at all of those holes!  Each
        one needs a different amount of dirt.   \r
        \r
        You can use the `while` loop
        to easily fill them all!
      courseD_farmer_conditionals8_markdown_instruction: "**Challenge:** Fill all\nof
        these holes using as few blocks as possible. "
      courseD_farmer_until_challenge2_markdown_instruction: |-
        Use `If/Else` blocks
        to follow the curvy path. At each corner, use the `remove 1` block in a loop
        to clear the piles.
      courseD_farmer_until_challenge2_2018_markdown_instruction: |-
        Use `If/Else` blocks
        to follow the curvy path. At each corner, use the `remove 1` block in a loop
        to clear the piles.
      courseD_farmer_while1_markdown_instruction: |-
        *"Hi, I'm a farmer. I need your
        help to flatten the field on my farm so it's ready for planting!"*  \r
        \r
        Move
        to the pile of dirt and use the `remove` block to remove it.
      courseD_farmer_while1_2018_markdown_instruction: |-
        *"Hi, I'm a farmer. I need
        your help to flatten the field on my farm so it's ready for planting!"*  \r
        \r
        Move
        to the pile of dirt and use the `remove` block to remove it.
      courseD_farmer_while3_markdown_instruction: |-
        *"Move to the pile of dirt and
        tell me how many shovelfuls to remove."*\r
        \r
        Use as few blocks as possible
        to solve this puzzle.
      courseD_farmer_while3_2018_markdown_instruction: |-
        *"Move to the pile of dirt
        and tell me how many shovelfuls to remove."*\r
        \r
        Use as few blocks as
        possible to solve this puzzle.
      courseD_farmer_while4_markdown_instruction: |-
        *"I don't know how much dirt
        is in this pile!"*\r
        \r
        Help the farmer remove this entire pile using a
        `while` loop.
      courseD_farmer_while4_2018_markdown_instruction: |-
        *"I don't know how much
        dirt is in this pile!"*\r
        \r
        Help the farmer remove this entire pile using
        a `while` loop.
      courseD_farmer_while4_predict1_markdown_instruction: |-
        *"I don't know how
        much dirt is in this pile!"*\r
        \r
        Help the farmer remove this entire pile
        using a `while` loop.
      courseD_farmer_while4_predict1_2018_markdown_instruction: |-
        *"I don't know
        how much dirt is in this pile!"*\r
        \r
        Help the farmer remove this entire
        pile using a `while` loop.
      courseD_farmer_while6_markdown_instruction: |-
        Look at all of those holes!  Each
        one needs a different amount of dirt.   \r
        \r
        You can use the `while` loop
        to easily fill them all!
      courseD_farmer_while6_2018_markdown_instruction: |-
        Look at all of those holes!  Each
        one needs a different amount of dirt.   \r
        \r
        You can use the `while` loop
        to easily fill them all!
      courseD_farmer_while8_markdown_instruction: "**Challenge:** Fill all of these\nholes
        using as few blocks as possible. "
      courseD_farmer_while8_2018_markdown_instruction: "**Challenge:** Fill all of\nthese
        holes using as few blocks as possible. "
      courseD_farmer_while_challenge1_markdown_instruction: |-
        Fill all of the holes
        and remove all of the piles.
      courseD_farmer_while_challenge1_2018_markdown_instruction: |-
        Fill all of the
        holes and remove all of the piles.
      courseD_farmer_while_challenge2_markdown_instruction: |-
        Fill all of the holes
        and remove all of the piles.
      courseD_farmer_while_challenge2_2018_markdown_instruction: |-
        Fill all of the
        holes and remove all of the piles.
      courseD_harvester_nested_loops_challenge1-broken_markdown_instruction: |-
        *"I
        need some help on the farm! Help me harvest this corn using only the blocks
        in your toolbox."*
      courseD_harvester_nested_loops_challenge1_markdown_instruction: |-
        *"I need
        some help on the farm! Help me harvest this corn using only the blocks in
        your toolbox."*
      courseD_harvester_nested_loops_challenge1_2018_markdown_instruction: |-
        *"I
        need some help on the farm! Help me harvest this corn using only the blocks
        in your toolbox."*
      courseD_iceage_loops1_markdown_instruction: |-
        Help Scrat across the slippery
        ice to get to the acorn!
      courseD_iceage_loops10_markdown_instruction: |-
        Help Scrat get all the way over
        to the acorn!
      courseD_iceage_loops11_markdown_instruction: Help Scrat get to the acorn!
      courseD_iceage_loops12_markdown_instruction: |-
        Get to the acorn any way you
        can!
      courseD_iceage_loops2_markdown_instruction: |-
        Use a <xml><block type="maze_turn">\r
            <title
        name="DIR">turnLeft</title>\r
          </block></xml> block to get to the acorn!
      courseD_iceage_loops3_markdown_instruction: |-
        Can you get to the acorn with
        just one <xml><block type="maze_moveForward"/></xml> block? Try using a
        loop!
      courseD_iceage_loops4_markdown_instruction: |-
        Add one more block to get Scrat
        all the way to the acorn!
      courseD_iceage_loops6_markdown_instruction: |-
        Can you add a loop to get to the
        acorn?
      courseD_iceage_loops7_markdown_instruction: 'Scrat really wants that acorn!

'
      courseD_iceage_loops8_markdown_instruction: 'Can you fix this code? '
      courseD_iceage_loops9_markdown_instruction: |-
        The acorn is so far away! Can
        you use loops to help Scrat get there?
      courseD_maze_loops_challenge1_markdown_instruction: |-
        Let's hunt for treasure
        - using loops! Help the collector reach at least two piles of treasure using
        only the blocks in your toolbox.
      courseD_maze_nestedLoops3_markdown_instruction: |-
        *"Zombie hungry!"*\r
        \r
        Get
        the zombie to the sunflower using the fewest number of blocks possible.
      courseD_maze_nestedLoops3_2018_markdown_instruction: |-
        *"Zombie hungry!"*\r
        \r
        Get
        the zombie to the sunflower using the fewest number of blocks possible.
      courseD_maze_nestedLoops4_markdown_instruction: "Get the zombie to the sunflower\nusing
        the fewest blocks possible!  "
      courseD_maze_nestedLoops4_2018_markdown_instruction: "Get the zombie to the\nsunflower
        using the fewest blocks possible!  "
      courseD_maze_nestedLoops6_markdown_instruction: |-
        *"Must eat sunflower!"*\r
        \r
        Get
        the zombie to the sunflower using only the blocks available.
      courseD_maze_nestedLoops6_2018_markdown_instruction: |-
        *"Must eat sunflower!"*\r
        \r
        Get
        the zombie to the sunflower using only the blocks available.
      courseD_maze_ramp1_markdown_instruction: |-
        For this puzzle, snap all of the
        blocks together and click "Run" to watch it go!
      courseD_maze_ramp1_2018_markdown_instruction: |-
        For this puzzle, snap all of
        the blocks together and click "Run" to watch it go!
      courseD_maze_ramp2_markdown_instruction: |-
        Drag an extra `move forward` block
        out of the toolbox, then attach all blocks to `when run` to finish your code.
      courseD_maze_ramp2_2018_markdown_instruction: |-
        Drag an extra `move forward`
        block out of the toolbox, then attach all blocks to `when run` to finish your
        code.
      courseD_maze_ramp3_markdown_instruction: |-
        *"This pig is ruffling my feathers."*\r
        \r
        There
        is one extra block that is going to cause the bird to crash.  \r
        Throw it
        away by removing it from the other blocks and dragging it back to the toolbox.
      courseD_maze_ramp3_2018_markdown_instruction: |-
        *"This pig is ruffling my feathers."*\r
        \r
        There
        is one extra block that is going to cause the bird to crash.  \r
        Throw it
        away by removing it from the other blocks and dragging it back to the toolbox.
      courseD_maze_ramp4_markdown_instruction: |-
        *"Trace the path and lead me to
        the silly pig."* \r
        \r
        Avoid TNT or feathers will fly!
      courseD_maze_ramp4_2018_markdown_instruction: |-
        *"Trace the path and lead me
        to the silly pig."* \r
        \r
        Avoid TNT or feathers will fly!
      courseD_maze_ramp5_markdown_instruction: |-
        *"Follow this path to get me to
        the pig!"*\r
        \r
        Avoid the TNT.
      courseD_maze_ramp5_2018_markdown_instruction: |-
        *"Follow this path to get me
        to the pig!"*\r
        \r
        Avoid the TNT.
      courseD_maze_ramp5a_markdown_instruction: |-
        Pay attention to the sequence and
        see if you can figure out how to get to that pig!
      courseD_maze_ramp5a_2018_markdown_instruction: |-
        Pay attention to the sequence
        and see if you can figure out how to get to that pig!
      courseD_maze_ramp5b_markdown_instruction: |-
        **Challenge:** Navigate this maze
        to help the bird find the pig!
      courseD_maze_ramp5b_2018_markdown_instruction: |-
        **Challenge:** Navigate this
        maze to help the bird find the pig!
      courseD_maze_ramp5c_markdown_instruction: Help the bird get to the pig.
      courseD_maze_ramp5c_2018_markdown_instruction: Help the bird get to the pig.
      courseD_maze_ramp5d_markdown_instruction: Get the bird to the pig.
      courseD_maze_ramp5d_2018_markdown_instruction: Get the bird to the pig.
      courseD_maze_ramp6_markdown_instruction: |-
        *"Keep calm and help me find the
        bad pig. Otherwise I might get angry!"*\r
        \r
        When you have several of the
        same block in a row, try using a `repeat` loop, instead.  This will do the
        same thing with less code!
      courseD_maze_ramp6a_markdown_instruction: |-
        *"Keep calm and help me find the
        bad pig. Otherwise I might get angry!"*\r
        \r
        When you have several of the
        same blocks in a row, try using a `repeat` loop, instead.  This will do the
        same thing with less code!
      courseD_maze_ramp7_markdown_instruction: |-
        *"It's time to get angry!"*  \r
        \r
        \r
        Use
        what you've learned to get the bird to the pig!
      courseD_maze_until10_markdown_instruction: Help the zombie get to the sunflower.
      courseD_maze_until10_2018_markdown_instruction: |-
        Help the zombie get to the
        sunflower.
      courseD_maze_until10_predict2_markdown_instruction: |-
        Help the zombie get to
        the sunflower.
      courseD_maze_until10_predict2_2018_markdown_instruction: |-
        Help the zombie get
        to the sunflower.
      courseD_maze_until2_markdown_instruction: |-
        Now, use the `repeat until` loop
        to do the same thing without specifying how many times to move forward and
        turn.
      courseD_maze_until4_markdown_instruction: |-
        *"Dear person. Me zombie. Me hungry.
        Must... get... to sunflower..."*\r
        \r
        Can you get the zombie to the sunflower
        using only the blocks that are available?
      courseD_maze_until4_2018_markdown_instruction: |-
        *"Dear person. Me zombie.
        Me hungry. Must... get... to sunflower..."*\r
        \r
        Can you get the zombie
        to the sunflower using only the blocks that are available?
      courseD_maze_until5_markdown_instruction: |-
        Use the `if` block to help the zombie
        decide when to turn, then get the zombie to the sunflower.
      courseD_maze_until5_2018_markdown_instruction: |-
        Use the `if` block to help
        the zombie decide when to turn, then get the zombie to the sunflower.
      courseD_maze_until6_markdown_instruction: Help the zombie get to the sunflower.
      courseD_maze_until6_2018_markdown_instruction: |-
        Help the zombie get to the
        sunflower.
      courseD_maze_until7_markdown_instruction: Help the zombie get to the sunflower.
      courseD_maze_until7_2018_markdown_instruction: |-
        Help the zombie get to the
        sunflower.
      courseD_maze_until8_markdown_instruction: Help the zombie get to the sunflower.
      courseD_maze_until8_2018_markdown_instruction: |-
        Help the zombie get to the
        sunflower.
      courseD_maze_until9_markdown_instruction: |-
        **Challenge:** Avoid the chompers
        and help the zombie get to the sunflower.
      courseD_maze_until9_2018_markdown_instruction: |-
        **Challenge:** Avoid the chompers
        and help the zombie get to the sunflower.
      courseD_maze_until_challenge_markdown_instruction: |-
        No hints, just challenge.
        Get the zombie to the sunflower.\r
        Markdown instructions
      courseD_maze_until_challenge1-delete-this-copy_markdown_instruction: |-
        No hints,
        just challenge. Get the zombie to the sunflower.\r
        Markdown instructions
      courseD_maze_until_challenge1_markdown_instruction: |-
        No hints, just challenge.
        Get the zombie to the sunflower.
      courseD_maze_until_challenge1_2018_markdown_instruction: |-
        No hints, just challenge.
        Get the zombie to the sunflower.
      courseD_maze_until_challenge2_markdown_instruction: |-
        No hints, just challenge.
        Get the zombie to the sunflower.\r
        Markdown instructions
      courseD_pixelation_markdown_instruction: |-
        # Make your own image of any size\r
        \r
        ![](https://images.code.org/01c15fed4f1a2c6c3af531edc35e736e-image-1439596066108.png)\r
        ![](https://images.code.org/24efcaa184d1fc852f37c32911b3b87c-image-1439596070178.png)\r
        ![](https://images.code.org/c9a5d0fd5ba445b7f6b5744e08b50e49-image-1439596071878.png)\r
        ![](https://images.code.org/f14e1b8dd722b0ca5bc54fa96b34f2eb-image-1439596074236.png)\r
        ![](https://images.code.org/fe938c0c16453b9d461b4023098079df-image-1439596075744.png)\r
        ![](https://images.code.org/02c88a7da51289b2f2d1f64bd8c97b28-image-1439596077514.png)\r
        ![](https://images.code.org/309e3157dcfd91956181007f483f8e58-image-1439596079084.png)\r
        \r
        \r
        **Directions:**\r
        \r
        *
        Encode an image of anything you like using `binary`. Type 0s and 1s below
        to create an image.\r
        * You might want to do some planning and sketching
        with graph paper first.\r
        * Get creative! What kind of drawing can you create?
      courseD_playLab_cond1_markdown_instruction: |-
        To start our game, Pirate Pegleg
        (actor 1) needs to be able to get around in all directions.   Connect the
        blocks to the correct events to get Pegleg moving.  \r
        \r
        ---\r
        Help Pegleg
        gather the flags to solve this puzzle.
      courseD_playLab_cond1_2018_markdown_instruction: |-
        To start our game, Pirate
        Pegleg (actor 1) needs to be able to get around in all directions.   Connect
        the blocks to the correct events to get Pegleg moving.  \r
        \r
        ---\r
        Help
        Pegleg gather the flags to solve this puzzle.
      courseD_playLab_cond2_markdown_instruction: "Time to add points!  \\r\n\\r\nEdit\nthe
        code to give Pegleg (actor 1) a point when he makes it to the dragon (actor\n2). "
      courseD_playLab_cond2_2018_markdown_instruction: "Time to add points!  \\r\n\\r\nEdit\nthe
        code to give Pegleg (actor 1) a point when he makes it to the dragon (actor\n2). "
      courseD_playLab_cond3_markdown_instruction: "Use a `repeat forever` loop to\nmake
        the dragon (actor 2) change between random emotions every second.  "
      courseD_playLab_cond3_2018_markdown_instruction: "Use a `repeat forever` loop\nto
        make the dragon (actor 2) change between random emotions every second.  "
      courseD_playLab_cond3a_markdown_instruction: |-
        It's time to use what we've
        learned about conditionals to make this game amazing. \r
        \r
        Add code so
        that when Pegleg gets to the dragon, he gets two points *if* the dragon is
        happy. Otherwise, he should get only one point added to his score.
      courseD_playLab_cond3a_2018_markdown_instruction: |-
        It's time to use what we've
        learned about conditionals to make this game amazing. \r
        \r
        Add code so
        that when Pegleg gets to the dragon, he gets two points *if* the dragon is
        happy. Otherwise, he should get only one point added to his score.
      courseD_playLab_cond3b_markdown_instruction: |-
        Use a `repeat forever` loop to
        make the dragon (actor 2) move up and down forever! Add a `wait for 1 second`
        block in between the `move up` and `move down` blocks for the dragon.
      courseD_playLab_cond4_markdown_instruction: |-
        This is about to get interesting!\r
        \r
        Add
        some code so that the ninja (actor 3) starts chasing Pegleg as soon as the
        game begins.  End the game as a loss if the ninja catches him.
      courseD_playLab_cond4_2018_markdown_instruction: |-
        This is about to get interesting!\r
        \r
        Add
        some code so that the ninja (actor 3) starts chasing Pegleg as soon as the
        game begins.  End the game as a loss if the ninja catches him.
      courseD_playLab_cond5_markdown_instruction: |-
        Now we need a way to win.\r
        \r
        Add
        a `repeat forever` loop that continuously checks **if** the score is greater
        than 5, then ends the game as a **win** when it is.
      courseD_playLab_cond5_2018_markdown_instruction: |-
        Now we need a way to win.\r
        \r
        Add
        a `repeat forever` loop that continuously checks **if** the score is greater
        than 5, then ends the game as a **win** when it is.
      courseD_playLab_cond6_markdown_instruction: "Wow, this game is hard to win!\\r\n\\r\nLet's\ncustomize
        this game to make it more fun.  This challenge has two parts:\\r\n___\\r\n\\r\n1)
        \ Slow\ndown the ninja (actor 3) before you set him to chase the pirate (actor
        1).  \\r\n\\r\n2)  Use\na `repeat forever` loop to check to see if the pirate
        is in the \"safe zone\"\nbeneath the line of octopuses (greater than 225 pixels
        down).  If he is, set\nthe ninja to **flee** the pirate.  Otherwise, set the
        ninja to **chase** the\npirate.  "
      courseD_playLab_cond6_2018_markdown_instruction: "Wow, this game is hard to\nwin!\\r\n\\r\nLet's
        customize this game to make it more fun.  This challenge\nhas two parts:\\r\n___\\r\n\\r\n1)
        \ Slow down the ninja (actor 3) before you\nset him to chase the pirate (actor
        1).  \\r\n\\r\n2)  Use a `repeat forever`\nloop to check to see if the pirate
        is in the \"safe zone\" beneath the line\nof octopuses (greater than 225 pixels
        down).  If he is, set the ninja to **flee**\nthe pirate.  Otherwise, set the
        ninja to **chase** the pirate.  "
      courseD_playLab_cond6a_markdown_instruction: |-
        We don't want the pirate to
        stay in the "safe zone" too long!  \r
        \r
        Add code to the `if` statement
        below so that if the pirate (actor 1) is in the safe zone, the program will
        wait one second, then deduct a point as long as he stays beneath the octopus
        line.
      courseD_playLab_cond6a_2018_markdown_instruction: |-
        We don't want the pirate
        to stay in the "safe zone" too long!  \r
        \r
        Add code to the `if` statement
        below so that if the pirate (actor 1) is in the safe zone, the program will
        wait one second, then deduct a point as long as he stays beneath the octopus
        line.
      courseD_playLab_cond6cloneForTest_markdown_instruction: Can we make this work?
      courseD_scrat_ramp1_markdown_instruction: |-
        For this puzzle, snap all of the
        blocks together and click "Run" to watch it go!
      courseD_scrat_ramp1_2018_markdown_instruction: |-
        For this puzzle, snap all of
        the blocks together and click "Run" to watch it go!
      courseD_scrat_ramp2_markdown_instruction: |-
        Drag an extra `move forward` block
        out of the toolbox, then attach all blocks to `when run` to finish your code.
      courseD_scrat_ramp2_2018_markdown_instruction: |-
        Drag an extra `move forward`
        block out of the toolbox, then attach all blocks to `when run` to finish your
        code.
      courseD_scrat_ramp3_markdown_instruction: |-
        There is one extra block that is
        going to cause Scrat to crash.  \r
        Throw it away by disconnecting it from
        the other blocks and dragging it back to the toolbox.
      courseD_scrat_ramp3_2018_markdown_instruction: |-
        There is one extra block that
        is going to cause Scrat to crash.  \r
        Throw it away by disconnecting it from
        the other blocks and dragging it back to the toolbox.
      courseD_scrat_ramp4_markdown_instruction: |-
        Avoid the cracked ice to keep Scrat
        safe!
      courseD_scrat_ramp4_2018_markdown_instruction: |-
        Avoid the cracked ice to keep
        Scrat safe!
      courseD_scrat_ramp5_markdown_instruction: Avoid the cracked ice!
      courseD_scrat_ramp5_2018_markdown_instruction: Avoid the cracked ice!
      courseD_scrat_ramp6_markdown_instruction: |-
        Help Scrat get to the acorn using
        a loop!
      courseD_scrat_ramp6_2018_markdown_instruction: |-
        Help Scrat get to the acorn
        using a loop!
      courseD_scrat_ramp7_markdown_instruction: Help Scrat get to the acorn!
      courseD_scrat_ramp7_2018_markdown_instruction: Help Scrat get to the acorn!
      courseD_scrat_ramp8_markdown_instruction: |-
        **Challenge:** Use what you've
        learned to get Scrat to the acorn!
      courseD_scrat_ramp8_2018_markdown_instruction: |-
        **Challenge:** Use what you've
        learned to get Scrat to the acorn!
      courseE_artist_concept1_markdown_instruction: |-
        Recreate this image. \r
        \r
        -
        The hexagons have sides of 50 pixels\r
        - The hexagons are 100 pixels apart\r
        -
        The pen widths of the hexagons are 1 pixel, 4 pixels, and 8 pixels.
      courseE_artist_concept1_2018_markdown_instruction: |-
        Recreate this image. \r
        \r
        -
        The hexagons have sides of 50 pixels\r
        - The hexagons are 100 pixels apart\r
        -
        The pen widths of the hexagons are 1 pixel, 4 pixels, and 8 pixels.
      courseE_artist_concept4_markdown_instruction: |-
        Recreate this drawing. \r
        \r
        Each
        square has a side length of **20 pixels** and there are **15 squares per row**.
      courseE_artist_concept4_2018_markdown_instruction: |-
        Recreate this drawing.
        \r
        \r
        Each square has a side length of **20 pixels** and there are **15
        squares per row**.
      courseE_artist_concept_challenge1_markdown_instruction: |-
        <img src="https://images.code.org/6cac10470af71bbb5d75bf5e2669046f-image-1439939145211.png"
        width="200px"/>\r
        \r
        Now for a challenge!\r
        \r
        Here is a design that
        uses only blocks that you have already been shown.  Can you figure out how
        to recreate it?  Feel free to use trial and error. You don't have to draw
        it perfectly the first time.
      courseE_artist_concept_challenge1_2018_markdown_instruction: |-
        <img src="https://images.code.org/6cac10470af71bbb5d75bf5e2669046f-image-1439939145211.png"
        width="200px"/>\r
        \r
        Now for a challenge!\r
        \r
        Here is a design that
        uses only blocks that you have already been shown.  Can you figure out how
        to recreate it?  Feel free to use trial and error. You don't have to draw
        it perfectly the first time.
      courseE_artist_concept_challenge2_markdown_instruction: |-
        Create five pinwheel
        designs using the code below.
      courseE_artist_concept_challenge2_2018_markdown_instruction: |-
        Create five pinwheel
        designs using the code below.
      courseE_artist_functions1_markdown_instruction: |
        *"Me zombie artist. Me love
        drawing!"*\r
        \r
        Help the zombie draw glasses using squares with sides of
        100 pixels.  \r
        The bridge between the glasses is 75 pixels long.\r
        \r
      courseE_artist_functions10_markdown_instruction: |-
        This time, use lines of 8
        hexagons with 25 pixel sides.\r
        \r
        - To make each hexagon, repeat the side
        6 times, turning 60 degrees.\r
        - Jump 25 pixels between each hexagon.\r
        -
        To draw a diamond, you will need to alternate between turning 60 degrees and
        120 degrees.
      courseE_artist_functions10_2018_markdown_instruction: |-
        This time, use lines
        of 8 hexagons with 25 pixel sides.\r
        \r
        - To make each hexagon, repeat the
        side 6 times, turning 60 degrees.\r
        - Jump 25 pixels between each hexagon.\r
        -
        To draw a diamond, you will need to alternate between turning 60 degrees and
        120 degrees.
      courseE_artist_functions1_2018_markdown_instruction: |
        *"Me zombie artist.
        Me love drawing!"*\r
        \r
        Help the zombie draw glasses using squares with
        sides of 100 pixels.  \r
        The bridge between the glasses is 75 pixels long.\r
        \r
      courseE_artist_functions2_markdown_instruction: |-
        Functions let you define new
        blocks! \r
        \r
        We've moved the blocks needed for drawing a square into a
        function called `draw a square`. This time, use the `draw a square` function
        to create the glasses. \r
        ___\r
        \r
        The squares are 75 pixels apart.
      courseE_artist_functions2_2018_markdown_instruction: |-
        Functions let you define
        new blocks! \r
        \r
        We've moved the blocks needed for drawing a square into
        a function called `draw a square`. This time, use the `draw a square` function
        to create the glasses. \r
        ___\r
        \r
        The squares are 75 pixels apart.
      courseE_artist_functions3_markdown_instruction: |-
        We will come back to functions
        shortly. Let's take a break to practice making this star. \r
        \r
        You can
        make this drawing by adding a repeat block.
      courseE_artist_functions3_2018_markdown_instruction: |-
        We will come back to
        functions shortly. Let's take a break to practice making this star. \r
        \r
        You
        can make this drawing by adding a repeat block.
      courseE_artist_functions4_markdown_instruction: |-
        Now that you can draw a star,
        try drawing four stars!\r
        \r
        - Each branch of the star is 25 pixels long\r
        -
        Turn 45 degrees between branches\r
        - Jump 100 pixels between each star
      courseE_artist_functions4_2018_markdown_instruction: |-
        Now that you can draw
        a star, try drawing four stars!\r
        \r
        - Each branch of the star is 25 pixels
        long\r
        - Turn 45 degrees between branches\r
        - Jump 100 pixels between each
        star
      courseE_artist_functions5_markdown_instruction: |-
        When is drawing three stars
        harder than drawing four? When you also have to jump over the moon!\r
        \r
        Draw
        only those three stars to finish this puzzle.
      courseE_artist_functions5_2018_markdown_instruction: |-
        When is drawing three
        stars harder than drawing four? When you also have to jump over the moon!\r
        \r
        Draw
        only those three stars to finish this puzzle.
      courseE_artist_functions6_markdown_instruction: |-
        You are doing great! \r
        \r
        Make
        this window by drawing a square, then turning 90 degrees before drawing another,
        and so on.
      courseE_artist_functions6_2018_markdown_instruction: |-
        You are doing great!
        \r
        \r
        Make this window by drawing a square, then turning 90 degrees before
        drawing another, and so on.
      courseE_artist_functions7_markdown_instruction: |-
        Let's take the code for the
        window and add it to function `draw a window`. Now, we can call the function
        any time we need to draw a window without having to write the code again.
        \r
        \r
        ![](https://images.code.org/615a5e93abdaffeed438a976a56fc1f5-image-1497998528859.gif)\r
        \r
        Try
        solving this puzzle by creating `draw a window` and calling it five times.
        Watch out for the door!\r
        \r
        - The top windows are 50 pixels away from each
        other.  \r
        - The bottom windows are 100 pixels below the top set.
      courseE_artist_functions7_2018_markdown_instruction: |-
        Let's take the code
        for the window and add it to function `draw a window`. Now, we can call the
        function any time we need to draw a window without having to write the code
        again. \r
        \r
        ![](https://images.code.org/615a5e93abdaffeed438a976a56fc1f5-image-1497998528859.gif)\r
        \r
        Try
        solving this puzzle by creating `draw a window` and calling it five times.
        Watch out for the door!\r
        \r
        - The top windows are 50 pixels away from each
        other.  \r
        - The bottom windows are 100 pixels below the top set.
      courseE_artist_functions8_markdown_instruction: |-
        **Challenge:** Did you know
        that you can call functions from *inside* other functions?!\r
        \r
        Create
        as many functions as you think you need to make this drawing of 50 pixel squares.
      courseE_artist_functions8_2018_markdown_instruction: |-
        **Challenge:** Did you
        know that you can call functions from *inside* other functions?!\r
        \r
        Create
        as many functions as you think you need to make this drawing of 50 pixel squares.
      courseE_artist_functions9_markdown_instruction: |-
        Create this image using the
        limited blocks provided. \r
        \r
        - Each triangle has sides of **50 pixels**  \r
        -
        To draw a diamond, you will need to alternate between turning **60 degrees
        and 120 degrees**.
      courseE_artist_functions9_2018_markdown_instruction: |-
        Create this image using
        the limited blocks provided. \r
        \r
        - Each triangle has sides of **50 pixels**  \r
        -
        To draw a diamond, you will need to alternate between turning **60 degrees
        and 120 degrees**.
      courseE_artist_functions_challenge_markdown_instruction: |-
        Once you define a
        function, you can call it over and over again - whenever and wherever you
        want! Try this code to see how it works, then change it to make your own impressive
        design!
      courseE_artist_functions_challenge1_markdown_instruction: |-
        Once you define
        a function, you can call it over and over again - whenever and wherever you
        want! Try this code to see how it works, then change it to make your own impressive
        design!
      courseE_artist_functions_challenge1_2018_markdown_instruction: |-
        Once you define
        a function, you can call it over and over again - whenever and wherever you
        want! Try this code to see how it works, then change it to make your own impressive
        design!
      courseE_artist_functions_challenge2_markdown_instruction: |-
        Not only can you
        jump to some pre-set locations, like the corners of the canvas, you can also
        use a `jump to` command to get to absolutely any spot you like! Try this code
        to see how it works, then make the program your own!\r
        <xml>\r
          <block
        type="jump_to_xy">\r
            <title name="XPOS">???</title>\r
            <title
        name="YPOS">???</title>\r
            </block></xml>
      courseE_artist_functions_challenge2_2018_markdown_instruction: |-
        Not only can
        you jump to some pre-set locations, like the corners of the canvas, you can
        also use a `jump to` command to get to absolutely any spot you like! Try this
        code to see how it works, then make the program your own!\r
        <xml>\r
          <block
        type="jump_to_xy">\r
            <title name="XPOS">???</title>\r
            <title
        name="YPOS">???</title>\r
            </block></xml>
      courseE_artist_functions_predict1_markdown_instruction: |
        Here is a puzzle that
        uses a function that we have defined. \r
      courseE_artist_functions_predict1_2018_markdown_instruction: "Here is a puzzle\nthat
        uses a function that we have defined. "
      courseE_artist_ramp10_markdown_instruction: |-
        Did you know you can put loops
        inside of other loops to make them more powerful?  That's called making a
        "nested loop".\r
        \r
        ___\r
        \r
        Drag the code for the last triangle into
        a new loop to spin it around and make a snowflake!\r
        \r
        *(You will need
        to spin it 6 times, turning 60 degrees each time, to get this pattern.)*
      courseE_artist_ramp11_markdown_instruction: |-
        Great!  Now let's make a square
        using Artist!  The blocks are a little different, but the idea is the same.\r
        <hr/>\r
        Each
        side of the square has a length of 200 pixels, and you will need to turn 90
        degrees to make each angle.
      courseE_artist_ramp12_markdown_instruction: |-
        Use what you've learned to draw
        this triangle inside of a square.\r
        <hr/>\r
        The sides are each 200 pixels
        long. You will need to turn 90 degrees to make the square and 120 degrees
        to make the triangle.
      courseE_artist_ramp8_markdown_instruction: |-
        Great!  Now let's use that `repeat`
        loop to make a square using Artist!  The blocks for artist are a little different
        than other puzzles, but the idea is the same.\r
        ___\r
        ##### Each side of
        the square has a length of 200 pixels, and you will need to turn 90 degrees
        to make each angle.
      courseE_artist_ramp8_2_markdown_instruction: |-
        Great!  Now let's use that `repeat`
        loop to make a square using Artist!  The blocks for artist are a little different
        than other puzzles, but the idea is the same.\r
        ___\r
        ##### Each side of
        the square has a length of 200 pixels, and you will need to turn 90 degrees
        to make each angle.
      courseE_artist_ramp8_2018_markdown_instruction: |-
        Great!  Now let's use that
        `repeat` loop to make a square using Artist!  The blocks for artist are a
        little different than other puzzles, but the idea is the same.\r
        ___\r
        #####
        Each side of the square has a length of 200 pixels, and you will need to turn
        90 degrees to make each angle.
      courseE_artist_ramp8_2_2018_markdown_instruction: |-
        Great!  Now let's use that
        `repeat` loop to make a square using Artist!  The blocks for artist are a
        little different than other puzzles, but the idea is the same.\r
        ___\r
        #####
        Each side of the square has a length of 200 pixels, and you will need to turn
        90 degrees to make each angle.
      courseE_artist_ramp9_markdown_instruction: |-
        Use what you've learned to draw
        this triangle.\r
        ___\r
        ##### The sides are each 100 pixels long. You will
        need to turn 120 degrees at each corner.
      courseE_artist_ramp9_2_markdown_instruction: |-
        Use what you've learned to draw
        this triangle.\r
        ___\r
        ##### The sides are each 100 pixels long. You will
        need to turn 120 degrees at each corner.
      courseE_artist_ramp9_2018_markdown_instruction: |-
        Use what you've learned to
        draw this triangle.\r
        ___\r
        ##### The sides are each 100 pixels long. You
        will need to turn 120 degrees at each corner.
      courseE_artist_ramp9_2_2018_markdown_instruction: |-
        Use what you've learned
        to draw this triangle.\r
        ___\r
        ##### The sides are each 100 pixels long.
        You will need to turn 120 degrees at each corner.
      courseE_bee_concept1_markdown_instruction: "*\"Can you BEE-lieve all of these\nflowers?\"*\\r\n\\r\nCollect
        all of the nectar from each flower. "
      courseE_bee_concept1_2018_markdown_instruction: "*\"Can you BEE-lieve all of\nthese
        flowers?\"*\\r\n\\r\nCollect all of the nectar from each flower. "
      courseE_bee_concept2_markdown_instruction: |-
        Help the bee make all of the honey.  \r
        \r
        You
        can only make honey at a honeycomb, but you can check any space to see if
        there is a honeycomb.
      courseE_bee_concept2_2018_markdown_instruction: |-
        Help the bee make all of the
        honey.  \r
        \r
        You can only make honey at a honeycomb, but you can check
        any space to see if there is a honeycomb.
      courseE_bee_concept5_markdown_instruction: |-
        Can you help the bee collect the
        nectar from the flowers? \r
        \r
        You can only collect nectar from flowers,
        but you can check any space to see if there is a flower.
      courseE_bee_concept5_2018_markdown_instruction: |-
        Can you help the bee collect
        the nectar from the flowers? \r
        \r
        You can only collect nectar from flowers,
        but you can check any space to see if there is a flower.
      courseE_bee_functions10_markdown_instruction: |-
        *"Show me the HONEY!"*\r
        \r
        Solve
        this puzzle by creating a function that causes the bee to: \r
        - turn toward
        the branch in the path\r
        - move forward\r
        - make all of the honey\r
        - return
        to the main path \r
        - turn back to the original direction
      courseE_bee_functions10_2018_markdown_instruction: |-
        *"Show me the HONEY!"*\r
        \r
        Solve
        this puzzle by creating a function that causes the bee to: \r
        - turn toward
        the branch in the path\r
        - move forward\r
        - make all of the honey\r
        - return
        to the main path \r
        - turn back to the original direction
      courseE_bee_functions2_markdown_instruction: |-
        Functions are blocks of code
        that perform a task.  \r
        \r
        Use the `get 2 nectar` function to collect the
        nectar from each flower.
      courseE_bee_functions2_2018_markdown_instruction: |-
        Functions are blocks of
        code that perform a task.  \r
        \r
        Use the `get 2 nectar` function to collect
        the nectar from each flower.
      courseE_bee_functions3_markdown_instruction: |-
        Build the `get 5` function to
        use in this puzzle.
      courseE_bee_functions3_2018_markdown_instruction: |-
        Build the `get 5` function
        to use in this puzzle.
      courseE_bee_functions4_markdown_instruction: |-
        The `move and get nectar` function
        turns the bee, collects nectar, and then returns the bee to where it started.  \r
        \r
        Use
        the `move and get nectar` function to collect all of the nectar.
      courseE_bee_functions4_2018_markdown_instruction: |-
        The `move and get nectar`
        function turns the bee, collects nectar, and then returns the bee to where
        it started.  \r
        \r
        Use the `move and get nectar` function to collect all
        of the nectar.
      courseE_bee_functions8_markdown_instruction: |-
        **Challenge:** These flowers
        can have a different amount of nectar each time you run the puzzle.   \r
        \r
        Create
        a function that collects all of the nectar from each flower.
      courseE_bee_functions8_2018_markdown_instruction: |-
        **Challenge:** These flowers
        can have a different amount of nectar each time you run the puzzle.   \r
        \r
        Create
        a function that collects all of the nectar from each flower.
      courseE_bee_functions9b_markdown_instruction: |-
        *"I can't BEE-lieve how full
        this field is!"*\r
        \r
        Look very carefully at this puzzle to see if you
        can use what you learned to solve it.
      courseE_bee_functions_challenge1_markdown_instruction: |-
        You are on your own
        for this challenge.  This could "bee" harder than it looks!
      courseE_bee_functions_challenge1_2018_markdown_instruction: |-
        You are on your
        own for this challenge.  This could "bee" harder than it looks!
      courseE_bee_ramp14_markdown_instruction: |
        The same technique works with nectar
        and honey!  \r
        \r
        Look at all of these clouds. Some of them will turn into
        honey, and others into nectar.   \r
        Help the bee follow the path and solve
        this puzzle.\r
        \r
        \r
        \r
      courseE_bee_ramp14_2018_markdown_instruction: |
        The same technique works with
        nectar and honey!  \r
        \r
        Look at all of these clouds. Some of them will
        turn into honey, and others into nectar.   \r
        Help the bee follow the path
        and solve this puzzle.\r
        \r
        \r
        \r
      courseE_bee_ramp17_markdown_instruction: "For the final puzzle in this stage,\nuse
        what you have learned to collect all of the nectar and make all of the\nhoney.
        \ "
      courseE_collector_ramp10_markdown_instruction: |
        Take the same path as before,
        but this time collect all of the treasure as you find it.\r
      courseE_collector_ramp8_markdown_instruction: |
        This puzzle is a lot like the
        last one, but now it stars Laurel the Adventurer!\r
        <hr/>\r
        \r
        Take the
        same path as before, but this time, use a repeat loop to collect treasure
        when you get to it.\r
      courseE_collector_ramp9_markdown_instruction: |
        Take the same path as before,
        but this time collect all of the treasure as you find it.\r
      courseE_farmer_concept4_markdown_instruction: |-
        Now let's go one level deeper!
        We've nested that whole block of code into another loop, but you need to
        get the artist back in place to draw the next line. Which of these code blocks
        can you place at the end of the outermost loop to draw the whole grid?
      courseE_farmer_functions1_markdown_instruction: |-
        *"Have we met before? I'm
        the harvester!"*\r
        \r
        Help the harvester get to the pumpkin and pick it.
      courseE_farmer_functions10b_markdown_instruction: |-
        Use your new function twice
        to solve this puzzle.
      courseE_farmer_functions10b_2018_markdown_instruction: |-
        Use your new function
        twice to solve this puzzle.
      courseE_farmer_functions11_predict_markdown_instruction: |-
        Figure out which
        function to use and which one to delete, then solve this puzzle!
      courseE_farmer_functions11_predict_2018_markdown_instruction: |-
        Figure out which
        function to use and which one to delete, then solve this puzzle!
      courseE_farmer_functions1_2018_markdown_instruction: |-
        *"Have we met before?
        I'm the harvester!"*\r
        \r
        Help the harvester get to the pumpkin and pick
        it.
      courseE_farmer_functions1a_markdown_instruction: |-
        *"Oooh, veggies are cropping
        up everywhere!"*\r
        \r
        Now help the harvester pick all of the corn on the
        way to the pumpkin at the end.\r
        ___\r
        ##### Note: Every square on the path
        that leads to the pumpkin will either have *one* corn or nothing.  You will
        need to use an `if` statement to check whether there is corn before you try
        to pick it!
      courseE_farmer_functions1a_2018_markdown_instruction: |-
        *"Oooh, veggies are
        cropping up everywhere!"*\r
        \r
        Now help the harvester pick all of the corn
        on the way to the pumpkin at the end.\r
        ___\r
        ##### Note: Every square on
        the path that leads to the pumpkin will either have *one* corn nothing.  You
        will need to use an `if` statement to check whether there is corn before you
        try to pick it!
      courseE_farmer_functions2a_markdown_instruction: |-
        *"I feel so functional!"*\r
        \r
        We're
        going to check lots of squares for crops in the next few puzzles.  Let's
        move everything into a function to make it easier.
      courseE_farmer_functions2aALT_markdown_instruction: |-
        *"I feel so functional!"*\r
        \r
        We're
        going to check lots of squares for crops in the next few puzzles.  Let's
        move everything into a function to make it easier.
      courseE_farmer_functions2b_markdown_instruction: |-
        Help the harvester pick the
        corn and pumpkins.\r
        ___\r
        ##### Each sprout will either grow *one* corn
        or nothing.
      courseE_farmer_functions2b_2018_markdown_instruction: |-
        Help the harvester pick
        the corn and pumpkins.\r
        ___\r
        ##### Each sprout will either grow *one*
        corn or nothing.
      courseE_farmer_functions2ba_markdown_instruction: |-
        *"I feel so functional!"*\r
        \r
        Did
        you notice that there was repeated code in the last puzzle?  It doesn't work
        to put it all inside of a loop, but we **can** use functions.  \r
        \r
        For
        this puzzle, we have moved the repeated code into a function called `corn
        and pumpkin`. Now, all you need to do is put the small `corn and pumpkin`
        **function call block** into the code where you need it.\r
        \r
        ___\r
        #####
        Each sprout will either grow *one* corn or nothing.
      courseE_farmer_functions2ba_2018_markdown_instruction: |-
        *"I feel so functional!"*\r
        \r
        Did
        you notice that there was repeated code in the last puzzle?  It doesn't work
        to put it all inside of a loop, but we **can** use functions.  \r
        \r
        For
        this puzzle, we have moved the repeated code into a function called `corn
        and pumpkin`. Now, all you need to do is put the small `corn and pumpkin`
        **function call block** into the code where you need it.\r
        \r
        ___\r
        #####
        Each sprout will either grow *one* corn or nothing.
      courseE_farmer_functions3b_markdown_instruction: |-
        *"Oooh, veggies are cropping
        up everywhere!"*\r
        \r
        Now help the farmer pick the corn, lettuce, **and**
        pumpkin.
      courseE_farmer_functions3c_markdown_instruction: |-
        Now, fill-in the function
        yourself by pulling the blocks from the code and dropping them into the **function
        definition**.  \r
        \r
        Don't forget to add the little **function call** blocks
        to use the function in your program when you're done.
      courseE_farmer_functions3c_2018_markdown_instruction: |-
        Now, fill-in the function
        yourself by pulling the blocks from the code and dropping them into the **function
        definition**.  \r
        \r
        Don't forget to add the little **function call** blocks
        to use the function in your program when you're done.
      courseE_farmer_functions4b_markdown_instruction: |-
        Use your new function to
        solve this puzzle.
      courseE_farmer_functions4b_2018_markdown_instruction: |-
        Use your new function
        to solve this puzzle.
      courseE_farmer_functions5b_markdown_instruction: |-
        *"They're multiplying!"*\r
        \r
        The
        crops are now growing in clusters.  Add some new `while` loops to your function
        to make sure you get all of the produce.
      courseE_farmer_functions5c_markdown_instruction: |-
        Your function will come in
        handy here.
      courseE_farmer_functions5c_2018_markdown_instruction: |-
        Your function will come
        in handy here.
      courseE_farmer_functions6b_markdown_instruction: Pick all of the produce.
      courseE_farmer_functions6c_markdown_instruction: |-
        *"Lettuce pick all of the
        produce!"*\r
        \r
        Now the sprouts can be either corn **or** lettuce.  What
        do you need to add to this program to check each sprout before you pick?\r
        ___\r
        #####
        Note: Each sprout will turn into either **one** corn or **one** lettuce.
      courseE_farmer_functions6c_2018_markdown_instruction: |-
        *"Lettuce pick all
        of the produce!"*\r
        \r
        Now the sprouts can be either corn **or** lettuce.  What
        do you need to add to this program to check each sprout before you pick?\r
        ___\r
        #####
        Note: Each sprout will turn into either **one** corn or **one** lettuce.
      courseE_farmer_functions7b_markdown_instruction: |-
        *"This harvest is a-MAZE-ing!"*\r
        \r
        Help
        the harvester find her way down this confusing path and to the pumpkin by
        turning **left** at the corn and **right** at the lettuce.  \r
        \r
        *(Don't
        forget to collect all of the produce along the way!)*
      courseE_farmer_functions7b_2018_markdown_instruction: |-
        *"This harvest is a-MAZE-ing!"*\r
        \r
        Help
        the harvester find her way down this confusing path and to the pumpkin by
        turning **left** at the corn and **right** at the lettuce.  \r
        \r
        *(Don't
        forget to collect all of the produce along the way!)*
      courseE_farmer_functions8b_markdown_instruction: |-
        **Challenge:** Not all corners
        are marked in this maze, that means that you will need to use your navigation
        code more than once to get where you need to go.  \r
        \r
        Can you figure out
        what you need to do?
      courseE_farmer_functions8b_2018_markdown_instruction: |-
        **Challenge:** Not all
        corners are marked in this maze, that means that you will need to use your
        navigation code more than once to get where you need to go.  \r
        \r
        Can you
        figure out what you need to do?
      courseE_farmer_functions9b_markdown_instruction: |-
        Take a good look at this
        puzzle.  Can you figure out the pattern?
      courseE_farmer_functions9b_2018_markdown_instruction: |-
        Take a good look at
        this puzzle.  Can you figure out the pattern?
      courseE_farmer_functions9b_clone_markdown_instruction: |-
        Take a good look at
        this puzzle.  Can you figure out the pattern?
      courseE_farmer_predict1_markdown_instruction: |
        Help the farmer walk the path
        to find all of the lettuce\r
        \r
        In this puzzle, lettuce is growing at the
        end of every path.  If there is a path in front of her, the farmer can keep
        moving forward.  Otherwise, she needs to pick all of the lettuce, then turn
        to stay on the path. \r
        \r
        \r
        \r
      courseE_farmer_predict1_2018_markdown_instruction: |
        Help the farmer walk the
        path to find all of the lettuce\r
        \r
        In this puzzle, lettuce is growing
        at the end of every path.  If there is a path in front of her, the farmer
        can keep moving forward.  Otherwise, she needs to pick all of the lettuce,
        then turn to stay on the path. \r
        \r
        \r
        \r
      courseE_farmer_ramp11a_markdown_instruction: "Oh my!  This pile is so big that\nit's
        hard to guess how much dirt is in it.  \\r\n\\r\n___\\r\n\\r\nWe've added\na
        new block to the toolbox called the `while there is a pile` block.  Use\nthis
        to remove dirt only while there is still some to scoop! "
      courseE_farmer_ramp11a_2018_markdown_instruction: "Oh my!  This pile is so\nbig
        that it's hard to guess how much dirt is in it.  \\r\n\\r\n___\\r\n\\r\nWe've\nadded
        a new block to the toolbox called the `while there is a pile` block.  Use\nthis
        to remove dirt only while there is still some to scoop! "
      courseE_farmer_ramp11b_markdown_instruction: |-
        Let's try that again, but with
        more piles!
      courseE_farmer_ramp11b_2018_markdown_instruction: |-
        Let's try that again, but
        with more piles!
      courseE_farmer_ramp12_markdown_instruction: 'Pick all of the lettuce.\r

'
      courseE_farmer_ramp12_2018_markdown_instruction: Pick all of the lettuce.
      courseE_farmer_ramp12_forswap_markdown_instruction: Pick all of the lettuce.
      courseE_farmer_ramp12_forswap_2018_markdown_instruction: Pick all of the lettuce.
      courseE_farmer_ramp12a_markdown_instruction: "Help the farmer walk the path\nto
        find all of the lettuce\\r\n\\r\nIn this puzzle, lettuce is growing at the\nend
        of every path.  If there is a path in front of her, the farmer can keep\nmoving
        forward.  Otherwise, she needs to pick all of the lettuce, then turn\nto stay
        on the path. "
      courseE_farmer_ramp12a_2018_markdown_instruction: "Help the farmer walk the\npath
        to find all of the lettuce\\r\n\\r\nIn this puzzle, lettuce is growing\nat
        the end of every path.  If there is a path in front of her, the farmer\ncan
        keep moving forward.  Otherwise, she needs to pick all of the lettuce,\nthen
        turn to stay on the path. "
      courseE_farmer_ramp12b_markdown_instruction: |-
        Now the harvester needs to pick
        all of the lettuce.  Use `while there is lettuce` inside of a `repeat` loop
        to get it all!
      courseE_farmer_ramp12b_2018_markdown_instruction: |-
        Now the harvester needs
        to pick all of the lettuce.  Use `while there is lettuce` inside of a `repeat`
        loop to get it all!
      courseE_farmer_ramp12c_markdown_instruction: "The lettuce is now only at the\nend
        of the path.  \\r\nTravel down the path **until** you reach a head of lettuce,\nthen
        continue to pick it **while** there is still some left.  "
      courseE_farmer_ramp12c_2018_markdown_instruction: "The lettuce is now only\nat
        the end of the path.  \\r\nTravel down the path **until** you reach a head\nof
        lettuce, then continue to pick it **while** there is still some left.  "
      courseE_farmer_ramp12d_markdown_instruction: "The lettuce is scattered all\nover
        the garden.  \\r\nTravel down each path **until** you reach a head of\nlettuce,
        then continue to pick it **while** there is still some left.  "
      courseE_farmer_ramp12d_2018_markdown_instruction: "The lettuce is scattered\nall
        over the garden.  \\r\nTravel down each path **until** you reach a head\nof
        lettuce, then continue to pick it **while** there is still some left.  "
      courseE_farmer_ramp12e_markdown_instruction: "The lettuce is scattered all\nover
        the garden.  \\r\nTravel down each path **until** you reach a head of\nlettuce,
        then continue to pick it **while** there is still some left.  "
      courseE_farmer_ramp12e_2018_markdown_instruction: "The lettuce is scattered\nall
        over the garden.  \\r\nTravel down each path **until** you reach a head\nof
        lettuce, then continue to pick it **while** there is still some left.  "
      courseE_farmer_ramp12f_markdown_instruction: |-
        **Challenge**: The only way to
        get all of the crops is to move forward until you get to the lettuce, then
        turn left **if** there is a path to the left.  Otherwise, turn right.
      courseE_farmer_ramp12f_2018_markdown_instruction: |-
        **Challenge**: The only
        way to get all of the crops is to move forward until you get to the lettuce,
        then turn left **if** there is a path to the left.  Otherwise, turn right.
      courseE_farmer_ramp12g_markdown_instruction: |-
        Move forward until you get to
        the lettuce, then turn left **if** there is a path to the left.  Otherwise,
        turn right.
      courseE_farmer_ramp12g_2018_markdown_instruction: |-
        Move forward until you get
        to the lettuce, then turn left **if** there is a path to the left.  Otherwise,
        turn right.
      courseE_farmer_ramp13_markdown_instruction: |
        Goodness!  Look at all of these
        sprouts. Some of them will turn into corn, and others into lettuce.  \r
        \r
        Travel
        to the ends of the path to pick lettuce while there is lettuce, and pick corn
        while there is corn. \r
        \r
      courseE_farmer_ramp13_2018_markdown_instruction: |
        Goodness!  Look at all of
        these sprouts. Some of them will turn into corn, and others into lettuce.  \r
        \r
        Travel
        to the ends of the path to pick lettuce while there is lettuce, and pick corn
        while there is corn. \r
        \r
      courseE_farmer_ramp15_markdown_instruction: |-
        Solve this puzzle using only the
        blocks available.\r
        \r
        This level will help give you practice with the `repeat
        until` block.  Collect all of the corn and lettuce until you get to the pumpkin.
        (Don't forget to collect the pumpkin, too!)
      courseE_farmer_ramp15_2018_markdown_instruction: |-
        Solve this puzzle using only
        the blocks available.\r
        \r
        This level will help give you practice with the
        `repeat until` block.  Collect all of the corn and lettuce until you get to
        the pumpkin. (Don't forget to collect the pumpkin, too!)
      courseE_farmer_ramp16_markdown_instruction: |-
        **Challenge:** Solve this puzzle
        with the fewest number of blocks.
      courseE_maze_ramp1_markdown_instruction: |-
        For this puzzle, drag all of the
        blocks together and click "Run" to watch it go!
      courseE_maze_ramp13_markdown_instruction: |-
        Time for one last puzzle to pull
        it all together!\r
        \r
        Use nested loops to get the bird to the pig.
      courseE_maze_ramp1_2018_markdown_instruction: |-
        For this puzzle, drag all of
        the blocks together and click "Run" to watch it go!
      courseE_maze_ramp2_markdown_instruction: |-
        Drag an extra `move forward` block
        out of the toolbox, then attach all blocks to `when run` to finish your code.
      courseE_maze_ramp2_2018_markdown_instruction: |-
        Drag an extra `move forward`
        block out of the toolbox, then attach all blocks to `when run` to finish your
        code.
      courseE_maze_ramp3_markdown_instruction: |-
        *"This pig is ruffling my feathers."*\r
        \r
        There
        is one extra block that is going to cause the bird to crash.  \r
        Throw it
        away by dragging it back to the toolbox.
      courseE_maze_ramp3_2018_markdown_instruction: |-
        *"This pig is ruffling my feathers."*\r
        \r
        There
        is one extra block that is going to cause the bird to crash.  \r
        Throw it
        away by dragging it back to the toolbox.
      courseE_maze_ramp4_markdown_instruction: |-
        *"Trace the path and lead me to
        the silly pig."* \r
        \r
        Avoid TNT or feathers will fly!
      courseE_maze_ramp4_2018_markdown_instruction: |-
        *"Trace the path and lead me
        to the silly pig."* \r
        \r
        Avoid TNT or feathers will fly!
      courseE_maze_ramp5_markdown_instruction: |-
        *"Follow this path to get me to
        the pig!"*\r
        \r
        Avoid the TNT.
      courseE_maze_ramp5_2018_markdown_instruction: |-
        *"Follow this path to get me
        to the pig!"*\r
        \r
        Avoid the TNT.
      courseE_maze_ramp6_markdown_instruction: |-
        *"Keep calm and help me find the
        bad pig. Otherwise I might get angry!"*\r
        \r
        When you have several blocks
        in a row, try moving them inside of a `repeat` loop.  This will do the same
        thing with less code!
      courseE_maze_ramp6_2018_markdown_instruction: |-
        *"Keep calm and help me find
        the bad pig. Otherwise I might get angry!"*\r
        \r
        When you have several
        blocks in a row, try moving them inside of a `repeat` loop.  This will do
        the same thing with less code!
      courseE_maze_ramp7_markdown_instruction: |-
        *"It's time to get angry!"*\r
        \r
        **Challenge:**
        Use what you've learned to get the bird to the pig!
      courseE_maze_ramp7_2018_markdown_instruction: |-
        *"It's time to get angry!"*\r
        \r
        **Challenge:**
        Use what you've learned to get the bird to the pig!
      courseE_multi_maze_ramp5_markdown_instruction: |-
        *"Follow this path to get
        me to the pig!"*\r
        \r
        Avoid the TNT.
      courseE_playLab_challenge1_markdown_instruction: |-
        *The **squirrels** are terrified
        to see that a **dinosaur** has come to town! Can the brave **knight** keep
        them all from panicking?*\r
        \r
        Rules:\r
        1. *Touching the squirrels scores
        you points.*\r
        2. *Touching the dinosaur takes many points away.*\r
        \r
        Here
        is a different kind of game that has already been started for you! Play it
        to see how it works. \r
        \r
        \r
        Something should happen when you get enough
        points or when you run out of points. Add some code to the `win game` and
        `lose game` functions to make the game work the way it should. \r
        Click the
        hints for ideas!
      courseE_playLab_challenge1_2018_markdown_instruction: |-
        *The **squirrels** are
        terrified to see that a **dinosaur** has come to town! Can the brave **knight**
        keep them all from panicking?*\r
        \r
        Rules:\r
        1. *Touching the squirrels
        scores you points.*\r
        2. *Touching the dinosaur takes many points away.*\r
        \r
        Here
        is a different kind of game that has already been started for you! Play it
        to see how it works. \r
        \r
        \r
        Something should happen when you get enough
        points or when you run out of points. Add some code to the `win game` and
        `lose game` functions to make the game work the way it should. \r
        Click the
        hints for ideas!
      courseE_playLab_scaffold1_markdown_instruction: |-
        It is amazing how much you
        have learned! Let's make a game step by step.\r
        \r
        Using new blocks in
        your toolbox, choose a new background, then pick an actor to be in your game.
      courseE_playLab_scaffold1_2018_markdown_instruction: |-
        It is amazing how much
        you have learned! Let's make a game step by step.\r
        \r
        Using new blocks
        in your toolbox, choose a new background, then pick an actor to be in your
        game.
      courseE_playLab_scaffold2_markdown_instruction: |-
        Use  blocks like event handlers
        and actions to make your player move according to the arrows on your keyboard.  \r
        \r
        Get
        the player to the targets to complete this puzzle.
      courseE_playLab_scaffold2_2018_markdown_instruction: |-
        Use  blocks like event
        handlers and actions to make your player move according to the arrows on your
        keyboard.  \r
        \r
        Get the player to the targets to complete this puzzle.
      courseE_playLab_scaffold3_markdown_instruction: |-
        Let's add some more characters
        to your game!\r
        \r
        Use the `set actor` block to add more characters then
        move to the goal to complete this puzzle.
      courseE_playLab_scaffold3_2018_markdown_instruction: |-
        Let's add some more
        characters to your game!\r
        \r
        Use the `set actor` block to add more characters
        then move to the goal to complete this puzzle.
      courseE_playLab_scaffold4_markdown_instruction: |-
        Multiple characters and getting
        the actors moving is a great start to a game, but we need to do more to make
        this feel like a real game. Let's add a score!\r
        \r
        Use event blocks like
        the `when actor touches` to change the score. Score 10 points to complete
        this puzzle.
      courseE_playLab_scaffold4_2018_markdown_instruction: |-
        Multiple characters and
        getting the actors moving is a great start to a game, but we need to do more
        to make this feel like a real game. Let's add a score!\r
        \r
        Use event blocks
        like the `when actor touches` to change the score. Score 10 points to complete
        this puzzle.
      courseE_playLab_scaffold5_markdown_instruction: |-
        Great job! You have all the
        basic components of a working game. Now spend some time making sure the game
        works the way you want. Include a way to win or lose your game, then play
        until you meet one of those conditions.
      courseE_playLab_scaffold5_2018_markdown_instruction: |-
        Great job! You have all
        the basic components of a working game. Now spend some time making sure the
        game works the way you want. Include a way to win or lose your game, then
        play until you meet one of those conditions.
      courseE_playLab_scaffold6_markdown_instruction: |-
        You've finished! Now you
        can play your game or share it with your friends and classmates!
      courseE_playLab_scaffold6_2018_markdown_instruction: |-
        You've finished! Now
        you can play your game or share it with your friends and classmates!
      courseE_playlab_challenge2_markdown_instruction: |-
        Can you figure out how this
        "Fortune Teller" app works? Try adding some of the following features to
        this game:\r
        \r
        * Change the "yes" and "no" answers to something more
        interesting.\r
        * Let the player ask another question after the actor says
        the fortune.\r
        * Give the witch two more things to say when she is in an
        `angry` or `normal` mood.\r
        * Give the wizard his own set of fortunes.\r
        *
        Make each actor change mood randomly.\r
        \r
        Check the hints if you need help
        with these challenges!
      courseE_playlab_variables_challenge2_markdown_instruction: |-
        Can you figure
        out how this "Fortune Teller" app works? Try adding some of the following
        features to this game:\r
        \r
        * Change the "yes" and "no" answers to something
        more interesting.\r
        * Let the player ask another question after the actor
        says the fortune.\r
        * Give the witch two more things to say when she is in
        an `angry` or `normal` mood.\r
        * Give the wizard his own set of fortunes.\r
        *
        Make each actor change mood randomly.\r
        \r
        Check the hints if you need help
        with these challenges!
      courseF_IceAge_1_markdown_instruction: |-
        Sid (actor 1) wants to gather everyone
        for a new adventure. Can you help him say "Hello!" by dragging the `actor
        1 say` block out and connecting it to the bottom of the `when run` event?   \r
        \r
        Don't
        forget to type "Hello!" inside!
      courseF_IceAge_10_markdown_instruction: |-
        Sid wants to let his grandmother,
        Granny, know that he loves her.   \r
        \r
        Use the `actor __ throw` command
        to have Sid (actor 1) throw hearts at Granny (actor 2)! \r
        Set Granny's
        mood to happy when she gets hit with the hearts.
      courseF_IceAge_11_markdown_instruction: |-
        Time to create your own game or story!  \r
        \r
        When
        you're done, click "Finish" to let friends try your game on their phones,
        tablets, or computers!\r
        Don't know what to make? Click the hints for details.
      courseF_IceAge_2_markdown_instruction: |-
        Manny (actor 2) found Sid (actor 1)
        and wants to invite him on an adventure. Help them greet each other by using
        the the `actor ___ say` block twice.
      courseF_IceAge_3_markdown_instruction: |-
        Scrat is looking for his acorn! Can
        you help him move the last 200 pixels?
      courseF_IceAge_4_markdown_instruction: |-
        Diego (actor 1) is searching for Manny
        (actor 2). Can you help bring the two together? Connect a block to the `when
        actor touches` event to play a sound when they find each other.
      courseF_IceAge_5_markdown_instruction: |-
        The `repeat forever` block allows you
        to run code continuously. Can you put blocks inside of it to help Granny get
        some exercise by moving left and right repeatedly?
      courseF_IceAge_6_markdown_instruction: |-
        Can you help Sid call for his friends
        when you click on him?  \r
        \r
        Once you're done, press "Run" to play.  Click
        on Sid to see your code work!
      courseF_IceAge_7_markdown_instruction: |-
        Scrat is still looking for acorns!
        \r
        Help him scamper around by attaching a `move actor 1` block to each of
        the events and changing the direction to work for each arrow key. \r
        When
        you’re done, click "Run" and try to collect all of the acorns.
      courseF_IceAge_8_markdown_instruction: |-
        Here is your code from the last puzzle,
        as well as the code to move Granny left and right. \r
        Can you finish the
        program to make it so that you both **play a sound** and **score a point**
        when Sid and Granny collide? \r
        Press "Run" to play the game.
      courseF_IceAge_9_markdown_instruction: |-
        Everyone needs to move faster because
        an ice storm is coming! \r
        Change the scene to an icy background and set
        Sid’s (actor 1) speed to fast.\r
        Press "Run" and move Sid to Diego to warn
        him.
      courseF_IceAge_template_markdown_instruction: |-
        Scrat is still looking for acorns!
        \r
        Help him scamper around by attaching a `move actor 1` block to each of
        the events and changing the direction to work for each arrow key. \r
        When
        you’re done, click "Run" and try to collect all of the acorns.
      courseF_artist_for1_markdown_instruction: |
        **Free Play:** Experiment with the
        `for` loop and the `counter` variable.  \r
        \r
        Drag out a few blocks and
        see what happens.  \r
      courseF_artist_for10_markdown_instruction: |-
        **Free Play:** Try using the `counter`
        variable with other drawing elements to make magical images like this one.\r
        \r
        ![](https://images.code.org/5a4eec10a53aa78ad6b12fb5e48680f8-image-1497991505852.png)
      courseF_artist_for10_2018_markdown_instruction: |-
        **Free Play:** Try using the
        `counter` variable with other drawing elements to make magical images like
        this one.\r
        \r
        ![](https://images.code.org/5a4eec10a53aa78ad6b12fb5e48680f8-image-1497991505852.png)
      courseF_artist_for1_2018_markdown_instruction: |
        **Free Play:** Experiment with
        the `for` loop and the `counter` variable.  \r
        \r
        Drag out a few blocks
        and see what happens.  \r
      courseF_artist_for2_markdown_instruction: |-
        Use a `repeat` loop inside of a
        `for` loop to create this stack of triangles that goes from 50 pixel to 100
        pixel sides.
      courseF_artist_for2_2018_markdown_instruction: |-
        Use a `repeat` loop inside
        of a `for` loop to create this stack of triangles that goes from 50 pixel
        to 100 pixel sides.
      courseF_artist_for3_markdown_instruction: |-
        Create these triangles that go from
        20 pixel sides to 200 pixel sides, where each triangle is 20 pixels larger
        than the last.
      courseF_artist_for3_2018_markdown_instruction: |-
        Create these triangles that
        go from 20 pixel sides to 200 pixel sides, where each triangle is 20 pixels
        larger than the last.
      courseF_artist_for5_markdown_instruction: |-
        Just one little change to the code
        from the last image can create this drawing. Can you figure out what that
        change is?\r
        ___\r
        Hint:  You need to remove something!
      courseF_artist_for5_2018_markdown_instruction: |-
        Just one little change to the
        code from the last image can create this drawing. Can you figure out what
        that change is?\r
        ___\r
        Hint:  You need to remove something!
      courseF_artist_for6_markdown_instruction: |-
        If you turn a little bit more or
        less than you normally would for a shape, it creates a neat effect.\r
        \r
        Recreate
        your code from the last level, but turn 89 degrees to create this twisted
        square spiral.
      courseF_artist_for6_2018_markdown_instruction: |-
        If you turn a little bit more
        or less than you normally would for a shape, it creates a neat effect.\r
        \r
        Recreate
        your code from the last level, but turn 89 degrees to create this twisted
        square spiral.
      courseF_artist_for7_markdown_instruction: "Make three small changes to the\ncode
        from the last level to get this!  "
      courseF_artist_for7_2018_markdown_instruction: "Make three small changes to\nthe
        code from the last level to get this!  "
      courseF_artist_for9_markdown_instruction: |-
        **Inspiration:** Use the counter
        inside the `set alpha` block to get something like this faded center.  \r
        (This
        hexagon pattern was made using a 60 degree turn.)
      courseF_artist_for9_2018_markdown_instruction: |-
        **Inspiration:** Use the counter
        inside the `set alpha` block to get something like this faded center.  \r
        (This
        hexagon pattern was made using a 60 degree turn.)
      courseF_artist_for_Template_markdown_instruction: |-
        If you turn a little bit
        more or less than you normally would for a shape, it creates a neat effect.\r
        \r
        Try
        using some of the code from the last level, but turning 89 degrees to create
        this twisted square spiral.
      courseF_artist_for_Template_2018_markdown_instruction: |-
        If you turn a little
        bit more or less than you normally would for a shape, it creates a neat effect.\r
        \r
        Try
        using some of the code from the last level, but turning 89 degrees to create
        this twisted square spiral.
      courseF_artist_for_challenge1_markdown_instruction: |-
        Can you figure out how
        to re-create this drawing? \r
        \r
        <img src="https://images.code.org/724b2efa8aefe863bd0d6491a3f1590f-image-1445563707400.26.50.png"
        width="350px"/>
      courseF_artist_for_challenge1_2018_markdown_instruction: |-
        Can you figure out
        how to re-create this drawing? \r
        \r
        <img src="https://images.code.org/724b2efa8aefe863bd0d6491a3f1590f-image-1445563707400.26.50.png"
        width="350px"/>
      courseF_artist_for_challenge2_markdown_instruction: |-
        Can you figure out how
        to re-create this drawing with a single loop? \r
        \r
        <img src="https://images.code.org/b0d15d06465d645c5ca533e5da6387b3-image-1446075597132.36.04.png"
        width="350px"/>
      courseF_artist_for_challenge2_2018_markdown_instruction: |-
        Can you figure out
        how to re-create this drawing with a single loop? \r
        \r
        <img src="https://images.code.org/b0d15d06465d645c5ca533e5da6387b3-image-1446075597132.36.04.png"
        width="350px"/>
      courseF_artist_fwp1_markdown_instruction: |-
        Today, we're going to keep using
        the powerful function editor. See if you remember how to edit the `draw a
        square` function to find the bugs.
      courseF_artist_fwp1_2018_markdown_instruction: |-
        Today, we're going to keep
        using the powerful function editor. See if you remember how to edit the `draw
        a square` function to find the bugs.
      courseF_artist_fwp2_markdown_instruction: |-
        Edit the function to accept a parameter
        called `length`.  \r
        \r
        The sides of each square should be 25 pixels larger
        than the last.  The first square has 25 pixel sides.
      courseF_artist_fwp2_2018_markdown_instruction: |-
        Edit the function to accept
        a parameter called `length`.  \r
        \r
        The sides of each square should be 25
        pixels larger than the last.  The first square has 25 pixel sides.
      courseF_artist_fwp2_predict1_markdown_instruction: |-
        Edit the function to accept
        a parameter called `length`.  \r
        \r
        The sides of each square should be 25
        pixels larger than the last.  The first square has 25 pixel sides. Replace
        the '???' with the correct values to draw the picture.
      courseF_artist_fwp2_predict1_2018_markdown_instruction: |-
        Edit the function
        to accept a parameter called `length`.  \r
        \r
        The sides of each square should
        be 25 pixels larger than the last.  The first square has 25 pixel sides. Replace
        the '???' with the correct values to draw the picture.
      courseF_artist_fwp3_markdown_instruction: |-
        Now try creating the function from
        scratch!  \r
        \r
        Create a function called `draw a square` and use it to outline
        these four boxes.  \r
        Make sure to add a parameter for `length`!\r
        \r
        ___\r
        Starting
        from the upper right, the box widths are 50, 100, 150, and 200.
      courseF_artist_fwp3_2018_markdown_instruction: |-
        Now try creating the function
        from scratch!  \r
        \r
        Create a function called `draw a square` and use it
        to outline these four boxes.  \r
        Make sure to add a parameter for `length`!\r
        \r
        ___\r
        Starting
        from the upper right, the box widths are 50, 100, 150, and 200.
      courseF_artist_fwp4_markdown_instruction: |-
        Great job!  Now edit this function
        to add a parameter for the number of sides in your polygon.\r
        \r
        The sides
        of all the shapes are 100 pixels long.
      courseF_artist_fwp4_2018_markdown_instruction: |-
        Great job!  Now edit this function
        to add a parameter for the number of sides in your polygon.\r
        \r
        The sides
        of all the shapes are 100 pixels long.
      courseF_artist_fwp5_markdown_instruction: |-
        Use the function from the last puzzle
        to draw this series of shapes.  \r
        \r
        \r
        The triangle has 21 pixel sides,
        and the sides in each following shape are 7 pixels longer than the last.   \r
        Use
        the `multiplication` block to make this all happen with just one function
        call.\r
        ___\r
        The `multipication` block looks like this <xml><block type="math_arithmetic"
        inline="true">\r
              <title name="OP">MULTIPLY</title>\r
            </block></xml>
      courseF_artist_fwp5_2018_markdown_instruction: |-
        Use the function from the last
        puzzle to draw this series of shapes.  \r
        \r
        \r
        The triangle has 21 pixel
        sides, and the sides in each following shape are 7 pixels longer than the
        last.   \r
        Use the `multiplication` block to make this all happen with just
        one function call.\r
        ___\r
        The `multipication` block looks like this <xml><block
        type="math_arithmetic" inline="true">\r
              <title name="OP">MULTIPLY</title>\r
            </block></xml>
      courseF_artist_fwp6_markdown_instruction: |-
        **Challenge:** Edit `draw a spiral
        edge` to use `length` and `sides` parameters, then recreate these shapes.\r
        \r
        -
        The square goes from 3 pixels to 90 pixels.\r
        - The hexagon goes from 3 pixels
        to 100 pixels.\r
        - The triangle goes from 3 pixels to 95 pixels.
      courseF_artist_fwp6_2018_markdown_instruction: |-
        **Challenge:** Edit `draw a
        spiral edge` to use `length` and `sides` parameters, then recreate these shapes.\r
        \r
        -
        The square goes from 3 pixels to 90 pixels.\r
        - The hexagon goes from 3 pixels
        to 100 pixels.\r
        - The triangle goes from 3 pixels to 95 pixels.
      courseF_artist_fwp7_markdown_instruction: |-
        Finish off the `draw a spiral edge`
        function to also ask for a minimum length for the center of the spiral.\r
        \r
        -
        The smallest side in the center of this square is 50 pixels long\r
        - The
        longest side at the outside of this spiral is 200 pixels long
      courseF_artist_fwp7_2018_markdown_instruction: |-
        Finish off the `draw a spiral
        edge` function to also ask for a minimum length for the center of the spiral.\r
        \r
        -
        The smallest side in the center of this square is 50 pixels long\r
        - The
        longest side at the outside of this spiral is 200 pixels long
      courseF_artist_fwp8_markdown_instruction: |-
        Freeplay! Can you figure out how
        to make this drawing using the function that you just created?\r
        \r
        - The
        red spiral goes from 50 to 200 pixels\r
        - The blue spiral goes from 25 to
        150 pixels\r
        - The green spiral goes from 100 to 350 pixels
      courseF_artist_fwp8_2018_markdown_instruction: |-
        Freeplay! Can you figure out
        how to make this drawing using the function that you just created?\r
        \r
        -
        The red spiral goes from 50 to 200 pixels\r
        - The blue spiral goes from 25
        to 150 pixels\r
        - The green spiral goes from 100 to 350 pixels
      courseF_artist_fwp9_markdown_instruction: |-
        **Freeplay:** Below there are functions
        you've written, and more for you to play with. Play with the pen width to
        see how different your drawings look! Suggestions are in the hints!
      courseF_artist_fwp9_2018_markdown_instruction: |-
        **Freeplay:** Below there are
        functions you've written, and more for you to play with. Play with the pen
        width to see how different your drawings look! Suggestions are in the hints!
      courseF_artist_fwp_challenge1_markdown_instruction: |-
        Try running this program.
        Make changes to see what happens. Can you figure out how it works? You can
        also delete it and replace it with something totally different.
      courseF_artist_fwp_challenge1_2018_markdown_instruction: |-
        Try running this
        program. Make changes to see what happens. Can you figure out how it works?
        You can also delete it and replace it with something totally different.
      courseF_artist_fwp_challenge2_markdown_instruction: "Wow! Use what you learned\nin
        the previous level to draw an image like this.\\r\n\\r\n*Hint: Use parameters\nto
        make your code simpler.*\\r\n\\r\n<br/>\\r\n<img src=\"https://images.code.org/d3d6a51fafdcc0a09a5c6b0e0f3c2b92-image-1446239805818.08.59.png\"\nwidth=\"300px\"/>\\r\n<br/>
        \ "
      courseF_artist_fwp_challenge2_2018_markdown_instruction: "Wow! Use what you\nlearned
        in the previous level to draw an image like this.\\r\n\\r\n*Hint: Use\nparameters
        to make your code simpler.*\\r\n\\r\n<br/>\\r\n<img src=\"https://images.code.org/d3d6a51fafdcc0a09a5c6b0e0f3c2b92-image-1446239805818.08.59.png\"\nwidth=\"300px\"/>\\r\n<br/>
        \ "
      courseF_artist_ramp10_markdown_instruction: |-
        Did you know you can put loops
        inside of other loops to make them more powerful?  That's called making a
        "nested loop".\r
        \r
        ___\r
        \r
        Drag the code for the last triangle into
        a new loop to spin it around and make a snowflake!\r
        \r
        *(You will need
        to spin it 6 times at 60 degrees to get this pattern.)*
      courseF_artist_ramp10_2018_markdown_instruction: |-
        Did you know you can put
        loops inside of other loops to make them more powerful?  That's called making
        a "nested loop".\r
        \r
        ___\r
        \r
        Drag the code for the last triangle into
        a new loop to spin it around and make a snowflake!\r
        \r
        *(You will need
        to spin it 6 times at 60 degrees to get this pattern.)*
      courseF_artist_ramp8_markdown_instruction: |-
        Great!  Now let's make a square
        using Artist!  The blocks for artist are a little different than other puzzles,
        but the idea is the same.\r
        ___\r
        Each side of the square has a length of
        200 pixels, and you will need to turn 90 degrees to make each angle.
      courseF_artist_ramp8_2018_markdown_instruction: |-
        Great!  Now let's make a
        square using Artist!  The blocks for artist are a little different than other
        puzzles, but the idea is the same.\r
        ___\r
        Each side of the square has a
        length of 200 pixels, and you will need to turn 90 degrees to make each angle.
      courseF_artist_ramp9_markdown_instruction: |-
        Use what you've learned to draw
        this triangle.\r
        ___\r
        ##### The sides are each 100 pixels long. You will
        need to turn 120 degrees at each corner.
      courseF_artist_ramp9_2018_markdown_instruction: |-
        Use what you've learned to
        draw this triangle.\r
        ___\r
        ##### The sides are each 100 pixels long. You
        will need to turn 120 degrees at each corner.
      courseF_artist_variables10_markdown_instruction: |-
        Here's your code from the
        last puzzle.  Try editing the variable in other ways.  \r
        -  What happens
        if you start out with `length` less than 150? \r
        -  What if you multiply
        your variable by 1.25 each time through?\r
        -  What will your code do if you
        turn 119 degrees?
      courseF_artist_variables10_2018_markdown_instruction: |-
        Here's your code from
        the last puzzle.  Try editing the variable in other ways.  \r
        -  What happens
        if you start out with `length` less than 150? \r
        -  What if you multiply
        your variable by 1.25 each time through?\r
        -  What will your code do if you
        turn 119 degrees?
      courseF_artist_variables2_markdown_instruction: |-
        Now use another loop to draw
        three of those triangles right next to each other.   \r
        \r
        You can nest
        the code from your last puzzle inside.
      courseF_artist_variables2_2018_markdown_instruction: |-
        Now use another loop
        to draw three of those triangles right next to each other.   \r
        \r
        You can
        nest the code from your last puzzle inside.
      courseF_artist_variables3_markdown_instruction: |-
        Before things get tricky,
        can you move the length of 50 into a variable so we can use it in the next
        few puzzles?  \r
        \r
        ![expandable](https://images.code.org/73447d004093c6be8ab01a1358155f16-image-1498068386665.gif)
      courseF_artist_variables3_2018_markdown_instruction: |-
        Before things get tricky,
        can you move the length of 50 into a variable so we can use it in the next
        few puzzles?  \r
        \r
        ![expandable](https://images.code.org/73447d004093c6be8ab01a1358155f16-image-1498068386665.gif)
      courseF_artist_variables4_markdown_instruction: |-
        Now, use the `length` variable
        to have the artist jump forward and down by `length` pixels between triangles.
      courseF_artist_variables4_2018_markdown_instruction: |-
        Now, use the `length`
        variable to have the artist jump forward and down by `length` pixels between
        triangles.
      courseF_artist_variables6_markdown_instruction: |-
        **OOPS!**  \r
        \r
        We actually
        need the triangles to be 60 pixels wide, with 60 pixel jumps.  \r
        \r
        Aren't
        you glad you're using a variable?
      courseF_artist_variables6_2018_markdown_instruction: |-
        **OOPS!**  \r
        \r
        We
        actually need the triangles to be 60 pixels wide, with 60 pixel jumps.  \r
        \r
        Aren't
        you glad you're using a variable?
      courseF_artist_variables6a_markdown_instruction: |-
        Use what you've learned
        to build this design where the squares have 80 pixel sides and the artist
        jumps 80 pixels over and down between each one.
      courseF_artist_variables6a_2018_markdown_instruction: |-
        Use what you've learned
        to build this design where the squares have 80 pixel sides and the artist
        jumps 80 pixels over and down between each one.
      courseF_artist_variables7_markdown_instruction: |-
        Let's start this section
        by drawing a triangle with 150 pixel sides. \r
        \r
        Be sure to use the `length`
        variable and a repeat loop.
      courseF_artist_variables7_2018_markdown_instruction: |-
        Let's start this section
        by drawing a triangle with 150 pixel sides. \r
        \r
        Be sure to use the `length`
        variable and a repeat loop.
      courseF_artist_variables8_markdown_instruction: |-
        Rebuild the triangle code
        from the last puzzle, but this time use the `set length to` block to reset
        the `length` variable to `length`+10 at the end of each loop iteration.\r
        \r
        <xml>\r
        <block
        type="variables_set" inline="false">\r
                                <title
        name="VAR">length</title>\r
                                <value name="VALUE">\r
                                  <block
        type="math_arithmetic" inline="true">\r
                                    <title
        name="OP">ADD</title>\r
                                    <value name="A">\r
                                      <block
        type="variables_get">\r
                                        <title name="VAR">length</title>\r
                                      </block>\r
                                    </value>\r
                                    <value
        name="B">\r
                                      <block type="math_number">\r
                                        <title
        name="NUM">10</title>\r
                                      </block>\r
                                    </value>\r
                                  </block>\r
                                </value>\r
                              </block>\r
        </xml>\r
        \r
        The
        length of the first side of the triangle is 150 pixels.
      courseF_artist_variables8_2018_markdown_instruction: |-
        Rebuild the triangle
        code from the last puzzle, but this time use the `set length to` block to
        reset the `length` variable to `length`+10 at the end of each loop iteration.\r
        \r
        <xml>\r
        <block
        type="variables_set" inline="false">\r
                                <title
        name="VAR">length</title>\r
                                <value name="VALUE">\r
                                  <block
        type="math_arithmetic" inline="true">\r
                                    <title
        name="OP">ADD</title>\r
                                    <value name="A">\r
                                      <block
        type="variables_get">\r
                                        <title name="VAR">length</title>\r
                                      </block>\r
                                    </value>\r
                                    <value
        name="B">\r
                                      <block type="math_number">\r
                                        <title
        name="NUM">10</title>\r
                                      </block>\r
                                    </value>\r
                                  </block>\r
                                </value>\r
                              </block>\r
        </xml>\r
        \r
        The
        length of the first side of the triangle is 150 pixels.
      courseF_artist_variables9_markdown_instruction: |-
        Time to make some art!  \r
        \r
        See
        what happens when you repeat the code from the last puzzle **30** times instead
        of only 3!\r
        \r
        Feel free to make your lines any color or pattern for some
        extra zest.
      courseF_artist_variables9_2018_markdown_instruction: |-
        Time to make some art!  \r
        \r
        See
        what happens when you repeat the code from the last puzzle **30** times instead
        of only 3!\r
        \r
        Feel free to make your lines any color or pattern for some
        extra zest.
      courseF_artist_variablesFP_markdown_instruction: |-
        **Freeplay:** Take what you've
        learned and make your own drawing. \r
        \r
        How can you use variables with
        squares, pentagons, or hexagons?
      courseF_artist_variablesFP_2018_markdown_instruction: |-
        **Freeplay:** Take what
        you've learned and make your own drawing. \r
        \r
        How can you use variables
        with squares, pentagons, or hexagons?
      courseF_artist_variables_10_markdown_instruction: |-
        Here's your code from the
        last puzzle.  Try editing the variable in other ways.  \r
        -  What happens
        if you start out with `length` less than 150? \r
        -  What if you multiply
        your variable by 1.25 each time through?\r
        -  What will your code do if you
        turn 119 degrees?
      courseF_artist_variables_2_markdown_instruction: |-
        Now use another loop to draw
        three of those triangles right next to each other.   \r
        \r
        You can nest
        the code from your last puzzle inside.
      courseF_artist_variables_3_markdown_instruction: |-
        Before things get tricky,
        can you move the length of 50 into a variable so we can use it in the next
        few puzzles?  \r
        <br/>\r
        \r
        <img src="https://images.code.org/e6eac1f6aeb68a9a7584516e28663c14-image-1477533059853.gif"
        width="65%"/>
      courseF_artist_variables_4_markdown_instruction: |-
        Now, use the `length` variable
        to have the artist jump forward and down by `length` pixels between triangles.
      courseF_artist_variables_5_markdown_instruction: |-
        Add another set of loops
        at the end of your code to add three more triangles. This time, move forward
        and up!
      courseF_artist_variables_6_markdown_instruction: |-
        OOPS! We actually need the
        triangles to be 60 pixels wide, with 60 pixel jumps.  \r
        Aren't you glad
        you're using a variable?
      courseF_artist_variables_6a_markdown_instruction: |-
        Use what you've learned
        to build this design where the squares have 80 pixel sides and the artist
        jumps 80 pixels over and down between each one.
      courseF_artist_variables_7_markdown_instruction: |-
        Let's start this section
        by drawing a triangle with 150 pixels sides. \r
        \r
        Be sure to use the `length`
        variable and a repeat loop.
      courseF_artist_variables_8_markdown_instruction: |-
        Rebuild the triangle code
        from the last puzzle, but this time use the `set length to` block to reset
        the `length` variable to `length`+10 at the end of each loop iteration.\r
        \r
        ![](https://images.code.org/6525bebee31ee15b84a48761b2866f53-image-1477531948829.31.37.png)
      courseF_artist_variables_9_markdown_instruction: |-
        Time to make some art!  \r
        See
        what happens when you repeat the code from the last puzzle 30 times instead
        of only 3!\r
        \r
        Feel free to make your lines any color or pattern for some
        extra zest.
      courseF_artist_variables_FP_markdown_instruction: |-
        **Freeplay:** Take what
        you've learned and make your own drawing. \r
        \r
        How can you use variables
        with squares, pentagons, or hexagons?
      courseF_artist_variables_challenge1_markdown_instruction: |-
        Challenge alert!
        Can you create a `length` variable and use it to create this interesting pattern?
      courseF_artist_variables_challenge1_2018_markdown_instruction: |-
        Challenge alert!
        Can you create a `length` variable and use it to create this interesting pattern?
      courseF_artist_variables_challenge1a_markdown_instruction: |-
        <img src="https://images.code.org/7469d6b9aaaae532d864caecb65bd2cc-image-1444706295435.54.39.png"
        width="250px"/>\r
        \r
        You've now learned everything you need to know to
        make a pattern like this! This puzzle is meant to be difficult.  Can you stick
        with it until you figure out the solution?
      courseF_artist_variables_challenge2_markdown_instruction: |-
        <img src="https://images.code.org/7469d6b9aaaae532d864caecb65bd2cc-image-1444706295435.54.39.png"
        width="250px"/>\r
        \r
        You've now learned everything you need to know to
        make a pattern like this! This puzzle is meant to be difficult.  Can you stick
        with it until you figure out the solution?
      courseF_artist_variables_challenge2_2018_markdown_instruction: |-
        <img src="https://images.code.org/7469d6b9aaaae532d864caecb65bd2cc-image-1444706295435.54.39.png"
        width="250px"/>\r
        \r
        You've now learned everything you need to know to
        make a pattern like this! This puzzle is meant to be difficult.  Can you stick
        with it until you figure out the solution?
      courseF_artistembed_variables9_markdown_instruction: |-
        Time to make some art!  \r
        \r
        See
        what happens when you repeat the code from the last puzzle **30** times instead
        of only 3!\r
        \r
        Feel free to make your lines any color or pattern for some
        extra zest.
      courseF_bee_conditionals10_markdown_instruction: |-
        Conditionals can be helpful,
        even when you know exactly what is in each spot!\r
        \r
        Collect all of the
        nectar and make all of the honey.
      courseF_bee_conditionals10_2018_markdown_instruction: |-
        Conditionals can be
        helpful, even when you know exactly what is in each spot!\r
        \r
        Collect all
        of the nectar and make all of the honey.
      courseF_bee_conditionals1_predict1_markdown_instruction: |-
        *"This cloud is
        blocking my view!"*\r
        \r
        Check to see if there's a flower under the cloud.
        If there's a flower, get nectar.
      courseF_bee_conditionals1_predict1_2018_markdown_instruction: |-
        *"This cloud
        is blocking my view!"*\r
        \r
        Check to see if there's a flower under the
        cloud. If there's a flower, get nectar.
      courseF_bee_conditionals2_markdown_instruction: |-
        *"It's too cloudy to see
        any flowers!"*\r
        \r
        Check underneath every cloud to see if it is hiding
        a flower before you get nectar. If there is a flower underneath the cloud,
        the bee will need to get nectar **once**.  \r
        \r
        Remember: Not all clouds
        hide the same thing!
      courseF_bee_conditionals2_2018_markdown_instruction: |-
        *"It's too cloudy to
        see any flowers!"*\r
        \r
        Check underneath every cloud to see if it is hiding
        a flower before you get nectar. If there is a flower underneath the cloud,
        the bee will need to get nectar **once**.  \r
        \r
        Remember: Not all clouds
        hide the same thing!
      courseF_bee_conditionals3_markdown_instruction: |-
        You can only collect nectar
        from flowers, but you can check any space to see if there is a flower. If
        there is a flower under any of these clouds, the bee will need to collect
        nectar **once**.
      courseF_bee_conditionals3_2018_markdown_instruction: |-
        You can only collect
        nectar from flowers, but you can check any space to see if there is a flower.
        If there is a flower under any of these clouds, the bee will need to collect
        nectar **once**.
      courseF_bee_conditionals4_markdown_instruction: |-
        In this puzzle, we know that
        every flower has exactly one nectar, but the flowers aren't spaced evenly.\r
        \r
        Get
        all of the nectar using as few blocks as possible.
      courseF_bee_conditionals4_2018_markdown_instruction: |-
        In this puzzle, we know
        that every flower has exactly one nectar, but the flowers aren't spaced evenly.\r
        \r
        Get
        all of the nectar using as few blocks as possible.
      courseF_bee_conditionals7_predict2_markdown_instruction: |-
        Sometimes a cloud
        covers a flower, sometimes it covers a honeycomb!\r
        \r
        Use the `if/else`
        block to collect nectar at flowers and make honey at honeycomb.
      courseF_bee_conditionals7_predict2_2018_markdown_instruction: |-
        Sometimes a
        cloud covers a flower, sometimes it covers a honeycomb!\r
        \r
        Use the `if/else`
        block to collect nectar at flowers and make honey at honeycomb.
      courseF_bee_conditionals8_markdown_instruction: |-
        **Challenge:** There will
        be either a flower or a honeycomb under each of those clouds!\r
        \r
        Collect
        nectar once if there is a flower. Otherwise, make honey once (because there
        is a honeycomb).
      courseF_bee_conditionals8_2018_markdown_instruction: |-
        **Challenge:** There
        will be either a flower or a honeycomb under each of those clouds!\r
        \r
        Collect
        nectar once if there is a flower. Otherwise, make honey once (because there
        is a honeycomb).
      courseF_bee_for10_markdown_instruction: |-
        **Challenge:** Take what you've learned
        about `for` loops and try to solve this problem. \r
        \r
        Remember: You may
        have to run through solutions multiple times before you figure out all of
        the steps.
      courseF_bee_for10_2018_markdown_instruction: |-
        **Challenge:** Take what you've
        learned about `for` loops and try to solve this problem. \r
        \r
        Remember:
        You may have to run through solutions multiple times before you figure out
        all of the steps.
      courseF_bee_for11_markdown_instruction: |-
        If your loop is counting down, the
        increment is **subtracted** from your counter variable each time through.
        \r
        \r
        What should your increment be to collect 15, then 12, then 9, 6, 3
        nectar?
      courseF_bee_for11_2018_markdown_instruction: |-
        If your loop is counting down,
        the increment is **subtracted** from your counter variable each time through.
        \r
        \r
        What should your increment be to collect 15, then 12, then 9, 6, 3
        nectar?
      courseF_bee_for2_markdown_instruction: |-
        Write the code to help the bee collect
        all of the nectar.\r
        \r
        You will need lots of blocks for this challenge,
        but we'll learn an easier way in the next puzzle.
      courseF_bee_for2_2018_markdown_instruction: |-
        Write the code to help the bee
        collect all of the nectar.\r
        \r
        You will need lots of blocks for this challenge,
        but we'll learn an easier way in the next puzzle.
      courseF_bee_for3_markdown_instruction: |-
        Ah, the `for` loop makes this much
        easier!  \r
        \r
        Try this puzzle using the `for` loop and the `counter` variable
        to see how much shorter your code becomes.
      courseF_bee_for6_markdown_instruction: |-
        You can also use a `for` loop to count
        down. \r
        \r
        Try gathering this nectar by counting down from **5** to **1**
        by **1**.
      courseF_bee_for6_2018_markdown_instruction: |-
        You can also use a `for` loop
        to count down. \r
        \r
        Try gathering this nectar by counting down from **5**
        to **1** by **1**.
      courseF_bee_for7_markdown_instruction: |-
        The last number in your `for` loop
        is called the **"increment"**.  Each time the loop is run, the counter variable
        changes by the value of the **increment**.\r
        \r
        Try collecting these flowers
        using an **increment** of 2.
      courseF_bee_for7_2018_markdown_instruction: |-
        The last number in your `for`
        loop is called the **"increment"**.  Each time the loop is run, the counter
        variable changes by the value of the **increment**.\r
        \r
        Try collecting
        these flowers using an **increment** of 2.
      courseF_bee_for8_markdown_instruction: |
        You've got this!  \r
        \r
        What should
        your **increment** be to collect 3, 6, 9, 12, 15 nectar?\r
      courseF_bee_for8_2018_markdown_instruction: |
        You've got this!  \r
        \r
        What
        should your **increment** be to collect 3, 6, 9, 12, 15 nectar?\r
      courseF_bee_for9_markdown_instruction: |-
        Now, let's combine the `counter` variable
        with a `math` block! \r
        \r
        How can you use the `counter` variable to navigate
        this garden with the fewest number of blocks possible?
      courseF_bee_for9_2018_markdown_instruction: |-
        Now, let's combine the `counter`
        variable with a `math` block! \r
        \r
        How can you use the `counter` variable
        to navigate this garden with the fewest number of blocks possible?
      courseF_bee_for_challenge1_markdown_instruction: |-
        You can use this `for loop`
        to collect all of the nectar. Un-bee-lievable!\r
        \r
        There are a few actions
        that you will want to `repeat 'counter' times`.
      courseF_bee_for_challenge1_2018_markdown_instruction: |-
        You can use this `for
        loop` to collect all of the nectar. Un-bee-lievable!\r
        \r
        There are a few
        actions that you will want to `repeat 'counter' times`.
      courseF_bee_for_challenge2_markdown_instruction: |-
        Solve this puzzle with the
        fewest number of blocks possible.
      courseF_bee_for_challenge2_2018_markdown_instruction: |-
        Solve this puzzle with
        the fewest number of blocks possible.
      courseF_bee_for_challenge3_markdown_instruction: |-
        **For-Loops Super Challenge:**
        Solve this puzzle with the fewest number of blocks possible.
      courseF_bee_functions2_markdown_instruction: |-
        To make things easier, it's
        time to learn about functions!\r
        \r
        From here on out, you will be using
        a new *function editor*.  This editor is a separate window that will appear
        when you go to edit a function.  You won't see all of the code from your
        function while you're coding in the workspace, but don't worry...it's still
        there!  \r
        ___\r
        \r
        Let's practice with this function that gets nectar
        only if the bee is at a flower.  To see the code inside, click the blue "edit"
        button!\r
        \r
        Use the `get only nectar` function to collect the nectar from
        each flower.
      courseF_bee_functions2_2018_markdown_instruction: |-
        To make things easier, it's
        time to learn about functions!\r
        \r
        From here on out, you will be using
        a new *function editor*.  This editor is a separate window that will appear
        when you go to edit a function.  You won't see all of the code from your
        function while you're coding in the workspace, but don't worry...it's still
        there!  \r
        ___\r
        \r
        Let's practice with this function that gets nectar
        only if the bee is at a flower.  To see the code inside, click the blue "edit"
        button!\r
        \r
        Use the `get only nectar` function to collect the nectar from
        each flower.
      courseF_bee_functions3_markdown_instruction: |-
        Now it's your turn to make a
        function to get some honey **only** if there is a honeycomb!  Click "edit"
        to build the `only make honey` function, then use it to solve this puzzle.
      courseF_bee_functions3_2018_markdown_instruction: |-
        Now it's your turn to make
        a function to get some honey **only** if there is a honeycomb!  Click "edit"
        to build the `only make honey` function, then use it to solve this puzzle.
      courseF_bee_functions3a_markdown_instruction: |-
        Each cloud could be hiding either
        one flower or one honeycomb!  Write a function that gets nectar if the bee
        is at a flower, otherwise it gets honey.\r
        \r
        Use your function to solve
        the puzzle!
      courseF_bee_functions3a_2018_markdown_instruction: |-
        Each cloud could be hiding
        either one flower or one honeycomb!  Write a function that gets nectar if
        the bee is at a flower, otherwise it gets honey.\r
        \r
        Use your function
        to solve the puzzle!
      courseF_bee_functions4_markdown_instruction: |-
        Did you know that you can call
        a function from *inside* another function?  \r
        \r
        Use your `check nectar
        or honey` function inside the new `move and check` function to help the bee
        turn, go get what's under the cloud, then back-up and turn back around!
      courseF_bee_functions4_2018_markdown_instruction: |-
        Did you know that you can
        call a function from *inside* another function?  \r
        \r
        Use your `check nectar
        or honey` function inside the new `move and check` function to help the bee
        turn, go get what's under the cloud, then back-up and turn back around!
      courseF_bee_functions5a_markdown_instruction: |-
        Now, build `move and check`
        so that it takes the bee to the cloud whenever there is a path to the right,
        then use it to solve this puzzle!
      courseF_bee_functions5a_2018_markdown_instruction: |-
        Now, build `move and check`
        so that it takes the bee to the cloud whenever there is a path to the right,
        then use it to solve this puzzle!
      courseF_bee_functions6_markdown_instruction: |-
        *"This field is a-MAZE-ing!"*\r
        \r
        Build
        your own function to help the bee through the maze by turning left at flowers
        and right at honeycomb.  Don't forget to collect nectar and make honey along
        the way!
      courseF_bee_functions6_2018_markdown_instruction: |-
        *"This field is a-MAZE-ing!"*\r
        \r
        Build
        your own function to help the bee through the maze by turning left at flowers
        and right at honeycomb.  Don't forget to collect nectar and make honey along
        the way!
      courseF_bee_functions7_markdown_instruction: |-
        Rebuild your function from the
        last puzzle to solve this maze.\r
        \r
        Turn left at the honeycomb and right
        at the flowers.  \r
        **Note:** Some corners are unmarked!
      courseF_bee_functions7_2018_markdown_instruction: |-
        Rebuild your function from
        the last puzzle to solve this maze.\r
        \r
        Turn left at the honeycomb and
        right at the flowers.  \r
        **Note:** Some corners are unmarked!
      courseF_bee_functions8a_markdown_instruction: |-
        Underneath this cloud, there
        might be a flower with an unknown amount of nectar, or a honeycomb with an
        unknown amount of honey.  \r
        \r
        Can you write a program that can handle
        either?
      courseF_bee_functions8a_2018_markdown_instruction: |-
        Underneath this cloud,
        there might be a flower with an unknown amount of nectar, or a honeycomb with
        an unknown amount of honey.  \r
        \r
        Can you write a program that can handle
        either?
      courseF_bee_functionsPre7_markdown_instruction: |-
        Now try building a function
        to solve this maze.  How is it different from last time?  \r
        \r
        Turn left
        at the honeycomb and right at the flowers.  \r
        **Note:** Some corners are
        unmarked!
      courseF_bee_functionsPre7_2018_markdown_instruction: |-
        Now try building a function
        to solve this maze.  How is it different from last time?  \r
        \r
        Turn left
        at the honeycomb and right at the flowers.  \r
        **Note:** Some corners are
        unmarked!
      courseF_bee_functions_challenge1_markdown_instruction: |-
        Create a new function
        to collect all the nectar and honey while there is a path ahead. Use it to
        complete the puzzle!
      courseF_bee_functions_challenge1_2018_markdown_instruction: |-
        Create a new function
        to collect all the nectar and honey while there is a path ahead. Use it to
        complete the puzzle!
      courseF_bee_functions_challenge2_markdown_instruction: |-
        Use everything you
        have learned to complete this puzzle!
      courseF_bee_functions_challenge2_2018_markdown_instruction: |-
        Use everything
        you have learned to complete this puzzle!
      courseF_bee_functions_challenge2_recursion_markdown_instruction: |-
        Underneath
        this cloud, there might be a flower with an unknown amount of nectar, or a
        honeycomb with an unknown amount of honey.  \r
        \r
        Can you write a program
        that can handle either?
      courseF_bee_fwp1_markdown_instruction: |
        Check beneath the clouds to see if
        the flowers have any nectar.  \r
        \r
        For this whole stage, each flower will
        have exactly **one** unit of nectar, and each honeycomb will need exactly
        **one** unit of honey. \r
        \r
        \r
      courseF_bee_fwp1_2018_markdown_instruction: |
        Check beneath the clouds to see
        if the flowers have any nectar.  \r
        \r
        For this whole stage, each flower
        will have exactly **one** unit of nectar, and each honeycomb will need exactly
        **one** unit of honey. \r
        \r
        \r
      courseF_bee_fwp2_markdown_instruction: |-
        Here's some code that solves the last
        puzzle.  \r
        Let's pull it into a function, then call the function to check
        this row for nectar.  \r
        ___\r
        This may seem like a strange step now, but
        it will be really helpful soon!
      courseF_bee_fwp2_2018_markdown_instruction: |-
        Here's some code that solves
        the last puzzle.  \r
        Let's pull it into a function, then call the function
        to check this row for nectar.  \r
        ___\r
        This may seem like a strange step
        now, but it will be really helpful soon!
      courseF_bee_fwp3_markdown_instruction: |-
        Time to put the function to the test!
        \r
        \r
        Let's see if it makes collecting these three rows of nectar any easier.
      courseF_bee_fwp3_2018_markdown_instruction: |-
        Time to put the function to the
        test! \r
        \r
        Let's see if it makes collecting these three rows of nectar
        any easier.
      courseF_bee_fwp4_markdown_instruction: |-
        *"How is your function holding up?"*   \r
        \r
        We
        need to make some adjustments here. Click "edit" to add a `length` parameter
        to the function so that it will still work when the row is a different length.
      courseF_bee_fwp4_2018_markdown_instruction: |-
        *"How is your function holding
        up?"*   \r
        \r
        We need to make some adjustments here. Click "edit" to
        add a `length` parameter to the function so that it will still work when the
        row is a different length.
      courseF_bee_fwp5_markdown_instruction: |-
        *"You're doing great so far!"*\r
        \r
        Let's
        use this function to collect the nectar.
      courseF_bee_fwp5_2018_markdown_instruction: |-
        *"You're doing great so far!"*\r
        \r
        Let's
        use this function to collect the nectar.
      courseF_bee_fwp6_markdown_instruction: |-
        You can make code shorter and more
        efficient when you combine functions with other programming elements.  \r
        ___\r
        What
        blocks can you use with your function to build a short and sweet solution
        to this puzzle?
      courseF_bee_fwp6_2018_markdown_instruction: |-
        You can make code shorter and
        more efficient when you combine functions with other programming elements.  \r
        ___\r
        What
        blocks can you use with your function to build a short and sweet solution
        to this puzzle?
      courseF_bee_fwp7_markdown_instruction: |-
        **Challenge:** Something looks a little
        different. Modify your function to make honey as well.
      courseF_bee_fwp7_2018_markdown_instruction: |-
        **Challenge:** Something looks
        a little different. Modify your function to make honey as well.
      courseF_bee_fwp_challenge1_markdown_instruction: |-
        Use one `for loop` in a function
        to collect all of the corn. The same `for loop` can count to different maximum
        values by using the `length` parameter.
      courseF_bee_fwp_challenge1_2018_markdown_instruction: |-
        Use one `for loop` in
        a function to collect all of the corn. The same `for loop` can count to different
        maximum values by using the `length` parameter.
      courseF_bee_fwp_challenge2_markdown_instruction: |-
        *"**Lettuce** see if you
        can handle this one final test! Give it everything you've got!"*\r
        \r
        Use
        one `for loop` in a function to collect all of the vegetables in the row.
        Make the `for loop` count to different maximum values by using the `length`
        parameter. Make your program as short as possible by using a second `for loop`
        outside the function.\r
        \r
        Good luck!
      courseF_bee_fwp_challenge2_2018_markdown_instruction: |-
        *"**Lettuce** see if
        you can handle this one final test! Give it everything you've got!"*\r
        \r
        Use
        one `for loop` in a function to collect all of the vegetables in the row.
        Make the `for loop` count to different maximum values by using the `length`
        parameter. Make your program as short as possible by using a second `for loop`
        outside the function.\r
        \r
        Good luck!
      courseF_maze_ramp1_markdown_instruction: |-
        For this puzzle, connect all of the
        blocks from the workspace together below the <xml><block type="when_run"/></xml>
        block and click "Run" to watch it go!
      courseF_maze_ramp13_markdown_instruction: |-
        Time for another Angry Birds puzzle
        to pull it all together!\r
        \r
        Use nested loops to get the bird to the pig.
      courseF_maze_ramp15_markdown_instruction: |-
        *"It's time to get angry!"*\r
        \r
        **Challenge:**
        Use what you've learned to get the bird to the pig!
      courseF_maze_ramp1_2018_markdown_instruction: |-
        For this puzzle, connect all
        of the blocks from the workspace together below the <xml><block type="when_run"/></xml>
        block and click "Run" to watch it go!
      courseF_maze_ramp2_markdown_instruction: |-
        Drag a <xml><block type="controls_repeat"><title
        name="TIMES">7</title></block></xml> block out of the toolbox and attach
        it to the <xml><block type="when_run"/></xml> event.\r
        \r
        Place the <xml><block
        type="maze_moveForward"/></xml> block inside the loop to finish your code.
      courseF_maze_ramp2_2018_markdown_instruction: |-
        Drag a <xml><block type="controls_repeat"><title
        name="TIMES">7</title></block></xml> block out of the toolbox and attach
        it to the <xml><block type="when_run"/></xml> event.\r
        \r
        Place the <xml><block
        type="maze_moveForward"/></xml> block inside the loop to finish your code.
      courseF_maze_ramp4_markdown_instruction: |-
        *"Trace the path and lead me to
        the silly pig."* \r
        \r
        Avoid TNT or feathers will fly!
      courseF_maze_ramp4_2018_markdown_instruction: |-
        *"Trace the path and lead me
        to the silly pig."* \r
        \r
        Avoid TNT or feathers will fly!
      courseF_maze_ramp5_markdown_instruction: |-
        *"Follow this path to get me to
        the pig!"*\r
        \r
        Avoid the TNT.
      courseF_maze_ramp5_2018_markdown_instruction: |-
        *"Follow this path to get me
        to the pig!"*\r
        \r
        Avoid the TNT.
      courseF_maze_ramp6_markdown_instruction: |-
        *"Keep calm and help me find the
        bad pig. Otherwise I might get angry!"*\r
        \r
        When you have several blocks
        in a row, try moving them inside of a <xml><block type="controls_repeat"><title
        name="TIMES">???</title></block></xml> loop.  This will do the same thing
        with less code!
      courseF_maze_ramp6_2018_markdown_instruction: |-
        *"Keep calm and help me find
        the bad pig. Otherwise I might get angry!"*\r
        \r
        When you have several
        blocks in a row, try moving them inside of a <xml><block type="controls_repeat"><title
        name="TIMES">???</title></block></xml> loop.  This will do the same thing
        with less code!
      courseF_maze_ramp7_markdown_instruction: |-
        *"It's time to get angry!"*\r
        \r
        **Challenge:**
        Use what you've learned to get the bird to the pig!
      courseF_playlab_variables0_markdown_instruction: |
        This is Pirate Pegleg.  He's
        awfully hard to understand these days!  \r
        \r
        Decode his speech by changing
        these pieces of text in the code:\r
        - "arrrg" should be "a" \r
        - "ye"
        should be "e"\r
        \r
      courseF_playlab_variables1_markdown_instruction: |
        This is Pirate Pegleg.  He's
        awfully hard to understand these days!  \r
        \r
        Decode his speech by changing
        these pieces of text in the code:\r
        - "arrrg" should be "a" \r
        - "ye"
        should be "e"\r
        \r
      courseF_playlab_variables1a_markdown_instruction: |-
        Variables can be used to
        store text that you want to use later.  \r
        \r
        Have Kiki, the soccer player,  scream
        "Goal!" by assigning that text to the `shout` variable.
      courseF_playlab_variables1a_2018_markdown_instruction: |-
        Variables can be used
        to store text that you want to use later.  \r
        \r
        Have Kiki, the soccer player,  scream
        "Goal!" by assigning that text to the `shout` variable.
      courseF_playlab_variables2_markdown_instruction: |
        Now, decode Pirate Pegleg's
        speech by changing the value of the variables in just two places!   \r
        -
        "arrrg" should be "a" \r
        - "ye" should be "e"\r
        \r
      courseF_playlab_variables2a_markdown_instruction: |
        Now, decode Pirate Pegleg's
        speech by changing the value of the variables in just two places!   \r
        -
        "arrrg" should be "a" \r
        - "ye" should be "e"\r
        \r
      courseF_playlab_variables2b RYAN CLONE_markdown_instruction: |-
        We can make sentences
        more interesting by mixing pieces of text with variables.\r
        \r
        Insert the
        variable `color` into the middle of a sentence by putting it into the empty
        slot in the `join` block.
      courseF_playlab_variables2b_markdown_instruction: |-
        We can make sentences more
        interesting by mixing pieces of text with variables.\r
        \r
        Insert the variable
        `color` into the middle of a sentence by putting it into the empty slot in
        the `join` block.
      courseF_playlab_variables2b_2018_markdown_instruction: |-
        We can make sentences
        more interesting by mixing pieces of text with variables.\r
        \r
        Insert the
        variable `color` into the middle of a sentence by putting it into the empty
        slot in the `join` block.
      courseF_playlab_variables3_markdown_instruction: |
        Great!  Now that you understand
        how to have a character use a variable to speak, we can introduce the `ask`
        block.  \r
        \r
        The `ask` block will automatically store whatever the user
        answers into the variable of your choice.  \r
        \r
        Run this program and enter
        something for Pegleg to say.\r
        \r
      courseF_playlab_variables3b_markdown_instruction: "Help Kiki have a conversation\nwith
        Brian by using the variable `age` in all of the places where age `12`\nshould
        be used. "
      courseF_playlab_variables3bEdit_markdown_instruction: "Help Kiki have a conversation\nwith
        Brian by using the variable `A1` in all of the places where age `12`\nshould
        be used. "
      courseF_playlab_variables3b_josh_markdown_instruction: "Help Kiki have a conversation\nwith
        Brian by using the variable `age` in all of the places where age `12`\nshould
        be used. "
      courseF_playlab_variables3b_josh_2018_markdown_instruction: "Help Kiki have\na
        conversation with Brian by using the variable `age` in all of the places\nwhere
        age `12` should be used. "
      courseF_playlab_variables4_markdown_instruction: |
        Now we're going to join
        a variable to the beginning of Pegleg's next sentence using the `create text
        with` block. \r
        \r
        Can you find the correct variable in the toolbox to fill
        in the slot?\r
        \r
      courseF_playlab_variables4b_markdown_instruction: |-
        Now, Pirate Pegleg has some
        questions for Brian.\r
        \r
        This code uses an `ask` block, so you can type
        Brian's answers after you click "Run". \r
        \r
        Put the variables in the
        correct places to create this conversation.
      courseF_playlab_variables4b_2018_markdown_instruction: |-
        Now, Pirate Pegleg
        has some questions for Brian.\r
        \r
        This code uses an `ask` block, so you
        can type Brian's answers after you click "Run". \r
        \r
        Put the variables
        in the correct places to create this conversation.
      courseF_playlab_variables5_markdown_instruction: |-
        Now we're going to add a
        variable into the middle of Pegleg's sentence using more than one `create
        text with` block. \r
        \r
        Here is how you link `create text with` blocks together
        to form longer sentences:\r
        \r
        ![](https://images.code.org/1c9bdc9e73d60b5ed053c3c4e9e1dcd4-image-1476993588379.gif)
      courseF_playlab_variables5b_markdown_instruction: |-
        Pirate Pegleg is going to
        ask **you** some questions.\r
        \r
        Put all of the variables in the correct
        place so that his story makes sense.
      courseF_playlab_variables5c RYAN Copy_markdown_instruction: |-
        Let's combine
        the `ask` block with an `if/else` statement to make a game!\r
        \r
        Pirate
        Pegleg is going to ask you a question.  Drag a copy of the `answer` variable
        into the conditional for the `if` statement to check whether or not you entered
        the correct color.
      courseF_playlab_variables5c_markdown_instruction: |-
        Let's combine the `ask`
        block with an `if/else` statement to have some fun!\r
        \r
        Pirate Pegleg is
        going to ask you a question.  Drag a copy of the `answer` variable into the
        conditional for the `if` statement to check whether or not you entered the
        correct color.
      courseF_playlab_variables5c_2018_markdown_instruction: |-
        Let's combine the
        `ask` block with an `if/else` statement to have some fun!\r
        \r
        Pirate Pegleg
        is going to ask you a question.  Drag a copy of the `answer` variable into
        the conditional for the `if` statement to check whether or not you entered
        the correct color.
      courseF_playlab_variables6b_markdown_instruction: |-
        You cannot fit much text
        in an actor's speech bubble, so sometimes you need to make the actor say
        something more than once.  \r
        \r
        We have provided some starter questions
        and variables for you. Join them together to make a fun story that takes more
        than one speech bubble to tell.
      courseF_playlab_variables6c_markdown_instruction: |-
        In the rest of this stage,
        we will use multiple `ask` blocks and multiple `if/else` statements to create
        a game that **you** control!\r
        \r
        Start by setting the "codename" variable
        to a word that you can remember.  Then, use an `ask` block to get a codename
        from the users.  You will need an `if/else` block to see if the codename entered
        matches the codename that you have set.
      courseF_playlab_variables6c_2018_markdown_instruction: |-
        In the rest of this
        stage, we will use multiple `ask` blocks and multiple `if/else` statements
        to create a game that **you** control!\r
        \r
        Start by setting the "codename"
        variable to a word that you can remember.  Then, use an `ask` block to get
        a codename from the users.  You will need an `if/else` block to see if the
        codename entered matches the codename that you have set.
      courseF_playlab_variables7b_markdown_instruction: |-
        Time to make your own project!  \r
        \r
        Create
        some questions and weave the answers together into your very own story.\r
        \r
        If
        you need ideas, click the hints icon.
      courseF_playlab_variables7b_2018_markdown_instruction: |-
        Time to make your own
        project!  \r
        \r
        Create some questions and weave the answers together into
        your very own story.\r
        \r
        If you need ideas, click the hints icon.
      courseF_playlab_variables7c_markdown_instruction: |-
        Add another `ask` block
        to ask the user to guess a color.  \r
        \r
        Keep your `if/else` statement such
        that your codename always wins the game, but every other codename always loses.
      courseF_playlab_variables7c_2018_markdown_instruction: |-
        Add another `ask` block
        to ask the user to guess a color.  \r
        \r
        Keep your `if/else` statement such
        that your codename always wins the game, but every other codename always loses.
      courseF_playlab_variables8b_markdown_instruction: |-
        Use what you've learned
        to create an improv scene between the actors.\r
        \r
        **Improv:** *A scene
        that actors make up on stage using information from the audience.*
      courseF_playlab_variables8c_markdown_instruction: |-
        Use the `join` block (in
        the toolbox under "Text") to make the win/lose messages more personal by
        incorporating both the `codename` and the `color` variables into the responses.
      courseF_playlab_variables8c_2018_markdown_instruction: |-
        Use the `join` block
        (in the toolbox under "Text") to make the win/lose messages more personal
        by incorporating both the `codename` and the `color` variables into the responses.
      courseF_playlab_variables_challenge1_markdown_instruction: |-
        Use these blocks
        to make the actors share a knock-knock joke. Change the punchline and setup
        to tell your own joke!
      courseF_playlab_variables_challenge1_2018_markdown_instruction: |-
        Use these
        blocks to make the actors share a knock-knock joke. Change the punchline and
        setup to tell your own joke!
      courseF_playlab_variables_challenge2_markdown_instruction: |-
        Now for a game
        of tag! Tag Cat (actor 2) to get 2 points. Tag Penguin (actor 3) to get 3
        points.  Get exactly 10 points to win!  \r
         \r
        But be careful, when Cat
        and Penguin tag each other, they take points away.\r
        \r
        ---\r
        \r
        Add the
        blocks necessary to make this game work the way it's been explained.\r
        -
        How will you get Dog to move in all directions using the arrow keys?\r
        -
        How will you add points when Dog tags Cat or Penguin?\r
        - How will you subtract
        points when Cat and Penguin touch?
      courseF_playlab_variables_challenge2_2018_markdown_instruction: |-
        Now for a
        game of tag! Tag Cat (actor 2) to get 2 points. Tag Penguin (actor 3) to get
        3 points.  Get exactly 10 points to win!  \r
         \r
        But be careful, when Cat
        and Penguin tag each other, they take points away.\r
        \r
        ---\r
        \r
        Add the
        blocks necessary to make this game work the way it's been explained.\r
        -
        How will you get Dog to move in all directions using the arrow keys?\r
        -
        How will you add points when Dog tags Cat or Penguin?\r
        - How will you subtract
        points when Cat and Penguin touch?
      courseF_playlab_variables_challenge3_markdown_instruction: |-
        Can you figure
        out how this "Fortune Teller" app works? Try adding some of the following
        features to this game:\r
        \r
        * Change the "yes" and "no" answers to something
        more interesting.\r
        * Let the player ask another question after the actor
        says the fortune.\r
        * Give the witch two more things to say when she is in
        an `angry` or `normal` mood.\r
        * Give the wizard his own set of fortunes.\r
        *
        Make each actor change mood randomly.\r
        \r
        Check the hints if you need help
        with these challenges!
      course_playlab_variables1_markdown_instruction: |
        This is Pirate Pegleg.  He's
        awfully hard to understand these days!  \r
        \r
        Decode his speech by changing
        these pieces of text in the code:\r
        - "arrrg" should be "a" \r
        - "ye"
        should be "e"\r
        \r
      course_playlab_variables2_markdown_instruction: |
        Now, decode Pirate Pegleg's
        speech by changing the value of the variables in just two places!   \r
        -
        "arrrg" should be "a" \r
        - "ye" should be "e"\r
        \r
      course_playlab_variables3_markdown_instruction: |
        Now, decode Pirate Pegleg's
        speech by changing the value of the variables in just two places!   \r
        -
        "arrrg" should be "a" \r
        - "ye" should be "e"\r
        \r
      coursea_maze_ramp1_2018_markdown_instruction: |-
        To get the bird to the pig,
        snap the <xml><block type="maze_moveEast"/></xml> block to the bottom of
        the <xml><block type="when_run"/></xml> block, then press ![](https://images.code.org/473d3e1e4a05104502a99048338a45df-image-1522887336604.11.32.png)!
      coursef_maze_ramp3_markdown_instruction: |-
        *"This pig is ruffling my feathers."*\r
        \r
        There
        is one extra block that is going to cause the bird to crash.  \r
        Throw it
        away by dragging it back to the toolbox.
      coursef_maze_ramp3_2018_markdown_instruction: |-
        *"This pig is ruffling my feathers."*\r
        \r
        There
        is one extra block that is going to cause the bird to crash.  \r
        Throw it
        away by dragging it back to the toolbox.
      csd-post-survey-2017-FR_markdown_instruction: |-
        Anything else you'd like to
        say about your experience in the course?
      csd-pulse-check-survey-1-free-response U1Ch2_markdown_instruction: |-
        Anything
        else you’d like your teacher to know?
      csd-pulse-check-survey-1-free-response U2Ch1_markdown_instruction: |-
        Anything
        else you’d like your teacher to know?
      csd-pulse-check-survey-1-free-response U2Ch2_markdown_instruction: |-
        Anything
        else you’d like your teacher to know?
      csd-pulse-check-survey-1-free-response U3Ch1_markdown_instruction: |-
        Anything
        else you’d like your teacher to know?
      csd-pulse-check-survey-1-free-response U3Ch2_markdown_instruction: |-
        Anything
        else you’d like your teacher to know?
      csd-pulse-check-survey-1-free-response U4Ch1_markdown_instruction: |-
        Anything
        else you’d like your teacher to know?
      csd-pulse-check-survey-1-free-response U4Ch2_markdown_instruction: |-
        Anything
        else you’d like your teacher to know?
      csd-pulse-check-survey-1-free-response U5Ch1_markdown_instruction: |-
        Anything
        else you’d like your teacher to know?
      csd-pulse-check-survey-1-free-response U5Ch2_markdown_instruction: |-
        Anything
        else you’d like your teacher to know?
      csd-pulse-check-survey-1-free-response U6Ch1_markdown_instruction: |-
        Anything
        else you’d like your teacher to know?
      csd-pulse-check-survey-1-free-response U6Ch1_2018_markdown_instruction: |-
        Anything
        else you’d like your teacher to know?
      csd-pulse-check-survey-1-free-response U6Ch2_markdown_instruction: |-
        Anything
        else you’d like your teacher to know?
      csd-pulse-check-survey-1-free-response U6Ch2_2018_markdown_instruction: |-
        Anything
        else you’d like your teacher to know?
      csd-pulse-check-survey-1-free-response_markdown_instruction: |-
        Anything else
        you’d like your teacher to know?
      csd-thursday-facilitation_markdown_instruction: |
        # Thursday Facilitation Reflection\r
        \r
        ##
        Discussion-Based Sessions\r
        \r
        You have now seen a couple discussion heavy
        sessions. Some specific examples include the Community (Wednesday), and Recruitment/Student
        Needs (Thursday) sessions. What common facilitator strategies were used in
        these sessions?\r
        \r
        * What are facilitators doing?\r
        * What are teachers
        doing?\r
      csd-thursday-pedagogy_markdown_instruction: "# Thursday Pedagogy Reflection\nPart
        1\\r\n\\r\n## Differentiating Instruction\\r\n\\r\nWhat strategies have you\nlearned
        about for differentiating instruction to meet diverse learning needs\nof students
        in CS Discoveries? List at least two ideas. "
      csd-thursday-pedagogy2_markdown_instruction: |
        # Thursday Pedagogy Reflection
        Part 2\r
        \r
        ## Recruiting and Student Needs\r
        \r
        In the community session
        this morning you talked about recruiting students and meeting students needs
        in the region where you work. (If you were not with your region think about
        what you experienced in this sessions that might apply to your region.)\r
        \r
        *
        What were common recruiting pain points teachers in your region shared?\r
        *
        What were common student support needs teachers in your region shared?\r
        *
        What things did you see today that you want to check in on throughout the
        year?\r
        * What recruiting goals do you hope to help accomplish in your region
        by the end of the year?\r
      csd-thursday-unit_markdown_instruction: |
        # Thursday Unit Reflection Part 1
        \r
        \r
        ## Game Lab\r
        \r
        How would you explain programming in Game Lab to
        a new teacher who is interested in using it? \r
        \r
        * In what ways is Game
        Lab an educational rather than professional tool? \r
        * What kind of supports
        exist for students using Game Lab?\r
      csd-thursday-unit2_markdown_instruction: |-
        # Thursday Unit Reflection Part 2\r
        \r
        ##
        Teachers in Plugged Unit\r
        \r
        What’s the role of the teacher in this unit,
        where much of the computer science content is embedded in the levels?
      csd-tuesday-facilitation_markdown_instruction: |
        # Facilitation Reflection\r
        \r
        ##
        TLOs\r
        \r
        You have seen 3 Model TLOs (taught by facilitators) and 2 Participant
        TLOs (taught by teachers). What patterns do you notice about what facilitators
        do during these sessions (consider the lessons themselves and the debriefs)?\r
        \r
        *
        What are facilitators doing during lessons?\r
        * What are facilitators doing
        during debriefs?\r
        * How much time is split between time when facilitators
        are talking and time when teachers are doing? \r
      csd-tuesday-pedagogy_markdown_instruction: |-
        # Tuesday Pedagogy Reflection\r
        \r
        ##
        Classroom Practices\r
        \r
        Name two <a href="https://docs.google.com/document/d/1FhHPqlC6dU_z9retuBYb-duUwyKpnjwuEgjF4zfdhvI/edit#heading=h.xbvgs2732c34">
        Classroom Practices</a> you saw modeled in the 5 TLOs you’ve seen in the past
        couple of days? \r
        \r
        * When were they successful?\r
        * What were characteristics
        of situations where was their room for improvement?
      csd-tuesday-unit_markdown_instruction: |-
        # Tuesday Unit Reflection Part 1\r
        \r
        ##
        Unit 1 Unplugged\r
        \r
        How would you respond to a teacher who asks why the
        first unit does not use computers?
      csd-tuesday-unit2_markdown_instruction: |-
        # Tuesday Unit Reflection Part 2\r
        \r
        ##
        Positive Classroom Community\r
        \r
        In what ways does the curriculum support
        building a positive classroom community?
      csd-wednesday-facilitation_markdown_instruction: |
        # Wednesday Facilitation
        Reflection\r
        \r
        ## Facilitator Presentations\r
        \r
        You have now seen 3
        morning kick off sessions and 3 afternoon wrap up sessions. What common facilitator
        strategies were used in these sessions?\r
        \r
        * What are facilitators doing?\r
        *
        What are teachers doing?\r
        * What strategies did you see facilitators use
        to keep teachers engaged?\r
      csd-wednesday-pedagogy_markdown_instruction: |
        # Wednesday Pedagogy Reflection\r
        \r
        ##
        Building Community & Dealing with Barriers\r
        \r
        In the community session
        this morning you talked about building community and dealing with barriers
        to growing your CS education community locally. (If you were not with your
        region think about what you experienced in this sessions that might apply
        to your region.)\r
        \r
        * What were common barriers teachers in your region
        shared?\r
        * What barriers do you personally experience that were shared by
        teachers? \r
        * What can you do to help in your local community?\r
        * What
        things did you see today that you want to check in on throughout the year?\r
        *
        What community development goals do you hope to help accomplish in your region
        by the end of the year?\r
      csd-wednesday-unit_markdown_instruction: |-
        # Wednesday Unit Reflection Part
        1\r
        \r
        ## Unit 1 and Unit 2 Connections\r
        \r
        What connections or hooks
        into Unit 1 can be used to motivate early lessons in Unit 2?
      csd-wednesday-unit2_markdown_instruction: |
        # Wednesday Unit Reflection Part
        2\r
        \r
        ## Web Lab\r
        \r
        How would you explain Web Lab to a new teacher
        who is interested in using it?\r
        \r
        * In what ways is Web Lab an educational
        rather than professional tool? \r
        * What kind of supports exist for students
        working Web Lab?\r
      csd1dlp-assessment_markdown_instruction: |
        <br><br>\r
        \r
        > **NOTE: before
        you start this reflection, make sure you’ve reviewed the lesson in Unit 1,
        and have a good sense of the the role of assessment across the unit. If you
        haven’t already reviewed the materials, do that now and come back to this
        reflection later.**\r
        \r
        \r
        # Assessment in Unit 1\r
        \r
        For this reflection,
        you’re going to consider each of the prompts below and craft a written response
        that demonstrates your understanding of the lessons in Unit 1. Your response
        should clearly address each of the items below: \r
        \r
        1. What summative
        and formative assessment opportunities are built into the unit? \r
        \t* What’s
        the role of the project(s) in the unit? \r
        \t* How does the project(s) apply
        content and skills that were developed during the unit? \r
        2. Which student
        practices (PPCCC) are honed the most in this unit through the activities and
        projects? \r
        3. What are the core 2017 CSTA standards or threads of the K-12
        framework in this unit?\r
        \r
        \r
        >## Getting Credit for Completing this
        Reflection \r
        \r
        >- Once you submit your reflection, your response to the
        prompt above will be shared anonymously and reviewed by your peers, and you
        will review the work done by other facilitators. Reviewers will be looking
        for thoughtful and thorough answers that demonstrate that you have spent time
        considering the reflection questions listed above. Reviewers will have an
        opportunity to give feedback on your submission, and you can respond to that
        feedback and resubmit.\r
        - In order to get credit for completing this prompt,
        two reviewers need to agree that you have responded to the prompts fully.
        If reviewers don’t feel comfortable making a decision about your task submission,
        they can elevate to an instructor for review. You will always have a chance
        to address feedback from your reviewers and resubmit your reflections! Reviewer
        feedback will show up at the bottom of this page, once it’s available. \r

        \r
        \r
      csd1dlp-lessons_markdown_instruction: |
        <br><br>\r
        \r
        > **NOTE: Before you
        start this reflection, make sure you’ve reviewed the lessons in Unit 1 and
        have a good sense of the connections between lessons. If you haven’t already
        reviewed the materials, do that now and come back to this reflection later.**\r
        \r
        \r
        #
        Unit 1 Lesson Connections and Philosophy\r
        \r
        For this reflection, you’re
        going to consider each of the prompts below and craft a written response that
        demonstrates your understanding of the lessons in Unit 1. Your response should
        clearly address each of the items below: \r
        \r
        1. What does a typical lesson
        in this unit look like? \r
        \r
        2. What is the connection between early lessons
        and later lessons?\r
        \r
        3. Where do you see the Curriculum Values and philosophy
        emphasized in this unit?\r
        \t- In what ways does the curriculum support building
        a positive classroom community?\r
        \r
        4. How does the Input-Output-Store-Process
        model help prepare a student to think more deeply about the way computers
        help us to solve problems?\r
        \r
        \r
        >## Getting Credit for Completing this
        Reflection \r
        \r
        >- Once you submit your reflection, your response to the
        prompt above will be shared anonymously and reviewed by your peers, and you
        will review the work done by other facilitators. Reviewers will be looking
        for thoughtful and thorough answers that demonstrate that you have spent time
        considering the reflection questions listed above. Reviewers will have an
        opportunity to give feedback on your submission, and you can respond to that
        feedback and resubmit.\r
        - In order to get credit for completing this prompt,
        two reviewers need to agree that you have responded to the prompts fully.
        If reviewers don’t feel comfortable making a decision about your task submission,
        they can elevate to an instructor for review. You will always have a chance
        to address feedback from your reviewers and resubmit your reflections! Reviewer
        feedback will show up at the bottom of this page, once it’s available. \r

        \r
        \r
      csd1dlp-tools_markdown_instruction: |
        \r
        \r
        <br><br>\r
        \r
        > **NOTE: before
        you start this reflection, make sure you’ve reviewed the lesson in Unit 1,
        and have a good sense of the the role of tools in the lessons. If you haven’t
        already reviewed the materials, do that now and come back to this reflection
        later.**\r
        \r
        \r
        # Unit 1 Tool Philosophy and Use\r
        \r
        For this reflection,
        you’re going to consider each of the prompts below and craft a written response
        that demonstrates your understanding of the lessons in Unit 1. Your response
        should clearly address each of the items below: \r
        \r
        - How would you respond
        to a teacher who asks why is the first unit does not use computers?\r
        \r
        \r
        >##
        Getting Credit for Completing this Reflection \r
        \r
        >- Once you submit your
        reflection, your response to the prompt above will be shared anonymously and
        reviewed by your peers, and you will review the work done by other facilitators.
        Reviewers will be looking for thoughtful and thorough answers that demonstrate
        that you have spent time considering the reflection questions listed above.
        Reviewers will have an opportunity to give feedback on your submission, and
        you can respond to that feedback and resubmit.\r
        - In order to get credit
        for completing this prompt, two reviewers need to agree that you have responded
        to the prompts fully. If reviewers don’t feel comfortable making a decision
        about your task submission, they can elevate to an instructor for review.
        You will always have a chance to address feedback from your reviewers and
        resubmit your reflections! Reviewer feedback will show up at the bottom of
        this page, once it’s available. \r
         \r
        \r
        \r
      csd2dlp-assessment_markdown_instruction: |
        <br><br>\r
        \r
        > **NOTE: before
        you start this reflection, make sure you’ve reviewed the lesson in Unit 2,
        and have a good sense of the the role of assessment across the unit. If you
        haven’t already reviewed the materials, do that now and come back to this
        reflection later.**\r
        \r
        \r
        # Assessment in Unit 2\r
        \r
        For this reflection,
        you’re going to consider each of the prompts below and craft a written response
        that demonstrates your understanding of the lessons in Unit 2. Your response
        should clearly address each of the items below: \r
        \r
        1. What summative
        and formative assessment opportunities are built into the unit? \r
        \t* What’s
        the role of the project(s) in the unit? \r
        \t* How does the project(s) apply
        content and skills that were developed during the unit? \r
        \t* What kinds
        of special considerations come with the unit long project in this unit?\r
        2.
        What skills and knowledge should students leave the unit with?\r
        3. What
        are the core 2017 CSTA standards or threads of the K-12 framework in this
        unit?\r
        \r
        \r
        \r
        >## Getting Credit for Completing this Reflection \r
        \r
        >-
        Once you submit your reflection, your response to the prompt above will be
        shared anonymously and reviewed by your peers, and you will review the work
        done by other facilitators. Reviewers will be looking for thoughtful and thorough
        answers that demonstrate that you have spent time considering the reflection
        questions listed above. Reviewers will have an opportunity to give feedback
        on your submission, and you can respond to that feedback and resubmit.\r
        -
        In order to get credit for completing this prompt, two reviewers need to agree
        that you have responded to the prompts fully. If reviewers don’t feel comfortable
        making a decision about your task submission, they can elevate to an instructor
        for review. You will always have a chance to address feedback from your reviewers
        and resubmit your reflections! Reviewer feedback will show up at the bottom
        of this page, once it’s available. \r
         \r
        \r
      csd2dlp-lessons_markdown_instruction: |
        <br><br>\r
        \r
        > **NOTE: before you
        start this reflection, make sure you’ve reviewed the lesson in Unit 2, and
        have a good sense of the connections between lessons. If you haven’t already
        reviewed the materials, do that now and come back to this reflection later.**\r
        \r
        \r
        #
        Unit 2 Lesson Connections and Philosophy\r
        \r
        For this reflection, you’re
        going to consider each of the prompts below and craft a written response that
        demonstrates your understanding of the lessons in Unit 2. Your response should
        clearly address each of the items below: \r
        \r
        1. Which lessons are particularly
        tricky to teach in this unit and why? \r
        2. How is the content spiraled or
        scaffolded within the unit? \r
        3. What connections or hooks into Unit 1 can
        be used to motivate early lessons in unit 2?\r
        4. Why teach HTML and CSS
        before starting with JavaScript in Game Lab? \r
        5. What two Classroom Practices
        do you feel are most important in this unit? Why?\r
        \r
        >## Getting Credit
        for Completing this Reflection \r
        \r
        >- Once you submit your reflection,
        your response to the prompt above will be shared anonymously and reviewed
        by your peers, and you will review the work done by other facilitators. Reviewers
        will be looking for thoughtful and thorough answers that demonstrate that
        you have spent time considering the reflection questions listed above. Reviewers
        will have an opportunity to give feedback on your submission, and you can
        respond to that feedback and resubmit.\r
        - In order to get credit for completing
        this prompt, two reviewers need to agree that you have responded to the prompts
        fully. If reviewers don’t feel comfortable making a decision about your task
        submission, they can elevate to an instructor for review. You will always
        have a chance to address feedback from your reviewers and resubmit your reflections!
        Reviewer feedback will show up at the bottom of this page, once it’s available.
        \r
         \r
        \r
        \r
      csd2dlp-tools_markdown_instruction: |
        \r
        \r
        <br><br>\r
        \r
        > **NOTE: before
        you start this reflection, make sure you’ve reviewed the lesson in Unit 2,
        and have a good sense of the the role of tools in the lessons. If you haven’t
        already reviewed the materials, do that now and come back to this reflection
        later.**\r
        \r
        \r
        # Unit 2 Tool Philosophy and Use\r
        \r
        For this reflection,
        you’re going to consider each of the prompts below and craft a written response
        that demonstrates your understanding of the lessons in Unit 2. Your response
        should clearly address each of the items below: \r
        \r
        1. How would you respond
        to a teacher who says they are just going to put students on the computer
        and let them go at their own pace?\r
        2. What’s the philosophy of using Web
        Lab in this unit? \r
        \t* In what ways is Web Lab educational rather than
        professional? \r
        \t* What kind of supports exist for students working Web
        Lab?\r
        \r
        \r
        \r
        >## Getting Credit for Completing this Reflection \r
        \r
        >-
        Once you submit your reflection, your response to the prompt above will be
        shared anonymously and reviewed by your peers, and you will review the work
        done by other facilitators. Reviewers will be looking for thoughtful and thorough
        answers that demonstrate that you have spent time considering the reflection
        questions listed above. Reviewers will have an opportunity to give feedback
        on your submission, and you can respond to that feedback and resubmit.\r
        -
        In order to get credit for completing this prompt, two reviewers need to agree
        that you have responded to the prompts fully. If reviewers don’t feel comfortable
        making a decision about your task submission, they can elevate to an instructor
        for review. You will always have a chance to address feedback from your reviewers
        and resubmit your reflections! Reviewer feedback will show up at the bottom
        of this page, once it’s available. \r
         \r
        \r
        \r
      csd3dlp-assessment_markdown_instruction: |
        <br><br>\r
        \r
        > **NOTE: before
        you start this reflection, make sure you’ve reviewed the lesson in Unit 3,
        and have a good sense of the the role of assessment across the unit. If you
        haven’t already reviewed the materials, do that now and come back to this
        reflection later.**\r
        \r
        \r
        # Assessment in Unit 3\r
        \r
        For this reflection,
        you’re going to consider each of the prompts below and craft a written response
        that demonstrates your understanding of the lessons in Unit 3. Your response
        should clearly address each of the items below: \r
        \r
        1. What summative
        and formative assessment opportunities are built into the unit? \r
        \t* What’s
        the role of the project(s) in the unit? \r
        \t* How does the project(s) apply
        content and skills that were developed during the unit? \r
        2. Which student
        practices (PPCCC) are honed the most in this unit through the activities and
        projects? \r
        3. What are the core 2017 CSTA standards concepts (algorithms
        & programming, computing systems, data analysis, impacts of computing, and
        networks & the internet), and practices (Fostering an Inclusive Computing
        Culture, Collaborating Around Computing, Recognizing and Defining Computational
        Problems, Developing and Using Abstractions, Creating Computational Artifacts,
        Testing and Refining Computational Artifacts, and Communicating About Computing)
        emphasized in this unit? How are they emphasized?\r
        \r
        >## Getting Credit
        for Completing this Reflection \r
        \r
        >- Once you submit your reflection,
        your response to the prompt above will be shared anonymously and reviewed
        by your peers, and you will review the work done by other facilitators. Reviewers
        will be looking for thoughtful and thorough answers that demonstrate that
        you have spent time considering the reflection questions listed above. Reviewers
        will have an opportunity to give feedback on your submission, and you can
        respond to that feedback and resubmit.\r
        - In order to get credit for completing
        this prompt, two reviewers need to agree that you have responded to the prompts
        fully. If reviewers don’t feel comfortable making a decision about your task
        submission, they can elevate to an instructor for review. You will always
        have a chance to address feedback from your reviewers and resubmit your reflections!
        Reviewer feedback will show up at the bottom of this page, once it’s available.
        \r
         \r
      csd3dlp-lessons_markdown_instruction: |
        <br><br>\r
        \r
        > **NOTE: before you
        start this reflection, make sure you’ve reviewed the lesson in Unit 3, and
        have a good sense of the connections between lessons. If you haven’t already
        reviewed the materials, do that now and come back to this reflection later.**\r
        \r
        \r
        #
        Unit 3 Lesson Connections and Philosophy\r
        \r
        For this reflection, you’re
        going to consider each of the prompts below and craft a written response that
        demonstrates your understanding of the lessons in Unit 3. Your response should
        clearly address each of the items below: \r
        \r
        1. Which lessons are particularly
        tricky to teach in this unit and why?\r
        2. Which lessons are particularly
        foundational in the unit and why?\r
        3. How is the content spiraled or scaffolded
        within the unit? \r
        4. How would you recommend a teacher differentiate instruction
        in this unit if their students had a wide range of background with programming?\r
        \r
        >##
        Getting Credit for Completing this Reflection \r
        \r
        >- Once you submit your
        reflection, your response to the prompt above will be shared anonymously and
        reviewed by your peers, and you will review the work done by other facilitators.
        Reviewers will be looking for thoughtful and thorough answers that demonstrate
        that you have spent time considering the reflection questions listed above.
        Reviewers will have an opportunity to give feedback on your submission, and
        you can respond to that feedback and resubmit.\r
        - In order to get credit
        for completing this prompt, two reviewers need to agree that you have responded
        to the prompts fully. If reviewers don’t feel comfortable making a decision
        about your task submission, they can elevate to an instructor for review.
        You will always have a chance to address feedback from your reviewers and
        resubmit your reflections! Reviewer feedback will show up at the bottom of
        this page, once it’s available. \r
         \r
        \r
        \r
      csd3dlp-tools_markdown_instruction: |
        \r
        \r
        <br><br>\r
        \r
        > **NOTE: before
        you start this reflection, make sure you’ve reviewed the lesson in Unit 3,
        and have a good sense of the the role of tools in the lessons. If you haven’t
        already reviewed the materials, do that now and come back to this reflection
        later.**\r
        \r
        \r
        # Unit 3 Tool Philosophy and Use\r
        \r
        For this reflection,
        you’re going to consider each of the prompts below and craft a written response
        that demonstrates your understanding of the lessons in Unit 3. Your response
        should clearly address each of the items below: \r
        \r
        1. What’s the role
        of the teacher in this unit, where much of the computer science content is
        embedded in the levels?\r
        \t* What’s the philosophy of programming in Game
        Lab? \r
        \t* In what ways is Game Lab educational rather than professional?
        \r
        \t* What kind of supports exist for students using Game Lab?\r
        2. What
        does a teacher need to keep in mind to help their students transition from
        Web Lab to Game Lab?\r
        \r
        \r
        \r
        >## Getting Credit for Completing this
        Reflection \r
        \r
        >- Once you submit your reflection, your response to the
        prompt above will be shared anonymously and reviewed by your peers, and you
        will review the work done by other facilitators. Reviewers will be looking
        for thoughtful and thorough answers that demonstrate that you have spent time
        considering the reflection questions listed above. Reviewers will have an
        opportunity to give feedback on your submission, and you can respond to that
        feedback and resubmit.\r
        - In order to get credit for completing this prompt,
        two reviewers need to agree that you have responded to the prompts fully.
        If reviewers don’t feel comfortable making a decision about your task submission,
        they can elevate to an instructor for review. You will always have a chance
        to address feedback from your reviewers and resubmit your reflections! Reviewer
        feedback will show up at the bottom of this page, once it’s available. \r

        \r
        \r
        \r
      csd4dlp-assessment_markdown_instruction: "<br><br>\\r\n\\r\n> **NOTE: before\nyou
        start this reflection, make sure you’ve reviewed the lesson in Unit 4,\nand
        have a good sense of the the role of assessment across the unit. If you\nhaven’t
        already reviewed the materials, do that now and come back to this\nreflection
        later.**\\r\n\\r\n\\r\n# Assessment in Unit 4\\r\n\\r\nFor this reflection,\nyou’re
        going to consider each of the prompts below and craft a written response\nthat
        demonstrates your understanding of the lessons in Unit 4. Your response\nshould
        clearly address each of the items below: \\r\n\\r\n1. What skills and\nknowledge
        should students leave the unit with? What summative and formative\nassessment
        opportunities are built into the unit to assess those skills and\nknowledge?\\r\n2.
        What kinds of special considerations come with the group\nproject in this
        unit?\\r\n3. What are the core 2017 CSTA standards concepts\n(algorithms &
        programming, computing systems, data analysis, impacts of computing,\nand
        networks & the internet), and practices (Fostering an Inclusive Computing\nCulture,
        Collaborating Around Computing, Recognizing and Defining Computational\nProblems,
        Developing and Using Abstractions, Creating Computational Artifacts,\nTesting
        and Refining Computational Artifacts, and Communicating About Computing)\nemphasized
        in this unit? How are they emphasized?\\r\n\\r\n>## Getting Credit\nfor Completing
        this Reflection \\r\n\\r\n>- Once you submit your reflection,\nyour response
        to the prompt above will be shared anonymously and reviewed\nby your peers,
        and you will review the work done by other facilitators. Reviewers\nwill be
        looking for thoughtful and thorough answers that demonstrate that\nyou have
        spent time considering the reflection questions listed above. Reviewers\nwill
        have an opportunity to give feedback on your submission, and you can\nrespond
        to that feedback and resubmit.\\r\n- In order to get credit for completing\nthis
        prompt, two reviewers need to agree that you have responded to the prompts\nfully.
        If reviewers don’t feel comfortable making a decision about your task\nsubmission,
        they can elevate to an instructor for review. You will always\nhave a chance
        to address feedback from your reviewers and resubmit your reflections!\nReviewer
        feedback will show up at the bottom of this page, once it’s available.\n\\r\n "
      csd4dlp-lessons_markdown_instruction: |
        <br><br>\r
        \r
        > **NOTE: before you
        start this reflection, make sure you’ve reviewed the lesson in Unit 4, and
        have a good sense of the connections between lessons. If you haven’t already
        reviewed the materials, do that now and come back to this reflection later.**\r
        \r
        \r
        #
        Unit 4 Lesson Connections and Philosophy\r
        \r
        For this reflection, you’re
        going to consider each of the prompts below and craft a written response that
        demonstrates your understanding of the lessons in Unit 4. Your response should
        clearly address each of the items below: \r
        \r
        1. CS Discoveries is set
        up to allow for the class to be taught as two separate semesters where Unit
        4 may be the first unit of a new course. What is the role of this unit in
        kicking off semester 2 of the curriculum?\r
        2. How is the problem solving
        process used in this unit? How it is connected to how they used the problem
        solving process in Units 1 to 3?\r
        4. Where do you see the Curriculum Values
        and philosophy emphasized in this unit?\r
        \r
        >## Getting Credit for Completing
        this Reflection \r
        \r
        >- Once you submit your reflection, your response
        to the prompt above will be shared anonymously and reviewed by your peers,
        and you will review the work done by other facilitators. Reviewers will be
        looking for thoughtful and thorough answers that demonstrate that you have
        spent time considering the reflection questions listed above. Reviewers will
        have an opportunity to give feedback on your submission, and you can respond
        to that feedback and resubmit.\r
        - In order to get credit for completing
        this prompt, two reviewers need to agree that you have responded to the prompts
        fully. If reviewers don’t feel comfortable making a decision about your task
        submission, they can elevate to an instructor for review. You will always
        have a chance to address feedback from your reviewers and resubmit your reflections!
        Reviewer feedback will show up at the bottom of this page, once it’s available.
        \r
         \r
        \r
      csd4dlp-tools_markdown_instruction: |
        \r
        \r
        <br><br>\r
        \r
        > **NOTE: before
        you start this reflection, make sure you’ve reviewed the lesson in Unit 4,
        and have a good sense of the the role of tools in the lessons. If you haven’t
        already reviewed the materials, do that now and come back to this reflection
        later.**\r
        \r
        \r
        # Unit 4 Tool Philosophy and Use\r
        \r
        For this reflection,
        you’re going to consider each of the prompts below and craft a written response
        that demonstrates your understanding of the lessons in Unit 4. Your response
        should clearly address each of the items below: \r
        \r
        1. App Lab is used
        in later lessons in this unit. What is the role of App Lab in this unit? How
        is it different from other times in the curriculum a tool is present?\r
        \r
        \r
        >##
        Getting Credit for Completing this Reflection \r
        \r
        >- Once you submit your
        reflection, your response to the prompt above will be shared anonymously and
        reviewed by your peers, and you will review the work done by other facilitators.
        Reviewers will be looking for thoughtful and thorough answers that demonstrate
        that you have spent time considering the reflection questions listed above.
        Reviewers will have an opportunity to give feedback on your submission, and
        you can respond to that feedback and resubmit.\r
        - In order to get credit
        for completing this prompt, two reviewers need to agree that you have responded
        to the prompts fully. If reviewers don’t feel comfortable making a decision
        about your task submission, they can elevate to an instructor for review.
        You will always have a chance to address feedback from your reviewers and
        resubmit your reflections! Reviewer feedback will show up at the bottom of
        this page, once it’s available. \r
         \r
        \r
        \r
      csd5dlp-assessment_markdown_instruction: "<br><br>\\r\n\\r\n> **NOTE: before\nyou
        start this reflection, make sure you’ve reviewed the lesson in Unit 5,\nand
        have a good sense of the the role of assessment across the unit. If you\nhaven’t
        already reviewed the materials, do that now and come back to this\nreflection
        later.**\\r\n\\r\n\\r\n# Assessment in Unit 5\\r\n\\r\nFor this reflection,\nyou’re
        going to consider each of the prompts below and craft a written response\nthat
        demonstrates your understanding of the lessons in Unit 5. Your response\nshould
        clearly address each of the items below: \\r\n\\r\n1. What skills and\nknowledge
        should students leave the unit with? What summative and formative\nassessment
        opportunities are built into the unit to assess those skills and\nknowledge?\\r\n3.
        What are the core 2017 CSTA standards concepts (algorithms\n& programming,
        computing systems, data analysis, impacts of computing, and\nnetworks & the
        internet), and practices (Fostering an Inclusive Computing\nCulture, Collaborating
        Around Computing, Recognizing and Defining Computational\nProblems, Developing
        and Using Abstractions, Creating Computational Artifacts,\nTesting and Refining
        Computational Artifacts, and Communicating About Computing)\nemphasized in
        this unit? How are they emphasized?\\r\n\\r\n>## Getting Credit\nfor Completing
        this Reflection \\r\n\\r\n>- Once you submit your reflection,\nyour response
        to the prompt above will be shared anonymously and reviewed\nby your peers,
        and you will review the work done by other facilitators. Reviewers\nwill be
        looking for thoughtful and thorough answers that demonstrate that\nyou have
        spent time considering the reflection questions listed above. Reviewers\nwill
        have an opportunity to give feedback on your submission, and you can\nrespond
        to that feedback and resubmit.\\r\n- In order to get credit for completing\nthis
        prompt, two reviewers need to agree that you have responded to the prompts\nfully.
        If reviewers don’t feel comfortable making a decision about your task\nsubmission,
        they can elevate to an instructor for review. You will always\nhave a chance
        to address feedback from your reviewers and resubmit your reflections!\nReviewer
        feedback will show up at the bottom of this page, once it’s available.\n\\r\n "
      csd5dlp-lessons_markdown_instruction: |
        <br><br>\r
        \r
        > **NOTE: before you
        start this reflection, make sure you’ve reviewed the lesson in Unit 5, and
        have a good sense of the connections between lessons. If you haven’t already
        reviewed the materials, do that now and come back to this reflection later.**\r
        \r
        \r
        #
        Unit 5 Lesson Connections and Philosophy\r
        \r
        For this reflection, you’re
        going to consider each of the prompts below and craft a written response that
        demonstrates your understanding of the lessons in Unit 5. Your response should
        clearly address each of the items below: \r
        \r
        1. Which lessons are particularly
        tricky to teach in this unit and why? \r
        2. What is the connection between
        the first chapter and second chapter of this unit?\r
        3. To what depth are
        students expected to understand binary representation systems? How does the
        order and structure of the lessons support this understanding?\r
        \r
        \r
        >##
        Getting Credit for Completing this Reflection \r
        \r
        >- Once you submit your
        reflection, your response to the prompt above will be shared anonymously and
        reviewed by your peers, and you will review the work done by other facilitators.
        Reviewers will be looking for thoughtful and thorough answers that demonstrate
        that you have spent time considering the reflection questions listed above.
        Reviewers will have an opportunity to give feedback on your submission, and
        you can respond to that feedback and resubmit.\r
        - In order to get credit
        for completing this prompt, two reviewers need to agree that you have responded
        to the prompts fully. If reviewers don’t feel comfortable making a decision
        about your task submission, they can elevate to an instructor for review.
        You will always have a chance to address feedback from your reviewers and
        resubmit your reflections! Reviewer feedback will show up at the bottom of
        this page, once it’s available. \r
         \r
        \r
      csd5dlp-tools_markdown_instruction: |
        \r
        \r
        <br><br>\r
        \r
        > **NOTE: before
        you start this reflection, make sure you’ve reviewed the lesson in Unit 5,
        and have a good sense of the the role of tools in the lessons. If you haven’t
        already reviewed the materials, do that now and come back to this reflection
        later.**\r
        \r
        \r
        # Unit 5 Tool Philosophy and Use\r
        \r
        For this reflection,
        you’re going to consider each of the prompts below and craft a written response
        that demonstrates your understanding of the lessons in Unit 5. Your response
        should clearly address each of the items below: \r
        \r
        1. This unit makes
        use of a tool optional (teachers can use a spreadsheet tool if they want).
        If a teacher asked about whether to use a tool or not what kind of things
        would say/ask in response to support them?\r
        \r
        >## Getting Credit for Completing
        this Reflection \r
        \r
        >- Once you submit your reflection, your response
        to the prompt above will be shared anonymously and reviewed by your peers,
        and you will review the work done by other facilitators. Reviewers will be
        looking for thoughtful and thorough answers that demonstrate that you have
        spent time considering the reflection questions listed above. Reviewers will
        have an opportunity to give feedback on your submission, and you can respond
        to that feedback and resubmit.\r
        - In order to get credit for completing
        this prompt, two reviewers need to agree that you have responded to the prompts
        fully. If reviewers don’t feel comfortable making a decision about your task
        submission, they can elevate to an instructor for review. You will always
        have a chance to address feedback from your reviewers and resubmit your reflections!
        Reviewer feedback will show up at the bottom of this page, once it’s available.
        \r
         \r
        \r
      csd6dlp-assessment_markdown_instruction: "<br><br>\\r\n\\r\n> **NOTE: before\nyou
        start this reflection, make sure you’ve reviewed the lesson in Unit 6,\nand
        have a good sense of the the role of assessment across the unit. If you\nhaven’t
        already reviewed the materials, do that now and come back to this\nreflection
        later.**\\r\n\\r\n\\r\n# Assessment in Unit 6\\r\n\\r\nFor this reflection,\nyou’re
        going to consider each of the prompts below and craft a written response\nthat
        demonstrates your understanding of the lessons in Unit 6. Your response\nshould
        clearly address each of the items below: \\r\n\\r\n1. What skills and\nknowledge
        should students leave this unit with? What summative and formative\nassessment
        opportunities are built into the unit to assess those skills and\nknowledge?\\r\n2.
        What are the core 2017 CSTA standards concepts (algorithms\n& programming,
        computing systems, data analysis, impacts of computing, and\nnetworks & the
        internet), and practices (Fostering an Inclusive Computing\nCulture, Collaborating
        Around Computing, Recognizing and Defining Computational\nProblems, Developing
        and Using Abstractions, Creating Computational Artifacts,\nTesting and Refining
        Computational Artifacts, and Communicating About Computing)\nemphasized in
        this unit? How are they emphasized?\\r\n\\r\n>## Getting Credit\nfor Completing
        this Reflection \\r\n\\r\n>- Once you submit your reflection,\nyour response
        to the prompt above will be shared anonymously and reviewed\nby your peers,
        and you will review the work done by other facilitators. Reviewers\nwill be
        looking for thoughtful and thorough answers that demonstrate that\nyou have
        spent time considering the reflection questions listed above. Reviewers\nwill
        have an opportunity to give feedback on your submission, and you can\nrespond
        to that feedback and resubmit.\\r\n- In order to get credit for completing\nthis
        prompt, two reviewers need to agree that you have responded to the prompts\nfully.
        If reviewers don’t feel comfortable making a decision about your task\nsubmission,
        they can elevate to an instructor for review. You will always\nhave a chance
        to address feedback from your reviewers and resubmit your reflections!\nReviewer
        feedback will show up at the bottom of this page, once it’s available.\n\\r\n "
      csd6dlp-lessons_markdown_instruction: |
        <br><br>\r
        \r
        > **NOTE: before you
        start this reflection, make sure you’ve reviewed the lesson in Unit 6, and
        have a good sense of the connections between lessons. If you haven’t already
        reviewed the materials, do that now and come back to this reflection later.**\r
        \r
        \r
        #
        Unit 6 Lesson Connections and Philosophy\r
        \r
        For this reflection, you’re
        going to consider each of the prompts below and craft a written response that
        demonstrates your understanding of the lessons in Unit 6. Your response should
        clearly address each of the items below: \r
        \r
        1. Which lessons are particularly
        tricky to teach in this unit and why?\r
        2. Which lessons are particularly
        foundational in the unit?\r
        3. Which programming skills from Unit 3 does
        this unit rely upon? What new skills are introduced?\r
        4. How does the way
        students program with the Circuit Playground connect back to the Input-Output-Store-Process
        model from Unit 1?\r
        \r
        >## Getting Credit for Completing this Reflection
        \r
        \r
        >- Once you submit your reflection, your response to the prompt above
        will be shared anonymously and reviewed by your peers, and you will review
        the work done by other facilitators. Reviewers will be looking for thoughtful
        and thorough answers that demonstrate that you have spent time considering
        the reflection questions listed above. Reviewers will have an opportunity
        to give feedback on your submission, and you can respond to that feedback
        and resubmit.\r
        - In order to get credit for completing this prompt, two
        reviewers need to agree that you have responded to the prompts fully. If reviewers
        don’t feel comfortable making a decision about your task submission, they
        can elevate to an instructor for review. You will always have a chance to
        address feedback from your reviewers and resubmit your reflections! Reviewer
        feedback will show up at the bottom of this page, once it’s available. \r

        \r
        \r
      csd6dlp-tools_markdown_instruction: |
        \r
        \r
        <br><br>\r
        \r
        > **NOTE: before
        you start this reflection, make sure you’ve reviewed the lesson in Unit 6,
        and have a good sense of the the role of tools in the lessons. If you haven’t
        already reviewed the materials, do that now and come back to this reflection
        later.**\r
        \r
        \r
        # Unit 6 Tool Philosophy and Use\r
        \r
        For this reflection,
        you’re going to consider each of the prompts below and craft a written response
        that demonstrates your understanding of the lessons in Unit 6. Your response
        should clearly address each of the items below: \r
        \r
        1. What advice do
        you have for teachers about how to handle the transition from programming
        in Game Lab to programming in App Lab? \r
        \t* What’s the philosophy of programming
        in App Lab with Maker Toolkit? \r
        2. In what ways are the tools in the unit
        educational rather than professional? \r
        \r
        >## Getting Credit for Completing
        this Reflection \r
        \r
        >- Once you submit your reflection, your response
        to the prompt above will be shared anonymously and reviewed by your peers,
        and you will review the work done by other facilitators. Reviewers will be
        looking for thoughtful and thorough answers that demonstrate that you have
        spent time considering the reflection questions listed above. Reviewers will
        have an opportunity to give feedback on your submission, and you can respond
        to that feedback and resubmit.\r
        - In order to get credit for completing
        this prompt, two reviewers need to agree that you have responded to the prompts
        fully. If reviewers don’t feel comfortable making a decision about your task
        submission, they can elevate to an instructor for review. You will always
        have a chance to address feedback from your reviewers and resubmit your reflections!
        Reviewer feedback will show up at the bottom of this page, once it’s available.
        \r
         \r
        \r
      csp-post-survey-2017-FR_markdown_instruction: |-
        Anything else you'd like to
        say about your experience in the course?
      csp-post-survey-2017-q36-e_markdown_instruction: |-
        I worry because of another
        reason:
      csp-pre-survey-2017-q36-e_markdown_instruction: |-
        I worry because of another
        reason:
      csp-pre-survey-2017-q36-e_2018_markdown_instruction: |-
        I worry because of another
        reason:
      csp-pre-survey-2017-q38_markdown_instruction: |-
        If yes, what computer science
        course(s) had you taken before your current computer science class?
      csp-pre-survey-2017-q38_2018_markdown_instruction: |-
        If yes, what computer science
        course(s) had you taken before your current computer science class?
      csp-pulse-check-survey-1-q6-FR-U1Ch2_markdown_instruction: |-
        Anything else you’d
        like your teacher to know?
      csp-pulse-check-survey-1-q6-FR-U1Ch2_2018_markdown_instruction: |-
        Anything else
        you’d like your teacher to know?
      csp-pulse-check-survey-2-q6-FR-U2Ch1_markdown_instruction: |-
        Anything else you’d
        like your teacher to know?
      csp-pulse-check-survey-3-q6-FR-U2Ch2_markdown_instruction: |-
        Anything else you’d
        like your teacher to know?
      csp-pulse-check-survey-4-q6-FR-U3Ch1_markdown_instruction: |-
        Anything else you’d
        like your teacher to know?
      csp-pulse-check-survey-5-q6-FR-U4Ch1_markdown_instruction: |-
        Anything else you’d
        like your teacher to know?
      csp-pulse-check-survey-6-q6-FR-U4Ch2_markdown_instruction: |-
        Anything else you’d
        like your teacher to know?
      csp-pulse-check-survey-6-q6-FR-U5Ch1_markdown_instruction: |-
        Anything else you’d
        like your teacher to know?
      csp-pulse-check-survey-7-q6-FR-U5Ch1_markdown_instruction: |-
        Anything else you’d
        like your teacher to know?
      csp-pulse-check-survey-7-q6-FR-U5Ch2_markdown_instruction: |-
        Anything else you’d
        like your teacher to know?
      csp-pulse-check-survey-8-q6-FR-U5Ch2_markdown_instruction: |-
        Anything else you’d
        like your teacher to know?
      csp-thursday-facilitation_markdown_instruction: |-
        # Thursday Facilitation Reflection\r
        \r
        ##
        Discussion-Based Sessions\r
        \r
        You have now seen a couple discussion heavy
        sessions. Some specific examples include the Community (Wednesday), and Recruitment/Student
        Needs (Thursday) sessions. What common facilitator strategies were used in
        these sessions?\r
        \r
        * What are facilitators doing?\r
        * What are teachers
        doing?
      csp-thursday-pedagogy_markdown_instruction: |-
        # Thursday Pedagogy Reflection\r
        \r
        ##
        Differentiation\r
        \r
        What strategies have you learned about for differentiating
        instruction to meet diverse learning needs of students in CS Principles? List
        at least two ideas.
      csp-thursday-pedagogy2_markdown_instruction: |
        # Tuesday Pedagogy Reflection
        Part 1\r
        \r
        ## Recruiting and Student Needs\r
        \r
        In the community session
        this morning you talked about recruiting students and meeting students needs
        in the region where you work. (If you were not with your region think about
        what you experienced in this sessions that might apply to your region.)\r
        \r
        *
        What were common recruiting pain points teachers in your region shared?\r
        *
        What were common student support needs teachers in your region shared?\r
        *
        What things did you see today that you want to check in on throughout the
        year?\r
        * What recruiting goals do you hope to help accomplish in your region
        by the end of the year?\r
      csp-thursday-unit_markdown_instruction: |
        # Thursday Unit Reflection\r
        \r
        ##
        Unit 1 and Unit 2 Connections\r
        \r
        What connections or hooks into unit 1
        that can be used to motivate early lessons in unit 2?\r
      csp-thursday-unit2_markdown_instruction: |
        # Thursday Unit Reflection Part 2\r
        \r
        ##
        Plugged Unit\r
        \r
        What’s the role of the teacher in this unit, where much
        of the computer science content is embedded in the levels?\r
      csp-tuesday-facilitation_markdown_instruction: "# Tuesday Facilitation Practice\\r\n\\r\n##\nTLO\\r\n\\r\nYou
        have seen 2 Model TLOs (taught by facilitators) and 2 Participant\nTLOs (taught
        by teachers). What patterns do you notice about what facilitators\ndo during
        these sessions (consider the delivery of the lessons and the debriefs\nseparately)?\\r\n\\r\n*
        What are facilitators doing during lessons?\\r\n* What\nare facilitators doing
        during debriefs? What are teachers doing?\\r\n* In model\nlessons, how much
        time is split between time when facilitators are talking\nand time when teachers
        are doing during the lesson? "
      csp-tuesday-pedagogy_markdown_instruction: |-
        # Tuesday Pedagogy Reflection\r
        \r
        ##
        Classroom Practices\r
        \r
        Name two <a href="https://docs.google.com/document/d/1trq3FeCBaq2G-CFugZP4ElkJapAqAtoBfl4zf7DbW48/edit#heading=h.f8m5xr9s44e2">
        pedagogical approaches</a> you saw modeled in the 5 TLOs you’ve seen in the
        past couple of days? \r
        \r
        * When were they successful?\r
        * What were characteristics
        of situations where was their room for improvement?
      csp-tuesday-unit_markdown_instruction: |
        # Tuesday Unit Reflection Part 1\r
        \r
        ##
        Lesson 4\r
        \r
        How would you respond to a teacher who says ‘what’s the point’
        of lesson 4?\r
      csp-tuesday-unit2_markdown_instruction: |
        # Tuesday Unit Reflection\r
        \r
        ##
        Technology Issues\r
        \r
        Many classes have technology issues at the start
        of the year (computers are not ready yet, etc). How would you recommend a
        teacher approaches the first unit if they are having issues with technology
        access?\r
      csp-wednesday-facilitation_markdown_instruction: |
        # Wednesday Facilitation
        Reflection\r
        \r
        ## Facilitator Presentations\r
        \r
        You have now seen 3
        morning kick off sessions and 3 afternoon wrap up sessions. What common facilitator
        strategies were used in these sessions?\r
        \r
        * What are facilitators doing?\r
        *
        What are teachers doing?\r
        * What strategies did you see facilitators use
        to keep teachers engaged?\r
      csp-wednesday-pedagogy_markdown_instruction: |
        # Wednesday Pedagogy Reflection\r
        \r
        ##
        Building Community & Dealing with Barriers\r
        \r
        In the community session
        this morning you talked about building community and dealing with barriers
        to growing your CS education community locally.(If you were not with your
        region think about what you experienced in this sessions that might apply
        to your region.)\r
        \r
        * What were common barriers teachers in your region
        shared?\r
        * What barriers do you personally experience that were shared by
        teachers?\r
        * What can you do to help in your local community?\r
        * What
        things did you see today that you want to check in on throughout the year?\r
        *
        What community development goals do you hope to help accomplish in your region
        by the end of the year?\r
      csp-wednesday-unit_markdown_instruction: |
        # Wednesday Unit Reflection\r
        \r
        ##
        Internet Simulator Fatigue\r
        \r
        This is a very Internet Simulator heavy
        unit. What are strategies for dealing with students who are getting fatigued
        by the end of the unit?\r
        \r
      csp-wednesday-unit2_markdown_instruction: |
        # Wednesday Unit Reflection Part
        2\r
        \r
        ## Explaining Internet Simulator\r
        \r
        How would you explain the
        Internet Simulator to a new teacher who is interested in using it?\r
        \r
        *
        In what ways is Internet Simulator an educational rather than professional
        tool? \r
        * What teaching philosophy seems most effective with the Internet
        Simulator? \r
      csp1dlp-assessment_markdown_instruction: |
        \r
        \r
        <br><br>\r
        \r
        > **NOTE:
        before you start this reflection, make sure you’ve reviewed the lesson in
        Unit 1, and have a good sense of the the role of assessment across the unit.
        If you haven’t already reviewed the materials, do that now and come back to
        this reflection later.**\r
        \r
        \r
        # Assessment in Unit 1\r
        \r
        For this
        reflection, you’re going to consider each of the prompts below and craft a
        written response that demonstrates your understanding of the lessons in Unit
        1. Your response should clearly address each of the items below: \r
        \r
        1.
        What’s the role of the practice Performance Task(s), or PTs, in the unit?
        \r
         - Which PTs are being practiced?\r
         - How does the practice PT build
        on what content and skills were developed during the unit? \r
        2. What summative
        and formative assessment opportunities are built into the unit? \r
        \r
        \r
        >##
        Getting Credit for Completing this Reflection \r
        \r
        >- Once you submit your
        reflection, your response to the prompt above will be shared anonymously and
        reviewed by your peers, and you will review the work done by other facilitators.
        Reviewers will be looking for thoughtful and thorough answers that demonstrate
        that you have spent time considering the reflection questions listed above.
        Reviewers will have an opportunity to give feedback on your submission, and
        you can respond to that feedback and resubmit.\r
        - In order to get credit
        for completing this prompt, two reviewers need to agree that you have responded
        to the prompts fully. If reviewers don’t feel comfortable making a decision
        about your task submission, they can elevate to an instructor for review.
        You will always have a chance to address feedback from your reviewers and
        resubmit your reflections! Reviewer feedback will show up at the bottom of
        this page, once it’s available. \r
         \r
        \r
        \r
      csp1dlp-lessons_markdown_instruction: |
        <br><br>\r
        \r
        > **NOTE: before you
        start this reflection, make sure you’ve reviewed the lesson in Unit 1, and
        have a good sense of the connections between lessons. If you haven’t already
        reviewed the materials, do that now and come back to this reflection later.**\r
        \r
        \r
        #
        Unit 1 Lesson Connections and Philosophy\r
        \r
        For this reflection, you’re
        going to consider each of the prompts below and craft a written response that
        demonstrates your understanding of the lessons in Unit 1. Your response should
        clearly address each of the items below: \r
        \r
        1. What skills and knowledge
        should students leave the unit with?\r
         - Which Big Idea(s) are students
        learning the most about? Where and how are those BI(s) addressed? \r
         - Which
        skills or Computational Practices are honed through the activities and projects?
        \r
        \r
        2. What is the connection between early lessons and later lessons?\r

        - How is the content spiraled or scaffolded within the unit? \r
         - What foundation
        is being laid early on and how is it leveraged throughout the unit? Why? \r

        - How would you respond to a teacher who says ‘what’s the point’ of lesson
        4? \r
        \r
        3. Which lessons are particularly tricky to teach in this unit
        and why? \r
        \r
        >## Getting Credit for Completing this Reflection \r
        \r
        >-
        Once you submit your reflection, your response to the prompt above will be
        shared anonymously and reviewed by your peers, and you will review the work
        done by other facilitators. Reviewers will be looking for thoughtful and thorough
        answers that demonstrate that you have spent time considering the reflection
        questions listed above. Reviewers will have an opportunity to give feedback
        on your submission, and you can respond to that feedback and resubmit.\r
        -
        In order to get credit for completing this prompt, two reviewers need to agree
        that you have responded to the prompts fully. If reviewers don’t feel comfortable
        making a decision about your task submission, they can elevate to an instructor
        for review. You will always have a chance to address feedback from your reviewers
        and resubmit your reflections! Reviewer feedback will show up at the bottom
        of this page, once it’s available. \r
         \r
        \r
        \r
      csp1dlp-tools_markdown_instruction: |
        \r
        \r
        <br><br>\r
        \r
        > **NOTE: before
        you start this reflection, make sure you’ve reviewed the lesson in Unit 1,
        and have a good sense of the the role of tools in the lessons. If you haven’t
        already reviewed the materials, do that now and come back to this reflection
        later.**\r
        \r
        \r
        # Unit 1 Tool Philosophy and Use\r
        \r
        For this reflection,
        you’re going to consider each of the prompts below and craft a written response
        that demonstrates your understanding of the lessons in Unit 1. Your response
        should clearly address each of the items below: \r
        \r
        - Why are we using
        the Internet Simulator rather than teaching without it? \r
        - In what ways
        is the Internet Simulator educational rather than professional? \r
        - What’s
        the philosophy of teaching with the Internet Simulator? \r
        - This is a very
        Internet Simulator heavy unit. What are strategies for dealing with students
        who are getting fatigued by the end of the unit? \r
        - Many classes have technology
        issues at the start of the year (computers are not ready yet, etc). How would
        you recommend a teacher approaches the first unit if she’s having issues with
        technology access?\r
        \r
        \r
        >## Getting Credit for Completing this Reflection
        \r
        \r
        >- Once you submit your reflection, your response to the prompt above
        will be shared anonymously and reviewed by your peers, and you will review
        the work done by other facilitators. Reviewers will be looking for thoughtful
        and thorough answers that demonstrate that you have spent time considering
        the reflection questions listed above. Reviewers will have an opportunity
        to give feedback on your submission, and you can respond to that feedback
        and resubmit.\r
        - In order to get credit for completing this prompt, two
        reviewers need to agree that you have responded to the prompts fully. If reviewers
        don’t feel comfortable making a decision about your task submission, they
        can elevate to an instructor for review. You will always have a chance to
        address feedback from your reviewers and resubmit your reflections! Reviewer
        feedback will show up at the bottom of this page, once it’s available. \r

        \r
        \r
        \r
      csp2dlp-assessment_markdown_instruction: |
        \r
        \r
        <br><br>\r
        \r
        > **NOTE:
        before you start this reflection, make sure you’ve reviewed the lesson in
        Unit 2, and have a good sense of the the role of assessment across the unit.
        If you haven’t already reviewed the materials, do that now and come back to
        this reflection later.**\r
        \r
        \r
        # Assessment in Unit 2 \r
        \r
        For this
        reflection, you’re going to consider each of the prompts below and craft a
        written response that demonstrates your understanding of the lessons in Unit
        2. Your response should clearly address each of the items below: \r
        \r
        1.
        What’s the role of the practice Performance Task(s), or PTs, in the unit?
        \r
         - How does the practice Explore PT build on what content and skills were
        developed during the unit? \r
        2. What summative and formative assessment
        opportunities are built into the unit? \r
        \r
        \r
        \r
        >## Getting Credit
        for Completing this Reflection \r
        \r
        >- Once you submit your reflection,
        your response to the prompt above will be shared anonymously and reviewed
        by your peers, and you will review the work done by other facilitators. Reviewers
        will be looking for thoughtful and thorough answers that demonstrate that
        you have spent time considering the reflection questions listed above. Reviewers
        will have an opportunity to give feedback on your submission, and you can
        respond to that feedback and resubmit.\r
        - In order to get credit for completing
        this prompt, two reviewers need to agree that you have responded to the prompts
        fully. If reviewers don’t feel comfortable making a decision about your task
        submission, they can elevate to an instructor for review. You will always
        have a chance to address feedback from your reviewers and resubmit your reflections!
        Reviewer feedback will show up at the bottom of this page, once it’s available.
        \r
         \r
        \r
        \r
      csp2dlp-lessons_markdown_instruction: |
        <br><br>\r
        \r
        > **NOTE: before you
        start this reflection, make sure you’ve reviewed the lesson in Unit 2, and
        have a good sense of the connections between lessons. If you haven’t already
        reviewed the materials, do that now and come back to this reflection later.**\r
        \r
        \r
        #
        Unit 2 Lesson Connections and Philosophy\r
        \r
        For this reflection, you’re
        going to consider each of the prompts below and craft a written response that
        demonstrates your understanding of the lessons in Unit 2. Your response should
        clearly address each of the items below:\r
        \r
        1. What skills and knowledge
        should students leave the unit with?\r
         - Which Learning Objectives (LOs)
        under the Big Idea of data are explored in the second chapter of unit 2? These
        data-related LOs are in the interest of preparing for the Explore Task. How
        would you explain the lens used to look at data in chapter 2 and the connection
        to the Explore Task?\r
         - Which skills or Computational Practices are honed
        through the activities and projects? \r
        2. What is the connection between
        early lessons and later lessons?\r
         - What connections or hooks into unit
        1 that can be used to motivate early lessons in unit 2? \r
         - How would you
        described the connection between chapter 1 and chapter 2 to a teacher? \r

        - What foundation is being laid early on and how is it leveraged throughout
        the unit? Why? \r
        3. Which lessons are particularly tricky to teach in this
        unit and why? \r
        \r
        \r
        >## Getting Credit for Completing this Reflection
        \r
        \r
        >- Once you submit your reflection, your response to the prompt above
        will be shared anonymously and reviewed by your peers, and you will review
        the work done by other facilitators. Reviewers will be looking for thoughtful
        and thorough answers that demonstrate that you have spent time considering
        the reflection questions listed above. Reviewers will have an opportunity
        to give feedback on your submission, and you can respond to that feedback
        and resubmit.\r
        - In order to get credit for completing this prompt, two
        reviewers need to agree that you have responded to the prompts fully. If reviewers
        don’t feel comfortable making a decision about your task submission, they
        can elevate to an instructor for review. You will always have a chance to
        address feedback from your reviewers and resubmit your reflections! Reviewer
        feedback will show up at the bottom of this page, once it’s available. \r

        \r
        \r
        \r
        \r
      csp2dlp-tools_markdown_instruction: |
        <br><br>\r
        \r
        > **NOTE: before you start
        this reflection, make sure you’ve reviewed the lesson in Unit 2, and have
        a good sense of the the role of tools in the lessons. If you haven’t already
        reviewed the materials, do that now and come back to this reflection later.**\r
        \r
        \r
        #
        Unit 2 Tool Philosophy and Use\r
        \r
        For this reflection, you’re going to
        consider each of the prompts below and craft a written response that demonstrates
        your understanding of the lessons in Unit 2. Your response should clearly
        address each of the items below: \r
        \r
        - Why are we using whatever tools
        are present in the unit rather than teaching without them? \r
        - In what ways
        are the tools in the unit educational rather than professional? \r
        - What’s
        the philosophy of teaching with these tools? \r
        \r
        \r
        \r
        >## Getting Credit
        for Completing this Reflection \r
        \r
        >- Once you submit your reflection,
        your response to the prompt above will be shared anonymously and reviewed
        by your peers, and you will review the work done by other facilitators. Reviewers
        will be looking for thoughtful and thorough answers that demonstrate that
        you have spent time considering the reflection questions listed above. Reviewers
        will have an opportunity to give feedback on your submission, and you can
        respond to that feedback and resubmit.\r
        - In order to get credit for completing
        this prompt, two reviewers need to agree that you have responded to the prompts
        fully. If reviewers don’t feel comfortable making a decision about your task
        submission, they can elevate to an instructor for review. You will always
        have a chance to address feedback from your reviewers and resubmit your reflections!
        Reviewer feedback will show up at the bottom of this page, once it’s available.
        \r
         \r
      csp3dlp-assessment_markdown_instruction: |
        \r
        \r
        <br><br>\r
        \r
        > **NOTE:
        before you start this reflection, make sure you’ve reviewed the lesson in
        Unit 3, and have a good sense of the the role of assessment across the unit.
        If you haven’t already reviewed the materials, do that now and come back to
        this reflection later.**\r
        \r
        \r
        # Assessment in Unit 3 \r
        \r
        For this
        reflection, you’re going to consider each of the prompts below and craft a
        written response that demonstrates your understanding of the lessons in Unit
        3. Your response should clearly address each of the items below: \r
        \r
        1.
        What’s the role of the practice Performance Task(s), or PTs, in the unit?
        \r
         - How does the practice Create PT build on what content and skills were
        developed during the unit? \r
        2. What summative and formative assessment
        opportunities are built into the unit? \r
        \r
        \r
        \r
        \r
        >## Getting Credit
        for Completing this Reflection \r
        \r
        >- Once you submit your reflection,
        your response to the prompt above will be shared anonymously and reviewed
        by your peers, and you will review the work done by other facilitators. Reviewers
        will be looking for thoughtful and thorough answers that demonstrate that
        you have spent time considering the reflection questions listed above. Reviewers
        will have an opportunity to give feedback on your submission, and you can
        respond to that feedback and resubmit.\r
        - In order to get credit for completing
        this prompt, two reviewers need to agree that you have responded to the prompts
        fully. If reviewers don’t feel comfortable making a decision about your task
        submission, they can elevate to an instructor for review. You will always
        have a chance to address feedback from your reviewers and resubmit your reflections!
        Reviewer feedback will show up at the bottom of this page, once it’s available.
        \r
         \r
        \r
        \r
      csp3dlp-lessons_markdown_instruction: |
        <br><br>\r
        \r
        > **NOTE: before you
        start this reflection, make sure you’ve reviewed the lesson in Unit 3, and
        have a good sense of the connections between lessons. If you haven’t already
        reviewed the materials, do that now and come back to this reflection later.**\r
        \r
        \r
        #
        Unit 3 Lesson Connections and Philosophy\r
        \r
        For this reflection, you’re
        going to consider each of the prompts below and craft a written response that
        demonstrates your understanding of the lessons in Unit 3. Your response should
        clearly address each of the items below: \r
        \r
        1. What skills and knowledge
        should students leave the unit with?\r
         - Which Big Idea(s) are students
        learning the most about? Where and how are those BI(s) addressed? \r
         - Which
        skills or Computational Practices are honed through the activities and projects?
        \r
        2. What is the connection between early lessons and later lessons?\r

        - How is the content spiraled or scaffolded within the unit? \r
         - How would
        you respond to a teacher who says ‘what’s the point’ of lessons 1 - 3? \r

        - Unit 3 starts with sequencing, functions, and functions with parameters,
        which is not a typical way of starting a unit on programming (many lead with
        variables, for example). What are some of the potential reasons and benefits
        of doing it this way?\r
         - What foundation is being laid early on and how
        is it leveraged throughout the unit? Why? \r
         - Which lessons are particularly
        tricky to teach in this unit and why? \r
        3. How would you recommend a teacher
        differentiate instruction in this unit if her students had a wide range of
        background with programming?\r
        \r
        \r
        >## Getting Credit for Completing
        this Reflection \r
        \r
        >- Once you submit your reflection, your response
        to the prompt above will be shared anonymously and reviewed by your peers,
        and you will review the work done by other facilitators. Reviewers will be
        looking for thoughtful and thorough answers that demonstrate that you have
        spent time considering the reflection questions listed above. Reviewers will
        have an opportunity to give feedback on your submission, and you can respond
        to that feedback and resubmit.\r
        - In order to get credit for completing
        this prompt, two reviewers need to agree that you have responded to the prompts
        fully. If reviewers don’t feel comfortable making a decision about your task
        submission, they can elevate to an instructor for review. You will always
        have a chance to address feedback from your reviewers and resubmit your reflections!
        Reviewer feedback will show up at the bottom of this page, once it’s available.
        \r
         \r
        \r
        \r
      csp3dlp-tools_markdown_instruction: |
        \r
        <br><br>\r
        \r
        > **NOTE: before you
        start this reflection, make sure you’ve reviewed the lesson in Unit 3, and
        have a good sense of the the role of tools in the lessons. If you haven’t
        already reviewed the materials, do that now and come back to this reflection
        later.**\r
        \r
        \r
        # Unit 3 Tool Philosophy and Use\r
        \r
        For this reflection,
        you’re going to consider each of the prompts below and craft a written response
        that demonstrates your understanding of the lessons in Unit 3. Your response
        should clearly address each of the items below:\r
        \r
        - Why are we using
        Applab in Code Studio rather than teaching with another tool? \r
        - In what
        ways is Applab educational rather than professional? \r
        - What’s the role
        of the teacher in this unit, where much of the cs content is embedded in the
        levels?\r
        \r
        \r
        >## Getting Credit for Completing this Reflection \r
        \r
        >-
        Once you submit your reflection, your response to the prompt above will be
        shared anonymously and reviewed by your peers, and you will review the work
        done by other facilitators. Reviewers will be looking for thoughtful and thorough
        answers that demonstrate that you have spent time considering the reflection
        questions listed above. Reviewers will have an opportunity to give feedback
        on your submission, and you can respond to that feedback and resubmit.\r
        -
        In order to get credit for completing this prompt, two reviewers need to agree
        that you have responded to the prompts fully. If reviewers don’t feel comfortable
        making a decision about your task submission, they can elevate to an instructor
        for review. You will always have a chance to address feedback from your reviewers
        and resubmit your reflections! Reviewer feedback will show up at the bottom
        of this page, once it’s available. \r
         \r
      csp4dlp-assessment_markdown_instruction: |
        <br><br>\r
        \r
        > **NOTE: before
        you start this reflection, make sure you’ve reviewed the lesson in Unit 4,
        and have a good sense of the the role of assessment across the unit. If you
        haven’t already reviewed the materials, do that now and come back to this
        reflection later.**\r
        \r
        \r
        # Assessment in Unit 4 \r
        \r
        For this reflection,
        you’re going to consider each of the prompts below and craft a written response
        that demonstrates your understanding of the lessons in Unit 4. Your response
        should clearly address each of the items below: \r
        \r
        1. What’s the role
        of the practice Performance Task(s), or PTs, in the unit? \r
        2. What summative
        and formative assessment opportunities are built into the unit? \r
        \r
        \r
        \r
        >##
        Getting Credit for Completing this Reflection \r
        \r
        >- Once you submit your
        reflection, your response to the prompt above will be shared anonymously and
        reviewed by your peers, and you will review the work done by other facilitators.
        Reviewers will be looking for thoughtful and thorough answers that demonstrate
        that you have spent time considering the reflection questions listed above.
        Reviewers will have an opportunity to give feedback on your submission, and
        you can respond to that feedback and resubmit.\r
        - In order to get credit
        for completing this prompt, two reviewers need to agree that you have responded
        to the prompts fully. If reviewers don’t feel comfortable making a decision
        about your task submission, they can elevate to an instructor for review.
        You will always have a chance to address feedback from your reviewers and
        resubmit your reflections! Reviewer feedback will show up at the bottom of
        this page, once it’s available. \r
         \r
        \r
      csp4dlp-lessons_markdown_instruction: "<br><br>\\r\n\\r\n> **NOTE: before you\nstart
        this reflection, make sure you’ve reviewed the lesson in Unit 4, and\nhave
        a good sense of the connections between lessons. If you haven’t already\nreviewed
        the materials, do that now and come back to this reflection later.**\\r\n\\r\n\\r\n#\nUnit
        4 Lesson Connections and Philosophy\\r\n\\r\nFor this reflection, you’re\ngoing
        to consider each of the prompts below and craft a written response that\ndemonstrates
        your understanding of the lessons in Unit 4. Your response should\nclearly
        address each of the items below: \\r\n\\r\n1. Which Big Idea(s) are\nstudents
        learning the most about? Where and how are those BI(s) addressed?\n\\r\n2.
        Which skills or Computational Practices are honed through the activities\nand
        projects? \\r\n3. What recommendations do you have about the optional lessons\nin
        this unit? (when and why would a teacher choose to use them?)\\r\n4. How\ncan
        the material covered in the earlier units be connected to Unit 4 topics?\n(specifically
        the internet and data) \\r\n5. Which lessons are particularly\ntricky to teach
        in this unit and why? \\r\n \\r\n\\r\n>## Getting Credit for\nCompleting this
        Reflection \\r\n\\r\n>- Once you submit your reflection, your\nresponse to
        the prompt above will be shared anonymously and reviewed by your\npeers, and
        you will review the work done by other facilitators. Reviewers\nwill be looking
        for thoughtful and thorough answers that demonstrate that\nyou have spent
        time considering the reflection questions listed above. Reviewers\nwill have
        an opportunity to give feedback on your submission, and you can\nrespond to
        that feedback and resubmit.\\r\n- In order to get credit for completing\nthis
        prompt, two reviewers need to agree that you have responded to the prompts\nfully.
        If reviewers don’t feel comfortable making a decision about your task\nsubmission,
        they can elevate to an instructor for review. You will always\nhave a chance
        to address feedback from your reviewers and resubmit your reflections!\nReviewer
        feedback will show up at the bottom of this page, once it’s available.\n\\r\n "
      csp4dlp-tools_markdown_instruction: "<br><br>\\r\n\\r\n> **NOTE: before you
        start\nthis reflection, make sure you’ve reviewed the lesson in Unit 4, and
        have\na good sense of the the role of tools in the lessons. If you haven’t
        already\nreviewed the materials, do that now and come back to this reflection
        later.**\\r\n\\r\n\\r\n#\nUnit 4 Tool Philosophy and Use\\r\n\\r\nFor this
        reflection, you’re going to\nconsider each of the prompts below and craft
        a written response that demonstrates\nyour understanding of the lessons in
        Unit 4. Your response should clearly\naddress each of the items below:\\r\n\\r\n-
        Why are we using whatever tools\nare present in the unit rather than teaching
        without them? \\r\n- What’s the\nphilosophy of teaching with these tools?
        \\r\n\\r\n\\r\n>## Getting Credit for\nCompleting this Reflection \\r\n\\r\n>-
        Once you submit your reflection, your\nresponse to the prompt above will be
        shared anonymously and reviewed by your\npeers, and you will review the work
        done by other facilitators. Reviewers\nwill be looking for thoughtful and
        thorough answers that demonstrate that\nyou have spent time considering the
        reflection questions listed above. Reviewers\nwill have an opportunity to
        give feedback on your submission, and you can\nrespond to that feedback and
        resubmit.\\r\n- In order to get credit for completing\nthis prompt, two reviewers
        need to agree that you have responded to the prompts\nfully. If reviewers
        don’t feel comfortable making a decision about your task\nsubmission, they
        can elevate to an instructor for review. You will always\nhave a chance to
        address feedback from your reviewers and resubmit your reflections!\nReviewer
        feedback will show up at the bottom of this page, once it’s available.\n\\r\n "
      csp5dlp-assessment_markdown_instruction: |
        <br><br>\r
        \r
        > **NOTE: before
        you start this reflection, make sure you’ve reviewed the lesson in Unit 5,
        and have a good sense of the the role of assessment across the unit. If you
        haven’t already reviewed the materials, do that now and come back to this
        reflection later.**\r
        \r
        \r
        # Assessment in Unit 5\r
        \r
        For this reflection,
        you’re going to consider each of the prompts below and craft a written response
        that demonstrates your understanding of the lessons in Unit 5. Your response
        should clearly address each of the items below: \r
        \r
        1. What content that’s
        covered in unit 5 is required for the create PT? What content is going to
        be on the fixed-response exam (as shown in the exam reference guide in the
        course and exam description) but isn’t required for the performance task?
        \r
        2. What summative and formative assessment opportunities are built into
        the unit? \r
        \r
        \r
        \r
        \r
        >## Getting Credit for Completing this Reflection
        \r
        \r
        >- Once you submit your reflection, your response to the prompt above
        will be shared anonymously and reviewed by your peers, and you will review
        the work done by other facilitators. Reviewers will be looking for thoughtful
        and thorough answers that demonstrate that you have spent time considering
        the reflection questions listed above. Reviewers will have an opportunity
        to give feedback on your submission, and you can respond to that feedback
        and resubmit.\r
        - In order to get credit for completing this prompt, two
        reviewers need to agree that you have responded to the prompts fully. If reviewers
        don’t feel comfortable making a decision about your task submission, they
        can elevate to an instructor for review. You will always have a chance to
        address feedback from your reviewers and resubmit your reflections! Reviewer
        feedback will show up at the bottom of this page, once it’s available. \r

        \r
        \r
        \r
      csp5dlp-lessons_markdown_instruction: |
        <br><br>\r
        \r
        > **NOTE: before you
        start this reflection, make sure you’ve reviewed the lesson in Unit 5, and
        have a good sense of the connections between lessons. If you haven’t already
        reviewed the materials, do that now and come back to this reflection later.**\r
        \r
        \r
        #
        Unit 5 Lesson Connections and Philosophy\r
        \r
        For this reflection, you’re
        going to consider each of the prompts below and craft a written response that
        demonstrates your understanding of the lessons in Unit 5. Your response should
        clearly address each of the items below: \r
        \r
        1. Which Big Idea(s) are
        students learning the most about? Where and how are those BI(s) addressed?
        \r
        2. Which skills or Computational Practices are honed through the activities
        and projects? \r
        3. What advice do you have for teachers about how to handle
        the transition from turtle (back in unit 3)  to event-driven programming (here
        in unit 5)?  \r
        4. What lessons are foundational to this unit? How are they
        important to success in later lessons?\r
        5. Which lessons are particularly
        tricky to teach in this unit and why? \r
        \r
        >## Getting Credit for Completing
        this Reflection \r
        \r
        >- Once you submit your reflection, your response
        to the prompt above will be shared anonymously and reviewed by your peers,
        and you will review the work done by other facilitators. Reviewers will be
        looking for thoughtful and thorough answers that demonstrate that you have
        spent time considering the reflection questions listed above. Reviewers will
        have an opportunity to give feedback on your submission, and you can respond
        to that feedback and resubmit.\r
        - In order to get credit for completing
        this prompt, two reviewers need to agree that you have responded to the prompts
        fully. If reviewers don’t feel comfortable making a decision about your task
        submission, they can elevate to an instructor for review. You will always
        have a chance to address feedback from your reviewers and resubmit your reflections!
        Reviewer feedback will show up at the bottom of this page, once it’s available.
        \r
         \r
      csp5dlp-tools_markdown_instruction: |
        \r
        \r
        <br><br>\r
        \r
        > **NOTE: before
        you start this reflection, make sure you’ve reviewed the lesson in Unit 5,
        and have a good sense of the the role of tools in the lessons. If you haven’t
        already reviewed the materials, do that now and come back to this reflection
        later.**\r
        \r
        \r
        # Unit 5 Tool Philosophy and Use\r
        \r
        For this reflection,
        you’re going to consider each of the prompts below and craft a written response
        that demonstrates your understanding of the lessons in Unit 5. Your response
        should clearly address each of the items below:\r
        \r
        1. What’s the philosophy
        of teaching with Applab? \r
        2. What’s the general cadence and structure of
        a lesson in unit 5? *(how are the levels in a typical lesson paced out, and
        what’s the general progression)*\r
        \r
        \r
        \r
        >## Getting Credit for Completing
        this Reflection \r
        \r
        >- Once you submit your reflection, your response
        to the prompt above will be shared anonymously and reviewed by your peers,
        and you will review the work done by other facilitators. Reviewers will be
        looking for thoughtful and thorough answers that demonstrate that you have
        spent time considering the reflection questions listed above. Reviewers will
        have an opportunity to give feedback on your submission, and you can respond
        to that feedback and resubmit.\r
        - In order to get credit for completing
        this prompt, two reviewers need to agree that you have responded to the prompts
        fully. If reviewers don’t feel comfortable making a decision about your task
        submission, they can elevate to an instructor for review. You will always
        have a chance to address feedback from your reviewers and resubmit your reflections!
        Reviewer feedback will show up at the bottom of this page, once it’s available.
      csp_U3_plan_code_FR_markdown_instruction: |-
        <img src="https://images.code.org/01d3b0664443216b4363ec31914e592a-image-1506460763004.png"
        style="float: right">\r
        \r
        <br>\r
        \r
        In this lesson we talked about
        how to build up solutions to larger programming problems with functions.  Plan
        the code that you would use to draw this image (shown at right). Describe
        each of the functions that you would create. You should not write all the
        code, only the names of the functions that you would create with a brief description
        of what each function would do. \r
        \r
        Write your plan following the format:\r
        \r
        <div
        style="clear: both"> </div>\r
        \r
            Name of function - description of
        what it does\r
        \r
            Name of function 2 - description of what it does\r
            ...
      csp_U3_square_v_rect_FR_markdown_instruction: |-
        <img src="https://images.code.org/2f9b8b6a1c42b7c6c881f89867352907-image-1506460228029.png"
        style="float: right">\r
        \r
        In this lesson you wrote code to make the turtle
        draw squares. Briefly describe how the code for drawing a rectangle would
        be different than drawing a square.  (Example rectangle at right)
      csp_affirmation_control_markdown_instruction: |-
        This brief activity allows you
        to reflect about what you have learned in this course so far. It is provided
        to you by your teacher, but *you will not be graded on this.*\r
        \r
        Some
        topics in the course may be interesting to you, others may be less interesting.\r
        \r
        <strong>\r
        &#49;.
        Write down 1 or 2 topics that are most interesting to you:\r
        \r
        </strong>\r
        \r
        <input
        type=text><br>\r
        <input type=text>\r
        <br><br>\r
        \r
        <strong>\r
        &#50;.
        How did you prepare for taking this test? Do you feel more or less prepared
        to answer questions about the topics that interest you?\r
        </strong>\r
        \r
        *Write
        a few sentences, focusing on your thoughts and feelings, don't worry about
        how well written it is.*
      csp_affirmation_control_2_markdown_instruction: |-
        This brief activity allows
        you to reflect about what you have learned in this course so far. It is provided
        to you by your teacher, but *you will not be graded on this.*\r
        \r
        Some
        topics in the course may be interesting to you, others may be less interesting.\r
        \r
        <strong>\r
        &#49;.
        Write down 1 or 2 topics that are most interesting to you:\r
        \r
        </strong>\r
        \r
        <input
        type=text><br>\r
        <input type=text>\r
        <br><br>\r
        \r
        <strong>\r
        &#50;.
        How did you prepare for taking this test? Do you feel more or less prepared
        to answer questions about the topics that interest you?\r
        </strong>\r
        \r
        *Write
        a few sentences, focusing on your thoughts and feelings, don't worry about
        how well written it is.*
      csp_affirmation_control_2018_markdown_instruction: |-
        This brief activity allows
        you to reflect about what you have learned in this course so far. It is provided
        to you by your teacher, but *you will not be graded on this.*\r
        \r
        Some
        topics in the course may be interesting to you, others may be less interesting.\r
        \r
        <strong>\r
        &#49;.
        Write down 1 or 2 topics that are most interesting to you:\r
        \r
        </strong>\r
        \r
        <input
        type=text><br>\r
        <input type=text>\r
        <br><br>\r
        \r
        <strong>\r
        &#50;.
        How did you prepare for taking this test? Do you feel more or less prepared
        to answer questions about the topics that interest you?\r
        </strong>\r
        \r
        *Write
        a few sentences, focusing on your thoughts and feelings, don't worry about
        how well written it is.*
      csp_affirmation_control_3_markdown_instruction: |-
        This brief activity allows
        you to reflect about what you have learned in this course so far. It is provided
        to you by your teacher, but *you will not be graded on this.*\r
        \r
        Some
        topics in the course may be interesting to you, others may be less interesting.\r
        \r
        <strong>\r
        &#49;.
        Write down 1 or 2 topics that are most interesting to you:\r
        \r
        </strong>\r
        \r
        <input
        type=text><br>\r
        <input type=text>\r
        <br><br>\r
        \r
        <strong>\r
        &#50;.
        How did you prepare for taking this test? Do you feel more or less prepared
        to answer questions about the topics that interest you?\r
        </strong>\r
        \r
        *Write
        a few sentences, focusing on your thoughts and feelings, don't worry about
        how well written it is.*
      csp_affirmation_control_4_markdown_instruction: |-
        This brief activity allows
        you to reflect about what you have learned in this course so far. It is provided
        to you by your teacher, but *you will not be graded on this.*\r
        \r
        Some
        topics in the course may be interesting to you, others may be less interesting.\r
        \r
        <strong>\r
        &#49;.
        Write down 1 or 2 topics that are most interesting to you:\r
        \r
        </strong>\r
        \r
        <input
        type=text><br>\r
        <input type=text>\r
        <br><br>\r
        \r
        <strong>\r
        &#50;.
        How did you prepare for taking this test? Do you feel more or less prepared
        to answer questions about the topics that interest you?\r
        </strong>\r
        \r
        *Write
        a few sentences, focusing on your thoughts and feelings, don't worry about
        how well written it is.*
      csp_affirmation_control_5_markdown_instruction: |-
        This brief activity allows
        you to reflect about what you have learned in this course so far. It is provided
        to you by your teacher, but *you will not be graded on this.*\r
        \r
        Some
        topics in the course may be interesting to you, others may be less interesting.\r
        \r
        <strong>\r
        &#49;.
        Write down 1 or 2 topics that are most interesting to you:\r
        \r
        </strong>\r
        \r
        <input
        type=text><br>\r
        <input type=text>\r
        <br><br>\r
        \r
        <strong>\r
        &#50;.
        How did you prepare for taking this test? Do you feel more or less prepared
        to answer questions about the topics that interest you?\r
        </strong>\r
        \r
        *Write
        a few sentences, focusing on your thoughts and feelings, don't worry about
        how well written it is.*
      csp_affirmation_intervention_markdown_instruction: |-
        This brief activity allows
        you to reflect about what’s most important to you. It is provided to you by
        your teacher, but *you will not be graded on this.*\r
        \r
        Below is a list
        of values and qualities. Some of them may be important to you, others may
        be unimportant. \r
        \r
        <strong>\r
        &#49;. What's most important to you?</strong>
        (select one or more)\r
        \r
        \r
        <table bordercolor="#FFFFFF" width=75% cellpadding=5
        cellspacing=10 style="background-color: #d9eff7; border-width: 10px; border-color:
        #FFFFFF">\r
          <tr style="border: 5px solid white">\r
            <td width=25%
        style="border: 5px solid white;">\r
            <label><input type="checkbox">
        Relationships with friends and family\r
            </label></td>\r
            <td width=25%
        style="border: 5px solid white">\r
            <label><input type="checkbox">
        Sports and athletics\r
            </label></td>\r
            <td width=25% style="border:
        5px solid white">\r
            <label><input type="checkbox"> Relationships with
        friends or family\r
            </label></td>\r
            <td  width=25% style="border:
        5px solid white">\r
            <label><input type="checkbox"> Creativity\r
            </label></td>\r
          </tr>\r
          <tr>\r
            <td
        style="border: 5px solid white">\r
            <label><input type="checkbox">
        Spirituality or religion\r
            </label></td>\r
            <td style="border: 5px
        solid white">\r
            <label><input type="checkbox"> Sense of humor\r
            </label></td>\r
            <td
        style="border: 5px solid white">\r
            <label><input type="checkbox">
        Health and fitness\r
            </label></td>\r
            <td style="border: 5px solid
        white">\r
            <label><input type="checkbox"> Physical attractiveness\r
            </label></td>\r
          </tr>\r
          <tr>\r
            <td
        style="border: 5px solid white">\r
            <label><input type="checkbox">
        Romantic values\r
            </label></td>\r
            <td style="border: 5px solid
        white">\r
            <label><input type="checkbox"> Kindness\r
            </label></td>\r
            <td
        style="border: 5px solid white">\r
            <label><input type="checkbox">
        Spontaneity, living life in the moment\r
            </label></td>\r
            <td style="border:
        5px solid white">\r
            <label><input type="checkbox"> Independence\r
            </label></td>\r
          </tr>\r
        </table>\r
        <br>\r
        <br>\r
        \r
        <strong>\r
        &#50;.
        Why are these values important to you? Describe a time in your life when they
        were really important.\r
        </strong>\r
        \r
        *Write a few sentences. Focus on
        your thoughts and feelings, don't worry about how well written it is.*
      csp_affirmation_intervention_2_markdown_instruction: |-
        This brief activity allows
        you to reflect about what’s most important to you. It is provided to you by
        your teacher, but *you will not be graded on this.*\r
        \r
        Below is a list
        of values and qualities. Some of them may be important to you, others may
        be unimportant. \r
        \r
        <strong>\r
        &#49;. What's most important to you?</strong>
        (select one or more)\r
        \r
        \r
        <table bordercolor="#FFFFFF" width=75% cellpadding=5
        cellspacing=10 style="background-color: #d9eff7; border-width: 10px; border-color:
        #FFFFFF">\r
          <tr style="border: 5px solid white">\r
            <td width=25%
        style="border: 5px solid white;">\r
            <label><input type="checkbox">
        Relationships with friends and family\r
            </label></td>\r
            <td width=25%
        style="border: 5px solid white">\r
            <label><input type="checkbox">
        Sports and athletics\r
            </label></td>\r
            <td width=25% style="border:
        5px solid white">\r
            <label><input type="checkbox"> Relationships with
        friends or family\r
            </label></td>\r
            <td  width=25% style="border:
        5px solid white">\r
            <label><input type="checkbox"> Creativity\r
            </label></td>\r
          </tr>\r
          <tr>\r
            <td
        style="border: 5px solid white">\r
            <label><input type="checkbox">
        Spirituality or religion\r
            </label></td>\r
            <td style="border: 5px
        solid white">\r
            <label><input type="checkbox"> Sense of humor\r
            </label></td>\r
            <td
        style="border: 5px solid white">\r
            <label><input type="checkbox">
        Health and fitness\r
            </label></td>\r
            <td style="border: 5px solid
        white">\r
            <label><input type="checkbox"> Physical attractiveness\r
            </label></td>\r
          </tr>\r
          <tr>\r
            <td
        style="border: 5px solid white">\r
            <label><input type="checkbox">
        Romantic values\r
            </label></td>\r
            <td style="border: 5px solid
        white">\r
            <label><input type="checkbox"> Kindness\r
            </label></td>\r
            <td
        style="border: 5px solid white">\r
            <label><input type="checkbox">
        Spontaneity, living life in the moment\r
            </label></td>\r
            <td style="border:
        5px solid white">\r
            <label><input type="checkbox"> Independence\r
            </label></td>\r
          </tr>\r
        </table>\r
        <br>\r
        <br>\r
        \r
        <strong>\r
        &#50;.
        Why are these values important to you? Describe a time in your life when they
        were really important.\r
        </strong>\r
        \r
        *Write a few sentences. Focus on
        your thoughts and feelings, don't worry about how well written it is.*
      csp_affirmation_intervention_2018_markdown_instruction: |-
        This brief activity
        allows you to reflect about what’s most important to you. It is provided to
        you by your teacher, but *you will not be graded on this.*\r
        \r
        Below is
        a list of values and qualities. Some of them may be important to you, others
        may be unimportant. \r
        \r
        <strong>\r
        &#49;. What's most important to you?</strong>
        (select one or more)\r
        \r
        \r
        <table bordercolor="#FFFFFF" width=75% cellpadding=5
        cellspacing=10 style="background-color: #d9eff7; border-width: 10px; border-color:
        #FFFFFF">\r
          <tr style="border: 5px solid white">\r
            <td width=25%
        style="border: 5px solid white;">\r
            <label><input type="checkbox">
        Relationships with friends and family\r
            </label></td>\r
            <td width=25%
        style="border: 5px solid white">\r
            <label><input type="checkbox">
        Sports and athletics\r
            </label></td>\r
            <td width=25% style="border:
        5px solid white">\r
            <label><input type="checkbox"> Relationships with
        friends or family\r
            </label></td>\r
            <td  width=25% style="border:
        5px solid white">\r
            <label><input type="checkbox"> Creativity\r
            </label></td>\r
          </tr>\r
          <tr>\r
            <td
        style="border: 5px solid white">\r
            <label><input type="checkbox">
        Spirituality or religion\r
            </label></td>\r
            <td style="border: 5px
        solid white">\r
            <label><input type="checkbox"> Sense of humor\r
            </label></td>\r
            <td
        style="border: 5px solid white">\r
            <label><input type="checkbox">
        Health and fitness\r
            </label></td>\r
            <td style="border: 5px solid
        white">\r
            <label><input type="checkbox"> Physical attractiveness\r
            </label></td>\r
          </tr>\r
          <tr>\r
            <td
        style="border: 5px solid white">\r
            <label><input type="checkbox">
        Romantic values\r
            </label></td>\r
            <td style="border: 5px solid
        white">\r
            <label><input type="checkbox"> Kindness\r
            </label></td>\r
            <td
        style="border: 5px solid white">\r
            <label><input type="checkbox">
        Spontaneity, living life in the moment\r
            </label></td>\r
            <td style="border:
        5px solid white">\r
            <label><input type="checkbox"> Independence\r
            </label></td>\r
          </tr>\r
        </table>\r
        <br>\r
        <br>\r
        \r
        <strong>\r
        &#50;.
        Why are these values important to you? Describe a time in your life when they
        were really important.\r
        </strong>\r
        \r
        *Write a few sentences. Focus on
        your thoughts and feelings, don't worry about how well written it is.*
      csp_affirmation_intervention_3_markdown_instruction: |-
        This brief activity allows
        you to reflect about what’s most important to you. It is provided to you by
        your teacher, but *you will not be graded on this.*\r
        \r
        Below is a list
        of values and qualities. Some of them may be important to you, others may
        be unimportant. \r
        \r
        <strong>\r
        &#49;. What's most important to you?</strong>
        (select one or more)\r
        \r
        \r
        <table bordercolor="#FFFFFF" width=75% cellpadding=5
        cellspacing=10 style="background-color: #d9eff7; border-width: 10px; border-color:
        #FFFFFF">\r
          <tr style="border: 5px solid white">\r
            <td width=25%
        style="border: 5px solid white;">\r
            <label><input type="checkbox">
        Relationships with friends and family\r
            </label></td>\r
            <td width=25%
        style="border: 5px solid white">\r
            <label><input type="checkbox">
        Sports and athletics\r
            </label></td>\r
            <td width=25% style="border:
        5px solid white">\r
            <label><input type="checkbox"> Relationships with
        friends or family\r
            </label></td>\r
            <td  width=25% style="border:
        5px solid white">\r
            <label><input type="checkbox"> Creativity\r
            </label></td>\r
          </tr>\r
          <tr>\r
            <td
        style="border: 5px solid white">\r
            <label><input type="checkbox">
        Spirituality or religion\r
            </label></td>\r
            <td style="border: 5px
        solid white">\r
            <label><input type="checkbox"> Sense of humor\r
            </label></td>\r
            <td
        style="border: 5px solid white">\r
            <label><input type="checkbox">
        Health and fitness\r
            </label></td>\r
            <td style="border: 5px solid
        white">\r
            <label><input type="checkbox"> Physical attractiveness\r
            </label></td>\r
          </tr>\r
          <tr>\r
            <td
        style="border: 5px solid white">\r
            <label><input type="checkbox">
        Romantic values\r
            </label></td>\r
            <td style="border: 5px solid
        white">\r
            <label><input type="checkbox"> Kindness\r
            </label></td>\r
            <td
        style="border: 5px solid white">\r
            <label><input type="checkbox">
        Spontaneity, living life in the moment\r
            </label></td>\r
            <td style="border:
        5px solid white">\r
            <label><input type="checkbox"> Independence\r
            </label></td>\r
          </tr>\r
        </table>\r
        <br>\r
        <br>\r
        \r
        <strong>\r
        &#50;.
        Why are these values important to you? Describe a time in your life when they
        were really important.\r
        </strong>\r
        \r
        *Write a few sentences. Focus on
        your thoughts and feelings, don't worry about how well written it is.*
      csp_affirmation_intervention_4_markdown_instruction: |-
        This brief activity allows
        you to reflect about what’s most important to you. It is provided to you by
        your teacher, but *you will not be graded on this.*\r
        \r
        Below is a list
        of values and qualities. Some of them may be important to you, others may
        be unimportant. \r
        \r
        <strong>\r
        &#49;. What's most important to you?</strong>
        (select one or more)\r
        \r
        \r
        <table bordercolor="#FFFFFF" width=75% cellpadding=5
        cellspacing=10 style="background-color: #d9eff7; border-width: 10px; border-color:
        #FFFFFF">\r
          <tr style="border: 5px solid white">\r
            <td width=25%
        style="border: 5px solid white;">\r
            <label><input type="checkbox">
        Relationships with friends and family\r
            </label></td>\r
            <td width=25%
        style="border: 5px solid white">\r
            <label><input type="checkbox">
        Sports and athletics\r
            </label></td>\r
            <td width=25% style="border:
        5px solid white">\r
            <label><input type="checkbox"> Relationships with
        friends or family\r
            </label></td>\r
            <td  width=25% style="border:
        5px solid white">\r
            <label><input type="checkbox"> Creativity\r
            </label></td>\r
          </tr>\r
          <tr>\r
            <td
        style="border: 5px solid white">\r
            <label><input type="checkbox">
        Spirituality or religion\r
            </label></td>\r
            <td style="border: 5px
        solid white">\r
            <label><input type="checkbox"> Sense of humor\r
            </label></td>\r
            <td
        style="border: 5px solid white">\r
            <label><input type="checkbox">
        Health and fitness\r
            </label></td>\r
            <td style="border: 5px solid
        white">\r
            <label><input type="checkbox"> Physical attractiveness\r
            </label></td>\r
          </tr>\r
          <tr>\r
            <td
        style="border: 5px solid white">\r
            <label><input type="checkbox">
        Romantic values\r
            </label></td>\r
            <td style="border: 5px solid
        white">\r
            <label><input type="checkbox"> Kindness\r
            </label></td>\r
            <td
        style="border: 5px solid white">\r
            <label><input type="checkbox">
        Spontaneity, living life in the moment\r
            </label></td>\r
            <td style="border:
        5px solid white">\r
            <label><input type="checkbox"> Independence\r
            </label></td>\r
          </tr>\r
        </table>\r
        <br>\r
        <br>\r
        \r
        <strong>\r
        &#50;.
        Why are these values important to you? Describe a time in your life when they
        were really important.\r
        </strong>\r
        \r
        *Write a few sentences. Focus on
        your thoughts and feelings, don't worry about how well written it is.*
      csp_affirmation_intervention_5_markdown_instruction: |-
        This brief activity allows
        you to reflect about what’s most important to you. It is provided to you by
        your teacher, but *you will not be graded on this.*\r
        \r
        Below is a list
        of values and qualities. Some of them may be important to you, others may
        be unimportant. \r
        \r
        <strong>\r
        &#49;. What's most important to you?</strong>
        (select one or more)\r
        \r
        \r
        <table bordercolor="#FFFFFF" width=75% cellpadding=5
        cellspacing=10 style="background-color: #d9eff7; border-width: 10px; border-color:
        #FFFFFF">\r
          <tr style="border: 5px solid white">\r
            <td width=25%
        style="border: 5px solid white;">\r
            <label><input type="checkbox">
        Relationships with friends and family\r
            </label></td>\r
            <td width=25%
        style="border: 5px solid white">\r
            <label><input type="checkbox">
        Sports and athletics\r
            </label></td>\r
            <td width=25% style="border:
        5px solid white">\r
            <label><input type="checkbox"> Relationships with
        friends or family\r
            </label></td>\r
            <td  width=25% style="border:
        5px solid white">\r
            <label><input type="checkbox"> Creativity\r
            </label></td>\r
          </tr>\r
          <tr>\r
            <td
        style="border: 5px solid white">\r
            <label><input type="checkbox">
        Spirituality or religion\r
            </label></td>\r
            <td style="border: 5px
        solid white">\r
            <label><input type="checkbox"> Sense of humor\r
            </label></td>\r
            <td
        style="border: 5px solid white">\r
            <label><input type="checkbox">
        Health and fitness\r
            </label></td>\r
            <td style="border: 5px solid
        white">\r
            <label><input type="checkbox"> Physical attractiveness\r
            </label></td>\r
          </tr>\r
          <tr>\r
            <td
        style="border: 5px solid white">\r
            <label><input type="checkbox">
        Romantic values\r
            </label></td>\r
            <td style="border: 5px solid
        white">\r
            <label><input type="checkbox"> Kindness\r
            </label></td>\r
            <td
        style="border: 5px solid white">\r
            <label><input type="checkbox">
        Spontaneity, living life in the moment\r
            </label></td>\r
            <td style="border:
        5px solid white">\r
            <label><input type="checkbox"> Independence\r
            </label></td>\r
          </tr>\r
        </table>\r
        <br>\r
        <br>\r
        \r
        <strong>\r
        &#50;.
        Why are these values important to you? Describe a time in your life when they
        were really important.\r
        </strong>\r
        \r
        *Write a few sentences. Focus on
        your thoughts and feelings, don't worry about how well written it is.*
      csp_socialBelonging_control_markdown_instruction: |-
        \r
        ## Starting out in Computer
        Science\r
        \r
        Computer science has changed the way we communicate with each
        other, make art and movies, grow food, and even treat illnesses. Everyone
        can learn computer science and make a difference.\r
        \r
        ***\r
        \r
        ## Quotes
        from students\r
        \r
        Still, we understand that taking a computer science course
        can be difficult at first. Here are a few student quotes describing their
        strategies and tips for taking this course. **Please read the quotes carefully
        and respond to the prompt below**. \r
        \r
        <div style="background-color:
        #d9eff7; border-radius: 40px 40px 40px 5px; color: #000000; width: 80%; padding:
        0.5px 20px 1px 20px;">\r
        \r
        <p style="font-size: 70px; margin-bottom:
        -10px; margin-top: 30px; opacity: 0.5">&ldquo;</p>\r
        <p style="line-height:
        1.5; margin-left: 10px; margin-right: 30px; ">\r
        In the first week of this
        class I was falling behind quickly. There was a lot of new information to
        learn. To keep up, I had to find a better way to study. I tried to find connections
        between the material and what I already know. That really helped me remember
        things. I also tried to not overdo it. I started taking small breaks in-between
        lessons and when I came back I checked if I still remembered what I was studying
        before. It helped a lot\r
         </p>\r
        <p style="font-size: 70px; text-align:
        right; margin-right: 5%; margin-top: -10px; opacity: 0.5">&rdquo;</p>\r
        <p
        style="text-align: right; font-size: 125%; font-style: italic; margin-right:
        70px; margin-top: -20px; ">\r
        Sofia P. (age 16)\r
        </p>\r
        \r
        </div>\r
        <br>\r
        \r
        <div
        style="background-color: #d9eff7; border-radius: 40px 40px 5px 40px; color:
        #000000; width: 80%; margin-left: 10%; padding: 0.5px 20px 1px 20px;">\r
        \r
        \r
        <p
        style="font-size: 70px; margin-bottom: -10px; margin-top: 30px; opacity:
        0.5">&ldquo;</p>\r
        <p style="line-height: 1.5; margin-left: 10px; margin-right:
        30px;">Some days I felt tired and would drift away in my thoughts. It was
        a real problem because I would miss so much of what we were learning. So I
        started going to bed a bit earlier and I tried my best to pay attention. At
        the end of every class our teacher summarized\r
         what we learned that day
        and that was really helpful. I started taking more notes because that also
        kept my mind from wandering. These little tricks got me through the class
        and I learned more.</p>\r
        <p style="font-size: 70px; text-align: right;
        opacity: 0.5">&rdquo;</p>\r
        <p style="text-align: right; font-size: 125%;  font-style:
        italic; margin-right: 30px; margin-top: -20px">\r
        Jasmin D. (age 17)\r
        </p>\r
        </div>\r
        <br>\r
        \r
        <div
        style="background-color: #d9eff7; border-radius: 40px 40px 40px 5px; color:
        #000000; width: 80%; padding: 0.5px 20px 1px 20px;">\r
        \r
        <p style="font-size:
        70px; margin-bottom: -10px; margin-top: 30px; opacity: 0.5">&ldquo;</p>\r
        <p
        style="line-height: 1.5; margin-left: 10px; margin-right: 30px; ">I\r

        can be pretty forgetful sometimes and it was a problem in this class. I think
        it's because we did so much on the computer. For my other classes I take
        notes on paper and read through them again at home. So the trick that I found
        helpful in this class was to take notes on paper anyway and to test myself
        about the concepts. I wasn't sure if it would work at first, but I think
        it ended up being a big help.</p>\r
        \r
        <p style="font-size: 70px; text-align:
        right; opacity: 0.5">&rdquo;</p>\r
        <p style="text-align: right; font-size:
        125%;  font-style: italic; margin-right: 30px; margin-top: -20px">\r
        Sam
        J. (age 17)\r
        </p>\r
        </div>\r
        \r
        ***\r
        <p style="font-size: 125%">Now
        consider the strategies and insights for how to learn best that you just read.
        </p>\r
        \r
        ## Reflect and Summarize: \r
        \r
        <p style="font-size: 150%;
        color: black; font-weight: bolder; line-height: 1.5">What are your own strategies
        and insights about how to learn best? And, how are they similar or different
        to the ones that you just heard about from other students? </p>\r
        \r
        *Please
        write a short paragraph. Don't worry about spelling, grammar, or how well
        written it is.*
      csp_socialBelonging_control_2018_markdown_instruction: |-
        \r
        ## Starting out
        in Computer Science\r
        \r
        Computer science has changed the way we communicate
        with each other, make art and movies, grow food, and even treat illnesses.
        Everyone can learn computer science and make a difference.\r
        \r
        ***\r
        \r
        ##
        Quotes from students\r
        \r
        Still, we understand that taking a computer science
        course can be difficult at first. Here are a few student quotes describing
        their strategies and tips for taking this course. **Please read the quotes
        carefully and respond to the prompt below**. \r
        \r
        <div style="background-color:
        #d9eff7; border-radius: 40px 40px 40px 5px; color: #000000; width: 80%; padding:
        0.5px 20px 1px 20px;">\r
        \r
        <p style="font-size: 70px; margin-bottom:
        -10px; margin-top: 30px; opacity: 0.5">&ldquo;</p>\r
        <p style="line-height:
        1.5; margin-left: 10px; margin-right: 30px; ">\r
        In the first week of this
        class I was falling behind quickly. There was a lot of new information to
        learn. To keep up, I had to find a better way to study. I tried to find connections
        between the material and what I already know. That really helped me remember
        things. I also tried to not overdo it. I started taking small breaks in-between
        lessons and when I came back I checked if I still remembered what I was studying
        before. It helped a lot\r
         </p>\r
        <p style="font-size: 70px; text-align:
        right; margin-right: 5%; margin-top: -10px; opacity: 0.5">&rdquo;</p>\r
        <p
        style="text-align: right; font-size: 125%; font-style: italic; margin-right:
        70px; margin-top: -20px; ">\r
        Sofia P. (age 16)\r
        </p>\r
        \r
        </div>\r
        <br>\r
        \r
        <div
        style="background-color: #d9eff7; border-radius: 40px 40px 5px 40px; color:
        #000000; width: 80%; margin-left: 10%; padding: 0.5px 20px 1px 20px;">\r
        \r
        \r
        <p
        style="font-size: 70px; margin-bottom: -10px; margin-top: 30px; opacity:
        0.5">&ldquo;</p>\r
        <p style="line-height: 1.5; margin-left: 10px; margin-right:
        30px;">Some days I felt tired and would drift away in my thoughts. It was
        a real problem because I would miss so much of what we were learning. So I
        started going to bed a bit earlier and I tried my best to pay attention. At
        the end of every class our teacher summarized\r
         what we learned that day
        and that was really helpful. I started taking more notes because that also
        kept my mind from wandering. These little tricks got me through the class
        and I learned more.</p>\r
        <p style="font-size: 70px; text-align: right;
        opacity: 0.5">&rdquo;</p>\r
        <p style="text-align: right; font-size: 125%;  font-style:
        italic; margin-right: 30px; margin-top: -20px">\r
        Jasmin D. (age 17)\r
        </p>\r
        </div>\r
        <br>\r
        \r
        <div
        style="background-color: #d9eff7; border-radius: 40px 40px 40px 5px; color:
        #000000; width: 80%; padding: 0.5px 20px 1px 20px;">\r
        \r
        <p style="font-size:
        70px; margin-bottom: -10px; margin-top: 30px; opacity: 0.5">&ldquo;</p>\r
        <p
        style="line-height: 1.5; margin-left: 10px; margin-right: 30px; ">I\r

        can be pretty forgetful sometimes and it was a problem in this class. I think
        it's because we did so much on the computer. For my other classes I take
        notes on paper and read through them again at home. So the trick that I found
        helpful in this class was to take notes on paper anyway and to test myself
        about the concepts. I wasn't sure if it would work at first, but I think
        it ended up being a big help.</p>\r
        \r
        <p style="font-size: 70px; text-align:
        right; opacity: 0.5">&rdquo;</p>\r
        <p style="text-align: right; font-size:
        125%;  font-style: italic; margin-right: 30px; margin-top: -20px">\r
        Sam
        J. (age 17)\r
        </p>\r
        </div>\r
        \r
        ***\r
        <p style="font-size: 125%">Now
        consider the strategies and insights for how to learn best that you just read.
        </p>\r
        \r
        ## Reflect and Summarize: \r
        \r
        <p style="font-size: 150%;
        color: black; font-weight: bolder; line-height: 1.5">What are your own strategies
        and insights about how to learn best? And, how are they similar or different
        to the ones that you just heard about from other students? </p>\r
        \r
        *Please
        write a short paragraph. Don't worry about spelling, grammar, or how well
        written it is.*
      csp_socialBelonging_intervention_markdown_instruction: |-
        ## Starting out in
        Computer Science\r
        \r
        Computer science has changed the way we communicate
        with each other, make art and movies, grow food, and even treat illnesses.
        **Everyone can learn computer science and make a difference:** It really does
        not matter how much or little experience you have with computer science already,
        or what age, gender, or skin color you have.\r
        \r
        ***\r
        \r
        ## Quotes from
        students\r
        \r
        Still, we understand that it can be daunting at first to take
        a computer science course. So here are a few student quotes describing their
        experiences. **Please read the quotes carefully and respond to the prompt
        below**. \r
        \r
        \r
        <div style="background-color: #d9eff7; border-radius:
        40px 40px 40px 5px; color: #000000; width: 80%; padding: 0.5px 20px 1px 20px;">\r
        \r
        <p
        style="font-size: 70px; margin-bottom: -10px; margin-top: 30px; opacity:
        0.5">&ldquo;</p>\r
        <p style="line-height: 1.5; margin-left: 10px; margin-right:
        30px; ">\r
        At the start of the class I worried that I was different from
        the other students. I wasn't sure I fit in – I \tworried that I couldn’t
        do it and that the teacher and other students would look down on me. A few
        days after I started, I realized that almost everyone who takes the class
        isn’t sure if they fit in at first. It's something everyone goes through.
        Now it seems ironic – everybody feels different at first, when really we're
        all going through the same thing.</p>\r
        <p style="font-size: 70px; text-align:
        right; margin-right: 5%; margin-top: -10px; opacity: 0.5">&rdquo;</p>\r
        <p
        style="text-align: right; font-size: 125%; font-style: italic; margin-right:
        70px; margin-top: -20px; ">\r
        Sofia P. (age 16)\r
        </p>\r
        \r
        </div>\r
        <br>\r
        \r
        <div
        style="background-color: #d9eff7; border-radius: 40px 40px 5px 40px; color:
        #000000; width: 80%; margin-left: 10%; padding: 0.5px 20px 1px 20px;">\r
        \r
        \r
        <p
        style="font-size: 70px; margin-bottom: -10px; margin-top: 30px; opacity:
        0.5">&ldquo;</p>\r
        <p style="line-height: 1.5; margin-left: 10px; margin-right:
        30px;">I loved this computer science class! I've met some cool people and
        learned a lot. But it was a difficult transition. The first few days I was
        intimidated and not sure why I should learn computer science. Why would I
        need it? But then we talked in class about things I’m interested in, like
        music and design, and I realized that I can learn how to do cool new things.
        I had the wrong picture in my head about CS, it’s actually very creative!
        I just had to be patient and find ways to connect the class to what I really
        care about.</p>\r
        <p style="font-size: 70px; text-align: right; opacity:
        0.5">&rdquo;</p>\r
        <p style="text-align: right; font-size: 125%;  font-style:
        italic; margin-right: 30px; margin-top: -20px">\r
        Jasmin D. (age 17)\r
        </p>\r
        </div>\r
        <br>\r
        \r
        <div
        style="background-color: #d9eff7; border-radius: 40px 40px 40px 5px; color:
        #000000; width: 80%; padding: 0.5px 20px 1px 20px;">\r
        \r
        <p style="font-size:
        70px; margin-bottom: -10px; margin-top: 30px; opacity: 0.5">&ldquo;</p>\r
        <p
        style="line-height: 1.5; margin-left: 10px; margin-right: 30px; ">I didn’t
        have any experience with code, and I worried that I was not prepared for this
        class. Other students did some programming at home or in summer camps. On
        my first day, I was so nervous about getting bad grades and looking stupid.
        But then, I started to feel better – I talked with other students and enjoyed
        the class more. I became more comfortable asking for help when I had a problem.
        It turned out that the students with CS experience had the same issues as
        me! Hah, it took some time, but now I really feel like I belong in CS class.</p>\r
        \r
        <p
        style="font-size: 70px; text-align: right; opacity: 0.5">&rdquo;</p>\r
        <p
        style="text-align: right; font-size: 125%;  font-style: italic; margin-right:
        30px; margin-top: -20px">\r
        Sam J. (age 17)\r
        </p>\r
        </div>\r
        \r
        ***\r
        <p
        style="font-size: 125%"> Each of these students had similar experiences
        and realizations. </p>\r
        \r
        ## Reflect and Summarize: \r
        \r
        \r
        <p style="font-size:
        150%; color: black; font-weight: bolder; line-height: 1.5">Why do you think
        the students worry at first about whether they belong in the class? How did
        they become comfortable with it over time?</p>\r
        \r
        *Please write a short
        paragraph. Don't worry about spelling, grammar, or how well written it is.*
      csp_socialBelonging_intervention_2018_markdown_instruction: |-
        ## Starting out
        in Computer Science\r
        \r
        Computer science has changed the way we communicate
        with each other, make art and movies, grow food, and even treat illnesses.
        **Everyone can learn computer science and make a difference:** It really does
        not matter how much or little experience you have with computer science already,
        or what age, gender, or skin color you have.\r
        \r
        ***\r
        \r
        ## Quotes from
        students\r
        \r
        Still, we understand that it can be daunting at first to take
        a computer science course. So here are a few student quotes describing their
        experiences. **Please read the quotes carefully and respond to the prompt
        below**. \r
        \r
        \r
        <div style="background-color: #d9eff7; border-radius:
        40px 40px 40px 5px; color: #000000; width: 80%; padding: 0.5px 20px 1px 20px;">\r
        \r
        <p
        style="font-size: 70px; margin-bottom: -10px; margin-top: 30px; opacity:
        0.5">&ldquo;</p>\r
        <p style="line-height: 1.5; margin-left: 10px; margin-right:
        30px; ">\r
        At the start of the class I worried that I was different from
        the other students. I wasn't sure I fit in – I \tworried that I couldn’t
        do it and that the teacher and other students would look down on me. A few
        days after I started, I realized that almost everyone who takes the class
        isn’t sure if they fit in at first. It's something everyone goes through.
        Now it seems ironic – everybody feels different at first, when really we're
        all going through the same thing.</p>\r
        <p style="font-size: 70px; text-align:
        right; margin-right: 5%; margin-top: -10px; opacity: 0.5">&rdquo;</p>\r
        <p
        style="text-align: right; font-size: 125%; font-style: italic; margin-right:
        70px; margin-top: -20px; ">\r
        Sofia P. (age 16)\r
        </p>\r
        \r
        </div>\r
        <br>\r
        \r
        <div
        style="background-color: #d9eff7; border-radius: 40px 40px 5px 40px; color:
        #000000; width: 80%; margin-left: 10%; padding: 0.5px 20px 1px 20px;">\r
        \r
        \r
        <p
        style="font-size: 70px; margin-bottom: -10px; margin-top: 30px; opacity:
        0.5">&ldquo;</p>\r
        <p style="line-height: 1.5; margin-left: 10px; margin-right:
        30px;">I loved this computer science class! I've met some cool people and
        learned a lot. But it was a difficult transition. The first few days I was
        intimidated and not sure why I should learn computer science. Why would I
        need it? But then we talked in class about things I’m interested in, like
        music and design, and I realized that I can learn how to do cool new things.
        I had the wrong picture in my head about CS, it’s actually very creative!
        I just had to be patient and find ways to connect the class to what I really
        care about.</p>\r
        <p style="font-size: 70px; text-align: right; opacity:
        0.5">&rdquo;</p>\r
        <p style="text-align: right; font-size: 125%;  font-style:
        italic; margin-right: 30px; margin-top: -20px">\r
        Jasmin D. (age 17)\r
        </p>\r
        </div>\r
        <br>\r
        \r
        <div
        style="background-color: #d9eff7; border-radius: 40px 40px 40px 5px; color:
        #000000; width: 80%; padding: 0.5px 20px 1px 20px;">\r
        \r
        <p style="font-size:
        70px; margin-bottom: -10px; margin-top: 30px; opacity: 0.5">&ldquo;</p>\r
        <p
        style="line-height: 1.5; margin-left: 10px; margin-right: 30px; ">I didn’t
        have any experience with code, and I worried that I was not prepared for this
        class. Other students did some programming at home or in summer camps. On
        my first day, I was so nervous about getting bad grades and looking stupid.
        But then, I started to feel better – I talked with other students and enjoyed
        the class more. I became more comfortable asking for help when I had a problem.
        It turned out that the students with CS experience had the same issues as
        me! Hah, it took some time, but now I really feel like I belong in CS class.</p>\r
        \r
        <p
        style="font-size: 70px; text-align: right; opacity: 0.5">&rdquo;</p>\r
        <p
        style="text-align: right; font-size: 125%;  font-style: italic; margin-right:
        30px; margin-top: -20px">\r
        Sam J. (age 17)\r
        </p>\r
        </div>\r
        \r
        ***\r
        <p
        style="font-size: 125%"> Each of these students had similar experiences
        and realizations. </p>\r
        \r
        ## Reflect and Summarize: \r
        \r
        \r
        <p style="font-size:
        150%; color: black; font-weight: bolder; line-height: 1.5">Why do you think
        the students worry at first about whether they belong in the class? How did
        they become comfortable with it over time?</p>\r
        \r
        *Please write a short
        paragraph. Don't worry about spelling, grammar, or how well written it is.*
      cspu3_assess1_filltable_markdown_instruction: |
        Use Top-Down Design strategy
        to fill in the table below. The first line is given to you. You may use as
        many or as few rows in the table as you see fit.\r
        \r
        _NOTE: Use a new line
        for each entry to the table. Write each line in the format of "Function Name
        : Description"_\r
        \r
        **Top-Down Design Strategy:**\r
        \r
        * Look at the
        big picture…\r
        * Identify a sub-task…\r
        * Break down that sub-task into
        smaller sub-task(s)...\r
        * Keep going until you’re down to the commands you
        already have access to.\r
        \r
        | Function Name   | Description / Justification
        |\r
        |-----------------|-----------------------------|\r
        | drawSnowflake()
        | Draw a 6 pointed snowflake  |\r
        | (Your answer)   | (Your answer)               |\r
        \r
        \r
      cspu3_assess1_filltable_exam_prep_markdown_instruction: |
        Use Top-Down Design
        strategy to fill in the table below. The first line is given to you. You may
        use as many or as few rows in the table as you see fit.\r
        \r
        _NOTE: Use
        a new line for each entry to the table. Write each line in the format of "Function
        Name : Description"_\r
        \r
        **Top-Down Design Strategy:**\r
        \r
        * Look at
        the big picture…\r
        * Identify a sub-task…\r
        * Break down that sub-task into
        smaller sub-task(s)...\r
        * Keep going until you’re down to the commands you
        already have access to.\r
        \r
        | Function Name   | Description / Justification
        |\r
        |-----------------|-----------------------------|\r
        | drawSnowflake()
        | Draw a 6 pointed snowflake  |\r
        | (Your answer)   | (Your answer)               |\r
        \r
        \r
      cspu3_assess1_freeresponse_markdown_instruction: |-
        Explain how abstraction allows
        for the creation of increasingly complex systems.  Reference top-down design
        strategy in your response.
      cspu3_assess1_freeresponse_exam_prep_markdown_instruction: |-
        Explain how abstraction
        allows for the creation of increasingly complex systems.  Reference top-down
        design strategy in your response.
      cspu5_assess1_shortresponse_markdown_instruction: |-
        **Short Response:** \r
        \r
        Two
        students, Kaleb and Hunter, are arguing in class about an App Lab project.
        Kaleb states, “Huh, a button and an image are basically the same thing!”.  Hunter
        replies, “That doesn’t make any sense at all!”.\r
        \tExplain what Kaleb may
        have meant by that statement.
      cspu5_assess1_shortresponse_exam_prep_markdown_instruction: |-
        **Short Response:**
        \r
        \r
        Two students, Kaleb and Hunter, are arguing in class about an App
        Lab project. Kaleb states, “Huh, a button and an image are basically the same
        thing!”.  Hunter replies, “That doesn’t make any sense at all!”.\r
        \tExplain
        what Kaleb may have meant by that statement.
      cspu5_assess2_flowChart_markdown_instruction: |-
        The human question below has
        a yes/no answer. Create a flowchart that shows the logical progression of
        the questions that need to be answered to arrive at yes or no. Your diagram
        should consider the day of the week, time of day, and account for both possible
        outcomes.\r
        \r
        | Question                         | Question |\r
        |----------------------------------|----------|\r
        |
        Should I be at school right now? |   (Input your flowchart here)     |
      cspu5_assess2_match_markdown_instruction: |
        The following statements are true
        about event handlers, if-statements, or both in App Lab.  Place the letter
        next to each statement into the appropriate area of the table below.\r
        \r
        **Statements:**\r
        \r
        *
        A. Runs code in response to a user action\r
        * B. Runs code in response to
        statement being evaluated to True\r
        * C. Evaluated sequentially once execution
        is “inside” the statement\r
        * D. Can be triggered at any time\r
        * E. Used
        to run a block of code\r
        \r
        _Note: Make a new line for each box._\r
        \r
            Event
        Handlers: x, x\r
            if Statements: x, x\r
            Both: x, x\r
      cspu5_assess2_pseudocode2_markdown_instruction: |-
        A _pseudocode_ program is
        started below that asks the user for input and stores the value in a variable.  Continue
        writing pseudocode to accomplish this task: \r
        \r
        If the hour is within
        the school day (8 to 15) then display  “Nice to see you!”, Otherwise, display
        “It’s time to go home!\r
        \r
            DISPLAY (“Enter the hour of day (0-23)”)\r
            hour
        <- INPUT ()
      cspu5_assess2_pseudocode2_exam_prep_markdown_instruction: |-
        A _pseudocode_ program
        is started below that asks the user for input and stores the value in a variable.  Continue
        writing pseudocode to accomplish this task: \r
        \r
        If the hour is within
        the school day (8 to 15) then display  “Nice to see you!”, Otherwise, display
        “It’s time to go home!\r
        \r
            DISPLAY (“Enter the hour of day (0-23)”)\r
            hour
        <- INPUT ()
      cspu5_assess2_shortAnswer_markdown_instruction: |-
        **Short answer:** When might
        a programmer create a global variable instead of a local variable?
      cspu5_assess2_shortAnswer2_markdown_instruction: |-
        **Short Answer:**\r
        \r
        In
        the previous class periods, you developed a digital assistant that is able
        to “intelligently” respond to a limited set of questions and statements.  Assume
        you have created a much more robust digital assistant with capabilities similar
        to those of Siri.  Describe two possible user inputs:  one question that a
        digital assistant could “intelligently” answer easily, and another that it
        could not. Explain what makes the first easy and the second difficult for
        a digital assistant. (Consider the code used to develop your digital assistant.)
      cspu5_assess2_shortAnswer_exam_prep_markdown_instruction: |-
        **Short answer:**
        When might a programmer create a global variable instead of a local variable?
      cspu5_assess2_trueFalse_markdown_instruction: |-
        For each expression below, circle
        whether it evaluates to true or false. The variable temperature is initialized
        as shown.\r
        \r
            var temperature = 30;\r
        \r
        Expressions:\r
        \r
        * (temperature
        > 0) && (temperature < 32)\r
        * (temperature > 0) || (temperature < 32)\r
        *
        (temperature != 0) && (temperature < 32)\r
        * (temperature == 0) || (temperature
        > 32)\r
        * (temperature < 0) || (temperature > 32)\r
        \r
        _Note: Write "true"
        or "false" on a new line for each expression._
      cspu5_assess3_shortAnswer_markdown_instruction: |
        **Short Answer:**  Computer
        models and simulations are used to formulate, refine, and test hypotheses.  Describe
        a scenario that could be modeled by a computer and explain one benefit and
        one drawback of doing the simulation on a computer instead of real world.
        \r
      cspu5_assess3_shortAnswer_exam_prep_markdown_instruction: |
        **Short Answer:**  Computer
        models and simulations are used to formulate, refine, and test hypotheses.  Describe
        a scenario that could be modeled by a computer and explain one benefit and
        one drawback of doing the simulation on a computer instead of real world.
        \r
      cspu5_assess4_challenge_markdown_instruction: |-
        **Challenge Question:** Imagine
        a list that represents the height in feet of equidistant points along a mountainous
        path.  Here is an example of the data with a diagram that reflects the data.
        For example: \r
        \r
        ![](https://images.code.org/8046cbdb63d7e7d68eb133c58362b099-image-1477862090668.png)\r
        \r
        A
        programmer wants to write a procedure that calculates the net elevation -  total
        number of feet a traveler goes up and down. For example, looking at the first
        3 segments of travel, the net elevation is 7 feet (up 3, up 1, down 3).  \r
        \r
        Write
        procedure (in either JavaScript or pseudocode) called processPath(data) that:\r
        \r
        *
        Accepts a list of elevation data as a parameter\r
        * For every value in the
        list\r
        \t* Compute the absolute difference between that value and the value
        next to it on the path\r
        \t* Add the difference to a running total\r
        * Return
        the total elevation traveled\r
        \r
        In writing your procedure you should assume
        that you can call a function called _absDiff(a,b)_.\r
        \r
        ![](https://images.code.org/0a7b91a830319d5d690ddf2efa264395-image-1477862205239.png)\r
        \r
        Write
        the full procedure below.
      cspu5_assess4_challenge_exam_prep_markdown_instruction: |-
        **Challenge Question:**
        Imagine a list that represents the height in feet of equidistant points along
        a mountainous path.  Here is an example of the data with a diagram that reflects
        the data. For example: \r
        \r
        ![](https://images.code.org/8046cbdb63d7e7d68eb133c58362b099-image-1477862090668.png)\r
        \r
        A
        programmer wants to write a procedure that calculates the net elevation -  total
        number of feet a traveler goes up and down. For example, looking at the first
        3 segments of travel, the net elevation is 7 feet (up 3, up 1, down 3).  \r
        \r
        Write
        procedure (in either JavaScript or pseudocode) called processPath(data) that:\r
        \r
        *
        Accepts a list of elevation data as a parameter\r
        * For every value in the
        list\r
        \t* Compute the absolute difference between that value and the value
        next to it on the path\r
        \t* Add the difference to a running total\r
        * Return
        the total elevation traveled\r
        \r
        In writing your procedure you should assume
        that you can call a function called _absDiff(a,b)_.\r
        \r
        ![](https://images.code.org/0a7b91a830319d5d690ddf2efa264395-image-1477862205239.png)\r
        \r
        Write
        the full procedure below.
      cspu5_assess4_scoreToGrade_markdown_instruction: |-
        **Short Answer:** Jimmy wrote
        the procedure scoreToGrade which accepts as a parameter score - a quiz score
        in the range 0-100.  The procedure is supposed to return a letter grade. He
        feels confident his program is correct because he has tested it using the
        scores 3, 29, and 67. Sally believes the program is incorrect because she
        tested the values 73 and 86.  The code is syntactically correct, and the programs
        runs without generating an error, but the results are sometimes wrong.  Why
        does the procedure return the correct values for Jimmy’s tests but not Sally’s?
        \r
        \r
            PROCEDURE scoreToGrade (percent)\r
            {\r
                IF (percent
        < 60)\r
                {\r
                    RETURN ("F")\r
                }\r
                ELSE
        IF (percent >= 60)\r
                {\r
                \tRETURN ("D")\r
                }\r
                ELSE
        IF (percent >= 70)\r
                {\r
                    RETURN ("C")\r
                }\r
                ELSE
        IF (percent >= 80)\r
                {\r
                    RETURN ("B")\r
                }\r
                ELSE\r
                {\r
                \tRETURN
        ("A")\r
                }\r
            }
      cspu5_assess4_scoreToGrade_exam_prep_markdown_instruction: |-
        **Short Answer:**
        Jimmy wrote the procedure scoreToGrade which accepts as a parameter score
        - a quiz score in the range 0-100.  The procedure is supposed to return a
        letter grade. He feels confident his program is correct because he has tested
        it using the scores 3, 29, and 67. Sally believes the program is incorrect
        because she tested the values 73 and 86.  The code is syntactically correct,
        and the programs runs without generating an error, but the results are sometimes
        wrong.  Why does the procedure return the correct values for Jimmy’s tests
        but not Sally’s? \r
        \r
            PROCEDURE scoreToGrade (percent)\r
            {\r
                IF
        (percent < 60)\r
                {\r
                    RETURN ("F")\r
                }\r
                ELSE
        IF (percent >= 60)\r
                {\r
                \tRETURN ("D")\r
                }\r
                ELSE
        IF (percent >= 70)\r
                {\r
                    RETURN ("C")\r
                }\r
                ELSE
        IF (percent >= 80)\r
                {\r
                    RETURN ("B")\r
                }\r
                ELSE\r
                {\r
                \tRETURN
        ("A")\r
                }\r
            }
      cspu5_assess4_shortAnswerShopping_markdown_instruction: |
        **Short Answer:**
        Cecelia would like to write an app to help manage a trip to the grocery store.  The
        app will maintain a shopping list (a list of words) of all the items to buy.  Describe
        how Cecelia might use a second list in the app.  What else might be tracked?
        Describe how the list would be used and updated in the app.\r
      cspu5_assess4_shortAnswerShopping_exam_prep_markdown_instruction: |
        **Short
        Answer:** Cecelia would like to write an app to help manage a trip to the
        grocery store.  The app will maintain a shopping list (a list of words) of
        all the items to buy.  Describe how Cecelia might use a second list in the
        app.  What else might be tracked? Describe how the list would be used and
        updated in the app.\r
      expresslink_markdown_instruction: |-
        <a href="https://studio.code.org/s/express"><img
        src="https://images.code.org/32b135ea9a16684b30f89ffe0f6606b1-image-1507039514762.05.01
        AM.png"/><img src="https://images.code.org/cfea3adf1aec120e23e039ed06856f6f-image-1507039555039.05.48
        AM.png"/></a>
      frozen circle function in circle_markdown_instruction: |-
        Now let's create 20
        overlapping circles, turning 18 degrees between each circle.
      frozen circle function with parameter_markdown_instruction: |-
        Here's a ”Create
        circle” block that can make circles of different sizes. Can you use this to
        create a small circle of size 5 and a larger circle of size 10?
      frozen circle function_markdown_instruction: |-
        Use the new “Create a circle”
        block to create 10 overlapping circles. Don't forget to jump forward between
        circles.
      frozen circle_markdown_instruction: |-
        A circle is a special shape. Can you figure
        out what number to replace the question marks with to draw a circle?
      frozen cross rotate dense_markdown_instruction: |-
        Let's repeat it 90 times!
        How many times does 90 go into 360? Hint: It's a really small number.
      frozen cross rotate_markdown_instruction: |-
        Now try repeating it 10 times. How
        many degrees do you need to turn between each line?
      frozen cross_markdown_instruction: |-
        Wrap a “Repeat” block around these commands
        to create a plus sign. Did you notice Elsa can move forward and backward?
      frozen diamond mini snowflake_markdown_instruction: |-
        Did you know every snowflake
        is a different shape? Let's create a new snowflake by using another “Repeat"
        block to repeat a parallelogram 4 times, turning right by 90 degrees between
        each parallelogram.
      frozen diamond snowflake_markdown_instruction: |-
        Now, let's create a new snowflake
        by using the repeat block to repeat a parallelogram 10 times, turning right
        by 36 degrees between each one.
      frozen diamond_markdown_instruction: |-
        Use a repeat around these blocks to create
        a parallelogram. It's just like a rectangle but has different angles. This
        one has 60 degree and 120 degree angles instead of all 90 degree angles.
      frozen freeplay_markdown_instruction: |-
        You've officially become a master artist!
        Create a winter wonderland.
      frozen perpendicular_markdown_instruction: |-
        Now let's see if we can create
        two lines that are at a 90 degree angle to each other. You will need to use
        the "Turn" block as well as the "Move" block.
      frozen snowflake branch_markdown_instruction: |-
        Try using the ”Create a snowflake
        branch” block to create three branches, which starts to look like a snowflake.
      frozen snowflake full_markdown_instruction: |-
        Now let's repeat it 8 times to
        make a beautiful snowflake!
      frozen snowflower_markdown_instruction: |-
        Intricate snow patterns can be created
        with very simple shapes. Can you make a pattern by repeating 5 circles of
        size 5 and 5 circles of size 10?
      frozen square iterative_markdown_instruction: |-
        It seems like we're halfway
        to making a square. Let's put 4 lines together to create a square.
      frozen square loop 3x_markdown_instruction: |-
        Let's create three squares, turning
        after each square. Be sure to turn by 120 degrees before each new square.
      frozen square loop_markdown_instruction: |-
        Hi, I’m Anna of Arendelle! Let’s
        make a square with the “Repeat” block, which uses fewer blocks. How many times
        (???) should the “Repeat” block loop the blocks inside it to make a square?
      frozen square snowflake_markdown_instruction: |-
        Can you create a snowflake using
        the “Repeat” block to make a square 10 times, and the “Turn” block to turn
        36 degrees between each square?
      gl jr clone me ram2_markdown_instruction: |-
        Clone this level, and then make
        your own programs!
      gl jr clone me_markdown_instruction: |-
        Clone this level, and then make your
        own programs!
      grade1_adventurer_loops2_markdown_instruction: |-
        How can Laurel collect all
        five piles of gold using only one `E -->` block?
      grade1_artist_loops6_markdown_instruction: |-
        **Challenge:**  It's a hidden
        garden! Let's walk around.
      grade1_artist_loops7a_markdown_instruction: |-
        **Challenge:**  Lovely! Let's
        take a walk around the garden.
      grade1_artist_loopsFP_markdown_instruction: |
        Use what you have learned to draw
        a picture of what you think the artist saw when he got home.\r
        \r
        <hr/>\r
        <h3>Ideas</h3>\r
        <table>\r
        <tr>\r
        <td>\r
        <img
        src="https://images.code.org/8f4f2a68dae2cf0aa82cc0a49ea4df04-image-1466787750475.gif"
        width="150"/><br/>\r
        <h4>A Singing Snail</h4><br/><br/>\r
        </td>\r
        \r
        <td>\r
        <img
        src="https://images.code.org/732ce5dd91c7f49f06e88da1a9f664f3-image-1466794904255.gif"
        width="150"/><br/>\r
        <h4>A Big City</h4><br/><br/>\r
        </td>\r
        \r
        <td>\r
        <img
        src="https://images.code.org/37fdd6fdd761df09fd4949d5e43f0a7f-image-1466795165642.gif"
        width="150"/><br/>\r
        <h4>A Concert</h4><br/><br/>\r
        </td>\r
        \r
        <td>\r
        <img
        src="https://images.code.org/f7bf86b0f86669d82ee2c1565738b9cb-image-1466794447737.gif"
        width="150"/><br/>\r
        <h4>A Birthday Cake</h4><br/><br/>\r
        </td>\r
        \r
        </tr>\r
        </table>\r
      grade1_maze_sequence8_markdown_instruction: |-
        **Challenge:** Debug this level
        by adding blocks to get me to the pig!
      grade1_maze_sequenceA_markdown_instruction: |-
        **Challenge:** Move me around
        the TNT to get to the pig.
      grade1_playlab_events1_markdown_instruction: |-
        This game is called "Play Lab".  \r
        \r
        <br/>\r
        See
        if you can figure out what each block does.
      grade1_playlab_eventsFP_markdown_instruction: |-
        Use your imagination. What can
        you do to make this game more fun?\r
        <br/>\r
        \r
        <h5>\r
        <details>\r
        <summary><b>Need
        some ideas?</b></summary>\r
        \t<br/>\r
        \t<h5>\r
        \t\t<ul>\r
                \t<li><strong>Conversation</strong>
        - Add blocks so that the characters say "Hello!" when they run into each
        other. </li>\r
                    <li><strong>Where's the Dragon?</strong> - Have
        the dragon dissapear when the up arrow key is pressed.</li>\r
                    <li><strong>Super
        Dragon</strong> - Make the dragon move at a faster speed and then try to catch
        him with the knight. </li>\r
                </ul>\r
        \t</h5>\r
        </details>\r
        </h5>
      grade2_CaringForNewPet_0_markdown_instruction: |-
        For this puzzle, drag all of
        the blocks together and click "Run" to watch it go!
      grade2_CaringForNewPet_1_markdown_instruction: |-
        Drag an extra `move forward`
        block out of the toolbox to finish your code.
      grade2_CaringForNewPet_11_markdown_instruction: |-
        *"Keep calm and help me find
        the bad pig."*
      grade2_CaringForNewPet_2_markdown_instruction: |-
        *"This pig is ruffling my
        feathers."*\r
        \r
        There is one extra block that is going to cause the bird
        to crash.  \r
        Throw it away by dragging it back to the toolbox.
      grade2_CaringForNewPet_2courseC_maze_programming3_markdown_instruction: |-
        *"This
        pig is ruffling my feathers."*\r
        \r
        There is one extra block that is going
        to cause the bird to crash.  \r
        Throw it away by dragging it back to the
        toolbox.
      grade2_CaringForNewPet_3_markdown_instruction: |-
        *"Trace the path and lead
        me to the silly pig. Avoid TNT or feathers will fly!"*
      grade2_CaringForNewPet_3D_markdown_instruction: |-
        *"Follow this path to get
        me to the pig!"*
      grade2_CaringForNewPet_4_markdown_instruction: |-
        *"Keep calm and help me find
        the bad pig. Otherwise I might get angry!"*
      grade2_CaringForNewPet_6_markdown_instruction: |-
        **Challenge:** Guide me to
        the green evilness! (Watch out for TNT)
      grade2_CaringForNewPet_7D_markdown_instruction: |-
        *"It's time to get angry!"*\r
        \r
        **Challenge:**
        This code has a lot of bugs. You'll need to remove blocks and add blocks.
      grade2_MakeDogTag_1_markdown_instruction: |-
        *"Let's make a cage for my pet
        monster!"*\r
        \r
        Drag blocks onto the screen to have the artist draw over
        the grey lines in the picture.  \r
        (Each line is 100 pixels long)
      grade2_MakeDogTag_10_markdown_instruction: |
        Now, draw anything you like!\r
        <br/><br/>\r
        Here
        are some ideas you could try if you get stuck (the last one is a challenge):\r
        <br/>\r
        <hr/>\r
        <h3>Ideas</h3>\r
        <table>\r
        <tr>\r
        <td>\r
        <img
        src="https://images.code.org/c8748bea36ec8ea92ceb13d86cd862d2-image-1471033427162.13.51
        PM.png" width="150"/><br/>\r
        </td>\r
        \r
        <td>\r
        <img src="https://images.code.org/57c582dca6126e30de36b5bef5517f78-image-1471033432715.03.46
        PM.png" width="150"/><br/>\r
        </td>\r
        \r
        <td>\r
        <img src="https://images.code.org/9df13dec95da560686472580304d9ee3-image-1471033275008.55.15
        PM.png" width="150"/><br/>\r
        </td>\r
        \r
        </tr>\r
        </table>\r
        \r
        \r
      grade2_MakeDogTag_2_markdown_instruction: |-
        *"This spaceship needs a window!"*\r
        \r
        Each
        side of the inner square is 100 pixels and all of the angles are 90 degrees.
      grade2_MakeDogTag_3_markdown_instruction: |-
        *"Oh no!  Starla's pet alien just
        flew away! Let's help the spacewoman!"*\r
        \r
        Finish Starla's rocket so
        she can chase her pet.  \r
        (Each side of the triangle is 100 pixels long
        and has 120 degree outer angles)
      grade2_MakeDogTag_4_markdown_instruction: |-
        *"Maybe we should make a tag for
        each of our pets in case they get lost!"*\r
        \r
        Finish this tag by drawing
        a rectangle around the outside.  \r
        (The long sides are 200 pixels each and
        the short sides are each 100 pixels)
      grade2_MakeDogTag_5_markdown_instruction: |-
        *"Now a tag for Belle!"*\r
        \r
        Draw
        this diamond with 200 pixel sides.
      grade2_MakeDogTag_6_markdown_instruction: |-
        **Challenge:** This tag is a special
        one!  Can you figure out how to draw the outline?  \r
        (The long side is 150
        pixels and each of the short sides are 75 pixels.)
      grade2_MakeDogTag_7_markdown_instruction: |-
        One more tag.  This is a triangle
        for Pi.  \r
        (Each side is 150 pixels)
      grade2_MakeDogTag_8_markdown_instruction: |-
        Now let's connect a bunch of V's
        together in a loop.
      grade2_MakeDogTag_9_markdown_instruction: |-
        Time to make something snazzy! \r
        \r
        Rebuild
        the code from the last puzzle, but this time, add a left turn of 30 degrees
        inside the loop. Now, repeat it 24 times instead of 8.
      grade2_MakeDogTag_BFP_markdown_instruction: |-
        *"Hi, I'm an artist. You can
        write code to make me draw almost anything."*\r
        \r
        Play with the blocks
        in the toolbox to see what they do!
      grade2_MakeDogTag_FP_markdown_instruction: |-
        **Freeplay:** What shape will you
        make the tag for your pet?\r
        <br/><br/>\r
        \r
        \r
        Here are some ideas you
        could try if you get stuck:\r
        ![](https://images.code.org/e36330061c21807fac24d804e301e572-image-1475814869558.26.01.png)
      grade2_PuppyLoops_10_markdown_instruction: |-
        My teacher says that I should finish
        what I start!\r
        \r
        Help me finish my pinwheel. Can you figure out what's
        wrong?
      grade2_PuppyLoops_2_markdown_instruction: |-
        Suddenly, a magical block appears!  With
        the `repeat` block, you can loop code over and over.\r
        \r
        Can you get to
        the pig by creating a loop that uses only one `move forward` block inside
        of a `repeat`?
      grade2_PuppyLoops_3_markdown_instruction: |-
        Get me to the pig! Solve this puzzle
        by creating a loop!
      grade2_PuppyLoops_4_markdown_instruction: |-
        In this puzzle, two `repeat` loops
        will help you get to the pig with the fewest number of blocks!
      grade2_PuppyLoops_8_markdown_instruction: |-
        This code for the cat's whiskers
        is wrong. \r
        \r
        Fix this code to draw whiskers that are all the same length.
      grade2_PuppyLoops_9_markdown_instruction: |-
        Looks like the C in code is drawn
        backwards!\r
        \r
        Can you make it look like a C again?
      grade2_collector_10_markdown_instruction: |-
        You're almost done!  \r
        \r
        Collect
        as many pieces of treasure as you can to finish the stage!
      grade2_collector_10_2018_markdown_instruction: |-
        You're almost done!  \r
        \r
        Collect
        as many pieces of treasure as you can to finish the stage!
      grade2_collector_2_markdown_instruction: |-
        Move Laurel to the gold, then use
        `collect` to pick it up.
      grade2_collector_3_markdown_instruction: |-
        *"Sequence matters!"*\r
        \r
        The
        blocks you need are already in the workspace, but not connected.  Put these
        blocks in order to collect all of the gold and solve the puzzle.
      grade2_collector_4_markdown_instruction: |-
        Sequence matters! The blocks you
        need are already in the workspace, but not connected.  Order these blocks
        to solve the puzzle.
      grade2_collector_5_markdown_instruction: |-
        *"Help me collect each gold coin!"*\r
        \r
        These
        blocks are in the wrong order. Can you fix them?
      grade2_collector_6_markdown_instruction: |-
        "Help me collect all of the treasure!"\r
        \r
        These
        blocks are in the wrong order. Reorder them to collect all of the treasure.
      grade2_collector_7_markdown_instruction: |-
        **Challenge:** What is going on here?   \r
        \r
        Even
        if we put these in the right order, there will still be some missing.  \r
        Use
        blocks from the toolbox to collect all of the treasure.
      grade2_collector_8_markdown_instruction: |-
        *"Keep up the good work! Help me
        collect all of the coins."*
      grade2_collector_9_markdown_instruction: '*"Let''s get all of the coins!"*'
      grade2_collector_9a_markdown_instruction: "**Challenge:** Grab all of the coins."
      grade2_collector_A_markdown_instruction: Help Laurel collect all of the treasure.
      grade2_collector_A_2018_markdown_instruction: |-
        Help Laurel collect all of the
        treasure.
      grade2_collector_pre1_markdown_instruction: |-
        *"Hi, I'm Laurel. Today I'm
        searching for treasure at the dog park!"*  \r
        \r
        Play around with the blocks
        to see if you can help Laurel collect some gold.
      grade2_link_RunMarco_partner_markdown_instruction: |-
        <a href="https://www.allcancode.com/runmarco"></a><img
        src="https://images.code.org/c754e82a395ab69e5c1e3b2dfe8bf9ff-image-1486603338831.22.10.png"
        width="400px"/></a>
      grade2_maze_debuggingFP_markdown_instruction: |-
        *"Now, help me sneak up on
        the pig any way you want to!"*
      grade2_maze_intro10_markdown_instruction: Solve this puzzle.
      grade2_maze_intro2_markdown_instruction: |-
        Welcome to Code Studio! Here you
        will learn to use blocks to build programs. Press `Ok`, then find the `Run`
        button to run your first program.
      grade2_maze_intro3_markdown_instruction: |-
        The `workspace` is where you will
        create all of your programs. Find the workspace, then see what the program
        does.
      grade2_maze_intro4_markdown_instruction: |-
        The `toolbox` is where blocks are
        stored. You can drag them into the `workspace` to create programs.
      grade2_maze_intro6_markdown_instruction: |-
        That’s it!  Now we’re ready to try
        to solve a few puzzles.
      grade2_maze_intro7_markdown_instruction: |-
        This time, try something a bit more
        challenging.
      grade2_maze_intro8_markdown_instruction: |-
        This is a challenge puzzle.  It is
        meant to be hard and will probably take you a couple of tries to solve.  If
        you don’t solve it after several tries, don’t worry!  It will be in the Play
        Zone at the end of the stage and you can try it again when you’ve had more
        practice.
      grade2_maze_intro9_markdown_instruction: Solve this puzzle.
      grade2_playlab_project_3_markdown_instruction: |-
        Can you have Waddles (actor
        1) say "Ouch!" and play a "hit" sound if he runs into Chomp? \r
        \r
        When
        you're done, play the game to make that happen.\r
        \r
        ![](https://images.code.org/a634f249021651f60a1acf37bf78d07d-image-1475342557950.gif)
      grade2_playlab_project_6_markdown_instruction: |
        <style>\r
        .hint{\r
        \tpadding:
        15px 15px 15px 40px; \r
            background-color:#eeeeee; \r
            border-radius:10px;\r
        }\r
        .hintInner{\r
        \tpadding:
        15px 15px 15px 15px;  \r
            background-color:#FFFFFF; \r
            border-radius:10px;\r
        }\r
        \r
        img{\r
        \tborder-radius:
        10px;\r
            mix-blend-mode: multiply;\r
        }\r
        \r
        </style>\r
        \r
        Create
        your own story. When you're done, click "Finish" to share with friends.\r
        <br/>\r
        \r
        <h5
        class="hint">\r
        <details>\r
        <summary><b>Need some ideas?</b></summary>\r
        \t<br/>\r
        \t<h5
        class="hintInner">\r
        \t\t<ul>\r
                \t<li><strong>Who's there?</strong>
        - Make characters appear with random images, so no one knows who's showing
        up next.</li>\r
                    <li><strong>Going on an Adventure</strong> -
        Change the background, then have the characters talk about where they are
        now. </li>\r
                    <li><strong>Pinball</strong> - Make one character
        move using the arrow keys (use `when up arrow`, `when down arrow` blocks),
        then play random sounds when it collides with other characters on the screen.
        </li>\r
                </ul>\r
        \t</h5>\r
        </details>\r
        </h5>\r
      grade2_puppy_loops2_markdown_instruction: |-
        Suddenly, a magical block appears!  With
        the `repeat` block, you can loop code over and over.\r
        \r
        Can you get to
        the pig by creating a loop that uses only one `move forward` block inside
        of a `repeat`?
      grade2_puppy_loops3_markdown_instruction: |-
        *"Get me to the pig!"*\r
        \r
        Solve
        this puzzle by creating a loop!
      grade2_puppy_loops4_markdown_instruction: |-
        In this puzzle, two `repeat` loops
        will help you get to the pig with the fewest number of blocks!
      grade2_puppy_loops5_markdown_instruction: |-
        *"Get me to the pig as quickly
        as possible!"*
      grade2_puppy_loops6_markdown_instruction: |-
        *"This pig is ruffling my feathers!"*\r
        \r
        Loops
        even work with more than one block inside!  Can you loop this sequence?
      grade2_puppy_loops7_markdown_instruction: |-
        *"Get me to the pig!"*\r
        \r
        Use
        what you learned in other puzzles!
      grade3_ConditionalsElse_1_markdown_instruction: |-
        This cloud is blocking my
        view! \r
        \r
        Check to see if there's a flower under the cloud, and only
        get nectar if there's a flower.   \r
        Be careful, it can change!
      grade3_ConditionalsElse_2_markdown_instruction: |-
        More clouds! \r
        \r
        Check
        underneath every cloud to see if it is hiding a flower before you get nectar.  \r
        \r
        Remember:
        Not all clouds hide the same thing!
      grade3_ConditionalsElse_4_markdown_instruction: |-
        Sometimes this cloud covers
        a flower, and sometimes it covers a honeycomb! \r
        \r
        Use the `if/else` block
        to collect nectar only if it is a flower.  \r
        Else, make honey (because it
        is a honeycomb).
      grade3_ConditionalsElse_5_markdown_instruction: |-
        There will be either a flower
        or a honeycomb under each of those clouds!\r
        \r
        Use the `if/else` block
        to collect nectar if there is a flower.\r
        Otherwise, make honey (because
        there is a honeycomb).
      grade3_ConditionalsElse_6_markdown_instruction: |-
        I am not sure how much nectar
        this flower has, but I know it has either 1, 2, or 3 nectar. \r
        \r
        Combine
        the conditional blocks (`if` and/or `if/else`) to only get as much nectar
        as the flower has. \r
        \r
        Remember, the amount of nectar can change each
        time you run the puzzle!
      grade3_ConditionalsElse_7_markdown_instruction: |-
        These flowers can have 3,
        2, or 1 nectar. \r
        \r
        Complete the `check purple flower` function and use
        it to collect all of the nectar at the flowers.
      grade3_ConditionalsElse_8_markdown_instruction: |-
        Write the function for `check
        flower make honey`. \r
        \r
        Your function should check if the purple flower
        has 3, 2, or 1 nectar and get all of the nectar. \r
        Then, move forward and
        make honey.
      grade3_ConditionalsElse_9_markdown_instruction: |
        **Assessment:** This cloud
        is either hiding a flower with one nectar or a honeycomb that needs one honey.  \r
        \r
        Complete
        the `get nectar or make honey` function, then call it to collect the nectar
        or honey. \r
      grade3_ConditionalsElse_TeacherIDo_markdown_instruction: |-
        There will be either
        a flower or a honeycomb under each of those clouds!\r
        \r
        Use the `if/else`
        block to collect nectar if there is a flower.\r
        Otherwise, make honey (because
        there is a honeycomb).
      grade3_Conditionals_1_markdown_instruction: |-
        I'm a hungry bee! \r
        \r
        \r
        Help
        me collect all of the nectar from the flowers using the fewest number of blocks.
      grade3_Conditionals_10_markdown_instruction: |-
        There's a lot happening here!\r
        \r
        Use
        what you've learned to collect all of the nectar and then make the honey.
      grade3_Conditionals_11 BAD_markdown_instruction: |-
        **Assessment:** Use a `while`
        loop to collect all of the nectar from these flowers.
      grade3_Conditionals_11_markdown_instruction: |-
        Let's put everything together!\r
        \r
        Use
        what you've learned to help me collect nectar only from flowers that have
        it, using as few blocks as possible.  \r
        \r
        Don't forget to make honey
        at the end.
      grade3_Conditionals_12_markdown_instruction: |-
        This stair step pattern should
        look familiar.  \r
        \r
        Can you collect nectar only from the flowers that
        have some, using as few blocks as possible?
      grade3_Conditionals_13_markdown_instruction: |-
        **Assessment:** Collect all of
        the nectar.  \r
        Be careful not to try to collect nectar from a purple flower
        if it doesn't have any.
      grade3_Conditionals_2_markdown_instruction: "Look at all of that nectar!\\r\n\\r\nHelp\nme
        collect the nectar and make the honey using as few blocks as you can.  "
      grade3_Conditionals_3_markdown_instruction: |-
        These magic purple flowers change!\r
        \r
        Each
        time you try the puzzle, purple flowers can have either 1 nectar or none at
        all...but you won't know the number until you run the code! \r
        \r
        Be careful
        not to collect nectar from a purple flower if it doesn't have any. \r
        You
        must first check if the nectar is equal to 1 using the `if nectar` block.
      grade3_Conditionals_8_markdown_instruction: "I wonder what's out there!\\r\n\\r\nHelp\nme
        fly around the yard and collect nectar only from the flowers that have\nsome. "
      grade3_Debugging_1_markdown_instruction: |-
        These blocks are really bugging me!\r
        \r
        Fix
        the error(s) to collect all of the nectar.
      grade3_Debugging_10_markdown_instruction: |-
        **Challenge:** *"This puzzle is
        making me loopy!"*\r
        \r
        All of the commands that you need are already here...now
        use your debugging skills to figure out how to solve this puzzle.
      grade3_Debugging_11_markdown_instruction: |-
        **Challenge:**  Fix the errors to
        collect all of the nectar and make all of the honey.
      grade3_Debugging_2_markdown_instruction: |-
        *"These blocks are really bugging
        me!"*\r
        \r
        Fix the error(s) to collect all of the nectar.
      grade3_Debugging_3_markdown_instruction: |-
        *"Ooh, this one stings!"*\r
        \r
        Fix
        the error(s) to collect all of the nectar.
      grade3_Debugging_4_markdown_instruction: |-
        *"These blocks are really bugging
        me."*\r
        \r
        Fix the error(s) to collect all of the nectar and make all of
        the honey.
      grade3_Debugging_5_markdown_instruction: |-
        That flower looks tasty! \r
        \r
        Fix
        the error(s) to collect all of the nectar.  \r
        You can now use both run and
        step.
      grade3_Debugging_6_markdown_instruction: |-
        What a sweet challenge!\r
        \r
        Fix
        the error(s) to collect all of the nectar.
      grade3_Debugging_8_markdown_instruction: |-
        *"This could be sweet!"*\r
        \r
        Fix
        the error(s) to make all of the honey.
      grade3_Debugging_9_markdown_instruction: |-
        "Bee" patient with this one!\r
        \r
        You
        will need to fix a couple of things in this program to collect all of the
        nectar and make all of the honey.
      grade3_Loops_10_markdown_instruction: |-
        Such a busy bee!\r
        \r
        Help Bee collect
        all of the nectar and make all of the honey with the fewest blocks possible.
      grade3_Loops_11_markdown_instruction: |-
        The shape of this path is different
        from the others. \r
        \r
        Can you collect all of the nectar using as few blocks
        as possible?
      grade3_Loops_3_markdown_instruction: |-
        Use a `repeat` loop to collect all of
        the nectar.
      grade3_Loops_4_markdown_instruction: |-
        Now use the `repeat` block to collect
        all of the nectar and make all of the honey.
      grade3_Loops_5_markdown_instruction: |-
        What a beautiful field of flowers!\r
        \r
        Help
        the bee visit each one.\r
        \r
        Can you find a way to do it with fewer than
        7 blocks?
      grade3_Loops_6_markdown_instruction: |-
        How many times can loops help you in
        this puzzle?  \r
        \r
        Loops are your friend! Use a few of them to complete
        this puzzle with the fewest blocks possible.
      grade3_Loops_7_markdown_instruction: |-
        Those flowers look tasty!\r
        \r
        Collect
        nectar from each of the flowers using the fewest blocks possible.
      grade3_Loops_TeacherIDo_markdown_instruction: |-
        Those flowers look tasty!\r
        \r
        Collect
        nectar from each of the flowers using the fewest blocks possible.
      grade3_RunningFarm_1_markdown_instruction: |-
        *"Corn you help me harvest today?"*\r
        \r
        Use
        conditionals to make sure that you pick all of the corn, but don't disturb
        the stalks where nothing is growing yet.
      grade3_RunningFarm_10_markdown_instruction: |-
        Collect all of the corn and lettuce,
        then pick the pumpkin.
      grade3_RunningFarm_11a_markdown_instruction: |-
        Collect all of the corn and lettuce,
        then pick the pumpkin.
      grade3_RunningFarm_2_markdown_instruction: |-
        *"Lettuce collect both crops from
        this row!"*\r
        \r
        Help the farmer collect both corn and lettuce from the
        field.
      grade3_RunningFarm_4_markdown_instruction: |-
        *"Gosh! Now the crops are growing
        in clusters!"*  \r
        \r
        Help the farmer pick all of the lettuce in each cluster
        before moving on to the next bunch.
      grade3_RunningFarm_5_markdown_instruction: |-
        *"What a bountiful crop!"*\r
        \r
        This
        field has clusters of corn, lettuce, and pumpkins all growing together.  Can
        you collect them all?
      grade3_RunningFarm_6_markdown_instruction: |-
        *"Let's take this one step further!"*\r
        \r
        Can
        you figure out how to pick the pumpkin?  Make sure to collect all of the corn
        along the way!
      grade3_RunningFarm_7_markdown_instruction: |-
        **Challenge:** Collect all of the
        corn and lettuce, then pick the pumpkin.
      grade3_RunningFarm_8_markdown_instruction: |-
        Harvesting one type of crop at
        a time takes too long. Can you help me harvest both wheat and potatoes in
        one run? I wonder if you can stack another While There is... loop on top of
        another one?
      grade3_RunningFarm_9_markdown_instruction: |-
        Can you help me one last time?
        I want to collect as many crops as I can before the weeds take over this field.
        How many do you think we can get?
      grade3_bee_conditionals_new1a_markdown_instruction: |-
        You can only collect nectar
        from flowers, but you can check any space to see if there is a flower.
      grade3_bee_conditionals_new2a_markdown_instruction: |-
        In this puzzle, we know
        that every flower has exactly one nectar, but the flowers aren't spaced evenly.\r
        \r
        Get
        all of the nectar using as few blocks as possible.
      grade3_bee_conditionals_new3b_markdown_instruction: |-
        Conditionals can be helpful,
        even when you know exactly what is in each spot!\r
        \r
        Collect all of the
        nectar and make all of the honey.
      grade3_bee_conditionals_quantum1_markdown_instruction: |-
        *"This cloud is blocking
        my view!"*\r
        \r
        Check to see if there's a flower under the cloud. If there's
        a flower, get nectar.
      grade3_bee_conditionals_quantum2_markdown_instruction: |-
        More clouds! \r
        \r
        Check
        underneath every cloud to see if it is hiding a flower before you get nectar.  \r
        \r
        Remember:
        Not all clouds hide the same thing!
      grade3_bee_conditionals_quantum3_markdown_instruction: |-
        *"Now I just want
        to make honey."*\r
        \r
        Some of these clouds might have honeycombs under
        them.  Be sure to check if a honeycomb is hiding behind each cloud!
      grade3_bee_conditionals_quantum4_markdown_instruction: |-
        Sometimes a cloud covers
        a flower, sometimes it covers a honeycomb! \r
        \r
        Use the `if/else` block
        to collect nectar at flowers and make honey at honeycomb.
      grade3_bee_conditionals_quantum5_markdown_instruction: |-
        **Challenge:** There
        will be either a flower or a honeycomb under each of those clouds!\r
        \r
        Use
        the `if/else` block to collect nectar if there is a flower.\r
        Otherwise,
        make honey (because there is a honeycomb).
      grade3_maze_Loop1_markdown_instruction: "**Assessment:**  Get me to the sunflower\nusing
        only 5 blocks! "
      grade3_maze_loops1_markdown_instruction: |-
        *"Must...eat...sunflower!"*\r
        \r
        Get
        the zombie to the sunflower.
      grade3_maze_loops2_markdown_instruction: "Get the zombie to the sunflower using\nthe
        fewest blocks possible!  "
      grade3_maze_loops2a_markdown_instruction: |-
        *"Zombie hungry!"*\r
        \r
        Get
        the zombie to the sunflower using the fewest number of blocks possible.
      grade3_maze_loops3_markdown_instruction: |-
        *"Must eat sunflower!"*\r
        \r
        Get
        the zombie to the sunflower using only the blocks available.
      grade3_maze_nestedLoops2_markdown_instruction: |-
        Suddenly, a magical block appears!  With
        the `repeat` block, you can loop code over and over.\r
        \r
        Can you get to
        the pig by creating a loop that uses only one `move forward` block inside
        of a `repeat`?
      grade3_maze_nestedLoops3_markdown_instruction: |-
        Get me to the pig! You can
        only use one `move forward` block this time
      grade3_maze_nestedLoops4_markdown_instruction: |-
        In this puzzle, two `repeat`
        loops will help you get to the pig with the fewest number of blocks!
      grade4_arist_functions_star0_markdown_instruction: |-
        Have you drawn something
        like this star before? Practice making it one more time by adding a `turn`
        and a `repeat` block.
      grade4_arist_nested_loop_circles1_markdown_instruction: |-
        **Assessment:** Use
        a nested loop to complete the design.
      grade4_arist_nested_loop_flags1_markdown_instruction: |-
        Loop the given code
        to create a windmill.
      grade4_arist_nested_loop_polygons1_markdown_instruction: |-
        Loop this design
        10 times. \r
        \r
        How much do you have to turn each time you loop?
      grade4_arist_nested_loop_polygons2_markdown_instruction: "Loop this shape 6\ntimes.
        \\r\n\\r\nHow much do you have to turn each time you loop? "
      grade4_arist_nested_loop_squares1_markdown_instruction: |-
        Can you draw these
        10 squares of this sidewalk using a nested loop? \r
        \r
        Each square is 30
        pixels.
      grade4_arist_nested_loop_triangles2_markdown_instruction: "Now nest this loop\ninside
        another loop to draw 10 triangles.  \\r\nThis is called a \"nested\"\nloop.
        \ "
      grade4_arist_nested_loop_triangles3_markdown_instruction: |-
        Can you draw a hexagon
        by looping the triangle code?
      grade4_arist_nested_loop_triangles4_markdown_instruction: |-
        Draw the teeth in
        the alligator's mouth!
      grade4_arist_nested_loop_triangles5_markdown_instruction: |-
        Create a sun by
        nesting the starter code in another loop.\r
        \r
        To get this cool design with
        a hollow center, you'll need to jump forward by the length of the triangle
        before turning.
      grade4_arist_nested_loop_triangles6_markdown_instruction: |-
        Can you draw these
        36 triangles using a nested loop?
      grade4_artist_freeplay_markdown_instruction: |-
        Create your own project! This
        creation will be saved to your Projects dashboard so that you can easily edit
        it any time!
      grade4_artist_functions1_markdown_instruction: |
        *"Me zombie artist. Me love
        drawing!"*\r
        \r
        Help the zombie draw glasses using squares with sides of
        100 pixels.  \r
        The bridge between the glasses is 75 pixels long.\r
        \r
      grade4_artist_functions2_markdown_instruction: |-
        Functions let you define new
        blocks! \r
        \r
        We've moved the blocks needed for drawing a square into a
        function called `draw a square`. This time, use the `draw a square` function
        to create the glasses. \r
        \r
        The squares are 75 pixels apart.
      grade4_artist_functions2a_markdown_instruction: |-
        Create this image using only
        the blocks provided.\r
        \r
        - To draw a diamond, you will need to alternate
        between turning 60 degrees and 120 degrees.
      grade4_artist_functions3a_markdown_instruction: |-
        Create this image using only
        the blocks provided.\r
        \r
        - To draw a diamond, you will need to alternate
        between turning 60 degrees and 120 degrees.
      grade4_artist_functions3b_markdown_instruction: |-
        This time, use lines of 8
        hexagons with 25 pixel sides.\r
        \r
        - To make each hexagon, repeat the 6
        times, turning 60 degrees.\r
        - To draw a diamond, you will need to alternate
        between turning 60 degrees and 120 degrees.
      grade4_artist_functionsChallenge0_markdown_instruction: |-
        **Challenge:** Create
        as many functions as you think you need to make this drawing of 50 pixel squares.
      grade4_artist_functions_challenge_markdown_instruction: |-
        **Functions Super
        Challenge:** Use the suggested functions to draw four rows of hexagons. Notice
        how our even numbered rows are shifted to the right?
      grade4_artist_functions_challenge2_markdown_instruction: |-
        **Functions Super
        Challenge:** Use the suggested functions to draw four rows of hexagons. Notice
        how our even numbered rows are shifted to the right?
      grade4_artist_functions_freeplay_markdown_instruction: |-
        Create your own project!
        This creation will be saved to your Projects dashboard so that you can easily
        edit it any time!\r
        <hr/>\r
        <h3>Here are some ideas if you are looking for
        inspiration, or make your own function!</h3>\r
        <table>\r
        <tr>\r
        <td>\r
        <img
        src="https://images.code.org/7e85601182e37a5331a17c0e29cf504d-image-1471042674372.42.08
        PM.png" width="200"/><br/>\r
        </td>\r
        \r
        <td>\r
        <img src="https://images.code.org/6ae7664d92a706e852d92dc419836557-image-1471042678266.55.48
        PM.png" width="200"/><br/>\r
        </td>\r
        \r
        \r
        </tr>\r
        </table>
      grade4_artist_functions_stars0_markdown_instruction: |-
        We will come back to
        functions shortly. Let's take a break to practice making this star. \r
        \r
        You
        can make this drawing by adding a repeat block.
      grade4_artist_functions_stars1_markdown_instruction: |-
        Now that you can draw
        a star, try drawing four stars!\r
        \r
        - Each branch of the star is 25 pixels
        long\r
        - Turn 45 degrees between branches\r
        - Jump 100 pixels between each
        star
      grade4_artist_functions_stars2_markdown_instruction: |-
        When is drawing three
        stars harder than drawing four? When you also have to jump over the moon!\r
        \r
        Draw
        only those three stars to finish this puzzle.
      grade4_artist_functions_stars3_markdown_instruction: |-
        That last one is tough
        if you only use loops. Let's try one more time and see if this new 'function'
        makes it easier to **draw a star**.
      grade4_artist_functions_windows0_markdown_instruction: |-
        You are doing great!
        \r
        \r
        Make this window by drawing a square, then turning 90 degrees before
        drawing another, and so on.
      grade4_artist_functions_windows1_markdown_instruction: |-
        You just created a
        nested loop! Let's repeat all of these commands with **another** `repeat`
        block to draw windows on this house. Don't forget to `jump`!
      grade4_artist_functions_windows2_markdown_instruction: |-
        Let's take the code
        for the window and add it to function `draw a window`. Now, we can call the
        function any time we need to draw a window without having to write the code
        again. \r
        \r
        <img src="https://images.code.org/57c016bcafe697e6ddb196e0f13c9ef9-image-1468602046641.gif"
        width="450px"/>\r
        <br/> \r
        \r
        Try solving this puzzle by creating `draw
        a window` and calling it five times. Watch out for the door!\r
        \r
        - The
        top windows are 50 pixels away from each other.  \r
        - The bottom windows
        are 100 pixels below the top set.
      grade4_artist_nestedLoops_challenge_markdown_instruction: "<img src=\"https://images.code.org/c876143212d195192013582f57c6df04-image-1445625392518.36.18.png\"\nwidth=\"150px;\"
        style=\"mix-blend-mode: multiply;\" />\\r\n\\r\n**Play time:**  Here\nis the
        code for an interesting shape.   \\r\n\\r\nWhat happens when you repeat\nit
        multiple times, turning between each iteration?   \\r\n\\r\nNotice that the\nturns
        in this shape add up to *420 degrees*, which means that when your artist\nis
        done drawing, it will be facing a different direction than when you started.
        \ That\nnew direction is exactly *60 degrees* to the *right* of where you
        began.\\r\n\\r\n<hr/>\\r\n\\r\n<h4>\\r\n<details>\\r\n<summary><b>Repeat\n4</b></summary>\\r\n<br/>\\r\nIf
        you want to come full circle in just 4 repetitions,\nyou need the artist to
        turn a total of **360 degrees/4 = 90 degrees** each\ntime.  You can do that
        by adding an extra `turn right by 30 degrees` block\nto the outer loop (since
        **60+30 = 90**.)  \\r\n<br/>\\r\n<img src=\"https://images.code.org/9da67a628ed72e87520a02a0d917e2af-image-1440132370113.44.12.png\"\nwidth=\"500px;\"
        style=\"mix-blend-mode: multiply;\" />\\r\n<br/><br/>\\r\n</details>\\r\n</h4>\\r\n\\r\n<h4>\\r\n<details>\\r\n<summary><b>Repeat\n6</b></summary>\\r\n<br/>\\r\nWhen
        you repeat the shape as-is 6 times, you get\na total rotation of **6x60 degrees**
        which is a full **360 degree** cycle.  \\r\n<img\nsrc=\"https://images.code.org/b79f96b87097ce3afe8a6a5608d04e36-image-1440132287456.44.27.png\"
        \ width=\"500px;\"  style=\"mix-blend-mode:\nmultiply;\" />\\r\n</details>\\r\n</h4>\\r\n\\r\n<h4>\\r\n<details>\\r\n<summary><b>Repeat\n12</b></summary>\\r\n<br/>\\r\nIf
        you want to repeat the image 12 times, you\nneed the artist to turn a total
        of **360 degrees/12 = 30 degrees** each iteration.  That\nmeans you will need
        to adjust the artist back a bit with `turn left by 30\ndegrees` before you
        repeat the shape again.   <br/><br/>\\r\n<img src=\"https://images.code.org/ad254952522674496918561096817c66-image-1440132424792.44.01.png\"\nwidth=\"500px;\"
        style=\"mix-blend-mode: multiply;\" />\\r\n</details>\\r\n</h4>\\r\n\\r\nNow\nit's
        your turn!  Can you recreate each image by repeating the starting shape?  "
      grade4_artist_nestedLoops_challenge2_markdown_instruction: "<img src=\"https://images.code.org/6cac10470af71bbb5d75bf5e2669046f-image-1439939145211.png\"\nwidth=\"200px\"/>\\r\n\\r\nNow
        for a challenge!  \\r\n\\r\nHere is a design that\nuses only blocks that you
        have already been shown.  Can you figure out how\nto recreate it?  Feel free
        to use trial and error. You are not expected to\nget it perfect the first
        time.\\r\n\\r\nThe repeated shape is almost identical\nto the one from the
        last puzzle, except that the length used in the first\nloop is a little smaller. "
      grade4_artist_nested_loop_circles1_markdown_instruction: |-
        **Assessment:** Use
        a nested loop to complete the design.
      grade4_artist_nested_loop_flags1_markdown_instruction: |-
        Loop the given code
        to create a windmill.
      grade4_artist_nested_loop_polygons1_markdown_instruction: |-
        Loop this design
        10 times. \r
        \r
        How much do you have to turn each time you loop?
      grade4_artist_nested_loop_polygons2_markdown_instruction: "Hi, I'm the Artist!\nLet's
        create some drawings together! For starters, try repeating this shape\n6 times.
        \\r\n\\r\nHow much do you have to turn each time you loop? "
      grade4_artist_nested_loop_squares1_markdown_instruction: |-
        Can you draw these
        10 squares of this sidewalk using a nested loop? \r
        \r
        Each square is 30
        pixels.
      grade4_artist_nested_loop_triangles1_markdown_instruction: |
        Complete the code
        to draw these triangles.  The first one is done for you.  Hint:  3 triangles
        in a 360 degree rotation.\r
        \r
      grade4_artist_nested_loop_triangles2_markdown_instruction: |-
        Let's make a quick
        adjustment to get completely different image!  \r
        <b>Hint:</b> ? × 10 = 360
      grade4_artist_nested_loop_triangles3_markdown_instruction: |-
        Can you draw a
        hexagon by looping the triangle code?\r
        Hint: 6 × ? = 360
      grade4_artist_nested_loop_triangles4_markdown_instruction: |-
        Let's try something
        a little different! Can you help me draw the bottom teeth in the alligator's
        mouth?
      grade4_artist_nested_loop_triangles5_markdown_instruction: |-
        Create a sun by
        nesting the starter code in another loop.\r
        \r
        To get this cool design with
        a hollow center, you'll need to jump forward by the length of the triangle
        before turning.
      grade4_artist_nested_loop_triangles6_markdown_instruction: |-
        Can you draw these
        36 triangles using a nested loop?
      grade4_artist_parameters_squares1_markdown_instruction: |-
        Click "edit" to
        fill in the function definition of `draw a square` and add a parameter.  \r
        It
        should take a length parameter just like the triangle. \r
        \r
        **This time,
        draw 3 squares:** 25, 50 and 75 pixels in length. The lefthand corners are
        each 100 pixels away from the last.
      grade4_artist_parameters_triangles1_markdown_instruction: |-
        Today, we're going
        to try out a different, more powerful function editor. See if you can figure
        out how to edit the `draw a triangle` function to find the bugs.
      grade4_artist_parameters_triangles2_markdown_instruction: |-
        Do you notice anything
        different about these function blocks? Click “Run” to see what happens.
      grade4_artist_parameters_triangles2b_markdown_instruction: |-
        Can you complete
        this drawing? \r
        \r
        The sides of each triangle are 25 pixels larger than
        the last.  \r
        The first triangle has 25 pixel sides.
      grade4_artist_parameters_triangles3_markdown_instruction: |-
        Can you complete
        this drawing? \r
        \r
        The sides of each triangle are 25 pixels larger than
        the last.  \r
        The first triangle has 25 pixel sides.
      grade4_artist_parameters_triangles4_markdown_instruction: |-
        The code for this
        triangle function is broken. \r
        \r
        Can you edit the function to fix it,
        and then make triangles of length 25, 50, and 75?
      grade4_artist_parameters_trianglesx_markdown_instruction: |-
        Can you complete
        this drawing? \r
        \r
        The sides of each triangle are 25 pixels larger than
        the last.  \r
        The first triangle has 25 pixel sides.
      grade4_bee_conditionals_nested_loops_markdown_instruction: |-
        **Assessment:**
        Collect all of the nectar.  \r
        Be careful not to try to collect nectar from
        a purple flower if it doesn't have any.
      grade4_bee_conditionals_new1_markdown_instruction: |-
        **Assessment:** Collect
        all of the nectar.  \r
        Be careful not to try to collect nectar from a purple
        flower if it doesn't have any.
      grade4_bee_conditionals_quantum1_markdown_instruction: |-
        This cloud is blocking
        my view! \r
        \r
        Check to see if there's a flower under the cloud, and only
        get nectar if there's a flower.   \r
        Be careful, it can change!
      grade4_bee_conditionals_quantum2_markdown_instruction: |-
        More clouds! \r
        \r
        Check
        underneath every cloud to see if it is hiding a flower before you get nectar.  \r
        \r
        Remember:
        Not all clouds hide the same thing!
      grade4_bee_conditionals_quantum4_markdown_instruction: |-
        Sometimes this cloud
        covers a flower, and sometimes it covers a honeycomb! \r
        \r
        Use the `if/else`
        block to collect nectar only if it is a flower.  \r
        Else, make honey (because
        it is a honeycomb).
      grade4_bee_conditionals_quantum5_markdown_instruction: |-
        There will be either
        a flower or a honeycomb under each of those clouds!\r
        \r
        Use the `if/else`
        block to collect nectar if there is a flower.\r
        Otherwise, make honey (because
        there is a honeycomb).
      grade4_bee_functions2_markdown_instruction: |-
        Functions are blocks of code that
        perform a task.  \r
        \r
        Use the `get 2 nectar` function to collect the nectar
        from each flower.
      grade4_bee_functions3_markdown_instruction: |-
        Build the `get 5` function to
        use in this puzzle.
      grade4_bee_functions4_markdown_instruction: |-
        The `move and get nectar` function
        turns the bee, collects nectar, and then returns the bee to where it started.  \r
        \r
        Use
        the `move and get nectar` function to collect all of the nectar.
      grade4_bee_functions9_markdown_instruction: |-
        **Challenge:** These flowers can
        have a different amount of nectar each time you run the puzzle.   \r
        \r
        Create
        a function that collects all of the nectar from each flower.
      grade4_bee_nestedLoops1_markdown_instruction: "*\"Can you BEE-lieve all of\nthese
        flowers?\"*\\r\n\\r\nCollect all of the nectar from each flower. "
      grade4_bee_nestedLoops2_markdown_instruction: |-
        **Challenge:** Figure out how
        to get all of the nectar using only the blocks available.
      grade4_bee_nestedLoops4_markdown_instruction: "Collect all of the nectar from\neach
        flower and make honey at the honeycomb. "
      grade4_bee_nestedLoops5_markdown_instruction: |
        **Challenge:** Collect all of
        the nectar from each flower and make honey at each honeycomb. \r
      grade4_bee_nestedLoops_assess_markdown_instruction: |-
        **Assessment:** Collect
        all of the nectar and make all of the honey using loops.\r
        \r
        **Hint:**
        *There are several possible solutions!*
      grade4_frozen_freeplay_markdown_instruction: |-
        You've officially become a master
        artist! Create a winter wonderland.
      grade4_frozen_functions0_markdown_instruction: |-
        A circle is a special shape.
        Can you figure out what number to replace the question marks with to draw
        a circle?
      grade4_frozen_functions1_markdown_instruction: |-
        Use the new “dreate a circle”
        `function` to create 10 overlapping circles. Don't forget to `jump` forward
        between circles.
      grade4_frozen_functions1a_markdown_instruction: |-
        Use the new “Create a circle”
        block to create 10 overlapping circles. Don't forget to jump forward between
        circles.
      grade4_frozen_functions2_markdown_instruction: |-
        Now let's create 20 overlapping
        circles, turning 18 degrees between each circle.
      grade4_frozen_functions3_markdown_instruction: |-
        Here's a ”Create circle” block
        that can make circles of different sizes. Can you use this to create a small
        circle of size 5 and a larger circle of size 10?
      grade4_frozen_functions4_markdown_instruction: |-
        Intricate snow patterns can
        be created with very simple shapes. Can you make a pattern by repeating 5
        circles of size 5 and 5 circles of size 10?
      grade4_frozen_nested_loop_diamonds1_markdown_instruction: |-
        Let’s use a repeat
        block to create a rhombus. Like a square, all sides are equal length, but
        the angles are different. This one has 60 degree and 120 degree angles instead
        of all 90 degree angles.
      grade4_frozen_nested_loop_diamonds2_markdown_instruction: |-
        Did you know every
        snowflake is a different shape? Let's create a new snowflake by using another
        “Repeat" block to repeat a parallelogram 4 times, turning right by 90 degrees
        between each parallelogram.
      grade4_frozen_nested_loop_diamonds3_markdown_instruction: |-
        Now, let's create
        a new snowflake by using the repeat block to repeat a parallelogram 10 times,
        turning right by 36 degrees between each one.
      grade4_frozen_nested_loop_rectangle1_markdown_instruction: |-
        Hi, I’m Anna of
        Arendelle! Let’s use a repeat block to create a rectangle. This one is  200
        pixels long and 100 pixels tall. All of the corners are 90 degree angles.
      grade4_frozen_square_markdown_instruction: |-
        Hi, I’m Anna of Arendelle! Let’s
        make a square with the “Repeat” block, which uses fewer blocks. How many times
        (???) should the “Repeat” block loop the blocks inside it to make a square?
      grade4_frozen_square_loop1_markdown_instruction: |-
        Hi, I’m Anna of Arendelle!
        Let’s make a square with the “Repeat” block, which uses fewer blocks. How
        many times (???) should the “Repeat” block loop the blocks inside it to make
        a square?
      grade4_frozen_square_loop2_markdown_instruction: |-
        Let's create three squares,
        turning after each square. Be sure to turn by 120 degrees before each new
        square.
      grade4_frozen_square_loop3_markdown_instruction: |-
        Can you create a snowflake
        using the “Repeat” block to make a square 10 times, and the “Turn” block to
        turn 36 degrees between each square?
      grade4_playlab_freeplay_markdown_instruction: |
        It's free play time! Have fun
        with all the blocks in your tool box.  \r
        <br/>\r
        \r
        <h5>\r
        <details>\r
        <summary><b>Need
        some ideas?</b></summary>\r
        \t<br/>\r
        \t<h5>\r
        \t\t<ul>\r
                \t<li><strong>Tag</strong>
        - Have character 2 patrol and use your arrow keys to make character 1 chase
        until they collide. </li>\r
                    <li><strong>Whack-a-Sprite</strong>
        - Have a character constantly pop up at a random location. Award points for
        clicking the sprite before it disappears. </li>\r
                    <li><strong>Best
        Guess</strong> - Make both characters disappear, change location to a random
        spot, then reappear as a random character.  Click on the first one and get
        a point...but if you click on the second one you LOSE a point! </li>\r
                </ul>\r
        \t</h5>\r
        </details>\r
        </h5>\r
      grade4_playlab_test_markdown_instruction: |-
        <h5><b>\r
        In our game, how should
        we score points? \r
        </b></h5> \r
        <br/>\r
        \r
        1. Add 1 to your `points`
        variable each time Dog hits Cat with a piece of pie.  <br/>    <br/> \r
        2.
        Use the `when actor 2 touches anything` event to trigger an update to your
        score. You can increment your variable by setting `points = points + 1.`  <br/>   <br/>
        \r
        3. Get your score up to 10 to pass the level.\r
        \r
        <br/><br/>\r
        <h4>\r
        **Note:**
        Use the right arrow to throw pie!\r
        </h4>
      grade4_playlab_test2_markdown_instruction: |-
        Here's a function called `jump`
        that causes your main character to jump up 100 pixels. \r
        \r
        Run the program
        and use the jump function to collect all of the flags by moving the dog with
        the arrow keys.
      grade4_review_artist1_markdown_instruction: |
        Hi, I'm an artist. You can write
        code to make me draw almost anything. Use a few blocks to make me draw over
        the grey lines in the picture. (Each line is 100 pixels long)\r
        \r
        <br>  \r
      grade4_review_artist2_markdown_instruction: |-
        This house needs a roof! Draw
        the triangle.  \r
        \r
        Hint: all three sides are the same length.\r
        \r
        <img
        src="https://images.code.org/8b10073fd1a7fe53b4da33ec2229894b-image-1468018903891.gif"
        width="300"/>
      grade4_review_artist3_markdown_instruction: |-
        The jump block moves the artist
        without drawing. Draw the dashed line using both the `jump forward` and `move
        forward` blocks. Each line is 50 pixels long.
      grade4_review_bee1_markdown_instruction: |-
        Now use the `repeat` block to collect
        all of the nectar and make all of the honey.
      grade4_review_bee3_markdown_instruction: |-
        Such a busy bee!\r
        \r
        Help Bee
        collect all of the nectar and make all of the honey with the fewest blocks
        possible.
      grade4_scaffolded_project1_markdown_instruction: |-
        It is amazing how much you
        have learned! Let's put them together to make a game, step by step.\r
        To
        start, let's set up your game's space and actor. We've put these blocks
        in your tool box. Choose a background and map, and pick an actor to be your
        game's hero.\r
        \r
        ![](https://images.code.org/745931ce34b3c47de19c36009e4a9c48-image-1471464938470.14.47
        PM.png)
      grade4_scaffolded_project2_markdown_instruction: |-
        Now let's get things moving!
        Use event handlers and actions to make your hero move.\r
        \r
        We've added
        these blocks to your tool box to help you.\r
        \r
        ![](https://images.code.org/6216c0559cfae16005ffb53e6532473b-image-1471472994205.23.54
        PM.png)
      grade4_scaffolded_project3_markdown_instruction: |-
        Now that your game has a
        hero, it's time to start adding other actors and assigning them behaviors.
        \r
        \r
        Add two or more additional actors to your game and make them move.
        Do you want to have an actor patrol back and forth? Try using a these new
        blocks to bring these other components of your game to life!\r
        \r
        ![](https://images.code.org/4cfffd476c6129891eb8bde246a711a8-image-1472065288448.00.42
        PM.png)\r
        \r
        **NOTE:** Chasing and fleeing behavior commands are coming
        soon!
      grade4_scaffolded_project4_markdown_instruction: |-
        Just getting the actors moving
        is a great step, but we need to program some interactions to make this really
        feel like a game. A simple way to do this is to add or remove points when
        actors collide with projectiles or each other. Find some interesting ways
        to change the score in your game.\r
        \r
        *Don't expect to get this right
        on the first try. Keep testing your game as you code. You'll not only want
        a game that works, but one that is fun to play!*\r
        \r
        We've added these
        blocks to your toolbox:\r
        \r
        ![](https://images.code.org/ad0df96aa91c89e3d903dce2fe19517f-image-1472070105051.20.55
        PM.png)
      grade4_scaffolded_project4a_markdown_instruction: |-
        Just getting the actors
        moving is a great step, but we need to program some interactions to make this
        really feel like a game. A simple way to do this is to add or remove points
        when actors collide with projectiles or each other. Find some interesting
        ways to change the score in your game.\r
        \r
        *Don't expect to get this right
        on the first try. Keep testing your game as you code. You'll not only want
        a game that works, but one that is fun to play!*\r
        \r
        ![](https://images.code.org/876b13abf8a7984f94342dd9a5c8a8f0-image-1472069578010.42.30
        PM.png)
      grade4_scaffolded_project5_markdown_instruction: |-
        Great job! You have all the
        basic components of a working game. Now spend some time making sure the game
        works the way you want. Try including a way to win or lose your game.\r
        \r
        *Don't
        forget: Keep testing your game as you code. You'll not only want a game that
        works, but one that is fun to play!*\r
        \r
        Your toolbox has been re-organized
        to make it easier to find what you need. We've also added these blocks:\r
        \r
        ![](https://images.code.org/59b92b4c288bd5fc0c3be355c968f3d1-image-1472074578380.27.57
        PM.png)
      grade4_scaffolded_project6_markdown_instruction: |-
        You've finished! Now you
        can play your game or share it with your friends and classmates!
      grade5_artist_binary1_markdown_instruction: |-
        Binary is a way of representing
        information using only two options.  Here, we're going to use the options
        "off" (represented by the number 0) and "on" (represented by the number
        1).   \r
        \r
        We've provided you with a grid of "pixels" that you can walk
        through and make designs by turning on only certain squares.  \r
        \r
        **Can
        you have the artist draw "01010101" in binary in the first row?**
      grade5_artist_binary10_markdown_instruction: |
        <img src="https://images.code.org/0a30f23ff6138828d053267719d34fa8-image-1444435986654.00.22.png"
        width="250px"/>\r
        \r
        **Free-Play Inspiration:** You've now learned everything
        you need to know to make a pattern like this! \r
        \r
        If this picture inspires
        you, try to make something similar. Otherwise, create something all your own.
        \r
        <br/>\r
      grade5_artist_binary2_markdown_instruction: |-
        Here's a function that takes
        a binary string of 1's and 0's and instructs the artist to follow them from
        left to right, top to bottom.  \r
        \r
        The artist will fill-in the squares
        when it sees a 1 and ignore the square when it sees a 0. \r
        \r
        **Run this
        code to see how the artist uses binary to draw this pattern.**
      grade5_artist_for_loops1_markdown_instruction: |-
        Use a `for` loop to draw this
        triangle that is 50 pixels wide. If you count from 1 to 3 by 1s, you can use
        this just like a `repeat` loop.
      grade5_artist_for_loops10_markdown_instruction: |-
        **Challenge:** Can you figure
        out how to use all of the things you've learned to create this image of polygons,
        all with 40 pixel sides?
      grade5_artist_for_loops1a_markdown_instruction: |
        Try using a `for loop`to create
        this triangular design. Don't worry that the numbers are different than the
        last puzzle. As long as you turn by the right number of degrees, the artist
        will make the correct shape!\r
        \r
      grade5_artist_for_loops1b_markdown_instruction: |
        **Free Play:** Experiment
        with the `for` loop and the `counter` variable.  \r
        \r
        Drag out a few blocks
        and see what happens.  \r
        \r
        <br/><br/>\r
      grade5_artist_for_loops2_markdown_instruction: |-
        Use a `repeat` inside of a
        `for` loop to create this stack of triangles that goes from 50 pixels to 100
        pixels.
      grade5_artist_for_loops3_markdown_instruction: |-
        These triangles go from 20
        pixel sides to 200 pixel sides, and each triangle is 20 pixels larger than
        the last.
      grade5_artist_for_loops4_markdown_instruction: |-
        These squares start at 15 pixels
        long, the largest is 300 pixels long, and each square is 15 pixels larger
        than the last.
      grade5_artist_for_loops5_markdown_instruction: |-
        Just one little change to the
        code from the last image can create this drawing. Can you figure out what
        that change is?\r
        \r
        Hint:  You need to remove something!
      grade5_artist_for_loops6_markdown_instruction: |-
        If you turn a little bit more
        or less than you normally would for a shape, it creates a neat effect.\r
        \r
        Try
        using some of the code from the last level, but turning 89 degrees to create
        this twisted square spiral.
      grade5_artist_for_loops7_markdown_instruction: |-
        Make three small changes to
        the code from the last level to get this!  \r
        (This time, the `for` loop
        increments by 2)
      grade5_artist_for_loops7a_markdown_instruction: |-
        Take the angle down to 72
        degrees to get a spiraled pentagon.
      grade5_artist_for_loops7b_markdown_instruction: |-
        Use the counter inside the
        `set alpha` block to get this faded center.  \r
        (This hexagon pattern was
        made using a 60 degree turn.)
      grade5_artist_for_loops8_markdown_instruction: |-
        Remember back in a previous
        stage when we used a variable to control the number of sides in a shape? We
        are going to do the same thing with the `counter` variable now.  \r
        \r
        This
        pattern starts with a triangle and adds one side at a time until it draws
        a decagon (10 sides). Each side should be 100 pixels long. \r
        \r
        How will
        you use the `counter` variable from the `for` loop to recreate this drawing?
      grade5_artist_for_loops9_markdown_instruction: |-
        Let's put it all together!   \r
        \r
        Using
        your knowledge of `for` loops and the `counter` variable, create this drawing
        where each shape has two more sides than the last.  Make sure that each side
        is 10 times as long as the number of sides in the polygon.\r
        \r
        Very little
        of the code has been provided for you.
      grade5_artist_for_loopsfreeplay11_markdown_instruction: |-
        <br/><br/>\r
        <img
        src="https://images.code.org/9b5897e059bb29bd2faf8504659a3cfc-image-1440719685627.49.33.png"
        width="250px"/>  \r
        <br/><br/>\r
        **Free-Play Inspiration:** You've now
        learned everything you need to know to make a pattern like this! If this picture
        inspires you, try to make something similar. Otherwise, create something all
        your own.
      grade5_artist_for_loopsfreeplay12_markdown_instruction: |-
        **Free Play:** Try
        using the `counter` variable with other drawing elements to make magical images
        like this one.\r
        \r
        <img src="https://images.code.org/7910db8adf2ec7e4c5fdad0101c68368-image-1475911466143.24.03.png"
        width="400px"/>
      grade5_artist_freeplay_markdown_instruction: |-
        Create your own project! This
        creation will be saved to your Projects dashboard so that you can easily edit
        it any time!
      grade5_artist_functionparameters10_markdown_instruction: |-
        <img src="https://images.code.org/1df195df9d808f0dd539bef0f5c2958b-image-1443049871563.02.54.png"
        width="250px"/>\r
        \r
        **Free-Play Inspiration:** You've now learned everything
        you need to know to make a pattern like this! \r
        \r
        If this picture inspires
        you, try to make something similar. Otherwise, create something all your own.\r
        \r
        Notice:
        We've used the `set alpha` block to make the "petals" fade toward the outside.
      grade5_artist_functionparameters11_markdown_instruction: |-
        **Freeplay:** Below
        there are functions you've written, and more for you to play with. Play with
        the pen width to see how different your drawings look!
      grade5_artist_functionparameters7_markdown_instruction: |-
        This image is similar
        to the last.  \r
        \r
        Can you use a `for` loop with your function to make
        this design?
      grade5_artist_functionparameters8_markdown_instruction: |
        Use the function from
        the last puzzle to draw this series of shapes.  \r
        \r
        \r
        The triangle has
        21 pixel sides, and the sides in each following shape are 7 pixels longer
        than the last.   \r
        Use the `multiplication`block to make this all happen
        with just one function call.\r
        <hr/>\r
        Be sure to jump 100 pixels between
        polygons. <br>\r
        The multipication block looks like this ![](https://images.code.org/55e293447c6b26bbbcf29cda2036706b-image-1481322763779.png)\r
        \r
      grade5_artist_functionparameters9_markdown_instruction: |-
        **Challenge:** Edit
        `draw a spiral edge` to use `length` and `sides` parameters, then recreate
        these shapes.\r
        \r
        - The square goes from 3 pixels to 90 pixels.\r
        - The
        hexagon goes from 3 pixels to 100 pixels.\r
        - The triangle goes from 3 pixels
        to 105 pixels.
      grade5_artist_functionparameters9a_markdown_instruction: |
        Finish off the `draw
        a spiral edge` function to also ask for a minimum length for the center of
        the spiral.\r
        \r
        - The smallest side in the center of this square is 50
        pixels long\r
        - The longest side at the outside of this spiral is 200 pixels
        long\r
      grade5_artist_functionparameters9b_markdown_instruction: |
        Can you figure out
        how to make this drawing using the function that you just created?\r
        \r
        -
        The red spiral goes from 50 to 200 pixels\r
        - The blue spiral goes from 25
        to 125 pixels\r
        - The green spiral goes from 100 to 300 pixels\r
      grade5_artist_functionparameters_6_markdown_instruction: |-
        Great job!  Now edit
        this function to add a parameter for the number of sides in your polygon.\r
        \r
        The
        sides of all the shapes are 100 pixels long.
      grade5_artist_parameters_squares1_markdown_instruction: |-
        Click "edit" to
        fill in the function definition of `draw a square` and add a parameter.  \r
        It
        should take a length parameter just like the triangle. \r
        \r
        **This time,
        draw 3 squares:** 25, 50 and 75 pixels in length. The lefthand corners are
        each 100 pixels away from the last.
      grade5_artist_parameters_squares1a_markdown_instruction: |-
        Today, we're going
        to try out a different, more powerful function editor. See if you can figure
        out how to edit the `draw a square` function to find the bugs.
      grade5_artist_parameters_squares2_markdown_instruction: |-
        Now try creating the
        function from scratch!  \r
        \r
        Create a function called `draw a square` and
        use it to outline these four boxes.  \r
        Make sure to add a parameter for
        `length`!\r
        \r
        <hr/>\r
        Starting from the upper right, the box widths are
        50, 100, 150, and 200.
      grade5_artist_parameters_squares2a_markdown_instruction: |-
        Edit the function
        to accept a parameter called `length`.  \r
        \r
        The sides of each square should
        be 25 pixels larger than the last.  The first square has 25 pixel sides. Replace
        the '???' with the correct values to draw the picture.
      grade5_artist_parameters_stars1_markdown_instruction: |-
        That last one is tough
        if you only use loops. Let's try one more time and see if this new 'function'
        makes it easier to **draw a star**.
      grade5_artist_parameters_triangles1_markdown_instruction: |-
        Today, we're going
        to try out a different, more powerful function editor. See if you can figure
        out how to edit the `draw a square` function to find the bugs.
      grade5_artist_parameters_triangles1a_markdown_instruction: |-
        Today, we're going
        to try out a different, more powerful function editor. See if you can figure
        out how to edit the `draw a triangle` function to find the bugs.
      grade5_artist_parameters_triangles1aa_markdown_instruction: |-
        Click "edit"
        to fill in the function definition of `draw a triangle` and add a parameter.  \r
        It
        should take a length parameter just like the triangle. \r
        \r
        **This time,
        draw 3 triangles:** 25, 50 and 75 pixels in length. The lefthand corners are
        each 100 pixels away from the last.
      grade5_artist_parameters_triangles2_markdown_instruction: |-
        Can you complete
        this drawing? \r
        \r
        The sides of each triangle are 25 pixels larger than
        the last.  \r
        The first triangle has 25 pixel sides.
      grade5_artist_parameters_triangles2a_markdown_instruction: |-
        Do you notice anything
        different about these function blocks? Click “Run” to see what happens.
      grade5_artist_parameters_triangles3_markdown_instruction: |-
        The code for this
        triangle function is broken.\r
        \r
        Can you edit the function to fix it, and
        then make triangles of length 25, 50, and 75?
      grade5_artist_parameters_triangles4_markdown_instruction: |-
        The code for this
        triangle function is broken. \r
        \r
        Can you edit the function to fix it,
        and then make triangles of length 25, 50, and 75?
      grade5_artist_parameters_trianglesy_markdown_instruction: |-
        The code for this
        triangle function is broken.\r
        \r
        Can you edit the function to fix it, and
        then make triangles of length 25, 50, and 75?
      grade5_artist_variables_freeplay10_markdown_instruction: "**Free Play:** Experiment\nwith
        the number of sides this shape has. Can you change the algorithm so that\nthe
        overall size of the shape stays the same, no matter how many sides it\nhas? "
      grade5_artist_variables_freeplay14_markdown_instruction: |-
        **Free Play**: Check
        it out! Now your algorithm is nested within one more loop. Experiment with
        changing the values of your two variables to draw cool patterns.\r
        \r
        For
        even more effect, try playing with color!  Use random colors inside loops
        to see how it changes your design.
      grade5_artist_variables_freeplay15_markdown_instruction: "<img src=\"https://images.code.org/b5e28b084cb331ee030ea3853ed921bd-image-1440060815818.51.21.png\"\nwidth=\"250px\"/>\\r\n\\r\n**Free-Play
        Inspiration:** You've now learned everything\nyou need to know to make a pattern
        like this! If this picture inspires you,\ntry to make something similar. Otherwise,
        create something all your own. "
      grade5_artist_variables_freeplay16_markdown_instruction: |-
        Still playing?  \r
        \r
        Here
        is a blank canvas where you can create whatever you want!\r
        \r
        <hr/>\r
        <h3>If
        you're looking for ideas, try one of these:</h3>\r
        <table>\r
        <tr>\r
        <td>\r
        <img
        src="https://images.code.org/2e8a6853ccb3ffe9bc6d25aaeea75514-image-1471047821651.10.45
        PM.png" width="200"/><br/>\r
        </td>\r
        \r
        <td>\r
        <img src="https://images.code.org/0b63705c28ac282637a3a5b3cede8608-image-1471047826162.18.02
        PM.png" width="200"/><br/>\r
        </td>\r
        \r
        </tr>\r
        </table>
      grade5_artist_variables_hexagons1_markdown_instruction: |-
        Let's try it again!
        \r
        \r
        Can you set the `length` variable to 60 to make this cool design with
        hexagons?
      grade5_artist_variables_letterT11_markdown_instruction: |-
        Here’s some more complicated
        code using the same concepts from the last puzzle - what should you set the
        `sides` variable to in order to draw this picture made of squares?\r
        \r
        <p
        style="font-size:small; padding: 15px 15px 15px 40px; background-color:#dcf3f3;
        border-radius:10px;">\r
        \tJust for fun: Try using a few different numbers
        to see what happens to the pattern!\r
        </p>
      grade5_artist_variables_octagons13_markdown_instruction: |-
        When a shape has
        lots of sides, each side needs to be shorter if you want the whole pattern
        to fit on the screen. \r
        \r
        Let's recreate the algorithm for this amazing
        pattern, but instead of manually setting the `length` variable, let's use
        a math block with the `sides` variable inside to make sure that each shape
        fits correctly.  \r
        \r
        The perimeter of each polygon is 300 pixels.
      grade5_artist_variables_pentagon8_markdown_instruction: |-
        Use what you learned
        in the last puzzle to create this hexagon using the `sides` variable.\r
        \r
        See
        how you could change just one value to draw a triangle,  square, pentagon,
        or octagon?
      grade5_artist_variables_pentagon9_markdown_instruction: |-
        Now, recreate the
        algorithm from the last level and create a pentagon with sides of length 150.
      grade5_artist_variables_pentagons1_markdown_instruction: |-
        Draw this pattern
        of pentagons with 100 pixel sides by setting the right value for `length`
        and dropping the `length` variable into all of the the correct places. \r
        \r
        See
        how you only have to set the value for `length` once, and the code uses the
        right value everywhere?
      grade5_artist_variables_pentagons12_markdown_instruction: |-
        Let's set the `sides`
        variable to 5. The more sides we add to this algorithm, the bigger this whole
        pattern gets! \r
        \r
        <br/>\r
        Notice that there is another variable called
        `length`. \r
        We can now use that variable wherever we have a `move forward`
        block. \r
        \r
        Set the `length` variable to 75 for this shape.
      grade5_artist_variables_rectangle6_markdown_instruction: |-
        Now I want to make
        a rectangle that is twice as tall as it is wide. We've got a variable called
        `width` that needs to be set to 100. Can you use the math blocks to complete
        the code?
      grade5_artist_variables_square7_markdown_instruction: |-
        Here’s some code that
        can draw any regular polygon. \r
        \r
        There’s a new variable called `sides`
        that is set to 4. \r
        \r
        Can you use the `sides` variable (along with the
        math block) to turn the right amount regardless of how many sides are in the
        polygon?
      grade5_artist_variables_triangles1_markdown_instruction: |
        Let's draw an equilateral
        triangle. \r
        \r
        It has to be exactly 50 pixels long on each side.\r
        \r
      grade5_artist_variables_triangles1_2018_markdown_instruction: |
        Let's draw
        an equilateral triangle. \r
        \r
        It has to be exactly 50 pixels long on each
        side.\r
        \r
      grade5_artist_variables_triangles2_markdown_instruction: |-
        Instead of using
        `move forward by 150`, the `move` block is now referencing a variable called
        `length`. Can you set `length` to 150 to draw this new triangle?
      grade5_artist_variables_triangles3_markdown_instruction: "Drag a number block\nto
        the `set length` block and to the `repeat _ times` block to draw a set\nof
        50 pixel triangles. "
      grade5_bee_for_loops10_markdown_instruction: |-
        If your loop is counting down,
        the increment is **subtracted** from your counter variable each time through.
        \r
        \r
        What should your increment be to collect 15, then 12, then 9, 6, 3
        nectar?
      grade5_bee_for_loops11_markdown_instruction: |
        **Challenge:** Take what you've
        learned about `for` loops and try to solve this problem. \r
        \r
        Remember:
        You may have to run through solutions multiple times before you figure out
        all of the steps.\r
      grade5_bee_for_loops2_markdown_instruction: |-
        Add the code necessary to make
        sure the bee collects all the nectar.\r
        \r
        Look at how much code you need
        for this puzzle! (We'll learn a simpler way in the next puzzle.)
      grade5_bee_for_loops3_markdown_instruction: |-
        Ah, the `for` loop makes this
        much easier!  \r
        \r
        Try this puzzle using the `for` loop with `counter`
        variable and see how much shorter your code becomes.
      grade5_bee_for_loops4_markdown_instruction: |-
        Help the bee collect all of the
        nectar.
      grade5_bee_for_loops5_markdown_instruction: |-
        Now we need to `move forward`
        `counter` times, then `get nectar` `counter` times.  Can you use two `repeat`
        loops to solve this challenge?
      grade5_bee_for_loops6_markdown_instruction: |-
        You can also use a `for loop`
        to count down. Try gathering this nectar by counting down from 5 to 1 by 1.
      grade5_bee_for_loops7_markdown_instruction: |-
        The last number in your `for`
        loop is called the **"increment"**.  Each time the loop is run, the counter
        variable changes by the value of the increment.\r
        \r
        Try collecting these
        flowers using an increment of 2.
      grade5_bee_for_loops8_markdown_instruction: |
        You've got this!  \r
        \r
        What
        should your increment be to collect 3, 6, 9, 12, 15 nectar?\r
        \r
      grade5_bee_for_loops9_markdown_instruction: |-
        Now, let's combine the `counter`
        variable with a math block! \r
        \r
        How can you use the `counter` variable
        to navigate this garden with the fewest number of blocks possible?
      grade5_bee_parameters_new1_markdown_instruction: |-
        Check beneath the clouds
        to see if the flowers have any nectar.
      grade5_bee_parameters_new2_markdown_instruction: |-
        Here's some code that solves
        the last puzzle.  \r
        Let's turn it into a function, then call the function
        to check this row for nectar.  \r
        <hr/>\r
        This may seem like a strange step
        now, but it will be really helpful soon!
      grade5_bee_parameters_new3_markdown_instruction: |-
        Time to put the function
        to the test! \r
        \r
        Let's see if it makes collecting these three rows of
        nectar any easier.
      grade5_bee_parameters_new4_markdown_instruction: |-
        *"How is your function holding
        up?"*   \r
        \r
        We need to make some adjustments here. Click "edit" to
        add a `length` parameter to the function so that it will still work when the
        row is a different length.
      grade5_bee_parameters_new5_markdown_instruction: |-
        *"You're doing great so
        far!"*\r
        \r
        Let's use this function to collect a lot of nectar.
      grade5_bee_parameters_new6_markdown_instruction: |-
        You can make code shorter
        and more efficient when you combine functions with other programming elements.  \r
        <hr/>\r
        <h3>What
        blocks can you use with your function to build a short and sweet solution
        to this puzzle?</h3>
      grade5_bee_parameters_new7_markdown_instruction: |-
        **Challenge:** Something
        looks a little different. Can you modify your function to make honey as well?
      grade5_bee_parameters_new8a_markdown_instruction: |-
        Use your new function to
        solve this spiral.
      grade5_bee_parameters_new9a_markdown_instruction: |-
        Use your new function to
        solve this spiral.
      grade5_pixelation_markdown_instruction: |-
        # Make your own image of any size\r
        \r
        ![](https://images.code.org/01c15fed4f1a2c6c3af531edc35e736e-image-1439596066108.png)\r
        ![](https://images.code.org/24efcaa184d1fc852f37c32911b3b87c-image-1439596070178.png)\r
        ![](https://images.code.org/c9a5d0fd5ba445b7f6b5744e08b50e49-image-1439596071878.png)\r
        ![](https://images.code.org/f14e1b8dd722b0ca5bc54fa96b34f2eb-image-1439596074236.png)\r
        ![](https://images.code.org/fe938c0c16453b9d461b4023098079df-image-1439596075744.png)\r
        ![](https://images.code.org/02c88a7da51289b2f2d1f64bd8c97b28-image-1439596077514.png)\r
        ![](https://images.code.org/309e3157dcfd91956181007f483f8e58-image-1439596079084.png)\r
        \r
        \r
        **Directions:**\r
        \r
        *
        Encode an image of anything you like using `binary`.\r
        * The binary language
        will be represented with `0` and `1` only.\r
        * You might want to do some
        planning and sketching with graph paper first. \r
        * Depict something, perhaps
        your name written out, your initials, an icon or logo of some sort.\r
        * Get
        creative! The image doesn't have to be a perfect square, it can be long and
        skinny.
      grade5_playlab_freeplay_markdown_instruction: |
        It's free play time! Have fun
        with all the blocks in your tool box.  \r
        <br/>\r
        \r
        <h5>\r
        <details>\r
        <summary><b>Need
        some ideas?</b></summary>\r
        \t<br/>\r
        \t<h5>\r
        \t\t<ul>\r
                \t<li><strong>Tag</strong>
        - Have character 2 patrol and use your arrow keys to make character 1 chase
        until they collide. </li>\r
                    <li><strong>Whack-a-Sprite</strong>
        - Have a character constantly pop up at a random location. Award points for
        clicking the sprite before it disappears. </li>\r
                    <li><strong>Best
        Guess</strong> - Make both characters disappear, change location to a random
        spot, then reappear as a random character.  Click on the first one and get
        a point...but if you click on the second one you LOSE a point! </li>\r
                </ul>\r
        \t</h5>\r
        </details>\r
        </h5>\r
      grade5_playlab_parameters_points1_markdown_instruction: |-
        Here's the same game
        but most of the code is hidden. We've added a new function called `score_points.`\r
        <br/>\r
        <hr>\r
        <br/>\r
        <h4>\r
        Add
        a new parameter called `points` to the `player_score` function. \r
        <br/>\r
        The
        `score_points` function should be able to both add and remove points from
        `player_score` depending on which actor is hit.<br>\r
        Changing the score
        by 1 will add a point, while changing the score by -1 will subtract a point.\r
        </h4>\r
        <br/>\r
        <hr>\r
        *Note:  When
        you're done, click "Run" to play.  When Dog scores 6 points, you will move
        on to the next puzzle.*
      grade5_playlab_variables1_markdown_instruction: |-
        This time you don't have
        to write any code, just hit `Run` to play the game! \r
        \r
        <br/>\r
        In this
        game, you're the dog who is trying to collect more flags than the cat. Use
        the down arrow to control the dog. Press `Finish` when you're done playing.
      grade5_playlab_variables10_markdown_instruction: |-
        Edit the the `patrol` function
        to add an `actor` parameter, so that we can call it for each of the actors
        on the screen. Remember, the actors correspond to numbers 1, 2, and 3.
      grade5_playlab_variables11_markdown_instruction: |-
        Add another parameter called
        `speed` to the `patrol` function. Try using a `set speed` block with the new
        `speed` parameter to help Penguin get both flags before the other sprites
        even get one.
      grade5_playlab_variables12_markdown_instruction: |-
        Let's have some fun! Look
        at the code provided to see if you can figure out what each block does.  \r
        \r
        When
        you're done, use the arrow keys to control Dog and collect all of the flags.\r
        \r
        **NOTE:**
        You don't need to make any changes to the program
      grade5_playlab_variables13_markdown_instruction: |-
        Use the `when actor touches`
        block to send Dog back to the top-left ONLY if Dog touches any of the other
        actors.
      grade5_playlab_variables14_markdown_instruction: |
        It's free play time! Have
        fun with all the blocks in your tool box.  \r
        <br/>\r
        \r
        <h5>\r
        <details>\r
        <summary><b>Need
        some ideas?</b></summary>\r
        \t<br/>\r
        \t<h5>\r
        \t\t<ul>\r
                \t<li><strong>Tag</strong>
        - Have character 2 patrol and use your arrow keys to make character 1 chase
        until they collide. </li>\r
                    <li><strong>Whack-a-Sprite</strong>
        - Have a character constantly pop up at a random location. Award points for
        clicking the sprite before it disappears. </li>\r
                    <li><strong>Best
        Guess</strong> - Make both characters disappear, change location to a random
        spot, then reappear as a random character.  Click on the first one and get
        a point...but if you click on the second one you LOSE a point! </li>\r
                </ul>\r
        \t</h5>\r
        </details>\r
        </h5>\r
      grade5_playlab_variables1ask_markdown_instruction: |-
        This time, when you press
        'run', you will see a 'prompt' asking you for a number. This number will
        be stored in a variable used to set the dog's speed.\r
        \r
        \r
        Pay attention
        to how this program is written!
      grade5_playlab_variables2_markdown_instruction: |-
        The race in that last puzzle
        wasn't very fair! Change the `dog_speed` variable to make sure you can collect
        more flags than Cat. The first to collect 10 flags wins!
      grade5_playlab_variables3_markdown_instruction: |-
        Here's a new kind of game!
        \r
        \r
        You don't need to change anything on this level.\r
        \r
        **Directions:**
        Use the left and right arrows to move, and the up arrow to jump. See if you
        can collect all of the flags.
      grade5_playlab_variables4_markdown_instruction: |
        Now we're using a variable
        called `height` to control how high the dog can jump. Update the `height`
        variable so that the dog can jump high enough to reach all the flags. \r
      grade5_playlab_variables6_markdown_instruction: |-
        In our game, how should we
        score points?\r
        \r
        1. Add 1 to your `points` variable each time Dog hits
        Cat with a piece of pie.\r
        2. Use the `when actor 2 touches anything` event
        to trigger an update to your score. You can increment your variable by setting
        `points = points + 1.`\r
        3. Get your score up to 10 to pass the level.\r
        \r
        **Note:**
        Use the right arrow to throw pie!
      grade5_playlab_variables6ask_markdown_instruction: |-
        This time, you need 100
        points to win!  Don't worry though, you can choose how many points you earn
        each time you score a hit!\r
        Try adding the `ask` block and changing the
        number 1 out for the variable `value`.\r
        \r
        **Note:** Use the right arrow
        to throw pie!
      grade5_playlab_variables7_markdown_instruction: |-
        Nice, now let's make sure
        this game isn't too easy to play!\r
        \r
        Any time Dog (actor 1) gets hit
        by a sandwich from Cat (actor 2), you should lose a point.\r
        \r
        Start with
        10 points so it's not too hard. Let your score drop down from 10 to 0 to
        pass the level.
      grade5_playlab_variables71_markdown_instruction: |-
        Here's our game from an
        earlier stage but most of the code is hidden. We've added a new function
        called `score_points.`\r
        <br/>\r
        <hr>\r
        <br/>\r
        <h4>\r
        Edit the function
        so that a new parameter called `points` is added to `player_score`.  \r
        <br/>\r
        The
        variable `player_score` should increase each time Dog tags Cat with pie, and
        decrease each time that Cat tags Dog with a sandwich.\r
        </h4>\r
        <br/>\r
        <hr>\r
        *Note:
        When you're done, click "Run" to play.  When Dog scores 6 points, you will
        move on to the next puzzle.*
      grade5_playlab_variables81_markdown_instruction: |-
        We've added one last function
        for you.\r
        <hr/>\r
        \r
        <h4>\r
        Use an `if` statement to program your game
        to call the `level_up` function only when `player_score` becomes greater than
        a certain number.<br/><br/>\r
        </h4>\r
        <i>For example: `player_score` > 6</i>\r
        \r
        \r
        <hr/>\r
        <i>Play
        the game, and make it to level 3 to move to the next puzzle.</i>
      grade5_playlab_variables9_markdown_instruction: |-
        Here's a function called
        `patrol`. \r
        \r
        Edit `patrol` to move Cat up 400 pixels and then down 400
        pixels.
      grade5_playlab_variables_freeplay_markdown_instruction: |-
        Free Play time! Here
        are all of the variables we've played with so far in this stage, as well
        as a few more in case you want them. \r
        \r
        Notice that there are now so
        many blocks in our toolbox that they need to be organized!  Here, we've put
        each piece into an appropriate category.  Take some time to explore everything
        that is available. When you're done browsing, make a game or story using
        repeats, variables, and events.  \r
        \r
        *Hint: scroll down to see all the
        commands in the workspace.*
      grade5_playlab_variables_jump1_markdown_instruction: |-
        This puzzle uses a hidden
        function that makes the dog jump when the `up` arrow is pressed. The height
        of the jumps can be set at the start of the game using the `jumpPower` variable.
        Try to touch all of the flags!
      grade5_prompt_test_markdown_instruction: |-
        Variables aren't always numbers.
        What if you wanted to store a word or text? Experiment with the new `ask`
        block.
      gradeK_sequence_4_markdown_instruction: |-
        Try this one yourself from the beginning.\r
        \r
        ![](https://images.code.org/43001078c4df6feea1a6edf025192d85-image-1467929743355.gif)
      gradek_artist_loops1_markdown_instruction: |-
        Help the artist draw this line
        two times forward.\r
        \r
        ![](https://images.code.org/7ddc7b43ef27197559c7defb0af56d03-image-1470776934855.gif)
      gradek_artist_loops2_markdown_instruction: |-
        Our artist is trying to draw a
        line five times, but can't get it right. Can you help?\r
        \r
        ![](https://images.code.org/6d79b5f8291bd8e11c427bff25f423c2-image-1467935497388.gif)
      gradek_artist_loops3_markdown_instruction: |-
        Now, use a `repeat` loop to draw
        this line five times!\r
        \r
        ![](https://images.code.org/6d79b5f8291bd8e11c427bff25f423c2-image-1467935497388.gif)
      gradek_artist_loops4_markdown_instruction: |
        <div style="color: #7665a0; font-size:
        1.6em; line-height: 1.4em;" >\r
        Draw a line seven steps long. This will
        become our horizon.<br/><br/>\r
        </div>\r
        \r
        <img src="https://images.code.org/c00b930eb5fb13ae946847adc51c9bd3-image-1467935631246.gif"
        width="300"/>\r
      gradek_artist_loops5_markdown_instruction: |
        <div style="color: #7665a0; font-size:
        1.6em; line-height: 1.4em;" >\r
        Let's put a nice hill in the back.<br/><br/>\r
        </div>\r
        \r
        <img
        src="https://images.code.org/bbbd114642d829029fc3b0566a4437e3-image-1477107329933.gif"
        width="300"/>\r
      gradek_artist_loops6_markdown_instruction: |
        <div style="color: #7665a0; font-size:
        1.6em; line-height: 1.4em;" >\r
        Use the `repeat` loop to add waves to the
        water.<br/>\r
        </div>\r
        \r
        <img src="https://images.code.org/06a1120e0b2da4dbcf960a22c3abc248-image-1470787144854.gif"
        width="300"/>\r
      gradek_artist_loops7_markdown_instruction: |-
        <div style="color: #7665a0; font-size:
        1.6em; line-height: 1.4em;" >\r
        We need a ladder up to the boat.<br/>\r
        </div>\r
        \r
        <img
        src="https://images.code.org/6e4dc767e55d11400f35c6680bbfe1e3-image-1470788284437.gif"
        width="300"/>
      gradek_artist_loops8_markdown_instruction: |
        <div style="color: #7665a0; font-size:
        1.6em; line-height: 1.4em;" >\r
        **Challenge:** The stairs down to the dock
        are broken.  Help me fix them.<br/>\r
        </div>\r
        \r
        <img src="https://images.code.org/53c68133f897895caa0369b4afa3ec3b-image-1470789463684.gif"
        width="300"/>\r
      gradek_artist_loops9_markdown_instruction: |
        <div style="color: #7665a0; font-size:
        1.6em; line-height: 1.4em;" >\r
        Time to head back to land. Help me put down
        stones so I don't fall in!<br/><br/>\r
        </div>\r
        \r
        <img src="https://images.code.org/5ba9e8e5c1524eec2b0ba3e4684b0cef-image-1467936361364.gif"
        width="300"/>\r
      gradek_artist_loopsA_markdown_instruction: |
        <div style="color: #7665a0; font-size:
        1.6em; line-height: 1.4em;" >\r
        Help me build steps to watch the ship sail
        away.<br/>\r
        </div>\r
        \r
        <img src="https://images.code.org/0dfa647dbc835fae09989a0fbfd798c7-image-1470871168220.gif"
        width="300"/>\r
      gradek_artist_loopsFP_markdown_instruction: |
        The artist saw something funny
        in the distance.  Draw what you think he saw.\r
        \r
        <hr/>\r
        <h3>Ideas</h3>\r
        <table>\r
        <tr>\r
        <td>\r
        <img
        src="https://images.code.org/8f4f2a68dae2cf0aa82cc0a49ea4df04-image-1466787750475.gif"
        width="150"/><br/>\r
        <h4>A Singing Snail</h4><br/><br/>\r
        </td>\r
        \r
        <td>\r
        <img
        src="https://images.code.org/732ce5dd91c7f49f06e88da1a9f664f3-image-1466794904255.gif"
        width="150"/><br/>\r
        <h4>A Big City</h4><br/><br/>\r
        </td>\r
        \r
        <td>\r
        <img
        src="https://images.code.org/37fdd6fdd761df09fd4949d5e43f0a7f-image-1466795165642.gif"
        width="150"/><br/>\r
        <h4>A Concert</h4><br/><br/>\r
        </td>\r
        \r
        <td>\r
        <img
        src="https://images.code.org/f7bf86b0f86669d82ee2c1565738b9cb-image-1466794447737.gif"
        width="150"/><br/>\r
        <h4>A Birthday Cake</h4><br/><br/>\r
        </td>\r
        \r
        </tr>\r
        </table>\r
      gradek_playlab_events1c_markdown_instruction: |-
        Jorge the Dog wants to say "Hi
        there."  Can you help him?
      gradek_playlab_events2c_markdown_instruction: |-
        Help Jorge the Dog get moving
        by connecting the ![](https://images.code.org/b3d6215901969328333d6393f8101c5b-image-1478142333199.png)
        block to the ![](https://images.code.org/4f2130b2a3053695414a02c3d39ef864-image-1478143461271.png)
        event block that is already in the workspace.
      gradek_playlab_events3c_markdown_instruction: |-
        Now, get Jorge to move right
        when the ![](https://images.code.org/b99365eb23280f158e6ef570fe1c8a76-image-1478145132820.png)
        button is clicked.
      gradek_playlab_events4c_markdown_instruction: |-
        Add events to have Jorge move
        up and down when the ![](https://images.code.org/379493b95d158b273f1424538b1c635a-image-1478145402316.png)
        and ![](https://images.code.org/f490d78efd81c21ab74286aefe7af097-image-1478145385132.png)
        buttons are pressed.
      harvester_Kahoot_markdown_instruction: |-
        *"Oooh, veggies are cropping up everywhere!"*\r
        \r
        Now
        help the farmer pick all of the corn on the way to the pumpkin at the end.\r
        ___\r
        #####
        Note: Every square on the path that leads to the pumpkin will either have
        *one* corn or nothing.  You will need to use an `if` statement to check whether
        there is corn before you try to pick it!
      harvey_pixelation_markdown_instruction: |-
        # Make your own image of any size\r
        \r
        ![](https://images.code.org/01c15fed4f1a2c6c3af531edc35e736e-image-1439596066108.png)\r
        ![](https://images.code.org/24efcaa184d1fc852f37c32911b3b87c-image-1439596070178.png)\r
        ![](https://images.code.org/c9a5d0fd5ba445b7f6b5744e08b50e49-image-1439596071878.png)\r
        ![](https://images.code.org/f14e1b8dd722b0ca5bc54fa96b34f2eb-image-1439596074236.png)\r
        ![](https://images.code.org/fe938c0c16453b9d461b4023098079df-image-1439596075744.png)\r
        ![](https://images.code.org/02c88a7da51289b2f2d1f64bd8c97b28-image-1439596077514.png)\r
        ![](https://images.code.org/309e3157dcfd91956181007f483f8e58-image-1439596079084.png)\r
        \r
        \r
        **Directions:**\r
        \r
        *
        Encode an image of anything you like using `binary`.\r
        * The binary language
        will be represented with `0` and `1` only.\r
        * You might want to do some
        planning and sketching with graph paper first. \r
        * Depict something, perhaps
        your name written out, your initials, an icon or logo of some sort.\r
        * Get
        creative! The image doesn't have to be a perfect square, it can be long and
        skinny.
      harvey_snowflake_artist1_markdown_instruction: |-
        *It's time to get your snowflake
        ready for 3d printing!*\r
        \r
        ![](https://images.code.org/ba50acd509bd25e07e7d4622a86ba158-image-1503785370113.08.08
        PM.png)In order for your image to print correctly, follow these rules:\r
        \r
        *
        Make sure your image is all **one piece**! Separate pieces will print separately.\r
        *
        Make sure your image **fits** entirely on the canvas\r
        * Use just **black
        lines** on a white background.\r
        * Jump the artist off the top left corner
        (-10 over, -10 down) at the end of your program:\r
        <xml>    <block type="jump_to_xy"><title
        name="XPOS">-10</title><title name="YPOS">-10</title>\r
            </block>\r
            <block
        type="jump_to"><title name="VALUE">7</title>\r
            </block></xml>\r
            When
        you are finished, right-click to save the image, then send it to me on <a
        href="https://classroom.google.com">Google Classroom</a>.
      harvey_snowflake_artist2_markdown_instruction: |-
        *It's time to get your snowflake
        ready for 3d printing!*\r
        \r
        ![](https://images.code.org/ba50acd509bd25e07e7d4622a86ba158-image-1503785370113.08.08
        PM.png)In order for your image to print correctly, follow these rules:\r
        \r
        *
        Make sure your image is all **one piece**! Separate pieces will print separately.\r
        *
        Make sure your image **fits** entirely on the canvas\r
        * Use just **black
        lines** on a white background.\r
        * Jump the artist off the top left corner
        (-10 over, -10 down) at the end of your program:\r
        <xml>    <block type="jump_to_xy"><title
        name="XPOS">-10</title><title name="YPOS">-10</title>\r
            </block>\r
            <block
        type="jump_to"><title name="VALUE">7</title>\r
            </block></xml>\r
        When
        you are finished, right-click to save the image, then send it to me on <a
        href="https://classroom.google.com">Google Classroom</a>.
      iceAgeLoopsforVideo_markdown_instruction: |-
        Can you get to the acorn with just
        one <xml><block type="maze_moveForward"/></xml> block? Try using a loop!
      iceage_click_hello_markdown_instruction: |-
        Can you help Sid call for his friends
        when you click on him? \r
        Once you're done, press "Run" to play.  Click
        on Sid to see your code work!
      iceage_click_hello_2018_markdown_instruction: |-
        Can you help Sid call for his
        friends when you click on him? \r
        Once you're done, press "Run" to play.  Click
        on Sid to see your code work!
      iceage_free_play_markdown_instruction: |-
        Time to create your own game or story!  \r
        \r
        When
        you're done, click "Finish" to let friends try your game on their phones,
        tablets, or computers!\r
        Don't know what to make? Click the hints for details.
      iceage_free_play_2018_markdown_instruction: |-
        Time to create your own game or
        story!  \r
        \r
        When you're done, click "Finish" to let friends try your
        game on their phones, tablets, or computers!\r
        Don't know what to make?
        Click the hints for details.
      iceage_free_playcourseF_IceAge_11_markdown_instruction: |-
        Time to create your
        own game or story!  \r
        \r
        When you're done, click "Finish" to let friends
        try your game on their phones, tablets, or computers!\r
        Don't know what
        to make? Click the hints for details.
      iceage_hello1_markdown_instruction: |-
        Sid (actor 1) wants to gather everyone
        for a new adventure. Can you help him say "Hello!" by dragging the `say`
        block out and connecting it to the bottom of the `when run` event?   \r
        \r
        Don't
        forget to type "Hello!" inside!
      iceage_hello1_2018_markdown_instruction: |-
        Sid (actor 1) wants to gather everyone
        for a new adventure. Can you help him say "Hello!" by dragging the `say`
        block out and connecting it to the bottom of the `when run` event?   \r
        \r
        Don't
        forget to type "Hello!" inside!
      iceage_hello2_markdown_instruction: |-
        Manny (actor 2) found Sid (actor 1) and
        wants to invite him on an adventure. Help them greet each other by using the
        the `actor ___ say` block twice.
      iceage_hello2_2018_markdown_instruction: |-
        Manny (actor 2) found Sid (actor
        1) and wants to invite him on an adventure. Help them greet each other by
        using the the `actor ___ say` block twice.
      iceage_move_events_markdown_instruction: |-
        Scrat is still looking for acorns!
        \r
        Help him scamper around by attaching a `move actor 1` block to each of
        the events and changing the direction to work for each arrow key. \r
        When
        you’re done, click "Run" and try to collect all of the acorns.
      iceage_move_events_2018_markdown_instruction: |-
        Scrat is still looking for acorns!
        \r
        Help him scamper around by attaching a `move actor 1` block to each of
        the events and changing the direction to work for each arrow key. \r
        When
        you’re done, click "Run" and try to collect all of the acorns.
      iceage_move_to_actor_markdown_instruction: |-
        Diego (actor 1) is searching for
        Manny (actor 2). Can you help bring the two together? Connect a block to the
        `when actor touches` event to play a sound when they find each other.
      iceage_move_to_actor_2018_markdown_instruction: |-
        Diego (actor 1) is searching
        for Manny (actor 2). Can you help bring the two together? Connect a block
        to the `when actor touches` event to play a sound when they find each other.
      iceage_move_to_flag_markdown_instruction: |-
        Scrat is looking for his acorn!
        Can you help him move the last 200 pixels?
      iceage_move_to_flag_2018_markdown_instruction: |-
        Scrat is looking for his acorn!
        Can you help him move the last 200 pixels?
      iceage_repeat_markdown_instruction: |-
        The `repeat forever` block allows you
        to run code continuously. Can you put blocks inside of it to help Granny get
        some exercise by moving left and right repeatedly?
      iceage_repeat_2018_markdown_instruction: |-
        The `repeat forever` block allows
        you to run code continuously. Can you put blocks inside of it to help Granny
        get some exercise by moving left and right repeatedly?
      iceage_sound_and_points_markdown_instruction: |-
        Here is your code from the last
        puzzle, as well as the code to move Granny left and right. \r
        Can you finish
        the program to make it so that you both **play a sound** and **score a point**
        when Sid and Granny collide? \r
        Press "Run" to play the game.
      iceage_sound_and_points_2018_markdown_instruction: |-
        Here is your code from
        the last puzzle, as well as the code to move Granny left and right. \r
        Can
        you finish the program to make it so that you both **play a sound** and **score
        a point** when Sid and Granny collide? \r
        Press "Run" to play the game.
      iceage_throw_hearts_markdown_instruction: |-
        Sid wants to let his grandmother,
        Granny, know that he loves her.   \r
        \r
        Use the `actor __ throw` command
        to have Sid (actor 1) throw hearts at Granny (actor 2)! \r
        Set Granny's
        mood to happy when she gets hit with the hearts.
      iceage_throw_hearts_2018_markdown_instruction: |-
        Sid wants to let his grandmother,
        Granny, know that he loves her.   \r
        \r
        Use the `actor __ throw` command
        to have Sid (actor 1) throw hearts at Granny (actor 2)! \r
        Set Granny's
        mood to happy when she gets hit with the hearts.
      iceage_warn_ice_age_markdown_instruction: |-
        Everyone needs to move faster because
        an ice storm is coming! \r
        Change the scene to an icy background and set
        Sid’s (actor 1) speed to fast.\r
        Press "Run" and move Sid to Diego to warn
        him.
      iceage_warn_ice_age_2018_markdown_instruction: |-
        Everyone needs to move faster
        because an ice storm is coming! \r
        Change the scene to an icy background
        and set Sid’s (actor 1) speed to fast.\r
        Press "Run" and move Sid to Diego
        to warn him.
      jessie-test_markdown_instruction: |-
        # Cool\r
        \r
        ## Markdown\r
        \r
        ### Instructions\r
        \r
        ####
        here\r
        \r
        ##### now\r
        \r
        ###### forever
      kikiTesta_markdown_instruction: |-
        Our adventurer wants to collect coins.  But
        she can only use 4 blocks to get them.  \r
        \r
        Can you help her grab as many
        as she can using just 4 blocks?
      level 'grade3_Loops_10_markdown_instruction: |-
        Such a busy bee!\r
        \r
        Help
        Bee collect all of the nectar and make all of the honey with the fewest blocks
        possible.
      level 'grade3_Loops_11_markdown_instruction: |-
        The shape of this path is different
        from the others. \r
        \r
        Can you collect all of the nectar using as few blocks
        as possible?
      level 'grade3_Loops_3_markdown_instruction: |-
        Use a `repeat` loop to collect
        all of the nectar.
      level 'grade3_Loops_4_markdown_instruction: |-
        Now use the `repeat` block to
        collect all of the nectar and make all of the honey.
      level 'grade3_Loops_5_markdown_instruction: |-
        What a beautiful field of flowers!   \r
        \r
        Help
        the bee visit each one.\r
        \r
        Can you find a way to do it with fewer than
        7 blocks?
      level 'grade3_Loops_6_markdown_instruction: |-
        How many times can loops help
        you in this puzzle?  \r
        \r
        Loops are your friend! Use a few of them to complete
        this puzzle with the fewest blocks possible.
      level 'grade3_Loops_7_markdown_instruction: |-
        Those flowers look tasty!\r
        \r
        Collect
        nectar from each of the flowers using the fewest blocks possible.
      loop pet test 2_markdown_instruction: |-
        **CHALLENGE!** When Daisy gets a carrot,
        she gets excited. Can you make Daisy start doing a dance party? She should
        never stop, even after you take the carrot away.\r
        \r
        You will have to use
        all these blocks:\r
        ![](https://images.code.org/83c295bd00536dffed3c93a40bba75ae-image-1523562330282.41.06
        PM.png)
      loop pet test 3_markdown_instruction: |
        **Make Predictions!** Write down your
        answers to these questions before clicking "Run". Then try the code and
        see what happens!\r
        \r
        * What will Daisy the dog do after you drag the carrot
        to her?\r
        * What will Daisy the dog do after you press the Up arrow key?\r
      loop pet test 4_markdown_instruction: |-
        **It's time to make your own virtual
        pet!** You can change whatever code you want to to make your own pet. Here
        are some ideas:\r
        \r
        * Can you make your pet start something new when you
        click on it?\r
        * Can you make your pet run away when you drag the vacuum
        to it?\r
        * Can you add other animal friends to your pet's area?
      love_spring_1_markdown_instruction: |-
        Let's celebrate Spring!  \r
        \r
        We have
        put some seeds in the ground to prepare for the season's flowers.  Can you
        cover them up so that the birds don't eat them?
      love_spring_2_markdown_instruction: |-
        Our flowers are in full bloom!  \r
        \r
        Now
        we need the bee to grab nectar from each one so he can make plenty of honey
        back at his hive!
      love_spring_3_markdown_instruction: |-
        <b>The sun is shining, the birds are chirping,
        and now it's time to play!</b>  <br/><br/>\r
        \r
        Robin has chosen a number
        between 10 and 30.  \r
        Use the up and down arrows to make a guess about what
        it is.  \r
        Click Robin to submit your guess.\r
        \r
        - Robin will move up
        when your guess is too high\r
        - Robin will move down when your guess is too
        low\r
        - Where do you change how far Robin moves each time?\r
        - Where would
        you change the range of numbers to choose from?\r
        - Can you change the code
        so that Robin chooses a number between 1 & 20?\r
        \r
        <br/>\r
        <b>When you're
        ready, press "Run" and play until you guess Robin's number!</b>
      maker workshop final_markdown_instruction: |-
        # Challenge: Explore!\r
        \r
        Now
        that you've tested the waters a bit, go explore the full extent of this tool.
        On this level you'll see lots of new blocks and even some completely new
        areas of functionality (like a database backend!). Feel free to go back to
        previous levels for inspiration, or go off and building something completely
        your own.
      mike3bit_markdown_instruction: |
        # 3-Bit Color\r
        **Directions:**\r
        \r
        * We
        start you with the 4x2 image Maddie was creating, but we've left out the
        last few pixels. \r
        * Finish off the image by figuring out which colors are
        missing and encoding them.\r
      mike3bitbird_markdown_instruction: |
        # 3-Bit Color\r
        Here's an example of
        an image made with 3-bit color. Try changing it to understand how it works.
        \r
        \r
        *If you want to reset the image, press "Start Over".*\r
      mike3bitfreeplay_markdown_instruction: |-
        # 3-Bit Color\r
        \r
        You have one last
        chance to experiment and get creative with the pixelation widget. Make something
        awesome and share it with your classmates!\r
        \r
        * *Hint:* You can copy and
        paste the value of a pixel to use it repeatedly.
      mike3bitmario_markdown_instruction: |-
        # 3-Bit Color\r
         \r
        **Challenge:** \r
        \r
        A
        careless binary coder typed in ONE extra 0 or 1 somewhere within this image's
        data. The extra bit that is causing Mario to glitch out! \r
        \r
        Delete the
        extra bit to restore Mario back to normal!\r
        \r
        ![](https://images.code.org/8b7c17ba204a1a4d33e1bd6de7f01d76-image-1477306657312.54.57
        AM.png)
      multi-lesson Teaching and Student Support Plan_markdown_instruction: |-
        <br><br>\r
        >
        **NOTE: before you start this task, make sure you’ve reviewed the lesson resources
        in this module, and have a good sense of how the lesson works. If you haven’t
        already reviewed the materials, do that now and come back to this task later.**\r
        \r
        #
        Teaching and Student Support Plan\r
        \r
        ## Task Description\r
        \r
        Now that
        you have a better sense of this lessons in this sequence, let’s think about
        the types of supports students will need in order to be successful. Since
        the curriculum is based on inquiry learning, lessons feature activities that
        engage students in discovering core concepts themselves. It’s important to
        think through implementation plans and student support. In this task you will
        make a plan for teaching and student support **for one of the lessons in this
        sequence** that takes into account differentiation strategies and make-up
        work for absent students. Your teaching and student support plan should cover
        the following: \r
        \r
        \r
        - **Which lesson in the sequence are you discussing?**
        \r
        \r
        - **Details on how you will implement and differentiate the lesson:**\r
        \r

        - An outline of any changes you will need to make to the lesson to fit your
        local constraints or context (for example: pacing and time, dealing with classroom
        setup, etc). \r
         - An overview of the types of student needs you’ll likely
        need to support in your classroom (for example: students who are struggling
        to understand the underlying concept; students who are already familiar with
        the concept, but still have room to learn more; etc)\r
         - Your plan for addressing
        each of the needs outlined above (for example: integrating extension activities
        or other materials for students who already know something about the topic)\r

        - How will you address or emphasize the connection between lessons in this
        sequence? \r
        \r
        <br>\r
        - **Plan for catching up absent students:**\r
        \r

        - How will absent students catch up on activities they missed? \r
         - How
        will you use the fact that the lessons in this sequence are related and build
        on one another to address make-up work? \r
        \r
        You can type out your teaching
        and student support plan in the box below, or you can upload a word doc or
        pdf file. \r
        \r
        ## Getting Credit for Completing this Task\r
        \r
        #### Task
        Review Details\r
        \r
        If this module is listed as  your “focus area”, then
        your response to the prompt above will be shared anonymously and reviewed
        by your peers, and you will review the work done by other teachers. Reviewers
        will be looking for thoughtful and thorough answers that demonstrate that
        you have spent time considering how the lesson will play out in your own classroom.
        Reviewers will have an opportunity to give feedback on your submission, and
        you can respond to that feedback and resubmit. \r
        \r
        In order to get credit
        for completing this task, two reviewers need to agree that you have responded
        to the prompts fully. If reviewers don’t feel comfortable making a decision
        about your task submission, they can elevate to a facilitator to review. You
        will always have a chance to address feedback from your reviewers and resubmit
        your task! Reviewer feedback will show up at the bottom of this page, once
        it’s available. \r
        \r
        <br><br>
      name 'CSD U3 Keypress Boolean Predict'_markdown_instruction: |-
        # Make a Prediction:
        keyDown()\r
        The `keyDown()` block is the first of a new set of blocks that
        will let us get input from the user. This is the first step on our road to
        actually making games! See if you can figure out how the `keyDown()` block
        works.\r
        \r
        What do you think will happen when you run the program and press
        the "up" arrow? Write your prediction below and then run the program to
        see if your prediction was accurate.
      playEventsK1_markdown_instruction: |-
        This game is called "Play Lab".\r
        \r
        See
        if you can figure out what each block does.
      playEventsK2_markdown_instruction: |-
        Jorge wants to say "Hi there."\r
        \r
        Can
        you help?\r
        \r
        ![](https://images.code.org/f32d285fa6f45e1f8d042c04c55f32c8-image-1467988839292.gif)
      playEventsK3_markdown_instruction: |-
        Jorge wants to be scratched behind the
        ears!\r
        \r
        Can you make it so that when you click Jorge he is happy?\r
        \r
        ![](https://images.code.org/04fb37990455b215e0f20884363092d0-image-1467988943134.gif)
      playEventsK4_markdown_instruction: |-
        Can you make it so that Jorge the dog chases
        Robin the bird when you click the up arrow?\r
        \r
        ![](https://images.code.org/2fbf6c793bb77a961fa7a52f27e4c59d-image-1467989013878.gif)
      playEventsK5_markdown_instruction: |-
        Now add code so that Robin flies away when
        you click the forward arrow.\r
        \r
        ![](https://images.code.org/a7e224c5f13e39e5342011f8a76d3b6b-image-1467989101328.gif)
      playEventsK6_markdown_instruction: |-
        Have Robin talk back to Jorge when you
        click on her.\r
        \r
        ![](https://images.code.org/fc80b1febbb7a472026b6bf2c535b2f4-image-1467989171517.gif)
      playEventsK7_markdown_instruction: |-
        What else can you do in this fun scene?\r
        <br/>\r
        \r
        <h5>\r
        <details>\r
        <summary><b>Need
        some ideas?</b></summary>\r
        \t<br/>\r
        \t<h5>\r
        \t\t<ul>\r
                \t<li><strong>Conversation</strong>
        - Have the sprites talk to eachother when you click on them.</li>\r
                    <li><strong>Pinball</strong>
        - Make one sprite play a noise when the other runs into it.</li>\r
                    <li><strong>Arrows</strong>
        - Write a program so when each arrow key is pressed, the sprite moves in that
        direction!</li>\r
                </ul>\r
        \t</h5>\r
        </details>\r
        </h5>
      post-assessment survey q32_markdown_instruction: |-
        (Optional): Please explain
        why you would/would not recommend this computer science course to another
        student.
      post-assessment survey q37_markdown_instruction: |-
        (Optional) If you did not
        take the AP exam, what, if anything, would have made the difference for you
        to take it?
      pre-assessment survey q24A_markdown_instruction: "What computer science skills\ndo
        you use in your everyday life? "
      pre-assessment survey q25A_markdown_instruction: "If yes, what computer science\ncourse(s)
        had you taken before your current computer science  class? "
      ramp_artist_loops1_markdown_instruction: |-
        What a lovely day!  \r
        \r
        Help
        the Artist cover his flowers before the winter by moving forward by 60 pixels.
      ramp_artist_loops1_2018_markdown_instruction: |-
        What a lovely day!  \r
        \r
        Help
        the Artist cover his flowers before the winter by moving forward by 60 pixels.
      ramp_artist_loops2_markdown_instruction: |-
        Add some beauty by repeating that
        step five times, changing to a random color between each move.
      ramp_artist_loops2_2018_markdown_instruction: |-
        Add some beauty by repeating
        that step five times, changing to a random color between each move.
      ramp_artist_loops3_markdown_instruction: |-
        Draw the colorful line 5 times again,
        this time using a `repeat` loop.
      ramp_artist_loops3_2018_markdown_instruction: |-
        Draw the colorful line 5 times
        again, this time using a `repeat` loop.
      ramp_artist_loops4_markdown_instruction: |-
        What happens when you add a 72 degree
        right turn after everything else inside your loop?
      ramp_artist_loops4_2018_markdown_instruction: |-
        What happens when you add a
        72 degree right turn after everything else inside your loop?
      ramp_artist_loops5_markdown_instruction: |-
        Loops sure make writing code easier!\r
        \r
        Use
        loops to draw this staircase.\r
        - Each stairstep is 50 pixels long and 50
        pixels tall\r
        - You will need to turn 90 degrees in each direction
      ramp_artist_loops5_2018_markdown_instruction: |-
        Loops sure make writing code
        easier!\r
        \r
        Use loops to draw this staircase.\r
        - Each stairstep is 50
        pixels long and 50 pixels tall\r
        - You will need to turn 90 degrees in each
        direction
      ramp_artist_loops6_markdown_instruction: |-
        This staircase is much bigger, but
        it takes the same amount of code as the last puzzle!\r
        \r
        Fix this loop
        to complete the puzzle.
      ramp_artist_loops6_2018_markdown_instruction: |-
        This staircase is much bigger,
        but it takes the same amount of code as the last puzzle!\r
        \r
        Fix this loop
        to complete the puzzle.
      ramp_artist_loops7_markdown_instruction: |-
        Look for a pattern and make this
        code shorter using loops!
      ramp_artist_loops7_2018_markdown_instruction: |-
        Look for a pattern and make
        this code shorter using loops!
      ramp_artist_loops8_markdown_instruction: |-
        **Challenge:** Look for a pattern
        and make this code shorter using loops.
      ramp_artist_loops8_2018_markdown_instruction: |-
        **Challenge:** Look for a pattern
        and make this code shorter using loops.
      ramp_artist_loops8_clone_markdown_instruction: |-
        **Challenge:** Look for a pattern
        and make this code shorter using loops.
      ramp_artist_loops9_markdown_instruction: |-
        Solve this puzzle by drawing a square
        with 200 pixel sides.
      ramp_artist_loops9_2018_markdown_instruction: |-
        Solve this puzzle by drawing
        a square with 200 pixel sides.
      sample1_markdown_instruction: |-
        Our adventurer wants to collect coins.  But
        she can only use 4 blocks to get them.  \r
        \r
        Can you help her grab as many
        as she can using just 4 blocks?
      sample10a_markdown_instruction: |-
        <h4>You have helped the adventurer and her
        bee!  \r
        As a reward, please stay and play around in my magical village.  \r
        <br/>\r
        \r
        You
        should have everything you need to create a game of your own.</h4>
      sample4_markdown_instruction: |-
        Our adventurer has found a stash of coins in
        this cave.\r
        \r
        Can you help her grab as many as she can using just 7 blocks?
      sample6_markdown_instruction: |-
        **Challenge:** Help bee get all of the nectar.\r
        \r
        This
        puzzle is meant to be hard.  You may need to try lots of times.
      sample8_markdown_instruction: |-
        Look at this trove of coins! \r
        \r
        How many
        can you get the adventurer to grab?
      subgoal U3 L4 introducing subgoal labels_markdown_instruction: |-
        <img src="https://images.code.org/0aca9e3ba0945f31ddd56438a45ed69c-image-1436286498758.png"
        align=right>\r
        \r
        Given only 4 turtle commands, write code in App Lab to
        complete the drawings in each of the challenges below.  Your goal is to write
        code that solves the problem as efficiently as possible using only the commands
        provided.\r
        \r
        What does “efficient” mean?  In computer science it can actually
        mean several different things depending on what you’re talking about.  Work
        on these challenges, try to solve them in a way that you think is best and
        we’ll ask about efficiency at the end.\r
        \r
        <img src="https://images.code.org/d26ed114448c5ffe75a75ed761fab5f0-image-1447888033281.gif"
        align=right>\r
        # Do This: \r
        Draw a 1 x 1 square to the front and left of
        the turtle as efficiently as possible. The program should stop with turtle
        in its original position, facing its original direction.\r
        \r
        Once you think
        you have a solution, click the Finish button - it will appear once you run
        the program.
      subgoal U3L2 Using Simple Commands_markdown_instruction: |-
        <img src="https://images.code.org/0aca9e3ba0945f31ddd56438a45ed69c-image-1436286498758.png"
        align=right>\r
        \r
        Given only 4 turtle commands, write code in App Lab to
        complete the drawings in each of the challenges below.  Your goal is to write
        code that solves the problem as efficiently as possible using only the commands
        provided.\r
        \r
        What does “efficient” mean?  In computer science it can actually
        mean several different things depending on what you’re talking about.  Work
        on these challenges, try to solve them in a way that you think is best and
        we’ll ask about efficiency at the end.\r
        \r
        <img src="https://images.code.org/d26ed114448c5ffe75a75ed761fab5f0-image-1447888033281.gif"
        align=right>\r
        # Do This: \r
        Draw a 1 x 1 square to the front and left of
        the turtle as efficiently as possible. The program should stop with turtle
        in its original position, facing its original direction.\r
        \r
        Once you think
        you have a solution, click the Finish button - it will appear once you run
        the program.
      subgoal-test-clone_markdown_instruction: |-
        ### use goal labels to structure
        your solution.\r
        \r
        The turtle should draw a square moving clockwise.\r
        \r
        Drag
        out "move turtle" subgoal label into the workspace.
      subgoal-test_markdown_instruction: |-
        ### use goal labels to structure your solution.\r
        \r
        The
        turtle should draw a square moving clockwise.\r
        \r
        Drag out ["move turtle"
        subgoal label](#triggercallout=trigger_move_subgoal) into the workspace.
      subgoalU3L2_TurtleSquare_right_markdown_instruction: |
        <img src="https://images.code.org/ad48e7224312a6c41f4fc5727af53cc0-image-1436287265071.png"
        align=right> \r
        # Do This:\r
        This time, draw a 1 x 1 square to the *front
        and right* of the turtle as efficiently as possible.  Notice that there is
        no command to turn right! You need to figure out how to draw this by only
        turning left and moving forward.  The program should stop with turtle in its
        original position, facing its original direction.\r
        \r
        When you're done
        click the Finish button to move onto the next problem.\r
      subgoals_U3_turtle_prediction_FR_markdown_instruction: |-
        ## Code Trace\r
        \r
        In
        1-2 sentences, explain what you think the following code does.\r
        \r
        ![](https://images.code.org/5bc66acc4712cf1c835daac0c45422a8-image-1506532056958.png)
      subgoals_u3_top_down_FR_markdown_instruction: |-
        # Design a program\r
        \r
        Describe,
        using a top-down approach, how you would create a program to draw a white
        snowflake on a blue background that uses random numbers, so the snowflake
        will be unique every time you run the code. \r
        \r
        You don’t need to write
        the exact code or blocks that you would use, but you should describe what
        functions you would need to create, where you would or would not use loops,
        and where you would or would not use random numbers.
      test externallink_markdown_instruction: |-
        # Creative Commons\r
        \r
        Head to
        the Creative Commons website to learn more about CC licensing models.
      test peer review_markdown_instruction: |
        At this point you've seen 7 of the
        14 lessons from unit 1. Thinking about those lessons, and looking across the
        other lessons in <a href="curriculum.code.org/csp/unit1/" target=_blank>unit
        1</a> work with your partner to develop a set of recommendations for using
        group work and peer learning in Unit 1. Your recommendations should include:\r
        \r
        -
        Which lessons or activities provide opportunities for group work and peer
        learning? \r
        - What recommendations do you have for using group work and
        peer learning in Unit 1 lessons?  \r
        \r
        Use the space below to record any
        recommendations or commentary you have for others. Once you  submit, another
        participant will review chance to send you feedback! \r
        \r
      test_anonymous_student_survey_next_class_markdown_instruction: |-
        What you will
        do next after this class?
      test_anonymous_student_survey_why_class_markdown_instruction: |-
        Why are you
        doing this class?  Give at least two reasons.
      test_sarah_markdown_instruction: hi
      test_sarah_freeresponse_markdown_instruction: This is the question at hand....
      testing code callout_markdown_instruction: |
        # Click the link!\r
        [Show me where
        the sprite moves](#triggercallout=code_triggered)\r
      the Journal of Peer Learning_markdown_instruction: |-
        The following link is to
        a journal out of Australia that focuses on publishing scholarly research that
        investigates innovations in peer learning and the implementation and evaluations
        of peer learning programs:
      u3-old-drawing-view_markdown_instruction: |
        # Your Own Drawing\r
        \r
        It is
        your turn to create your own drawing. You should have drawn out your plan
        on paper first.\r
        \r
        # Do This\r
        As a reminder make sure you hit the objectives:\r
        \r
        *
        Creates an identifiable and named object or design (i.e. no random splatters
        of shapes)\r
        * Uses at least 10 shapes or text items (rect, ellipse, regularPolygon,
        text)\r
        * Uses at least 4 different color fills\r
        * Uses at least 2 different
        color outlines\r
        * Contains at least 3 different logical blocks of code with
        comments\r
      valentine_artist_03_markdown_instruction: |-
        Now make a valentine to share with
        someone special!  It can be anything that you want.
