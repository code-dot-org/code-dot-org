"sv":
  data:
    instructions:
      2-3 Artist 1 new_instruction: Hej, jag är en konstnär. Du kan skriva kod för
        att få mig att rita nästan vad som helst. Använd några block för att få mig
        rita över de grå linjerna i bilden. (Varje rad är 100 pixlar lång)
      2-3 Artist 11_instruction: 'Ge stoppskylten en kant genom att skapa en oktagon
        med åtta sidor, varje sida ska vara 100 pixlar lång. Hur många grader ska
        du svänga? (Tips: Vad är 360 delat med 8?) '
      2-3 Artist 12_instruction: Placera Upprepa-blocket så att det skapar en cirkel
        som avslutar ögongloben. Om varje rörelse är en vridning åt höger med en grad,
        hur många vridningar behöver du för att göra cirkeln komplett? 180? 360? 500?
      2-3 Artist 2 new_instruction: 'Detta hus har en halvfärdig vägg. Varje sida
        är 100, men den halvfärdiga väggen är bara 50. Komplettera väggen. '
      2-3 Artist 2_instruction: "This house has a half-finished wall. Each side is\n100,
        but the half-finished wall is only 50. Complete the wall. \n"
      2-3 Artist 3.4_instruction: Hoppa-blocket flyttar konstnären utan att rita.
        Rita den streckade linjen med hjälp av både hoppa- och ritablock.
      2-3 Artist 3_instruction: Denna hatt är 100 pixlar hög. Rita en hatt som är
        70 pixlar mindre.
      2-3 Artist 3new_instruction: Den röda hatten är 100 pixlar hög. Avsluta med
        att rita en svart hatt som är 70 pixlar lägre. Bredden på den svarta hatten
        är är 50 pixlar.
      2-3 Artist 4_instruction: Hjälp mig att göra färdigt huset till katten.
      2-3 Artist 5_instruction: Ersätt denna kod med ett "Upprepa gånger"-block för
        att rita samma hus med bara 3 block.
      2-3 Artist 6_instruction: 'Huset behöver ett tak! Rita en triangel. Tips: alla
        tre sidor är lika långa.'
      2-3 Artist 7_instruction: 'Rita färdigt den högra halvan av det sista fönstret.
        Varje kvadrat i fönstret är 25 pixlar bred. '
      2-3 Artist 8_instruction: Gör färdigt rummen för varje djur genom att dela rektangeln
        i 2 lika stora kvadrater. Rektangeln är 200 pixlar bred och 100 pixlar hög.
      2-3 Artist 9_instruction: Gör färdigt draken
      2-3 Artist Assessment 1_instruction: 'Uppgift: Rita färdigt den sista tanden,
        25 pixlar bred och 25 pixlar hög.'
      2-3 Artist Debugging 1_instruction: Kan du rita denna hatt med en bredd högst
        upp på 100?
      2-3 Artist Debugging 10_instruction: 'Styrkorset på min spelkontroll är för
        smalt. Tips: Gör den 10 pixlar bredare'
      2-3 Artist Debugging 11_instruction: Hjälp mig att göra färdigt min vackra snöflinga.
        Hur många gånger måste jag "Upprepa" för att avsluta den?
      2-3 Artist Debugging 12_instruction: Jag ska lägga till en havsvåg i denna scen.  Kan
        du hjälpa mig?
      2-3 Artist Debugging 2_instruction: 'Koden för de tre morrhåren du ser är fel.
        Tips: varje morrhår är 75 pixlar långa. Fixa koden för att rita morrhåren.'
      2-3 Artist Debugging 3_instruction: 'Min båt har ett hål! Kan du fixa det genom
        att ändra vinkeln på linjen? Tips: den sista vinkeln är 15 grader fel.'
      2-3 Artist Debugging 4_instruction: Vad är det för en bild vi försöker rita?
        Gör färdigt den genom att koppla ihop punkterna med rätt linjer och vinklar.
      2-3 Artist Debugging 5_instruction: 'Koden för benet och foten du ser är fel.
        Tips: Foten är för lång, vi kan behöva ta bort ett steg (medveten ordvits)'
      2-3 Artist Debugging 6_instruction: Ser ut som jag sitter på en stol som saknar
        ett ben. Ändra blocken för att rita benet.
      2-3 Artist Debugging 7_instruction: Det ser ut som att C ritas baklänges. Kan
        du göra så att det ser ut som ett C?
      2-3 Artist Debugging 8_instruction: Mitt lyckohjul är inte klart. Hur många
        gånger måste jag upprepa för att göra färdigt det?
      2-3 Artist Debugging 9_instruction: 'Koden för denna stjälk är felaktig. Tips:
        Vinkeln är 60 grader fel'
      2-3 Artist Debugging Assessment 1_instruction: 'Denna form är för liten. Kan
        du göra den större? Tips: den bör vara 75 pixlar längre på varje sida.'
      2-3 Artist Free Play_instruction: Frispel! Rita vad du vill.
      2-3 Artist Functions 1_instruction: 'Hej. Jag zombie-konstnär. Mig älskar teckning!
        Hjälp mig att rita de kvadratiska glasögonen. Tips: bron mellan glasen är
        25 pixlar kortare än längden på kvadraten.'
      2-3 Artist Functions 10_instruction: Här är två funktioner, en för att rita
        ett stort kugghjul och en för att rita ett litet kugghjul. Använd dem för
        att rita insidan av en maskin!
      2-3 Artist Functions 11.5_instruction: Här är samma "Rita en hexagon"-funktion.
        Vad händer om du bara vrider 60 grader varje gång du upprepar?
      2-3 Artist Functions 11_instruction: Vi har bytt namn på funktionen "Rita en
        fyrkant" till "Rita en hexagon", men den ritar fortfarande bara rutor! Kan
        du ändra funktionen "Rita en hexagon" så att den ritar en hexagon med sidor
        på 50 pixlar och rita bilden med hjälp av funktionen?
      2-3 Artist Functions 12_instruction: 'Funktioner är riktigt bra för att rita
        komplexa saker flera gånger. Kan du använda funktionen "Rita en blomma" för
        att fylla resten av planteringslådan? (Ledtråd: växterna är alla åtskilda
        med 100 pixlar)  '
      2-3 Artist Functions 13_instruction: Vi har försett dig med fyra funktioner.
        Använd dem hur du vill i en eller flera slingor för att göra bilder du kan
        dela med dina vänner. Tryck kör för att se ett exempel.
      2-3 Artist Functions 2_instruction: Med funktioner kan du definiera nya block!
        Vi har flyttat blocken för att rita en kvadrat till en funktion som kallas
        "Rita en kvadrat". Kan du använda funktionen "Rita en kvadrat" för att skapa
        glasögonen? kvadraterna är 75 pixlar isär.
      2-3 Artist Functions 3_instruction: Ändra funktionen för att rita en kvadrat
        med en sidlängd på 115 och rita de större glasögonen. Kvadraterna är nu 45
        pixlar isär.
      2-3 Artist Functions 4_instruction: Använd blocket "Upprepa" för att rita dessa
        3 kvadrater.
      2-3 Artist Functions 7_instruction: 'Använd funktionen "Rita ett hus" för att
        rita två hus med två olika parametrar. (Tips: det första huset är 100 pixlar).'
      2-3 Artist Functions 9_instruction: Här är en funktion för snöflingor. Experimentera
        med den för att skapa en vinterscen! Detta är fri lek, så det finns inget
        pussel att lösa. Ha det så kul!
      2-3 Artist Loops 1_instruction: Kan du skapa en sexhörning med sidlängden 100
        pixlar för att göra färdigt cellen? Kom ihåg att det betyder att du bara behöver
        vrida 60 grader!
      2-3 Artist Loops 10_instruction: Vad händer med designen när vi gör vårt sista
        steget framåt hälften så långt?
      2-3 Artist Loops 11_instruction: Nu låt oss sätta *ytterligare* en slinga runt
        hela vår skapelse!  Glöm inte att lägga till en vinkel i slutet av den yttre
        loopen.
      2-3 Artist Loops 2_instruction: Nu ska du använda ett upprepa block för att
        göra cellen till ett snäckskal.
      2-3 Artist Loops 4_instruction: Vill du se vad som händer när vi upprepar formen
        om och om igen med en slinga?
      2-3 Artist Loops 5_instruction: Nu ska vi göra en liten förändring i slingan
        och se hur annorlunda vår bild blir.
      2-3 Artist Loops 6_instruction: Lägg till ytterligare ett flytta- och sväng-block
        inne i slingan för att se hur din design förändras.
      2-3 Artist Loops 7_instruction: Vi kan använda loopar för att göra alla typer
        av polygoner.  Kan du skapa en romb inuti denna hexagon?
      2-3 Artist Loops 8_instruction: Låt oss placera båda elementen i en slinga.
      2-3 Artist Loops 9_instruction: "Vi kommer att upprepa samma element, men nu
        ska vi lägga till avstånd mellan dem. \r\nAnvänd samma kod som tidigare, men
        lägg till ett steg framåt i slutet av den yttre loopen."
      2-3 Artist Loops New 1_instruction: Låt oss rita detta robotshuvud! Kan du göra
        en kvadrat med en sida på 100 pixlar?
      2-3 Artist Loops New 10_instruction: Låt oss nu sätta ihop ett antal V:n genom
        att rita dem i en slinga.
      2-3 Artist Loops New 11_instruction: Denna gång ska vi rita den 24 gånger. Lägg
        till en vänstersväng på 30 grader till denna kod och sätt allt i ett upprepa-
        block.
      2-3 Artist Loops New 12_instruction: "Rita en diamant med sidor 100 pixlar.\n
        \n"
      2-3 Artist Loops New 13_instruction: Rita nu diamanten 3 gånger i en loop.
      2-3 Artist Loops New 14_instruction: Rita nu diamanten 10 gånger men rotera
        90 grader mellan varje diamant.
      2-3 Artist Loops New 15_instruction: Rita något roligt.
      2-3 Artist Loops New 2_instruction: Här är lite av koden du använde för att
        rita rutan. Vad händer om du använder upprepa blocket för att köra den här
        koden 4 gånger?
      2-3 Artist Loops New 9_instruction: Rita ett enkelt V där båda sidor är 50 pixlar
        för att göra klart pilen.
      2-3 Artist Match Hex Pic_instruction: 'Match: Hjälp till att rita klart hexagonen.'
      2-3 Artist Match Rho Pic_instruction: 'Match: Gör klart koden.'
      2-3 Artist Match Sq Pic_instruction: 'Match: Gör klart koden'
      2-3 Artist Match Tri pic_instruction: 'Matching: Fyll i koden som saknas.'
      2-3 Artist Nested Loops 1_instruction: "Du har använt loopar för att rita former
        innan, men visste du att du kan sätta en loop inuti en annan loop? \r Loopa
        hela detta block med kod 3 gånger för att rita mönstret."
      2-3 Artist Nested Loops 10_instruction: Loopa den här koden 12 gånger för att
        slutföra mönstret.
      2-3 Artist Nested Loops 11_instruction: Loopa den här koden 4 gånger att slutföra
        mönstret, vänd 90 grader efter varje cirkel.
      2-3 Artist Nested Loops 12_instruction: Loopa den här koden 12 gånger för att
        göra klart lockarna.
      2-3 Artist Nested Loops 2_instruction: Loopa triangeln 6 gånger. Efter varje
        triangel måste du vända 60 grader innan nästa ritas.
      2-3 Artist Nested Loops 3_instruction: Du kommer behöva loopa triangeln 12 gånger
        för att rita detta mönster. Dividera antalet grader i en cirkel (360) med
        antalet former som du ritar (12) för att räkna ut hur mycket du ska  vända
        efter varje form.
      2-3 Artist Nested Loops 4_instruction: 'Loopa denna diamant 12 gånger för att
        rita en blomma. Tips: 12 diamanter är precis som de 12 trianglar du gjorde
        - hur mycket behöver du svänga efter varje form?'
      2-3 Artist Nested Loops 5_instruction: Fyll i  byggnadens fönster med en kapslad
        loop. Fönstren är 20 pixlar långa och 20 pixlar isär.
      2-3 Artist Nested Loops 6_instruction: Denna dinosaurie har 8 spikar längs svansen;
        varje spik är 30 pixlar lång. Loopa triangeln 8 gånger, men se till att gå
        vidare efter varje.
      2-3 Artist Nested Loops 7_instruction: Loopa denna triangel 10 gånger för att
        rita solen. Du kommer behöva flytta och vända efter varje triangel. Du kan
        räkna ut hur mycket du behöver vända genom att dividera antalet grader i en
        cirkel med antalet former.
      2-3 Artist Nested Loops 8_instruction: Låt oss lägga till lite gräs i vår bild.
        Varje tuva av gräs är 50 pixlar isär.
      2-3 Artist Nested Loops 9_instruction: Vi ska avsluta denna bild genom att lägga
        till en blomma. Loopa diamanten 12 gånger för att rita din blomma.
      2-3 Artist Nested Loops Free Play_instruction: Fri lek, rita något häftigt med
        kapslade slingor.
      2-3 Bee Conditionals 1_instruction: Hej! Jag är ett bi. Hjälp mig få nektar
        från blomman.
      2-3 Bee Conditionals 10_instruction: "Lila blommor kan ha antingen 1 eller 0
        nektar. Var försiktig med att samla nektar från en lila blomma om det inte
        har några. \r\n"
      2-3 Bee Conditionals 11_instruction: Samla nektar där blommorna har nektar.
      2-3 Bee Conditionals 12_instruction: Använd en slinga för att kontrollera och
        samla nektar från alla dessa blommor.
      2-3 Bee Conditionals 13_instruction: 'Samla nektar och gör honung. Tips: Vad
        händer om du använder  "om nektar" funktionen för en röd blomma? Kan du klara
        det med en loop?'
      2-3 Bee Conditionals 14_instruction: Samla nektar och gör honung. Var försiktig
        med att samla nektar från en lila blomma om den inte har någon.
      2-3 Bee Conditionals 15_instruction: Samla nektar från alla fyra blommorna.
      2-3 Bee Conditionals 2_instruction: Hej, är jag ett bi! Hjälp mig samla alla
        nektar från blommor. Använd en loop.
      2-3 Bee Conditionals 3_instruction: Hjälp mig samla alla nektar från blommorna
        och göra honung. Använd en loop.
      2-3 Bee Conditionals 4_instruction: Hjälp mig samla alla nektar från blommorna
        och göra all honungen.
      2-3 Bee Conditionals 5_instruction: Lila blommor kan ha antingen 1 eller 0 nektar,
        men du vet inte vilket det är! Var försiktig med att samla nektar från en
        lila blomma om den inte har några. Kontrollera om nektar är lika med 1 genom
        att använda om-blocket.
      2-3 Bee Conditionals 6_instruction: Kolla denna blomma med ett "om"-block för
        att se om det finns någon nektar.
      2-3 Bee Conditionals 7_instruction: Samla nektar från varje blomma om den har
        någon.
      2-3 Bee Conditionals 8_instruction: Det här fältet har röda och lila blommor.
        Röda blommor har ett känt antal nektar, men lila blommors antal nektar är
        okänt. Samla all nektar.
      2-3 Bee Conditionals 9_instruction: Samla all nektar från varje blomma.
      2-3 Bee Conditionals Assessment 1_instruction: 'Bedömning: Samla all nektar.
        Var försiktig med att samla nektar från en lila blomma om den inte har någon.'
      2-3 Bee Debugging 1_instruction: Dessa block irriterar mig. Åtgärda felen för
        att samla all nektar och göra all honung.
      2-3 Bee Debugging 10_instruction: Dessa block irriterar mig. Åtgärda felen för
        att samla all nektar och göra all honung.
      2-3 Bee Debugging 2_instruction: Dessa block irriterar mig. Åtgärda felen för
        att samla all nektar och göra all honung.
      2-3 Bee Debugging 3_instruction: Dessa block irriterar mig. Åtgärda felen för
        att samla all nektar och göra all honung.
      2-3 Bee Debugging 4_instruction: Dessa block irriterar mig. Åtgärda felen för
        att samla all nektar och göra all honung.
      2-3 Bee Debugging 5_instruction: Dessa block irriterar mig. Åtgärda felen för
        att samla all nektar och göra all honung. Du kan nu använda kör och steg.
      2-3 Bee Debugging 6_instruction: Dessa block irriterar mig. Åtgärda felen för
        att samla all nektar och göra all honung.
      2-3 Bee Debugging 7_instruction: Dessa block irriterar mig. Åtgärda felen för
        att samla all nektar och göra all honung.
      2-3 Bee Debugging 8_instruction: Dessa block irriterar mig. Åtgärda felen för
        att samla all nektar och göra all honung.
      2-3 Bee Debugging 9_instruction: Dessa block irriterar mig. Åtgärda felen för
        att samla all nektar och göra all honung.
      2-3 Bee Debugging Assessment 1_instruction: Bedömning:Dessa block irriterar
        mig. Åtgärda felen för att samla all nektar och göra all honung.
      2-3 Bee Functions 1_instruction: Funktioner är block av kod som utför en uppgift.
        Använd funktionen "få 2 nektar" för att samla nektar från varje blomma.
      2-3 Bee Functions 10_instruction: Lila blommor kan ha antingen 1 eller 0 nektar.  Skapa
        en funktion som samlar nektar enbart från lila blommor som har nektar.
      2-3 Bee Functions 2_instruction: Funktioner är block av kod som utför en uppgift.
        Använd funktionen "få 5" för att få 5 nektar i taget. Se till att använda
        en loop för att få ett perfekt antal block också.
      2-3 Bee Functions 3_instruction: Samla all nektar från varje blomma.
      2-3 Bee Functions 4_instruction: Funktionen "flytta och få nektar" vänder biet,
        samlar nektar, och vänder sedan tillbaka biet till där det började. Använd
        funktionen för att samla all nektar.
      2-3 Bee Functions 5_instruction: Det finns nu mer nektar hos blommorna. Redigera
        en viss funktion så att den samlar 4 nektar och använder den för att samla
        all nektar från blommorna.
      2-3 Bee Functions 6_instruction: Använd samma funktion för att samla nektar
        från de tre blommorna.
      2-3 Bee Functions 7_instruction: Blommorna är nu längre bort. Redigera den givna
        funktionen och använd den för att samla all nektar från blommorna.
      2-3 Bee Functions 8_instruction: Skapa din egen funktion som tar 7 nektar, rör
        sig framåt och gör 7 honung. Använd funktionen för att samla nektar från varje
        blomma och gör honung vid varje honungskaka.
      2-3 Bee Functions 9_instruction: Skapa din egen funktion som går en väg, hämtar
        nektar, gör honung och sedan vänder tillbaka biet till starten.
      2-3 Bee Functions Assessment 1_instruction: 'Bedömning: Använd den givna funktionen
        för att samla nektar från varje blomma.'
      2-3 Bee Functions Assessment 2_instruction: 'Bedömning: Skapa en funktion för
        att göra 3 honung på en gång.'
      2-3 Bee Loops 1_instruction: 'Varje blomma innehåller en enhet nektar. Samla
        nektar från var och en av blommorna. '
      2-3 Bee Loops 10_instruction: Kan du använda en medan-loop inuti två andra slingor
        för att samla all nektar?
      2-3 Bee Loops 11_instruction: Använd medan- loopar för att samla all nektar
        från blommorna på fältet.
      2-3 Bee Loops 12_instruction: Använd medan- loopar för att samla all nektar
        från blommorna på fältet.
      2-3 Bee Loops 13_instruction: 'Uppdrag: Använd upprepablocket för att samla
        in all nektar.'
      2-3 Bee Loops 1A_instruction: 'Hej, är jag ett bi. Kan du hjälpa mig att samla
        nektar från blommorna? '
      2-3 Bee Loops 2_instruction: Använd en slinga att samla nektar och göra honung.
      2-3 Bee Loops 2A_instruction: Kan du göra samma uppgift lättare med en loop?
      2-3 Bee Loops 3_instruction: Samla nektar från varje blomma och gör honung vid
        varje honungskaka.
      2-3 Bee Loops 3A_instruction: Kan du använda en loop för att samla all nektar?
      2-3 Bee Loops 3B_instruction: Använd nu det nya upprepa -blocket för att samla
        all nektar och göra all honung.
      2-3 Bee Loops 4_instruction: Använda en liknande loop som i det sista pusslet,
        men lägg till en sväng i den.
      2-3 Bee Loops 4A_instruction: Vad händer om du upprepar denna sekvens 3 gånger?
        Glöm inte att göra honung i slutet!
      2-3 Bee Loops 5_instruction: Använd en slinga att gå nerför trappan och samla
        nektar.
      2-3 Bee Loops 6_instruction: Använd en slinga att samla nektar från varje blomma
        och göra honung på varje honeycomb.
      2-3 Bee Loops 7_instruction: Sätta dessa block i en slinga för att samla nektar
        från varje blomma.
      2-3 Bee Loops 8_instruction: Dessa lila blommor har en okänd mängd nektar. Använd
        "medan nektar" slingan för att samla all nektar. Denna loop kommer att köra
        så länge villkoret är sant, i detta fall nektar > 0.
      2-3 Bee Loops 9_instruction: Medan-loppen kan utföra samma åtgärd som ett om-uttryck
        i en loop. Lägg till en medan-loop till denna kod för att utföra samma uppgift.
      2-3 Bee Loops Assessment 1_instruction: Bedömning - Använd en medan- loop för
        att samla all nektar från denna blomma.
      2-3 Maze 1_instruction: 'Kan du hjälpa mig att fånga den stygga grisen? Stapla
        ett par "framåt" block tillsammans och tryck på "Kör". '
      2-3 Maze 10_instruction: Led mig till den gröna elakheten! (Se upp för TNT)
      2-3 Maze 11_instruction: Ge mig att blomman, jag är hungrig! Hur många gånger
        behöver du upprepa ett block?
      2-3 Maze 12 (copy 1)_instruction: 'Kan du byta ut det tidigare svaret mot endast
        två block? (Tips: skapa en loop med ett "Upprepa gånger" block.)'
      2-3 Maze 12 (copy 2)_instruction: 'Kan du byta ut det tidigare svaret mot endast
        två block? (Tips: skapa en loop med ett "Upprepa gånger" block.)'
      2-3 Maze 12 (old)_instruction: Hjälp mig till grisen, nu med Upprepa- gånger
        blocket!
      2-3 Maze 12_instruction: 'Kan du byta ut dessa fem block med endast två block?
        (Tips: skapa en loop med ett "Upprepa gånger" block.)'
      2-3 Maze 13 (old)_instruction: Hjälp mig till grisen, nu med Upprepa- tills
        block!
      2-3 Maze 13_instruction: Hjälp mig till grisen med endast två block.
      2-3 Maze 14 (old)_instruction: Hjälp mig till grisen med Upprepa- tills block!
      2-3 Maze 14_instruction: Hjälp mig till Solrosen! (Var är  "Upprepa gånger"
        blocket när jag behöver det?)
      2-3 Maze 15 (old)_instruction: Hjälp mig till grisen med Upprepa- tills block!
      2-3 Maze 15_instruction: Använd två slingor för att komma till  grisen med färre
        block.
      2-3 Maze 16 (old)_instruction: Hjälp mig till grisen med Upprepa- tills block!
      2-3 Maze 16 before_instruction: Hjälp mig till grisen.
      2-3 Maze 16_instruction: Få mig till Solrosen. Loopa sekvensen!
      2-3 Maze 2_instruction: Grisen rufsar min fjädrar. Hjälp mig komma till honom!
      2-3 Maze 3_instruction: Spåra vägen och led mig till fåniga grisen. Undvik TNT
        eller fjädrar kommer att flyga!
      2-3 Maze 4_instruction: Led mig till den gröna elakheten! (Se upp för TNT)
      2-3 Maze 5_instruction: Led mig till den gröna elakheten! (Se upp för TNT)
      2-3 Maze 6_instruction: Behåll lugnet och hjälpa mig att hitta den elaka grisen.
        Annars kanske jag blir arg!
      2-3 Maze 7_instruction: Led mig till den gröna elakheten! (Se upp för TNT)
      2-3 Maze 8_instruction: Få mig att grisen!
      2-3 Maze 9_instruction: Led mig till den gröna elakheten! (Se upp för TNT)
      2-3 Maze Loops 1_instruction: Kan du få mig att grisen genom att använda 5 block?
      2-3 Maze Loops 17_instruction: Få mig till Solrosen!
      2-3 Maze Loops 18_instruction: Få mig till Solrosen!
      2-3 Maze Loops 19_instruction: Få mig till Solrosen!
      2-3 Maze Loops 20_instruction: Få mig till Solrosen!
      2-3 Maze Loops 21_instruction: Få mig till Solrosen!
      2-3 Maze Loops Assessment 1_instruction: 'Bedömning: Få mig till Solrosen med
        bara 5 block! '
      2-3 Maze sq1_instruction: |
        This pig is ruffling my feathers.  Help me find
        him!
      2-3 Maze sq10_instruction: Få mig till grisen! Vilka block blev  upprepade?
      2-3 Maze sq10v2_instruction: Få mig till grisen! Vilka block blev  upprepade?
      2-3 maze sq11_instruction: Få mig till grisen! Vilka block blev  upprepade?
      2-3 maze sq12_instruction: Kan du byta ut det tidigare svaret med en slinga
        med hjälp av ett "Upprepa gånger" block?
      2-3 maze sq13_instruction: Kära människa. Jag zombie. Måste... komma... till
        solros. Skapa loop med "upprepa tills" block.
      2-3 maze sq14_instruction: Kan du komma till Solrosen med endast fyra block?
      2-3 maze sq15_instruction: Kan du komma till Solrosen med bara fem block?
      2-3 maze sq16_instruction: OK, detta är liknande, men något annorlunda. Kan
        du göra det med endast fem block?
      2-3 Maze sq2_instruction: Spåra vägen och led mig till elaka grisen.  Undvik
        TNT eller fjädrar kommer att flyga!
      2-3 Maze sq3_instruction: Led mig till den gröna elakheten! (Se upp för TNT)
      2-3 Maze sq4_instruction: Behåll lugnet och hjälpa mig att hitta den elaka grisen.
        Annars kanske jag blir arg!
      2-3 Maze sq5_instruction: Få mig till grisen! Hur många gånger måste du upprepa
        ett block?
      2-3 Maze sq6_instruction: 'Kan du ersätta det tidigare svaret med endast två
        block? (Tips: skapa en loop med ett "Upprepa gånger"-block.)'
      2-3 Maze sq7_instruction: Få mig till den gröna inkräktaren med endast tre block.
      2-3 Maze sq8_instruction: Få mig till grisen! (Var är det där "Upprepa gånger"-blocket
        när jag behöver det?)
      2-3 Maze sq9_instruction: Skapa loopar för att komma till grisen med färre antal
        block.
      2-3_instruction: |
        Purple flowers may have either 1 or 0 nectar. Be careful
        not to collect nectar from a purple flower if it doesn't have any.
      2-3level1_instruction: Hjälp fågeln att fånga den stygga grisen genom att flytta
        den framåt
      4-5 Artist 1_instruction: 'Hjälp mig att rita färdigt min låda. (Varje rad är
        300 pixlar lång) '
      4-5 Artist 10_instruction: Tryck på "Kör" för att testa koden. Upprepa sedan
        det tillräckligt många gånger för att slutföra teckningen. Färgerna blir olika
        varje gång.
      4-5 Artist 11_instruction: Gör klart de gröna linjerna. Linjerna är 300 pixlar
        långa och det är 15 pixlar mellan dem.
      4-5 Artist 2_instruction: Kan du upprepa den här koden för att slutföra kvadraten?
      4-5 Artist 3.5_instruction: Ok, försök lista ut vad som händer om du kör den
        här koden (eller tryck på "Kör" för att testa). Upprepa sedan det tillräckligt
        många gånger för att slutföra bilden. Färgerna kommer (troligen) vara olika
        varje gång.
      4-5 Artist 3_instruction: Den här rektangulära rabatten har en omkrets på 600.
        Långsidan har en längd på 200. Rita rektangeln.
      4-5 Artist 4_instruction: Hur många grader är en cirkel?  Upprepa blocken för
        att skapa en färgcirkel.
      4-5 Artist 5_instruction: Vilken vinkel ska du använda?
      4-5 Artist 6_instruction: Denna liksidiga triangel har vinklarna 60, 60 och
        60 grader. Varje sida är 200 pixlar. Gör färdigt bilden.
      4-5 Artist 7_instruction: Denna rätvinkliga triangel har vinklarna 30, 60 och
        90 grader. Den sneda sidans längd är dubbelt så lång som höjden på 100 pixlar.
        Gör färdigt bilden.
      4-5 Artist 8_instruction: Mittlinjen på en fotbollsplan är vinkelrät mot långsidorna.
        Den här planen har en omkrets på 800 pixlar och är 240 pixlar lång. Hur bred
        är den? Rita sidolinjerna och mittlinjen.
      4-5 Artist 9_instruction: Rita den andra halvan så att bilden blir symmetrisk.
        Trianglarna är liksidiga och 50 pixlar långa.
      4-5 Artist Assessment 1_instruction: 'Uppgift: Använd en slinga för att rita
        den liksidiga triangeln. Varje sida är 300 pixlar.'
      4-5 Artist For Loops 1_instruction: Sätt siffrorna 1 till 10 i bredd-blocket
        och köra koden.
      4-5 Artist For Loops 11_instruction: Gör klart blocket "räkna med" så att det
        räknar 0, 20, 40, 60, 80... 200.
      4-5 Artist For Loops 12_instruction: 'Vad händer om du byter plats på "från"-
        och "till"-siffrorna? Gör färdigt blocket "räkna med" så att det räknar 200,
        180, 160, 140, 120...0. '
      4-5 Artist For Loops 13_instruction: 'Denna konstruktion påbörjades utan en
        "räkna med"-slinga och använder alltför många block!  Använda ett "räkna med"-block
        för att slutföra spiralen. Tips: sista linjens längd är 250 pixlar.'
      4-5 Artist For Loops 14_instruction: 'Någon påbörjade koden, men insåg sedan
        att det måste finnas ett snabbare sätt! Använd ett "räkna med"-block för att
        ersätta blocken och slutför den triangulära spiralen. (Tips: sista radens
        längd är 300 pixlar.)'
      4-5 Artist For Loops 15_instruction: 'Någon påbörjade koden, men insåg sedan
        att det måste finnas ett snabbare sätt! Använd ett "räkna med"-block för att
        ersätta blocken och slutför den sexkantiga spiralen. (Tips: sista radens längd
        är 200 pixlar.)'
      4-5 Artist For Loops 3_instruction: Hur kan vi räkna från 1 till 50? Ändra "räkna
        med"-blocket.
      4-5 Artist For Loops 4_instruction: Slutför "räkna med"-blocket så att det räknar
        från 1 till 10 med 1-steg.
      4-5 Artist For Loops 6_instruction: Rita kvadrater med sidorna 50, 60, 70, 80
        och 90 pixlar. Du måste använda funktionen "Rita en kvadrat" fem gånger.
      4-5 Artist For Loops 7_instruction: 'Rita samma rutor men använd blocket "Räkna
        med" för att ändra storlek. Placera blocket "Räknare" i funktionen "Rita en
        fyrkant". Ledtråd: Det ligger i variabelkategorin.'
      4-5 Artist For Loops 8_instruction: Kan du slutföra programmet genom att lägga
        blocken inuti ett block av typen "räkna med" som räknar från 10 till 200 med
        10-steg. Du hittar blocket "räkna med" i kategorin loopar.
      4-5 Artist For Loops 9_instruction: Dessa cirklar har storlekarna 5, 10, 15,
        20, 25, 30 och 35. Rita cirklarna med hjälp av blocket "räkna med".
      4-5 Artist Free Draw 1_instruction: Rita själv! Rita någonting du är inspirerad
        att skapa.
      4-5 Artist Functions 1_instruction: Använd "Upprepa" för att rita triangeln.
      4-5 Artist Functions 10a_instruction: Lägg koden inne i funktionen "rita en
        snöflinga" och byt ut 50 mot parametern "storlek". Funktionen används redan
        för att skapa en snöflinga som är 100 pixlar stor.
      4-5 Artist Functions 10b_instruction: 'Använd funktionen "Rita en snöflinga"
        för att skapa olika stora snöflingor. Ledtråd: Den första snöflingan är 25
        stor och varje snöflinga är dubbelt så stor som den föregående.'
      4-5 Artist Functions 11_instruction: 'Funktionen "Rita en hexagon" använder
        funktionen "Rita en triangel". Gör färdigt funktionen "Rita en hexagon". Ledtråd:
        En hexagon har 6 sidor, var och en är 100 pixlar lång.'
      4-5 Artist Functions 12_instruction: 'Gör färdigt funktionen "Rita vågor". varje
        våg består av en övre våg och en undre våg. Ledtråd: Rita 5 blåa vågor.'
      4-5 Artist Functions 13 Free play_instruction: Här är några funktioner för att
        rita planeter, stjärnor, raketer och robotar. Använd dem hur du vill för att
        skapa bilder du kan dela med dina vänner.
      4-5 Artist Functions 14 Free play_instruction: Varsågod, här har vi har gett
        dig flera funktioner. Använd dem hur du vill inom en eller flera loopar för
        att skapa bilder du kan dela med dina vänner. Klicka på "Kör" för att se exempel.
      4-5 Artist Functions 15 Assessment_instruction: 'Uppgift: Använd funktionen
        "Rita en kvadrat" för att skapa kvadraterna. Kvadraterna är 50, 100 och 150
        pixlar.'
      4-5 Artist Functions 2a_instruction: Sätt ihop de blocken till en ny funktion
        kallad "Rita en liten triangel" och anropa den.
      4-5 Artist Functions 2b_instruction: Skapa en funktion med namnet "Rita en liten
        triangel" med hjälp av de block som du har fått.
      4-5 Artist Functions 3_instruction: 'Skapa funktionerna "Rita en medelstor triangel"
        och "Rita en stor triangel". Funktionen "Rita en liten triangel" är redan
        gjord. Trianglarna har sidorna 50 (liten), 100 (medel) och 150 (stor). '
      4-5 Artist Functions 4_instruction: Den nya funktion "Rita en triangeln" har
        en parameter och kan göra samma sak som alla de tre tidigare funktionerna.
        Rita samma trianglar med hjälp av den nya funktionen.
      4-5 Artist Functions 5_instruction: Kan du modifiera funktionen "rita en triangel"
        till "rita en fyrkant" för att ändra bilden?
      4-5 Artist Functions 6_instruction: 'Använd funktionerna "Rita en kvadrat" och
        "Rita en triangel" för att rita ett hus. (Ledtråd: kvadratens sidor är 200
        pixlar)'
      4-5 Artist Functions 6b_instruction: Använd funktionerna "rita en kvadrat" och
        "rita en triangel" tillsammans med andra block för att skapa ett hus genom
        att lägga till dem i funktionen "rita ett hus" och anropa den.
      4-5 Artist Functions 7_instruction: Använd funktionen "Rita ett hus" för att
        rita två hus som är 100 och 50 pixlar stora. De två husen ska vara åtskilda
        av 50 pixlar.
      4-5 Artist Functions 8_instruction: Funktionen "Rita en blomma" har en parameter
        som låter dig bestämma höjd på stjälken. Sätt den till 200 och se vad som
        händer.
      4-5 Artist Functions 9_instruction: Rita dessa tre blommor. Den första blomman
        ska vara 100 hög och de två andra ska vara 50 pixlar högre än föregående blomma.
        Blommorna ska stå 100 pixlar från varandra.
      4-5 Artist Patterns 1_instruction: Kan du rita kvadraten med hjälp av en upprepning?
        Varje sida ska vara 20 pixlar lång.
      4-5 Artist Patterns 10_instruction: 'Den här koden ritar två rader med hexagoner.
        Upprepa allt fyra gånger för att rita hela honungskakan. Ledtråd: Du behöver
        hoppa tillbaka 120 pixlar i din yttre upprepning för att vara säker på att
        konstnären inte målar utanför skärmen.'
      4-5 Artist Patterns 11_instruction: 'Hur många gånger behöver du upprepa det
        här för att måla en halvcirkel? Ledtråd: Om det är 360 grader i en cirkel
        och varje upprepning flyttar 3 grader, hur många gånger behöver du då upprepa
        för att rita en hel cirkel?'
      4-5 Artist Patterns 12_instruction: Vad händer om du kopierar slingan och vänder
        åt vänster i stället för höger? Kan du upprepa för att måla vågen?
      4-5 Artist Patterns 13_instruction: Låt oss nu upprepa fyra gånger för att skapa
        ramen. Tänk på hörnen, du kan inte bara vända 90 grader! Om du behöver upprepa
        en sväng på 3 grader 60 gånger för att få en halvcirkel, vilka av dessa kodblock
        kommer då att skapa en fjärdedels cirkel för hörnen?
      4-5 Artist Patterns 2_instruction: Om du lägger din kvadratslinga inuti en annan
        slinga kallas det för nästlad slinga. Vad behöver du lägga till din yttre
        slinga för att se till så att alla 15 kvadraterna står på rad bredvid varandra?
      4-5 Artist Patterns 3_instruction: Låt oss nu gå ytterligare en nivå djupare!
        Vi har nästlat hela kodblocket i en annan slinga men du behöver få konstnären
        tillbaka på plats för att rita nästa linje. Vilket av dessa kodblock kan du
        lägga i slutet av den yttersta loppen för att rita hela rutnätet?
      4-5 Artist Patterns 4_instruction: Den här diamanten har sidor som är 50 pixlar
        långa och vinklar på 120 och 60 grader. Använd en slinga för att rita den.
      4-5 Artist Patterns 5.5_instruction: Hur många gånger måste du upprepa det här
        blocket för att rita hela rutnätet med diamanter?
      4-5 Artist Patterns 5_instruction: Låt oss upprepa det där för att göra en rad
        med 6 diamanter. Observera att vi ändrat vår diamantskod till att upprepa
        sig 3 gånger i stället för 2 - varför tror du vi gjort så?
      4-5 Artist Patterns 6_instruction: Hur många gånger måste du upprepa det här
        blocket för att rita hela rutnätet med diamanter?
      4-5 Artist Patterns 7_instruction: Låt oss modifiera koden från senaste pusslet
        för att göra detta mer komplexa mönster. Lägg märke till hur diamanterna nu
        överlappar varandra. Prova att ändra det första "bakåthoppet" från 100 till
        50 (hälften så långt) - hur långt bör konstnären nu röra sig i det andra "bakåthoppet"?
      4-5 Artist Patterns 8_instruction: Använd en slinga för att rita denna hexagon
        med sidor på 40 pixlar och vinkeln på 60 graders.
      4-5 Artist Patterns 9.5_instruction: Låt oss upprepa den här koden för att rita
        två rader med hexagoner. Lägg märke till hur den andra raden förskjuts till
        höger.
      4-5 Artist Patterns 9_instruction: 'Upprepa nu den koden 3 gånger för att rita
        hela raden. Ledtråd: varje hexagon är 80 pixlar bred från vänster till höger.'
      4-5 Artist Patterns Free Play_instruction: Lek fritt! Prova att göra ditt eget
        mönster!
      4-5 Bee Conditionals - FC Test_instruction: Biet vill bara ha nektar just nu.
        Inte alla saker är blommor, så kolla under ALLA MOLN för att se om det döljer
        en blomma. Om det gör det kan du samla nektar.
      4-5 Bee Conditionals 1 (copy 1)_instruction: |
        The bee can't tell if this is
        a flower or a honeycomb. Gather nectar only from flowers, but first check
        if it is a flower or a honeycomb.
      4-5 Bee Conditionals 1_instruction: Biet kan inte avgöra om detta är en blomma
        eller en bivaxkaka. Samla nektar endast från blommor men kolla först om det
        är en blomma eller en bivaxkaka.
      4-5 Bee Conditionals 2 (copy 1)_instruction: |
        The bee only wants nectar right
        now. Remember, not all objects are flowers, so check to gather nectar only
        at flowers.
      4-5 Bee Conditionals 2_instruction: Biet vill bara ha nektar just nu. Alla objekt
        är inte blommor, så kontrollera under ALLA MOLN för att se om de döljer en
        blomma. Om det är en blomma kan du samla nektar.
      4-5 Bee Conditionals 3_instruction: Nu vill biet bara göra honung. Se till att
        göra honung endast vid bivaxkakor.
      4-5 Bee Conditionals 4 (copy 1)_instruction: |
        The unknown object is either
        a flower or a honeycomb. Use the if/else block to collect nectar if it is
        a flower, else to make honey (because it is a honeycomb).
      4-5 Bee Conditionals 4_instruction: Det okända objektet är antingen en blomma
        eller en bivaxkaka. Använd if/else -blocket för att samla nektar om det är
        en blomma och annars för att göra honung (för då är det en bivaxkaka).
      4-5 Bee Conditionals 5_instruction: Det skulle kunna finnas en blomma eller
        en bivaxkaka under de där molnen. Använd blocket "om/annars" för att samla
        nektar om det är en blomma och annars för att göra honung (för då är det en
        bivaxkaka).
      4-5 Bee Conditionals 6 (copy 1)_instruction: |
        This purple flower may have either
        3, 2, or 1 nectar. Here an if-else block is combined with another if-else
        block to create an if, else-if, else block. Complete the solution to collect
        the unknown amount of nectar.
      4-5 Bee Conditionals 6_instruction: Denna lila blomma kan ha antingen 3, 2 eller
        1 nektar. Här är ett "om/annars"-block kombinerat med ett annat om/annars-block
        för att skapa ett "om, om/annars, annars"-block. Gör klart lösningen på problemet
        för att samla in den okända mängden nektar.
      4-5 Bee Conditionals 7_instruction: Kom ihåg att lila blommor kan ha 3, 2 eller
        1 nektar. Gör färdigt funktionen "kolla lila blomman" och använd den för att
        samla all nektar från blommorna.
      4-5 Bee Conditionals 8_instruction: Skriv i funktionen "kolla blomman gör honung".
        Din funktion borde kolla om den lila blomman har 3, 2, eller 1 nektar och
        samla all nektar. Sedan, gå framåt och göra honung.
      4-5 Bee Conditionals Assessment 1_instruction: |
        Uppgift: Denna kod är fel.
        Gör färdigt funktionen "få nektar eller gör honung", anropa den sen för att samla all nektar och honung. Kom ihåg att lila blommor kan ha 3, 2, eller 1 nektar.
      4-5 Bee Debugging 1_instruction: Dessa bock irriterar mej verkligen. Kan du
        fixa dem?
      4-5 Bee Debugging 10_instruction: Hitta felen och rätta dem.
      4-5 Bee Debugging 11_instruction: Räknar denna rätt?
      4-5 Bee Debugging 2_instruction: Hjälp biet att få nektarn och göra honung.
      4-5 Bee Debugging 3_instruction: Hitta felen och rätta dem.
      4-5 Bee Debugging 4_instruction: Dessa block funkar inte. Vad är mönstret?
      4-5 Bee Debugging 5_instruction: Något är inte rätt här...
      4-5 Bee Debugging 6_instruction: Den lila blomman har en okänd mängd nektar.
        Fixa blocken för för att få all nektar från blomman.
      4-5 Bee Debugging 7_instruction: Funktionen saknar något...
      4-5 Bee Debugging 8_instruction: Denna funktion är korrekt, men används inte
        rätt.
      4-5 Bee Debugging 9_instruction: Varför gör inte biet tillräckligt med honung?
      4-5 Bee Debugging Assessment 1_instruction: 'Uppgift: Fixa koden.'
      4-5 Bee Nested Loops 1_instruction: Använd en slinga för att samla ihop all
        nektar.
      4-5 Bee Nested Loops 2_instruction: 'Samla nektar från alla blommor. Använd
        en nästlad lopp. '
      4-5 Bee Nested Loops 3_instruction: Samla all nektar genom att lägga start-koden
        i en nästlad loop.
      4-5 Bee Nested Loops 4_instruction: 'Samla all nektar från varje blomma och
        gör honung vid varje bivaxkaka. Använd en nästlad loop. '
      4-5 Bee Nested Loops 5_instruction: Samla all nektar genom att skapa en nästlad
        slinga.
      4-5 Bee Nested Loops 6_instruction: Samla all nektar.
      4-5 Bee Nested Loops 7_instruction: Lägg denna slinga inuti en annan slinga
        för att skapa en nästlad slinga och samla all nektar från blommorna.
      4-5 Bee Nested Loops 8_instruction: 'Samla all nektar från blommorna genom att
        använda blocket "medan". Ersätt det inre "upprepa"-blocket med blocket "medan". '
      4-5 Bee Nested Loops 9_instruction: Samla all nektar från dessa blommor genom
        att nästla en "medan"-slinga i en "upprepa"-slinga.
      4-5 Bee Nested Loops Assessment 1_instruction: Uppgift - samla all nektar och
        gör all honung genom att använda slingor.
      4-5 Bee Nested Loops Rows_instruction: Samla nektar från raderna av blommor!
        Använda en nästlad slinga.
      4-5 Maze 1 (copy 1)_instruction: Kära människa. Jag zombie. Måste... komma...
        till solros.
      4-5 Maze 1_instruction: Kära människa. Jag zombie. Måste... komma... till solros.
      4-5 Maze 10_instruction: Kan du komma till Solrosen med endast fyra block?
      4-5 Maze 11_instruction: Kan du komma till solrosen med bara sex block?
      4-5 Maze 12_instruction: Ok, är detta är lite annorlunda. Kan du göra det med
        bara sex block?
      4-5 Maze 13_instruction: Få mig att grisen!
      4-5 Maze 14_instruction: Ta mig till grisen! Använd blocket 'upprepa-tills'.
      4-5 Maze 2 (copy 1)_instruction: Ta zombie till solrosen, men undvik de köttätande
        växterna!
      4-5 Maze 2_instruction: Ta zombien till solrosen, men undvik de köttätande växterna!
      4-5 Maze 3 (copy 1)_instruction: Måste... ta mig till... solrosen.
      4-5 Maze 3_instruction: Måste... ta mig till... solrosen.
      4-5 Maze 4 (copy 1)_instruction: Försök använda blocket "upprepa" för att använda
        färre block...
      4-5 Maze 4_instruction: Försök använda blocket "upprepa" för att använda färre
        block...
      4-5 Maze 5 (copy 1)_instruction: Kan du lösa pusslet med så få block som möjligt?
      4-5 Maze 5_instruction: Kan du lösa pusslet med så få block som möjligt?
      4-5 Maze 6 (copy 1)_instruction: Kan du lösa pusslet med så få block som möjligt?
      4-5 Maze 6_instruction: Kan du lösa pusslet med så få block som möjligt?
      4-5 Maze 7_instruction: Kära människa. Jag zombie. Måste... komma... till solros.
      4-5 Maze 8_instruction: Använd blocket "Upprepa" för att ta zonbien till solrosen.
        (Undvik de köttätande växterna!)
      4-5 Maze 9_instruction: Skapa en slinga med blocket "upprepa tills".
      4-5 Maze Assessment 1_instruction: 'Uppgift: Ta dig till solrosen.'
      4-5 Maze Conditionals 1_instruction: Använd blocket "upprepa tills" för att
        ta zombien till solrosen.
      4-5 Maze Conditionals 10_instruction: Kan du lägga till endast 3 block för att
        hjälpa mig klara en svårare labyrint? Om du gör det rätt, kan jag ta mig fram
        vilken snirklig väg som helst oavsett hur lång den är.
      4-5 Maze Conditionals 2_instruction: Använd blocket "upprepa tills" för att
        ta zombien till solrosen.
      4-5 Maze Conditionals 3_instruction: 'Använd "om"-blocket för att låta mig välja
        när jag ska svänga. Tips: du behöver bara ett block till, men lär dig hur
        man gör det så att du kan göra det själv nästa gång.'
      4-5 Maze Conditionals 4_instruction: Ok, det här är precis som förra pusslet,
        men du behöver kunna använda "om"-blocket och "upprepa"-blocket tillsammans.
      4-5 Maze Conditionals 5_instruction: Mig vill ha solros! Använd ett "Om"-block
        för att ta mig dit med minsta antalet block.
      4-5 Maze Conditionals 6_instruction: Mig vill ha solros! Använd ett "Om"-block
        för att ta mig dit med minsta antalet block.
      4-5 Maze Conditionals 7_instruction: "Okej, vi tränar lite till \n– denna omgång
        är ganska lik den förra, men se upp för de köttätande växterna!\n"
      4-5 Maze Conditionals 8_instruction: '"Om/annars"-blocket kontrollerar ett villkor,
        och gör sen en sak ELLER en annan. Använd det nya blocket för att ta mig till
        solrosen.'
      4-5 Maze Conditionals 9_instruction: En övning till med "Om/annars"-blocket,
        kan du få det rätt på första försöket?
      4-5 Maze Conditionals Assessment 1_instruction: Använd blocket "upprepa-tills"
        och blocket "om-annars" för att ta mig till solrosen med så få block som möjligt.
      4-5 Nested Loops 1_instruction: 'Komplettera koden som ritar dessa trianglar.  Den
        första är gjord åt dig.  Tips: 3 trianglar med 360 graders rotation.'
      4-5 Nested Loops 10_instruction: Rita den sista raden med stjärnor på flaggan
        genom att upprepa de givna blocken. Stjärnorna ligger med 50 pixlar mellanrum,
        men kom ihåg att stjärnorna själva är 30 pixlar breda.
      4-5 Nested Loops 11_instruction: Kan du rita dessa 10 kvadraterna på trottoaren
        med en nästlad slinga? Varje kvadrat är 30 pixlar.
      4-5 Nested Loops 12_instruction: Kan du rita dessa 36 trianglar med en nästlad
        slinga?
      4-5 Nested Loops 2_instruction: 'Sätt nu in denna slinga inuti en annan slinga
        för att rita 10 trianglar.  Detta kallas en nästlad slinga. Tips: Alla 10
        trianglar slutför en 360 graders rotation.  '
      4-5 Nested Loops 3_instruction: "Skapa en sol genom att nästla in startkoden
        i en annan slinga. Detta kallas en nästlad slinga. \r\n"
      4-5 Nested Loops 5_instruction: Repetera den givna koden för att skapa en väderkvarn.
      4-5 Nested Loops 6_instruction: Kan du rita en hexagon genom att upprepa triangelkoden?
      4-5 Nested Loops 7_instruction: 'Upprepa denna design 10 gånger. Hur många grader
        måste du vända varje gång du upprepar? (Ledtråd: Vad är 360 dividerat med
        10?)'
      4-5 Nested Loops 8_instruction: 'Upprepa denna design 6 gånger. Hur många grader
        måste du rotera varje gång du upprepar? (Ledtråd: Vad är 360 dividerat med
        6?)'
      4-5 Nested Loops 9_instruction: Rita tänderna i alligatorns mun!
      4-5 Nested Loops Assessment 1_instruction: Använd en nästlad loop för att slutföra
        designen.
      4-5 While Loops 1_instruction: Flytta mig till hålet och fyll det med två spadtag
        med jord, använd blocket "fyll".
      4-5 While Loops 2_instruction: Flytta mig till jordhögen och ta bort den med
        5 spadtag, använd blocket "ta bort".
      4-5 While Loops 3_instruction: 'Flytta mig till högen och ta bort hela, gå sedan
        till hålet och fyll det helt.  Tips: Använd så få block som möjligt.'
      4-5 While Loops 4_instruction: 'Wow, jag hittade ett riktigt djupt hål! Jag
        vet inte hur många spadtag med jord som krävs.  Kan du skriva ett program
        som fyller det tills marken är jämn?  Tips: Försök att använda en ''medan''-slinga
        denna gång.'
      4-5 While Loops 5_instruction: Wow, nu finns det två djupa hål! Kan du skriva
        ett program som fyller dem båda tills marken är jämn?
      4-5 While Loops 6_instruction: Wow, nu finns det en stor hög med jord! Kan du
        skriva ett program som tar bort allt så att marken blir jämn?
      4-5 While Loops 7_instruction: Wow, nu finns det tre högar av jord! Kan du skriva
        ett program som tar bort dem tills marken är jämn?
      4-5 While Loops 8_instruction: ' Det finns ett riktigt djupt hål och en riktigt
        stor hög med jord. Hur många skyfflar med jord behöver flyttas för att göra
        marken jämn? Tips: använd en "medan"-slinga för båda.'
      4-5 While Loops Assessment 1_instruction: Det finns många hål och högar. Hjälp
        mig att fylla och ta bort dem för att göra marken slät.
      AlgPD DR Free Play_instruction: Create a function based on your own word problem.
      AllTheThings Applab - Turtle move with button_instruction: |
        Add a button that
        moves the turtle when clicked.  (Click to see full instructions)
      allthethings_moviebot_instruction: |
        This level cloned from "U3 Digital Assistant
        Target"
      allthethings_template_backed1_instruction: 'Backed by a template #1'
      allthethings_template_backed2_instruction: 'Backed by a template #2'
      App Lab test_instruction: test
      Applab test_instruction: This level is submittable. For testing only!
      AppLab_test02_instruction: |
        One sentence summary of the activity. Click to
        view full instructions.
      Artist - Nested Loops 1_instruction: |
        Complete the code to draw these triangles.  The
        first one is done for you.  Hint:  3 triangles in a 360 degree rotation.
      Artist - Nested Loops 10_instruction: |
        Draw the last row of stars on this flag
        by looping the provided blocks. The stars are 50 pixels apart, but remember
        that the stars themselves are 30 pixels wide.
      Artist - Nested Loops 11_instruction: |
        Can you draw these 10 squares of this
        sidewalk using a nested loop? Each square is 30 pixels.
      Artist - Nested Loops 12_instruction: |
        Can you draw these 36 triangles using
        a nested loop?
      Artist - Nested Loops 2_instruction: "Now nest this loop inside another loop\nto
        draw 10 triangles.  This is called a nested loop.  Hint: All 10 triangles\ncomplete
        a 360 degree rotation.  \n"
      Artist - Nested Loops 3_instruction: "Create a sun by nesting the starter code\nin
        another loop. This is called a nested loop.\r\n"
      Artist - Nested Loops 5_instruction: Loop the given code to create a windmill.
      Artist - Nested Loops 6_instruction: |
        Can you draw a hexagon by looping the
        triangle code?
      Artist - Nested Loops 7_instruction: |
        Loop this design 10 times. How much do
        you have to turn each time you loop? (Hint: What is 360 divided by 10?)
      Artist - Nested Loops 8_instruction: |
        Loop this design 6 times. How much do
        you have to turn each time you loop? (Hint: What is 360 divided by 6?)
      Artist - Nested Loops 9_instruction: Draw the teeth in the alligator's mouth!
      Artist - Nested Loops Assessment 1_instruction: Använd en kapslad loop för att
        slutföra designen.
      Auto Open Function Editor_instruction: 'Du kan anropa funktioner från inuti
        andra funktioner! Med din "form" funktion som bas, skapa 3 hus former varav
        varje är 20 pixlar större än den förra. Den första ska vara 50 pixlar i längd.
        Att använda en ''räknare'' loop kan vara till hjälp. '
      Bee Recommended Blocks test_instruction: Lila blommor kan ha antingen 1 eller
        0 nektar, men du vet inte vilket det är! Var försiktig med att samla nektar
        från en lila blomma om den inte har några. Kontrollera om nektar är lika med
        1 genom att använda om-blocket.
      Big Game Animation 1 (copy 1)_instruction: |
        Now that you've learned to write
        simple linear functions, let's work on using them to add some movement to
        our game. Click play to see what your game can currently do (not much!), update
        any variables you like, and then click finish to move on.
      Big Game Animation 1_instruction: |
        Now that you've learned to write simple
        linear functions, let's work on using them to add some movement to our game.
        Click "Run" to see what your game can currently do (not much!), update any
        variables you like, and then click finish to move on.
      Big Game Animation 2 (copy 1)_instruction: |
        The function 'update-target'
        function takes the target's current x value, and returns an updated value.
        Complete the 'update-target' function so that it adds to the x value each
        time it is called. The more you add to x, the faster the target will go.
      Big Game Animation 2_instruction: |
        The update-target function takes the target's
        current x value, and returns an updated value. Complete the update-target
        function so that it adds to the x value each time it is called. The more you
        add to x, the faster the target will go.
      Big Game Animation 3_instruction: |
        The update-danger function should work just
        like update-target, except that the danger should move from the right side
        over towards the left. Complete update-danger to make the danger fly across
        the screen.
      Big Game Animation 4_instruction: |
        At this point in your game, your danger
        should run across the screen from right to left, and your target should run
        across from left to right. They don't ever come back on screen once they've
        left, but we'll take care of that later. Take a minute to make sure your
        game is working like you want it to, and then click "Finish" to move on.
      Big Game Booleans 1_instruction: |
        When you last worked on your game we got
        our target and danger sprites to fly across the screen, but they never come
        back. Click "Run" to see how your game is currently working, and then click
        finish and we'll work on making those sprites reappear on screen after they've
        left.
      Big Game Booleans 2_instruction: |
        Go to the Functions section of the toolbox
        and complete the safe-left? function so that it returns true if the sprite's
        x coordinate is greater than -50. If you're successful you should see the
        Danger go off the left side and then return on the right side.
      Big Game Booleans 3_instruction: |
        Now that you've got safe-left?, let's fill
        in safe-right? - it should take in a sprite's x coordinate and return true
        if that coordinate is less than 450. Once your safe-right? is complete you
        should see the Target go off the right side of the screen and return on the
        left.
      Big Game Booleans 4_instruction: |
        Complete the onscreen? function so that it
        checks whether both safe-left? and safe-right? are true.
      Big Game Booleans 5_instruction: |
        At this point your Danger should run across
        the screen from right to left, your Target should run across from left to
        right, and they should both return to the opposite side, repeatedly. Take
        a minute to make sure your game is working like you want it to, and then click
        "Finish" to move on.
      Big Game Collision 1 (copy 1)_instruction: |
        When you last worked on your game
        we got our target and danger sprites to fly across the screen, but they never
        come back. Click run to see how your game is currently working, and then click
        finish and we'll work on making those sprites reappear on screen after they've
        left.
      Big Game Collision 1_instruction: |
        At this point you've programmed a video
        game with a moving Target and Danger, both of which return to the screen once
        they've left, and a Player that responds to keyboard input. Click "Run"
        to see how your game is currently working, and then we'll dig into the final
        missing piece - collision detection!
      Big Game Collision 2_instruction: |
        To move the player up and down, we'll need
        to use a conditional block to figure out which key is pressed and respond
        accordingly. Computers read keypresses as numeric key codes - the up arrow
        is 38 and the down arrow is 40. You can lookup other key codes in your student
        workbook. Edit the 'update-player' function so that if moves the player
        up when the up arrow is pressed, or down when the down arrow is pressed.
      Big Game Collision 3_instruction: |
        Use the Distance Formula, so the distance
        function returns the distance between the player's center coordinates (px,
        py) and another sprite's center coordinates (cx, cy).
      Big Game Collision 4_instruction: |
        Complete the collide? function so that it
        returns true if the distance between two points is less than 100 pixels apart.
      Big Game Complete_instruction: |
        A demo of the completed CS in Algebra Big Game
        project
      Big Game Final_instruction: |
        You made it! At this point your game should be
        fully functioning, take some time to enjoy your new game and make any final
        tweaks to it. When you're happy with the final product, click Finish and
        you'll have an opportunity to share a link to your game. Good work!
      Big Game Player 1_instruction: |
        We're getting really close to a finished game!
        Last time you worked on your game, you used booleans to make your Target and
        Danger return to the screen once they've left. Click Run to see how your
        game looks right now, and then we'll get to making your Player move up and
        down.
      Big Game Player 2_instruction: |
        Edit the update-player function so the player
        moves up when the up arrow (keycode 38) is pressed, and moves down (keycode
        40) when the down arrow is pressed.
      Big Game Testing_instruction: |
        A demo of the completed CS in Algebra Big Game
        project
      Big Game Vars 1 (copy 1)_instruction: |
        Let's get started on your Big Game!
        Here you'll see a whole bunch of placeholder code that you'll eventually
        replace with your own, but for now we're only going to worry about defining
        variables. Click "Run" to see what the game looks like with the default
        values.
      Big Game Vars 1_instruction: |
        Let's get started on your Big Game! Here you'll
        see a whole bunch of placeholder code that you'll eventually replace with
        your own, but for now we're only going to worry about defining variables.
        Click "Run" to see what the game looks like with the default values.
      Big Game Vars 2 (copy 1)_instruction: |
        The first step to making this game your
        own is to give it a good Title. Click edit on the 'title' and 'subtitle'
        variables and change them to something new.
      Big Game Vars 2_instruction: |
        The first step to making this game your own is
        to give it a good Title. Click edit on the title and subtitle variables and
        change them to something new.
      Big Game Vars 3 (copy 1)_instruction: |
        Now let's set the background for your
        new game. Edit the 'bg' variable and select a new background Image from
        the dropdown.
      Big Game Vars 3_instruction: |
        Now let's set the background for your new game.
        Edit the bg variable and select a new background Image from the dropdown.
      Big Game Vars 4 (copy 1)_instruction: |
        Awesome, now you can update the variables
        for your Player, Target, and Danger. Feel free to play with all of the variables
        at this point to make your game look like you'd like it to. Click 'finish'
        when you're done.
      Big Game Vars 4_instruction: |
        Awesome! Now you can update the variables for
        your Player, Target, and Danger. Feel free to play with all of the variables
        at this point to make your game look like you'd like it to. Click "Finish"
        when you're done.
      Brad Spooky House Copy_instruction: |
        Freeplay: Here are the functions you've
        written, and some more for you to play with. Draw something awesome! Play
        with the pen width to see how different your drawings look!
      Brad Spooky House_instruction: |
        Freeplay: Here are the functions you've written,
        and some more for you to play with. Draw something awesome! Play with the
        pen width to see how different your drawings look!
      Building a Foundation Assessment_instruction: |
        Build a three level pyramid,
        there are no other directions, so just play with the pieces until you get
        it!
      Busy Bee 2_instruction: Detta bi har en hel del arbete att utföra! Hittar du
        några mönster som du kan använda för att förenkla din kod?
      Busy Bee_instruction: Detta bi har en hel del arbete att utföra! Hittar du några
        mönster som du kan använda för att förenkla din kod?
      C3-Farmer While Loops 1_instruction: |
        Move me to the hole and fill it with
        two shovelfuls of dirt, using the "fill" block.
      C3-Farmer While Loops 2_instruction: |
        Move me to the pile of dirt and remove
        it with 5 shovel scoops, using the 'remove' block.
      C3-Farmer While Loops 3_instruction: |
        Move me to the pile and remove all of
        it, then move to the hole and fill it completely.  Hint:  Use as few blocks
        as possible.
      C3-Farmer While Loops 4_instruction: |
        Wow, I found a really deep hole! I don't
        know how many shovelfuls of dirt it needs.  Can you write a program that fills
        it until the ground is even?  Hint:  Try using the while loop this time.
      C3-Farmer While Loops 5_instruction: |
        Wow, now there are two deep holes! Can
        you write a program that fills them both until the ground is even?
      C3-Farmer While Loops 6_instruction: |
        Wow, now there is a large pile of dirt!
        Can you write a program that removes all of it so the ground is even?
      C3-Farmer While Loops 7_instruction: |
        Wow, now there are three piles of dirt!
        Can you write a program that removes each of them until the ground is even?
      C3-Farmer While Loops 8_instruction: |2
         There is a really deep hole and a really
        large pile of dirt.  How many shovelfuls of dirt need to be moved around to
        make the ground flat?  Hint: Use the while loop for both.
      C3-Farmer While Loops Assessment 1_instruction: |
        There are a lot of holes and
        piles.  Help me to fill and remove them to make the ground flat.
      Calc Circles of Eval .1_instruction: |
        You’ll be writing a kind of code called
        Evaluation Blocks, because each block of code evaluates to a single value.
        Change the ??? in this code so that the block evaluates to 5.
      Calc Circles of Eval .2_instruction: |
        This Evaluation Block is a multiplication
        function which takes two numbers and returns the product of those numbers.
        Edit this block so that it multiplies 2 * 5
      Calc Circles of Eval .3_instruction: |
        Here's a function for addition which
        takes two numbers and returns their sum. Use this Addition Block to add 3
        + 6.
      Calc Circles of Eval .4_instruction: |
        Here we've nested an Addition Block
        inside a Multiplication Block. Complete this code so it multiplies 3 by (4
        + 1)
      Calc Circles of Eval 1 (copy 1)_instruction: |
        Convert this statement to <some_shape>
        of evaluation.
      Calc Circles of Eval 1_instruction: |
        Every mathematical operator (+, -, *,
        /, and so on) can be represented by an Evaluation Block in code. Change the
        Evaluation Block to match the expression.
      Calc Circles of Eval 2 (copy 1)_instruction: |
        Convert this statement to <some_shape>
        of evaluation.
      Calc Circles of Eval 2_instruction: |
        Use a Multiplication Block to complete
        this code.
      Calc Circles of Eval 3_instruction: |
        Complete the Evaluation Blocks to match
        this statement.
      Calc Circles of Eval 4_instruction: |
        This code is missing a couple of Evaluation
        Blocks - make sure you put everything in the right order.
      Calc Circles of Eval 5_instruction: |
        Complete the Evaluation Blocks to match
        this statement.
      Calc Circles of Eval 6_instruction: |
        Complete the Evaluation Blocks to match
        this expression.
      Calc Circles of Eval 7_instruction: |
        Complete the Evaluation Blocks to match
        this statement.
      Calc Circles of Eval 8_instruction: |
        Complete the Evaluation Blocks to match
        this statement.
      Calc Circles of Eval 9_instruction: |
        Complete the Evaluation Blocks to match
        this statement.
      Calc Circles of Eval Free Play_instruction: |
        Free Play: Try using the Evaluation
        Blocks to write some equations of your own. How does nesting the blocks in
        different ways impact their evaluation?
      Calc Define Funcs 1 (copy 1)_instruction: |
        Let's look at some more algebraic
        functions now. Here's a function translated from the simple algebraic function
        f(x) = x + 1. What would you expect this function to output if provided an
        input of 15?
      Calc Define Funcs 1_instruction: |
        Let's look at some more traditional algebraic
        functions now. Here's a function translated from the simple algebraic function
        f(x) = x + 1. What would you expect this function to output if provided an
        input of 15?
      Calc Define Funcs 2_instruction: |
        Write a function f that takes a parameter
        x and returns x - 10. Test your function using f(15).
      Calc Define Funcs 3_instruction: |
        We don't have to call our function f every
        time; create a function called times-ten that should take a parameter x and
        return x * 10. Once you've created the function, run times-ten(50).
      Calc Define Funcs 4_instruction: |
        Write a function called half that takes a
        number x and returns half that number. Once you've written the function,
        use it to calculate half(21)
      Calc Define Funcs 5 - multiply 1_instruction: |
        Oh no! We lost our multiply
        block! We'll have to create a function to multiply for us. To start off,
        write a function "f" that takes a parameter "x" and returns x*5. Test
        your function using f(3).
      Calc Design Recipe 1_instruction: |
        Let's use the Design Recipe to create a
        function called cube - this function should take in a Number and return that
        number to the power of 3. Make sure to write two example cases! When you're
        done, use your new function to calculate cube(7).
      Calc Design Recipe 2_instruction: "Your school is holding a bake sale, and\nyou
        need to track the cost of making each cookie, the money paid, and the\ntotal
        profit. Cookies cost $0.25 each to make, and sell for $1.50/cookie.\r\nWrite\nthe
        function cost, which takes in the number of cookies you intend to sell,\nand
        returns the cost of making those cookies."
      Calc Design Recipe 3_instruction: |
        Write the function sales which takes in
        the number of cookies sold, and produces the amount of money customers spent
        to buy those cookies (each cookie is sold at $1.50).
      Calc Design Recipe 4_instruction: |
        Using the two functions we just wrote, write
        the function profit, which takes in the number of cookies you sold, and gives
        you back the total profit you make from selling your cookies, accounting for
        the cost of baking them.
      Calc Free Play_instruction: |
        Free Play: Write functions and algorithms of your
        own design!
      Calc Rocket 1 (copy 1)_instruction: "In the last puzzle you wrote a contract\nfor
        the function \"rocket-height\" that states it has a range of Number, domain\nof
        Number, and should return the height of the rocket traveling at 15 m/s\nafter
        a given number of seconds. Let's write an example case now for the\nheight
        of the rocket at 3 seconds.\r\n\r\n\r\n\r\n  \r\n\r\n"
      Calc Rocket 1_instruction: |
        In the last puzzle you wrote a contract for the
        function rocket-height that states it has a range of Number, domain of Number,
        and should return the height of the rocket traveling at 15 m/s after a given
        number of seconds. Let's write an example case now for the height of the
        rocket at 3 seconds.
      Calc Rocket 2_instruction: |
        Great, let's do one more example before writing
        the function - what should the rocket height be after 30 seconds?
      Calc Vars 1.1_instruction: |
        Here we've set the age variable to 17 years. Can
        you write an expression that calculates age in days?
      Calc Vars 1_instruction: |
        Variables allow us to name values so that we can
        easily refer to them repeatedly throughout our programs. Here's a variable
        called age. Set its value to your age and click run.
      Calc Vars 2 (copy 1)_instruction: |
        Here we've set the "age" variable to
        17 - can you write an expression that calculates "age" in months?
      Calc Vars 2.1_instruction: |
        Here's a new variable called age-in-months. Use
        the variable age to set age-in-months.
      Calc Vars 2_instruction: |
        Can you write an expression that calculates age in
        months?
      Calc Vars 3 (copy 1)_instruction: |
        Can you add to this code so that it calculates
        how many hours there are in "age" years?
      Calc Vars 3_instruction: |
        Can you add to this code so that it uses the "age"
        variable to calculate age in hours?
      Calc Vars 4_instruction: |
        We can also set variables by using other variables.
        Let's say you have a brother who is two years younger than you - can you
        set a new variable "brother-age" using your "age" variable?
      Code Studio Puzzle Challenge 1 - Artist_instruction: "Draw the line. It is\n200
        pixels long. \n"
      Code Studio Puzzle Challenge 1 Artist1_instruction: "Draw the line. It is 200\npixels
        long. \n"
      Code Studio Puzzle Challenge 10 - Bee (copy 1)_instruction: |
        Move the Bee to
        the flower and get all of the nectar.
      Code Studio Puzzle Challenge 10 - Bee_instruction: |
        Move the Bee to the flower
        and get all of the nectar.
      Code Studio Puzzle Challenge 10b - Bee_instruction: |
        Move the Bee to the flowers
        and get all of the nectar at each.
      Code Studio Puzzle Challenge 11 - Artist_instruction: |
        Draw this line by using
        the variable "length". Each line segment is 75 pixels long.
      Code Studio Puzzle Challenge 11b - Artist_instruction: |
        Draw a square by using
        the variable length provided.
      Code Studio Puzzle Challenge 12 - Artist_instruction: |
        The code provided draws
        one triangle. Add to it to draw triangles in a hexagon pattern.
      Code Studio Puzzle Challenge 12a - Artist_instruction: |
        The code provided draws
        one triangle. Add to it to draw triangles in a hexagon pattern.
      Code Studio Puzzle Challenge 13 - Artist_instruction: "This is just like a\n\"for\"
        loop. Complete the code to draw six lines that grow from 50, 60, 70,\n80,
        90, to 100 pixels long. \n"
      Code Studio Puzzle Challenge 14 - Artist_instruction: "This is just like a\n\"for\"
        loop. Complete the loop to draw 4 squares that grow from 80, 100,\n120, to
        140 pixels. \n"
      Code Studio Puzzle Challenge 2 - Artist_instruction: |
        Now add a turn and another
        line. The lines are 200 pixels long.
      Code Studio Puzzle Challenge 3 - Artist_instruction: |
        Draw the square. Each
        side is 100 pixels long.
      Code Studio Puzzle Challenge 4 - Artist_instruction: |
        Draw the octagon. Each
        side is 100 pixels long.
      Code Studio Puzzle Challenge 5 - Bee (copy 1)_instruction: |
        Move the Bee to
        the flower and get the nectar.
      Code Studio Puzzle Challenge 5 - Bee_instruction: |
        Flowers contain a specific
        amount of nectar. Move the Bee to the flower and collect nectar with the get
        nectar block.
      Code Studio Puzzle Challenge 6 - Bee_instruction: |
        Honeycombs can hold a specific
        amount of honey. Get the nectar from the flower and make some honey.
      Code Studio Puzzle Challenge 7 - Bee_instruction: |
        Move the Bee to the flower
        and get the nectar.
      Code Studio Puzzle Challenge 8 - Bee_instruction: |
        The cloud could be hiding
        a flower or a honeycomb. Only get nectar from flowers. Only make honey at
        honeycombs.
      Code Studio Puzzle Challenge 9 - Bee_instruction: |
        The cloud could be hiding
        a flower or a honeycomb. Only get nectar from flowers. Only make honey at
        honeycombs.
      Code Studio Puzzle Challenge Artist Screencast (copy 1)_instruction: "Draw\nthe
        line. Each segment is 100 pixels long. \n"
      Code Studio Puzzle Challenge Artist Screencast 2_instruction: "Complete the\ncode
        to draw the line. Each segment is 100 pixels long. \n"
      Code Studio Puzzle Challenge Artist Screencast_instruction: "Draw the line.\nEach
        segment is 100 pixels long. \n"
      Code Studio Puzzle Challenge Bee Screencast_instruction: |
        Move the Bee to the
        flowers and get all of the nectar.
      Code Studio Puzzle Challenge Square - Artist_instruction: |
        Draw a square by
        using the variable length provided.
      Code Studio Puzzle Challenge Var - Artist_instruction: |
        Draw a line by using
        a variable "length" set to 180.
      Course 2 Bee Loops 1_instruction: "Hi, I'm a bee. Can you help me collect\nthe
        nectar from these flowers? \n"
      Course 2 Bee Loops 13_instruction: |
        Assessment: Use the repeat block to collect
        all of the nectar.
      Course 2 Bee Loops 2_instruction: |
        Can you do the same task more easily with
        a loop?
      Course 2 Bee Loops 3_instruction: |
        Now use the new repeat block to collect
        all of the nectar and make all of the honey.
      Course 2 Bee Loops 3__instruction: |
        Can you use a loop to collect all that
        nectar?
      Course 2 Bee Loops 4_instruction: |
        What happens if you loop this sequence 3
        times? Don't forget to make the honey at the end!
      Course 2 Maze Loops 1_instruction: Kan du få mig att grisen genom att använda
        5 block?
      Course 4 2_instruction: Biet vill bara ha nektar just nu. Kom ihåg att alla
        objekt inte är blommor så se till att du bara samlar nektar vid blommorna.
      Course 4 Artist 1_instruction: 'Hjälp mig att rita en ruta. (Varje linje är
        200 pixlar lång) '
      Course 4 Artist 10_instruction: "Tryck här för att se tipsen igen!\r\n\r\nHär\när
        koden för en intressant form. Vad händer när du upprepar den flera gånger
        och vrider den varje gång? Notera att svängarna i denna form adderas till
        420 grader, vilket betyder att när din artist har ritat färdigt är den vänd
        i en annan riktning än den hade när du startade. Den nya riktningen är exakt
        60 grader åt höger jämfört med när du började."
      Course 4 Artist 11_instruction: Nu till en utmaning!  Här är en design som endast
        använder block som du redan har sett.  Kan du lista ut hur du kan återskapa
        den?  Prova. Du förväntas inte få perfekt resultat första gången.  Vill du
        se fler tips?  Klicka här!
      Course 4 Artist 12_instruction: "Vill du få en andra titt på inspirationsdesignen
        eller tips?  Klicka här! \r \r  Skapa annars en egen design!"
      Course 4 Artist 13_instruction: Spelar fortfarande?  Här är en tom duk där du
        kan designa vad du vill!
      Course 4 Artist 2_instruction: Kan du upprepa den här koden för att rita den
        grå kvadraten?
      Course 4 Artist 20_instruction: Spelar fortfarande?  Här är en tom duk där du
        kan skapa vad du vill!
      Course 4 Artist 3_instruction: Försök att räkna ut vad som händer om du kör
        den här koden (eller trycker på "Kör" för att testa den). Upprepa den sedan
        tillräckligt många gånger för att slutföra bilden.
      Course 4 Artist 4_instruction: Hur många grader är det i en cirkel?  Ange i
        blocket "upprepa" det numret för att skapa en cirkel med färger.
      Course 4 Artist 5_instruction: 'Rita den andra hälften av denna design så att
        den blir symmetrisk. Trianglarna är liksidiga och 50 pixlar långa. Tips: Du
        kan behöva köra koden flera gånger för att lista ut vad för block som måste
        läggas till.'
      Course 4 Artist 6_instruction: 'Slutför koden för att rita dessa trianglar.
        Tips: Det finns 3 trianglar inom 360 graders rotation... hur många gånger
        går 3 i 360?'
      Course 4 Artist 7_instruction: 'Sätt nu in denna slinga inuti en annan slinga
        för att rita 10 trianglar. Detta kallas en nästlad slinga. Tips: Alla 10 trianglar
        slutför en 360 graders rotation.  '
      Course 4 Artist 8_instruction: Rita denna sol genom att upprepa hela detta kodblock
        flera gånger.
      Course 4 Artist 8a_instruction: "Kommer du ihåg denna form? Nu kommer vi låta
        dig bygga den utan att ge dig någon hjälp på traven!\r\nTips: Det finns 3
        trianglar inom 360 graders rotation...hur många gånger går 3 i 360?"
      Course 4 Artist 9_instruction: 'Upprepa denna design 10 gånger och se till att
        vrida mellan varje form som ritas. Här är en ledtråd hur mycket du ska måste
        vrida: Vad är 360 dividerat med 10?'
      Course 4 Artist Binary 1_instruction: "Här är en funktion som tar en binär sträng
        med 1 och 0 för att instruera artisten att följa dem från vänster till höger
        och uppifrån och ned. Artisten kommer att fylla i kvadraterna när den ser
        en 1:a och ignorera kvadraten när den ser en 0:a.\r\n\r\nKör koden för att
        se hur artisten använder binärkoden för att rita ett mönster."
      Course 4 Artist Binary 1a_instruction: "Här är en funktion som tar en binär
        sträng med 1 och 0 för att instruera artisten att följa dem från vänster till
        höger och uppifrån och ned. Artisten kommer att fylla i kvadraterna när den
        ser en 1:a och ignorera kvadraten när den ser en 0:a.\r\n\r\nKör koden för
        att se hur artisten använder binärkoden för att rita ett mönster."
      Course 4 Artist Binary 2_instruction: Vilken av dessa binärsträngar kan du upprepa
        8 gånger för att rita denna bild?
      Course 4 Artist Binary 3_instruction: Kan du rita detta mönster genom att upprepa
        en tresiffrig binär sträng?
      Course 4 Artist Binary 4_instruction: Varje binärsträng representerar en rad
        i denna bild. Kan du arrangera om dem så att ett glatt ansikte ritas istället
        för ett ledset?
      Course 4 Artist Binary 5_instruction: Vilken 6-siffriga binära sträng upprepad
        11 gånger kommer att rita denna bild?
      Course 4 Artist Binary 6_instruction: Vilken är den kortaste binära stäng som
        du kan upprepa för att rita denna bild?
      Course 4 Artist Binary 7_instruction: Slutför denna bild.
      Course 4 Artist Binary Free Play 2_instruction: 'Fri lek: Här är en tom duk
        du kan rita på. Ha så roligt!'
      Course 4 Artist Binary Free Play 2a_instruction: "Här är en större duk du kan
        rita på 16 x 16 pixlar!\r\n\r\nSe vad som händer när vi börjar bli kreativa
        med bitar?"
      Course 4 Artist Binary Free Play 2b_instruction: Klicka här för att se ledtrådar.
      Course 4 Artist Binary Free Play_instruction: 'Fri lek: Rita vad som helst med
        hjälp av binär kod!'
      Course 4 Artist Binary pre1_instruction: "Binärt är ett sätt att representera
        information med hjälp av endast två alternativ.  Här kommer vi att använda
        alternativen \"av\" (företrädd av siffran 0) och \"på\" (företrädd av nummer
        1).  \r \r vi har försett dig med ett rutnät av \"pixlar\" som du kan gå igenom
        och göra mönster genom att aktivera bara vissa rutor.  Kan du få konstnären
        att rita \"01010101\" i binärt i första raden?"
      Course 4 Artist Binary ryan_instruction: "Binärt är ett sätt att representera
        information med hjälp av endast två alternativ.  Här kommer vi att använda
        alternativen \"av\" (företrädd av siffran 0) och \"på\" (företrädd av nummer
        1).  \r \r vi har försett dig med ett rutnät av \"pixlar\" som du kan gå igenom
        och göra mönster genom att aktivera bara vissa rutor.  Kan du få konstnären
        att rita \"01010101\" i binärt i första raden?"
      Course 4 Artist For  Functions 10_instruction: Låt oss göra det lite svårare,
        kan du rita en stjärnform med funktionen "Rita en fyrkantslinje"? Lycka till!
      Course 4 Artist For  Functions 11_instruction: Låt oss göra det lite svårare,
        kan du rita en stjärnform med funktionen "Rita en fyrkantslinje"? Lycka till!
      Course 4 Artist For Loops 1_instruction: 'Rita denna triangel som är 50 pixlar
        bred. Tips: Använd ett upprepa block.'
      Course 4 Artist For Loops 10_instruction: Fri lektid! Ha kul och rita vad du
        vill med de block som du har lärt dig hur man använder
      Course 4 Artist For Loops 11_instruction: 'Tänk tillbaka till ett tidigare steg
        när vi använde en variabel för att styra antalet sidor i en form? Vi kommer
        att göra samma sak med variabeln "räknare" nu. Detta mönster börjar med en
        triangel och lägger till en sida i taget tills det drar en decagon (10 sidor).
        Varje sida ska vara 100 bildpunkter lång. Tips: 360 dividerat med antalet
        sidor hos en form är antalet grader du måste svänga.'
      Course 4 Artist For Loops 11a_instruction: "Låt oss sätta ihop allt!  Använd
        dina kunskaper om \"för loopar\" och \"räknare\", skapa denna ritning där
        varje form har två sidor mer än den förra.  Se till att varje sida är 10 gånger
        så lång som antalet sidor i polygonen. \r \r mycket lite av koden har getts
        till dig."
      Course 4 Artist For Loops 12_instruction: 'Det såg riktigt bra ut, men nu vill
        jag rita varje form bredvid den sista. Denna gång är varje sida 20 pixlar.
        Använd ett hoppa - block för att hoppa framåt 40 pixlar efter varje form. '
      Course 4 Artist For Loops 13_instruction: Hmmm, dessa former blir större varje
        gång! Löste vi inte det problemet med variabler? Hur kan vi använda räknar
        - variabeln för att göra sidorna mindre eftersom det finns fler av dem? Istället
        för att flytta framåt ett angivet antal steg, prova att flytta framåt med
        (100 / räknare) pixlar.
      Course 4 Artist For Loops 14_instruction: Om du vrider en liten bit mer eller
        mindre än du normalt skulle för en form, skapar det en snygg effekt. Prova
        att använda något av koden från den sista nivån, men vrid 89 grader för att
        skapa denna vridna fyrkants-spiral.
      Course 4 Artist For Loops 15_instruction: 'Fri lek: Försök att göra några egna
        teckningar med "för loopar". Vi har lagt några användbara variabler också.'
      Course 4 Artist For Loops 2_instruction: 'Jag har lagt koden för att rita en
        triangel inuti en for-loop som räknar från 50 till 100 med 10 i taget.  Obs:
        Kontrollera  koden innan du trycker på "Kör".'
      Course 4 Artist For Loops 3_instruction: |
        Använda sista pusslet som referens för att slutföra det här.  Den minsta triangeln har 20 pixlar långa sidor, den största har 200 pixlars sidor, och varje triangel är 20 pixlar större än förra.
      Course 4 Artist For Loops 4_instruction: 'Hur skulle du ändra vad du har lärt
        dig att rita dessa rutor? De börjar med en som är 15 pixlar lång, den största
        är 300 pixlar lång och varje ruta är 15 pixlar större än förra. '
      Course 4 Artist For Loops 5_instruction: 'Bra jobb med sista pusslet! Låt oss
        använda "räknar" variabel- blocket igen för att rita denna häftiga bild. '
      Course 4 Artist For Loops 6_instruction: Fri lek! Prova att använda en for-loop
        för att rita ett växande mönster av former av din egen design.
      Course 4 Artist For Loops 6a_instruction: Gör tre små ändringar i koden från
        den sista nivån för att få den här!
      Course 4 Artist For Loops 7_instruction: Vad händer om du tar bort den "Upprepa
        3" från denna algoritm, men behåller "Flytta" och "vända" blocken i for-loopen?
        I denna spiral- triangel är varje sida 20 pixlar längre än förra.
      Course 4 Artist For Loops 8_instruction: "En enda liten förändring av koden
        från den sista bilden kan skapa det här mönstret. Kan du lista ut vilken förändringen
        är? \r \r Ledtråd: du måste ta bort något!"
      Course 4 Artist For Loops 8a_instruction: Bara en enda liten förändring av koden
        från den sista bilden kan skapa denna bild. Kan du lista ut vilken förändringen
        är?
      Course 4 Artist For Loops 9_instruction: Kan du göra en spiral? Flytta framåt
        från 1 till 75 pixels, öka med 1 pixel varje gång.
      Course 4 Artist For Loops Challenge_instruction: "Kan du lista ut hur du kan
        använda alla de saker du har lärt dig för att skapa denna bild? \r \r Behöver
        du en ledtråd? Klicka här."
      Course 4 Artist For Loops inspire_instruction: "Fri lek - inspiration: Du har
        nu lärt dig allt du behöver veta för att göra ett mönster som detta! Om denna
        bild inspirerar dig, försök att göra något liknande. Annars skapa något alldeles
        eget. \r \r Behöver du en ledtråd? Klicka här."
      Course 4 Artist Functions 1_instruction: Kan du rita en kvadrat, som är 100
        bildpunkter i längd, med en slinga?
      Course 4 Artist Functions 10_instruction: Vilket block behöver du lägga till
        för att få triangeln att sitta på toppen av rutan?
      Course 4 Artist Functions 11_instruction: Kolla in denna kod som ritar en kub
        - kan du flytta in den i en funktion som kallas "Rita en Kub"
      Course 4 Artist Functions 12.1_instruction: Låt oss skapa en funktion som kallas
        "Rita en Åttahörning 20" som ritar en åttahörning där varje sida är 20 pixlar
        lång.
      Course 4 Artist Functions 12_instruction: Loopa en fyrkants-funktion för att
        rita en linje
      Course 4 Artist Functions 13.1_instruction: "Låt oss nu göra en funktion kallad
        \"hoppa till övre högra\" som flyttar konstnären till övre högra delen av
        oktagonen som du just ritade så att vi kan avsluta detta mönster. \r \r tips:
        För att komma till det övre högra hörnet, prova att hoppa i ett mönster som
        gör 3/8 av oktagonen."
      Course 4 Artist Functions 13_instruction: Kolla, vi har en ny funktion som kallas
        "Rita en linje av fyrkanter". Välkommen att ta en titt inuti funktions blocket
        för att se hur vi byggde den. Klicka på "Kör" när du är redo för nästa pussel.
      Course 4 Artist Functions 14.1_instruction: Nu ska vi skapa en funktion som
        kallas "hoppa till övre högra" som flyttar konstnären till övre högra delen
        av oktagonen som du just ritade, så att vi kan avsluta detta mönster.
      Course 4 Artist Functions 14_instruction: Du klarar dig bra! Låt oss använda
        din nya "Rita en linje av kvadrater" funktion för att rita en kvadratisk form.
        Kom ihåg att varje ruta är 40 pixlar lång.
      Course 4 Artist Functions 15_instruction: 'Låt oss göra det lite svårare, kan
        du rita en stjärnform med funktionen "Rita en linje av kvadrater"? Lycka till!
        Tips: du kan behöva vända 144 grader'
      Course 4 Artist Functions 2_instruction: 'Kan du rita 3 rutor 20 pixlar från
        varandra? Tips: varje ruta är 100 bildpunkter i storlek'
      Course 4 Artist Functions 3_instruction: "Kan du rita denna bild genom att använda
        \"rita en fyrkant\" -blocket? Tips: varje ruta är 120 pixlar isär. \r\n"
      Course 4 Artist Functions 4_instruction: 'Är du redo att skapa ditt eget "funktions-
        block"? Klicka på "Funktioner" blocket i verktygslådan, ändra namnet till
        "Rita en triangel". Skapa sedan en triangel så som du har gjort förut med
        händelse- och loopar- block. Klicka på Spara och stäng i det övre högra hörnet.
        Tips: Skapa en triangel som är 100 bildpunkter i längd. Lycka till!'
      Course 4 Artist Functions 5 OLD_instruction: Låt oss försöka att använda våra
        två funktioner för att rita ett hus - vad behöver fixas i denna kod för att
        rita huset ordentligt?
      Course 4 Artist Functions 5_instruction: "Kan du rita denna bild genom att använda
        \"rita en fyrkant\" -blocket? Tips: varje ruta är 120 pixlar isär. \r\n"
      Course 4 Artist Functions 6_instruction: Vilket block behöver du lägga till
        för att få triangeln att sitta på toppen av rutan?
      Course 4 Artist Functions 7_instruction: Kan du rita en linje av rutor med en
        fyrkants-funktion? Varje ruta är 40 pixel i längd.
      Course 4 Artist Functions 8_instruction: 'Får du kläm på hur man använder funktionsblock?
        Låt oss ändra denna ruta så att den är 200 pixlar i storlek. Tips: Klicka
        på "Redigera" för att ändra storlek på "Rita en fyrkant" funktionens editör.
        Kom ihåg att klicka på "Spara och Stäng" att komma ur funktions-editören. '
      Course 4 Artist Functions 9_instruction: Vi har gett dig det mesta av koden
        för att skapa en funktion. Men det verkar vara något som saknas. Kan du göra
        det här funktions-blocket komplett?
      Course 4 Artist Functions challenge_instruction: Klicka här för att se tips
        igen.
      Course 4 Artist Functions Inspiration_instruction: Klicka här för att se tips
        igen.
      Course 4 Artist Functions inspire_instruction: Klicka här för att se inspirations-bilden
        igen.
      Course 4 Artist Inspire_instruction: "Vill du ha en andra titt på design-inspirationerna
        eller tipsen? Tryck här!\r\n\r\nAnnars kan du skapa en egen design!"
      Course 4 Artist Params 1_instruction: Låt oss redigera en funktion som ritar
        en kvadrat med 50 pixlar långa sidor
      Course 4 Artist Params 10_instruction: 'Du kan anropa funktioner från inuti
        andra funktioner! Med din "form" funktion som bas, skapa 3 hus former varav
        varje är 20 pixlar större än den förra. Den första ska vara 50 pixlar i längd.
        Att använda en ''räknare'' loop kan vara till hjälp. '
      Course 4 Artist Params 11_instruction: |
        How about a function called "pinwheel"
        that takes three parameters - "sides," "length" and "repeat." You can
        calculate how much to turn after each shape using the same math you used to
        figure out the turns for a shape of "sides". Can you recreate this picture?
        Here's a tip each shape is 100 pixel's in length.
      Course 4 Artist Params 12_instruction: Använd "Lyckohjul" funktionen för att
        rita var och en av dessa former. Sidlängden av varje bild är 50.
      Course 4 Artist Params 13_instruction: 'Frispel: Här är de funktioner som du
        har skrivit, och några fler till dig att spela med. Rita något tjusigt!'
      Course 4 Artist Params 2_instruction: |
        That triangle function would be a whole
        lot more useful if it could draw triangles of different sizes. I've added
        a parameter for line length, but it doesn't do anything yet. Can you update
        the function so it uses the "length" parameter when it draws each side?
        The triangle sizes are 150 pixels, 75 pixels and 25 pixels.
      Course 4 Artist Params 3_instruction: 'Fantastiskt! Kan du rita var och en av
        dessa trianglar med den nya funktionen? Den första är 25 pixlar lång, andra
        är 50 och tredje är 75. '
      Course 4 Artist Params 4_instruction: Kan du lägga till en ny funktion som kallas
        ruta? Den bör också ha en längdparameter, precis som triangeln. Denna gång
        ritar du 3 rutor 25, 50 och 75 bildpunkter i längd, 100 pixlar isär.
      Course 4 Artist Params 5_instruction: |
        Använd båda dina nya funktioner för att rita denna bild. För att underlätta använder du en loop med en "räknare" parameter.
      Course 4 Artist Params 6_instruction: "Låt oss redigera den här 'rita en form'
        funktionen.\nden har redan en längd-parameter. Kom ihåg att vinkeln för att
        vrida en given form är\n360 grader delat med antalet sidor den har. Tips:
        längden av triangeln är 100 pixlar, av\nhexagonen är 25 pixlar och rutan är
        50 pixlar. \n"
      Course 4 Artist Params 7_instruction: 'Kan du rita dessa former genom att fylla
        i "???" Rutan och triangeln är 100 bildpunkter i storlek medan hexagonen är
        75 bildpunkter. '
      Course 4 Artist Params 8_instruction: |
        Kan du lista ut hur man ritar denna form? Här är en ledtråd: skapa en ny funktion med 6 sidor som kallas hexagon.
      Course 4 Artist Params 9_instruction: |
        Minns du när vi använde 'räknare' loppen men tog bort en loop inuti? Nu ska vi ha lite roligt
        och använda en funktion med 'sida' och 'längd' parametrar. Kan du skapa dessa former? Rut-räknaren ska vara 5/100/5, triangel-räknaren ska vara 10/100/10 och hexagonen 2/100/2.
      Course 4 Artist Var 9_instruction: |
        Här är algoritmen för att rita en triangel.
        Gör om den så att den använder sid-variabler istället.
        Ersätt nummer 3 med sid-variabeln. Tips: kom ihåg att använda 'sätt sidorna till' block.
      Course 4 Artist Vars 1_instruction: Kan du hjälpa mig göra en liksidig triangel?
        Varje sida måste vara 100 pixlar lång.
      Course 4 Artist Vars 10_instruction: Här är en algprim som ritar en triangel
        av små trianglar. Kan du ändra den så att den använder sid-variabler för att
        rita varje triangel? Titta igenom koden och varje gång du ser siffran 3 ersätter
        du den med din sid-variabel. Kom ihåg att använda 'sätt sida till' block.
      Course 4 Artist Vars 11_instruction: Här är mer komplicerat kod som använder
        samma begrepp som från det senaste pusslet - vad bör du ställa in variabeln
        "sidor" till för att rita denna bild gjord av rutor?
      Course 4 Artist Vars 12_instruction: Låt oss sätta sid-variabeln till 5. Ju
        fler sidor vi lägger till i denna algoritm, distos större blir hela mönstret.
        Notera att där finns en annan variabel som heter 'längd'. Vi kan använda den
        varhelst vi måste gå 'framåt'. Sätt 'längd-variabeln' till 75 för den här
        formen.
      Course 4 Artist Vars 13_instruction: "När en form har massor av sidor, måste
        varje sida vara kortare om du vill att hela mönstret att passa på skärmen.
        \r låt oss återskapa algoritmen för detta fantastiska mönster, men istället
        för att manuellt ställa in variabeln \"längd\", låt oss använda ett matematik
        block med variabeln \"sidor\" inuti för att se till att varje form passar
        korrekt. Omkretsen för varje polygon är 300 pixlar. \r behöver några tips?
        \ Klicka här."
      Course 4 Artist Vars 14_instruction: "Fritt spel: prova detta! Nu är din algoritm
        inkapslad inuti ännu en loop. experimentera med att ändra värdena på dina
        två variabler för att rita roliga mönster. \r\n\r\nLek med färger för att
        få ännu mer effekt! Använd slumpmässiga färger inuti loopar för att se hur
        det förändrar din design."
      Course 4 Artist Vars 2_instruction: Istället för att använda "flytta fram med
        150", refererar nu 'flytta fram' blocket till en variabel som kallas "längd".
        Kan du ställa in "längd" till 150 för att rita denna nya triangel?
      Course 4 Artist Vars 3_instruction: 'Här är en slinga som ritar en kvadrat,
        men något saknas. Kan du fixa så att den använder variabeln "längd" för att
        räkna ut hur lång varje sida ska vara? '
      Course 4 Artist Vars 4_instruction: Nu vill jag göra en rektangel som är dubbelt
        så lång som den är bred. Vi har en variabel som kallas "bredd" som måste anges
        till 100. Kan du använda matematik- block för att göra koden komplett?
      Course 4 Artist Vars 5_instruction: Använd variabeln "sidor" för att kontrollera
        hur många gånger denna slinga får köra.
      Course 4 Artist Vars 6_instruction: "Här är en bit som kan rita vilken regelbunden
        polygon som helst. Där finns en ny variabel som kallas 'sidor' och som är
        satt till 4. Kan du använda variabeln sidor (tillsammans med matematik blocket)
        för att vända rätt antal ggr oavsett hur många sidor det är i polygonen? \r
        \r Klicka härför att gå tillbaka till tipset!"
      Course 4 Artist Vars 7_instruction: "Använd vad du lärt dig i det sista pusslet
        för att skapa denna hexagon med hjälp av \"sidor\" variabeln. \r \r Se hur
        du kan ändra endast ett värde för att rita en triangel, kvadrat, pentagon
        eller oktagon?"
      Course 4 Artist Vars 8_instruction: 'Fri lek: Experimentera med antalet sidor
        denna form har. Kan du kan ändra algoritmen så att storleken på formen förblir
        densamma, oavsett hur många sidor den har? Tips: Om du delar din startlängd
        med antalet sidor, blir längden på varje sida kortare allteftersom antalet
        sidor blir högre.'
      Course 4 Artist Vars 9_instruction: Ändra denna algoritm så att den använder
        variabeln "sidor" istället för ett fast antal för att rita en triangel. Glöm
        inte att använda "ange sidorna till" blocket.
      Course 4 Bee 1_instruction: 'Biet kan inte säga vad som finns under molnet!
        Använd blocket "om" för att kontrollera om det finns en blomma under molnet,
        samla sedan bara nektar från det om det är en blomma. '
      Course 4 Bee 2_instruction: Använd "om-annars" blocket för att kontrollera varje
        objekt för att se om det är en blomma eller en honungskaka. Om det är en blomma,
        samla nektar... annars gör honung!
      Course 4 Bee 3_instruction: Det okända objektet är antingen en blomma eller
        en honungskaka. Denna gång använder du om/annars block för att samla nektar
        om det är en blomma, annars gör honung (eftersom det då skulle vara en honungskaka).
      Course 4 Bee 4_instruction: Denna lila blomma kan ha antingen 3, 2 eller 1 nektar.
        Här används ett' om/annars' block kombinerat med ett annat' om/annars' block
        för att skapa en "om/annars-om/annars"-sats. Komplettera lösningen för att
        samla den okända mängden nektar.
      Course 4 Bee 5_instruction: Denna lila blomma kan ha antingen 3, 2 eller 1 nektar.
        Lägg till ett om-annars block för att skapa ett 'om, annars-om, annars' block.
        Komplettera lösningen för att samla den okända mängden nektar.
      Course 4 Bee 6_instruction: Denna lila blomma kan ha antingen 3, 2 eller 1 nektar.
        Skapa ett om, annars-om, annars block att samla den okända mängden nektar.
      Course 4 Bee 7_instruction: Använd allt du lärt dig hittills för att samla all
        nektar. Den lila blomman kan ha antingen 3, 2 eller 1 nektar.
      Course 4 Bee For Loops 1_instruction: Använd en loop (upprepa) för att samla
        nektar från varje blomma.
      Course 4 Bee For Loops 10_instruction: Om din loop räknar ner, dras ökningen
        från din variabel i varje loop. Vad bör din ökning vara för att samla 15,
        sen 12, sedan 9, 6, 3 nektar?
      Course 4 Bee For Loops 11_instruction: Vad är fel med denna loop? Se om du kan
        fixa det och göra så att biet samlar alla nektar.
      Course 4 Bee For Loops 2_instruction: Här är en ny typ av loop, kallas "för"
        loop. Den här sortens loop kommer att räkna från 1 till 5 med ett i taget
        och köra innehållet i loopen varje gång den räknar. Hjälp Bee att få nektarn.
      Course 4 Bee For Loops 3_instruction: Du kan lösa detta problem med hjälp av
        en för-loop som räknar från 1 till 3 med ett i taget. Kom igång att samla
        nektar!
      Course 4 Bee For Loops 4_instruction: Samla alla nektar från blommorna. Finns
        det ett enklare sätt att göra detta...
      Course 4 Bee For Loops 5_instruction: 'Ah, för- loppen gör detta mycket lättare!
        Med variabeln "räknare" från för- loopen loopar "få nektar" blocket samma
        antal gånger som loppen. Usch! Det är en massa loopar. All kod som du behöver
        är där, ta en titt på hur den är hopsatt och klicka sedan på kör och se hur
        det fungerar. '
      Course 4 Bee For Loops 6_instruction: Du kan också använda en "för loop" för
        att räkna ner. Försök samla denna nektar genom att räkna ner från 5 till 1,
        1 i taget.
      Course 4 Bee For Loops 7_instruction: Använd din för-loop "räknare" variabel
        för att styra hur långt du vill flytta horisontellt.
      Course 4 Bee For Loops 8_instruction: Kan du använda variabeln loop för att
        styra rörelse och insamling av nektar?
      Course 4 Bee For Loops 9_instruction: Det sista numret i din loop kallas "ökning",
        och varje gång loopen körs ändras 'räknare'variabeln med 'ökningen'. Försök
        samla dessa blommor med en ökning på 2.
      Course 4 Bee Loops 5 NEW_instruction: Här är tre blommor. Kan du hitta mönstret
        för instruktionerna du måste upprepa 3 gånger för att samla nektar med minsta
        antalet block?
      Course 4 Bee Loops 5a NEW_instruction: Använd loopar för att hjälpa biet samla
        all nektar på väg till honungskakan med så få block som möjligt.  När du kommer
        dit, glöm inte att göra honung!
      Course 4 Bee Params 1_instruction: Använd funktionen "få 3 nektar" som vänder
        och flyttar för att samla nektar och sen återgår till den ursprungliga platsen.
        Skriv en sekvens för att samla all nektar med "få 3 nektar"
      Course 4 Bee Params 2_instruction: Ändra funktionen "få 3 nektar" så det får
        mig att vända höger istället för vänster till blommorna.
      Course 4 Bee Params 3 (copy 1)_instruction: Nu finns det blommor på båda sidor!
        Kanske kan du använda en parameter så att samma funktion fungerar för blommor
        på vardera sidan. Jag har lagt en parameter som kallas "riktning" till funktionen.
        Om parametern "riktning" är lika med 0 bör jag sväng vänster, om det är 1
        jag ska vända höger.
      Course 4 Bee Params 3_instruction: 'Nu finns det blommor på båda sidor! Vi har
        lagt till variabler kallas "vänster" och "höger" för dig att använda, och
        lagt till en parameter som kallas "riktning" för att "få 3 nektar". Redigera
        "få 3 nektar" så att biet vänder åt rätt håll när variablerna "vänster" eller
        "höger" skickas till funktionen.  '
      Course 4 Bee Params 4 (copy 1)_instruction: Försök för att samla alla blommor
        med din nya funktion. Kom ihåg, 0 = vänster och 1 = höger.
      Course 4 Bee Params 4 - Two WhenRun_instruction: Försök för att samla alla blommor
        med din nya funktion. Kom ihåg att använda vänster och höger variabler.
      Course 4 Bee Params 4 backup_instruction: Vore det inte trevligt om vi kunde
        samla all denna nektar med en funktion? Försök att lägga till en ny parameter
        i din funktion som kallas "nektar enheter" för att kontrollera mängden nektar
        att samla in. Du kommer antagligen att byta namn på funktionen också!
      Course 4 Bee Params 4_instruction: Försök för att samla nektar från alla blommor
        med din nya funktion. Kom ihåg att använda vänster och höger variabler.
      Course 4 Bee Params 5_instruction: Låt oss börja från grunden - kan du skapa
        en ny funktion som kallas "få 5 nektar" med en riktningsparameter?
      Course 4 Bee Params 6 (copy 1)_instruction: Försök för att samla all denna nektar
        med din nya funktion.
      Course 4 Bee Params 6_instruction: Vore det inte trevligt om vi kunde samla
        all denna nektar med en funktion? Försök att lägga till en ny parameter i
        din funktion som kallas "nektar enheter" för att kontrollera mängden nektar
        att samla in. Du kommer antagligen att byta namn på funktionen också!
      Course 4 Bee Params 7 (copy 1)_instruction: Försök för att samla all denna nektar
        med din nya funktion.
      Course 4 Bee Params 7_instruction: Försök för att samla all denna nektar med
        din nya funktion.
      Course 4 Bee Params 8 Clone 2_instruction: Oooh, nu finns honung för att ta
        itu med också! Hur kan du uppdatera din funktion att antingen få nektar eller
        göra honung.
      Course 4 Bee Params 8 clone 3_instruction: Oooh, nu finns honung för att ta
        itu med också! Hur kan du uppdatera din funktion att antingen få nektar eller
        göra honung.
      Course 4 Bee Params 8 Clone_instruction: Oooh, nu finns honung för att ta itu
        med också! Hur kan du uppdatera din funktion att antingen få nektar eller
        göra honung.
      Course 4 Bee Params 8 new_instruction: Oooh, nu finns honung att ta itu med
        också! Hur kan du uppdatera din funktion att antingen få nektar eller göra
        honung.
      Course 4 Bee Params 8_instruction: 'Utmaning: Nu finns honung att ta itu med
        också! Skriv om din funktion till att använda både antalet enheter av honung
        och antalet enheter av nektar.  Hur skulle du använda dessa antal för att
        bestämma vad du ska göra?'
      Course 4 Bee Params Ex_instruction: Försök för att samla all denna nektar med
        din nya funktion.
      Course 4 Binary 1_instruction: 'Här är en funktion som tar en binär sträng 1:
        or och 0: or och instruerar jordbrukaren att vända från vänster till höger,
        uppifrån och ned, och vända på rutorna där numret har en nolla. Kör den givna
        koden för att se hur bönderna använder binär för att rita en bild.'
      Course 4 Binary 2_instruction: 'Vad binär sträng kan du upprepa 8 gånger för
        att rita denna bild? Tips: siffran "1" fyller ett hål.'
      Course 4 Binary 3_instruction: Du kan rita detta mönster genom att loopa en
        enda binär sträng?
      Course 4 Binary 5 (copy 1)_instruction: Vilken binär sträng, upprepad 10 gånger,
        kommer att rita denna bild?
      Course 4 Binary 5_instruction: Vilken binär sträng, upprepad 10 gånger, kommer
        att rita denna bild?
      Course 4 Binary 6 (copy 1)_instruction: Vilken binär sträng, upprepad 10 gånger,
        kommer att rita denna bild?
      Course 4 Binary 6_instruction: Vilken binär sträng, upprepad 10 gånger, kommer
        att rita denna bild?
      Course 4 Binary 7_instruction: Vilken binär sträng, upprepad 10 gånger, kommer
        att rita denna bild?
      Course 4 Binary 8_instruction: Du kan slutföra det mesta av denna bild genom
        att loopa ett 5 bitars binärt nummer - då behöver du ett till 4 bitars nummer
        för att komma till nedre högra hörnet.
      Course 4 EC 1a_instruction: Inga regler. Inga ledtrådar. Bara utmaningen!
      Course 4 EC 1b_instruction: Inga regler. Inga ledtrådar. Bara utmaningen!
      Course 4 EC 2a_instruction: '** Extrem Utmaning: ** inga regler. Inga ledtrådar.
        Bara utmaningen!'
      Course 4 EC 2b_instruction: '** Extrem Utmaning: ** inga regler. Inga ledtrådar.
        Bara utmaningen!'
      Course 4 EC 2c_instruction: '** Extrem Utmaning: ** inga regler. Inga ledtrådar.
        Bara utmaningen!'
      Course 4 EC 3_instruction: 'Använd vad du lärt dig i tidigare nivåer för att
        rita en bild som denna. Obs: Koden blir enklare om du införlivar parametrar. '
      Course 4 EC 3a_instruction: 'Extrem Utmaning: ** inga regler. Inga ledtrådar.
        Bara utmaningen!'
      Course 4 Maze 1_instruction: Få arga fågeln till grisen!
      Course 4 Maze 2_instruction: Undvik TNT!
      Course 4 Maze 3_instruction: 'Programmera arga fågeln att gå till grisen. '
      Course 4 Maze 4_instruction: Prova blocket "Upprepa" för att använda färre block
        när du löser detta pussel...
      Course 4 Maze 5_instruction: Kan du lösa pusslet med så få block som möjligt?
      Course 4 Maze 6_instruction: Kan du lösa pusslet med så få block som möjligt?
      Course 4 Play Lab For Loops 2_instruction: Låt oss denna gång försöka räkna
        udda nummer från 1 till 100.
      Course 4 Play Lab Params 1_instruction: Här är en funktion som kallas "hoppa"
        och som gör att din huvudperson hoppar upp 100 pixlar. Använd funktionen hoppa
        för att samla alla flaggor.
      Course 4 Play Lab Params 10_instruction: "Vi har lagt till en sista funktion
        åt dig. \r \r Använd ett \"om-uttalande\" för att programmera ditt spel att
        anropa funktionen \"level_up\" först när \"player_score\" blir större än ett
        visst antal. \r \r T ex: \"player_score\" > 6\r \r Spela spelet, och spela
        förbi förbi nivå 4 för att komma till nästa pussel. "
      Course 4 Play Lab Params 2_instruction: "Nu har vi flaggor som är för höga för
        våra nuvarande hopp! Låt oss använda både \"upp\" och \"ner\" pilarna så att
        vi kan ha flera hopp höjder.  \r \r Vi måste lägga till en parameter i vår
        hoppa-funktion kallad \"höjd\".  Uppåtpilen bör göra så att hunden hoppar
        200 pixlar och nedåtpilen bör göra så att den hoppar 100 pixlar. \r \r Tips:
        Du måste klicka på \"Redigera\" på funktionen' hopp'a och uppdatera den så
        att den använder parametern \"höjd\"."
      Course 4 Play Lab Params 3_instruction: 'Vi har lagt en annan parameter till
        funktionen ''hoppa'' så att vi kan använda den med andra aktörer. Varje aktör
        representeras av ett nummer, med start från ett. Redigera funktionen "hoppa"
        så att den använder parametern "aktör" för att göra så att den rätta karaktären
        hoppar. '
      Course 4 Play Lab Params 4_instruction: Här är en funktion som kallas "patrol."
        Redigera den för att flytta Katt 400 pixlar upp och sedan ner 400 pixlar.
      Course 4 Play Lab Params 5_instruction: Redigera funktionen "patrol" till att
        lägga till en "aktör" parameter, så att vi kan kalla på den för var och en
        av aktörerna på skärmen. Kom ihåg att aktörerna motsvarar nummer 1, 2 och
        3.
      Course 4 Play Lab Params 6_instruction: Lägg till en annan parameter som kallas
        "hastighet" till "patrol" funktionen. Försök att hjälpa pingvinen att få båda
        flaggorna innan andra figurer får en genom att ange hastighet i den nya "hastighet"
        parametern.
      Course 4 Play Lab Params 7_instruction: "Låt oss ha lite kul! Titta på koden
        för att se om du kan lista ut vad varje block gör.  \r \r När du är klar,
        använd piltangenterna för att styra hunden och samla alla flaggor."
      Course 4 Play Lab Params 8_instruction: Använd en "när actor berör" block för
        att skicka hunden tillbaka till övre vänstra ENDAST om hunden rör vid någon
        av de andra actors.
      Course 4 Play Lab Params 9_instruction: "Här är vårt spel från ett tidigare
        skede, men det mesta av koden är dold. Det finns en ny funktion \"ge poäng.\"
        \r \r Redigera funktionen så att en \"poäng\" parameter läggs till variabeln
        \"spelar-poäng\". \r \r Variabeln \"spelar-poäng\" bör öka varje gång Hund
        taggar Katt med hjärtan, och minska varje gång Katt taggar Hund med hjärtan.
        \r \r Obs: När du är klar, klicka på \"Kör\" för att spela.  När hunden har
        fått 6 poäng, kommer du gå vidare till nästa pussel. "
      Course 4 Play Lab Vars 1_instruction: Denna gång du behöver inte skriva någon
        kod, tryck bara på "kör" för att spela spelet! I detta spel är du den hund
        som försöker samla in fler flaggor än katten. Använda nedåtpilen för att styra
        hunden. Tryck på "Avsluta" när du är klar.
      Course 4 Play Lab Vars 2_instruction: Loppet i det sista pusslet var inte särskilt
        rättvist! Ändra variabeln "dog_speed" så att du kan samla fler flaggor än
        Katt. Först att samla in 10 flaggor vinner!
      Course 4 Play Lab Vars 3_instruction: Här är en ny typ av spel! Använd vänster
        och höger pilarna för att flytta och uppåtpilen för att hoppa. Se om du kan
        samla in alla flaggor.
      Course 4 Play Lab Vars 4_instruction: Nu använder vi en variabel som kallas
        "höjd" för att kontrollera hur högt hunden kan hoppa. Uppdatera variabeln
        "höjd" så att hunden kan hoppa tillräckligt högt för att nå alla flaggor.
      Course 4 Play Lab Vars 5_instruction: 'Låt oss bygga ett spel! Först behöver
        vi ett poäng. Återskapa den kod som du såg i den sista nivån för att ställa
        in poängen till 10. '
      Course 4 Play Lab Vars 6 (copy 1)_instruction: Cool, nu har vi fått våra poäng
        variabel, men hur ska vi göra det användbart? Vad sägs om att lägga till i
        poäng variabeln varje gång du träffar fienden med ett eldklot? Använd händelsen
        "när actor 2 rör något" för att utlösa en uppdatering av din poäng när ditt
        eldklot träffade katten. Du kan öka poängen genom att ställa in poäng = poäng
        + 1. Få dina poäng upp till 10 (går en i taget!) för att klara nivån.
      Course 4 Play Lab Vars 6_instruction: "Använd högerpilen för att skjuta hjärtan.
        \r \r hur ska vi få poäng i vårt spel? Lägg till 1 i din \"poäng\" variabel
        varje gång Hund träffar Katt med ett hjärta. Använd händelsen \"när actor
        2 rör något\" för att utlösa en uppdatering av dina poäng. Du kan öka din
        variabel genom att ange \"poäng = poäng + 1.\" Få dina poäng upp till 10 (går
        en i taget!) för att klara nivån."
      Course 4 Play Lab Vars 7_instruction: Nice, låt oss nu bli säkra på att detta
        spel inte är alltför lätt att spela. Varje gång Hund (actor 1) blir träffad
        av gula hjärtan från Katt (actor 2), bör du förlora en poäng. Börja med 10
        poäng så det inte är så svårt. Låt dina poäng gå från 10 till 0 för att klara
        nivån.
      Course 4 Play Lab Vars 8 (copy 1)_instruction: Okej, en sista sak för detta
        spel - låt oss göra så att spelaren kan vinna (eller förlora). Använd en 'för
        alltid' slinga för att kontrollera värdet av poängen - om poängen är högre
        än 20, låt fienden försvinna. Om resultatet är mindre än 0, få spelaren att
        försvinna. Klicka på "Avsluta" när spelet fungerar som du vill att det ska.
      Course 4 Play Lab Vars 8_instruction: Låt oss göra detta spel så Hund kan vinna
        (eller förlora). Använd en' för alltid' slinga för att kontrollera värdet
        av poängen - om poängen är högre än 20, får fienden (katten) försvinna. Om
        poängen är mindre än 0, får spelaren (hunden) försvinna. Klicka på "Avsluta"
        när spelet fungerar som du vill att det ska.
      Course 4 Play Lab Vars 9_instruction: "Fri speltid! Här är alla variabler vi
        har lekt med så här långt, samt några fler om du vill ha dem. \r \r Notera
        att det nu finns så många block i vår verktygslåda att de måste organiseras!
        \ Här har vi satt varje bit i en lämplig kategori.  Ta dig tid att utforska
        allt som finns. När du är klar, gör ett spel eller en berättelse med repetitioner,
        variabler och händelser.  \r \r Tips: scrolla ner för att se alla kommandon
        på arbetsytan."
      Course 4 Play Lab Vars_instruction: Okej, en sista sak för detta spel - låt
        oss göra så att spelaren kan vinna (eller förlora). Använd en' för alltid'
        slinga för att kontrollera värdet av poängen - om värdet är större än 20,
        får fienden försvinna. Om poängen är mindre än 0, få spelaren att försvinna.
      Course 4 Play Labs For Loops 1_instruction: Låt oss låta hunden säga alla nummer
        från 1 till 100. Använd en för-loop och 'räknare' blocket för att säga nummer-variabeln
        varje gång loopen körs.
      Course 4 Play Labs For Loops 2_instruction: Låt oss denna gång försöka räkna
        udda nummer från 1 till 100.
      Course 4 Play Labs For Loops 3_instruction: Om vi räknra med större siffror,
        räknar vi ännu högre på samma tid. Prova att låta hunden räkna från 10 upp
        till 1000, 10 i taget.
      Course 4 Play Labs For Loops 4_instruction: Ändra ökning kan vara till hjälp,
        men vi räknar fortfarande linjärt (varje nummer är på samma avstånd från det
        förra) Vad händer om jag vill räkna exponentiellt? Utan att ändra inställningarna
        i denna 'för'- loop, kan du räkna 1, 4, 9, 16, 25... (räknare fyrkant)?
      Course 4 Play Labs For Loops 4a_instruction: "Låt oss nu blanda variablerna
        från etapp 7 tillsammans med din \"räknare\" variabel att låta magi hända.
        \  \r \r I detta pussel, kommer Hund att räkna från 0 till 1000 med \"öka
        med\".  Ange variabeln \"öka med\" till 10 i början av din kod för att se
        vad som händer."
      Course 4 Play Labs For Loops 5_instruction: I förra steget beräknade vi kvadraten
        av varje nummer. Prova att byta "counter ^ 2" till "counter ^ 3" för att beräkna
        kuben av varje nummer (1, 8, 27, 64, 125, 216, 343...)
      Course 4 Play Labs For Loops 5a_instruction: "In this puzzle, Dog will be your\ntime
        keeper.\r\n\r\nDog will count from 0 to 30 by \"increment\".  The \"increment\"\nvariable
        will begin with a value of 1.\r\n\r\nCan you make it so that each\ntime you
        click Dog, the increment increases by 2?  Click the forward arrow\nto run
        the for loop.\r\n\r\nRun the loop a couple of times, clicking Dog before\neach
        one."
      Course 4 Play Labs For Loops 6_instruction: Du minns kanske att ett primtal
        är ett heltal som är bara delbart med sig själv och 1. Använd funktionen "is_prime"
        för att säga primtalen från 1 till 100.
      Course 4 Play Labs For Loops 6a_instruction: "Hund kommer att fortfarande ta
        tid genom att räkna med vår \"för- loop\" genom att \"öka-med\", men den här
        gången, kommer vi att lägga till Trollkarlen i mixen.  Kan du ändra koden
        så att \"öka med\" går upp med två varje gång Trollkarlen klickas? \r \r Se
        upp!  Trollkarlen är snabb!"
      Course 4 Play Labs For Loops 7_instruction: Kan du använda en for-loop som hjälper
        mig att säga sekvensen 1, 4, 7, 10, 13, 16, 19, 22, 25?
      Course 4 Play Labs For Loops 7a_instruction: "Nu kommer vi någonstans!  Vad
        händer om vi börjar räkna hur många gånger vi kan klicka på Trollkarlen innan
        Hund kommer till 30?  \r \r Avsluta med att lägga till block till Trollkarlen
        så att varje gång han blir klickad på, ökar variabeln 'klickad' med ett. Du
        kan ignorera \"öka med\" nu. \r \r Hund kommer att börja räkna när du klickar
        på \"Kör\"."
      Course 4 Play Labs For Loops 8_instruction: "Nu ska du hjälpa aktörerna att
        flytta när de räknar.  \r \r Hund bör gå och räkna genom att lägga till 2
        (räknare + 2) varje gång.  Katt kommer att gå och räkna genom att multiplicera
        med 2 (räknare* 2) varje gång. Pingvin kommer att gå och räkna till roten
        av 2 (räknare ^ 2) varje gång.  Vem kommer att nå sin flagga först?"
      Course 4 Play Labs For Loops 8a_instruction: "För att avsluta vårt spel, måste
        vi få tillbaka variabeln \"öka med\"!    Låt oss binda det till nivån på spelet.
        \r \r nivå 1) Håll reda på antalet gånger Trollkarlen klickas. \r 2) Om Trollkarlen
        klickas minst 10 gånger innan Hund har räknat till 30, Höj \"öka med\" med
        1 och börja om igen. \r 3) Om Trollkarlen inte  klickas på minst 10 gånger,
        är spelet  över."
      Course 4 SCF 1_instruction: Använd de föreslagna funktionerna för att rita fyra
        rader av hexagoner. Lägg märke till hur våra jämnt numrerade rader skiftas
        till höger?
      Course 4 SCF 1a_instruction: Kan du lista ut hur du kan samla all denna nektar
        med så litet antal block som möjligt?
      Course 4 SCF 1b_instruction: Kan du lista ut hur du kan samla all denna nektar
        med så litet antal block som möjligt?
      Course 4 SCF 2_instruction: 'Använd vad du lärt dig i tidigare nivåer för att
        rita en bild som denna. Obs: Koden blir enklare om du införlivar parametrar. '
      Course 4 SCF 3 Fail 1_instruction: Kan du lista ut hur man...
      Course 4 SCF 3 Fail 2_instruction: Kan du lista ut hur man...
      Course 4 SCF 3_instruction: 'Använd vad du lärt dig i tidigare nivåer för att
        rita en bild som denna. Obs: Koden blir enklare om du införlivar parametrar. '
      Course 4 SCFL 1_instruction: Lösa detta pussel med minsta möjliga antal block.
      Course 4 SCFL 1a_instruction: Kan du få Skrat till hans ekollon med så få block
        som möjligt?
      Course 4 SCFL 1b_instruction: Kan du få Skrat till hans ekollon med så få block
        som möjligt?
      Course 4 SCFL 2_instruction: Lösa detta pussel med minsta möjliga antal block.
      Course 4 SCFL 3_instruction: Kan du lista ut hur du kan återskapa denna ritning?
      Course 4 SCFL 4_instruction: Kan du lista ut hur du kan återskapa denna ritning?
      Course 4 SCFL 5_instruction: Kan du lista ut hur du kan återskapa denna ritning?
      Course 4 SCFL 6_instruction: Kan du lista ut hur du kan återskapa denna ritning
        med en enda slinga?
      Course 4 SCFL 7_instruction: Konstnären vill fånga några vågor! Kan du lista
        ut hur du kan återskapa denna teckning?
      Course 4 SCFP 1_instruction: Skapa en funktion med parametrar som gör att konstnären
        kan hoppa bakåt och framåt med x antal pixlar, och också upp och ner me y
        antal bildpunkter (med positiva och negativa tal).
      Course 4 SCV 1_instruction: Klicka här för att se anvisningarna igen.
      Course 4 SCV 2_instruction: Klicka här för att se anvisningarna igen.
      Course 4 SCV 3_instruction: "Nu för en omgång tag!  Tagga Katt för att få 2
        poäng. Tagga Pingvin för att få 3 poäng.  Skaffa 10 poäng för att vinna! \r
        Men var försiktig, när Katt och Pingvin taggar varandra, tar de bort poäng.
        \r \r Lägg till de block som är nödvändiga för att få detta spel att fungera
        så som det  förklarats.  Hur ska du få Hund att röra sig i alla riktningar
        med hjälp av piltangenterna?  Hur ska du ta bort poäng när Hund taggar Katt
        eller Pingvin?  Hur subtraherar du poäng när Katt och Pingvin rör varandra?"
      Course 4 SCV 4_instruction: Lös detta pussel med minsta möjliga antal block.
      Course 4 SCV 5_instruction: Lös detta pussel med minsta möjliga antal block.
      Course 4 SCV 6_instruction: Klicka här för att se anvisningarna igen.
      Course 4 SCVP 1_instruction: Skapa en funktion med parametrar som gör att konstnären
        kan hoppa bakåt och framåt med x antal pixlar, och också upp och ner me y
        antal bildpunkter (med positiva och negativa tal).
      Course 4 Variables Assessment_instruction: Kan du skapa denna bild med en variabel
        för sidor? Varje rad ska vara 50 bildpunkter lång.
      Course1BeePuzzle12_instruction: Get three nectars and then make two honey
      Course1MazeAssessment1_instruction: "This is a test!\r\nMove one way, then\nanother
        to get me to the pig"
      Course1MazeAssessment2_instruction: "This is a test!\r\nMove one way, then\nanother
        to get me to the pig."
      CSP Data Unit - Counting Multiple Things_instruction: "If you can count one\nthing
        you can count multiple things\r\n\r\nFind out how many people like something\nother
        than dogs and cats\r\n\r\nCount dogs\r\nCount cats\r\nCount total\r\nDo\nthe
        math\r\n\r\nblank/ blank toal\r\n\r\nCan also use this to find percents\nfrom
        this\r\n\r\nx% are dog lovers"
      CSP Data Unit -Counting Records - Easy Way_instruction: "ReadRecords with specific\ncriteria
        \r\nfind the length of an array\r\n"
      CSP Data Unit -Counting Records - Hard Way_instruction: "\r\n1. ReadRecords\nfor
        all records\r\n2. Way to loop through and count\r\n"
      CSP U4 - JSON Object Intro - Bad Way_instruction: |
        Trigger both the keyboard
        and mouse event and examine the event objects displayed in the console. Why
        might an object be the best way to store this information? (Click to see full
        instructions)
      CSP U4 - JSON Object Intro - Good Way_instruction: "Create an object with at\nleast
        5 values including at least one string and one number. (Click to see\nfull
        instructions) \n"
      CSP U4 - Objects - createObject_instruction: "Create an object with at least\n5
        values including at least one string and one number. (Click to see full\ninstructions)
        \n"
      ECSPD Binary Odometer_instruction: |
        This is another resource you could use
        with your students.
      Eval Booleans 1_instruction: |
        Boolean operators (like >, <, =) allow us to
        compare different values, returning either true or false. Click "Run" to
        see how this expression evaluates.
      Eval Booleans 2_instruction: |
        Can you set the values so that this expression
        evaluates as true?
      Eval Booleans 3_instruction: |
        The string-length function returns the number
        of characters in a string (including spaces!) - make this code evaluate to
        true.
      Eval Booleans 4_instruction: |
        Here's an Evaluation Block called AND - it returns
        true if both of its parameters are true, otherwise it returns false. Edit
        the x variable so that this expression returns true.
      Eval Booleans 5_instruction: |
        This OR block returns true if either of its parameters
        is true. Otherwise, if both parameters are false it will return false. Set
        the y variable to a value that will cause this expression to return false.
      Eval Booleans 6_instruction: |
        Here's one more boolean block called NOT. This
        block flips true to false, or false to true. If you wrap this block of code
        in a NOT block, it should return true (because we are asking if the two expressions
        do NOT produce equal values).
      Eval Booleans Free Play_instruction: |
        Free Play: Try out some creations of
        your own using Booleans.
      Eval Booleans_instruction: |
        Booleans allow us to compare different values,
        returning "true" if the are equal, or "false" if they are not. What do
        you think this code will evaluate to?
      Eval Cond 1_instruction: |
        The cond block checks the boolean expressions in
        the left column, and as soon as it finds one that returns "true" it runs
        the corresponding code on the right. If none of the expressions evaluate to
        "true," it runs the bottom block. Update the "temperature" variable so
        that this block returns "It's just right."
      Eval Cond 2 (copy 1)_instruction: |
        This condition returns a different shape
        based on the value of the "sides" variable - change the value of "sides"
        so that the conditional returns a triangle.
      Eval Cond 2_instruction: |
        This condition returns a different shape based on
        the value of the "sides" variable - change the value of "sides" so that
        the conditional returns a triangle.
      Eval Cond 3 (copy 1)_instruction: |
        Can you write a conditional that checks
        the variable "age" and returns "Old enough to vote and drive" if age >
        17, "Old enough to drive" if age is > 15, and "Can't drive or vote" if
        neither conditions is true. Hint: The first condition to return "true" wins
        - make sure you put your conditions in the right order.
      Eval Cond 3_instruction: |
        Can you write a conditional that checks the variable
        "age" and returns "Old enough to vote and drive" if age > 17, "Old enough
        to drive" if age is > 15, and "Can't drive or vote" if neither conditions
        is true. Hint: The first condition to return "true" wins - make sure you
        put your conditions in the right order.
      Eval Cond 4_instruction: |
        We can use the string=? function to make conditionals
        that respond to text input. Here's a function called green shape that takes
        a string for the type of shape. Complete the conditions so that the correct
        solid green shape is returned when the function is run with "circle", "triangle",
        "square", or "rectangle".
      Eval Cond 5_instruction: |
        Here's a similar function red shape with an additional
        variable for size. Complete the conditionals so the correct solid red image
        of a given size is drawn for "circle", "triangle", and "star".
      Eval Cond 6_instruction: "Write a function called food-critic, which takes\nin
        the name of a food and produces a String that says how you feel about that\nfood.
        For example, (food-critic “pizza”) might evaluate to “delicious”, but\n(food-critic
        “rotten eggs”) might evaluate to “gross!”. Choose at least two\nfoods to review,
        but you can you write more if you like!  Don’t forget to\nadd an “else” clause!\r\nOne
        example - and part of the definition -  has already\nbeen done for you!"
      Eval Cond 7_instruction: "Free Play: Write a function called green-shape, which\ntakes
        in the name of a shape and produces a solid green shape. Your function\nshould
        work with at least “circle”, “star” and “rectangle”, but you can add\nother
        shapes if you like. You can choose the size of each shape. Don’t forget\nto
        add an “else” clause!\r\nOne example - and part of the definition -  has\nalready
        been done for you!\r\n"
      Eval Cond 8_instruction: "Free Play: Suppose you want to own a car at 21, or\nhave
        your own business by 30. Write a function called life-goals, which takes\nin
        an age and produces a string that describes your life goals by then. Don’t\nforget
        to add an “else” clause!\r\n"
      Eval Contracts 1_instruction: |
        Use the "star" function to produce a red star
        with a 60 pixel radius
      Eval Contracts 10A_instruction: |
        Alright let's complete this puzzle with a
        Green Square that is 175 pixels in size.
      Eval Contracts 11A_instruction: |
        Can you complete this puzzle to read "Hello
        World" in the banner?
      Eval Contracts 2_instruction: |
        Check out the "rotate" function - can you
        use it to rotate this 90 pixel green square by 45 degrees?
      Eval Contracts 3_instruction: |
        Try using the "text" function to write this
        teal text at size 40.
      Eval Contracts 4 A_instruction: |
        The "scale" function returns an image that
        is scaled either larger or smaller than the input image. Try scaling this
        circle by a factor of 10 - how is the resulting image different than if you'd
        just made a circle of that size in the first place?
      Eval Contracts 4_instruction: |
        The scale function returns an image that is
        either larger or smaller than the input image. Try scaling this circle by
        a factor of 10. How is the returned image different than if you'd just made
        a circle of that size in the first place?
      Eval Contracts 8A_instruction: |
        Can you complete this puzzle? The big-triangle
        is 200 pixels in size and purple?
      Eval Contracts A_instruction: |
        Use the star function to produce a solid red
        star with a 60 pixel radius
      Eval Contracts C_instruction: |
        Check out the rotate function - can you use
        it to rotate this 90 pixel green square by 45 degrees?
      Eval Contracts E_instruction: |
        Try using the text function to write "Hello,
        world!" in teal at size 40.
      Eval Contracts shrink_instruction: "Can you complete this image using the \"shrink\"\nfunction
        block? The radius is 20. \n"
      Eval Define Funcs 1_instruction: |
        Here's a new function called green-triangle
        that takes a single Number for size and produces a green triangle. Use the
        new function to create a 125 pixel green triangle.
      Eval Define Funcs 2_instruction: |
        Let's look inside that green-triangle function
        to see how it works. Can you modify it so that the green-triangle function
        always draws outlined green triangles?
      Eval Define Funcs 3_instruction: |
        Here's the start of another new function
        called purple-circle with a domain of one Number (the radius) and a range
        of Image. The body of the function is broken though - fix it and then make
        a purple circle with 150 pixel radius
      Eval Define Funcs 4_instruction: |
        Create a new function called aqua-star that
        has a Domain of a single Number for radius and returns an aqua star of the
        given radius. Run your new function with a radius of 75.
      Eval Define Funcs 5_instruction: |
        Let's use that aqua-star function to make
        a row of different sized stars. From left to right, the stars should have
        radii of 25, 50, and 75.
      Eval Define Funcs Test_instruction: |
        Here's the start of another new function
        called purple-circle with a domain of one Number (the radius) and a range
        of Image. The body of the function is broken though - fix it and then make
        a purple circle with 150 pixel radius
      Eval Defining Vars Free Play 1_instruction: |
        Free Play: We've provided a function
        that fills your screen with my-image. Change my-image to see what patterns
        you can make.
      Eval Design Recipe .1_instruction: |
        Here's a Design Recipe for a function
        called square-circle with domain Number String and range Image. Click Edit
        to write the function definition (you will see two examples provided).
      Eval Design Recipe 1 (copy 1)_instruction: |
        We're going to write a function
        that draws a solid rectangle of any color that is twice wide as it is high.
        Start with an example - draw a solid green rectangle that has a height on
        100 pixels.
      Eval Design Recipe 1_instruction: |
        Alright, now given the Contract wide-rect:
        Number String -> Image, write an example - draw a solid green rectangle that
        has a height of 100 pixels.
      Eval Design Recipe 2 (copy 1)_instruction: |
        Let's do one more example before
        writing the function definition - this time draw a solid red rectangle with
        a height of 75 pixels.
      Eval Design Recipe 2_instruction: |
        Let's do one more example before writing
        the function definition - this time draw a solid red rectangle with a height
        of 75 pixels.
      Eval Design Recipe 3_instruction: |
        The Design Recipe for wide-rect already
        has a contract and one example. Can you write a second example and then complete
        the definition? The wide-rect function should produce a rectangle of given
        color that is twice as wide as it is high.
      Eval Design Recipe 4_instruction: |
        Use the Design Recipe to create a function
        starburst. When given a number of points and an outer radius, starburst returns
        a yellow radial star with given points, and an inner radius that is half the
        outer radius.
      Eval Design Recipe 5_instruction: |
        Using the Design Recipe, write a function
        striped-flag that takes two colors and produces a flag that is 250 pixels
        wide, 150 pixels tall, with three even horizontal stripes of given colors,
        in the order color2, color1, color2.
      Eval Design Recipe 6_instruction: |
        Write a function large-polygon that should
        output a solid polygon of given sides and color that takes up most of the
        window, regardless of the number of sides. To make sure that the polygon doesn't
        get too large as you increase the number of sides, side length should be inversely
        proportional to side number, with a length of (800/sides).
      Eval Design Recipe Free Play_instruction: |
        Free Play: Use the Design Recipe
        to create some functions of your own design
      Eval Free Play_instruction: 'Free Play: Make art with code!'
      Eval Strings Images .1_instruction: |
        So far we've only dealt with a single
        type of data, Numbers. Another type of data is a String, which is any combination
        of letters, numbers, or other characters wrapped in quotation marks. Run the
        String "Hello, world!" and see what happens.
      Eval Strings Images .2_instruction: |
        The string-append function takes two Strings
        and returns a single combined String. Add a String "Universe" to the second
        argument of string-append.
      Eval Strings Images 1_instruction: |
        The third type of data we're going to
        use is an Image. This star function takes in a Number and two Strings, and
        it evaluates to an Image. Use this function to make a solid red star with
        radius of 100.
      Eval Strings Images 2_instruction: |
        Free Play: Every Evaluation Block is color-coded
        to let you know which data type it returns and which types it needs for its
        parameters. The last parameter of the triangle function takes a String that
        controls its color - try some different colors to see what works.
      Eval Strings Images 3_instruction: |
        Some functions can only take a specific
        set of Strings, such as the second argument of this circle function, which
        controls its style. Draw this orange outline circle using the special String
        block with a dropdown to make sure you only use valid styles.
      Eval Strings Images 4_instruction: |
        Try using the rectangle block to draw this
        solid, red rectangle - it is 175 pixels wide and 100 pixels tall.
      Eval Strings Images 5_instruction: |
        Try using this new Evaluation Block called
        overlay to place a 100 pixel white triangle on top of a 200 pixel red circle.
      Eval Strings Images 6_instruction: |
        Use the overlay block to place a 75 pixel
        radius yellow star on top of a 150 pixel long blue square.
      Eval Strings Images 7_instruction: |
        The offset block lets you move an image
        relative to where it would normally be placed. Use this block to offset the
        square by 100 pixels on the y-axis.
      Eval Strings Images 8_instruction: |
        Here's a different kind of star block
        - it's called radial-star and it allows you to draw stars with any number
        of points! Use it to create a 7 point solid orange star with an inner radius
        of 75 pixels and an outer radius of 175 pixels.
      Eval Strings Images Free Play_instruction: |
        Free Play: Explore the blocks available
        to create something interesting. Make sure to share your favorite creations.
      Frequency Analysis_instruction: Test
      frozen circle function in circle_instruction: Låt oss nu skapa 20 överlappande
        cirklar. Vrid 18 grader mellan varje cirkel.
      frozen circle function with parameter_instruction: Här är ett "Skapa cirkel"-block
        som kan skapa cirklar av olika storlekar. Kan du använda den för att skapa
        en liten cirkel med storleken 5 och en stor cirkel med storleken 10?
      frozen circle function_instruction: Använd det nya blocket "Skapa en cirkel"
        för att skapa 10 överlappande cirklar. Glöm inte att hoppa fram mellan cirklarna.
      frozen circle_instruction: En cirkel är speciell. Kan du lista ut vad för siffra
        som ska användas istället för frågetecken för att rita en cirkel?
      frozen cross rotate dense_instruction: 'Låt oss upprepa det 90 gånger! Hur många
        gånger går 90 på 360? Tips: Det är en riktigt låg siffra.'
      frozen cross rotate_instruction: Prova nu att upprepa det 10 gånger. Hur många
        grader behöver du svänga mellan varje linje?
      frozen cross_instruction: Linda en "Upprepa" block runt dessa kommandon för
        att skapa ett plustecken. Märkte du Elsa kan flytta framåt och bakåt?
      frozen diamond mini snowflake_instruction: Visste du att varenda snöflinga har
        en helt unik form? Låt oss skapa en ny snöflinga genom att använda "Upprepa"-blocket
        och göra ett parallellogram 4 gånger, och svänga höger 90 grader mellan varje
        parallellogram.
      frozen diamond snowflake_instruction: Nu provar vi att skapa en ny snöflinga
        genom att använda upprepa-blocket för att göra 10 parallellogram och svänga
        höger med 36 grader mellan varje.
      frozen diamond_instruction: Använd en upprepning runt dessa block för att skapa
        ett parallellogram. Det är precis som en rektangel men har olika vinklar.
        Den här har vinklarna 60 grader och 120 graders istället för endast 90 graders
        vinkel.
      frozen freeplay_instruction: Du har officiellt blivit en mästare! Skapa ett
        vinterlandskap.
      frozen line_instruction: Hej! Jag är Elsa av Arendal. Hjälp mig göra en rak
        linje.
      frozen perpendicular_instruction: Nu ska vi se om vi kan göra två linjer i 90
        graders vinkel mot varandra. Du kommer att behöva använda blocken "Sväng"
        och "Gå".
      frozen snowflake branch_instruction: Prova att använda blocket "skapa en snöflinge-gren"
        för att skapa tre grenar, som blir början på en snöflinga.
      frozen snowflake full_instruction: Prova nu att upprepa det 8 gånger, så att
        det blir en vacker snöflinga!
      frozen snowflower_instruction: Enkla former kan kombineras och bli avancerade
        snömönster. Kan du gör ett mönster genom att upprepa 5 cirklar med storlek
        5 och 5 cirklar med storlek 10?
      frozen square iterative_instruction: Vi verkar vara halvvägs med att göra en
        kvadrat. Låt oss sätta ihop 4 linjer så att det blir en kvadrat.
      frozen square loop 3x_instruction: Låt oss göra tre kvadrater, och svänga efter
        varje kvadrat. Se till att svänga 120 grader före varje ny kvadrat.
      frozen square loop_instruction: Hej, heter jag Anna av Arendal! Låt oss göra
        en kvadrat med blocket "Upprepa" för att använda färre block. Hur många gånger
        (???) bör "Upprepa"-blocket upprepa blocken inom sig för att göra en kvadrat?
      frozen square snowflake_instruction: Kan du skapa en snöflinga med "Upprepa"-blocket
        för att göra en fyrkant 10 gånger, och "Vända"-blocket för att vända 36 grader
        mellan varje fyrkant?
      Infinity_catch_instruction: Kan du göra så att Elsa ("spelkaraktär 2") kommer
        till Anna genom att använda piltangenterna?
      Infinity_finale_instruction: Skapa vad du vill och dela det!
      Infinity_move_collide_instruction: Hiro är "spelkaraktär 1". Flytta honom direkt
        till Baymax och spela upp ett ljud när rör vid varandra.
      Infinity_move_directions_instruction: Baymax är "spelkaraktär 2". Lägg till
        flyttablock och använd pelarna för att flytta Baymax. Gör så att han rör vid
        de andra karaktärerna.
      Infinity_move_right_instruction: Hiro är "spelkaraktär 1". Använd flyttablock
        för att flytta Hiro åt höger för att röra vid Baymax.
      Infinity_repeat_instruction: Använd blocket "upprepa för evigt" för att göra
        så att Anna flyttar upp och ned 400 pixlar.
      Infinity_say_instruction: Gör så att Anna säger "Hej där." genom att använda
        säg-blocket.
      Infinity_shoot_instruction: Baymax är "spelkaraktär 2". Gör så att Baymax slänger
        ett block mot Hiro.
      Infinity_shoot_directions_instruction: Hiro är "spelkaraktär 3". Gör så att
        Hiro kastar en projektil på var och en av spelkaraktärerna. Vänta en sekund
        mellan varje kast.
      Infinity_test_instruction: This is a test Infinity level.
      Infinity_touch_faster_instruction: Rör vid ytterligare snöflingor!
      Infinity_touch_four_instruction: Flytta Anna upp, ned vänster och höger för
        att röra vid var och en av de fyra snöflingorna.
      Infinity_touch_score_instruction: Gör så att Anna får ett poäng när hon rör
        vid en snöflinga. Klicka sedan på "Kör" och styr henne att röra varje snöflinga
        en gång.
      jessie-test_instruction: Lots of instructions
      Just for Testing_instruction: Test instructions
      K-1 Artist 1 Assessment 1_instruction: Rita en kort linje upp och en lång linje
        till höger!
      K-1 artist 1 level 10_instruction: Rita en streckad linje genom att använda
        blocken hoppa och rita
      K-1 artist 1 level 9_instruction: Rita detta med tre linjer
      K-1 Artist Loops 1_instruction: Rita denna linje genom att flytta österut 4
        gånger.
      K-1 Artist Loops 2_instruction: Kan du rita samma linje med hjälp av en slinga?
      K-1 Artist Loops 3_instruction: Kan du upprepa dessa block för att rita 6 linje?
      K-1 Artist Loops 4_instruction: Kan en upprepning hjälpa oss att rita ovansidan
        av borgen?
      K-1 Artist Loops 5_instruction: Vad kan du upprepa 4 gånger för att rita dessa
        trappsteg?
      K-1 Artist Loops 6_instruction: 'Denna behöver två slingor: en för att gå upp
        för trappan och en för att gå ned.'
      K-1 Artist Loops 7_instruction: Jag du avsluta detta mönster med två slingor?
      K-1 Artist Loops 8_instruction: Denna trappa har längre steg.
      K-1 Artist Loops 9_instruction: 'Uppgift: Använd en slinga för att rita trappstegen'
      K-1 Artist Loops Free Play_instruction: Frispel, rita något kul!
      K-1 Artist1 1_instruction: Rita foten på gubben med en linje
      K-1 Artist1 10_instruction: Rita och hoppa för att skapa den streckade vägen
        till skatten X
      K-1 Artist1 2_instruction: Rita morrhåren på katten med två linjer!
      K-1 Artist1 3_instruction: Rita två linjer österut och två linjer norrut för
        att färdigställa huset!
      K-1 Artist1 4_instruction: Rita linjer upp, över och ned för att färdigställa
        borgen!
      K-1 Artist1 5.5_instruction: Rita färdigt det tredje tornet på borgen med korta
        linjer
      K-1 Artist1 5_instruction: Rita stjälken på blomman med två linjer!
      K-1 Artist1 6_instruction: Rita färdigt bilden med hopp-block!
      K-1 Artist1 7_instruction: Använd hopp-block för att flytta utan att rita. Hoppa
        upp och rita en linje.
      K-1 Artist1 8_instruction: Rita den streckade linjen med hjälp av hopp- och
        rit-block
      K-1 Artist1 9_instruction: Rita och hoppa för att skapa den streckade linjen
      K-1 Artist1 Assessment 1_instruction: Rita de korta och långa linjerna!
      K-1 Artist1 Assessment 2_instruction: Rita de korta streckade linjerna!
      K-1 Artist2 1_instruction: Rita en fyrkant under triangeln.
      K-1 Artist2 2_instruction: Hoppas och rita en kvadrat vid huset.
      K-1 Artist2 3_instruction: Rita en kvadrat ovanför den andra kvadraten
      K-1 Artist2 4_instruction: Rita en rektangel för att färdigställa bron.
      K-1 Artist2 5_instruction: Rita en rektangel för att färdigställa brostödet
      K-1 Artist2 6_instruction: Rita två kvadrater för att skapa en rektangel!
      K-1 Artist2 Assessment1_instruction: 'Uppgift: Rita en kvadrat vid den andra
        kvadraten.'
      K-1 Artist2 Free Draw_instruction: Rita vad som helst!
      K-1 Artist2_7_instruction: Rita en rektangel för att ge byrå den översta lådan!
      K-1 Bee 1_instruction: Flytta mig till blomman, hämta nektarn, flytta mig till
        honungskakan och skapa honung
      K-1 Bee 10_instruction: Hämta fyra nektarn och skapa två honungar!
      K-1 Bee 11.5_instruction: Hämta fyra nektarn för att göra fyra honungar!
      K-1 Bee 11_instruction: Hämta tre nektarn och gör sedan en honung
      K-1 Bee 12_instruction: Hämta tre nektarn och gör sedan två honungar!
      K-1 Bee 13_instruction: Hämta tre nektarn och gör sedan en honung!
      K-1 Bee 14_instruction: Ta mig till nektarn, plocka upp det, ta mig till honungen
        och skapa honung
      K-1 Bee 15_instruction: Hämta två nektarn för att göra två honungar!
      K-1 Bee 2_instruction: Flytta mig till blomman, hämta nektarn, flytta mig till
        honungskakan och skapa honung
      K-1 Bee 3_instruction: Flytta mig till blomman, hämta nektarn, flytta mig till
        honungskakan och skapa honung
      K-1 Bee 4_instruction: Hämta två nektarn och gör sedan två honungar!
      K-1 Bee 5_instruction: Hämta tre nektarn och gör sedan tre honungar!
      K-1 Bee 6_instruction: Hämta två nektarn och gör sedan två honungar!
      K-1 Bee 7_instruction: Hämta tre nektarn och gör sedan två honungar!
      K-1 Bee 8_instruction: Hämta två nektarn och gör sedan två honungar!
      K-1 Bee 9_instruction: Hämta två nektarn och gör sedan två honungar!
      K-1 Bee Assessment 1_instruction: Hämta nektar för att tillverka honung!
      K-1 Bee Assessment 2_instruction: Hämta nektar för att tillverka honung!
      K-1 Bee Loops 1_instruction: Hämta nektarn för att tillverka honung!
      K-1 Bee Loops 10_instruction: Använd upprepningar för att hämta nektarn, honungen
        och för att flytta!
      K-1 Bee Loops 11_instruction: 'Uppgift: Använd upprepningar för att hämta nektarn
        och honungen!'
      K-1 Bee Loops 12_instruction: 'Uppgift: Använd upprepningar för att hämta nektarn,
        honungen och för att flytta!'
      K-1 Bee Loops 2_instruction: Använd en slinga för att flytta och sedan få nektar
        och gör honung!
      K-1 Bee Loops 3_instruction: Använd loopar att få nektar och göra honung!
      K-1 Bee Loops 4_instruction: Använd loopar att få nektar, göra honung och flytta!
      K-1 Bee Loops 5_instruction: Använd loopar för att få nektar och honung!
      K-1 Bee Loops 6_instruction: Använd upprepningar för att hämta nektarn, honungen
        och för att flytta!
      K-1 Bee Loops 7_instruction: Använd loopar att få nektar och göra honung!
      K-1 Bee Loops 8_instruction: Använd loopar för att få nektar och honung!
      K-1 Bee Loops 9_instruction: Använd upprepningar för att hämta nektarn, honungen
        och för att flytta!
      K-1 Bee Loops Assessment 1_instruction: Få nektar för att göra honung och använd
        loopar för att flytta!
      K-1 Bee Loops Assessment 2_instruction: Få nektar för att göra honung genom
        att använda loopar!
      K-1 Bee Puzzle 12_instruction: Get three nectars and then make two honey
      K-1 Building a Foundation Assessment_instruction: Bygg en pyramid med tre nivåer,
        det finns inga andra instruktioner, så det är bara lek med bitarna tills du
        får det rätt!
      k-1 maze 1_instruction: Kan du göra så att jag flyttar västerut till grisen?
      K-1 Maze 10_instruction: 'Gå runt TNT att få mig till grisen! '
      K-1 Maze 11_instruction: 'Spåra vägen och led mig till fåniga grisen. Undvik
        TNT annars kommer fjädrar att flyga! Tips: Han är söder om mig.'
      K-1 Maze 2_instruction: Flytta mig åt öster för att få mig till grisen!
      K-1 Maze 3_instruction: Flytta mig söderut för att få mig att grisen!
      K-1 Maze 4_instruction: Flytta mig norrut för att få mig till grisen!
      K-1 Maze 5_instruction: Flytta mig åt öster för att få mig till grisen!
      K-1 Maze 6_instruction: Flytta en väg, sedan en annan att få mig att grisen!
      K-1 Maze 7_instruction: Flytta en väg, sedan en annan att få mig att grisen!
      K-1 Maze 8_instruction: Flytta en väg, sedan en annan att få mig att grisen!
      K-1 Maze 9_instruction: Flytta en väg, sedan en annan att få mig att grisen!
      K-1 Maze Assessment 1_instruction: Bedömning--Få mig till grisen!
      K-1 Maze Assessment 12_instruction: Bedömnings-nivå
      K-1 Maze Assessment 13_instruction: Bedömnings-nivå
      K-1 Maze Assessment 2_instruction: Bedömning--Få mig till grisen!
      K-1 maze debug 1_instruction: Ändra koden för att få mig till grisen!
      K-1 maze debug 10_instruction: Felsök denna nivå genom att ordna om och lägga
        till block för att få mig till grisen!
      K-1 maze debug 11_instruction: "Detta är ett test! \r Felsök denna nivå genom
        att ordna om och lägga till block för att få mig till grisen"
      K-1 maze debug 2_instruction: Räkna ut vad som saknas och lägg sedan till block
        för att få mig till grisen!
      K-1 maze debug 3_instruction: Räkna ut vad som saknas och lägg sedan till block
        för att få mig till grisen!
      K-1 maze debug 4_instruction: Kör genom dessa block och fixa dem! Jag tror att
        jag går i fel riktning.
      K-1 maze debug 5_instruction: Felsök denna nivå genom att ordna om och lägga
        till block för att få mig till grisen!
      K-1 maze debug 6_instruction: Felsök denna nivå genom att ordna om och lägga
        till block för att få mig till grisen!
      K-1 maze debug 7_instruction: Felsök denna nivå genom att ordna om och lägga
        till block för att få mig till grisen!
      K-1 maze debug 8_instruction: Felsök denna nivå genom att ordna om och lägga
        till block för att få mig till grisen!
      K-1 maze debug 9_instruction: Felsök denna nivå genom att ordna om och lägga
        till block för att få mig till grisen!
      K-1 Maze debug Assessment 1_instruction: Bedömning--felsök denna nivå genom
        att ordna om och lägga till block för att få mig till grisen!
      K-1 Maze Loops 1_instruction: Få mig att grisen!
      K-1 Maze Loops 10_instruction: Få mig till grisen! Använda upprepa-loopen.
      K-1 Maze Loops 11_instruction: Få mig till grisen! Använda upprepa-loopen.
      K-1 Maze Loops 12_instruction: Få mig till grisen! Använda upprepa-loopen.
      K-1 Maze Loops 2_instruction: Använda upprepa blocket för att få mig att komma
        till grisen!
      K-1 Maze Loops 3_instruction: Få mig till grisen! Använda upprepa-loopen.
      K-1 Maze Loops 4_instruction: Få mig att grisen!
      K-1 Maze Loops 5_instruction: Få mig till grisen! Använda upprepa-loopen.
      K-1 Maze Loops 6_instruction: Få mig till grisen! Använda upprepa-loopen.
      K-1 Maze Loops 7_instruction: Få mig till grisen! Använda upprepa-loopen.
      K-1 Maze Loops 8_instruction: Få mig till grisen! Använda upprepa-loopen.
      K-1 Maze Loops 9_instruction: Få mig att grisen!
      K-1 Maze Loops Assessment 1_instruction: Bedömning--Använda loopar för att få
        mig att komma till grisen!
      K-1 Maze Loops Assessment 2_instruction: Bedömning--Använda loopar för att få
        mig att komma till grisen!
      K-1 Maze Multi 14_instruction: Bedömnings-nivå
      K-1 Maze Multi 15_instruction: Bedömnings-nivå
      K-1 Maze Sequence Assessment 1_instruction: "Detta är ett test! \r flytta i
        en riktning, sedan en annan att få mig till grisen"
      K-1 Maze Sequence Assessment 2_instruction: "Detta är ett test! \r flytta i
        en riktning, sedan i en annan att få mig till grisen."
      kikiTesting_instruction: ".\r\n .\r\n.\r\n.\r\n.\r\n.\r\n\r\n.\r\n\r\n"
      Luigi's Pizza 1_instruction: |
        Welcome to Luigi's Pizza! To order a pizza,
        type the name of a topping into the cost function, and we'll return the price
        of that pizza. Try ordering a pepperoni pizza to start.
      Luigi's Pizza 2 (copy 1)_instruction: |
        Right now there are only four choices
        available at Luigi's pizza - let's fix that! Add a couple of new toppings
        to the conditional block in the "cost" function. Once you've added your
        toppings, test out the function to make sure it works.
      Luigi's Pizza 2_instruction: |
        Right now there are only four choices available
        at Luigi's pizza - let's fix that! Add a couple of new toppings to the conditional
        block in the cost function. Once you've added your toppings, test out the
        function to make sure it works.
      Luigi's Pizza 3 (copy 1)_instruction: |
        That's better, everyone loves more
        variety in their pizza toppings! But you still can't please everyone, and
        folks are coming in to order toppings that Luigi doesn't have. Instead of
        saying no to those people, could you update the "else" clause so that we
        charge them a premium for toppings that we don't normally offer?
      Luigi's Pizza 3_instruction: |
        That's better, everyone loves more variety in
        their pizza toppings! But you still can't please everyone, and folks are
        coming in to order toppings that Luigi doesn't have. Instead of saying no
        to those people, could you update the else clause so that we charge them a
        premium for toppings that we don't normally offer? Let's charge $10,000
        for a topping we don't carry.
      Luigi's Pizza 4_instruction: |
        Free Play: What can you do to make Luigi's cost
        function even more useful?
      MSM Big Game Empty_instruction: |
        All variables and functions are currently
        empty stubs. Each puzzle progression will be focused on defining and handful
        of them, and therefore adding functionality.
      MSM Big Game Vars 1 (copy 1)_instruction: |
        In the Variables toolbox you'll
        see several variables that define how your game characters look, move, and
        interact
      MSM Big Game Vars 1_instruction: |
        In the Variables toolbox you'll see several
        variables that define how your game characters look, move, and interact
      MSM Big Game Vars Backup_instruction: |
        In the Variables toolbox you'll see
        several variables that define how your game characters look, move, and interact
      MSM Defining Vars 1 (copy 1)_instruction: |
        Write a program that produces a
        50 pixel solid green triangle.
      MSM Defining Vars 1_instruction: |
        Write a program that produces a 50 pixel
        solid green triangle.
      MSM Defining Vars 2 (copy 1)_instruction: |
        If we wanted to make fifty green
        triangles, it would be a pain to repeat that block of code 50 times. Let's
        create a variable called "my-shape" and put the code for a 50 pixel solid
        green triangle inside.
      MSM Defining Vars 2_instruction: |
        If we wanted to make fifty green triangles,
        it would be a pain to repeat that block of code 50 times. Let's create a
        variable called my-shape and put the code for a 50 pixel solid green triangle
        inside.
      MSM Defining Vars 3 (copy 1)_instruction: |
        Take your "my-shape" variable
        and use it with this provided code to draw two identical green triangles.
      MSM Defining Vars 3_instruction: |
        Take your my-shape variable and use it with
        this provided code to draw two identical green triangles that are 50 pixels
        in size.
      MSM Defining Vars 4_instruction: |
        Edit your my-shape variable so that it draws
        75 pixel solid red stars.
      MSM Play Lab Butterfly 1_instruction: |
        Help Sam stay on the screen so that
        you can always see at least a little piece of him. Using the arrow keys, see
        how far Sam can go to the left while still staying onscreen. You’ll find that
        Sam is onscreen as long as his x-coordinate is greater than -50. Then, fill
        in the code to make Sam stay on the screen.
      MSM Play Lab Butterfly 2_instruction: |
        Now make Sam stay on the right side
        of the screen. You'll have to experiment to see how far he can go and still
        be partially visible on the screen.
      MSM Play Lab Butterfly 3_instruction: |
        Now, combine your work to make Sam stay
        on both sides of the screen.
      MSM Play Lab Game 2_instruction: |
        Variables can also be used to control the
        speed of players in a game. Set the player speed and the enemy speed and see
        how the movement changes. Speed can be between 2 and 12.
      NetSim Standalone Automatic DNS_instruction: |
        In this version of the Internet
        Simulator, a Domain Name System (DNS) is provided for you and knows the IP
        addresses of all connected computers. Send a message in the form GET [hostname]
        to the DNS service at address <yourRouterNumber>.15 to get a student's address.
      NetSim Standalone Broadcast_instruction: "In this version of the Internet Simulator,\nyou
        can connect to up to 5 other people in a room. When you send messages\nin
        the room, everyone receives them. What are some of the challenges of this\nsystem,
        and how might you solve them?\r\n"
      NetSim Standalone Classroom Routers_instruction: |
        In this version of the Internet
        Simulator, everyone connects to a router and has a specific address. To send
        messages, you have to address your message to the specific address of the
        recipient, and the router will take care of delivering it to the right computer.
        If there are other routers created in your class, ask for the address of one
        of your classmates and send them a message! View the Log Router to see the
        path the messages have taken through the network.
      NetSim Standalone Freeplay_instruction: |
        In this configuration, most of the
        options are turned on, and you can play with them. Have fun!
      NetSim Standalone Manual DNS_instruction: |
        In this version of the simulator
        you can't see the other students' addresses.  Instead, one of you must act
        as a name service, to help share addresses with each other.
      NetSim Standalone Packets TCP_instruction: |
        Messages on the Internet can take
        many paths to get to their destination, and sometimes along the way the message
        gets dropped. In this version of the Internet Simulator, there is a 10% chance
        of a packet being dropped, multiple packets may take different paths to the
        destination, and the default max packet size is set to 6 additional characters.
      NetSim Standalone Routers Addresses_instruction: "For this activity, connect\nto
        a router with the others in your group. Important note: The router will\nonly
        properly route messages where the first 4 bits are the To: address and\nthe
        second 4 bits are the From: address.\r\n\r\n[TODO: NetSim needs to support\nhierarchical
        addresses. For now, level is set up for 4 bit to and from addresses]"
      NetSim Standalone SendAB_instruction: |
        You and your partner share a single
        wire that can only be in state A or state B. You can set the wire to either
        state at any time, and you can read the state of the wire at any time. Can
        you figure out a way to effectively communicate with just this system?
      NetSim Standalone Sending Numbers Ascii_instruction: |
        Now that you've transmitted
        information represented as decimal numbers, you can map those numbers to text
        characters to send text-based information back and forth. With a text-based
        protocol, you can easily represent and communicate all kinds of information.
      NetSim Standalone Sending Numbers_instruction: "You and your partner can now\nreliably
        send messages back and forth without extra coordination! While you're\nalways
        sending bits back and forth, you can also represent those bits as decimal\nnumbers.
        What kinds of information can you represent with this system? \n"
      NetSim_AddressingMessages_instruction: |
        In this version of the simulator, you
        will connect to a Router instead of directly to another student. Enter an
        address in the "To" box to send a message to another student.
      NetSim_AutomaticDNS_instruction: |
        In this version of the simulator a DNS service
        is provided for you. Send a message in the form GET [hostname] to the DNS
        service at address 15 to get a student's address.
      NetSim_ManualDNS_instruction: |
        In this version of the simulator you can't
        see the other students' addresses.  Instead, one of you must act as a name
        service, to help share addresses with each other.
      NetSim_SendAB_instruction: |
        Connect to another student.  Each of you can set
        the value of the wire between you to "A" or "B".  See if you can send
        a complete message!
      NetSim_SendAscii_instruction: |
        In this version of the simulator, you can send
        numbers or ASCII characters to one another, one bit at a time.
      NetSim_SendBits_instruction: |
        Connect to another student.  You can now set
        your wire to "0" or "1".  Send a message to your partner!
      NetSim_SendingABTest_instruction: |
        This is Sarah's test of making a netsim
        level
      NetSim_SendNumbers_instruction: |
        In this version of the simulator, you can
        view the decimal representations of the binary you are sending.
      NetSim_Superuser_instruction: You have loaded NetSim in superuser mode.
      NetSim_Variant1_instruction: |
        NetSim: Variant 1 allows students to manually
        work out the timing of sending bits back and forth.
      NetSim_Variant2_instruction: |
        NetSim: Variant 2: Students connect directly
        to one another and send entire packets back and forth, exploring systems of
        encoding data.
      NetSim_Variant3_instruction: |
        NetSim: Variant 3: Connects groups of 2-6 students
        with a router, and explores issues in routing and DNS
      New Artist Project_instruction: Rita något fantastiskt! Din kod sparas som ett
        projekt som du kan återvända till när som helst.
      NEW Course 4 Artist Functions 1_instruction: Kan du rita en fyrkant som är 100
        bildpunkter i längd, med en upprepa-loop?
      NEW Course 4 Artist Functions 10.1_instruction: Använd funktionerna från tidigare
        pussel för att rita detta mönster.
      NEW Course 4 Artist Functions 10_instruction: Klicka på "Redigera" för att fylla
        i blocken i funktions-definitionen för att rita en 40 pixel kvadrat.
      NEW Course 4 Artist Functions 11_instruction: "Nu vill vi skapa en ny funktion
        som kallas \"Rita en linje av fyrkanter\" som ritar sex rutor i rad.  Kan
        du bygga denna funktion med hjälp av \"Rita en kvadrat 20\"-funktionen som
        vi redan har skapat? Obs: Se att vi har ändrat pennan till att vara mycket
        tunnare. Klicka på \"Redigera\" på  \"Rita en kvadrat 20\" funktionen för
        att se hur! \r\n"
      NEW Course 4 Artist Functions 12_instruction: Använd funktionen "Rita en linje
        av kvadrater" från sista pusslet för att rita detta mönster."
      NEW Course 4 Artist Functions 13_instruction: 'Kan du rita en stjärnform med
        funktionen "Rita en linje av kvadrater"? Tips: Redigera funktionen "Rita en
        linje av kvadrater" så att du slipper kalla den två gånger.  Notera att du
        måste flytta framåt ett visst antal pixlar och vända 144 grader.'
      NEW Course 4 Artist Functions 14_instruction: 'Fri spel tid! '
      NEW Course 4 Artist Functions 2_instruction: 'Kan du rita 3 rutor 20 pixlar
        från varandra? Tips: varje ruta är 100 bildpunkter i storlek'
      NEW Course 4 Artist Functions 3_instruction: Här är en ny typ av Block. Det
        kallas ett "Funktions" block. Klicka på "Redigera" för att fylla den med kod
        för att rita en fyrkant med 100 pixlars sidor. När du är klar med att redigera
        funktionen, klicka på "Stäng" för att gå tillbaka till ditt program.
      NEW Course 4 Artist Functions 4_instruction: 'Använd funktionen "Rita en fyrkant"
        för att rita detta mönster. Tips: Du måste använda ett "vänd precis vid 120
        grader" block efter varje kvadrat.'
      NEW Course 4 Artist Functions 5_instruction: Hur visste "Rita en fyrkant" blocket
        vilka kommandon det skulle köra? Klicka på "Redigera" i blocket "Rita en fyrkant"
        funktion. Blocken i funktionens redaktör är definitionen som utgör "Rita en
        fyrkant." När du är klar med att titta runt, klicka på "Spara och Stäng" och
        sedan "kör"
      NEW Course 4 Artist Functions 6_instruction: "Kan du rita denna bild genom att
        använda \"rita en fyrkant\" -blocket? Tips: varje ruta är 120 pixlar isär.
        \r\n"
      NEW Course 4 Artist Functions 7_instruction: 'Får du kläm på hur man använder
        funktionsblock? Låt oss ändra denna ruta så att den är 200 pixlar i storlek.
        Tips: Klicka på "Redigera" för att ändra storlek på "Rita en fyrkant" funktionen.
        Kom ihåg att klicka på "Spara och Stäng" för att komma ur funktions-editorn. '
      NEW Course 4 Artist Functions 8_instruction: Vi har skapat en ny funktion för
        dig kallas "Rita en triangel".  Kan du redigera funktionsdefinitionen för
        att rita en triangel med 100 pixel sidor?
      NEW Course 4 Artist Functions 9_instruction: Kan du lösa detta genom att lägga
        till endast ett block?
      NEW Course 4 Artist Functions inspire_instruction: Klicka här för att se inspirations-bilden
        igen.
      New Course 4 Artist Functions Level 4_instruction: Använd funktionen "Rita en
        fyrkant" för att rita detta mönster.
      NEW Course 4 Artist Params 1_instruction: Låt oss definiera denna funktion för
        att rita en kvadrat med 50 pixel sidor. Klicka på "Redigera" för att komma
        igång.
      NEW Course 4 Artist Params 10_instruction: 'Skapa ett "Rita en hexagon" funktionsblock
        med en längdparameter. Tips: Denna hexagon har sidor som är 100 bildpunkter
        i längd. '
      NEW Course 4 Artist Params 11_instruction: Kan du lista ut hur man ritar denna
        form? Redigera funktionen att använda parametern "sidor".
      NEW Course 4 Artist Params 12_instruction: Kan du slutföra denna ritning? Sidorna
        i alla former är 100 bildpunkter långa.
      NEW Course 4 Artist Params 12a_instruction: Denna bild liknar den förra. Kan
        du använda en "för loop" med din funktion för att skapa denna design?
      NEW Course 4 Artist Params 13_instruction: "Låt oss redigera \"rita en polygon\"
        funktionen. Det har redan en \"sidor\" parameter. Nu, låt oss lägga till en
        \"längd\" parameter. \r ledtråd: omkretsen av varje form är 200 bildpunkter
        lång. Minns du ekvationen för att göra figurer av samma storlek när de har
        olika antal sidor?"
      NEW Course 4 Artist Params 14_instruction: Redigera "rita en spiral kant" till
        att använda "längd" och "sidor" parametrar och sedan återskapa dessa former.
      NEW Course 4 Artist Params 15_instruction: 'Fritt spel: Här är de funktioner
        som du har skrivit, och några fler för dig att spela med. Rita något fantastiskt!
        Lek med pennbredden och se hur olika dina ritningar ser ut!'
      NEW Course 4 Artist Params 2_instruction: Skapa en "Rita en triangel-funktion
        med 50 pixlar långa sidor" från grunden
      NEW Course 4 Artist Params 3_instruction: "Nu ska vi använda funktionen för
        att rita 5 trianglar i rad. Tips: varje triangel är 30 bildpunkter isär. \r\n"
      NEW Course 4 Artist Params 4_instruction: Märker du något annorlunda med dessa
        funktionsblock? Klicka på "Kör" för att se vad som händer.
      NEW Course 4 Artist Params 5_instruction: 'Fyll i ??? i längd-parametern i blocket.
        Tips: Pentagonen har 100 pixlar långa sidor. '
      NEW Course 4 Artist Params 6_instruction: Fyll i parametern "längd" Rita dessa
        former genom att ersätta den "???" med rätt nummer. Fyrkanten och triangeln
        har 100 pixlar långa sidor och varje sida av hexagonen är 75 bildpunkter lång.
      NEW Course 4 Artist Params 7_instruction: 'Kan du slutföra denna ritning? Tips:
        Sidorna i varje triangel är 25 pixlar längre än förra.  Den första triangeln
        har 25 pixlar långa sidor.'
      NEW Course 4 Artist Params 8_instruction: Koden för denna triangel funktion
        är bruten. Kan du redigera funktionen för att fixa det, och sedan göra trianglar
        med en längd av 25, 50 och 75?
      NEW Course 4 Artist Params 9_instruction: 'Klicka på "Redigera" för att fylla
        i funktionsdefinitionen för "Rita en kvadrat" och lägga till en parameter.
        Den bör ta en längdparameter, precis som triangeln. Den här gången ska du
        rita 3 rutor: 25, 50 och 75 pixel i längd, var och en är 100 pixlar isär.'
      NEW Course 4 Artist Params inspire_instruction: "Fritt spel - Inspiration: Du
        har nu lärt dig allt du behöver veta för att göra ett mönster som detta! Om
        denna bild inspirerar dig, försök att göra något liknande. Annars skapa något
        alldeles eget. \r \r Vill du veta hur våra inspirationsmönster gjordes? "
      NEW Course 4 Artist Vars 1.5_instruction: 'Ta en titt på koden, kan du se hur
        den "ange längd" blocket och "längd" blocket verkar tillsammans? Klicka på
        "Kör" för att se det i aktion. '
      NEW Course 4 Artist Vars 12_instruction: Nu ska du återskapa algoritmen från
        den förra nivån och skapa en pentagon med sidor av 150.
      NEW Course 4 Artist Vars 2.5_instruction: 'Ta en titt på koden, kan du se hur
        den "ange längd" blocket och "längd" blocket verkar tillsammans? Klicka på
        "Kör" för att se det i aktion. '
      NEW Course 4 Artist Vars 2_instruction: 'Dra ett nummer- block till "ange längd"
        blocket för att rita en uppsättning av50 pixlars trianglar. '
      NEW Course 4 Artist Vars 4 5_instruction: Fantastiskt jobb på sista pusslet,
        låt oss prova igen men denna gång låt oss göra denna coola design med med
        60 pixlars hexagoner.
      NEW Course 4 Artist Vars 4_instruction: 'Låt oss försöka igen. Kan du ange variabeln
        längd för att göra denna coola design med hexagoner? Tips: Det är en multipel
        av 10.'
      NEW Course 4 Artist Vars 6_instruction: "Rita detta mönster genom att släppa
        variabeln längd på rätt ställen, och sedan ange det rätta värdet för längd.
        (Ledtråd: det är en multipel av 10).  \r \r se hur du bara behöver ange värdet
        för längd en gång, och koden använder det rätta värdet överallt? \r \r \r\n"
      NEW Course 4 Bee For Loops 1_instruction: Använd en slinga för att samla nektar
        från varje blomma.
      NEW Course 4 Bee For Loops 10_instruction: Använd din för-loop "räknare" variabel
        för att styra hur långt du vill flytta horisontellt.
      NEW Course 4 Bee For Loops 10a_instruction: 'Redo för en utmaning?  Använd det
        du lärt dig om loopar och försöka lösa problemet. Kom ihåg: Du kan behöva
        köra din lösning flera gånger innan du listat ut alla steg.'
      NEW Course 4 Bee For Loops 11_instruction: Kan du använda variabeln loop för
        att styra rörelse och insamling av nektar?
      NEW Course 4 Bee For Loops 2_instruction: Lägg till den kod som behövs för att
        se till att biet samlar ala nektar. Titta på hur mycket kod som du behöver
        för detta pussel! (Vi lär ett enklare sätt i nästa pussel.)
      NEW Course 4 Bee For Loops 3_instruction: 'Ah, "för loopen" gör detta mycket
        lättare! All kod du behöver är här, ta en titt på hur det är sammansat. t
        Klicka på "Kör" för att se hur det fungerar. '
      NEW Course 4 Bee For Loops 4 4_instruction: Nu måste vi gå framåt "räknare"
        gånger, sen få nektar "räknare" gånger.  Kan du använda två "Upprepa" slingor
        för att klara denna utmaning?
      NEW Course 4 Bee For Loops 4_instruction: 'Ersätt ??? i "för loopen" med den
        största mängden nektar biet ska samla. '
      NEW Course 4 Bee For Loops 5 5_instruction: Har du förstått "för loop"? Låt
        oss hjälpa biet att få resten av nektarn.
      NEW Course 4 Bee For Loops 5_instruction: Du kan också använda en "för loop"
        för att räkna ner. Försök samla denna nektar genom att räkna ner från 5 till
        1, 1 i taget.
      NEW Course 4 Bee For Loops 6_instruction: Det sista numret i din slinga kallas
        "ökningen". Varje gång loopen körs, ändras 'räknar' -variabeln med värdet
        av ökningen. Försök samla dessa blommor genom att använda en ökning av 2.
      NEW Course 4 Bee For Loops 7_instruction: "Låt oss nu kombinera variabeln \"räknare\"
        med ett matematik block! Hur kan du använda variabeln \"räknare\" för att
        navigerai denna trädgård med minsta möjliga antal block? Vad behöver du göra
        för att samla in 3, 6, 9, 12, 15 nektar denna gång? Hemligheten ligger i variabeln
        \"räknare\"! \r \r Kom ihåg: om din slinga räknar upp, läggs 'ökningen' till
        i 'räknar-\n variabeln varje gång."
      NEW Course 4 Bee For Loops 8_instruction: "Du kan detta! Vad bör din ökning
        vara för att samla 3, 6, 9, 12, 15 nektar? \r Ledtråd: Vad behöver du lägga
        till varje nummer för att få numret efter det?"
      NEW Course 4 Bee For Loops 9_instruction: Om din slinga räknar ner, dras ökningen
        från din variabel i varje slinga. Vad bör din ökning vara för att samla 15,
        sen 12, sedan 9, 6, 3 nektar?
      NEW Course 4 Bee For Loops 95_instruction: Ta en titt på varje del av den "för
        loop" som du just har skapat.  Kan du lista ut vilka nummer du måste dubblera
        för att lösa detta pussel? Varför fungerar det?
      NEW Course 4 Play Lab Params 11_instruction: 'Det är fri speltid! Ha kul med
        alla block i din verktygslåda. '
      NEW Course 4 Play Lab Params 5 5_instruction: Låt oss försöka att igen, men
        med mindre hjälp. Vad behöver du redigera denna gång att låta aktörerna patrullera?
      NEW Course 4 Play Lab Vars 4 5_instruction: '"Vad tror du denna kod kommer att
        göra? Tryck på "Kör" för att se vad som händer."'
      NEW Course 4 Play Labs For Loops 7a_instruction: Om du använder vad du lärt
        dig hittills, kan du låta Dinosaur ta ett steg framåt varje gång Pingvin räknar?
      NEW Course 4 Play Labs For Loops 8 Free Play_instruction: 'Det är fri speltid!
        Ha kul med alla block i din verktygslåda. '
      NEW Course 4 Play Labs For Loops 8a_instruction: "Utmaning: Hur skulle du använda
        \"för loopen\" för att få alla karaktärerna att gå runt och säga sina \n nummer,
        och sedan försvinna från skärmen? \n"
      New Play Lab Project_instruction: Skapa din egen berättelse eller spel! Din
        kod sparas som ett projekt du kan återvända till när som helst.
      Ninjacat Demo B (copy 1)_instruction: "\r\nLet’s begin by exploring a simple\nvideogame,
        and then figuring out how it works. You can use the arrow keys\nto move the
        ninja left, right and jump - try to catch the unicorn and avoid\nthe dragon!\r\n\r\n\r\n\r\n
        \ \r\n\r\n"
      Ninjacat Demo B_instruction: |
        Let’s begin by exploring a simple videogame,
        and then figuring out how it works. You can use the arrow keys to move the
        ninja up and down - try to catch the unicorn and avoid the dragon! When you
        think you've figured out how the game works, click "Finish"
      Ninjacat Demo No Animate_instruction: |
        Let’s begin by exploring a simple videogame,
        and then figuring out how it works. You can use the arrow keys to move the
        ninja up and down - try to catch the unicorn and avoid the dragon! When you
        think you've figured out how the game works, click "Finish"
      October15 bat_instruction: "Freeplay: Here are some functions to play with.
        \ Can\nyou draw a bat?\r\n"
      October15 ghost 1_instruction: |
        Give the ghost eyes, using the "draw a circle"
        function.
      October15 JoL 1_instruction: |
        Program the artist to design a face for your
        jack-o-lantern!
      October15 pumpkin 1_instruction: |
        Finish this jack-o-lantern by drawing the
        eyes and nose in any style you would like.
      October15 stars 1_instruction: |
        Use loops and the "random integer" block
        to fill the night sky with stars of different shapes and sizes.
      Overworld Avoid Monsters_instruction: Att springa på en smygare är en dålig
        idé. Gå försiktigt förbi smygarna och nå tryggheten i ditt hem.
      Overworld Chop Tree_instruction: Trä är en viktig resurs. Mycket kan tillverkas
        av det. Gå till trädet och använd kommandot "förstör block" för att hugga
        ned det.
      Overworld Chop Trees_instruction: Vi måste bygga ett hus innan solen går ned.
        Hus kräver mycket träd. Hugg ned alla 3 träd.
      Overworld Free Play 20x20_instruction: Grattis! Du har klarat alla pussel! Bryt,
        bygg och skapa något unikt med allt du har lärt dig hittills.
      Overworld Free Play_instruction: Du får leka i det här landskapet. Du väljer
        vad du ska bygga.
      Overworld House Frame - A_instruction: Vi bygger ett eget hus! Den här platsen
        ser bra ut. Bygg en ram på jordblocken.
      Overworld House Frame - C_instruction: Vi bygger ett eget hus! Den här platsen
        ser bra ut. Bygg en ram på jordblocken.
      Overworld House Frame B_instruction: Ena väggen är klar, låt oss bygga resten
        av huset genom att följa din planritning! Du måste upprepa ganska mycket här.
      Overworld House Frame B2_instruction: Ena väggen är klar, låt oss bygga resten
        av huset genom att följa din planritning! Du måste upprepa ganska mycket här.
      Overworld House Frame C_instruction: Ena väggen är klar, låt oss bygga resten
        av huset genom att följa din planritning! Du måste upprepa ganska mycket här.
      Overworld House Frame Chosen_instruction: Bygg resten av ditt hus med valfritt
        material. Kommandot "Upprepa" kommer bra till hands.
      Overworld House Frame_instruction: Nu bygger vi vårt eget hus! Den här platsen
        ser bra ut. Bygg en grund på jordblocken.
      Overworld Minecart Track_instruction: Du är tillbaka på ytan med många underjordsresurser.
        Nu ska vi bygga en räls på jordvägen från ditt hus. Första steget är att rensa
        vägen. Följ vägen och ta bort träden.
      Overworld Move to Sheep_instruction: Lägg till ett till "gå framåt"-kommando
        för att komma till fåret.
      Overworld Place Wall_instruction: Varje hus börjar med en vägg. Bygg den första
        delen av ditt hus genom att lägga "placera"- och "gå framåt"-kommandona i
        upprepningsloopen.
      Overworld Plant Crops_instruction: Det är bra att planera framåt. Plantera grödor
        på båda sidor om vattnet så att du inte blir hungrig längre fram.
      Overworld Powered Minecart_instruction: Bra jobbat! Du har samlat många resurser
        och byggt ett blygsamt hem. Nu kan du lägga räls från kartans kant till din
        ytterdörr.
      Overworld Shear Sheep_instruction: Dags för fårklippning! Använd kommandot "klipp"
        för att samla ull från båda får.
      PDAlg 13-16 Sam Extension Puzzle_instruction: |
        Add a second parameter to "onscreen?"
        for Sam's y coordinate and update the function so it keeps him safe on all
        four sides.
      PDAlg 17-20 Luigi Extension Puzzle_instruction: |
        Without modifying your existing
        "cost" function, create a new "coupon" function that takes a pizza topping
        and coupon code and returns the cost of a pizza with that topping. If the
        coupon code is correct (you get to decide what it is), apply a 30% discount
        to the pizza.
      PDAlg 8-12 ex dr 1_instruction: |
        The definition in this Design Recipe doesn't
        match both examples. Test each example to see which is failing, and then fix
        the definition to match.
      PDAlg 8-12 ex dr 2_instruction: |
        This student has created two examples for
        the function "apples" but something's not quite right. How would you direct
        this student to correct their mistake?
      PDAlg 8-12 Rocket Height Puzzle_instruction: |
        Let's write a "rocket-height"
        function with simple acceleration. Write a function that ensures the rocket
        is at 15 meters at 1 second, 45 meters at 2 seconds, 95 at 3 seconds, and
        165 at 4 seconds.
      PDAlg Big Game History_instruction: |
        Now that you've played through a Big
        Game level you should see a new entry in your history. Click the Version History
        button and you should see at least one version. Each time you go back to a
        Big Game level you'll get a new record in your version history that you can
        revert back to.
      PDAlg Big Game Remix_instruction: "Here's your Big Game as you last left it.\nTry
        clicking the Remix button to spin off a new remix of your project.\r\n\r\nAny\nchanges
        you make after you click Remix will be saved on your new remix and\nnot on
        your main Big Game."
      PDAlg Design Recipe Delete_instruction: |
        Click the delete button to get rid
        of this function, then try creating and deleting a few of your own.
      PDAlg Design Recipe Examples_instruction: |
        The definition in this Design Recipe
        doesn't match both examples. Test each example to see which is failing, and
        then fix the definition to match.
      PDAlg Design Recipe Required_instruction: |
        Complete the Design Recipe for the
        "eggs" function, making sure to create and test your examples.
      PDAlg Updates Cond_instruction: |
        When you went to PD in the summer, the Conditional
        block that you were introduced to was black and allowed any data type to be
        used. This proved to be confusing, given that every other function we've
        seen always produces the same type of data. To help make conditionals clearer
        and more consistent we've replaced the single black block with a separate
        block for each data type.
      PDAlg Updates Errors_instruction: |
        Run the provided program and use the error
        messages to try and track down the bugs.
      PDAlg Updates Space_instruction: |
        Making use of limited programming space (especially
        on small screens) is challenging with a block based language. To help with
        this we've added a few features. Experiment with this provided code to see
        how the space can be manipulated to deal with larger programs.
      PDK5 Conditionals 1_instruction: |
        Purple flowers may have either 1 or 0 nectar,
        but you don't know which one! Be careful not to collect nectar from a purple
        flower if it doesn't have any. Check if the nectar is equal to 1 by using
        the if block.
      PDK5 Conditionals 2_instruction: "Try this puzzle that uses conditionals and\nloops
        together. Use the \"if\" block to decide when to turn. Hint: you only\nneed
        one more block to complete this puzzle. \n"
      PDK5 Events 1_instruction: "So far all of the programs we've written are executed\nin
        order from top to bottom. In this puzzle, we'll use \"Events\" to respond\nto
        an action on demand. Make the octopus say \"Hello\" only when you click\non
        the Octopus. \n"
      PDK5 Functions 1_instruction: |
        Hello. Me zombie artist. Me love drawing! Help
        me draw the square glasses.  Hint:  the bridge between the glasses is 25 pixels
        shorter than the square length.
      PDK5 Functions 2_instruction: Med funktioner kan du definiera nya block! Vi
        har flyttat blocken för att rita en kvadrat till en funktion som kallas "Rita
        en kvadrat". Kan du använda funktionen "Rita en kvadrat" för att skapa glasögonen?
        kvadraterna är 75 pixlar isär.
      PDK5 Loops 1_instruction: "Instead of using 5 \"move forward\" blocks, use\nthe
        \"repeat\" block with a \"move forward\" block inside of it. In computer\nscience,
        this is called a \"loop.\" \n"
      PDK5 Loops 3_instruction: |
        Here's another puzzle to practice loops. What happens
        if you use the repeat block to run the code already provided on the workspace
        4 times?
      Pixelation - Lesson 14 - Fix bit offset v.2_instruction: |
        Something happened
        to the bits in this image! Find the error and fix it! Hint: a few extra bits
        were added. You should only need to remove some bits.
      Pixelation - Lesson 14 - Fix bit offset_instruction: |
        A single extra bit was
        inserted into the stream of bits that make up the C of the Code.org logo.
        That extra bit bumps all of the other bits down the line which makes the logo
        look messed up. Hunt down the extra bit and remove it to fix the Code.org
        logo.
      Pixelation - Lesson 14 - Fix the error_instruction: |
        Something happened to
        the bits in this image!  Find error and fix it!  Hint: a few extra bits were
        added.  You should only need to remove some bits.
      Pixelation - Lesson 14 - Make the Letter A_instruction: |
        Make a 3x5 letter
        'A'. The widget is setup with the incorrect dimensions. Your first task
        is to set the second byte to the 8-bit binary code for 5: 0000 0101. Then
        start entering pixel data.
      Pixelation - Lesson 14 - Make your own B and W Image_instruction: |
        Now make
        your own image! We've started you off with a 10x10 canvas but you can make
        it whatever size you want. Happy pixeling!
      Pixelation - Lesson 14 - Make your own B&W Image_instruction: |
        Now make your
        own image! We've started you off with a 10x10 canvas but you can make it
        whatever size you want.  Happy pixeling!
      Pixelation - Lesson 15 - Color Free Play_instruction: |
        Requirements: The icon
        must be 16x16 pixels. You must use the Pixelation Widget to encode the bits
        of color information. The image must be encoded with at least 12 bits per
        pixel.
      Pixelation - Lesson 15 - Color Shades 4x4_instruction: |
        We start you out with
        the 4x4 image Maddie created in the video. Your task is to fill a 4x4 grid
        with colors using 12-bits per pixel. Here are the requirements: Row 1 - fill
        with shades of red. Row 2 - shades of green. Row 3 - shades of blue. Row 4
        - shades of gray.
      Pixelation - Lesson 15 - Color Shades_instruction: |
        We start you out with the
        row of shades of red that Maddie created in the video. Experiment with 6-bit
        color by filling in the bottom row of the image with shades of a different
        color. Here is an example with some shades of blue. Try your own color!
      Pixelation - Lesson 15 - Complete 3-bit color_instruction: |
        We start you with
        the 4x2 image Maddie was creating, but we've left out the last two squares.
        Finish off the image by figuring out which two colors are missing and encode
        them.
      Pixelation 2_instruction: |
        Something happened to the bits in this image!  Find
        error and fix it!
      Pixelation 4x4 Empty_instruction: |
        The width and height are now encoded in
        the pixel data. Can you figure out how to adjust the dimensions?
      Pixelation Bee_instruction: |
        This larger image of a bee encodes color with
        12 bits per pixel, but viewing in hex makes it easier to see the color of
        each pixel. If you switch to binary mode - hold on to your hat - it's a lot
        of bits. Here's another mind-blowing thing to try: slide the bits per pixel
        up to 24 bits per pixel. What happens? Can you explain this behavior?
      Pixelation Flappy_instruction: |
        Here is a bigger image at 9 bits per pixel.
        With 9 bits per pixel you can express 512 different colors. Click through
        to see the next image which is even more sophisticated, but easier to understand.
      Play Lab Rocket 1_instruction: |
        A rocket blasts off, traveling at 15 meters
        per second... press "Run" to see how this word problem looks as an animation.
      Play Lab Rocket 2_instruction: |
        We've started the Design Recipe for rocket-height
        using the contract and examples you just wrote. Complete the function definition
        for rocket-height and run your animation.
      Play Lab Rocket 2B_instruction: |
        A rocket blasts off, traveling at 15 meters
        per second. Using the Design Recipe, write a function called rocket-height
        that takes in a number of  seconds that have passed since the rocket took
        off, and produces the height of the rocket at that time.
      Play Lab Rocket 3_instruction: |
        Awesome, now can you update that function so
        that our rocket moves more quickly? Make sure to update the purpose statement,
        examples, and function definition to launch a rocket at 40 meters per second.
      Play Lab Rocket 4 (copy 1)_instruction: |
        Real rockets start off slowly and
        gain speed over time - let's make ours do the same! Write an exponential
        function that describes a rocket that travels at "seconds" squared meters
        per second.
      Play Lab Rocket 4_instruction: |
        Real rockets start off slowly and gain speed
        over time - so let's add some simple acceleration to ours! Can you write
        a function that describes a rocket that is at 10 meters at 1 second, 40 meters
        at 2 seconds, 90 meters at 3 seconds, 160 at 4 seconds and so on?
      Play Lab Rocket 5_instruction: |
        Much better, but let's write one more function
        with simple acceleration. This time the rocket should be 15 meters at 1 second,
        45 meters at 2 seconds, 95 at 3 seconds, and 165 at 4 seconds.
      Play Lab Rocket Free Play_instruction: |
        Free Play: Experiment with your rocket-height
        function to make the rocket fly in different ways. Click "Finish" when you
        are done.
      Ryan - 4-5 Bee Conditionals 2_instruction: Biet vill bara ha nektar just nu.
        Inte alla saker är blommor, så kolla under ALLA MOLN för att se om det döljer
        en blomma. Om det gör det kan du samla nektar.
      Ryan Test Locked Blocks_instruction: Här är en funktion som kallas "patrol."
        Redigera den för att flytta Katt 400 pixlar upp och sedan ner 400 pixlar.
      Ryan's clone of C4S15P10_instruction: "We've added one last function for you.\n\r\n\r\nUse
        an \"if\" statement to program your game to call the \"level_up\"\nfunction
        only when \"player_score\" becomes greater than a certain number.\r\n\r\nFor\nexample:
        \"player_score\" > 6\r\n\r\nPlay the game, and make it past level\n4 to move
        to the next puzzle. "
      Sam the Butterfly 1 (copy 1)_instruction: |
        This butterfly is named Sam, and
        the game area is Sam’s yard. Sam's yard is 400 pixels wide by 400 pixels
        tall! As you can see, Sam is free to walk around the yard, and the coordinates
        at the top of the screen update to tell you his location. Use the arrow keys
        to move sam around his yard. Help Sam collect all of the flags to move on.
      Sam the Butterfly 1_instruction: |
        This bat is named Sam, and the game area
        is Sam’s yard. Sam's yard is 400 pixels wide by 400 pixels tall! As you can
        see, Sam is free to walk around the yard, and the coordinates at the top of
        the screen update to tell you his location. Click "Run" and then use the
        arrow keys to move Sam around his yard, making note of Sam's coordinates
        at different locations. Click "Finish" when you're ready to move on.
      Sam the Butterfly 2_instruction: |
        Sam's mom wants to make sure that she can
        always see at least a bit of him, so lets write some functions that help make
        sure he doesn't go too far out of the yard. Here's a function called safe-left?
        - it should take a Number for its domain that represents Sam's x-coordinates
        and return true if he's completely visible on screen. If your function works,
        Sam shouldn't be able to leave the yard from the left side.
      Sam the Butterfly 3_instruction: |
        In the last puzzle we kept Sam from leaving
        on the left, now let's do the same thing on the right. Complete the safe-right?
        function to make sure Sam can't go off the right side of the screen.
      Sam the Butterfly 4_instruction: |
        Huh, we can keep Sam from leaving on the
        left, or we can keep him from leaving on the right, but how can we keep him
        safe from leaving both directions? Try using the and block to program the
        function on-screen? to check if Sam is safe-left? and safe-right?
      Sam the Butterfly 5_instruction: |
        Free Play: Awesome, we've kept Sam safe
        on the left and right! Use this free play stage to experiment with your functions
        and further improve onscreen?
      Sam the Butterfly 6_instruction: |
        We've added a new parameter "y" to the
        "on-screen?" function. Update the function so that it checks that "safe-left?"
        AND "safe-right?" AND "safe-up?" are all true. When you've fixed the
        function, try going out of the yard from the left, right, and top sides.
      Sam the Butterfly 7_instruction: |
        Only one last direction to worry about! Create
        a "safe-down?" function and update the "on-screen?" function so that it
        checks up, down, left, and right.
      Sam the Butterfly Complete_instruction: |
        Only one last direction to worry about!
        Create a "safe-down?" function and update the "on-screen?" function so
        that it checks up, down, left, and right.
      scrat 16 (copy 1)_instruction: |
        Acorn! Acorn! Acorn! Use an "if" block to
        get me there with the fewest number of blocks.
      scrat 16_instruction: Ekollon! Ekollon! Ekollon! Använd ett "om"-block för att
        få mig dit med så få block som möjligt.
      scrat 17 (copy 1)_instruction: |
        Ok, let's do that again for practice - this
        isn't very different, but watch out for the <insert obstacle name for Scrat>!
      scrat 17_instruction: Okej, vi tränar lite till – denna omgång är ganska lik
        den förra, men se upp för väggen!
      scrat 18 (copy 1)_instruction: |
        The "If-else" blocks checks a condition,
        and then does one thing OR another. To get me to the acorn try to use this
        new block.
      scrat 18_instruction: '"Om-annars"-block kontrollerar ett villkor, och gör sedan
        en sak ELLER en annan. För att få mig till ekollonet: försök att använda detta
        nya block.'
      scrat 19 (copy 1)_instruction: |
        One more practice of the "if-else" block,
        can you get it right on your first try?
      scrat 19_instruction: En till övning av "om-annars"-blocket. Kan du få det rätt
        på första försöket?
      scrat 20_instruction: Kan du lägga till endast 3 block för att hjälpa mig att
        lösa en mer komplex labyrint? Om du gör det rätt, så kan jag gå en kurvig
        väg oavsett längd. Skynda! Isen smälter!
      SpecialFrozenLevel_instruction: Du har officiellt blivit en mästare! Skapa ett
        vinterlandskap.
      Standalone_Artist_1_instruction: Välkommen till Artist! Först och främst, låt
        oss försöka göra en enkel kvadrat med 'sväng höger' block och 'gå framåt'
        block. Varje sida ska vara 100 bildpunkter lång.
      Standalone_Artist_2_instruction: Rita denna diamant med 120 och 60 graders vinklar
        och 150 pixlar långa sidor.
      Standalone_Artist_3_instruction: Kan du rita denna hexagon med 100 pixlar långa
        sidor och 60 graders vinklar?
      Standalone_Artist_4_instruction: Nu har du fått ett nytt block att leka med,
        slingan(loop). Den upprepar en uppsättning kommandon. Vad händer om du upprepar
        dessa kommandon 6 gånger?
      Standalone_Artist_5.5_instruction: 'Lägg märke till hur vi förenklat diamant
        koden genom att köra den i en loop. Du kan upprepa hela sekvensen 12 gånger
        för att rita blomman. Tips: Du måste svänga 30 grader efter din diamant-loop
        så du inte ritar över samma diamant.'
      Standalone_Artist_5_instruction: Hur många gånger behöver du loopa denna diamant
        för att rita en blomma?
      Standalone_Artist_6_instruction: 'Loopa den här hexagon-koden 6 gånger för att
        skapa dess utseende. Hur många grader måste du svänga varje gång? Tips: dividera
        antalet grader i en cirkel med antalet gånger du loopar.'
      Standalone_Artist_7_instruction: 'En funktion är ett annat programmerings- verktyg
        som hjälper dig att undvika att upprepa dig själv. Denna funktion ritar en
        blomma, så du kan använda den varje gång du vill rita en blomma. Använd detta
        och det nya hoppa-blocket för att rita dessa blommor. Tips: Blommorna är 150
        pixlar från varandra'
      Standalone_Artist_8_instruction: Här är en funktion som kallas "Rita en form"
        som vi har programmerat till att rita hexagoner. Kör koden för att se vad
        den gör och experimentera med funktionen för att se vad som händer. Kan du
        göra så att denna funktion ritar ett mönster av kvadrater, trianglar eller
        oktagoner?
      Standalone_Artist_9_instruction: Gå vidare nu och rita vilken bild du vill!
        Du har även en tom funktion som du kan göra vad du vill med!
      Standalone_Artist_v2_instruction: Välkommen till Artist! Först och främst, låt
        oss försöka göra en enkel kvadrat med 'sväng höger' block och 'gå framåt'
        block. Varje sida ska vara 100 bildpunkter lång.
      template test_instruction: what up
      Test Play Lab_instruction: This is a test play lab level.
      test_sarah_instruction: hi
      Text Compression 1_instruction: |
        Look for patterns (repeated words or phrases)
        in the text. Enter the patterns you see into the dictionary on the right.
        As you type entries into the dictionary, the symbol for the entry is inserted
        into the text in place of the pattern.
      Total Artist Clone Me_instruction: |
        Freeplay: Here are the functions you've
        written, and some more for you to play with. Draw something awesome! Play
        with the pen width to see how different your drawings look!
      U1L10 NetSim numbers with decimal_instruction: |
        Invent and test a protocol
        for encoding and sending text messages. Your protocol must include the letters
        a-z, spaces, and common punctuation marks. You may add additional characters
        if you wish. See the worksheet handed out by your teacher for more detailed
        instructions!
      U1L11 NetSim numbers with Ascii_instruction: |
        Work with a partner or in a small
        team to develop a protocol that allows you to send formatted text. See the
        worksheet handed out by your teacher for more detailed instructions!
      U1L13 Text Compression_instruction: |
        Look for patterns (repeated words or phrases)
        in the text. Enter the patterns you see into the dictionary on the right.
        As you type entries into the dictionary, the symbol for the entry is inserted
        into the text in place of the pattern.
      U1L4 NetSim SendAB_instruction: "Develop, document, and test a protocol that\nallows
        you to use Internet Simulator to relay a message. See the worksheet\nfor more
        detailed instructions.  \n"
      U1L8 NetSim numbers no decimal_instruction: Default instructions
      U1L8 NetSim numbers with decimal_instruction: |
        With your partner, develop a
        protocol or set of rules for communicating a drawing using only bits. See
        the worksheet handed out by your teacher for more detailed instructions!
      U2 frequency caesar_instruction: Instruktioner
      U2 frequency random sub_instruction: Instruktioner
      U2 vigenere cipher_instruction: Instruktioner
      U2 Vigenere_instruction: Test
      U2L04 - NetSim Routers with Addresses_instruction: |
        Send messages with your
        classmates (Click to see full instructions)
      U2L05 - NetSim - Packets and Building TCP_instruction: "Develop a Protocol\nfor
        Reliably Sending a Message.\r\n\r\nConstraints:\r\n- Packets may contain\nonly
        6 characters\r\n- Packets may drop with small probability\r\n- Packets\nmay
        not arrive in order"
      U2L10 NetSim Automatic DNS_instruction: |
        In this version of the Internet Simulator,
        a Domain Name System (DNS) is provided for you and knows the IP addresses
        of all connected computers. Send a message in the form GET [hostname] to the
        DNS service at address <yourRouterNumber>.15 to get a student's address.
      U2L10 NetSim Manual DNS_instruction: |
        In this version of the simulator you
        can't see the other students' addresses.  Instead, one of you must act as
        a name service, to help share addresses with each other.
      U2L14 frequency random_instruction: Test
      U2L2 NetSim Hub Mode_instruction: "Now use the Internet Simulator to send the\nbattleship
        moves. For setup, join a Room with your group, and add ships to\nyour paper
        board for each opponent. When playing, all communication must be\ndone through
        the tool, so no talking, but have fun!\r\n"
      U2L3 NetSim Hub Mode_instruction: |
        Use the Internet Simulator to test out your
        group's binary communication protocol for battleship. How short can you make
        the message and response?
      U2L4 NetSim Routers Addresses_instruction: "For this activity, connect to a\nrouter
        with the others in your group. Important note: The router will only\nproperly
        route messages where the first 4 bits are the To: address and the\nsecond
        4 bits are the From: address.\r\n\r\n[TODO: NetSim needs to support\nhierarchical
        addresses. For now, level is set up for 4 bit to and from addresses]"
      U2L5 NetSim Classroom Internet_instruction: "For this activity, connect to\na
        router with the others in your group. The Internet Simulator now provides\na
        place for you to put the To and From addresses, so you don't have to type\nout
        the bits manually.\r\n\r\n"
      U2L7 NetSim Need for Packets_instruction: |
        Transfer your favicon to a partner
        across a network in which the larger a packet grows, the more likely it is
        to be dropped.
      U3 - Arrays - appendItem_instruction: |
        Create an array of odd numbers 1-11
        by using appendItem. (Click to see full instructions)
      U3 - Arrays - assignment_instruction: |
        Use indices to change the values in
        this array from 1 to 0. (Click to see full instructions)
      U3 - Arrays - assignment2_instruction: |
        Calculate the sum of three values stored
        in an array. (Click to see full instructions)
      U3 - Arrays - assignment3_instruction: |
        Increase the value of each value in
        the randomly generated array by 1. (Click to see full instructions)
      U3 - Arrays - createFirstArray_instruction: |
        Create an array of the even numbers
        from 0-10 and display its contents with console.log. (Click to see full instructions)
      U3 - Arrays - Demo App_instruction: |
        Use the "My Favorite Things" app. How
        might this app be making use of an array? (Click to see full instructions)
      U3 - Arrays - expressionsAsIndexes_instruction: |
        Write a program that displays
        a randomly chosen color from the array. (Click to see full instructions)
      U3 - Arrays - favThings addItem_instruction: |
        Write code that allows a user
        to add their own favorite things to the list. (Click to see full instructions)
      U3 - Arrays - favThings bounds_instruction: |
        Add if statements to your event
        handlers that prevent the global index from going out of bounds. (Click to
        see full instructions)
      U3 - Arrays - favThings Counting Variable_instruction: |
        Create a global variable
        for the current index and use it to display the first item in the array. (Click
        to see full instructions)
      U3 - Arrays - favThings createArray_instruction: |
        Create an array of words
        describing your favorite things. (Click to see full instructions)
      U3 - Arrays - favThings firstOutput_instruction: |
        Use setText to display the
        first item in the array. (Click to see full instructions)
      U3 - Arrays - favThings giveIDs_instruction: |
        Give your UI elements descriptive
        and meaningful IDs. (Click to see full instructions)
      U3 - Arrays - favThings keepPlaying_instruction: |
        Make any other improvements
        you want! (Click to see full instructions)
      U3 - Arrays - favThings Next_instruction: |
        Write code that allows the user
        to move forward through your list by clicking the "Next" button. (Click
        to see full instructions)
      U3 - Arrays - favThings Prev_instruction: |
        Write code that allows the user
        to move backward through your list by clicking the "Last" button. (Click
        to see full instructions)
      U3 - Arrays - favThings template_instruction: |
        Give your UI elements descriptive
        and meaningful IDs. (Click to see full instructions)
      U3 - Arrays - globalVariableIndex_instruction: |
        Give your UI elements descriptive
        and meaningful IDs. (Click to see full instructions)
      U3 - Arrays - indexPractice_instruction: |
        Write the contents of the array to
        the screen in numerical order. (Click to see full instructions)
      U3 - Arrays - insertingItems_instruction: |
        Insert items into an array to form
        a complete sentence. (Click to see full instructions)
      U3 - Arrays - insertionErrors_instruction: |
        Run each command that references
        indexes that are out of bounds and observe the results. (Click to see full
        instructions)
      U3 - Arrays - introIndex_instruction: |
        Display the first and last element in
        the array. Display the number 5 from the array. (Click to see full instructions)
      U3 - Arrays - length_instruction: |
        Use list.length to determine the length
        of each array. (Click to see full instructions)
      U3 - Arrays - lengthMinus1_instruction: |
        Use list.length - 1 to log the last
        item in the array to the console. (Click to see full instructions)
      U3 - Arrays - remove_instruction: |
        Remove items from an array to form a complete
        sentence. (Click to see full instructions)
      U3 - Arrays - stringsInArrays_instruction: |
        Write a sentence word by word by
        adding strings to an array. (Click to see full instructions)
      U3 - Canvas - 200dots_instruction: |
        Add a loop to your program that draws 200
        dots on your canvas. (Click to see full instructions)
      U3 - Canvas - appendToArray_instruction: |
        Create an array to store each event
        parameter. Append each event parameter to this array within your event handler.
        (Click to see full instructions)
      U3 - Canvas - changeToMouseMove_instruction: |
        Change your program so that dots
        are drawn at the location of the mouse as the user moves the mouse on the
        canvas. (Click to see full instructions)
      U3 - Canvas - clickToAdd_instruction: |
        Change your program so that dots are
        added to the canvas when the user clicks on it. (Click to see full instructions)
      U3 - Canvas - delete_instruction: |
        Create a button that deletes the drawing
        by clearing the canvas and removing all stored values. (Click to see full
        instructions)
      U3 - Canvas - draw at click point_instruction: |
        Change your program so that
        dots are drawn at the location of the mouse click. (Click to see full instructions)
      U3 - Canvas - freePlay_instruction: |
        Write code that redraws your image using
        a sketch effect. (Click to see full instructions)
      U3 - Canvas - introCanvas_instruction: |
        Add a canvas to your app and set it
        to be the active canvas. Then add a large dot to your canvas. (Click to see
        full instructions)
      U3 - Canvas - movementFunction fix Orig_instruction: |
        Write a function that
        takes the movement of the mouse as input and generates a line width as output.
        (Click to see full instructions)
      U3 - Canvas - movementFunction_instruction: |
        Write a function that takes the
        movement of the mouse as input and generates a line width as output. (Click
        to see full instructions)
      U3 - Canvas - One Dot sprayPaint_instruction: |
        Write code that redraws your
        image using a dot whose x and y locations use offsetX and offsetY with small
        random value added. (Click to see full instructions)
      U3 - Canvas - redrawOriginal_instruction: |
        Write a function that processes
        your array, redrawing the dots as they originally appeared. (Click to see
        full instructions)
      U3 - Canvas - redrawRandom_instruction: |
        Set up a button and event handler
        for the random function. (Click to see full instructions)
      U3 - Canvas - redrawRandom2_instruction: |
        Write a function that processes your
        array, redrawing every dot with a random size. (Click to see full instructions)
      U3 - Canvas - shiftKey_instruction: |
        Add an if statement to your event handler
        so dots are only drawn when the shift key is pressed. (Click to see full instructions)
      U3 - Canvas - sketch_instruction: |
        Write code that redraws your image using
        a sketch effect. (Click to see full instructions)
      U3 - Canvas - sprayPaint_instruction: |
        Update the spray paint code so that
        redraws your image using multiple random dots instead of one using a nested
        for loop. (Click to see full instructions)
      U3 - Canvas - transparentDots_instruction: |
        Change the colors of your dots
        so they have a fully transparent stroke and partially transparent fill. (Click
        to see full instructions)
      U3 - Canvas - usingOffsetXY_instruction: |
        Add a console.log command inside
        the function of your event handler. Use it to display the event parameter.
        Click on the screen to see the contents of the event parameter (Click to see
        full instructions)
      U3 - Conditional Basics - 6_instruction: |
        Add a setText after the if statement
        to "Nope. Guess again." (Click to see full instructions)
      U3 - Conditionals - Combine AND and OR_instruction: |
        Write an if statement
        that uses AND and OR to display "Time to go to school!" if it's not the
        weekend and the user is under 18. (Click to see full instrucitons.
      U3 - Conditionals - Combine AND OR and NOT_instruction: |
        Write an if statement
        that uses AND and OR to display "Time to go to school!" if it's not the
        weekend and the user is under 18. (Click to see full instrucitons.
      U3 - Conditionals - Combine AND OR Simple_instruction: |
        Write an if statement
        that uses AND and OR to display "Sleep in!" if it's the weekend and the
        user is a teenager. (Click to see full instructions.
      U3 - Conditionals - intoOr_instruction: |
        Add 2 if statements that use the OR
        operator. (Click to see full instructions)
      U3 - Conditionals - introAND_instruction: |
        Add 2 if statements that use the
        OR operator. (Click to see full instructions)
      U3 - Conditionals - Simple AND_instruction: |
        Write an if statement that uses
        AND to display "You are a teenager." if the user enters an age between 13
        and 19. (Click to see full instructions)
      U3 - Conditionals - Simple OR_instruction: |
        Write an if statement that uses
        OR to display "It's the weekend!" if the user enters a weekend day at the
        prompt. (Click to see full instructions)
      U3 - Design Mode - Console Log_instruction: |
        Update the ID names and `console.log`
        messages to match the correct button. (Click to see full instructions.)
      U3 - Design Mode - Layers and Delete_instruction: |
        Fix the layout of the bullseye
        game. (Click to see full instructions)
      U3 - Design Mode - Multi Screens 2_instruction: |
        Make a 2 screen app which
        can switch back and forth between a black screen and a white screen using
        buttons. (Click to see detailed instructions.)
      U3 - Design Mode - Multi Screens_instruction: |
        Make a 2 screen app with a black
        screen and a white screen. (Click to see detailed instructions)
      U3 - Design Mode - Other Events_instruction: |
        Delete the button and make the
        image move to a random location when you click on it. (click to see detailed
        instructions)
      U3 - Design Mode - WTF Console Log_instruction: |
        Add a 3 console.log messages
        and test them out. (Click to see full instructions.)
      U3 - Design Mode -Recreate Beyond Buttons_instruction: |
        Recreate the game from
        the "Chaser Game" with a Welcome Screen and Game Over Screen. (Click to
        see full instructions.)
      U3 - Design Mode 1_instruction: |
        Add a large red button to your screen using
        Design Mode. (Click for full instructions.)
      U3 - Dice - Dropdown and Score_instruction: |
        Add guess and score to the Dice
        Game (Click to see full instructions)
      U3 - Dice - Dropdown with Strings_instruction: |
        Add a dropdown for difficulty
        level that prints the difficulty level in the console. (Click to see full
        instructions)
      U3 - Dice - If_instruction: |
        Show different die images for the random number
        generated. (Click to see full instructions)
      U3 - Dice - Nested_instruction: |
        Use nested if statements to make the scoring
        different for the different game levels. (Click to see full instructions)
      U3 - High Low - Debug_instruction: |
        Debug the order of the conditionals so
        that it will actually tell the user when their guess is close. (Click to see
        full instructions)
      U3 - High Low - Dropdown_instruction: |
        Add a dropdown for their guess instead
        of promptNum (Click to see full instructions)
      U3 - High Low - Else if_instruction: |
        Add an else-if statement in order to
        tell the user if their guess is high or low instead of just wrong. (Click
        to see full instructions)
      U3 - High Low - Else_instruction: "Add an else statement so that the program\nwill
        tell the user when they are right and when they are wrong. (Click to\nsee
        full instructions)\r\n"
      U3 - High Low - If_instruction: |
        Add code to the if statement that indicates
        the user guessed the secret number. (Click to see full instructions)
      U3 - Keys - Add Image URLs_instruction: |
        Add image URLs to your array. Replace
        the text area with an image and setText with setImageURL. Then test your app!
        (Click to see full instructions)
      U3 - Keys - Buttons and Keys_instruction: |
        Have the program respond the same
        way for both clicking images on the screen and hitting the up and down keys
        on the keyboard. (Click to see full instructions)
      U3 - Keys - Demo App_instruction: |
        Play with the image scroller. Press the
        left and right arrows to progress through the images.
      U3 - Keys - Final Image Scroller_instruction: |
        Update the image scroller to
        respond to buttons and key presses. (Click to see full instructions)
      U3 - Keys - Functions_instruction: |
        Write a doUpArrow and doDownArrow function
        and call the functions instead of duplicating the code. (Click to see full
        instructions)
      U3 - Keys - Key Up and Down_instruction: |
        Try out the keyup and keydown events
        to see how they are different from keypress. (Click to see full instructions)
      U3 - Keys - Multiple Keys_instruction: |
        Play a different sound when the down
        arrow is pressed. (Click to see full instructions)
      U3 - Keys - Practice Adding Images with URL_instruction: |
        Add image URLs to
        your image array. Test out the add button. Style your image scroller. (Click
        to see full instructions)
      U3 - Keys - Words to Images_instruction: |
        Add image URLs to your image array.
        Test out the add button. Style your image scroller. (Click to see full instructions)
      U3 - Loops -  9 Part 2_instruction: |
        Change the boolean expression for the
        while loop so that it will roll until both dice are greater than 3. (Click
        to see full instructions)
      U3 - Loops -  Complex Condition_instruction: |
        Change the boolean expression
        for the while loop so that it will stop when both dice are greater than or
        equal to 5. (Click to see full instructions)
      U3 - Loops - 1_instruction: |
        Change the condition for the while loop to check
        if the variable num is less than 90. (Click to see full instructions)
      U3 - Loops - 10_instruction: |
        Write a program that, if the sum of the dice
        is a 7 or 11, rolls again and keeps rolling until the sum is not 7 or 11.
        (Click to see full instructions)
      U3 - Loops - 11_instruction: |
        Fix the condition so that it keeps rolling the
        die as long as the value is not a 2 or a 3 instead of rolling infinitely.
        (Click to see full instructions)
      U3 - Loops - 12_instruction: |
        Change the code so that it prints the string
        "Hi" 5 times. (Click to see full instructions)
      U3 - Loops - 13_instruction: |
        Update the code to count up by 3 instead of 1.
        (Click to see full instructions)
      U3 - Loops - 14_instruction: |
        Change the loop condition to prevent the infinite
        loop and stop counting at once the count is past 30. (Click to see full instructions)
      U3 - Loops - 15_instruction: |
        Count the number of times the sum of the dice
        is 12. (Click to see full instructions)
      U3 - Loops - 16_instruction: |
        Find out how many times you have to roll to get
        the sum of 7 100 times (Click to see full instructions)
      U3 - Loops - 2_instruction: |
        Try creating an infinite loop using !=, > and
        <. (Click to see full instructions)
      U3 - Loops - 3_instruction: |
        Change the if statement to a while loop so the
        program will run until it rolls a 6. (Click to see full instructions)
      U3 - Loops - 4_instruction: |2
         Use the Debug Commands to to make a list of all
        the values rolled before a 6. (Click to see full instructions)
      U3 - Loops - 5_instruction: |
        Add code inside the while loop which will update
        the variable num so that the condition will eventually become false. (Click
        to see full instructions)
      U3 - Loops - 6_instruction: |
        Fix the problem so the loop will run at least
        once. Change the initial value of num to a dummy value such as -1. (Click
        to see full instructions)
      U3 - Loops - 7_instruction: |
        Without adding any lines of code, reorder the
        code so that it prints all the values of num. (Click to see full instructions)
      U3 - Loops - 8_instruction: |
        Debug which number is not getting printed and
        add a write statement to display that value. (Click to see full instructions)
      U3 - Loops - 9_instruction: |2
         Modify the condition so that it keeps rolling
        as long as both are less than 3. (Click to see full instructions)
      U3 - Loops - Continue_instruction: |2
         Use the Debug Commands to to make a list
        of all the values rolled before a 6. (Click to see full instructions)
      U3 - Loops - minus = operator_instruction: |
        Update the code to use the -= operator
        to count from 30 down to 0 by 3's. (Click to see full instructions)
      U3 - Loops - Minus Minus_instruction: |
        Change the code to count down from 10
        to 1. (Click to see full instructions)
      U3 - Loops - plus and minus = operator_instruction: |
        Update the code to use
        the += operator. (Click to see full instructions)
      U3 - Loops - Plus Plus_instruction: |
        Change the code to use count++ instead
        of count = count + 1.  (Click to see full instructions)
      U3 - Loops - Typing in Console_instruction: |
        Use console to check the ending
        value of num. (Click to see full instructions)
      U3 - Loops And Arrays - Add 5_instruction: |
        Add 5 to all the values in an array
        (Click to see full instructions)
      U3 - Loops And Arrays - Challenge 1_instruction: |
        Write a function that finds
        and returns the minimum value in an array.   (Click to see full instructions)
      U3 - Loops And Arrays - Challenge 2_instruction: |
        Write a function that finds
        and returns the minimum value in an array.   (Click to see full instructions)
      U3 - Loops And Arrays - Counting Times_instruction: |
        Count the number of times
        5 appears in an array. (Click to see full instructions)
      U3 - Loops And Arrays - Divid by 2_instruction: |
        Divide every value in the
        array by 2. (Click to see full instructions)
      U3 - Loops And Arrays - Find Max_instruction: |
        Design a function that displays
        the smallest number in an array  (Click to see full instructions)
      U3 - Loops And Arrays - Find Min_instruction: |
        Complete the 'findMinVal'
        function to find and display the smallest value in an array  (Click to see
        full instructions)
      U3 - Loops And Arrays - Functions that Return Value_instruction: |
        Call findMin
        within the console.log statement to calculate the minimum of two values.  (Click
        to see full instructions)
      U3 - Loops And Arrays - General Search Param_instruction: |
        Add a second parameter
        to the 'search' function for the value to search for.  (Click to see full
        instructions)
      U3 - Loops And Arrays - Intro For Loop_instruction: |
        Add a for loop with a
        console.log inside and test out the 3 pieces of the for loop. (Click to see
        full instructions)
      U3 - Loops And Arrays - Linear Search_instruction: |
        Visit every element in
        the array and display 'true' if the value is a 5, and 'false' otherwise.
        (Click to see full instructions)
      U3 - Loops And Arrays - Loop Array If_instruction: |
        Use an if statement to
        only display the values in the array that are greater than 5. (Click to see
        full instructions)
      U3 - Loops And Arrays - Make it a Function - add list parameter_instruction: |
        Create
        a function that takes a list parameter and prints if the list contains a 5.
        (Click to see full instructions)
      U3 - Loops And Arrays - Make it a Function_instruction: |
        Move the code that
        searches the list for a 5 into a function called 'search'. (Click to see
        full instructions)
      U3 - Loops And Arrays - Multiple Returns_instruction: |
        Test out the return
        values of the findMax function.  (Click to see full instructions)
      U3 - Loops And Arrays - Print Array_instruction: |
        Use a for loop to print out
        all the values in an array. (Click to see full instructions)
      U3 - Loops And Arrays - Printing Single True_instruction: |
        Process the array
        and display a single 'true' if the array contains a 5 or a single 'false'
        if it does not.  (Click to see full instructions)
      U3 - Loops And Arrays - Return Index_instruction: |
        Make the search function
        return the index of the search value in the array. (Click to see full instructions)
      U3 - Loops And Arrays - Return Value_instruction: |
        Use constrain in this simple
        app to keep the turtle from driving off the screen.  (Click to see full instructions)
      U3 - Loops And Arrays - Search and Remove_instruction: |
        Search for 5 in the
        array and remove it from the array. (Click to see full instructions)
      U3 - Loops And Arrays - Search with Boolean Var_instruction: |
        Make a boolean
        variable to use as a flag to keep track of whether there is a 5 in the array.
        (Click to see full instructions)
      U3 - Loops And Arrays - useFindMin_instruction: |
        Call findMin within the console.log
        statement to calculate the minimum of two values.  (Click to see full instructions)
      U3 - Movie Bot - Multiple If Sequences_instruction: |
        Add another set of if,
        else if, and else statements inside the question if statement to check for
        keywords for movie ratings (G, PG, PG-13, and R). (Click to see full instructions)
      U3 - Movie Bot - Nested Motivation_instruction: |
        Add a separate set of if statements
        to check for a "?" in the input. (Click to see full instructions)
      U3 - Movie Bot - toLowerCase_instruction: |
        Use the toLowerCase command to change
        all user input into lowercase letters after they enter it. (Click to see full
        instructions)
      U3 - Movie Bot - When Multiple If Statements_instruction: |
        Add an if and else-if
        statement that checks for please and thank you. (Click to see full instructions)
      U3 - Practice Create Performance Task_instruction: |
        Design and implement your
        practice Create Performance Task. (Click to see full instructions)
      U3 - Return Values - constrainTurtle_instruction: |
        Use constrain in this simple
        app to keep the turtle from driving off the screen.  (Click to see full instructions)
      U3 - Return Values - debuggingConstrain_instruction: |
        Correct the error in
        constrain so that it correctly reports the maximum value.  (Click to see full
        instructions)
      U3 - Return Values - debuggingMaxVal_instruction: |
        Correct the error in maxVal
        so that it correctly reports the maximum value.  (Click to see full instructions)
      U3 - Return Values - debuggingReturns_instruction: |
        Correct the error in maxVal
        so that it correctly reports the maximum value.  (Click to see full instructions)
      U3 - Return Values - increase1_instruction: |
        Call the increase function within
        moveForward, write, and console.log.  (Click to see full instructions)
      U3 - Return Values - increase2_instruction: |
        Change the increase function to
        return 3 times the input value. (Click to see full instructions)
      U3 - Return Values - min1_instruction: |
        Test out the return values of the findMax
        function.  (Click to see full instructions)
      U3 - Return Values - useFindMin_instruction: |
        Call findMin within the console.log
        statement to calculate the minimum of two values.  (Click to see full instructions)
      U3 - Return Values - useMinVal_instruction: |
        Call minVal within the console.log
        statement to calculate the minimum of two values.  (Click to see full instructions)
      U3 - Return Values - wrapTurtle_instruction: |
        Write wrap in this simple app
        to let the turtle "wrap" to the other side of the screen when it goes off.  (Click
        to see full instructions)
      U3 - Return Values - writeMaxVal_instruction: |
        Write the function maxVal and
        then use it within the console.log statement to calculate the maximum of two
        values.  (Click to see full instructions)
      U3 - Simulation - 1_instruction: |
        Use a while loop to "flip a coin 10 times"
        and write the values to the screen. (Click to see full instructions)
      U3 - Simulation - 2.1_instruction: |
        Change your looping condition so the simulation
        runs until there are 5 heads flipped. (Click to see full instructions)
      U3 - Simulation - 2.5_instruction: |
        Run your simulation to get the full 10,000
        flips! How long did it take? (Click to see full instructions)
      U3 - Simulation - 2_instruction: |
        Keep track of how many heads (1's) your
        program generates and print the results to the screen. (Click to see full
        instructions)
      U3 - Simulation - 3_instruction: "Add functionality that counts how many heads\nin
        a row are flipped. (Click to see full instructions)\r\n"
      U3 - Simulation - 4_instruction: |
        Update your while loop's condition so the
        the coin flips until there are three heads in a row. (Click to see full instructions)
      U3 - Simulation - 5_instruction: |
        Change your while loop to run until you get
        a streak of 12 heads. How many flips did it take? (Click to see full instructions)
      U3 - Simulation - 6_instruction: |
        Keep adding to your simulation. What do you
        want to explore next? (Click to see full instructions)
      U3 - Simulation - App_instruction: |
        Change your code to run the full simulation
        with 10,000 coins. What was your longest streak of heads? (Click to see full
        instructions)
      U3 - Simulation - Template_instruction: |
        Use a while loop to "flip 10 coins"
        and write them to the screen. (Click to see full instructions)
      U3 - User Input - Save getText To Variable_instruction: |
        Save the age and name
        of the user in variables (Click to see full instructions)
      U3 - User Input - Saving After Input_instruction: |
        Save the age of the user
        in a variable using getText() (Click to see full instructions)
      U3 - User Input and String -  Concat_instruction: |
        Output a message about age
        in a Text Area (Click to see full instructions)
      U3 - Variables - Clicker Game_instruction: |
        Create your improved Chaser-Game
        here. (Click to see full instructions)
      U3 - Variables - Debug Scope_instruction: |
        Why isn't the value of foo changing
        correctly? Make a guess. (Click to see full instructions)
      U3 - Variables - Debugging with Turtle_instruction: |
        Use your new debugging
        techniques to get the code to run correctly (Click to see full instructions)
      U3 - Variables - Decrement_instruction: |
        Decrement the value of the variable.
        (Click to see full instructions)
      U3 - Variables - Identify Variables_instruction: |
        Identify the values printing
        in the terminal with console.log statements. (Click to see full instructions)
      U3 - Variables - Increment_instruction: |
        Use the console.log debugging technique
        to see what is happening in this example. Add another variable and increment
        its value. (Click to see full instructions)
      U3 - Variables - Incrementing Variables_instruction: |
        Create a repeat loop
        for the repeated code and use increment to recreate the original program with
        less lines of code! (Click to see full instructions)
      U3 - Variables - Read Using Turtle_instruction: |
        Create a second set of variables
        for x and y position. Move turtle to that new location. (Click to see full
        instructions)
      U3 - Variables - Reassigning Variables with Console.log_instruction: |
        Add another
        reassignment statement at the end of the code to change the value of the variable
        at second time. (Click to see full instructions)
      U3 - Variables - Set to Expression with Other Variables and Turtle_instruction: |
        (click
        to see full instructions)
      U3 - Variables - Set to Expression with Other Variables_instruction: |
        Write
        an expression that calculates the player's total score and stores it in the
        totalScore variable. The calculation is: the player's points times lives
        divided by the total time. (click to see full instructions)
      U3 - Variables - Set to Expression with Turtle_instruction: |
        (click to see
        full)
      U3 - Variables - Set to Expression_instruction: |
        Test out the new expressions.
        (Click to see full instructions)
      U3 Digital Assistant Design_instruction: |
        Pick a topic for your Digital Assistant
        and create the basic layout with a text input and text area. (Click to show
        full instructions)
      U3 Digital Assistant Set Text_instruction: |
        Have your digital assistant repeat
        back what the user types and include a canned response. (Click to see full
        instructions)
      U3 Digital Assistant Target - Mehal_instruction: |
        Try out a demo of the Digital
        Assistant!
      U3 Digital Assistant Target_instruction: Try out a demo of the Digital Assistant!
      U3 Digital Assistant Template_instruction: This is a project template!
      U3 Digital_instruction: |
        Choose a specialization topic for your digital assistant.
        Create a basic digital assistant that takes the user's input and displays
        back a default response.
      U3 full clicker demo_instruction: Clicker game - Try it out!
      U3 mehal's clone_instruction: Try out a demo of the Digital Assistant!
      U3- Variables - Assign Random For Turtle Draw_instruction: |
        Try writing the
        same code in text mode.
      U3- Variables - Changing the Value_instruction: |
        Update the value of 'turnAmount'
        before each moveForward so the turtle turns a different amount each time.
        (Click to see full instructions)
      U3- Variables - Create And Assign_instruction: |
        On one line add a variable
        called "lives" and assign it the value 3. Print it to the console. (Click
        to see full instructions)
      U3- Variables - Text Mode_instruction: |
        1. Switch to text mode and type instructions;
        2. drag blocks out into text mode; 3. experiment with code completion
      U3-Design Mode-ID and Event Handler_instruction: |
        Add an event handler for
        the button using the "Insert and show" link in the Design Mode Events tab.
        (Click to see full instructions).
      U3-Design Mode-ID_instruction: |
        Using the Design Mode Events change the button
        ID and update the code to match. (Click to see detail instructions).
      U3-Design Mode-Image_instruction: |
        Recreate the "Chaser Game" from the last
        lesson using Design Mode. (Click to see full instructions.)
      U313 drag Two Buttons_instruction: |
        Run a program with two buttons that have
        the same id to see the warning message in the console. Change the ids to make
        the program run without getting a warning message.
      U313 eventsDetails_instruction: |
        Run a program with two buttons that have the
        same id to see the warning message in the console. Change the ids to make
        the program run without getting a warning message.
      U313 Two Buttons with Ids_instruction: |
        Predict what will happen. Once you've
        made a prediction, run the code to see what happens. (Click to see full instructions)
      U3L03 - draw rect function_instruction: "Write a function called drawRectangle().\r\n(Click\nto
        see full instructions)"
      U3L03 - draw step_instruction: |
        Write the drawStep function. (Click to see
        full instructions)
      U3L03 choose your own drawing_instruction: |
        Now choose your own!  Pick one
        of the three drawings shown here and attempt to create it on your own, making
        smart decisions about how to break the problem down into re-usable functions.  You
        will review your work with a peer using "procedures peer review rubric."  Check
        it for the requirements.  GIF: U3L3-ProceduresChooseOne.png
      U3L03 Creating Procedures 1_instruction: |
        Write the turnAround() function and
        use it to make the turtle move as depicted. see: U3L03-turnAndDown.gif
      U3L03 Define and use turnAround_instruction: |
        Define a function called turnAround
        and call it to make the turtle move as depicted. (Click to see full instructions)
      U3L03 define turnRight and draw a rectangle_instruction: |
        Define a function
        called right() that turns the turtle to the right. Then use this function
        to draw a rectangle, as shown below. (Click to see full instructions)
      U3L03 Draw a T using turnAround_instruction: |
        Draw a plus sign using the provided
        version of turnAround().  (Click to see full instructions)
      U3L03 draw diamond_instruction: |
        Create a function called drawDiamond() that
        makes use of your previous work to draw the complete diamond. (Click to see
        full instructions)
      U3L03 Three Steps_instruction: |
        Define a function called drawSide() which draws
        three steps and moves the turtle to prepare for the next side (Click to see
        full instructions)
      U3L04 - 3 by 3 with functions_instruction: |
        Make the 3x3 square as efficiently
        as you can. (Click to see full instructions)
      U3L04 - snowflake_instruction: |
        Create the design by breaking it down into
        layers of functions. (Click to see full instructions)
      U3L04 choose your own drawing_instruction: |
        Now choose your own!  Pick one
        of the three drawings shown here and attempt to create it on your own, making
        smart decisions about how to break the problem down into re-usable functions.  You
        will review your work with a peer using "procedures peer review rubric."  Check
        it for the requirements.
      U3L04 diamond solution_instruction: |
        Study this solution to the drawDiamond
        problem.  Notice that the whole program starts by calling drawDiamond() at
        the top.  The program then follows a chain of function calls.  You can trace
        what's happening in the code to see the functions reused.  It's also easy
        to read because the function names describe the expected behavior.
      U3L05_3x3GridEfficiencyChallenge_instruction: |
        Let's revisit the 3x3 grid
        problem you did a few lessons ago.  This time the challenge is to program
        the solution "as efficiently as possible."  Now that you know how to write
        functions, it should be easier to break the problem down, and your code should
        be easier to read and debug.  See the rubric for more details about requirements
        and expectations.
      U3L05_draw3x3GridEfficiently_instruction: |
        Draw a 3x3 grid above and to the
        right of the turtle. Try to do so with the fewest number of commands possible.
        NOTE: This is a very challenging problem.  You may need to play with it for
        a while and tweak it.  You might also consider using pencil and paper to sketch
        your ideas.
      U3L06 - moveForwardwithParams_instruction: |
        Use a single command to move the
        turtle to the edge of the screen. (Click to see full instructions)
      U3L06 Challenge 1 triangle_instruction: |
        Use the parameterized versions of
        the turtle commands to create a triangle with sides 100 pixels long. (Click
        to see full instructions)
      U3L06 Challenge 2 purple square_instruction: |
        Read the documentation for penColor()
        and penWidth() before using them to draw the blue square.
      U3L06 Challenge 3 fill pink_instruction: |
        Fill in the background of the screen
        with your favorite color. (Click to see full instructions)
      U3L06 Challenge 4 bullseye_instruction: |
        Create the bullseye using hexadecimal
        colors and dot(). (Click to see full instructions)
      U3L06 Challenge 5 overlapping circles_instruction: |
        This image is created just
        using dot() and penColor() but, how are we going to get those circles to be
        transparent?  If you haven't gotten the hint yet: check out the documentation!
      U3L06 Challenge 6 squiggles_instruction: "Read the documentation for the \"arcLeft\"\nand
        \"arcRight\" commands and then draw the squiggles as shown. \n"
      U3L06 Challenge 7 smiley face_instruction: |
        Use turnTo() and moveTo() to help
        draw a smiley face. (Click to see full instructions)
      U3L06 Challenge 8 make your own_instruction: |
        Create a drawing of your own.
        (Click to see full instructions)
      U3L07 - allSeaGrass_instruction: |
        Add 50 pieces of seagrass to the image by
        writing drawAllSeagrass with a loop. (Click to see full instructions)
      U3L07 - bubbles_instruction: |
        Add 200 bubbles to the image by writing drawAllBubbles
        with a loop. (Click to see full instructions)
      U3L07 - callingFunctionsInLoops_instruction: |
        Call the function within the
        loop to complete the figure. (Click to see full instructions)
      U3L07 - createTriangleParam_instruction: |
        Define a function that accepts a
        parameter to match the function calls and complete the image. (Click to see
        full instructions)
      U3L07 - fish_instruction: |
        Add 15 fish to the image by writing drawAllFish
        with a loop. (Click to see full instructions)
      U3L07 - Free Play Loops and Random_instruction: |
        Free Play! Use what you learned
        from loops and random to make your own little scene. Have fun.
      U3L07 - introSquare_instruction: |
        Use a loop to draw a square. (Click to see
        full instructions)
      U3L07 - loopsWithRandom_instruction: |
        Increase the number of iterations to
        fill the screen with white. (Click to see full instructions)
      U3L07 - randomDots1_instruction: |
        Increase the number of iterations to fully
        fill the screen with random dots. (Click to see full instructions)
      U3L07 - randomSquare_instruction: |
        Draw the figure using a loop. (Click to
        see full instructions)
      U3L07 - seaGrass_instruction: |
        Add a parameter to drawSeagrass that controls
        the number of waves in the grass. (Click to see full instructions)
      U3L07 - seaStar_instruction: |
        Add 5 sea stars to the image by writing drawAllSeaStars
        with a loop. (Click to see full instructions)
      U3L07 - Starry Night Starter Code_instruction: "You are going to use loops\nand
        random numbers to generate an image of starry night sky similar to one\nshown
        here.  We have given you some starter code to generate the ground and\nsky
        (just two giant dots), you will add code to this project to make the stars,\ngrass,
        and moon.  All of the effects are clever applications of turtle dots,\nlines,
        and colors.  To get started, follow the series of steps suggested in\nthe
        accompanying worksheet. \n"
      U3L07 - sunBeams_instruction: |
        Add 100 sunbeams to the image by writing drawAllSunbeams
        with a loop. (Click to see full instructions)
      U3L07 - topDownDesign_instruction: |
        Get comfortable with the structure of this
        program, then move on to the next exercise. (Click to see full instructions)
      U3L08 - createTwoParamTriangle_instruction: |
        Define a function called drawTriangle()
        that accepts two parameters to set the size and width of the triangle. (Click
        to see full instructions)
      U3L08 - digitalScene_instruction: |
        Create the functions you were assigned as
        part of your digital scene. (Click to see full instructions)
      U3L08 - drawSquaresWithParams_instruction: |
        Write drawSmallSquare() to draw
        a 25px square. (Click to see full instructions)
      U3L08 - drawSquareWithParam - for video_instruction: |
        Use drawSquare() to recreate
        the image of both squares, this time using parameters. (Click to see full
        instructions)
      U3L08 - drawSquareWithParam_instruction: |
        Use drawSquare() to recreate the
        image of both squares, this time using parameters. (Click to see full instructions)
      U3L08 - Enchantment Under the Sea_instruction: |
        You have been provided with
        starter code for an “Under the Sea” scene which includes three functions,
        one each for the starfish, sea grass, and fish. Create versions of these functions
        which accept parameters to allow you to add more variation to your scene.  The
        student worksheet provides more details and guidance.
      U3L08 - fish_instruction: |
        Add a parameter to drawFish that changes the size
        of the fish drawn. (Click to see full instructions)
      U3L08 - freePlay_instruction: |
        Keep adding to your image by making more calls
        to your new functions with parameters. (Click to see full instructions)
      U3L08 - individualCode_instruction: |
        Create the functions you were assigned
        as part of your digital scene. (Click to see full instructions)
      U3L08 - introUnderTheSea_instruction: |
        Add an extra fish, starfish, and piece
        of sea grass to the image. Look at, but don't change, the functions that
        create them. (Click to see full instructions)
      U3L08 - multiParamFish_instruction: |
        Add three parameters to your drawFish
        function to accept red, green and blue values to make your fish different
        colors. (Click to see full instructions)
      U3L08 - multipleLayersofParams_instruction: |
        Call drawPlusSign() to complete
        the image. (Click to see full instructions)
      U3L08 - paramsToStarfish_instruction: |
        Add a parameter to drawStarfish that
        changes the size of the starfish drawn. (Click to see full instructions)
      U3L08 - randomInput_instruction: |
        Use the randomNumber() blocks to test the
        functions you designed with random input. (Click to see full instructions)
      U3L08 - seaGrass_instruction: |
        Add a parameter to drawSeagrass that changes
        the size of the piece of seagrass drawn. (Click to see full instructions)
      U3L08 - squareTwoParams_instruction: |
        Call drawSquare() to complete the drawing
        of two squares. (Click to see full instructions)
      U3L08 - starFish_instruction: |
        Add an extra fish, starfish, and piece of sea
        grass to the image. Look at, but don't change, the functions that create
        them. (Click to see full instructions)
      U3L08 - triangleTwoParams_instruction: |
        Call drawSquare() to complete the drawing
        of two squares. (Click to see full instructions)
      U3L1 - Simulation - Template_instruction: |
        Use a while loop to "flip 10 coins"
        and write them to the screen. (Click to see full instructions)
      U3L12 Chaser Template_instruction: This is a project template!
      U3L13 - Button with ID_instruction: |
        Drag a button out onto the screen and
        set its text to "Go forth!".  Run the program to make sure you can see the
        button.
      U3L13 - Debug Id plus logic problem_instruction: "The last problem was an example\nof
        syntax error.  App Lab did not understand which object it should be listening\nto
        for a \"click\" event so it showed an error message in the console to let\nyou
        know.  Another kind of error is a logical error - the program is valid,\nbut
        it's not doing what you want it to do.\r\n\r\nThis program has 2 errors.\nA
        (tricky) syntax error and logical error.  Find them, fix them, and make\nthe
        program work as expected."
      U3L13 - Debug Id Problem_instruction: |
        Improve the button by choosing a descriptive
        and meaningful ID. (Click to see full instructions)
      U3L13 - Debugging 1_instruction: |
        Debug the program by verifying your IDs are
        being referenced properly. (Click to see full instructions)
      U3L13 - Debugging 2_instruction: |
        Debug the program by properly ordering your
        button commands and event handlers. (Click to see full instructions)
      U3L13 - Debugging 3_instruction: |
        Debug the program by fixing the logical error
        within the program. (Click to see full instructions)
      U3L13 - Project_instruction: |
        Create your multi-screen app. (Click to see full
        instructions.)
      U3L13 - Turtle Driver Project_instruction: |
        Create a "turtle driver" that
        includes buttons to move the turtle forward and turn it left and right. (Click
        to see full instructions)
      U3L13 - Turtle move with button_instruction: |
        Add a button that moves the turtle
        when clicked.  (Click to see full instructions)
      U3L13 eventsDetails_instruction: |
        Add an event handler to the button to move
        the turtle forward. (Click to see full instructions)
      U3L14 - Assigning Random Value_instruction: |
        Write a program that simulates
        the rolling of two dice and reports their individual values as well as the
        sum. (click to see full instructions)
      U3L14 - concatenate simple_instruction: |
        Modify the write statement on line
        3 to combine text and variables together to make the app display a single
        line of text that shows the player's lives and score. (click to see full
        instructions)
      U3L14 - Mini Calculator embed_instruction: |
        You will be prompted for two numbers,
        one right after the other.  See what happens.  Enter different numbers until
        you get the idea.
      U3L14 - moving memory challenge1_instruction: |
        Using only the variables provided,
        assignment (=) and arithmetic (+ - * /) re-assign the values to make the console.log
        statement display the correct value(s).  (Click to see full instructions)
      U3L14 - moving memory challenge2_instruction: |
        Using only the variables provided,
        assignment (=) and arithmetic (+ - * /) re-assign the values to make the console.log
        statement display the correct value(s).  (Click to see full instructions)
      U3L14 - moving memory challenge3_instruction: |
        Using only the variables provided,
        assignment (=) and arithmetic (+ - * /) re-assign the values to make the console.log
        statement display the correct value(s).  (Click to see full instructions)
      U3L14 - moving memory challenge4_instruction: |
        Using only the variables provided,
        assignment (=) and arithmetic (+ - * /) re-assign the values to make the console.log
        statement display the correct value(s).  (Click to see full instructions)
      U3L14 - moving memory challenge5_instruction: |
        Using only the variables provided,
        assignment (=) and arithmetic (+ - * /) re-assign the values to make the console.log
        statement display the correct value(s).  (Click to see full instructions)
      U3L14 - moving memory challenge6_instruction: |
        Using only the variables provided,
        assignment (=) and arithmetic (+ - * /) re-assign the values to make the console.log
        statement display the correct value(s).  (Click to see full instructions)
      U3L14 - Unfortunate Events Free Play_instruction: |
        Follow the "Unfortunate
        Events" Worksheet and enter your code here to experiment.  We've pre-loaded
        the code you need to start.
      U3L14 - User Input Division calculator_instruction: |
        Write a program that acts
        as a simple calculator. (click to see full instructions)
      U3L14 - Variable ReAssignment pt2_instruction: |
        Trace the code and predict
        what you think will be printed to the console. Then add a console.log statement
        at the end of the program to see the last value of someNum to see if your
        full prediction is correct. (click to see full Instructions)
      U3L15 - add code to make count down work_instruction: |
        Write code to make the
        down arrow work as expected. (Click to see full instructions)
      U3L15 - Add reset button to UpDown app_instruction: |
        Add code so that clicking
        the start over button will reset the game and send you back to the main screen.
        (Click to see full instructions)
      U3L15 - clicker update score_instruction: |
        Add code to update the score when
        the apple is clicked. (Click to see full instructions)
      U3L15 - count upDown bug forget to set text_instruction: |
        Find the bug in the
        program and fix it. (Click to see full instructions)
      U3L15 - count upDown bug logic error wrong update_instruction: |
        Find the bug
        in the program and fix it. (Click to see full instructions)
      U3L15 - count upDown bug var not created globally_instruction: |
        Find the bug
        in the program and fix it. (Click to see full instructions)
      U3L15 - Debug forget to update var on reset in UpDown app_instruction: |
        Run
        the app, and click the up or down button until you get to the gameOverScreen.
        Click 'Start Over' and try the app again. Find and fix the issue in the
        code. (Click to see full instructions)
      U3L15 - Debug if never triggers in UpDown app_instruction: |
        Run the app and
        use the up and down arrows to try to hit the gameOverScreen. You can't! Find
        and fix the issue in the code. (Click to see full instructions)
      U3L15 - Debugging Simple If-statements =v==_instruction: |
        Run the app, and
        click the up button. Then restart and run it again, and click the down button.
        Find and fix the issue in the code. (Click to see full instructions)
      U3L15 - DEMO up down count practice app_instruction: |
        Try out the demo app
        (Click to see full instructions)
      U3L15 - global var example count up_instruction: |
        Look at the code for this
        app and see how the code works to update the count variable when the up arrow
        is clicked. (Click to see full instructions).
      U3L15 - mini clicker update score_instruction: |
        Add code to update the score
        when the apple is clicked. (Click to see full instructions)
      U3L15 - practice with setText_instruction: |
        Use setText to complete the click
        event handler for the down arrow. (Click to see full instructions)
      U3L15 - Simple If-statements in UpDown App_instruction: |
        Add an if statement
        so that the app changes screens when the count reaches -5. (Click to see full
        instructions)
      U3L15 - variable scoping problem debugging_instruction: |
        See if you can figure
        out why the code is no longer working. (Click to see full instructions)
      U3L15 click add lives_instruction: |
        Add lives to the clicker game that decrement
        by 1 when the background image is clicked (Click to see full instructions)
      U3L15 full clicker app_instruction: |
        Complete your clicker game! (Click to
        see full instructions)
      U3L16 - challenge say hi app_instruction: |
        Write a greeting to the user when
        they hit 'enter' in the text input, using the 'change' event. (Click to
        see full instructions)
      U3L16 - chaserApp_instruction: |
        Create your own "Chaser Game." (Click to
        see full instructions)
      U3L16 - chooseImages_instruction: |
        Replace the image in your application with
        one of your own. (Click to see full instructions)
      U3L16 - doubleQuotes_instruction: |
        Save a string inside a variable and log
        it to the console. (Click to see full instructions)
      U3L16 - hideAndShow_instruction: |
        Introducing textInput, getText and write.  First
        run the starter code several times.  Try to change what's written to the
        screen when the button is clicked. Then use getText to write to the screen
        what the user entered in the text box. GIF: U3L16 - useGetText.gif
      U3L16 - hideAndShowPractice_instruction: |
        You are given some starting code
        that puts an image and two buttons on the screen.  The image is initially
        hidden. Add two new event handlers: one for each button, that when clicked
        hide and show the image.
      U3L16 - image and text labels_instruction: |
        Introducing the setPosition command!  Replace
        the moveTo in the button-click event handler to use setPosition to move the
        button itself to a random location when it's clicked.
      U3L16 - images and text labels_instruction: "Introducing objects other than\nbuttons!
        - textLabels and images.  First try replacing your button with a\ntextLabel.
        \ Will the text respond to events just like the button?  Try connecting\nan
        event handler to it.  We've started you out with code similar to the result\nof
        the last level, you can copy your code from that level into here if you\nprefer.
        \n"
      U3L16 - images_instruction: "Introducing Images.  Try replacing the textLabel\nwith
        an image..  Will the image respond to events just like the button?  Try\nconnecting
        an event handler to it.  We've started you out with code similar\nto the result
        of the last level, you can copy your code from that level into\nhere if you
        prefer. \n"
      U3L16 - intro getText_instruction: |
        Add text input UI elements for name and
        age. (Click to see full instructions)
      U3L16 - introSetPosition_instruction: |
        Move the buttons to the bottom of the
        screen. (Click to see full instructions)
      U3L16 - introStrings_instruction: |
        Save a string inside a variable and log
        it to the console. (Click to see full instructions)
      U3L16 - nameAgeTemplate_instruction: |
        Add an Text Input box for the name and
        age. (Click to see full instructions)
      U3L16 - newEventTypes_instruction: |
        Experiment with different event types and
        select the one that you think is best. (Click to see full instructions)
      U3L16 - outputWithTextArea_instruction: |
        Output a message to the 'textArea'
        (Click to see full instructions)
      U3L16 - projectTemplate_instruction: |
        Create your own "Chaser App". (Click
        to see full instructions)
      U3L16 - quick double click_instruction: |
        Mini-Project.  The Quick Double-Click
        game.  In this simple game an object (an image) moves around, or pops up randomly
        on the screen, as the user clicks it.  The goal of our game will be to try
        to double-click the object before it moves.  Part of the challenge (and fun)
        here is creating this app from scratch.  You can look back at your previous
        work for examples, but it's fun to create something from scratch, too.  Try
        it!  For more details see the Activity guide for this lesson.
      U3L16 - setPosition to move button_instruction: |
        Introducing the setPosition
        command! Replace the moveTo in the button-click event handler to use setPosition
        to move the button itself to a random location when it's clicked.
      U3L16 - setPositionMoveButton_instruction: Use setPositon to moveButton
      U3L16 - setupMoveToRandom_instruction: |
        Modify the code so that the turtle
        moves to a random screen location when the button is clicked. (Click to see
        full instructions)
      U3L16 - singleSetPosition_instruction: |
        Move the button to the middle of the
        screen. (Click to see full instructions)
      U3L16 - stringsVsNumbers_instruction: |
        Run the program to see how strings and
        numbers behave with different arithmetic operators. (Click to see full instructions)
      U3L16 - text labels_instruction: |
        Use the textLabel command to replace the
        button in your program with a text label. (Click to see full instructions)
      U3L16 - textInput getText write_instruction: |
        Add an Text Input box for the
        name and age. (Click to see full instructions)
      U3L16 - toUpper_instruction: |
        Make the name of the user appear in uppercase
        (Click to see full instructions)
      U3L16 - use images_instruction: |
        Use the image command to replace the text
        label in your program with an image. (Click to see full instructions)
      U3L16 Mad Lib Clear Input_instruction: "Clear the user's previous text when\nthe
        Play Again button is clicked (Click to see full instructions) \n"
      U3L16 Mad Lib Demo_instruction: Mad Libs Demo - Try it out!
      U3L16 Mad Lib getText_instruction: "Before setting the text area with your\nMad
        Lib outline, get the user's text and incorporate their responses. (Click\nto
        see full instructions) \n"
      U3L16 Mad Lib setText_instruction: "When the Next button is clicked, set the\ntext
        area to have the main outline of your How-to Mad Lib (without the user's\ninput).
        (Click to see full instructions) \n"
      U3L16 Mad Lib Student Setup_instruction: |
        Back to Mad Lib: To get started,
        set up the two screens for your Mad Lib app (Click to show full instructions)
      U3L16 Mad Lib toUpper_instruction: "Apply the toUpperCase and toLowerCase string\nfunctions
        to the user's text. (Click to see full instructions) \n"
      U3L17 - getAndSetKeyValue_instruction: |
        Create an image like app. (Click to
        see full instructions)
      U3L17 - getKeyValue_instruction: |
        Run the program several times to observe
        how the setKeyValue commands now always arrive in order. (Click to see full
        instructions)
      U3L17 - introCallbacks_instruction: |
        Run the program several times to observe
        how the setKeyValue commands now always arrive in order. (Click to see full
        instructions)
      U3L17 - introKeyValue_instruction: |
        Explore your key value pairs with the Data
        Viewer. (Click to see full instructions)
      U3L17 - readKeyValue_instruction: |
        Explore your key value pairs with the Data
        Viewer. (Click to see full instructions)
      U3L17 - setKeyValue_instruction: |
        Create and update your key value pairs using
        setKeyValue. (Click to see full instructions)
      U3L17 - twoSetKeyValue_instruction: |
        Run the program several times to observe
        how often setKeyValue commands arrive out of order. (Click to see full instructions)
      U3L18 comparison operators_instruction: |
        Use console.log to print out the different
        boolean expressions below to see what information they return. (Click to see
        full instructions)
      U3L18 comparison operators_for_video_instruction: |
        Use `console.log` to print
        out the different boolean expressions below to see what information they return.
        (Click to see full instructions)
      U3L19 - Clicker Game Freeplay Area_instruction: |
        Use this App Lab area to improve
        your clicker game.  You should start by copy/pasting the code from your old
        game here.  We're showing a more full set of blocks in the toolbox - some
        of the things you might not have used yet.  Feel free to explore then and
        experiment if you want to.  Everything else you need should be shown.  Have
        fun!
      U3L19 - Debugging with consoleLog_instruction: |
        Add console.log() statements
        to find out the value of a and b after the first reassignment statement a
        = b; (Click to see full instructions)
      U3L19 - DEMO up down count practice app_instruction: |
        Try out the demo app
        (Click to see full instructions)
      U3L19 - do concatenate string with var_instruction: "We've given you a piece\nof
        code from the previous screen.  Try changing the value assigned to foo\nto
        see the string change. \r\nDo this: \r\n1. Try changing the value assigned\nto
        foo to see the string change. \r\n2. By only modifying the lines of code\nthat
        were given to you, try to get the output to say: “The value of foo is:\n9.
        \ And isn’t that fine.” \r\n"
      U3L19 - fix the var name syntax error v2_instruction: |
        Fix the error and get
        it to print the value of both variables (Click to see full instructions)
      U3L19 - fix the var name syntax error_instruction: |
        Fix the error and get it
        to print the value of both variables (Click to see full instructions)
      U3L19 - global var example count up_instruction: |
        Look at the code for this
        app and see how the code works to update the count variable when the up arrow
        is clicked. (Click to see full instructions).
      U3L19 - practice with setText_instruction: |
        Add another button that changes
        the text to the value of a new variable. (Click to see full instructions)
      U3L19 - Simple If-statements in UpDown App_instruction: |
        Add an if statement
        so that the app changes screens when the count reaches -5. (Click to see full
        instructions)
      U3L19 - Target Clicker App_instruction: |
        Investigate the new elements of the
        'chaser-game'
      U3L19 - test reassignment of two vars_instruction: |
        Predict the value of a
        and b. Add console.log statements to find out the actual value of a and b.
        (Click for full instructions)
      U3L19 - three basic ops of variables_instruction: |
        Add another variable called
        "lives" and set the value to 3. Print the value of the variable to the console.
        (Click to see full instructions)
      U3L19 - try out console log_instruction: "Try out console.log.  Do this: replace\nthe
        statement write(\"foo is: \" + foo) with console.log(\"foo is: \" + foo).
        \ Run\nthe program and you should see the output show up in the console area
        below\nthe workspace.  Then try adding a few more console.log statements.
        \ Display\nsome text.  Make another variable and display that.  \r\nThe app
        screen will\nbe blank -- that's the point.  With console.log you can test
        output behind\nthe scenes in a way the user cannot see.  \r\n\r\n\r\nGIF:
        U3L19-useconsolelog.gif"
      U3L19 - up down count practice app_instruction: |
        Set up the down button to
        decrease the value of count by 1 each time it is clicked. (Click to see full
        instructions)
      U3L19 - updating variables pt1_instruction: |
        This app is only SLIGHTLY different
        from the previous one, but much more dynamic.  See if you can figure out how
        and why the count is going up.  Once you've figured it out then you should
        be able to DO THIS: add a button to the app that when clicked makes the count
        go down, and updates the label.  When you're done the app should work as
        shown in the demonstration.  GIF: U3L19 - upDownCountApp.gif
      U3L19 - variable reassignment challenge pt2_instruction: |
        Make a prediction
        about the ending values of a, b, and c. Then use console.log to check your
        understanding (Click to see full instructions)
      U3L19 - variable reassignment part 1_instruction: |
        Predict the value of a and
        b. Add console.log statements to find out the actual value of a and b. (Click
        for full instructions)
      U3L19 - variable scope problem 2_instruction: |
        What is happening with foo?
        Play with the level to try to figure it out. (Click to see full instructions)
      U3L19 - variable scoping problem debugging_instruction: |
        See if you can figure
        out why the code is no longer work. (Click to see full instructions)
      U3L19 - write var and string with same name v2_instruction: |
        Fix the code so
        that the values of both variables print to the console. (Click to see full
        instructions)
      U3L19 - write var and string with same name_instruction: |
        Fix the code so that
        the value of both variables prints to the console. (Click to see full instructions)
      U3L2 Using Simple Commands (no tooltips)_instruction: |
        Draw a 1x1 square above
        and to the left of the turtle's starting position. Click to see full instructions.
      U3L2 Using Simple Commands_instruction: |
        Draw a 1x1 square above and to the
        left of the turtle's starting position. Click to see full instructions.
      U3L23 Chatbot Conditionals 1_instruction: |
        Add if, else if, and else statements
        to detect the movie genres Comedy, Romance, Action, and Horror. (Click to
        see full instructions)
      U3L23 Chatbot Intro 1a_instruction: |
        Store the user's input inside a variable
        and log it to the console.
      U3L23 Chatbot Intro 2_instruction: |
        Use string concatenation to store the user's
        input and assistant's answer into the conversation variable using the format
        "User: <input><bot name>: <default response>" . Log the conversation to
        the console.
      U3L23 Chatbot Intro 2a_instruction: |
        Display the conversation onto the "text_area"
        element. Optional: clear the user's input after every "change" event.
      U3L23 Chatbot Intro 3_instruction: |
        Add newline characters "\
        " to separate
        the user's input and the computer's response.
      U3L23 Chatbot Intro 4_instruction: |
        Use this level to make your chatbot look
        and work better!
      U3L23 Chatbot Intro_instruction: |
        Choose a specialization topic for your digital
        assistant. Create a basic digital assistant that takes the user's input and
        displays back a default response.
      U3L23 Digital Assistant 1_instruction: |
        Set the text_area element to display
        the user's input from the text_input element.
      U3L23 Digital Assistant 2_instruction: |
        Add the response "I don't know."
        after each of the user's inputs.
      U3L23 Digital Assistant 3_instruction: |
        Add the response "I don't know."
        after each of the user's inputs.
      U3L23 Digital Assistant 4_instruction: |
        Display the user's input and the digital
        assistant's response on different lines.
      U3L23 Digital Assistant 5_instruction: |
        Start the user's command with the
        phrase "User:" and the digital assistant's response with the phrase "Bot:"
      U3L23 Digital Assistant 6_instruction: |
        When the user hits Run, display the
        text "I'm a generic digital assistant. Ask me anything!"
      U3L24 Basic String Parsing 1_instruction: |
        Use the function "userInput.indexOf(<food>)"
        to check if the strings "pizza" or "soup" are anywhere in the user's
        response.
      U3L24 Chatbot Basic Conditionals_instruction: |
        Check out the project description
        for instructions. (Click to see full instructions.)
      U3L24 Chatbot Conditionals 2_instruction: |
        Adjust the "if" block to make
        the bot respond "I don't know that color." if the user types anything besides
        "blue"
      U3L24 Chatbot Conditionals 3_instruction: |
        Adjust the "if/else" block to
        make the bot respond to the colors blue, red, and green, and to two additional
        colors.
      U3L24 Chatbot Keyword Record_instruction: |
        Use the next level to record your
        digital assistant's keywords/phrases.
      U3L24 Chatbot Nested Conditionals_instruction: |
        Add a chained conditional with
        at least 3 "else if" statements to your personal assistant.
      U3L24 introIncludes_instruction: |
        Practice using the includes command. (Click
        to see full instructions)
      U3L24 Nested Conditionals 1_instruction: |
        Change all of the boolean expressions
        to use includes instead of ==. (Click to see full instructions)
      U3L24 Nested Conditionals 2_instruction: "Nest your movie genre if statements\ninside
        the if statements to check for a ? in the input. \n"
      U3L24 Nested Conditionals Bugs 2_instruction: |
        Fix the problem with the code
        so that all the conditions can be reached. (Click to see full instructions)
      U3L24 Nested Conditionals Bugs 3_instruction: |
        Fix the bugs that still exist
        in this program. Prove that the program works correctly.
      U3L24 Nested Conditionals Bugs_instruction: |
        Expose the bugs in this problem
        by typing inputs into the user-input box. Track which inputs cause unexpected
        outputs.
      U3L25 - drag out key event_instruction: |
        Set up an event handler to respond
        to keypress events, and display event.key in the console. Hit keys on the
        keyboard to see what happens. (Click to see full instructions)
      U3L25 - play sound when up key_instruction: |
        Change the code so the sound will
        only play when the up arrow is pressed. (Click to see full instructions)
      U3L25 Chatbot Strings_instruction: |
        1. Adjust your digital assistant to evaluate
        inputs the same way whether the inputs are capitalized or lowercase. 2. If
        a user asks "What is <phrase>?", where <phrase> is an input your digital
        assistant does not recognize, make your digital assistant respond "I don't
        know what <phrase> is."
      U3L25 String Parsing 1_instruction: |
        Given the string "Wisdom begins with
        wonder." what is the index of the following characters W, t, w, ., d, and
        k? Confirm your expectation using the string.indexOf() function.
      U3L25 String Parsing 2_instruction: |
        Use str.length to find the length of the
        strings “Hello World”, “Computer science rocks!", and “I promise to do my
        homework every day.”
      U3L25 String Parsing 3_instruction: |
        Write a password length checker that writes
        “yes” to the console if a string has a length greater than 10, or “no” if
        it is less than or equal to 10.  Test your function using two strings, one
        that will satisfy each conditional option.
      U3L25 String Parsing 4_instruction: |
        You are given the string "Wisdom begins
        with wonder." Use the string.substring(begin, end) function to print "begin"
        and "nder" to the console.
      U3L25 String Parsing 5_instruction: "Fill in the function, findBeginNder()\nto
        get the strings \"begin\" and \"nder\" from a sentence no matter where\nin
        the sentence they exist.\r\nPrint the strings and their index to the console.\n"
      U3L25 String Parsing 6_instruction: |
        Write a function that takes a name (first
        last) and reorders it (last, first).
      U3L25 String Parsing 7_instruction: |
        You are given the string “The earth has
        music for those who listen.” Manipulate it using the functions str.toUpperCase()
        and str.toLowerCase().
      U3L26 AND operator_instruction: |
        Update the genre and rating if statements
        to give only one movie suggestion at a time. (Click to see full instructions)
      U3L26 Chatbot Compound Conditionals_instruction: |
        Update your digital assistant
        to include at least one each of AND, OR, and NOT
      U3L26 Chatbot Final_instruction: |
        Update your digital assistant to include
        at least one each of AND, OR, and NOT
      U3L26 Compound Logic_instruction: |
        Write a conditional statement that detects
        if a command contains all the phrases "2000" "animated" and "G-rated."
        If all these phrases are detected, make Movie Bot respond "The top grossing
        animated and G-rated film in the 2000 decade was Finding Nemo."
      U3L26 NOT operator_instruction: "Write a conditional statement that detects\nif
        a command does not contain the phrase \"bad.\" If \"bad\" is not detected,\nmake
        Movie Bot respond normally. Otherwise, make Movie Bot respond \"Sorry,\nI
        don't know about bad movies.\" \n"
      U3L26 OR operator_instruction: |
        Update the if statement to use an OR to check
        for a "?" as well as who, what, where, when, why, how in the user input.
        (Click to see full instructions)
      U3L27 Chatbot Final_instruction: |
        Make your digital assistant awesome and when
        you are finished, ask one of your classmates to test it for you using the
        activity guide. As you add features to your digital assistant, track them
        on the next level.
      U3L2_Turtle3by3Grid_instruction: |
        Draw a 3x3 grid to the front and right of
        the turtle as efficiently as possible. The turtle should end at its original
        location, facing its original direction. (Click to see full instructions)
      U3L2_TurtleSquare_right_instruction: |
        Draw a square to the front and to the
        right of the starting location. (Click to show full instructions)
      U4 - CreateRecord - 1_instruction: |
        Add a createRecord command and run the
        program. (Click to see full instructions)
      U4 - CreateRecord - 2_instruction: |
        Change the table name in create record
        then check the Data Viewer to see the new table.
      U4 - CreateRecord - 3_instruction: |
        Add the provided javascript object as a
        record to a table. (Click to see full instructions)
      U4 - CreateRecord - 4_instruction: |
        Add the provided javascript object as a
        record to a table. (Click to see full instructions)
      U4 - CreateRecord - 5_instruction: |
        Add the provided javascript object as a
        record to a table. (Click to see full instructions)
      U4 - Objects - arraysOfObjects_instruction: |
        Create an array called "students"
        and add all 5 student objects to the array. (Click to see full instructions)
      U4 - Objects - createDotNotation_instruction: |
        Update your code to add properties
        to your object one at a time using dot notation. (Click to see full instructions)
      U4 - Objects - createObject_instruction: |
        Create an object with at least 3
        properties and display it in the Debug Console. (Click to see full instructions)
      U4 - Objects - dotNotation_instruction: |
        Use dot notation to display individual
        properties of the object. (Click to see full instructions)
      U4 - Objects - eventParameter_instruction: |
        Trigger both the keyboard and mouse
        event and examine the event objects displayed in the console. Why might an
        object be the best way to store this information? (Click to see full instructions)
      U4 - Objects - loopingArray_instruction: |
        Loop over your array of students
        and print the name of every students. (Click to see full instructions)
      U4 - Objects - loopingArray2_instruction: |
        Loop over your array of students
        and print the name and grade of every student. (Click to see full instructions)
      U4 - Objects - loopingCompoundConditions_instruction: |
        Loop over the array
        of students and display the information of students who are present and in
        the 11th grade. (Click to see full instructions)
      U4 - Objects - loopingConditions_instruction: |
        Loop over your array of student
        objects and display the names of every student who is present in class. (Click
        to see full instructions)
      U4L02 - Objects - createObject_instruction: "Create an object with at least\n5
        values including at least one string and one number. (Click to see full\ninstructions)
        \n"
      U4L02 - Objects - eventParameter_instruction: |
        Trigger both the keyboard and
        mouse event and examine the event objects displayed in the console. Why might
        an object be the best way to store this information? (Click to see full instructions)
      U4L02 - Objects - Template1_instruction: |
        Create an object with at least 3
        properties and display it in the Debug Console. (Click to see full instructions)
      U4L06 Data Storage 1_instruction: "Fill in your name instead of \"Enter Your\nName\",
        run the app and click the button. Run it multiple times with different\nnames!
        Watch the console and use the ‘View Data” button to see how the table\nis
        updated. As you play around make sure you can explain the purpose of each\nof
        the circled parts of the diagram.\r\n\r\n"
      U4L06 Data Storage 2_instruction: "The app is a continuation of the previous\none
        we started. Add a text label to collect the users name and use that as\nthe
        data input for the record.\r\n\r\nRun the app and click the button multiple\ntimes
        and see what happens. Is there a problem you notice? "
      U4L06 Data Storage 3_instruction: |
        We want to improve the user experience.
        Once they have submitted their data for storage, it would be nice to clear
        the textbox.  Update your app to clear the textbox after the data is stored.
      U4L06 Data Storage 4_instruction: |
        Add a label and drop down box, to your app
        and save the data to your JSON object and add it to your table. Make sure
        to reset the dropdown after the data is stored.
      U4L06 Data Storage 5_instruction: "Add a couple radio buttons or checkboxes\nto
        our app. Then find a way to collect the data from those. \n"
      U4L06 Data Storage 6_instruction: " Use one of the getTime() and getUserId()\nblocks
        to collect additional data. \n"
      U4L06 Data Storage 7_instruction: |
        Add a second screen to the sample app we
        have been building to capture an image from a user. Return to screen 1 after
        the JSON object has been stored in the table.
      U4L15 Read Data 1_instruction: |
        Run the level and see what happens. Then edit
        the code to make it print a different column of information.
      U4L15 Read Data 2_instruction: "Student should create a sentence which puts\ntogether
        all the pieces from a record.\r\n\r\n<<Name>> is <<Age>> years old\nand like
        <<Food>>"
      U4L15 Read Data 3_instruction: "Print the sentence using the first JSON object\nin
        the array\r\n\r\n"
      U4L15 Read Data 4_instruction: "\r\nUse a random record from the list of records\nto
        display your sentence."
      Underground Avoiding Lava_instruction: Lava döljer sig under några av de här
        blocken, och du måste täcka den innan du kan gå framåt. Ett "om"-kommando
        blir praktiskt här. Lägg till ett "gå framåt"-kommando på rätt plats för att
        bryta de här blocken.
      Underground If Statements_instruction: Nu blir det svårare. Bryt 3 eldstenar
        utan att ramla ned i lavan. Använd ett "om"-kommando för att lägga kullersten
        över lava du hittar.
      Underground Iron_instruction: Det är ingen bra idé att gå in i lava. Placera
        kullersten för att skapa en bro och bryt minst två av järnblocken.
      Underground Mine in a Circle_instruction: Hitta ett sätt att skaffa 5 diamanter
        och 7 eldstenar! Försök använda ett upprepningskommando i ett upprepningskommando
        för att gå i en fyrkant.
      Underground Mining Coal_instruction: Du hittar mer värdefulla resurser under
        marken, men det är mörkt där. Placera minst 2 facklor och bryt minst 2 kol.
      Underground Test Level_instruction: Samla alla mineraler!
      Vigenere_instruction: Test
      XML Scratchpad_instruction: Using this test level to grab xml for unit tests
