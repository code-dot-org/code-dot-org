---
hu:
  slides:
    maze_intro:
      1:
        text: Üdvözlünk az első kódolás órádon! Kezdjük is el az első programozási
          leckét.
      2:
        text: A Blockly nevű vizuális programozási nyelvet fogjuk használni, amelyben
          blokkok egymáshoz illesztésével tudsz kódot írni.
      3:
        text: A kódot legtöbbször gépelik, de a Blockly vizuális. Minden blokk megfelel
          egy „igazi” sor kódnak.
      4:
        text: Olyan számítógép-tudományi alapokat, fogalmakat fogsz megtanulni, amelyeket
          az alkalmazások készítésétől a marsjáró vezérléséig mindenütt használnak.
      5:
        text: Minden program a számítógép által végrehajtandó utasítások listája.
      6:
        text: Első programodban egy Angry Birds madarat kell irányítanod az útvesztőn
          át, hogy eljusson a Zöld Disznóig.
      7:
        text: A bal oldal egy útvesztő, ahol a programod fut. A pálya megoldásához
          szükséges útmutató az útvesztő alatt olvasható.
      8:
        text: A középső eszköztár tartalmazza az Angry Birds madár irányításához szükséges
          utasításokat. Ezeket fogod használni a kód felépítéséhez.
      9:
        text: A középső eszköztárból a jobb oldali munkaterületre kell majd áthúznod
          a blokkokat a program felépítéséhez. Egy blokk törléséhez húzd azt a sarokban
          lévő kukára.
      10:
        text: Minden blokk egy utasítás. Ha egy „menj” blokkot húzol a munkaterületre,
          majd megnyomod a „Futtatás” gombot, akkor a madár egy pozíciót lép előre
          a labirintusban.
      11:
        text: Egynél több művelet elvégzéséhez több blokkot is áthúzhatsz a munkafelületre,
          és összeillesztheted őket. A madár az utasításokat fentről lefelé végzi
          majd el.
      12:
        text: Ha egy már lefutott programot szeretnél javítani és újra lefuttatni,
          akkor nyomd meg a „Visszaállítás” gombot.
      13:
        text: Gyerünk, kapjuk el azokat a disznókat!
    artist_intro:
      1:
        text: Szia, a nevem JR! Minden versenyzői csapatnak szüksége van egy számítógéptudósra
          a nyeréshez. Analizálják az adatokat a járműből, hogy gyorsabbá tehessék
          azt.
      2:
        text: Ezeknél a rejtvényeknél te leszel a művész, aki vonalat húz maga mögött,
          bármerre megy.
      3:
        text: 'Ez a blokk azt mondja: " előrelépni 100 pixel. " A pixelek csak nagyon
          apró pontok a képernyőn.'
      4:
        text: Ez a blokk azt mondja "forduljon jobbra 90 fokban." Ez el fogja fordítani
          a művészt ugyanabban a mennyiségben, mint amennyiben a "fordulj" blokkok
          a labirintus rejtvényekben.
      5:
        text: Kattints valamelyik blokkra, hogy megváltoztasd a művész lépéseinek
          számát, vagy a fordulások mértékét.  Játssz ezekkel, hogy jobban megismerd
          ezeket az új blokkokat.
    farmer_intro:
      1:
        text: Szia, a nevem Paola! Ezekben a rejtvényekben te egy farmer leszel, akinek
          ki kell simítania a földét, hogy elkezdhesse az ültetvények elültetését.
      2:
        text: Segítened kell neki eltávolítani az összes halmot, és kitölteni a lyukakat.
      3:
        text: Az új blokkok eltüntetnek egy lapátnyi földet a halomból, illetve egy
          lapátnyi földdel feltöltenek egy gödröt.
      4:
        text: A halmok és a lyukak különböző méretűek, így meg kell mondd a farmernek,
          hogy hányat lapátoljon.
    flappy_intro:
      1:
        image: Megjegyzések/flappy01.jpg
        text: Szia, Kati vagyok!  Az egyik legizgalmasabb dolog a számítógéppel, hogy
          egy program lehet interaktív.
      2:
        image: Megjegyzések/flappy02.jpg
        text: Mindig amikor kattintanak az egérrel, az érintő képernyőt megbökik vagy
          gépelnek egy számítógépen vagy telefonon, az egy ESEMÉNY-t generál. Amikor
          ez az ESEMÉNY megtörténik, egy előre megírt kód határozza meg mi történjen.
      3:
        image: Megjegyzések/flappy03.jpg
        text: 'Mondjuk lehet egy ESEMÉNYKEZELŐ, ami ezt tartalmazza: "amikor az egéren
          kattintanak, lejátszom egy hangot" '
      4:
        image: Megjegyzések/flappy04.jpg
        text: Hallottál már a FlappyBird játék-ról ? Eseménykezelők használatával
          fogunk megtanulni hogyan lehet a saját egyéni  FlappyBird változat programját
          elkészíteni!
      5:
        image: Megjegyzések/flappy05.jpg
        text: A  kódot, a számítógépnek parancsokat jelentő blokkokat  felkapva és
          átrakva (drag and drop) fogja írni. Az grafikusan ábrázolt blokkok valódi
          kódot reprezentálnak.
      6:
        image: Megjegyzések/flappy06.jpg
        text: 'Ha egy pillantást vet a munkaterületre, lát néhány zöld blokkot, amiket
          kitöltöttek az Ön részére- ezek a "eseménykezelők" '
      7:
        image: Megjegyzések/flappy07.jpg
        text: Ha azt szeretnéd, hogy a madár csapjon szárnyával, ha RÁKATTINTASZ az
          egérrel, arra ott van a "csapj" blokk. Ezt hozzárendeli a megfelelő eseménykezelőhöz,
          és akkor a te játékodban valahányszor kattintanak, a madár csap egyet a
          szárnyával.
      8:
        image: Megjegyzések/flappy08.jpg
        text: Minden egyes rejtvény bemutat egy új típusú eseményt, mint zöld blokkot
          a munkaterületen. Ön kiválaszthatja a megfelelő blokkokat, az  eseményekre
          adott válaszként.
      9:
        image: Megjegyzések/flappy09.jpg
        text: Amikor vagy lát egy lefelé nyilat, mint ez, ez azt jelenti, meg lehet
          változtatni a beállításokat - például az akkor lejátszandó hangot, amikor
          flappy eléri a talajt.
      10:
        image: Megjegyzések/flappy10.jpg
        text: Az utolsó lépcsőn már képes létrehozni a saját játékát, és megosztani
          azt barátaival. Jó szórakozást!
    loop_times:
      1:
        text: Helló, Mark vagyok. Gyere, tanuljuk meg a ciklusok használatát! A ciklust
          használva megmondhatod a számítógépnek, hogy egy bizonyos utasítást újra
          és újra, ezerszer vagy milliószor ismételjen meg.
      2:
        text: Ebben a rejtvényben azt szeretnénk, ha a madár ötöt lépne előre, hogy
          elérjen a malachoz.
      3:
        text: A feladat megoldásához használhatjuk a új „Ismétlés” blokkot.
      4:
        text: Ahelyett, hogy 5 külön „előrelépni” blokkot használnánk...
      5:
        text: Betehetjük az „előrelépni” blokkot az „ismétlés” blokk belsejébe, majd
          beírhatjuk a blokkba a szükséges ismétlések számát.
      6:
        text: 'Fontos: az „ismétlés” blokkba több mint egy utasítást is betehetsz.'
      7:
        text: Élvezd az új „ismétlés” blokk használatát!
    loop_until:
      1:
        text: Szia, Chris vagyok. Mielőtt a Miami Heathez csatlakoztam a Georgia Techbe
          jártam, hogy számítástechnikát tanulhassak. Gyere, próbáljuk ki az új „ismételd
          amíg” blokkot.
      2:
        text: Mi van, ha nem tudjuk, milyen messzire kell a madárnak mennie, hogy
          eljusson a malachoz?
      3:
        text: Ha a "lépj előre" blokkot az "ismételd amíg" blokkba helyezzük, akkor
          a madár addig fog előre haladni, AMÍG eléri a malacot (vagy a falnak ütközik).
      4:
        text: 'Fontos: akárcsak az ismételd blokkba, az „ismételd amíg” blokkba is
          több utasítást helyezhetsz, és mindegyiket ismételni fogja a program.'
    if:
      1:
        text: Szia, Bill vagyok! Tanuljunk meg egy új alapvető fogalmat, a „ha” feltételt.
          A számítógépek ezt felhasználva hoznak döntéseket.
      2:
        text: 'A „ha” állítást Te is naponta használod. Minden reggel, mielőtt elindulnál,
          azt mondod: HA esik az eső, fel kell vennem a kabátom.'
      3:
        text: 'Megmondhatjuk egy zombinak: HA van út balra és ha megtalálja az utat,
          akkor forduljon abba az irányba.'
      4:
        text: Ahhoz, hogy megírjuk ezt a kódot húzzuk ki a „ha” blokkot, és helyezzük
          a „fordulj balra” blokkot a belsejébe.
      5:
        text: Most ha az „előrelépés” blokkot föléje és az „ismétlés” blokkot a kód
          köré helyezzük, akkor a zombi minden lépésnél ellenőrzi, hogy létezik-e
          út balra. Ha igen, akkor arra fordul. A ismétlő parancs fontos, mivel minden
          lépésnél ellenőriznie kell, hogy létezik-e út.
      6:
        text: 'A ha állítás nagyon fontos a számítástechnikában. Az első programjaim
          között volt egy amőba játék, amelyben az egyik ha feltétel így szólt: HA
          az ellenfél nyerő helyzetben van, akkor blokkolni kell a pozíciót, amivel
          nyerni tudna.'
      7:
        text: Jó szórakozást a „ha” blokk használatához!
    if_else:
      1:
        text: Szia, Saloni vagyok. Én az egészségügyben és az orvostudományban felmerülő
          problémák megoldására használom a számítástechnikát. Tanuljuk meg a „ha
          különben” blokk használatát. Ez a blokk hasonlít a „ha” blokkhoz, de van
          egy extra kiegészítése „különben” néven.
      2:
        text: Ha a feltétel „csináld” részéhez egy „előrelépni”, a „különben” részéhez
          egy „fordulj balra” blokkot teszel, akkor a zombi e közül a két lehetőség
          közül fog választani. Ha van út előre, akkor a zombi előre megy, minden
          más esetben (tehát ha nincs előre út) a zombi balra fog fordulni.
      3:
        text: Pont mint a "ha" blokknál, tehetünk "ha különben" blokkokat "ismételd"
          blokkokba, így a zombi mozgásban marad, a "ha különben" blokk pedig ellenőrizni
          fogja, hogy van-e hova fordulni.
      4:
        text: Most vidd a zombikat oda, ahova tartoznak!
    if_else_scrat:
      1:
        text: A ha-különben utasítás egy döntés két dolog között. Most lássuk, hogyan
          tudjuk használni a ha-különben utasítást a barátunkkal, Motkánnyal.
      2:
        text: A blokk hasonló a sima "ha" blokkhoz, de van egy extra része az alján,
          amit a "különben" szó jelöl. Ha egy "előrelépni" blokkot teszek a "csináld"
          részhez, egy "fordulj balra" blokkot a "különben" részhez, akkor Motkány
          a mókus előre fog menni, ha van előre út. Ha nincs tovább út előre, akkor
          Motkány balra fog fordulni.
      3:
        text: Ez egy döntéshozás, és a két utasítás közül az egyiket fogja végrehajtani
          a döntés alapján. És csakúgy, mint a "ha" blokkokat, a "ha-különben" blokkokat
          is beleteheted "ismételd" blokkokba.
      4:
        text: Most segítsünk Motkánynak a mókusnak, hogy megszerezze a makkot!
    function:
      1:
        text: Szia, Brina vagyok, mérnök az Instagramnál. Egy függvény lehetővé teszi,
          hogy ha egy kód bizonyos sorait újra és újra használni szeretnéd, akkor
          ne kelljen mindig az összes sort újra beírni. Helyette használhatsz egyetlen
          blokkot.
      2:
        text: Itt az idő, hogy megtanuljunk függvényeket definiálni. A függvény definíciókat
          csillaggal jelezzük. A függvény nevét a legfelső sorba írjuk.
      3:
        text: A blokkok a definíción belül mutatják meg, hogy mit is csinál. Ez a
          függvény, amit "feltölt 5"-nek hívunk egy repeat/ismételd és egy feltölt
          blokkból áll.
      4:
        text: A definíció csak ott csücsül a munkapadon, de a farmer nem tudja futtatni,
          amíg mi ki nem húzzuk a "feltölt 5" függvényblokkot a függvények közül.
      5:
        text: Let's put the "fun" back in "FUNction!"
    loop_while:
      1:
        text: Hi, I'm Makinde! Let's learn about the "while block."
      2:
        text: A "While"/"Amíg" blokk addig csinálja amit beletettél, amíg a feltétel
          amit az elején tettél igaz.
      3:
        text: Például ha a farmer áll egy földkupacnál, ő ADDIG tüntet el 1-1 lapátnyi
          földet, AMÍG van ott egyáltalán kupac.
    loop_for:
      1:
        text: Szia én Trina vagyok, és a Pixar-nál dolgozom. Már egy csomó filmen
          dolgoztam, beleértve a Shreket.
      2:
        text: Ez az új számlálós ciklus. Ez végrehajtja a feladatait újra és újra,
          minden alkalommal egy kicsit másképp.
      3:
        text: 'Ebben a példában a mi "számláló" ciklusunk azt mondja: "Számolj a számlálóval
          50-től 90-ig 10-esével", és a cikluson belül van a "rajzoljon egy négyzetet"
          blokk. Húzd a "számláló" blokkot a  "Változók" közül a  "hossza" helyére.'
      4:
        text: Ez azt jelenti, hogy a művészünk rajzol egy 50 képpontos négyzetet,
          majd hozzáad  10-et, és rajzol egy 60 képpontosat,. Majd újra hozzáad 10-et
          és rajzol egy négyzetet, amíg eléri a 90-et. Végül lesz 50, 60, 70, 80 és
          90 oldalú négyzetünk.
    parameters:
      1:
        text: Szia Janete vagyok, egy mernok vagyok Zynganal.
      2:
        text: Mit tegyünk, ha egy csomó, különböző méretű háromszöget akarunk rajzolni?
      3:
        text: Legépelhetjük az egész, hosszú kódot, vagy használhatunk függvényt paraméterekkel.
      4:
        text: Hogy ezt megtehessük, kattintsunk a kék csillagra a"rajzolj háromszöget"
          függvény definícióján. Ezután húzd a "bemenet neve" változót az "input"/"bemenet"
          blokkba.
      5:
        text: Ekkor ha "hosszúság"-ot írsz a mezőbe, amikor az írja "x" és lenyomod
          az "Enter"-t, akkor megadod a "hosszúság" bemenetét a függvényednek.
      6:
        text: Ezután kattints a csillagra. Most kattints a változók kategóriára és
          húzd a "hossz" elemet a "haladj előre" elemre a függvényeden belül. Ezután
          dobd ki a régi szám blokkot.
      7:
        text: Hogy egy függvényt paraméterekkel használj, kattints a függvények kategóriájára
          és húzd ki a "rajzolj egy megadott méretű háromszöget" függvényt.
      8:
        text: Most a matematikai blokkot használva számokat adhatsz meg, hogy különböző
          méretű háromszögeket rajzolj.
    hoc_wrapup:
      1:
        text: Gratulálok! Az utolsó játék megoldásakor egy olyan kódot írtál, amely
          bármilyen robotnak segítene végigmenni egy nem elágazó útvesztőben vagy
          alagútban, függetlenül annak hosszától. Ez a robot nem csak zombi vagy madár,
          de akár marsjáró vagy önmagát vezető autó is lehet.
      2:
        text: Ezek az alap koncepciók alkotják a szívét minden programnak vagy alkalmazásnak,
          amit valaha használni fogsz. Megismertük az ismétlés, az ismétlés amíg,
          a ha és a ha másképp utasításokat.
      3:
        text: Ha tetszett az első kódolás órád akkor látogass el a code.org weboldalra,
          hogy tovább folytathasd a tanulást. A 20 órás kurzusunk befejezése után
          tisztában leszel a programozás alapjaival, és elkezdhetsz telefon alkalmazásokat,
          robot utasításokat, játékokat vagy bármi mást írni.
      4:
        text: 'A technológia mindent megváltoztat, amit csinálunk, és nem számít,
          ha fiatal vagy öreg vagy: a programozás szórakoztató, kreatív és bárki megtanulhatja!'
    20_wrapup:
      1:
        text: Útmutató jegyzetek hamarosan!
    frozen_intro:
      1:
        text: Sziasztok, a nevem Lindsey. Modellkedem, színészkedek, és a saját appjaimat
          írom. Használjuk a kódot, hogy csatlakozzunk Annához és Elsához, ahogy felfedezik
          a jég varázsát és szépségét.
      2:
        text: Hópelyheket és mintákat fogsz majd létrehozni ahogy jégkorcsolyázol
          és létrehozol egy téli csodaországot, amit aztán majd megoszthatsz a barátaiddal.
      3:
        text: A következő órában meg fogod megtanulni az alapjait a kódolásnak. A
          hagyományos programozás általában szöveges, de mi a Blockly-t fogjuk használni,
          amely vizuális elemeket használ, amit használva fogd és vidd módszerrel
          tudsz programokat írni. Még az egyetemi hallgatók is így tanulják az alapokat.
          Az álarc alatt, továbbra is kódot írsz.
      4:
        text: Egy program utasítások sora, amely megmondja a számítógépnek, hogy mit
          csináljon. Építsünk egy kódot, vagy egy programot, amely segít Elsának egy
          egyszerű vonalat létrehozni. Ezt arra fogjuk használni a későbbiekben, hogy
          más bonyolult mintákat készítsünk.
      5:
        text: A képernyőd három fő részből áll. A bal oldalon van a jég felülete,
          ahol a programod futtathatod. Minden szinthez a leírás pont ott a felület
          alatt található.
      6:
        text: Ez a középső terület az eszköztár, minden ilyen blokk egy utasítás,
          amit Elsa és Anna megtehet.
      7:
        text: A fehér hely a jobb oldalon a munkaterület, ez az, ahol a programot
          építjük majd. A jégen való mozgáshoz használnod kell a "Menj előre" blokkot.
      8:
        text: Itt, a "Menj előre" blokk azt jelenti, hogy "lépj előre 100 pixelt".
          Amikor megnyomjuk a "Futtatás"-t, mi történik? Elsa előrehalad egy bizonyos
          távolságra a képernyőn, pontosan 100 képpontnyit! A pixelek alapvetően nagyon
          apró négyzetek a számítógép képernyőjén.
      9:
        text: A másik blokk ami ebben a feladványban van, azt mondja hogy "Fordulj
          jobbra 90 fokkal". Amikor használjuk ezt a "Fordulj jobbra" blokkot, attól
          Elsa elfordul egy bizonyos mértékben. Tudsz játszani azzal, hogy mennyire
          szeretnéd hogy Elsa elforduljon. A szög az Elsa előtti útból van számítva.
          Szóval, ez egy 90 fokos fordulat. És ez egy 120 fokos fordulat.
      10:
        text: Ne feledd, meg tudod változtatni a pixelek számát és a szöget a mellettük
          levő nyilakra kattintva.
    frozen_loops:
      1:
        text: Helló, Paola vagyok! A számítógépek nagyon jók műveletek ismétlésében.
          El tudsz számolni a 10-ig, 20-ig, vagy 100-ig. De egy számítógép el tud
          számolni egy milliárdig vagy billióig. Nem fog unatkozni, és ez csak egy
          pár másodpercet vesz igénybe. Mindegy, hogy számolás, vagy rajzolás, vagy
          bármi más - a számítógépek megismételhetik a dolgokat több százszor, vagy
          akár több milliárdszor.
      2:
        text: A programozásban ezt nevezzük ciklusnak. A ciklus az, ahogyan megismétled
          a kódod újra és újra. A következő feladatban, az a cél, hogy segíts Annának
          létrehozni egy négyzetet, az "Ismételd" blokkal.
      3:
        text: Amilyen kódblokkot teszel az "Ismételd" blokkba, az annyiszor lesz ismételve
          ahányszor csak akarod.
      4:
        text: Hogy egy négyzetet rajzolj, használhatod a "Menj előre" és a "Fordulj
          jobbra" blokkokat 4-szer. De a könnyebb út, ha megmondod a számítógépnek,
          hogy "Menj előre" és "Fordulj jobbra 90 fokkal" egyszer, aztán azt mondani,
          hogy ismételje meg ezt a pár műveletet 4-szer. Ehhez be kell tenni a "Menj
          előre" és a "Fordulj jobbra" blokkokat egy "Ismételd" blokkba.
      5:
        text: Ne feledd, meg tudod változtatni a számot az "Ismételd" blokkban bármire,
          és ez annyiszor fogja megismételni azt, ami a blokkon belül van.
    frozen_functions:
      1:
        text: Üdv, Chris Bosh vagyok. Profi kosaras vagyok, és én a fősulin programoztam.
      2:
        text: Egyike legfontosabb ötleteknek a számítástechnikában, hogy hogyan határozzunk
          meg új parancsokat. A legtöbb számítógépes nyelv csak mintegy 100 szót vagy
          parancsot tartalmaz. És valóban, a művészet és a varázslat a saját új szavak
          ezen építőelemekből való meghatározása.
      3:
        text: Ha már egyszer megtanítottad a számítógépet, hogyan kell csinálni egy
          műveletet bizonyos utasítások sorával, akkor kitalálhatsz egy nevet a művelethez,
          hogy később könnyen megismételhesse. Ha a saját parancsod hozol létre, és
          nevet adsz neki, azt függvénynek hívják.
      4:
        text: Helló, Jess vagyok. A blokkokkal való programozás során úgy használnád
          a függvényeket, mintha olyan utasítások gyűjteményei lennének, amelyeket
          sokszor akarsz használni. Például írtál egy kódot, ami egy négyzetet rajzol.
      5:
        text: 'Készíthetsz egy függvényt erre mint "Hozz létre egy négyzetet". '
      6:
        text: Most van egy új blokk, melynek segítségével több alkalommal használhatsz,
          hogy négyzeteket készíts.
      7:
        text: Sok egyszerű formából bonyolultabb minták hozhatóak létre. A következő
          feladványban a kód amit nemrég írtál arra, hogy egy kört készíts, elérhető
          mint egy új függvény, amellyel különböző méretű köröket készíthetsz. Tudod
          használni, hogy segíts Elsának tekervényes és gyönyörű mintákat készíteni
          a hóban?
    playlab_intro:
      1:
        text: Játékokat fogunk létrehozni a Játéklabor használatával. A jó játékoknak
          van egy története, és minden történetnek vannak szereplői. Megtanuljuk,
          hogyan bírhatjuk rá a szereplőinket, mint a boszorkányokat, az űrlényeket
          és az állatokat arra, hogy beszéljenek, mozogjanak és kölcsönhatásba lépjenek
          egymással. E tanfolyam végére képes leszel arra, hogy elkészíts egy játékot
          a semmiből és meg tudd osztani azt a barátaiddal.
      2:
        text: 3 fő részre van felosztva a képernyőd. A bal oldalon van a játéktér,
          ahol a program fog futni. Az utasítások minden egyes szinthez alól vannak
          odaírva.
      3:
        text: A középső területen az eszközkészlet van, és minden egyes blokk - egy
          kódrészlet. A jobb oldalon lévő üres területet munkaterületnek nevezik,
          és itt készítjük majd el a programunkat.
      4:
        text: Az indításhoz, a blokkjaidat hozzá kell csatolnod a narancssárga "futtatáskor"
          blokkhoz. Több blokkot is összekapcsolhatsz úgy, hogy elhúzod őket a sárga
          vonalig, és akkor majd összekapcsolódnak.
      5:
        text: Ebben az első feladványban a szereplőnk egy pingvin, akit ráveszünk
          arra, hogy mondjon egy "Helló!"-t. Ehhez áthúzzuk a "szereplő mondja" blokkot,
          összekapcsoljuk a  "futtatáskor" blokkal, és beleírjuk azt, hogy "Helló."
          A pingvint a "mozogj jobbra" és a "mozogj balra" blokkok használatával is
          mozgásra bírhatjuk. Miután elhelyezted a blokkokat, nyomd meg a futtatás
          gombot, hogy lásd mit programoztál.
      6:
        text: A kezdj hozzá, és a végére majd el tudsz készíteni egy saját játékot
          mindenféle egymással kölcsönhatásba lépő szereplővel, akik boldoggá vagy
          szomorúvá válhatnak, pontokat szerezhetnek, tűgolyókat dobhatnak egymásra,
          vagy akár el is tudják tüntetni egymást. Az egész rajtad múlik és a játékon,
          amit el szeretnél készíteni.
    playlab_events:
      1:
        text: Most mi arról fogunk tanulni, amit nap mint nap minden játékprogramozó
          használ. Ezt eseménynek nevezzük. Az esemény arra készteti a programodat,
          hogy figyelje, ha valami történik. Amikor ez az esemény bekövetkezik, akkor
          a programod végrehajt egy műveletet.
      2:
        text: Például eseményeknek tekintjük az egérkattintást, a nyilakat ábrázoló
          gombok leütését vagy a képernyő megérintését.
      3:
        text: Itt az űrrobotot fogjuk rávenni arra, hogy köszöntse a Földlakókat ha
          egy játékos rákattint. A "kattintásra" blokkot fogjuk használni, és hozzácsatolni
          a "mondd" blokkhoz. Ha a játékos rákattint az űrrobotra, minden végre lesz
          hajtva ami a "kattintásra" esemény blokkhoz csatlakozik.  Mit mond az idegened?
      4:
        text: Vannak "ha nyíl" blokkok is. Ha a "mozogj" blokkokat hozzárendeled ezekhez,
          akkor máris tudod mozgatni a szereplőket fel, le, balra, vagy jobbra. A
          játékod lépésről lépésre egyre interaktívabbá válik.
    playlab_repeat_forever:
      1:
        text: Ez az "ismételd mindig" blokk. Minden ezen a blokkon belül örökké ismétlődni
          fog a játék ideje alatt.
      2:
        text: Ha azt akarjuk, hogy egy szereplő valamit többször, a játékos beavatkozása
          nélkül csináljon meg, a végrehajtandó blokkokat berakjuk a "végtelen ismétlés"
          blokkba.
      3:
        text: Ebben a feladványban a célunk, hogy segítünk a varázslónak felvigyázni
          a Királyság határait, folyamatosan járőrözve balról jobbra. Megtanuljuk,
          hogyan működnek az ismétléses utasítások, amivel egy csomó időt takaríthatunk
          meg, ha majd saját játékot fogunk készíteni.
    C1_artist_intro:
      1:
        text: Ezek a rajzolási blokkjaid. Használd közülük az egyiket a művész mozgatásához
          arra a helyre, ahol megrajzolhatja a szürke vonalakat.
      2:
        text: Ezek az ugrás blokk tagjai. Mikor ezeket használod, a művészed nem rajzol,
          hanem a következő szürke vonalra ugrik.
    C1_bee_level_intro:
      1:
        text: Ugye milyen jó pofák ezek a méhek? A következő lépés a feladványban,
          hogy segíts a méhnek eljutni a virágokhoz, hogy összegyűjtse a nektárt és
          elrepüljön a méhsejtre, hogy mézet készítsen. Használnod kell a "get nectar"
          azaz nektár begyűjtés, és a "make honey" azaz készíts mézet blokkokat ebben
          a gyakorlatban.
      2:
        text: 'Minden virágon különböző számú nektár van: 1, 2, 3 vagy több. Tudjuk,
          hogy mennyi nektár van piros virágban, amit a sarkában lévő kis szám mutat.
          Bizonyosodj meg róla, hogy minden nektárt összeszedtél, mielőtt tovább mész.
          Továbbá minden méhsejt 1, 2, 3 vagy többet tartalmazhat. Győződj meg róla,
          hogy csak annyi nektárt tegyél a sejtbe, amennyit elbír.'
      3:
        text: Ha összegyűjtöttél minden nektárt, és elkészítetted az összes mézet,
          akkor vagy készen, és léphetsz a következő szintre. Ellenkező esetben meg
          kell ismételni a feladatot. Játszd végig és meg fogod érezni, milyen egy
          igazi programozó méh!
    C1_bee_loops:
      1:
        text: A ciklus egy tevékenység ismételgetése. Tehát ha egy kaptárt vizsgálok
          meg, kiveszek egy keretet, megnézem, visszateszem, aztán ugyanezt megcsinálom
          a többi kerettel. Elölről kezdek mindent, ugyanazokat a lépéseket csinálom
          újra és újra.
      2:
        text: Ezen a pályán azt szeretnénk, ha a méhecske három nektárt gyűjtene össze
          a virágokról. Ahelyett, hogy három "Gyűjts nektárt" blokkot használnánk,
          egy ciklus segítségével ismételjük ugyanazt a blokkot háromszor. Kattintsz
          a "Futtatás" gombra, és nézd meg, hogy sikerült-e! Ügyes voltál!
    C1_bigevent_unplugged:
      1:
        text: Ennek a leckének a Nagy Esemény nevet adtuk. Arról szól, hogyan irányíthatunk
          egy programot és hogyan tudunk rajta változtatni menet közben olyan eseményekkel,
          mint például egy billentyű lenyomása vagy kattintás az egérrel.
      2:
        text: Ebben a leckében egy papír távirányítóval fogunk irányítani téged. Olyan,
          mint egy igazi videójáték.
      3:
        text: Az esemény egy olyan művelet, aminek következtében valami történik.
          Például amikor az egér gombjára kattintasz, és betöltődik egy weboldal.
          Ez egy esemény. Amikor megérinted tablet képernyőjét a görgetéshez, az is
          egy esemény. Az események nagyszerű eszközök a felhasználók kezében, mert
          ezekkel akkor irányíthatják a programjukat, amikor csak akarják vagy amikor
          kell.
      4:
        text: Különböző dolgok történnek, és mi mindannyian reagálunk ezekre. Éhesek
          vagyunk, és a hűtőhöz megyünk. Halljuk, hogy jön a postás, bedobja a levélszekrénybe
          a levelünket, mi pedig kimegyünk és kivesszük. Ezek ugyanolyan események,
          mint egy gomb megnyomása vagy egy joystick mozgatása. Valami történik, ami
          aktivál bennünket, hogy tegyünk valamit.
      5:
        text: A számítógépes játékokban van egy "Update", vagyis "Frissítés" esemény,
          ami 30-60-szer történik meg másodpercenként. Játékfejlesztőknek ez az esemény
          szinte fontosabb, mint a billentyűk vagy az egér eseményei.
      6:
        text: 'A fő esemény, amire figyelünk, az a Frissítés hangja. Aztán a joystickot
          is ellenőrizzük a kattintás után. Tehát azt mondjuk: "Óh, valaki megnyomta
          a gombot ebben a képkockában? Igen vagy nem?" Események nélkül a játékos
          nem tudna mozogni, nem tudna ugrani, nem tudná irányítani a történéseket.
          A videójáték semmit sem lenne képes animálni.'
    C1_building_foundation:
      1:
        text: Tudnod kell, hogy a homokszobrászatban a kudarc a program része. De
          ha kitartasz, akkor csak egyre jobb és izgalmasabb lesz. Kitartás a játék
          neve. Tarts ki, és imádni fogod.
      2:
        text: Ezt a leckét alapozásnak hívjuk. Ebben a leckében egy igazán nehéz feladaton
          fogunk dolgozni. Egy olyan szerkezetet kell készíteni, ami legalább olyan
          magas, mint ez a pohár, és elég erős ahhoz, hogy elbírjon egy könyvet.
      3:
        text: Előfordulhat, hogy egy alkotás nem sikerül. Lehetnek időszakok, amikor
          frusztráltak leszünk, és fel akarjuk adni. Több ilyen pillanat is lehet.
          De ha tovább próbálkozunk, újra és újra beleadunk mindent, akkor biztos,
          hogy előbb vagy utóbb sikerülni fog.
      4:
        text: A kitartás azt jelenti, hogy akkor is megyünk tovább, amikor már tényleg
          fel akarnánk adni. Ha valami újat és mást akarsz létrehozni, akkor sok kudarc
          fog érni az út során.
      5:
        text: A kitartás kulcsa, hogy nem adod fel, akkor sem, amikor frusztrált vagy,
          inkább a folytatod, és tanulsz a kudarcokból. A frusztráció valójában csak
          azt jelenti, hogy valami csodálatos dolog vár a következő sarkon túl. Tehát
          ne add fel, mielőtt elérnéd a célod. Húú!
    C1_getting_loopy:
      1:
        text: Szia, a nevem Miral Kotb, és én vagyok az Iluminate megalkotója. A munkámban
          van valami, amit mind a táncban, mind a fényruhák programozásában használunk.
          Ez pedig a hurok! A hurok egy olyan művelet, amelyben valami újra és újra
          megismétlődik.
      2:
        text: Amikor többször megismételsz valamit, mint például ahogy én a hulahoppkarikát
          pörgetem, akkor ez a művelet egy hurok. Ez egy hurok. Ez egy hurok. És ez
          is egy hurok.
      3:
        text: Ma egy táncos bulit fogunk tartani. A hurkokat fogjuk gyakorolni egy
          új tánccal. Az ismétlést. Egy tánc segítségével fogunk megismerkedni a hurkokkal.
          Megtanulsz néhány egyszerű lépést, újra és újra megismétled őket addig,
          amíg véget nem ér a tánc.
      4:
        text: Íme a megtanulandó lépések. Tapsolj. Tedd mindkét kezed a fejed mögé.
          Tedd mindkét kezed a derekadra. Emeld fel a bal kezed. Emeld fel a jobb
          kezed. Elég egyszerű, igaz? Rá fogsz jönni, hogy lerövidítheted az irányokat,
          ha néhány tánclépést hurokba teszel.
      5:
        text: Valóban hurkokat használunk a táncunkhoz. A táncosokon számítógép van,
          mindannyian ugyanabban a hálózatban vannak. A fényeket hurokban újra és
          újra végigvihetem ugyanazokon a táncosokon. A hurokban lehet egy ismétlés,
          például azt mondom, hogy ezen a hat táncoson újra és újra végig kell menni,
          és a hurkon belül növelni kell a fény sebességét. És ez mind a hurkok segítségével
          jön létre. A hurkok fontosak az informatikában, mert megrövidítik és megkönnyítik
          a munkánkat.
    C1_happy_maps_unplugged:
      1:
        text: Ennek a leckének a címe Vidám térképek. Ma segítünk a szőrös kis barátunknak,
          Flurbnak eljutni a gyümölcséhez.
      2:
        text: Juttasd el Flurbot a gyümölcsödhöz. Ehhez ki kell találnod, hogy Flurbnak
          merre kell mennie, és nyilakkal irányítanod kell őt. Milyen irányba kell
          Flurbnak mennie ahhoz, hogy eljusson az almához? Húzz egy vonalat, amíg
          odáig ér.
      3:
        text: Ahhoz, hogy eljusson oda, karikázd be az irányt, hogy merre kell mennie.
      4:
        text: Készítsd el az algoritmust, ragassz nyilakat a megoldandó térkép mellé.
          A második ugyanez, de az lefelé megy.
      5:
        text: Mintha papíron programoznál. Ennyi az egész!
    C1_maze_debugging:
      1:
        text: A hibakeresés a problémák megtalálásából és kijavításából áll. A hibakeresésnek
          rengeteg módja van. Az egyik legegyszerűbb, ha lépésről lépésre haladsz
          addig, amíg meg nem találod, hogy hol romlott el valami. Itt megpróbálok
          kézen átfordulni hátrafelé a gerendán, de folyton leesek.
      2:
        text: Lépésről lépésre végigmentem az egyes részeken, és rájöttem, hogy hol
          hibáztam. Nem megfelelően tettem a kezem a gerendára. Ezért megpróbáltam
          újra a hátra kézenátfordulást a gerendán, de már egy új kéztartásban, és
          most sikerült. Nagyon örültem, hogy megtaláltam a hibát a hátra kézenátfordulásomban.
      3:
        text: A hibakeresés megtanulását egy, már a színpadon lévő blokk-készlettel
          kezdjük. Észre fogod venni, hogy ezekkel a blokkokkal nem jutsz el a célba.
          Meg kell keresnünk a hibát, és ki kell javítanunk. Hol romlott el? Észre
          fogod venni, hogy nyugati irányban még egy blokkra lett volna szükséged.
      4:
        text: Javítsuk ki ezt egy új nyugat blokk hozzáadásával és indítsuk el újra.
          Hurrá! Megcsináltad!
    C1_maze_intro_sequencing:
      1:
        text: Segíts a madárnak a malachoz jutni. Nézd meg a labirintust és döntsd
          el merre menjen.
      2:
        text: Húzd a blokkokat az eszközkészletből a munkaterületre. Bizonyosodj meg
          róla, hogy a "futtatáskor" blokk alatt szerepel a helyes megoldásod, majd
          kattints a "Futtatás" gombra, és nézd meg, hogyan megy oda a madár a malachoz.
    C1_maze_loops:
      1:
        text: A számítógépek különösen jók a parancsok ismétlésében. Emberként elég
          hamar megunjuk, ha ugyanazokat a dolgokat sokszor kell megismételnünk. De
          a számítógép ugyanazt a dolgot képes milliószor, vagy akár milliárdszor
          is megcsinálni, és nem fogja megunni, hanem rendben végre fogja hajtani.
      2:
        text: Ha például a Facebookon mindenkinek boldog születésnapot szeretnék kívánni
          úgy, hogy mindenkinek küldök egy e-mailt, akkor akár egy évszázad is kevés
          lenne, amíg ténylegesen megírom az összes e-mailt. De néhány sornyi kód
          elég ahhoz, hogy a rendszer mindenkinek küldjön egy "Boldog születésnapot
          kívánok" e-mailt a Facebookon.
      3:
        text: Ahhoz, hogy ezen a szinten a madarat a disznóhoz eljuttassuk... ahelyett,
          hogy három Északi blokkot húznánk a munkaterületre, az Ismétlés blokkot
          fogjuk használni. Húzd az Ismétlés blokkot a munkaterületre, és írd be a
          3-as számot. Ezután húzd a Mozgás északra blokkot az Ismétlés blokkba, és
          nyomd meg a Futtatás gombot, hogy jól csináltad-e. Gratulálok, sikerült!
    C1_moveitmoveit_unplugged:
      1:
        text: 'A lecke címe: Mozgatás, mozgatás. Együtt fogunk írni egy programot,
          amellyel a barátainkat a szélrózsa kiindulóponttól eljuttatjuk a célba,
          a mosolygó smiley-hez.'
      2:
        text: De a smiley arccal lefelé van, és csak egyvalaki tudja, hogyan lehet
          eljutni oda. Indítsuk el ezt a programot.
      3:
        text: A program egy olyan algoritmus, amit olyan formában kódoltak, hogy azt
          egy gép futtatni tudja. A legtöbbünk a program alatt a számítógépes programot
          értjük, de máshol is hasznosak tudnak lenni. Meg tudod írni a saját játékodat
          vagy akár egy robotot is programozhatsz, hogy helyetted csináljon meg dolgokat.
    C1_going_places_safely:
      1:
        text: A nevem Jeremiah. Szia! Hét éves vagyok. Szeretek játszani anyukám számítógépn
          de mindig megkérdezem szabad-e. "Anyu, játszhatok a számítógéppel? Persze!"
      2:
        text: Szeretem anyukám számítógépét, mert meg tudom nézni az internetet. Az
          internet olyan mint a lakókörnyék. Király helyekre mehetsz, tudsz beszélgetni
          a családoddal és a barátaiddal és egy csomó új dolgot tanulhatsz.
      3:
        text: Tegnap meglátogattam egy állatkertet, amely házam közelében van. Láttam
          egy zebracsikót. Lefényképeztem és megváltoztattam a csíkjai színét, adtam
          neki egy kalapot és hozzáadtam a fura állatok gyűjteményemhez. Menő! Egy
          messzi tájra utaztam, Kenyába. Ez egy ország Afrikában. Ott sok zebra él.
      4:
        text: Néha beszélgetek ismerősökkel az interneten, például a nagymamámmal.
          Ő egy másik államban él. Szia nagyi! Sütit süt nekem, és majd a születésnapomra
          elküldi. "Fincsi, bárcsak lenne az interneten valami szagló ráma!" Beszélgethetek
          különböző emberekkel az interneten, például az unokatestvéremmel, de csak
          olyanokkal beszélek, akiket ismerek.
      5:
        text: Azt szeretem a legjobban az internetben, hogy szórakoztató játékokat
          lehet játszani. Gól! Szeretek rajzolni is, új dolgokat alkotni, és megosztani
          azokat a barátaimmal. Király! Néha felkeresek olyan weboldalakat is, ahol
          új dolgokat tanulhatok, de mindig ragaszkodom a nekem megfelelő weboldalakhoz.
          Hű, dinoszauruszok!
      6:
        text: 'Az internet egy nagyon mókás hely. De ugyanúgy, mint amikor átmész
          az utcán, az interneten is óvatosnak kell lenni. Íme három szabály, amit
          érdemes észben tartani. 1. szabály: Először mindig kérdezd meg a szüleidet.
          2. szabály: Csak olyan emberekkel beszélgess, akiket ismersz. 3. szabály:
          Ragaszkodj a neked megfelelő helyekhez.'
      7:
        text: Hű, ez jó móka volt! Vacsoraidő. Most kijelentkezem. Alig várom, hogy
          újra bejelentkezzek, és megnézzem, hova látogathatok el legközelebb.
    C1_pair_programming:
      1:
        text: Ma a páros programozásról fogunk tanulni. A páros programozásban egy
          csapat tagjaként dolgozol. Miért kell két embernek egy számítógépet használni?
          Mert két fej jobb, mint egy. A páros programozásban a partnereddel ketten
          egy számítógéphez ültök le, és mindketten ugyanazon a projekten dolgoztok.
      2:
        text: A páros programozás során az egyik a vezető, a másik pedig a navigátor,
          mint az autóvezetésben. A vezető ül a számítógépnél, ő az, aki a billentyűzetet
          és az egeret vagy az érintőképernyőt használja, ő irányítja a számítógép
          fő műveleteit. A másik személy a navigátor. A navigátor segíti a vezetőt,
          válaszol a vezető kérdéseire, rámutat az esetleges problémákra és hibákra.
      3:
        text: A páros programozás sikerének a kulcsa a kommunikáció. Ne sértegesd
          a vezetőt, légy tisztelettudó, ne parancsolgass, mert senki sem szereti
          ha a kíbicek beszólnak. A partnereddel kettőtöknek folyamatosan beszélgetni
          kell. A vezető elmagyarázhatja, hogy mit csinál. A navigátor pedig javaslatot
          tehet arra, hogy mi legyen a következő lépés.
      4:
        text: A navigátornak a teljes képet kell látnia, míg a vezető a részletekre
          koncentrál. Mindegyik szerep fontos. A páros programozás a csapatmunkáról
          szól.
    C1_planting_seed:
      1:
        text: Ezt a leckét veteményezésnek hívják, és célja az algoritmusok megértése.
          Az algoritmusok konkrét utasítások,  amelyek megmondják, hogy milyen sorrendben
          kell valamit elvégezni. Még az olyan mindennapi dolgok is algoritmusok,
          mint a reggelizés vagy a fogmosás, a feladat elvégzése itt is kis lépésekből
          áll.
      2:
        text: A számítógépek nagyon okosak, de csak akkor, ha lépésről-lépésre megmondod
          nekik mit csináljanak. Az algoritmusokban az a jó, hogy ha pontosan követed
          az utasításokat, akkor olyan dolgot is meg tudsz csinálni, amit addig nem.
          Egy algoritmus olyan, mint egy recept.
      3:
        text: Ma magokat vetünk egy algoritmus segítségével. A képek szétvágásával
          készítsétek el a saját algoritmusotokat. Válasszátok ki azokat a képeket,
          amelyek a magok elvetésének a lépéseit mutatják, és rendezzétek ezeket a
          képeket megfelelő sorrendbe.
      4:
        text: Most itt az idő, nézzétek meg, működik-e az algoritmusotok. Kövessétek
          nagyon figyelmesen az algoritmus lépéseit. Helyes a sorrend? Sikerült elültetni
          egy magot az algoritmust követve? Ez olyan, mintha képekkel programoznátok!
      5:
        text: Amikor csokoládét készítünk, a folyamat sok nagy lépésből áll, és minden
          egyes nagy lépéshez kisebb lépések tartoznak. Különböző receptek vagy algoritmusok
          léteznek attól függően, hogy milyen ízű csokoládét szeretnénk készíteni.
          Minden lépés fontos, még a kicsik is, mert csak egy lépés kihagyásával is
          a többit nem lehet megtenni. Nagyon fontos olyan algoritmusokat létrehozni,
          amelyeket mások is megértenek. Ezért minden egyes lépést úgy kell leírni,
          hogy bárki is csinálja, az eredmény ugyanaz legyen.
    C1_playlab_storytelling:
      1:
        text: Itt az ideje a kreativitásnak, használd a kódolási tudásodat, és mesélj
          el egy történetet. A történetnek lesznek szereplői, és a közreműködéseddel
          ezek a szereplők beszélni fognak és kapcsolatba lépnek egymással. Kezdj
          el gondolkodni azon, hogy milyen történetet szeretnél elmesélni.
      2:
        text: A macskák mindig féltek a kutyáktól, de mi van akkor, ha egy macska
          rájön, hogy az egyik kutya barátságos akar lenni? Az "Amikor fut" blokk
          mindent elindít. A "Mozgás" blokk mozgatja a karakteredet, a "Beszél" blokk
          segítségével pedig a karaktered azt mondja, amit beírsz.
      3:
        text: Ez az "amikor összeütköznek" blokk, amihez újabb blokkokat csatlakoztathatsz.
      4:
        text: Beállítottam, hogy a kutya idejöjjön, és azt mondja, hogy "Szia", de
          ekkor a macska megijedt, és elfutott. "Ahhh." Ha több időm lenne, akkor
          biztosan jól végződött volna. Vége!
    C1_spelling_bee_intro:
      1:
        text: Ez a szint a helyesírási verseny szintje. Mozgasd a méhecskét a kirakós
          darabokkal. A mozgással párhuzamosan a méhecske betűket fog gyűjteni, és
          ezekből szavakat betűnként leírni.
      2:
        text: Próbáld ki, ki tudod-e betűzni azt a szót, amit a szakasz alatti dobozba
          kaptál. De légy óvatos! Ha rossz irányba mozogsz, akkor olyan betűket kapsz,
          amiket nem szeretnél.
    C1_zuck_repeat_loop:
      1:
        text: A számítógépek különösen jók a parancsok ismétlésében. Emberként elég
          hamar megunjuk, ha ugyanazokat a dolgokat sokszor kell megismételnünk. De
          a számítógép ugyanazt a dolgot képes milliószor, vagy akár milliárdszor
          is megcsinálni, és nem fogja megunni, hanem rendben végre fogja hajtani.
      2:
        text: Ha például a Facebookon mindenkinek boldog születésnapot szeretnék kívánni
          úgy, hogy mindenkinek küldök egy e-mailt, akkor akár egy évszázad is kevés
          lenne, amíg ténylegesen megírom az összes e-mailt. De néhány sornyi kód
          elég ahhoz, hogy a rendszer mindenkinek küldjön egy "Boldog születésnapot
          kívánok" e-mailt a Facebookon.
      3:
        text: Ebben a példában az a célod, hogy a madarat eljuttasd a malachoz. Most
          már tudjuk az "Ismétlés" blokkot használni, így ez nagyon könnyen fog menni.
          Megteheted azt is, hogy ötször adsz a számítógépnek egy "Lépés előre" parancsot,
          így a madár minden alkalommal egy-egy lépést tesz a malac felé. De megtehetd
          azt is, hogy csak egyszer mondod a számítógépnek, hogy mozogjon előre, majd
          azt mondod, hogy ismételje meg ezt ötször, és akkor ugyanez fog történni.
      4:
        text: Ehhez húzd a "lépj előre" parancsot, majd tedd az "ismételd" blokkba.
          Ezután kattints rá, majd add meg, hogy mennyiszer kell ismételni a blokkot,
          vagyis, hogy mennyi lépést kell előre menni.
      5:
        text: 'Még egy dolog: annyi parancsot tehetsz a ismétlés blokkba, amennyit
          csak akarsz. Tehát ebben a példában azt mondod neki, hogy mozogjon előre
          és forduljon balra, amit ötször fog megtenni. Jó szórakozást!'
    C2_artist_intro:
      1:
        text: Még a versenyre sem kvalifikálhatnád magad, ha nem lennének olyan emberek
          körülötted, akik jártasak a számítástechnikában, mert hogy az autók mennyi
          adatot gyűjtenek, ahhoz szükség van olyan emberekre, akik tudnak programokat
          írni, akik kitalálják, hogy te hogyan fogod kitalálni a teljesítmény növelésének
          a módját.
      2:
        text: Ezekben a fejtőrökben egy művész leszek, aki a ceruzájával különböző
          alakzatokat fog rajzolni. Bármerre megy a művészed, egy vonalat fog rajzolni.
      3:
        text: A vásznon való mozgáshoz használd a "lépj előre" blokkot. Itt a "lépj
          előre" blokk 100 képpontnyi előre lépést jelent. Mi történik, amikor a "Futtatás"
          gombra kattintasz? A művész előre lép egy bizonyos mennyiséget, és ez a
          mennyiség 100 képpont. A képpontok lényegében nagyon pici négyzetek a számítógép
          képernyőjén.
      4:
        text: A másik blokk, ami ebben a feladványban szerepel a "fordulj jobbra 90
          fokot" blokk. És amikor ezt használjuk, a művész egy bizonyos mértékben
          elfordul. Játszhatsz azzal, hogy mennyit forduljon el a művész. Ez egy 90
          fokos fordulat.
      5:
        text: Ez pedig egy 120 fokos fordulat. Ne felejtsd el, hogy ezeket az értékeket
          a képpont, illetve a fok melletti nyílra kattintva megváltoztathatod. Jó
          szórakozást a rajzoláshoz!
    C2_bee_conditionals:
      1:
        text: Ez a feltételes blokk. Azt mondja, HA van nektár vagy méz, ami kisebb,
          egyenlő vagy nagyobb egy számnál, AKKOR tedd ezt és ezt.
      2:
        text: Ez akkor hasznos, ha nem tudjuk mennyi nektárt vagy mézet kell összegyűjtenünk,
          mint ahogy itt látjuk, az a kérdőjellel.
      3:
        text: Ebben a példában azt fogjuk mondani, hogy HA a lila virágnak 0-nál több
          nektárja van, akkor nektárt kell gyűjteni. Ez azt fogja mondani a méhecskénknek,
          hogy mindaddig gyűjtsön nektárt, amíg ott van. Ez az!
    C2_binary_bracelets:
      1:
        text: Ez egy lecke a bináris karkötőről szól. Kódolni fogjuk a monogramunkat
          egy, a karunkon lévő karkötőbe, majd megmutatjuk a barátainknak!
      2:
        text: A bináris számrendszer arra alkalmas, hogy csak két értéket jelentsünk
          meg. Sokszor az emberek csak 1-esekre és 0-kra gondolnak, de a bináris számrendszer
          alkalmas "be" vagy "ki", "fel" vagy "le", vagy bármilyen ellentét leírására.
      3:
        text: Szia, a nevem Orion és robotokat programozok a Play-im-nél. Minden számítógép
          és robot legelemibb építőeleme elektromos kapukból áll. Ha a kapu nyitva
          van, az áram át tud rajta folyni, ha zárva van, nem tud.
      4:
        text: Ez egy példa a bináris kódra, a robot szeme a bináris. A robot szemét
          a LED-ek jelentik, ezek olyan fények, amelyek vagy be vannak kapcsolva,
          vagy ki vannak kapcsolva. Ez egy bináris rendszer, vagy az egyik, vagy a
          másik. A fények segítségével ábrázolhatjuk a bináris számokat. Ha van több
          robotunk, akkor mondhatjuk azt, hogy az első robot az 1., a második robot
          a 2., a harmadik robot a 4. és így tovább. Így ábrázolunk egy bináris számot.
          A robotok ezt a bináris szemükkel teszik meg, és kiszámolják neked.
    C2_conditionals_with_cards:
      1:
        text: 'Ennek a leckének a neve: feltételek kártyákkal. Minden nap döntéseket
          hozunk a látottak és a hallottak alapján.'
      2:
        text: Ki akarok menni a parkba, de előbb el kell döntenem, hogy vigyek-e magammal
          esernyőt vagy sem. Ezért kinézek az ablakon. Ha felhős az idő, akkor viszem
          az esernyőmet. Máskülönben fogom a napszemüvegem. Azt hiszem, jobb, ha esernyőt
          viszek. Amit látok és hallok, az határozza meg, hogy mit viszek magammal
          a parkba.
      3:
        text: Feltételeket a játékokban is használunk. Ma egy kártyajátékkal fogjuk
          gyakorolni a feltételes kifejezések használatát. Ebben a játékban az általam
          húzott kártya határozza meg, hogy a barátaim mit fognak csinálni. Ha egy
          hetest húzok, mindenki tapsol. Máskülönben mindenki azt mondja, hogy "húú".
          Próbáljuk ki! "Húú!" "Éljenzés!"
      4:
        text: Fogadok, hogy tudsz olyan játékot készíteni, amely feltételes elágazások
          használatával még szórakoztatóbb. Próbáld meg! A számítógépek feltételes
          elágazások miatt tűnnek okosnak. A feltételeket tartalmazó programok reagálni
          tudnak a felhasználói tevékenységekre, és az alapján hajtanak végre műveleteket.
      5:
        text: Gondolj a kedvenc videojátékodra. Egyes akciókért több pontot lehet
          kapni, mint másokért? Ez azért van így, mert a számítógép feltételes módot
          használ. A számítógép így hoz döntéseket. Ha eltalálod a célt, tíz pontot
          kapsz. Ellenkező esetben hármat veszítesz. Ha tudod, hogyan működnek a feltételek,
          sokféle izgalmas játékot készíthetsz.
    C2_artist_debugging:
      1:
        text: Már elhelyeztünk pár blokkot, de valami nem működik.
      2:
        text: 'Keressük meg a hibát a kódban: lassítsuk le a játékot, és figyeljük
          meg mi történik lépésről-lépésre.'
      3:
        text: Ott a hiba! A cica bajsza 75 pixel hosszú, nem 25.
    C2_bee_debugging:
      1:
        text: Hallottál már a programok hibakereséséről? Így lehet megtalálni, ha
          egy program nem működik helyesen. Amikor hibakeresel, megtalálod és kijavítod
          a hibákat.
      2:
        text: Már elhelyeztünk pár blokkot. A "Lépés" gombot fogjuk használni hogy
          minden blokkot lépésről-lépésre vizsgálhassunk. Így meg tudjuk nézni, hogy
          helyes-e a megoldás, és ha nem, hol kell kijavítani a kódot.
      3:
        text: Úgy tűnik ott a hiba. Szükség van még egy "lépj előre" blokkra. A "Lépés"
          gomb segít a programunk hibakeresésében, hogy megtaláljuk és kijavítsuk
          a hibákat.
    C2_digital_footprint:
      1:
        text: Vigyázz, hogy ne érjen kellemetlen meglepetés, használd a józan eszed,
          és ha kaotikus helyzetbe kerülsz, csak ints, hogy helló! Használd a fejed,
          amikor online vagy, ne beszélj ki mindent, tudd, hogyan őrizheted meg a
          biztonságod, hogyan biztosíthatsz magadnak némi privát teret! Lazítsd el
          az egész tested, tarts szünetet, és gondolkodj. Lazíts, tarts szünetet és
          gondolkodj online!
      2:
        text: Hallgass a szívedre, örülj, ragyogj, készíts egy Valentin-napi képeslapot,
          mond valakinek, hogy az enyém leszel. Hallgass a szívedre, amikor online
          vagy, érezd, hogy mi a helyes, légy mindig kedves, tiszteld a barátaid,
          viselkedjetek tisztességesen és légy kedves az interneten. Lazítsd el az
          egész tested, tarts szünetet, és gondolkodj. Lazíts, tarts szünetet és gondolkodj
          online!
      3:
        text: Használd a karod, hogy megölelhesd a kedvenc kisállataid, hogy ne ázzon
          el a ruhád, hogy felvehesd a kedvenc ruhád, és hogy repülhess és hihess.
          Használd a karod, amikor online vagy, tarts szünetet, törekedj  egyensúlyra,
          hagyd a technológiát, és keress magadnak egy fát, amire felmászhatsz. Lazítsd
          el az egész tested, tarts szünetet, és gondolkodj. Lazíts, tarts szünetet
          és gondolkodj online!
      4:
        text: Hallgass az ösztöneidre, raktározd el a tapasztalataid, figyelj, ha
          zsörtölődni kezdesz, ugorj egy hasast, érezd szénsavas üdítő buborékjait.
          Hallgass az ösztöneidre, amikor online vagy, figyelj bizonyos jelekre, hagyd,
          hogy az ösztöneid vezessenek, és szóljanak, ha valami baj van. Lazítsd el
          az egész tested, tarts szünetet, és gondolkodj. Lazíts, tarts szünetet és
          gondolkodj online!
      5:
        text: Tehát gondolkodj a fejeddel, érezz a szíveddel, egyensúlyozz a karjaiddal,
          hallgass az ösztöneidre  - online. Használd a lábadat, fuss és rúgj, ugrálj
          az ugrálóbottal, táncolj a ház körül, és szökdécselj büdös zokniban. Használd
          a lábadat, amikor online vagy, szállj szembe azokkal, akik erőszakoskodni
          akarnak a gyengébbekkel, akik átlépnek egy határt, húzd ki magad, légy kedves
          kicsikhez és nagyokhoz.
      6:
        text: Lazítsd el az egész tested, tarts szünetet, és gondolkodj. Lazíts, tarts
          szünetet és gondolkodj online! Tehát, gondolkodj a fejeddel, érezz a szíveddel,
          egyensúlyozz a karoddal, hallgass az ösztöneidre, állj a talpadra. Lazítsd
          el az egész tested, tarts szünetet, és gondolkodj. Lazíts, tarts szünetet
          és gondolkodj online!
    C2_digital_footprint_v2:
      1:
        text: Minden alkalommal, amikor online vagy, lábnyomot hagysz, amelyre rá
          lehet keresni, amit le lehet másolni, meg lehet osztani, közzé lehet tenni,
          és amely maradandó. Te milyen digitális lábnyomot hagysz magad után? Milyen
          digitális lábnyomot szeretnél hagyni?
    C2_graph_paper:
      1:
        text: A lecke címe "Grafikus programozás", és az algoritmusokról szól. Ma
          megtanulunk olyan programokat írni, amelyek megmutatják egymásnak, hogyan
          lehet csak kézzel rajzolt nyilak segítségével egyszerű fekete-fehér képeket
          újraalkotni.
      2:
        text: Az algoritmus egy feladat elvégzésére vonatkozó utasítások listája.
          Ezt az utasítássorozatot fogjuk követni, és elkészítünk egy tálat. Az algoritmusok
          akkor hasznosak igazán, amikor arra van szükséged, hogy valaki más megértse,
          hogyan kell valamit megcsinálni.
      3:
        text: Ha egy számítógépnek írsz algoritmust, akkor azt apró kicsi lépésekre
          kell lebontani. Tehát, fejezd be ezt a sort, és menj a következőre, majd
          a következőre, és kész is vagy.
      4:
        text: Én algoritmusokat használok a munkámban. Ha leírom az összes lépést,
          akkor újra el tudom készíteni ugyanazt a darabot, de meg is taníthatom valakinek,
          és aztán csinálja meg ő. Beteszem az üveget az égetőkemencébe, összeolvasztom
          őket, és a tál elkészítéséhez követem az utasítás többi részét. Az algoritmusok
          útmutatást adnak valami elvégzéséhez.
    C2_artist_loops:
      1:
        text: Itt az ismétlés blokkot fogjuk használni, így amikor a művészünket programozzuk,
          lépéseket takarítunk meg. Már van néhány blokk a színpadunkon, de ezek csak
          azért vannak ott, hogy elindulhassunk.
      2:
        text: Ahhoz, hogy ezeket a blokkokat négyszer hurkoljuk, amivel megrajzolhatjuk
          az egész négyzetet, csak elő kell húznunk a ismétlés blokkot, és az előre
          mozgás és a jobbra fordulás blokkokat az ismétlés blokk belsejébe kell helyezni.
          Amikor megnyomjuk a futtatás gombot, a művész négyszer megismétli ezeket
          a lépéseket, és ezzel elkészíti a négyzetet.
    C2_bee_loops:
      1:
        text: A ciklus egy tevékenység ismételgetése. Tehát ha egy kaptárt vizsgálok
          meg, kiveszek egy keretet, megnézem, visszateszem, aztán ugyanezt megcsinálom
          a többi kerettel. Elölről kezdek mindent, ugyanazokat a lépéseket csinálom
          újra és újra.
      2:
        text: Ez az ismétlés blokk. Bármit is teszünk az ismétlés blokk belsejébe,
          az adott műveletet annyiszor fogja megismételni, ahányszor csak megmondjuk
          neki. Például ezen a szinten ahelyett, hogy háromszor vennénk elő az előre
          mozdulást a nektár készítéséhez, inkább csak egyszer húzzuk ki, és háromszor
          ismételjük meg a műveletet. Ez megkönnyítette a dolgunkat!
    C2_maze_intro:
      1:
        text: A programozás általában szövegben íródik, de mi a Blockly-t fogjuk használni.
          A Blockly vizuális blokkokat használ, és programot írni a húzd és dobd funkcióval
          lehet. Ha részletesebben megvizsgáljuk, akkor azt látjuk, hogy valójában
          kódolsz. Először egy olyan program kódját fogjuk megalkotni, amely segít
          az Angry Birdnek átjutni egy labirintuson, eljutni a gonosz disznókhoz,
          akik ellopták a tojásait.
      2:
        text: A Blockly három fő részből áll. Balra van a madár labirintusa, ahol
          a programod fog futni. Az egyes szintekhez tartozó utasítások a labirintus
          alatt találhatók. Ez a középső terület az eszköztár, és minden egyes blokk
          egy-egy parancs, ezeket a madár érti. A jobb oldali fehér területet munkaterületnek
          nevezzük, és itt fogjuk felépíteni a programunkat.
      3:
        text: Mi történik, ha a mozgatás blokkot a munkaterületünkre húzom, és megnyomom
          a Futtatás gombot? A madár egy kockával előbbre lép a rácson. És mi van
          akkor, ha azt akarom, hogy a madár csináljon is valamit, miután egy kockával
          előrébb lépett? Hozzáadhatok egy másik blokkot a programunkhoz.
      4:
        text: Most a "fordulj jobbra" blokkot fogom használni, és addig húzom, amíg
          meg nem jelenik a sárga nyíl. Ekkor elengedem, és a két blokk összekapcsolódik.
          Amikor újra megnyomom a "Futtatás" gombot, a madár felülről lefelé haladva
          végrehajtja a munkaterületen egymás után pakolt parancsokat.
      5:
        text: Ha törölni szeretnél egy blokkot, csak ki kell venni a többi közül,
          és be kell dobni a kukába. A program futtatása közben, bármikor megnyomhatod
          a visszaállítás gombot, és a madár visszatér a kezdetekhez. Most pedig kapjuk
          el azokat a disznókat!
    C2_paper_airplanes:
      1:
        text: Ez a lecke az "Algoritmusok a való világban" címet viseli. Az algoritmusok
          azt írják le, amivel az emberek a mindennapjaikban foglalkoznak. A süteményreceptek
          lerása vagy madáretető készítése egyaránt a mindennapi algoritmusok közé
          tartozik.
      2:
        text: Ma egy papírrepülőre írunk algoritmust, annak elkészítésére és tesztelésére.
          Előbb azonban ezt a nagy projektet könnyen követhető kis lépésekre kell
          bontanunk. Egy papírrepülő elkészítéséhez el kell döntenünk, hogy milyen
          lépésekre van szükség és milyen sorrendben.
      3:
        text: Az algoritmus elkészítése a képek szétvágásával kezdődik. Ezután ki
          kell választani azt a 6 képet, amelyek a papírrepülő elkészítéséhez szükséges
          lépéseket mutatják, majd ezeket a képeket megfelelő sorrendbe kell rendezni.
          Miután ezzel készen vagytok, cseréljetek algoritmust egy másik tanulócsoporttal,
          és próbáljátok ki, működik-e az algoritmus. Egy jó papírrepülő elkészítéséhez
          nagyon fontos, hogy algoritmust gondosan tervezzétek meg.
      4:
        text: A csokoládékészítés folyamata több nagyobb lépésből áll. És minden egyes
          nagyobb lépés több kisebb lépésből áll. Többféle recept van, s hasonlóképp
          többféle algoritmus, attól függően, hogy milyen ízű csokoládét szeretnénk.
          Minden lépés fontos, még a kisebbek is. Ha egy lépés kimarad, a többit sem
          lehet végrehajtani. Nagyon fontos olyan algoritmusokat létrehozni, amelyeket
          mások is megértenek. Ezért kell leírni minden egyes lépést, hogy bárki készíti
          is el a csokoládét, az eredmény mindig ugyanaz legyen.
    C2_playlab_createstory:
      1:
        text: Eddig egy animációt vagy történetet készítettél, ami pontosan ugyanazt
          csinálja mindig, amikor futtatod. Most egy interaktív játékot csinálhatsz,
          amivel valóban játszani lehet.
      2:
        text: Itt van a "ha nyíl" blokk és a "mozgasd a szereplőt" blokk. Ezeket a
          blokkokat összeillesztheted, hogy a szereplőket a nyilakkal mozgatni tudd.
    C2_relay_programming:
      1:
        text: Ma a váltóprogramozással foglalkozunk. Váltóprogramozásra akkor kerül
          sor, amikor nagy nyomás alatt kell dolgozni vagy hibát kell elhárítani.
          Hibák pedig időnként előfordulnak, főleg amikor vagy nagyon gyorsan kell
          dolgozni vagy csapatban kell dolgozni. Grafikus programozással szimuláljuk
          a kódolást, és váltóversenyekkel szimuláljuk a határidőt.
      2:
        text: Váltóprogramozás során csapatok versenyez egymással, hogy ki készül
          el gyorsabban egy grafikus programmal. Ellenőrizd a társad munkáját, keress
          hibát, ha kell, javítsd ki, tedd hozzá a saját nyilad, majd fuss vissza
          és jelöld meg a társad.
      3:
        text: Programozók gyakran keresik a hibákat, meg kell találniuk a hibákat
          az algoritmusokban vagy a kódolásban, és ki kell javítaniuk azokat. A hibakeresésnek
          számtalan módja van. Az egyik legegyszerűbb, ha lépésről lépésre haladunk,
          amíg meg nem találjuk, hogy hol romlott el valami, majd a hibát ki kell
          javítani.
      4:
        text: Itt a hátraszaltózást próbálom, de folyton leesek. Lépésről lépésre
          végigmegyek minden egyes részen, és rájövök, hol követtem el a hibát. Az
          edzőm megmutatta, hogy nem megfelelően fogom meg a gerendát. Ezért egy újabb
          hátraszaltót csináltam a gerendán, de már az új kéztartással, és sikerült!
          Nagyon örültem, hogy sikerült kijavítani a hátraszaltómat. Megoldottuk!
          A hibakeresés a probléma meghatározását és kijavítását jelenti. Szép munka!
    C2_zuck_repeat_loop:
      1:
        text: A számítógépek különösen jók a parancsok ismétlésében. Emberként elég
          hamar megunjuk, ha ugyanazokat a dolgokat sokszor kell megismételnünk. De
          a számítógép ugyanazt a dolgot képes milliószor, vagy akár milliárdszor
          is megcsinálni, és nem fogja megunni, hanem rendben végre fogja hajtani.
      2:
        text: Tegyük fel, hogy a Facebookon mindenkinek születésnapi köszöntőlevelet
          szeretnél küldeni. Ha valójában meg akarnánk írni ezeket az e-maileket,
          akkor több, mint egy századba telne ezt megtennünk. Azonban néhány sor kóddal
          megoldható, hogy a rendszer mindenkinek a Facebookon elküldjön egy születésnapi
          köszöntőt. Szóval valójában ez a ciklus, és ezért olyan fontos a létezésük,
          és a számítógépek nagyon jók a ciklusok végrehajtásában.
      3:
        text: Ebben a példában a célod, hogy eljuttasd a madarat a malachoz. Most
          már használhatjuk az "ismételd" blokkot a feladat egyszerűbb megoldására.
          Megcsinálhatod úgy is a feladatot, hogy ötször adod ki a "lépj előre" parancsot,
          hogy minden lépéssel eggyel közelebb legyél a malachoz.
      4:
        text: Vagy mondhatod a számítógépnek, hogy "lépj előre" egyszer, majd ezt
          pedig "ismételd" 5 alkalommal, és így ennyiszer fogja ugyanazt csinálni.
          Szóval ehhez húzd a "lépj előre" parancsot az "ismételd" blokkba. Majd kattints
          rá, és állítsd be, hogy mennyiszer kell ismételni a blokkot, vagyis hányszor
          szeretnél előre lépni.
      5:
        text: 'Még egy dolog: annyi parancsot helyezhetsz el az "ismételd" blokkban,
          amennyit csak akarsz. Ebben a példában azt mondjuk, hogy lépj előre, majd
          fordulj balra, és ezt ötször tesszük meg. Ügyes munka, jó szórakozást!'
    C3_artist_functions:
      1:
        text: Az egyik nagyszerű dolog a számítógépes programozásban, hogy miután
          megtanítottad a számítógépet, hogyan kell egy dolgot megcsinálni, meg tudod
          hívni ugyanazt a függvényt újra. Adsz neki egy nevet, majd meghívod. Ez
          valójában a nyelv kibővítése.
      2:
        text: Az általunk készített programban megtanultuk, hogyan kell négyzetet
          rajzolni négyszeri előrelépéssel és fordulással. Vegyük ezt a függvényt,
          és adjuk neki a "rajzoljon egy négyzetet" nevet. Szóval akármikor négyzetet
          szeretnénk rajzolni, csak annyit mondunk, hogy "rajzoljon egy négyzetet",
          ekkor meghívja a függvényt, az abban lévő kódot. Megcsinálja nekünk a rajzolást.
          Hozzáadtuk ezt a fogalmat a programozási nyelvünkhöz.
    C3_artist_intro:
      1:
        text: Még a versenyre sem kvalifikálhatnád magad, ha nem lennének olyan emberek
          körülötted, akik jártasak a számítástechnikában, mert hogy az autók mennyi
          adatot gyűjtenek, ahhoz szükség van olyan emberekre, akik tudnak programokat
          írni, akik kitalálják, hogy te hogyan fogod kitalálni a teljesítmény növelésének
          a módját.
      2:
        text: Ezekben a fejtőrökben egy művész leszek, aki a ceruzájával különböző
          alakzatokat fog rajzolni. Bármerre megy a művészed, egy vonalat fog rajzolni.
      3:
        text: A vásznon való mozgáshoz használd a "lépj előre" blokkot. Itt a "lépj
          előre" blokk 100 képpontnyi előre lépést jelent. Mi történik, amikor a "Futtatás"
          gombra kattintasz? A művész előre lép egy bizonyos mennyiséget, és ez a
          mennyiség 100 képpont. A képpontok lényegében nagyon pici négyzetek a számítógép
          képernyőjén.
      4:
        text: A másik blokk, ami ebben a feladványban szerepel a "fordulj jobbra 90
          fokot" blokk. És amikor ezt használjuk, a művész egy bizonyos mértékben
          elfordul. Játszhatsz azzal, hogy mennyit forduljon el a művész. Ez egy 90
          fokos fordulat.
      5:
        text: Ez pedig egy 120 fokos fordulat. Ne felejtsd el, hogy ezeket az értékeket
          a képpont, illetve a fok melletti nyílra kattintva megváltoztathatod. Jó
          szórakozást a rajzoláshoz!
    C3_artist_nested_loops:
      1:
        text: Amikor egy ciklust egy másik ciklusba helyezünk el, azt beágyazott ciklusnak
          nevezzük. Például itt a kódunk egy háromszöget rajzol 100 képpont hosszúságú
          oldalakkal úgy, hogy az ismételd blokkban 3 alkalom van megadva, a háromszög
          minden oldalának megrajzolásához.
      2:
        text: De mi most 6 darab háromszöget szeretnénk rajzolni. Ehhez vesszük azt
          a ciklust, és betesszük egy másik ismételd blokkba. Egész menő!
    C3_bee_conditionals:
      1:
        text: Ez a feltételes blokk. Azt mondja, HA van nektár vagy méz, ami kisebb,
          egyenlő vagy nagyobb egy számnál, AKKOR tedd ezt és ezt.
      2:
        text: Ez akkor hasznos, ha nem tudjuk mennyi nektárt vagy mézet kell összegyűjtenünk,
          mint ahogy itt látjuk, az a kérdőjellel.
      3:
        text: Ebben a példában azt fogjuk mondani, hogy HA a lila virágnak 0-nál több
          nektárja van, akkor nektárt kell gyűjteni. Ez azt fogja mondani a méhecskénknek,
          hogy mindaddig gyűjtsön nektárt, amíg ott van. Ez az!
    C3_bee_debugging:
      1:
        text: Hallottál már a programok hibakereséséről? Így lehet megtalálni, ha
          egy program nem működik helyesen. Amikor hibakeresel, megtalálod és kijavítod
          a hibákat.
      2:
        text: Már elhelyeztünk pár blokkot. A "Lépés" gombot fogjuk használni hogy
          minden blokkot lépésről-lépésre vizsgálhassunk. Így meg tudjuk nézni, hogy
          helyes-e a megoldás, és ha nem, hol kell kijavítani a kódot.
      3:
        text: Úgy tűnik ott a hiba. Szükség van még egy "lépj előre" blokkra. A "Lépés"
          gomb segít a programunk hibakeresésében, hogy megtaláljuk és kijavítsuk
          a hibákat.
    C3_bee_functions:
      1:
        text: A számítástechnikában az egyik legfontosabb fogalom az új parancsok
          definiálása, hogyan adjuk hozzá saját szavainkat egy számítógépes nyelvhez.
          A legtöbb számítógépes nyelvnek mindössze körülbelül száz szava vagy parancsa
          van. Egyszerre művészi és varázslatos, ahogy ezekből az építőelemekből új
          szavakat határozunk meg, a saját szavainkat.
      2:
        text: A sportban is állandóan ezt csináljuk. Például a kosárlabdában azzal
          kezdjük, hogy megtanulunk cselezni, kosárra dobni, lepattanó labdát elkapni.
          Miután megtanultuk ezeket az alapvető mozdulatokat, új mozdulatokat tanulunk,
          majd összerakjuk ezeket az építőelemeket egy mozdulatsorrá, ilyen lehet
          például az elzárás és leválás, az add és fuss. Ezekből azután már bonyolultabb
          játékot is lehet játszani. Ha egyszer megtanulod a mozdulatokat, és nevet
          is adsz nekik, a csapatban mindenki tudja fogja, hogyan kell csinálni.
      3:
        text: Hasonlóképpen, ha egyszer parancsok sorozatának segítségével megtanítottad
          a számítógépnek, hogyan kell végrehajtani egy műveletet, akkor nevet is
          adhatsz a műveletnek, így később könnyen megismételheted. Amikor meghatározod
          a saját parancsodat, és nevet is adsz neki, akkor azt függvénynek nevezzük.
          Most függvényeket fogunk használni, ezekkel segítünk a méheknek.
      4:
        text: Ebben a példában a függvényünket "get 2 nectar"-nak neveztük el, ez
          a zöld blokk itt. A szürke dobozra nézve, látjuk, hogy mit csinál a get
          2 nectar függvény, vagyis ez a függvény definíciója. Ha belenézünk, látjuk,
          hogy a get 2 nectar először begyűjt egy nektárt, majd megint begyűjt egy
          nektárt. Mindig azt nézd, hogy mi van a szürke dobozban, hogy megtudd, mire
          képesek ezek a zöld függvény blokkok.
    C3_bee_nested_loops:
      1:
        text: Most pedig egymásba ágyazott hurkokat fogunk használni a méhecskénél.
          Kapunk egy kezdő kódot, amely azt mondja a méhnek, hogy haladjon előre,
          háromszor vételezzen nektárt, majd forduljon jobbra. Fogjuk ezt az egész
          kódot, és ágyazzuk be egy másik ismétlés blokkba, majd állítsuk be, hogy
          háromszor ismétlődjön. Kész!
    C3_bounce:
      1:
        text: Készíthetsz saját ugrálós játékot, amit megoszthatsz majd a barátaiddal!
          Fantasztikus!
      2:
        text: Először össze kell kapcsolnunk az ütő vezérlőket a billentyűzetünk nyílbillentyűivel.
      3:
        text: Ezt úgy tudjuk megtenni, hogy a balra nyíl blokkot a balra mozdulás
          blokkhoz, a jobbra nyíl blokkot pedig a jobbra mozdulás blokkhoz kapcsoljuk.
          Próbáld ki, és pillanatok alatt programozhatod a saját ugrálós játékodat!
    C3_computational_thinking:
      1:
        text: Ez a lecke a számítógépes gondolkodásról szól. Néha meglehetősen nehéz
          egy új játékot megtanulni, nem igaz? Elsőre nagyon zavarosnak tűnik, és
          néha nincs senki, aki megtanítana a szabályokat, így magadnak kell rájönnöd.
      2:
        text: A jó hír az, hogy egyre könnyebben fogsz rájönni a dolgokra egyedül,
          különösen, ha ismersz néhány gondolkodási trükköt. Ezek a trükkök egyedi
          támpontot adnak a problémák megfejtéséhez és megoldásához. Ebben a leckében
          négy trükköt fogsz megismerni, gyakorolhatod is őket a barátaiddal, majd
          a trükkök segítségével megpróbálhatod kitalálni az egyik játék szabályait.
      3:
        text: Amikor egy nagyobb problémát kisebb részekre bontasz, az eszedet használva
          bontasz szét egy nagyobb problémát. Miután a nagyobb problémát több kisebb
          problémára bontottuk, rátérhetünk a következő trükkre, amit mintaillesztésnek
          hívunk.
      4:
        text: Ilyenkor a dolgok közötti hasonlóságokat keressük. Amint megtaláltam
          az egyező dolgokat, ki tudom találni a különbözőségeket is. A különbségek
          eltávolítását nevezzük absztrakciónak.
      5:
        text: Miután megvannak a probléma megoldásához vezető lépések, ezeket a lépéseket
          meghatározott sorrendbe tudom helyezni, és ezt nevezzük algoritmusnak. Így
          már bárki használhatja az utasításaimat a probléma megoldásához. Ezt a négy
          lépést fogjuk használni arra, hogy kitaláljuk, hogyan játszunk egy szabály
          nélküli játékot. A játék végére képesek lesztek valami olyasmit játszani,
          ami így néz ki!
    C3_crowdsourcing:
      1:
        text: Ezt a leckét úgy hívják, hogy közösségi ötletbörze. Ebben a leckében
          egy kártyapakli segítségével azt fogjuk megtanulni, hogy bizonyos dolgokat
          sokkal könnyebb csoportban elvégezni, mint egyedül próbálkozni. Szóval szedd
          össze a barátaid, és csináljatok valami fantasztikusat. A közösségi ötlebörze
          révén az emberek egy nagyobb csoportja nyújt segítséget akkor, amikor valamit
          gyorsan kell elvégezni.
      2:
        text: Az számítástechnikában állandóan használjuk a közösségi ötlebörzét.
          Amatőrök és szakemberek ezrei kapcsolják össze a számítógépeiket, és több
          milliárd információ között kutatnak. Olyan dolgokat keresnek mint például
          hogy mi a következő Marsenne-prím, vagy hogy lehetséges-e földönkívüli kommunikáció.
      3:
        text: Amikor egy filmet nézünk, a filmben minden másodperc 24 egyedi képből
          áll, ezeket hívjuk képkockáknak. Tehát minden egyes képet meg kell alkotni,
          átalakítani vizuális formába, és össze kell rakni. A munkatársaimmal mi
          mind szoftverfejlesztők vagyunk. Együtt dolgozunk egy szotver fejlesztésén,
          valójában a szofter hozza létre a képet, a végső képet, amit a képernyőn
          látunk. Ezt az eszközt művészek és fejlesztők használják csapatmunkában
          egy olyan folyamat részeként, amelynek eredményeként megalkotják a képernyőn
          látni kívánt képeket.
      4:
        text: Vegyük például a "Némó nyomában" című filmet, amikor Crush, Squirt és
          barátaik átrepülnek a Kelet-ausztrál áramlaton. Képeket látunk az áramló
          vízről, látjuk a színeket a teknős hátán, látjuk a halak oldalát. Mindezeket
          az általunk írt matematikai és számítógépes programokkal generáljuk, majd
          ezeket átadjuk a művésznek, aki felhasználja a végső kép elkészítéséhez,
          finomít rajta, hogy szép és szórakoztató legyen.
    C3_dice_race:
      1:
        text: Ezt a leckét kockaversenynek hívjuk. Szinte mindenki szeret számítógépes
          játékokat játszani. Gondoltál már arra, hogy a számítógépes programozók
          hogyan alakítják át a játék lépéseit programmá? A számítógépes játékok készítésének
          és bármilyen probléma megoldásának első lépése gondolkodást és tervezést
          igényel.
      2:
        text: A problémamegoldás gondolkodási lépésének az eredménye egy algoritmus,
          amely egy lépésről lépésre kidolgozott terv egy probléma megoldására vagy
          egy feladat befejezésére. Ebben a leckében egy kockaverseny játék algoritmusát
          fogjuk megalkotni. Ezután megkéritek a barátaitokat, hogy próbálják ki a
          tervet, hogy lássuk, tudják-e követni a játék lépéseit. Miután a programozó
          megbizonyosodott arról, hogy a lépések helyesek, lefordítja az algoritmust
          egy olyan programra, amelynek nyelvét a számítógép már érti.
      3:
        text: Szinte minden mindennapi tevékenységünkhöz szükség van egy algoritmusra,
          egy olyan listára, amelynek lépéseit követve el tudjuk végezni a feladatainkat.
          Gondoljunk csak arra, amikor felkészülünk az iskolára, amikor megtervezünk
          egy, a barátainkkal töltendő vidám napot, vagy egy uzsonna elkészítésére.
          A feladatok elvégzését kisebb lépésekre kell bontani, és néha a lépéseket
          meghatározott sorrendbe kell tenni.
      4:
        text: Gondolj egy szendvics elkészítésére. Nem számít, hogy melyik hozzávalót
          veszed ki először a szekrényből. De a mogyoróvajat csak akkor tudod rákenni
          a kenyérre, ha előtte kinyitottad az üveget. A számítógépeknek algoritmusokra
          és programokra van szükségük, amelyek megmutatják nekik, hogyan kell elvégezni
          még olyan egyszerű dolgokat is, amelyeket mi gondolkodás nélkül is meg tudunk
          csinálni.
      5:
        text: Az algoritmus az a gondolatmenet, amely megmondja, hogy minek kell megtörténni,
          a program viszont a számítógépnek ad tényleges utasításokat, hogy az a dolog
          meg is történjen. Egy algoritmust le kell fordítani egy programra, mert
          a számítógép csak azt tudja lefuttatni. Egy feladatot algoritmusnak nevezett
          lépésekre lebontani nem mindig könnyű. De mint minden új készség, gyakorlással
          ez is egyre könnyebb lesz.
    C3_farmer_while:
      1:
        text: Míg a hurkok eléggé hasonlítanak ahhoz, amit a mindennapi életben is
          csinálunk. Képzeld el, hogy autót mosol, és addig mosod, amíg tiszta nem
          lesz. És mindaddig folytatod a mosást míg tiszta nem lesz. Ezeket a dolgokat
          folyamatosan értékeled.
      2:
        text: Van egy új feladatunk, segítenünk kell egy gazdának. Ennek a neve "amíg"
          blokk. Valójában ez nagyon egyszerű. Amíg van fent egy igaz állítás, addig
          csinálni kell valamit. Például, amíg van ott egy halom, addig a szénát onnan
          el kell vinni. Gyerünk, próbáld ki a te gazdáddal.
    C3_functional_suncatchers:
      1:
        text: Ez a lecke a működő napfogókról szól. Ezeket a csinos napfogókat függvények
          segítségével fogod megalkotni. Egy ilyen napfogó létrehozása több lépésből
          áll. Néhány lépést többször is meg kell ismételni.
      2:
        text: Egy napfogó készítésének a lépéseit leegyszerűsíthetjük azzal, hogy
          megnézzük, mit kell újra és újra megismételni. Ezeket a lépéseket csoportosíthatjuk
          egy úgynevezett függvénybe.
      3:
        text: De egy gyönyörű napfogó elkészítése nem szűkíthető le pusztán néhány
          pontos lépés követésére. Néha szeretnénk kreatívak lenni, és megváltoztatni
          a felhasznált gyöngyök színét. Különböző színű gyöngyökkel a napfogókat
          egyedivé tehetjük.
      4:
        text: A napfogód akkor lesz egyedi, ha megtanulsz a gyöngyökre változóként
          gondolni. A változó egy olyan szó, ami egy változó információ számára jelöli
          ki a helyet. Jó szórakozást! Készíts gyönyörű napfogókat függvények és változók
          segítségével!
    C3_internet:
      1:
        text: Ez a lecke az internetről szól. Az internet egy nagyon forgalmas hely,
          hasonlít ehhez a forgalmas úthoz. Az üzenetek, mint az autók, száguldoznak,
          hogy eljussanak a céljukhoz. Az üzenetek nagyon gyorsan mozognak az interneten.
      2:
        text: Az internet működésének eljátszása segít megérteni, mi történik az internet
          használata közben. Megtanulod, hogyan jutnak el az üzenetek a számítógépedtől
          a kedvenc weboldaladig vagy egy barátodtól az e-mail postaládába. Ahogy
          a forgalmas utakon is könnyebb közlekedni, ha ismered az utakat és el tudod
          olvasni a táblákat, úgy az interneten való utazás sem olyan bonyolult, ha
          tudod, mi zajlik a színfalak mögött.
      3:
        text: Az interneten történő üzenetküldés egy kicsit olyan, mint a postai üzenetküldés,
          de van néhány eltérés. Itt vagyok a Google.com-on. A weboldal IP-címe ez
          a szám. Az IP-címre úgy is gondolhatsz, mint a feladó címére egy postai
          levélen. Képzeljük el, hogy üzenetet akarok küldeni valakinek a postán,
          az irodájába, ide. Látod az URL-t és az IP-címet azon az ajtón? Megírtam
          ezt az üzenetet, és megnyomom a Küldés gombot.
      4:
        text: A postai szolgáltatásokkal szemben az első dolog ami történik, hogy
          az internet az üzenetet kisebb részekre osztja szét, hogy azokat egyszerűbb
          legyen elküldeni. Ezeket a kis részeket nevezik csomagokban. A csomagokat
          egyesével küldi el a címzettnek. A csomagokat ezután a megfelelő sorrendbe
          rendezi, hogy a fogadó fél számára megfelelően olvashatóan jelenjen meg.
          Természetesen rengeteg mindent kell még megismerni az internet működésével
          kapcsolatban, de ez egy remek kezdés. Kezdesz hozzáértő internet-felhasználó
          lenni! Ne felejtsd el megosztani a családoddal és barátaiddal, amit tanultál!
      5:
        text: A nevem Amanda Camp, és szoftvermérnökként dolgozom a Google-nél. Egy
          olyan csapat tagja vagyok, akiknek a feladata egy profilokat és névjegyeket
          tároló háttérszerver kezelése. A munkám során sokat gondolkodunk azon, hogyan
          lehet a névjegyeket más eszközökre, például a telefonodra küldeni. A legtöbb
          embernek sok névjegye van, akár 1000 is, és nem szeretnénk az összeset egyszerre
          elküldeni a telefonodra, mert az túl nagy üzenet lenne. Hasonlóan ahhoz,
          ahogyan az internet is a nagyméretű üzeneteket csomagokra bontja, mi is
          használjuk a lapozásnak nevezett fogalmat, amely szerint egyszerre csak
          100 kontaktot küldünk a telefonodnak, és hagyjuk, hogy a telefonod válaszoljon
          nekünk, és kérje a következő 100-at.
      6:
        text: A legizgalmasabb dolog a szoftverekben az, hogy az egész világra hatással
          lehetnek. Tizenkilenc éves koromban tanultam meg először programozni. Azt
          hiszem, már másod- vagy harmadéves voltam a főiskolán. Az első program,
          amire emlékszem, hogy írtam valamit, ami Celsiust Fahrenheitre konvertálta.
          Azért szeretek programozni, mert szeretek segíteni az embereknek. A Google-nál
          olyan programokat írhatok, amelyek a világ minden táján segítik az embereket,
          és ez igazán észbontóan izgalmas.
    C3_maze_conditionals:
      1:
        text: Az emberek minden nap döntenek. Például mielőtt kimegyünk a házból,
          van egy if utasítás, amely szerint,  ha esik az eső, akkor elő kell vennem
          a kabátomat. A számítógépek lenyűgözőek, ha egyszer ilyen típusú utasításokról
          döntünk, akkor ezeket a dolgokat megbízhatóan és hihetetlen sebességgel
          képesek végrehajtani. Egy számítógépes program valójában egy kis matematika
          és néhány ha utasítás a döntés helyén.
      2:
        text: Az if blokk segít a zombinak a döntés meghozni. Ellenőriz valamit. Például
          használjuk azt a blokkot, amely azt mondja, hogy ha van út balra, és akkor
          tegyünk bele egy balra fordulás parancsot. Azt mondjuk a zombinak, hogy
          ellenőrizze a környezetét, nézze meg, hogy van-e balra egy út, és ha igen,
          forduljon balra.
      3:
        text: Ezután a mozgás előre blokkot használjuk ezen az ismétlésen belül, így
          tovább fog haladni előre, amíg csak egyenesen akar menni. Aztán amikor van
          egy kanyar, az if blokk azt mondja neki, hogy forduljon balra. Láthatjuk,
          ha ekként teszünk, ha balra fordulunk, és egyébként előre mozgunk, akkor
          elérjük a célunkat.
      4:
        text: Egy egy példa az if (ha) utasítás használatára, amely egy alapvető fogalom
          a számítógépes programozásban. Az egyik első dolog, amit megtanultam leprogramozni,
          a tic-tac-toe. Voltak benne if utasítások, amelyek azt mondták, hogy oké,
          ha a másik személy nyerni fog, akkor akadályozd meg. Jó szórakozást az if
          utasítások megismeréséhez, amely tényleg kulcsfontosságú.
    C3_maze_level_4:
      1:
        text: Ebben a példában a cél, hogy a zombi eljusson a napraforgóhoz. Használhatjuk
          ötször a lépj előre blokkot, vagy mondhatjuk azt a számítógépnek, hogy ismételje
          ötször az előrelépést az ismételd blokk használatával.
      2:
        text: Ezzel időt takarítunk meg és egyszerűbb is lesz a dolgunk. A használatához
          tedd a lépj előre blokkot az ismételd blokk belsejébe. Kattints a Futtatás
          gombra, és a zombi ötször előre lép a fincsi napraforgóhoz.
    C3_playlab_create_game:
      1:
        text: Eddig egy animációt vagy történetet készítettél, ami pontosan ugyanazt
          csinálja mindig, amikor futtatod. Most egy interaktív játékot csinálhatsz,
          amivel valóban játszani lehet.
      2:
        text: Itt van a "ha nyíl" blokk és a "mozgasd a szereplőt" blokk. Ezeket a
          blokkokat összeillesztheted, hogy a szereplőket a nyilakkal mozgatni tudd.
    C3_songwriting_with_parameters:
      1:
        text: Ez a lecke a dalszerzésről szól. A zene sokban hasonlít egy számítógépes
          programhoz. A leírt hangjegyek és szavak pontosan megmondják az énekesnek,
          hogy mit kell tennie. A zene egyes részeit újra és újra felhasználjuk.
      2:
        text: Ezt refrénnek nevezzük. Egy számítógépes programban a program azon részeit,
          amelyeket újra és újra használnak, függvényeknek nevezzük. Amikor elolvasod
          a dalszövegeket, és ott a refrén szó szerepel, akkor a refrént énekled?
          Nem, megnézed a lap tetején, hogy milyen szavakból áll a refrén.
      3:
        text: Ebben a leckében egy buta kis dalt fogunk megtanulni, amelynek a címe
          "Little bunny foo foo". A dalnak van egy refrénje, amelyet többször is el
          fogunk énekelni. A függvény egy olyan kódrészlet, amelyet újra és újra meghívhatsz
          és használhatsz. Könnyebbé és hatékonyabbá teszi a programozást, így nem
          kell újra és újra leírni a függvény lépéseit. Csak egyszer kell megírni!
    C4_bee_conditional:
      1:
        text: Ez egy feltételes blokk. Azt mondja, ha egy virágnál vagy méhsejtnél
          vagy, akkor csinálj valamit. Ez akkor hasznos, ha nem tudjuk, hogy mennyi
          mézet vagy nektárt kell gyűjtenünk, mint például itt, és ezt kérdőjel jelzi.
      2:
        text: Ebben a példában azt mondjuk, hogy ha egy virágnál vagyunk, akkor gyűjtsük
          be az összes nektárt, aztán egy másikkal pedig azt, hogy ha egy méhsejtnél
          vagyunk, akkor készítsünk mézet. Kész is!
    C4_conditionals:
      1:
        text: Van egy új blokkunk, amit ha/különben blokknak hívunk. Ez egy feltételes
          utasítás, ugyanúgy, mint az if blokk, amit már korábbi feladványainkban
          használtunk. Azonban most van egy új tagja, ez a különben rész az alján.
          A ha/különben blokk lehetővé teszi, hogy a méh döntsön két művelet között.
          Ha a méh virágnál van, akkor azokat az utasításokat fogja elvégezni, amelyeket
          az első részbe teszel. Ha a méh nincs virágnál éppen, akkor azokat fogja
          végrehajtani, amiket a különbenhez tartozó részhez teszel.
      2:
        text: Az if elágazások teszik lehetővé, hogy a számítógépek döntéseket hozzanak.
          Az emberek feltételeket alkotnak meg a számítógép számára, amelyek megmondják,
          hogy ha számítógép egy bizonyos szituációval találkozik, akkor tegye ezt.
          Különben pedig tegye azt. A ha/különben blokkunk tetején az áll, ha virágnál.
          De persze más is lehet a blokkunk tetején, például ha nektár egyenlő 2,
          vagy van előtted út, és a blokkunk ugyanúgy fog működni. Vagyis ha a blokk
          tetején lévő feltétel igaz, akkor az első részben lévő parancsokat hajtja
          végre. Azonban ha a tetején lévő feltétel hamis, akkor a második részben
          lévő utasításokat hajtja végre.
    C4_for_loops:
      1:
        text: Amikor egy ismételd blokkot használsz a kódod ciklusba szervezésére,
          honnan tudja a számítógép, hogy mikor ismételte meg elégszer az utasításokat?
          Az ismételd blokk valójában egy kifinomultabb blokkot rejt magában, mégpedig
          a for ciklust, amely egy kezdő értéktől egy végső értékig számol megadott
          lépésközzel.
      2:
        text: Például az ismételd 3 alkalommal blokk 1-től 3-ig számol egyesével.
          Minden számolásnál végrehajtja a benne lévő utasításokat. A for ciklus egy
          számláló változó segítségével tudja, hogy mennyiszer futott le, amely az
          elején a kezdő értékre van beállítva, és a lépésköz a ciklus minden egyes
          futtatásakor hozzáadódik. Amint a változó értéke nagyobb lesz, mint a végső
          érték, a ciklus leáll.
      3:
        text: Az ismételd blokk helyett azért érdemes a valódi for ciklust használni,
          mivel láthatod a számláló (változó) értékét, és felhasználhatod a ciklusodban.
          Például ha több virágunk is van, az elsőben egy nektár, a másodikban két
          nektár, a harmadikban pedig három nektár van, akkor használhatom a for ciklust
          arra, hogy a méh "számláló" mennyiségű nektárt gyűjtsön össze minden alkalommal,
          vagyis egyet az első virágnál, kettőt a másodiknál, és hármat a harmadiknál.
      4:
        text: A számlálós (for) ciklusban a számláló értékét nemcsak eggyel, hanem
          más értékkel is növelheted. Léphetsz kettesével, négyesével, de akár folyamatosan
          változó értékkel is.
    C4_for_loops_bee:
      1:
        text: Amikor egy ismételd blokkot használsz a kódod ciklusba szervezésére,
          honnan tudja a számítógép, hogy mikor ismételte meg elégszer az utasításokat?
          Az ismételd blokk valójában egy kifinomultabb blokkot rejt magában, mégpedig
          a for ciklust, amely egy kezdő értéktől egy végső értékig számol megadott
          lépésközzel.
      2:
        text: Például az ismételd 3 alkalommal blokk 1-től 3-ig számol egyesével.
          Minden számolásnál végrehajtja a benne lévő utasításokat. A for ciklus egy
          számláló változó segítségével tudja, hogy mennyiszer futott le, amely az
          elején a kezdő értékre van beállítva, és a lépésköz a ciklus minden egyes
          futtatásakor hozzáadódik. Amint a változó értéke nagyobb lesz, mint a végső
          érték, a ciklus leáll.
      3:
        text: Az ismételd blokk helyett azért érdemes a valódi for ciklust használni,
          mivel láthatod a számláló (változó) értékét, és felhasználhatod a ciklusodban.
          Például ha több virágunk is van, az elsőben egy nektár, a másodikban két
          nektár, a harmadikban pedig három nektár van, akkor használhatom a for ciklust
          arra, hogy a méh "számláló" mennyiségű nektárt gyűjtsön össze minden alkalommal,
          vagyis egyet az első virágnál, kettőt a másodiknál, és hármat a harmadiknál.
      4:
        text: A számlálós (for) ciklusban a számláló értékét nemcsak eggyel, hanem
          más értékkel is növelheted. Léphetsz kettesével, négyesével, de akár folyamatosan
          változó értékkel is.
    C4_for_loops_no_bee:
      1:
        text: Amikor egy ismételd blokkot használsz a kódod ciklusba szervezésére,
          honnan tudja a számítógép, hogy mikor ismételte meg elégszer az utasításokat?
          Az ismételd blokk valójában egy kifinomultabb blokkot rejt magában, mégpedig
          a for ciklust, amely egy kezdő értéktől egy végső értékig számol megadott
          lépésközzel.
      2:
        text: Például az ismételd 3 alkalommal blokk 1-től 3-ig számol egyesével.
          Minden számolásnál végrehajtja a benne lévő utasításokat. A for ciklus egy
          számláló változó segítségével tudja, hogy mennyiszer futott le, amely az
          elején a kezdő értékre van beállítva, és a lépésköz a ciklus minden egyes
          futtatásakor hozzáadódik. Amint a változó értéke nagyobb lesz, mint a végső
          érték, a ciklus leáll. A for ciklus használatának előnye az ismételd blokkal
          szemben, hogy láthatod a számláló (változó) értékét a ciklusodban.
    C4_function_create:
      1:
        text: Most, hogy már módosítottál függvényblokkokat, itt az ideje, hogy teljesen
          nulláról te hozz létre egy függvényblokkot. Láthatod, hogy az eszköztáron
          lett egy függvények nevű kategória. Ha erre rákattintasz, láthatsz egy narancssárga
          gombot, amely a "Függvény létrehozása" nevet viseli. Erre kattintva megjelenik
          a függvényszerkesztő, amelyet már használtál a függvény blokk módosításakor.
      2:
        text: Ahogy korábban, a függvény elnevezésével kell kezdeni, vagyis annak
          a leírásával, hogy mit fog csinálni a függvényed. Például, hogy rajzoljon
          egy négyzetet vagy rajzoljon egy háromszöget, majd pedig bele kell húznod
          a blokkokat az eszközkészletből a munkaterületre. Ne felejtsd el, hogy ezeket
          a függvényt alkotó zöld blokkon belülre kell húznod.
      3:
        text: Miután végeztél, kattints a mentésre, majd lépj ki. Ezzel visszatérsz
          a fő munkaterületre. Az újonnan létrehozott függvény a függvény kategóriában
          egy zöld blokként fog megjelenni. Húzd ezt a blokkot a munkaterületre, és
          használd ezt a feladvány megoldására ugyanúgy, mint bármely más blokkot.
    C4_function_edit:
      1:
        text: Az egyik nagyszerű dolog a számítógépes programozásban, hogy miután
          megtanítottad a számítógépet, hogyan kell egy dolgot megcsinálni, meg tudod
          hívni ugyanazt a függvényt újra. Adsz neki egy nevet, majd meghívod. Ez
          valójában a nyelv kibővítése.
      2:
        text: Az általunk készített programban megtanultuk, hogyan kell négyzetet
          rajzolni négyszeri előrelépéssel és fordulással. Vegyük ezt a függvényt,
          és adjuk neki a "rajzoljon egy négyzetet" nevet. Szóval akármikor négyzetet
          szeretnénk rajzolni, csak annyit mondunk, hogy "rajzoljon egy négyzetet",
          ekkor meghívja a függvényt, az abban lévő kódot. Megcsinálja nekünk a rajzolást.
          Hozzáadtuk ezt a fogalmat a programozási nyelvünkhöz.
      3:
        text: Ebben a feladványban már létrehoztunk számodra egy rajzoljon egy négyzetet
          függvényt. Az eszközkészletben zöld blokként jelenik meg. A dolgod az lesz,
          hogy írd meg ugyanazt a kódot, amit korábban a négyzet megrajzolására írtál,
          és helyezd el ebben a függvényben. Ehhez kattints a szerkeszt gombra a zöld
          rajzoljon egy négyzetet blokkon. Ekkor megnyílik a függvényszerkesztő. A
          függvényszerkesztőnek három része van. Egy hely, ahol elnevezheted a függvényedet.
          Ez fog megjelenni a zöld blokkon a függvény utasításai előtt. Ezután írhatsz
          egy rövid leírást, hogy mit kell tegyen a függvényed.
      4:
        text: Ebben az esetben egy négyzetet kell rajzoljon. Az alatta lévő fehér
          terület ugyanúgy működik, mint a korábbi munkaterület. Az eszközkészletből
          idehúzhatod a blokkokat. A négyzetet rajzoló blokkokat a zöld függvényblokkon
          belülre kell elhelyezned. Miután végeztél, kattints a mentés gombra, majd
          lépj ki. Ezzel visszatérsz a fő feladvány munkaterületére. Most már a többi
          blokkhoz hasonlóan használhatod is a négyzet megrajzolására szolgáló függvényblokkot
          a feladvány megoldásához.
    C4_function_parameters:
      1:
        text: Ez egy olyan függvény, amely 50 képpont oldalhosszúságú négyzetet rajzol.
          Ez jól jön akkor, amikor 50 képpont oldalhosszúságú négyzetet akarunk rajzolni,
          de mi van a 100 képpont méretű négyzettel? Nem kellene két olyan függvényt
          létrehoznunk, amik majdnem ugyanazt csinálják. Ehelyett a függvényt paraméterrel
          használjuk.
      2:
        text: A paraméterek lehetővé teszik, hogy értékeket adjunk át a függvénynek,
          amelyek a függvényen belül változók lesznek. Adjunk egy paramétert ehhez
          a függvényhez, amellyel különböző méretű négyzeteket tudunk rajzolni. A
          függvényszerkesztőben ugyanúgy szerkesztheted a nevet és a leírást, mint
          korábban, de most már paraméter hozzáadására is lehetőséged van. Írd a paraméter
          nevét a rendelkezésre álló fehér területre, majd kattints a Paraméter hozzáadása
          gombra. Ez létrehoz egy piros blokkot azzal a névvel, amit paraméterként
          az előbb megadtál. Most már kicserélhetjük a lépj előre 100 lépést blokkot
          a Length (hossz) paraméterrel, így Length (hossz) lépést fog előre lépni.
      3:
        text: Kattints a mentésre, majd lép ki. Ezután húzd az újonnan alkotott függvényedet
          a munkaterületre az eszközkészletből. Észreveheted, hogy van egy üres hely
          a hossz mellett, mivel a függvény tudni szeretné, hogy mi legyen a Length
          (hossz) paraméter értéke. Húzz egy szám blokkot a Matematika (Math) kategóriából
          az üres helyre. Nézd meg, hogyan használhatod a függvényt újra és újra különböző
          hosszúságokkal, hogy különböző méretű négyzeteket rajzolj. Próbáld ki magad!
    C4_intro:
      1:
        text: A programozás általában szövegben íródik, de mi a Blockly-t fogjuk használni.
          A Blockly vizuális blokkokat használ, és programot írni a húzd és dobd funkcióval
          lehet. Ha részletesebben megvizsgáljuk, akkor azt látjuk, hogy valójában
          kódolsz. Először egy olyan program kódját fogjuk megalkotni, amely segít
          az Angry Birdnek átjutni egy labirintuson, eljutni a gonosz disznókhoz,
          akik ellopták a tojásait.
      2:
        text: A Blockly három fő részből áll. Balra van a madár labirintusa, ahol
          a programod fog futni. Az egyes szintekhez tartozó utasítások a labirintus
          alatt találhatók. Ez a középső terület az eszköztár, és minden egyes blokk
          egy-egy parancs, ezeket a madár érti. A jobb oldali fehér területet munkaterületnek
          nevezzük, és itt fogjuk felépíteni a programunkat.
      3:
        text: Mi történik, ha a mozgás blokkot a munkaterületünkre húzom, és megnyomom
          a Futtatás gombot? A madár előre lép egy mezőt a rácson. És mi van, ha azt
          akarom, hogy a madár csináljon valamit, miután egy mezővel előrébb lépett?
          Hozzáadhatok egy másik blokkot a programunkhoz.
      4:
        text: Most a "fordulj jobbra" blokkot fogom használni, és addig húzom, amíg
          meg nem jelenik a sárga nyíl. Ekkor elengedem, és a két blokk összekapcsolódik.
          Amikor újra megnyomom a "Futtatás" gombot, a madár felülről lefelé haladva
          végrehajtja a munkaterületen egymás után pakolt parancsokat.
      5:
        text: Ha törölni szeretnél egy blokkot, csak ki kell venni a többi közül,
          és be kell dobni a kukába. A program futtatása közben, bármikor megnyomhatod
          a visszaállítás gombot, és a madár visszatér a kezdetekhez. Most pedig kapjuk
          el azokat a disznókat!
    C4_math_artist:
      1:
        text: Ha egy olyan téglalapot szeretnénk rajzolni, amely 50 képpont magas
          és kétszer olyan széles, mint amilyen magas, akkor ezt hogyan programozhatjuk
          le a számítógép számára? Hát, mondhatom a művésznek, hogy menjen fel 50-et,
          majd forduljon jobbra, majd menjen előre 100-at, és ezt kétszer tegye meg.
          De ekkor én végzem el a számítást a számítógép helyett.
      2:
        text: Az ötvenet fejben kettővel összeszorozni nem tűnik nehéznek, de a számítógépek
          nagyon jók a számolásban, így érdemes rájuk bízni, amikor csak lehetséges.
          Ha az 50 helyett inkább egy "height" (magasság) nevű változót használok,
          akkor egyszerűen módosíthatom az algoritmust úgy, hogy menjen fel magasságnyit,
          forduljon jobbra, majd menjen 2-szer magasságnyit, amely egy olyan téglalapot
          eredményez, ami kétszer olyan széles, mint amilyen magas.
    C4_unplugged_algorithms:
      1:
        text: Ez a lecke a Tangram-algoritmusokról szól. A tangram egy hét darabból
          álló képkirakó, amelyből más alakzatokat lehet összerakni. Egy algoritmus
          segítségével elmagyarázod a társadnak, hogyan kell összerakni a kirakót.
      2:
        text: Az algoritmus nem más, mint egy lista, amelyen felsoroljuk a feladat
          elvégzéséhez szükséges lépéseket. Listákat minden nap használunk, például
          bevásárlólisták és receptek esetén. Egy egyszerű algoritmust sokféleképpen
          lehet értelmezni, és bárki is hajtja azt végre, nem biztos, hogy pontosan
          az lesz a végeredmény, amit te akartál. Ha azt szeretnéd, hogy mindenki
          pontosan ugyanazt kapja a végén, akkor az algoritmus legyen részletes és
          nagyon konkrét.
      3:
        text: Ma egy algoritmust használok egy festmény befejezéséhez. Farkasokat
          akartam festeni, de nem vagyok a legtehetségesebb festő. Szerencsére a hozzám
          hasonló emberek festhetnek számok segítségével. Negyven szín van, és a kis
          betűk és a számok megmondják, hogy az egyes részeket milyen színnel kell
          megfesteni. A "Festés számokkal" pontosan megmondja nekem, hogy milyen színt
          használjak és hol.
      4:
        text: Nagyon konkrét, így követni tudom az utasításokat, és a festmény fantasztikus
          lesz. Ez egy nagyszerű algoritmus. Ha az utasítás nem lenne ennyire konkrét,
          a farkasaim nem néznének ki ilyen jól. Ha tényleg azt akarod, hogy valami
          pontosan a terveidnek megfelelően sikerüljön, akkor legyél rendkívül konkrét.
    C4_unplugged_binary:
      1:
        text: Minden csapatban az utasítást adó személynek, aki a papírt tartja a
          kezében, ki kell találnia, hogy mi lesz a KI szimbóluma és mi lesz a BE
          szimbóluma. Binárisan ez olyan, mint egy ábécé két betűvel. Mintha az A
          és a B lenne a teljes ábécé, de nekünk egy 0 és egy 1 számunk van.
      2:
        text: A bináris használatának leggyakoribb módja az if utasítás. Ez egy klasszikus
          dolog a programozásban. A program fut, és azt mondja, hogy ha valami igaz,
          akkor csináld ezt. Vagy ha nem igaz, és akkor csinálj valami mást. Mi van
          akkor, ha valami kicsit bonyolultabbat akarsz csinálni. Az if utasítás helyett
          például egy képpel vagy egy hanggal akarsz dolgozni a számítógépben.
      3:
        text: 'A számítógép csak a bináritást ismeri, de egy kép nem bináris, nem
          egyesekből és nullákból áll, tehát hogyan csináljuk ezt? Íme egy példa:
          Van ez a gyönyörű kép. A kép alapvetően egyfajta információ. Minden információ
          kódolható binárisan, így vagy úgy, csak ki kell találni, hogyan.'
      4:
        text: Képzeld el, hogy egy rácsot teszünk erre a pandamacira, és minden egyes
          négyzetnél el kell döntenünk, hogy az a négyzet inkább fekete vagy inkább
          fehér legyen. Majd aztán így fogjuk kiszínezni. A cellák vagy feketék vagy
          fehérek, a fekete négyzetekre azt mondjuk, hogy azok nullák (bináris számjegy),
          a fehér négyzetek pedig egyesek, a másik bináris számjegy. A végén csak
          egy csomó egyes és nulla marad. Így ábrázoljuk ezt a képet binárisan.
    C4_unplugged_forloops:
      1:
        text: Ennek a leckének a neve "Játék a hurkokkal". Ebben a leckében egy kockajátékot
          fogunk játszani, amihez egy számegyenest fogunk használni. Minden játékos
          háromszor fog dobni, ezzel hozzárendelnek egy kezdőértéket, egy megállító
          értéket és az intervallumunkat. Minden forduló során bekarikázzuk a kezdőértékünket,
          és minden olyan értéket, amellyel ugyanannyi lépést teszünk előre, mint
          az intervallumértékünk. Akkor hagyjuk abba a bekarikázást, amikor elértük
          a megállító értékünket. Az nyer, aki a legmagasabb pontszámot érte el!
      2:
        text: A for hurkok nagyon sok helyen és nagyon jól használhatóak, és ha meteorológus
          leszel, for hurkokat fogsz állandóan használni. Szia, Becky vagyok. Az EverPower
          Renewables-nél dolgozom szélmeteorológusként. A Columbia River Gorge területén
          prognosztizálom a szélsebességet, ahol a vállalatnak szélerőművei vannak.
      3:
        text: Próbáljuk megérteni, hogy mekkora lesz a szél ott, hogy megtudjuk, mennyi
          energiát fogunk termelni. Ezt az információt átadjuk a valós idejű energiakereskedőknek.
          Ők annak megfelelően adnak és vesznek energiát, hogy milyen energiaértéket
          közlünk velük, hiszen biztosítani kell az elektromos hálózat egyensúlyát,
          hogy a villanyok égjenek, és hogy maximalizálni tudjuk a farmjaink által
          termelt energia mennyiségét.
      4:
        text: Az EverPower Renewables nemzeti irányítóközpontjában vagyunk Portlandben,
          ahova az ország összes farmjáról érkeznek információk. Még a legnagyobb
          teljesítményű számítógépek sem képesek mindenhol szimulálni a légkör változását.
          A számítógépes előrejelző modellekben van egy úgynevezett rács. Minden rácspontnak
          van egy szélességi és egy hosszúsági foka. Ki kell számolnunk a fizikai
          jellemzőket, és ki kell számítanunk a szélsebességet, a hőmérsékletet, a
          nyomást és további más tulajdonságokat.
      5:
        text: Mivel ezek meglehetősen nagy rácsok, és nagyon sok pont van, millió
          és millió hurkolást végzünk ezeken a pontokon. Mindenhez, amit csinálok,
          for hurkokat használok. Itt van például egy for hurok. A szél előrejelzésénél
          annyi különböző paramétert kell figyelembe venni, hogy egy ember képtelen
          lenne leülni és elvégezni ezeket a számításokat. Annyi különböző szempont
          van, ami befolyásolja a széljárást, hogy az előrejelzéshez számítógépes
          modellre van szükségünk.
    C4_unplugged_madlibs:
      1:
        text: Ebben a leckében néhány kitöltendő történettel fogunk játszani. Van
          egy kitöltendő sablon, amellyel egymáshoz nagyon hasonló történeteket lehet
          alkotni, és amelyek mégis nagyon szórakoztató módon különböznek egymástól.
      2:
        text: Ebben a leckében azt is megtanultuk, hogyan lehet egy absztrakt sablont
          készíteni két már kész történetből. Az absztrakció az eltérések és a részletek
          eltávolításának a művészete, ezáltal megtudjuk, hogyan alkalmazható egy
          megoldás több különböző problémára. Az informatikában nagyon hasznos dolog
          az absztrakció, mert ezáltal olyan függvényeket tudunk létrehozni, amelyek
          több különböző helyzetben is hasznosnak bizonyulhatnak.
    C4_unplugged_parameters:
      1:
        text: 'Ez a leckének a címe: Dalszerzés paraméterekkel. Itt néhány dalt fogunk
          írni. A refrén minden egyes alkalommal egy kicsit más. Emlékeztek még az
          Old MacDonald Had a Farm dalra? A refrén minden állat esetében egy kicsit
          más. "És azon a farmon volt egy tehene, múú." A refrének apró változásait
          meg tudjuk mutatni egy olyan dologgal, amit paraméternek nevezünk.'
      2:
        text: A függvényeknek időnként szükségük van paraméterre. A paraméter egy
          olyan extra információ, amelyet átadsz egy függvénynek, ha azt akarod, hogy
          egy speciális igényt vegyen figyelembe. Amikor fagylaltkelyhet készítesz
          a barátaiddal, a számítógépes program paramétereihez hasonló műveletet végzel.
      3:
        text: A vaníliafagylalt lehet ugyanaz minden fagylaltkehelynél, de ha megkérdezed
          a barátaidat, hogy milyen öntetet kérnek, rengeteg különböző kombinációt
          kaphatsz. Az öntet a függvény, de minden egyes öntettípus egy-egy paraméter.
          A függvények és a paraméterek együttesen nagyszerű számítógépes programokat
          és nagyszerű fagylaltkelyheket eredményeznek.
    C4_unplugged_variables:
      1:
        text: 'Ennek a leckének a címe: Változók borítékban. Megtanuljuk, hogyan lehet
          mondatokat építeni akkor, amikor  hiányoznak információk. Legtöbben már
          ismeritek az üres hely kitöltésének a fogalmát. Ez történik például akkor,
          amikor a nevünket ráírjuk a házi feladatunkra. Néha, amikor egynél több
          szót kell kitölteni, az üres helyet felcímkézzük, hogy tudjuk, melyik információ
          hova tartozik.'
      2:
        text: A változók olyan információdarabok helyőrzői, amelyek változhatnak.
          Ha egy változót használunk a hiányzó információ helyén, akkor folytathatjuk
          a munkát, amit éppen csináltunk, és hagyhatjuk, hogy valaki más később pótolja
          a hiányzó információt. A szoftverekben sokszor használunk változókat. Változókat
          használunk egy név, egy e-mail-cím és még egy felhasználónév helyőrzőjeként
          is. Így tudatjuk a programmal, hogy hol fognak megjelenni ezek az adatok,
          miután a felhasználó kitöltötte őket. Munkánk során folyamatosan használunk
          változókat.
      3:
        text: Változót használunk akkor, amikor egy információt később akarunk felhasználni.
          Tegyük fel, hogy meg kell számolnunk, egy felhasználó hányszor tweetelt.
          Minden alkalommal, amikor a felhasználó tweetel, hozzáadunk egyet ehhez
          a számhoz, és minden alkalommal, amikor a felhasználó töröl egy tweetet,
          eggyel csökkentjük ezt a számot. Bármikor, amikor tudni akarjuk, hányszor
          tweetelt az adott felhasználó, csak megnézzük ezt a változót.
    C4_variables_artist:
      1:
        text: A változó egy olyan tároló, amelyben egy értéket tudunk megőrizni. Amikor
          egy algoritmusban használod ezt a változót, az kinyitja a tárolót, és megnézi,
          hogy milyen érték található benne. Ezzel okosabb algoritmusokat írhatsz,
          amelyek a változóban tárolt értéktől függően másképpen viselkednek.
      2:
        text: Például, ha azt az algoritmust szeretném megírni, hogy "Boldog születésnapot,
          10 éves lettél!" a testvéremnek, akkor ez jól működhet, de következő évben
          már azt akarom mondani, hogy "Boldog születésnapot, 11 éves lettél!". Használhatok
          egy "kor" (age) nevű változót a testvérem életkorának tárolására, és az
          algoritmusom lehet az az előző helyett, hogy "Boldog születésnapot, "kor"
          éves lettél!". Mivel a változók változhatnak, ezért a "kor" változó értékét
          frissítenem kell "kor" plusz 1 értékre.
      3:
        text: Ebben a feladványban egy olyan változót fogunk használni, amely megadja
          a művész által rajzolt vonal hosszát. Később a kódunkban a "lépj előre"
          blokk megnézi, hogy milyen érték van beállítva a "length" (hossz) változóban.
    C4_variables_playlab:
      1:
        text: A változó egy olyan tároló, amelyben egy értéket tudunk megőrizni. Amikor
          egy algoritmusban használod ezt a változót, az kinyitja a tárolót, és megnézi,
          hogy milyen érték található benne. Ezzel okosabb algoritmusokat írhatsz,
          amelyek a változóban tárolt értéktől függően másképpen viselkednek.
      2:
        text: A játéklaborban fogsz most próbálkozni, és különböző játékokban kell
          a változók, úgy mint sebesség, magasság, pontszám, értékét módosítanod,
          és ezáltal a játék is változni fog. Nem kell a játék algoritmusát módosítanod,
          csak a változó értékét.
      3:
        text: A Kindle és a könyv X-ray számára végzett munkám során számos különböző
          módon használjuk a változókat. Például egy változóban el lehet menteni a
          könyv oldalainak a számát. A felhasználó növelheti vagy csökkentheti az
          oldalon található betűk méretét. A betűméret módosításával pedig módosulhat
          a könyv oldalainak száma. Ezt a könyv oldalszámának változóban tárolásával
          tudjuk beállítani.
    infinity_playlab_events:
      1:
        text: 'Most olyasmivel fogunk megismerkedni, amit a játékprogramozók mindennap
          használnak. Ezeket eseményeknek hívják. Egy esemény azt mondja a programodnak,
          hogy figyeljen arra, hogy mi történik. És amikor ez megtörténik, akkor végrehajt
          egy műveletet. Néhány példa az eseményekre: figyelés egérkattintásra, nyílgombra
          vagy a képernyő megérintésére.'
      2:
        text: Itt azt akarjuk, hogy Baymax mozogjon felfelé és érintse meg Hirót,
          vagy mozogjon lefelé és érintse meg Rapunzelt, amikor a játékos a fel/le
          nyílbillentyűket vagy a fel/le gombokat használja. Az "amikor felfelé nyíl"
          blokkot fogjuk használni, és hozzácsatoljuk a "szereplő felfelé mozog" blokkot,
          így amikor a játékos megnyomja a felfelé nyíl billentyűt, minden, ami az
          "amikor felfelé nyíl" blokkhoz van csatolva, működni kezd. Ugyanezt tesszük
          akkor is, amikor azt akarjuk, hogy Baymax lefelé mozogjon. Így lépésről
          lépésre a játékod egyre interaktívabbá válik.
    infinity_playlab_intro:
      1:
        text: Szóval, melyik osztályba jársz? Másodikba. Tizedikbe. Elsőbe. Nyolcadikos
          voltam, amikor megtanultam programozni. Hatodikos koromban kaptam az első
          számítógépet. Azt szeretem, hogy meg tudom oldani az emberek problémáit.
          Kifejezheted magad, és egy ötletből felépíthetsz dolgokat.
      2:
        text: A számítástechnika az alapja mindannak, amivel az egyetemisták és a
          szakemberek a következő húsz-harminc évben foglalkoznak. Azért szeretek
          programozni, mert szeretek segíteni az embereknek. Építhetek olyasmit, ami
          megkönnyíti az emberek életét. Szerintem ez áll a legközelebb a szuperhatalomhoz.
          Az indulás a legfontosabb rész. Én magam is kezdő vagyok, de szeretném,
          ha együtt tanulnánk.
      3:
        text: John Vechey vagyok, a PopCap Games egyik társalapítója. Olyan játékokat
          készítünk, mint a Plants kontra Zombies, a Bejeweled és a Peggle. A játékok
          lényege nem a tökéletes kódban vagy a tökéletes művészetben rejlik, hanem
          abban, hogy milyen érzést generál és mennyire szórakoztató a játék. Ezt
          csak akkor érted meg, ha kipróbálod, ha csinálod, ha tanulsz, ha alkalmazkodsz
          és ha újra és újra használod a játékkészítési tudásod.
      4:
        text: Van kedvenc videójátékod? A PlayLabban megtesszük az első lépést, hogy
          ilyen játékokat tudjatok készíteni. A jó játékoknak van egy történetük,
          és minden történetben vannak szereplők. Szereplők, akik különböző dolgokat
          csinálnak, például beszélnek, mozognak és kapcsolatba lépnek egymással.
          Talán még pontokat is szereznek a játék szabályai szerint. Ma megtanuljuk,
          hogyan lehet mindezeket a dolgokat egyenként, szórakoztató Disney szereplőkkel
          létrehozni, ezek közé tartozik Anna, Elsa, Hiro, Baymax és Rapunzel. Majd
          a nulláról kiindulva egy olyan játékot készítünk, amelyet telefonon lehet
          játszani, és meg tudtok osztani másokkal.
      5:
        text: A képernyő három fő részből áll. Balra van a játéktér, ahol a programod
          fog futni. Az egyes szintekhez tartozó utasítások lent találhatók. Ez a
          középső terület az eszköztár, és minden egyes blokk egy kódrészlet. A jobb
          oldali fehér területet munkaterületnek nevezzük, és itt fogjuk felépíteni
          a programunkat.
      6:
        text: Először a blokkokat hozzá kell kapcsolnunk a narancssárga "amikor fut"
          blokkhoz. Több blokkot is össze lehet kapcsolni egymással. Húzd őket addig,
          amíg a sárga kontúr meg nem jelenik, akkor össze fognak pattanni. Ebben
          az első feladványban Hiro az 1-es szereplő, Baymax pedig a 2-es szereplő.
          Azt akarjuk, hogy Hirót Baymaxhoz menjen. Ehhez húzzuk ki a "jobbra mozgás"
          blokkot, és kössük össze az "amikor fut" blokkal. Ha a blokkok a helyükre
          kerültek, nyomd meg a "Futtatás" gombot, és nézd meg, hogy mit programoztál.
      7:
        text: Kezdd el, és mire a végére érsz már el tudod készíten a saját játékod,
          különféle szereplőkkel, akik kapcsolatba  tudnak léni egymással, pontokat
          szerezhetnek, mikrobotokat, cseresznyét, serpenyőket, szikrát és jeget...
          dobálhatnak és akár el is tüntethetik egymást. Minden csak rajtad múlik!
    infinity_playlab_repeat_forever:
      1:
        text: El tudod képzelni, hogy valamit állandóan ismételgetned kell? Remélhetőleg
          soha nem kell, mert a számítógépek nagyon jók az ismételgetésekben. Ez az
          ismétlés örökké blokk. Bármi, ami ebben a blokkban van, mindig meg fog történni
          a játékban.
      2:
        text: Tehát, ha azt szeretnénk, hogy egy szereplő ismétlődően csináljon valamit
          anélkül, hogy a játékos bármit is tenne, akkor ezeket a blokkokat az ismétlés
          örökké blokkba tesszük. A következő feladványban az a célunk, hogy Anna
          folyamatosan sétáljon le és fel. Ha megtanulod az ismétlő parancsok működését,
          azzal rengeteg időt takaríthatsz meg később, amikor a saját játékodat építed.
    tutorial_puzzle_challenge:
      1:
        text: Olívia, mi szeretnél lenni, ha nagy leszel? Űrhajós. Tudod egyébként,
          hogy mit csinál egy számítógépes programozó? Igen... nem. Várj, mit? Nem
          igazán tudom, hogy magyarázzam el, a számítógépes programozás elég egyszerű.
          Egy sor utasítás, mint egy recept, amit lépésről lépésre kell követned,
          hogy megkapd a kívánt végeredményt.
      2:
        text: A pixelek számát, a vonal hosszát, ezzel a legördülő menüponttal tudom
          megváltoztatni. Milyen hosszú is volt? A futtatás gomb alatt megint láthatod
          az utasításokat. Itt az előre mozgás blokkot használtam, és 100-as mixelt
          fogok választani. Egy blokkot törölni lehet, ha az eszköztárba vagy a kukába
          húzom. Tegyük vissza a helyére.
      3:
        text: Futtasd a kódot a Futtatás gomb megnyomásával. Nos, ez nem működött!
          Megnyomom a Visszaállítás gombot, és megnézem, mi a baj. Egy feladvánnyal
          annyiszor próbálkozhatsz, ahányszor csak akarsz, vagy kihagyhatod őket,
          és később visszatérhetsz hozzájuk. Csak ügyelj arra, hogy mindent megpróbálsz,
          és nem adod fel. Tegyünk még egy lépést előre. Még mindig nem sikerült.
          Lehet egy blokkot több más blokk közé helyezni.
      4:
        text: Vegyünk egy fordulás blokkot, és helyezzük az előre mozgások közé. Fordulj
          balra 45 fokot. Futtassuk le újra. Visszaálltás, futtatás, király! Itt egy
          másik feladvány. Néha kapunk egy kitöltendő indítókódot. Itt a megfelelő
          hosszúságokat és fokokat kell hozzáadni.
      5:
        text: Előfordulhat, hogy néha véletlenül kidobod a indítókódot. Mit kell tenni
          ilyenkor? Megnyomhatod a feladvány törlése gombot, és kezdheted elölről
          az egészet. Ezt a számblokkot különböző pixelterületekre húzom. Válaszd
          a 100 pixelt, a 45 fokot, és ismét a 100 pixelt. Klassz! Itt van a Code
          Studio méhecskéje. El kell mozgatnom a méhecskét a virágokhoz, hogy nektárt
          tudjon gyűjteni.
      6:
        text: Az első virág három blokknyira van, így háromszor kell előre lépnem.
          1, 2, 3. Aztán be kell gyűjtenie a nektárt, majd be kell gyűjtenie a nektárt
          egy másik virágról. Hát ez nem működött! A nektárok közé teszek még egy
          előre mozgást, és újra lefuttatom. Hurrá, működik! Ezzel megtanultad, hogyan
          kell a Code Studio művészt és a méhecskés feladványokat használni. Sok szerencsét
          a Code Studio feladványok kihívásaihoz.
    unplug1:
      1:
        text: Olívia, mi szeretnél lenni, ha nagy leszel? Hmm, űrhajós! Tudod egyébként,
          hogy mit csinál egy számítógépes programozó? Igen... nem. Hmm, mit? Nem
          igazán tudom, hogy magyarázzam el. A számítógépes programozás elég egyszerű.
          Egy sor utasítás, mint egy recept. Lépésről lépésre kell követned őket,
          hogy megkapd a kívánt végeredményt.
      2:
        text: A számítástechnika egy eszköz, amivel hatással lehetünk a világra. Ezek
          lehetnek zenei videók, játékok, de ki lehet mutatni azt is, hogy valaki
          kapcsolatban áll-e valakivel vagy sem. Meg lehet találni az ismerőseid,
          mások barátait. Csinálhatsz mindenféle őrült dolgokat, amivel valójában
          életeket menthetsz. Azt hiszem, kell valami hajtóerő. Számomra ez olyan,
          mint egy ecset. Szerintem a jó programozás nem sokban különbözik a művészettől.
      3:
        text: Amikor végre megtanultam egy kicsit programozni, az üres falon egy csomó
          ajtó jelent meg. Kinyitod őket, és persze mögöttük egy másik terem van újabb
          ajtókkal. A programozás szórakoztató és könnyű. Mindent megtehetsz, amit
          csak akarsz. Végül, amikor már elég ajtó van nyitva, bejön a fény. Számomra
          egy kész program olyan, mint egy fényben úszó épület. Minden sarka meg van
          világítva. Annyi embert érinthetsz meg, annyi emberrel léphetsz kapcsolatba,
          és ez valami olyasmi, amit a világ még soha nem látott.
      4:
        text: Sorozatunk első leckéje arról szól, hogy mi a számítástechnika, mit
          csinál egy informatikus, és hogyan használhatod az informatikát felelősségteljesen.
          Ez nagyon fontos lecke, de egy kicsit sok a szöveg. A végén elkészítheted
          a saját, egyedi kódolásod a kezdőbetűid felhasználásával. Ez szórakoztató
          és nagyon inspiráló, mert a bináris kódolás ugyan nagyon technikai tevékenységnek
          tűnik, de ha egyszer megérted, olyan, mintha egy titkos nyelven tudnál beszélni.
    unplug2:
      1:
        text: Ez a lecke a számítógépes gondolkodásról szól, a lecke célja megtanítani,
          hogyan lehet egy nagyobb, nehéz problémát több egyszerűbb problémára lebontani.
          Egy olyan utasítássorozatot kell megírni, amelyet követve bárki le tudja
          rajzolni a leckében szereplő szörnyek egyikét.
      2:
        text: 'A tanulók csoportokat alkotnak, az utasításokat csoportban írják meg,
          majd azokat kicserélik egy másik csoporttal, akiknek le kell rajzolniuk
          a szörnyet. A csoportok a számítógépes gondolkodás négy lépését használva
          írják meg az utasításokat: lebontás, mintázat meghatározása, absztrakció
          és algoritmusok.'
      3:
        text: Először a csoportok lebontják a feladatot, ami azt jelenti, hogy játéktervet
          készítenek. Ezután mintákat keresnek a katalógusban szereplő a szörnyek
          között. Ha különbségekre bukkannak, elkülönítik vagy eltávolítják ezeket
          a részleteket. Például az egyik szörnynek a katalógusban olyan szeme van,
          mint egy Vegetának, egy másiknak pedig mint egy sprite-nak. De mindkettőnek
          van szeme, így írhatunk egy sort, ami azt mondja, hogy a szörnynek üres
          szeme van.
      4:
        text: A diákok tehát képesek lesznek egy algoritmusnak nevezett utasítássorozatot
          írni, amelyben felsorolják a szörnyek üres részeit, és azt, és hogy azok
          milyen fájtájúak lehetnek. Ezt az utasítássorozatot átadják a többi diáknak,
          és ők megpróbálják újrateremteni a saját szörnyüket.
    unplug3:
      1:
        text: A grafikus programozásban elmagyarázzuk a kódolás működését,  megmutatjuk,
          hogy pusztán nyilak és firkák segítségével hogyan lehet rajzokat újra elkészíteni.
          Mindenki kap egy kisebb rajzot egy milliméterpapíron, és csak bizonyos nyilakat
          használva kell nekik megcsinálni és leírni, hogy hogyan lehet újraalkotni
          a rajzot.
      2:
        text: 'Ebben a tevékenységben csak a következő szimbólumokat lehet használni:
          egy négyzetet előre, egy négyzetet hátra, egy négyzetet felfelé, egy négyzetet
          lefelé, váltás a következő színre, és a négyzet kitöltése színnel. Amikor
          a kódolással készen vagyunk, átadjuk valaki másnak, aki elolvassa a kódot,
          és megpróbálja újraalkotni a képet.'
    unplug4:
      1:
        text: A grafikus programozásban elmagyarázzuk a kódolás működését,  megmutatjuk,
          hogy pusztán nyilak és firkák segítségével hogyan lehet rajzokat újra elkészíteni.
          Mindenki kap egy kisebb rajzot egy milliméterpapíron, és csak bizonyos nyilakat
          használva kell nekik megcsinálni és leírni, hogy hogyan lehet újraalkotni
          a rajzot.
      2:
        text: A tevékenység második felében megkérdezzük a tanulóktól, hogy hányféleképpen
          tudnak összehajtani egy papírlapot úgy, hogy tizenhat egyforma téglalapot
          kapjanak végül. Ezután megbeszéljük, hogy többféle megoldás is vezethet
          ugyanahhoz az eredményhez, és hogy bizonyos helyzetekben miért jobb egyik
          megoldás a másiknál.
    unplug5:
      1:
        text: A grafikus programozásban elmagyarázzuk a kódolás működését,  megmutatjuk,
          hogy pusztán nyilak és firkák segítségével hogyan lehet rajzokat újra elkészíteni.
          Mindenki kap egy kisebb rajzot egy milliméterpapíron, és csak bizonyos nyilakat
          használva kell nekik megcsinálni és leírni, hogy hogyan lehet újraalkotni
          a rajzot.
      2:
        text: A tevékenység második felében megkérdezzük a tanulóktól, hogy hányféleképpen
          tudnak összehajtani egy papírlapot úgy, hogy tizenhat egyforma téglalapot
          kapjanak végül. Ezután megbeszéljük, hogy többféle megoldás is vezethet
          ugyanahhoz az eredményhez, és hogy bizonyos helyzetekben miért jobb egyik
          megoldás a másiknál.
    unplug6:
      1:
        text: Ezt a tevékenységet kártyákkal való kódolásnak nevezzük, és bármelyik
          korosztály számára nagyszerű program lehet. Ahogy a korábbi leckékben az
          if utasításokról megtanultad, a Blockly során az if utasításoknak van egy
          darabja, amit ki kell értékelned, hogy igaz-e vagy hamis. Ez a feltételes
          feltétel, és ezt sokféleképpen lehet használni.
      2:
        text: Ezt felhasználva olyan programokat készítünk papíron, amelyeket a véletlenszerűen
          kihúzott játékkártyák segítségével futtatunk le. Lehet egy if utasításunk,
          ami valami olyasmit mond, hogy ha a kihúzott kártya nagyobb, mint 8, akkor
          kapunk egy pontot. Ellenkező esetben az ellenfél kap egy pontot. A játékod
          lehet egyszerű vagy bonyolult, amilyennek szeretnéd.
    unplug7:
      1:
        text: Emlékszel, amikor megnézzük egy dalnak a szövegét, már a legelején meghatározzák
          a refrént, majd a dal további részében csak utalnak a refrénre? Ezt hívjuk
          függvénynek.
      2:
        text: Ebben a leckében a refrént a dal elején határozzuk meg, majd végigénekeljük
          a dalt, visszamegyünk, és azt látjuk, hogy az osztály nem a refrén szót
          énekli, hanem automatikusan visszamegy a tetejére, ahol a refrént határoztuk
          meg, és azt éneklik. Ezt bevezetésként használjuk annak elmagyarázására,
          hogy mit csinál egy program, amikor definiál és hív egy függvényt.
      3:
        text: Ismerős dalokat használunk, többek között az Old MacDonaldot. Megbeszéljünk,
          hogyan hívják meg újra és újra a refrént, és hogy néha a refrén változhat.
          Ha van egy olyan dal, mint az Old MacDonald, ahol bizonyos szavak változnak,
          az remek alkalom a paraméter fogalmának a bevezetésére. Bizonyos szavak
          megadásával extra információt tudunk küldeni a függvényünknek. Ha már biztos
          vagy abban, hogy mindenki érti a fogalmakat, akkor vehetitek a saját dalaitokat,
          és felbonthatjátok őket. Meglátjuk, hogy együtt ki tudjátok-e találni.
    unplug8:
      1:
        text: Az absztrakcióról szóló leckénkben a madlibs fogalmát használjuk, ahol
          gyakorlatilag egy üres részt illesztünk be egy történetbe, amelyet aztán
          több különböző szóval lehet kitölteni. Ezt az ötletet vesszük alapul, és
          megkérjük a gyerekeket, hogy adjanak saját szavakat a történeteikhez. Ezáltal
          jól el tudjuk magyarázni az absztrakció fogalmát.
      2:
        text: Az egész a függvényekről szól, és arról, hogy van egy függvény, mint
          például az Old MacDonaldban, ahol a refrénnek ugyan van egy struktúrája,
          de valami apró dolog mindig változik, és ezt a kis dolgot, ami változik,
          absztrahálni kell, és minden alkalommal ki kell tölteni a saját szavaddal.
          De néha három szó változik, és így három paraméterrel kell kitöltöeni, de
          ez még így is nagyon hasznos.
      3:
        text: Lehet egy olyan függvényed, amellyel sok különböző problémát lehet kezelni.
          Sokszor az emberek külön függvényeket írnak ezekre a problémákra, és nem
          veszik észre, hogy csak egy apró különbség van közöttük. Ha megtalálnák
          a módját annak, hogy ezt az egy apró különbséget kezeljék, akkor újra és
          újra ugyanazt a függvényt használhatnák 14 különböző függvény helyett.
    unplug9:
      1:
        text: A váltóprogramozás egy rendkívül szórakoztató lecke, és nem csupán a
          számítástechnikáról lehet tanulni belőle. Néha, amikor mindenki egy kicsit
          nyugtalan, fel kell állítani őket. Ez nagyszerű lehetőség, hogy egy kis
          izgalom kerüljön az informatikába.
      2:
        text: Két csoportra kell osztani az osztályt, és a diákok két sort alkotnak,
          hasonlóan a váltófutáshoz. Mindkét csoportból az első személy a terem másik
          oldalára fut, ahol egy rajz várja őket egy kockás papíron és egy üres papírlap.
          Fölírják a kép létrehozásának első lépését, majd visszafutnak a sorba, megjelölik
          a következő játékost, aki visszamegy, hogy megírja a következő lépést.
      3:
        text: Ez remek lehetőséget ad a hibakeresés fontosságának a megerősítésére,
          hogy ellenőrizni kell a saját munkánkat, de ellenőrizni kell azt a munkát
          is, amit mások végeztek el mi előttünk. Gyorsan megértik, hogy mennyire
          fontos odafigyelni a kódolásra, amikor egy egész csapat függ tőlük.
    unplug10:
      1:
        text: Ennek a tevékenységnek a segítségével az internet működése könnyen átlátható.
          Egyszerű szavakkal elmagyarázzuk a szükséges szakkifejezéseket, így a diákok
          szimulálni tudják üzenetek, például egy e-mail küldését.
      2:
        text: A tanulók üzeneteket továbbítanak, miközben a három átviteli módszer
          egyikének a szerepét játszák el. Vezeték nélküli internet, DSL és optikai
          szál. A wifit képviselő tanulóknak a fejükön kell viselniük a továbbítandó
          üzenetet, mert a wifi esetében a legnagyobb a valószínűsége annak, hogy
          elveszik az információ egy része.
      3:
        text: A DSL-t vagy kábeltévét játszó diákok a kézfejükön hordják az üzenetet,
          ahol valamivel kisebb a valószínűsége az információ elejtésének. Az optikai
          szálakat képviselő diákok pedig mindkét kezükben fogva viszik az üzenetet.
          Ezzel a tevékenységgel könnyen meg lehet érteni valamit, amit sokan közülünk
          nap mint nap használnak.
    unplug11:
      1:
        text: Itt az ideje hátralépni, és madártávlatból szemlélni mindazt, ami az
          elmúlt tizenkilenc leckében történt. Remek alkalom arra, hogy felhívjuk
          a tanulók figyelmét, hatalmas eredményt értek el. Többet tanultak ezekből
          a leckékből, mint amennyit a legtöbb felnőtt tud a számítástechnikáról
      2:
        text: Beszéljétek meg az osztállyal vagy kisebb csoportokban, hogy melyek
          voltak a kedvenc leckéik. Csilloghat a diákok kreativitása amikor visszatekintetek
          mindarra, amit tanultak. Oszd őket csoportokra, és a diákok készítsenek
          egy számítógép nélkül is elvégezhető leckét. Minden csoportnak adj egy-egy
          fontos fogalmat, például függvényeket vagy algoritmusokat, és legyen kéznél
          sokféle anyag, amivel dolgozhatnak. A csoportok mutassák be az új, számítógép
          nélkül is elvégezhető tevékenységeket, vagy akár különíts el egy teljes
          napot, amikor a diákok elvégezhetnek néhány tevékenységet ezek közül.
      3:
        text: A Code.org minden munkatársa nevében reméljük, hogy nagyon jól éreztétek
          magatokat ezen a tanfolyamon. És bármi is az álmotok, létrehozni egy új,
          tökéletes alkalmazást, vagy programozással segíteni betegségek leküzdését,
          vagy kiváló problémamegoldók szeretnétek lenni, ez a tanfolyam volt az első
          lépés az álmaitok megvalósításában.
    starwars_intro:
      1:
        text: Szia, Kathleen Kennedy vagyok, a Star Wars Ébredő erő producere. Ma
          egy filmcsillagunkkal fogsz dolgozni, BB-8-tel, aki egy szférikus droid.
          Mindent, amit csinál, és minden mozgását számítógépes szoftver irányítja.
          A számítógép-tudomány minden iparágban jelen van a marketingtől az egészségügyön
          át a filmig. Valójában informatikai mérnökök százai dolgoznak együtt az
          olyan filmeken, mint az Ébredő erő.
      2:
        text: Szia, Rachel Rose vagyok, vezető kutatásfejlesztő mérnök az ILM-nél
          és én vezetem az animációs és karakterfejlesztő csapatot. Az erő ébredésében
          én segítek a művészeknek kidolgozni a mozgó ruhákat. Ezek a karakterek szerves
          részét képezik, és valósághűvé teszik őket a messzi-messzi galaxisban.
      3:
        text: A következő egy órában a saját Star Wars játékunkat fogjuk elkészíteni.
          Megtanítjuk neked a programozás alapvető fogalmait. A programozás általában
          szövegesen történik, de mi vonszolható blokkokat fogunk használni a programíráshoz.
          A felszín alatt továbbra is kód lapul. Miután a blokkokkal kapcsolatos alapokat
          megtanultad, átváltunk JavaScriptre, az egyik népszerű webes programozási
          nyelvre.
      4:
        text: Kezdetben Rey-jel fogsz dolgozni, aki beprogramozza BB-8-et, hogy minden
          ócskavasat összegyűjtsön. A képernyő három részre oszlik. A bal oldal a
          Star Wars játéktér, ahol a kód futni fog. A feladatokhoz kapcsolódó utasítások
          a játéktér alatt vannak.
      5:
        text: A középső részben van az eszköztár, és benne minden blokk egy parancs,
          amit BB-8 megért.
      6:
        text: A fehér terület a Munkaterület, és itt fogjuk építeni a programot.
      7:
        text: Ha a mozdulj balra blokkot a munkaterületre húzod, és a futtatásra kattintasz,
          mi fog történni? BB-8 balra mozdul egyet a rácson.
      8:
        text: És mi a helyzet, ha BB-8-nek valami mást is kell csinálnia a mozdulj
          balra blokk után? Hozzáadhatsz még egy blokkot a programhoz. Én most a mozdulj
          fel blokkot választom, és a mozdulj balra alá vonszolom, amíg a kiemelés
          meg nem jelenik. Ekkor elengedem, és a két blokk összekattan.
      9:
        text: Ha ezután megnyomom a Futtatást, BB-8 minden a munkafelületen található
          parancsot teljesíteni fog föntről lefelé haladó sorrendben. Ha törölni szeretnél
          egy blokkot, csak vonszold vissza az eszköztárba.
      10:
        text: Ha már megnyomtad a futtatást, bármikor rányomhatsz a Visszaállítás
          gombra, és újrakezdheted a munkát BB-8-tel. Nos, lássunk hozzá!
    starwars_typing:
      1:
        text: A blokkok JavaScript parancsokat takarnak. A professzionális programozók
          körében manapság a JavaScript a legnépszerűbb programnyelv. Blokkokkal nagyon
          jól el lehet kezdeni tanulni a programozást, és valójában olyan vezető egyetemeken
          is, mint a Harvard vagy a Berkeley így kezdik tanítani a programozást. De
          miután az alapokat elsajátították, a mérnökök gépelik a kódot, mert így
          gyorsabban haladnak.
      2:
        text: Több száz fajta parancsot begépelhetünk anélkül, hogy az eszköztárban
          kellene keresgélnünk őket. A tanulás során a gépelés lassabbnak tűnik, de
          azért érdemes megpróbálni.
      3:
        text: A munkafelület jobb fölső sarkában a Kód megjelenítésére kattintva kattinthatsz
          a blokkokról a gépelős üzemmódba.
      4:
        text: A következő leckében gépelési módban kezdünk. Még mindig behúzhatod
          az eszköztárból a blokkot, de beírhatod a parancs nevét is. Ahogy elkezdesz
          gépelni, látni fogod a lehetséges utasítások neveit az alatt, ahol gépelsz.
          Hogy gyorsabban haladj, ahelyett, hogy begépelnéd a teljes utasítás nevét,
          kiválaszthatod a felsorolásból az egyiket. Én mindig alkalmazom a munkámban
          ezt az automatikus-kiegészítés funkciót.
      5:
        text: Amikor a kódot gépeled, akkor a számítógép elvárja, hogy nagyon precíz
          legyél. Pontosan kell gépelned az utasításneveket, figyelve a kis és nagybetűkre,
          a zárójelekre és a pontosvesszőkre. A legkisebb gépelési hiba is azt jelentheti,
          hogy BB-8 nem tudja megérteni a kódot és nem fog tudni mozogni.
      6:
        text: Amikor egy sorban hibázol, akkor a szerkesztő kiemeli azt, így meg tudod
          próbálni kijavítani a szöveget.
      7:
        text: Ha elakadsz, akkor az újrakezdés gomb megnyomásával bármikor elkezdheted
          az elejéről a feladatot, de visszaválthatsz blokk módba is a jobb felső
          sarokba kattintva. Akkor próbáljuk meg a gépelést! Ne keseredj el, ha hibázol.
          Mindenki próbálkozik egy darabig, mire összejön.
    starwars_events:
      1:
        text: Szia, az én nevem Charita Carter. Vezető kreatív producer vagyok a Walt
          Disney Imagineeringnél. Én vagyok felelős azokért a játékokért, amelyekkel
          a látogatóink találkoznak. Mindig keressük a lehetőségét annak, hogy fejlődjünk
          és emlékezetesebb élményt nyújtsunk a látogatóinknak, és a technológia alapvető
          ebben a folyamatban.
      2:
        text: Gratulálunk, megcsináltad! Ügyesen programoztad a BB-8-et. Most itt
          az ideje, hogy valami nehezebbe kezdjünk. Vágjunk bele! Miután a programozás
          alapjait megtanultad, visszamegyünk az időben és a saját játékunkat fogjuk
          elkészíteni R2-D2 és C3PO szereplésével.
      3:
        text: 'Hogy játékot tudjunk csinálni, meg kell ismerned egy fogalmat, amit
          a programozók minden nap használnak: ezek az események. Az események mondják
          a programnak hogy hallgassanak vagy várjanak addig, amíg valami nem történik,
          és amint az a dolog megtörténik, tegyenek valamit.'
      4:
        text: Esemény például egy kattintás az egérrel, egy nyíl billentyű lenyomása
          vagy az érintőképernyő megérintése.
      5:
        text: Most R2-D2-nak felfelé kell mozognia, hogy elvigyen egy üzenetet egy
          lázadó pilótáknak, majd lefelé kell mozognia a másik Lázadóhoz. Eseményeket
          fogunk használni a mozgatáshoz, amikor a játékos a föl-le billentyűket vagy
          gombokat használja.
      6:
        text: A "felfelé nyíl megnyomásakor" esemény blokkot fogjuk használni, és
          hozzácsatoljuk a menj fel blokkot. Ha a játékos megnyomja a felfelé nyilat,
          akkor a "felfelé nyíl megnyomásakor"-hoz kapcsolódó blokk elkezd futni.
          És ugyanezt fogjuk csinálni, hogy R2-D2 lefelé mozogjon.
      7:
        text: Ehhez a "felfelé nyíl megnyomásakor" whenUp() parancsot fogjuk használni.
          Amikor a parancsot kihúzod az eszköztárból, akkor látni fogod, hogy az egy-egy
          kapcsos zárójellel kezdődik és végződik a pontosvessző helyett. Ez lehetővé
          teszi, hogy középre más parancsokat illesszünk. Minden olyan parancs, amit
          ide beteszünk lefut majd, amikor a játékos megnyomja a felfelé mutató nyilat.
      8:
        text: Azt akarjuk, hogy R2-D2 felfelé menjen, így tegyünk be egy menj fel
          blokkot a parancsba. És ugyanezt fogjuk tenni, hogy R2-D2 lefelé menjen.
      9:
        text: Így ahelyett, hogy a droid minden mozgását előre megterveznénk, R2-D2
          a gombnyomásokra fog reagálni, és így fog mozogni a képernyőn. Lépésről
          lépésre egyre interaktívabb lesz a játék.
    starwars_congrats:
      1:
        text: Szia, az én nevem Alice és én vezetem a projektet és a fejlesztő csapatot
          itt, a code.org-nál. Ezen a feladatsoron is dolgoztam, amit éppen elvégzel.
      2:
        text: 'Az utolsó szinten is túljutottál. Gratulálunk! Mindent megtanultál,
          ami ahhoz szükséges, hogy elkészítsd a saját Star Wars játékodat. Nincs
          több utasítás és megoldandó feladat. Elkészítheted a saját játékod és kitalálhatod,
          hogy működjön. Még egy dolog: új hangok és parancsok állnak a rendelkezésedre,
          hogy még több dolgot tudj csinálni.'
      3:
        text: "[tanulók beszélnek] Olyan játékot készítettünk, hogy akkor kapsz pontot,
          ha elkapsz egy Malacot. Viszont az a csavar, hogy valahányszor elkapsz egy
          Malacot, megjelenik egy Rohamosztagos. Az egész képernyő tele van Malacokkal,
          és ha 10 000-et elkapsz, akkor nyersz."
      4:
        text: "[tanulók beszélnek] Olyan játékot készítettünk, hogy nem veszthetsz,
          és minden, amit megölsz, pontot ér. Én a programomhoz megfordítottam a nyilak
          irányát, így ha a föl nyilat megnyomod, a szereplő lefelé megy, és ha a
          jobb gombot megnyomod, balra megy. Elég nehéz! Néha előnyhöz jutsz, igazságtalan
          előnyhöz, ha te vagy a játék fejlesztője. Megcsináltad? Jaj!"
      5:
        text: Ha elkészültél az alkotásoddal, válaszd a megosztást, hogy a link segítségével
          meg tudd mutatni a barátaidnak. Jó szórakozást!
    starwars_blocks_intro:
      1:
        text: Szia, Kathleen Kennedy vagyok, a Star Wars Ébredő erő producere. Ma
          egy filmcsillagunkkal fogsz dolgozni, BB-8-tel, aki egy szférikus droid.
          Mindent, amit csinál, és minden mozgását számítógépes szoftver irányítja.
          A számítógép-tudomány minden iparágban jelen van a marketingtől az egészségügyön
          át a filmig. Valójában informatikai mérnökök százai dolgoznak együtt az
          olyan filmeken, mint az Ébredő erő.
      2:
        text: Szia, Rachel Rose vagyok, vezető kutatásfejlesztő mérnök az ILM-nél
          és én vezetem az animációs és karakterfejlesztő csapatot. Az erő ébredésében
          én segítek a művészeknek kidolgozni a mozgó ruhákat. Ezek a karakterek szerves
          részét képezik, és valósághűvé teszik őket a messzi-messzi galaxisban.
      3:
        text: A következő egy órában a saját Star Wars játékunkat fogjuk elkészíteni.
          Megtanítjuk neked a programozás alapvető fogalmait. A programozás általában
          szövegesen történik, de mi vonszolható blokkokat fogunk használni a programíráshoz.
          Kezdetben Rey-jel fogsz dolgozni, aki beprogramozza BB-8-et, hogy minden
          ócskavasat összegyűjtsön.
      4:
        text: A képernyő három részre oszlik. A bal oldal a Star Wars játéktér, ahol
          a kód futni fog. A feladatokhoz kapcsolódó utasítások a játéktér alatt vannak.
      5:
        text: A középső részben van az eszköztár, és benne minden blokk egy parancs,
          amit BB-8 megért.
      6:
        text: A fehér terület a Munkaterület, és itt fogjuk építeni a programot.
      7:
        text: Ha a mozdulj balra blokkot a munkaterületre vonszolod, és a Futtatásra
          kattintasz, mi fog történni? BB-8 balra mozdul egyet a rácson.
      8:
        text: És mi a helyzet, ha BB-8-nek valami mást is kell csinálnia a mozdulj
          balra blokk után? Hozzáadhatsz még egy blokkot a programhoz. Én most a mozdulj
          fel blokkot választom, és a mozdulj balra alá vonszolom, amíg a kiemelés
          meg nem jelenik. Ekkor elengedem, és a két blokk összekattan. Ha ezután
          megnyomom a Futtatást, BB-8 minden a munkafelületen található parancsot
          teljesíteni fog föntről lefelé haladó sorrendben.
      9:
        text: Ha ki akarsz törölni egy blokkot, csak húzd vissza az eszköztárba.
      10:
        text: Miután megnyomtad a futtatást, bármikor visszatérhetsz a kezdeti állásba,
          és BB-8 is visszamegy oda, ahol a futtatás előtt állt. És most, gördüljünk
          tovább!
    starwars_blocks_events:
      1:
        text: Szia, az én nevem Charita Carter. Vezető kreatív producer vagyok a Walt
          Disney Imagineeringnél. Én vagyok felelős azokért a játékokért, amelyekkel
          a látogatóink találkoznak. Mindig keressük a lehetőségét annak, hogy fejlődjünk
          és emlékezetesebb élményt nyújtsunk a látogatóinknak, és a technológia alapvető
          ebben a folyamatban.
      2:
        text: Gratulálunk, megcsináltad! Ügyesen programoztad a BB-8-et. Most itt
          az ideje, hogy valami nehezebbe kezdjünk. Vágjunk bele! Miután a programozás
          alapjait megtanultad, visszamegyünk az időben és a saját játékunkat fogjuk
          elkészíteni R2-D2 és C3PO szereplésével.
      3:
        text: 'Hogy játékot tudjunk csinálni, meg kell ismerned egy fogalmat, amit
          a programozók minden nap használnak: ezek az események. Az események mondják
          a programnak hogy hallgassanak vagy várjanak addig, amíg valami nem történik,
          és amint az a dolog megtörténik, tegyenek valamit.'
      4:
        text: Esemény például egy kattintás az egérrel, egy nyíl billentyű lenyomása
          vagy az érintőképernyő megérintése.
      5:
        text: Most R2-D2-nak felfelé kell mozognia, hogy elvigyen egy üzenetet egy
          lázadó pilótáknak, majd lefelé kell mozognia a másik Lázadóhoz. Eseményeket
          fogunk használni a mozgatáshoz, amikor a játékos a föl-le billentyűket vagy
          gombokat használja.
      6:
        text: A "felfelé nyíl megnyomásakor" esemény blokkot fogjuk használni, és
          hozzácsatoljuk a menj fel blokkot. Ha a játékos megnyomja a felfelé nyilat,
          akkor a "felfelé nyíl megnyomásakor"-hoz kapcsolódó blokk elkezd futni.
          És ugyanezt fogjuk csinálni, hogy R2-D2 lefelé mozogjon. Így ahelyett, hogy
          a kóddal előre meghatároznánk a droid mozgását, R2-D2 a gombok nyomására
          fog reagálni és így fog mozogni a képernyőn.
      7:
        text: Lépésről lépésre egyre interaktívabb lesz a játék.
    starwars_blocks_congrats:
      1:
        text: Szia, az én nevem Alice és én vezetem a projektet és a fejlesztő csapatot
          itt, a code.org-nál. Ezen a feladatsoron is dolgoztam, amit éppen elvégzel.
      2:
        text: 'Az utolsó szinten is túljutottál. Gratulálunk! Mindent megtanultál,
          ami ahhoz szükséges, hogy elkészítsd a saját Star Wars játékodat. Nincs
          több utasítás és megoldandó feladat. Elkészítheted a saját játékod és kitalálhatod,
          hogy működjön. Még egy dolog: új hangok és parancsok állnak a rendelkezésedre,
          hogy még több dolgot tudj csinálni.'
      3:
        text: "[tanulók beszélnek] Olyan játékot készítettünk, hogy akkor kapsz pontot,
          ha elkapsz egy Malacot. Viszont az a csavar, hogy valahányszor elkapsz egy
          Malacot, megjelenik egy Rohamosztagos. Az egész képernyő tele van Malacokkal,
          és ha 10 000-et elkapsz, akkor nyersz."
      4:
        text: "[tanulók beszélnek] Olyan játékot készítettünk, hogy nem veszthetsz,
          és minden, amit megölsz, pontot ér. Én a programomhoz megfordítottam a nyilak
          irányát, így ha a föl nyilat megnyomod, a szereplő lefelé megy, és ha a
          jobb gombot megnyomod, balra megy. Elég nehéz! Néha előnyhöz jutsz, igazságtalan
          előnyhöz, ha te vagy a játék fejlesztője. Megcsináltad? Jaj!"
      5:
        text: Ha elkészültél az alkotásoddal, válaszd a megosztást, hogy a link segítségével
          meg tudd mutatni a barátaidnak. Jó szórakozást!
    mc_intro:
      1:
        text: Az én nevem Jens Bergensten, de a legtöbben Jebnek hívnak. A Minecraft
          vezető fejlesztője vagyok itt a Mojangnál Stockholmban. Azt hiszem, tizenegy
          vagy tizenkét éves voltam, amikor programozni kezdtem, mert játékokat akartam
          készíteni. Az apukám egyik barátja mondta, hogy ha játékokat akarok csinálni,
          akkor meg kell tanulnom programozni. Így kezdtem el. Szeretek alkotni és
          kitalálni a játékok alapjait. Ez az, amit igazán szeretek a Minecraftban.
      2:
        text: A következő egy órában meg fogod ismerni a számítógép-tudomány alapjait,
          miközben Alexet vagy Steve-et vezérled, hogy a Minecraft világ egy kis szimulált
          darabjában mozogjanak.
      3:
        text: A programozás hagyományosan szövegesen történik, de ma a Blocky-t fogjuk
          használni, egy rendszert, amiben látványos, vonszolható blokkokkal lehet
          programokat írni. A felszín alatt JavaScript kód születik.
      4:
        text: A fogalmakat, amiket meg fogsz ismerni, a számítógép programozók nap
          mint nap használják, ezek a számítógép-tudomány alapjai. Itt a Mojangnál
          mi arra használjuk őket, hogy a Minecraftot programozzuk.
      5:
        text: Mielőtt elkezdjük, válassz egy karaktert. Én Alexet választom. Építsünk
          egy olyan kódot, ami segít nekünk a képernyőn mozogni.
      6:
        text: A képernyő három fő részre van osztva. A bal oldalon látod a Minecraft
          játékteret, ahol a program futni fog. Alatta találhatóak minden pályán az
          utasítások.
      7:
        text: A középső rész az eszköztár, és minden blokk benne egy parancs, amely
          irányítja Alexet.
      8:
        text: A jobb oldali fehér rész a Munkaterület, ahol a programot fogjuk írni.
      9:
        text: Ha a munkafelületre húzzuk az előrelépni parancsot, és aztán a Futtatásra
          kattintunk, mi fog történni? Alex előremozdul egy lépéssel a rácson.
      10:
        text: És mi van, ha még valamit kellene csinálnia, miután előrelépett egyet?
          Még egy blokkot hozzáadhatunk a programhoz. Én most a fordulj jobbra parancsot
          választom, és az előrelépni blokk alá vonszolom, amíg a narancssárga csík
          meg nem jelenik. Ekkor elengedem, és a két blokk összepattan. Ezután újra
          megnyomhatjuk a futtatást. Alex a Munkaterületen szereplő utasításokat fentről
          lefelé történő sorrendben fogja végrehajtani.
      11:
        text: Ha ki akarsz törölni egy blokkot, csak húzd vissza az eszköztárba.
      12:
        text: 'Ha szeretnél mindent törölni, és visszatérni a kiindulási állapothoz,
          nyomd meg az Újrakezdés gombot a Munkaterület jobb fölső sarkában. Még egy
          dolog: látod a kis háromszöget a fordulj blokkokon? Valahányszor ezt a háromszöget
          látod, az azt jelenti, hogy több lehetőség közül választhatsz! Kezdjünk
          kódolni!'
    mc_repeat:
      1:
        text: Az én nevem Lydia Winters, brand igazgató vagyok a Mojangnál, és mi
          készítettük a kis Minecraft nevű játékot.
      2:
        text: Nekem a kedvenc elfoglaltságom a Minecraftban a felfedezés. Szeretek
          barlangokban kalandozni, és mindenfélét találni. Mivel én nem vagyok programozó,
          izgatottam várom, hogy végigcsináljam a Minecraft feladatokat és magam is
          tanuljak egy kis programozást.
      3:
        text: Az előző feladványban nagyon sokszor kellett használni az előrelépni
          blokkot. Sokkal egyszerűbb lenne, ha megmondhatnánk a számítógépnek, hogy
          végezze el az előrelépni parancsot négyszer vagy ötször. Szerencsére az
          ismétlő ciklusokkal a számítógépek ezt nagyon jól tudják csinálni.
      4:
        text: Amikor a Minecraftot fejlesztjük, az ismétlő ciklusokat használjuk,
          hogy egy új világ létrehozásához szükséges összes alapanyagot elhelyezzük.
          Ez ezer meg ezer blokkot jelent. Apróbb esetekben is használunk ciklusokat,
          például, hogy Alex lábai mozogjanak előre-hátra, ahogy megy. Az ismétlő
          ciklusok hatásos részei a programozásnak.
      5:
        text: A következő szinteken beköszönt az est, így egy házat kell építenünk,
          hogy biztonságban legyünk. Az ismételd blokkot fogjuk használni, így ez
          nagyon könnyű lesz.
      6:
        text: Hogy a ház falát megépítsük, vagy négyszer azt mondjuk Alexnek, hogy
          az előrelépni paranccsal menjen előre és helyezzen el egy deszkát, vagy
          ezeket a parancsokat az ismételd blokkba tesszük, hogy többször is megismételje
          ezeket a folyamatokat. Most rá kell kattintanunk az ismételd blokkra és
          meg kell mondjuk, hányszor ismételje a műveleteket. Most építsük fel a házat,
          mielőtt este lesz! Jó szórakozást!
    mc_if_statements:
      1:
        text: Most a ha utasításról fogunk tanulni. A ha utasítás alapvető része a
          programozás tanulásának. Ezek segítenek a számítógépnek döntéseket hozni.
      2:
        text: Minden számítógép használ ha utasításokat, a telefonom is. Például ha
          lezárom, fut egy olyan program, ami beenged, ha helyes jelszót adok meg.
          Ellenkező esetben zárolja a telefont, és egy hibaüzenetet ír ki.
      3:
        text: Használhatsz ha feltételeket, hogy Steve és Alice reagáljon arra, amit
          a világban tapasztal. Ha például van előttük egy szikla, akkor balra fordulhatnak.
          Vagy jobbra fordulhatnak, ha egy fának ütköznek.
      4:
        text: Nem akarunk a lávába esni. Könnyű elkerülni, látjuk a képernyőn, hol
          helyezkedik el. De mi van azzal a lávával, ami a kövek alatt van?
      5:
        text: Miután kibányásztuk a követ, meg kell bizonyosodnunk róla, hogy nincs
          alatta láva, mielőtt tovább haladnánk. Ha láva van alatta, akkor egy kő
          hidat kell a szereplőnk elé helyeznünk, mielőtt tovább tudnánk haladni.
          Így már biztonsággal tovább mehetünk. Ideje újra bányászni! Ne feledd el
          használni a ha blokkot, és vigyázz a lépteidre!
    mc_congrats_share:
      1:
        text: Gratulálunk! Megismerted a számítógép-tudomány alapvető elemeit.
      2:
        text: Most használhatod az összes blokkot, hogy a saját világodat megalkosd.
          Nincsen több utasítás és megoldandó feladvány. Bármit építhetsz, amit csak
          szeretnél. A választás a tiéd.
      3:
        text: "[tanulók beszélnek] Nagyon valódi. Birkanyírás! Fáklyákból csináltam
          egy L betűt. Én egy A-t készítettem nyírfa deszkából. Építettünk egy házat
          gyapjúból!"
      4:
        text: Ha elkészültél az alkotásoddal, válaszd a megosztást, hogy a link segítségével
          meg tudd mutatni a barátaidnak. Jó szórakozást!
    mc_congrats_no_share:
      1:
        text: Gratulálunk! Megismerted a számítógép-tudomány alapvető elemeit.
      2:
        text: Most használhatod az összes blokkot, hogy a saját világodat megalkosd.
          Nincsen több utasítás és megoldandó feladvány. Bármit építhetsz, amit csak
          szeretnél. A választás a tiéd.
      3:
        text: "[tanulók beszélnek] Nagyon valódi. Birkanyírás! Fáklyákból csináltam
          egy L betűt. Én egy A-t készítettem nyírfa deszkából. Építettünk egy házat
          gyapjúból!"
      4:
        text: Most bármit építhetsz, amit csak szeretnél! Jó szórakozást!
    gumball_intro:
      1:
        text: Ha szeretnéd elkészíteni a saját játékodat, az nagyon egyszerűen megteheted.
          Mindössze néhány programozási alapismeretre van szükséged, és máris játszhatsz
          az általad készített játékkal.
      2:
        text: Van kedvenc videojátékod? A PlayLabban megtesszük az első lépést, hogy
          ilyen játékokat tudjatok készíteni. A jó játékoknak van egy történetük,
          és minden történetben vannak szereplők. Szereplők, akik különböző dolgokat
          csinálnak, például beszélnek, mozognak és kapcsolatba lépnek egymással.
          Talán még pontokat is szereznek a játék szabályai szerint. Ma megtanuljuk,
          hogyan lehet mindezeket a dolgokat egyenként, szórakoztató szereplőkkel
          létrehozni, majd a nulláról kiindulva egy olyan játékot készítünk, amelyet
          telefonon lehet játszani, és meg tudtok osztani másokkal.
      3:
        text: Ma megtanuljuk, hogyan lehet mindezeket a dolgokat egyenként, szórakoztató
          szereplőkkel létrehozni, majd a nulláról kiindulva egy olyan játékot készítünk,
          amelyet telefonon lehet játszani, és meg tudtok osztani másokkal.
      4:
        text: 3 fő részre van felosztva a képernyőd. A bal oldalon van a játéktér,
          ahol a program fog futni. Az utasítások minden egyes szinthez alól vannak
          odaírva.
      5:
        text: Ez a középső részen van az eszközkészlet, és minden egyes blokk egy-egy
          kódelem.
      6:
        text: A jobb oldali fehér rész a Munkaterület, ahol a programot fogjuk írni.
      7:
        text: Az indításhoz, a blokkjaidat hozzá kell csatolnod a narancssárga "futtatáskor"
          blokkhoz. Több blokkot is összekapcsolhatsz úgy, hogy elhúzod őket a sárga
          vonalig, és akkor majd összekapcsolódnak.
      8:
        text: Ebben az első feladványban a szereplőket úgy fogjuk rávenni a beszédre,
          hogy a "beszél" blokkot  összekötjük az "amikor fut" blokkal, és beírjuk
          az üzenetet. Ha a blokkok a helyükre kerültek, nyomd meg a Futtatás gombot,
          és nézd meg, mit programoztál.
      9:
        text: Kezdd el, és mire a végére érsz már el tudod készíten a saját játékod,
          különféle szereplőkkel, akik kapcsolatba  tudnak léni egymással, pontokat
          szerezhetnek, dolgokat dobálhatnak és akár el is tüntethetik egymást. Minden
          csak rajtad múlik!
    gumball_events:
      1:
        text: Most valami olyasvalamivel fogunk megismerkedni, amit a játékprogramozók
          mindennap használnak. Ezeket eseménynek hívjuk. Egy esemény azt mondja a
          programodnak, hogy figyelje, mikor történik valami, és amikor ez megtörténik,
          a játék végrehajt egy műveletet.
      2:
        text: 'Néhány példa egy eseményre: egérkattintás, felfelé vagy lefelé mutató
          nyílbillentyű, vagy akár a képernyő megérintése.'
      3:
        text: Itt azt csináljuk, hogy amikor a játékos rákattint, a szereplő mondjon
          valamit. Az amikor "rákattint" blokkot fogjuk használni, és hozzácsatoljuk
          a "beszél" blokkot. Amikor a játékos rákattint, az összes ehhez a blokkhoz
          csatolt blokkot a program végrehajtja.
      4:
        text: Vannak olyan blokkok is, amelyekben nyilak vannak. Ha ezeket összekapcsolod
          a mozgatás blokkokkal, akkor a nyílbillentyűkkel lehet a szereplőket felfelé,
          lefelé, balra vagy jobbra mozgatni. A játékod apránként egyre interaktívabb
          lesz.
    gumball_repeat:
      1:
        text: El tudod képzelni, hogy valamit állandóan meg kell ismételned? Remélhetőleg
          soha nem kell, mert a számítógépek nagyon jók a dolgok megismétlésében.
      2:
        text: Ez az ismétlés örökké blokk. Bármi, ami ebben a blokkban van, állandón
          meg fog történni a játékban. Ha azt akarjuk, hogy egy szereplő ismétlődően
          csináljon valamit anélkül, hogy a játékosnak bármit is kellene tenni, akkor
          ezeket a blokkokat az ismétlés örökké blokkba tesszük.
      3:
        text: A következő feladványban az a célunk, hogy a szereplő folyamatosan végezzen
          egy feladatot. Ha megtanulod az ismétlés parancsok működését, azzal később,
          amikor a saját játékod építed, rengeteg időt takaríthatsz meg magadnak.
    iceage_intro:
      1:
        text: Ha szeretnéd elkészíteni a saját játékodat, az nagyon egyszerűen megteheted.
          Mindössze néhány programozási alapismeretre van szükséged, és máris játszhatsz
          az általad készített játékkal.
      2:
        text: Van kedvenc videojátékod? A PlayLabban megtesszük az első lépést, hogy
          ilyen játékokat tudjatok készíteni. A jó játékoknak van egy történetük,
          és minden történetben vannak szereplők. Szereplők, akik különböző dolgokat
          csinálnak, például beszélnek, mozognak és kapcsolatba lépnek egymással.
          Talán még pontokat is szereznek a játék szabályai szerint. Ma megtanuljuk,
          hogyan lehet mindezeket a dolgokat egyenként, szórakoztató szereplőkkel
          létrehozni, majd a nulláról kiindulva egy olyan játékot készítünk, amelyet
          telefonon lehet játszani, és meg tudtok osztani másokkal.
      3:
        text: Ma megtanuljuk, hogyan lehet mindezeket a dolgokat egyenként, szórakoztató
          szereplőkkel létrehozni, majd a nulláról kiindulva egy olyan játékot készítünk,
          amelyet telefonon lehet játszani, és meg tudtok osztani másokkal.
      4:
        text: 3 fő részre van felosztva a képernyőd. A bal oldalon van a játéktér,
          ahol a program fog futni. Az utasítások minden egyes szinthez alól vannak
          odaírva.
      5:
        text: Ez a középső részen van az eszközkészlet, és minden egyes blokk egy-egy
          kódelem.
      6:
        text: A jobb oldali fehér rész a Munkaterület, ahol a programot fogjuk írni.
      7:
        text: Az indításhoz, a blokkjaidat hozzá kell csatolnod a narancssárga "futtatáskor"
          blokkhoz. Több blokkot is összekapcsolhatsz úgy, hogy elhúzod őket a sárga
          vonalig, és akkor majd összekapcsolódnak.
      8:
        text: Ebben az első feladványban a szereplőket úgy fogjuk rávenni a beszédre,
          hogy a "beszél" blokkot  összekötjük az "amikor fut" blokkal, és beírjuk
          az üzenetet. Ha a blokkok a helyükre kerültek, nyomd meg a Futtatás gombot,
          és nézd meg, mit programoztál.
      9:
        text: Kezdd el, és mire a végére érsz már el tudod készíten a saját játékod,
          különféle szereplőkkel, akik kapcsolatba  tudnak léni egymással, pontokat
          szerezhetnek, dolgokat dobálhatnak és akár el is tüntethetik egymást. Minden
          csak rajtad múlik!
    iceage_events:
      1:
        text: Most valami olyasvalamivel fogunk megismerkedni, amit a játékprogramozók
          mindennap használnak. Ezeket eseménynek hívjuk. Egy esemény azt mondja a
          programodnak, hogy figyelje, mikor történik valami, és amikor ez megtörténik,
          a játék végrehajt egy műveletet.
      2:
        text: 'Néhány példa egy eseményre: egérkattintás, felfelé vagy lefelé mutató
          nyílbillentyű, vagy akár a képernyő megérintése.'
      3:
        text: Itt azt csináljuk, hogy amikor a játékos rákattint, a szereplő mondjon
          valamit. Az amikor "rákattint" blokkot fogjuk használni, és hozzácsatoljuk
          a "beszél" blokkot. Amikor a játékos rákattint, az összes ehhez a blokkhoz
          csatolt blokkot a program végrehajtja.
      4:
        text: Vannak olyan blokkok is, amelyekben nyilak vannak. Ha ezeket összekapcsolod
          a mozgatás blokkokkal, akkor a nyílbillentyűkkel lehet a szereplőket felfelé,
          lefelé, balra vagy jobbra mozgatni. A játékod apránként egyre interaktívabb
          lesz.
    iceage_repeat:
      1:
        text: El tudod képzelni, hogy valamit állandóan meg kell ismételned? Remélhetőleg
          soha nem kell, mert a számítógépek nagyon jók a dolgok megismétlésében.
      2:
        text: Ez az ismétlés örökké blokk. Bármi, ami ebben a blokkban van, állandón
          meg fog történni a játékban. Ha azt akarjuk, hogy egy szereplő ismétlődően
          csináljon valamit anélkül, hogy a játékosnak bármit is kellene tenni, akkor
          ezeket a blokkokat az ismétlés örökké blokkba tesszük.
      3:
        text: A következő feladványban az a célunk, hogy a szereplő folyamatosan végezzen
          egy feladatot. Ha megtanulod az ismétlés parancsok működését, azzal később,
          amikor a saját játékod építed, rengeteg időt takaríthatsz meg magadnak.
    mc_2016_intro:
      1:
        text: Szia, a nevem Jens, és én vagyok a Minecraft vezető kreatív tervezője.
          A következő órában elkészítheted a saját Minecraft játékodat. Ez úgy fog
          kinézni, mint a Minecraft, de a világ megállt. A birkák nem mozognak, a
          csirkék nem tojnak, a zombik pedig csak állnak. Rajtad múlik, hogy hozzáadsz-e
          kódot, hogy a Minecraft világa működjön.
      2:
        text: 'A nevem Melissa, a Minecraft felhasználói kutatója vagyok. Ami engem
          igazán érdekel, az az, hogy az emberek hogyan gondolkodnak, és hogyan lépnek
          kapcsolatba a technológiával. Ez a munka tökéletes a  számomra, mert összekapcsolhatom
          a számítástechnikát és a pszichológiát: hogyan gondolkodnak és viselkednek
          az emberek.'
      3:
        text: Látni fogod, hogy a képernyőd három fő részre oszlik. 1. A bal oldalon
          a Minecraft játék látható. Jelenleg a világ fagyott állapotban van, de ezt
          kódolással ki fogjuk javítani.
      4:
        text: 2. Ez a középső terület az eszköztár. A blokkok mindegyike egy-egy parancsot
          jelent, amit a csirkék, birkák és más Minecraft-lények megértenek.
      5:
        text: 3. A jobb oldali terület a munkaterület, és itt fogjuk felépíteni a
          programunkat.
      6:
        text: Ha elfelejtenéd, hogy mit kell tenned, az egyes szintekhez tartozó utasításokat
          fent találod.
      7:
        text: Először egy csirkét fogunk programozni. Húzzuk a "mozgás előre" parancsot
          a munkaterületre. Amikor megnyomom a Futtatás gombot, a csirke egy lépést
          tesz előre. Ha tovább akarunk menni, húzok egy másik "mozgás előre" blokkot
          az első "mozgás előre" blokk alá, amíg a kiemelés meg nem jelenik. Ezután
          eldobom, és a két blokk egymáshoz csattan. Ha ismét megnyomom a Futtatás
          gombot, a csirke két lépést tesz előre.
      8:
        text: Ha ki akarsz törölni egy blokkot, csak húzd vissza az eszköztárba.
      9:
        text: Ha megnyomtad a Futtatás gombot, de a játékot vissza akarod állítani,
          és elölről kezdeni, nyomd meg a Visszaállítás gombot. Most rajtad a sor,
          készítsd el a Minecraft saját verziódat. Jó szórakozást!
    mc_2016_loops:
      1:
        text: Szia, a nevem Lisa. A Minecraft szoftverfejlesztője vagyok, és a játékban
          található állatok és ellenségek egy részével dolgozom. Az ocelot volt az
          egyik állat, amivel dolgoztam. Azon a részen dolgoztam, ahol halat adhatsz
          egy ocelotnak, és ezzel a saját macskáddá szelitíted őt.
      2:
        text: Mi emberek nagyon unatkozunk, ha ugyanazt a dolgot kell újra és újra
          és újra megcsinálnunk. A számítógépekben éppan az a jó, hogy képesek ugyanazt
          a dolgot milliószor vagy akár milliárdszor egymás után megcsinálni anélkül,
          hogy megunnák. Ezt az ismétlést huroknak hívjuk, és a Minecraftban minden
          lény használ hurkokat.
      3:
        text: Korábban megmozgattunk egy csirkét a képernyőn, de aztán megállt. A
          Minecraftban a csirkék örökké és örökké vándorolnak. Használjunk egy "örökké
          csinálja" hurkot az eszköztárunkból, hogy a csirkéink is örökké mozogjanak.
          A hurkok segítségével rengeteg időt spórolhatsz meg, és nagyon sok szép
          lehetőséget nyílik meg, amikor a Minecraft saját verziódat építed.
    mc_2016_events:
      1:
        text: Ezen a szinten választhatsz, hogy Steve vagy Alex leszel-e. A billentyűzeted
          nyílgombjaival tudsz felfelé, lefelé, balra és jobbra mozogni. Most már
          a szinten ott mozoghatsz, ahol csak akarsz. Ha használni szeretnéd az egyik
          lényt, csak sétálj felé, fordulj vele szembe, és nyomd meg a szóköz billentyűt.
      2:
        text: Ha érintőképernyőt használsz, a mozgáshoz húzd felfelé, lefelé, balra
          vagy jobbra a kezed. Ezután koppints a játékra, és használd az előtted lévő
          tárgyat.
      3:
        text: De mi történik, amikor használod? A Minecraftban a birkák levetik gyapjúkat,
          ha megnyírod őket, a tehenek elszaladnak, ha megütöd őket, a Creeperek pedig
          felrobbannak, ha a közelükbe érsz. Ezeket a reakciókat az események váltják
          ki. Az események azt mondják a programodnak, hogy figyeljen vagy várjon,
          amíg valami történik. És amikor ez a valami megtörténik, hajtson végre egy
          műveletet.
      4:
        text: Eddig csak egy eseményt használtál. Az "amikor megszületik" keretbe
          tett kód akkor fut le, amikor a lényed létrejön, vagy amikor a játék elindul.
          A következő néhány szinten új keretekkel ismerkedsz majd meg, olyan eseményekkel,
          mint például az "amikor megérinted", amely akkor fut le, amikor megérinted
          a lényt, vagy az "amikor használod", amikor használod a lényt. Vagy ha azt
          akarod, hogy napfelkeltekor eltűnjön zombid, akkor tedd az "amikor nappal
          van" keretbe.
    mc_2016_spawn:
      1:
        text: A játékokban a születés ugyanazt jelenti, mint a létrehozás. Ezen a
          szinten legyen az, hogy a zombik akkor születnek, amikor a nap lemegy. Ehhez
          az "amikor éjszaka van" blokkot fogjuk használni.
      2:
        text: Mivel azt akarjuk, hogy a zombik éjszaka szülessenek meg, az "amikor
          éjszaka van" blokk alá hozzáadjuk a "zombi születése" blokkot. Amint megszületnek,
          minden zombi lefuttatja azt a kódot, amit az "amikor megszületnek" eseményblokkjukba
          tettünk. Jó szórakozást a zombik szaporításához!
    mc_2016_congrats:
      1:
        text: Gratulálunk! Megtanultad, hogyan kell a Minecraft világának életre keltéséhez
          az informatikai parancsokat használni. Most már te vagy a fejlesztő. Feloldottad
          az összes parancsot és az összes lényt. Te döntöd el, hogy mi történik.
      2:
        text: Amikor kész a játékod, válaszd a megosztás lehetőséget, és megkapod
          a linket, amelyet megoszthatsz barátaiddal, vagy hogy lejátszhasd a játékot
          a telefonodon. Jó szórakozást! Alig várom, hogy játszhassak a te Minecraft
          változatoddal.
    applab_intro_welcome:
      1:
        text: A nevem Mei'lani. Gyakornok vagyok a code.org-nál, és informatika szakos
          hallgató is vagyok. Szeretem az informatikát, mert nagyon kreatív. Lehetek
          problémamegoldó. Mindent úgy alakíthatok, ahogy én akarom. De lehetek a
          tervező is. Lehetek a művész, és én választhatok ki mindent a kreatív oldalon.
      2:
        text: Az App labor segítségével könnyű saját alkalmazásokat készíteni! Akár
          van némi tapasztalatod a kódolásban, akár nincs, az App labor egy nagyszerű
          eszköz. Új alkalmazásokat lehet készíteni vele, amiket aztán megoszthatsz
          a barátaiddal.
      3:
        text: Ez egy App labor. A bal oldalon van az alkalmazásod. A jobb oldalon
          a kód, amely futtatni fogja. A programodat úgy építed fel, hogy blokkokat
          húzol be az eszköztárból. Kezdetben csak egy 'setProperty' (tulajdonságok
          beállítása) nevű blokkod lesz.
      4:
        text: A tulajdonságok beállítása blokk megváltoztatja a képernyőn megjelenő
          elemek kinézetét. Például a gombokét, a címkékét vagy akár magát a képernyőt
          is. Először el kell döntened, hogy melyik elemet szeretnéd megváltoztatni.
          Ha az alkalmazásodban az egyek elem fölé viszed a kurzort, akkor láthatod
          annak a nevét vagy az azonosítóját. Ezután válaszd ki azt az azonosítót
          az első legördülő listából.
      5:
        text: Az elemeknek nagyon sok tulajdonságuk van, s ezeket mind meg lehet változtathatni,
          megváltoztathatod például a szöveg színét, a háttér színét vagy betűk méretét.
          Láthatod a teljes listát, és a második legördülő menüből kiválaszthatod,
          hogy melyik tulajdonságot szeretnéd megváltoztatni.
      6:
        text: Az utolsó legördülő menüpontba be tudod írni a kívánt értéket. A blokk
          javaslatot fog tenni. De bármikor beírhatsz magadnak különböző színeket
          vagy számokat.
      7:
        text: 'Ha kész vagy, a blokkot úgy lehet olvasni, mintha egy mondat lenne:
          "Állítsd az 1. gomb háttérszínét zöldre." Nyomd meg a Futtatás gombot, és
          megnézheted a kódba beépített változásokat. Ha visszaállítod, újabb blokkokat
          húzhatsz be, és más dolgokat is megváltoztathatsz az alkalmazásodban. Például
          a szöveget!'
      8:
        text: Ebben a gyakorlatban blokk módban fogunk dolgozni, de az App labor támogatja
          a szöveges munkát is.
      9:
        text: Mindenképpen JavaScriptben, a web nyelvén fogsz programozni. Minden
          szinthez tartozik egy cél, utasítások és egy kép arról, hogy mit szeretnél
          létrehozni.
      10:
        text: Ha elakadsz, kattints erre a képre, és az pontosan megmutatja, hogyan
          kell befejezned. De előbb próbáld meg, hogy egyedül is meg tudod-e csinálni.
      11:
        text: Ha teljesítetted a szintet, a továbblépéshez kattints a Befejezés gombra.
          Ennyi az egész! Nyomd meg a narancssárga Folytatás gombot, lépj a következő
          szintre, és kezdd el a kalandot egy App laborral!
    applab_intro_events:
      1:
        text: Az alkalmazás nagyon klassz dolog, mert olyan, mintha saját vállalkozást
          indítanál. Úgy értem, az alapoktól kezdve mindent te tervezhetsz meg, mindent
          te irányíthatsz, te vagy a tulajdonosa ennek a darabnak, amit most hoztál
          létre kódolással.
      2:
        text: Most, hogy már meg tudod változtatni az alkalmazásod megjelenését, tedd
          interaktívvá, és reagáljon eseményekre! Az események olyan felhasználói
          műveletek, mint például kattintás egy gombra, görgetés egy menüben vagy
          rámutatás egy képre. Az interaktív alkalmazások reagálnak az eseményekre,
          például hangot adnak, ha erre a gombra kattintok. Az App laborban ehhez
          egy új blokkot kell használnod, az 'onEvent' (eseményen) nevű blokkot.
      3:
        text: Ez a program kékre állítja a képernyőt. Azt akarom, hogy a képernyő
          zöldre változzon, amikor erre a gombra kattintok. Először is be kell húznom
          egy onEvent blokkot. A rámutatásból tudom, hogy a gomb azonosítója "bigButton"
          (nagy gomb), így ezt választom ki az első legördülő listából.
      4:
        text: Ezután kiválasztom az esemény típusát. Nagyon sok lehetőség közül választhatsz,
          de most meghagyom a szokásos régi kattintást.
      5:
        text: 'Végül hozzáadok egy kódot az on eseményen belül, amely megváltoztatja
          a képernyő háttérszínét. Ezt a blokkot úgyis olvashatod, mint egy mondatot:
          "A gombra való kattintás esetén futtasd le ezt a kódot".'
      6:
        text: Teszteljük le. Az onEventen kívüli blokkok még mindig azonnal futnak,
          így a képernyő kék színnel indul.
      7:
        text: Amikor pedig a nagy gombra kattintok, az onEvent-en belüli kód fut le,
          és a képernyőm zöldre vált.
      8:
        text: Ha az esemény után több dolgot is meg akarunk változtatni, például a
          képernyőn megjelenő szöveget, csak adjunk hozzá egy újabb kódot az onEventhez
      9:
        text: Ahhoz, hogy a programod több eseményre reagáljon, több onEvent blokkot
          kell hozzáadnod. Csak arra ügyelj, hogy ne rakd őket egymásba. Most itt
          az ideje, hogy kipróbáld magad. Jó szórakozást!
    applab_intro_sounds:
      1:
        text: A következőkben megtanulhatod, hogyan lehet képeket és hangokat hozzáadni
          az alkalmazásodhoz. Kezdjük a hanglehetőségek megismerésével.
      2:
        text: Az eszköztárban találsz egy új blokkot "playSound" (hang lejátszása)
          néven. Húzd be a munkaterületre. A lejátszandó hang kiválasztásához kattints
          a legördülő listára, majd a "Kiválasztás" gombra.
      3:
        text: Feltölthetsz egy hangfájlt a számítógépedről, vagy kereshetsz egy hangot
          a hangtárban. A hangtárban sok különböző kategória található, például hangszerek,
          háttérzene, állatok.
      4:
        text: Ha megvan a kívánt hang, kattints a "Kiválasztás" gombra. Amikor ez
          a blokk fut, a kiválasztott hangot fogod hallani.
      5:
        text: Ha képeket szeretnél hozzáadni az elemekhez, akkor egyszerűen használd
          a setProperty (tulajdonság beállítása) blokkot. Válaszd ki a kép tulajdonságát
          a második legördülő ablakban.
      6:
        text: Ezután válaszd a "Kiválasztás" opciót a harmadik legördülő menüből.
      7:
        text: Innen feltölthetsz egy képet a számítógépedről, vagy átnézheted az ikonkönyvtárban
          található hatalmas ikonkönyvtárat.
      8:
        text: Visszatérve a kódolásmódba, a "setProperty" blokk segítségével megváltoztathatod
          az ikon színét. Ha kiválasztottad, hogy milyen képet akarsz használni az
          ikonodhoz, kattints a "Futtatás" gombra, és nézd meg, hogyan néz ki.
      9:
        text: Ennyi az egész! Most már elkezdhetsz képeket és hangokat hozzáadni az
          alkalmazásaidhoz, hogy még szórakoztatóbbak és dinamikusabbak legyenek.
    applab_intro_designmode:
      1:
        text: Saját alkalmazások készítéséhez a semmiből kell elkezdened a képernyők
          és elemek tervezését. Ezt az App labor megkönnyíti a tervezésmóddal.
      2:
        text: Az alkalmazásod tetején található kapcsolóval léphetsz a tervezésmódba.
      3:
        text: Új elemeket adhatsz hozzá, húzd őket a képernyőre. A jobb alsó sarok
          húzásával különböző helyekre lehet mozgatni őket, és meg lehet változtatni
          a méretüket is.
      4:
        text: Egy elem tulajdonságának módosításához használd a jobb oldali vezérlőelemeket.
          Például ennek a gombnak a szövegét, színét és a betűméretét nagyon egyszerűen
          meg lehet változtatni.
      5:
        text: Amikor egy új elemet adsz hozzá a képernyőhöz, egy általános azonosítót
          kapsz, mint például a 1. gomb. Érdemes megváltoztatni a gombnak az azonosítóját,
          valami értelmes szöveget hozzáadni, például "jobb gomb". Így amikor belépsz
          a programba tudni fogod, hogy melyik az.
      6:
        text: Ha véletlenül hozzáadsz egy elemet az alkalmazásodhoz, csak húzd ki,
          vagy nyomd meg a törlést.
      7:
        text: Egy képernyőelem behúzásával teljesen új képernyőket adhatsz hozzá az
          alkalmazásodhoz.
      8:
        text: A fent található legördülő ablakban gyorsan tudsz előre-hátra váltani
          az általad létrehozott képernyők között.
      9:
        text: Az alkalmazásodon belül szükséged lesz egy módra, amellyel az összes
          képernyő között tudsz váltani, ezért a setScreen (képernyő beállítása) blokkot
          hozzáadtuk az eszköztárhoz. Az "onEvent" blokkon belül a "setScreen" használatával
          egy gombnyomással válthatsz képernyőt.
      10:
        text: A következő néhány szinten egyetlen projekten fogsz dolgozni. Először
          hozzáadsz egy gombot, majd egy új képernyőt, végül pedig megírod a kódot,
          hogy a gombbal az új képernyőre lehessen váltani.
    applab_intro_share:
      1:
        text: Most, hogy elsajátítottad az App labor alapjait, például a gombok, hangok,
          képek, szövegek és új képernyők hozzáadását, sokféle alkalmazást tudsz készítetni.
      2:
        text: A következő szinten megtalálod azt az alkalmazást, amelyet épp most
          építettél meg. Egy kis kreativitással átalakíthatod egy személyiségkvízzé
          a barátaid számára, egy üdvözlőkártyává, amelyet elküldhetsz a családodnak,
          vagy választhatsz magadnak egy kalandjátékot. Mindezek az alkalmazások nem
          mások, mint a már megtanult készségek kombinációi, és fogadok, hogy még
          többet is ki tudsz találni.
      3:
        text: Az elkészült alkalmazásod könnyen elküldheted a telefonodra, és megnézheted,
          hogyan néz ki. Csak kattints a "Megosztás" gombra, és add meg a telefonszámod
          itt.
      4:
        text: Kapsz egy szöveges üzenetet, amellyel azonnal megnyithatod az alkalmazásod.
      5:
        text: Az alkalmazásod linkjét megoszthatod a közösségi médiában is, vagy felteheted
          a code.org nyilvános galériájába, így mások is játszhatnak vele, és ők is
          megoszthatják másokkal.
      6:
        text: Még csak a felszínét érintetted annak, hogy mire képes az App labor.
          A teljes App labor összetettebb felhasználói interakciókat, új képernyőelemeket
          és még egy beépített adatbázist is tartalmaz, így gyorsan lehet teljes értékű
          alkalmazásokat építeni. A "code.org/applab" címen megtalálható a teljes
          eszköztár és rengeteg ötlet, ha tovább akarsz léni.
      7:
        text: Köszönjük, hogy velünk tartottál. Most pedig menj, építsd meg és oszd
          meg az első alkalmazásod, építs újabb alkalmazásokat az App labor segítségével!
    mc_2017_agent_intro:
      1:
        text: 'Stacy: Stampy, Lizzy, Preston - köszönöm, hogy velem tartottatok. Amit
          mutatni szeretnék nektek, az pont ezen a fennsíkon túl van. Szerintem imádni
          fogjátok!'
      2:
        text: Várjatok egy percet - egy lyuk van a pályán! (sikoltozás)
      3:
        text: 'Mindenki jól van? Stampy: Már látom a problémát. Nézzétek! Volt egy
          lyuk a pályán. Tényleg, Stampy? Lizzy: Talán össze kéne gyűjtenünk a blokkokat,
          hogy megjavítsuk. Preston: Legyen verseny. Aki először ér vissza a csúcsra,
          az nyer. Stacy: Oké, mindenki a rajthoz, felkészülni, vigyázz, rajt! Oké,
          én csak összeszedek egy kis terrakottát. Várjatok. Srácok, én nem tudom
          összeszedni az enyémet! Preston: Preston: Ugyanaz. Lizzy: Nekem sem megy.
          Stacy: Oké, ez nagyon furcsa. Stampy, te össze tudod szedni az enyémet?
          Stampy: Az enyémet sem! Stacy: Oké, mindenki maradjon nyugodt. Stampy: Elromlott
          a játék? Stacy: Ha igen, hogyan javítsuk meg? Lizzy: Nem tudom. Stampy:
          Tudja valaki, hogyan kell Minecraft kódot írni?'
      4:
        text: "(Húú) Preston: Az meg mi? Stampy: Még sosem láttam ilyet. Lizzy: Ez
          annyira imádnivaló! Stacy: Szelídíthető? Preston: Oké, mi folyik itt? Valakinek
          vissza kell mennie a való világba, és helyre kell hoznia ezt.  Mindenki:
          Ne azt! Stacy: Nem én... (Sóhajtás.) Oké, megyek."
      5:
        text: Óh, oké, hé, szóval most már a való világban vagyok. Megpróbálom megtalálni
          a Minecraft irodákat.
      6:
        text: De szükségem lesz a segítségetekre. Kezdjétek el a gyakorlatot, kezdjétek
          el tanulni a kódolást, és pár szint után majd utolérlek titeket, oké? Kívánjatok
          jó szerencsét! Azt hiszem, erre van. Aúú! Kaktusz! Jól vagyok!
      7:
        text: A Kódolás órája feladatok teljesítéséhez, az ügynök programozásához
          kódot kell írni. Együtt kell dolgoznod az ügynökkel, hogy el tudd hárítani
          az utadba kerülő akadályokat, hogy fel tudd venni az utadhoz szükséges tárgyakat.
          Csak az ügynök tud blokkokat elhelyezni és összetörni, és csak te tudsz
          tárgyakat gyűjteni. A képernyőd három fő részből áll. A Minecraft a bal
          odalon van.
      8:
        text: A középső terület az eszköztár a parancsokkal, és ezeket érti az ügynök.
      9:
        text: Jobb oldalon van a munkaterület. Ez az a terület, ahol egymásra rakod
          a parancsokat, és ahol megépíted az ügynököt irányító programot.
      10:
        text: Ügynök tud járni, fordulni és nyomólapokat aktiválni. Az ügynök el tud
          helyezni blokkokat, és el tud pusztítani blokkokat. Amikor elhelyez egy
          blokkot, mint például ezeket a bányacsillesíneket, akkor maga alá helyezi.
      11:
        text: Ha elfelejtenéd, hogy mit kell tenned, az egyes szintekhez tartozó utasításokat
          fent találod.
      12:
        text: Ha újra meg akarod próbálni, akkor a kék visszaállítás gombot megnyomva
          mindent visszaállíthatsz oda, ahonnan indultál. Ha pedig törölni szeretnél
          egy kódolás blokkot, húzd a munkaterületről az eszköztárba. Ne feledd, az
          ügynök mozgatásához a Futtatás gombot kell megnyomni. Oké, menj, próbáld
          ki az első néhány szintet. Sok sikert!
    mc_2017_repeat:
      1:
        text: 'Stampy: Kíváncsi vagyok, mire készül Stacy?'
      2:
        text: 'Stacy: Hűha, azt hiszem, jó helyen járok. Ez elképesztő!'
      3:
        text: Úgy érzem magam, mintha újra a Minecraftban lennék! Helló! Hogy vagy?
          Helló?
      4:
        text: 'Óh, ott egy creeper. Nem csinálsz semmit, ugye? Katie: Stacy? Stacy:
          Szia, Katie? Katie: Igen, üdvözöllek a Minecraftban!'
      5:
        text: 'Stacy: Ez elképesztő. Szóval fejlesztőként dolgozol itt minden nap,
          ugye? Katie: Igen, ez nagyon klassz. Fejlesztő vagyok a Minecraft marketing
          csapatában. Stacy: Hány kódolási nyelvet ismersz? Katie: A karrierem során
          valószínűleg több mint egy tucattal dolgoztam. Stacy: Egy tucattal? Katie:
          Igen. Stacy: Akkor, nem tudsz véletlenül valamit erről a kis gólem fickóról,
          aki ügynöknek hívja magát? Katie: Az ügynököt olyan dolgokra használjuk,
          amire Steve vagy Alex nem képes, például a láván való átkelésre. Stacy:
          Nos, én meg akarok tanulni kódolni, és ők is meg akarnak tanulni kódolni,
          szóval mi az első dolog, amit a tanulásról tudni kell?'
      6:
        text: 'Katie: Nos, meg kell tanulnod a hurkok használatát. A hurkokat a fejlesztők
          írják, és a hurkokkal olyan parancsokat adnak a számítógépnek, hogy újra
          és újra fussanak. Stacy: Értem, azt hiszem, az előttünk álló szinteken lesznek
          még ilyenek, szóval menjetek és próbáljátok ki a hurkokat.'
      7:
        text: A következő szinten egy hurok segítségével mozgathatod az ügynököt az
          útvonalon. Húzd az ismétlődő blokkot a munkaterületre, és helyezd a mozgás
          előre blokkot az ismétlés blokk belsejébe. Ez azt mondja a számítógépnek,
          hogy ugyanazt a dolgot többször egymás után csinálja meg anélkül, hogy egy
          csomó blokkot kellene a munkaterületre húzni. Az ismétlés blokkba egy számot
          beírva eldöntheted, hogy hányszor ismétlődjön.
      8:
        text: A ismétlés blokkba fordulásokat és több parancsot is be lehet írni,
          de egyelőre az ismétléssel próbáld az ügynököt néhány lépéssel előre mozgatni.
          Ne feledd, ha elakadsz egy feladvánnyal, bármikor megnyomhatod a kék Visszaállítás
          gombot, és megpróbálhatod újra.
      9:
        text: 'Ha arra gondolsz, hogy olyan menő munkád lesz, mint Katie-é, akkor
          menj, és amikor minden szintet elvégeztél kattints a Kód megjelenítése gombra.
          Ez megmutatja neked a Javascript kódot, amit Katie és a hozzá hasonlók használnak,
          amikor a Minecraftot programozzák. Katie: Igen, sok szerencsét mindenkinek!'
    mc_2017_functions:
      1:
        text: 'Preston: Nem akarok dicsekedni, de elég jó vagyok parkourban. Lizzy:
          Most aludjunk, mire felébredünk Stacy is itt lesz.'
      2:
        text: 'Stacy: Oké srácok, visszajöttem a Minecraft-irodából, és azt hiszem,
          tudom, hogyan oldjam meg a játékban felmerült problémát. Azt hiszem, tudok
          használni egy függvényt. Hadd nyissam meg ezt.'
      3:
        text: Tehát a függvény egy adott utasításkészlet, amellyel egy bizonyos feladatot
          lehet elvégezni, olyan, mint egy recept. A következő néhány szinten hozzáférünk
          majd olyan függvényekhez, amelyeket feladványok megoldásához lehet használni.
      4:
        text: Nézd meg a függvény kódját, amikor az a munkaterületen van, hogy lásd,
          mit csinál.
      5:
        text: Ezután keresd meg az eszköztárban az adott nevű blokkot, és húzd át
          az eszköztárból az "amikor fut" blokkba.
      6:
        text: Ne feledd, ugyanazt a függvényt lehet használni minden alkalommal, amikor
          ugyanazt az utasításkészletet kell lefuttatnod valamihez, például egy híd
          építéséhez. Sok szerencsét, tudom, hogy meg tudod csinálni!
    mc_2017_congratulations:
      1:
        text: 'Preston: Gratulálunk!'
      2:
        text: 'Lizzy: Gratulálunk!'
      3:
        text: 'Stampy: Gratulálunk, megcsináltad!'
      4:
        text: 'Stacy: Gratulálok, srácok, nagyon ügyesek voltatok! És most, hogy befejeztétek
          a Kódolás óráját, elkezdhettek kódolni a Minecraftban. Megismerkedtetek
          a hurkokkal, a függvényekkel és azzal, hogy mit csinál egy szoftverügynök.'
      5:
        text: Most elérkeztünk a szabad játékok szintjéhez, ahol ti vagytok a fejlesztők.
          Használjátok ki a hátralévő időt arra, hogy saját függvényeket írjatok a
          felfedezéshez, a bányászathoz és az építkezéshez.
      6:
        text: 'Az ezen a szinten írt kódot átvihetitek a Minecrafton a ti Minecraft
          világotokba: Oktatási kiadás. Csak kattintsatok a "Befejezés" gombra, és
          kövessétek az utasításokat a ti világotokban használható link megszerzéséhez,
          így folytathatjátok a kódolást az ügynökkel. Jó szórakozást, és jó munkát!'
      7:
        text: 'Stacy: És visszatértem! Oké, srácok, itt az ügynök! Hadd mutassam meg,
          mire képes. Nézzétek, már csinálja is! Mondtam neki, hogy építsen egy lépcsőt
          ezekből a terrakotta blokkokból, most már csak ezt kell használnunk, hogy
          kijussunk innen. És srácok, ez nem csak lépcsőházakról szól. Bármit mondhatok
          az ügynöknek, amit csak akarok, és ő megteszi nekem.'
      8:
        text: 'Stampy: Hogy csináltad ezt? Stacy: Igazából könnyű volt. Csak a kódot
          használtam!'
    csd_concept_how_computers_work:
      1:
        text: 'Bárhová nézel, a számítógépek megváltoztatják a világot. Lehet az asztalunkon,
          az otthonunkban, a zsebünkben, vagy bárhol másutt. De miközben a legtöbben
          naponta használjuk ezt a forradalmi technológiát, rikán kérdezzük: "Hogyan
          működnek a számítógépek?". Ebben a sorozatban megtudhatod, hogyan működnek
          a számítógépek, kezdve azzal, hogy mitől lesz a számítógép számítógép. Ezután
          megnézzük, hogyan jelenik meg az információ a számítógépen belül, apró elektromos
          jelek segítségével, amelyek elképesztő sebességgel kapcsolnak be és ki.'
      2:
        text: Ezután megismered, hogy hogyan használják a számítógépek az áramköröket
          az egyszerű matematikától kezdve a teljes virtuális világok szimulálásáig
          mindenre. Ezután megnézheted a számítógép különböző részeit nagyításban,
          ezek valójában ki- és bemenetként szolgálnak, valamint tárolják az információkat.
          Végül megnézzük, hogy mi is az a kód, és hogyan vezérli a szoftver a hardvert.
          Lehet, hogy csak kíváncsi vagy a mindennap használt eszközökre, vagy a jövő
          innovációit szeretnéd megtervezni, az első lépés a számítógépek működésének
          megértése.
    csd_concept_computer:
      1:
        text: A nevem May-Li Khoe, tervező és feltaláló vagyok. Néhány dolgot én terveztem,
          amíg az Apple-nél dolgoztam, most pedig gyermekeknek tervezek olyan termékeket,
          amelyek használatával könnyebb lesz az iskolai életük. Egyéb munkáim közé
          tartozik a tánc és a DJ, a lemezbemutató.
      2:
        text: A számítógépek mindenütt megtalálhatók! Ott vannak az emberek zsebében,
          a csuklójukon, az autókban. Lehet, hogy most is ott van a hátizsákodban.
          De mitől lesz egy számítógép számítógép? Mitől lesz egy számítógép egyáltalán
          számítógép? És egyáltalán hogyan működik?
      3:
        text: Sziasztok, Nat vagyok! Az eredeti Xbox egyik tervezője voltam. Talán
          hétéves korom óta foglalkozom számítógépekkel, most pedig a virtuális valóságon
          dolgozom. Az emberek mindig is építettek eszközöket a problémáik megoldására.
          Olyan eszközöket, mint a talicska, a kalapács, a nyomdagép vagy egy traktor
          utánfutó.
      4:
        text: Mindezek a találmányok a kézi munka elvégzésében segítettek nekünk.
          Idővel az emberek azonban azon kezdtek el gondolkodni, hogy vajon lehet-e
          olyan gépet tervezni és építeni, amely a gondolkodásban segítene nekünk,
          például az egyenletek megoldásában vagy a csillagok követésében az égen.
          Ahelyett, hogy fizikai dolgokat, például földet vagy követ mozgatnának,
          ezeket a gépeket inkább információk feldolgozására kellene megtervezni.
          Amikor a számítástechnika úttörői felfedezték a gondolkodó gép tervezésének
          a titkát, rájöttek, hogy annak négy különböző feladatot kell ellátnia.
      5:
        text: Be kell fogadni a bevitelt, tárolni kell az információkat, fel kell
          dolgozni azokat, majd ki kell adni az eredményeket. Ez most talán egyszerűen
          hangzik, de ez a négy dolog közös minden számítógépben. Ez teszi a számítógépet
          számítógéppé.
      6:
        text: A számítógépek egyszerű számológépként indultak, ami már akkoriban is
          nagyon félelmetes volt, pedig akkoriban még csak számokkal dolgoztak. Ma
          már azonban beszélgetésre és játékra is használhatjuk őket, irányíthatunk
          velük robotokat, és bármilyen őrültséget megtehetünk velük, amit csak el
          lehet képzelni. A modern számítógépek egyáltalán nem úgy néznek ki, mint
          azok a régi nehézkes gépek, de még mindig ugyanazt a négy dolgot csinálják.
      7:
        text: Először beszélni fogunk a bevitelről. A számítógépeknek meg lehet mondani,
          hogy mit csináljanak a billentyűzettel, meg lehet mondani, hogy mit csináljanak
          az egérrel, a mikrofonnal, a kamerával. Mindezek a különböző bemenetek információt
          adnak a számítógépnek, amelyet aztán a memóriában tárolnak.
      8:
        text: A számítógép processzora a memóriából veszi az információkat. Egy algoritmus
          segítségével feldolgozza vagy megváltoztatja azokat, és ez nem más, mint
          parancsok sorozata. Ezután a feldolgozott információkat visszaküldi, és
          ismét a memóriában tárolja. Ez addig folytatódik, amíg a feldolgozott információk
          készen nem állnak a kimenetre.
      9:
        text: Hogy a számítógép hogyan adja ki az információkat, az attól függ, hogy
          mire tervezték a számítógépet. A számítógép kijelzője megjeleníthet szöveget,
          fényképeket, videókat vagy interaktív játékokat -- akár a virtuális valóságot
          is! A számítógép kimenete akár egy robot vezérlésére szolgáló jeleket is
          tartalmazhat.
      10:
        text: És ki tudja, milyenek lesznek a holnap számítógépei? Remélem, hogy ti
          is részt vesztek abban, hogy milyenek legyenek a holnap számítógépei. De
          minden számítógép, függetlenül attól, hogy milyen technológiát használ,
          mindig ugyanazt a négy dolgot csinálja. Információt vesz fel, adat formájában
          tárolja, feldolgozza, majd az eredményeket kiadja.
    csd_concept_binary_data:
      1:
        text: Sziasztok! A nevem Limor Fried, mérnök vagyok itt az Adafruit Industries-nél.
          Itt dolgozom, mérnöki munkát végzek és tervezek, áramköröket tervezek divathoz,
          zenéhez és technológiához.
      2:
        text: Én Federico Gomez Suarez vagyok, és a Microsoft Hack for Good-nél dolgozom
          szoftverfejlesztőként. Én azt vizsgálom, hogy a technológia segítségével
          hogyan lehet megoldani korunk néhány nagy társadalmi problémáját.
      3:
        text: Bizonyára tudjátok, hogy a számítógépek egyesekkel és nullákkal dolgoznak.
          De manapság szinte már senki sem foglalkozik közvetlenül ezekkel az egyesekkel
          és nullákkal. Pedig az egyesek és nullák nagy szerepet játszanak abban,
          hogy a számítógépek belülről hogyan működnek.
      4:
        text: A számítógépek belsejében elektromos vezetékek és áramkörök vannak,
          amelyek a számítógépben lévő információkat továbbítják. Hogyan tárolják
          és ábrázolják az információt az elektromosság segítségével?
      5:
        text: Nos, ha van egyetlen vezeték, amelyen áram folyik keresztül, akkor a
          jel vagy be van kapcsolva, vagy ki van kapcsolva. Ez nem hagy sok választási
          lehetőséget, de ez egy nagyon fontos kezdet. Egyetlen vezetékkel csak két
          lehetőséget lehet jelölni, igen vagy nem, igaz vagy hamis, egy vagy nulla,
          vagy bármi más, de csak kettő. Egyetlen vezetéknek ezt a ki/be állapotát
          bitnek nevezzük, és ez a legkisebb információ, amit egy számítógép tárolni
          tud.
      6:
        text: 'Ha több vezetéket használunk, akkor több bitet kapunk: több egyest
          és több nullát. Több bit segítségével összetettebb információt tudunk ábrázolni.
          De hogy ezt megértsük, meg kell ismernünk valamit, amit bináris számrendszernek
          hívnak.'
      7:
        text: 'A tízes számrendszerben tíz számjegy van nullától kilencig, és mindannyian
          így tanultunk meg számolni. A bináris számrendszerben csak két számjegyünk
          van: nulla és egy. Ezzel a két számjeggyel bármilyen számig elszámolhatunk.'
      8:
        text: A következőképpen működik. Az általunk megszokott decimális számrendszerben
          a szám minden egyes pozíciója más-más értékkel rendelkezik. Van az 1-es
          pozíció, a 10-es pozíció, a 100-as pozíció, és így tovább. Például a 9-es
          a 100-as pozícióban 900-as értéket jelent. A bináris számrendszerben minden
          pozíciónak egy értéke van. De ahelyett, hogy minden alkalommal 10-zel szoroznánk,
          2-vel szorzunk. Tehát van az 1-es pozíció, a 2-es pozíció, a 4-es pozíció,
          a 8-as pozíció, és így tovább. Például a 9-es szám binárisan 1001. Az érték
          kiszámításához összeadjuk az 1-szer 8-at, plusz 0-szor 4-et, plusz 0-szor
          2-t, plusz 1-szer 1-et. Már senki sem végzi ezt a számítást, mert a számítógépek
          megteszik helyettünk. A fontos az, hogy a számokat csak egyesekkel és nullákkal
          lehet kifejezni, vagy egy csomó vezetékkel, amelyek vagy be vannak kapcsolva
          vagy ki vannak kapcsolva. Minél több vezetéket használunk, annál nagyobb
          számokat tudunk tárolni. Nyolc vezetékkel 0 és 255 közötti számokat lehet
          tárolni. Ez 8 egyes. Mindössze 32 vezetékkel 0-tól több mint 4 milliárdig
          lehet tárolni a számokat. A bináris számrendszer használatával bármilyen
          számot meg lehet adni.
      9:
        text: De mi a helyzet a más típusú információkkal? Például a szövegekkel,
          a képekkel vagy a hangokkal? Kiderült, hogy ezek is ábrázolhatók számokkal.
          Gondoljunk csak az ábécé betűire. Minden betűhöz rendelhetünk egy számot.
          Az A lehetne 1, a B lehetne 2, és így tovább. Ezután bármely szót vagy bekezdést
          számok sorozataként lehet megadni. És mint láttuk, ezek a számok ki- vagy
          bekapcsolt elektromos jelek formájában tárolhatók. Minden szó amit egy weboldalon
          vagy a telefonodon látsz, egy ilyen rendszerrel van ábrázolva.
      10:
        text: Most pedig vegyük sorra a fényképeket, a videókat és a képernyőn látható
          grafikákat.
      11:
        text: Ezek a képek mind apró pontokból, úgynevezett pixelekből állnak, és
          minden egyes pixelnek van egy színe. Az egyes színeket számokkal lehet jelölni.
          Ha figyelembe vesszük, hogy egy tipikus kép több millió ilyen pixelből áll,
          és egy tipikus videó másodpercenként 30 képet mutat, akkor itt már rengeteg
          adatról beszélünk.
      12:
        text: Minden hang alapvetően a levegő rezgéseinek sorozata. A rezgések grafikusan
          hullámformaként ábrázolhatók. Ennek a hullámformának bármely pontja ábrázolható
          egy számmal. És így minden hang számok sorozatára bontható. Ha jobb minőségű
          hangot szeretnénk, akkor 32 bites hangot vagy 8 bites hangot választunk.
          A nagyobb bit nagyobb számtartományt jelent.
      13:
        text: Amikor számítógépet használsz kódoláshoz vagy a saját alkalmazásod elkészítésére,
          nem közvetlenül foglalkozol ezekkel az egyesekkel és nullákkal. A képekkel,
          a hanggal vagy a videóval foglalkozol. Ha tehát meg akarod érteni, hogyan
          működnek a számítógépek belülről, minden ezeken az egyszerű egyeseken és
          nullákon, és a mögöttük lévő áramkörökben lévő elektromos jeleken múlik.
    csd_concept_circuits_logic:
      1:
        text: Az egyik legklasszabb dolog, amit az áramkörökkel kapcsolatban felfedeztem,
          hogy egy áramkör maga a művészet. Például ha van egy kreatív ötletem, akkor
          azt a kreatív ötletet áramkörök segítségével tudom megvalósítani. Tehát,
          ha vannak ötleteid, akkor a technológia segítségével ezeket az ötleteket
          életre tudod kelteni.
      2:
        text: Egy számítógép minden bemenete vagy kimenete gyakorlatilag egyfajta
          információ, amelyet be- vagy kikapcsolt elektromos jelekkel vagy egyesekkel
          és nullákkal lehet ábrázolni.
      3:
        text: Ahhoz, hogy a számítógép feldolgozza a bemenetként érkező információkat,
          és létrehozza a kimeneti információkat, a számítógépnek módosítania és kombinálnia
          kell a bemeneti jeleket. Ehhez a számítógép több millió apró elektronikus
          alkatrészt használ, amelyek áramköröket képeznek.
      4:
        text: Nézzük meg közelebbről, hogyan módosítják és dolgozzák fel az áramkörök
          az egyesekben és nullákban jelölt információkat. Ez egy hihetetlenül egyszerű
          áramkör. Fog egy elektromos jelet, ki vagy be, és megfordítja azt. Tehát
          ha a jel, amit adsz neki, 1, akkor az áramkör 0-t ad, és ha 0-t adsz az
          áramkörnek, akkor 1-t. A bejövő jel nem azonos a kijövővel, ezért ezt az
          áramkört NEM-nek nevezzük.
      5:
        text: A bonyolultabb áramkörök több jelet is képesek kombinálni, és más eredményt
          adni. Ebben a példában egy áramkör két elektromos jelet vesz fel, most mindkettő
          lehet 1 vagy 0. Ha a bejövő jelek bármelyike 0, akkor az eredmény szintén
          0. Ez az áramkör csak akkor ad 1-et, ha az első és a második jel is 1, és
          így az áramkört ÉS-nek nevezzük.
      6:
        text: Sok ilyen kis áramkör létezik, és ezek egyszerű logikai számításokat
          végeznek. Ezeket az áramköröket összekapcsolva összetettebb áramköröket
          hozhatunk létre, amelyek bonyolultabb számításokat is el tudnak végezni.
      7:
        text: Készíthetünk például egy olyan áramkört, amely 2 bitet ad össze, amit
          összeadónak nevezünk. Ez az áramkör 2 különálló bitet vesz fel, amelyek
          mindegyike 1 vagy 0, összeadja őket, és kiszámítja az összeget. Az összeg
          lehet 0 plusz 0 egyenlő 0, 0 plusz 1 egyenlő 1, vagy 1 plusz 1 egyenlő 2.
          Két vezetékre van szükség, mert az összeg megjelenítéséhez akár két bináris
          számjegyre is szükség lehet. Ha már van egy összeadó áramköröd két bit információ
          összeadására, akkor ezekből az összeadó áramkörökből többet is egymás mellé
          rakhatsz, hogy sokkal nagyobb számokat lehessen összeadni.
      8:
        text: Itt látható például az, ahogy egy 8 bites összeadó összeadja a 25 és
          50 számokat. Mindegyik számot 8 bit segítségével ábrázoljuk, ami 16 különböző
          elektromos jelet eredményez, ezek bekerülnek az áramkörbe. A 8 bites összeadó
          áramkörben sok kis összeadó van, amelyek közösen számítják ki az összeget.
      9:
        text: Más elektromos áramkörök más egyszerű számításokat, például kivonást
          vagy szorzást is el tudnak végezni. Valójában a számítógép által végzett
          összes információfeldolgozás csak sok-sok kisebb egyszerű műveletből áll.
          A számítógép által végzett minden egyes művelet olyan egyszerű, hogy akár
          egy ember is elvégezhetné, de ezek az áramkörök a számítógépek belsejében
          sokkal gyorsabbak.
      10:
        text: Régebben ezek az áramkörök nagyok és nehézkesek voltak, és egy 8 bites
          összeadó akár akkora is lehetett, mint egy hűtőszekrény, és percekig tartott
          egy egyszerű számítás elvégzése. Ma a számítógépes áramkörök mikroszkopikus
          méretűek, és sokkal gyorsabbak. Miért gyorsabbak a kisebb számítógépek?
          Nos, mert minél kisebb az áramkör, annál kisebb távolságot kell megtennie
          az elektromos jelnek. Az elektromosság nagyjából a fény sebességével mozog,
          ezért a modern áramkörök másodpercenként több milliárd számítást képesek
          elvégezni.
      11:
        text: Tehát akár valamilyen játékot játszunk, vagy videót veszünk fel, vagy
          a kozmoszt kutatjuk, minden, amihez technológia kell, rengeteg információ
          rendkívül gyors feldolgozását igényli. E mögött a bonyolultság mögött csak
          sok aprócska áramkör van, amelyek a bináris jeleket weboldalakká, videókká,
          zenévé és játékokká alakítják. Ezek az áramkörök még a DNS dekódolásában
          is segítenek, így diagnosztizálni és gyógyítani tudunk különböző betegségeket.
          Szóval, ti mit szeretnétek csinálni ezekkel az áramkörökkel?
    csd_concept_memory_cpu_input_output:
      1:
        text: Szia, a nevem Madison Maxey. Van egy Loomia nevű cégem, és mi az intelligens
          ruhákhoz és intelligens puha termékekhez való intelligens szövetek gyártására
          összpontosítunk. A textíliák terén határ a csillagos ég.
      2:
        text: A nevem Danielle Applestone, és az Othermachine Company vezérigazgatója
          vagyok. Mi egy asztali marógépet építünk. A marógép egy forgó vágószerszámot
          használva átmegy az anyagon, és létrehoz egy 3D-s tárgyat.
      3:
        text: Részletesebben megvizsgálva minden számítógép ugyanazt a négy alapvető
          műveletet végzi. Információkat visznek be, tárolják és feldolgozzák azokat,
          majd információkat adnak ki. A feladatokat a számítógép különböző részei
          végzik.
      4:
        text: Vannak bemeneti eszközök, amelyek a külvilágból veszik a bemenetet,
          és bináris információkká alakítják azt. Van memória, amely tárolja ezeket
          az információkat. Van egy központi feldolgozó egység, a processzor vagy
          röviden CPU, ahol az összes számítást végzik. És végül vannak kimeneti eszközök,
          amelyek az információkat átveszik és fizikai kimenetté alakítják.
      5:
        text: Először beszéljünk a bemenetről. A számítógépek számos különböző típusú
          bemenetet fogadhatnak el, például a számítógép billentyűzetét, a telefon
          érintőképernyőjét, a kamerát, a mikrofont vagy a GPS-t. De még egy autó,
          egy termosztát vagy egy drón érzékelői is különböző bemeneti eszköznek tekinthetők.
      6:
        text: Nézzünk most egy egyszerű példát arra, hogy a bemenet hogyan halad át
          a számítógépen, és hogyan válik kimenetté. Amikor megnyomsz egy billentyűt
          a billentyűzeten - mondjuk a B betűt. A billentyűzet a betűt számmá alakítja.
          Ezt a számot bináris formában, egyesek és nullák formájában küldi el a számítógépbe.
      7:
        text: Ebből a számból kiindulva a processzor kiszámítja, hogyan kell a B betűt
          pixelenként megjeleníteni. A processzor lépésről lépésre utasításokat kér
          a memóriából, amelyek megmondják, hogyan rajzolja meg a B betűt. A processzor
          lefuttatja ezeket az utasításokat, és az eredményeket pixelként tárolja
          a memóriában.
      8:
        text: Végül ezeket a pixelinformációkat bináris formában elküldi a képernyőre.
          A képernyő egy kimeneti eszköz, amely a bináris jeleket apró fényekké és
          színekké alakítja át, amelyekből az általad látott kép áll.
      9:
        text: Mindez olyan gyorsan történik, csak egy pillanatnak tűnik, de minden
          egyes betű megjelenítéséhez a számítógép több ezer utasítást futtat le,
          attól a pillanattól kezdve, hogy az ujjaddal megnyomtad a billentyűt.
      10:
        text: Ebben a példában a kimeneti eszköz a képernyő volt, de számos különböző
          típusú kimenet létezik, amelyek a számítógép bináris jelét átveszik, és
          a fizikai világban csinálnak valamit. Például egy hangszóró hangot ad ki,
          egy 3D nyomtató pedig kinyomtat egy tárgyat. A kimeneti eszközök fizikai
          mozgást is vezérelhetnek, például egy robotkart, egy autó motorját vagy
          a cégem által gyártott marógép vágószerszámát. Az új típusú bemenetek és
          kimenetek lehetővé teszik, hogy a számítógépek teljesen új módon lépjenek
          kapcsolatba a külvilággal. Ezt segítették a memória és a processzor sebességének
          és méretének a változásai.
      11:
        text: Minél bonyolultabb egy feladat, és minél több a be- vagy kimeneti információ,
          annál nagyobb feldolgozási teljesítményre és memóriára van szüksége a számítógépnek.
          Egy képernyőn betűket gépelni egyszerű lehet, de bonyolult 3D-s grafikák
          készítéséhez vagy egy nagyfelbontású film rögzítéséhez a modern számítógépek
          gyakran több processzorral rendelkeznek, hogy az összes információt fel
          tudják dolgozni, és sok gigabájt memóriára van szükség az információk tárolásához.
      12:
        text: 'Nem számít, hogy mit akarsz csinálni a számítógéppel, minden egyes
          művelet a következőkről szól: információk bevitele a fizikai világból, információk
          tárolása és feldolgozása, és valamilyen kimenet visszajuttatása a fizikai
          világba.'
    csd_concept_hardware_software:
      1:
        text: Üdv, a nevem Erica Gomez, és vezető mérnök vagyok az Amazon.com-nál.
          Az egyik legjobb dolog abban, hogy technológiai területen dolgozom, és különösen,
          hogy az Amazonnál, hogy minden nap magammal vihetem a kutyámat a munkahelyemre.
          Az én feladatom az, hogy a szoftverek kijussanak az ajtón, az ő feladata
          pedig az, hogy az asztalom alatt szundikáljon és nagyon hangosan horkoljon.
      2:
        text: 'A nevem Jerome Holman, az Xbox csapat programmenedzsere vagyok, és
          az én munkám nagyon szórakoztató: Alapvetően a hardvert és a szoftvert kell
          összehoznom, hogy az Xboxon minden olyan játékot megkaphassatok, amit szeretnétek.'
      3:
        text: Ha belenéztek egy számítástechnikai eszköz belsejébe, egy csomó áramkört,
          chipet, vezetéket, hangszórót, dugót és mindenféle más dolgot láttok. Ez
          a hardver.
      4:
        text: Amit azonban nem láttok, az a szoftver. A szoftver az ezen a gépen futó
          összes számítógépes program és kód. A szoftver lehet bármi, az alkalmazásoktól
          és játékoktól kezdve a weboldalakon át az adattudományi szoftverekig minden,
          ez utóbbit használjuk mi a munkatársaimmal az Amazonnál, hogy megértsük
          a vásárlók viselkedését.
      5:
        text: De hogyan működik együtt a hardver és a szoftver? Kezdjük a számítógép
          központi feldolgozó egységének, a processzornak a vizsgálatával.
      6:
        text: A processzor a fő chip, amely a számítógép összes többi részét vezérli.
          A processzornak különböző feladatokat kell ellátnia, ezért belül kisebb,
          egyszerűbb részekből áll, amelyek meghatározott feladatokat látnak el. A
          processzor egyszerű matematikai és logikai feladatokat ellátó áramkörökkel
          rendelkezik. Más áramkörei információkat küldenek és fogadnak a számítógép
          különböző részeihez és részeitől.
      7:
        text: A processzor igazi varázsa abban rejlik, hogyan tudja, hogy melyik áramkört
          mikor és hogyan kell használni. A processzor egyszerű parancsokat kap, amelyek
          megmondják neki, hogy melyik áramkört használja egy adott feladat elvégzéséhez.
          Például egy "összeadás" parancs azt mondja a processzornak, hogy a külső
          áramkört használja egy új szám kiszámításához. A "tárolás" parancs pedig
          azt mondja a processzornak, hogy egy másik áramkört használjon az eredménynek
          a memóriába való elmentéséhez.
      8:
        text: Akárcsak a számok, ezek az egyszerű parancsok is ábrázolható bináris
          egyesekkel és nullákkal vagy ki- és bekapcsolt elektromos jelekkel. A bináris
          parancsok a memóriában tárolódnak, a processzor pedig egymás után sorban
          előhívja és végrehajtja őket. Ez a parancssorozat tulajdonképpen egy nagyon
          egyszerű számítógépes program.
      9:
        text: A bináris kód a szoftver legalapvetőbb formája, ez vezérli a számítógép
          összes hardverét. Manapság már senki sem ír bináris szoftvereket. Az örökké
          tartana!
      10:
        text: Manapság az általunk írt szoftverek inkább így néznek ki (Python), vagy
          így (Ruby), vagy akár így (Blockly). A programozási nyelvekkel, mint ez
          is, parancsokat lehet írni, és ez a nyelv nagyon hasonlít az angolra.
      11:
        text: Ahhoz, hogy egy téglalapot rajzoljunk a képernyőre, csak egyetlen parancsra
          van szükségünk. Ez a magas szintű parancs több száz vagy ezer egyszerűbb
          bináris paranccsá alakul át, amelyeket a processzor megért. A szoftver mondja
          meg a processzornak, hogy mit tegyen, de amikor zenét hallgatsz, böngészel
          a weben és csevegsz egy barátoddal, a számítógépeden egyszerre több szoftver
          is fut.
      12:
        text: Hogyan kerülnek ezek a programok a számítógépre, és hogyan tudja a processzor
          egyszerre futtatni őket? Hogy ezt kiderítsük, meg kell vizsgálnunk az operációs
          rendszert.
      13:
        text: A számítógép operációs rendszere az a fő program, amely azt kezeli,
          hogy a szoftverek hogyan használják a számítógép hardverét. Én például segítettem
          létrehozni a Windows operációs rendszert, amely ma a legtöbb személyi számítógépen
          fut.
      14:
        text: Az operációs rendszer egy olyan speciális képességekkel rendelkező program,
          amely képes a számítógépen lévő többi szoftver irányítására. Lehetővé teszi
          új programok telepítését azáltal, hogy betölti őket a számítógép memóriájába.
          Az operációs rendszer dönti el, hogy a központi processzor mikor futtathat
          egy programot, és hogy az adott program hozzáférhet-e a számítógép bemeneti
          és kimeneti eszközeihez. És amikor azt hiszed, hogy a számítógépeden egyszerre
          több program fut, a valóságban az operációs rendszer az, amely gyorsan váltogat
          a programok között, amelyek osztoznak a processzoron egy töredék másodpercig.
      15:
        text: Minden számítógép belsejében van egy operációs rendszert kezelő szoftver,
          amely a számítógép hardverét vezérli.
      16:
        text: A szoftver egyszerű bináris kódból álló parancsok sorozata, és ez a
          bináris kód nem más, mint több milliárd apró áramkörön keresztül áramló
          elektromos jel.
      17:
        text: A számítógépek mindenféle elképesztő dologra képesek. De az egyetlen
          dolog, ami a számítógépet okossá vagy hasznossá teszi, az te magad vagy.
          Amikor megtanulsz kódolni, te határozod meg a megoldandó problémát, és te
          írod meg a szoftvert, amely ezeket az ötleteket megvalósítja.
    hoc_dance_warmup:
      1:
        text: 'Kódolás Órája | Táncos buli: Bemelegítés'
      2:
        text: Szia! Az én nevem Miral Kotb, táncos, szoftverfejlesztő, és az iLuminate
          megalkotója vagyok.
      3:
        text: A számítógép-tudomány a kreativitáshoz sokféleképpen kapcsolódik. Ezernyi
          módon, tényleg. Úgy értem, ha képes vagy szoftvert írni, az ötleteidet bárhogy
          megvalósíthatod. Én világító ruhákkal dolgozom. Rengeteg dolgot megtehetsz,
          ha megvannak az eszközeid a szoftveríráshoz, és a lehetőségek végtelenek.
      4:
        text: A következő órában úgy ismerkedhetsz meg a számítógép-tudománnyal, hogy
          beprogramozod a saját táncos bulidat! Összeállítottuk a zenét néhány slágerrel,
          és egy csapat kiváló táncossal játszhatsz majd.
      5:
        text: Kód-blokkokat fogsz használni a különböző táncosok kiválasztásához,
          a mozdulatok megváltoztatásához, hogy reagáljanak a zenére és hogy interaktív
          legyen a tánc.
      6:
        text: Látni fogod, hogy a képernyő három részre oszlik. Bal oldalt játszódnak
          az események. Itt fognak megjelenni a táncosaid.
      7:
        text: Középen van az eszköztárad. Az újabb kód-blokkok itt fognak megjelenni,
          ahogy előrehaladsz a feladványokban.
      8:
        text: A jobb oldali rész a munkaterület. Az eszköztárból áthúzhatsz blokkokat
          a munkaterületre, hogy felépítsd belőlük a programod.
      9:
        text: A feladat leírása minden feladványnál itt a képernyő felső részén jelenik
          meg. Ha szükséged van segítségre, kattints a villanykörtére.
      10:
        text: Kezdetnek készítsünk egy új táncost ezzel a piros blokkal. Húzzuk át
          az eszköztárból a narancssárga "beállítás" alá. Ez a táncos egy macska,
          és a neve "first_dancer". Bármire megváltoztathatod a nevét ide kattintva.
      11:
        text: Azt is megváltoztathatod, hol jelenjen meg a táncos a játéktereden.
      12:
        text: A játéktér felett van egy menü, ahol zenét választhatsz. Rengeteg közül
          választhatsz, és reméljük jó szórakozás lesz, amíg megtalálod a kedvenceidet.
          A játéktér alatt van a futtatás gomb. Ha ezt megnyomod, akkor megjelennek
          a programod táncosai a játéktéren és felhangzik a zene.
      13:
        text: Próbáld ki! Ha elakadsz, semmi gond! Csak pattanj fel és mozdulj rá,
          és mielőtt felocsúdnál, már el is kezdted a táncos bulit! Szóval, mit fogsz
          alkotni?
    hoc_dance_events:
      1:
        text: 'Kódolás Órája | Táncos buli: Események'
      2:
        text: A nevem Aloe Blacc. Énekes, zeneszerző és előadó vagyok. Szerintem nagyon
          fontos számítógép-tudományt tanulni, mert a számítógép-tudomány a jövő,
          és fontos tudni irányítani a technológiát ami úgy meghatározza az életünket.
      3:
        text: Hogy a különböző modulatok a zenével összhangban történjenek, használhatunk
          egy dolgot, amit úgy hívnak, hogy "esemény". Az esemény megmondja a programodnak,
          hogy figyeljen oda valamilyen történésre és reagáljon rá.
      4:
        text: Az eseményre példa az egérkattintás, egy nyíl billentyű vagy az érintőképernyő
          megérintése. Az esemény, amit most használni fogunk, a zene változásaira
          fog figyelni. A változás arra készteti majd a táncost, hogy egy új mozdulatba
          kezdjen.
      5:
        text: A profi táncosok úgy gyakorolják a koreográfiát, hogy számolják a zene
          ütemét.
      6:
        text: A zenében az ütem valahány ütést jelent. A a népszerű dalokban az ütem
          általában négy ütés (negyed) hosszú.
      7:
        text: Hogy a táncosok elszabaduljanak, egy zöld esemény blokkra lesz szükséged.
          Az esemény blokkra az van írva, "4 ütem után".
      8:
        text: Ha áthúzod a lila "csináld örökké" blokkot, választhatsz a táncosodnak
          egy mozdulatot, amit ismételni fog. Mivel a "4 ütem után" blokk alá kerül,
          így a táncosod 4 ütem után fog bekapcsolódni a táncba.
      9:
        text: Figyeld a képernyő felső részén az ütem számlálót.
      10:
        text: Figyeld és hallgasd az eseményt, ami ki fogja váltani a táncos kódot.
          És a megfelelő pillanatban a táncos elkezd majd táncolni.
    hoc_dance_properties:
      1:
        text: 'Kódolás Órája | Táncos buli: Tulajdonságok'
      2:
        text: A nevem Maria, a washingtoni egyetem hallgatója vagyok és az Amazon
          Jövő Mérnöke.
      3:
        text: Szeretem a számítógép-tudományt, mert van benne problémamegoldás, kritikus
          gondolkodás és sok órányi munka után végül valami igazán menő és értékes
          jön létre.
      4:
        text: Eddig különböző táncosokkal tudtál játszani és beprogramoztad őket,
          hogy különböző mozdulatokat csináljanak. De hogyan működnek valójában ezek
          a mozdulatok?
      5:
        text: Minden mozdulat képek sorozatából áll, amelyeket frame-eknek nevezünk.
          Minden frame egy kicsit különbözik az előtte lévőtől. Amikor a program fut,
          a számítógép egymás után mutatja a frame-eket. Olyan gyorsan követik egymást,
          hogy úgy tűnik, mintha a táncos mozogna. Ez a titka minden animációnak.
      6:
        text: Nem csak a táncos mozgását, de a tulajdonságait is meg lehet változtatni.
          A tulajdonságok olyan dolgokat írnak le, mint a táncos helye a képernyőn,
          a táncos mérete vagy színe.
      7:
        text: A táncos tulajdonságainak megváltoztatásához a "beállítása" blokkokat
          használhatod. Lasználd először a beállítása blokkot, hogy a táncos kisebb
          legyen. Először húzd át a beállítás blokkot a programodba. Aztán válaszd
          ki azt a táncost, akit át szeretnél méretezni és gépeld be, mekkorának jelenjen
          meg.
      8:
        text: A legnagyobb méret 100. Ha kisebb számot választasz, a táncos kisebb
          lesz. Minél kisebb a táncos, annál távolabbinak tűnik. Ez egy szuper lehetőség
          arra, hogy hátsó táncosokat alkalmazz.
      9:
        text: A beállítás blokkal megváltoztathatod a táncos méreteit, irányát, helyét
          és színét. Próbálgathatod ezeket a tulajdonságokat, és különböző változásokat
          kapcsolhatsz a dal egyes részeihez.
      10:
        text: Ne feledd, hogy csak már létező táncosok tulajdonságait változtathatod
          meg. Győződj meg róla, hogy a beállítás blokk az új táncos készítése blokk
          után jön. Kísérletezz bátran, legyél kreatív, érezd jól magad.
    hoc_dance_congrats:
      1:
        text: 'Kódolás Órája | Táncos buli: Induljon a party!'
      2:
        text: Gratulálunk! Elsajátítottad a számítógép-tudomány alapjait. Most már
          használhatod ezeket a blokkokat, hogy a saját táncos bulidat létrehozd,
          és megoszd a barátaiddal.
      3:
        text: Ha benézel az eszköztárba, olyan új blokkokat fogsz benne találni, amik
          korábban nem voltak ott. Például használhatod az elrendezés blokkot, hogy
          a táncosok különböző alakzatokat vegyenek fel a képernyőn.
      4:
        text: Fedezd fel a lehetőségeket és próbálj kísérletezni az új blokkokkal
          és funkciókkal. Készítesz egy teljes koreográfiát a kedvenc dalodra?
      5:
        text: Vagy egy offline tánc a barátaiddal?
      6:
        text: Vagy valami más együtt?
      7:
        text: A lecke végén megoszthatod az alkotásodat a barátaiddal. Tornáztasd
          a képzelőerőd és érezd jól magad!
    mc_2018_intro:
      1:
        text: Helló! Épp időben jöttél. Üdvözlünk a Voyage Aquaticon. Éppen egy kutatásra
          készülök, rejtett víz alatti kincseket keresek, és nagyon örülök a segítségednek.
          Ki tudja, mire bukkanunk majd ezeken a titokzatos vízi utakon? Úgy terveztük,
          hogy valahol ezen a dokkon találkozunk az első vezetőnkkel.
      2:
        text: Üdvözlet, kalandorok! A Voyage Aquatic teljesítéséhez egy sor feladványt
          kell megoldanotok a kódok segítségével. Ez így működik. A képernyőd három
          fő részre van osztva.
      3:
        text: A bal oldalon a Minecraft világa látható.
      4:
        text: A középső terület az eszköztárad, ahol kódolási parancsok találhatók.
      5:
        text: A jobb oldali nagy terület pedig a munkaterületed. Ez az a hely, ahol
          parancsokat lehet egymásra halmozni, amelyekkel meg tudod építeni a programodat,
          és irányítani tudod a mozgásokat.
      6:
        text: Az egyes szintekhez tartozó utasítások az oldal tetején találhatók.
          A pluszjelre kattintva lehet váltani a hosszú és a rövid utasítások között.
      7:
        text: Próbáld ki, húzz blokkokat az eszköztárból a munkaterületre, halmozd
          őket egymásra, majd a parancsok végrehajtásához kattints a Futtatás gombra.
      8:
        text: Lehet, hogy többször is próbálkoznod kell, mire sikerül. Néhány feladványnak
          több megoldása is lehet, ezért kísérletezz, nézd meg, mi működik.
      9:
        text: Ha újra akarod próbálni, kattints a Visszaállítás gombra, és visszatérsz
          oda, ahonnan elindultál.
      10:
        text: Ha törölni szeretnél egy parancsot, csak húzd vissza a blokkot a munkaterületről
          az eszköztárba. Ne feledd, kattints a Futtatás gombra, és figyeld meg, hogyan
          néz ki a kód működés közben.
      11:
        text: Oké, elég a szórakozásból, kalandor barátom. Kezdjünk el kódolni, keressük
          meg a víz alatti kincseket.
    MC_2018_loops:
      1:
        text: Remek! Fogtunk egy tőkehalat! Tudtad, hogy ha tőkehalat adsz egy delfinnek,
          a delfin el fog vezetni egy kincseket rejtő hajóroncshoz? Biztosan közelebb
          jutottunk. A következő feladványok biztosan nehezebbek lesznek, úgyhogy
          jobb, ha megtanulunk még néhány dolgot a kódolásról. Ez meg mi? Egy barlang?
      2:
        text: Üdv, kalandorok! A nevem Squid. Észrevettem, hogy a legutóbbi feladványoknál
          ugyanazt a parancssort használtátok újra és újra. Kicsit fárasztó lehetett.
          Gondoltatok már arra, hogy bárcsak lenne egy olyan módszer, amivel fáradtság
          és unalom nélkül újra és újra megtehetnétek valamit, mint például a mosogatás
          vagy a fogmosás? Az jó lenne.
      3:
        text: A számítógépek nagyon jók abban, hogy a kódolási hurkok segítségével
          ugyanazt a dolgot újra és újra elvégezzék. Ha azt akarod, hogy a programod
          többször is elvégezze ugyanazt az utasítást, használj hurkokat!
      4:
        text: A hurokblokk olyan utasításokat tartalmaz, amelyek a cél eléréséig ismétlődnek.
          Ha a programod egyszer elindít egy "Ismétlés a cél eléréséig" hurkot, akkor
          a benne lévő utasításokat addig ismétli, amíg el nem éri a célt.
      5:
        text: Próbáld ki te magad is! Helyezd el az ismétlendő utasításokat a " Ismétlés
          a cél eléréséig" blokkban, kattints a Futtatás gombra, és nézd meg, hogy
          megy!
      6:
        text: Nos, ez egy kicsit fura volt. Ki gondolta volna, hogy a tintahalak tudnak
          kódolni? Azt sem gondoltam volna, hogy vannak ujjaik. Szóval most már tudunk
          a hurkokról. Használjuk őket, hogy még több kincset zsákmányoljunk.
    mc_2018_conditionals:
      1:
        text: Hűha! Újabb három feladvány megoldva! És fogtunk... egy lazacot. Nem
          olyan izgalmas, mintha aranyat tallálnánk, de fogadjuk el, ami van. És van
          olyan érzésem, hogy az a nautilus kagyló még jól fog jönni. Kíváncsi vagyok,
          mit rejtenek ezek a romok. Talán egy újabb tipp! Nézzünk be.
      2:
        text: A nevem Netty, és üdvözöllek a romjaim között. Döntéseinket mindig a
          körülmények függvényében hozzuk meg. Ha esőre áll, akkor fogunk egy esernyőt.
          Ha éhesek vagyunk, akkor bekapunk egy falatot.
      3:
        text: Ha látunk egy creepert, akkor az ellenkező irányba futunk. A számítógépek
          is ilyen típusú döntéseket hoznak. Kódok segítségével képesek a körülményekre
          reagálni.
      4:
        text: Ha ilyen választ szeretnél programozni a kódparancsok segítségével,
          válassz egy if útvonal blokkot.
      5:
        text: A parancs létrehozásához válaszd a legördülő menüpontot.
      6:
        text: Ha például a "ha útvonal jobbra" parancsot adod, és a feltételen belül
          a jobbra fordulást helyezed el, akkor amikor Steve egy jobbra kanyarodó
          úthoz ér, mindig jobbra fog fordulni. Ha nincs jobbra nyíló út, akkor nem
          fordul jobbra. Ezek a feltételes ha parancsok akkor hasznosak, amikor a
          kódot előre nem kiszámítható helyzetekben futtatod, például víz alatti barlangokban
          lévő titokzatos romoknál.
      7:
        text: Próbáld ki az if blokkok használatát, és próbáld ki a kódod.
      8:
        text: Hűha! Netty romjai fantasztikusak voltak. Tényleg ki kell költöznöm
          a szüleim házából. Szóval, mit gondolsz? Megfelelőek a feltételek ahhoz,
          hogy befejezzük az utolsó feladványokat? Próbáljuk meg.
    mc_2018_closing:
      1:
        text: 'Amy Lee33: Gratulálunk! Megcsináltad!'
      2:
        text: 'Squid: Gratulálunk!'
      3:
        text: 'Netty: Megcsináltad! Gratulálunk!'
      4:
        text: 'Tomohawk: Gratulálunk!'
      5:
        text: Micsoda nagyszerű nap! A sok kincskeresés közben építettünk egy Minecraft-járatot,
          találtunk nautilus kagylókat és kincsesládákat. Egyszerűen imádom a prismarine
          színét. Azt is megtanultuk, hogyan kell kódolni a hurkokkal és a feltételekkel.
      6:
        text: Ha már a kódolásnál tartunk, van még egy szint ebben a keresésben. Készen
          álltok, kalandorok?
      7:
        text: Ez egy szabadon játszható szint, ahol bevethetitek a kódolási tudásotokat,
          és építhettek valami hihetetlen dolgot.
      8:
        text: Hmmm... egy hely, ahová a kincseteket lehet elrejteni, egy víz alatti
          emlékmű, egy korallvár? Ahhh... annyi ötlet. Próbáljátok ki a hurkokat az
          ismétlődő akciók létrehozásához, és a feltételes függvényeket, hogy felkészüljetek
          a kiszámíthatatlan forgatókönyvekre.
      9:
        text: Mostanra már bizonyítottad, hogy vakmerő programozó vagy, alig várom,
          hogy lássam, mit építesz. És remélhetőleg a kódolással való kalandozásod
          itt még nem ér véget. Jó utat!
    teaching_csf_how_it_works:
      1:
        image: notes/teaching_cs_fundamentals_1.png
        text: Ez a tanfolyam több szakaszra van bontva.
      2:
        image: notes/teaching_cs_fundamentals_2.png
        text: Az első néhány szakaszban megnézzük, hogy mi az informatika, és megismerkedünk
          a legfontosabb kifejezésekkel.
      3:
        image: notes/teaching_cs_fundamentals_3.png
        text: Ezután megtanulod, hogyan kell kódolni, pontosan ugyanúgy, ahogy a diákjaid
          is. A tanfolyam utolsó szakaszai arról szólnak, hogy hogyan kell megtervezni
          az informatika tanítását az osztályodban. A tanfolyam során több példát
          találsz majd mind a online órákra, mind a számítógép nélküli órákra.
      4:
        image: notes/teaching_cs_fundamentals_4.png
        text: A tanulási platform nyomon követi a haladásod, így bármikor folytathatod
          ott, ahol abbahagytad.
    what_is_cs:
      1:
        image: notes/what_is_cs.png
        text: A kódolás a számítógépnek adott utasítások összessége. Az informatika
          olyan terület, ahol az emberek a számítógépek erejét használják nagyobb
          problémák megoldására. A számítástechnika magában foglalja a kódolást, de
          más dolgokat is, például azt is, hogy hogyan működik az internet és milyen
          hatással van a társadalomra, mit kezdjünk a big data-val, és hogyan bontsuk
          le a nagyobb problémákat. Az informatika a problémamegoldásról, a kritikus
          gondolkodásról és a kitartásról szól.
    writing_first_program:
      1:
        image: notes/writing_first_program_1.png
        text: A Code.org a Blockly-t használja, ami egy vizuális, húzd és dobd programozási
          nyelv. A Blockly színes utasításokat, úgynevezett blokkokat használ programok
          építéséhez és feladványok megoldásához.
      2:
        image: notes/writing_first_program_2.png
        text: Minden feladvány négy részből áll.
      3:
        image: notes/writing_first_program_3.png
        text: A bal oldalon található a játéktér, ahol a programod fut.
      4:
        image: notes/writing_first_program_4.png
        text: Középen van az eszköztár, ahol az összes szükséges blokk található.
      5:
        image: notes/writing_first_program_5.png
        text: A jobb oldalon van a munkaterület, ahol blokkokat húzogatva építed fel
          a programodat.
      6:
        image: notes/writing_first_program_6.png
        text: A munkaterület fölött pedig az egyes feladványokhoz tartozó utasítások
          találhatók.
      7:
        image: notes/writing_first_program_7.png
        text: Ha túl sok blokkot húzol ki az eszköztárból, csak húzd vissza a felesleges
          blokkot az eszköztárba.  A program kipróbálásához nyomd meg a Futtatás gombot,
          az újbóli próbálkozáshoz pedig a Visszaállítás gombot.
    repeat_block:
      1:
        image: notes/repeat_block.png
        text: Az ismétlés blokk lehetővé teszi, hogy a benne lévő kódot annyiszor
          ismételd meg, ahányszor csak mondod neki.
    what_is_an_event:
      1:
        image: notes/what_is_an_event.png
        text: Egy esemény azt mondja a programodnak, hogy figyeljen arra, hogy valami
          megtörténik-e. Amikor ez a dolog megtörténik, a program végrehajt egy műveletet.
          A számítógép figyelhet egy egérkattintásra, egy nyílgomb megnyomására vagy
          a képernyő megérintésére.
    lesson_planning:
      1:
        image: notes/lesson_planning_1.png
        text: A Számítástechnika alapjaihoz tartozó leckék egy áttekintéssel kezdődnek,
          ebből meg lehet tudni, hogy miről szól a lecke.
      2:
        image: notes/lesson_planning_2.png
        text: 'A leckékhez tartoznak bemelegítő gyakorlatok, tevékenységek és egy
          összefoglaló. Ha saját óravázlatokat szeretnél készíteni, érdemes ezeket
          a tippeket figyelembe venni.

'
      3:
        image: notes/lesson_planning_3.png
        text: 1. Törekedj spirális tantervet felépíteni. Vezess be fogalmakat, és
          térj vissza rájuk.
      4:
        image: notes/lesson_planning_4.png
        text: 2. Keverd a tanulási élményeket online leckék és számítógép nélküli
          órák kombinálásával.
      5:
        image: notes/lesson_planning_5.png
        text: 3. Bontsd a tananyagot kisebb részekre.
      6:
        image: notes/lesson_planning_6.png
        text: 4. Vedd figyelembe a helyi standardokat, valamint a főiskolai tanulmányokhoz
          és karrierhez szükséges készségeket.
    opd_closing:
      1:
        image: notes/opd_closing_1.png
        text: Gratulálunk! Sikeresen elvégezted az Számítástechnikai alapismeretek
          tanítása online tanfolyamot. Most már része vagy a diákokat a jövőre felkészítő
          tanárok egyre növekvő közösségének.
      2:
        image: notes/opd_closing_2.png
        text: 'Ha további támogatásra van szükséged, nézd meg a következő forrásokat:
          1. forum.code.org, 2. @teachcode a Twitteren, 3. studio.code.org '
    hoc_dance_warmup_2019:
      1:
        text: 'Kódolás Órája | Táncos buli: Bemelegítés'
      2:
        text: Szia! Az én nevem Miral Kotb, táncos, szoftverfejlesztő, és az iLuminate
          megalkotója vagyok.
      3:
        text: A számítógép-tudomány a kreativitáshoz sokféleképpen kapcsolódik. Ezernyi
          módon, tényleg. Úgy értem, ha képes vagy szoftvert írni, az ötleteidet bárhogy
          megvalósíthatod. Én világító ruhákkal dolgozom. Rengeteg dolgot megtehetsz,
          ha megvannak az eszközeid a szoftveríráshoz, és a lehetőségek végtelenek.
      4:
        text: A következő órában úgy ismerkedhetsz meg a számítógép-tudománnyal, hogy
          beprogramozod a saját táncos bulidat! Összeállítottuk a zenét néhány slágerrel,
          és egy csapat kiváló táncossal játszhatsz majd.
      5:
        image: notes/hoc_dance_warmup_2019_5.png
        text: Kód-blokkokat fogsz használni a különböző táncosok kiválasztásához,
          a mozdulatok megváltoztatásához, hogy reagáljanak a zenére és hogy interaktív
          legyen a tánc.
      6:
        image: notes/hoc_dance_warmup_2019_6.png
        text: Látni fogod, hogy a képernyő három részre oszlik. Bal oldalt játszódnak
          az események. Itt fognak megjelenni a táncosaid.
      7:
        image: notes/hoc_dance_warmup_2019_7.png
        text: Középen van az eszköztárad. Az újabb kód-blokkok itt fognak megjelenni,
          ahogy előrehaladsz a feladványokban.
      8:
        image: notes/hoc_dance_warmup_2019_8.png
        text: A jobb oldali rész a munkaterület. Az eszköztárból áthúzhatsz blokkokat
          a munkaterületre, hogy felépítsd belőlük a programod.
      9:
        image: notes/hoc_dance_warmup_2019_9.png
        text: A feladat leírása minden feladványnál itt a képernyő felső részén jelenik
          meg. Ha szükséged van segítségre, kattints a villanykörtére.
      10:
        image: notes/hoc_dance_warmup_2019_10.png
        text: Kezdésként készítsünk egy új táncost ezzel a piros blokkal. Először
          húzzuk ki az eszköztárból, és pattintsuk be ez alá a narancssárga "beállítás"
          blokk alá. Ez a táncos egy macska.
      11:
        image: notes/hoc_dance_warmup_2019_11.png
        text: Azt is megváltoztathatod, hol jelenjen meg a táncos a játéktereden.
      12:
        image: notes/hoc_dance_warmup_2019_12.png
        text: A játéktér felett van egy menü, ahol zenét választhatsz. Rengeteg közül
          választhatsz, és reméljük jó szórakozás lesz, amíg megtalálod a kedvenceidet.
          A játéktér alatt van a futtatás gomb. Ha ezt megnyomod, akkor megjelennek
          a programod táncosai a játéktéren és felhangzik a zene.
      13:
        text: Próbáld ki! Ha elakadsz, semmi gond! Csak pattanj fel és mozdulj rá,
          és mielőtt felocsúdnál, már el is kezdted a táncos bulit! Szóval, mit fogsz
          alkotni?
    hoc_dance_events_2019:
      1:
        text: 'Kódolás Órája | Táncos buli: Események'
      2:
        image: notes/hoc_dance_events_2019_2.png
        text: A nevem Erin, és szoftvermérnök vagyok itt a Code.org-nál, és segítettem
          a Táncos buli létrehozásában.
      3:
        image: notes/hoc_dance_events_2019_3.png
        text: Hogy a különböző modulatok a zenével összhangban történjenek, használhatunk
          egy dolgot, amit úgy hívnak, hogy "esemény". Az esemény megmondja a programodnak,
          hogy figyeljen oda valamilyen történésre és reagáljon rá.
      4:
        image: notes/hoc_dance_events_2019_4.png
        text: Például eseményeknek tekintjük az egérkattintást, a nyilakat ábrázoló
          gombok leütését vagy a képernyő megérintését.
      5:
        image: notes/hoc_dance_events_2019_5.png
        text: Itt most egy táncost fogunk programozni, aki végrehajt egy mozdulatot,
          amikor megnyomod a képernyőn lévő nyílgombokat, vagy a billentyűzet billentyűit.
      6:
        image: notes/hoc_dance_events_2019_6.png
        text: Használhatjuk az "amikor felfelé nyíl" eseményblokkot, és hozzákapcsolhatunk
          egy "csináld egyszer" blokkot. Amikor valaki megnyomja a felfelé nyíl billentyűt,
          akkor az "amikor felfelé nyíl" blokkhoz kapcsolt kód fut le. Melyik táncmozdulatot
          választod?
      7:
        image: notes/hoc_dance_events_2019_7.png
        text: Győződj meg róla, hogy a választott táncmozdulat típusa megegyezik a
          "beállítás" blokkban létrehozott táncmozdulatok egyikével, különben esetleg
          nem történik semmi.
      8:
        image: notes/hoc_dance_events_2019_8.png
        text: Végül több ilyen eseményt is létrehozhatsz, hogy a táncosok minden billentyűvel
          más-más mozdulatot hajtsanak végre. Próbáld ki, és néhány sornyi kóddal
          elkészítheted a saját interaktív táncodat.
    hoc_dance_measures_2019:
      1:
        image: notes/hoc_dance_measures_2019_1.png
        text: 'Kódolás órája | Táncos buli: Ütemek'
      2:
        image: notes/hoc_dance_measures_2019_2.png
        text: A nevem Aloe Blacc. Énekes, zeneszerző és előadó vagyok. Szerintem nagyon
          fontos számítógép-tudományt tanulni, mert a számítógép-tudomány a jövő,
          és fontos tudni irányítani a technológiát ami úgy meghatározza az életünket.
      3:
        image: notes/hoc_dance_measures_2019_3.png
        text: Az esemény, amit most használni fogunk, a dal változására figyel. Ez
          a változás fogja kiváltani azt, hogy a táncosod új táncba kezd.
      4:
        image: notes/hoc_dance_measures_2019_4.png
        text: A profi táncosok a koreográfiát a dal ütemének számolásával gyakorolják.
          A zenében egy ütem bizonyos számú taktusra utal. A legtöbb népszerű dalban
          egy ütem négy taktus hosszú.
      5:
        image: notes/hoc_dance_measures_2019_5.png
        text: Hogy a táncosok elszabaduljanak, egy zöld esemény blokkra lesz szükséged.
          Az esemény blokkra az van írva, "4 ütem után".
      6:
        image: notes/hoc_dance_measures_2019_6.png
        text: Ha áthúzod a lila "csináld örökké" blokkot, választhatsz a táncosodnak
          egy mozdulatot, amit ismételni fog. Mivel a "4 ütem után" blokk alá kerül,
          így a táncosod 4 ütem után fog bekapcsolódni a táncba.
      7:
        image: notes/hoc_dance_measures_2019_7.png
        text: Figyeld a képernyő felső részén az ütem számlálót.
      8:
        image: notes/hoc_dance_measures_2019_8.png
        text: Figyeld és hallgasd az eseményt, ami ki fogja váltani a táncos kódot.
          És a megfelelő pillanatban a táncos elkezd majd táncolni.
    hoc_dance_properties_2019:
      1:
        text: 'Kódolás Órája | Táncos buli: Tulajdonságok'
      2:
        text: A nevem Maria, a washingtoni egyetem hallgatója vagyok és az Amazon
          Jövő Mérnöke.
      3:
        text: Szeretem a számítógép-tudományt, mert van benne problémamegoldás, kritikus
          gondolkodás és sok órányi munka után végül valami igazán menő és értékes
          jön létre.
      4:
        text: Eddig már volt lehetőséged néhány különböző típusú táncost eljátszani,
          és őket különböző táncmozdulatokra programoztad. De hogyan működnek ezek
          a mozdulatok valójában?
      5:
        text: Minden mozdulat képek sorozatából áll, amelyeket frame-eknek nevezünk.
          Minden frame egy kicsit különbözik az előtte lévőtől. Amikor a program fut,
          a számítógép egymás után mutatja a frame-eket. Olyan gyorsan követik egymást,
          hogy úgy tűnik, mintha a táncos mozogna. Ez a titka minden animációnak.
      6:
        text: Nem csak a táncos mozgását, de a tulajdonságait is meg lehet változtatni.
          A tulajdonságok olyan dolgokat írnak le, mint a táncos helye a képernyőn,
          a táncos mérete vagy színe.
      7:
        image: notes/hoc_dance_properties_2019_7.png
        text: A táncosok tulajdonságainak megváltoztatásához egy meghatározott blokkot
          használsz. Használjunk egy blokk-készletet, hogy a táncosaink kisebbnek
          tűnjenek. Először is húzzuk be a blokk-készletet a programunkba.
      8:
        image: notes/hoc_dance_properties_2019_8.png
        text: Ezután válaszd ki azt a táncost, akit meg szeretnél változtatni, és
          írd be, hogy milyen méretben jelenjenek meg a képernyőn. A teljes méret
          100. Ha alacsonyabb számot választasz, az kisebbé teszi a táncost. Minél
          kisebb a táncos, annál távolabbinak tűnik.
      9:
        image: notes/hoc_dance_properties_2019_9.png
        text: A beállítás blokkal megváltoztathatod a táncos méreteit, irányát, helyét
          és színét. Próbálgathatod ezeket a tulajdonságokat, és különböző változásokat
          kapcsolhatsz a dal egyes részeihez.
      10:
        image: notes/hoc_dance_properties_2019_10.png
        text: Ne feledd, hogy csak már létező táncosok tulajdonságait változtathatod
          meg. Győződj meg róla, hogy a beállítás blokk az új táncos készítése blokk
          után jön. Kísérletezz bátran, legyél kreatív, érezd jól magad.
    hoc_dance_congrats_2019:
      1:
        text: 'Kódolás Órája | Táncos buli: Induljon a party!'
      2:
        text: Gratulálunk! Elsajátítottad a számítógép-tudomány alapjait. Most már
          használhatod ezeket a blokkokat, hogy a saját táncos bulidat létrehozd,
          és megoszd a barátaiddal.
      3:
        text: Ha benézel az eszköztárba, olyan új blokkokat fogsz benne találni, amik
          korábban nem voltak ott. Például használhatod az elrendezés blokkot, hogy
          a táncosok különböző alakzatokat vegyenek fel a képernyőn.
      4:
        text: Fedezd fel a lehetőségeket és próbálj kísérletezni az új blokkokkal
          és funkciókkal. Készítesz egy teljes koreográfiát a kedvenc dalodra?
      5:
        text: Vagy egy offline tánc a barátaiddal?
      6:
        text: Vagy valami más együtt?
      7:
        image: notes/hoc_dance_congrats_7.png
        text: A lecke végén megoszthatod az alkotásodat a barátaiddal. Tornáztasd
          a képzelőerőd és érezd jól magad!
    poemart_intro:
      1:
        image: notes/hoc_poem_art_2021_introduction_01.jpg
        text: A nevem Caia, költő és informatikus vagyok. Nagyon sok mindent tanultam
          a kódolásról, és ettől jobb költő lettem, és a költészetem miatt viszont
          jobb lettem a kódolásban, egyszerűen azért, mert nagyon át kell gondolnom,
          hogy milyen szavakat választok, és mit fogok létrehozni, ha egyszer minden
          összeáll.
      2:
        image: notes/hoc_poem_art_2021_introduction_02.jpg
        text: A következő egy órában az informatikáról és a költészetről fogunk tanulni,
          egy animált verset fogunk létrehozni. A költészet lényegében szavakkal való
          művészi alkotás. Azért írok verseket, hogy kifejezzem magam; amikor írok,
          az egyedi stílusommal és ritmusommal próbálom megmozgatni a közönség képzeletét
          és hatni az érzelmeikre.
      3:
        image: notes/hoc_poem_art_2021_introduction_03.jpg
        text: A művészethez hasonlóan a verseket is sokféleképpen lehet értelmezni.
          Ugyanaz a vers különböző embereknek nagyon különböző dolgokat jelenthet,
          és minden versnek megvan a maga hangulata. A hangulat az az érzés, amit
          egy vers ad neked. Néha az emberek a hangulatokhoz bizonyos színeket és
          képeket társítanak.
      4:
        image: notes/hoc_poem_art_2021_introduction_04.jpg
        text: A sárga szín például vidámságot ébreszt bennem. És amikor a félelemre
          gondolok, néha egy sötét és viharos éjszakát képzelek el. Ebben a tevékenységben
          egy vers hangulatát  fogod illusztrálni és megeleveníteni annak alapján,
          hogy a vers milyen érzéseket kelt benned.
      5:
        image: notes/hoc_poem_art_2021_introduction_05.jpg
        text: Nézzük meg, hogyan lehet ezt megtenni kód segítségével. Látni fogod,
          hogy a képernyőd három fő részre oszlik. A bal oldalon van a játéktér. Itt
          fog megjelenni az animált versed. Minden versnek van címe, és van szerzője.
      6:
        image: notes/hoc_poem_art_2021_introduction_06.jpg
        text: Ez a középső terület az eszköztár. A lecke során új kódblokkok lesznek
          elérhetők ezen a területen.
      7:
        image: notes/hoc_poem_art_2021_introduction_07.jpg
        text: A jobb oldali terület a munkaterület. Az eszköztárból a munkaterületre
          húzhatod a blokkokat, amelyekkel felépítheted a programodat.
      8:
        image: notes/hoc_poem_art_2021_introduction_08.jpg
        text: Az egyes szintekhez tartozó utasítások itt lesznek fent a képernyő tetején.
          Ha segítségre van szükséged, kattints a villanykörtére.
      9:
        image: notes/hoc_poem_art_2021_introduction_09.jpg
        text: Először is válassz ki egy neked tetsző verset. Sokféle vers van, és
          minden szinten új verset választhatsz.
      10:
        image: notes/hoc_poem_art_2021_introduction_10.jpg
        text: Ezután az eszköztárból húzz blokkokat a munkaterületedre, és animáld
          a versed. Kiválaszthatsz a versed hangulatához illő háttérszínt vagy effektet,
          majd a Futtatás gombra kattintva láthatod a versedet működés közben.
      11:
        image: notes/hoc_poem_art_2021_introduction_11.jpg
        text: Szánj egy kis időt versek olvasására, és keress egyet, amelyik megérint.
          Gondold át, hogy mit érzel, és hogyan tudnád ezt az érzést képekkel és kóddal
          közvetíteni.
    poemart_events:
      1:
        image: notes/hoc_poem_art_2021_events_01.jpg
        text: Néha egy vers hangulata a vers folyamán megváltozik. Lehet, hogy az
          elején boldognak tűnő vers szomorú lesz, vagy a sötét hangulat válik fényessé.
      2:
        image: notes/hoc_poem_art_2021_events_02.jpg
        text: Ebben a tevékenységben eseményekkel fogsz dolgozni. Az eseményblokk
          segítségével megváltoztathatod a programod menetét, amikor a versnek egy
          adott sora megjelenik. Vedd észre, hogy az eseményblokkok nem pattannak
          be a főprogramodba. Ehelyett saját kis programokat hoznak létre.
      3:
        image: notes/hoc_poem_art_2021_events_03.jpg
        text: 'Olvasd el a versed, és keress egy olyan pillanatot, amikor a hangulat
          megváltozik. Számold meg, melyik sorban történik ez: egy, kettő, három.
          Az eseményblokkodba írd be a sornak a számát.'
      4:
        image: notes/hoc_poem_art_2021_events_04.jpg
        text: Ezután, amikor az a sor megjelenik a képernyőn, programozz be valamit,
          ami tükrözi a hangulatváltozást. Amikor megnyomod a Futtatás gombot, láthatod,
          hogy mit kódoltál.
    poemart_imagery:
      1:
        image: notes/hoc_poem_art_2021_imagery_01.jpg
        text: A költészetben a szerzők szóképeket használnak arra, hogy az olvasó
          képzeletében megjelenjenek ezek a képek. Amikor a krokodil szót látjuk,
          automatikusan egy zöld krokodilt képzelünk el. Egy ilyen kép animációvá
          alakításához sprite-okat fogunk használni.
      2:
        image: notes/hoc_poem_art_2021_imagery_02.jpg
        text: Ez egy új sprite-blokkot készít, amellyel létre lehet hozni egy sprite-ot,
          és választani lehet hozzá egy jelmezt. Olyan jelmezt válassz a sprite-nak,
          amely szerinted illik a vershez.
      3:
        image: notes/hoc_poem_art_2021_imagery_03.jpg
        text: A sprite helyének megváltoztatásához kattints a helyblokkban lévő tűikonra,
          majd kattints arra a helyre, ahová a sprite-ot el akarod helyezni a játéktérben.
      4:
        image: notes/hoc_poem_art_2021_imagery_04.jpg
        text: A következő néhány szinten új blokkokat fogsz látni. Ezzel a blokkal
          meg tudod változtatni a sprite méretét. Ez a blokk lehetővé teszi, hogy
          animáld a sprite-ot egy viselkedéssel.
      5:
        image: notes/hoc_poem_art_2021_imagery_05.jpg
        text: Ha egy versben vándorló felhőkről van szó, először készítsd el a felhő
          sprite-ot, majd válaszd ki ezt a viselkedés blokkot, húzd ki, és válaszd
          a vándorlást.
      6:
        image: notes/hoc_poem_art_2021_imagery_06.jpg
        text: Győződj meg arról, hogy a sprite-ok jelmezei azonosak. Amikor megnyomod
          a Futtatás gombot, egy vándorló felhőről fogsz olvasni és egy vándorló felhőt
          fogsz látni.
      7:
        image: notes/hoc_poem_art_2021_imagery_07.jpg
        text: Most már valódi képeket adhatsz a vershez, a versben szereplő szavak
          illusztrálására. Jó szórakozást!
    poemart_celebration:
      1:
        image: notes/hoc_poem_art_2021_celebration_01.jpg
        text: Gratulálunk! Elsajátítottad az informatika alapjait, és azt, hogy hogyan
          fejezheted ki egy vers hangulatát. Most már létrehozhatod a saját animált
          versedet, amit aztán megoszthatsz a barátaiddal.
      2:
        image: notes/hoc_poem_art_2021_celebration_02.jpg
        text: Egy egyszerű jelenetet fogsz kiválasztani az egész vershez?
      3:
        image: notes/hoc_poem_art_2021_celebration_03.jpg
        text: Vagy sok eseményt fogsz használni, és a versed minden sorához új jelenetet
          hozol létre?
      4:
        image: notes/hoc_poem_art_2021_celebration_04.jpg
        text: A gyakorlat végén megoszthatod az alkotásod linkjét a barátaiddal.
      5:
        image: notes/hoc_poem_art_2021_celebration_05.jpg
        text: Használd a képzelőerőd! Jó szórakozást!
    hello_world_intro:
      1:
        image: notes/hoc_hello_world_2021_introduction_01.jpg
        text: Szia! A nevem Erin, és szoftvermérnök vagyok itt a Code.org-nál. Nagyon
          izgatott vagyok, mert én dolgozhattam azon a gyakorlaton, amit most fogsz
          megcsinálni! Mi a Helló világ! nevet adtuk neki.
      2:
        image: notes/hoc_hello_world_2021_introduction_02.jpg
        text: A Helló világ! egy híres mondat a számítástechnikában, és ennek a mondatnak
          a megjelenítése gyakran az első lépés az informatikai tanulmányokban. A
          következő órában a Sprite laborban fogsz programozni, ez az első lépés az
          informatika elsajátításához vezető úton.
      3:
        image: notes/hoc_hello_world_2021_introduction_03.jpg
        text: A Sprite labor egy olyan eszköz, amellyel fantáziadús és szórakoztató
          projekteket lehet készíteni. Látni fogod, hogy a képernyőd három fő részre
          oszlik.  A bal oldalon van a játéktér. Itt jelennek meg a sprite-jaid.
      4:
        image: notes/hoc_hello_world_2021_introduction_04.jpg
        text: A sprite-ok olyan tárgyak a képernyőn, amelyekkel kapcsolatot lehet
          teremteni, mint egy karakter vagy egy tárgy egy történetben vagy egy játékban.
      5:
        image: notes/hoc_hello_world_2021_introduction_05.jpg
        text: Ez a középső terület az eszköztár. A lecke során új kódblokkok lesznek
          elérhetők ezen a területen.
      6:
        image: notes/hoc_hello_world_2021_introduction_06.jpg
        text: A jobb oldali terület a munkaterület. Az eszköztárból a munkaterületre
          húzhatod a blokkokat, amelyekkel felépítheted a programodat.
      7:
        image: notes/hoc_hello_world_2021_introduction_07.jpg
        text: Az egyes szintekhez tartozó utasítások itt lesznek fent a képernyő tetején.
          Ha segítségre van szükséged, kattints a villanykörtére.
      8:
        image: notes/hoc_hello_world_2021_introduction_08.jpg
        text: Először készítsünk egy sprite-ot! Ebben a blokkban megadhatod a sprite
          jelmezét és a sprite helyét. A jelmez az a szó, amelyet a sprite külsejénenk
          a leírására használunk. A sprite helyének megváltoztatásához kattints a
          helyblokkban lévő tűikonra, majd kattints arra a helyre, ahová a sprite-ot
          elhelyezni szeretnéd.
      9:
        image: notes/hoc_hello_world_2021_introduction_09.jpg
        text: Most pedig mutatkozzon be a sprite! Ahhoz, hogy a sprite mondjon valamit,
          használd ezt a "beszél" blokkot, és add hozzá a programodhoz. Ellenőrizd,
          hogy a "beszél" blokkban kiválasztott jelmez megegyezik a sprite-on lévő
          jelmezzel.
      10:
        image: notes/hoc_hello_world_2021_introduction_10.jpg
        text: Amikor megnyomod a Futtatás gombot, a sprite azt a szöveget fogja mondani,
          amit megadtál neki. Itt az ideje, hogy elkezd használni a Sprite labort,
          és meglátod, mire képes a fantáziád!
    hello_world_events:
      1:
        image: notes/hoc_hello_world_2021_events_01.jpg
        text: Most, hogy már tudod használni a Sprite labort, és azt szeretnéd, hogy
          a programod reagáljon, amikor valaki játszik vele. Ehhez eseményeket fogsz
          használni. Egy esemény azt mondja a programodnak, hogy figyeljen arra, hogy
          valami megtörténik-e, és azonnal reagáljon.
      2:
        image: notes/hoc_hello_world_2021_events_02.jpg
        text: 'Néhány példa az eseményekre: egérkattintás, nyílgomb vagy a képernyő
          megérintése. Az olyan blokkokat, mint az "amikor rákattint", eseményblokkoknak
          nevezzük. Az eseményblokkhoz kapcsolódó kód akkor fut le, amikor a program
          a megfelelő műveletet észleli.'
      3:
        image: notes/hoc_hello_world_2021_events_03.jpg
        text: Ha például ezt a "beszél" blokkot az "amikor rákattint" eseményhez csatolom,
          akkor a sprite mondani fog valamit, amikor a felhasználó rákattint vagy
          megérinti. Vedd észre, hogy az eseményblokkok nem kapcsolódnak a főprogramhoz.
          Ehelyett saját kis programokat hoznak létre.
      4:
        image: notes/hoc_hello_world_2021_events_04.jpg
        text: Ha több sprite-od van, a történeted interaktívvá teheted újabb események
          használatával.
      5:
        image: notes/hoc_hello_world_2021_events_05.jpg
        text: A Sprite laborban hamarosan még több mindent megtanulhatsz, például
          a sprite méretének vagy külsejének a megváltoztatását, különböző hátterek
          beállítását, hangok lejátszását és még sok minden mást. Mit szeretnél, mit
          csináljanak a sprite-jaid, amikor valaki kapcsolatba lép velük? Ez csak
          rajtad múlik!
    hello_world_congrats:
      1:
        image: notes/hoc_hello_world_2021_freeplay_01.jpg
        text: Gratulálunk! Most elsajátítottad a számítástechnika alapjait. Most már
          a Sprite labor segítségével bármit létrehozhatsz, amit csak akarsz.
      2:
        image: notes/hoc_hello_world_2021_freeplay_02.jpg
        text: Látni fogsz egy gombot, amire az van írva, hogy jelmezek. Ha rákattintasz,
          új sprite-jelmezeket választhatsz egy könyvtárból.
      3:
        image: notes/hoc_hello_world_2021_freeplay_03.jpg
        text: Sajátot is rajzolhatsz! Ha megvan a neked tetsző jelmez, menj vissza
          a kódodhoz.
      4:
        image: notes/hoc_hello_world_2021_freeplay_04.jpg
        text: Most válaszd ki ezt a jelmezt a sprite-odnak.
      5:
        image: notes/hoc_hello_world_2021_freeplay_05.jpg
        text: Ha megnézed az eszköztárat, találsz néhány vadonatúj blokkot, amit eddig
          még nem láttál. Például rengeteg viselkedési blokkot találsz, amelyekkel
          szórakoztató és érdekes módon mozgathatod a sprite-odat.
      6:
        image: notes/hoc_hello_world_2021_freeplay_06.jpg
        text: Az "amikor érintkezik" eseményblokk segítségével szabályozhatod, hogy
          mi történjen, amikor két sprite egymásnak ütközik.
      7:
        image: notes/hoc_hello_world_2021_freeplay_07.jpg
        text: Keresd meg az "effekt készítése" blokkot. Ezzel a nagy teljesítményű
          blokkal egy csomó olyan sprite-ot készíthetsz, amelyek parancsra kipukkadnak,
          felpattannak vagy hullanak.
      8:
        image: notes/hoc_hello_world_2021_freeplay_08.jpg
        text: Nézz körül, és kísérletezz ezekkel az új blokkokkal és funkciókkal.
          A bemutató végén kattints a Megosztás gombra, és oszd meg az alkotásod linkjét
          a barátaiddal.
      9:
        image: notes/hoc_hello_world_2021_freeplay_09.jpg
        text: Minden készséged megvan ahhoz, hogy alkalmazásokat, játékokat és más
          új programokat fejlessz a Sprite laborban! Használd új képességeidet jó
          célokra. Légy kedves és tisztelettudó, mintha papíron alkotnál valamit,
          vagy ha egy barátoddal beszélgetnél.
      10:
        image: notes/hoc_hello_world_2021_freeplay_10.jpg
        text: Szóval mit fogsz létrehozni? Elmesélhetsz egy történetet magadról...
          vagy kitalálhatsz egyet a saját különleges karaktereiddel. Talán még az
          új informatikai ismereteidet is felhasználod a következő iskolai projektedhez!
          Használd a fantáziád, és érezd jól magad!
