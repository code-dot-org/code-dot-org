"hu":
  slides:
    maze_intro:
      1:
        image: notes/hoc1_1.jpg
        text: "Üdvözlünk az első kódolás órádon! Kezdjük is el az első programozási
          leckét."
      2:
        image: notes/hoc1_2.jpg
        text: A Blockly nevű vizuális programozási nyelvet fogjuk használni, amelyben
          blokkok egymáshoz illesztésével tudsz kódot írni.
      3:
        image: notes/hoc1_3.jpg
        text: A kódot legtöbbször gépelik, de a Blockly vizuális. Minden blokk megfelel
          egy „igazi” sor kódnak.
      4:
        image: notes/hoc1_4.jpg
        text: Olyan számítógép-tudományi alapokat, fogalmakat fogsz megtanulni, amelyeket
          az alkalmazások készítésétől a marsjáró vezérléséig mindenütt használnak.
      5:
        image: notes/hoc1_5.jpg
        text: Minden program a számítógép által végrehajtandó utasítások listája.
      6:
        image: notes/hoc1_6.jpg
        text: Első programodban egy Angry Birds madarat kell irányítanod az útvesztőn
          át, hogy eljusson a Zöld Disznóig.
      7:
        image: notes/hoc1_7.jpg
        text: A bal oldal egy útvesztő, ahol a programod fut. A pálya megoldásához
          szükséges útmutató az útvesztő alatt olvasható.
      8:
        image: notes/hoc1_8.jpg
        text: A középső eszköztár tartalmazza az Angry Birds madár irányításához szükséges
          utasításokat. Ezeket fogod használni a kód felépítéséhez.
      9:
        image: notes/hoc1_9.jpg
        text: A középső eszköztárból a jobb oldali munkaterületre kell majd áthúznod
          a blokkokat a program felépítéséhez. Egy blokk törléséhez húzd azt a sarokban
          lévő kukára.
      10:
        image: notes/hoc1_10.jpg
        text: Minden blokk egy utasítás. Ha egy „menj” blokkot húzol a munkaterületre,
          majd megnyomod a „Futtatás” gombot, akkor a madár egy pozíciót lép előre
          a labirintusban.
      11:
        image: notes/hoc1_11.jpg
        text: Egynél több művelet elvégzéséhez több blokkot is áthúzhatsz a munkafelületre,
          és összeillesztheted őket. A madár az utasításokat fentről lefelé végzi
          majd el.
      12:
        image: notes/hoc1_12.jpg
        text: Ha egy már lefutott programot szeretnél javítani és újra lefuttatni,
          akkor nyomd meg a „Visszaállítás” gombot.
      13:
        image: notes/hoc1_13.jpg
        text: Gyerünk, kapjuk el azokat a disznókat!
    artist_intro:
      1:
        image: notes/stage5_1.jpg
        text: Szia, a nevem JR! Minden versenyzői csapatnak szüksége van egy számítógéptudósra
          a nyeréshez. Analizálják az adatokat a járműből, hogy gyorsabbá tehessék
          azt.
      2:
        image: notes/stage5_2.jpg
        text: Ezeknél a rejtvényeknél te leszel a művész, aki vonalat húz maga mögött,
          bármerre megy.
      3:
        image: notes/stage5_3.jpg
        text: 'Ez a blokk azt mondja: " előrelépni 100 pixel. " A pixelek csak nagyon
          apró pontok a képernyőn.'
      4:
        image: notes/stage5_4.jpg
        text: Ez a blokk azt mondja "forduljon jobbra 90 fokban." Ez el fogja fordítani
          a művészt ugyanabban a mennyiségben, mint amennyiben a "fordulj" blokkok
          a labirintus rejtvényekben.
      5:
        image: notes/stage5_5.jpg
        text: Kattints valamelyik blokkra, hogy megváltoztasd a művész lépéseinek
          számát, vagy a fordulások mértékét.  Játssz ezekkel, hogy jobban megismerd
          ezeket az új blokkokat.
    farmer_intro:
      1:
        image: notes/stage9_1.jpg
        text: Szia, a nevem Paola! Ezekben a rejtvényekben te egy farmer leszel, akinek
          ki kell simítania a földét, hogy elkezdhesse az ültetvények elültetését.
      2:
        image: notes/stage9_2.jpg
        text: Segítened kell neki eltávolítani az összes halmot, és kitölteni a lyukakat.
      3:
        image: notes/stage9_3.jpg
        text: Az új blokkok eltüntetnek egy lapátnyi földet a halomból, illetve egy
          lapátnyi földdel feltöltenek egy gödröt.
      4:
        image: notes/stage9_4.jpg
        text: A halmok és a lyukak különböző méretűek, így meg kell mondd a farmernek,
          hogy hányat lapátoljon.
    flappy_intro:
      1:
        image: Megjegyzések/flappy01.jpg
        text: Szia, Kati vagyok!  Az egyik legizgalmasabb dolog a számítógéppel, hogy
          egy program lehet interaktív.
      2:
        image: Megjegyzések/flappy02.jpg
        text: Mindig amikor kattintanak az egérrel, az érintő képernyőt megbökik vagy
          gépelnek egy számítógépen vagy telefonon, az egy ESEMÉNY-t generál. Amikor
          ez az ESEMÉNY megtörténik, egy előre megírt kód határozza meg mi történjen.
      3:
        image: Megjegyzések/flappy03.jpg
        text: 'Mondjuk lehet egy ESEMÉNYKEZELŐ, ami ezt tartalmazza: "amikor az egéren
          kattintanak, lejátszom egy hangot" '
      4:
        image: Megjegyzések/flappy04.jpg
        text: Hallottál már a FlappyBird játék-ról ? Eseménykezelők használatával
          fogunk megtanulni hogyan lehet a saját egyéni  FlappyBird változat programját
          elkészíteni!
      5:
        image: Megjegyzések/flappy05.jpg
        text: A  kódot, a számítógépnek parancsokat jelentő blokkokat  felkapva és
          átrakva (drag and drop) fogja írni. Az grafikusan ábrázolt blokkok valódi
          kódot reprezentálnak.
      6:
        image: Megjegyzések/flappy06.jpg
        text: 'Ha egy pillantást vet a munkaterületre, lát néhány zöld blokkot, amiket
          kitöltöttek az Ön részére- ezek a "eseménykezelők" '
      7:
        image: Megjegyzések/flappy07.jpg
        text: Ha azt szeretnéd, hogy a madár csapjon szárnyával, ha RÁKATTINTASZ az
          egérrel, arra ott van a "csapj" blokk. Ezt hozzárendeli a megfelelő eseménykezelőhöz,
          és akkor a te játékodban valahányszor kattintanak, a madár csap egyet a
          szárnyával.
      8:
        image: Megjegyzések/flappy08.jpg
        text: Minden egyes rejtvény bemutat egy új típusú eseményt, mint zöld blokkot
          a munkaterületen. Ön kiválaszthatja a megfelelő blokkokat, az  eseményekre
          adott válaszként.
      9:
        image: Megjegyzések/flappy09.jpg
        text: Amikor vagy lát egy lefelé nyilat, mint ez, ez azt jelenti, meg lehet
          változtatni a beállításokat - például az akkor lejátszandó hangot, amikor
          flappy eléri a talajt.
      10:
        image: Megjegyzések/flappy10.jpg
        text: Az utolsó lépcsőn már képes létrehozni a saját játékát, és megosztani
          azt barátaival. Jó szórakozást!
    loop_times:
      1:
        image: notes/hoc2_1.jpg
        text: Helló, Mark vagyok. Gyere, tanuljuk meg a ciklusok használatát! A ciklust
          használva megmondhatod a számítógépnek, hogy egy bizonyos utasítást újra
          és újra, ezerszer vagy milliószor ismételjen meg.
      2:
        image: notes/hoc2_2.jpg
        text: Ebben a rejtvényben azt szeretnénk, ha a madár ötöt lépne előre, hogy
          elérjen a malachoz.
      3:
        image: notes/hoc2_3.jpg
        text: A feladat megoldásához használhatjuk a új „Ismétlés” blokkot.
      4:
        image: notes/hoc2_4.jpg
        text: Ahelyett, hogy 5 külön „előrelépni” blokkot használnánk...
      5:
        image: notes/hoc2_5.jpg
        text: Betehetjük az „előrelépni” blokkot az „ismétlés” blokk belsejébe, majd
          beírhatjuk a blokkba a szükséges ismétlések számát.
      6:
        image: notes/hoc2_6.jpg
        text: 'Fontos: az „ismétlés” blokkba több mint egy utasítást is betehetsz.'
      7:
        image: notes/hoc2_7.jpg
        text: "Élvezd az új „ismétlés” blokk használatát!"
    loop_until:
      1:
        image: notes/hoc3_1.jpg
        text: Szia, Chris vagyok. Mielőtt a Miami Heathez csatlakoztam a Georgia Techbe
          jártam, hogy számítástechnikát tanulhassak. Gyere, próbáljuk ki az új „ismételd
          amíg” blokkot.
      2:
        image: notes/hoc3_2.jpg
        text: Mi van, ha nem tudjuk, milyen messzire kell a madárnak mennie, hogy
          eljusson a malachoz?
      3:
        image: notes/hoc3_3.jpg
        text: Ha a "lépj előre" blokkot az "ismételd amíg" blokkba helyezzük, akkor
          a madár addig fog előre haladni, AMÍG eléri a malacot (vagy a falnak ütközik).
      4:
        image: notes/hoc3_4.jpg
        text: 'Fontos: akárcsak az ismételd blokkba, az „ismételd amíg” blokkba is
          több utasítást helyezhetsz, és mindegyiket ismételni fogja a program.'
    if:
      1:
        image: notes/hoc4_1.jpg
        text: Szia, Bill vagyok! Tanuljunk meg egy új alapvető fogalmat, a „ha” feltételt.
          A számítógépek ezt felhasználva hoznak döntéseket.
      2:
        image: notes/hoc4_2.jpg
        text: 'A „ha” állítást Te is naponta használod. Minden reggel, mielőtt elindulnál,
          azt mondod: HA esik az eső, fel kell vennem a kabátom.'
      3:
        image: notes/hoc4_3.jpg
        text: 'Megmondhatjuk egy zombinak: HA van út balra és ha megtalálja az utat,
          akkor forduljon abba az irányba.'
      4:
        image: notes/hoc4_4.jpg
        text: Ahhoz, hogy megírjuk ezt a kódot húzzuk ki a „ha” blokkot, és helyezzük
          a „fordulj balra” blokkot a belsejébe.
      5:
        image: notes/hoc4_5.jpg
        text: Most ha az „előrelépés” blokkot föléje és az „ismétlés” blokkot a kód
          köré helyezzük, akkor a zombi minden lépésnél ellenőrzi, hogy létezik-e
          út balra. Ha igen, akkor arra fordul. A ismétlő parancs fontos, mivel minden
          lépésnél ellenőriznie kell, hogy létezik-e út.
      6:
        image: notes/hoc4_6.jpg
        text: 'A ha állítás nagyon fontos a számítástechnikában. Az első programjaim
          között volt egy amőba játék, amelyben az egyik ha feltétel így szólt: HA
          az ellenfél nyerő helyzetben van, akkor blokkolni kell a pozíciót, amivel
          nyerni tudna.'
      7:
        image: notes/hoc4_7.jpg
        text: Jó szórakozást a „ha” blokk használatához!
    if_else:
      1:
        image: notes/hoc5_1.jpg
        text: Szia, Saloni vagyok. Én az egészségügyben és az orvostudományban felmerülő
          problémák megoldására használom a számítástechnikát. Tanuljuk meg a „ha
          különben” blokk használatát. Ez a blokk hasonlít a „ha” blokkhoz, de van
          egy extra kiegészítése „különben” néven.
      2:
        image: notes/hoc5_2.jpg
        text: Ha a feltétel „csináld” részéhez egy „előrelépni”, a „különben” részéhez
          egy „fordulj balra” blokkot teszel, akkor a zombi e közül a két lehetőség
          közül fog választani. Ha van út előre, akkor a zombi előre megy, minden
          más esetben (tehát ha nincs előre út) a zombi balra fog fordulni.
      3:
        image: notes/hoc5_3.jpg
        text: Pont mint a "ha" blokknál, tehetünk "ha különben" blokkokat "ismételd"
          blokkokba, így a zombi mozgásban marad, a "ha különben" blokk pedig ellenőrizni
          fogja, hogy van-e hova fordulni.
      4:
        image: notes/hoc5_4.jpg
        text: Most vidd a zombikat oda, ahova tartoznak!
    if_else_scrat:
      1:
        image: notes/saloni_ifelse_scrat1.jpg
        text: A ha-különben utasítás egy döntés két dolog között. Most lássuk, hogyan
          tudjuk használni a ha-különben utasítást a barátunkkal, Motkánnyal.
      2:
        image: notes/saloni_ifelse_scrat2.jpg
        text: A blokk hasonló a sima "ha" blokkhoz, de van egy extra része az alján,
          amit a "különben" szó jelöl. Ha egy "előrelépni" blokkot teszek a "csináld"
          részhez, egy "fordulj balra" blokkot a "különben" részhez, akkor Motkány
          a mókus előre fog menni, ha van előre út. Ha nincs tovább út előre, akkor
          Motkány balra fog fordulni.
      3:
        image: notes/saloni_ifelse_scrat3.jpg
        text: Ez egy döntéshozás, és a két utasítás közül az egyiket fogja végrehajtani
          a döntés alapján. És csakúgy, mint a "ha" blokkokat, a "ha-különben" blokkokat
          is beleteheted "ismételd" blokkokba.
      4:
        image: notes/saloni_ifelse_scrat4.jpg
        text: Most segítsünk Motkánynak a mókusnak, hogy megszerezze a makkot!
    function:
      1:
        image: notes/stage13_1.jpg
        text: Szia, Brina vagyok, mérnök az Instagramnál. Egy függvény lehetővé teszi,
          hogy ha egy kód bizonyos sorait újra és újra használni szeretnéd, akkor
          ne kelljen mindig az összes sort újra beírni. Helyette használhatsz egyetlen
          blokkot.
      2:
        image: notes/stage13_2.jpg
        text: Itt az idő, hogy megtanuljunk függvényeket definiálni. A függvény definíciókat
          csillaggal jelezzük. A függvény nevét a legfelső sorba írjuk.
      3:
        image: notes/stage13_3.jpg
        text: A blokkok a definíción belül mutatják meg, hogy mit is csinál. Ez a
          függvény, amit "feltölt 5"-nek hívunk egy repeat/ismételd és egy feltölt
          blokkból áll.
      4:
        image: notes/stage13_4.jpg
        text: A definíció csak ott csücsül a munkapadon, de a farmer nem tudja futtatni,
          amíg mi ki nem húzzuk a "feltölt 5" függvényblokkot a függvények közül.
      5:
        image: notes/stage13_5.jpg
        text: Let's put the "fun" back in "FUNction!"
    loop_while:
      1:
        image: notes/stage9_5.jpg
        text: Hi, I'm Makinde! Let's learn about the "while block."
      2:
        image: notes/stage9_6.jpg
        text: A "While"/"Amíg" blokk addig csinálja amit beletettél, amíg a feltétel
          amit az elején tettél igaz.
      3:
        image: notes/stage9_7.jpg
        text: Például ha a farmer áll egy földkupacnál, ő ADDIG tüntet el 1-1 lapátnyi
          földet, AMÍG van ott egyáltalán kupac.
    loop_for:
      1:
        image: notes/stage11_1.jpg
        text: Szia én Trina vagyok, és a Pixar-nál dolgozom. Már egy csomó filmen
          dolgoztam, beleértve a Shreket.
      2:
        image: notes/stage11_2.jpg
        text: Ez az új számlálós ciklus. Ez végrehajtja a feladatait újra és újra,
          minden alkalommal egy kicsit másképp.
      3:
        image: notes/stage11_3.jpg
        text: 'Ebben a példában a mi "számláló" ciklusunk azt mondja: "Számolj a számlálóval
          50-től 90-ig 10-esével", és a cikluson belül van a "rajzoljon egy négyzetet"
          blokk. Húzd a "számláló" blokkot a  "Változók" közül a  "hossza" helyére.'
      4:
        image: notes/stage11_4.jpg
        text: Ez azt jelenti, hogy a művészünk rajzol egy 50 képpontos négyzetet,
          majd hozzáad  10-et, és rajzol egy 60 képpontosat,. Majd újra hozzáad 10-et
          és rajzol egy négyzetet, amíg eléri a 90-et. Végül lesz 50, 60, 70, 80 és
          90 oldalú négyzetünk.
    parameters:
      1:
        image: notes/stage15_1.jpg
        text: Szia Janete vagyok, egy mernok vagyok Zynganal.
      2:
        image: notes/stage15_2.jpg
        text: Mit tegyünk, ha egy csomó, különböző méretű háromszöget akarunk rajzolni?
      3:
        image: notes/stage15_3.jpg
        text: Legépelhetjük az egész, hosszú kódot, vagy használhatunk függvényt paraméterekkel.
      4:
        image: notes/stage15_4.jpg
        text: Hogy ezt megtehessük, kattintsunk a kék csillagra a"rajzolj háromszöget"
          függvény definícióján. Ezután húzd a "bemenet neve" változót az "input"/"bemenet"
          blokkba.
      5:
        image: notes/stage15_5.jpg
        text: Ekkor ha "hosszúság"-ot írsz a mezőbe, amikor az írja "x" és lenyomod
          az "Enter"-t, akkor megadod a "hosszúság" bemenetét a függvényednek.
      6:
        image: notes/stage15_6.jpg
        text: Ezután kattints a csillagra. Most kattints a változók kategóriára és
          húzd a "hossz" elemet a "haladj előre" elemre a függvényeden belül. Ezután
          dobd ki a régi szám blokkot.
      7:
        image: notes/stage15_7.jpg
        text: Hogy egy függvényt paraméterekkel használj, kattints a függvények kategóriájára
          és húzd ki a "rajzolj egy megadott méretű háromszöget" függvényt.
      8:
        image: notes/stage15_8.jpg
        text: Most a matematikai blokkot használva számokat adhatsz meg, hogy különböző
          méretű háromszögeket rajzolj.
    hoc_wrapup:
      1:
        image: notes/hoc6_1.jpg
        text: Gratulálok! Az utolsó játék megoldásakor egy olyan kódot írtál, amely
          bármilyen robotnak segítene végigmenni egy nem elágazó útvesztőben vagy
          alagútban, függetlenül annak hosszától. Ez a robot nem csak zombi vagy madár,
          de akár marsjáró vagy önmagát vezető autó is lehet.
      2:
        image: notes/hoc6_2.jpg
        text: Ezek az alap koncepciók alkotják a szívét minden programnak vagy alkalmazásnak,
          amit valaha használni fogsz. Megismertük az ismétlés, az ismétlés amíg,
          a ha és a ha másképp utasításokat.
      3:
        image: notes/hoc6_3.jpg
        text: Ha tetszett az első kódolás órád akkor látogass el a code.org weboldalra,
          hogy tovább folytathasd a tanulást. A 20 órás kurzusunk befejezése után
          tisztában leszel a programozás alapjaival, és elkezdhetsz telefon alkalmazásokat,
          robot utasításokat, játékokat vagy bármi mást írni.
      4:
        image: notes/hoc6_4.jpg
        text: 'A technológia mindent megváltoztat, amit csinálunk, és nem számít,
          ha fiatal vagy öreg vagy: a programozás szórakoztató, kreatív és bárki megtanulhatja!'
    20_wrapup:
      1:
        image: notes/bird.png
        text: "Útmutató jegyzetek hamarosan!"
    frozen_intro:
      1:
        image: notes/frozen1_1.jpg
        text: Sziasztok, a nevem Lindsey. Modellkedem, színészkedek, és a saját appjaimat
          írom. Használjuk a kódot, hogy csatlakozzunk Annához és Elsához, ahogy felfedezik
          a jég varázsát és szépségét.
      2:
        image: notes/frozen1_2.jpg
        text: Hópelyheket és mintákat fogsz majd létrehozni ahogy jégkorcsolyázol
          és létrehozol egy téli csodaországot, amit aztán majd megoszthatsz a barátaiddal.
      3:
        image: notes/frozen1_3.jpg
        text: A következő órában meg fogod megtanulni az alapjait a kódolásnak. A
          hagyományos programozás általában szöveges, de mi a Blockly-t fogjuk használni,
          amely vizuális elemeket használ, amit használva fogd és vidd módszerrel
          tudsz programokat írni. Még az egyetemi hallgatók is így tanulják az alapokat.
          Az álarc alatt, továbbra is kódot írsz.
      4:
        image: notes/frozen1_4.jpg
        text: Egy program utasítások sora, amely megmondja a számítógépnek, hogy mit
          csináljon. Építsünk egy kódot, vagy egy programot, amely segít Elsának egy
          egyszerű vonalat létrehozni. Ezt arra fogjuk használni a későbbiekben, hogy
          más bonyolult mintákat készítsünk.
      5:
        image: notes/frozen1_5.jpg
        text: A képernyőd három fő részből áll. A bal oldalon van a jég felülete,
          ahol a programod futtathatod. Minden szinthez a leírás pont ott a felület
          alatt található.
      6:
        image: notes/frozen1_6.jpg
        text: Ez a középső terület az eszköztár, minden ilyen blokk egy utasítás,
          amit Elsa és Anna megtehet.
      7:
        image: notes/frozen1_7.jpg
        text: A fehér hely a jobb oldalon a munkaterület, ez az, ahol a programot
          építjük majd. A jégen való mozgáshoz használnod kell a "Menj előre" blokkot.
      8:
        image: notes/frozen1_8.jpg
        text: Itt, a "Menj előre" blokk azt jelenti, hogy "lépj előre 100 pixelt".
          Amikor megnyomjuk a "Futtatás"-t, mi történik? Elsa előrehalad egy bizonyos
          távolságra a képernyőn, pontosan 100 képpontnyit! A pixelek alapvetően nagyon
          apró négyzetek a számítógép képernyőjén.
      9:
        image: notes/frozen1_9.jpg
        text: A másik blokk ami ebben a feladványban van, azt mondja hogy "Fordulj
          jobbra 90 fokkal". Amikor használjuk ezt a "Fordulj jobbra" blokkot, attól
          Elsa elfordul egy bizonyos mértékben. Tudsz játszani azzal, hogy mennyire
          szeretnéd hogy Elsa elforduljon. A szög az Elsa előtti útból van számítva.
          Szóval, ez egy 90 fokos fordulat. És ez egy 120 fokos fordulat.
      10:
        image: notes/frozen1_10.jpg
        text: Ne feledd, meg tudod változtatni a pixelek számát és a szöget a mellettük
          levő nyilakra kattintva.
    frozen_loops:
      1:
        image: notes/frozen2_1.jpg
        text: Helló, Paola vagyok! A számítógépek nagyon jók műveletek ismétlésében.
          El tudsz számolni a 10-ig, 20-ig, vagy 100-ig. De egy számítógép el tud
          számolni egy milliárdig vagy billióig. Nem fog unatkozni, és ez csak egy
          pár másodpercet vesz igénybe. Mindegy, hogy számolás, vagy rajzolás, vagy
          bármi más - a számítógépek megismételhetik a dolgokat több százszor, vagy
          akár több milliárdszor.
      2:
        image: notes/frozen2_2.jpg
        text: A programozásban ezt nevezzük ciklusnak. A ciklus az, ahogyan megismétled
          a kódod újra és újra. A következő feladatban, az a cél, hogy segíts Annának
          létrehozni egy négyzetet, az "Ismételd" blokkal.
      3:
        image: notes/frozen2_3.jpg
        text: Amilyen kódblokkot teszel az "Ismételd" blokkba, az annyiszor lesz ismételve
          ahányszor csak akarod.
      4:
        image: notes/frozen2_4.jpg
        text: Hogy egy négyzetet rajzolj, használhatod a "Menj előre" és a "Fordulj
          jobbra" blokkokat 4-szer. De a könnyebb út, ha megmondod a számítógépnek,
          hogy "Menj előre" és "Fordulj jobbra 90 fokkal" egyszer, aztán azt mondani,
          hogy ismételje meg ezt a pár műveletet 4-szer. Ehhez be kell tenni a "Menj
          előre" és a "Fordulj jobbra" blokkokat egy "Ismételd" blokkba.
      5:
        image: notes/frozen2_5.jpg
        text: Ne feledd, meg tudod változtatni a számot az "Ismételd" blokkban bármire,
          és ez annyiszor fogja megismételni azt, ami a blokkon belül van.
    frozen_functions:
      1:
        image: notes/frozen3_1.jpg
        text: "Üdv, Chris Bosh vagyok. Profi kosaras vagyok, és én a fősulin programoztam."
      2:
        image: notes/frozen3_2.jpg
        text: Egyike legfontosabb ötleteknek a számítástechnikában, hogy hogyan határozzunk
          meg új parancsokat. A legtöbb számítógépes nyelv csak mintegy 100 szót vagy
          parancsot tartalmaz. És valóban, a művészet és a varázslat a saját új szavak
          ezen építőelemekből való meghatározása.
      3:
        image: notes/frozen3_3.jpg
        text: Ha már egyszer megtanítottad a számítógépet, hogyan kell csinálni egy
          műveletet bizonyos utasítások sorával, akkor kitalálhatsz egy nevet a művelethez,
          hogy később könnyen megismételhesse. Ha a saját parancsod hozol létre, és
          nevet adsz neki, azt függvénynek hívják.
      4:
        image: notes/frozen3_4.jpg
        text: Helló, Jess vagyok. A blokkokkal való programozás során úgy használnád
          a függvényeket, mintha olyan utasítások gyűjteményei lennének, amelyeket
          sokszor akarsz használni. Például írtál egy kódot, ami egy négyzetet rajzol.
      5:
        image: notes/frozen3_5.jpg
        text: 'Készíthetsz egy függvényt erre mint "Hozz létre egy négyzetet". '
      6:
        image: notes/frozen3_6.jpg
        text: Most van egy új blokk, melynek segítségével több alkalommal használhatsz,
          hogy négyzeteket készíts.
      7:
        image: notes/frozen3_7.jpg
        text: Sok egyszerű formából bonyolultabb minták hozhatóak létre. A következő
          feladványban a kód amit nemrég írtál arra, hogy egy kört készíts, elérhető
          mint egy új függvény, amellyel különböző méretű köröket készíthetsz. Tudod
          használni, hogy segíts Elsának tekervényes és gyönyörű mintákat készíteni
          a hóban?
    playlab_intro:
      1:
        image: notes/playlab_intro_1.png
        text: Játékokat fogunk létrehozni a Játéklabor használatával. A jó játékoknak
          van egy története, és minden történetnek vannak szereplői. Megtanuljuk,
          hogyan bírhatjuk rá a szereplőinket, mint a boszorkányokat, az űrlényeket
          és az állatokat arra, hogy beszéljenek, mozogjanak és kölcsönhatásba lépjenek
          egymással. E tanfolyam végére képes leszel arra, hogy elkészíts egy játékot
          a semmiből és meg tudd osztani azt a barátaiddal.
      2:
        image: notes/playlab_intro_2.png
        text: 3 fő részre van felosztva a képernyőd. A bal oldalon van a játéktér,
          ahol a program fog futni. Az utasítások minden egyes szinthez alól vannak
          odaírva.
      3:
        image: notes/playlab_intro_3.png
        text: A középső területen az eszközkészlet van, és minden egyes blokk - egy
          kódrészlet. A jobb oldalon lévő üres területet munkaterületnek nevezik,
          és itt készítjük majd el a programunkat.
      4:
        image: notes/playlab_intro_4.png
        text: Az indításhoz, a blokkjaidat hozzá kell csatolnod a narancssárga "amikor
          fut" blokkhoz. Több blokkot is összekapcsolhatsz úgy, hogy elhúzod őket
          a sárga vonalig, és akkor majd összekapcsolódnak.
      5:
        image: notes/playlab_intro_5.png
        text: Ebben az első feladványban a szereplőnk egy pingvin, akit ráveszünk
          arra, hogy mondjon egy "Helló!"-t. Ehhez áthúzzuk a "szereplő mondja" blokkot,
          összekapcsoljuk a  "futtatáskor" blokkal, és beleírjuk azt, hogy "Helló."
          A pingvint a "mozogj jobbra" és a "mozogj balra" blokkok használatával is
          mozgásra bírhatjuk. Miután elhelyezted a blokkokat, nyomd meg a futtatás
          gombot, hogy lásd mit programoztál.
      6:
        image: notes/playlab_intro_6.png
        text: A kezdj hozzá, és a végére majd el tudsz készíteni egy saját játékot
          mindenféle egymással kölcsönhatásba lépő szereplővel, akik boldoggá vagy
          szomorúvá válhatnak, pontokat szerezhetnek, tűgolyókat dobhatnak egymásra,
          vagy akár el is tudják tüntetni egymást. Az egész rajtad múlik és a játékon,
          amit el szeretnél készíteni.
    playlab_events:
      1:
        image: notes/playlab_events_1.png
        text: Most mi arról fogunk tanulni, amit nap mint nap minden játékprogramozó
          használ. Ezt eseménynek nevezzük. Az esemény arra készteti a programodat,
          hogy figyelje, ha valami történik. Amikor ez az esemény bekövetkezik, akkor
          a programod végrehajt egy műveletet.
      2:
        image: notes/playlab_events_2.png
        text: Például eseményeknek tekintjük az egérkattintást, a nyilakat ábrázoló
          gombok leütését vagy a képernyő megérintését.
      3:
        image: notes/playlab_events_3.png
        text: Itt az űrrobotot fogjuk rávenni arra, hogy köszöntse a Földlakókat ha
          egy játékos rákattint. A "kattintásra" blokkot fogjuk használni, és hozzácsatolni
          a "mondd" blokkhoz. Ha a játékos rákattint az űrrobotra, minden végre lesz
          hajtva ami a "kattintásra" esemény blokkhoz csatlakozik.  Mit mond az idegened?
      4:
        image: notes/playlab_events_4.png
        text: Vannak "ha nyíl" blokkok is. Ha a "mozogj" blokkokat hozzárendeled ezekhez,
          akkor máris tudod mozgatni a szereplőket fel, le, balra, vagy jobbra. A
          játékod lépésről lépésre egyre interaktívabbá válik.
    playlab_repeat_forever:
      1:
        image: notes/playlab_repeat_forever_1.png
        text: Ez az "ismételd mindig" blokk. Minden ezen a blokkon belül örökké ismétlődni
          fog a játék ideje alatt.
      2:
        image: notes/playlab_repeat_forever_2.png
        text: Ha azt akarjuk, hogy egy szereplő valamit többször, a játékos beavatkozása
          nélkül csináljon meg, a végrehajtandó blokkokat berakjuk a "végtelen ismétlés"
          blokkba.
      3:
        image: notes/playlab_repeat_forever_3.png
        text: Ebben a feladványban a célunk, hogy segítünk a varázslónak felvigyázni
          a Királyság határait, folyamatosan járőrözve balról jobbra. Megtanuljuk,
          hogyan működnek az ismétléses utasítások, amivel egy csomó időt takaríthatunk
          meg, ha majd saját játékot fogunk készíteni.
    C1_artist_intro:
      1:
        image: notes/C1_artist_intro_1.png
        text: Ezek a rajzolási blokkjaid. Használd közülük az egyiket a művész mozgatásához
          arra a helyre, ahol megrajzolhatja a szürke vonalakat.
      2:
        image: notes/C1_artist_intro_2.png
        text: Ezek az ugrás blokk tagjai. Mikor ezeket használod, a művészed nem rajzol,
          hanem a következő szürke vonalra ugrik.
    C1_bee_level_intro:
      1:
        image: notes/C1_bee_level_intro_1.png
        text: Ugye milyen jó pofák ezek a méhek? A következő lépés a feladványban,
          hogy segíts a méhnek eljutni a virágokhoz, hogy összegyűjtse a nektárt és
          elrepüljön a méhsejtre, hogy mézet készítsen. Használnod kell a "get nectar"
          azaz nektár begyűjtés, és a "make honey" azaz készíts mézet blokkokat ebben
          a gyakorlatban.
      2:
        image: notes/C1_bee_level_intro_2.png
        text: 'Minden virágon különböző számú nektár van: 1, 2, 3 vagy több. Tudjuk,
          hogy mennyi nektár van piros virágban, amit a sarkában lévő kis szám mutat.
          Bizonyosodj meg róla, hogy minden nektárt összeszedtél, mielőtt tovább mész.
          Továbbá minden méhsejt 1, 2, 3 vagy többet tartalmazhat. Győződj meg róla,
          hogy csak annyi nektárt tegyél a sejtbe, amennyit elbír.'
      3:
        image: notes/C1_bee_level_intro_3.png
        text: Ha összegyűjtöttél minden nektárt, és elkészítetted az összes mézet,
          akkor vagy készen, és léphetsz a következő szintre. Ellenkező esetben meg
          kell ismételni a feladatot. Játszd végig és meg fogod érezni, milyen egy
          igazi programozó méh!
    C1_bee_loops:
      1:
        image: notes/C1_bee_loops_1.png
        text: A ciklus egy tevékenység ismételgetése. Tehát ha egy kaptárt vizsgálok
          meg, kiveszek egy keretet, megnézem, visszateszem, aztán ugyanezt megcsinálom
          a többi kerettel. Elölről kezdek mindent, ugyanazokat a lépéseket csinálom
          újra és újra.
      2:
        image: notes/C1_bee_loops_2.png
        text: Ezen a pályán azt szeretnénk, ha a méhecske három nektárt gyűjtene össze
          a virágokról. Ahelyett, hogy három "Gyűjts nektárt" blokkot használnánk,
          egy ciklus segítségével ismételjük ugyanazt a blokkot háromszor. Kattintsz
          a "Futtatás" gombra, és nézd meg, hogy sikerült-e! Ügyes voltál!
    C1_bigevent_unplugged:
      1:
        image: notes/C1_bigevent_unplugged_1.png
        text: Ennek a leckének a Nagy Esemény nevet adtuk. Arról szól, hogy hogyan
          irányítjuk a programjainkat és hogyan hogyan változik a programunk futása
          futtatás közben események segítségével - például amikor lenyomunk egy billentyűt,
          vagy amikor az egérrel kattintunk.
      2:
        image: notes/C1_bigevent_unplugged_2.png
        text: For this lesson, you'll be controlled with a paper remote control. It's
          just like a real-live video game.
      3:
        image: notes/C1_bigevent_unplugged_3.png
        text: An event is an action  that causes something to happen. It's like when
          you click the button on a mouse and a webpage loads. That's an event. When
          you touch your screen on a tablet to scroll, that's an event also. Events
          are a great way of letting the user direct your program whenever they need
          or want to.
      4:
        image: notes/C1_bigevent_unplugged_4.png
        text: Things happen that we all respond to. We feel hungry and we go to the
          fridge. We hear the mailman come and he puts our mail in the mailbox  and
          then we go get our mail. Those are just like the events of pushing a button
          or moving a joystick. They are something that happens that triggers us to
          do something.
      5:
        image: notes/C1_bigevent_unplugged_5.png
        text: A számítógépes játékokban van egy "Update", vagyis "Frissítés" esemény,
          ami 30-60-szer történik meg másodpercenként. Játékfejlesztőknek ez az esemény
          szinte fontosabb, mint a billentyűk vagy az egér eseményei.
      6:
        image: notes/C1_bigevent_unplugged_6.png
        text: The main event we're watching for is that "Update" tick happening. And
          then we check the joystick in the tick. So we say, "Oh, has somebody pushed
          the button this frame? Yes or no?" Without events, the player couldn't move,
          you couldn't jump, you wouldn't be able to control what's going on. The
          videogame wouldn't be able to animate anything.
    C1_building_foundation:
      1:
        image: notes/C1_building_foundation_1.jpg
        text: In sand sculpture you've got to know that failure is part of the program.
          But if you're persist, it's just going to get nothing but better and more
          exciting for you.Persistence is the name of the game. Stay with it, you'll
          love it.
      2:
        image: notes/C1_building_foundation_2.jpg
        text: This lesson is called building a foundation. In this lesson, we'll work
          on a task that is meant to be really difficult. You will figure out how
          to make a structure at least as tall as one of these cups and it's got to
          be strong enough to hold the weight of a book.
      3:
        image: notes/C1_building_foundation_3.jpg
        text: There might be times that our creation doesn't work out. There might
          be times that we get frusrated and want to give up. There might be a lot
          of those moments. But if we keep on trying, give it our best shot over and
          over again, then we're sure to get it before long.
      4:
        image: notes/C1_building_foundation_4.jpg
        text: Persistence is all about hanging in there when you really want to give
          up. If you want to create something new and different, there's going to
          be a lot of failures along the way.
      5:
        image: notes/C1_building_foundation_5.jpg
        text: The trick to persistence is choosing to keep on going and learn from
          your failures instead of quitting because you're frustrated. Frustration
          actually just means there's something wonderful around the corner. So don't
          quit before you get to it. Wooo!
    C1_getting_loopy:
      1:
        image: notes/C1_getting_loopy_1.png
        text: Hi, my name is Miral Kotb and I'm the creator of Iluminate. In my work,
          there is something we use in both dances and in programming lightsuits.
          And that is loops! Loops are repeating an action over and over.
      2:
        image: notes/C1_getting_loopy_2.png
        text: When you repeat something multiple times, like my actions to keep the
          hula hoop spinning, I'm performing a loop of that action. This is a loop.
          This is a loop. And this is a loop.
      3:
        image: notes/C1_getting_loopy_3.png
        text: Today we're going to have a dance party. We'll act out loops with a
          new dance. The Iteration. We're going to learn about loops using a dance.
          You will learn a couple of easy steps and repeat them over and over to complete
          the dance.
      4:
        image: notes/C1_getting_loopy_4.png
        text: Here are the steps you need to learn. Clap your hands. Put your hands
          behind your head. Put your hands on your waist. Lift your left hand up.
          Lift your right hand up. Pretty simple, right? You will discover that you
          can shorten the directions by putting some dance steps in loops.
      5:
        image: notes/C1_getting_loopy_5.png
        text: We actually do use loops in our dancing. The dancers are wearing computers,
          all in the same network. I might loop the lights through to the same dancers
          over and over again. In the loop I might have an iteration where I'll say
          you want to go loop through these six dancers over and over again and then
          within the loop you want to increase the speed of the light. And that's
          all created through loops. Loops are important in computer science because
          they make our work shorter and easier.
    C1_happy_maps_unplugged:
      1:
        image: notes/C1_happy_maps_unplugged_1.png
        text: This lesson is called Happy Maps. Today we're gonna help our furry little
          friend Flurb get to her fruit.
      2:
        image: notes/C1_happy_maps_unplugged_2.png
        text: Make your Flurb go to your fruit. To do this you'll need to figure out
          which way the Flurb needs to go and direct her with arrows. In order for
          the Flurb to get to the apple, what direction does the Flurb have to go?
          Line to make it go up.
      3:
        image: notes/C1_happy_maps_unplugged_3.png
        text: To get it there you circle the direction that it has to go.
      4:
        image: notes/C1_happy_maps_unplugged_4.png
        text: Create your algorithm by gluing arrows next to the map that you're trying
          to solve. The second one it's the same but it's going down.
      5:
        image: notes/C1_happy_maps_unplugged_5.png
        text: Mintha papíron programoznál. Ennyi az egész!
    C1_maze_debugging:
      1:
        image: notes/C1_maze_debugging_1.png
        text: Debugging is finding and fixing problems. There are lots of ways to
          debug problems. One of the easiest is to move step by step until where you
          find where something goes wrong. Here I'm trying to do a back handspring
          on the beam but I keep falling off.
      2:
        image: notes/C1_maze_debugging_2.png
        text: I walked through each part step by step and realized where my mistake
          was. I wasn't putting my hands on the beam correctly. So I tried another
          back handspring on the beam with my new hand position and I got it. I was
          really glad I debugged my back handspring.
      3:
        image: notes/C1_maze_debugging_3.png
        text: To learn about debugging, we start with a set of blocks already on the
          stage. You'll notice that these blocks won't get you to the goal. We need
          to debug the solution and fix it. What went wrong? You'll notice that you
          needed to keep going west one more block.
      4:
        image: notes/C1_maze_debugging_4.png
        text: Javítsuk ki ezt egy új nyugat blokk hozzáadásával és indítsuk el újra.
          Hurrá! Megcsináltad!
    C1_maze_intro_sequencing:
      1:
        image: notes/C1_maze_intro_sequencing_1.png
        text: Segíts a madárnak a malachoz jutni. Nézd meg a labirintust és döntsd
          el merre menjen.
      2:
        image: notes/C1_maze_intro_sequencing_2.png
        text: Húzd a blokkokat az eszközkészletből a munkaterületre. Bizonyosodj meg
          róla, hogy a "futtatáskor" blokk alatt szerepel a helyes megoldásod, majd
          kattints a "Futtatás" gombra, és nézd meg, hogyan megy oda a madár a malachoz.
    C1_maze_loops:
      1:
        image: notes/C1_maze_loops_1.png
        text: One that computers are really good at is repeating commands. As a person,
          you'd get really bored if you had to do the same thing lots and lots of
          times in a row. But a computer can do the same thing millions or even billions
          of times and not get bored and be able to carry that out really well.
      2:
        image: notes/C1_maze_loops_2.png
        text: For example, if I wanted to wish everyone on Facebook a happy birthday
          by sending them an email, it might take me more than century to actually
          write out all those emails to everyone. But with just a few lines of code,
          I can have a system send an email to everyone on Facebook wishing them a
          happy birthday.
      3:
        image: notes/C1_maze_loops_3.png
        text: To get the bird to the pig in this level... rather than drag three North
          blocks on to the workspace, you will use the "repeat" block. Drag the "repeat"
          block on to the workspace and enter the number 3. Then drag the "move North"
          block into the "repeat" block and hit "Run" to see if you got it right.
          Congratulations, you got it!
    C1_moveitmoveit_unplugged:
      1:
        image: notes/C1_moveitmoveit_unplugged_1.png
        text: This lesson is called move it, move it. Together we're going to write
          a program to get our friends from the starting with the compass rose to
          the smiley face goal.
      2:
        image: notes/C1_moveitmoveit_unplugged_2.png
        text: But the smiley is face down and only one person knows how to get there.
          Let's get this program started.
      3:
        image: notes/C1_moveitmoveit_unplugged_3.png
        text: A program egy olyan algoritmus, amit olyan formában kódoltak, hogy azt
          egy gép futtatni tudja. A legtöbbünk a program alatt a számítógépes programot
          értjük, de máshol is hasznosak tudnak lenni. Meg tudod írni a saját játékodat
          vagy akár egy robotot is programozhatsz, hogy helyetted csináljon meg dolgokat.
    C1_going_places_safely:
      1:
        image: notes/C1_going_places_safely_1.png
        text: A nevem Jeremiah. Szia! Hét éves vagyok. Szeretek játszani anyukám számítógépn
          de mindig megkérdezem szabad-e. "Anyu, játszhatok a számítógéppel? Persze!"
      2:
        image: notes/C1_going_places_safely_2.png
        text: Szeretem anyukám számítógépét, mert meg tudom nézni az internetet. Az
          internet olyan mint a lakókörnyék. Király helyekre mehetsz, tudsz beszélgetni
          a családoddal és a barátaiddal és egy csomó új dolgot tanulhatsz.
      3:
        image: notes/C1_going_places_safely_3.png
        text: Tegnap meglátogattam egy állatkertet, amely házam közelében van. Láttam
          egy zebracsikót. Lefényképeztem és megváltoztattam a csíkjai színét, adtam
          neki egy kalapot és hozzáadtam a fura állatok gyűjteményemhez. Menő! Egy
          messzi tájra utaztam, Kenyába. Ez egy ország Afrikában. Ott sok zebra él.
      4:
        image: notes/C1_going_places_safely_4.png
        text: Sometimes on the internet I talk to peeople I know, like my grandma
          who lives in another state. Hi grandma! She's making me cookies that she'll
          send me for my birthday. "Yummy, I wish the internet had smellorama!" I
          can talk to different people on the internet, like my cousin but I only
          talk to people I know.
      5:
        image: notes/C1_going_places_safely_5.png
        text: What I like most on the interent is that I get to play fun games. Score!
          I also like to draw and create new things and share it with my friends.
          Cool! Sometimes I visit websites where I learn new things but I always stick
          to websites that are just right for me. Wow, dinosaurs!
      6:
        image: notes/C1_going_places_safely_6.png
        text: 'The internet is a super fun place. But just like when you cross a street
          in your neighborhood, you also have to be careful when you go online. Here
          are three rules to remember. Rule number 1: Always ask your parents first.
          Rule number 2: Only talk to people you know. Rule number 3: Stick to places
          that are just right for you.'
      7:
        image: notes/C1_going_places_safely_7.png
        text: Wow, that was fun! Dinnertime. I'm logging off now. I can't wait to
          log on again to see where I can visit next.
    C1_pair_programming:
      1:
        image: notes/C1_pair_programming_1.png
        text: Today we're going to learn about Pair Programming. In pair programming
          you work as a team. Why should two people use one computer? Because two
          heads are better than one. In pair programming you and your partner are
          going to sit down together at one computer and you are both going to work
          on the same project.
      2:
        image: notes/C1_pair_programming_2.png
        text: In pair programming, one person is the driver and the other person is
          the navigator, just like driving a car. The driver sits at the computer
          and is the one using the keyboard and mouse or touchscreen and controlling
          the main actions of the computer. The other person is the navigator. The
          navigator helps the driver by answering the driver's questions and pointing
          out potential problems or mistakes.
      3:
        image: notes/C1_pair_programming_3.png
        text: Communication is key to successful pair programming. No insults, be
          respectful, don't be a bossy navigator, because nobody likes a backseat
          driver. You and your partner should always be talking. The driver can explain
          what she or he is doing. And the navigator can help suggest what to do next.
      4:
        image: notes/C1_pair_programming_4.png
        text: A navigátornak a teljes képet kell látnia, míg a vezető a részletekre
          koncentrál. Mindegyik szerep fontos. A páros programozás a csapatmunkáról
          szól.
    C1_planting_seed:
      1:
        image: notes/C1_planting_seed_1.png
        text: This lesson is called planting a seed and it's going to help us understand
          algorithms. Algorithms are specific instructions that explain the order
          in which to do something. Even everyday things like eating breakfast or
          brushing your teeth are algorithms that require small steps to get a job
          done.
      2:
        image: notes/C1_planting_seed_2.png
        text: A számítógépek nagyon okosak, de csak akkor, ha lépésről-lépésre megmondod
          nekik mit csináljanak. Az algoritmusokban az a jó, hogy ha pontosan követed
          az utasításokat, akkor olyan dolgot is meg tudsz csinálni, amit addig nem.
          Egy algoritmus olyan, mint egy recept.
      3:
        image: notes/C1_planting_seed_3.png
        text: Today we're going to plant our own seeds using an algorithm. Create
          your own algorithm by cutting apart the pictures. Select the pictures that
          show steps in planting a seed and arrange those pictures in the correct
          order.
      4:
        image: notes/C1_planting_seed_4.png
        text: Now, it's time for you to see if your algorithm works. Follow the steps
          in the algorithm very carefully. Are they in the correct order? Did you
          succeed in planting a seed by following the algorithm? It's like programming
          with pictures!
      5:
        image: notes/C1_planting_seed_5.png
        text: When we want to make chocolate, there are many big steps to that process
          and each of those big steps has a set of smaller steps and there are different
          recipes or algorithms depending on how we want the chocolate to taste. Each
          step is important, even the small ones, so that without one step, the rest
          of them cannot be completed. Creating algorithms that others can understand
          is really important. That's why each step has to be written down so that
          no matter who does it, the result is the same.
    C1_playlab_storytelling:
      1:
        image: notes/C1_playlab_storytelling_1.png
        text: Time to get creative and use your coding skills to tell a story. Your
          story will have actors and you will be able to make these actors talk and
          interact with each other. Start thinking of what kind of story you want
          to tell.
      2:
        image: notes/C1_playlab_storytelling_2.png
        text: The cat's always been afraid of the dog and what if the cat figures
          out that the dog is trying to be nice? The "when run" block starts everything.
          The "move" block will move your character and the "say" block will make
          your character say whatever you type.
      3:
        image: notes/C1_playlab_storytelling_3.png
        text: Ez az "amikor összeütköznek" blokk, amihez újabb blokkokat csatlakoztathatsz.
      4:
        image: notes/C1_playlab_storytelling_4.png
        text: Beállítottam, hogy a kutya idejöjjön, és azt mondja, hogy "Szia", de
          ekkor a macska megijedt, és elfutott. "Ahhh." Ha több időm lenne, akkor
          biztosan jól végződött volna. Vége!
    C1_spelling_bee_intro:
      1:
        image: notes/C1_spelling_bee_intro_1.png
        text: This is the spelling bee level. Use the puzzle pieces to move the bee.
          As it moves, it will collect letters to spell words.
      2:
        image: notes/C1_spelling_bee_intro_2.png
        text: See if you can spell the word they give you in the box below the stage.
          But bee careful! Moving the wrong direction will add letters you don't want.
    C1_zuck_repeat_loop:
      1:
        image: notes/C1_zuck_repeat_loop_1.png
        text: One that computers are really good at is repeating commands. As a person,
          you'd get really bored if you had to do the same thing lots and lots of
          times in a row. But a computer can do the same thing millions or even billions
          of times and not get bored and be able to carry that out really well.
      2:
        image: notes/C1_zuck_repeat_loop_2.png
        text: For example, if I wanted to wish everyone on Facebook a happy birthday
          by sending them an email, it might take me more than century to actually
          write out all those emails to everyone. But with just a few lines of code,
          I can have a system send an email to everyone on Facebook wishing them a
          happy birthday.
      3:
        image: notes/C1_zuck_repeat_loop_3.png
        text: In this example, your goal is going to be to move the bird to get the
          pig. Now, we're going to be able to use the repeat block in order to be
          able to do this very easily. You can either do this by giving the computer
          a move forward command five times in order to advance the bird one step
          each time to the pig or you can just tell the computer to move forward once,
          and then tell it to repeat that five times and it'll do the same thing.
      4:
        image: notes/C1_zuck_repeat_loop_4.png
        text: Ehhez húzd a "lépj előre" parancsot, majd tedd az "ismételd" blokkba.
          Ezután kattints rá, majd add meg, hogy mennyiszer kell ismételni a blokkot,
          vagyis, hogy mennyi lépést kell előre menni.
      5:
        image: notes/C1_zuck_repeat_loop_5.png
        text: One more thing is you can put as many commands as you want inside the
          repeat block. So in this example, you're telling it to move forward and
          turn left, which it'll do five times. Have fun!
    C2_artist_intro:
      1:
        image: notes/C2_artist_intro_1.png
        text: You wouldn't even qualify for the race if you don't have people who
          are proficient in computer science because of how much data the cars collect
          and the necessity to be able to have people that can write programs to figure
          out how you continue to figure out how to build performance.
      2:
        image: notes/C2_artist_intro_2.png
        text: Ezekben a fejtőrökben egy művész leszek, aki a ceruzájával különböző
          alakzatokat fog rajzolni. Bármerre megy a művészed, egy vonalat fog rajzolni.
      3:
        image: notes/C2_artist_intro_3.png
        text: A vásznon való mozgáshoz használd a "lépj előre" blokkot. Itt a "lépj
          előre" blokk 100 képpontnyi előre lépést jelent. Mi történik, amikor a "Futtatás"
          gombra kattintasz? A művész előre lép egy bizonyos mennyiséget, és ez a
          mennyiség 100 képpont. A képpontok lényegében nagyon pici négyzetek a számítógép
          képernyőjén.
      4:
        image: notes/C2_artist_intro_4.png
        text: A másik blokk, ami ebben a feladványban szerepel a "fordulj jobbra 90
          fokot" blokk. És amikor ezt használjuk, a művész egy bizonyos mértékben
          elfordul. Játszhatsz azzal, hogy mennyit forduljon el a művész. Ez egy 90
          fokos fordulat.
      5:
        image: notes/C2_artist_intro_5.png
        text: Ez pedig egy 120 fokos fordulat. Ne felejtsd el, hogy ezeket az értékeket
          a képpont, illetve a fok melletti nyílra kattintva megváltoztathatod. Jó
          szórakozást a rajzoláshoz!
    C2_bee_conditionals:
      1:
        image: notes/C2_bee_conditionals_1.png
        text: This is the conditional block. It says IF there is nectar or honey that
          is less than, equal to or greater than a number, THEN do something.
      2:
        image: notes/C2_bee_conditionals_2.png
        text: Ez akkor hasznos, ha nem tudjuk mennyi nektárt vagy mézet kell összegyűjtenünk,
          mint ahogy itt látjuk, az a kérdőjellel.
      3:
        image: notes/C2_bee_conditionals_3.png
        text: In this example, we're going to say IF the purple flower has nectar
          greater than 0, get nectar. That will tell our bee to keep getting nectar
          as long as it's there. Ta-dah!
    C2_binary_bracelets:
      1:
        image: notes/C2_binary_bracelets_1.png
        text: This is the binary bracelets lesson. We are going to code our initials
          on a bracelet we can wear and show all our friends!
      2:
        image: notes/C2_binary_bracelets_2.png
        text: A bináris számrendszer arra alkalmas, hogy csak két értéket jelentsünk
          meg. Sokszor az emberek csak 1-esekre és 0-kra gondolnak, de a bináris számrendszer
          alkalmas "be" vagy "ki", "fel" vagy "le", vagy bármilyen ellentét leírására.
      3:
        image: notes/C2_binary_bracelets_3.png
        text: Szia, a nevem Orion és robotokat programozok a Play-im-nél. Minden számítógép
          és robot legelemibb építőeleme elektromos kapukból áll. Ha a kapu nyitva
          van, az áram át tud rajta folyni, ha zárva van, nem tud.
      4:
        image: notes/C2_binary_bracelets_4.png
        text: An example of binary on the robot is the robot's eyes. The robot's eyes
          are LEDs and those are lights that are either on or off. It's a binary system,
          one or the other. We can use the lights to represent binary numbers. If
          we have a set of robots, we can say that the first robot is the 1s place
          and the second robot is the 2s place, the third robot is the 4s place and
          so on. That's how you represent a binary number. The robots will do it with
          their binary eyes and count it out for you.
    C2_conditionals_with_cards:
      1:
        image: notes/C2_conditionals_with_cards_1.png
        text: This lesson is called conditionals with cards. Every day you make decisions
          based on what you see and hear.
      2:
        image: notes/C2_conditionals_with_cards_2.png
        text: I want to walk to the park but first I have to decide whether I should
          bring an umbrella or not. So I look out the window. If it's cloudy, I'm
          going to take my umbrella. Else, I'll take some sunglasses. I think I'd
          better take the umbrella. What I see and hear determines what I take to
          the park.
      3:
        image: notes/C2_conditionals_with_cards_3.png
        text: Conditionals are used in games too. Today we're going to practice using
          conditionals with a card game. In this game, the card that I draw determines
          what my friends are going to do. If I draw a seven, everyone claps. Else,
          everyone says "awww." Let's try it! "Awww" "cheers"
      4:
        image: notes/C2_conditionals_with_cards_4.png
        text: Fogadok, hogy tudsz olyan játékot készíteni, amely feltételes elágazások
          használatával még szórakoztatóbb. Próbáld meg! A számítógépek feltételes
          elágazások miatt tűnnek okosnak. A feltételeket tartalmazó programok reagálni
          tudnak a felhasználói tevékenységekre, és az alapján hajtanak végre műveleteket.
      5:
        image: notes/C2_conditionals_with_cards_5.png
        text: Think about your favorite video game. Do you earn more points for some
          actions than you do for others? This occurs because the computer is using
          conditionals. It's the way a computer makes a decision. How about, if you
          hit the target, you earn ten points. Else, you lose three. When you know
          how conditionals work, you can create all kinds of exciting games.
    C2_artist_debugging:
      1:
        image: notes/C2_artist_debugging_1.png
        text: Már elhelyeztünk pár blokkot, de valami nem működik.
      2:
        image: notes/C2_artist_debugging_2.png
        text: 'Keressük meg a hibát a kódban: lassítsuk le a játékot, és figyeljük
          meg mi történik lépésről-lépésre.'
      3:
        image: notes/C2_artist_debugging_3.png
        text: Ott a hiba! A cica bajsza 75 pixel hosszú, nem 25.
    C2_bee_debugging:
      1:
        image: notes/C2_bee_debugging_1.png
        text: Hallottál már a programok hibakereséséről? Így lehet megtalálni, ha
          egy program nem működik helyesen. Amikor hibakeresel, megtalálod és kijavítod
          a hibákat.
      2:
        image: notes/C2_bee_debugging_2.png
        text: Már elhelyeztünk pár blokkot. A "Lépés" gombot fogjuk használni hogy
          minden blokkot lépésről-lépésre vizsgálhassunk. Így meg tudjuk nézni, hogy
          helyes-e a megoldás, és ha nem, hol kell kijavítani a kódot.
      3:
        image: notes/C2_bee_debugging_3.png
        text: Úgy tűnik ott a hiba. Szükség van még egy "lépj előre" blokkra. A "Lépés"
          gomb segít a programunk hibakeresésében, hogy megtaláljuk és kijavítsuk
          a hibákat.
    C2_digital_footprint:
      1:
        image: notes/C2_digital_footprint_1.png
        text: On your head you hold your hat and your smarts will tell you where you're
          at and to think about the zoo, and to nod hello to you and you! Use your
          head when you're online to keep what's yours inside your mind and to know
          how to be safe, how to give your life some private space! From your head
          down to your toes, pause, think about it. From your feet up to your nose,
          pause and think online!
      2:
        image: notes/C2_digital_footprint_2.png
        text: Use your heart to grow and grow, and to give yourself a healthy glow,
          and to make a valentine, tell someone that you'll be mine! Use your heart
          when you're online, feel what's right and always kind, and show your friends
          respect, to be fair and nice on the internet. From your head down to your
          toes, pause, think about it. From your feet up to your nose, pause and think
          online!
      3:
        image: notes/C2_digital_footprint_3.png
        text: Use your arms to hug your pet, to keep your clothes from getting wet,
          and to wear your favorite sleeves and to help you fly and make believe.
          Use your arms when you're online, to take break and balance time and leave
          your tech behind and to find yourself a tree to climb. From your head down
          to your toes, pause, think about it. From your feet up to your nose, pause
          and think online!
      4:
        image: notes/C2_digital_footprint_4.png
        text: Use your gut to store your food, and to listen to its growling mood,
          to make a belly flop, and to feel the gas in soda pop. Use your gut when
          you're online, to know to watch for certain signs, and to let it guide the
          way and tell you when it's not ok. From your head down to your toes, pause,
          think about it. From your feet up to your nose, pause and think online!
      5:
        image: notes/C2_digital_footprint_5.png
        text: So think with your head, and feel with your heart, balance with your
          arms, listen to your gut, online. Use your legs to run and kick, and to
          jump and bounce on a pogo stick, and to dance around the block, and to skip
          along in your smelly socks. Use your legs when you're online, to stand up
          to bullies who cross the line, and remember to stand tall, be nice to creatures
          great and small.
      6:
        image: notes/C2_digital_footprint_6.png
        text: From your head down to your toes, pause, think about it. From your feet
          up to your nose, pause and think online! So think with your head, and feel
          with your heart, balance with your arms, listen to your gut, stand up with
          your legs. From your head down to your toes, pause, think about it. From
          your feet up to your nose, pause and think online!
    C2_digital_footprint_v2:
      1:
        image: notes/C2_digital_footprint_v2_1.png
        text: Everytime you go online, you leave a footprint that can be searched,
          copied, shared, broadcast and is permanent. What kind of digital footprint
          are you leaving? What kind of digital footprint do you want to leave?
    C2_graph_paper:
      1:
        image: notes/C2_graph_paper_1.png
        text: This lesson is called "Graph Paper Programming" and it's all about algorithms.
          Today we're going to learn how to write programs that show each other how
          to recreate simple black and white images, using only hand drawn arrows.
      2:
        image: notes/C2_graph_paper_2.png
        text: An algorithm is a list of instructions for completing a task. We'll
          follow this set of instructions to make the bowl. Algorithms are really
          helpful when you need someone else to understand how to do something.
      3:
        image: notes/C2_graph_paper_3.png
        text: If you're writing an algorithm for a computer, you have to break it
          down to little tiny steps. So finish this row and go to the next, then the
          next one, and you'll be done.
      4:
        image: notes/C2_graph_paper_4.png
        text: I use algorithms in my work. If I write down all of the steps I can
          recreate that same piece again, or I can teach someone else to do it. Put
          the glass in the kiln, fuse it together, follow the rest of the instructions
          to make the bowl. Algorithms give you a road map for getting something done.
    C2_artist_loops:
      1:
        image: notes/C2_artist_loops_1.png
        text: Here we are going to use the repeat block to help us save steps when
          we are programming our artist. We already have some blocks out on our stage
          but they are just there to get us started.
      2:
        image: notes/C2_artist_loops_2.png
        text: To loop those blocks four times to draw the whole square, we just drag
          out the repeat block and put the moveforward and turn right blocks inside
          the repeat block. When we hit run, the artist will repeat those steps four
          times to complete the square.
    C2_bee_loops:
      1:
        image: notes/C2_bee_loops_1.png
        text: A ciklus egy tevékenység ismételgetése. Tehát ha egy kaptárt vizsgálok
          meg, kiveszek egy keretet, megnézem, visszateszem, aztán ugyanezt megcsinálom
          a többi kerettel. Elölről kezdek mindent, ugyanazokat a lépéseket csinálom
          újra és újra.
      2:
        image: notes/C2_bee_loops_2.png
        text: This is the repeat block. Whatever you put inside the repeat block will
          repeat those actions the number of times that you tell it to. For example,
          in this level, rather than drag out move forward and get nectar three times,
          we're going to just drag them out once each and repeat the action three
          times. That made it easy!
    C2_maze_intro:
      1:
        image: notes/C2_maze_intro_1.png
        text: Usually programming is all in text but we'll use Blockly which uses
          visual blocks that you drag and drop to write programs. Under the hood,
          you're still creating code. To start off, we're going to build code for
          a program that will help this Angry Bird move through a maze to get to the
          evil pigs that stole its eggs.
      2:
        image: notes/C2_maze_intro_2.png
        text: Blockly is split into three main parts. On the left is the bird's maze,
          where your program will run. The instructions for each level are written
          below the maze. This middle area is the toolbox and each of these blocks
          is a command that the bird can understand. The white space on the right
          is called the workspace and this is where we'll build our program.
      3:
        image: notes/C2_maze_intro_3.png
        text: If I drag the move block to our work space and press "Run", what happens?
          The bird moves forward one box on the grid. And what if I want the bird
          to do something after it moves forward one box? I can add another block
          to our program.
      4:
        image: notes/C2_maze_intro_4.png
        text: Most a "fordulj jobbra" blokkot fogom használni, és addig húzom, amíg
          meg nem jelenik a sárga nyíl. Ekkor elengedem, és a két blokk összekapcsolódik.
          Amikor újra megnyomom a "Futtatás" gombot, a madár felülről lefelé haladva
          végrehajtja a munkaterületen egymás után pakolt parancsokat.
      5:
        image: notes/C2_maze_intro_5.png
        text: If you ever want to delete a block, just remove it from the stack and
          drag it to the trash can. After you've hit run, you can always hit the reset
          button to get the bird back to the start. Now let's get those pigs!
    C2_paper_airplanes:
      1:
        image: notes/C2_paper_airplanes_1.png
        text: This lesson is called Real Life Algorithms. Algorithms describe things
          that people do everyday. Cookie recipes and directions for building a birdhouse
          are both everyday algorithms.
      2:
        image: notes/C2_paper_airplanes_2.png
        text: Today we're gonna make, create, and test an algorithm for a paper airplane.
          But first, we need to break this big project into easy to follow small steps.
          For making a paper airplane, we need to decide what steps to take and in
          what order to take them.
      3:
        image: notes/C2_paper_airplanes_3.png
        text: You'll create your algorithm by first cutting apart the pictures. Next,
          you'll select the 6 pictures that show the steps needed to make a paper
          airplane and arrange those pictures in the correct order. After you have
          everything in order, you will trade algorithms with another student team
          to test out the algorithm to see if the algorithm works. A well designed
          algorithm is super important to making the best paper airplane.
      4:
        image: notes/C2_paper_airplanes_4.png
        text: When we want to make chocolate, there are many big steps to that process.
          And each of those big steps has its own set of smaller steps. And there
          are different recipes, or algorithms, depending on how we want the chocolate
          to taste. Each step is important, even the small ones. So without one step,
          the rest of them cannot be completed. Creating algorithms that others can
          understand is really important. That's why each step has to be written down,
          so no matter who does it, the result is the same.
    C2_playlab_createstory:
      1:
        image: notes/C2_playlab_createastory_1.png
        text: Eddig egy animációt vagy történetet készítettél, ami pontosan ugyanazt
          csinálja mindig, amikor futtatod. Most egy interaktív játékot csinálhatsz,
          amivel valóban játszani lehet.
      2:
        image: notes/C2_playlab_createastory_2.png
        text: Itt van a "ha nyíl" blokk és a "mozgasd a szereplőt" blokk. Ezeket a
          blokkokat összeillesztheted, hogy a szereplőket a nyilakkal mozgatni tudd.
    C2_relay_programming:
      1:
        image: notes/C2_relay_programming_1.png
        text: Today we're going to do relay programming. It's all about programming
          under pressure and debugging the mistakes that sometimes happen when you
          work really quickly or in teams. We'll use graph paper programming to simulate
          coding, and use relay races to simulate having a deadline.
      2:
        image: notes/C2_relay_programming_2.png
        text: In relay programming, teams will be racing to finish a graph paper program.
          You have to check your teammate's work, or debug it, fix it if there's a
          mistake, add your arrow, and run back and tag your teammate.
      3:
        image: notes/C2_relay_programming_3.png
        text: Programmers use debugging a lot to find and fix problems in their algorithms
          or code. There are lots of ways to debug problems. One of the easiest is
          to move step by step until you find where something goes wrong, then fix
          it.
      4:
        image: notes/C2_relay_programming_4.png
        text: Here, I'm trying to do a back handspring, but I keep falling off. I
          walk through each part, step by step, and realize where my mistake was.
          My coach showed me I wasn't putting my hands on the beam correctly. So I
          tried another back handspring on the beam with my new hand position, and
          I stuck it! I was really glad I debugged my back  handspring. We figured
          it out! Debugging is finding and fixing problems. Nice, good job!
    C2_zuck_repeat_loop:
      1:
        image: notes/C2_zuck_repeat_loop_1.png
        text: A számítógépek különösen jók a parancsok ismétlésében. Emberként elég
          hamar megunjuk, ha ugyanazokat a dolgokat sokszor kell megismételnünk. De
          a számítógép ugyanazt a dolgot képes milliószor, vagy akár milliárdszor
          is megcsinálni, és nem fogja megunni, hanem rendben végre fogja hajtani.
      2:
        image: notes/C2_zuck_repeat_loop_2.png
        text: Tegyük fel, hogy a Facebookon mindenkinek születésnapi köszöntőlevelet
          szeretnél küldeni. Ha valójában meg akarnánk írni ezeket az e-maileket,
          akkor több, mint egy századba telne ezt megtennünk. Azonban néhány sor kóddal
          megoldható, hogy a rendszer mindenkinek a Facebookon elküldjön egy születésnapi
          köszöntőt. Szóval valójában ez a ciklus, és ezért olyan fontos a létezésük,
          és a számítógépek nagyon jók a ciklusok végrehajtásában.
      3:
        image: notes/C2_zuck_repeat_loop_3.png
        text: Ebben a példában a célod, hogy eljuttasd a madarat a malachoz. Most
          már használhatjuk az "ismételd" blokkot a feladat egyszerűbb megoldására.
          Megcsinálhatod úgy is a feladatot, hogy ötször adod ki a "lépj előre" parancsot,
          hogy minden lépéssel eggyel közelebb legyél a malachoz.
      4:
        image: notes/C2_zuck_repeat_loop_4.png
        text: Vagy mondhatod a számítógépnek, hogy "lépj előre" egyszer, majd ezt
          pedig "ismételd" 5 alkalommal, és így ennyiszer fogja ugyanazt csinálni.
          Szóval ehhez húzd a "lépj előre" parancsot az "ismételd" blokkba. Majd kattints
          rá, és állítsd be, hogy mennyiszer kell ismételni a blokkot, vagyis hányszor
          szeretnél előre lépni.
      5:
        image: notes/C2_zuck_repeat_loop_5.png
        text: 'Még egy dolog: annyi parancsot helyezhetsz el az "ismételd" blokkban,
          amennyit csak akarsz. Ebben a példában azt mondjuk, hogy lépj előre, majd
          fordulj balra, és ezt ötször tesszük meg. Ügyes munka, jó szórakozást!'
    C3_artist_functions:
      1:
        image: notes/C3_artist_functions_1.png
        text: Az egyik nagyszerű dolog a számítógépes programozásban, hogy miután
          megtanítottad a számítógépet, hogyan kell egy dolgot megcsinálni, meg tudod
          hívni ugyanazt a függvényt újra. Adsz neki egy nevet, majd meghívod. Ez
          valójában a nyelv kibővítése.
      2:
        image: notes/C3_artist_functions_2.png
        text: Az általunk készített programban megtanultuk, hogyan kell négyzetet
          rajzolni négyszeri előrelépéssel és fordulással. Vegyük ezt a függvényt,
          és adjuk neki a "rajzoljon egy négyzetet" nevet. Szóval akármikor négyzetet
          szeretnénk rajzolni, csak annyit mondunk, hogy "rajzoljon egy négyzetet",
          ekkor meghívja a függvényt, az abban lévő kódot. Megcsinálja nekünk a rajzolást.
          Hozzáadtuk ezt a fogalmat a programozási nyelvünkhöz.
    C3_artist_intro:
      1:
        image: notes/C3_artist_intro_1.png
        text: You wouldn't even qualify for the race if you don't have people who
          are proficient in computer science because of how much data the cars collect
          and the necessity to be able to have people that can write programs to figure
          out how you continue to figure out how to build performance.
      2:
        image: notes/C3_artist_intro_2.png
        text: Ezekben a fejtőrökben egy művész leszek, aki a ceruzájával különböző
          alakzatokat fog rajzolni. Bármerre megy a művészed, egy vonalat fog rajzolni.
      3:
        image: notes/C3_artist_intro_3.png
        text: A vásznon való mozgáshoz használd a "lépj előre" blokkot. Itt a "lépj
          előre" blokk 100 képpontnyi előre lépést jelent. Mi történik, amikor a "Futtatás"
          gombra kattintasz? A művész előre lép egy bizonyos mennyiséget, és ez a
          mennyiség 100 képpont. A képpontok lényegében nagyon pici négyzetek a számítógép
          képernyőjén.
      4:
        image: notes/C3_artist_intro_4.png
        text: A másik blokk, ami ebben a feladványban szerepel a "fordulj jobbra 90
          fokot" blokk. És amikor ezt használjuk, a művész egy bizonyos mértékben
          elfordul. Játszhatsz azzal, hogy mennyit forduljon el a művész. Ez egy 90
          fokos fordulat.
      5:
        image: notes/C3_artist_intro_5.png
        text: Ez pedig egy 120 fokos fordulat. Ne felejtsd el, hogy ezeket az értékeket
          a képpont, illetve a fok melletti nyílra kattintva megváltoztathatod. Jó
          szórakozást a rajzoláshoz!
    C3_artist_nested_loops:
      1:
        image: notes/C3_artist_nested_loops_1.png
        text: Amikor egy ciklust egy másik ciklusba helyezünk el, azt beágyazott ciklusnak
          nevezzük. Például itt a kódunk egy háromszöget rajzol 100 képpont hosszúságú
          oldalakkal úgy, hogy az ismételd blokkban 3 alkalom van megadva, a háromszög
          minden oldalának megrajzolásához.
      2:
        image: notes/C3_artist_nested_loops_2.png
        text: De mi most 6 darab háromszöget szeretnénk rajzolni. Ehhez vesszük azt
          a ciklust, és betesszük egy másik ismételd blokkba. Egész menő!
    C3_bee_conditionals:
      1:
        image: notes/C3_bee_conditionals_1.png
        text: This is the conditional block. It says IF there is nectar or honey that
          is less than, equal to or greater than a number, THEN do something.
      2:
        image: notes/C3_bee_conditionals_2.png
        text: Ez akkor hasznos, ha nem tudjuk mennyi nektárt vagy mézet kell összegyűjtenünk,
          mint ahogy itt látjuk, az a kérdőjellel.
      3:
        image: notes/C3_bee_conditionals_3.png
        text: In this example, we're going to say IF the purple flower has nectar
          greater than 0, get nectar. That will tell our bee to keep getting nectar
          as long as it's there. Ta-dah!
    C3_bee_debugging:
      1:
        image: notes/C3_debugging_bee_1.png
        text: Hallottál már a programok hibakereséséről? Így lehet megtalálni, ha
          egy program nem működik helyesen. Amikor hibakeresel, megtalálod és kijavítod
          a hibákat.
      2:
        image: notes/C3_debugging_bee_2.png
        text: Már elhelyeztünk pár blokkot. A "Lépés" gombot fogjuk használni hogy
          minden blokkot lépésről-lépésre vizsgálhassunk. Így meg tudjuk nézni, hogy
          helyes-e a megoldás, és ha nem, hol kell kijavítani a kódot.
      3:
        image: notes/C3_debugging_bee_3.png
        text: Úgy tűnik ott a hiba. Szükség van még egy "lépj előre" blokkra. A "Lépés"
          gomb segít a programunk hibakeresésében, hogy megtaláljuk és kijavítsuk
          a hibákat.
    C3_bee_functions:
      1:
        image: notes/C3_bee_functions_1.png
        text: One of the most important concepts in computer science is how to define
          new commands, how to add your own words to a computer language. Most computer
          languages have only about one hundred words or commands. The art and magic
          is in defining your own new words out of these building blocks.
      2:
        image: notes/C3_bee_functions_2.png
        text: We do this all the time in sports. For example, in basketball, you start
          by learning how to dribble, how to do a lay-up, how to rebound. Once you've
          learned these really basic moves, you learn new moves and put together these
          building blocks, like a pick and roll or give and go. You can then go from
          there to do more complex plays. Once you learn that play and give it a name,
          everybody on the team knows how to do it.
      3:
        image: notes/C3_bee_functions_3.png
        text: Similarly once you've taught a computer how to do an action once using
          these sequences of commands, you can make up your own name for that action
          so it's easy to repeat it later. When you define your own command and give
          it a name, that's called a function. Now we're going to use functions to
          help the bee.
      4:
        image: notes/C3_bee_functions_4.png
        text: Ebben a példában a függvényünket "get 2 nectar"-nak neveztük el, ez
          a zöld blokk itt. A szürke dobozra nézve, látjuk, hogy mit csinál a get
          2 nectar függvény, vagyis ez a függvény definíciója. Ha belenézünk, látjuk,
          hogy a get 2 nectar először begyűjt egy nektárt, majd megint begyűjt egy
          nektárt. Mindig azt nézd, hogy mi van a szürke dobozban, hogy megtudd, mire
          képesek ezek a zöld függvény blokkok.
    C3_bee_nested_loops:
      1:
        image: notes/C3_bee_nested_loops_1.png
        text: Now we're going to use nested loops with the bee. We're given some starter
          code which tells the bee to move forward and get nectar three times and
          then turn right. Let's take that whole piece of code and nest it inside
          another repeat block and set to repeat three times. Done!
    C3_bounce:
      1:
        image: notes/C3_bounce_1.png
        text: You're going to be creating your very own bounce game that you'll be
          able to share with your friends! How cool!
      2:
        image: notes/C3_bounce_2.png
        text: To get started, we have to link up the paddle controls to the arrow
          keys on our keyboard.
      3:
        image: notes/C3_bounce_3.png
        text: We can do this by linking the when left arrow block to the move left
          block and the when right arrow block to the move right block. Give it a
          go and you'll be programming your own bounce game in no time!
    C3_computational_thinking:
      1:
        image: notes/C3_computational_thinking_1.png
        text: This lesson is computational thinking. Sometimes learning a new game
          can be tough, right? At first it might seem really confusing and sometimes,
          there's no one there to teach you the rules, so you have to figure it out
          on your own.
      2:
        image: notes/C3_computational_thinking_2.png
        text: The good news is that you can get better at figuring things out on your
          own when you know a few thinking tricks. These tricks are unique ways for
          looking at and solving problems. In this lesson, you'll learn about four
          tricks and practice them with your friends to figure out the rules to a
          game.
      3:
        image: notes/C3_computational_thinking_3.png
        text: When you break down a big problem into smaller pieces, you're using
          your brain to decompose the big problem. Once we've decomposed the big problem
          into several smaller problems, we can go on to our next trick, which is
          called pattern match.
      4:
        image: notes/C3_computational_thinking_4.png
        text: That's when we look for similarities between things. Once I find the
          things that are the same, I can figure out what things are different. When
          I remove those differences, that's called abstraction.
      5:
        image: notes/C3_computational_thinking_5.png
        text: After I have figured out the steps to solving a problem, I can put those
          steps in a specific order called an algorithm so that anyone can use my
          directions to solve that problem. We're going to use these four steps to
          figure out how to play the game with no rules. By the end of the game, you'll
          be able to play something that looks like this!
    C3_crowdsourcing:
      1:
        image: notes/C3_crowdsourcing_1.png
        text: This lesson is called crowdsourcing. In this lesson we'll use a deck
          of cards to learn about how much easier some things can be to do in groups
          instead of trying to do them all alone. So grab some friends and make something
          awesome. Crowdsourcing is getting help from a large group of people to finish
          something faster.
      2:
        image: notes/C3_crowdsourcing_2.png
        text: In computer science, we use crowdsourcing all the time. Thousands of
          amateurs and professionals link their computers together to search through
          billions and billions of pieces of information. Looking for things like
          the next Marsenne prime number, or even possible alien communications.
      3:
        image: notes/C3_crowdsourcing_3.png
        text: When you see a movie, each second of the movie is 24 individual pictures,
          we call those frames. So every one of those pictures needs to be created
          and rendered and put all together. My team and I, we're all software developers.
          We all work together to create a piece of software that actually creates
          an image, creates the final image that you see on screen. That's a tool
          that artists and other developers can use as part of their teamwork and
          their process to be able to create the images that they want on screen.
      4:
        image: notes/C3_crowdsourcing_4.png
        text: For example, in Finding Nemo, when Crush and Squirt and all their friends
          are flying through the East Australian Current. You're seeing images of
          water flowing by, you're seeing the colors on the back of the turtle, you're
          seeing the sides of the fish. All of those things are generated through
          math and computer programs that we write, that we then give to the artist
          and they take that to create that final image and tweak it and make it look
          beautiful and look fun.
    C3_dice_race:
      1:
        image: notes/C3_dice_race_1.png
        text: This lesson is called dice race. Almost everyone likes to play computer
          games. Have you ever thought about how computer programmers turn the steps
          of a game into a program? The first step in creating computer games and
          in solving any problem requires thinking and planning.
      2:
        image: notes/C3_dice_race_2.png
        text: The thinking step of problem solving produces an algorithm, which is
          a step by step plan for solving a problem or finishing a task. In this lesson,
          you'll create an algorithm for a dice race game. Then you'll ask your friends
          to try out your plan to see if they can follow the steps to play the game.
          After the programmer is sure the steps are correct, it's time to translate
          the algorithm into a program with language that the computer can understand.
      3:
        image: notes/C3_dice_race_3.png
        text: Almost everything we do every day requires an algorithm, a list of steps
          you can follow to finish a task. Think about getting ready for school or
          planning a fun day with your friends or fixing a snack. To complete any
          of those tasks, you'll need to break it down into smaller steps and sometimes
          the steps must be in a specific order.
      4:
        image: notes/C3_dice_race_4.png
        text: Think about making a sandwich. It doesn't matter which ingredient you
          get out of the cabinet first. But you can't spread the peanut butter until
          you open the jar. Computers need algorithms and programs to show them how
          to do even simple things that we can do without thinking about it.
      5:
        image: notes/C3_dice_race_5.png
        text: An algorithm is the thinking behind what needs to happen while the program
          is the actual instructions given to the computer to make it happen. An algorithm
          has to be translated into a program before a computer can run it. Breaking
          a task into steps called an algorithm is sometimes difficult. But like any
          new skill, it gets easier and easier with practice.
    C3_farmer_while:
      1:
        image: notes/C3_farmer_while_1.png
        text: While loops are pretty similar to what you do in everyday life. Imagine
          you are washing your car, you'll keep scrubbing until it's clean. While
          it's not clean, continue to scrub. You're evaluating these things all the
          time.
      2:
        image: notes/C3_farmer_while_2.png
        text: We've got a new look to help your farmer out. It's called a while-block.
          It's pretty simple actually. While a statement at the top is true, do something.
          For example, while there's a pile move one hayful. Go ahead and give it
          a try with your farmer.
    C3_functional_suncatchers:
      1:
        image: notes/C3_functional_suncatchers_1.png
        text: This lesson is functional suncatchers. You'll be creating these pretty
          suncatchers using functions. There are several steps in creating one of
          these suncatchers. Some of the steps you have to repeat many times.
      2:
        image: notes/C3_functional_suncatchers_2.png
        text: The first step in simplifying the process of making a suncatcher is
          figure out what we have to repeat over and over again. We can group these
          steps into what we call a function.
      3:
        image: notes/C3_functional_suncatchers_3.png
        text: But there is more to creating a beautiful suncatcher than following
          precise steps. Sometimes we want to be creative and change the color of
          the beads we're using. We can make every suncatcher unique if we use different
          colored beads.
      4:
        image: notes/C3_functional_suncatchers_4.png
        text: Your suncatcher will be uniquely yours when you learn to think of the
          beads as variables which is a word that means a placeholder for information
          that can change. Have fun creating beautiful suncatchers using functions
          and variables!
    C3_internet:
      1:
        image: notes/C3_internet_1.png
        text: This lesson is all about the internet. The internet is a very busy place
          and similar to this busy road. Messages like cars are zooming along to get
          to their destinations. Messages move through the internet very quickly.
      2:
        image: notes/C3_internet_2.png
        text: Acting out how the internet works will help you understand what's happening
          when you use the internet. You'll learn how messages get from your computer
          to a favorite website or from a friend to an email inbox. Just like it's
          easier to navigate busy roads when you know the roads and can read the signs,
          traveling the internet is not so complicated when you know what goes on
          behind the scenes.
      3:
        image: notes/C3_internet_3.png
        text: Sending messages on the internet is a little bit like sending messages
          in the mail but with a few differences. I'm here at Google.com. The IP address
          for this website is this number. You can think of an IP address as your
          return address in the mail. Let's imagine that I want to send a message
          in the mail to someone in the office down the there. Do you see URL and
          the IP address on that door? I've written this message and hit send.
      4:
        image: notes/C3_internet_4.png
        text: A postai szolgáltatásokkal szemben az első dolog ami történik, hogy
          az internet az üzenetet kisebb részekre osztja szét, hogy azokat egyszerűbb
          legyen elküldeni. Ezeket a kis részeket nevezik csomagokban. A csomagokat
          egyesével küldi el a címzettnek. A csomagokat ezután a megfelelő sorrendbe
          rendezi, hogy a fogadó fél számára megfelelően olvashatóan jelenjen meg.
          Természetesen rengeteg mindent kell még megismerni az internet működésével
          kapcsolatban, de ez egy remek kezdés. Kezdesz hozzáértő internet-felhasználó
          lenni! Ne felejtsd el megosztani a családoddal és barátaiddal, amit tanultál!
      5:
        image: notes/C3_internet_5.png
        text: My name is Amanda Camp and I'm a software engineer at Google. I work
          on a team that works on a backend server that stores profiles and contacts.
          In my job, we think a lot about how contacts can be sent to other devices,
          such as your phone. Most people have a lot of contacts, you might have say,
          1000 contacts and we don't want to send all of those contacts at once to
          your phone because it's too large of a message. Similar to the way the internet
          breaks large messages down into packets, we use a concept called paging
          where we might only send your phone 100 contacts at a time and let your
          phone respond to us and ask for the next 100.
      6:
        image: notes/C3_internet_6.png
        text: The most exciting thing about software is the fact that it can impact
          the entire world. I first learned to program when I was about nineteen.
          I think I was already a sophomore or a junior in college. The first program
          I remember writing is something that converted Celsius to Fahrenheit. I
          like programming because I like helping people. I can write programs at
          Google that help people all over the world and that's really mind-boggling
          and exciting.
    C3_maze_conditionals:
      1:
        image: notes/C3_maze_conditionals_1.png
        text: People make decisions everyday. For example, before you go outside,
          you have an if statement that says if it's raining, then I need to get my
          jacket. Computers are amazing once you decide those kinds of statements
          that they can reliably execute those things and unbelievable speed. A computer
          program really is a little bit of math and some if statements where the
          decision gets made.
      2:
        image: notes/C3_maze_conditionals_2.png
        text: The if block helps the zombie make a decision. It checks something.
          For example, let's use the block that says if there's a path to the left,
          and put a turn left command inside it. We're telling the zombie to check
          its surroundings, see if there's a path on the left and if so, make that
          turn.
      3:
        image: notes/C3_maze_conditionals_3.png
        text: Then we use the move forward block inside this repeat to get it to keep
          moving forward as long as it just wants to go straight. Then when there's
          a turn, the if block will tell it to make that turn to the left. You can
          see that if we do that, if we take the turn to the left and otherwise moving
          forward, we'll achieve our goal.
      4:
        image: notes/C3_maze_conditionals_4.png
        text: Egy egy példa az if (ha) utasítás használatára, amely egy alapvető fogalom
          a számítógépes programozásban. Az egyik első dolog, amit megtanultam leprogramozni,
          a tic-tac-toe. Voltak benne if utasítások, amelyek azt mondták, hogy oké,
          ha a másik személy nyerni fog, akkor akadályozd meg. Jó szórakozást az if
          utasítások megismeréséhez, amely tényleg kulcsfontosságú.
    C3_maze_level_4:
      1:
        image: notes/C3_maze_level_4_1.png
        text: Ebben a példában a cél, hogy a zombi eljusson a napraforgóhoz. Használhatjuk
          ötször a lépj előre blokkot, vagy mondhatjuk azt a számítógépnek, hogy ismételje
          ötször az előrelépést az ismételd blokk használatával.
      2:
        image: notes/C3_maze_level_4_2.png
        text: Ezzel időt takarítunk meg és egyszerűbb is lesz a dolgunk. A használatához
          tedd a lépj előre blokkot az ismételd blokk belsejébe. Kattints a Futtatás
          gombra, és a zombi ötször előre lép a fincsi napraforgóhoz.
    C3_playlab_create_game:
      1:
        image: notes/playlab_1.png
        text: Eddig egy animációt vagy történetet készítettél, ami pontosan ugyanazt
          csinálja mindig, amikor futtatod. Most egy interaktív játékot csinálhatsz,
          amivel valóban játszani lehet.
      2:
        image: notes/playlab_2.png
        text: Itt van a "ha nyíl" blokk és a "mozgasd a szereplőt" blokk. Ezeket a
          blokkokat összeillesztheted, hogy a szereplőket a nyilakkal mozgatni tudd.
    C3_songwriting_with_parameters:
      1:
        image: notes/C3_songwriting_with_parameters_1.png
        text: This is the song writing lesson. Music is a lot like a computer program.
          The written notes and words tell the singer exactly what to do. Some parts
          of music are used over and over again.
      2:
        image: notes/C3_songwriting_with_parameters_2.png
        text: We call this the chorus. In a computer program, the parts of the program
          that are used over and over again are called functions. When you read song
          lyrics and it says the word chorus, do you sing the word chorus? No, you
          look at the top of the page to see what words make up the chorus.
      3:
        image: notes/C3_songwriting_with_parameters_3.png
        text: In this lesson, you'll learn a silly little song called little bunny
          foo foo. The song has a chorus that you will sing several times over and
          over again. A function is a piece of code that you can call and use over
          and over again. It makes programming easier and more efficient so you don't
          have to write out the steps of your function over and over again. You can
          just write it once!
    C4_bee_conditional:
      1:
        image: notes/C4_bee_conditional_1.png
        text: Ez egy feltételes blokk. Azt mondja, ha egy virágnál vagy lépnél vagy,
          akkor csinálj valamit. Ez akkor hasznos, ha nem tudjuk, hogy mennyi mézet
          vagy nektárt kell gyűjtenünk, mint például itt, és ezt kérdőjel jelzi.
      2:
        image: notes/C4_bee_conditional_2.png
        text: Ebben a példában azt mondjuk, hogy ha egy virágnál vagyunk, akkor gyűjtsük
          be az összes nektárt, aztán egy másikkal pedig azt, hogy ha egy lépnél vagyunk,
          akkor készítsünk mézet. Kész is!
    C4_conditionals:
      1:
        image: notes/C4_conditionals_1.png
        text: Van egy új blokkunk, amit ha/különben blokknak hívunk. Ez egy feltételes
          utasítás, ugyanúgy, mint az if blokk, amit már korábbi feladványainkban
          használtunk. Azonban most van egy új tagja, ez a különben rész az alján.
          A ha/különben blokk lehetővé teszi, hogy a méh döntsön két művelet között.
          Ha a méh virágnál van, akkor azokat az utasításokat fogja elvégezni, amelyeket
          az első részbe teszel. Ha a méh nincs virágnál éppen, akkor azokat fogja
          végrehajtani, amiket a különbenhez tartozó részhez teszel.
      2:
        image: notes/C4_conditionals_2.png
        text: Az if elágazások teszik lehetővé, hogy a számítógépek döntéseket hozzanak.
          Az emberek feltételeket alkotnak meg a számítógép számára, amelyek megmondják,
          hogy ha számítógép egy bizonyos szituációval találkozik, akkor tegye ezt.
          Különben pedig tegye azt. A ha/különben blokkunk tetején az áll, ha virágnál.
          De persze más is lehet a blokkunk tetején, például ha nektár egyenlő 2,
          vagy van előtted út, és a blokkunk ugyanúgy fog működni. Vagyis ha a blokk
          tetején lévő feltétel igaz, akkor az első részben lévő parancsokat hajtja
          végre. Azonban ha a tetején lévő feltétel hamis, akkor a második részben
          lévő utasításokat hajtja végre.
    C4_for_loops:
      1:
        image: notes/C4_for_loops_1.png
        text: Amikor egy ismételd blokkot használsz a kódod ciklusba szervezésére,
          honnan tudja a számítógép, hogy mikor ismételte meg elégszer az utasításokat?
          Az ismételd blokk valójában egy kifinomultabb blokkot rejt magában, mégpedig
          a for ciklust, amely egy kezdő értéktől egy végső értékig számol megadott
          lépésközzel.
      2:
        image: notes/C4_for_loops_2.png
        text: Például az ismételd 3 alkalommal blokk 1-től 3-ig számol egyesével.
          Minden számolásnál végrehajtja a benne lévő utasításokat. A for ciklus egy
          számláló változó segítségével tudja, hogy mennyiszer futott le, amely az
          elején a kezdő értékre van beállítva, és a lépésköz a ciklus minden egyes
          futtatásakor hozzáadódik. Amint a változó értéke nagyobb lesz, mint a végső
          érték, a ciklus leáll.
      3:
        image: notes/C4_for_loops_3.png
        text: Az ismételd blokk helyett azért érdemes a valódi for ciklust használni,
          mivel láthatod a számláló (változó) értékét, és felhasználhatod a ciklusodban.
          Például ha több virágunk is van, az elsőben egy nektár, a másodikban két
          nektár, a harmadikban pedig három nektár van, akkor használhatom a for ciklust
          arra, hogy a méh "számláló" mennyiségű nektárt gyűjtsön össze minden alkalommal,
          vagyis egyet az első virágnál, kettőt a másodiknál, és hármat a harmadiknál.
      4:
        image: notes/C4_for_loops_4.png
        text: A számlálós (for) ciklusban a számláló értékét nemcsak eggyel, hanem
          más értékkel is növelheted. Léphetsz kettesével, négyesével, de akár folyamatosan
          változó értékkel is.
    C4_for_loops_bee:
      1:
        image: notes/C4_for_loops_bee_1.png
        text: Amikor egy ismételd blokkot használsz a kódod ciklusba szervezésére,
          honnan tudja a számítógép, hogy mikor ismételte meg elégszer az utasításokat?
          Az ismételd blokk valójában egy kifinomultabb blokkot rejt magában, mégpedig
          a for ciklust, amely egy kezdő értéktől egy végső értékig számol megadott
          lépésközzel.
      2:
        image: notes/C4_for_loops_bee_2.png
        text: Például az ismételd 3 alkalommal blokk 1-től 3-ig számol egyesével.
          Minden számolásnál végrehajtja a benne lévő utasításokat. A for ciklus egy
          számláló változó segítségével tudja, hogy mennyiszer futott le, amely az
          elején a kezdő értékre van beállítva, és a lépésköz a ciklus minden egyes
          futtatásakor hozzáadódik. Amint a változó értéke nagyobb lesz, mint a végső
          érték, a ciklus leáll.
      3:
        image: notes/C4_for_loops_bee_3.png
        text: Az ismételd blokk helyett azért érdemes a valódi for ciklust használni,
          mivel láthatod a számláló (változó) értékét, és felhasználhatod a ciklusodban.
          Például ha több virágunk is van, az elsőben egy nektár, a másodikban két
          nektár, a harmadikban pedig három nektár van, akkor használhatom a for ciklust
          arra, hogy a méh "számláló" mennyiségű nektárt gyűjtsön össze minden alkalommal,
          vagyis egyet az első virágnál, kettőt a másodiknál, és hármat a harmadiknál.
      4:
        image: notes/C4_for_loops_bee_4.png
        text: A számlálós (for) ciklusban a számláló értékét nemcsak eggyel, hanem
          más értékkel is növelheted. Léphetsz kettesével, négyesével, de akár folyamatosan
          változó értékkel is.
    C4_for_loops_no_bee:
      1:
        image: notes/C4_for_loops_no_bee_1.png
        text: Amikor egy ismételd blokkot használsz a kódod ciklusba szervezésére,
          honnan tudja a számítógép, hogy mikor ismételte meg elégszer az utasításokat?
          Az ismételd blokk valójában egy kifinomultabb blokkot rejt magában, mégpedig
          a for ciklust, amely egy kezdő értéktől egy végső értékig számol megadott
          lépésközzel.
      2:
        image: notes/C4_for_loops_no_bee_2.png
        text: Például az ismételd 3 alkalommal blokk 1-től 3-ig számol egyesével.
          Minden számolásnál végrehajtja a benne lévő utasításokat. A for ciklus egy
          számláló változó segítségével tudja, hogy mennyiszer futott le, amely az
          elején a kezdő értékre van beállítva, és a lépésköz a ciklus minden egyes
          futtatásakor hozzáadódik. Amint a változó értéke nagyobb lesz, mint a végső
          érték, a ciklus leáll. A for ciklus használatának előnye az ismételd blokkal
          szemben, hogy láthatod a számláló (változó) értékét a ciklusodban.
    C4_function_create:
      1:
        image: notes/C4_function_create_1.png
        text: Most, hogy már módosítottál függvényblokkokat, itt az ideje, hogy teljesen
          nulláról te hozz létre egy függvényblokkot. Láthatod, hogy az eszköztáron
          lett egy függvények nevű kategória. Ha erre rákattintasz, láthatsz egy narancssárga
          gombot, amely a "Függvény létrehozása" nevet viseli. Erre kattintva megjelenik
          a függvényszerkesztő, amelyet már használtál a függvény blokk módosításakor.
      2:
        image: notes/C4_function_create_2.png
        text: Ahogy korábban, a függvény elnevezésével kell kezdeni, vagyis annak
          a leírásával, hogy mit fog csinálni a függvényed. Például, hogy rajzoljon
          egy négyzetet vagy rajzoljon egy háromszöget, majd pedig bele kell húznod
          a blokkokat az eszközkészletből a munkaterületre. Ne felejtsd el, hogy ezeket
          a függvényt alkotó zöld blokkon belülre kell húznod.
      3:
        image: notes/C4_function_create_3.png
        text: Miután végeztél, kattints a mentésre, majd lépj ki. Ezzel visszatérsz
          a fő munkaterületre. Az újonnan létrehozott függvény a függvény kategóriában
          egy zöld blokként fog megjelenni. Húzd ezt a blokkot a munkaterületre, és
          használd ezt a feladvány megoldására ugyanúgy, mint bármely más blokkot.
    C4_function_edit:
      1:
        image: notes/C4_function_edit_1.png
        text: Az egyik nagyszerű dolog a számítógépes programozásban, hogy miután
          megtanítottad a számítógépet, hogyan kell egy dolgot megcsinálni, meg tudod
          hívni ugyanazt a függvényt újra. Adsz neki egy nevet, majd meghívod. Ez
          valójában a nyelv kibővítése.
      2:
        image: notes/C4_function_edit_2.png
        text: Az általunk készített programban megtanultuk, hogyan kell négyzetet
          rajzolni négyszeri előrelépéssel és fordulással. Vegyük ezt a függvényt,
          és adjuk neki a "rajzoljon egy négyzetet" nevet. Szóval akármikor négyzetet
          szeretnénk rajzolni, csak annyit mondunk, hogy "rajzoljon egy négyzetet",
          ekkor meghívja a függvényt, az abban lévő kódot. Megcsinálja nekünk a rajzolást.
          Hozzáadtuk ezt a fogalmat a programozási nyelvünkhöz.
      3:
        image: notes/C4_function_edit_3.png
        text: Ebben a feladványban már létrehoztunk számodra egy rajzoljon egy négyzetet
          függvényt. Az eszközkészletben zöld blokként jelenik meg. A dolgod az lesz,
          hogy írd meg ugyanazt a kódot, amit korábban a négyzet megrajzolására írtál,
          és helyezd el ebben a függvényben. Ehhez kattints a szerkeszt gombra a zöld
          rajzoljon egy négyzetet blokkon. Ekkor megnyílik a függvényszerkesztő. A
          függvényszerkesztőnek három része van. Egy hely, ahol elnevezheted a függvényedet.
          Ez fog megjelenni a zöld blokkon a függvény utasításai előtt. Ezután írhatsz
          egy rövid leírást, hogy mit kell tegyen a függvényed.
      4:
        image: notes/C4_function_edit_4.png
        text: Ebben az esetben egy négyzetet kell rajzoljon. Az alatta lévő fehér
          terület ugyanúgy működik, mint a korábbi munkaterület. Az eszközkészletből
          idehúzhatod a blokkokat. A négyzetet rajzoló blokkokat a zöld függvényblokkon
          belülre kell elhelyezned. Miután végeztél, kattints a mentés gombra, majd
          lépj ki. Ezzel visszatérsz a fő feladvány munkaterületére. Most már a többi
          blokkhoz hasonlóan használhatod is a négyzet megrajzolására szolgáló függvényblokkot
          a feladvány megoldásához.
    C4_function_parameters:
      1:
        image: notes/C4_function_parameters_1.png
        text: Ez egy olyan függvény, amely 50 képpont oldalhosszúságú négyzetet rajzol.
          Ez jól jön akkor, amikor 50 képpont oldalhosszúságú négyzetet akarunk rajzolni,
          de mi van a 100 képpont méretű négyzettel? Nem kellene két olyan függvényt
          létrehoznunk, amik majdnem ugyanazt csinálják. Ehelyett a függvényt paraméterrel
          használjuk.
      2:
        image: notes/C4_function_parameters_2.png
        text: A paraméterek lehetővé teszik, hogy értékeket adjunk át a függvénynek,
          amelyek a függvényen belül változók lesznek. Adjunk egy paramétert ehhez
          a függvényhez, amellyel különböző méretű négyzeteket tudunk rajzolni. A
          függvényszerkesztőben ugyanúgy szerkesztheted a nevet és a leírást, mint
          korábban, de most már paraméter hozzáadására is lehetőséged van. Írd a paraméter
          nevét a rendelkezésre álló fehér területre, majd kattints a Paraméter hozzáadása
          gombra. Ez létrehoz egy piros blokkot azzal a névvel, amit paraméterként
          az előbb megadtál. Most már kicserélhetjük a lépj előre 100 lépést blokkot
          a Length (hossz) paraméterrel, így Length (hossz) lépést fog előre lépni.
      3:
        image: notes/C4_function_parameters_3.png
        text: Kattints a mentésre, majd lép ki. Ezután húzd az újonnan alkotott függvényedet
          a munkaterületre az eszközkészletből. Észreveheted, hogy van egy üres hely
          a hossz mellett, mivel a függvény tudni szeretné, hogy mi legyen a Length
          (hossz) paraméter értéke. Húzz egy szám blokkot a Matematika (Math) kategóriából
          az üres helyre. Nézd meg, hogyan használhatod a függvényt újra és újra különböző
          hosszúságokkal, hogy különböző méretű négyzeteket rajzolj. Próbáld ki magad!
    C4_intro:
      1:
        image: notes/C4_intro_1.png
        text: Usually programming is all in text but we'll use Blockly which uses
          visual blocks that you drag and drop to write programs. Under the hood,
          you're still creating code. To start off, we're going to build code for
          a program that will help this Angry Bird move through a maze to get to the
          evil pigs that stole its eggs.
      2:
        image: notes/C4_intro_2.png
        text: Blockly is split into three main parts. On the left is the bird's maze,
          where your program will run. The instructions for each level are written
          below the maze. This middle area is the toolbox and each of these blocks
          is a command that the bird can understand. The white space on the right
          is called the workspace and this is where we'll build our program.
      3:
        image: notes/C4_intro_3.png
        text: If I drag the move block to our work space and press "run", what happens?
          The bird moves forward one box on the grid. And what if I want the bird
          to do something after it moves forward one box? I can add another block
          to our program.
      4:
        image: notes/C4_intro_4.png
        text: I'm going to choose the "turn right" block and I'll drag it under my
          move block until the yellow arrow appears. Then I'll drop it and the two
          blocks will snap together. When I press "run" again,  the bird will perform
          the commands that are stacked from top to bottom on our work space.
      5:
        image: notes/C4_intro_5.png
        text: If you ever want to delete a block, just remove it from the stack and
          drag it to the trash can. After you've hit run, you can always hit the reset
          button to get the bird back to the start. Now let's get those pigs!
    C4_math_artist:
      1:
        image: notes/C4_math_artist_1.png
        text: Ha egy olyan téglalapot szeretnénk rajzolni, amely 50 képpont magas
          és kétszer olyan széles, mint amilyen magas, akkor ezt hogyan programozhatjuk
          le a számítógép számára? Hát, mondhatom a művésznek, hogy menjen fel 50-et,
          majd forduljon jobbra, majd menjen előre 100-at, és ezt kétszer tegye meg.
          De ekkor én végzem el a számítást a számítógép helyett.
      2:
        image: notes/C4_math_artist_2.png
        text: Az ötvenet fejben kettővel összeszorozni nem tűnik nehéznek, de a számítógépek
          nagyon jók a számolásban, így érdemes rájuk bízni, amikor csak lehetséges.
          Ha az 50 helyett inkább egy "height" (magasság) nevű változót használok,
          akkor egyszerűen módosíthatom az algoritmust úgy, hogy menjen fel magasságnyit,
          forduljon jobbra, majd menjen 2-szer magasságnyit, amely egy olyan téglalapot
          eredményez, ami kétszer olyan széles, mint amilyen magas.
    C4_unplugged_algorithms:
      1:
        image: notes/C4_unplugged_algorithms_1.png
        text: This lesson is called Tangram Algorithms. A tangram is a puzzle with
          seven pieces that can be put together to make other shapes. You'll be using
          an algorithm to explain to your partner how to put the puzzle together.
      2:
        image: notes/C4_unplugged_algorithms_2.png
        text: An algorithm is just a of list steps that you can take to complete a
          task. We use them every day with things like shopping lists and recipes.
          If you keep an algorithm simple, there are lots of ways to interpret it
          and whoever performs that algorithm might not get exactly what you wanted.
          If you want to make sure that everyone ends up with the exact same thing,
          then your algorithm will need to be detailed and very specific.
      3:
        image: notes/C4_unplugged_algorithms_3.png
        text: I'm using an algorithm today to complete a painting. I wanted to try
          doing a painting of some wolves but I'm not the most amazing painter. Luckily
          for people by me, there is paint by numbers. There are forty colors and
          it has little letters and numbers that tell you which color to paint each
          section. Paint by numbers tells me exactly what color to use and where.
      4:
        image: notes/C4_unplugged_algorithms_4.png
        text: It's very specific so I'm able to follow directions and the painting
          will come out looking awesome. It's a great algorithm. If the instructions
          weren't specific enough, my wolves wouldn't look as good. When you really
          want something to turn out exactly the way that you planned it, it's best
          to be extremely precise.
    C4_unplugged_binary:
      1:
        image: notes/C4_unplugged_binary_1.png
        text: Each team, the person who's instructing that's the person who's holding
          the paper, has to figure out what their off symbol is going to be and what
          their on symbol is going to be. In binary, it's kind of like an alphabet
          with two letters. Like having A and B be your entire alphabet but you've
          got a 0 and a 1.
      2:
        image: notes/C4_unplugged_binary_2.png
        text: The most common way you use binary is in an if statement. It's a classic
          thing from programming. The program runs along and it says if something
          is true, then do this. Or it's not true and you do something else. What
          if you want to do something maybe a little more complicated. Instead an
          if statement, you want to work with something like an image or a sound in
          a computer.
      3:
        image: notes/C4_unplugged_binary_3.png
        text: 'A computer only knows binary but an image, it''s not binary, it''s
          not ones and zeros so how do you do that? Here''s an example: You have this
          beautiful picture. Now a picture is basically a form of information. All
          information can be encoded in binary one way or another, you just have to
          figure out how to do it.'
      4:
        image: notes/C4_unplugged_binary_4.png
        text: You imagine that we're going to put a grid over this panda bear and
          for each square, we're going to decide whether that square is more black
          or more white. And then we're going to color it that way. Now each cell
          on the grid is either black or white and then the black squares we say those
          are zeros (binary digit) and the white squares are ones, the other binary
          digit. At the end, you're left with just a bunch of ones and zeros. That's
          how you represent this image in binary.
    C4_unplugged_forloops:
      1:
        image: notes/C4_unplugged_forloops_1.png
        text: This lesson is called for loop fun. In this lesson, we'll use a number
          line to play a dice game. Each player will roll three times to assign a
          starting value, a stopping value, and our interval. During each turn, we
          circle our starting value, and every value that is the same number of steps
          forward as our interval value. We stop circling when we get to our stopping
          value. The person with the highest score wins!
      2:
        image: notes/C4_unplugged_forloops_2.png
        text: For loops can come in handy a lot of places and if you were to become
          a meteorologist, you would use for loops all the time. Hi, I'm Becky. I
          work at EverPower Renewables as a wind meteorologist. I forecast wind speeds
          for the Columbia River Gorge area where the company owns wind farms.
      3:
        image: notes/C4_unplugged_forloops_3.png
        text: We're trying to understand how much wind is going to be there so that
          we know how much power is going to be outputted. We give that information
          to real time energy traders. They buy and sell power based on how much power
          we tell them is going to be there in order to make sure the power grid is
          balanced, your lights stay on, and that we maximize the amount of energy
          we get out of our farms.
      4:
        image: notes/C4_unplugged_forloops_4.png
        text: We're at the national control center for EverPower Renewables here in
          Portland and this is where we have information coming in from all our farms
          across the country. Even the highest power computers today can't simulate
          the atmosphere everywhere. In computer forecasting models, we have what
          we call a grid. Each grid point is a latitude, longitude. We have to calculate
          the physics and try and figure out the wind speed, temperature,  pressure,
          that sort of thing.
      5:
        image: notes/C4_unplugged_forloops_5.png
        text: Since these are fairly big grids and we're doing this in a lot of points
          we're looping over these things millions and millions of times. Everything
          I do I'll use for loops. Here for example is a for loop right there. When
          you're forecasting wind, there's so many different parameters that go into
          it it would be impossible for a human to sit down and do all those calculations.
          There's so many different aspects to what's going to be affecting what's
          happening to the wind that we need a computer model in order to forecast
          it.
    C4_unplugged_madlibs:
      1:
        image: notes/C4_unplugged_madlibs_1.png
        text: In this lesson, we'll be playing with some fill in the blank stories.
          You have a template that you can fill in to create similar stories that
          have very amusing differences.
      2:
        image: notes/C4_unplugged_madlibs_2.png
        text: In this lesson, we also learned how to make an abstracted template from
          two stories that have already been created. Abstraction is the art of removing
          differences and details so that you can see how one solution might work
          for many different problems. It's very helpful in computer science because
          it allows us to create functions that may be useful in several different
          situations.
    C4_unplugged_parameters:
      1:
        image: notes/C4_unplugged_parameters_1.png
        text: This lesson is called songwriting with parameters. We're going to be
          writing some songs here. Sometimes the chorus is just a little bit different
          each time you sing it. Do you remember Old Macdonald Had a Farm? The chorus
          is slightly different for each animal. And on that farm, he had a cow, e-i-e-i-o.
          The small change in each chorus can be shown using something we call parameters.
      2:
        image: notes/C4_unplugged_parameters_2.png
        text: Sometimes a function needs a parameter. A parameter is an extra piece
          of information you can pass to a function to customize it for a special
          need. When you make ice cream sundaes with your friends, you are using a
          process similar to parameters in a computer program.
      3:
        image: notes/C4_unplugged_parameters_3.png
        text: The disk of vanilla ice cream might be the same for every sundae but
          when you ask your friends which two toppings they'd like, you could get
          lots of different combinations. Topping is the function name but each type
          of topping is a parameter. Functions and parameters work together to make
          great computer programs and great sundaes too.
    C4_unplugged_variables:
      1:
        image: notes/C4_unplugged_variables_1.png
        text: This lesson is called variables in envelopes. We're going to learn how
          we can build sentences when we're still missing pieces of information. Most
          of us are already familiar with the idea of filling in a blank. We do it
          when we're putting our name on our homework. Sometimes there's more than
          one word that needs to be filled out and in that case, we give that blank
          a label so that we know which piece of information goes where.
      2:
        image: notes/C4_unplugged_variables_2.png
        text: Variables are placeholders for pieces of information that can change.
          By using a variable for the missing information, we can continue working
          on whatever we were doing and let someone else fill in the missing information
          later. In software, we use variables a lot. We use variables as placeholders
          for name, email address, and even username. That way we can let the program
          know where those details will appear after the user fills them in. We use
          variables all the time in our work.
      3:
        image: notes/C4_unplugged_variables_3.png
        text: Any time you need to store a piece of information for later, we use
          a variable. Let's say we need to count the number of times the user has
          tweeted. Every time that user tweets, we'll add one to that number and every
          time the user deletes a tweet, we'll decrease that number by one. Anytime
          we need to know how many times that user has tweeted, we'll just look at
          that variable.
    C4_variables_artist:
      1:
        image: notes/C4_variables_artist_1.png
        text: A változó egy olyan tároló, amelyben egy értéket tudunk megőrizni. Amikor
          egy algoritmusban használod ezt a változót, az kinyitja a tárolót, és megnézi,
          hogy milyen érték található benne. Ezzel okosabb algoritmusokat írhatsz,
          amelyek a változóban tárolt értéktől függően másképpen viselkednek.
      2:
        image: notes/C4_variables_artist_2.png
        text: Például, ha azt az algoritmust szeretném megírni, hogy "Boldog születésnapot,
          10 éves lettél!" a testvéremnek, akkor ez jól működhet, de következő évben
          már azt akarom mondani, hogy "Boldog születésnapot, 11 éves lettél!". Használhatok
          egy "kor" (age) nevű változót a testvérem életkorának tárolására, és az
          algoritmusom lehet az az előző helyett, hogy "Boldog születésnapot, "kor"
          éves lettél!". Mivel a változók változhatnak, ezért a "kor" változó értékét
          frissítenem kell "kor" plusz 1 értékre.
      3:
        image: notes/C4_variables_artist_3.png
        text: Ebben a feladványban egy olyan változót fogunk használni, amely megadja
          a művész által rajzolt vonal hosszát. Később a kódunkban a "lépj előre"
          blokk megnézi, hogy milyen érték van beállítva a "length" (hossz) változóban.
    C4_variables_playlab:
      1:
        image: notes/C4_variables_playlab_1.png
        text: A változó egy olyan tároló, amelyben egy értéket tudunk megőrizni. Amikor
          egy algoritmusban használod ezt a változót, az kinyitja a tárolót, és megnézi,
          hogy milyen érték található benne. Ezzel okosabb algoritmusokat írhatsz,
          amelyek a változóban tárolt értéktől függően másképpen viselkednek.
      2:
        image: notes/C4_variables_playlab_2.png
        text: A játéklaborban fogsz most próbálkozni, és különböző játékokban kell
          a változók, úgy mint sebesség, magasság, pontszám, értékét módosítanod,
          és ezáltal a játék is változni fog. Nem kell a játék algoritmusát módosítanod,
          csak a változó értékét.
      3:
        image: notes/C4_variables_playlab_3.png
        text: A Kindle és a könyv X-ray számára végzett munkám során számos különböző
          módon használjuk a változókat. Például egy változóban el lehet menteni a
          könyv oldalainak a számát. A felhasználó növelheti vagy csökkentheti az
          oldalon található betűk méretét. A betűméret módosításával pedig módosulhat
          a könyv oldalainak száma. Ezt a könyv oldalszámának változóban tárolásával
          tudjuk beállítani.
    infinity_playlab_events:
      1:
        image: notes/infinity_playlab_events_1.png
        text: Now we're going to learn about something that all game programmers use
          everyday. They're called events. An event tells your program to listen for
          when something happens. And then when it does, it performs an action. Some
          examples of events are listening for a mouse click, an arrow button, or
          a tap on the screen.
      2:
        image: notes/infinity_playlab_events_2.png
        text: Here, we're going to make Baymax move up to touch Hiro and move down
          to touch Rapunzel when the player uses the up/down arrow keys or the up/down
          buttons. We'll use the when up arrow block and attach the move actor up
          block to it, so when the player presses the up arrow key, everything attached
          to the "when up arrow" block is run. We'll do the same thing to make Baymax
          move down. Step by step your game is getting more interactive.
    infinity_playlab_intro:
      1:
        image: notes/infinity_playlab_intro_1.png
        text: So what grade are you in? Second. Tenth grade. First grade. I was in
          eighth grade when I learned to program. I got my first computer when I was
          in sixth grade. What gets me excited is being able to fix people's problems.
          You can express yourself, you can build things from an idea.
      2:
        image: notes/infinity_playlab_intro_2.png
        text: Computer science is the basis for a lot of the things that college students
          and professionals will do for the next twenty or thirty years. I like programming
          because I like helping people. I get the opportunity to build something
          that's gonna make people's lives easier. I think it's the closest thing
          we have to a superpower. Getting started is the most important part. I'm
          a beginner myself and I want you to learn with me.
      3:
        image: notes/infinity_playlab_intro_3.png
        text: I'm John Vechey, I'm one of the co-founders of PopCap Games. We make
          games like Plants vs. Zombies, Bejeweled, and Peggle. A lot about games
          isn't how perfect your code is, it's not how perfect your art is, it's about
          how does it feel and how much fun it is. You can only get that sense by
          trying it, by doing it, by learning and adapting and iterating your own
          skills of making games.
      4:
        image: notes/infinity_playlab_intro_4.png
        text: Do you have a favorite video game? Well, we're going to take one step
          towards creating games just like that using Play Lab. Good games have a
          story and every story has actors. Actors do things like speak, move, and
          interact with each other. Maybe even score points based on the rules of
          the game. Today we'll be learning how to do all these things, one by one,
          with Disney's characters like Anna, Elsa, Hiro, Baymax, and Rapunzel. We'll
          build a game from scratch that can be shared and played on a phone.
      5:
        image: notes/infinity_playlab_intro_5.png
        text: Your screen is split into three main parts. On the left is the gamespace,
          where your program will run. The instructions for each level are written
          below. This middle area is the toolbox, and each of these blocks is a piece
          of code. The white space on the right is called the workspace, and this
          is where we'll build our program.
      6:
        image: notes/infinity_playlab_intro_6.png
        text: To start off, you'll need to link your blocks to the orange "when run"
          block. You can link multiple blocks together by dragging them out until
          you see the yellow outline, and then they'll snap together. In this first
          puzzle, Hiro is Actor 1 and Baymax is Actor 2. We need to move Hiro to get
          to Baymax by dragging the "move right" block out and linking it to the "when
          run" block. Once you have your blocks in place, hit the "Run" button to
          see what you've programmed.
      7:
        image: notes/infinity_playlab_intro_7.png
        text: Get started and by the end you'll be able to create your own game with
          these amazing actors that can interact, score points, throw microbots, cherries,
          saucepans, sparkles, and ice.. and vanish each other. It's all up to you!
    infinity_playlab_repeat_forever:
      1:
        image: notes/infinity_playlab_repeat_forever_1.png
        text: Can you imagine if you had to repeat something forever and ever? Hopefully
          you'll never have to because computers are really good at repeating things.
          This is the repeat forever block. Anything inside this block will happen
          forever in the game.
      2:
        image: notes/infinity_playlab_repeat_forever_2.png
        text: So if we wanted an actor to do something repeatedly without the player
          having to do anything, we'll put those blocks inside the repeat forever
          block. In this next puzzle, our goal is to help Anna walk up and down continuously.
          Learning how the repeat commands work will save you a ton of time later
          when you build your own game.
    tutorial_puzzle_challenge:
      1:
        image: notes/tutorial_puzzle_challenge_1.png
        text: What do you want to be when you grow up Olivia? An astronaut. Do you
          happen to know what a computer programmer is? Yeah um no. Ummm wait what?
          I'm not really sure how to explain it computer programming is pretty simple.
          It's a set of instructions like a recipe, you have to follow them step-by-step
          to get the end result you want.
      2:
        image: notes/tutorial_puzzle_challenge_2.png
        text: I can change the number of pixels, the length of the line, using this
          dropdown. How long was it again? You can see the instructions again by looking
          under the run button. Here I used the move forward block and I'm going to
          select 100 pixels. I can delete a block by dragging it into the toolbox
          or the trash can. Let's put it back.
      3:
        image: notes/tutorial_puzzle_challenge_3.png
        text: Run the code by pressing run. Well that didn't work! I'll press reset
          and figure out what's wrong. You can try a puzzle as many times as you'd
          like and skip puzzles and come back to them. Just make sure to try your
          best and don't give up. Let's add another move forward. That still didn't
          work. I can place a block between other blocks.
      4:
        image: notes/tutorial_puzzle_challenge_4.png
        text: Let's take a turn block and place it in between the move forwards. Turn
          left 45 degrees. Let's run it again. Reset, run, awesome! Here's another
          puzzle. Sometimes you are given starter code to complete. Here I need to
          add the appropriate lengths and degrees.
      5:
        image: notes/tutorial_puzzle_challenge_5.png
        text: You may sometimes accidentally trash the starter code. What do you do
          then? You can press clear puzzle and start all over again. I'm going to
          drag this number block into the different pixel areas. Select 100 for pixels,
          45 for degrees and 100 for pixels again. Awesome! Here is the Code Studio
          bee. I need to move the bee to each flower and get nectar.
      6:
        image: notes/tutorial_puzzle_challenge_6.png
        text: The first flower is three blocks away so I need three move forwards.
          1, 2, 3. Then a get nectar, then another get nectar. Well that didn't work!
          I'll place another move forward between the get nectars and run it again.
          Yay, it works! You just learned how to use the Code Studio artist and bee
          puzzles. Good luck on the Code Studio puzzle challenge.
    unplug1:
      1:
        image: notes/unplug1_1.png
        text: What do you want to be when you grow up Olivia? Umm, an astronaut! Do
          you happen to know what a computer programmer is? Yeahh, umm, no. Umm, what
          what? I'm not really sure how to explain it. Computer programming is pretty
          simple. It's a set of instructions, like a recipe. You have to follow them
          step by step to get the end result you want.
      2:
        image: notes/unplug1_2.png
        text: Computer science is a way to impact the world. It can be music videos,
          it can be games, detect whether or not someone is related to someone else.
          Find you know, people's friends. You can do all sorts of other crazy things
          that actually save lives. You do have to have a drive I think. It is to
          me like a paintbrush. I think great programming is not all that dissimilar
          from great art.
      3:
        image: notes/unplug1_3.png
        text: When I finally learned a little bit of programming, that blank wall
          resolved into a bunch of doors and you open them and of course then you
          find behind them is another hallway filled with a bunch of doors. Programming
          is fun and easy. You can do anything your mind wants to do. Finally you
          start to open enough doors the light comes in. To me a finished program
          is like a structure filled with light. All the corners are illuminated.
          The number of people that you can touch and interact with is something the
          world has never seen before.
      4:
        image: notes/unplug1_4.png
        text: Our first lesson in this series is all about what computer science is,
          what a computer scientist does and how you can be more responsible in your
          use of technology. It's a very important lesson but it is a little text-heavy.
          At the end, you get to make your very own customized encoding using your
          initials. It's a fun activity and it's very empowering because binary is
          one of those things that feels very technical but once you understand it,
          it's like you speak a secret language.
    unplug2:
      1:
        image: notes/unplug2_1.png
        text: The lesson on computational thinking is intended to teach you how to
          take a big difficult problem and break it down into several simpler problems.
          The goal of this lesson is to write a set of instructions that someone can
          follow to draw one of the monsters included in the lesson plan.
      2:
        image: notes/unplug2_2.png
        text: 'Students will break into groups to write instructions and then they''ll
          switch them with another group that will have to draw the monster. Groups
          will write instructions using the four steps of computational thinking:
          decomposition, pattern location, abstraction and algorithms.'
      3:
        image: notes/unplug2_3.png
        text: First groups will decompose the task which means make a game plan. Then
          they'll look for patterns between all the monsters in the catalog. When
          they come across differences between the monsters, they'll abstract or remove
          those details. For instance, one monster in the catalog has vegitas eyes
          and another has spritem eyes. But they both have eyes so we can write a
          line that says the monster has blank eyes.
      4:
        image: notes/unplug2_4.png
        text: So students will be able to write a set of instructions, called an algorithm,
          that list the monsters' parts with blanks for what the styles should be.
          This is the set of instructions they'll pass to other students to recreate
          their very own monster.
    unplug3:
      1:
        image: notes/unplug3_1.png
        text: In graph paper programming, we help explain how coding works by trying
          to help people recreate drawings using only arrows and scribbles. One person
          is given a small drawing on graph paper and they need to go through using
          only specific arrows and try to describe how to recreate that drawing.
      2:
        image: notes/unplug3_2.png
        text: 'In this activity, the only symbols you can use are these: move one
          square forward, one square backward, move one square up, move one square
          down, change to next color, and fill in your square with color. Once we
          have that coded up, we can hand it off to another person who can read the
          code and try and recreate the picture.'
    unplug4:
      1:
        image: notes/unplug4_1.png
        text: In graph paper programming, we help explain how coding works by trying
          to help people recreate drawings using only arrows and scribbles. One person
          is given a small drawing on graph paper and they need to go through using
          only specific arrows and try to describe how to recreate that drawing.
      2:
        image: notes/unplug4_2.png
        text: In the second half of the activity, we ask students how many different
          ways they can fold a piece of paper to create sixteen identical rectangles.
          Then you'll discuss how multiple solutions can lead to the same end result
          and why some solutions are better in certain situations.
    unplug5:
      1:
        image: notes/unplug5_1.png
        text: In graph paper programming, we help explain how coding works by trying
          to help people recreate drawings using only arrows and scribbles. One person
          is given a small drawing on graph paper and they need to go through using
          only specific arrows and try to describe how to recreate that drawing.
      2:
        image: notes/unplug5_2.png
        text: In the second half of the activity, we ask students how many different
          ways they can fold a piece of paper to create sixteen identical rectangles.
          Then you'll discuss how multiple solutions can lead to the same end result
          and why some solutions are better in certain situations.
    unplug6:
      1:
        image: notes/unplug6_1.png
        text: This activity is called coding with cards and it's great for any age.
          Like you learned with the if statements in earlier lessons,  during Blockly,
          if statements have a piece about them you have to evaluate to find out if
          it's true or false. That's the conditional and it can be used in lots of
          different ways.
      2:
        image: notes/unplug6_2.png
        text: We take advantage of that by creating programs on paper that you run
          using a random draw of playing cards. You might have an if statement that
          says something like if the card you draw is greater than 8, you get a point.
          Otherwise, your opponent gets a point. You can make it as simple or as complicated
          as you feel comfortable.
    unplug7:
      1:
        image: notes/unplug7_1.png
        text: You know how when you look up the lyrics for a song and they define
          the chorus at the very beginning and then for the rest of the song, they
          just refer you back to the chorus? That's how you call a function.
      2:
        image: notes/unplug7_2.png
        text: In this lesson, we define the chorus at the beginning of our song and
          then we sing through our song and go back and we notice that the class doesn't
          sing the word chorus, they automatically go up to the top where we define
          the chorus and sing through that. We use that as a great introduction to
          how to understand what a program is doing when it defines and calls a function.
      3:
        image: notes/unplug7_3.png
        text: We use familiar songs including Old Macdonald to talk about how a chorus
          is called over and over and how sometimes a chorus can change. When you
          have a song like Old Macdonald, where certain words change, that's a great
          place to introduce the idea of parameters. Passing certain words through
          so that you can send extra information to your function. Once we're sure
          everybody gets it, you can take your own familiar songs and break them up
          yourself. See if you can figure it out together.
    unplug8:
      1:
        image: notes/unplug8_1.png
        text: Our lesson on abstraction uses the familiar concept of madlibs, where
          you basically insert a blank in a story that can be filled with lots of
          different words. We take that idea, challenge kids to come up with their
          own words for their own stories, and really explain the concept of abstraction.
      2:
        image: notes/unplug8_2.png
        text: It's all about functions and how you can have a function, like in Old
          Macdonald, where you have a structure for your chorus but you have something
          little that changes and you abstract out that little thing that changes
          and you can fill it in with your own word every time through. But sometimes
          you have three words that change and so you fill those in with three parameters,
          that's still pretty helpful.
      3:
        image: notes/unplug8_3.png
        text: You can have one function that handles lots of different problems. Lots
          of times people will write separate functions for all those problems, not
          realizing there's only one little difference. If they could just find a
          way to handle that one little difference, they could just reuse one function
          over and over again, instead of having 14 different functions.
    unplug9:
      1:
        image: notes/unplug9_1.png
        text: Relay programming is an extremely fun lesson that gets across way more
          than computer science. Sometimes everybody is getting a little bit antsy
          and you want to get them up on their feet. This is a great way to add some
          excitement to computer science.
      2:
        image: notes/unplug9_2.png
        text: You break everyone up into two groups where they stand in a line and
          run relay style. The first person in each group runs to the other side of
          the room where you have a graph paper drawing and a blank piece of paper
          waiting for them. They write down the first step to creating that image,
          run back to their line, tag the next player who goes back up to write the
          next step.
      3:
        image: notes/unplug9_3.png
        text: This is a great way to get across the idea of debugging, needing to
          proofread your own work, and needing to check the work of the people done
          before you. You'll quickly understand how important it is that you be careful
          in your coding when a whole team is depending on you.
    unplug10:
      1:
        image: notes/unplug10_1.png
        text: This activity explains in an easy-to-understand way how the internet
          works. We explain all the terminology you'll need in simple terms so that
          students can simulate transmitting messages, like an email.
      2:
        image: notes/unplug10_2.png
        text: Students will transmit messages while pretending to be one of three
          transmission methods. Wireless internet, DSL or fiber optic. The students
          who represent wi-fi will have to wear the message they're transmitting on
          their head because wifi is the most likely to drop some information.
      3:
        image: notes/unplug10_3.png
        text: The students pretending to be DSL or cable will carry the message on
          the back of their hand, where they're slightly less likely to drop information.
          And the students representing fiber optic will get to carry them with both
          hands. This activity is a great way to understand something that many of
          us use every day.
    unplug11:
      1:
        image: notes/unplug11_1.png
        text: So now it's time to step back and take a birds eye view of everything
          you've done in these past nineteen lessons. This is a great time to call
          out to students that what they've just done is a huge achievement. They've
          learned more over these lessons than most adults know about computer science.
      2:
        image: notes/unplug11_2.png
        text: Discuss as a class or in small groups about their favorite lessons.
          Once you take a look back at everything you've learned, this is where your
          students' creativity can shine. Split them into groups and have them create
          an unplugged lesson of their own. Assign each group a key concept, like
          functions or algorithms and have lots of craft materials on hand for them
          to use. Have each group present their new unplugged activity or even set
          aside another day to do a few of the student created activities.
      3:
        image: notes/unplug11_3.png
        text: From everyone here at Code.org, we hope you've had a TON of fun during
          this course. And whether your dream is to create the best new app, use programming
          to help cure diseases, or you just want to be a stellar problem-solver,
          this course was the first step in achieving those dreams.
    starwars_intro:
      1:
        image: notes/starwars_intro_1.JPG
        text: Szia, Kathleen Kennedy vagyok, a Star Wars Ébredő erő producere. Ma
          egy filmcsillagunkkal fogsz dolgozni, BB-8-tel, aki egy szférikus droid.
          Mindent, amit csinál, és minden mozgását számítógépes szoftver irányítja.
          A számítógép-tudomány minden iparágban jelen van a marketingtől az egészségügyön
          át a filmig. Valójában informatikai mérnökök százai dolgoznak együtt az
          olyan filmeken, mint az Ébredő erő.
      2:
        image: notes/starwars_intro_2.JPG
        text: Szia, Rachel Rose vagyok, vezető kutatásfejlesztő mérnök az ILM-nél
          és én vezetem az animációs és karakterfejlesztő csapatot. Az erő ébredésében
          én segítek a művészeknek kidolgozni a mozgó ruhákat. Ezek a karakterek szerves
          részét képezik, és valósághűvé teszik őket a messzi-messzi galaxisban.
      3:
        image: notes/starwars_intro_3.JPG
        text: A következő egy órában a saját Star Wars játékunkat fogjuk elkészíteni.
          Megtanítjuk neked a programozás alapvető fogalmait. A programozás általában
          szövegesen történik, de mi vonszolható blokkokat fogunk használni a programíráshoz.
          A felszín alatt továbbra is kód lapul. Miután a blokkokkal kapcsolatos alapokat
          megtanultad, átváltunk JavaScriptre, az egyik népszerű webes programozási
          nyelvre.
      4:
        image: notes/starwars_intro_4.JPG
        text: Kezdetben Rey-jel fogsz dolgozni, aki beprogramozza BB-8-et, hogy minden
          ócskavasat összegyűjtsön. A képernyő három részre oszlik. A bal oldal a
          Star Wars játéktér, ahol a kód futni fog. A feladatokhoz kapcsolódó utasítások
          a játéktér alatt vannak.
      5:
        image: notes/starwars_intro_5.JPG
        text: A középső részben van az eszköztár, és benne minden blokk egy parancs,
          amit BB-8 megért.
      6:
        image: notes/starwars_intro_6.JPG
        text: A fehér terület a Munkaterület, és itt fogjuk építeni a programot.
      7:
        image: notes/starwars_intro_7.JPG
        text: Ha a mozdulj balra blokkot a munkaterületre vonszolod, és a Futtatásra
          kattintasz, mi fog történni? BB-8 balra mozdul egyet a rácson.
      8:
        image: notes/starwars_intro_8.JPG
        text: "És mi a helyzet, ha BB-8-nek valami mást is kell csinálnia a mozdulj
          balra blokk után? Hozzáadhatsz még egy blokkot a programhoz. Én most a mozdulj
          fel blokkot választom, és a mozdulj balra alá vonszolom, amíg a kiemelés
          meg nem jelenik. Ekkor elengedem, és a két blokk összekattan."
      9:
        image: notes/starwars_intro_9.JPG
        text: Ha ezután megnyomom a Futtatást, BB-8 minden a munkafelületen található
          parancsot teljesíteni fog föntről lefelé haladó sorrendben. Ha törölni szeretnél
          egy blokkot, csak vonszold vissza az eszköztárba.
      10:
        image: notes/starwars_intro_10.JPG
        text: Ha már megnyomtad a futtatást, bármikor rányomhatsz a Visszaállítás
          gombra, és újrakezdheted a munkát BB-8-tel. Nos, lássunk hozzá!
    starwars_typing:
      1:
        image: notes/starwars_typing_1.JPG
        text: A blokkok JavaScript parancsokat takarnak. A professzionális programozók
          körében manapság a JavaScript a legnépszerűbb programnyelv. Blokkokkal nagyon
          jól el lehet kezdeni tanulni a programozást, és valójában olyan vezető egyetemeken
          is, mint a Harvard vagy a Berkeley így kezdik tanítani a programozást. De
          miután az alapokat elsajátították, a mérnökök gépelik a kódot, mert így
          gyorsabban haladnak.
      2:
        image: notes/starwars_typing_2.JPG
        text: Több száz fajta parancsot begépelhetünk anélkül, hogy az eszköztárban
          kellene keresgélnünk őket. A tanulás során a gépelés lassabbnak tűnik, de
          azért érdemes megpróbálni.
      3:
        image: notes/starwars_typing_3.JPG
        text: A munkafelület jobb fölső sarkában a Kód megjelenítésére kattintva kattinthatsz
          a blokkokról a gépelős üzemmódba.
      4:
        image: notes/starwars_typing_4.JPG
        text: A következő leckében gépelési módban kezdünk. Még mindig behúzhatod
          az eszköztárból a blokkot, de beírhatod a parancs nevét is. Ahogy elkezdesz
          gépelni, látni fogod a lehetséges utasítások neveit az alatt, ahol gépelsz.
          Hogy gyorsabban haladj, ahelyett, hogy begépelnéd a teljes utasítás nevét,
          kiválaszthatod a felsorolásból az egyiket. Én mindig alkalmazom a munkámban
          ezt az automatikus-kiegészítés funkciót.
      5:
        image: notes/starwars_typing_5.JPG
        text: Amikor a kódot gépeled, akkor a számítógép elvárja, hogy nagyon precíz
          legyél. Pontosan kell gépelned az utasításneveket, figyelve a kis és nagybetűkre,
          a zárójelekre és a pontosvesszőkre. A legkisebb gépelési hiba is azt jelentheti,
          hogy BB-8 nem tudja megérteni a kódot és nem fog tudni mozogni.
      6:
        image: notes/starwars_typing_6.JPG
        text: Amikor egy sorban hibázol, akkor a szerkesztő kiemeli azt, így meg tudod
          próbálni kijavítani a szöveget.
      7:
        image: notes/starwars_typing_7.JPG
        text: Ha elakadsz, akkor az újrakezdés gomb megnyomásával bármikor elkezdheted
          az elejéről a feladatot, de visszaválthatsz blokk módba is a jobb felső
          sarokba kattintva. Akkor próbáljuk meg a gépelést! Ne keseredj el, ha hibázol.
          Mindenki próbálkozik egy darabig, mire összejön.
    starwars_events:
      1:
        image: notes/starwars_events_1.JPG
        text: Szia, az én nevem Charita Carter. Vezető kreatív producer vagyok a Walt
          Disney Imagineeringnél. Én vagyok felelős azokért a játékokért, amelyekkel
          a látogatóink találkoznak. Mindig keressük a lehetőségét annak, hogy fejlődjünk
          és emlékezetesebb élményt nyújtsunk a látogatóinknak, és a technológia alapvető
          ebben a folyamatban.
      2:
        image: notes/starwars_events_2.JPG
        text: Gratulálunk, megcsináltad! Ügyesen programoztad a BB-8-et. Most itt
          az ideje, hogy valami nehezebbe kezdjünk. Vágjunk bele! Miután a programozás
          alapjait megtanultad, visszamegyünk az időben és a saját játékunkat fogjuk
          elkészíteni R2-D2 és C3PO szereplésével.
      3:
        image: notes/starwars_events_3.JPG
        text: 'Hogy játékot tudjunk csinálni, meg kell ismerned egy fogalmat, amit
          a programozók minden nap használnak: ezek az események. Az események mondják
          a programnak hogy hallgassanak vagy várjanak addig, amíg valami nem történik,
          és amint az a dolog megtörténik, tegyenek valamit.'
      4:
        image: notes/starwars_events_4.JPG
        text: Esemény például egy kattintás az egérrel, egy nyíl billentyű lenyomása
          vagy az érintőképernyő megérintése.
      5:
        image: notes/starwars_events_5.JPG
        text: Most R2-D2-nak felfelé kell mozognia, hogy elvigyen egy üzenetet egy
          lázadó pilótáknak, majd lefelé kell mozognia a másik Lázadóhoz. Eseményeket
          fogunk használni a mozgatáshoz, amikor a játékos a föl-le billentyűket vagy
          gombokat használja.
      6:
        image: notes/starwars_events_6.JPG
        text: A "ha van felfelé nyíl" esemény blokkot fogjuk használni, és hozzácsatoljuk
          a menj fel blokkot. Ha a játékos megnyomja a felfelé nyilat, akkor a "ha
          van felfelé nyíl"-hoz kapcsolódó blokk elkezd futni. És ugyanezt fogjuk
          csinálni, hogy R2-D2 lefelé mozogjon.
      7:
        image: notes/starwars_events_7.JPG
        text: Ehhez a "ha van felfelé nyíl" whenUp() parancsot fogjuk használni. Amikor
          a parancsot kihúzod az eszköztárból, akkor látni fogod, hogy az egy-egy
          kapcsos zárójellel kezdődik és végződik a pontosvessző helyett. Ez lehetővé
          teszi, hogy középre más parancsokat illesszünk. Minden olyan parancs, amit
          ide beteszünk lefut majd, amikor a játékos megnyomja a felfelé mutató nyilat.
      8:
        image: notes/starwars_events_8.JPG
        text: Azt akarjuk, hogy R2-D2 felfelé menjen, így tegyünk be egy menj fel
          blokkot a parancsba. És ugyanezt fogjuk tenni, hogy R2-D2 lefelé menjen.
      9:
        image: notes/starwars_events_9.JPG
        text: "Így ahelyett, hogy a droid minden mozgását előre megterveznénk, R2-D2
          a gombnyomásokra fog reagálni, és így fog mozogni a képernyőn. Lépésről
          lépésre egyre interaktívabb lesz a játék."
    starwars_congrats:
      1:
        image: notes/starwars_congrats_1.JPG
        text: Szia, az én nevem Alice és én vezetem a projektet és a fejlesztő csapatot
          itt, a code.org-nál. Ezen a feladatsoron is dolgoztam, amit éppen elvégzel.
      2:
        image: notes/starwars_congrats_2.JPG
        text: 'Az utolsó szinten is túljutottál. Gratulálunk! Mindent megtanultál,
          ami ahhoz szükséges, hogy elkészítsd a saját Star Wars játékodat. Nincs
          több utasítás és megoldandó feladat. Elkészítheted a saját játékod és kitalálhatod,
          hogy működjön. Még egy dolog: új hangok és parancsok állnak a rendelkezésedre,
          hogy még több dolgot tudj csinálni.'
      3:
        image: notes/starwars_congrats_3.JPG
        text: "[tanulók beszélnek] Olyan játékot készítettünk, hogy akkor kapsz pontot,
          ha elkapsz egy Malacot. Viszont az a csavar, hogy valahányszor elkapsz egy
          Malacot, megjelenik egy Rohamosztagos. Az egész képernyő tele van Malacokkal,
          és ha 10 000-et elkapsz, akkor nyersz."
      4:
        image: notes/starwars_congrats_4.JPG
        text: "[tanulók beszélnek] Olyan játékot készítettünk, hogy nem veszthetsz,
          és minden, amit megölsz, pontot ér. Én a programomhoz megfordítottam a nyilak
          irányát, így ha a föl nyilat megnyomod, a szereplő lefelé megy, és ha a
          jobb gombot megnyomod, balra megy. Elég nehéz! Néha előnyhöz jutsz, igazságtalan
          előnyhöz, ha te vagy a játék fejlesztője. Megcsináltad? Jaj!"
      5:
        image: notes/starwars_congrats_5.JPG
        text: Ha elkészültél az alkotásoddal, válaszd a megosztást, hogy a link segítségével
          meg tudd mutatni a barátaidnak. Jó szórakozást!
    starwars_blocks_intro:
      1:
        image: notes/starwars_blocks_intro_1.JPG
        text: Szia, Kathleen Kennedy vagyok, a Star Wars Ébredő erő producere. Ma
          egy filmcsillagunkkal fogsz dolgozni, BB-8-tel, aki egy szférikus droid.
          Mindent, amit csinál, és minden mozgását számítógépes szoftver irányítja.
          A számítógép-tudomány minden iparágban jelen van a marketingtől az egészségügyön
          át a filmig. Valójában informatikai mérnökök százai dolgoznak együtt az
          olyan filmeken, mint az Ébredő erő.
      2:
        image: notes/starwars_blocks_intro_2.JPG
        text: Szia, Rachel Rose vagyok, vezető kutatásfejlesztő mérnök az ILM-nél
          és én vezetem az animációs és karakterfejlesztő csapatot. Az erő ébredésében
          én segítek a művészeknek kidolgozni a mozgó ruhákat. Ezek a karakterek szerves
          részét képezik, és valósághűvé teszik őket a messzi-messzi galaxisban.
      3:
        image: notes/starwars_blocks_intro_3.JPG
        text: A következő egy órában a saját Star Wars játékunkat fogjuk elkészíteni.
          Megtanítjuk neked a programozás alapvető fogalmait. A programozás általában
          szövegesen történik, de mi vonszolható blokkokat fogunk használni a programíráshoz.
          Kezdetben Rey-jel fogsz dolgozni, aki beprogramozza BB-8-et, hogy minden
          ócskavasat összegyűjtsön.
      4:
        image: notes/starwars_blocks_intro_4.JPG
        text: A képernyő három részre oszlik. A bal oldal a Star Wars játéktér, ahol
          a kód futni fog. A feladatokhoz kapcsolódó utasítások a játéktér alatt vannak.
      5:
        image: notes/starwars_blocks_intro_5.JPG
        text: A középső részben van az eszköztár, és benne minden blokk egy parancs,
          amit BB-8 megért.
      6:
        image: notes/starwars_blocks_intro_6.JPG
        text: A fehér terület a Munkaterület, és itt fogjuk építeni a programot.
      7:
        image: notes/starwars_blocks_intro_7.JPG
        text: Ha a mozdulj balra blokkot a munkaterületre vonszolod, és a Futtatásra
          kattintasz, mi fog történni? BB-8 balra mozdul egyet a rácson.
      8:
        image: notes/starwars_blocks_intro_8.JPG
        text: "És mi a helyzet, ha BB-8-nek valami mást is kell csinálnia a mozdulj
          balra blokk után? Hozzáadhatsz még egy blokkot a programhoz. Én most a mozdulj
          fel blokkot választom, és a mozdulj balra alá vonszolom, amíg a kiemelés
          meg nem jelenik. Ekkor elengedem, és a két blokk összekattan. Ha ezután
          megnyomom a Futtatást, BB-8 minden a munkafelületen található parancsot
          teljesíteni fog föntről lefelé haladó sorrendben."
      9:
        image: notes/starwars_blocks_intro_9.JPG
        text: Ha ki akarsz törölni egy blokkot, csak húzd vissza az eszköztárba.
      10:
        image: notes/starwars_blocks_intro_10.JPG
        text: Ha törölni szeretnél egy blokkot, csak vonszold vissza az eszköztárba.
    starwars_blocks_events:
      1:
        image: notes/starwars_blocks_events_1.JPG
        text: Szia, az én nevem Charita Carter. Vezető kreatív producer vagyok a Walt
          Disney Imagineeringnél. Én vagyok felelős azokért a játékokért, amelyekkel
          a látogatóink találkoznak. Mindig keressük a lehetőségét annak, hogy fejlődjünk
          és emlékezetesebb élményt nyújtsunk a látogatóinknak, és a technológia alapvető
          ebben a folyamatban.
      2:
        image: notes/starwars_blocks_events_2.JPG
        text: Gratulálunk, megcsináltad! Ügyesen programoztad a BB-8-et. Most itt
          az ideje, hogy valami nehezebbe kezdjünk. Vágjunk bele! Miután a programozás
          alapjait megtanultad, visszamegyünk az időben és a saját játékunkat fogjuk
          elkészíteni R2-D2 és C3PO szereplésével.
      3:
        image: notes/starwars_blocks_events_3.JPG
        text: 'Hogy játékot tudjunk csinálni, meg kell ismerned egy fogalmat, amit
          a programozók minden nap használnak: ezek az események. Az események mondják
          a programnak hogy hallgassanak vagy várjanak addig, amíg valami nem történik,
          és amint az a dolog megtörténik, tegyenek valamit.'
      4:
        image: notes/starwars_blocks_events_4.JPG
        text: Esemény például egy kattintás az egérrel, egy nyíl billentyű lenyomása
          vagy az érintőképernyő megérintése.
      5:
        image: notes/starwars_blocks_events_5.JPG
        text: Most R2-D2-nak felfelé kell mozognia, hogy elvigyen egy üzenetet egy
          lázadó pilótáknak, majd lefelé kell mozognia a másik Lázadóhoz. Eseményeket
          fogunk használni a mozgatáshoz, amikor a játékos a föl-le billentyűket vagy
          gombokat használja.
      6:
        image: notes/starwars_blocks_events_6.JPG
        text: A "ha van felfelé nyíl" esemény blokkot fogjuk használni, és hozzácsatoljuk
          a menj fel blokkot. Ha a játékos megnyomja a felfelé nyilat, akkor a "ha
          van felfelé nyíl"-hoz kapcsolódó blokk elkezd futni. És ugyanezt fogjuk
          csinálni, hogy R2-D2 lefelé mozogjon. Így ahelyett, hogy a kóddal előre
          meghatároznánk a droid mozgását, R2-D2 a gombok nyomására fog reagálni és
          így fog mozogni a képernyőn.
      7:
        image: notes/starwars_blocks_events_7.JPG
        text: Lépésről lépésre egyre interaktívabb lesz a játék.
    starwars_blocks_congrats:
      1:
        image: notes/starwars_blocks_congrats_1.JPG
        text: Szia, az én nevem Alice és én vezetem a projektet és a fejlesztő csapatot
          itt, a code.org-nál. Ezen a feladatsoron is dolgoztam, amit éppen elvégzel.
      2:
        image: notes/starwars_blocks_congrats_2.JPG
        text: 'Az utolsó szinten is túljutottál. Gratulálunk! Mindent megtanultál,
          ami ahhoz szükséges, hogy elkészítsd a saját Star Wars játékodat. Nincs
          több utasítás és megoldandó feladat. Elkészítheted a saját játékod és kitalálhatod,
          hogy működjön. Még egy dolog: új hangok és parancsok állnak a rendelkezésedre,
          hogy még több dolgot tudj csinálni.'
      3:
        image: notes/starwars_blocks_congrats_3.JPG
        text: "[tanulók beszélnek] Olyan játékot készítettünk, hogy akkor kapsz pontot,
          ha elkapsz egy Malacot. Viszont az a csavar, hogy valahányszor elkapsz egy
          Malacot, megjelenik egy Rohamosztagos. Az egész képernyő tele van Malacokkal,
          és ha 10 000-et elkapsz, akkor nyersz."
      4:
        image: notes/starwars_blocks_congrats_4.JPG
        text: "[tanulók beszélnek] Olyan játékot készítettünk, hogy nem veszthetsz,
          és minden, amit megölsz, pontot ér. Én a programomhoz megfordítottam a nyilak
          irányát, így ha a föl nyilat megnyomod, a szereplő lefelé megy, és ha a
          jobb gombot megnyomod, balra megy. Elég nehéz! Néha előnyhöz jutsz, igazságtalan
          előnyhöz, ha te vagy a játék fejlesztője. Megcsináltad? Jaj!"
      5:
        image: notes/starwars_blocks_congrats_5.JPG
        text: Ha elkészültél az alkotásoddal, válaszd a megosztást, hogy a link segítségével
          meg tudd mutatni a barátaidnak. Jó szórakozást!
    mc_intro:
      1:
        image: notes/mc_intro_1.JPG
        text: Az én nevem Jens Bergensten, de a legtöbben Jebnek hívnak. A Minecraft
          vezető fejlesztője vagyok itt a Mojangnál Stockholmban. Azt hiszem, tizenegy
          vagy tizenkét éves voltam, amikor programozni kezdtem, mert játékokat akartam
          készíteni. Az apukám egyik barátja mondta, hogy ha játékokat akarok csinálni,
          akkor meg kell tanulnom programozni. Így kezdtem el. Szeretek alkotni és
          kitalálni a játékok alapjait. Ez az, amit igazán szeretek a Minecraftban.
      2:
        image: notes/mc_intro_2.JPG
        text: A következő egy órában meg fogod ismerni a számítógép-tudomány alapjait,
          miközben Alexet vagy Steve-et vezérled, hogy a Minecraft világ egy kis szimulált
          darabjában mozogjanak.
      3:
        image: notes/mc_intro_3.JPG
        text: A programozás hagyományosan szövegesen történik, de ma a Blocky-t fogjuk
          használni, egy rendszert, amiben látványos, vonszolható blokkokkal lehet
          programokat írni. A felszín alatt JavaScript kód születik.
      4:
        image: notes/mc_intro_4.JPG
        text: A fogalmakat, amiket meg fogsz ismerni, a számítógép programozók nap
          mint nap használják, ezek a számítógép-tudomány alapjai. Itt a Mojangnál
          mi arra használjuk őket, hogy a Minecraftot programozzuk.
      5:
        image: notes/mc_intro_5.JPG
        text: Mielőtt elkezdjük, válassz egy karaktert. Én Alexet választom. Építsünk
          egy olyan kódot, ami segít nekünk a képernyőn mozogni.
      6:
        image: notes/mc_intro_6.JPG
        text: A képernyő három fő részre van osztva. A bal oldalon látod a Minecraft
          játékteret, ahol a program futni fog. Alatta találhatóak minden pályán az
          utasítások.
      7:
        image: notes/mc_intro_7.JPG
        text: A középső rész az eszköztár, és minden blokk benne egy parancs, amely
          irányítja Alexet.
      8:
        image: notes/mc_intro_8.JPG
        text: A jobb oldali fehér rész a Munkaterület, ahol a programot fogjuk írni.
      9:
        image: notes/mc_intro_9.JPG
        text: Ha a munkafelületre húzzuk az előrelépni parancsot, és aztán a Futtatásra
          kattintunk, mi fog történni? Alex előremozdul egy lépéssel a rácson.
      10:
        image: notes/mc_intro_10.JPG
        text: "És mi van, ha még valamit kellene csinálnia, miután előrelépett egyet?
          Még egy blokkot hozzáadhatunk a programhoz. Én most a fordulj jobbra parancsot
          választom, és az előrelépni blokk alá vonszolom, amíg a narancssárga csík
          meg nem jelenik. Ekkor elengedem, és a két blokk összepattan. Ezután újra
          megnyomhatjuk a futtatást. Alex a Munkaterületen szereplő utasításokat fentről
          lefelé történő sorrendben fogja végrehajtani."
      11:
        image: notes/mc_intro_11.JPG
        text: Ha ki akarsz törölni egy blokkot, csak húzd vissza az eszköztárba.
      12:
        image: notes/mc_intro_12.JPG
        text: 'Ha szeretnél mindent törölni, és visszatérni a kiindulási állapothoz,
          nyomd meg az Újrakezdés gombot a Munkaterület jobb fölső sarkában. Még egy
          dolog: látod a kis háromszöget a fordulj blokkokon? Valahányszor ezt a háromszöget
          látod, az azt jelenti, hogy több lehetőség közül választhatsz! Kezdjünk
          kódolni!'
    mc_repeat:
      1:
        image: notes/mc_repeat_1.JPG
        text: Az én nevem Lydia Winters, brand igazgató vagyok a Mojangnál, és mi
          készítettük a kis Minecraft nevű játékot.
      2:
        image: notes/mc_repeat_2.JPG
        text: Nekem a kedvenc elfoglaltságom a Minecraftban a felfedezés. Szeretek
          barlangokban kalandozni, és mindenfélét találni. Mivel én nem vagyok programozó,
          izgatottam várom, hogy végigcsináljam a Minecraft feladatokat és magam is
          tanuljak egy kis programozást.
      3:
        image: notes/mc_repeat_3.JPG
        text: Az előző feladványban nagyon sokszor kellett használni az előrelépni
          blokkot. Sokkal egyszerűbb lenne, ha megmondhatnánk a számítógépnek, hogy
          végezze el az előrelépni parancsot négyszer vagy ötször. Szerencsére az
          ismétlő ciklusokkal a számítógépek ezt nagyon jól tudják csinálni.
      4:
        image: notes/mc_repeat_4.JPG
        text: Amikor a Minecraftot fejlesztjük, az ismétlő ciklusokat használjuk,
          hogy egy új világ létrehozásához szükséges összes alapanyagot elhelyezzük.
          Ez ezer meg ezer blokkot jelent. Apróbb esetekben is használunk ciklusokat,
          például, hogy Alex lábai mozogjanak előre-hátra, ahogy megy. Az ismétlő
          ciklusok hatásos részei a programozásnak.
      5:
        image: notes/mc_repeat_5.JPG
        text: A következő szinteken beköszönt az est, így egy házat kell építenünk,
          hogy biztonságban legyünk. Az ismételd blokkot fogjuk használni, így ez
          nagyon könnyű lesz.
      6:
        image: notes/mc_repeat_6.JPG
        text: Hogy a ház falát megépítsük, vagy négyszer azt mondjuk Alexnek, hogy
          az előrelépni paranccsal menjen előre és helyezzen el egy deszkát, vagy
          ezeket a parancsokat az ismételd blokkba tesszük, hogy többször is megismételje
          ezeket a folyamatokat. Most rá kell kattintanunk az ismételd blokkra és
          meg kell mondjuk, hányszor ismételje a műveleteket. Most építsük fel a házat,
          mielőtt este lesz! Jó szórakozást!
    mc_if_statements:
      1:
        image: notes/mc_if_statements_1.JPG
        text: Most a ha utasításról fogunk tanulni. A ha utasítás alapvető része a
          programozás tanulásának. Ezek segítenek a számítógépnek döntéseket hozni.
      2:
        image: notes/mc_if_statements_2.JPG
        text: Minden számítógép használ ha utasításokat, a telefonom is. Például ha
          lezárom, fut egy olyan program, ami beenged, ha helyes jelszót adok meg.
          Ellenkező esetben zárolja a telefont, és egy hibaüzenetet ír ki.
      3:
        image: notes/mc_if_statements_3.JPG
        text: Használhatsz ha feltételeket, hogy Steve és Alice reagáljon arra, amit
          a világban tapasztal. Ha például van előttük egy szikla, akkor balra fordulhatnak.
          Vagy jobbra fordulhatnak, ha egy fának ütköznek.
      4:
        image: notes/mc_if_statements_4.JPG
        text: Nem akarunk a lávába esni. Könnyű elkerülni, látjuk a képernyőn, hol
          helyezkedik el. De mi van azzal a lávával, ami a kövek alatt van?
      5:
        image: notes/mc_if_statements_5.JPG
        text: Miután kibányásztuk a követ, meg kell bizonyosodnunk róla, hogy nincs
          alatta láva, mielőtt tovább haladnánk. Ha láva van alatta, akkor egy kő
          hidat kell a szereplőnk elé helyeznünk, mielőtt tovább tudnánk haladni.
          Így már biztonsággal tovább mehetünk. Ideje újra bányászni! Ne feledd el
          használni a ha blokkot, és vigyázz a lépteidre!
    mc_congrats_share:
      1:
        image: notes/mc_congrats_share_1.JPG
        text: Gratulálunk! Megismerted a számítógép-tudomány alapvető elemeit.
      2:
        image: notes/mc_congrats_share_2.JPG
        text: Most használhatod az összes blokkot, hogy a saját világodat megalkosd.
          Nincsen több utasítás és megoldandó feladvány. Bármit építhetsz, amit csak
          szeretnél. A választás a tiéd.
      3:
        image: notes/mc_congrats_share_3.JPG
        text: "[tanulók beszélnek] Nagyon valódi. Birkanyírás! Fáklyákból csináltam
          egy L betűt. Én egy A-t készítettem nyírfa deszkából. Építettünk egy házat
          gyapjúból!"
      4:
        image: notes/mc_congrats_share_4.JPG
        text: Ha elkészültél az alkotásoddal, válaszd a megosztást, hogy a link segítségével
          meg tudd mutatni a barátaidnak. Jó szórakozást!
    mc_congrats_no_share:
      1:
        image: notes/mc_congrats_no_share_1.JPG
        text: Gratulálunk! Megismerted a számítógép-tudomány alapvető elemeit.
      2:
        image: notes/mc_congrats_no_share_2.JPG
        text: Most használhatod az összes blokkot, hogy a saját világodat megalkosd.
          Nincsen több utasítás és megoldandó feladvány. Bármit építhetsz, amit csak
          szeretnél. A választás a tiéd.
      3:
        image: notes/mc_congrats_no_share_3.JPG
        text: "[tanulók beszélnek] Nagyon valódi. Birkanyírás! Fáklyákból csináltam
          egy L betűt. Én egy A-t készítettem nyírfa deszkából. Építettünk egy házat
          gyapjúból!"
      4:
        image: notes/mc_congrats_no_share_4.JPG
        text: Most bármit építhetsz, amit csak szeretnél! Jó szórakozást!
    gumball_intro:
      1:
        image: notes/gumball_intro_1.JPG
        text: If you'd like to make your own game, it's really easy. All you need
          are just a few basics of programming and you can start playing a game that
          you created.
      2:
        image: notes/gumball_intro_2.JPG
        text: Do you have a favorite video game? We're going to take one step toward
          creating games just like that in PlayLab. Good games have a story and every
          story has actors. Actors that do things like speak, move and interact with
          each other. Maybe even score points based on the rules of the game. Today,
          we'll be learning how to do all these things one by one with fun actors
          and then build a game from scratch that can be shared and played on a phone.
      3:
        image: notes/gumball_intro_3.JPG
        text: Today, we'll be learning how to do all these things one by one with
          fun actors and then build a game from scratch that can be shared and played
          on a phone.
      4:
        image: notes/gumball_intro_4.JPG
        text: Your screen is split into three main parts. On the left is the gamespace
          where your program will run. The instructions for each level are written
          below.
      5:
        image: notes/gumball_intro_5.JPG
        text: This middle area is the tool box and each of these blocks is a piece
          of code.
      6:
        image: notes/gumball_intro_6.JPG
        text: A jobb oldali fehér rész a Munkaterület, ahol a programot fogjuk írni.
      7:
        image: notes/gumball_intro_7.JPG
        text: To start off, you'll need to link your blocks to the orange when run
          block. You can link multiple blocks together by dragging them out until
          you see the yellow line and then they'll snap together.
      8:
        image: notes/gumball_intro_8.JPG
        text: In this first puzzle, we'll make the actors say something by linking
          the "say" block to the when run block and typing in your message. Once you
          have your blocks in place, hit the run button to see what you programmed.
      9:
        image: notes/gumball_intro_9.JPG
        text: Get started and by the end you'll be able to create your own game with
          all kinds of players that can interact, score points, throw things, and
          vanish each other. It's all up to you!
    gumball_events:
      1:
        image: notes/gumball_events_1.JPG
        text: Now we're going to learn about something all game programmers use everyday.
          They're called events. An event tells your program to listen for when something
          happens and then when it does, the game performs an action.
      2:
        image: notes/gumball_events_2.JPG
        text: Some examples of events are listening for a mouse click or an up or
          down arrow key or even a tap on the screen.
      3:
        image: notes/gumball_events_3.JPG
        text: Here, we're going to make the actor say something when the player clicks
          on it. We will use the when clicked block and attach the "say" block to
          it. When the player clicks, all the blocks attached to this block will be
          performed.
      4:
        image: notes/gumball_events_4.JPG
        text: There are also when arrow blocks. If you link move blocks to those,
          you can start to move your actors up, down, left, right, with the arrow
          keys. Little by little your game is getting more interactive.
    gumball_repeat:
      1:
        image: notes/gumball_repeat_1.JPG
        text: Can you imagine if you had to repeat something forever and ever? Hopefully
          you never have to because computers are really good at repeating things.
      2:
        image: notes/gumball_repeat_2.JPG
        text: This is the repeat forever block. Anything inside this block will happen
          forever in the game. If we want an actor to do something repeatedly without
          the player having to do anything, we'll put those blocks inside the repeat
          forever block.
      3:
        image: notes/gumball_repeat_3.JPG
        text: In this next puzzle, our goal is to help the actor do a job continuously.
          Learning how the repeat commands work will save you a ton of time later
          when you build your own game.
    iceage_intro:
      1:
        image: notes/iceage_intro_1.JPG
        text: If you'd like to make your own game, it's really easy. All you need
          are just a few basics of programming and you can start playing a game that
          you created.
      2:
        image: notes/iceage_intro_2.JPG
        text: Do you have a favorite video game? We're going to take one step toward
          creating games just like that in PlayLab. Good games have a story and every
          story has actors. Actors that do things like speak, move and interact with
          each other. Maybe even score points based on the rules of the game. Today,
          we'll be learning how to do all these things one by one with fun actors
          and then build a game from scratch that can be shared and played on a phone.
      3:
        image: notes/iceage_intro_3.JPG
        text: Today, we'll be learning how to do all these things one by one with
          fun actors and then build a game from scratch that can be shared and played
          on a phone.
      4:
        image: notes/iceage_intro_4.JPG
        text: Your screen is split into three main parts. On the left is the gamespace
          where your program will run. The instructions for each level are written
          below.
      5:
        image: notes/iceage_intro_5.JPG
        text: This middle area is the tool box and each of these blocks is a piece
          of code.
      6:
        image: notes/iceage_intro_6.JPG
        text: A jobb oldali fehér rész a Munkaterület, ahol a programot fogjuk írni.
      7:
        image: notes/iceage_intro_7.JPG
        text: To start off, you'll need to link your blocks to the orange when run
          block. You can link multiple blocks together by dragging them out until
          you see the yellow line and then they'll snap together.
      8:
        image: notes/iceage_intro_8.JPG
        text: In this first puzzle, we'll make the actors say something by linking
          the "say" block to the when run block and typing in your message. Once you
          have your blocks in place, hit the run button to see what you programmed.
      9:
        image: notes/iceage_intro_9.JPG
        text: Get started and by the end you'll be able to create your own game with
          all kinds of players that can interact, score points, throw things, and
          vanish each other. It's all up to you!
    iceage_events:
      1:
        image: notes/iceage_events_1.JPG
        text: Now we're going to learn about something all game programmers use everyday.
          They're called events. An event tells your program to listen for when something
          happens and then when it does, the game performs an action.
      2:
        image: notes/iceage_events_2.JPG
        text: Some examples of events are listening for a mouse click or an up or
          down arrow key or even a tap on the screen.
      3:
        image: notes/iceage_events_3.JPG
        text: Here, we're going to make the actor say something when the player clicks
          on it. We will use the when clicked block and attach the "say" block to
          it. When the player clicks, all the blocks attached to this block will be
          performed.
      4:
        image: notes/iceage_events_4.JPG
        text: There are also when arrow blocks. If you link move blocks to those,
          you can start to move your actors up, down, left, right, with the arrow
          keys. Little by little your game is getting more interactive.
    iceage_repeat:
      1:
        image: notes/iceage_repeat_1.JPG
        text: Can you imagine if you had to repeat something forever and ever? Hopefully
          you never have to because computers are really good at repeating things.
      2:
        image: notes/iceage_repeat_2.JPG
        text: This is the repeat forever block. Anything inside this block will happen
          forever in the game. If we want an actor to do something repeatedly without
          the player having to do anything, we'll put those blocks inside the repeat
          forever block.
      3:
        image: notes/iceage_repeat_3.JPG
        text: In this next puzzle, our goal is to help the actor do a job continuously.
          Learning how the repeat commands work will save you a ton of time later
          when you build your own game.
    mc_2016_intro:
      1:
        image: notes/mc_2016_intro_1.jpg
        text: Hi, my name is Jens and I'm the lead creative designer of Minecraft.
          In the next hour, you'll make your own Minecraft game. This looks like Minecraft
          but the world has stopped. The sheep aren't moving, the chickens aren't
          laying eggs, and zombies are just standing still. It's up to you to add
          the code to make the Minecraft world work.
      2:
        image: notes/mc_2016_intro_2.jpg
        text: 'My name is Melissa and I am a user researcher at Minecraft. What I''m
          really interested in is how people think and interact with technology and
          so this job is the perfect job for me to put together the computer engineering
          with the psychology: how people think and behave.'
      3:
        image: notes/mc_2016_intro_3.jpg
        text: You'll see your screen is split into three main parts. 1) On the left
          is the Minecraft game. Right now the world is frozen but we're going to
          fix that with code.
      4:
        image: notes/mc_2016_intro_4.jpg
        text: 2) This middle area is the toolbox. Each of these blocks is a command
          that chickens, sheep, and other Minecraft creatures can understand.
      5:
        image: notes/mc_2016_intro_5.jpg
        text: 3) The space on the right is called the workspace and this is where
          we'll build our program.
      6:
        image: notes/mc_2016_intro_6.jpg
        text: If you forget what to do, the instructions for each level are at the
          top.
      7:
        image: notes/mc_2016_intro_7.jpg
        text: To start off, we're going to program a chicken. Let's drag the "move
          forward" command to the workspace. When I hit "Run" the chicken moves forward
          one step. To go further, I'll drag another "move forward" block underneath
          the first "move forward" block until the highlight appears. Then I'll drop
          it and the two blocks snap together. If I hit "Run" again, the chicken walks
          two steps.
      8:
        image: notes/mc_2016_intro_8.jpg
        text: If you ever want to delete a block, just remove it from the stack and
          drag it back to the toolbox.
      9:
        image: notes/mc_2016_intro_9.jpg
        text: After you've hit "Run" you can always hit the "Reset" button to reset
          the game and start over. Now, it's your turn to make your very own version
          of Minecraft. Have fun!
    mc_2016_loops:
      1:
        image: notes/mc_2016_loops_1.jpg
        text: Hi, I'm Lisa. I'm a software developer on Minecraft and I work on some
          of the animals and enemies in the game. One of the animals that I worked
          on is the ocelot. I worked on the part where you can feed an ocelot a fish
          to tame it into your own cat.
      2:
        image: notes/mc_2016_loops_2.jpg
        text: As humans, we get really bored if we have to do the same thing over
          and over and over again. But the cool thing about computers is that they
          can do the same thing millions or even billions of times in a row without
          getting bored. This repetition is called a loop and every creature in Minecraft
          uses loops.
      3:
        image: notes/mc_2016_loops_3.jpg
        text: Earlier, we got a chicken to move across the screen but then she stopped.
          In Minecraft, the chickens wander around forever and ever. Let's use a "forever
          do" loop from our toolbox to keep our chickens moving around forever too.
          The power of loops will save you tons of time and open up all kinds of neat
          options as you build your own version of Minecraft.
    mc_2016_events:
      1:
        image: notes/mc_2016_events_1.jpg
        text: On this next level, you can pick to be either Steve or Alex. Press the
          arrow buttons on your keyboard to move up, down, left, and right. Now you
          can move around a level wherever you want. To use a creature, just walk
          towards it, turn to face it, and press the spacebar.
      2:
        image: notes/mc_2016_events_2.jpg
        text: If you're using a touch screen, swipe up, down, left, and right to move
          around. Then tap the game to use the item in front of you.
      3:
        image: notes/mc_2016_events_3.jpg
        text: But what happens when you use it? In Minecraft, sheep drop wool when
          you shear them, cows run away when you hit them, and creepers explode when
          you get near them. These reactions happen thanks to something called events.
          Events tell your program to listen or wait for when something happens. And
          when it does, perform an action.
      4:
        image: notes/mc_2016_events_4.jpg
        text: So far, you've used one event. Code you put in the "when spawned" slot
          runs when your creature is created or when the game starts. Over the next
          few levels you'll have new slots for events such as "when touched" that
          runs when you touch the creature, or "when used" for when you use the creature.
          Or, if you want your zombie to disappear when the sun comes up, put that
          in the "when day" slot
    mc_2016_spawn:
      1:
        image: notes/mc_2016_spawn_1.jpg
        text: In games, spawn means the same thing as create. In this level, let's
          make zombies spawn when the sun goes down. To do this, we'll use the "when
          night" block.
      2:
        image: notes/mc_2016_spawn_2.jpg
        text: Since we want the zombies to spawn at night we'll add the "spawn zombie"
          block under the "when night" block. As soon as they're spawned, each zombie
          will run the code that you put in their "when spawned" event slot. Have
          fun spawning zombies!
    mc_2016_congrats:
      1:
        image: notes/mc_2016_congrats_1.jpg
        text: Congratulations! You've learned to use computer science commands to
          bring the Minecraft world to life. You are the developer now. You've unlocked
          all the commands and all the creatures. You choose what happens.
      2:
        image: notes/mc_2016_congrats_2.jpg
        text: When you're done making your game, choose share to get a link that you
          can share with your friends or to play your game on your phone. Have fun!
          I'm looking forward to playing your version of Minecraft.
