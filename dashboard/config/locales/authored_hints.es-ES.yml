---
es:
  data:
    authored_hints:
      2-3 Artist 1 new_authored_hint:
        2-3_Artist_1_new_a: Si utiliza el bloque para hacerme 'avanzar 100 píxeles',
          sacaré una línea automáticamente.
        2-3_Artist_1_new_b: "¿Tienes problemas girando la esquina? Usa el bloque `girar
          a la derecha 90 grados`."
      2-3 Artist 11_authored_hint:
        2-3_Artist_11_a: "¿Tienes problemas con los ángulos? Necesitas ir 360 grados
          en 8 vueltas.  ¿Qué es 360/8? "
      2-3 Artist 12_authored_hint:
        2-3_Artist_12_a: Hay 360 grados en un círculo, así que si el artista gira
          1 grado cada vez en el lazo, tendrá que hacerlo 360 veces.
      2-3 Artist 2 new_authored_hint:
        2-3_Artist_2_new_a: El artista parece no estar apuntando en la dirección correcta.
          ¿Puedes hacerlo girar primero antes de dibujar la línea?
      2-3 Artist 3new_authored_hint:
        2-3_Artist_3new_a: "¿Cuánto es 100-70?  Basado en el problema de la historia,
          así es que tal alto el sombrero tiene que ser!"
        2-3_Artist_3new_b: El artista parece no estar apuntando en la dirección correcta.
          ¿Puedes hacerlo girar primero antes de dibujar la línea?
      2-3 Artist 4_authored_hint:
        2-3_Artist_4_a: Para terminar la casa, ¡todo lo que tenemos que hacer es dibujar
          un cuadrado!
      2-3 Artist 6_authored_hint:
        2-3_Artist_6_a: 'Para hacer esos pequeños ángulos, tienes que girar *más lejos*
          cada vez que hecho con la Plaza.   '
        2-3_Artist_6_b: Como ya estoy mirando hacia la derecha, es más fácil empezar
          por avanzar, y luego hacer vueltas a la izquierda para crear el triángulo.
        2-3_Artist_6_c: Cada lado del triángulo es de la misma longitud que cada lado
          de la Plaza... ¡100 píxeles!
      2-3 Artist 7_authored_hint:
        2-3_Artist_7_a: La forma más sencilla de resolver este rompecabezas es dibujar
          el primer cuadrado y acabar con el artista apuntando hacia abajo antes de
          comenzar el segundo cuadrado.
      2-3 Artist 8_authored_hint:
        2-3_Artist_8_a: Si cortar 200 por la mitad, ¿de cuántos píxeles de ancho necesita
          ser cada cuadrado?
      2-3 Artist 9 NEW_authored_hint:
        2-3_Artist_9_a: Este diamante es realmente sólo un cuadrado de lado
      2-3 Artist 9 REPLACEMENT_authored_hint:
        step_size: Cada paso es de 100 píxeles de ancho y 100 píxeles de alto.
      2-3 Artist 9_authored_hint:
        2-3_Artist_9_a: Este diamante es sólo un cuadrado dado vuelta 45 grados.
        2-3_Artist_9_b: "¡No olvide girar el artista a la izquierda 45 grados antes
          de empezar a dibujar tu cuadrado! ![](https://images.code.org/47cc2474e533667101a2d73b98da204e-image-1467744539967.gif)"
      2-3 Artist Debugging 10_authored_hint:
        2-3_Artist_Debugging_10_a: Recuerda, quieres que el panel de control sea 10
          píxeles * mayor *... así que no olvides ** añadir ** 10 a cualquier número
          que cambies.
        2-3_Artist_Debugging_10_b: "** ¡Está bien usar ensayo y error aquí! **\n\nComienza
          por cambiar un número a la vez.    \n\n ¿Que números de hacen qué?\n\nSi
          te pierdes, simplemente haz clic en \"Comenzar nuevamente\"."
      2-3 Artist Debugging 2_authored_hint:
        2-3_Artist_Debugging_2_a: 'Consejo: Cada barba es de 75 píxeles de largo.'
      2-3 Artist Debugging 3_authored_hint:
        2-3_Artist_Debugging_3_a: Una de las vueltas es 15 grados más pequeña.
        2-3_Artist_Debugging_3_b: Si el programa se ejecuta demasiado rápido para
          ver lo que está ocurriendo, trate de frenar usando la barra deslizante.
      2-3 Artist Debugging 7_authored_hint:
        2-3_Artist_Debugging_7_a: "¿Qué pasa si haces que el artista se mueva o salte
          hacia atrás después de que dibuje la primera línea?"
      2-3 Artist Debugging 8_authored_hint:
        2-3_Artist_Debugging_8_a: |-
          ¿Cuántas veces se repitió mi forma?

          ¿Cuantas veces *debería* repetirse la forma?

          ¿Donde se puede cambiar eso en el programa?
      2-3 Artist Debugging 9_authored_hint:
        2-3_Artist_Debugging_9_a: "¡El artista necesita girar 60 grados más a la izquierda
          antes de comenzar a dibujar!"
        2-3_Artist_Debugging_9_b: No necesitas agregar otro bloque para obtener el
          giro completo, ¡solamente agrega 60 grados al bloque de `girar a la izquierda`
          que ya hay allí!
      2-3 Artist Functions 1 a_authored_hint:
        2-3_Artist_Functions_1_a: Los cuadrados tienen 100 píxeles de lado cada uno,
          lo que significa que te habrás movido 175 píxeles hacia adelante antes de
          dibijar el segundo cuadrado.
        2-3_Artist_Functions_1_b: Está bien dibujar líneas superpuestas para realizar
          los anteojos.
      2-3 Artist Functions 1_authored_hint:
        2-3_Artist_Functions_1_a: Los cuadrados tienen 100 píxeles de lado cada uno,
          lo que significa que te habrás movido 175 píxeles hacia adelante antes de
          dibijar el segundo cuadrado.
        2-3_Artist_Functions_1_b: Está bien dibujar líneas superpuestas para realizar
          los anteojos.
      2-3 Artist Functions 11 a_authored_hint:
        2-3_Artist_Functions_11_a: Deberás cambiar no solo la cantidad y el largo
          de los lados dentro de la función, sino que también deberás cambiar el ángulo
          con el que el artista gira entre cada lado.
      2-3 Artist Functions 11_authored_hint:
        2-3_Artist_Functions_11_a: Deberás cambiar no solo la cantidad y el largo
          de los lados dentro de la función, sino que también deberás cambiar el ángulo
          con el que el artista gira entre cada lado.
      2-3 Artist Functions 12 a_authored_hint:
        2-3_Artist_Functions_12_a: Intenta ejecutar el código primero para ver que
          necesitarás agregar.
      2-3 Artist Functions 12_authored_hint:
        2-3_Artist_Functions_12_a: Intenta ejecutar el código primero para ver que
          necesitarás agregar.
      2-3 Artist Functions 2 a_authored_hint:
        2-3_Artist_Functions_2_a: |-
          Tu programa deberá:
          - Usar función
          - Mover hacia adelante 100 + 75 píxeles
          - Usar función
      2-3 Artist Functions 2_authored_hint:
        2-3_Artist_Functions_2_a: |-
          Tu programa deberá:
          - Usar función
          - Mover hacia adelante 100 + 75 píxeles
          - Usar función
      2-3 Artist Functions 3 a_authored_hint:
        2-3_Artist_Functions_3_a: "**115 + 45 = 160**"
      2-3 Artist Functions 3_authored_hint:
        2-3_Artist_Functions_3_a: "**115 + 45 = 160**"
      2-3 Artist Functions 4 a_authored_hint:
        2-3_Artist_Functions_4_a: El artista necesita girar 120 grados entre cada
          cuadrado para completar este diseño.
      2-3 Artist Functions 4_authored_hint:
        2-3_Artist_Functions_4_a: El artista necesita girar 120 grados entre cada
          cuadrado para completar este diseño.
      2-3 Artist Loops New 11_authored_hint:
        2-3_Artist_Loops_New_11_a: |-
          Recordar que el código del último rompecabezas fue:

          ![](https://images.code.org/15288d042780242ec5edeed5204c6ebb-image-1469640792081.png)
        2-3_Artist_Loops_New_11_b: Tu nuevo giro debería ir al **final** del código
          dentro del bucle.
      2-3 Artist Loops New 12_authored_hint:
        2-3_Artist Loops_New_12_a: Antes de iniciar el diamante, el artista necesita
          girar 60 grados a la izquierda para llegar al camino correcto.
        2-3_Artist Loops_New_12_b: Luego que el artista se mueve hacia adelante 100
          píxeles, deberá girar a la derecha 120 grados para lograr realizar la esquina
          fina.
        2-3_Artist Loops_New_12_c: El artista necesita girar a la derecha solamente
          60 grados para crear una esquina amplia.
      2-3 Artist Loops New 13_authored_hint:
        2-3_Artist_Loops_New_13_a: |-
          Al final de cada diamante, el artista ya estará mirando en la dirección correcta para iniciar el siguiente.

          Por esto no se necesita agregar un bloque extra de `girar a la izquierda` antes de comenzar nuevamente.
        2-3_Artist_Loops_New_13_b: |-
          Para realizar cada diamente, el artista necesitará:
          - moverse
          - girar a la derecha 120 grados
          - moverse
          - girar a la derecha 60 grados

          ¡Luego todo de nuevo!
      2-3 Artist Loops New 9_authored_hint:
        2-3_Artist_Loops_New_9_a: El artista necesita girar 45 grados a la derecha
          antes de empezar a dibujar.
        2-3_Artist_Loops_New_9_b: Esta V es la mitad de un cuadrado.  ¿Cuál sería
          el código para dibujar la mitad de un cuadrado?
      2-3 Artist Nested Loops 1_authored_hint:
        2-3_Artist_Nested_Loops_1_a: Recuerda poner todos los bloques grises dentro
          de tu bucle.
      2-3 Artist Nested Loops 3_authored_hint:
        2-3_Artist_Nested_Loops_3_a: |-
          ¿Necesitas ayuda con los ángulos?
          **360/12 = 30**
        2-3_Artist_Nested_Loops_3_b: Recuerda poner todo el código gris y tu bloque
          de girar dentro de un bucle.
      2-3 Artist Nested Loops 4_authored_hint:
        2-3_Artist_Nested_Loops_3_a: |-
          ¿Necesitas ayuda con los ángulos?
          **360/12 = 30**
      2-3 Artist Nested Loops 5_authored_hint:
        2-3_Artist_Nested_Loops_5_a: Utilice el bloque 'salto adelante' llegar desde
          la parte superior de una plaza el lugar donde se iniciará la siguiente.
          Si sus plazas son 20 píxeles de alto y 20 píxeles apartes, ¿cuánto necesita
          saltar?
      2-3 Artist Nested Loops 7_authored_hint:
        2-3_Artist_Nested_Loops_7_a: "¿Hasta qué punto gire en cada lazo?    ¿Qué
          es 360/10?"
      2-3 Artist Nested Loops 9_authored_hint:
        2-3_Artist_Nested_Loops_9_a: |-
          ¿Necesitas ayuda para encontrar el ángulo correcto?

          **360/12 = 30**
      2-3 Bee Conditionals 14_authored_hint:
        2-3_Bee_Conditionals_14_a: "¿Teniendo un tiempo difícil averiguar cómo bajar
          los bloques?  ¡Intentar tratar la flor roja exactamente igual que una flor
          morada!"
        2-3_Bee_Conditionals_14_b: "¿Si la flor roja fuera púrpura, podría usted averiguar
          cómo utilizar un bucle extra 'repetición' para reducir el código?"
        2-3_Bee_Conditionals_14_c: "Intenta separar esto en dos partes :  \n\n\n![](https://images.code.org/895a52f3febff9edb83979f7861cf67a-image-1469640892331.png)\n\n1)
          Tomar néctar 3 veces\n  - Mueve adelante 5 veces\n  - Verifica si hay néctar,
          si hay: cógelo\n  - Gira a la izquierda\n  \n2) Fabricar miel \n  - Mueve
          adelante una vez\n  - Fabrica dos de miel"
      2-3 Bee Conditionals 15_authored_hint:
        2-3_Bee_Conditionals_15_a: 'Recuerde: Flores de color púrpura sólo néctar
          ya sea 0 o 1 y puede cambiar cada vez que se ejecuta el programa.'
      2-3 Bee Conditionals 3_authored_hint:
        2-3_Bee_Conditionals_3_a: El código será acortado si usa un bucle cada vez
          que avanza, otro bucle para recolectar néctar y otro para hacer miel.
      2-3 Bee Conditionals 6_authored_hint:
        2-3_Bee_Conditionals_6_a: Recuerde:! las flores púrpuras cambian entre 0 y
          1 de néctar cuando ejecuta su programa!
      2-3 Bee Debugging 1_authored_hint:
        2-3_Bee_Debugging_1_a: Una vez que encuentras y arreglas el bloque incorrecto,
          ¿ves algún patrón que pueda hacerse más simple usando un ciclo `repetir`?
      2-3 Bee Debugging 2_authored_hint:
        2-3_Bee_Debugging_2_a: Una vez que encuentras y arreglas el bloque incorrecto,
          ¿ves algún patrón que pueda hacerse más simple usando un ciclo `repetir`?
      2-3 Bee Debugging 4_authored_hint:
        2-3_Bee_Debugging_4_a: "¿Hay algún lugar donde la abeja haga algo que no tiene
          sentido? ¿Qué pasa cuando cambias ese bloque?"
      2-3 Bee Functions 4_authored_hint:
        2-3_Bee_Functions_4_a: No tienes que usar un bucle con una función. Intenta
          moverte, usa las funciones, luego avanza y usa las funciones de nuevo.
      2-3 Bee Functions 6_authored_hint:
        2-3_Bee_Functions_6_a: No tienes que usar un bucle con una función. Intenta
          moverte, usa las funciones, luego avanza y usa las funciones de nuevo.
      2-3 Bee Functions 8_authored_hint:
        2-3_Bee_Functions_8_a: |-
          Si el rompecabezas parece desafiante, intenta construir tu función de poco a poco
          Agrega algunos bloques, luego pruébalo. Agrega más, luego intenta de nuevo. ¡Pronto, lo lograras!
          ![](https://images.code.org/3875224b35889000a0998ca25cfa4ecf-image-1467996493914.gif)
      2-3 Bee Functions 9_authored_hint:
        2-3_Bee_Functions_8_a: |-
          Si el rompecabezas parece desafiante, intenta construir tu función de poco a poco.
          Agregue algunos bloques, luego pruébelo. Agrega más, luego intenta de nuevo. ¡Pronto, llegarás allí!
        2-3_Bee_Functions_8_b: |-
          Recuerda construir tu código dentro del bloque de función verde.
          ![](https://images.code.org/8fe1fae5caf4ede3a9c9bd9f26940cde-image-1467996837459.gif)
      2-3 Bee Loops 2_authored_hint:
        2-3_Bee_Loops_2_a: Deberías terminar con cuatro bloques dentro de tu bucle.
      2-3 Bee Loops 3_authored_hint:
        2-3_Bee_Loops_3_a: Deberías tener 6 bloques dentro de tu bucle.
      2-3 Bee Loops 3B_authored_hint:
        2-3_Bee_Loops_3B_a: Necesitas dos bucles `repetir` diferentes, uno después
          del otro.
      2-3 Bee Loops 4_authored_hint:
        2-3_Bee_Loops_4_a: Deberías terminar con cinco bloques dentro de tu bucle.
      2-3 Bee Loops 4A_authored_hint:
        2-3_Bee_Loops_4A_a: La primera acción será un giro, en lugar de un movimiento.
        2-3_Bee_Loops_4A_b: La última parte del programa puede terminarse escribiendo
          código al final de su programa fuera de su bucle.
        2-3_Bee_Loops_4A_c: Si aún no puedes detectar los bucles, intenta codificarlo
          primero, luego ve lo que puedes combinar en un bucle 'repetir' al final.
      2-3 Bee Loops 5_authored_hint:
        2-3_Bee_Loops_5_a: Si no puedes detectar los bloques para colocar `repetir`
          inmediatamente, comienza por codificar cada movimiento y busca un patrón.
      2-3 Bee Loops 6_authored_hint:
        2-3_Bee_Loops_6_a: Si no puedes decir qué debería ir en el bucle 'repetir',
          intenta arrastrar los bloques uno por uno y ve si puedes encontrar un patrón.
        2-3_Bee_Loops_6_b: Aquí deberían haber 6 bloques dentro del bucle 'repetir'
          cuando hayas terminado.
      2-3 Bee Loops 7_authored_hint:
        2-3_Bee_Loops_7_a: La primera acción será un giro, en lugar de un movimiento.
        2-3_Bee_Loops_7_b: 'Si no puedes imaginar el bucle desde el principio, intenta
          programarlo a lo largo del camino, luego busca un patrón.  '
      2-3 Maze 1_authored_hint:
        2-3_Maze_1_a: Para usar un bloque `avanzar`, arrástralo desde el área de la
          barra de herramientas al espacio de trabajo y conéctelo al bloque`al ejecutar`.
      2-3 Maze 16_authored_hint:
        2-3_Maze_16_a: Si el patrón es difícil de ver, intenta programarlo todo primero
          y ve qué cosas se repiten una y otra vez antes de colocar los bucles.
        2-3_Maze_16_b: Para poner muchos bloques dentro de un bucle 'repetir', simplemente
          arrastra un bucle hacia el espacio de trabajo, luego arrastra todos los
          bloques desde el programa de inicio dentro de él!
      2-3 Maze 6_authored_hint:
        2-3_Maze_6_a: "¡Aquí tienes dos caminos para resolver el puzzle!"
      2-3 Maze Loops 17_authored_hint:
        2-3_Maze_Loops_17_a: Si el patrón es difícil de ver, intenta programarlo todo
          primero y ve qué cosas se repiten una y otra vez antes de colocar los bucles.
        2-3_Maze_Loops_17_b: ¿Se borró el código de inicio? ¡Haga clic en "volver
          a empezar" para recuperarlo!
      2-3 Maze Loops 18_authored_hint:
        2-3_Maze_Loops_18_a: Si el patrón es difícil de ver, intenta programarlo todo
          primero y ve qué cosas se repiten una y otra vez antes de colocar los bucles.
      2-3 Maze Loops 19_authored_hint:
        2-3_Maze_Loops_19_a: Si estas atascado, intenta escribir el código sin bucles
          primero y busca patrones.
        2-3_Maze_Loops_19_b: Poner un bucle de repetición dentro de otro puede ayudar
          a disminuir la cantidad de bloques utilizados.
      2-3 Maze Loops 20_authored_hint:
        2-3_Maze_Loops_20_a: Busca un patrón de escalera en este laberinto para encontrar
          dónde un bucle puede ser usado.
      2-3 Maze Loops 21_authored_hint:
        2-3_Maze_Loops_21_a: Si tienes problemas para encontrar el patrón de escalera,
          intenta cubrir los caminos bloqueados con tu dedo.
      4-5 Artist 1_authored_hint:
        4-5_Artist_1_a: "![](https://images.code.org/e5a08f29a9c4e306de5553dafca9fb5d-image-1467913845542.gif)"
      4-5 Artist 11_authored_hint:
        4-5_Artist_11_a: Dentro de tu ciclo, asegúrate de que el artista salta hacia
          atrás y hacia arriba después de dibujar cada línea.
      4-5 Artist 3_authored_hint:
        4-5_Artist_3_a: |-
          Si el lecho de flores mide 600 píxeles y dos de los lados tienen 200 píxeles de largo, aquí se explica cómo se suman los lados cortos:
          **600 - 200 - 200 = 200**
          Eso significa que ambos lados cortos suman hasta 200 píxeles.
          ** ¿Qué es 200/2? **
        4-5_Artist_3_b: Si tu no puedes ver donde esta el bucle 'repetir' inmediatamente,
          intenta programar toda la solución y busca el patrón.
      4-5 Artist 4_authored_hint:
        4-5_Artist_4_a: |-
          ¡Hay 360 grados en un círculo!
          ¡Esa es la cantidad de veces que necesitas repetir este código (convirtiendo 1 grado por vez) antes de que termine el círculo!
      4-5 Artist 5_authored_hint:
        4-5_Artist_5_a: |-
          Prueba y error es un gran método, pero también puede resolver el problema dividiendo el ángulo de 90 grados en tercios.

          ** 90/3 = _____ **
      4-5 Artist 7_authored_hint:
        4-5_Artist_7_a: "¿Qué ángulo es el más pequeño? ¿En qué ángulo está parado
          el artista? "
      4-5 Artist 8_authored_hint:
        4-5_Artist_8_a: "Los lados largos son 240 píxeles cada uno. Eso significa
          que los 2 lados cortos deben sumar:\n\n** 800 - 240 - 240 = 320 **\n\n¿Qué
          es ** 320/2 **? "
        4-5_Artist_8_b: |-
          ¡Esta imagen se puede hacer de 2 maneras!
          - Dibuja dos rectángulos que son ** 120 ** de largo y ** 160 ** de alto, con un lado superpuesto

          - Dibuja un rectángulo que sea ** 240 ** de largo y ** 160 ** alto, luego agregua una línea en el medio.
      4-5 Artist 9_authored_hint:
        4-5_Artist_9_a: 'Cuando un triángulo es un equilátero, los lados y ángulos
          son iguales.

'
        4-5_Artist_9_b: Necesitarás dibujar tres triángulos del mismo tamaño. No olvides
          pasar a tu nueva posición tras cada uno.
      4-5 Artist Assessment 1_authored_hint:
        4-5_Artist_Assessment_1_a: Solo necesitas dibujar el triángulo exterior para
          completar este puzzle.
      4-5 Artist Patterns 11_authored_hint:
        4-5_Artist_Patterns_11_a: Si hay 360 grados en un círculo y cada vuelta gira
          3 grados, ¿cuántas veces necesitarías trazar la mitad de un círculo completo?
      4-5 Artist Patterns 2_authored_hint:
        4-5_Artist_Patterns_2_a: Ten en cuenta que dado que los cuadrados tienen 20
          píxeles de largo, tendrás que saltar 20 píxeles antes de comenzar su siguiente
          cuadrado.
      4-5 Artist Patterns 3_authored_hint:
        4-5_Artist_Patterns_3_a: Ten cuidado de sacar el bloque completo de "código
          de la barra de herramientas cada vez que pruebas uno nuevo.
        4-5_Artist_Patterns_3_b: Si tu código se vuelve demasiado confuso, siempre
          puedes hacer clic en "volver a empezar" y ¡volver a intentarlo!
      4-5 Artist Patterns 5_authored_hint:
        4-5_Artist_Patterns_5_a: |-
          Ahora, cuando el artista termina cada diamante, se encuentra en la dirección opuesta a la que necesita para comenzar la siguiente.

          ¿Cuántos grados el necesita para girarse y ponerse en línea recta?
      4-5 Bee Conditionals 4_authored_hint:
        remember_quantum: |-
          ** Recuerda: ** Este puzzle cambia cada vez que se ejecuta.

          Querras usar un bloque condicional (`Si` o` Si /si no`) para resolver el desafío.
      4-5 Bee Conditionals 5_authored_hint:
        remember_quantum: |-
          ** Recuerda: ** Este puzzle cambia cada vez que se ejecuta.

          Querras usar un bloque condicional (`Si` o` Si /si no`) para resolver el desafío.
      4-5 Bee Conditionals 6_authored_hint:
        4-5 Bee Conditionals 6_a: Puedes resolver este rompecabezas usando solo los
          bloques en el espacio de trabajo. ¿En qué orden deberían ir?
        4-5 Bee Conditionals 6_b: Asegúrate de verificar si la flor tiene más de **
          0 ** néctar al menos ** 3 ** veces para resolver este puzzle.
      4-5 Bee Debugging 1_authored_hint:
        4-5_Bee_Debugging_1_a: Si tienes problemas para descubrir lo que no está bien,
          intente ejecutarlo para ver dónde estan las cosas mal.
      4-5 Bee Nested Loops Rows_authored_hint:
        4-5_Bee_Nested_Loops_Rows_a: Intente tratar este puzzle como un rectángulo
          largo donde la abeja necesita avanzar, luego gire a la izquierda varias
          veces para completar el camino.
      4-5 Maze 10_authored_hint:
        4-5_Maze_10_a: |-
          Si no puedes ver cómo usar los bucles para resolver el rompecabezas de inmediato, intenta resolverlo primero, luego busca un patrón.

          ¿Debería poner 'repetir' para acortar el código?
      4-5 Maze 4_authored_hint:
        4-5_Maze_4_a: Si estas teniendo dificultades para averiguar dónde colocar
          la repetición, intenta codificar todo y busca un patrón.
      4-5 Maze 5_authored_hint:
        4-5_Maze_5_a: Intenta usar un bucle de "repetir" cada vez que necesites `avanzar´
          más de dos pasos.
        4-5_Maze_5_b: Tu puedes usar mas de un bucle 'repetir' en el puzzle.
      4-5 Maze 6_authored_hint:
        4-5_Maze_6_a: |-
          Intenta trazar un camino con tu dedo.
          ¿Es el camino más corto que puedes encontrar?
      4-5 Maze 7_authored_hint:
        4-5_Maze_7_a: |-
          ** ¿Quieres que tu código sea lo más pequeño posible? **

          Busca patrones en tus bloques. ¿Ves algo que se repite? ¡Intenta poner un bucle en su lugar!
      4-5 Nested Loops 12_authored_hint:
        4-5_Nested_Loops_12_a: "**360 / 36 = ?**"
      4-5 Nested Loops 6_authored_hint:
        4-5_Nested_Loops_6_a: |-
          No olvides hacer un giro después de tu bucle interno.

          Estarás formando un bucle de 6 triángulos en 360 grados.

          ** 360/6 =? **
      4-5 Nested Loops 7_authored_hint:
        4-5_Nested_Loops_7_a: |-
          Este diseño se repetirá 10 veces terminando en 360 grados.

          ** 360/10 =? **
      4-5 Nested Loops 8_authored_hint:
        4-5_Nested_Loops_8_a: |-
          Tienes que repetir el bucle 6 veces terminando en 360 grados.

          ** 360/6 =? **
      4-5 While Loops 8_authored_hint:
        4-5_While_Loops_8_a: Cada elemento necesitara su propio bucle 'mientras'.
      Artist Autorun Test_authored_hint:
        2-3_Artist_Functions_4_a: El artista necesita girar 120 grados entre cada
          cuadrado para completar este diseño.
      Artist Inspiration_authored_hint:
        brush_width: Establecemos el grosor del pincel a 1, luego el color a azul
          antes de hacer cualquier otra cosa.
        double_loop: Intenta colocar un 'bucle para' dentro de un bucle 'repetir '.
        specifics: |-
          El `bucle para` se ejecuta de tres a diecisiete para cada uno de los seis" pétalos "antes de pasar a crear el siguiente, dibujando formas con solo un número impar de lados.
                  
          El bloque `establecer alfa` usa la división para atenuar el color a medida que el contador aumenta.
        after: Cuando hayas terminado con cada "pétalo", asegúrate de "avanzar" 20
          píxeles antes de hacer una rotación de 60 grados.
        solution: |-
          **Solución**


          ![Image of Solution Blocks](https://images.code.org/d85a18bd31a09f87b41a818fc8d6c1cc-image-1469641375258.png)
      Bergeron Robot Maze1_authored_hint:
        2-3_Maze_1_a: Para usar un bloque `avanzar`, arrástralo desde el área de la
          barra de herramientas al espacio de trabajo y conéctelo al bloque`al ejecutar`.
      Course 4 Artist 11_authored_hint:
        Course_4_Artist_11_a: 'El semi-hexágono tiene una ** longitud de 30 ** y gira
          a la derecha por ** 60 grados **.  '
        Course_4_Artist_11_b: 'El triángulo 2/3 tiene una ** longitud de 80 ** y gira
          a la derecha por ** 120 grados **. '
      Course 4 Artist 12_authored_hint:
        Course_4_Artist_12_a: 'Cada forma repetida es la combinación de ** la mitad
          de un hexágono **, seguida de ** 2/3 de un triángulo **. '
        Course_4_Artist_12_b: 'La forma de la unidad es casi la misma que en el último
          puzzle, excepto que el medio hexágono es un poco más grande. '
        Course_4_Artist_12_c: "1) Las primeras tres líneas tienen 60 píxeles de largo
          y necesitas girar 60 grados.\n 2) Las siguientes dos líneas tienen 80 píxeles
          de largo y necesitas girar 120 grados "
        Course_4_Artist_12_d: |-
          **Solución:**

          <xml>
          <block type="when_run" deletable="false" movable="false">
          <next>
          <block type="draw_colour" inline="true" id="draw-color">
          <value name="COLOUR">
          <block type="colour_picker">
          <title name="COLOUR">#843179</title>
          </block>
          </value>
          <next>
          <block type="controls_repeat">
          <title name="TIMES">6</title>
          <statement name="DO">
          <block type="controls_repeat">
          <title name="TIMES">3</title>
          <statement name="DO">
          <block type="draw_move_by_constant">
          <title name="DIR">moveForward</title>
          <title name="VALUE">60</title>
          <next>
          <block type="draw_turn_by_constant">
          <title name="DIR">turnRight</title>
          <title name="VALUE">60</title>
          </block>
          </next>
          </block>
          </statement>
          <next>
          <block type="controls_repeat">
          <title name="TIMES">2</title>
          <statement name="DO">
          <block type="draw_move_by_constant">
          <title name="DIR">moveForward</title>
          <title name="VALUE">80</title>
          <next>
          <block type="draw_turn_by_constant">
          <title name="DIR">turnRight</title>
          <title name="VALUE">120</title>
          </block>
          </next>
          </block>
          </statement>
          </block>
          </next>
          </block>
          </statement>
          </block>
          </next>
          </block>
          </next>
          </block>
          </xml>
      Course 4 Artist 6_authored_hint:
        Course_4_Artist_6_a: Hay 3 triángulos dentro de la rotación de 360 grados...
          ¿Cuántas veces 3 entra en 360?
      Course 4 Artist 8a_authored_hint:
        Course_4_Artist_8a: |-
          ¿Necesitas ayuda para calcular qué tan lejos girar?

          Hay 3 triángulos dentro de la rotación de 360 grados.

          ¿Cuántas veces 3 entran en 360?
      Course 4 Artist 9_authored_hint:
        Course_4_Artist_9_a: |-
          ¿Necesitas saber cuánto girar?

          ¿Qué es 360 dividido por 10?
      Course 4 Artist Binary Free Play 2b_authored_hint:
        Course_4_Artist_Binary_Free_Play_2b_a: Este código usa dos `bucle para`. Uno
          cuenta de 1 a 8, el otro cuenta de 8 a 1.
        Course_4_Artist_Binary_Free_Play_2b_b: Cada `bucle contar` tiene tres repeticiones.
          El primero dibuja el conjunto más a la izquierda de 1s, el segundo dibuja
          los 0s en el medio y el tercero dibuja los 1s a la derecha.
        Course_4_Artist_Binary_Free_Play_2b_c: En cada repetición necesitas `contador`
          para 1s y` 16- (contador 2x) `para 0s.
        Course_4_Artist_Binary_Free_Play_2b_d: "** Solución: ** \n\n<xml><block type=\"when_run\"
          deletable=\"false\" movable=\"false\"> <next><block type=\"controls_for_counter\"
          inline=\"true\"> <mutation counter=\"counter\"></mutation> <value name=\"FROM\">
          <block type=\"math_number\"> <title name=\"NUM\"> 1</title></block></value>
          <value name=\"TO\"> <block type=\"math_number\"> <title name=\"NUM\"> 8</title></block></value>
          <value name=\"BY\"> <block type=\"math_number\"> <title name=\"NUM\"> 1</title></block></value>
          <statement name=\"DO\"> <block type=\"controls_repeat_ext\" inline=\"true\">
          <value name=\"TIMES\"> <block type=\"variables_get\"> <title name=\"VAR\">
          contador de</title></block></value> <statement name=\"DO\"> <block type=\"procedures_callnoreturn\"
          inline=\"true\"> <mutation name=\"draw\"> <arg name=\"binary\"></arg></mutation>
          <value name=\"ARG0\"> <block type=\"text\"> <title name=\"TEXT\"> 1</title></block></value></block></statement>
          <next><block type=\"controls_repeat_ext\" inline=\"true\"> <value name=\"TIMES\">
          <block type=\"math_arithmetic\" inline=\"true\"> <title name=\"OP\"> menos</title>
          <value name=\"A\"> <block type=\"math_number\"> <title name=\"NUM\"> 16</title></block></value>
          <value name=\"B\"> <block type=\"math_arithmetic\" inline=\"true\"> <title
          name=\"OP\"> multiplicar</title> <value name=\"A\"> <block type=\"variables_get\">
          <title name=\"VAR\"> contador</title></block></value> <value name=\"B\">
          <block type=\"math_number\"> <title name=\"NUM\"> 2</title></block></value></block></value></block></value>
          <statement name=\"DO\"> <block type=\"procedures_callnoreturn\" inline=\"true\">
          <mutation name=\"draw\"> <arg name=\"binary\"></arg></mutation> <value name=\"ARG0\">
          <block type=\"text\"> <title name=\"TEXT\"> 0</title></block></value></block></statement>
          <next><block type=\"controls_repeat_ext\" inline=\"true\"> <value name=\"TIMES\">
          <block type=\"variables_get\"> <title name=\"VAR\"> contador de</title></block></value>
          <statement name=\"DO\"> <block type=\"procedures_callnoreturn\" inline=\"true\">
          <mutation name=\"draw\"> <arg name=\"binary\"></arg></mutation> <value name=\"ARG0\">
          <block type=\"text\"> <title name=\"TEXT\"> 1</title></block></value></block></statement></block></next></block></next></block></statement>
          <next><block type=\"controls_for_counter\" inline=\"true\"> <mutation counter=\"counter\"></mutation>
          <value name=\"FROM\"> <block type=\"math_number\"> <title name=\"NUM\">
          8</title></block></value> <value name=\"TO\"> <block type=\"math_number\">
          <title name=\"NUM\"> 1</title></block></value> <value name=\"BY\"> <block
          type=\"math_number\"> <title name=\"NUM\"> 1</title></block></value> <statement
          name=\"DO\"> <block type=\"controls_repeat_ext\" inline=\"true\"> <value
          name=\"TIMES\"> <block type=\"variables_get\"> <title name=\"VAR\"> contador
          de</title></block></value> <statement name=\"DO\"> <block type=\"procedures_callnoreturn\"
          inline=\"true\"> <mutation name=\"draw\"> <arg name=\"binary\"></arg></mutation>
          <value name=\"ARG0\"> <block type=\"text\"> <title name=\"TEXT\"> 1</title></block></value></block></statement>
          <next><block type=\"controls_repeat_ext\" inline=\"true\"> <value name=\"TIMES\">
          <block type=\"math_arithmetic\" inline=\"true\"> <title name=\"OP\"> menos</title>
          <value name=\"A\"> <block type=\"math_number\"> <title name=\"NUM\"> 16</title></block></value>
          <value name=\"B\"> <block type=\"math_arithmetic\" inline=\"true\"> <title
          name=\"OP\"> se multiplican</title> <value name=\"A\"> <block type=\"variables_get\">
          <title name=\"VAR\"> contador</title></block></value> <value name=\"B\">
          <block type=\"math_number\"> <title name=\"NUM\"> 2</title></block></value></block></value></block></value>
          <statement name=\"DO\"> <block type=\"procedures_callnoreturn\" inline=\"true\">
          <mutation name=\"draw\"> <arg name=\"binary\"></arg></mutation> <value name=\"ARG0\">
          <block type=\"text\"> <title name=\"TEXT\"> 0</title></block></value></block></statement>
          <next><block type=\"controls_repeat_ext\" inline=\"true\"> <value name=\"TIMES\">
          <block type=\"variables_get\"> <title name=\"VAR\"> contador de</title></block></value>
          <statement name=\"DO\"> <block type=\"procedures_callnoreturn\" inline=\"true\">
          <mutation name=\"draw\"> <arg name=\"binary\"></arg></mutation> <value name=\"ARG0\">
          <block type=\"text\"> <title name=\"TEXT\"> 1</title></block></value></block></statement></block></next></block></next></block></statement></block></next></block></next></block>
          </xml>"
      Course 4 Artist For Loops 11_authored_hint:
        Course_4_Artist_For_Loops_11_a: "¡El ángulo de giro cambiará con cada forma!\n\nUse
          el bloque matemático para ingresar 360 dividido por el número de lados que
          tiene la forma para obtener el ángulo correcto. "
      Course 4 Artist For Loops 11a_authored_hint:
        Course_4_Artist_For_Loops_11a_a: '360 dividido por el número de lados que
          tiene una forma es la cantidad de grados que deberá girar. '
        Course_4_Artist_For_Loops_11a_b: 'Cada vez, deberá avanzar 10 veces la longitud
          del número actual de lados. '
      Course 4 Artist For Loops 3_authored_hint:
        Course_4_Artist_For_Loops_3_a: Para hacer que el bucle `para` impulse su movimiento,
          asegúrese de estar usando` contador` como distancia.
      Course 4 Artist For Loops 4_authored_hint:
        Course_4_Artist_For_Loops_4_a: |-
          ** ¿Cuál es el número más pequeño que necesitará?
          ¿Cuál es el número más grande?
          ¿Qué tan grande es el aumento en cada ocasión? **

          Esas son las preguntas que debe realizar para completar los espacios en blanco del ciclo `para`.
      Course 4 Artist For Loops Challenge_authored_hint:
        Course_4_Artist_For_Loops_Challenge_a: La forma más grande tiene 19 lados.
          El más pequeño tiene solo dos.
        Course_4_Artist_For_Loops_Challenge_b: El bucle 'para' cuenta hasta dos cada
          vez que se ejecuta.
      Course 4 Artist For Loops Challenge_a_authored_hint:
        Course_4_Artist_For_Loops_Challenge_a: El polígono más grande tiene 19 lados.
        Course_4_Artist_For_Loops_Challenge_b: Cada polígono está incompleto, con
          un lado menos de lo que debería tener.
      Course 4 Artist For Loops inspire_authored_hint:
        Course_4_Artist_For_Loops_inspire_a: La base de este código es la misma que
          la solución al desafío anterior... con un par de cambios.
        Course_4_Artist_For_Loops_inspire_b: Intenta con un bucle 'para' que va de
          3 a 10 con un incremento de 1.
        Course_4_Artist_For_Loops_inspire_c: Hay dos iteraciones del mismo bucle de
          repetición dentro del bucle `para`, pero la segunda repetición gira en la
          dirección opuesta.
        Course_4_Artist_For_Loops_inspire_d: "**Solución:**  \n\n<xml>\n  <block type=\"when_run\"
          deletable=\"false\" movable=\"false\">\n    <next>\n      <block type=\"controls_for_counter\"
          inline=\"true\" movable=\"false\">\n      <mutation counter=\"counter\"></mutation>\n
          \       <value name=\"FROM\">\n          <block type=\"math_number\">\n
          \           <title name=\"NUM\">3</title>\n          </block>\n        </value>\n
          \       <value name=\"TO\">\n          <block type=\"math_number\">\n            <title
          name=\"NUM\">10</title>\n          </block>\n        </value>\n        <value
          name=\"BY\">\n          <block type=\"math_number\">\n            <title
          name=\"NUM\">1</title>\n          </block>\n        </value>\n        <statement
          name=\"DO\">\n          <block type=\"controls_repeat_ext\" inline=\"true\">\n
          \           <value name=\"TIMES\">\n              <block type=\"math_arithmetic\"
          inline=\"true\">\n                <title name=\"OP\">MINUS</title>\n                <value
          name=\"A\">\n                  <block type=\"variables_get\">\n                    <title
          name=\"VAR\">counter</title>\n                  </block>\n                </value>\n
          \               <value name=\"B\">\n                  <block type=\"math_number\">\n
          \                   <title name=\"NUM\">1</title>\n                  </block>\n
          \               </value>\n              </block>\n            </value>\n
          \           <statement name=\"DO\">\n              <block type=\"draw_move\"
          inline=\"true\">\n                <title name=\"DIR\">moveForward</title>\n
          \               <value name=\"VALUE\">\n                  <block type=\"math_number\">\n
          \                   <title name=\"NUM\">40</title>\n                  </block>\n
          \               </value>\n                <next>\n                  <block
          type=\"draw_turn\" inline=\"true\">\n                    <title name=\"DIR\">turnRight</title>\n
          \                   <value name=\"VALUE\">\n                      <block
          type=\"math_arithmetic\" inline=\"true\">\n                        <title
          name=\"OP\">DIVIDE</title>\n                        <value name=\"A\">\n
          \                         <block type=\"math_number\">\n                            <title
          name=\"NUM\">360</title>\n                          </block>\n                        </value>\n
          \                       <value name=\"B\">\n                          <block
          type=\"variables_get\">\n                            <title name=\"VAR\">counter</title>\n
          \                         </block>\n                        </value>\n                      </block>\n
          \                   </value>\n                  </block>\n                </next>\n
          \             </block>\n            </statement>\n            <next>\n              <block
          type=\"controls_repeat_ext\" inline=\"true\">\n                <value name=\"TIMES\">\n
          \                 <block type=\"math_arithmetic\" inline=\"true\">\n                    <title
          name=\"OP\">MINUS</title>\n                    <value name=\"A\">\n                      <block
          type=\"variables_get\">\n                        <title name=\"VAR\">counter</title>\n
          \                     </block>\n                    </value>\n                    <value
          name=\"B\">\n                      <block type=\"math_number\">\n                        <title
          name=\"NUM\">1</title>\n                      </block>\n                    </value>\n
          \                 </block>\n                </value>\n                <statement
          name=\"DO\">\n                  <block type=\"draw_move\" inline=\"true\">\n
          \                   <title name=\"DIR\">moveForward</title>\n                    <value
          name=\"VALUE\">\n                      <block type=\"math_number\">\n                        <title
          name=\"NUM\">40</title>\n                      </block>\n                    </value>\n
          \                   <next>\n                      <block type=\"draw_turn\"
          inline=\"true\">\n                        <title name=\"DIR\">turnLeft</title>\n
          \                       <value name=\"VALUE\">\n                          <block
          type=\"math_arithmetic\" inline=\"true\">\n                            <title
          name=\"OP\">DIVIDE</title>\n                            <value name=\"A\">\n
          \                             <block type=\"math_number\">\n                                <title
          name=\"NUM\">360</title>\n                              </block>\n                            </value>\n
          \                           <value name=\"B\">\n                              <block
          type=\"variables_get\">\n                                <title name=\"VAR\">counter</title>\n
          \                             </block>\n                            </value>\n
          \                         </block>\n                        </value>\n                      </block>\n
          \                   </next>\n                  </block>\n                </statement>\n
          \             </block>\n            </next>\n          </block>\n        </statement>\n
          \     </block>\n    </next>\n  </block>\n</xml>"
      Course 4 Artist Functions Inspiration_authored_hint:
        Course_4_Artist_Functions_Inspiration_a: Comienza con el código del último
          puzzle y agregue un `giro a la derecha` adicional de tres grados dentro
          del ciclo de repetición.
        Course_4_Artist_Functions_Inspiration_b: Intenta girar más de 90 grados fuera
          del bucle `repetir`, pero aún dentro del bucle`para`.
        Course_4_Artist_Functions_Inspiration_c: |-
          **Solución:**
          <xml>
          <block type="when_run" deletable="false" movable="false">
          <next>
          <block type="controls_for_counter" inline="true">
          <mutation counter="counter"></mutation>
          <value name="FROM">
          <block type="math_number">
          <title name="NUM">1</title>
          </block>
          </value>
          <value name="TO">
          <block type="math_number">
          <title name="NUM">14</title>
          </block>
          </value>
          <value name="BY">
          <block type="math_number">
          <title name="NUM">1</title>
          </block>
          </value>
          <statement name="DO">
          <block type="draw_colour" inline="true" id="draw-color">
          <value name="COLOUR">
          <block type="colour_random"/>
          </value>
          <next>
          <block type="controls_repeat_ext" inline="true">
          <value name="TIMES">
          <block type="variables_get">
          <title name="VAR">counter</title>
          </block>
          </value>
          <statement name="DO">
          <block type="procedures_callnoreturn">
          <mutation name="draw a square 20"></mutation>
          <next>
          <block type="jump_by_constant">
          <title name="DIR">jumpForward</title>
          <title name="VALUE">20</title>
          <next>
          <block type="draw_turn_by_constant">
          <title name="DIR">turnRight</title>
          <title name="VALUE">3</title>
          </block>
          </next>
          </block>
          </next>
          </block>
          </statement>
          <next>
          <block type="draw_turn_by_constant">
          <title name="DIR">turnLeft</title>
          <title name="VALUE">100</title>
          </block>
          </next>
          </block>
          </next>
          </block>
          </statement>
          </block>
          </next>
          </block>
          </xml>
      Course 4 Artist Functions challenge_authored_hint:
        Course_4_Artist_Functions_challenge_a: Parte de entender cómo usar funciones
          es averiguar cuáles necesita y cuáles no.
        Course_4_Artist_Functions_challenge_b: Use un bucle `para`, luego use su contador
          de variable dentro de un bucle` repetir` anidado.
        Course_4_Artist_Functions_challenge_c: En cada iteración, debe dibujar un
          cuadrado y luego saltar hacia adelante.
        Course_4_Artist_Functions_challenge_d: Tendras que girar a la izquierda 90
          grados fuera de tu `repetir`, pero aún dentro del bucle `para`.
      Course 4 Artist Inspire_authored_hint:
        Course_4_Artist_Inspire_a: Después de completar un cuadrado, intente saltar
          la mitad de su longitud antes de girar y hacer otro.
        Course_4_Artist_Inspire_b: Cada cuadrado y salto se repite cuatro veces (usando
          un giro a la izquierda en el medio) para formar una unidad completa similar
          a un molinete.
        Course_4_Artist_Inspire_c: Cada molinete también se repite cuatro veces, con
          un giro a la derecha de ** 360 / lados **.
        Course_4_Artist_Inspire_d: |-
          **Solución:**

          <xml>
          <block type="when_run" deletable="false" movable="false">
          <next>
          <block type="draw_colour" inline="true" id="draw-color">
          <value name="COLOUR">
          <block type="colour_picker">
          <title name="COLOUR">#843179</title>
          </block>
          </value>
          <next>
          <block type="variables_set" inline="false">
          <title name="VAR">sides</title>
          <value name="VALUE">
          <block type="math_number">
          <title name="NUM">4</title>
          </block>
      Course 4 Artist Vars 13_authored_hint:
        Course_4_Artist_Vars_13_a: Necesita dos bucles de repetir (uno dentro del
          otro) ambos repitiendo 'lados' veces.
        Course_4_Artist_Vars_13_b: |-
          El ciclo de repetición interno dibuja un octágono (girando a la izquierda).

          Luego, debe avanzar y girar a la derecha solo en el bucle externo.
        Course_4_Artist_Vars_13_c: Para ajustar la forma para que permanezca del mismo
          tamaño cuando cambia el número de lados, use el bloque matemático para dividir
          la longitud en píxeles por el número de lados.
      Course 4 Artist Vars 6_authored_hint:
        Course_4_Artist_Vars_6_a: Para dibujar un polígono regular, gire ** 360 /
          lados ** cada vez.
      Course 4 Artist Vars 8_authored_hint:
        Course_4_Artist_Vars_8_a: Si divide su longitud inicial por el número de lados,
          la longitud de cada lado se acortará a medida que el número de lados aumente.
      Course 4 Bee Params 7_authored_hint:
        notice_pattern: "¿Ves un patrón en cómo cambia la cantidad de néctar? "
        count_with_for: Tenga en cuenta que el néctar se incrementa en pasos. ¿Qué
          tipo de bloque puede usar para hacer lo mismo muchas veces mientras cuenta?
      Course 4 Bee Params 8_authored_hint:
        Course_4_Bee_Params_8_a: Está bien pedir un número de miel y un número de
          néctar cada vez. Si no hay nada de algo, el número puede ser 0.
      Course 4 Play Lab Params 2_authored_hint:
        Course_4_Play_Lab_Params_2_a: Debes hacer clic en "editar" en la función de
          salto y actualizarla para que use el parámetro `altura`.
      Course 4 Play Lab Vars 2_authored_hint:
        Course_4_Play_Lab_Vars_2_a: Asegúrese de establecer el número de `velocidad_perro`a
          algo más grande que` velocidad_gato`.
      Course 4 Play Labs For Loops 2_authored_hint:
        Course_4_Play_Labs_For_Loops_2_a: "¿Qué agregarías a tu bucle `para`en cada
          ocasión para omitir los números pares?"
      Course 4 Playlab For Loops 4b_authored_hint:
        Course_4_Playlab_For_Loops_4b_a: Las banderas están a unos 330 píxeles de
          distancia de los personajes.
        Course_4_Playlab_For_Loops_4b_b: "¿Qué se puede hacer para que cada personaje
          alcance 330 píxeles en el mismo número de movimientos con diferentes números
          de inicio y parada?"
        Course_4_Playlab_For_Loops_4b_c: Recuerde, no importa cuánto se haya pasado
          un personaje de la bandera en su último paso, siempre que le tome a cada
          personaje el mismo número de pasos para llegar a la bandera.
      Course 4 Playlab For Loops 5b_authored_hint:
        Course_4_Playlab_For_Loops_5b_a: Los personajes están a unos 175 píxeles del
          centro.
        Course_4_Playlab_For_Loops_5b_b: Recuerde, el próximo paso de un personaje
          será más largo que el anterior, ya que el contador sigue creciendo.
      Course 4 SCF 1_authored_hint:
        Course_4_SCF_1_a: Cada hexágono tiene 40 lados de píxeles.
        Course_4_SCF_1_b: Hay un salto de 120 píxeles entre cada hexágono en cada
          línea horizontal.
        Course_4_SCF_1_c: |-
          Antes de dibujar la segunda fila de hexágonos, debe girar a la derecha 60 grados y avanzar 40 píxeles.

          Una vez que estás en la ubicación vertical correcta, debes volver a girar tu artista y retroceder 320 píxeles hacia atrás.
        Course_4_SCF_1_d: "Antes de dibujar la tercera fila de hexágonos, debes girar
          a la derecha 60 grados y avanzar 40 píxeles.\n\nUna vez que estás en la
          ubicación vertical correcta, debes volver a girar tu artista y retroceder
          440 píxeles (120 píxeles más que tu función de desplazamiento 'hacia abajo
          / adelante'). "
        Course_4_SCF_1_e: |-
          **Solución:**
          <xml>
          <block type="when_run" deletable="false" movable="false">
          <next>
          <block type="controls_repeat_ext" inline="true">
          <value name="TIMES">
          <block type="math_number">
          <title name="NUM">2</title>
          </block>
          </value>
          <statement name="DO">
          <block type="procedures_callnoreturn">
          <mutation name="draw a line of hexagons"></mutation>
          <next>
          <block type="procedures_callnoreturn">
          <mutation name="shift down/forward"></mutation>
          <next>
          <block type="procedures_callnoreturn">
          <mutation name="draw a line of hexagons"></mutation>
          <next>
          <block type="procedures_callnoreturn">
          <mutation name="shift down/backward"></mutation>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </statement>
          </block>
          </next>
          </block>
          <block type="procedures_defnoreturn">
          <mutation></mutation>
          <title name="NAME">draw a hexagon</title>
          <statement name="STACK">
          <block type="controls_repeat_ext" inline="true">
          <value name="TIMES">
          <block type="math_number">
          <title name="NUM">6</title>
          </block>
          </value>
          <statement name="DO">
          <block type="draw_move" inline="true">
          <title name="DIR">moveForward</title>
          <value name="VALUE">
          <block type="math_number">
          <title name="NUM">40</title>
          </block>
          </value>
          <next>
          <block type="draw_turn" inline="true">
          <title name="DIR">turnRight</title>
          <value name="VALUE">
          <block type="math_number">
          <title name="NUM">60</title>
          </block>
          </value>
          </block>
          </next>
          </block>
          </statement>
          </block>
          </statement>
          </block>
          <block type="procedures_defnoreturn">
          <mutation></mutation>
          <title name="NAME">shift down/backward</title>
          <statement name="STACK">
          <block type="draw_turn" inline="true">
          <title name="DIR">turnRight</title>
          <value name="VALUE">
          <block type="math_number">
          <title name="NUM">60</title>
          </block>
          </value>
          <next>
          <block type="jump" inline="true">
          <title name="DIR">jumpForward</title>
          <value name="VALUE">
          <block type="math_number">
          <title name="NUM">40</title>
          </block>
          </value>
          <next>
          <block type="draw_turn" inline="true">
          <title name="DIR">turnLeft</title>
          <value name="VALUE">
          <block type="math_number">
          <title name="NUM">60</title>
          </block>
          </value>
          <next>
          <block type="jump" inline="true">
          <title name="DIR">jumpBackward</title>
          <value name="VALUE">
          <block type="math_number">
          <title name="NUM">440</title>
          </block>
          </value>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </statement>
          </block>
          <block type="procedures_defnoreturn">
          <mutation></mutation>
          <title name="NAME">draw a line of hexagons</title>
          <statement name="STACK">
          <block type="controls_repeat_ext" inline="true">
          <value name="TIMES">
          <block type="math_number">
          <title name="NUM">3</title>
          </block>
          </value>
          <statement name="DO">
          <block type="procedures_callnoreturn">
          <mutation name="draw a hexagon"></mutation>
          <next>
          <block type="jump" inline="true">
          <title name="DIR">jumpForward</title>
          <value name="VALUE">
          <block type="math_number">
          <title name="NUM">120</title>
          </block>
          </value>
          </block>
          </next>
          </block>
          </statement>
          </block>
          </statement>
          </block>
          <block type="procedures_defnoreturn">
          <mutation></mutation>
          <title name="NAME">shift down/forward</title>
          <statement name="STACK">
          <block type="draw_turn" inline="true">
          <title name="DIR">turnRight</title>
          <value name="VALUE">
          <block type="math_number">
          <title name="NUM">60</title>
          </block>
          </value>
          <next>
          <block type="jump" inline="true">
          <title name="DIR">jumpForward</title>
          <value name="VALUE">
          <block type="math_number">
          <title name="NUM">40</title>
          </block>
          </value>
          <next>
          <block type="draw_turn" inline="true">
          <title name="DIR">turnLeft</title>
          <value name="VALUE">
          <block type="math_number">
          <title name="NUM">60</title>
          </block>
          </value>
          <next>
          <block type="jump" inline="true">
          <title name="DIR">jumpBackward</title>
          <value name="VALUE">
          <block type="math_number">
          <title name="NUM">320</title>
          </block>
          </value>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </statement>
          </block>
          </xml>
      Course 4 SCF 1a_authored_hint:
        Course_4_SCF_1a_a: Recuerda tus funciones desde la etapa 16.
        Course_4_SCF_1a_b: |-
          Mira este camino como su ruta principal:

          ![](https://images.code.org/1c3feab70af706409b3a05af4dc83c2e-image-1469726967858.png)
        Course_4_SCF_1a_c: Deberías considerar usar un `bucle para`. No para los pasos,
          sino para el parámetro de la función.
        Course_4_SCF_1a_d: |-
          **Solución:**

          <xml>
          <block type="when_run" deletable="false" movable="false" uservisible="false" y="14">
          <next>
          <block type="variables_set" inline="false" uservisible="false">
          <title name="VAR">left</title>
          <value name="VALUE">
          <block type="math_number" uservisible="false">
          <title name="NUM">1</title>
          </block>
          </value>
          <next>
          <block type="variables_set" inline="false" uservisible="false">
          <title name="VAR">right</title>
          <value name="VALUE">
          <block type="math_number" uservisible="false">
          <title name="NUM">0</title>
          </block>
          </value>
          </block>
          </next>
          </block>
          </next>
          </block>
          <block type="when_run" deletable="false" movable="false">
          <next>
          <block type="controls_for" inline="true">
          <title name="VAR">counter</title>
          <value name="FROM">
          <block type="math_number">
          <title name="NUM">3</title>
          </block>
          </value>
          <value name="TO">
          <block type="math_number">
          <title name="NUM">21</title>
          </block>
          </value>
          <value name="BY">
          <block type="math_number">
          <title name="NUM">3</title>
          </block>
          </value>
          <statement name="DO">
          <block type="maze_move">
          <title name="DIR">moveForward</title>
          <next>
          <block type="maze_if">
          <title name="DIR">isPathLeft</title>
          <statement name="DO">
          <block type="procedures_callnoreturn" inline="false">
          <mutation name="get nectar">
          <arg name="dir"></arg>
          <arg name="counter"></arg>
          </mutation>
          <value name="ARG0">
          <block type="variables_get">
          <title name="VAR">left</title>
          </block>
          </value>
          <value name="ARG1">
          <block type="variables_get">
          <title name="VAR">counter</title>
          </block>
          </value>
          </block>
          </statement>
          <next>
          <block type="maze_turn">
          <title name="DIR">turnRight</title>
          <next>
          <block type="maze_move">
          <title name="DIR">moveForward</title>
          <next>
          <block type="maze_turn">
          <title name="DIR">turnLeft</title>
          <next>
          <block type="maze_if">
          <title name="DIR">isPathRight</title>
          <statement name="DO">
          <block type="procedures_callnoreturn" inline="false">
          <mutation name="get nectar">
          <arg name="dir"></arg>
          <arg name="counter"></arg>
          </mutation>
          <value name="ARG0">
          <block type="variables_get">
          <title name="VAR">right</title>
          </block>
          </value>
          <value name="ARG1">
          <block type="variables_get">
          <title name="VAR">counter</title>
          </block>
          </value>
          </block>
          </statement>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </statement>
          </block>
          </next>
          </block>
          <block type="procedures_defnoreturn" editable="false" usercreated="true">
          <mutation>
          <arg name="dir"></arg>
          <arg name="counter"></arg>
          </mutation>
          <title name="NAME">get nectar</title>
          <statement name="STACK">
          <block type="controls_if" inline="false">
          <mutation else="1"></mutation>
          <value name="IF0">
          <block type="logic_compare" inline="true" movable="false">
          <title name="OP">EQ</title>
          <value name="A">
          <block type="parameters_get">
          <title name="VAR">dir</title>
          </block>
          </value>
          <value name="B">
          <block type="variables_get">
          <title name="VAR">left</title>
          </block>
          </value>
          </block>
          </value>
          <statement name="DO0">
          <block type="maze_turn">
          <title name="DIR">turnLeft</title>
          </block>
          </statement>
          <statement name="ELSE">
          <block type="maze_turn">
          <title name="DIR">turnRight</title>
          </block>
          </statement>
          <next>
          <block type="controls_repeat_ext" inline="true">
          <value name="TIMES">
          <block type="math_number">
          <title name="NUM">3</title>
          </block>
          </value>
          <statement name="DO">
          <block type="maze_move">
          <title name="DIR">moveForward</title>
          </block>
          </statement>
          <next>
          <block type="controls_repeat_ext" inline="true">
          <value name="TIMES">
          <block type="parameters_get">
          <title name="VAR">counter</title>
          </block>
          </value>
          <statement name="DO">
          <block type="maze_nectar"></block>
          </statement>
          <next>
          <block type="controls_repeat_ext" inline="true">
          <value name="TIMES">
          <block type="math_number">
          <title name="NUM">3</title>
          </block>
          </value>
          <statement name="DO">
          <block type="maze_move">
          <title name="DIR">moveBackward</title>
          </block>
          </statement>
          <next>
          <block type="controls_if" inline="false">
          <mutation else="1"></mutation>
          <value name="IF0">
          <block type="logic_compare" inline="true" movable="false">
          <title name="OP">EQ</title>
          <value name="A">
          <block type="parameters_get">
          <title name="VAR">dir</title>
          </block>
          </value>
          <value name="B">
          <block type="variables_get">
          <title name="VAR">left</title>
          </block>
          </value>
          </block>
          </value>
          <statement name="DO0">
          <block type="maze_turn">
          <title name="DIR">turnRight</title>
          </block>
          </statement>
          <statement name="ELSE">
          <block type="maze_turn">
          <title name="DIR">turnLeft</title>
          </block>
          </statement>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </statement>
          </block>
          </xml>
      Course 4 SCF 1b_authored_hint:
        Course_4_SCF_1b_a: |-
          Tenga en cuenta que la forma de todos los puntos de miel es similar.

          Buen lugar para una función!
        Course_4_SCF_1b_b: |-
          Mira esta idea de cómo la abeja podría viajar:

          ![](https://images.code.org/996ab4a2de6048cbb99b84c56cc4ad61-image-1469726859769.png)
        Course_4_SCF_1b_c: Deberías considerar usar un `bucle para` para la distancia
          que recorre la abeja.
        Course_4_SCF_1b_d: |-
          **Solución:**

          <xml>
          <block type="when_run" deletable="false" movable="false">
          <next>
          <block type="controls_for" inline="true">
          <title name="VAR">counter</title>
          <value name="FROM">
          <block type="math_number">
          <title name="NUM">2</title>
          </block>
          </value>
          <value name="TO">
          <block type="math_number">
          <title name="NUM">4</title>
          </block>
          </value>
          <value name="BY">
          <block type="math_number">
          <title name="NUM">1</title>
          </block>
          </value>
          <statement name="DO">
          <block type="procedures_callnoreturn">
          <mutation name="make honey up and over"></mutation>
          <next>
          <block type="maze_turn">
          <title name="DIR">turnLeft</title>
          <next>
          <block type="controls_repeat_ext" inline="true">
          <value name="TIMES">
          <block type="variables_get">
          <title name="VAR">counter</title>
          </block>
          </value>
          <statement name="DO">
          <block type="maze_move">
          <title name="DIR">moveForward</title>
          </block>
          </statement>
          <next>
          <block type="maze_turn">
          <title name="DIR">turnRight</title>
          <next>
          <block type="controls_repeat_ext" inline="true">
          <value name="TIMES">
          <block type="variables_get">
          <title name="VAR">counter</title>
          </block>
          </value>
          <statement name="DO">
          <block type="maze_move">
          <title name="DIR">moveForward</title>
          </block>
          </statement>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </statement>
          </block>
          </next>
          </block>
          <block type="procedures_defnoreturn" editable="false" usercreated="true">
          <mutation></mutation>
          <title name="NAME">make honey up and over</title>
          <statement name="STACK">
          <block type="maze_move">
          <title name="DIR">moveForward</title>
          <next>
          <block type="maze_turn">
          <title name="DIR">turnRight</title>
          <next>
          <block type="maze_move">
          <title name="DIR">moveForward</title>
          <next>
          <block type="maze_honey">
          <next>
          <block type="maze_honey">
          <next>
          <block type="maze_move">
          <title name="DIR">moveBackward</title>
          <next>
          <block type="maze_turn">
          <title name="DIR">turnLeft</title>
          <next>
          <block type="maze_move">
          <title name="DIR">moveBackward</title>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </statement>
          </block>
          </xml>
      Course 4 SCF 2_authored_hint:
        Course_4_SCF_2_a: Cada octágono tiene 40 píxeles por lado.
        Course_4_SCF_2_b: Hay un salto de 136 píxeles entre cada octágono en cada
          línea horizontal.
        Course_4_SCF_2_c: "Antes de dibujar la segunda fila de octágonos, debes girar
          a la derecha 45 grados y avanzar 96 píxeles.\n\nUna vez que estás en la
          ubicación vertical correcta, debes volver a girar tu artista y retroceder
          408 píxeles. "
        Course_4_SCF_2_d: |-
          Tenga en cuenta que debido a que hay menos octágonos en las filas pares, no tiene que retroceder más para llegar al punto de partida de las filas impares.

          Esto significa que puede usar la misma función para todas las filas.
        Course_4_SCF_2_e: |-
          **Solución:**

          <xml>
          <block type="when_run" deletable="false" movable="false">
          <next>
          <block type="controls_repeat_ext" inline="true">
          <value name="TIMES">
          <block type="math_number">
          <title name="NUM">2</title>
          </block>
          </value>
          <statement name="DO">
          <block type="procedures_callnoreturn" inline="false">
          <mutation name="draw octagons">
          <arg name="numOctagons"></arg>
          </mutation>
          <value name="ARG0">
          <block type="math_number">
          <title name="NUM">2</title>
          </block>
          </value>
          <next>
          <block type="procedures_callnoreturn">
          <mutation name="shift down"></mutation>
          <next>
          <block type="procedures_callnoreturn" inline="false">
          <mutation name="draw octagons">
          <arg name="numOctagons"></arg>
          </mutation>
          <value name="ARG0">
          <block type="math_number">
          <title name="NUM">3</title>
          </block>
          </value>
          <next>
          <block type="procedures_callnoreturn">
          <mutation name="shift down"></mutation>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </statement>
          <next>
          <block type="procedures_callnoreturn" inline="false">
          <mutation name="draw octagons">
          <arg name="numOctagons"></arg>
          </mutation>
          <value name="ARG0">
          <block type="math_number">
          <title name="NUM">2</title>
          </block>
          </value>
          </block>
          </next>
          </block>
          </next>
          </block>
          <block type="procedures_defnoreturn" editable="false">
          <mutation>
          <arg name="numOctagons"></arg>
          </mutation>
          <title name="NAME">draw octagons</title>
          <statement name="STACK">
          <block type="controls_repeat_ext" inline="true">
          <value name="TIMES">
          <block type="parameters_get">
          <title name="VAR">numOctagons</title>
          </block>
          </value>
          <statement name="DO">
          <block type="procedures_callnoreturn">
          <mutation name="draw an octagon"></mutation>
          <next>
          <block type="jump" inline="true">
          <title name="DIR">jumpForward</title>
          <value name="VALUE">
          <block type="math_number">
          <title name="NUM">136</title>
          </block>
          </value>
          </block>
          </next>
          </block>
          </statement>
          </block>
          </statement>
          </block>
          <block type="procedures_defnoreturn" editable="false">
          <mutation></mutation>
          <title name="NAME">draw an octagon</title>
          <statement name="STACK">
          <block type="controls_repeat_ext" inline="true">
          <value name="TIMES">
          <block type="math_number">
          <title name="NUM">8</title>
          </block>
          </value>
          <statement name="DO">
          <block type="draw_move" inline="true">
          <title name="DIR">moveForward</title>
          <value name="VALUE">
          <block type="math_number">
          <title name="NUM">40</title>
          </block>
          </value>
          <next>
          <block type="draw_turn" inline="true">
          <title name="DIR">turnRight</title>
          <value name="VALUE">
          <block type="math_number">
          <title name="NUM">45</title>
          </block>
          </value>
          </block>
          </next>
          </block>
          </statement>
          </block>
          </statement>
          </block>
          <block type="procedures_defnoreturn" editable="false">
          <mutation></mutation>
          <title name="NAME">shift down</title>
          <statement name="STACK">
          <block type="draw_turn" inline="true">
          <title name="DIR">turnRight</title>
          <value name="VALUE">
          <block type="math_number">
          <title name="NUM">45</title>
          </block>
          </value>
          <next>
          <block type="jump" inline="true">
          <title name="DIR">jumpForward</title>
          <value name="VALUE">
          <block type="math_number">
          <title name="NUM">96</title>
          </block>
          </value>
          <next>
          <block type="draw_turn" inline="true">
          <title name="DIR">turnLeft</title>
          <value name="VALUE">
          <block type="math_number">
          <title name="NUM">45</title>
          </block>
          </value>
          <next>
          <block type="jump" inline="true">
          <title name="DIR">jumpBackward</title>
          <value name="VALUE">
          <block type="math_number">
          <title name="NUM">408</title>
          </block>
          </value>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </statement>
          </block>
          </xml>
      Course 4 SCF 3_authored_hint:
        Course_4_SCF_3_a: "![](https://images.code.org/9310e6352e85a8265b424c9d57ca28d1-image-1446239776339.gif)"
        Course_4_SCF_3_b: 'Esta es una serie de octógonos con lados que son ''contador''
          píxeles de largo. '
        Course_4_SCF_3_c: 'Cada octágono se llama desde dentro de un bucle ''para''
          que va de 200 hasta 2 por 2. '
        Course_4_SCF_3_d: 'No olvides dar vuelta de 22.5 grados al final de cada iteración. '
        Course_4_SCF_3_e: Tanto el color de cada octágono como el ancho del lápiz
          están controlados por la variable `contador '.
        Course_4_SCF_3_f: |-
          **Solución:**

          <xml>
          <block type="procedures_defnoreturn" editable="false">
          <mutation>
          <arg name="length"></arg>
          </mutation>
          <title name="NAME">draw an octagon</title>
          <statement name="STACK">
          <block type="controls_repeat_ext" inline="true">
          <value name="TIMES">
          <block type="math_number">
          <title name="NUM">8</title>
          </block>
          </value>
          <statement name="DO">
          <block type="draw_move" inline="true">
          <title name="DIR">moveForward</title>
          <value name="VALUE">
          <block type="parameters_get">
          <title name="VAR">length</title>
          </block>
          </value>
          <next>
          <block type="draw_turn" inline="true">
          <title name="DIR">turnRight</title>
          <value name="VALUE">
          <block type="math_number">
          <title name="NUM">45</title>
          </block>
          </value>
          </block>
          </next>
          </block>
          </statement>
          </block>
          </statement>
          </block>
          <block type="when_run" deletable="false" movable="false">
          <next>
          <block type="controls_for_counter" inline="true">
          <mutation counter="counter"></mutation>
          <value name="FROM">
          <block type="math_number">
          <title name="NUM">200</title>
          </block>
          </value>
          <value name="TO">
          <block type="math_number">
          <title name="NUM">2</title>
          </block>
          </value>
          <value name="BY">
          <block type="math_number">
          <title name="NUM">2</title>
          </block>
          </value>
          <statement name="DO">
          <block type="draw_colour" inline="true" id="draw-color">
          <value name="COLOUR">
          <block type="colour_rgb" inline="false">
          <value name="RED">
          <block type="math_arithmetic" inline="true">
          <title name="OP">MINUS</title>
          <value name="A">
          <block type="math_number">
          <title name="NUM">255</title>
          </block>
          </value>
          <value name="B">
          <block type="variables_get">
          <title name="VAR">counter</title>
          </block>
          </value>
          </block>
          </value>
          <value name="GREEN">
          <block type="variables_get">
          <title name="VAR">counter</title>
          </block>
          </value>
          <value name="BLUE">
          <block type="math_arithmetic" inline="true">
          <title name="OP">MULTIPLY</title>
          <value name="A">
          <block type="variables_get">
          <title name="VAR">counter</title>
          </block>
          </value>
          <value name="B">
          <block type="math_number">
          <title name="NUM">2</title>
          </block>
          </value>
          </block>
          </value>
          </block>
          </value>
          <next>
          <block type="draw_width" inline="false">
          <value name="WIDTH">
          <block type="math_arithmetic" inline="true">
          <title name="OP">DIVIDE</title>
          <value name="A">
          <block type="variables_get">
          <title name="VAR">counter</title>
          </block>
          </value>
          <value name="B">
          <block type="math_number">
          <title name="NUM">4</title>
          </block>
          </value>
          </block>
          </value>
          <next>
          <block type="procedures_callnoreturn" inline="false">
          <mutation name="draw an octagon">
          <arg name="length"></arg>
          </mutation>
          <value name="ARG0">
          <block type="variables_get">
          <title name="VAR">counter</title>
          </block>
          </value>
          <next>
          <block type="draw_turn" inline="true">
          <title name="DIR">turnLeft</title>
          <value name="VALUE">
          <block type="math_number">
          <title name="NUM">22.5</title>
          </block>
          </value>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </statement>
          </block>
          </next>
          </block>
          </xml>
      Course 4 SCFL 1_authored_hint:
        Course_4_SCFL_1_a: |-
          Echa un vistazo a esta opción de movimiento:

          ![](https://images.code.org/07fa7bdbbaaae3ecf2663a360b3e87d7-image-1469726373660.png)
        Course_4_SCFL_1_b: 'Intente usar dos bucles `para`: uno para trepar y agarrar
          néctar, y el otro para bajar y hacer miel.'
        Course_4_SCFL_1_c: |-
          Observe que un bucle `para` necesita varios bucles regulares dentro en que se repita 'contador' veces para hacer el patrón creciente de escalera.

          El otro bucle `para` solo necesita un bucle regular para hacer una cantidad 'contador' de miel.
        Course_4_SCFL_1_d: |-
          **Solución:**

          <xml>
          <block type="when_run" deletable="false" movable="false">
          <next>
          <block type="controls_for" inline="true">
          <title name="VAR">counter</title>
          <value name="FROM">
          <block type="math_number">
          <title name="NUM">1</title>
          </block>
          </value>
          <value name="TO">
          <block type="math_number">
          <title name="NUM">3</title>
          </block>
          </value>
          <value name="BY">
          <block type="math_number">
          <title name="NUM">1</title>
          </block>
          </value>
          <statement name="DO">
          <block type="controls_repeat_ext" inline="true">
          <value name="TIMES">
          <block type="variables_get">
          <title name="VAR">counter</title>
          </block>
          </value>
          <statement name="DO">
          <block type="maze_moveForward"/>
          </statement>
          <next>
          <block type="controls_repeat_ext" inline="true">
          <value name="TIMES">
          <block type="variables_get">
          <title name="VAR">counter</title>
          </block>
          </value>
          <statement name="DO">
          <block type="maze_nectar"/>
          </statement>
          <next>
          <block type="maze_turn">
          <title name="DIR">turnLeft</title>
          <next>
          <block type="controls_repeat_ext" inline="true">
          <value name="TIMES">
          <block type="variables_get">
          <title name="VAR">counter</title>
          </block>
          </value>
          <statement name="DO">
          <block type="maze_moveForward"/>
          </statement>
          <next>
          <block type="maze_turn">
          <title name="DIR">turnRight</title>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </statement>
          <next>
          <block type="maze_turn">
          <title name="DIR">turnRight</title>
          <next>
          <block type="maze_turn">
          <title name="DIR">turnRight</title>
          <next>
          <block type="controls_for" inline="true">
          <title name="VAR">counter</title>
          <value name="FROM">
          <block type="math_number">
          <title name="NUM">2</title>
          </block>
          </value>
          <value name="TO">
          <block type="math_number">
          <title name="NUM">10</title>
          </block>
          </value>
          <value name="BY">
          <block type="math_number">
          <title name="NUM">2</title>
          </block>
          </value>
          <statement name="DO">
          <block type="maze_moveForward">
          <next>
          <block type="maze_turn">
          <title name="DIR">turnLeft</title>
          <next>
          <block type="maze_moveForward">
          <next>
          <block type="maze_turn">
          <title name="DIR">turnRight</title>
          <next>
          <block type="controls_repeat_ext" inline="true">
          <value name="TIMES">
          <block type="variables_get">
          <title name="VAR">counter</title>
          </block>
          </value>
          <statement name="DO">
          <block type="maze_honey"/>
          </statement>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </statement>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </xml>
      Course 4 SCFL 1a_authored_hint:
        Course_4_SCFL_1a_a: Puede que tengas que desplazarte más lejos en general
          para usar la menor cantidad de bloques.
        Course_4_SCFL_1a_b: |-
          Echa un vistazo a esta opción de movimiento:

          ![](https://images.code.org/253d710ff7d1b494fe8fd20cfc92baaf-image-1469726263579.png)
        Course_4_SCFL_1a_c: Un `bucle para` te ayudará a ejecutar el mismo patrón,
          pero con un número variable de pasos. Tenga en cuenta que el número de pasos
          necesarios disminuye de 7 a 5 por 1.
        Course_4_SCFL_1a_d: |-
          **Solución:**

          <xml>
          <block type="when_run" deletable="false" movable="false">
          <next>
          <block type="controls_for" inline="true">
          <title name="VAR">counter</title>
          <value name="FROM">
          <block type="math_number">
          <title name="NUM">7</title>
          </block>
          </value>
          <value name="TO">
          <block type="math_number">
          <title name="NUM">5</title>
          </block>
          </value>
          <value name="BY">
          <block type="math_number">
          <title name="NUM">1</title>
          </block>
          </value>
          <statement name="DO">
          <block type="controls_repeat_ext" inline="true">
          <value name="TIMES">
          <block type="math_number">
          <title name="NUM">2</title>
          </block>
          </value>
          <statement name="DO">
          <block type="maze_moveForward"/>
          </statement>
          <next>
          <block type="maze_turn">
          <title name="DIR">turnLeft</title>
          <next>
          <block type="controls_repeat_ext" inline="true">
          <value name="TIMES">
          <block type="variables_get">
          <title name="VAR">counter</title>
          </block>
          </value>
          <statement name="DO">
          <block type="maze_moveForward"/>
          </statement>
          <next>
          <block type="maze_turn">
          <title name="DIR">turnLeft</title>
          <next>
          <block type="controls_repeat_ext" inline="true">
          <value name="TIMES">
          <block type="math_number">
          <title name="NUM">2</title>
          </block>
          </value>
          <statement name="DO">
          <block type="maze_moveForward"/>
          </statement>
          <next>
          <block type="maze_turn">
          <title name="DIR">turnLeft</title>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </statement>
          </block>
          </next>
          </block>
          </xml>
      Course 4 SCFL 1b_authored_hint:
        Course_4_SCFL_1b_a: Intenta usando un 'bucle para'.
        Course_4_SCFL_1b_b: |-
          Echa un vistazo a esta opción de movimiento:

          ![](https://images.code.org/1957633c453f4025a3fd6ce0e201398b-image-1469642319721.png)
        Course_4_SCFL_1b_c: |-
          **Solución:**

          <xml>
          <block type="when_run" deletable="false" movable="false">
          <next>
          <block type="controls_for" inline="true">
          <title name="VAR">counter</title>
          <value name="FROM">
          <block type="math_number">
          <title name="NUM">3</title>
          </block>
          </value>
          <value name="TO">
          <block type="math_number">
          <title name="NUM">1</title>
          </block>
          </value>
          <value name="BY">
          <block type="math_number">
          <title name="NUM">1</title>
          </block>
          </value>
          <statement name="DO">
          <block type="controls_repeat_ext" inline="true">
          <value name="TIMES">
          <block type="variables_get">
          <title name="VAR">counter</title>
          </block>
          </value>
          <statement name="DO">
          <block type="maze_moveForward"/>
          </statement>
          <next>
          <block type="maze_turn">
          <title name="DIR">turnLeft</title>
          <next>
          <block type="controls_repeat_ext" inline="true">
          <value name="TIMES">
          <block type="variables_get">
          <title name="VAR">counter</title>
          </block>
          </value>
          <statement name="DO">
          <block type="maze_moveForward"/>
          </statement>
          <next>
          <block type="maze_turn">
          <title name="DIR">turnRight</title>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </statement>
          </block>
          </next>
          </block>
          </xml>
      Course 4 SCFL 2_authored_hint:
        Course_4_SCFL_2_a: |-
          Echa un vistazo a esta opción de movimiento:

          ![](https://images.code.org/a69c63a039031254097f19231dd7bf95-image-1469726483169.png)
        Course_4_SCFL_2_b: Observe que hay tres puntos durante cada iteración de este
          bucle `para` donde se detiene para interactuar con los objetos.
        Course_4_SCFL_2_c: Durante cada iteración del ciclo `para`, el número de cada
          objeto se relaciona con la variable` contador` de alguna manera.
        Course_4_SCFL_2_d: |-
          **Solución:**

          <xml>
          <block type="when_run" deletable="false" movable="false">
          <next>
          <block type="controls_for" inline="true">
          <title name="VAR">counter</title>
          <value name="FROM">
          <block type="math_number">
          <title name="NUM">1</title>
          </block>
          </value>
          <value name="TO">
          <block type="math_number">
          <title name="NUM">4</title>
          </block>
          </value>
          <value name="BY">
          <block type="math_number">
          <title name="NUM">1</title>
          </block>
          </value>
          <statement name="DO">
          <block type="maze_moveForward">
          <next>
          <block type="controls_repeat_ext" inline="true">
          <value name="TIMES">
          <block type="variables_get">
          <title name="VAR">counter</title>
          </block>
          </value>
          <statement name="DO">
          <block type="maze_nectar"/>
          </statement>
          <next>
          <block type="maze_turn">
          <title name="DIR">turnRight</title>
          <next>
          <block type="maze_moveForward">
          <next>
          <block type="maze_moveForward">
          <next>
          <block type="controls_repeat_ext" inline="true">
          <value name="TIMES">
          <block type="math_arithmetic" inline="true">
          <title name="OP">MULTIPLY</title>
          <value name="A">
          <block type="variables_get">
          <title name="VAR">counter</title>
          </block>
          </value>
          <value name="B">
          <block type="math_number">
          <title name="NUM">3</title>
          </block>
          </value>
          </block>
          </value>
          <statement name="DO">
          <block type="maze_honey"/>
          </statement>
          <next>
          <block type="maze_turn">
          <title name="DIR">turnLeft</title>
          <next>
          <block type="maze_moveForward">
          <next>
          <block type="maze_moveForward">
          <next>
          <block type="maze_turn">
          <title name="DIR">turnRight</title>
          <next>
          <block type="controls_repeat_ext" inline="true">
          <value name="TIMES">
          <block type="math_arithmetic" inline="true">
          <title name="OP">POWER</title>
          <value name="A">
          <block type="math_number">
          <title name="NUM">2</title>
          </block>
          </value>
          <value name="B">
          <block type="variables_get">
          <title name="VAR">counter</title>
          </block>
          </value>
          </block>
          </value>
          <statement name="DO">
          <block type="maze_nectar"/>
          </statement>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </statement>
          </block>
          </next>
          </block>
          </xml>
      Course 4 SCFL 3_authored_hint:
        Course_4_SCFL_3_a: El 'ancho de pluma' es 1. El primer cuadro tiene 50 de
          píxeles de lado, y cada cuadrado es 50 píxeles más amplio que el anterior.
        Course_4_SCFL_3_b: La opacidad en el pincel siempre es `contador` / 2.
        Course_4_SCFL_3_c: Después de hacer cada cuadrado, no te olvides de moverte
          hacia atrás, girar, moverte de nuevo, ¡y luego retroceder!
        Course_4_SCFL_3_d: |-
          **Solución:**

          <xml>
          <block type="when_run" deletable="false" movable="false">
          <next>
          <block type="draw_width" inline="false">
          <value name="WIDTH">
          <block type="math_number">
          <title name="NUM">1</title>
          </block>
          </value>
          <next>
          <block type="draw_colour" inline="true" id="draw-color">
          <value name="COLOUR">
          <block type="colour_picker">
          <title name="COLOUR">#0000cd</title>
          </block>
          </value>
          <next>
          <block type="controls_for_counter" inline="true">
          <mutation counter="counter"></mutation>
          <value name="FROM">
          <block type="math_number">
          <title name="NUM">50</title>
          </block>
          </value>
          <value name="TO">
          <block type="math_number">
          <title name="NUM">350</title>
          </block>
          </value>
          <value name="BY">
          <block type="math_number">
          <title name="NUM">50</title>
          </block>
          </value>
          <statement name="DO">
          <block type="alpha" inline="true" id="alpha">
          <value name="VALUE">
          <block type="math_arithmetic" inline="true">
          <title name="OP">DIVIDE</title>
          <value name="A">
          <block type="variables_get">
          <title name="VAR">counter</title>
          </block>
          </value>
          <value name="B">
          <block type="math_number">
          <title name="NUM">2</title>
          </block>
          </value>
          </block>
          </value>
          <next>
          <block type="controls_repeat_ext" inline="true">
          <value name="TIMES">
          <block type="math_number">
          <title name="NUM">4</title>
          </block>
          </value>
          <statement name="DO">
          <block type="draw_move" inline="true">
          <title name="DIR">moveForward</title>
          <value name="VALUE">
          <block type="variables_get">
          <title name="VAR">counter</title>
          </block>
          </value>
          <next>
          <block type="draw_turn" inline="true">
          <title name="DIR">turnRight</title>
          <value name="VALUE">
          <block type="math_number">
          <title name="NUM">90</title>
          </block>
          </value>
          </block>
          </next>
          </block>
          </statement>
          <next>
          <block type="jump" inline="true">
          <title name="DIR">jumpBackward</title>
          <value name="VALUE">
          <block type="math_number">
          <title name="NUM">25</title>
          </block>
          </value>
          <next>
          <block type="draw_turn" inline="true">
          <title name="DIR">turnRight</title>
          <value name="VALUE">
          <block type="math_number">
          <title name="NUM">90</title>
          </block>
          </value>
          <next>
          <block type="jump" inline="true">
          <title name="DIR">jumpBackward</title>
          <value name="VALUE">
          <block type="math_number">
          <title name="NUM">25</title>
          </block>
          </value>
          <next>
          <block type="draw_turn" inline="true">
          <title name="DIR">turnLeft</title>
          <value name="VALUE">
          <block type="math_number">
          <title name="NUM">90</title>
          </block>
          </value>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </statement>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </xml>
      Course 4 SCFL 4_authored_hint:
        Course_4_SCFL_4_a: El cambio de color ocurre usando el bloque `set color with
          red, green, blue`. El rojo siempre tiene el valor de `contador`, el verde
          siempre es` 255 - contador`, y el azul permanece constante en 255 exactamente.
        Course_4_SCFL_4_b: Cada figura es un cuadro con lados que son de 'counter'
          píxeles de largo, comenzando con 5px, e incrementándose por 5px todo el
          camino hasta 200px.
        Course_4_SCFL_4_c: El artista gira 15 grados entre cada cuadro.
        Course_4_SCFL_4_d: |-
          **Solución:**

          <xml>
          <block type="when_run" deletable="false" movable="false">
          <next>
          <block type="draw_width" inline="false">
          <value name="WIDTH">
          <block type="math_number">
          <title name="NUM">1</title>
          </block>
          </value>
          <next>
          <block type="controls_for_counter" inline="true">
          <mutation counter="counter"></mutation>
          <value name="FROM">
          <block type="math_number">
          <title name="NUM">5</title>
          </block>
          </value>
          <value name="TO">
          <block type="math_number">
          <title name="NUM">200</title>
          </block>
          </value>
          <value name="BY">
          <block type="math_number">
          <title name="NUM">5</title>
          </block>
          </value>
          <statement name="DO">
          <block type="draw_colour" inline="true" id="draw-color">
          <value name="COLOUR">
          <block type="colour_rgb" inline="false">
          <value name="RED">
          <block type="variables_get">
          <title name="VAR">counter</title>
          </block>
          </value>
          <value name="GREEN">
          <block type="math_arithmetic" inline="true">
          <title name="OP">MINUS</title>
          <value name="A">
          <block type="math_number">
          <title name="NUM">255</title>
          </block>
          </value>
          <value name="B">
          <block type="variables_get">
          <title name="VAR">counter</title>
          </block>
          </value>
          </block>
          </value>
          <value name="BLUE">
          <block type="math_number">
          <title name="NUM">255</title>
          </block>
          </value>
          </block>
          </value>
          <next>
          <block type="controls_repeat_ext" inline="true">
          <value name="TIMES">
          <block type="math_number">
          <title name="NUM">4</title>
          </block>
          </value>
          <statement name="DO">
          <block type="draw_move" inline="true">
          <title name="DIR">moveForward</title>
          <value name="VALUE">
          <block type="variables_get">
          <title name="VAR">counter</title>
          </block>
          </value>
          <next>
          <block type="draw_turn_by_constant">
          <title name="DIR">turnRight</title>
          <title name="VALUE">90</title>
          </block>
          </next>
          </block>
          </statement>
          <next>
          <block type="draw_turn" inline="true">
          <title name="DIR">turnLeft</title>
          <value name="VALUE">
          <block type="math_number">
          <title name="NUM">15</title>
          </block>
          </value>
          </block>
          </next>
          </block>
          </next>
          </block>
          </statement>
          </block>
          </next>
          </block>
          </next>
          </block>
          </xml>
      Course 4 SCFL 6_authored_hint:
        Course_4_SCFL_6_a: El cambio de color ocurre utilizando el bloque 'definir
          color con rojo, verde, azul'. Rojo es la constante definida como 255, verde  es
          siempre el valor de 'contador', y azul es siempre '255-contador'.
        Course_4_SCFL_6_b: El código para esto es mucho más simple de lo que usted
          podría pensar. Solo defina el color dentro del 'ciclo for', avance, luego
          gire.
        Course_4_SCFL_6_c: 'El `control de flujo` va de 5 a 250 por 2. '
        Course_4_SCFL_6_d: |-
          **Solución:**

          <xml>
          <block type="when_run" deletable="false" movable="false">
          <next>
          <block type="draw_width" inline="false">
          <value name="WIDTH">
          <block type="math_number">
          <title name="NUM">1</title>
          </block>
          </value>
          <next>
          <block type="controls_for_counter" inline="true">
          <mutation counter="counter"></mutation>
          <value name="FROM">
          <block type="math_number">
          <title name="NUM">5</title>
          </block>
          </value>
          <value name="TO">
          <block type="math_number">
          <title name="NUM">250</title>
          </block>
          </value>
          <value name="BY">
          <block type="math_number">
          <title name="NUM">2</title>
          </block>
          </value>
          <statement name="DO">
          <block type="draw_colour" inline="true" id="draw-color">
          <value name="COLOUR">
          <block type="colour_rgb" inline="false">
          <value name="RED">
          <block type="math_number">
          <title name="NUM">255</title>
          </block>
          </value>
          <value name="GREEN">
          <block type="variables_get">
          <title name="VAR">counter</title>
          </block>
          </value>
          <value name="BLUE">
          <block type="math_arithmetic" inline="true">
          <title name="OP">MINUS</title>
          <value name="A">
          <block type="math_number">
          <title name="NUM">255</title>
          </block>
          </value>
          <value name="B">
          <block type="variables_get">
          <title name="VAR">counter</title>
          </block>
          </value>
          </block>
          </value>
          </block>
          </value>
          <next>
          <block type="draw_move" inline="true">
          <title name="DIR">moveForward</title>
          <value name="VALUE">
          <block type="variables_get">
          <title name="VAR">counter</title>
          </block>
          </value>
          <next>
          <block type="draw_turn" inline="true">
          <title name="DIR">turnRight</title>
          <value name="VALUE">
          <block type="math_number">
          <title name="NUM">80</title>
          </block>
          </value>
          </block>
          </next>
          </block>
          </next>
          </block>
          </statement>
          </block>
          </next>
          </block>
          </next>
          </block>
          </xml>
      Course 4 SCFL 7_authored_hint:
        Course_4_SCFL_7_a: El cambio de color ocurre usando el bloque `set color con
          rojo, verde, azul`. Rojo está configurado como `contador`. El verde es `255
          - contador`, y el azul se establece constante en 255.
        Course_4_SCFL_7_b: 'Este dibujo se hace usando dos ''controles de flujos''
          similares. Uno va de 5 a 200 por 2, el otro va de 200 a 5 por 2. '
        Course_4_SCFL_7_c: Dentro de cada `control de flujo` avanzas 5 píxeles antes
          de girar en` 360 / counter`. ¡No olvides poner tu pincel en el "contador"
          antes de hacer algo!
        Course_4_SCFL_7_d: Tendrás que girar a la izquierda 225 grados entre los dos
          `for loops`.
        Course_4_SCFL_7_e: |-
          **solución:**

          <xml>
          <block type="when_run" deletable="false" movable="false">
          <next>
          <block type="alpha" inline="true" id="alpha">
          <value name="VALUE">
          <block type="math_number_dropdown">
          <title name="NUM" config="100,90,80,70,60,50,40,30,20,10,0">20</title>
          </block>
          </value>
          <next>
          <block type="controls_for_counter" inline="true">
          <mutation counter="counter"></mutation>
          <value name="FROM">
          <block type="math_number">
          <title name="NUM">5</title>
          </block>
          </value>
          <value name="TO">
          <block type="math_number">
          <title name="NUM">200</title>
          </block>
          </value>
          <value name="BY">
          <block type="math_number">
          <title name="NUM">2</title>
          </block>
          </value>
          <statement name="DO">
          <block type="draw_width" inline="false">
          <value name="WIDTH">
          <block type="variables_get">
          <title name="VAR">counter</title>
          </block>
          </value>
          <next>
          <block type="draw_colour" inline="true" id="draw-color">
          <value name="COLOUR">
          <block type="colour_rgb" inline="false">
          <value name="RED">
          <block type="variables_get">
          <title name="VAR">counter</title>
          </block>
          </value>
          <value name="GREEN">
          <block type="math_arithmetic" inline="true">
          <title name="OP">MINUS</title>
          <value name="A">
          <block type="math_number">
          <title name="NUM">255</title>
          </block>
          </value>
          <value name="B">
          <block type="variables_get">
          <title name="VAR">counter</title>
          </block>
          </value>
          </block>
          </value>
          <value name="BLUE">
          <block type="math_number">
          <title name="NUM">255</title>
          </block>
          </value>
          </block>
          </value>
          <next>
          <block type="draw_move" inline="true">
          <title name="DIR">moveForward</title>
          <value name="VALUE">
          <block type="math_number">
          <title name="NUM">5</title>
          </block>
          </value>
          <next>
          <block type="draw_turn" inline="true">
          <title name="DIR">turnLeft</title>
          <value name="VALUE">
          <block type="math_arithmetic" inline="true">
          <title name="OP">DIVIDE</title>
          <value name="A">
          <block type="math_number">
          <title name="NUM">360</title>
          </block>
          </value>
          <value name="B">
          <block type="variables_get">
          <title name="VAR">counter</title>
          </block>
          </value>
          </block>
          </value>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </statement>
          <next>
          <block type="draw_turn" inline="true">
          <title name="DIR">turnLeft</title>
          <value name="VALUE">
          <block type="math_number">
          <title name="NUM">225</title>
          </block>
          </value>
          <next>
          <block type="controls_for_counter" inline="true">
          <mutation counter="counter"></mutation>
          <value name="FROM">
          <block type="math_number">
          <title name="NUM">200</title>
          </block>
          </value>
          <value name="TO">
          <block type="math_number">
          <title name="NUM">5</title>
          </block>
          </value>
          <value name="BY">
          <block type="math_number">
          <title name="NUM">2</title>
          </block>
          </value>
          <statement name="DO">
          <block type="draw_width" inline="false">
          <value name="WIDTH">
          <block type="variables_get">
          <title name="VAR">counter</title>
          </block>
          </value>
          <next>
          <block type="draw_colour" inline="true" id="draw-color">
          <value name="COLOUR">
          <block type="colour_rgb" inline="false">
          <value name="RED">
          <block type="variables_get">
          <title name="VAR">counter</title>
          </block>
          </value>
          <value name="GREEN">
          <block type="math_arithmetic" inline="true">
          <title name="OP">MINUS</title>
          <value name="A">
          <block type="math_number">
          <title name="NUM">255</title>
          </block>
          </value>
          <value name="B">
          <block type="variables_get">
          <title name="VAR">counter</title>
          </block>
          </value>
          </block>
          </value>
          <value name="BLUE">
          <block type="math_number">
          <title name="NUM">255</title>
          </block>
          </value>
          </block>
          </value>
          <next>
          <block type="draw_move" inline="true">
          <title name="DIR">moveForward</title>
          <value name="VALUE">
          <block type="math_number">
          <title name="NUM">5</title>
          </block>
          </value>
          <next>
          <block type="draw_turn" inline="true">
          <title name="DIR">turnRight</title>
          <value name="VALUE">
          <block type="math_arithmetic" inline="true">
          <title name="OP">DIVIDE</title>
          <value name="A">
          <block type="math_number">
          <title name="NUM">360</title>
          </block>
          </value>
          <value name="B">
          <block type="variables_get">
          <title name="VAR">counter</title>
          </block>
          </value>
          </block>
          </value>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </statement>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </xml>
      Course 4 SCV 1_authored_hint:
        Course_4_SCV_1_a: 'Las variables son útiles ya que usted puede sumarlas cada
          vez mediante un lazo. '
        Course_4_SCV_1_b: Este rompecabezas tiene un lazo que crea un polígono, un
          lazo que repite el polígono 'lados' veces, luego otro lazo que lo hace todo
          de nuevo después de sumar 5 a 'lados'.
        Course_4_SCV_1_c: Usar una variable para 'lados' y una para 'longitud' hace
          al código más limpio ya que usted puede reutilizar el mismo código múltiples
          veces, en vez de crear una nueva copia para cada conjunto de números.
        Course_4_SCV_1_d: |-
          **solución:**

          <xml>
          <block type="when_run" deletable="false" movable="false">
          <next>
          <block type="draw_width" inline="false">
          <value name="WIDTH">
          <block type="math_number">
          <title name="NUM">1</title>
          </block>
          </value>
          <next>
          <block type="variables_set" inline="false">
          <title name="VAR">length</title>
          <value name="VALUE">
          <block type="math_number">
          <title name="NUM">500</title>
          </block>
          </value>
          <next>
          <block type="variables_set" inline="false">
          <title name="VAR">sides</title>
          <value name="VALUE">
          <block type="math_number">
          <title name="NUM">0</title>
          </block>
          </value>
          <next>
          <block type="controls_repeat_ext" inline="true">
          <value name="TIMES">
          <block type="math_number">
          <title name="NUM">2</title>
          </block>
          </value>
          <statement name="DO">
          <block type="draw_colour" inline="true" id="draw-color">
          <value name="COLOUR">
          <block type="colour_random"/>
          </value>
          <next>
          <block type="variables_set" inline="false">
          <title name="VAR">sides</title>
          <value name="VALUE">
          <block type="math_arithmetic" inline="true">
          <title name="OP">ADD</title>
          <value name="A">
          <block type="variables_get">
          <title name="VAR">sides</title>
          </block>
          </value>
          <value name="B">
          <block type="math_number">
          <title name="NUM">5</title>
          </block>
          </value>
          </block>
          </value>
          <next>
          <block type="controls_repeat_ext" inline="true">
          <value name="TIMES">
          <block type="variables_get">
          <title name="VAR">sides</title>
          </block>
          </value>
          <statement name="DO">
          <block type="controls_repeat_ext" inline="true">
          <value name="TIMES">
          <block type="variables_get">
          <title name="VAR">sides</title>
          </block>
          </value>
          <statement name="DO">
          <block type="draw_move" inline="true">
          <title name="DIR">moveForward</title>
          <value name="VALUE">
          <block type="math_arithmetic" inline="true">
          <title name="OP">DIVIDE</title>
          <value name="A">
          <block type="variables_get">
          <title name="VAR">length</title>
          </block>
          </value>
          <value name="B">
          <block type="variables_get">
          <title name="VAR">sides</title>
          </block>
          </value>
          </block>
          </value>
          <next>
          <block type="draw_turn" inline="true">
          <title name="DIR">turnLeft</title>
          <value name="VALUE">
          <block type="math_arithmetic" inline="true">
          <title name="OP">DIVIDE</title>
          <value name="A">
          <block type="math_number">
          <title name="NUM">360</title>
          </block>
          </value>
          <value name="B">
          <block type="variables_get">
          <title name="VAR">sides</title>
          </block>
          </value>
          </block>
          </value>
          </block>
          </next>
          </block>
          </statement>
          <next>
          <block type="draw_turn" inline="true">
          <title name="DIR">turnRight</title>
          <value name="VALUE">
          <block type="math_arithmetic" inline="true">
          <title name="OP">DIVIDE</title>
          <value name="A">
          <block type="math_number">
          <title name="NUM">360</title>
          </block>
          </value>
          <value name="B">
          <block type="variables_get">
          <title name="VAR">sides</title>
          </block>
          </value>
          </block>
          </value>
          </block>
          </next>
          </block>
          </statement>
          </block>
          </next>
          </block>
          </next>
          </block>
          </statement>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </xml>
      Course 4 SCV 2_authored_hint:
        Course_4_SCV_2_a: |-
          La imagen completa se compone de 10 de estas "flores":
          ! [] (https://images.code.org/bac2a606dfa59c00409294499540267d-imagen-1469641972385.png)
                  
          ... que se componen de 10 de estos decágonos:
          ! [] (https://images.code.org/1e15f278c9c1606f90a2490ec3a94eb4-image-1469642051512.png)
        Course_4_SCV_2_b: 'Este diseño utiliza lazos anidados (tres niveles). Todos
          los lazos se ejecutan ''lados'' veces. '
        Course_4_SCV_2_c: El artista gira a la izquierda cuando se crea cada decágono,
          pero gira a la derecha en los otros dos lazos.
        Course_4_SCV_2_d: Para evitar que todos sus 10 pétalos de "flores" sean dibujados
          en el mismo lugar, asegúrese de saltar hacia adelante por `longitud`/`lados`
          antes de girar 360/`lados` grados como parte de su lazo más externo.
        Course_4_SCV_2_e: |-
          **Solución:**

          <xml>
          <block type="when_run" deletable="false" movable="false">
          <next>
          <block type="draw_width" inline="false">
          <value name="WIDTH">
          <block type="math_number">
          <title name="NUM">1</title>
          </block>
          </value>
          <next>
          <block type="variables_set" inline="false">
          <title name="VAR">length</title>
          <value name="VALUE">
          <block type="math_number">
          <title name="NUM">400</title>
          </block>
          </value>
          <next>
          <block type="variables_set" inline="false">
          <title name="VAR">sides</title>
          <value name="VALUE">
          <block type="math_number">
          <title name="NUM">10</title>
          </block>
          </value>
          <next>
          <block type="controls_repeat_ext" inline="true">
          <value name="TIMES">
          <block type="variables_get">
          <title name="VAR">sides</title>
          </block>
          </value>
          <statement name="DO">
          <block type="draw_colour" inline="true" id="draw-color">
          <value name="COLOUR">
          <block type="colour_picker">
          <title name="COLOUR">#ff0000</title>
          </block>
          </value>
          <next>
          <block type="controls_repeat_ext" inline="true">
          <value name="TIMES">
          <block type="variables_get">
          <title name="VAR">sides</title>
          </block>
          </value>
          <statement name="DO">
          <block type="controls_repeat_ext" inline="true">
          <value name="TIMES">
          <block type="variables_get">
          <title name="VAR">sides</title>
          </block>
          </value>
          <statement name="DO">
          <block type="draw_move" inline="true">
          <title name="DIR">moveForward</title>
          <value name="VALUE">
          <block type="math_arithmetic" inline="true">
          <title name="OP">DIVIDE</title>
          <value name="A">
          <block type="variables_get">
          <title name="VAR">length</title>
          </block>
          </value>
          <value name="B">
          <block type="variables_get">
          <title name="VAR">sides</title>
          </block>
          </value>
          </block>
          </value>
          <next>
          <block type="draw_turn" inline="true">
          <title name="DIR">turnLeft</title>
          <value name="VALUE">
          <block type="math_arithmetic" inline="true">
          <title name="OP">DIVIDE</title>
          <value name="A">
          <block type="math_number">
          <title name="NUM">360</title>
          </block>
          </value>
          <value name="B">
          <block type="variables_get">
          <title name="VAR">sides</title>
          </block>
          </value>
          </block>
          </value>
          </block>
          </next>
          </block>
          </statement>
          <next>
          <block type="draw_turn" inline="true">
          <title name="DIR">turnRight</title>
          <value name="VALUE">
          <block type="math_arithmetic" inline="true">
          <title name="OP">DIVIDE</title>
          <value name="A">
          <block type="math_number">
          <title name="NUM">360</title>
          </block>
          </value>
          <value name="B">
          <block type="variables_get">
          <title name="VAR">sides</title>
          </block>
          </value>
          </block>
          </value>
          </block>
          </next>
          </block>
          </statement>
          <next>
          <block type="jump" inline="true">
          <title name="DIR">jumpForward</title>
          <value name="VALUE">
          <block type="math_arithmetic" inline="true">
          <title name="OP">DIVIDE</title>
          <value name="A">
          <block type="variables_get">
          <title name="VAR">length</title>
          </block>
          </value>
          <value name="B">
          <block type="variables_get">
          <title name="VAR">sides</title>
          </block>
          </value>
          </block>
          </value>
          <next>
          <block type="draw_turn" inline="true">
          <title name="DIR">turnRight</title>
          <value name="VALUE">
          <block type="math_arithmetic" inline="true">
          <title name="OP">DIVIDE</title>
          <value name="A">
          <block type="math_number">
          <title name="NUM">360</title>
          </block>
          </value>
          <value name="B">
          <block type="variables_get">
          <title name="VAR">sides</title>
          </block>
          </value>
          </block>
          </value>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </statement>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </xml>
      Course 4 SCV 3_authored_hint:
        Course_4_SCV_3_a: 'Utilice su block de matemáticas para sumar y restar puntos
          a los puntos variables cuando los sprites choquen. '
        Course_4_SCV_3_b: Usted puede cambiar el parámetro de cuán lejos se mueve
          su sprite cada vez que una de las teclas flecha es presionada.
        Course_4_SCV_3_c: |-
          **Solución:**

          <xml><block type="when_run"><next><block type="variables_set" inline="false"><title name="VAR">points</title><value name="VALUE"><block type="math_number"><title name="NUM">0</title></block></value></block></next></block><block type="studio_whenArrow"><title name="VALUE">up</title><next><block type="studio_moveDistanceParams" inline="true"><title name="SPRITE">0</title><title name="DIR">1</title><value name="DISTANCE"><block type="math_number"><title name="NUM">25</title></block></value></block></next></block><block type="studio_whenArrow"><title name="VALUE">down</title><next><block type="studio_moveDistanceParams" inline="true"><title name="SPRITE">0</title><title name="DIR">4</title><value name="DISTANCE"><block type="math_number"><title name="NUM">25</title></block></value></block></next></block><block type="studio_whenArrow"><title name="VALUE">left</title><next><block type="studio_moveDistanceParams" inline="true"><title name="SPRITE">0</title><title name="DIR">8</title><value name="DISTANCE"><block type="math_number"><title name="NUM">25</title></block></value></block></next></block><block type="studio_whenArrow"><title name="VALUE">right</title><next><block type="studio_moveDistanceParams" inline="true"><title name="SPRITE">0</title><title name="DIR">2</title><value name="DISTANCE"><block type="math_number"><title name="NUM">25</title></block></value></block></next></block><block type="studio_whenSpriteCollided"><title name="SPRITE1">0</title><title name="SPRITE2">1</title><next><block type="variables_set" inline="false"><title name="VAR">points</title><value name="VALUE"><block type="math_arithmetic" inline="true"><title name="OP">ADD</title><value name="A"><block type="variables_get"><title name="VAR">points</title></block></value><value name="B"><block type="math_number"><title name="NUM">2</title></block></value></block></value></block></next></block><block type="studio_whenSpriteCollided"><title name="SPRITE1">0</title><title name="SPRITE2">2</title><next><block type="variables_set" inline="false"><title name="VAR">points</title><value name="VALUE"><block type="math_arithmetic" inline="true"><title name="OP">ADD</title><value name="A"><block type="variables_get"><title name="VAR">points</title></block></value><value name="B"><block type="math_number"><title name="NUM">3</title></block></value></block></value></block></next></block>
          <block type="studio_whenSpriteCollided">
          <title name="SPRITE1">1</title>
          <title name="SPRITE2">2</title>
          <next>
          <block type="variables_set" inline="false">
          <title name="VAR">points</title>
          <value name="VALUE">
          <block type="math_arithmetic" inline="true">
          <title name="OP">MINUS</title>
          <value name="A">
          <block type="variables_get">
          <title name="VAR">points</title>
          </block>
          </value>
          <value name="B">
          <block type="math_number">
          <title name="NUM">1</title>
          </block>
          </value>
          </block>
          </value>
          </block>
          </next>
          </block>
          </xml>
      Course 4 SCV 4_authored_hint:
        Course_4_SCV_4_a: Tres variables le ayudarán aquí. Una para las unidades de
          néctar, una para unidades de miel, y una para cuán lejos la abeja debería
          moverse en cada iteración.
        Course_4_SCV_4_b: 'Será muy útil usar tres lazos dentro de su lazo principal.
          Uno para moverse hacia adelante, uno para recolectar néctar y otro para
          hacer miel. '
        Course_4_SCV_4_c: |-
          Echa un vistazo a esta opción de movimiento:

          ![](https://images.code.org/07fa7bdbbaaae3ecf2663a360b3e87d7-image-1469726373660.png)
        Course_4_SCV_4_d: |-
          **Solución:**

          <xml>
          <block type="when_run" deletable="false" movable="false">
          <next>
          <block type="variables_set" inline="false">
          <title name="VAR">honey</title>
          <value name="VALUE">
          <block type="math_number">
          <title name="NUM">4</title>
          </block>
          </value>
          <next>
          <block type="variables_set" inline="false">
          <title name="VAR">nectar</title>
          <value name="VALUE">
          <block type="math_number">
          <title name="NUM">6</title>
          </block>
          </value>
          <next>
          <block type="controls_repeat_ext" inline="true">
          <value name="TIMES">
          <block type="math_number">
          <title name="NUM">5</title>
          </block>
          </value>
          <statement name="DO">
          <block type="controls_repeat_ext" inline="true">
          <value name="TIMES">
          <block type="math_arithmetic" inline="true">
          <title name="OP">MINUS</title>
          <value name="A">
          <block type="variables_get">
          <title name="VAR">nectar</title>
          </block>
          </value>
          <value name="B">
          <block type="math_number">
          <title name="NUM">1</title>
          </block>
          </value>
          </block>
          </value>
          <statement name="DO">
          <block type="maze_moveForward"/>
          </statement>
          <next>
          <block type="controls_repeat_ext" inline="true">
          <value name="TIMES">
          <block type="variables_get">
          <title name="VAR">nectar</title>
          </block>
          </value>
          <statement name="DO">
          <block type="maze_nectar"/>
          </statement>
          <next>
          <block type="maze_moveForward">
          <next>
          <block type="controls_repeat_ext" inline="true">
          <value name="TIMES">
          <block type="variables_get">
          <title name="VAR">honey</title>
          </block>
          </value>
          <statement name="DO">
          <block type="maze_honey"/>
          </statement>
          <next>
          <block type="maze_moveForward">
          <next>
          <block type="maze_turn">
          <title name="DIR">turnRight</title>
          <next>
          <block type="variables_set" inline="false">
          <title name="VAR">honey</title>
          <value name="VALUE">
          <block type="math_arithmetic" inline="true">
          <title name="OP">ADD</title>
          <value name="A">
          <block type="variables_get">
          <title name="VAR">honey</title>
          </block>
          </value>
          <value name="B">
          <block type="math_number">
          <title name="NUM">1</title>
          </block>
          </value>
          </block>
          </value>
          <next>
          <block type="variables_set" inline="false">
          <title name="VAR">nectar</title>
          <value name="VALUE">
          <block type="math_arithmetic" inline="true">
          <title name="OP">MINUS</title>
          <value name="A">
          <block type="variables_get">
          <title name="VAR">nectar</title>
          </block>
          </value>
          <value name="B">
          <block type="math_number">
          <title name="NUM">1</title>
          </block>
          </value>
          </block>
          </value>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </statement>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </xml>
      Course 4 SCV 5_authored_hint:
        Course_4_SCV_5_a: |-
          Eche un vistazo a esta opción de movimiento:

          ![](https://images.code.org/a69c63a039031254097f19231dd7bf95-image-1469726483169.png)
        Course_4_SCV_5_b: Cada vez mediante el lazo, las flores tienen dos veces menos
          néctar y la abeja necesitará hacer una miel más.
        Course_4_SCV_5_c: Note que al principio del lazo exterior, las abejas se mueven
          tantas veces como haya néctar en la siguiente flor.
        Course_4_SCV_5_d: |-
          **Solución:**

          <xml>
          <block type="when_run" deletable="false" movable="false">
          <next>
          <block type="variables_set" inline="false">
          <title name="VAR">honey</title>
          <value name="VALUE">
          <block type="math_number">
          <title name="NUM">1</title>
          </block>
          </value>
          <next>
          <block type="variables_set" inline="false">
          <title name="VAR">nectar</title>
          <value name="VALUE">
          <block type="math_number">
          <title name="NUM">5</title>
          </block>
          </value>
          <next>
          <block type="controls_repeat_ext" inline="true">
          <value name="TIMES">
          <block type="math_number">
          <title name="NUM">3</title>
          </block>
          </value>
          <statement name="DO">
          <block type="controls_repeat_ext" inline="true">
          <value name="TIMES">
          <block type="variables_get">
          <title name="VAR">nectar</title>
          </block>
          </value>
          <statement name="DO">
          <block type="maze_move">
          <title name="DIR">moveForward</title>
          </block>
          </statement>
          <next>
          <block type="maze_turn">
          <title name="DIR">turnRight</title>
          <next>
          <block type="controls_repeat_ext" inline="true">
          <value name="TIMES">
          <block type="variables_get">
          <title name="VAR">nectar</title>
          </block>
          </value>
          <statement name="DO">
          <block type="maze_nectar"/>
          </statement>
          <next>
          <block type="maze_move">
          <title name="DIR">moveForward</title>
          <next>
          <block type="controls_repeat_ext" inline="true">
          <value name="TIMES">
          <block type="variables_get">
          <title name="VAR">honey</title>
          </block>
          </value>
          <statement name="DO">
          <block type="maze_honey"/>
          </statement>
          <next>
          <block type="variables_set" inline="false">
          <title name="VAR">honey</title>
          <value name="VALUE">
          <block type="math_arithmetic" inline="true">
          <title name="OP">ADD</title>
          <value name="A">
          <block type="variables_get">
          <title name="VAR">honey</title>
          </block>
          </value>
          <value name="B">
          <block type="math_number">
          <title name="NUM">1</title>
          </block>
          </value>
          </block>
          </value>
          <next>
          <block type="variables_set" inline="false">
          <title name="VAR">nectar</title>
          <value name="VALUE">
          <block type="math_arithmetic" inline="true">
          <title name="OP">MINUS</title>
          <value name="A">
          <block type="variables_get">
          <title name="VAR">nectar</title>
          </block>
          </value>
          <value name="B">
          <block type="math_number">
          <title name="NUM">2</title>
          </block>
          </value>
          </block>
          </value>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </statement>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </xml>
      Course 4 SCV 6_authored_hint:
        Course_4_SCV_6_a: |-
          Eche un vistazo a cómo luce una sola forma completa

          ! [] (https://images.code.org/9e30d3a87186cefe730984feee195806-image-1469642178866.png)
        Course_4_SCV_6_b: 'Usted se beneficiará de la creación de 8 variables: red1,
          green1, blue1, red2, green2, blue2, longitud, y lados.'
        Course_4_SCV_6_c: Cada uno de los 5 lados de la forma se divide en pedazos
          de "largo" / "lados" donde el zig es verde azulado (rgb = 0,175,200) y el
          zag es morado (rgb = 100, 50, 150).
        Course_4_SCV_6_d: 'Para zig, gire a la izquierda en `360` /` lados`. Para
          zag, gire a la derecha en `360` /` lados`. '
        Course_4_SCV_6_e: 'El resto del programa es muy estándar para hacer una rotación
          completa de 360 grados de esa forma, excepto que estamos superponiendo las
          formas a la mitad, por lo que tenemos que girar a la derecha por `180` /`
          lados`, lo que significa que necesitamos dos veces tantos de ellos como
          de costumbre (repeticiones `lados` *` 2`). '
        Course_4_SCV_6_f: |-
          **Solución:**

          <xml>
          <block type="when_run" deletable="false" movable="false">
          <next>
          <block type="draw_width" inline="false">
          <value name="WIDTH">
          <block type="math_number">
          <title name="NUM">1</title>
          </block>
          </value>
          <next>
          <block type="variables_set" inline="false">
          <title name="VAR">red1</title>
          <value name="VALUE">
          <block type="math_number">
          <title name="NUM">0</title>
          </block>
          </value>
          <next>
          <block type="variables_set" inline="false">
          <title name="VAR">green1</title>
          <value name="VALUE">
          <block type="math_number">
          <title name="NUM">175</title>
          </block>
          </value>
          <next>
          <block type="variables_set" inline="false">
          <title name="VAR">blue1</title>
          <value name="VALUE">
          <block type="math_number">
          <title name="NUM">200</title>
          </block>
          </value>
          <next>
          <block type="variables_set" inline="false">
          <title name="VAR">red2</title>
          <value name="VALUE">
          <block type="math_number">
          <title name="NUM">100</title>
          </block>
          </value>
          <next>
          <block type="variables_set" inline="false">
          <title name="VAR">green2</title>
          <value name="VALUE">
          <block type="math_number">
          <title name="NUM">50</title>
          </block>
          </value>
          <next>
          <block type="variables_set" inline="false">
          <title name="VAR">blue2</title>
          <value name="VALUE">
          <block type="math_number">
          <title name="NUM">150</title>
          </block>
          </value>
          <next>
          <block type="variables_set" inline="false">
          <title name="VAR">length</title>
          <value name="VALUE">
          <block type="math_number">
          <title name="NUM">70</title>
          </block>
          </value>
          <next>
          <block type="variables_set" inline="false">
          <title name="VAR">sides</title>
          <value name="VALUE">
          <block type="math_number">
          <title name="NUM">5</title>
          </block>
          </value>
          <next>
          <block type="controls_repeat_ext" inline="true">
          <value name="TIMES">
          <block type="math_arithmetic" inline="true">
          <title name="OP">MULTIPLY</title>
          <value name="A">
          <block type="math_number">
          <title name="NUM">2</title>
          </block>
          </value>
          <value name="B">
          <block type="variables_get">
          <title name="VAR">sides</title>
          </block>
          </value>
          </block>
          </value>
          <statement name="DO">
          <block type="controls_repeat_ext" inline="true">
          <value name="TIMES">
          <block type="variables_get">
          <title name="VAR">sides</title>
          </block>
          </value>
          <statement name="DO">
          <block type="controls_repeat_ext" inline="true">
          <value name="TIMES">
          <block type="variables_get">
          <title name="VAR">sides</title>
          </block>
          </value>
          <statement name="DO">
          <block type="draw_colour" inline="true" id="draw-color">
          <value name="COLOUR">
          <block type="colour_rgb" inline="false">
          <value name="RED">
          <block type="variables_get">
          <title name="VAR">red1</title>
          </block>
          </value>
          <value name="GREEN">
          <block type="variables_get">
          <title name="VAR">green1</title>
          </block>
          </value>
          <value name="BLUE">
          <block type="variables_get">
          <title name="VAR">blue1</title>
          </block>
          </value>
          </block>
          </value>
          <next>
          <block type="draw_move" inline="true">
          <title name="DIR">moveForward</title>
          <value name="VALUE">
          <block type="math_arithmetic" inline="true">
          <title name="OP">DIVIDE</title>
          <value name="A">
          <block type="variables_get">
          <title name="VAR">length</title>
          </block>
          </value>
          <value name="B">
          <block type="variables_get">
          <title name="VAR">sides</title>
          </block>
          </value>
          </block>
          </value>
          <next>
          <block type="draw_turn" inline="true">
          <title name="DIR">turnLeft</title>
          <value name="VALUE">
          <block type="math_arithmetic" inline="true">
          <title name="OP">DIVIDE</title>
          <value name="A">
          <block type="math_number">
          <title name="NUM">360</title>
          </block>
          </value>
          <value name="B">
          <block type="variables_get">
          <title name="VAR">sides</title>
          </block>
          </value>
          </block>
          </value>
          <next>
          <block type="draw_colour" inline="true" id="draw-color">
          <value name="COLOUR">
          <block type="colour_rgb" inline="false">
          <value name="RED">
          <block type="variables_get">
          <title name="VAR">red2</title>
          </block>
          </value>
          <value name="GREEN">
          <block type="variables_get">
          <title name="VAR">green2</title>
          </block>
          </value>
          <value name="BLUE">
          <block type="variables_get">
          <title name="VAR">blue2</title>
          </block>
          </value>
          </block>
          </value>
          <next>
          <block type="draw_move" inline="true">
          <title name="DIR">moveForward</title>
          <value name="VALUE">
          <block type="math_arithmetic" inline="true">
          <title name="OP">DIVIDE</title>
          <value name="A">
          <block type="variables_get">
          <title name="VAR">length</title>
          </block>
          </value>
          <value name="B">
          <block type="variables_get">
          <title name="VAR">sides</title>
          </block>
          </value>
          </block>
          </value>
          <next>
          <block type="draw_turn" inline="true">
          <title name="DIR">turnRight</title>
          <value name="VALUE">
          <block type="math_arithmetic" inline="true">
          <title name="OP">DIVIDE</title>
          <value name="A">
          <block type="math_number">
          <title name="NUM">360</title>
          </block>
          </value>
          <value name="B">
          <block type="variables_get">
          <title name="VAR">sides</title>
          </block>
          </value>
          </block>
          </value>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </statement>
          <next>
          <block type="draw_turn" inline="true">
          <title name="DIR">turnRight</title>
          <value name="VALUE">
          <block type="math_arithmetic" inline="true">
          <title name="OP">DIVIDE</title>
          <value name="A">
          <block type="math_number">
          <title name="NUM">360</title>
          </block>
          </value>
          <value name="B">
          <block type="variables_get">
          <title name="VAR">sides</title>
          </block>
          </value>
          </block>
          </value>
          </block>
          </next>
          </block>
          </statement>
          <next>
          <block type="draw_turn" inline="true">
          <title name="DIR">turnRight</title>
          <value name="VALUE">
          <block type="math_arithmetic" inline="true">
          <title name="OP">DIVIDE</title>
          <value name="A">
          <block type="math_number">
          <title name="NUM">180</title>
          </block>
          </value>
          <value name="B">
          <block type="variables_get">
          <title name="VAR">sides</title>
          </block>
          </value>
          </block>
          </value>
          </block>
          </next>
          </block>
          </statement>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </xml>
      Course E MC Conditionals1_authored_hint:
        mc_9_a: "¿Está frente al camino correcto? El 'bloque destruir' explota el
          bloque en frente de usted."
        mc_9_b: "¡Las machas negras en el muro son carbón! Utilice 'destruir bloque'
          en estas para minar el carbón."
        mc_9_c: Utilice 'poner antorcha' para poner una antorcha en el espacio donde
          está parado.
      CourseF_PlayLab_vars2_authored_hint:
        Course_4_Play_Lab_Vars_2_a: Asegúrese de establecer el número de `velocidad_perro`a
          algo más grande que` velocidad_gato`.
      Dance short test 2_authored_hint:
        validation: |-
          **¿Cómo paso este nivel?**

          * Tienes que hacer que el efecto de fondo cambie en algún momento del séptimo compás de la canción.

          *Este nivel termina después de 10 compases.*
        challenges: |-
          **Desafío opcional**

          Cambia el efecto de fondo en diferentes momentos durante la canción conectando el bloque nuevo con los de los compases <xml><block type="Dancelab_atTimestamp"><title name="TIMESTAMP">???</title><title name="UNIT">"measures"</title></block></xml>.
      Dance short test_authored_hint:
        validation: |-
          **¿Cómo paso este nivel?**

          * Tienes que hacer que el efecto de fondo cambie en algún momento del séptimo compás de la canción.

          *Este nivel termina después de 10 compases.*
        challenges: |-
          **Desafío opcional**

          Cambia el efecto de fondo en diferentes momentos durante la canción conectando el bloque nuevo con los de los compases <xml><block type="Dancelab_atTimestamp"><title name="TIMESTAMP">???</title><title name="UNIT">"measures"</title></block></xml>.
      Dance_Party_01_authored_hint:
        validation: |-
          **¿Cómo paso este nivel?**
          * Asegúrate de que el bailarín aparezca en la pantalla.

          *Este nivel termina después de 4 compases.*
        challenges: |-
          **Desafíos opcionales**
          * Elige una canción diferente para reproducir.
          * ¡Elige uno diferente que se parezca a un alce!
          * Renombra a tu bailarín.
      Dance_Party_01_low_authored_hint:
        validation: |-
          **¿Cómo paso este nivel?**
          * Asegúrate de que el bailarín aparezca en la pantalla.

          *Este nivel termina después de 4 compases.*
        challenges: |-
          **Desafíos opcionales**
          * Elige una canción diferente para reproducir.
          * ¡Elige uno diferente que se parezca a un alce!
          * Renombra a tu bailarín.
      Dance_Party_02_authored_hint:
        validation: |-
          **¿Cómo paso este nivel?**
          * El bailarín tiene que cambiar a un movimiento nuevo después de 4 compases.

          *El nivel termina después de 8 compases.*
      Dance_Party_03_authored_hint:
        validation: |-
          **¿Cómo paso este nivel?**

          * Después de 6 compases, tu bailarín tiene que hacer un baile diferente del que hacía después de 4 compases.

          *El nivel termina después de 12 compases.*
      Dance_Party_04_authored_hint:
        validation: |-
          **¿Cómo paso este nivel?**

          * Tienes que hacer que el efecto de fondo cambie en algún momento del séptimo compás de la canción.

          *Este nivel termina después de 10 compases.*
        challenges: |-
          **Desafío opcional**

          Cambia el efecto de fondo en diferentes momentos durante la canción conectando el bloque nuevo con los de los compases <xml><block type="Dancelab_atTimestamp"><title name="TIMESTAMP">???</title><title name="UNIT">"measures"</title></block></xml>.
      Dance_Party_06_authored_hint:
        validation: |-
          **¿Cómo paso este nivel?**

          * Necesitarás tener al menos dos bailarines.

          *Este nivel termina después de 6 compases.*
        challenges: |-
          **Desafío opcional**

          * Añade un tercer bailarín (¡o tantos como quieras!)
          * Haz que todos tus bailarines realicen diferentes movimientos en diferentes momentos de la canción.
      Dance_Party_08_authored_hint:
        validation: |-
          **¿Cómo paso este nivel?**

          * Dos bailarines deben tener un tamaño diferente de 100.

          *Este nivel termina después de 6 compases.*
        challenges: |-
          **Desafío opcional**

          * Experimenta cambiando otras propiedades (anchura, altura, rotación, etc.).
      Dance_Party_09_authored_hint:
        validation: |-
          **¿Cómo paso este nivel?**

          * Cambia la tonalidad de por lo menos un bailarín.

          *Este nivel termina después de 8 compases.*
      Dance_Party_1_authored_hint:
        validation: |-
          **¿Cómo paso este nivel?**
          * Asegúrate de que el bailarín aparezca en la pantalla.

          *Este nivel termina después de 4 compases.*
        challenges: |-
          **Desafíos opcionales**
          * Elige una canción diferente para reproducir.
          * ¡Elige uno diferente que se parezca a un alce!
          * Renombra a tu bailarín.
      Dance_Party_10_authored_hint:
        validation: |-
          **¿Cómo paso este nivel?**

          * Se deben cambiar las propiedades de dos o más bailarines.

          *Este nivel termina después de 8 compases.*
      Dance_Party_11.5_test_authored_hint:
        validation: |-
          **¿Cómo paso este nivel?**

          * ¡Usa tu creatividad!

          *Este nivel termina después de 8 compases.*
      Dance_Party_11_authored_hint:
        validation: |-
          **¿Cómo paso este nivel?**

          * ¡Usa tu creatividad!

          *Este nivel termina después de 8 compases.*
      Dance_Party_11_5_authored_hint:
        validation: |-
          **¿Cómo paso este nivel?**

          * ¡Usa tu creatividad!

          *Este nivel termina después de 8 compases.*
      Dance_Party_11b_authored_hint:
        validation: |-
          **¿Cómo paso este nivel?**

          * Utiliza el bloque «cuando flecha izquierda pulsada» para indicar al Robot que haga un movimiento de baile cuando la pulses.

          *Este nivel termina después de 8 compases.*
      Dance_Party_2_authored_hint:
        validation: |-
          **¿Cómo paso este nivel?**
          * El bailarín tiene que cambiar a un movimiento nuevo después de 4 compases.

          *El nivel termina después de 8 compases.*
      Dance_Party_3_authored_hint:
        validation: |-
          **¿Cómo paso este nivel?**

          * Después de 6 compases, tu bailarín tiene que hacer un baile diferente del que hacía después de 4 compases.

          *El nivel termina después de 12 compases.*
      Dance_Party_4_authored_hint:
        validation: |-
          **¿Cómo paso este nivel?**

          * Tienes que hacer que el efecto de fondo cambie en algún momento del séptimo compás de la canción.

          *Este nivel termina después de 10 compases.*
        challenges: |-
          **Desafío opcional**

          Cambia el efecto de fondo en diferentes momentos durante la canción conectando el bloque nuevo con los de los compases <xml><block type="Dancelab_atTimestamp"><title name="TIMESTAMP">???</title><title name="UNIT">"measures"</title></block></xml>.
      Dance_Party_5_authored_hint:
        validation: |-
          **¿Cómo paso este nivel?**

          * Tu baile debe realizar diferentes movimientos a lo largo de los 12 primeros compases de la canción.

          *Este nivel termina después de 12 compases.*
      Dance_Party_6_authored_hint:
        challenges: |-
          **Desafío opcional**

          * Añade un tercer bailarín (¡o tantos como quieras!)
          * Haz que todos tus bailarines realicen diferentes movimientos en diferentes momentos de la canción.
      Dance_Party_8_authored_hint:
        validation: |-
          **¿Cómo paso este nivel?**

          * Dos bailarines deben tener un tamaño diferente de 100.

          *Este nivel termina después de 6 compases.*
        challenges: |-
          **Desafío opcional**

          * Experimenta cambiando otras propiedades (anchura, altura, rotación, etc.).
      Dance_Party_9_authored_hint:
        validation: |-
          **¿Cómo paso este nivel?**

          * Cambia la tonalidad de por lo menos un bailarín.

          *Este nivel termina después de 8 compases.*
      Farmer for Authored Hint testing_authored_hint:
        first_hint: |-
          Esta es la primera pista.

          Tiene * algo de * ** basic ** `margen`
        second_hint: |-
          Esta es la segunda pista. Tiene una imagen

          ![](https://images.code.org/cab43107265a683a6216e18faab2353f-image-1452027548372.png)
        last_hint: Esta es la tercera y última pista. No tiene nada especial.
      Farmer for TTS testing_authored_hint:
        first_hint: |-
          Esta es la primera pista.

          Tiene * algo de * ** basic ** `margen`
        second_hint: |-
          Esta es la segunda pista. Tiene una imagen

          ![](https://images.code.org/cab43107265a683a6216e18faab2353f-image-1452027548372.png)
        last_hint: Esta es la tercera y última pista. No tiene nada especial.
      Function intro Ryan_authored_hint:
        Function_intro_Ryan_b: Si llamas a las funciones correctamente, este es el
          camino por el que ira...
        Function_intro_Ryan_a: "¡Puedes invocar una función muchas veces dentro de
          tu programa! Intenta invocarla dos veces para resolver este rompecabezas."
      Function intro Ryan_2019_authored_hint:
        Function_intro_Ryan_b: Si llamas a las funciones correctamente, este es el
          camino por el que ira...
        Function_intro_Ryan_a: "¡Puedes invocar una función muchas veces dentro de
          tu programa! Intenta invocarla dos veces para resolver este rompecabezas."
      HOC 2018 Level_10_authored_hint:
        voyage_aquatic_10a: "Mira las **linternas del mar** ![](https://images.code.org/471b33234222ddffb463aeb65de6b371-image-1539183353423.net-resizeimage.png)?
          ¿Cómo podrías usar un condicional con ellas para atravesar el monumento
          oceánico?\n\n"
      HOC 2018 Level_9b_authored_hint:
        voyage_aquatic_9a: "¡Qué arrecife de coral más bonito! ¡Estás en tu **derecho**
          de usar coral azul, pero asegúrate de que el coral rojo quede a la **izquierda**!"
      HOC Dance 0_draft_authored_hint:
        validation: |-
          **¿Cómo paso este nivel?**
          * Asegúrate de que el bailarín aparezca en la pantalla.

          *Este nivel termina después de 4 compases.*
        challenges: |-
          **Desafíos opcionales**
          * Elige una canción diferente para reproducir.
          * ¡Elige uno diferente que se parezca a un alce!
          * Renombra a tu bailarín.
      HOC Dance 1_draft_authored_hint:
        validation: |-
          **¿Cómo paso este nivel?**
          * El bailarín tiene que cambiar a un movimiento nuevo después de 4 compases.

          *El nivel termina después de 8 compases.*
      HOC Dance 2_draft_authored_hint:
        validation: |-
          **¿Cómo paso este nivel?**

          * Después de 6 compases, tu bailarín tiene que hacer un baile diferente del que hacía después de 4 compases.

          *El nivel termina después de 12 compases.*
      HOC Dance 3_draft_authored_hint:
        validation: |-
          **¿Cómo paso este nivel?**

          * Tienes que hacer que el efecto de fondo cambie en algún momento del séptimo compás de la canción.

          *Este nivel termina después de 10 compases.*
        challenges: |-
          **Desafío opcional**

          Cambia el efecto de fondo en diferentes momentos durante la canción conectando el bloque nuevo con los de los compases <xml><block type="Dancelab_atTimestamp"><title name="TIMESTAMP">???</title><title name="UNIT">"measures"</title></block></xml>.
      HOC Dance 4_draft_authored_hint:
        validation: |-
          **¿Cómo paso este nivel?**

          * Tu baile debe realizar diferentes movimientos a lo largo de los 12 primeros compases de la canción.

          *Este nivel termina después de 12 compases.*
      HOC Dance 5_draft_authored_hint:
        challenges: |-
          **Desafío opcional**

          * Añade un tercer bailarín (¡o tantos como quieras!)
          * Haz que todos tus bailarines realicen diferentes movimientos en diferentes momentos de la canción.
      HOC Dance 6_draft_authored_hint:
        validation: |-
          **¿Cómo paso este nivel?**

          * Dos bailarines deben tener un tamaño diferente de 100.

          *Este nivel termina después de 6 compases.*
        challenges: |-
          **Desafío opcional**

          * Experimenta cambiando otras propiedades (anchura, altura, rotación, etc.).
      HOC Dance 7_draft_authored_hint:
        validation: |-
          **¿Cómo paso este nivel?**

          * Cambia la tonalidad de por lo menos un bailarín.

          *Este nivel termina después de 8 compases.*
      HOC Dance 8_draft_authored_hint:
        validation: |-
          **¿Cómo paso este nivel?**

          * Se deben cambiar las propiedades de dos o más bailarines.

          *Este nivel termina después de 8 compases.*
      HOC Dance 9_draft_authored_hint:
        validation: |-
          **¿Cómo paso este nivel?**

          * ¡Usa tu creatividad!

          *Este nivel termina después de 8 compases.*
      HOC Dance make group_authored_hint:
        validation: |-
          **¿Cómo paso este nivel?**

          * ¡Usa tu creatividad!

          *Este nivel termina después de 8 compases.*
      Harvesting_authored_hint:
        pointer_harvester_test: "¿Qué tipo de bloque puedo usar para verificar algo
          y tomar una decisión?"
      Inspirational Artwork_authored_hint:
        brush_width: Establecemos el grosor del pincel a 1, luego el color a azul
          antes de hacer cualquier otra cosa.
        double_loop: Intenta colocar un 'bucle para' dentro de un bucle 'repetir '.
        specifics: |-
          El `bucle para` se ejecuta de tres a diecisiete para cada uno de los seis" pétalos "antes de pasar a crear el siguiente, dibujando formas con solo un número impar de lados.
                  
          El bloque `establecer alfa` usa la división para atenuar el color a medida que el contador aumenta.
        after: Cuando hayas terminado con cada "pétalo", asegúrate de "avanzar" 20
          píxeles antes de hacer una rotación de 60 grados.
        solution: |-
          **Solución**


          ![Image of Solution Blocks](https://images.code.org/d85a18bd31a09f87b41a818fc8d6c1cc-image-1469641375258.png)
      MC Agent Freeplay_authored_hint:
        MC_HOC_2017_13_Cole_a: Haz que el Agent construya varios puentes para que
          Alex o Steve puedan caminar más allá de los bordes del mapa.
      MC_HOC_2017_01_Cole_authored_hint:
        MC_HOC_2017_01_Cole_a: Utiliza las flechas direccionales para dirigir al jugador
          hasta la casa. Conseguirás la victoria si terminas en el recuadro naranja.
      MC_HOC_2017_01_RETRY_authored_hint:
        MC_HOC_2017_01_RETRY_a: Arrastra un bloque de "avanzar" de la caja de herramientas
          al espacio de trabajo y colócalo debajo del bloque de "al ejecutar"
        MC_HOC_2017_01_RETRY_b: No te olvides de hacer clic en "Ejecutar" para ejecutar
          el código del Agent.
        MC_HOC_2017_01_RETRY_c: Una vez el Agent haya ejecutado todo su código, podrás
          desplazar al jugador con las flechas direccionales.
      MC_HOC_2017_01_RETRY_2019_authored_hint:
        MC_HOC_2017_01_RETRY_a: Arrastra un bloque de "avanzar" de la caja de herramientas
          al espacio de trabajo y colócalo debajo del bloque de "al ejecutar"
        MC_HOC_2017_01_RETRY_b: No te olvides de hacer clic en "Ejecutar" para ejecutar
          el código del Agent.
        MC_HOC_2017_01_RETRY_c: Una vez el Agent haya ejecutado todo su código, podrás
          desplazar al jugador con las flechas direccionales.
      MC_HOC_2017_02_Cole_authored_hint:
        MC_HOC_2017_02_Cole_a: Haz que el Agent se desplace hacia adelante dos espacios
          para que se sitúe en el plato de presión. Eso abrirá la puerta para tu jugador.
        MC_HOC_2017_02_Cole_b: "¡Pulsa \"Ejecutar\"! \nPuedes ejecutar tu código incluso
          si no es el correcto. Ejecuta y reinicia tu código todas las veces que quieras
          hasta que observes qué es lo que falla."
        MC_HOC_2017_02_Cole_c: Una vez el Agent haya abierto la puerta, utiliza las
          flechas direccionales para mover al jugador por el mapa.
        MC_HOC_2017_02_Cole_d: "¡Asegúrate que el agente está siguiendo el camino
          marcado en el mapa!"
      MC_HOC_2017_02_Cole_2019_authored_hint:
        MC_HOC_2017_02_Cole_a: Haz que el Agent se desplace hacia adelante dos espacios
          para que se sitúe en el plato de presión. Eso abrirá la puerta para tu jugador.
        MC_HOC_2017_02_Cole_b: "¡Pulsa \"Ejecutar\"! \nPuedes ejecutar tu código incluso
          si no es el correcto. Ejecuta y reinicia tu código todas las veces que quieras
          hasta que observes qué es lo que falla."
        MC_HOC_2017_02_Cole_c: Una vez el Agent haya abierto la puerta, utiliza las
          flechas direccionales para mover al jugador por el mapa.
        MC_HOC_2017_02_Cole_d: "¡Asegúrate que el agente está siguiendo el camino
          marcado en el mapa!"
      MC_HOC_2017_02_Will_authored_hint:
        MC_HOC_2017_02_Cole_a: Haz que el Agent se desplace hacia adelante dos espacios
          para que se sitúe en el plato de presión. Eso abrirá la puerta para tu jugador.
        MC_HOC_2017_02_Cole_b: "¡Pulsa \"Ejecutar Agent\"! \nPuedes ejecutar tu código
          incluso si no es el correcto. Ejecuta y reinicia tu código todas las veces
          que quieras hasta que observes qué es lo que falla."
        MC_HOC_2017_02_Cole_c: Una vez el Agent haya abierto la puerta, utiliza las
          flechas direccionales para mover al jugador hasta el recuadro naranja.
      MC_HOC_2017_03_Cole_authored_hint:
        MC_HOC_2017_03_Cole_a: Una vez lleves al Agent al plato de presión, podrás
          utilizar las flechas direccionales para llevar al jugador hasta la brújula.
        MC_HOC_2017_03_Cole_b: ¿Te parece que el código es demasiado largo? Intenta
          utilizar un bucle de "repetición" y comprueba si puedes acortarlo.
      MC_HOC_2017_03_Cole_2019_authored_hint:
        MC_HOC_2017_03_Cole_a: Una vez lleves al Agent al plato de presión, podrás
          utilizar las flechas direccionales para llevar al jugador hasta la brújula.
        MC_HOC_2017_03_Cole_b: ¿Te parece que el código es demasiado largo? Intenta
          utilizar un bucle de "repetición" y comprueba si puedes acortarlo.
      MC_HOC_2017_04POINT5_Cole_authored_hint:
        MC_HOC_2017_04POINT5_Cole_a: |-
          Cruzar estos dos platos de presión aquí hará que se abra un camino para el jugador.
          ![](https://images.code.org/9760c20b83d191570858617f8522ddad-image-1507751553614.50.25.png)
      MC_HOC_2017_04POINT5_RYAN_authored_hint:
        MC_HOC_2017_04POINT5_RYAN_b: Utiliza el bloque de "girar a la derecha" para
          modificar la dirección del Agent.
        MC_HOC_2017_04POINT5_RYAN_a: El Agent solo tiene que llegar al primer plato
          de presión para que Alex o Steve puedan llegar al hacha.
      MC_HOC_2017_04POINT5_RYAN_2019_authored_hint:
        MC_HOC_2017_04POINT5_RYAN_b: Utiliza el bloque de "girar a la derecha" para
          modificar la dirección del Agent.
        MC_HOC_2017_04POINT5_RYAN_a: El Agent solo tiene que llegar al primer plato
          de presión para que Alex o Steve puedan llegar al hacha.
      MC_HOC_2017_04_Cole_authored_hint:
        MC_HOC_2017_04_Cole_a: El Agent tiene que "avanzar" 7 veces. ¿Cómo puedes
          utilizar un bucle de "repetición" para que eso suceda?
        MC_HOC_2017_04_Cole_c: "¡Pulsa \"Ejecutar\"! \nPuedes ejecutar tu código incluso
          si no es el correcto. Ejecuta y reinicia tu código todas las veces que quieras
          hasta que observes qué es lo que falla."
        MC_HOC_2017_04_Cole_b: Una vez el Agent llegue al plato de presión, abrirá
          la puerta para el jugador.
      MC_HOC_2017_04_Cole_2019_authored_hint:
        MC_HOC_2017_04_Cole_a: El Agent tiene que "avanzar" 7 veces. ¿Cómo puedes
          utilizar un bucle de "repetición" para que eso suceda?
        MC_HOC_2017_04_Cole_c: "¡Pulsa \"Ejecutar\"! \nPuedes ejecutar tu código incluso
          si no es el correcto. Ejecuta y reinicia tu código todas las veces que quieras
          hasta que observes qué es lo que falla."
        MC_HOC_2017_04_Cole_b: Una vez el Agent llegue al plato de presión, abrirá
          la puerta para el jugador.
      MC_HOC_2017_05_Cole_authored_hint:
        MC_HOC_2017_05_Cole_a: ¿Sabías que puedes poner más de un elemento de código
          en un bucle? Intenta poner un tablón **y** avanzar dentro de una "repetición"
          para completar este rompecabezas.
        MC_HOC_2017_05_Cole_b: Haz que el Agente cruce el río, construyendo un puente
          mientras vas.
      MC_HOC_2017_05_Cole_2019_authored_hint:
        MC_HOC_2017_05_Cole_a: ¿Sabías que puedes poner más de un elemento de código
          en un bucle? Intenta poner un tablón **y** avanzar dentro de una "repetición"
          para completar este rompecabezas.
        MC_HOC_2017_05_Cole_b: Haz que el Agente cruce el río, construyendo un puente
          mientras vas.
      MC_HOC_2017_05_Josh_authored_hint:
        MC_HOC_2017_05_Cole_a: ¿Sabías que puedes poner más de un elemento de código
          en un bucle? Intenta poner un tablón **y** avanzar dentro de una "repetición"
          para completar este rompecabezas.
      MC_HOC_2017_06_Cole_authored_hint:
        MC_HOC_2017_06_Cole_a: "¿Cuántas veces se ejecuta este bucle? ¿Cuántas veces
          *debería* ejecutarse?"
        MC_HOC_2017_06_Cole_b: "¡Ayuda al Agente a construir un puente a través del
          agua! "
      MC_HOC_2017_06_Cole_2019_authored_hint:
        MC_HOC_2017_06_Cole_a: "¿Cuántas veces se ejecuta este bucle? ¿Cuántas veces
          *debería* ejecutarse?"
        MC_HOC_2017_06_Cole_b: "¡Ayuda al Agente a construir un puente a través del
          agua! "
      MC_HOC_2017_06_Josh_authored_hint:
        MC_HOC_2017_06_Cole_a: ¡Intenta poner más de una instrucción dentro de un
          bucle de "repetición"!
      MC_HOC_2017_07_Cole_authored_hint:
        MC_HOC_2017_07_Cole_c: Todo lo que necesitas que el agente haga es limpiar
          el camino hasta llegar al carro de la mina.
        MC_HOC_2017_07_Cole_a: Para resolver este rompecabezas, intenta averiguar
          para qué sirve la función de "despejar camino" e invócala tantas veces como
          consideres necesario utilizando el pequeño bloque verde de "despejar camino"
          en la caja de herramientas.
        MC_HOC_2017_07_Cole_b: Intenta combinar los bloques de función con otros bloques
          de la caja de herramientas para solucionar este rompecabezas.
      MC_HOC_2017_07_Cole_2019_authored_hint:
        MC_HOC_2017_07_Cole_c: Todo lo que necesitas que el agente haga es limpiar
          el camino hasta llegar al carro de la mina.
        MC_HOC_2017_07_Cole_a: Para resolver este rompecabezas, intenta averiguar
          para qué sirve la función de "despejar camino" e invócala tantas veces como
          consideres necesario utilizando el pequeño bloque verde de "despejar camino"
          en la caja de herramientas.
        MC_HOC_2017_07_Cole_b: Intenta combinar los bloques de función con otros bloques
          de la caja de herramientas para solucionar este rompecabezas.
      MC_HOC_2017_08_RY_authored_hint:
        MC_HOC_2017_08_RY_a: "¡Pulsa \"Ejecutar Agent\"! \nPuedes ejecutar tu código
          incluso si no es el correcto. Ejecuta y reinicia tu código todas las veces
          que quieras hasta que observes qué es lo que falla."
        MC_HOC_2017_08_RY_b: Hay MUCHAS maneras de resolver este rompecabezas. ¡Prueba
          varias!
      MC_HOC_2017_08_Will_authored_hint:
        MC_HOC_2017_08_RY_a: "¡Pulsa \"Ejecutar Agent\"! \nPuedes ejecutar tu código
          incluso si no es el correcto. Ejecuta y reinicia tu código todas las veces
          que quieras hasta que observes qué es lo que falla."
        MC_HOC_2017_08_RY_b: Hay MUCHAS maneras de resolver este rompecabezas. ¡Prueba
          varias!
      MC_HOC_2017_10_Cole_authored_hint:
        MC_HOC_2017_10_Cole_a: "¡Utiliza las funciones para que resolver este rompecabezas
          sea más sencillo!"
      MC_HOC_2017_10_RETRY_authored_hint:
        MC_HOC_2017_10_Cole_b: "¿No sabes a dónde ir? ¡Intenta encontrar la línea
          punteada!"
        MC_HOC_2017_10_Cole_a: "¡Utiliza las funciones para que resolver este rompecabezas
          sea más sencillo!"
      MC_HOC_2017_10_RETRY_2019_authored_hint:
        MC_HOC_2017_10_Cole_b: "¿No sabes a dónde ir? ¡Intenta encontrar la línea
          punteada!"
        MC_HOC_2017_10_Cole_a: "¡Utiliza las funciones para que resolver este rompecabezas
          sea más sencillo!"
      MC_HOC_2017_13_Cole_authored_hint:
        MC_HOC_2017_13_Cole_a: Haz que el Agent construya varios puentes para que
          Alex o Steve puedan caminar más allá de los bordes del mapa.
      MC_HOC_2017_4.5v2_authored_hint:
        MC_HOC_2017_04POINT5_Cole_a: |-
          Cruzar estos dos platos de presión aquí hará que se abra un camino para el jugador.
          ![](https://images.code.org/9760c20b83d191570858617f8522ddad-image-1507751553614.50.25.png)
      MC_HOC_2017_Ali_authored_hint:
        MC_HOC_2017_08_RY_a: "¡Pulsa \"Ejecutar\"! \nPuedes ejecutar tu código incluso
          si no es el correcto. Ejecuta y reinicia tu código todas las veces que quieras
          hasta que observes qué es lo que falla."
        MC_HOC_2017_08_RY_b: Hay MUCHAS maneras de resolver este rompecabezas. ¡Prueba
          varias!
        MC_HOC_2017_08_RY_c: Intenta seguir la línea punteada para un camino simple
          a través de la lava.
      MC_HOC_2017_Ali_2019_authored_hint:
        MC_HOC_2017_08_RY_a: "¡Pulsa \"Ejecutar\"! \nPuedes ejecutar tu código incluso
          si no es el correcto. Ejecuta y reinicia tu código todas las veces que quieras
          hasta que observes qué es lo que falla."
        MC_HOC_2017_08_RY_b: Hay MUCHAS maneras de resolver este rompecabezas. ¡Prueba
          varias!
        MC_HOC_2017_08_RY_c: Intenta seguir la línea punteada para un camino simple
          a través de la lava.
      MC_HOC_2017_FP20x20_authored_hint:
        MC_HOC_2017_13_Cole_a: Haz que el Agent construya varios puentes para que
          Alex o Steve puedan caminar más allá de los bordes del mapa.
      MC_HOC_2017_FP20x20_2019_authored_hint:
        MC_HOC_2017_13_Cole_a: Haz que el Agent construya varios puentes para que
          Alex o Steve puedan caminar más allá de los bordes del mapa.
      NEW Course 4 Artist Functions 13_authored_hint:
        NEW_Course_4_Artist_Functions_13_a: Intenta editar la función de `dibuja una
          línea de cuadrados` para que no tengas que decidirlo dos veces.
        NEW_Course_4_Artist_Functions_13_c: "¿Qué código necesitarías si estás intentando
          hacer una estrella usando líneas regular en vez de cajas?"
      NEW Course 4 Artist Functions 4_authored_hint:
        NEW_Course_4_Artist_Functions_4_a: Tendrás que usar un bloque de `gira a la
          derecha con 120 grados` luego de cada cuadro.
      NEW Course 4 Artist Functions 9_authored_hint:
        NEW_Course_4_Artist_Functions_9_a: Intenta ejecutar el código antes de añadir
          algún bloque. ¿Qué hace que el dibujo se vea un poco mal?
        NEW_Course_4_Artist_Functions_9_b: Si no puedes encontrar exactamente lo que
          está mal, intenta reducirle la velocidad al artista moviendo el control
          deslizante a la izquierda.
      NEW Course 4 Artist Params 11_authored_hint:
        NEW_Course_4_Artist_Params_11_a: Hay más de un número que necesita ser reemplazado
          por una variable dentro de la función.
      NEW Course 4 Artist Params 13_authored_hint:
        NEW_Course_4_Artist_Params_13_a: 'Vas a necesitar dividir el *perímetro* por
          el número de lados para mantener las formas en el mismo tamaño a pesar de
          todo. '
      NEW Course 4 Artist Params inspire_authored_hint:
        brush_width: Establecemos el grosor del pincel a 1, luego el color a azul
          antes de hacer cualquier otra cosa.
        double_loop: Intenta colocar un 'bucle para' dentro de un bucle 'repetir '.
        specifics: |-
          El `bucle para` se ejecuta de tres a diecisiete para cada uno de los seis" pétalos "antes de pasar a crear el siguiente, dibujando formas con solo un número impar de lados.
                  
          El bloque `establecer alfa` usa la división para atenuar el color a medida que el contador aumenta.
        after: Cuando hayas terminado con cada "pétalo", asegúrate de "avanzar" 20
          píxeles antes de hacer una rotación de 60 grados.
        solution: |-
          **Solución**


          <xml>
          <block type="when_run" deletable="false" movable="false">
          <next>
          <block type="draw_width" inline="false">
          <value name="WIDTH">
          <block type="math_number">
          <title name="NUM">1</title>
          </block>
          </value>
          <next>
          <block type="draw_colour" inline="true" id="draw-color">
          <value name="COLOUR">
          <block type="colour_picker">
          <title name="COLOUR">#0000cd</title>
          </block>
          </value>
          <next>
          <block type="controls_repeat_ext" inline="true">
          <value name="TIMES">
          <block type="math_number">
          <title name="NUM">6</title>
          </block>
          </value>
          <statement name="DO">
          <block type="controls_for_counter" inline="true">
          <mutation counter="counter"></mutation>
          <value name="FROM">
          <block type="math_number">
          <title name="NUM">3</title>
          </block>
          </value>
          <value name="TO">
          <block type="math_number">
          <title name="NUM">17</title>
          </block>
          </value>
          <value name="BY">
          <block type="math_number">
          <title name="NUM">2</title>
          </block>
          </value>
          <statement name="DO">
          <block type="alpha" inline="true" id="alpha">
          <value name="VALUE">
          <block type="math_arithmetic" inline="true">
          <title name="OP">DIVIDE</title>
          <value name="A">
          <block type="math_number">
          <title name="NUM">500</title>
          </block>
          </value>
          <value name="B">
          <block type="variables_get">
          <title name="VAR">counter</title>
          </block>
          </value>
          </block>
          </value>
          <next>
          <block type="procedures_callnoreturn" inline="false">
          <mutation name="draw a polygon">
          <arg name="length"></arg>
          <arg name="sides"></arg>
          </mutation>
          <value name="ARG0">
          <block type="math_number">
          <title name="NUM">30</title>
          </block>
          </value>
          <value name="ARG1">
          <block type="variables_get">
          <title name="VAR">counter</title>
          </block>
          </value>
          </block>
          </next>
          </block>
          </statement>
          <next>
          <block type="draw_move" inline="true">
          <title name="DIR">moveForward</title>
          <value name="VALUE">
          <block type="math_number">
          <title name="NUM">20</title>
          </block>
          </value>
          <next>
          <block type="draw_turn" inline="true">
          <title name="DIR">turnRight</title>
          <value name="VALUE">
          <block type="math_number">
          <title name="NUM">60</title>
          </block>
          </value>
          </block>
          </next>
          </block>
          </next>
          </block>
          </statement>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </xml>
      NEW Course 4 Bee For Loops 8_authored_hint:
        NEW_Course_4_Bee_For_Loops_8_a: "Si tu bucle cuenta hacia arriba, el incremento
          es añadido a tu variable de contabilidad cada vez a través. \n\n¿Qué necesitas
          agregarle a cada número para obtener el número tras ese?"
      New Minecraft Hero Project_authored_hint:
        MC_HOC_2017_13_Cole_a: Haz que el Agent construya varios puentes para que
          Alex o Steve puedan caminar más allá de los bordes del mapa.
      Overworld Avoid Monsters_authored_hint:
        mc_8_a: Hay pocos caminos que puede tomar. ¿Cuál es el más corto?
        mc_8_b: Utilice 'repetir' lazos' para simplificar su código.
        mc_8_c: Su meta es entrar en la puerta de la casa en la parte superior de
          la pantalla.
      Overworld Avoid Monsters_2018_authored_hint:
        mc_8_a: Hay pocos caminos que puede tomar. ¿Cuál es el más corto?
        mc_8_b: Utilice 'repetir' lazos' para simplificar su código.
        mc_8_c: Su meta es entrar en la puerta de la casa en la parte superior de
          la pantalla.
      Overworld Avoid Monsters_2019_authored_hint:
        mc_8_a: Hay pocos caminos que puede tomar. ¿Cuál es el más corto?
        mc_8_b: Utilice 'repetir' lazos' para simplificar su código.
        mc_8_c: Su meta es entrar en la puerta de la casa en la parte superior de
          la pantalla.
      Overworld Chop Tree_authored_hint:
        mc_2_a: Usted necesita 'avanzar' dos veces para pararse en frente del árbol.
        mc_2_b: El comando 'destruir bloque' corta el árbol en frente de usted.
      Overworld Chop Tree_2018_authored_hint:
        mc_2_a: Usted necesita 'avanzar' dos veces para pararse en frente del árbol.
        mc_2_b: El comando 'destruir bloque' corta el árbol en frente de usted.
      Overworld Chop Tree_2019_authored_hint:
        mc_2_a: Usted necesita 'avanzar' dos veces para pararse en frente del árbol.
        mc_2_b: El comando 'destruir bloque' corta el árbol en frente de usted.
      Overworld Chop Trees_authored_hint:
        mc_4_a: Puede talar árboles en cualquier orden. ¿Qué camino toma el menor
          número de bloques?
        mc_4_b: El comando 'destruir bloque' corta el árbol en frente de usted.
      Overworld Chop Trees_2018_authored_hint:
        mc_4_a: Puede talar árboles en cualquier orden. ¿Qué camino toma el menor
          número de bloques?
        mc_4_b: El comando 'destruir bloque' corta el árbol en frente de usted.
      Overworld Chop Trees_2019_authored_hint:
        mc_4_a: Puede talar árboles en cualquier orden. ¿Qué camino toma el menor
          número de bloques?
        mc_4_b: El comando 'destruir bloque' corta el árbol en frente de usted.
      Overworld House Frame Chosen_authored_hint:
        mc_6_a: Haga click en la flecha sobre el bloque 'colocar' para escoger lo
          que quiere colocar.
        mc_6_c: Usted puede poner más de un bloque dentro de un lazo 'repetir'.
      Overworld House Frame Chosen_2018_authored_hint:
        mc_6_a: Haga click en la flecha sobre el bloque 'colocar' para escoger lo
          que quiere colocar.
        mc_6_c: Usted puede poner más de un bloque dentro de un lazo 'repetir'.
      Overworld House Frame Chosen_2019_authored_hint:
        mc_6_a: Haga click en la flecha sobre el bloque 'colocar' para escoger lo
          que quiere colocar.
        mc_6_c: Usted puede poner más de un bloque dentro de un lazo 'repetir'.
      Overworld Move to Sheep_authored_hint:
        mc_1_a: El bloque 'avanzar' está en la parte superior del cuadro de herramientas.
        mc_1_b: Asegúrate de que ambos bloques `mover hacia adelante` estén rotos
          al bloque `cuando corre`.
      Overworld Move to Sheep_2018_authored_hint:
        mc_1_a: El bloque 'avanzar' está en la parte superior del cuadro de herramientas.
        mc_1_b: Asegúrate de que ambos bloques `mover hacia adelante` estén rotos
          al bloque `cuando corre`.
      Overworld Move to Sheep_2019_authored_hint:
        mc_1_a: El bloque 'avanzar' está en la parte superior del cuadro de herramientas.
        mc_1_b: Asegúrate de que ambos bloques `mover hacia adelante` estén rotos
          al bloque `cuando corre`.
      Overworld Place Wall_authored_hint:
        mc_5_a: Use primero el bloque 'colocar', y luego el bloque 'mover'.
        mc_5_b: Asegúrese de que ambos bloques están dentro del lazo 'repetir' para
          ejecutar el código más de una vez.
      Overworld Place Wall_2018_authored_hint:
        mc_5_a: Use primero el bloque 'colocar', y luego el bloque 'mover'.
        mc_5_b: Asegúrese de que ambos bloques están dentro del lazo 'repetir' para
          ejecutar el código más de una vez.
      Overworld Place Wall_2019_authored_hint:
        mc_5_a: Use primero el bloque 'colocar', y luego el bloque 'mover'.
        mc_5_b: Asegúrese de que ambos bloques están dentro del lazo 'repetir' para
          ejecutar el código más de una vez.
      Overworld Plant Crops_authored_hint:
        mc_7_a: Use el bloque 'cultivo de plantas' para plantar un cultivo en el espacio
          donde está parado.
        mc_7_b: Ambas franjas de tierra marrón oscuro junto al agua necesitan ser
          llenadas con cultivos.
        mc_7_c: Usted puede poner más de un bloque dentro de un lazo 'repetir'.
      Overworld Plant Crops_2018_authored_hint:
        mc_7_a: Use el bloque 'cultivo de plantas' para plantar un cultivo en el espacio
          donde está parado.
        mc_7_b: Ambas franjas de tierra marrón oscuro junto al agua necesitan ser
          llenadas con cultivos.
        mc_7_c: Usted puede poner más de un bloque dentro de un lazo 'repetir'.
      Overworld Plant Crops_2019_authored_hint:
        mc_7_a: Use el bloque 'cultivo de plantas' para plantar un cultivo en el espacio
          donde está parado.
        mc_7_b: Ambas franjas de tierra marrón oscuro junto al agua necesitan ser
          llenadas con cultivos.
        mc_7_c: Usted puede poner más de un bloque dentro de un lazo 'repetir'.
      Overworld Powered Minecart_authored_hint:
        mc_13_a: Utilice 'colocar riel' para colocar un riel en el cuadro en el que
          está.
        mc_13_b: Utilice los lazos 'repetir' para hacer su código más corto.
      Overworld Powered Minecart_2018_authored_hint:
        mc_13_a: Utilice 'colocar riel' para colocar un riel en el cuadro en el que
          está.
        mc_13_b: Utilice los lazos 'repetir' para hacer su código más corto.
      Overworld Powered Minecart_2019_authored_hint:
        mc_13_a: Utilice 'colocar riel' para colocar un riel en el cuadro en el que
          está.
        mc_13_b: Utilice los lazos 'repetir' para hacer su código más corto.
      Overworld Shear Sheep_authored_hint:
        mc_3_a: El bloque 'esquilar ' obtiene la oveja en frente de usted. ¿Está frente
          a la oveja?
        mc_3_b: Si necesita cambiar la dirección en la que mira, utilice un bloque
          de 'girar'.
        mc_3_c: "¡No tengas miedo de cometer un error! Ejecuta el código para ver
          que pasa, aunque aun no hayas resuelto el rompecabezas.  "
      Overworld Shear Sheep_2018_authored_hint:
        mc_3_a: El bloque 'esquilar ' obtiene la oveja en frente de usted. ¿Está frente
          a la oveja?
        mc_3_b: Si necesita cambiar la dirección en la que mira, utilice un bloque
          de 'girar'.
        mc_3_c: "¡No tengas miedo de cometer un error! Ejecuta el código para ver
          que pasa, aunque aun no hayas resuelto el rompecabezas.  "
      Overworld Shear Sheep_2019_authored_hint:
        mc_3_a: El bloque 'esquilar ' obtiene la oveja en frente de usted. ¿Está frente
          a la oveja?
        mc_3_b: Si necesita cambiar la dirección en la que mira, utilice un bloque
          de 'girar'.
        mc_3_c: "¡No tengas miedo de cometer un error! Ejecuta el código para ver
          que pasa, aunque aun no hayas resuelto el rompecabezas.  "
      Pattern Bee 1_authored_hint:
        conditional_pointer: |-
          Comience por pensar sobre esta parte: ¿ Cuál es la diferencia en cada paso el camino? ¿ Qué tipo de bloque puede usar para tomas una *decisión* sobre si usted está en una flor o en un panal?

          ![](https://images.code.org/a4883ea91c2f879ca1bb281d7944ed87-image-1471477752512.48.07 PM.png)
        turn_at_honeycomb_pointer: Que no sea hacer miel, ¿ve algo diferente que tiene
          que hacer en cada panal?
      Planning Farmer_authored_hint:
        conditional_pointer: |-
          Comience por pensar sobre esta parte: ¿ Cuál es la diferencia en cada paso el camino? ¿ Qué tipo de bloque puede usar para tomas una *decisión* sobre si usted está en una flor o en un panal?

          ![](https://images.code.org/a4883ea91c2f879ca1bb281d7944ed87-image-1471477752512.48.07 PM.png)
        turn_at_honeycomb_pointer: Que no sea hacer miel, ¿ve algo diferente que tiene
          que hacer en cada panal?
      Quantum Bee - Ryan_authored_hint:
        test_hint: Esto es una pista.
      Ryan_Demo_authored_hint:
        validation: |-
          **¿Cómo paso este nivel?**
          * El bailarín tiene que cambiar a un movimiento nuevo después de 4 compases.

          *El nivel termina después de 8 compases.*
      Tortoise and Hare_authored_hint:
        behavior hint: "¡Intenta editar los comportamientos! *¿Qué valor está controlando
          la velocidad de cada sprite?"
      Underground Avoiding Lava_authored_hint:
        mc_11_a: Todo el código está en su lugar para asegurarse de la lava y enfrentarla.
          Todo lo que necesitas hacer es agregar un bloque para moverte.
        mc_11_b: "¿Debería su comando 'avanzar' ir dentro de la instrucción 'if' o
          después?"
      Underground Avoiding Lava_2018_authored_hint:
        mc_11_a: Todo el código está en su lugar para asegurarse de la lava y enfrentarla.
          Todo lo que necesitas hacer es agregar un bloque para moverte.
        mc_11_b: "¿Debería su comando 'avanzar' ir dentro de la instrucción 'if' o
          después?"
      Underground Avoiding Lava_2019_authored_hint:
        mc_11_a: Todo el código está en su lugar para asegurarse de la lava y enfrentarla.
          Todo lo que necesitas hacer es agregar un bloque para moverte.
        mc_11_b: "¿Debería su comando 'avanzar' ir dentro de la instrucción 'if' o
          después?"
      Underground If Statements_authored_hint:
        mc_12_a: Los espacios con puntos rojos son donde usted encontrará Redstone.
        mc_12_b: "¿Puede utilizar un lazo 'repetir' para hacer su código más corto?"
        mc_12_c: 'Usa un argumento `y si` para revisar si hay espacios con lava, entonces
          coloca rocas. '
      Underground If Statements_2018_authored_hint:
        mc_12_a: Los espacios con puntos rojos son donde usted encontrará Redstone.
        mc_12_b: "¿Puede utilizar un lazo 'repetir' para hacer su código más corto?"
        mc_12_c: 'Usa un argumento `y si` para revisar si hay espacios con lava, entonces
          coloca rocas. '
      Underground If Statements_2019_authored_hint:
        mc_12_a: Los espacios con puntos rojos son donde usted encontrará Redstone.
        mc_12_b: "¿Puede utilizar un lazo 'repetir' para hacer su código más corto?"
        mc_12_c: 'Usa un argumento `y si` para revisar si hay espacios con lava, entonces
          coloca rocas. '
      Underground Iron_authored_hint:
        mc_10_a: "¡Los bloques de hierro son los espacios punteados detrás de la antorcha!
          ¿Cómo va a llegar allá?"
        mc_10_b: Cuando está parado el borde de la lava, utilice 'colocar adoquín
          adelante' para un camino seguro.¡Luego, podrá caminar sobre el!
      Underground Iron_2018_authored_hint:
        mc_10_a: "¡Los bloques de hierro son los espacios punteados detrás de la antorcha!
          ¿Cómo va a llegar allá?"
        mc_10_b: Cuando está parado el borde de la lava, utilice 'colocar adoquín
          adelante' para un camino seguro.¡Luego, podrá caminar sobre el!
      Underground Iron_2019_authored_hint:
        mc_10_a: "¡Los bloques de hierro son los espacios punteados detrás de la antorcha!
          ¿Cómo va a llegar allá?"
        mc_10_b: Cuando está parado el borde de la lava, utilice 'colocar adoquín
          adelante' para un camino seguro.¡Luego, podrá caminar sobre el!
      Underground Mining Coal_authored_hint:
        mc_9_a: "¿Está frente al camino correcto? El 'bloque destruir' explota el
          bloque en frente de usted."
        mc_9_b: "¡Las machas negras en el muro son carbón! Utilice 'destruir bloque'
          en estas para minar el carbón."
        mc_9_c: Utilice 'poner antorcha' para poner una antorcha en el espacio donde
          está parado.
      Underground Mining Coal_2018_authored_hint:
        mc_9_a: "¿Está frente al camino correcto? El 'bloque destruir' explota el
          bloque en frente de usted."
        mc_9_b: "¡Las machas negras en el muro son carbón! Utilice 'destruir bloque'
          en estas para minar el carbón."
        mc_9_c: Utilice 'poner antorcha' para poner una antorcha en el espacio donde
          está parado.
      Underground Mining Coal_2019_authored_hint:
        mc_9_a: "¿Está frente al camino correcto? El 'bloque destruir' explota el
          bloque en frente de usted."
        mc_9_b: "¡Las machas negras en el muro son carbón! Utilice 'destruir bloque'
          en estas para minar el carbón."
        mc_9_c: Utilice 'poner antorcha' para poner una antorcha en el espacio donde
          está parado.
      Valentine_artist2_01_authored_hint:
        Valentine_artist2_01_a: Cada lado del pasto es 30 píxeles de largo. Intenta
          usar un patrón de escalones.
        Valentine_artist2_01_b: "¿Ves algún patrón de repetición? Deberías utilizar
          dos bloques 'avanzar' y dos bloques 'doblar' distintos dentro de un bucle. "
        Valentine_artist2_01_c: |-
          Intenta este bucle:

          <xml><block type="controls_repeat">
          <title name="TIMES">8</title>
          <statement name="DO">
          <block type="draw_move_by_constant">
          <title name="DIR">moveForward</title>
          <title name="VALUE">30</title>
          <next>
          <block type="draw_turn_by_constant">
          <title name="DIR">turnRight</title>
          <title name="VALUE">90</title>
          <next>
          <block type="draw_move_by_constant">
          <title name="DIR">moveForward</title>
          <title name="VALUE">30</title>
          <next>
          <block type="draw_turn_by_constant">
          <title name="DIR">turnLeft</title>
          <title name="VALUE">90</title>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </statement>
          </block></xml>
      Valentine_artist_01_authored_hint:
        Valentine_artist_01_a: "¿En qué dirección necesita moverse el artista? ¿Qué
          dirección necesita tener el artista para colocar un nuevo sticker de llama?"
        Valentine_artist_01_b: El artista necesita colocar 10 stickers de llamas y
          girar 90 grados en cada turno.
      Valentine_playlab_01_authored_hint:
        Valentine_playlab_01_a: |-
          Encaja el bloque `actor 1 tiro corazones rojos abajo` en el evento`cuando el actor 1 hace clic`.
          ¡No te olvides de cambiar `izquierda` a` abajo`!
        Valentine_playlab_01_b: Utiliza el bloque "mover el actor 1 a la izquierda"
          haciendo clic en el lugar abajo del evento "cuando haga clic en la flecha
          izquierda".
      aE2_authored_hint:
        aE2_a: Nota que como los pañuelos tienen 20 píxeles de largo, necesitarás
          saltar 20 píxeles antes de iniciar tu siguiente bucle.
      aE3_authored_hint:
        aE3_a: Después de ejecutar su **lazo anidado** de la última etapa, usted necesitará
          saltar hacia atrás hasta el comienzo de la línea.
        aE3_b: |-
          ¡No olvide mover al artista hacia abajo antes de comenzar una nueva fila de figuras!

          Para mover al artista abajo y tenerlo frente a la vía correcta otra vez, asegúrese de que:
          -Gire 90 grados (para ver hacia abajo)
          -Salta 20 píxeles (Para obtener una nueva fila)
          -Girar hacia atrás 90 grados (Para ver hacia la derecha otra vez)
        aE3_c: Cuando este todo listo, sus **lazos anidados** deberían ser de tres
          niveles de repetición.
        aE3_d: Si tu código se vuelve demasiado confuso, siempre puedes hacer clic
          en "volver a empezar" y ¡volver a intentarlo!
      aE3alternate_authored_hint:
        aE3alternate_a: Después de ejecutar su **lazo anidado** de la última etapa,
          usted necesitará saltar hacia atrás hasta el comienzo de la línea.
        aE3alternate_b: |-
          ¡No olvide mover al artista hacia abajo antes de comenzar una nueva fila de figuras!

          Para mover al artista abajo y tenerlo frente a la vía correcta otra vez, asegúrese de que:
          -Gire 90 grados (para ver hacia abajo)
          -Salta 20 píxeles (Para obtener una nueva fila)
          -Girar hacia atrás 90 grados (Para ver hacia la derecha otra vez)
        aE3alternate_c: Cuando este todo listo, sus **lazos anidados** deberían ser
          de tres niveles de repetición.
        aE3alternate_d: Si tu código se vuelve demasiado confuso, siempre puedes hacer
          clic en "volver a empezar" y ¡volver a intentarlo!
      aE3alternateB_authored_hint:
        aE4alternateB_a: Después de ejecutar su **lazo anidado** de la última etapa,
          usted necesitará saltar hacia atrás hasta el comienzo de la línea.
        aE4alternateB_b: |-
          ¡No olvide mover al artista hacia abajo antes de comenzar una nueva fila de figuras!

          Para mover al artista abajo y tenerlo frente a la vía correcta otra vez, asegúrese de que:
          -Gire 90 grados (para ver hacia abajo)
          -Salta 20 píxeles (Para obtener una nueva fila)
          -Girar hacia atrás 90 grados (Para ver hacia la derecha otra vez)
        aE4alternateB_c: Cuando este todo listo, sus **lazos anidados** deberían ser
          de tres niveles de repetición.
        aE4alternateB_d: Si tu código se vuelve demasiado confuso, siempre puedes
          hacer clic en "volver a empezar" y ¡volver a intentarlo!
      aE4_authored_hint:
        aE4_a: Después de ejecutar su **lazo anidado** de la última etapa, usted necesitará
          saltar hacia atrás hasta el comienzo de la línea.
        aE4_b: |-
          ¡No olvide mover al artista hacia abajo antes de comenzar una nueva fila de figuras!

          Para mover al artista abajo y tenerlo frente a la vía correcta otra vez, asegúrese de que:
          -Gire 90 grados (para ver hacia abajo)
          -Salta 20 píxeles (Para obtener una nueva fila)
          -Girar hacia atrás 90 grados (Para ver hacia la derecha otra vez)
        aE4_c: Cuando este todo listo, sus **lazos anidados** deberían ser de tres
          niveles de repetición.
        aE4_d: Si tu código se vuelve demasiado confuso, siempre puedes hacer clic
          en "volver a empezar" y ¡volver a intentarlo!
      aE6_authored_hint:
        aE6_a: |-
          Si hay 180 grados en un semicírculo y en cada lazo el artista hace giros de 3 grados, ¿Cuántas lazos necesitaría usted para dibujar la mitad de un círculo completo?

          **180 ÷ 3 = ?**
      aE7_authored_hint:
        aE7_a: Dibuja la mitad inferior de un círculo y luego la mitad superior de
          un círculo para hacer un segmento.
        aE7_b: Usted necesitará 4 segmentos para completar este rompecabezas.
      aE8_authored_hint:
        aE8_a: "Para hacer un cuadrado desde su línea, usted necesitará: \n\n- dibujar
          la línea - \n- usar la esquina curva\n\nRepita estos pasos 4 veces."
      allHallows2017_authored_hint:
        allHallows2017_a: "¡Cuidado!  ¡GT puede seguirlo detrás en su bicicleta y
          borrar la línea!"
        allHallows2017_g: 'Sarah dice: "¿Tiene frío? Venga siéntese en la esquina...¡Son
          90 grados!"'
        allHallows2017_c: 'Jordyn dice: "¡No se detengan ahora! ¡Continúen!"'
        allHallows2017_d: 'Josh dice: "¡Tendrá que recurrir a sus habilidades de codificación
          para completar este rompecabezas!"'
        allHallows2017_e: 'Dani dice: "No soy buena con los juegos de palabras. ¡Intente
          usar un bloque ''repetir''!"'
        allHallows2017_b: 'Baker dice: "El lápiz de color Chicago sólo funciona en
          la *línea verde*."'
        allHallows2017_f: 'Amy dice: "¡Puede hacerlo! Solo piense fuera de la caja"'
      artistLoopsK2_authored_hint:
        artistLoopsK2_a: Si quiere que el lazo se repita más de 4 veces, usted puede
          cambiar el número en la parte superior del bloque.
      artistLoopsK2gradek_artist_loops3_authored_hint:
        artistLoopsK2_a: Si quiere que el lazo se repita más de 4 veces, usted puede
          cambiar el número en la parte superior del bloque.
      artistLoopsK3_authored_hint:
        artistLoopsK3_a: "¡Intente utilizando lo que ha aprendido acerca de los bloques
          repetir para completar este rompecabezas!"
      artistLoopsK4_authored_hint:
        artistLoopsK4_a: "¿Atorado? Intente ejecutando el código para ver cual bloque
          es el incorrecto."
      artistLoopsK5_authored_hint:
        artistLoopsK5_a: Los 4 bloques iniciales deben ir dentro de tu bloque de repetición
          para resolver este rompecabezas.
      artistLoopsK6_authored_hint:
        artistLoopsK6_a: Intenta ejecutar el código para ver dónde hay un error.
      artistLoopsK7_authored_hint:
        artistLoopsK7_a: "¡Todos los bloques que necesitas para este rompecabezas
          ya están en tu espacio de trabajo!"
      artistLoopsK8_authored_hint:
        artistLoopsK8_a: Intenta ejecutar el código para ver dónde hay un error.
      artistLoopsK9_authored_hint:
        artistLoopsK9_a: "¡Este desafío utiliza CUATRO bucles, uno tras otro!"
      artistLoopsKA_authored_hint:
        artistLoopsKA_a: Usa el bloque de salto para avanzar sin dibujar una línea.
      artistLoopsKB_authored_hint:
        artistLoopsKB_a: Deberían haber 3 bloques dentro del bucle para resolver este
          rompecabezas.
      behaviors 3_authored_hint:
        behavior hint: "¡Intenta editar los comportamientos! *¿Qué valor está controlando
          la velocidad de cada sprite?"
      behaviors 5_authored_hint:
        target hint: Puedes elegir cualquiera de los cuatro juguetes. ¿Cuál quiere
          la mascota?
      behaviors 5a_authored_hint:
        behavior hint: "¡Intenta editar los comportamientos! *¿Qué valor está controlando
          la velocidad de cada sprite?"
      behaviors 6_authored_hint:
        behavior hint: "¡Intenta editar los comportamientos! *¿Qué valor está controlando
          la velocidad de cada sprite?"
      comment_intro_maze_2018_authored_hint:
        courseC_maze_programming4_a: Los comentarios también son útiles cuando otras
          personas intentan leer tu código.
        courseC_maze_programming4_b: 'Agrega un comentario cuando cambies de dirección:
          ¿qué hubiera pasado si hubieras girado en sentido contrario?'
      comment_intro_maze_2018_2019_authored_hint:
        courseC_maze_programming4_a: Los comentarios también son útiles cuando otras
          personas intentan leer tu código.
        courseC_maze_programming4_b: 'Agrega un comentario cuando cambies de dirección:
          ¿qué hubiera pasado si hubieras girado en sentido contrario?'
      course1_artist_loops_challenge1_authored_hint:
        courseA_artist_loops_challenge1_a: "Puede usar bucles como este para crear
          las paredes y el techo. Intenta repetir diferentes bloques . \n\n! [] (https://images.code.org/1581a2f599b501103064fc9864aa964d-image-1491863694560.png)
          \n\nDiseña el tuyo o haz clic en ! [] (https://images.code.org/53090194cea5dbf35ce9e35205156f5d-image-1491864793265.png)
          para algunas ideas!\n"
        courseA_artist_loops_challenge1_b: "![](https://images.code.org/34f3bae38f77f07eaf455188c0b008e5-image-1491864823946.png)"
        courseA_artist_loops_challenge1_c: "![](https://images.code.org/24b208839971803f3f6cd6ae41da56df-image-1491864839734.png)"
        courseA_artist_loops_challenge1_d: "![](https://images.code.org/d3ccefffa0cc77bdd4a597cdb49fc85e-image-1491864847347.png)"
      course1_artist_loops_challenge2_authored_hint:
        harvey_tictactoe: Puedes usar bloques `saltar` para moverte a otros espacios.
      course1_artist_loops_challenge3_authored_hint:
        courseA_artist_loops_challenge2_a: 'Bloques como este: <xml> <block type="simple_move_up_left"/></xml>
          ¡permitirá que tu artista se mueva de forma inclinada!'
        courseA_artist_loops_challenge2_b: "¡Cuando terminas una casa de ave, `salta`
          a la siguiente!"
        courseA_artist_loops_challenge2_c: Necesitarás MUCHOS bloques dentro del bucle
          para este desafío.
      course1_collector_loops_challenge1_authored_hint:
        courseA_collector_loops_challenge1_a: Intenta cambiar los números en cada
          bucle si algo va mal.
        courseA_collector_loops_challenge1_b: No necesitas usar un bucle si solo estás
          haciendo algo una vez.
        courseA_collector_loops_challenge1_c: Hay 6 gemas en el lado derecho de la
          cueva, pero solo necesitas mover y coleccionar 5 veces. ¿Sabes por qué?
      course1_collector_loops_challenge3_authored_hint:
        courseB_collector_loops_challenge1_b: |
          Comience haciendo un bucle en los comandos "mover al sur" y "obtener tesoro".
          <xml>
          <block type="maze_moveSouth"/><next>
          <block type="collector_collect"/></next>
          </xml>
        courseB_collector_loops_challenge1_a: |
          El patrón norte es un poco diferente que el patrón sur.
          <xml>
          <block type="collector_collect"/><next>
          <block type="maze_moveNorth"/></next>next>
          </xml>
        courseB_collector_loops_challenge1_c: |
          Muévete hacia el este dos veces entre cada camino.
          <xml>
            <block type="maze_moveEast"/><next>
            <block type="maze_moveEast"/></next>next>
            </xml>
          Puedes hacer esto con solo 14 bloques. Haga clic para obtener una sugerencia más para ver una solución.
      course1_maze_debugging_challenge1_authored_hint:
        courseA_maze_seq_challenge1_a: Algunos caminos te guiarán al TNT, si vas muy
          lejos.
      course1_maze_debugging_challenge2_authored_hint:
        courseB_maze_seq_challenge2_b: Reorganiza los bloques y toma el camino del
          medio.
      course1_maze_seq_challenge2_authored_hint:
        courseB_maze_seq_challenge1_b: Intenta moverte al oeste para empezar.
      course1_playlab_events_challenge1_authored_hint:
        courseA_playlab_events_challenge1_e: "Finalmente, haz aparecer a Wendel el
          Mago cuando hagas clic en Spiff!\n\n<xml> \n\n  <block type=\"studio_whenSpriteClicked\">\n
          \   <title name=\"SPRITE\">6</title>\n    <next>\n      <block type=\"studio_setSprite\">\n
          \       <title name=\"VALUE\">\"visible\"</title>\n        <title name=\"SPRITE\">7</title>\n
          \     </block>\n    </next>\n  </block></xml>"
      course2_artist_nestedLoops_challenge1_authored_hint:
        courseD_artist_nestedLoops_challenge1_a: Intenta crear un buce anidad para
          crear 4 octágonos. Gira 45 grados para hacer el octágono. Salta, entonces
          gira 90 grados luego de cada uno.
        courseD_artist_nestedLoops_challenge1_b: Añade el código para arrastrar un
          triángulo dentro de tu bucle anidado. Usa giros de 120 grados para tu triángulo.
        courseD_artist_nestedLoops_challenge1_c: |-
          Use un bucle anidado:
          -Repite 8 veces
          -dibuja un octágono
          -dibuja un triángulo
          -salta hacia adelante 50 pixeles
          -gira a la derecha 90 grados
      course2_artist_prog_challenge1_authored_hint:
        courseC_artist_prog_challenge1_a: 'El rectángulo tiene 200 píxeles de ancho
          y 100 píxeles de alto. '
      course2_bee_conditionals_challenge1_authored_hint:
        courseD_bee_conditionals_challenge1_a: "¿Puedes encontrar un camino que llegue
          a cada flor y panal sin golpear ningún árbol? El mejor camino es una espiral.
          \n\n** Puedes resolver esto sin ningún giro a la izquierda. **"
      course2_collector_prog_challenge1_authored_hint:
        courseC_collector_prog_challenge1_a: Puedes usar el comando `collect` más
          a menudo para recolectar el tesoro adicional.
      course2_collector_prog_challenge2_authored_hint:
        courseC_collector_prog_challenge1_a: Puedes usar el comando `collect` más
          a menudo para recolectar el tesoro adicional.
      course2_harvester_loops_challenge1_authored_hint:
        courseC_harvester_loops_challenge1_a: "¡Ni siquiera pienses en intentar esto
          sin bucles!"
        courseC_harvester_loops_challenge1_b: Puedes repetir `mueve hacia adelante`
          y `elige maíz` todas las veces que necesites hacerlo, luego haz `gira a
          la derecha` en cada esquina.
      course2_maze_loops_challenge1_authored_hint:
        courseC_maze_loops_challenge1_c: |-
          Si lo has logrado hasta tan lejos, solo necesitas `girar a la izquierda`, luego `mover hacia adelante` unas pocas veces. ¡No te rindas!

          ![](https://images.code.org/7696c5c16b8ddf1d53436cdc7fb6346d-image-1494101728016.14.34 PM.png)
      course2_maze_programming_challenge2_authored_hint:
        courseC_maze_programming_challenge2_a: "*¡Si me envías hacia atrás, sé muy
          cuidadoso de que me dirija al camino correcto!*"
        courseC_maze_programming_challenge2_b: "¡La solución más corta usa solo 5
          bloques, pero usa el bloque de `repetir!"
      course2_maze_seq_challenge2_authored_hint:
        courseB_maze_seq_challenge1_b: Intenta moverte al oeste para empezar.
      course3_artist_concept_challenge1_authored_hint:
        courseE_artist_concept_challenge1_a: 'El semi-hexágono tiene una ** longitud
          de 30 ** y gira a la derecha por ** 60 grados **.  '
        courseE_artist_concept_challenge1_b: 'El triángulo 2/3 tiene una ** longitud
          de 80 ** y gira a la derecha por ** 120 grados **. '
      course3_bee_functions_challenge1_authored_hint:
        courseE_bee_functions_challenge1_a: |-
          Si el rompecabezas parece desafiante, intenta construir tu función de poco a poco.
          Agregue algunos bloques, luego pruébelo. Agrega más, luego intenta de nuevo. ¡Pronto, llegarás allí!
      course3_bee_functions_challenge2_authored_hint:
        courseE_bee_functions_challenge1_a: |-
          Si el rompecabezas parece desafiante, intenta construir tu función de poco a poco.
          Agregue algunos bloques, luego pruébelo. Agrega más, luego intenta de nuevo. ¡Pronto, llegarás allí!
      course3_bee_functions_challenge3_authored_hint:
        courseF_bee_functions_challenge1_a: Puedes usar las funciones en la caja de
          herramientas para ayudarlo. ¡Puedes invocar una función dentro de la definición
          de otra función!
      course3_bee_functions_challenge4_authored_hint:
        courseF_bee_functions_challenge2_a: |-
          Si hay un camino a la derecha, deberías hacer lo siguiente:
          * Obtén cualquier néctar o haz miel.
          * Gira a la derecha hacia el camino lateral.
          * Muévete hasta final de la ruta lateral.
          * Dobla a la derecha.

          Si repites las acciones anteriores dos veces, estarás listo para retroceder por la ruta principal.

          ** ¡Solo haz clic para obtener otra sugerencia si deseas ver la solución completa! **
      course3_farmer_condLoops_challenge1_authored_hint:
        courseD_farmer_condLoops_challenge1_a: El botón de `PASO` puede ser muy útil
          en este desafío.
      course3_farmer_condLoops_challenge2_authored_hint:
        courseD_farmer_condLoops_challenge2_a: La cantidad de cada vegetal en cada
          espacio varía. Usa bucles "while" para éstos.
      course3_maze_debugging_challenge1_authored_hint:
        courseC_maze_debugging_challenge1_b: El camino de Scrat es la forma de un
          rectángulo! Necesita girar en el mismo sentido cada vez!
        courseC_maze_debugging_challenge1_c: Si te quedas atascado, siempre puedes
          volver a empezar, o eliminar todo el código y encontrar tu propio camino!
      course3_maze_debugging_challenge2_authored_hint:
        courseC_maze_debugging_challenge2_a: Una manera de resolver esto es añadir
          más pasos hacia adelante y entre los turnos.
        courseC_maze_debugging_challenge2_b: "¡Si te estás atorando, siempre puedes
          empezar de nuevo o remover todos los códigos y encontrar tu solución!"
        courseC_maze_debugging_challenge2_c: |-
          Hay dos caminos que puedes seguir al usar `mover hacia adelante`, y solo en cuatro turnos. ¡Si encuentras una manera de usar el bloque `repetir`, puede que hayan incluso más!

          ![](https://images.code.org/8a4665671cda35fea1f629a5bcc39e26-image-1493502743154.48.05 PM.png)
      course4_artist_variables_challenge1_authored_hint:
        courseF_artist_variables_challenge1_c: Para completar el patrón, deberá girar
          a la izquierda dos veces, girar a la derecha dos veces y avanzar un total
          de cuatro veces.
      course4_artist_variables_challenge2_authored_hint:
        courseF_artist_variables_challenge2_a: 'Las variables son útiles ya que usted
          puede sumarlas cada vez mediante un lazo. '
        courseF_artist_variables_challenge2_b: Este rompecabezas tiene un lazo que
          crea un polígono, un lazo que repite el polígono 'lados' veces, luego otro
          lazo que lo hace todo de nuevo después de sumar 5 a 'lados'.
        courseF_artist_variables_challenge2_c: Usar una variable para 'lados' y una
          para 'longitud' hace al código más limpio ya que usted puede reutilizar
          el mismo código múltiples veces, en vez de crear una nueva copia para cada
          conjunto de números.
      course4_bee_fwp_challenge1_authored_hint:
        courseF_bee_fwp_challenge1_b: |-
          Mira cuánto maíz hay disponible para sembrar en cada espacio. ¿Ves el paterno contrario? El parámetro `longitud` debería ser usado para establecer el valor máximo en el `para el bucle`.

          ¡No olvides que el grajero se mueva hacia atrás por el camino principal tras sembrar!
      course4_bee_fwp_challenge2_authored_hint:
        courseF_bee_fwp_challenge2_a: |-
          Comience asegurándose de que entiende cómo funciona esta *supuesta* función. A medida que la agricultora se mueve por cada camino, solo intentará recolectar maíz. En cambio, ¿cómo puedes hacer que revise cada una de las 3 verduras y elegir solo la que encuentra?

          Agregue declaraciones condicionales a la función para buscar maíz, calabazas y lechuga.
      courseA_artist_loops2_authored_hint:
        courseA_artist_loops2_a: ¿No sabes cómo dibujar una línea? Comienza uniendo
          bloques al bloque <xml><block type="when_run"/></xml> para ver qué pasa.
        courseA_artist_loops2_b: Usa este bloque <xml><block type="simple_move_right"/></xml>
          para resolver este rompecabezas.
      courseA_artist_loops2_2018_authored_hint:
        courseA_artist_loops2_a: ¿No sabes cómo dibujar una línea? Comienza uniendo
          bloques al bloque <xml><block type="when_run"/></xml> para ver qué pasa.
        courseA_artist_loops2_b: Usa este bloque <xml><block type="simple_move_right"/></xml>
          para resolver este rompecabezas.
      courseA_artist_loops2_2019_authored_hint:
        courseA_artist_loops2_a: ¿No sabes cómo dibujar una línea? Comienza uniendo
          bloques al bloque <xml><block type="when_run"/></xml> para ver qué pasa.
        courseA_artist_loops2_b: Usa este bloque <xml><block type="simple_move_right"/></xml>
          para resolver este rompecabezas.
      courseA_artist_loops3_authored_hint:
        courseA_artist_loops3_a: Sigue de forma lenta con tu dedo lo que hace tu programa
          para saber donde está el error.
        courseA_artist_loops3_b: |-
          Necesitarás usar un bloque como este para resolver este rompecabezas.

          ![](https://images.code.org/16a3ab2e639eacee18ee5405ed9966dc-image-1498670745551.24.49 AM.png)
      courseA_artist_loops3_2018_authored_hint:
        courseA_artist_loops3_a: Sigue de forma lenta con tu dedo lo que hace tu programa
          para saber donde está el error.
        courseA_artist_loops3_b: |-
          Necesitarás usar un bloque como este para resolver este rompecabezas.

          ![](https://images.code.org/16a3ab2e639eacee18ee5405ed9966dc-image-1498670745551.24.49 AM.png)
      courseA_artist_loops3_2019_authored_hint:
        courseA_artist_loops3_a: Sigue de forma lenta con tu dedo lo que hace tu programa
          para saber donde está el error.
        courseA_artist_loops3_b: |-
          Necesitarás usar un bloque como este para resolver este rompecabezas.

          ![](https://images.code.org/16a3ab2e639eacee18ee5405ed9966dc-image-1498670745551.24.49 AM.png)
      courseA_artist_loops4_authored_hint:
        courseA_artist_loops4_a: Si quiere que el lazo se repita más de 4 veces, usted
          puede cambiar el número en la parte superior del bloque.
        courseA_artist_loops4_b: |-
          Como solo puedes usar un <xml><block type="simple_move_right"/></xml>

          bloque, intenta ponerlo dentro del <xml><block type="controls_repeat_simplified_dropdown"><title name="TIMES" config="2-6">5</title></block></xml> bucle.
      courseA_artist_loops4_2018_authored_hint:
        courseA_artist_loops4_a: Si quiere que el lazo se repita más de 4 veces, usted
          puede cambiar el número en la parte superior del bloque.
        courseA_artist_loops4_b: |-
          Como solo puedes usar un <xml><block type="simple_move_right"/></xml>

          bloque, intenta ponerlo dentro del <xml><block type="controls_repeat_simplified_dropdown"><title name="TIMES" config="2-6">5</title></block></xml> bucle.
      courseA_artist_loops4_2019_authored_hint:
        courseA_artist_loops4_a: Si quiere que el lazo se repita más de 4 veces, usted
          puede cambiar el número en la parte superior del bloque.
        courseA_artist_loops4_b: |-
          Como solo puedes usar un <xml><block type="simple_move_right"/></xml>

          bloque, intenta ponerlo dentro del <xml><block type="controls_repeat_simplified_dropdown"><title name="TIMES" config="2-6">5</title></block></xml> bucle.
      courseA_artist_loops5_authored_hint:
        courseA_artist_loops5_a: ¡Trata de usar lo que aprendiste sobre el bloque
          <xml><block type="controls_repeat_simplified_dropdown"><title name="TIMES"
          config="3-10">???</title></block></xml> para completar este puzzle!
        courseA_artist_loops5_b: Si quiere que el lazo se repita más de 4 veces, usted
          puede cambiar el número en la parte superior del bloque.
        courseA_artist_loops5_c: Ya que solo puedes usar un solo bloque <xml><block
          type="simple_move_right"/></xml>, trata poniéndolo dentro de el repetir
          <xml><block type="controls_repeat_simplified_dropdown"><title name="TIMES"
          config="3-10">???</title></block></xml>.
      courseA_artist_loops5_2018_authored_hint:
        courseA_artist_loops5_a: ¡Trata de usar lo que aprendiste sobre el bloque
          <xml><block type="controls_repeat_simplified_dropdown"><title name="TIMES"
          config="3-10">???</title></block></xml> para completar este puzzle!
        courseA_artist_loops5_b: Si quiere que el lazo se repita más de 4 veces, usted
          puede cambiar el número en la parte superior del bloque.
        courseA_artist_loops5_c: Ya que solo puedes usar un solo bloque <xml><block
          type="simple_move_right"/></xml>, trata poniéndolo dentro de el repetir
          <xml><block type="controls_repeat_simplified_dropdown"><title name="TIMES"
          config="3-10">???</title></block></xml>.
      courseA_artist_loops5_2019_authored_hint:
        courseA_artist_loops5_a: ¡Trata de usar lo que aprendiste sobre el bloque
          <xml><block type="controls_repeat_simplified_dropdown"><title name="TIMES"
          config="3-10">???</title></block></xml> para completar este puzzle!
        courseA_artist_loops5_b: Si quiere que el lazo se repita más de 4 veces, usted
          puede cambiar el número en la parte superior del bloque.
        courseA_artist_loops5_c: Ya que solo puedes usar un solo bloque <xml><block
          type="simple_move_right"/></xml>, trata poniéndolo dentro de el repetir
          <xml><block type="controls_repeat_simplified_dropdown"><title name="TIMES"
          config="3-10">???</title></block></xml>.
      courseA_artist_loops6_authored_hint:
        courseA_artist_loops6_b: Necesitarás 2 bloques en 2 direcciones para resolver
          este acertijo.
      courseA_artist_loops6_2018_authored_hint:
        courseA_artist_loops6_b: Necesitarás 2 bloques en 2 direcciones para resolver
          este acertijo.
      courseA_artist_loops6_2019_authored_hint:
        courseA_artist_loops6_b: Necesitarás 2 bloques en 2 direcciones para resolver
          este acertijo.
      courseA_artist_loops7_authored_hint:
        courseA_artist_loops7_b: Escribe el código ara una ola primero, luego repite
          eso para dibujar los otros dos.
      courseA_artist_loops7_2018_authored_hint:
        courseA_artist_loops7_b: Escribe el código ara una ola primero, luego repite
          eso para dibujar los otros dos.
      courseA_artist_loops7_2019_authored_hint:
        courseA_artist_loops7_b: Escribe el código ara una ola primero, luego repite
          eso para dibujar los otros dos.
      courseA_artist_loops7_forVideo_authored_hint:
        courseA_artist_loops7_b: Escribe el código ara una ola primero, luego repite
          eso para dibujar los otros dos.
      courseA_artist_loops8_authored_hint:
        courseA_artist_loops8_a: Intenta ejecutar el código para ver lo que ha sido
          escrito para ti.
        courseA_artist_loops8_b: "¿Cómo repetirías el código que te han dado?"
        courseA_artist_loops8_c: "¿Qué hace el código?  \n¿Qué se supone que debe
          hacer?  \n¿Qué te dice eso?"
      courseA_artist_loops8_2018_authored_hint:
        courseA_artist_loops8_a: Intenta ejecutar el código para ver lo que ha sido
          escrito para ti.
        courseA_artist_loops8_b: "¿Cómo repetirías el código que te han dado?"
        courseA_artist_loops8_c: "¿Qué hace el código?  \n¿Qué se supone que debe
          hacer?  \n¿Qué te dice eso?"
      courseA_artist_loops8_2019_authored_hint:
        courseA_artist_loops8_a: Intenta ejecutar el código para ver lo que ha sido
          escrito para ti.
        courseA_artist_loops8_b: "¿Cómo repetirías el código que te han dado?"
        courseA_artist_loops8_c: "¿Qué hace el código?  \n¿Qué se supone que debe
          hacer?  \n¿Qué te dice eso?"
      courseA_artist_loops9_authored_hint:
        courseA_artist_loops9_a: Añade otro bloque al código que se te da, para poder
          dibujar el resto de las escaleras.
        courseA_artist_loops9_b: "El bloque que agregas debe ir dentro del \n\n<xml><block
          type=\"controls_repeat_simplified_dropdown\"><title name=\"TIMES\" config=\"3-10\">5</title></block>\n</xml>
          bucle."
        courseA_artist_loops9_c: Si no puedes averiguar en dónde poner el bucle, intenta
          escribiendo tu código paso por paso y mira los patrones.
      courseA_artist_loops9_2018_authored_hint:
        courseA_artist_loops9_a: Añade otro bloque al código que se te da, para poder
          dibujar el resto de las escaleras.
        courseA_artist_loops9_b: "El bloque que agregas debe ir dentro del \n\n<xml><block
          type=\"controls_repeat_simplified_dropdown\"><title name=\"TIMES\" config=\"3-10\">5</title></block>\n</xml>
          bucle."
        courseA_artist_loops9_c: Si no puedes averiguar en dónde poner el bucle, intenta
          escribiendo tu código paso por paso y mira los patrones.
      courseA_artist_loops9_2019_authored_hint:
        courseA_artist_loops9_a: Añade otro bloque al código que se te da, para poder
          dibujar el resto de las escaleras.
        courseA_artist_loops9_b: "El bloque que agregas debe ir dentro del \n\n<xml><block
          type=\"controls_repeat_simplified_dropdown\"><title name=\"TIMES\" config=\"3-10\">5</title></block>\n</xml>
          bucle."
        courseA_artist_loops9_c: Si no puedes averiguar en dónde poner el bucle, intenta
          escribiendo tu código paso por paso y mira los patrones.
      courseA_artist_loops_challenge2_authored_hint:
        courseA_artist_loops_challenge2_a: 'Bloques como este: <xml> <block type="simple_move_up_left"/></xml>
          ¡permitirán que tu artista se mueva de forma inclinada!'
        courseA_artist_loops_challenge2_b: "¡Cuando terminas una casa de ave, `salta`
          a la siguiente!"
        courseA_artist_loops_challenge2_c: Necesitarás MUCHOS bloques dentro del bucle
          para este desafío.
      courseA_artist_loops_challenge2a_authored_hint:
        courseA_artist_loops_challenge2_a: 'Bloques como este: <xml> <block type="simple_move_up_left"/></xml>
          ¡permitirán que tu artista se mueva de forma inclinada!'
        courseA_artist_loops_challenge2_b: "¡Cuando termines una tienda, `salta` dos
          veces hacia arriba para ir a la siguiente!"
        courseA_artist_loops_challenge2_c: Todos tus bloques deberán estar dentro
          de un bucle para finalizar este acertijo.
      courseA_artist_loops_challenge2a_2018_authored_hint:
        courseA_artist_loops_challenge2_a: 'Bloques como este: <xml> <block type="simple_move_up_left"/></xml>
          ¡permitirán que tu artista se mueva de forma inclinada!'
        courseA_artist_loops_challenge2_b: "¡Cuando termines una tienda, `salta` dos
          veces hacia arriba para ir a la siguiente!"
        courseA_artist_loops_challenge2_c: Todos tus bloques deberán estar dentro
          de un bucle para finalizar este acertijo.
      courseA_artist_loops_challenge2a_2019_authored_hint:
        courseA_artist_loops_challenge2_a: 'Bloques como este: <xml> <block type="simple_move_up_left"/></xml>
          ¡permitirán que tu artista se mueva de forma inclinada!'
        courseA_artist_loops_challenge2_b: "¡Cuando termines una tienda, `salta` dos
          veces hacia arriba para ir a la siguiente!"
        courseA_artist_loops_challenge2_c: Todos tus bloques deberán estar dentro
          de un bucle para finalizar este acertijo.
      courseA_artist_loops_challenge3_authored_hint:
        harvey_tictactoe: Puedes usar bloques `saltar` para moverte a otros espacios.
      courseA_bee_seq1_authored_hint:
        courseA_bee_seq1_a: |-
          Usa este bloque para obtener néctar una vez que la abeja encuentre una flor.

          <xml>
          <block type="maze_nectar"/>
          </xml>
      courseA_bee_seq12_authored_hint:
        courseA_bee_seq1_a: |-
          Usa este bloque para obtener néctar una vez que la abeja encuentre una flor.

          <xml>
          <block type="maze_nectar"/>
          </xml>
      courseA_collector_loops1_authored_hint:
        courseA_collector_loops1_a: |-
          Después de haber pasado a un cuadrado con tesoro, usa este bloque para recoger el tesoro.

          <xml>  <block type="collector_collect"/></xml>
        courseA_collector_loops1_b: Una solución simple sería moverte al Este 2 veces,
          luego obtendrás el tesoro.
      courseA_collector_loops1_2018_authored_hint:
        courseA_collector_loops1_a: |-
          Después de haber pasado a un cuadrado con tesoro, usa este bloque para recoger el tesoro.

          <xml>  <block type="collector_collect"/></xml>
        courseA_collector_loops1_b: Una solución simple sería moverte al Este 2 veces,
          luego obtendrás el tesoro.
      courseA_collector_loops1_2019_authored_hint:
        courseA_collector_loops1_a: |-
          Después de haber pasado a un cuadrado con tesoro, usa este bloque para recoger el tesoro.

          <xml>  <block type="collector_collect"/></xml>
        courseA_collector_loops1_b: Una solución simple sería moverte al Este 2 veces,
          luego obtendrás el tesoro.
      courseA_collector_loops2_authored_hint:
        courseA_collector_loops2_a: Tendrás que moverte antes de coleccionar algún
          tesoro.
        courseA_collector_loops2_b: |-
          Después de haber pasado a un cuadrado con tesoro, usa este bloque para recoger el tesoro.

          <xml>  <block type="collector_collect"/></xml>
      courseA_collector_loops2_2018_authored_hint:
        courseA_collector_loops2_a: Tendrás que moverte antes de coleccionar algún
          tesoro.
        courseA_collector_loops2_b: |-
          Después de haber pasado a un cuadrado con tesoro, usa este bloque para recoger el tesoro.

          <xml>  <block type="collector_collect"/></xml>
      courseA_collector_loops2_2019_authored_hint:
        courseA_collector_loops2_a: Tendrás que moverte antes de coleccionar algún
          tesoro.
        courseA_collector_loops2_b: |-
          Después de haber pasado a un cuadrado con tesoro, usa este bloque para recoger el tesoro.

          <xml>  <block type="collector_collect"/></xml>
      courseA_collector_loops3_authored_hint:
        courseA_collector_loops3_a: |-
          Intenta usar lo siguiente:

          <xml><block type="controls_repeat_simplified_dropdown"><title name="TIMES" config="3-10">???</title></block></xml> bucle!
        courseA_collector_loops3_b: |-
          Recuerda, puedes insertar más de 1 bloque:
           <xml><block type="controls_repeat_simplified_dropdown"><title name="TIMES" config="3-10">???</title></block></xml> bucle.
      courseA_collector_loops3_2018_authored_hint:
        courseA_collector_loops3_a: |-
          Intenta usar lo siguiente:

          <xml><block type="controls_repeat_simplified_dropdown"><title name="TIMES" config="3-10">???</title></block></xml> bucle!
        courseA_collector_loops3_b: |-
          Recuerda, puedes insertar más de 1 bloque:
           <xml><block type="controls_repeat_simplified_dropdown"><title name="TIMES" config="3-10">???</title></block></xml> bucle.
      courseA_collector_loops3_2019_authored_hint:
        courseA_collector_loops3_a: |-
          Intenta usar lo siguiente:

          <xml><block type="controls_repeat_simplified_dropdown"><title name="TIMES" config="3-10">???</title></block></xml> bucle!
        courseA_collector_loops3_b: |-
          Recuerda, puedes insertar más de 1 bloque:
           <xml><block type="controls_repeat_simplified_dropdown"><title name="TIMES" config="3-10">???</title></block></xml> bucle.
      courseA_collector_loops4_authored_hint:
        courseA_collector_loops4_a: Para cambiar la distancia que recorre Laurel,
          cambia el número de veces que se ejecutará el bucle.
        courseA_collector_loops4_b: |-
          ¡No olvides que Laurel necesita andar y recoger el tesoro después de terminar el siguiente bucle!
           <xml><block type="controls_repeat_simplified_dropdown"><title name="TIMES" config="3-10">???</title></block></xml>
      courseA_collector_loops4_2018_authored_hint:
        courseA_collector_loops4_a: Para cambiar la distancia que recorre Laurel,
          cambia el número de veces que se ejecutará el bucle.
        courseA_collector_loops4_b: |-
          ¡No olvides que Laurel necesita andar y recoger el tesoro después de terminar el siguiente bucle!
           <xml><block type="controls_repeat_simplified_dropdown"><title name="TIMES" config="3-10">???</title></block></xml>
      courseA_collector_loops4_2019_authored_hint:
        courseA_collector_loops4_a: Para cambiar la distancia que recorre Laurel,
          cambia el número de veces que se ejecutará el bucle.
        courseA_collector_loops4_b: |-
          ¡No olvides que Laurel necesita andar y recoger el tesoro después de terminar el siguiente bucle!
           <xml><block type="controls_repeat_simplified_dropdown"><title name="TIMES" config="3-10">???</title></block></xml>
      courseA_collector_loops5_authored_hint:
        courseA_collector_loops5_a: Si no puedes averiguar la respuesta de inmediato,
          intenta usar un trozo de papel para averiguar qué flechas necesitarás y
          buscar un patrón.
        courseA_collector_loops5_b: Intenta dividir el problema en dos partes, moviéndote
          hacia los lados y hacia abajo.
        courseA_collector_loops5_c: |-
          Para que Laurel se mueva hacia el oeste y pueda recoger el tesoro, seguramente querrás empezar con un bucle como este:
          <xml><block type="controls_repeat_simplified_dropdown"><title name="TIMES" config="3-10">???</title></block></xml>
      courseA_collector_loops5_2018_authored_hint:
        courseA_collector_loops5_a: Si no puedes averiguar la respuesta de inmediato,
          intenta usar un trozo de papel para averiguar qué flechas necesitarás y
          buscar un patrón.
        courseA_collector_loops5_b: Intenta dividir el problema en dos partes, moviéndote
          hacia los lados y hacia abajo.
        courseA_collector_loops5_c: |-
          Para que Laurel se mueva hacia el oeste y pueda recoger el tesoro, seguramente querrás empezar con un bucle como este:
          <xml><block type="controls_repeat_simplified_dropdown"><title name="TIMES" config="3-10">???</title></block></xml>
      courseA_collector_loops5_2019_authored_hint:
        courseA_collector_loops5_a: Si no puedes averiguar la respuesta de inmediato,
          intenta usar un trozo de papel para averiguar qué flechas necesitarás y
          buscar un patrón.
        courseA_collector_loops5_b: Intenta dividir el problema en dos partes, moviéndote
          hacia los lados y hacia abajo.
        courseA_collector_loops5_c: |-
          Para que Laurel se mueva hacia el oeste y pueda recoger el tesoro, seguramente querrás empezar con un bucle como este:
          <xml><block type="controls_repeat_simplified_dropdown"><title name="TIMES" config="3-10">???</title></block></xml>
      courseA_collector_loops6_authored_hint:
        courseA_collector_loops6_a: "¿No puedes averiguar lo que está mal? Intenta
          ejecutar el código un par de veces para ver lo que sucede."
        courseA_collector_loops6_b: "La solución más corta consiste en usar  2 bucles
          seguidos como este:\n <xml><block type=\"controls_repeat_simplified_dropdown\"><title
          name=\"TIMES\" config=\"3-10\">???</title></block></xml> "
      courseA_collector_loops6_2018_authored_hint:
        courseA_collector_loops6_a: "¿No puedes averiguar lo que está mal? Intenta
          ejecutar el código un par de veces para ver lo que sucede."
        courseA_collector_loops6_b: "La solución más corta consiste en usar  2 bucles
          seguidos como este:\n <xml><block type=\"controls_repeat_simplified_dropdown\"><title
          name=\"TIMES\" config=\"3-10\">???</title></block></xml> "
      courseA_collector_loops6_2019_authored_hint:
        courseA_collector_loops6_a: "¿No puedes averiguar lo que está mal? Intenta
          ejecutar el código un par de veces para ver lo que sucede."
        courseA_collector_loops6_b: "La solución más corta consiste en usar  2 bucles
          seguidos como este:\n <xml><block type=\"controls_repeat_simplified_dropdown\"><title
          name=\"TIMES\" config=\"3-10\">???</title></block></xml> "
      courseA_collector_loops7_authored_hint:
        courseA_collector_loops7_a: Si no puedes averiguar lo que viene luego, intenta
          ejecutar el código para ver en donde finaliza Laurel.
      courseA_collector_loops7_2018_authored_hint:
        courseA_collector_loops7_a: Si no puedes averiguar lo que viene luego, intenta
          ejecutar el código para ver en donde finaliza Laurel.
      courseA_collector_loops7_2019_authored_hint:
        courseA_collector_loops7_a: Si no puedes averiguar lo que viene luego, intenta
          ejecutar el código para ver en donde finaliza Laurel.
      courseA_collector_loops8_authored_hint:
        courseA_collector_loops8_a: Si estás teniendo problemas para resolver el acertijo,
          intenta escribir movimientos en una hoja de papel y ver el patrón.
        courseA_collector_loops8_b: Intenta separar el acertijo en 3 problemas separados
          y escribir los bucles para cada uno.
        courseA_collector_loops8_c: Recuerda que puedes escribir con un pedazo de
          el código a la vez, luego presiona "Ejecutar" para saber a dónde necesitas
          ir a partir de aquí.
      courseA_collector_loops8_2018_authored_hint:
        courseA_collector_loops8_a: Si estás teniendo problemas para resolver el acertijo,
          intenta escribir movimientos en una hoja de papel y ver el patrón.
        courseA_collector_loops8_b: Intenta separar el acertijo en 3 problemas separados
          y escribir los bucles para cada uno.
        courseA_collector_loops8_c: Recuerda que puedes escribir con un pedazo de
          el código a la vez, luego presiona "Ejecutar" para saber a dónde necesitas
          ir a partir de aquí.
      courseA_collector_loops8_2019_authored_hint:
        courseA_collector_loops8_a: Si estás teniendo problemas para resolver el acertijo,
          intenta escribir movimientos en una hoja de papel y ver el patrón.
        courseA_collector_loops8_b: Intenta separar el acertijo en 3 problemas separados
          y escribir los bucles para cada uno.
        courseA_collector_loops8_c: Recuerda que puedes escribir con un pedazo de
          el código a la vez, luego presiona "Ejecutar" para saber a dónde necesitas
          ir a partir de aquí.
      courseA_collector_loops9_authored_hint:
        courseA_collector_loops9_a: 'Si no puedes localizar los mejores lugares para
          usar bucles, intenta codificarlo paso a paso y buscar un patrón. '
        courseA_collector_loops9_b: 'Para simplificar tu código, intenta poner dentro
          de un bucle otros dos bucles como este: <xml><block type="controls_repeat_simplified_dropdown"><title
          name="TIMES" config="3-10">???</title></block></xml>'
      courseA_collector_loops9_2018_authored_hint:
        courseA_collector_loops9_a: 'Si no puedes localizar los mejores lugares para
          usar bucles, intenta codificarlo paso a paso y buscar un patrón. '
        courseA_collector_loops9_b: 'Para simplificar tu código, intenta poner dentro
          de un bucle otros dos bucles como este: <xml><block type="controls_repeat_simplified_dropdown"><title
          name="TIMES" config="3-10">???</title></block></xml>'
      courseA_collector_loops9_2019_authored_hint:
        courseA_collector_loops9_a: 'Si no puedes localizar los mejores lugares para
          usar bucles, intenta codificarlo paso a paso y buscar un patrón. '
        courseA_collector_loops9_b: 'Para simplificar tu código, intenta poner dentro
          de un bucle otros dos bucles como este: <xml><block type="controls_repeat_simplified_dropdown"><title
          name="TIMES" config="3-10">???</title></block></xml>'
      courseA_collector_loops_challenge1_authored_hint:
        courseA_collector_loops_challenge1_a: Intenta cambiar los números en cada
          bucle si algo parece ir mal.
        courseA_collector_loops_challenge1_b: No necesitas usar un bucle si solo estás
          haciendo algo una vez.
        courseA_collector_loops_challenge1_c: Hay 6 gemas en el lado derecho de la
          cueva cuando comienzas, pero solo necesitas moverte 5 veces al sur para
          obtener el tesoro. ¿Sabes por qué?
        courseA_collector_loops_challenge1_d: |-
          El programa inicial no recoge las 2 últimas gemas. Intenta conseguirlo añadiendo este código al final:

          <xml><block type="maze_moveEast">
          <next>
          <block type="collector_collect_simplified">
          <next>
          <block type="maze_moveSouth">
          <next>
          <block type="collector_collect"/>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block></xml>
      courseA_collector_loops_challenge1_2018_authored_hint:
        courseA_collector_loops_challenge1_a: Intenta cambiar los números en cada
          bucle si algo parece ir mal.
        courseA_collector_loops_challenge1_b: No necesitas usar un bucle si solo estás
          haciendo algo una vez.
        courseA_collector_loops_challenge1_c: Hay 6 gemas en el lado derecho de la
          cueva cuando comienzas, pero solo necesitas moverte 5 veces al sur para
          obtener el tesoro. ¿Sabes por qué?
        courseA_collector_loops_challenge1_d: |-
          El programa inicial no recoge las 2 últimas gemas. Intenta conseguirlo añadiendo este código al final:

          <xml><block type="maze_moveEast">
          <next>
          <block type="collector_collect_simplified">
          <next>
          <block type="maze_moveSouth">
          <next>
          <block type="collector_collect"/>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block></xml>
      courseA_collector_loops_challenge1_2019_authored_hint:
        courseA_collector_loops_challenge1_a: Intenta cambiar los números en cada
          bucle si algo parece ir mal.
        courseA_collector_loops_challenge1_b: No necesitas usar un bucle si solo estás
          haciendo algo una vez.
        courseA_collector_loops_challenge1_c: Hay 6 gemas en el lado derecho de la
          cueva cuando comienzas, pero solo necesitas moverte 5 veces al sur para
          obtener el tesoro. ¿Sabes por qué?
        courseA_collector_loops_challenge1_d: |-
          El programa inicial no recoge las 2 últimas gemas. Intenta conseguirlo añadiendo este código al final:

          <xml><block type="maze_moveEast">
          <next>
          <block type="collector_collect_simplified">
          <next>
          <block type="maze_moveSouth">
          <next>
          <block type="collector_collect"/>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block></xml>
      courseA_collector_loops_challenge2_authored_hint:
        courseA_collector_loops_challenge2_b: Solo necesitas usar 1 bloque para resolver
          esto.
        courseA_collector_loops_challenge2_a: Puedes moverte hacia atrás el camino
          por una segunda vez antes de moverte al sur.
      courseA_collector_loops_challenge2kp_authored_hint:
        courseA_collector_loops_challenge2kp_b: Intenta este camino para buscar una
          solución.
        courseA_collector_loops_challenge2kp_a: "¿Puedes usar bucles para solucionar
          el problema?"
      courseA_collector_loops_challenge2kp_2018_authored_hint:
        courseA_collector_loops_challenge2kp_b: Intenta este camino para buscar una
          solución.
        courseA_collector_loops_challenge2kp_a: "¿Puedes usar bucles para solucionar
          el problema?"
      courseA_collector_loops_challenge2kp_2019_authored_hint:
        courseA_collector_loops_challenge2kp_b: Intenta este camino para buscar una
          solución.
        courseA_collector_loops_challenge2kp_a: "¿Puedes usar bucles para solucionar
          el problema?"
      courseA_collector_preLoops4_authored_hint:
        courseA_collector_preLoops4_a: |+
          Para recoger el tesoro, intenta colocar, al final del programa, dos bloques (https://images.code.org/2df8a25d7e96207f57d1a6b504950b70-image-1508906116743.34.37.png)
          y luego un bloque (https://images.code.org/563c0deb5c51d43cdfa72d62dec3419d-image-1508904559201.05.30.png). ¡Finalmente, ejecuta el programa presionando en "Run"!

      courseA_collector_preLoops5_authored_hint:
        courseA_collector_preLoops5_a: "¡Necesitarás ir a dos direcciones distintas
          para obtener una sola gema!"
      courseA_collector_preLoops6_authored_hint:
        courseA_collector_preLoops6_a: |-
          Para resolver este rompecabezas, necesitarás utilizar dos  bloques como este:
           ![](https://images.code.org/563c0deb5c51d43cdfa72d62dec3419d-image-1508904559201.05.30.png)
      courseA_collector_preLoops7_authored_hint:
        courseA_collector_loops2_b: |-
          Después de haber pasado a un cuadrado con tesoro, usa este bloque para recoger el tesoro.

          <xml>  <block type="collector_collect"/></xml>
      courseA_harvester_forVideo_authored_hint:
        courseA_harvester_loops3_a: |-
          Para ayudarte, usa un bloque de repetición como este:

          <xml><block type="controls_repeat_simplified_dropdown">
          <title name="TIMES" config="2-10">3</title>
          </block></xml>
      courseA_harvester_loops1_authored_hint:
        courseA_harvester_loops1_a: |-
          ¡Cuando hayas llegado hasta el maíz, usa este bloque para recogerlo!

          <xml><block type="harvester_corn"/></xml>
      courseA_harvester_loops1_2019_authored_hint:
        courseA_harvester_loops1_a: |-
          ¡Cuando hayas llegado hasta el maíz, usa este bloque para recogerlo!

          <xml><block type="harvester_corn"/></xml>
      courseA_harvester_loops2_authored_hint:
        courseA_harvester_loops2_a: |-
          Tu código tendrá **cuatro** bloques `avanza hacia el oeste` como este:
          <xml><block type="maze_moveWest"/></xml>

          y luego **cuatro** bloques `recoge maíz` como este:
          <block type="harvester_corn"/></xml>
      courseA_harvester_loops2_2019_authored_hint:
        courseA_harvester_loops2_a: |-
          Tu código tendrá **cuatro** bloques `avanza hacia el oeste` como este:
          <xml><block type="maze_moveWest"/></xml>

          y luego **cuatro** bloques `recoge maíz` como este:
          <block type="harvester_corn"/></xml>
      courseA_harvester_loops3_authored_hint:
        courseA_harvester_loops3_a: |-
          Para ayudarte, usa un bloque de repetición como este:
          <xml><block type="controls_repeat_simplified_dropdown">
          <title name="TIMES" config="2-10">4</title>
          </block></xml>
      courseA_harvester_loops3_2019_authored_hint:
        courseA_harvester_loops3_a: |-
          Para ayudarte, usa un bloque de repetición como este:
          <xml><block type="controls_repeat_simplified_dropdown">
          <title name="TIMES" config="2-10">4</title>
          </block></xml>
      courseA_maze_ramp2_2018_authored_hint:
        '1': |-
          Your code should look like this:

          <xml>
          <block type="when_run" deletable="false" movable="false">
          <next>
          <block type="maze_moveEast">
          <next>
          <block type="maze_moveEast">
          </block>
          </next>
          </block>
          </next>
          </block>
          </xml>
      courseA_maze_ramp2_2019_authored_hint:
        '1': |-
          Your code should look like this:

          <xml>
          <block type="when_run" deletable="false" movable="false">
          <next>
          <block type="maze_moveEast">
          <next>
          <block type="maze_moveEast">
          </block>
          </next>
          </block>
          </next>
          </block>
          </xml>
      courseA_maze_ramp2a_2018_authored_hint:
        '1': Snap both `East` blocks to the bottom of the `when run` block.
      courseA_maze_ramp3a_2018_authored_hint:
        '1': |
          Your code should look like this:

          <xml>
          <block type="when_run" deletable="false" movable="false">
          <next>
          <block type="maze_moveEast">
          <next>
          <block type="maze_moveEast">
          <next>
          <block type="maze_moveNorth"/>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </xml>
      courseA_maze_ramp3a_2019_authored_hint:
        '1': |
          Your code should look like this:

          <xml>
          <block type="when_run" deletable="false" movable="false">
          <next>
          <block type="maze_moveEast">
          <next>
          <block type="maze_moveEast">
          <next>
          <block type="maze_moveNorth"/>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </xml>
      courseA_maze_ramp3b_2018_authored_hint:
        '1': |
          Your code should look like this:

          <xml>
          <block type="when_run" deletable="false" movable="false">
          <next>
          <block type="maze_moveSouth">
          <next>
          <block type="maze_moveWest">
          <next>
          <block type="maze_moveWest"/>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </xml>
      courseA_maze_ramp3b_2019_authored_hint:
        '1': |
          Your code should look like this:

          <xml>
          <block type="when_run" deletable="false" movable="false">
          <next>
          <block type="maze_moveSouth">
          <next>
          <block type="maze_moveWest">
          <next>
          <block type="maze_moveWest"/>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </xml>
      courseA_maze_ramp4a_2018_authored_hint:
        '1': |-
          Your code should look like this:

          <xml>
          <block type="when_run" deletable="false" movable="false">
          <next>
          <block type="maze_moveEast">
          <next>
          <block type="maze_moveEast">
          <next>
          <block type="maze_moveSouth"/>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </xml>
      courseA_maze_ramp4a_2019_authored_hint:
        '1': |-
          Your code should look like this:

          <xml>
          <block type="when_run" deletable="false" movable="false">
          <next>
          <block type="maze_moveEast">
          <next>
          <block type="maze_moveEast">
          <next>
          <block type="maze_moveSouth"/>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </xml>
      courseA_maze_ramp5a_2018_authored_hint:
        '1': |-
          Your code should look like this:

          <xml>
          <block type="when_run" deletable="false" movable="false">
          <next>
          <block type="maze_moveWest">
          <next>
          <block type="maze_moveWest">
          </block>
          </next>
          </block>
          </next>
          </block>
          </xml>
      courseA_maze_ramp5a_2019_authored_hint:
        '1': |-
          Your code should look like this:

          <xml>
          <block type="when_run" deletable="false" movable="false">
          <next>
          <block type="maze_moveWest">
          <next>
          <block type="maze_moveWest">
          </block>
          </next>
          </block>
          </next>
          </block>
          </xml>
      courseA_maze_seq2_authored_hint:
        courseA_maze_seq2_b: Intenta ejecutar el código primero para ver en donde
          termina el ave. ¿A dónde necesitas ir a partir de ahí?
      courseA_maze_seq2_2018_authored_hint:
        courseA_maze_seq2_b: Intenta ejecutar el código primero para ver en donde
          termina el ave. ¿A dónde necesitas ir a partir de ahí?
      courseA_maze_seq3_authored_hint:
        courseA_maze_seq3_b: Intenta usar el botón secundario para encontrar los lugares
          en donde los programas van mal. ¿Será en el primer lugar? ¿En el segundo?
      courseA_maze_seq3_2018_authored_hint:
        courseA_maze_seq3_b: Intenta usar el botón secundario para encontrar los lugares
          en donde los programas van mal. ¿Será en el primer lugar? ¿En el segundo?
      courseA_maze_seq5_2018_authored_hint:
        '1': Try writing down the steps on paper to find a solution!
        '2': |-
          You will need to use this block:

          <xml><block type="maze_moveSouth"/></xml>
      courseA_maze_seq5_2019_authored_hint:
        '1': Try writing down the steps on paper to find a solution!
        '2': |-
          You will need to use this block:

          <xml><block type="maze_moveSouth"/></xml>
      courseA_maze_seq5a_2018_authored_hint:
        '1': Say the steps out loud and see if it helps you figure out the answer.
      courseA_maze_seq5a_2019_authored_hint:
        '1': Say the steps out loud and see if it helps you figure out the answer.
      courseA_playlab_events_challengeClone_authored_hint:
        courseA_playlab_events_challenge1_e: "Finalmente, haz aparecer a Wendel el
          Mago cuando hagas clic en Spiff!\n\n<xml> \n\n  <block type=\"studio_whenSpriteClicked\">\n
          \   <title name=\"SPRITE\">6</title>\n    <next>\n      <block type=\"studio_setSprite\">\n
          \       <title name=\"VALUE\">\"visible\"</title>\n        <title name=\"SPRITE\">7</title>\n
          \     </block>\n    </next>\n  </block></xml>"
      courseB_Scrat_ramp1_2018_authored_hint:
        '1': If Scrat isn't doing what you want, make sure both of the blocks have
          been fully clicked together, then click "Run" again.
        '2': Don't be afraid to make a mistake! Try something, and if it doesn't work,
          try something else!
      courseB_Scrat_ramp1_2019_authored_hint:
        '1': If Scrat isn't doing what you want, make sure both of the blocks have
          been fully clicked together, then click "Run" again.
        '2': Don't be afraid to make a mistake! Try something, and if it doesn't work,
          try something else!
      courseB_Scrat_ramp2_2018_authored_hint:
        '1': |-
          Your code should look like this:

          <xml>
          <block type="when_run" deletable="false" movable="false">
          <next>
          <block type="maze_moveEast">
          <next>
          <block type="maze_moveEast">
          </block>
          </next>
          </block>
          </next>
          </block>
          </xml>
      courseB_Scrat_ramp2_2019_authored_hint:
        '1': |-
          Your code should look like this:

          <xml>
          <block type="when_run" deletable="false" movable="false">
          <next>
          <block type="maze_moveEast">
          <next>
          <block type="maze_moveEast">
          </block>
          </next>
          </block>
          </next>
          </block>
          </xml>
      courseB_Scrat_ramp3a_2018_authored_hint:
        '1': |
          Your code should look like this:

          <xml>
          <block type="when_run" deletable="false" movable="false">
          <next>
          <block type="maze_moveEast">
          <next>
          <block type="maze_moveEast">
          <next>
          <block type="maze_moveNorth"/>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </xml>
      courseB_Scrat_ramp3a_2019_authored_hint:
        '1': |
          Your code should look like this:

          <xml>
          <block type="when_run" deletable="false" movable="false">
          <next>
          <block type="maze_moveEast">
          <next>
          <block type="maze_moveEast">
          <next>
          <block type="maze_moveNorth"/>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </xml>
      courseB_Scrat_ramp3b_2018_authored_hint:
        '1': |
          Your code should look like this:

          <xml>
          <block type="when_run" deletable="false" movable="false">
          <next>
          <block type="maze_moveSouth">
          <next>
          <block type="maze_moveEast">
          <next>
          <block type="maze_moveEast"/>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </xml>
      courseB_Scrat_ramp3b_2019_authored_hint:
        '1': |
          Your code should look like this:

          <xml>
          <block type="when_run" deletable="false" movable="false">
          <next>
          <block type="maze_moveSouth">
          <next>
          <block type="maze_moveEast">
          <next>
          <block type="maze_moveEast"/>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </xml>
      courseB_Scrat_ramp4a_2018_authored_hint:
        '1': |-
          Your code should look like this:

          <xml>
          <block type="when_run" deletable="false" movable="false">
          <next>
          <block type="maze_moveEast">
          <next>
          <block type="maze_moveEast">
          <next>
          <block type="maze_moveSouth"/>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </xml>
      courseB_Scrat_ramp4a_2019_authored_hint:
        '1': |-
          Your code should look like this:

          <xml>
          <block type="when_run" deletable="false" movable="false">
          <next>
          <block type="maze_moveEast">
          <next>
          <block type="maze_moveEast">
          <next>
          <block type="maze_moveSouth"/>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </xml>
      courseB_Scrat_ramp5a_2018_authored_hint:
        '1': |-
          Your code should look like this:

          <xml>
          <block type="when_run" deletable="false" movable="false">
          <next>
          <block type="maze_moveWest">
          <next>
          <block type="maze_moveWest">
          </block>
          </next>
          </block>
          </next>
          </block>
          </xml>
      courseB_Scrat_ramp5a_2019_authored_hint:
        '1': |-
          Your code should look like this:

          <xml>
          <block type="when_run" deletable="false" movable="false">
          <next>
          <block type="maze_moveWest">
          <next>
          <block type="maze_moveWest">
          </block>
          </next>
          </block>
          </next>
          </block>
          </xml>
      courseB_artist_loops2_authored_hint:
        courseB_artist_loops2_a: Si quiere que el lazo se repita más de 4 veces, usted
          puede cambiar el número en la parte superior del bloque.
      courseB_artist_loops2_2018_authored_hint:
        courseB_artist_loops2_a: Si quiere que el lazo se repita más de 4 veces, usted
          puede cambiar el número en la parte superior del bloque.
      courseB_artist_loops2_2019_authored_hint:
        courseB_artist_loops2_a: Si quiere que el lazo se repita más de 4 veces, usted
          puede cambiar el número en la parte superior del bloque.
      courseB_artist_loops4_authored_hint:
        courseB_artist_loops4_c: No olvides cambiar el número de veces que el bucle
          se repite.
      courseB_artist_loops4_2018_authored_hint:
        courseB_artist_loops4_c: No olvides cambiar el número de veces que el bucle
          se repite.
      courseB_artist_loops4_2019_authored_hint:
        courseB_artist_loops4_c: No olvides cambiar el número de veces que el bucle
          se repite.
      courseB_artist_loops6_authored_hint:
        courseB_artist_loops6_b: Intenta escribir tus movimientos en un pedazo de
          papel y buscar un patrón.
      courseB_artist_loops6_2018_authored_hint:
        courseB_artist_loops6_b: Intenta escribir tus movimientos en un pedazo de
          papel y buscar un patrón.
      courseB_artist_loops6_2019_authored_hint:
        courseB_artist_loops6_b: Intenta escribir tus movimientos en un pedazo de
          papel y buscar un patrón.
      courseB_artist_loops8_authored_hint:
        courseB_artist_loops8_b: Intenta ejecutar el código que se te ha dado para
          ver lo que hace.
      courseB_artist_loops8_2018_authored_hint:
        courseB_artist_loops8_b: Intenta ejecutar el código que se te ha dado para
          ver lo que hace.
      courseB_artist_loops8_2019_authored_hint:
        courseB_artist_loops8_b: Intenta ejecutar el código que se te ha dado para
          ver lo que hace.
      courseB_artist_loops_challenge2_authored_hint:
        courseB_artist_loops_challenge2_b: Puedes usar bloques `saltar` para moverte
          a otros espacios.
      courseB_artist_loops_challenge2_2018_authored_hint:
        courseB_artist_loops_challenge2_b: Puedes usar bloques `saltar` para moverte
          a otros espacios.
      courseB_artist_loops_challenge2_2019_authored_hint:
        courseB_artist_loops_challenge2_b: Puedes usar bloques `saltar` para moverte
          a otros espacios.
      courseB_collector_loops2_authored_hint:
        courseB_collector_loops2_a: Tendrás que moverte antes de coleccionar algún
          tesoro.
      courseB_collector_loops2_2018_authored_hint:
        courseB_collector_loops2_a: Tendrás que moverte antes de coleccionar algún
          tesoro.
      courseB_collector_loops2_2019_authored_hint:
        courseB_collector_loops2_a: Tendrás que moverte antes de coleccionar algún
          tesoro.
      courseB_collector_loops4_authored_hint:
        courseB_collector_loops4_b: Para cambiar la distancia que recorre Laurel,
          cambia el número de veces que se ejecutará el bucle.
      courseB_collector_loops4_2018_authored_hint:
        courseB_collector_loops4_b: Para cambiar la distancia que recorre Laurel,
          cambia el número de veces que se ejecutará el bucle.
      courseB_collector_loops4_2019_authored_hint:
        courseB_collector_loops4_b: Para cambiar la distancia que recorre Laurel,
          cambia el número de veces que se ejecutará el bucle.
      courseB_maze_seq8_authored_hint:
        courseB_maze_seq8_b: "¡Aquí tienes dos caminos para resolver el puzzle!"
      courseB_maze_seq8_2018_authored_hint:
        courseB_maze_seq8_b: "¡Aquí tienes dos caminos para resolver el puzzle!"
      courseB_maze_seq8_2019_authored_hint:
        courseB_maze_seq8_b: "¡Aquí tienes dos caminos para resolver el puzzle!"
      courseC_artist_prog2_authored_hint:
        courseC_artist_prog2_a: Si utiliza el bloque para hacerme 'avanzar 100 píxeles',
          sacaré una línea automáticamente.
        courseC_artist_prog2_b: "¿Tienes problemas girando la esquina? Usa el bloque
          `girar a la derecha 90 grados`."
      courseC_artist_prog2_2018_authored_hint:
        courseC_artist_prog2_a: Si utiliza el bloque para hacerme 'avanzar 100 píxeles',
          sacaré una línea automáticamente.
        courseC_artist_prog2_b: "¿Tienes problemas girando la esquina? Usa el bloque
          `girar a la derecha 90 grados`."
      courseC_artist_prog2_2019_authored_hint:
        courseC_artist_prog2_a: Si utiliza el bloque para hacerme 'avanzar 100 píxeles',
          sacaré una línea automáticamente.
        courseC_artist_prog2_b: "¿Tienes problemas girando la esquina? Usa el bloque
          `girar a la derecha 90 grados`."
      courseC_maze_debugging2_authored_hint:
        courseC_maze_debugging2_c: "¿No puedes averiguar lo que está mal? Intenta
          ejecutar el código un par de veces para ver lo que sucede."
      courseC_maze_debugging2_2018_authored_hint:
        courseC_maze_debugging2_c: "¿No puedes averiguar lo que está mal? Intenta
          ejecutar el código un par de veces para ver lo que sucede."
      courseC_maze_debugging2_2019_authored_hint:
        courseC_maze_debugging2_c: "¿No puedes averiguar lo que está mal? Intenta
          ejecutar el código un par de veces para ver lo que sucede."
      courseC_maze_debugging3_authored_hint:
        courseC_maze_debugging3_b: "¿No puedes averiguar lo que está mal? Intenta
          ejecutar el código un par de veces para ver lo que sucede."
      courseC_maze_debugging3_2018_authored_hint:
        courseC_maze_debugging3_b: "¿No puedes averiguar lo que está mal? Intenta
          ejecutar el código un par de veces para ver lo que sucede."
      courseC_maze_debugging3_2019_authored_hint:
        courseC_maze_debugging3_b: "¿No puedes averiguar lo que está mal? Intenta
          ejecutar el código un par de veces para ver lo que sucede."
      courseC_maze_loops6_authored_hint:
        courseC_maze_loops6_b: Para poner muchos bloques dentro de un bucle 'repetir',
          simplemente arrastra un bucle hacia el espacio de trabajo, luego arrastra
          todos los bloques desde el programa de inicio dentro de él!
      courseC_maze_loops7_authored_hint:
        courseC_maze_loops7_a: Si el patrón es difícil de ver, intenta programarlo
          todo primero y ve qué cosas se repiten una y otra vez antes de colocar los
          bucles.
      courseC_maze_programming6_authored_hint:
        courseC_maze_programming6_a: "¡Aquí tienes dos caminos para resolver el puzzle!"
      courseC_maze_programming6_2018_authored_hint:
        courseC_maze_programming6_a: "¡Aquí tienes dos caminos para resolver el puzzle!"
      courseC_maze_programming6_2019_authored_hint:
        courseC_maze_programming6_a: "¡Aquí tienes dos caminos para resolver el puzzle!"
      courseD_artist_5_2018_authored_hint:
        '1': If you are switching your shapes, don't forget that you will need to
          switch their angles, too!
      courseD_artist_5_2018_2019_authored_hint:
        '1': If you are switching your shapes, don't forget that you will need to
          switch their angles, too!
      courseD_artist_functions2_authored_hint:
        courseD_artist_functions2_a: |-
          Tu programa deberá:
          - Usar función
          - Mover hacia adelante 100 + 75 píxeles
          - Usar función
      courseD_artist_nestedLoops3_authored_hint:
        courseD_artist_nestedLoops3_a: Utilice el bloque 'salto adelante' llegar desde
          la parte superior de una plaza el lugar donde se iniciará la siguiente.
          Si sus plazas son 20 píxeles de alto y 20 píxeles apartes, ¿cuánto necesita
          saltar?
      courseD_artist_nestedLoops3_2018_authored_hint:
        courseD_artist_nestedLoops3_a: Utilice el bloque 'salto adelante' llegar desde
          la parte superior de una plaza el lugar donde se iniciará la siguiente.
          Si sus plazas son 20 píxeles de alto y 20 píxeles apartes, ¿cuánto necesita
          saltar?
      courseD_artist_nestedLoops3_2019_authored_hint:
        courseD_artist_nestedLoops3_a: Utilice el bloque 'salto adelante' llegar desde
          la parte superior de una plaza el lugar donde se iniciará la siguiente.
          Si sus plazas son 20 píxeles de alto y 20 píxeles apartes, ¿cuánto necesita
          saltar?
      courseD_bee_conditionals8_authored_hint:
        courseD_bee_conditionals8_a: |-
          ** Recuerda: ** Este puzzle cambia cada vez que se ejecuta.

          Querras usar un bloque condicional (`Si` o` Si /si no`) para resolver el desafío.
      courseD_bee_conditionals8_2018_authored_hint:
        courseD_bee_conditionals8_a: |-
          ** Recuerda: ** Este puzzle cambia cada vez que se ejecuta.

          Querras usar un bloque condicional (`Si` o` Si /si no`) para resolver el desafío.
      courseD_bee_conditionals8_2019_authored_hint:
        courseD_bee_conditionals8_a: |-
          ** Recuerda: ** Este puzzle cambia cada vez que se ejecuta.

          Querras usar un bloque condicional (`Si` o` Si /si no`) para resolver el desafío.
      courseD_maze_ramp6_authored_hint:
        courseC_maze_programming6_a: "¡Aquí tienes dos caminos para resolver el puzzle!"
      courseD_scrat_ramp7_authored_hint:
        courseD_scrat_programming6_a: "¡Aquí tienes dos caminos para resolver el puzzle!"
      courseD_scrat_ramp7_2018_authored_hint:
        courseD_scrat_programming6_a: "¡Aquí tienes dos caminos para resolver el puzzle!"
      courseE_artist_concept_challenge1_authored_hint:
        courseE_artist_concept_challenge1_a: 'El semi-hexágono tiene una ** longitud
          de 30 ** y gira a la derecha por ** 60 grados **.  '
        courseE_artist_concept_challenge1_b: 'El triángulo 2/3 tiene una ** longitud
          de 80 ** y gira a la derecha por ** 120 grados **. '
      courseE_artist_concept_challenge1_2018_authored_hint:
        courseE_artist_concept_challenge1_a: 'El semi-hexágono tiene una ** longitud
          de 30 ** y gira a la derecha por ** 60 grados **.  '
        courseE_artist_concept_challenge1_b: 'El triángulo 2/3 tiene una ** longitud
          de 80 ** y gira a la derecha por ** 120 grados **. '
      courseE_artist_concept_challenge1_2019_authored_hint:
        courseE_artist_concept_challenge1_a: 'El semi-hexágono tiene una ** longitud
          de 30 ** y gira a la derecha por ** 60 grados **.  '
        courseE_artist_concept_challenge1_b: 'El triángulo 2/3 tiene una ** longitud
          de 80 ** y gira a la derecha por ** 120 grados **. '
      courseE_artist_functions1_authored_hint:
        courseE_artist_functions1_a: Los cuadrados tienen 100 píxeles de lado cada
          uno, lo que significa que te habrás movido 175 píxeles hacia adelante antes
          de dibijar el segundo cuadrado.
        courseE_artist_functions1_b: Está bien dibujar líneas superpuestas para realizar
          los anteojos.
      courseE_artist_functions1_2018_authored_hint:
        courseE_artist_functions1_a: Los cuadrados tienen 100 píxeles de lado cada
          uno, lo que significa que te habrás movido 175 píxeles hacia adelante antes
          de dibijar el segundo cuadrado.
        courseE_artist_functions1_b: Está bien dibujar líneas superpuestas para realizar
          los anteojos.
      courseE_artist_functions2_authored_hint:
        courseD_artist_functions2_a: |-
          Tu programa deberá:
          - Usar función
          - Mover hacia adelante 100 + 75 píxeles
          - Usar función
      courseE_artist_functions2_2018_authored_hint:
        courseD_artist_functions2_a: |-
          Tu programa deberá:
          - Usar función
          - Mover hacia adelante 100 + 75 píxeles
          - Usar función
      courseE_artist_functions2_2019_authored_hint:
        courseD_artist_functions2_a: |-
          Tu programa deberá:
          - Usar función
          - Mover hacia adelante 100 + 75 píxeles
          - Usar función
      courseE_bee_functions6_authored_hint:
        courseE_bee_functions6_a: |-
          Si el rompecabezas parece desafiante, intenta construir tu función de poco a poco
          Agrega algunos bloques, luego pruébalo. Agrega más, luego intenta de nuevo. ¡Pronto, lo lograras!
          ![](https://images.code.org/3875224b35889000a0998ca25cfa4ecf-image-1467996493914.gif)
      courseE_bee_functions6_2018_authored_hint:
        courseE_bee_functions6_a: |-
          Si el rompecabezas parece desafiante, intenta construir tu función de poco a poco
          Agrega algunos bloques, luego pruébalo. Agrega más, luego intenta de nuevo. ¡Pronto, lo lograras!
          ![](https://images.code.org/3875224b35889000a0998ca25cfa4ecf-image-1467996493914.gif)
      courseE_bee_functions6test_authored_hint:
        courseE_bee_functions6_a: |-
          Si el rompecabezas parece desafiante, intenta construir tu función de poco a poco
          Agrega algunos bloques, luego pruébalo. Agrega más, luego intenta de nuevo. ¡Pronto, lo lograras!
          ![](https://images.code.org/3875224b35889000a0998ca25cfa4ecf-image-1467996493914.gif)
      courseE_bee_functions7_authored_hint:
        courseE_bee_functions7_a: |-
          Si el rompecabezas parece desafiante, intenta construir tu función de poco a poco.
          Agregue algunos bloques, luego pruébelo. Agrega más, luego intenta de nuevo. ¡Pronto, llegarás allí!
        courseE_bee_functions7_b: |-
          Recuerda construir tu código dentro del bloque de función verde.
          ![](https://images.code.org/8fe1fae5caf4ede3a9c9bd9f26940cde-image-1467996837459.gif)
      courseE_bee_functions7_2018_authored_hint:
        courseE_bee_functions7_a: |-
          Si el rompecabezas parece desafiante, intenta construir tu función de poco a poco.
          Agregue algunos bloques, luego pruébelo. Agrega más, luego intenta de nuevo. ¡Pronto, llegarás allí!
        courseE_bee_functions7_b: |-
          Recuerda construir tu código dentro del bloque de función verde.
          ![](https://images.code.org/8fe1fae5caf4ede3a9c9bd9f26940cde-image-1467996837459.gif)
      courseE_bee_functions_challenge1_authored_hint:
        courseE_bee_functions_challenge1_a: |-
          Si el rompecabezas parece desafiante, intenta construir tu función de poco a poco.
          Agregue algunos bloques, luego pruébelo. Agrega más, luego intenta de nuevo. ¡Pronto, llegarás allí!
      courseE_bee_functions_challenge1_2018_authored_hint:
        courseE_bee_functions_challenge1_a: |-
          Si el rompecabezas parece desafiante, intenta construir tu función de poco a poco.
          Agregue algunos bloques, luego pruébelo. Agrega más, luego intenta de nuevo. ¡Pronto, llegarás allí!
      courseE_bee_functions_challenge2_authored_hint:
        courseE_bee_functions_challenge1_a: |-
          Si el rompecabezas parece desafiante, intenta construir tu función de poco a poco.
          Agregue algunos bloques, luego pruébelo. Agrega más, luego intenta de nuevo. ¡Pronto, llegarás allí!
      courseE_bee_functions_challenge2_2018_authored_hint:
        courseE_bee_functions_challenge1_a: |-
          Si el rompecabezas parece desafiante, intenta construir tu función de poco a poco.
          Agregue algunos bloques, luego pruébelo. Agrega más, luego intenta de nuevo. ¡Pronto, llegarás allí!
      courseE_farmer_concept4_authored_hint:
        4-5_Artist_Patterns_3_a: Ten cuidado de sacar el bloque completo de "código
          de la barra de herramientas cada vez que pruebas uno nuevo.
        4-5_Artist_Patterns_3_b: Si tu código se vuelve demasiado confuso, siempre
          puedes hacer clic en "volver a empezar" y ¡volver a intentarlo!
      courseE_maze_ramp6_authored_hint:
        courseC_maze_programming6_a: "¡Aquí tienes dos caminos para resolver el puzzle!"
      courseE_maze_ramp6_2018_authored_hint:
        courseC_maze_programming6_a: "¡Aquí tienes dos caminos para resolver el puzzle!"
      courseF_artist_for4_authored_hint:
        courseF_artist_for4_a: |-
          ** ¿Cuál es el número más pequeño que necesitará?
          ¿Cuál es el número más grande?
          ¿Qué tan grande es el aumento en cada ocasión? **

          Esas son las preguntas que debe realizar para completar los espacios en blanco del ciclo `para`.
      courseF_artist_for4_2018_authored_hint:
        courseF_artist_for4_a: |-
          ** ¿Cuál es el número más pequeño que necesitará?
          ¿Cuál es el número más grande?
          ¿Qué tan grande es el aumento en cada ocasión? **

          Esas son las preguntas que debe realizar para completar los espacios en blanco del ciclo `para`.
      courseF_artist_for4_2019_authored_hint:
        courseF_artist_for4_a: |-
          ** ¿Cuál es el número más pequeño que necesitará?
          ¿Cuál es el número más grande?
          ¿Qué tan grande es el aumento en cada ocasión? **

          Esas son las preguntas que debe realizar para completar los espacios en blanco del ciclo `para`.
      courseF_artist_for_challenge1_authored_hint:
        courseF_artist_for_challenge1_a: El 'ancho de pluma' es 1. El primer cuadro
          tiene 50 de píxeles de lado, y cada cuadrado es 50 píxeles más amplio que
          el anterior.
        courseF_artist_for_challenge1_b: La opacidad en el pincel siempre es `contador`
          / 2.
        courseF_artist_for_challenge1_c: Después de hacer cada cuadrado, no te olvides
          de moverte hacia atrás, girar, moverte de nuevo, ¡y luego retroceder!
        courseF_artist_for_challenge1_d: |-
          **Solución:**

          <xml>
          <block type="when_run" deletable="false" movable="false">
          <next>
          <block type="draw_width" inline="false">
          <value name="WIDTH">
          <block type="math_number">
          <title name="NUM">1</title>
          </block>
          </value>
          <next>
          <block type="draw_colour" inline="true" id="draw-color">
          <value name="COLOUR">
          <block type="colour_picker">
          <title name="COLOUR">#0000cd</title>
          </block>
          </value>
          <next>
          <block type="controls_for_counter" inline="true">
          <mutation counter="counter"></mutation>
          <value name="FROM">
          <block type="math_number">
          <title name="NUM">50</title>
          </block>
          </value>
          <value name="TO">
          <block type="math_number">
          <title name="NUM">350</title>
          </block>
          </value>
          <value name="BY">
          <block type="math_number">
          <title name="NUM">50</title>
          </block>
          </value>
          <statement name="DO">
          <block type="alpha" inline="true" id="alpha">
          <value name="VALUE">
          <block type="math_arithmetic" inline="true">
          <title name="OP">DIVIDE</title>
          <value name="A">
          <block type="variables_get">
          <title name="VAR">counter</title>
          </block>
          </value>
          <value name="B">
          <block type="math_number">
          <title name="NUM">2</title>
          </block>
          </value>
          </block>
          </value>
          <next>
          <block type="controls_repeat_ext" inline="true">
          <value name="TIMES">
          <block type="math_number">
          <title name="NUM">4</title>
          </block>
          </value>
          <statement name="DO">
          <block type="draw_move" inline="true">
          <title name="DIR">moveForward</title>
          <value name="VALUE">
          <block type="variables_get">
          <title name="VAR">counter</title>
          </block>
          </value>
          <next>
          <block type="draw_turn" inline="true">
          <title name="DIR">turnRight</title>
          <value name="VALUE">
          <block type="math_number">
          <title name="NUM">90</title>
          </block>
          </value>
          </block>
          </next>
          </block>
          </statement>
          <next>
          <block type="jump" inline="true">
          <title name="DIR">jumpBackward</title>
          <value name="VALUE">
          <block type="math_number">
          <title name="NUM">25</title>
          </block>
          </value>
          <next>
          <block type="draw_turn" inline="true">
          <title name="DIR">turnRight</title>
          <value name="VALUE">
          <block type="math_number">
          <title name="NUM">90</title>
          </block>
          </value>
          <next>
          <block type="jump" inline="true">
          <title name="DIR">jumpBackward</title>
          <value name="VALUE">
          <block type="math_number">
          <title name="NUM">25</title>
          </block>
          </value>
          <next>
          <block type="draw_turn" inline="true">
          <title name="DIR">turnLeft</title>
          <value name="VALUE">
          <block type="math_number">
          <title name="NUM">90</title>
          </block>
          </value>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </statement>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </xml>
      courseF_artist_for_challenge1_2018_authored_hint:
        courseF_artist_for_challenge1_a: El 'ancho de pluma' es 1. El primer cuadro
          tiene 50 de píxeles de lado, y cada cuadrado es 50 píxeles más amplio que
          el anterior.
        courseF_artist_for_challenge1_b: La opacidad en el pincel siempre es `contador`
          / 2.
        courseF_artist_for_challenge1_c: Después de hacer cada cuadrado, no te olvides
          de moverte hacia atrás, girar, moverte de nuevo, ¡y luego retroceder!
        courseF_artist_for_challenge1_d: |-
          **Solución:**

          <xml>
          <block type="when_run" deletable="false" movable="false">
          <next>
          <block type="draw_width" inline="false">
          <value name="WIDTH">
          <block type="math_number">
          <title name="NUM">1</title>
          </block>
          </value>
          <next>
          <block type="draw_colour" inline="true" id="draw-color">
          <value name="COLOUR">
          <block type="colour_picker">
          <title name="COLOUR">#0000cd</title>
          </block>
          </value>
          <next>
          <block type="controls_for_counter" inline="true">
          <mutation counter="counter"></mutation>
          <value name="FROM">
          <block type="math_number">
          <title name="NUM">50</title>
          </block>
          </value>
          <value name="TO">
          <block type="math_number">
          <title name="NUM">350</title>
          </block>
          </value>
          <value name="BY">
          <block type="math_number">
          <title name="NUM">50</title>
          </block>
          </value>
          <statement name="DO">
          <block type="alpha" inline="true" id="alpha">
          <value name="VALUE">
          <block type="math_arithmetic" inline="true">
          <title name="OP">DIVIDE</title>
          <value name="A">
          <block type="variables_get">
          <title name="VAR">counter</title>
          </block>
          </value>
          <value name="B">
          <block type="math_number">
          <title name="NUM">2</title>
          </block>
          </value>
          </block>
          </value>
          <next>
          <block type="controls_repeat_ext" inline="true">
          <value name="TIMES">
          <block type="math_number">
          <title name="NUM">4</title>
          </block>
          </value>
          <statement name="DO">
          <block type="draw_move" inline="true">
          <title name="DIR">moveForward</title>
          <value name="VALUE">
          <block type="variables_get">
          <title name="VAR">counter</title>
          </block>
          </value>
          <next>
          <block type="draw_turn" inline="true">
          <title name="DIR">turnRight</title>
          <value name="VALUE">
          <block type="math_number">
          <title name="NUM">90</title>
          </block>
          </value>
          </block>
          </next>
          </block>
          </statement>
          <next>
          <block type="jump" inline="true">
          <title name="DIR">jumpBackward</title>
          <value name="VALUE">
          <block type="math_number">
          <title name="NUM">25</title>
          </block>
          </value>
          <next>
          <block type="draw_turn" inline="true">
          <title name="DIR">turnRight</title>
          <value name="VALUE">
          <block type="math_number">
          <title name="NUM">90</title>
          </block>
          </value>
          <next>
          <block type="jump" inline="true">
          <title name="DIR">jumpBackward</title>
          <value name="VALUE">
          <block type="math_number">
          <title name="NUM">25</title>
          </block>
          </value>
          <next>
          <block type="draw_turn" inline="true">
          <title name="DIR">turnLeft</title>
          <value name="VALUE">
          <block type="math_number">
          <title name="NUM">90</title>
          </block>
          </value>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </statement>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </xml>
      courseF_artist_for_challenge1_2019_authored_hint:
        courseF_artist_for_challenge1_a: El 'ancho de pluma' es 1. El primer cuadro
          tiene 50 de píxeles de lado, y cada cuadrado es 50 píxeles más amplio que
          el anterior.
        courseF_artist_for_challenge1_b: La opacidad en el pincel siempre es `contador`
          / 2.
        courseF_artist_for_challenge1_c: Después de hacer cada cuadrado, no te olvides
          de moverte hacia atrás, girar, moverte de nuevo, ¡y luego retroceder!
        courseF_artist_for_challenge1_d: |-
          **Solución:**

          <xml>
          <block type="when_run" deletable="false" movable="false">
          <next>
          <block type="draw_width" inline="false">
          <value name="WIDTH">
          <block type="math_number">
          <title name="NUM">1</title>
          </block>
          </value>
          <next>
          <block type="draw_colour" inline="true" id="draw-color">
          <value name="COLOUR">
          <block type="colour_picker">
          <title name="COLOUR">#0000cd</title>
          </block>
          </value>
          <next>
          <block type="controls_for_counter" inline="true">
          <mutation counter="counter"></mutation>
          <value name="FROM">
          <block type="math_number">
          <title name="NUM">50</title>
          </block>
          </value>
          <value name="TO">
          <block type="math_number">
          <title name="NUM">350</title>
          </block>
          </value>
          <value name="BY">
          <block type="math_number">
          <title name="NUM">50</title>
          </block>
          </value>
          <statement name="DO">
          <block type="alpha" inline="true" id="alpha">
          <value name="VALUE">
          <block type="math_arithmetic" inline="true">
          <title name="OP">DIVIDE</title>
          <value name="A">
          <block type="variables_get">
          <title name="VAR">counter</title>
          </block>
          </value>
          <value name="B">
          <block type="math_number">
          <title name="NUM">2</title>
          </block>
          </value>
          </block>
          </value>
          <next>
          <block type="controls_repeat_ext" inline="true">
          <value name="TIMES">
          <block type="math_number">
          <title name="NUM">4</title>
          </block>
          </value>
          <statement name="DO">
          <block type="draw_move" inline="true">
          <title name="DIR">moveForward</title>
          <value name="VALUE">
          <block type="variables_get">
          <title name="VAR">counter</title>
          </block>
          </value>
          <next>
          <block type="draw_turn" inline="true">
          <title name="DIR">turnRight</title>
          <value name="VALUE">
          <block type="math_number">
          <title name="NUM">90</title>
          </block>
          </value>
          </block>
          </next>
          </block>
          </statement>
          <next>
          <block type="jump" inline="true">
          <title name="DIR">jumpBackward</title>
          <value name="VALUE">
          <block type="math_number">
          <title name="NUM">25</title>
          </block>
          </value>
          <next>
          <block type="draw_turn" inline="true">
          <title name="DIR">turnRight</title>
          <value name="VALUE">
          <block type="math_number">
          <title name="NUM">90</title>
          </block>
          </value>
          <next>
          <block type="jump" inline="true">
          <title name="DIR">jumpBackward</title>
          <value name="VALUE">
          <block type="math_number">
          <title name="NUM">25</title>
          </block>
          </value>
          <next>
          <block type="draw_turn" inline="true">
          <title name="DIR">turnLeft</title>
          <value name="VALUE">
          <block type="math_number">
          <title name="NUM">90</title>
          </block>
          </value>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </statement>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </xml>
      courseF_artist_for_challenge2_authored_hint:
        courseF_artist_for_challenge2_c: 'El `control de flujo` va de 5 a 250 por
          2. '
        courseF_artist_for_challenge2_a: El cambio de color ocurre utilizando el bloque
          'definir color con rojo, verde, azul'. Rojo es la constante definida como
          255, verde  es siempre el valor de 'contador', y azul es siempre '255-contador'.
      courseF_artist_for_challenge2_2018_authored_hint:
        courseF_artist_for_challenge2_c: 'El `control de flujo` va de 5 a 250 por
          2. '
        courseF_artist_for_challenge2_a: El cambio de color ocurre utilizando el bloque
          'definir color con rojo, verde, azul'. Rojo es la constante definida como
          255, verde  es siempre el valor de 'contador', y azul es siempre '255-contador'.
        courseF_artist_for_challenge2_d: |
          **Solución:**

          <xml>
          <block type="when_run" deletable="false" movable="false">
          <next>
          <block type="draw_width" inline="false">
          <value name="WIDTH">
          <block type="math_number">
          <title name="NUM">1</title>
          </block>
          </value>
          <next>
          <block type="controls_for_counter" inline="true">
          <mutation counter="counter"></mutation>
          <value name="FROM">
          <block type="math_number">
          <title name="NUM">5</title>
          </block>
          </value>
          <value name="TO">
          <block type="math_number">
          <title name="NUM">250</title>
          </block>
          </value>
          <value name="BY">
          <block type="math_number">
          <title name="NUM">2</title>
          </block>
          </value>
          <statement name="DO">
          <block type="draw_colour" inline="true" id="draw-color">
          <value name="COLOUR">
          <block type="colour_rgb" inline="false">
          <value name="RED">
          <block type="math_number">
          <title name="NUM">255</title>
          </block>
          </value>
          <value name="GREEN">
          <block type="variables_get">
          <title name="VAR">counter</title>
          </block>
          </value>
          <value name="BLUE">
          <block type="math_arithmetic" inline="true">
          <title name="OP">MINUS</title>
          <value name="A">
          <block type="math_number">
          <title name="NUM">255</title>
          </block>
          </value>
          <value name="B">
          <block type="variables_get">
          <title name="VAR">counter</title>
          </block>
          </value>
          </block>
          </value>
          </block>
          </value>
          <next>
          <block type="draw_move" inline="true">
          <title name="DIR">moveForward</title>
          <value name="VALUE">
          <block type="variables_get">
          <title name="VAR">counter</title>
          </block>
          </value>
          <next>
          <block type="draw_turn" inline="true">
          <title name="DIR">turnRight</title>
          <value name="VALUE">
          <block type="math_number">
          <title name="NUM">80</title>
          </block>
          </value>
          </block>
          </next>
          </block>
          </next>
          </block>
          </statement>
          </block>
          </next>
          </block>
          </next>
          </block>
          </xml>
      courseF_artist_for_challenge2_2019_authored_hint:
        courseF_artist_for_challenge2_c: 'El `control de flujo` va de 5 a 250 por
          2. '
        courseF_artist_for_challenge2_a: El cambio de color ocurre utilizando el bloque
          'definir color con rojo, verde, azul'. Rojo es la constante definida como
          255, verde  es siempre el valor de 'contador', y azul es siempre '255-contador'.
      courseF_artist_fwp_challenge2_authored_hint:
        courseF_artist_fwp_challenge1_a: "![](https://images.code.org/9310e6352e85a8265b424c9d57ca28d1-image-1446239776339.gif)"
        courseF_artist_fwp_challenge1_b: 'Esta es una serie de octógonos con lados
          que son ''contador'' píxeles de largo. '
        courseF_artist_fwp_challenge1_c: 'Cada octágono se llama desde dentro de un
          bucle ''para'' que va de 200 hasta 2 por 2. '
        courseF_artist_fwp_challenge1_d: 'No olvides dar vuelta de 22.5 grados al
          final de cada iteración. '
        courseF_artist_fwp_challenge1_e: Tanto el color de cada octágono como el ancho
          del lápiz están controlados por la variable `contador '.
      courseF_artist_fwp_challenge2_2018_authored_hint:
        courseF_artist_fwp_challenge1_a: "![](https://images.code.org/9310e6352e85a8265b424c9d57ca28d1-image-1446239776339.gif)"
        courseF_artist_fwp_challenge1_b: 'Esta es una serie de octógonos con lados
          que son ''contador'' píxeles de largo. '
        courseF_artist_fwp_challenge1_c: 'Cada octágono se llama desde dentro de un
          bucle ''para'' que va de 200 hasta 2 por 2. '
        courseF_artist_fwp_challenge1_d: 'No olvides dar vuelta de 22.5 grados al
          final de cada iteración. '
        courseF_artist_fwp_challenge1_e: Tanto el color de cada octágono como el ancho
          del lápiz están controlados por la variable `contador '.
      courseF_artist_variables5_authored_hint:
        courseF_artist_variables5_b: La primera mitad de tu código dibujará tres triángulos,
          y la segunda mitad dibujará los otros tres.
        courseF_artist_variables5_c: Comienza por duplicar el código en la primera
          mitad de su programa, luego modifícalo para que se muestre el diseño.
      courseF_artist_variables5_2018_authored_hint:
        courseF_artist_variables5_b: La primera mitad de tu código dibujará tres triángulos,
          y la segunda mitad dibujará los otros tres.
        courseF_artist_variables5_c: Comienza por duplicar el código en la primera
          mitad de su programa, luego modifícalo para que se muestre el diseño.
      courseF_artist_variables5_2019_authored_hint:
        courseF_artist_variables5_b: La primera mitad de tu código dibujará tres triángulos,
          y la segunda mitad dibujará los otros tres.
        courseF_artist_variables5_c: Comienza por duplicar el código en la primera
          mitad de su programa, luego modifícalo para que se muestre el diseño.
      courseF_artist_variables6_authored_hint:
        courseF_artist_variables6_b: Deberás editar el bloque numérico con el valor
          50, pero no se debe alterar más nada en el código.
      courseF_artist_variables6_2018_authored_hint:
        courseF_artist_variables6_b: Deberás editar el bloque numérico con el valor
          50, pero no se debe alterar más nada en el código.
      courseF_artist_variables6_2019_authored_hint:
        courseF_artist_variables6_b: Deberás editar el bloque numérico con el valor
          50, pero no se debe alterar más nada en el código.
      courseF_artist_variables6a_authored_hint:
        courseF_artist_variables6a_b: "¡Este código será muy similar al código de
          tu triángulo, solo que con una forma diferente!"
        courseF_artist_variables6a_c: Primero escribe el código de un cuadrado, luego
          agrega el código para moverte entre los cuadrados. Finalmente, agrega un
          bucle alrededor de todo!
      courseF_artist_variables6a_2018_authored_hint:
        courseF_artist_variables6a_b: "¡Este código será muy similar al código de
          tu triángulo, solo que con una forma diferente!"
        courseF_artist_variables6a_c: Primero escribe el código de un cuadrado, luego
          agrega el código para moverte entre los cuadrados. Finalmente, agrega un
          bucle alrededor de todo!
      courseF_artist_variables6a_2019_authored_hint:
        courseF_artist_variables6a_b: "¡Este código será muy similar al código de
          tu triángulo, solo que con una forma diferente!"
        courseF_artist_variables6a_c: Primero escribe el código de un cuadrado, luego
          agrega el código para moverte entre los cuadrados. Finalmente, agrega un
          bucle alrededor de todo!
      courseF_artist_variables_challenge1_authored_hint:
        courseF_artist_variables_challenge1_c: Para completar el patrón, deberá girar
          a la izquierda dos veces, girar a la derecha dos veces y avanzar un total
          de cuatro veces.
      courseF_artist_variables_challenge1_2018_authored_hint:
        courseF_artist_variables_challenge1_c: Para completar el patrón, deberá girar
          a la izquierda dos veces, girar a la derecha dos veces y avanzar un total
          de cuatro veces.
      courseF_artist_variables_challenge1_2019_authored_hint:
        courseF_artist_variables_challenge1_c: Para completar el patrón, deberá girar
          a la izquierda dos veces, girar a la derecha dos veces y avanzar un total
          de cuatro veces.
      courseF_artist_variables_challenge1a_authored_hint:
        courseF_artist_variables_challenge1_a: 'Las variables son útiles ya que usted
          puede sumarlas cada vez mediante un lazo. '
        courseF_artist_variables_challenge1_b: Este rompecabezas tiene un lazo que
          crea un polígono, un lazo que repite el polígono 'lados' veces, luego otro
          lazo que lo hace todo de nuevo después de sumar 5 a 'lados'.
        courseF_artist_variables_challenge1_c: Usar una variable para 'lados' y una
          para 'longitud' hace al código más limpio ya que usted puede reutilizar
          el mismo código múltiples veces, en vez de crear una nueva copia para cada
          conjunto de números.
      courseF_artist_variables_challenge2_authored_hint:
        courseF_artist_variables_challenge2_a: Las variables son útiles ya que usted
          puede sumarlas cada vez mediante un lazo.
        courseF_artist_variables_challenge2_c: Usar una variable para 'lados' y una
          para 'longitud' hace al código más limpio ya que usted puede reutilizar
          el mismo código múltiples veces, en vez de crear una nueva copia para cada
          conjunto de números.
      courseF_artist_variables_challenge2_2018_authored_hint:
        courseF_artist_variables_challenge2_a: Las variables son útiles ya que usted
          puede sumarlas cada vez mediante un lazo.
        courseF_artist_variables_challenge2_c: Usar una variable para 'lados' y una
          para 'longitud' hace al código más limpio ya que usted puede reutilizar
          el mismo código múltiples veces, en vez de crear una nueva copia para cada
          conjunto de números.
      courseF_artist_variables_challenge2_2019_authored_hint:
        courseF_artist_variables_challenge2_a: Las variables son útiles ya que usted
          puede sumarlas cada vez mediante un lazo.
        courseF_artist_variables_challenge2_c: Usar una variable para 'lados' y una
          para 'longitud' hace al código más limpio ya que usted puede reutilizar
          el mismo código múltiples veces, en vez de crear una nueva copia para cada
          conjunto de números.
      courseF_bee_conditionals5_authored_hint:
        courseF_bee_conditionals5_d: Para continuar por el camino, la abeja deberá
          'avanzar'. Mientras está en el camino, la abeja necesita buscar una flor.
          ¿Qué debería hacer la abeja si hay una flor?
      courseF_bee_conditionals5_2018_authored_hint:
        courseF_bee_conditionals5_d: Para continuar por el camino, la abeja deberá
          'avanzar'. Mientras está en el camino, la abeja necesita buscar una flor.
          ¿Qué debería hacer la abeja si hay una flor?
      courseF_bee_conditionals8_authored_hint:
        courseF_bee_conditionals8_a: |-
          ** Recuerda: ** Este puzzle cambia cada vez que se ejecuta.

          Querras usar un bloque condicional (`Si` o` Si /si no`) para resolver el desafío.
      courseF_bee_conditionals8_2018_authored_hint:
        courseF_bee_conditionals8_a: |-
          ** Recuerda: ** Este puzzle cambia cada vez que se ejecuta.

          Querras usar un bloque condicional (`Si` o` Si /si no`) para resolver el desafío.
      courseF_bee_for8_authored_hint:
        courseF_bee_for8_b: En este puzzle, tendrás que moverte en un patrón de escalones
          para llegar a las flores.
      courseF_bee_for8_2018_authored_hint:
        courseF_bee_for8_b: En este puzzle, tendrás que moverte en un patrón de escalones
          para llegar a las flores.
      courseF_bee_for8_2019_authored_hint:
        courseF_bee_for8_b: En este puzzle, tendrás que moverte en un patrón de escalones
          para llegar a las flores.
      courseF_bee_for_challenge2_authored_hint:
        courseF_bee_for_challenge2_a: |-
          Echa un vistazo a esta opción de movimiento:

          ![](https://images.code.org/07fa7bdbbaaae3ecf2663a360b3e87d7-image-1469726373660.png)
        courseF_bee_for_challenge2_b: 'Intente usar dos bucles `para`: uno para trepar
          y agarrar néctar, y el otro para bajar y hacer miel.'
        courseF_bee_for_challenge2_c: |-
          Observe que un bucle `para` necesita varios bucles regulares dentro en que se repita 'contador' veces para hacer el patrón creciente de escalera.

          El otro bucle `para` solo necesita un bucle regular para hacer una cantidad 'contador' de miel.
        courseF_bee_for_challenge2_d: |-
          **Solución:**

          <xml>
          <block type="when_run" deletable="false" movable="false">
          <next>
          <block type="controls_for" inline="true">
          <title name="VAR">counter</title>
          <value name="FROM">
          <block type="math_number">
          <title name="NUM">1</title>
          </block>
          </value>
          <value name="TO">
          <block type="math_number">
          <title name="NUM">3</title>
          </block>
          </value>
          <value name="BY">
          <block type="math_number">
          <title name="NUM">1</title>
          </block>
          </value>
          <statement name="DO">
          <block type="controls_repeat_ext" inline="true">
          <value name="TIMES">
          <block type="variables_get">
          <title name="VAR">counter</title>
          </block>
          </value>
          <statement name="DO">
          <block type="maze_moveForward"/>
          </statement>
          <next>
          <block type="controls_repeat_ext" inline="true">
          <value name="TIMES">
          <block type="variables_get">
          <title name="VAR">counter</title>
          </block>
          </value>
          <statement name="DO">
          <block type="maze_nectar"/>
          </statement>
          <next>
          <block type="maze_turn">
          <title name="DIR">turnLeft</title>
          <next>
          <block type="controls_repeat_ext" inline="true">
          <value name="TIMES">
          <block type="variables_get">
          <title name="VAR">counter</title>
          </block>
          </value>
          <statement name="DO">
          <block type="maze_moveForward"/>
          </statement>
          <next>
          <block type="maze_turn">
          <title name="DIR">turnRight</title>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </statement>
          <next>
          <block type="maze_turn">
          <title name="DIR">turnRight</title>
          <next>
          <block type="maze_turn">
          <title name="DIR">turnRight</title>
          <next>
          <block type="controls_for" inline="true">
          <title name="VAR">counter</title>
          <value name="FROM">
          <block type="math_number">
          <title name="NUM">2</title>
          </block>
          </value>
          <value name="TO">
          <block type="math_number">
          <title name="NUM">10</title>
          </block>
          </value>
          <value name="BY">
          <block type="math_number">
          <title name="NUM">2</title>
          </block>
          </value>
          <statement name="DO">
          <block type="maze_moveForward">
          <next>
          <block type="maze_turn">
          <title name="DIR">turnLeft</title>
          <next>
          <block type="maze_moveForward">
          <next>
          <block type="maze_turn">
          <title name="DIR">turnRight</title>
          <next>
          <block type="controls_repeat_ext" inline="true">
          <value name="TIMES">
          <block type="variables_get">
          <title name="VAR">counter</title>
          </block>
          </value>
          <statement name="DO">
          <block type="maze_honey"/>
          </statement>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </statement>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </xml>
      courseF_bee_for_challenge2_2018_authored_hint:
        courseF_bee_for_challenge2_a: |-
          Echa un vistazo a esta opción de movimiento:

          ![](https://images.code.org/07fa7bdbbaaae3ecf2663a360b3e87d7-image-1469726373660.png)
        courseF_bee_for_challenge2_b: 'Intente usar dos bucles `para`: uno para trepar
          y agarrar néctar, y el otro para bajar y hacer miel.'
        courseF_bee_for_challenge2_c: |-
          Observe que un bucle `para` necesita varios bucles regulares dentro en que se repita 'contador' veces para hacer el patrón creciente de escalera.

          El otro bucle `para` solo necesita un bucle regular para hacer una cantidad 'contador' de miel.
        courseF_bee_for_challenge2_d: |-
          **Solución:**

          <xml>
          <block type="when_run" deletable="false" movable="false">
          <next>
          <block type="controls_for" inline="true">
          <title name="VAR">counter</title>
          <value name="FROM">
          <block type="math_number">
          <title name="NUM">1</title>
          </block>
          </value>
          <value name="TO">
          <block type="math_number">
          <title name="NUM">3</title>
          </block>
          </value>
          <value name="BY">
          <block type="math_number">
          <title name="NUM">1</title>
          </block>
          </value>
          <statement name="DO">
          <block type="controls_repeat_ext" inline="true">
          <value name="TIMES">
          <block type="variables_get">
          <title name="VAR">counter</title>
          </block>
          </value>
          <statement name="DO">
          <block type="maze_moveForward"/>
          </statement>
          <next>
          <block type="controls_repeat_ext" inline="true">
          <value name="TIMES">
          <block type="variables_get">
          <title name="VAR">counter</title>
          </block>
          </value>
          <statement name="DO">
          <block type="maze_nectar"/>
          </statement>
          <next>
          <block type="maze_turn">
          <title name="DIR">turnLeft</title>
          <next>
          <block type="controls_repeat_ext" inline="true">
          <value name="TIMES">
          <block type="variables_get">
          <title name="VAR">counter</title>
          </block>
          </value>
          <statement name="DO">
          <block type="maze_moveForward"/>
          </statement>
          <next>
          <block type="maze_turn">
          <title name="DIR">turnRight</title>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </statement>
          <next>
          <block type="maze_turn">
          <title name="DIR">turnRight</title>
          <next>
          <block type="maze_turn">
          <title name="DIR">turnRight</title>
          <next>
          <block type="controls_for" inline="true">
          <title name="VAR">counter</title>
          <value name="FROM">
          <block type="math_number">
          <title name="NUM">2</title>
          </block>
          </value>
          <value name="TO">
          <block type="math_number">
          <title name="NUM">10</title>
          </block>
          </value>
          <value name="BY">
          <block type="math_number">
          <title name="NUM">2</title>
          </block>
          </value>
          <statement name="DO">
          <block type="maze_moveForward">
          <next>
          <block type="maze_turn">
          <title name="DIR">turnLeft</title>
          <next>
          <block type="maze_moveForward">
          <next>
          <block type="maze_turn">
          <title name="DIR">turnRight</title>
          <next>
          <block type="controls_repeat_ext" inline="true">
          <value name="TIMES">
          <block type="variables_get">
          <title name="VAR">counter</title>
          </block>
          </value>
          <statement name="DO">
          <block type="maze_honey"/>
          </statement>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </statement>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </xml>
      courseF_bee_for_challenge2_2019_authored_hint:
        courseF_bee_for_challenge2_a: |-
          Echa un vistazo a esta opción de movimiento:

          ![](https://images.code.org/07fa7bdbbaaae3ecf2663a360b3e87d7-image-1469726373660.png)
        courseF_bee_for_challenge2_b: 'Intente usar dos bucles `para`: uno para trepar
          y agarrar néctar, y el otro para bajar y hacer miel.'
        courseF_bee_for_challenge2_c: |-
          Observe que un bucle `para` necesita varios bucles regulares dentro en que se repita 'contador' veces para hacer el patrón creciente de escalera.

          El otro bucle `para` solo necesita un bucle regular para hacer una cantidad 'contador' de miel.
        courseF_bee_for_challenge2_d: |-
          **Solución:**

          <xml>
          <block type="when_run" deletable="false" movable="false">
          <next>
          <block type="controls_for" inline="true">
          <title name="VAR">counter</title>
          <value name="FROM">
          <block type="math_number">
          <title name="NUM">1</title>
          </block>
          </value>
          <value name="TO">
          <block type="math_number">
          <title name="NUM">3</title>
          </block>
          </value>
          <value name="BY">
          <block type="math_number">
          <title name="NUM">1</title>
          </block>
          </value>
          <statement name="DO">
          <block type="controls_repeat_ext" inline="true">
          <value name="TIMES">
          <block type="variables_get">
          <title name="VAR">counter</title>
          </block>
          </value>
          <statement name="DO">
          <block type="maze_moveForward"/>
          </statement>
          <next>
          <block type="controls_repeat_ext" inline="true">
          <value name="TIMES">
          <block type="variables_get">
          <title name="VAR">counter</title>
          </block>
          </value>
          <statement name="DO">
          <block type="maze_nectar"/>
          </statement>
          <next>
          <block type="maze_turn">
          <title name="DIR">turnLeft</title>
          <next>
          <block type="controls_repeat_ext" inline="true">
          <value name="TIMES">
          <block type="variables_get">
          <title name="VAR">counter</title>
          </block>
          </value>
          <statement name="DO">
          <block type="maze_moveForward"/>
          </statement>
          <next>
          <block type="maze_turn">
          <title name="DIR">turnRight</title>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </statement>
          <next>
          <block type="maze_turn">
          <title name="DIR">turnRight</title>
          <next>
          <block type="maze_turn">
          <title name="DIR">turnRight</title>
          <next>
          <block type="controls_for" inline="true">
          <title name="VAR">counter</title>
          <value name="FROM">
          <block type="math_number">
          <title name="NUM">2</title>
          </block>
          </value>
          <value name="TO">
          <block type="math_number">
          <title name="NUM">10</title>
          </block>
          </value>
          <value name="BY">
          <block type="math_number">
          <title name="NUM">2</title>
          </block>
          </value>
          <statement name="DO">
          <block type="maze_moveForward">
          <next>
          <block type="maze_turn">
          <title name="DIR">turnLeft</title>
          <next>
          <block type="maze_moveForward">
          <next>
          <block type="maze_turn">
          <title name="DIR">turnRight</title>
          <next>
          <block type="controls_repeat_ext" inline="true">
          <value name="TIMES">
          <block type="variables_get">
          <title name="VAR">counter</title>
          </block>
          </value>
          <statement name="DO">
          <block type="maze_honey"/>
          </statement>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </statement>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </xml>
      courseF_bee_for_challenge3_authored_hint:
        courseF_bee_for_challenge2_a: |-
          Echa un vistazo a esta opción de movimiento:

          ![](https://images.code.org/07fa7bdbbaaae3ecf2663a360b3e87d7-image-1469726373660.png)
        courseF_bee_for_challenge2_b: 'Intente usar dos bucles `para`: uno para trepar
          y agarrar néctar, y el otro para bajar y hacer miel.'
        courseF_bee_for_challenge2_c: |-
          Observe que un bucle `para` necesita varios bucles regulares dentro en que se repita 'contador' veces para hacer el patrón creciente de escalera.

          El otro bucle `para` solo necesita un bucle regular para hacer una cantidad 'contador' de miel.
        courseF_bee_for_challenge2_d: |-
          **Solución:**

          <xml>
          <block type="when_run" deletable="false" movable="false">
          <next>
          <block type="controls_for" inline="true">
          <title name="VAR">counter</title>
          <value name="FROM">
          <block type="math_number">
          <title name="NUM">1</title>
          </block>
          </value>
          <value name="TO">
          <block type="math_number">
          <title name="NUM">3</title>
          </block>
          </value>
          <value name="BY">
          <block type="math_number">
          <title name="NUM">1</title>
          </block>
          </value>
          <statement name="DO">
          <block type="controls_repeat_ext" inline="true">
          <value name="TIMES">
          <block type="variables_get">
          <title name="VAR">counter</title>
          </block>
          </value>
          <statement name="DO">
          <block type="maze_moveForward"/>
          </statement>
          <next>
          <block type="controls_repeat_ext" inline="true">
          <value name="TIMES">
          <block type="variables_get">
          <title name="VAR">counter</title>
          </block>
          </value>
          <statement name="DO">
          <block type="maze_nectar"/>
          </statement>
          <next>
          <block type="maze_turn">
          <title name="DIR">turnLeft</title>
          <next>
          <block type="controls_repeat_ext" inline="true">
          <value name="TIMES">
          <block type="variables_get">
          <title name="VAR">counter</title>
          </block>
          </value>
          <statement name="DO">
          <block type="maze_moveForward"/>
          </statement>
          <next>
          <block type="maze_turn">
          <title name="DIR">turnRight</title>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </statement>
          <next>
          <block type="maze_turn">
          <title name="DIR">turnRight</title>
          <next>
          <block type="maze_turn">
          <title name="DIR">turnRight</title>
          <next>
          <block type="controls_for" inline="true">
          <title name="VAR">counter</title>
          <value name="FROM">
          <block type="math_number">
          <title name="NUM">2</title>
          </block>
          </value>
          <value name="TO">
          <block type="math_number">
          <title name="NUM">10</title>
          </block>
          </value>
          <value name="BY">
          <block type="math_number">
          <title name="NUM">2</title>
          </block>
          </value>
          <statement name="DO">
          <block type="maze_moveForward">
          <next>
          <block type="maze_turn">
          <title name="DIR">turnLeft</title>
          <next>
          <block type="maze_moveForward">
          <next>
          <block type="maze_turn">
          <title name="DIR">turnRight</title>
          <next>
          <block type="controls_repeat_ext" inline="true">
          <value name="TIMES">
          <block type="variables_get">
          <title name="VAR">counter</title>
          </block>
          </value>
          <statement name="DO">
          <block type="maze_honey"/>
          </statement>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </statement>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </xml>
      courseF_bee_functions3_authored_hint:
        courseF_bee_functions3_a: 'Tu función para este puzzle solo necesita hacer
          miel, no debería tener ningún bloque de ''avanzar'' o ''girar''. '
        courseF_bee_functions3_b: Recuerda que tu función solo debe obtener miel *
          si * hay un panal de miel.
        courseF_bee_functions3_c: Usa el bloque verde `solo hacer miel` para llamar
          a tu función.
        courseF_bee_functions3_d: Mira este camino.
      courseF_bee_functions3_2018_authored_hint:
        courseF_bee_functions3_a: 'Tu función para este puzzle solo necesita hacer
          miel, no debería tener ningún bloque de ''avanzar'' o ''girar''. '
        courseF_bee_functions3_b: Recuerda que tu función solo debe obtener miel *
          si * hay un panal de miel.
        courseF_bee_functions3_c: Usa el bloque verde `solo hacer miel` para llamar
          a tu función.
        courseF_bee_functions3_d: Mira este camino.
      courseF_bee_functions3a_authored_hint:
        courseF_bee_functions3a_a: 'Tu función para este puzzle solo necesita obtener
          néctar o hacer miel, no deberías tener ningún bloque de ''avanzar'' o ''girar''. '
        courseF_bee_functions3a_b: Usa un patrón de escalones para verificar las primeras
          cuatro nubes.
      courseF_bee_functions3a_2018_authored_hint:
        courseF_bee_functions3a_a: 'Tu función para este puzzle solo necesita obtener
          néctar o hacer miel, no deberías tener ningún bloque de ''avanzar'' o ''girar''. '
        courseF_bee_functions3a_b: Usa un patrón de escalones para verificar las primeras
          cuatro nubes.
      courseF_bee_functions4_authored_hint:
        courseF_bee_functions4_a: Tu función debe viajar por los caminos laterales
          y devolver la abeja a la camino principal. No necesitas agregar esa parte
          a tu programa principal.
        courseF_bee_functions4_b: Intenta crear el programa y usar los bloques de
          funciones como esperas que se comporte la función, luego crea la función.
      courseF_bee_functions4_2018_authored_hint:
        courseF_bee_functions4_a: Tu función debe viajar por los caminos laterales
          y devolver la abeja a la camino principal. No necesitas agregar esa parte
          a tu programa principal.
        courseF_bee_functions4_b: Intenta crear el programa y usar los bloques de
          funciones como esperas que se comporte la función, luego crea la función.
      courseF_bee_functions5a_authored_hint:
        courseF_bee_functions5a_a: |-
          Tu función debería verificar si hay un camino a la derecha, y si lo hay, recorrer los caminos laterales y regresar a la abeja al camino principal.

          No necesitas agregar esa parte a tu programa principal.
        courseF_bee_functions5a_b: Usa un bucle`siempre que` para viajar por todas
          las rutas principales, ya que son de diferentes longitudes.
        courseF_bee_functions5a_c: Dentro de tu bucle `siempre que`, asegúrate de
          avanzar, luego usa tu función para buscar una ruta.
      courseF_bee_functions5a_2018_authored_hint:
        courseF_bee_functions5a_a: |-
          Tu función debería verificar si hay un camino a la derecha, y si lo hay, recorrer los caminos laterales y regresar a la abeja al camino principal.

          No necesitas agregar esa parte a tu programa principal.
        courseF_bee_functions5a_b: Usa un bucle`siempre que` para viajar por todas
          las rutas principales, ya que son de diferentes longitudes.
        courseF_bee_functions5a_c: Dentro de tu bucle `siempre que`, asegúrate de
          avanzar, luego usa tu función para buscar una ruta.
      courseF_bee_functions6_authored_hint:
        courseF_bee_functions6_a: |-
          Si el rompecabezas parece desafiante, intenta construir tu función de poco a poco
          Agrega algunos bloques, luego pruébalo. Agrega más, luego intenta de nuevo. ¡Pronto, lo lograras!
          ![](https://images.code.org/3875224b35889000a0998ca25cfa4ecf-image-1467996493914.gif)
        courseF_bee_functions6_b: Tu función debe verificar si hay una flor o un panal,
          obtener néctar o hacer miel, luego girar.
        courseF_bee_functions6_c: Dado que estás girando dentro de tu función, solo
          necesitas un bucle `siempre que` para atravesar este laberinto.
      courseF_bee_functions6_2018_authored_hint:
        courseF_bee_functions6_a: |-
          Si el rompecabezas parece desafiante, intenta construir tu función de poco a poco
          Agrega algunos bloques, luego pruébalo. Agrega más, luego intenta de nuevo. ¡Pronto, lo lograras!
          ![](https://images.code.org/3875224b35889000a0998ca25cfa4ecf-image-1467996493914.gif)
        courseF_bee_functions6_b: Tu función debe verificar si hay una flor o un panal,
          obtener néctar o hacer miel, luego girar.
        courseF_bee_functions6_c: Dado que estás girando dentro de tu función, solo
          necesitas un bucle `siempre que` para atravesar este laberinto.
      courseF_bee_functions7_authored_hint:
        courseF_bee_functions7_a: Puedes mirar hacia atrás en el último puzzle para
          ver tu función.
        courseF_bee_functions7_b: Trata de dibujar un camino a través de este laberinto
          con tu dedo. ¿Dónde tendrá que tomar la abeja una decisión?
      courseF_bee_functions7_2018_authored_hint:
        courseF_bee_functions7_a: Puedes mirar hacia atrás en el último puzzle para
          ver tu función.
        courseF_bee_functions7_b: Trata de dibujar un camino a través de este laberinto
          con tu dedo. ¿Dónde tendrá que tomar la abeja una decisión?
      courseF_bee_functions8a_authored_hint:
        courseF_bee_functions8a_a: |-
          Si el rompecabezas parece desafiante, intenta construir tu función de poco a poco.
          Agregue algunos bloques, luego pruébelo. Agrega más, luego intenta de nuevo. ¡Pronto, llegarás allí!
        courseF_bee_functions8a_b: Recuerda construir código dentro del editor de
          funciones.
      courseF_bee_functions8a_2018_authored_hint:
        courseF_bee_functions8a_a: |-
          Si el rompecabezas parece desafiante, intenta construir tu función de poco a poco.
          Agregue algunos bloques, luego pruébelo. Agrega más, luego intenta de nuevo. ¡Pronto, llegarás allí!
        courseF_bee_functions8a_b: Recuerda construir código dentro del editor de
          funciones.
      courseF_bee_functionsPre7_authored_hint:
        courseF_bee_functions7_a: |-
          Si el rompecabezas parece desafiante, intenta construir tu función de poco a poco.
          Agregue algunos bloques, luego pruébelo. Agrega más, luego intenta de nuevo. ¡Pronto, llegarás allí!
        courseF_bee_functions7_c: "¿De qué manera deberías girar si hay un panal?
          ¿Qué tal una flor? ¿Qué pasa si no hay nada?"
      courseF_bee_functionsPre7_2018_authored_hint:
        courseF_bee_functions7_a: |-
          Si el rompecabezas parece desafiante, intenta construir tu función de poco a poco.
          Agregue algunos bloques, luego pruébelo. Agrega más, luego intenta de nuevo. ¡Pronto, llegarás allí!
        courseF_bee_functions7_c: "¿De qué manera deberías girar si hay un panal?
          ¿Qué tal una flor? ¿Qué pasa si no hay nada?"
      courseF_bee_functions_challenge1_authored_hint:
        courseF_bee_functions_challenge1_a: Puedes usar las funciones en la caja de
          herramientas para ayudarlo. ¡Puedes invocar una función dentro de la definición
          de otra función!
      courseF_bee_functions_challenge1_2018_authored_hint:
        courseF_bee_functions_challenge1_a: Puedes usar las funciones en la caja de
          herramientas para ayudarlo. ¡Puedes invocar una función dentro de la definición
          de otra función!
      courseF_bee_functions_challenge2_authored_hint:
        courseF_bee_functions_challenge2_a: |-
          Si hay un camino a la derecha, deberías hacer lo siguiente:
          * Obtén cualquier néctar o haz miel.
          * Gira a la derecha hacia el camino lateral.
          * Muévete hasta final de la ruta lateral.
          * Dobla a la derecha.

          Si repites las acciones anteriores dos veces, estarás listo para retroceder por la ruta principal.

          ** ¡Solo haz clic para obtener otra sugerencia si deseas ver la solución completa! **
      courseF_bee_functions_challenge2_2018_authored_hint:
        courseF_bee_functions_challenge2_a: |-
          Si hay un camino a la derecha, deberías hacer lo siguiente:
          * Obtén cualquier néctar o haz miel.
          * Gira a la derecha hacia el camino lateral.
          * Muévete hasta final de la ruta lateral.
          * Dobla a la derecha.

          Si repites las acciones anteriores dos veces, estarás listo para retroceder por la ruta principal.

          ** ¡Solo haz clic para obtener otra sugerencia si deseas ver la solución completa! **
      courseF_bee_functions_challenge2_recursion_authored_hint:
        courseF_bee_functions8a_a: |-
          Si el rompecabezas parece desafiante, intenta construir tu función de poco a poco.
          Agregue algunos bloques, luego pruébelo. Agrega más, luego intenta de nuevo. ¡Pronto, llegarás allí!
        courseF_bee_functions8a_b: Recuerda construir código dentro del editor de
          funciones.
      courseF_bee_fwp3_authored_hint:
        courseF_bee_fwp3_c: Para resolver este puzzle, necesitarás llamar a tu función
          3 veces. Entre cada llamada, debes `girar a la derecha`,` avanzar` 2 veces,
          luego `girar a la derecha` de nuevo. O bien, tienes que `girar a la izquierda`,`
          avanzar` 2 veces, luego `girar a la izquierda` de nuevo.
      courseF_bee_fwp3_2018_authored_hint:
        courseF_bee_fwp3_c: Para resolver este puzzle, necesitarás llamar a tu función
          3 veces. Entre cada llamada, debes `girar a la derecha`,` avanzar` 2 veces,
          luego `girar a la derecha` de nuevo. O bien, tienes que `girar a la izquierda`,`
          avanzar` 2 veces, luego `girar a la izquierda` de nuevo.
      courseF_bee_fwp4_authored_hint:
        courseF_bee_fwp4_b: El parámetro que crees para tu función se usará en el
          bucle de repetición para determinar cuántas veces la abeja avanzará y buscará
          néctar.
      courseF_bee_fwp4_2018_authored_hint:
        courseF_bee_fwp4_b: El parámetro que crees para tu función se usará en el
          bucle de repetición para determinar cuántas veces la abeja avanzará y buscará
          néctar.
      courseF_bee_fwp_challenge2_authored_hint:
        courseF_bee_fwp_challenge2_a: |-
          Comience asegurándose de que entiende cómo funciona esta *supuesta* función. A medida que la agricultora se mueve por cada camino, solo intentará recolectar maíz. En cambio, ¿cómo puedes hacer que revise cada una de las 3 verduras y elegir solo la que encuentra?

          Agregue declaraciones condicionales a la función para buscar maíz, calabazas y lechuga.
      courseF_bee_fwp_challenge2_2018_authored_hint:
        courseF_bee_fwp_challenge2_a: |-
          Comience asegurándose de que entiende cómo funciona esta *supuesta* función. A medida que la agricultora se mueve por cada camino, solo intentará recolectar maíz. En cambio, ¿cómo puedes hacer que revise cada una de las 3 verduras y elegir solo la que encuentra?

          Agregue declaraciones condicionales a la función para buscar maíz, calabazas y lechuga.
      courseF_maze_ramp13_authored_hint:
        courseF_maze_ramp13_d: Una vez que hayas terminado tu bucle, ¿qué tienes que
          hacer para mover los últimos cuadrados? Adjunta estos bloques después del
          bucle.
      courseF_maze_ramp4_authored_hint:
        courseF_maze_ramp4_b: Para seguir el camino, avanza y gira en un sentido,
          luego muévete tres veces antes de girar en el sentido opuesto. Avanza una
          vez más para alcanzar al cerdo.
      courseF_maze_ramp4_2018_authored_hint:
        courseF_maze_ramp4_b: Para seguir el camino, avanza y gira en un sentido,
          luego muévete tres veces antes de girar en el sentido opuesto. Avanza una
          vez más para alcanzar al cerdo.
      courseF_maze_ramp6_authored_hint:
        courseF_maze_ramp6_a: "¡Aquí tienes dos caminos para resolver el puzzle!"
        courseF_maze_ramp6_b: El pájaro comienza a mirar hacia la pared, ¡así que
          recuerda girar antes de moverte!
      courseF_maze_ramp6_2018_authored_hint:
        courseF_maze_ramp6_a: "¡Aquí tienes dos caminos para resolver el puzzle!"
        courseF_maze_ramp6_b: El pájaro comienza a mirar hacia la pared, ¡así que
          recuerda girar antes de moverte!
      courseF_maze_ramp7_authored_hint:
        courseF_maze_ramp7_d: Hay más de una forma de llegar al cerdo. ¿Cuál forma
          requiere el menor código?
      courseF_playlab_brokenText_authored_hint:
        courseF_playlab_variables6c_a: Debajo de la sección "Entrada", usa el bloque
          `preguntar` para obtener la entrada de los usuarios.
      courseF_playlab_variables2b_authored_hint:
        courseF_playlab_variables2b_a: "¿Qué crees que dirá Kiki cuando toques `Ejecutar`?"
      courseF_playlab_variables2b_2018_authored_hint:
        courseF_playlab_variables2b_a: "¿Qué crees que dirá Kiki cuando toques `Ejecutar`?"
      courseF_playlab_variables3b_josh_authored_hint:
        courseF_playlab_variables3b_a: 'Hay dos bloques con espacios vacíos: un bloque
          `actor dice` y un bloque` unirse`. ¡Agregue las variables de bloques allí!'
      courseF_playlab_variables3b_josh_2018_authored_hint:
        courseF_playlab_variables3b_a: 'Hay dos bloques con espacios vacíos: un bloque
          `actor dice` y un bloque` unirse`. ¡Agregue las variables de bloques allí!'
      courseF_playlab_variables4b_authored_hint:
        courseF_playlab_variables4b_a: No necesitas más bloques de la caja de herramientas
          aquí.
        courseF_playlab_variables4b_b: Coloque las dos variables 'año' y una variable
          'nombre' donde tengan más sentido en la conversación.
      courseF_playlab_variables4b_2018_authored_hint:
        courseF_playlab_variables4b_a: No necesitas más bloques de la caja de herramientas
          aquí.
        courseF_playlab_variables4b_b: Coloque las dos variables 'año' y una variable
          'nombre' donde tengan más sentido en la conversación.
      courseF_playlab_variables5c_authored_hint:
        courseF_playlab_variables5c_a: Encuentre un bloque de variables `respuesta`
          en la caja de herramientas, debajo de" Variables ".
        courseF_playlab_variables5c_b: Prueba tu código! Intenta ingresar "rojo",
          y también otros colores, para ver qué pasa.
      courseF_playlab_variables5c_2018_authored_hint:
        courseF_playlab_variables5c_a: Encuentre un bloque de variables `respuesta`
          en la caja de herramientas, debajo de" Variables ".
        courseF_playlab_variables5c_b: Prueba tu código! Intenta ingresar "rojo",
          y también otros colores, para ver qué pasa.
      courseF_playlab_variables6c_authored_hint:
        courseF_playlab_variables6c_a: Debajo de la sección "Entrada", usa el bloque
          `preguntar` para obtener la entrada de los usuarios.
      courseF_playlab_variables6c_2018_authored_hint:
        courseF_playlab_variables6c_a: Debajo de la sección "Entrada", usa el bloque
          `preguntar` para obtener la entrada de los usuarios.
      courseF_playlab_variables7b_authored_hint:
        courseF_playlab_variables7b_a: Haz que un gato y un perro hablen sobre sus
          comidas favoritas. Usa el bloque de pregunta para encontrar la comida favorita,
          ¡luego muestra el texto en la pantalla!
        courseF_playlab_variables7b_b: Haz que tu personaje favorito pregunte si quiere
          escuchar un chiste. Si la respuesta es sí, muestra una broma a la pantalla.
      courseF_playlab_variables7b_2018_authored_hint:
        courseF_playlab_variables7b_a: Haz que un gato y un perro hablen sobre sus
          comidas favoritas. Usa el bloque de pregunta para encontrar la comida favorita,
          ¡luego muestra el texto en la pantalla!
        courseF_playlab_variables7b_b: Haz que tu personaje favorito pregunte si quiere
          escuchar un chiste. Si la respuesta es sí, muestra una broma a la pantalla.
      courseF_playlab_variables7c_authored_hint:
        courseF_playlab_variables7c_a: Coloque el nuevo bloque `pregunta` antes de
          su instrucción` si/ de lo contrario` para que pueda usarlo allí en otras
          etapas.
      courseF_playlab_variables7c_2018_authored_hint:
        courseF_playlab_variables7c_a: Coloque el nuevo bloque `pregunta` antes de
          su instrucción` si/ de lo contrario` para que pueda usarlo allí en otras
          etapas.
      courseF_playlab_variables8c_authored_hint:
        courseF_playlab_variables8c_a: El bloque `unirse` entra en un bloque` actor
          dice`, y te permite usar tus variables en oraciones más grandes.
      courseF_playlab_variables8c_2018_authored_hint:
        courseF_playlab_variables8c_a: El bloque `unirse` entra en un bloque` actor
          dice`, y te permite usar tus variables en oraciones más grandes.
      courseF_playlab_variables_challenge2_authored_hint:
        courseF_playlab_variables_challenge2_a: Suma y resta puntos a la variable
          `Puntuación` cuando los sprites colisionan.
        courseF_playlab_variables_challenge2_b: Usted puede cambiar el parámetro de
          cuán lejos se mueve su sprite cada vez que una de las teclas flecha es presionada.
      courseF_playlab_variables_challenge2_2018_authored_hint:
        courseF_playlab_variables_challenge2_a: Suma y resta puntos a la variable
          `Puntuación` cuando los sprites colisionan.
        courseF_playlab_variables_challenge2_b: Usted puede cambiar el parámetro de
          cuán lejos se mueve su sprite cada vez que una de las teclas flecha es presionada.
      coursef_maze_ramp3_authored_hint:
        courseF_maze_ramp3_b: Use el botón de paso para recorrer el programa línea
          por línea. ¿Dónde está algo mal?
      coursef_maze_ramp3_2018_authored_hint:
        courseF_maze_ramp3_b: Use el botón de paso para recorrer el programa línea
          por línea. ¿Dónde está algo mal?
      drawings!_authored_hint:
        triangle_geometry_hint: 'Recuerda: un triángulo equilátero tiene tres lados,
          ¡con un giro de 60 grados entre cada uno!'
        repeat_pointer: Tienes que dibujar un lado y girar 3 veces... ¿qué bloque
          puedes usar para ejecutar las mismas instrucciones muchas veces?
        repeat_bottom_out: "¡Usa un bloque `repetir 3 veces`!"
      grade1_adventurer_loops10_authored_hint:
        grade1_adventurer_loops10_a: Necesitarás tres bucles `repetir` para resolver
          este puzzle.
      grade1_adventurer_loops3_authored_hint:
        grade1_adventurer_loops3_a: "¿Algo no está bien? Prueba usando el botón de
          paso para descubrir dónde están las cosas mal."
      grade1_adventurer_loops4_authored_hint:
        grade1_adventurer_loops4_a: Intenta usar más de un bucle para hacer el trabajo.
      grade1_adventurer_loops7_challenge_authored_hint:
        grade1_adventurer_loops7_challenge_a: 'Si no puede averiguar dónde colocar
          los bucles de repetición, prográmalo paso a paso y busca un patrón. '
        grade1_adventurer_loops7_challenge_b: "¿El código se siente un poco largo?
          Puede hacerlo mucho más corto moviendo dos de tus bucles `repetir` dentro
          de otro bucle."
      grade1_adventurer_loops9_authored_hint:
        grade1_adventurer_loops9_a: "¿Esto parece demasiado difícil? Divídelo en 4
          pequeños problemas para que se sienta más fácil."
      grade1_artist_loops1_authored_hint:
        grade1_artist_loops1_a: Si quiere que el lazo se repita más de 4 veces, usted
          puede cambiar el número en la parte superior del bloque.
      grade1_artist_loops6_authored_hint:
        grade1_artist_loops6_a: "¡Este desafío utiliza CUATRO bucles, uno tras otro!"
      grade1_artist_loops7a_authored_hint:
        artistLoopsK9_a: "¡Este desafío utiliza CUATRO bucles, uno tras otro!"
      grade1_maze_sequence7_authored_hint:
        grade1_maze_sequence7a: Si estás atascado, intenta agregar un bloque a la
          vez hasta que resuelvas el acertijo.
      grade2_CaringForNewPet_4_authored_hint:
        2-3_Maze_6_a: "¡Aquí tienes dos caminos para resolver el puzzle!"
      grade2_MakeDogTag_1_authored_hint:
        2-3_Artist_1_new_a: Si utiliza el bloque para hacerme 'avanzar 100 píxeles',
          sacaré una línea automáticamente.
        2-3_Artist_1_new_b: "¿Tienes problemas girando la esquina? Usa el bloque `girar
          a la derecha 90 grados`."
      grade2_MakeDogTag_9_authored_hint:
        2-3_Artist_Loops_New_11_b: Tu nuevo giro debería ir al **final** del código
          dentro del bucle.
      grade2_PuppyLoops_10_authored_hint:
        2-3_Artist_Debugging_8_a: |-
          ¿Cuántas veces se repitió mi forma?

          ¿Cuantas veces *debería* repetirse la forma?

          ¿Donde se puede cambiar eso en el programa?
      grade2_PuppyLoops_6_authored_hint:
        2-3_Maze_16_a: Si el patrón es difícil de ver, intenta programarlo todo primero
          y ve qué cosas se repiten una y otra vez antes de colocar los bucles.
        2-3_Maze_16_b: Para poner muchos bloques dentro de un bucle 'repetir', simplemente
          arrastra un bucle hacia el espacio de trabajo, luego arrastra todos los
          bloques desde el programa de inicio dentro de él!
      grade2_PuppyLoops_7_authored_hint:
        2-3_Maze_Loops_17_a: Si el patrón es difícil de ver, intenta programarlo todo
          primero y ve qué cosas se repiten una y otra vez antes de colocar los bucles.
        2-3_Maze_Loops_17_b: ¿Se borró el código de inicio? ¡Haga clic en "volver
          a empezar" para recuperarlo!
      grade2_PuppyLoops_8_authored_hint:
        2-3_Artist_Debugging_2_a: 'Consejo: Cada barba es de 75 píxeles de largo.'
      grade2_PuppyLoops_9_authored_hint:
        2-3_Artist_Debugging_7_a: "¿Qué pasa si haces que el artista se mueva o salte
          hacia atrás después de que dibuje la primera línea?"
      grade2_puppy_loops6_authored_hint:
        2-3_Maze_16_a: Si el patrón es difícil de ver, intenta programarlo todo primero
          y ve qué cosas se repiten una y otra vez antes de colocar los bucles.
        2-3_Maze_16_b: Para poner muchos bloques dentro de un bucle 'repetir', simplemente
          arrastra un bucle hacia el espacio de trabajo, luego arrastra todos los
          bloques desde el programa de inicio dentro de él!
      grade2_puppy_loops7_authored_hint:
        2-3_Maze_Loops_17_a: Si el patrón es difícil de ver, intenta programarlo todo
          primero y ve qué cosas se repiten una y otra vez antes de colocar los bucles.
      grade3_ConditionalsElse_4_authored_hint:
        remember_quantum: |-
          ** Recuerda: ** Este puzzle cambia cada vez que se ejecuta.

          Querras usar un bloque condicional (`Si` o` Si /si no`) para resolver el desafío.
      grade3_ConditionalsElse_5_authored_hint:
        remember_quantum: |-
          ** Recuerda: ** Este puzzle cambia cada vez que se ejecuta.

          Querras usar un bloque condicional (`Si` o` Si /si no`) para resolver el desafío.
      grade3_ConditionalsElse_TeacherIDo_authored_hint:
        remember_quantum: |-
          ** Recuerda: ** Este puzzle cambia cada vez que se ejecuta.

          Querras usar un bloque condicional (`Si` o` Si /si no`) para resolver el desafío.
      grade3_Conditionals_10 BAD_authored_hint:
        4-5_Bee_Nested_Loops_Rows_a: Intente tratar este puzzle como un rectángulo
          largo donde la abeja necesita avanzar, luego gire a la izquierda varias
          veces para completar el camino.
      grade3_Conditionals_11_authored_hint:
        2-3_Bee_Conditionals_14_a: "¿Teniendo un tiempo difícil averiguar cómo bajar
          los bloques?  ¡Intentar tratar la flor roja exactamente igual que una flor
          morada!"
        2-3_Bee_Conditionals_14_b: "¿Si la flor roja fuera púrpura, podría usted averiguar
          cómo utilizar un bucle extra 'repetición' para reducir el código?"
      grade3_Conditionals_12_authored_hint:
        2-3_Bee_Conditionals_15_a: 'Recuerde: Flores de color púrpura sólo néctar
          ya sea 0 o 1 y puede cambiar cada vez que se ejecuta el programa.'
      grade3_Conditionals_2_authored_hint:
        2-3_Bee_Conditionals_3_a: El código será acortado si usa un bucle cada vez
          que avanza, otro bucle para recolectar néctar y otro para hacer miel.
      grade3_Conditionals_4_authored_hint:
        2-3_Bee_Conditionals_6_a: Recuerde:! las flores púrpuras cambian entre 0 y
          1 de néctar cuando ejecuta su programa!
      grade3_Conditionals_TeacherIDo_authored_hint:
        2-3_Bee_Conditionals_6_a: Recuerde:! las flores púrpuras cambian entre 0 y
          1 de néctar cuando ejecuta su programa!
      grade3_Debugging_1_authored_hint:
        2-3_Bee_Debugging_1_a: Una vez que encuentras y arreglas el bloque incorrecto,
          ¿ves algún patrón que pueda hacerse más simple usando un ciclo `repetir`?
      grade3_Debugging_TeacherIDo_authored_hint:
        2-3_Bee_Debugging_4_a: "¿Hay algún lugar donde la abeja haga algo que no tiene
          sentido? ¿Qué pasa cuando cambias ese bloque?"
      grade3_Loops_10_authored_hint:
        2-3_Bee_Loops_4_a: Deberías terminar con cinco bloques dentro de tu bucle.
      grade3_Loops_11_authored_hint:
        2-3_Bee_Loops_5_a: Si no puedes detectar los bloques para colocar `repetir`
          inmediatamente, comienza por codificar cada movimiento y busca un patrón.
      grade3_Loops_12_authored_hint:
        2-3_Bee_Loops_6_a: Si no puedes decir qué debería ir en el bucle 'repetir',
          intenta arrastrar los bloques uno por uno y ve si puedes encontrar un patrón.
        2-3_Bee_Loops_6_b: Aquí deberían haber 6 bloques dentro del bucle 'repetir'
          cuando hayas terminado.
      grade3_Loops_4_authored_hint:
        2-3_Bee_Loops_3B_a: Necesitas dos bucles `repetir` diferentes, uno después
          del otro.
      grade3_Loops_5_authored_hint:
        2-3_Bee_Loops_7_a: La primera acción será un giro, en lugar de un movimiento.
        2-3_Bee_Loops_7_b: 'Si no puedes imaginar el bucle desde el principio, intenta
          programarlo a lo largo del camino, luego busca un patrón.  '
      grade3_Loops_6_authored_hint:
        2-3_Bee_Loops_4A_a: La primera acción será un giro, en lugar de un movimiento.
        2-3_Bee_Loops_4A_b: La última parte del programa puede terminarse escribiendo
          código al final de su programa fuera de su bucle.
        2-3_Bee_Loops_4A_c: Si aún no puedes detectar los bucles, intenta codificarlo
          primero, luego ve lo que puedes combinar en un bucle 'repetir' al final.
      grade3_Loops_8_authored_hint:
        2-3_Bee_Loops_2_a: Deberías terminar con cuatro bloques dentro de tu bucle.
      grade3_Loops_9_authored_hint:
        2-3_Bee_Loops_3_a: Deberías tener 6 bloques dentro de tu bucle.
      grade3_bee_conditionals_quantum5_authored_hint:
        remember_quantum: |-
          ** Recuerda: ** Este puzzle cambia cada vez que se ejecuta.

          Querras usar un bloque condicional (`Si` o` Si /si no`) para resolver el desafío.
      grade3_maze_loops2_authored_hint:
        grade3_maze_loops2_b: Si el patrón es difícil de ver, intenta programarlo
          todo primero y ve qué cosas se repiten una y otra vez antes de colocar los
          bucles.
      grade3_maze_loops5_authored_hint:
        2-3_Maze_Loops_21_a: Si tienes problemas para encontrar el patrón de escalera,
          intenta cubrir los caminos bloqueados con tu dedo.
      grade4_arist_nested_loop_polygons1_authored_hint:
        4-5_Nested_Loops_7_a: |-
          Este diseño se repetirá 10 veces terminando en 360 grados.

          ** 360/10 =? **
      grade4_arist_nested_loop_polygons2_authored_hint:
        4-5_Nested_Loops_8_a: |-
          Tienes que repetir el bucle 6 veces terminando en 360 grados.

          ** 360/6 =? **
      grade4_arist_nested_loop_triangles3_authored_hint:
        4-5_Nested_Loops_6_a: |-
          No olvides hacer un giro después de tu bucle interno.

          Estarás formando un bucle de 6 triángulos en 360 grados.

          ** 360/6 =? **
      grade4_arist_nested_loop_triangles6_authored_hint:
        4-5_Nested_Loops_12_a: "**360 / 36 = ?**"
      grade4_artist_functions1_authored_hint:
        2-3_Artist_Functions_1_a: Los cuadrados tienen 100 píxeles de lado cada uno,
          lo que significa que te habrás movido 175 píxeles hacia adelante antes de
          dibijar el segundo cuadrado.
        2-3_Artist_Functions_1_b: Está bien dibujar líneas superpuestas para realizar
          los anteojos.
      grade4_artist_functions2_authored_hint:
        2-3_Artist_Functions_2_a: |-
          Tu programa deberá:
          - Usar función
          - Mover hacia adelante 100 + 75 píxeles
          - Usar función
      grade4_artist_functions_challenge_authored_hint:
        Course_4_SCF_1_a: Cada hexágono tiene 40 lados de píxeles.
        Course_4_SCF_1_b: Hay un salto de 120 píxeles entre cada hexágono en cada
          línea horizontal.
        Course_4_SCF_1_c: |-
          Antes de dibujar la segunda fila de hexágonos, debe girar a la derecha 60 grados y avanzar 40 píxeles.

          Una vez que estás en la ubicación vertical correcta, debes volver a girar tu artista y retroceder 320 píxeles hacia atrás.
        Course_4_SCF_1_d: "Antes de dibujar la tercera fila de hexágonos, debes girar
          a la derecha 60 grados y avanzar 40 píxeles.\n\nUna vez que estás en la
          ubicación vertical correcta, debes volver a girar tu artista y retroceder
          440 píxeles (120 píxeles más que tu función de desplazamiento 'hacia abajo
          / adelante'). "
      grade4_artist_functions_challenge2_authored_hint:
        Course_4_SCF_1_a: Cada hexágono tiene 40 lados de píxeles.
        Course_4_SCF_1_b: Hay un salto de 120 píxeles entre cada hexágono en cada
          línea horizontal.
        Course_4_SCF_1_c: |-
          Antes de dibujar la segunda fila de hexágonos, debe girar a la derecha 60 grados y avanzar 40 píxeles.

          Una vez que estás en la ubicación vertical correcta, debes volver a girar tu artista y retroceder 320 píxeles hacia atrás.
        Course_4_SCF_1_d: "Antes de dibujar la tercera fila de hexágonos, debes girar
          a la derecha 60 grados y avanzar 40 píxeles.\n\nUna vez que estás en la
          ubicación vertical correcta, debes volver a girar tu artista y retroceder
          440 píxeles (120 píxeles más que tu función de desplazamiento 'hacia abajo
          / adelante'). "
      grade4_artist_nestedLoops_challenge2_authored_hint:
        Course_4_Artist_11_a: 'El semi-hexágono tiene una ** longitud de 30 ** y gira
          a la derecha por ** 60 grados **.  '
        Course_4_Artist_11_b: 'El triángulo 2/3 tiene una ** longitud de 80 ** y gira
          a la derecha por ** 120 grados **. '
      grade4_artist_nested_loop_polygons1_authored_hint:
        4-5_Nested_Loops_7_a: |-
          Este diseño se repetirá 10 veces terminando en 360 grados.

          ** 360/10 =? **
      grade4_artist_nested_loop_polygons2_authored_hint:
        4-5_Nested_Loops_8_a: |-
          Tienes que repetir el bucle 6 veces terminando en 360 grados.

          ** 360/6 =? **
      grade4_artist_nested_loop_triangles6_authored_hint:
        4-5_Nested_Loops_12_a: "**360 / 36 = ?**"
      grade4_bee_conditionals_quantum4_authored_hint:
        remember_quantum: |-
          ** Recuerda: ** Este puzzle cambia cada vez que se ejecuta.

          Querras usar un bloque condicional (`Si` o` Si /si no`) para resolver el desafío.
      grade4_bee_conditionals_quantum5_authored_hint:
        remember_quantum: |-
          ** Recuerda: ** Este puzzle cambia cada vez que se ejecuta.

          Querras usar un bloque condicional (`Si` o` Si /si no`) para resolver el desafío.
      grade4_bee_functions7_authored_hint:
        2-3_Bee_Functions_8_a: |-
          Si el rompecabezas parece desafiante, intenta construir tu función de poco a poco
          Agrega algunos bloques, luego pruébalo. Agrega más, luego intenta de nuevo. ¡Pronto, lo lograras!
          ![](https://images.code.org/3875224b35889000a0998ca25cfa4ecf-image-1467996493914.gif)
      grade4_bee_functions8_authored_hint:
        2-3_Bee_Functions_8_a: |-
          Si el rompecabezas parece desafiante, intenta construir tu función de poco a poco.
          Agregue algunos bloques, luego pruébelo. Agrega más, luego intenta de nuevo. ¡Pronto, llegarás allí!
        2-3_Bee_Functions_8_b: |-
          Recuerda construir tu código dentro del bloque de función verde.
          ![](https://images.code.org/8fe1fae5caf4ede3a9c9bd9f26940cde-image-1467996837459.gif)
      grade4_review_artist1_authored_hint:
        2-3_Artist_1_new_a: Si utiliza el bloque para hacerme 'avanzar 100 píxeles',
          sacaré una línea automáticamente.
        2-3_Artist_1_new_b: "¿Tienes problemas girando la esquina? Usa el bloque `girar
          a la derecha 90 grados`."
      grade4_review_artist2_authored_hint:
        2-3_Artist_6_a: 'Para hacer esos pequeños ángulos, tienes que girar *más lejos*
          cada vez que hecho con la Plaza.   '
        2-3_Artist_6_b: Como ya estoy mirando hacia la derecha, es más fácil empezar
          por avanzar, y luego hacer vueltas a la izquierda para crear el triángulo.
        2-3_Artist_6_c: Cada lado del triángulo es de la misma longitud que cada lado
          de la Plaza... ¡100 píxeles!
      grade4_review_bee1_authored_hint:
        2-3_Bee_Loops_3B_a: Necesitas dos bucles `repetir` diferentes, uno después
          del otro.
      grade4_review_bee2_authored_hint:
        2-3_Bee_Loops_3_a: Deberías tener 6 bloques dentro de tu bucle.
      grade4_review_bee3_authored_hint:
        2-3_Bee_Loops_4_a: Deberías terminar con cinco bloques dentro de tu bucle.
      grade5_artist_binary10_authored_hint:
        Course_4_Artist_Binary_Free_Play_2b_a: Este código usa dos `bucle para`. Uno
          cuenta de 1 a 8, el otro cuenta de 8 a 1.
        Course_4_Artist_Binary_Free_Play_2b_b: Cada `bucle contar` tiene tres repeticiones.
          El primero dibuja el conjunto más a la izquierda de 1s, el segundo dibuja
          los 0s en el medio y el tercero dibuja los 1s a la derecha.
        Course_4_Artist_Binary_Free_Play_2b_c: En cada repetición necesitas `contador`
          para 1s y` 16- (contador 2x) `para 0s.
      grade5_artist_for_loops10_authored_hint:
        Course_4_Artist_For_Loops_Challenge_a: El polígono más grande tiene 19 lados.
        Course_4_Artist_For_Loops_Challenge_b: Cada polígono está incompleto, con
          un lado menos de lo que debería tener.
      grade5_artist_for_loops4_authored_hint:
        Course_4_Artist_For_Loops_4_a: |-
          ** ¿Cuál es el número más pequeño que necesitará?
          ¿Cuál es el número más grande?
          ¿Qué tan grande es el aumento en cada ocasión? **

          Esas son las preguntas que debe realizar para completar los espacios en blanco del ciclo `para`.
      grade5_artist_for_loops8_authored_hint:
        Course_4_Artist_For_Loops_11_a: "¡El ángulo de giro cambiará con cada forma!\n\nUse
          el bloque matemático para ingresar 360 dividido por el número de lados que
          tiene la forma para obtener el ángulo correcto. "
      grade5_artist_for_loops9_authored_hint:
        Course_4_Artist_For_Loops_11a_a: '360 dividido por el número de lados que
          tiene una forma es la cantidad de grados que deberá girar. '
        Course_4_Artist_For_Loops_11a_b: 'Cada vez, deberá avanzar 10 veces la longitud
          del número actual de lados. '
      grade5_artist_for_loopsfreeplay11_authored_hint:
        Course_4_Artist_For_Loops_inspire_a: La base de este código es la misma que
          la solución al desafío anterior... con un par de cambios.
        Course_4_Artist_For_Loops_inspire_b: Intenta con un bucle 'para' que va de
          3 a 10 con un incremento de 1.
        Course_4_Artist_For_Loops_inspire_c: Hay dos iteraciones del mismo bucle de
          repetición dentro del bucle `para`, pero la segunda repetición gira en la
          dirección opuesta.
      grade5_artist_functionparameters10_authored_hint:
        brush_width: Establecemos el grosor del pincel a 1, luego el color a azul
          antes de hacer cualquier otra cosa.
        double_loop: Intenta colocar un 'bucle para' dentro de un bucle 'repetir '.
        specifics: |-
          El `bucle para` se ejecuta de tres a diecisiete para cada uno de los seis" pétalos "antes de pasar a crear el siguiente, dibujando formas con solo un número impar de lados.
                  
          El bloque `establecer alfa` usa la división para atenuar el color a medida que el contador aumenta.
        after: Cuando hayas terminado con cada "pétalo", asegúrate de "avanzar" 20
          píxeles antes de hacer una rotación de 60 grados.
      grade5_artist_variables_freeplay10_authored_hint:
        Course_4_Artist_Vars_8_a: Si divide su longitud inicial por el número de lados,
          la longitud de cada lado se acortará a medida que el número de lados aumente.
      grade5_artist_variables_freeplay15_authored_hint:
        Course_4_Artist_Inspire_a: Después de completar un cuadrado, intente saltar
          la mitad de su longitud antes de girar y hacer otro.
        Course_4_Artist_Inspire_b: Cada cuadrado y salto se repite cuatro veces (usando
          un giro a la izquierda en el medio) para formar una unidad completa similar
          a un molinete.
        Course_4_Artist_Inspire_c: Cada molinete también se repite cuatro veces, con
          un giro a la derecha de ** 360 / lados **.
      grade5_artist_variables_octagons13_authored_hint:
        Course_4_Artist_Vars_13_a: Necesita dos bucles de repetir (uno dentro del
          otro) ambos repitiendo 'lados' veces.
        Course_4_Artist_Vars_13_b: |-
          El ciclo de repetición interno dibuja un octágono (girando a la izquierda).

          Luego, debe avanzar y girar a la derecha solo en el bucle externo.
        Course_4_Artist_Vars_13_c: Para ajustar la forma para que permanezca del mismo
          tamaño cuando cambia el número de lados, use el bloque matemático para dividir
          la longitud en píxeles por el número de lados.
      grade5_artist_variables_square7_authored_hint:
        Course_4_Artist_Vars_6_a: Para dibujar un polígono regular, gire ** 360 /
          lados ** cada vez.
      grade5_artist_variables_triangles1_authored_hint:
        grade5_artist_variables_triangles1_a: Para formar un ángulo interno de 60
          grados en este triángulo, recuerda girar el artista 120 grados.
        grade5_artist_variables_triangles1_b: Use el bucle `repetir` para acortar
          su código.
        grade5_artist_variables_triangles1_c: Dentro de tu bucle, querras avanzar
          50 píxeles, luego gira a la izquierda 120 grados.
      grade5_artist_variables_triangles1_2018_authored_hint:
        grade5_artist_variables_triangles1_a: Para formar un ángulo interno de 60
          grados en este triángulo, recuerda girar el artista 120 grados.
        grade5_artist_variables_triangles1_b: Use el bucle `repetir` para acortar
          su código.
        grade5_artist_variables_triangles1_c: Dentro de tu bucle, querras avanzar
          50 píxeles, luego gira a la izquierda 120 grados.
      grade5_artist_variables_triangles1_2019_authored_hint:
        grade5_artist_variables_triangles1_a: Para formar un ángulo interno de 60
          grados en este triángulo, recuerda girar el artista 120 grados.
        grade5_artist_variables_triangles1_b: Use el bucle `repetir` para acortar
          su código.
        grade5_artist_variables_triangles1_c: Dentro de tu bucle, querras avanzar
          50 píxeles, luego gira a la izquierda 120 grados.
      grade5_playlab_variables2_authored_hint:
        Course_4_Play_Lab_Vars_2_a: Asegúrese de establecer el número de `velocidad_perro`a
          algo más grande que` velocidad_gato`.
      gradek_adventurer_loops3_authored_hint:
        gradek_adventurer_loops3_a: Para cambiar la distancia que recorre el aventurero,
          cambia la cantidad de veces que se ejecuta el bucle.
        gradek_adventurer_loops3_b: "¡No olvides que el aventurero necesita caminar
          hacia abajo y recoger oro después de que termine el bucle `repetir`!"
      gradek_adventurer_loops4_authored_hint:
        gradek_adventurer_loops4_a: Si no puedes averiguar la respuesta de inmediato,
          intenta usar un trozo de papel para averiguar qué flechas necesitarás y
          buscar un patrón.
      gradek_adventurer_loops5_authored_hint:
        gradek_adventurer_loops5_a: Si no puedes averiguar lo que viene luego, intenta
          ejecutar el código para ver en donde finaliza Laurel.
      gradek_adventurer_loops7_challenge_authored_hint:
        gradek_adventurer_loops7_challenge_a: "¿El código se siente realmente largo?
          Intenta poner dos de tus bucles `repetir` dentro de otro bucle para hacerlo
          mucho más corto!"
      gradek_artist_loops3_authored_hint:
        artistLoopsK2_a: Si quiere que el lazo se repita más de 4 veces, usted puede
          cambiar el número en la parte superior del bloque.
      gradek_artist_loops4_authored_hint:
        artistLoopsK3_a: "¡Intente utilizando lo que ha aprendido acerca de los bloques
          repetir para completar este rompecabezas!"
      gradek_artist_loops7_authored_hint:
        gradek_artist_loops7_a: Intenta ejecutar el código para ver lo que ha sido
          escrito para ti.
        gradek_artist_loops7_b: "¿Cómo repetirías el código que te han dado?"
        gradek_artist_loops7_c: "¿Qué hace el código?  \n¿Qué se supone que debe hacer?
          \ \n¿Qué te dice eso?"
      gradek_artist_loops9_authored_hint:
        artistLoopsKA_a: Usa el bloque de salto para avanzar sin dibujar una línea.
      harvey_tictactoe_authored_hint:
        harvey_tictactoe: Puedes usar bloques `saltar` para moverte a otros espacios.
      iceage_hello1_authored_hint:
        iceage_hello1_a: Solo necesitas agregar un bloque para resolver este puzzle.
          Arrastre el bloque `decir` desde la barra de herramientas y conéctelo al
          bloque de evento `cuando ejecuta` que ya se encuentra en el área de trabajo.
          Luego, escribe "¡Hola!" dentro.
      iceage_hello1_2018_authored_hint:
        iceage_hello1_a: Solo necesitas agregar un bloque para resolver este puzzle.
          Arrastre el bloque `decir` desde la barra de herramientas y conéctelo al
          bloque de evento `cuando ejecuta` que ya se encuentra en el área de trabajo.
          Luego, escribe "¡Hola!" dentro.
      level 'grade3_Loops_10_authored_hint:
        2-3_Bee_Loops_4_a: Deberías terminar con cinco bloques dentro de tu bucle.
      level 'grade3_Loops_11_authored_hint:
        2-3_Bee_Loops_5_a: Si no puedes detectar los bloques para colocar `repetir`
          inmediatamente, comienza por codificar cada movimiento y busca un patrón.
      level 'grade3_Loops_12_authored_hint:
        2-3_Bee_Loops_6_a: Si no puedes decir qué debería ir en el bucle 'repetir',
          intenta arrastrar los bloques uno por uno y ve si puedes encontrar un patrón.
        2-3_Bee_Loops_6_b: Aquí deberían haber 6 bloques dentro del bucle 'repetir'
          cuando hayas terminado.
      level 'grade3_Loops_4_authored_hint:
        2-3_Bee_Loops_3B_a: Necesitas dos bucles `repetir` diferentes, uno después
          del otro.
      level 'grade3_Loops_5_authored_hint:
        2-3_Bee_Loops_7_a: La primera acción será un giro, en lugar de un movimiento.
        2-3_Bee_Loops_7_b: 'Si no puedes imaginar el bucle desde el principio, intenta
          programarlo a lo largo del camino, luego busca un patrón.  '
      level 'grade3_Loops_6_authored_hint:
        2-3_Bee_Loops_4A_a: La primera acción será un giro, en lugar de un movimiento.
        2-3_Bee_Loops_4A_b: La última parte del programa puede terminarse escribiendo
          código al final de su programa fuera de su bucle.
        2-3_Bee_Loops_4A_c: Si aún no puedes detectar los bucles, intenta codificarlo
          primero, luego ve lo que puedes combinar en un bucle 'repetir' al final.
      level 'grade3_Loops_8_authored_hint:
        2-3_Bee_Loops_2_a: Deberías terminar con cuatro bloques dentro de tu bucle.
      level 'grade3_Loops_9_authored_hint:
        2-3_Bee_Loops_3_a: Deberías tener 6 bloques dentro de tu bucle.
