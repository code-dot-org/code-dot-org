"fr":
  data:
    script:
      name:
        20-hour:
          desc: K-8 Intro au cours d'informatique
          Unplug1: Processus 1
          Maze: Processus 2
          Unplug2: Processus 3
          Unplug3: Processus 4
          Artist: Processus 5
          Unplug4: Processus 6
          Artist2: Processus 7
          Unplug5: Processus 8
          Farmer: Processus 9
          Unplug6: Étape 10 
          Artist3: Étape 11 
          Unplug7: Étape 12 
          Farmer2: Étape 13 
          Unplug8: Étape 14 
          Artist4: Étape 15 
          Unplug9: Étape 16 
          Farmer3: Étape 17 
          Unplug10: Étape 18 
          Artist5: Étape 19 
          Unplug11: Étape 20 
        Hour of Code:
          desc: Heure de Code
          Maze: Processus 1
        Edit Code:
          desc: Modifier le Code (bêta)
          MazeEC: Processus 1
        2014 Levels:
          desc: Rebond (bêta)
          Bounce: Processus 1
        Builder Levels:
          desc: Énigmes créées par l'utilisateur (bêta)
          Custom: Processus 1
        Flappy Levels:
          desc: Flappy Bird
          Flappy: Processus 1
        Jigsaw Levels:
          desc: Pièces de puzzle (bêta)
          Jigsaw: Processus 1
        Step Levels:
          desc: Labyrinthe (bêta)
          MazeStep: Palier de l'étape
        edit-code:
          desc: Modifier le Code (bêta)
          MazeEC: Processus 1
          Applab: Processus 2
          ArtistEC: Processus 3
          StudioEC: Processus 4
        events:
          desc: Rebond (bêta)
          Bounce: Processus 1
          Studio: Processus 2
        builder:
          desc: Énigmes créées par l'utilisateur (bêta)
          Custom: Processus 1
        flappy:
          desc: Flappy Bird
          Flappy: Processus 1
        jigsaw:
          desc: Pièces de puzzle (bêta)
          Jigsaw: Processus 1
        step:
          desc: Labyrinthe (bêta)
          MazeStep: Palier de l'étape
        wordsearch:
          desc: Concours d'orthographe (bêta)
          WordSearch: Processus 1
    game:
      name:
        Unplug1: Introduction à l'Informatique
        Maze: Le labyrinthe
        Multi: Les choix multiples
        Unplug2: L'algorithmique
        Unplug3: Programmation sur papier quadrillé
        Artist: L'Artiste
        Unplug4: Algorithmes
        Artist2: L'Artiste 2
        Unplug5: Fonctions
        Farmer: Le Fermier
        Unplug6: Instructions conditionnelles
        Artist3: L'Artiste 3
        Unplug7: Ecriture de chanson
        Farmer2: Le Fermier 2
        Unplug8: Abstraction
        Artist4: L'Artiste 4
        Unplug9: Les relais
        Farmer3: Le Fermier 3
        Unplug10: La Toile
        Artist5: L'Artiste 5
        Unplug11: Résumé
        MazeEC: Le labyrinthe
        Bounce: Rebond
        Flappy: Flappy Bird
        Jigsaw: Pièces de Puzzle
        MazeStep: Mode pas à pas du labyrinthe
        Wordsearch: Mots mêlés
        Webapp: Labo des applis
        ArtistEC: L'Artiste
        TextMatch: Correspondance de texte
        StudioEC: Labo
        Applab: Labo des applis
        NetSim: Simulateur d'Internet
    trophy:
      name:
        Bronze: Bronze
        Silver: Argent
        Gold: Or
    concept:
      description:
        sequence: Séquence
        if: Si bloc
        if_else: Sinon bloc
        loop_times: Répéter fois bloc
        loop_until: Répéter jusqu'au bloc
        loop_while: Pendant bloc
        loop_for: Compteur Bloc
        function: Fonctions
        parameters: Fonctions avec paramètres
    level:
      instructions:
        maze_2_2: 'Peux-tu m''aider à attraper le vilain cochon ? Assemble deux blocs
          « avancer plus » et clique sur « Démarrer » pour m''aider à y arriver. '
        maze_2_1: Ce cochon me hérisse les plumes. Aide-moi à l'atteindre !
        maze_2_2_5: Trace le chemin et amène-moi à ce stupide cochon. Évite les explosifs
          ou les plumes vont voler !
        maze_2_3: Guide-moi jusqu'à cette maudite créature verte ! (Fais attention
          aux explosifs…)
        maze_2_4: Reste calme et aide-moi à trouver cet affreux cochon. Sinon, je
          pourrais me fâcher !
        maze_2_5: Il y a un moyen d'attraper ce stupide cochon en 2 blocs seulement.
          Peux-tu le trouver ?
        maze_2_6: Essaie de me faire aller jusqu'à l'intrus vert à l'aide de seulement
          trois blocs.
        maze_2_7: Aide-moi à en finir avec ce vilain cochon en utilisant le moins
          de blocs possible. Essaie d'utiliser plusieurs blocs « répéter ».
        maze_2_8: 'Si un bloc est gris, tu ne peux pas le supprimer. Résous cette
          énigme en utilisant le bloc « répéter 3 fois ». Essaie d''y mettre ces trois
          blocs : avancer, avancer, tourner.'
        maze_2_9: 'OK, essaie le nouveau bloc « répéter jusqu''à » : il se répétera
          jusqu''à ce que j''atteigne l''ennuyeux cochon.'
        maze_2_10: OK, une dernière fois pour s'entraîner. Peux-tu résoudre ce puzzle
          à l'aide de seulement 4 blocs ?
        maze_2_11: Chère personne. Moi zombie. Moi faim. Doit… attraper… tournesol…
          Peux-tu m'y amener avec seulement 5 blocs ?
        maze_2_12: OK, c'est la même chose, en légèrement différent. Peux-tu le faire
          en seulement 5 blocs ?
        maze_2_13: 'Utilise le nouveau bloc « si » et laisse moi décider du moment
          pour tourner. Conseil : tu n''as besoin que d''un bloc de plus, mais apprends
          comment nous avons fait afin que tu puisses faire tout seul la prochaine
          fois.'
        maze_2_14: OK, c'est la même chose que le puzzle précédent, mais tu dois te
          rappeler de comment tu as utilisé le bloc « si » et le bloc « répéter »
          ensemble.
        maze_2_15: Moi vouloir tournesol ! Utilise un bloc « si » pour m'y envoyer
          avec le plus petit nombre de blocs.
        maze_2_16: OK, nous allons le refaire encore une fois pour nous entraîner.
          Ce n'est pas très différent, mais attention aux plantes carnivores !
        maze_2_17: Les blocs « si-sinon » testent une condition et exécutent le premier
          OU le deuxième bloc. Pour m'amener au tournesol, essaie d'utiliser ce nouveau
          bloc.
        maze_2_18: Encore un exercice avec le bloc « si-sinon ». Peux-tu y arriver
          dès le premier essai ?
        maze_2_19: Peux-tu ajouter exactement 3 blocs pour m'aider à suivre une route
          encore plus complexe ? Si tu le fais bien, je suis prêt à suivre toute voie
          sinueuse, peu importe sa longueur.
        turtle_1_1: Salut, je suis un artiste. Tu peux écrire du code pour me faire
          dessiner presque n'importe quoi. Utilise quelques blocs pour me faire dessiner
          sur les lignes grises de l'image.
        turtle_1_2: 'Maintenant, trace un carré. Note : utilise ta couleur préférée
          en la choisissant dans le nouveau bloc « choisir la couleur ».'
        turtle_1_3: Faire un carré à l'aide de seulement 3 blocs.
        turtle_1_4: 'Trace un triangle dont les côtés sont tous de couleurs différentes,
          en utilisant l''option « couleur au hasard » qui choisit une couleur différente
          à chaque fois. Astuce : tu devras déterminer jusqu’où tourner en cliquant
          sur le numéro du bloc « tourner ».'
        turtle_1_5: Maintenant, pour t'entraîner, trace un triangle puis un carré
          pour dessiner une enveloppe.
        turtle_1_6: 'Vois-tu comment dessiner ce triangle et ce carré ? Astuce : Fais
          d''abord le triangle, puis essaye de trouver de combien de degrés il faudra
          tourner avant de dessiner le carré.'
        turtle_1_7: OK, compliquons un peu les choses. Essaye de dessiner ces lunettes
          vertes. Les carrés font 100 pixels de côté, et ils sont reliés par une barre
          de 50 pixels. N'oublie pas de dessiner en vert !
        turtle_1_8: OK, essayez de comprendre ce qui se passe si vous exécutez ce
          code (ou cliquez sur « Démarrer » pour l'essayer). Ensuite, répétez-le suffisamment
          de fois pour finir le dessin. Les couleurs seront différentes à chaque fois.
        turtle_1_9: Vois-tu par quel nombre tu dois remplacer les points d'interrogation
          pour dessiner un cercle ?
        turtle_1_10: 'Tu l''as fait ! Maintenant, dessine tout ce que tu veux. Par
          exemple : un bonhomme en bâtons, un flocon de neige ou une spirale. Tu peux
          aussi essayer le nouveau bloc « régler la largeur ». Amuse-toi bien !'
        turtle_4_1: 'Peux-tu dessiner un triangle (avec des cotés de 100 pixels) avec
          seulement 3 blocs ? Astuce : utilise un bloc « répéter ».'
        turtle_4_2: Ajoute un bloc « tourner à droite de 90 degrés » quelque part
          au milieu du programme déjà présent sur l'espace de travail pour dessiner
          ces triangles.
        turtle_4_3: Ok, voilà le code que tu as écris pour dessiner un seul triangle.
          Peux-tu ajouter un bloc " répéter " et un bloc "tourner" pour faire une
          jolie fleur?
        turtle_4_4: 'Voici le même code du puzzle précédent, mais retourné de seulement
          36 degrés après avoir dessiné chaque triangle. Combien de fois ça doit répéter?
          (Astuce: après 360 degrés de rotation, le dessin va devenir un cercle)'
        turtle_4_5: 'Voici le même code du puzzle précédent, mais en répétant les
          retournements 36 fois. Combien de degrés doivent être les retournements?
          (Astuce : après 360 degrés de rotation, le dessin va devenir un cercle)'
        turtle_4_6: En utilisant seulement 3 blocs, peux-tu dessiner un carré avec
          des bords de 20 pixels?
        turtle_4_7: 'Voilà le code pour dessiner un carré du dernier puzzle. Peux-tu
          le répéter pour dessiner 10 carrés qui se touchent l''un à la suite de l''autre
          pour ressembler à une échelle? Astuce: tu as seulement besoin de 2 autres
          blocs.'
        turtle_4_8: Voici la solution de l'énigme précédente. Peux-tu ajouter seulement
          2 blocs de plus pour terminer le dessin ?
        turtle_4_9: Voici la solution de l'énigme précédente. De combien de degrés
          dois-tu tourner pour compléter le dessin ? (Tu devras probablement faire
          plusieurs essais)
        turtle_4_10: Voici la solution de l'énigme précédente. Combien de fois dois-tu
          répéter pour compléter le dessin ?
        turtle_4_11: Essaye de modifier les nombres dans les blocs « tourner » et
          « répéter » pour réaliser différents motifs. Ou bien, tente de changer le
          reste du code pour dessiner tout ce que tu veux.
        maze_karel_1_1: Salut, je suis un agriculteur. J'ai besoin de ton aide pour
          aplanir le terrain de ma ferme pour être prêt pour la plantation. déplace
          moi vers le tas de saleté et utilise le bloc de « supprimer » pour l'enlever.
        maze_karel_1_2: Ensuite, déplace-moi vers le trou et remplisse-le avec DEUX
          pelletées de terre, en utilisant le bloc « remplir ».
        maze_karel_1_3: déplace moi vers le tas de saleté et me dire combien de pelletées
          utiliser pour le supprimer avec le moins de blocs possible.
        maze_karel_1_4: 'Peux-tu m''aider à me débarrasser des quatre tas de saleté ?
          Astuce : utilise un bloc « répéter » si possible.'
        maze_karel_1_5: 'Aidez-moi à remplir tous ces trous avec 5 pelletées de terre.
          Astuce : tu peux insérer un bloc « répéter » dans le bloc « tant que ».'
        maze_karel_1_6: Retire toutes les tas de saleté, en utilisant aussi peu de
          blocs que possible. Les nouvelles options dans le menu déroulant du bloc
          « tant que » me permettent de savoir si je suis sur un tas ou un trou.
        maze_karel_1_7: Ouah, j'ai trouvé un trou très profond ! Je ne sais pas de
          combien de pelletées de terre je dois le remplir. Peux-tu écrire un programme
          qui le remplit jusqu'à ce que le terrain soit régulier ?
        maze_karel_1_8: aide moi à remplir le trou à l'extrémité du champ, à l'aide
          du moins de blocs possible.
        maze_karel_1_9: 'Guide-moi pour enlever toutes ces tas de saleté. Essaye d''utiliser
          aussi peu de blocs que possible. Astuce : essaye d''utiliser un bloc « tant
          que ».'
        maze_karel_1_10: Je travaille tard, il fait noir dehors, et je ne peux pas
          dire quelle taille les tas sont. Maintenant je n'ai pas toutes les options
          que j'avais l'habitude d'avoir sur le bloc "jusqu'à". Déplace moi le long
          du champ et s'il y a un tas, retire-le.
        maze_karel_1_11: 'Il fait encore noir dehors. Déplace moi le long du champ.
          S''il y a un tas, enlève-le et s''il y a un trou, remplis-le. Conseil :
          utilise le menu déroulant des options sur le bloc « if ».'
        turtle_2_1: 'Bonjour. Moi artiste zombie. Moi aimer dessiner ! Aide-moi à
          dessiner un carré dans une couleur particulière. Note importante : les mêmes
          blocs sont toujours disponibles mais ils ont été organisés en catégories.'
        turtle_2_2: Bienvenue à l'utilisation de fonctions qui te permettent de définir
          de nouveaux blocs ! Essaye le nouveau bloc "dessiner un carré", qui se trouve
          dans la catégorie "Fonctions", pour dessiner un petit carré vert de 50x50.
        turtle_2_3: Utilise le bloc « répéter » (dans la catégorie « Boucles ») pour
          dessiner 3 carrés de taille 100, séparés par une rotation de 120 degrés.
          Et fais-le en utilisant 3 couleurs différentes, choisies au hasard.
        turtle_2_4: 'Soyons un peu plus fantaisistes. Change le code pour dessiner
          36 carrés de 100 pixels de largeur, en se tournant de 10 degrés à chaque
          fois. Astuce : tu peux utiliser le curseur de vitesse pour me faire aller
          plus vite.'
        turtle_2_5: Dessine des carrés avec les cotés de 50, 60, 70, 80, et 90 pixels.
          Tu devras utiliser la fonction "dessine un carré" 5 fois.
        turtle_2_6: 'OK, ce programme va utiliser un compteur, pour dessiner les mêmes
          carrés que tout à l''heure. Tu souhaites que le carré soit de la taille
          définie par le compteur, donc utilise le bloc « compteur ». Astuce : il
          se trouve dans la catégorie des Variables.'
        turtle_2_7: Voilà un programme pour dessiner une spirale, mais les blocs sont
          désactivés donc ils ne vont pas s'exécuter. Fais un nouveau programme en
          utilisant un bloc « compter avec » (dans la catégorie des Boucles) et un
          bloc « compteur » (dans la catégorie des Variables) pour dessiner la même
          spirale.
        turtle_2_7_5: Il y a une nouvelle fonction "dessine un bonhomme de neige"
          (dans la catégorie Fonctions). Dessine deux bonhommes de neige, un de hauteur
          250 et l'autre 100.
        turtle_2_8: Celui-ci est un peu plus délicat. Utilise la fonction « dessiner
          un bonhomme de neige » et le nouveau bloc « sauter en avant » (dans la catégorie
          des Actions). Dessine 3 bonhommes de neige de différentes couleurs, séparés
          par 100 pixels.
        turtle_2_9: Utilise une boucle « compter avec » pour dessiner une famille
          de bonhommes de neige de hauteurs 110, 100, 90, 80, et 70 pixels. Les bonhommes
          de neige doivent tous être séparés par 60 pixels.
        turtle_2_10: Ce code permet de dessiner différentes spirales. Que se passe-t-il
          si tu modifies la valeur de rotation ? Ou si tu choisis une couleur au hasard
          dans la boucle ? Dessine ce qu'il vous plaît.
        maze_karel_2_1: 'Essaye d''utiliser les blocs pour m''aider à enlever toutes
          les mottes et remplir tous les trous du terrain. Essaye d''utiliser des
          boucles à la place d''un grand nombre de blocs. Astuce : tu peux insérer
          une boucle à l''intérieur d''une autre boucle.'
        maze_karel_2_2: Nous avons défini notre propre bloc appelé « remplir 5 »,
          qui se trouve maintenant dans la catégorie des Fonctions. Utilise-le pour
          m'aider à remplir ce trou.
        maze_karel_2_3: Utilise le nouveau bloc avec la fonction « remplir 5 » pour
          me faire remplir tous les trous. Tu devra faire glisser le bloc « remplir
          5 » hors de la catégorie des Fonctions.
        maze_karel_2_4: Définis une nouvelle fonction qui enlève 7 pelletées de terre.
          Puis utilise-la pour écrire un programme qui me permet d'éradiquer tous
          les tas.
        maze_karel_2_5: Crée une nouvelle fonction qui enlève 6 pelletées d'un tas,
          et utilise-la pour m'aider à raser tous les tas.
        maze_karel_2_6: Utilise deux nouvelles fonctions, « remplir 8 » et « retirer
          8 », pour m'aider à raser la motte et remplir le trou.
        maze_karel_2_7: Il y a une vache sur mon champ ! Écris une nouvelle fonction
          qui va m'aider à éviter la vache et à enlever la motte de terre. Mets tous
          tes blocs dans la nouvelle fonction.
        maze_karel_2_8: Utilises cette nouvelle fonction, "éviter la vache et enlever
          1", pour m'aider à enlever tous les tas.
        maze_karel_2_9: OK, voici une fonction qui supprime 4 tas de saleté distincts
          alignés verticalement. Essaye d'insérer cette fonction dans une boucle,
          pour enlever toutes les tas en n'utilisant que quelques blocs de plus.
        maze_karel_2_10: Déplaces-moi à travers le terrain, et utilises ces deux fonctions
          pour m'aider à supprimer tous les tas et remplir tous les trous.
        turtle_3_1: Ce puzzle te montre comment les fonctions « dessiner un carré »
          et « dessiner un cercle » sont définies. Définir une fonction n'exécute
          pas directement son contenu. Tu dois prendre le bloc « dessiner un carré »
          et le poser sur l'espace de travail pour que le dessin soit effectué.
        turtle_3_2: En utilisant la fonction "dessiner un carré" comme exemple, crée
          une fonction "dessiner un triangle" et utilise-la.
        turtle_3_3: 'Dessine des clôtures triangulaires autour des chats et une clôture
          carrée autour de la vache. Astuce : tu peux essayer le programme plusieurs
          fois au fur et à mesure de ta progression.'
        turtle_3_4: Regarde si tu peux comprendre comment utiliser "dessiner un carré"
          et "dessiner un triangle" ( et quelques autres blocs) pour dessiner une
          maison autour du lion.
        turtle_3_5: 'Maintenant, crée une nouvelle fonction "créer une maison" et
          utilise-la pour abriter deux chats. Astuce : crée une nouvelle fonction
          en utilisant le bloc "faire quelque chose", et écris ton propre texte pour
          nommer le bloc.'
        turtle_3_6: 'En vous basant sur l''exemple de la fonction « dessiner un carré »,
          ajoutez un paramètre nommé « longueur » à la fonction « dessiner un triangle ».
          Ensuite, dessinez des triangles de différentes tailles. (Astuce : cliquez
          sur l''étoile pour ajouter un paramètre à la fonction.)'
        turtle_3_7: Ajoutez un paramètre nommé « longueur » à la fonction « dessiner
          une maison » et construisez une grande maison pour l'éléphant (avec des
          côtés de 150 pixels de long).
        turtle_3_8: Modifier « dessiner une maison » pour que je me retrouve dans
          le coin inférieur droit après avoir dessiné une nouvelle maison. Utilisez
          cette fonction modifiée pour dessiner trois maisons.
        turtle_3_9: Saurez-vous remettre en place la fonction « dessiner une maison »
          sans aucune indication ? Lancez-vous, puis dessinez une nouvelle rangée
          de maisons.
        turtle_3_10: Vous avez beaucoup appris ! Vous pouvez à présent profiter de
          vos nouvelles connaissances pour dessiner tout ce dont vous avez envie.
          Essayez de dessiner une étoile, ou une spirale, ou encore un flocon de neige.
        maze_karel_debug_seq_1: Bienvenue au débogage ! Mon code ne fonctionne pas
          bien. Pouvez-vous repérer le problème et le corriger afin que je puisse
          aplanir mon champ et qu'il soit prêt pour la plantation ?
        maze_karel_debug_seq_2: Qu'est-ce qui ne va pas dans ce programme ? Quelle
          correction pouvez-vous effectuer afin que je puisse enlever cette motte
          de terre ?
        maze_karel_debug_repeat: Déboguez ce programme pour moi afin que mon terrain
          soit beau et plat.
        maze_karel_debug_while: Comment pouvez-vous modifier ce programme pour m'aider
          à combler le trou ?
        maze_karel_debug_if: À l'aide ! Corrigez ce programme afin que je puisse aplanir
          complètement mon champ.
        maze_karel_debug_if_else: Déboguez ce programme afin que je remplisse tous
          les trous et rase toutes les mottes.
        maze_karel_debug_function_1: Quelle modification pouvez-vous effectuer dans
          ce programme pour m'aider à retirer toutes les mottes ?
        maze_karel_debug_function_2: Pouvez-vous déboguer ce programme pour moi afin
          que je puisse aplanir mon champ ?
        maze_karel_debug_function_3: Modifiez ce programme pour que je rase toutes
          les mottes présentes sur mon terrain.
        turtle_5_1: Essayez d'exécuter ce programme, et apportez-y des modifications
          pour voir quels changements sont produits. Comprenez-vous comment cela fonctionne
          ? (Vous pouvez également tout supprimer et mettre quelque chose de totalement
          différent à la place.)
        turtle_5_2: Essayez d'exécuter ce programme, et apportez-y des modifications
          pour voir quels changements sont produits. Comprenez-vous comment cela fonctionne
          ? (Vous pouvez également tout supprimer et mettre quelque chose de totalement
          différent à la place.)
        turtle_5_3: Essayez d'exécuter ce programme, et apportez-y des modifications
          pour voir quels changements sont produits. Comprenez-vous comment cela fonctionne
          ? (Vous pouvez également tout supprimer et mettre quelque chose de totalement
          différent à la place.)
        turtle_5_4: Essayez d'exécuter ce programme, et apportez-y des modifications
          pour voir quels changements sont produits. Comprenez-vous comment cela fonctionne
          ? (Vous pouvez également tout supprimer et mettre quelque chose de totalement
          différent à la place.)
        turtle_5_5: Essayez d'exécuter ce programme, et apportez-y des modifications
          pour voir quels changements sont produits. Comprenez-vous comment cela fonctionne
          ? (Vous pouvez également tout supprimer et mettre quelque chose de totalement
          différent à la place.)
        turtle_5_6: Essayez d'exécuter ce programme, et apportez-y des modifications
          pour voir quels changements sont produits. Comprenez-vous comment cela fonctionne
          ? (Vous pouvez également tout supprimer et mettre quelque chose de totalement
          différent à la place.)
        maze_3_1: Je dois atteindre ce cochon ! Écrivez deux appels à move(); pour
          que je puisse retrouver mes œufs.
        maze_3_2: Écrivez-moi un programme pour que je puisse aller jusqu'à ce cochon.
        maze_3_3: Comment puis-je atteindre le cochon ? Assurez-vous que je ne trébuche
          pas sur la caisse pleine d'explosifs !
        maze_3_4: Argh ! Écrivez-moi un programme qui me permette d'éviter les explosifs
          et qui me conduise au cochon.
        bounce_1: Attachez un bloc au bloc « lors de l'action flèche gauche » et cliquez
          sur le bouton « Démarrer ». Déplacez la raquette à l'aide de la flèche gauche
          pour atteindre l'objectif d'arrivée.
        bounce_2: Attachez un bloc aux blocs « lors de l'action flèche droite » et
          « lors de l'action flèche gauche ». Déplacez la raquette pour atteindre
          les deux cibles d'arrivée.
        bounce_3: Maintenant, essayez de produire un résultat semblable avec le bloc
          « lors de l'action flèche du haut ». Déplacez la raquette vers la cible
          d'arrivée en haut.
        bounce_4: Cette fois, vous devez ajouter quatre blocs. Déplacez la raquette
          vers chacune des quatre cibles d'arrivée pour résoudre cette énigme.
        bounce_5: Nous allons envoyer une balle qui va tomber vers la raquette. Attachez
          un bloc au bloc « lorsque la balle touche la raquette » pour faire en sorte
          que la balle atteigne la cible d'arrivée.
        bounce_6: Maintenant, la cible est en haut. Il vous faudra attacher des blocs
          aux deux blocs « lorsque la balle touche… » pour résoudre cette énigme.
        bounce_7: Attachez des blocs à chacun des blocs « lors ». Faites rebondir
          la balle jusqu'à ce qu'elle touche la cible d'arrivée.
        bounce_10: Il y a à présent une cible en haut. Attachez les blocs « marquer
          un point » et « marquer un point pour l'adversaire » aux blocs « lorsque
          la balle est dans la cible » et « lorsque la balle manque la raquette »
          pour mettre le jeu en place. Regardez combien de points vous pouvez marquer
          avant que votre adversaire en marque deux.
        bounce_11: Vous pouvez à présent attacher des blocs au bloc « lors du lancement
          du jeu ». Vous devez insérer le nouveau bloc « lancer une nouvelle balle »
          à plusieurs endroits. Essayez aussi de changer l'arrière-plan ou la vitesse
          de la raquette ou de la balle et voyez combien de points vous pouvez marquer
          avant que votre adversaire en marque deux.
        bounce_12: Créez votre propre jeu Rebond. Vous pouvez changer tous les éléments
          visuels et les règles. Une fois que vous avez terminé, cliquez sur Terminer
          pour permettre à vos amis d'essayer votre jeu sur leur téléphone.
        Custom_builder: Faites glisser les blocs depuis la boîte à outils jusqu'à
          l'espace de travail pour former le niveau que vous souhaitez réaliser. Cliquez
          sur « Démarrer » quand vous êtes prêt.
        flappy_1: Attachez un bloc au bloc « lors d'un clic », puis cliquez sur « Démarrer ».
          Cliquez sur l'écran ou tapotez-le pour déplacer Flappy vers la cible.
        flappy_2: À présent, nous avons ajouté du sol. Attachez un bloc au bloc « lorsque
          le sol est touché ». Votre code doit « terminer le jeu » lorsque Flappy
          s'écrase.
        flappy_3: Le bloc « lors du lancement » vous permet d'exécuter du code au
          démarrage de votre jeu.  Essayez de régler la vitesse du niveau et le battement
          d'ailes.
        flappy_4: Flappy volera à travers les obstacles à moins que vous mettiez en
          place le code pour qu'il s'écrase. Attachez un bloc au bloc « lors de la
          rencontre avec un obstacle ». Votre code doit « terminer le jeu » lorsque
          Flappy s'écrase sur un tuyau pour la première fois.
        flappy_5: Ajoutons un tableau de scores, et comptons les points quand Flappy
          passe les obstacles. Ajoutez les bonnes instructions au bloc « lors du dépassement
          d'un obstacle », puis marquez des points en faisant voler Flappy à travers
          les tuyaux.
        flappy_6: Regardez si vous pouvez toujours marquer un point en changeant l'énergie
          que Flappy met dans ses battements d'ailes.
        flappy_7: Ensuite, essayez de changer l'arrière-plan en attachant un autre
          bloc à bloc « lors du lancement ».
        flappy_8: Vous pouvez changer l'apparence à tout moment, pas seulement au
          lancement du jeu. Essayez donc de choisir un arrière-plan aléatoire lorsque
          d'autres événements se produisent, par exemple, lors du dépassement d'un
          obstacle.
        flappy_9: Pour améliorer les choses, quand tu touches un obstacle, plutôt
          qu'arrêter le jeu, essaye de remettre le score à 0.
        flappy_11: Créez votre propre jeu Flappy Bird. Vous pouvez changer tous les
          éléments visuels et tous les paramètres, même la pesanteur. Une fois que
          vous avez terminé, cliquez sur Terminer pour permettre à vos amis d'essayer
          votre jeu sur leur téléphone.
        flappy_k1_1: Jouer à Flappy Bird
        flappy_k1_2: Attaches un bloc au bloc « lors d'un clic », puis cliques sur
          « Lancer ». Cliques sur l'écran ou tapotes-le pour déplacer Flappy vers
          la cible.
        flappy_k1_3: À présent, nous avons ajouté du sol. Attachez un bloc au bloc
          « lorsque le sol est touché ». Votre code doit « terminer le jeu » lorsque
          Flappy s'écrase.
        flappy_k1_4: Le bloc « lors du lancement » vous permet d'exécuter du code
          au démarrage de votre jeu.  Essayez de régler la vitesse du niveau et le
          battement d'ailes.
        flappy_k1_5: Flappy volera à travers les obstacles à moins que vous mettiez
          en place le code pour qu'il s'écrase. Attachez un bloc au bloc « lors de
          la rencontre avec un obstacle ». Votre code doit « terminer le jeu » lorsque
          Flappy s'écrase sur un tuyau pour la première fois.
        flappy_k1_6: Ajoutons un tableau de scores, et comptons les points quand Flappy
          passe les obstacles. Ajoutez les bonnes instructions au bloc « lors du dépassement
          d'un obstacle », puis marquez des points en faisant voler Flappy à travers
          les tuyaux.
        flappy_k1_7: Regardez si vous pouvez marquer des points en dépassant des obstacles.
        flappy_k1_8: Ensuite, essayez de changer l'arrière-plan en attachant un autre
          bloc à bloc « lors du lancement ».
        flappy_k1_9: Essayez de modifier le joueur en attachant un bloc « choisir
          le personnage » pour le bloc « lors du lancement ».
        jigsaw_1: Clique sur le bloc
        jigsaw_2: Glisse le bloc sur la cible
        jigsaw_3: Ordonne les blocs pour former l'image
        jigsaw_4: Ordonne les blocs pour former l'image
        jigsaw_5: Ordonne les blocs pour former l'image
        jigsaw_6: Ordonne les blocs pour former l'image
        jigsaw_7: Ordonne les blocs pour former l'image
        jigsaw_8: Ordonne les blocs pour former l'image
        jigsaw_9: Ordonne les blocs pour former l'image
        jigsaw_10: Ordonne les blocs pour former l'image
        jigsaw_11: Ordonne les blocs pour former l'image
        jigsaw_12: Ordonne les blocs pour former l'image
        jigsaw_13: Résous l'énigme !
        mazestep_1: Description de l'étape du labyrinthe ici
        mazestep_2: Description de l'étape du labyrinthe ici
        mazestep_3: Description de l'étape du labyrinthe ici
        mazestep_4: Description de l'étape du labyrinthe ici
        mazestep_5: Description de l'étape du labyrinthe ici
        studio_c2_1: Peux-tu faire dire « Bonjour » à ce chien ?
        studio_c2_2: Peux-tu faire dire quelque chose au chien puis faire parler le
          chat juste après ?
        studio_c2_3: Peux-tu écrire un programme pour que ce chien se déplace jusqu'au
          chat?
        studio_c2_4: Peux-tu écrire un programme qui déplace le chien jusqu'au chat,
          et qui fait dire « Bonjour » au chat lorsque le chien l'atteint ?
        studio_c2_5: Peux-tu écrire un programme pour faire dire « Bonjour » à la
          pieuvre lorsque l'on clique dessus ?
        studio_c2_6: Peux-tu écrire un programme qui déplace ce manchot sur chacun
          des drapeaux d'arrivée, en utilisant les touches fléchées du clavier haut
          ↑, bas ↓, gauche ← et droite → ?
        studio_c2_7: Le bloc « répéter à l'infini » permet d'exécuter du code en continu.
          Peux-tu assembler les blocs qui vont permettre à ce dinosaure de se déplacer
          vers le haut et vers le bas sans qu'il s'arrête jamais ?
        studio_c2_8: Peux-tu faire dire « Aïe ! » au manchot et jouer le son de « heurt »
          lorsqu'il rentre dans le dinosaure, puis le déplacer avec les flèches pour
          que cela se produise ?
        studio_c2_9: Peux-tu ajouter un bloc qui marque un point lorsque le manchot
          croise la pieuvre, puis le déplacer avec les flèches jusqu'à ce que tu marques
          un point ?
        studio_c2_10: Peux-tu ajouter des blocs pour changer l'arrière-plan et la
          vitesse du manchot, puis le déplacer avec les flèches jusqu'à ce que tu
          marques un point ?
        studio_c2_11: Crée ta propre histoire! Quand tu as fini, clique sur Terminer
          pour que tes amis puissent essayer ton histoire sur leurs téléphones.
        studio_c3_story_1: Peux-tu faire dire « Bonjour » à ce chien ?
        studio_c3_story_2: Peux-tu faire dire quelque chose au chien puis faire parler
          le chat juste après ?
        studio_c3_story_3: Peux-tu écrire un programme pour que ce chien se déplace
          jusqu'au chat?
        studio_c3_story_4: Peux-tu écrire un programme qui déplace le chien jusqu'au
          chat, et qui fait dire « Bonjour » au chat lorsque le chien l'atteint ?
        studio_c3_story_5: Peux-tu ajouter un bloc pour rendre la pieuvre heureuse ?
        studio_c3_story_6: Crée ta propre histoire! Quand tu as fini, clique sur Terminer
          pour que tes amis puissent essayer ton histoire sur leurs téléphones.
        studio_c3_game_1: Peux-tu écrire un programme pour faire dire « Bonjour »
          à la pieuvre lorsque l'on clique dessus ?
        studio_c3_game_2: Peux-tu écrire un programme qui déplace ce manchot sur chacun
          des drapeaux d'arrivée, en utilisant les touches fléchées du clavier haut
          ↑, bas ↓, gauche ← et droite → ?
        studio_c3_game_3: Le bloc « répéter à l'infini » permet d'exécuter du code
          en continu. Peux-tu assembler les blocs qui vont permettre à ce dinosaure
          de se déplacer vers le haut et vers le bas sans qu'il s'arrête jamais ?
        studio_c3_game_4: Peux-tu faire dire « Aïe ! » au manchot et jouer le son
          de « heurt » lorsqu'il rentre dans le dinosaure, puis le déplacer avec les
          flèches pour que cela se produise ?
        studio_c3_game_5: Peux-tu ajouter un bloc qui marque un point lorsque le manchot
          croise la pieuvre, puis le déplacer avec les flèches jusqu'à ce que tu marques
          un point ?
        studio_c3_game_6: Peux-tu ajouter des blocs pour changer l'arrière-plan et
          la vitesse du manchot, puis le déplacer avec les flèches jusqu'à ce que
          tu marques un point ?
        studio_c3_game_7: Crée ton propre jeu. Quand tu as fini, clic sur Terminer
          pour laisser tes amis essayer ton jeu sur leur téléphone.
        studio_playlab_1: Pingouin souhaite te dire "bonjour" - peux tu l'aider?
        studio_playlab_2: L'Homme des cavernes (acteur 1)  and la Femme des cavernes
          (acteur 2) aimeraient se dire "bonjour". Peux tu les aider en utilisant
          le bloc "dit" deux fois?
        studio_playlab_3: Peux-tu aider Mademoiselle Tennis à rejoindre le drapeau
          ?
        studio_playlab_4: Peux-tu aider Monsieur Tennis (acteur 1) à rejoindre Mademoiselle
          Tennis (acteur 2) et à jouer un son lorsqu'il y arrive ?
        studio_playlab_5: Peux tu aider le Robot spatial à dire "salutations terriens"
          lorsque l'on clic? N'oublie pas de cliquer après avoir cliqué sur Cours
        studio_playlab_6: Peux tu aider la Sorcière à se déplacer avec les flèches
          haut/bas/droite/gauche pour récupérer toutes les boules de feu magiques?
        studio_playlab_7: Le bloc "répéter pour toujours" permet d'exécuter du code
          en continu. Peux-tu y attacher des blocs pour aider le magicien à se déplacer
          vers la droite et vers la gauche alternativement ?
        studio_playlab_8: Peux-tu ajouter un bloc pour ajouter un point au score et
          un autre pour jouer un son quand la licorne percute le magicien, et  déplace-la
          à l'aide des flèches jusqu'à marquer à nouveau ?
        studio_playlab_9: Définis l'arrière-plan de cette invasion extra-terrestre,
          et aide le robot spatial à atteindre l'extra-terrestre plus rapidement en
          changeant sa vitesse. Déplace-le alors avec les flèches pour atteindre le
          robot et alerter tout le monde
        studio_playlab_10: Crée ton propre jeu. Quand tu as fini, clic sur Terminer
          pour laisser tes amis essayer ton jeu sur leur téléphone.
        studio_full_sandbox: Crée ton propre jeu. Quand tu as fini, clic sur Terminer
          pour laisser tes amis essayer ton jeu sur leur téléphone.
        studio_k1_1: Peux-tu faire dire « Bonjour » à ce chien ?
        studio_k1_2: Peux-tu faire dire quelque chose au chien puis faire parler le
          chat juste après ?
        studio_k1_3: Peux-tu écrire un programme pour que ce chien se déplace jusqu'au
          chat?
        studio_k1_4: Déplacez le chien jusqu'au chat et faites dire « Bonjour » au
          chat une fois la destination atteinte.
        studio_k1_5: Peux-tu ajouter un bloc pour rendre la pieuvre heureuse ?
        studio_k1_6: Crée ta propre histoire! Déplace le chat et le chien autour,
          et fais-les dire des choses.
        maze_wordsearch_k_1: Déplace-moi pour épeler le mot EST
        maze_wordsearch_k_2: Déplace-moi pour épeler le mot SUD
        maze_wordsearch_k_3: Déplace-moi pour épeler le mot OUEST
        maze_wordsearch_k_4: Déplace-moi pour épeler le mot NORD
        maze_wordsearch_k_6: Déplace-moi vers l'Est puis vers le Sud pour épeler le
          mot SAUTER
        maze_wordsearch_k_9: Déplace-moi dans une direction, puis une autre, pour
          épeler le mot CODE
        maze_wordsearch_k_13: Déplace-moi dans une direction, puis une autre, pour
          épeler le mot DÉBOGAGE
        maze_wordsearch_k_15: Déplace-moi dans une direction, puis une autre, pour
          épeler le terme AU-DESSUS
        maze_wordsearch_k_16: Déplace-moi dans une direction, puis une autre, pour
          épeler le terme EN DESSOUS
        maze_wordsearch_k_20: C'est un test ! Déplace-moi dans une direction, puis
          une autre, pour épeler le mot HISTOIRE
        applab_ec_simple: Crées ton applu en utilisant les blocs de la boite à outils.
        turtle_ec_1_2: 'Maintenant, dessinez un carré. NOTE: utilisez votre couleur
          préferrée en la choisissant dans le nouveau block "penColor".'
        turtle_ec_1_10: 'Bien joué ! Maintenant, dessinez ce que vous voulez. Quelques
          idées plaisantes: un bonhomme allumette, flocon de neige ou une spirale.
          Essayez également le nouveau "penWidth" block. Amusez-vous bien !'
        studio_ec_sandbox: Crée ton propre jeu. Quand tu as fini, clic sur Terminer
          pour laisser tes amis essayer ton jeu sur leur téléphone.
    video:
      name:
        maze_intro: Intro au Labyrinthe
        artist_intro: Introduction à l'Artiste
        farmer_intro: Introduction au Fermier
        flappy_intro: Introduction à Flappy Bird
        loop_times: Bloc Répéter plusieurs fois
        loop_until: Bloc Répéter jusqu'à
        if: Bloc Si
        if_else: Bloc Si/sinon
        if_else_scrat: Bloc Si/sinon
        function: Fonctions
        loop_while: Bloc Tant que
        loop_for: Bloc Compteur
        parameters: Fonctions avec Paramètres
        hoc_wrapup: Conclusion de l'heure de programmation
        Unplug1: Qu'est-ce que CS?
        Unplug2: L'algorithmique
        Unplug3: Programmation sur papier quadrillé
        Unplug4: Algorithmes
        Unplug5: Fonctions
        Unplug6: Instructions conditionnelles
        Unplug7: Écriture de chansons
        Unplug8: Abstraction
        Unplug9: Les relais
        Unplug10: Internet
        Unplug11: Résumé et ouverture
        C1_happy_maps_unplugged: Cartes joyeuses
        C1_moveitmoveit_unplugged: Déplacez le, déplacez le
        C1_bigevent_unplugged: Le Grand Evénement
        C1_getting_loopy: Tourner en rond
        C1_pair_programming: Programmation à deux
        C1_maze_intro_sequencing: Introduction au séquencement du labyrinthe
        C1_maze_debugging: Debuggage du labyrinthe
        C1_bee_level_intro: Niveau abeille - Introduction
        C1_artist_intro: Introduction à l'Artiste
        C1_spelling_bee_intro: Intro du concours d'orthographe
        C1_zuck_repeat_loop: Labyrinthe et boucles
        C1_bee_loops: Abeilles et boucles
        C1_maze_loops: Labyrinthe et boucles
        C1_playlab_storytelling: Jouer au Labo - Créer une Histoire
        C1_planting_seed: Planter une Graine
        C1_building_foundation: Créer une Fondation
        C1_going_places_safely: Se déplacer en toute sécurité
        C2_maze_intro: Introduction au Dédale
        C2_artist_intro: Introduction à l'Artiste
        C2_zuck_repeat_loop: Labyrinthe et boucles
        C2_artist_loops: Boucles d'artiste
        C2_artist_debugging: Artiste et le débogage
        C2_bee_loops: Abeilles et boucles
        C2_bee_debugging: Abeilles et débogage
        C2_bee_conditionals: Abeilles et instructions conditionnelles
        C2_playlab_createstory: Jouer au Labo - Créer une Histoire
        C2_graph_paper: Programmation sur papier quadrillé
        C2_conditionals_with_cards: Instructions conditionnelles
        C2_binary_bracelets: Bracelets binaires
        C2_relay_programming: Les relais
        C2_paper_airplanes: Avions en papier
        C2_digital_footprint: Votre empreinte numérique
        C2_digital_footprint_v2: Votre empreinte numérique
        C3_maze_level_4: Labyrinthe et boucles
        C3_artist_intro: Introduction à l'Artiste
        C3_artist_functions: 'Artiste : les fonctions'
        C3_bee_functions: Abeilles et fonctions
        C3_bee_conditionals: Abeilles et instructions conditionnelles
        C3_maze_conditionals: 'Labyrinthe : instructions conditionnelles'
        C3_artist_nested_loops: Boucles imbriquées
        C3_farmer_while: Pendant que les Boucles
        C3_bee_nested_loops: Boucles imbriquées
        C3_bee_debugging: Abeilles et debugging
        C3_bounce: Rebond
        C3_playlab_create_game: Jouer au Labo - Créer un Jeu
        C3_computational_thinking: L'algorithmique
        C3_dice_race: Course de Dés
        C3_internet: Internet
        C3_crowdsourcing: Financement participatif
        C3_functional_suncatchers: Vitraux fonctionnels
        C3_songwriting_with_parameters: Composition de chansons avec réglages
        C4_intro: Introduction
        C4_loops_zombie: Boucles
        C4_bee_conditional: Abeilles et instructions conditionnelles
        C4_variables_artist: 'Artiste : variables'
        C4_variables_playlab: Variables - Labo
        C4_for_loops: Boucles for
        C4_for_loops_bee: Boucles for
        C4_for_loops_no_bee: Boucles for
        C4_math_artist: Programmation de l'Artiste avec des maths
        C4_function_edit: Edition de fonctions
        C4_function_create: Création de fonctions
        C4_function_parameters: Fonctions avec Paramètres
        C4_conditionals: Instructions conditionnelles
        C4_unplugged_algorithms: Algorithmes avec des Tangrams
        C4_unplugged_madlibs: Mad Libs
        C4_unplugged_variables: Variables en enveloppes
        C4_unplugged_forloops: Boucles for
        C4_unplugged_parameters: Composition de chansons avec des paramètres
        C4_unplugged_binary: Binaire
        frozen_intro: Intro à l'Heure de Code
        frozen_loops: Introduction aux boucles
        frozen_functions: Introduction aux fonctions
        playlab_intro: Introduction au Labo
        playlab_events: Évènements du Play Lab
        playlab_repeat_forever: Play Lab Répétition Infinie
        tutorial_puzzle_challenge: Tutoriel Puzzle Challenge
        infinity_playlab_intro: Play Lab - Introduction
        infinity_playlab_events: Play Lab - événements
        infinity_playlab_repeat_forever: Play Lab Répétition Infinie
        csp_applab_functions: Introduction aux fonctions
        csp_concept_rgb: A Little Bit About Pixels
        csp_pixelation_color_1: Color pixelation widget - Part 1
        csp_pixelation_color_2: Color pixelation widget - Part 2
        csp_pixelation_color_3: Color pixelation widget - Part 3
        csp_pixelation_bw: Black and white pixelation widget
        csp_U1L14_tipstricks: Unit 1 Lesson 14 Teacher Tips & Tricks
        csp_textcompression: Text compression widget
        csp_textcompression_new: Text compression widget
        csp_internetsimulator_1: Internet Simulator - Part 1
        csp_internetsimulator_2: Internet Simulator - Part 2
        csp_internetsimulator_3: Internet Simulator - Part 3
        alg_1_intro: CS in Algebra - Introduction
        alg_2_eval_block: CS in Algebra - Evaluation Blocks
        alg_3_pemdas: CS in Algebra - Order of Operations
        alg_4_data_types: CS in Algebra - Data Types
        alg_5_contracts: CS in Algebra - Contracts
        alg_6_variables: CS in Algebra - Variables
        alg_7_function: CS in Algebra - Functions
        alg_8_design_recipe: CS in Algebra - Design Recipe
        alg_9_booleans: CS in Algebra - Booleans
        alg_10_conditionals: CS in Algebra - Conditionals
        alg_11_coordinate_plane: CS in Algebra - Coordinate Plane
        alg_12_biggame_variables: CS in Algebra - Big Game Variables
        alg_13_biggame_animation: CS in Algebra - Big Game Animation
        alg_14_biggame_booleans: CS in Algebra - Big Game Booleans
        alg_15_biggame_update_player: CS in Algebra - Big Game Update Player
        alg_16_biggame_collision_detection: CS in Algebra - Big Game Collision Detection
        alg_17_sambat_compound_booleans: CS in Algebra - Compound Booleans
        hoc2015_preview_blocks: Make your own game blocks
        hoc2015_preview_typing: Make your own game typing
        hoc2015_preview_conclusion: Make your own game conclusion
    callout:
      text:
        drag_blocks: Attrape un bloc « avancer plus » et attache-le sous l'autre bloc
        run: Clique sur « Démarrer » pour essayer ton programme
        watch_again: Clique ici pour revoir la vidéo
        gray_block_explanation: Les blocs gris ne peuvent pas être supprimés. Peux-tu
          néanmoins résoudre l'énigme ?
        show_code_explanation: Clique ici pour voir le code du programme que tu es
          en train de réaliser
        instructions_repeat_explanation: Les consignes de chaque énigme sont reprises
          ici
        category_explanation: Vous avez toujours accès aux mêmes blocs mais ils ont
          à présent été organisés en catégories
        set_sprite_image: Attachez un bloc « choisir l'image pour le personnage »
          au bloc « lorsque l'histoire commence » pour ajouter un personnage à l'histoire
        studio_say_text: Entrez ce que vous souhaitez que votre personnage dise dans
          ces guillemets
        jigsaw_click: Clique sur ce bloc !
        move_elsa_forward: Faites glisser un bloc « Avancer » et attachez le sous
          la bloc «Lors du lancement» pour faire avancer Elsa
        turn_elsa: Utilise le bloc « Tourner » pour faire tourner Elsa. Le nombre
          dans le menu déroulant détermine de combien de degrés Elsa tournera
        replace_questions: Utilise le menu déroulant pour remplacer "???" par un nombre
        replace_questions_degree: Utilise le menu déroulant pour remplacer "???" avec
          le bon nombre de degrés à tourner
        repeat_blocks: Utiliser le bloc « Repeat » et enroulez-le autour des blocs
          dans l'espace de travail
        repeat_blocks_1: (1) Utilise ce bloc et place-le autour des blocs gris dans
          l'espace de travail
        repeat_blocks_2: (2) Fais glisser le bloc «Répéter» ici et place les blocs
          gris à l'intérieur
        snowflake_dropdown: Utilise ce menu déroulant pour créer différents flocons
          de neige !
        degrees_per_side: Divisez 360 ar le nombre de côtés pour obtenir la taille
          de chaque angle en degrés.
        set_sides: Utilisez ce bloc pour définir le nombre de "côtés" nécessaires
          pour résoudre ce puzzle.
        set_length: Utilisez ce bloc pour définir la valeur correcte de "longueur".
        which_equation: Quelle équation rend chaque côté plus court pour les formes
          ayant plus de côtés ?
        get_nectar: Utilisez le bloc "collecter du nectar".
        actions_category: La boite à outils à été relookée ! Les blocs "Actions" sont
          maintenant ici.
        draw_square_hint: 'Conseil: Utilise la boucle de carré que tu viens de faire
          dans l''épreuve précédente.'
        edit_function: Cliquez ici pour modifier votre fonction.
        create_function: Clique ici pour ouvrir la fenêtre "Fonctions" et clique ensuite
          sur le bouton "Créer une fonction".
        house_hint: Ça n'est pas grave si l'image ne ressemble pas encore à une maison.
          Nous règlerons ça dans la prochaine épreuve.
        edit_draw_square: Utilise ce bouton pour éditer la fonction et ajouter la
          boucle.
        edit_get_nectar: Utilise ce bouton pour éditer la fonction et changer la direction
          dans laquelle l'abeille va chercher le nectar.
        logic_category: Ouvre la fenêtre "Logique" pour trouver le bloc "si/sinon".
        length_parameter: Peux-tu modifier cette fonction de façon à ce qu'elle utilise
          le paramètre "longueur" ?
        frozen_diamond_repeat: Utilise le bloc «Répéter» pour créer cette forme.
        frozen_circle_function_in_circle_turn: N'oublie pas de tourner après avoir
          créé chaque cercle.
        frozen_circle_function_with_parameter_circle: Utilise le bloc « Créer un cercle
          » et change la taille.
        frozen_snowflake_branch: Utilise le bloc « créer une branche de flocon »
        frozen_create_square: Accroche plus de blocs ici pour créer un carré
        playlab_drag_say: Fais glisser le bloc « dire » ici et tape « Bonjour »
        playlab_use_twice: Utilise ce bloc deux fois et souviens-toi de change le
          numéro de l'acteur
        playlab_move_girl: Utilise le bloc « déplacer vers la droite » pour déplacer
          Mademoiselle Tennis
        playlab_play_sound: Ajoute le bloc « jouer le son »
        playlab_arrow_keys: Souviens-toi d'utiliser ces flèches pour déplacer la sorcière
          après avoir cliqué « Démarrer »
        playlab_add_move: Ajoute des blocs « déplacer » à l'intérieur de ce bloc «
          répéter à l'infini »
        playlab_add_score: Ajoute les blocs de score ici
        playlab_add_blocks: Ajoute tes blocs ici
        set_variable: Glisse ici un bloc de nombre pour choisir ta variable
        place_variable: Fais glisser ta variable à l'intérieur de ce bloc
        bee_for_loop: Glisse ici la quantité maximale de nectar que tu veux que ton
          abeille collecte
        place_counter_variable: Fais glisser ta variable compteur à l'intérieur de
          ce bloc
        function_editor_draw_square: Ceci est la définition de ta fonction. Ces blocs
          sont exécutés chaque fois que tu utilises le bloc "dessiner un carré"
        change_here: Fais tes modifications ici
        write_draw_square_function: Glisse des blocs ici depuis la boite à outil pour
          dessiner un carré
        write_draw_triangle_function: Glisse des blocs ici depuis la boite à outil
          pour dessiner un triangle
        edit_add_parameter: Clique sur "éditer" pour ajouter un paramètre dans ta
          fonction
        add_and_drag_parameter: Écris le nom de ton paramètre ici, clique sur ajouter,
          et glisse-le ensuite dans la définition de ta fonction
        fill_in_actor: Remplace les ??? par les nombres qui correspondent à chacun
          des acteurs (1, 2, et 3)
        repeat: Mets des blocs à l'intérieur de la boucle pour répéter les commandes
        if_bee_nectar: Utilise le bloc « Si » pour décider si l'abeille devrait obtenir
          du nectar
        if_else_bee: Utilise le bloc "si/sinon" pour que l'abeille récolte le nectar
          d'une fleur, ou fasse du miel si ce n'est pas une fleur
        repeat_full_circle: Entrez le nombre de fois que le zombie doit se déplacer
          tracer un cercle complet
        place_length_variable: Glisse la variable de longueur ici pour remplacer les
          points d'interrogation
        arrows_move_actor: Utilise les flèches pour déplacer l'acteur
        right_arrow_fireball: Utilise la flèche droite pour tirer des boules de feu
        name_function: Écris le now de ta fonction ici
        Infinity_move_right_runbutton: Ajouter déplacer bloc ici
        Infinity_move_directions_callout: Quel bloc fera déplacer Baymax  vers le
          haut lorsque vous appuyez sur la flèche vers le haut ?
        Infinity_move_directions_callout_arrow: Utilisez ces flèches pour vous diriger
        Infinity_move_collide_callout: Jouer un son lorsque cet événement se produit.
        Infinity_repeat_callout: Place un bloc de déplacement à l'intérieur d'ici
