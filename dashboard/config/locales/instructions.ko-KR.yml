"ko":
  data:
    instructions:
      2-3 Artist 1 new_instruction: |
        안녕하세요. 저는 화가입니다. 여러분들이 코드를 작성하면 원하는 모든 것들을 그릴 수 있습니다.
        블록들을 사용해서 그림의 회색 선들을 그려보세요.(각 선들은 100 픽셀 길이입니다.)
      2-3 Artist 11_instruction: |-
        각 변의 길이가 100 픽셀인, 8각형을 만들어 정지 표지판을 만들어보세요.  \r
        \r
      2-3 Artist 12_instruction: |-
        눈알을 완성하기 위해서 원을 그려보세요!\r
        \r
        만약,
         한 번 움직일 때마다 1도씩 오른쪽으로 움직인다고 한다면, 하나의 원을 완성시키기 위해 몇 번을 반복하면 될까요? 180? 360? 500?
      2-3 Artist 2 new_instruction: "이 집의 벽은 다 완성되지 않았습니다. 각 측면은 100이지만, 완성되지 않은 벽은
        50입니다. 벽을 완성해보세요. "
      2-3 Artist 2_instruction: "This house has a half-finished wall. Each side is\n100,
        but the half-finished wall is only 50. Complete the wall. \n"
      2-3 Artist 3.4_instruction: |
        점프 블록은 선을 그리지 않고 이동하게 해줍니다.
        앞으로 점프, 앞으로 이동하기 블록들을 이용해서 파선을 그려보세요.
      2-3 Artist 3_instruction: "이 모자의 높이는 100픽셀입니다. 70픽셀 더 짧은 모자를 그려보세요."
      2-3 Artist 3new_instruction: |-
        빨간 모자의 높이는 100픽셀입니다.
        이것보다 더 낮은 70픽셀 높이의 검은 모자를 그려보세요.\r
        (주의: 각 모자의 너비는 50픽셀입니다.)
      2-3 Artist 4_instruction: "고양이를 위한 집을 완성해주세요."
      2-3 Artist 5_instruction: 똑같은 집을 그릴 수 있도록, "반복 횟수" 블록의 코드를 바꿔주세요. 3개의 블록만 사용하면
        됩니다.
      2-3 Artist 6_instruction: |
        이 집에는 지붕이 필요합니다! 삼각형을 그려주세요. 힌트:
        세 변의 길이는 모두 같습니다.
      2-3 Artist 7_instruction: "교실의 모두가 창밖을 볼 수 있도록, 창문들을 학교에 그려주세요.\n각 창 틀의 길이는
        25 픽셀 크기입니다. \n"
      2-3 Artist 8_instruction: |
        한 개의 사각형을 똑같은 크기의 정사각형 2개로 나누어 보세요.
        사각형의 폭은 200 픽셀이고, 높이는 100 픽셀입니다.
      2-3 Artist 9_instruction: "이 연을 완성해주세요."
      2-3 Artist Assessment 1_instruction: |
        형성 평가: 마지막 이빨을 그려주세요.
        가로 25 픽셀, 세로 25 픽셀입니다.
      2-3 Artist Debugging 1_instruction: "이 모자의 윗 부분은 100 픽셀이 되어야 합니다. 고쳐 주실 수 있나요?"
      2-3 Artist Debugging 10_instruction: |-
        제 게임기의 방향키가 너무 얇아요.\r
        \r
        10 픽셀 만큼 폭을 넓혀주세요.
      2-3 Artist Debugging 11_instruction: |-
        내 눈송이가 부서지고 있어요!\r
        \r
        어디가 잘못 된 것 일까요?
      2-3 Artist Debugging 12_instruction: "이 장면에 파도를 추가하고 싶습니다. 도와주시겠어요?"
      2-3 Artist Debugging 2_instruction: |-
        고양이 수염을 그리는 코드에 문제가 있습니다.
        \r
        \r
        고양이 수염의 길이가 같도록 코드를 고쳐주세요.
      2-3 Artist Debugging 3_instruction: |-
        내 보트에 구멍이 났어요!\r
        \r
        선의 끝을 맞추기 위해서는 어떻게 해야할까요?
      2-3 Artist Debugging 4_instruction: "무엇을 그리려고 하는 것 일까요? 정확한 선들과 각들로 점들을 연결해
        주세요."
      2-3 Artist Debugging 5_instruction: |-
        다리와 발을 그리는 코드에 오류가 있습니다.\r
        \r
        어떻게 고쳐야 할까요?
      2-3 Artist Debugging 6_instruction: |-
        다리가 없는 의자에 앉아있는 것 같아요.
        \r
        \r
        코드를 수정해서 나머지 의자 다리를 그려주세요.
      2-3 Artist Debugging 7_instruction: |-
        C가 왼쪽으로 그려지는 코드 같습니다!\r
        \r
        C를 정확하게 그리려면 어떻게 해야할까요?
      2-3 Artist Debugging 8_instruction: "바람개비가 완성되지 않았습니다. 완성하려면 얼마나 반복해야 할까요?"
      2-3 Artist Debugging 9_instruction: |-
        뭔가 이상해요!\r
        \r
        줄기를 그리는 코드가 틀렸네요. 화가가 줄기를 정확히 그리려면 어떻게 해야할까요?
      2-3 Artist Debugging Assessment 1_instruction: |-
        형성평가: 이 75 픽셀 크기의 사각형으로는 작은가요? \r
        \r
        코드의 어느 부분을 고쳐야할까요?
      2-3 Artist Free Play_instruction: "자유 플레이: 원하는 것을 그려보세요."
      2-3 Artist Functions 1_instruction: |
        안녕하세요. 저는 좀비 화가입니다. 그림 그리기 좋아요!
        사각형 안경을 그릴 수 있게 도와주세요. 힌트: 안경 알 사이의 길이는
        안경 한 변의 길이보다 25 픽셀 만큼 작습니다.
      2-3 Artist Functions 10_instruction: |
        여기에 두 개의 함수가 있습니다. 하나는 큰 기어를 그리는 것이고, 하나는 작은 기어를 그리는 것입니다.
        기계의 내부를 그리는데 사용해보세요!
      2-3 Artist Functions 11.5_instruction: |
        여기에 똑같은 "육각형 그리기" 함수가 있습니다.
        반복 할 때마다 60 도씩만 회전하면 어떻게 될까요?
      2-3 Artist Functions 11_instruction: |
        “사각형 그리기” 함수의 이름을 “육각형 그리기”로 바꿨지만, 여전히 이 함수는 사각형을 그리고 있습니다!
        "육각형 그리기" 함수를 수정해서, 한 변의 길이가 50 픽셀인 육각형을 그려보세요.
      2-3 Artist Functions 12_instruction: "함수를 사용하면 복잡한 모양을 가진 그림을 그리기에 아주 좋습니다.\n\"꽃
        그리기\" 함수를 사용해서 나머지 꽃 묘목 상자를 채워주세요.\n(힌트: 꽃들은 100 픽셀 간격으로 놓여져 있습니다.)  \n"
      2-3 Artist Functions 13_instruction: |
        4개의 함수를 더 만들었습니다.
        1개 이상의 반복 구조를 이용해 원하는 그림을 만들고 친구들과 공유해 보세요.
        실행을 눌러 살펴보세요.
      2-3 Artist Functions 2_instruction: |
        함수들로 새로운 블록들을 만들어낼 수 있습니다!
        "사각형 그리기" 라는 함수에 사각형 1개를 그리는 블록들을 넣었습니다.
        "사각형 그리기" 함수를 이용해서 안경을 그려보세요. 사각형들은 75 픽셀 만큼 떨어져 있습니다.
      2-3 Artist Functions 3_instruction: |
        한 변의 길이가 115 인 사각형을 그려 더 큰 안경을 만들어보세요.
        사각형들은 이제 45 픽셀 만큼 떨어져 있습니다.
      2-3 Artist Functions 4_instruction: "“반복” 블록을 사용해서 이 정사각형을 3개 그려보세요."
      2-3 Artist Functions 7_instruction: |
        2개의 서로 매개 변수가 있는 "집 그리기" 함수를 이용해 2개의 집을 그려보세요.
        (힌트: 첫 번째 집은 100 픽셀입니다.)
      2-3 Artist Functions 9_instruction: |
        여기 눈송이 함수가 있습니다.
        겨울 풍경을 만들어내기 위해서 실험해보세요! 이 판은 자유 플레이입니다.
        풀어야 할 퍼즐이 아니니까, 재미있게 놀아보세요!
      2-3 Artist Loops 1_instruction: |
        셀을 완성하기 위해서, 한 변의 길이가 100 픽셀인 육각형을 만들어보세요.
        생각해보면, 60 도씩 회전하면 됩니다!
      2-3 Artist Loops 10_instruction: "절반 만큼 만 마지막 단계에서 이동하면 어떻게 될까요?"
      2-3 Artist Loops 11_instruction: |
        자 이제, 만든 것을 모두 *다른* 반복 구조에 넣어보세요!
        바깥쪽 반복 구조에 각도를 더하는 것을 잊지 마세요.
      2-3 Artist Loops 2_instruction: "이제 반복 블럭을 사용해 셀을 조개로 만들어 봅니다."
      2-3 Artist Loops 4_instruction: "반복 구조를 사용해서, 모양을 반복해서 그리면 어떻게 될까요?"
      2-3 Artist Loops 5_instruction: "반복 실행에 조그만 변화를 주었을 때, 얼마나 다른 그림이 나올 수 있는지 살펴보세요."
      2-3 Artist Loops 6_instruction: |
        반복 구조 안에 1번 이동, 1번 회전을 더 추가해서
        디자인이 어떻게 변하는지 살펴보세요.
      2-3 Artist Loops 7_instruction: |
        반복 구조들을 이용하면 모든 종류의 다각형들을 만들 수 있습니다.
        이 육각형 안에 마름모를 만들어보세요.
      2-3 Artist Loops 8_instruction: "한 반복 안에 2개의 요소를 모두 넣어 보세요."
      2-3 Artist Loops 9_instruction: |-
        같은 요소들을 반복 안에 넣되, 그 둘 사이에 거리를 추가하겠습니다.\r
        이전에 사용했던 것과 같은 코드를 넣고, 바깥쪽 반복의 마지막에 앞으로 이동하는 것을 추가해 보세요.
      2-3 Artist Loops New 1_instruction: |
        이 로봇의 머리를 그려보세요!
        한 변의 길이가 100 픽셀인 사각형을 그려보세요.
      2-3 Artist Loops New 10_instruction: "이제 여러 개의 'V'자를 연결해서, 반복 실행 구조 안에 넣어보세요."
      2-3 Artist Loops New 11_instruction: |
        이번에는 멋진 것을 만들어 볼 시간입니다!
        왼쪽으로 30도 회전하기를 추가한 후, 24번 반복 시켜보세요.
      2-3 Artist Loops New 12_instruction: |
        한 변의 길이가 100 픽셀인 다이아몬드를 그려보세요.
      2-3 Artist Loops New 13_instruction: |
        이런 재미있는 패턴을 만들기 위해서
        이전 퍼즐의 코드를 반복시켜보세요!
      2-3 Artist Loops New 14_instruction: |
        다이아몬드 코드를 살펴보고 어떤 패턴들을 만들어낼 수 있는지 생각해보세요.
        각도와 반복 횟수를 변화시켜가면서 테스트 해보세요.
      2-3 Artist Loops New 15_instruction: "이제, 그리고 싶은 것들을 그려보세요."
      2-3 Artist Loops New 2_instruction: |
        이전에 풀었던 퍼즐과 같은 퍼즐이지만,
        반복 블록들을 사용해야합니다. 로봇의 머리를 완성시키기 위해서 코드의 처음 부분에
        반복 블록을 넣어보세요.
      2-3 Artist Loops New 9_instruction: |
        화살 그림을 완성하기 위해서,
        양쪽 모두 50 픽셀인 간단한 V 자를 그려보세요.
      2-3 Artist Match Hex Pic_instruction: "맞추기: 육각형을 완성해보세요."
      2-3 Artist Match Rho Pic_instruction: "맞추기: 빠진 코드를 완성해보세요."
      2-3 Artist Match Sq Pic_instruction: "맞추기: 빠진 코드를 채워보세요."
      2-3 Artist Match Tri pic_instruction: "맞추기: 빠진 코드를 채워주세요."
      2-3 Artist Nested Loops 1_instruction: |-
        여러 가지 모양들을 그리기 위해서 반복 구조들을 사용했었습니다.
        그런데, 반복 구조 안에 다른 반복을 넣을 수 있다는 것을 알았나요?\r
        패턴을 그리기 위해서, 이 코드 전체를 반복에 넣어 3번 반복 시켜보세요.
      2-3 Artist Nested Loops 10_instruction: "패턴을 완성시키기 위해서 이 코드를 12번 반복해 보세요."
      2-3 Artist Nested Loops 11_instruction: |
        이 코드를 4번 반복해서 패턴을 완성해 보세요.
        원을 한 번 그리고 나면, 90도 만큼 회전하세요.
      2-3 Artist Nested Loops 12_instruction: "이 코드를 12번 반복시켜서 곱슬곱슬한 그림을 그려보세요."
      2-3 Artist Nested Loops 2_instruction: |
        삼각형을 6번 반복해 그리세요.
        삼각형을 한 번 그리고 난 후에, 60도씩 회전하면 됩니다.
      2-3 Artist Nested Loops 3_instruction: |
        이 패턴을 그리려면, 삼각형을 12번 반복해서 그려야 합니다.
        원 중심의 각(360 도) 을 그리려고 하는 모양의 개수(12 개) 로 나누면,
        모양을 한 번 그린 후 몇 도를 회전시켜야 하는지 알 수 있습니다.
      2-3 Artist Nested Loops 4_instruction: "이 다이아몬드 모양을 12번 반복시켜서 꽃을 그려보세요.\n힌트:
        12 개의 다이아몬드는 12 개의 삼각형을 그리는 것과 같은 방법으로 만들면 됩니다 - \n한 번 모양을 그린 후에 얼마나 회전시켜야
        할까요?\n"
      2-3 Artist Nested Loops 5_instruction: |
        이 건물의 창들을 중첩 반복을 이용해 채워보세요.
        창들은 20 픽셀 크기로 20 픽셀 만큼 씩 떨어져 있습니다.
      2-3 Artist Nested Loops 6_instruction: |
        이 공룡은 꼬리에 8개의 뾰족한 뿔이 나 있습니다; 각 뿔의 길이는 30 픽셀입니다.
        삼각형을 8번 반복해 그려주세요. 1개를 그리면 그 다음에는 앞으로 이동해야 합니다.
      2-3 Artist Nested Loops 7_instruction: |
        이 삼각형을 10번 반복시켜서 태양을 그려보세요.
        삼각형 1개를 그리고 난 후에는 이동하고 회전해야 할 것입니다.
        원 모양에 어떻게 나누어 그릴 수 있을지는 그려져 있는 형태를 살펴보세요.
      2-3 Artist Nested Loops 8_instruction: |
        자 이제 그림에 잔디를 그려보세요.
        잔디 1개는 50 픽셀 만큼 씩 떨어져 있습니다.
      2-3 Artist Nested Loops 9_instruction: |
        이 그림에 꽃을 더 그리면 그림이 완성될 것입니다.
        꽃을 그리기 위해서 다이아몬드를 12번 반복시켜 그려보세요.
      2-3 Artist Nested Loops Free Play_instruction: |
        자유 플레이시간입니다.
        중첩 반복을 이용해서 원하는 것을 그려보세요.
      2-3 Bee Conditionals 1_instruction: |
        안녕하세요! 저는 꿀벌입니다.
        제가 꽃에서 꽃꿀을 모을 수 있게 도와주세요.
      2-3 Bee Conditionals 10_instruction: |
        자주색 꽃에서는 꿀이 있을 수도 있고 없을 수도 있습니다.
        아무것도 없는 자주색 꽃에서 꽃꿀을 얻어내려고 하지 마세요.\r
      2-3 Bee Conditionals 11_instruction: "뭐가 있을까요!\\r\n\\r\n꽃밭을 돌아다니면서 꽃꿀이 있는 꽃들에서만
        꽃꿀을 모을 수 있게 도와주세요. "
      2-3 Bee Conditionals 12_instruction: "최대한 적은 블록들을 사용해서 꽃꿀을 찾아낼 수 있도록 도와주세요!"
      2-3 Bee Conditionals 13_instruction: |-
        와 이번에는 여러 가지들이 있네요!\r
        \r
        여러분들이 배운 것들을 이용해 꽃꿀을 모아 꿀을 만들어보세요.
      2-3 Bee Conditionals 14_instruction: |-
        자 이제 다 모아봅시다!\r
        \r
        지금까지 배운 것들을 이용해서 최소한의 블록들로 꽃꿀이 있는 꽃에서 꽃꿀을 모아 보세요.
        마지막에는 꿀을 만들어야 합니다.
      2-3 Bee Conditionals 15_instruction: |-
        계단 모양의 패턴은 많이 익숙합니다. \r
        \r
        최소한의 블록들만 사용해서 꽃꿀이 있는 꽃에서만 꽃꿀을 모아보세요.
      2-3 Bee Conditionals 2_instruction: |-
        저는 배고픈 꿀벌입니다! \r
        최소한의 블록만 사용해서 꽃꿀을 모두 모을 수 있게 해주세요.
      2-3 Bee Conditionals 3_instruction: "저 꽃꿀들을 보세요!\\r\n\\r\n최소한의 블록들을 사용해서 꽃꿀을
        모아 꿀을 만들어보세요.  "
      2-3 Bee Conditionals 4_instruction: "꽃들로부터 꽃꿀을 모아 꿀을 만들 수 있게 도와주세요."
      2-3 Bee Conditionals 5_instruction: |-
        꽃꿀이 없는 자주색 꽃에서 꽃꿀을 모으지 않도록 조심하세요. \r
        먼저 '꽃꿀이 있으면' 블록을 이용해서 꽃꿀의 양이 1인지 확인해야합니다.
      2-3 Bee Conditionals 6_instruction: '"만약" 블록을 사용해서 이 꽃에 꽃꿀이 있는지 확인해보세요.'
      2-3 Bee Conditionals 7_instruction: "꽃꿀이 있는 꽃에서만 꽃꿀을 모아보세요."
      2-3 Bee Conditionals 8_instruction: |
        이 꽃밭에는 빨강 꽃과 자주색 꽃이 있습니다.
        빨강 꽃은 꽃꿀이 얼마나 있는지 나타나있지만, 자주색 꽃에는 얼마나 있는지 알 수 없습니다.
        꽃꿀을 모두 모아 보세요.
      2-3 Bee Conditionals 9_instruction: "각 꽃에서 꽃꿀을 모두 모아주세요."
      2-3 Bee Conditionals Assessment 1_instruction: |
        형성평가: 꽃꿀을 모두 모아주세요.
        자주색 꽃에 꽃꿀이 없으면 꽃꿀을 뽑지 않도록 주의하세요.
      2-3 Bee Debugging 1_instruction: |
        이 블록들에는 오류들이 있어서 짜증이 나네요.
        모든 꽃꿀을 모아서 꿀을 만들 수 있도록 오류들을 수정해주세요.
      2-3 Bee Debugging 10_instruction: |-
        이 블록들에는 오류들이 있어서 짜증이 나네요. \r
        모든 꽃꿀을 모아서 꿀을 만들 수 있도록 오류(들)을 수정해주세요.
      2-3 Bee Debugging 2_instruction: |-
        문제점을 찾을 수 있으세요?\r
        모든 꽃꿀을 모을 수 있도록 오류(들)을 수정해주세요.
      2-3 Bee Debugging 3_instruction: |-
        으, 골치아프네요!\r
        \r
        모든 꽃꿀을 모을 수 있도록 오류(들)을 수정해주세요.
      2-3 Bee Debugging 4_instruction: |
        이 블록들에는 오류들이 있어서 짜증이 나네요.
        모든 꽃꿀을 모아서 꿀을 만들 수 있도록 오류(들)을 수정해주세요.
      2-3 Bee Debugging 5_instruction: |-
        꽃들이 맛있어보여요! \r
        \r
        모든 꽃꿀들을 모을 수 있도록 오류(들)을 고쳐주세요. 단계별 실행을 사용할 수 있습니다.
      2-3 Bee Debugging 6_instruction: |-
        달콤한 도전이네요! \r
        \r
        모든 꽃꿀들을 모을 수 있도록 오류(들)을 고쳐주세요.
      2-3 Bee Debugging 7_instruction: "모든 꽃꿀들을 모아 꿀을 만들 수 있도록 오류(들)을 고쳐주세요."
      2-3 Bee Debugging 8_instruction: |-
        이쁜 꽃들이 아주 많이 있네요! \r
        \r
        모든 꽃꿀들을 모을 수 있도록 오류(들)을 고쳐주세요.
      2-3 Bee Debugging 9_instruction: |-
        "벌벌" 떨지 마세요! \r
        \r
        모든 꽃꿀들을 모아 꿀을 만들 수 있도록, 이 프로그램의 오류들을 고쳐야 합니다.
      2-3 Bee Debugging Assessment 1_instruction: |-
        형성평가: 이제 여러분들이 아는 것들을 보여줄 시간입니다!\r
        \r
        모든 꽃꿀들을 모아 꿀을 만들 수 있도록 오류(들)을 고쳐주세요.
      2-3 Bee Functions 1_instruction: |
        함수들은 어떤 작업을 수행할 때 사용하는 블럭들의 집합이라고 할 수 있습니다.
        "꽃꿀 2번 모으기" 를 이용해서 각 꽃들에서 꽃꿀을 모아보세요.
      2-3 Bee Functions 10_instruction: |
        자주색 꽃들에는 꽃꿀이 1개 또는 0 개 있을 수 있습니다.
        자주색 꽃에 꽃꿀이 있을 때에만 꽃꿀을 모으는 함수를 만들어보세요.
      2-3 Bee Functions 2_instruction: |
        함수들은 어떤 작업을 수행하는데 블럭들의 집합이라고 볼 수 있습니다.
        "5번 모으기" 함수를 이용해서 한 번에 5개의 꽃꿀을 모아보세요.
        최대한 적은 블록을 사용해서 반복한 수 있도록 해보세요.
      2-3 Bee Functions 3_instruction: "각 꽃에서 꽃꿀을 모두 모아주세요."
      2-3 Bee Functions 4_instruction: |
        "움직여서 꽃꿀 얻기" 함수는 꿀벌이 회전하고, 꽃꿀을 얻은 후 원래의 위치로 돌아오도록하는 함수입니다.
        함수를 사용해서 모든 꽃꿀을 모아보세요.
      2-3 Bee Functions 5_instruction: |
        꽃들에 더 많은 꽃꿀이 들어있어요.
        주어진 함수를 수정해서, 꽃꿀을 4번 얻을 수 있게 하고 모든 꽃들로 부터 모든 꽃꿀을 모으세요.
      2-3 Bee Functions 6_instruction: "이제 같은 함수를 사용해서, 3개의 꽃들로 부터 꽃꿀을 모으도록 해보세요."
      2-3 Bee Functions 7_instruction: |
        꽃들이 더 멀리 있습니다.
        주어진 함수를 수정해서 꽃들로부터 모든 꽃꿀을 모아보세요.
      2-3 Bee Functions 8_instruction: |
        꽃꿀을 7번 모으고, 앞으로 이동한 후, 7개의 꿀을 만드는 함수를 만들어보세요.
        그 함수를 사용해서 각 꽃들로부터 꽃꿀을 모으고, 각 벌집에 꿀을 만들어 넣으세요.
      2-3 Bee Functions 9_instruction: "길을 따라 아래로 내려간 후, 꽃꿀을 얻고, 꿀을 만들고, 다시 처음 위치로
        돌아가는 함수를 만들어보세요."
      2-3 Bee Functions Assessment 1_instruction: "형성평가: 주어진 함수를 이용해서 각 꽃에서 꽃꿀을 모아보세요."
      2-3 Bee Functions Assessment 2_instruction: "형성평가: 한 번에 3개의 꿀을 만드는 함수를 만들어보세요."
      2-3 Bee Loops 1_instruction: |-
        저 꽃들이 달콤해 보여요!\r
        \r
        최대한 적은 블록들을 사용해 각 꽃들에서 꽃꿀을 모아보세요.
      2-3 Bee Loops 10_instruction: "모든 꽃꿀을 모을 수 있도록, 다른 2개의 반복 구조 안에 반복 구조를 넣으세요."
      2-3 Bee Loops 11_instruction: |
        이 꽃밭에 있는 꽃들에서 꽃꿀을 모두 모을 수 있도록
        반복 구조들을 사용해 보세요.
      2-3 Bee Loops 12_instruction: |
        이 꽃밭에 있는 꽃들에서 꽃꿀을 모두 모을 수 있도록
        반복 구조들을 사용해 보세요.
      2-3 Bee Loops 13_instruction: "형성평가: 최대한 적은 블록들을 사용해서 꽃꿀을 모아보세요."
      2-3 Bee Loops 1A_instruction: "안녕하세요! 여러분? 저는 꿀벌입니다.\n이 꽃들로부터 꽃꿀을 모을 수 있게 도와주세요.
        \n"
      2-3 Bee Loops 2_instruction: "최대한 적은 블록들을 사용해서 모든 꽃꿀을 모으고 꿀을 만들어 보세요."
      2-3 Bee Loops 2A_instruction: "이번에는, 1개의 반복 구조를 사용해서 모든 꿀을 모아보세요."
      2-3 Bee Loops 3_instruction: |
        최대한 적은 블록들을 사용해서
        각 꽃에서 꽃꿀을 모은 후, 각각의 벌집에 꿀을 만들어 넣어 보세요.
      2-3 Bee Loops 3A_instruction: "모든 꽃꿀을 모으기 위해, 반복 구조를 사용해보세요."
      2-3 Bee Loops 3B_instruction: "반복 블록을 사용해서, 꽃꿀을 모두 모으고 꿀을 만들어보세요."
      2-3 Bee Loops 4_instruction: |-
        꿀벌이 엄청 바쁘네요!\r
        \r
        최대한 적은 블록들을 사용해서
        꽃꿀을 모으고 꿀을 만들 수 있도록 꿀벌을 도와 주세요.
      2-3 Bee Loops 4A_instruction: |-
        이 퍼즐을 해결하려면 몇 번 반복해야할까요? \r
        \r
        반복 실행 구조는 매우 편리합니다!
        반복 실행 구조를 사용해서 최대한 적은 블록들로 해결해 보세요.
      2-3 Bee Loops 5_instruction: |-
        이 길의 모양은 다른 것들과 다릅니다. \r
        \r
        최대한 적은 블록들을 사용해서 꽃꿀을 모두 모아보세요.
      2-3 Bee Loops 6_instruction: "꿀벌이 꽃꿀을 모으고 꿀을 만들 수 있는 가장 빠른 방법을 찾을 수 있나요?"
      2-3 Bee Loops 7_instruction: |
        와 꽃밭이 이쁘네요!
        최대한 적은 블록들을 사용해서 꿀벌이 모든 꽃들을 살펴볼 수 있게 해주세요.
      2-3 Bee Loops 8_instruction: |
        자주색 꽃들은 몇 개의 꽃꿀이 있는지 알 수 없습니다.
        "꽃꿀이 있으면" 반복 블록을 이용해서, 모든 꽃꿀을 모아보세요.
        이 반복 구조는 조건이 참인 동안 계속 반복됩니다. 이 경우에서는 꽃꿀의 개수>0 인 동안 반복되는 것입니다.
      2-3 Bee Loops 9_instruction: |
        반복(~인 동안) 블럭은 그 안에 "만약" 조건문이 있는 것과 같습니다.
        반복 블럭 안에 이 코드를 추가해서 같은 역할을 하도록 만들어보세요.
      2-3 Bee Loops Assessment 1_instruction: "형성평가: 반복 구조를 이용해서, 이 꽃에서 꽃꿀을 모두 모아보세요."
      2-3 Maze 1_instruction: '나쁜 돼지를 잡을 수 있게 도와주세요! "실행하면" 블록 아래에 "앞으로 이동" 블록들을 여러
        개 쌓아 붙인 후, "실행"을 눌러보세요. '
      2-3 Maze 10_instruction: "초록색 나쁜 놈에게 데려다 줘!(TNT 폭탄 조심)"
      2-3 Maze 11_instruction: |
        배가 고파요. 꽃으로 움직여주세요!
        블록을 몇 번 반복하면 될까요?
      2-3 Maze 12 (copy 1)_instruction: |
        이전 퍼즐에서의 답을 단 2개의 블록으로 바꿔보세요!
        (힌트: "반복 횟수" 블록을 사용하는 반복 구조를 만들어보세요.)
      2-3 Maze 12 (copy 2)_instruction: |
        이전 퍼즐에서의 답을 단 2개의 블록으로 바꿔보세요!
        (힌트: "반복 횟수" 블록을 사용하는 반복 구조를 만들어보세요.)
      2-3 Maze 12 (old)_instruction: "반복 횟수 블록을 이용해서, 돼지에게로 이동시켜 주세요."
      2-3 Maze 12_instruction: 1개의 '반복' 블록 안에 1개의 '앞으로 이동' 블록이 들어있는 반복 실행 구조를 이용해서
        돼지에게로 이동시켜주세요.
      2-3 Maze 13 (old)_instruction: "저를 돼지에게 보내주세요. 이번에는 반복(~할 때까지) 블록을 사용하세요."
      2-3 Maze 13_instruction: |-
        2개의 블록만 더 추가해서 돼지에게로 보내주세요.\r
        (참고: 이 레벨을 깨기 위해서는 마법의 "반복(횟수)" 블록을 사용해야 합니다.)
      2-3 Maze 14 (old)_instruction: '"반복 ~까지" 블록을 사용해서 저를 돼지에게 이동시켜주세요!'
      2-3 Maze 14_instruction: |
        저를 해바라기로 보내주세요!
        ("반복 횟수" 블록이 필요하면 어디에 두어야 할까요?)
      2-3 Maze 15 (old)_instruction: '"반복 ~까지" 블록을 사용해서 저를 돼지에게 이동시켜주세요!'
      2-3 Maze 15_instruction: "이 퍼즐에서는 두 개의 반복(횟수) 블록을 이용하면 블록들을 최소한으로 사용할 수 있습니다."
      2-3 Maze 16 (old)_instruction: '"반복 ~까지" 블록을 사용해서 저를 돼지에게 이동시켜주세요!'
      2-3 Maze 16 before_instruction: "어떻게 하면 돼지에게로 최대한 빠르게 이동할 수 있을까요?"
      2-3 Maze 16_instruction: "반복 실행 구조 안에는 여러 개의 블록을 넣을 수 있습니다! 이 단계들을 반복 실행시켜 좀비를
        해바라기로 이동시켜주세요."
      2-3 Maze 2_instruction: "돼지가 내 깃털들을 마구 헤집어 놓으며 다니고 있어요. 저를 돼지에게 보내주세요!"
      2-3 Maze 3_instruction: "길을 따라 움직여서, 바보 같은 돼지 녀석을 잡아줘. TNT 폭탄을 피하고, 깃털들이 날라다니지
        않도록 해야 돼!"
      2-3 Maze 4_instruction: "초록색 나쁜 놈에게 데려다 줘!(TNT 폭탄 조심)"
      2-3 Maze 5_instruction: "초록색 나쁜 놈에게 데려다 줘!(TNT 폭탄 조심)"
      2-3 Maze 6_instruction: "나쁜 돼지를 잡을 수 있게 도와줘, 침착하게 생각하면 돼. 돼지를 못 잡으면, 화가 날 것
        같아!"
      2-3 Maze 7_instruction: "초록색 나쁜 놈에게 데려다 줘!(TNT 폭탄 조심)"
      2-3 Maze 8_instruction: "저를 돼지에게 이동시켜 주세요."
      2-3 Maze 9_instruction: "초록색 나쁜 놈에게 데려다 줘!(TNT 폭탄 조심)"
      2-3 Maze Loops 1_instruction: 5 개의 블록들만 사용해서 돼지로 이동시켜 주세요.
      2-3 Maze Loops 17_instruction: "해바라기로 이동하기 위해서 여러분들이 배운 것들을 사용해보세요!"
      2-3 Maze Loops 18_instruction: |-
        블록들을 최소한으로 사용해서 해바라기로 이동시켜주세요!\r
        \r
        반복 실행 구조 안에 1개의 반복 실행 구조를 넣어서 필요한 코드량을 줄여주세요.
      2-3 Maze Loops 19_instruction: |-
        다음 레벨로 가기 위해서 이번 레벨을 해결해 봅시다! \r
        최소한의 반복 실행 구조를 사용해서 해바라기로 이동시켜주세요.
      2-3 Maze Loops 20_instruction: "블록들을 최대한 적게 사용해서 해바라기로 이동시켜주세요!"
      2-3 Maze Loops 21_instruction: "블록들을 최대한 적게 사용해서 해바라기로 이동시켜주세요!"
      2-3 Maze Loops Assessment 1_instruction: "형성평가: 5개의 블록만 사용해서, 저를 해바라기로 보내주세요! "
      2-3 Maze sq1_instruction: |
        This pig is ruffling my feathers.  Help me find
        him!
      2-3 Maze sq10_instruction: "저를 돼지에게로 이동시켜주세요! 어떤 블록들이 반복되나요?"
      2-3 Maze sq10v2_instruction: "저를 돼지에게로 이동시켜주세요! 어떤 블록들이 반복되나요?"
      2-3 maze sq11_instruction: "저를 돼지에게로 이동시켜주세요! 어떤 블록들이 반복되나요?"
      2-3 maze sq12_instruction: 이전의 방법을 "반복 횟수" 블록을 이용해서 반복으로 바꿀 수 있을까요?
      2-3 maze sq13_instruction: |
        이봐요. 저 좀비. 해바라기... 반드시... 가야합니다.
        "~할 때까지 반복" 블록을 이용해서 반복 구조를 만들어보세요.
      2-3 maze sq14_instruction: 4개의 블럭만 사용해서 해바라기로 갈 수 있나요?
      2-3 maze sq15_instruction: 5개의 블럭만 사용해서 해바라기로 갈 수 있나요?
      2-3 maze sq16_instruction: |
        좋아요, 이번에도 비슷한데 약간 다르네요.
        5개의 블록만 가지고 해보세요.
      2-3 Maze sq2_instruction: |
        길을 따라 이동해서, 돼지에게 보내주세요.
        TNT를 피하지 않으면 깃털들이 날리게 됩니다.
      2-3 Maze sq3_instruction: "초록색 나쁜 놈에게 데려다 줘!(TNT 폭탄 조심)"
      2-3 Maze sq4_instruction: "나쁜 돼지를 잡을 수 있게 도와줘, 침착하게 생각하면 돼. 돼지를 못 잡으면, 화가 날
        것 같아!"
      2-3 Maze sq5_instruction: "저를 돼지에게 보내주세요! 블록을 몇 번이나 반복해야 할까요?"
      2-3 Maze sq6_instruction: '이전의 반복을 블록 두개로 바꿔서 처리해 볼까요?(힌트: "반복횟수" 블록을 사용해 루프를
        만들어 보세요)'
      2-3 Maze sq7_instruction: 3개의 블록만 사용해서, 초록색 강도에게 보내주세요.
      2-3 Maze sq8_instruction: |
        저를 돼지에게 이동시켜주세요!
        ("반복 횟수" 블록이 어디에 필요할까요?)
      2-3 Maze sq9_instruction: "더 적은 블록들을 사용해서 돼지에게 이동시켜주는, 반복 구조를 만들어보세요."
      2-3_instruction: |
        Purple flowers may have either 1 or 0 nectar. Be careful
        not to collect nectar from a purple flower if it doesn't have any.
      2-3level1_instruction: "새를 앞으로 이동시켜서, 나쁜 돼지를 잡아보세요."
      4-5 Artist 1_instruction: "상자 그리기를 완성할 수 있도록 도와주세요.\n(선의 길이는 300 픽셀입니다.) \n"
      4-5 Artist 10_instruction: |
        "실행"을 눌러 코드를 확인하세요. 그 다음에
        그림을 완성하기 위해서 충분히 반복시키세요. 색은 그때마다 바뀔 것입니다.
      4-5 Artist 11_instruction: |
        녹색 줄들을 다 그리세요. 줄들의 길이는 300 픽셀로
        15 픽셀 만큼씩 떨어져 있습니다.
      4-5 Artist 2_instruction: "사각형을 완성할 수 있도록 이 코드를 반복시켜주세요."
      4-5 Artist 3.5_instruction: "그럼 이번에 이 코드를 실행(또는 \"실행\" 누르기) 하면 \n무슨일이 벌어질지 생각해
        보세요. 그 다음에 여러 번 반복해서 그림을 완성해 보세요!\n"
      4-5 Artist 3_instruction: |
        이 사각형 꽃 침대는 주변 둘레가 600입니다.
        긴 쪽의 길이는 200 입니다. 사각형을 그려보세요.
      4-5 Artist 4_instruction: |
        하나의 원 안에는 얼마나 많은 각이 있을까요? 블록들을 반복
        실행해서 무지개색의 원을 한 개 만들어 보세요.
      4-5 Artist 5_instruction: "어떤 각도를 사용하시겠습니까?"
      4-5 Artist 6_instruction: |
        이 정삼각형의 안쪽 각도는 60, 60, 60 도 입니다.
        각 변의 길이는 200 픽셀입니다. 그림을 완성해 보세요.
      4-5 Artist 7_instruction: |
        이 직각삼각형의 안쪽 각도는 30, 60, 90 도 입니다.
        기울어진 변의 길이는 100 픽셀의 2배 입니다. 그림을 완성해 보세요.
      4-5 Artist 8_instruction: "축구장의 중앙선은 사이드라인과 직각입니다. 이 경기장의 둘레는 800 픽셀이고 세로 길이는
        240 픽셀입니다. 가로 길이는 얼마일까요? 경계선과 중앙선을 그려보세요."
      4-5 Artist 9_instruction: "디자인이 대칭이 되도록 나머지 반을 그려보세요. 삼각형들은 등변 삼각형이고 길이는 50
        픽셀입니다."
      4-5 Artist Assessment 1_instruction: |
        형성평가: 정삼각형을 그릴 수 있도록 반복 구조를 사용해 보세요.
        각 변의 길이는 300 픽셀입니다.
      4-5 Artist For Loops 1_instruction: "너비 블록들에 1부터 10까지 넣어 실행시켜보세요."
      4-5 Artist For Loops 11_instruction: '"반복 ~인 동안" 블록으로 0, 20, 40, 60, 80,...,
        200 을 카운트 할 수 있도록 해보세요.'
      4-5 Artist For Loops 12_instruction: "\"부터\" 와 \"까지\" 의 수를 서로 바꾸면 어떻게 될까요?\n\"반복
        ~인 동안\" 블록으로 200, 180, 160, 140, 120,...,0 으로 카운트 할 수 있도록 해보세요. \n"
      4-5 Artist For Loops 13_instruction: |
        이 디자인은 "반복 ~인 동안" 블록이 없어서 아주 많은 블록들을 사용하고 있습니다.
        이 나선 모양을 완성하기 위해서 "반복 ~인 동안" 블록을 사용해보세요.
        힌트: 마지막 선은 250 픽셀 크기입니다.
      4-5 Artist For Loops 14_instruction: '코드를 배우기 시작하고나면 더 빠른 방법들이 있다는 것을 알게 됩니다.
        삼각 나선구조를 완셩하기 위해서 사용된 블록들을 "for" 블록으로 바꿔보세요. (힌트: 마지막 선의 길이는 300 픽셀입니다.)'
      4-5 Artist For Loops 15_instruction: '코드를 배우기 시작하고나면 더 빠른 방법들이 있다는 것을 알게 됩니다.
        육각 나선구조를 완셩하기 위해서 사용된 블록들을 "for" 블록으로 바꿔보세요. (힌트: 마지막 선의 길이는 200 픽셀입니다.)'
      4-5 Artist For Loops 2_instruction: "이것은 for 반복 블록입니다. 1, 2, 3... 10, 을 일일이
        입력하는 대신, for 블록 안에 포함되어있는 블록들을 원하는 만큼 반복 실행시켜줍니다. for 블록 안에 to 부분에 10을 넣어보세요."
      4-5 Artist For Loops 3_instruction: |
        어떻게 하면 1부터 50까지 카운트 할 수 있을까요?
        "반복 ~인 동안" 블록을 수정해 보세요.
      4-5 Artist For Loops 4_instruction: '"반복 ~인 동안" 블록으로 1부터 10까지, 1만큼 씩 증가하며 카운트해
        보세요.'
      4-5 Artist For Loops 6_instruction: 50, 60, 70, 80, 90 픽셀 크기의 정사각형들을 그려보세요.
        "사각형 그리기" 함수 블록을 5 번 사용면 됩니다.
      4-5 Artist For Loops 7_instruction: '같은 삼각형들을 그려봅시다. 이번에는 "count with" 블록을 이용해서
        크기들을 바꿔보세요. "사각형 그리기" 함수 안에 "카운터" 블록을 넣어보세요. 힌트: 변수 카테고리에 있습니다.'
      4-5 Artist For Loops 8_instruction: 10부터 200까지 10씩 올리며 카운트하면서 반복하도록 "for" 블록
        안에 다른 블록들을 넣어 완성 시켜주세요. 반복 카테고리에서 "for" 블럭을 찾을 수 있습니다.
      4-5 Artist For Loops 9_instruction: |
        이 원들의 크기는 5, 10, 15, 20, 25, 30, 35 입니다.
        "반복 ~인 동안" 블록을 사용해서 원들을 그려보세요.
      4-5 Artist Free Draw 1_instruction: |
        자유롭게 그려보세요!
        무엇이든지 그리고 싶은 것을 그려보세요.
      4-5 Artist Functions 1_instruction: "반복 구조를 이용해서 이 삼각형을 그려보세요."
      4-5 Artist Functions 10a_instruction: 이 코드를 "눈송이 그리기" 함수 안에 넣고 50 값을 "크기" 변수로
        바꿔주세요. 이 함수는 100 픽셀 크기의 눈송이들을 만들기 위해서 사용되었습니다.
      4-5 Artist Functions 10b_instruction: '"눈송이 그리기" 함수를 이용해서 서로 다른 크기의 눈송이들을 만들어
        보세요. 힌트: 첫 번째 눈송이의 길이는 25이고 그 이후로는 2배씩 커지면 됩니다.'
      4-5 Artist Functions 11_instruction: '이 "육각형 그리기" 함수는 "삼각형 그리기" 함수를 사용합니다. (힌트:
        육각형은 6개의 변들로 이루어져 있으며, 각 변의 길이는 100 픽셀입니다.)'
      4-5 Artist Functions 12_instruction: '"웨이브 그리기" 함수를 완성해 봅시다. 각 웨이브는 위아래로 한 번씩
        구부러진 모양입니다. 힌트: 5개의 파란 웨이브를 그려보세요.'
      4-5 Artist Functions 13 Free play_instruction: "행성, 별, 로켓, 로봇을 그리기 위한 함수들이 여기
        있습니다. 함수들을 자유롭게 이용해서 여러분이 원하는 그림들을 그리고 친구들에게 공유해 보세요."
      4-5 Artist Functions 14 Free play_instruction: 여기 여러가지 함수들을 만들어 드렸습니다. 한 두개
        이상의 반복 구조 안에 넣어서 사용해 보세요. 여러분이 원하는 그림들을 만들어서 친구들에게 공유해 보세요. "실행" 을 눌러 예시를
        살펴보세요.
      4-5 Artist Functions 15 Assessment_instruction: '형성평가: "사각형 그리기" 블록을 사용해 사각형들을
        그려보세요. 사각형들의 각 변의 길이는 50, 100, 15 픽셀입니다.'
      4-5 Artist Functions 2a_instruction: 자 이제 이 블록들을 "작은 삼각형 그리기" 라는 새로운 함수에 넣고,
        사용해 보세요.
      4-5 Artist Functions 2b_instruction: 자 이제 주어진 블록들을 이용해서 "작은 삼각형 그리기" 함수를 만들어보세요.
      4-5 Artist Functions 3_instruction: "\"중간 삼각형 그리기\", \"큰 삼각형 그리기\" 함수를 만들어보세요.\n\"작은
        삼각형 그리기\" 함수가 주어져 있습니다.\n삼각형들의 크기는 50(작은 삼각형), 100(중간 삼각형), 150(큰 삼각형) 입니다.
        \n"
      4-5 Artist Functions 4_instruction: 새로운 "삼각형 그리기" 함수는 매개변수가 있기 때문에, 이전에 보았던
        3개의 다른 함수 모두의 기능을 한 번에 할 수 있습니다. 새로운 함수를 사용해서 같은 크기의 삼각형을 3개 그려보세요.
      4-5 Artist Functions 5_instruction: '"삼각형 그리기" 함수를 수정해서 "사각형 그리기" 함수로 만들어 주세요.'
      4-5 Artist Functions 6_instruction: '"사각형 그리기", "삼각형 그리기" 함수를 이용해 집을 그려보세요.
        (힌트: 사각형의 한 변의 길이는 200 픽셀입니다.)'
      4-5 Artist Functions 6b_instruction: 삼각형/사각형 그리기 함수들을 추가해서 "집 그리기" 함수를 만들어 사용해
        보세요.
      4-5 Artist Functions 7_instruction: '"집 그리기" 함수를 이용해서 100, 50 픽셀의 집들을 그려보세요.
        두 집은 50 픽셀 만큼 떨어져 있습니다.'
      4-5 Artist Functions 8_instruction: '"꽃 그리기" 함수는 줄기의 높이를 설정할 수 있는 매개 변수가 있습니다.
        높이를 200 으로 설정한 다음에 어떻게 되나 살펴보세요.'
      4-5 Artist Functions 9_instruction: 3개의 꽃을 그리세요. 첫 번째 꽃은 높이 100, 그 다음에는 50 만큼
        씩 커지게 그리면 됩니다. 꽃들은 100 픽셀 만큼씩 떨어져 있습니다.
      4-5 Artist Patterns 1_instruction: "반복 구조를 이용해서 이 사각형을 그려주세요. 각 변은 20 픽셀 입니다."
      4-5 Artist Patterns 10_instruction: "이 코드는 두 줄의 육각형을 만들어 줍니다. - 전체 벌집을 다 그리기
        위해서 4번 반복 실행하면 됩니다. 힌트: 가장 마지막 반복에서 120 픽셀 만큼 뒤로 뛰어야, 화가가 화면을 벗어나지 않습니다."
      4-5 Artist Patterns 11_instruction: "반 원을 그리기 위해서 얼마나 반복시켜야 할 까요? 힌트: 각 원의 내각은
        360도이고, 한 번 반복시키면 3도 만큼씩 돌아갑니다. 완전한 원을 만들기 위해서는 몇 번이나 반복해야 할까요?"
      4-5 Artist Patterns 12_instruction: "반복하는 것을 복사해서 오른쪽으로 돌기를 왼쪽으로 돌기로 바꾸면 어떻게
        될까요? 이 웨이브를 만들기 위해서 반복해 주세요."
      4-5 Artist Patterns 13_instruction: "그림 틀을 만들기 위해서 전체를 4번 반복시켜보세요. 모서리에 주의하세요
        - 90도만 돌면 안됩니다! 3도를 60번 돌면 반 원을 만들 수 있습니다. 어떻게 사분원(1/4 원) 을 만들 수 있을까요?"
      4-5 Artist Patterns 2_instruction: "어떤 반복 구조 안에 다른 반복 구조를 넣으면, 중첩 반복이라고 부릅니다.
        15개의 모든 사각형들이 한 줄로 서려면 바깥쪽 반복 구조를 어떻게 추가해야 할까요?"
      4-5 Artist Patterns 3_instruction: "좀더 어려운 것을 해보아요! 반복 구조 안에 반복 구조를 넣어봤는데, 다음
        줄을 그리려면 화가를 다시 이전 위치로 돌려 놓아야 해요. 전체 격자를 그리기 위해서 가장 바깥쪽 반복의 끝에 어떤 블록들을 놓아야
        할까요?"
      4-5 Artist Patterns 4_instruction: "이 다이아몬드는 각 변이 50 픽셀이고, 120도 각과 60도 각으로 이루어져
        있습니다. 다이아몬드를 그려보세요."
      4-5 Artist Patterns 5.5_instruction: "다이아몬드 격자를 그리기 위해서는 얼마나 많이 반복해야 할까요?"
      4-5 Artist Patterns 5_instruction: "자 이제 한 줄에 6개의 다이아몬드를 그려보세요. 다이아몬드 코드에서 2번
        반복하던 것을 3번 반복으로 고친것을 잘 보세요. - 왜 그랬을까요?"
      4-5 Artist Patterns 6_instruction: "다이아몬드 격자를 그리기 위해서는 얼마나 많이 반복해야 할까요?"
      4-5 Artist Patterns 7_instruction: 이전 퍼즐에서 사용했던 코드를 변형해서 더 복잡한 패턴을 만들어보세요. 다이아몬드들이
        얼마나 겹쳐 그려지는지 살펴보고, 첫 번째 "뒤로 점프하기"를 100에서 50사이 정도로 바꿔보세요. - 그리고 나서 두 번째 "뒤로
        점프하기"는 얼마나 더 멀리 해야 할까요?
      4-5 Artist Patterns 8_instruction: "반복 구조를 사용해서 각 변의 길이가 40 픽셀이면서 내각의 크기가 60
        도인 육각형을 만들어 보세요."
      4-5 Artist Patterns 9.5_instruction: "이 코드를 반복시켜서 두 줄로 육각형들을 만들어보세요. 두 번째 줄이
        오른쪽으로 얼마나 빗겨 그려져 있는지 살펴보세요."
      4-5 Artist Patterns 9_instruction: "주어진 코드를 3번 반복시켜서 모든 줄을 그려보세요. 힌트: 각각의 6각형들은
        너비가 80픽셀입니다."
      4-5 Artist Patterns Free Play_instruction: "마음대로 그리기 - 원하는 패턴을 직접 만들어보세요."
      4-5 Bee Conditionals - FC Test_instruction: "꿀벌이 꽃꿀을 원합니다. 모두 꽃은 아니기 때문에, 안개
        구름 아래에 꽃이 숨어있는지 모두 살펴보아야 합니다. 꽃이면 꽃꿀을 모으면 됩니다."
      4-5 Bee Conditionals 1 (copy 1)_instruction: |
        The bee can't tell if this is
        a flower or a honeycomb. Gather nectar only from flowers, but first check
        if it is a flower or a honeycomb.
      4-5 Bee Conditionals 1_instruction: |
        구름으로 가려 잘 보이지 않습니다!
        구름 아래에 꽃이 있는지 살펴보고, 꽃이 있는 경우에만 꽃꿀을 모아보세요.
        주의하세요, 계속 바뀝니다!
      4-5 Bee Conditionals 2 (copy 1)_instruction: |
        The bee only wants nectar right
        now. Remember, not all objects are flowers, so check to gather nectar only
        at flowers.
      4-5 Bee Conditionals 2_instruction: "구름들이 더 많습니다! 모든 구름 아래에 꽃들이 있는 것은 아니기 때문에
        구름 아래에 꽃이 숨어있는지 살펴보고 꽃꿀을 모아야 합니다. 기억하세요: 구름들 아래에 있는 것들이 똑같은 것들은 아닙니다!"
      4-5 Bee Conditionals 3_instruction: |
        이제 꿀을 만들고 싶습니다.
        이 구름들 중 아래에 벌집이 있을 것입니다. 각 구름을 검사해야합니다!
      4-5 Bee Conditionals 4 (copy 1)_instruction: |
        The unknown object is either
        a flower or a honeycomb. Use the if/else block to collect nectar if it is
        a flower, else to make honey (because it is a honeycomb).
      4-5 Bee Conditionals 4_instruction: "이 구름들은 꽃이나 벌집을 가립니다! 만약/아니면 블록을 사용해서 꽃인
        경우에 꽃꿀을 모으고, 꽃이 아닌 경우(즉, 벌집인 경우)에는 꿀을 만들도록 해주세요."
      4-5 Bee Conditionals 5_instruction: "이 안개 구름들 아래에는 꽃이나 벌집이 있을 수 있습니다. 만약/그렇지않으면
        블록을 이용해서 꽃이면 꽃꿀을 모으고 아니면 (즉, 벌집이라면) 꿀을 만들도록 해보세요."
      4-5 Bee Conditionals 6 (copy 1)_instruction: |
        This purple flower may have either
        3, 2, or 1 nectar. Here an if-else block is combined with another if-else
        block to create an if, else-if, else block. Complete the solution to collect
        the unknown amount of nectar.
      4-5 Bee Conditionals 6_instruction: 이 자주색 꽃에는 꽃꿀이 1, 2, 3개 있을 수 있습니다. 이 "만약/아니면"
        블록은 다른 "만약/아니면" 블록과 결합되어서, "만약/(아닌데 만약/아니면)" 명령을 만들어낼 수 있습니다. 꽃꿀의 양을 모르는 경우에도
        꽃꿀을 모두 얻을 수 있게 해보세요.
      4-5 Bee Conditionals 7_instruction: 자주색 꽃은 꽃꿀이 3, 2, 1 중 하나입니다. "자주색 꽃 확인" 함수를
        완성하고 이용해서 꽃의 모든 꽃꿀들을 모을 수 있도록 해보세요.
      4-5 Bee Conditionals 8_instruction: '"꽃을 확인하고 꿀 만들기" 함수의 내부를 완성해 주세요. 자주색 꽃의
        꽃꿀이 3, 2, 1 인 경우에는 모든 꽃꿀을 모으고, 그 후에 앞으로 이동해서 꿀을 만들면 됩니다.'
      4-5 Bee Conditionals Assessment 1_instruction: |
        형성평가: 이 코드에는 오류가 있습니다.
        "꽃꿀을 모으거나 꿀 만들기" 함수를 완성해서, 모든 꽃꿀을 모으거나 꿀을 만들도록 만들어 주세요. 분홍 꽃에는 3, 2, 1 개의 꽃꿀이 있을 수 있습니다.
      4-5 Bee Debugging 1_instruction: "이 블록들이 왜 안되는지 진짜 잘 모르겠어요. 고쳐주세요."
      4-5 Bee Debugging 10_instruction: "오류들을 찾아 고쳐주세요."
      4-5 Bee Debugging 11_instruction: "반복 횟수가 정확한가요?"
      4-5 Bee Debugging 2_instruction: "꿀벌이 꽃꿀을 모아 꿀을 만들 수 있도록 도와주세요."
      4-5 Bee Debugging 3_instruction: "오류들을 찾아 고쳐주세요."
      4-5 Bee Debugging 4_instruction: |
        이 블록들은 제대로 동작하지 않습니다.
        어떤 패턴인가요?
      4-5 Bee Debugging 5_instruction: "뭔가 틀린 것 같습니다..."
      4-5 Bee Debugging 6_instruction: |
        자주색 꽃에는 꽃꿀이 얼마나 있는지 알 수가 없습니다.
        꽃에서 모든 꽃꿀을 뽑을 수 있도록, 블록들을 수정해보세요.
      4-5 Bee Debugging 7_instruction: "함수에 뭔가 빠졌습니다..."
      4-5 Bee Debugging 8_instruction: "함수는 맞는데, 정확히 사용되지는 않았습니다."
      4-5 Bee Debugging 9_instruction: "왜 꿀벌이 충분한 꿀을 만들지 못 할까요?"
      4-5 Bee Debugging Assessment 1_instruction: "형성평가: 코드를 수정해 주세요."
      4-5 Bee Nested Loops 1_instruction: "꽃꿀을 모두 모으기 위해서 반복 구조를 사용해보세요."
      4-5 Bee Nested Loops 2_instruction: "각 꽃에서 꽃꿀을 모두 모아주세요.\n반복을 중첩해서 사용하면 됩니다.
        \n"
      4-5 Bee Nested Loops 3_instruction: "중첩 반복 안에 시작 코드를 넣어서 모든 꽃꿀을 모아보세요."
      4-5 Bee Nested Loops 4_instruction: "각 꽃의 꽃꿀들을 모두 모아서\n벌집에서 꿀을 만들어 보세요. 중첩 반복을
        사용하면 됩니다. \n"
      4-5 Bee Nested Loops 5_instruction: "중첩 반복 구조를 만들어서 모든 꽃꿀을 모아보세요."
      4-5 Bee Nested Loops 6_instruction: "꽃꿀을 모두 모아주세요."
      4-5 Bee Nested Loops 7_instruction: "반복 구조를 다른 반복 구조 안에 넣어 중첩 반복을 만든 후 꽃에서 모든
        꽃꿀을 모을 수 있도록 해보세요."
      4-5 Bee Nested Loops 8_instruction: "반복 구조를 중첩해서, 각 꽃에서 꽃꿀을 모두 모아주세요.\n안쪽 반복
        블록을 다른 반복 블록으로 바꿔보세요. \n"
      4-5 Bee Nested Loops 9_instruction: "반복 구조 안에 반복 구조를 중첩시켜서 이 꽃들로 부터 모든 꽃꿀을 모아보세요."
      4-5 Bee Nested Loops Assessment 1_instruction: "형성평가: 반복 구조들을 사용해서 모든 꽃꿀을 모아서
        꿀을 만드세요."
      4-5 Bee Nested Loops Rows_instruction: "꽃들로 부터 꽃꿀을 모으세요. 중첩 반복을 사용하면 됩니다."
      4-5 Maze 1 (copy 1)_instruction: "여보세요.. 저.. 좀비.. 해바라기.. 가야함.."
      4-5 Maze 1_instruction: "여보세요.. 저.. 좀비.. 해바라기.. 가야함.."
      4-5 Maze 10_instruction: 4개의 블럭만 사용해서 해바라기로 갈 수 있나요?
      4-5 Maze 11_instruction: 6개의 블록만 사용해서 해바라기로 갈 수 있나요?
      4-5 Maze 12_instruction: |
        좋아요. 이건 약간 다르네요.
        6개의 블록만으로 해보세요.
      4-5 Maze 13_instruction: "저를 돼지에게 이동시켜 주세요."
      4-5 Maze 14_instruction: "저를 돼지에게 이동시켜주세요! 반복(~할 때까지) 블록을 사용하면 됩니다."
      4-5 Maze 2 (copy 1)_instruction: "좀비를 해바라기로 이동시키되, 식충식물은 피해야 합니다."
      4-5 Maze 2_instruction: "좀비를 해바라기로 이동시키되, 식충식물은 피해야 합니다."
      4-5 Maze 3 (copy 1)_instruction: "해바라기.. 로.. 꼭.. 가야합니다."
      4-5 Maze 3_instruction: "해바라기.. 로.. 꼭.. 가야합니다."
      4-5 Maze 4 (copy 1)_instruction: 더 적은 수의 블럭을 사용하기 위해 "반복"블럭을 사용해 보세요.
      4-5 Maze 4_instruction: 더 적은 수의 블럭을 사용하기 위해 "반복"블럭을 사용해 보세요.
      4-5 Maze 5 (copy 1)_instruction: "블록을 최대한 적게 사용해서, 이 퍼즐을 해결해보세요."
      4-5 Maze 5_instruction: "블록을 최대한 적게 사용해서, 이 퍼즐을 해결해보세요."
      4-5 Maze 6 (copy 1)_instruction: "블록을 최대한 적게 사용해서, 이 퍼즐을 해결해보세요."
      4-5 Maze 6_instruction: "블록을 최대한 적게 사용해서, 이 퍼즐을 해결해보세요."
      4-5 Maze 7_instruction: "여보세요.. 저.. 좀비.. 해바라기.. 가야함.."
      4-5 Maze 8_instruction: '"반복" 블럭을 사용해서 좀비가 해바라기로 가도록 해주세요. (식충식물들은 피해야 합니다!)'
      4-5 Maze 9_instruction: '"~할 때까지 반복" 블럭으로 반복을 만들어보세요.'
      4-5 Maze Assessment 1_instruction: "형성평가: 해바라기로 가기"
      4-5 Maze Conditionals 1_instruction: |
        "반복 ~할 때까지"블록을 이용해서,
        좀비를 해바라기로 이동시켜주세요.
      4-5 Maze Conditionals 10_instruction: "더 복잡한 미로를 풀 수 있도록 3개의 블록만 더 더해 주실 수 있으세요?
        그렇게만 된다면, 얼마나 멀던지 상관없이 구부러진 길에서 돌아갈 수 있을 것 같아요."
      4-5 Maze Conditionals 2_instruction: |
        "반복 ~할 때까지"블록을 이용해서,
        좀비를 해바라기로 이동시켜주세요.
      4-5 Maze Conditionals 3_instruction: |
        "만약" 블록을 이용하면, 언제 돌아야 할지 판단할 수 있습니다.
        힌트: 블록을 1개 더 사용하면 되지만, 이번에 "만약" 블록을 사용법을 배워야, 다음 퍼즐을 해결할 때 사용할 수 있습니다.
      4-5 Maze Conditionals 4_instruction: 음... 이번이 마지막 퍼즐입니다!, "만약" 블록하고 "반복" 블록을
        함께 사용하면 됩니다.
      4-5 Maze Conditionals 5_instruction: "나 해바라기 원해! \n\"만약\" 블록을 사용해서, 최대한 적은 블록만
        사용해서 보내주세요.\n"
      4-5 Maze Conditionals 6_instruction: "나 해바라기 원해! \n\"만약\" 블록을 사용해서, 최대한 적은 블록만
        사용해서 보내주세요.\n"
      4-5 Maze Conditionals 7_instruction: |
        좋아요. 다시 한번 연습해 보세요.
        - 그렇게 어렵지 않지만, 식충 식물을 조심하세요!
      4-5 Maze Conditionals 8_instruction: '"조건/선택" 블럭은 조건을 검사한 다음에 그 결과에 따라 하나의 작업을
        선택해 실행해 줍니다. 이 블록을 사용해서 저를 해바라기로 보내주세요.'
      4-5 Maze Conditionals 9_instruction: '"조건/선택" 블록을 다시 한 번 사용해 보겠습니다. 한 번에 성공할
        수 있겠어요?'
      4-5 Maze Conditionals Assessment 1_instruction: '"~할 때까지" 블록과 "만약-아니면" 블록을 사용하고
        가장 적은 블록 개수로 해바라기로 보내주세요.'
      4-5 Nested Loops 1_instruction: "이 삼각형들을 그리는 코드를 완성시켜 주세요. 첫 번째 것은 만들어져 있습니다.
        힌트: 360 도 방향으로 3개의 삼각형들이 있습니다."
      4-5 Nested Loops 10_instruction: "이전에 사용되었던 반복 블럭들을 사용해서 마지막 줄의 별들을 그려 주세요.
        별들은 50 픽셀씩 떨어져 있습니다. 각 별들의 너비는 30 픽셀입니다."
      4-5 Nested Loops 11_instruction: "중첩 반복을 사용해서 사람다니는 길에 10개의 사각형들을 그려주세요. 각 사각형들은
        30 픽셀입니다."
      4-5 Nested Loops 12_instruction: "중첩 반복을 이용해서 36개의 삼각형들을 그려주세요."
      4-5 Nested Loops 2_instruction: "이번에는 반복을 다른 반복에 넣어서 10개의 삼각형을 그려보세요.\n이러한 것을
        중첩 반복이라고 합니다. 힌트: 360도를 돌며 10개의 삼각형을 그려야 합니다.  \n"
      4-5 Nested Loops 3_instruction: |
        다른 반복 안에 시작 코드를 중첩시켜 넣어서 해를 만들어 주세요. 이러한 것을 중첩 반복이라고 합니다.\r
      4-5 Nested Loops 5_instruction: "주어진 코드를 반복시켜서 풍차를 만들어 주세요."
      4-5 Nested Loops 6_instruction: "삼각형 코드를 반복시켜서 육각형을 그려 주세요."
      4-5 Nested Loops 7_instruction: "이 디자인을 10번 반복시켜주세요. 한 번 반복하고나서 얼마나 회전해야 할까요?
        (힌트: 360을 10으로 나누면 얼마일까요?)"
      4-5 Nested Loops 8_instruction: "이 디자인을 6번 반복시켜주세요. 한 번 반복하고나서 얼마나 회전해야 할까요?
        (힌트: 360을 6으로 나누면 얼마일까요?)"
      4-5 Nested Loops 9_instruction: "악어 입 안에 이빨을 그려주세요!"
      4-5 Nested Loops Assessment 1_instruction: "중첩 반복을 사용해서 디자인을 완성시켜주세요."
      4-5 While Loops 1_instruction: 구멍으로 이동해서 "메우기" 블록으로 흙을 2번 메우기 해주세요.
      4-5 While Loops 2_instruction: 흙더미로 이동해서 "치우기" 블록으로 흙을 5번 치우기 해주세요.
      4-5 While Loops 3_instruction: "흙더미로 이동해서 흙을 모두 치우고, 구덩이로 이동해서 흙을 모두 메워 주세요.
        힌트: 최대한 블록을 적게 사용하세요."
      4-5 While Loops 4_instruction: "와! 진짜 깊은 구덩이를 발견했습니다. 얼마나 흙을 메워야 할지 모르겠어요. 구덩이가
        다 메워질 때까지 계속 흙을 채울 수 있을까요? 힌트: 이번에는 while 블록을 사용해 보세요."
      4-5 While Loops 5_instruction: "와! 이번에는 깊은 구덩이가 2개 입니다. 2개의 구덩이를 모두 채워주세요."
      4-5 While Loops 6_instruction: "와우, 저기 엄청 큰 흙더미가 있네요! 흙더미를 모두 치워보세요."
      4-5 While Loops 7_instruction: "와우, 이제는 3개의 흙더미가 있습니다! 3개의 흙더미를 모두 치워주세요."
      4-5 While Loops 8_instruction: " 진짜 깊은 구덩이와 진짜 큰 흙더미가 있습니다. 구덩이를 메우고 흙더미를 치우려면
        얼마나 많은 삽질이 필요 할까요? 힌트: 모두 while 반복을 사용해 보세요."
      4-5 While Loops Assessment 1_instruction: "구덩이와 흙더미가 많이 있습니다. 모든 구덩이와 흙더미를 없애주세요."
      AlgPD DR Free Play_instruction: Create a function based on your own word problem.
      AllTheThings Applab - Turtle move with button_instruction: |
        Add a button that
        moves the turtle when clicked.  (Click to see full instructions)
      allthethings data blocks test_instruction: |
        Please sign in to test applab levels
        (By design, applab levels only work if signed in. Normally, we make people
        sign in, but this is only enforceable for a whole script and would be annoying
        to do for the allthethings script).
      allthethings design mode elements_instruction: |
        Please sign in to test applab
        levels (By design, applab levels only work if signed in. Normally, we make
        people sign in, but this is only enforceable for a whole script and would
        be annoying to do for the allthethings script).
      allthethings_moviebot_instruction: |
        This level cloned from "U3 Digital Assistant
        Target"
      allthethings_template_backed1_instruction: "Backed by a template #1. Please\nsign
        in to test applab levels (By design, applab levels only work if signed\nin.
        Normally, we make people sign in, but this is only enforceable for a whole\nscript
        and would be annoying to do for the allthethings script). \n"
      allthethings_template_backed2_instruction: |
        Backed by a template #2. Please
        sign in to test applab levels (By design, applab levels only work if signed
        in. Normally, we make people sign in, but this is only enforceable for a whole
        script and would be annoying to do for the allthethings script).
      App Lab test_instruction: "검사"
      Applab allthethings onRecordEvent_instruction: |
        Please sign in to test applab
        levels (By design, applab levels only work if signed in. Normally, we make
        people sign in, but this is only enforceable for a whole script and would
        be annoying to do for the allthethings script).
      Applab test_instruction: This level is submittable. For testing only!
      AppLab_test02_instruction: |
        One sentence summary of the activity. Click to
        view full instructions.
      Artist - Nested Loops 1_instruction: |
        Complete the code to draw these triangles.  The
        first one is done for you.  Hint:  3 triangles in a 360 degree rotation.
      Artist - Nested Loops 10_instruction: |
        Draw the last row of stars on this flag
        by looping the provided blocks. The stars are 50 pixels apart, but remember
        that the stars themselves are 30 pixels wide.
      Artist - Nested Loops 11_instruction: |
        Can you draw these 10 squares of this
        sidewalk using a nested loop? Each square is 30 pixels.
      Artist - Nested Loops 12_instruction: |
        Can you draw these 36 triangles using
        a nested loop?
      Artist - Nested Loops 2_instruction: "Now nest this loop inside another loop\nto
        draw 10 triangles.  This is called a nested loop.  Hint: All 10 triangles\ncomplete
        a 360 degree rotation.  \n"
      Artist - Nested Loops 3_instruction: |
        Create a sun by nesting the starter code
        in another loop. This is called a nested loop.\r
      Artist - Nested Loops 5_instruction: Loop the given code to create a windmill.
      Artist - Nested Loops 6_instruction: |
        Can you draw a hexagon by looping the
        triangle code?
      Artist - Nested Loops 7_instruction: |
        Loop this design 10 times. How much do
        you have to turn each time you loop? (Hint: What is 360 divided by 10?)
      Artist - Nested Loops 8_instruction: |
        Loop this design 6 times. How much do
        you have to turn each time you loop? (Hint: What is 360 divided by 6?)
      Artist - Nested Loops 9_instruction: Draw the teeth in the alligator's mouth!
      Artist - Nested Loops Assessment 1_instruction: "중첩 반복을 사용해서 디자인을 완성시켜주세요."
      Auto Open Function Editor_instruction: "함수 안에서, 다른 함수를 불러 사용할 수 있습니다!\n\"모양\"
        함수를 기본으로 활용해서, 50 픽셀 크기로 시작한 후, 20 픽셀 만큼 씩 커지는\n3개의 집 모양을 만들어 보세요. 반복 카운터
        구조를 사용하면 꽤 도움이 될 것입니다. \n"
      Bee Recommended Blocks test_instruction: "자주색 꽃들은 1 또는 0 의 꽃꿀이 있지만, 정확히 알 수
        없습니다. 꽃꿀이 없는 자주색 꽃에서 꿀을 모으지 마세요. if 블록을 사용해서 꽃꿀이 1 만큼 있는지 확인해 주세요."
      Big Game Animation 1 (copy 1)_instruction: |
        Now that you've learned to write
        simple linear functions, let's work on using them to add some movement to
        our game. Click play to see what your game can currently do (not much!), update
        any variables you like, and then click finish to move on.
      Big Game Animation 1_instruction: |
        Now that you've learned to write simple
        linear functions, let's work on using them to add some movement to our game.
        Click "Run" to see what your game can currently do (not much!), update any
        variables you like, and then click finish to move on.
      Big Game Animation 2 (copy 1)_instruction: |
        The function 'update-target'
        function takes the target's current x value, and returns an updated value.
        Complete the 'update-target' function so that it adds to the x value each
        time it is called. The more you add to x, the faster the target will go.
      Big Game Animation 2_instruction: |
        The update-target function takes the target's
        current x value, and returns an updated value. Complete the update-target
        function so that it adds to the x value each time it is called. The more you
        add to x, the faster the target will go.
      Big Game Animation 3_instruction: |
        The update-danger function should work just
        like update-target, except that the danger should move from the right side
        over towards the left. Complete update-danger to make the danger fly across
        the screen.
      Big Game Animation 4_instruction: |
        At this point in your game, your danger
        should run across the screen from right to left, and your target should run
        across from left to right. They don't ever come back on screen once they've
        left, but we'll take care of that later. Take a minute to make sure your
        game is working like you want it to, and then click "Finish" to move on.
      Big Game Booleans 1_instruction: |
        When you last worked on your game we got
        our target and danger sprites to fly across the screen, but they never come
        back. Click "Run" to see how your game is currently working, and then click
        finish and we'll work on making those sprites reappear on screen after they've
        left.
      Big Game Booleans 2_instruction: |
        Go to the Functions section of the toolbox
        and complete the safe-left? function so that it returns true if the sprite's
        x coordinate is greater than -50. If you're successful you should see the
        Danger go off the left side and then return on the right side.
      Big Game Booleans 3_instruction: |
        Now that you've got safe-left?, let's fill
        in safe-right? - it should take in a sprite's x coordinate and return true
        if that coordinate is less than 450. Once your safe-right? is complete you
        should see the Target go off the right side of the screen and return on the
        left.
      Big Game Booleans 4_instruction: |
        Complete the onscreen? function so that it
        checks whether both safe-left? and safe-right? are true.
      Big Game Booleans 5_instruction: |
        At this point your Danger should run across
        the screen from right to left, your Target should run across from left to
        right, and they should both return to the opposite side, repeatedly. Take
        a minute to make sure your game is working like you want it to, and then click
        "Finish" to move on.
      Big Game Collision 1 (copy 1)_instruction: |
        When you last worked on your game
        we got our target and danger sprites to fly across the screen, but they never
        come back. Click run to see how your game is currently working, and then click
        finish and we'll work on making those sprites reappear on screen after they've
        left.
      Big Game Collision 1_instruction: |
        At this point you've programmed a video
        game with a moving Target and Danger, both of which return to the screen once
        they've left, and a Player that responds to keyboard input. Click "Run"
        to see how your game is currently working, and then we'll dig into the final
        missing piece - collision detection!
      Big Game Collision 2_instruction: |
        To move the player up and down, we'll need
        to use a conditional block to figure out which key is pressed and respond
        accordingly. Computers read keypresses as numeric key codes - the up arrow
        is 38 and the down arrow is 40. You can lookup other key codes in your student
        workbook. Edit the 'update-player' function so that if moves the player
        up when the up arrow is pressed, or down when the down arrow is pressed.
      Big Game Collision 3_instruction: |
        Use the Distance Formula, so the distance
        function returns the distance between the player's center coordinates (px,
        py) and another sprite's center coordinates (cx, cy).
      Big Game Collision 4_instruction: |
        Complete the collide? function so that it
        returns true if the distance between two points is less than 100 pixels apart.
      Big Game Complete_instruction: |
        A demo of the completed CS in Algebra Big Game
        project
      Big Game Final_instruction: |
        You made it! At this point your game should be
        fully functioning, take some time to enjoy your new game and make any final
        tweaks to it. When you're happy with the final product, click Finish and
        you'll have an opportunity to share a link to your game. Good work!
      Big Game Player 1_instruction: |
        We're getting really close to a finished game!
        Last time you worked on your game, you used booleans to make your Target and
        Danger return to the screen once they've left. Click Run to see how your
        game looks right now, and then we'll get to making your Player move up and
        down.
      Big Game Player 2_instruction: |
        Edit the update-player function so the player
        moves up when the up arrow (keycode 38) is pressed, and moves down (keycode
        40) when the down arrow is pressed.
      Big Game Testing_instruction: |
        A demo of the completed CS in Algebra Big Game
        project
      Big Game Vars 1 (copy 1)_instruction: |
        Let's get started on your Big Game!
        Here you'll see a whole bunch of placeholder code that you'll eventually
        replace with your own, but for now we're only going to worry about defining
        variables. Click "Run" to see what the game looks like with the default
        values.
      Big Game Vars 1_instruction: |
        Let's get started on your Big Game! Here you'll
        see a whole bunch of placeholder code that you'll eventually replace with
        your own, but for now we're only going to worry about defining variables.
        Click "Run" to see what the game looks like with the default values.
      Big Game Vars 2 (copy 1)_instruction: |
        The first step to making this game your
        own is to give it a good Title. Click edit on the 'title' and 'subtitle'
        variables and change them to something new.
      Big Game Vars 2_instruction: |
        The first step to making this game your own is
        to give it a good Title. Click edit on the title and subtitle variables and
        change them to something new.
      Big Game Vars 3 (copy 1)_instruction: |
        Now let's set the background for your
        new game. Edit the 'bg' variable and select a new background Image from
        the dropdown.
      Big Game Vars 3_instruction: |
        Now let's set the background for your new game.
        Edit the bg variable and select a new background Image from the dropdown.
      Big Game Vars 4 (copy 1)_instruction: |
        Awesome, now you can update the variables
        for your Player, Target, and Danger. Feel free to play with all of the variables
        at this point to make your game look like you'd like it to. Click 'finish'
        when you're done.
      Big Game Vars 4_instruction: |
        Awesome! Now you can update the variables for
        your Player, Target, and Danger. Feel free to play with all of the variables
        at this point to make your game look like you'd like it to. Click "Finish"
        when you're done.
      Brad Spooky House Copy_instruction: |
        Freeplay: Here are the functions you've
        written, and some more for you to play with. Draw something awesome! Play
        with the pen width to see how different your drawings look!
      Brad Spooky House_instruction: |
        Freeplay: Here are the functions you've written,
        and some more for you to play with. Draw something awesome! Play with the
        pen width to see how different your drawings look!
      Building a Foundation Assessment_instruction: |
        Build a three level pyramid,
        there are no other directions, so just play with the pieces until you get
        it!
      Busy Bee 2_instruction: "이 꿀벌은 아주 바쁘답니다! 단순한 코드를 만들어 낼 수 있는 패턴들을 찾아보세요."
      Busy Bee_instruction: "이 꿀벌은 아주 바쁘답니다! 단순한 코드를 만들어 낼 수 있는 패턴들을 찾아보세요."
      C3-Farmer While Loops 1_instruction: |
        Move me to the hole and fill it with
        two shovelfuls of dirt, using the "fill" block.
      C3-Farmer While Loops 2_instruction: |
        Move me to the pile of dirt and remove
        it with 5 shovel scoops, using the 'remove' block.
      C3-Farmer While Loops 3_instruction: |
        Move me to the pile and remove all of
        it, then move to the hole and fill it completely.  Hint:  Use as few blocks
        as possible.
      C3-Farmer While Loops 4_instruction: |
        Wow, I found a really deep hole! I don't
        know how many shovelfuls of dirt it needs.  Can you write a program that fills
        it until the ground is even?  Hint:  Try using the while loop this time.
      C3-Farmer While Loops 5_instruction: |
        Wow, now there are two deep holes! Can
        you write a program that fills them both until the ground is even?
      C3-Farmer While Loops 6_instruction: |
        Wow, now there is a large pile of dirt!
        Can you write a program that removes all of it so the ground is even?
      C3-Farmer While Loops 7_instruction: |
        Wow, now there are three piles of dirt!
        Can you write a program that removes each of them until the ground is even?
      C3-Farmer While Loops 8_instruction: |2
         There is a really deep hole and a really
        large pile of dirt.  How many shovelfuls of dirt need to be moved around to
        make the ground flat?  Hint: Use the while loop for both.
      C3-Farmer While Loops Assessment 1_instruction: |
        There are a lot of holes and
        piles.  Help me to fill and remove them to make the ground flat.
      Calc Circles of Eval .1_instruction: |
        You’ll be writing a kind of code called
        Evaluation Blocks, because each block of code evaluates to a single value.
        Change the ??? in this code so that the block evaluates to 5.
      Calc Circles of Eval .2_instruction: |
        This Evaluation Block is a multiplication
        function which takes two numbers and returns the product of those numbers.
        Edit this block so that it multiplies 2 * 5
      Calc Circles of Eval .3_instruction: |
        Here's a function for addition which
        takes two numbers and returns their sum. Use this Addition Block to add 3
        + 6.
      Calc Circles of Eval .4_instruction: |
        Here we've nested an Addition Block
        inside a Multiplication Block. Complete this code so it multiplies 3 by (4
        + 1)
      Calc Circles of Eval 1 (copy 1)_instruction: |
        Convert this statement to <some_shape>
        of evaluation.
      Calc Circles of Eval 1_instruction: |
        Every mathematical operator (+, -, *,
        /, and so on) can be represented by an Evaluation Block in code. Change the
        Evaluation Block to match the expression.
      Calc Circles of Eval 2 (copy 1)_instruction: |
        Convert this statement to <some_shape>
        of evaluation.
      Calc Circles of Eval 2_instruction: |
        Use a Multiplication Block to complete
        this code.
      Calc Circles of Eval 3_instruction: |
        Complete the Evaluation Blocks to match
        this statement.
      Calc Circles of Eval 4_instruction: |
        This code is missing a couple of Evaluation
        Blocks - make sure you put everything in the right order.
      Calc Circles of Eval 5_instruction: |
        Complete the Evaluation Blocks to match
        this statement.
      Calc Circles of Eval 6_instruction: |
        Complete the Evaluation Blocks to match
        this expression.
      Calc Circles of Eval 7_instruction: |
        Complete the Evaluation Blocks to match
        this statement.
      Calc Circles of Eval 8_instruction: |
        Complete the Evaluation Blocks to match
        this statement.
      Calc Circles of Eval 9_instruction: |
        Complete the Evaluation Blocks to match
        this statement.
      Calc Circles of Eval Free Play_instruction: |
        Free Play: Try using the Evaluation
        Blocks to write some equations of your own. How does nesting the blocks in
        different ways impact their evaluation?
      Calc Define Funcs 1 (copy 1)_instruction: |
        Let's look at some more algebraic
        functions now. Here's a function translated from the simple algebraic function
        f(x) = x + 1. What would you expect this function to output if provided an
        input of 15?
      Calc Define Funcs 1_instruction: |
        Let's look at some more traditional algebraic
        functions now. Here's a function translated from the simple algebraic function
        f(x) = x + 1. What would you expect this function to output if provided an
        input of 15?
      Calc Define Funcs 2_instruction: |
        Write a function f that takes a parameter
        x and returns x - 10. Test your function using f(15).
      Calc Define Funcs 3_instruction: |
        We don't have to call our function f every
        time; create a function called times-ten that should take a parameter x and
        return x * 10. Once you've created the function, run times-ten(50).
      Calc Define Funcs 4_instruction: |
        Write a function called half that takes a
        number x and returns half that number. Once you've written the function,
        use it to calculate half(21)
      Calc Define Funcs 5 - multiply 1_instruction: |
        Oh no! We lost our multiply
        block! We'll have to create a function to multiply for us. To start off,
        write a function "f" that takes a parameter "x" and returns x*5. Test
        your function using f(3).
      Calc Design Recipe 1_instruction: |
        Let's use the Design Recipe to create a
        function called cube - this function should take in a Number and return that
        number to the power of 3. Make sure to write two example cases! When you're
        done, use your new function to calculate cube(7).
      Calc Design Recipe 2_instruction: |-
        Your school is holding a bake sale, and
        you need to track the cost of making each cookie, the money paid, and the
        total profit. Cookies cost $0.25 each to make, and sell for $1.50/cookie.\r
        Write
        the function cost, which takes in the number of cookies you intend to sell,
        and returns the cost of making those cookies.
      Calc Design Recipe 3_instruction: |
        Write the function sales which takes in
        the number of cookies sold, and produces the amount of money customers spent
        to buy those cookies (each cookie is sold at $1.50).
      Calc Design Recipe 4_instruction: |
        Using the two functions we just wrote, write
        the function profit, which takes in the number of cookies you sold, and gives
        you back the total profit you make from selling your cookies, accounting for
        the cost of baking them.
      Calc Free Play_instruction: |
        Free Play: Write functions and algorithms of your
        own design!
      Calc Rocket 1 (copy 1)_instruction: |
        In the last puzzle you wrote a contract
        for the function "rocket-height" that states it has a range of Number, domain
        of Number, and should return the height of the rocket traveling at 15 m/s
        after a given number of seconds. Let's write an example case now for the
        height of the rocket at 3 seconds.\r
        \r
        \r
        \r
          \r
        \r
      Calc Rocket 1_instruction: |
        In the last puzzle you wrote a contract for the
        function rocket-height that states it has a range of Number, domain of Number,
        and should return the height of the rocket traveling at 15 m/s after a given
        number of seconds. Let's write an example case now for the height of the
        rocket at 3 seconds.
      Calc Rocket 2_instruction: |
        Great, let's do one more example before writing
        the function - what should the rocket height be after 30 seconds?
      Calc Vars 1.1_instruction: |
        Here we've set the age variable to 17 years. Can
        you write an expression that calculates age in days?
      Calc Vars 1_instruction: |
        Variables allow us to name values so that we can
        easily refer to them repeatedly throughout our programs. Here's a variable
        called age. Set its value to your age and click run.
      Calc Vars 2 (copy 1)_instruction: |
        Here we've set the "age" variable to
        17 - can you write an expression that calculates "age" in months?
      Calc Vars 2.1_instruction: |
        Here's a new variable called age-in-months. Use
        the variable age to set age-in-months.
      Calc Vars 2_instruction: |
        Can you write an expression that calculates age in
        months?
      Calc Vars 3 (copy 1)_instruction: |
        Can you add to this code so that it calculates
        how many hours there are in "age" years?
      Calc Vars 3_instruction: |
        Can you add to this code so that it uses the "age"
        variable to calculate age in hours?
      Calc Vars 4_instruction: |
        We can also set variables by using other variables.
        Let's say you have a brother who is two years younger than you - can you
        set a new variable "brother-age" using your "age" variable?
      Code Studio Puzzle Challenge 1 - Artist_instruction: "Draw the line. It is\n200
        pixels long. \n"
      Code Studio Puzzle Challenge 1 Artist1_instruction: "Draw the line. It is 200\npixels
        long. \n"
      Code Studio Puzzle Challenge 10 - Bee (copy 1)_instruction: |
        Move the Bee to
        the flower and get all of the nectar.
      Code Studio Puzzle Challenge 10 - Bee_instruction: |
        Move the Bee to the flower
        and get all of the nectar.
      Code Studio Puzzle Challenge 10b - Bee_instruction: |
        Move the Bee to the flowers
        and get all of the nectar at each.
      Code Studio Puzzle Challenge 11 - Artist_instruction: |
        Draw this line by using
        the variable "length". Each line segment is 75 pixels long.
      Code Studio Puzzle Challenge 11b - Artist_instruction: |
        Draw a square by using
        the variable length provided.
      Code Studio Puzzle Challenge 12 - Artist_instruction: |
        The code provided draws
        one triangle. Add to it to draw triangles in a hexagon pattern.
      Code Studio Puzzle Challenge 12a - Artist_instruction: |
        The code provided draws
        one triangle. Add to it to draw triangles in a hexagon pattern.
      Code Studio Puzzle Challenge 13 - Artist_instruction: "This is just like a\n\"for\"
        loop. Complete the code to draw six lines that grow from 50, 60, 70,\n80,
        90, to 100 pixels long. \n"
      Code Studio Puzzle Challenge 14 - Artist_instruction: "This is just like a\n\"for\"
        loop. Complete the loop to draw 4 squares that grow from 80, 100,\n120, to
        140 pixels. \n"
      Code Studio Puzzle Challenge 2 - Artist_instruction: |
        Now add a turn and another
        line. The lines are 200 pixels long.
      Code Studio Puzzle Challenge 3 - Artist_instruction: |
        Draw the square. Each
        side is 100 pixels long.
      Code Studio Puzzle Challenge 4 - Artist_instruction: |
        Draw the octagon. Each
        side is 100 pixels long.
      Code Studio Puzzle Challenge 5 - Bee (copy 1)_instruction: |
        Move the Bee to
        the flower and get the nectar.
      Code Studio Puzzle Challenge 5 - Bee_instruction: |
        Flowers contain a specific
        amount of nectar. Move the Bee to the flower and collect nectar with the get
        nectar block.
      Code Studio Puzzle Challenge 6 - Bee_instruction: |
        Honeycombs can hold a specific
        amount of honey. Get the nectar from the flower and make some honey.
      Code Studio Puzzle Challenge 7 - Bee_instruction: |
        Move the Bee to the flower
        and get the nectar.
      Code Studio Puzzle Challenge 8 - Bee_instruction: |
        The cloud could be hiding
        a flower or a honeycomb. Only get nectar from flowers. Only make honey at
        honeycombs.
      Code Studio Puzzle Challenge 9 - Bee_instruction: |
        The cloud could be hiding
        a flower or a honeycomb. Only get nectar from flowers. Only make honey at
        honeycombs.
      Code Studio Puzzle Challenge Artist Screencast (copy 1)_instruction: "Draw\nthe
        line. Each segment is 100 pixels long. \n"
      Code Studio Puzzle Challenge Artist Screencast 2_instruction: "Complete the\ncode
        to draw the line. Each segment is 100 pixels long. \n"
      Code Studio Puzzle Challenge Artist Screencast_instruction: "Draw the line.\nEach
        segment is 100 pixels long. \n"
      Code Studio Puzzle Challenge Bee Screencast_instruction: |
        Move the Bee to the
        flowers and get all of the nectar.
      Code Studio Puzzle Challenge Square - Artist_instruction: |
        Draw a square by
        using the variable length provided.
      Code Studio Puzzle Challenge Var - Artist_instruction: |
        Draw a line by using
        a variable "length" set to 180.
      Course 2 Bee Loops 1_instruction: "Hi, I'm a bee. Can you help me collect\nthe
        nectar from these flowers? \n"
      Course 2 Bee Loops 13_instruction: |
        Assessment: Use the repeat block to collect
        all of the nectar.
      Course 2 Bee Loops 2_instruction: |
        Can you do the same task more easily with
        a loop?
      Course 2 Bee Loops 3_instruction: |
        Now use the new repeat block to collect
        all of the nectar and make all of the honey.
      Course 2 Bee Loops 3__instruction: |
        Can you use a loop to collect all that
        nectar?
      Course 2 Bee Loops 4_instruction: |
        What happens if you loop this sequence 3
        times? Don't forget to make the honey at the end!
      Course 2 Maze Loops 1_instruction: 5 개의 블록들만 사용해서 돼지로 이동시켜 주세요.
      Course 4 2_instruction: "꿀벌이 꽃꿀을 모으고 있습니다. 꽃들에서만 꽃꿀을 모을 수 있게 해 주세요."
      Course 4 Artist 1_instruction: "상자를 그릴 수 있도록 도와주세요.\n(각 선의 길이는 200 픽셀입니다.) \n"
      Course 4 Artist 10_instruction: |-
        힌트를 다시 보려면 여기를 눌러보세요!\r\r
        재미있는 모양을 위한 코드가 있습니다. 한 번 실행할 때마다 회전시키면 어떤 일이 일어날까요? 이 모양의 각도는 420도까지 가능하고, 실행할 때마다 화가가 바라보는 방향이 바뀔 것입니다. 그리고 그 각도는 정확히 60도 입니다.
      Course 4 Artist 11_instruction: "자 이제 도전해보세요! 이전에 보았던 블록들만 사용해서 만들 수 있는 디자인이
        있습니다. 어떻게 하면 똑같이 만들 수 있을까요? 실패하더라도 계속 도전해 보세요. 한 번에 성공하는 사람은 거의 없습니다. 힌트가
        필요하다고요? 여기를 눌러보세요!"
      Course 4 Artist 12_instruction: |-
        멋진 디자인을 위한 도움말이나 힌트가 필요하면? 여기를 클릭하세요!\r
        \r
        아니면, 자유롭게 디자인해 보세요!
      Course 4 Artist 13_instruction: "계속 하고 있나요? 빈 캔버스가 있습니다. 마음대로 그려보세요."
      Course 4 Artist 2_instruction: "이 코드를 반복시켜서 회색 사각형을 그려주세요."
      Course 4 Artist 20_instruction: "계속 하고 있나요? 빈 캔버스가 있습니다. 마음대로 그려보세요."
      Course 4 Artist 3_instruction: "이 코드를 실행(또는 실행 누르기) 하면 어떻게 될지 생각해 보세요. 그 다음에
        그림을 완성할 때까지 충분히 여러 번 시도해 보세요."
      Course 4 Artist 4_instruction: "원 안에는 얼마나 많은 각이 있을까요? 색 원들을 만들어내기 위해서 필요한 수를
        반복 블록에 채워넣어주세요."
      Course 4 Artist 5_instruction: "이 디자인의 나머지 반을 만들어서 대칭이 되도록 만들어 보세요. 삼각형들은 변들이
        같고 50 픽셀 길이입니다. 힌트: 추가해야 할 모든 블록들을 찾아내기 위해서 코드를 여러 번 실행시켜봐야 할 수도 있습니다."
      Course 4 Artist 6_instruction: "이 삼각형들을 그리기 위한 코드를 완성시켜보세요. 힌트: 360 도 회전 안에
        3개의 삼각형들이 있습니다... 360 안에 3개를 몇 번 넣을 수 있을까요?"
      Course 4 Artist 7_instruction: "이번에는 반복을 다른 반복에 넣어서 10개의 삼각형을 그려보세요.\n이러한 것을
        중첩 반복이라고 합니다. 힌트: 360도를 돌며 10개의 삼각형을 그려야 합니다.  \n"
      Course 4 Artist 8_instruction: "이 코드 블록을 여러번 반복시켜 해를 그려보세요."
      Course 4 Artist 8a_instruction: |-
        이 모양이 기억이 나나요? 이제 처음에 아무 블록들이 없는 상태로 만들어내야 합니다!\r
        힌트: 360도 안에 3개의 삼각형들이 있습니다... 360 안에 3이 몇 번이나 들어갈 수 있을까요?
      Course 4 Artist 9_instruction: "이 디자인을 10번 반복 시키면서, 한 번 그릴 때마다 회전시켜보세요. 얼마나
        회전 시켜야 하는지에 대한 힌트: 360을 10으로 나누면?"
      Course 4 Artist Binary 1_instruction: |-
        여기에 1, 0 로만 이루어진 문자열을 입력해서, 화가를 왼쪽에서 오른쪽으로, 위에서 아래로 움직이는 함수가 있습니다. 화가는 1을 보면 사각형을 채우고, 0이면 무시할 것입니다. \r
        \r
        이 코드를 실행시킨 후, 화가가 2진 정보를 이용해서 이 패턴을 그려내는 것을 살펴보세요.
      Course 4 Artist Binary 1a_instruction: |-
        여기에 1, 0 로만 이루어진 문자열을 입력해서, 화가를 왼쪽에서 오른쪽으로, 위에서 아래로 움직이는 함수가 있습니다. 화가는 1을 보면 사각형을 채우고, 0이면 무시할 것입니다. \r
        \r
        이 코드를 실행시킨 후, 화가가 2진 정보를 이용해서 이 패턴을 그려내는 것을 살펴보세요.
      Course 4 Artist Binary 2_instruction: "이 이미지를 그려내기 위해서, 어떤 2진 문자열이 8번 반복시켜 줄까요?"
      Course 4 Artist Binary 3_instruction: 3자리의 2진 문자열을 반복시켜서 이 패턴을 그려주세요.
      Course 4 Artist Binary 4_instruction: "각 2진 문자는 이 그림의 한 줄을 의미합니다. 2진 문자열을 재배치해서
        찡그린 얼굴 모양을 웃는 얼굴 모양으로 만들어 주세요."
      Course 4 Artist Binary 5_instruction: "이 이미지를 그리기 위해 11번을 반복 시킬 수 있는 6자리 2진
        문자열은 어떤 것 일까요?"
      Course 4 Artist Binary 6_instruction: "이 이미지를 그리기 위해 반복하는 것들 중에서 가장 짧은 2진 문자열은
        어떤 것 일까요?"
      Course 4 Artist Binary 7_instruction: "이 그림을 마무리 해보세요."
      Course 4 Artist Binary Free Play 2_instruction: "자유 플레이: 빈 캔버스가 있습니다. 마음대로 재미있게
        그려보세요!"
      Course 4 Artist Binary Free Play 2a_instruction: |-
        좀 더 높은 해상도로 표현할 수 있는 캔버스가 여기 있습니다. - 16 픽셀 * 16 픽셀!\r
        \r
        2진 비트 문자열로 어떤 것이 그려지는 지 살펴보세요.
      Course 4 Artist Binary Free Play 2b_instruction: "여기를 눌러 힌트를 살펴보세요."
      Course 4 Artist Binary Free Play_instruction: "자유 플레이: 2진 문자열을 이용해서 자유롭게 그려보세요!"
      Course 4 Artist Binary pre1_instruction: |-
        2진은 단지 서로 다른 2가지 만 가지고 정보를 표현하는 방법입니다. "off"(또는 0 으로 표현) 과 "on"(또는 1로 표현) 만 사용한다고 해봅시다.\r
        \r
        주어진 "픽셀판"이라는 격자를 사용하면, 그 위를 이동하다가 특정 사각형들에서만 회전이 가능하게 해서 디자인들을 만들 수 있습니다. 화가가 첫 번째 줄에 2진수 표현으로 "01010101"을 그리도록 해보세요.
      Course 4 Artist Binary ryan_instruction: |-
        2진은 단지 서로 다른 2가지 만 가지고 정보를 표현하는 방법입니다. "off"(또는 0 으로 표현) 과 "on"(또는 1로 표현) 만 사용한다고 해봅시다.\r
        \r
        주어진 "픽셀판"이라는 격자를 사용하면, 그 위를 이동하다가 특정 사각형들에서만 회전이 가능하게 해서 디자인들을 만들 수 있습니다. 화가가 첫 번째 줄에 2진수 표현으로 "01010101"을 그리도록 해보세요.
      Course 4 Artist For  Functions 10_instruction: 조금 더 나아가 봅시다. "사각형 한 변 그리기" 함수를
        이용해서 별 모양을 만들어보세요. 행운을 빕니다!
      Course 4 Artist For  Functions 11_instruction: 조금 더 나아가 봅시다. "사각형 한 변 그리기" 함수를
        이용해서 별 모양을 만들어보세요. 행운을 빕니다!
      Course 4 Artist For Loops 1_instruction: "이 삼각형은 너비가 50 픽셀입니다. 힌트: 반복 블록을 1개
        사용하세요."
      Course 4 Artist For Loops 10_instruction: |
        자유시간입니다!
        여러분이 배운 블록들을 사용해서 원하는 것을 그려보세요.
      Course 4 Artist For Loops 11_instruction: '이전 스테이지에서 어떤 모양의 변의 길이를 조절하기 위해 사용했던
        밴수에 대해서 생각해 보세요. 이번에는 "카운터" 변수라는 것을 이용해서 같은 작업을 해 보도록 하겠습니다. 이 패턴은 삼각형으로 시작하고,
        한 변을 붙이면서 10각형(10개의 변을 가진 다각형) 을 그립니다. 각 변의 길이는 100 픽셀 입니다. 힌트: 360 나누기 어떤
        모양의 변의 개수는 회전시켜야 하는 각도 입니다.'
      Course 4 Artist For Loops 11a_instruction: |-
        자 이제 모두 함께 사용해 봅시다! "반복(~인 동안)"과 "카운터"를 이용해서, 앞의 것보다 2개 더 많은 변을 가지고 있는 각각의 도형들을 만들어보세요. 각 변의 길이는 각 다각형의 변의 개수의 10배이어야 합니다.\r
        \r
        아주 적은 코드가 미리 주어져 있습니다.
      Course 4 Artist For Loops 12_instruction: "꽤 멋져 보이지만, 각 모양을 이전 모양에 붙여서 그리고 싶습니다.\n각
        선의 길이는 20 픽셀입니다. 각 모양을 그린 후에는 40 픽셀 만큼 점프를 뛰는\n블록을 사용하면 됩니다. \n"
      Course 4 Artist For Loops 13_instruction: "흠, 저 모양들은 점점 더 커지는 군요! 이전에 이 문제를
        변수를 이용해 해결했었습니다. 카운트 변수를 이용해서 어떻게 각 변의 크기를 줄일 수 있을까요? 일정 거리 만큼 앞으로 움직이지말고,
        앞으로 (100/카운터) 픽셀 만큼 움직여 보세요."
      Course 4 Artist For Loops 14_instruction: "일반적인 도형들에 사용하는 각 보다 조금 더 많거나 적게 각을
        회전시키면 멋진 효과를 만들어낼 수 있습니다. 이전 레벨에서의 코드를 이용해 실험해 보는데, 89도를 사용하면 이런 비틀어진 사각형
        나선 구조를 만들어 낼 수 있습니다."
      Course 4 Artist For Loops 15_instruction: '자유 플레이: "반복(~동안)"을 이용해서 원하는 그림들을
        만들어보세요. 여러분이 사용할 수 있는 편리한 변수들을 몇 개 더 추가했습니다.'
      Course 4 Artist For Loops 2_instruction: '50 부터 100 까지 10씩 올리며 카운트하는 반복(~동안)
        구조 안에 삼각형을 그리는 코드를 넣어 두었습니다. 참고: "실행"을 누르기 전에 코드를 먼저 살펴보세요.'
      Course 4 Artist For Loops 3_instruction: |
        이번 퍼즐을 해결하기 위해서, 이전 퍼즐을 참고하세요.
        가장 작은 삼각형의 크기는 한 변이 20 픽셀이고, 가장 큰 삼각형의 크기는 한 변이 200 픽셀입니다.
        각 삼각형들은 바로 전 삼각형 보다 20 픽셀 만큼 씩 더 큽니다.
      Course 4 Artist For Loops 4_instruction: "이 사각형들을 그리려면 배웠던 것들에서 어떤 것을 바꾸면 될까요?\n한
        변의 길이가 15 픽셀인 사각형으로 시작하고, 가장 큰 사각형은 한 변이 300 픽셀입니다.\n각 사각형은 바로 전 사각형 보다 15
        픽셀 만큼 씩 더 큽니다. \n"
      Course 4 Artist For Loops 5_instruction: "이전 퍼즐은 참 잘했습니다!\n이번에는 멋진 그림을 그리기 위해서,
        \"카운터\" 변수 블록을 다시 사용해 보세요. \n"
      Course 4 Artist For Loops 6_instruction: "자유 플레이: 점점 커지는 도형들을 반복(~동안) 을 이용해
        자유롭게 만들어 보세요."
      Course 4 Artist For Loops 6a_instruction: "이 레벨을 완료하기 위해서 지난 번 코드에서 3가지만 수정하면
        됩니다."
      Course 4 Artist For Loops 7_instruction: 알고리즘에서 반복 구조 안에 들어있는 "이동하기" 와 "돌기"
        블록들은 그대로 두고, "반복 3회" 만 지우면 어떻게 될까요? 이 나선형 삼각형에서 각 선분들은 그 이전 선분보다 20 픽셀 씩 더
        깁니다.
      Course 4 Artist For Loops 8_instruction: |-
        이전 그림에서 1가지만 바꾸면 이 그림을 만들 수 있습니다. 어떤 것을 바꾼 것인지 찾아낼 수 있나요?\r
        \r
        힌트: 뭔가 제거하면 됩니다!
      Course 4 Artist For Loops 8a_instruction: "이전 이미지에서 1가지만 바꾸면 이 이미지를 만들 수 있습니다.
        어떤 것을 바꾼 것인지 찾아낼 수 있나요?"
      Course 4 Artist For Loops 9_instruction: "나선 구조를 만들 수 있나요? 1 픽셀 부터 75 픽셀까지 한
        번에 1 픽셀씩 증가시키면서 이동해 보세요."
      Course 4 Artist For Loops Challenge_instruction: |-
        이 이미지를 만들어내기 위해서 어떤 것들을 어떻게 써야 할 지 생각해 낼 수 있을까요?\r
        \r
        힌트가 필요한가요? 여기를 클릭하세요.
      Course 4 Artist For Loops inspire_instruction: |-
        멋진 자유 플레이: 여러분은 이제 이런 패턴을 만들기 위해 필요한 모든 것들을 배웠습니다! 이 그림이 여러분이 느끼기에 멋지다면, 비슷한 것을 한 번 만들어 보세요. 아니면, 만들고 싶은 것을 자유롭게 만들어도 됩니다.\r
        \r
        힌트가 필요한가요? 여기를 클릭하세요.
      Course 4 Artist Functions 1_instruction: "반복을 이용해서 한 변의 길이가 100 인 사각형을 만들어 보세요."
      Course 4 Artist Functions 10_instruction: "사각형 위에 꼭 맞는 삼각형을 그리기 위해서 어떤 블록을 추가해야
        할까요?"
      Course 4 Artist Functions 11_instruction: 큐브를 그리는 코드를 확인해 보세요 - "큐브 그리기"라는 이름의
        함수 안에 넣어주세요.
      Course 4 Artist Functions 12.1_instruction: 자 이제 "8각형 그리기 20" 이라는 함수를 만들어보세요.
        8각형의 각 변의 길이는 20 픽셀입니다.
      Course 4 Artist Functions 12_instruction: "직선을 그리기 위해서 사각형 함수를 반복시켜보세요."
      Course 4 Artist Functions 13.1_instruction: |-
        자 이제, "오른쪽 위로 점프"라는 함수를 만들어보세요. 이 함수는 8각형 위에 있는 화가가 오른쪽 위로 움직이게 해서 패턴을 다 그릴 수 있게 해줄 것입니다.\r
        \r
        힌트: 여러분이 오른쪽 위로 가려면? 패턴 위에서 8각형의 3/8만큼 점프하면 될 것입니다.
      Course 4 Artist Functions 13_instruction: 새로운 "사각형의 한 변 그리기" 함수를 살펴보세요. 함수가
        어떻게 만들어졌는지 구조를 살펴보세요. 다음 퍼즐을 하기 위해서는 "실행"을 누르면 됩니다.
      Course 4 Artist Functions 14.1_instruction: 자 이제, "오른쪽 위로 점프" 함수를 만들어서 이 패턴을
        완성할 수 있도록, 화가를 8각형의 오른쪽 위로 이동시켜보세요.
      Course 4 Artist Functions 14_instruction: 잘 했습니다! 이제 새로운 "사각형의 한 변 그리기" 함수를
        이용해서 사각형을 그려보세요. 사각형의 한 변의 길이는 40 픽셀입니다.
      Course 4 Artist Functions 15_instruction: '조금 더 배워 봅시다. "사각형의 한 변 그리기" 함수를 이용해서
        별 모양을 그릴 수 있을까요? 행운을 빕니다! 힌트: 144도를 돌아야 합니다.'
      Course 4 Artist Functions 2_instruction: '20 픽셀 만큼 씩 떨어져 있는 3개의 사각형을 그려보세요.
        힌트: 각 사각형의 크기는 100 픽셀입니다.'
      Course 4 Artist Functions 3_instruction: |
        "사각형 그리기" 함수 블록을 이용해서 이 그림을 만들어보세요. 힌트: 각 사각형들은 120 픽셀 만큼 씩 떨어져 있습니다.\r
      Course 4 Artist Functions 4_instruction: '직접 "함수 블록"을 만들 준비가 되었나요? 도구상자에서 "함수"
        블록을 클릭한 후에 "삼각형 그리기" 로 함수 이름을 바꾸세요. 그 다음에 이전에 반복 블록을 이용해서 삼각형을 만들었던 것과 같이
        삼각형을 만드세요. 그 다음에 오른쪽 위의 모서리에 있는 저장 후 닫기 를 누르세요. 힌트: 100 픽셀 크기의 삼각형을 만드세요.
        행운을 빌어요!'
      Course 4 Artist Functions 5 OLD_instruction: "집을 그리기 위해서 2개의 함수를 사용해 보세요. -
        집을 제대로 그리기 위해서, 이 코드에서 어떤 부분을 고쳐야 할까요?"
      Course 4 Artist Functions 5_instruction: |
        "사각형 그리기" 함수 블록을 이용해서 이 그림을 만들어보세요. 힌트: 각 사각형들은 120 픽셀 만큼 씩 떨어져 있습니다.\r
      Course 4 Artist Functions 6_instruction: "사각형 위에 꼭 맞는 삼각형을 그리기 위해서 어떤 블록을 추가해야
        할까요?"
      Course 4 Artist Functions 7_instruction: "사각형 함수를 이용해서 한 줄의 사각형을 그려보세요. 각 사각형의
        한 변의 길이는 40 픽셀입니다."
      Course 4 Artist Functions 8_instruction: "함수 블록들을 사용하는 것이 어려운가요? 이 함수를 수정해서
        200 픽셀 크기가 되도록 바꿔보세요.\n힌트: \"사각형 그리기\" 함수에서 \"수정하기\"를 눌러서 고치면 됩니다.\n함수 수정을
        끝내려면 \"닫기\"를 누르면 됩니다. \n"
      Course 4 Artist Functions 9_instruction: "함수를 만들기 위해 필요한 거의 모든 코드를 해보았습니다. 하지만
        뭔가 빠진 듯 하네요. 이 함수 블록을 완성해주세요."
      Course 4 Artist Functions challenge_instruction: "여기를 눌러 힌트를 다시 살펴보세요."
      Course 4 Artist Functions Inspiration_instruction: "여기를 눌러 힌트를 다시 살펴보세요."
      Course 4 Artist Functions inspire_instruction: |
        여기를 눌러 멋진 그림을
        다시 살펴보세요.
      Course 4 Artist Inspire_instruction: |-
        멋진 디자인을 위한 도움말이나 힌트가 필요하면? 여기를 클릭하세요!\r
        \r
        아니면, 자유롭게 디자인해 보세요!
      Course 4 Artist Params 1_instruction: "한 변의 길이가 50 픽셀인 사각형을 그리는 함수를 수정해보세요."
      Course 4 Artist Params 10_instruction: "함수 안에서, 다른 함수를 불러 사용할 수 있습니다!\n\"모양\"
        함수를 기본으로 활용해서, 50 픽셀 크기로 시작한 후, 20 픽셀 만큼 씩 커지는\n3개의 집 모양을 만들어 보세요. 반복 카운터
        구조를 사용하면 꽤 도움이 될 것입니다. \n"
      Course 4 Artist Params 11_instruction: |
        How about a function called "pinwheel"
        that takes three parameters - "sides," "length" and "repeat." You can
        calculate how much to turn after each shape using the same math you used to
        figure out the turns for a shape of "sides". Can you recreate this picture?
        Here's a tip each shape is 100 pixel's in length.
      Course 4 Artist Params 12_instruction: '"바람개비" 함수를 이용해서 이 모양들을 그려보세요. 각 이미지의
        측면 길이는 50 입니다.'
      Course 4 Artist Params 13_instruction: "자유 플레이: 여러분들이 만든 함수와 가지고 놀 수 있는 함수들이
        더 있습니다. 멋진 것을 그려보세요!"
      Course 4 Artist Params 2_instruction: |
        That triangle function would be a whole
        lot more useful if it could draw triangles of different sizes. I've added
        a parameter for line length, but it doesn't do anything yet. Can you update
        the function so it uses the "length" parameter when it draws each side?
        The triangle sizes are 150 pixels, 75 pixels and 25 pixels.
      Course 4 Artist Params 3_instruction: "멋져요, 이 삼각형들을 새로운 함수로 만들어보세요.\n첫 번째는 20
        픽셀 크기이고, 두 번째는 50, 세 번째는 75 입니다. \n"
      Course 4 Artist Params 4_instruction: |
        사각형이라는 이름의 새로운 함수를 추가해주세요. 삼각형 함수와 같이 길이 매개 변수가 있어야 합니다.
        이번에는 크기가 25, 50, 75 인 3개의 사각형을 100 픽셀 간격으로 그려보세요.
      Course 4 Artist Params 5_instruction: |
        새로운 함수들을 이용해서 모양을 그려보세요.
        쉽게 그리려면 "카운터" 매개 변수를 사용하는 반복 구조를 사용하면 됩니다.
      Course 4 Artist Params 6_instruction: "\"모양 그리기\" 함수를 수정해 보세요.\n\"길이\" 매개 변수를
        가지고 있습니다. 거기에 \"면\" 매개 변수를 더 추가해 주세요.\n주어진 모양을 그리기 위해서는 360을 면의 개수로 나누면 됩니다.\n힌트:
        각 모양의 삼각형은 100 픽셀이고, 육각형은 25 픽셀, 사각형은 50 픽셀입니다. \n"
      Course 4 Artist Params 7_instruction: "\"???\" 에 적당한 수를 채워 이 모양들을 만들어보세요.\n사각형,
        삼각형은 100 픽셀이고, 육각형은 75 픽셀입니다. \n"
      Course 4 Artist Params 8_instruction: |
        이 모양은 어떻게 그릴 수 있을까요?
        6개의 변을 가진 육각형을 만드는 새로운 함수에 대한 힌트가 여기 있습니다.
      Course 4 Artist Params 9_instruction: |
        카운터를 이용한 반복 구조 안에서 그 안에 있는 반복 구조를 없앴을 때가 기억 나나요?
        이번에는 "모양 그리기" 함수에 "면"과 "길이" 매개 변수를 이용해 보세요.
        모양들을 다시 만들 수 있을까요? 사각형 카운터는 5/100/5 이어야 하고, 삼각형 카운터는
        10/100/10, 육각형은 2/100/2 가 되어야 합니다.
      Course 4 Artist Var 9_instruction: |
        삼각형을 1개 그리는 알고리즘이 있는데, "변" 변수를 사용할 수 있도록 수정되어 있습니다.
        3이라는 수를 "변" 변수로 바꿔보세요. 힌트: "변 설정" 블록을 사용하면 됩니다.
      Course 4 Artist Vars 1_instruction: |
        정삼각형을 그려보세요.
        각 변의 길이는 정확히 100 픽셀이어야 합니다.
      Course 4 Artist Vars 10_instruction: |
        더 작은 삼각형들의 바깥쪽에 1개의 삼각형을 그리는 알고리즘이 있습니다.
        이 알고리즘을 수정해서 삼각형들을 그리기 위한 "변" 변수를 사용할 수 있게 해주세요.
        코드를 살펴보고, 3 이라는 수들을 "변" 변수로 바꿔보세요.
        "변 설정" 블록을 함께 사용해야 합니다.
      Course 4 Artist Vars 11_instruction: |
        이전 퍼즐에서와 같은 개념들을 사용하는 좀 더 복잡한 코드입니다.
        - 사각형들로 만들어진 이 그림을 그리기 위해서 "변" 변수를 어떻게 설정해야 할까요?
      Course 4 Artist Vars 12_instruction: |
        자 이제 "면" 변수를 살펴보세요.
        5. 이 알고리즘에 더 많은 면 개수를 추가하면 할 수록, 전체 패턴이 더 커집니다! 그리고 "길이"라는 변수가 더 있습니다. 그리고 이제 "앞으로 이동" 블록이 없어도 할 수 있습니다. 모양을 만들려면 "길이" 변수를 75로 설정하세요.
      Course 4 Artist Vars 13_instruction: |-
        전체 패턴을 화면에 맞추기 위해서는, 도형에 여러 개의 변들이 있을 때 각 변들의 길이를 줄여야 합니다.
        \r
        이 멋진 패턴을 만들어낸 알고리즘을 새롭게 만들어보세요. 각각의 모양을 정확히 맞추기 위해서 "변" 변수와 함께 수학 블록을 사용해서, "길이" 변수의 값을 계산할 수 있도록 하면 됩니다. 각 다각형의 둘레는 300 픽셀입니다.\r
        힌트가 필요한가요? 여기를 눌러보세요.
      Course 4 Artist Vars 14_instruction: |-
        자유 플레이: 확인해보세요! 여러분의 알고리즘은 반복 구조가 한 번 이상 중첩되어있습니다. 두 개의 변수 값들을 바꾸어 멋진 패턴들을 만들어보면서 실험해 보세요.\r
        \r
        더 멋지게 만들어 보려면, 색을 사용해 보세요!
        반복 구조들 안에 랜덤색을 사용해서 디자인이 어떻게 변화 되는지 살펴보세요.
      Course 4 Artist Vars 2_instruction: 이번에는 "앞으로 150 만큼 이동"을 사용하는 대신에 "이동" 블록이
        "길이"라는 변수에 저장되어있는 값을 이용합니다. 삼각형을 그리기 위해서 "길이"를 150 으로 입력해 보세요.
      Course 4 Artist Vars 3_instruction: "여기에 사각형을 그릴 수 있는 반복 구조가 있는데, 뭔가 빠진 것 같습니다.\n각
        변의 길이를 얼마로 해야할지 가늠하기 위해서 \"길이\" 변수를 사용하는 함수를 수정해 주세요. \n"
      Course 4 Artist Vars 4_instruction: 이번에는 너비의 2배 만큼 높이를 가진 사각형을 만들어보세요. "너비"라는
        변수를 100 으로 설정하면 됩니다. 수학 블록들을 이용해 코드를 완성해 주세요.
      Course 4 Artist Vars 5_instruction: '"면" 변수를 이용해서 반복할 횟수를 설정하고 실행시켜보세요.'
      Course 4 Artist Vars 6_instruction: |-
        모든 정 다각형들을 만들 수 있는 코드가 있습니다.
        그 값이 4 로 입력되어있는 새 변수가 있습니다. (수학 블록과 함께) 면 수 변수를 사용해서, 다각형의 면들이 몇 개인지에 상관없이 자동으로 회전시켜보세요.\r
        \r
        여기를 눌러 힌트를 다시 살펴보세요.
      Course 4 Artist Vars 7_instruction: |-
        이전 퍼즐을 통해서 배웠던 것을 이용하면 됩니다. "면" 변수를 사용해서 육각형을 만들어보세요.\r
        \r
        변수 값 하나만 변화시키면, 삼각형, 사각형, 오각형,..., 팔각형을 모두 만들 수 있습니다.
      Course 4 Artist Vars 8_instruction: "자유 플레이: 이 도형의 면의 수로 실험해 보세요. 면의 개수가 어떻게
        바뀌든지 상관없이, 도형의 크기는 같아지도록 알고리즘을 수정해 주세요. 힌트: 처음 시작하는 길이를 면의 개수로 나누면, 면의 개수가
        많아지는 만큼 각 면의 길이는 짧아집니다."
      Course 4 Artist Vars 9_instruction: 삼각형을 그리기 위해서 면의 수를 직접 사용하지 않고, "면" 변수를 사용하는
        이 알고리즘을 수정해 보세요. "면 설정" 블록을 사용해야 합니다.
      Course 4 Bee 1_instruction: "꿀벌은 구름 아래에 뭐가 있는지 알 수 없습니다.\n\"만약\" 블록을 이용해서 구름
        아래 꽃이 있는지 확인하고, 꽃인 경우에만 \n꽃꿀을 모을 수 있게 해주세요. \n"
      Course 4 Bee 2_instruction: '"만약/아니면" 블록으로 꽃인지? 아니면 벌집인지? 확인하도록 해 보세요. 만약 꽃이면
        꽃꿀을 모으고... 아니면, 꿀을 만들어보세요!'
      Course 4 Bee 3_instruction: |
        물체는 꽃이거나 벌집입니다.
        이번에는 "만약/아니면" 블록을 이용해서 꽃이면 꽃꿀을 얻고, 아니면(꽃이 아니면 벌집이므로) 꿀을 만들게 해보세요.
      Course 4 Bee 4_instruction: 이 자주색 꽃에는 꽃꿀이 3, 2, 1개 있을 수 있습니다. 이 "만약/아니면" 블록은
        다른 "만약/아니면" 블록과 결합되어서, "만약/(아닌데 만약/아니면)" 명령을 만들어낼 수 있습니다. 꽃꿀의 양을 모르는 경우에도
        꽃꿀을 모두 얻을 수 있게 해보세요.
      Course 4 Bee 5_instruction: |
        이 자주색 꽃에는 꽃꿀이 3, 2, 1개 있을 수 있습니다.
        "만약-아니면" 블록을 이용해서 만약/(아닌데 만약/아니면) 블록을 만들어보세요. 만든 블록을 꽃꿀의 개수를 모르는 경우에도 모든 꽃꿀을 얻어내도록 사용할 수 있습니다.
      Course 4 Bee 6_instruction: |
        이 자주색 꽃에는 꽃꿀이 3, 2, 1개 있을 수 있습니다.
        꽃꿀의 개수를 모를 때에도 꽃꿀을 얻을 수 있도록, 만약/(아닌데 만약/아니면) 블록을 만들어보세요.
      Course 4 Bee 7_instruction: |
        꽃꿀을 얻어내기 위해 필요한 모든 것을 배웠습니다.
        이 자주색 꽃에는 꽃꿀이 3, 2, 1 만큼 있을 수 있습니다.
      Course 4 Bee For Loops 1_instruction: "각 꽃에서 꽃꿀을 모으기 위해서 반복 구조를 사용하세요."
      Course 4 Bee For Loops 10_instruction: |
        반복 카운팅이 줄어드는 과정에서는 반복이 한 번씩 끝날 때마다 카운터 변수의 값이 줄어듭니다.
        9, 6, 3의 꽃꿀을 모으기 위해서는 카운터 변수에 더할 값이 어떻게 되어야 할까요?
      Course 4 Bee For Loops 11_instruction: |
        이 코드에 어떤 오류가 있을까요?
        오류를 찾아 고칠 수 있는지 살펴보고, 벌이 모든 꽃꿀을 모을 수 있도록 해주세요.
      Course 4 Bee For Loops 2_instruction: |
        여기 새로운 종류의 반복 구조가 있습니다. "반복(~동안)" 이라는 블록입니다.
        이 특별한 반복 구조는 1부터 5까지, 한 번 실행하고 1씩 증가시키면서 카운트 합니다. 꽃꿀을 모을 수 있도록 도와주세요.
      Course 4 Bee For Loops 3_instruction: |
        이 퍼즐은 1부터 3까지 1씩 카운트를 증가시키는 반복 구조를 이용하면 해결할 수 있습니다.
        이제 꽃꿀을 모아보세요!
      Course 4 Bee For Loops 4_instruction: "이 꽃들에서 모든 꽃꿀을 모아보세요. 더 쉬운 방법이 있을까요?..."
      Course 4 Bee For Loops 5_instruction: "아, 반복(~인 동안) 구조를 사용하면 더 쉽네요!\n반복을 위해
        사용한 \"카운터\" 변수를 \"꽃꿀 얻기\" 블록에도 똑같이 사용할 수 있습니다.\n휴! 반복 구조가 많네요. 필요한 코드는 모두
        있습니다.\n어떻게 구성되어있는지 살펴보고, 실행시켜보세요. \n"
      Course 4 Bee For Loops 6_instruction: |
        카운트다운 반복 구조를 사용할 수도 있습니다.
        이 꽃꿀을 5부터 1까지 카운트다운하면서 모아보세요.
      Course 4 Bee For Loops 7_instruction: |
        수평 방향으로 얼마나 멀리 가야하는지
        제어할 수 있도록 "카운터" 변수를 반복 구조에 사용하세요.
      Course 4 Bee For Loops 8_instruction: "이동하고 꽃꿀을 모으는데 반복 변수를 사용해보세요."
      Course 4 Bee For Loops 9_instruction: "반복(~동안) 구조 안에 있는 마지막 수를 \"증가값\"이라고 합니다.
        \n한 번 실행보고 나면 카운터 변수의 값이 \"증가값\" 만큼 변화됩니다. 값을 2씩 증가시키면서 이 꽃들의 꽃꿀을 모아보세요.\n"
      Course 4 Bee Loops 5 NEW_instruction: 3개의 꽃이 있습니다. 가장 적은 블록 개수로 꽃꿀을 모을 수 있도록,
        3번 반복시키는 명령 패턴을 찾아보세요.
      Course 4 Bee Loops 5a NEW_instruction: |
        이제 최대한 적은 블록들을 사용해서
        벌집까지 가는 길에 있는 꽃들의 모든 꽃꿀을 모을 수 있도록 해주세요. 마지막에는 꿀을 만들면 됩니다.
      Course 4 Bee Params 1_instruction: |
        "꽃꿀 3번 모으기" 함수를 사용해보세요. 꽃꿀을 모으기 위해 돌고 움직인 다음에 원래 위치로 돌아오면 됩니다.
        "꽃꿀 3번 모으기" 를 이용해서 꽃꿀을 모두 모으기 위한 순서를 만들어 보세요.
      Course 4 Bee Params 2_instruction: '"꽃꿀 3번 모으기" 함수를 수정해서 꽃을 향해 왼쪽으로 도는 대신 오른쪽으로
        돌도록 해주세요.'
      Course 4 Bee Params 3 (copy 1)_instruction: |
        양쪽에 꽃들이 있네요!
        양쪽 꽃들에 대해서 같은 함수를 사용하려면, 매개 변수를 1개 사용해야 합니다.
        "방향" 매개 변수를 추가해 두었습니다.
        "방향" 매개 변수의 값이 0이면 왼쪽으로 회전하고, 1이면 오른쪽으로 회전해야 합니다.
      Course 4 Bee Params 3_instruction: "양쪽에 꽃들이 있네요!\n\"왼쪽\", \"오른쪽\" 이라는 변수와 \"방향\"이라는
        매개변수를 \"꽃꿀 3번 얻기\" 함수에 붙여두었습니다.\n\"꽃꿀 3번 얻기\" 함수를 수정해서, \"왼쪽\" 또는 \"오른쪽\"
        변수의 값이 전달될 때,\n지정한 방향으로 회전하도록 바꿔보세요.  \n"
      Course 4 Bee Params 4 (copy 1)_instruction: "모든 꽃들에서 수집하기 위해서 새로운 함수를 사용해보세요.
        0은 왼쪽, 1은 오른쪽입니다."
      Course 4 Bee Params 4 - Two WhenRun_instruction: "모든 꽃들에서 수집하기 위해서 새로운 함수를 사용해보세요.
        왼쪽/오른쪽 변수를 사용하세요."
      Course 4 Bee Params 4 backup_instruction: |
        이 모든 꽃꿀들을 1개의 함수로 모을 수 있다면 얼마나 좋을까요?
        "꽃꿀들"이라는 매개 변수를 함수에 추가해서, 뽑아낼 꽃꿀의 양을 제어해 보세요.
        아마도 함수 이름을 바꾸고 싶기도 할 것입니다!
      Course 4 Bee Params 4_instruction: "꽃들에서 모든 꽃꿀을 수집하기 위해서 새로운 함수를 사용해보세요. 왼쪽/오른쪽
        변수를 사용하세요."
      Course 4 Bee Params 5_instruction: 시험삼아 해보세요. - 방향 변수를 이용해서 "꽃꿀 5번 모으기" 함수를
        만들어보세요.
      Course 4 Bee Params 6 (copy 1)_instruction: "모든 꽃꿀을 수집하기 위해서 새로운 함수를 사용해보세요."
      Course 4 Bee Params 6_instruction: |
        이 모든 꽃꿀들을 1개의 함수로 모을 수 있다면 얼마나 좋을까요?
        "꽃꿀 개수"라는 매개 변수를 함수에 추가해서, 뽑아낼 꽃꿀의 양을 제어해 보세요.
        아마도 함수 이름을 바꾸고 싶기도 할 것입니다!
      Course 4 Bee Params 7 (copy 1)_instruction: "모든 꽃꿀을 수집하기 위해서 새로운 함수를 사용해보세요."
      Course 4 Bee Params 7_instruction: "모든 꽃꿀을 수집하기 위해서 새로운 함수를 사용해보세요."
      Course 4 Bee Params 8 Clone 2_instruction: |
        으, 이번에도 다루어야 할 꿀들이 있네요.
        어떻게 하면, 꽃꿀을 뽑을지, 꿀을 만들지 선택해서 함수가 실행되도록 할 수 있을까요?
      Course 4 Bee Params 8 clone 3_instruction: |
        으, 이번에도 다루어야 할 꿀들이 있네요.
        어떻게 하면, 꽃꿀을 뽑을지, 꿀을 만들지 선택해서 함수가 실행되도록 할 수 있을까요?
      Course 4 Bee Params 8 Clone_instruction: |
        으, 이번에도 다루어야 할 꿀들이 있네요.
        어떻게 하면, 꽃꿀을 뽑을지, 꿀을 만들지 선택해서 함수가 실행되도록 할 수 있을까요?
      Course 4 Bee Params 8 new_instruction: |
        으, 이번에도 다루어야 할 꿀들이 있네요.
        어떻게 하면, 꽃꿀을 뽑을지, 꿀을 만들지 선택해서 함수가 실행되도록 할 수 있을까요?
      Course 4 Bee Params 8_instruction: |
        도전해보세요: 으, 이번에도 다루어야 할 꿀들이 있네요.
        꿀의 개수와, 꽃꿀의 개수를 모두 사용하는 함수를 다시 만들어보세요.
        2가지 가지 값들에 대해서 어떻게 해야할까요?
      Course 4 Bee Params Ex_instruction: "모든 꽃꿀을 수집하기 위해서 새로운 함수를 사용해보세요."
      Course 4 Binary 1_instruction: "여기에 1 또는 0 으로만 구성되어있는 2진 문자열을 입력하는 함수가 있습니다.
        왼쪽에서 오른쪽으로, 위에서 아래로 내려가면서 0인 곳에서 회전하도록 하는 함수입니다. 2진 표시를 통해 농부가 이미지를 어떻게 그려낼
        수 있는지 살펴보세요."
      Course 4 Binary 2_instruction: '8번 반복시켜서 이 이미지를 그릴 수 있는 2진 문자열은 어느 것 일까요? 힌트:
        "1"은 구덩이를 메웁니다.'
      Course 4 Binary 3_instruction: "하나의 2진 문자열을 반복시켜서 이 패턴을 만들어보세요."
      Course 4 Binary 5 (copy 1)_instruction: 10번 반복시켜서 이 이미지를 만들 수 있는 2진 문자열은 어느
        것 일까요?
      Course 4 Binary 5_instruction: 10번 반복시켜서 이 이미지를 만들 수 있는 2진 문자열은 어느 것 일까요?
      Course 4 Binary 6 (copy 1)_instruction: 10번 반복시켜서 이 이미지를 만들 수 있는 2진 문자열은 어느
        것 일까요?
      Course 4 Binary 6_instruction: 10번 반복시켜서 이 이미지를 만들 수 있는 2진 문자열은 어느 것 일까요?
      Course 4 Binary 7_instruction: 10번 반복시켜서 이 이미지를 만들 수 있는 2진 문자열은 어느 것 일까요?
      Course 4 Binary 8_instruction: 5 비트로 구성된 2진수를 반복시켜서 이 이미지의 대부분을 그려낼 수 있습니다.
        - 그리고 가장 오른쪽 아래로 이동시키기 위해서 4 비트의 수가 더 필요합니다.
      Course 4 EC 1a_instruction: "규칙이 없습니다. 힌트도 없습니다. 도전해보세요!"
      Course 4 EC 1b_instruction: "규칙이 없습니다. 힌트도 없습니다. 도전해보세요!"
      Course 4 EC 2a_instruction: "**무한 도전** 규칙이 없습니다. 힌트도 없습니다. 도전해보세요!"
      Course 4 EC 2b_instruction: "**무한 도전** 규칙이 없습니다. 힌트도 없습니다. 도전해보세요!"
      Course 4 EC 2c_instruction: "**무한 도전** 규칙이 없습니다. 힌트도 없습니다. 도전해보세요!"
      Course 4 EC 3_instruction: "이런 이미지를 그려내기 위해서 이전 레벨에서 배웠던 것들을 사용해 보세요. 참고: 이
        코드는 매개변수들을 사용하면 더 간단하게 만들 수 있습니다. "
      Course 4 EC 3a_instruction: "무한 도전: 규칙이 없습니다. 힌트도 없습니다. 도전해보세요!"
      Course 4 Maze 1_instruction: "화난 새를 돼지에게 이동시켜주세요!"
      Course 4 Maze 2_instruction: TNT를 피해 움직이세요!
      Course 4 Maze 3_instruction: "새를 돼지에게 이동시킬 수 있도록 프로그래밍 해보세요. "
      Course 4 Maze 4_instruction: |
        이 퍼즐을 풀기 위해서...
        더 적은 블록들을 사용하는 "반복" 블록을 사용해보세요.
      Course 4 Maze 5_instruction: "블록을 최대한 적게 사용해서, 이 퍼즐을 해결해보세요."
      Course 4 Maze 6_instruction: "블록을 최대한 적게 사용해서, 이 퍼즐을 해결해보세요."
      Course 4 Play Lab For Loops 2_instruction: |
        이번에는,
        1부터 100까지 홀 수들만 카운팅 해보세요.
      Course 4 Play Lab Params 1_instruction: |
        "점프" 함수는 주 캐릭터가 100 픽셀 만큼 점프하도록 해줍니다.
        점프 함수를 이용해서 모든 깃발들을 모아보세요.
      Course 4 Play Lab Params 10_instruction: "여러분을 위해서 함수를 하나더 추가했습니다.\\r\n\\r\n\"if\"
        명령어를 이용해서 \"player_score\" 가 일정 점수를 넘으면 \"level_up\" 함수가 실행되도록 프로그램을 만들어 보세요.\\r\n\\r\n예시:
        \"player_score\" > 6\\r\n\\r\n게임을 해보고, 레벨4를 통과해서 다음 퍼즐로 가보세요. "
      Course 4 Play Lab Params 2_instruction: |-
        지금 점프로는 닿을 수 없을 만큼 아주 높은 곳에 깃발들이 있습니다.
        "위", "아래" 화살표를 이용해 멀티 점프가 가능하게 해보세요. \r
        \r
        "높이" 라는 매개변수를 점프 함수에 추가해야 합니다. "위"는 강아지를 200 픽셀 만큼 점프하게 만들고, "아래"는 100 픽셀 만큼 점프하도록 해야 합니다.
        \r
        \r
        힌트: 점프 함수를 수정해서 "높이" 매개변수를 사용할 수 있도록 해야합니다.
      Course 4 Play Lab Params 3_instruction: "점프 함수에 다른 매개 변수를 더 추가해서, 다른 캐릭터들도 사용할
        수 있게 되었습니다.\n각각의 캐릭터들은 1부터 시작되는 수로 나타내져 있습니다.\n\"점프\" 함수를 수정해서 \"캐릭터\" 매개
        변수로 적당한 캐릭터가 점프하도록 만들어보세요. \n"
      Course 4 Play Lab Params 4_instruction: |
        "순찰" 함수가 있습니다.
        함수를 수정해서 고양이가 400 픽셀 위로 이동 했다가, 다시 400 픽셀 아래로 이동하게 해보세요.
      Course 4 Play Lab Params 5_instruction: |
        "순찰" 함수에 "캐릭터" 매개변수를 추가해서, 원하는 캐릭터를 화면에 나타낼 수 있도록 해보세요.
        캐릭터들은 1, 2, 3 으로 선택할 수 있도록 해주세요.
      Course 4 Play Lab Params 6_instruction: '"순찰" 함수에 "속도" 매개변수를 더 추가해 보세요. 다른 캐릭터들이
        깃발을 잡기 전에 펭귄이 깃발들을 잡을 수 있도록 "속도" 매개변수를 "속도 설정" 블록에 사용하세요.'
      Course 4 Play Lab Params 7_instruction: |-
        자 이제 즐겨보세요. 주어진 코드가 어떻게 동작하게 될지 한 블록씩 살펴보세요. \r
        \r
        살펴본 다음에, 강아지 캐릭터를 방향키로 움직여 깃발을 모두 모아보세요.
      Course 4 Play Lab Params 8_instruction: '"캐릭터가 닿으면" 블록을 이용해서, 강아지 캐릭터다 다른 캐릭터들에
        닿으면, 처음의 가장 위쪽의 가장 왼쪽으로 이동되도록 해 보세요.'
      Course 4 Play Lab Params 9_instruction: "이전 단계에서 봤던 게임입니다만, 대부분의 코드가 숨겨져있습니다.
        여기에 \"score_points\" 함수가 있습니다.\\r\n\\r\n함수를 수정해서 \"points\" 매개변수를 \"player_score\"의
        변수로 추가해 주세요.\\r\n\\r\n\"play_score\" 변수는 강아지가 고양이에게 하트를 붙일 때마다 증가하고, 고양이가
        강아지에게 하트를 붙일 때마다 감소해야합니다.\\r\n\\r\n참고:\n\"실행\"을 눌러 실행해 보세요. 강아지가 6 포인트를 얻으면
        다음 퍼즐로 갈 수 있습니다. "
      Course 4 Play Lab Vars 1_instruction: |
        이번에는 코드를 작성할 필요가 없습니다. "실행"을 눌러 실행시켜보세요! 이번 게임에서,
        여러분은 고양이보다 더 많은 깃발을 모으기 위해 노력하는 강아지입니다. "아래" 방향키를 이용해서
        강아지를 움직여보세요. 그만하려면 "마치기"를 누르면 됩니다.
      Course 4 Play Lab Vars 2_instruction: 이전 퍼즐은 공정하지 않았습니다! "강아지 속도" 변수의 값을 바꿔서
        고양이보다 더 많은 깃발을 모을 수 있도록 해보세요. 10 개의 깃발을 먼저 모으면 이깁니다!
      Course 4 Play Lab Vars 3_instruction: |
        이번에는 새로운 종류의 게임입니다!
        왼쪽/오른쪽 화살표를 이용해 움직이고, 위/아래 화살표를 이용해서 점프합니다. 모든 깃발을 모을 수 있는지 해보세요.
      Course 4 Play Lab Vars 4_instruction: |
        이제 "높이" 라는 변수를 사용해서 강아지가 뛰는 높이를 조정할 수 있습니다.
        모든 깃발에 닿을 수 있도록 "높이" 변수를 조정해주세요.
      Course 4 Play Lab Vars 5_instruction: "자 이제 게임을 만들어보세요!\n일단 먼저 점수가 필요합니다. 이전
        레벨에서 보았던 코드를 다시 만들어서\n점수를 10으로 설정해주세요. \n"
      Course 4 Play Lab Vars 6 (copy 1)_instruction: |
        좋아요, 이제 점수 변수를 얻었습니다. 그런데 이제 어떻게 잘 사용할 수 있을까요?
        파이어볼로 적을 맞출 때마다 점수 변수를 붙이는 것은 어떨까요? "캐릭터 2가 물체에 닿을 때" 이벤트를 이용해서 파이어볼이 고양이에 닿을 때 점수를 갱신하도록 해보세요. 점수=점수+1 로 설정해서 점수를 올릴 수 있습니다.
        점수를 10 까지(한 번에 1 씩) 올려서 이 레벨을 통과해보세요.
      Course 4 Play Lab Vars 6_instruction: |-
        오른쪽 방향키를 이용해 하트를 맞춰보세요.\r
        \r
        이 게임에서는 어떻게 포인트를 올려야 할까요?
        강아지가 하트로 고양이를 맞출 때마다 "점수" 변수에 1씩 더해보세요.
        "캐릭터 2가 물체에 닿으면" 이벤트를 이용해 점수를 업데이트하면 됩니다. "점수=점수+1"로 설정해서
        변수의 값을 하나씩 올리면 됩니다. 점수를 10 까지(한 번에 1 씩) 올려서 이 레벨을 통과해보세요.
      Course 4 Play Lab Vars 7_instruction: |
        좋아요. 이제 이 게임을 좀더 어렵게 만들어보세요. 강아지(캐릭터 1) 가 고양이(캐릭터 2) 가 발사한
        노란 하트를 맞으면, 점수를 잃어야 합니다. 10 포인트에서 시작하기 때문에 아주 어렵지는 않습니다.
        10 부터 0 까지 포인트를 내려서 이 레벨을 통과해보세요.
      Course 4 Play Lab Vars 8 (copy 1)_instruction: |
        자, 이제 이 게임을 위한 마지막 작업입니다. - 플레이어가 승리(패) 하도록 해보세요.
        점수의 값을 검사하기 위해 반복 구조를 사용하세요 - 점수가 20 보다 커지면, 적이 없어지도록 하세요.
        점수가 0 보다 작아질 때마다, 플레이어가 없어지도록 해주세요.
        게임이 그렇게 잘 동작하면 "마침"을 눌러주세요.
      Course 4 Play Lab Vars 8_instruction: |
        이 게임에서 강아지가 승리(패) 하게 해보세요.
        무한 반복을 사용해 점수의 값을 확인하세요 - 점수가 20 보다 크면 적(고양이) 이 사라지게 하세요.
        점수가 0 보다 작으면, 플레이어(강아지) 가 사라지게 해주세요.
        게임이 그렇게 잘 동작하면 "마침"을 눌러주세요.
      Course 4 Play Lab Vars 9_instruction: |-
        자유롭게 만들어보세요! 여기에는 지금까지 이 과정에서 사용했던 모든 변수들이 모두 있고,\r
        필요한 몇 가지가 더 있습니다.\r
        \r
        도구 상자에 블록들이 아주 많은데 적당히 분류해야할 것 같습니다!
        이제, 각 블록들을 적당한 카테고리로 묶어 두었습니다. 블록들을 충분히 살펴보세요.
        다 살펴본 이후에 반복 구조, 변수, 이벤트를 이용해 게임이나 이야기를 만들어보세요. \r
        \r
        힌트: 모든 명령들을 작업 공간에서 살펴보려면 스크롤해 내려보세요.
      Course 4 Play Lab Vars_instruction: |
        좋아요. 이제 게임의 마지막 단계를 만들어 보세요.
        - 플레이어가 승리(패) 하도록 설정해 보세요. 무한 반복을 이용해 점수 값을 확인하도록 하세요
        - 점수가 20 보다 크면 적이 사라지게 해주세요. 점수가 0 보다 작으면 플레이어가 사라지게 하면 됩니다.
      Course 4 Play Labs For Loops 1_instruction: |
        강아지가 1부터 100까지 모든 자연수를 말하도록 해보세요.
        1개의 반복 구조와 카운터 블록을 이용해서, 한 번 실행될 때마다 카운터 값을 말하도록 하면 됩니다.
      Course 4 Play Labs For Loops 2_instruction: |
        이번에는,
        1부터 100까지 홀 수들만 카운팅 해보세요.
      Course 4 Play Labs For Loops 3_instruction: |
        더 큰 수 만큼씩 카운터 값을 올리면,
        같은 시간에 더 큰 값 범위를 카운트 할 수 있습니다.
        10 부터 1000 까지, 한 번에 10 만큼 씩 증가시키며, 카운트 할 수 있게 해보세요.
      Course 4 Play Labs For Loops 4_instruction: |
        증가 값을 바꾸는 것도 좋지만, 아직도 일정 값 만큼 변화를 주어 카운팅하고 있습니다.(각 값들은 바로 이전 값에서 똑같은 값 만큼 변합니다.)
        이 반복 구조를 변화시키지 않고, 지수적으로 카운트를 올리고 싶다면 어떻게 할 수 있을까요?
        1, 4, 9, 16, 25 와 같이 (카운터의 제곱값으로) 카운트를 올릴 수는 없을까요?
      Course 4 Play Labs For Loops 4a_instruction: |-
        자, 이제 단계 7에서의 변수들과 "카운터" 변수를 이용해 마술 같은 일을 해봅시다.  \r
        \r
        이 퍼즐에서 강아지는 "증가 값"에 따라, 0 부터 1000 까지 카운트 할 것입니다.
        처음 "증가 값"을 10으로 시작하면 어떻게 되는지 살펴보세요.
      Course 4 Play Labs For Loops 5_instruction: |
        이전 단계에서는 제곱 씩 카운트 했었습니다. "카운트^2"을 "카운트^3"으로 바꾸어서
        세제곱으로 카운트하도록 해보세요.(1, 8, 27, 64, 125, 216, 343...)
      Course 4 Play Labs For Loops 5a_instruction: |-
        In this puzzle, Dog will be your
        time keeper.\r
        \r
        Dog will count from 0 to 30 by "increment".  The "increment"
        variable will begin with a value of 1.\r
        \r
        Can you make it so that each
        time you click Dog, the increment increases by 2?  Click the forward arrow
        to run the for loop.\r
        \r
        Run the loop a couple of times, clicking Dog before
        each one.
      Course 4 Play Labs For Loops 6_instruction: |
        소수(prime) 는 1 또는 자기 자신으로만 나누어 떨어지는 수라는 것을 알고 있을 것입니다.
        "소수 판별" 함수를 이용해서 1부터 100까지의 자연수 중에서, 소수만 말하도록 해보세요.
      Course 4 Play Labs For Loops 6a_instruction: |-
        이번에도 강아지는 "증가 값" 이 사용되는 "반복" 을 이용해 카운트 하고 있습니다.\r
        \r
        자 그럼 이번에는 마법사를 추가해 넣어 보세요. 마법사를 클릭할 때마다 2만큼 커지도록 "증가 값"을 바꿔주세요.
      Course 4 Play Labs For Loops 7_instruction: For 반복을 사용해서 1, 4, 7, 10, 13, 16,
        19, 22, 25 순서로 수를 말할 수 있게 해 주세요.
      Course 4 Play Labs For Loops 7a_instruction: "이제 어딘가 도착했네요! \n강아지가 30 을 카운트하기
        전에, 마법사를 클릭하는 횟수를 카운팅 할 수 있을까요? \\r\n\\r\n마법사를 클릭하면, \"클릭됨\" 변수의 값이 1씩 증가되도록
        블록들을 추가시켜주세요. 이번에는 \"증가 값\"은 무시해도 됩니다.\\r\n\\r\n\"실행\"을 누르면 강아지가 카운트를 시작할
        것입니다."
      Course 4 Play Labs For Loops 8_instruction: |-
        자 이제, 캐릭터들이 자기들이 카운트 하는 만큼씩 이동하도록 해보세요.\r
        \r
        강아지는 한 번에 카운트에 2 씩 더해 움직여야합니다.(카운트 + 2)
        고양이는 한 번에 2 배씩 카운트를 곱해 움직여야합니다.(카운트 * 2)
        펭귄은 한 번에 카운트를 제곱해 움직여야 합니다.(카운트 ^ 2)
        깃발에 가장 먼저 도착하는 것은 누구일까요?
      Course 4 Play Labs For Loops 8a_instruction: |-
        게임을 마치려면 "증가값" 변수를 다시 사용해야 합니다! 이번 레벨을 통과하기 위해 사용해봅시다.\r
        \r
        1) 마법사가 클릭되는 횟수를 계속 검사합니다.\r
        2) 강아지의 카운트가 30이 되기 전에, 마법사의 클릭 횟수가 10 이상이 되면, 1 만큼 "증가값"을 올리고 다시 시작합니다.\r
        3) 강아지의 카운트가 30이 되었는데, 마법사의 클릭 횟수가 10 보다 작으면, 게임이 끝납니다.
      Course 4 SCF 1_instruction: |
        4줄의 육각형들을 그리기 위해서 주어진 함수들을 사용해보세요.
        짝수 줄의 육각형들은 오른쪽으로 얼마나 이동되어 그려져 있을까요?
      Course 4 SCF 1a_instruction: "어떻게 하면 최대한 가장 적은 블록들을 사용해서, 모든 꽃꿀들을 모을 수 있을까요?"
      Course 4 SCF 1b_instruction: "어떻게 하면 최대한 가장 적은 블록들을 사용해서, 모든 꽃꿀들을 모을 수 있을까요?"
      Course 4 SCF 2_instruction: "이런 이미지를 그려내기 위해서 이전 레벨에서 배웠던 것들을 사용해 보세요. 참고: 매개변수들을
        사용하면 더 간단하게 만들 수 있습니다. "
      Course 4 SCF 3 Fail 1_instruction: "어떻게 해야할지 생각해 낼 수 있나요?"
      Course 4 SCF 3 Fail 2_instruction: "어떻게 해야할지 생각해 낼 수 있나요?"
      Course 4 SCF 3_instruction: "이런 이미지를 그려내기 위해서 이전 레벨에서 배웠던 것들을 사용해 보세요. 참고: 매개변수들을
        사용하면 더 간단하게 만들 수 있습니다. "
      Course 4 SCFL 1_instruction: "가능한 적은 개수의 블록을 사용하여 이 퍼즐을 풀어보세요."
      Course 4 SCFL 1a_instruction: "최대한 적은 블록들을 사용해서 스크랫이 도토리를 잡을 수 있게 해주세요."
      Course 4 SCFL 1b_instruction: "최대한 적은 블록들을 사용해서 스크랫이 도토리를 잡을 수 있게 해주세요."
      Course 4 SCFL 2_instruction: "가능한 적은 개수의 블록을 사용하여 이 퍼즐을 풀어보세요."
      Course 4 SCFL 3_instruction: "어떻게 하면 이 그림을 다시 그려낼 수 있을까요?"
      Course 4 SCFL 4_instruction: "어떻게 하면 이 그림을 다시 그려낼 수 있을까요?"
      Course 4 SCFL 5_instruction: "어떻게 하면 이 그림을 다시 그려낼 수 있을까요?"
      Course 4 SCFL 6_instruction: "어떻게 하면, 반복 구조 하나를 사용해서 이 그림을 다시 그려낼 수 있을까요?"
      Course 4 SCFL 7_instruction: "화가가 물결무늬들을 잡고 싶어합니다! 어떻게 하면 다시 그려낼 수 있을까요?"
      Course 4 SCFP 1_instruction: |
        매개 변수들을 이용해서 화가가 왼쪽/오른쪽/위쪽/아래쪽으로 x 필셀 만큼 점프 뛰는 함수를 만들어보세요.
        (음수, 양수 모두 사용 가능하도록 만들면 됩니다.)
      Course 4 SCV 1_instruction: "설명을 다시 보려면 여기를 클릭하세요."
      Course 4 SCV 2_instruction: "설명을 다시 보려면 여기를 클릭하세요."
      Course 4 SCV 3_instruction: |-
        이번에는 잡기 게입입니다! 고양이를 잡으면 2 포인트, 펭귄을 잡으면 3 포인트를 얻게 해보세요.
        10 포인트를 먼저 얻으면 이깁니다!\r
        하지만, 고양이와 펭귄이 서로 잡으면, 점수를 잃습니다.\r
        \r
        위에서 설명한 것처럼 게임이 동작하도록 필요한 블록들을 붙이세요. 방향키를 눌러 강아지를 4방향으로 움직이도록 하려면 어떻게 하면 될까요?
        강아지가 고양이나 펭귄을 잡으면 어떻게 점수를 얻게 할 수 있을까요? 고양이와 펭귄에 동시에 닿으면 어떻게 점수를 잃게 할 수 있을까요?
      Course 4 SCV 4_instruction: "최대한 가장 적은 개수의 블록을 사용해서 이 퍼즐을 풀어보세요."
      Course 4 SCV 5_instruction: "최대한 가장 적은 개수의 블록을 사용해서 이 퍼즐을 풀어보세요."
      Course 4 SCV 6_instruction: "설명을 다시 보려면 여기를 클릭하세요."
      Course 4 SCVP 1_instruction: |
        매개 변수들을 이용해서 화가가 왼쪽/오른쪽/위쪽/아래쪽으로 x 필셀 만큼 점프 뛰는 함수를 만들어보세요.
        (음수, 양수 모두 사용 가능하도록 만들면 됩니다.)
      Course 4 Variables Assessment_instruction: |
        한 변의 크기를 지정하기 위한 변수를 사용해 이 이미지를 만들어보세요.
        각 선의 길이는 50 픽셀입니다.
      Course1BeePuzzle12_instruction: Get three nectars and then make two honey
      Course1MazeAssessment1_instruction: |-
        This is a test!\r
        Move one way, then
        another to get me to the pig
      Course1MazeAssessment2_instruction: |-
        This is a test!\r
        Move one way, then
        another to get me to the pig.
      CSP Data Unit - Counting Multiple Things_instruction: |-
        If you can count one
        thing you can count multiple things\r
        \r
        Find out how many people like something
        other than dogs and cats\r
        \r
        Count dogs\r
        Count cats\r
        Count total\r
        Do
        the math\r
        \r
        blank/ blank toal\r
        \r
        Can also use this to find percents
        from this\r
        \r
        x% are dog lovers
      CSP Data Unit -Counting Records - Easy Way_instruction: |
        ReadRecords with specific
        criteria \r
        find the length of an array\r
      CSP Data Unit -Counting Records - Hard Way_instruction: |
        \r
        1. ReadRecords
        for all records\r
        2. Way to loop through and count\r
      CSP U4 - JSON Object Intro - Bad Way_instruction: |
        Trigger both the keyboard
        and mouse event and examine the event objects displayed in the console. Why
        might an object be the best way to store this information? (Click to see full
        instructions)
      CSP U4 - JSON Object Intro - Good Way_instruction: "Create an object with at\nleast
        5 values including at least one string and one number. (Click to see\nfull
        instructions) \n"
      CSP U4 - Objects - createObject_instruction: "Create an object with at least\n5
        values including at least one string and one number. (Click to see full\ninstructions)
        \n"
      drawings!_instruction: |
        Draw the equilateral triangle - all the sides are the
        same!
      ECSPD Binary Odometer_instruction: |
        This is another resource you could use
        with your students.
      Eval Booleans 1_instruction: |
        Boolean operators (like >, <, =) allow us to
        compare different values, returning either true or false. Click "Run" to
        see how this expression evaluates.
      Eval Booleans 2_instruction: |
        Can you set the values so that this expression
        evaluates as true?
      Eval Booleans 3_instruction: |
        The string-length function returns the number
        of characters in a string (including spaces!) - make this code evaluate to
        true.
      Eval Booleans 4_instruction: |
        Here's an Evaluation Block called AND - it returns
        true if both of its parameters are true, otherwise it returns false. Edit
        the x variable so that this expression returns true.
      Eval Booleans 5_instruction: |
        This OR block returns true if either of its parameters
        is true. Otherwise, if both parameters are false it will return false. Set
        the y variable to a value that will cause this expression to return false.
      Eval Booleans 6_instruction: |
        Here's one more boolean block called NOT. This
        block flips true to false, or false to true. If you wrap this block of code
        in a NOT block, it should return true (because we are asking if the two expressions
        do NOT produce equal values).
      Eval Booleans Free Play_instruction: |
        Free Play: Try out some creations of
        your own using Booleans.
      Eval Booleans_instruction: |
        Booleans allow us to compare different values,
        returning "true" if the are equal, or "false" if they are not. What do
        you think this code will evaluate to?
      Eval Cond 1_instruction: |
        The cond block checks the boolean expressions in
        the left column, and as soon as it finds one that returns "true" it runs
        the corresponding code on the right. If none of the expressions evaluate to
        "true," it runs the bottom block. Update the "temperature" variable so
        that this block returns "It's just right."
      Eval Cond 2 (copy 1)_instruction: |
        This condition returns a different shape
        based on the value of the "sides" variable - change the value of "sides"
        so that the conditional returns a triangle.
      Eval Cond 2_instruction: |
        This condition returns a different shape based on
        the value of the "sides" variable - change the value of "sides" so that
        the conditional returns a triangle.
      Eval Cond 3 (copy 1)_instruction: |
        Can you write a conditional that checks
        the variable "age" and returns "Old enough to vote and drive" if age >
        17, "Old enough to drive" if age is > 15, and "Can't drive or vote" if
        neither conditions is true. Hint: The first condition to return "true" wins
        - make sure you put your conditions in the right order.
      Eval Cond 3_instruction: |
        Can you write a conditional that checks the variable
        "age" and returns "Old enough to vote and drive" if age > 17, "Old enough
        to drive" if age is > 15, and "Can't drive or vote" if neither conditions
        is true. Hint: The first condition to return "true" wins - make sure you
        put your conditions in the right order.
      Eval Cond 4_instruction: |
        We can use the string=? function to make conditionals
        that respond to text input. Here's a function called green shape that takes
        a string for the type of shape. Complete the conditions so that the correct
        solid green shape is returned when the function is run with "circle", "triangle",
        "square", or "rectangle".
      Eval Cond 5_instruction: |
        Here's a similar function red shape with an additional
        variable for size. Complete the conditionals so the correct solid red image
        of a given size is drawn for "circle", "triangle", and "star".
      Eval Cond 6_instruction: |-
        Write a function called food-critic, which takes
        in the name of a food and produces a String that says how you feel about that
        food. For example, (food-critic “pizza”) might evaluate to “delicious”, but
        (food-critic “rotten eggs”) might evaluate to “gross!”. Choose at least two
        foods to review, but you can you write more if you like!  Don’t forget to
        add an “else” clause!\r
        One example - and part of the definition -  has already
        been done for you!
      Eval Cond 7_instruction: |
        Free Play: Write a function called green-shape, which
        takes in the name of a shape and produces a solid green shape. Your function
        should work with at least “circle”, “star” and “rectangle”, but you can add
        other shapes if you like. You can choose the size of each shape. Don’t forget
        to add an “else” clause!\r
        One example - and part of the definition -  has
        already been done for you!\r
      Eval Cond 8_instruction: |
        Free Play: Suppose you want to own a car at 21, or
        have your own business by 30. Write a function called life-goals, which takes
        in an age and produces a string that describes your life goals by then. Don’t
        forget to add an “else” clause!\r
      Eval Contracts 1_instruction: |
        Use the "star" function to produce a red star
        with a 60 pixel radius
      Eval Contracts 10A_instruction: |
        Alright let's complete this puzzle with a
        Green Square that is 175 pixels in size.
      Eval Contracts 11A_instruction: |
        Can you complete this puzzle to read "Hello
        World" in the banner?
      Eval Contracts 2_instruction: |
        Check out the "rotate" function - can you
        use it to rotate this 90 pixel green square by 45 degrees?
      Eval Contracts 3_instruction: |
        Try using the "text" function to write this
        teal text at size 40.
      Eval Contracts 4 A_instruction: |
        The "scale" function returns an image that
        is scaled either larger or smaller than the input image. Try scaling this
        circle by a factor of 10 - how is the resulting image different than if you'd
        just made a circle of that size in the first place?
      Eval Contracts 4_instruction: |
        The scale function returns an image that is
        either larger or smaller than the input image. Try scaling this circle by
        a factor of 10. How is the returned image different than if you'd just made
        a circle of that size in the first place?
      Eval Contracts 8A_instruction: |
        Can you complete this puzzle? The big-triangle
        is 200 pixels in size and purple?
      Eval Contracts A_instruction: |
        Use the star function to produce a solid red
        star with a 60 pixel radius
      Eval Contracts C_instruction: |
        Check out the rotate function - can you use
        it to rotate this 90 pixel green square by 45 degrees?
      Eval Contracts E_instruction: |
        Try using the text function to write "Hello,
        world!" in teal at size 40.
      Eval Contracts shrink_instruction: "Can you complete this image using the \"shrink\"\nfunction
        block? The radius is 20. \n"
      Eval Define Funcs 1_instruction: |
        Here's a new function called green-triangle
        that takes a single Number for size and produces a green triangle. Use the
        new function to create a 125 pixel green triangle.
      Eval Define Funcs 2_instruction: |
        Let's look inside that green-triangle function
        to see how it works. Can you modify it so that the green-triangle function
        always draws outlined green triangles?
      Eval Define Funcs 3_instruction: |
        Here's the start of another new function
        called purple-circle with a domain of one Number (the radius) and a range
        of Image. The body of the function is broken though - fix it and then make
        a purple circle with 150 pixel radius
      Eval Define Funcs 4_instruction: |
        Create a new function called aqua-star that
        has a Domain of a single Number for radius and returns an aqua star of the
        given radius. Run your new function with a radius of 75.
      Eval Define Funcs 5_instruction: |
        Let's use that aqua-star function to make
        a row of different sized stars. From left to right, the stars should have
        radii of 25, 50, and 75.
      Eval Define Funcs Test_instruction: |
        Here's the start of another new function
        called purple-circle with a domain of one Number (the radius) and a range
        of Image. The body of the function is broken though - fix it and then make
        a purple circle with 150 pixel radius
      Eval Defining Vars Free Play 1_instruction: |
        Free Play: We've provided a function
        that fills your screen with my-image. Change my-image to see what patterns
        you can make.
      Eval Design Recipe .1_instruction: |
        Here's a Design Recipe for a function
        called square-circle with domain Number String and range Image. Click Edit
        to write the function definition (you will see two examples provided).
      Eval Design Recipe 1 (copy 1)_instruction: |
        We're going to write a function
        that draws a solid rectangle of any color that is twice wide as it is high.
        Start with an example - draw a solid green rectangle that has a height on
        100 pixels.
      Eval Design Recipe 1_instruction: |
        Alright, now given the Contract wide-rect:
        Number String -> Image, write an example - draw a solid green rectangle that
        has a height of 100 pixels.
      Eval Design Recipe 2 (copy 1)_instruction: |
        Let's do one more example before
        writing the function definition - this time draw a solid red rectangle with
        a height of 75 pixels.
      Eval Design Recipe 2_instruction: |
        Let's do one more example before writing
        the function definition - this time draw a solid red rectangle with a height
        of 75 pixels.
      Eval Design Recipe 3_instruction: |
        The Design Recipe for wide-rect already
        has a contract and one example. Can you write a second example and then complete
        the definition? The wide-rect function should produce a rectangle of given
        color that is twice as wide as it is high.
      Eval Design Recipe 4_instruction: |
        Use the Design Recipe to create a function
        starburst. When given a number of points and an outer radius, starburst returns
        a yellow radial star with given points, and an inner radius that is half the
        outer radius.
      Eval Design Recipe 5_instruction: |
        Using the Design Recipe, write a function
        striped-flag that takes two colors and produces a flag that is 250 pixels
        wide, 150 pixels tall, with three even horizontal stripes of given colors,
        in the order color2, color1, color2.
      Eval Design Recipe 6_instruction: |
        Write a function large-polygon that should
        output a solid polygon of given sides and color that takes up most of the
        window, regardless of the number of sides. To make sure that the polygon doesn't
        get too large as you increase the number of sides, side length should be inversely
        proportional to side number, with a length of (800/sides).
      Eval Design Recipe Free Play_instruction: |
        Free Play: Use the Design Recipe
        to create some functions of your own design
      Eval Free Play_instruction: 'Free Play: Make art with code!'
      Eval Strings Images .1_instruction: |
        So far we've only dealt with a single
        type of data, Numbers. Another type of data is a String, which is any combination
        of letters, numbers, or other characters wrapped in quotation marks. Run the
        String "Hello, world!" and see what happens.
      Eval Strings Images .2_instruction: |
        The string-append function takes two Strings
        and returns a single combined String. Add a String "Universe" to the second
        argument of string-append.
      Eval Strings Images 1_instruction: |
        The third type of data we're going to
        use is an Image. This star function takes in a Number and two Strings, and
        it evaluates to an Image. Use this function to make a solid red star with
        radius of 100.
      Eval Strings Images 2_instruction: |
        Free Play: Every Evaluation Block is color-coded
        to let you know which data type it returns and which types it needs for its
        parameters. The last parameter of the triangle function takes a String that
        controls its color - try some different colors to see what works.
      Eval Strings Images 3_instruction: |
        Some functions can only take a specific
        set of Strings, such as the second argument of this circle function, which
        controls its style. Draw this orange outline circle using the special String
        block with a dropdown to make sure you only use valid styles.
      Eval Strings Images 4_instruction: |
        Try using the rectangle block to draw this
        solid, red rectangle - it is 175 pixels wide and 100 pixels tall.
      Eval Strings Images 5_instruction: |
        Try using this new Evaluation Block called
        overlay to place a 100 pixel white triangle on top of a 200 pixel red circle.
      Eval Strings Images 6_instruction: |
        Use the overlay block to place a 75 pixel
        radius yellow star on top of a 150 pixel long blue square.
      Eval Strings Images 7_instruction: |
        The offset block lets you move an image
        relative to where it would normally be placed. Use this block to offset the
        square by 100 pixels on the y-axis.
      Eval Strings Images 8_instruction: |
        Here's a different kind of star block
        - it's called radial-star and it allows you to draw stars with any number
        of points! Use it to create a 7 point solid orange star with an inner radius
        of 75 pixels and an outer radius of 175 pixels.
      Eval Strings Images Free Play_instruction: |
        Free Play: Explore the blocks available
        to create something interesting. Make sure to share your favorite creations.
      Farmer for Authored Hint testing_instruction: |
        Wow, I found a really deep hole!
        I don't know how many shovelfuls of dirt it needs.  Can you write a program
        that fills it until the ground is even?  Hint:  Try using the while loop this
        time.
      Frequency Analysis_instruction: Test
      frozen circle function in circle_instruction: "이제 20개의 원을 겹치고, 각각을 18도씩 회전시키세요."
      frozen circle function with parameter_instruction: 원하는 크기로 그릴 수 있는 "원 그리기" 블럭이
        있습니다. 이 블럭을 사용해 5 크기의 원과 10 크기의 원을 그릴 수 있겠어요?
      frozen circle function_instruction: 새로운 "원 그리기" 블럭을 이용해 10개의 원을 겹쳐 그리세요. 원을
        그리기 위해 점프 하는 것을 잊지 마세요.
      frozen circle_instruction: "원은 특별한 도형입니다. 원을 그리기 위해서 물음표 부분에 어떤 수가 들어가야 할까요?"
      frozen cross rotate dense_instruction: "이제 90번 반복해 보세요. 360도를 회전하려면 90도를 몇 번
        회전해야 할까요? 힌트: 생각보다 작은 수입니다."
      frozen cross rotate_instruction: "이제 10번 반복해보세요. 각 선들을 그리면서 회전하기 위해서 몇 도가 필요할까요?"
      frozen cross_instruction: |
        더하기 기호를 만들기 위해서 이 명령어들을 "반복" 블럭 안에 넣어보세요.
        엘사가 앞 뒤로 움직일 수 있는 것 아시죠?
      frozen diamond mini snowflake_instruction: 모든 눈송이들이 서로 다른 모양을 하고 있다는 것을 아시나요?
        평행 사변형을 4번 그리기 위해 "반복"블럭을 사용하고, 각각을 90도 만큼씩 회전시켜 새로운 눈송이를 만들어보세요.
      frozen diamond snowflake_instruction: "이제, 평행 사변형을 10번 그릴 수 있도록 반복 블럭을 사용하고,
        각각을 36도 만큼씩 오른쪽으로 돌려 새로운 눈송이를 그려보겠습니다."
      frozen diamond_instruction: |
        이 블록들을 반복 블록 안에 넣어서 평행사변형을 만들어보세요.
        사각형하고 비슷하지만 각이 다릅니다. 4개의 각이 모두 90도가 아니라, 한 가지는 60도 이고 다른 한가지는 120도 입니다.
      frozen freeplay_instruction: "여러분은 이제 진짜 화가가 된 것 같아요! 겨울왕국을 만들어 보세요."
      frozen line_instruction: "안녕하세요! 저는 아렌델의 엘사입니다. 선 1개를 그릴 수 있도록 도와주세요."
      frozen perpendicular_instruction: 이제 두 개의 선을 90도 만큼 교차시켜 그릴 수 있는지 살펴보세요. "회전"블럭과
        "이동" 블럭을 사용해야 할 것 입니다.
      frozen snowflake branch_instruction: '"눈송이 가지 만들기" 블럭을 이용해 3개의 가지로 뻗어나가는 그럴
        듯한 눈송이를 만들어보세요.'
      frozen snowflake full_instruction: "이제 이쁜 눈송이를 만들기 위해 8번 반복해 보세요."
      frozen snowflower_instruction: "아주 복잡한 눈송이 모양도 아주 간단한 모양들을 이용해 만들 수 있습니다. 5크기의
        원을 5개, 10크기의 원을 5개 이용해 패턴을 만들 수 있겠어요?"
      frozen square iterative_instruction: "사각형을 만들기 위한 과정에 반 정도 왔습니다. 4개의 선을 모아 사각형을
        그려보세요."
      frozen square loop 3x_instruction: "이제 3개의 사각형을 회전시켜 만들어 보세요! 새로운 사각형을 그리기 전에
        120도 만큼 회전하는 것을 잊지 마세요."
      frozen square loop_instruction: |
        안녕하세요. 저는 아렌델의 안나입니다!
        더 적은 블록들을 사용하는 "반복" 블록을 이용해서 사각형을 1개 만들어보세요.
        사각형 1개를 만들기 위해서 "반복" 블록 안 (???) 값으로 얼마나 넣어야 할까요?
      frozen square snowflake_instruction: |
        "반복" 블록을 사용해서 사각형을 10번 만들어 보세요.
        삼각형을 한 번씩 그릴 때마다, 회전 블록을 이용해서 36 도 만큼 씩 회전시켜주세요.
      Infinity_catch_instruction: 방향키를 이용해서 엘사("캐릭터 2") 가 안나를 잡아보세요.
      Infinity_finale_instruction: "원하는대로 만들고 친구들에게 공유해 보세요."
      Infinity_move_collide_instruction: |
        히로는 "캐릭터 1" 입니다. 히로를 오른쪽에 있는 베이맥스에게 움직이고,
        베이맥스에 닿으면 소리가 나게 해보세요.
      Infinity_move_directions_instruction: |
        베이맥스는 "캐릭터 2" 입니다. 이동 블록들을 추가해서 방향키로 베이맥스를 움직여보세요.
        베이맥스를 다른 캐릭터 2개에 닿게 해보세요.
      Infinity_move_right_instruction: 히로는 "캐릭터 1" 입니다. 이동 블록을 사용해서 히로가 오른쪽 베이맥스에
        닿게 해보세요.
      Infinity_repeat_instruction: |
        "반복(무한)" 블록을 이용해서 안나가 400 픽셀 만큼 씩
        위, 아래로 움직이도록 해보세요.
      Infinity_say_instruction: 말하기 블록을 이용해서 안나가 "안녕 여러분" 이라고 말하도록 해 보세요.
      Infinity_shoot_instruction: 베이맥스는 "캐릭터 2" 입니다. 베이맥스가 히로에게 로켓을 던지게 해보세요.
      Infinity_shoot_directions_instruction: 히로는 "캐릭터 3" 입니다. 히로가 4개의 캐릭터들에게 각각 발사체를
        하나씩 쏘도록 해주세요. 1초 간격으로 하나씩 쏘도록 해주세요.
      Infinity_test_instruction: This is a test Infinity level.
      Infinity_touch_faster_instruction: "더 많은 눈송이들도 터치해보세요."
      Infinity_touch_four_instruction: "안나를 위, 아래, 왼쪽, 오른쪽으로 움직여서 4개의 눈송이들을 터치해보세요."
      Infinity_touch_score_instruction: 안나가 눈송이에 닿으면 점수를 올리도록 만들어보세요. 그 다음에 "실행"을
        누르고 안나를 움직여 눈송이에 닿게 해보세요.
      jessie-test_instruction: Lots of instructions
      Just for Testing_instruction: Test instructions
      K-1 Artist 1 Assessment 1_instruction: "짧은 선은 위쪽으로 그리고 긴 선은 오른쪽으로 그리세요."
      K-1 artist 1 level 10_instruction: "점프, 그리기 블록을 이용해서 파선(----) 을 그려보세요."
      K-1 artist 1 level 9_instruction: "세 개의 선을 이용하여 이것을 그려보세요."
      K-1 Artist Loops 1_instruction: "오른쪽으로 4번 이동해서 이 선을 그려보세요."
      K-1 Artist Loops 2_instruction: 1개의 반복 구조를 이용해서 같은 선을 그려보세요.
      K-1 Artist Loops 3_instruction: "이 블록들을 반복시켜서 6개의 선을 그려보세요."
      K-1 Artist Loops 4_instruction: "반복 구조를 사용하면, 이 성의 꼭대기를 그리는데 도움이 될까요?"
      K-1 Artist Loops 5_instruction: "이 계단들을 그리기 위해서 4번 반복시켜보세요."
      K-1 Artist Loops 6_instruction: |
        2 개의 반복구조가 필요합니다: 하나는 위로 올라가는 것이고,
        다른 하나는 아래로 내려가는 것입니다.
      K-1 Artist Loops 7_instruction: 2개의 반복 구조를 이용해서 이 패턴을 완성해보세요.
      K-1 Artist Loops 8_instruction: "이번 계단은 더 많습니다."
      K-1 Artist Loops 9_instruction: "형성평가: 반복 구조 1개를 사용해서 계단을 그려보세요."
      K-1 Artist Loops Free Play_instruction: "자유 시간입니다. 재미있는 것을 그려보세요!"
      K-1 Artist1 1_instruction: 1개의 선으로 남자의 발을 그려보세요.
      K-1 Artist1 10_instruction: "보물 X 까지 파선(----) 을 그려보세요."
      K-1 Artist1 2_instruction: "선 2개로 고양이 수염을 그려보세요!"
      K-1 Artist1 3_instruction: "왼쪽으로 2개의 선을 그리고, 위쪽으로 2개의 선을 그려 집을 완성해보세요!"
      K-1 Artist1 4_instruction: "선을 위로/옆으로/아래로 그려 성을 완성해보세요!"
      K-1 Artist1 5.5_instruction: "짧은 선들을 사용해서 성의 세번째 타워를 완성해보세요."
      K-1 Artist1 5_instruction: 2개의 선을 그어 이꽃의 줄기를 그려보세요.
      K-1 Artist1 6_instruction: "점프 블록을 사용해서 그림을 완성해보세요!"
      K-1 Artist1 7_instruction: |
        점프 블록을 사용해서 선을 그리지 말고 이동하세요.
        위로 점프해서 선을 그려주세요.
      K-1 Artist1 8_instruction: "점프, 그리기 블록을 이용해서 파선(----) 을 그려보세요."
      K-1 Artist1 9_instruction: "선을 그린 다음에 점프해서 파선을 만들어보세요."
      K-1 Artist1 Assessment 1_instruction: "짧은 선, 긴 선들을 그려보세요!"
      K-1 Artist1 Assessment 2_instruction: "짧은 파선(----) 들을 그려보세요!"
      K-1 Artist2 1_instruction: "삼각형 아래에 사각형을 그려보세요."
      K-1 Artist2 2_instruction: "집 옆으로 점프해서 사각형을 그려보세요."
      K-1 Artist2 3_instruction: "다른 사각형 위에 사각형을 그려보세요."
      K-1 Artist2 4_instruction: "사각형을 그려 다리를 완성해 보세요."
      K-1 Artist2 5_instruction: "사각형을 그려 다리의 기둥을 완성해보세요."
      K-1 Artist2 6_instruction: "두 개의 사각형을 더 그려 완성 시켜보세요!"
      K-1 Artist2 Assessment1_instruction: "형성평가: 다른 사각형 옆에 사각형을 그려보세요."
      K-1 Artist2 Free Draw_instruction: "아무거나 그려보세요."
      K-1 Artist2_7_instruction: "옷장 맨 위 서랍에 사각형을 그려보세요."
      K-1 Bee 1_instruction: |
        제가 꿀을 얻을 수 있게 꽃으로 데려다 주세요.
        그리고나서 벌집으로 이동해서, 꿀을 만들 수 있게 해주세요.
      K-1 Bee 10_instruction: 4번 꽃꿀을 모은 후, 2번 꿀을 만드세요!
      K-1 Bee 11.5_instruction: 4개의 꿀을 만들기 위해서 4개의 꽃꿀을 모아보세요.
      K-1 Bee 11_instruction: "꽃꿀을 3개 모아 꿀을 만들어보세요."
      K-1 Bee 12_instruction: "꽃꿀을 3개 모은 후, 2개의 꿀을 만들어보세요!"
      K-1 Bee 13_instruction: "꽃꿀을 3개 모은 후, 1개의 꿀을 만들어보세요!"
      K-1 Bee 14_instruction: "꽃꿀로 이동해서 꽃꿀을 얻고, 꿀로 이동해서, 꿀을 만들게 해 주세요."
      K-1 Bee 15_instruction: 2개의 꿀을 만들기 위해서 2개의 꽃꿀을 모아보세요!
      K-1 Bee 2_instruction: |
        제가 꿀을 얻을 수 있게 꽃으로 데려다 주세요.
        그리고나서 벌집으로 이동해서, 꿀을 만들 수 있게 해주세요.
      K-1 Bee 3_instruction: |
        제가 꿀을 얻을 수 있게 꽃으로 데려다 주세요.
        그리고나서 벌집으로 이동해서, 꿀을 만들 수 있게 해주세요.
      K-1 Bee 4_instruction: "꽃꿀을 2개 모은 후, 2개의 꿀을 만들어보세요!"
      K-1 Bee 5_instruction: "꽃꿀을 3개 모은 후, 1개의 꿀을 만들어보세요!"
      K-1 Bee 6_instruction: "꽃꿀을 2개 모은 후, 2개의 꿀을 만들어보세요!"
      K-1 Bee 7_instruction: "꽃꿀을 3개 모은 후, 2개의 꿀을 만들어보세요!"
      K-1 Bee 8_instruction: "꽃꿀을 2개 모은 후, 2개의 꿀을 만들어보세요!"
      K-1 Bee 9_instruction: "꽃꿀을 2개 모은 후, 2개의 꿀을 만들어보세요!"
      K-1 Bee Assessment 1_instruction: "꿀을 만들기 위해, 꽃꿀을 모으세요."
      K-1 Bee Assessment 2_instruction: "꿀을 만들기 위해, 꽃꿀을 모으세요."
      K-1 Bee Loops 1_instruction: "꿀을 만들기 위해, 꽃꿀을 모으세요."
      K-1 Bee Loops 10_instruction: "모든 꽃꿀을 모아 꿀을 만들어보세요."
      K-1 Bee Loops 11_instruction: "모든 꽃꿀과 꿀을 모아보세요."
      K-1 Bee Loops 12_instruction: "모든 꽃꿀과 꿀을 모아보세요."
      K-1 Bee Loops 2_instruction: 1개의 반복 구조를 사용해서 이동한 후, 꽃꿀을 모으고, 꿀을 만드세요!
      K-1 Bee Loops 3_instruction: 3개의 반복(횟수) 구조를 사용해서, 꽃꿀을 모으고 꿀을 만들어보세요!
      K-1 Bee Loops 4_instruction: "반복(횟수) 구조를 사용해서, 꽃꿀을 모으고 꿀을 만들고, 이동해 보세요!"
      K-1 Bee Loops 5_instruction: "반복(횟수) 구조를 사용해서, 꽃꿀과 꿀을 모아보세요!"
      K-1 Bee Loops 6_instruction: 1개의 반복(횟수) 구조를 사용해서, 꽃꿀과 꿀을 모으고, 이동해 보세요!
      K-1 Bee Loops 7_instruction: "꽃꿀을 모아 꿀을 만들어보세요!"
      K-1 Bee Loops 8_instruction: "꽃꿀을 모아 꿀을 만들어보세요!"
      K-1 Bee Loops 9_instruction: "꽃꿀을 모두 모아 꿀을 만들어 보세요."
      K-1 Bee Loops Assessment 1_instruction: |
        꿀을 만들기 위해서, 꽃꿀을 모으세요.
        이동하기 위해서 반복 구조들을 사용하세요!
      K-1 Bee Loops Assessment 2_instruction: "반복 구조들을 사용해서 꽃꿀을 모아 꿀을 만들어 주세요!"
      K-1 Bee Puzzle 12_instruction: Get three nectars and then make two honey
      K-1 Building a Foundation Assessment_instruction: 3단계 피라미드를 만들어보세요. 한 조각 씩 그려
        완성해보세요!
      k-1 maze 1_instruction: "오른쪽 돼지에게 보내주세요."
      K-1 Maze 10_instruction: 'TNT를 피해 돼지에게 이동시켜주세요! '
      K-1 Maze 11_instruction: "길을 따라가서 돼지를 잡게 해주세요. TNT를 피해가지 않으면 깃털들이 날리게 될 거에요!
        힌트: TNT는 내 아래에 있습니다."
      K-1 Maze 2_instruction: "오른쪽으로 이동해서 돼지를 잡을 수 있게 해주세요!"
      K-1 Maze 3_instruction: "돼지를 잡을 수 있도록, 저를 아래쪽으로 보내주세요!"
      K-1 Maze 4_instruction: "돼지를 잡을 수 있도록, 저를 위쪽으로 보내주세요!"
      K-1 Maze 5_instruction: "오른쪽으로 이동해서 돼지를 잡을 수 있게 해주세요!"
      K-1 Maze 6_instruction: "돼지를 잡을 수 있도록, 한 쪽으로 가다가 다시 다른 쪽으로 움직여주세요!"
      K-1 Maze 7_instruction: "돼지를 잡을 수 있도록, 한 쪽으로 가다가 다시 다른 쪽으로 움직여주세요!"
      K-1 Maze 8_instruction: "돼지를 잡을 수 있도록, 한 쪽으로 가다가 다시 다른 쪽으로 움직여주세요!"
      K-1 Maze 9_instruction: "돼지를 잡을 수 있도록, 한 쪽으로 가다가 다시 다른 쪽으로 움직여주세요!"
      K-1 Maze Assessment 1_instruction: "형성평가 -- 돼지에게 이동시켜주세요!"
      K-1 Maze Assessment 12_instruction: "형성평가 레벨"
      K-1 Maze Assessment 13_instruction: "형성평가 레벨"
      K-1 Maze Assessment 2_instruction: "형성평가 -- 돼지에게 이동시켜주세요!"
      K-1 maze debug 1_instruction: "코드를 수정해서 돼지를 잡을 수 있게 해주세요!"
      K-1 maze debug 10_instruction: "돼지에게 갈 수 있도록, 디버깅하고 블록들을 추가하거나 다시 배치 해주세요."
      K-1 maze debug 11_instruction: |-
        연습해보세요!\r
        디버깅해서 돼지에게 갈 수 있도록 블록들을 추가하거나 다시 배치 해주세요.
      K-1 maze debug 2_instruction: "어떤 것이 빠졌는지 살펴본 후, 블록들을 추가해서 돼지에게 갈 수 있도록 해주세요!"
      K-1 maze debug 3_instruction: "어떤 것이 빠졌는지 살펴본 후, 블록들을 제거해서 돼지에게 갈 수 있도록 해주세요!"
      K-1 maze debug 4_instruction: "이 블록들을 실행해보고 고쳐주세요! 제가 생각하기에 다른 방향으로 가고 있는 것
        같아요."
      K-1 maze debug 5_instruction: "돼지에게 갈 수 있도록 블록들을 추가하거나 다시 배치 해주세요."
      K-1 maze debug 6_instruction: "돼지에게 갈 수 있도록, 디버깅하고 블록들을 추가하거나 다시 배치 해주세요."
      K-1 maze debug 7_instruction: "돼지에게 갈 수 있도록, 디버깅하고 블록들을 추가하거나 다시 배치 해주세요."
      K-1 maze debug 8_instruction: "디버깅해서, 돼지에게 갈 수 있도록 블록들을 추가하고 다시 배치 해주세요."
      K-1 maze debug 9_instruction: "돼지에게 갈 수 있도록, 디버깅하고 블록들을 추가하거나 다시 배치 해주세요."
      K-1 Maze debug Assessment 1_instruction: "형성평가: 돼지에게 갈 수 있도록 블록들을 추가하거나 다시 배치
        해주세요."
      K-1 Maze Loops 1_instruction: "저를 돼지에게 이동시켜 주세요."
      K-1 Maze Loops 10_instruction: "돼지에게 갈 수 있도록 해주세요! 반복(횟수) 구조를 사용해 더 쉽게 해보세요."
      K-1 Maze Loops 11_instruction: "돼지에게 갈 수 있도록 해주세요! 반복(횟수) 구조를 사용하면 쉽습니다."
      K-1 Maze Loops 12_instruction: "돼지에게 갈 수 있도록 해주세요! 반복(횟수) 구조를 사용하면 쉽습니다."
      K-1 Maze Loops 2_instruction: "돼지에게 갈 수 있도록, 반복(횟수) 블록을 사용해보세요."
      K-1 Maze Loops 3_instruction: "돼지에게 갈 수 있도록 해주세요! 반복(횟수) 구조를 반드시 사용하세요."
      K-1 Maze Loops 4_instruction: "저를 돼지에게 이동시켜 주세요."
      K-1 Maze Loops 5_instruction: "돼지에게 갈 수 있도록 해주세요! 반복(횟수) 구조를 반드시 사용하세요."
      K-1 Maze Loops 6_instruction: "돼지에게 갈 수 있도록 해주세요! 반복(횟수) 구조를 반드시 사용하세요."
      K-1 Maze Loops 7_instruction: "돼지에게 갈 수 있도록 해주세요! 반복(횟수) 구조를 반드시 사용하세요."
      K-1 Maze Loops 8_instruction: "돼지에게 갈 수 있도록 해주세요! 반복(횟수) 구조를 사용하세요."
      K-1 Maze Loops 9_instruction: "저를 돼지에게 이동시켜 주세요."
      K-1 Maze Loops Assessment 1_instruction: |
        지금까지 배웠던 것을 잘 살펴보세요!
        반복(횟수) 구조를 사용해 돼지에게 보내주세요!
      K-1 Maze Loops Assessment 2_instruction: "돼지에게 갈 수 있도록 해주세요! 반복(횟수) 구조를 사용하세요."
      K-1 Maze Multi 14_instruction: "형성평가 레벨"
      K-1 Maze Multi 15_instruction: "형성평가 레벨"
      K-1 Maze Sequence Assessment 1_instruction: |-
        배운 것을 살펴봅시다!\r
        한 방향으로 움직이다가 다른 방향으로 움직여서 돼지에게 갈 수 있도록 해주세요.
      K-1 Maze Sequence Assessment 2_instruction: "돼지를 잡을 수 있도록, 한 쪽으로 가다가 다시 다른 쪽으로
        움직여주세요!"
      kikiTesting_instruction: |
        .\r
         .\r
        .\r
        .\r
        .\r
        .\r
        \r
        .\r
        \r
      love_spring_1_instruction: |
        Let's celebrate Spring!  We have put some seeds
        in the ground to prepare for the season's flowers.  Can you cover them up
        so that the birds don't eat them?
      love_spring_2_instruction: |
        Our flowers are in full bloom!  Now we need the
        bee to grab nectar from each one so he can make plenty of honey back at his
        hive!
      love_spring_3_instruction: |-
        Figure out how to change this code so that Robin
        chooses a number between 1 and 20.  \r
        \r
        When you're ready, press "Run"
        and play until you guess Robin's number!
      Luigi's Pizza 1_instruction: |
        Welcome to Luigi's Pizza! To order a pizza,
        type the name of a topping into the cost function, and we'll return the price
        of that pizza. Try ordering a pepperoni pizza to start.
      Luigi's Pizza 2 (copy 1)_instruction: |
        Right now there are only four choices
        available at Luigi's pizza - let's fix that! Add a couple of new toppings
        to the conditional block in the "cost" function. Once you've added your
        toppings, test out the function to make sure it works.
      Luigi's Pizza 2_instruction: |
        Right now there are only four choices available
        at Luigi's pizza - let's fix that! Add a couple of new toppings to the conditional
        block in the cost function. Once you've added your toppings, test out the
        function to make sure it works.
      Luigi's Pizza 3 (copy 1)_instruction: |
        That's better, everyone loves more
        variety in their pizza toppings! But you still can't please everyone, and
        folks are coming in to order toppings that Luigi doesn't have. Instead of
        saying no to those people, could you update the "else" clause so that we
        charge them a premium for toppings that we don't normally offer?
      Luigi's Pizza 3_instruction: |
        That's better, everyone loves more variety in
        their pizza toppings! But you still can't please everyone, and folks are
        coming in to order toppings that Luigi doesn't have. Instead of saying no
        to those people, could you update the else clause so that we charge them a
        premium for toppings that we don't normally offer? Let's charge $10,000
        for a topping we don't carry.
      Luigi's Pizza 4_instruction: |
        Free Play: What can you do to make Luigi's cost
        function even more useful?
      MSM Big Game Empty_instruction: |
        All variables and functions are currently
        empty stubs. Each puzzle progression will be focused on defining and handful
        of them, and therefore adding functionality.
      MSM Big Game Vars 1 (copy 1)_instruction: |
        In the Variables toolbox you'll
        see several variables that define how your game characters look, move, and
        interact
      MSM Big Game Vars 1_instruction: |
        In the Variables toolbox you'll see several
        variables that define how your game characters look, move, and interact
      MSM Big Game Vars Backup_instruction: |
        In the Variables toolbox you'll see
        several variables that define how your game characters look, move, and interact
      MSM Defining Vars 1 (copy 1)_instruction: |
        Write a program that produces a
        50 pixel solid green triangle.
      MSM Defining Vars 1_instruction: |
        Write a program that produces a 50 pixel
        solid green triangle.
      MSM Defining Vars 2 (copy 1)_instruction: |
        If we wanted to make fifty green
        triangles, it would be a pain to repeat that block of code 50 times. Let's
        create a variable called "my-shape" and put the code for a 50 pixel solid
        green triangle inside.
      MSM Defining Vars 2_instruction: |
        If we wanted to make fifty green triangles,
        it would be a pain to repeat that block of code 50 times. Let's create a
        variable called my-shape and put the code for a 50 pixel solid green triangle
        inside.
      MSM Defining Vars 3 (copy 1)_instruction: |
        Take your "my-shape" variable
        and use it with this provided code to draw two identical green triangles.
      MSM Defining Vars 3_instruction: |
        Take your my-shape variable and use it with
        this provided code to draw two identical green triangles that are 50 pixels
        in size.
      MSM Defining Vars 4_instruction: |
        Edit your my-shape variable so that it draws
        75 pixel solid red stars.
      MSM Play Lab Butterfly 1_instruction: |
        Help Sam stay on the screen so that
        you can always see at least a little piece of him. Using the arrow keys, see
        how far Sam can go to the left while still staying onscreen. You’ll find that
        Sam is onscreen as long as his x-coordinate is greater than -50. Then, fill
        in the code to make Sam stay on the screen.
      MSM Play Lab Butterfly 2_instruction: |
        Now make Sam stay on the right side
        of the screen. You'll have to experiment to see how far he can go and still
        be partially visible on the screen.
      MSM Play Lab Butterfly 3_instruction: |
        Now, combine your work to make Sam stay
        on both sides of the screen.
      MSM Play Lab Game 2_instruction: |
        Variables can also be used to control the
        speed of players in a game. Set the player speed and the enemy speed and see
        how the movement changes. Speed can be between 2 and 12.
      NetSim Standalone Automatic DNS_instruction: |
        In this version of the Internet
        Simulator, a Domain Name System (DNS) is provided for you and knows the IP
        addresses of all connected computers. Send a message in the form GET [hostname]
        to the DNS service at address <yourRouterNumber>.15 to get a student's address.
      NetSim Standalone Broadcast_instruction: |
        In this version of the Internet Simulator,
        you can connect to up to 5 other people in a room. When you send messages
        in the room, everyone receives them. What are some of the challenges of this
        system, and how might you solve them?\r
      NetSim Standalone Classroom Routers_instruction: |
        In this version of the Internet
        Simulator, everyone connects to a router and has a specific address. To send
        messages, you have to address your message to the specific address of the
        recipient, and the router will take care of delivering it to the right computer.
        If there are other routers created in your class, ask for the address of one
        of your classmates and send them a message! View the Log Router to see the
        path the messages have taken through the network.
      NetSim Standalone Freeplay_instruction: |
        In this configuration, most of the
        options are turned on, and you can play with them. Have fun!
      NetSim Standalone Manual DNS_instruction: |
        In this version of the simulator
        you can't see the other students' addresses.  Instead, one of you must act
        as a name service, to help share addresses with each other.
      NetSim Standalone Packets TCP_instruction: |
        Messages on the Internet can take
        many paths to get to their destination, and sometimes along the way the message
        gets dropped. In this version of the Internet Simulator, there is a 10% chance
        of a packet being dropped, multiple packets may take different paths to the
        destination, and the default max packet size is set to 6 additional characters.
      NetSim Standalone Routers Addresses_instruction: |-
        For this activity, connect
        to a router with the others in your group. Important note: The router will
        only properly route messages where the first 4 bits are the To: address and
        the second 4 bits are the From: address.\r
        \r
        [TODO: NetSim needs to support
        hierarchical addresses. For now, level is set up for 4 bit to and from addresses]
      NetSim Standalone SendAB_instruction: |
        You and your partner share a single
        wire that can only be in state A or state B. You can set the wire to either
        state at any time, and you can read the state of the wire at any time. Can
        you figure out a way to effectively communicate with just this system?
      NetSim Standalone Sending Numbers Ascii_instruction: |
        Now that you've transmitted
        information represented as decimal numbers, you can map those numbers to text
        characters to send text-based information back and forth. With a text-based
        protocol, you can easily represent and communicate all kinds of information.
      NetSim Standalone Sending Numbers_instruction: "You and your partner can now\nreliably
        send messages back and forth without extra coordination! While you're\nalways
        sending bits back and forth, you can also represent those bits as decimal\nnumbers.
        What kinds of information can you represent with this system? \n"
      NetSim_AddressingMessages_instruction: |
        In this version of the simulator, you
        will connect to a Router instead of directly to another student. Enter an
        address in the "To" box to send a message to another student.
      NetSim_AutomaticDNS_instruction: |
        In this version of the simulator a DNS service
        is provided for you. Send a message in the form GET [hostname] to the DNS
        service at address 15 to get a student's address.
      NetSim_ManualDNS_instruction: |
        In this version of the simulator you can't
        see the other students' addresses.  Instead, one of you must act as a name
        service, to help share addresses with each other.
      NetSim_SendAB_instruction: |
        Connect to another student.  Each of you can set
        the value of the wire between you to "A" or "B".  See if you can send
        a complete message!
      NetSim_SendAscii_instruction: |
        In this version of the simulator, you can send
        numbers or ASCII characters to one another, one bit at a time.
      NetSim_SendBits_instruction: |
        Connect to another student.  You can now set
        your wire to "0" or "1".  Send a message to your partner!
      NetSim_SendingABTest_instruction: |
        This is Sarah's test of making a netsim
        level
      NetSim_SendNumbers_instruction: |
        In this version of the simulator, you can
        view the decimal representations of the binary you are sending.
      NetSim_Superuser_instruction: You have loaded NetSim in superuser mode.
      NetSim_Variant1_instruction: |
        NetSim: Variant 1 allows students to manually
        work out the timing of sending bits back and forth.
      NetSim_Variant2_instruction: |
        NetSim: Variant 2: Students connect directly
        to one another and send entire packets back and forth, exploring systems of
        encoding data.
      NetSim_Variant3_instruction: |
        NetSim: Variant 3: Connects groups of 2-6 students
        with a router, and explores issues in routing and DNS
      New Artist Project_instruction: |
        멋진 그림을 그려보세요!
        여러분의 코드는 프로젝트로 저장되어있기 때문에 언제나 여기로 돌아올 수 있습니다.
      NEW Course 4 Artist Functions 1_instruction: "반복 구조를 이용해서 한 변의 길이가 100 픽셀인 사각형을
        그려보세요."
      NEW Course 4 Artist Functions 10.1_instruction: "이 패턴을 그리기 위해서 이전 퍼즐들의 함수들을
        사용해보세요."
      NEW Course 4 Artist Functions 10_instruction: '"수정"을 누른 후, 함수를 정의한 블록들을 40 픽셀
        사각형을 그릴 수 있도록 만들어주세요.'
      NEW Course 4 Artist Functions 11_instruction: |
        한 줄에 6개의 사각형을 그리는 "사각형 한 줄 그리기" 함수를 만들어 보세요.
        이전에 만들어 보았던 "20 크기 사각형 그리기" 함수를 이용해서 만들면 됩니다.
        참고: 펜의 굵기가 더 두껍게 바뀌었습니다. "20 크기 사각형 그리기" 함수를 "수정"해서
        어떻게 되나 살펴보세요!\r
      NEW Course 4 Artist Functions 12_instruction: |
        이 패턴을 그리기 위해서, 마지막 퍼즐에서 사용했던
        "사각형 한 줄 그리기" 함수를 사용해보세요.
      NEW Course 4 Artist Functions 13_instruction: |
        "사각형 한 줄 그리기" 함수를 이용해서 별 모양을 그려보세요.
        힌트: "사각형 한 줄 그리기" 함수를 수정하면 두 번 실행시킬 필요가 없습니다.
        그리고, 일정 픽셀 만큼 이동시킨 다음에 144도를 회전해야 합니다.
      NEW Course 4 Artist Functions 14_instruction: "자유 시간입니다! "
      NEW Course 4 Artist Functions 2_instruction: '20 픽셀 만큼 씩 떨어져 있는 3개의 사각형을 그려보세요.
        힌트: 각 사각형의 크기는 100 픽셀입니다.'
      NEW Course 4 Artist Functions 3_instruction: |
        여기에 "함수"라는 새로운 블록이 있습니다. "수정하기"를 눌러 한 변의 길이가 100 픽셀인 사각형을 그릴 수 있도록 코드를 채워보세요.
        함수를 모두 수정하면 "닫기"를 누른 후 프로그램을 실행시켜보세요.
      NEW Course 4 Artist Functions 4_instruction: '"사각형 그리기" 함수를 사용해서 이 패턴을 그려보세요.
        힌트: 각 사각형을 그린 후 "오른쪽으로 120도 회전" 을 사용하면 됩니다.'
      NEW Course 4 Artist Functions 5_instruction: |
        "사각형 그리기" 블록은 어떻게 실행되는 것일까요? "사각형 그리기" 함수에서 "수정하기"를 눌러보세요.
        수정하기를 눌렀을 때 보이는 것은 "사각형 그리기"를 정의한 것입니다.
        함수를 살펴보았으면, "저장 후 닫기"를 누른 후, 프로그램을 "실행" 시켜 보세요.
      NEW Course 4 Artist Functions 6_instruction: |
        "사각형 그리기" 함수 블록을 이용해서 이 그림을 만들어보세요. 힌트: 각 사각형들은 120 픽셀 만큼 씩 떨어져 있습니다.\r
      NEW Course 4 Artist Functions 7_instruction: "함수 블록들을 사용하는 것이 어려운가요? 이 함수를 수정해서
        200 픽셀 크기가 되도록 바꿔보세요.\n힌트: \"사각형 그리기\" 함수에서 \"수정하기\"를 눌러서 고치면 됩니다.\n함수 수정을
        끝내려면 \"닫기\"를 누르면 됩니다. \n"
      NEW Course 4 Artist Functions 8_instruction: |
        "삼각형 그리기"라는 새로운 함수를 만들었습니다.
        한 변의 길이가 100 픽셀인 삼각형을 그릴 수 있도록 함수 정의를 수정해보세요.
      NEW Course 4 Artist Functions 9_instruction: "블록 1개 만 더 추가해서 이 문제를 풀어보세요."
      NEW Course 4 Artist Functions inspire_instruction: |
        여기를 눌러 멋진 그림을
        다시 살펴보세요.
      New Course 4 Artist Functions Level 4_instruction: |
        "사각형 그리기" 함수를
        이용해서 이 패턴을 그려보세요.
      NEW Course 4 Artist Params 1_instruction: |
        한 변의 길이가 50 픽셀 크기인 사각형을 만들 수 있도록
        이 함수를 만들어 보세요. "수정"을 눌러 시작하세요.
      NEW Course 4 Artist Params 10_instruction: "\"육각형 그리기\" 함수 블록을\n길이 변수값을 바꿀 수
        있도록 만들어보세요. 힌트: 이 정육각형의 한 변의 길이는 100 픽셀입니다. \n"
      NEW Course 4 Artist Params 11_instruction: |
        이 모양을 어떻게 그릴지 생각할 수 있나요?
        "한 변의 길이" 변수를 사용하기 위해 함수를 수정하세요.
      NEW Course 4 Artist Params 12_instruction: |
        이 그림을 완성할 수 있겠나요?
        모든 모양의 한 변의 길이는 100 픽셀입니다.
      NEW Course 4 Artist Params 12a_instruction: |
        이번 이미지는 이전 것과 비슷합니다.
        함수에 "~동안 반복" 을 이용해 이 디자인을 만들어보세요.
      NEW Course 4 Artist Params 13_instruction: |-
        "다각형 그리기" 함수를 수정해 보세요. "변의 길이" 매개 변수가 있습니다. 이제 "길이"를 매개 변수로 추가해 보세요. \r
        힌트: 각 모양의 둘레의 길이는 200 픽셀입니다. 다각형에서 면의 개수가 달라질 때, 같은 크기로 만드는 공식 기억하고 있으시죠?
      NEW Course 4 Artist Params 14_instruction: |
        "나선 그리기"를
        "길이"와 "한 변의 길이" 변수를 이용할 수 있도록 수정하고, 이 모양을 다시 만들어보세요.
      NEW Course 4 Artist Params 15_instruction: |
        자유 플레이: 여기 여러분들이 작성한 함수들과 가지고 놀 수 있는 몇 개의 함수가 더 있습니다.
        멋진 것들을 그려보세요! 선 그리기로 얼마나 많은 것들을 그릴 수 있는지 해보세요.
      NEW Course 4 Artist Params 2_instruction: 한 변의 길이가 50 픽셀인 삼각형을 그리는 "삼각형 그리기"
        함수를 만들어보세요.
      NEW Course 4 Artist Params 3_instruction: |
        이제 5개의 삼각형이 한 줄로 그리기 위한 함수를 사용해보세요.
        힌트: 각 삼각형들은 30 픽셀씩 떨어져 있습니다.\r
      NEW Course 4 Artist Params 4_instruction: |
        이 함수 블록들이 뭔가 다르다는 것을 알아차리셨나요?
        "실행"을 눌러 어떤 일이 일어나나 살펴보세요.
      NEW Course 4 Artist Params 5_instruction: "입력 블록의 길이 매개변수에 입력 되어있는 ??? 를 채워보세요.\n힌트:
        육각형의 한 변의 길이는 100 픽셀입니다. \n"
      NEW Course 4 Artist Params 6_instruction: |
        이런 모양들을 그려내기 위해서, "???" 로 입력되어있는 "길이" 매개 변수의 정확한 값을 채워보세요.
        사각형과 삼각형의 각 변의 길이는 100 픽셀이고 육각형의 한 변의 길이는 75 픽셀입니다.
      NEW Course 4 Artist Params 7_instruction: |
        이 그림을 완성시켜보세요. 힌트:
        각 선의 길이는 바로 이전 선보다 25 픽셀만큼 더 큽니다. 첫 번째 삼각형의 한 변의 길이는 25 픽셀입니다.
      NEW Course 4 Artist Params 8_instruction: |
        이 삼각형 함수의 코드는 문제가 있습니다.
        함수를 고쳐서 25, 50, 75 길이의 삼각형을 그려보세요.
      NEW Course 4 Artist Params 9_instruction: |
        "사각형 그리기" 함수의 정의를 "수정"해서 매개 변수를 추가해보세요.
        삼각형 그리기와 마찬가지로 길이를 매개 변수로 사용하면 됩니다.
        이번에는 3개의 사각형들을 그리면 됩니다: 한 변의 길이가 25, 50, 75 픽셀이고,
        100 픽셀 만큼씩 떨어져 있습니다.
      NEW Course 4 Artist Params inspire_instruction: "멋진 자유 플레이: 여러분들은 이런 패턴을 만들기
        위해 필요한 모든 것들을 배웠습니다.\n이 그림이 멋지다고 생각하면, 비슷하게 다른 것을 만들어보세요. 아니면, 만들고 싶은 것을\n만들어보세요.\\r\n\\r\n이런
        멋진 패턴이 어떻게 만들어졌는지 궁금한가요? "
      NEW Course 4 Artist Vars 1.5_instruction: "코드를 살펴보세요. \"길이 설정\" 블록과 \"길이\" 블록이
        어떻게 함께 사용될 수 있는지\n이해할 수 있나요? \"실행\"을 눌러 어떻게 실행되는지 살펴보세요. \n"
      NEW Course 4 Artist Vars 12_instruction: |
        자 이제, 이전 레벨에서의 알고리즘을 다시 만든 후,
        한 변의 길이가 150 인 5각형을 만들어보세요.
      NEW Course 4 Artist Vars 2.5_instruction: "코드를 살펴보세요. \"길이 설정\" 블록과 \"길이\" 블록이
        어떻게 함께 사용될 수 있는지\n이해할 수 있나요? \"실행\"을 눌러 어떻게 실행되는지 살펴보세요. \n"
      NEW Course 4 Artist Vars 2_instruction: '"길이 설정" 블록에 수 블록을 넣어, 50 픽셀 크기의 삼각형들을
        만들어보세요. '
      NEW Course 4 Artist Vars 4 5_instruction: |
        이전 퍼즐을 멋지게 해결했으니, 이번에는 60 픽셀 크기의 육각형으로 멋진
        디자인을 만들어보세요.
      NEW Course 4 Artist Vars 4_instruction: |
        다시 한 번 해보세요. 육각형들로 이런 멋진 디자인을 만들려면 길이 변수의 값을 어떻게 해야할까요?
        힌트: 10의 배수 입니다.
      NEW Course 4 Artist Vars 6_instruction: |
        길이 변수를 정확한 위치에 넣어서 이 패턴을 그려보세요. 그 다음에 정확한 길이를 입력하면 됩니다.
        (힌트: 10의 배수입니다). \r
        \r
        길이 변수의 값을 한 번만 입력하면, 그 값을 계속 사용할 수 있다는 것을 알 수 있습니다.\r
        \r
        \r
      NEW Course 4 Bee For Loops 1_instruction: "각 꽃에서 꽃꿀을 모으기 위해서 반복 구조를 사용하세요."
      NEW Course 4 Bee For Loops 10_instruction: |
        수평 방향으로 얼마나 멀리 가야하는지
        제어할 수 있도록 "카운터" 변수를 반복 구조에 사용하세요.
      NEW Course 4 Bee For Loops 10a_instruction: |
        자 이제 도전해보세요! 이전 반복들에 배웠던 것들을 이용해서, 이 문제를 풀어보세요.
        기억하시죠?: 어떤 단계들로 진행되는지 이해하기 위해서, 여러 번 실행시켜 볼 수 있습니다.
      NEW Course 4 Bee For Loops 11_instruction: "이동하고 꽃꿀을 모으는데 반복 변수를 사용해보세요."
      NEW Course 4 Bee For Loops 2_instruction: |
        꿀벌이 모든 꽃꿀을 모울 수 있도록 할 수 있는 코드를 추가해보세요.
        이 퍼즐을 해결하기 위해서, 코드가 얼마나 많이 필요한지 잘 살펴보세요!
        (다음 퍼즐에서는 더 간단한 방법을 배우게 될 것입니다.)
      NEW Course 4 Bee For Loops 3_instruction: "아! \"반복\" 구조는 더 쉽게 할 수 있어요! 필요한 모든
        코드는 여기있으니, 어떻게 사용할지 살펴본 후에\n\"실행\"을 눌러 결과를 살펴보세요. \n"
      NEW Course 4 Bee For Loops 4 4_instruction: "이제 \"카운터\" 만큼 앞으로 이동시켜야 합니다.\n그
        다음에 \"카운터\" 만큼 꽃꿀을 얻으면 됩니다. 이 문제를 해결하기 위해서 \n2 개의 \"반복\" 블록을 사용하세요.\n"
      NEW Course 4 Bee For Loops 4_instruction: '"반복(~인 동안)" 구조에서 ??? 부분에, 꿀벌이 모아야
        하는 최대 꽃꿀의 양을 입력해 보세요. '
      NEW Course 4 Bee For Loops 5 5_instruction: |
        "반복(~인 동안)" 구조를 사용하기가 어렵나요?
        나머지 꽃꿀을 모을 수 있도록, 꿀벌을 도와주세요.
      NEW Course 4 Bee For Loops 5_instruction: |
        카운트다운하는데 "반복(~인 동안)" 구조를 사용할 수도 있습니다.
        이 꽃꿀을 5 부터 1 까지, 1씩 카운트다운하면서 모아보세요.
      NEW Course 4 Bee For Loops 6_instruction: |
        반복 함수의 마지막에 있는 수는 "증가값"이라고 부릅니다.
        반복 구조가 한 번 실행된 후에, 카운터에는 증가값만큼 더해집니다. 2만큼 증가시켜서
        이 꽃들로부터 모아보세요.
      NEW Course 4 Bee For Loops 7_instruction: |-
        자 이제, "카운터" 변수를 수학 블록과 함께 사용해보세요!
        어떻게하면 최대한 적은 블록들로, 이 정원을 돌아다닐 수 있을까요?
        이렇게 3, 6, 9, 12, 15 만큼씩 꽃꿀을 모으려면 어떻게 해야 할까요?
        "카운터" 변수를 사용하면 됩니다!\r
        \r
        기억하시죠?: 반복 구조가 실행되면, 한 번 실행 하고 난 후에 "카운터"
        변수의 값에 그 만큼 더합니다.
      NEW Course 4 Bee For Loops 8_instruction: |-
        잘 했어요! 꽃 꿀을 3, 6, 9, 12, 15 로 증가시키려면 어떻게 해야 할까요?\r
        힌트: 이전의 각 값에 얼마를 더하면 될까요?
      NEW Course 4 Bee For Loops 9_instruction: |
        반복 카운팅이 줄어드는 과정에서는 반복이 한 번씩 끝날 때마다 카운터 변수의 값이 줄어듭니다.
        15, 12, 9, 6, 3의 꽃꿀을 모으기 위해서는 카운터 변수에 더할 값이 어떻게 되어야 할까요?
      NEW Course 4 Bee For Loops 95_instruction: |
        여러분이 방금 만든 "반복" 조각을 살펴보세요.
        이 퍼즐을 해결하기 위해서는 얼마나 곱해야 할까요? 어떻게 되죠?
      NEW Course 4 Play Lab Params 11_instruction: "자유 시간입니다!\n도구 상자에 있는 모든 블록들을 이용해보세요.
        \n"
      NEW Course 4 Play Lab Params 5 5_instruction: |
        자! 도움없이 다시 한 번 해보세요.
        캐릭터들이 순찰하도록 하려면 어떻게 해야할까요?
      NEW Course 4 Play Lab Vars 4 5_instruction: '"이 코드가 어떤 작업을 하는 것일까요? 실행을 눌러 어떻게
        움직이는지 살펴보세요."'
      NEW Course 4 Play Labs For Loops 7a_instruction: |
        지금까지 배웠던 것들을 이용해서,
        펭귄이 카운트할 때 마다 한 번씩 앞으로 가도록 해보세요.
      NEW Course 4 Play Labs For Loops 8 Free Play_instruction: "자유 시간입니다!\n도구 상자에
        있는 모든 블록들을 이용해보세요. \n"
      NEW Course 4 Play Labs For Loops 8a_instruction: "도전과제: \"반복\" 구조를 사용해서 모든 캐릭터들이
        돌아다니면서 자신의 번호를 말하고 난 후,\n화면에서 사라지게 해보세요. \n"
      New Play Lab Project_instruction: |
        이야기나 게임을 만들어보세요!
        여러분의 코드는 프로젝트로 저장되어있기 때문에, 아무때나 실행시켜 볼 수 있습니다.
      Ninjacat Demo B (copy 1)_instruction: |
        \r
        Let’s begin by exploring a simple
        videogame, and then figuring out how it works. You can use the arrow keys
        to move the ninja left, right and jump - try to catch the unicorn and avoid
        the dragon!\r
        \r
        \r
        \r
          \r
        \r
      Ninjacat Demo B_instruction: |
        Let’s begin by exploring a simple videogame,
        and then figuring out how it works. You can use the arrow keys to move the
        ninja up and down - try to catch the unicorn and avoid the dragon! When you
        think you've figured out how the game works, click "Finish"
      Ninjacat Demo No Animate_instruction: |
        Let’s begin by exploring a simple videogame,
        and then figuring out how it works. You can use the arrow keys to move the
        ninja up and down - try to catch the unicorn and avoid the dragon! When you
        think you've figured out how the game works, click "Finish"
      October15 bat_instruction: |
        Freeplay: Here are some functions to play with.  Can
        you draw a bat?\r
      October15 ghost 1_instruction: |
        Give the ghost eyes, using the "draw a circle"
        function.
      October15 JoL 1_instruction: |
        Program the artist to design a face for your
        jack-o-lantern!
      October15 pumpkin 1_instruction: |
        Finish this jack-o-lantern by drawing the
        eyes and nose in any style you would like.
      October15 stars 1_instruction: |
        Use loops and the "random integer" block
        to fill the night sky with stars of different shapes and sizes.
      Overworld Avoid Monsters_instruction: "크리퍼와 마주치는 건 좋지 않습니다. 크리퍼를 조심스럽게 지나쳐서
        안전한 집에 도달하세요."
      Overworld Chop Tree_instruction: 나무는 매우 중요한 자원입니다. 나무로 많은 것들을 만들 수 있지요. 나무로
        걸어간 후 "블록 부수기" 명령을 이용해 나무를 베세요.
      Overworld Chop Trees_instruction: "해가 지기 전에 집을 지어야 해요. 집을 지으려면 나무가 많이 필요하죠.
        나무 3그루를 모두 베세요."
      Overworld Free Play 20x20_instruction: "축하해요! 모든 퍼즐을 완료했어요! 이제 여태까지 배운 모든 것을
        이용해서 채굴하고 건설하며 무언가 독특한 것을 만들어보세요."
      Overworld Free Play_instruction: "여러분은 이 배경에서 플레이하게 될 것입니다. 무엇을 지을지는 여러분이 선택하세요."
      Overworld House Frame - A_instruction: |
        우리의 집을 만들어보세요!
        이 곳이 좋아 보이네요. 흙 블럭들 위에 집의 기본 구조를 만들어 보세요.
      Overworld House Frame - C_instruction: |
        우리의 집을 만들어보세요!
        이 곳이 좋아 보이네요. 흙 블럭들 위에 집의 기본 구조를 만들어 보세요.
      Overworld House Frame B_instruction: |
        벽 하나가 완성되었습니다. 이제 바닥 만들기 계획에 따라서 나머지 집을 지어보세요!
        여기서 많이 반복해야 할 것 입니다.
      Overworld House Frame B2_instruction: |
        벽 하나가 완성되었습니다. 이제 바닥 만들기 계획에 따라서 나머지 집을 지어보세요!
        여기서 많이 반복해야 할 것 입니다.
      Overworld House Frame C_instruction: |
        벽 하나가 완성되었습니다. 이제 바닥 만들기 계획에 따라서 나머지 집을 지어보세요!
        여기서 많이 반복해야 할 것 입니다.
      Overworld House Frame Chosen_instruction: |
        여러분이 원하는 재료를 이용해서, 집의 나머지 부분을 완성해보세요.
        "repeat" 명령은 편리하게 사용할 수 있습니다.
      Overworld House Frame_instruction: "집을 만들어 보아요! 여기가 좋겠군요. 흙 블록들 위에 뼈대를 세우세요."
      Overworld Minecart Track_instruction: "땅속 자원을 많이 가지고 지상으로 돌아왔습니다. 이제 여러분의 집에서
        난 흙길을 따라 트랙을 건설합니다. 첫 번째 단계는 길을 깨끗이 하는 거예요. 길을 따라서 나무를 정리하세요."
      Overworld Move to Sheep_instruction: 두 번째 "앞으로 이동" 명령을 더해서 양에게 도달하세요.
      Overworld Place Wall_instruction: 모든 집은 벽을 짓는 것부터 시작합니다. "놓기"와 "앞으로 이동" 명령을
        반복문 안에 놓아서 집의 첫 번째 부분을 지어보세요.
      Overworld Plant Crops_instruction: "미리 계획을 짜는 것이 좋습니다. 물의 양쪽에 작물을 심으면 나중에 배가
        고프지 않아요."
      Overworld Powered Minecart_instruction: "잘했어요! 많은 자원을 모으고 안정적인 집을 지었어요. 이제 지도
        가장자리에서 여러분의 집 문까지 레일을 놓으세요."
      Overworld Shear Sheep_instruction: 양털 깎기 시간이에요! 두 마리 양에게서 양털을 채집하려면, "털 깎기"
        명령을 사용하세요.
      PDAlg 13-16 Sam Extension Puzzle_instruction: |
        Add a second parameter to "onscreen?"
        for Sam's y coordinate and update the function so it keeps him safe on all
        four sides.
      PDAlg 17-20 Luigi Extension Puzzle_instruction: |
        Without modifying your existing
        "cost" function, create a new "coupon" function that takes a pizza topping
        and coupon code and returns the cost of a pizza with that topping. If the
        coupon code is correct (you get to decide what it is), apply a 30% discount
        to the pizza.
      PDAlg 8-12 ex dr 1_instruction: |
        The definition in this Design Recipe doesn't
        match both examples. Test each example to see which is failing, and then fix
        the definition to match.
      PDAlg 8-12 ex dr 2_instruction: |
        This student has created two examples for
        the function "apples" but something's not quite right. How would you direct
        this student to correct their mistake?
      PDAlg 8-12 Rocket Height Puzzle_instruction: |
        Let's write a "rocket-height"
        function with simple acceleration. Write a function that ensures the rocket
        is at 15 meters at 1 second, 45 meters at 2 seconds, 95 at 3 seconds, and
        165 at 4 seconds.
      PDAlg Big Game History_instruction: |
        Now that you've played through a Big
        Game level you should see a new entry in your history. Click the Version History
        button and you should see at least one version. Each time you go back to a
        Big Game level you'll get a new record in your version history that you can
        revert back to.
      PDAlg Big Game Remix_instruction: |-
        Here's your Big Game as you last left it.
        Try clicking the Remix button to spin off a new remix of your project.\r
        \r
        Any
        changes you make after you click Remix will be saved on your new remix and
        not on your main Big Game.
      PDAlg Design Recipe Delete_instruction: |
        Click the delete button to get rid
        of this function, then try creating and deleting a few of your own.
      PDAlg Design Recipe Examples_instruction: |
        The definition in this Design Recipe
        doesn't match both examples. Test each example to see which is failing, and
        then fix the definition to match.
      PDAlg Design Recipe Required_instruction: |
        Complete the Design Recipe for the
        "eggs" function, making sure to create and test your examples.
      PDAlg Updates Cond_instruction: |
        When you went to PD in the summer, the Conditional
        block that you were introduced to was black and allowed any data type to be
        used. This proved to be confusing, given that every other function we've
        seen always produces the same type of data. To help make conditionals clearer
        and more consistent we've replaced the single black block with a separate
        block for each data type.
      PDAlg Updates Errors_instruction: |
        Run the provided program and use the error
        messages to try and track down the bugs.
      PDAlg Updates Space_instruction: |
        Making use of limited programming space (especially
        on small screens) is challenging with a block based language. To help with
        this we've added a few features. Experiment with this provided code to see
        how the space can be manipulated to deal with larger programs.
      PDK5 Conditionals 1_instruction: |
        Purple flowers may have either 1 or 0 nectar,
        but you don't know which one! Be careful not to collect nectar from a purple
        flower if it doesn't have any. Check if the nectar is equal to 1 by using
        the if block.
      PDK5 Conditionals 2_instruction: "Try this puzzle that uses conditionals and\nloops
        together. Use the \"if\" block to decide when to turn. Hint: you only\nneed
        one more block to complete this puzzle. \n"
      PDK5 Events 1_instruction: "So far all of the programs we've written are executed\nin
        order from top to bottom. In this puzzle, we'll use \"Events\" to respond\nto
        an action on demand. Make the octopus say \"Hello\" only when you click\non
        the Octopus. \n"
      PDK5 Functions 1_instruction: |
        Hello. Me zombie artist. Me love drawing! Help
        me draw the square glasses.  Hint:  the bridge between the glasses is 25 pixels
        shorter than the square length.
      PDK5 Functions 2_instruction: |
        함수들로 새로운 블록들을 만들어낼 수 있습니다!
        "사각형 그리기" 라는 함수에 사각형 1개를 그리는 블록들을 넣었습니다.
        "사각형 그리기" 함수를 이용해서 안경을 그려보세요. 사각형들은 75 픽셀 만큼 떨어져 있습니다.
      PDK5 Loops 1_instruction: "Instead of using 5 \"move forward\" blocks, use\nthe
        \"repeat\" block with a \"move forward\" block inside of it. In computer\nscience,
        this is called a \"loop.\" \n"
      PDK5 Loops 3_instruction: |
        Here's another puzzle to practice loops. What happens
        if you use the repeat block to run the code already provided on the workspace
        4 times?
      Pixelation - Lesson 14 - Fix bit offset v.2_instruction: |
        Something happened
        to the bits in this image! Find the error and fix it! Hint: a few extra bits
        were added. You should only need to remove some bits.
      Pixelation - Lesson 14 - Fix bit offset_instruction: |
        A single extra bit was
        inserted into the stream of bits that make up the C of the Code.org logo.
        That extra bit bumps all of the other bits down the line which makes the logo
        look messed up. Hunt down the extra bit and remove it to fix the Code.org
        logo.
      Pixelation - Lesson 14 - Fix the error_instruction: |
        Something happened to
        the bits in this image!  Find error and fix it!  Hint: a few extra bits were
        added.  You should only need to remove some bits.
      Pixelation - Lesson 14 - Make the Letter A_instruction: |
        Make a 3x5 letter
        'A'. The widget is setup with the incorrect dimensions. Your first task
        is to set the second byte to the 8-bit binary code for 5: 0000 0101. Then
        start entering pixel data.
      Pixelation - Lesson 14 - Make your own B and W Image_instruction: |
        Now make
        your own image! We've started you off with a 10x10 canvas but you can make
        it whatever size you want. Happy pixeling!
      Pixelation - Lesson 14 - Make your own B&W Image_instruction: |
        Now make your
        own image! We've started you off with a 10x10 canvas but you can make it
        whatever size you want.  Happy pixeling!
      Pixelation - Lesson 15 - Color Free Play_instruction: |
        Requirements: The icon
        must be 16x16 pixels. You must use the Pixelation Widget to encode the bits
        of color information. The image must be encoded with at least 12 bits per
        pixel.
      Pixelation - Lesson 15 - Color Shades 4x4_instruction: |
        We start you out with
        the 4x4 image Maddie created in the video. Your task is to fill a 4x4 grid
        with colors using 12-bits per pixel. Here are the requirements: Row 1 - fill
        with shades of red. Row 2 - shades of green. Row 3 - shades of blue. Row 4
        - shades of gray.
      Pixelation - Lesson 15 - Color Shades_instruction: |
        We start you out with the
        row of shades of red that Maddie created in the video. Experiment with 6-bit
        color by filling in the bottom row of the image with shades of a different
        color. Here is an example with some shades of blue. Try your own color!
      Pixelation - Lesson 15 - Complete 3-bit color_instruction: |
        We start you with
        the 4x2 image Maddie was creating, but we've left out the last two squares.
        Finish off the image by figuring out which two colors are missing and encode
        them.
      Pixelation 2_instruction: |
        Something happened to the bits in this image!  Find
        error and fix it!
      Pixelation 4x4 Empty_instruction: |
        The width and height are now encoded in
        the pixel data. Can you figure out how to adjust the dimensions?
      Pixelation Bee_instruction: |
        This larger image of a bee encodes color with
        12 bits per pixel, but viewing in hex makes it easier to see the color of
        each pixel. If you switch to binary mode - hold on to your hat - it's a lot
        of bits. Here's another mind-blowing thing to try: slide the bits per pixel
        up to 24 bits per pixel. What happens? Can you explain this behavior?
      Pixelation Flappy_instruction: |
        Here is a bigger image at 9 bits per pixel.
        With 9 bits per pixel you can express 512 different colors. Click through
        to see the next image which is even more sophisticated, but easier to understand.
      Play Lab Rocket 1_instruction: |
        A rocket blasts off, traveling at 15 meters
        per second... press "Run" to see how this word problem looks as an animation.
      Play Lab Rocket 2_instruction: |
        We've started the Design Recipe for rocket-height
        using the contract and examples you just wrote. Complete the function definition
        for rocket-height and run your animation.
      Play Lab Rocket 2B_instruction: |
        A rocket blasts off, traveling at 15 meters
        per second. Using the Design Recipe, write a function called rocket-height
        that takes in a number of  seconds that have passed since the rocket took
        off, and produces the height of the rocket at that time.
      Play Lab Rocket 3_instruction: |
        Awesome, now can you update that function so
        that our rocket moves more quickly? Make sure to update the purpose statement,
        examples, and function definition to launch a rocket at 40 meters per second.
      Play Lab Rocket 4 (copy 1)_instruction: |
        Real rockets start off slowly and
        gain speed over time - let's make ours do the same! Write an exponential
        function that describes a rocket that travels at "seconds" squared meters
        per second.
      Play Lab Rocket 4_instruction: |
        Real rockets start off slowly and gain speed
        over time - so let's add some simple acceleration to ours! Can you write
        a function that describes a rocket that is at 10 meters at 1 second, 40 meters
        at 2 seconds, 90 meters at 3 seconds, 160 at 4 seconds and so on?
      Play Lab Rocket 5_instruction: |
        Much better, but let's write one more function
        with simple acceleration. This time the rocket should be 15 meters at 1 second,
        45 meters at 2 seconds, 95 at 3 seconds, and 165 at 4 seconds.
      Play Lab Rocket Free Play_instruction: |
        Free Play: Experiment with your rocket-height
        function to make the rocket fly in different ways. Click "Finish" when you
        are done.
      Poorva-test_instruction: |
        Here are regular instructions for a level. There
        is nothing fancy going on here.
      Quantum Bee - Ryan_instruction: |
        이 구름들이 짜증나게 하네요! 어떤 구름 아래에만 꽃이 있습니다.
        구름들을 하나씩 모두 검사해서 꽃인 경우에만 꽃꿀을 뽑아야 합니다.
      Quantum Bee_instruction: |
        자주색 꽃들에는 꽃꿀이 1 또는 0 인데,
        어떤 꽃이 1이고 0인지 알 수 없습니다! 자주색 꽃에 꿀이 없으면 뽑지 않도록 주의하세요.
        만약(if) 블록을 사용해서 꽃꿀이 1인지 확인해보면 됩니다.
      Ryan - 4-5 Bee Conditionals 2_instruction: "꿀벌이 꽃꿀을 원합니다. 모두 꽃은 아니기 때문에, 안개
        구름 아래에 꽃이 숨어있는지 모두 살펴보아야 합니다. 꽃이면 꽃꿀을 모으면 됩니다."
      Ryan - Bee Conditionals_instruction: |
        꿀벌은 지금 꽃꿀이 필요합니다.
        모두 꽃은 아니기 때문에, 안개 구름이 있는 모든 곳에서 꽃이 숨어있는지 확인해 보아야 합니다.
        꽃이 있으면 꿀을 모으면 됩니다.
      Ryan Test Locked Blocks_instruction: |
        "순찰" 함수가 있습니다.
        함수를 수정해서 고양이가 400 픽셀 위로 이동 했다가, 다시 400 픽셀 아래로 이동하게 해보세요.
      Ryan's clone of C4S15P10_instruction: "We've added one last function for you.\n\\r\n\\r\nUse
        an \"if\" statement to program your game to call the \"level_up\"\nfunction
        only when \"player_score\" becomes greater than a certain number.\\r\n\\r\nFor\nexample:
        \"player_score\" > 6\\r\n\\r\nPlay the game, and make it past level\n4 to
        move to the next puzzle. "
      Sam the Butterfly 1 (copy 1)_instruction: |
        This butterfly is named Sam, and
        the game area is Sam’s yard. Sam's yard is 400 pixels wide by 400 pixels
        tall! As you can see, Sam is free to walk around the yard, and the coordinates
        at the top of the screen update to tell you his location. Use the arrow keys
        to move sam around his yard. Help Sam collect all of the flags to move on.
      Sam the Butterfly 1_instruction: |
        This bat is named Sam, and the game area
        is Sam’s yard. Sam's yard is 400 pixels wide by 400 pixels tall! As you can
        see, Sam is free to walk around the yard, and the coordinates at the top of
        the screen update to tell you his location. Click "Run" and then use the
        arrow keys to move Sam around his yard, making note of Sam's coordinates
        at different locations. Click "Finish" when you're ready to move on.
      Sam the Butterfly 2_instruction: |
        Sam's mom wants to make sure that she can
        always see at least a bit of him, so lets write some functions that help make
        sure he doesn't go too far out of the yard. Here's a function called safe-left?
        - it should take a Number for its domain that represents Sam's x-coordinates
        and return true if he's completely visible on screen. If your function works,
        Sam shouldn't be able to leave the yard from the left side.
      Sam the Butterfly 3_instruction: |
        In the last puzzle we kept Sam from leaving
        on the left, now let's do the same thing on the right. Complete the safe-right?
        function to make sure Sam can't go off the right side of the screen.
      Sam the Butterfly 4_instruction: |
        Huh, we can keep Sam from leaving on the
        left, or we can keep him from leaving on the right, but how can we keep him
        safe from leaving both directions? Try using the and block to program the
        function on-screen? to check if Sam is safe-left? and safe-right?
      Sam the Butterfly 5_instruction: |
        Free Play: Awesome, we've kept Sam safe
        on the left and right! Use this free play stage to experiment with your functions
        and further improve onscreen?
      Sam the Butterfly 6_instruction: |
        We've added a new parameter "y" to the
        "on-screen?" function. Update the function so that it checks that "safe-left?"
        AND "safe-right?" AND "safe-up?" are all true. When you've fixed the
        function, try going out of the yard from the left, right, and top sides.
      Sam the Butterfly 7_instruction: |
        Only one last direction to worry about! Create
        a "safe-down?" function and update the "on-screen?" function so that it
        checks up, down, left, and right.
      Sam the Butterfly Complete_instruction: |
        Only one last direction to worry about!
        Create a "safe-down?" function and update the "on-screen?" function so
        that it checks up, down, left, and right.
      scrat 16 (copy 1)_instruction: |
        Acorn! Acorn! Acorn! Use an "if" block to
        get me there with the fewest number of blocks.
      scrat 16_instruction: |
        도토리! 도토리! 도토리! "만약" 블럭을 이용하면서,
        블럭들을 최대한 적게 사용해서 도토리가 있는 곳으로 보내주세요.
      scrat 17 (copy 1)_instruction: |
        Ok, let's do that again for practice - this
        isn't very different, but watch out for the <insert obstacle name for Scrat>!
      scrat 17_instruction: "좋아요, 다시 한 번 해봅시다. - 크게 다르지는 않지만, 벽을 조심해야 해요!"
      scrat 18 (copy 1)_instruction: |
        The "If-else" blocks checks a condition,
        and then does one thing OR another. To get me to the acorn try to use this
        new block.
      scrat 18_instruction: '"만약(if)-아니면(else)" 블럭은 조건을 검사하고, 두 가지 중 하나만 실행합니다. 도토리가
        있는 위치로 이동시키기 위해 이 새로운 블럭을 사용하세요.'
      scrat 19 (copy 1)_instruction: |
        One more practice of the "if-else" block,
        can you get it right on your first try?
      scrat 19_instruction: '"조건/선택" 블록을 다시 한 번 사용해 보겠습니다. 한 번에 성공할 수 있겠어요?'
      scrat 20_instruction: "좀 더 복잡한 미로를 해결할 수 있도록 3개의 블럭만 더 더해줄 수 있나요? 그렇게 해준다면,
        길이가 얼마나 길던지 상관없이 꺽인 길에서 회전할 수 있게 됩니다. 빨리 빨리요! 얼음이 녹고 있어요!"
      SpecialFrozenLevel_instruction: "여러분은 이제 진짜 화가가 된 것 같아요! 겨울왕국을 만들어 보세요."
      Standalone_Artist_1_instruction: |
        화가 퍼즐에 오신 것을 환영합니다.
        처음으로 오른쪽으로 이동 블럭과 앞으로 이동 블럭을 이용해서 간단한 사각형을 만들어 보겠습니다.
        한 변의 길이는 정확히 100 픽셀이 되어야 합니다.
      Standalone_Artist_2_instruction: 120도, 60도의 각과 150 픽셀 만큼의 길이로 이 다이아몬드를 그려보세요.
      Standalone_Artist_3_instruction: |
        100 픽셀 길이의 선을 60 도 만큼 씩 회전해 그리면서
        육각형을 그려보세요.
      Standalone_Artist_4_instruction: "이제 반복(loop) 이라는 새로운 블록을 이용할 수 있습니다. 이 블록은
        원하는 명령어들을 반복시켜줄 것입니다. 이 명령어들을 6번 반복하면 어떻게 될까요?"
      Standalone_Artist_5.5_instruction: "다이아몬드 모양을 반복 블럭 안에 넣어서 회전시키면서 아주 쉽게 코드를
        만드는 방법을 잘 보세요. 순서대로 실행시켜야하는 명령어들을 12번 반복시킬 수 있습니다. 힌트: 다이아몬드 반복(loop) 를 30도만큼
        회전시키면 됩니다. 다이아몬드를 또 그릴 필요가 없습니다."
      Standalone_Artist_5_instruction: "이 다이아몬드 모양을 이용해서 꽃을 그리려면 반복(loop) 을 몇 번 시켜야
        할까요?"
      Standalone_Artist_6_instruction: "이 6각형 코드를 반복적으로 이용해서 디자인 해보세요. 한 번 실행할 때마다
        몇 도를 회전시켜야 할까요? 힌트: 원의 각도를 반복시키려고 하는 횟수로 나누면 됩니다."
      Standalone_Artist_7_instruction: "함수는 한번 만들어둔 것을 다시 사용하는 프로그래밍 방법입니다. 이 함수는
        꽃을 그려주는데, 이 함수를 이용하면 원하는 만큼의 꽃을 편리하게 그릴 수 있습니다. 이 함수와 점프 블럭을 이용해서 이 꽃들을 그려주세요.
        힌트: 꽃들은 150 픽셀만큼 떨어져 있습니다."
      Standalone_Artist_8_instruction: '"모양 그리기" 라는 이름의 6각형 그리기 함수 블럭이 있습니다. 일단 먼저
        코드를 실행시켜 어떻게 실행되는지 살펴보고, 실험해 보세요. 사각형, 삼각형, 8각형을 그릴 수 있겠어요?'
      Standalone_Artist_9_instruction: "자 이제 계속해서, 원하는 그림을 마음껏 그려보세요! 원하는 것이 어떤 것이든지,
        빈 함수를 이용해 마음대로 만들고 사용할 수 있습니다."
      Standalone_Artist_v2_instruction: |
        화가 퍼즐에 오신 것을 환영합니다.
        처음으로 오른쪽으로 이동 블럭과 앞으로 이동 블럭을 이용해서 간단한 사각형을 만들어 보겠습니다.
        한 변의 길이는 정확히 100 픽셀이 되어야 합니다.
      template test_instruction: what up
      Test Play Lab_instruction: This is a test play lab level.
      test_sarah_instruction: hi
      Text Compression 1_instruction: |
        Look for patterns (repeated words or phrases)
        in the text. Enter the patterns you see into the dictionary on the right.
        As you type entries into the dictionary, the symbol for the entry is inserted
        into the text in place of the pattern.
      Total Artist Clone Me_instruction: |
        Freeplay: Here are the functions you've
        written, and some more for you to play with. Draw something awesome! Play
        with the pen width to see how different your drawings look!
      U1L10 NetSim numbers with decimal_instruction: |
        Invent and test a protocol
        for encoding and sending text messages. Your protocol must include the letters
        a-z, spaces, and common punctuation marks. You may add additional characters
        if you wish. See the worksheet handed out by your teacher for more detailed
        instructions!
      U1L11 NetSim numbers with Ascii_instruction: |
        Work with a partner or in a small
        team to develop a protocol that allows you to send formatted text. See the
        worksheet handed out by your teacher for more detailed instructions!
      U1L13 Text Compression_instruction: |
        Look for patterns (repeated words or phrases)
        in the text. Enter the patterns you see into the dictionary on the right.
        As you type entries into the dictionary, the symbol for the entry is inserted
        into the text in place of the pattern.
      U1L4 NetSim SendAB_instruction: "Develop, document, and test a protocol that\nallows
        you to use Internet Simulator to relay a message. See the worksheet\nfor more
        detailed instructions.  \n"
      U1L8 NetSim numbers no decimal_instruction: Default instructions
      U1L8 NetSim numbers with decimal_instruction: |
        With your partner, develop a
        protocol or set of rules for communicating a drawing using only bits. See
        the worksheet handed out by your teacher for more detailed instructions!
      U2 frequency caesar_instruction: "소개"
      U2 frequency random sub_instruction: "소개"
      U2 vigenere cipher_instruction: "소개"
      U2 Vigenere_instruction: Test
      U2L04 - NetSim Routers with Addresses_instruction: |
        Send messages with your
        classmates (Click to see full instructions)
      U2L05 - NetSim - Packets and Building TCP_instruction: |-
        Develop a Protocol
        for Reliably Sending a Message.\r
        \r
        Constraints:\r
        - Packets may contain
        only 6 characters\r
        - Packets may drop with small probability\r
        - Packets
        may not arrive in order
      U2L10 NetSim Automatic DNS_instruction: |
        In this version of the Internet Simulator,
        a Domain Name System (DNS) is provided for you and knows the IP addresses
        of all connected computers. Send a message in the form GET [hostname] to the
        DNS service at address <yourRouterNumber>.15 to get a student's address.
      U2L10 NetSim Manual DNS_instruction: |
        In this version of the simulator you
        can't see the other students' addresses.  Instead, one of you must act as
        a name service, to help share addresses with each other.
      U2L14 frequency random_instruction: Test
      U2L2 NetSim Hub Mode_instruction: |
        Now use the Internet Simulator to send the
        battleship moves. For setup, join a Room with your group, and add ships to
        your paper board for each opponent. When playing, all communication must be
        done through the tool, so no talking, but have fun!\r
      U2L3 NetSim Hub Mode_instruction: |
        Use the Internet Simulator to test out your
        group's binary communication protocol for battleship. How short can you make
        the message and response?
      U2L4 NetSim Routers Addresses_instruction: |-
        For this activity, connect to a
        router with the others in your group. Important note: The router will only
        properly route messages where the first 4 bits are the To: address and the
        second 4 bits are the From: address.\r
        \r
        [TODO: NetSim needs to support
        hierarchical addresses. For now, level is set up for 4 bit to and from addresses]
      U2L5 NetSim Classroom Internet_instruction: |
        For this activity, connect to
        a router with the others in your group. The Internet Simulator now provides
        a place for you to put the To and From addresses, so you don't have to type
        out the bits manually.\r
        \r
      U2L7 NetSim Need for Packets_instruction: |
        Transfer your favicon to a partner
        across a network in which the larger a packet grows, the more likely it is
        to be dropped.
      U3 - Arrays - appendItem_instruction: |
        Create an array of odd numbers 1-11
        by using appendItem. (Click to see full instructions)
      U3 - Arrays - assignment_instruction: |
        Use indexes to change the values in
        this array from 1 to 0. (Click to see full instructions)
      U3 - Arrays - assignment2_instruction: |
        Calculate the sum of three values stored
        in an array. (Click to see full instructions)
      U3 - Arrays - assignment3_instruction: |
        Increase the value of each value in
        the randomly generated array by 1. (Click to see full instructions)
      U3 - Arrays - createFirstArray_instruction: |
        Create an array of the even numbers
        from 0 to 10 and display its contents with console.log. (Click to see full
        instructions)
      U3 - Arrays - Demo App_instruction: |
        Use the "My Favorite Things" app. How
        might this app be making use of an array? (Click to see full instructions)
      U3 - Arrays - expressionsAsIndexes_instruction: |
        Write a program that displays
        a randomly chosen color from the array. (Click to see full instructions)
      U3 - Arrays - favThings addItem_instruction: |
        Write code that allows a user
        to add their own favorite things to the list. (Click to see full instructions)
      U3 - Arrays - favThings bounds_instruction: |
        Add if statements to your event
        handlers that prevent the global index from going out of bounds. (Click to
        see full instructions)
      U3 - Arrays - favThings Counting Variable_instruction: |
        Create a global variable
        for the current index and use it to display the first item in the array. (Click
        to see full instructions)
      U3 - Arrays - favThings createArray_instruction: |
        Create an array of words
        describing your favorite things. (Click to see full instructions)
      U3 - Arrays - favThings firstOutput_instruction: |
        Use setText to display the
        first item in the array. (Click to see full instructions)
      U3 - Arrays - favThings giveIDs_instruction: |
        Give your UI elements descriptive
        and meaningful IDs. (Click to see full instructions)
      U3 - Arrays - favThings keepPlaying_instruction: |
        Make any other improvements
        you want! (Click to see full instructions)
      U3 - Arrays - favThings Next_instruction: |
        Write code that allows the user
        to move forward through your list by clicking the "Next" button. (Click
        to see full instructions)
      U3 - Arrays - favThings Prev_instruction: |
        Write code that allows the user
        to move backward through your list by clicking the "Last" button. (Click
        to see full instructions)
      U3 - Arrays - favThings template_instruction: |
        Give your UI elements descriptive
        and meaningful IDs. (Click to see full instructions)
      U3 - Arrays - globalVariableIndex_instruction: |
        Give your UI elements descriptive
        and meaningful IDs. (Click to see full instructions)
      U3 - Arrays - indexPractice_instruction: |
        Write the contents of the array to
        the screen in numerical order. (Click to see full instructions)
      U3 - Arrays - insertingItems_instruction: |
        Insert items into an array to form
        a complete sentence. (Click to see full instructions)
      U3 - Arrays - insertionErrors_instruction: |
        Run each command that references
        indexes that are out of bounds and observe the results. (Click to see full
        instructions)
      U3 - Arrays - introIndex_instruction: |
        Display the first and last element in
        the array. Display the number 5 from the array. (Click to see full instructions)
      U3 - Arrays - length_instruction: |
        Use list.length to determine the length
        of each array. (Click to see full instructions)
      U3 - Arrays - lengthMinus1_instruction: |
        Use list.length - 1 to log the last
        item in the array to the console. (Click to see full instructions)
      U3 - Arrays - remove_instruction: |
        Remove items from an array to form a complete
        sentence. (Click to see full instructions)
      U3 - Arrays - stringsInArrays_instruction: |
        Write a sentence word by word by
        adding strings to an array. (Click to see full instructions)
      U3 - Canvas - 200dots_instruction: |
        Add a loop to your program that draws 200
        dots on your canvas. (Click to see full instructions)
      U3 - Canvas - appendToArray_instruction: |
        Create an array to store each event
        parameter. Append each event parameter to this array within your event handler.
        (Click to see full instructions)
      U3 - Canvas - changeToMouseMove_instruction: |
        Change your program so that dots
        are drawn at the location of the mouse as the user moves the mouse on the
        canvas. (Click to see full instructions)
      U3 - Canvas - clickToAdd_instruction: |
        Change your program so that dots are
        added to the canvas when the user clicks on it. (Click to see full instructions)
      U3 - Canvas - delete_instruction: |
        Create a button that deletes the drawing
        by clearing the canvas and removing all stored values. (Click to see full
        instructions)
      U3 - Canvas - draw at click point_instruction: |
        Change your program so that
        dots are drawn at the location of the mouse click. (Click to see full instructions)
      U3 - Canvas - freePlay_instruction: |
        Extend the functionality of one of the
        effects, or create an entirely new one of your own. (Click to see full instructions)
      U3 - Canvas - introCanvas_instruction: |
        Add a canvas to your app and set it
        to be the active canvas. Then add a large dot to your canvas. (Click to see
        full instructions)
      U3 - Canvas - movementFunction fix Orig_instruction: |
        Modify the "Original"
        button event handler so that it takes the movement of the mouse into account.
        (Click to see full instructions)
      U3 - Canvas - movementFunction_instruction: |
        Write a function that takes the
        movement of the mouse as input and generates a line width as output. (Click
        to see full instructions)
      U3 - Canvas - One Dot sprayPaint_instruction: |
        Write code that redraws your
        image using a dot whose x and y locations use offsetX and offsetY with a small
        random value added. (Click to see full instructions)
      U3 - Canvas - redrawOriginal_instruction: |
        Write a function that processes
        your array, redrawing the dots as they originally appeared. (Click to see
        full instructions)
      U3 - Canvas - redrawRandom_instruction: |
        Set up a button and event handler
        for the random function. (Click to see full instructions)
      U3 - Canvas - redrawRandom2_instruction: |
        Write a function that processes your
        array, redrawing every dot with a random size. (Click to see full instructions)
      U3 - Canvas - shiftKey_instruction: |
        Add an if statement to your event handler
        so dots are only drawn when the shift key is pressed. (Click to see full instructions)
      U3 - Canvas - sketch_instruction: |
        Write code that redraws your image using
        a sketch effect. (Click to see full instructions)
      U3 - Canvas - sprayPaint_instruction: |
        Update the spray paint code so that
        it redraws your image using multiple random dots instead of using a nested
        for loop. (Click to see full instructions)
      U3 - Canvas - transparentDots_instruction: |
        Change the colors of your dots
        so they have a fully transparent stroke and partially transparent fill. (Click
        to see full instructions)
      U3 - Canvas - usingOffsetXY_instruction: |
        Add a console.log command inside
        the function of your event handler. Use it to display the event parameter.
        Click on the screen to see the contents of the event parameter (Click to see
        full instructions)
      U3 - Conditional Basics - 6_instruction: |
        Add a setText after the if statement
        to "Nope. Guess again." (Click to see full instructions)
      U3 - Conditionals - Combine AND and OR_instruction: |
        Write an if statement
        that uses AND and OR to display "Time to go to school!" if it's not the
        weekend and the user is under 18. (Click to see full instrucitons.
      U3 - Conditionals - Combine AND OR and NOT_instruction: |
        Write an if statement
        that uses AND and OR to display "Time to go to school!" if it's not the
        weekend and the user is under 18. (Click to see full instructions.)
      U3 - Conditionals - Combine AND OR Simple_instruction: |
        Write an if statement
        that uses AND and OR to display "Sleep in!" if it's the weekend and the
        user is a teenager. (Click to see full instructions.
      U3 - Conditionals - intoOr_instruction: |
        Add 2 if statements that use the OR
        operator. (Click to see full instructions)
      U3 - Conditionals - introAND_instruction: |
        Add 2 if statements that use the
        OR operator. (Click to see full instructions)
      U3 - Conditionals - Simple AND_instruction: |
        Write an if statement that uses
        AND to display "You are a teenager." if the user enters an age between 13
        and 19. (Click to see full instructions)
      U3 - Conditionals - Simple OR_instruction: |
        Write an if statement that uses
        OR to display "It's the weekend!" if the user enters a weekend day at the
        prompt. (Click to see full instructions)
      U3 - Design Mode - Console Log_instruction: |
        Update the ID names and `console.log`
        messages to match the correct button. (Click to see full instructions.)
      U3 - Design Mode - Layers and Delete_instruction: |
        Fix the layout of the bullseye
        game. (Click to see full instructions)
      U3 - Design Mode - Multi Screens 2_instruction: |
        Make a 2 screen app which
        can switch back and forth between a black screen and a white screen using
        buttons. (Click to see detailed instructions.)
      U3 - Design Mode - Multi Screens_instruction: |
        Make a 2 screen app with a black
        screen and a white screen. (Click to see detailed instructions)
      U3 - Design Mode - Other Events_instruction: |
        Delete the button and make the
        image move to a random location when you click on it. (click to see detailed
        instructions)
      U3 - Design Mode - WTF Console Log_instruction: |
        Add a 3 console.log messages
        and test them out. (Click to see full instructions.)
      U3 - Design Mode -Recreate Beyond Buttons_instruction: |
        Recreate the game from
        the "Chaser Game" with a Welcome Screen and Game Over Screen. (Click to
        see full instructions.)
      U3 - Design Mode 1_instruction: |
        Add a large red button to your screen using
        Design Mode. (Click for full instructions.)
      U3 - Dice - Dropdown and Score_instruction: |
        Add guess and score to the Dice
        Game (Click to see full instructions)
      U3 - Dice - Dropdown with Strings_instruction: |
        Add a dropdown for difficulty
        level that prints the difficulty level in the console. (Click to see full
        instructions)
      U3 - Dice - If_instruction: |
        Show different die images for the random number
        generated. (Click to see full instructions)
      U3 - Dice - Nested_instruction: |
        Use nested if statements to make the scoring
        different for the different game levels. (Click to see full instructions)
      U3 - High Low - Debug_instruction: |
        Debug the order of the conditionals so
        that it will actually tell the user when their guess is close. (Click to see
        full instructions)
      U3 - High Low - Dropdown_instruction: |
        Add a dropdown for their guess instead
        of promptNum (Click to see full instructions)
      U3 - High Low - Else if_instruction: |
        Add an else-if statement in order to
        tell the user if their guess is high or low instead of just wrong. (Click
        to see full instructions)
      U3 - High Low - Else_instruction: |
        Add an else statement so that the program
        will tell the user when they are right and when they are wrong. (Click to
        see full instructions)\r
      U3 - High Low - If_instruction: |
        Add code to the if statement that indicates
        the user guessed the secret number. (Click to see full instructions)
      U3 - Keys - Add Image URLs_instruction: |
        Add image URLs to your array. Replace
        the text area with an image and setText with setImageURL. Then test your app!
        (Click to see full instructions)
      U3 - Keys - Buttons and Keys_instruction: |
        Have the program respond the same
        way for both clicking images on the screen and hitting the up and down keys
        on the keyboard. (Click to see full instructions)
      U3 - Keys - Demo App_instruction: |
        Play with the image scroller. Press the
        left and right arrows to progress through the images.
      U3 - Keys - Final Image Scroller_instruction: |
        Update the image scroller to
        respond to buttons and key presses. (Click to see full instructions)
      U3 - Keys - Functions_instruction: |
        Write doUpArrow and doDownArrow functions
        and call the functions instead of duplicating the code. (Click to see full
        instructions)
      U3 - Keys - Key Up and Down_instruction: |
        Try out the keyup and keydown events
        to see how they are different from keypress. (Click to see full instructions)
      U3 - Keys - Multiple Keys_instruction: |
        Play a different sound when the down
        arrow is pressed. (Click to see full instructions)
      U3 - Keys - Practice Adding Images with URL_instruction: |
        Add image URLs to
        your image array. Test out the add button. Style your image scroller. (Click
        to see full instructions)
      U3 - Keys - Words to Images_instruction: |
        Add image URLs to your image array.
        Test out the add button. Style your image scroller. (Click to see full instructions)
      U3 - Loops -  9 Part 2_instruction: |
        Change the boolean expression for the
        while loop so that it will roll until both dice are greater than 3. (Click
        to see full instructions)
      U3 - Loops -  Complex Condition_instruction: |
        Change the boolean expression
        for the while loop so that it will stop when both dice are greater than or
        equal to 5. (Click to see full instructions)
      U3 - Loops - 1_instruction: |
        Change the condition for the while loop to check
        if the variable num is less than 90. (Click to see full instructions)
      U3 - Loops - 10_instruction: |
        Write a program that simulates the rolling of
        two dice. Roll the dice repeatedly until the sum of the dice is either 7 or
        11.
      U3 - Loops - 11_instruction: |
        Fix the condition so that it keeps rolling the
        die as long as the value is not a 2 or a 3 instead of rolling infinitely.
        (Click to see full instructions)
      U3 - Loops - 12_instruction: |
        Change the code so that it prints the string
        "Hi" 5 times. (Click to see full instructions)
      U3 - Loops - 13_instruction: |
        Update the code to count up by 3 instead of 1.
        (Click to see full instructions)
      U3 - Loops - 14_instruction: |
        Change the loop condition to prevent the infinite
        loop and stop counting once the count is past 30. (Click to see full instructions)
      U3 - Loops - 15_instruction: |
        Count the number of times the sum of the dice
        is 12. (Click to see full instructions)
      U3 - Loops - 16_instruction: |
        Find out how many times you have to roll to get
        the sum of 7 100 times (Click to see full instructions)
      U3 - Loops - 2_instruction: |
        Try creating an infinite loop using !=, > and
        <. (Click to see full instructions)
      U3 - Loops - 3_instruction: |
        Change the if statement to a while loop so the
        program will run until it rolls a 6. (Click to see full instructions)
      U3 - Loops - 4_instruction: |2
         Use the Debug Commands to make a list of all
        the values rolled before a 6. (Click to see full instructions)
      U3 - Loops - 5_instruction: |
        Add code inside the while loop which will update
        the variable num so that the condition will eventually become false. (Click
        to see full instructions)
      U3 - Loops - 6_instruction: |
        Fix the problem so the loop will run at least
        once. Change the initial value of num to a dummy value such as -1. (Click
        to see full instructions)
      U3 - Loops - 7_instruction: |
        Without adding any lines of code, reorder the
        code so that it prints all the values of num. (Click to see full instructions)
      U3 - Loops - 8_instruction: |
        Debug which number is not getting printed and
        add a write statement to display that value. (Click to see full instructions)
      U3 - Loops - 9_instruction: |2
         Modify the condition so that it keeps rolling
        as long as both are less than 3. (Click to see full instructions)
      U3 - Loops - Continue_instruction: |2
         Use the Debug Commands to to make a list
        of all the values rolled before a 6. (Click to see full instructions)
      U3 - Loops - minus = operator_instruction: |
        Update the code to use the -= operator
        to count from 30 down to 0 by 3's. (Click to see full instructions)
      U3 - Loops - Minus Minus_instruction: |
        Change the code to count down from 10
        to 1. (Click to see full instructions)
      U3 - Loops - plus and minus = operator_instruction: |
        Update the code to use
        the += operator. (Click to see full instructions)
      U3 - Loops - Plus Plus_instruction: |
        Change the code to use count++ instead
        of count = count + 1.  (Click to see full instructions)
      U3 - Loops - Typing in Console_instruction: |
        Use console to check the ending
        value of num. (Click to see full instructions)
      U3 - Loops And Arrays - Add 5_instruction: |
        Add 5 to all the values in an array
        (Click to see full instructions)
      U3 - Loops And Arrays - Challenge 1_instruction: |
        Write a function that finds
        and returns the minimum value in an array.   (Click to see full instructions)
      U3 - Loops And Arrays - Challenge 2_instruction: |
        Write a function that finds
        and returns the minimum value in an array.   (Click to see full instructions)
      U3 - Loops And Arrays - Counting Times_instruction: |
        Count the number of times
        5 appears in an array. (Click to see full instructions)
      U3 - Loops And Arrays - Divid by 2_instruction: |
        Divide every value in the
        array by 2. (Click to see full instructions)
      U3 - Loops And Arrays - Find Max_instruction: |
        Design a function that displays
        the smallest number in an array  (Click to see full instructions)
      U3 - Loops And Arrays - Find Min_instruction: |
        Complete the findMinVal function
        to find and display the smallest value in an array  (Click to see full instructions)
      U3 - Loops And Arrays - Functions that Return Value_instruction: |
        Call findMin
        within the console.log statement to calculate the minimum of two values.  (Click
        to see full instructions)
      U3 - Loops And Arrays - General Search Param_instruction: |
        Add a second parameter
        to the search function for the value to search for.  (Click to see full instructions)
      U3 - Loops And Arrays - Intro For Loop_instruction: |
        Add a for loop with a
        console.log inside and test out the 3 pieces of the for loop. (Click to see
        full instructions)
      U3 - Loops And Arrays - Linear Search_instruction: |
        Visit every element in
        the array and display "true" if the value is a 5, and "false" otherwise.
        (Click to see full instructions)
      U3 - Loops And Arrays - Loop Array If_instruction: |
        Use an if statement to
        only display the values in the array that are greater than 5. (Click to see
        full instructions)
      U3 - Loops And Arrays - Make it a Function - add list parameter_instruction: |
        Create
        a function that takes a list parameter and prints if the list contains a 5.
        (Click to see full instructions)
      U3 - Loops And Arrays - Make it a Function_instruction: |
        Move the code that
        searches the list for a 5 into a function called "search". (Click to see
        full instructions)
      U3 - Loops And Arrays - Multiple Returns_instruction: |
        Test out the return
        values of the findMax function.  (Click to see full instructions)
      U3 - Loops And Arrays - Print Array_instruction: |
        Use a for loop to print out
        all the values in an array. (Click to see full instructions)
      U3 - Loops And Arrays - Printing Single True_instruction: |
        Process the array
        and display a single "true" if the array contains a 5 or a single "false"
        if it does not.  (Click to see full instructions)
      U3 - Loops And Arrays - Return Index_instruction: |
        Make the search function
        return the index of the search value in the array. (Click to see full instructions)
      U3 - Loops And Arrays - Return Value_instruction: |
        Use constrain in this simple
        app to keep the turtle from driving off the screen.  (Click to see full instructions)
      U3 - Loops And Arrays - Search and Remove_instruction: |
        Search for 5 in the
        array and remove it from the array. (Click to see full instructions)
      U3 - Loops And Arrays - Search with Boolean Var_instruction: |
        Make a boolean
        variable to use as a flag to keep track of whether there is a 5 in the array.
        (Click to see full instructions)
      U3 - Loops And Arrays - useFindMin_instruction: |
        Call findMin within the console.log
        statement to calculate the minimum of two values.  (Click to see full instructions)
      U3 - Movie Bot - Multiple If Sequences_instruction: |
        Add another set of if,
        else if, and else statements inside the question if statement to check for
        keywords for movie ratings (G, PG, PG-13, and R). (Click to see full instructions)
      U3 - Movie Bot - Nested Motivation_instruction: |
        Add a separate set of if statements
        to check for a "?" in the input. (Click to see full instructions)
      U3 - Movie Bot - toLowerCase_instruction: |
        Use the toLowerCase command to change
        all user input into lowercase letters after they enter it. (Click to see full
        instructions)
      U3 - Movie Bot - When Multiple If Statements_instruction: |
        Add an if and else-if
        statement that checks for please and thank you. (Click to see full instructions)
      U3 - Practice Create Performance Task_instruction: |
        Design and implement your
        practice Create Performance Task. (Click to see full instructions)
      U3 - Read Record - 1.2_instruction: |
        Console.log the records returned by a
        call to readRecords. (Click to see full instructions)\r
      U3 - Read Record - 1.5_instruction: |
        Console.log the records returned by a
        call to readRecords. (Click to see full instructions)\r
      U3 - Read Record - 1.6_instruction: |
        Console.log the records returned by a
        call to readRecords. (Click to see full instructions)\r
      U3 - Read Record - 1_instruction: |
        Console.log the records returned by a call
        to readRecords. (Click to see full instructions)\r
      U3 - Read Record - 2_instruction: |
        Change the table name so that the records
        are read from the new table.(Click to see full instructions)\r
      U3 - Read Record - 3_instruction: |
        Change the name of the table in a readRecords
        command to read from a table that does not exist. (Click to see full instructions)\r
      U3 - Read Record - 4.1_instruction: |
        Print out each record return from the
        readRecords call individually. (Click to see full instructions)\r
      U3 - Read Record - 4_instruction: |
        Print out each record return from the readRecords
        call individually. (Click to see full instructions)\r
      U3 - Read Record - 5 and half_instruction: |
        Print out the name of each movie
        in the records return from the readRecords call. (Click to see full instructions)\r
      U3 - Read Record - 5_instruction: |
        Print out the name of each movie in the
        records return from the readRecords call. (Click to see full instructions)\r
      U3 - Return Values - constrainTurtle_instruction: |
        Use constrain in this simple
        app to keep the turtle from driving off the screen.  (Click to see full instructions)
      U3 - Return Values - debuggingConstrain_instruction: |
        Correct the error in
        constrain so that it returns the appropriate value.  (Click to see full instructions)
      U3 - Return Values - debuggingMaxVal_instruction: |
        Correct the error in maxVal
        so that it correctly reports the maximum value.  (Click to see full instructions)
      U3 - Return Values - debuggingReturns_instruction: |
        Correct the error in maxVal
        so that it correctly reports the maximum value.  (Click to see full instructions)
      U3 - Return Values - increase1_instruction: |
        Call the increase function within
        moveForward, write, and console.log.  (Click to see full instructions)
      U3 - Return Values - increase2_instruction: |
        Change the increase function to
        return 3 times the input value. (Click to see full instructions)
      U3 - Return Values - min1_instruction: |
        Test out the return values of the findMax
        function.  (Click to see full instructions)
      U3 - Return Values - useFindMin_instruction: |
        Call findMin within the console.log
        statement to calculate the minimum of two values.  (Click to see full instructions)
      U3 - Return Values - useMinVal_instruction: |
        Call minVal within the console.log
        statement to calculate the minimum of two values.  (Click to see full instructions)
      U3 - Return Values - wrapTurtle_instruction: |
        Write wrap in this simple app
        to let the turtle "wrap" to the other side of the screen when it goes off.  (Click
        to see full instructions)
      U3 - Return Values - writeMaxVal_instruction: |
        Write the function maxVal and
        then use it within the console.log statement to calculate the maximum of two
        values.  (Click to see full instructions)
      U3 - Search Terms - 1_instruction: |
        Create an array of all the movies made
        in 2008 and print it out. (Click to see full instructions)\r
      U3 - Search Terms - 2_instruction: |
        Print out all the movies with year 2008
        using the readRecords search terms. (Click to see full instructions)\r
      U3 - Search Terms - 3_instruction: |
        Print whether or not there are movies matching
        the search criteria (Click to see full instructions)\r
      U3 - Search Terms - 4_instruction: |
        Print whether or not there are movies matching
        the search criteria (Click to see full instructions)\r
      U3 - Search Terms - 5_instruction: |
        Print out the cities that are in California
        or have a population of 2,000,000. (Click to see full instructions)\r
      U3 - Search Terms - 6_instruction: |
        Print out the cities that are in California
        or have a population of 2,000,000. (Click to see full instructions)\r
      U3 - Simulation - 1_instruction: |
        Use a while loop to "flip a coin 10 times"
        and write the values to the screen. (Click to see full instructions)
      U3 - Simulation - 2.1_instruction: |
        Change your looping condition so the simulation
        runs until there are 5 heads flipped. (Click to see full instructions)
      U3 - Simulation - 2.5_instruction: |
        Run your simulation to get the full 10,000
        heads! How long did it take? (Click to see full instructions)
      U3 - Simulation - 2_instruction: |
        Keep track of how many heads (1's) your
        program generates and print the results to the screen. (Click to see full
        instructions)
      U3 - Simulation - 3_instruction: |
        Add functionality that counts how many heads
        in a row are flipped. (Click to see full instructions)\r
      U3 - Simulation - 4_instruction: |
        Update your while loop's condition so the
        the coin flips until there are three heads in a row. (Click to see full instructions)
      U3 - Simulation - 5_instruction: |
        Change your while loop to run until you get
        a streak of 12 heads. How many flips did it take? (Click to see full instructions)
      U3 - Simulation - 6_instruction: |
        Keep adding to your simulation. What do you
        want to explore next? (Click to see full instructions)
      U3 - Simulation - App_instruction: |
        Change your code to run the full simulation
        with 10,000 coins. What was your longest streak of heads? (Click to see full
        instructions)
      U3 - Simulation - Template_instruction: |
        Use a while loop to "flip 10 coins"
        and write them to the screen. (Click to see full instructions)
      U3 - User Input - Save getText To Variable_instruction: |
        Save the age and name
        of the user in variables (Click to see full instructions)
      U3 - User Input - Saving After Input_instruction: |
        Save the age of the user
        in a variable using getText() (Click to see full instructions)
      U3 - User Input and String -  Concat_instruction: |
        Output a message about age
        in a Text Area (Click to see full instructions)
      U3 - Variables - Clicker Game_instruction: |
        Create your improved Chaser-Game
        here. (Click to see full instructions)
      U3 - Variables - Debug Scope_instruction: |
        Why isn't the value of foo changing
        correctly? Make a guess. (Click to see full instructions)
      U3 - Variables - Debugging with Turtle_instruction: |
        Use your new debugging
        techniques to get the code to run correctly (Click to see full instructions)
      U3 - Variables - Decrement_instruction: |
        Decrement the value of the variable.
        (Click to see full instructions)
      U3 - Variables - Identify Variables_instruction: |
        Identify the values printing
        in the terminal with console.log statements. (Click to see full instructions)
      U3 - Variables - Increment_instruction: |
        Use the console.log debugging technique
        to see what is happening in this example. Add another variable and increment
        its value. (Click to see full instructions)
      U3 - Variables - Incrementing Variables_instruction: |
        Create a repeat loop
        for the repeated code and use increment to recreate the original program with
        less lines of code! (Click to see full instructions)
      U3 - Variables - Read Using Turtle_instruction: |
        Create a second set of variables
        for x and y position. Move turtle to that new location. (Click to see full
        instructions)
      U3 - Variables - Reassigning Variables with Console.log_instruction: |
        Add another
        reassignment statement at the end of the code to change the value of the variable
        at second time. (Click to see full instructions)
      U3 - Variables - Set to Expression with Other Variables and Turtle_instruction: |
        (click
        to see full instructions)
      U3 - Variables - Set to Expression with Other Variables_instruction: |
        Write
        an expression that calculates the player's total score and stores it in the
        totalScore variable. The calculation is: the player's points times lives
        divided by the total time. (click to see full instructions)
      U3 - Variables - Set to Expression with Turtle_instruction: |
        (click to see
        full)
      U3 - Variables - Set to Expression_instruction: |
        Test out the new expressions.
        (Click to see full instructions)
      U3 Digital Assistant Design_instruction: |
        Pick a topic for your Digital Assistant
        and create the basic layout with a text input and text area. (Click to show
        full instructions)
      U3 Digital Assistant Set Text_instruction: |
        Have your digital assistant repeat
        back what the user types and include a canned response. (Click to see full
        instructions)
      U3 Digital Assistant Target - Mehal_instruction: |
        Try out a demo of the Digital
        Assistant!
      U3 Digital Assistant Target_instruction: Try out a demo of the Digital Assistant!
      U3 Digital Assistant Template_instruction: This is a project template!
      U3 Digital_instruction: |
        Choose a specialization topic for your digital assistant.
        Create a basic digital assistant that takes the user's input and displays
        back a default response.
      U3 full clicker demo_instruction: Clicker game - Try it out!
      U3 mehal's clone_instruction: Try out a demo of the Digital Assistant!
      U3- Variables - Assign Random For Turtle Draw_instruction: |
        Try writing the
        same code in text mode.
      U3- Variables - Changing the Value_instruction: |
        Update the value of 'turnAmount'
        before each moveForward so the turtle turns a different amount each time.
        (Click to see full instructions)
      U3- Variables - Create And Assign_instruction: |
        On one line add a variable
        called "lives" and assign it the value 3. Print it to the console. (Click
        to see full instructions)
      U3- Variables - Text Mode_instruction: |
        1. Switch to text mode and type instructions;
        2. drag blocks out into text mode; 3. experiment with code completion
      U3-Design Mode-ID and Event Handler_instruction: |
        Add an event handler for
        the button using the "Insert and show" link in the Design Mode Events tab.
        (Click to see full instructions).
      U3-Design Mode-ID_instruction: |
        Using the Design Mode Events change the button
        ID and update the code to match. (Click to see detail instructions).
      U3-Design Mode-Image_instruction: |
        Recreate the "Chaser Game" from the last
        lesson using Design Mode. (Click to see full instructions.)
      U313 drag Two Buttons_instruction: |
        Run a program with two buttons that have
        the same id to see the warning message in the console. Change the ids to make
        the program run without getting a warning message.
      U313 eventsDetails_instruction: |
        Run a program with two buttons that have the
        same id to see the warning message in the console. Change the ids to make
        the program run without getting a warning message.
      U313 Two Buttons with Ids_instruction: |
        Predict what will happen. Once you've
        made a prediction, run the code to see what happens. (Click to see full instructions)
      U3L03 - draw rect function_instruction: |-
        Write a function called drawRectangle().\r
        (Click
        to see full instructions)
      U3L03 - draw step_instruction: |
        Write the drawStep function. (Click to see
        full instructions)
      U3L03 choose your own drawing_instruction: |
        Now choose your own!  Pick one
        of the three drawings shown here and attempt to create it on your own, making
        smart decisions about how to break the problem down into re-usable functions.  You
        will review your work with a peer using "procedures peer review rubric."  Check
        it for the requirements.  GIF: U3L3-ProceduresChooseOne.png
      U3L03 Creating Procedures 1_instruction: |
        Write the turnAround() function and
        use it to make the turtle move as depicted. see: U3L03-turnAndDown.gif
      U3L03 Define and use turnAround_instruction: |
        Define a function called turnAround.
        Call the function and then move the turtle forward. (Click to see full instructions)
      U3L03 define turnRight and draw a rectangle_instruction: |
        Define a function
        called right() that turns the turtle to the right. Then use this function
        to draw a rectangle, as shown below. (Click to see full instructions)
      U3L03 Draw a T using turnAround_instruction: |
        Draw a plus sign using the provided
        version of turnAround().  (Click to see full instructions)
      U3L03 draw diamond_instruction: |
        Create a function called drawDiamond() that
        makes use of your previous work to draw the complete diamond. (Click to see
        full instructions)
      U3L03 Three Steps_instruction: |
        Define a function called drawSide() which draws
        three steps and moves the turtle to prepare for the next side (Click to see
        full instructions)
      U3L04 - 3 by 3 with functions_instruction: |
        Make the 3x3 square as efficiently
        as you can. (Click to see full instructions)
      U3L04 - snowflake_instruction: |
        Create the design by breaking it down into
        layers of functions. (Click to see full instructions)
      U3L04 choose your own drawing_instruction: |
        Now choose your own!  Pick one
        of the three drawings shown here and attempt to create it on your own, making
        smart decisions about how to break the problem down into re-usable functions.  You
        will review your work with a peer using "procedures peer review rubric."  Check
        it for the requirements.
      U3L04 diamond solution_instruction: |
        Study this solution to the drawDiamond
        problem.  Notice that the whole program starts by calling drawDiamond() at
        the top.  The program then follows a chain of function calls.  You can trace
        what's happening in the code to see the functions reused.  It's also easy
        to read because the function names describe the expected behavior.
      U3L05_3x3GridEfficiencyChallenge_instruction: |
        Let's revisit the 3x3 grid
        problem you did a few lessons ago.  This time the challenge is to program
        the solution "as efficiently as possible."  Now that you know how to write
        functions, it should be easier to break the problem down, and your code should
        be easier to read and debug.  See the rubric for more details about requirements
        and expectations.
      U3L05_draw3x3GridEfficiently_instruction: |
        Draw a 3x3 grid above and to the
        right of the turtle. Try to do so with the fewest number of commands possible.
        NOTE: This is a very challenging problem.  You may need to play with it for
        a while and tweak it.  You might also consider using pencil and paper to sketch
        your ideas.
      U3L06 - moveForwardwithParams_instruction: |
        Use a single command to move the
        turtle to the edge of the screen. (Click to see full instructions)
      U3L06 Challenge 1 triangle_instruction: |
        Use the parameterized versions of
        the turtle commands to create a triangle with sides 100 pixels long. (Click
        to see full instructions)
      U3L06 Challenge 2 purple square_instruction: |
        Read the documentation for penColor()
        and penWidth() before using them to draw the blue square.
      U3L06 Challenge 3 fill pink_instruction: |
        Fill in the background of the screen
        with your favorite color. (Click to see full instructions)
      U3L06 Challenge 4 bullseye_instruction: |
        Create the bullseye using hexadecimal
        colors and dot(). (Click to see full instructions)
      U3L06 Challenge 5 overlapping circles_instruction: |
        This image is created just
        using dot() and penColor() but, how are we going to get those circles to be
        transparent?  If you haven't gotten the hint yet: check out the documentation!
      U3L06 Challenge 6 squiggles_instruction: "Read the documentation for the \"arcLeft\"\nand
        \"arcRight\" commands and then draw the squiggles as shown. \n"
      U3L06 Challenge 7 smiley face_instruction: |
        Use turnTo() and moveTo() to help
        draw a smiley face. (Click to see full instructions)
      U3L06 Challenge 8 make your own_instruction: |
        Create a drawing of your own.
        (Click to see full instructions)
      U3L07 - allSeaGrass_instruction: |
        Add 50 pieces of seagrass to the image by
        writing drawAllSeagrass with a loop. (Click to see full instructions)
      U3L07 - bubbles_instruction: |
        Add 200 bubbles to the image by writing drawAllBubbles
        with a loop. (Click to see full instructions)
      U3L07 - callingFunctionsInLoops_instruction: |
        Call the function within the
        loop to complete the figure. (Click to see full instructions)
      U3L07 - createTriangleParam_instruction: |
        Define a function that accepts a
        parameter to match the function calls and complete the image. (Click to see
        full instructions)
      U3L07 - fish_instruction: |
        Add 15 fish to the image by writing drawAllFish
        with a loop. (Click to see full instructions)
      U3L07 - Free Play Loops and Random_instruction: |
        Free Play! Use what you learned
        from loops and random to make your own little scene. Have fun.
      U3L07 - introSquare_instruction: |
        Use a loop to draw a square. (Click to see
        full instructions)
      U3L07 - loopsWithRandom_instruction: |
        Increase the number of iterations to
        fill the screen with white. (Click to see full instructions)
      U3L07 - randomDots1_instruction: |
        Increase the number of iterations to fully
        fill the screen with random dots. (Click to see full instructions)
      U3L07 - randomSquare_instruction: |
        Draw the figure using a loop. (Click to
        see full instructions)
      U3L07 - seaGrass_instruction: |
        Add a parameter to drawSeagrass that controls
        the number of waves in the grass. (Click to see full instructions)
      U3L07 - seaStar_instruction: |
        Add 5 sea stars to the image by writing drawAllSeaStars
        with a loop. (Click to see full instructions)
      U3L07 - Starry Night Starter Code_instruction: "You are going to use loops\nand
        random numbers to generate an image of starry night sky similar to one\nshown
        here.  We have given you some starter code to generate the ground and\nsky
        (just two giant dots), you will add code to this project to make the stars,\ngrass,
        and moon.  All of the effects are clever applications of turtle dots,\nlines,
        and colors.  To get started, follow the series of steps suggested in\nthe
        accompanying worksheet. \n"
      U3L07 - sunBeams_instruction: |
        Add 100 sunbeams to the image by writing drawAllSunbeams
        with a loop. (Click to see full instructions)
      U3L07 - topDownDesign_instruction: |
        Get comfortable with the structure of this
        program, then move on to the next exercise. (Click to see full instructions)
      U3L08 - createTwoParamTriangle_instruction: |
        Define a function called drawTriangle()
        that accepts two parameters to set the size and width of the triangle. (Click
        to see full instructions)
      U3L08 - digitalScene_instruction: |
        Create the functions you were assigned as
        part of your digital scene. (Click to see full instructions)
      U3L08 - drawSquaresWithParams_instruction: |
        Write drawSmallSquare() to draw
        a 25px square. (Click to see full instructions)
      U3L08 - drawSquareWithParam - for video_instruction: |
        Use drawSquare() to recreate
        the image of both squares, this time using parameters. (Click to see full
        instructions)
      U3L08 - drawSquareWithParam_instruction: |
        Use drawSquare() to recreate the
        image of both squares, this time using parameters. (Click to see full instructions)
      U3L08 - Enchantment Under the Sea_instruction: |
        You have been provided with
        starter code for an “Under the Sea” scene which includes three functions,
        one each for the starfish, sea grass, and fish. Create versions of these functions
        which accept parameters to allow you to add more variation to your scene.  The
        student worksheet provides more details and guidance.
      U3L08 - fish_instruction: |
        Add a parameter to drawFish that changes the size
        of the fish drawn. (Click to see full instructions)
      U3L08 - freePlay_instruction: |
        Keep adding to your image by making more calls
        to your new functions with parameters. (Click to see full instructions)
      U3L08 - individualCode_instruction: |
        Create the functions you were assigned
        as part of your digital scene. (Click to see full instructions)
      U3L08 - introUnderTheSea_instruction: |
        Add an extra fish, starfish, and piece
        of sea grass to the image. Look at, but don't change, the functions that
        create them. (Click to see full instructions)
      U3L08 - multiParamFish_instruction: |
        Add three parameters to your drawFish
        function to accept red, green and blue values to make your fish different
        colors. (Click to see full instructions)
      U3L08 - multipleLayersofParams_instruction: |
        Call drawPlusSign() to complete
        the image. (Click to see full instructions)
      U3L08 - paramsToStarfish_instruction: |
        Add a parameter to drawStarfish that
        changes the size of the starfish drawn. (Click to see full instructions)
      U3L08 - randomInput_instruction: |
        Use the randomNumber() blocks to test the
        functions you designed with random input. (Click to see full instructions)
      U3L08 - seaGrass_instruction: |
        Add a parameter to drawSeagrass that changes
        the size of the piece of seagrass drawn. (Click to see full instructions)
      U3L08 - squareTwoParams_instruction: |
        Call drawSquare() to complete the drawing
        of two squares. (Click to see full instructions)
      U3L08 - starFish_instruction: |
        Add an extra fish, starfish, and piece of sea
        grass to the image. Look at, but don't change, the functions that create
        them. (Click to see full instructions)
      U3L08 - triangleTwoParams_instruction: |
        Call drawSquare() to complete the drawing
        of two squares. (Click to see full instructions)
      U3L1 - Simulation - Template_instruction: |
        Use a while loop to "flip 10 coins"
        and write them to the screen. (Click to see full instructions)
      U3L12 Chaser Template_instruction: This is a project template!
      U3L13 - Button with ID_instruction: |
        Drag a button out onto the screen and
        set its text to "Go forth!".  Run the program to make sure you can see the
        button.
      U3L13 - Debug Id plus logic problem_instruction: |-
        The last problem was an example
        of syntax error.  App Lab did not understand which object it should be listening
        to for a "click" event so it showed an error message in the console to let
        you know.  Another kind of error is a logical error - the program is valid,
        but it's not doing what you want it to do.\r
        \r
        This program has 2 errors.
        A (tricky) syntax error and logical error.  Find them, fix them, and make
        the program work as expected.
      U3L13 - Debug Id Problem_instruction: |
        Improve the button by choosing a descriptive
        and meaningful ID. (Click to see full instructions)
      U3L13 - Debugging 1_instruction: |
        Debug the program by verifying your IDs are
        being referenced properly. (Click to see full instructions)
      U3L13 - Debugging 2_instruction: |
        Debug the program by properly ordering your
        button commands and event handlers. (Click to see full instructions)
      U3L13 - Debugging 3_instruction: |
        Debug the program by fixing the logical error
        within the program. (Click to see full instructions)
      U3L13 - Project_instruction: |
        Create your multi-screen app. (Click to see full
        instructions.)
      U3L13 - Turtle Driver Project_instruction: |
        Create a "turtle driver" that
        includes buttons to move the turtle forward and turn it left and right. (Click
        to see full instructions)
      U3L13 - Turtle move with button_instruction: |
        Add a button that moves the turtle
        when clicked.  (Click to see full instructions)
      U3L13 eventsDetails_instruction: |
        Add an event handler to the button to move
        the turtle forward. (Click to see full instructions)
      U3L14 - Assigning Random Value_instruction: |
        Write a program that simulates
        the rolling of two dice and reports their individual values as well as the
        sum. (click to see full instructions)
      U3L14 - concatenate simple_instruction: |
        Modify the write statement on line
        3 to combine text and variables together to make the app display a single
        line of text that shows the player's lives and score. (click to see full
        instructions)
      U3L14 - Mini Calculator embed_instruction: |
        You will be prompted for two numbers,
        one right after the other.  See what happens.  Enter different numbers until
        you get the idea.
      U3L14 - moving memory challenge1_instruction: |
        Using only the variables provided,
        assignment (=) and arithmetic (+ - * /) re-assign the values to make the console.log
        statement display the correct value(s).  (Click to see full instructions)
      U3L14 - moving memory challenge2_instruction: |
        Using only the variables provided,
        assignment (=) and arithmetic (+ - * /) re-assign the values to make the console.log
        statement display the correct value(s).  (Click to see full instructions)
      U3L14 - moving memory challenge3_instruction: |
        Using only the variables provided,
        assignment (=) and arithmetic (+ - * /) re-assign the values to make the console.log
        statement display the correct value(s).  (Click to see full instructions)
      U3L14 - moving memory challenge4_instruction: |
        Using only the variables provided,
        assignment (=) and arithmetic (+ - * /) re-assign the values to make the console.log
        statement display the correct value(s).  (Click to see full instructions)
      U3L14 - moving memory challenge5_instruction: |
        Using only the variables provided,
        assignment (=) and arithmetic (+ - * /) re-assign the values to make the console.log
        statement display the correct value(s).  (Click to see full instructions)
      U3L14 - moving memory challenge6_instruction: |
        Using only the variables provided,
        assignment (=) and arithmetic (+ - * /) re-assign the values to make the console.log
        statement display the correct value(s).  (Click to see full instructions)
      U3L14 - Unfortunate Events Free Play_instruction: |
        Follow the "Unfortunate
        Events" Worksheet and enter your code here to experiment.  We've pre-loaded
        the code you need to start.
      U3L14 - User Input Division calculator_instruction: |
        Write a program that acts
        as a simple calculator. (click to see full instructions)
      U3L14 - Variable ReAssignment pt2_instruction: |
        Trace the code and predict
        what you think will be printed to the console. Then add a console.log statement
        at the end of the program to see the last value of someNum to see if your
        full prediction is correct. (click to see full Instructions)
      U3L15 - add code to make count down work_instruction: |
        Write code to make the
        down arrow work as expected. (Click to see full instructions)
      U3L15 - Add reset button to UpDown app_instruction: |
        Add code so that clicking
        the start over button will reset the game and send you back to the main screen.
        (Click to see full instructions)
      U3L15 - clicker update score_instruction: |
        Add code to update the score when
        the apple is clicked. (Click to see full instructions)
      U3L15 - count upDown bug forget to set text_instruction: |
        Find the bug in the
        program and fix it. (Click to see full instructions)
      U3L15 - count upDown bug logic error wrong update_instruction: |
        Find the bug
        in the program and fix it. (Click to see full instructions)
      U3L15 - count upDown bug var not created globally_instruction: |
        Find the bug
        in the program and fix it. (Click to see full instructions)
      U3L15 - Debug forget to update var on reset in UpDown app_instruction: |
        Run
        the app, and click the up or down button until you get to the gameOverScreen.
        Click 'Start Over' and try the app again. Find and fix the issue in the
        code. (Click to see full instructions)
      U3L15 - Debug if never triggers in UpDown app_instruction: |
        Run the app and
        use the up and down arrows to try to hit the gameOverScreen. You can't! Find
        and fix the issue in the code. (Click to see full instructions)
      U3L15 - Debugging Simple If-statements =v==_instruction: |
        Run the app, and
        click the up button. Then restart and run it again, and click the down button.
        Find and fix the issue in the code. (Click to see full instructions)
      U3L15 - DEMO up down count practice app_instruction: |
        Try out the demo app
        (Click to see full instructions)
      U3L15 - global var example count up_instruction: |
        Look at the code for this
        app and see how the code works to update the count variable when the up arrow
        is clicked. (Click to see full instructions).
      U3L15 - mini clicker update score_instruction: |
        Add code to update the score
        when the apple is clicked. (Click to see full instructions)
      U3L15 - practice with setText_instruction: |
        Use setText to complete the click
        event handler for the down arrow. (Click to see full instructions)
      U3L15 - Simple If-statements in UpDown App_instruction: |
        Add an if statement
        so that the app changes screens when the count reaches -5. (Click to see full
        instructions)
      U3L15 - variable scoping problem debugging_instruction: |
        See if you can figure
        out why the code is no longer working. (Click to see full instructions)
      U3L15 click add lives_instruction: |
        Add lives to the clicker game that decrement
        by 1 when the background image is clicked (Click to see full instructions)
      U3L15 full clicker app_instruction: |
        Complete your clicker game! (Click to
        see full instructions)
      U3L16 - challenge say hi app_instruction: |
        Write a greeting to the user when
        they hit 'enter' in the text input, using the 'change' event. (Click to
        see full instructions)
      U3L16 - chaserApp_instruction: |
        Create your own "Chaser Game." (Click to
        see full instructions)
      U3L16 - chooseImages_instruction: |
        Replace the image in your application with
        one of your own. (Click to see full instructions)
      U3L16 - doubleQuotes_instruction: |
        Save a string inside a variable and log
        it to the console. (Click to see full instructions)
      U3L16 - hideAndShow_instruction: |
        Introducing textInput, getText and write.  First
        run the starter code several times.  Try to change what's written to the
        screen when the button is clicked. Then use getText to write to the screen
        what the user entered in the text box. GIF: U3L16 - useGetText.gif
      U3L16 - hideAndShowPractice_instruction: |
        You are given some starting code
        that puts an image and two buttons on the screen.  The image is initially
        hidden. Add two new event handlers: one for each button, that when clicked
        hide and show the image.
      U3L16 - image and text labels_instruction: |
        Introducing the setPosition command!  Replace
        the moveTo in the button-click event handler to use setPosition to move the
        button itself to a random location when it's clicked.
      U3L16 - images and text labels_instruction: "Introducing objects other than\nbuttons!
        - textLabels and images.  First try replacing your button with a\ntextLabel.
        \ Will the text respond to events just like the button?  Try connecting\nan
        event handler to it.  We've started you out with code similar to the result\nof
        the last level, you can copy your code from that level into here if you\nprefer.
        \n"
      U3L16 - images_instruction: "Introducing Images.  Try replacing the textLabel\nwith
        an image..  Will the image respond to events just like the button?  Try\nconnecting
        an event handler to it.  We've started you out with code similar\nto the result
        of the last level, you can copy your code from that level into\nhere if you
        prefer. \n"
      U3L16 - intro getText_instruction: |
        Add an event handler to the Submit button
        so that when the button is clicked it will display the name entered in the
        text box to the console.  Use getText to get the value out of the text box.
        (Click to see full instructions)
      U3L16 - introSetPosition_instruction: |
        Move the buttons to the bottom of the
        screen. (Click to see full instructions)
      U3L16 - introStrings_instruction: |
        Save a string inside a variable and log
        it to the console. (Click to see full instructions)
      U3L16 - nameAgeTemplate_instruction: |
        Add an Text Input box for the name and
        age. (Click to see full instructions)
      U3L16 - newEventTypes_instruction: |
        Experiment with different event types and
        select the one that you think is best. (Click to see full instructions)
      U3L16 - outputWithTextArea_instruction: |
        Output a message to the 'textArea'
        (Click to see full instructions)
      U3L16 - projectTemplate_instruction: |
        Create your own "Chaser App". (Click
        to see full instructions)
      U3L16 - quick double click_instruction: |
        Mini-Project.  The Quick Double-Click
        game.  In this simple game an object (an image) moves around, or pops up randomly
        on the screen, as the user clicks it.  The goal of our game will be to try
        to double-click the object before it moves.  Part of the challenge (and fun)
        here is creating this app from scratch.  You can look back at your previous
        work for examples, but it's fun to create something from scratch, too.  Try
        it!  For more details see the Activity guide for this lesson.
      U3L16 - setPosition to move button_instruction: |
        Introducing the setPosition
        command! Replace the moveTo in the button-click event handler to use setPosition
        to move the button itself to a random location when it's clicked.
      U3L16 - setPositionMoveButton_instruction: Use setPositon to moveButton
      U3L16 - setupMoveToRandom_instruction: |
        Modify the code so that the turtle
        moves to a random screen location when the button is clicked. (Click to see
        full instructions)
      U3L16 - singleSetPosition_instruction: |
        Move the button to the middle of the
        screen. (Click to see full instructions)
      U3L16 - stringsVsNumbers_instruction: |
        Run the program to see how strings and
        numbers behave with different arithmetic operators. (Click to see full instructions)
      U3L16 - text labels_instruction: |
        Use the textLabel command to replace the
        button in your program with a text label. (Click to see full instructions)
      U3L16 - textInput getText write_instruction: |
        Add an Text Input box for the
        name and age. (Click to see full instructions)
      U3L16 - toUpper_instruction: |
        Make the name of the user appear in uppercase
        (Click to see full instructions)
      U3L16 - use images_instruction: |
        Use the image command to replace the text
        label in your program with an image. (Click to see full instructions)
      U3L16 Mad Lib Clear Input_instruction: "Clear the user's previous text when\nthe
        Play Again button is clicked (Click to see full instructions) \n"
      U3L16 Mad Lib Demo_instruction: Mad Libs Demo - Try it out!
      U3L16 Mad Lib getText_instruction: "Before setting the text area with your\nMad
        Libs outline, get the user's text and incorporate their responses. (Click\nto
        see full instructions) \n"
      U3L16 Mad Lib setText_instruction: "When the Next button is clicked, set the\ntext
        area to have the main outline of your How-to Mad Libs (without the user's\ninput).
        (Click to see full instructions) \n"
      U3L16 Mad Lib Student Setup_instruction: |
        Back to Mad Libs: To get started,
        set up the two screens for your Mad Libs app (Click to show full instructions)
      U3L16 Mad Lib toUpper_instruction: "Apply the toUpperCase and toLowerCase string\nfunctions
        to the user's text. (Click to see full instructions) \n"
      U3L17 - getAndSetKeyValue_instruction: |
        Create an image like app. (Click to
        see full instructions)
      U3L17 - getKeyValue_instruction: |
        Run the program several times to observe
        how the setKeyValue commands now always arrive in order. (Click to see full
        instructions)
      U3L17 - introCallbacks_instruction: |
        Run the program several times to observe
        how the setKeyValue commands now always arrive in order. (Click to see full
        instructions)
      U3L17 - introKeyValue_instruction: |
        Explore your key value pairs with the Data
        Viewer. (Click to see full instructions)
      U3L17 - readKeyValue_instruction: |
        Explore your key value pairs with the Data
        Viewer. (Click to see full instructions)
      U3L17 - setKeyValue_instruction: |
        Create and update your key value pairs using
        setKeyValue. (Click to see full instructions)
      U3L17 - twoSetKeyValue_instruction: |
        Run the program several times to observe
        how often setKeyValue commands arrive out of order. (Click to see full instructions)
      U3L18 comparison operators_instruction: |
        Use console.log to print out the different
        boolean expressions below to see what information they return. (Click to see
        full instructions)
      U3L18 comparison operators_for_video_instruction: |
        Use `console.log` to print
        out the different boolean expressions below to see what information they return.
        (Click to see full instructions)
      U3L19 - Clicker Game Freeplay Area_instruction: |
        Use this App Lab area to improve
        your clicker game.  You should start by copy/pasting the code from your old
        game here.  We're showing a more full set of blocks in the toolbox - some
        of the things you might not have used yet.  Feel free to explore then and
        experiment if you want to.  Everything else you need should be shown.  Have
        fun!
      U3L19 - Debugging with consoleLog_instruction: |
        Add console.log() statements
        to find out the value of a and b after the first reassignment statement a
        = b; (Click to see full instructions)
      U3L19 - DEMO up down count practice app_instruction: |
        Try out the demo app
        (Click to see full instructions)
      U3L19 - do concatenate string with var_instruction: |
        We've given you a piece
        of code from the previous screen.  Try changing the value assigned to foo
        to see the string change. \r
        Do this: \r
        1. Try changing the value assigned
        to foo to see the string change. \r
        2. By only modifying the lines of code
        that were given to you, try to get the output to say: “The value of foo is:
        9.  And isn’t that fine.” \r
      U3L19 - fix the var name syntax error v2_instruction: |
        Fix the error and get
        it to print the value of both variables (Click to see full instructions)
      U3L19 - fix the var name syntax error_instruction: |
        Fix the error and get it
        to print the value of both variables (Click to see full instructions)
      U3L19 - global var example count up_instruction: |
        Look at the code for this
        app and see how the code works to update the count variable when the up arrow
        is clicked. (Click to see full instructions).
      U3L19 - practice with setText_instruction: |
        Add another button that changes
        the text to the value of a new variable. (Click to see full instructions)
      U3L19 - Simple If-statements in UpDown App_instruction: |
        Add an if statement
        so that the app changes screens when the count reaches -5. (Click to see full
        instructions)
      U3L19 - Target Clicker App_instruction: |
        Investigate the new elements of the
        'chaser-game'
      U3L19 - test reassignment of two vars_instruction: |
        Predict the value of a
        and b. Add console.log statements to find out the actual value of a and b.
        (Click for full instructions)
      U3L19 - three basic ops of variables_instruction: |
        Add another variable called
        "lives" and set the value to 3. Print the value of the variable to the console.
        (Click to see full instructions)
      U3L19 - try out console log_instruction: |-
        Try out console.log.  Do this: replace
        the statement write("foo is: " + foo) with console.log("foo is: " + foo).  Run
        the program and you should see the output show up in the console area below
        the workspace.  Then try adding a few more console.log statements.  Display
        some text.  Make another variable and display that.  \r
        The app screen will
        be blank -- that's the point.  With console.log you can test output behind
        the scenes in a way the user cannot see.  \r
        \r
        \r
        GIF: U3L19-useconsolelog.gif
      U3L19 - up down count practice app_instruction: |
        Set up the down button to
        decrease the value of count by 1 each time it is clicked. (Click to see full
        instructions)
      U3L19 - updating variables pt1_instruction: |
        This app is only SLIGHTLY different
        from the previous one, but much more dynamic.  See if you can figure out how
        and why the count is going up.  Once you've figured it out then you should
        be able to DO THIS: add a button to the app that when clicked makes the count
        go down, and updates the label.  When you're done the app should work as
        shown in the demonstration.  GIF: U3L19 - upDownCountApp.gif
      U3L19 - variable reassignment challenge pt2_instruction: |
        Make a prediction
        about the ending values of a, b, and c. Then use console.log to check your
        understanding (Click to see full instructions)
      U3L19 - variable reassignment part 1_instruction: |
        Predict the value of a and
        b. Add console.log statements to find out the actual value of a and b. (Click
        for full instructions)
      U3L19 - variable scope problem 2_instruction: |
        What is happening with foo?
        Play with the level to try to figure it out. (Click to see full instructions)
      U3L19 - variable scoping problem debugging_instruction: |
        See if you can figure
        out why the code is no longer work. (Click to see full instructions)
      U3L19 - write var and string with same name v2_instruction: |
        Fix the code so
        that the values of both variables print to the console. (Click to see full
        instructions)
      U3L19 - write var and string with same name_instruction: |
        Fix the code so that
        the value of both variables prints to the console. (Click to see full instructions)
      U3L2 Using Simple Commands (no tooltips)_instruction: |
        Draw a 1x1 square above
        and to the left of the turtle's starting position. Click to see full instructions.
      U3L2 Using Simple Commands_instruction: |
        Draw a 1x1 square above and to the
        left of the turtle's starting position. Click to see full instructions.
      U3L23 Chatbot Conditionals 1_instruction: |
        Add if, else if, and else statements
        to detect the movie genres Comedy, Romance, Action, and Horror. (Click to
        see full instructions)
      U3L23 Chatbot Intro 1a_instruction: |
        Store the user's input inside a variable
        and log it to the console.
      U3L23 Chatbot Intro 2_instruction: |
        Use string concatenation to store the user's
        input and assistant's answer into the conversation variable using the format
        "User: <input><bot name>: <default response>" . Log the conversation to
        the console.
      U3L23 Chatbot Intro 2a_instruction: |
        Display the conversation onto the "text_area"
        element. Optional: clear the user's input after every "change" event.
      U3L23 Chatbot Intro 3_instruction: |
        Add newline characters "\
        " to separate
        the user's input and the computer's response.
      U3L23 Chatbot Intro 4_instruction: |
        Use this level to make your chatbot look
        and work better!
      U3L23 Chatbot Intro_instruction: |
        Choose a specialization topic for your digital
        assistant. Create a basic digital assistant that takes the user's input and
        displays back a default response.
      U3L23 Digital Assistant 1_instruction: |
        Set the text_area element to display
        the user's input from the text_input element.
      U3L23 Digital Assistant 2_instruction: |
        Add the response "I don't know."
        after each of the user's inputs.
      U3L23 Digital Assistant 3_instruction: |
        Add the response "I don't know."
        after each of the user's inputs.
      U3L23 Digital Assistant 4_instruction: |
        Display the user's input and the digital
        assistant's response on different lines.
      U3L23 Digital Assistant 5_instruction: |
        Start the user's command with the
        phrase "User:" and the digital assistant's response with the phrase "Bot:"
      U3L23 Digital Assistant 6_instruction: |
        When the user hits Run, display the
        text "I'm a generic digital assistant. Ask me anything!"
      U3L24 Basic String Parsing 1_instruction: |
        Use the function "userInput.indexOf(<food>)"
        to check if the strings "pizza" or "soup" are anywhere in the user's
        response.
      U3L24 Chatbot Basic Conditionals_instruction: |
        Check out the project description
        for instructions. (Click to see full instructions.)
      U3L24 Chatbot Conditionals 2_instruction: |
        Adjust the "if" block to make
        the bot respond "I don't know that color." if the user types anything besides
        "blue"
      U3L24 Chatbot Conditionals 3_instruction: |
        Adjust the "if/else" block to
        make the bot respond to the colors blue, red, and green, and to two additional
        colors.
      U3L24 Chatbot Keyword Record_instruction: |
        Use the next level to record your
        digital assistant's keywords/phrases.
      U3L24 Chatbot Nested Conditionals_instruction: |
        Add a chained conditional with
        at least 3 "else if" statements to your personal assistant.
      U3L24 introIncludes_instruction: |
        Practice using the includes command. (Click
        to see full instructions)
      U3L24 Nested Conditionals 1_instruction: |
        Change all of the boolean expressions
        to use includes instead of ==. (Click to see full instructions)
      U3L24 Nested Conditionals 2_instruction: "Nest your movie genre if statements\ninside
        the if statements to check for a ? in the input. \n"
      U3L24 Nested Conditionals Bugs 2_instruction: |
        Fix the problem with the code
        so that all the conditions can be reached. (Click to see full instructions)
      U3L24 Nested Conditionals Bugs 3_instruction: |
        Fix the bugs that still exist
        in this program. Prove that the program works correctly.
      U3L24 Nested Conditionals Bugs_instruction: |
        Expose the bugs in this problem
        by typing inputs into the user-input box. Track which inputs cause unexpected
        outputs.
      U3L25 - drag out key event_instruction: |
        Set up an event handler to respond
        to keypress events, and display event.key in the console. Hit keys on the
        keyboard to see what happens. (Click to see full instructions)
      U3L25 - play sound when up key_instruction: |
        Change the code so the sound will
        only play when the up arrow is pressed. (Click to see full instructions)
      U3L25 Chatbot Strings_instruction: |
        1. Adjust your digital assistant to evaluate
        inputs the same way whether the inputs are capitalized or lowercase. 2. If
        a user asks "What is <phrase>?", where <phrase> is an input your digital
        assistant does not recognize, make your digital assistant respond "I don't
        know what <phrase> is."
      U3L25 String Parsing 1_instruction: |
        Given the string "Wisdom begins with
        wonder." what is the index of the following characters W, t, w, ., d, and
        k? Confirm your expectation using the string.indexOf() function.
      U3L25 String Parsing 2_instruction: |
        Use str.length to find the length of the
        strings “Hello World”, “Computer science rocks!", and “I promise to do my
        homework every day.”
      U3L25 String Parsing 3_instruction: |
        Write a password length checker that writes
        “yes” to the console if a string has a length greater than 10, or “no” if
        it is less than or equal to 10.  Test your function using two strings, one
        that will satisfy each conditional option.
      U3L25 String Parsing 4_instruction: |
        You are given the string "Wisdom begins
        with wonder." Use the string.substring(begin, end) function to print "begin"
        and "nder" to the console.
      U3L25 String Parsing 5_instruction: |
        Fill in the function, findBeginNder()
        to get the strings "begin" and "nder" from a sentence no matter where
        in the sentence they exist.\r
        Print the strings and their index to the console.
      U3L25 String Parsing 6_instruction: |
        Write a function that takes a name (first
        last) and reorders it (last, first).
      U3L25 String Parsing 7_instruction: |
        You are given the string “The earth has
        music for those who listen.” Manipulate it using the functions str.toUpperCase()
        and str.toLowerCase().
      U3L26 AND operator_instruction: |
        Update the genre and rating if statements
        to give only one movie suggestion at a time. (Click to see full instructions)
      U3L26 Chatbot Compound Conditionals_instruction: |
        Update your digital assistant
        to include at least one each of AND, OR, and NOT
      U3L26 Chatbot Final_instruction: |
        Update your digital assistant to include
        at least one each of AND, OR, and NOT
      U3L26 Compound Logic_instruction: |
        Write a conditional statement that detects
        if a command contains all the phrases "2000" "animated" and "G-rated."
        If all these phrases are detected, make Movie Bot respond "The top grossing
        animated and G-rated film in the 2000 decade was Finding Nemo."
      U3L26 NOT operator_instruction: "Write a conditional statement that detects\nif
        a command does not contain the phrase \"bad.\" If \"bad\" is not detected,\nmake
        Movie Bot respond normally. Otherwise, make Movie Bot respond \"Sorry,\nI
        don't know about bad movies.\" \n"
      U3L26 OR operator_instruction: |
        Update the if statement to use an OR to check
        for a "?" as well as who, what, where, when, why, how in the user input.
        (Click to see full instructions)
      U3L27 Chatbot Final_instruction: |
        Make your digital assistant awesome and when
        you are finished, ask one of your classmates to test it for you using the
        activity guide. As you add features to your digital assistant, track them
        on the next level.
      U3L2_Turtle3by3Grid_instruction: |
        Draw a 3x3 grid to the front and right of
        the turtle as efficiently as possible. The turtle should end at its original
        location, facing its original direction. (Click to see full instructions)
      U3L2_TurtleSquare_right_instruction: |
        Draw a square to the front and to the
        right of the starting location. (Click to show full instructions)
      U4 - add createRecord to contacts App_instruction: |
        Add code to your contacts
        app so that newly-added contacts are saved in a table. (Click to see full
        instructions)
      U4 - Add Row By Hand_instruction: |
        Add a new record to your table in the Data
        Viewer. (Click to see full instructions)
      U4 - Charts - drawChartFromRecords 1_instruction: |
        Use the drawChartFromRecords
        block to create a scatter plot from the table in the database. (Click to see
        full instructions)
      U4 - Charts - drawChartFromRecords Options 1_instruction: |
        Add a title to your
        chart and change the colors of your lines using the options parameter of drawChartFromRecords.
        (Click to see full instructions)
      U4 - Charts - drawChartFromRecords Options 2_instruction: |
        Look through the
        drawChartFromRecords API and choose some more options to customize. (Click
        to see full instructions)
      U4 - Charts - drawChartsFromRecords 1_instruction: |
        Add screen element, pull
        out drawCharts block, run the program!
      U4 - Charts - Export Data_instruction: |
        Export the data from the “ages” table
        as a CSV file, then remix this app and import the CSV file. (Click to see
        full instructions)
      U4 - Charts - Import Data 1_instruction: |
        Download the CSV file we’ve provided,
        and then use the data viewer to import the data from the file into the “mytable”
        table. (Click to see full instructions)
      U4 - Charts - Import Data 2_instruction: |
        Call readRecords on “mytable” and
        print each record to the console. (Click to see full instructions)
      U4 - Charts - Line Chart 1_instruction: |
        Create a line chart showing the change
        in popularity of “#tbt” over time. (Click to see full instructions)
      U4 - Charts - Line Chart 2_instruction: |
        Add a second line to your chart to
        show the change in popularity of both “#tbt” and “#nofilter” at the same time.
        (Click to see full instructions)
      U4 - Charts - Line Chart Template_instruction: This is a template.
      U4 - Charts - Remixing Apps with Data_instruction: |
        Run this app and see what
        it prints to the console. Then remix the app and run the remixed version to
        see what happened to the data. (Click to see full instructions)
      U4 - Charts - Scatter Chart_instruction: |
        Create a scatter plot of the “rottenTomatoes”
        table, using the new table and column names. (Click to see full instructions)
      U4 - CreateRecord - 1_instruction: |
        Add a createRecord command and run the
        program. (Click to see full instructions)
      U4 - CreateRecord - 2.5_instruction: |
        Change the table name in createRecord
        then check the Data Viewer to see the new table. (Click to see  full instructions)
      U4 - CreateRecord - 2_instruction: |
        Change the name from "Alice" to something
        else in the createRecord command.  Run the program and use the Data Viewer
        to see the changes to your table. (Click to see full instructions)
      U4 - CreateRecord - 3_instruction: |
        Use createRecord to add the song object
        as a record to a table. (Click to see full instructions)
      U4 - CreateRecord - 4_instruction: |
        Run the program. Verify the song object
        was added to the database. Note the callback function now displays the copy
        of the record sent back back by the database. (Click to see full instructions)
      U4 - CreateRecord - 5_instruction: |
        Add a property to the JavaScript object,
        then run the program.  View the data table and see how changing the object
        affects the data table. (Click to see full instructions)
      U4 - debug column names are case sensitive_instruction: |
        Change song.title
        to song.Title (capital T).  And run the program.  Check the data table  (Click
        to see full instructions)
      U4 - deleteRecords 0_instruction: |
        Use the deleteRecord command with default
        values. Verify the record was deleted. (Click for full instructions).
      U4 - deleteRecords 1_instruction: |
        Find the id of "Little Bunny Foo Foo"
        in the data table "mySongs".  Use the deleteRecord command to delete it.  See
        what happens when you try to delete an ID a second time. (Click for full Instructions).
      U4 - deleteRecords 2 delete object_instruction: |
        Use the song object to delete
        multiple objects in the database by changing only the "id" property. (Click
        for full Instructions).
      U4 - deleteRecords 2_instruction: |
        Using the data viewer, find the id of a
        a record you want to delete. Use the deleteRecord command to delete it. (Click
        for full instructions).
      U4 - Edit Data Table by Hand_instruction: |
        View the data table and click edit
        next to each row.  Add the artists names for each song by hand. (Click to
        see full instructions)
      U4 - Exploring Data Tools - Template_instruction: |
        Use createRecord to add
        the song object as a record to a table. (Click to see full instructions)
      U4 - fix contacts by hand in data table_instruction: |
        Use the data viewer to
        add rows to the data table.  Add the original hard-coded contacts from your
        app to the database. (Click to see full instructions)
      U4 - last stage test adding contcts_instruction: |
        Confirm that new contacts
        you add are saved to the database.  Verify that after restarting your app,
        the contacts you added no longer show in the app, but still exist in the database.
        (Click to see full instructions)
      U4 - Objects - accessingPropertiesInArray_instruction: |
        Access the properties
        of the objects stored in an array. (Click to see full instructions)
      U4 - Objects - arraysOfObjects_instruction: |
        Create an array called "students"
        and add all 5 student objects to the array. (Click to see full instructions)
      U4 - Objects - createContactObject_instruction: |
        Construct a new object from
        the user inputs, and append it to your array. (Click to see full instructions)
      U4 - Objects - createContactsData_instruction: |
        Add values to the three contact
        objects provided in the starter code. (Click to see full instructions)
      U4 - Objects - createDotNotation_instruction: |
        Create a student Object yourself.
        Add properties to your object one at a time using dot notation. (Click to
        see full instructions)
      U4 - Objects - createObject_instruction: |
        Create an object with at least 3
        properties and display it in the Debug Console. (Click to see full instructions)
      U4 - Objects - dotNotation_instruction: |
        Use dot notation to display individual
        properties of the object. (Click to see full instructions)
      U4 - Objects - eventHandlersToSwitchScreen_instruction: |
        Attach event handlers
        to the "Add Contact" and "Go Back" buttons that allow the user to switch
        screens. (Click to see full instructions)
      U4 - Objects - eventParameter_instruction: |
        Trigger both the keyboard and mouse
        event and examine the event objects displayed in the console. Why might an
        object be the best way to store this information? (Click to see full instructions)
      U4 - Objects - exemplarContactsApp_instruction: |
        Use the Contacts app and then
        add a contact of your own. (Click to see full instructions)
      U4 - Objects - loopingArray_instruction: |
        Loop over your array of students
        and print the name of every students. (Click to see full instructions)
      U4 - Objects - loopingArray2_instruction: |
        Loop over your array of students
        and print the name and grade of every student. (Click to see full instructions)
      U4 - Objects - loopingCompoundConditions_instruction: |
        Loop over the array
        of students and display the information of students who are present and in
        the 11th grade. (Click to see full instructions)
      U4 - Objects - loopingConditions_instruction: |
        Loop over your array of student
        objects and display the names of every student who is present in class. (Click
        to see full instructions)
      U4 - Objects - pullValues_instruction: |
        Create an event handler for the "Save
        Contact" button that displays the contents of the 4 text input fields in
        the console. (Click to see full instructions)
      U4 - Objects - readStarterCode_instruction: |
        Familiarize yourself with the
        starter code and UI elements provided. (Click to see full instructions)
      U4 - Objects - resetIndexAndShow_instruction: |
        Add code to your event handler
        for the "Save Contact" button so that when a new contact is added, the inputs
        are cleared, the screen is switched, and the correct contact is shown. (Click
        to see full instructions)
      U4 - Objects - showContact1_instruction: |
        Add code to the showCurrentContact
        function to show the name of the contact stored at the currentIndex of your
        array. (Click to see full instructions)
      U4 - Objects - showContact2_instruction: |
        Add the phone number and birthday
        text to your text area. (Click to see full instructions)
      U4 - Objects - showContact3_instruction: |
        Display the image information for
        each contact. (Click to see full instructions)
      U4 - Objects - showSampleImage_instruction: |
        Attach an event handler to the
        image URL text input so that the user can confirm their image will work as
        expected. (Click to see full instructions)
      U4 - Objects - writeWrap_instruction: |
        Use the wrap function to prevent currentIndex
        from leaving the bounds of your array. (Click to see full instructions)
      U4 - Read Record - 1.2_instruction: |
        Place a console.log command below the
        readRecords command. (Click to see full instructions)\r
      U4 - Read Record - 1.3_instruction: |
        Add a console.log command inside the callback
        function. (Click to see full instructions)\r
      U4 - Read Record - 1_instruction: |
        Use console.log to display the records returned
        by a call to readRecords. (Click to see full instructions)\r
      U4 - Read Record - 2_instruction: |
        Change the table name so that the records
        are read from the new table. (Click to see full instructions)\r
      U4 - Read Record - 3_instruction: |
        Change the name of the table in a readRecords
        command to read from a table that does not exist. (Click to see full instructions)\r
      U4 - Read Record - 4.1_instruction: |
        Use indexes and dot notation to reference
        values in the response from the database. (Click to see full instructions)\r
      U4 - Read Record - 4_instruction: |
        Print out each record return from the readRecords
        call individually. (Click to see full instructions)\r
      U4 - Read Record - 5_instruction: |
        Using a for loop, display the title of each
        movie in your database. (Click to see full instructions)\r
      U4 - Read Record - part 1 - template_instruction: |
        Use console.log to display
        the records returned by a call to readRecords. (Click to see full instructions)\r
      U4 - ReadRecords - Contacts App 1_instruction: |
        Use readRecords to copy the
        data in your database into your "contacts" global variable and call showCurrentContact.
        (Click to see full instructions)
      U4 - ReadRecords - Contacts App 2_instruction: |
        Create a function called refreshLocalData.
        (Click to see full instructions)
      U4 - ReadRecords - Contacts App 3_instruction: |
        Add a call to "refreshLocalData"
        to the callback function of the createRecord you use to add a new contact
        to your database. (Click to see full instructions)
      U4 - ReadRecords - Contacts App 4_instruction: |
        Create a "Delete" button.
        (Click to see full instructions)
      U4 - ReadRecords - Contacts App 5 make delete work_instruction: |
        Create an
        event handler for the "Delete" button you created. (Click to see full instructions)
      U4L02 - Objects - createObject_instruction: "Create an object with at least\n5
        values including at least one string and one number. (Click to see full\ninstructions)
        \n"
      U4L02 - Objects - eventParameter_instruction: |
        Trigger both the keyboard and
        mouse event and examine the event objects displayed in the console. Why might
        an object be the best way to store this information? (Click to see full instructions)
      U4L02 - Objects - Template1_instruction: "템플릿"
      U4L06 Data Storage 1_instruction: |
        Fill in your name instead of "Enter Your
        Name", run the app and click the button. Run it multiple times with different
        names! Watch the console and use the ‘View Data” button to see how the table
        is updated. As you play around make sure you can explain the purpose of each
        of the circled parts of the diagram.\r
        \r
      U4L06 Data Storage 2_instruction: "The app is a continuation of the previous\none
        we started. Add a text label to collect the users name and use that as\nthe
        data input for the record.\\r\n\\r\nRun the app and click the button multiple\ntimes
        and see what happens. Is there a problem you notice? "
      U4L06 Data Storage 3_instruction: |
        We want to improve the user experience.
        Once they have submitted their data for storage, it would be nice to clear
        the textbox.  Update your app to clear the textbox after the data is stored.
      U4L06 Data Storage 4_instruction: |
        Add a label and drop down box, to your app
        and save the data to your JSON object and add it to your table. Make sure
        to reset the dropdown after the data is stored.
      U4L06 Data Storage 5_instruction: "Add a couple radio buttons or checkboxes\nto
        our app. Then find a way to collect the data from those. \n"
      U4L06 Data Storage 6_instruction: " Use one of the getTime() and getUserId()\nblocks
        to collect additional data. \n"
      U4L06 Data Storage 7_instruction: |
        Add a second screen to the sample app we
        have been building to capture an image from a user. Return to screen 1 after
        the JSON object has been stored in the table.
      U4L15 Read Data 1_instruction: |
        Run the level and see what happens. Then edit
        the code to make it print a different column of information.
      U4L15 Read Data 2_instruction: |-
        Student should create a sentence which puts
        together all the pieces from a record.\r
        \r
        <<Name>> is <<Age>> years old
        and like <<Food>>
      U4L15 Read Data 3_instruction: |
        Print the sentence using the first JSON object
        in the array\r
        \r
      U4L15 Read Data 4_instruction: |-
        \r
        Use a random record from the list of records
        to display your sentence.
      U6 - Final Project - Project Level_instruction: |
        Build your final project here.
        (Click to see full instructions)
      U6 - updateRecord - Callback Success Parameter_instruction: |
        Add an if-else
        block inside the callback function for updateRecord. (Click to see full instructions)
      U6 - updateRecord - Contacts - Edit event handler_instruction: |
        Write event
        handlers for the Edit Contacts UI elements. (Click to see full instructions)
      U6 - updateRecord - Contacts - Edit UI_instruction: |
        Set up the UI elements
        needed to edit contacts. (Click to see full instructions)
      U6 - updateRecord - Contacts - Save edited contact_instruction: |
        Use updateRecord
        to store the user's edits in the database. (Click to see full instructions)
      U6 - updateRecord - Default Block_instruction: |
        Use updateRecord to change
        the record for "Eye of the Tiger." (Click to see full instructions)
      U6 - updateRecord - Update Nonexistent Record_instruction: |
        Force updateRecord
        to fail by changing the ID of songToUpdate. (Click to see full instructions)
      Underground Avoiding Lava_instruction: 이 블록들 아래에 용암이 숨어있습니다. 앞으로 이동하기 전에 덮어야
        해요. "if"(만약) 명령은 여기서 유용할 거에요. 올바른 곳에 "앞으로 이동" 명령을 더해서 이 블록을 채굴하세요.
      Underground If Statements_instruction: 퍼즐이 점점 더 어려워지고 있어요. 레드스톤 3개를 채굴하세요. 하지만
        용암으로 떨어지지는 마세요. "if"(만약) 명령을 사용해서 발견한 용암 위에 조약돌을 놓으세요.
      Underground Iron_instruction: "녹은 용암 속으로 걸어 들어가는 건 좋은 생각이 아니에요. 조약돌을 놓아서 다리를
        만든 후 철 블록을 2개 이상 채굴하세요."
      Underground Mine in a Circle_instruction: "다이아몬드 5개와 레드스톤 7개를 얻을 방법을 찾아보세요!
        반복 명령 안에서 반복 명령을 사용해서 사각형으로 걸어보세요."
      Underground Mining Coal_instruction: "가장 귀중한 자원은 땅속에서 찾을 수 있어요. 하지만, 땅속은 어두울
        수 있지요. 횃불을 2개 이상 놓고 석탄을 2개 이상 채굴하세요."
      Underground Test Level_instruction: "모든 광석을 모아주세요!"
      Vigenere_instruction: Test
      XML Scratchpad_instruction: Using this test level to grab xml for unit tests
