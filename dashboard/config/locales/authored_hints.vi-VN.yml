---
vi-VN:
  data:
    authored_hints:
      2-3 Artist 1 new:
        2-3_Artist_1_new_a: Nếu bạn sử dụng khối lệnh để tôi `di chuyển về phía trước
          100 pixel`, tôi sẽ tự động vẽ một đường thẳng.
        2-3_Artist_1_new_b: Gặp khó khăn khi rẽ ở góc? Hãy dùng block `rẽ phải 90
          độ`.
      2-3 Artist 11:
        2-3_Artist_11_a: 'Gặp rắc rối với các góc? Bạn cần phải đi 360 độ 8 lần lượt.  360/8
          là gì? '
      2-3 Artist 12:
        2-3_Artist_12_a: Một vòng tròn có 360 độ, vì vậy nếu người hoạ sĩ xoay 1 độ
          mỗi lần trong loop code, anh ta sẽ cần xoay 360 lần.
      2-3 Artist 2 new:
        2-3_Artist_2_new_a: Người hoạ sĩ dường như không hướng về đúng mục đích. Bạn
          có thể làm anh ta xoay trước khi vẽ đường thẳng không?
      2-3 Artist 3new:
        2-3_Artist_3new_a: 100-70 bằng bao nhiêu? Dựa vào kết quả này, đó sẽ là chiều
          cao mà chiếc mũ cần phải có!
        2-3_Artist_3new_b: Người hoạ sĩ dường như không hướng về đúng mục đích. Bạn
          có thể làm anh ta xoay trước khi vẽ đường thẳng không?
      2-3 Artist 4:
        2-3_Artist_4_a: Để hoàn thành ngôi nhà, tất cả chúng ta cần làm là vẽ một
          hình vuông!
      2-3 Artist 6:
        2-3_Artist_6_b: Vì tôi đã hướng về bên phải, sẽ dễ hơn khi bắt đầu di chuyển
          về phía trước, sau đó quẹo trái để tạo thành hình tam giác.
        2-3_Artist_6_c: Mỗi cạnh của hình tam giác có chiều dài tương tự như mỗi cạnh
          của hình vuông...100 pixels!
      2-3 Artist 7:
        2-3_Artist_7_a: Các dễ nhất để giải bài đố này là vẽ hình vuông thứ nhất và
          kết thúc với việc người hoạ sĩ hướng về phía dưới trước khi bạn bắt đầu
          vẽ hình vuông thứ hai.
      2-3 Artist 8:
        2-3_Artist_8_a: Nếu bạn giảm một nửa của 200, mỗi hình vuông cần bao nhiêu
          pixels chiều rộng?
      2-3 Artist 9 NEW:
        2-3_Artist_9_a: Kim cương này thật ra chỉ là một hình vuông nằm ở góc 45 độ
      2-3 Artist Debugging 10:
        2-3_Artist_Debugging_10_b: "**Thử và phạm lỗi là hoàn toàn bình thường ở đây!**
          \n\nHãy bắt đầu bằng việc thay đổi một con số mỗi lần.\n\nNhững con số nào
          làm điều đó?\n\nNếu bạn không thể, chỉ cần click \"Bắt đầu lại\" và code
          của bạn sẽ được reset."
      2-3 Artist Debugging 2:
        2-3_Artist_Debugging_2_a: 'Gợi ý: Các thác từng là 75 điểm ảnh lâu dài.'
      2-3 Artist Debugging 3:
        2-3_Artist_Debugging_3_a: Mỗi lượt lag 15 độ tối thiểu.
        2-3_Artist_Debugging_3_b: Nếu chương trình chạy quá nhanh để xem chuyện gì
          đã xảy ra, hãy thử làm chậm nó lại với thành trượt.
      2-3 Artist Debugging 7:
        2-3_Artist_Debugging_7_a: Chuyện gì sẽ xảy ra nếu họa sĩ di chuyển hoặc nhảy
          về sau khi ông vẽ nét đầu tiên?
      2-3 Artist Debugging 9:
        2-3_Artist_Debugging_9_a: Người họa sĩ cần quay thêm 60 độ về bên trái trước
          khi bắt đầu vẽ!
        2-3_Artist_Debugging_9_b: Bạn không cần phải thêm một khối khác để có một
          vòng quay đầy đủ, bạn chỉ cần thêm 60 độ vào khối `rẽ trái bởi` đã có sẵn!
      2-3 Artist Functions 1:
        2-3_Artist_Functions_1_a: Mỗi hình vuông có cạnh dài 100 điểm ảnh, điều đó
          có nghĩa là bạn cần đi về phía trước 175 điểm ảnh trước khi vẽ hình vuông
          thứ hai.
        2-3_Artist_Functions_1_b: Bạn có thể vẽ các nét trùng nhau để làm cái kính
          của bạn.
      2-3 Artist Functions 11:
        2-3_Artist_Functions_11_a: Bạn sẽ cần thay đổi không chỉ các con số và chiều
          dài cạnh trong hàm, mà còn là góc mà nhà họa sĩ rẽ giữa các cạnh.
      2-3 Artist Functions 12:
        2-3_Artist_Functions_12_a: Thử chạy mã để xem bạn cần thêm cái gì.
      2-3 Artist Functions 2:
        2-3_Artist_Functions_2_a: |-
          Chương trình của bạn cần:

          -   Dùng hàm\\
          -   Tiến về phía trước 100 + 75 điểm ảnh
          -   Dùng hàm
      2-3 Artist Functions 3:
        2-3_Artist_Functions_3_a: "\\*\\* 115 + 45 = 160 \\*\\*"
      2-3 Artist Functions 4:
        2-3_Artist_Functions_4_a: Nhà họa sĩ cần quay 120 độ giữa những hình vuông
          để hoàn thành thiết kế này.
      2-3 Artist Loops New 11:
        2-3_Artist_Loops_New_11_b: Khối rẽ mới của bạn nên nằm ở phần **cuối** của
          đoạn mã bên trong vòng lặp.
      2-3 Artist Loops New 12:
        2-3_Artist Loops_New_12_a: Trước khi bắt đầu vẽ hình thoi, nhà họa sĩ cần
          phải rẽ trái 60 độ để bắt đầu vẽ đúng hướng.
        2-3_Artist Loops_New_12_b: Sau khi nhà họa sĩ tiến lên 100 điểm ảnh, ông sẽ
          cần rẽ phải 120 độ để tạo ra góc nhọn.
        2-3_Artist Loops_New_12_c: Nhà họa sĩ sẽ chỉ cần rẽ phải 60 độ để tạo ra góc
          rộng.
      2-3 Artist Loops New 13:
        2-3_Artist_Loops_New_13_a: "Ở cuối mỗi hình thoi, nhà họa sĩ đã ở đúng góc
          để bắt đầu hình tiếp theo. \n\n Do đó, chúng ta không cần thêm một khối
          `rẽ trái bởi` trước khi bắt đầu lại."
      2-3 Artist Loops New 9:
        2-3_Artist_Loops_New_9_a: Nhà họa sĩ cần rẽ phải 45 độ trước khi bắt đầu vẽ.
        2-3_Artist_Loops_New_9_b: Chữ V này thật ra chỉ là một nửa hình vuông.  Cái
          gì sẽ là đoạn mã để vẽ một nửa hình vuông?
      2-3 Artist Nested Loops 1:
        2-3_Artist_Nested_Loops_1_a: Nhớ đặt các khối xám vào trong vòng lặp của bạn.
      2-3 Artist Nested Loops 3:
        2-3_Artist_Nested_Loops_3_a: "Cần trợ giúp với các góc? \n**360/12 = 30**"
        2-3_Artist_Nested_Loops_3_b: Nhớ đặt tất cả các đoạn mã màu xám và khối rẽ
          vào trong vòng lặp.
      2-3 Artist Nested Loops 4:
        2-3_Artist_Nested_Loops_3_a: "Cần trợ giúp với các góc? \n**360/12 = 30**"
      2-3 Artist Nested Loops 5:
        2-3_Artist_Nested_Loops_5_a: "Thử dùng khối `nhảy về phía trước` để đi từ
          hình vuông này đến điểm bạn bắt đầu hình vuông tiếp theo. \n\nNếu các hình
          vuông cao 20 điểm ảnh và chúng cách nhau 20 điểm ảnh, bạn sẽ cần nhảy bao
          xa?"
      2-3 Artist Nested Loops 7:
        2-3_Artist_Nested_Loops_7_a: "Bạn cần quay bao xa trong mỗi vong lặp? \n\n360/10
          ra bao nhiêu?"
      2-3 Artist Nested Loops 9:
        2-3_Artist_Nested_Loops_9_a: Cần trợ giúp tìm góc chính xác? \*\* 360 / 12
          = 30 \*\*
      2-3 Bee Conditionals 14:
        2-3_Bee_Conditionals_14_a: Gặp khó khăn trong việc tìm cách đặt các khối?  Thử
          coi bông hoa đỏ giống hệt bông hoa tím xem!
        2-3_Bee_Conditionals_14_b: Nếu bông hoa đỏ có màu tím, bạn có thể tìm ra cách
          dùng thêm một vòng lặp để giảm số khối trong mã không?
      2-3 Bee Conditionals 15:
        2-3_Bee_Conditionals_15_a: 'Nhớ rằng: Những bông hoa tím có 0 hoặc 1 mật hoa
          và nó có thể thay đổi mỗi làn bạn chạy chương trình.'
      2-3 Bee Conditionals 3:
        2-3_Bee_Conditionals_3_a: Đoạn mã sẽ ngắn nhất khi bạn dùng một vòng lặp mỗi
          khi bạn tiến lên, một vòng lặp khác để thu hoạch mật hoa, và một cái nữa
          để làm mật ong.
      2-3 Bee Conditionals 6:
        2-3_Bee_Conditionals_6_a: 'Nhớ rằng: Những bông hoa tím thay đổi giữa 0 và
          1 mật hoa khi bạn chạy chương trình!'
      2-3 Bee Debugging 1:
        2-3_Bee_Debugging_1_a: Một khi bạn tìm ra và sửa được khối sai, bạn có nhìn
          thấy mẫu nào mà có thể thu gọn được dùng vòng lặp không?
      2-3 Bee Debugging 2:
        2-3_Bee_Debugging_2_a: Một khi bạn tìm ra và sửa được khối sai, bạn có nhìn
          thấy mẫu nào mà có thể thu gọn được dùng vòng lặp không?
      2-3 Bee Debugging 4:
        2-3_Bee_Debugging_4_a: Có chỗ nào mà con ong làm điều gì đó vô lý không? Điều
          gì xảy ra khi bạn đổi khối đó?
      2-3 Bee Functions 4:
        2-3_Bee_Functions_4_a: Bạn không cần phải dùng một vòng lặp với hàm. Thử di
          chuyển, dùng hàm, xong di chuyển và dùng hàm một lần nữa.
      2-3 Bee Functions 6:
        2-3_Bee_Functions_6_a: Bạn không cần phải dùng một vòng lặp với hàm. Thử di
          chuyển, dùng hàm, xong di chuyển và dùng hàm một lần nữa.
      2-3 Bee Functions 8:
        2-3_Bee_Functions_8_a: "Nếu câu đố có vẻ khó khăn, thử xây dựng hàm của bạn
          từng chút một. \n\nThêm vài khối, rồi thử chúng. Thêm nhiều hơn, rồi thử
          lại.  Sẽ có lúc bạn hoàn thành nó!\n\n![](https://images.code.org/3875224b35889000a0998ca25cfa4ecf-image-1467996493914.gif)"
      2-3 Bee Functions 9:
        2-3_Bee_Functions_8_a: "Nếu câu đố có vẻ khó khăn, thử xây dựng hàm của bạn
          từng chút một. \n\nThêm vài khối, rồi thử chúng. Thêm nhiều hơn, rồi thử
          lại.  Sẽ có lúc bạn hoàn thành nó!"
        2-3_Bee_Functions_8_b: |-
          Nhớ xây dựng đoạn mã của bạn bên trong khối hàm màu xanh lá cây.

          ![](https://images.code.org/8fe1fae5caf4ede3a9c9bd9f26940cde-image-1467996837459.gif)
      2-3 Bee Loops 2:
        2-3_Bee_Loops_2_a: Bạn cần có bốn khối bên trong vòng lặp của bạn.
      2-3 Bee Loops 3:
        2-3_Bee_Loops_3_a: Bạn cần có 6 khối bên trong vòng lặp.
      2-3 Bee Loops 3B:
        2-3_Bee_Loops_3B_a: Bạn sẽ cần hai vòng lặp khác nhau, một cái sau cái còn
          lại.
      2-3 Bee Loops 4:
        2-3_Bee_Loops_4_a: Bạn cần có năm khối bên trong vòng lặp của bạn.
      2-3 Bee Loops 4A:
        2-3_Bee_Loops_4A_a: Hành động đầu tiên sẽ là rẽ thay vì di chuyển.
        2-3_Bee_Loops_4A_b: Phần cuối của chương trình có thể được kết thúc bằng cách
          viết mã ở phần cuối chương trình, bên ngoài vòng lặp của bạn.
        2-3_Bee_Loops_4A_c: Nếu bạn không thể nhận ra những vòng lặp, hãy thử viết
          mã theo cách dài trước, sau đó xem bạn có thể kết hợp mã lại thành một vòng
          lặp 'lặp lại' ở cuối.
      2-3 Bee Loops 5:
        2-3_Bee_Loops_5_a: Nếu bạn không thể nhận ra các khối để bỏ vào 'lặp lại'
          ngay lập tức, hãy bắt đầu bằng cách viết ra mã của mỗi bước và tìm một mô
          hình chung.
      2-3 Bee Loops 6:
        2-3_Bee_Loops_6_a: Nếu bạn không biết cái gì cần đi vào vòng lặp 'lặp lại',
          hãy thử kéo từng khối mội ra và xem nếu bạn có thể tìm ra một mô hình chung.
        2-3_Bee_Loops_6_b: Phải có 6 khối bên trong vòng lặp 'lặp lại' của bạn khi
          bạn kết thúc.
      2-3 Bee Loops 7:
        2-3_Bee_Loops_7_a: Hành động đầu tiên sẽ là rẽ thay vì di chuyển.
        2-3_Bee_Loops_7_b: vòng lặp
      2-3 Maze 6:
        2-3_Maze_6_a: Có hai cách để giải câu đố này!
      CourseD_Dance_Party_01:
        validation: |-
          **Làm sao để tôi vượt qua cấp độ này?**

          -   Hãy đảm bảo rằng một vũ công xuất hiện trên màn hình.

          _Cấp độ này kết thúc sau 4 nhịp._
        challenges: |-
          **Thử thách tùy chọn**

          -   Chọn một bài hát khác để phát.
          -   Chọn một đối tượng khác trông giống nai sừng tấm!
          -   Đổi tên vũ công.
      CourseD_Dance_Party_02:
        validation: |-
          **Làm sao để tôi vượt qua cấp độ này?**

          -   Vũ công cần chuyển sang động tác mới sau 4 nhịp.

          _Cấp độ này kết thúc sau 8 nhịp._
      CourseD_Dance_Party_03:
        validation: |-
          **Làm sao để tôi vượt qua cấp độ này?**

          -   Sau 6 nhịp, vũ công cần làm một vũ điệu khác ngoài vũ điệu sau 4 nhịp.

          _Cấp độ này kết thúc sau 12 nhịp._
      CourseD_Dance_Party_04:
        validation: |-
          **Làm sao để tôi vượt qua cấp độ này?**

          -   Bạn cần để làm hiệu ứng nền thay đổi ở thời điểm nhịp thứ bảy của bài hát.

          _Cấp độ này kết thúc sau 10 nhịp._
        challenges: |-
          **Thách thức phụ**

          Thay đổi hiệu ứng nền ở những thời điểm khác nhau trong bài hát bằng cách liên kết những khối mới theo sự kiện <xml><block type="Dancelab_atTimestamp"><title name="TIMESTAMP">???</title><title name="UNIT">"nhịp"</title></block></xml>.
      CourseD_Dance_Party_06:
        validation: |-
          **Làm sao để tôi vượt qua cấp độ này?**

          -   Bạn cần có ít nhất hai vũ công.

          _Cấp độ này kết thúc sau 6 nhịp._
        challenges: |-
          **Thách thức phụ**

          -   Thêm vũ công thứ ba (hoặc một số lượng vũ công tùy ý!)
          -   Làm cho tất cả các vũ công của bạn thực hiện các động tác khác nhau tại các thời điểm khác nhau trong bài hát.
      CourseD_Dance_Party_08:
        validation: |-
          **Làm sao để tôi vượt qua cấp độ này?**

          -   Hai vũ công cần phải có một kích cỡ khác ngoài 100.

          _Cấp độ này kết thúc sau 6 nhịp._
        challenges: |-
          **Thách thức phụ**

          -   Thử nghiệm bằng cách thay đổi các thuộc tính khác (chiều rộng, chiều cao, xoay, v.v.)
      CourseD_Dance_Party_09:
        validation: |-
          **Làm sao để tôi vượt qua cấp độ này?**

          -   Thay đổi sắc thái của ít nhất một vũ công.

          _Cấp độ này kết thúc sau 8 nhịp._
      CourseD_Dance_Party_10:
        validation: |-
          **Làm sao để tôi vượt qua cấp độ này?**

          -   Thuộc tính cho hai vũ công trở lên phải thay đổi.

          _Cấp độ này kết thúc sau 8 nhịp._
      CourseD_Dance_Party_11:
        validation: |-
          **Làm sao để tôi vượt qua cấp độ này?**

          -   Thoải mái sáng tạo!

          _Cấp độ này kết thúc sau 8 nhịp._
      CourseD_Dance_Party_11_5:
        validation: |-
          **Làm sao để tôi vượt qua cấp độ này?**

          -   Thoải mái sáng tạo!

          _Cấp độ này kết thúc sau 8 nhịp._
      CourseD_Dance_Party_11b:
        validation: |-
          **Làm sao để tôi vượt qua cấp độ này?**

          -   Sử dụng khối `when left arrow pressed` để làm Robot thực hiện một động tác nhảy khi bạn nhấn mũi tên trái.

          _Cấp độ này kết thúc sau 8 nhịp._
      CourseE_HOC 2018 Level_10:
        voyage_aquatic_10a: Bạn có thấy **Đèn biển** [https://images.code.org/471b33234222ddffb463aeb65de6b371-image-1539183353423.net-resizeimage.png]?
          Bạn có thể sử dụng câu lệnh có điều kiện với chúng để vượt qua Tòa nhà đại
          dương?
      CourseE_HOC 2018 Level_7a:
        aquatic7: Bạn có thể sử dụng khối lệnh nếu để giúp bạn thực hiện những ngã
          rẽ đúng.
      CourseE_HOC 2018 Level_9b:
        voyage_aquatic_9a: Hãy xem các khối lệnh san hô màu đỏ và màu xanh? Sử dụng
          chúng như điểm chỉ dẫn để rẽ phải hoặc trái qua các rạn san hô.
      Dance_Party_01:
        validation: |-
          **Làm sao để tôi vượt qua cấp độ này?**

          -   Hãy đảm bảo rằng một vũ công xuất hiện trên màn hình.

          _Cấp độ này kết thúc sau 4 nhịp._
        challenges: |-
          **Thử thách tùy chọn**

          -   Chọn một bài hát khác để phát.
          -   Chọn một đối tượng khác trông giống nai sừng tấm!
          -   Đổi tên vũ công.
      Dance_Party_02:
        validation: |-
          **Làm sao để tôi vượt qua cấp độ này?**

          -   Vũ công cần chuyển sang động tác mới sau 4 nhịp.

          _Cấp độ này kết thúc sau 8 nhịp._
      Dance_Party_03:
        validation: |-
          **Làm sao để tôi vượt qua cấp độ này?**

          -   Sau 6 nhịp, vũ công cần làm một vũ điệu khác ngoài vũ điệu sau 4 nhịp.

          _Cấp độ này kết thúc sau 12 nhịp._
      Dance_Party_04:
        validation: |-
          **Làm sao để tôi vượt qua cấp độ này?**

          -   Bạn cần để làm hiệu ứng nền thay đổi ở thời điểm nhịp thứ bảy của bài hát.

          _Cấp độ này kết thúc sau 10 nhịp._
        challenges: |-
          **Thách thức phụ**

          Thay đổi hiệu ứng nền ở những thời điểm khác nhau trong bài hát bằng cách liên kết những khối mới theo sự kiện <xml><block type="Dancelab_atTimestamp"><title name="TIMESTAMP">???</title><title name="UNIT">"nhịp"</title></block></xml>.
      Dance_Party_06:
        validation: |-
          **Làm sao để tôi vượt qua cấp độ này?**

          -   Bạn cần có ít nhất hai vũ công.

          _Cấp độ này kết thúc sau 6 nhịp._
        challenges: |-
          **Thách thức phụ**

          -   Thêm vũ công thứ ba (hoặc một số lượng vũ công tùy ý!)
          -   Làm cho tất cả các vũ công của bạn thực hiện các động tác khác nhau tại các thời điểm khác nhau trong bài hát.
      Dance_Party_08:
        validation: |-
          **Làm sao để tôi vượt qua cấp độ này?**

          -   Hai vũ công cần phải có một kích cỡ khác ngoài 100.

          _Cấp độ này kết thúc sau 6 nhịp._
        challenges: |-
          **Thách thức phụ**

          -   Thử nghiệm bằng cách thay đổi các thuộc tính khác (chiều rộng, chiều cao, xoay, v.v.)
      Dance_Party_09:
        validation: |-
          **Làm sao để tôi vượt qua cấp độ này?**

          -   Thay đổi sắc thái của ít nhất một vũ công.

          _Cấp độ này kết thúc sau 8 nhịp._
      Dance_Party_10:
        validation: |-
          **Làm sao để tôi vượt qua cấp độ này?**

          -   Thuộc tính cho hai vũ công trở lên phải thay đổi.

          _Cấp độ này kết thúc sau 8 nhịp._
      Dance_Party_11:
        validation: |-
          **Làm sao để tôi vượt qua cấp độ này?**

          -   Thoải mái sáng tạo!

          _Cấp độ này kết thúc sau 8 nhịp._
      Dance_Party_11_5:
        validation: |-
          **Làm sao để tôi vượt qua cấp độ này?**

          -   Thoải mái sáng tạo!

          _Cấp độ này kết thúc sau 8 nhịp._
      Dance_Party_11b:
        validation: |-
          **Làm sao để tôi vượt qua cấp độ này?**

          -   Sử dụng khối `when left arrow pressed` để làm Robot thực hiện một động tác nhảy khi bạn nhấn mũi tên trái.

          _Cấp độ này kết thúc sau 8 nhịp._
      Function intro Ryan:
        Function_intro_Ryan_b: Nếu bạn sử dụng chính xác các chức năng, sẽ có một
          con đường bạn có thể di chuyển...
        Function_intro_Ryan_a: Bạn có thể sử dụng một chức năng nhiều lần trong chương
          trình của bạn!  Hãy thử dùng nó hai lần để giải quyết câu đố này.
      Function intro Ryan_2019:
        Function_intro_Ryan_b: Nếu bạn sử dụng chính xác các chức năng, sẽ có một
          con đường bạn có thể di chuyển...
        Function_intro_Ryan_a: Bạn có thể sử dụng một chức năng nhiều lần trong chương
          trình của bạn!  Hãy thử dùng nó hai lần để giải quyết câu đố này.
      HOC 2018 Level_10:
        voyage_aquatic_10a: Bạn có thấy **Đèn biển** [https://images.code.org/471b33234222ddffb463aeb65de6b371-image-1539183353423.net-resizeimage.png]?
          Bạn có thể sử dụng câu lệnh có điều kiện với chúng để vượt qua Tòa nhà đại
          dương?
      HOC 2018 Level_7a:
        aquatic7: Bạn có thể sử dụng khối lệnh nếu để giúp bạn thực hiện những ngã
          rẽ đúng.
      HOC 2018 Level_9b:
        voyage_aquatic_9a: Hãy xem các khối lệnh san hô màu đỏ và màu xanh? Sử dụng
          chúng như điểm chỉ dẫn để rẽ phải hoặc trái qua các rạn san hô.
      MC_HOC_2017_01_RETRY:
        MC_HOC_2017_01_RETRY_a: Kéo khối lệnh 'di chuyển về phía trước' từ hộp công
          cụ tới không gian làm việc, và đặt nó vào vị trí bên dưới khối lệnh 'khi
          chạy chương trình'.
        MC_HOC_2017_01_RETRY_b: Đừng quên nhấn "Chạy" để kích hoạt các dòng lệnh cho
          Đặc vụ.
        MC_HOC_2017_01_RETRY_c: Một khi Đặc vụ đã thực hiện hết các dòng lệnh bạn
          lập trình cho nó, bạn có thể di chuyển người chơi bằng các phím mũi tên!
      MC_HOC_2017_01_RETRY_2019:
        MC_HOC_2017_01_RETRY_a: Kéo khối lệnh 'di chuyển về phía trước' từ hộp công
          cụ tới không gian làm việc, và đặt nó vào vị trí bên dưới khối lệnh 'khi
          chạy chương trình'.
        MC_HOC_2017_01_RETRY_b: Đừng quên nhấn "Chạy" để kích hoạt các dòng lệnh cho
          Đặc vụ.
        MC_HOC_2017_01_RETRY_c: Một khi Đặc vụ đã thực hiện hết các dòng lệnh bạn
          lập trình cho nó, bạn có thể di chuyển người chơi bằng các phím mũi tên!
      MC_HOC_2017_02_Cole:
        MC_HOC_2017_02_Cole_a: Di chuyển Đặc vụ về phía trước 2 ô để đứng trên tấm
          áp lực. Như vậy cánh cửa cho người chơi của bạn sẽ được mở ra.
        MC_HOC_2017_02_Cole_b: |-
          Nhấn "Chạy"!

          Bạn có thể chạy dòng mã lệnh ngay cả khi nó chưa đúng. Bạn có thể chạy và khởi động lại mã lệnh hết lần này đến lần khác cho đến khi bạn phát hiện ra sai ở đâu.
        MC_HOC_2017_02_Cole_c: Khi Đặc vụ đã giúp mở cánh cửa, bạn hãy sử dụng phím
          mũi tên để di chuyển người chơi đến vị trí tấm bản đồ!
        MC_HOC_2017_02_Cole_d: Đảm bảo rằng Đặc vụ đang đi theo đúng con đường được
          chỉ dẫn trên tấm bản đồ!
      MC_HOC_2017_02_Cole_2019:
        MC_HOC_2017_02_Cole_a: Di chuyển Đặc vụ về phía trước 2 ô để đứng trên tấm
          áp lực. Như vậy cánh cửa cho người chơi của bạn sẽ được mở ra.
        MC_HOC_2017_02_Cole_b: |-
          Nhấn "Chạy"!

          Bạn có thể chạy dòng mã lệnh ngay cả khi nó chưa đúng. Bạn có thể chạy và khởi động lại mã lệnh hết lần này đến lần khác cho đến khi bạn phát hiện ra sai ở đâu.
        MC_HOC_2017_02_Cole_c: Khi Đặc vụ đã giúp mở cánh cửa, bạn hãy sử dụng phím
          mũi tên để di chuyển người chơi đến vị trí tấm bản đồ!
        MC_HOC_2017_02_Cole_d: Đảm bảo rằng Đặc vụ đang đi theo đúng con đường được
          chỉ dẫn trên tấm bản đồ!
      MC_HOC_2017_03_Cole:
        MC_HOC_2017_03_Cole_a: Khi bạn đưa Đặc vụ đi đến tấm áp lực, bạn có thể sử
          dụng các phím mũi tên để đưa người chơi đi đến vị trí La bàn!
        MC_HOC_2017_03_Cole_b: Mã lệnh này có hơi dài không?  Hãy thử sử dụng vòng
          lặp 'lặp lại' và tìm hiểu cách làm thế nào để rút gọn các mã lệnh!
      MC_HOC_2017_03_Cole_2019:
        MC_HOC_2017_03_Cole_a: Khi bạn đưa Đặc vụ đi đến tấm áp lực, bạn có thể sử
          dụng các phím mũi tên để đưa người chơi đi đến vị trí La bàn!
        MC_HOC_2017_03_Cole_b: Mã lệnh này có hơi dài không?  Hãy thử sử dụng vòng
          lặp 'lặp lại' và tìm hiểu cách làm thế nào để rút gọn các mã lệnh!
      MC_HOC_2017_04POINT5_RYAN:
        MC_HOC_2017_04POINT5_RYAN_b: 'Sử dụng các khối lệnh ''rẽ phải'' để thay đổi
          hướng của Đặc vụ '
        MC_HOC_2017_04POINT5_RYAN_a: Đặc vụ chỉ cần đi đến tấm áp lực đầu tiên để
          đưa Alex hoặc Steve đi đến cái rìu.
      MC_HOC_2017_04POINT5_RYAN_2019:
        MC_HOC_2017_04POINT5_RYAN_b: 'Sử dụng các khối lệnh ''rẽ phải'' để thay đổi
          hướng của Đặc vụ '
        MC_HOC_2017_04POINT5_RYAN_a: Đặc vụ chỉ cần đi đến tấm áp lực đầu tiên để
          đưa Alex hoặc Steve đi đến cái rìu.
      MC_HOC_2017_04_Cole:
        MC_HOC_2017_04_Cole_a: Đặc vụ cần phải 'di chuyển về phía trước' 7 lần.  Làm
          thế nào để thực hiện được bằng cách sử dụng một vòng lặp 'lặp lại'?
        MC_HOC_2017_04_Cole_c: |-
          Nhấn "Chạy"!

          Bạn có thể chạy dòng mã lệnh ngay cả khi nó chưa đúng. Bạn có thể chạy và khởi động lại mã lệnh hết lần này đến lần khác cho đến khi bạn phát hiện ra sai ở đâu.
        MC_HOC_2017_04_Cole_b: Khi Đặc vụ đi đến tấm áp lực, nó sẽ giúp mở cửa cho
          người chơi.
      MC_HOC_2017_04_Cole_2019:
        MC_HOC_2017_04_Cole_a: Đặc vụ cần phải 'di chuyển về phía trước' 7 lần.  Làm
          thế nào để thực hiện được bằng cách sử dụng một vòng lặp 'lặp lại'?
        MC_HOC_2017_04_Cole_c: |-
          Nhấn "Chạy"!

          Bạn có thể chạy dòng mã lệnh ngay cả khi nó chưa đúng. Bạn có thể chạy và khởi động lại mã lệnh hết lần này đến lần khác cho đến khi bạn phát hiện ra sai ở đâu.
        MC_HOC_2017_04_Cole_b: Khi Đặc vụ đi đến tấm áp lực, nó sẽ giúp mở cửa cho
          người chơi.
      MC_HOC_2017_05_Cole:
        MC_HOC_2017_05_Cole_a: Bạn có biết rằng bạn có thể sử dụng nhiều hơn một mã
          lệnh bên trong một vòng lặp?  Hãy sử dụng các mã lệnh để di chuyển về phía
          trước \*\* và \*\* đặt một tấm ván bên trong vòng lặp 'lặp lại' để hoàn
          thành câu đố này.
        MC_HOC_2017_05_Cole_b: Đưa đặc vụ qua bên kia sông, vừa đi vừa xây một cây
          cầu.
      MC_HOC_2017_05_Cole_2019:
        MC_HOC_2017_05_Cole_a: Bạn có biết rằng bạn có thể sử dụng nhiều hơn một mã
          lệnh bên trong một vòng lặp?  Hãy sử dụng các mã lệnh để di chuyển về phía
          trước \*\* và \*\* đặt một tấm ván bên trong vòng lặp 'lặp lại' để hoàn
          thành câu đố này.
        MC_HOC_2017_05_Cole_b: Đưa đặc vụ qua bên kia sông, vừa đi vừa xây một cây
          cầu.
      MC_HOC_2017_06_Cole:
        MC_HOC_2017_06_Cole_a: Vòng lặp này đã chạy bao nhiêu lần?  Vòng lặp này _nên_
          chạy bao nhiêu lần?
        MC_HOC_2017_06_Cole_b: 'Giúp đỡ Đặc vụ xây dựng một cây cầu để vượt qua dòng
          nước! '
      MC_HOC_2017_06_Cole_2019:
        MC_HOC_2017_06_Cole_a: Vòng lặp này đã chạy bao nhiêu lần?  Vòng lặp này _nên_
          chạy bao nhiêu lần?
        MC_HOC_2017_06_Cole_b: 'Giúp đỡ Đặc vụ xây dựng một cây cầu để vượt qua dòng
          nước! '
      MC_HOC_2017_07_Cole:
        MC_HOC_2017_07_Cole_c: Tất cả những gì Đặc vụ cần làm là dọn đường tới xe
          chở quặng.
        MC_HOC_2017_07_Cole_a: Để giải quyết câu đố này, tìm hiểu chức năng 'dọn đường'
          và sử dụng nó nhiều lần như bạn cần, sử dụng khối lệnh nhỏ màu xanh lá cây
          'dọn đường' từ hộp công cụ.
        MC_HOC_2017_07_Cole_b: Hãy thử pha trộn các nhóm lệnh chức năng với các lệnh
          khác từ hộp công cụ để giúp bạn giải quyết câu đố này.
      MC_HOC_2017_07_Cole_2019:
        MC_HOC_2017_07_Cole_c: Tất cả những gì Đặc vụ cần làm là dọn đường tới xe
          chở quặng.
        MC_HOC_2017_07_Cole_a: Để giải quyết câu đố này, tìm hiểu chức năng 'dọn đường'
          và sử dụng nó nhiều lần như bạn cần, sử dụng khối lệnh nhỏ màu xanh lá cây
          'dọn đường' từ hộp công cụ.
        MC_HOC_2017_07_Cole_b: Hãy thử pha trộn các nhóm lệnh chức năng với các lệnh
          khác từ hộp công cụ để giúp bạn giải quyết câu đố này.
      MC_HOC_2017_10_RETRY:
        MC_HOC_2017_10_Cole_b: Không biết đi đâu?  Hãy tìm các dòng chấm!
        MC_HOC_2017_10_Cole_a: Sử dụng nhóm lệnh chức năng để giải quyết câu đố này
          dễ dàng hơn!
      MC_HOC_2017_10_RETRY_2019:
        MC_HOC_2017_10_Cole_b: Không biết đi đâu?  Hãy tìm các dòng chấm!
        MC_HOC_2017_10_Cole_a: Sử dụng nhóm lệnh chức năng để giải quyết câu đố này
          dễ dàng hơn!
      MC_HOC_2017_Ali:
        MC_HOC_2017_08_RY_a: |-
          Nhấn "Chạy"!

          Bạn có thể chạy dòng mã lệnh ngay cả khi nó chưa đúng. Bạn có thể chạy và khởi động lại mã lệnh hết lần này đến lần khác cho đến khi bạn phát hiện ra sai ở đâu.
        MC_HOC_2017_08_RY_b: Có rất nhiều cách để giải quyết câu đố này.  Hãy thử
          một vài cách!
        MC_HOC_2017_08_RY_c: Hãy thử đi theo các đường chấm, đó là đường đơn giản
          nhất để qua được dung nham.
      MC_HOC_2017_Ali_2019:
        MC_HOC_2017_08_RY_a: |-
          Nhấn "Chạy"!

          Bạn có thể chạy dòng mã lệnh ngay cả khi nó chưa đúng. Bạn có thể chạy và khởi động lại mã lệnh hết lần này đến lần khác cho đến khi bạn phát hiện ra sai ở đâu.
        MC_HOC_2017_08_RY_b: Có rất nhiều cách để giải quyết câu đố này.  Hãy thử
          một vài cách!
        MC_HOC_2017_08_RY_c: Hãy thử đi theo các đường chấm, đó là đường đơn giản
          nhất để qua được dung nham.
      MC_HOC_2017_FP20x20:
        MC_HOC_2017_13_Cole_a: Hãy thử để Đặc vụ xây dựng vài đường ray cho xe chở
          quặng để bạn có thể khám phá thế giới!
      MC_HOC_2017_FP20x20_2019:
        MC_HOC_2017_13_Cole_a: Hãy thử để Đặc vụ xây dựng vài đường ray cho xe chở
          quặng để bạn có thể khám phá thế giới!
      course3_bee_functions_challenge1:
        courseE_bee_functions_challenge1_a: "Nếu câu đố có vẻ khó khăn, thử xây dựng
          hàm của bạn từng chút một. \n\nThêm vài khối, rồi thử chúng. Thêm nhiều
          hơn, rồi thử lại.  Sẽ có lúc bạn hoàn thành nó!"
      course3_bee_functions_challenge2:
        courseE_bee_functions_challenge1_a: "Nếu câu đố có vẻ khó khăn, thử xây dựng
          hàm của bạn từng chút một. \n\nThêm vài khối, rồi thử chúng. Thêm nhiều
          hơn, rồi thử lại.  Sẽ có lúc bạn hoàn thành nó!"
      courseB_maze_seq8:
        courseB_maze_seq8_b: Có hai cách để giải câu đố này!
      courseC19_playLab_EOC2:
        courseE_playLab_scaffold1_c: Khi bạn hoàn thành, bạn có thể di chuyển nhân
          vật anh hùng của bạn bằng các phím mũi tên!
      courseC_maze_programming6:
        courseC_maze_programming6_a: Có hai cách để giải câu đố này!
      courseC_maze_programming6_2018:
        courseC_maze_programming6_a: Có hai cách để giải câu đố này!
      courseC_maze_programming6_2019:
        courseC_maze_programming6_a: Có hai cách để giải câu đố này!
      courseD_artist_nestedLoops3:
        courseD_artist_nestedLoops3_a: "Thử dùng khối `nhảy về phía trước` để đi từ
          hình vuông này đến điểm bạn bắt đầu hình vuông tiếp theo. \n\nNếu các hình
          vuông cao 20 điểm ảnh và chúng cách nhau 20 điểm ảnh, bạn sẽ cần nhảy bao
          xa?"
      courseD_artist_nestedLoops3_2018:
        courseD_artist_nestedLoops3_a: "Thử dùng khối `nhảy về phía trước` để đi từ
          hình vuông này đến điểm bạn bắt đầu hình vuông tiếp theo. \n\nNếu các hình
          vuông cao 20 điểm ảnh và chúng cách nhau 20 điểm ảnh, bạn sẽ cần nhảy bao
          xa?"
      courseD_artist_nestedLoops3_2019:
        courseD_artist_nestedLoops3_a: "Thử dùng khối `nhảy về phía trước` để đi từ
          hình vuông này đến điểm bạn bắt đầu hình vuông tiếp theo. \n\nNếu các hình
          vuông cao 20 điểm ảnh và chúng cách nhau 20 điểm ảnh, bạn sẽ cần nhảy bao
          xa?"
      courseD_maze_ramp6:
        courseC_maze_programming6_a: Có hai cách để giải câu đố này!
      courseD_scrat_ramp7:
        courseD_scrat_programming6_a: Có hai cách để giải câu đố này!
      courseE_artist_functions1:
        courseE_artist_functions1_a: Mỗi hình vuông có cạnh dài 100 điểm ảnh, điều
          đó có nghĩa là bạn cần đi về phía trước 175 điểm ảnh trước khi vẽ hình vuông
          thứ hai.
        courseE_artist_functions1_b: Bạn có thể vẽ các nét trùng nhau để làm cái kính
          của bạn.
      courseE_artist_functions2:
        courseD_artist_functions2_a: |-
          Chương trình của bạn cần:

          -   Dùng hàm\\
          -   Tiến về phía trước 100 + 75 điểm ảnh
          -   Dùng hàm
      courseE_bee_functions6:
        courseE_bee_functions6_a: "Nếu câu đố có vẻ khó khăn, thử xây dựng hàm của
          bạn từng chút một. \n\nThêm vài khối, rồi thử chúng. Thêm nhiều hơn, rồi
          thử lại.  Sẽ có lúc bạn hoàn thành nó!\n\n![](https://images.code.org/3875224b35889000a0998ca25cfa4ecf-image-1467996493914.gif)"
      courseE_bee_functions7:
        courseE_bee_functions7_a: "Nếu câu đố có vẻ khó khăn, thử xây dựng hàm của
          bạn từng chút một. \n\nThêm vài khối, rồi thử chúng. Thêm nhiều hơn, rồi
          thử lại.  Sẽ có lúc bạn hoàn thành nó!"
        courseE_bee_functions7_b: |-
          Nhớ xây dựng đoạn mã của bạn bên trong khối hàm màu xanh lá cây.

          ![](https://images.code.org/8fe1fae5caf4ede3a9c9bd9f26940cde-image-1467996837459.gif)
      courseE_bee_functions_challenge1:
        courseE_bee_functions_challenge1_a: "Nếu câu đố có vẻ khó khăn, thử xây dựng
          hàm của bạn từng chút một. \n\nThêm vài khối, rồi thử chúng. Thêm nhiều
          hơn, rồi thử lại.  Sẽ có lúc bạn hoàn thành nó!"
      courseE_bee_functions_challenge2:
        courseE_bee_functions_challenge1_a: "Nếu câu đố có vẻ khó khăn, thử xây dựng
          hàm của bạn từng chút một. \n\nThêm vài khối, rồi thử chúng. Thêm nhiều
          hơn, rồi thử lại.  Sẽ có lúc bạn hoàn thành nó!"
      courseE_playLab_scaffold2:
        courseE_playLab_scaffold1_c: Khi bạn hoàn thành, bạn có thể di chuyển nhân
          vật anh hùng của bạn bằng các phím mũi tên!
      courseF_bee_functions8a:
        courseF_bee_functions8a_a: "Nếu câu đố có vẻ khó khăn, thử xây dựng hàm của
          bạn từng chút một. \n\nThêm vài khối, rồi thử chúng. Thêm nhiều hơn, rồi
          thử lại.  Sẽ có lúc bạn hoàn thành nó!"
      courseF_bee_functionsPre7:
        courseF_bee_functions7_a: "Nếu câu đố có vẻ khó khăn, thử xây dựng hàm của
          bạn từng chút một. \n\nThêm vài khối, rồi thử chúng. Thêm nhiều hơn, rồi
          thử lại.  Sẽ có lúc bạn hoàn thành nó!"
