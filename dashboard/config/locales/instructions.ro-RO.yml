"ro":
  data:
    instructions:
      2-3 Artist 1 new_instruction: Bună, eu sunt un artist. Poţi scrie codul care
        mă face să desenez orice. Folosește câteva blocuri pentru a mă face să desenez
        peste liniile de gri din imagine. (Fiecare linie este de 100 de pixeli lungime)
      2-3 Artist 11_instruction: 'Dă semnului stop o bordură făcând un octogon cu
        8 laturi, fiecare de 100 de pixeli lungime. Cu câte grade ar trebui să rotești?
        (Sugestie: cât este 360 împărţit la 8?) '
      2-3 Artist 12_instruction: |-
        Setează blocul "repetă ori" astfel încât acesta să creeze un "cerc" pentru a termina ochiul.\r

        Dacă fiecare mişcare se roteşte la dreapta cu un grad, de câte ori trebuie să repeți pentru a finaliza cercul? 180? 360? 500?
      2-3 Artist 2 new_instruction: 'Această casă are un perete pe jumătate terminat.
        Fiecare latură este de 100, dar peretele pe jumătate terminat este de numai
        50. Completează peretele. '
      2-3 Artist 2_instruction: "This house has a half-finished wall. Each side is\n100,
        but the half-finished wall is only 50. Complete the wall. "
      2-3 Artist 3.4_instruction: Blocul de salt mută artistul fără a desena. Trasează
        linia punctată folosind și blocul de salt şi cel de desen. Fiecare linie are
        50 de pixeli lungime.
      2-3 Artist 3_instruction: Această pălărie are o înălțime de 100 de pixeli. Desenează
        o pălărie care este cu 70 de pixeli mai mică.
      2-3 Artist 3new_instruction: Pălăria roşie are o înălțime de 100 de pixeli.
        Termină de desenat o pălărie neagră, care este mai scurtă cu 70 de pixeli.\r
        Lăţimea pălăriei neagre este de 50 de pixeli
      2-3 Artist 4_instruction: Ajută-mă să termin casa pentru această pisică.
      2-3 Artist 5_instruction: Înlocuiește acest cod cu un bloc "repetă ori" pentru
        a desena aceeaşi casă folosind numai 3 blocuri.
      2-3 Artist 6_instruction: 'Această casă are nevoie de un acoperiş! Desenează
        triunghiul.  Sugestie: toate trei laturile au aceeaşi lungime.'
      2-3 Artist 7_instruction: 'Termină de desenat ultimul set de ferestre al scolii
        astfel incat toti elevii clasei pot vedea spre afara. Fiecare geam pătrat
        al ferestrei are 25 de pixeli lățime. '
      2-3 Artist 8_instruction: Completează camerele pentru fiecare animal prin împărțirea
        dreptunghiului în 2 pătrate de dimensiuni egale. Dreptunghiul are 200 de pixeli
        în lăţime şi 100 de pixeli în înălţime. Exista mai multe moduri de a rezolva
        acest puzzle deci, distrati-va!
      2-3 Artist 9 NEW_instruction: Finalizează acest zmeu
      2-3 Artist 9 REPLACEMENT_instruction: Termină de desenat aceste scări!
      2-3 Artist 9_instruction: Finalizează acest zmeu
      2-3 Artist Assessment 1_instruction: 'Evaluare: Termină de desenat ultimul dinte,
        are 25 de pixeli în lățime și 25 de pixeli în înălțime.'
      2-3 Artist Debugging 1_instruction: Aceasta palarie Trebuie sa aiba doar 50
        de pixeli latime. O poti repara?
      2-3 Artist Debugging 10_instruction: 'Butonul de direcţie de pe comanda mea
        de joc este prea îngust. Sugestie: Faceți-l mai lat cu 10 pixeli.'
      2-3 Artist Debugging 11_instruction: |-
        Fulgul meu de nea se destrama!\r
        \r
        Iti poti da seama ce este in neregula?
      2-3 Artist Debugging 12_instruction: Trebuie să adaug un val de ocean la această
        scenă. Poți să mă ajuți?
      2-3 Artist Debugging 2_instruction: 'Codul pentru cele trei mustăți pe care
        le vezi este greșit. Indiciu: fiecare mustață are o lungime egala. Repară
        acest cod pentru a desena mustățile.'
      2-3 Artist Debugging 3_instruction: 'Barca mea are o gaură! Poți să o repari
        schimbând unghiul liniei? Indiciu: ultimul unghi este greșit cu 15 grade.'
      2-3 Artist Debugging 4_instruction: Care este imaginea pe care încercăm să o
        desenăm? Termină conectarea punctelor utilizând liniile și unghiurile potrivite.
      2-3 Artist Debugging 5_instruction: 'Codul pentru piciorul și laba piciorului
        pe care le vezi e greșit. Indiciu: piciorul e prea lung, poate trebuie să
        mai ștergem un pas?'
      2-3 Artist Debugging 6_instruction: Se pare că stau pe un scaun căruia îi lipsește
        un picior. Editează blocurile pentru a desena piciorul.
      2-3 Artist Debugging 7_instruction: Se pare că litera C în cod este desenată
        invers. Poţi să o faci să arate ca un C?
      2-3 Artist Debugging 8_instruction: Morișca mea nu e gata. De câte ori trebuie
        folosit blocul "repetă" pentru a fi gata?
      2-3 Artist Debugging 9_instruction: Ceva este oprit! \r \r codul pentru acest
        nivel este greşit. Poţi să îţi dai seama cum să putem face ca artistul să
        traseze în mod corect?
      2-3 Artist Debugging Assessment 1_instruction: 'Forma aceasta este prea mică.
        Poți să o faci mai mare? Indiciu: ar trebui să fie cu 75 de pixeli mai lungă
        pe fiecare parte.'
      2-3 Artist Free Play_instruction: Joc liber! Desenează orice ți-ar plăcea.
      2-3 Artist Functions 1 a_instruction: |-
        Salut! Eu zombie artist. Eu iubesc desenul!
        Ajută-mă să desenez ochelarii pătraţi. Sugestie: puntea dintre lentile este cu 25 de pixeli mai scurtă decât latura pătratului.
      2-3 Artist Functions 1_instruction: |-
        Salut! Eu zombie artist. Eu iubesc desenul!
        Ajută-mă să desenez ochelarii pătraţi. Sugestie: puntea dintre lentile este cu 25 de pixeli mai scurtă decât latura pătratului.
      2-3 Artist Functions 10_instruction: 'Iată doua funcții: una pentru a desena
        o roată dințată mare și una pentru a desena o roată dințată mică. Folosește-le
        pentru a desena interiorul unei mașinării!'
      2-3 Artist Functions 11 a_instruction: |-
        We've renamed the `draw a square`
        function to `draw a hexagon`, but it's still giving us squares! Can you modify
        the `draw a hexagon` function to draw a hexagon with 50 pixel sides? \r
        \r
        Draw
        the image using the new function!
      2-3 Artist Functions 11.5 a_instruction: Aici este aceeași funcție "Desenează
        un hexagon". Ce se întâmplă dacă întorci cu doar 60 de grade de fiecare dată
        când buclezi?
      2-3 Artist Functions 11.5_instruction: Aici este aceeași funcție "Desenează
        un hexagon". Ce se întâmplă dacă întorci cu doar 60 de grade de fiecare dată
        când buclezi?
      2-3 Artist Functions 11_instruction: Am redenumit funcția "desenează un pătrat"
        în "desenează un hexagon", dar încă desenează pătrate! Poți să modifici funcția
        "desenează un hexagon" astfel încât să deseneze un hexagon cu laturile de
        50 de pixeli și apoi să desenezi imaginea folosind această funcție?
      2-3 Artist Functions 12 Mike_instruction: 'Funcţiile sunt foarte utile pentru
        a desena de mai multe ori lucruri complicate. Puteţi utiliza funcţia "desenează
        o floare" pentru a completa restul jardinierei? (Sugestie: distanța dintre
        plante este de 100 de pixeli)  '
      2-3 Artist Functions 12 a_instruction: 'Funcţiile sunt foarte utile pentru a
        desena de mai multe ori lucruri complicate. Puteţi utiliza funcţia "desenează
        o floare" pentru a completa restul jardinierei? (Sugestie: distanța dintre
        plante este de 100 de pixeli)  '
      2-3 Artist Functions 12_instruction: 'Funcţiile sunt foarte utile pentru a desena
        de mai multe ori lucruri complicate. Puteţi utiliza funcţia "desenează o floare"
        pentru a completa restul jardinierei? (Sugestie: distanța dintre plante este
        de 100 de pixeli)  '
      2-3 Artist Functions 13_instruction: Aveți la dispoziție patru functii. Folositi-le
        orice mod doriţi, în interiorul uneia sau mai multor bucle, pentru a face
        fotografii care aveţi posibilitatea să partajaţi cu prietenii dvs. Apăsaţi
        "rulează" pentru a vedea un exemplu.
      2-3 Artist Functions 2 a_instruction: "Use the small green `draw a square`\nblock
        to call this new function and create the glasses. "
      2-3 Artist Functions 2_instruction: Funcțiile îțî permit să construiești blocuri
        noi! Am mutat blocurile ce deseneaza un pătrat într-o funcție numită "desenează
        un pătrat". Poți folosi această funcție pentru a crea ochelarii? Pătratele
        au 75 de pixeli între ele.
      2-3 Artist Functions 3 a_instruction: |-
        Edit the "draw a square" function
        to draw glasses with frames that are 115px on each side. \r
        \r
        The squares
        are now 45 pixels apart.
      2-3 Artist Functions 3_instruction: Editaţi funcţia pentru a desena un pătrat
        cu latura de 115 şi pentru a desena ochelari mai mari. Distanța dintre pătrate
        este acum de 45 de pixeli.
      2-3 Artist Functions 4 a_instruction: |-
        Now, put the function inside of a loop
        and add an extra turn to draw these three squares.
      2-3 Artist Functions 4_instruction: Utilizaţi blocul "repetă" pentru a desena
        aceste trei pătrate.
      2-3 Artist Functions 7_instruction: 'Folosește funcţia "desenează o casă" pentru
        a desena două case folosind doi parametri diferiți. (Sugestie: prima casă
        are 100 de pixeli).'
      2-3 Artist Functions 9_instruction: Aici este o funcţie care desenează un fulg
        de nea. Experimentează cu aceasta pentru a crea o scenă de iarnă! În acest
        nivel te poți juca liber, așa că nu există nici un puzzle de rezolvat. Distracţie
        plăcută!
      2-3 Artist Loops 1_instruction: Puteţi face un hexagon cu laturile de 100 pixeli
        , pentru a termina celula? Amintește-ți, asta înseamnă că va trebui să te
        rotești doar 60 de grade!
      2-3 Artist Loops 10_instruction: Ce se întâmplă cu designul atunci când facem
        ca pasul final spre înainte să fie doar pe jumătate de lung?
      2-3 Artist Loops 11_instruction: Acum hai sa punem *altă* buclă în jurul întreagii
        noastre creaţii!  Nu uita să adăugi un unghi la sfârşitul buclei exterioare.
      2-3 Artist Loops 2_instruction: Utilizează acum un bloc "repetă" pentru a-i
        face celulei un inveliș.
      2-3 Artist Loops 4_instruction: Vrei să vezi ce se întâmplă atunci când vom
        repeta acea formă de mai multe ori, folosind o buclă?
      2-3 Artist Loops 5_instruction: Acum hai să facem o mică modificare la bucla
        şi să vedem cât de mult se schimbă imaginea noastră.
      2-3 Artist Loops 6_instruction: Adaugă încă o mișcare (move) și o rotație (turn)
        în interiorul buclei şi vezi cum se schimbă design-ul.
      2-3 Artist Loops 7_instruction: Putem folosi bucle pentru a face tot felul de
        poligoane.  Poţi crea un romb în interiorul acest hexagon?
      2-3 Artist Loops 8_instruction: Hai sa punem ambele elemente in interiorul unei
        bucle.
      2-3 Artist Loops 9_instruction: Vom bucla aceleaşi elemente, dar acum am de
        gând să adăug unele distante dintre ele. \r Utilizează acelaşi cod ca înainte,
        dar adaugă un pas înainte la sfârşitul buclei din exterior.
      2-3 Artist Loops New 1_instruction: Hai să desenăm capul acestui robot! Poți
        face un pătrat cu laturi de 100 de pixeli?
      2-3 Artist Loops New 10_instruction: Hai acum să conectăm o grămadă de V-uri
        împreună, desenându-le într-o buclă.
      2-3 Artist Loops New 11_instruction: Hai să-l desenăm de data aceasta de 24
        de ori. La acest cod, adaugă un viraj la stânga de 30 de grade și pune-l cu
        totul într-un block - repetă.
      2-3 Artist Loops New 12_instruction: 'Desenează un diamant cu laturi de 100
        de pixeli. '
      2-3 Artist Loops New 13_instruction: Deseneaza acum un diamant de 3 ori, folosind
        o buclă.
      2-3 Artist Loops New 14_instruction: Jucati-va cu codul pentru acest diamant
        si vedeti ce alte modele mai puteti crea. Incercati sa schimbati gradele de
        intoarcere si numarul de repetari ale buclei.
      2-3 Artist Loops New 15_instruction: Deseneaza ceva distractiv!
      2-3 Artist Loops New 2_instruction: Aici este o parte din codul pe care l-ai
        folosit pentru a desena acel pătrat. De data aceasta, poti folosi doar un
        block "muta inainte" si un block "intoarce". Poti folosi un block "repeta"
        pentru a rezolva acest puzzle?
      2-3 Artist Loops New 9_instruction: Desenează un V simplu cu ambele laturi de
        50 de pixeli pentru a completa săgeata.
      2-3 Artist Match Hex Pic_instruction: 'Potrivire: poti ajuta cu desenarea hexagonului?'
      2-3 Artist Match Rho Pic_instruction: 'Potrivire: poti completa codul?'
      2-3 Artist Match Sq Pic_instruction: 'Potrivire: completeaza codul lipsa'
      2-3 Artist Match Tri pic_instruction: 'Potrivire: adauga codul lipsa.'
      2-3 Artist Nested Loops 1_instruction: "Ai folosit înainte bucle pentru a desena
        forme, dar ști că poţi pune o buclă în interiorul o unei alte bucle? \\r \nPune
        în buclă acest întreg bloc de trei ori pentru a desena modelul."
      2-3 Artist Nested Loops 10_instruction: Pune acest cod în buclă de 12 ori pentru
        a completa modelul.
      2-3 Artist Nested Loops 11_instruction: Pune acest cod în buclă de 4 ori pentru
        a finaliza modelul, virează la 90 de grade după fiecare cerc.
      2-3 Artist Nested Loops 12_instruction: Pune acest cod în buclă de 12 ori pentru
        a finaliza cârlionții.
      2-3 Artist Nested Loops 2_instruction: Acum fă buclă cu triunghiul de 6 ori.
        După fiecare triunghi va trebui să faci întoarcere de 60 de grade înainte
        de a-l desena pe următorul.
      2-3 Artist Nested Loops 3_instruction: Va fi necesar să așezi triunghiul în
        buclă de 12 ori pentru a desena acest model. Împarte numărul de grade dintr-un
        cerc (360) la numărul de forme pe care le vei desena (12), pentru a-ți da
        seama cât de mult să se vireze după fiecare formă.
      2-3 Artist Nested Loops 4_instruction: 'Folosește bucla de 12 ori cu acest diamant
        pentru a desena o floare. Sugestie: 12 diamante sunt ceva similar celor 12
        triunghiuri pe care le-ai făcut mai devreme - cât de mare trebuie să fie întoarcerea
        după fiecare formă?'
      2-3 Artist Nested Loops 5_instruction: Umple ferestrele acestei clădiri cu o
        buclă de nesting. Ferestrele au lungimea de 20 de pixeli și sunt la 20 de
        pixeli distanță între ele.
      2-3 Artist Nested Loops 6_instruction: Acest dinozaur are 8 țepi de-a lungul
        cozii; fiecare țeapă are 30 de pixeli lungime. Folosește triunghiul în buclă
        de 8 ori, dar asigură-te că "sare înainte" după fiecare din ele!
      2-3 Artist Nested Loops 7_instruction: Folosește bucla de 10 ori cu acest triunghi
        pentru a desena soarele. Va trebui să muți și să virezi după fiecare triunghi.
        Poți calcula cât de mare trebuie să fie virajul prin împărțirea numărului
        de grade dintr-un cerc la numărul de triunghiuri care formează soarele.
      2-3 Artist Nested Loops 8_instruction: Acum hai să adăugăm niște iarbă imaginii
        noastre. Fiecare smoc de iarbă este plasat la o distanță de 50 pixeli.
      2-3 Artist Nested Loops 9_instruction: Vom finaliza acest desen prin adăugarea
        unei flori. Pune diamantul în buclă de 12 ori pentru a desena floarea ta.
      2-3 Artist Nested Loops Free Play_instruction: Joc la alegere, desenează ceva
        super cu bucle de nesting.
      2-3 Bee Conditionals 1_instruction: Bună! Sunt o albină. Ajută-mă să culeg nectar
        din floare.
      2-3 Bee Conditionals 10_instruction: 'Florile violete pot avea 1 sau 0 nectar.
        Ai grijă să nu colectezi nectar dintr-o floare violetă dacă aceasta nu are
        deloc.\r

'
      2-3 Bee Conditionals 11_instruction: Colectează nectar din florile care au nectar.
      2-3 Bee Conditionals 12_instruction: Folosește o buclă pentru a verifica și
        colecta nectarul din toate aceste flori.
      2-3 Bee Conditionals 13_instruction: |-
        Colectează nectar și fă miere. Sugestie:
        ce se întâmplă dacă folosești condiția "dacă nectar" în cazul unei flori roșii? Poți
        finaliza aceasta cu o buclă?
      2-3 Bee Conditionals 14_instruction: Colectează nectarul şi fă miere. Ai grijă
        să nu colectezi nectarul de la o floare violetă, dacă aceasta nu are deloc.
        Nu uita ca la sfarsit sa faci miere.
      2-3 Bee Conditionals 15_instruction: Colectează nectarul din toate cele patru
        flori.
      2-3 Bee Conditionals 2_instruction: Bună, sunt o albină infometata! Ajută-mă
        să colectez tot nectarul din flori. Folosește o buclă.
      2-3 Bee Conditionals 3_instruction: Ajută-mă să adun tot nectarul din flori
        şi să fac miere. Utilizează o buclă.
      2-3 Bee Conditionals 4_instruction: Ajută-mă să strâng tot nectarul din flori
        şi să fac toată mierea.
      2-3 Bee Conditionals 5_instruction: "Florile violete pot avea ori 1 ori 0 \nnectar,
        dar nu știi exact care din ele! Ai grijă să nu colectezi nectar dintr-o \nfloare
        violetă dacă aceasta nu are deloc. Verifică dacă nectarul este egal cu 1 \nfolosind
        blocul - dacă."
      2-3 Bee Conditionals 6_instruction: "Verifică această floare cu un bloc - dacă
        \npentru a vedea dacă aceasta are nectar."
      2-3 Bee Conditionals 7_instruction: Strânge nectar de la fiecare floare dacă
        aceasta are.
      2-3 Bee Conditionals 8_instruction: "Acest câmp are flori roşii şi violet. \nFlorile
        roşii au o cantitate știută de nectar, dar nectarul din floarea violetă este
        necunoscut. \nColectează tot nectarul."
      2-3 Bee Conditionals 9_instruction: Colectează tot nectarul din fiecare floare.
      2-3 Bee Conditionals Assessment 1_instruction: "Evaluare: Colectează tot \nnectarul.
        Fii atent(ă) să nu colectezi nectar de la o floare violetă dacă acesta nu
        \nare deloc."
      2-3 Bee Debugging 1_instruction: "Aceste blocuri chiar mă supără. Repară \neroarea(erorile)
        pentru a colecta tot nectarul şi a face toată mierea."
      2-3 Bee Debugging 10_instruction: "Aceste blocuri chiar mă supără. Repară \neroarea(erorile)
        pentru a colecta tot nectarul şi a face toată mierea."
      2-3 Bee Debugging 2_instruction: "Aceste blocuri chiar mă supără. Repară \neroarea(erorile)
        pentru a colecta tot nectarul şi a face toată mierea."
      2-3 Bee Debugging 3_instruction: "Repară \neroarea(erorile) pentru a colecta
        tot nectarul şi a face toată mierea."
      2-3 Bee Debugging 4_instruction: "Aceste blocuri chiar mă supără. Repară \neroarea(erorile)
        pentru a colecta tot nectarul şi a face toată mierea."
      2-3 Bee Debugging 5_instruction: "Acea floare arata gustos! Repară \neroarea(erorile)
        pentru a colecta tot nectarul şi a face toată mierea. Poți\nfolosi acum rulează
        și pas."
      2-3 Bee Debugging 6_instruction: "Ce provocare dulce! Repară \neroarea(erorile)
        pentru a colecta tot nectarul şi a face toată mierea."
      2-3 Bee Debugging 7_instruction: "Repară \neroarea(erorile) pentru a colecta
        tot nectarul şi a face toată mierea."
      2-3 Bee Debugging 8_instruction: "Atat de multe flori frumoase! Repară \neroarea(erorile)
        pentru a colecta tot nectarul şi a face toată mierea."
      2-3 Bee Debugging 9_instruction: "Fii rabdator! Repară \neroarea(erorile) pentru
        a colecta tot nectarul şi a face toată mierea."
      2-3 Bee Debugging Assessment 1_instruction: "Evaluare: Sa vedem ce stiti! Repară
        eroarea(erorile) pentru a colecta tot nectarul şi a face \ntoată mierea."
      2-3 Bee Functions 1_instruction: "Funcţiile sunt blocuri de cod care efectuează
        \no activitate. Utilizează funcţia \"obţine 2 nectare\" pentru a colecta nectarul
        de la fiecare \nfloare."
      2-3 Bee Functions 10_instruction: "Florile violete pot avea ori 1 ori 0 nectar.
        Creează \no funcție care colectează nectar numai din flori violete care au
        nectar."
      2-3 Bee Functions 2_instruction: "Funcţiile sunt blocuri de cod care efectuează
        \no activitate. Utilizează funcţia \"obţine 5\" pentru a colecta 5 nectare
        dintr-o data. De asemenea, asigură-te că\nfolosești și o buclă pentru a obține
        o numarătoare ideală de bloc."
      2-3 Bee Functions 3_instruction: Colectează tot nectarul din fiecare floare.
      2-3 Bee Functions 4_instruction: "Funcţia \"mută şi obține nectar\" face albina
        să se întoarcă, să colecteze nectar şi apoi returnează albina la locul de
        unde a început. Folosește \nfuncţia pentru a colecta tot nectarul."
      2-3 Bee Functions 5_instruction: "Acum există mai mult nectar în flori. \nEditează
        funcţia dată astfel încât ea să colecteze 4 nectaruri şi folosește-o pentru
        a colecta tot nectarul din flori."
      2-3 Bee Functions 6_instruction: |-
        Acum folosește aceeași funcție la colectarea nectarului
        din trei flori.
      2-3 Bee Functions 7_instruction: "Florile sunt acum mai departe. Editează \nfuncţia
        dată şi utilizeaz-o pentru a colecta tot nectarul din flori."
      2-3 Bee Functions 8_instruction: "Creează-ți propria funcţie care obține 7 nectaruri,
        \nse mişcă înainte şi face 7 unități de miere. Utilizează funcţia la colectarea
        nectarului din fiecare \nfloare şi fă miere la fiecare fagure de miere."
      2-3 Bee Functions 9_instruction: "Creează-ţi propria funcţie care se duce în
        jos pe \ncale, obține nectar, face miere şi, apoi, returnează albina în partea
        de sus a căii."
      2-3 Bee Functions Assessment 1_instruction: 'Evaluare: Folositi functia data
        pentru a colecta nectar din fiecare floare.'
      2-3 Bee Functions Assessment 2_instruction: 'Evaluare: Creează o funcţie pentru
        a te intoarce, merge inainte, produce de 3 ori miere dintr-o dată apoi intoarce
        albina de la inceput.'
      2-3 Bee Loops 1_instruction: 'Fiecare floare contine o unitate de nectar. Colecteaza
        nectarul din fiecare floare. '
      2-3 Bee Loops 10_instruction: Poti folosi o bucla cat timp inauntrul altor doua
        bucle pentru a colecta tot nectarul?
      2-3 Bee Loops 11_instruction: Foloseste o bucla cat timp pentru a colecta tot
        nectarul florilor din acest camp.
      2-3 Bee Loops 12_instruction: Foloseste o bucla cat timp pentru a colecta tot
        nectarul florilor din acest camp.
      2-3 Bee Loops 13_instruction: "Evaluare: Folosește blocul \"repetă\" pentru
        a colecta \ntot nectarul."
      2-3 Bee Loops 1A_instruction: 'Hei, eu sunt o albină. Mă poţi ajuta să strâng
        nectarul din aceste flori? '
      2-3 Bee Loops 2_instruction: Foloseste o bucla pentru a colecta nectarul si
        a face miere.
      2-3 Bee Loops 2A_instruction: Poti face aceasi sarcina mai usor cu o bucla?
      2-3 Bee Loops 3_instruction: Colecteaza nectarul din fiecare floare si fa miere
        la fiecare fagure de miere.
      2-3 Bee Loops 3A_instruction: Poti folosi o bucla pentru a colecta tot nectarul?
      2-3 Bee Loops 3B_instruction: Acum foloseste noul bloc de repetitie pentru a
        colecta tot nectarul si a face toata mierea.
      2-3 Bee Loops 4_instruction: Foloseste o bucla similara ca in puzzle-ul trecut,
        dar foloseste un viraj.
      2-3 Bee Loops 4A_instruction: |-
        Ce se intampla daca repeti aceasi secventa de 3 ori?
        Nu uita sa faci mierea la sfarsit!
      2-3 Bee Loops 5_instruction: Foloseste o bucla pentru a merge in jos si colecteaza
        tot nectarul.
      2-3 Bee Loops 6_instruction: Foloseste o bucla pentru a colecta nectarul din
        fiecare floare si a face miere la fiecare fagure de miere.
      2-3 Bee Loops 7_instruction: Pune aceste blocuri intr-o bucla pentru a colecta
        nectarul din fiecare floare.
      2-3 Bee Loops 8_instruction: Aceste flori mov au o cantitate necunoscuta de
        nectar. Foloseste bucla "cat timp nectar" pentru a colecta tot nectarul. Aceasta
        bucla va merge atat timp cat conditia este indeplinita, in acest caz nectar
        > 0.
      2-3 Bee Loops 9_instruction: Bucla cat timp poate face aceasi actiune ca si
        declaratia daca intr-o bucla. Adauga o bucla cat timp acestui cod pentru a
        face aceasi sarcina.
      2-3 Bee Loops Assessment 1_instruction: "Evaluare - utilizează o buclă \"în
        timp ce\" pentru a colecta \ntot nectarul din această floare."
      2-3 Maze 1_instruction: "Mă poți ajuta să prin porcul buclucaș? Stivează două\nblocuri
        \"mută înainte\" împreună și apasă \"Rulează\". "
      2-3 Maze 10_instruction: Ghidează-mă la răutatea verde! (Atenție la TNT)
      2-3 Maze 11_instruction: |-
        Du-mă la floare, mi-e foame! De căte ori
        trebuie să repeți un bloc?
      2-3 Maze 12 (copy 1)_instruction: |-
        Poți înlocui răspunsul anterior cu
        doar două blocuri? (Sugestie: Creează o buclă folosind un bloc "repetă ori".)
      2-3 Maze 12 (copy 2)_instruction: |-
        Poți înlocui răspunsul anterior cu
        doar două blocuri? (Sugestie: Creează o buclă folosind un bloc "repetă ori".)
      2-3 Maze 12 (old)_instruction: Du-mă la porc, acum cu blocul Repetă ori!
      2-3 Maze 12 - One Move Block_instruction: Mergi catre porc! Dar de data aceasta,
        poți folosi doar un singur bloc "mergi înainte". Vezi alte blocuri care ar
        putea să te ajute?
      2-3 Maze 12_instruction: |-
        Poți înlocui aceste cinci blocuri cu doar două blocuri?
        (Sugestie: Creează o buclă folosind un block "repetă ori".)
      2-3 Maze 13 (old)_instruction: Du-mă la porc, acum cu blocul Repetă până când!
      2-3 Maze 13_instruction: Du-mă la porc folosind doar două blocuri.
      2-3 Maze 14 (old)_instruction: Du-mă la porc cu blocul Repetă până când!
      2-3 Maze 14_instruction: "Du-mă la floarea-soarelui! (Unde este acel bloc \"repetă
        \nori\", când am nevoie de el?)"
      2-3 Maze 15 (old)_instruction: Du-mă la porc cu blocul Repetă până când!
      2-3 Maze 15_instruction: Utilizează două bucle pentru a ajunge la porc folosind
        mai puține blocuri.
      2-3 Maze 16 (old)_instruction: Du-mă la porc cu blocul Repetă până când!
      2-3 Maze 16 before_instruction: Du-mă la porc.
      2-3 Maze 16_instruction: Du-mă la floarea-soarelui. Buclează secvența!
      2-3 Maze 2_instruction: Acest porc îmi zbârlește penele. Ajută-mă să-l prind!
      2-3 Maze 3_instruction: "Trasează calea şi du-mă la porcul buclucaș. Evită \nTNT-ul
        sau penele vor zbura!"
      2-3 Maze 4_instruction: Ghidează-mă la răutatea verde! (Atenție la TNT)
      2-3 Maze 5_instruction: Ghidează-mă la răutatea verde! (Atenție la TNT)
      2-3 Maze 6_instruction: |-
        Păstrează-ți calmul și ajută-mă să găsesc porcul rău. Altfel
        s-ar putea să mă supăr!
      2-3 Maze 7_instruction: Ghidează-mă la răutatea verde! (Atenție la TNT)
      2-3 Maze 8_instruction: Du-mă la porc!
      2-3 Maze 9_instruction: Ghidează-mă la răutatea verde! (Atenție la TNT)
      2-3 Maze Loops 1_instruction: Poţi să mă duci la porc din 5 mutări?
      2-3 Maze Loops 17_instruction: Du-mă la floarea-soarelui!
      2-3 Maze Loops 18_instruction: Du-mă la floarea-soarelui! Foloseste bucla "repeta"
        pentru a folosi mai putine blocuri.
      2-3 Maze Loops 19_instruction: Du-mă la floarea-soarelui!
      2-3 Maze Loops 20_instruction: Du-mă la floarea-soarelui cu cat mai putine blocuri
        posibile!
      2-3 Maze Loops 21_instruction: Du-mă la floarea-soarelui cu cat mai putine blocuri
        posibile!
      2-3 Maze Loops Assessment 1_instruction: "Evaluare: Du-mă la floarea-soarelui
        \nfolosind doar 5 blocuri! "
      2-3 Maze sq1_instruction: |-
        This pig is ruffling my feathers.  Help me find
        him!
      2-3 Maze sq10_instruction: Du-mă la porc! Ce blocuri au fost repetate?
      2-3 Maze sq10v2_instruction: Du-mă la porc! Ce blocuri au fost repetate?
      2-3 Maze sq2_instruction: "Trasează calea și condu-mă la porcul buclucaș. Evită
        \nTNT-ul sau penele vor zbura!"
      2-3 Maze sq3_instruction: Ghidează-mă la răutatea verde! (Atenție la TNT)
      2-3 Maze sq4_instruction: |-
        Păstrează-ți calmul și ajută-mă să găsesc porcul rău. Altfel
        s-ar putea să mă supăr!
      2-3 Maze sq5_instruction: "Du-mă la porc! De câte ori trebuie să \nrepeți un
        bloc?"
      2-3 Maze sq6_instruction: |-
        Poți înlocui răspunsul precedent cu doar două
        blocuri? (Sugestie: Creează o buclă folosind blocul "repetă ori".)
      2-3 Maze sq7_instruction: Du-mă la intrusul verde utilizând doar trei blocuri.
      2-3 Maze sq8_instruction: "Du-mă la porc! (Unde este acel bloc \"repetă ori\"
        \natunci când am nevoie de el?)"
      2-3 Maze sq9_instruction: Creează bucle pentru a ajunge la porc folosind mai
        puține blocuri.
      2-3 maze sq11_instruction: Du-mă la porc! Ce blocuri au fost repetate?
      2-3 maze sq12_instruction: Poți înlocui răspunsul anterior cu o buclă folosinf
        blocul "repetă ori"?
      2-3 maze sq13_instruction: |-
        Dragă persoană. Eu zombie. Trebuie... să ajung... la floarea-soarelui.
        Creează o buclă cu blocul "repetă până când".
      2-3 maze sq14_instruction: Poți ajunge la floarea-soarelui folosind doar patru
        blocuri?
      2-3 maze sq15_instruction: Poți ajunge la floarea-soarelui folosind doar cinci
        blocuri?
      2-3 maze sq16_instruction: |-
        Ok, acesta este similar, dar un pic diferit. Poți
        să faci acest lucru doar în cinci blocuri?
      2-3_instruction: |-
        Purple flowers may have either 1 or 0 nectar. Be careful
        not to collect nectar from a purple flower if it doesn't have any.
      2-3level1_instruction: Ajută pasărea să prindă porcul buclucaș mutăndu-l înainte
      20hr_farmer_stage9_1_instruction: |-
        Hi, I'm a farmer. I need your help to flatten
        the field on my farm so it's ready for planting. Move me to the pile of dirt
        and use the "remove" block to remove it.
      20hr_farmer_stage9_10_instruction: |-
        I'm working late, so it's dark out, and
        I can't tell how large the piles are. Now I don't have all the options I
        used to have on the while block. Move me along the field, and if there is
        a pile, remove it
      20hr_farmer_stage9_11_instruction: |-
        It's still dark outside. Move me along
        the field. If there is a pile, remove it, and if there is a hole, fill it
        in. Hint: use the dropdown menu of options on the "if" block.
      20hr_farmer_stage9_2_instruction: |-
        Next, move me to the hole and fill it with
        TWO shovelfuls of dirt, using the "fill" block.
      20hr_farmer_stage9_3_instruction: |-
        Move me to the pile of dirt and tell me
        how many shovelfuls to remove using as few blocks as possible.
      20hr_farmer_stage9_4_instruction: |-
        Can you help me remove all four piles of
        dirt? Hint: use a repeat block if you can.
      20hr_farmer_stage9_5_instruction: |-
        Help me fill in all these holes with 5 shovelfuls
        of dirt. Hint: you can put a "repeat" block inside the "while" block.
      20hr_farmer_stage9_6_instruction: |-
        Remove all the piles of dirt, using as few
        blocks as possible. The new options in the dropdown menu on the "while"
        block tell me if I'm standing on a pile or a hole.
      20hr_farmer_stage9_7_instruction: |-
        Wow, I found a really deep hole! I don't
        know how many shovelfuls of dirt it needs. Can you write a program that fills
        it until the ground is even?
      20hr_farmer_stage9_8_instruction: |-
        Help me fill in the hole at the end of the
        field, using as few blocks as possible.
      20hr_farmer_stage9_9_instruction: |-
        Make me remove all these piles of dirt.
        Try to use as few blocks as possible. Hint: try using a "while" block.
      20hr_maze_stage2_1_instruction: |-
        Can you help me to catch the naughty pig?
        Stack a couple of "move forward" blocks together and press "Run" to help
        me get there.
      20hr_maze_stage2_10_instruction: |-
        Ok, try the new "repeat until" block -
        it will repeat until I reach the annoying pig.
      20hr_maze_stage2_11_instruction: |-
        Ok, one last time for practice - can you
        solve this one using only 4 blocks?
      20hr_maze_stage2_12_instruction: |-
        Dear person. Me zombie. Me hungry. Must...
        get... to sunflower... Can you get me there with only 5 blocks?
      20hr_maze_stage2_13_instruction: |-
        Ok, this is similar, but slightly different.
        Can you do it in only 5 blocks?
      20hr_maze_stage2_14_instruction: |-
        Use the new "if" block to let me decide
        when to turn. Hint: you only need one more block, but learn how we set it
        up so you can do it on your own next time.
      20hr_maze_stage2_15_instruction: |-
        Ok, this is just like the last puzzle, but
        you need to remember how you used the "if" block and the "repeat" block
        together.
      20hr_maze_stage2_16_instruction: |-
        Me want sunflower! Use an "if" block to
        get me there with the fewest number of blocks.
      20hr_maze_stage2_17_instruction: |-
        Ok, let's do that again for practice - this
        isn't very different, but watch out for the chompers!
      20hr_maze_stage2_18_instruction: |-
        The "If-else" blocks checks a condition,
        and then does one thing OR another. To get me to the sunflower try to use
        this new block.
      20hr_maze_stage2_19_instruction: |-
        One more practice of the "if-else" block,
        can you get it right on your first try?
      20hr_maze_stage2_2_instruction: |-
        This pig is ruffling my feathers. Help me
        to find him!
      20hr_maze_stage2_20_instruction: |-
        Can you add just 3 blocks to help me solve
        a more complex maze? If you do it right, I can walk any curvy path no matter
        the length.
      20hr_maze_stage2_3_instruction: |-
        Trace the path and lead me to the silly pig.
        Avoid TNT or the feathers will fly!
      20hr_maze_stage2_4_instruction: |-
        Guide me to the green evilness! (Watch out
        for TNT)
      20hr_maze_stage2_5_instruction: |-
        Keep calm and help me to find the bad pig.
        Otherwise I might get angry!
      20hr_maze_stage2_6_instruction: |-
        There's a way I can get to the silly pig
        using only 2 blocks. Can you figure it out?
      20hr_maze_stage2_7_instruction: |-
        Try to get me to the green intruder using
        only three blocks.
      20hr_maze_stage2_8_instruction: |-
        Help me banish this bad piggy using the fewest
        number of blocks. Try using more than one "repeat times" block.
      20hr_maze_stage2_9_instruction: |-
        When a block is grey, that means you can't
        delete it. Solve this puzzle using the "repeat" block that repeats 3 times.
        Try putting these 3 blocks inside the grey "repeat" block: move, move, turn.
      4-5 Artist 1_instruction: 'Ajută-mă să termin de desenat cutia mea. (Fiecare
        linie are o lungime de 300 de pixeli) '
      4-5 Artist 10_instruction: "Apasă \"Rulează\" să testezi codul. Apoi, repetă-l
        \nde atâtea ori încât să finalizezi desenul. Culorile vor fi diferite de fiecare
        dată."
      4-5 Artist 11_instruction: "Completează liniile verzi. Liniile au 300 pixeli
        \nlungime si sunt la distanță de 15 pixeli una față de cealaltă."
      4-5 Artist 2_instruction: Poți să folosești bucla in acest cod pentru a finaliza
        pătratul?
      4-5 Artist 3.5_instruction: "Ok, încearcă să-ți dai seama ce se întâmplă dacă
        rulezi \nacest cod (sau apasă \"Rulează\" ca să-l încerci). Apoi, repetă-l
        suficient pentru a finaliza \ndesenul. Culorile vor fi (cel mai probabil)
        diferite de fiecare dată."
      4-5 Artist 3_instruction: "Acest pat de flori dreptunghiular are un perimetru
        de 600. \nLatura lungă are o lungime de 200. Trasează dreptunghiul."
      4-5 Artist 4_instruction: "Cate grade sunt într-un cerc?  Folosește bucla cu
        blocurile \npentru a crea un cerc de culori."
      4-5 Artist 5_instruction: Ce unghi folosești?
      4-5 Artist 6_instruction: "Acest triunghi echilateral are unghiuri de 60, 60
        \nsi 60 de grade. Fiecare latură este de 200 de pixeli. Finalizează desenul."
      4-5 Artist 7_instruction: |-
        Acest triunghi dreptunghic are unghiuri de 30, 60 si 90
         de grade. Lungimea părții înclinate este dublul înălţimii de 100 pixeli. Finalizează desenul.
      4-5 Artist 8_instruction: Linia de la jumătate pe un teren de fotbal este perpendiculară
        pe tuşă. Acest câmp are un perimetru de 800 pixeli şi este lung de 240 pixeli.
        Cât de lat este? Trasează limitele şi linia de la jumătatea drumului.
      4-5 Artist 9_instruction: "Desenează cealaltă jumătate pentru că design-ul este
        simetric. \nTriunghiurile sunt echilaterale şi au o lungime de 50 pixeli."
      4-5 Artist Assessment 1_instruction: "Evaluare: Utilizează o buclă pentru a
        desena triunghiul \nechilateral. Fiecare latură are 300 de pixeli."
      4-5 Artist For Loops 1_instruction: Așează numerele de la 1 până la 10 în blocuri
        de lățime şi rulează codul.
      4-5 Artist For Loops 11_instruction: "Completează blocul \"pentru\" astfel încât
        acesta \nnumără 0, 20, 40, 60, 80... 200."
      4-5 Artist For Loops 12_instruction: "Ce se întâmplă dacă inversezi numerele
        \"de la\" \nşi la\" numere? Completează blocul \"pentru\" astfel încât acesta
        să numere 200, 180, 160, 140, 120... 0. "
      4-5 Artist For Loops 13_instruction: "Acest model a fost început fără o buclă
        \"pentru\" şi conține prea multe blocuri!  Utilizează un bloc \"pentru\" ca
        să finalizezi spirala.  Sugestie: \nlungimea ultimei linii este de 250 pixeli."
      4-5 Artist For Loops 14_instruction: "Cineva a început codul, dar apoi și-a
        dat seama \ncă trebuie să existe o modalitate mai rapidă! Utilizează un bloc
        \"pentru\" cu scopul de a înlocui blocurile şi de a finaliza spirala triunghiulară.
        (Sugestie: lungimea ultimei linii este de 300 de pixeli.)"
      4-5 Artist For Loops 15_instruction: "Cineva a început codul, dar apoi și-a
        dat seama \ncă trebuie să existe o modalitate mai rapidă! Utilizează un bloc
        \"pentru\" cu scopul de a înlocui blocurile şi de a finaliza spirala hexagonală.
        (Sugestie: lungimea ultimei linii este de 200 de pixeli.)"
      4-5 Artist For Loops 2_instruction: Acesta este un bloc "pentru". În loc să
        introduci 1,2,3... 10, blocul "pentru" poate repeta blocuri de cod aflate
        în interiorul lui astfel poate introduce numerele pentru tine. Tastează numărul
        10 în secțiunea "pana la " de bloc "pentru".
      4-5 Artist For Loops 3_instruction: "Cum putem număra de la 1 la 50? Editează
        \nblocul \"pentru\"."
      4-5 Artist For Loops 4_instruction: Completează blocul "pentru" astfel încât
        acesta numără de la 1 la 10 cu câte 1.
      4-5 Artist For Loops 6_instruction: "Desenează pătrate cu laturi de 50, 60,
        70, \n80 și 90 de pixeli. Vei avea nevoie să utilizezi funcţia \"desenează
        un pătrat\" de cinci ori."
      4-5 Artist For Loops 7_instruction: "Desenează aceleași patrate, dar folosește
        un bloc \"numără \ncu\" pentru a modifica dimensiunile. Plasează blocul \"numărător\"
        în funcţia \"desenează \nun pătrat\". Sugestie: Este în categoria variabilelor."
      4-5 Artist For Loops 8_instruction: "Poţi finaliza programul prin plasarea \nblocurilor
        în interiorul unui bloc \"pentru\" care numără de la 10 la 200 cu câte 10?
        Poţi \ngăsi blocul \"pentru\" în categoria de bucle."
      4-5 Artist For Loops 9_instruction: "Aceste cercuri au diametrul de 5, 10, 15,
        20, \n25, 30 şi 35. Desenează cercurile folosind un bloc \"pentru\"."
      4-5 Artist Free Draw 1_instruction: "Desen liber!  Desenează orice te simți
        inspirat \nsă creezi."
      4-5 Artist Functions 1_instruction: Utilizează o buclă de repetare pentru a
        desena acest triunghi.
      4-5 Artist Functions 10a_instruction: "Pune acest cod în interiorul funcţiei
        'desenează un fulg de nea' \nşi înlocuiește numărul 50 cu parametrul \"dimensiune\".
        Funcţia este deja \napelată pentru a crea un fulg de nea, care este de 100
        pixeli."
      4-5 Artist Functions 10b_instruction: "Utilizează funcţia 'desenează un fulg
        de nea' \npentru a crea fulgi de diferite dimensiuni.  Indiciu: primul fulg
        de nea are 25 în lungime \nşi fiecare fulg de zăpadă este de două ori mai
        mare decât cel dinainte."
      4-5 Artist Functions 11_instruction: "Această funcţie \"desenează un hexagon\"
        foloseşte \nfuncţia \"desenează un triunghi\". Completează funcţia hexagonului.
        (Indiciu: un \nhexagon are 6 laturi, fiecare cu lungimea de 100 pixeli)"
      4-5 Artist Functions 12_instruction: "Completează funcţia \"desenează valuri\".
        \ Fiecare \nval este alcătuit dintr-un val Superior şi un val inferior.   Sugestie:
        Desenează 5 valuri \nalbastre."
      4-5 Artist Functions 13 Free play_instruction: "Aici sunt date unele funcţii
        care să \ndeseneze planete, stele, rachete şi roboţi. Folosește-le oricum
        dorești pentru a crea \npoze pe care le poţi distribui prietenilor tăi."
      4-5 Artist Functions 14 Free play_instruction: "Aici, noi ți-am pus la dispoziție
        \nmai multe funcţii.  Folosește-le oricum dorești în interiorul uneia sau
        mai multor bucle \npentru a crea fotografii pe care le poți distribui prietenilor
        tăi. Fă clic pe 'Rulează' pentru a vedea \nun exemplu."
      4-5 Artist Functions 15 Assessment_instruction: "Evaluare: Utilizează funcţia
        \"desenează \nun pătrat\" pentru a crea pătratele.  Pătratele sunt de 50,
        100 şi 150 \nde pixeli."
      4-5 Artist Functions 2a_instruction: "Acum pune aceste blocuri într-o funcţie
        nouă, \nnumită \"desenează un triunghi mic\" şi apeleaz-o."
      4-5 Artist Functions 2b_instruction: Acum creează o funcţie numită "desenează
        un triunghi mic" folosind blocurile furnizate.
      4-5 Artist Functions 3_instruction: 'Acum creează funcţiile "desenează un triunghi
        mediu" şi "desenează un triunghi mare". Funcţia "desenează un triunghi mic"
        este făcută pentru tine. Triunghiurile au laturi cu lungimea de 50 (mici),
        100 (mediu) şi 150 (mare). '
      4-5 Artist Functions 4_instruction: "Această funcție nouă \"desenează un triunghi\"
        \nare un parametru şi poate face munca a tuturor celor trei funcţii dinainte.
        Desenează \naceleaşi triunghiuri folosind această nouă funcţie."
      4-5 Artist Functions 5_instruction: Poţi modifica funcţia "desenează un triunghi"
        într-o funcţie "desenează un pătrat" pentru a schimba desenul?
      4-5 Artist Functions 6_instruction: 'Utilizează funcțiile "desenează un pătrat"
        şi "desenează un triunghi" pentru a desena o casă. (Sugestie: laturile pătratului
        sunt de 200 de pixeli)'
      4-5 Artist Functions 6b_instruction: |-
        Folosește funcțiile "desenează un pătrat" și "desenează un triunghi"
        împreună cu alte blocuri pentru a crea o casă, adăugându-le pe acestea funcției "desenează o casă"
        și apoi apelați-o.
      4-5 Artist Functions 7_instruction: "Folosește funcția \"desenează o casă\"
        pentru a desena \ncase de 100 de pixeli și de 50 de pixeli. Cele două case
        sunt separate de\n50 de pixeli."
      4-5 Artist Functions 8_instruction: |-
        Funcția "desenează o floare" are un parametru
        care îți permite să setezi înalțimea tulpinii. Seteaz-o la 200 și observă ce se întâmplă.
      4-5 Artist Functions 9_instruction: "Desenează 3 flori. Prima are o \nînălțime
        de 100 iar următoarea floare are întodeauna o înălțime mai mare cu 50 de pixeli
        \ndecât precedenta. Florile se află, de asemenea, la o distanță de 100 de
        pixeli una față de cealaltă."
      4-5 Artist Patterns 1_instruction: |-
        Poți desena acest pătrat folosind o buclă?
        Fiecare latură are o lungime de 20 de pixeli.
      4-5 Artist Patterns 10_instruction: "Acest cod desenează două rânduri de hexagoane
        - \nbuclează totul de 4 ori pentru a realiza întregul fagure de miere. Sugestie:
        Va trebui \nsă sari înapoi 120 de pixeli în interiorul buclei tale ultraperiferice
        pentru a te asigura că artistul nu va\niesi cu desenul de pe ecran."
      4-5 Artist Patterns 11_instruction: "De câte ori trebuie să buclezi aceasta
        \npentru a desena un semicerc? Sugestie: dacă sunt 360 de grade într-un cerc
        și fiecare \nbuclă se mută 3 grade, de cîte ori trebuie să buclezi pentru
        a desena un cerc întreg?"
      4-5 Artist Patterns 12_instruction: "Dacă vei copia acea buclă și vei vira la
        stânga în loc de \nla dreapta, ce se va întîmpla? Poți repeta acest lucru
        astfel încât să desenezi acest val?"
      4-5 Artist Patterns 13_instruction: "Haide acum să buclăm tot acel lucru de
        patru \nori pentru a crea această ramă de tablou. Atenție la colțuri - nu
        poți \ndoar să virezi la 90 de grade! Dacă buclarea unui viraj de 3 grade
        de 60 de ori realizează jumatate de cerc, \ncare din aceste blocuri de cod
        va realiza un sfert de cerc pentru colțuri?"
      4-5 Artist Patterns 2_instruction: Dacă plasezi bucla de repetare a unui pătrat
        în interiorul altei bucle, noi numim aceasta o buclă imbricată. Ce trebuie
        să adaugi la bucla din exterior pentru a te asigura că toate cele 15 pătrate
        se aliniază unul lângă celălalt?
      4-5 Artist Patterns 3_instruction: Acum, hai să mergem încă un nivel în profunzimea
        problemei?
      4-5 Artist Patterns 4_instruction: Acest diamant are laturi de 50 de pixeli
        și unghiuri de 120 și 60 de grade. Folosește o buclă pentru a îl desena.
      4-5 Artist Patterns 5.5_instruction: De câte ori ai nevoie să repeți acest block
        pentrua desena întreaga grilă de diamante?
      4-5 Artist Patterns 5_instruction: Hai să repetăm aceasta pentru a face un rând
        de 6 diamante. Observă ca am schimbat codul nostru pentru diamant să se repete
        de 3 ori în loc de două - de ce crezi că am procedat așa?
      4-5 Artist Patterns 6_instruction: De câte ori trebuie să repeți acest block
        pentru a desena întreaga grilă de diamante?
      4-5 Artist Patterns 7_instruction: Hai să modificăm codul de la ultimul puzzle
        pentru a face acest model mai complex. Notează cum diamantele se suprapun
        acum, încearcă să schimbi primul "săritură înapoi" de la 100 la 50 (jumatate
        din distanță) - cât de departe ar trebui să meargă artistul cu a doua "săritură
        înapoi"?
      4-5 Artist Patterns 8_instruction: Folosește o buclă pentru a desena acest hexagon
        cu laturile de 40 de pixeli și unghiuri de 60 de grade.
      4-5 Artist Patterns 9.5_instruction: Hai să buclăm acest cod pentru a desena
        două rânduri de hexagoane. Notează cum al doilea rând al nostru este întors
        spre dreapta.
      4-5 Artist Patterns 9_instruction: Acum repetă acel cod de 3 ori pentru a desena
        întregul rând. Sugestie, fiecare hexagon are o lățime de 80 de pixeli de la
        cele mai depărtate puncte de la stînga la dreapta.
      4-5 Artist Patterns Free Play_instruction: Joc la alegere - încearcă-ți mâna
        și creează pe cont propriu un model al tău!
      4-5 Bee Conditionals - FC Test_instruction: Albina vrea doar nectar acum. Nu
        toate obiectele sunt flori, deci verifică sub FIECARE NOR pentru a vedea dacă
        el ascunde o floare. Dacă este așa, atunci poți aduna nectar.
      4-5 Bee Conditionals 1 (copy 1)_instruction: |-
        The bee can't tell if this is
        a flower or a honeycomb. Gather nectar only from flowers, but first check
        if it is a flower or a honeycomb.
      4-5 Bee Conditionals 1_instruction: Albina nu-și poate da seama dacă acesta
        este o floare sau un fagure de miere. Adună nectar doar din flori, dar mai
        întâi verifică dacă acesta este o floare sau un fagure de miere.
      4-5 Bee Conditionals 2 (copy 1)_instruction: |-
        The bee only wants nectar right
        now. Remember, not all objects are flowers, so check to gather nectar only
        at flowers.
      4-5 Bee Conditionals 2_instruction: Albina vrea acum doar nectar. Ia aminte,
        nu toate obiectele sunt flori, așadar verifică mai întâi pentru a aduna nectarul
        doar din flori.
      4-5 Bee Conditionals 3_instruction: Acum albina vrea să facă miere. Verifică
        mai întâi pentru a face miere doar la faguri.
      4-5 Bee Conditionals 4 (copy 1)_instruction: |-
        The unknown object is either
        a flower or a honeycomb. Use the if/else block to collect nectar if it is
        a flower, else to make honey (because it is a honeycomb).
      4-5 Bee Conditionals 4_instruction: Obiectul necunoscut este ori o floare, ori
        un fagure de miere. Folosește blocul "dacă/altfel" pentru a colecta nectar
        dacă acesta este o floare, altfel pentru a face miere (deoarece acesta este
        un fagure).
      4-5 Bee Conditionals 5_instruction: Sub acei nori, ar putea exista o floare
        sau un fagure de miere. Folosește blocul "dacă/altfel" pentru a colecta nectar
        dacă acolo este o floare, altfel pentru a face miere (deoarece acolo este
        un fagure).
      4-5 Bee Conditionals 6 (copy 1)_instruction: |-
        This purple flower may have either
        3, 2, or 1 nectar. Here an if-else block is combined with another if-else
        block to create an if, else-if, else block. Complete the solution to collect
        the unknown amount of nectar.
      4-5 Bee Conditionals 6_instruction: Această floare violetă ar putea avea ori
        3, ori 2 nectaruri sau 1 nectar. Aici un bloc "dacă/altfel" este combinat
        cu alt bloc "dacă/altfel" pentru a crea un bloc "dacă", "altfel-dacă", "altfel".
        Completează soluția pentru a colecta o cantitate necunoscută de nectar.
      4-5 Bee Conditionals 7_instruction: Amintește-ți că florile violete pot avea
        3, 2 nectaruri sau 1 nectar. Completează funcția "verifică floare violetă"
        și folosește-o pentru a colecta tot nectarul la flori.
      4-5 Bee Conditionals 8_instruction: Scrie în interiorul funcției "verifică floare
        fă miere". Funcția ta ar trebui să verifice dacă floarea violetă are 3, 2
        nectaruri sau 1 nectar și să colecteze tot nectarul. Apoi, mută înainte și
        fă miere.
      4-5 Bee Conditionals Assessment 1_instruction: "Evaluare: Acest cod este greșit.
        \nCompletează funcția \"ia nectar sau fă miere\", apoi apeleaz-o pentru a
        colecta tot nectarul și mierea. Amintește-ți că florile violete pot avea 3,
        2 sau 1 nectar."
      4-5 Bee Debugging 1_instruction: Aceste blocuri chiar mă deranjează. Poți tu
        să le repari?
      4-5 Bee Debugging 10_instruction: Găsește erorile și repară-le.
      4-5 Bee Debugging 11_instruction: Aceasta numără corect?
      4-5 Bee Debugging 2_instruction: Ajută albina să obțină nectarul și să facă
        miere.
      4-5 Bee Debugging 3_instruction: Găsește erorile și repară-le.
      4-5 Bee Debugging 4_instruction: Aceste blocuri nu funcţionează. Care este modelul?
      4-5 Bee Debugging 5_instruction: Ceva nu este în regulă aici...
      4-5 Bee Debugging 6_instruction: Floarea violetă are o cantitate necunoscută
        de nectar. Repară blocurile pentru obține tot nectarul din floare.
      4-5 Bee Debugging 7_instruction: Funcției îi lipsește ceva...
      4-5 Bee Debugging 8_instruction: Această funcție este bună, dar nu este folosită
        corect.
      4-5 Bee Debugging 9_instruction: De ce nu face albina destulă miere?
      4-5 Bee Debugging Assessment 1_instruction: 'Evaluare: Repară codul.'
      4-5 Bee Nested Loops 1_instruction: Folosește o buclă pentru a colecta tot nectarul.
      4-5 Bee Nested Loops 2_instruction: 'Colectează tot nectarul din fiecare floare.
        Folosește o buclă imbricată. '
      4-5 Bee Nested Loops 3_instruction: Colecteză tot nectarul prin a așeza codul
        de început in interiorul unei bucle imbricate.
      4-5 Bee Nested Loops 4_instruction: 'Colectează tot nectarul din fiecare floare
        și fă miere la fiecare fagure. Folosește o buclă imbricată. '
      4-5 Bee Nested Loops 5_instruction: Colectează tot nectarul prin crearea unei
        bucle imbricate.
      4-5 Bee Nested Loops 6_instruction: Colectează tot nectarul.
      4-5 Bee Nested Loops 7_instruction: Pune această buclă in interiorul unei alte
        bucle pentru a crea o buclă imbricată și a colecta tot nectarul din flori.
      4-5 Bee Nested Loops 8_instruction: 'Colectează tot nectarul din aceste flori
        prin imbricarea unei bucle "în timp ce". Înlocuiește blocul interior "repetă
        ori" cu un bloc "în timp ce". '
      4-5 Bee Nested Loops 9_instruction: Colectează tot nectarul din aceste flori
        prin imbricarea unei bucle "în timp ce" în interiorul unei bucle "repetă".
      4-5 Bee Nested Loops Assessment 1_instruction: Evaluare - colectează tot nectarul
        şi fă toată mierea utilizând bucle.
      4-5 Bee Nested Loops Rows_instruction: Adună nectarul din rândurile de flori!
        Utilizează o buclă imbricată.
      4-5 Maze 1 (copy 1)_instruction: Dragă persoană. Eu zombie. Trebuie... să ajung...
        la floarea-soarelui.
      4-5 Maze 1_instruction: Dragă persoană. Eu zombie. Trebuie... să ajung... la
        floarea-soarelui.
      4-5 Maze 10_instruction: Poți ajunge la floarea-soarelui folosind doar patru
        blocuri?
      4-5 Maze 11_instruction: Poți ajunge la floarea-soarelui folosind doar șase
        blocuri?
      4-5 Maze 12_instruction: Ok, acesta este un pic diferit. Poți să faci acest
        lucru în doar șase blocuri?
      4-5 Maze 13_instruction: Du-mă la porc!
      4-5 Maze 14_instruction: Du-mă la porc! Folosește blocul "repetă până când".
      4-5 Maze 2 (copy 1)_instruction: Du-l pe zombie la floarea-soarelui, dar evită
        planta carnivoră!
      4-5 Maze 2_instruction: Du-l pe zombie la floarea-soarelui, dar evită planta
        carnivoră!
      4-5 Maze 3 (copy 1)_instruction: Trebuie... să ajung... la floarea-soarelui.
      4-5 Maze 3_instruction: Trebuie... să ajung... la floarea-soarelui.
      4-5 Maze 4 (copy 1)_instruction: Încearcă blocul "repetă" pentru a folosi mai
        puține blocuri...
      4-5 Maze 4_instruction: Încearcă blocul "repetă" pentru a folosi mai puține
        blocuri...
      4-5 Maze 5 (copy 1)_instruction: Poți rezolva acest puzzle folosind cel mai
        mic număr de blocuri posibil?
      4-5 Maze 5_instruction: Poți rezolva acest puzzle folosind cel mai mic număr
        de blocuri posibil?
      4-5 Maze 6 (copy 1)_instruction: Poți rezolva acest puzzle folosind cel mai
        mic număr de blocuri posibil?
      4-5 Maze 6_instruction: Poți rezolva acest puzzle folosind cel mai mic număr
        de blocuri posibil?
      4-5 Maze 7_instruction: Dragă persoană. Eu zombie. Trebuie... să ajung... la
        floarea-soarelui.
      4-5 Maze 8_instruction: Folosește blocul "repetă" pentru a-l duce pe zombie
        la floarea-soarelui. (Evită plantele carnivore!)
      4-5 Maze 9_instruction: Creează o buclă cu blocul "repetă până când".
      4-5 Maze Assessment 1_instruction: 'Evaluare: Du-te la floarea-soarelui.'
      4-5 Maze Conditionals 1_instruction: Utilizează blocul "repetă până când" pentru
        a-l duce pe zombie la floarea-soarelui.
      4-5 Maze Conditionals 10_instruction: "Poţi adăuga doar 3 blocuri pentru a ajuta
        zombiul să rezolve un labirint mai complex? \\r \n\\r Dacă vei face asta corect,
        el va putea merge pe orice cale, indiferent de distanță!"
      4-5 Maze Conditionals 2_instruction: Utilizează blocul "repetă până când" pentru
        a-l duce pe zombie la floarea-soarelui.
      4-5 Maze Conditionals 3_instruction: 'Folosește blocul "dacă" pentru a mă lăsa
        pe mine să decid când să virez. Sugestie: ai nevoie numai de un bloc în plus,
        dar învață cum le aranjăm noi ca să poți proceda și tu la fel data viitoare.'
      4-5 Maze Conditionals 4_instruction: Ok, acesta este la fel cu ultimul puzzle
        dar trebuie să-ți amintești cum ai folosit blocul "dacă" și blocul "repetă"
        împreună.
      4-5 Maze Conditionals 5_instruction: Eu vreau floarea-soarelui! Folosește un
        bloc "dacă" pentru a mă duce acolo cu cel mai mic număr de blocuri.
      4-5 Maze Conditionals 6_instruction: Eu vreau floarea-soarelui! Folosește un
        bloc "dacă" pentru a mă duce acolo cu cel mai mic număr de blocuri.
      4-5 Maze Conditionals 7_instruction: Ok, hai să facem acest lucru din nou pentru
        exercițiu - acesta nu e foarte diferit, dar fii atent(ă) la plantele carnivore!
      4-5 Maze Conditionals 8_instruction: Blocul "Dacă-altfel" verifică o condiție
        și apoi face un lucru SAU altul. Pentru a mă duce la floarea-soarelui încearcă
        să folosești acest bloc nou.
      4-5 Maze Conditionals 9_instruction: Încă un exercițiu cu blocul "Dacă-altfel",
        poți să reușești din prima încercare?
      4-5 Maze Conditionals Assessment 1_instruction: Folosește "repetă până când"
        și un bloc "Dacă-altfel" pentru a mă duce la floarea-soarelui în cât mai puține
        blocuri posibile.
      4-5 Nested Loops 1_instruction: 'Completează codul astfel încât acesta să deseneze
        aceste triunghiuri. Primul este deja făcut. Tip: 3 triunghiuri în rotatie
        de 360 de grade.'
      4-5 Nested Loops 10_instruction: Desenează ultimul rând de stele pe acest steag
        prin buclarea blocurilor date. Stelele au o distanță între ele de 50 de pixeli,
        dar ține minte că stelele însele au o lățime de 30 de pixeli.
      4-5 Nested Loops 11_instruction: Poți desena aceste 10 pătrate ale trotuarului
        folosind o buclă imbricată? Fiecare pătrat are 30 de pixeli.
      4-5 Nested Loops 12_instruction: Poți desena aceste 36 triunghiuri folosind
        o buclă imbricată?
      4-5 Nested Loops 2_instruction: 'Acum pune acestă buclă în interiorul unei alte
        bucle pentru  a desena 10 triunghiuri. Aceasta se numește o buclă imbricată.
        Sugestie: Toate cele 10 triungiuri completează o rotatie de 360 de grade.  '
      4-5 Nested Loops 3_instruction: 'Creează un soare prin a cuibări codul de început
        în interiorul altei bucle. Aceasta se numește o buclă imbricată.\r

'
      4-5 Nested Loops 5_instruction: Buclează codul dat pentru a crea o moară de
        vânt.
      4-5 Nested Loops 6_instruction: Poţi desena un hexagon folosind buclarea codului
        pentru desenarea unui triunghi?
      4-5 Nested Loops 7_instruction: 'Reia de 10 ori acest proiect. Cât de mult te-ai
        întors la fiecare reluare? (Indiciu: Care este rezultatul împărţirii lui 360
        la 10?)'
      4-5 Nested Loops 8_instruction: 'Reia de 6 ori acest proiect. Cât de mult te-ai
        întors la fiecare reluare? (Indiciu: Care este rezultatul împărţirii lui 360
        la 6?)'
      4-5 Nested Loops 9_instruction: Desenează dinţii în gura aligatorului!
      4-5 Nested Loops Assessment 1_instruction: Utilizaţi o buclă imbricată pentru
        a finaliza proiectul.
      4-5 While Loops 1_instruction: Mută-mă în gaură şi umple-o două lopeţi cu pământ,
        folosind blocul "umple".
      4-5 While Loops 2_instruction: Mută-mă la grămada de pământ şi apoi înlătur-o
        cu 5 lopeți, folosind blocul "elimină".
      4-5 While Loops 3_instruction: 'Mută-mă pe grămadă şi mută grămada toată, apoi
        umple complet gaura. Indicaţie: Foloseşte cât mai puţine blocuri.'
      4-5 While Loops 4_instruction: 'Oau, am găsit o gaură foarte adâncă! Nu ştiu
        de câte lopeţi cu pământ am nevoie pentru a o umple. Poţi scrie un program
        care să umple gaura până la nivelul solului? Indicaţie: Încearcă să foloseşti
        bucla "în timp ce" de data asta.'
      4-5 While Loops 5_instruction: Oau, acum sunt două găuri adânci acolo! Poţi
        tu să scri un program care să umple ambele găuri până la nivelul solului?
      4-5 While Loops 6_instruction: Oau, acum este o grămadă mare de pământ acolo!
        Poţi scrie un program care să o îndepărteze în intregime până se nivelează
        solul?
      4-5 While Loops 7_instruction: Oau, acum sunt trei grămezi mari de pământ acolo!
        Poţi scrie un program care să le îndepărteze pe fiecare dintre ele până la
        nivelul solului?
      4-5 While Loops 8_instruction: ' Acolo este o gaură într-adevăr adâncă şi o
        grămadă foarte mare de mizerie. Câte lopeţi pline de mizerie trebuie să fie
        mutate de la una la alta pentru a nivela solul? Indicaţie: Foloseşte bucla
        "în timp ce" pentru amândouă.'
      4-5 While Loops Assessment 1_instruction: Există multe găuri şi grămezi de pământ.
        Ajută-mă să le umplu şi să le mut pentru a face terenul plat.
      AlgPD DR Free Play_instruction: Create a function based on your own word problem.
      Alien Defender_instruction: 'Project Idea: Make a defender game in Play Lab!'
      Alien Defender_2018_instruction: |-
        Project Idea: Make a defender game in Play
        Lab!
      AllTheThings Applab - Turtle move with button_instruction: |-
        Add a button that
        moves the turtle when clicked.  (Click to see full instructions)
      'AllTheThings: Pixelation - Lesson 14 - Make the Letter A_instruction': |-
        Make
        a 3x5 letter 'A'. The widget is setup with the incorrect dimensions. Your
        first task is to set the second byte to the 8-bit binary code for 5: 0000
        0101. Then start entering pixel data.
      'AllTheThings: Pixelation - Lesson 15 - Color Shades 4x4_instruction': |-
        We
        start you out with the 4x4 image Maddie created in the video. Your task is
        to fill a 4x4 grid with colors using 12-bits per pixel. Here are the requirements:
        Row 1 - fill with shades of red. Row 2 - shades of green. Row 3 - shades of
        blue. Row 4 - shades of gray.
      'AllTheThings: Pixelation - Lesson 15 - Complete 3-bit color_instruction': |-
        We
        start you with the 4x2 image Maddie was creating, but we've left out the
        last two squares. Finish off the image by figuring out which two colors are
        missing and encode them.
      App Lab test_instruction: test
      AppLab_test02_instruction: |-
        One sentence summary of the activity. Click to
        view full instructions.
      Applab AllTheThings ResourcesTab AllResources_instruction: |-
        Draw a 1x1 square
        above and to the left of the turtle's starting position. Click to see full
        instructions.
      Applab AllTheThings ResourcesTab MapReference_instruction: |-
        Draw a 1x1 square
        above and to the left of the turtle's starting position. Click to see full
        instructions.
      Applab AllTheThings ResourcesTab ReferenceLinks_instruction: |-
        Draw a 1x1 square
        above and to the left of the turtle's starting position. Click to see full
        instructions.
      Applab allthethings onRecordEvent_instruction: |-
        Please sign in to test applab
        levels (By design, applab levels only work if signed in. Normally, we make
        people sign in, but this is only enforceable for a whole script and would
        be annoying to do for the allthethings script).
      Applab test_instruction: This level is submittable. For testing only!
      Artist - Nested Loops 1_instruction: |-
        Complete the code to draw these triangles.  The
        first one is done for you.  Hint:  3 triangles in a 360 degree rotation.
      Artist - Nested Loops 10_instruction: |-
        Draw the last row of stars on this flag
        by looping the provided blocks. The stars are 50 pixels apart, but remember
        that the stars themselves are 30 pixels wide.
      Artist - Nested Loops 11_instruction: |-
        Can you draw these 10 squares of this
        sidewalk using a nested loop? Each square is 30 pixels.
      Artist - Nested Loops 12_instruction: |-
        Can you draw these 36 triangles using
        a nested loop?
      Artist - Nested Loops 2_instruction: "Now nest this loop inside another loop\nto
        draw 10 triangles.  This is called a nested loop.  Hint: All 10 triangles\ncomplete
        a 360 degree rotation.  "
      Artist - Nested Loops 3_instruction: |
        Create a sun by nesting the starter code
        in another loop. This is called a nested loop.\r
      Artist - Nested Loops 5_instruction: Loop the given code to create a windmill.
      Artist - Nested Loops 6_instruction: |-
        Can you draw a hexagon by looping the
        triangle code?
      Artist - Nested Loops 7_instruction: |-
        Loop this design 10 times. How much do
        you have to turn each time you loop? (Hint: What is 360 divided by 10?)
      Artist - Nested Loops 8_instruction: |-
        Loop this design 6 times. How much do
        you have to turn each time you loop? (Hint: What is 360 divided by 6?)
      Artist - Nested Loops 9_instruction: Draw the teeth in the alligator's mouth!
      Artist - Nested Loops Assessment 1_instruction: Utilizaţi o buclă imbricată
        pentru a finaliza proiectul.
      Artist Inspiration_instruction: "Free Play Inspiration: You've now learned\neverything
        you need to know to make a pattern like this! If this picture inspires\nyou,
        try to make something similar. Otherwise, create something all your own.\\r\n\n\\r\nWant
        to know how our inspiration pattern was made? "
      Auto Open Function Editor_instruction: 'Poți apela funcții din interiorul altor
        funcții! Folosind ca bază funcția ta de "formă", creează 3 forme de casă fiecare
        mai mare cu 20 de pixeli decat precedenta, începând cu 50 de pixeli în lungime.
        Ar putea fi de ajutor folosirea unei bucle numărătoare. '
      Bee Recommended Blocks test_instruction: "Florile violete pot avea ori 1 ori
        0 \nnectar, dar nu știi exact care din ele! Ai grijă să nu colectezi nectar
        dintr-o \nfloare violetă dacă aceasta nu are deloc. Verifică dacă nectarul
        este egal cu 1 \nfolosind blocul \"dacă\"."
      Bergeron Robot Maze1_instruction: |
        Can you help me catch the naughty pig? Stack
        a couple of `move forward` blocks below the `when run` block and press "Run".
      Big Game Animation 1 (copy 1)_instruction: |-
        Now that you've learned to write
        simple linear functions, let's work on using them to add some movement to
        our game. Click play to see what your game can currently do (not much!), update
        any variables you like, and then click finish to move on.
      Big Game Animation 1_instruction: |-
        Now that you've learned to write simple
        linear functions, let's work on using them to add some movement to our game.
        Click "Run" to see what your game can currently do (not much!), update any
        variables you like, and then click finish to move on.
      Big Game Animation 2 (copy 1)_instruction: |-
        The function 'update-target'
        function takes the target's current x value, and returns an updated value.
        Complete the 'update-target' function so that it adds to the x value each
        time it is called. The more you add to x, the faster the target will go.
      Big Game Animation 2_instruction: |-
        The update-target function takes the target's
        current x value, and returns an updated value. Complete the update-target
        function so that it adds to the x value each time it is called. The more you
        add to x, the faster the target will go.
      Big Game Animation 3_instruction: |-
        The update-danger function should work just
        like update-target, except that the danger should move from the right side
        over towards the left. Complete update-danger to make the danger fly across
        the screen.
      Big Game Animation 4_instruction: |-
        At this point in your game, your danger
        should run across the screen from right to left, and your target should run
        across from left to right. They don't ever come back on screen once they've
        left, but we'll take care of that later. Take a minute to make sure your
        game is working like you want it to, and then click "Finish" to move on.
      Big Game Booleans 1_instruction: |-
        When you last worked on your game we got
        our target and danger sprites to fly across the screen, but they never come
        back. Click "Run" to see how your game is currently working, and then click
        finish and we'll work on making those sprites reappear on screen after they've
        left.
      Big Game Booleans 2_instruction: |-
        Go to the Functions section of the toolbox
        and complete the safe-left? function so that it returns true if the sprite's
        x coordinate is greater than -50. If you're successful you should see the
        Danger go off the left side and then return on the right side.
      Big Game Booleans 3_instruction: |-
        Now that you've got safe-left?, let's fill
        in safe-right? - it should take in a sprite's x coordinate and return true
        if that coordinate is less than 450. Once your safe-right? is complete you
        should see the Target go off the right side of the screen and return on the
        left.
      Big Game Booleans 4_instruction: |-
        Complete the onscreen? function so that it
        checks whether both safe-left? and safe-right? are true.
      Big Game Booleans 5_instruction: |-
        At this point your Danger should run across
        the screen from right to left, your Target should run across from left to
        right, and they should both return to the opposite side, repeatedly. Take
        a minute to make sure your game is working like you want it to, and then click
        "Finish" to move on.
      Big Game Collision 1 (copy 1)_instruction: |-
        When you last worked on your game
        we got our target and danger sprites to fly across the screen, but they never
        come back. Click run to see how your game is currently working, and then click
        finish and we'll work on making those sprites reappear on screen after they've
        left.
      Big Game Collision 1_instruction: |-
        At this point you've programmed a video
        game with a moving Target and Danger, both of which return to the screen once
        they've left, and a Player that responds to keyboard input. Click "Run"
        to see how your game is currently working, and then we'll dig into the final
        missing piece - collision detection!
      Big Game Collision 2_instruction: |-
        To move the player up and down, we'll need
        to use a conditional block to figure out which key is pressed and respond
        accordingly. Computers read keypresses as numeric key codes - the up arrow
        is 38 and the down arrow is 40. You can lookup other key codes in your student
        workbook. Edit the 'update-player' function so that if moves the player
        up when the up arrow is pressed, or down when the down arrow is pressed.
      Big Game Collision 3_instruction: |-
        Use the Distance Formula, so the distance
        function returns the distance between the player's center coordinates (px,
        py) and another sprite's center coordinates (cx, cy).
      Big Game Collision 4_instruction: |-
        Complete the collide? function so that it
        returns true if the distance between two points is less than 100 pixels apart.
      Big Game Complete_instruction: |-
        A demo of the completed CS in Algebra Big Game
        project
      Big Game Final_instruction: |-
        You made it! At this point your game should be
        fully functioning, take some time to enjoy your new game and make any final
        tweaks to it. When you're happy with the final product, click Finish and
        you'll have an opportunity to share a link to your game. Good work!
      Big Game Player 1_instruction: |-
        We're getting really close to a finished game!
        Last time you worked on your game, you used booleans to make your Target and
        Danger return to the screen once they've left. Click Run to see how your
        game looks right now, and then we'll get to making your Player move up and
        down.
      Big Game Player 2_instruction: |-
        Edit the update-player function so the player
        moves up when the up arrow (keycode 38) is pressed, and moves down (keycode
        40) when the down arrow is pressed.
      Big Game Testing_instruction: |-
        A demo of the completed CS in Algebra Big Game
        project
      Big Game Vars 1 (copy 1)_instruction: |-
        Let's get started on your Big Game!
        Here you'll see a whole bunch of placeholder code that you'll eventually
        replace with your own, but for now we're only going to worry about defining
        variables. Click "Run" to see what the game looks like with the default
        values.
      Big Game Vars 1_instruction: |-
        Let's get started on your Big Game! Here you'll
        see a whole bunch of placeholder code that you'll eventually replace with
        your own, but for now we're only going to worry about defining variables.
        Click "Run" to see what the game looks like with the default values.
      Big Game Vars 2 (copy 1)_instruction: |-
        The first step to making this game your
        own is to give it a good Title. Click edit on the 'title' and 'subtitle'
        variables and change them to something new.
      Big Game Vars 2_instruction: |-
        The first step to making this game your own is
        to give it a good Title. Click edit on the title and subtitle variables and
        change them to something new.
      Big Game Vars 3 (copy 1)_instruction: |-
        Now let's set the background for your
        new game. Edit the 'bg' variable and select a new background Image from
        the dropdown.
      Big Game Vars 3_instruction: |-
        Now let's set the background for your new game.
        Edit the bg variable and select a new background Image from the dropdown.
      Big Game Vars 4 (copy 1)_instruction: |-
        Awesome, now you can update the variables
        for your Player, Target, and Danger. Feel free to play with all of the variables
        at this point to make your game look like you'd like it to. Click 'finish'
        when you're done.
      Big Game Vars 4_instruction: |-
        Awesome! Now you can update the variables for
        your Player, Target, and Danger. Feel free to play with all of the variables
        at this point to make your game look like you'd like it to. Click "Finish"
        when you're done.
      Brad Spooky House Copy_instruction: |-
        Freeplay: Here are the functions you've
        written, and some more for you to play with. Draw something awesome! Play
        with the pen width to see how different your drawings look!
      Brad Spooky House_instruction: |-
        Freeplay: Here are the functions you've written,
        and some more for you to play with. Draw something awesome! Play with the
        pen width to see how different your drawings look!
      Building a Foundation Assessment_instruction: |-
        Build a three level pyramid,
        there are no other directions, so just play with the pieces until you get
        it!
      Busy Bee 2_instruction: Această albină are o mulţime de lucruri de facut! Observaţi
        vreunele modele pe care le puteţi utiliza pentru a simplifica codul?
      Busy Bee_instruction: Această albină are o mulţime de lucruri de facut! Observaţi
        vreunele modele pe care le puteţi utiliza pentru a simplifica codul?
      C3-Farmer While Loops 1_instruction: |-
        Move me to the hole and fill it with
        two shovelfuls of dirt, using the "fill" block.
      C3-Farmer While Loops 2_instruction: |-
        Move me to the pile of dirt and remove
        it with 5 shovel scoops, using the 'remove' block.
      C3-Farmer While Loops 3_instruction: |-
        Move me to the pile and remove all of
        it, then move to the hole and fill it completely.  Hint:  Use as few blocks
        as possible.
      C3-Farmer While Loops 4_instruction: |-
        Wow, I found a really deep hole! I don't
        know how many shovelfuls of dirt it needs.  Can you write a program that fills
        it until the ground is even?  Hint:  Try using the while loop this time.
      C3-Farmer While Loops 5_instruction: |-
        Wow, now there are two deep holes! Can
        you write a program that fills them both until the ground is even?
      C3-Farmer While Loops 6_instruction: |-
        Wow, now there is a large pile of dirt!
        Can you write a program that removes all of it so the ground is even?
      C3-Farmer While Loops 7_instruction: |-
        Wow, now there are three piles of dirt!
        Can you write a program that removes each of them until the ground is even?
      C3-Farmer While Loops 8_instruction: |2-
         There is a really deep hole and a really
        large pile of dirt.  How many shovelfuls of dirt need to be moved around to
        make the ground flat?  Hint: Use the while loop for both.
      C3-Farmer While Loops Assessment 1_instruction: |-
        There are a lot of holes and
        piles.  Help me to fill and remove them to make the ground flat.
      CSD Hackathon Pt 1_instruction: "(Click to see full instructions)"
      CSD Hackathon Pt 2_instruction: "(Click to see full instructions)"
      CSD Hackathon Week 1_instruction: "(Click to see full instructions)"
      CSD Hackathon Week 2_instruction: "(Click to see full instructions)"
      CSD U3 Background Discuss_instruction: |-
        Here's a program that looks pretty
        similar to what you've been writing, but may behave quite differently. You'll
        want to stop and discuss with the class before moving on.
      CSD U3 Background Experiment_instruction: |-
        Here's a program that looks pretty
        similar to what you've been writing, but may behave quite differently. You'll
        want to stop and discuss with the class before moving on.
      CSD U3 Boolean Modify_instruction: |-
        Modify the code so that all of the console.log
        commands print true
      CSD U3 Boolean Modify_2018_instruction: |-
        Modify the code so that all of the
        console.log commands print true
      CSD U3 Boolean Predict_instruction: |-
        What do you think this code will do when
        it is run? Predict what each console.log() command will print, then run the
        program to check your predictions.
      CSD U3 Boolean Predict_2018_instruction: |-
        What do you think this code will
        do when it is run? Predict what each console.log() command will print, then
        run the program to check your predictions.
      CSD U3 Draw Loop Discuss_instruction: |-
        Here's a program that looks pretty
        similar to what you've been writing, but may behave quite differently. You'll
        want to stop and discuss with the class before moving on.
      CSD U3 Draw Loop Experiment_instruction: |-
        Try using some of the other shape
        functions you've learned in the draw loop. What happens when you use randomNumber()
        to generate some of the inputs?You'll want to stop and discuss with the class
        before moving on.
      CSD U3 Expressions calculator_instruction: |-
        Add the numbers 1 through 10. Multiply
        the numbers 1 through 10. Check your answers with a neighbor.
      CSD U3 Frame Rate_instruction: Slow down Gamelab Gary's animation with frameRate()
      CSD U3 Keypress Boolean-2018_instruction: |-
        Modify the code so that all of the
        console.log commands print true
      CSD U3 Keypress Boolean_instruction: |-
        Modify the code so that all of the console.log
        commands print true
      CSD U3 Keypress Boolean_2018_instruction: |-
        Modify the code so that all of the
        console.log commands print true
      CSD U3 Keypress Watchers_instruction: |-
        Modify the code so that all of the console.log
        commands print true
      CSD U3 Keypress Watchers_2018_instruction: |-
        Modify the code so that all of
        the console.log commands print true
      CSD U3 L5 Freeplay_instruction: |-
        Change the value of petalSize multiple times.
        How does it change your drawing?
      CSD U3 L5 Freeplay_2018_instruction: |-
        Change the value of petalSize multiple
        times. How does it change your drawing?
      CSD U3 Mouse Input Bee 2_instruction: Do this
      CSD U3 Mouse Input Bee 2_2018_instruction: Do this
      CSD U3 Random Animation_instruction: |-
        Use randomNumber() to animate Gary's
        mouth.
      CSD U3 Random Choice_instruction: |-
        Use the randomNumber() block to generate
        either 0 or 1
      CSD U3 Random Color_instruction: |-
        Could you use randomNumber() to pick random
        colors as well? Try setting one or more of the channels in the rgb block with
        a random number. What should the maximum value be?
      CSD U3 Random Intro_instruction: |-
        What do you think this code will do when
        it is run? Make a prediction, then run this code 5 - 10 times, recording the
        output each time. Share your results with your neighbor.
      CSD U3 Random Min Max_instruction: |-
        Using console.log() write a program that
        randomly returns a number in a range you define.
      CSD U3 Random Width Height_instruction: |-
        Pick a shape block and use calls to
        randomNumber() in place of one or more of the parameters. Maker sure you run
        it a few times so you can see the effect of randomization.
      CSD U3 Simple Drawing - Animation 2_instruction: |-
        Use randomNumber() on the
        x position and width of your cloud ellipses to introduce a bit of animation.
      CSD U3 Simple Drawing - Animation_instruction: |-
        Use randomNumber() on the x
        position and width of your cloud ellipses to introduce a bit of animation.
      CSD U3 Simple Drawing - Background_instruction: |-
        Put all of your code into
        a draw() loop and then add set the background to blue with the background()
        block.
      CSD U3 Simple Drawing - Personal Animation_instruction: DO This
      CSD U3 Sprites intro sprites_instruction: Do This
      CSD U3 Sprites intro sprites_2018_instruction: Do This
      CSD U3 Variable Arithmetic pt2_instruction: |-
        Predict: What two numbers will
        be displayed in the console?
      CSD U3 Variable Arithmetic_instruction: |-
        Change the value "size" initialized
        to make a larger square.
      CSD U3 Variable Incrementation pt2_instruction: |-
        Predict: What two numbers
        will be displayed in the console?
      CSD U3 Variable Incrementation_instruction: |-
        Predict: What two numbers will
        be displayed in the console?
      CSD U3 Variables CHALLENGE gamelab gary_instruction: |-
        Use variables to animate
        Game Lab Gary
      CSD U3 Variables Initialize_instruction: |-
        Predict: What will get displayed
        in the console?
      CSD U3 Variables Intro_instruction: |
        Create your own variable, give it a value,
        and display that value in the console.
      CSD U3 Variables Random_instruction: |-
        Predict: What will get displayed in the
        console?
      CSD U3 Variables Reassign pt2_instruction: |-
        Create and assign a new variable
        in a single line.
      CSD U3 Variables Reassign_instruction: |-
        Predict: What will get displayed in
        the console?
      CSD U3 Variables Square Random Loop_instruction: |-
        Test your predictions from
        the last level.
      CSD U3 Variables Square Random_instruction: |-
        Change the value "size" initialized
        to make a larger square.
      CSD U3 Variables Square_instruction: |-
        Change the value "size" initialized
        to make a larger square.
      CSD U3 Variables TEMPLATE square_instruction: |-
        Change the value of petalSize
        multiple times. How does it change your drawing?
      CSD U3 Variables change circle size_instruction: |-
        Change the value of petalSize
        multiple times. How does it change your drawing?
      CSD U3 Variables change circle size_2018_instruction: |-
        Change the value of
        petalSize multiple times. How does it change your drawing?
      CSD U3 Variables create and assign_instruction: |-
        Create and assign size in
        a single line of code.
      CSD U3 Variables draw loop newVars_instruction: |-
        Extend this project to create
        your own random art visualization with variables.
      CSD U3 Variables draw loop rgb_instruction: |-
        Assign the variables x1 and y1
        random values inside the draw loop and use them to control where the square
        is drawn.
      CSD U3 Variables draw loop xy_instruction: |-
        Assign the variables x1 and y1
        random values inside the draw loop and use them to control where the square
        is drawn.
      CSD U3 Variables eyeBrows_instruction: |-
        Predict what will happen when you move
        the assignment of eyeSize inside the draw loop. Then try it out
      CSD U3 Variables make a big square_instruction: |-
        Change the value of size multiple
        times. How does it change your drawing?
      CSD U3 Variables make a square_instruction: |-
        Change the value of size multiple
        times. How does it change your drawing?
      CSD U3 Variables multiple assignments_instruction: |-
        Change the value of petalSize
        multiple times. How does it change your drawing?
      CSD U3 Variables naming rules v2-2018_instruction: |-
        Change the value of petalSize
        multiple times. How does it change your drawing?
      CSD U3 Variables naming rules v2_instruction: |-
        Change the value of petalSize
        multiple times. How does it change your drawing?
      CSD U3 Variables naming rules v2_2018_instruction: |-
        Change the value of petalSize
        multiple times. How does it change your drawing?
      CSD U3 Variables naming rules_instruction: |-
        Change the value of petalSize multiple
        times. How does it change your drawing?
      CSD U3 Variables random assignment_instruction: |-
        Change the value of petalSize
        multiple times. How does it change your drawing?
      CSD U3 Variables random draw loop_instruction: |-
        Predict what will happen when
        you move the assignment of eyeSize inside the draw loop. Then try it out
      CSD U3 Variables random drawing exemplar_instruction: |-
        Check out this example
        randomized drawing.
      CSD U3 Variables random with assignment_instruction: |-
        Change the value of petalSize
        multiple times. How does it change your drawing?
      CSD U3 Variables random with assignment_2018_instruction: |-
        Change the value
        of petalSize multiple times. How does it change your drawing?
      CSD U3 Variables use value rect_instruction: |-
        Predict: What will get displayed
        in the console?
      CSD U3 Variables write_instruction: |-
        Use the write block to display the value
        of size
      CSD U3 Variables2 expressions in commands_instruction: |-
        Use expressions inside
        a drawing command
      CSD U3 Variables2 expressions in variables_instruction: |-
        Assign the value of
        each expression to a variable and console.log that variable.
      CSD U3 Variables2 expressions_instruction: |-
        Use console.log to display the
        results of each expression. Then create your own.
      CSD U4 - Events Template_instruction: |-
        Add a large red button to your screen
        using Design Mode. (Click for full instructions.)
      CSD U5 black white images pixelation 2_instruction: |-
        Draw a smiley face (click
        here to see image)
      CSD U5 black white images pixelation 3_instruction: |-
        Change the width and height
        sliders to find the image (click here to see more)
      CSD U5 black white images pixelation 4_instruction: |-
        Add eyebrows to the smiley
        face (click here to see the image)
      CSD U5 black white images pixelation 5_instruction: Draw anything you like
      CSD U5 black white images pixelation_instruction: |-
        Complete the X shape by
        typing 0s and 1s
      CSD U6 params modify clouds_instruction: |-
        # Clouds\r
        \r
        This program makes
        the clouds move when you blow on the sound sensor, but it's not finished.\r
        \r
        #
        Do This\r
        * Create a new function `moveCloud(name)` that will move any cloud.\r
          *
        (Hint: you will use almost all the same code as the `moveCloud0` function)\r
        *
        Call your new `moveCloud(name)` function inside the event block, once for
        each cloud name.\r
         * (Hint: this is similar to how the `loopCloud(name)`
        function is called many times.
      CSD U6 params modify clouds_2018_instruction: |-
        # Clouds\r
        \r
        This program
        makes the clouds move when you blow on the sound sensor, but it's not finished.\r
        \r
        #
        Do This\r
        * Create a new function `moveCloud(name)` that will move any cloud.\r
          *
        (Hint: you will use almost all the same code as the `moveCloud0` function)\r
        *
        Call your new `moveCloud(name)` function inside the event block, once for
        each cloud name.\r
         * (Hint: this is similar to how the `loopCloud(name)`
        function is called many times.
      CSD U6 params modify planes_instruction: |-
        # Multi-plane Controller\r
        \r
        This
        program moves the three planes using the board accelerometer and the on-screen
        check boxes.  Right now, only the red plane works.\r
        \r
        # Do This\r
        * Create
        a new `movePlane(name)` function that can move any plane.\r
        * Call the `movePlane(name)`
        function inside the event block, such that it only moves when its checkbox
        is checked.\r
        \r
        _Challenge: Right now the planes move way too fast.  Can
        you figure out how to change the code so they move more slowly?_
      CSD U6 params modify planes_2018_instruction: |-
        # Multi-plane Controller\r
        \r
        This
        program moves the three planes using the board accelerometer and the on-screen
        check boxes.  Right now, only the red plane works.\r
        \r
        # Do This\r
        * Create
        a new `movePlane(name)` function that can move any plane.\r
        * Call the `movePlane(name)`
        function inside the event block, such that it only moves when its checkbox
        is checked.\r
        \r
        _Challenge: Right now the planes move way too fast.  Can
        you figure out how to change the code so they move more slowly?_
      CSDU4 - AppLab - 1_instruction: |-
        Read the documentation for penColor() and
        penWidth() before using them to draw the blue square.
      CSDU4 - AppLab - 2_instruction: |-
        Write a program that acts as a simple calculator.
        (click to see full instructions)
      CSDU4 - AppLab - 3_instruction: |-
        Use console to check the ending value of num.
        (Click to see full instructions)
      CSDU4 - AppLab - 4_instruction: |2-
         Use the Debug Commands to make a list of
        all the values rolled before a 6. (Click to see full instructions)
      CSDU4 - Design Mode - 1_instruction: |-
        Add a button that moves the turtle when
        clicked.  (Click to see full instructions)
      CSDU4 - Design Mode - 10_instruction: |-
        Introducing the setPosition command!
        Replace the moveTo in the button-click event handler to use setPosition to
        move the button itself to a random location when it's clicked.
      CSDU4 - Design Mode - 11_instruction: |-
        Experiment with different event types
        and select the one that you think is best. (Click to see full instructions)
      CSDU4 - Design Mode - 12_instruction: |-
        Use the textLabel command to replace
        the button in your program with a text label. (Click to see full instructions)
      CSDU4 - Design Mode - 16_instruction: |-
        Add an event handler for the button
        using the "Insert and show" link in the Design Mode Events tab. (Click to
        see full instructions).
      CSDU4 - Design Mode - 17_instruction: |-
        Update the ID names and `console.log`
        messages to match the correct button. (Click to see full instructions.)
      CSDU4 - Design Mode - 18_instruction: |-
        Fix the layout of the bullseye game.
        (Click to see full instructions)
      CSDU4 - Design Mode - 2_instruction: |-
        Run a program with two buttons that have
        the same id to see the warning message in the console. Change the ids to make
        the program run without getting a warning message.
      CSDU4 - Design Mode - 24_instruction: |-
        Add an Text Input box for the name and
        age. (Click to see full instructions)
      CSDU4 - Design Mode - 25_instruction: |-
        Add an event handler to the Submit button
        so that when the button is clicked it will display the name entered in the
        text box to the console.  Use getText to get the value out of the text box.
        (Click to see full instructions)
      CSDU4 - Design Mode - 26_instruction: |-
        Save the age and name of the user in
        variables (Click to see full instructions)
      CSDU4 - Design Mode - 27_instruction: |-
        Output a message to the 'textArea'
        (Click to see full instructions)
      CSDU4 - Design Mode - 28_instruction: |-
        Write a greeting to the user when they
        hit 'enter' in the text input, using the 'change' event. (Click to see
        full instructions)
      CSDU4 - Design Mode - 29_instruction: |-
        Add a dropdown for their guess instead
        of promptNum (Click to see full instructions)
      CSDU4 - Design Mode - 30_instruction: |-
        Show different die images for the random
        number generated. (Click to see full instructions)
      CSDU4 - Design Mode - 31_instruction: |-
        Set up an event handler to respond to
        keypress events, and display event.key in the console. Hit keys on the keyboard
        to see what happens. (Click to see full instructions)
      CSDU4 - Design Mode - 32_instruction: |-
        Try out the keyup and keydown events
        to see how they are different from keypress. (Click to see full instructions)
      CSDU4 - Design Mode - 33_instruction: |-
        Change the code so the sound will only
        play when the up arrow is pressed. (Click to see full instructions)
      CSDU4 - Design Mode - 4_instruction: |-
        Improve the button by choosing a descriptive
        and meaningful ID. (Click to see full instructions)
      CSDU4 - Design Mode - 5_instruction: |-
        Debug the program by verifying your IDs
        are being referenced properly. (Click to see full instructions)
      CSDU4 - Design Mode - 6_instruction: |-
        Debug the program by properly ordering
        your button commands and event handlers. (Click to see full instructions)
      CSDU4 - Design Mode - 7_instruction: |-
        Debug the program by fixing the logical
        error within the program. (Click to see full instructions)
      CSDU4 - Design Mode - 8_instruction: |-
        Move the button to the middle of the
        screen. (Click to see full instructions)
      CSDU4 nameAgeTemplate_instruction: |-
        Add an Text Input box for the name and
        age. (Click to see full instructions)
      CSDU6 - Arrays - expressionsAsIndexes_instruction: |-
        Write a program that displays
        a randomly chosen color from the array. (Click to see full instructions)
      CSDU6 - Arrays - indexPractice_instruction: |-
        Write the contents of the array
        to the screen in numerical order. (Click to see full instructions)
      CSDU6 - Arrays - length_instruction: |-
        Use list.length to determine the length
        of each array. (Click to see full instructions)
      CSDU6 - Arrays - lengthMinus1_instruction: |-
        Use list.length - 1 to log the
        last item in the array to the console. (Click to see full instructions)
      CSDU6 - for loop - color buttons with for_instruction: |-
        Write the contents
        of the array to the screen in numerical order. (Click to see full instructions)
      CSDU6 - for loop - color buttons_instruction: |-
        Write the contents of the array
        to the screen in numerical order. (Click to see full instructions)
      CSDU6 - for loop - why for_instruction: |-
        Write the contents of the array to
        the screen in numerical order. (Click to see full instructions)
      CSDU6 arrays rainbow_instruction: |-
        Write the contents of the array to the screen
        in numerical order. (Click to see full instructions)
      CSDU6 arrays random_instruction: |-
        Write a program that displays a randomly
        chosen color from the array. (Click to see full instructions)
      CSDU6 arrays select icons_instruction: |-
        Write a program that displays a randomly
        chosen color from the array. (Click to see full instructions)
      CSDU6 arrays select rainbow_instruction: |-
        Write the contents of the array to
        the screen in numerical order. (Click to see full instructions)
      CSDU6 arrays select rainbow_2018_instruction: |-
        Write the contents of the array
        to the screen in numerical order. (Click to see full instructions)
      CSDU6 arrays select random_instruction: |-
        Write a program that displays a randomly
        chosen color from the array. (Click to see full instructions)
      CSDU6 arrays select random_2018_instruction: |-
        Write a program that displays
        a randomly chosen color from the array. (Click to see full instructions)
      CSDU6 arrays select variable_instruction: |-
        Write a program that displays a
        randomly chosen color from the array. (Click to see full instructions)
      CSDU6 arrays select variable_2018_instruction: |-
        Write a program that displays
        a randomly chosen color from the array. (Click to see full instructions)
      CSDU6 arrays variable_instruction: |-
        Write a program that displays a randomly
        chosen color from the array. (Click to see full instructions)
      CSP Data Unit - Counting Multiple Things_instruction: |-
        If you can count one
        thing you can count multiple things\r
        \r
        Find out how many people like something
        other than dogs and cats\r
        \r
        Count dogs\r
        Count cats\r
        Count total\r
        Do
        the math\r
        \r
        blank/ blank toal\r
        \r
        Can also use this to find percents
        from this\r
        \r
        x% are dog lovers
      CSP Data Unit -Counting Records - Easy Way_instruction: |
        ReadRecords with specific
        criteria \r
        find the length of an array\r
      CSP Data Unit -Counting Records - Hard Way_instruction: |
        \r
        1. ReadRecords
        for all records\r
        2. Way to loop through and count\r
      CSP U4 - JSON Object Intro - Bad Way_instruction: |-
        Trigger both the keyboard
        and mouse event and examine the event objects displayed in the console. Why
        might an object be the best way to store this information? (Click to see full
        instructions)
      CSP U4 - JSON Object Intro - Good Way_instruction: "Create an object with at\nleast
        5 values including at least one string and one number. (Click to see\nfull
        instructions) "
      CSP U4 - Objects - createObject_instruction: "Create an object with at least\n5
        values including at least one string and one number. (Click to see full\ninstructions) "
      CSP student contact info_instruction: Please enter your email address.
      CSPU5 Add Screens to Chaser Game_instruction: |-
        Recreate the game from the "Chaser
        Game" with a Welcome Screen and Game Over Screen. (Click to see full instructions.)
      CSPU5 Add a 2nd Screen_instruction: |-
        Make a 2 screen app with a black screen
        and a white screen. (Click to see detailed instructions)
      CSPU5 Add full screen image to bg of chaser game_instruction: |-
        Recreate the
        game from the "Chaser Game" with a Welcome Screen and Game Over Screen.
        (Click to see full instructions.)
      CSPU5 Add game over screen_instruction: |-
        Recreate the game from the "Chaser
        Game" with a Welcome Screen and Game Over Screen. (Click to see full instructions.)
      CSPU5 Add onEvent from Design Mode_instruction: |-
        Add an event handler for the
        button using the "Insert and show" link in the Design Mode Events tab. (Click
        to see full instructions).
      CSPU5 Add welcome screen to chaser game_instruction: |-
        Recreate the game from
        the "Chaser Game" with a Welcome Screen and Game Over Screen. (Click to
        see full instructions.)
      CSPU5 Adding Screens Template_instruction: |-
        Make a 2 screen app with a black
        screen and a white screen. (Click to see detailed instructions)
      CSPU5 Debugging Overlapping Objects and Screen Events_instruction: |-
        Recreate
        the "Chaser Game" from the last lesson using Design Mode. (Click to see
        full instructions.)
      CSPU5 First Time Console.log_instruction: |-
        Add a 3 console.log messages and
        test them out. (Click to see full instructions.)
      CSPU5 Layering and Deleting in Design Mode_instruction: |-
        Fix the layout of
        the bullseye game. (Click to see full instructions)
      CSPU5 Project - Multi Screen App_instruction: |-
        Create your multi-screen app.
        (Click to see full instructions.)
      CSPU5 Use Console.log to update IDs_instruction: |-
        Update the ID names and `console.log`
        messages to match the correct button. (Click to see full instructions.)
      CSPU5 Use setScreen for first time_instruction: |-
        Make a 2 screen app which
        can switch back and forth between a black screen and a white screen using
        buttons. (Click to see detailed instructions.)
      CSPU5_AddImageToChaserGame_instruction: |-
        Introducing the setPosition command!
        Replace the moveTo in the button-click event handler to use setPosition to
        move the button itself to a random location when it's clicked.
      CSPU5_AddImage_andMakeChaserGame_instruction: |-
        Introducing the setPosition
        command! Replace the moveTo in the button-click event handler to use setPosition
        to move the button itself to a random location when it's clicked.
      CSPU5_AddLabelToChaserGame_instruction: |-
        Introducing the setPosition command!
        Replace the moveTo in the button-click event handler to use setPosition to
        move the button itself to a random location when it's clicked.
      CSPU5_Debugging predict unexpected behavior - two onEvents to one ID_instruction: |-
        Predict
        what will happen. Once you've made a prediction, run the code to see what
        happens. (Click to see full instructions)
      CSPU5_FinalizeChaserGame_instruction: |-
        Introducing the setPosition command!
        Replace the moveTo in the button-click event handler to use setPosition to
        move the button itself to a random location when it's clicked.
      CSPU5_Project - Multi Screen App_instruction: |-
        Create your multi-screen app.
        (Click to see full instructions.)
      CSPU5_U3 - Arrays - Demo App_instruction: |-
        Use the "My Favorite Things" app.
        How might this app be making use of an array? (Click to see full instructions)
      CSPU5_U3 - Arrays - appendItem_instruction: |-
        Create an array of odd numbers
        1-11 by using appendItem. (Click to see full instructions)
      CSPU5_U3 - Arrays - assignment_instruction: |-
        Use indexes to change the values
        in this array from 1 to 0. (Click to see full instructions)
      CSPU5_U3 - Arrays - assignment2_instruction: |-
        Calculate the sum of three values
        stored in an array. (Click to see full instructions)
      CSPU5_U3 - Arrays - assignment3_instruction: |-
        Increase the value of each value
        in the randomly generated array by 1. (Click to see full instructions)
      CSPU5_U3 - Arrays - createFirstArray_instruction: |-
        Create an array of the even
        numbers from 0 to 10 and display its contents with console.log. (Click to
        see full instructions)
      CSPU5_U3 - Arrays - expressionsAsIndexes_instruction: |-
        Write a program that
        displays a randomly chosen color from the array. (Click to see full instructions)
      CSPU5_U3 - Arrays - favThings Counting Variable_instruction: |-
        Create a global
        variable for the current index and use it to display the first item in the
        array. (Click to see full instructions)
      CSPU5_U3 - Arrays - favThings Next_instruction: |-
        Write code that allows the
        user to move forward through your list by clicking the "Next" button. (Click
        to see full instructions)
      CSPU5_U3 - Arrays - favThings Prev_instruction: |-
        Write code that allows the
        user to move backward through your list by clicking the "Last" button. (Click
        to see full instructions)
      CSPU5_U3 - Arrays - favThings addItem_instruction: |-
        Write code that allows
        a user to add their own favorite things to the list. (Click to see full instructions)
      CSPU5_U3 - Arrays - favThings bounds_instruction: |-
        Add if statements to your
        event handlers that prevent the global index from going out of bounds. (Click
        to see full instructions)
      CSPU5_U3 - Arrays - favThings createArray_instruction: |-
        Create an array of
        words describing your favorite things. (Click to see full instructions)
      CSPU5_U3 - Arrays - favThings firstOutput_instruction: |-
        Use setText to display
        the first item in the array. (Click to see full instructions)
      CSPU5_U3 - Arrays - favThings giveIDs_instruction: |-
        Give your UI elements descriptive
        and meaningful IDs. (Click to see full instructions)
      CSPU5_U3 - Arrays - favThings keepPlaying_instruction: |-
        Make any other improvements
        you want! (Click to see full instructions)
      CSPU5_U3 - Arrays - indexPractice_instruction: |-
        Write the contents of the array
        to the screen in numerical order. (Click to see full instructions)
      CSPU5_U3 - Arrays - insertingItems_instruction: |-
        Insert items into an array
        to form a complete sentence. (Click to see full instructions)
      CSPU5_U3 - Arrays - insertionErrors_instruction: |-
        Run each command that references
        indexes that are out of bounds and observe the results. (Click to see full
        instructions)
      CSPU5_U3 - Arrays - introIndex_instruction: |-
        Display the first and last element
        in the array. Display the number 5 from the array. (Click to see full instructions)
      CSPU5_U3 - Arrays - length_instruction: |-
        Use list.length to determine the length
        of each array. (Click to see full instructions)
      CSPU5_U3 - Arrays - lengthMinus1_instruction: |-
        Use list.length - 1 to log the
        last item in the array to the console. (Click to see full instructions)
      CSPU5_U3 - Arrays - remove_instruction: |-
        Remove items from an array to form
        a complete sentence. (Click to see full instructions)
      CSPU5_U3 - Arrays - stringsInArrays_instruction: |-
        Write a sentence word by
        word by adding strings to an array. (Click to see full instructions)
      CSPU5_U3 - Canvas - 200dots_instruction: |-
        Add a loop to your program that draws
        200 dots on your canvas. (Click to see full instructions)
      CSPU5_U3 - Canvas - One Dot sprayPaint_instruction: |-
        Write code that redraws
        your image using a dot whose x and y locations use offsetX and offsetY with
        a small random value added. (Click to see full instructions)
      CSPU5_U3 - Canvas - appendToArray_instruction: |-
        Create an array to store each
        event parameter. Append each event parameter to this array within your event
        handler. (Click to see full instructions)
      CSPU5_U3 - Canvas - changeToMouseMove_instruction: |-
        Change your program so
        that dots are drawn at the location of the mouse as the user moves the mouse
        on the canvas. (Click to see full instructions)
      CSPU5_U3 - Canvas - clickToAdd_instruction: |-
        Change your program so that dots
        are added to the canvas when the user clicks on it. (Click to see full instructions)
      CSPU5_U3 - Canvas - delete_instruction: |-
        Create a button that deletes the drawing
        by clearing the canvas and removing all stored values. (Click to see full
        instructions)
      CSPU5_U3 - Canvas - draw at click point_instruction: |-
        Change your program so
        that dots are drawn at the location of the mouse click. (Click to see full
        instructions)
      CSPU5_U3 - Canvas - freePlay_instruction: |-
        Extend the functionality of one
        of the effects, or create an entirely new one of your own. (Click to see full
        instructions)
      CSPU5_U3 - Canvas - introCanvas_instruction: |-
        Add a canvas to your app and
        set it to be the active canvas. Then add a large dot to your canvas. (Click
        to see full instructions)
      CSPU5_U3 - Canvas - movementFunction fix Orig_instruction: |-
        Modify the "Original"
        button event handler so that it takes the movement of the mouse into account.
        (Click to see full instructions)
      CSPU5_U3 - Canvas - movementFunction_instruction: |-
        Write a function that takes
        the movement of the mouse as input and generates a line width as output. (Click
        to see full instructions)
      CSPU5_U3 - Canvas - redrawOriginal_instruction: |-
        Write a function that processes
        your array, redrawing the dots as they originally appeared. (Click to see
        full instructions)
      CSPU5_U3 - Canvas - redrawRandom_instruction: |-
        Set up a button and event handler
        for the random function. (Click to see full instructions)
      CSPU5_U3 - Canvas - redrawRandom2_instruction: |-
        Write a function that processes
        your array, redrawing every dot with a random size. (Click to see full instructions)
      CSPU5_U3 - Canvas - shiftKey_instruction: |-
        Add an if statement to your event
        handler so dots are only drawn when the shift key is pressed. (Click to see
        full instructions)
      CSPU5_U3 - Canvas - sketch_instruction: |-
        Write code that redraws your image
        using a sketch effect. (Click to see full instructions)
      CSPU5_U3 - Canvas - sprayPaint_instruction: |-
        Update the spray paint code so
        that it redraws your image using multiple random dots instead of using a nested
        for loop. (Click to see full instructions)
      CSPU5_U3 - Canvas - transparentDots_instruction: |-
        Change the colors of your
        dots so they have a fully transparent stroke and partially transparent fill.
        (Click to see full instructions)
      CSPU5_U3 - Canvas - usingOffsetXY_instruction: |-
        Add a console.log command inside
        the function of your event handler. Use it to display the event parameter.
        Click on the screen to see the contents of the event parameter (Click to see
        full instructions)
      CSPU5_U3 - Conditional Basics - 6_instruction: |-
        Add a setText after the if
        statement to "Nope. Guess again." (Click to see full instructions)
      CSPU5_U3 - Conditionals - Combine AND OR Simple_instruction: |-
        Write an if statement
        that uses AND and OR to display "Sleep in!" if it's the weekend and the
        user is a teenager. (Click to see full instructions.
      CSPU5_U3 - Conditionals - Combine AND OR and NOT_instruction: |-
        Write an if
        statement that uses AND and OR to display "Time to go to school!" if it's
        not the weekend and the user is under 18. (Click to see full instructions.)
      CSPU5_U3 - Conditionals - Simple AND_instruction: |-
        Write an if statement that
        uses AND to display "You are a teenager." if the user enters an age between
        13 and 19. (Click to see full instructions)
      CSPU5_U3 - Conditionals - Simple OR_instruction: |-
        Write an if statement that
        uses OR to display "It's the weekend!" if the user enters a weekend day
        at the prompt. (Click to see full instructions)
      CSPU5_U3 - Design Mode - Console Log_instruction: |-
        Update the ID names and
        `console.log` messages to match the correct button. (Click to see full instructions.)
      CSPU5_U3 - Design Mode - Layers and Delete_instruction: |-
        Fix the layout of
        the bullseye game. (Click to see full instructions)
      CSPU5_U3 - Design Mode - Multi Screens 2_instruction: |-
        Make a 2 screen app
        which can switch back and forth between a black screen and a white screen
        using buttons. (Click to see detailed instructions.)
      CSPU5_U3 - Design Mode - Multi Screens_instruction: |-
        Make a 2 screen app with
        a black screen and a white screen. (Click to see detailed instructions)
      CSPU5_U3 - Design Mode - WTF Console Log_instruction: |-
        Add a 3 console.log
        messages and test them out. (Click to see full instructions.)
      CSPU5_U3 - Design Mode -Recreate Beyond Buttons_instruction: |-
        Recreate the
        game from the "Chaser Game" with a Welcome Screen and Game Over Screen.
        (Click to see full instructions.)
      CSPU5_U3 - Design Mode 1_instruction: |-
        Add a large red button to your screen
        using Design Mode. (Click for full instructions.)
      CSPU5_U3 - Dice - Dropdown and Score_instruction: |-
        Add guess and score to the
        Dice Game (Click to see full instructions)
      CSPU5_U3 - Dice - Dropdown with Strings_instruction: |-
        Add a dropdown for difficulty
        level that prints the difficulty level in the console. (Click to see full
        instructions)
      CSPU5_U3 - Dice - If_instruction: |-
        Show different die images for the random
        number generated. (Click to see full instructions)
      CSPU5_U3 - Dice - Nested_instruction: |-
        Use nested if statements to make the
        scoring different for the different game levels. (Click to see full instructions)
      CSPU5_U3 - High Low - Debug_instruction: |-
        Debug the order of the conditionals
        so that it will actually tell the user when their guess is close. (Click to
        see full instructions)
      CSPU5_U3 - High Low - Dropdown_instruction: |-
        Add a dropdown for their guess
        instead of promptNum (Click to see full instructions)
      CSPU5_U3 - High Low - Else if_instruction: |-
        Add an else-if statement in order
        to tell the user if their guess is high or low instead of just wrong. (Click
        to see full instructions)
      CSPU5_U3 - High Low - Else_instruction: |
        Add an else statement so that the
        program will tell the user when they are right and when they are wrong. (Click
        to see full instructions)\r
      CSPU5_U3 - High Low - If_instruction: |-
        Add code to the if statement that indicates
        the user guessed the secret number. (Click to see full instructions)
      CSPU5_U3 - Keys - Add Image URLs_instruction: |-
        Add image URLs to your array.
        Replace the text area with an image and setText with setImageURL. Then test
        your app! (Click to see full instructions)
      CSPU5_U3 - Keys - Buttons and Keys_instruction: |-
        Have the program respond the
        same way for both clicking images on the screen and hitting the up and down
        keys on the keyboard. (Click to see full instructions)
      CSPU5_U3 - Keys - Demo App_instruction: |-
        Play with the image scroller. Press
        the left and right arrows to progress through the images.
      CSPU5_U3 - Keys - Final Image Scroller_instruction: |-
        Update the image scroller
        to respond to buttons and key presses. (Click to see full instructions)
      CSPU5_U3 - Keys - Functions_instruction: |-
        Write doUpArrow and doDownArrow functions
        and call the functions instead of duplicating the code. (Click to see full
        instructions)
      CSPU5_U3 - Keys - Key Up and Down_instruction: |-
        Try out the keyup and keydown
        events to see how they are different from keypress. (Click to see full instructions)
      CSPU5_U3 - Keys - Multiple Keys_instruction: |-
        Play a different sound when the
        down arrow is pressed. (Click to see full instructions)
      CSPU5_U3 - Loops -  Complex Condition_instruction: |-
        Change the boolean expression
        for the while loop so that it will stop when both dice are greater than or
        equal to 5. (Click to see full instructions)
      CSPU5_U3 - Loops - 1_instruction: |-
        Change the condition for the while loop
        to check if the variable num is less than 90. (Click to see full instructions)
      CSPU5_U3 - Loops - 10_instruction: |-
        Write a program that simulates the rolling
        of two dice. Roll the dice repeatedly until the sum of the dice is either
        7 or 11.
      CSPU5_U3 - Loops - 11_instruction: |-
        Fix the condition so that it keeps rolling
        the die as long as the value is not a 2 or a 3 instead of rolling infinitely.
        (Click to see full instructions)
      CSPU5_U3 - Loops - 12_instruction: |-
        Change the code so that it prints the string
        "Hi" 5 times. (Click to see full instructions)
      CSPU5_U3 - Loops - 14_instruction: |-
        Change the loop condition to prevent the
        infinite loop and stop counting once the count is past 30. (Click to see full
        instructions)
      CSPU5_U3 - Loops - 15_instruction: |-
        Count the number of times the sum of the
        dice is 12. (Click to see full instructions)
      CSPU5_U3 - Loops - 2_instruction: |-
        Try creating an infinite loop using !=,
        > and <. (Click to see full instructions)
      CSPU5_U3 - Loops - 3_instruction: |-
        Change the if statement to a while loop
        so the program will run until it rolls a 6. (Click to see full instructions)
      CSPU5_U3 - Loops - 4_instruction: |-
        Use the Debug Commands to make a list of
        all the values rolled before a 6. (Click to see full instructions)
      CSPU5_U3 - Loops - 5_instruction: |-
        Add code inside the while loop which will
        update the variable num so that the condition will eventually become false.
        (Click to see full instructions)
      CSPU5_U3 - Loops - 6_instruction: |-
        Fix the problem so the loop will run at
        least once. Change the initial value of num to a dummy value such as -1. (Click
        to see full instructions)
      CSPU5_U3 - Loops - 7_instruction: |-
        Without adding any lines of code, reorder
        the code so that it prints all the values of num. (Click to see full instructions)
      CSPU5_U3 - Loops - 8_instruction: |-
        Debug which number is not getting printed
        and add a write statement to display that value. (Click to see full instructions)
      CSPU5_U3 - Loops - 9_instruction: |2-
         Modify the condition so that it keeps rolling
        as long as both are less than 3. (Click to see full instructions)
      CSPU5_U3 - Loops - Minus Minus_instruction: |-
        Change the code to count down
        from 10 to 1. (Click to see full instructions)
      CSPU5_U3 - Loops - Plus Plus_instruction: |-
        Change the code to use count++ instead
        of count = count + 1.  (Click to see full instructions)
      CSPU5_U3 - Loops - Typing in Console_instruction: |-
        Use console to check the
        ending value of num. (Click to see full instructions)
      CSPU5_U3 - Loops - minus = operator_instruction: |-
        Update the code to use the
        -= operator to count from 30 down to 0 by 3's. (Click to see full instructions)
      CSPU5_U3 - Loops - plus and minus = operator_instruction: |-
        Update the code
        to use the += operator. (Click to see full instructions)
      CSPU5_U3 - Loops And Arrays - Add 5_instruction: |-
        Add 5 to all the values in
        an array (Click to see full instructions)
      CSPU5_U3 - Loops And Arrays - Counting Times_instruction: |-
        Count the number
        of times 5 appears in an array. (Click to see full instructions)
      CSPU5_U3 - Loops And Arrays - Divid by 2_instruction: |-
        Divide every value in
        the array by 2. (Click to see full instructions)
      CSPU5_U3 - Loops And Arrays - Find Min_instruction: |-
        Complete the findMinVal
        function to find and display the smallest value in an array  (Click to see
        full instructions)
      CSPU5_U3 - Loops And Arrays - General Search Param_instruction: |-
        Add a second
        parameter to the search function for the value to search for.  (Click to see
        full instructions)
      CSPU5_U3 - Loops And Arrays - Intro For Loop_instruction: |-
        Add a for loop with
        a console.log inside and test out the 3 pieces of the for loop. (Click to
        see full instructions)
      CSPU5_U3 - Loops And Arrays - Linear Search_instruction: |-
        Visit every element
        in the array and display "true" if the value is a 5, and "false" otherwise.
        (Click to see full instructions)
      CSPU5_U3 - Loops And Arrays - Loop Array If_instruction: |-
        Use an if statement
        to only display the values in the array that are greater than 5. (Click to
        see full instructions)
      CSPU5_U3 - Loops And Arrays - Make it a Function - add list parameter_instruction: |-
        Create
        a function that takes a list parameter and prints if the list contains a 5.
        (Click to see full instructions)
      CSPU5_U3 - Loops And Arrays - Make it a Function_instruction: |-
        Move the code
        that searches the list for a 5 into a function called "search". (Click to
        see full instructions)
      CSPU5_U3 - Loops And Arrays - Print Array_instruction: |-
        Use a for loop to print
        out all the values in an array. (Click to see full instructions)
      CSPU5_U3 - Loops And Arrays - Printing Single True_instruction: |-
        Process the
        array and display a single "true" if the array contains a 5 or a single
        "false" if it does not.  (Click to see full instructions)
      CSPU5_U3 - Loops And Arrays - Search with Boolean Var_instruction: |-
        Make a
        boolean variable to use as a flag to keep track of whether there is a 5 in
        the array. (Click to see full instructions)
      CSPU5_U3 - Movie Bot - Multiple If Sequences_instruction: |-
        Add another set
        of if, else if, and else statements inside the question if statement to check
        for keywords for movie ratings (G, PG, PG-13, and R). (Click to see full instructions)
      CSPU5_U3 - Movie Bot - Nested Motivation_instruction: |-
        Add a separate set of
        if statements to check for a "?" in the input. (Click to see full instructions)
      CSPU5_U3 - Movie Bot - When Multiple If Statements_instruction: |-
        Add an if
        and else-if statement that checks for please and thank you. (Click to see
        full instructions)
      CSPU5_U3 - Movie Bot - toLowerCase_instruction: |-
        Use the toLowerCase command
        to change all user input into lowercase letters after they enter it. (Click
        to see full instructions)
      CSPU5_U3 - Practice Create Performance Task_instruction: |-
        Design and implement
        your practice Create Performance Task. (Click to see full instructions)
      CSPU5_U3 - Return Values - constrainTurtle_instruction: |-
        Use constrain in this
        simple app to keep the turtle from driving off the screen.  (Click to see
        full instructions)
      CSPU5_U3 - Return Values - debuggingConstrain_instruction: |-
        Correct the error
        in constrain so that it returns the appropriate value.  (Click to see full
        instructions)
      CSPU5_U3 - Return Values - debuggingMaxVal_instruction: |-
        Correct the error
        in maxVal so that it correctly reports the maximum value.  (Click to see full
        instructions)
      CSPU5_U3 - Return Values - useMinVal_instruction: |-
        Call minVal within the console.log
        statement to calculate the minimum of two values.  (Click to see full instructions)
      CSPU5_U3 - Return Values - wrapTurtle_instruction: |-
        Write wrap in this simple
        app to let the turtle "wrap" to the other side of the screen when it goes
        off.  (Click to see full instructions)
      CSPU5_U3 - Return Values - writeMaxVal_instruction: |-
        Write the function maxVal
        and then use it within the console.log statement to calculate the maximum
        of two values.  (Click to see full instructions)
      CSPU5_U3 - Simulation - 1_instruction: |-
        Use a while loop to "flip a coin 10
        times" and write the values to the screen. (Click to see full instructions)
      CSPU5_U3 - Simulation - 2.1_instruction: |-
        Change your looping condition so
        the simulation runs until there are 5 heads flipped. (Click to see full instructions)
      CSPU5_U3 - Simulation - 2.5_instruction: |-
        Run your simulation to get the full
        10,000 heads! How long did it take? (Click to see full instructions)
      CSPU5_U3 - Simulation - 2_instruction: |-
        Keep track of how many heads (1's)
        your program generates and print the results to the screen. (Click to see
        full instructions)
      CSPU5_U3 - Simulation - 3_instruction: |
        Add functionality that counts how many
        heads in a row are flipped. (Click to see full instructions)\r
      CSPU5_U3 - Simulation - 4_instruction: |-
        Update your while loop's condition
        so the the coin flips until there are three heads in a row. (Click to see
        full instructions)
      CSPU5_U3 - Simulation - 5_instruction: |-
        Change your while loop to run until
        you get a streak of 12 heads. How many flips did it take? (Click to see full
        instructions)
      CSPU5_U3 - Simulation - 6_instruction: |-
        Keep adding to your simulation. What
        do you want to explore next? (Click to see full instructions)
      CSPU5_U3 - User Input - Save getText To Variable_instruction: |-
        Save the age
        and name of the user in variables (Click to see full instructions)
      CSPU5_U3 - Variables - Set to Expression with Other Variables_instruction: |-
        Write
        an expression that calculates the player's total score and stores it in the
        totalScore variable. The calculation is: the player's points times lives
        divided by the total time. (click to see full instructions)
      CSPU5_U3 - Variables - Set to Expression_instruction: |-
        Test out the new expressions.
        (Click to see full instructions)
      CSPU5_U3 Digital Assistant Design_instruction: |-
        Pick a topic for your Digital
        Assistant and create the basic layout with a text input and text area. (Click
        to show full instructions)
      CSPU5_U3 Digital Assistant Set Text_instruction: |-
        Have your digital assistant
        repeat back what the user types and include a canned response. (Click to see
        full instructions)
      CSPU5_U3 Digital Assistant Target_instruction: |-
        Try out a demo of the Digital
        Assistant!
      CSPU5_U3 full clicker demo_instruction: Clicker game - Try it out!
      CSPU5_U3- Variables - Create And Assign_instruction: |-
        On one line add a variable
        called "lives" and assign it the value 3. Print it to the console. (Click
        to see full instructions)
      CSPU5_U3- Variables - Text Mode_instruction: |-
        1. Switch to text mode and type
        instructions; 2. drag blocks out into text mode; 3. experiment with code completion
      CSPU5_U3-Design Mode-ID and Event Handler_instruction: |-
        Add an event handler
        for the button using the "Insert and show" link in the Design Mode Events
        tab. (Click to see full instructions).
      CSPU5_U3-Design Mode-Image_instruction: |-
        Recreate the "Chaser Game" from
        the last lesson using Design Mode. (Click to see full instructions.)
      CSPU5_U313 Two Buttons with Ids_instruction: |-
        Predict what will happen. Once
        you've made a prediction, run the code to see what happens. (Click to see
        full instructions)
      CSPU5_U313 drag Two Buttons_instruction: |-
        Run a program with two buttons that
        have the same id to see the warning message in the console. Change the ids
        to make the program run without getting a warning message.
      CSPU5_U3L13 - Debug Id Problem_instruction: |-
        Improve the button by choosing
        a descriptive and meaningful ID. (Click to see full instructions)
      CSPU5_U3L13 - Debugging 1_instruction: |-
        Debug the program by verifying your
        IDs are being referenced properly. (Click to see full instructions)
      CSPU5_U3L13 - Debugging 2_instruction: |-
        Debug the program by properly ordering
        your button commands and event handlers. (Click to see full instructions)
      CSPU5_U3L13 - Debugging 3_instruction: |-
        Debug the program by fixing the logical
        error within the program. (Click to see full instructions)
      CSPU5_U3L13 - Debugging IDs case sensitive_instruction: |-
        Debug the program
        by verifying your IDs are being referenced properly. (Click to see full instructions)
      CSPU5_U3L13 - Project_instruction: |-
        Create your multi-screen app. (Click to
        see full instructions.)
      CSPU5_U3L13 - Turtle Driver Project_instruction: |-
        Create a "turtle driver"
        that includes buttons to move the turtle forward and turn it left and right.
        (Click to see full instructions)
      CSPU5_U3L13 - Turtle move with button_instruction: |-
        Add a button that moves
        the turtle when clicked.  (Click to see full instructions)
      CSPU5_U3L13 eventsDetails_instruction: |-
        Add an event handler to the button
        to move the turtle forward. (Click to see full instructions)
      CSPU5_U3L14 - Assigning Random Value_instruction: |-
        Write a program that simulates
        the rolling of two dice and reports their individual values as well as the
        sum. (click to see full instructions)
      CSPU5_U3L14 - Mini Calculator embed_instruction: |-
        You will be prompted for
        two numbers, one right after the other.  See what happens.  Enter different
        numbers until you get the idea.
      CSPU5_U3L14 - User Input Division calculator_instruction: |-
        Write a program
        that acts as a simple calculator. (click to see full instructions)
      CSPU5_U3L14 - Variable ReAssignment pt2_instruction: |-
        Trace the code and predict
        what you think will be printed to the console. Then add a console.log statement
        at the end of the program to see the last value of someNum to see if your
        full prediction is correct. (click to see full Instructions)
      CSPU5_U3L14 - concatenate simple_instruction: |-
        Modify the write statement on
        line 3 to combine text and variables together to make the app display a single
        line of text that shows the player's lives and score. (click to see full
        instructions)
      CSPU5_U3L14 - moving memory challenge1_instruction: |-
        Using only the variables
        provided, assignment (=) and arithmetic (+ - * /) re-assign the values to
        make the console.log statement display the correct value(s).  (Click to see
        full instructions)
      CSPU5_U3L14 - moving memory challenge2_instruction: |-
        Using only the variables
        provided, assignment (=) and arithmetic (+ - * /) re-assign the values to
        make the console.log statement display the correct value(s).  (Click to see
        full instructions)
      CSPU5_U3L14 - moving memory challenge3_instruction: |-
        Using only the variables
        provided, assignment (=) and arithmetic (+ - * /) re-assign the values to
        make the console.log statement display the correct value(s).  (Click to see
        full instructions)
      CSPU5_U3L14 - moving memory challenge4_instruction: |-
        Using only the variables
        provided, assignment (=) and arithmetic (+ - * /) re-assign the values to
        make the console.log statement display the correct value(s).  (Click to see
        full instructions)
      CSPU5_U3L14 - moving memory challenge5_instruction: |-
        Using only the variables
        provided, assignment (=) and arithmetic (+ - * /) re-assign the values to
        make the console.log statement display the correct value(s).  (Click to see
        full instructions)
      CSPU5_U3L14 - moving memory challenge6_instruction: |-
        Using only the variables
        provided, assignment (=) and arithmetic (+ - * /) re-assign the values to
        make the console.log statement display the correct value(s).  (Click to see
        full instructions)
      CSPU5_U3L15 - Add reset button to UpDown app_instruction: |-
        Add code so that
        clicking the start over button will reset the game and send you back to the
        main screen. (Click to see full instructions)
      CSPU5_U3L15 - DEMO up down count practice app_instruction: |-
        Try out the demo
        app (Click to see full instructions)
      CSPU5_U3L15 - Debug forget to update var on reset in UpDown app_instruction: |-
        Run
        the app, and click the up or down button until you get to the gameOverScreen.
        Click 'Start Over' and try the app again. Find and fix the issue in the
        code. (Click to see full instructions)
      CSPU5_U3L15 - Debug if never triggers in UpDown app_instruction: |-
        Run the app
        and use the up and down arrows to try to hit the gameOverScreen. You can't!
        Find and fix the issue in the code. (Click to see full instructions)
      CSPU5_U3L15 - Debugging Simple If-statements =v==_instruction: |-
        Run the app,
        and click the up button. Then restart and run it again, and click the down
        button. Find and fix the issue in the code. (Click to see full instructions)
      CSPU5_U3L15 - Simple If-statements in UpDown App_instruction: |-
        Add an if statement
        so that the app changes screens when the count reaches -5. (Click to see full
        instructions)
      CSPU5_U3L15 - add code to make count down work_instruction: |-
        Write code to
        make the down arrow work as expected. (Click to see full instructions)
      CSPU5_U3L15 - count upDown bug forget to set text_instruction: |-
        Find the bug
        in the program and fix it. (Click to see full instructions)
      CSPU5_U3L15 - count upDown bug logic error wrong update_instruction: |-
        Find
        the bug in the program and fix it. (Click to see full instructions)
      CSPU5_U3L15 - count upDown bug var not created globally_instruction: |-
        Find
        the bug in the program and fix it. (Click to see full instructions)
      CSPU5_U3L15 - global var example count up_instruction: |-
        Look at the code for
        this app and see how the code works to update the count variable when the
        up arrow is clicked. (Click to see full instructions).
      CSPU5_U3L15 - mini clicker update score_instruction: |-
        Add code to update the
        score when the apple is clicked. (Click to see full instructions)
      CSPU5_U3L15 - practice with setText_instruction: |-
        Use setText to complete the
        click event handler for the down arrow. (Click to see full instructions)
      CSPU5_U3L15 - variable scoping problem debugging_instruction: |-
        See if you can
        figure out why the code is no longer working. (Click to see full instructions)
      CSPU5_U3L15 click add lives_instruction: |-
        Add lives to the clicker game that
        decrement by 1 when the background image is clicked (Click to see full instructions)
      CSPU5_U3L15 full clicker app_instruction: |-
        Complete your clicker game! (Click
        to see full instructions)
      CSPU5_U3L16 - challenge say hi app_instruction: |-
        Write a greeting to the user
        when they hit 'enter' in the text input, using the 'change' event. (Click
        to see full instructions)
      CSPU5_U3L16 - chaserApp_instruction: |-
        Create your own "Chaser Game." (Click
        to see full instructions)
      CSPU5_U3L16 - chooseImages_instruction: |-
        Replace the image in your application
        with one of your own. (Click to see full instructions)
      CSPU5_U3L16 - doubleQuotes_instruction: |-
        Save a string inside a variable and
        log it to the console. (Click to see full instructions)
      CSPU5_U3L16 - intro getText_instruction: |-
        Add an event handler to the Submit
        button so that when the button is clicked it will display the name entered
        in the text box to the console.  Use getText to get the value out of the text
        box. (Click to see full instructions)
      CSPU5_U3L16 - introSetPosition_instruction: |-
        Move the buttons to the bottom
        of the screen. (Click to see full instructions)
      CSPU5_U3L16 - introStrings_instruction: |-
        Save a string inside a variable and
        log it to the console. (Click to see full instructions)
      CSPU5_U3L16 - newEventTypes_instruction: |-
        Experiment with different event types
        and select the one that you think is best. (Click to see full instructions)
      CSPU5_U3L16 - outputWithTextArea_instruction: |-
        Output a message to the 'textArea'
        (Click to see full instructions)
      CSPU5_U3L16 - setPosition to fixed location_instruction: |-
        Introducing the setPosition
        command! Replace the moveTo in the button-click event handler to use setPosition
        to move the button itself to a random location when it's clicked.
      CSPU5_U3L16 - setPosition to move button_instruction: |-
        Introducing the setPosition
        command! Replace the moveTo in the button-click event handler to use setPosition
        to move the button itself to a random location when it's clicked.
      CSPU5_U3L16 - singleSetPosition_instruction: |-
        Move the button to the middle
        of the screen. (Click to see full instructions)
      CSPU5_U3L16 - text labels_instruction: |-
        Use the textLabel command to replace
        the button in your program with a text label. (Click to see full instructions)
      CSPU5_U3L16 - textInput getText write_instruction: |-
        Add an Text Input box for
        the name and age. (Click to see full instructions)
      CSPU5_U3L16 - toUpper_instruction: |-
        Make the name of the user appear in uppercase
        (Click to see full instructions)
      CSPU5_U3L16 - use images_instruction: |-
        Use the image command to replace the
        text label in your program with an image. (Click to see full instructions)
      CSPU5_U3L16 Mad Lib Clear Input_instruction: "Clear the user's previous text\nwhen
        the Play Again button is clicked (Click to see full instructions) "
      CSPU5_U3L16 Mad Lib Demo_instruction: Mad Libs Demo - Try it out!
      CSPU5_U3L16 Mad Lib Student Setup_instruction: |-
        Back to Mad Libs: To get started,
        set up the two screens for your Mad Libs app (Click to show full instructions)
      CSPU5_U3L16 Mad Lib getText_instruction: "Before setting the text area with\nyour
        Mad Libs outline, get the user's text and incorporate their responses.\n(Click
        to see full instructions) "
      CSPU5_U3L16 Mad Lib setText_instruction: "When the Next button is clicked,\nset
        the text area to have the main outline of your How-to Mad Libs (without\nthe
        user's input). (Click to see full instructions) "
      CSPU5_U3L16 Mad Lib toUpper_instruction: "Apply the toUpperCase and toLowerCase\nstring
        functions to the user's text. (Click to see full instructions) "
      CSPU5_U3L18 comparison operators_instruction: |-
        Use console.log to print out
        the different boolean expressions below to see what information they return.
        (Click to see full instructions)
      CSPU5_U3L19 - fix the var name syntax error v2_instruction: |-
        Fix the error
        and get it to print the value of both variables (Click to see full instructions)
      CSPU5_U3L19 - test reassignment of two vars_instruction: |-
        Predict the value
        of a and b. Add console.log statements to find out the actual value of a and
        b. (Click for full instructions)
      CSPU5_U3L19 - three basic ops of variables_instruction: |-
        Add another variable
        called "lives" and set the value to 3. Print the value of the variable to
        the console. (Click to see full instructions)
      CSPU5_U3L19 - variable reassignment challenge pt2_instruction: |-
        Make a prediction
        about the ending values of a, b, and c. Then use console.log to check your
        understanding (Click to see full instructions)
      CSPU5_U3L19 - write var and string with same name v2_instruction: |-
        Fix the
        code so that the values of both variables print to the console. (Click to
        see full instructions)
      CSPU5_U3L23 Chatbot Conditionals 1_instruction: |-
        Add if, else if, and else
        statements to detect the movie genres Comedy, Romance, Action, and Horror.
        (Click to see full instructions)
      CSPU5_U3L24 Chatbot Basic Conditionals_instruction: |-
        Check out the project
        description for instructions. (Click to see full instructions.)
      CSPU5_U3L24 Nested Conditionals 1_instruction: |-
        Change all of the boolean expressions
        to use includes instead of ==. (Click to see full instructions)
      CSPU5_U3L24 Nested Conditionals 2_instruction: "Nest your movie genre if statements\ninside
        the if statements to check for a ? in the input. "
      CSPU5_U3L24 introIncludes_instruction: |-
        Practice using the includes command.
        (Click to see full instructions)
      CSPU5_U3L25 - drag out key event_instruction: |-
        Set up an event handler to respond
        to keypress events, and display event.key in the console. Hit keys on the
        keyboard to see what happens. (Click to see full instructions)
      CSPU5_U3L25 - play sound when up key_instruction: |-
        Change the code so the sound
        will only play when the up arrow is pressed. (Click to see full instructions)
      CSPU5_U3L26 AND operator_instruction: |-
        Update the genre and rating if statements
        to give only one movie suggestion at a time. (Click to see full instructions)
      CSPU5_U3L26 OR operator_instruction: |-
        Update the if statement to use an OR
        to check for a "?" as well as who, what, where, when, why, how in the user
        input. (Click to see full instructions)
      CSPU5_addDescriptiveIDsToTurtleDriver_instruction: |-
        Improve the button by choosing
        a descriptive and meaningful ID. (Click to see full instructions)
      CSPU5_basic if - DIY secret number_instruction: |-
        Use console.log to print out
        the different boolean expressions below to see what information they return.
        (Click to see full instructions)
      CSPU5_basic if - check driving age_instruction: |-
        Use console.log to print out
        the different boolean expressions below to see what information they return.
        (Click to see full instructions)
      CSPU5_basic if - voting examle_instruction: |-
        Use console.log to print out the
        different boolean expressions below to see what information they return. (Click
        to see full instructions)
      CSPU5_basic if-else - driving age_instruction: |-
        Use console.log to print out
        the different boolean expressions below to see what information they return.
        (Click to see full instructions)
      CSPU5_clickerGame_v1_template_instruction: |-
        Create your own "Chaser App".
        (Click to see full instructions)
      CSPU5_moveTurtleOnButtonClick_instruction: |-
        Add an event handler to the button
        to move the turtle forward. (Click to see full instructions)
      CSPU5_playWithEventTypes_instruction: |-
        Debug the program by fixing the logical
        error within the program. (Click to see full instructions)
      CSPU5_setPosition to fixed location_instruction: |-
        Introducing the setPosition
        command! Replace the moveTo in the button-click event handler to use setPosition
        to move the button itself to a random location when it's clicked.
      CSPU5_turtleDriver_add2ndButton_instruction: |-
        Debug the program by verifying
        your IDs are being referenced properly. (Click to see full instructions)
      Calc Circles of Eval .1_instruction: |-
        You’ll be writing a kind of code called
        Evaluation Blocks, because each block of code evaluates to a single value.
        Change the ??? in this code so that the block evaluates to 5.
      Calc Circles of Eval .2_instruction: |-
        This Evaluation Block is a multiplication
        function which takes two numbers and returns the product of those numbers.
        Edit this block so that it multiplies 2 * 5
      Calc Circles of Eval .3_instruction: |-
        Here's a function for addition which
        takes two numbers and returns their sum. Use this Addition Block to add 3
        + 6.
      Calc Circles of Eval .4_instruction: |-
        Here we've nested an Addition Block
        inside a Multiplication Block. Complete this code so it multiplies 3 by (4
        + 1)
      Calc Circles of Eval 1 (copy 1)_instruction: |-
        Convert this statement to <some_shape>
        of evaluation.
      Calc Circles of Eval 1_instruction: |-
        Every mathematical operator (+, -, *,
        /, and so on) can be represented by an Evaluation Block in code. Change the
        Evaluation Block to match the expression.
      Calc Circles of Eval 2 (copy 1)_instruction: |-
        Convert this statement to <some_shape>
        of evaluation.
      Calc Circles of Eval 2_instruction: |-
        Use a Multiplication Block to complete
        this code.
      Calc Circles of Eval 3_instruction: |-
        Complete the Evaluation Blocks to match
        this statement.
      Calc Circles of Eval 4_instruction: |-
        This code is missing a couple of Evaluation
        Blocks - make sure you put everything in the right order.
      Calc Circles of Eval 5_instruction: |-
        Complete the Evaluation Blocks to match
        this statement.
      Calc Circles of Eval 6_instruction: |-
        Complete the Evaluation Blocks to match
        this expression.
      Calc Circles of Eval 7_instruction: |-
        Complete the Evaluation Blocks to match
        this statement.
      Calc Circles of Eval 8_instruction: |-
        Complete the Evaluation Blocks to match
        this statement.
      Calc Circles of Eval 9_instruction: |-
        Complete the Evaluation Blocks to match
        this statement.
      Calc Circles of Eval Free Play_instruction: |-
        Free Play: Try using the Evaluation
        Blocks to write some equations of your own. How does nesting the blocks in
        different ways impact their evaluation?
      Calc Define Funcs 1 (copy 1)_instruction: |-
        Let's look at some more algebraic
        functions now. Here's a function translated from the simple algebraic function
        f(x) = x + 1. What would you expect this function to output if provided an
        input of 15?
      Calc Define Funcs 1_instruction: |-
        Let's look at some more traditional algebraic
        functions now. Here's a function translated from the simple algebraic function
        f(x) = x + 1. What would you expect this function to output if provided an
        input of 15?
      Calc Define Funcs 2_instruction: |-
        Write a function f that takes a parameter
        x and returns x - 10. Test your function using f(15).
      Calc Define Funcs 3_instruction: |-
        We don't have to call our function f every
        time; create a function called times-ten that should take a parameter x and
        return x * 10. Once you've created the function, run times-ten(50).
      Calc Define Funcs 4_instruction: |-
        Write a function called half that takes a
        number x and returns half that number. Once you've written the function,
        use it to calculate half(21)
      Calc Define Funcs 5 - multiply 1_instruction: |-
        Oh no! We lost our multiply
        block! We'll have to create a function to multiply for us. To start off,
        write a function "f" that takes a parameter "x" and returns x*5. Test
        your function using f(3).
      Calc Design Recipe 1_instruction: |-
        Let's use the Design Recipe to create a
        function called cube - this function should take in a Number and return that
        number to the power of 3. Make sure to write two example cases! When you're
        done, use your new function to calculate cube(7).
      Calc Design Recipe 2_instruction: |-
        Your school is holding a bake sale, and
        you need to track the cost of making each cookie, the money paid, and the
        total profit. Cookies cost $0.25 each to make, and sell for $1.50/cookie.\r
        \r
        Write
        the function cost, which takes in the number of cookies you intend to sell,
        and returns the cost of making those cookies.\r
        \r
        Test your function by
        calculating the cost of 42 cookies
      Calc Design Recipe 3_instruction: |-
        Write the function sales which takes in
        the number of cookies sold, and produces the amount of money customers spent
        to buy those cookies (each cookie is sold at $1.50).\r
        \r
        Test your function
        by calculating the sales for 135 cookies
      Calc Design Recipe 4_instruction: |-
        Using the two functions we just wrote, write
        the function profit, which takes in the number of cookies you sold, and gives
        you back the total profit you make from selling your cookies, accounting for
        the cost of baking them.\r
        \r
        Test your function by calculating the total
        profit for 15 cookies.
      Calc Free Play_instruction: |-
        Free Play: Write functions and algorithms of your
        own design!
      Calc Rocket 1 (copy 1)_instruction: |
        In the last puzzle you wrote a contract
        for the function "rocket-height" that states it has a range of Number, domain
        of Number, and should return the height of the rocket traveling at 15 m/s
        after a given number of seconds. Let's write an example case now for the
        height of the rocket at 3 seconds.\r
        \r
        \r
        \r
          \r
        \r
      Calc Rocket 1_instruction: |-
        In the last puzzle you wrote a contract for the
        function rocket-height that states it has a range of Number, domain of Number,
        and should return the height of the rocket traveling at 15 m/s after a given
        number of seconds. Let's write an example case now for the height of the
        rocket at 3 seconds.
      Calc Rocket 2_instruction: |-
        Great, let's do one more example before writing
        the function - what should the rocket height be after 30 seconds?
      Calc Vars 1.1_instruction: |-
        Here we've set the age variable to 17 years. Can
        you write an expression that calculates age in days?
      Calc Vars 1_instruction: |-
        Variables allow us to name values so that we can
        easily refer to them repeatedly throughout our programs. Here's a variable
        called age. Set its value to your age and click run.
      Calc Vars 2 (copy 1)_instruction: |-
        Here we've set the "age" variable to
        17 - can you write an expression that calculates "age" in months?
      Calc Vars 2.1_instruction: |-
        Here's a new variable called age-in-months. Use
        the variable age to set age-in-months.
      Calc Vars 2_instruction: |-
        Can you write an expression that calculates age in
        months?
      Calc Vars 3 (copy 1)_instruction: |-
        Can you add to this code so that it calculates
        how many hours there are in "age" years?
      Calc Vars 3_instruction: |-
        Can you add to this code so that it uses the "age"
        variable to calculate age in hours?
      Calc Vars 4_instruction: |-
        We can also set variables by using other variables.
        Let's say you have a brother who is two years younger than you - can you
        set a new variable "brother-age" using your "age" variable?
      Choose Your Own Adventure_instruction: |-
        You can do whatever you want in play
        lab! Here's an example of choose your own adventure story in play lab.
      Choose Your Own Adventure_2018_instruction: |-
        You can do whatever you want in
        play lab! Here's an example of choose your own adventure story in play lab.
      Code Studio Puzzle Challenge 1 - Artist_instruction: "Draw the line. It is\n200
        pixels long. "
      Code Studio Puzzle Challenge 1 Artist1_instruction: "Draw the line. It is 200\npixels
        long. "
      Code Studio Puzzle Challenge 10 - Bee (copy 1)_instruction: |-
        Move the Bee to
        the flower and get all of the nectar.
      Code Studio Puzzle Challenge 10 - Bee_instruction: |-
        Move the Bee to the flower
        and get all of the nectar.
      Code Studio Puzzle Challenge 10b - Bee_instruction: |-
        Move the Bee to the flowers
        and get all of the nectar at each.
      Code Studio Puzzle Challenge 11 - Artist_instruction: |-
        Draw this line by using
        the variable "length". Each line segment is 75 pixels long.
      Code Studio Puzzle Challenge 11b - Artist_instruction: |-
        Draw a square by using
        the variable length provided.
      Code Studio Puzzle Challenge 12 - Artist_instruction: |-
        The code provided draws
        one triangle. Add to it to draw triangles in a hexagon pattern.
      Code Studio Puzzle Challenge 12a - Artist_instruction: |-
        The code provided draws
        one triangle. Add to it to draw triangles in a hexagon pattern.
      Code Studio Puzzle Challenge 13 - Artist_instruction: "This is just like a\n\"for\"
        loop. Complete the code to draw six lines that grow from 50, 60, 70,\n80,
        90, to 100 pixels long. "
      Code Studio Puzzle Challenge 14 - Artist_instruction: "This is just like a\n\"for\"
        loop. Complete the loop to draw 4 squares that grow from 80, 100,\n120, to
        140 pixels. "
      Code Studio Puzzle Challenge 2 - Artist_instruction: |-
        Now add a turn and another
        line. The lines are 200 pixels long.
      Code Studio Puzzle Challenge 3 - Artist_instruction: |-
        Draw the square. Each
        side is 100 pixels long.
      Code Studio Puzzle Challenge 4 - Artist_instruction: |-
        Draw the octagon. Each
        side is 100 pixels long.
      Code Studio Puzzle Challenge 5 - Bee (copy 1)_instruction: |-
        Move the Bee to
        the flower and get the nectar.
      Code Studio Puzzle Challenge 5 - Bee_instruction: |-
        Flowers contain a specific
        amount of nectar. Move the Bee to the flower and collect nectar with the get
        nectar block.
      Code Studio Puzzle Challenge 6 - Bee_instruction: |-
        Honeycombs can hold a specific
        amount of honey. Get the nectar from the flower and make some honey.
      Code Studio Puzzle Challenge 7 - Bee_instruction: |-
        Move the Bee to the flower
        and get the nectar.
      Code Studio Puzzle Challenge 8 - Bee_instruction: |-
        The cloud could be hiding
        a flower or a honeycomb. Only get nectar from flowers. Only make honey at
        honeycombs.
      Code Studio Puzzle Challenge 9 - Bee_instruction: |-
        The cloud could be hiding
        a flower or a honeycomb. Only get nectar from flowers. Only make honey at
        honeycombs.
      Code Studio Puzzle Challenge Artist Screencast (copy 1)_instruction: "Draw\nthe
        line. Each segment is 100 pixels long. "
      Code Studio Puzzle Challenge Artist Screencast 2_instruction: "Complete the\ncode
        to draw the line. Each segment is 100 pixels long. "
      Code Studio Puzzle Challenge Artist Screencast_instruction: "Draw the line.\nEach
        segment is 100 pixels long. "
      Code Studio Puzzle Challenge Bee Screencast_instruction: |-
        Move the Bee to the
        flowers and get all of the nectar.
      Code Studio Puzzle Challenge Square - Artist_instruction: |-
        Draw a square by
        using the variable length provided.
      Code Studio Puzzle Challenge Var - Artist_instruction: |-
        Draw a line by using
        a variable "length" set to 180.
      Collector Demo_instruction: |-
        Look at all this loot! Help me get as many coins
        as I can so I can improve my farm. I can only use 9 blocks though!
      Course 2 Bee Loops 1_instruction: "Hi, I'm a bee. Can you help me collect\nthe
        nectar from these flowers? "
      Course 2 Bee Loops 13_instruction: |-
        Assessment: Use the repeat block to collect
        all of the nectar.
      Course 2 Bee Loops 2_instruction: |-
        Can you do the same task more easily with
        a loop?
      Course 2 Bee Loops 3_instruction: |-
        Now use the new repeat block to collect
        all of the nectar and make all of the honey.
      Course 2 Bee Loops 3__instruction: |-
        Can you use a loop to collect all that
        nectar?
      Course 2 Bee Loops 4_instruction: |-
        What happens if you loop this sequence 3
        times? Don't forget to make the honey at the end!
      Course 2 Maze Loops 1_instruction: Poţi să mă duci la porc din 5 mutări?
      Course 4 2_instruction: Albina vrea acum doar nectar. Amintiţi-vă, nu toate
        obiectele sunt flori, deci verifică să colectezi nectar doar din flori.
      Course 4 Artist 1_instruction: 'Ajută-mă să desenez o cutie. (Fiecare linie
        are lungimea de 200 pixeli) '
      Course 4 Artist 10_instruction: 'Este timpul să ne jucăm liber! Aici se află
        codul pentru o formă interesantă. Oare ce se întâmplă când îl repeţi? Distrează-te
        şi desenează orice îţi place. '
      Course 4 Artist 11_instruction: 'Acum, o provocare! Iată un proiect care foloseşte
        construcţii pe care le cunoşti. Reuşeşti să îl creezi din nou fără informaţii
        suplimentare? Indicaţie: Esti liber să foloseşti modulul încercare şi eroare.
        Nu te aştepta să reuşeşti din prima.'
      Course 4 Artist 12_instruction: |-
        Vrei să-ți arunci o a doua privire la designul de inspirație sau indicii? Clic aici\r
        \r
        Altfel, creează un design doar al tău!
      Course 4 Artist 13_instruction: Joci? Aici este o pânză albă unde poţi schiţa
        orice doreşti!
      Course 4 Artist 2_instruction: Poţi să reiei acest cod pentru a desena un patrulater
        de culoare gri?
      Course 4 Artist 20_instruction: Joci? Aici este o pânză albă unde poţi crea
        orice doreşti!
      Course 4 Artist 3_instruction: Încearcă să înţelegi ce se întâmplă dacă rulezi
        acest cod (sau apeşi "Run" pentru a-l testa). Apoi, repetă rularea de atâtea
        ori cât este necesar pentru a termina desenul.
      Course 4 Artist 4_instruction: Câte grade are un cerc? Completaţi construcţia
        repetitivă cu acel număr necesar să  creezi un cerc de culori.
      Course 4 Artist 5_instruction: 'Desenează cealaltă jumătate a desenului pentru
        a fi simetric. Triunghiurile sunt echilaterare cu lungimea de 50 pixeli. Indicaţie:
        Este necesară rularea codului de câteva ori pentru a rezolva toate blocurile
        necesare a fi adăugate.'
      Course 4 Artist 6_instruction: |-
        Completează codul pentru a desena aceste triunghiuri.
        Indicaţie: Există 3 triunghiuri care se rotesc 360 grade...de câte ori intră 3 în 360?
      Course 4 Artist 7_instruction: 'Acum include această buclă în interiorul altei
        bucle pentru a desena 10 triunghiuri. Aceasta se numește buclă imbricată.
        Indicație: Toate cele 10 triunghiuri fac o rotație completă de 360 grade.  '
      Course 4 Artist 8_instruction: Desenează acest soare prin buclarea întregii
        secvențe de cod, de mai multe ori.
      Course 4 Artist 8a_instruction: Îți reamintești această formă? Acum o să te
        lasăm sa o construiești fară să îți dăm nici un bloc pentru început!
      Course 4 Artist 9_instruction: 'Reia rularea acestor instrucţiuni de 10 ori
        şi asigură-te că fiecare forma este rotită înainte de a fi desenată. Ai aici
        o indicaţie pentru cât de mult trebuie rotită: Care este rezultatul împărțirii
        lui 360 la 10?'
      Course 4 Artist Binary 1_instruction: |-
        Aici avem o funcție care ia un şir binar format din 1 şi 0, care îndrumă artistul să le urmeze de la stânga la dreapta, de sus în jos. Artistul va umple spațiile când vede 1 şi le va ignora când vede 0. \r
        \r
        Rulează codul pentru a vedea cum artistul folosește şirul binar pentru a desena acest model.
      Course 4 Artist Binary 1a_instruction: |-
        Aici avem o funcție care ia un şir binar format din 1 şi 0, care îndrumă artistul să le urmeze de la stânga la dreapta, de sus în jos. Artistul va umple spațiile când vede 1 şi le va ignora când vede 0. \r
        \r
        Rulează codul pentru a vedea cum artistul folosește şirul binar pentru a desena acest model.
      Course 4 Artist Binary 2_instruction: Care dintre aceste șiruri binare trebuie
        rulate de 8 ori pentru a desena această imagine?
      Course 4 Artist Binary 3_instruction: Poţi desena acest model prin rularea în
        buclă a unui şir binar de trei digiți?
      Course 4 Artist Binary 4_instruction: Fiecare şir binar reprezintă o linie din
        această imagine. Poţi să rearanjezi liniile astfel încât desenul să reprezinte
        o faţă zâmbitoare în loc de o faţă tristă?
      Course 4 Artist Binary 5_instruction: Care şir binar de 6 caractere, repetat
        de 11 ori va desena această imagine?
      Course 4 Artist Binary 6_instruction: Care este cel mai scurt şir binar pe care
        tu poţi să-l rulezi repetat pentru a desena această imagine?
      Course 4 Artist Binary 7_instruction: Finalizează acest desen.
      Course 4 Artist Binary Free Play 2_instruction: 'Joc liber: Aici ai o pânză
        de desen cu o rezoluţie mare - 16 biţi pe 16 biţi!'
      Course 4 Artist Binary Free Play 2a_instruction: Aici este o pânză de rezoluţie
        mai mare pentru a desena - 16 pixeli 16 pixeli! \r \r Vezi ce se întâmplă
        atunci când începem sa cream cu biţi?
      Course 4 Artist Binary Free Play 2b_instruction: Click aici pentru a vedea indicii.
      Course 4 Artist Binary Free Play_instruction: 'Joc liber: Desenează ce-ţi place
        ţie în binar!'
      Course 4 Artist Binary pre1_instruction: Codul binar este un mod de a reprezenta
        informatia utilizand numai doua optiuni. Aici, vom folosi optiunile "off"(reprezentat
        de numarul zero) si "on" (reprezentat de numarul 1). \r\r V-am pus la dispozitie
        o grila de pixeli prin care va puteti plimba si face design-uri intorcand
        doar anumite patrate. Il poti face pe artist sa deseneze "01010101"in cod
        binar in primul rand?
      Course 4 Artist Binary ryan_instruction: Codul binar este un mod de a reprezenta
        informatia utilizand numai doua optiuni. Aici, vom folosi optiunile "off"(reprezentat
        de numarul zero) si "on" (reprezentat de numarul 1). \r\r V-am pus la dispozitie
        o grila de pixeli prin care va puteti plimba si face design-uri intorcand
        doar anumite patrate. Il poti face pe artist sa deseneze "01010101"in cod
        binar in primul rand?
      Course 4 Artist For  Functions 10_instruction: Hai să progresăm un pic, poţi
        desena o stea folosind funcţia "Draw a Square Line"? Succes!
      Course 4 Artist For  Functions 11_instruction: Hai să progresăm un pic, poţi
        desena o stea folosind funcţia "Draw a Square Line"? Succes!
      Course 4 Artist For Loops 1_instruction: 'Desenează acest triunghi de 50 de
        pixeli mărime. Tip: folosește un bloc "repetă".'
      Course 4 Artist For Loops 10_instruction: Timpul jocului liber! Distrează-te
        desenând orice îţi place folosind construcţiile învăţate
      Course 4 Artist For Loops 11_instruction: 'Îți amintești cum am folosit o variabilă
        pentru a controla numărul laturilor unei forme? Acest model începe cu un triunghi
        și adaugă pe rând câte o latură până când desenează un decagon (10 laturi).
        Fiecare latură ar trebui să aibă o lungime de 100 de pixeli. Sugestie: 360
        împărțit la numărul de laturi ale unei forme dă numărul de grade la care va
        trebui să virezi.'
      Course 4 Artist For Loops 11a_instruction: |-
        Hai să le punem la un loc! Folosind cunoştiinţele despre "bucle" şi despre "contor", crează acest desen unde fiecare formă are două laturi în plus faţă de ultima. Asigură-te că fiecare latură este de 10 ori mai lungă ca numărul de laturi ale poligonului.\r
        \r
        Foarte puţin din cod este completat pentru tine.
      Course 4 Artist For Loops 12_instruction: 'Asta arată destul de bine, dar acum
        aş vrea să desenezi fiecare formă lângă ultima. De data asta fiecare latură
        este de 20 pixeli. Foloseşte o construcţie de tip salt pentru a sări înainte
        40 pixeli după fiecare formă. '
      Course 4 Artist For Loops 13_instruction: Hmmm, aceste forme devin din ce în
        ce mai mari de fiecare dată! Nu am rezolvat deja această problemă cu variabile?
        Cum putem folosi noi variabila numărătoare pentru a micșora laturile având
        în vedere că acestea sunt mai multe la număr? În loc de a muta înainte pe
        câte o anumită porțiune prestabilită, încearcă să înaintezi (100 / numărător)
        pixeli.
      Course 4 Artist For Loops 14_instruction: Dacă tu roteşti puţin mai mult sau
        mai puţin decât ar trebui în mod normal pentru o formă, crează o formă îngrijită.
        Încearcă rotind 89 grade pentru a crea o spirală pătrată răsucită.
      Course 4 Artist For Loops 15_instruction: 'Joc liber: Încearcă să faceţi câteva
        desene singuri folosind instrucţiunea "For Loops". Am adăugat câteva variabile
        generice pentru a le utiliza.'
      Course 4 Artist For Loops 2_instruction: 'Am pus codul pentru a desena un triunghi
        într-o buclă care numără de la 50 la 100 din 10 în 10. Aruncă o privire la
        cum este construit codul apoi dă clic pe "Run" când eşti gata să-l vezi în
        acţiune. '
      Course 4 Artist For Loops 3_instruction: Cel mai mic triunghi are laturile de
        20 pixeli, cel mai mare are laturile de 200 pixeli, şi fiecare triunghi este
        cu 20 pixeli mai mare decât ultimul. Actualizează instrucţiunea "for loop"
        pentru a desena aceste triunghiuri.
      Course 4 Artist For Loops 4_instruction: Utilizaţi "for loop" pentru a desena
        aceste patrulatere. Ele încep cu 50 pixeli lungime, cel mai mare are 300 pixeli
        lungime şi fiecare patrulater este cu 25 pixeli mai mare decât ultimul. Ţi-am
        dat aproape tot codul de care ai nevoie - îţi lipseşte o singură rutină, care
        este aceea?
      Course 4 Artist For Loops 5_instruction: 'Bună treabă ai făcut la ultimul puzzle!
        Hai să folosim acea contrucţie variabilă "contor" iar pentru a desena a desena
        această imagine simpatică. '
      Course 4 Artist For Loops 6_instruction: Joc liber! Încearcă să foloseşti instrucţiunea
        "for loop" pentru a desena un formă care îşi măreşte dimensiunea cum vrei
        tu.
      Course 4 Artist For Loops 6a_instruction: Fă trei modificări mici la codul de
        la ultimul nivel pentru a obţine aceast lucru!
      Course 4 Artist For Loops 7_instruction: Ce se întâmplă dacă elimini instrucţiunea
        "Repeat 3" din acest algoritm, păstrând construcţiile "move" şi "turn" în
        "for loop"? În această spirală generată de un triunghi, fiecare latură este
        cu 20 pixeli mai lungă decât ultima.
      Course 4 Artist For Loops 8_instruction: Latura cea mai mică a acestei spirale
        pătratică este de 10 pixeli, cea mai mare este de 200 pixeli şi fiecare linie
        este cu 10 pixeli mai lungă decât ultima. Poţi completa blocul de instrucțiuni
        lipsă pentru a finaliza această imagine minunată?
      Course 4 Artist For Loops 8a_instruction: Latura cea mai mică a acestei spirale
        pătratică este de 10 pixeli, cea mai mare este de 200 pixeli şi fiecare linie
        este cu 10 pixeli mai lungă decât ultima. Poţi completa blocul de instrucțiuni
        lipsă pentru a finaliza această imagine minunată?
      Course 4 Artist For Loops 9_instruction: Poți face o spirală? Înaintează de
        la 1 pixel la 75 pixeli crescând cu 1 pixel de fiecare dată.
      Course 4 Artist For Loops Challenge_instruction: |-
        Poți să îți dai seama cum să folosești toate lucrurile pe care le-ai învățat ca sa creezi această imagine?\r\r
        Ai nevoie de o sugestie?
        Click/apasa aici.
      Course 4 Artist For Loops Challenge_a_instruction: "Poti sa iti dai seama cum\nsa
        folosesti toate aceste lucruri pentru a crea imaginea asta?\\r\n\\r\nVrei
        \nun pont? Apasa aici."
      Course 4 Artist For Loops inspire_instruction: |-
        Inspiraţie pentru joc liber: Acum ai învăţat tot ce ai nevoie să ştii pentru a crea un model ca acesta! Dacă această imagine te inspiră, încearcă să faci ceva similar. Altfel, creează ceva pe cont propriu.\r
        \r
        Ai nevoie de un indiciu? Fă clic aici.
      Course 4 Artist Functions 1_instruction: Poți desena un pătrat care are lungimea
        laturii de 100 pixeli, folosind o construcție buclă?
      Course 4 Artist Functions 10_instruction: De ce bloc de instrucțiuni ai nevoie
        pentru a adăuga un triunghi deasupra pătratului?
      Course 4 Artist Functions 11_instruction: Verifică acest cod care desenează
        un cub - poţi să îl transformi într-o funcţie numită "Draw a Cube"
      Course 4 Artist Functions 12.1_instruction: Hai să creăm o funcție numită "desenează
        un octogon 20" care deseneză un octogon cu fiecare latură de 20 de pixeli
        lungime.
      Course 4 Artist Functions 12_instruction: Reia în buclă funcţia square pentru
        a desena o linie
      Course 4 Artist Functions 13.1_instruction: |-
        Acum, hai să facem o funcție numită "salt la dreapta sus" care mută artistul în partea din dreapta sus a octogonului pe care tocmai l-ai desenat ca să finalizăm acest model\r
        \r
        Indiciu: Pentru a ajunge în colțul din dreapta sus a octogonului, încearcă să sări după un model care realizează doar 3/8 din octogon.
      Course 4 Artist Functions 13_instruction: Verifică dacă avem o funcţie nouă
        definită "draw a line of squares". Fi liber să arunci o privire în instrucţiunile
        funcţiei pentru a vedea cum am construit-o. Dă clic pe "Run" când eşti gata
        pentru puzzle-ul următor.
      Course 4 Artist Functions 14.1_instruction: Acum, hai să facem o funcție numită
        "salt la dreapta sus" care mută artistul în partea din dreapta sus a octogonului
        pe care tocmai l-ai desenat ca să finalizăm acest model.
      Course 4 Artist Functions 14_instruction: Ai lucrat bine! Hai să folosim noua
        ta funcţie "Draw a line of squares" pentru a desena o formă pătrată. Ţine
        minte fiecare pătrat are 40 pixeli lungime.
      Course 4 Artist Functions 15_instruction: 'Hai să progresăm un pic, poţi desena
        o figură în formă de stea folosind funcţia "draw a line of square"? Succes!
        Indicaţie: trebuie să roteşti la 144 grade'
      Course 4 Artist Functions 2_instruction: 'Poţi desena 3 pătrate situate la 20
        pixeli depărtare unul de celălalt? Indicaţie: fiecare pătrat are latura de
        100 pixeli'
      Course 4 Artist Functions 3_instruction: 'Folosind blocul de instrucţiuni "draw
        a square" poţi desena această imagine? Indicaţie: fiecare pătrat este depărtat
        cu 120 pixeli.\r

'
      Course 4 Artist Functions 4_instruction: 'Ești gata să-ți creezi propriul "bloc
        de funcție"? Fă clic pe blocul "Funcții" din cutia de instrumente, numește-l
        "desenează un triunghi", apoi creează un triunghi așa cum ai mai făcut anterior
        cu blocurile "Acțiune" și "Bucle". Apoi, fă clic pe Salvează și Închide în
        colțul din dreapta sus. Tip: Creează un triunghi care are 100 de pixeli lungime.
        Mult noroc!'
      Course 4 Artist Functions 5 OLD_instruction: Hai să încercăm să folosim cele
        două funcții ale noastre pentru a desena o casă - ce trebuie corectat în acest
        cod pentru ca acesta să deseneze casa așa cum trebuie?
      Course 4 Artist Functions 5_instruction: 'Folosind blocul de instrucţiuni "draw
        a square" poţi desena această imagine? Indicaţie: fiecare pătrat este depărtat
        cu 120 pixeli.\r

'
      Course 4 Artist Functions 6_instruction: De ce bloc de instrucțiuni ai nevoie
        pentru a adăuga un triunghi deasupra pătratului?
      Course 4 Artist Functions 7_instruction: Poți desena o linie de pătrate folosind
        funcția Pătrat? Fiecare pătrat are lungime de 40 de pixeli.
      Course 4 Artist Functions 8_instruction: 'Începi să-ți dai seama cum să folosești
        blocurile de funcție? Hai să modificăm acest pătrat astfel încât să aibe o
        dimensiune de 200 de pixeli. Sugestie: fă clic pe "editează" pentru a schimba
        dimensiunea în editorul funcției "desenează un pătrat". Amintește-ți să faci
        clic pe "salvează și închide" pentru a ieși din editorul de funcție. '
      Course 4 Artist Functions 9_instruction: Ți-am dat cea mai mare parte din codul
        pentru crearea unei funcții. Cu toate acestea se pare că ceva lipsește. Poți
        finaliza acest bloc de funcție?
      Course 4 Artist Functions Inspiration_instruction: Fă clic aici pentru a vedea
        din nou indiciile.
      Course 4 Artist Functions challenge_instruction: Fă clic aici pentru a vedea
        din nou indiciile.
      Course 4 Artist Functions inspire_instruction: Fă clic aici pentru a vedea din
        nou imaginea de inspiraţie.
      Course 4 Artist Inspire_instruction: |-
        Vrei să-ți arunci o a doua privire la designul de inspirație sau indicii? Clic aici\r
        \r
        Altfel, creează un design doar al tău!
      Course 4 Artist Params 1_instruction: Hai să edităm o funcție care desenează
        un pătrat cu laturi de 50 de pixeli
      Course 4 Artist Params 10_instruction: 'Poți apela funcții din interiorul altor
        funcții! Folosind ca bază funcția ta de "formă", creează 3 forme de casă fiecare
        mai mare cu 20 de pixeli decat precedenta, începând cu 50 de pixeli în lungime.
        Ar putea fi de ajutor folosirea unei bucle numărătoare. '
      Course 4 Artist Params 11_instruction: |-
        How about a function called "pinwheel"
        that takes three parameters - "sides," "length" and "repeat." You can
        calculate how much to turn after each shape using the same math you used to
        figure out the turns for a shape of "sides". Can you recreate this picture?
        Here's a tip each shape is 100 pixel's in length.
      Course 4 Artist Params 12_instruction: Utilizează funcția ta "morișcă" pentru
        a desena fiecare dintre aceste forme. Lungime laturii pentru fiecare imagine
        este 50.
      Course 4 Artist Params 13_instruction: 'Joc la alegere: Ai aici funcțiile pe
        care le-ai scris și chiar și câteva în plus pentru a te juca cu ele. Desenează
        ceva minunat!'
      Course 4 Artist Params 2_instruction: |-
        That triangle function would be a whole
        lot more useful if it could draw triangles of different sizes. I've added
        a parameter for line length, but it doesn't do anything yet. Can you update
        the function so it uses the "length" parameter when it draws each side?
        The triangle sizes are 150 pixels, 75 pixels and 25 pixels.
      Course 4 Artist Params 3_instruction: 'Minunat, poți desena fiecare din aceste
        triunghiuri cu acea funcție nouă? Primul are o lungime de 25 de pixeli, al
        doilea 50 și al treilea 75. '
      Course 4 Artist Params 4_instruction: Poți adăuga o funcție nouă numită pătrat?
        Aceasta ar trebui să aibe de asemenea și un parametru de lungime, la fel ca
        triunghiul. De data aceasta, desenează 3 pătrate cu lungimi de 25, 50 și 75
        de pixeli, la o distanță de 100 de pixeli unul față de celălalt.
      Course 4 Artist Params 5_instruction: 'Folosește ambele funcții noi ale tale
        pentru a desena această imagine. Pentru a face acest lucru mai ușor, folosește
        o buclă cu un parametru "numărător".

'
      Course 4 Artist Params 6_instruction: "Hai să edităm această funcție \"desenează
        o formă\".\nAceasta are deja un parametru: \"lungime\". Acum hai să edităm
        funcția pentru a adauga deasemenea și un parametru \"laturi\". Să ne amintim
        că unghiul de întoarcere pentru o formă dată este de 360 împărțit la numărul
        de laturi pe care le are. Sugestie: lungimile pentru fiecare formă sunt: triunghiul
        are 100 de pixeli, hexagonul are 25 de pixeli și pătratul are 50 de pixeli. "
      Course 4 Artist Params 7_instruction: 'Poți desena aceste forme prin completarea
        "???" Pătratul și triunghiul au o mărime de 100 de pixeli, pe când hexagonul
        are o mărime de 75 de pixeli. '
      Course 4 Artist Params 8_instruction: "Îți poți da seama cum să desenezi aceasta
        forma? Iată un indiciu creează o nouă funcţie cu 6 laturi numită un hexagon.
        \n"
      Course 4 Artist Params 9_instruction: Îți amintești cand am folosit bucla numărătoare
        dar am înlăturat o buclă din interior? Hai să ne distrăm puțin și să folosim
        o funcție "desenează o formă" cu parametri "laturi" și "lungime". Poți re-crea
        aceste forme? Număratorul pătratului ar trebui să fie 5/100/5, numărătorul
        triunghiului ar trebui să fie 10/100/10 și hexagonul este 2/100/2.
      Course 4 Artist Var 9_instruction: "Iată aici algoritmul pentru a desena un
        triunghi, \nmodifică-l așa încât acesta să folosească de această data variabila
        \"laturi\". Înlocuiește numărul 3 cu variabila \"laturi\". Sugestie: amintește-ți
        să utilizezi blocul \"setează laturi la\"."
      Course 4 Artist Vars 1_instruction: "Mă poți ajuta să desenez un triunghi echilateral?
        \nAcesta trebuie să aibe fiecare latură de 100 de pixeli lungime."
      Course 4 Artist Vars 10_instruction: Iată aici un algoritm care desenează un
        triunghi din triunghiuri mai mici. Poți să-l modifici așa încât acesta să
        folosească variabila "laturi" pentru a desena fiecare triunghi? Uită-te prin
        cod şi, de fiecare dată când vezi numărul 3, înlocuiește-l cu variabila ta
        "laturi". Aminteaște-ți să utilizezi blocul "setează laturi".
      Course 4 Artist Vars 11_instruction: Iată aici același algoritm pe care l-am
        inventat pentru ultimul puzzle - la cât ar trebui să setezi variabila "laturi"
        pentru a desena cu pătrate această imagine?
      Course 4 Artist Vars 12_instruction: Hai să setăm variabila "laturi" la 5. Cu
        cât adăugam mai multe laturi la acest algoritm, cu atât acest întreg model
        devine mai mare! Observă că există nouă variabilă numită "lungime". Acum o
        putem folosi pe aceasta oriunde avem un "mută înainte". Setează variabila
        "lungime" la 75 pentru acestă formă.
      Course 4 Artist Vars 13_instruction: Cand o forma are mai multe fete, fiecare
        fata trebuie sa fie mai scurta daca doriti ca intregul model sa se integreze
        in ecran. \r Haideti sa cream algoritmul pentru acest model, dar in loc sa
        adaugam manual variabila 'lungime', haideti sa folosim un bloc matematic cu
        variabila "parte" pentru a ne asigura ca fiecare forma se potriveste corect.
        Perimetrul fiecarui poligon este 300 de pixeli.\r Ai nevoie de niste ponturi?
        Click aici.
      Course 4 Artist Vars 14_instruction: 'Joc la alegere: Ia te uită! Acum algoritmul
        tău este cuprins în cadrul unei bucle suplimentare. Experimentează schimbarea
        valorilor celor două variabile ale tale pentru a desena modele super tari.'
      Course 4 Artist Vars 2_instruction: În loc de "mută înainte cu 100", blocul
        "mută" se va referi acum la variabila numită "lungime". Poți seta "lungime"
        la 150 pentru a desena acest triunghi nou?
      Course 4 Artist Vars 3_instruction: 'Avem aici o buclă ce desenează un pătrat,
        dar ceva lipsește. Poți s-o repari astfel încât să folosească variabila "lungime"
        pentru a ne da seama cât de lungă trebuie să fie fiecare latură? '
      Course 4 Artist Vars 4_instruction: Acum vreau să fac un dreptunghi care este
        de două ori mai înalt pe cât este de lat. Avem o variabilă numită "lățime"
        care este setată la 100. Poți folosi blocurile matematice pentru a completa
        codul?
      Course 4 Artist Vars 5_instruction: Folosește variabila "laturi" pentru a controla
        de câte ori se rulează această buclă.
      Course 4 Artist Vars 6_instruction: |-
        Am adăugat o variabilă numită "laturi" care este setată la 4. Poți folosi variabila "laturi" (împreună cu blocul matematic) pentru a te asigura că mă întorc destul pentru a crea un pătrat? \r
        \r
        Tip:
        Pentru a desena un poligon regulat, eu ar trebui să mă întorc 360/laturi de fiecare dată.
      Course 4 Artist Vars 7_instruction: Poți tu modifica variabila "laturi" pentru
        a mă ajuta să desenez acest hexagon?
      Course 4 Artist Vars 8_instruction: 'Joc la alegere: Experimentează cu numărul
        de laturi pe care le are această formă. Poţi schimba algoritmul astfel încât
        dimensiunea globală a formei rămâne aceeaşi, indiferent de cât de multe laturi
        are aceasta? Sugestie: S-ar putea să fie necesar să utilizezi blocurile tale
        matematice (360 împărţit "laturi" în două locuri de data aceasta) '
      Course 4 Artist Vars 9_instruction: Modifică acest algoritm așa încât să folosească
        variabila "laturi" în loc de un număr fix pentru a desena un triunghi. Nu
        uita să utilizezi blocul "setare laturi la".
      Course 4 Bee 1_instruction: 'Albina nu poate ști ce este sub nor! Prima dată,
        verifică dacă este o floare sau un fagure de miere. Numai apoi adună nectar
        dacă este o floare. '
      Course 4 Bee 2_instruction: Verifică fiecare obiect pentru a vedea dacă acesta
        este o floare. Dacă este, colectează nectarul... altfel, poți să-l ignori!
      Course 4 Bee 3_instruction: Obiectul necunoscut este fie o floare, fie un fagure
        de miere. Utilizează blocul dacă/altfel să colectezi nectar dacă este o floare,
        altfel fă miere (pentru că atunci ar fi un fagure de miere).
      Course 4 Bee 4_instruction: Această floare violetă ar putea avea ori 3, ori
        2 nectaruri sau 1 nectar. Aici, un bloc "dacă-altfel" este combinat cu alt
        bloc "dacă-altfel" pentru a crea un bloc "dacă", "altfel-dacă", "altfel".
        Completează soluția pentru a colecta cantitatea necunoscută de nectar.
      Course 4 Bee 5_instruction: Această floare violetă ar putea avea ori 3, ori
        2 nectaruri sau 1 nectar. Adaugă un bloc "dacă-altfel" pentru a crea un bloc
        "dacă", "altfel-dacă", "altfel". Completează soluția pentru a colecta cantitatea
        necunoscută de nectar.
      Course 4 Bee 6_instruction: Această floare violetă ar putea avea ori 3, ori
        2 nectaruri sau 1 nectar. Creează un bloc "dacă", "altfel-dacă", "altfel"
        pentru a colecta cantitatea necunoscută de nectar.
      Course 4 Bee 7_instruction: Folosește tot ce ai învățat pânăacum pentru a colecta
        tot nectarul. Floarea violetă ar putea avea ori 3, ori 2 nectaruri sau 1 nectar.
      Course 4 Bee For Loops 1_instruction: Utilizează o buclă pentru a colecta nectarul
        din fiecare floare.
      Course 4 Bee For Loops 10_instruction: Dacă bucla ta este de numărare în ordine
        descrescătoare, incrementul este scăzut din variabila ta numărător la fiecare
        buclă. Ce ar trebui să fie incrementul tău pentru a colecta 9 nectaruri, apoi
        6, şi apoi 3 nectaruri?
      Course 4 Bee For Loops 11_instruction: Ce este în neregulă cu acestă buclă?
        Vezi dacă poți s-o repari și să faci albina să colecteze tot nectarul.
      Course 4 Bee For Loops 2_instruction: Aici este un nou tip de buclă, numit bucla
        "pentru". Acest tip de buclă "pentru" va număra de la 1 la 5, câte 1, şi va
        rula conţinutul buclei de fiecare dată când numără. Ajută Albina să obțină
        nectarul.
      Course 4 Bee For Loops 3_instruction: Poți rezolva acest puzzle folosind o buclă
        "pentru" care să numere de la 1 la 3 câte1. Acum hai să mergem să luăm ceva
        nectar!
      Course 4 Bee For Loops 4_instruction: Colectează tot nectarul din aceste flori.
        Mă întreb dacă există o modalitate mai ușoară de a face acest lucru...
      Course 4 Bee For Loops 5_instruction: "Ah, bucla \"pentru\" face acest lucru
        mult mai ușor!\nFolosind variabila \"numărător\" din bucla \"pentru\" ca să
        repete blocul \"obține nectar\" de același numări de ori ca și bucla. Ptiu!
        Asta înseamnă o mulțime de bucle. Ai nevoie de întregul cod acolo, aruncă
        o privire asupra modului în care este pus cap la cap apoi fă clic pe Rulează
        și observă cum funcționează. "
      Course 4 Bee For Loops 6_instruction: De asemenea, poţi utiliza o buclă "pentru"
        ca să numere în ordine descrescătoare. Încearcă să colectezi acest nectar
        numărând în ordine descrescătoare de la 5 la 1 câte 1.
      Course 4 Bee For Loops 7_instruction: Folosește variabila ta din bucla "pentru"
        ca să controlezi cât de departe să muți pe orizontal.
      Course 4 Bee For Loops 8_instruction: Poţi folosi variabila de buclă pentru
        a controla mişcarea şi colectarea de nectar?
      Course 4 Bee For Loops 9_instruction: Ultimul număr din bucla ta "pentru" este
        numit "increment" şi, de fiecare dată când bucla se execută, variabila "numărător"
        se modifică prin increment. Încearcă să colectezi aceste flori folosind un
        increment de 2.
      Course 4 Bee Loops 5 NEW_instruction: Aici sunt trei flori. Poti găsii tiparul
        de instructiuni de care ai nevoie să il repeți de 3 ori ca să colectezi nectarul
        cu cât mai putine blocuri?
      Course 4 Bee Loops 5a NEW_instruction: Acum, utilizează bucle pentru a ajuta
        la albina să colecteze cu cât mai puţine blocuri posibil tot nectarul din
        drumul ei spre fagurele de miere.  Când ajungi acolo, nu uita să facă miere!
      Course 4 Bee Params 1_instruction: Utilizează funcţia "obține 3 nectaruri",
        care se întoarce, se mută pentru a colecta nectarul şi apoi revine la locaţia
        originală. Scrie o secvenţă pentru a colecta tot nectarul folosind "obţine
        3 nectaruri."
      Course 4 Bee Params 2_instruction: Modifică funcţia "obţine 3 nectaruri", astfel
        încât mă facă să mă întorc la dreapta, în loc de stânga, către flori.
      Course 4 Bee Params 3 (copy 1)_instruction: Acum sunt flori pe ambele părți!
        Poate că poți folosi un parametru astfel încât aceeași funcție se aplică florilor
        de pe ambele părți. Am adăugat la funcție un parametru numit "direcție". Dacă
        parametrul "direcție" este egal cu 0 ar trebui să mă întorc la stânga, dacă
        e 1ar trebui să mă întorc la dreapta.
      Course 4 Bee Params 3_instruction: Acum sunt flori pe ambele părți! Am adăugat
        la funcție un parametru numit "direcție". Folosește variabilele "stânga" și
        "dreapta" pentru a controla direcția. Completează restul definiției funcției
        și apoi fă clic pe "Salvează și Închide".
      Course 4 Bee Params 4 (copy 1)_instruction: Încearcă să folosești noua ta funcție
        pentru a colecta toate florile. Amintește-ți, 0 = stânga și 1 = dreapta.
      Course 4 Bee Params 4 - Two WhenRun_instruction: Încearcă să utilizezi funcţia
        ta nouă pentru a colecta toate florile. Amintește-ți să utilizezi variabilele
        stânga şi dreapta.
      Course 4 Bee Params 4 backup_instruction: Nu ar fi frumos dacă am putea colecta
        toate aceste nectaruri cu o singură funcţie? Încearcă să adăugi un parametru
        nou la funcţia ta numit "nectaruri" pentru a controla cantitatea de nectar
        de colectat. Probabil vei dori și să redenumești funcţia!
      Course 4 Bee Params 4_instruction: Încearcă să utilizezi funcţia ta nouă pentru
        a colecta toate florile. Amintește-ți să utilizezi variabilele stânga şi dreapta.
      Course 4 Bee Params 5_instruction: Hai să începem de la zero - poți crea o funcție
        nouă numită "obține 5 nectaruri" cu un parametru de direcție?
      Course 4 Bee Params 6 (copy 1)_instruction: Încearcă să aduni tot nectarul folosind
        noua funcţie construită de tine.
      Course 4 Bee Params 6_instruction: Nu ar fi frumos dacă am putea colecta toate
        aceste nectaruri cu o singură funcţie? Încearcă să adăugi un parametru nou
        la funcţia ta numit "unităţi de nectar" pentru a controla cantitatea de nectar
        de colectat. Probabil vei dori și să redenumești funcţia!
      Course 4 Bee Params 7 (copy 1)_instruction: Încearcă să aduni tot nectarul folosind
        noua funcţie construită de tine.
      Course 4 Bee Params 7_instruction: Încearcă să aduni tot nectarul folosind noua
        funcţie construită de tine.
      Course 4 Bee Params 8 Clone 2_instruction: Oooh, acum există miere de care să
        ne ocupăm! Cum ți-ai putea tu actualiza funcţia ca ori să obţină nectar ori
        să facă miere.
      Course 4 Bee Params 8 Clone_instruction: Oooh, acum există miere de care să
        ne ocupăm! Cum ți-ai putea tu actualiza funcţia ca ori să obţină nectar ori
        să facă miere.
      Course 4 Bee Params 8 clone 3_instruction: Oooh, acum există miere de care să
        ne ocupăm! Cum ți-ai putea tu actualiza funcţia ca ori să obţină nectar ori
        să facă miere.
      Course 4 Bee Params 8 new_instruction: Oooh, acum există miere de care să ne
        ocupăm! Cum ți-ai putea tu actualiza funcţia ca ori să obţină nectar ori să
        facă miere.
      Course 4 Bee Params 8_instruction: 'Provocare: Acum există și miere de care
        să ne ocupăm. Rescrie funcţia ta să ia atât numărul de unităţi de miere cât
        şi numărul de unităţi de nectar.  Cum ai folosi aceste numere pentru a decide
        ce ar trebui să faci?'
      Course 4 Bee Params Ex_instruction: Încearcă să aduni tot nectarul folosind
        noua funcţie construită de tine.
      Course 4 Binary 1_instruction: Aici este o funcţie care primeşte un şir binar
        de 1 şi 0 şi îndrumă fermierul să se se întoarcă de la stânga la dreapta şi
        de sus în jos, întorcând valoarea pătratelor cu valoarea 0. Rulează codul
        primit pentru a vedea cum fermierii folosesc codul binar pentru a desena o
        imagine.
      Course 4 Binary 2_instruction: 'Ce şir binar poţi relua în buclă de 8 ori pentru
        a desena această imagine? Indicaţie: numărul "1" umple o gaură.'
      Course 4 Binary 3_instruction: Poţi desena acest model prin rularea în buclă
        a unui singur şi binar?
      Course 4 Binary 5 (copy 1)_instruction: Care şir binar, repetat de 10 ori va
        desena această imagine?
      Course 4 Binary 5_instruction: Care şir binar, repetat de 10 ori va desena această
        imagine?
      Course 4 Binary 6 (copy 1)_instruction: Care şir binar, repetat de 10 ori va
        desena această imagine?
      Course 4 Binary 6_instruction: Care şir binar, repetat de 10 ori va desena această
        imagine?
      Course 4 Binary 7_instruction: Care şir binar, repetat de 10 ori va desena această
        imagine?
      Course 4 Binary 8_instruction: Poţi completa cât mai mult din această imagine
        prin rularea în buclă a unui număr de 5 biţi - apoi vei avea nevoie de încă
        un număr de 4 biţi pentru a ajunge în colţul din parta dreapta jos.
      Course 4 EC 1a_instruction: Nici o regulă. Nici un indiciu. Doar provocare!
      Course 4 EC 1b_instruction: Nici o regulă. Nici un indiciu. Doar provocare!
      Course 4 EC 2a_instruction: "** Provocare extremă: ** Nici o regulă. Nici un
        indiciu. Doar provocare!"
      Course 4 EC 2b_instruction: Nici o regulă. Nici un indiciu. Doar provocare!
      Course 4 EC 2c_instruction: Nici o regulă. Nici un indiciu. Doar provocare!
      Course 4 EC 2d_instruction: Nici o regulă. Nici un indiciu. Doar provocare!
      Course 4 EC 3_instruction: 'Utilizează ceea ce ai învățat în cadrul nivelului
        precedent pentru a desena o imagine ca aceasta. Notă: Codul devine mai simplu
        dacă încorporezi parametri. '
      Course 4 EC 3a_instruction: 'Provocare extremă: ** Nici o regulă. Nici un indiciu.
        Doar provocare!'
      Course 4 Maze 1_instruction: Du pasărea furioasă la porc!
      Course 4 Maze 2_instruction: Evită TNT-ul!
      Course 4 Maze 3_instruction: 'Programează pasărea nervoasă să ajungă la purcel. '
      Course 4 Maze 4_instruction: Încearcă blocul "repetă" pentru a folosi mai puține
        blocuri...
      Course 4 Maze 5_instruction: Poți rezolva acest puzzle folosind cel mai mic
        număr de blocuri posibil?
      Course 4 Maze 6_instruction: Poți rezolva acest puzzle folosind cel mai mic
        număr de blocuri posibil?
      Course 4 Play Lab For Loops 2_instruction: De data asta, să încercăm să numărăm
        crescător numerele impare de la 1 la 100.
      Course 4 Play Lab Params 1_instruction: Aici avem o funcţie numită "jump" care
        determină personajul tău să sară 100 pixeli în sus. Foloseşte funcţia "jump"
        pentru a colecta toate steagurile.
      Course 4 Play Lab Params 10_instruction: "Am adăugat o ultimă funcţie pentru
        a o utiliza.\\r\n\\r\nFoloseste comanda \"if\" pentru a-ti programa jocul
        catre functie \"level_up\" dor cand \"player_score\" devine mai mare decat
        un numar.\n\\r\nDe exemplu: \"player_score\" > 6\\r\n\\r\nJoacă şi treci de
        nivelul 3 prin accesarea puzzle-lui următor. "
      Course 4 Play Lab Params 2_instruction: |-
        Acum avem steaguri care sunt prea mari pentru săritura noastră. Haide să folosim ambele săgeți "sus" și "jos" astfel încât să putem avea multiple înălțimi pentru sărituri. \r \r Trebuie să adăugăm un parametru funcției cu numele "înălțime". Săgeata "sus" ar trebui să facă să sară câinele 200 pixeli, iar cea de jos să îl facă să sară doar 100 pixeli.
        \r
        \r
        Indiciu: Va trebui să apeși "modifică" pe funcția pentru săritură si să o modifici astfel încât să folosească parametrul "înălțime".
      Course 4 Play Lab Params 3_instruction: 'Hai să adăugăm alt parametru funcţiei
        "jump" astfel încât să o putem folosi cu alţi actori. Fiecare actor este reprezentat
        de un număr pornind de la unu. Editează funcţia "jump" astfel încât definiţia
        acesteia să includă parametrul "actor". '
      Course 4 Play Lab Params 4_instruction: |-
        Aici este o funcţie numită "patrol."
        \r
        \r
        Editeaz-o pentru a muta pisica în sus cu 400 pixeli şi apoi în jos cu 400 pixeli.
      Course 4 Play Lab Params 5_instruction: Completează parametrul de intrare "actor"
        astfel încât putem apela funcţia "patrol" pentru fiecare dintre actori. Amintiţi-vă,
        actorii corespund cifrelor 1, 2 şi 3.
      Course 4 Play Lab Params 6_instruction: Adauga un alt parametru numit "viteza"
        in functia de "preluare". Incearca sa utilizezi un bloc "seteaza viteza" impreuna
        cu noul parametru "viteza" pentru a ajuta pinguinul sa ia ambele steaguri
        inainte ca alte spirite sa ajunga la unul din ele.
      Course 4 Play Lab Params 7_instruction: |-
        Uită-te la codul furnizat pentru a vedea dacă îţi dai seama ce face fiecare bloc de instrucţiuni. \r
        \r
        Când eşti gata, foloseşte tastele săgeţi pentru a controla câinele şi adună toate steagurile.
      Course 4 Play Lab Params 8_instruction: Foloseşte blocul de instrucţiuni "cand
        personajul atinge" pentru a trimite câinele înapoi în colţul din stânga-sus
        DOAR dacă acesta atinge oricare unul din celelalte personaje.
      Course 4 Play Lab Params 9_instruction: "Aici este jocul nostru dintr-o etapa
        incipienta, dar majoritatea codului este ascuns. Este o functie noua \"inscrie_puncte.\"
        \\r\n\\r\n Editati functia astfel incat paramentrul 'Puncte' sa fie adaugat
        la variabila ''scorul_jucatorului\". \\r\n\\r\nVariabila \"scorul_jucatorului\"
        trebuie sa creasca de fiecare data cand \ncatelul eticheteaza pisica cu placinte,
        si descreste cand pisica prinde cainele.\\r\n\\r\nNota:\nCand ai terminat,
        apasa \"Ruleaza\" pentru a te juca. Cand cainele inscrie 6 puncte, vei trece
        la urmatorul puzzle. "
      Course 4 Play Lab Vars 1_instruction: De data asta nu trebuie să este nevoie
        să scrii niciun cod, doar clic pe "Run" pentru a rula jocul! În acest joc,
        tu eşti câinele care încearcă să adune mai multe steaguri decât pisica. Foloseşte
        tasta săgeată jos pentru a controla câinele. Apăsă "Finish" când doreşti terminarea
        jocului.
      Course 4 Play Lab Vars 2_instruction: Cursa în acest ultim puzzle nu a fost
        foarte corectă! Schimbă variabila "dog_speed" pentru a fi sigur că poţi aduna
        mai multe steaguri decât pisica. Primul care adună 10 steaguri câştigă!
      Course 4 Play Lab Vars 3_instruction: Aici avem un nou tip de joc! Foloseşte
        pentru mutare tastele săgeţi stânga şi dreapta şi pentru a sării tasta săgeată
        sus. Vezi dacă poţi să aduni toate steagurile.
      Course 4 Play Lab Vars 4_instruction: Acum folosim variabila "height" pentru
        a controla cât de sus poate sări câinele. Actualizează variabila "height"
        astfel încât câinele poate sări suficient de sus pentru a ajunge la toate
        steagurile.
      Course 4 Play Lab Vars 5_instruction: 'Hai să construim un joc! Întâi avem nevoie
        de scor. Foloseşte blocul de instrucţiuni "set points to" pentru a seta scorul
        la 10. '
      Course 4 Play Lab Vars 6 (copy 1)_instruction: Super, acum avem propria variabilă
        "score", dar cum o putem face utilă? Ce zici despre adăugarea de puncte variabilei
        tale scor de fiecare dată când tu loveşti adversarul cu o minge de foc? Foloseşte
        evenimentul "when actor 2 touches anything" pentru a declanşa o actualizare
        a scorului tău când mingea ta de foc loveşte pisica. Poţi incrementa scorul
        utilizând instrucţiunea score = score +1. Obţine punctajul până la 10 (din
        1 în 1!) pentru a trece nivelul.
      Course 4 Play Lab Vars 6_instruction: |-
        Foloseste sageata dreapta pentru a arunca placinta.\r
        \r
        In jocul nostru, cum putem inscrie puncte? Adauga 1 punct la variabila puncte atunci cand cainele loveste pisica cu o bucata de placinta. Foloseste evenimentul "cand actorul 2 loveste orice" pentru a updata scorul. Poti sa iti setezi singur variabila prin setarea "puncte = puncte+!". Cresteti scorul pana la 10 (cate un eveniment pe rand!) pentru a trece un level.
      Course 4 Play Lab Vars 7_instruction: Frumos, acum hai să ne asigurăm că acest
        joc nu este prea uşor - de fiecare dată când câinele (actor 1) este lovit
        de un sandvich, tu ar trebui să pierzi un punct. Începe cu 10 puncte astfel
        încât să nu fie prea greu. Lasă scorul să scadă de la 10 la 0 pentru a schimba
        nivelul.
      Course 4 Play Lab Vars 8 (copy 1)_instruction: Bine, un ultim lucru pentru acest
        joc - setaţi-l astfel încât jucătorul poate câştiga (sau pierde). Foloseşte
        o buclă fără sfârşit pentru a verifica valoarea scorului - dacă scorul ajunge
        mai mare de 20, faceți ca inamicul să dispară. Dacă scorul ajunge mai mic
        decât 0, faceți să dispară jucătorul. Daţi clic pe "Finish" când jocul merge
        cum ţi-ai dorit.
      Course 4 Play Lab Vars 8_instruction: Hai să setăm acest joc astfel încât câinele
        poate câştiga (sau pierde). Foloseşte o buclă fără sfârşit pentru a verifica
        valoarea scorului - dacă scorul ajunge mai mare decât 20, faceţi adversarul
        (pisica) să dispară. Dacă scorul ajunge mai mic decât 0, faceţi jucătorul
        (câinele) să dispară. Daţi clic pe "Finish" când jocul merge aşa cum doriţi.
      Course 4 Play Lab Vars 9_instruction: 'Joc liber! Aici avem toate variabilele
        cu care ne-am jucat în acest nivel şi chiar câteva în plus în caz că aveţi
        nevoie. Faceţi un joc sau o poveste utilizând oricare dintre aceste variabile.
        Indicaţie: derulaţi în jos pentru a vedea toate comenzile din spaţiul de lucru.'
      Course 4 Play Lab Vars_instruction: Bine, un ultim lucru pentru acest joc -
        setaţi-l astfel încât jucătorul poate câştiga (sau pierde). Foloseşte o buclă
        fără sfârşit pentru a verifica valoarea scorului - dacă scorul ajunge mai
        mare de 20, faceți ca inamicul să dispară. Dacă scorul ajunge mai mic decât
        0, faceți să dispară jucătorul.
      Course 4 Play Labs For Loops 1_instruction: Hai să facem câinele să pronunțe
        fiecare număr de la 1 la 100. Foloseşte o buclă şi un o construcţie de instrucţiuni
        contor pentru a pronunţa variabila contor de fiecare dată când bucla rulează.
      Course 4 Play Labs For Loops 2_instruction: De data aceasta, sa ajutam pisica
        Olive sa numere crescator numerele impare de la 1 la 101.
      Course 4 Play Labs For Loops 3_instruction: Dacă contorizăm folosind numere
        mai mari, obținem un număr mai mare în același timp. Încearcă să realizezi
        contorul câinelui de la 10 până la 1000, crescând cu 10 o dată.
      Course 4 Play Labs For Loops 4_instruction: Schimbarea incrementului poate fi
        de ajutor, dar noi numărăm încă liniar (fiecare număr reprezintă aceeaşi distanţă
        față de ultima) Ce se întâmplă dacă am vrut să număr în mod exponenţial? Fără
        a schimba setările în această buclă, poți să numeri 1, 4, 9, 16, 25... (numărător
        la pătrat)?
      Course 4 Play Labs For Loops 4a_instruction: "Acum, haieți să combinăm variabilele
        din Etapa 7 cu variabila ta \"numărător\" pentru a face ceva magic.   \\r
        \\r \nÎn acest puzzle, câinele va număra de la 0 la 1000 prin \"increment\".
        \ Setează variabila \"increment\" la 10 la începutul codului tău pentru a
        vedea ce se întâmplă."
      Course 4 Play Labs For Loops 5_instruction: În ultima etapă am numărat pătratul
        fiecărui număr. Încearcă să schimbi "numărător ^ 2" cu "numărător ^ 3" pentru
        a număra cubul fiecărui număr (1, 8, 27, 64, 125, 216, 343...)
      Course 4 Play Labs For Loops 5a_instruction: "În acest puzzle, Câinele va fi
        gardianul timpului tău.\\r \\r \nCâinele va cronometra de la 0 la 30 prin
        \"increment\".  Variabila \"increment\" va începe cu o valoare de 1.\\r \\r
        \nPoți face în așa fel încât, de fiecare dată când dai clic pe câine, incrementul
        să crească cu 2?  Fă clic pe săgeata spre înainte pentru a rula bucla \"pentru\".\\r
        \\r \nRulează bucla de doua ori, făcând clic pe câine înainte de fiecare dintre
        ele."
      Course 4 Play Labs For Loops 6_instruction: Poate îți amintești că un număr
        prim este orice număr întreg care este divizibil cu sine şi 1. Utilizează
        funcţia de "este_prim" să numească doar numere prime de la 1 la 100.
      Course 4 Play Labs For Loops 6a_instruction: "Câinele va continua să contorizeze
        timpul numarănd cu ajutorul buclei noastre \"pentru\" prin \"increment\",
        dar, de data aceasta, vom adăuga în combinație Expertul.  Poți schimba codul
        astfel încât \"incrementul\" să crească cu doi de fiecare dată când se face
        clic pe Expert?\\r \\r \nAi grijă!  Expertul se mişcă repede!"
      Course 4 Play Labs For Loops 7_instruction: Ai putea folosi o buclă "pentru"
        ca să mă ajuți să pronunț secvența 1, 4, 7, 10, 13, 16, 22, 25?
      Course 4 Play Labs For Loops 7a_instruction: |-
        Acum ajungem unde trebuie!  Ce-ar fi dacă am începe să numărăm de câte ori putem face clic pe Expert înainte ca acest Caine să ajungă la 30? \r
        \r
        Finalizează adăugând blocuri Expertului astfel încât, de câte ori se face clic pe el, variabila "clicuit" crește cu câte unu. Poți ignora pentru moment "increment"-ul.\r
        \r
        Câinele va începe să cronometreze când faci clic pe "Rulează".
      Course 4 Play Labs For Loops 8_instruction: Ce buclă "pentru" m-ar face pe mine
        să spun 19, 27, 35, 43, 51?
      Course 4 Play Labs For Loops 8a_instruction: "Pentru a finaliza jocul nostru,
        trebuie să aducem înapoi variabila \"increment\"!    Hai s-o legăm de nivelul
        de joc.\\r\n\\r\n1) Ține evidența numărului de câte ori se face clic pe Expert.\\r
        \n2) Dacă expertul este clicuit de cel puţin 10 ori înainte ca și Câinele
        să numere la 30, ridică \"increment\"-ul cu 1 şi începe din nou.\\r 3) dacă
        expertul nu este apăsat cu clic de cel puţin 10 ori, jocul s-a terminat."
      Course 4 Playlab For Loop Freeplay_instruction: 'Freeplay: Folosește tot ce
        ai invațat până acum pentru a crea un joc ce include o buclă "for"!'
      Course 4 Playlab For Loops 4b_instruction: |-
        Acum cele două personaje se vor întrece! \r
        \r
        Fiecare dintre ele se va mișca un anumit număr de pași o dată (în funcție de counter). Counterul fiecaruia va avea valori diferite datorită buclei "for" \r
        \r
        Poți schimba incrementarea, într-una dintre bucle, astfel încât cursa să se termine la egalitate?
      Course 4 Playlab For Loops 5b_instruction: Ajustați intervalul pe acestea 'pentru'
        bucle, astfel încât cele două personaje să termine în exact același loc.
      Course 4 Playlab For Loops 6b_instruction: "Alterează bucla \"for\" pentru a
        crea un joc ce ți-ar face plăcere să îl joci!\\r\n\\r\nApasă \"Run\" si dă
        clic de patru ori pe Madame Unicorn pentru a câștiga. "
      Course 4 SCF 1_instruction: Utilizează funcţiile sugerate pentru a desena patru
        rânduri de hexagoane. Observi cum rândurile noastre pare sunt întoarse către
        dreapta?
      Course 4 SCF 1a_instruction: Îţi poți da seama cum să colectezi tot acest nectar
        cu cât mai puţine blocuri posibil?
      Course 4 SCF 1b_instruction: Îţi poți da seama cum să colectezi tot acest nectar
        cu cât mai puţine blocuri posibil?
      Course 4 SCF 2_instruction: 'Utilizează ceea ce ai învățat în cadrul nivelului
        precedent pentru a desena o imagine ca aceasta. Notă: Codul devine mai simplu
        dacă încorporezi parametri. '
      Course 4 SCF 3 Fail 1_instruction: Îți poți da seama cum să...
      Course 4 SCF 3 Fail 2_instruction: Îți poți da seama cum să...
      Course 4 SCF 3_instruction: 'Utilizează ceea ce ai învățat în cadrul nivelului
        precedent pentru a desena o imagine ca aceasta. Notă: Codul devine mai simplu
        dacă încorporezi parametri. '
      Course 4 SCFL 1_instruction: Rezolvă acest puzzle folosind cât mai puține blocuri
        posibil.
      Course 4 SCFL 1a_instruction: Poți să-l duci pe Skrat la ghinda lui folosind
        cât mai puține blocuri posibil?
      Course 4 SCFL 1b_instruction: Poți să-l duci pe Skrat la ghinda lui folosind
        cât mai puține blocuri posibil?
      Course 4 SCFL 2_instruction: Rezolvă acest puzzle folosind cât mai puține blocuri
        posibil.
      Course 4 SCFL 3_instruction: Îți poți da seama cum să re-creezi acest desen?
      Course 4 SCFL 4_instruction: Îți poți da seama cum să re-creezi acest desen?
      Course 4 SCFL 5_instruction: Îți poți da seama cum să re-creezi acest desen?
      Course 4 SCFL 6_instruction: Îţi poți da seama cum să re-creezi acest desen
        cu o singură buclă?
      Course 4 SCFL 7_instruction: Artistul vrea să prindă nişte valuri! Îţi poți
        da seama cum să re-creezi acest desen?
      Course 4 SCFP 1_instruction: Creează o funcție cu parametri care permite artistului
        să facă salturi cu x pixeli înapoi și înainte, precum și în sus și în jos
        cu y pixeli (folosind numere pozitive și negative).
      Course 4 SCV 1_instruction: Click aici pentru a vedea instrucţiunile din nou.
      Course 4 SCV 2_instruction: Click aici pentru a vedea instrucţiunile din nou.
      Course 4 SCV 3_instruction: Acum un joc al etichetelor! Prinde pisica pentru
        a lua 2 puncte. Pinde pinguinul si  faci 3 puncte. Strangeti 10 puncte pentru
        a castiga!\r Ai grija, cand pisica si pinguinul se intalnesc, iau punctele
        inapoi. \r\rAdauga blocurile necesare pentru a face jocul sa mearga asa cum
        e explicat. Cum il vei face pe caine sa se miste in toate directiile folosing
        sagetile? Cum vei adauga puncte cand cainele prinde pisica sau pinguinul?
        Cum vei sustrage puncte cand pisica si pinguinul se ating?
      Course 4 SCV 4_instruction: Rezolva acest puzzle cu cel mai mic număr de blocuri
        posibil.
      Course 4 SCV 5_instruction: Rezolva acest puzzle cu cel mai mic număr de blocuri
        posibil.
      Course 4 SCV 6_instruction: Click aici pentru a vedea instrucţiunile din nou.
      Course 4 SCVP 1_instruction: Creează o funcție cu parametri care permite artistului
        să facă salturi cu x pixeli înapoi și înainte, precum și în sus și în jos
        cu y pixeli (folosind numere pozitive și negative).
      Course 4 Variables Assessment_instruction: Poţi crea această imagine folosind
        o variabilă pentru laturi? Fiecare linie trebuie să aibe 50 de pixeli lungime.
      Course1BeePuzzle12_instruction: Get three nectars and then make two honey
      Course1MazeAssessment1_instruction: |-
        This is a test!\r
        Move one way, then
        another to get me to the pig
      Course1MazeAssessment2_instruction: |-
        This is a test!\r
        Move one way, then
        another to get me to the pig.
      CourseF_PlayLab_vars1_instruction: "To play this game, you don't have to write\nany
        code, just hit \"Run\"! "
      CourseF_PlayLab_vars10_instruction: |-
        Free Play time! Here are all of the variables
        we've played with so far in this stage, as well as a few more in case you
        want them. \r
        \r
        Notice that there are now so many blocks in our toolbox
        that they need to be organized!  Here, we've put each piece into an appropriate
        category.  Take some time to explore everything that is available. When you're
        done browsing, make a game or story using repeats, variables, and events.  \r
        \r
        Hint:
        scroll down to see all the commands in the workspace.
      CourseF_PlayLab_vars2_instruction: |-
        The race in that last puzzle wasn't very
        fair! Change the `dog_speed` variable to make sure you can collect more flags
        than Cat. The first to collect 10 flags wins!
      CourseF_PlayLab_vars3_instruction: Aici avem un nou tip de joc! Foloseşte pentru
        mutare tastele săgeţi stânga şi dreapta şi pentru a sării tasta săgeată sus.
        Vezi dacă poţi să aduni toate steagurile.
      CourseF_PlayLab_vars4_instruction: Acum folosim variabila "height" pentru a
        controla cât de sus poate sări câinele. Actualizează variabila "height" astfel
        încât câinele poate sări suficient de sus pentru a ajunge la toate steagurile.
      CourseF_PlayLab_vars5_instruction: 'Hai să construim un joc! Întâi avem nevoie
        de scor. Foloseşte blocul de instrucţiuni "set points to" pentru a seta scorul
        la 10. '
      CourseF_PlayLab_vars6_instruction: |-
        Foloseste sageata dreapta pentru a arunca placinta.\r
        \r
        In jocul nostru, cum putem inscrie puncte? Adauga 1 punct la variabila puncte atunci cand cainele loveste pisica cu o bucata de placinta. Foloseste evenimentul "cand actorul 2 loveste orice" pentru a updata scorul. Poti sa iti setezi singur variabila prin setarea "puncte = puncte+!". Cresteti scorul pana la 10 (cate un eveniment pe rand!) pentru a trece un level.
      CourseF_PlayLab_vars7_instruction: |-
        Foloseste sageata dreapta pentru a arunca placinta.\r
        \r
        In jocul nostru, cum putem inscrie puncte? Adauga 1 punct la variabila puncte atunci cand cainele loveste pisica cu o bucata de placinta. Foloseste evenimentul "cand actorul 2 loveste orice" pentru a updata scorul. Poti sa iti setezi singur variabila prin setarea "puncte = puncte+!". Cresteti scorul pana la 10 (cate un eveniment pe rand!) pentru a trece un level.
      CourseF_PlayLab_vars8_instruction: |-
        Foloseste sageata dreapta pentru a arunca placinta.\r
        \r
        In jocul nostru, cum putem inscrie puncte? Adauga 1 punct la variabila puncte atunci cand cainele loveste pisica cu o bucata de placinta. Foloseste evenimentul "cand actorul 2 loveste orice" pentru a updata scorul. Poti sa iti setezi singur variabila prin setarea "puncte = puncte+!". Cresteti scorul pana la 10 (cate un eveniment pe rand!) pentru a trece un level.
      CourseF_PlayLab_vars9_instruction: |-
        Nice, now let's make sure this game isn't
        too easy to play. Any time Dog (actor 1) gets hit by a sandwich from Cat (actor
        2), you should lose a point. Start with 10 points so it's not too hard. Let
        your score drop down from 10 to 0 to pass the level.
      Crack Random Substitution_instruction: Instrucţiuni
      Crack a Caesar Cipher_instruction: Instrucţiuni
      D_Frozen_nested3_instruction: Let's spin that line of shapes around!
      D_Frozen_nested4_instruction: Time to layer those shapes!
      D_Frozen_nested5_instruction: Play with the snowflakes!
      D_Frozen_nested6_instruction: |-
        Draw a stair-step pattern that uses turns between
        75 and 105 degrees.
      D_Frozen_nested7_instruction: |-
        Now, turn around 180 degrees and draw the stair
        pattern again!
      D_Frozen_nested8_instruction: Spin that shape around 5 or 6 times in a circle.
      D_Frozen_nested9_instruction: |-
        Try playing around with what you've created.
        Draw whatever you like!\r
        - What happens if you use two different angles
        in your stair step pattern?\r
        - What happens if you make your diamond pattern
        longer or shorter?\r
        - What does it look like to draw two snowflakes on top
        of one another?
      ECSPD Binary Odometer_instruction: |-
        This is another resource you could use
        with your students.
      Eval Booleans 1_instruction: |-
        Boolean operators (like >, <, =) allow us to
        compare different values, returning either true or false. Click "Run" to
        see how this expression evaluates.
      Eval Booleans 2_instruction: |-
        Can you set the values so that this expression
        evaluates as true?
      Eval Booleans 3_instruction: |-
        The string-length function returns the number
        of characters in a string (including spaces!) - make this code evaluate to
        true.
      Eval Booleans 4_instruction: |-
        Here's an Evaluation Block called AND - it returns
        true if both of its parameters are true, otherwise it returns false. Edit
        the x variable so that this expression returns true.
      Eval Booleans 5_instruction: |-
        This OR block returns true if either of its parameters
        is true. Otherwise, if both parameters are false it will return false. Set
        the y variable to a value that will cause this expression to return false.
      Eval Booleans 6_instruction: |-
        Here's one more boolean block called NOT. This
        block flips true to false, or false to true. If you wrap this block of code
        in a NOT block, it should return true (because we are asking if the two expressions
        do NOT produce equal values).
      Eval Booleans Free Play_instruction: |-
        Free Play: Try out some creations of
        your own using Booleans.
      Eval Booleans_instruction: |-
        Booleans allow us to compare different values,
        returning "true" if the are equal, or "false" if they are not. What do
        you think this code will evaluate to?
      Eval Cond 1_instruction: |-
        The cond block checks the boolean expressions in
        the left column, and as soon as it finds one that returns "true" it runs
        the corresponding code on the right. If none of the expressions evaluate to
        "true," it runs the bottom block. Update the "temperature" variable so
        that this block returns "It's just right."
      Eval Cond 2 (copy 1)_instruction: |-
        This condition returns a different shape
        based on the value of the "sides" variable - change the value of "sides"
        so that the conditional returns a triangle.
      Eval Cond 2_instruction: |-
        This condition returns a different shape based on
        the value of the "sides" variable - change the value of "sides" so that
        the conditional returns a triangle.
      Eval Cond 3 (copy 1)_instruction: |-
        Can you write a conditional that checks
        the variable "age" and returns "Old enough to vote and drive" if age >
        17, "Old enough to drive" if age is > 15, and "Can't drive or vote" if
        neither conditions is true. Hint: The first condition to return "true" wins
        - make sure you put your conditions in the right order.
      Eval Cond 3_instruction: |-
        Can you write a conditional that checks the variable
        "age" and returns "Old enough to vote and drive" if age > 17, "Old enough
        to drive" if age is > 15, and "Can't drive or vote" if neither conditions
        is true. Hint: The first condition to return "true" wins - make sure you
        put your conditions in the right order.
      Eval Cond 4_instruction: |-
        We can use the string=? function to make conditionals
        that respond to text input. Here's a function called green shape that takes
        a string for the type of shape. Complete the conditions so that the correct
        solid green shape is returned when the function is run with "circle", "triangle",
        "square", or "rectangle".
      Eval Cond 5_instruction: |-
        Here's a similar function red shape with an additional
        variable for size. Complete the conditionals so the correct solid red image
        of a given size is drawn for "circle", "triangle", and "star".
      Eval Cond 6_instruction: |-
        Write a function called food-critic, which takes
        in the name of a food and produces a String that says how you feel about that
        food. For example, (food-critic “pizza”) might evaluate to “delicious”, but
        (food-critic “rotten eggs”) might evaluate to “gross!”. Choose at least two
        foods to review, but you can you write more if you like!  Don’t forget to
        add an “else” clause!\r
        One example - and part of the definition -  has already
        been done for you!
      Eval Cond 7_instruction: |
        Free Play: Write a function called green-shape, which
        takes in the name of a shape and produces a solid green shape. Your function
        should work with at least “circle”, “star” and “rectangle”, but you can add
        other shapes if you like. You can choose the size of each shape. Don’t forget
        to add an “else” clause!\r
        One example - and part of the definition -  has
        already been done for you!\r
      Eval Cond 8_instruction: |
        Free Play: Suppose you want to own a car at 21, or
        have your own business by 30. Write a function called life-goals, which takes
        in an age and produces a string that describes your life goals by then. Don’t
        forget to add an “else” clause!\r
      Eval Contracts 1_instruction: |-
        Use the "star" function to produce a red star
        with a 60 pixel radius
      Eval Contracts 10A_instruction: |-
        Alright let's complete this puzzle with a
        Green Square that is 175 pixels in size.
      Eval Contracts 11A_instruction: |-
        Can you complete this puzzle to read "Hello
        World" in the banner?
      Eval Contracts 2_instruction: |-
        Check out the "rotate" function - can you
        use it to rotate this 90 pixel green square by 45 degrees?
      Eval Contracts 3_instruction: |-
        Try using the "text" function to write this
        teal text at size 40.
      Eval Contracts 4 A_instruction: |-
        The "scale" function returns an image that
        is scaled either larger or smaller than the input image. Try scaling this
        circle by a factor of 10 - how is the resulting image different than if you'd
        just made a circle of that size in the first place?
      Eval Contracts 4_instruction: |-
        The scale function returns an image that is
        either larger or smaller than the input image. Try scaling this circle by
        a factor of 10. How is the returned image different than if you'd just made
        a circle of that size in the first place?
      Eval Contracts 8A_instruction: |-
        Can you complete this puzzle? The big-triangle
        is 200 pixels in size and purple?
      Eval Contracts A_instruction: |-
        Use the star function to produce a solid red
        star with a 60 pixel radius
      Eval Contracts C_instruction: |-
        Check out the rotate function - can you use
        it to rotate this 90 pixel green square by 45 degrees?
      Eval Contracts E_instruction: |-
        Try using the text function to write "Hello,
        world!" in teal at size 40.
      Eval Contracts shrink_instruction: "Can you complete this image using the \"shrink\"\nfunction
        block? The radius is 20. "
      Eval Define Funcs 1_instruction: |-
        Here's a new function called green-triangle
        that takes a single Number for size and produces a green triangle. Use the
        new function to create a 125 pixel green triangle.
      Eval Define Funcs 2_instruction: |-
        Let's look inside that green-triangle function
        to see how it works. Can you modify it so that the green-triangle function
        always draws outlined green triangles?
      Eval Define Funcs 3_instruction: |-
        Here's the start of another new function
        called purple-circle with a domain of one Number (the radius) and a range
        of Image. The body of the function is broken though - fix it and then make
        a purple circle with 150 pixel radius
      Eval Define Funcs 4_instruction: |-
        Create a new function called aqua-star that
        has a Domain of a single Number for radius and returns an aqua star of the
        given radius. Run your new function with a radius of 75.
      Eval Define Funcs 5_instruction: |-
        Let's use that aqua-star function to make
        a row of different sized stars. From left to right, the stars should have
        radii of 25, 50, and 75.
      Eval Define Funcs Test_instruction: |-
        Here's the start of another new function
        called purple-circle with a domain of one Number (the radius) and a range
        of Image. The body of the function is broken though - fix it and then make
        a purple circle with 150 pixel radius
      Eval Defining Vars Free Play 1_instruction: |-
        Free Play: We've provided a function
        that fills your screen with my-image. Change my-image to see what patterns
        you can make.
      Eval Design Recipe .1_instruction: |-
        Here's a Design Recipe for a function
        called square-circle with domain Number String and range Image. Click Edit
        to write the function definition (you will see two examples provided).
      Eval Design Recipe 1 (copy 1)_instruction: |-
        We're going to write a function
        that draws a solid rectangle of any color that is twice wide as it is high.
        Start with an example - draw a solid green rectangle that has a height on
        100 pixels.
      Eval Design Recipe 1_instruction: |-
        Alright, now given the Contract wide-rect:
        Number String -> Image, write an example - draw a solid green rectangle that
        has a height of 100 pixels.
      Eval Design Recipe 2 (copy 1)_instruction: |-
        Let's do one more example before
        writing the function definition - this time draw a solid red rectangle with
        a height of 75 pixels.
      Eval Design Recipe 2_instruction: |-
        Let's do one more example before writing
        the function definition - this time draw a solid red rectangle with a height
        of 75 pixels.
      Eval Design Recipe 3_instruction: |-
        The Design Recipe for wide-rect already
        has a contract and one example. Can you write a second example and then complete
        the definition? The wide-rect function should produce a rectangle of given
        color that is twice as wide as it is high.
      Eval Design Recipe 4_instruction: |-
        Use the Design Recipe to create a function
        starburst. When given a number of points and an outer radius, starburst returns
        a yellow radial star with given points, and an inner radius that is half the
        outer radius.
      Eval Design Recipe 5_instruction: |-
        Using the Design Recipe, write a function
        striped-flag that takes two colors and produces a flag that is 250 pixels
        wide, 150 pixels tall, with three even horizontal stripes of given colors,
        in the order color2, color1, color2.
      Eval Design Recipe 6_instruction: |-
        Write a function large-polygon that should
        output a solid polygon of given sides and color that takes up most of the
        window, regardless of the number of sides. To make sure that the polygon doesn't
        get too large as you increase the number of sides, side length should be inversely
        proportional to side number, with a length of (800/sides).
      Eval Design Recipe Free Play_instruction: |-
        Free Play: Use the Design Recipe
        to create some functions of your own design
      Eval Free Play_instruction: 'Free Play: Make art with code!'
      Eval Strings Images .1_instruction: |-
        So far we've only dealt with a single
        type of data, Numbers. Another type of data is a String, which is any combination
        of letters, numbers, or other characters wrapped in quotation marks. Run the
        String "Hello, world!" and see what happens.
      Eval Strings Images .2_instruction: |-
        The string-append function takes two Strings
        and returns a single combined String. Add a String "Universe" to the second
        argument of string-append.
      Eval Strings Images 1_instruction: |-
        The third type of data we're going to
        use is an Image. This star function takes in a Number and two Strings, and
        it evaluates to an Image. Use this function to make a solid red star with
        radius of 100.
      Eval Strings Images 2_instruction: |-
        Free Play: Every Evaluation Block is color-coded
        to let you know which data type it returns and which types it needs for its
        parameters. The last parameter of the triangle function takes a String that
        controls its color - try some different colors to see what works.
      Eval Strings Images 3_instruction: |-
        Some functions can only take a specific
        set of Strings, such as the second argument of this circle function, which
        controls its style. Draw this orange outline circle using the special String
        block with a dropdown to make sure you only use valid styles.
      Eval Strings Images 4_instruction: |-
        Try using the rectangle block to draw this
        solid, red rectangle - it is 175 pixels wide and 100 pixels tall.
      Eval Strings Images 5_instruction: |-
        Try using this new Evaluation Block called
        overlay to place a 100 pixel white triangle on top of a 200 pixel red circle.
      Eval Strings Images 6_instruction: |-
        Use the overlay block to place a 75 pixel
        radius yellow star on top of a 150 pixel long blue square.
      Eval Strings Images 7_instruction: |-
        The offset block lets you move an image
        relative to where it would normally be placed. Use this block to offset the
        square by 100 pixels on the y-axis.
      Eval Strings Images 8_instruction: |-
        Here's a different kind of star block
        - it's called radial-star and it allows you to draw stars with any number
        of points! Use it to create a 7 point solid orange star with an inner radius
        of 75 pixels and an outer radius of 175 pixels.
      Eval Strings Images Free Play_instruction: |-
        Free Play: Explore the blocks available
        to create something interesting. Make sure to share your favorite creations.
      Farmer for Authored Hint testing_instruction: |-
        Wow, I found a really deep hole!
        I don't know how many shovelfuls of dirt it needs.  Can you write a program
        that fills it until the ground is even?  Hint:  Try using the while loop this
        time.
      Farmer for TTS testing_instruction: |-
        Wow, I found a really deep hole! I don't
        know how many shovelfuls of dirt it needs.  Can you write a program that fills
        it until the ground is even?  Hint:  Try using the while loop this time.
      Finalize Your Chaser Game v.1_instruction: |-
        Introducing the setPosition command!
        Replace the moveTo in the button-click event handler to use setPosition to
        move the button itself to a random location when it's clicked.
      Find the Wizard_instruction: |-
        Build whatever you want. This is an example of
        a number-guessing game!
      Find the Wizard_2018_instruction: |-
        Build whatever you want. This is an example
        of a number-guessing game!
      Food Fight!_instruction: "We've added one last function for you. \\r\n\\r\nUse\nan
        \"if\" statement to program your game to call the \"level_up\" function\nonly
        when \"player_score\" becomes greater than a certain number.\\r\n\\r\nFor\nexample:
        \"player_score\" > 6\\r\n\\r\nPlay the game, and make it to level 3\nto move
        to the next puzzle. "
      Food Fight_instruction: |-
        You can make whatever you want in play lab! This is
        an example of a game you can make in play lab.
      FoodFight_instruction: This is an example of a game you can make in play lab.
      FoodFight_2018_instruction: |-
        This is an example of a game you can make in play
        lab.
      Frequency Analysis_instruction: Test
      Function intro Ryan_instruction: |-
        Use the `build bridge` function twice to
        make a path to the Redstone Torch.
      GLJ Drag and fall_instruction: |-
        This Corgi has been a good boy! Drag this carrot
        to him as a special treat.
      GLJ Dragity_instruction: |-
        This Corgi has been a good boy! Drag this carrot
        to him as a special treat.
      GLJ Flappy2_instruction: Click to flap - don't touch the ground!
      GLJr_Behavior_1_instruction: |-
        On your worksheet, write what you think the dog
        will do when you click "Run."
      GLJr_Behavior_2_instruction: |-
        Now you have some new blocks! Try them out and
        see how they work. On your worksheet, write down which ones you tried, and
        what they do.
      GLJr_Behavior_5_instruction: |-
        Now we have two sprites! Use behaviors to make
        the dog jittery and make the cat wander
      GLJr_Behavior_6_instruction: |-
        Let's try some more behaviors - make the dog
        run up and make the cat run right.
      GLJr_Forever_1_instruction: |-
        On your worksheet, write what you think the dog
        will do when you click "Run."
      GLJr_Forever_2_instruction: |-
        Now you have some new blocks! Try them out and
        see how they work. On your worksheet, write down which ones you tried, and
        what they do.
      GLJr_Forever_5_instruction: |-
        Now we have two sprites! Use a loop to make the
        dog jittery and make the cat wander
      'Game Lab Workshop: Random_instruction': |-
        Pick a shape block and use calls
        to randomNumber() in place of one or more of the parameters. Maker sure you
        run it a few times so you can see the effect of randomization.
      Geometric Pattern_instruction: |-
        Project Idea: Create a pattern using geometric
        ideas like shapes. This requires persistence and planning!
      Geometric Sun_instruction: |-
        Project Idea: Create a pattern using geometric
        ideas like shapes. This requires persistence and planning!
      Geometric Sun_2018_instruction: |-
        Project Idea: Create a pattern using geometric
        ideas like shapes. This requires persistence and planning!
      Get To The Goal_instruction: |-
        Build whatever you want. This is an example of
        a number-guessing game!
      'Grade 4 Example PlayLab Project #1_instruction': |-
        Take a look at this project.  Do
        you see how it was made?
      'Grade 4 Example PlayLab Project #2_instruction': |-
        Take a look at this project.  Do
        you see how it was made?
      Guess The Number 2_instruction: |-
        Build whatever you want. This is an example
        of a number-guessing game!
      Guess The Number_instruction: |-
        Build whatever you want. This is an example
        of a number-guessing game!
      Guess The Number_2018_instruction: |-
        Build whatever you want. This is an example
        of a number-guessing game!
      Harvester Test_instruction: |-
        It's harvest time! But I forgot what crop I planted
        at which tile. Please help me harvest all my crops, no matter how they were
        originally planted!
      Harvesting_instruction: |-
        Uh oh, I lost my map and can't remember what I planted.
        Every sprout could grow up to be corn, beans, or pumpkins. Can you write some
        code to pick all the crops, no matter what they are?
      Infinity_catch_instruction: Poţi s-o faci pe Elsa ("actorul 2") să o ajungă
        pe Anna folosind tastele săgeată?
      Infinity_finale_instruction: Creează orice vrei tu şi distribuie-l/-o!
      Infinity_move_collide_instruction: Hiro este "actorul 1".  Mută-l la dreapta,
        lângă Baymax și emite un sunet atunci când aceștia se ating.
      Infinity_move_directions_instruction: Baymax este "actorul 2".  Adaugă blocuri
        "Mută" și apoi mută-l pe Baymax folosind săgeţile.  Fă-l să atingă celelate
        două alte personaje.
      Infinity_move_right_instruction: Hiro este "actorul 1".  Utilizează blocul "Mută"
        pentru a-l muta pe Hiro la dreapta ca să-l atingă pe Baymax.
      Infinity_repeat_instruction: Utilizează un bloc "repetă pentru totdeauna" pentru
        a o face pe Anna să se mute în sus şi în jos 400 de pixeli.
      Infinity_say_instruction: Fă-o pe Anna să spună "Salutare." utilizând blocul
        "Spune".
      Infinity_shoot_instruction: Baymax este "actorul 2".  Fă-l pe Baymax să arunce
        o rachetă la Hiro.
      Infinity_shoot_directions_instruction: Hiro este "actorul 3".  Fă-l pe Hiro
        să arunce un proiectil la fiecare dintre cele patru personaje.  Aşteaptă o
        secundă între fiecare aruncare.
      Infinity_test_instruction: This is a test Infinity level.
      Infinity_touch_faster_instruction: Atinge și mai mulți fulgi de zăpadă!
      Infinity_touch_four_instruction: Mut-o pe Anna sus, jos stânga şi dreapta pentru
        a atinge fiecare dintre cei patru fulgi de zăpadă.
      Infinity_touch_score_instruction: Fă-o pe Anna să marcheze un punct atunci când
        ea atinge un fulg de nea.  Apoi fă clic pe "Rulează" şi dirijeaz-o să atingă
        o dată fiecare fulg de nea.
      Inspirational Artwork_instruction: "Free Play Inspiration: You've now learned\neverything
        you need to know to make a pattern like this! If this picture inspires\nyou,
        try to make something similar. Otherwise, create something all your own.\\r\n\n\\r\nWant
        to know how our inspiration pattern was made? "
      InspirationalArtwork_instruction: |-
        If this picture inspires you, try to make
        something similar. Otherwise, create something all your own.
      InspirationalArtwork_2018_instruction: |-
        If this picture inspires you, try to
        make something similar. Otherwise, create something all your own.
      'Internet Simulator: Broadcast Mode_instruction': |
        Now use the Internet Simulator
        to send the battleship moves. For setup, join a Room with your group, and
        add ships to your paper board for each opponent. When playing, all communication
        must be done through the tool, so no talking, but have fun!\r
      'Internet Simulator: Broadcast_instruction': |
        Now use the Internet Simulator
        to send the battleship moves. For setup, join a Room with your group, and
        add ships to your paper board for each opponent. When playing, all communication
        must be done through the tool, so no talking, but have fun!\r
      'Internet Simulator: Broadcast_2018_instruction': |
        Now use the Internet Simulator
        to send the battleship moves. For setup, join a Room with your group, and
        add ships to your paper board for each opponent. When playing, all communication
        must be done through the tool, so no talking, but have fun!\r
      'Internet Simulator: DNS Mode_instruction': |-
        In this version of the Internet
        Simulator, a Domain Name System (DNS) is provided for you and knows the IP
        addresses of all connected computers. Send a message in the form GET [hostname]
        to the DNS service at address <yourRouterNumber>.15 to get a student's address.
      'Internet Simulator: DNS_instruction': |-
        In this version of the Internet Simulator,
        a Domain Name System (DNS) is provided for you and knows the IP addresses
        of all connected computers. Send a message in the form GET [hostname] to the
        DNS service at address <yourRouterNumber>.15 to get a student's address.
      'Internet Simulator: DNS_2018_instruction': |-
        In this version of the Internet
        Simulator, a Domain Name System (DNS) is provided for you and knows the IP
        addresses of all connected computers. Send a message in the form GET [hostname]
        to the DNS service at address <yourRouterNumber>.15 to get a student's address.
      'Internet Simulator: Packets_instruction': |-
        Develop a Protocol for Reliably
        Sending a Message.\r
        \r
        Constraints:\r
        - Packets may contain only 8 characters\r
        -
        Packets may drop with small probability\r
        - Packets may not arrive in order
      'Internet Simulator: Packets_2018_instruction': |-
        Develop a Protocol for Reliably
        Sending a Message.\r
        \r
        Constraints:\r
        - Packets may contain only 8 characters\r
        -
        Packets may drop with small probability\r
        - Packets may not arrive in order
      'Internet Simulator: Routers_instruction': |-
        Send messages with your classmates
        (Click to see full instructions)
      'Internet Simulator: Routers_2018_instruction': |-
        Send messages with your classmates
        (Click to see full instructions)
      'Internet Simulator: Sending Binary Messages 1_instruction': "Develop, document,\nand
        test a protocol that allows you to use Internet Simulator to relay a message.\nSee
        the worksheet for more detailed instructions.  "
      'Internet Simulator: Sending Binary Messages_instruction': "Develop, document,\nand
        test a protocol that allows you to use Internet Simulator to relay a message.\nSee
        the worksheet for more detailed instructions.  "
      'Internet Simulator: Sending Binary Messages_2018_instruction': "Develop, document,\nand
        test a protocol that allows you to use Internet Simulator to relay a message.\nSee
        the worksheet for more detailed instructions.  "
      'Internet Simulator: Sending Numbers_instruction': |-
        With your partner, develop
        a protocol or set of rules for communicating a drawing using only bits. See
        the worksheet handed out by your teacher for more detailed instructions!
      'Internet Simulator: Sending Numbers_2018_instruction': |-
        With your partner,
        develop a protocol or set of rules for communicating a drawing using only
        bits. See the worksheet handed out by your teacher for more detailed instructions!
      'Internet Simulator: Sending Text_instruction': |-
        Work with a partner or in
        a small team to develop a protocol that allows you to send formatted text.
        See the worksheet handed out by your teacher for more detailed instructions!
      'Internet Simulator: Sending Text_2018_instruction': |-
        Work with a partner or
        in a small team to develop a protocol that allows you to send formatted text.
        See the worksheet handed out by your teacher for more detailed instructions!
      Just for Testing_instruction: Test instructions
      K-1 Artist 1 Assessment 1_instruction: Desenează o linie scurtă sus şi una lungă
        la dreapta!
      K-1 Artist Loops 1_instruction: Desenează această linie mutând de 4 ori la Est.
      K-1 Artist Loops 2_instruction: Poţi desena aceaşi linie folosind o construţie
        de tip buclă?
      K-1 Artist Loops 3_instruction: Poţi să reiei în construţie de tip buclă aceste
        blocuri de instrucţiuni pentru a desena 6 linii?
      K-1 Artist Loops 4_instruction: Ar putea o buclă să ne ajute să desenăm partea
        de sus a acestui castel?
      K-1 Artist Loops 5_instruction: Ce poți tu bucla de 4 ori ca să desenezi aceste
        scări?
      K-1 Artist Loops 6_instruction: 'Acesta are nevoie de două bucle: una să urce
        scările și una să le coboare.'
      K-1 Artist Loops 7_instruction: Poţi termina acest model folosind două bucle?
      K-1 Artist Loops 8_instruction: Această scară are trepte lungi.
      K-1 Artist Loops 9_instruction: 'Evaluare: Foloseşte o buclă pentru a desena
        scări'
      K-1 Artist Loops Free Play_instruction: Joc liber, desenează ceva distractiv!
      K-1 Artist1 1_instruction: Desenează piciorul bărbatului dintr-o singură linie
      K-1 Artist1 10_instruction: Desenează şi întrerupe pentru a face o linie întreruptă
        către comoara X
      K-1 Artist1 2_instruction: Desenează mustăţile pisicii din două linii!
      K-1 Artist1 3_instruction: Desenează două linii spre est şi două linii spre
        nord pentru a termina casa!
      K-1 Artist1 4_instruction: Desenează linii sus, peste şi jos pentru a completa
        castelul!
      K-1 Artist1 5.5_instruction: Termină al treilea turn al castelului folosind
        linii scurte
      K-1 Artist1 5_instruction: Desenează tulpina acestei flori din două linii!
      K-1 Artist1 6_instruction: Termină imaginea folosind un bloc de instrucţiuni
        jump!
      K-1 Artist1 7_instruction: Foloseşte un bloc de instrucţiuni jump pentru a muta
        fără a desena. Sari sus pentru a desena o linie.
      K-1 Artist1 8_instruction: Desenează linia întreruptă folosind amândouă blocuri
        de instrucţiuni "jump" şi "draw"
      K-1 Artist1 9_instruction: Desenează şi sari pentru a realiza linia întreruptă
      K-1 Artist1 Assessment 1_instruction: Desenează linii scurte şi linii lungi!
      K-1 Artist1 Assessment 2_instruction: Desenează linii întrerupte scurte!
      K-1 Artist2 1_instruction: Desenează un pătrat sub triunghi.
      K-1 Artist2 2_instruction: Sari şi desenează un pătrat lângă casă.
      K-1 Artist2 3_instruction: Desenează un pătrat peste alt pătrat
      K-1 Artist2 4_instruction: Desenează un pătrat pentru a termina podul.
      K-1 Artist2 5_instruction: Desenează un pătrat pentru a termina suporţii podului
      K-1 Artist2 6_instruction: Desenează două pătrate pentru a face un dreptunghi!
      K-1 Artist2 Assessment1_instruction: 'Evaluare: Desenează un pătrat lângă celălalt
        pătrat.'
      K-1 Artist2 Free Draw_instruction: Desenează totul!
      K-1 Artist2_7_instruction: Desenează un dreptunghi pentru a-i oferi costumierului
        sertarul de sus!
      K-1 Bee 1_instruction: Du-mă la floare, ia nectarul, apoi du-mă la fagure şi
        produ miere
      K-1 Bee 10_instruction: Ia patru de nectar şi apoi produ două de miere!
      K-1 Bee 11.5_instruction: Ia patru de nectar pentru a produce patru de miere!
      K-1 Bee 11_instruction: Ia trei de nectar şi apoi produ una de miere
      K-1 Bee 12_instruction: Ia trei de nectar şi apoi produ două de miere!
      K-1 Bee 13_instruction: Ia trei de nectar şi apoi produ una de miere!
      K-1 Bee 14_instruction: Du-mă la nectar, ia-l, du-mă la miere, şi produ miere
      K-1 Bee 15_instruction: Ia două de nectar pentru a produce două de miere!
      K-1 Bee 2_instruction: Du-mă la floare, ia nectarul, apoi du-mă la fagure şi
        produ miere
      K-1 Bee 3_instruction: Du-mă la floare, ia nectarul, apoi du-mă la fagure şi
        produ miere
      K-1 Bee 4_instruction: Ia două de nectar şi apoi produ două de miere!
      K-1 Bee 5_instruction: Ia trei de nectar şi apoi produ trei de miere!
      K-1 Bee 6_instruction: Ia două de nectar şi apoi produ două de miere!
      K-1 Bee 7_instruction: Ia trei de nectar şi apoi produ două de miere!
      K-1 Bee 8_instruction: Ia două de nectar şi apoi produ două de miere!
      K-1 Bee 9_instruction: Ia două de nectar şi apoi produ două de miere!
      K-1 Bee Assessment 1_instruction: Coletează nectar pentru a face miere!
      K-1 Bee Assessment 2_instruction: Coletează nectar pentru a face miere!
      K-1 Bee Loops 1_instruction: Coletează nectarul pentru a face miere!
      K-1 Bee Loops 10_instruction: Folosește buclele pentru a colecta nectarul, mierea
        şi pentru mutări!
      K-1 Bee Loops 11_instruction: 'Evaluare: Folosiţi buclele pentru a lua nectarul
        şi mierea!'
      K-1 Bee Loops 12_instruction: 'Evaluare: Foloseşte buclele pentru a colecta
        nectarul, mierea şi pentru mutări!'
      K-1 Bee Loops 2_instruction: Folosește o buclă pentru a muta şi apoi colectează
        nectarul şi fă miere!
      K-1 Bee Loops 3_instruction: Foloseşte buclele pentru a coleta nectarul şi produce
        miere!
      K-1 Bee Loops 4_instruction: Foloseşte buclele pentru a lua nectarul, produce
        miere şi pentru a muta!
      K-1 Bee Loops 5_instruction: Foloseşte buclele pentru a lua nectarul şi mierea!
      K-1 Bee Loops 6_instruction: Folosește buclele pentru a colecta nectarul, mierea
        şi pentru mutări!
      K-1 Bee Loops 7_instruction: Foloseşte buclele pentru a coleta nectarul şi produce
        miere!
      K-1 Bee Loops 8_instruction: Foloseşte buclele pentru a coleta nectarul şi produce
        miere!
      K-1 Bee Loops 9_instruction: Folosește buclele pentru a colecta nectarul, mierea
        şi pentru mutări!
      K-1 Bee Loops Assessment 1_instruction: Colectează nectar pentru a produce miere
        şi foloseşte buclele pentru mutare!
      K-1 Bee Loops Assessment 2_instruction: Colectează nectar pentru a produce miere
        folosind buclele!
      K-1 Bee Puzzle 12_instruction: Get three nectars and then make two honey
      K-1 Building a Foundation Assessment_instruction: Construiește o piramidă pe
        trei nivele, nu ai alte indicaţii, doar joacă-te cu piesele până o realizezi!
      K-1 Maze 10_instruction: 'Ocolește dinamita pentru a mă duce la porc! '
      K-1 Maze 11_instruction: 'Urmărește traseul şi condu-mă la porcul prostuț. Evită
        TNT-ul sau penele vor zbura! Sugestie: El este la Sud de mine.'
      K-1 Maze 2_instruction: Mută-mă la Est ca să ajung la porc!
      K-1 Maze 3_instruction: Mută-mă spre sud pentru a ajunge la porc!
      K-1 Maze 4_instruction: Mută-mă spre nord pentru a ajunge la porc!
      K-1 Maze 5_instruction: Mută-mă la Est ca să ajung la porc!
      K-1 Maze 6_instruction: Mută-mă într-o direcţie, apoi în cealaltă pentru a ajunge
        la porc!
      K-1 Maze 7_instruction: Mută-mă într-o direcţie, apoi în cealaltă pentru a ajunge
        la porc!
      K-1 Maze 8_instruction: Mută-mă într-o direcţie, apoi în cealaltă pentru a ajunge
        la porc!
      K-1 Maze 9_instruction: Mută-mă într-o direcţie, apoi în cealaltă pentru a ajunge
        la porc!
      K-1 Maze Assessment 1_instruction: Evaluare -- Du-mă la porc!
      K-1 Maze Assessment 12_instruction: Nivel de evaluare
      K-1 Maze Assessment 13_instruction: Nivel de evaluare
      K-1 Maze Assessment 2_instruction: Evaluare -- Du-mă la porc!
      K-1 Maze Loops 1_instruction: Du-mă la porc!
      K-1 Maze Loops 10_instruction: Du-mă la porc! Foloseşte bucla repetă.
      K-1 Maze Loops 11_instruction: Du-mă la porc! Foloseşte bucla repetă.
      K-1 Maze Loops 12_instruction: Du-mă la porc! Foloseşte bucla repetă.
      K-1 Maze Loops 2_instruction: Foloseşte bucla repetă pentru a mă duce la porc!
      K-1 Maze Loops 3_instruction: Du-mă la porc! Foloseşte bucla repetă.
      K-1 Maze Loops 4_instruction: Du-mă la porc!
      K-1 Maze Loops 5_instruction: Du-mă la porc! Foloseşte bucla repetă.
      K-1 Maze Loops 6_instruction: Du-mă la porc! Foloseşte bucla repetă.
      K-1 Maze Loops 7_instruction: Du-mă la porc! Foloseşte bucla repetă.
      K-1 Maze Loops 8_instruction: Du-mă la porc! Foloseşte bucla repetă.
      K-1 Maze Loops 9_instruction: Du-mă la porc!
      K-1 Maze Loops Assessment 1_instruction: Evaluare -- Foloseşte contricţii de
        tip buclă pentru a mă duce la porc!
      K-1 Maze Loops Assessment 2_instruction: Evaluare -- Foloseşte contricţii de
        tip buclă pentru a mă duce la porc!
      K-1 Maze Multi 14_instruction: Nivel de evaluare
      K-1 Maze Multi 15_instruction: Nivel de evaluare
      K-1 Maze Sequence Assessment 1_instruction: |-
        Acesta este un test!\r
        Mută-mă într-o direcţie apoi în cealaltă pentru a mă duce la porc
      K-1 Maze Sequence Assessment 2_instruction: |-
        Acesta este un test!\r
        Mută-mă într-o direcţie apoi în cealaltă pentru a mă duce la porc.
      K-1 Maze debug Assessment 1_instruction: Evaluare -- Repară acest nivel prin
        rearanjarea şi adăugarea blocurilor de instrucţiuni pentru a mă duce la porc!
      K-1 artist 1 level 10_instruction: Desenează linia întreruptă folosind amândouă
        blocuri "sări" şi "desenează"
      K-1 artist 1 level 9_instruction: Desenează aceasta folosind trei linii
      K-1 maze debug 1_instruction: Modifică secvenţa de cod pentru a mă duce la porc!
      K-1 maze debug 10_instruction: Repară acest nivel prin rearanjarea şi adăugarea
        blocurilor de instrucţiuni pentru a mă duce la porc!
      K-1 maze debug 11_instruction: |-
        Acesta este un test!\r
        Repară acest nivel prin rearanjarea şi adăugarea blocurilor de instrucțiuni pentru a mă duce la porc
      K-1 maze debug 2_instruction: Găsește ce lipsește şi apoi adaugă blocuri de
        instrucțiuni pentru a mă duce la porc!
      K-1 maze debug 3_instruction: Găseşte ce lipseşte şi apoi scoate blocurile pentru
        a mă duce la porc!
      K-1 maze debug 4_instruction: Aleargă printre aceste blocuri şi repară-le! Cred
        că s-ar putea să merg în direcţia greşită.
      K-1 maze debug 5_instruction: Repară acest nivel prin rearanjarea şi adăugarea
        blocurilor de instrucţiuni pentru a mă duce la porc!
      K-1 maze debug 6_instruction: Repară acest nivel prin rearanjarea şi adăugarea
        blocurilor de instrucţiuni pentru a mă duce la porc!
      K-1 maze debug 7_instruction: Repară acest nivel prin rearanjarea şi adăugarea
        blocurilor de instrucţiuni pentru a mă duce la porc!
      K-1 maze debug 8_instruction: Repară acest nivel prin rearanjarea şi adăugarea
        blocurilor de instrucţiuni pentru a mă duce la porc!
      K-1 maze debug 9_instruction: Repară acest nivel prin rearanjarea şi adăugarea
        blocurilor de instrucţiuni pentru a mă duce la porc!
      K2.0 sequence 1_instruction: Modifică secvenţa de cod pentru a mă duce la porc!
      K2.0 sequence 10_instruction: |-
        Challenge: Move me around the TNT to get to
        the pig.
      K2.0 sequence 12_instruction: 'Let''s get that pig! '
      K2.0 sequence 2_instruction: Modifică secvenţa de cod pentru a mă duce la porc!
      K2.0 sequence 3_instruction: |-
        Something is not quite right. REMOVE a block
        to get me to the pig!
      K2.0 sequence 4_instruction: |-
        Time for a shorter puzzle!  Move one way, then
        another to get me to the pig.
      K2.0 sequence 4a_instruction: Try this puzzle again from the start!
      K2.0 sequence 5_instruction: Mută-mă într-o direcţie, apoi în cealaltă pentru
        a ajunge la porc!
      K2.0 sequence 6_instruction: Găsește ce lipsește şi apoi adaugă blocuri de instrucțiuni
        pentru a mă duce la porc!
      K2.0 sequence 7_instruction: |
        Debug this level by changing a block to get me
        to the pig!
      K2.0 sequence 8_instruction: |-
        Debug this level by adding blocks to get me to
        the pig!
      K2.0 sequence 9_instruction: 'Ocolește dinamita pentru a mă duce la porc! '
      K2.0 sequence FP_instruction: |-
        Now figure out how to get the pig any way you
        can!
      K2.0 sequence pre_instruction: |-
        Play with these blocks to see if you can get
        me to the pig!
      KIKI GLJ Test Response_instruction: |
        Look carefully at the code below.  What
        do you think the plane will do when you click "Run"?\r
      KTest1_instruction: Can you make me move South once more to get to the pig?
      KTest2_instruction: |-
        Trace the path and lead me to the silly pig. Avoid TNT
        or the feathers will fly!
      Kiki_StarWars_Test_3_instruction: Text
      Kiki_StarWars_Test_4_instruction: Text
      Kiki_StarWars_Test_5_instruction: Text
      Kiki_StarWars_Test_5_Example_instruction: Text
      LaurelDebugging4Video1_instruction: |-
        Move Laurel around and get as much gold
        as you can!
      Limited Quantity of Blocks Test_instruction: |-
        Get me to the pig by adding only
        one block
      Luigi's Pizza 1_instruction: |-
        Welcome to Luigi's Pizza! To order a pizza,
        type the name of a topping into the cost function, and we'll return the price
        of that pizza. Try ordering a pepperoni pizza to start.
      Luigi's Pizza 2 (copy 1)_instruction: |-
        Right now there are only four choices
        available at Luigi's pizza - let's fix that! Add a couple of new toppings
        to the conditional block in the "cost" function. Once you've added your
        toppings, test out the function to make sure it works.
      Luigi's Pizza 2_instruction: |-
        Right now there are only four choices available
        at Luigi's pizza - let's fix that! Add a couple of new toppings to the conditional
        block in the cost function. Once you've added your toppings, test out the
        function to make sure it works.
      Luigi's Pizza 3 (copy 1)_instruction: |-
        That's better, everyone loves more
        variety in their pizza toppings! But you still can't please everyone, and
        folks are coming in to order toppings that Luigi doesn't have. Instead of
        saying no to those people, could you update the "else" clause so that we
        charge them a premium for toppings that we don't normally offer?
      Luigi's Pizza 3_instruction: |-
        That's better, everyone loves more variety in
        their pizza toppings! But you still can't please everyone, and folks are
        coming in to order toppings that Luigi doesn't have. Instead of saying no
        to those people, could you update the else clause so that we charge them a
        premium for toppings that we don't normally offer? Let's charge $10,000
        for a topping we don't carry.
      Luigi's Pizza 4_instruction: |-
        Free Play: What can you do to make Luigi's cost
        function even more useful?
      MC Agent Freeplay_instruction: "**Freeplay:**  Time to explore on your own!"
      MC HOC 2016 Level 10_instruction: E timpul sa realizezi propriul Minecraft!
        Da viata creaturilor si fa-le sa faca orice vrei tu. Distractie placuta!
      MC HOC 2016 Level 2-2_instruction: Gaina este imobila. Aseaza blocul "muta inainte"
        si "ia-o la stanga" la blocul "cand prinde viata" pentru a o face sa se miste.
      MC HOC 2016 Level 3_instruction: 'Bun, acum gaina se misca! Dar s-a oprit. In
        jocuri, gainile merg pentru totdeauna! Utilizeaza o bucla "pentru totdeauna"
        pentru a tine gainile in miscare

'
      MC HOC 2016 Level 4_instruction: Acum gainile arata caraghios miscandu-se in
        acelasi loc. Jocurile utilizeaza miscari intamplatoare pentru a face lucrurile
        sa para reale. Fa ca gainile sa se "intoarca aleator".
      MC HOC 2016 Level 5_instruction: Aceste vaci sunt pierdute! Ghideaza-le catre
        iarba cu blocul "muta un pas inainte" pus intr-o bucla "pentru totdeauna".
      MC HOC 2016 Level 6_instruction: Acum generezi zombi. Foloseste blocul "genereaza"
        pentru a face 3 zombie cand se lasa noaptea. Fa-i sa se miste spre tine. Trebuia
        sa supravietuiesti pana dimineata.
      MC HOC 2016 Level 8_instruction: Calea catre oaia ta este blocata de un zid
        de piatra. Din fericire, exista un Creeper aici. Ei explodeaza daca ii atingi.
        Fa-l pe Creeper sa explodeze zidul astfel incat sa ajungi la oaia ta!
      MC HOC 2016 New Drop_instruction: In Minecraft, oile fac lana. Pune blocul "drop"
        in "cand este utilizat" apoi mergi spre ea pentru a lua lana.
      MC HOC 2016 New Spawn_instruction: Acum aveţi posibilitatea să umpleti lumea
        cu ceea ce vreti! Pune blocul 'genereaza' sub 'atunci când rulaţi' ca să generati
        lucruri atunci când începe jocul.
      MC HOC 2016 New Walk_instruction: Să explorăm lumea noastră! Muta cu ajutorul
        săgeţilor şi apăsaţi tasta spaţiu sau atingeţi tabla de joc pentru a utiliza
        elemente. Utilizaţi uşa pentru a merge în interiorul casei.
      MC HOC 2016 SCORE LEVEL_instruction: Unele jocuri va lasa sa tineti scorul.
        Joaca-te cu aceste Iron Golems si utilizati blocul "adauga 1 la scor" pentru
        a primi cate un punct de care ori le atingeti. Trebuie sa ai 5 puncte pentru
        a castiga!
      MC HOC 2016 Village Test_instruction: Oh nu! Zombi te-aus prin în interior!
        Programeaza Iron Golem pentru a urmări şi ataca zombi!
      MC_2017_Ryan_02_instruction: |-
        Help the player get out by using loops to get
        the Agent to the pressure plate.
      MC_HOC_2017 Agent Test_instruction: |-
        Click "Run" to move the player to the
        orange square inside of the house.
      MC_HOC_2017_01_instruction: |-
        Click "Run" to move the player to the orange
        square inside of the house.
      MC_HOC_2017_01_Cole_instruction: |-
        You need to collect all the tools on this
        journey. Move around using the **arrow keys**, and get to the chest on the
        path to win
      MC_HOC_2017_01_Kiki_instruction: |-
        Click "Run" to move the player to the orange
        square inside of the house.
      MC_HOC_2017_01_RETRY_instruction: "Write code to get the Agent to the pressure\nplate,
        then press \"Run\" and use the arrow keys to move the player out of\nthe house
        to collect the chest. "
      MC_HOC_2017_02_instruction: Get the Agent to the pressure plate.
      MC_HOC_2017_02_Cole_instruction: "Move the Agent to the pressure plate so that\n{currentPlayerName}
        can get to the map. "
      MC_HOC_2017_02_Kiki_instruction: |-
        Get the Agent to the pressure plate, then
        get the player to the orange square.
      MC_HOC_2017_02_Will_instruction: Get the Agent to the pressure plate.
      MC_HOC_2017_03_Cole_instruction: Get the Agent to the pressure plate.
      MC_HOC_2017_03_Kiki_instruction: Get the Agent to the pressure plate.
      MC_HOC_2017_04_instruction: |-
        Change the loop from the last puzzle to help the
        Agent make a path over the wider part of this river.
      MC_HOC_2017_04POINT5_Cole_instruction: Get the Agent to the pressure plate.
      MC_HOC_2017_04POINT5_RYAN_instruction: Get the Agent to the pressure plate.
      MC_HOC_2017_04_Cole_instruction: Get the Agent to the pressure plate.
      MC_HOC_2017_04_Kiki_instruction: Get the Agent to the pressure plate.
      MC_HOC_2017_05_instruction: |-
        Use a function to help the Agent get to the pressure
        plate.
      MC_HOC_2017_05_Cole_instruction: Get the player to the orange square.
      MC_HOC_2017_05_Josh_instruction: Get the player to the shovel.
      MC_HOC_2017_05_Kiki_instruction: Get the player to the orange square.
      MC_HOC_2017_06_Cole_instruction: |-
        Fix this code to get the Agent to build a
        bridge across this river.
      MC_HOC_2017_06_Josh_instruction: |-
        Fix this code to help the Agent build a bridge
        across this river.
      MC_HOC_2017_06_Kiki_instruction: |-
        Fix this code to help the Agent build a bridge
        across this river.
      MC_HOC_2017_07_Cole_instruction: |-
        Destroy the ice and get {currentPlayerName}
        to the Minecart.
      MC_HOC_2017_07_Kiki_instruction: |-
        Use a function to clear the path to the orange
        square.
      MC_HOC_2017_07a_Kiki_instruction: Clear the path to the orange square.
      MC_HOC_2017_08_Cole_instruction: |-
        Change the provided function to work for
        this biome.
      MC_HOC_2017_08_Kiki_instruction: Change the function to work for this puzzle.
      MC_HOC_2017_08_RY_instruction: |-
        Use the functions to find a way across the
        lava.
      MC_HOC_2017_08_Will_instruction: |-
        Use the functions to find a way across the
        lava.
      MC_HOC_2017_09_Cole_instruction: |-
        Program the Agent to clear the player's
        path.
      MC_HOC_2017_09_Kiki_instruction: |-
        Program the Agent to clear the player's
        path and get to the pressure plate.
      MC_HOC_2017_10_Cole_instruction: |-
        Create a function to help you finish this
        minecart.
      MC_HOC_2017_10_Cole_old_instruction: |-
        Create a function to help you finish
        this minecart.
      MC_HOC_2017_10_Kiki_instruction: |-
        Create a function to help you finish this
        minecart.
      MC_HOC_2017_10_RETRY_instruction: |-
        Use the functions to finish this minecart
        track.
      MC_HOC_2017_10_RYAN_instruction: |-
        Create a function to help you finish this
        minecart.
      MC_HOC_2017_10_RYAN2_instruction: |-
        Create a function to help you finish this
        minecart.
      MC_HOC_2017_13_Cole_instruction: "**Freeplay:**  Time to explore on your own!"
      MC_HOC_2017_4.5v2_instruction: Get the Agent to the pressure plate.
      MC_HOC_2017_Ali_instruction: Use the functions to find a way across the lava.
      MC_HOC_2017_FP10x10_instruction: "**Freeplay:** Can you challenge yourself\nto
        collect all of the diamonds in this level? "
      MC_HOC_2017_FP10x10_RE_instruction: "**Freeplay:** Can you challenge yourself\nto
        collect all of the diamonds in this level? "
      MC_HOC_2017_FP20x20_instruction: "**Freeplay:**  Time to explore on your own!"
      MC_HOC_2017_Ryan_03_instruction: |-
        Now use loops to help The Agent build a bridge
        over the river by placing blocks in the water.
      MC_HOC_2017_Ryan_05_instruction: |-
        Destroy these cacti so that the player can
        get to the goal.
      MC_HOC_Kiki_02_instruction: Get The Agent to the pressure plate.
      MSM Big Game Empty_instruction: |-
        All variables and functions are currently
        empty stubs. Each puzzle progression will be focused on defining and handful
        of them, and therefore adding functionality.
      MSM Big Game Vars 1 (copy 1)_instruction: |-
        In the Variables toolbox you'll
        see several variables that define how your game characters look, move, and
        interact
      MSM Big Game Vars 1_instruction: |-
        In the Variables toolbox you'll see several
        variables that define how your game characters look, move, and interact
      MSM Big Game Vars Backup_instruction: |-
        In the Variables toolbox you'll see
        several variables that define how your game characters look, move, and interact
      MSM Defining Vars 1 (copy 1)_instruction: |-
        Write a program that produces a
        50 pixel solid green triangle.
      MSM Defining Vars 1_instruction: |-
        Write a program that produces a 50 pixel
        solid green triangle.
      MSM Defining Vars 2 (copy 1)_instruction: |-
        If we wanted to make fifty green
        triangles, it would be a pain to repeat that block of code 50 times. Let's
        create a variable called "my-shape" and put the code for a 50 pixel solid
        green triangle inside.
      MSM Defining Vars 2_instruction: |-
        If we wanted to make fifty green triangles,
        it would be a pain to repeat that block of code 50 times. Let's create a
        variable called my-shape and put the code for a 50 pixel solid green triangle
        inside.
      MSM Defining Vars 3 (copy 1)_instruction: |-
        Take your "my-shape" variable
        and use it with this provided code to draw two identical green triangles.
      MSM Defining Vars 3_instruction: |-
        Take your my-shape variable and use it with
        this provided code to draw two identical green triangles that are 50 pixels
        in size.
      MSM Defining Vars 4_instruction: |-
        Edit your my-shape variable so that it draws
        75 pixel solid red stars.
      MSM Play Lab Butterfly 1_instruction: |-
        Help Sam stay on the screen so that
        you can always see at least a little piece of him. Using the arrow keys, see
        how far Sam can go to the left while still staying onscreen. You’ll find that
        Sam is onscreen as long as his x-coordinate is greater than -50. Then, fill
        in the code to make Sam stay on the screen.
      MSM Play Lab Butterfly 2_instruction: |-
        Now make Sam stay on the right side
        of the screen. You'll have to experiment to see how far he can go and still
        be partially visible on the screen.
      MSM Play Lab Butterfly 3_instruction: |-
        Now, combine your work to make Sam stay
        on both sides of the screen.
      MSM Play Lab Game 2_instruction: |-
        Variables can also be used to control the
        speed of players in a game. Set the player speed and the enemy speed and see
        how the movement changes. Speed can be between 2 and 12.
      Middle School Hackathon Pt 1_instruction: "(Click to see full instructions)"
      Middle School Hackathon Pt 2_instruction: "(Click to see full instructions)"
      Mike Pair Programming_instruction: Here are the instructions
      Mike Test Bee Conditionals 1_instruction: |-
        This cloud is blocking my view!
        Check to see if there's a flower under the cloud, and only get nectar if
        there's a flower. Be careful, it can change!
      Mike Test Bee Conditionals 2_instruction: |-
        Collect all of the nectar. You can
        only collect nectar from flowers, but you can check any space to see if there
        is a flower.
      MikeAssessment1_instruction: Now do it right!
      MikeStar_instruction: Draw this.
      MikeStarHard_instruction: Draw this.
      MikeStarNested_instruction: Draw this.
      MikeTest1_instruction: Who knows what you should do?!?!
      MikeTest2_instruction: Draw something!
      MikeTest3_instruction: Build Something
      NEW Course 4 Artist Functions 1_instruction: Poți desena un pătrat care are
        lungimea laturii de 100 pixeli, folosind o construcție buclă?
      NEW Course 4 Artist Functions 10.1_instruction: Utilizează funcțiile de la puzzle-urile
        anterioare pentru a desena acest model.
      NEW Course 4 Artist Functions 10_instruction: Clic pe "edit" pentru a completa
        blocurile de instrucţiuni din definirea funcţiei pentru a realiza un pătrat
        cu latura de 40 pixeli.
      NEW Course 4 Artist Functions 11_instruction: Avem o funcţie nouă numită "draw
        a line of squares." Fi liber să arunci o privire în interiorul blocului de
        instrucţiuni al funcţiei pentru a vedea cum am construit-o. Clic pe "Run"
        când eşti gata pentru următorul puzzle.
      NEW Course 4 Artist Functions 12_instruction: Foloseştei funcţia "draw a line
        of squares" din ultimul puzzle pentru a desena acest model
      NEW Course 4 Artist Functions 13_instruction: 'Poţi desena o formă stea folosind
        funcţia "draw a line of squares"? Indicaţie: La fiecare repetare trebuie să
        muţi înainte un anumit număr de pixeli şi să roteşti la 144 grade.'
      NEW Course 4 Artist Functions 14_instruction: 'Joacă liber! '
      NEW Course 4 Artist Functions 2_instruction: 'Poţi desena 3 pătrate situate
        la 20 pixeli depărtare unul de celălalt? Indicaţie: fiecare pătrat are latura
        de 100 pixeli'
      NEW Course 4 Artist Functions 3_instruction: |-
        Aici este un nou tip de bloc de instrucţiuni.
        Poartă numele de "Function block." Apasa "Edit" apoi umple-l cu codul de desen pentru un patrat cu laturile de 100 de pixeli. Cand ai terminat de editat functie, click "Close" si intoarce-te la programul tau.
      NEW Course 4 Artist Functions 4_instruction: 'Folosește funcția "desenează un
        pătrat" pentru a realiza acest model. Sugestie: Va trebui să folosești un
        bloc "virează la dreapta cu 120 de grade" după fiecare pătrat.'
      NEW Course 4 Artist Functions 5_instruction: Cum a știut blocul "desenează un
        pătrat" ce comenzi să ruleze? Fă clic pe "editare" în blocul funcţiei "desenează
        un pătrat". Blocurile din editorul de funcţie sunt definiţia care alcătuiesc
        "desenează un pătrat." Când ai terminat de observat, fă clic pe "Salvare şi
        Închidere" şi apoi "Rulează."
      NEW Course 4 Artist Functions 6_instruction: 'Folosind blocul de funcție "desenează
        un pătrat", poţi desena această imagine? Indicaţie: fiecare pătrat este la
        20 de pixeli distanță unul față de celălalt.\r

'
      NEW Course 4 Artist Functions 7_instruction: 'Începi să-ți dai seama cum să
        folosești blocurile de funcție? Hai să modificăm acest pătrat astfel încât
        să aiba o dimensiune de 200 de pixeli. Sugestie: fă clic pe "editează" pentru
        a introduce editorul funcției "desenează un pătrat". Amintește-ți să faci
        clic pe "Închide" pentru a ieși din editorul de funcție. '
      NEW Course 4 Artist Functions 8_instruction: Am creat o nouă funcţie pentru
        tine numită "Desenează un triunghi".  Poți edita definiţia de funcţie pentru
        a desena un triunghi cu laturile 100 pixeli?
      NEW Course 4 Artist Functions 9_instruction: Poți rezolva acest lucru prin adăugarea
        unui singur bloc?
      NEW Course 4 Artist Functions inspire_instruction: Fă clic aici pentru a vedea
        din nou imaginea de inspiraţie.
      NEW Course 4 Artist Params 1_instruction: Hai să definim această funcţie pentru
        a desena un pătrat cu laturi de 50 de pixeli. Fă clic pe "editare" pentru
        a începe.
      NEW Course 4 Artist Params 10_instruction: 'Creează un bloc de funcţie "desenează
        un hexagon" cu un parametru de lungime. Sugestie: acest hexagon are o dimensiune
        de 100 de pixeli. '
      NEW Course 4 Artist Params 11_instruction: Pot să îţi dai seama cum să desenezi
        această formă? Editează funcţia pentru a utiliza parametrul "laturi".
      NEW Course 4 Artist Params 12_instruction: "Poţi completa acest desen? \nLaturile
        tuturor formelor sunt de 100 de pixeli lungime."
      NEW Course 4 Artist Params 12a_instruction: Această imagine este similară ultimei.
        Poţi utiliza o "buclă pentru" cu funcţia ta pentru a realiza acest design?
      NEW Course 4 Artist Params 13_instruction: "Hai să edităm această funcţie \"desenează
        o formă\". Ea are deja un parametru \"lungime\". Acum, hai să edităm funcţia
        pentru a adăuga un parametru \"laturi\". Amintește-ți că unghiul de viraj
        pentru o formă dată este de 360 împărţit la numărul de laturi avute. Sugestie:
        Dimensiunea globală a fiecărei forme este de 200 de pixeli. \nîți amintești
        ecuaţia pentru a face forme de aceeaşi dimensiune, atunci când acestea au
        un număr diferit de laturi?"
      NEW Course 4 Artist Params 14_instruction: Editează "desenează o margine de
        spirală" pentru a utiliza parametri şi a recrea aceste forme.
      NEW Course 4 Artist Params 15_instruction: |-
        Joc la alegere: Aici sunt funcțiile pe care le-ai scris tu și încă ceva în plus cu care să te joci. Desenează ceva minunat!
        Joacă-te cu lățimea peniței pentru a vedea cât de diferit arată desenele tale!
      NEW Course 4 Artist Params 2_instruction: |-
        Create a `draw triangle` function
        from scratch that makes a triangle with  50 pixel sides.
      NEW Course 4 Artist Params 3_instruction: 'Acum hai să folosim funcția pentru
        a desena 5 triunghiuri pe un rând. Indiciu: fiecare triunghi este situat la
        30 de pixeli distanță unul față de celălalt.\r

'
      NEW Course 4 Artist Params 4_instruction: "Observi ceva diferit \nla aceste
        blocuri de funcţie? Fă clic pe \"Rulează\" pentru a vedea ce se întâmplă."
      NEW Course 4 Artist Params 5_instruction: 'Completează ??? în blocul de intrare
        a parametrului lungime. Sugestie: Pentagonul are dimensiunea de 100 de pixeli. '
      NEW Course 4 Artist Params 6_instruction: Completează parametrul "lungime" pentru
        a desena aceste forme prin înlocuirea "???" cu numerele corecte. Pătratul
        şi triunghiul sunt de 100 de pixeli mărime, în timp ce hexagonul are o dimensiune
        de 75 de pixeli.
      NEW Course 4 Artist Params 7_instruction: 'Poţi termina acest desen? Sfat: fiecare
        triunghi este cu 25 pixeli mai mare decât ultimul. Primul triunghi are latura
        de 25 pixeli.'
      NEW Course 4 Artist Params 8_instruction: Codul pentru acest triunghi este greşit.
        Poţi să editezi funcţia pentru a-l depana şi apoi să faci triunghiuri cu laturile
        de 25, 50 şi 75 pixeli?
      NEW Course 4 Artist Params 9_instruction: 'Fă clic pe "editare" pentru a completa
        definiția funcţiei "desenează un pătrat" şi pentru a adăuga un parametru.
        Ar trebui să ia un parametru de lungime, la fel ca și triunghiul. De această
        dată, desenează 3 pătrate: cu 25, 50 și 75 de pixeli lungime, fiecare la distanță
        de 100 de pixeli unul față de celălalt.'
      NEW Course 4 Artist Params inspire_instruction: "Inspiraţie pentru joc liber:
        Acum ai învăţat tot ce ai nevoie să ştii pentru a crea un model ca acesta!
        Dacă această imagine te inspiră, încearcă să faci ceva similar. Altfel, creează
        ceva propriu și personal.\\r\n\\r\nVrei să știi cum a fost făcut modelul nostru
        de inspirație? "
      NEW Course 4 Artist Vars 1.5_instruction: 'Aruncă o privire la acest cod, poţi
        vedea cum blocul "setează lungimea" şi blocul "lungime" lucrează împreună?
        Fă clic pe "Rulează" pentru a-l vedea în acţiune. '
      NEW Course 4 Artist Vars 12_instruction: Acum, recrează algoritmul de la ultimul
        nivel şi creează un pentagon cu laturile de 150.
      NEW Course 4 Artist Vars 2.5_instruction: 'Aruncă o privire la acest cod, poţi
        vedea cum blocul "setează lungimea" şi blocul "lungime" lucrează împreună?
        Fă clic pe "Rulează" pentru a-l vedea în acţiune. '
      NEW Course 4 Artist Vars 2_instruction: 'Glisează un bloc cu număr în blocul
        "setare lungime" pentru a desena un set de triunghiuri de 50 de pixeli. '
      NEW Course 4 Artist Vars 4 5_instruction: |-
        Minunat lucru cu ultimul puzzle,
        hai să-l mai încercăm din nou, de data aceasta hai să facem acest design super cu hexagoane de 60 de pixeli.
      NEW Course 4 Artist Vars 4_instruction: 'Hai să-l încercăm din nou. Poți tu
        seta variabila de lungime pentru a face acest design minunat cu hexagoane?
        Indiciu: Este un multiplu de 10.'
      NEW Course 4 Artist Vars 6_instruction: 'Deseneaza acest model prin mutarea
        variabilei lungime in locurile corecte si apoi setati valoarea corecta pentru
        lungime. (pont: este un multiplu de 10). \r\r Vezi cum setezi valoarea pentru
        lungime doar o data, iar codurile folosesc aceeasi valoare peste tot? \r\r\r

'
      NEW Course 4 Bee For Loops 1_instruction: Utilizează o buclă pentru a colecta
        nectarul din fiecare floare.
      NEW Course 4 Bee For Loops 10_instruction: Folosește variabila ta din bucla
        "pentru" ca să controlezi cât de departe să muți pe orizontal.
      NEW Course 4 Bee For Loops 10a_instruction: 'Gata pentru o provocare? Foloseste
        ce ai invatat despre bucle si incearca sa rezolvi problema asta. Aminteste-ti:
        se poate sa rulezi solutia de mai multe ori inainte sa iti dai seama de toti
        pasii.'
      NEW Course 4 Bee For Loops 11_instruction: Poţi folosi variabila de buclă pentru
        a controla mişcarea şi colectarea de nectar?
      NEW Course 4 Bee For Loops 2_instruction: Adauga codul necesar pentru a fii
        sigur ca albinele colecteaza tot nectarul. Uite de cate linii de cod ai nevoie
        pentru puzzle-ul acesta! (Vom invata un mod mai usor puzzle-ul urmator.)
      NEW Course 4 Bee For Loops 3_instruction: 'Ah, blocul "pentru bucla" face asta
        mult mai usor! Toate cod-urile de care ai nevoie sunt aici, arunca o privire
        si vezi cum sunt puse impreuna apoi selecteaza "Ruleaza" pentru a vedea cum
        merge. '
      NEW Course 4 Bee For Loops 4 4_instruction: Acum trebuie sa ne mutam inainte
        "de atatea ori" si sa culegem nectarul "de atatea ori". Poti folosi buclele
        "repetare"pentru a rezolva aceasta provocare?
      NEW Course 4 Bee For Loops 4_instruction: 'Înlocuiţi??? în "pentru buclă" cu
        cea mai mare cantitate de polen pe care albinele trebuie să o colecteze. '
      NEW Course 4 Bee For Loops 5 5_instruction: Incepeti sa stii sa folositi buclele?
        Haideti sa ajutam albinele sa culeaga si nectarul ramas.
      NEW Course 4 Bee For Loops 5_instruction: De asemenea, poţi utiliza o buclă
        "pentru" ca să numere în ordine descrescătoare. Încearcă să colectezi acest
        nectar numărând în ordine descrescătoare de la 5 la 1 câte 1.
      NEW Course 4 Bee For Loops 6_instruction: Ultimul numar din blocul "pentru bucla"
        este numit "crescatorul". De fiecare data cand ruleaza bucla, variabila se
        schimba cu valoarea crescatorului. Incearca sa colectezi aceste flori utilizand
        crescatorul 2.
      NEW Course 4 Bee For Loops 7_instruction: 'Acum, haideti sa combinam variabila
        "contorul" cu un bloc matematic! Cum poti utiliza variabila "contorul" pentru
        a naviga prin gradina cu cat mai putine blocuri posibile? Ce trebuie sa faci
        pentru a colecta 3, 6, 9, 12, sau 15 randuri de polen de data asta? Secretul
        este variabila "contorul"!\r\rAminteste-ti: daca bucla ta numara crescator,
        cresterea este adaugata variabilei "Contor" de fiecare data.'
      NEW Course 4 Bee For Loops 8_instruction: 'Ati prins ideea! Care ar trebui sa
        fie variabila voastra crescatoare pentru a colecta 3, 6, 9, 12 sau 15 randuri
        de polen?\r

'
      NEW Course 4 Bee For Loops 9_instruction: Dacă bucla ta este de numărare în
        ordine descrescătoare, incrementul este scăzut din variabila ta numărător
        la fiecare buclă. Ce ar trebui să fie incrementul tău pentru a colecta 9 nectaruri,
        apoi 6, şi apoi 3 nectaruri?
      NEW Course 4 Bee For Loops 95_instruction: Aruncati o privire la fiecare piesa
        de "pentru bucla" pe care ati realizat-o. Iti poti da seama de ce numere ai
        nevoie pentru a rezolva acest puzzle? Cum functioneaza?
      NEW Course 4 Play Lab Params 11_instruction: 'Este timpul sa va jucati liberi!
        Distrati-va cu toate blocurile din bara de instrumente. '
      NEW Course 4 Play Lab Params 5 5_instruction: Haideti sa incercam din nou, dar
        cu mai putin ajutor. Ce trebuie sa schimbi acum pentru a face actorii sa se
        deplaseze?
      NEW Course 4 Play Lab Vars 4 5_instruction: '"Ce crezi ca va face codul aceasta?
        Apasa "Ruleaza" ca sa vezi ce se intampla."'
      NEW Course 4 Play Labs For Loops 7a_instruction: Folosind tot ceea ce ai invatat
        pana acum, poti sa il faci pe dinozaur sa fara un pas de fiecare data cand
        trece pe langa un pinguin?
      NEW Course 4 Play Labs For Loops 8 Free Play_instruction: 'Este timpul sa va
        jucati liberi! Distrati-va cu toate blocurile din bara de instrumente. '
      NEW Course 4 Play Labs For Loops 8a_instruction: 'Provocare: Cum a-ti folosi
        blocul "pentru bucla" pentru a face fiecare actor sa mearga de jur impresur
        si sa isi rosteasca numarul, apoi sa dispara de pe ecran? '
      NetSim Standalone Automatic DNS_instruction: |-
        In this version of the Internet
        Simulator, a Domain Name System (DNS) is provided for you and knows the IP
        addresses of all connected computers. Send a message in the form GET [hostname]
        to the DNS service at address <yourRouterNumber>.15 to get a student's address.
      NetSim Standalone Broadcast_instruction: |
        In this version of the Internet Simulator,
        you can connect to up to 5 other people in a room. When you send messages
        in the room, everyone receives them. What are some of the challenges of this
        system, and how might you solve them?\r
      NetSim Standalone Classroom Routers_instruction: |-
        In this version of the Internet
        Simulator, everyone connects to a router and has a specific address. To send
        messages, you have to address your message to the specific address of the
        recipient, and the router will take care of delivering it to the right computer.
        If there are other routers created in your class, ask for the address of one
        of your classmates and send them a message! View the Log Router to see the
        path the messages have taken through the network.
      NetSim Standalone Freeplay_instruction: |-
        In this configuration, most of the
        options are turned on, and you can play with them. Have fun!
      NetSim Standalone Manual DNS_instruction: |-
        In this version of the simulator
        you can't see the other students' addresses.  Instead, one of you must act
        as a name service, to help share addresses with each other.
      NetSim Standalone Packets TCP_instruction: |
        Messages on the Internet can take
        many paths to get to their destination, and sometimes along the way the message
        gets dropped. In this version of the Internet Simulator, there is a 10% chance
        of a packet being dropped, multiple packets may take different paths to the
        destination, and the default max packet size is set to 6 additional characters.
      NetSim Standalone Routers Addresses_instruction: |-
        For this activity, connect
        to a router with the others in your group. Important note: The router will
        only properly route messages where the first 4 bits are the To: address and
        the second 4 bits are the From: address.\r
        \r
        [TODO: NetSim needs to support
        hierarchical addresses. For now, level is set up for 4 bit to and from addresses]
      NetSim Standalone SendAB_instruction: |-
        You and your partner share a single
        wire that can only be in state A or state B. You can set the wire to either
        state at any time, and you can read the state of the wire at any time. Can
        you figure out a way to effectively communicate with just this system?
      NetSim Standalone Sending Numbers Ascii_instruction: |
        Now that you've transmitted
        information represented as decimal numbers, you can map those numbers to text
        characters to send text-based information back and forth. With a text-based
        protocol, you can easily represent and communicate all kinds of information.
      NetSim Standalone Sending Numbers_instruction: "You and your partner can now\nreliably
        send messages back and forth without extra coordination! While you're\nalways
        sending bits back and forth, you can also represent those bits as decimal\nnumbers.
        What kinds of information can you represent with this system? "
      NetSim_AddressingMessages_instruction: |-
        In this version of the simulator, you
        will connect to a Router instead of directly to another student. Enter an
        address in the "To" box to send a message to another student.
      NetSim_AutomaticDNS_instruction: |-
        In this version of the simulator a DNS service
        is provided for you. Send a message in the form GET [hostname] to the DNS
        service at address 15 to get a student's address.
      NetSim_ManualDNS_instruction: |-
        In this version of the simulator you can't
        see the other students' addresses.  Instead, one of you must act as a name
        service, to help share addresses with each other.
      NetSim_SendAB_instruction: |-
        Connect to another student.  Each of you can set
        the value of the wire between you to "A" or "B".  See if you can send
        a complete message!
      NetSim_SendAscii_instruction: |-
        In this version of the simulator, you can send
        numbers or ASCII characters to one another, one bit at a time.
      NetSim_SendBits_instruction: |-
        Connect to another student.  You can now set
        your wire to "0" or "1".  Send a message to your partner!
      NetSim_SendNumbers_instruction: |-
        In this version of the simulator, you can
        view the decimal representations of the binary you are sending.
      NetSim_SendingABTest_instruction: |-
        This is Sarah's test of making a netsim
        level
      NetSim_Superuser_instruction: You have loaded NetSim in superuser mode.
      NetSim_Variant1_instruction: |-
        NetSim: Variant 1 allows students to manually
        work out the timing of sending bits back and forth.
      NetSim_Variant2_instruction: |-
        NetSim: Variant 2: Students connect directly
        to one another and send entire packets back and forth, exploring systems of
        encoding data.
      NetSim_Variant3_instruction: |-
        NetSim: Variant 3: Connects groups of 2-6 students
        with a router, and explores issues in routing and DNS
      New Artist Project_instruction: Desenează ceva minunat! Liniile tale de cod
        vor fi salvate ca proiect aşa că tu poţi reveni oricând.
      New Basketball Project_instruction: |-
        Create your own Basketball game. You can
        change all the rules. When you're done, click Finish to let friends try your
        game on their phones.
      New Bounce Project_instruction: |-
        Create your own Bounce game. You can change
        all the visuals and the rules. When you're done, click Finish to let friends
        try your game on their phones.
      New Course 4 Artist Functions Level 4_instruction: Folosește funcţia "desenează
        un pătrat" pentru a elabora acest model.
      New Gumball Project_instruction: Creează orice vrei tu şi distribuie-l/-o!
      New Ice Age Project_instruction: Creează orice vrei tu şi distribuie-l/-o!
      New Infinity Project_instruction: Creează orice vrei tu şi distribuie-l/-o!
      New Minecraft Hero Project_instruction: |-
        **Freeplay:**  Time to explore on
        your own!
      New Sports Project_instruction: |-
        Create your own game! You're in charge here:
        you can change all the rules, mix and match sports, get creative! When you're
        done, click Finish to let friends try your game on their phones.
      Ninjacat Demo B (copy 1)_instruction: |
        \r
        Let’s begin by exploring a simple
        videogame, and then figuring out how it works. You can use the arrow keys
        to move the ninja left, right and jump - try to catch the unicorn and avoid
        the dragon!\r
        \r
        \r
        \r
          \r
        \r
      Ninjacat Demo B_instruction: |-
        Let’s begin by exploring a simple videogame,
        and then figuring out how it works. You can use the arrow keys to move the
        ninja up and down - try to catch the unicorn and avoid the dragon! When you
        think you've figured out how the game works, click "Finish"
      Ninjacat Demo No Animate_instruction: |-
        Let’s begin by exploring a simple videogame,
        and then figuring out how it works. You can use the arrow keys to move the
        ninja up and down - try to catch the unicorn and avoid the dragon! When you
        think you've figured out how the game works, click "Finish"
      October15 JoL 1_instruction: |-
        Program the artist to design a face for your
        jack-o-lantern!
      October15 bat_instruction: |
        Freeplay: Here are some functions to play with.  Can
        you draw a bat?\r
      October15 ghost 1_instruction: |-
        Give the ghost eyes, using the "draw a circle"
        function.
      October15 pumpkin 1_instruction: |-
        Finish this jack-o-lantern by drawing the
        eyes and nose in any style you would like.
      October15 stars 1_instruction: |-
        Use loops and the "random integer" block
        to fill the night sky with stars of different shapes and sizes.
      Overworld Avoid Monsters_instruction: |-
        Intalnirea unui Vierme nu este o idee buna.
        Mergeti cu atentie pe langa ei si ajungeti in siguranta in casa.
      Overworld Avoid Monsters_2018_instruction: |-
        Running into a Creeper is a bad
        idea. Carefully move past the Creepers and reach the safety of your home.
      Overworld Chop Tree - allthethings_instruction: |-
        Wood is a very important resource.
        Many things are made from it. Walk to the tree and use the “destroy block”
        command to chop it down.
      Overworld Chop Tree_instruction: Lemnul este o resursa importanta. Se pot construi
        multe cu ajutorul lui. Mergeti la copac si utilizati blocul "Distrugeti" pentru
        a-l taia.
      Overworld Chop Tree_2018_instruction: |-
        Wood is a very important resource. Many
        things are made from it. Walk to the tree and use the “destroy block” command
        to chop it down.
      Overworld Chop Trees_instruction: 'Trebuie sa construim o casa inainte de apus.
        Este necesar mult lemn. Taie toti cei trei copaci. '
      Overworld Chop Trees_2018_instruction: |-
        We need to build a house before the
        sun goes down. Houses require a lot of wood. Cut down all 3 trees.
      Overworld Free Play 20x20_instruction: Felicitări! Ai finalizat toate puzzle-urile!
        Acum extrage, construieste si creeaza ceva unic folosind tot ceea ce ai invatat
        pana acum.
      Overworld Free Play 20x20_2018_instruction: Felicitări! Ai finalizat toate puzzle-urile!
        Acum extrage, construieste si creeaza ceva unic folosind tot ceea ce ai invatat
        pana acum.
      Overworld House Frame Chosen_instruction: Construieste restul casei din orice
        material doresti. Comanda "Repeta" iti va fi de ajutor.
      Overworld House Frame Chosen_2018_instruction: |-
        Build the rest of your house
        from any material you'd like. The "repeat" command will come in handy.
      Overworld Move to Sheep_instruction: Adauga din nou instructiunea "Mergi inainte"
        pentru a ajunge la oaie.
      Overworld Move to Sheep_2018_instruction: |-
        Add a second `move forward` block
        to reach the sheep.
      Overworld Place Wall_instruction: Fiecare casa incepe cu un perete. Construieste
        prima parte a casei asezand comenzile "Loc" si "Mergi inainte" in interiorul
        buclei "Repeta".
      Overworld Place Wall_2018_instruction: |-
        Every house starts with a wall. Build
        the first part of your house by putting the "place" and "move forward"
        commands inside the repeat loop.
      Overworld Plant Crops_instruction: Este bine sa planifici dinainte. Planteaza
        culturi pe ambele parti ale apei astfel incat mai tarziu sa nu-ti fie foame.
      Overworld Plant Crops_2018_instruction: |-
        It’s good to plan ahead. Plant crops
        on both sides of the water so you don’t get hungry later on.
      Overworld Powered Minecart_instruction: Buna treaba! Ai adunat suficiente resurse
        pentru a construi o casa modesta. Acum dezvolta o cale ferata de la marginea
        hartii pana la usa casei tale.
      Overworld Powered Minecart_2018_instruction: |-
        Great job! You’ve gathered lots
        of resources and built a modest home. Now lay rail from the edge of the map
        to the door of your house.
      Overworld Shear Sheep_instruction: E vremea sa tunzi oile! Foloseste comanda
        "Tunde" pentru a aduna lana de la oi.
      Overworld Shear Sheep_2018_instruction: |-
        Sheep-shearing time! Use the “shear”
        command to gather wool from both sheep.
      PDAlg 13-16 Sam Extension Puzzle_instruction: |-
        Add a second parameter to "onscreen?"
        for Sam's y coordinate and update the function so it keeps him safe on all
        four sides.
      PDAlg 17-20 Luigi Extension Puzzle_instruction: |-
        Without modifying your existing
        "cost" function, create a new "coupon" function that takes a pizza topping
        and coupon code and returns the cost of a pizza with that topping. If the
        coupon code is correct (you get to decide what it is), apply a 30% discount
        to the pizza.
      PDAlg 8-12 Rocket Height Puzzle_instruction: |-
        Let's write a "rocket-height"
        function with simple acceleration. Write a function that ensures the rocket
        is at 15 meters at 1 second, 45 meters at 2 seconds, 95 at 3 seconds, and
        165 at 4 seconds.
      PDAlg 8-12 ex dr 1_instruction: |-
        The definition in this Design Recipe doesn't
        match both examples. Test each example to see which is failing, and then fix
        the definition to match.
      PDAlg 8-12 ex dr 2_instruction: |-
        This student has created two examples for
        the function "apples" but something's not quite right. How would you direct
        this student to correct their mistake?
      PDAlg Big Game History_instruction: |-
        Now that you've played through a Big
        Game level you should see a new entry in your history. Click the Version History
        button and you should see at least one version. Each time you go back to a
        Big Game level you'll get a new record in your version history that you can
        revert back to.
      PDAlg Big Game Remix_instruction: |-
        Here's your Big Game as you last left it.
        Try clicking the Remix button to spin off a new remix of your project.\r
        \r
        Any
        changes you make after you click Remix will be saved on your new remix and
        not on your main Big Game.
      PDAlg Design Recipe Delete_instruction: |-
        Click the delete button to get rid
        of this function, then try creating and deleting a few of your own.
      PDAlg Design Recipe Examples_instruction: |-
        The definition in this Design Recipe
        doesn't match both examples. Test each example to see which is failing, and
        then fix the definition to match.
      PDAlg Design Recipe Required_instruction: |-
        Complete the Design Recipe for the
        "eggs" function, making sure to create and test your examples.
      PDAlg Updates Cond_instruction: |-
        When you went to PD in the summer, the Conditional
        block that you were introduced to was black and allowed any data type to be
        used. This proved to be confusing, given that every other function we've
        seen always produces the same type of data. To help make conditionals clearer
        and more consistent we've replaced the single black block with a separate
        block for each data type.
      PDAlg Updates Errors_instruction: |-
        Run the provided program and use the error
        messages to try and track down the bugs.
      PDAlg Updates Space_instruction: |-
        Making use of limited programming space (especially
        on small screens) is challenging with a block based language. To help with
        this we've added a few features. Experiment with this provided code to see
        how the space can be manipulated to deal with larger programs.
      PDK5 Conditionals 1_instruction: |-
        Purple flowers may have either 1 or 0 nectar,
        but you don't know which one! Be careful not to collect nectar from a purple
        flower if it doesn't have any. Check if the nectar is equal to 1 by using
        the if block.
      PDK5 Conditionals 2_instruction: "Try this puzzle that uses conditionals and\nloops
        together. Use the \"if\" block to decide when to turn. Hint: you only\nneed
        one more block to complete this puzzle. "
      PDK5 Events 1_instruction: "So far all of the programs we've written are executed\nin
        order from top to bottom. In this puzzle, we'll use \"Events\" to respond\nto
        an action on demand. Make the octopus say \"Hello\" only when you click\non
        the Octopus. "
      PDK5 Functions 1_instruction: |-
        Hello. Me zombie artist. Me love drawing! Help
        me draw the square glasses.  Hint:  the bridge between the glasses is 25 pixels
        shorter than the square length.
      PDK5 Functions 2_instruction: Funcțiile îțî permit să construiești blocuri noi!
        Am mutat blocurile ce deseneaza un pătrat într-o funcție numită "desenează
        un pătrat". Poți folosi această funcție pentru a crea ochelarii? Pătratele
        au 75 de pixeli între ele.
      PDK5 Loops 1_instruction: "Instead of using 5 \"move forward\" blocks, use\nthe
        \"repeat\" block with a \"move forward\" block inside of it. In computer\nscience,
        this is called a \"loop.\" "
      PDK5 Loops 3_instruction: |-
        Here's another puzzle to practice loops. What happens
        if you use the repeat block to run the code already provided on the workspace
        4 times?
      PS - test - pixelation_instruction: |-
        Complete the X shape by typing 0s and
        1s
      PS FR test 7-25_instruction: 'Here are your instructions for this free response.  '
      PS Log test - Define and use turnAround_instruction: |-
        Define a function called
        turnAround. Call the function and then move the turtle forward. (Click to
        see full instructions)
      PS copy 2-3 Bee Conditionals 5_instruction: |-
        Be careful not to collect nectar
        from a purple flower if it doesn't have any. \r
        You must first check if
        the nectar is equal to 1 using the `if nectar` block.
      PS predictive Applab level test_instruction: 'Here are some instructions. '
      Pattern Bee 1_instruction: |-
        What a strange field of goodies! I wonder if there's
        a pattern here...
      Pixelation - AllTheThings 4_instruction: |-
        This pixelation level demonstrates
        the use of the `hide_encoding_controls` option.  Notice that the level displays
        the image data in hexadecimal and does not let you change it back to binary.
      Pixelation - AllTheThings 5_instruction: |-
        This pixelation level demonstrates
        the use of the "Hide sliders" option.  Notice that the width and height
        sliders are not available, and the width and height fields are not editable.
      Pixelation - Lesson 14 - Fix bit offset v.2_instruction: |-
        Something happened
        to the bits in this image! Find the error and fix it! Hint: a few extra bits
        were added. You should only need to remove some bits.
      Pixelation - Lesson 14 - Fix bit offset_instruction: |-
        A single extra bit was
        inserted into the stream of bits that make up the C of the Code.org logo.
        That extra bit bumps all of the other bits down the line which makes the logo
        look messed up. Hunt down the extra bit and remove it to fix the Code.org
        logo.
      Pixelation - Lesson 14 - Fix the error_instruction: |-
        Something happened to
        the bits in this image!  Find error and fix it!  Hint: a few extra bits were
        added.  You should only need to remove some bits.
      Pixelation - Lesson 14 - Make the Letter A_instruction: |-
        Make a 3x5 letter
        'A'. The widget is setup with the incorrect dimensions. Your first task
        is to set the second byte to the 8-bit binary code for 5: 0000 0101. Then
        start entering pixel data.
      Pixelation - Lesson 14 - Make your own B and W Image_instruction: |-
        Now make
        your own image! We've started you off with a 10x10 canvas but you can make
        it whatever size you want. Happy pixeling!
      Pixelation - Lesson 14 - Make your own B&W Image_instruction: |-
        Now make your
        own image! We've started you off with a 10x10 canvas but you can make it
        whatever size you want.  Happy pixeling!
      Pixelation - Lesson 15 - Color Free Play_instruction: |-
        Requirements: The icon
        must be 16x16 pixels. You must use the Pixelation Widget to encode the bits
        of color information. The image must be encoded with at least 12 bits per
        pixel.
      Pixelation - Lesson 15 - Color Shades 4x4_instruction: |-
        We start you out with
        the 4x4 image Maddie created in the video. Your task is to fill a 4x4 grid
        with colors using 12-bits per pixel. Here are the requirements: Row 1 - fill
        with shades of red. Row 2 - shades of green. Row 3 - shades of blue. Row 4
        - shades of gray.
      Pixelation - Lesson 15 - Color Shades_instruction: |-
        We start you out with the
        row of shades of red that Maddie created in the video. Experiment with 6-bit
        color by filling in the bottom row of the image with shades of a different
        color. Here is an example with some shades of blue. Try your own color!
      Pixelation - Lesson 15 - Complete 3-bit color_instruction: |-
        We start you with
        the 4x2 image Maddie was creating, but we've left out the last two squares.
        Finish off the image by figuring out which two colors are missing and encode
        them.
      Pixelation 2_instruction: |-
        Something happened to the bits in this image!  Find
        error and fix it!
      Pixelation 4x4 Empty_instruction: |-
        The width and height are now encoded in
        the pixel data. Can you figure out how to adjust the dimensions?
      Pixelation Bee_instruction: |-
        This larger image of a bee encodes color with
        12 bits per pixel, but viewing in hex makes it easier to see the color of
        each pixel. If you switch to binary mode - hold on to your hat - it's a lot
        of bits. Here's another mind-blowing thing to try: slide the bits per pixel
        up to 24 bits per pixel. What happens? Can you explain this behavior?
      Pixelation Flappy_instruction: |-
        Here is a bigger image at 9 bits per pixel.
        With 9 bits per pixel you can express 512 different colors. Click through
        to see the next image which is even more sophisticated, but easier to understand.
      Pizza on a Plate_instruction: |-
        Project Idea: Create a picture of something
        familiar from the real world. This requires persistence and planning!
      Planning Farmer_instruction: |-
        What a strange field of goodies! I wonder if
        there's a pattern here...
      Planter Test_instruction: Help me plant my fields!
      Play Lab Rocket 1_instruction: |-
        A rocket blasts off, traveling at 15 meters
        per second... press "Run" to see how this word problem looks as an animation.
      Play Lab Rocket 2_instruction: |-
        We've started the Design Recipe for rocket-height
        using the contract and examples you just wrote. Complete the function definition
        for rocket-height and run your animation.
      Play Lab Rocket 2B_instruction: |-
        A rocket blasts off, traveling at 15 meters
        per second. Using the Design Recipe, write a function called rocket-height
        that takes in a number of  seconds that have passed since the rocket took
        off, and produces the height of the rocket at that time.
      Play Lab Rocket 3_instruction: |-
        Awesome, now can you update that function so
        that our rocket moves more quickly? Make sure to update the purpose statement,
        examples, and function definition to launch a rocket at 40 meters per second.
      Play Lab Rocket 4 (copy 1)_instruction: |-
        Real rockets start off slowly and
        gain speed over time - let's make ours do the same! Write an exponential
        function that describes a rocket that travels at "seconds" squared meters
        per second.
      Play Lab Rocket 4_instruction: |-
        Real rockets start off slowly and gain speed
        over time - so let's add some simple acceleration to ours! Can you write
        a function that describes a rocket that is at 10 meters at 1 second, 40 meters
        at 2 seconds, 90 meters at 3 seconds, 160 at 4 seconds and so on?
      Play Lab Rocket 5_instruction: |-
        Much better, but let's write one more function
        with simple acceleration. This time the rocket should be 15 meters at 1 second,
        45 meters at 2 seconds, 95 at 3 seconds, and 165 at 4 seconds.
      Play Lab Rocket Free Play_instruction: |-
        Free Play: Experiment with your rocket-height
        function to make the rocket fly in different ways. Click "Finish" when you
        are done.
      Poorva copy U3L2 Using Simple Commands_instruction: |-
        Draw a 1x1 square above
        and to the left of the turtle's starting position. Click to see full instructions.
      Poorva-test_instruction: |-
        Here are regular instructions for a level. There
        is nothing fancy going on here.
      Practice Create Performance Task_instruction: |-
        Design and implement your practice
        Create Performance Task. (Click to see full instructions)
      Project - Final Image Scroller_instruction: |-
        Update the image scroller to respond
        to buttons and key presses. (Click to see full instructions)
      Project - Finish your canvas app_instruction: |-
        Extend the functionality of
        one of the effects, or create an entirely new one of your own. (Click to see
        full instructions)
      Project - Make Your Own Clicker Game_instruction: |-
        Complete your clicker game!
        (Click to see full instructions)
      Project - Your Own Multi Screen App_instruction: |-
        Create your multi-screen
        app. (Click to see full instructions.)
      Prompt Test_instruction: |-
        Build whatever you want. This is an example of a
        number-guessing game!
      Quantum Bee - Ryan_instruction: |-
        These clouds are bugging me! Some of the clouds
        have flowers inside, and some don't. I should check each cloud, and only
        get nectar from the flowers.
      Quantum Bee_instruction: "Florile violete pot avea ori 1 ori 0 \nnectar, dar
        nu știi exact care din ele! Ai grijă să nu colectezi nectar dintr-o \nfloare
        violetă dacă aceasta nu are deloc. Verifică dacă nectarul este egal cu 1 \nfolosind
        blocul - dacă."
      Robot Doodle_instruction: |-
        Project Idea: Create a picture of something familiar
        from the real world. This requires persistence and planning!
      Robot Doodle_2018_instruction: |-
        Project Idea: Create a picture of something
        familiar from the real world. This requires persistence and planning!
      Robot Drawing_instruction: |-
        Project Idea: Create a picture of something familiar
        from the real world. This requires persistence and planning!
      Robot_instruction: |-
        Project Idea: Create a picture of something familiar from
        the real world. This requires persistence and planning!
      Rocket Height Course A_instruction: |-
        Follow the Design Recipe to create a function
        rocket-height.
      Ryan - 4-5 Bee Conditionals 2_instruction: Albina vrea doar nectar acum. Nu
        toate obiectele sunt flori, deci verifică sub FIECARE NOR pentru a vedea dacă
        el ascunde o floare. Dacă este așa, atunci poți aduna nectar.
      Ryan - Bee Conditionals_instruction: |-
        Albina vrea doar nectar acum.
        Nu toate obiectele sunt flori, așa că verifică FIECARE NOR pentru a vedea
        dacă ascunde o floare. Dacă da, atunci poți aduna nectar.
      Ryan Doily Step 1_instruction: |-
        Now we're going to draw a doily step by step.
        First, draw a square.
      Ryan Doily Step 2_instruction: |-
        Now you need to turn and repeat it 20 times!
        How many degrees do you turn to get 360 after 20 iterations?
      Ryan Doily Step 3_instruction: |-
        Now you need to turn and repeat it 20 times!
        How many degrees do you turn to get 360 after 20 iterations?
      Ryan Test Locked Blocks_instruction: |-
        Aici este o funcţie numită "patrol."
        Editeaz-o pentru a muta pisica în sus cu 400 pixeli şi apoi în jos cu 400 pixeli.
      Ryan's clone of C4S15P10_instruction: "We've added one last function for you.\n\\r\n\\r\nUse
        an \"if\" statement to program your game to call the \"level_up\"\nfunction
        only when \"player_score\" becomes greater than a certain number.\\r\n\\r\nFor\nexample:
        \"player_score\" > 6\\r\n\\r\nPlay the game, and make it past level\n4 to
        move to the next puzzle. "
      RyanTest3_instruction: |-
        This level has shape-shifting turned on! Refresh to
        see different variants.
      SG Add Subgoals practice_instruction: |-
        Draw a 3x3 grid to the front and right
        of the turtle as efficiently as possible. The turtle should end at its original
        location, facing its original direction. (Click to see full instructions)
      SG U3L03 - draw rect function_instruction: |-
        Write a function called drawRectangle().\r
        (Click
        to see full instructions)
      SG U3L03 - draw step_instruction: |-
        Write the drawStep function. (Click to see
        full instructions)
      SG U3L03 Define and use turnAround_instruction: |-
        Define a function called turnAround.
        Call the function and then move the turtle forward. (Click to see full instructions)
      SG U3L03 Draw a T using turnAround_instruction: |-
        Draw a plus sign using the
        provided version of turnAround().  (Click to see full instructions)
      SG U3L03 Three Steps_instruction: |-
        Define a function called drawSide() which
        draws three steps and moves the turtle to prepare for the next side (Click
        to see full instructions)
      SG U3L03 define turnRight and draw a rectangle_instruction: |-
        Define a function
        called right() that turns the turtle to the right. Then use this function
        to draw a rectangle, as shown below. (Click to see full instructions)
      SG U3L03 draw diamond_instruction: |-
        Create a function called drawDiamond()
        that makes use of your previous work to draw the complete diamond. (Click
        to see full instructions)
      SG U3L04 - 3 by 3 with functions_instruction: |-
        Make the 3x3 square as efficiently
        as you can. (Click to see full instructions)
      SG U3L04 - snowflake_instruction: |-
        Create the design by breaking it down into
        layers of functions. (Click to see full instructions)
      SG U3L06 - moveForwardwithParams_instruction: |-
        Use a single command to move
        the turtle to the edge of the screen. (Click to see full instructions)
      SG U3L06 Challenge 1 triangle_instruction: |-
        Use the parameterized versions
        of the turtle commands to create a triangle with sides 100 pixels long. (Click
        to see full instructions)
      SG U3L06 Challenge 2 purple square_instruction: |-
        Read the documentation for
        penColor() and penWidth() before using them to draw the blue square.
      SG U3L06 Challenge 3 fill pink_instruction: |-
        Fill in the background of the
        screen with your favorite color. (Click to see full instructions)
      SG U3L06 Challenge 4 bullseye_instruction: |-
        Create the bullseye using hexadecimal
        colors and dot(). (Click to see full instructions)
      SG U3L06 Challenge 5 overlapping circles_instruction: |-
        This image is created
        just using dot() and penColor() but, how are we going to get those circles
        to be transparent?  If you haven't gotten the hint yet: check out the documentation!
      SG U3L06 Challenge 6 squiggles_instruction: |
        Read the documentation for the
        "arcLeft" and "arcRight" commands and then draw the squiggles as shown.
      SG U3L06 Challenge 7 smiley face_instruction: |-
        Use turnTo() and moveTo() to
        help draw a smiley face. (Click to see full instructions)
      SG U3L06 Challenge 8 make your own_instruction: |-
        Create a drawing of your own.
        (Click to see full instructions)
      SG U3L07 - Free Play Loops and Random_instruction: |-
        Free Play! Use what you
        learned from loops and random to make your own little scene. Have fun.
      SG U3L07 - allSeaGrass_instruction: |-
        Add 50 pieces of seagrass to the image
        by writing drawAllSeagrass with a loop. (Click to see full instructions)
      SG U3L07 - bubbles_instruction: |-
        Add 200 bubbles to the image by writing drawAllBubbles
        with a loop. (Click to see full instructions)
      SG U3L07 - createTriangleParam_instruction: |-
        Define a function that accepts
        a parameter to match the function calls and complete the image. (Click to
        see full instructions)
      SG U3L07 - fish_instruction: |-
        Add 15 fish to the image by writing drawAllFish
        with a loop. (Click to see full instructions)
      SG U3L07 - introSquare_instruction: |-
        Use a loop to draw a square. Then add
        another loop to draw many squares each one rotated some amount. (Click to
        see full instructions)
      SG U3L07 - loopsWithRandom_instruction: |-
        Increase the number of iterations
        to fill the screen with white. (Click to see full instructions)
      SG U3L07 - randomDots1_instruction: |-
        Increase the number of iterations to fully
        fill the screen with random dots. (Click to see full instructions)
      SG U3L07 - randomSquare_instruction: |-
        Draw the figure using a loop. (Click
        to see full instructions)
      SG U3L07 - seaGrass_instruction: |-
        Add a parameter to drawSeagrass that controls
        the number of waves in the grass. (Click to see full instructions)
      SG U3L07 - seaStar_instruction: |-
        Add 5 sea stars to the image by writing drawAllSeaStars
        with a loop. (Click to see full instructions)
      SG U3L07 - sunBeams_instruction: |-
        Add 100 sunbeams to the image by writing
        drawAllSunbeams with a loop. (Click to see full instructions)
      SG U3L07 - topDownDesign_instruction: |-
        Get comfortable with the structure of
        this program, then move on to the next exercise. (Click to see full instructions)
      SG U3L07 More Subgoals_instruction: |-
        Read the documentation for penColor()
        and penWidth() before using them to draw the blue square.
      SG U3L08 - createTwoParamTriangle_instruction: |-
        Define a function called drawTriangle()
        that accepts two parameters to set the size and width of the triangle. (Click
        to see full instructions)
      SG U3L08 - digitalScene_instruction: |-
        Create the functions you were assigned
        as part of your digital scene. (Click to see full instructions)
      SG U3L08 - drawSquareWithParam_instruction: |-
        Use drawSquare() to recreate the
        image of both squares, this time using parameters. (Click to see full instructions)
      SG U3L08 - fish_instruction: |-
        Add a parameter to drawFish that changes the
        size of the fish drawn. (Click to see full instructions)
      SG U3L08 - freePlay_instruction: |-
        Keep adding to your image by making more
        calls to your new functions with parameters. (Click to see full instructions)
      SG U3L08 - individualCode_instruction: |-
        Create the functions you were assigned
        as part of your digital scene. (Click to see full instructions)
      SG U3L08 - introUnderTheSea - recovery_instruction: |-
        Add an extra fish, starfish,
        and piece of seagrass to the image. Look at, but don't change, the functions
        that create them. (Click to see full instructions)
      SG U3L08 - introUnderTheSea_instruction: |-
        Add an extra fish, starfish, and
        piece of seagrass to the image. Look at, but don't change, the functions
        that create them. (Click to see full instructions)
      SG U3L08 - multiParamFish_instruction: |-
        Add three parameters to your drawFish
        function to accept red, green and blue values to make your fish different
        colors. (Click to see full instructions)
      SG U3L08 - paramsToStarfish_instruction: |-
        Add a parameter to drawStarfish that
        changes the size of the starfish drawn. (Click to see full instructions)
      SG U3L08 - randomInput_instruction: |-
        Use the randomNumber() blocks to test
        the functions you designed with random input. (Click to see full instructions)
      SG U3L08 - seaGrass_instruction: |-
        Add a parameter to drawSeagrass that changes
        the size of the piece of seagrass drawn. (Click to see full instructions)
      SG U3L08 - squareTwoParams_instruction: |-
        Call drawSquare() to complete the
        drawing of two squares. (Click to see full instructions)
      SG U3L08 comments_instruction: |-
        Use the randomNumber() blocks to test the functions
        you designed with random input. (Click to see full instructions)
      SG U3L08 how to add comments_instruction: |-
        Use the randomNumber() blocks to
        test the functions you designed with random input. (Click to see full instructions)
      SG U3L2 Using Simple Commands part 1_instruction: |-
        Draw a 1x1 square above
        and to the left of the turtle's starting position. Click to see full instructions.
      SG U3L2 Using Simple Commands_instruction: |-
        Draw a 1x1 square above and to
        the left of the turtle's starting position. Click to see full instructions.
      SG U3L2_Add-subgoals_instruction: |-
        Draw a 3x3 grid to the front and right of
        the turtle as efficiently as possible. The turtle should end at its original
        location, facing its original direction. (Click to see full instructions)
      SG U3L2_Turtle3by3Grid_instruction: |-
        Draw a 3x3 grid to the front and right
        of the turtle as efficiently as possible. The turtle should end at its original
        location, facing its original direction. (Click to see full instructions)
      SG U3L2_TurtleSquare_right_instruction: |-
        Draw a square to the front and to
        the right of the starting location. (Click to show full instructions)
      SGU3L07 - randomDots1_instruction: |-
        Increase the number of iterations to fully
        fill the screen with random dots. (Click to see full instructions)
      Sam the Butterfly 1 (copy 1)_instruction: |-
        This butterfly is named Sam, and
        the game area is Sam’s yard. Sam's yard is 400 pixels wide by 400 pixels
        tall! As you can see, Sam is free to walk around the yard, and the coordinates
        at the top of the screen update to tell you his location. Use the arrow keys
        to move sam around his yard. Help Sam collect all of the flags to move on.
      Sam the Butterfly 1_instruction: |-
        This bat is named Sam, and the game area
        is Sam’s yard. Sam's yard is 400 pixels wide by 400 pixels tall! As you can
        see, Sam is free to walk around the yard, and the coordinates at the top of
        the screen update to tell you his location. Click "Run" and then use the
        arrow keys to move Sam around his yard, making note of Sam's coordinates
        at different locations. Click "Finish" when you're ready to move on.
      Sam the Butterfly 2_instruction: |-
        Sam's mom wants to make sure that she can
        always see at least a bit of him, so lets write some functions that help make
        sure he doesn't go too far out of the yard. Here's a function called safe-left?
        - it should take a Number for its domain that represents Sam's x-coordinates
        and return true if he's completely visible on screen. If your function works,
        Sam shouldn't be able to leave the yard from the left side.
      Sam the Butterfly 3_instruction: |-
        In the last puzzle we kept Sam from leaving
        on the left, now let's do the same thing on the right. Complete the safe-right?
        function to make sure Sam can't go off the right side of the screen.
      Sam the Butterfly 4_instruction: |-
        Huh, we can keep Sam from leaving on the
        left, or we can keep him from leaving on the right, but how can we keep him
        safe from leaving both directions? Try using the and block to program the
        function on-screen? to check if Sam is safe-left? and safe-right?
      Sam the Butterfly 5_instruction: |-
        Free Play: Awesome, we've kept Sam safe
        on the left and right! Use this free play stage to experiment with your functions
        and further improve onscreen?
      Sam the Butterfly 6_instruction: |-
        We've added a new parameter "y" to the
        "on-screen?" function. Update the function so that it checks that "safe-left?"
        AND "safe-right?" AND "safe-up?" are all true. When you've fixed the
        function, try going out of the yard from the left, right, and top sides.
      Sam the Butterfly 7_instruction: |-
        Only one last direction to worry about! Create
        a "safe-down?" function and update the "on-screen?" function so that it
        checks up, down, left, and right.
      Sam the Butterfly Complete_instruction: |-
        Only one last direction to worry about!
        Create a "safe-down?" function and update the "on-screen?" function so
        that it checks up, down, left, and right.
      SpecialFrozenLevel_instruction: Ai devenit oficial un artist maestru! Creează
        un paradis de iarnă.
      Standalone_Artist_1_instruction: Bine ai venit la Artist! În primul rând, să
        încercăm să facem un pătrat simplu folosind blocul "rotește la dreapta" şi
        blocul "mută înainte". Fiecare latură ar trebui să aibă lungimea de 100 de
        pixeli.
      Standalone_Artist_2_instruction: Desenează acest romb cu unghiuri de 120 şi
        60 de grade şi laturile cu lungimea de 150 de pixeli.
      Standalone_Artist_3_instruction: Poţi desena acest hexagon cu laturi de 100
        de pixeli şi rotiri de 60 grade?
      Standalone_Artist_4_instruction: Acum ai un bloc nou cu care să te joci, bucla.
        Aceasta va repeta un set de comenzi. Ce se întâmplă dacă buclezi aceste comenzi
        de 6 ori?
      Standalone_Artist_5.5_instruction: 'Observă cum am simplificat codul rombului
        transformându-l într-o buclă. Poți repeta întreaga secvență de 12 ori pentru
        a desena floarea. Sugestie: Vei avea nevoie să rotești cu 30 de grade, după
        bucla rombului tău. astfel încât să nu tot desenezi peste acelaşi romb.'
      Standalone_Artist_5_instruction: De câte ori trebuie să repeți acest romb pentru
        a desena floarea?
      Standalone_Artist_6_instruction: 'Buclează acest cod hexagon de 6 ori pentru
        a crea designul. Cu câte grade va trebui să rotești de fiecare dată? Indiciu:
        împarte numărul de grade într-un cerc la numărul de câte ori buclezi.'
      Standalone_Artist_7_instruction: 'O funcţie este un alt instrument de programare
        care a te ajută să eviți să te repeți. Această funcţie desenează o floare,
        așadar o poţi folosi oricând vrei să desenezi o floare. Utilizează această
        funcție şi blocul nou "Salt" pentru a desena aceste flori. Sugestie: Florile
        sunt la aproximativ 150 de pixeli distanță una față de cealaltă'
      Standalone_Artist_8_instruction: Aici este o funcţie numită "Desenează o formă",
        pe care noi am programat-o să elaboreze hexagoane. Rulează codul pentru a
        vedea ce face şi apoi experimentează cu funcția pentru a vedea ce se întâmplă.
        Poţi să o faci să deseneze un model de pătrate, triunghiuri sau octagoane?
      Standalone_Artist_9_instruction: Acum mergi mai departe şi creează orice imagine
        dorești! Ai chiar şi o funcţie goală pe care o poți face să realizeze ce vrei
        tu!
      Standalone_Artist_v2_instruction: Bine ai venit la Artist! În primul rând, să
        încercăm să facem un pătrat simplu folosind blocul "rotește la dreapta" şi
        blocul "mută înainte". Fiecare latură ar trebui să aibă lungimea de 100 de
        pixeli.
      StepIntro_instruction: Here's how to use the "Step" button.
      Test Play Lab_instruction: This is a test play lab level.
      Test embedded Blockly in instructions_instruction: |-
        As a block element, we
        should be able to include XML representing a valid Blockly block or blocks.\r
        \r
        <xml>\r
          <block
        type="draw_move_by_constant">\r
            <title name="DIR">moveForward</title>\r
            <title
        name="VALUE">100</title>\r
          </block>\r
        </xml>\r
        \r
        We also support
        Blockly XML as an inline element like so: <xml><block type="draw_move_by_constant"><title
        name="DIR">moveForward</title><title name="VALUE">100</title></block></xml>.
        The difference in input format being that this one is embedded within a paragraph,
        whereas the previous one is in a text block of its own. The difference in
        output is comparable.
      Test embedded K1 Blockly in instructions_instruction: |-
        Use three `move west`
        blocks and one `pick corn` block to solve this puzzle.
      Test of comment block_instruction: Drag out the subgoal label block you want.
      Testing Quantum Farmer_instruction: "Wow, look at that! \\r\n\\r\nI don't know\nhow
        many shovelfuls of dirt this hole needs.  \\r\nCan you write a program\nthat
        keeps using the `fill` block until the ground is even?  "
      Text Compression 1_instruction: |
        Look for patterns (repeated words or phrases)
        in the text. Enter the patterns you see into the dictionary on the right.
        As you type entries into the dictionary, the symbol for the entry is inserted
        into the text in place of the pattern.\r
        \r
      The Vigenere Cipher Widget_instruction: Instrucţiuni
      The Vigenere Cipher_instruction: Instrucţiuni
      Total Artist Clone Me_instruction: |-
        Freeplay: Here are the functions you've
        written, and some more for you to play with. Draw something awesome! Play
        with the pen width to see how different your drawings look!
      U1L10 NetSim numbers with decimal_instruction: |-
        Invent and test a protocol
        for encoding and sending text messages. Your protocol must include the letters
        a-z, spaces, and common punctuation marks. You may add additional characters
        if you wish. See the worksheet handed out by your teacher for more detailed
        instructions!
      U1L11 NetSim numbers with Ascii_instruction: |-
        Work with a partner or in a small
        team to develop a protocol that allows you to send formatted text. See the
        worksheet handed out by your teacher for more detailed instructions!
      U1L13 Text Compression_instruction: |-
        Look for patterns (repeated words or phrases)
        in the text. Enter the patterns you see into the dictionary on the right.
        As you type entries into the dictionary, the symbol for the entry is inserted
        into the text in place of the pattern.
      U1L4 NetSim SendAB_instruction: "Develop, document, and test a protocol that\nallows
        you to use Internet Simulator to relay a message. See the worksheet\nfor more
        detailed instructions.  "
      U1L8 NetSim numbers no decimal_instruction: Default instructions
      U1L8 NetSim numbers with decimal_instruction: |-
        With your partner, develop a
        protocol or set of rules for communicating a drawing using only bits. See
        the worksheet handed out by your teacher for more detailed instructions!
      U2 Vigenere_instruction: Test
      U2 frequency caesar_instruction: Instrucţiuni
      U2 frequency random sub_instruction: Instrucţiuni
      U2 vigenere cipher_instruction: Instrucţiuni
      U2L04 - NetSim Routers with Addresses_instruction: |-
        Send messages with your
        classmates (Click to see full instructions)
      U2L05 - NetSim - Packets and Building TCP_instruction: |-
        Develop a Protocol
        for Reliably Sending a Message.\r
        \r
        Constraints:\r
        - Packets may contain
        only 6 characters\r
        - Packets may drop with small probability\r
        - Packets
        may not arrive in order
      U2L10 NetSim Automatic DNS_instruction: |-
        In this version of the Internet Simulator,
        a Domain Name System (DNS) is provided for you and knows the IP addresses
        of all connected computers. Send a message in the form GET [hostname] to the
        DNS service at address <yourRouterNumber>.15 to get a student's address.
      U2L10 NetSim Manual DNS_instruction: |-
        In this version of the simulator you
        can't see the other students' addresses.  Instead, one of you must act as
        a name service, to help share addresses with each other.
      U2L14 frequency random_instruction: Test
      U2L2 NetSim Hub Mode_instruction: |
        Now use the Internet Simulator to send the
        battleship moves. For setup, join a Room with your group, and add ships to
        your paper board for each opponent. When playing, all communication must be
        done through the tool, so no talking, but have fun!\r
      U2L3 NetSim Hub Mode_instruction: |-
        Use the Internet Simulator to test out your
        group's binary communication protocol for battleship. How short can you make
        the message and response?
      U2L4 NetSim Routers Addresses_instruction: |-
        For this activity, connect to a
        router with the others in your group. Important note: The router will only
        properly route messages where the first 4 bits are the To: address and the
        second 4 bits are the From: address.\r
        \r
        [TODO: NetSim needs to support
        hierarchical addresses. For now, level is set up for 4 bit to and from addresses]
      U2L5 NetSim Classroom Internet_instruction: |
        For this activity, connect to
        a router with the others in your group. The Internet Simulator now provides
        a place for you to put the To and From addresses, so you don't have to type
        out the bits manually.\r
        \r
      U2L7 NetSim Need for Packets_instruction: |-
        Transfer your favicon to a partner
        across a network in which the larger a packet grows, the more likely it is
        to be dropped.
      U3 - Arrays - Demo App_instruction: |-
        Use the "My Favorite Things" app. How
        might this app be making use of an array? (Click to see full instructions)
      U3 - Arrays - appendItem_instruction: |-
        Create an array of odd numbers 1-11
        by using appendItem. (Click to see full instructions)
      U3 - Arrays - assignment_instruction: |-
        Use indexes to change the values in
        this array from 1 to 0. (Click to see full instructions)
      U3 - Arrays - assignment2_instruction: |-
        Calculate the sum of three values stored
        in an array. (Click to see full instructions)
      U3 - Arrays - assignment3_instruction: |-
        Increase the value of each value in
        the randomly generated array by 1. (Click to see full instructions)
      U3 - Arrays - createFirstArray_instruction: |-
        Create an array of the even numbers
        from 0 to 10 and display its contents with console.log. (Click to see full
        instructions)
      U3 - Arrays - expressionsAsIndexes_instruction: |-
        Write a program that displays
        a randomly chosen color from the array. (Click to see full instructions)
      U3 - Arrays - favThings Counting Variable_instruction: |-
        Create a global variable
        for the current index and use it to display the first item in the array. (Click
        to see full instructions)
      U3 - Arrays - favThings Next_instruction: |-
        Write code that allows the user
        to move forward through your list by clicking the "Next" button. (Click
        to see full instructions)
      U3 - Arrays - favThings Prev_instruction: |-
        Write code that allows the user
        to move backward through your list by clicking the "Last" button. (Click
        to see full instructions)
      U3 - Arrays - favThings addItem_instruction: |-
        Write code that allows a user
        to add their own favorite things to the list. (Click to see full instructions)
      U3 - Arrays - favThings bounds_instruction: |-
        Add if statements to your event
        handlers that prevent the global index from going out of bounds. (Click to
        see full instructions)
      U3 - Arrays - favThings createArray_instruction: |-
        Create an array of words
        describing your favorite things. (Click to see full instructions)
      U3 - Arrays - favThings firstOutput_instruction: |-
        Use setText to display the
        first item in the array. (Click to see full instructions)
      U3 - Arrays - favThings giveIDs_instruction: |-
        Give your UI elements descriptive
        and meaningful IDs. (Click to see full instructions)
      U3 - Arrays - favThings keepPlaying_instruction: |-
        Make any other improvements
        you want! (Click to see full instructions)
      U3 - Arrays - favThings template_instruction: |-
        Give your UI elements descriptive
        and meaningful IDs. (Click to see full instructions)
      U3 - Arrays - globalVariableIndex_instruction: |-
        Give your UI elements descriptive
        and meaningful IDs. (Click to see full instructions)
      U3 - Arrays - indexPractice_instruction: |-
        Write the contents of the array to
        the screen in numerical order. (Click to see full instructions)
      U3 - Arrays - insertingItems_instruction: |-
        Insert items into an array to form
        a complete sentence. (Click to see full instructions)
      U3 - Arrays - insertionErrors_instruction: |-
        Run each command that references
        indexes that are out of bounds and observe the results. (Click to see full
        instructions)
      U3 - Arrays - introIndex_instruction: |-
        Display the first and last element in
        the array. Display the number 5 from the array. (Click to see full instructions)
      U3 - Arrays - length_instruction: |-
        Use list.length to determine the length
        of each array. (Click to see full instructions)
      U3 - Arrays - lengthMinus1_instruction: |-
        Use list.length - 1 to log the last
        item in the array to the console. (Click to see full instructions)
      U3 - Arrays - remove_instruction: |-
        Remove items from an array to form a complete
        sentence. (Click to see full instructions)
      U3 - Arrays - stringsInArrays_instruction: |-
        Write a sentence word by word by
        adding strings to an array. (Click to see full instructions)
      U3 - Canvas - 200dots_instruction: |-
        Add a loop to your program that draws 200
        dots on your canvas. (Click to see full instructions)
      U3 - Canvas - One Dot sprayPaint_instruction: |-
        Write code that redraws your
        image using a dot whose x and y locations use offsetX and offsetY with a small
        random value added. (Click to see full instructions)
      U3 - Canvas - appendToArray_instruction: |-
        Create an array to store each event
        parameter. Append each event parameter to this array within your event handler.
        (Click to see full instructions)
      U3 - Canvas - changeToMouseMove_instruction: |-
        Change your program so that dots
        are drawn at the location of the mouse as the user moves the mouse on the
        canvas. (Click to see full instructions)
      U3 - Canvas - clickToAdd_instruction: |-
        Change your program so that dots are
        added to the canvas when the user clicks on it. (Click to see full instructions)
      U3 - Canvas - delete_instruction: |-
        Create a button that deletes the drawing
        by clearing the canvas and removing all stored values. (Click to see full
        instructions)
      U3 - Canvas - draw at click point_instruction: |-
        Change your program so that
        dots are drawn at the location of the mouse click. (Click to see full instructions)
      U3 - Canvas - freePlay_instruction: |-
        Extend the functionality of one of the
        effects, or create an entirely new one of your own. (Click to see full instructions)
      U3 - Canvas - introCanvas_instruction: |-
        Add a canvas to your app and set it
        to be the active canvas. Then add a large dot to your canvas. (Click to see
        full instructions)
      U3 - Canvas - movementFunction fix Orig_instruction: |-
        Modify the "Original"
        button event handler so that it takes the movement of the mouse into account.
        (Click to see full instructions)
      U3 - Canvas - movementFunction_instruction: |-
        Write a function that takes the
        movement of the mouse as input and generates a line width as output. (Click
        to see full instructions)
      U3 - Canvas - redrawOriginal_instruction: |-
        Write a function that processes
        your array, redrawing the dots as they originally appeared. (Click to see
        full instructions)
      U3 - Canvas - redrawRandom_instruction: |-
        Set up a button and event handler
        for the random function. (Click to see full instructions)
      U3 - Canvas - redrawRandom2_instruction: |-
        Write a function that processes your
        array, redrawing every dot with a random size. (Click to see full instructions)
      U3 - Canvas - shiftKey_instruction: |-
        Add an if statement to your event handler
        so dots are only drawn when the shift key is pressed. (Click to see full instructions)
      U3 - Canvas - sketch_instruction: |-
        Write code that redraws your image using
        a sketch effect. (Click to see full instructions)
      U3 - Canvas - sprayPaint_instruction: |-
        Update the spray paint code so that
        it redraws your image using multiple random dots instead of using a nested
        for loop. (Click to see full instructions)
      U3 - Canvas - transparentDots_instruction: |-
        Change the colors of your dots
        so they have a fully transparent stroke and partially transparent fill. (Click
        to see full instructions)
      U3 - Canvas - usingOffsetXY_instruction: |-
        Add a console.log command inside
        the function of your event handler. Use it to display the event parameter.
        Click on the screen to see the contents of the event parameter (Click to see
        full instructions)
      U3 - Conditional Basics - 6_instruction: |-
        Add a setText after the if statement
        to "Nope. Guess again." (Click to see full instructions)
      U3 - Conditionals - Combine AND OR Simple_instruction: |-
        Write an if statement
        that uses AND and OR to display "Sleep in!" if it's the weekend and the
        user is a teenager. (Click to see full instructions.
      U3 - Conditionals - Combine AND OR and NOT_instruction: |-
        Write an if statement
        that uses AND and OR to display "Time to go to school!" if it's not the
        weekend and the user is under 18. (Click to see full instructions.)
      U3 - Conditionals - Combine AND and OR_instruction: |-
        Write an if statement
        that uses AND and OR to display "Time to go to school!" if it's not the
        weekend and the user is under 18. (Click to see full instrucitons.
      U3 - Conditionals - Simple AND_instruction: |-
        Write an if statement that uses
        AND to display "You are a teenager." if the user enters an age between 13
        and 19. (Click to see full instructions)
      U3 - Conditionals - Simple OR_instruction: |-
        Write an if statement that uses
        OR to display "It's the weekend!" if the user enters a weekend day at the
        prompt. (Click to see full instructions)
      U3 - Conditionals - intoOr_instruction: |-
        Add 2 if statements that use the OR
        operator. (Click to see full instructions)
      U3 - Conditionals - introAND_instruction: |-
        Add 2 if statements that use the
        OR operator. (Click to see full instructions)
      U3 - Design Mode - Console Log_instruction: |-
        Update the ID names and `console.log`
        messages to match the correct button. (Click to see full instructions.)
      U3 - Design Mode - Layers and Delete_instruction: |-
        Fix the layout of the bullseye
        game. (Click to see full instructions)
      U3 - Design Mode - Multi Screens 2_instruction: |-
        Make a 2 screen app which
        can switch back and forth between a black screen and a white screen using
        buttons. (Click to see detailed instructions.)
      U3 - Design Mode - Multi Screens_instruction: |-
        Make a 2 screen app with a black
        screen and a white screen. (Click to see detailed instructions)
      U3 - Design Mode - Other Events_instruction: |-
        Delete the button and make the
        image move to a random location when you click on it. (click to see detailed
        instructions)
      U3 - Design Mode - WTF Console Log_instruction: |-
        Add a 3 console.log messages
        and test them out. (Click to see full instructions.)
      U3 - Design Mode -Recreate Beyond Buttons_instruction: |-
        Recreate the game from
        the "Chaser Game" with a Welcome Screen and Game Over Screen. (Click to
        see full instructions.)
      U3 - Design Mode 1_instruction: |-
        Add a large red button to your screen using
        Design Mode. (Click for full instructions.)
      U3 - Dice - Dropdown and Score_instruction: |-
        Add guess and score to the Dice
        Game (Click to see full instructions)
      U3 - Dice - Dropdown with Strings_instruction: |-
        Add a dropdown for difficulty
        level that prints the difficulty level in the console. (Click to see full
        instructions)
      U3 - Dice - If_instruction: |-
        Show different die images for the random number
        generated. (Click to see full instructions)
      U3 - Dice - Nested_instruction: |-
        Use nested if statements to make the scoring
        different for the different game levels. (Click to see full instructions)
      U3 - High Low - Debug_instruction: |-
        Debug the order of the conditionals so
        that it will actually tell the user when their guess is close. (Click to see
        full instructions)
      U3 - High Low - Dropdown_instruction: |-
        Add a dropdown for their guess instead
        of promptNum (Click to see full instructions)
      U3 - High Low - Else if_instruction: |-
        Add an else-if statement in order to
        tell the user if their guess is high or low instead of just wrong. (Click
        to see full instructions)
      U3 - High Low - Else_instruction: |
        Add an else statement so that the program
        will tell the user when they are right and when they are wrong. (Click to
        see full instructions)\r
      U3 - High Low - If_instruction: |-
        Add code to the if statement that indicates
        the user guessed the secret number. (Click to see full instructions)
      U3 - Keys - Add Image URLs_instruction: |-
        Add image URLs to your array. Replace
        the text area with an image and setText with setImageURL. Then test your app!
        (Click to see full instructions)
      U3 - Keys - Buttons and Keys_instruction: |-
        Have the program respond the same
        way for both clicking images on the screen and hitting the up and down keys
        on the keyboard. (Click to see full instructions)
      U3 - Keys - Demo App_instruction: |-
        Play with the image scroller. Press the
        left and right arrows to progress through the images.
      U3 - Keys - Final Image Scroller_instruction: |-
        Update the image scroller to
        respond to buttons and key presses. (Click to see full instructions)
      U3 - Keys - Functions_instruction: |-
        Write doUpArrow and doDownArrow functions
        and call the functions instead of duplicating the code. (Click to see full
        instructions)
      U3 - Keys - Key Up and Down_instruction: |-
        Try out the keyup and keydown events
        to see how they are different from keypress. (Click to see full instructions)
      U3 - Keys - Multiple Keys_instruction: |-
        Play a different sound when the down
        arrow is pressed. (Click to see full instructions)
      U3 - Keys - Practice Adding Images with URL_instruction: |-
        Add image URLs to
        your image array. Test out the add button. Style your image scroller. (Click
        to see full instructions)
      U3 - Keys - Words to Images_instruction: |-
        Add image URLs to your image array.
        Test out the add button. Style your image scroller. (Click to see full instructions)
      U3 - Loops -  9 Part 2_instruction: |-
        Change the boolean expression for the
        while loop so that it will roll until both dice are greater than 3. (Click
        to see full instructions)
      U3 - Loops -  Complex Condition_instruction: |-
        Change the boolean expression
        for the while loop so that it will stop when both dice are greater than or
        equal to 5. (Click to see full instructions)
      U3 - Loops - 1_instruction: |-
        Change the condition for the while loop to check
        if the variable num is less than 90. (Click to see full instructions)
      U3 - Loops - 10_instruction: |-
        Write a program that simulates the rolling of
        two dice. Roll the dice repeatedly until the sum of the dice is either 7 or
        11.
      U3 - Loops - 11_instruction: |-
        Fix the condition so that it keeps rolling the
        die as long as the value is not a 2 or a 3 instead of rolling infinitely.
        (Click to see full instructions)
      U3 - Loops - 12_instruction: |-
        Change the code so that it prints the string
        "Hi" 5 times. (Click to see full instructions)
      U3 - Loops - 13_instruction: |-
        Update the code to count up by 3 instead of 1.
        (Click to see full instructions)
      U3 - Loops - 14_instruction: |-
        Change the loop condition to prevent the infinite
        loop and stop counting once the count is past 30. (Click to see full instructions)
      U3 - Loops - 15_instruction: |-
        Count the number of times the sum of the dice
        is 12. (Click to see full instructions)
      U3 - Loops - 16_instruction: |-
        Find out how many times you have to roll to get
        the sum of 7 100 times (Click to see full instructions)
      U3 - Loops - 2_instruction: |-
        Try creating an infinite loop using !=, > and
        <. (Click to see full instructions)
      U3 - Loops - 3_instruction: |-
        Change the if statement to a while loop so the
        program will run until it rolls a 6. (Click to see full instructions)
      U3 - Loops - 4_instruction: |2-
         Use the Debug Commands to make a list of all
        the values rolled before a 6. (Click to see full instructions)
      U3 - Loops - 5_instruction: |-
        Add code inside the while loop which will update
        the variable num so that the condition will eventually become false. (Click
        to see full instructions)
      U3 - Loops - 6_instruction: |-
        Fix the problem so the loop will run at least
        once. Change the initial value of num to a dummy value such as -1. (Click
        to see full instructions)
      U3 - Loops - 7_instruction: |-
        Without adding any lines of code, reorder the
        code so that it prints all the values of num. (Click to see full instructions)
      U3 - Loops - 8_instruction: |-
        Debug which number is not getting printed and
        add a write statement to display that value. (Click to see full instructions)
      U3 - Loops - 9_instruction: |2-
         Modify the condition so that it keeps rolling
        as long as both are less than 3. (Click to see full instructions)
      U3 - Loops - Continue_instruction: |2-
         Use the Debug Commands to to make a list
        of all the values rolled before a 6. (Click to see full instructions)
      U3 - Loops - Minus Minus_instruction: |-
        Change the code to count down from 10
        to 1. (Click to see full instructions)
      U3 - Loops - Plus Plus_instruction: |-
        Change the code to use count++ instead
        of count = count + 1.  (Click to see full instructions)
      U3 - Loops - Typing in Console_instruction: |-
        Use console to check the ending
        value of num. (Click to see full instructions)
      U3 - Loops - minus = operator_instruction: |-
        Update the code to use the -= operator
        to count from 30 down to 0 by 3's. (Click to see full instructions)
      U3 - Loops - plus and minus = operator_instruction: |-
        Update the code to use
        the += operator. (Click to see full instructions)
      U3 - Loops And Arrays - Add 5_instruction: |-
        Add 5 to all the values in an array
        (Click to see full instructions)
      U3 - Loops And Arrays - Challenge 1_instruction: |-
        Write a function that finds
        and returns the minimum value in an array.   (Click to see full instructions)
      U3 - Loops And Arrays - Challenge 2_instruction: |-
        Write a function that finds
        and returns the minimum value in an array.   (Click to see full instructions)
      U3 - Loops And Arrays - Counting Times_instruction: |-
        Count the number of times
        5 appears in an array. (Click to see full instructions)
      U3 - Loops And Arrays - Divid by 2_instruction: |-
        Divide every value in the
        array by 2. (Click to see full instructions)
      U3 - Loops And Arrays - Find Max_instruction: |-
        Design a function that displays
        the smallest number in an array  (Click to see full instructions)
      U3 - Loops And Arrays - Find Min_instruction: |-
        Complete the findMinVal function
        to find and display the smallest value in an array  (Click to see full instructions)
      U3 - Loops And Arrays - Functions that Return Value_instruction: |-
        Call findMin
        within the console.log statement to calculate the minimum of two values.  (Click
        to see full instructions)
      U3 - Loops And Arrays - General Search Param_instruction: |-
        Add a second parameter
        to the search function for the value to search for.  (Click to see full instructions)
      U3 - Loops And Arrays - Intro For Loop_instruction: |-
        Add a for loop with a
        console.log inside and test out the 3 pieces of the for loop. (Click to see
        full instructions)
      U3 - Loops And Arrays - Linear Search_instruction: |-
        Visit every element in
        the array and display "true" if the value is a 5, and "false" otherwise.
        (Click to see full instructions)
      U3 - Loops And Arrays - Loop Array If_instruction: |-
        Use an if statement to
        only display the values in the array that are greater than 5. (Click to see
        full instructions)
      U3 - Loops And Arrays - Make it a Function - add list parameter_instruction: |-
        Create
        a function that takes a list parameter and prints if the list contains a 5.
        (Click to see full instructions)
      U3 - Loops And Arrays - Make it a Function_instruction: |-
        Move the code that
        searches the list for a 5 into a function called "search". (Click to see
        full instructions)
      U3 - Loops And Arrays - Multiple Returns_instruction: |-
        Test out the return
        values of the findMax function.  (Click to see full instructions)
      U3 - Loops And Arrays - Print Array_instruction: |-
        Use a for loop to print out
        all the values in an array. (Click to see full instructions)
      U3 - Loops And Arrays - Printing Single True_instruction: |-
        Process the array
        and display a single "true" if the array contains a 5 or a single "false"
        if it does not.  (Click to see full instructions)
      U3 - Loops And Arrays - Return Index_instruction: |-
        Make the search function
        return the index of the search value in the array. (Click to see full instructions)
      U3 - Loops And Arrays - Return Value_instruction: |-
        Use constrain in this simple
        app to keep the turtle from driving off the screen.  (Click to see full instructions)
      U3 - Loops And Arrays - Search and Remove_instruction: |-
        Search for 5 in the
        array and remove it from the array. (Click to see full instructions)
      U3 - Loops And Arrays - Search with Boolean Var_instruction: |-
        Make a boolean
        variable to use as a flag to keep track of whether there is a 5 in the array.
        (Click to see full instructions)
      U3 - Loops And Arrays - useFindMin_instruction: |-
        Call findMin within the console.log
        statement to calculate the minimum of two values.  (Click to see full instructions)
      U3 - Movie Bot - Multiple If Sequences_instruction: |-
        Add another set of if,
        else if, and else statements inside the question if statement to check for
        keywords for movie ratings (G, PG, PG-13, and R). (Click to see full instructions)
      U3 - Movie Bot - Nested Motivation_instruction: |-
        Add a separate set of if statements
        to check for a "?" in the input. (Click to see full instructions)
      U3 - Movie Bot - When Multiple If Statements_instruction: |-
        Add an if and else-if
        statement that checks for please and thank you. (Click to see full instructions)
      U3 - Movie Bot - toLowerCase_instruction: |-
        Use the toLowerCase command to change
        all user input into lowercase letters after they enter it. (Click to see full
        instructions)
      U3 - Practice Create Performance Task_instruction: |-
        Design and implement your
        practice Create Performance Task. (Click to see full instructions)
      U3 - Read Record - 1.2_instruction: |
        Console.log the records returned by a
        call to readRecords. (Click to see full instructions)\r
      U3 - Read Record - 1.5_instruction: |
        Console.log the records returned by a
        call to readRecords. (Click to see full instructions)\r
      U3 - Read Record - 1.6_instruction: |
        Console.log the records returned by a
        call to readRecords. (Click to see full instructions)\r
      U3 - Read Record - 1_instruction: |
        Console.log the records returned by a call
        to readRecords. (Click to see full instructions)\r
      U3 - Read Record - 2_instruction: |
        Change the table name so that the records
        are read from the new table.(Click to see full instructions)\r
      U3 - Read Record - 3_instruction: |
        Change the name of the table in a readRecords
        command to read from a table that does not exist. (Click to see full instructions)\r
      U3 - Read Record - 4.1_instruction: |
        Print out each record return from the
        readRecords call individually. (Click to see full instructions)\r
      U3 - Read Record - 4_instruction: |
        Print out each record return from the readRecords
        call individually. (Click to see full instructions)\r
      U3 - Read Record - 5 and half_instruction: |
        Print out the name of each movie
        in the records return from the readRecords call. (Click to see full instructions)\r
      U3 - Read Record - 5_instruction: |
        Print out the name of each movie in the
        records return from the readRecords call. (Click to see full instructions)\r
      U3 - Return Values - constrainTurtle_instruction: |-
        Use constrain in this simple
        app to keep the turtle from driving off the screen.  (Click to see full instructions)
      U3 - Return Values - debuggingConstrain_instruction: |-
        Correct the error in
        constrain so that it returns the appropriate value.  (Click to see full instructions)
      U3 - Return Values - debuggingMaxVal_instruction: |-
        Correct the error in maxVal
        so that it correctly reports the maximum value.  (Click to see full instructions)
      U3 - Return Values - debuggingReturns_instruction: |-
        Correct the error in maxVal
        so that it correctly reports the maximum value.  (Click to see full instructions)
      U3 - Return Values - increase1_instruction: |-
        Call the increase function within
        moveForward, write, and console.log.  (Click to see full instructions)
      U3 - Return Values - increase2_instruction: |-
        Change the increase function to
        return 3 times the input value. (Click to see full instructions)
      U3 - Return Values - min1_instruction: |-
        Test out the return values of the findMax
        function.  (Click to see full instructions)
      U3 - Return Values - useFindMin_instruction: |-
        Call findMin within the console.log
        statement to calculate the minimum of two values.  (Click to see full instructions)
      U3 - Return Values - useMinVal_instruction: |-
        Call minVal within the console.log
        statement to calculate the minimum of two values.  (Click to see full instructions)
      U3 - Return Values - wrapTurtle_instruction: |-
        Write wrap in this simple app
        to let the turtle "wrap" to the other side of the screen when it goes off.  (Click
        to see full instructions)
      U3 - Return Values - writeMaxVal_instruction: |-
        Write the function maxVal and
        then use it within the console.log statement to calculate the maximum of two
        values.  (Click to see full instructions)
      U3 - Search Terms - 1_instruction: |
        Create an array of all the movies made
        in 2008 and print it out. (Click to see full instructions)\r
      U3 - Search Terms - 2_instruction: |
        Print out all the movies with year 2008
        using the readRecords search terms. (Click to see full instructions)\r
      U3 - Search Terms - 3_instruction: |
        Print whether or not there are movies matching
        the search criteria (Click to see full instructions)\r
      U3 - Search Terms - 4_instruction: |
        Print whether or not there are movies matching
        the search criteria (Click to see full instructions)\r
      U3 - Search Terms - 5_instruction: |
        Print out the cities that are in California
        or have a population of 2,000,000. (Click to see full instructions)\r
      U3 - Search Terms - 6_instruction: |
        Print out the cities that are in California
        or have a population of 2,000,000. (Click to see full instructions)\r
      U3 - Simple Drawing - Comments_instruction: Do this
      U3 - Simple Drawing - Ellipse and No Fill_instruction: Do this
      U3 - Simple Drawing - Fill_instruction: Do This
      U3 - Simple Drawing - No Fill_instruction: Do this
      U3 - Simple Drawing - Order of Blocks_instruction: Do this
      U3 - Simple Drawing - Oval_instruction: Do This
      U3 - Simple Drawing - Personal Drawing_instruction: DO This
      U3 - Simple Drawing - Rectangle Width and Height_instruction: Do This
      U3 - Simple Drawing - Rectangle_instruction: Do This
      U3 - Simple Drawing - Road Ellipse_instruction: Do This
      U3 - Simple Drawing - Road Rects and Color_instruction: Do This
      U3 - Simple Drawing - Simple Shape Drawing_instruction: Do This
      U3 - Simple Drawing - Stroke and Stroke Weight_instruction: Do this
      U3 - Simple Drawing - X and Y values_instruction: Do This
      U3 - Simple Drawing - regular polygon_instruction: Do this
      U3 - Simple Drawing - text_instruction: Do This
      U3 - Simulation - 1_instruction: |-
        Use a while loop to "flip a coin 10 times"
        and write the values to the screen. (Click to see full instructions)
      U3 - Simulation - 2.1_instruction: |-
        Change your looping condition so the simulation
        runs until there are 5 heads flipped. (Click to see full instructions)
      U3 - Simulation - 2.5_instruction: |-
        Run your simulation to get the full 10,000
        heads! How long did it take? (Click to see full instructions)
      U3 - Simulation - 2_instruction: |-
        Keep track of how many heads (1's) your
        program generates and print the results to the screen. (Click to see full
        instructions)
      U3 - Simulation - 3_instruction: |
        Add functionality that counts how many heads
        in a row are flipped. (Click to see full instructions)\r
      U3 - Simulation - 4_instruction: |-
        Update your while loop's condition so the
        the coin flips until there are three heads in a row. (Click to see full instructions)
      U3 - Simulation - 5_instruction: |-
        Change your while loop to run until you get
        a streak of 12 heads. How many flips did it take? (Click to see full instructions)
      U3 - Simulation - 6_instruction: |-
        Keep adding to your simulation. What do you
        want to explore next? (Click to see full instructions)
      U3 - Simulation - App_instruction: |-
        Change your code to run the full simulation
        with 10,000 coins. What was your longest streak of heads? (Click to see full
        instructions)
      U3 - Simulation - Template_instruction: |-
        Use a while loop to "flip 10 coins"
        and write them to the screen. (Click to see full instructions)
      U3 - Sprites - Intro Sprites_instruction: Do This
      U3 - Sprites and Mod - Create  and Draw Sprite_instruction: Do This
      U3 - Sprites and Mod - Mouse Width and Height_instruction: Do this
      U3 - Sprites and Mod - Mouse X and Y_instruction: Do this
      U3 - Sprites and Mod - Rand Around Mouse_instruction: Do this
      U3 - Sprites and Mod - Rand Shape Color_instruction: Do This
      U3 - Sprites and Mod - Shape Color_instruction: Do This
      U3 - Sprites and Mod - Wrap Many Squares_instruction: Do This
      U3 - Sprites and Mod - X and Y Prop_instruction: Do This
      U3 - Sprites and Mod - two sprites_instruction: Do This
      U3 - User Input - Save getText To Variable_instruction: |-
        Save the age and name
        of the user in variables (Click to see full instructions)
      U3 - User Input - Saving After Input_instruction: |-
        Save the age of the user
        in a variable using getText() (Click to see full instructions)
      U3 - User Input and String -  Concat_instruction: |-
        Output a message about age
        in a Text Area (Click to see full instructions)
      U3 - Variables - Clicker Game_instruction: |-
        Create your improved Chaser-Game
        here. (Click to see full instructions)
      U3 - Variables - Debug Scope_instruction: |-
        Why isn't the value of foo changing
        correctly? Make a guess. (Click to see full instructions)
      U3 - Variables - Debugging with Turtle_instruction: |-
        Use your new debugging
        techniques to get the code to run correctly (Click to see full instructions)
      U3 - Variables - Decrement_instruction: |-
        Decrement the value of the variable.
        (Click to see full instructions)
      U3 - Variables - Identify Variables_instruction: |-
        Identify the values printing
        in the terminal with console.log statements. (Click to see full instructions)
      U3 - Variables - Increment_instruction: |-
        Use the console.log debugging technique
        to see what is happening in this example. Add another variable and increment
        its value. (Click to see full instructions)
      U3 - Variables - Incrementing Variables_instruction: |-
        Create a repeat loop
        for the repeated code and use increment to recreate the original program with
        less lines of code! (Click to see full instructions)
      U3 - Variables - Read Using Turtle_instruction: |-
        Create a second set of variables
        for x and y position. Move turtle to that new location. (Click to see full
        instructions)
      U3 - Variables - Reassigning Variables with Console.log_instruction: |-
        Add another
        reassignment statement at the end of the code to change the value of the variable
        at second time. (Click to see full instructions)
      U3 - Variables - Set to Expression with Other Variables and Turtle_instruction: |-
        (click
        to see full instructions)
      U3 - Variables - Set to Expression with Other Variables_instruction: |-
        Write
        an expression that calculates the player's total score and stores it in the
        totalScore variable. The calculation is: the player's points times lives
        divided by the total time. (click to see full instructions)
      U3 - Variables - Set to Expression with Turtle_instruction: |-
        (click to see
        full)
      U3 - Variables - Set to Expression_instruction: |-
        Test out the new expressions.
        (Click to see full instructions)
      U3 - images - bee free play_instruction: Do this
      U3 Digital Assistant Design_instruction: |-
        Pick a topic for your Digital Assistant
        and create the basic layout with a text input and text area. (Click to show
        full instructions)
      U3 Digital Assistant Set Text_instruction: |-
        Have your digital assistant repeat
        back what the user types and include a canned response. (Click to see full
        instructions)
      U3 Digital Assistant Target - Mehal_instruction: |-
        Try out a demo of the Digital
        Assistant!
      U3 Digital Assistant Target_instruction: Try out a demo of the Digital Assistant!
      U3 Digital Assistant Template_instruction: This is a project template!
      U3 Digital_instruction: |-
        Choose a specialization topic for your digital assistant.
        Create a basic digital assistant that takes the user's input and displays
        back a default response.
      U3 Variables consolelog_instruction: |-
        Use the write block to display the value
        of size
      U3 Variables flower example_instruction: |-
        Change the value of petalSize multiple
        times. How does it change your drawing?
      U3 Variables gray square_instruction: |-
        Change the value of petalSize multiple
        times. How does it change your drawing?
      U3 Variables make a square_instruction: |-
        Change the value of size multiple
        times. How does it change your drawing?
      U3 Variables misconceptions try it_instruction: |-
        Test out your predictions
        from the previous level.
      U3 Variables randomize your square_instruction: |-
        Change the value of petalSize
        multiple times. How does it change your drawing?
      U3 Variables write_instruction: |-
        Use the write block to display the value of
        size
      U3 full clicker demo_instruction: Clicker game - Try it out!
      U3 mehal's clone_instruction: Try out a demo of the Digital Assistant!
      U3- Variables - Assign Random For Turtle Draw_instruction: |-
        Try writing the
        same code in text mode.
      U3- Variables - Changing the Value_instruction: |-
        Update the value of 'turnAmount'
        before each moveForward so the turtle turns a different amount each time.
        (Click to see full instructions)
      U3- Variables - Create And Assign_instruction: |-
        On one line add a variable
        called "lives" and assign it the value 3. Print it to the console. (Click
        to see full instructions)
      U3- Variables - Text Mode_instruction: |-
        1. Switch to text mode and type instructions;
        2. drag blocks out into text mode; 3. experiment with code completion
      U3-Design Mode-ID and Event Handler_instruction: |-
        Add an event handler for
        the button using the "Insert and show" link in the Design Mode Events tab.
        (Click to see full instructions).
      U3-Design Mode-ID_instruction: |-
        Using the Design Mode Events change the button
        ID and update the code to match. (Click to see detail instructions).
      U3-Design Mode-Image_instruction: |-
        Recreate the "Chaser Game" from the last
        lesson using Design Mode. (Click to see full instructions.)
      U313 Two Buttons with Ids_instruction: |-
        Predict what will happen. Once you've
        made a prediction, run the code to see what happens. (Click to see full instructions)
      U313 drag Two Buttons_instruction: |-
        Run a program with two buttons that have
        the same id to see the warning message in the console. Change the ids to make
        the program run without getting a warning message.
      U313 eventsDetails_instruction: |-
        Run a program with two buttons that have the
        same id to see the warning message in the console. Change the ids to make
        the program run without getting a warning message.
      U3L03 - draw rect function_instruction: |-
        Write a function called drawRectangle().\r
        (Click
        to see full instructions)
      U3L03 - draw step_instruction: |-
        Write the drawStep function. (Click to see
        full instructions)
      U3L03 Creating Procedures 1_instruction: |-
        Write the turnAround() function and
        use it to make the turtle move as depicted. see: U3L03-turnAndDown.gif
      U3L03 Define and use turnAround_instruction: |-
        Define a function called turnAround.
        Call the function and then move the turtle forward. (Click to see full instructions)
      U3L03 Draw a T using turnAround_instruction: |-
        Draw a plus sign using the provided
        version of turnAround().  (Click to see full instructions)
      U3L03 Three Steps_instruction: |-
        Define a function called drawSide() which draws
        three steps and moves the turtle to prepare for the next side (Click to see
        full instructions)
      U3L03 choose your own drawing_instruction: |-
        Now choose your own!  Pick one
        of the three drawings shown here and attempt to create it on your own, making
        smart decisions about how to break the problem down into re-usable functions.  You
        will review your work with a peer using "procedures peer review rubric."  Check
        it for the requirements.  GIF: U3L3-ProceduresChooseOne.png
      U3L03 define turnRight and draw a rectangle_instruction: |-
        Define a function
        called right() that turns the turtle to the right. Then use this function
        to draw a rectangle, as shown below. (Click to see full instructions)
      U3L03 draw diamond_instruction: |-
        Create a function called drawDiamond() that
        makes use of your previous work to draw the complete diamond. (Click to see
        full instructions)
      U3L04 - 3 by 3 with functions_instruction: |-
        Make the 3x3 square as efficiently
        as you can. (Click to see full instructions)
      U3L04 - snowflake_instruction: |-
        Create the design by breaking it down into
        layers of functions. (Click to see full instructions)
      U3L04 choose your own drawing_instruction: |-
        Now choose your own!  Pick one
        of the three drawings shown here and attempt to create it on your own, making
        smart decisions about how to break the problem down into re-usable functions.  You
        will review your work with a peer using "procedures peer review rubric."  Check
        it for the requirements.
      U3L04 diamond solution_instruction: |-
        Study this solution to the drawDiamond
        problem.  Notice that the whole program starts by calling drawDiamond() at
        the top.  The program then follows a chain of function calls.  You can trace
        what's happening in the code to see the functions reused.  It's also easy
        to read because the function names describe the expected behavior.
      U3L05_3x3GridEfficiencyChallenge_instruction: |-
        Let's revisit the 3x3 grid
        problem you did a few lessons ago.  This time the challenge is to program
        the solution "as efficiently as possible."  Now that you know how to write
        functions, it should be easier to break the problem down, and your code should
        be easier to read and debug.  See the rubric for more details about requirements
        and expectations.
      U3L05_draw3x3GridEfficiently_instruction: |-
        Draw a 3x3 grid above and to the
        right of the turtle. Try to do so with the fewest number of commands possible.
        NOTE: This is a very challenging problem.  You may need to play with it for
        a while and tweak it.  You might also consider using pencil and paper to sketch
        your ideas.
      U3L06 - moveForwardwithParams_instruction: |-
        Use a single command to move the
        turtle to the edge of the screen. (Click to see full instructions)
      U3L06 Challenge 1 triangle_instruction: |-
        Use the parameterized versions of
        the turtle commands to create a triangle with sides 100 pixels long. (Click
        to see full instructions)
      U3L06 Challenge 2 purple square_instruction: |-
        Read the documentation for penColor()
        and penWidth() before using them to draw the blue square.
      U3L06 Challenge 3 fill pink_instruction: |-
        Fill in the background of the screen
        with your favorite color. (Click to see full instructions)
      U3L06 Challenge 4 bullseye_instruction: |-
        Create the bullseye using hexadecimal
        colors and dot(). (Click to see full instructions)
      U3L06 Challenge 5 overlapping circles_instruction: |-
        This image is created just
        using dot() and penColor() but, how are we going to get those circles to be
        transparent?  If you haven't gotten the hint yet: check out the documentation!
      U3L06 Challenge 6 squiggles_instruction: "Read the documentation for the \"arcLeft\"\nand
        \"arcRight\" commands and then draw the squiggles as shown. "
      U3L06 Challenge 7 smiley face_instruction: |-
        Use turnTo() and moveTo() to help
        draw a smiley face. (Click to see full instructions)
      U3L06 Challenge 8 make your own_instruction: |-
        Create a drawing of your own.
        (Click to see full instructions)
      U3L07 - Free Play Loops and Random_instruction: |-
        Free Play! Use what you learned
        from loops and random to make your own little scene. Have fun.
      U3L07 - Starry Night Starter Code_instruction: "You are going to use loops\nand
        random numbers to generate an image of starry night sky similar to one\nshown
        here.  We have given you some starter code to generate the ground and\nsky
        (just two giant dots), you will add code to this project to make the stars,\ngrass,
        and moon.  All of the effects are clever applications of turtle dots,\nlines,
        and colors.  To get started, follow the series of steps suggested in\nthe
        accompanying worksheet. "
      U3L07 - allSeaGrass_instruction: |-
        Add 50 pieces of seagrass to the image by
        writing drawAllSeagrass with a loop. (Click to see full instructions)
      U3L07 - bubbles_instruction: |-
        Add 200 bubbles to the image by writing drawAllBubbles
        with a loop. (Click to see full instructions)
      U3L07 - callingFunctionsInLoops_instruction: |-
        Call the function within the
        loop to complete the figure. (Click to see full instructions)
      U3L07 - createTriangleParam_instruction: |-
        Define a function that accepts a
        parameter to match the function calls and complete the image. (Click to see
        full instructions)
      U3L07 - fish_instruction: |-
        Add 15 fish to the image by writing drawAllFish
        with a loop. (Click to see full instructions)
      U3L07 - introSquare_instruction: |-
        Use a loop to draw a square. Then add another
        loop to draw many squares each one rotated some amount. (Click to see full
        instructions)
      U3L07 - loopsWithRandom_instruction: |-
        Increase the number of iterations to
        fill the screen with white. (Click to see full instructions)
      U3L07 - randomDots1_instruction: |-
        Increase the number of iterations to fully
        fill the screen with random dots. (Click to see full instructions)
      U3L07 - randomSquare_instruction: |-
        Draw the figure using a loop. (Click to
        see full instructions)
      U3L07 - seaGrass_instruction: |-
        Add a parameter to drawSeagrass that controls
        the number of waves in the grass. (Click to see full instructions)
      U3L07 - seaStar_instruction: |-
        Add 5 sea stars to the image by writing drawAllSeaStars
        with a loop. (Click to see full instructions)
      U3L07 - sunBeams_instruction: |-
        Add 100 sunbeams to the image by writing drawAllSunbeams
        with a loop. (Click to see full instructions)
      U3L07 - topDownDesign_instruction: |-
        Get comfortable with the structure of this
        program, then move on to the next exercise. (Click to see full instructions)
      U3L08 - Enchantment Under the Sea_instruction: |-
        You have been provided with
        starter code for an “Under the Sea” scene which includes three functions,
        one each for the starfish, seagrass, and fish. Create versions of these functions
        which accept parameters to allow you to add more variation to your scene.  The
        student worksheet provides more details and guidance.
      U3L08 - createTwoParamTriangle_instruction: |-
        Define a function called drawTriangle()
        that accepts two parameters to set the size and width of the triangle. (Click
        to see full instructions)
      U3L08 - digitalScene_instruction: |-
        Create the functions you were assigned as
        part of your digital scene. (Click to see full instructions)
      U3L08 - drawSquareWithParam - for video_instruction: |-
        Use drawSquare() to recreate
        the image of both squares, this time using parameters. (Click to see full
        instructions)
      U3L08 - drawSquareWithParam_instruction: |-
        Use drawSquare() to recreate the
        image of both squares, this time using parameters. (Click to see full instructions)
      U3L08 - drawSquaresWithParams_instruction: |-
        Write drawSmallSquare() to draw
        a 25px square. (Click to see full instructions)
      U3L08 - fish_instruction: |-
        Add a parameter to drawFish that changes the size
        of the fish drawn. (Click to see full instructions)
      U3L08 - freePlay_instruction: |-
        Keep adding to your image by making more calls
        to your new functions with parameters. (Click to see full instructions)
      U3L08 - individualCode_instruction: |-
        Create the functions you were assigned
        as part of your digital scene. (Click to see full instructions)
      U3L08 - introUnderTheSea with comments_instruction: |-
        Add an extra fish, starfish,
        and piece of seagrass to the image. Look at, but don't change, the functions
        that create them. (Click to see full instructions)
      U3L08 - introUnderTheSea_instruction: |-
        Add an extra fish, starfish, and piece
        of seagrass to the image. Look at, but don't change, the functions that create
        them. (Click to see full instructions)
      U3L08 - multiParamFish_instruction: |-
        Add three parameters to your drawFish
        function to accept red, green and blue values to make your fish different
        colors. (Click to see full instructions)
      U3L08 - multipleLayersofParams_instruction: |-
        Call drawPlusSign() to complete
        the image. (Click to see full instructions)
      U3L08 - paramsToStarfish_instruction: |-
        Add a parameter to drawStarfish that
        changes the size of the starfish drawn. (Click to see full instructions)
      U3L08 - randomInput_instruction: |-
        Use the randomNumber() blocks to test the
        functions you designed with random input. (Click to see full instructions)
      U3L08 - seaGrass_instruction: |-
        Add a parameter to drawSeagrass that changes
        the size of the piece of seagrass drawn. (Click to see full instructions)
      U3L08 - squareTwoParams_instruction: |-
        Call drawSquare() to complete the drawing
        of two squares. (Click to see full instructions)
      U3L08 - starFish_instruction: |-
        Add an extra fish, starfish, and piece of seagrass
        to the image. Look at, but don't change, the functions that create them.
        (Click to see full instructions)
      U3L08 - triangleTwoParams_instruction: |-
        Call drawSquare() to complete the drawing
        of two squares. (Click to see full instructions)
      U3L08 how to add comments_instruction: |-
        Use the randomNumber() blocks to test
        the functions you designed with random input. (Click to see full instructions)
      U3L1 - Simulation - Template_instruction: |-
        Use a while loop to "flip 10 coins"
        and write them to the screen. (Click to see full instructions)
      U3L12 Chaser Template_instruction: This is a project template!
      U3L13 - Button with ID_instruction: |-
        Drag a button out onto the screen and
        set its text to "Go forth!".  Run the program to make sure you can see the
        button.
      U3L13 - Debug Id Problem_instruction: |-
        Improve the button by choosing a descriptive
        and meaningful ID. (Click to see full instructions)
      U3L13 - Debug Id plus logic problem_instruction: |-
        The last problem was an example
        of syntax error.  App Lab did not understand which object it should be listening
        to for a "click" event so it showed an error message in the console to let
        you know.  Another kind of error is a logical error - the program is valid,
        but it's not doing what you want it to do.\r
        \r
        This program has 2 errors.
        A (tricky) syntax error and logical error.  Find them, fix them, and make
        the program work as expected.
      U3L13 - Debugging 1_instruction: |-
        Debug the program by verifying your IDs are
        being referenced properly. (Click to see full instructions)
      U3L13 - Debugging 2_instruction: |-
        Debug the program by properly ordering your
        button commands and event handlers. (Click to see full instructions)
      U3L13 - Debugging 3_instruction: |-
        Debug the program by fixing the logical error
        within the program. (Click to see full instructions)
      U3L13 - Project_instruction: |-
        Create your multi-screen app. (Click to see full
        instructions.)
      U3L13 - Turtle Driver Project_instruction: |-
        Create a "turtle driver" that
        includes buttons to move the turtle forward and turn it left and right. (Click
        to see full instructions)
      U3L13 - Turtle move with button_instruction: |-
        Add a button that moves the turtle
        when clicked.  (Click to see full instructions)
      U3L13 eventsDetails_instruction: |-
        Add an event handler to the button to move
        the turtle forward. (Click to see full instructions)
      U3L14 - Assigning Random Value_instruction: |-
        Write a program that simulates
        the rolling of two dice and reports their individual values as well as the
        sum. (click to see full instructions)
      U3L14 - Mini Calculator embed_instruction: |-
        You will be prompted for two numbers,
        one right after the other.  See what happens.  Enter different numbers until
        you get the idea.
      U3L14 - Unfortunate Events Free Play_instruction: |-
        Follow the "Unfortunate
        Events" Worksheet and enter your code here to experiment.  We've pre-loaded
        the code you need to start.
      U3L14 - User Input Division calculator_instruction: |-
        Write a program that acts
        as a simple calculator. (click to see full instructions)
      U3L14 - Variable ReAssignment pt2_instruction: |-
        Trace the code and predict
        what you think will be printed to the console. Then add a console.log statement
        at the end of the program to see the last value of someNum to see if your
        full prediction is correct. (click to see full Instructions)
      U3L14 - concatenate simple_instruction: |-
        Modify the write statement on line
        3 to combine text and variables together to make the app display a single
        line of text that shows the player's lives and score. (click to see full
        instructions)
      U3L14 - moving memory challenge1_instruction: |-
        Using only the variables provided,
        assignment (=) and arithmetic (+ - * /) re-assign the values to make the console.log
        statement display the correct value(s).  (Click to see full instructions)
      U3L14 - moving memory challenge2_instruction: |-
        Using only the variables provided,
        assignment (=) and arithmetic (+ - * /) re-assign the values to make the console.log
        statement display the correct value(s).  (Click to see full instructions)
      U3L14 - moving memory challenge3_instruction: |-
        Using only the variables provided,
        assignment (=) and arithmetic (+ - * /) re-assign the values to make the console.log
        statement display the correct value(s).  (Click to see full instructions)
      U3L14 - moving memory challenge4_instruction: |-
        Using only the variables provided,
        assignment (=) and arithmetic (+ - * /) re-assign the values to make the console.log
        statement display the correct value(s).  (Click to see full instructions)
      U3L14 - moving memory challenge5_instruction: |-
        Using only the variables provided,
        assignment (=) and arithmetic (+ - * /) re-assign the values to make the console.log
        statement display the correct value(s).  (Click to see full instructions)
      U3L14 - moving memory challenge6_instruction: |-
        Using only the variables provided,
        assignment (=) and arithmetic (+ - * /) re-assign the values to make the console.log
        statement display the correct value(s).  (Click to see full instructions)
      U3L15 - Add reset button to UpDown app_instruction: |-
        Add code so that clicking
        the start over button will reset the game and send you back to the main screen.
        (Click to see full instructions)
      U3L15 - DEMO up down count practice app_instruction: |-
        Try out the demo app
        (Click to see full instructions)
      U3L15 - Debug forget to update var on reset in UpDown app_instruction: |-
        Run
        the app, and click the up or down button until you get to the gameOverScreen.
        Click 'Start Over' and try the app again. Find and fix the issue in the
        code. (Click to see full instructions)
      U3L15 - Debug if never triggers in UpDown app_instruction: |-
        Run the app and
        use the up and down arrows to try to hit the gameOverScreen. You can't! Find
        and fix the issue in the code. (Click to see full instructions)
      U3L15 - Debugging Simple If-statements =v==_instruction: |-
        Run the app, and
        click the up button. Then restart and run it again, and click the down button.
        Find and fix the issue in the code. (Click to see full instructions)
      U3L15 - Simple If-statements in UpDown App_instruction: |-
        Add an if statement
        so that the app changes screens when the count reaches -5. (Click to see full
        instructions)
      U3L15 - add code to make count down work_instruction: |-
        Write code to make the
        down arrow work as expected. (Click to see full instructions)
      U3L15 - clicker update score_instruction: |-
        Add code to update the score when
        the apple is clicked. (Click to see full instructions)
      U3L15 - count upDown bug forget to set text_instruction: |-
        Find the bug in the
        program and fix it. (Click to see full instructions)
      U3L15 - count upDown bug logic error wrong update_instruction: |-
        Find the bug
        in the program and fix it. (Click to see full instructions)
      U3L15 - count upDown bug var not created globally_instruction: |-
        Find the bug
        in the program and fix it. (Click to see full instructions)
      U3L15 - global var example count up_instruction: |-
        Look at the code for this
        app and see how the code works to update the count variable when the up arrow
        is clicked. (Click to see full instructions).
      U3L15 - mini clicker update score_instruction: |-
        Add code to update the score
        when the apple is clicked. (Click to see full instructions)
      U3L15 - practice with setText_instruction: |-
        Use setText to complete the click
        event handler for the down arrow. (Click to see full instructions)
      U3L15 - variable scoping problem debugging_instruction: |-
        See if you can figure
        out why the code is no longer working. (Click to see full instructions)
      U3L15 click add lives_instruction: |-
        Add lives to the clicker game that decrement
        by 1 when the background image is clicked (Click to see full instructions)
      U3L15 full clicker app_instruction: |-
        Complete your clicker game! (Click to
        see full instructions)
      U3L16 - challenge say hi app_instruction: |-
        Write a greeting to the user when
        they hit 'enter' in the text input, using the 'change' event. (Click to
        see full instructions)
      U3L16 - chaserApp_instruction: |-
        Create your own "Chaser Game." (Click to
        see full instructions)
      U3L16 - chooseImages_instruction: |-
        Replace the image in your application with
        one of your own. (Click to see full instructions)
      U3L16 - doubleQuotes_instruction: |-
        Save a string inside a variable and log
        it to the console. (Click to see full instructions)
      U3L16 - hideAndShow_instruction: |-
        Introducing textInput, getText and write.  First
        run the starter code several times.  Try to change what's written to the
        screen when the button is clicked. Then use getText to write to the screen
        what the user entered in the text box. GIF: U3L16 - useGetText.gif
      U3L16 - hideAndShowPractice_instruction: |-
        You are given some starting code
        that puts an image and two buttons on the screen.  The image is initially
        hidden. Add two new event handlers: one for each button, that when clicked
        hide and show the image.
      U3L16 - image and text labels_instruction: |-
        Introducing the setPosition command!  Replace
        the moveTo in the button-click event handler to use setPosition to move the
        button itself to a random location when it's clicked.
      U3L16 - images and text labels_instruction: "Introducing objects other than\nbuttons!
        - textLabels and images.  First try replacing your button with a\ntextLabel.
        \ Will the text respond to events just like the button?  Try connecting\nan
        event handler to it.  We've started you out with code similar to the result\nof
        the last level, you can copy your code from that level into here if you\nprefer. "
      U3L16 - images_instruction: "Introducing Images.  Try replacing the textLabel\nwith
        an image..  Will the image respond to events just like the button?  Try\nconnecting
        an event handler to it.  We've started you out with code similar\nto the result
        of the last level, you can copy your code from that level into\nhere if you
        prefer. "
      U3L16 - intro getText_instruction: |-
        Add an event handler to the Submit button
        so that when the button is clicked it will display the name entered in the
        text box to the console.  Use getText to get the value out of the text box.
        (Click to see full instructions)
      U3L16 - introSetPosition_instruction: |-
        Move the buttons to the bottom of the
        screen. (Click to see full instructions)
      U3L16 - introStrings_instruction: |-
        Save a string inside a variable and log
        it to the console. (Click to see full instructions)
      U3L16 - nameAgeTemplate_instruction: |-
        Add an Text Input box for the name and
        age. (Click to see full instructions)
      U3L16 - newEventTypes_instruction: |-
        Experiment with different event types and
        select the one that you think is best. (Click to see full instructions)
      U3L16 - outputWithTextArea_instruction: |-
        Output a message to the 'textArea'
        (Click to see full instructions)
      U3L16 - projectTemplate_instruction: |-
        Create your own "Chaser App". (Click
        to see full instructions)
      U3L16 - quick double click_instruction: |-
        Mini-Project.  The Quick Double-Click
        game.  In this simple game an object (an image) moves around, or pops up randomly
        on the screen, as the user clicks it.  The goal of our game will be to try
        to double-click the object before it moves.  Part of the challenge (and fun)
        here is creating this app from scratch.  You can look back at your previous
        work for examples, but it's fun to create something from scratch, too.  Try
        it!  For more details see the Activity guide for this lesson.
      U3L16 - setPosition to move button_instruction: |-
        Introducing the setPosition
        command! Replace the moveTo in the button-click event handler to use setPosition
        to move the button itself to a random location when it's clicked.
      U3L16 - setPositionMoveButton_instruction: Use setPositon to moveButton
      U3L16 - setupMoveToRandom_instruction: |-
        Modify the code so that the turtle
        moves to a random screen location when the button is clicked. (Click to see
        full instructions)
      U3L16 - singleSetPosition_instruction: |-
        Move the button to the middle of the
        screen. (Click to see full instructions)
      U3L16 - stringsVsNumbers_instruction: |-
        Run the program to see how strings and
        numbers behave with different arithmetic operators. (Click to see full instructions)
      U3L16 - text labels_instruction: |-
        Use the textLabel command to replace the
        button in your program with a text label. (Click to see full instructions)
      U3L16 - textInput getText write_instruction: |-
        Add an Text Input box for the
        name and age. (Click to see full instructions)
      U3L16 - toUpper_instruction: |-
        Make the name of the user appear in uppercase
        (Click to see full instructions)
      U3L16 - use images_instruction: |-
        Use the image command to replace the text
        label in your program with an image. (Click to see full instructions)
      U3L16 Mad Lib Clear Input_instruction: "Clear the user's previous text when\nthe
        Play Again button is clicked (Click to see full instructions) "
      U3L16 Mad Lib Demo_instruction: Mad Libs Demo - Try it out!
      U3L16 Mad Lib Student Setup_instruction: |-
        Back to Mad Libs: To get started,
        set up the two screens for your Mad Libs app (Click to show full instructions)
      U3L16 Mad Lib getText_instruction: "Before setting the text area with your\nMad
        Libs outline, get the user's text and incorporate their responses. (Click\nto
        see full instructions) "
      U3L16 Mad Lib setText_instruction: "When the Next button is clicked, set the\ntext
        area to have the main outline of your How-to Mad Libs (without the user's\ninput).
        (Click to see full instructions) "
      U3L16 Mad Lib toUpper_instruction: "Apply the toUpperCase and toLowerCase string\nfunctions
        to the user's text. (Click to see full instructions) "
      U3L17 - getAndSetKeyValue_instruction: |-
        Create an image like app. (Click to
        see full instructions)
      U3L17 - getKeyValue_instruction: |-
        Run the program several times to observe
        how the setKeyValue commands now always arrive in order. (Click to see full
        instructions)
      U3L17 - introCallbacks_instruction: |-
        Run the program several times to observe
        how the setKeyValue commands now always arrive in order. (Click to see full
        instructions)
      U3L17 - introKeyValue_instruction: |-
        Explore your key value pairs with the Data
        Viewer. (Click to see full instructions)
      U3L17 - readKeyValue_instruction: |-
        Explore your key value pairs with the Data
        Viewer. (Click to see full instructions)
      U3L17 - setKeyValue_instruction: |-
        Create and update your key value pairs using
        setKeyValue. (Click to see full instructions)
      U3L17 - twoSetKeyValue_instruction: |-
        Run the program several times to observe
        how often setKeyValue commands arrive out of order. (Click to see full instructions)
      U3L18 comparison operators_instruction: |-
        Use console.log to print out the different
        boolean expressions below to see what information they return. (Click to see
        full instructions)
      U3L18 comparison operators_for_video_instruction: |-
        Use `console.log` to print
        out the different boolean expressions below to see what information they return.
        (Click to see full instructions)
      U3L19 - Clicker Game Freeplay Area_instruction: |-
        Use this App Lab area to improve
        your clicker game.  You should start by copy/pasting the code from your old
        game here.  We're showing a more full set of blocks in the toolbox - some
        of the things you might not have used yet.  Feel free to explore then and
        experiment if you want to.  Everything else you need should be shown.  Have
        fun!
      U3L19 - DEMO up down count practice app_instruction: |-
        Try out the demo app
        (Click to see full instructions)
      U3L19 - Debugging with consoleLog_instruction: |-
        Add console.log() statements
        to find out the value of a and b after the first reassignment statement a
        = b; (Click to see full instructions)
      U3L19 - Simple If-statements in UpDown App_instruction: |-
        Add an if statement
        so that the app changes screens when the count reaches -5. (Click to see full
        instructions)
      U3L19 - Target Clicker App_instruction: |-
        Investigate the new elements of the
        'chaser-game'
      U3L19 - do concatenate string with var_instruction: |
        We've given you a piece
        of code from the previous screen.  Try changing the value assigned to foo
        to see the string change. \r
        Do this: \r
        1. Try changing the value assigned
        to foo to see the string change. \r
        2. By only modifying the lines of code
        that were given to you, try to get the output to say: “The value of foo is:
        9.  And isn’t that fine.” \r
      U3L19 - fix the var name syntax error v2_instruction: |-
        Fix the error and get
        it to print the value of both variables (Click to see full instructions)
      U3L19 - fix the var name syntax error_instruction: |-
        Fix the error and get it
        to print the value of both variables (Click to see full instructions)
      U3L19 - global var example count up_instruction: |-
        Look at the code for this
        app and see how the code works to update the count variable when the up arrow
        is clicked. (Click to see full instructions).
      U3L19 - practice with setText_instruction: |-
        Add another button that changes
        the text to the value of a new variable. (Click to see full instructions)
      U3L19 - test reassignment of two vars_instruction: |-
        Predict the value of a
        and b. Add console.log statements to find out the actual value of a and b.
        (Click for full instructions)
      U3L19 - three basic ops of variables_instruction: |-
        Add another variable called
        "lives" and set the value to 3. Print the value of the variable to the console.
        (Click to see full instructions)
      U3L19 - try out console log_instruction: |-
        Try out console.log.  Do this: replace
        the statement write("foo is: " + foo) with console.log("foo is: " + foo).  Run
        the program and you should see the output show up in the console area below
        the workspace.  Then try adding a few more console.log statements.  Display
        some text.  Make another variable and display that.  \r
        The app screen will
        be blank -- that's the point.  With console.log you can test output behind
        the scenes in a way the user cannot see.  \r
        \r
        \r
        GIF: U3L19-useconsolelog.gif
      U3L19 - up down count practice app_instruction: |-
        Set up the down button to
        decrease the value of count by 1 each time it is clicked. (Click to see full
        instructions)
      U3L19 - updating variables pt1_instruction: |-
        This app is only SLIGHTLY different
        from the previous one, but much more dynamic.  See if you can figure out how
        and why the count is going up.  Once you've figured it out then you should
        be able to DO THIS: add a button to the app that when clicked makes the count
        go down, and updates the label.  When you're done the app should work as
        shown in the demonstration.  GIF: U3L19 - upDownCountApp.gif
      U3L19 - variable reassignment challenge pt2_instruction: |-
        Make a prediction
        about the ending values of a, b, and c. Then use console.log to check your
        understanding (Click to see full instructions)
      U3L19 - variable reassignment part 1_instruction: |-
        Predict the value of a and
        b. Add console.log statements to find out the actual value of a and b. (Click
        for full instructions)
      U3L19 - variable scope problem 2_instruction: |-
        What is happening with foo?
        Play with the level to try to figure it out. (Click to see full instructions)
      U3L19 - variable scoping problem debugging_instruction: |-
        See if you can figure
        out why the code is no longer work. (Click to see full instructions)
      U3L19 - write var and string with same name v2_instruction: |-
        Fix the code so
        that the values of both variables print to the console. (Click to see full
        instructions)
      U3L19 - write var and string with same name_instruction: |-
        Fix the code so that
        the value of both variables prints to the console. (Click to see full instructions)
      U3L2 Using Simple Commands (no tooltips)_instruction: |-
        Draw a 1x1 square above
        and to the left of the turtle's starting position. Click to see full instructions.
      U3L2 Using Simple Commands_instruction: |-
        Draw a 1x1 square above and to the
        left of the turtle's starting position. Click to see full instructions.
      U3L23 Chatbot Conditionals 1_instruction: |-
        Add if, else if, and else statements
        to detect the movie genres Comedy, Romance, Action, and Horror. (Click to
        see full instructions)
      U3L23 Chatbot Intro 1a_instruction: |-
        Store the user's input inside a variable
        and log it to the console.
      U3L23 Chatbot Intro 2_instruction: |-
        Use string concatenation to store the user's
        input and assistant's answer into the conversation variable using the format
        "User: <input><bot name>: <default response>" . Log the conversation to
        the console.
      U3L23 Chatbot Intro 2a_instruction: |-
        Display the conversation onto the "text_area"
        element. Optional: clear the user's input after every "change" event.
      U3L23 Chatbot Intro 3_instruction: |-
        Add newline characters "\n" to separate
        the user's input and the computer's response.
      U3L23 Chatbot Intro 4_instruction: |-
        Use this level to make your chatbot look
        and work better!
      U3L23 Chatbot Intro_instruction: |-
        Choose a specialization topic for your digital
        assistant. Create a basic digital assistant that takes the user's input and
        displays back a default response.
      U3L23 Digital Assistant 1_instruction: |-
        Set the text_area element to display
        the user's input from the text_input element.
      U3L23 Digital Assistant 2_instruction: |-
        Add the response "I don't know."
        after each of the user's inputs.
      U3L23 Digital Assistant 3_instruction: |-
        Add the response "I don't know."
        after each of the user's inputs.
      U3L23 Digital Assistant 4_instruction: |-
        Display the user's input and the digital
        assistant's response on different lines.
      U3L23 Digital Assistant 5_instruction: |-
        Start the user's command with the
        phrase "User:" and the digital assistant's response with the phrase "Bot:"
      U3L23 Digital Assistant 6_instruction: |-
        When the user hits Run, display the
        text "I'm a generic digital assistant. Ask me anything!"
      U3L24 Basic String Parsing 1_instruction: |-
        Use the function "userInput.indexOf(<food>)"
        to check if the strings "pizza" or "soup" are anywhere in the user's
        response.
      U3L24 Chatbot Basic Conditionals_instruction: |-
        Check out the project description
        for instructions. (Click to see full instructions.)
      U3L24 Chatbot Conditionals 2_instruction: |-
        Adjust the "if" block to make
        the bot respond "I don't know that color." if the user types anything besides
        "blue"
      U3L24 Chatbot Conditionals 3_instruction: |-
        Adjust the "if/else" block to
        make the bot respond to the colors blue, red, and green, and to two additional
        colors.
      U3L24 Chatbot Keyword Record_instruction: |-
        Use the next level to record your
        digital assistant's keywords/phrases.
      U3L24 Chatbot Nested Conditionals_instruction: |-
        Add a chained conditional with
        at least 3 "else if" statements to your personal assistant.
      U3L24 Nested Conditionals 1_instruction: |-
        Change all of the boolean expressions
        to use includes instead of ==. (Click to see full instructions)
      U3L24 Nested Conditionals 2_instruction: "Nest your movie genre if statements\ninside
        the if statements to check for a ? in the input. "
      U3L24 Nested Conditionals Bugs 2_instruction: |-
        Fix the problem with the code
        so that all the conditions can be reached. (Click to see full instructions)
      U3L24 Nested Conditionals Bugs 3_instruction: |-
        Fix the bugs that still exist
        in this program. Prove that the program works correctly.
      U3L24 Nested Conditionals Bugs_instruction: |-
        Expose the bugs in this problem
        by typing inputs into the user-input box. Track which inputs cause unexpected
        outputs.
      U3L24 introIncludes_instruction: |-
        Practice using the includes command. (Click
        to see full instructions)
      U3L25 - drag out key event_instruction: |-
        Set up an event handler to respond
        to keypress events, and display event.key in the console. Hit keys on the
        keyboard to see what happens. (Click to see full instructions)
      U3L25 - play sound when up key_instruction: |-
        Change the code so the sound will
        only play when the up arrow is pressed. (Click to see full instructions)
      U3L25 Chatbot Strings_instruction: |-
        1. Adjust your digital assistant to evaluate
        inputs the same way whether the inputs are capitalized or lowercase. 2. If
        a user asks "What is <phrase>?", where <phrase> is an input your digital
        assistant does not recognize, make your digital assistant respond "I don't
        know what <phrase> is."
      U3L25 String Parsing 1_instruction: |-
        Given the string "Wisdom begins with
        wonder." what is the index of the following characters W, t, w, ., d, and
        k? Confirm your expectation using the string.indexOf() function.
      U3L25 String Parsing 2_instruction: |-
        Use str.length to find the length of the
        strings “Hello World”, “Computer science rocks!", and “I promise to do my
        homework every day.”
      U3L25 String Parsing 3_instruction: |-
        Write a password length checker that writes
        “yes” to the console if a string has a length greater than 10, or “no” if
        it is less than or equal to 10.  Test your function using two strings, one
        that will satisfy each conditional option.
      U3L25 String Parsing 4_instruction: |-
        You are given the string "Wisdom begins
        with wonder." Use the string.substring(begin, end) function to print "begin"
        and "nder" to the console.
      U3L25 String Parsing 5_instruction: |
        Fill in the function, findBeginNder()
        to get the strings "begin" and "nder" from a sentence no matter where
        in the sentence they exist.\r
        Print the strings and their index to the console.
      U3L25 String Parsing 6_instruction: |-
        Write a function that takes a name (first
        last) and reorders it (last, first).
      U3L25 String Parsing 7_instruction: |-
        You are given the string “The earth has
        music for those who listen.” Manipulate it using the functions str.toUpperCase()
        and str.toLowerCase().
      U3L26 AND operator_instruction: |-
        Update the genre and rating if statements
        to give only one movie suggestion at a time. (Click to see full instructions)
      U3L26 Chatbot Compound Conditionals_instruction: |-
        Update your digital assistant
        to include at least one each of AND, OR, and NOT
      U3L26 Chatbot Final_instruction: |-
        Update your digital assistant to include
        at least one each of AND, OR, and NOT
      U3L26 Compound Logic_instruction: |-
        Write a conditional statement that detects
        if a command contains all the phrases "2000" "animated" and "G-rated."
        If all these phrases are detected, make Movie Bot respond "The top grossing
        animated and G-rated film in the 2000 decade was Finding Nemo."
      U3L26 NOT operator_instruction: "Write a conditional statement that detects\nif
        a command does not contain the phrase \"bad.\" If \"bad\" is not detected,\nmake
        Movie Bot respond normally. Otherwise, make Movie Bot respond \"Sorry,\nI
        don't know about bad movies.\" "
      U3L26 OR operator_instruction: |-
        Update the if statement to use an OR to check
        for a "?" as well as who, what, where, when, why, how in the user input.
        (Click to see full instructions)
      U3L27 Chatbot Final_instruction: |-
        Make your digital assistant awesome and when
        you are finished, ask one of your classmates to test it for you using the
        activity guide. As you add features to your digital assistant, track them
        on the next level.
      U3L2_Turtle3by3Grid_instruction: |-
        Draw a 3x3 grid to the front and right of
        the turtle as efficiently as possible. The turtle should end at its original
        location, facing its original direction. (Click to see full instructions)
      U3L2_TurtleSquare_right_instruction: |-
        Draw a square to the front and to the
        right of the starting location. (Click to show full instructions)
      U4 - Add Row By Hand_instruction: |-
        Add a new record to your table in the Data
        Viewer. (Click to see full instructions)
      U4 - Charts - Export Data_instruction: |-
        Export the data from the “ages” table
        as a CSV file, then remix this app and import the CSV file. (Click to see
        full instructions)
      U4 - Charts - Import Data 1_instruction: |-
        Download the CSV file we’ve provided,
        and then use the data viewer to import the data from the file into the “mytable”
        table. (Click to see full instructions)
      U4 - Charts - Import Data 2_instruction: |-
        Call readRecords on “mytable” and
        print each record to the console. (Click to see full instructions)
      U4 - Charts - Line Chart 1_instruction: |-
        Create a line chart showing the change
        in popularity of “#tbt” over time. (Click to see full instructions)
      U4 - Charts - Line Chart 2_instruction: |-
        Add a second line to your chart to
        show the change in popularity of both “#tbt” and “#nofilter” at the same time.
        (Click to see full instructions)
      U4 - Charts - Line Chart Template_instruction: This is a template.
      U4 - Charts - Remixing Apps with Data_instruction: |-
        Run this app and see what
        it prints to the console. Then remix the app and run the remixed version to
        see what happened to the data. (Click to see full instructions)
      U4 - Charts - Scatter Chart_instruction: |-
        Create a scatter plot of the “rottenTomatoes”
        table, using the new table and column names. (Click to see full instructions)
      U4 - Charts - drawChartFromRecords 1_instruction: |-
        Use the drawChartFromRecords
        block to create a scatter plot from the table in the database. (Click to see
        full instructions)
      U4 - Charts - drawChartFromRecords Options 1_instruction: |-
        Add a title to your
        chart and change the colors of your lines using the options parameter of drawChartFromRecords.
        (Click to see full instructions)
      U4 - Charts - drawChartFromRecords Options 2_instruction: |-
        Look through the
        drawChartFromRecords API and choose some more options to customize. (Click
        to see full instructions)
      U4 - Charts - drawChartsFromRecords 1_instruction: |-
        Add screen element, pull
        out drawCharts block, run the program!
      U4 - CreateRecord - 1_instruction: |-
        Add a createRecord command and run the
        program. (Click to see full instructions)
      U4 - CreateRecord - 2.5_instruction: |-
        Change the table name in createRecord
        then check the Data Viewer to see the new table. (Click to see  full instructions)
      U4 - CreateRecord - 2_instruction: |-
        Change the name from "Alice" to something
        else in the createRecord command.  Run the program and use the Data Viewer
        to see the changes to your table. (Click to see full instructions)
      U4 - CreateRecord - 3_instruction: |-
        Use createRecord to add the song object
        as a record to a table. (Click to see full instructions)
      U4 - CreateRecord - 4_instruction: |-
        Run the program. Verify the song object
        was added to the database. Note the callback function now displays the copy
        of the record sent back back by the database. (Click to see full instructions)
      U4 - CreateRecord - 5_instruction: |-
        Add a property to the JavaScript object,
        then run the program.  View the data table and see how changing the object
        affects the data table. (Click to see full instructions)
      U4 - Edit Data Table by Hand_instruction: |-
        View the data table and click edit
        next to each row.  Add the artists names for each song by hand. (Click to
        see full instructions)
      U4 - Exploring Data Tools - Template_instruction: |-
        Use createRecord to add
        the song object as a record to a table. (Click to see full instructions)
      U4 - Objects - accessingPropertiesInArray_instruction: |-
        Access the properties
        of the objects stored in an array. (Click to see full instructions)
      U4 - Objects - arraysOfObjects_instruction: |-
        Create an array called "students"
        and add all 5 student objects to the array. (Click to see full instructions)
      U4 - Objects - createContactObject_instruction: |-
        Construct a new object from
        the user inputs, and append it to your array. (Click to see full instructions)
      U4 - Objects - createContactsData_instruction: |-
        Add values to the three contact
        objects provided in the starter code. (Click to see full instructions)
      U4 - Objects - createDotNotation_instruction: |-
        Create a student Object yourself.
        Add properties to your object one at a time using dot notation. (Click to
        see full instructions)
      U4 - Objects - createObject_instruction: |
        Create an object with at least 3
        properties and display it in the Debug Console. (Click to see full instructions)
      U4 - Objects - dotNotation_instruction: |-
        Use dot notation to display individual
        properties of the object. (Click to see full instructions)
      U4 - Objects - eventHandlersToSwitchScreen_instruction: |-
        Attach event handlers
        to the "Add Contact" and "Go Back" buttons that allow the user to switch
        screens. (Click to see full instructions)
      U4 - Objects - eventParameter_instruction: |-
        Trigger both the keyboard and mouse
        event and examine the event objects displayed in the console. Why might an
        object be the best way to store this information? (Click to see full instructions)
      U4 - Objects - exemplarContactsApp_instruction: |-
        Use the Contacts app and then
        add a contact of your own. (Click to see full instructions)
      U4 - Objects - loopingArray_instruction: |-
        Loop over your array of students
        and print the name of every students. (Click to see full instructions)
      U4 - Objects - loopingArray2_instruction: |-
        Loop over your array of students
        and print the name and grade of every student. (Click to see full instructions)
      U4 - Objects - loopingCompoundConditions_instruction: |-
        Loop over the array
        of students and display the information of students who are present and in
        the 11th grade. (Click to see full instructions)
      U4 - Objects - loopingConditions_instruction: |-
        Loop over your array of student
        objects and display the names of every student who is present in class. (Click
        to see full instructions)
      U4 - Objects - pullValues_instruction: |-
        Create an event handler for the "Save
        Contact" button that displays the contents of the 4 text input fields in
        the console. (Click to see full instructions)
      U4 - Objects - readStarterCode_instruction: |-
        Familiarize yourself with the
        starter code and UI elements provided. (Click to see full instructions)
      U4 - Objects - resetIndexAndShow_instruction: |-
        Add code to your event handler
        for the "Save Contact" button so that when a new contact is added, the inputs
        are cleared, the screen is switched, and the correct contact is shown. (Click
        to see full instructions)
      U4 - Objects - showContact1_instruction: |-
        Add code to the showCurrentContact
        function to show the name of the contact stored at the currentIndex of your
        array. (Click to see full instructions)
      U4 - Objects - showContact2_instruction: |-
        Add the phone number and birthday
        text to your text area. (Click to see full instructions)
      U4 - Objects - showContact3_instruction: |-
        Display the image information for
        each contact. (Click to see full instructions)
      U4 - Objects - showSampleImage_instruction: |-
        Attach an event handler to the
        image URL text input so that the user can confirm their image will work as
        expected. (Click to see full instructions)
      U4 - Objects - writeWrap_instruction: |-
        Use the wrap function to prevent currentIndex
        from leaving the bounds of your array. (Click to see full instructions)
      U4 - Read Record - 1.2_instruction: |
        Place a console.log command below the
        readRecords command. (Click to see full instructions)\r
      U4 - Read Record - 1.3_instruction: |
        Add a console.log command inside the callback
        function. (Click to see full instructions)\r
      U4 - Read Record - 1_instruction: |
        Use console.log to display the records returned
        by a call to readRecords. (Click to see full instructions)\r
      U4 - Read Record - 2_instruction: |
        Change the table name so that the records
        are read from the new table. (Click to see full instructions)\r
      U4 - Read Record - 3_instruction: |
        Change the name of the table in a readRecords
        command to read from a table that does not exist. (Click to see full instructions)\r
      U4 - Read Record - 4.1_instruction: |
        Use indexes and dot notation to reference
        values in the response from the database. (Click to see full instructions)\r
      U4 - Read Record - 4_instruction: |
        Print out each record return from the readRecords
        call individually. (Click to see full instructions)\r
      U4 - Read Record - 5_instruction: |
        Using a for loop, display the title of each
        movie in your database. (Click to see full instructions)\r
      U4 - Read Record - part 1 - template_instruction: |
        Use console.log to display
        the records returned by a call to readRecords. (Click to see full instructions)\r
      U4 - ReadRecords - Contacts App 1_instruction: |-
        Use readRecords to copy the
        data in your database into your "contacts" global variable and call showCurrentContact.
        (Click to see full instructions)
      U4 - ReadRecords - Contacts App 2_instruction: |-
        Create a function called refreshLocalData.
        (Click to see full instructions)
      U4 - ReadRecords - Contacts App 3_instruction: |-
        Add a call to "refreshLocalData"
        to the callback function of the createRecord you use to add a new contact
        to your database. (Click to see full instructions)
      U4 - ReadRecords - Contacts App 4_instruction: |-
        Create a "Delete" button.
        (Click to see full instructions)
      U4 - ReadRecords - Contacts App 5 make delete work_instruction: |-
        Create an
        event handler for the "Delete" button you created. (Click to see full instructions)
      U4 - add createRecord to contacts App_instruction: |-
        Add code to your contacts
        app so that newly-added contacts are saved in a table. (Click to see full
        instructions)
      U4 - debug column names are case sensitive_instruction: |-
        Change song.title
        to song.Title (capital T).  And run the program.  Check the data table  (Click
        to see full instructions)
      U4 - deleteRecords 0_instruction: |-
        Use the deleteRecord command with default
        values. Verify the record was deleted. (Click for full instructions).
      U4 - deleteRecords 1_instruction: |-
        Find the id of "Little Bunny Foo Foo"
        in the data table "mySongs".  Use the deleteRecord command to delete it.  See
        what happens when you try to delete an ID a second time. (Click for full Instructions).
      U4 - deleteRecords 2 delete object_instruction: |-
        Use the song object to delete
        multiple objects in the database by changing only the "id" property. (Click
        for full Instructions).
      U4 - deleteRecords 2_instruction: |-
        Using the data viewer, find the id of a
        a record you want to delete. Use the deleteRecord command to delete it. (Click
        for full instructions).
      U4 - fix contacts by hand in data table_instruction: |-
        Use the data viewer to
        add rows to the data table.  Add the original hard-coded contacts from your
        app to the database. (Click to see full instructions)
      U4 - last stage test adding contcts_instruction: |-
        Confirm that new contacts
        you add are saved to the database.  Verify that after restarting your app,
        the contacts you added no longer show in the app, but still exist in the database.
        (Click to see full instructions)
      U4 Model App_instruction: |-
        Add a large red button to your screen using Design
        Mode. (Click for full instructions.)
      U4 Model Design 1_instruction: |-
        Add a large red button to your screen using
        Design Mode. (Click for full instructions.)
      U4 vigenere cipher 2_instruction: Instrucţiuni
      U4L02 - Objects - Template1_instruction: Șablon
      U4L02 - Objects - createObject_instruction: "Create an object with at least\n5
        values including at least one string and one number. (Click to see full\ninstructions) "
      U4L02 - Objects - eventParameter_instruction: |-
        Trigger both the keyboard and
        mouse event and examine the event objects displayed in the console. Why might
        an object be the best way to store this information? (Click to see full instructions)
      U4L06 Data Storage 1_instruction: |
        Fill in your name instead of "Enter Your
        Name", run the app and click the button. Run it multiple times with different
        names! Watch the console and use the ‘View Data” button to see how the table
        is updated. As you play around make sure you can explain the purpose of each
        of the circled parts of the diagram.\r
        \r
      U4L06 Data Storage 2_instruction: "The app is a continuation of the previous\none
        we started. Add a text label to collect the users name and use that as\nthe
        data input for the record.\\r\n\\r\nRun the app and click the button multiple\ntimes
        and see what happens. Is there a problem you notice? "
      U4L06 Data Storage 3_instruction: |-
        We want to improve the user experience.
        Once they have submitted their data for storage, it would be nice to clear
        the textbox.  Update your app to clear the textbox after the data is stored.
      U4L06 Data Storage 4_instruction: |-
        Add a label and drop down box, to your app
        and save the data to your JSON object and add it to your table. Make sure
        to reset the dropdown after the data is stored.
      U4L06 Data Storage 5_instruction: "Add a couple radio buttons or checkboxes\nto
        our app. Then find a way to collect the data from those. "
      U4L06 Data Storage 6_instruction: " Use one of the getTime() and getUserId()\nblocks
        to collect additional data. "
      U4L06 Data Storage 7_instruction: |-
        Add a second screen to the sample app we
        have been building to capture an image from a user. Return to screen 1 after
        the JSON object has been stored in the table.
      U4L15 Read Data 1_instruction: |-
        Run the level and see what happens. Then edit
        the code to make it print a different column of information.
      U4L15 Read Data 2_instruction: |-
        Student should create a sentence which puts
        together all the pieces from a record.\r
        \r
        <<Name>> is <<Age>> years old
        and like <<Food>>
      U4L15 Read Data 3_instruction: |
        Print the sentence using the first JSON object
        in the array\r
        \r
      U4L15 Read Data 4_instruction: |-
        \r
        Use a random record from the list of records
        to display your sentence.
      U5 if-else-if movie example_instruction: |-
        Add an else-if statement in order
        to tell the user if their guess is high or low instead of just wrong. (Click
        to see full instructions)
      U6 - Final Project - Project Level_instruction: |-
        Build your final project here.
        (Click to see full instructions)
      U6 - updateRecord - Callback Success Parameter_instruction: |-
        Add an if-else
        block inside the callback function for updateRecord. (Click to see full instructions)
      U6 - updateRecord - Contacts - Edit UI_instruction: |-
        Set up the UI elements
        needed to edit contacts. (Click to see full instructions)
      U6 - updateRecord - Contacts - Edit event handler_instruction: |-
        Write event
        handlers for the Edit Contacts UI elements. (Click to see full instructions)
      U6 - updateRecord - Contacts - Save edited contact_instruction: |-
        Use updateRecord
        to store the user's edits in the database. (Click to see full instructions)
      U6 - updateRecord - Default Block_instruction: |-
        Use updateRecord to change
        the record for "Eye of the Tiger." (Click to see full instructions)
      U6 - updateRecord - Update Nonexistent Record_instruction: |-
        Force updateRecord
        to fail by changing the ID of songToUpdate. (Click to see full instructions)
      Underground Avoiding Lava_instruction: Sub aceste blocuri se gaseste lava, pe
        care trebuie sa o acoperi inainte sa mergi inainte. O comanda "Daca" ar fi
        de ajutor aici. Adauga o comanda "Mergi inainte" in locul corect pentru a
        acoperi aceste blocuri.
      Underground Avoiding Lava_2018_instruction: |-
        Lava is hiding beneath some of
        these blocks, which you'll need to cover up before moving forward. An "if"
        command will come in handy here. Add a "move forward" command in the correct
        place to mine these blocks.
      Underground If Statements_instruction: Acum lucrurile devin mai dificile. Aduna
        3 pietre rosii, dar fara sa cazi in lava. Foloseste o comanda "daca" pentru
        a acoperi lava cu piatra.
      Underground If Statements_2018_instruction: |-
        Now things are getting tricky.
        Mine 3 redstone, but don’t fall in the lava. Use an "If" command to place
        cobblestone over any lava you uncover.
      Underground Iron_instruction: A merge in lava topita este o idee rea. Plaseaza
        placi de gresie pentru a crea un pod, apoi aduna cel putin 2 dintre blocurile
        de fier.
      Underground Iron_2018_instruction: |-
        Walking into molten lava is a bad idea.
        Place cobblestone to create a bridge, then mine at least two of the iron blocks.
      Underground Mining Coal_instruction: Vei gasi cele mai valoroase resurse in
        subteran, dar se poate face intuneric. Plaseaza cel putin 2 torte si cauta
        cel putin 2 carbuni.
      Underground Mining Coal_2018_instruction: Vei gasi cele mai valoroase resurse
        in subteran, dar se poate face intuneric. Plaseaza cel putin 2 torte si cauta
        cel putin 2 carbuni.
      Unicorn Tag_instruction: |-
        Take a look at this project.  Do you see how it was
        made?
      Valentine_artist2_01_instruction: |-
        Program the artist to draw some grass for
        the Love Bug.
      Valentine_artist_01_instruction: 'Help the artist finish his llama heart. '
      Valentine_playlab_01_instruction: "Program Kiki (Actor 1) to move left and\nright
        when the left and right arrows are pressed. When Kiki is clicked, she\nshould
        throw hearts towards her friends. "
      Vigenere_instruction: Test
      WhileAdventure_instruction: |-
        Our adventurer wants to collect coins. Can you
        help her grab as many as she can using only one remove 1 block?
      'Widget: Black and White Pixelation_instruction': |-
        Now make your own image!
        We've started you off with a 10x10 canvas but you can make it whatever size
        you want. Happy pixeling!
      'Widget: Color Pixelation_instruction': |-
        Requirements: The icon must be 16x16
        pixels. You must use the Pixelation Widget to encode the bits of color information.
        The image must be encoded with at least 12 bits per pixel.
      'Widget: Text Compression_instruction': |-
        Look for patterns (repeated words
        or phrases) in the text. Enter the patterns you see into the dictionary on
        the right. As you type entries into the dictionary, the symbol for the entry
        is inserted into the text in place of the pattern.
      XML Scratchpad_instruction: Using this test level to grab xml for unit tests
      aE1_instruction: "You chose to make a square napkin! \\r\n\\r\nTo finish, draw\na
        square with 20 pixel sides. "
      aE2_instruction: |-
        If you place your square loop inside another loop, we call
        that a nested loop. What do you need to add as an outer loop to make sure
        all 14 napkins line up next to each other?
      aE3_instruction: |-
        We've got to have a tablecloth!  \r
        \r
        Take your row of
        14 napkins and sew 14 of those together with another **outer loop** to make
        a cover for our table.
      aE3alternate_instruction: Alternate
      aE3alternateB_instruction: Alternate
      aE4_instruction: Alternate
      aE5_instruction: Example of puzzle using highest difficulty level shape.
      aE6_instruction: "How many times do you need to loop this to draw half  of\na
        circle? "
      aE7_instruction: |-
        If you create another loop like this one, but turn left instead
        of right, what happens? \r
        \r
        Can you repeat all of that to draw this wave?
      aE8_instruction: |-
        Now let's loop that whole thing four times to create this
        picture frame. Watch out for the corners - you can't just turn 90 degrees!
        \r
        \r
        If looping a 3 degree turn 60 times makes a half circle, which of
        these blocks of code will make an additional quarter circle for the corners?
      aEfreeplay_instruction: Free Play!
      allHallows2017_instruction: |-
        Trap the Code.org employees in the crayon box
        by drawing a square with 320 pixel sides!
      allthethings data blocks test_instruction: |-
        Please sign in to test applab levels
        (By design, applab levels only work if signed in. Normally, we make people
        sign in, but this is only enforceable for a whole script and would be annoying
        to do for the allthethings script).
      allthethings design mode elements_instruction: |-
        Please sign in to test applab
        levels (By design, applab levels only work if signed in. Normally, we make
        people sign in, but this is only enforceable for a whole script and would
        be annoying to do for the allthethings script).
      allthethings level dataTables_instruction: |-
        Please sign in to test applab levels
        (By design, applab levels only work if signed in. Normally, we make people
        sign in, but this is only enforceable for a whole script and would be annoying
        to do for the allthethings script).
      allthethings_U3 - Simple Drawing - Rectangle Width and Height_instruction: |-
        Do
        This
      allthethings_moviebot_instruction: |-
        This level cloned from "U3 Digital Assistant
        Target"
      allthethings_template_backed1_instruction: "Backed by a template #1. Please\nsign
        in to test applab levels (By design, applab levels only work if signed\nin.
        Normally, we make people sign in, but this is only enforceable for a whole\nscript
        and would be annoying to do for the allthethings script). "
      allthethings_template_backed2_instruction: |-
        Backed by a template #2. Please
        sign in to test applab levels (By design, applab levels only work if signed
        in. Normally, we make people sign in, but this is only enforceable for a whole
        script and would be annoying to do for the allthethings script).
      allthethings_ttscsp_instruction: |-
        Debug the program by fixing the logical error
        within the program. (Click to see full instructions)
      artistDebugVideo1_instruction: Use the `repeat` loop to add waves to the water.
      artistFunctionsVideo1_instruction: |-
        Follow the instructions to make your own
        function.
      artistLoopsK1_instruction: |-
        This is a new type of puzzle called "Artist".
        Play with the level and draw something fun.
      artistLoopsK2_instruction: |-
        Now, use a `repeat` loop to draw this line five
        times!
      artistLoopsK2gradek_artist_loops3_instruction: |-
        Now, use a `repeat` loop to
        draw this line five times!
      artistLoopsK3_instruction: |-
        Draw a line eight steps long. This will become
        the land for our kingdom!
      artistLoopsK4_instruction: |-
        Now we need a castle with a draw bridge.  Fix the
        code so that the bridge lays straight instead of falling down.
      artistLoopsK5_instruction: |-
        Now we need to fix the top of the castle. Can you
        loop the code three times?
      artistLoopsK6_instruction: "Someone is stuck in the tower!  Fix the stairs\nto
        set them free. "
      artistLoopsK7_instruction: "This tower is lovely, what is downstairs? Build\nanother
        staircase to find out! "
      artistLoopsK8_instruction: |-
        Wow! There's a garden over there!  Help fix these
        stairs so I can get to it.
      artistLoopsK9_instruction: |-
        **Challenge:**  Lovely! Let's take a walk around
        the garden.
      artistLoopsKA_instruction: |-
        These stones are in the wrong place.  Help me move
        them so I don't fall in!
      artistLoopsKB_instruction: "Look!  It's a theater.  Help me set up the chairs\nso
        we can all see the stage. "
      artistLoopsKFP_instruction: |-
        Picture time!  Use what you have learned to draw
        a picture of what you think the Artist saw on stage.
      asteroids_instruction: |-
        This Corgi has been a good boy! Drag this carrot to
        him as a special treat.
      beeDebugVideo1_instruction: Poti folosi o bucla pentru a colecta tot nectarul?
      behavior bash mary_instruction: Clone this level and make your own blocks!
      behaviors clone me 2_instruction: Clone this level and make your own blocks!
      behaviors clone me Ram_instruction: Clone this level and make your own blocks!
      behaviors clone me joshl_instruction: Clone this level and make your own blocks!
      behaviors clone me nk_instruction: Clone this level and make your own blocks!
      behaviors clone me tanya_instruction: Clone this level and make your own blocks!
      behaviors clone me_instruction: Clone this level and make your own blocks!
      behaviors pet test 123 copy_instruction: |-
        When Daisy gets a carrot, she gets
        excited. Use the **"when touches"** event and the "add behavior" block
        to make Daisy do something fun when she gets the carrot.
      behaviors pet test 123_instruction: |-
        When Daisy gets a carrot, she gets excited.
        Use the **"when touches"** event and the "add behavior" block to make
        Daisy do something fun when she gets the carrot.
      behaviors pet test 2_instruction: |-
        When Daisy gets a carrot, she gets excited.
        Use the **"when touches"** event and the "add behavior" block to make
        Daisy do something fun when she gets the carrot.
      behaviors pet test 3_instruction: "**It's time to make your own virtual pet!**\nYou
        can change whatever code you want to to make your own pet. Here are some\nideas:\\r\n*
        Can you make your pet start a new behavior when you click on it?\\r\n*\nCan
        you make your pet run away when you drag the vacuum to it?\\r\n* Can you\nadd
        other animal friends to your pet's area? "
      behaviors pet test_instruction: |-
        Last time, you practiced using "behaviors"
        to make a sprite do something forever. This time, we will use behaviors to
        make a virtual pet. \r
        \r
        This dog's name is Daisy. Daisy LOVES to snack
        on carrots. Add the "drag and drop" behavior to the carrot so you can move
        it to her.
      behaviors_caley_instruction: Clone this level and make your own blocks!
      ben's first level_instruction: Clone this level and make your own blocks!
      birdsDebugVideo1_instruction: |-
        Trace the path and lead me to the silly pig.
        Avoid TNT or feathers will fly!
      bounce_1_instruction: Atașează un bloc la blocul "când săgeată stânga" şi apasă
        "Rulează programul". Mută paleta folosind săgeata stânga pentru a ajunge la
        ţinta finală.
      bounce_10_instruction: Există un acum un gol în partea de sus. Atașează blocurile
        "scor" și "scor oponent" la blocurile "când bila este in gaură" și "când bila
        ratează paleta" ca să faci un joc. Vezi câte puncte poți înscrie înainte ca
        oponentul tău să înscrie de două ori.
      bounce_10_2018_instruction: Există un acum un gol în partea de sus. Atașează
        blocurile "scor" și "scor oponent" la blocurile "când bila este in gaură"
        și "când bila ratează paleta" ca să faci un joc. Vezi câte puncte poți înscrie
        înainte ca oponentul tău să înscrie de două ori.
      bounce_10_basketball_instruction: Există acum un cos în partea de sus. Atașează
        blocurile "scor" și "scor oponent" la blocurile "când mingea este in cos"
        și "când bila ratează cosul" ca să faci un joc. Vezi câte puncte poți înscrie
        înainte ca oponentul tău să înscrie de două ori.
      bounce_10_sports_instruction: Există un acum un gol în partea de sus. Atașează
        blocurile "scor" și "scor oponent" la blocurile "când bila este in gaură"
        și "când bila ratează paleta" ca să faci un joc. Vezi câte puncte poți înscrie
        înainte ca oponentul tău să înscrie de două ori!
      bounce_11_instruction: Acum poți atașa blocuri la blocul "rulează". Trebuie
        să atașezi noul bloc "lansare minge nouă" cel puțin într-un loc. De asemenea,
        încearcă să schimbi scena sau viteza paletei și a mingii şi vezi cât de multe
        puncte poți înscrie înainte ca adversarul să înscrie de două ori.
      bounce_11_2018_instruction: |-
        You can now attach blocks to the "when run"
        block. You have to attach the new "launch new ball" block in more than one
        place. Also, try changing the scene or the speed of the paddle and the ball
        and see how many points you can score before your opponent scores twice.
      bounce_11_basketball_instruction: Acum poți atașa blocuri la blocul "rulează".
        Trebuie să atașezi noul bloc "lansare minge nouă" cel puțin într-un loc. De
        asemenea, încearcă să schimbi scena sau viteza mainii și a mingii şi vezi
        cât de multe puncte poți înscrie înainte ca adversarul să înscrie de două
        ori!
      bounce_11_sports_instruction: Acum poți atașa blocuri la blocul "rulează". Trebuie
        să atașezi noul bloc "lansare minge nouă" cel puțin într-un loc. De asemenea,
        încearcă să schimbi scena sau viteza mainii și a mingii şi vezi cât de multe
        puncte poți înscrie înainte ca adversarul să înscrie de două ori!
      bounce_12_instruction: Crează propriul tău joc Țopăială. Poți modifica toate
        imaginile şi regulile. Când ai terminat, apasă Distribuie pentru a permite
        prietenilor tăi să încerce jocul pe telefoanele lor.
      bounce_12_2018_instruction: |-
        Create your own Bounce game. You can change all
        the visuals and the rules. When you're done, click Finish to let friends
        try your game on their phones.
      bounce_12_basketball_instruction: Crează propriul tău joc de baschet. Poți modifica
        toate regulile. Când ai terminat, apasă Finalizeaza pentru a permite prietenilor
        tăi să încerce jocul pe telefoanele lor.
      bounce_12_sports_instruction: Crează propriul tău joc. Poți modifica toate imaginile
        şi regulile, mixeaza sporturi, fii creativ. Când ai terminat, apasă Distribuie
        pentru a permite prietenilor tăi să încerce jocul pe telefoanele lor.
      bounce_1_2018_instruction: |-
        Attach a block to the "when left arrow" block
        and press "Run". Move the paddle using the left arrow to reach the finish
        target.
      bounce_1_basketball_instruction: Atașează un bloc la blocul "când săgeată stânga"
        şi apasă "Rulează". Mută mana folosind săgeata stânga pentru a ajunge la ţinta
        finală.
      bounce_1_sports_instruction: Trebuie sa ajungi la steag! Ataseaza un bloc "cand
        sageata stanga" si apasa "Ruleaza" pentru a misca jucatorul catre steag.
      bounce_2_instruction: Atașează un bloc la blocurile "când săgeată dreapta" și
        "când săgeată stânga". Mută paleta pentru a atinge ambele ținte finale.
      bounce_2_2018_instruction: |-
        Attach a block to the "when right arrow" and
        "when left arrow" blocks. Move the paddle to reach both finish targets.
      bounce_2_basketball_instruction: Atașează un bloc la blocurile "când săgeată
        dreapta" și "când săgeată stânga". Mută mana pentru a atinge ambele ținte
        finale.
      bounce_2_sports_instruction: Există două steaguri acum! Ataşaţi un bloc la "atunci
        când săgeată stanga" şi "săgeată dreapta când" pentru a face personajul sa
        se deplaseze în două direcţii.
      bounce_3_instruction: Acum, încearcă ceva similar cu blocul "când săgeata în
        sus". Mută padela până la obiectivul final din partea de sus.
      bounce_3_2018_instruction: Acum, încearcă ceva similar cu blocul "când săgeata
        în sus". Mută padela până la obiectivul final din partea de sus.
      bounce_4_instruction: De data aceasta ai nevoie să adăugi patru blocuri. Mută
        paletele la toate cele patru obiective pentru a finaliza acest puzzle.
      bounce_4_2018_instruction: |-
        This time you need to add four blocks. Move the
        paddle to all four finish targets to complete this puzzle.
      bounce_5_instruction: Vom trimite o bilă sa zboare în jos spre palete. Ataşează
        un bloc la blocul "când bila lovește paleta" pentru a garanta ca bila atinge
        obiectivul țintă.
      bounce_5_2018_instruction: |-
        We're going to send a ball flying down towards
        the paddle. Attach a block to the "when ball hits paddle" block to ensure
        the ball reaches the finish target.
      bounce_5_basketball_instruction: Vom trimite o minge sa zboare în jos spre mana.
        Ataşează un bloc la blocul "când mingea lovește mana" pentru a garanta ca
        mingea atinge obiectivul țintă.
      bounce_5_sports_instruction: Pucul de hokey va zbura catre jucator! Ataseaza
        un bloc la blocul "cand mingea loveste jucatorul" pentru a lovi steagul.
      bounce_6_instruction: Acum obiectivul țintă se află în partea de sus. Ai nevoie
        să atașezi blocuri la ambele blocuri "când bila lovește" pentru a rezolva
        puzzle-ul.
      bounce_6_2018_instruction: |-
        Now the finish target is on the top. You need to
        attach blocks to both of the "when ball hits" blocks to solve this puzzle.
      bounce_6_basketball_instruction: Acum obiectivul țintă se află în partea de
        sus. Ai nevoie să atașezi blocuri la ambele blocuri "când mingea lovește"
        pentru a rezolva puzzle-ul.
      bounce_6_sports_instruction: Acum obiectivul țintă se află în partea de sus.
        Ai nevoie să atașezi blocuri la ambele blocuri "când mingea lovește" pentru
        a rezolva puzzle-ul.
      bounce_7_instruction: Atașează blocuri la fiecare din blocurile "când". Fă bila
        să ricoșeze până ajunge la țintă.
      bounce_7_2018_instruction: Atașează blocuri la fiecare din blocurile "când".
        Fă bila să ricoșeze până ajunge la țintă.
      bounce_7_basketball_instruction: Atașează blocuri la fiecare dintre blocurile
        "când". Fă bila să ricoșeze până ajunge la țintă.
      bounce_7_sports_instruction: Atașează blocuri la fiecare dintre blocurile "când".
        Fă bila să ricoșeze până ajunge la țintă.
      brendan behaviors clone_instruction: Clone this level and make your own blocks!
      brendan hackathon level_instruction: |-
        these are the instructions for my level.  you
        should do this level and have a good time.
      clone me mary_instruction: Clone this level and make your own blocks!
      collector example_instruction: |-
        Put these blocks in order to collect all of
        the gold and solve the puzzle.
      collectorDebugVideo2_instruction: |-
        Put these blocks in order to collect all
        of the gold and solve the puzzle.
      collectorSkinVideo1_instruction: Collect all four piles to pass this level.
      collectorSkinVideo2_instruction: Collect one pile of gold to pass this level.
      comment_intro_maze_2018_instruction: |-
        Use the new `comment` block to leave
        yourself quick reminders.
      conditionals_forvideo_harvester_instruction: |-
        Collect all of the corn and lettuce,
        then pick the pumpkin.
      conditionals_forvideo_playlab_instruction: Score as many points as you can!
      course1_artist_loops_challenge1_instruction: |-
        You can use a loop to draw many
        lines in a row.\r
        \r
        Can you draw a house? Make it look just the way you
        like it!  Try looking for patterns that repeat!
      course1_artist_loops_challenge2_instruction: |-
        Let's play a game! Draw as many
        X's as you can! Can you get 3 in a row?
      course1_artist_loops_challenge3_instruction: |-
        "Can you help me make two bird
        houses?"
      course1_artist_loops_challenge4_instruction: |-
        "It's time to toss the dice!
        Can you help me draw these?"
      course1_collector_loops_challenge1_instruction: |-
        "Can you help me spot some
        bugs? I know which way I want to go, but I'm not sure how many steps to take."
      course1_collector_loops_challenge2_instruction: "This time you can only use\none
        of each arrow block. Get all of the treasure! "
      course1_collector_loops_challenge3_instruction: "This time you can only use\none
        of each arrow block. Get all of the treasure! "
      course1_collector_loops_challenge4_instruction: |-
        Let's get the treasure! Help
        me across each row then come back to start the next row. Can you find a pattern?
      course1_maze_debugging_challenge1_instruction: |-
        Debug this level. Remove the
        extra blocks and add the missing blocks. Get the bird to the pig!
      course1_maze_debugging_challenge2_instruction: |-
        Debug this level. These are
        the right blocks, but they're in the wrong order!
      course1_maze_seq_challenge1_instruction: |-
        "Trace the path and lead me to the
        silly pig. Avoid TNT or the feathers will fly!"
      course1_maze_seq_challenge2_instruction: |-
        You can only move up to four times
        in each direction. Can you find a path before you run out of blocks?
      course1_playlab_events_challenge1_instruction: |-
        "Where are my friends hiding?
        Can you write code to show the rest of my friends?"
      course1_playlab_events_challenge2_instruction: |-
        "Let's have a party! Give
        my friends something to do when you click or tap them."
      course2_artist_nestedLoops_challenge1_instruction: |-
        Can you figure out how
        to make a picture like this?
      course2_artist_nestedLoops_challenge2_instruction: |-
        Can you figure out how
        to make a picture like this?
      course2_artist_prog_challenge1_instruction: |-
        Draw rooms for each of the animals.
        There are many different ways to solve this puzzle, so have some fun. The
        shortest possible solution is 6 blocks, but use as many as you like!
      course2_artist_prog_challenge2_instruction: |-
        *Help me paint the yellow lines
        on this road!*
      course2_bee_conditionals_challenge1_instruction: |-
        Collect all of the nectar
        or make all the honey.
      course2_bee_conditionals_challenge2_instruction: |-
        Collect all of the nectar
        or make all the honey.
      course2_collector_loops_challenge2_instruction: |-
        Let's hunt for treasure -
        using loops! Help the collector by debugging this code. Get all of the treasure!
      course2_collector_prog_challenge1_instruction: |-
        Look carefully! Can you collect
        all *10* pieces of treasure?
      course2_collector_prog_challenge2_instruction: |-
        There are 20 pieces of treasure
        to be found. Collect at least half to finish this challenge!
      course2_harvester_loops_challenge1_instruction: Collect all of the corn.
      course2_harvester_loops_challenge2_instruction: |-
        Collect all of the lettuce.
        Avoid the trees and fields!
      course2_maze_loops_challenge1_instruction: "Now Scrat wants to try using loops\nto
        find his acorn! "
      course2_maze_programming_challenge1_instruction: |-
        *"The pig is hiding! Can
        you help me find a way around?"*
      course2_maze_programming_challenge2_instruction: |-
        Sometimes there is more than
        one way to solve the same problem. Sometimes it's faster to go backwards
        than it is to go forwards!
      course2_maze_seq_challenge1_instruction: |-
        Trace the path and lead me to the
        silly pig. Avoid TNT or the feathers will fly!
      course2_maze_seq_challenge2_instruction: |-
        You can only move up to four times
        in each direction. Can you find a path before you run out of blocks?
      course2_playlab_stage17_1_instruction: Poți să îl faci pe Câinele Jorge (actor
        1) să spună "Bună"?
      course2_playlab_stage17_10_instruction: "Adaugă blocuri la evenimentul 'când
        alerg' pentru a schimba fundalul și viteza lui Waddles.\\r \\r \nJucați jocul
        și mutați-l pe Waddles cu săgețile până atingeți scorul."
      course2_playlab_stage17_11_instruction: Creați-vă propria poveste. Când ați
        terminat, faceți click pe Terminare pentru a permite prietenilor să vă încerce
        povestea pe telefoanele lor.
      course2_playlab_stage17_2_instruction: Poți să îl faci pe Jorge (actor 1) să
        spună ceva, apoi pe Pisica Olive (actor 2) să spună altceva?
      course2_playlab_stage17_3_instruction: Poți scrie un program pentru a-l face
        pe Jorge (actor 1) să se mute spre Pisica Olive?
      course2_playlab_stage17_4_instruction: Poți scrie un program pentru a-l face
        pe Jorge (actor 1) să se mute spre Pisica Olive, apoi Olive să spună "Bună"
        când Jorge ajunge la ea?
      course2_playlab_stage17_5_instruction: Poți scrie un program care să o facă
        pe Octavia să spună "Bună" când este apăsată?
      course2_playlab_stage17_6_instruction: Acum, scrie un program care să îl facă
        pe Waddles să se miște de jur împrejur folosind tastele săgeată sus / jos
        / stânga / dreapta pentru a atinge toate obiectivele!
      course2_playlab_stage17_7_instruction: |-
        The `repeat forever` block allows you
        to run code over and over forever. Can you attach blocks to move Chomp the
        Dino (actor 2) up and down forever?
      course2_playlab_stage17_8_instruction: "Poți să îl faci pe Waddles (actor 1)
        să spună \"Au!\" și să redea un sunet \"lovit\" dacă aleargă într-un Chomp?
        \\r \\r \nCând ești gata, joacă jocul pentru a face acest lucru."
      course2_playlab_stage17_9_instruction: |-
        Puteți adăuga un bloc pentru a marca un punct când Waddles aleargă în Octavia (actor 3)? \r
        Jucați jocul și mutați-l pe Waddles cu tastele săgeată până când înscrieți!
      course3_artist_concept_challenge1_instruction: |-
        Feel free to use trial and
        error. You are not expected to get the image perfect the first time.   Want
        to see more hints?  Click here!
      course3_artist_functions_challenge1_instruction: |-
        Once you define a function,
        you can call it over and over again - whenever and wherever you want! Try
        this code to see how it works, then change it to make your own impressive
        design!
      course3_artist_functions_challenge2_instruction: |-
        Try this code to see how
        it works, then make the program your own!
      course3_bee_debugging_challenge1_instruction: |-
        Watch how the bee gets the nectar.
        Can you use the same kind of pattern to help the bee make all of the honey?
      course3_bee_functions_challenge1_instruction: |-
        You are on your own for this
        challenge. This could "bee" harder than it looks!
      course3_bee_functions_challenge2_instruction: |-
        You are on your own for this
        challenge!
      course3_bee_functions_challenge3_instruction: |-
        Create a new function to collect
        all the nectar and honey while there is a path ahead. Use it to complete the
        puzzle!
      course3_bee_functions_challenge4_instruction: |-
        Use everything you have learned
        to complete this puzzle!
      course3_collector_debugging_challenge2_instruction: |-
        Are you an expert of nested
        loops? Use what you have learned so far to collect all of the treasure!
      course3_farmer_condLoops_challenge1_instruction: |-
        Turn right at the pumpkins.
        Collect everything to complete the level. Each hidden crop has only one corn
        or lettuce.
      course3_farmer_condLoops_challenge2_instruction: |-
        Collect everything to complete
        the level.
      course3_farmer_until_challenge2_instruction: |-
        Use If/Else blocks to follow
        the curvy path. At each corner, use the `remove 1` command in a loop to clear
        the piles.
      course3_maze_debugging_challenge1_instruction: |-
        *"Am I just going around in
        circles?"*
      course3_maze_debugging_challenge2_instruction: |-
        *"If I turn too often, I might
        get dizzy! Help me reach the acorn with only four `turn` commands."*
      course3_maze_until_challenge1_instruction: |-
        No hints, just challenge. Get the
        zombie to the sunflower.
      course3_playLab_challenge1_instruction: |-
        Something should happen when you get
        enough points or when you run out of points. Add some code to the `win game`
        and `lose game` functions to make the game work the way it should. \r
        Click
        the hints for ideas!
      course3_playlab_challenge2_instruction: |-
        Can you figure out how this "Fortune
        Teller" app works? Click `MORE` to see your challenges.
      course3_playlab_stage16_1_instruction: Poți face acest câine să spună "Bună
        ziua lume"?
      course3_playlab_stage16_2_instruction: Puteți face câinele să spună ceva și
        apoi pisica să continue spunând altceva?
      course3_playlab_stage16_3_instruction: Puteți scrie un program pentru a face
        acest câine să se miște către pisică?
      course3_playlab_stage16_4_instruction: Poți scrie un program care să îl facă
        pe câine să meargă către pisică, iar atunci când o ajunge, aceasta să spună
        "Bună"?
      course3_playlab_stage16_5_instruction: Puteţi să adăugaţi un bloc pentru a face
        caracatiţa fericită?
      course3_playlab_stage16_6_instruction: Creați-vă propria poveste. Când ați terminat,
        faceți click pe Terminare pentru a permite prietenilor să vă încerce povestea
        pe telefoanele lor.
      course3_playlab_stage17_1_instruction: Puteţi scrie un program pentru a face
        caracatiţa să spună "Bună", atunci când se dă clic pe ea?
      course3_playlab_stage17_2_instruction: Acum, scrie un program care să îl facă
        pe Waddles să se miște de jur împrejur folosind tastele săgeată sus / jos
        / stânga / dreapta pentru a atinge toate obiectivele?
      course3_playlab_stage17_3_instruction: Blocul "repetă pentru totdeauna" vă permite
        să rulaţi cod continuu. Puteți ataşa blocuri pentru a muta acest dinozaur
        în sus şi în jos în mod repetat?
      course3_playlab_stage17_4_instruction: Puteți să îl faceți pe Waddles să spună
        "Au!" şi să redea un sunet "lovit" dacă el aleargă la dinozaur, şi apoi să
        îl mutaţi cu săgeţile pentru a face să se întâmple asta?
      course3_playlab_stage17_5_instruction: Puteţi adăuga un bloc pentru a înscrie
        un punct când Waddles aleargă la caracatiţă şi apoi să îl mutaţi cu săgeţile
        până când înscrieți puncte?
      course3_playlab_stage17_6_instruction: Puteţi adăuga blocuri pentru a schimba
        fundalul şi viteza lui Waddles, şi apoi să îl mutaţi cu săgeţile până când
        marcați?
      course3_playlab_stage17_7_instruction: Creați-vă propria poveste. Când ați terminat,
        faceți click pe Terminare pentru a permite prietenilor să vă încerce povestea
        pe telefoanele lor.
      course4_artist_binary_challenge1_instruction: |-
        You can only use each binary
        value (0 or 1) once each in this puzzle. Try using nested loops to complete
        this drawing.
      course4_artist_binary_challenge2_instruction: |-
        Are you persistent enough to
        restore this logo back to normal?
      course4_artist_concept_challenge2_instruction: |-
        Create five pinwheel designs
        using the code below.
      course4_artist_functions_challenge2_instruction: |-
        Try this code to see how
        it works, then make the program your own!
      course4_artist_fwp_challenge1_instruction: |-
        Try running this program, and make
        changes to see what happens. Can you figure out how it works? (Or delete it
        and replace it with something totally different)
      course4_artist_variables_challenge1_instruction: |-
        You've now learned everything
        you need to know to make a pattern like this! This puzzle is meant to be difficult.  Can
        you stick with it until you figure out the solution?
      course4_artist_variables_challenge2_instruction: |-
        You've now learned everything
        you need to know to make a pattern like this! This puzzle is meant to be difficult.  Can
        you stick with it until you figure out the solution?
      course4_bee_for_challenge1_instruction: |-
        Use this for loop to collect all of
        the nectar. There are a few actions that you will want to repeat 'counter'
        times.
      course4_bee_fwp_challenge1_instruction: |-
        Use one `for loop` in a function to
        collect all of the corn. The same `for loop` can count to different maximum
        values by using the `length` parameter.
      course4_bee_fwp_challenge2_instruction: |-
        Use one `for loop` in a function to
        collect all of the vegetables in the row. Make the `for loop` can count to
        different maximum values by using the `length` parameter. Make your program
        as short as possible by using a second `for loop` outside the function.
      course4_collector_nested_loops_challenge2_instruction: |-
        Help the collector
        reach at least two piles of treasure using only the blocks in your toolbox.
        It is possible to collect all 4.
      course4_harvester_nested_loops_challenge1_instruction: |-
        "I need some help
        on the farm! Help me harvest this corn using only the blocks in your toolbox."
      course4_playlab_variables_challenge1_instruction: |-
        Use these blocks to make
        the actors share a knock-knock joke. Change the setup and punchline to tell
        your own joke!
      course4_playlab_variables_challenge3_instruction: |-
        Can you figure out how this
        "Fortune Teller" app works? Click `MORE` to see your challenges.
      courseA_artist_loops1_instruction: |-
        This is a new type of puzzle called "Artist".
        Play with the level and draw something fun.
      courseA_artist_loops10_instruction: |-
        Help me put down stones so I don't fall
        in!
      courseA_artist_loops10_2018_instruction: |-
        Help me put down stones so I don't
        fall in!
      courseA_artist_loops11_instruction: |-
        Help me build steps to watch the ship
        sail away.
      courseA_artist_loops11_2018_instruction: |-
        Help me build steps to watch the
        ship sail away.
      courseA_artist_loops12_instruction: |-
        The artist saw something funny in the
        distance.  Draw what you think he saw.
      courseA_artist_loops12_2018_instruction: |-
        The artist saw something funny in
        the distance.  Draw what you think he saw.
      courseA_artist_loops1_2018_instruction: |-
        This is a new type of puzzle called
        "Artist". Play with the level and draw something fun.
      courseA_artist_loops2_instruction: |-
        Help the artist draw this line two times
        forward.
      courseA_artist_loops2_2018_instruction: |-
        Help the artist draw this line two
        times forward.
      courseA_artist_loops3_instruction: Draw a line forward five times.
      courseA_artist_loops3_2018_instruction: Draw a line forward five times.
      courseA_artist_loops4_instruction: |-
        Now, use a `repeat` loop to draw this line
        five times!
      courseA_artist_loops4_2018_instruction: |-
        Now, use a `repeat` loop to draw this
        line five times!
      courseA_artist_loops5_instruction: |-
        Draw a line seven steps long. This will
        become our horizon.
      courseA_artist_loops5_2018_instruction: |-
        Draw a line seven steps long. This
        will become our horizon.
      courseA_artist_loops6_instruction: Let's put a nice hill in the back.
      courseA_artist_loops6_2018_instruction: Let's put a nice hill in the back.
      courseA_artist_loops7_instruction: |-
        Use the `repeat` loop to add waves to the
        water.
      courseA_artist_loops7_2018_instruction: |-
        Use the `repeat` loop to add waves
        to the water.
      courseA_artist_loops7_forVideo_instruction: |-
        Use the `repeat` loop to add waves
        to the water.
      courseA_artist_loops8_instruction: We need a ladder up to the boat.
      courseA_artist_loops8_2018_instruction: We need a ladder up to the boat.
      courseA_artist_loops9_instruction: 'Challenge: Fix the stairs.'
      courseA_artist_loops9_2018_instruction: 'Challenge: Fix the stairs.'
      courseA_artist_loops_challenge1_instruction: |-
        Can you draw a house? Make it
        look just the way you like it!
      courseA_artist_loops_challenge1_2018_instruction: |-
        Can you draw a house? Make
        it look just the way you like it!
      courseA_artist_loops_challenge2_instruction: |-
        "Can you help me make two bird
        houses?"
      courseA_artist_loops_challenge2a_instruction: |-
        *"Help me get these three tents
        set up!"*
      courseA_artist_loops_challenge2a_2018_instruction: |-
        *"Help me get these three
        tents set up!"*
      courseA_artist_loops_challenge3_instruction: |-
        Let's play a game! Draw as many
        X's as you can! Can you get 3 in a row?
      courseA_bee_seq1_instruction: |-
        Play with these blocks to help the bee get *one*
        nectar.
      courseA_bee_seq10_instruction: Try it by yourself! Get all the nectar.
      courseA_bee_seq11_instruction: Get all the nectar.
      courseA_bee_seq12_instruction: |-
        Play with these blocks to help the bee get
        *one* nectar.
      courseA_bee_seq13_instruction: |-
        Use three `Move West` blocks and one `Get Nectar`
        block.
      courseA_bee_seq14_instruction: |-
        Use three `Move North` blocks and one `Get
        Nectar` block.
      courseA_bee_seq2_instruction: Help the bee get the nectar!
      courseA_bee_seq3_instruction: Find the bug and fix it!
      courseA_bee_seq4_instruction: Try it yourself!
      courseA_bee_seq5_instruction: Try it yourself!
      courseA_bee_seq6_instruction: Now the bee needs to get nectar from two flowers!
      courseA_bee_seq7_instruction: Add two blocks to finish this puzzle!
      courseA_bee_seq8_instruction: Make sure to get nectar from every flower!
      courseA_bee_seq9_instruction: Make sure to get nectar from every flower!
      courseA_collector_loops1_instruction: |-
        Move Laurel around and get as much treasure
        as you can!
      courseA_collector_loops10_instruction: |-
        Help Laurel get all of the treasure
        along this path.
      courseA_collector_loops10_2018_instruction: |-
        Help Laurel get all of the treasure
        along this path.
      courseA_collector_loops11_instruction: |-
        Help Laurel get all of the treasure
        from this cave.
      courseA_collector_loops11_2018_instruction: |-
        Help Laurel get all of the treasure
        from this cave.
      courseA_collector_loops12_instruction: |-
        *"Eureka!  Get as much treasure as
        you can!"*
      courseA_collector_loops12_2018_instruction: |-
        *"Eureka!  Get as much treasure
        as you can!"*
      courseA_collector_loops1_2018_instruction: |-
        Move Laurel around and get as much
        treasure as you can!
      courseA_collector_loops2_instruction: |-
        Collect all three piles to pass this
        level.
      courseA_collector_loops2_2018_instruction: |-
        Get all three piles to pass this
        level.
      courseA_collector_loops4_instruction: |-
        Fix Laurel's path to get all of this
        treasure.
      courseA_collector_loops4_2018_instruction: |-
        Fix Laurel's path to get all of
        this treasure.
      courseA_collector_loops5_instruction: |-
        Use what you learned to get all of the
        treasure.
      courseA_collector_loops5_2018_instruction: |-
        Use what you learned to get all
        of the treasure.
      courseA_collector_loops6_instruction: |-
        Add blocks to this code to get all of
        the treasure.
      courseA_collector_loops6_2018_instruction: |-
        Add blocks to this code to get
        all of the treasure.
      courseA_collector_loops7_instruction: |-
        What should you add to this code to
        get all of the treasure?
      courseA_collector_loops7_2018_instruction: |-
        What should you add to this code
        to get all of the treasure?
      courseA_collector_loops8_instruction: Write the code to get all of this gold.
      courseA_collector_loops8_2018_instruction: Write code to get all of this treasure.
      courseA_collector_loops9_instruction: |-
        **Challenge:** The treasure goes all
        the way up these stairs!  Write the code to help Laurel get it all.
      courseA_collector_loops9_2018_instruction: |-
        **Challenge:** The treasure goes
        all the way up these stairs!  Write the code to help Laurel get it all.
      courseA_collector_loops_challenge1_instruction: |-
        *"Can you help me spot some
        bugs?"*
      courseA_collector_loops_challenge1_2018_instruction: |-
        *"Can you help me spot
        some bugs?"*
      courseA_collector_loops_challenge2_instruction: "This time you can only use\none
        of each arrow block. Get all of the treasure! "
      courseA_collector_loops_challenge2kp_instruction: |-
        Collect at least **3** pieces
        of treasure to pass this level.
      courseA_collector_loops_challenge2kp_2018_instruction: |-
        Collect at least **3**
        pieces of treasure to pass this level.
      courseA_collector_preLoops1_instruction: |-
        This is Laurel the Adventurer! \r
        \r
        Press
        "Run" to see her walk up to the treasure and grab it.
      courseA_collector_preLoops2_instruction: |-
        Great!  Now you get to add code yourself!  \r
        \r
        Snap
        a `get treasure` block to the bottom of the program and click "Run".
      courseA_collector_preLoops3_instruction: |-
        Snap two `E -->` blocks and one `get
        treasure` block to the bottom of the program, then click "Run".
      courseA_collector_preLoops4_instruction: |-
        Can you figure out how to solve this
        puzzle?
      courseA_collector_preLoops5_instruction: |-
        Get 1 of these 2 gems to solve this
        puzzle.
      courseA_collector_preLoops6_instruction: |-
        Get both pieces of treasure to solve
        this puzzle.
      courseA_collector_preLoops7_instruction: |-
        Get all three piles to pass this
        level.
      courseA_forVideoTest_artist_instruction: |-
        Use the `repeat` loop to add waves
        to the water.
      courseA_harvester_forVideo_instruction: |-
        Can you pick all the corn using only
        **one** move block?
      courseA_harvester_loops1_instruction: Help the farmer pick all the corn!
      courseA_harvester_loops10_instruction: |-
        Help the harvester pick all five ears
        of corn!
      courseA_harvester_loops11_instruction: 'Try one more on your own! '
      courseA_harvester_loops2_instruction: Make sure to pick all the corn!
      courseA_harvester_loops3_instruction: |-
        Can you pick all the corn using only
        **one** move block?
      courseA_harvester_loops4_instruction: |-
        Can you help the harvester find the
        bug in her code?
      courseA_harvester_loops5_instruction: |-
        Try it yourself! Can you pick the corn
        at the end too?
      courseA_harvester_loops5a_instruction: |-
        Look at all this corn! Can you pick
        it all by yourself?
      courseA_harvester_loops5b_instruction: |-
        Can you change your code to make the
        harvester pick all the corn?
      courseA_harvester_loops6_instruction: |-
        You will need **one** `Move South` block
        and **one** `Move West` block.
      courseA_harvester_loops7_instruction: 'Try it on your own! '
      courseA_harvester_loops8_instruction: |-
        This is the same puzzle, but now you
        have to repeat **three** times!
      courseA_harvester_loops9_instruction: |-
        Can you figure out how to pick all the
        corn?
      courseA_harvester_seq1_instruction: |-
        Play with these blocks to help the harvester
        pick the piece of corn.
      courseA_harvester_seq10_instruction: Make sure to pick all the corn!
      courseA_harvester_seq11_instruction: Try it by yourself! Pick all the corn.
      courseA_harvester_seq12_instruction: |-
        Play with these blocks to help the bee
        get *one* nectar.
      courseA_harvester_seq13_instruction: |-
        Play with these blocks to help the harvester
        pick **one** corn.
      courseA_harvester_seq2_instruction: |-
        Use three `move west` blocks and one `pick
        corn` block to solve this puzzle.
      courseA_harvester_seq3_instruction: |-
        Use three `Move North` blocks and one
        `Pick Corn` block.
      courseA_harvester_seq4_instruction: |-
        Add one block to help the harvester pick
        the corn.
      courseA_harvester_seq5_instruction: Find the bug and fix it!
      courseA_harvester_seq6_instruction: Try it yourself!
      courseA_harvester_seq7_instruction: Try it yourself!
      courseA_harvester_seq8_instruction: |-
        Now the harvester needs to pick corn two
        times!
      courseA_harvester_seq9_instruction: Add two blocks to finish this puzzle!
      courseA_maze_ramp2_2018_instruction: |-
        Snap all blocks together to finish your
        code, then click "Run".
      courseA_maze_ramp2a_2018_instruction: |-
        Snap all blocks together to finish your
        code, then click "Run".
      courseA_maze_ramp3_2018_instruction: |-
        There is one extra block that is going
        to cause the bird to crash. Throw it away by dragging it back to the toolbox.
      courseA_maze_ramp3a_2018_instruction: |-
        Add a `North` block to the bottom of
        the other blocks to finish this code, then click "Run".
      courseA_maze_ramp4_2018_instruction: Avoid TNT or feathers will fly!
      courseA_maze_ramp4a_2018_instruction: |-
        Can you figure out which block you need
        to add to the bottom of the other blocks to finish this code?
      courseA_maze_ramp5_2018_instruction: Avoid the TNT.
      courseA_maze_ramp5a_2018_instruction: Get the bird to the pig!
      courseA_maze_seq1_instruction: |-
        Play with these blocks to see if you can get
        me to the pig!
      courseA_maze_seq10_instruction: "Challenge: Go around the TNT to get the bird\nto
        the pig! "
      courseA_maze_seq10_2018_instruction: "Challenge: Avoid the TNT to get the bird\nto
        the pig! "
      courseA_maze_seq11_instruction: |-
        Move one way, then another to get the bird
        to the pig.
      courseA_maze_seq11_2018_instruction: |-
        Move one way, then another to get the
        bird to the pig.
      courseA_maze_seq12_instruction: 'Get that pig! '
      courseA_maze_seq12_2018_instruction: 'Get that pig! '
      courseA_maze_seq13_instruction: Get the pig any way you can!
      courseA_maze_seq13_2018_instruction: Get the pig any way you can!
      courseA_maze_seq1_2018_instruction: Get the bird to the bad pig!
      courseA_maze_seq2_instruction: Modifică secvenţa de cod pentru a mă duce la
        porc!
      courseA_maze_seq2_2018_instruction: Modifică secvenţa de cod pentru a mă duce
        la porc!
      courseA_maze_seq3_instruction: Fix the code to get the bird to the pig!
      courseA_maze_seq3_2018_instruction: Fix the code to get the bird to the pig!
      courseA_maze_seq4_instruction: REMOVE a block to get the bird to the pig!
      courseA_maze_seq4_2018_instruction: |-
        REMOVE a block to get the bird to the
        pig!
      courseA_maze_seq4a_instruction: |-
        Get the bird to the pig using the fewest possible
        blocks.
      courseA_maze_seq5_instruction: Try this one yourself from the beginning.
      courseA_maze_seq5_2018_instruction: Try this one yourself from the beginning.
      courseA_maze_seq5a_2018_instruction: |-
        What can you add to the end of this code
        to get the bird to the pig?
      courseA_maze_seq6_instruction: |-
        Move one way, then another to get the bird
        to the pig!
      courseA_maze_seq6_2018_instruction: |-
        Move one way, then another to get the
        bird to the pig!
      courseA_maze_seq7_instruction: |-
        Figure out what is missing and then add blocks
        to get the bird to the pig!
      courseA_maze_seq7_2018_instruction: |-
        Figure out what is missing and then add
        blocks to get the bird to the pig!
      courseA_maze_seq8_instruction: Solve this level and get the bird to the pig!
      courseA_maze_seq8_2018_instruction: |-
        Solve this level and get the bird to the
        pig!
      courseA_maze_seq9_instruction: |-
        Debug this level by adding blocks to get the
        bird to the pig!
      courseA_maze_seq9_2018_instruction: |-
        Debug this level by adding blocks to get
        the bird to the pig!
      courseA_maze_seq_challenge1_instruction: |-
        Something is wrong here. Help fix
        the code to get the bird to the pig!
      courseA_maze_seq_challenge1_2018_instruction: |-
        Something is wrong here. Help
        fix the code to get the bird to the pig!
      courseA_maze_seq_challenge2_instruction: |-
        Trace the path to lead the bird to
        the pig. Avoid TNT or feathers will fly!
      courseA_maze_seq_challenge2_2018_instruction: |-
        Trace the path to lead the bird
        to the pig. Avoid TNT or feathers will fly!
      courseA_playLab_events1_instruction: |-
        This is a Play Lab level.  Move blocks
        to the workspace and see what happens!
      courseA_playLab_events1_2018_instruction: |-
        This is a Play Lab level.  Move
        blocks to the workspace and see what happens!
      courseA_playLab_events2_instruction: |-
        Jorge the Dog wants to say "Hi there."  Can
        you help him?
      courseA_playLab_events2_2018_instruction: |-
        Jorge the Dog wants to say "Hi
        there."  Can you help him?
      courseA_playLab_events3_instruction: |-
        Connect the `move left` block to the
        `when left` event block that is already in the workspace.
      courseA_playLab_events3_2018_instruction: |-
        Connect the `move left` block to
        the `when left` event block that is already in the workspace.
      courseA_playLab_events4_instruction: |-
        Now, get Jorge to move right when the
        `right` button is clicked.
      courseA_playLab_events4_2018_instruction: |-
        Now, get Jorge to move right when
        the `right` button is clicked.
      courseA_playLab_events5_instruction: |-
        Add events to have Jorge move up and
        down when the `up` and `down` buttons are pressed.
      courseA_playLab_events5_2018_instruction: |-
        Add events to have Jorge move up
        and down when the `up` and `down` buttons are pressed.
      courseA_playLab_events6_instruction: |-
        Make this more interesting by changing
        the background and playing a random sound when Jorge is clicked.
      courseA_playLab_events6_2018_instruction: |-
        Make this more interesting by changing
        the background and playing a random sound when Jorge is clicked.
      courseA_playLab_events7_instruction: |-
        Add anything you want to this game.  Can
        you make the dinosaur disappear when Jorge runs into him?
      courseA_playLab_events7_2018_instruction: |-
        Add anything you want to this game.  Can
        you make the dinosaur disappear when Jorge runs into him?
      courseA_playlab_events_challenge1_instruction: |-
        Can you write code to show
        the rest of my friends? The hints will help you do this project step-by-step.
      courseA_playlab_events_challenge1_2018_instruction: |-
        Can you write code to
        show the rest of my friends? The hints will help you do this project step-by-step.
      courseA_playlab_events_challenge2_instruction: |-
        Give everyone something to
        do when you click on them.
      courseA_playlab_events_challenge2_2018_instruction: |-
        Give everyone something
        to do when you click on them.
      courseA_playlab_events_challengeClone_instruction: |-
        Where are my friends hiding?
        Can you write code to show the rest of my friends?
      courseA_toMakeLoopsVideo_Collector_instruction: |-
        Loops let you do whatever
        is inside over and over again!
      courseA_video_events_instruction: Need a better playlab/events combo
      courseA_video_events_2018_instruction: Need a better playlab/events combo
      courseB_Scrat_ramp1_2018_instruction: |-
        For this puzzle, snap the blocks together
        and click "Run"!
      courseB_Scrat_ramp2_2018_instruction: |-
        Snap all blocks together to finish your
        code, then click "Run".
      courseB_Scrat_ramp3a_2018_instruction: |-
        Add a `North` block to the bottom of
        the other blocks to finish this code, then click "Run".
      courseB_Scrat_ramp4a_2018_instruction: |-
        Can you figure out which block you
        need to add to the bottom of the other blocks to finish this code?
      courseB_Scrat_ramp5a_2018_instruction: Get the bird to the pig!
      courseB_artist_loops1_instruction: |-
        This is a new type of puzzle called "Artist".
        Play with the level and draw something fun.
      courseB_artist_loops10_instruction: |-
        Use what you have learned to draw a picture
        of what you think the artist saw when he got home.
      courseB_artist_loops10_2018_instruction: |-
        Use what you have learned to draw
        a picture of what you think the artist saw when he got home.
      courseB_artist_loops1_2018_instruction: |-
        This is a new type of puzzle called
        "Artist". Play with the level and draw something fun.
      courseB_artist_loops2_instruction: |-
        The Artist is trying to draw a line **6**
        times, but can't get it right.  Can you help?
      courseB_artist_loops2_2018_instruction: |-
        The Artist is trying to draw a line
        **6** times, but can't get it right.  Can you help?
      courseB_artist_loops3_instruction: |-
        Help the artist draw a line 7 times to
        make a garden wall.
      courseB_artist_loops3_2018_instruction: |-
        Help the artist draw a line 7 times
        to make a garden wall.
      courseB_artist_loops4_instruction: "Now we need to get the soil ready to plant.\nFind
        the bugs in the code and help the artist prepare the ground. "
      courseB_artist_loops4_2018_instruction: |
        Now we need to get the soil ready
        to plant. Find the bugs in the code and help the artist prepare the ground.
      courseB_artist_loops5_instruction: |-
        Time to fix the stairs!  Repeat this pattern
        **5** times so the artist can reach the top of the bushes.
      courseB_artist_loops5_2018_instruction: |-
        Time to fix the stairs!  Repeat this
        pattern **5** times so the artist can reach the top of the bushes.
      courseB_artist_loops6_instruction: Climb the vine and see where it goes?
      courseB_artist_loops6_2018_instruction: Climb the vine and see where it goes?
      courseB_artist_loops7_instruction: |-
        **Challenge:**  It's a hidden garden!
        Let's walk around.
      courseB_artist_loops7_2018_instruction: |-
        **Challenge:**  It's a hidden garden!
        Let's walk around.
      courseB_artist_loops8_instruction: |-
        Time to head home. Can you fix this ladder
        using only one block to help the artist get down?
      courseB_artist_loops8_2018_instruction: |-
        Time to head home. Can you fix this
        ladder using only one block to help the artist get down?
      courseB_artist_loops9_instruction: |-
        Let's take the short way home, over the
        pond. Can you help the artist stay on the stones?
      courseB_artist_loops9_2018_instruction: |-
        Let's take the short way home, over
        the pond. Can you help the artist stay on the stones?
      courseB_artist_loops_challenge1_instruction: |-
        "It's time to toss the dice!
        Can you help me draw these?"
      courseB_artist_loops_challenge1_2018_instruction: |-
        "It's time to toss the
        dice! Can you help me draw these?"
      courseB_artist_loops_challenge2_instruction: |-
        Draw as many X's as you can.
        Can you get 3 in a row?
      courseB_artist_loops_challenge2_2018_instruction: |-
        Draw as many X's as you
        can. Can you get 3 in a row?
      courseB_collector_loops1_instruction: |-
        This is Laurel the Adventurer!  Can
        you move her around and get treasure?
      courseB_collector_loops10_instruction: |-
        Help Laurel get all of the treasure
        from this cave.
      courseB_collector_loops10_2018_instruction: |-
        Help Laurel get all of the treasure
        from this cave.
      courseB_collector_loops11_instruction: |-
        Eureka!  Get as much treasure as you
        can!
      courseB_collector_loops11_2018_instruction: |-
        Eureka!  Get as much treasure
        as you can!
      courseB_collector_loops1_2018_instruction: |-
        This is Laurel the Adventurer!  Can
        you move her around and get treasure?
      courseB_collector_loops2_instruction: |-
        Collect all four piles to pass this
        level.
      courseB_collector_loops2_2018_instruction: |-
        Get all four piles to pass this
        level.
      courseB_collector_loops3_instruction: |-
        How can Laurel get all five piles of
        treasure using only one `E -->` block?
      courseB_collector_loops3_2018_instruction: |-
        How can Laurel get all five piles
        of treasure using only one `E -->` block?
      courseB_collector_loops3_predict1_instruction: |-
        How can Laurel collect all
        five piles of gold using only one `E -->` block?
      courseB_collector_loops4_instruction: |-
        Fix Laurel's path to get all of this
        treasure!
      courseB_collector_loops4_2018_instruction: |-
        Fix Laurel's path to get all of
        this treasure!
      courseB_collector_loops5_instruction: "Add to the code from the last puzzle\nto
        get all of the treasure. "
      courseB_collector_loops5_2018_instruction: "Add to the code from the last puzzle\nto
        get all of the treasure. "
      courseB_collector_loops6_instruction: |-
        Figure out the code to help Laurel get
        all of the treasure!
      courseB_collector_loops6_2018_instruction: |-
        Figure out the code to help Laurel
        get all of the treasure!
      courseB_collector_loops7_instruction: Write the code to get all of this gold.
      courseB_collector_loops7_2018_instruction: |-
        Write the code to get all of this
        treasure.
      courseB_collector_loops8_instruction: |-
        **Challenge: ** The treasure goes all
        the way down these stairs!  Write the code to help Laurel get it all.
      courseB_collector_loops8_2018_instruction: |-
        **Challenge: ** The treasure goes
        all the way down these stairs!  Write the code to help Laurel get it all.
      courseB_collector_loops9_instruction: |-
        *"Help me get the treasure from this
        deep valley."*
      courseB_collector_loops9_2018_instruction: |-
        *"Help me get the treasure from
        this deep valley."*
      courseB_collector_loops_challenge1_instruction: "This time you have limited\nblocks.
        Get all of the treasure! "
      courseB_collector_loops_challenge1_2018_instruction: "This time you have limited\nblocks.
        Get all of the treasure! "
      courseB_collector_loops_challenge2_instruction: |-
        Let's get the treasure! Help
        me across each row then come back to start the next row. Can you find a pattern?
      courseB_collector_loops_challenge2a_instruction: |-
        Help Laurel get at least
        **5** pieces of treasure to finish this puzzle.
      courseB_collector_loops_challenge2a_2018_instruction: |-
        Help Laurel get at least
        **5** pieces of treasure to finish this puzzle.
      courseB_collector_loops_challenge`_instruction: "This time you can only use\none
        of each arrow block. Get all of the treasure! "
      courseB_collector_prog1_instruction: |-
        This is Laurel the Adventurer!  Can you
        move her around and get gold?
      courseB_collector_prog2_instruction: Four piles of gold!  Collect all four.
      courseB_collector_prog3_instruction: |-
        How can Laurel collect all five piles
        of gold using only one `E -->` block?
      courseB_iceage_loops1_instruction: |-
        Help Scrat across the ice to get to the
        acorn!
      courseB_iceage_loops10_instruction: |-
        Help Scrat get all the way over to the
        acorn!
      courseB_iceage_loops11_instruction: Help Scrat get to the acorn!
      courseB_iceage_loops12_instruction: Get to the acorn any way you can!
      courseB_iceage_loops2_instruction: |-
        Use two different move blocks to get to
        the acorn!
      courseB_iceage_loops3_instruction: |-
        Can you get to the acorn with just one
        `W` block?
      courseB_iceage_loops4_instruction: |-
        Add one more block to get Scrat all the
        way to the acorn!
      courseB_iceage_loops5_instruction: |-
        Can you add one more loop to get to the
        acorn?
      courseB_iceage_loops6_instruction: Can you add a loop to get to the acorn?
      courseB_iceage_loops7_instruction: 'Scrat really wants that acorn! '
      courseB_iceage_loops8_instruction: 'Can you fix this code? '
      courseB_iceage_loops9_instruction: |-
        The acorn is so far away! Can you use loops
        to help Scrat get there?
      courseB_maze_seq1_instruction: |-
        Play with these blocks to see what they make
        the bird do! \r
        \r
        Get the bird to the pig to complete the level.
      courseB_maze_seq10_instruction: Fix the bugs to get the bird to the pig.
      courseB_maze_seq10_2018_instruction: Fix the bugs to get the bird to the pig.
      courseB_maze_seq11_instruction: It's all you!  Get the bird to the pig.
      courseB_maze_seq11_2018_instruction: It's all you!  Get the bird to the pig.
      courseB_maze_seq12_instruction: Now get that pig any way you can!
      courseB_maze_seq12_2018_instruction: Now get that pig any way you can!
      courseB_maze_seq1_2018_instruction: |-
        Play with these blocks to see what they
        make Scrat do! \r
        \r
        Get Scrat to the acorn to complete the level.
      courseB_maze_seq2_instruction: '*"A bug! Fix the code to get me to the pig."*'
      courseB_maze_seq2_2018_instruction: |-
        A bug! Fix the code to get Scrat to the
        acorn!
      courseB_maze_seq4_instruction: Add 2 blocks to get the bird to the pig.
      courseB_maze_seq4_2018_instruction: |-
        Use **2** movement blocks to get the Scrat
        to the acorn.
      courseB_maze_seq5_instruction: Now try this puzzle from the start!
      courseB_maze_seq5_2018_instruction: Now try this puzzle from the start!
      courseB_maze_seq6_instruction: |-
        Move one way, then another to get the bird
        to the pig!
      courseB_maze_seq6_2018_instruction: |-
        Move one way, then another to get Scrat
        to the acorn!
      courseB_maze_seq7_instruction: |-
        Figure out what is missing and then add blocks
        to get the bird to the pig!
      courseB_maze_seq7_2018_instruction: |-
        Figure out what is missing and then add
        blocks to get Scrat to the acorn!
      courseB_maze_seq8_instruction: |-
        Your turn!  What do you need to do to get the
        bird to the pig?
      courseB_maze_seq8_2018_instruction: |-
        Your turn!  What do you need to do to
        get Scrat to the acorn?
      courseB_maze_seq9_instruction: |-
        Challenge: Move around the TNT to get the bird
        to the pig.
      courseB_maze_seq9_2018_instruction: |-
        Challenge: Move around the broken ice
        to get Scrat to the acorn.
      courseB_maze_seq9_challenge1_instruction: "*Where's that pig hiding now?*"
      courseB_maze_seqCold_instruction: |-
        Challenge: Debug this level by adding blocks
        to get the bird to the pig!
      courseB_maze_seqOld_instruction: "Go around the TNT to get the bird to the\npig! "
      courseB_maze_seq_challenge1_instruction: |-
        Can you find a path before you run
        out of blocks?
      courseB_maze_seq_challenge1_2018_instruction: |-
        Can you find a path before you
        run out of blocks?
      courseB_maze_seq_challenge2_instruction: |-
        Debug this level. These are the right
        blocks, but they're in the wrong order!
      courseB_maze_seq_challenge2_2018_instruction: |-
        Debug this level. These are
        the right blocks, but they're in the wrong order!
      courseB_playLab_events1_instruction: |-
        See if you can figure out what each block
        does.
      courseB_playLab_events1_2018_instruction: |-
        See if you can figure out what each
        block does.
      courseB_playlab_events2_instruction: |-
        Have Daisy the Dragon say something when
        you click "Run".
      courseB_playlab_events2_2018_instruction: |-
        Have Daisy the Dragon say something
        when you click "Run".
      courseB_playlab_events3_instruction: |-
        Use an event to make Daisy the Dragon
        switch to a random mood when you click on her.
      courseB_playlab_events3_2018_instruction: |-
        Use an event to make Daisy the Dragon
        switch to a random mood when you click on her.
      courseB_playlab_events4_instruction: |-
        Knight time!  Add an event so that the
        knight moves toward the dragon when the left arrow is clicked.
      courseB_playlab_events4_2018_instruction: |-
        Knight time!  Add an event so that
        the knight moves toward the dragon when the left arrow is clicked.
      courseB_playlab_events5_instruction: |-
        Now add an event so that the knight runs
        away from the dragon when you press the right arrow.
      courseB_playlab_events5_2018_instruction: |-
        Now add an event so that the knight
        runs away from the dragon when you press the right arrow.
      courseB_playlab_events6_instruction: |-
        Help your knight get all of the flags!\r
        \r
        To
        do this, you'll need to add events to help the knight move up, down, left,
        and right.
      courseB_playlab_events6_2018_instruction: |-
        Help your knight get all of the
        flags!\r
        \r
        To do this, you'll need to add events to help the knight move
        up, down, left, and right.
      courseB_playlab_events7_instruction: |-
        Make this game fun by setting the knight
        to vanish when he runs into the dragon on his way to get the flags!  Play
        a sound when they collide to make it feel more real.
      courseB_playlab_events7_2018_instruction: |-
        Make this game fun by setting the
        knight to vanish when he runs into the dragon on his way to get the flags!  Play
        a sound when they collide to make it feel more real.
      courseB_playlab_events8_instruction: |-
        Use your imagination. What can you do
        to make this game more fun?
      courseB_playlab_eventsFP_instruction: |-
        Use your imagination. What can you do
        to make this game more fun?
      courseB_playlab_eventsFP_2018_instruction: |-
        Use your imagination. What can
        you do to make this game more fun?
      courseB_playlab_eventsToolbox_instruction: |-
        Finish by playing a sound and making
        the knight vanish when he runs into the dragon!
      courseB_playlab_events_challenge1_instruction: "Make the animals move down\nwhen
        you press ▼. "
      courseB_playlab_events_challenge1_2018_instruction: "Make the animals move\ndown
        when you press ▼. "
      courseB_playlab_events_challenge2_instruction: |-
        Make the animals disappear
        when you click on them.
      courseB_playlab_events_challenge2_2018_instruction: |-
        Make the animals disappear
        when you click on them.
      courseB_playlab_events_challenge2_embed_instruction: |-
        Here is your finished
        game!
      courseB_playlab_events_challenge2_template_instruction: |-
        Let's make the animals
        disappear when you click on them! You can also add sounds and score points
        to create a fun game of Animal Tag!
      courseB_playlab_events_challenge2_template_2018_instruction: |-
        Let's make the
        animals disappear when you click on them! You can also add sounds and score
        points to create a fun game of Animal Tag!
      courseB_scrat_forVideo_instruction: Get the acorn!
      courseB_starWars_prog1_instruction: Help BB-8 get the scrap metal!
      courseB_starWars_prog10_instruction: Help BB-8 gather the glowing scrap metal
      courseB_starWars_prog10_2018_instruction: |-
        Help BB-8 gather the glowing scrap
        metal
      courseB_starWars_prog11_instruction: Help BB-8 gather the glowing scrap metal
      courseB_starWars_prog11_2018_instruction: |-
        Help BB-8 gather the glowing scrap
        metal
      courseB_starWars_prog1_2018_instruction: '"Go get the scrap metal, BB-8!"'
      courseB_starWars_prog2_instruction: |-
        Help BB-8 gather **all** of the glowing
        scrap metal
      courseB_starWars_prog2_2018_instruction: Get all the metal.
      courseB_starWars_prog3_instruction: |-
        Help BB-8 gather **all** of the glowing
        scrap metal
      courseB_starWars_prog3_2018_instruction: Get all the scrap metal
      courseB_starWars_prog4_instruction: Help BB-8 gather the glowing scrap metal
      courseB_starWars_prog4_2018_instruction: Get all the scrap metal
      courseB_starWars_prog5_instruction: Help BB-8 gather the glowing scrap metal
      courseB_starWars_prog5_2018_instruction: Get the scrap metal
      courseB_starWars_prog6_instruction: Help BB-8 gather the glowing scrap metal
      courseB_starWars_prog6_2018_instruction: Get all the scrap metal
      courseB_starWars_prog7_instruction: Help BB-8 gather the glowing scrap metal
      courseB_starWars_prog7_2018_instruction: Go get it!
      courseB_starWars_prog8_instruction: |-
        **Challenge:** Help BB-8 gather the glowing
        scrap metal
      courseB_starWars_prog8_2018_instruction: |-
        **Challenge:** Help BB-8 gather the
        glowing scrap metal
      courseB_starWars_prog9_instruction: Help BB-8 gather the glowing scrap metal
      courseB_starWars_prog9_2018_instruction: |-
        Help BB-8 gather the glowing scrap
        metal
      courseC_PlayLab_events1_instruction: |-
        Make Jorge the Dog (actor 1) say "Hi
        there."
      courseC_PlayLab_events1_2018_instruction: |-
        Make Jorge the Dog (actor 1) say
        "Hi there."
      courseC_PlayLab_events2_instruction: |-
        Can you make Jorge the Dog (actor 1)
        say something, then have Olive the Cat (actor 2) say something afterward?
      courseC_PlayLab_events2_2018_instruction: |-
        Can you make Jorge the Dog (actor
        1) say something, then have Olive the Cat (actor 2) say something afterward?
      courseC_PlayLab_events3_instruction: Poți scrie un program pentru a-l face pe
        Jorge (actor 1) să se mute spre Pisica Olive?
      courseC_PlayLab_events3_2018_instruction: |-
        Can you write a program to make
        Jorge (actor 1) move toward Olive the Cat?
      courseC_PlayLab_events4_instruction: |-
        Can you write a program that makes Jorge
        (actor 1) move to Olive the Cat, and have Olive say "Hi there." when Jorge
        reaches her?
      courseC_PlayLab_events4_2018_instruction: |-
        Can you write a program that makes
        Jorge (actor 1) move to Olive the Cat, and have Olive say "Hi there." when
        Jorge reaches her?
      courseC_PlayLab_events5_instruction: |-
        Can you write a program to make Octavia
        the Octopus say "What's new?" when she is clicked?
      courseC_PlayLab_events5_2018_instruction: |-
        Can you write a program to make
        Octavia the Octopus say "What's new?" when she is clicked?
      courseC_PlayLab_events6_instruction: |-
        Now, write a program to make Waddles
        the Penguin move around using the up / down / left / right keys to hit all
        of the targets!
      courseC_PlayLab_events6_2018_instruction: |-
        Now, write a program to make Waddles
        the Penguin move around using the up / down / left / right keys to hit all
        of the targets!
      courseC_PlayLab_events7_instruction: |-
        The `repeat forever` block allows you
        to run code over and over forever.  Use this block to move Chomp the Dino
        (actor 2) up and down by 400 pixels forever.
      courseC_PlayLab_events7_2018_instruction: |-
        The `repeat forever` block allows
        you to run code over and over forever.  Use this block to move Chomp the Dino
        (actor 2) up and down by 400 pixels forever.
      courseC_PlayLab_events8_instruction: |-
        Can you have Waddles (actor 1) play a
        "hit" sound and say "Ouch!" if he runs into Chomp? \r
        When you're done,
        play the game to make that happen.
      courseC_PlayLab_events8_2018_instruction: |-
        Can you have Waddles (actor 1) play
        a "hit" sound and say "Ouch!" if he runs into Chomp? \r
        When you're
        done, play the game to make that happen.
      courseC_PlayLab_events9_instruction: |-
        Can you add a block to score a point
        when Waddles the Penguin (actor1) runs into Octavia the Octopus (actor 3)?
        \r
        Play the game and move Waddles with the arrows until you score!
      courseC_PlayLab_events9_2018_instruction: |-
        Can you add a block to score a point
        when Waddles the Penguin (actor1) runs into Octavia the Octopus (actor 3)?
        \r
        Play the game and move Waddles with the arrows until you score!
      courseC_PlayLab_eventsA_instruction: |-
        Add blocks to the `when run` event to
        change the background scene and the speed of Waddles the Penguin.\r
        \r
        Play
        the game and move Waddles with the arrows until you score.
      courseC_PlayLab_eventsA_2018_instruction: |-
        Add blocks to the `when run` event
        to change the background scene and the speed of Waddles the Penguin.\r
        \r
        Play
        the game and move Waddles with the arrows until you score.
      courseC_PlayLab_eventsFP_instruction: |-
        Create your own story. When you're
        done, click "Finish" to share with friends. See story ideas in the hints.
      courseC_PlayLab_eventsFP_2018_instruction: |-
        Create your own story. When you're
        done, click "Finish" to share with friends. See story ideas in the hints.
      courseC_PlayLab_events_challenge1_instruction: |-
        Use a new block to make Waddles
        automatically move back to the start when he runs into the Dinosaur and when
        he scores a point. \r
        Play the game and move Waddles with the arrows until
        you score enough points.
      courseC_PlayLab_events_challenge1_2018_instruction: |-
        Use a new block to make
        Waddles automatically move back to the start when he runs into the Dinosaur
        and when he scores a point. \r
        Play the game and move Waddles with the arrows
        until you score enough points.
      courseC_PlayLab_events_challenge1_xy_blocks_instruction: |-
        Here is a new block
        that is somewhat complicated. Use it to move Waddles back to the start when
        he runs into the Dinosaur and when he scores a point. This will make your
        game more challenging and fun!\r
        \r
        Play the game and move Waddles with
        the arrows until you score enough points.
      courseC_artist_loop1_instruction: Let's add some pizazz!
      courseC_artist_loop1_2018_instruction: Let's add some pizazz!
      courseC_artist_loops1_instruction: "*\"Zombie.  Draw!\"*\\r\n\\r\nThe zombie\nwants
        to draw a line from where he is to the garden of sunflowers.  Can you\nhelp
        him?  \\r\n*(The garden is 250 pixels away)*  "
      courseC_artist_loops1a_instruction: "Get the artist to the center of the play\narea,
        then draw a bird using a sticker. "
      courseC_artist_loops1a_2018_instruction: "Get the artist to the center of the\nplay
        area, then draw a bird using a sticker. "
      courseC_artist_loops2_instruction: |-
        Now that the zombie knows his way, help
        him dig holes along the path to plant more flowers!
      courseC_artist_loops2a_instruction: |-
        Now, use a loop to spin your bird around
        12 times with a 30 degree turn.
      courseC_artist_loops2a_2018_instruction: |-
        Now, use a loop to spin your bird
        around 12 times with a 30 degree turn.
      courseC_artist_loops3_instruction: |-
        Excellent!  Now that the flowers have sprouted,
        help the zombie place a friend every 50 pixels to guard over them until they
        are grown.
      courseC_artist_loops3a_instruction: Now add a bat!
      courseC_artist_loops3a_2018_instruction: Now add a bat!
      courseC_artist_loops4_instruction: |-
        The zombie has found an empty farm!  Can
        you help him bring it to life by stamping animal stickers every 100 pixels
        around the border?
      courseC_artist_loops4a_instruction: Try jumping forward by 75 pixels.
      courseC_artist_loops4a_2018_instruction: Try jumping forward by 75 pixels.
      courseC_artist_loops5_instruction: |
        Great!  Now it's time to make a fence
        inside to keep the animals out.   \r
        \r
      courseC_artist_loops5a_instruction: Try new stickers!
      courseC_artist_loops5a_2018_instruction: Try new stickers!
      courseC_artist_loops5b_instruction: Try adding lines!
      courseC_artist_loops5b_2018_instruction: Try adding lines!
      courseC_artist_loops6_instruction: |
        What should the zombie put inside of the
        garden?  \r
        \r
        \r
      courseC_artist_loops6a_instruction: Add another sticker!
      courseC_artist_loops6a_2018_instruction: Add another sticker!
      courseC_artist_loops7a_instruction: Play with the loops and angles.
      courseC_artist_loops7a_2018_instruction: Play with the loops and angles.
      courseC_artist_loops8a_instruction: Now try something on your own!
      courseC_artist_loops8a_2018_instruction: Now try something on your own!
      courseC_artist_loopsPre1a_instruction: Time to spin that line around!
      courseC_artist_loopsPre1a_2018_instruction: Time to spin that line around!
      courseC_artist_loopsPrePre1a_instruction: "Get the artist to the center of\nthe
        play area, then draw a line. "
      courseC_artist_loopsPrePre1a_2018_instruction: "Get the artist to the center\nof
        the play area, then draw a line. "
      courseC_artist_loopsTemplate_instruction: |-
        Excellent!  Now that the flowers
        have sprouted, help the zombie place a friend every 50 pixels to guard over
        them until they are grown.
      courseC_artist_loopsTemplateA_instruction: "Get the artist to the center of\nthe
        play area, then draw a bird using a sticker. "
      courseC_artist_loopsTemplateA_2018_instruction: "Get the artist to the center\nof
        the play area, then draw a bird using a sticker. "
      courseC_artist_prog1_instruction: |-
        Play with the blocks in the toolbox to see
        what they do!
      courseC_artist_prog1_2018_instruction: |-
        Play with the blocks in the toolbox
        to see what they do!
      courseC_artist_prog2_instruction: |-
        Drag blocks onto the screen to have the
        artist draw over the grey lines in the picture. (Each line is 100 pixels long)
      courseC_artist_prog2_2018_instruction: |-
        Drag blocks onto the screen to have
        the artist draw over the grey lines in the picture. (Each line is 100 pixels
        long)
      courseC_artist_prog3_instruction: |-
        Each side of the inner square is 100 pixels
        and all of the angles are 90 degrees.
      courseC_artist_prog3_2018_instruction: |-
        Each side of the inner square is 100
        pixels and all of the angles are 90 degrees.
      courseC_artist_prog4_instruction: |-
        Finish Starla's rocket so she can chase
        her pet.
      courseC_artist_prog4_2018_instruction: |-
        Finish Starla's rocket so she can
        chase her pet.
      courseC_artist_prog5_instruction: 'Această casă are nevoie de un acoperiş! Desenează
        triunghiul.  Sugestie: toate trei laturile au aceeaşi lungime.'
      courseC_artist_prog5_2018_instruction: |-
        Finish this tag by drawing a rectangle
        around the outside.\r
        (The long sides are 200 pixels each and the short sides
        are each 100 pixels)
      courseC_artist_prog6_instruction: Draw this diamond with 200 pixel sides.
      courseC_artist_prog6_2018_instruction: Draw this diamond with 200 pixel sides.
      courseC_artist_prog7_instruction: |-
        **Challenge:** This tag is a special one!  Can
        you figure out how to draw the outline?
      courseC_artist_prog7_2018_instruction: |-
        **Challenge:** This tag is a special
        one!  Can you figure out how to draw the outline?
      courseC_artist_prog8_instruction: |-
        One more tag.  This is a triangle for Pi.\r
        (Each
        side is 150 pixels)
      courseC_artist_prog8_2018_instruction: |-
        One more tag.  This is a triangle for
        Pi.\r
        (Each side is 150 pixels)
      courseC_artist_prog_challenge1-doghouse_instruction: |-
        Let's build a dog house
        for Jorge!
      courseC_artist_prog_challenge1_instruction: 'Draw rooms for each of the animals.

'
      courseC_artist_prog_challenge1_2018_instruction: "Draw rooms for each of the\nanimals. "
      courseC_artist_prog_challenge2_instruction: |-
        *Help me paint the yellow lines
        on this road!*
      courseC_artist_prog_challenge2a_instruction: |-
        *"Help me paint the yellow lines
        on this road!"*
      courseC_artist_prog_challenge2a_2018_instruction: |-
        *"Help me paint the yellow
        lines on this road!"*
      courseC_collector_loops_challenge2_instruction: |-
        Get at least **5** pieces
        of treasure!
      courseC_collector_loops_challenge2_2018_instruction: |-
        Get at least **5** pieces
        of treasure!
      courseC_collector_prog1_instruction: |-
        Play around with the blocks to see if
        you can help Laurel collect some treasure.
      courseC_collector_prog1_2018_instruction: |-
        Play around with the blocks to see
        if you can help Laurel collect some treasure.
      courseC_collector_prog2_instruction: |-
        Move Laurel to the treasure, then use
        `collect` to pick it up.
      courseC_collector_prog2_2018_instruction: |-
        Move Laurel to the treasure, then
        use `collect` to pick it up.
      courseC_collector_prog3_instruction: |-
        Order these blocks to collect the treasure
        and solve the puzzle.
      courseC_collector_prog3_2018_instruction: |-
        Order these blocks to collect the
        treasure and solve the puzzle.
      courseC_collector_prog4_instruction: |-
        Put these blocks in order to collect
        all of the treasure and solve the puzzle.
      courseC_collector_prog4_2018_instruction: |-
        Put these blocks in order to collect
        all of the treasure and solve the puzzle.
      courseC_collector_prog5_instruction: |-
        These blocks are in the wrong order.
        Can you fix them?
      courseC_collector_prog5_2018_instruction: |-
        These blocks are in the wrong order.
        Can you fix them?
      courseC_collector_prog6_instruction: |-
        Reorder the blocks to collect all of
        the treasure.
      courseC_collector_prog6_2018_instruction: |-
        Reorder the blocks to collect all
        of the treasure.
      courseC_collector_prog7_instruction: |-
        Use blocks from the toolbox to collect
        all of the treasure.
      courseC_collector_prog7_2018_instruction: |-
        Use blocks from the toolbox to collect
        all of the treasure.
      courseC_collector_prog8_instruction: |-
        *"Keep up the good work! Help me collect
        all of the treasure."*
      courseC_collector_prog8_2018_instruction: |-
        *"Keep up the good work! Help me
        collect all of the treasure."*
      courseC_collector_prog9_instruction: '*"Let''s get all of the coins!"*'
      courseC_collector_prog9_2018_instruction: '*"Let''s get all of the treasure!"*'
      courseC_collector_progA_instruction: Help Laurel collect all of the treasure.
      courseC_collector_progB_instruction: |-
        Collect as many coins as you can to finish
        the stage!
      courseC_collector_prog_challenge1_instruction: |-
        Look carefully! Can you collect
        all **10** pieces of treasure?
      courseC_collector_prog_challenge1_2018_instruction: |-
        Look carefully! Can you
        collect all **10** pieces of treasure?
      courseC_collector_prog_challenge2_instruction: |-
        Collect at least **10** pieces
        of treasure to finish this challenge!
      courseC_collector_prog_challenge2_2018_instruction: |-
        Collect at least **10**
        pieces of treasure to finish this challenge!
      courseC_flappy_embed_events_instruction: |-
        Here's an example of a game that
        you're about to create yourself! Play through it one or two times to get
        an idea of what you are about to make.
      courseC_flappy_events1_instruction: |-
        Attach the `flap normal amount` block
        to the `when click` event, then press "Run".    Click or tap on the play
        space to move Flappy to the target.
      courseC_flappy_events10_instruction: 'Create your own Flappy game! '
      courseC_flappy_events10_2018_instruction: 'Create your own Flappy game! '
      courseC_flappy_events1_2018_instruction: |-
        Attach the `flap normal amount` block
        to the `when click` event, then press "Run".    Click or tap on the play
        space to move Flappy to the target.
      courseC_flappy_events2_instruction: |-
        Try adding a block that sets the level
        speed when the "Run" button is pressed.  Play the game and flap to the target
        to continue.
      courseC_flappy_events2_2018_instruction: |-
        Try adding a block that sets the
        level speed when the "Run" button is pressed.  Play the game and flap to
        the target to continue.
      courseC_flappy_events3_instruction: |-
        Attach the `end game` block to the `when
        hit the ground` event.   Play the game and crash the bird into the ground
        to continue.
      courseC_flappy_events3_2018_instruction: |-
        Attach the `end game` block to the
        `when hit the ground` event.   Play the game and crash the bird into the ground
        to continue.
      courseC_flappy_events4_instruction: |-
        Attach a block to the `when hit an obstacle`
        event so that the game ends when Flappy crashes into the first set of pipes.
      courseC_flappy_events4_2018_instruction: |-
        Attach a block to the `when hit an
        obstacle` event so that the game ends when Flappy crashes into the first set
        of pipes.
      courseC_flappy_events5_instruction: |-
        Add a block to the `when pass an obstacle`
        event, then press "Run" to score a point by flying Flappy through the first
        set of pipes.
      courseC_flappy_events5_2018_instruction: |-
        Add a block to the `when pass an
        obstacle` event, then press "Run" to score a point by flying Flappy through
        the first set of pipes.
      courseC_flappy_events6_instruction: |-
        See if you can still score a point after
        making Flappy flap either a smaller or larger amount each time you click.
      courseC_flappy_events6_2018_instruction: |-
        See if you can still score a point
        after making Flappy flap either a smaller or larger amount each time you click.
      courseC_flappy_events7_instruction: |-
        Next, try changing the scene by attaching
        a block to the `when run` event.
      courseC_flappy_events7_2018_instruction: |-
        Next, try changing the scene by attaching
        a block to the `when run` event.
      courseC_flappy_events8_instruction: |-
        Try setting a **random** scene when other
        events happen...for example, when passing an obstacle.
      courseC_flappy_events8_2018_instruction: |-
        Try setting a **random** scene when
        other events happen...for example, when passing an obstacle.
      courseC_flappy_events9_instruction: |-
        To mix things up, instead of ending the
        game when Flappy hits an obstacle, try setting the score back to 0.
      courseC_flappy_events9_2018_instruction: |-
        To mix things up, instead of ending
        the game when Flappy hits an obstacle, try setting the score back to 0.
      courseC_harvester_loops1_instruction: Use loops to pick all of the pumpkins.
      courseC_harvester_loops10_instruction: |-
        Collect all of the corn and all of
        the pumpkins.
      courseC_harvester_loops10_2018_instruction: |-
        Collect all of the corn and all
        of the pumpkins.
      courseC_harvester_loops11_instruction: |-
        Collect all of the corn and all of
        the pumpkins.
      courseC_harvester_loops11_2018_instruction: |-
        Collect all of the corn and all
        of the pumpkins.
      courseC_harvester_loops1_2018_instruction: Use loops to pick all of the pumpkins.
      courseC_harvester_loops2_instruction: |-
        Can you combine two different loops
        to move toward the pumpkins, then collect them all?
      courseC_harvester_loops2_2018_instruction: |-
        Can you combine two different loops
        to move toward the pumpkins, then collect them all?
      courseC_harvester_loops3_instruction: Collect all of the pumpkins.
      courseC_harvester_loops3_2018_instruction: Collect all of the pumpkins.
      courseC_harvester_loops4_instruction: |-
        Collect all of the corn and all of the
        pumpkins.
      courseC_harvester_loops4_2018_instruction: |-
        Collect all of the corn and all
        of the pumpkins.
      courseC_harvester_loops5_instruction: |-
        Collect all of the corn and all of the
        pumpkins.
      courseC_harvester_loops5_2018_instruction: |-
        Collect all of the corn and all
        of the pumpkins.
      courseC_harvester_loops6_instruction: |-
        Collect all of the corn and all of the
        pumpkins.
      courseC_harvester_loops6_2018_instruction: |-
        Collect all of the corn and all
        of the pumpkins.
      courseC_harvester_loops7_instruction: |-
        Collect all of the corn and all of the
        pumpkins.
      courseC_harvester_loops7_2018_instruction: |-
        Collect all of the corn and all
        of the pumpkins.
      courseC_harvester_loops8_instruction: |-
        **Challenge:** Collect all of the corn
        and all of the pumpkins.
      courseC_harvester_loops8_2018_instruction: |-
        **Challenge:** Collect all of the
        corn and all of the pumpkins.
      courseC_harvester_loops9_instruction: |-
        Collect all of the corn and all of the
        pumpkins.
      courseC_harvester_loops9_2018_instruction: |-
        Collect all of the corn and all
        of the pumpkins.
      courseC_harvester_loops_challenge1_instruction: Collect all of the corn.
      courseC_harvester_loops_challenge1a_instruction: Collect all of the corn.
      courseC_harvester_loops_challenge1a_2018_instruction: Collect all of the corn.
      courseC_harvester_loops_challenge2_instruction: |-
        Collect all of the lettuce.
        Avoid the trees and fields!
      courseC_harvester_loops_challenge2_2018_instruction: |-
        Collect all of the lettuce.
        Avoid the trees and fields!
      courseC_harvester_loops_forVid_instruction: |-
        Collect all of the corn, all of
        the lettuce, and all of the pumpkins.
      courseC_maze_debugging1_instruction: |-
        Fix the code to help get Scrat get to
        the acorn.
      courseC_maze_debugging10_instruction: |-
        Debug this level by rearranging and
        changing blocks to get me to the pig!
      courseC_maze_debugging1_2018_instruction: |-
        Fix the code to help get Scrat get
        to the acorn.
      courseC_maze_debugging2_instruction: |-
        Use your debugging skills to get Scrat
        to the acorn.
      courseC_maze_debugging2_2018_instruction: |-
        Use your debugging skills to get
        Scrat to the acorn.
      courseC_maze_debugging3_instruction: Remove blocks to get Skrat to the acorn!
      courseC_maze_debugging3_2018_instruction: |-
        Remove blocks to get Scrat to the
        acorn!
      courseC_maze_debugging4_instruction: |-
        Someone has their directions mixed up!
        Can you help?
      courseC_maze_debugging4_2018_instruction: |-
        Someone has their directions mixed
        up! Can you help?
      courseC_maze_debugging5_instruction: |-
        Debug this level by rearranging and changing
        blocks.
      courseC_maze_debugging5_2018_instruction: |-
        Debug this level by rearranging
        and changing blocks.
      courseC_maze_debugging6_instruction: |-
        Figure out what is wrong and get Scrat
        to the acorn.
      courseC_maze_debugging6_2018_instruction: |-
        Figure out what is wrong and get
        Scrat to the acorn.
      courseC_maze_debugging7_instruction: |-
        **Challenge:** Debug this level by rearranging,
        adding, and deleting blocks.
      courseC_maze_debugging7_2018_instruction: |-
        **Challenge:** Debug this level
        by rearranging, adding, and deleting blocks.
      courseC_maze_debugging8_instruction: |-
        Debug this level to get Scrat to the
        acorn.
      courseC_maze_debugging9_instruction: |-
        Debug this level to get Scrat to the
        acorn.
      courseC_maze_debugging9_2018_instruction: |-
        Debug this level to get Scrat to
        the acorn.
      courseC_maze_debugging_challenge1_instruction: |-
        Help Scrat decide which way
        to turn to get to the acorn.
      courseC_maze_debugging_challenge1_2018_instruction: |-
        Help Scrat decide which
        way to turn to get to the acorn.
      courseC_maze_debugging_challenge2_instruction: |-
        Help Scrat reach the acorn
        with only four `turn` commands.
      courseC_maze_debugging_challenge2_2018_instruction: |-
        Help Scrat reach the acorn
        with only four `turn` commands.
      courseC_maze_loops1_instruction: |-
        Can you get the bird to the pig using 5 of
        the same kind of blocks?
      courseC_maze_loops10_instruction: You are doing great! Keep it up!
      courseC_maze_loops11_instruction: |-
        You are almost there! This time, choose
        any path you like!
      courseC_maze_loops2_instruction: |-
        Can you get the bird to the pig by creating
        a loop that uses only one `move forward` block inside of a `repeat`?
      courseC_maze_loops3_instruction: Solve this puzzle by creating a loop!
      courseC_maze_loops4_instruction: |-
        In this puzzle, two `repeat` loops will help
        you get the bird to the pig with the fewest number of blocks!
      courseC_maze_loops5_instruction: '*"Get me to the pig as quickly as possible!"*'
      courseC_maze_loops6_instruction: |-
        Loops even work with more than one block
        inside!  Can you loop this sequence?
      courseC_maze_loops7_instruction: Use what you learned in other puzzles!
      courseC_maze_loops8_instruction: |-
        Challenge: Combine ideas from the last few
        puzzles to complete this level.
      courseC_maze_loops9_instruction: You are doing great! Keep it up!
      courseC_maze_loops_challenge1_instruction: "Now Scrat wants to try using loops\nto
        find his acorn! "
      courseC_maze_loops_challenge1a_instruction: "Now Scrat wants to try using loops\nto
        find his acorn! "
      courseC_maze_loops_challenge1a_2018_instruction: "Now Scrat wants to try using\nloops
        to find his acorn! "
      courseC_maze_loops_challenge2_instruction: |-
        Let's hunt for treasure - using
        loops! Help the collector by debugging this code. Get all of the treasure!
      courseC_maze_programming1_instruction: |-
        For this puzzle, drag all of the blocks
        together and click "Run" to watch it go!
      courseC_maze_programming1_2018_instruction: |-
        For this puzzle, drag all of the
        blocks together and click "Run" to watch it go!
      courseC_maze_programming2_instruction: |-
        Drag an extra `move forward` block
        out of the toolbox to finish your code.
      courseC_maze_programming2_2018_instruction: |-
        Drag an extra `move forward` block
        out of the toolbox to finish your code.
      courseC_maze_programming3_instruction: |-
        There is one extra block that is going
        to cause the bird to crash. Throw it away by dragging it back to the toolbox.
      courseC_maze_programming3_2018_instruction: |-
        There is one extra block that
        is going to cause the bird to crash. Throw it away by dragging it back to
        the toolbox.
      courseC_maze_programming4_instruction: Avoid TNT or feathers will fly!
      courseC_maze_programming4_2018_instruction: Avoid TNT or feathers will fly!
      courseC_maze_programming5_instruction: Avoid the TNT.
      courseC_maze_programming5_2018_instruction: Avoid the TNT.
      courseC_maze_programming6_instruction: |-
        "Keep calm and help me find the bad
        pig. Otherwise I might get angry!"
      courseC_maze_programming6_2018_instruction: |-
        "Keep calm and help me find the
        bad pig. Otherwise I might get angry!"
      courseC_maze_programming7_instruction: |-
        **Challenge:** This code has a lot
        of bugs. You'll need to remove some blocks and add others.
      courseC_maze_programming7_2018_instruction: |-
        **Challenge:** This code has a
        lot of bugs. You'll need to remove some blocks and add others.
      courseC_maze_programming8_instruction: |-
        *"Keep calm and help me find the bad
        pig."*
      courseC_maze_programming8_2018_instruction: |-
        *"Keep calm and help me find
        the bad pig."*
      courseC_maze_programming8_predict1_instruction: |-
        *"Keep calm and help me find
        the bad pig."*
      courseC_maze_programming8_predict1_2018_instruction: |-
        *"Keep calm and help
        me find the bad pig."*
      courseC_maze_programming9_instruction: |-
        *"Now, help me sneak up on the pig
        any way you want to!"*
      courseC_maze_programming9_2018_instruction: |-
        *"Now, help me sneak up on the
        pig any way you want to!"*
      courseC_maze_programming_challenge1_instruction: "The pig is hiding, and the\ngoal
        is to find it. "
      courseC_maze_programming_challenge1_2018_instruction: "The pig is hiding, and\nthe
        goal is to find it. "
      courseC_maze_programming_challenge2_instruction: |-
        Sometimes there is more than
        one way to solve the same problem. Sometimes it's faster to go backwards
        than it is to go forwards!
      courseC_maze_programming_challenge2_2018_instruction: |-
        Sometimes there is more
        than one way to solve the same problem. Sometimes it's faster to go backwards
        than it is to go forwards!
      courseC_playLab_embedded_instruction: |-
        Here's a game for you to play! To win,
        use your arrow keys to get the penguin to run into the octopus.\r
        \r
        Once
        you are done, you will learn how to make this game!
      courseC_puppy_loops10_instruction: You are doing great! Keep it up!
      courseC_puppy_loops11_instruction: |-
        You are almost there! This time, choose
        any path you like!
      courseC_puppy_loops8_instruction: |-
        Challenge: Combine ideas from the last few
        puzzles to complete this level.
      courseC_puppy_loops8courseC_maze_loops8_instruction: |-
        Challenge: Combine ideas
        from the last few puzzles to complete this level.
      courseC_puppy_loops9_instruction: You are doing great! Keep it up!
      courseC_starWars_loops1_instruction: |-
        BB-8 will pick up any metal scraps along
        the path where he moves. Use 5 of the same block to get BB-8 to pick up all
        of the scrap metal in the play area.
      courseC_starWars_loops10_instruction: You are doing great! Keep it up!
      courseC_starWars_loops10_2018_instruction: You are doing great! Keep it up!
      courseC_starWars_loops10_predict2_instruction: |-
        You are doing great! Keep it
        up!
      courseC_starWars_loops10_predict2_2018_instruction: |-
        You are doing great! Keep
        it up!
      courseC_starWars_loops11_instruction: |-
        You are almost there! This time, choose
        any path you like!
      courseC_starWars_loops11_2018_instruction: |-
        You are almost there! This time,
        choose any path you like!
      courseC_starWars_loops1_2018_instruction: |-
        BB-8 will pick up any metal scraps
        along the path where he moves. Use 5 of the same block to get BB-8 to pick
        up all of the scrap metal in the play area.
      courseC_starWars_loops1_predict1_instruction: |-
        BB-8 will pick up any metal
        scraps along the path where he moves. Use 5 of the same block to get BB-8
        to pick up all of the scrap metal in the play area.
      courseC_starWars_loops1_predict1_2018_instruction: |-
        BB-8 will pick up any metal
        scraps along the path where he moves. Use 5 of the same block to get BB-8
        to pick up all of the scrap metal in the play area.
      courseC_starWars_loops2_instruction: |-
        To get all the scrap metal, try creating
        a loop that uses only one block inside of a `repeat` block.
      courseC_starWars_loops2_2018_instruction: |-
        To get all the scrap metal, try
        creating a loop that uses only one block inside of a `repeat` block.
      courseC_starWars_loops4_instruction: |-
        In this puzzle, two `repeat` loops will
        help you get BB-8 to all of the scrap metal with the fewest number of blocks!
      courseC_starWars_loops4_2018_instruction: |-
        In this puzzle, two `repeat` loops
        will help you get BB-8 to all of the scrap metal with the fewest number of
        blocks!
      courseC_starWars_loops5_instruction: |-
        Get BB-8 to pick up all the scrap metal
        as quickly as possible!
      courseC_starWars_loops5_2018_instruction: |-
        Get BB-8 to pick up all the scrap
        metal as quickly as possible!
      courseC_starWars_loops6_instruction: |-
        Loops even work with more than one block
        inside!  Can you loop this sequence?
      courseC_starWars_loops6_2018_instruction: |-
        Loops even work with more than one
        block inside!  Can you loop this sequence?
      courseC_starWars_loops7_instruction: |-
        Can you try to get all the scrap metal
        using just one loop? Try programming it all out then finding the repeating
        code to put in a loop.
      courseC_starWars_loops7_2018_instruction: |-
        Can you try to get all the scrap
        metal using just one loop? Try programming it all out then finding the repeating
        code to put in a loop.
      courseC_starWars_loops9_instruction: |-
        Use what you have learned to pick up
        all of the scrap metal!
      courseC_starWars_loops9_2018_instruction: |-
        Use what you have learned to pick
        up all of the scrap metal!
      courseD_Frozen_nested1_instruction: "Draw a small shape, between **20 and 50**\npixels
        wide.  It can be any shape that you like.  "
      courseD_Frozen_nested2_instruction: |-
        Now take your shape and draw two or three
        in a row!
      courseD_Frozen_nested3_instruction: Let's spin that line of shapes around!
      courseD_Frozen_nested4_instruction: Time to layer those shapes!
      courseD_Frozen_nested5_instruction: Play with the snowflakes!
      courseD_Frozen_nested6_instruction: |-
        Draw a stair-step pattern that uses turns
        between 75 and 105 degrees.
      courseD_Frozen_nested7_instruction: |-
        Now, turn around 180 degrees and draw
        the stair pattern again!
      courseD_Frozen_nested8_instruction: |-
        Spin that shape around 5 or 6 times in
        a circle.
      courseD_Frozen_nested9_instruction: |-
        Try playing around with what you've created.
        Draw whatever you like!\r
        - What happens if you use two different angles
        in your stair step pattern?\r
        - What happens if you make your diamond pattern
        longer or shorter?\r
        - What does it look like to draw two snowflakes on top
        of one another?
      courseD_artist_1_2018_instruction: |
        Draw a small square with **30** pixel long
        sides.  \r
      courseD_artist_2_2018_instruction: |
        Now, turn right by **60** degrees, then
        draw a straight line **150** pixels long and jump back to the center of the
        play area.\r
      courseD_artist_3_2018_instruction: "Nest all of the code inside of another\n`repeat`
        loop and run it a total of **6** times. "
      courseD_artist_4_2018_instruction: Add a tiny shape to the end of your line!
      courseD_artist_5_2018_instruction: Play with the snowflakes!
      courseD_artist_6_2018_instruction: |
        Try changing your long 150 pixel line into
        6 short lines of **25** pixels, with little turns at the end.\r
      courseD_artist_7_2018_instruction: |-
        Now, turn around 180 degrees and draw the
        stair pattern again!
      courseD_artist_8_2018_instruction: |-
        Spin that shape around 5 or 6 times in
        a circle.
      courseD_artist_9_2018_instruction: |-
        Try playing around with what you've created.
        Draw whatever you like!\r
        - What happens if you use two different angles
        in your stair step pattern?\r
        - What happens if you make your diamond pattern
        longer or shorter?\r
        - What does it look like to draw two snowflakes on top
        of one another?
      courseD_artist_binary1_instruction: |-
        Use the blocks below to have the artist
        draw "01010101" in binary in the first row.
      courseD_artist_binary1_2018_instruction: Codul binar este un mod de a reprezenta
        informatia utilizand numai doua optiuni. Aici, vom folosi optiunile "off"(reprezentat
        de numarul zero) si "on" (reprezentat de numarul 1). \r\r V-am pus la dispozitie
        o grila de pixeli prin care va puteti plimba si face design-uri intorcand
        doar anumite patrate. Il poti face pe artist sa deseneze "01010101"in cod
        binar in primul rand?
      courseD_artist_binary2_instruction: |-
        Run this code to see how the artist uses
        binary to draw this pattern.
      courseD_artist_binary2_2018_instruction: |-
        Run this code to see how the artist
        uses binary to draw this pattern.
      courseD_artist_binary3_instruction: |-
        Which of the binary strings below could
        you loop 8 times to draw this image?
      courseD_artist_binary3_2018_instruction: |-
        Which of the binary strings below
        could you loop 8 times to draw this image?
      courseD_artist_binary4_instruction: |-
        Can you draw this pattern by looping just
        three binary digits (0s and 1s)?
      courseD_artist_binary4_2018_instruction: Poţi desena acest model prin rularea
        în buclă a unui şir binar de trei digiți?
      courseD_artist_binary5_instruction: |-
        Each binary string below represents one
        row of this picture. \r
        \r
        Can you rearrange them so it draws a smiley face
        instead of a frown?
      courseD_artist_binary5_2018_instruction: |-
        Each binary string below represents
        one row of this picture. \r
        \r
        Can you rearrange them so it draws a smiley
        face instead of a frown?
      courseD_artist_binary6_instruction: Care şir binar de 6 caractere, repetat de
        11 ori va desena această imagine?
      courseD_artist_binary6_2018_instruction: Care şir binar de 6 caractere, repetat
        de 11 ori va desena această imagine?
      courseD_artist_binary7_instruction: Care este cel mai scurt şir binar pe care
        tu poţi să-l rulezi repetat pentru a desena această imagine?
      courseD_artist_binary7_2018_instruction: |-
        What is the shortest binary string
        that you can repeat to draw this image?
      courseD_artist_binary8_instruction: Finish the code to create this drawing.
      courseD_artist_binary8_2018_instruction: Finish the code to create this drawing.
      courseD_artist_binary8_predict1_instruction: |-
        Finish the code to create this
        drawing.
      courseD_artist_binary8_predict1_2018_instruction: |-
        Finish the code to create
        this drawing.
      courseD_artist_binaryFP_instruction: |-
        Here's a higher resolution canvas to
        draw on - 16 pixels by 16 pixels!\r
        \r
        See what happens when we start to
        get creative with the bits!
      courseD_artist_binaryFP8_instruction: "**Free Play:**  Draw whatever you want\nin
        binary! "
      courseD_artist_binaryFP_2018_instruction: |-
        Here's a higher resolution canvas
        to draw on - 16 pixels by 16 pixels!\r
        \r
        See what happens when we start
        to get creative with the bits!
      courseD_artist_binary_challenge0_instruction: |-
        Try using nested loops to complete
        this drawing.
      courseD_artist_binary_challenge1_instruction: |-
        You can only use each binary
        value (0 or 1) once each in this puzzle. Try using nested loops to complete
        this drawing.
      courseD_artist_binary_challenge1_2018_instruction: |-
        You can only use each binary
        value (0 or 1) once each in this puzzle. Try using nested loops to complete
        this drawing.
      courseD_artist_binary_challenge2_instruction: |-
        Are you persistent enough to
        restore this logo back to normal?
      courseD_artist_binary_challenge2_2018_instruction: |-
        Are you persistent enough
        to restore this logo back to normal?
      courseD_artist_binary_challenge3_instruction: |-
        Are you persistent enough to
        restore this logo back to normal?
      courseD_artist_embed_frozen_instruction: Press Run to see a snowflake design!
      courseD_artist_embed_frozen2_instruction: Press Run to see a snowflake design.
      courseD_artist_functions10_instruction: |-
        This time, use lines of 8 hexagons
        with 25 pixel sides.
      courseD_artist_functions2_instruction: |
        This time, use the `draw a square`
        function to create the glasses. \r
      courseD_artist_functions3_instruction: |-
        You can make this drawing by adding
        a repeat block.
      courseD_artist_functions4_instruction: |-
        Now that you can draw a star, try drawing
        four stars!
      courseD_artist_functions5_instruction: |-
        Draw only those three stars to finish
        this puzzle.
      courseD_artist_functions6_instruction: |-
        Make this window by drawing a square,
        then turning 90 degrees before drawing another, and so on.
      courseD_artist_functions7_instruction: |-
        Try solving this puzzle by creating
        `draw a window` and calling it five times. Watch out for the door!
      courseD_artist_functions8_instruction: |-
        Challenge: Create as many functions
        as you think you need to make this drawing of 50 pixel squares.
      courseD_artist_functions9_instruction: |-
        Create this image using only the blocks
        provided.
      courseD_artist_nestedLoops1_instruction: |-
        Draw a triangle to kickstart this
        stage.  \r
        (Each side is 100 pixels long and you'll need to turn 120 degrees
        for each exterior angle.)
      courseD_artist_nestedLoops10_instruction: |-
        Take the squares from before, but
        this time only make 7 of them, and lay them out in a row.
      courseD_artist_nestedLoops10_2018_instruction: |-
        Take the squares from before,
        but this time only make 7 of them, and lay them out in a row.
      courseD_artist_nestedLoops1_2018_instruction: |-
        Draw a triangle to kickstart
        this stage.  \r
        (Each side is 100 pixels long and you'll need to turn 120
        degrees for each exterior angle.)
      courseD_artist_nestedLoops1a_instruction: |-
        Now loop the triangle 6 times. \r
        After
        each triangle, you'll need to turn 60 degrees before drawing the next.
      courseD_artist_nestedLoops1a_2018_instruction: 'Now loop the triangle 6 times.

'
      courseD_artist_nestedLoops2_instruction: |-
        This time, complete the puzzle with
        the fewest number of blocks possible.
      courseD_artist_nestedLoops2_2018_instruction: |-
        This time, complete the puzzle
        with the fewest number of blocks possible.
      courseD_artist_nestedLoops3_instruction: |-
        Use your new skills to quickly draw
        the last row of windows for this building.\r
        \r
        The windows are 20 pixel
        squares, each 20 pixels apart.
      courseD_artist_nestedLoops3_2018_instruction: |-
        Use your new skills to quickly
        draw the last row of windows for this building.\r
        \r
        The windows are 20
        pixel squares, each 20 pixels apart.
      courseD_artist_nestedLoops4_instruction: |-
        Great!  Do the same thing with these
        circles.
      courseD_artist_nestedLoops4_2018_instruction: |-
        Great!  Do the same thing with
        these circles.
      courseD_artist_nestedLoops5_instruction: |-
        What happens if you also turn 90
        degrees between circles?
      courseD_artist_nestedLoops5_2018_instruction: |-
        What happens if you also turn
        90 degrees between circles?
      courseD_artist_nestedLoops6_instruction: |-
        Edit blocks within your existing
        code to make this image.
      courseD_artist_nestedLoops7_instruction: |-
        Use what you've learned to make
        this drawing.
      courseD_artist_nestedLoops7_2018_instruction: |-
        Use what you've learned to
        make this drawing.
      courseD_artist_nestedLoops8_instruction: |-
        Using what you have learned in the
        last couple of puzzles, build this image from the beginning.
      courseD_artist_nestedLoops8_2018_instruction: |-
        Using what you have learned
        in the last couple of puzzles, build this image from the beginning.
      courseD_artist_nestedLoops9_instruction: |-
        **Challenge:** Can you figure out
        how to make a picture like this?
      courseD_artist_nestedLoops9_2018_instruction: |-
        **Challenge:** Can you figure
        out how to make a picture like this?
      courseD_artist_nestedLoops9_predict1_instruction: |-
        **Challenge:** Can you figure
        out how to make a picture like this?
      courseD_artist_nestedLoops9_predict1_2018_instruction: |-
        **Challenge:** Can
        you figure out how to make a picture like this?
      courseD_artist_nestedLoopsFP_instruction: |-
        Now it's your turn.  Take the skills
        you have learned and make something that you love!
      courseD_artist_nestedLoopsFP_2018_instruction: |-
        Now it's your turn.  Take
        the skills you have learned and make something that you love!
      courseD_artist_nestedLoopsPre1_instruction: |-
        Create a triangle to kickstart
        this stage.
      courseD_artist_nestedLoops_challenge1_instruction: |-
        Can you figure out how
        to make a picture like this?
      courseD_artist_nestedLoops_challenge1_2018_instruction: |-
        Can you figure out
        how to make a picture like this?
      courseD_artist_nestedLoops_challenge2_instruction: |-
        Fix the code to make this
        picture!
      courseD_artist_nestedLoops_challenge2_2018_instruction: |-
        Fix the code to make
        this picture!
      courseD_artist_project1_instruction: "Draw a small shape, between **20 and\n50**
        pixels wide.  It can be any shape that you like.  "
      courseD_artist_project1_2018_instruction: "Draw a small shape, between **20\nand
        50** pixels wide.  It can be any shape that you like.  "
      courseD_artist_project1a_instruction: |-
        Draw a stair-step pattern that uses
        turns between 75 and 105 degrees.
      courseD_artist_project1a_2018_instruction: |-
        Draw a stair-step pattern that
        uses turns between 75 and 105 degrees.
      courseD_artist_project2_instruction: |-
        Now take your shape and draw two or three
        in a row!
      courseD_artist_project2_2018_instruction: |-
        Now take your shape and draw two
        or three in a row!
      courseD_artist_project2a_instruction: |-
        Now, turn around 180 degrees and draw
        the stair pattern again!
      courseD_artist_project2a_2018_instruction: |-
        Now, turn around 180 degrees and
        draw the stair pattern again!
      courseD_artist_project3_instruction: Let's spin that line of shapes around!
      courseD_artist_project3_2018_instruction: |-
        Let's spin that line of shapes
        around!
      courseD_artist_project3a_instruction: |-
        Spin that shape around 5 or 6 times
        in a circle.
      courseD_artist_project3a_2018_instruction: |-
        Spin that shape around 5 or 6 times
        in a circle.
      courseD_artist_project4_instruction: Time to layer those shapes!
      courseD_artist_project4_2018_instruction: Time to layer those shapes!
      courseD_artist_project4a_instruction: |-
        Try playing around with what you've
        created. Draw whatever you like!\r
        - What happens if you use two different
        angles in your stair step pattern?\r
        - What happens if you make your diamond
        pattern longer or shorter?\r
        - What does it look like to draw two snowflakes
        on top of one another?
      courseD_artist_project4a_2018_instruction: |-
        Try playing around with what you've
        created. Draw whatever you like!\r
        - What happens if you use two different
        angles in your stair step pattern?\r
        - What happens if you make your diamond
        pattern longer or shorter?\r
        - What does it look like to draw two snowflakes
        on top of one another?
      courseD_artist_project5_instruction: Play with the snowflakes!
      courseD_artist_project5_2018_instruction: Play with the snowflakes!
      courseD_artist_project_embedded_instruction: |-
        Here's what you will soon be
        making!
      courseD_artist_ramp11_instruction: Now make a square using Artist!
      courseD_artist_ramp12_instruction: |-
        Use what you've learned to draw this triangle
        inside of a square.
      courseD_bee_conditionals1_instruction: |-
        Check to see if there's a flower under
        the cloud. If there's a flower, get nectar.
      courseD_bee_conditionals10_instruction: |-
        Collect all of the nectar and make
        all of the honey.
      courseD_bee_conditionals10_2018_instruction: |-
        Collect all of the nectar and
        make all of the honey.
      courseD_bee_conditionals1_predict1_instruction: |-
        Check to see if there's a
        flower under the cloud. If there's a flower, get nectar.
      courseD_bee_conditionals1_predict1_2018_instruction: |-
        Check to see if there's
        a flower under the cloud. If there's a flower, get nectar.
      courseD_bee_conditionals2_instruction: "Check underneath every cloud to see\nif
        it is hiding a flower before you get nectar.  "
      courseD_bee_conditionals2_2018_instruction: "Check underneath every cloud to\nsee
        if it is hiding a flower before you get nectar.  "
      courseD_bee_conditionals2_test_instruction: "Check underneath every cloud to\nsee
        if it is hiding a flower before you get nectar.  "
      courseD_bee_conditionals3_instruction: |-
        Help the bee collect all of the nectar.
        \r
        \r
        You can only collect nectar from flowers, but you can check any space
        to see if there is a flower.
      courseD_bee_conditionals3_2018_instruction: |-
        Help the bee collect all of the
        nectar. \r
        \r
        You can only collect nectar from flowers, but you can check
        any space to see if there is a flower.
      courseD_bee_conditionals4_instruction: |-
        Get all of the nectar using as few
        blocks as possible.
      courseD_bee_conditionals4_2018_instruction: |-
        Get all of the nectar using as
        few blocks as possible.
      courseD_bee_conditionals5_instruction: |-
        Collect all of the nectar using as
        few blocks as possible
      courseD_bee_conditionals5_2018_instruction: |-
        Collect all of the nectar using
        as few blocks as possible
      courseD_bee_conditionals6_instruction: |-
        Some of these clouds might have honeycombs
        under them.  Be sure to check if a honeycomb is hiding behind each cloud!
      courseD_bee_conditionals6_2018_instruction: |-
        Some of these clouds might have
        honeycombs under them.  Be sure to check if a honeycomb is hiding behind each
        cloud!
      courseD_bee_conditionals7_instruction: |-
        Use the `if/else` block to collect
        nectar at flowers and make honey at honeycomb.
      courseD_bee_conditionals7_2018_instruction: |-
        Use the `if/else` block to collect
        nectar at flowers and make honey at honeycomb.
      courseD_bee_conditionals7_predict2_instruction: |-
        Use the `if/else` block to
        collect nectar at flowers and make honey at honeycomb.
      courseD_bee_conditionals7_predict2_2018_instruction: |-
        Use the `if/else` block
        to collect nectar at flowers and make honey at honeycomb.
      courseD_bee_conditionals8_instruction: |-
        Collect nectar if there is a flower.\r
        Otherwise,
        make honey (because there is a honeycomb).
      courseD_bee_conditionals8_2018_instruction: |-
        Collect nectar if there is a flower.\r
        Otherwise,
        make honey (because there is a honeycomb).
      courseD_bee_conditionals9_instruction: |-
        Collect all of the nectar or make all
        the honey.
      courseD_bee_conditionals9_2018_instruction: |-
        Collect all of the nectar or make
        all the honey.
      courseD_bee_conditionals_challenge1_instruction: |-
        Collect all the nectar and
        make all the honey.
      courseD_bee_conditionals_challenge1_2018_instruction: |-
        Collect all the nectar
        and make all the honey.
      courseD_bee_conditionals_challenge2_instruction: |-
        Collect all of the nectar
        and make all the honey.
      courseD_bee_conditionals_challenge2_2018_instruction: |-
        Collect all of the nectar
        and make all the honey.
      courseD_bee_conditionals_challenge3_instruction: |-
        Collect all of the nectar
        or make all the honey.
      courseD_bee_debugging1_instruction: |-
        Fix the error(s) to collect all of the
        nectar.
      courseD_bee_debugging2_instruction: |-
        Fix the error(s) to collect all of the
        nectar.
      courseD_bee_debugging3_instruction: |-
        Fix the error(s) to collect all of the
        nectar and make all of the honey.
      courseD_bee_debugging4_instruction: Fix the error(s) to make all of the honey.
      courseD_bee_debugging5_instruction: |-
        Challenge: All of the commands that you
        need are already here...now use your debugging skills to figure out how to
        solve this puzzle.
      courseD_bee_debugging6_instruction: |-
        Challenge:  Fix the errors to collect
        all of the nectar and make all of the honey.
      courseD_bee_debugging9_instruction: |-
        Help the bee fix the code to get all the
        nectar.
      courseD_bee_debugging_challenge1_instruction: |-
        Watch how the bees gets the
        nectar. Can you use the same kind of pattern to help the bee make all of the
        honey?
      courseD_bee_debugging_challenge1_2018_instruction: |-
        Watch how the bees gets
        the nectar. Can you use the same kind of pattern to help the bee make all
        of the honey?
      courseD_bee_debugging_challenge1a_instruction: |-
        Watch how the bee gets the
        nectar. Use the same pattern to help the bee make all the honey.
      courseD_bee_debugging_challenge2_instruction: |-
        Watch how the bees gets the
        nectar. Can you use the same kind of pattern to help the bee make all of honey?
      courseD_bee_nestedLoops1_instruction: Help the bee collect all of the nectar.
      courseD_bee_nestedLoops1_2018_instruction: |-
        Help the bee collect all of the
        nectar.
      courseD_bee_nestedLoops1a_instruction: Help the bee collect all of the nectar.
      courseD_bee_nestedLoops1a_2018_instruction: |-
        Help the bee collect all of the
        nectar.
      courseD_bee_nestedLoops2_instruction: |-
        This time, help the bee collect all
        of the nectar using as few blocks as possible.
      courseD_bee_nestedLoops2_2018_instruction: |-
        This time, help the bee collect
        all of the nectar using as few blocks as possible.
      courseD_bee_nestedLoops2_predict1_instruction: |-
        This time, help the bee collect
        all of the nectar using as few blocks as possible.
      courseD_bee_nestedLoops2_predict1_2018_instruction: |-
        This time, help the bee
        collect all of the nectar using as few blocks as possible.
      courseD_bee_nestedLoops3_instruction: |-
        Collect all of the nectar from each
        flower.
      courseD_bee_nestedLoops5_instruction: "Collect all of the nectar from each\nflower
        and make honey at the honeycomb. "
      courseD_bee_nestedLoops6_instruction: Make all of the nectar.
      courseD_bee_nestedLoops6_2018_instruction: |-
        Get the zombie to the sunflower
        using only the blocks available.
      courseD_bee_nestedLoops7_instruction: |-
        Challenge: Figure out how to get all
        of the nectar using only the blocks available.
      courseD_bee_nestedLoops7_2018_instruction: |-
        Challenge: Figure out how to get
        all of the nectar using only the blocks available.
      courseD_bee_nestedLoops8_instruction: "Collect all of the nectar from each\nflower
        and make honey at the honeycomb. "
      courseD_bee_nestedLoops8_2018_instruction: "Collect all of the nectar from\neach
        flower and make honey at the honeycomb. "
      courseD_bee_nestedLoops9_instruction: Make all of the honey.
      courseD_bee_nestedLoops9_2018_instruction: Make all of the honey.
      courseD_bee_nestedLoops9_predict2_instruction: Make all of the honey.
      courseD_bee_nestedLoops9_predict2_2018_instruction: Make all of the honey.
      courseD_bee_nested_loops_challenge1_instruction: |-
        Let's hunt for treasure
        - using loops! Help the collector reach at least two piles of treasure using
        only the blocks in your toolbox.
      courseD_bee_nested_loops_challenge2_instruction: |-
        Let's hunt for treasure
        - using loops! Help the collector reach at least two piles of treasure using
        only the blocks in your toolbox.
      courseD_bounce_embed_endgame_instruction: |-
        Use the left and right arrows to
        move the paddle. See how many points you can get before your opponent scores
        twice!
      courseD_bounce_embedded_instruction: Write Instructions Here
      courseD_bounce_events1_instruction: |-
        Attach a block to the "when left arrow"
        block and press "Run" to move the player to the flag.
      courseD_bounce_events10_instruction: |-
        There is now a goal at the top. Attach
        the "score point" and "score opponent point" blocks to the "when ball
        in goal" and "when ball misses paddle" blocks to make a game. See how many
        points you can score before your opponent scores twice.
      courseD_bounce_events10s_instruction: "Attach the `score point` block to the\n`when
        ball in goal` event and the `score opponent point` block to the `when\nball
        misses hand` event to make a game. "
      courseD_bounce_events10s_2018_instruction: "Attach the `score point` block\nto
        the `when ball in goal` event and the `score opponent point` block to the\n`when
        ball misses hand` event to make a game. "
      courseD_bounce_events11_instruction: |-
        You can now attach blocks to the "when
        run" block. You have to attach the new "launch new ball" block in more
        than one place. Also, try changing the scene or the speed of the paddle and
        the ball and see how many points you can score before your opponent scores
        twice.
      courseD_bounce_events11s_instruction: "Attach the `throw new ball` block in\nall
        of the places where the game needs a new ball. "
      courseD_bounce_events11s_2018_instruction: "Attach the `throw new ball` block\nin
        all of the places where the game needs a new ball. "
      courseD_bounce_events12_instruction: |-
        Create your own Bounce game. You can
        change all the visuals and the rules. When you're done, click Finish to let
        friends try your game on their phones.
      courseD_bounce_events12s_instruction: |-
        Make this game your own. You can change
        all the visuals and the rules. When you're done, click "Finish" to let
        friends try your game on their phones.
      courseD_bounce_events12s_2018_instruction: |-
        Make this game your own. You can
        change all the visuals and the rules. When you're done, click "Finish"
        to let friends try your game on their phones.
      courseD_bounce_events1s_instruction: |-
        Attach a block to the "when left arrow"
        block and press "Run" to move the player to the net.
      courseD_bounce_events1s_2018_instruction: |-
        Attach a block to the "when left
        arrow" block and press "Run" to move the player to the net.
      courseD_bounce_events2_instruction: |-
        Attach a block to the "when right arrow"
        and "when left arrow" blocks. Move the paddle to reach both finish targets.
      courseD_bounce_events2s_instruction: |-
        Now, attach a block to the `when right
        event` so that the hand can get to both baskets.
      courseD_bounce_events2s_2018_instruction: |-
        Now, attach a block to the `when
        right event` so that the hand can get to both baskets.
      courseD_bounce_events3_instruction: |-
        Now try something similar with the "when
        up arrow" block. Move the paddle to the finish target at the top.
      courseD_bounce_events3s_instruction: |-
        Now try something similar with the "when
        up arrow" block. Move the paddle to the finish target at the top.
      courseD_bounce_events4_instruction: |-
        This time you need to add four blocks.
        Move the paddle to all four finish targets to complete this puzzle.
      courseD_bounce_events4s_instruction: |-
        This time you need to add four blocks.
        Move the paddle to all four finish targets to complete this puzzle.
      courseD_bounce_events5_instruction: |-
        We're going to send a ball flying down
        towards the paddle. Attach a block to the "when ball hits paddle" block
        to ensure the ball reaches the finish target.
      courseD_bounce_events5s_instruction: |-
        Attach a block to the `when ball hits
        hand` event to ensure the ball reaches the basket.
      courseD_bounce_events5s_2018_instruction: |-
        Attach a block to the `when ball
        hits hand` event to ensure the ball reaches the basket.
      courseD_bounce_events6_instruction: |-
        Now the finish target is on the top. You
        need to attach blocks to both of the "when ball hits" blocks to solve this
        puzzle.
      courseD_bounce_events6s_instruction: |-
        Attach code to make the ball bounce when
        it hits the wall so you can solve this puzzle.
      courseD_bounce_events6s_2018_instruction: |-
        Attach code to make the ball bounce
        when it hits the wall so you can solve this puzzle.
      courseD_bounce_events7_instruction: |-
        Attach blocks to each of the "when"
        blocks. Bounce the ball until it hits the finish target.
      courseD_bounce_events7s_instruction: |-
        Attach sound blocks to make the net swish
        when you hit the basket and have the whistle blow when the ball misses your
        hand. Bounce the ball until it hits the finish target.
      courseD_bounce_events7s_2018_instruction: |-
        Attach sound blocks to make the
        net swish when you hit the basket and have the whistle blow when the ball
        misses your hand. Bounce the ball until it hits the finish target.
      courseD_collector_debugging1_instruction: |-
        Fix the error(s) to collect all
        of the treasure.
      courseD_collector_debugging1_2018_instruction: |-
        Fix the error(s) to collect
        all of the treasure.
      courseD_collector_debugging1a_instruction: |-
        Fix the error(s) to collect all
        of the treasure.
      courseD_collector_debugging1a_2018_instruction: |-
        Fix the error(s) to collect
        all of the treasure.
      courseD_collector_debugging2_instruction: |-
        Fix the error(s) to collect all
        of the treasure.
      courseD_collector_debugging2_2018_instruction: |-
        Fix the error(s) to collect
        all of the treasure.
      courseD_collector_debugging2a_instruction: |-
        Fix the error(s) to collect all
        of the treasure.
      courseD_collector_debugging2a_2018_instruction: |-
        Fix the error(s) to collect
        all of the treasure.
      courseD_collector_debugging3_instruction: |-
        Fix the error(s) to collect all
        of the treasure.
      courseD_collector_debugging3_2018_instruction: |-
        Fix the error(s) to collect
        all of the treasure.
      courseD_collector_debugging3a_instruction: |-
        Fix the error(s) to collect all
        of the treasure.
      courseD_collector_debugging3a_2018_instruction: |-
        Fix the error(s) to collect
        all of the treasure.
      courseD_collector_debugging4_instruction: |-
        Fix the error(s) to collect all
        of the treasure.
      courseD_collector_debugging4_2018_instruction: |-
        Fix the error(s) to collect
        all of the treasure.
      courseD_collector_debugging4a_instruction: |-
        Fix the error(s) to collect all
        of the treasure.
      courseD_collector_debugging4a_2018_instruction: |-
        Fix the error(s) to collect
        all of the treasure.
      courseD_collector_debugging5_instruction: |-
        All of the commands that you need
        are already here...now use your debugging skills to figure out how to solve
        this puzzle.
      courseD_collector_debugging5_2018_instruction: |-
        All of the commands that you
        need are already here...now use your debugging skills to figure out how to
        solve this puzzle.
      courseD_collector_debugging5a_instruction: |-
        All of the commands that you need
        are already here...now use your debugging skills to figure out how to solve
        this puzzle.
      courseD_collector_debugging5a_2018_instruction: |-
        All of the commands that you
        need are already here...now use your debugging skills to figure out how to
        solve this puzzle.
      courseD_collector_debugging6_instruction: |-
        Challenge: Use your debugging skills
        to fix the errors and collect all of the treasure.
      courseD_collector_debugging6_2018_instruction: |-
        Challenge: Use your debugging
        skills to fix the errors and collect all of the treasure.
      courseD_collector_debugging6a_instruction: |-
        Challenge: Use the code in the
        work area to get at least **6** pieces of treasure!
      courseD_collector_debugging6a_2018_instruction: |-
        Challenge: Use the code in
        the work area to get at least **6** pieces of treasure!
      courseD_collector_debugging7_instruction: |-
        Challenge: All of the commands that
        you need are already here...now use your debugging skills to figure out how
        to solve this puzzle.
      courseD_collector_debugging_challenge2_instruction: |-
        Are you an expert at nested
        loops? Use what you have learned so far to collect all the treasure!
      courseD_collector_debugging_challenge2_2018_instruction: |-
        Are you an expert
        at nested loops? Use what you have learned so far to collect all the treasure!
      courseD_collector_nested_loops_challenge2_instruction: |-
        Help the collector
        reach at least two piles of treasure using only the blocks in your toolbox.
        It is possible to collect all 4.
      courseD_collector_nested_loops_challenge2_2018_instruction: |-
        Help the collector
        reach at least two piles of treasure using only the blocks in your toolbox.
        It is possible to collect all 4.
      courseD_collector_nested_loops_challenge2a_instruction: |-
        Help Laurel collect
        at least two piles of treasure.
      courseD_collector_ramp10_instruction: Help Laurel collect all of the treasure.
      courseD_collector_ramp8_instruction: Help Laurel collect all of the treasure.
      courseD_collector_ramp9_instruction: Help Laurel collect all of the treasure.
      courseD_collector_until_challenge1_instruction: |-
        Are you an expert of nested
        loops? Use what you have learned so far to collect all of the treasure!
      courseD_debugging_1_instruction: Fix the error(s) to collect all of the nectar.
      courseD_debugging_2_instruction: Fix the error(s) to collect all of the nectar.
      courseD_debugging_3_instruction: "Repară \neroarea(erorile) pentru a colecta
        tot nectarul şi a face toată mierea."
      courseD_debugging_4_instruction: Fix the error(s) to make all of the honey.
      courseD_debugging_5_instruction: |-
        Challenge: All of the commands that you need
        are already here...now use your debugging skills to figure out how to solve
        this puzzle.
      courseD_debugging_6_instruction: |-
        Challenge:  Fix the errors to collect all
        of the nectar and make all of the honey.
      courseD_farmer_condLoops1_instruction: |-
        Use conditionals to make sure that
        you pick corn only when it's there.
      courseD_farmer_condLoops1_2018_instruction: |-
        Use conditionals to make sure
        that you pick corn only when it's there.
      courseD_farmer_condLoops2_instruction: |-
        Help the harvester collect both corn
        and lettuce from the field.
      courseD_farmer_condLoops2_2018_instruction: |-
        Help the harvester collect both
        corn and lettuce from the field.
      courseD_farmer_condLoops3_instruction: |-
        *"Corn, lettuce, AND pumpkins! Help
        me harvest them all."*
      courseD_farmer_condLoops3_2018_instruction: |-
        *"Corn, lettuce, AND pumpkins!
        Help me harvest them all."*
      courseD_farmer_condLoops4_instruction: |-
        Help the harvester pick all of the
        lettuce in each cluster before moving on to the next bunch.
      courseD_farmer_condLoops4_2018_instruction: |-
        Help the harvester pick all of
        the lettuce in each cluster before moving on to the next bunch.
      courseD_farmer_condLoops4a_instruction: |-
        Help the farmer pick all of the lettuce
        in each cluster before moving on to the next bunch.
      courseD_farmer_condLoops5_instruction: |-
        Collect all of the corn and lettuce,
        then grab the pumpkin at the end.
      courseD_farmer_condLoops5_2018_instruction: |-
        Collect all of the corn and lettuce,
        then grab the pumpkin at the end.
      courseD_farmer_condLoops6_instruction: |-
        Can you figure out how to pick the
        pumpkin?  Make sure to collect all of the corn along the way!
      courseD_farmer_condLoops6_2018_instruction: |-
        Can you figure out how to pick
        the pumpkin?  Make sure to collect all of the corn along the way!
      courseD_farmer_condLoops7_instruction: |-
        Challenge: Collect all of the corn
        and lettuce, then pick the pumpkin.
      courseD_farmer_condLoops7_2018_instruction: |-
        Challenge: Collect all of the
        corn and lettuce, then pick the pumpkin.
      courseD_farmer_condLoops8_instruction: |-
        Collect all of the corn and lettuce,
        then pick the pumpkin.
      courseD_farmer_condLoops8_2018_instruction: |-
        Collect all of the corn and lettuce,
        then pick the pumpkin.
      courseD_farmer_condLoops9_instruction: |-
        Collect all of the corn and lettuce,
        then pick the pumpkin.
      courseD_farmer_condLoops9_2018_instruction: |-
        Collect all of the corn and lettuce,
        then pick the pumpkin.
      courseD_farmer_condLoops9_predict1_instruction: |-
        Collect all of the corn and
        lettuce, then pick the pumpkin.
      courseD_farmer_condLoops9_predict1_2018_instruction: |-
        Collect all of the corn
        and lettuce, then pick the pumpkin.
      courseD_farmer_condLoops_challenge1_instruction: |-
        Collect everything to complete
        the level. Each hidden crop has only one corn or lettuce.
      courseD_farmer_condLoops_challenge1_2018_instruction: |-
        Collect everything to
        complete the level. Each hidden crop has only one corn or lettuce.
      courseD_farmer_condLoops_challenge2_instruction: |-
        Collect everything to complete
        the level.
      courseD_farmer_condLoops_challenge2_2018_instruction: |-
        Collect everything to
        complete the level.
      courseD_farmer_condLoops_challenge2_clone_instruction: |-
        Collect everything
        to complete the level.
      courseD_farmer_conditionals1_instruction: |-
        Move to the pile of dirt and use
        the `remove` block to remove it.
      courseD_farmer_conditionals10_instruction: "Flatten all of these piles using\nas
        few blocks as possible. "
      courseD_farmer_conditionals2_instruction: |-
        Move to the hole and fill it with
        six shovelfuls of dirt, using the `fill` block.
      courseD_farmer_conditionals3_instruction: |-
        Use as few blocks as possible to
        solve this puzzle.
      courseD_farmer_conditionals4_instruction: |-
        Help the farmer remove this entire
        pile using a `while` loop.
      courseD_farmer_conditionals5_instruction: 'Help me remove all of this dirt.

'
      courseD_farmer_conditionals6_instruction: |-
        Use the `while` loop to easily fill
        all of the holes.
      courseD_farmer_conditionals7_instruction: |-
        Fill in the hole at the end of each
        of these paths.
      courseD_farmer_conditionals8_instruction: "Challenge: Fill all of these holes\nusing
        as few blocks as possible. "
      courseD_farmer_conditionals9_instruction: "Flatten all of these piles using\nas
        few blocks as possible. "
      courseD_farmer_until_challenge2_instruction: |-
        Use If/Else blocks to follow
        the curvy path. At each corner, use the `remove 1` command in a loop to clear
        the piles.
      courseD_farmer_until_challenge2_2018_instruction: |-
        Use If/Else blocks to follow
        the curvy path. At each corner, use the `remove 1` command in a loop to clear
        the piles.
      courseD_farmer_while1_instruction: |-
        Move to the pile of dirt and use the `remove`
        block to remove it.
      courseD_farmer_while10_instruction: "Flatten all of these piles using as few\nblocks
        as possible. "
      courseD_farmer_while10_2018_instruction: "Flatten all of these piles using\nas
        few blocks as possible. "
      courseD_farmer_while10_predict2_instruction: "Flatten all of these piles using\nas
        few blocks as possible. "
      courseD_farmer_while10_predict2_2018_instruction: "Flatten all of these piles\nusing
        as few blocks as possible. "
      courseD_farmer_while1_2018_instruction: |-
        Move to the pile of dirt and use the
        `remove` block to remove it.
      courseD_farmer_while2_instruction: |-
        Move to the hole and fill it with six shovelfuls
        of dirt, using the `fill` block.
      courseD_farmer_while2_2018_instruction: |-
        Move to the hole and fill it with
        six shovelfuls of dirt, using the `fill` block.
      courseD_farmer_while3_instruction: |-
        Use as few blocks as possible to solve
        this puzzle.
      courseD_farmer_while3_2018_instruction: |-
        Use as few blocks as possible to solve
        this puzzle.
      courseD_farmer_while4_instruction: |-
        Help the farmer remove this entire pile
        using a `while` loop.
      courseD_farmer_while4_2018_instruction: |-
        Help the farmer remove this entire
        pile using a `while` loop.
      courseD_farmer_while4_predict1_instruction: |-
        Help the farmer remove this entire
        pile using a `while` loop.
      courseD_farmer_while4_predict1_2018_instruction: |-
        Help the farmer remove this
        entire pile using a `while` loop.
      courseD_farmer_while5_instruction: 'Help me remove all of this dirt. '
      courseD_farmer_while5_2018_instruction: 'Help me remove all of this dirt. '
      courseD_farmer_while6_instruction: |-
        Use the `while` loop to easily fill all
        of the holes.
      courseD_farmer_while6_2018_instruction: |-
        Use the `while` loop to easily fill
        all of the holes.
      courseD_farmer_while7_instruction: |-
        Fill in the hole at the end of each of
        these paths.
      courseD_farmer_while7_2018_instruction: |-
        Fill in the hole at the end of each
        of these paths.
      courseD_farmer_while8_instruction: "Challenge: Fill all of these holes using\nas
        few blocks as possible. "
      courseD_farmer_while8_2018_instruction: "Challenge: Fill all of these holes\nusing
        as few blocks as possible. "
      courseD_farmer_while9_instruction: "Flatten all of these piles using as few\nblocks
        as possible. "
      courseD_farmer_while9_2018_instruction: "Flatten all of these piles using as\nfew
        blocks as possible. "
      courseD_farmer_while_challenge1_instruction: |-
        Fill all of the holes and remove
        all of the piles.
      courseD_farmer_while_challenge1_2018_instruction: |-
        Fill all of the holes and
        remove all of the piles.
      courseD_farmer_while_challenge2_instruction: |-
        Fill all of the holes and remove
        all of the piles.
      courseD_farmer_while_challenge2_2018_instruction: |-
        Fill all of the holes and
        remove all of the piles.
      courseD_harvester_nested_loops_challenge1-broken_instruction: |-
        "I need some
        help on the farm! Help me harvest this corn using only the blocks in your
        toolbox."
      courseD_harvester_nested_loops_challenge1_instruction: |-
        "I need some help
        on the farm! Help me harvest this corn using only the blocks in your toolbox."
      courseD_harvester_nested_loops_challenge1_2018_instruction: |-
        "I need some
        help on the farm! Help me harvest this corn using only the blocks in your
        toolbox."
      courseD_iceage_loops1_instruction: |-
        Help Scrat across the ice to get to the
        acorn!
      courseD_iceage_loops10_instruction: |-
        Help Scrat get all the way over to the
        acorn!
      courseD_iceage_loops11_instruction: Help Scrat get to the acorn!
      courseD_iceage_loops12_instruction: Get to the acorn any way you can!
      courseD_iceage_loops2_instruction: Use a `turn left` block to get to the acorn!
      courseD_iceage_loops3_instruction: |-
        Can you get to the acorn with just one
        `move forward` block?
      courseD_iceage_loops4_instruction: |-
        Add one more block to get Scrat all the
        way to the acorn!
      courseD_iceage_loops6_instruction: Can you add a loop to get to the acorn?
      courseD_iceage_loops7_instruction: 'Scrat really wants that acorn! '
      courseD_iceage_loops8_instruction: 'Can you fix this code? '
      courseD_iceage_loops9_instruction: |-
        The acorn is so far away! Can you use loops
        to help Scrat get there?
      courseD_maze_loops_challenge1_instruction: |-
        Let's hunt for treasure - using
        loops! Help the collector reach at least two piles of treasure using only
        the blocks in your toolbox.
      courseD_maze_nestedLoops3_instruction: |-
        Get the zombie to the sunflower using
        the fewest number of blocks possible.
      courseD_maze_nestedLoops3_2018_instruction: |-
        Get the zombie to the sunflower
        using the fewest number of blocks possible.
      courseD_maze_nestedLoops4_instruction: "Get the zombie to the sunflower using\nthe
        fewest blocks possible!  "
      courseD_maze_nestedLoops4_2018_instruction: "Get the zombie to the sunflower\nusing
        the fewest blocks possible!  "
      courseD_maze_nestedLoops5_instruction: |-
        Get the zombie to the sunflower using
        the fewest number of blocks possible!
      courseD_maze_nestedLoops5_2018_instruction: |-
        Get the zombie to the sunflower
        using the fewest number of blocks possible!
      courseD_maze_nestedLoops6_instruction: |-
        Get the zombie to the sunflower using
        only the blocks available.
      courseD_maze_nestedLoops6_2018_instruction: |-
        Get the zombie to the sunflower
        using only the blocks available.
      courseD_maze_ramp1_instruction: |-
        For this puzzle, snap all of the blocks together
        and click "Run" to watch it go!
      courseD_maze_ramp1_2018_instruction: |-
        For this puzzle, snap all of the blocks
        together and click "Run" to watch it go!
      courseD_maze_ramp2_instruction: |-
        Drag an extra `move forward` block out of
        the toolbox, then attach all blocks to `when run` to finish your code.
      courseD_maze_ramp2_2018_instruction: |-
        Drag an extra `move forward` block out
        of the toolbox, then attach all blocks to `when run` to finish your code.
      courseD_maze_ramp3_instruction: |-
        There is one extra block that is going to
        cause the bird to crash. Throw it away by dragging it back to the toolbox.
      courseD_maze_ramp3_2018_instruction: |-
        There is one extra block that is going
        to cause the bird to crash. Throw it away by dragging it back to the toolbox.
      courseD_maze_ramp4_instruction: Avoid TNT or feathers will fly!
      courseD_maze_ramp4_2018_instruction: Avoid TNT or feathers will fly!
      courseD_maze_ramp5_instruction: Avoid the TNT.
      courseD_maze_ramp5_2018_instruction: Avoid the TNT.
      courseD_maze_ramp5a_instruction: |-
        Pay attention to the sequence and see if
        you can figure out how to get to that pig!
      courseD_maze_ramp5a_2018_instruction: |-
        Pay attention to the sequence and see
        if you can figure out how to get to that pig!
      courseD_maze_ramp5b_instruction: |-
        Navigate this maze to help the bird find
        the pig!
      courseD_maze_ramp5b_2018_instruction: |-
        Navigate this maze to help the bird
        find the pig!
      courseD_maze_ramp5c_instruction: Help the bird get to the pig.
      courseD_maze_ramp5c_2018_instruction: Help the bird get to the pig.
      courseD_maze_ramp5d_instruction: Get the bird to the pig.
      courseD_maze_ramp5d_2018_instruction: Get the bird to the pig.
      courseD_maze_ramp6_instruction: |-
        "Keep calm and help me find the bad pig.
        Otherwise I might get angry!"
      courseD_maze_ramp6a_instruction: |-
        "Keep calm and help me find the bad pig.
        Otherwise I might get angry!"
      courseD_maze_ramp7_instruction: "**Challenge:**  Get the bird to the pig!"
      courseD_maze_until1_instruction: Get the angry bird to the pig.
      courseD_maze_until10_instruction: Help the zombie get to the sunflower.
      courseD_maze_until10_2018_instruction: Help the zombie get to the sunflower.
      courseD_maze_until10_predict2_instruction: Help the zombie get to the sunflower.
      courseD_maze_until10_predict2_2018_instruction: |-
        Help the zombie get to the
        sunflower.
      courseD_maze_until1_2018_instruction: Get the angry bird to the pig.
      courseD_maze_until2_instruction: |-
        Now, use the `repeat until` loop to do the
        same thing without specifying how many times to move forward and turn.
      courseD_maze_until3_instruction: Get the bird to the pig.
      courseD_maze_until3_2018_instruction: Get the bird to the pig.
      courseD_maze_until4_instruction: |-
        Can you get the zombie to the sunflower using
        only the blocks that are available?
      courseD_maze_until4_2018_instruction: |-
        Can you get the zombie to the sunflower
        using only the blocks that are available?
      courseD_maze_until5_instruction: |-
        Use the `if` block to help the zombie decide
        when to turn, then get the zombie to the sunflower.
      courseD_maze_until5_2018_instruction: |-
        Use the `if` block to help the zombie
        decide when to turn, then get the zombie to the sunflower.
      courseD_maze_until6_instruction: Help the zombie get to the sunflower.
      courseD_maze_until6_2018_instruction: Help the zombie get to the sunflower.
      courseD_maze_until7_instruction: Help the zombie get to the sunflower.
      courseD_maze_until7_2018_instruction: Help the zombie get to the sunflower.
      courseD_maze_until8_instruction: Help the zombie get to the sunflower.
      courseD_maze_until8_2018_instruction: Help the zombie get to the sunflower.
      courseD_maze_until9_instruction: |-
        **Challenge:** Avoid the chompers and help
        the zombie get to the sunflower.
      courseD_maze_until9_2018_instruction: |-
        **Challenge:** Avoid the chompers and
        help the zombie get to the sunflower.
      courseD_maze_until_challenge_instruction: |-
        No hints, just challenge. Get the
        zombie to the sunflower.
      courseD_maze_until_challenge1-delete-this-copy_instruction: |-
        No hints, just
        challenge. Get the zombie to the sunflower.
      courseD_maze_until_challenge1_instruction: |-
        No hints, just challenge. Get the
        zombie to the sunflower.
      courseD_maze_until_challenge1_2018_instruction: |-
        No hints, just challenge.
        Get the zombie to the sunflower.
      courseD_maze_until_challenge2_instruction: |-
        No hints, just challenge. Get the
        zombie to the sunflower.
      courseD_pixelation_instruction: |-
        Encode an image of anything you like using
        binary. The binary language will be represented with '0' and '1' only.
      courseD_playLab_cond1_instruction: |-
        Get Pegleg to the dragon to solve this
        puzzle.
      courseD_playLab_cond1_2018_instruction: |-
        Get Pegleg to the flags to solve this
        puzzle.
      courseD_playLab_cond2_instruction: "Give Pegleg a point every time he makes\nit
        to the dragon. "
      courseD_playLab_cond2_2018_instruction: "Give Pegleg a point every time he\nmakes
        it to the dragon. "
      courseD_playLab_cond3_instruction: "Make the dragon change between random emotions\nevery
        second.  "
      courseD_playLab_cond3_2018_instruction: "Make the dragon change between random\nemotions
        every second.  "
      courseD_playLab_cond3a_instruction: |-
        Make it so when Pegleg gets to the dragon,
        he gets 2 points if the dragon is happy and 1 otherwise.
      courseD_playLab_cond3a_2018_instruction: |-
        Make it so when Pegleg gets to the
        dragon, he gets 2 points if the dragon is happy and 1 otherwise.
      courseD_playLab_cond3b_instruction: |-
        1) Make the dragon change between random
        emotions every second.  \r
        2) Make it so when Pegleg gets to the dragon,
        he gets 2 points if the dragon is happy and 1 otherwise.
      courseD_playLab_cond4_instruction: |-
        Add some code so that the ninja (actor
        3) starts chasing Pegleg as soon as the game begins.  End the game as a loss
        if the ninja catches him.
      courseD_playLab_cond4_2018_instruction: |-
        Add some code so that the ninja (actor
        3) starts chasing Pegleg as soon as the game begins.  End the game as a loss
        if the ninja catches him.
      courseD_playLab_cond5_instruction: |-
        Add a `repeat forever` loop that continuously
        checks if the score is greater than 5, then ends the game as a win when it
        is.
      courseD_playLab_cond5_2018_instruction: |-
        Add a `repeat forever` loop that continuously
        checks if the score is greater than 5, then ends the game as a win when it
        is.
      courseD_playLab_cond6_instruction: "1)  Slow the ninja (actor 3) down before\nyou
        set him to chase the pirate.  \\r\n2)  If the pirate is greater than 225\npixels
        down, set the ninja to **flee** the pirate.  Otherwise, set the ninja\nto
        **chase** the pirate.  "
      courseD_playLab_cond6_2018_instruction: "1)  Slow the ninja (actor 3) down\nbefore
        you set him to chase the pirate.  \\r\n2)  If the pirate is greater\nthan
        225 pixels down, set the ninja to **flee** the pirate.  Otherwise, set\nthe
        ninja to **chase** the pirate.  "
      courseD_playLab_cond6a_instruction: |-
        If the pirate (actor 1) is in the safe
        zone, wait one second, then deduct a point as long as he stays beneath the
        octopus line.
      courseD_playLab_cond6a_2018_instruction: |-
        If the pirate (actor 1) is in the
        safe zone, wait one second, then deduct a point as long as he stays beneath
        the octopus line.
      courseD_playLab_cond6cloneForTest_instruction: Testing
      courseD_playLab_condFP_instruction: |-
        Now, build your own game to show off to
        your friends!
      courseD_playLab_condFP_2018_instruction: |-
        Now, build your own game to show
        off to your friends!
      courseD_playLab_embedded_instruction: |-
        Move Pegleg the Pirate with the arrow
        keys. Get to the dragon to score points, but avoid the ninja! Standing below
        the line of octopuses will make the ninja stop chasing you, but beware! The
        longer you stay there, the more points you lose. \r
        \r
        Get 5 points to win!
      courseD_scrat_ramp1_instruction: |-
        For this puzzle, snap all of the blocks together
        and click "Run" to watch it go!
      courseD_scrat_ramp1_2018_instruction: |-
        For this puzzle, snap all of the blocks
        together and click "Run" to watch it go!
      courseD_scrat_ramp2_instruction: |-
        Drag an extra `move forward` block out of
        the toolbox, then attach all blocks to `when run` to finish your code.
      courseD_scrat_ramp2_2018_instruction: |-
        Drag an extra `move forward` block out
        of the toolbox, then attach all blocks to `when run` to finish your code.
      courseD_scrat_ramp3_instruction: |-
        There is one extra block that is going to
        cause Scrat to crash. Throw it away by dragging it back to the toolbox.
      courseD_scrat_ramp3_2018_instruction: |-
        There is one extra block that is going
        to cause Scrat to crash. Throw it away by dragging it back to the toolbox.
      courseD_scrat_ramp4_instruction: Avoid the cracked ice to keep Scrat safe!
      courseD_scrat_ramp4_2018_instruction: |-
        Avoid the cracked ice to keep Scrat
        safe!
      courseD_scrat_ramp5_instruction: Avoid the cracked ice.
      courseD_scrat_ramp5_2018_instruction: Avoid the cracked ice.
      courseD_scrat_ramp6_instruction: Help Scrat get to the acorn using a loop!
      courseD_scrat_ramp6_2018_instruction: |-
        Help Scrat get to the acorn using a
        loop!
      courseD_scrat_ramp7_instruction: Help Scrat get to the acorn!
      courseD_scrat_ramp7_2018_instruction: Help Scrat get to the acorn!
      courseD_scrat_ramp8_instruction: |-
        Use what you've learned to get Scrat to
        the acorn!
      courseD_scrat_ramp8_2018_instruction: |-
        Use what you've learned to get Scrat
        to the acorn!
      courseE_artist_concept1_instruction: 'Recreate this image. '
      courseE_artist_concept1_2018_instruction: 'Recreate this image. '
      courseE_artist_concept4_instruction: |-
        Recreate this drawing using 13 blocks
        or fewer.
      courseE_artist_concept4_2018_instruction: Recreate this drawing.
      courseE_artist_concept_challenge1_instruction: "Help the artist draw this unique\nshape. "
      courseE_artist_concept_challenge1_2018_instruction: "Help the artist draw this\nunique
        shape. "
      courseE_artist_concept_challenge2_instruction: |-
        Create five pinwheel designs
        using the code below.
      courseE_artist_concept_challenge2_2018_instruction: |-
        Create five pinwheel designs
        using the code below.
      courseE_artist_embed_functions8_instruction: |-
        Look at this level carefully.
        What kind of functions do you see a program needing in order to create a design
        like this. You'll soon make this on your own, so come back here if you need
        help.
      courseE_artist_functions1_instruction: |-
        Help the zombie draw glasses using
        squares with sides of 100 pixels.  \r
        The bridge between the glasses is 75
        pixels long.
      courseE_artist_functions10_instruction: |-
        This time, use lines of 8 hexagons
        with 25 pixel sides.
      courseE_artist_functions10_2018_instruction: |-
        This time, use lines of 8 hexagons
        with 25 pixel sides.
      courseE_artist_functions1_2018_instruction: |-
        Help the zombie draw glasses using
        squares with sides of 100 pixels.  \r
        The bridge between the glasses is 75
        pixels long.
      courseE_artist_functions2_instruction: "This time, use the `draw a square`\nfunction
        to create the glasses. "
      courseE_artist_functions2_2018_instruction: "This time, use the `draw a square`\nfunction
        to create the glasses. "
      courseE_artist_functions3_instruction: |-
        You can make this drawing by adding
        a repeat block.
      courseE_artist_functions3_2018_instruction: |-
        You can make this drawing by adding
        a repeat block.
      courseE_artist_functions4_instruction: |-
        Now that you can draw a star, try drawing
        four stars!
      courseE_artist_functions4_2018_instruction: |-
        Now that you can draw a star,
        try drawing four stars!
      courseE_artist_functions5_instruction: |-
        Draw only those three stars to finish
        this puzzle.
      courseE_artist_functions5_2018_instruction: |-
        Draw only those three stars to
        finish this puzzle.
      courseE_artist_functions6_instruction: |-
        Make this window by drawing a square,
        then turning 90 degrees before drawing another, and so on.
      courseE_artist_functions6_2018_instruction: |-
        Make this window by drawing a
        square, then turning 90 degrees before drawing another, and so on.
      courseE_artist_functions7_instruction: |-
        Try solving this puzzle by creating
        `draw a window` and calling it five times. Watch out for the door!
      courseE_artist_functions7_2018_instruction: |-
        Try solving this puzzle by creating
        `draw a window` and calling it five times. Watch out for the door!
      courseE_artist_functions8_instruction: |-
        Challenge: Create as many functions
        as you think you need to make this drawing of 50 pixel squares.
      courseE_artist_functions8_2018_instruction: |-
        Challenge: Create as many functions
        as you think you need to make this drawing of 50 pixel squares.
      courseE_artist_functions9_instruction: |-
        Create this image using only the blocks
        provided.
      courseE_artist_functions9_2018_instruction: |-
        Create this image using only the
        blocks provided.
      courseE_artist_functions_challenge_instruction: |-
        Once you define a function,
        you can call it over and over again - whenever and wherever you want! Try
        this code to see how it works, then change it to make your own impressive
        design!
      courseE_artist_functions_challenge1_instruction: |-
        Once you define a function,
        you can call it over and over again - whenever and wherever you want! Try
        this code to see how it works, then change it to make your own impressive
        design!
      courseE_artist_functions_challenge1_2018_instruction: |-
        Once you define a function,
        you can call it over and over again - whenever and wherever you want! Try
        this code to see how it works, then change it to make your own impressive
        design!
      courseE_artist_functions_challenge2_instruction: |-
        Try this code to see how
        it works, then make the program your own!
      courseE_artist_functions_challenge2_2018_instruction: |-
        Try this code to see
        how it works, then make the program your own!
      courseE_artist_ramp10_instruction: |-
        Now, drag the code for the last triangle
        into a new loop to spin it around and make a snowflake!
      courseE_artist_ramp11_instruction: Now make a square using Artist!
      courseE_artist_ramp12_instruction: |-
        Use what you've learned to draw this triangle
        inside of a square.
      courseE_artist_ramp8_instruction: Now make a square using Artist!
      courseE_artist_ramp8_2_instruction: Now make a square using Artist!
      courseE_artist_ramp8_2018_instruction: Now make a square using Artist!
      courseE_artist_ramp8_2_2018_instruction: Now make a square using Artist!
      courseE_artist_ramp9_instruction: Use what you've learned to draw this triangle.
      courseE_artist_ramp9_2_instruction: |-
        Use what you've learned to draw this
        triangle.
      courseE_artist_ramp9_2018_instruction: |-
        Use what you've learned to draw this
        triangle.
      courseE_artist_ramp9_2_2018_instruction: |-
        Use what you've learned to draw
        this triangle.
      courseE_bee_concept1_instruction: 'Colectează tot nectarul din fiecare floare.
        Folosește o buclă imbricată. '
      courseE_bee_concept1_2018_instruction: |-
        Collect all of the nectar from each
        flower.
      courseE_bee_concept2_instruction: |-
        Help the bee make all of the honey. You
        can only make honey at a honeycomb, but you can check any space to see if
        there is a honeycomb.
      courseE_bee_concept2_2018_instruction: 'Help the bee make all of the honey.

'
      courseE_bee_concept3_instruction: |-
        Collect all of the nectar using  as few
        blocks as possible.
      courseE_bee_concept3_2018_instruction: |-
        Collect all of the nectar using  as
        few blocks as possible.
      courseE_bee_concept4_instruction: |-
        Uh oh! The bee is not sure if he should
        collect nectar or make honey. Can you help him out?
      courseE_bee_concept4_2018_instruction: |-
        Uh oh! The bee is not sure if he should
        collect nectar or make honey. Can you help him out?
      courseE_bee_concept5_instruction: |-
        Help the bee collect the nectar from the
        flowers?
      courseE_bee_concept5_2018_instruction: |-
        Help the bee collect the nectar from
        the flowers?
      courseE_bee_functions1_instruction: Colectează tot nectarul din fiecare floare.
      courseE_bee_functions10_instruction: |-
        Solve this puzzle by creating a function
        that helps the bee go get all of the honey before returning back to the main
        path.
      courseE_bee_functions10_2018_instruction: |-
        Solve this puzzle by creating a
        function that helps the bee go get all of the honey before returning back
        to the main path.
      courseE_bee_functions1_2018_instruction: |-
        Collect all the nectar from each
        flower.
      courseE_bee_functions2_instruction: |-
        Use the `get 2 nectar` function to collect
        the nectar from each flower.
      courseE_bee_functions2_2018_instruction: |-
        Use the `get 2 nectar` function to
        collect the nectar from each flower.
      courseE_bee_functions3_instruction: "Funcţiile sunt blocuri de cod care efectuează
        \no activitate. Utilizează funcţia \"obţine 5\" pentru a colecta 5 nectare
        dintr-o data. De asemenea, asigură-te că\nfolosești și o buclă pentru a obține
        o numarătoare ideală de bloc."
      courseE_bee_functions3_2018_instruction: |-
        Build the `get 5` function to use
        in this puzzle.
      courseE_bee_functions4_instruction: "Funcţia \"mută şi obține nectar\" face
        albina să se întoarcă, să colecteze nectar şi apoi returnează albina la locul
        de unde a început. Folosește \nfuncţia pentru a colecta tot nectarul."
      courseE_bee_functions4_2018_instruction: "Funcţia \"mută şi obține nectar\"
        face albina să se întoarcă, să colecteze nectar şi apoi returnează albina
        la locul de unde a început. Folosește \nfuncţia pentru a colecta tot nectarul."
      courseE_bee_functions5_instruction: |-
        Now write the function to collect nectar
        from the flowers.
      courseE_bee_functions5_2018_instruction: |-
        Now write the function to collect
        nectar from the flowers.
      courseE_bee_functions6_instruction: |-
        Create a function and call it to collect
        nectar at each flower and make honey at each honeycomb.
      courseE_bee_functions6_2018_instruction: |-
        Create a function and call it to
        collect nectar at each flower and make honey at each honeycomb.
      courseE_bee_functions6test_instruction: |-
        Create a function and call it to collect
        nectar at each flower and make honey at each honeycomb.
      courseE_bee_functions7_instruction: |-
        Create your own function that goes down
        a path, gets nectar, makes honey, and then returns the bee to the top of the
        path. Collect all the nectar and make all the honey!
      courseE_bee_functions7_2018_instruction: |-
        Create your own function that goes
        down a path, gets nectar, makes honey, and then returns the bee to the top
        of the path. Collect all the nectar and make all the honey!
      courseE_bee_functions8_instruction: |-
        Create a function that collects all of
        the nectar from each flower.
      courseE_bee_functions8_2018_instruction: |-
        Create a function that collects all
        of the nectar from each flower.
      courseE_bee_functions9_instruction: |-
        Create a function to collect all of the
        nectar from each flower.
      courseE_bee_functions9_2018_instruction: |-
        Create a function to collect all
        of the nectar from each flower.
      courseE_bee_functions9b_instruction: Now try it in Bee!
      courseE_bee_functions_challenge1_instruction: |-
        You are on your own for this
        challenge. This could "bee" harder than it looks!
      courseE_bee_functions_challenge1_2018_instruction: |-
        You are on your own for
        this challenge. This could "bee" harder than it looks!
      courseE_bee_functions_challenge2_instruction: |-
        You are on your own for this
        challenge. Sweet!
      courseE_bee_functions_challenge2_2018_instruction: |-
        You are on your own for
        this challenge. Sweet!
      courseE_bee_ramp14_instruction: |-
        Help the bee follow the path to gather all
        of the honey and all of the nectar.
      courseE_bee_ramp14_2018_instruction: |-
        Help the bee follow the path to gather
        all of the honey and all of the nectar.
      courseE_bee_ramp17_instruction: Use what you have learned to solve this puzzle.
      courseE_collector_ramp10_instruction: Help Laurel collect all of the treasure.
      courseE_collector_ramp8_instruction: Help Laurel collect all of the treasure.
      courseE_collector_ramp9_instruction: Help Laurel collect all of the treasure.
      courseE_farmer_concept1_instruction: |-
        Can you write a program that fills these
        holes until the ground is even?
      courseE_farmer_concept1_2018_instruction: |-
        Can you write a program that fills
        these holes until the ground is even?
      courseE_farmer_concept2_instruction: Collect all of the pumpkins.
      courseE_farmer_concept2_2018_instruction: Collect all of the pumpkins.
      courseE_farmer_concept3_instruction: |-
        Fill in the hole at the end of each of
        these paths.
      courseE_farmer_concept3_2018_instruction: |-
        Fill in the hole at the end of each
        of these paths.
      courseE_farmer_concept4_instruction: Acum, hai să mergem încă un nivel în profunzimea
        problemei?
      courseE_farmer_functions1_instruction: |-
        Help the harvester get to the pumpkin
        and pick it.
      courseE_farmer_functions10_instruction: "No one knows what these sprouts will\nbecome.
        \ Use `if` statements to write the code to check and harvest each one.   "
      courseE_farmer_functions10b_instruction: |-
        Use your new function twice to solve
        this puzzle.
      courseE_farmer_functions10b_2018_instruction: |-
        Use your new function twice
        to solve this puzzle.
      courseE_farmer_functions1_2018_instruction: |-
        Help the harvester get to the
        pumpkin and pick it.
      courseE_farmer_functions1a_instruction: |-
        Now help the harvester pick the corn,
        lettuce, **and** pumpkin.
      courseE_farmer_functions1a_2018_instruction: |-
        Now help the harvester pick the
        corn, lettuce, **and** pumpkin.
      courseE_farmer_functions2_instruction: |-
        Now, there will be a different number
        of pumpkins each time you run the program.   \r
        \r
        Use the `while` block
        to pick only as many pumpkins as you need.
      courseE_farmer_functions2a_instruction: |-
        We're going to check lots of squares
        for crops in the next few puzzles.  Let's move everything into a function
        to make it easier.
      courseE_farmer_functions2aALT_instruction: |-
        We're going to check lots of squares
        for crops in the next few puzzles.  Let's move everything into a function
        to make it easier.
      courseE_farmer_functions2b_instruction: |-
        Help the harvester pick the corn and
        pumpkins.
      courseE_farmer_functions2b_2018_instruction: |-
        Help the harvester pick the corn
        and pumpkins.
      courseE_farmer_functions2ba_instruction: |-
        Help the farmer pick the corn and
        pumpkins using the `corn and pumpkin` function.
      courseE_farmer_functions2ba_2018_instruction: |-
        Help the farmer pick the corn
        and pumpkins using the `corn and pumpkin` function.
      courseE_farmer_functions3_instruction: |-
        What happens when the paths to the
        pumpkins are all different lengths?   \r
        \r
        Get them all with as few blocks
        as possible.
      courseE_farmer_functions3b_instruction: |-
        Now help the farmer pick the corn,
        lettuce, **and** pumpkin.
      courseE_farmer_functions3c_instruction: |-
        Now, fill-in the function yourself
        by pulling the blocks from the code and dropping them into the **function
        definition**.
      courseE_farmer_functions3c_2018_instruction: |-
        Now, fill-in the function yourself
        by pulling the blocks from the code and dropping them into the **function
        definition**.
      courseE_farmer_functions4_instruction: |-
        Great!  Now you have code that will
        work to get pumpkins from any size path.\r
        \r
        Let's drag that code into
        a function so we can use it in lots of ways...but first use it to solve this
        puzzle again.
      courseE_farmer_functions4b_instruction: |-
        Use your new function to solve this
        puzzle.
      courseE_farmer_functions4b_2018_instruction: |-
        Use your new function to solve
        this puzzle.
      courseE_farmer_functions5_instruction: |-
        How can you change your program to
        get this function to work for each of these paths?
      courseE_farmer_functions5a_instruction: |-
        How can you change your program to
        get this function to work for each of these paths?
      courseE_farmer_functions5b_instruction: |-
        The crops are now growing in clusters.  Add
        some new `while` loops to your function to make sure you get all of the produce.
      courseE_farmer_functions5c_instruction: Your function will come in handy here.
      courseE_farmer_functions5c_2018_instruction: |-
        Your function will come in handy
        here.
      courseE_farmer_functions6_instruction: |-
        *"Lettuce try something new!"*\r
        \r
        Here's
        some code to collect all of the lettuce.  Move it into a function so we can
        use it later.
      courseE_farmer_functions6b_instruction: Pick all of the produce.
      courseE_farmer_functions6c_instruction: |-
        What do you need to add this program
        to check whether a sprout is corn or lettuce?
      courseE_farmer_functions6c_2018_instruction: |-
        What do you need to add this
        program to check whether a sprout is corn or lettuce?
      courseE_farmer_functions7_instruction: Use your functions to solve this puzzle.
      courseE_farmer_functions7b_instruction: |-
        Help the harvester find her way down
        this confusing path and to the pumpkin by turning left at the corn and right
        at the lettuce.
      courseE_farmer_functions7b_2018_instruction: |-
        Help the harvester find her way
        down this confusing path and to the pumpkin by turning left at the corn and
        right at the lettuce.
      courseE_farmer_functions8_instruction: |-
        **Challenge:**  Solve this puzzle with
        as few blocks as possible.
      courseE_farmer_functions8b_instruction: "**Challenge:** Collect all of the\npumpkins
        using the method from the last puzzle. "
      courseE_farmer_functions8b_2018_instruction: "**Challenge:** Collect all of\nthe
        pumpkins using the method from the last puzzle. "
      courseE_farmer_functions9_instruction: Use conditionals to simplify your program.
      courseE_farmer_functions9b_instruction: |-
        Can you figure out the pattern that
        you need to solve this puzzle?
      courseE_farmer_functions9b_2018_instruction: |-
        Can you figure out the pattern
        that you need to solve this puzzle?
      courseE_farmer_functions9b_clone_instruction: |-
        Can you figure out the pattern
        that you need to solve this puzzle?
      courseE_farmer_predict1_instruction: |-
        Pick all of the lettuce (only while there
        is some to pick.)
      courseE_farmer_predict1_2018_instruction: |-
        Pick all of the lettuce (only while
        there is some to pick.)
      courseE_farmer_ramp11_instruction: |-
        This puzzle also uses nested loops.  Can
        you figure out how?
      courseE_farmer_ramp11a_instruction: "Pick lettuce only while there is still\nlettuce
        to pick. "
      courseE_farmer_ramp11a_2018_instruction: While there is a pile, remove dirt.
      courseE_farmer_ramp11b_instruction: While there is a pile, remove dirt.
      courseE_farmer_ramp11b_2018_instruction: While there is a pile, remove dirt.
      courseE_farmer_ramp12_instruction: |-
        Now use nested loops (`repeat` and `while`)
        to solve this puzzle.
      courseE_farmer_ramp12_2018_instruction: |-
        Now use nested loops to solve this
        puzzle.
      courseE_farmer_ramp12_forswap_instruction: |-
        Now use nested loops to solve this
        puzzle.
      courseE_farmer_ramp12_forswap_2018_instruction: |-
        Now use nested loops to solve
        this puzzle.
      courseE_farmer_ramp12a_instruction: |-
        Help the farmer correctly travel the path
        to gather all of the lettuce.
      courseE_farmer_ramp12a_2018_instruction: |-
        Help the farmer correctly travel
        the path to gather all of the lettuce.
      courseE_farmer_ramp12b_instruction: While there is lettuce, pick lettuce!
      courseE_farmer_ramp12b_2018_instruction: While there is lettuce, pick lettuce!
      courseE_farmer_ramp12c_instruction: |-
        Move forward until you reach the lettuce,
        then pick it all using a `while` loop.
      courseE_farmer_ramp12c_2018_instruction: |-
        Move forward until you reach the
        lettuce, then pick it all using a `while` loop.
      courseE_farmer_ramp12d_instruction: |-
        Move forward until you reach the lettuce,
        then pick it all using a `while` loop.
      courseE_farmer_ramp12d_2018_instruction: |-
        Move forward until you reach the
        lettuce, then pick it all using a `while` loop.
      courseE_farmer_ramp12e_instruction: |-
        Move forward until you reach the lettuce,
        then pick it all using a `while` loop.
      courseE_farmer_ramp12e_2018_instruction: |-
        Move forward until you reach the
        lettuce, then pick it all using a `while` loop.
      courseE_farmer_ramp12f_instruction: |-
        Move forward until you reach the lettuce,
        then turn left **if** there is a path to the left.  Otherwise, turn right.
      courseE_farmer_ramp12f_2018_instruction: |-
        Move forward until you reach the
        lettuce, then turn left **if** there is a path to the left.  Otherwise, turn
        right.
      courseE_farmer_ramp12g_instruction: |-
        Move forward until you reach the lettuce,
        then turn left **if** there is a path to the left.  Otherwise, turn right.
      courseE_farmer_ramp12g_2018_instruction: |-
        Move forward until you reach the
        lettuce, then turn left **if** there is a path to the left.  Otherwise, turn
        right.
      courseE_farmer_ramp13_instruction: |-
        Pick corn if there is corn, and pick lettuce
        while there is lettuce.
      courseE_farmer_ramp13_2018_instruction: |-
        Pick corn if there is corn, and pick
        lettuce while there is lettuce.
      courseE_farmer_ramp15_instruction: |-
        Solve this puzzle using only the blocks
        available.
      courseE_farmer_ramp15_2018_instruction: |-
        Solve this puzzle using only the blocks
        available.
      courseE_farmer_ramp16_instruction: |-
        **Challenge:** Solve this puzzle with the
        fewest number of blocks.
      courseE_maze_predict1_instruction: |-
        This code includes a new block. What do
        you think would happen if you press the "Run" block?
      courseE_maze_predict1_2018_instruction: |-
        This code includes a new block. What
        do you think would happen if you press the "Run" block?
      courseE_maze_ramp1_instruction: |-
        For this puzzle, drag all of the blocks together
        and click "Run" to watch it go!
      courseE_maze_ramp13_instruction: Time for one last puzzle to pull it all together!
      courseE_maze_ramp1_2018_instruction: |-
        For this puzzle, drag all of the blocks
        together and click "Run" to watch it go!
      courseE_maze_ramp2_instruction: |-
        Drag an extra `move forward` block out of
        the toolbox, then attach all blocks to `when run` to finish your code.
      courseE_maze_ramp2_2018_instruction: |-
        Drag an extra `move forward` block out
        of the toolbox, then attach all blocks to `when run` to finish your code.
      courseE_maze_ramp3_instruction: |-
        There is one extra block that is going to
        cause the bird to crash. Throw it away by dragging it back to the toolbox.
      courseE_maze_ramp3_2018_instruction: |-
        There is one extra block that is going
        to cause the bird to crash. Throw it away by dragging it back to the toolbox.
      courseE_maze_ramp4_instruction: Avoid TNT or feathers will fly!
      courseE_maze_ramp4_2018_instruction: Avoid TNT or feathers will fly!
      courseE_maze_ramp5_instruction: Avoid the TNT.
      courseE_maze_ramp5_2018_instruction: Avoid the TNT.
      courseE_maze_ramp6_instruction: |-
        "Keep calm and help me find the bad pig.
        Otherwise I might get angry!"
      courseE_maze_ramp6_2018_instruction: |-
        "Keep calm and help me find the bad
        pig. Otherwise I might get angry!"
      courseE_maze_ramp7_instruction: |-
        Use what you've learned to get the bird to
        the pig!
      courseE_maze_ramp7_2018_instruction: |-
        Use what you've learned to get the bird
        to the pig!
      courseE_maze_ramp_predict1_instruction: |-
        This code includes a new block. What
        do you think would happen if you press the "Run" block?
      courseE_multi_maze_ramp5_instruction: Avoid the TNT.
      courseE_playLab_challenge1_instruction: |-
        Something should happen when you get
        enough points or when you run out of points. Add some code to the `win game`
        and `lose game` functions to make the game work the way it should. \r
        Click
        the hints for ideas!
      courseE_playLab_challenge1_2018_instruction: |-
        Something should happen when
        you get enough points or when you run out of points. Add some code to the
        `win game` and `lose game` functions to make the game work the way it should.
        \r
        Click the hints for ideas!
      courseE_playLab_embedded_instruction: |-
        This is an example game you can play
        around with. Move the dog with your arrow keys. When the dog touches one of
        the cats, he scores a point! Score 5 points to win!
      courseE_playLab_exampleProject2_instruction: |-
        Here's all of your code to choose
        a card - try adding some other fun features!
      courseE_playLab_scaffold1_instruction: |-
        Choose a background and map, and pick
        an actor to be your game's hero.
      courseE_playLab_scaffold1_2018_instruction: |-
        Choose a background and map, and
        pick an actor to be your game's hero.
      courseE_playLab_scaffold2_instruction: |-
        Use event handlers and actions to make
        your hero move.
      courseE_playLab_scaffold2_2018_instruction: |-
        Use event handlers and actions
        to make your hero move.
      courseE_playLab_scaffold3_instruction: |-
        Add two or more additional actors to
        your game and make them move.
      courseE_playLab_scaffold3_2018_instruction: |-
        Add two or more additional actors
        to your game and make them move.
      courseE_playLab_scaffold4_instruction: |-
        Find some interesting ways to change
        the score in your game. Get the score to show something other than 0 to continue.
      courseE_playLab_scaffold4_2018_instruction: |-
        Find some interesting ways to
        change the score in your game. Get the score to show something other than
        0 to continue.
      courseE_playLab_scaffold5_instruction: |-
        Now spend some time making sure the
        game works the way you want. Include a way to win or lose your game, then
        play until you meet one of those conditions.
      courseE_playLab_scaffold5_2018_instruction: |-
        Now spend some time making sure
        the game works the way you want. Include a way to win or lose your game, then
        play until you meet one of those conditions.
      courseE_playLab_scaffold6_instruction: |-
        You've finished! Now you can play
        your game or share it with your friends and classmates!
      courseE_playLab_scaffold6_2018_instruction: |-
        You've finished! Now you can
        play your game or share it with your friends and classmates!
      courseE_playlab_challenge2_instruction: |-
        Can you figure out how this "Fortune
        Teller" app works? Click `MORE` to see your challenges.
      courseE_playlab_variables_challenge2_instruction: |-
        Can you figure out how this
        "Fortune Teller" app works? Click `MORE` to see your challenges.
      courseE_video_createFunctions_instruction: |-
        We don't have a video for creating
        functions, yet. This is a placeholder.
      courseE_video_createFunctions2_instruction: |-
        We don't have a video for creating
        functions, yet. This is a placeholder.
      courseE_video_createFunctions2_2018_instruction: |-
        We don't have a video for
        creating functions, yet. This is a placeholder.
      courseE_video_createFunctions_2018_instruction: |-
        We don't have a video for
        creating functions, yet. This is a placeholder.
      courseF_IceAge_1_instruction: |-
        Help Sid say "Hello!" by dragging the `actor
        1 say` block out and connecting it to the bottom of the `when run` event.
      courseF_IceAge_10_instruction: |-
        Use the `actor __ throw` command to have Sid
        (actor 1) throw hearts at Granny (actor 2) and set Granny's mood to happy
        when she gets hit with them.
      courseF_IceAge_11_instruction: 'Time to create your own game or story! '
      courseF_IceAge_2_instruction: |-
        Help Manny and Sid greet each other by using
        the the `actor ___ say` block twice.
      courseF_IceAge_3_instruction: |-
        Scrat is looking for his acorn! Can you help
        him move the last 200 pixels?
      courseF_IceAge_4_instruction: |-
        Connect a block to the `when actor touches`
        event to play a sound when Diego finds Manny.
      courseF_IceAge_5_instruction: |-
        Help Granny get some exercise by moving left
        and right repeatedly.
      courseF_IceAge_6_instruction: "Can you help Sid call for his friends when you\nclick
        on him? "
      courseF_IceAge_7_instruction: |-
        Write the code to help Scrat get all of the
        acorns!
      courseF_IceAge_8_instruction: |
        Can you finish this program to make it so that
        you both **play a sound** and **score a point** when Sid and Granny collide?
      courseF_IceAge_9_instruction: |-
        Change the scene to an icy background and set
        Sid’s (actor 1) speed to fast.
      courseF_IceAge_template_instruction: |-
        Write the code to help Scrat get all
        of the acorns!
      courseF_artist_embed_for7_instruction: |-
        Press Run to see a program in action!
        This one uses for loops.
      courseF_artist_embed_variables9_instruction: |-
        Press Run to see this program
        in action!
      courseF_artist_for1_instruction: |-
        Experiment with the `for` loop and play with
        the `counter` variable.
      courseF_artist_for10_instruction: |-
        Free Play: Try using the `counter` variable
        with other drawing elements to make magical images like this one.
      courseF_artist_for10_2018_instruction: |-
        Free Play: Try using the `counter`
        variable with other drawing elements to make magical images like this one.
      courseF_artist_for1_2018_instruction: |-
        Experiment with the `for` loop and play
        with the `counter` variable.
      courseF_artist_for2_instruction: |-
        Create this stack of triangles that goes
        from 50 pixel to 100 pixel sides.
      courseF_artist_for2_2018_instruction: |-
        Create this stack of triangles that
        goes from 50 pixel to 100 pixel sides.
      courseF_artist_for3_instruction: "These triangles go from 20 pixel sides to\n200
        pixel sides, and each triangle is 20 pixels larger than the last. "
      courseF_artist_for3_2018_instruction: "These triangles go from 20 pixel sides\nto
        200 pixel sides, and each triangle is 20 pixels larger than the last. "
      courseF_artist_for4_instruction: |
        These squares start at 15 pixels long. The
        largest is 300 pixels long, and each square is 15 pixels larger than the last.
      courseF_artist_for4_2018_instruction: "These squares start at 15 pixels long.\nThe
        largest is 300 pixels long, and each square is 15 pixels larger than the\nlast. "
      courseF_artist_for5_instruction: |-
        Just one little change to the code from the
        last image can create this drawing. Can you figure out what that change is?
      courseF_artist_for5_2018_instruction: |-
        Just one little change to the code from
        the last image can create this drawing. Can you figure out what that change
        is?
      courseF_artist_for6_instruction: |-
        Recreate your code from the last level, but
        turn 89 degrees to create this twisted square spiral.
      courseF_artist_for6_2018_instruction: |-
        Recreate your code from the last level,
        but turn 89 degrees to create this twisted square spiral.
      courseF_artist_for7_instruction: |-
        Make three small changes to the code from
        the last level to get this!
      courseF_artist_for7_2018_instruction: |-
        Make three small changes to the code
        from the last level to get this!
      courseF_artist_for8_instruction: |-
        Take the angle down to 72 degrees to get
        a spiraled pentagon.
      courseF_artist_for8_2018_instruction: |-
        Take the angle down to 72 degrees to
        get a spiraled pentagon.
      courseF_artist_for9_instruction: |-
        **Inspiration:**  Use the counter inside
        the `set alpha` block to get this faded center.
      courseF_artist_for9_2018_instruction: |-
        **Inspiration:**  Use the counter inside
        the `set alpha` block to get this faded center.
      courseF_artist_for_Template_instruction: |-
        Try using some of the code from the
        last level, but turning 89 degrees to create this twisted square spiral.
      courseF_artist_for_Template_2018_instruction: |-
        Try using some of the code from
        the last level, but turning 89 degrees to create this twisted square spiral.
      courseF_artist_for_challenge1_instruction: |-
        Can you figure out how to re-create
        this drawing?
      courseF_artist_for_challenge1_2018_instruction: |-
        Can you figure out how to
        re-create this drawing?
      courseF_artist_for_challenge2_instruction: |-
        Can you figure out how to re-create
        this drawing with a single loop?
      courseF_artist_for_challenge2_2018_instruction: |-
        Can you figure out how to
        re-create this drawing with a single loop?
      courseF_artist_fwp1_instruction: |-
        Edit the function 'draw a square' to find
        bugs.
      courseF_artist_fwp1_2018_instruction: |-
        Edit the function 'draw a square'
        to find bugs.
      courseF_artist_fwp2_instruction: |-
        Edit the function to accept a parameter called
        `length`.
      courseF_artist_fwp2_2018_instruction: |-
        Edit the function to accept a parameter
        called `length`.
      courseF_artist_fwp2_predict1_instruction: |-
        Edit the function to accept a parameter
        called `length`.
      courseF_artist_fwp2_predict1_2018_instruction: |-
        Edit the function to accept
        a parameter called `length`.
      courseF_artist_fwp3_instruction: |-
        Create a function called 'draw a square'
        and use it to outline these four boxes using parameters.
      courseF_artist_fwp3_2018_instruction: |-
        Create a function called 'draw a square'
        and use it to outline these four boxes using parameters.
      courseF_artist_fwp4_instruction: |-
        Edit this function to add a parameter for
        the number of sides in your polygon.
      courseF_artist_fwp4_2018_instruction: |-
        Edit this function to add a parameter
        for the number of sides in your polygon.
      courseF_artist_fwp5_instruction: "Use the function from the last puzzle to\ndraw
        this series of shapes.  "
      courseF_artist_fwp5_2018_instruction: "Use the function from the last puzzle\nto
        draw this series of shapes.  "
      courseF_artist_fwp6_instruction: |-
        Challenge: Edit `draw a spiral edge` to use
        `length` and `sides` parameters, then recreate these shapes.
      courseF_artist_fwp6_2018_instruction: |-
        Challenge: Edit `draw a spiral edge`
        to use `length` and `sides` parameters, then recreate these shapes.
      courseF_artist_fwp7_instruction: |-
        Finish off the `draw a spiral edge` function
        to also ask for a minimum length for the center of the spiral.
      courseF_artist_fwp7_2018_instruction: |-
        Finish off the `draw a spiral edge`
        function to also ask for a minimum length for the center of the spiral.
      courseF_artist_fwp8_instruction: |-
        Can you figure out how to make this drawing
        using the function that you just created?
      courseF_artist_fwp8_2018_instruction: |-
        Can you figure out how to make this
        drawing using the function that you just created?
      courseF_artist_fwp9_instruction: |-
        Freeplay: Draw something awesome! Play with
        the pen width to see how different your drawings look!
      courseF_artist_fwp9_2018_instruction: |-
        Freeplay: Draw something awesome! Play
        with the pen width to see how different your drawings look!
      courseF_artist_fwp_challenge1_instruction: |-
        Can you figure out how this program
        works?
      courseF_artist_fwp_challenge1_2018_instruction: |-
        Can you figure out how this
        program works?
      courseF_artist_fwp_challenge2_instruction: |-
        Use what you learned in the previous
        level to draw an image like this.
      courseF_artist_fwp_challenge2_2018_instruction: |-
        Use what you learned in the
        previous level to draw an image like this.
      courseF_artist_ramp10_instruction: |-
        Now, drag the code for the last triangle
        into a new loop to spin it around and make a snowflake!
      courseF_artist_ramp10_2018_instruction: |-
        Now, drag the code for the last triangle
        into a new loop to spin it around and make a snowflake!
      courseF_artist_ramp8_instruction: Now make a square using Artist!
      courseF_artist_ramp8_2018_instruction: Now make a square using Artist!
      courseF_artist_ramp9_instruction: Use what you've learned to draw this triangle.
      courseF_artist_ramp9_2018_instruction: |-
        Use what you've learned to draw this
        triangle.
      courseF_artist_variables1_instruction: |-
        Let's draw an equilateral triangle
        that is exactly 50 pixels long on each side.
      courseF_artist_variables10_instruction: "Here's your code from the last puzzle.
        \ Try\nediting the variable in other ways.  "
      courseF_artist_variables10_2018_instruction: "Here's your code from the last\npuzzle.
        \ Try editing the variable in other ways.  "
      courseF_artist_variables2_instruction: "Now draw three of those triangles right\nnext
        to each other.   "
      courseF_artist_variables2_2018_instruction: "Now draw three of those triangles\nright
        next to each other.   "
      courseF_artist_variables3_instruction: |-
        Move the length of 50 into a variable
        so we can use it in the next few puzzles.
      courseF_artist_variables3_2018_instruction: |-
        Move the length of 50 into a variable
        so we can use it in the next few puzzles.
      courseF_artist_variables4_instruction: |-
        Now, use the `length` variable to have
        the artist jump forward and down by `length` pixels between triangles.
      courseF_artist_variables4_2018_instruction: |-
        Now, use the `length` variable
        to have the artist jump forward and down by `length` pixels between triangles.
      courseF_artist_variables5_instruction: |-
        Add another set of loops at the end
        of your code to add three more triangles. This time, move forward and up!
      courseF_artist_variables5_2018_instruction: |-
        Add another set of loops at the
        end of your code to add three more triangles. This time, move forward and
        up!
      courseF_artist_variables6_instruction: "Now make the triangles to be 60 pixels\nwide,
        with 60 pixel jumps.  "
      courseF_artist_variables6_2018_instruction: "Now make the triangles to be 60\npixels
        wide, with 60 pixel jumps.  "
      courseF_artist_variables6a_instruction: |-
        Build this design where the squares
        have 80 pixel sides and the artist jumps 80 pixels over and down between each
        one.
      courseF_artist_variables6a_2018_instruction: |-
        Build this design where the squares
        have 80 pixel sides and the artist jumps 80 pixels over and down between each
        one.
      courseF_artist_variables7_instruction: 'Draw a triangle with 150 pixels sides.

'
      courseF_artist_variables7_2018_instruction: "Draw a triangle with 150 pixels\nsides. "
      courseF_artist_variables8_instruction: |-
        Rebuild the triangle code from the
        last puzzle, but this time use the `set length to` block to reset the `length`
        variable to `length`+10 at the end of each loop iteration.
      courseF_artist_variables8_2018_instruction: |-
        Rebuild the triangle code from
        the last puzzle, but this time use the `set length to` block to reset the
        `length` variable to `length`+10 at the end of each loop iteration.
      courseF_artist_variables9_instruction: |-
        See what happens when you repeat the
        code from the last puzzle 30 times instead of only 3!  Feel free to make your
        lines any color or pattern for some extra zest.
      courseF_artist_variables9_2018_instruction: |-
        See what happens when you repeat
        the code from the last puzzle 30 times instead of only 3!  Feel free to make
        your lines any color or pattern for some extra zest.
      courseF_artist_variablesFP_instruction: "**Freeplay:** Take what you've learned\nand
        make your own drawing. "
      courseF_artist_variablesFP_2018_instruction: "**Freeplay:** Take what you've\nlearned
        and make your own drawing. "
      courseF_artist_variables_10_instruction: "Here's your code from the last puzzle.
        \ Try\nediting the variable in other ways.  "
      courseF_artist_variables_2_instruction: |
        Now use another loop to draw three
        of those triangles right next to each other.   \r
        You can nest the code from
        your last puzzle inside.\r
      courseF_artist_variables_5_instruction: |-
        Add another set of loops at the end
        of your code to add three more triangles. This time, move forward and up!
      courseF_artist_variables_6_instruction: |-
        OOPS! We actually need the triangles
        to be 60 pixels wide, with 60 pixel jumps.  \r
        Aren't you glad you're using
        a variable?
      courseF_artist_variables_6a_instruction: |-
        Build this design where the squares
        have 80 pixel sides and the artist jumps 80 pixels over and down between each
        one.
      courseF_artist_variables_9_instruction: |-
        See what happens when you repeat the
        code from the last puzzle 30 times instead of only 3!\r
        \r
        Feel free to
        make your lines any color or pattern for some extra zest.
      courseF_artist_variables_FP_instruction: |-
        **Freeplay:** Take what you've learned
        and make your own drawing. \r
        \r
        How can you use variables with squares,
        pentagons, or hexagons?
      courseF_artist_variables_challenge1_instruction: |-
        Can you create a `length`
        variable and use it to create this pattern?
      courseF_artist_variables_challenge1_2018_instruction: |-
        Can you create a `length`
        variable and use it to create this pattern?
      courseF_artist_variables_challenge1a_instruction: |-
        You've now learned everything
        you need to know to make a pattern like this! This puzzle is meant to be difficult.  Can
        you stick with it until you figure out the solution?
      courseF_artist_variables_challenge2_instruction: |-
        You've now learned everything
        you need to know to make a pattern like this!
      courseF_artist_variables_challenge2_2018_instruction: |-
        You've now learned
        everything you need to know to make a pattern like this!
      courseF_artistembed_variables9_instruction: |-
        See what happens when you repeat
        the code from the last puzzle 30 times instead of only 3!  Feel free to make
        your lines any color or pattern for some extra zest.
      courseF_bee_conditionals10_instruction: |-
        Collect all of the nectar and make
        all of the honey.
      courseF_bee_conditionals10_2018_instruction: |-
        Collect all of the nectar and
        make all of the honey.
      courseF_bee_conditionals1_predict1_instruction: |-
        Check to see if there's a
        flower under the cloud. If there's a flower, get nectar.
      courseF_bee_conditionals1_predict1_2018_instruction: |-
        Check to see if there's
        a flower under the cloud. If there's a flower, get nectar.
      courseF_bee_conditionals2_instruction: "Check underneath each cloud to see\nif
        it is hiding a flower before you get nectar.  "
      courseF_bee_conditionals2_2018_instruction: "Check underneath each cloud to\nsee
        if it is hiding a flower before you get nectar.  "
      courseF_bee_conditionals3_instruction: 'Help the bee collect all of the nectar.

'
      courseF_bee_conditionals3_2018_instruction: "Help the bee collect all of the\nnectar. "
      courseF_bee_conditionals4_instruction: |-
        Get all of the nectar using as few
        blocks as possible.
      courseF_bee_conditionals4_2018_instruction: |-
        Get all of the nectar using as
        few blocks as possible.
      courseF_bee_conditionals5_instruction: |-
        Collect all of the nectar using as
        few blocks as possible
      courseF_bee_conditionals5_2018_instruction: |-
        Collect all of the nectar using
        as few blocks as possible
      courseF_bee_conditionals7_predict2_instruction: |-
        Use the `if/else` block to
        collect nectar at flowers and make honey at honeycomb.
      courseF_bee_conditionals7_predict2_2018_instruction: |-
        Use the `if/else` block
        to collect nectar at flowers and make honey at honeycomb.
      courseF_bee_conditionals8_instruction: |-
        Collect nectar if there is a flower.\r
        Otherwise,
        make honey (because there is a honeycomb).
      courseF_bee_conditionals8_2018_instruction: |-
        Collect nectar if there is a flower.\r
        Otherwise,
        make honey (because there is a honeycomb).
      courseF_bee_for1_instruction: |-
        Collect the nectar from each flower using the
        fewest blocks possible.
      courseF_bee_for10_instruction: "**Challenge:** Take what you've learned about\n`for`
        loops and try to solve this problem. "
      courseF_bee_for10_2018_instruction: "**Challenge:** Take what you've learned\nabout
        `for` loops and try to solve this problem. "
      courseF_bee_for11_instruction: |-
        What should your increment be to collect 15,
        then 12, then 9, 6, 3 nectar?
      courseF_bee_for11_2018_instruction: |-
        What should your increment be to collect
        15, then 12, then 9, 6, 3 nectar?
      courseF_bee_for1_2018_instruction: |-
        Collect the nectar from each flower using
        the fewest blocks possible.
      courseF_bee_for2_instruction: |-
        Write the code to help the bee collect all of
        the nectar.
      courseF_bee_for2_2018_instruction: |-
        Write the code to help the bee collect
        all of the nectar.
      courseF_bee_for3_instruction: |-
        Try this puzzle using the `for` loop and the
        `counter` variable to see how much shorter your code becomes.
      courseF_bee_for4_instruction: Help the bee collect all of the nectar.
      courseF_bee_for4_2018_instruction: Help the bee collect all of the nectar.
      courseF_bee_for5_instruction: |-
        Use the `counter` variable twice to solve this
        puzzle.
      courseF_bee_for5_2018_instruction: |-
        Use the `counter` variable twice to solve
        this puzzle.
      courseF_bee_for6_instruction: |-
        Try gathering this nectar by counting down from
        5 to 1 by 1.
      courseF_bee_for6_2018_instruction: |-
        Try gathering this nectar by counting down
        from 5 to 1 by 1.
      courseF_bee_for7_instruction: |-
        Try collecting these flowers using an increment
        of 2.
      courseF_bee_for7_2018_instruction: |-
        Try collecting these flowers using an increment
        of 2.
      courseF_bee_for8_instruction: |-
        You've got this! What should your increment
        be to collect 3, 6, 9, 12, 15 nectar?
      courseF_bee_for8_2018_instruction: |-
        You've got this! What should your increment
        be to collect 3, 6, 9, 12, 15 nectar?
      courseF_bee_for9_instruction: |-
        Use the `counter` variable to navigate this
        garden with the fewest number of blocks possible.
      courseF_bee_for9_2018_instruction: |-
        Use the `counter` variable to navigate
        this garden with the fewest number of blocks possible.
      courseF_bee_for_challenge1_instruction: "Use this `for loop` to collect all\nof
        the nectar. "
      courseF_bee_for_challenge1_2018_instruction: "Use this `for loop` to collect\nall
        of the nectar. "
      courseF_bee_for_challenge2_instruction: |-
        Solve this puzzle using the fewest
        number of blocks possible.
      courseF_bee_for_challenge2_2018_instruction: |-
        Solve this puzzle using the fewest
        number of blocks possible.
      courseF_bee_for_challenge3_instruction: |-
        Solve this puzzle using the fewest
        number of blocks possible.
      courseF_bee_functions2_instruction: |-
        Use the `get only nectar` function to
        collect the nectar from each flower.
      courseF_bee_functions2_2018_instruction: |-
        Use the `get only nectar` function
        to collect the nectar from each flower.
      courseF_bee_functions3_instruction: |-
        Click "edit" to put code inside the
        `only make honey` function, then use it to solve this puzzle.
      courseF_bee_functions3_2018_instruction: |-
        Click "edit" to put code inside
        the `only make honey` function, then use it to solve this puzzle.
      courseF_bee_functions3a_instruction: |-
        Write a function that gets nectar if
        the bee is at a flower, otherwise it gets honey.  Use your function to solve
        the puzzle!
      courseF_bee_functions3a_2018_instruction: |-
        Write a function that gets nectar
        if the bee is at a flower, otherwise it gets honey.  Use your function to
        solve the puzzle!
      courseF_bee_functions4_instruction: "Funcţia \"mută şi obține nectar\" face
        albina să se întoarcă, să colecteze nectar şi apoi returnează albina la locul
        de unde a început. Folosește \nfuncţia pentru a colecta tot nectarul."
      courseF_bee_functions4_2018_instruction: "Funcţia \"mută şi obține nectar\"
        face albina să se întoarcă, să colecteze nectar şi apoi returnează albina
        la locul de unde a început. Folosește \nfuncţia pentru a colecta tot nectarul."
      courseF_bee_functions5_instruction: |-
        Now write the function to collect nectar
        from the flowers.
      courseF_bee_functions5a_instruction: |-
        Use the `move and check` function to
        collect all of the nectar.
      courseF_bee_functions5a_2018_instruction: |-
        Use the `move and check` function
        to collect all of the nectar.
      courseF_bee_functions6_instruction: |-
        Help the bee through the maze by turning
        left at flowers and right at honeycomb.
      courseF_bee_functions6_2018_instruction: |-
        Help the bee through the maze by
        turning left at flowers and right at honeycomb.
      courseF_bee_functions7_instruction: |-
        Rebuild your function from the last puzzle
        to solve this maze.
      courseF_bee_functions7_2018_instruction: |-
        Rebuild your function from the last
        puzzle to solve this maze.
      courseF_bee_functions8a_instruction: |-
        Collect all the nectar or make all of
        the honey!
      courseF_bee_functions8a_2018_instruction: |-
        Collect all the nectar or make all
        of the honey!
      courseF_bee_functionsPre7_instruction: |-
        Now try building a function to solve
        this maze.  How is it different from last time?
      courseF_bee_functionsPre7_2018_instruction: |-
        Now try building a function to
        solve this maze.  How is it different from last time?
      courseF_bee_functions_challenge1_instruction: |-
        Create a new function to collect
        all the nectar and honey while there is a path ahead.
      courseF_bee_functions_challenge1_2018_instruction: |-
        Create a new function to
        collect all the nectar and honey while there is a path ahead.
      courseF_bee_functions_challenge2_instruction: |-
        Use everything you have learned
        to complete this puzzle!
      courseF_bee_functions_challenge2_2018_instruction: |-
        Use everything you have
        learned to complete this puzzle!
      courseF_bee_functions_challenge2_recursion_instruction: |-
        Collect all the nectar
        or make all of the honey!
      courseF_bee_fwp2_instruction: |-
        Pull this code into a function, then call the
        function to check this row for nectar.
      courseF_bee_fwp2_2018_instruction: |-
        Pull this code into a function, then call
        the function to check this row for nectar.
      courseF_bee_fwp3_instruction: |-
        Let's see if the function makes collecting
        these three rows of nectar any easier.
      courseF_bee_fwp3_2018_instruction: |-
        Let's see if the function makes collecting
        these three rows of nectar any easier.
      courseF_bee_fwp4_instruction: |-
        Add a `length` parameter to the function so
        that it will still work when the row is a different length.
      courseF_bee_fwp4_2018_instruction: |-
        Add a `length` parameter to the function
        so that it will still work when the row is a different length.
      courseF_bee_fwp5_instruction: Use this function to collect the nectar.
      courseF_bee_fwp5_2018_instruction: Use this function to collect the nectar.
      courseF_bee_fwp6_instruction: Build a short and sweet solution to this puzzle.
      courseF_bee_fwp6_2018_instruction: |-
        Build a short and sweet solution to this
        puzzle.
      courseF_bee_fwp7_instruction: |-
        **Challenge:** Modify your function to make
        honey as well.
      courseF_bee_fwp7_2018_instruction: |-
        **Challenge:** Modify your function to
        make honey as well.
      courseF_bee_fwp8_instruction: Use your new function to solve this spiral.
      courseF_bee_fwp8_2018_instruction: Use your new function to solve this spiral.
      courseF_bee_fwp9_instruction: Use your new function to solve this puzzle.
      courseF_bee_fwp9_predict1_instruction: |-
        Use your new function to solve this
        puzzle.
      courseF_bee_fwp9_predict1_2018_instruction: |-
        Use your new function to solve
        this puzzle.
      courseF_bee_fwp_challenge1_instruction: |-
        Use one `for loop` in a function with
        a `length` parameter to collect all of the corn.
      courseF_bee_fwp_challenge1_2018_instruction: |-
        Use one `for loop` in a function
        with a `length` parameter to collect all of the corn.
      courseF_bee_fwp_challenge2_instruction: "Use one `for loop` in a function with\na
        `length` parameter to collect all of the vegetables in each row. "
      courseF_bee_fwp_challenge2_2018_instruction: "Use one `for loop` in a function\nwith
        a `length` parameter to collect all of the vegetables in each row. "
      courseF_farmer_ramp11_instruction: |-
        This puzzle also uses nested loops.  Can
        you figure out how?
      courseF_farmer_ramp11_2018_instruction: |-
        This puzzle also uses nested loops.  Can
        you figure out how?
      courseF_maze_predict1_instruction: |-
        This code includes a new block. What do
        you think would happen if you press the "Run" block?
      courseF_maze_ramp13_instruction: |-
        Time for another Angry Birds puzzle to pull
        it all together!
      courseF_maze_ramp15_instruction: |-
        Use what you've learned to get the bird
        to the pig!
      courseF_maze_ramp4_instruction: Avoid TNT or feathers will fly!
      courseF_maze_ramp4_2018_instruction: Avoid TNT or feathers will fly!
      courseF_maze_ramp5_instruction: Avoid the TNT.
      courseF_maze_ramp5_2018_instruction: Avoid the TNT.
      courseF_maze_ramp6_instruction: |-
        "Keep calm and help me find the bad pig.
        Otherwise I might get angry!"
      courseF_maze_ramp6_2018_instruction: |-
        "Keep calm and help me find the bad
        pig. Otherwise I might get angry!"
      courseF_maze_ramp7_instruction: |-
        Use what you've learned to get the bird to
        the pig!
      courseF_playlab_embed_vars_instruction: |-
        Answer Pegleg the Pirate's questions.
        What happens if you enter the codename "password"? What about some other
        code name?
      courseF_playlab_variables0_instruction: |-
        This is Pirate Pegleg.  He's awfully
        hard to understand these days!
      courseF_playlab_variables1_instruction: |-
        This is Pirate Pegleg.  He's awfully
        hard to understand these days!
      courseF_playlab_variables1a_instruction: |-
        Variables can be used to store text
        that you want to use later.  Have Kiki, the soccer player,  scream "Goal!"
        by assigning that text to the `shout` variable.
      courseF_playlab_variables1a_2018_instruction: |-
        Variables can be used to store
        text that you want to use later.  Have Kiki, the soccer player,  scream "Goal!"
        by assigning that text to the `shout` variable.
      courseF_playlab_variables2_instruction: |
        Now, decode Pirate Pegleg's speech
        by changing the value of the variables in just two places! \r
      courseF_playlab_variables2a_instruction: |
        Now, decode Pirate Pegleg's speech
        by changing the value of the variables in just two places! \r
      courseF_playlab_variables2b RYAN CLONE_instruction: |-
        Insert the variable `color`
        into the middle of a sentence by putting it into the empty slot in the `join`
        block.
      courseF_playlab_variables2b_instruction: |-
        Insert the variable `color` into
        the middle of a sentence by putting it into the empty slot in the `join` block.
      courseF_playlab_variables2b_2018_instruction: |-
        Insert the variable `color`
        into the middle of a sentence by putting it into the empty slot in the `join`
        block.
      courseF_playlab_variables3_instruction: |-
        The `ask` block will automatically
        store whatever the user answers into the variable of your choice.
      courseF_playlab_variables3b_instruction: "Help Kiki have a conversation with\nBrian
        by using the variable `age` in all of the places where age `12` should\nbe
        used. "
      courseF_playlab_variables3bEdit_instruction: "Help Kiki have a conversation\nwith
        Brian by using the variable `A1` in all of the places where age `12`\nshould
        be used. "
      courseF_playlab_variables3b_josh_instruction: "Help Kiki have a conversation\nwith
        Brian by using the variable `age` in all of the places where age `12`\nshould
        be used. "
      courseF_playlab_variables3b_josh_2018_instruction: "Help Kiki have a conversation\nwith
        Brian by using the variable `age` in all of the places where age `12`\nshould
        be used. "
      courseF_playlab_variables4_instruction: |-
        Can you find the correct variable
        in the toolbox to fill in the slot?
      courseF_playlab_variables4b_instruction: |-
        Put the variables in the correct
        places to create this conversation.
      courseF_playlab_variables4b_2018_instruction: |-
        Put the variables in the correct
        places to create this conversation.
      courseF_playlab_variables5_instruction: |-
        Can you find the correct variable
        in the toolbox to fill in the slot?
      courseF_playlab_variables5b_instruction: |-
        Put all of the variables in the correct
        place so that Pegleg's story makes sense.
      courseF_playlab_variables5c RYAN Copy_instruction: |-
        Let's combine the `ask`
        block with an `if/else` statement to make a game!
      courseF_playlab_variables5c_instruction: |-
        Let's combine the `ask` block with
        an `if/else` statement to have some fun!
      courseF_playlab_variables5c_2018_instruction: |-
        Let's combine the `ask` block
        with an `if/else` statement to have some fun!
      courseF_playlab_variables6b_instruction: |-
        Join the variables together to make
        a fun story that takes more than one speech bubble to tell.
      courseF_playlab_variables6c_instruction: |-
        In the rest of this stage, we're
        going to build a game that you control!
      courseF_playlab_variables6c_2018_instruction: |-
        In the rest of this stage, we're
        going to build a game that you control!
      courseF_playlab_variables7b_instruction: |-
        Create some questions and weave the
        answers together into your very own story.
      courseF_playlab_variables7b_2018_instruction: |-
        Create some questions and weave
        the answers together into your very own story.
      courseF_playlab_variables7c_instruction: |-
        Make the game do something by asking
        the user to guess a color.
      courseF_playlab_variables7c_2018_instruction: |-
        Make the game do something by
        asking the user to guess a color.
      courseF_playlab_variables8b_instruction: |-
        Use what you've learned to create
        an improv scene between the actors.
      courseF_playlab_variables8c_instruction: |-
        Use the variables to make the game
        more personal.
      courseF_playlab_variables8c_2018_instruction: |-
        Use the variables to make the
        game more personal.
      courseF_playlab_variables_challenge1_instruction: "Use these blocks to make\nthe
        actors share a knock-knock joke. "
      courseF_playlab_variables_challenge1_2018_instruction: "Use these blocks to\nmake
        the actors share a knock-knock joke. "
      courseF_playlab_variables_challenge2_instruction: |-
        This game will use variables
        to keep track of points.  Tag Cat to get 2 points. Tag Penguin to get 3 points.  When
        Cat and Penguin touch, take points away. Get exactly 10 points to win!
      courseF_playlab_variables_challenge2_2018_instruction: |-
        This game will use
        variables to keep track of points.  Tag Cat to get 2 points. Tag Penguin to
        get 3 points.  When Cat and Penguin touch, take points away. Get exactly 10
        points to win!
      courseF_playlab_variables_challenge3_instruction: |-
        Can you figure out how this
        "Fortune Teller" app works? Click `MORE` to see your challenges.
      courseF_video_createFunctions_instruction: |-
        We don't have a video for creating
        functions, yet. This is a placeholder.
      courseF_video_createFunctions_2018_instruction: |-
        We don't have a video for
        creating functions, yet. This is a placeholder.
      course_playlab_variables1_instruction: |-
        This is Pirate Pegleg.  He's awfully
        hard to understand these days!
      course_playlab_variables2_instruction: |
        Now, decode Pirate Pegleg's speech
        by changing the value of the variables in just two places! \r
      course_playlab_variables3_instruction: |
        Now, decode Pirate Pegleg's speech
        by changing the value of the variables in just two places! \r
      coursea_maze_ramp1_2018_instruction: |-
        For this puzzle, snap the blocks together
        and click "Run"!
      coursef_explore_CYOA_Witch_instruction: |-
        You can do whatever you want in play
        lab! Here's an example of choose your own adventure story in play lab.
      coursef_explore_playlab2_instruction: |-
        You can do whatever you want in play
        lab! Here's an example of story in play lab.
      coursef_explore_playlab_cat_game_instruction: |-
        You can do whatever you want
        in play lab! Here's an example of game you can make.
      coursef_maze_ramp3_instruction: |-
        There is one extra block that is going to
        cause the bird to crash. Throw it away by dragging it back to the toolbox.
      coursef_maze_ramp3_2018_instruction: |-
        There is one extra block that is going
        to cause the bird to crash. Throw it away by dragging it back to the toolbox.
      drawings!_instruction: |-
        Draw the equilateral triangle - all the sides are the
        same!
      eventsIntro_instruction: Need a better playlab/events combo
      flappy_1_instruction: Atașează un bloc la blocul "când clic", apoi apasă "Rulează
        Programul". Fă clic sau bate ușor cu degetul pe ecran ca să îl muți pe Flappy
        la țintă.
      flappy_11_instruction: Creați-vă propriul joc Flappy. Puteţi schimba toate aspectele
        vizuale şi toate regulile, chiar şi gravitația. Când aţi terminat, faceţi
        clic pe Terminare pentru a permite prietenilor să încerce jocul pe telefoanele
        lor.
      flappy_11_2018_instruction: |-
        Create your own Flappy game. You can change all
        the visuals and all the rules, even the gravity. When you're done, click
        Finish to let friends try your game on their phones.
      flappy_1_2018_instruction: |-
        Attach a block to the "when click" block, then
        press "Run". Click or tap the screen to move Flappy to the target.
      flappy_2_instruction: Acum am adăugat și ceva teren.  Ataşează un bloc la blocul
        "când ajunge la sol".  Codul tău trebuie să se încheie cu "Sfârşitul jocului"
        atunci când Flappy se prăbușește.
      flappy_2_2018_instruction: |-
        Now we've added some ground.  Attach a block to
        the "when hit the ground" block.  Your code needs to 'END GAME' when Flappy
        crashes.
      flappy_3_instruction: Blocul "când rulează" îți permite să rulezi codul atunci
        când îți începe jocul.  Încearcă să setezi nivelul vitezei şi a datului din
        aripi către ţintă.
      flappy_3_2018_instruction: |-
        The "when run" block allows you to run code when
        your game starts.  Try setting the level speed and flapping to the target.
      flappy_4_instruction: Flappy va zbura printre obstacole dacă nu scrii codul
        pentru a-l face să se accidenteze. Ataşează un bloc la blocul "când lovește
        un obstacol". Codul tău trebuie să se încheie cu "Sfârşitul jocului" atunci
        când Flappy s-a prăbuşit în primul set de conducte.
      flappy_4_2018_instruction: |-
        Flappy will fly through obstacles unless you write
        code to make him crash. Attach a block to the "when hit an obstacle" block.
        Your code needs to 'END GAME' when Flappy crashes into the first set of
        pipes.
      flappy_5_instruction: Hai să adăugăm un tabel de scor, și numărător puncte atunci
        când Flappy trece de obstacole. Adaugă-le la blocul "când trece de un obstacol",
        și apoi înscrie un punct de scor zburându-l pe Flappy prin primul set de conducte.
      flappy_5_2018_instruction: |-
        Let's add a scoreboard, and count points when
        Flappy makes it past obstacles. Add to the "when pass an obstacle" block,
        and then score a point by flying Flappy through the first set of pipes.
      flappy_6_instruction: Verifică dacă încă mai poți înscrie un punct după ce-l
        faci pe Flappy să dea din aripi mai mult sau mai puțin.
      flappy_6_2018_instruction: |-
        See if you can still score a point after making
        Flappy flap either a smaller or larger amount.
      flappy_7_instruction: Apoi, încercaţi să schimbaţi scena prin ataşarea unui
        alt bloc la blocul "atunci când rulaţi".
      flappy_7_2018_instruction: |-
        Next, try changing the scene by attaching another
        block to the "when run" block.
      flappy_8_instruction: Poți seta vizuale oricând, nu doar atunci când începe
        jocul. Încearcă să setezi o scenă aleatorie când alte incidente se întâmplă.
      flappy_8_2018_instruction: |-
        You can set visuals anytime, not just when the
        game starts. Try setting a RANDOM scene when other events happen, for example,
        when passing an obstacle.
      flappy_9_instruction: Pentru diversitate, în locul opririi jocului, încearcă
        setarea scorului la 0 atunci când lovești un obstacol.
      flappy_9_2018_instruction: Pentru diversitate, în locul opririi jocului, încearcă
        setarea scorului la 0 atunci când lovești un obstacol.
      frozen circle function in circle_instruction: Acum haideți să creăm 20 de cercuri
        suprapuse, rotind 18 grade după fiecare cerc.
      frozen circle function with parameter_instruction: Aici este un bloc "Creează
        cerc", care poate face cercuri de diferite dimensiuni. Îl poţi folosi pentru
        a crea un mic cerc cu dimensiunea de 5 şi un cerc mai mare de dimensiune 10?
      frozen circle function_instruction: Utilizează noul bloc "Creează cerc" pentru
        a realiza 10 cercuri suprapuse. Nu uita să "sari înainte" printre cercuri.
      frozen circle_instruction: Un cerc este o formă specială. Poți să intuiești
        cu ce număr să înlocuim semnele de întrebare pentru a desena un cerc?
      frozen cross rotate dense_instruction: 'Hai să îl repetăm de 90 de ori! De câte
        ori intră 90 în 360? Sugestie: Este un număr chiar foarte mic.'
      frozen cross rotate_instruction: Acum, încearcă să îl repeți de 10 ori. Câte
        grade trebuie să rotești între fiecare linie?
      frozen cross_instruction: Impachetati un bloc "repetare" pentru aceste comenzi
        sa creati un semn plus. Ati observat ca Elsa poate merge si inainte si inapoi?
      frozen diamond mini snowflake_instruction: Stiai ca fiecare fulg de nea are
        o forma diferita? Haideti sa realizam un fulg de nea folosind inca un bloc
        'Repeta' pentru a repeta un paralelogram de 4 ori, intorcandu-te la dreapta
        cu 90 de grade intre fiecare paralelogram.
      frozen diamond snowflake_instruction: Acum, hai să creăm un fulg de zăpadă nou
        utilizând blocul de repetare pentru a repeta un paralelogram de 10 ori, rotind
        la dreapta cîte 36 de grade între fiecare dintre ele.
      frozen diamond_instruction: |-
        Utilizati un blocul repeta pentru a crea un paralelogram.
        Este la fel ca un dreptunghi dar are unghiuri diferite. Acesta are unghi de 60 de grade si de 120 in loc sa aiba toate unghiurile de 90 de grade.
      frozen freeplay_instruction: Ai devenit oficial un artist maestru! Creează un
        paradis de iarnă.
      frozen line_instruction: Salutare! Eu sunt Elsa din Arendelle. Ajută-mă să creez
        o singură linie.
      frozen perpendicular_instruction: Acum, hai să vedem dacă putem crea două linii
        care formează un unghi de 90 de grade. Va trebui să folosești blocul ”Întoarce”
        precum și blocul ”Mută”.
      frozen snowflake branch_instruction: Încearcă să folosești blocul "Creează ramură
        de fulg de nea" pentru a realiza trei ramuri, care încep să arate ca un fulg
        de nea.
      frozen snowflake full_instruction: Acum hai să îl repetăm de 8 ori pentru a
        face un fulg de nea frumos!
      frozen snowflower_instruction: Modele complicate zăpadă pot fi create cu forme
        foarte simple. Poţi crea un model prin repetarea a 5 cercuri de dimensiunea
        5 şi 5 cercuri de dimensiunea 10?
      frozen square iterative_instruction: Se pare că am parcurs jumătate de drum
        în crearea unui pătrat. Hai să punem 4 linii împreună pentru a crea un pătrat.
      frozen square loop 3x_instruction: Hai să creăm trei pătrate, rotind după fiecare
        pătrat. Asigură-te că rotești cu 120 de grade înainte de fiecare pătrat nou.
      frozen square loop_instruction: Salutare! Eu sunt Anna din Arendelle. Hai să
        facem un pătrat cu blocul "Repetă", care folosește mai puține blocuri. De
        câte ori (???) ar trebui ca blocul "Repetă" să bucleze blocurile în interiorul
        său pentru a crea un pătrat?
      frozen square snowflake_instruction: Poţi crea un fulg de zăpadă folosind blocul
        "Repetă" pentru a face un pătrat de 10 ori, precum și blocul "Întoarce" pentru
        a se roti cu 36 de grade între fiecare pătrat?
      grade1_adventurer_loops1_instruction: Four piles of gold!  Collect all four.
      grade1_adventurer_loops10_instruction: |-
        Help me get all of the gold from this
        cave.
      grade1_adventurer_loops2_instruction: |-
        How can Laurel collect all five piles
        of gold using only one `E -->` block?
      grade1_adventurer_loops3_instruction: |-
        Can you fix Laurel's path to get all
        of this gold?
      grade1_adventurer_loops4_instruction: "Add to the code from the last puzzle\nto
        get all of the gold. "
      grade1_adventurer_loops5_instruction: |-
        What should you add to this code to
        get all of the gold?
      grade1_adventurer_loops6_instruction: Write the code to get all of this gold.
      grade1_adventurer_loops7_challenge_instruction: |-
        **Challenge: ** The gold goes
        all the way down these stairs!  Write the code to help me get it all.
      grade1_adventurer_loops8_challenge_instruction: |-
        Challenge: Try this staircase
        now! It has an extra spike at the end you'll have to climb.
      grade1_adventurer_loops9_instruction: |-
        Help me get the gold from this deep
        valley.
      grade1_adventurer_loopsFP_instruction: |-
        Eureka!  Collect as much gold as you
        can!
      grade1_adventurer_loopsPre_instruction: |-
        This is Laurel the Adventurer!  Can
        you move her around and get gold?
      grade1_artist_loops1_instruction: |-
        The Artist is trying to draw a line six
        times, but can't get it right.  Can you help?
      grade1_artist_loops2_instruction: |-
        Help the artist draw a line 7 times to make
        a garden wall.
      grade1_artist_loops3_instruction: "Now we need to get the soil ready to plant.\nFind
        the bugs in the code and help the artist prepare the ground. "
      grade1_artist_loops4_instruction: |-
        Time to fix the stairs!  Repeat this pattern
        five times so the artist can reach the top of the bushes.
      grade1_artist_loops5_instruction: |-
        Behind the bushes there is a beautiful vine
        full of flowers.  Can you climb the vine and see where it goes?
      grade1_artist_loops6_instruction: |-
        **Challenge:**  It's a hidden garden! Let's
        walk around.
      grade1_artist_loops7_instruction: |-
        The flowers down here are so pretty.  Let's
        take a closer look.
      grade1_artist_loops7a_instruction: |-
        **Challenge:**  Lovely! Let's take a walk
        around the garden.
      grade1_artist_loops7b_instruction: |-
        Time to head home. Can you fix this ladder
        to help the artist get down?
      grade1_artist_loops8_instruction: |-
        Let's take the short way home, over the
        pond. Can you help the artist stay on the stones?
      grade1_artist_loops9_instruction: I still need a story for this puzzle
      grade1_artist_loopsFP_instruction: |-
        Use what you have learned to draw a picture
        of what you think the artist saw when he got home.
      grade1_maze_sequence1_instruction: Modifică secvenţa de cod pentru a mă duce
        la porc!
      grade1_maze_sequence10_instruction: Move me around the TNT to get to the pig.
      grade1_maze_sequence2_instruction: Modifică secvenţa de cod pentru a mă duce
        la porc!
      grade1_maze_sequence3_instruction: |
        Can you add 2 blocks to get the bird to
        the pig.
      grade1_maze_sequence4_instruction: Now try this puzzle from the start!
      grade1_maze_sequence5_instruction: |-
        Move one way, then another to get me to
        the pig!
      grade1_maze_sequence6_instruction: |-
        Figure out what is missing and then add
        blocks to get me to the pig!
      grade1_maze_sequence7_instruction: |-
        Your turn!  What do you need to do to get
        the bird to the pig?
      grade1_maze_sequence8_instruction: |-
        Debug this level by adding blocks to get
        me to the pig!
      grade1_maze_sequence9_instruction: 'Go around the TNT to get me to the pig!

'
      grade1_maze_sequenceA_instruction: |-
        Challenge: Move me around the TNT to get
        to the pig.
      grade1_maze_sequenceB_instruction: Fix the bugs to get the bird to the pig.
      grade1_maze_sequenceC_instruction: It's all you!  Get the bird to the pig.
      grade1_maze_sequenceD_instruction: 'It''s a pig party!  Get those pigs! '
      grade1_playlab_events1_instruction: |-
        This game is called "Play Lab".  See
        if you can figure out what each block does.
      grade1_playlab_events1a_instruction: |-
        Make your robot say "Hello!" when the
        button is clicked.
      grade1_playlab_events2_instruction: |-
        This program makes Robin fly.  Can you
        get her to vanish when you click her?
      grade1_playlab_events2a_instruction: |-
        Edit the code so that when the second
        bird is clicked, your program plays a sound!
      grade1_playlab_events3_instruction: |
        This program makes Robin fly.  Can you
        make the robot jump when you press the up button?\r
      grade1_playlab_events3a_instruction: |-
        When the third bird is clicked, the background
        should change to a city. Can you add code to make this happen?
      grade1_playlab_events4_instruction: |-
        Add a block to make Robin vanish when
        she collides with the robot.
      grade1_playlab_events4a_instruction: |-
        Add code to make something happen when
        the fourth bird is clicked. Be creative!
      grade1_playlab_events5_instruction: |-
        Add a block to the 'when run' event
        that starts the dragon flying.
      grade1_playlab_events5a_instruction: |-
        About My Robot Project! Write code so
        that clicking on each bird shows a new fact about your robot.
      grade1_playlab_events6_instruction: |-
        Add a block to the 'when actor 1 clicked'
        event that makes the dragon return to the middle of the screen.
      grade1_playlab_events7_instruction: |-
        Add a block so that when you push the
        left arrow button, the knight surges toward the dragon.
      grade1_playlab_events8_instruction: |-
        Add a block so that when the knight collides
        with the dragon, it plays a sound.
      grade1_playlab_events9 RYAN COPY_instruction: |-
        Now, have Robin wait a second,
        then come back after she vanishes.
      grade1_playlab_events9_instruction: |-
        Now, add a block to keep score each time
        the knight hits the dragon.
      grade1_playlab_eventsFP_instruction: |-
        Use your imagination. What can you do
        to make this game more fun?
      grade1_sequence_pre_instruction: |-
        Play with these blocks to see what they make
        the bird do!
      grade1_video_frustrationRainbow_instruction: |-
        This video describes the rainbow
        of frustration and introduces persistence.
      grade2_CaringForNewPet_0_instruction: |-
        For this puzzle, drag all of the blocks
        together and click "Run" to watch it go!
      grade2_CaringForNewPet_1_instruction: |-
        Drag an extra `move forward` block out
        of the toolbox to finish your code.
      grade2_CaringForNewPet_10_instruction: Du-mă la porc!
      grade2_CaringForNewPet_11_instruction: |-
        "Keep calm and help me find the bad
        pig."
      grade2_CaringForNewPet_2_instruction: |-
        "This pig is ruffling my feathers."\r
        \r
        There
        is one extra block that is going to cause the bird to crash. Throw it away
        by dragging it back to the toolbox.
      grade2_CaringForNewPet_2courseC_maze_programming3_instruction: |-
        There is one
        extra block that is going to cause the bird to crash. Throw it away by dragging
        it back to the toolbox.
      grade2_CaringForNewPet_3_instruction: |-
        "Trace the path and lead me to the
        silly pig. Avoid TNT or feathers will fly!"
      grade2_CaringForNewPet_3D_instruction: |-
        "Follow this path to get me to the
        pig!"
      grade2_CaringForNewPet_4_instruction: |-
        "Keep calm and help me find the bad
        pig. Otherwise I might get angry!"
      grade2_CaringForNewPet_5_instruction: Du-mă la porc!
      grade2_CaringForNewPet_6_instruction: |-
        Challenge: Guide me to the green evilness!
        (Watch out for TNT)
      grade2_CaringForNewPet_7D_instruction: |-
        Challenge: This code has a lot of bugs.
        You'll need to remove blocks and add blocks.
      grade2_MakeDogTag_1_instruction: |-
        Drag blocks onto the screen to have the artist
        draw over the grey lines in the picture. (Each line is 100 pixels long)
      grade2_MakeDogTag_10_instruction: Deseneaza ceva distractiv!
      grade2_MakeDogTag_2_instruction: |-
        This spaceship needs a window!\r
        \r
        Each
        side of the inner square is 100 pixels and all of the angles are 90 degrees.
      grade2_MakeDogTag_3_instruction: Ajută-mă să termin casa pentru această pisică.
      grade2_MakeDogTag_4_instruction: 'Această casă are nevoie de un acoperiş! Desenează
        triunghiul.  Sugestie: toate trei laturile au aceeaşi lungime.'
      grade2_MakeDogTag_5_instruction: |-
        "Now a tag for Belle!"\r
        \r
        Draw this
        diamond with 200 pixel sides.
      grade2_MakeDogTag_6_instruction: Joc liber! Desenează orice ți-ar plăcea.
      grade2_MakeDogTag_7_instruction: |-
        One more tag.  This is a triangle for Pi.\r
        (Each
        side is 150 pixels)
      grade2_MakeDogTag_8_instruction: Hai acum să conectăm o grămadă de V-uri împreună,
        desenându-le într-o buclă.
      grade2_MakeDogTag_9_instruction: |-
        Rebuild the code from the last puzzle, but
        this time, add a left turn of 30 degrees inside the loop. Now, repeat it 24
        times instead of 8.
      grade2_MakeDogTag_BFP_instruction: |-
        "Hi, I'm an artist. You can write code
        to make me draw almost anything."\r
        \r
        Play with the blocks in the toolbox
        to see what they do!
      grade2_MakeDogTag_FP_instruction: |-
        Freeplay: What shape will you make the tag
        for your pet?
      grade2_PuppyLoops_1_instruction: |-
        Can you get me to the pig using 5 of the
        same kind of blocks?
      grade2_PuppyLoops_10_instruction: Morișca mea nu e gata. De câte ori trebuie
        folosit blocul "repetă" pentru a fi gata?
      grade2_PuppyLoops_2_instruction: |-
        Can you get to the pig by creating a loop
        that uses only one `move forward` block inside of a `repeat`?
      grade2_PuppyLoops_3_instruction: |-
        Get me to the pig! Solve this puzzle by creating
        a loop!
      grade2_PuppyLoops_4_instruction: |-
        In this puzzle, two `repeat` loops will help
        you get to the pig with the fewest number of blocks!
      grade2_PuppyLoops_5_instruction: Du-mă la porc.
      grade2_PuppyLoops_6_instruction: |-
        Loops even work with more than one block
        inside!  Can you loop this sequence to get me to the pig?
      grade2_PuppyLoops_7_instruction: Du-mă la floarea-soarelui!
      grade2_PuppyLoops_8_instruction: 'Codul pentru cele trei mustăți pe care le
        vezi este greșit. Indiciu: fiecare mustață are o lungime egala. Repară acest
        cod pentru a desena mustățile.'
      grade2_PuppyLoops_9_instruction: Se pare că litera C în cod este desenată invers.
        Poţi să o faci să arate ca un C?
      grade2_collector_10_instruction: |-
        You're almost done! Collect as many pieces
        of treasure as you can to finish the stage!
      grade2_collector_10_2018_instruction: |-
        You're almost done! Collect as many
        pieces of treasure as you can to finish the stage!
      grade2_collector_2_instruction: |-
        Move Laurel to the gold, then use `collect`
        to pick it up.
      grade2_collector_3_instruction: |-
        Put these blocks in order to collect all of
        the gold and solve the puzzle.
      grade2_collector_4_instruction: |-
        Sequence matters! The blocks you need are
        already in the workspace, but not connected.  Order these blocks to solve
        the puzzle.
      grade2_collector_5_instruction: |-
        These blocks are in the wrong order. Can you
        fix them?
      grade2_collector_6_instruction: |-
        "Help me collect each gold coin!"\r
        \r
        These
        blocks are in the wrong order.
      grade2_collector_7_instruction: |-
        Challenge puzzle! Use blocks from the toolbox
        to collect all of the treasure.
      grade2_collector_8_instruction: |-
        "Keep up the good work! Help me collect all
        of the coins."
      grade2_collector_9_instruction: Let's get the coins!
      grade2_collector_9a_instruction: "**Challenge:** Grab all of the coins."
      grade2_collector_A_instruction: Help Laurel collect all of the treasure.
      grade2_collector_A_2018_instruction: Help Laurel collect all of the treasure.
      grade2_collector_pre1_instruction: |-
        "Hi, I'm Laurel. Today I'm searching
        for treasure at the dog park!" \r
        \r
        Play around with the blocks to see
        if you can help Laurel collect some gold.
      grade2_maze_debuggingFP_instruction: |-
        "Now, help me sneak up on the pig any
        way you want to!"
      grade2_maze_debuggingPre_instruction: |-
        Play with these blocks to see what they
        make the bird do!
      grade2_maze_intro10_instruction: Solve this puzzle.
      grade2_maze_intro2_instruction: |-
        Welcome to Code Studio! Here you will learn
        to use blocks to build programs. Press `Run` to run a program now!
      grade2_maze_intro3_instruction: |-
        The `workspace` is where you will create all
        of your programs. Can you guess what this program does? Press the “Run” button
        to find out.
      grade2_maze_intro4_instruction: |-
        Drag a block from the toolbox into the workspace.
        Connect it to the other blocks.
      grade2_maze_intro6_instruction: "That’s it!  Now we’re ready to try to solve\na
        few puzzles. "
      grade2_maze_intro7_instruction: This time, try something a bit more challenging.
      grade2_maze_intro8_instruction: |-
        This is a challenge puzzle.  It is meant to
        be hard and will probably take you a couple of tries to solve.  If you don’t
        solve it after several tries, don’t worry!  It will be in the Play Zone at
        the end of the stage and you can try it again when you’ve had more practice.
      grade2_maze_intro9_instruction: Solve this puzzle.
      grade2_playlab_project_1_instruction: Acum, scrie un program care să îl facă
        pe Waddles să se miște de jur împrejur folosind tastele săgeată sus / jos
        / stânga / dreapta pentru a atinge toate obiectivele!
      grade2_playlab_project_2_instruction: |-
        The `repeat forever` block allows you
        to run code over and over forever. Can you attach blocks to move Chomp the
        Dino (actor 2) up and down forever?
      grade2_playlab_project_3_instruction: |-
        Can you have Waddles (actor 1) say "Ouch!"
        and play a "hit" sound if he runs into Chomp? \r
        \r
        When you're done,
        play the game to make that happen.
      grade2_playlab_project_4_instruction: |-
        Puteți adăuga un bloc pentru a marca un punct când Waddles aleargă în Octavia (actor 3)? \r
        Jucați jocul și mutați-l pe Waddles cu tastele săgeată până când înscrieți!
      grade2_playlab_project_5_instruction: |-
        Add blocks to the `when run` event to
        change the background and the speed of Waddles.\r
        \r
        Play the game and move
        Waddles with the arrows until you score.
      grade2_playlab_project_6_instruction: |-
        Create your own story. When you're
        done, click "Finish" to share with friends.
      grade2_puppy_loops2_instruction: |-
        Can you get to the pig by creating a loop
        that uses only one `move forward` block inside of a `repeat`?
      grade2_puppy_loops3_instruction: |-
        "Get me to the pig!"\r
        \r
         Solve this
        puzzle by creating a loop!
      grade2_puppy_loops4_instruction: |-
        In this puzzle, two `repeat` loops will help
        you get to the pig with the fewest number of blocks!
      grade2_puppy_loops5_instruction: Du-mă la porc.
      grade2_puppy_loops6_instruction: |-
        "This pig is ruffling my feathers!"\r
        \r
        Loops
        even work with more than one block inside!  Can you loop this sequence?
      grade2_puppy_loops7_instruction: |-
        "Get me to the pig!"\r
        \r
        Use what you
        learned in other puzzles!
      grade3_AboutMyRobot_1_instruction: |-
        Make your robot say "Hello!" when the
        button is clicked.
      grade3_AboutMyRobot_2_instruction: |-
        Edit the code so that when the second bird
        is clicked, your program plays a sound!
      grade3_AboutMyRobot_3_instruction: |-
        When the third bird is clicked, the background
        should change to a city. Can you add code to make this happen?
      grade3_AboutMyRobot_4_instruction: |-
        Add code to make something happen when
        the fourth bird is clicked. Be creative!
      grade3_AboutMyRobot_5_instruction: |-
        About My Robot Project! Write code so that
        clicking on each bird shows a new fact about your robot.
      grade3_AboutMyRobot_TeacherIDo_instruction: |-
        Run this puzzle and click on the
        robot to see what happens!
      grade3_ConditionalsElse_1_instruction: Albina nu-și poate da seama dacă acesta
        este o floare sau un fagure de miere. Adună nectar doar din flori, dar mai
        întâi verifică dacă acesta este o floare sau un fagure de miere.
      grade3_ConditionalsElse_2_instruction: Albina vrea acum doar nectar. Ia aminte,
        nu toate obiectele sunt flori, așadar verifică mai întâi pentru a aduna nectarul
        doar din flori.
      grade3_ConditionalsElse_3_instruction: |-
        Now I just want to make honey. Some
        of these clouds might have honeycombs under them. Be sure to check each cloud!
      grade3_ConditionalsElse_4_instruction: Obiectul necunoscut este ori o floare,
        ori un fagure de miere. Folosește blocul "dacă/altfel" pentru a colecta nectar
        dacă acesta este o floare, altfel pentru a face miere (deoarece acesta este
        un fagure).
      grade3_ConditionalsElse_5_instruction: |-
        There will be either a flower or a
        honeycomb under each of those clouds!\r
        \r
        Use the `if/else` block to collect
        nectar if there is a flower.\r
        Otherwise, make honey (because there is a
        honeycomb).
      grade3_ConditionalsElse_6_instruction: |-
        I am not sure how much nectar this
        flower has, but I know it has either 1, 2, or 3 nectar. \r
        \r
        Combine the
        conditional blocks (`if` and/or `if/else`) to only get as much nectar as the
        flower has. \r
        \r
        Remember, the amount of nectar can change each time you
        run the puzzle!
      grade3_ConditionalsElse_7_instruction: Amintește-ți că florile violete pot avea
        3, 2 nectaruri sau 1 nectar. Completează funcția "verifică floare violetă"
        și folosește-o pentru a colecta tot nectarul la flori.
      grade3_ConditionalsElse_8_instruction: |-
        Write the function for `check flower
        make honey`. \r
        \r
        Your function should check if the purple flower has 3,
        2, or 1 nectar and get all of the nectar. \r
        Then, move forward and make
        honey.
      grade3_ConditionalsElse_9_instruction: |
        **Assessment:** This cloud is either
        hiding a flower with one nectar or a honeycomb that needs one honey.  \r
        \r
        Complete
        the `get nectar or make honey` function, then call it to collect the nectar
        or honey. \r
      grade3_ConditionalsElse_TeacherIDo_instruction: |-
        There will be either a flower
        or a honeycomb under each of those clouds!\r
        \r
        Use the `if/else` block
        to collect nectar if there is a flower.\r
        Otherwise, make honey (because
        there is a honeycomb).
      grade3_Conditionals_1 BAD_instruction: Folosește o buclă pentru a colecta tot
        nectarul.
      grade3_Conditionals_1_instruction: Bună, sunt o albină infometata! Ajută-mă
        să colectez tot nectarul din flori. Folosește o buclă.
      grade3_Conditionals_10 BAD_instruction: Adună nectarul din rândurile de flori!
        Utilizează o buclă imbricată.
      grade3_Conditionals_10_instruction: |-
        Colectează nectar și fă miere. Sugestie:
        ce se întâmplă dacă folosești condiția "dacă nectar" în cazul unei flori roșii? Poți
        finaliza aceasta cu o buclă?
      grade3_Conditionals_11 BAD_instruction: "Evaluare - utilizează o buclă \"în
        timp ce\" pentru a colecta \ntot nectarul din această floare."
      grade3_Conditionals_11_instruction: Colectează nectarul şi fă miere. Ai grijă
        să nu colectezi nectarul de la o floare violetă, dacă aceasta nu are deloc.
        Nu uita ca la sfarsit sa faci miere.
      grade3_Conditionals_12_instruction: Colectează nectarul din toate cele patru
        flori.
      grade3_Conditionals_13_instruction: |-
        Assessment: Collect all of the nectar.
        Be careful not to try to collect nectar from a purple flower if it doesn't
        have any.
      grade3_Conditionals_2_instruction: Ajută-mă să adun tot nectarul din flori şi
        să fac miere. Utilizează o buclă.
      grade3_Conditionals_3_instruction: |-
        Be careful not to collect nectar from a
        purple flower if it doesn't have any. \r
        You must first check if the nectar
        is equal to 1 using the `if nectar` block.
      grade3_Conditionals_4_instruction: "Verifică această floare cu un bloc - dacă
        \npentru a vedea dacă aceasta are nectar."
      grade3_Conditionals_5_instruction: Strânge nectar de la fiecare floare dacă
        aceasta are.
      grade3_Conditionals_6_instruction: "Acest câmp are flori roşii şi violet. \nFlorile
        roşii au o cantitate știută de nectar, dar nectarul din floarea violetă este
        necunoscut. \nColectează tot nectarul."
      grade3_Conditionals_7_instruction: Colectează tot nectarul din fiecare floare.
      grade3_Conditionals_8_instruction: Colectează nectar din florile care au nectar.
      grade3_Conditionals_9_instruction: |-
        Help me find all of the nectar using as
        few blocks as possible!
      grade3_Conditionals_TeacherIDo_instruction: |-
        Check this flower with an "if"
        block to see if there is any nectar available.
      grade3_Debugging_1_instruction: "Aceste blocuri chiar mă supără. Repară \neroarea(erorile)
        pentru a colecta tot nectarul şi a face toată mierea."
      grade3_Debugging_5_instruction: |-
        That flower looks tasty! \r
        \r
        Fix the error(s)
        to collect all of the nectar.  You can now use both run and step.
      grade3_Debugging_6_instruction: "Ce provocare dulce! Repară \neroarea(erorile)
        pentru a colecta tot nectarul şi a face toată mierea."
      grade3_Debugging_7_instruction: "Repară \neroarea(erorile) pentru a colecta
        tot nectarul şi a face toată mierea."
      grade3_Debugging_9_instruction: "Fii rabdator! Repară \neroarea(erorile) pentru
        a colecta tot nectarul şi a face toată mierea."
      grade3_Debugging_TeacherIDo_instruction: |-
        These blocks are really bugging me.
        Fix the error(s) to collect all of the nectar and make all of the honey.
      grade3_Loops_1_instruction: "Can you help me collect the nectar from these\nflowers? "
      grade3_Loops_10_instruction: Foloseste o bucla similara ca in puzzle-ul trecut,
        dar foloseste un viraj.
      grade3_Loops_11_instruction: Foloseste o bucla pentru a merge in jos si colecteaza
        tot nectarul.
      grade3_Loops_12_instruction: Foloseste o bucla pentru a colecta nectarul din
        fiecare floare si a face miere la fiecare fagure de miere.
      grade3_Loops_2_instruction: Poti face aceasi sarcina mai usor cu o bucla?
      grade3_Loops_3_instruction: Poti folosi o bucla pentru a colecta tot nectarul?
      grade3_Loops_4_instruction: |-
        Now use the `repeat` block to collect all of the
        nectar and make all of the honey.
      grade3_Loops_5_instruction: Pune aceste blocuri intr-o bucla pentru a colecta
        nectarul din fiecare floare.
      grade3_Loops_6_instruction: |-
        Ce se intampla daca repeti aceasi secventa de 3 ori?
        Nu uita sa faci mierea la sfarsit!
      grade3_Loops_7_instruction: 'Fiecare floare contine o unitate de nectar. Colecteaza
        nectarul din fiecare floare. '
      grade3_Loops_8_instruction: Foloseste o bucla pentru a colecta nectarul si a
        face miere.
      grade3_Loops_9_instruction: Colecteaza nectarul din fiecare floare si fa miere
        la fiecare fagure de miere.
      grade3_Loops_TeacherIDo_instruction: |-
        Those flowers look tasty!\r
        \r
        Collect
        nectar from each of the flowers using the fewest blocks possible.
      grade3_RunningFarm_1_instruction: |-
        Use conditionals to make sure that you pick
        all of the corn, but don't disturb the stalks where nothing is growing yet.
      grade3_RunningFarm_10_instruction: |-
        Collect all of the corn and lettuce, then
        pick the pumpkin.
      grade3_RunningFarm_11a_instruction: |-
        Collect all of the corn and lettuce, then
        pick the pumpkin.
      grade3_RunningFarm_2_instruction: |-
        Help the farmer collect both corn and lettuce
        from the field.
      grade3_RunningFarm_3_instruction: |-
        *"Corn, lettuce, AND pumpkins! Help me
        harvest them all."*
      grade3_RunningFarm_4_instruction: |-
        Help the farmer pick all of the lettuce
        in each cluster before moving on to the next bunch.
      grade3_RunningFarm_5_instruction: |-
        This field has clusters of corn, lettuce,
        and pumpkins all growing together.  Can you collect them all?
      grade3_RunningFarm_6_instruction: |-
        Can you figure out how to pick the pumpkin?  Make
        sure to collect all of the corn along the way!
      grade3_RunningFarm_7_instruction: |-
        **Challenge:** Collect all of the corn and
        lettuce, then pick the pumpkin.
      grade3_RunningFarm_8_instruction: |-
        Have wheat and potatoes planted randomly
        at various growth stages. Now we introduce multiple while loops (stacked)
        nested inside a loop. The two while loops in the solution represent different
        while loops (while there is potato and while there is wheat)
      grade3_RunningFarm_9_instruction: |-
        Add Weeds element. Weeds start out in random
        spots in the field and spread more and more rapidly as time goes on.. This
        puzzle is the culminating game-like puzzle. Students should have the event
        blocks (up, down, left, right, spacebar) available in the toolbox to use if
        they want. The entire field should be planted randomly with mostly wheat,
        potatoes, and a few weeds.
      grade3_RunningFarm_TeacherIDo_instruction: |-
        Teacher I Do: Show students how
        they can use loops and conditionals to plant and harvest 2 rows of crops.
      grade3_RunningFarm_TeacherIDo2_instruction: |-
        Teacher I Do: Show students how
        to use loops to harvest many crops.
      grade3_bee_Conditionals_new4_instruction: |-
        Now try checking all of these flowers
        with "if" blocks to see if there is any nectar available.
      grade3_bee_conditionals_new1a_instruction: |-
        Help the bee collect all of the
        nectar. \r
        \r
        You can only collect nectar from flowers, but you can check
        any space to see if there is a flower.
      grade3_bee_conditionals_new1b_instruction: |-
        Help the bee collect all of the
        nectar. You can only collect nectar from flowers, but you can check any space
        to see if there is a flower.
      grade3_bee_conditionals_new2_instruction: |-
        Collect all of the nectar using
        as few blocks as possible
      grade3_bee_conditionals_new2a_instruction: |-
        Get all of the nectar using as
        few blocks as possible.
      grade3_bee_conditionals_new2b_instruction: |-
        Collect all of the nectar. You
        can only collect nectar from flowers, but you can check any space to see if
        there is a flower.
      grade3_bee_conditionals_new3a_instruction: |-
        Collect all of the nectar or make
        all the honey. You can only collect nectar from flowers and make honey from
        honeycombs. Check any space to see if there is a flower or honeycomb.
      grade3_bee_conditionals_new3b_instruction: |-
        Collect all of the nectar and make
        all of the honey.
      grade3_bee_conditionals_new3c_instruction: |-
        Help the bee collect all of the
        nectar and make all of the honey! Hint: Try using one loop inside of another
        loop.
      grade3_bee_conditionals_quantum1_instruction: |-
        Check to see if there's a flower
        under the cloud. If there's a flower, get nectar.
      grade3_bee_conditionals_quantum2_instruction: Albina vrea acum doar nectar.
        Ia aminte, nu toate obiectele sunt flori, așadar verifică mai întâi pentru
        a aduna nectarul doar din flori.
      grade3_bee_conditionals_quantum3_instruction: |-
        Some of these clouds might have
        honeycombs under them.  Be sure to check if a honeycomb is hiding behind each
        cloud!
      grade3_bee_conditionals_quantum4_instruction: |-
        Use the `if/else` block to collect
        nectar at flowers and make honey at honeycomb.
      grade3_bee_conditionals_quantum5_instruction: |-
        Use the `if/else` block to collect
        nectar if there is a flower.\r
        Otherwise, make honey (because there is a
        honeycomb).
      grade3_maze_Loop1_instruction: "Assessment:  Get me to the sunflower using\nonly
        5 blocks! "
      grade3_maze_loops1_instruction: Get the zombie to the sunflower.
      grade3_maze_loops2_instruction: Du-mă la floarea-soarelui! Foloseste bucla "repeta"
        pentru a folosi mai putine blocuri.
      grade3_maze_loops2a_instruction: |-
        Get the zombie to the sunflower using the
        fewest number of blocks possible.
      grade3_maze_loops3_instruction: Du-mă la floarea-soarelui!
      grade3_maze_loops4_instruction: Du-mă la floarea-soarelui cu cat mai putine
        blocuri posibile!
      grade3_maze_loops5_instruction: Du-mă la floarea-soarelui cu cat mai putine
        blocuri posibile!
      grade3_maze_nestedLoops1_instruction: |-
        Can you get me to the pig using 5 of
        the same kind of blocks?
      grade3_maze_nestedLoops2_instruction: |-
        Can you get to the pig by creating a
        loop that uses only one `move forward` block inside of a `repeat`?
      grade3_maze_nestedLoops3_instruction: |-
        Get me to the pig! You can only use
        one move forward block this time
      grade3_maze_nestedLoops4_instruction: |-
        In this puzzle, two `repeat` loops will
        help you get to the pig with the fewest number of blocks!
      grade3_playLab_buildGame_1_instruction: |-
        There is a new block in this lesson,
        the `random integer` block. It is used to choose a random number. Write a
        program where the robot says a random number between 1 and 100!
      grade3_playLab_buildGame_2_instruction: |-
        We have already created a random integer,
        "j", which is either 1 or 0. Now, we need to use it to decide whether our
        card is red or black. Add a second if statement to the code under `when run`
        to complete this code.
      grade3_playLab_buildGame_3_instruction: |-
        There are 13 different card values
        in a deck of cards, so we'll need to have 13 options. Under the empty `when
        run` block, add a line that sets the placeholder "i" to a random integer
        between 1 and 13.
      grade3_playLab_buildGame_4_instruction: |-
        In a deck of cards, a card with value
        1 isn't actually called a "1", there's a special name. Write an if statement
        that checks if the random number is a 1, then tell the computer that the value
        of that card is "Ace".
      grade3_playLab_buildGame_5_instruction: |-
        We can just call the cards from 2
        to 10 by their numbers, so add an if statement that checks whether the number
        generated is within those numbers, then sets the card value to the number
        generated.
      grade3_playLab_buildGame_6_instruction: |-
        There are three more cards with special
        names in the deck. Add to your code so that a card number 11 is called a "Jack",
        a 12 is a "Queen" and a 13 is a "King"
      grade3_playLab_buildGame_7_instruction: |-
        You already know what color your card
        is, but what suit is it? Add code to the conditional statement "if card is
        Red" to choose hearts or diamonds.
      grade3_playLab_buildGame_8_instruction: |-
        Add the second part of the code to
        choose a suit, copying what you made for a Red card.
      grade3_playLab_buildGame_final_instruction: |-
        Final stage for playlab conditionals
        level (could hide entire function so that students just work with point scoring)
      grade3_playLab_buildGame_final2_instruction: |-
        Here's all of your code to choose
        a card - try adding some other fun features!
      grade3_robotFarmer_ConditionalsIntro4_instruction: |-
        Help the farmer remove
        this entire pile using a `while` loop.
      grade3_robotFarmer_ConditionalsIntro_1_instruction: |-
        *"Hi, I'm a farmer.
        I need your help to flatten the field on my farm so it's ready for planting!"*  \r
        \r
        Move
        to the pile of dirt and use the `remove` block to remove it.
      grade3_robotFarmer_ConditionalsIntro_10_instruction: |-
        I'm working late, so
        it's dark out, and I can't tell how large the piles are. Now I don't have
        all the options I used to have on the while block. Move me along the field,
        and if there is a pile, remove it
      grade3_robotFarmer_ConditionalsIntro_10a_instruction: "Flatten all of these\npiles
        using as few blocks as possible. "
      grade3_robotFarmer_ConditionalsIntro_11_instruction: |-
        It's still dark outside.
        Move me along the field. If there is a pile, remove it, and if there is a
        hole, fill it in. Hint: use the dropdown menu of options on the "if" block.
      grade3_robotFarmer_ConditionalsIntro_11a_instruction: "Flatten all of these\npiles
        using as few blocks as possible. "
      grade3_robotFarmer_ConditionalsIntro_2_instruction: |-
        Next, move to the hole
        and fill it with six shovelfuls of dirt, using the `fill` block.
      grade3_robotFarmer_ConditionalsIntro_3_instruction: |-
        *"Move to the pile of
        dirt and tell me how many shovelfuls to remove using as few blocks as possible."*
      grade3_robotFarmer_ConditionalsIntro_4_instruction: |-
        *"I don't know how much
        dirt is in this pile!"*\r
        \r
        Help the farmer remove this entire pile using
        a `while` loop.
      grade3_robotFarmer_ConditionalsIntro_5_instruction: "Help me remove all of\nthis
        dirt. "
      grade3_robotFarmer_ConditionalsIntro_6_instruction: |-
        Remove all the piles of
        dirt, using as few blocks as possible. The new options in the dropdown menu
        on the "while" block tell me if I'm standing on a pile or a hole.
      grade3_robotFarmer_ConditionalsIntro_7_instruction: |-
        Look at all of those holes!  Each
        one needs a different amount of dirt.   \r
        \r
        You can use the `while` loop
        to easily fill them all!
      grade3_robotFarmer_ConditionalsIntro_8_instruction: |-
        Fill in the hole at the
        end of each of these paths.
      grade3_robotFarmer_ConditionalsIntro_9_instruction: "**Challenge:** Fill all\nof
        these holes using as few blocks as possible. "
      grade3_robotFarmer_ConditionalsIntro_TeacherIDo1_instruction: |-
        Help me fill
        in all these holes with 5 shovelfuls of dirt. Hint: you can put a "repeat"
        block inside the "while" block.
      grade3_robotFarmer_ConditionalsIntro_TeacherIDo2_instruction: |-
        I'm working
        late, so it's dark out, and I can't tell how large the piles are. Now I
        don't have all the options I used to have on the while block. Move me along
        the field, and if there is a pile, remove it
      grade4_arist_functions_star0_instruction: |-
        Have you drawn something like this
        star before? Practice making it one more time by adding a turn and a repeat
        block.
      grade4_arist_nested_loop_circles1_instruction: |-
        Assessment: Use a nested loop
        to complete the design.
      grade4_arist_nested_loop_flags1_instruction: |-
        Loop the given code to create
        a windmill.
      grade4_arist_nested_loop_polygons1_instruction: |-
        Loop this design 10 times.
        \r
        \r
        How much do you have to turn each time you loop?
      grade4_arist_nested_loop_polygons2_instruction: "Loop this shape 6 times. \\r\n\\r\nHow\nmuch
        do you have to turn each time you loop? "
      grade4_arist_nested_loop_squares1_instruction: |-
        Can you draw these 10 squares
        of this sidewalk using a nested loop? Each square is 30 pixels.
      grade4_arist_nested_loop_triangles2_instruction: "Now nest this loop inside\nanother
        loop to draw 10 triangles.  This is called a \"nested\" loop.  "
      grade4_arist_nested_loop_triangles3_instruction: |-
        Can you draw a hexagon by
        looping the triangle code?
      grade4_arist_nested_loop_triangles4_instruction: |-
        Draw the teeth in the alligator's
        mouth!
      grade4_arist_nested_loop_triangles5_instruction: |-
        Create a sun by nesting the
        starter code in another loop.\r
        \r
        To get this cool design with a hollow
        center, you'll need to jump forward by the length of the triangle before
        turning.
      grade4_arist_nested_loop_triangles6_instruction: |-
        Can you draw these 36 triangles
        using a nested loop?
      grade4_artist_freeplay_instruction: |-
        You are on your own now! Try out any of
        the functions you used in this stage or try this new function that will automatically
        give your image a beautiful background color! This creation will be saved
        to your Projects dashboard so that you can easily edit it any time!
      grade4_artist_functions1_instruction: Ajuta zombieul sa deseneze ochelarii folosind
        patrate cu laturi de 100 de pixeli. \r Spatiul dintre ochelari este de 75
        de pixeli.
      grade4_artist_functions2_instruction: |-
        Functions let you define new blocks!
        \r
        \r
        We've moved the blocks needed for drawing a square into a function
        called `draw a square`. This time, use the `draw a square` function to create
        the glasses. \r
        \r
        The squares are 75 pixels apart.
      grade4_artist_functions2a_instruction: |-
        Create this image using only the blocks
        provided.
      grade4_artist_functions3a_instruction: |-
        Create this image using only the blocks
        provided.
      grade4_artist_functions3b_instruction: |-
        This time, use lines of 8 hexagons
        with 25 pixel sides.
      grade4_artist_functionsChallenge0_instruction: |-
        **Challenge:** Create as many
        functions as you think you need to make this drawing of 50 pixel squares.
      grade4_artist_functions_challenge_instruction: |-
        Use the suggested functions
        to draw four rows of hexagons. Notice how our even numbered rows are shifted
        to the right?
      grade4_artist_functions_challenge2_instruction: |-
        Use the suggested functions
        to draw four rows of hexagons. Notice how our even numbered rows are shifted
        to the right?
      grade4_artist_functions_freeplay_instruction: |-
        You are on your own now! Try
        out any of the functions you used in this stage or try this new function that
        will automatically give your image a beautiful background color! This creation
        will be saved to your Projects dashboard so that you can easily edit it any
        time!
      grade4_artist_functions_stars0_instruction: |-
        You can make this drawing by adding
        a repeat block.
      grade4_artist_functions_stars1_instruction: |-
        Now that you can draw a star,
        try drawing four stars!
      grade4_artist_functions_stars2_instruction: |-
        Draw only those three stars to
        finish this puzzle.
      grade4_artist_functions_stars3_instruction: |-
        That last one is tough if you
        only use loops. Let's try drawing the same picture using this new 'function'
        that will help to **draw a star**.
      grade4_artist_functions_windows0_instruction: |-
        Make this window by drawing
        a square, then turning 90 degrees before drawing another, and so on.
      grade4_artist_functions_windows1_instruction: |-
        If you can draw one window,
        you can draw three! Try using your choice of a nested loop or a function here.
        Don't forget the jump block!
      grade4_artist_functions_windows2_instruction: |-
        Try solving this puzzle by creating
        `draw a window` and calling it five times. Watch out for the door!\r
        \r
        -
        The top windows are 50 pixels away from each other.  \r
        - The bottom windows
        are 100 pixels below the top set.
      grade4_artist_nestedLoops_challenge_instruction: |-
        Click here to see the full
        instructions again!\r
        \r
        Here is the code for an interesting shape.  What
        happens when you repeat it multiple times, turning between each iteration?   Notice
        that the turns in this shape add up to 420 degrees, which means that when
        your artist is done drawing, it will be facing a different direction than
        when you started.  That new direction is exactly 60 degrees to the right of
        where you began.
      grade4_artist_nestedLoops_challenge2_instruction: |-
        Now for a challenge!  Feel
        free to use trial and error. You are not expected to get the image perfect
        the first time.   Want to see more hints?  Click here!
      grade4_artist_nested_loop_circles1_instruction: |-
        Assessment: Use a nested loop
        to complete the design.
      grade4_artist_nested_loop_flags1_instruction: |-
        Loop the given code to create
        a windmill.
      grade4_artist_nested_loop_polygons1_instruction: |-
        Loop this design 10 times.
        \r
        \r
        How much do you have to turn each time you loop?
      grade4_artist_nested_loop_polygons2_instruction: "Hi, I'm the Artist! Let's\ncreate
        some drawings together! For starters, try repeating this shape 6 times.\n\\r\n\\r\nHow
        much do you have to turn each time you loop? "
      grade4_artist_nested_loop_squares1_instruction: |-
        Can you draw these 10 squares
        of this sidewalk using a nested loop? Each square is 30 pixels.
      grade4_artist_nested_loop_triangles1_instruction: |-
        Complete the code to draw
        these triangles.  The first one is done for you.  Hint:  3 triangles in a
        360 degree rotation.
      grade4_artist_nested_loop_triangles2_instruction: |-
        Let's make a quick adjustment
        to get completely different image!  \r
        Hint: ? × 10 = 360
      grade4_artist_nested_loop_triangles3_instruction: |-
        Can you draw a hexagon by
        looping the triangle code?\r
        Hint: 6 × ? = 360
      grade4_artist_nested_loop_triangles4_instruction: |-
        Hi! I'm the Artist. Let's
        try some different types of drawings together. Can you help me draw the bottom
        teeth in the alligator's mouth?
      grade4_artist_nested_loop_triangles5_instruction: |-
        Create a sun by nesting
        the starter code in another loop.\r
        \r
        To get this cool design with a hollow
        center, you'll need to jump forward by the length of the triangle before
        turning.
      grade4_artist_nested_loop_triangles6_instruction: |-
        Can you draw these 36 triangles
        using a nested loop?
      grade4_artist_parameters_squares1_instruction: |-
        Click "edit" to fill in the
        function definition of "draw a square" and add a parameter. It should take
        a length parameter, just like the triangle. This time, draw 3 squares: 25,
        50 and 75 pixels in length, each 100 pixels apart.
      grade4_artist_parameters_triangles1_instruction: |-
        Today, we're going to try
        out a different, more powerful function editor. See if you can figure out
        how to edit the function 'draw a triangle' to find the bugs.
      grade4_artist_parameters_triangles2_instruction: "Observi ceva diferit \nla
        aceste blocuri de funcţie? Fă clic pe \"Rulează\" pentru a vedea ce se întâmplă."
      grade4_artist_parameters_triangles2b_instruction: |-
        Can you complete this drawing?
        The sides of each triangle are 25 pixels larger than the last.  The first
        triangle has 25 pixel sides.
      grade4_artist_parameters_triangles3_instruction: |-
        Can you complete this drawing?
        The sides of each triangle are 25 pixels larger than the last.  The first
        triangle has 25 pixel sides.
      grade4_artist_parameters_triangles4_instruction: |-
        The code for this triangle
        function is broken. Can you edit the function to fix it, and then make triangles
        of length 25, 50, and 75?
      grade4_artist_parameters_trianglesx_instruction: |-
        Can you complete this drawing?
        The sides of each triangle are 25 pixels larger than the last.  The first
        triangle has 25 pixel sides.
      grade4_bee_conditionals_nested_loops_instruction: |-
        Collect all of the nectar.
        You can only collect nectar from flowers, but you can check any space to see
        if there is a flower.
      grade4_bee_conditionals_new1_instruction: |-
        Collect all of the nectar. You can
        only collect nectar from flowers, but you can check any space to see if there
        is a flower.
      grade4_bee_conditionals_new1a_instruction: |-
        Help the bee make all of the honey.
        You can only make honey at a honeycomb, but you can check any space to see
        if there is a honeycomb.
      grade4_bee_conditionals_new2_instruction: |-
        Can you help the bee collect the
        nectar from the flowers? You can only collect nectar from flowers, but you
        can check any space to see if there is a flower.
      grade4_bee_conditionals_new2a_instruction: |-
        Make all of the honey. It's actually
        more efficient to check each space for a honey comb, even when you know some
        are empty.
      grade4_bee_conditionals_new3a_instruction: |-
        Collect all of the nectar or make
        all the honey. You can only collect nectar from flowers and make honey from
        honeycombs. Check any space to see if there is a flower or honeycomb.
      grade4_bee_conditionals_new3b_instruction: |-
        Uh oh! The bee is not sure if he
        should collect nectar or make honey. Can you help him out?
      grade4_bee_conditionals_new3c_instruction: |-
        Help the bee collect all of the
        nectar and make all of the honey! Hint: Try using one loop inside of another
        loop.
      grade4_bee_conditionals_quantum1_instruction: |-
        This cloud is blocking my view!
        Check to see if there's a flower under the cloud, and only get nectar if
        there's a flower. Be careful, it can change!
      grade4_bee_conditionals_quantum2_instruction: Albina vrea acum doar nectar.
        Ia aminte, nu toate obiectele sunt flori, așadar verifică mai întâi pentru
        a aduna nectarul doar din flori.
      grade4_bee_conditionals_quantum3_instruction: |-
        Now I just want to make honey.
        Some of these clouds might have honeycombs under them. The way we've been
        going about things won't work here. Be sure to check if a honeycomb is hiding
        behind each cloud!
      grade4_bee_conditionals_quantum4_instruction: |-
        Sometimes this cloud covers
        a flower, and sometimes it covers a honeycomb! Use the if/else block to collect
        nectar if it is a flower, else to make honey (because it is a honeycomb).
      grade4_bee_conditionals_quantum5_instruction: |-
        There will be either a flower
        or a honeycomb under each of those clouds!\r
        \r
        Use the `if/else` block
        to collect nectar if there is a flower.\r
        Otherwise, make honey (because
        there is a honeycomb).
      grade4_bee_functions_instruction: |-
        Have we met before? I'm the farmer! Please
        help me remove this pile of dirt and fill this hole.
      grade4_bee_functions1_instruction: Colectează tot nectarul din fiecare floare.
      grade4_bee_functions10_instruction: |-
        Create a function to collect all of the
        nectar from each flower.
      grade4_bee_functions11_instruction: |-
        Solve this function by creating a function
        to turn, move forward and make all of the honey, then return the bee to where
        it started and turn back.
      grade4_bee_functions2_instruction: "Funcţiile sunt blocuri de cod care efectuează
        \no activitate. Utilizează funcţia \"obţine 2 nectare\" pentru a colecta nectarul
        de la fiecare \nfloare."
      grade4_bee_functions3_instruction: "Funcţiile sunt blocuri de cod care efectuează
        \no activitate. Utilizează funcţia \"obţine 5\" pentru a colecta 5 nectare
        dintr-o data. De asemenea, asigură-te că\nfolosești și o buclă pentru a obține
        o numarătoare ideală de bloc."
      grade4_bee_functions4_instruction: "Funcţia \"mută şi obține nectar\" face albina
        să se întoarcă, să colecteze nectar şi apoi returnează albina la locul de
        unde a început. Folosește \nfuncţia pentru a colecta tot nectarul."
      grade4_bee_functions5_instruction: This puzzle will be deleted!
      grade4_bee_functions6_instruction: |-
        Now write the function to collect nectar
        from the flowers.
      grade4_bee_functions7_instruction: |-
        Create a function and call it to collect
        nectar at each flower and make honey at each honeycomb.
      grade4_bee_functions8_instruction: |-
        Create your own function that goes down
        a path, gets nectar, makes honey, and then returns the bee to the top of the
        path. Then collect all the nectar and make all the honey!
      grade4_bee_functions9_instruction: |-
        Create a function that collects all of
        the nectar from each flower.
      grade4_bee_nestedLoops0_instruction: Folosește o buclă pentru a colecta tot
        nectarul.
      grade4_bee_nestedLoops1_instruction: 'Colectează tot nectarul din fiecare floare.
        Folosește o buclă imbricată. '
      grade4_bee_nestedLoops2_instruction: |-
        **Challenge:** Figure out how to get
        all of the nectar using only the blocks available.
      grade4_bee_nestedLoops2a_instruction: |-
        Collect all of the nectar using  as
        few blocks as possible.
      grade4_bee_nestedLoops3_instruction: Colectează tot nectarul prin crearea unei
        bucle imbricate.
      grade4_bee_nestedLoops4_instruction: 'Colectează tot nectarul din fiecare floare
        și fă miere la fiecare fagure. Folosește o buclă imbricată. '
      grade4_bee_nestedLoops_assess_instruction: |-
        **Assessment:** Collect all of
        the nectar and make all of the honey using loops.\r
        \r
        Hint: There are several
        possible solutions!
      grade4_designProcess_vid_instruction: |-
        Prepare to build a project within some
        given parameters.
      grade4_farmer_functions1_instruction: |-
        *"Have we met before? I'm the farmer!"*\r
        \r
        Help
        the farmer get to the pumpkins and pick them.
      grade4_farmer_functions2_instruction: |-
        Take the code you just wrote it and
        use it to define a new function. Call the function twice to complete the puzzle.
      grade4_farmer_functions3_instruction: |-
        Try using a couple of repeat blocks
        within your function definition.
      grade4_farmer_functions4_instruction: |-
        Swap out your repeat loops for more
        versatile while loops.
      grade4_farmer_functions5_instruction: |-
        Things are going to start getting trickier,
        but don't give up! You can use the same while loops to check both spaces
        in each pass.
      grade4_farmer_functions6_instruction: |-
        The paths are a different length. You
        can use a different type of while loop to keep the pattern going as long as
        you need to.
      grade4_frozen_freeplay_instruction: Ai devenit oficial un artist maestru! Creează
        un paradis de iarnă.
      grade4_frozen_functions0_instruction: |-
        Can you figure out what number to replace
        the question marks with to draw a circle?
      grade4_frozen_functions1_instruction: |-
        Use the new “draw a circle” function
        to create 10 overlapping circles. Don't forget to jump forward between circles.
      grade4_frozen_functions1a_instruction: |-
        Use the new “Create a circle” block
        to create 10 overlapping circles. Don't forget to jump forward between circles.
      grade4_frozen_functions2_instruction: |-
        Now let's create 20 overlapping circles,
        turning 18 degrees between each circle.
      grade4_frozen_functions3_instruction: |-
        Here's a ”Create circle” block that
        can make circles of different sizes. Can you use this to create a small circle
        of size 5 and a larger circle of size 10?
      grade4_frozen_functions4_instruction: |-
        Intricate snow patterns can be created
        with very simple shapes. Can you make a pattern by repeating 5 circles of
        size 5 and 5 circles of size 10?
      grade4_frozen_nested_loop_diamonds1_instruction: |-
        Let’s use a repeat block
        to create a rhombus. Like a square, all sides are equal length, but the angles
        are different. This one has 60 degree and 120 degree angles instead of all
        90 degree angles.
      grade4_frozen_nested_loop_diamonds2_instruction: |-
        Did you know every snowflake
        is a different shape? Let's create a new snowflake by using another “Repeat"
        block to repeat a parallelogram 4 times, turning right by 90 degrees between
        each parallelogram.
      grade4_frozen_nested_loop_diamonds3_instruction: |-
        Now, let's create a new
        snowflake by using the repeat block to repeat a parallelogram 10 times, turning
        right by 36 degrees between each one.
      grade4_frozen_nested_loop_rectangle1_instruction: |-
        Hi, I’m Anna of Arendelle!
        Let’s use a repeat block to create a rectangle. This one is  200 pixels long
        and 100 pixels tall. All of the corners are 90 degree angles.
      grade4_frozen_square_instruction: |-
        Hi, I’m Anna of Arendelle! Let’s make a
        square with the “Repeat” block, which uses fewer blocks. How many times (???)
        should the “Repeat” block loop the blocks inside it to make a square?
      grade4_frozen_square_loop1_instruction: |-
        Hi, I’m Anna of Arendelle! Let’s make
        a square with the “Repeat” block, which uses fewer blocks. How many times
        (???) should the “Repeat” block loop the blocks inside it to make a square?
      grade4_frozen_square_loop2_instruction: |-
        Let's create three squares, turning
        after each square. Be sure to turn by 120 degrees before each new square.
      grade4_frozen_square_loop3_instruction: Poţi crea un fulg de zăpadă folosind
        blocul "Repetă" pentru a face un pătrat de 10 ori, precum și blocul "Întoarce"
        pentru a se roti cu 36 de grade între fiecare pătrat?
      grade4_playLab_proj_example1_instruction: instructions
      grade4_playLab_proj_example1a_instruction: |-
        Take a look at this project.  Do
        you see how it was made?
      grade4_playLab_proj_example2a_instruction: |-
        Take a look at this project.  Do
        you see how it was made?
      grade4_playlab_freeplay_instruction: "It's free play time! Have fun with all\nthe
        blocks in your tool box. "
      grade4_playlab_test_instruction: |-
        Foloseste sageata dreapta pentru a arunca placinta.\r
        \r
        In jocul nostru, cum putem inscrie puncte? Adauga 1 punct la variabila puncte atunci cand cainele loveste pisica cu o bucata de placinta. Foloseste evenimentul "cand actorul 2 loveste orice" pentru a updata scorul. Poti sa iti setezi singur variabila prin setarea "puncte = puncte+!". Cresteti scorul pana la 10 (cate un eveniment pe rand!) pentru a trece un level.
      grade4_playlab_test2_instruction: |-
        Here's a function called `jump` that causes
        your main character to jump up 100 pixels. Run the program and use the jump
        function to collect all of the flags by moving the dog with the arrow keys.
      grade4_prompt_test_instruction: This is a test play lab level.
      grade4_review_artist1_instruction: |-
        Hi, I'm an artist. You can write code
        to make me draw almost anything. Use a few blocks to make me draw over the
        grey lines in the picture. (Each line is 100 pixels long)
      grade4_review_artist2_instruction: 'Această casă are nevoie de un acoperiş!
        Desenează triunghiul.  Sugestie: toate trei laturile au aceeaşi lungime.'
      grade4_review_artist3_instruction: |-
        The jump block moves the artist without
        drawing. Draw the dashed line using both the `jump forward` and `move forward`
        blocks. Each line is 50 pixels long.
      grade4_review_bee1_instruction: |-
        Now use the `repeat` block to collect all
        of the nectar and make all of the honey.
      grade4_review_bee2_instruction: Colecteaza nectarul din fiecare floare si fa
        miere la fiecare fagure de miere.
      grade4_review_bee3_instruction: Foloseste o bucla similara ca in puzzle-ul trecut,
        dar foloseste un viraj.
      grade4_scaffolded_project1_instruction: |-
        It is amazing how much you have learned!
        Let's put them together to make a game, step by step.
      grade4_scaffolded_project2_instruction: |
        Now let's get things moving! Use
        event handlers and actions to make your hero move.\r
        \r
        We've added these
        blocks to your tool box to help you.\r
      grade4_scaffolded_project3_instruction: |-
        Now that your game has a hero, it's
        time to start adding other actors and assigning them behaviors. \r
        \r
        Add
        two or more additional actors to your game and make them move. Do you want
        to have an actor patrol back and forth? Try using a these new blocks to bring
        these other components of your game to life!
      grade4_scaffolded_project4_instruction: |-
        Just getting the actors moving is
        a great step, but we need to program some interactions to make this really
        feel like a game. A simple way to do this is to add or remove points when
        actors collide with projectiles or each other. Find some interesting ways
        to change the score in your game.
      grade4_scaffolded_project4a_instruction: |-
        Just getting the actors moving is
        a great step, but we need to program some interactions to make this really
        feel like a game. A simple way to do this is to add or remove points when
        actors collide with projectiles or each other. Find some interesting ways
        to change the score in your game.
      grade4_scaffolded_project5_instruction: |-
        Now spend some time making sure the
        game works the way you want. Try including a way to win or lose your game.
      grade4_scaffolded_project6_instruction: |-
        You've finished! Now you can play
        your game or share it with your friends and classmates!
      grade5_artist_binary1_instruction: Codul binar este un mod de a reprezenta informatia
        utilizand numai doua optiuni. Aici, vom folosi optiunile "off"(reprezentat
        de numarul zero) si "on" (reprezentat de numarul 1). \r\r V-am pus la dispozitie
        o grila de pixeli prin care va puteti plimba si face design-uri intorcand
        doar anumite patrate. Il poti face pe artist sa deseneze "01010101"in cod
        binar in primul rand?
      grade5_artist_binary10_instruction: Click aici pentru a vedea indicii.
      grade5_artist_binary11_instruction: |-
        Free Play: Here's a blank canvas for
        you to draw on.  Have fun!
      grade5_artist_binary2_instruction: |-
        Aici avem o funcție care ia un şir binar format din 1 şi 0, care îndrumă artistul să le urmeze de la stânga la dreapta, de sus în jos. Artistul va umple spațiile când vede 1 şi le va ignora când vede 0. \r
        \r
        Rulează codul pentru a vedea cum artistul folosește şirul binar pentru a desena acest model.
      grade5_artist_binary3_instruction: |-
        Which of these binary strings could you
        loop 8 times to draw this image?
      grade5_artist_binary4_instruction: |-
        Can you draw this pattern by looping just
        three binary digits (0s and 1s)?
      grade5_artist_binary5_instruction: |-
        Each binary string represents one row of
        this picture. Can you rearrange them so it draws a smiley face instead of
        a frowny face?
      grade5_artist_binary6_instruction: |-
        Which 6 digit binary string, repeated 11
        times, will draw this image?
      grade5_artist_binary7_instruction: Care este cel mai scurt şir binar pe care
        tu poţi să-l rulezi repetat pentru a desena această imagine?
      grade5_artist_binary8_instruction: Finalizează acest desen.
      grade5_artist_binary9_instruction: |-
        Here's a higher resolution canvas to draw
        on - 16 pixels by 16 pixels!\r
        \r
        See what happens when we start to get
        creative with the bits?
      grade5_artist_for_loops1_instruction: 'Desenează acest triunghi de 50 de pixeli
        mărime. Tip: folosește un bloc "repetă".'
      grade5_artist_for_loops10_instruction: |-
        Can you figure out how to use all of
        the things you've learned to create this image?\r
        \r
        Need a hint? Click
        here.
      grade5_artist_for_loops1a_instruction: |-
        Try using a `for loop`to create this
        triangular design. Don't worry that the numbers are different than the last
        puzzle. As long as you turn by the right number of degrees, the artist will
        make the correct shape!
      grade5_artist_for_loops1b_instruction: |-
        Experiment with the `for` loop and
        play with the `counter` variable.
      grade5_artist_for_loops2_instruction: |-
        Use a `repeat` inside of a `for` loop
        to create this stack of triangles that goes from 50 pixels to 100 pixels.
      grade5_artist_for_loops3_instruction: "These triangles go from 20 pixel sides\nto
        200 pixel sides, and each triangle is 20 pixels larger than the last. "
      grade5_artist_for_loops4_instruction: "These squares start at 15 pixels long,\nthe
        largest is 300 pixels long, and each square is 15 pixels larger than the\nlast. "
      grade5_artist_for_loops5_instruction: |-
        Just one little change to the code from
        the last image can create this drawing. Can you figure out what that change
        is?\r
        \r
        Hint:  You need to remove something!
      grade5_artist_for_loops6_instruction: |-
        If you turn a little bit more or less
        than you normally would for a shape, it creates a neat effect. Try using some
        of the code from the last level, but turning 89 degrees to create this twisted
        square spiral.
      grade5_artist_for_loops7_instruction: |-
        Make three small changes to the code
        from the last level to get this!
      grade5_artist_for_loops7a_instruction: |-
        Take the angle down to 72 degrees to
        get a spiraled pentagon.
      grade5_artist_for_loops7b_instruction: |-
        Use the counter inside the `set alpha`
        block to get this faded center.\r
        (This hexagon pattern was made using a
        60 degree turn.)
      grade5_artist_for_loops8_instruction: "Remember back in a previous stage when\nwe
        used a variable to control the number of sides in a shape? We are going\nto
        do the same thing with the `counter` variable now. This pattern starts\nwith
        a triangle and adds one side at a time until it draws a decagon (10 sides).\nEach
        side should be 100 pixels long. "
      grade5_artist_for_loops9_instruction: |-
        Let's put it all together!  Using your
        knowledge of `for` loops and the `counter` variable, create this drawing where
        each shape has two more sides than the last.  Make sure that each side is
        10 times as long as the number of sides in the polygon.\r
        \r
        Very little
        of the code has been provided for you.
      grade5_artist_for_loopsfreeplay11_instruction: |-
        Inspiraţie pentru joc liber: Acum ai învăţat tot ce ai nevoie să ştii pentru a crea un model ca acesta! Dacă această imagine te inspiră, încearcă să faci ceva similar. Altfel, creează ceva pe cont propriu.\r
        \r
        Ai nevoie de un indiciu? Fă clic aici.
      grade5_artist_for_loopsfreeplay12_instruction: |-
        Free Play: Try using the `counter`
        variable with other drawing elements to make magical images like this one.
      grade5_artist_freeplay_instruction: |-
        Create your own project! This creation
        will be saved to your Projects dashboard so that you can easily edit it any
        time!
      grade5_artist_functionparameters10_instruction: "Inspiraţie pentru joc liber:
        Acum ai învăţat tot ce ai nevoie să ştii pentru a crea un model ca acesta!
        Dacă această imagine te inspiră, încearcă să faci ceva similar. Altfel, creează
        ceva propriu și personal.\\r\n\\r\nVrei să știi cum a fost făcut modelul nostru
        de inspirație? "
      grade5_artist_functionparameters11_instruction: |-
        Joc la alegere: Aici sunt funcțiile pe care le-ai scris tu și încă ceva în plus cu care să te joci. Desenează ceva minunat!
        Joacă-te cu lățimea peniței pentru a vedea cât de diferit arată desenele tale!
      grade5_artist_functionparameters7_instruction: |-
        This image is similar to the
        last. Can you use a `for` loop with your function to make this design?
      grade5_artist_functionparameters8_instruction: "Hai să edităm această funcţie
        \"desenează o formă\". Ea are deja un parametru \"lungime\". Acum, hai să
        edităm funcţia pentru a adăuga un parametru \"laturi\". Amintește-ți că unghiul
        de viraj pentru o formă dată este de 360 împărţit la numărul de laturi avute.
        Sugestie: Dimensiunea globală a fiecărei forme este de 200 de pixeli. \nîți
        amintești ecuaţia pentru a face forme de aceeaşi dimensiune, atunci când acestea
        au un număr diferit de laturi?"
      grade5_artist_functionparameters9_instruction: |-
        Challenge: Edit `draw a spiral
        edge` to use `length` and `sides` parameters, then recreate these shapes.
      grade5_artist_functionparameters9a_instruction: |-
        Finish off the `draw a spiral
        edge` function to also ask for a minimum length for the center of the spiral.
      grade5_artist_functionparameters9b_instruction: |-
        Can you figure out how to
        make this drawing using the function that you just created?
      grade5_artist_functionparameters_6_instruction: "Poţi completa acest desen?
        \nLaturile tuturor formelor sunt de 100 de pixeli lungime."
      grade5_artist_parameters_squares1_instruction: |-
        Click "edit" to fill in the
        function definition of "draw a square" and add a parameter. It should take
        a length parameter, just like the triangle. This time, draw 3 squares: 25,
        50 and 75 pixels in length, each 100 pixels apart.
      grade5_artist_parameters_squares1a_instruction: |-
        This program looks okay from
        here, but something isn't working right. See if you can figure out how to
        edit the function 'draw a square' to find the bug.
      grade5_artist_parameters_squares2_instruction: |-
        Create a function called 'draw
        a square' and use it to outline these four boxes. Make sure to add a parameter
        for 'length'! Starting from the upper right, the box widths are 50, 100,
        150, and 200.
      grade5_artist_parameters_squares2a_instruction: |-
        Edit the function to accept
        a parameter called `length`.
      grade5_artist_parameters_stars1_instruction: |-
        That last one is tough if you
        only use loops. Let's try drawing the same picture using this new 'function'
        that will help to **draw a star**.
      grade5_artist_parameters_triangles1_instruction: |-
        This program looks okay from
        here, but something isn't working right. See if you can figure out how to
        edit the function 'draw a square' to find the bug.
      grade5_artist_parameters_triangles1a_instruction: |-
        Today, we're going to try
        out a different, more powerful function editor. See if you can figure out
        how to edit the function 'draw a triangle' to find the bugs.
      grade5_artist_parameters_triangles1aa_instruction: |-
        Click "edit" to fill
        in the function definition of "draw a triangle" and add a parameter. It
        should take a length parameter, just like the triangle. This time, draw 3
        triangles: 25, 50 and 75 pixels in length, each 100 pixels apart.
      grade5_artist_parameters_triangles2_instruction: |-
        This drawing can be easily
        created using a new type of function that includes a parameter. The sides
        of each triangle are 25 pixels larger than the last.  The first triangle has
        25 pixel sides. Replace the '???' with the correct values to draw the picture.
      grade5_artist_parameters_triangles2a_instruction: "Observi ceva diferit \nla
        aceste blocuri de funcţie? Fă clic pe \"Rulează\" pentru a vedea ce se întâmplă."
      grade5_artist_parameters_triangles3_instruction: |-
        The code for this triangle
        function is broken.\r
        \r
        Can you edit the function to fix it, and then make
        triangles of length 150, 75, 25?
      grade5_artist_parameters_triangles4_instruction: |-
        The code for this triangle
        function is broken. Can you edit the function to fix it, and then make triangles
        of length 25, 50, and 75?
      grade5_artist_parameters_trianglesy_instruction: |-
        The code for this triangle
        function is broken.\r
        \r
        Can you edit the function to fix it, and then make
        triangles of length 150, 75, 25?
      grade5_artist_variables_freeplay10_instruction: |-
        Free Play: Experiment with
        the number of sides this shape has. Can you change the algorithm so that the
        overall size of the shape stays the same, no matter how many sides it has?
        Hint: If you divide your starting length by the number of sides, the length
        of each side will get shorter as the number of sides gets higher.
      grade5_artist_variables_freeplay14_instruction: |-
        Free Play: Check it out! Now
        your algorithm is nested within one more loop. Experiment with changing the
        values of your two variables to draw cool patterns.\r
        \r
        For even more effect,
        try playing with color!  Use random colors inside loops to see how it changes
        your design.
      grade5_artist_variables_freeplay15_instruction: |-
        Want a second peek at the
        inspiration design or the hints?  Click here!\r
        \r
        Otherwise, make a design
        all your own!
      grade5_artist_variables_freeplay16_instruction: |-
        Still playing?  Here is a
        blank canvas where you can create whatever you want!
      grade5_artist_variables_hexagons1_instruction: |-
        Let's try it again! \r
        \r
        Can
        you set the `length` variable to 60 to make this cool design with hexagons?
      grade5_artist_variables_letterT11_instruction: |-
        Here’s more complicated code
        using the same concepts from the last puzzle - what should you set the "sides"
        variable to in order to draw this picture made of squares?
      grade5_artist_variables_new1_instruction: |-
        Here is a program that will create
        an image. There are a few things that are wrong with it.
      grade5_artist_variables_octagons13_instruction: |-
        When a shape has lots of sides,
        each side needs to be shorter if you want the whole pattern to fit on the
        screen. \r
        Let's recreate the algorithm for this amazing pattern, but instead
        of manually setting the `length` variable, let's use a math block with the
        `sides` variable inside to make sure that each shape fits correctly. The perimeter
        of each polygon is 300 pixels.\r
        Need some hints?  Click here.
      grade5_artist_variables_pentagon8_instruction: |-
        Use what you learned in the
        last puzzle to create this hexagon using the "sides" variable.\r
        \r
        See
        how you could change just one value to draw a triangle,  square, pentagon,
        or octagon?
      grade5_artist_variables_pentagon9_instruction: |-
        Now, recreate the algorithm
        from the last level and create a pentagon with sides of length 150.
      grade5_artist_variables_pentagons1_instruction: |-
        Draw this pattern of pentagons
        with 100 pixel sides by setting the right value for `length` and dropping
        the `length` variable into all of the the correct places. \r
        \r
        See how
        you only have to set the value for `length` once, and the code uses the right
        value everywhere?
      grade5_artist_variables_pentagons12_instruction: |-
        Let's set the "sides"
        variable to 5. The more sides we add to this algorithm, the bigger this whole
        pattern gets! Notice that there is another variable called "length". We
        can now use that wherever we have a "move forward." Set the "length" variable
        to 75 for this shape.
      grade5_artist_variables_rectangle6_instruction: |-
        Now I want to make a rectangle
        that is twice as tall as it is wide. We've got a variable called "width"
        that needs to be set to 100. Can you use the math blocks to complete the code?
      grade5_artist_variables_square7_instruction: |-
        Here’s some code that can draw
        any regular polygon. There’s a new variable called sides that is set to 4.
        Can you use the sides variable (along with the math block) to turn the right
        amount regardless of how many sides there are in the polygon?\r
        \r
        Click
        here to go back to the hint!
      grade5_artist_variables_triangles2_instruction: |-
        Instead of using "move forward
        by 150," the "move" block is now referencing a variable called "length."
        Can you set "length" to 150 to draw this new triangle?
      grade5_artist_variables_triangles3_instruction: "Drag a number block to both\nthe
        `set length` block and the `repeat _ times` block to draw a set of 50\npixel
        triangles. "
      grade5_bee_for_loops1_instruction: |-
        Use a loop to collect the nectar from each
        flower.
      grade5_bee_for_loops10_instruction: |-
        What should your increment be to collect
        15, then 12, then 9, 6, 3 nectar?
      grade5_bee_for_loops11_instruction: "**Challenge:** Take what you've learned\nabout
        `for` loops and try to solve this problem. "
      grade5_bee_for_loops2_instruction: |-
        Add the code necessary to make sure the
        bee collects all the nectar. Look at how much code you need for this puzzle!
        (We'll learn a simpler way in the next puzzle.)
      grade5_bee_for_loops3_instruction: |-
        Try this puzzle using the `for` loop with
        `counter` variable and see how much shorter your code becomes.
      grade5_bee_for_loops4_instruction: "Replace the ??? in the \"for loop\" with\nthe
        largest amount of nectar the bee has to collect. "
      grade5_bee_for_loops6_instruction: |-
        You can also use a "for loop" to count
        down. Try gathering this nectar by counting down from 5 to 1 by 1.
      grade5_bee_for_loops7_instruction: |-
        Try collecting these flowers using an increment
        of 2.
      grade5_bee_for_loops8_instruction: |-
        You've got this! What should your increment
        be to collect 3, 6, 9, 12, 15 nectar?
      grade5_bee_for_loops9_instruction: |-
        Use the `counter` variable to navigate
        this garden with the fewest number of blocks possible.
      grade5_bee_parameters_new8_instruction: |-
        That's a great function you've created!
        You are officially on your own now. Collect all the nectar. Make all the honey.
      grade5_bee_parameters_new9_instruction: |-
        Bonus Challenge! If you are feeling
        ambitious, try this puzzle. It is possible to collect all of the nectar and
        make all of the honey using only a For loop, a Repeat loop, a function call,
        and a turn. Try it all on your own, or view the hints to build it step-by-step.
        Great job with this stage!
      grade5_pixelation_instruction: |-
        Encode an image of anything you like using
        binary. The binary language will be represented with '0' and '1' only.
      grade5_playlab_freeplay_instruction: "It's free play time! Have fun with all\nthe
        blocks in your tool box. "
      grade5_playlab_parameters_points1_instruction: "Here's the same game but most\nof
        the code is hidden. We've added a new function called `score_points.`\\r\n\\r\nAdd\na
        new parameter called `points` to the `player_score` function. \\r\n\\r\nThe\n`score_points`
        function should be able to both add and remove points from\n`player_score`
        depending on which actor is hit.\\r\nChanging the score by 1\nwill add a point,
        while changing the score by -1 will subtract a point.\\r\n\\r\nWhen\nyou're
        done, click \"Run\" to play.  When Dog scores 6 points, you will move\non
        to the next puzzle. "
      grade5_playlab_variables1_instruction: |-
        This time you don't have to write
        any code, just hit "Run" to play the game! In this game, you're the dog
        who is trying to collect more flags than the cat. Use the down arrow to control
        the dog. Press "Finish" when you're done playing.
      grade5_playlab_variables10_instruction: Completează parametrul de intrare "actor"
        astfel încât putem apela funcţia "patrol" pentru fiecare dintre actori. Amintiţi-vă,
        actorii corespund cifrelor 1, 2 şi 3.
      grade5_playlab_variables11_instruction: Adauga un alt parametru numit "viteza"
        in functia de "preluare". Incearca sa utilizezi un bloc "seteaza viteza" impreuna
        cu noul parametru "viteza" pentru a ajuta pinguinul sa ia ambele steaguri
        inainte ca alte spirite sa ajunga la unul din ele.
      grade5_playlab_variables12_instruction: |-
        Uită-te la codul furnizat pentru a vedea dacă îţi dai seama ce face fiecare bloc de instrucţiuni. \r
        \r
        Când eşti gata, foloseşte tastele săgeţi pentru a controla câinele şi adună toate steagurile.
      grade5_playlab_variables13_instruction: Foloseşte blocul de instrucţiuni "cand
        personajul atinge" pentru a trimite câinele înapoi în colţul din stânga-sus
        DOAR dacă acesta atinge oricare unul din celelalte personaje.
      grade5_playlab_variables14_instruction: "It's free play time! Have fun with\nall
        the blocks in your tool box. "
      grade5_playlab_variables1ask_instruction: |-
        This time, when you press 'run',
        you will see a 'prompt' asking you for a number. This number will be stored
        in a variable used to set the dog's speed.\r
        \r
        \r
        Pay attention to how
        this program is written!
      grade5_playlab_variables2_instruction: Cursa în acest ultim puzzle nu a fost
        foarte corectă! Schimbă variabila "dog_speed" pentru a fi sigur că poţi aduna
        mai multe steaguri decât pisica. Primul care adună 10 steaguri câştigă!
      grade5_playlab_variables3_instruction: Aici avem un nou tip de joc! Foloseşte
        pentru mutare tastele săgeţi stânga şi dreapta şi pentru a sării tasta săgeată
        sus. Vezi dacă poţi să aduni toate steagurile.
      grade5_playlab_variables4_instruction: |-
        Now we're using a variable called
        "height" to control how high the dog can jump. Update the "height" variable
        so that the dog can jump high enough to reach all the flags.
      grade5_playlab_variables5_instruction: |-
        You've seen now how a variable can
        be used to set the height of an actor's jump. How else could  you use a variable?\r
        \r
        Let's
        build a game! First we'll need a score. Try setting the 'points' variable
        to give yourself 10 free points!
      grade5_playlab_variables6_instruction: |-
        Foloseste sageata dreapta pentru a arunca placinta.\r
        \r
        In jocul nostru, cum putem inscrie puncte? Adauga 1 punct la variabila puncte atunci cand cainele loveste pisica cu o bucata de placinta. Foloseste evenimentul "cand actorul 2 loveste orice" pentru a updata scorul. Poti sa iti setezi singur variabila prin setarea "puncte = puncte+!". Cresteti scorul pana la 10 (cate un eveniment pe rand!) pentru a trece un level.
      grade5_playlab_variables6ask_instruction: |-
        This time, you need 100 points to
        win!  Don't worry though, you can choose how many points you earn each time
        you score a hit!\r
        Try adding the `ask` block and changing the number 1 out
        for the variable `value`.
      grade5_playlab_variables7_instruction: Frumos, acum hai să ne asigurăm că acest
        joc nu este prea uşor - de fiecare dată când câinele (actor 1) este lovit
        de un sandvich, tu ar trebui să pierzi un punct. Începe cu 10 puncte astfel
        încât să nu fie prea greu. Lasă scorul să scadă de la 10 la 0 pentru a schimba
        nivelul.
      grade5_playlab_variables71_instruction: "Aici este jocul nostru dintr-o etapa
        incipienta, dar majoritatea codului este ascuns. Este o functie noua \"inscrie_puncte.\"
        \\r\n\\r\n Editati functia astfel incat paramentrul 'Puncte' sa fie adaugat
        la variabila ''scorul_jucatorului\". \\r\n\\r\nVariabila \"scorul_jucatorului\"
        trebuie sa creasca de fiecare data cand \ncatelul eticheteaza pisica cu placinte,
        si descreste cand pisica prinde cainele.\\r\n\\r\nNota:\nCand ai terminat,
        apasa \"Ruleaza\" pentru a te juca. Cand cainele inscrie 6 puncte, vei trece
        la urmatorul puzzle. "
      grade5_playlab_variables81_instruction: "Am adăugat o ultimă funcţie pentru
        a o utiliza.\\r\n\\r\nFoloseste comanda \"if\" pentru a-ti programa jocul
        catre functie \"level_up\" dor cand \"player_score\" devine mai mare decat
        un numar.\n\\r\nDe exemplu: \"player_score\" > 6\\r\n\\r\nJoacă şi treci de
        nivelul 3 prin accesarea puzzle-lui următor. "
      grade5_playlab_variables9_instruction: |-
        Aici este o funcţie numită "patrol."
        \r
        \r
        Editeaz-o pentru a muta pisica în sus cu 400 pixeli şi apoi în jos cu 400 pixeli.
      grade5_playlab_variables_freeplay_instruction: |-
        Free Play time! Here are all
        of the variables we've played with so far in this stage, as well as a few
        more in case you want them. \r
        \r
        Notice that there are now so many blocks
        in our toolbox that they need to be organized!  Here, we've put each piece
        into an appropriate category.  Take some time to explore everything that is
        available. When you're done browsing, make a game or story using repeats,
        variables, and events.  \r
        \r
        Hint: scroll down to see all the commands
        in the workspace.
      grade5_playlab_variables_jump1_instruction: |-
        This puzzle uses a hidden function
        that makes the dog jump when the 'up' arrow is pressed. The height of the
        jumps can be set at the start of the game using the 'jumpPower' variable.
        Try to touch all of the flags!
      grade5_prompt_test_instruction: |-
        Variables aren't always numbers. What if
        you wanted to store a word or text? Experiment with the new `ask` block.
      gradeK_sequence_4_instruction: Try this one yourself from the beginning.
      gradek_adventurer_loops1_instruction: |
        This is Laurel the Adventurer!  Can
        you move her around and get gold?
      gradek_adventurer_loops10_instruction: |-
        Help me get all of the gold from this
        cave.
      gradek_adventurer_loops2_instruction: |-
        How can Laurel collect all five piles
        of gold using only one `[E-->]` block?
      gradek_adventurer_loops3_instruction: |-
        Can you fix Laurel's path to get all
        of this gold?
      gradek_adventurer_loops4_instruction: |-
        Use what you learned to get all of the
        coins.
      gradek_adventurer_loops4a_instruction: |-
        Add to this code to collect all of
        the coins.
      gradek_adventurer_loops5_instruction: |-
        What should you add to this code to
        get all of the gold?
      gradek_adventurer_loops6_instruction: Write the code to get all of this gold.
      gradek_adventurer_loops7_instruction: Write the code to get all of this gold.
      gradek_adventurer_loops7_challenge_instruction: |-
        **Challenge:** The gold goes
        all the way up these stairs!  Write the code to help me get it all.
      gradek_adventurer_loops8_instruction: |-
        Help me get all of the gold from this
        deep valley.
      gradek_adventurer_loops9_instruction: |-
        Help me get all of the gold from this
        cave.
      gradek_adventurer_loopsFP_instruction: |-
        Eureka!  Collect as much gold as you
        can!
      gradek_adventurer_loopsPre_instruction: |-
        This is Laurel the Adventurer.  Mover
        her around and get as much gold as you can!
      gradek_artist_loops1_instruction: |-
        Help the artist draw this line two times
        forward.
      gradek_artist_loops2_instruction: |-
        Our artist is trying to draw a line five
        times, but can't get it right.  Can you help?
      gradek_artist_loops3_instruction: |-
        Now, use a `repeat` loop to draw this line
        five times!
      gradek_artist_loops4_instruction: |-
        Draw a line seven steps long. This will
        become our horizon.
      gradek_artist_loops5_instruction: Let's put a nice hill in the back.
      gradek_artist_loops6_instruction: |-
        Use the `repeat` loop to add waves to the
        water.
      gradek_artist_loops7_instruction: We need a ladder up to the boat.
      gradek_artist_loops8_instruction: |-
        Challenge: The stairs down to the dock are
        broken.  Help me fix them.
      gradek_artist_loops9_instruction: |-
        Time to head back to land. Help me put down
        stones so I don't fall in!
      gradek_artist_loopsA_instruction: |-
        Help me build steps to watch the ship sail
        away.
      gradek_artist_loopsFP_instruction: |-
        The artist saw something funny in the distance.  Draw
        what you think he saw.
      gradek_artist_loopsPre_instruction: |-
        This is a new type of puzzle called "Artist".
        Play with the level and draw something fun.
      gradek_playlab_events1_instruction: |-
        Make your robot say "Hello!" when the
        button is clicked.
      gradek_playlab_events1a_instruction: |-
        Add a block so that when you click the
        "up" button, Olive the Cat walks up.
      gradek_playlab_events1c_instruction: |-
        Jorge the Dog wants to say "Hi there."  Can
        you help him?
      gradek_playlab_events2_instruction: |-
        Edit the code so that when the second
        bird is clicked, your program plays a sound!
      gradek_playlab_events2a_instruction: |-
        Add a block so that when you click "down"
        Olive the Cat walks down.
      gradek_playlab_events2c_instruction: |-
        Help Jorge the Dog get moving by connecting
        the `move left` block to the `when left` event block that is already in the
        workspace.
      gradek_playlab_events3_instruction: |-
        When the third bird is clicked, the background
        should change to a city. Can you add code to make this happen?
      gradek_playlab_events3a_instruction: |-
        When the third bird is clicked, the background
        should change to a city. Can you add code to make this happen?
      gradek_playlab_events3b_instruction: |-
        Add a button so that Olive the Cat moves
        right when you click the "right" button.
      gradek_playlab_events3c_instruction: |-
        Now, get Jorge to move right when the
        `right` button is clicked.
      gradek_playlab_events4_instruction: |-
        Add code to make something happen when
        the fourth bird is clicked. Be creative!
      gradek_playlab_events4a_instruction: |-
        Add a block so that Olive the Cat moves
        left when you click the "left" button.
      gradek_playlab_events4c_instruction: |-
        Add events to have Jorge move up and
        down when the `up` and `down` buttons are pressed.
      gradek_playlab_events5_instruction: |-
        About My Robot Project! Write code so
        that clicking on each bird shows a new fact about your robot.
      gradek_playlab_events5a_instruction: |-
        About My Robot Project! Write code so
        that clicking on each bird shows a new fact about your robot.
      gradek_playlab_events5c_instruction: |-
        Make this more interesting by changing
        the background and playing a random sound when Jorge is clicked.
      gradek_playlab_eventsA_instruction: |-
        Now, have the cat change to a random size
        AND have it play a random sound when you click the center button.
      gradek_playlab_eventsFP_instruction: |-
        Add anything you want to this game.  Can
        you make the dinosaur disappear when Jorge runs into him?
      gradek_playlab_eventsPre_instruction: |-
        This is a Play Lab level.  Move blocks
        to the workspace and see what happens!
      group test_instruction: Make a game
      harvester_Kahoot_instruction: |-
        Now help the farmer pick the corn, lettuce,
        **and** pumpkin.
      harvey_pixelation_instruction: |-
        Encode an image of anything you like using
        binary. The binary language will be represented with '0' and '1' only.
      harvey_snowflake_artist1_instruction: Get your snowflake ready for 3d printing!
      harvey_snowflake_artist2_instruction: Get your snowflake ready for 3d printing!
      harvey_tictactoe_instruction: |-
        Let's play a game! Draw as many X's as you
        can! Can you get 3 in a row?
      iceAgeLoopsforVideo_instruction: |-
        Can you get to the acorn with just one `move
        forward` block?
      iceage_click_hello_instruction: "Can you help Sid call for his friends when\nyou
        click on him? "
      iceage_click_hello_2018_instruction: "Can you help Sid call for his friends\nwhen
        you click on him? "
      iceage_free_play_instruction: 'Time to create your own game or story! '
      iceage_free_play_2018_instruction: 'Time to create your own game or story!

'
      iceage_free_playcourseF_IceAge_11_instruction: "Time to create your own game\nor
        story! "
      iceage_hello1_instruction: |-
        Help Sid say "Hello!" by dragging the `say` block
        out and connecting it to the bottom of the `when run` event.
      iceage_hello1_2018_instruction: |-
        Help Sid say "Hello!" by dragging the `say`
        block out and connecting it to the bottom of the `when run` event.
      iceage_hello2_instruction: |-
        Help Manny and Sid greet each other by using the
        the `actor ___ say` block twice.
      iceage_hello2_2018_instruction: |-
        Help Manny and Sid greet each other by using
        the the `actor ___ say` block twice.
      iceage_move_events_instruction: |-
        Write the code to help Scrat get all of the
        acorns!
      iceage_move_events_2018_instruction: |-
        Write the code to help Scrat get all
        of the acorns!
      iceage_move_to_actor_instruction: |-
        Connect a block to the `when actor touches`
        event to play a sound when Diego finds Manny.
      iceage_move_to_actor_2018_instruction: |-
        Connect a block to the `when actor
        touches` event to play a sound when Diego finds Manny.
      iceage_move_to_flag_instruction: |-
        Scrat is looking for his acorn! Can you help
        him move the last 200 pixels?
      iceage_move_to_flag_2018_instruction: |-
        Scrat is looking for his acorn! Can
        you help him move the last 200 pixels?
      iceage_repeat_instruction: |-
        Help Granny get some exercise by moving left and
        right repeatedly.
      iceage_repeat_2018_instruction: |-
        Help Granny get some exercise by moving left
        and right repeatedly.
      iceage_sound_and_points_instruction: "Can you finish this program to make it\nso
        that you both **play a sound** and **score a point** when Sid and Granny\ncollide? "
      iceage_sound_and_points_2018_instruction: "Can you finish this program to make\nit
        so that you both **play a sound** and **score a point** when Sid and Granny\ncollide? "
      iceage_throw_hearts_instruction: |-
        Use the `actor __ throw` command to have
        Sid (actor 1) throw hearts at Granny (actor 2) and set Granny's mood to happy
        when she gets hit with them.
      iceage_throw_hearts_2018_instruction: |-
        Use the `actor __ throw` command to
        have Sid (actor 1) throw hearts at Granny (actor 2) and set Granny's mood
        to happy when she gets hit with them.
      iceage_warn_ice_age_instruction: |-
        Change the scene to an icy background and
        set Sid’s (actor 1) speed to fast.
      iceage_warn_ice_age_2018_instruction: |-
        Change the scene to an icy background
        and set Sid’s (actor 1) speed to fast.
      jessie-test_instruction: Lots of instructions
      k-1 maze 1_instruction: Poţi să mă muţi spre vest pentru a ajunge la porc?
      k1stickerfreeplay_instruction: |-
        The artist saw something funny in the distance.  Draw
        what you think he saw.
      kikiTesta_instruction: |-
        Our adventurer wants to collect coins.  But she can
        only use 4 blocks to get them.\r
        \r
        Can you help her grab as many as she
        can using just 4 blocks?
      kikiTesting_instruction: |
        .\r
         .\r
        .\r
        .\r
        .\r
        .\r
        \r
        .\r
        \r
      level 'grade3_Loops_10_instruction: |-
        Such a busy bee!\r
        \r
        Help bee collect
        all of the nectar and make all of the honey with the fewest blocks possible.
      level 'grade3_Loops_11_instruction: |-
        The shape of this path is different than
        the others. \r
        \r
        Can you collect all of the nectar using as few blocks
        as possible?
      level 'grade3_Loops_12_instruction: |-
        Can you find the quickest way for the
        bee to collect all of the nectar and make all of the honey?
      level 'grade3_Loops_2_instruction: |-
        This time, use a loop to gather all of
        the nectar.
      level 'grade3_Loops_3_instruction: |-
        Use a `repeat` loop to collect all of the
        nectar.
      level 'grade3_Loops_4_instruction: |-
        Now use the `repeat` block to collect all
        of the nectar and make all of the honey.
      level 'grade3_Loops_5_instruction: |-
        What a beautiful field of flowers!   Help
        the bee visit each one.  Can you find a way to do it with fewer than 7 blocks?
      level 'grade3_Loops_6_instruction: |-
        How many times can loops help you in this
        puzzle?  \r
        \r
        Loops are your friend! Use a few of them to complete this
        puzzle with the fewest blocks possible.
      level 'grade3_Loops_7_instruction: |-
        Those flowers look tasty!\r
        \r
        Collect
        nectar from each of the flowers using the fewest blocks possible.
      level 'grade3_Loops_8_instruction: |-
        Collect all the nectar and make all of
        the honey using the fewest blocks possible.
      level 'grade3_Loops_9_instruction: |-
        Collect nectar from each flower and make
        honey at each honeycomb using the fewest blocks possible.
      level grade3_Loops_2_instruction: |-
        This time, use a loop to gather all of the
        nectar.
      loop pet test_instruction: |-
        Last time, you practiced using the "repeat forever"
        loop to make a sprite do something forever. This time, we will use it to make
        a virtual pet. \r
        \r
        This dog's name is Daisy. Daisy LOVES to snack on
        carrots. Use the "drag and drop" block to move the carrot to Daisy.
      loops_forvideo_angrybirds_ab_instruction: |-
        Use loops to get the bird to the
        pig!
      loops_forvideo_angrybirds_cf_instruction: |-
        Use loops to get the bird to the
        pig!
      loops_forvideo_bee_cf_instruction: |-
        Use loops to help the bee get nectar from
        all the flowers!
      loops_forvideo_collector_ab_instruction: |-
        Use loops to help the collector get
        all the gems!
      loops_forvideo_collector_cf_instruction: |-
        Use loops to help Laurel collect
        gems!
      loops_forvideo_harvester_ab_instruction: |-
        Use loops to help the harvester pick
        the corn!
      loops_forvideo_harvester_cf_instruction: |-
        Use loops to help the harvester pick
        her crops!
      loops_forvideo_iceage_ab_instruction: Use loops to get Scrat to the acorn!
      loops_forvideo_iceage_cf_instruction: Use loops to get Scrat to the acorn!
      love_spring_1_instruction: |-
        Let's celebrate Spring!  We have put some seeds
        in the ground to prepare for the season's flowers.  Can you cover them up
        so that the birds don't eat them?
      love_spring_2_instruction: |-
        Our flowers are in full bloom!  Now we need the
        bee to grab nectar from each one so he can make plenty of honey back at his
        hive!
      love_spring_3_instruction: |-
        Figure out how to change this code so that Robin
        chooses a number between 1 and 20.  \r
        \r
        When you're ready, press "Run"
        and play until you guess Robin's number!
      marina_gameLab_play_instruction: Clone this level and make your own blocks!
      mike3bit_instruction: |-
        We start you with the 4x2 image Maddie was creating,
        but we've left out the last few pixels. Finish off the image by figuring
        out which colors are missing and encoding them.
      mike3bitbird_instruction: |-
        Here's an example of an image made with 3-bit color.
        Try changing it to understand how it works. If you want to reset the image,
        press "Start Over".
      mike3bitfreeplay_instruction: |-
        Make something awesome and share it with your
        classmates! You can copy and paste the value of a pixel to use it repeatedly.
      mike3bitmario_instruction: |-
        A careless binary coder typed in ONE extra 0 or
        1 somewhere within this image's data. The extra bit that is causing Mario
        to glitch out! \r
        \r
        Delete the extra bit to restore Mario back to normal!
      pet game 1_instruction: |-
        Use the "make a new sprite" block to make yourself
        a pet!
      pet game 2_instruction: |-
        Your pet needs some exercise! Use the "add behavior"
        block to get them moving.
      pet game 3_instruction: |-
        Pets love toys! Use a second "make sprite" block
        to give your pet a toy, then use the "move towards" behavior to make your
        pet run to their new toy.
      pet game 4_instruction: |-
        When your pet gets to their toy, they get excited!
        Use the "when touches" block to detect when your pet gets to their toy.\r
        \r
        When
        that happens, use the "remove behavior" block to make them stop walking,
        and the "add behavior" block to make them have a dance party!
      pet game 5_instruction: |-
        You can add lots more things for your pet to interact
        with! Play around with the "set sprite" block and make more stuff anywhere
        you want it!
      pet game 6_instruction: |-
        It's important for pets to learn to follow commands.
        Use the "when clicked" block to teach your pet to only start wandering after
        you click on them.
      pet game 7_instruction: |-
        Pets need to learn to stop, too! Use the "when clicked"
        block to teach your pet to stop wandering after you click on them.
      pet game 8_instruction: |-
        Your pet now has two toys! Use the "when clicked"
        block to get them to move to the toy you click on
      pet game 9_instruction: |-
        Your pet has been so good, they deserve a treat. Use
        the "add behavior" block to make the bone draggable, then drag it to your
        pet.
      playEventsK1_instruction: |-
        This game is called "Play Lab".  See if you can
        figure out what each block does.
      playEventsK2_instruction: |-
        Jorge wants to say "Hi there."\r
        \r
        Can you
        help?
      playEventsK3_instruction: |-
        Jorge wants to be scratched behind the ears!  Can
        you make it so that when you click Jorge he is happy?
      playEventsK4_instruction: |-
        Can you make it so that Jorge the dog chases Robin
        the bird when you click the up arrow?
      playEventsK5_instruction: |-
        Now add code so that Robin flies away when you click
        the forward arrow.
      playEventsK6_instruction: |-
        Have Robin talk back to Jorge when you click on
        her.
      playEventsK7_instruction: What else can you do in this fun scene?
      playLabDebugVideo1_instruction: |-
        Jorge the Dog wants to say "Hi there."  Can
        you help him?
      ramp_artist_loops1_instruction: |-
        Move forward by 60 pixels to complete this
        puzzle.
      ramp_artist_loops1_2018_instruction: |-
        Move forward by 60 pixels to complete
        this puzzle.
      ramp_artist_loops2_instruction: |-
        Move forward five times and make this colored
        line.
      ramp_artist_loops2_2018_instruction: |-
        Move forward five times and make this
        colored line.
      ramp_artist_loops3_instruction: Use a `repeat` loop to draw five colored dashes.
      ramp_artist_loops3_2018_instruction: |-
        Use a `repeat` loop to draw five colored
        dashes.
      ramp_artist_loops4_instruction: |-
        What happens when you add a 72 degree right
        turn after everything else inside your loop?
      ramp_artist_loops4_2018_instruction: |-
        What happens when you add a 72 degree
        right turn after everything else inside your loop?
      ramp_artist_loops5_instruction: Use loops to draw this staircase.
      ramp_artist_loops5_2018_instruction: Use loops to draw this staircase.
      ramp_artist_loops6_instruction: Edit your loop to draw this staircase.
      ramp_artist_loops6_2018_instruction: Edit your loop to draw this staircase.
      ramp_artist_loops7_instruction: |-
        Look for a pattern and make this code shorter
        using loops!
      ramp_artist_loops7_2018_instruction: |-
        Look for a pattern and make this code
        shorter using loops!
      ramp_artist_loops8_instruction: |-
        Look for a pattern and make this code shorter
        using loops.
      ramp_artist_loops8_2018_instruction: |-
        Look for a pattern and make this code
        shorter using loops.
      ramp_artist_loops8_clone_instruction: |-
        Look for a pattern and make this code
        shorter using loops.
      ramp_artist_loops9_instruction: Solve this puzzle by drawing a square.
      ramp_artist_loops9_2018_instruction: Solve this puzzle by drawing a square.
      sample1_instruction: |-
        Our adventurer wants to collect coins.  But she can only
        use 4 blocks to get them.\r
        \r
        Can you help her grab as many as she can
        using just 4 blocks?
      sample10_instruction: Now you can use loops to draw whatever you like!
      sample10a_instruction: |-
        You have helped the adventurer and her bee!  As a reward,
        please stay and play around in my magical village. \r
        \r
        You should have
        everything you need to create a game of your own.
      sample2_instruction: |-
        Use what you've learned to help bee gather all of this
        honey using only the blocks that you have here.
      sample2a_instruction: |-
        Use what you've learned to help bee gather all of this
        honey using only 4 blocks.
      sample3_instruction: |-
        Now you can help bee make all of the honey using just
        the blocks in the toolbox.
      sample3assessment_instruction: |-
        Can you figure out how to gather all of this
        nectar in just one try?
      sample4_instruction: |-
        Our adventurer has found a stash of coins in this cave.\r
        \r
        Can
        you help her grab as many as she can using just 7 blocks?
      sample5_instruction: Help bee make all of the honey.
      sample6_instruction: 'Challenge: Help bee make all of the honey.'
      sample7assessment_instruction: |-
        Can you help bee make all of the honey in just
        one try?
      sample8_instruction: |-
        Look at this trove of coins! How many can you get the
        adventurer to grab?
      sample9_instruction: 'Use loops to help the artist connect all of the dots.

'
      sample9a_instruction: |-
        The wizard has found his potions!  Use everything you
        have learned to help him collect them.
      scrat 16 (copy 1)_instruction: |-
        Acorn! Acorn! Acorn! Use an "if" block to
        get me there with the fewest number of blocks.
      scrat 16_instruction: Ghindă! Ghindă! Ghindă! Utilizaţi un bloc "dacă" pentru
        a mă acolo cu cel mai mic număr de blocuri.
      scrat 17 (copy 1)_instruction: |-
        Ok, let's do that again for practice - this
        isn't very different, but watch out for the <insert obstacle name for Scrat>!
      scrat 17_instruction: Ok, haideți să exersăm din nou - nu este foarte diferit,
        dar uitați-vă după perete!
      scrat 18 (copy 1)_instruction: |-
        The "If-else" blocks checks a condition,
        and then does one thing OR another. To get me to the acorn try to use this
        new block.
      scrat 18_instruction: Blocurile "dacă-altfel" verifică o condiţie, şi apoi execută
        un lucru sau altul. Pentru a mă duce la ghindă încercaţi să utilizaţi acest
        bloc nou.
      scrat 19 (copy 1)_instruction: |-
        One more practice of the "if-else" block,
        can you get it right on your first try?
      scrat 19_instruction: Încă un exercițiu de practică cu blocul "dacă-altfel",
        poate reușești chiar prima încercare?
      scrat 20_instruction: Puteți să mai adăugați doar 3 blocuri pentru a mă ajuta
        să rezolv un labirint mai complex? Dacă o faceți bine, voi putea să merg pe
        orice traseu curbat, indiferent de lungime. Uraaa! Gheața se topește!
      skratDebugVideo1_instruction: Get Skrat to the Acorn.
      subgoal U3 L4 introducing subgoal labels_instruction: |-
        Introduce orient turtle
        and move turtle
      subgoal U3L2 Using Simple Commands_instruction: |-
        Draw a 1x1 square above and
        to the left of the turtle's starting position. Click to see full instructions.
      subgoalU3L2_TurtleSquare_right_instruction: |-
        Draw a square to the front and
        to the right of the starting location. (Click to show full instructions)
      template test_instruction: what up
      testArtistForTestK_instruction: |-
        The Artist is trying to draw a line five times,
        but can't get it right.  Can you help?
      test_sarah_instruction: hi
      u3-old-drawing-view_instruction: DO This
      valentine_artist_03_instruction: Now try something on your own!
      weird_playLab_instruction: |-
        About My Robot Project! Write code so that clicking
        on each bird shows a new fact about your robot.
