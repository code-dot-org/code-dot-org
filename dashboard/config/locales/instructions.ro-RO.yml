"ro":
  data:
    instructions:
      2-3 Artist 1 new_instruction: Bună, eu sunt un artist. Poţi scrie codul care
        mă face să desenez orice. Folosește câteva blocuri pentru a mă face să desenez
        peste liniile de gri din imagine. (Fiecare linie este de 100 de pixeli lungime)
      2-3 Artist 11_instruction: 'Dă semnului stop o bordură făcând un octogon cu
        8 laturi, fiecare de 100 de pixeli lungime. Cu câte grade ar trebui să rotești?
        (Sugestie: cât este 360 împărţit la 8?) '
      2-3 Artist 12_instruction: Setează blocul "repetă ori" astfel încât acesta să
        creeze un "cerc" pentru a termina ochiul. Dacă fiecare mişcare se roteşte
        la dreapta cu un grad, de câte ori trebuie să repeți pentru a finaliza cercul?
        180? 360? 500?
      2-3 Artist 2 new_instruction: 'Această casă are un perete pe jumătate terminat.
        Fiecare latură este de 100, dar peretele pe jumătate terminat este de numai
        50. Completează peretele. '
      2-3 Artist 2_instruction: "This house has a half-finished wall. Each side is\n100,
        but the half-finished wall is only 50. Complete the wall. \n"
      2-3 Artist 3.4_instruction: Blocul de salt mută artistul fără a desena. Trasează
        linia punctată folosind și blocul de salt şi cel de desen.
      2-3 Artist 3_instruction: Această pălărie are o înălțime de 100 de pixeli. Desenează
        o pălărie care este cu 70 de pixeli mai mică.
      2-3 Artist 3new_instruction: Pălăria roşie are o înălțime de 100 de pixeli.
        Termină de desenat o pălărie neagră, care este mai scurtă cu 70 de pixeli.
        Lăţimea pălăriei neagre este de 50 de pixeli.
      2-3 Artist 4_instruction: Ajută-mă să termin casa pentru această pisică.
      2-3 Artist 5_instruction: Înlocuiește acest cod cu un bloc "repetă ori" pentru
        a desena aceeaşi casă folosind numai 3 blocuri.
      2-3 Artist 6_instruction: 'Această casă are nevoie de un acoperiş! Desenează
        triunghiul.  Sugestie: toate trei laturile au aceeaşi lungime.'
      2-3 Artist 7_instruction: 'Termină de desenat jumătatea dreaptă a ultimei ferestre.
        Fiecare geam pătrat al ferestrei are 25 de pixeli lățime. '
      2-3 Artist 8_instruction: Completează camerele pentru fiecare dintre animale
        prin împărțirea dreptunghiul în 2 pătrate de dimensiuni egale. Dreptunghiul
        are 200 de pixeli în lăţime şi 100 de pixeli în înălţime.
      2-3 Artist 9_instruction: Finalizează acest zmeu
      2-3 Artist Assessment 1_instruction: 'Evaluare: Termină de desenat ultimul dinte,
        25 de pixeli în lățime și 25 de pixeli în înălțime.'
      2-3 Artist Debugging 1_instruction: Poți face această pălărie până la vârf de
        100 lungime?
      2-3 Artist Debugging 10_instruction: 'Butonul de direcţie de pe comanda mea
        de joc este prea îngust. Sugestie: Faceți-l mai lat cu 10 pixeli'
      2-3 Artist Debugging 11_instruction: Ajută-mă să termin frumosul meu fulg de
        nea. De câte ori trebuie să "repet" pentru a-l termina?
      2-3 Artist Debugging 12_instruction: Trebuie să adaug un val de ocean la această
        scenă. Poți să mă ajuți?
      2-3 Artist Debugging 2_instruction: 'Codul pentru cele trei mustăți pe care
        le vezi este greșit. Indiciu: fiecare mustață are o lungime de 75 de pixeli.
        Repară acest cod pentru a desena mustățile.'
      2-3 Artist Debugging 3_instruction: 'Barca mea are o gaură! Poți să o repari
        schimbând unghiul liniei? Indiciu: ultimul unghi este greșit cu 15 grade.'
      2-3 Artist Debugging 4_instruction: Care este imaginea pe care încercăm să o
        desenăm? Termină conectarea punctelor utilizând liniile și unghiurile potrivite.
      2-3 Artist Debugging 5_instruction: 'Codul pentru piciorul și laba piciorului
        pe care le vezi e greșit. Indiciu: piciorul e prea lung, poate trebuie să
        mai ștergem un pas (jocul de cuvinte este intenționat)'
      2-3 Artist Debugging 6_instruction: Se pare că stau pe un scaun căruia îi lipsește
        un picior. Editează blocurile pentru a desena piciorul.
      2-3 Artist Debugging 7_instruction: Se pare că litera C în cod este desenată
        invers. Poţi să o faci să arate ca un C?
      2-3 Artist Debugging 8_instruction: Morișca mea nu e gata. De câte ori trebuie
        folosit blocul "repetă" pentru a fi gata?
      2-3 Artist Debugging 9_instruction: 'Codul pentru această tulpină este incorect.
        Sugestie: Unghiul este greşit cu 60 de grade'
      2-3 Artist Debugging Assessment 1_instruction: 'Forma aceasta este prea mică.
        Poți să o faci mai mare? Indiciu: ar trebui să fie cu 75 de pixeli mai lungă
        pe fiecare parte.'
      2-3 Artist Free Play_instruction: Joc liber! Desenează orice ți-ar plăcea.
      2-3 Artist Functions 1_instruction: |
        Salut! Eu zombie artist. Eu iubesc desenul!
        Ajută-mă să desenez ochelarii pătraţi. Sugestie: puntea dintre lentile este cu 25 de pixeli mai scurtă decât latura pătratului.
      2-3 Artist Functions 10_instruction: 'Iată doua funcții: una pentru a desena
        o roată dințată mare și una pentru a desena o roată dințată mică. Folosește-le
        pentru a desena interiorul unei mașinării!'
      2-3 Artist Functions 11.5_instruction: Aici este aceeși funcție "Desenează un
        hexagon". Ce se întâmplă dacă întorci cu doar 60 de grade de fiecare dată
        când buclezi?
      2-3 Artist Functions 11_instruction: Am redenumit funcția "desenează un pătrat"
        în "desenează un hexagon", dar încă desenează pătrate! Poți să modifici funcția
        "desenează un hexagon" astfel încât să deseneze un hexagon cu laturile de
        50 de pixeli și apoi să desenezi imaginea folosind această funcție?
      2-3 Artist Functions 12_instruction: 'Funcţiile sunt foarte utile pentru a desena
        de mai multe ori lucruri complicate. Puteţi utiliza funcţia "desenează o floare"
        pentru a completa restul jardinierei? (Sugestie: distanța dintre plante este
        de 100 de pixeli)  '
      2-3 Artist Functions 13_instruction: Aveți la dispoziție patru functii. Folositi-le
        orice mod doriţi, în interiorul uneia sau mai multor bucle, pentru a face
        fotografii care aveţi posibilitatea să partajaţi cu prietenii dvs. Apăsaţi
        "rulează" pentru a vedea un exemplu.
      2-3 Artist Functions 2_instruction: Funcțiile îțî permit să construiești blocuri
        noi! Am mutat blocurile ce deseneaza un pătrat într-o funcție numită "desenează
        un pătrat". Poți folosi această funcție pentru a crea ochelarii? Pătratele
        au 75 de pixeli între ele.
      2-3 Artist Functions 3_instruction: Editaţi funcţia pentru a desena un pătrat
        cu latura de 115 şi pentru a desena ochelari mai mari. Distanța dintre pătrate
        este acum de 45 de pixeli.
      2-3 Artist Functions 4_instruction: Utilizaţi blocul "repetă" pentru a desena
        aceste trei pătrate.
      2-3 Artist Functions 7_instruction: 'Folosește funcţia "desenează o casă" pentru
        a desena două case folosind doi parametri diferiți. (Sugestie: prima casă
        are 100 de pixeli).'
      2-3 Artist Functions 9_instruction: Aici este o funcţie care desenează un fulg
        de nea. Experimentează cu aceasta pentru a crea o scenă de iarnă! În acest
        nivel te poți juca liber, așa că nu există nici un puzzle de rezolvat. Distracţie
        plăcută!
      2-3 Artist Loops 1_instruction: Puteţi face un hexagon cu laturile de 100 pixeli
        , pentru a termina celula? Amintește-ți, asta înseamnă că va trebui să te
        rotești doar 60 de grade!
      2-3 Artist Loops 10_instruction: Ce se întâmplă cu designul atunci când facem
        ca pasul final spre înainte să fie doar pe jumătate de lung?
      2-3 Artist Loops 11_instruction: Acum hai sa punem *altă* buclă în jurul întreagii
        noastre creaţii!  Nu uita să adăugi un unghi la sfârşitul buclei exterioare.
      2-3 Artist Loops 2_instruction: Utilizează acum un bloc "repetă" pentru a-i
        face celulei un inveliș.
      2-3 Artist Loops 4_instruction: Vrei să vezi ce se întâmplă atunci când vom
        repeta acea formă de mai multe ori, folosind o buclă?
      2-3 Artist Loops 5_instruction: Acum hai să facem o mică modificare la bucla
        şi să vedem cât de mult se schimbă imaginea noastră.
      2-3 Artist Loops 6_instruction: Adaugă încă o mișcare (move) și o rotație (turn)
        în interiorul buclei şi vezi cum se schimbă design-ul.
      2-3 Artist Loops 7_instruction: Putem folosi bucle pentru a face tot felul de
        poligoane.  Poţi crea un romb în interiorul acest hexagon?
      2-3 Artist Loops 8_instruction: Hai sa punem ambele elemente in interiorul unei
        bucle.
      2-3 Artist Loops 9_instruction: Vom bucla aceleaşi elemente, dar acum am de
        gând să adăug unele distante dintre ele. \r Utilizează acelaşi cod ca înainte,
        dar adaugă un pas înainte la sfârşitul buclei din exterior.
      2-3 Artist Loops New 1_instruction: Hai să desenăm capul acestui robot! Poți
        face un pătrat cu laturi de 100 de pixeli?
      2-3 Artist Loops New 10_instruction: Hai acum să conectăm o grămadă de V-uri
        împreună, desenându-le într-o buclă.
      2-3 Artist Loops New 11_instruction: Hai să-l desenăm de data aceasta de 24
        de ori. La acest cod, adaugă un viraj la stânga de 30 de grade și pune-l cu
        totul într-un block - repetă.
      2-3 Artist Loops New 12_instruction: 'Desenează un diamant cu laturi de 100
        de pixeli. '
      2-3 Artist Loops New 13_instruction: Deseneaza acum un diamant de 3 ori, folosind
        o buclă.
      2-3 Artist Loops New 14_instruction: Acum haide să desenăm diamantul de 10 ori,
        dar fă rotire de 90 de grade între fiecare diamant.
      2-3 Artist Loops New 15_instruction: Deseneaza ceva distractiv.
      2-3 Artist Loops New 2_instruction: Aici este o parte din codul pe care l-ai
        folosit pentru a desena acel pătrat. Ce se întâmplă dacă utilizezi blocul
        - repetă pentru a rula acest cod de 4 ori?
      2-3 Artist Loops New 9_instruction: Desenează un V simplu cu ambele laturi de
        50 de pixeli pentru a completa săgeata.
      2-3 Artist Match Hex Pic_instruction: 'Potrivire: poti ajuta cu desenarea hexagonului?'
      2-3 Artist Match Rho Pic_instruction: 'Potrivire: poti completa codul?'
      2-3 Artist Match Sq Pic_instruction: 'Potrivire: completeaza codul lipsa'
      2-3 Artist Match Tri pic_instruction: 'Potrivire: adauga codul lipsa.'
      2-3 Artist Nested Loops 1_instruction: "Ai folosit înainte bucle pentru a desena
        forme, dar ști că poţi pune o buclă în interiorul o altă buclă? \\r \nPune
        în buclă acest întreg bloc de trei ori pentru a desena modelul."
      2-3 Artist Nested Loops 10_instruction: Pune acest cod în buclă de 12 ori pentru
        a completa modelul.
      2-3 Artist Nested Loops 11_instruction: Pune acest cod în buclă de 4 ori pentru
        a finaliza modelul, virează la 90 de grade după fiecare cerc.
      2-3 Artist Nested Loops 12_instruction: Pune acest cod în buclă de 12 ori pentru
        a finaliza cârlionții.
      2-3 Artist Nested Loops 2_instruction: Acum fă buclă cu triunghiul de 6 ori.
        După fiecare triunghi va trebui să faci întoarcere de 60 de grade înainte
        de a-l desena pe următorul.
      2-3 Artist Nested Loops 3_instruction: Va fi necesar să așezi triunghiul în
        buclă de 12 ori pentru a desena acest model. Împarte numărul de grade dintr-un
        cerc (360) la numărul de forme pe care le vei desena (12), pentru a-ți da
        seama cât de mult să se vireze după fiecare formă.
      2-3 Artist Nested Loops 4_instruction: 'Folosește bucla de 12 ori cu acest diamant
        pentru a desena o floare. Sugestie: 12 diamante sunt ceva similar celor 12
        triunghiuri pe care le-ai făcut mai devreme - cât de mare trebuie să fie întoarcerea
        după fiecare formă?'
      2-3 Artist Nested Loops 5_instruction: Umple ferestrele acestei clădiri cu o
        buclă de nesting. Ferestrele au lungimea de 20 de pixeli și sunt la 20 de
        pixeli distanță între ele.
      2-3 Artist Nested Loops 6_instruction: Acest dinozaur are 8 țepi de-a lungul
        cozii; fiecare țeapă are 30 de pixeli lungime. Folosește triunghiul în buclă
        de 8 ori, dar asigură-te că se "mută înainte" după fiecare din ele.
      2-3 Artist Nested Loops 7_instruction: Folosește bucla de 10 ori cu acest triunghi
        pentru a desena soarele. Va trebui să muți și să virezi după fiecare triunghi.
        Poți calcula cât de mare trebuie să fie virajul prin împărțirea numărului
        de grade dintr-un cerc la numărul de forme care formează soarele.
      2-3 Artist Nested Loops 8_instruction: Acum hai să adăugăm niște iarbă imaginii
        noastre. Fiecare smoc de iarbă este plasat la o distanță de 50 pixeli.
      2-3 Artist Nested Loops 9_instruction: Vom finaliza acest desen prin adăugarea
        unei flori. Pune diamantul în buclă de 12 ori pentru a desena floarea ta.
      2-3 Artist Nested Loops Free Play_instruction: Joc la alegere, desenează ceva
        super cu bucle de nesting.
      2-3 Bee Conditionals 1_instruction: Bună! Sunt o albină. Ajută-mă să culeg nectar
        din floare.
      2-3 Bee Conditionals 10_instruction: |
        Florile violete pot avea 1 sau 0 nectar. Ai grijă să nu colectezi nectar dintr-o floare violetă dacă aceasta nu are deloc.\r
      2-3 Bee Conditionals 11_instruction: Colectează nectar din florile care au nectar.
      2-3 Bee Conditionals 12_instruction: Folosește o buclă pentru a verifica și
        colecta nectarul din toate aceste flori.
      2-3 Bee Conditionals 13_instruction: |
        Colectează nectar și fă miere. Sugestie:
        ce se întâmplă dacă folosești condiția "dacă nectar" în cazul unei flori roșii? Poți
        finaliza aceasta cu o buclă?
      2-3 Bee Conditionals 14_instruction: Colectează nectarul şi fă miere. Ai grijă
        să nu colectezi nectarul de la o floare violetă, dacă aceasta nu are deloc.
      2-3 Bee Conditionals 15_instruction: Colectează nectarul din toate cele patru
        flori.
      2-3 Bee Conditionals 2_instruction: Bună, sunt o albină! Ajută-mă să colectez
        tot nectarul din flori. Folosește o buclă.
      2-3 Bee Conditionals 3_instruction: Ajută-mă să adun tot nectarul din flori
        şi să fac miere. Utilizează o buclă.
      2-3 Bee Conditionals 4_instruction: Ajută-mă să strâng tot nectarul din flori
        şi să fac toată mierea.
      2-3 Bee Conditionals 5_instruction: "Florile violete pot avea ori 1 ori 0 \nnectar,
        dar nu știi exact care din ele! Ai grijă să nu colectezi nectar dintr-o \nfloare
        violetă dacă aceasta nu are deloc. Verifică dacă nectarul este egal cu 1 \nfolosind
        blocul - dacă.\n"
      2-3 Bee Conditionals 6_instruction: "Verifică această floare cu un bloc - dacă
        \npentru a vedea dacă aceasta are nectar.\n"
      2-3 Bee Conditionals 7_instruction: Strânge nectar de la fiecare floare dacă
        aceasta are.
      2-3 Bee Conditionals 8_instruction: "Acest câmp are flori roşii şi violet. \nFlorile
        roşii au o cantitate știută de nectar, dar nectarul din floarea violetă este
        necunoscut. \nColectează tot nectarul.\n"
      2-3 Bee Conditionals 9_instruction: Colectează tot nectarul din fiecare floare.
      2-3 Bee Conditionals Assessment 1_instruction: "Evaluare: Colectează tot \nnectarul.
        Fii atent(ă) să nu colectezi nectar de la o floare violetă dacă acesta nu
        \nare deloc.\n"
      2-3 Bee Debugging 1_instruction: "Aceste blocuri chiar mă supără. Repară \neroarea(erorile)
        pentru a colecta tot nectarul şi a face toată mierea.\n"
      2-3 Bee Debugging 10_instruction: "Aceste blocuri chiar mă supără. Repară \neroarea(erorile)
        pentru a colecta tot nectarul şi a face toată mierea.\n"
      2-3 Bee Debugging 2_instruction: "Aceste blocuri chiar mă supără. Repară \neroarea(erorile)
        pentru a colecta tot nectarul şi a face toată mierea.\n"
      2-3 Bee Debugging 3_instruction: "Aceste blocuri chiar mă supără. Repară \neroarea(erorile)
        pentru a colecta tot nectarul şi a face toată mierea.\n"
      2-3 Bee Debugging 4_instruction: "Aceste blocuri chiar mă supără. Repară \neroarea(erorile)
        pentru a colecta tot nectarul şi a face toată mierea.\n"
      2-3 Bee Debugging 5_instruction: "Aceste blocuri chiar mă supără. Repară \neroarea(erorile)
        pentru a colecta tot nectarul şi a face toată mierea. Poți\nfolosi acum rulează
        și pas.\n"
      2-3 Bee Debugging 6_instruction: "Aceste blocuri chiar mă supără . Repară \neroarea(erorile)
        pentru a colecta tot nectarul şi a face toată mierea. \n"
      2-3 Bee Debugging 7_instruction: "Aceste blocuri chiar mă supără. Repară \neroarea(erorile)
        pentru a colecta tot nectarul şi a face toată mierea.\n"
      2-3 Bee Debugging 8_instruction: "Aceste blocuri chiar mă supără. Repară \neroarea(erorile)
        pentru a colecta tot nectarul şi a face toată mierea.\n"
      2-3 Bee Debugging 9_instruction: "Aceste blocuri chiar mă supără. Repară \neroarea(erorile)
        pentru a colecta tot nectarul şi a face toată mierea.\n"
      2-3 Bee Debugging Assessment 1_instruction: "Evaluare: Aceste blocuri \nchiar
        mă supără . Repară eroarea(erorile) pentru a colecta tot nectarul şi a face
        \ntoată mierea.\n"
      2-3 Bee Functions 1_instruction: "Funcţiile sunt blocuri de cod care efectuează
        \no activitate. Utilizează funcţia \"obţine 2 nectare\" pentru a colecta nectarul
        de la fiecare \nfloare.\n"
      2-3 Bee Functions 10_instruction: "Florile violete pot avea ori 1 ori 0 nectar.
        Creează \no funcție care colectează nectar numai din flori violete care au
        nectar.\n"
      2-3 Bee Functions 2_instruction: "Funcţiile sunt blocuri de cod care efectuează
        \no activitate. Utilizează funcţia \"obţine 5\" pentru a colecta 5 nectare
        dintr-o data. De asemenea, asigură-te că\nfolosești și o buclă pentru a obține
        o numarătoare ideală de bloc.\n"
      2-3 Bee Functions 3_instruction: Colectează tot nectarul din fiecare floare.
      2-3 Bee Functions 4_instruction: "Funcţia \"mută şi obține nectar\" face albina
        să se întoarcă, să colecteze nectar şi apoi returnează albina la locul de
        unde a început. Folosește \nfuncţia pentru a colecta tot nectarul.\n"
      2-3 Bee Functions 5_instruction: "Acum există mai mult nectar în flori. \nEditează
        funcţia dată astfel încât ea să colecteze 4 nectaruri şi folosește-o pentru
        a colecta tot nectarul din flori.\n"
      2-3 Bee Functions 6_instruction: |
        Acum folosește aceeași funcție la colectarea nectarului
        din trei flori.
      2-3 Bee Functions 7_instruction: "Florile sunt acum mai departe. Editează \nfuncţia
        dată şi utilizeaz-o pentru a colecta tot nectarul din flori.\n"
      2-3 Bee Functions 8_instruction: "Creează-ți propria funcţie care obține 7 nectaruri,
        \nse mişcă înainte şi face 7 unități de miere. Utilizează funcţia la colectarea
        nectarului din fiecare \nfloare şi fă miere la fiecare fagure de miere.\n"
      2-3 Bee Functions 9_instruction: "Creează-ţi propria funcţie care se duce în
        jos pe \ncale, obține nectar, face miere şi, apoi, returnează albina în partea
        de sus a căii.\n"
      2-3 Bee Functions Assessment 1_instruction: 'Evaluare: Folositi functia data
        pentru a colecta nectar din fiecare floare.'
      2-3 Bee Functions Assessment 2_instruction: 'Evaluare: Creează o funcţie pentru
        a produce 3 miere dintr-o dată.'
      2-3 Bee Loops 1_instruction: 'Fiecare floare contine o unitate de nectar. Colecteaza
        nectarul din fiecare floare. '
      2-3 Bee Loops 10_instruction: Poti folosi o bucla cat timp inauntrul altor doua
        bucle pentru a colecta tot nectarul?
      2-3 Bee Loops 11_instruction: Foloseste o bucla cat timp pentru a colecta tot
        nectarul florilor din acest camp.
      2-3 Bee Loops 12_instruction: Foloseste o bucla cat timp pentru a colecta tot
        nectarul florilor din acest camp.
      2-3 Bee Loops 13_instruction: "Evaluare: Folosește blocul \"repetă\" pentru
        a colecta \ntot nectarul.\n"
      2-3 Bee Loops 1A_instruction: 'Hei, eu sunt o albină. Mă poţi ajuta să strâng
        nectarul din aceste flori? '
      2-3 Bee Loops 2_instruction: Foloseste o bucla pentru a colecta nectarul si
        a face miere.
      2-3 Bee Loops 2A_instruction: Poti face aceasi sarcina mai usor cu o bucla?
      2-3 Bee Loops 3_instruction: Colecteaza nectarul din fiecare floare si fa miere
        la fiecare fagure de miere.
      2-3 Bee Loops 3A_instruction: Poti folosi o bucla pentru a colecta tot nectarul?
      2-3 Bee Loops 3B_instruction: Acum foloseste noul bloc de repetitie pentru a
        colecta tot nectarul si a face toata mierea.
      2-3 Bee Loops 4_instruction: Foloseste o bucla similara ca in puzzleul trecut,
        dar foloseste un viraj.
      2-3 Bee Loops 4A_instruction: |
        Ce se intampla daca repeti aceasi secventa de 3 ori?
        Nu uita sa faci mierea la sfarsit!
      2-3 Bee Loops 5_instruction: Foloseste o bucla pentru a merge in jos si colecteaza
        tot nectarul.
      2-3 Bee Loops 6_instruction: Foloseste o bucla pentru a colecta nectarul din
        fiecare floare si a face miere la fiecare fagure de miere.
      2-3 Bee Loops 7_instruction: Pune aceste blocuri intr-o bucla pentru a colecta
        nectarul din fiecare floare.
      2-3 Bee Loops 8_instruction: Aceste flori mov au o cantitate necunoscuta de
        nectar. Foloseste bucla "cat timp nectar" pentru a colecta tot nectarul. Aceasta
        bucla va merge atat timp cat conditia este indeplinita, in acest caz nectar
        > 0.
      2-3 Bee Loops 9_instruction: Bucla cat timp poate face aceasi actiune ca si
        declaratia daca intr-o bucla. Adauga o bucla cat timp acestui cod pentru a
        face aceasi sarcina.
      2-3 Bee Loops Assessment 1_instruction: "Evaluare - utilizează o buclă \"în
        timp ce\" pentru a colecta \ntot nectarul din această floare.\n"
      2-3 Maze 1_instruction: "Mă poți ajuta să prin porcul buclucaș? Stivează două\nblocuri
        \"mută înainte\" împreună și apasă \"Rulează\". \n"
      2-3 Maze 10_instruction: Ghidează-mă la răutatea verde! (Atenție la TNT)
      2-3 Maze 11_instruction: |
        Du-mă la floare, mi-e foame! De căte ori
        trebuie să repeți un bloc?
      2-3 Maze 12 (copy 1)_instruction: |
        Poți înlocui răspunsul anterior cu
        doar două blocuri? (Sugestie: Creează o buclă folosind un bloc "repetă ori".)
      2-3 Maze 12 (copy 2)_instruction: |
        Poți înlocui răspunsul anterior cu
        doar două blocuri? (Sugestie: Creează o buclă folosind un bloc "repetă ori".)
      2-3 Maze 12 (old)_instruction: Du-mă la porc, acum cu blocul Repetă ori!
      2-3 Maze 12_instruction: |
        Poți înlocui aceste cinci blocuri cu doar două blocuri?
        (Sugestie: Creează o buclă folosind un block "repetă ori".)
      2-3 Maze 13 (old)_instruction: Du-mă la porc, acum cu blocul Repetă până când!
      2-3 Maze 13_instruction: Du-mă la porc folosind doar două blocuri.
      2-3 Maze 14 (old)_instruction: Du-mă la porc cu blocul Repetă până când!
      2-3 Maze 14_instruction: "Du-mă la floarea-soarelui! (Unde este acel bloc \"repetă
        \nori\", când am nevoie de el?)\n"
      2-3 Maze 15 (old)_instruction: Du-mă la porc cu blocul Repetă până când!
      2-3 Maze 15_instruction: Utilizează două bucle pentru a ajunge la porc folosind
        mai puține blocuri.
      2-3 Maze 16 (old)_instruction: Du-mă la porc cu blocul Repetă până când!
      2-3 Maze 16 before_instruction: Du-mă la porc.
      2-3 Maze 16_instruction: Du-mă la floarea-soarelui. Buclează secvența!
      2-3 Maze 2_instruction: Acest porc îmi zbârlește penele. Ajută-mă să-l prind!
      2-3 Maze 3_instruction: "Trasează calea şi du-mă la porcul buclucaș. Evită \nTNT-ul
        sau penele vor zbura!\n"
      2-3 Maze 4_instruction: Ghidează-mă la răutatea verde! (Atenție la TNT)
      2-3 Maze 5_instruction: Ghidează-mă la răutatea verde! (Atenție la TNT)
      2-3 Maze 6_instruction: |
        Păstrează-ți calmul și ajută-mă să găsesc porcul rău. Altfel
        s-ar putea să mă supăr!
      2-3 Maze 7_instruction: Ghidează-mă la răutatea verde! (Atenție la TNT)
      2-3 Maze 8_instruction: Du-mă la porc!
      2-3 Maze 9_instruction: Ghidează-mă la răutatea verde! (Atenție la TNT)
      2-3 Maze Loops 1_instruction: Poţi să mă duci la porc din 5 mutări?
      2-3 Maze Loops 17_instruction: Du-mă la floarea-soarelui!
      2-3 Maze Loops 18_instruction: Du-mă la floarea-soarelui!
      2-3 Maze Loops 19_instruction: Du-mă la floarea-soarelui!
      2-3 Maze Loops 20_instruction: Du-mă la floarea-soarelui!
      2-3 Maze Loops 21_instruction: Du-mă la floarea-soarelui!
      2-3 Maze Loops Assessment 1_instruction: "Evaluare: Du-mă la floarea-soarelui
        \nfolosind doar 5 blocuri! \n"
      2-3 Maze sq1_instruction: |
        This pig is ruffling my feathers.  Help me find
        him!
      2-3 Maze sq10_instruction: Du-mă la porc! Ce blocuri au fost repetate?
      2-3 Maze sq10v2_instruction: Du-mă la porc! Ce blocuri au fost repetate?
      2-3 maze sq11_instruction: Du-mă la porc! Ce blocuri au fost repetate?
      2-3 maze sq12_instruction: Poți înlocui răspunsul anterior cu o buclă folosinf
        blocul "repetă ori"?
      2-3 maze sq13_instruction: |
        Dragă persoană. Eu zombie. Trebuie... să ajung... la floarea-soarelui.
        Creează o buclă cu blocul "repetă până când".
      2-3 maze sq14_instruction: Poți ajunge la floarea-soarelui folosind doar patru
        blocuri?
      2-3 maze sq15_instruction: Poți ajunge la floarea-soarelui folosind doar cinci
        blocuri?
      2-3 maze sq16_instruction: |
        Ok, acesta este similar, dar un pic diferit. Poți
        să faci acest lucru doar în cinci blocuri?
      2-3 Maze sq2_instruction: "Trasează calea și condu-mă la porcul buclucaș. Evită
        \nTNT-ul sau penele vor zbura!\n"
      2-3 Maze sq3_instruction: Ghidează-mă la răutatea verde! (Atenție la TNT)
      2-3 Maze sq4_instruction: |
        Păstrează-ți calmul și ajută-mă să găsesc porcul rău. Altfel
        s-ar putea să mă supăr!
      2-3 Maze sq5_instruction: "Du-mă la porc! De câte ori trebuie să \nrepeți un
        bloc?\n"
      2-3 Maze sq6_instruction: |
        Poți înlocui răspunsul precedent cu doar două
        blocuri? (Sugestie: Creează o buclă folosind blocul "repetă ori".)
      2-3 Maze sq7_instruction: Du-mă la intrusul verde utilizând doar trei blocuri.
      2-3 Maze sq8_instruction: "Du-mă la porc! (Unde este acel bloc \"repetă ori\"
        \natunci când am nevoie de el?)\n"
      2-3 Maze sq9_instruction: Creează bucle pentru a ajunge la porc folosind mai
        puține blocuri.
      2-3_instruction: |
        Purple flowers may have either 1 or 0 nectar. Be careful
        not to collect nectar from a purple flower if it doesn't have any.
      2-3level1_instruction: Ajută pasărea să prindă porcul buclucaș mutăndu-l înainte
      4-5 Artist 1_instruction: 'Ajută-mă să termin de desenat cutia mea. (Fiecare
        linie are o lungime de 300 de pixeli) '
      4-5 Artist 10_instruction: "Apasă \"Rulează\" să testezi codul. Apoi, repetă-l
        \nde atâtea ori încât să finalizezi desenul. Culorile vor fi diferite de fiecare
        dată.\n"
      4-5 Artist 11_instruction: "Completează liniile verzi. Liniile au 300 pixeli
        \nlungime si sunt la distanță de 15 pixeli una față de cealaltă.\n"
      4-5 Artist 2_instruction: Poți să folosești bucla in acest cod pentru a finaliza
        pătratul?
      4-5 Artist 3.5_instruction: "Ok, încearcă să-ți dai seama ce se întâmplă dacă
        rulezi \nacest cod (sau apasă \"Rulează\" ca să-l încerci). Apoi, repetă-l
        suficient pentru a finaliza \ndesenul. Culorile vor fi (cel mai probabil)
        diferite de fiecare dată.\n"
      4-5 Artist 3_instruction: "Acest pat de flori dreptunghiular are un perimetru
        de 600. \nLatura lungă are o lungime de 200. Trasează dreptunghiul.\n"
      4-5 Artist 4_instruction: "Cate grade sunt într-un cerc?  Folosește bucla cu
        blocurile \npentru a crea un cerc de culori.\n"
      4-5 Artist 5_instruction: Ce unghi folosești?
      4-5 Artist 6_instruction: "Acest triunghi echilateral are unghiuri de 60, 60
        \nsi 60 de grade. Fiecare latură este de 200 de pixeli. Finalizează desenul.\n"
      4-5 Artist 7_instruction: |
        Acest triunghi dreptunghic are unghiuri de 30, 60 si 90
         de grade. Lungimea părții înclinate este dublul înălţimii de 100 pixeli. Finalizează desenul.
      4-5 Artist 8_instruction: Linia de la jumătate pe un teren de fotbal este perpendiculară
        pe tuşă. Acest câmp are un perimetru de 800 pixeli şi este lung de 240 pixeli.
        Cât de lat este? Trasează limitele şi linia de la jumătatea drumului.
      4-5 Artist 9_instruction: "Desenează cealaltă jumătate pentru că design-ul este
        simetric. \nTriunghiurile sunt echilaterale şi au o lungime de 50 pixeli.\n"
      4-5 Artist Assessment 1_instruction: "Evaluare: Utilizează o buclă pentru a
        desena triunghiul \nechilateral. Fiecare latură are 300 de pixeli.\n"
      4-5 Artist For Loops 1_instruction: Așează numerele de la 1 până la 10 în blocuri
        de lățime şi rulează codul.
      4-5 Artist For Loops 11_instruction: "Completează blocul \"pentru\" astfel încât
        acesta \nnumără 0, 20, 40, 60, 80... 200.\n"
      4-5 Artist For Loops 12_instruction: "Ce se întâmplă dacă inversezi numerele
        \"de la\" \nşi la\" numere? Completează blocul \"pentru\" astfel încât acesta
        să numere 200, 180, 160, 140, 120... 0. \n"
      4-5 Artist For Loops 13_instruction: "Acest model a fost început fără o buclă
        \"pentru\" şi conține prea multe blocuri!  Utilizează un bloc \"pentru\" ca
        să finalizezi spirala.  Sugestie: \nlungimea ultimei linii este de 250 pixeli.\n"
      4-5 Artist For Loops 14_instruction: "Cineva a început codul, dar apoi și-a
        dat seama \ncă trebuie să existe o modalitate mai rapidă! Utilizează un bloc
        \"pentru\" cu scopul de a înlocui blocurile şi de a finaliza spirala triunghiulară.
        (Sugestie: lungimea ultimei linii este de 300 de pixeli.)\n"
      4-5 Artist For Loops 15_instruction: "Cineva a început codul, dar apoi și-a
        dat seama \ncă trebuie să existe o modalitate mai rapidă! Utilizează un bloc
        \"pentru\" cu scopul de a înlocui blocurile şi de a finaliza spirala hexagonală.
        (Sugestie: lungimea ultimei linii este de 200 de pixeli.)\n"
      4-5 Artist For Loops 2_instruction: Acesta este un bloc "pentru". În loc să
        introduci 1,2,3... 10, blocul "pentru" poate repeta blocuri de cod aflate
        în interiorul lui astfel poate introduce numerele pentru tine. Tastează numărul
        10 în secțiunea "pana la " de bloc "pentru".
      4-5 Artist For Loops 3_instruction: "Cum putem număra de la 1 la 50? Editează
        \nblocul \"pentru\".\n"
      4-5 Artist For Loops 4_instruction: Completează blocul "pentru" astfel încât
        acesta numără de la 1 la 10 cu câte 1.
      4-5 Artist For Loops 6_instruction: "Desenează pătrate cu laturi de 50, 60,
        70, \n80 și 90 de pixeli. Vei avea nevoie să utilizezi funcţia \"desenează
        un pătrat\" de cinci ori.\n"
      4-5 Artist For Loops 7_instruction: "Desenează aceleași patrate, dar folosește
        un bloc \"numără \ncu\" pentru a modifica dimensiunile. Plasează blocul \"numărător\"
        în funcţia \"desenează \nun pătrat\". Sugestie: Este în categoria variabilelor.\n"
      4-5 Artist For Loops 8_instruction: "Poţi finaliza programul prin plasarea \nblocurilor
        în interiorul unui bloc \"pentru\" care numără de la 10 la 200 cu câte 10?
        Poţi \ngăsi blocul \"pentru\" în categoria de bucle.\n"
      4-5 Artist For Loops 9_instruction: "Aceste cercuri au diametrul de 5, 10, 15,
        20, \n25, 30 şi 35. Desenează cercurile folosind un bloc \"pentru\".\n"
      4-5 Artist Free Draw 1_instruction: "Desen liber!  Desenează orice te simți
        inspirat \nsă creezi.\n"
      4-5 Artist Functions 1_instruction: Utilizează o buclă de repetare pentru a
        desena acest triunghi.
      4-5 Artist Functions 10a_instruction: "Pune acest cod în interiorul funcţiei
        'desenează un fulg de nea' \nşi înlocuiește numărul 50 cu parametrul \"dimensiune\".
        Funcţia este deja \napelată pentru a crea un fulg de nea, care este de 100
        pixeli.\n"
      4-5 Artist Functions 10b_instruction: "Utilizează funcţia 'desenează un fulg
        de nea' \npentru a crea fulgi de diferite dimensiuni.  Indiciu: primul fulg
        de nea are 25 în lungime \nşi fiecare fulg de zăpadă este de două ori mai
        mare decât cel dinainte.\n"
      4-5 Artist Functions 11_instruction: "Această funcţie \"desenează un hexagon\"
        foloseşte \nfuncţia \"desenează un triunghi\". Completează funcţia hexagonului.
        (Indiciu: un \nhexagon are 6 laturi, fiecare cu lungimea de 100 pixeli)\n"
      4-5 Artist Functions 12_instruction: "Completează funcţia \"desenează valuri\".
        \ Fiecare \nval este alcătuit dintr-un val Superior şi un val inferior.   Sugestie:
        Desenează 5 valuri \nalbastre.\n"
      4-5 Artist Functions 13 Free play_instruction: "Aici sunt date unele funcţii
        care să \ndeseneze planete, stele, rachete şi roboţi. Folosește-le oricum
        dorești pentru a crea \npoze pe care le poţi distribui prietenilor tăi.\n"
      4-5 Artist Functions 14 Free play_instruction: "Aici, noi ți-am pus la dispoziție
        \nmai multe funcţii.  Folosește-le oricum dorești în interiorul uneia sau
        mai multor bucle \npentru a crea fotografii pe care le poți distribui prietenilor
        tăi. Fă clic pe 'Rulează' pentru a vedea \nun exemplu.\n"
      4-5 Artist Functions 15 Assessment_instruction: "Evaluare: Utilizează funcţia
        \"desenează \nun pătrat\" pentru a crea pătratele.  Pătratele sunt de 50,
        100 şi 150 \nde pixeli.\n"
      4-5 Artist Functions 2a_instruction: "Acum pune aceste blocuri într-o funcţie
        nouă, \nnumită \"desenează un triunghi mic\" şi apeleaz-o.\n"
      4-5 Artist Functions 2b_instruction: Acum creează o funcţie numită "desenează
        un triunghi mic" folosind blocurile furnizate.
      4-5 Artist Functions 3_instruction: 'Acum creează funcţiile "desenează un triunghi
        mediu" şi "desenează un triunghi mare". Funcţia "desenează un triunghi mic"
        este făcută pentru tine. Triunghiurile au laturi cu lungimea de 50 (mici),
        100 (mediu) şi 150 (mare). '
      4-5 Artist Functions 4_instruction: "Această funcție nouă \"desenează un triunghi\"
        \nare un parametru şi poate face munca a tuturor celor trei funcţii dinainte.
        Desenează \naceleaşi triunghiuri folosind această nouă funcţie.\n"
      4-5 Artist Functions 5_instruction: Poţi modifica funcţia "desenează un triunghi"
        într-o funcţie "desenează un pătrat" pentru a schimba desenul?
      4-5 Artist Functions 6_instruction: 'Utilizează funcțiile "desenează un pătrat"
        şi "desenează un triunghi" pentru a desena o casă. (Sugestie: laturile pătratului
        sunt de 200 de pixeli)'
      4-5 Artist Functions 6b_instruction: |
        Folosește funcțiile "desenează un pătrat" și "desenează un triunghi"
        împreună cu alte blocuri pentru a crea o casă, adăugându-le pe acestea funcției "desenează o casă"
        și apoi apelați-o.
      4-5 Artist Functions 7_instruction: "Folosește funcția \"desenează o casă\"
        pentru a desena \ncase de 100 de pixeli și de 50 de pixeli. Cele două case
        sunt separate de\n50 de pixeli.\n"
      4-5 Artist Functions 8_instruction: |
        Funcția "desenează o floare" are un parametru
        care îți permite să setezi înalțimea tulpinii. Seteaz-o la 200 și observă ce se întâmplă.
      4-5 Artist Functions 9_instruction: "Desenează 3 flori. Prima are o \nînălțime
        de 100 iar următoarea floare are întodeauna o înălțime mai mare cu 50 de pixeli
        \ndecât precedenta. Florile se află, de asemenea, la o distanță de 100 de
        pixeli una față de cealaltă.\n"
      4-5 Artist Patterns 1_instruction: |
        Poți desena acest pătrat folosind o buclă?
        Fiecare latură are o lungime de 20 de pixeli.
      4-5 Artist Patterns 10_instruction: "Acest cod desenează două rânduri de hexagoane
        - \nbuclează totul de 4 ori pentru a realiza întregul fagure de miere. Sugestie:
        Va trebui \nsă sari înapoi 120 de pixeli în interiorul buclei tale ultraperiferice
        pentru a te asigura că artistul nu va\niesi cu desenul de pe ecran.\n"
      4-5 Artist Patterns 11_instruction: "De câte ori trebuie să buclezi aceasta
        \npentru a desena un semicerc? Sugestie: dacă sunt 360 de grade într-un cerc
        și fiecare \nbuclă se mută 3 grade, de cîte ori trebuie să buclezi pentru
        a desena un cerc întreg?\n"
      4-5 Artist Patterns 12_instruction: "Dacă vei copia acea buclă și vei vira la
        stânga în loc de \nla dreapta, ce se va întîmpla? Poți repeta acest lucru
        astfel încât să desenezi acest val?\n"
      4-5 Artist Patterns 13_instruction: "Haide acum să buclăm tot acel lucru de
        patru \nori pentru a crea această ramă de tablou. Atenție la colțuri - nu
        poți \ndoar să virezi la 90 de grade! Dacă buclarea unui viraj de 3 grade
        de 60 de ori realizează jumatate de cerc, \ncare din aceste blocuri de cod
        va realiza un sfert de cerc pentru colțuri?\n"
      4-5 Artist Patterns 2_instruction: Dacă plasezi bucla de repetare a unui pătrat
        în interiorul altei bucle, noi numim aceasta o buclă imbricată. Ce trebuie
        să adaugi la bucla din exterior pentru a te asigura că toate cele 15 pătrate
        se aliniază unul lângă celălalt?
      4-5 Artist Patterns 3_instruction: Acum, hai să mergem încă un nivel în profunzimea
        problemei?
      4-5 Artist Patterns 4_instruction: Acest diamant are laturi de 50 de pixeli
        și unghiuri de 120 și 60 de grade. Folosește o buclă pentru a îl desena.
      4-5 Artist Patterns 5.5_instruction: De câte ori ai nevoie să repeți acest block
        pentrua desena întreaga grilă de diamante?
      4-5 Artist Patterns 5_instruction: Hai să repetăm aceasta pentru a face un rând
        de 6 diamante. Observă ca am schimbat codul nostru pentru diamant să se repete
        de 3 ori în loc de două - de ce crezi că am procedat așa?
      4-5 Artist Patterns 6_instruction: De câte ori trebuie să repeți acest block
        pentru a desena întreaga grilă de diamante?
      4-5 Artist Patterns 7_instruction: Hai să modificăm codul de la ultimul puzzle
        pentru a face acest model mai complex. Notează cum diamantele se suprapun
        acum, încearcă să schimbi primul "săritură înapoi" de la 100 la 50 (jumatate
        din distanță) - cât de departe ar trebui să meargă artistul cu a doua "săritură
        înapoi"?
      4-5 Artist Patterns 8_instruction: Folosește o buclă pentru a desena acest hexagon
        cu laturile de 40 de pixeli și unghiuri de 60 de grade.
      4-5 Artist Patterns 9.5_instruction: Hai să buclăm acest cod pentru a desena
        două rânduri de hexagoane. Notează cum al doilea rând al nostru este întors
        spre dreapta.
      4-5 Artist Patterns 9_instruction: Acum repetă acel cod de 3 ori pentru a desena
        întregul rând. Sugestie, fiecare hexagon are o lățime de 80 de pixeli de la
        cele mai depărtate puncte de la stînga la dreapta.
      4-5 Artist Patterns Free Play_instruction: Joc la alegere - încearcă-ți mâna
        și creează pe cont propriu un model al tău!
      4-5 Bee Conditionals - FC Test_instruction: Albina vrea doar nectar acum. Nu
        toate obiectele sunt flori, deci verifică sub FIECARE NOR pentru a vedea dacă
        el ascunde o floare. Dacă este așa, atunci poți aduna nectar.
      4-5 Bee Conditionals 1 (copy 1)_instruction: |
        The bee can't tell if this is
        a flower or a honeycomb. Gather nectar only from flowers, but first check
        if it is a flower or a honeycomb.
      4-5 Bee Conditionals 1_instruction: Albina nu-și poate da seama dacă acesta
        este o floare sau un fagure de miere. Adună nectar doar din flori, dar mai
        întâi verifică dacă acesta este o floare sau un fagure de miere.
      4-5 Bee Conditionals 2 (copy 1)_instruction: |
        The bee only wants nectar right
        now. Remember, not all objects are flowers, so check to gather nectar only
        at flowers.
      4-5 Bee Conditionals 2_instruction: Albina vrea acum doar nectar. Ia aminte,
        nu toate obiectele sunt flori, așadar verifică mai întâi pentru a aduna nectarul
        doar din flori.
      4-5 Bee Conditionals 3_instruction: Acum albina vrea să facă miere. Verifică
        mai întâi pentru a face miere doar la faguri.
      4-5 Bee Conditionals 4 (copy 1)_instruction: |
        The unknown object is either
        a flower or a honeycomb. Use the if/else block to collect nectar if it is
        a flower, else to make honey (because it is a honeycomb).
      4-5 Bee Conditionals 4_instruction: Obiectul necunoscut este ori o floare, ori
        un fagure de miere. Folosește blocul "dacă/altfel" pentru a colecta nectar
        dacă acesta este o floare, altfel pentru a face miere (deoarece acesta este
        un fagure).
      4-5 Bee Conditionals 5_instruction: Sub acei nori, ar putea exista o floare
        sau un fagure de miere. Folosește blocul "dacă/altfel" pentru a colecta nectar
        dacă acolo este o floare, altfel pentru a face miere (deoarece acolo este
        un fagure).
      4-5 Bee Conditionals 6 (copy 1)_instruction: |
        This purple flower may have either
        3, 2, or 1 nectar. Here an if-else block is combined with another if-else
        block to create an if, else-if, else block. Complete the solution to collect
        the unknown amount of nectar.
      4-5 Bee Conditionals 6_instruction: Această floare violetă ar putea avea ori
        3, ori 2 nectaruri sau 1 nectar. Aici un bloc "dacă/altfel" este combinat
        cu alt bloc "dacă/altfel" pentru a crea un bloc "dacă", "altfel-dacă", "altfel".
        Completează soluția pentru a colecta o cantitate necunoscută de nectar.
      4-5 Bee Conditionals 7_instruction: Amintește-ți că florile violete pot avea
        3, 2 nectaruri sau 1 nectar. Completează funcția "verifică floare violetă"
        și folosește-o pentru a colecta tot nectarul la flori.
      4-5 Bee Conditionals 8_instruction: Scrie în interiorul funcției "verifică floare
        fă miere". Funcția ta ar trebui să verifice dacă floarea violetă are 3, 2
        nectaruri sau 1 nectar și să colecteze tot nectarul. Apoi, mută înainte și
        fă miere.
      4-5 Bee Conditionals Assessment 1_instruction: "Evaluare: Acest cod este greșit.
        \nCompletează funcția \"ia nectar sau fă miere\", apoi apeleaz-o pentru a
        colecta tot nectarul și mierea. Amintește-ți că florile violete pot avea 3,
        2 sau 1 nectar.\n"
      4-5 Bee Debugging 1_instruction: Aceste blocuri chiar mă deranjează. Poți tu
        să le repari?
      4-5 Bee Debugging 10_instruction: Găsește erorile și repară-le.
      4-5 Bee Debugging 11_instruction: Aceasta numără corect?
      4-5 Bee Debugging 2_instruction: Ajută albina să obțină nectarul și să facă
        miere.
      4-5 Bee Debugging 3_instruction: Găsește erorile și repară-le.
      4-5 Bee Debugging 4_instruction: Aceste blocuri nu funcţionează. Care este modelul?
      4-5 Bee Debugging 5_instruction: Ceva nu este în regulă aici...
      4-5 Bee Debugging 6_instruction: Floarea violetă are o cantitate necunoscută
        de nectar. Repară blocurile pentru obține tot nectarul din floare.
      4-5 Bee Debugging 7_instruction: Funcției îi lipsește ceva...
      4-5 Bee Debugging 8_instruction: Această funcție este bună, dar nu este folosită
        corect.
      4-5 Bee Debugging 9_instruction: De ce nu face albina destulă miere?
      4-5 Bee Debugging Assessment 1_instruction: 'Evaluare: Repară codul.'
      4-5 Bee Nested Loops 1_instruction: Folosește o buclă pentru a colecta tot nectarul.
      4-5 Bee Nested Loops 2_instruction: 'Colectează tot nectarul din fiecare floare.
        Folosește o buclă imbricată. '
      4-5 Bee Nested Loops 3_instruction: Colecteză tot nectarul prin a așeza codul
        de început in interiorul unei bucle imbricate.
      4-5 Bee Nested Loops 4_instruction: 'Colectează tot nectarul din fiecare floare
        și fă miere la fiecare fagure. Folosește o buclă imbricată. '
      4-5 Bee Nested Loops 5_instruction: Colectează tot nectarul prin crearea unei
        bucle imbricate.
      4-5 Bee Nested Loops 6_instruction: Colectează tot nectarul.
      4-5 Bee Nested Loops 7_instruction: Pune această buclă in interiorul unei alte
        bucle pentru a crea o buclă imbricată și a colecta tot nectarul din flori.
      4-5 Bee Nested Loops 8_instruction: 'Colectează tot nectarul din aceste flori
        prin imbricarea unei bucle "în timp ce". Înlocuiește blocul interior "repetă
        ori" cu un bloc "în timp ce". '
      4-5 Bee Nested Loops 9_instruction: Colectează tot nectarul din aceste flori
        prin imbricarea unei bucle "în timp ce" în interiorul unei bucle "repetă".
      4-5 Bee Nested Loops Assessment 1_instruction: Evaluare - colectează tot nectarul
        şi fă toată mierea utilizând bucle.
      4-5 Bee Nested Loops Rows_instruction: Adună nectarul din rândurile de flori!
        Utilizează o buclă imbricată.
      4-5 Maze 1 (copy 1)_instruction: Dragă persoană. Eu zombie. Trebuie... să ajung...
        la floarea-soarelui.
      4-5 Maze 1_instruction: Dragă persoană. Eu zombie. Trebuie... să ajung... la
        floarea-soarelui.
      4-5 Maze 10_instruction: Poți ajunge la floarea-soarelui folosind doar patru
        blocuri?
      4-5 Maze 11_instruction: Poți ajunge la floarea-soarelui folosind doar șase
        blocuri?
      4-5 Maze 12_instruction: Ok, acesta este un pic diferit. Poți să faci acest
        lucru în doar șase blocuri?
      4-5 Maze 13_instruction: Du-mă la porc!
      4-5 Maze 14_instruction: Du-mă la porc! Folosește blocul "repetă până când".
      4-5 Maze 2 (copy 1)_instruction: Du-l pe zombie la floarea-soarelui, dar evită
        planta carnivoră!
      4-5 Maze 2_instruction: Du-l pe zombie la floarea-soarelui, dar evită planta
        carnivoră!
      4-5 Maze 3 (copy 1)_instruction: Trebuie... să ajung... la floarea-soarelui.
      4-5 Maze 3_instruction: Trebuie... să ajung... la floarea-soarelui.
      4-5 Maze 4 (copy 1)_instruction: Încearcă blocul "repetă" pentru a folosi mai
        puține blocuri...
      4-5 Maze 4_instruction: Încearcă blocul "repetă" pentru a folosi mai puține
        blocuri...
      4-5 Maze 5 (copy 1)_instruction: Poți rezolva acest puzzle folosind cel mai
        mic număr de blocuri posibil?
      4-5 Maze 5_instruction: Poți rezolva acest puzzle folosind cel mai mic număr
        de blocuri posibil?
      4-5 Maze 6 (copy 1)_instruction: Poți rezolva acest puzzle folosind cel mai
        mic număr de blocuri posibil?
      4-5 Maze 6_instruction: Poți rezolva acest puzzle folosind cel mai mic număr
        de blocuri posibil?
      4-5 Maze 7_instruction: Dragă persoană. Eu zombie. Trebuie... să ajung... la
        floarea-soarelui.
      4-5 Maze 8_instruction: Folosește blocul "repetă" pentru a-l duce pe zombie
        la floarea-soarelui. (Evită plantele carnivore!)
      4-5 Maze 9_instruction: Creează o buclă cu blocul "repetă până când".
      4-5 Maze Assessment 1_instruction: 'Evaluare: Du-te la floarea-soarelui.'
      4-5 Maze Conditionals 1_instruction: Utilizează blocul "repetă până când" pentru
        a-l duce pe zombie la floarea-soarelui.
      4-5 Maze Conditionals 2_instruction: Utilizează blocul "repetă până când" pentru
        a-l duce pe zombie la floarea-soarelui.
      4-5 Maze Conditionals 3_instruction: 'Folosește blocul "dacă" pentru a mă lăsa
        pe mine să decid când să virez. Sugestie: ai nevoie numai de un bloc în plus,
        dar învață cum le aranjăm noi ca să poți proceda și tu la fel data viitoare.'
      4-5 Maze Conditionals 4_instruction: Ok, acesta este la fel cu ultimul puzzle
        dar trebuie să-ți amintești cum ai folosit blocul "dacă" și blocul "repetă"
        împreună.
      4-5 Maze Conditionals 5_instruction: Eu vreau floarea-soarelui! Folosește un
        bloc "dacă" pentru a mă duce acolo cu cel mai mic număr de blocuri.
      4-5 Maze Conditionals 6_instruction: Eu vreau floarea-soarelui! Folosește un
        bloc "dacă" pentru a mă duce acolo cu cel mai mic număr de blocuri.
      4-5 Maze Conditionals 7_instruction: Ok, hai să facem acest lucru din nou pentru
        exercițiu - acesta nu e foarte diferit, dar fii atent(ă) la plantele carnivore!
      4-5 Maze Conditionals 8_instruction: Blocul "Dacă-altfel" verifică o condiție
        și apoi face un lucru SAU altul. Pentru a mă duce la floarea-soarelui încearcă
        să folosești acest bloc nou.
      4-5 Maze Conditionals 9_instruction: Încă un exercițiu cu blocul "Dacă-altfel",
        poți să reușești din prima încercare?
      4-5 Maze Conditionals Assessment 1_instruction: Folosește "repetă până când"
        și un bloc "Dacă-altfel" pentru a mă duce la floarea-soarelui în cât mai puține
        blocuri posibile.
      4-5 Nested Loops 1_instruction: 'Completează codul astfel încât acesta să deseneze
        aceste triunghiuri. Primul este deja făcut. Tip: 3 triunghiuri în rotatie
        de 360 de grade.'
      4-5 Nested Loops 10_instruction: Desenează ultimul rând de stele pe acest steag
        prin buclarea blocurilor date. Stelele au o distanță între ele de 50 de pixeli,
        dar ține minte că stelele însele au o lățime de 30 de pixeli.
      4-5 Nested Loops 11_instruction: Poți desena aceste 10 pătrate ale trotuarului
        folosind o buclă imbricată? Fiecare pătrat are 30 de pixeli.
      4-5 Nested Loops 12_instruction: Poți desena aceste 36 triunghiuri folosind
        o buclă imbricată?
      4-5 Nested Loops 2_instruction: 'Acum pune acestă buclă în interiorul unei alte
        bucle pentru  a desena 10 triunghiuri. Aceasta se numește o buclă imbricată.
        Sugestie: Toate cele 10 triungiuri completează o rotatie de 360 de grade.  '
      4-5 Nested Loops 3_instruction: |
        Creează un soare prin a cuibări codul de început în interiorul altei bucle. Aceasta se numește o buclă imbricată.\r
      4-5 Nested Loops 5_instruction: Buclează codul dat pentru a crea o moară de
        vânt.
      4-5 Nested Loops 6_instruction: Poţi desena un hexagon folosind buclarea codului
        pentru desenarea unui triunghi?
      4-5 Nested Loops 7_instruction: 'Reia de 10 ori acest proiect. Cât de mult te-ai
        întors la fiecare reluare? (Indiciu: Care este rezultatul împărţirii lui 360
        la 10?)'
      4-5 Nested Loops 8_instruction: 'Reia de 6 ori acest proiect. Cât de mult te-ai
        întors la fiecare reluare? (Indiciu: Care este rezultatul împărţirii lui 360
        la 6?)'
      4-5 Nested Loops 9_instruction: Desenează dinţii în gura aligatorului!
      4-5 Nested Loops Assessment 1_instruction: Utilizaţi o buclă imbricată pentru
        a finaliza proiectul.
      4-5 While Loops 1_instruction: Mută-mă în gaură şi umple-o două lopeţi cu pământ,
        folosind blocul "umple".
      4-5 While Loops 2_instruction: Mută-mă la grămada de pământ şi apoi înlătur-o
        cu 5 lopeți, folosind blocul "elimină".
      4-5 While Loops 3_instruction: 'Mută-mă pe grămadă şi mută grămada toată, apoi
        umple complet gaura. Indicaţie: Foloseşte cât mai puţine blocuri.'
      4-5 While Loops 4_instruction: 'Oau, am găsit o gaură foarte adâncă! Nu ştiu
        de câte lopeţi cu pământ am nevoie pentru a o umple. Poţi scrie un program
        care să umple gaura până la nivelul solului? Indicaţie: Încearcă să foloseşti
        bucla "în timp ce" de data asta.'
      4-5 While Loops 5_instruction: Oau, acum sunt două găuri adânci acolo! Poţi
        tu să scri un program care să umple ambele găuri până la nivelul solului?
      4-5 While Loops 6_instruction: Oau, acum este o grămadă mare de pământ acolo!
        Poţi scrie un program care să o îndepărteze în intregime până se nivelează
        solul?
      4-5 While Loops 7_instruction: Oau, acum sunt trei grămezi mari de pământ acolo!
        Poţi scrie un program care să le îndepărteze pe fiecare dintre ele până la
        nivelul solului?
      4-5 While Loops 8_instruction: ' Acolo este o gaură într-adevăr adâncă şi o
        grămadă foarte mare de mizerie. Câte lopeţi pline de mizerie trebuie să fie
        mutate de la una la alta pentru a nivela solul? Indicaţie: Foloseşte bucla
        "în timp ce" pentru amândouă.'
      4-5 While Loops Assessment 1_instruction: Există multe găuri şi grămezi de pământ.
        Ajută-mă să le umplu şi să le mut pentru a face terenul plat.
      AlgPD DR Free Play_instruction: Create a function based on your own word problem.
      AllTheThings Applab - Turtle move with button_instruction: |
        Add a button that
        moves the turtle when clicked.  (Click to see full instructions)
      allthethings data blocks test_instruction: |
        Please sign in to test applab levels
        (By design, applab levels only work if signed in. Normally, we make people
        sign in, but this is only enforceable for a whole script and would be annoying
        to do for the allthethings script).
      allthethings design mode elements_instruction: |
        Please sign in to test applab
        levels (By design, applab levels only work if signed in. Normally, we make
        people sign in, but this is only enforceable for a whole script and would
        be annoying to do for the allthethings script).
      allthethings_moviebot_instruction: |
        This level cloned from "U3 Digital Assistant
        Target"
      allthethings_template_backed1_instruction: "Backed by a template #1. Please\nsign
        in to test applab levels (By design, applab levels only work if signed\nin.
        Normally, we make people sign in, but this is only enforceable for a whole\nscript
        and would be annoying to do for the allthethings script). \n"
      allthethings_template_backed2_instruction: |
        Backed by a template #2. Please
        sign in to test applab levels (By design, applab levels only work if signed
        in. Normally, we make people sign in, but this is only enforceable for a whole
        script and would be annoying to do for the allthethings script).
      App Lab test_instruction: test
      Applab allthethings onRecordEvent_instruction: |
        Please sign in to test applab
        levels (By design, applab levels only work if signed in. Normally, we make
        people sign in, but this is only enforceable for a whole script and would
        be annoying to do for the allthethings script).
      Applab test_instruction: This level is submittable. For testing only!
      AppLab_test02_instruction: |
        One sentence summary of the activity. Click to
        view full instructions.
      Artist - Nested Loops 1_instruction: |
        Complete the code to draw these triangles.  The
        first one is done for you.  Hint:  3 triangles in a 360 degree rotation.
      Artist - Nested Loops 10_instruction: |
        Draw the last row of stars on this flag
        by looping the provided blocks. The stars are 50 pixels apart, but remember
        that the stars themselves are 30 pixels wide.
      Artist - Nested Loops 11_instruction: |
        Can you draw these 10 squares of this
        sidewalk using a nested loop? Each square is 30 pixels.
      Artist - Nested Loops 12_instruction: |
        Can you draw these 36 triangles using
        a nested loop?
      Artist - Nested Loops 2_instruction: "Now nest this loop inside another loop\nto
        draw 10 triangles.  This is called a nested loop.  Hint: All 10 triangles\ncomplete
        a 360 degree rotation.  \n"
      Artist - Nested Loops 3_instruction: |
        Create a sun by nesting the starter code
        in another loop. This is called a nested loop.\r
      Artist - Nested Loops 5_instruction: Loop the given code to create a windmill.
      Artist - Nested Loops 6_instruction: |
        Can you draw a hexagon by looping the
        triangle code?
      Artist - Nested Loops 7_instruction: |
        Loop this design 10 times. How much do
        you have to turn each time you loop? (Hint: What is 360 divided by 10?)
      Artist - Nested Loops 8_instruction: |
        Loop this design 6 times. How much do
        you have to turn each time you loop? (Hint: What is 360 divided by 6?)
      Artist - Nested Loops 9_instruction: Draw the teeth in the alligator's mouth!
      Artist - Nested Loops Assessment 1_instruction: Utilizaţi o buclă imbricată
        pentru a finaliza proiectul.
      Auto Open Function Editor_instruction: 'Poți apela funcții din interiorul altor
        funcții! Folosind ca bază funcția ta de "formă", creează 3 forme de casă fiecare
        mai mare cu 20 de pixeli decat precedenta, începând cu 50 de pixeli în lungime.
        Ar putea fi de ajutor folosirea unei bucle numărătoare. '
      Bee Recommended Blocks test_instruction: "Florile violete pot avea ori 1 ori
        0 \nnectar, dar nu știi exact care din ele! Ai grijă să nu colectezi nectar
        dintr-o \nfloare violetă dacă aceasta nu are deloc. Verifică dacă nectarul
        este egal cu 1 \nfolosind blocul \"dacă\".\n"
      Big Game Animation 1 (copy 1)_instruction: |
        Now that you've learned to write
        simple linear functions, let's work on using them to add some movement to
        our game. Click play to see what your game can currently do (not much!), update
        any variables you like, and then click finish to move on.
      Big Game Animation 1_instruction: |
        Now that you've learned to write simple
        linear functions, let's work on using them to add some movement to our game.
        Click "Run" to see what your game can currently do (not much!), update any
        variables you like, and then click finish to move on.
      Big Game Animation 2 (copy 1)_instruction: |
        The function 'update-target'
        function takes the target's current x value, and returns an updated value.
        Complete the 'update-target' function so that it adds to the x value each
        time it is called. The more you add to x, the faster the target will go.
      Big Game Animation 2_instruction: |
        The update-target function takes the target's
        current x value, and returns an updated value. Complete the update-target
        function so that it adds to the x value each time it is called. The more you
        add to x, the faster the target will go.
      Big Game Animation 3_instruction: |
        The update-danger function should work just
        like update-target, except that the danger should move from the right side
        over towards the left. Complete update-danger to make the danger fly across
        the screen.
      Big Game Animation 4_instruction: |
        At this point in your game, your danger
        should run across the screen from right to left, and your target should run
        across from left to right. They don't ever come back on screen once they've
        left, but we'll take care of that later. Take a minute to make sure your
        game is working like you want it to, and then click "Finish" to move on.
      Big Game Booleans 1_instruction: |
        When you last worked on your game we got
        our target and danger sprites to fly across the screen, but they never come
        back. Click "Run" to see how your game is currently working, and then click
        finish and we'll work on making those sprites reappear on screen after they've
        left.
      Big Game Booleans 2_instruction: |
        Go to the Functions section of the toolbox
        and complete the safe-left? function so that it returns true if the sprite's
        x coordinate is greater than -50. If you're successful you should see the
        Danger go off the left side and then return on the right side.
      Big Game Booleans 3_instruction: |
        Now that you've got safe-left?, let's fill
        in safe-right? - it should take in a sprite's x coordinate and return true
        if that coordinate is less than 450. Once your safe-right? is complete you
        should see the Target go off the right side of the screen and return on the
        left.
      Big Game Booleans 4_instruction: |
        Complete the onscreen? function so that it
        checks whether both safe-left? and safe-right? are true.
      Big Game Booleans 5_instruction: |
        At this point your Danger should run across
        the screen from right to left, your Target should run across from left to
        right, and they should both return to the opposite side, repeatedly. Take
        a minute to make sure your game is working like you want it to, and then click
        "Finish" to move on.
      Big Game Collision 1 (copy 1)_instruction: |
        When you last worked on your game
        we got our target and danger sprites to fly across the screen, but they never
        come back. Click run to see how your game is currently working, and then click
        finish and we'll work on making those sprites reappear on screen after they've
        left.
      Big Game Collision 1_instruction: |
        At this point you've programmed a video
        game with a moving Target and Danger, both of which return to the screen once
        they've left, and a Player that responds to keyboard input. Click "Run"
        to see how your game is currently working, and then we'll dig into the final
        missing piece - collision detection!
      Big Game Collision 2_instruction: |
        To move the player up and down, we'll need
        to use a conditional block to figure out which key is pressed and respond
        accordingly. Computers read keypresses as numeric key codes - the up arrow
        is 38 and the down arrow is 40. You can lookup other key codes in your student
        workbook. Edit the 'update-player' function so that if moves the player
        up when the up arrow is pressed, or down when the down arrow is pressed.
      Big Game Collision 3_instruction: |
        Use the Distance Formula, so the distance
        function returns the distance between the player's center coordinates (px,
        py) and another sprite's center coordinates (cx, cy).
      Big Game Collision 4_instruction: |
        Complete the collide? function so that it
        returns true if the distance between two points is less than 100 pixels apart.
      Big Game Complete_instruction: |
        A demo of the completed CS in Algebra Big Game
        project
      Big Game Final_instruction: |
        You made it! At this point your game should be
        fully functioning, take some time to enjoy your new game and make any final
        tweaks to it. When you're happy with the final product, click Finish and
        you'll have an opportunity to share a link to your game. Good work!
      Big Game Player 1_instruction: |
        We're getting really close to a finished game!
        Last time you worked on your game, you used booleans to make your Target and
        Danger return to the screen once they've left. Click Run to see how your
        game looks right now, and then we'll get to making your Player move up and
        down.
      Big Game Player 2_instruction: |
        Edit the update-player function so the player
        moves up when the up arrow (keycode 38) is pressed, and moves down (keycode
        40) when the down arrow is pressed.
      Big Game Testing_instruction: |
        A demo of the completed CS in Algebra Big Game
        project
      Big Game Vars 1 (copy 1)_instruction: |
        Let's get started on your Big Game!
        Here you'll see a whole bunch of placeholder code that you'll eventually
        replace with your own, but for now we're only going to worry about defining
        variables. Click "Run" to see what the game looks like with the default
        values.
      Big Game Vars 1_instruction: |
        Let's get started on your Big Game! Here you'll
        see a whole bunch of placeholder code that you'll eventually replace with
        your own, but for now we're only going to worry about defining variables.
        Click "Run" to see what the game looks like with the default values.
      Big Game Vars 2 (copy 1)_instruction: |
        The first step to making this game your
        own is to give it a good Title. Click edit on the 'title' and 'subtitle'
        variables and change them to something new.
      Big Game Vars 2_instruction: |
        The first step to making this game your own is
        to give it a good Title. Click edit on the title and subtitle variables and
        change them to something new.
      Big Game Vars 3 (copy 1)_instruction: |
        Now let's set the background for your
        new game. Edit the 'bg' variable and select a new background Image from
        the dropdown.
      Big Game Vars 3_instruction: |
        Now let's set the background for your new game.
        Edit the bg variable and select a new background Image from the dropdown.
      Big Game Vars 4 (copy 1)_instruction: |
        Awesome, now you can update the variables
        for your Player, Target, and Danger. Feel free to play with all of the variables
        at this point to make your game look like you'd like it to. Click 'finish'
        when you're done.
      Big Game Vars 4_instruction: |
        Awesome! Now you can update the variables for
        your Player, Target, and Danger. Feel free to play with all of the variables
        at this point to make your game look like you'd like it to. Click "Finish"
        when you're done.
      Brad Spooky House Copy_instruction: |
        Freeplay: Here are the functions you've
        written, and some more for you to play with. Draw something awesome! Play
        with the pen width to see how different your drawings look!
      Brad Spooky House_instruction: |
        Freeplay: Here are the functions you've written,
        and some more for you to play with. Draw something awesome! Play with the
        pen width to see how different your drawings look!
      Building a Foundation Assessment_instruction: |
        Build a three level pyramid,
        there are no other directions, so just play with the pieces until you get
        it!
      Busy Bee 2_instruction: Această albină are o mulţime de lucruri de facut! Observaţi
        vreunele modele pe care le puteţi utiliza pentru a simplifica codul?
      Busy Bee_instruction: Această albină are o mulţime de lucruri de facut! Observaţi
        vreunele modele pe care le puteţi utiliza pentru a simplifica codul?
      C3-Farmer While Loops 1_instruction: |
        Move me to the hole and fill it with
        two shovelfuls of dirt, using the "fill" block.
      C3-Farmer While Loops 2_instruction: |
        Move me to the pile of dirt and remove
        it with 5 shovel scoops, using the 'remove' block.
      C3-Farmer While Loops 3_instruction: |
        Move me to the pile and remove all of
        it, then move to the hole and fill it completely.  Hint:  Use as few blocks
        as possible.
      C3-Farmer While Loops 4_instruction: |
        Wow, I found a really deep hole! I don't
        know how many shovelfuls of dirt it needs.  Can you write a program that fills
        it until the ground is even?  Hint:  Try using the while loop this time.
      C3-Farmer While Loops 5_instruction: |
        Wow, now there are two deep holes! Can
        you write a program that fills them both until the ground is even?
      C3-Farmer While Loops 6_instruction: |
        Wow, now there is a large pile of dirt!
        Can you write a program that removes all of it so the ground is even?
      C3-Farmer While Loops 7_instruction: |
        Wow, now there are three piles of dirt!
        Can you write a program that removes each of them until the ground is even?
      C3-Farmer While Loops 8_instruction: |2
         There is a really deep hole and a really
        large pile of dirt.  How many shovelfuls of dirt need to be moved around to
        make the ground flat?  Hint: Use the while loop for both.
      C3-Farmer While Loops Assessment 1_instruction: |
        There are a lot of holes and
        piles.  Help me to fill and remove them to make the ground flat.
      Calc Circles of Eval .1_instruction: |
        You’ll be writing a kind of code called
        Evaluation Blocks, because each block of code evaluates to a single value.
        Change the ??? in this code so that the block evaluates to 5.
      Calc Circles of Eval .2_instruction: |
        This Evaluation Block is a multiplication
        function which takes two numbers and returns the product of those numbers.
        Edit this block so that it multiplies 2 * 5
      Calc Circles of Eval .3_instruction: |
        Here's a function for addition which
        takes two numbers and returns their sum. Use this Addition Block to add 3
        + 6.
      Calc Circles of Eval .4_instruction: |
        Here we've nested an Addition Block
        inside a Multiplication Block. Complete this code so it multiplies 3 by (4
        + 1)
      Calc Circles of Eval 1 (copy 1)_instruction: |
        Convert this statement to <some_shape>
        of evaluation.
      Calc Circles of Eval 1_instruction: |
        Every mathematical operator (+, -, *,
        /, and so on) can be represented by an Evaluation Block in code. Change the
        Evaluation Block to match the expression.
      Calc Circles of Eval 2 (copy 1)_instruction: |
        Convert this statement to <some_shape>
        of evaluation.
      Calc Circles of Eval 2_instruction: |
        Use a Multiplication Block to complete
        this code.
      Calc Circles of Eval 3_instruction: |
        Complete the Evaluation Blocks to match
        this statement.
      Calc Circles of Eval 4_instruction: |
        This code is missing a couple of Evaluation
        Blocks - make sure you put everything in the right order.
      Calc Circles of Eval 5_instruction: |
        Complete the Evaluation Blocks to match
        this statement.
      Calc Circles of Eval 6_instruction: |
        Complete the Evaluation Blocks to match
        this expression.
      Calc Circles of Eval 7_instruction: |
        Complete the Evaluation Blocks to match
        this statement.
      Calc Circles of Eval 8_instruction: |
        Complete the Evaluation Blocks to match
        this statement.
      Calc Circles of Eval 9_instruction: |
        Complete the Evaluation Blocks to match
        this statement.
      Calc Circles of Eval Free Play_instruction: |
        Free Play: Try using the Evaluation
        Blocks to write some equations of your own. How does nesting the blocks in
        different ways impact their evaluation?
      Calc Define Funcs 1 (copy 1)_instruction: |
        Let's look at some more algebraic
        functions now. Here's a function translated from the simple algebraic function
        f(x) = x + 1. What would you expect this function to output if provided an
        input of 15?
      Calc Define Funcs 1_instruction: |
        Let's look at some more traditional algebraic
        functions now. Here's a function translated from the simple algebraic function
        f(x) = x + 1. What would you expect this function to output if provided an
        input of 15?
      Calc Define Funcs 2_instruction: |
        Write a function f that takes a parameter
        x and returns x - 10. Test your function using f(15).
      Calc Define Funcs 3_instruction: |
        We don't have to call our function f every
        time; create a function called times-ten that should take a parameter x and
        return x * 10. Once you've created the function, run times-ten(50).
      Calc Define Funcs 4_instruction: |
        Write a function called half that takes a
        number x and returns half that number. Once you've written the function,
        use it to calculate half(21)
      Calc Define Funcs 5 - multiply 1_instruction: |
        Oh no! We lost our multiply
        block! We'll have to create a function to multiply for us. To start off,
        write a function "f" that takes a parameter "x" and returns x*5. Test
        your function using f(3).
      Calc Design Recipe 1_instruction: |
        Let's use the Design Recipe to create a
        function called cube - this function should take in a Number and return that
        number to the power of 3. Make sure to write two example cases! When you're
        done, use your new function to calculate cube(7).
      Calc Design Recipe 2_instruction: |-
        Your school is holding a bake sale, and
        you need to track the cost of making each cookie, the money paid, and the
        total profit. Cookies cost $0.25 each to make, and sell for $1.50/cookie.\r
        Write
        the function cost, which takes in the number of cookies you intend to sell,
        and returns the cost of making those cookies.
      Calc Design Recipe 3_instruction: |
        Write the function sales which takes in
        the number of cookies sold, and produces the amount of money customers spent
        to buy those cookies (each cookie is sold at $1.50).
      Calc Design Recipe 4_instruction: |
        Using the two functions we just wrote, write
        the function profit, which takes in the number of cookies you sold, and gives
        you back the total profit you make from selling your cookies, accounting for
        the cost of baking them.
      Calc Free Play_instruction: |
        Free Play: Write functions and algorithms of your
        own design!
      Calc Rocket 1 (copy 1)_instruction: |
        In the last puzzle you wrote a contract
        for the function "rocket-height" that states it has a range of Number, domain
        of Number, and should return the height of the rocket traveling at 15 m/s
        after a given number of seconds. Let's write an example case now for the
        height of the rocket at 3 seconds.\r
        \r
        \r
        \r
          \r
        \r
      Calc Rocket 1_instruction: |
        In the last puzzle you wrote a contract for the
        function rocket-height that states it has a range of Number, domain of Number,
        and should return the height of the rocket traveling at 15 m/s after a given
        number of seconds. Let's write an example case now for the height of the
        rocket at 3 seconds.
      Calc Rocket 2_instruction: |
        Great, let's do one more example before writing
        the function - what should the rocket height be after 30 seconds?
      Calc Vars 1.1_instruction: |
        Here we've set the age variable to 17 years. Can
        you write an expression that calculates age in days?
      Calc Vars 1_instruction: |
        Variables allow us to name values so that we can
        easily refer to them repeatedly throughout our programs. Here's a variable
        called age. Set its value to your age and click run.
      Calc Vars 2 (copy 1)_instruction: |
        Here we've set the "age" variable to
        17 - can you write an expression that calculates "age" in months?
      Calc Vars 2.1_instruction: |
        Here's a new variable called age-in-months. Use
        the variable age to set age-in-months.
      Calc Vars 2_instruction: |
        Can you write an expression that calculates age in
        months?
      Calc Vars 3 (copy 1)_instruction: |
        Can you add to this code so that it calculates
        how many hours there are in "age" years?
      Calc Vars 3_instruction: |
        Can you add to this code so that it uses the "age"
        variable to calculate age in hours?
      Calc Vars 4_instruction: |
        We can also set variables by using other variables.
        Let's say you have a brother who is two years younger than you - can you
        set a new variable "brother-age" using your "age" variable?
      Code Studio Puzzle Challenge 1 - Artist_instruction: "Draw the line. It is\n200
        pixels long. \n"
      Code Studio Puzzle Challenge 1 Artist1_instruction: "Draw the line. It is 200\npixels
        long. \n"
      Code Studio Puzzle Challenge 10 - Bee (copy 1)_instruction: |
        Move the Bee to
        the flower and get all of the nectar.
      Code Studio Puzzle Challenge 10 - Bee_instruction: |
        Move the Bee to the flower
        and get all of the nectar.
      Code Studio Puzzle Challenge 10b - Bee_instruction: |
        Move the Bee to the flowers
        and get all of the nectar at each.
      Code Studio Puzzle Challenge 11 - Artist_instruction: |
        Draw this line by using
        the variable "length". Each line segment is 75 pixels long.
      Code Studio Puzzle Challenge 11b - Artist_instruction: |
        Draw a square by using
        the variable length provided.
      Code Studio Puzzle Challenge 12 - Artist_instruction: |
        The code provided draws
        one triangle. Add to it to draw triangles in a hexagon pattern.
      Code Studio Puzzle Challenge 12a - Artist_instruction: |
        The code provided draws
        one triangle. Add to it to draw triangles in a hexagon pattern.
      Code Studio Puzzle Challenge 13 - Artist_instruction: "This is just like a\n\"for\"
        loop. Complete the code to draw six lines that grow from 50, 60, 70,\n80,
        90, to 100 pixels long. \n"
      Code Studio Puzzle Challenge 14 - Artist_instruction: "This is just like a\n\"for\"
        loop. Complete the loop to draw 4 squares that grow from 80, 100,\n120, to
        140 pixels. \n"
      Code Studio Puzzle Challenge 2 - Artist_instruction: |
        Now add a turn and another
        line. The lines are 200 pixels long.
      Code Studio Puzzle Challenge 3 - Artist_instruction: |
        Draw the square. Each
        side is 100 pixels long.
      Code Studio Puzzle Challenge 4 - Artist_instruction: |
        Draw the octagon. Each
        side is 100 pixels long.
      Code Studio Puzzle Challenge 5 - Bee (copy 1)_instruction: |
        Move the Bee to
        the flower and get the nectar.
      Code Studio Puzzle Challenge 5 - Bee_instruction: |
        Flowers contain a specific
        amount of nectar. Move the Bee to the flower and collect nectar with the get
        nectar block.
      Code Studio Puzzle Challenge 6 - Bee_instruction: |
        Honeycombs can hold a specific
        amount of honey. Get the nectar from the flower and make some honey.
      Code Studio Puzzle Challenge 7 - Bee_instruction: |
        Move the Bee to the flower
        and get the nectar.
      Code Studio Puzzle Challenge 8 - Bee_instruction: |
        The cloud could be hiding
        a flower or a honeycomb. Only get nectar from flowers. Only make honey at
        honeycombs.
      Code Studio Puzzle Challenge 9 - Bee_instruction: |
        The cloud could be hiding
        a flower or a honeycomb. Only get nectar from flowers. Only make honey at
        honeycombs.
      Code Studio Puzzle Challenge Artist Screencast (copy 1)_instruction: "Draw\nthe
        line. Each segment is 100 pixels long. \n"
      Code Studio Puzzle Challenge Artist Screencast 2_instruction: "Complete the\ncode
        to draw the line. Each segment is 100 pixels long. \n"
      Code Studio Puzzle Challenge Artist Screencast_instruction: "Draw the line.\nEach
        segment is 100 pixels long. \n"
      Code Studio Puzzle Challenge Bee Screencast_instruction: |
        Move the Bee to the
        flowers and get all of the nectar.
      Code Studio Puzzle Challenge Square - Artist_instruction: |
        Draw a square by
        using the variable length provided.
      Code Studio Puzzle Challenge Var - Artist_instruction: |
        Draw a line by using
        a variable "length" set to 180.
      Course 2 Bee Loops 1_instruction: "Hi, I'm a bee. Can you help me collect\nthe
        nectar from these flowers? \n"
      Course 2 Bee Loops 13_instruction: |
        Assessment: Use the repeat block to collect
        all of the nectar.
      Course 2 Bee Loops 2_instruction: |
        Can you do the same task more easily with
        a loop?
      Course 2 Bee Loops 3_instruction: |
        Now use the new repeat block to collect
        all of the nectar and make all of the honey.
      Course 2 Bee Loops 3__instruction: |
        Can you use a loop to collect all that
        nectar?
      Course 2 Bee Loops 4_instruction: |
        What happens if you loop this sequence 3
        times? Don't forget to make the honey at the end!
      Course 2 Maze Loops 1_instruction: Poţi să mă duci la porc din 5 mutări?
      Course 4 2_instruction: Albina vrea acum doar nectar. Amintiţi-vă, nu toate
        obiectele sunt flori, deci verifică să colectezi nectar doar din flori.
      Course 4 Artist 1_instruction: 'Ajută-mă să desenez o cutie. (Fiecare linie
        are lungimea de 200 pixeli) '
      Course 4 Artist 10_instruction: 'Este timpul să ne jucăm liber! Aici se află
        codul pentru o formă interesantă. Oare ce se întâmplă când îl repeţi? Distrează-te
        şi desenează orice îţi place. '
      Course 4 Artist 11_instruction: 'Acum, o provocare! Iată un proiect care foloseşte
        construcţii pe care le cunoşti. Reuşeşti să îl creezi din nou fără informaţii
        suplimentare? Indicaţie: Esti liber să foloseşti modulul încercare şi eroare.
        Nu te aştepta să reuşeşti din prima.'
      Course 4 Artist 12_instruction: |-
        Vrei să-ți arunci o a doua privire la designul de inspirație sau indicii? Clic aici\r
        \r
        Altfel, creează un design doar al tău!
      Course 4 Artist 13_instruction: Joci? Aici este o pânză albă unde poţi schiţa
        orice doreşti!
      Course 4 Artist 2_instruction: Poţi să reiei acest cod pentru a desena un patrulater
        de culoare gri?
      Course 4 Artist 20_instruction: Joci? Aici este o pânză albă unde poţi crea
        orice doreşti!
      Course 4 Artist 3_instruction: Încearcă să înţelegi ce se întâmplă dacă rulezi
        acest cod (sau apeşi "Run" pentru a-l testa). Apoi, repetă rularea de atâtea
        ori cât este necesar pentru a termina desenul.
      Course 4 Artist 4_instruction: Câte grade are un cerc? Completaţi construcţia
        repetitivă cu acel număr necesar să  creezi un cerc de culori.
      Course 4 Artist 5_instruction: 'Desenează cealaltă jumătate a desenului pentru
        a fi simetric. Triunghiurile sunt echilaterare cu lungimea de 50 pixeli. Indicaţie:
        Este necesară rularea codului de câteva ori pentru a rezolva toate blocurile
        necesare a fi adăugate.'
      Course 4 Artist 6_instruction: |
        Completează codul pentru a desena aceste triunghiuri.
        Indicaţie: Există 3 triunghiuri care se rotesc 360 grade...de câte ori intră 3 în 360?
      Course 4 Artist 7_instruction: 'Acum include această buclă în interiorul altei
        bucle pentru a desena 10 triunghiuri. Aceasta se numește buclă imbricată.
        Indicație: Toate cele 10 triunghiuri fac o rotație completă de 360 grade.  '
      Course 4 Artist 8_instruction: Desenează acest soare prin buclarea întregii
        secvențe de cod, de mai multe ori.
      Course 4 Artist 8a_instruction: |-
        Îți reamintești această formă? Acum o să te lasăm sa o construiești fară să îți dăm nici un bloc pentru început\r
        Sugestie: Sunt 3 triunghiuri cu rotație de 360 de grade...de câte ori intră 3 in 360?
      Course 4 Artist 9_instruction: 'Reia rularea acestor instrucţiuni de 10 ori
        şi asigură-te că fiecare forma este rotită înainte de a fi desenată. Ai aici
        o indicaţie pentru cât de mult trebuie rotită: Care este rezultatul împărțirii
        lui 360 la 10?'
      Course 4 Artist Binary 1_instruction: |-
        Aici avem o funcție care ia un şir binar format din 1 şi 0, care îndrumă artistul să le urmeze de la stânga la dreapta, de sus în jos. Artistul va umple spațiile când vede 1 şi le va ignora când vede 0. \r
        \r
        Rulează codul pentru a vedea cum artistul folosește şirul binar pentru a desena acest model.
      Course 4 Artist Binary 1a_instruction: |-
        Aici avem o funcție care ia un şir binar format din 1 şi 0, care îndrumă artistul să le urmeze de la stânga la dreapta, de sus în jos. Artistul va umple spațiile când vede 1 şi le va ignora când vede 0. \r
        \r
        Rulează codul pentru a vedea cum artistul folosește şirul binar pentru a desena acest model.
      Course 4 Artist Binary 2_instruction: Care dintre aceste șiruri binare trebuie
        rulate de 8 ori pentru a desena această imagine?
      Course 4 Artist Binary 3_instruction: Poţi desena acest model prin rularea în
        buclă a unui şir binar de trei digiți?
      Course 4 Artist Binary 4_instruction: Fiecare şir binar reprezintă o linie din
        această imagine. Poţi să rearanjezi liniile astfel încât desenul să reprezinte
        o faţă zâmbitoare în loc de o faţă tristă?
      Course 4 Artist Binary 5_instruction: Care şir binar de 6 caractere, repetat
        de 11 ori va desena această imagine?
      Course 4 Artist Binary 6_instruction: Care este cel mai scurt şir binar pe care
        tu poţi să-l rulezi repetat pentru a desena această imagine?
      Course 4 Artist Binary 7_instruction: Finalizează acest desen.
      Course 4 Artist Binary Free Play 2_instruction: 'Joc liber: Aici ai o pânză
        de desen cu o rezoluţie mare - 16 biţi pe 16 biţi!'
      Course 4 Artist Binary Free Play 2a_instruction: Aici este o pânză de rezoluţie
        mai mare pentru a desena - 16 pixeli 16 pixeli! \r \r Vezi ce se întâmplă
        atunci când începem sa cream cu biţi?
      Course 4 Artist Binary Free Play 2b_instruction: Click aici pentru a vedea indicii.
      Course 4 Artist Binary Free Play_instruction: 'Joc liber: Desenează ce-ţi place
        ţie în binar!'
      Course 4 Artist Binary pre1_instruction: Codul binar este un mod de a reprezenta
        informatia utilizand numai doua optiuni. Aici, vom folosi optiunile "off"(reprezentat
        de numarul zero) si "on" (reprezentat de numarul 1). \r\r V-am pus la dispozitie
        o grila de pixeli prin care va puteti plimba si face design-uri intorcand
        doar anumite patrate. Il poti face pe artist sa deseneze "01010101"in cod
        binar in primul rand?
      Course 4 Artist Binary ryan_instruction: Codul binar este un mod de a reprezenta
        informatia utilizand numai doua optiuni. Aici, vom folosi optiunile "off"(reprezentat
        de numarul zero) si "on" (reprezentat de numarul 1). \r\r V-am pus la dispozitie
        o grila de pixeli prin care va puteti plimba si face design-uri intorcand
        doar anumite patrate. Il poti face pe artist sa deseneze "01010101"in cod
        binar in primul rand?
      Course 4 Artist For  Functions 10_instruction: Hai să progresăm un pic, poţi
        desena o stea folosind funcţia "Draw a Square Line"? Succes!
      Course 4 Artist For  Functions 11_instruction: Hai să progresăm un pic, poţi
        desena o stea folosind funcţia "Draw a Square Line"? Succes!
      Course 4 Artist For Loops 1_instruction: 'Desenează acest triunghi de 50 de
        pixeli mărime. Tip: folosește un bloc "repetă".'
      Course 4 Artist For Loops 10_instruction: Timpul jocului liber! Distrează-te
        desenând orice îţi place folosind construcţiile învăţate
      Course 4 Artist For Loops 11_instruction: "Îți amintești cum am folosit o variabilă
        pentru a controla numărul laturilor unei forme? Acest model începe cu un triunghi
        și adaugă pe rând câte o latură până când desenează un decagon (10 laturi).
        Fiecare latură ar trebui să aibă o lungime de 100 de pixeli. Sugestie: 360
        împărțit la numărul de laturi ale unei forme dă numărul de grade la care va
        trebui să virezi."
      Course 4 Artist For Loops 11a_instruction: |-
        Hai să le punem la un loc! Folosind cunoştiinţele despre "bucle" şi despre "contor", crează acest desen unde fiecare formă are două laturi în plus faţă de ultima. Asigură-te că fiecare latură este de 10 ori mai lungă ca numărul de laturi ale poligonului.\r
        \r
        Foarte puţin din cod este completat pentru tine.
      Course 4 Artist For Loops 12_instruction: 'Asta arată destul de bine, dar acum
        aş vrea să desenezi fiecare formă lângă ultima. De data asta fiecare latură
        este de 20 pixeli. Foloseşte o construcţie de tip salt pentru a sări înainte
        40 pixeli după fiecare formă. '
      Course 4 Artist For Loops 13_instruction: Hmmm, aceste forme devin din ce în
        ce mai mari de fiecare dată! Nu am rezolvat deja această problemă cu variabile?
        Cum putem folosi noi variabila numărătoare pentru a micșora laturile având
        în vedere că acestea sunt mai multe la număr? În loc de a muta înainte pe
        câte o anumită porțiune prestabilită, încearcă să înaintezi (100 / numărător)
        pixeli.
      Course 4 Artist For Loops 14_instruction: Dacă tu roteşti puţin mai mult sau
        mai puţin decât ar trebui în mod normal pentru o formă, crează o formă îngrijită.
        Încearcă rotind 89 grade pentru a crea o spirală pătrată răsucită.
      Course 4 Artist For Loops 15_instruction: 'Joc liber: Încearcă să faceţi câteva
        desene singuri folosind instrucţiunea "For Loops". Am adăugat câteva variabile
        generice pentru a le utiliza.'
      Course 4 Artist For Loops 2_instruction: 'Am pus codul pentru a desena un triunghi
        într-o buclă care numără de la 50 la 100 din 10 în 10. Aruncă o privire la
        cum este construit codul apoi dă clic pe "Run" când eşti gata să-l vezi în
        acţiune. '
      Course 4 Artist For Loops 3_instruction: Cel mai mic triunghi are laturile de
        20 pixeli, cel mai mare are laturile de 200 pixeli, şi fiecare triunghi este
        cu 20 pixeli mai mare decât ultimul. Actualizează instrucţiunea "for loop"
        pentru a desena aceste triunghiuri.
      Course 4 Artist For Loops 4_instruction: Utilizaţi "for loop" pentru a desena
        aceste patrulatere. Ele încep cu 50 pixeli lungime, cel mai mare are 300 pixeli
        lungime şi fiecare patrulater este cu 25 pixeli mai mare decât ultimul. Ţi-am
        dat aproape tot codul de care ai nevoie - îţi lipseşte o singură rutină, care
        este aceea?
      Course 4 Artist For Loops 5_instruction: 'Bună treabă ai făcut la ultimul puzzle!
        Hai să folosim acea contrucţie variabilă "contor" iar pentru a desena a desena
        această imagine simpatică. '
      Course 4 Artist For Loops 6_instruction: Joc liber! Încearcă să foloseşti instrucţiunea
        "for loop" pentru a desena un formă care îşi măreşte dimensiunea cum vrei
        tu.
      Course 4 Artist For Loops 6a_instruction: Fă trei modificări mici la codul de
        la ultimul nivel pentru a obţine aceast lucru!
      Course 4 Artist For Loops 7_instruction: Ce se întâmplă dacă elimini instrucţiunea
        "Repeat 3" din acest algoritm, păstrând construcţiile "move" şi "turn" în
        "for loop"? În această spirală generată de un triunghi, fiecare latură este
        cu 20 pixeli mai lungă decât ultima.
      Course 4 Artist For Loops 8_instruction: Latura cea mai mică a acestei spirale
        pătratică este de 10 pixeli, cea mai mare este de 200 pixeli şi fiecare linie
        este cu 10 pixeli mai lungă decât ultima. Poţi completa blocul de instrucțiuni
        lipsă pentru a finaliza această imagine minunată?
      Course 4 Artist For Loops 8a_instruction: Latura cea mai mică a acestei spirale
        pătratică este de 10 pixeli, cea mai mare este de 200 pixeli şi fiecare linie
        este cu 10 pixeli mai lungă decât ultima. Poţi completa blocul de instrucțiuni
        lipsă pentru a finaliza această imagine minunată?
      Course 4 Artist For Loops 9_instruction: Poți face o spirală? Înaintează de
        la 1 pixel la 75 pixeli crescând cu 1 pixel de fiecare dată.
      Course 4 Artist For Loops Challenge_instruction: |-
        Poți să îți dai seama cum să folosești toate lucrurile pe care le-ai învățat ca sa creezi această imagine?\r\r
        Ai nevoie de o sugestie?
        Click/apasa aici.
      Course 4 Artist For Loops inspire_instruction: |-
        Inspiraţie pentru joc liber: Acum ai învăţat tot ce ai nevoie să ştii pentru a crea un model ca acesta! Dacă această imagine te inspiră, încearcă să faci ceva similar. Altfel, creează ceva pe cont propriu.\r
        \r
        Ai nevoie de un indiciu? Fă clic aici.
      Course 4 Artist Functions 1_instruction: Poți desena un pătrat care are lungimea
        laturii de 100 pixeli, folosind o construcție buclă?
      Course 4 Artist Functions 10_instruction: De ce bloc de instrucțiuni ai nevoie
        pentru a adăuga un triunghi deasupra pătratului?
      Course 4 Artist Functions 11_instruction: Verifică acest cod care desenează
        un cub - poţi să îl transformi într-o funcţie numită "Draw a Cube"
      Course 4 Artist Functions 12.1_instruction: Hai să creăm o funcție numită "desenează
        un octogon 20" care deseneză un octogon cu fiecare latură de 20 de pixeli
        lungime.
      Course 4 Artist Functions 12_instruction: Reia în buclă funcţia square pentru
        a desena o linie
      Course 4 Artist Functions 13.1_instruction: |-
        Acum, hai să facem o funcție numită "salt la dreapta sus" care mută artistul în partea din dreapta sus a octogonului pe care tocmai l-ai desenat ca să finalizăm acest model\r
        \r
        Indiciu: Pentru a ajunge în colțul din dreapta sus a octogonului, încearcă să sări după un model care realizează doar 3/8 din octogon.
      Course 4 Artist Functions 13_instruction: Verifică dacă avem o funcţie nouă
        definită "draw a line of squares". Fi liber să arunci o privire în instrucţiunile
        funcţiei pentru a vedea cum am construit-o. Dă clic pe "Run" când eşti gata
        pentru puzzle-ul următor.
      Course 4 Artist Functions 14.1_instruction: Acum, hai să facem o funcție numită
        "salt la dreapta sus" care mută artistul în partea din dreapta sus a octogonului
        pe care tocmai l-ai desenat ca să finalizăm acest model.
      Course 4 Artist Functions 14_instruction: Ai lucrat bine! Hai să folosim noua
        ta funcţie "Draw a line of squares" pentru a desena o formă pătrată. Ţine
        minte fiecare pătrat are 40 pixeli lungime.
      Course 4 Artist Functions 15_instruction: 'Hai să progresăm un pic, poţi desena
        o figură în formă de stea folosind funcţia "draw a line of square"? Succes!
        Indicaţie: trebuie să roteşti la 144 grade'
      Course 4 Artist Functions 2_instruction: 'Poţi desena 3 pătrate situate la 20
        pixeli depărtare unul de celălalt? Indicaţie: fiecare pătrat are latura de
        100 pixeli'
      Course 4 Artist Functions 3_instruction: |
        Folosind blocul de instrucţiuni "draw a square" poţi desena această imagine? Indicaţie: fiecare pătrat este depărtat cu 120 pixeli.\r
      Course 4 Artist Functions 4_instruction: 'Ești gata să-ți creezi propriul "bloc
        de funcție"? Fă clic pe blocul "Funcții" din cutia de instrumente, numește-l
        "desenează un triunghi", apoi creează un triunghi așa cum ai mai făcut anterior
        cu blocurile "Acțiune" și "Bucle". Apoi, fă clic pe Salvează și Închide în
        colțul din dreapta sus. Tip: Creează un triunghi care are 100 de pixeli lungime.
        Mult noroc!'
      Course 4 Artist Functions 5 OLD_instruction: Hai să încercăm să folosim cele
        două funcții ale noastre pentru a desena o casă - ce trebuie corectat în acest
        cod pentru ca acesta să deseneze casa așa cum trebuie?
      Course 4 Artist Functions 5_instruction: |
        Folosind blocul de instrucţiuni "draw a square" poţi desena această imagine? Indicaţie: fiecare pătrat este depărtat cu 120 pixeli.\r
      Course 4 Artist Functions 6_instruction: De ce bloc de instrucțiuni ai nevoie
        pentru a adăuga un triunghi deasupra pătratului?
      Course 4 Artist Functions 7_instruction: Poți desena o linie de pătrate folosind
        funcția Pătrat? Fiecare pătrat are lungime de 40 de pixeli.
      Course 4 Artist Functions 8_instruction: 'Începi să-ți dai seama cum să folosești
        blocurile de funcție? Hai să modificăm acest pătrat astfel încât să aibe o
        dimensiune de 200 de pixeli. Sugestie: fă clic pe "editează" pentru a schimba
        dimensiunea în editorul funcției "desenează un pătrat". Amintește-ți să faci
        clic pe "salvează și închide" pentru a ieși din editorul de funcție. '
      Course 4 Artist Functions 9_instruction: "Ți-am dat cea mai mare parte din codul
        pentru crearea unei funcții. Cu toate acestea se pare că ceva lipsește. Poți
        finaliza acest bloc de funcție?"
      Course 4 Artist Functions challenge_instruction: Fă clic aici pentru a vedea
        din nou indiciile.
      Course 4 Artist Functions Inspiration_instruction: Fă clic aici pentru a vedea
        din nou indiciile.
      Course 4 Artist Functions inspire_instruction: Fă clic aici pentru a vedea din
        nou imaginea de inspiraţie.
      Course 4 Artist Inspire_instruction: |-
        Vrei să-ți arunci o a doua privire la designul de inspirație sau indicii? Clic aici\r
        \r
        Altfel, creează un design doar al tău!
      Course 4 Artist Params 1_instruction: Hai să edităm o funcție care desenează
        un pătrat cu laturi de 50 de pixeli
      Course 4 Artist Params 10_instruction: 'Poți apela funcții din interiorul altor
        funcții! Folosind ca bază funcția ta de "formă", creează 3 forme de casă fiecare
        mai mare cu 20 de pixeli decat precedenta, începând cu 50 de pixeli în lungime.
        Ar putea fi de ajutor folosirea unei bucle numărătoare. '
      Course 4 Artist Params 11_instruction: |
        How about a function called "pinwheel"
        that takes three parameters - "sides," "length" and "repeat." You can
        calculate how much to turn after each shape using the same math you used to
        figure out the turns for a shape of "sides". Can you recreate this picture?
        Here's a tip each shape is 100 pixel's in length.
      Course 4 Artist Params 12_instruction: Utilizează funcția ta "morișcă" pentru
        a desena fiecare dintre aceste forme. Lungime laturii pentru fiecare imagine
        este 50.
      Course 4 Artist Params 13_instruction: 'Joc la alegere: Ai aici funcțiile pe
        care le-ai scris și chiar și câteva în plus pentru a te juca cu ele. Desenează
        ceva minunat!'
      Course 4 Artist Params 2_instruction: |
        That triangle function would be a whole
        lot more useful if it could draw triangles of different sizes. I've added
        a parameter for line length, but it doesn't do anything yet. Can you update
        the function so it uses the "length" parameter when it draws each side?
        The triangle sizes are 150 pixels, 75 pixels and 25 pixels.
      Course 4 Artist Params 3_instruction: 'Minunat, poți desena fiecare din aceste
        triunghiuri cu acea funcție nouă? Primul are o lungime de 25 de pixeli, al
        doilea 50 și al treilea 75. '
      Course 4 Artist Params 4_instruction: Poți adăuga o funcție nouă numită pătrat?
        Aceasta ar trebui să aibe de asemenea și un parametru de lungime, la fel ca
        triunghiul. De data aceasta, desenează 3 pătrate cu lungimi de 25, 50 și 75
        de pixeli, la o distanță de 100 de pixeli unul față de celălalt.
      Course 4 Artist Params 5_instruction: |
        Folosește ambele funcții noi ale tale pentru a desena această imagine. Pentru a face acest lucru mai ușor, folosește o buclă cu un parametru "numărător".
      Course 4 Artist Params 6_instruction: "Hai să edităm această funcție \"desenează
        o formă\".\nAceasta are deja un parametru: \"lungime\". Acum hai să edităm
        funcția pentru a adauga deasemenea și un parametru \"laturi\". Să ne amintim
        că unghiul de întoarcere pentru o formă dată este de 360 împărțit la numărul
        de laturi pe care le are. Sugestie: lungimile pentru fiecare formă sunt: triunghiul
        are 100 de pixeli, hexagonul are 25 de pixeli și pătratul are 50 de pixeli.
        \n"
      Course 4 Artist Params 7_instruction: 'Poți desena aceste forme prin completarea
        "???" Pătratul și triunghiul au o mărime de 100 de pixeli, pe când hexagonul
        are o mărime de 75 de pixeli. '
      Course 4 Artist Params 8_instruction: "Îți poți da seama cum să desenezi aceasta
        forma? Iată un indiciu creează o nouă funcţie cu 6 laturi numită un hexagon.
        \n"
      Course 4 Artist Params 9_instruction: Îți amintești cand am folosit bucla numărătoare
        dar am înlăturat o buclă din interior? Hai să ne distrăm puțin și să folosim
        o funcție "desenează o formă" cu parametri "laturi" și "lungime". Poți re-crea
        aceste forme? Număratorul pătratului ar trebui să fie 5/100/5, numărătorul
        triunghiului ar trebui să fie 10/100/10 și hexagonul este 2/100/2.
      Course 4 Artist Var 9_instruction: "Iată aici algoritmul pentru a desena un
        triunghi, \nmodifică-l așa încât acesta să folosească de această data variabila
        \"laturi\". Înlocuiește numărul 3 cu variabila \"laturi\". Sugestie: amintește-ți
        să utilizezi blocul \"setează laturi la\".\n"
      Course 4 Artist Vars 1_instruction: "Mă poți ajuta să desenez un triunghi echilateral?
        \nAcesta trebuie să aibe fiecare latură de 100 de pixeli lungime.\n"
      Course 4 Artist Vars 10_instruction: Iată aici un algoritm care desenează un
        triunghi din triunghiuri mai mici. Poți să-l modifici așa încât acesta să
        folosească variabila "laturi" pentru a desena fiecare triunghi? Uită-te prin
        cod şi, de fiecare dată când vezi numărul 3, înlocuiește-l cu variabila ta
        "laturi". Aminteaște-ți să utilizezi blocul "setează laturi".
      Course 4 Artist Vars 11_instruction: Iată aici același algoritm pe care l-am
        inventat pentru ultimul puzzle - la cât ar trebui să setezi variabila "laturi"
        pentru a desena cu pătrate această imagine?
      Course 4 Artist Vars 12_instruction: Hai să setăm variabila "laturi" la 5. Cu
        cât adăugam mai multe laturi la acest algoritm, cu atât acest întreg model
        devine mai mare! Observă că există nouă variabilă numită "lungime". Acum o
        putem folosi pe aceasta oriunde avem un "mută înainte". Setează variabila
        "lungime" la 75 pentru acestă formă.
      Course 4 Artist Vars 13_instruction: Cand o forma are mai multe fete, fiecare
        fata trebuie sa fie mai scurta daca doriti ca intregul model sa se integreze
        in ecran. \r Haideti sa cream algoritmul pentru acest model, dar in loc sa
        adaugam manual variabila 'lungime', haideti sa folosim un bloc matematic cu
        variabila "parte" pentru a ne asigura ca fiecare forma se potriveste corect.
        Perimetrul fiecarui poligon este 300 de pixeli.\r Ai nevoie de niste ponturi?
        Click aici.
      Course 4 Artist Vars 14_instruction: 'Joc la alegere: Ia te uită! Acum algoritmul
        tău este cuprins în cadrul unei bucle suplimentare. Experimentează schimbarea
        valorilor celor două variabile ale tale pentru a desena modele super tari.'
      Course 4 Artist Vars 2_instruction: În loc de "mută înainte cu 100", blocul
        "mută" se va referi acum la variabila numită "lungime". Poți seta "lungime"
        la 150 pentru a desena acest triunghi nou?
      Course 4 Artist Vars 3_instruction: 'Avem aici o buclă ce desenează un pătrat,
        dar ceva lipsește. Poți s-o repari astfel încât să folosească variabila "lungime"
        pentru a ne da seama cât de lungă trebuie să fie fiecare latură? '
      Course 4 Artist Vars 4_instruction: Acum vreau să fac un dreptunghi care este
        de două ori mai înalt pe cât este de lat. Avem o variabilă numită "lățime"
        care este setată la 100. Poți folosi blocurile matematice pentru a completa
        codul?
      Course 4 Artist Vars 5_instruction: Folosește variabila "laturi" pentru a controla
        de câte ori se rulează această buclă.
      Course 4 Artist Vars 6_instruction: |-
        Am adăugat o variabilă numită "laturi" care este setată la 4. Poți folosi variabila "laturi" (împreună cu blocul matematic) pentru a te asigura că mă întorc destul pentru a crea un pătrat? \r
        \r
        Tip:
        Pentru a desena un poligon regulat, eu ar trebui să mă întorc 360/laturi de fiecare dată.
      Course 4 Artist Vars 7_instruction: Poți tu modifica variabila "laturi" pentru
        a mă ajuta să desenez acest hexagon?
      Course 4 Artist Vars 8_instruction: 'Joc la alegere: Experimentează cu numărul
        de laturi pe care le are această formă. Poţi schimba algoritmul astfel încât
        dimensiunea globală a formei rămâne aceeaşi, indiferent de cât de multe laturi
        are aceasta? Sugestie: S-ar putea să fie necesar să utilizezi blocurile tale
        matematice (360 împărţit "laturi" în două locuri de data aceasta) '
      Course 4 Artist Vars 9_instruction: Modifică acest algoritm așa încât să folosească
        variabila "laturi" în loc de un număr fix pentru a desena un triunghi. Nu
        uita să utilizezi blocul "setare laturi la".
      Course 4 Bee 1_instruction: 'Albina nu poate ști ce este sub nor! Prima dată,
        verifică dacă este o floare sau un fagure de miere. Numai apoi adună nectar
        dacă este o floare. '
      Course 4 Bee 2_instruction: Verifică fiecare obiect pentru a vedea dacă acesta
        este o floare. Dacă este, colectează nectarul... altfel, poți să-l ignori!
      Course 4 Bee 3_instruction: Obiectul necunoscut este fie o floare, fie un fagure
        de miere. Utilizează blocul dacă/altfel să colectezi nectar dacă este o floare,
        altfel fă miere (pentru că atunci ar fi un fagure de miere).
      Course 4 Bee 4_instruction: Această floare violetă ar putea avea ori 3, ori
        2 nectaruri sau 1 nectar. Aici, un bloc "dacă-altfel" este combinat cu alt
        bloc "dacă-altfel" pentru a crea un bloc "dacă", "altfel-dacă", "altfel".
        Completează soluția pentru a colecta cantitatea necunoscută de nectar.
      Course 4 Bee 5_instruction: Această floare violetă ar putea avea ori 3, ori
        2 nectaruri sau 1 nectar. Adaugă un bloc "dacă-altfel" pentru a crea un bloc
        "dacă", "altfel-dacă", "altfel". Completează soluția pentru a colecta cantitatea
        necunoscută de nectar.
      Course 4 Bee 6_instruction: Această floare violetă ar putea avea ori 3, ori
        2 nectaruri sau 1 nectar. Creează un bloc "dacă", "altfel-dacă", "altfel"
        pentru a colecta cantitatea necunoscută de nectar.
      Course 4 Bee 7_instruction: Folosește tot ce ai învățat pânăacum pentru a colecta
        tot nectarul. Floarea violetă ar putea avea ori 3, ori 2 nectaruri sau 1 nectar.
      Course 4 Bee For Loops 1_instruction: Utilizează o buclă pentru a colecta nectarul
        din fiecare floare.
      Course 4 Bee For Loops 10_instruction: Dacă bucla ta este de numărare în ordine
        descrescătoare, incrementul este scăzut din variabila ta numărător la fiecare
        buclă. Ce ar trebui să fie incrementul tău pentru a colecta 9 nectaruri, apoi
        6, şi apoi 3 nectaruri?
      Course 4 Bee For Loops 11_instruction: Ce este în neregulă cu acestă buclă?
        Vezi dacă poți s-o repari și să faci albina să colecteze tot nectarul.
      Course 4 Bee For Loops 2_instruction: Aici este un nou tip de buclă, numit bucla
        "pentru". Acest tip de buclă "pentru" va număra de la 1 la 5, câte 1, şi va
        rula conţinutul buclei de fiecare dată când numără. Ajută Albina să obțină
        nectarul.
      Course 4 Bee For Loops 3_instruction: Poți rezolva acest puzzle folosind o buclă
        "pentru" care să numere de la 1 la 3 câte1. Acum hai să mergem să luăm ceva
        nectar!
      Course 4 Bee For Loops 4_instruction: Colectează tot nectarul din aceste flori.
        Mă întreb dacă există o modalitate mai ușoară de a face acest lucru...
      Course 4 Bee For Loops 5_instruction: "Ah, bucla \"pentru\" face acest lucru
        mult mai ușor!\nFolosind variabila \"numărător\" din bucla \"pentru\" ca să
        repete blocul \"obține nectar\" de același numări de ori ca și bucla. Ptiu!
        Asta înseamnă o mulțime de bucle. Ai nevoie de întregul cod acolo, aruncă
        o privire asupra modului în care este pus cap la cap apoi fă clic pe Rulează
        și observă cum funcționează. \n"
      Course 4 Bee For Loops 6_instruction: De asemenea, poţi utiliza o buclă "pentru"
        ca să numere în ordine descrescătoare. Încearcă să colectezi acest nectar
        numărând în ordine descrescătoare de la 5 la 1 câte 1.
      Course 4 Bee For Loops 7_instruction: Folosește variabila ta din bucla "pentru"
        ca să controlezi cât de departe să muți pe orizontal.
      Course 4 Bee For Loops 8_instruction: Poţi folosi variabila de buclă pentru
        a controla mişcarea şi colectarea de nectar?
      Course 4 Bee For Loops 9_instruction: Ultimul număr din bucla ta "pentru" este
        numit "increment" şi, de fiecare dată când bucla se execută, variabila "numărător"
        se modifică prin increment. Încearcă să colectezi aceste flori folosind un
        increment de 2.
      Course 4 Bee Loops 5 NEW_instruction: Aici sunt trei flori. Poti găsii tiparul
        de instructiuni de care ai nevoie să il repeți de 3 ori ca să colectezi nectarul
        cu cât mai putine blocuri?
      Course 4 Bee Loops 5a NEW_instruction: Acum, utilizează bucle pentru a ajuta
        la albina să colecteze cu cât mai puţine blocuri posibil tot nectarul din
        drumul ei spre fagurele de miere.  Când ajungi acolo, nu uita să facă miere!
      Course 4 Bee Params 1_instruction: Utilizează funcţia "obține 3 nectaruri",
        care se întoarce, se mută pentru a colecta nectarul şi apoi revine la locaţia
        originală. Scrie o secvenţă pentru a colecta tot nectarul folosind "obţine
        3 nectaruri."
      Course 4 Bee Params 2_instruction: Modifică funcţia "obţine 3 nectaruri", astfel
        încât mă facă să mă întorc la dreapta, în loc de stânga, către flori.
      Course 4 Bee Params 3 (copy 1)_instruction: Acum sunt flori pe ambele părți!
        Poate că poți folosi un parametru astfel încât aceeași funcție se aplică florilor
        de pe ambele părți. Am adăugat la funcție un parametru numit "direcție". Dacă
        parametrul "direcție" este egal cu 0 ar trebui să mă întorc la stânga, dacă
        e 1ar trebui să mă întorc la dreapta.
      Course 4 Bee Params 3_instruction: Acum sunt flori pe ambele părți! Am adăugat
        la funcție un parametru numit "direcție". Folosește variabilele "stânga" și
        "dreapta" pentru a controla direcția. Completează restul definiției funcției
        și apoi fă clic pe "Salvează și Închide".
      Course 4 Bee Params 4 (copy 1)_instruction: "Încearcă să folosești noua ta funcție
        pentru a colecta toate florile. Amintește-ți, 0 = stânga și 1 = dreapta."
      Course 4 Bee Params 4 - Two WhenRun_instruction: "Încearcă să utilizezi funcţia
        ta nouă pentru a colecta toate florile. Amintește-ți să utilizezi variabilele
        stânga şi dreapta."
      Course 4 Bee Params 4 backup_instruction: Nu ar fi frumos dacă am putea colecta
        toate aceste nectaruri cu o singură funcţie? Încearcă să adăugi un parametru
        nou la funcţia ta numit "nectaruri" pentru a controla cantitatea de nectar
        de colectat. Probabil vei dori și să redenumești funcţia!
      Course 4 Bee Params 4_instruction: "Încearcă să utilizezi funcţia ta nouă pentru
        a colecta toate florile. Amintește-ți să utilizezi variabilele stânga şi dreapta."
      Course 4 Bee Params 5_instruction: Hai să începem de la zero - poți crea o funcție
        nouă numită "obține 5 nectaruri" cu un parametru de direcție?
      Course 4 Bee Params 6 (copy 1)_instruction: "Încearcă să aduni tot nectarul
        folosind noua funcţie construită de tine."
      Course 4 Bee Params 6_instruction: Nu ar fi frumos dacă am putea colecta toate
        aceste nectaruri cu o singură funcţie? Încearcă să adăugi un parametru nou
        la funcţia ta numit "unităţi de nectar" pentru a controla cantitatea de nectar
        de colectat. Probabil vei dori și să redenumești funcţia!
      Course 4 Bee Params 7 (copy 1)_instruction: "Încearcă să aduni tot nectarul
        folosind noua funcţie construită de tine."
      Course 4 Bee Params 7_instruction: "Încearcă să aduni tot nectarul folosind
        noua funcţie construită de tine."
      Course 4 Bee Params 8 Clone 2_instruction: Oooh, acum există miere de care să
        ne ocupăm! Cum ți-ai putea tu actualiza funcţia ca ori să obţină nectar ori
        să facă miere.
      Course 4 Bee Params 8 clone 3_instruction: Oooh, acum există miere de care să
        ne ocupăm! Cum ți-ai putea tu actualiza funcţia ca ori să obţină nectar ori
        să facă miere.
      Course 4 Bee Params 8 Clone_instruction: Oooh, acum există miere de care să
        ne ocupăm! Cum ți-ai putea tu actualiza funcţia ca ori să obţină nectar ori
        să facă miere.
      Course 4 Bee Params 8 new_instruction: Oooh, acum există miere de care să ne
        ocupăm! Cum ți-ai putea tu actualiza funcţia ca ori să obţină nectar ori să
        facă miere.
      Course 4 Bee Params 8_instruction: 'Provocare: Acum există și miere de care
        să ne ocupăm. Rescrie funcţia ta să ia atât numărul de unităţi de miere cât
        şi numărul de unităţi de nectar.  Cum ai folosi aceste numere pentru a decide
        ce ar trebui să faci?'
      Course 4 Bee Params Ex_instruction: "Încearcă să aduni tot nectarul folosind
        noua funcţie construită de tine."
      Course 4 Binary 1_instruction: Aici este o funcţie care primeşte un şir binar
        de 1 şi 0 şi îndrumă fermierul să se se întoarcă de la stânga la dreapta şi
        de sus în jos, întorcând valoarea pătratelor cu valoarea 0. Rulează codul
        primit pentru a vedea cum fermierii folosesc codul binar pentru a desena o
        imagine.
      Course 4 Binary 2_instruction: 'Ce şir binar poţi relua în buclă de 8 ori pentru
        a desena această imagine? Indicaţie: numărul "1" umple o gaură.'
      Course 4 Binary 3_instruction: Poţi desena acest model prin rularea în buclă
        a unui singur şi binar?
      Course 4 Binary 5 (copy 1)_instruction: Care şir binar, repetat de 10 ori va
        desena această imagine?
      Course 4 Binary 5_instruction: Care şir binar, repetat de 10 ori va desena această
        imagine?
      Course 4 Binary 6 (copy 1)_instruction: Care şir binar, repetat de 10 ori va
        desena această imagine?
      Course 4 Binary 6_instruction: Care şir binar, repetat de 10 ori va desena această
        imagine?
      Course 4 Binary 7_instruction: Care şir binar, repetat de 10 ori va desena această
        imagine?
      Course 4 Binary 8_instruction: Poţi completa cât mai mult din această imagine
        prin rularea în buclă a unui număr de 5 biţi - apoi vei avea nevoie de încă
        un număr de 4 biţi pentru a ajunge în colţul din parta dreapta jos.
      Course 4 EC 1a_instruction: Nici o regulă. Nici un indiciu. Doar provocare!
      Course 4 EC 1b_instruction: Nici o regulă. Nici un indiciu. Doar provocare!
      Course 4 EC 2a_instruction: "** Provocare extremă: ** Nici o regulă. Nici un
        indiciu. Doar provocare!"
      Course 4 EC 2b_instruction: Nici o regulă. Nici un indiciu. Doar provocare!
      Course 4 EC 2c_instruction: Nici o regulă. Nici un indiciu. Doar provocare!
      Course 4 EC 2d_instruction: Nici o regulă. Nici un indiciu. Doar provocare!
      Course 4 EC 3_instruction: 'Utilizează ceea ce ai învățat în cadrul nivelului
        precedent pentru a desena o imagine ca aceasta. Notă: Codul devine mai simplu
        dacă încorporezi parametri. '
      Course 4 EC 3a_instruction: 'Provocare extremă: ** Nici o regulă. Nici un indiciu.
        Doar provocare!'
      Course 4 Maze 1_instruction: Du pasărea furioasă la porc!
      Course 4 Maze 2_instruction: Evită TNT-ul!
      Course 4 Maze 3_instruction: 'Programează pasărea nervoasă să ajungă la purcel. '
      Course 4 Maze 4_instruction: Încearcă blocul "repetă" pentru a folosi mai puține
        blocuri...
      Course 4 Maze 5_instruction: Poți rezolva acest puzzle folosind cel mai mic
        număr de blocuri posibil?
      Course 4 Maze 6_instruction: Poți rezolva acest puzzle folosind cel mai mic
        număr de blocuri posibil?
      Course 4 Play Lab For Loops 2_instruction: De data asta, să încercăm să numărăm
        crescător numerele impare de la 1 la 100.
      Course 4 Play Lab Params 1_instruction: Aici avem o funcţie numită "jump" care
        determină personajul tău să sară 100 pixeli în sus. Foloseşte funcţia "jump"
        pentru a colecta toate steagurile.
      Course 4 Play Lab Params 10_instruction: "Am adăugat o ultimă funcţie pentru
        a o utiliza.\\r\n\\r\nProgramează jocul tău pentru a apela funcţia if \"level
        up\" cu argumentul \"player_points\" > 10. \\r\n\\r\nJoacă şi treci de nivelul
        4 prin accesarea puzzle-lui următor. "
      Course 4 Play Lab Params 2_instruction: |-
        Acum avem steaguri care sunt prea mari pentru săritura noastră. Haide să folosim ambele săgeți "sus" și "jos" astfel încât să putem avea multiple înălțimi pentru sărituri. \r \r Trebuie să adăugăm un parametru funcției cu numele "înălțime". Săgeata "sus" ar trebui să facă să sară câinele 200 pixeli, iar cea de jos să îl facă să sară doar 100 pixeli.
        \r
        \r
        Indiciu: Va trebui să apeși "modifică" pe funcția pentru săritură si să o modifici astfel încât să folosească parametrul "înălțime".
      Course 4 Play Lab Params 3_instruction: 'Hai să adăugăm alt parametru funcţiei
        "jump" astfel încât să o putem folosi cu alţi actori. Fiecare actor este reprezentat
        de un număr pornind de la unu. Editează funcţia "jump" astfel încât definiţia
        acesteia să includă parametrul "actor". '
      Course 4 Play Lab Params 4_instruction: |
        Aici este o funcţie numită "patrol."
        Editeaz-o pentru a muta pisica în sus cu 400 pixeli şi apoi în jos cu 400 pixeli.
      Course 4 Play Lab Params 5_instruction: Completează parametrul de intrare "actor"
        astfel încât putem apela funcţia "patrol" pentru fiecare dintre actori. Amintiţi-vă,
        actorii corespund cifrelor 1, 2 şi 3.
      Course 4 Play Lab Params 6_instruction: Adauga un alt parametru numit "viteza"
        in functia de "preluare". Incearca sa utilizezi un bloc "seteaza viteza" impreuna
        cu noul parametru "viteza" pentru a ajuta pinguinul sa ia ambele steaguri
        inainte ca alte spirite sa ajunga la unul din ele.
      Course 4 Play Lab Params 7_instruction: |-
        Uită-te la codul furnizat pentru a vedea dacă îţi dai seama ce face fiecare bloc de instrucţiuni. \r
        \r
        Când eşti gata, foloseşte tastele săgeţi pentru a controla câinele şi adună toate steagurile.
      Course 4 Play Lab Params 8_instruction: Foloseşte blocul de instrucţiuni "when
        touching" pentru a trimite câinele înapoi în colţul din stânga-sus DOAR dacă
        acesta atinge oricare unul din celelalte personaje.
      Course 4 Play Lab Params 9_instruction: "Aici este jocul nostru dintr-o etapa
        incipienta, dar majoritatea codului este ascuns. Este o functie noua \"inscrie_puncte.\"
        \\r\n\\r\n Editati functia astfel incat paramentrul 'Puncte' sa fie adaugat
        la variabila ''scorul_jucatorului\". \\r\n\\r\nVariabila \"scorul_jucatorului\"
        trebuie sa creasca de fiecare data cand \ncatelul eticheteaza pisica cu inimioare,
        si descreste cand pisica prinde cainele.\\r\n\\r\nNota:\nCand ai terminat,
        apasa \"Ruleaza\" pentru a te juca. Cand cainele inscrie 6 puncte, vei trece
        la urmatorul puzzle. "
      Course 4 Play Lab Vars 1_instruction: De data asta nu trebuie să este nevoie
        să scrii niciun cod, doar clic pe "Run" pentru a rula jocul! În acest joc,
        tu eşti câinele care încearcă să adune mai multe steaguri decât pisica. Foloseşte
        tasta săgeată jos pentru a controla câinele. Apăsă "Finish" când doreşti terminarea
        jocului.
      Course 4 Play Lab Vars 2_instruction: Cursa în acest ultim puzzle nu a fost
        foarte corectă! Schimbă variabila "dog_speed" pentru a fi sigur că poţi aduna
        mai multe steaguri decât pisica. Primul care adună 10 steaguri câştigă!
      Course 4 Play Lab Vars 3_instruction: Aici avem un nou tip de joc! Foloseşte
        pentru mutare tastele săgeţi stânga şi dreapta şi pentru a sării tasta săgeată
        sus. Vezi dacă poţi să aduni toate steagurile.
      Course 4 Play Lab Vars 4_instruction: Acum folosim variabila "height" pentru
        a controla cât de sus poate sări câinele. Actualizează variabila "height"
        astfel încât câinele poate sări suficient de sus pentru a ajunge la toate
        steagurile.
      Course 4 Play Lab Vars 5_instruction: 'Hai să construim un joc! Întâi avem nevoie
        de scor. Foloseşte blocul de instrucţiuni "set points to" pentru a seta scorul
        la 10. '
      Course 4 Play Lab Vars 6 (copy 1)_instruction: Super, acum avem propria variabilă
        "score", dar cum o putem face utilă? Ce zici despre adăugarea de puncte variabilei
        tale scor de fiecare dată când tu loveşti adversarul cu o minge de foc? Foloseşte
        evenimentul "when actor 2 touches anything" pentru a declanşa o actualizare
        a scorului tău când mingea ta de foc loveşte pisica. Poţi incrementa scorul
        utilizând instrucţiunea score = score +1. Obţine punctajul până la 10 (din
        1 în 1!) pentru a trece nivelul.
      Course 4 Play Lab Vars 6_instruction: |
        În jocul nostru, cum ar trebui să marcăm puncte?
        Adaugă 1 variabilei tale "puncte" de fiecare dată când câinele loveşte pisica cu o inimă. Foloseşte evenimentul "when actor 2 touches anything" pentru a declanşa o actualizare a scorului tău. Poţi incrementa variabila ta prin setarea acesteia "points = points + 1." Obţine punctaj de până la 10 (din 1 în 1!) pentru a trece nivelul.
      Course 4 Play Lab Vars 7_instruction: Frumos, acum hai să ne asigurăm că acest
        joc nu este prea uşor - de fiecare dată când câinele (actor 1) este lovit
        de o minge de foc, tu ar trebui să pierzi un punct. Începe cu 10 puncte astfel
        încât să nu fie prea greu. Lasă scorul să scadă de la 10 la 0 pentru a schimba
        nivelul.
      Course 4 Play Lab Vars 8 (copy 1)_instruction: Bine, un ultim lucru pentru acest
        joc - setaţi-l astfel încât jucătorul poate câştiga (sau pierde). Foloseşte
        o buclă fără sfârşit pentru a verifica valoarea scorului - dacă scorul ajunge
        mai mare de 20, faceți ca inamicul să dispară. Dacă scorul ajunge mai mic
        decât 0, faceți să dispară jucătorul. Daţi clic pe "Finish" când jocul merge
        cum ţi-ai dorit.
      Course 4 Play Lab Vars 8_instruction: Hai să setăm acest joc astfel încât câinele
        poate câştiga (sau pierde). Foloseşte o buclă fără sfârşit pentru a verifica
        valoarea scorului - dacă scorul ajunge mai mare decât 20, faceţi adversarul
        (pisica) să dispară. Dacă scorul ajunge mai mic decât 0, faceţi jucătorul
        (câinele) să dispară. Daţi clic pe "Finish" când jocul merge aşa cum doriţi.
      Course 4 Play Lab Vars 9_instruction: 'Joc liber! Aici avem toate variabilele
        cu care ne-am jucat în acest nivel şi chiar câteva în plus în caz că aveţi
        nevoie. Faceţi un joc sau o poveste utilizând oricare dintre aceste variabile.
        Indicaţie: derulaţi în jos pentru a vedea toate comenzile din spaţiul de lucru.'
      Course 4 Play Lab Vars_instruction: Bine, un ultim lucru pentru acest joc -
        setaţi-l astfel încât jucătorul poate câştiga (sau pierde). Foloseşte o buclă
        fără sfârşit pentru a verifica valoarea scorului - dacă scorul ajunge mai
        mare de 20, faceți ca inamicul să dispară. Dacă scorul ajunge mai mic decât
        0, faceți să dispară jucătorul.
      Course 4 Play Labs For Loops 1_instruction: Hai să facem câinele să pronunțe
        fiecare număr de la 1 la 100. Foloseşte o buclă şi un o construcţie de instrucţiuni
        contor pentru a pronunţa variabila contor de fiecare dată când bucla rulează.
      Course 4 Play Labs For Loops 2_instruction: De data asta, să încercăm să numărăm
        crescător numerele impare de la 1 la 100.
      Course 4 Play Labs For Loops 3_instruction: Dacă contorizăm folosind numere
        mai mari, obținem un număr mai mare în același timp. Încearcă să realizezi
        contorul câinelui de la 10 până la 1000, crescând cu 10 o dată.
      Course 4 Play Labs For Loops 4_instruction: Schimbarea incrementului poate fi
        de ajutor, dar noi numărăm încă liniar (fiecare număr reprezintă aceeaşi distanţă
        față de ultima) Ce se întâmplă dacă am vrut să număr în mod exponenţial? Fără
        a schimba setările în această buclă, poți să numeri 1, 4, 9, 16, 25... (numărător
        la pătrat)?
      Course 4 Play Labs For Loops 4a_instruction: "Acum, haieți să combinăm variabilele
        din Etapa 7 cu variabila ta \"numărător\" pentru a face ceva magic.   \\r
        \\r \nÎn acest puzzle, câinele va număra de la 0 la 1000 prin \"increment\".
        \ Setează variabila \"increment\" la 10 la începutul codului tău pentru a
        vedea ce se întâmplă."
      Course 4 Play Labs For Loops 5_instruction: În ultima etapă am numărat pătratul
        fiecărui număr. Încearcă să schimbi "numărător ^ 2" cu "numărător ^ 3" pentru
        a număra cubul fiecărui număr (1, 8, 27, 64, 125, 216, 343...)
      Course 4 Play Labs For Loops 5a_instruction: "În acest puzzle, Câinele va fi
        gardianul timpului tău.\\r \\r \nCâinele va cronometra de la 0 la 30 prin
        \"increment\".  Variabila \"increment\" va începe cu o valoare de 1.\\r \\r
        \nPoți face în așa fel încât, de fiecare dată când dai clic pe câine, incrementul
        să crească cu 2?  Fă clic pe săgeata spre înainte pentru a rula bucla \"pentru\".\\r
        \\r \nRulează bucla de doua ori, făcând clic pe câine înainte de fiecare dintre
        ele."
      Course 4 Play Labs For Loops 6_instruction: Poate îți amintești că un număr
        prim este orice număr întreg care este divizibil cu sine şi 1. Utilizează
        funcţia de "este_prim" să numească doar numere prime de la 1 la 100.
      Course 4 Play Labs For Loops 6a_instruction: "Câinele va continua să contorizeze
        timpul numarănd cu ajutorul buclei noastre \"pentru\" prin \"increment\",
        dar, de data aceasta, vom adăuga în combinație Expertul.  Poți schimba codul
        astfel încât \"incrementul\" să crească cu doi de fiecare dată când se face
        clic pe Expert?\\r \\r \nAi grijă!  Expertul se mişcă repede!"
      Course 4 Play Labs For Loops 7_instruction: Ai putea folosi o buclă "pentru"
        ca să mă ajuți să pronunț secvența 1, 4, 7, 10, 13, 16, 22, 25?
      Course 4 Play Labs For Loops 7a_instruction: |-
        Acum ajungem unde trebuie!  Ce-ar fi dacă am începe să numărăm de câte ori putem face clic pe Expert înainte ca acest Caine să ajungă la 30? \r
        \r
        Finalizează adăugând blocuri Expertului astfel încât, de câte ori se face clic pe el, variabila "clicuit" crește cu câte unu. Poți ignora pentru moment "increment"-ul.\r
        \r
        Câinele va începe să cronometreze când faci clic pe "Rulează".
      Course 4 Play Labs For Loops 8_instruction: Ce buclă "pentru" m-ar face pe mine
        să spun 19, 27, 35, 43, 51?
      Course 4 Play Labs For Loops 8a_instruction: "Pentru a finaliza jocul nostru,
        trebuie să aducem înapoi variabila \"increment\"!    Hai s-o legăm de nivelul
        de joc.\\r\n\\r\n1) Ține evidența numărului de câte ori se face clic pe Expert.\\r
        \n2) Dacă expertul este clicuit de cel puţin 10 ori înainte ca și Câinele
        să numere la 30, ridică \"increment\"-ul cu 1 şi începe din nou.\\r 3) dacă
        expertul nu este apăsat cu clic de cel puţin 10 ori, jocul s-a terminat."
      Course 4 SCF 1_instruction: Utilizează funcţiile sugerate pentru a desena patru
        rânduri de hexagoane. Observi cum rândurile noastre pare sunt întoarse către
        dreapta?
      Course 4 SCF 1a_instruction: "Îţi poți da seama cum să colectezi tot acest nectar
        cu cât mai puţine blocuri posibil?"
      Course 4 SCF 1b_instruction: "Îţi poți da seama cum să colectezi tot acest nectar
        cu cât mai puţine blocuri posibil?"
      Course 4 SCF 2_instruction: 'Utilizează ceea ce ai învățat în cadrul nivelului
        precedent pentru a desena o imagine ca aceasta. Notă: Codul devine mai simplu
        dacă încorporezi parametri. '
      Course 4 SCF 3 Fail 1_instruction: "Îți poți da seama cum să..."
      Course 4 SCF 3 Fail 2_instruction: "Îți poți da seama cum să..."
      Course 4 SCF 3_instruction: 'Utilizează ceea ce ai învățat în cadrul nivelului
        precedent pentru a desena o imagine ca aceasta. Notă: Codul devine mai simplu
        dacă încorporezi parametri. '
      Course 4 SCFL 1_instruction: Rezolvă acest puzzle folosind cât mai puține blocuri
        posibil.
      Course 4 SCFL 1a_instruction: Poți să-l duci pe Skrat la ghinda lui folosind
        cât mai puține blocuri posibil?
      Course 4 SCFL 1b_instruction: Poți să-l duci pe Skrat la ghinda lui folosind
        cât mai puține blocuri posibil?
      Course 4 SCFL 2_instruction: Rezolvă acest puzzle folosind cât mai puține blocuri
        posibil.
      Course 4 SCFL 3_instruction: "Îți poți da seama cum să re-creezi acest desen?"
      Course 4 SCFL 4_instruction: "Îți poți da seama cum să re-creezi acest desen?"
      Course 4 SCFL 5_instruction: "Îți poți da seama cum să re-creezi acest desen?"
      Course 4 SCFL 6_instruction: "Îţi poți da seama cum să re-creezi acest desen
        cu o singură buclă?"
      Course 4 SCFL 7_instruction: Artistul vrea să prindă nişte valuri! Îţi poți
        da seama cum să re-creezi acest desen?
      Course 4 SCFP 1_instruction: Creează o funcție cu parametri care permite artistului
        să facă salturi cu x pixeli înapoi și înainte, precum și în sus și în jos
        cu y pixeli (folosind numere pozitive și negative).
      Course 4 SCV 1_instruction: Click aici pentru a vedea instrucţiunile din nou.
      Course 4 SCV 2_instruction: Click aici pentru a vedea instrucţiunile din nou.
      Course 4 SCV 3_instruction: Acum un joc al etichetelor! Prinde pisica pentru
        a lua 2 puncte. Pinde pinguinul si  faci 3 puncte. Strangeti 10 puncte pentru
        a castiga!\r Ai grija, cand pisica si pinguinul se intalnesc, iau punctele
        inapoi. \r\rAdauga blocurile necesare pentru a face jocul sa mearga asa cum
        e explicat. Cum il vei face pe caine sa se miste in toate directiile folosing
        sagetile? Cum vei adauga puncte cand cainele prinde pisica sau pinguinul?
        Cum vei sustrage puncte cand pisica si pinguinul se ating?
      Course 4 SCV 4_instruction: Rezolva acest puzzle cu cel mai mic număr de blocuri
        posibil.
      Course 4 SCV 5_instruction: Rezolva acest puzzle cu cel mai mic număr de blocuri
        posibil.
      Course 4 SCV 6_instruction: Click aici pentru a vedea instrucţiunile din nou.
      Course 4 SCVP 1_instruction: Creează o funcție cu parametri care permite artistului
        să facă salturi cu x pixeli înapoi și înainte, precum și în sus și în jos
        cu y pixeli (folosind numere pozitive și negative).
      Course 4 Variables Assessment_instruction: Poţi crea această imagine folosind
        o variabilă pentru laturi? Fiecare linie trebuie să aibe 50 de pixeli lungime.
      Course1BeePuzzle12_instruction: Get three nectars and then make two honey
      Course1MazeAssessment1_instruction: |-
        This is a test!\r
        Move one way, then
        another to get me to the pig
      Course1MazeAssessment2_instruction: |-
        This is a test!\r
        Move one way, then
        another to get me to the pig.
      CSD Hackathon Pt 1_instruction: "(Click to see full instructions)"
      CSD Hackathon Pt 2_instruction: "(Click to see full instructions)"
      CSD Hackathon Week 1_instruction: "(Click to see full instructions)"
      CSD Hackathon Week 2_instruction: "(Click to see full instructions)"
      CSD U3 Background Discuss_instruction: |
        Here's a program that looks pretty
        similar to what you've been writing, but may behave quite differently. You'll
        want to stop and discuss with the class before moving on.
      CSD U3 Background Experiment_instruction: |
        Here's a program that looks pretty
        similar to what you've been writing, but may behave quite differently. You'll
        want to stop and discuss with the class before moving on.
      CSD U3 Draw Loop Discuss_instruction: |
        Here's a program that looks pretty
        similar to what you've been writing, but may behave quite differently. You'll
        want to stop and discuss with the class before moving on.
      CSD U3 Draw Loop Experiment_instruction: |
        Try using some of the other shape
        functions you've learned in the draw loop. What happens when you use randomNumber()
        to generate some of the inputs?You'll want to stop and discuss with the class
        before moving on.
      CSD U3 Frame Rate_instruction: Slow down Gamelab Gary's animation with frameRate()
      CSD U3 Random Animation_instruction: |
        Use randomNumber() to animate Gary's
        mouth.
      CSD U3 Random Choice_instruction: |
        Use the randomNumber() block to generate
        either 0 or 1
      CSD U3 Random Color_instruction: |
        Could you use randomNumber() to pick random
        colors as well? Try setting one or more of the channels in the rgb block with
        a random number. What should the maximum value be?
      CSD U3 Random Intro_instruction: |
        What do you think this code will do when
        it is run? Make a prediction, then run this code 5 - 10 times, recording the
        output each time. Share your results with your neighbor.
      CSD U3 Random Min Max_instruction: |
        Using console.log() write a program that
        randomly returns a number in a range you define.
      CSD U3 Random Width Height_instruction: |
        Pick a shape function and use calls
        to randomNumber() in place of one or more of the parameters. Maker sure you
        run it a few times so you can see the effect of randomization.
      CSD U3 Simple Drawing - Animation 2_instruction: |
        Use randomNumber() on the
        x position and width of your cloud ellipses to introduce a bit of animation.
      CSD U3 Simple Drawing - Animation_instruction: |
        Use randomNumber() on the x
        position and width of your cloud ellipses to introduce a bit of animation.
      CSD U3 Simple Drawing - Background_instruction: |
        Put all of your code into
        a draw() loop and then add set the background to blue with the background()
        block.
      CSD U3 Simple Drawing - Personal Animation_instruction: DO This
      CSD U3 Variable Arithmetic pt2_instruction: |
        Predict: What two numbers will
        be displayed in the console?
      CSD U3 Variable Arithmetic_instruction: |
        Change the value "size" initialized
        to make a larger square.
      CSD U3 Variable Incrementation pt2_instruction: |
        Predict: What two numbers
        will be displayed in the console?
      CSD U3 Variable Incrementation_instruction: |
        Predict: What two numbers will
        be displayed in the console?
      CSD U3 Variables CHALLENGE gamelab gary_instruction: |
        Use variables to animate
        Game Lab Gary
      CSD U3 Variables draw loop newVars_instruction: |
        Extend this project to create
        your own random art visualization with variables.
      CSD U3 Variables draw loop rgb_instruction: |
        Assign the variables x1 and y1
        random values inside the draw loop and use them to control where the square
        is drawn.
      CSD U3 Variables draw loop xy_instruction: |
        Assign the variables x1 and y1
        random values inside the draw loop and use them to control where the square
        is drawn.
      CSD U3 Variables Initialize_instruction: |
        Predict: What will get displayed
        in the console?
      CSD U3 Variables Intro_instruction: |
        Create your own variable, give it a value,
        and display that value in the console.
      CSD U3 Variables random drawing exemplar_instruction: |
        Check out this example
        randomized drawing.
      CSD U3 Variables Random_instruction: |
        Predict: What will get displayed in the
        console?
      CSD U3 Variables Reassign pt2_instruction: |
        Create and assign a new variable
        in a single line.
      CSD U3 Variables Reassign_instruction: |
        Predict: What will get displayed in
        the console?
      CSD U3 Variables Square Random Loop_instruction: |
        Test your predictions from
        the last level.
      CSD U3 Variables Square Random_instruction: |
        Change the value "size" initialized
        to make a larger square.
      CSD U3 Variables Square_instruction: |
        Change the value "size" initialized
        to make a larger square.
      CSD U3 Variables use value rect_instruction: |
        Predict: What will get displayed
        in the console?
      CSP Data Unit - Counting Multiple Things_instruction: |-
        If you can count one
        thing you can count multiple things\r
        \r
        Find out how many people like something
        other than dogs and cats\r
        \r
        Count dogs\r
        Count cats\r
        Count total\r
        Do
        the math\r
        \r
        blank/ blank toal\r
        \r
        Can also use this to find percents
        from this\r
        \r
        x% are dog lovers
      CSP Data Unit -Counting Records - Easy Way_instruction: |
        ReadRecords with specific
        criteria \r
        find the length of an array\r
      CSP Data Unit -Counting Records - Hard Way_instruction: |
        \r
        1. ReadRecords
        for all records\r
        2. Way to loop through and count\r
      CSP U4 - JSON Object Intro - Bad Way_instruction: |
        Trigger both the keyboard
        and mouse event and examine the event objects displayed in the console. Why
        might an object be the best way to store this information? (Click to see full
        instructions)
      CSP U4 - JSON Object Intro - Good Way_instruction: "Create an object with at\nleast
        5 values including at least one string and one number. (Click to see\nfull
        instructions) \n"
      CSP U4 - Objects - createObject_instruction: "Create an object with at least\n5
        values including at least one string and one number. (Click to see full\ninstructions)
        \n"
      drawings!_instruction: |
        Draw the equilateral triangle - all the sides are the
        same!
      ECSPD Binary Odometer_instruction: |
        This is another resource you could use
        with your students.
      Eval Booleans 1_instruction: |
        Boolean operators (like >, <, =) allow us to
        compare different values, returning either true or false. Click "Run" to
        see how this expression evaluates.
      Eval Booleans 2_instruction: |
        Can you set the values so that this expression
        evaluates as true?
      Eval Booleans 3_instruction: |
        The string-length function returns the number
        of characters in a string (including spaces!) - make this code evaluate to
        true.
      Eval Booleans 4_instruction: |
        Here's an Evaluation Block called AND - it returns
        true if both of its parameters are true, otherwise it returns false. Edit
        the x variable so that this expression returns true.
      Eval Booleans 5_instruction: |
        This OR block returns true if either of its parameters
        is true. Otherwise, if both parameters are false it will return false. Set
        the y variable to a value that will cause this expression to return false.
      Eval Booleans 6_instruction: |
        Here's one more boolean block called NOT. This
        block flips true to false, or false to true. If you wrap this block of code
        in a NOT block, it should return true (because we are asking if the two expressions
        do NOT produce equal values).
      Eval Booleans Free Play_instruction: |
        Free Play: Try out some creations of
        your own using Booleans.
      Eval Booleans_instruction: |
        Booleans allow us to compare different values,
        returning "true" if the are equal, or "false" if they are not. What do
        you think this code will evaluate to?
      Eval Cond 1_instruction: |
        The cond block checks the boolean expressions in
        the left column, and as soon as it finds one that returns "true" it runs
        the corresponding code on the right. If none of the expressions evaluate to
        "true," it runs the bottom block. Update the "temperature" variable so
        that this block returns "It's just right."
      Eval Cond 2 (copy 1)_instruction: |
        This condition returns a different shape
        based on the value of the "sides" variable - change the value of "sides"
        so that the conditional returns a triangle.
      Eval Cond 2_instruction: |
        This condition returns a different shape based on
        the value of the "sides" variable - change the value of "sides" so that
        the conditional returns a triangle.
      Eval Cond 3 (copy 1)_instruction: |
        Can you write a conditional that checks
        the variable "age" and returns "Old enough to vote and drive" if age >
        17, "Old enough to drive" if age is > 15, and "Can't drive or vote" if
        neither conditions is true. Hint: The first condition to return "true" wins
        - make sure you put your conditions in the right order.
      Eval Cond 3_instruction: |
        Can you write a conditional that checks the variable
        "age" and returns "Old enough to vote and drive" if age > 17, "Old enough
        to drive" if age is > 15, and "Can't drive or vote" if neither conditions
        is true. Hint: The first condition to return "true" wins - make sure you
        put your conditions in the right order.
      Eval Cond 4_instruction: |
        We can use the string=? function to make conditionals
        that respond to text input. Here's a function called green shape that takes
        a string for the type of shape. Complete the conditions so that the correct
        solid green shape is returned when the function is run with "circle", "triangle",
        "square", or "rectangle".
      Eval Cond 5_instruction: |
        Here's a similar function red shape with an additional
        variable for size. Complete the conditionals so the correct solid red image
        of a given size is drawn for "circle", "triangle", and "star".
      Eval Cond 6_instruction: |-
        Write a function called food-critic, which takes
        in the name of a food and produces a String that says how you feel about that
        food. For example, (food-critic “pizza”) might evaluate to “delicious”, but
        (food-critic “rotten eggs”) might evaluate to “gross!”. Choose at least two
        foods to review, but you can you write more if you like!  Don’t forget to
        add an “else” clause!\r
        One example - and part of the definition -  has already
        been done for you!
      Eval Cond 7_instruction: |
        Free Play: Write a function called green-shape, which
        takes in the name of a shape and produces a solid green shape. Your function
        should work with at least “circle”, “star” and “rectangle”, but you can add
        other shapes if you like. You can choose the size of each shape. Don’t forget
        to add an “else” clause!\r
        One example - and part of the definition -  has
        already been done for you!\r
      Eval Cond 8_instruction: |
        Free Play: Suppose you want to own a car at 21, or
        have your own business by 30. Write a function called life-goals, which takes
        in an age and produces a string that describes your life goals by then. Don’t
        forget to add an “else” clause!\r
      Eval Contracts 1_instruction: |
        Use the "star" function to produce a red star
        with a 60 pixel radius
      Eval Contracts 10A_instruction: |
        Alright let's complete this puzzle with a
        Green Square that is 175 pixels in size.
      Eval Contracts 11A_instruction: |
        Can you complete this puzzle to read "Hello
        World" in the banner?
      Eval Contracts 2_instruction: |
        Check out the "rotate" function - can you
        use it to rotate this 90 pixel green square by 45 degrees?
      Eval Contracts 3_instruction: |
        Try using the "text" function to write this
        teal text at size 40.
      Eval Contracts 4 A_instruction: |
        The "scale" function returns an image that
        is scaled either larger or smaller than the input image. Try scaling this
        circle by a factor of 10 - how is the resulting image different than if you'd
        just made a circle of that size in the first place?
      Eval Contracts 4_instruction: |
        The scale function returns an image that is
        either larger or smaller than the input image. Try scaling this circle by
        a factor of 10. How is the returned image different than if you'd just made
        a circle of that size in the first place?
      Eval Contracts 8A_instruction: |
        Can you complete this puzzle? The big-triangle
        is 200 pixels in size and purple?
      Eval Contracts A_instruction: |
        Use the star function to produce a solid red
        star with a 60 pixel radius
      Eval Contracts C_instruction: |
        Check out the rotate function - can you use
        it to rotate this 90 pixel green square by 45 degrees?
      Eval Contracts E_instruction: |
        Try using the text function to write "Hello,
        world!" in teal at size 40.
      Eval Contracts shrink_instruction: "Can you complete this image using the \"shrink\"\nfunction
        block? The radius is 20. \n"
      Eval Define Funcs 1_instruction: |
        Here's a new function called green-triangle
        that takes a single Number for size and produces a green triangle. Use the
        new function to create a 125 pixel green triangle.
      Eval Define Funcs 2_instruction: |
        Let's look inside that green-triangle function
        to see how it works. Can you modify it so that the green-triangle function
        always draws outlined green triangles?
      Eval Define Funcs 3_instruction: |
        Here's the start of another new function
        called purple-circle with a domain of one Number (the radius) and a range
        of Image. The body of the function is broken though - fix it and then make
        a purple circle with 150 pixel radius
      Eval Define Funcs 4_instruction: |
        Create a new function called aqua-star that
        has a Domain of a single Number for radius and returns an aqua star of the
        given radius. Run your new function with a radius of 75.
      Eval Define Funcs 5_instruction: |
        Let's use that aqua-star function to make
        a row of different sized stars. From left to right, the stars should have
        radii of 25, 50, and 75.
      Eval Define Funcs Test_instruction: |
        Here's the start of another new function
        called purple-circle with a domain of one Number (the radius) and a range
        of Image. The body of the function is broken though - fix it and then make
        a purple circle with 150 pixel radius
      Eval Defining Vars Free Play 1_instruction: |
        Free Play: We've provided a function
        that fills your screen with my-image. Change my-image to see what patterns
        you can make.
      Eval Design Recipe .1_instruction: |
        Here's a Design Recipe for a function
        called square-circle with domain Number String and range Image. Click Edit
        to write the function definition (you will see two examples provided).
      Eval Design Recipe 1 (copy 1)_instruction: |
        We're going to write a function
        that draws a solid rectangle of any color that is twice wide as it is high.
        Start with an example - draw a solid green rectangle that has a height on
        100 pixels.
      Eval Design Recipe 1_instruction: |
        Alright, now given the Contract wide-rect:
        Number String -> Image, write an example - draw a solid green rectangle that
        has a height of 100 pixels.
      Eval Design Recipe 2 (copy 1)_instruction: |
        Let's do one more example before
        writing the function definition - this time draw a solid red rectangle with
        a height of 75 pixels.
      Eval Design Recipe 2_instruction: |
        Let's do one more example before writing
        the function definition - this time draw a solid red rectangle with a height
        of 75 pixels.
      Eval Design Recipe 3_instruction: |
        The Design Recipe for wide-rect already
        has a contract and one example. Can you write a second example and then complete
        the definition? The wide-rect function should produce a rectangle of given
        color that is twice as wide as it is high.
      Eval Design Recipe 4_instruction: |
        Use the Design Recipe to create a function
        starburst. When given a number of points and an outer radius, starburst returns
        a yellow radial star with given points, and an inner radius that is half the
        outer radius.
      Eval Design Recipe 5_instruction: |
        Using the Design Recipe, write a function
        striped-flag that takes two colors and produces a flag that is 250 pixels
        wide, 150 pixels tall, with three even horizontal stripes of given colors,
        in the order color2, color1, color2.
      Eval Design Recipe 6_instruction: |
        Write a function large-polygon that should
        output a solid polygon of given sides and color that takes up most of the
        window, regardless of the number of sides. To make sure that the polygon doesn't
        get too large as you increase the number of sides, side length should be inversely
        proportional to side number, with a length of (800/sides).
      Eval Design Recipe Free Play_instruction: |
        Free Play: Use the Design Recipe
        to create some functions of your own design
      Eval Free Play_instruction: 'Free Play: Make art with code!'
      Eval Strings Images .1_instruction: |
        So far we've only dealt with a single
        type of data, Numbers. Another type of data is a String, which is any combination
        of letters, numbers, or other characters wrapped in quotation marks. Run the
        String "Hello, world!" and see what happens.
      Eval Strings Images .2_instruction: |
        The string-append function takes two Strings
        and returns a single combined String. Add a String "Universe" to the second
        argument of string-append.
      Eval Strings Images 1_instruction: |
        The third type of data we're going to
        use is an Image. This star function takes in a Number and two Strings, and
        it evaluates to an Image. Use this function to make a solid red star with
        radius of 100.
      Eval Strings Images 2_instruction: |
        Free Play: Every Evaluation Block is color-coded
        to let you know which data type it returns and which types it needs for its
        parameters. The last parameter of the triangle function takes a String that
        controls its color - try some different colors to see what works.
      Eval Strings Images 3_instruction: |
        Some functions can only take a specific
        set of Strings, such as the second argument of this circle function, which
        controls its style. Draw this orange outline circle using the special String
        block with a dropdown to make sure you only use valid styles.
      Eval Strings Images 4_instruction: |
        Try using the rectangle block to draw this
        solid, red rectangle - it is 175 pixels wide and 100 pixels tall.
      Eval Strings Images 5_instruction: |
        Try using this new Evaluation Block called
        overlay to place a 100 pixel white triangle on top of a 200 pixel red circle.
      Eval Strings Images 6_instruction: |
        Use the overlay block to place a 75 pixel
        radius yellow star on top of a 150 pixel long blue square.
      Eval Strings Images 7_instruction: |
        The offset block lets you move an image
        relative to where it would normally be placed. Use this block to offset the
        square by 100 pixels on the y-axis.
      Eval Strings Images 8_instruction: |
        Here's a different kind of star block
        - it's called radial-star and it allows you to draw stars with any number
        of points! Use it to create a 7 point solid orange star with an inner radius
        of 75 pixels and an outer radius of 175 pixels.
      Eval Strings Images Free Play_instruction: |
        Free Play: Explore the blocks available
        to create something interesting. Make sure to share your favorite creations.
      Farmer for Authored Hint testing_instruction: |
        Wow, I found a really deep hole!
        I don't know how many shovelfuls of dirt it needs.  Can you write a program
        that fills it until the ground is even?  Hint:  Try using the while loop this
        time.
      Frequency Analysis_instruction: Test
      frozen circle function in circle_instruction: Acum haideți să creăm 20 de cercuri
        suprapuse, rotind 18 grade după fiecare cerc.
      frozen circle function with parameter_instruction: Aici este un bloc "Creează
        cerc", care poate face cercuri de diferite dimensiuni. Îl poţi folosi pentru
        a crea un mic cerc cu dimensiunea de 5 şi un cerc mai mare de dimensiune 10?
      frozen circle function_instruction: Utilizează noul bloc "Creează cerc" pentru
        a realiza 10 cercuri suprapuse. Nu uita să "sari înainte" printre cercuri.
      frozen circle_instruction: Un cerc este o formă specială. Poți să intuiești
        cu ce număr să înlocuim semnele de întrebare pentru a desena un cerc?
      frozen cross rotate dense_instruction: 'Hai să îl repetăm de 90 de ori! De câte
        ori intră 90 în 360? Sugestie: Este un număr chiar foarte mic.'
      frozen cross rotate_instruction: Acum, încearcă să îl repeți de 10 ori. Câte
        grade trebuie să rotești între fiecare linie?
      frozen cross_instruction: Impachetati un bloc "repetare" pentru aceste comenzi
        sa creati un semn plus. Ati observat ca Elsa poate merge si inainte si inapoi?
      frozen diamond mini snowflake_instruction: Stiai ca fiecare fulg de nea are
        o forma diferita? Haideti sa realizam un fulg de nea folosind inca un bloc
        'Repeta' pentru a repeta un paralelogram de 4 ori, intorcandu-te la dreapta
        cu 90 de grade intre fiecare paralelogram.
      frozen diamond snowflake_instruction: Acum, hai să creăm un fulg de zăpadă nou
        utilizând blocul de repetare pentru a repeta un paralelogram de 10 ori, rotind
        la dreapta cîte 36 de grade între fiecare dintre ele.
      frozen diamond_instruction: |
        Utilizati un blocul repeta pentru a crea un paralelogram.
        Este la fel ca un dreptunghi dar are unghiuri diferite. Acesta are unghi de 60 de grade si de 120 in loc sa aiba toate unghiurile de 90 de grade.
      frozen freeplay_instruction: Ai devenit oficial un artist maestru! Creează un
        paradis de iarnă.
      frozen line_instruction: Salutare! Eu sunt Elsa din Arendelle. Ajută-mă să creez
        o singură linie.
      frozen perpendicular_instruction: Acum, hai să vedem dacă putem crea două linii
        care formează un unghi de 90 de grade. Va trebui să folosești blocul ”Întoarce”
        precum și blocul ”Mută”.
      frozen snowflake branch_instruction: Încearcă să folosești blocul "Creează ramură
        de fulg de nea" pentru a realiza trei ramuri, care încep să arate ca un fulg
        de nea.
      frozen snowflake full_instruction: Acum hai să îl repetăm de 8 ori pentru a
        face un fulg de nea frumos!
      frozen snowflower_instruction: Modele complicate zăpadă pot fi create cu forme
        foarte simple. Poţi crea un model prin repetarea a 5 cercuri de dimensiunea
        5 şi 5 cercuri de dimensiunea 10?
      frozen square iterative_instruction: Se pare că am parcurs jumătate de drum
        în crearea unui pătrat. Hai să punem 4 linii împreună pentru a crea un pătrat.
      frozen square loop 3x_instruction: Hai să creăm trei pătrate, rotind după fiecare
        pătrat. Asigură-te că rotești cu 120 de grade înainte de fiecare pătrat nou.
      frozen square loop_instruction: Salutare! Eu sunt Anna din Arendelle. Hai să
        facem un pătrat cu blocul "Repetă", care folosește mai puține blocuri. De
        câte ori (???) ar trebui ca blocul "Repetă" să bucleze blocurile în interiorul
        său pentru a crea un pătrat?
      frozen square snowflake_instruction: Poţi crea un fulg de zăpadă folosind blocul
        "Repetă" pentru a face un pătrat de 10 ori, precum și blocul "Întoarce" pentru
        a se roti cu 36 de grade între fiecare pătrat?
      Infinity_catch_instruction: Poţi s-o faci pe Elsa ("actorul 2") să o ajungă
        pe Anna folosind tastele săgeată?
      Infinity_finale_instruction: Creează orice vrei tu şi distribuie-l/-o!
      Infinity_move_collide_instruction: Hiro este "actorul 1".  Mută-l la dreapta,
        lângă Baymax și emite un sunet atunci când aceștia se ating.
      Infinity_move_directions_instruction: Baymax este "actorul 2".  Adaugă blocuri
        "Mută" și apoi mută-l pe Baymax folosind săgeţile.  Fă-l să atingă celelate
        două alte personaje.
      Infinity_move_right_instruction: Hiro este "actorul 1".  Utilizează blocul "Mută"
        pentru a-l muta pe Hiro la dreapta ca să-l atingă pe Baymax.
      Infinity_repeat_instruction: Utilizează un bloc "repetă pentru totdeauna" pentru
        a o face pe Anna să se mute în sus şi în jos 400 de pixeli.
      Infinity_say_instruction: Fă-o pe Anna să spună "Salutare." utilizând blocul
        "Spune".
      Infinity_shoot_instruction: Baymax este "actorul 2".  Fă-l pe Baymax să arunce
        o rachetă la Hiro.
      Infinity_shoot_directions_instruction: Hiro este "actorul 3".  Fă-l pe Hiro
        să arunce un proiectil la fiecare dintre cele patru personaje.  Aşteaptă o
        secundă între fiecare aruncare.
      Infinity_test_instruction: This is a test Infinity level.
      Infinity_touch_faster_instruction: Atinge și mai mulți fulgi de zăpadă!
      Infinity_touch_four_instruction: Mut-o pe Anna sus, jos stânga şi dreapta pentru
        a atinge fiecare dintre cei patru fulgi de zăpadă.
      Infinity_touch_score_instruction: Fă-o pe Anna să marcheze un punct atunci când
        ea atinge un fulg de nea.  Apoi fă clic pe "Rulează" şi dirijeaz-o să atingă
        o dată fiecare fulg de nea.
      jessie-test_instruction: Lots of instructions
      Just for Testing_instruction: Test instructions
      K-1 Artist 1 Assessment 1_instruction: Desenează o linie scurtă sus şi una lungă
        la dreapta!
      K-1 artist 1 level 10_instruction: Desenează linia întreruptă folosind amândouă
        blocuri "sări" şi "desenează"
      K-1 artist 1 level 9_instruction: Desenează aceasta folosind trei linii
      K-1 Artist Loops 1_instruction: Desenează această linie mutând de 4 ori la Est.
      K-1 Artist Loops 2_instruction: Poţi desena aceaşi linie folosind o construţie
        de tip buclă?
      K-1 Artist Loops 3_instruction: Poţi să reiei în construţie de tip buclă aceste
        blocuri de instrucţiuni pentru a desena 6 linii?
      K-1 Artist Loops 4_instruction: Ar putea o buclă să ne ajute să desenăm partea
        de sus a acestui castel?
      K-1 Artist Loops 5_instruction: Ce poți tu bucla de 4 ori ca să desenezi aceste
        scări?
      K-1 Artist Loops 6_instruction: 'Acesta are nevoie de două bucle: una să urce
        scările și una să le coboare.'
      K-1 Artist Loops 7_instruction: Poţi termina acest model folosind două bucle?
      K-1 Artist Loops 8_instruction: Această scară are trepte lungi.
      K-1 Artist Loops 9_instruction: 'Evaluare: Foloseşte o buclă pentru a desena
        scări'
      K-1 Artist Loops Free Play_instruction: Joc liber, desenează ceva distractiv!
      K-1 Artist1 1_instruction: Desenează piciorul bărbatului dintr-o singură linie
      K-1 Artist1 10_instruction: Desenează şi întrerupe pentru a face o linie întreruptă
        către comoara X
      K-1 Artist1 2_instruction: Desenează mustăţile pisicii din două linii!
      K-1 Artist1 3_instruction: Desenează două linii spre est şi două linii spre
        nord pentru a termina casa!
      K-1 Artist1 4_instruction: Desenează linii sus, peste şi jos pentru a completa
        castelul!
      K-1 Artist1 5.5_instruction: Termină al treilea turn al castelului folosind
        linii scurte
      K-1 Artist1 5_instruction: Desenează tulpina acestei flori din două linii!
      K-1 Artist1 6_instruction: Termină imaginea folosind un bloc de instrucţiuni
        jump!
      K-1 Artist1 7_instruction: Foloseşte un bloc de instrucţiuni jump pentru a muta
        fără a desena. Sari sus pentru a desena o linie.
      K-1 Artist1 8_instruction: Desenează linia întreruptă folosind amândouă blocuri
        de instrucţiuni "jump" şi "draw"
      K-1 Artist1 9_instruction: Desenează şi sari pentru a realiza linia întreruptă
      K-1 Artist1 Assessment 1_instruction: Desenează linii scurte şi linii lungi!
      K-1 Artist1 Assessment 2_instruction: Desenează linii întrerupte scurte!
      K-1 Artist2 1_instruction: Desenează un pătrat sub triunghi.
      K-1 Artist2 2_instruction: Sari şi desenează un pătrat lângă casă.
      K-1 Artist2 3_instruction: Desenează un pătrat peste alt pătrat
      K-1 Artist2 4_instruction: Desenează un pătrat pentru a termina podul.
      K-1 Artist2 5_instruction: Desenează un pătrat pentru a termina suporţii podului
      K-1 Artist2 6_instruction: Desenează două pătrate pentru a face un dreptunghi!
      K-1 Artist2 Assessment1_instruction: 'Evaluare: Desenează un pătrat lângă celălalt
        pătrat.'
      K-1 Artist2 Free Draw_instruction: Desenează totul!
      K-1 Artist2_7_instruction: Desenează un dreptunghi pentru a-i oferi costumierului
        sertarul de sus!
      K-1 Bee 1_instruction: Du-mă la floare, ia nectarul, apoi du-mă la fagure şi
        produ miere
      K-1 Bee 10_instruction: Ia patru de nectar şi apoi produ două de miere!
      K-1 Bee 11.5_instruction: Ia patru de nectar pentru a produce patru de miere!
      K-1 Bee 11_instruction: Ia trei de nectar şi apoi produ una de miere
      K-1 Bee 12_instruction: Ia trei de nectar şi apoi produ două de miere!
      K-1 Bee 13_instruction: Ia trei de nectar şi apoi produ una de miere!
      K-1 Bee 14_instruction: Du-mă la nectar, ia-l, du-mă la miere, şi produ miere
      K-1 Bee 15_instruction: Ia două de nectar pentru a produce două de miere!
      K-1 Bee 2_instruction: Du-mă la floare, ia nectarul, apoi du-mă la fagure şi
        produ miere
      K-1 Bee 3_instruction: Du-mă la floare, ia nectarul, apoi du-mă la fagure şi
        produ miere
      K-1 Bee 4_instruction: Ia două de nectar şi apoi produ două de miere!
      K-1 Bee 5_instruction: Ia trei de nectar şi apoi produ trei de miere!
      K-1 Bee 6_instruction: Ia două de nectar şi apoi produ două de miere!
      K-1 Bee 7_instruction: Ia trei de nectar şi apoi produ două de miere!
      K-1 Bee 8_instruction: Ia două de nectar şi apoi produ două de miere!
      K-1 Bee 9_instruction: Ia două de nectar şi apoi produ două de miere!
      K-1 Bee Assessment 1_instruction: Coletează nectar pentru a face miere!
      K-1 Bee Assessment 2_instruction: Coletează nectar pentru a face miere!
      K-1 Bee Loops 1_instruction: Coletează nectarul pentru a face miere!
      K-1 Bee Loops 10_instruction: Folosește buclele pentru a colecta nectarul, mierea
        şi pentru mutări!
      K-1 Bee Loops 11_instruction: 'Evaluare: Folosiţi buclele pentru a lua nectarul
        şi mierea!'
      K-1 Bee Loops 12_instruction: 'Evaluare: Foloseşte buclele pentru a colecta
        nectarul, mierea şi pentru mutări!'
      K-1 Bee Loops 2_instruction: Folosește o buclă pentru a muta şi apoi colectează
        nectarul şi fă miere!
      K-1 Bee Loops 3_instruction: Foloseşte buclele pentru a coleta nectarul şi produce
        miere!
      K-1 Bee Loops 4_instruction: Foloseşte buclele pentru a lua nectarul, produce
        miere şi pentru a muta!
      K-1 Bee Loops 5_instruction: Foloseşte buclele pentru a lua nectarul şi mierea!
      K-1 Bee Loops 6_instruction: Folosește buclele pentru a colecta nectarul, mierea
        şi pentru mutări!
      K-1 Bee Loops 7_instruction: Foloseşte buclele pentru a coleta nectarul şi produce
        miere!
      K-1 Bee Loops 8_instruction: Foloseşte buclele pentru a coleta nectarul şi produce
        miere!
      K-1 Bee Loops 9_instruction: Folosește buclele pentru a colecta nectarul, mierea
        şi pentru mutări!
      K-1 Bee Loops Assessment 1_instruction: Colectează nectar pentru a produce miere
        şi foloseşte buclele pentru mutare!
      K-1 Bee Loops Assessment 2_instruction: Colectează nectar pentru a produce miere
        folosind buclele!
      K-1 Bee Puzzle 12_instruction: Get three nectars and then make two honey
      K-1 Building a Foundation Assessment_instruction: Construiește o piramidă pe
        trei nivele, nu ai alte indicaţii, doar joacă-te cu piesele până o realizezi!
      k-1 maze 1_instruction: Poţi să mă muţi spre vest pentru a ajunge la porc?
      K-1 Maze 10_instruction: 'Ocolește dinamita pentru a mă duce la porc! '
      K-1 Maze 11_instruction: 'Urmărește traseul şi condu-mă la porcul prostuț. Evită
        TNT-ul sau penele vor zbura! Sugestie: El este la Sud de mine.'
      K-1 Maze 2_instruction: Mută-mă la Est ca să ajung la porc!
      K-1 Maze 3_instruction: Mută-mă spre sud pentru a ajunge la porc!
      K-1 Maze 4_instruction: Mută-mă spre nord pentru a ajunge la porc!
      K-1 Maze 5_instruction: Mută-mă la Est ca să ajung la porc!
      K-1 Maze 6_instruction: Mută-mă într-o direcţie, apoi în cealaltă pentru a ajunge
        la porc!
      K-1 Maze 7_instruction: Mută-mă într-o direcţie, apoi în cealaltă pentru a ajunge
        la porc!
      K-1 Maze 8_instruction: Mută-mă într-o direcţie, apoi în cealaltă pentru a ajunge
        la porc!
      K-1 Maze 9_instruction: Mută-mă într-o direcţie, apoi în cealaltă pentru a ajunge
        la porc!
      K-1 Maze Assessment 1_instruction: Evaluare -- Du-mă la porc!
      K-1 Maze Assessment 12_instruction: Nivel de evaluare
      K-1 Maze Assessment 13_instruction: Nivel de evaluare
      K-1 Maze Assessment 2_instruction: Evaluare -- Du-mă la porc!
      K-1 maze debug 1_instruction: Modifică secvenţa de cod pentru a mă duce la porc!
      K-1 maze debug 10_instruction: Repară acest nivel prin rearanjarea şi adăugarea
        blocurilor de instrucţiuni pentru a mă duce la porc!
      K-1 maze debug 11_instruction: |-
        Acesta este un test!\r
        Repară acest nivel prin rearanjarea şi adăugarea blocurilor de instrucțiuni pentru a mă duce la porc
      K-1 maze debug 2_instruction: Găsește ce lipsește şi apoi adaugă blocuri de
        instrucțiuni pentru a mă duce la porc!
      K-1 maze debug 3_instruction: Găseşte ce lipseşte şi apoi scoate blocurile pentru
        a mă duce la porc!
      K-1 maze debug 4_instruction: Aleargă printre aceste blocuri şi repară-le! Cred
        că s-ar putea să merg în direcţia greşită.
      K-1 maze debug 5_instruction: Repară acest nivel prin rearanjarea şi adăugarea
        blocurilor de instrucţiuni pentru a mă duce la porc!
      K-1 maze debug 6_instruction: Repară acest nivel prin rearanjarea şi adăugarea
        blocurilor de instrucţiuni pentru a mă duce la porc!
      K-1 maze debug 7_instruction: Repară acest nivel prin rearanjarea şi adăugarea
        blocurilor de instrucţiuni pentru a mă duce la porc!
      K-1 maze debug 8_instruction: Repară acest nivel prin rearanjarea şi adăugarea
        blocurilor de instrucţiuni pentru a mă duce la porc!
      K-1 maze debug 9_instruction: Repară acest nivel prin rearanjarea şi adăugarea
        blocurilor de instrucţiuni pentru a mă duce la porc!
      K-1 Maze debug Assessment 1_instruction: Evaluare -- Repară acest nivel prin
        rearanjarea şi adăugarea blocurilor de instrucţiuni pentru a mă duce la porc!
      K-1 Maze Loops 1_instruction: Du-mă la porc!
      K-1 Maze Loops 10_instruction: Du-mă la porc! Foloseşte bucla repetă.
      K-1 Maze Loops 11_instruction: Du-mă la porc! Foloseşte bucla repetă.
      K-1 Maze Loops 12_instruction: Du-mă la porc! Foloseşte bucla repetă.
      K-1 Maze Loops 2_instruction: Foloseşte bucla repetă pentru a mă duce la porc!
      K-1 Maze Loops 3_instruction: Du-mă la porc! Foloseşte bucla repetă.
      K-1 Maze Loops 4_instruction: Du-mă la porc!
      K-1 Maze Loops 5_instruction: Du-mă la porc! Foloseşte bucla repetă.
      K-1 Maze Loops 6_instruction: Du-mă la porc! Foloseşte bucla repetă.
      K-1 Maze Loops 7_instruction: Du-mă la porc! Foloseşte bucla repetă.
      K-1 Maze Loops 8_instruction: Du-mă la porc! Foloseşte bucla repetă.
      K-1 Maze Loops 9_instruction: Du-mă la porc!
      K-1 Maze Loops Assessment 1_instruction: Evaluare -- Foloseşte contricţii de
        tip buclă pentru a mă duce la porc!
      K-1 Maze Loops Assessment 2_instruction: Evaluare -- Foloseşte contricţii de
        tip buclă pentru a mă duce la porc!
      K-1 Maze Multi 14_instruction: Nivel de evaluare
      K-1 Maze Multi 15_instruction: Nivel de evaluare
      K-1 Maze Sequence Assessment 1_instruction: |-
        Acesta este un test!\r
        Mută-mă într-o direcţie apoi în cealaltă pentru a mă duce la porc
      K-1 Maze Sequence Assessment 2_instruction: |-
        Acesta este un test!\r
        Mută-mă într-o direcţie apoi în cealaltă pentru a mă duce la porc.
      kikiTesting_instruction: |
        .\r
         .\r
        .\r
        .\r
        .\r
        .\r
        \r
        .\r
        \r
      love_spring_1_instruction: |
        Let's celebrate Spring!  We have put some seeds
        in the ground to prepare for the season's flowers.  Can you cover them up
        so that the birds don't eat them?
      love_spring_2_instruction: |
        Our flowers are in full bloom!  Now we need the
        bee to grab nectar from each one so he can make plenty of honey back at his
        hive!
      love_spring_3_instruction: |-
        Figure out how to change this code so that Robin
        chooses a number between 1 and 20.  \r
        \r
        When you're ready, press "Run"
        and play until you guess Robin's number!
      Luigi's Pizza 1_instruction: |
        Welcome to Luigi's Pizza! To order a pizza,
        type the name of a topping into the cost function, and we'll return the price
        of that pizza. Try ordering a pepperoni pizza to start.
      Luigi's Pizza 2 (copy 1)_instruction: |
        Right now there are only four choices
        available at Luigi's pizza - let's fix that! Add a couple of new toppings
        to the conditional block in the "cost" function. Once you've added your
        toppings, test out the function to make sure it works.
      Luigi's Pizza 2_instruction: |
        Right now there are only four choices available
        at Luigi's pizza - let's fix that! Add a couple of new toppings to the conditional
        block in the cost function. Once you've added your toppings, test out the
        function to make sure it works.
      Luigi's Pizza 3 (copy 1)_instruction: |
        That's better, everyone loves more
        variety in their pizza toppings! But you still can't please everyone, and
        folks are coming in to order toppings that Luigi doesn't have. Instead of
        saying no to those people, could you update the "else" clause so that we
        charge them a premium for toppings that we don't normally offer?
      Luigi's Pizza 3_instruction: |
        That's better, everyone loves more variety in
        their pizza toppings! But you still can't please everyone, and folks are
        coming in to order toppings that Luigi doesn't have. Instead of saying no
        to those people, could you update the else clause so that we charge them a
        premium for toppings that we don't normally offer? Let's charge $10,000
        for a topping we don't carry.
      Luigi's Pizza 4_instruction: |
        Free Play: What can you do to make Luigi's cost
        function even more useful?
      Middle School Hackathon Pt 1_instruction: "(Click to see full instructions)"
      Middle School Hackathon Pt 2_instruction: "(Click to see full instructions)"
      MSM Big Game Empty_instruction: |
        All variables and functions are currently
        empty stubs. Each puzzle progression will be focused on defining and handful
        of them, and therefore adding functionality.
      MSM Big Game Vars 1 (copy 1)_instruction: |
        In the Variables toolbox you'll
        see several variables that define how your game characters look, move, and
        interact
      MSM Big Game Vars 1_instruction: |
        In the Variables toolbox you'll see several
        variables that define how your game characters look, move, and interact
      MSM Big Game Vars Backup_instruction: |
        In the Variables toolbox you'll see
        several variables that define how your game characters look, move, and interact
      MSM Defining Vars 1 (copy 1)_instruction: |
        Write a program that produces a
        50 pixel solid green triangle.
      MSM Defining Vars 1_instruction: |
        Write a program that produces a 50 pixel
        solid green triangle.
      MSM Defining Vars 2 (copy 1)_instruction: |
        If we wanted to make fifty green
        triangles, it would be a pain to repeat that block of code 50 times. Let's
        create a variable called "my-shape" and put the code for a 50 pixel solid
        green triangle inside.
      MSM Defining Vars 2_instruction: |
        If we wanted to make fifty green triangles,
        it would be a pain to repeat that block of code 50 times. Let's create a
        variable called my-shape and put the code for a 50 pixel solid green triangle
        inside.
      MSM Defining Vars 3 (copy 1)_instruction: |
        Take your "my-shape" variable
        and use it with this provided code to draw two identical green triangles.
      MSM Defining Vars 3_instruction: |
        Take your my-shape variable and use it with
        this provided code to draw two identical green triangles that are 50 pixels
        in size.
      MSM Defining Vars 4_instruction: |
        Edit your my-shape variable so that it draws
        75 pixel solid red stars.
      MSM Play Lab Butterfly 1_instruction: |
        Help Sam stay on the screen so that
        you can always see at least a little piece of him. Using the arrow keys, see
        how far Sam can go to the left while still staying onscreen. You’ll find that
        Sam is onscreen as long as his x-coordinate is greater than -50. Then, fill
        in the code to make Sam stay on the screen.
      MSM Play Lab Butterfly 2_instruction: |
        Now make Sam stay on the right side
        of the screen. You'll have to experiment to see how far he can go and still
        be partially visible on the screen.
      MSM Play Lab Butterfly 3_instruction: |
        Now, combine your work to make Sam stay
        on both sides of the screen.
      MSM Play Lab Game 2_instruction: |
        Variables can also be used to control the
        speed of players in a game. Set the player speed and the enemy speed and see
        how the movement changes. Speed can be between 2 and 12.
      NetSim Standalone Automatic DNS_instruction: |
        In this version of the Internet
        Simulator, a Domain Name System (DNS) is provided for you and knows the IP
        addresses of all connected computers. Send a message in the form GET [hostname]
        to the DNS service at address <yourRouterNumber>.15 to get a student's address.
      NetSim Standalone Broadcast_instruction: |
        In this version of the Internet Simulator,
        you can connect to up to 5 other people in a room. When you send messages
        in the room, everyone receives them. What are some of the challenges of this
        system, and how might you solve them?\r
      NetSim Standalone Classroom Routers_instruction: |
        In this version of the Internet
        Simulator, everyone connects to a router and has a specific address. To send
        messages, you have to address your message to the specific address of the
        recipient, and the router will take care of delivering it to the right computer.
        If there are other routers created in your class, ask for the address of one
        of your classmates and send them a message! View the Log Router to see the
        path the messages have taken through the network.
      NetSim Standalone Freeplay_instruction: |
        In this configuration, most of the
        options are turned on, and you can play with them. Have fun!
      NetSim Standalone Manual DNS_instruction: |
        In this version of the simulator
        you can't see the other students' addresses.  Instead, one of you must act
        as a name service, to help share addresses with each other.
      NetSim Standalone Packets TCP_instruction: |
        Messages on the Internet can take
        many paths to get to their destination, and sometimes along the way the message
        gets dropped. In this version of the Internet Simulator, there is a 10% chance
        of a packet being dropped, multiple packets may take different paths to the
        destination, and the default max packet size is set to 6 additional characters.
      NetSim Standalone Routers Addresses_instruction: |-
        For this activity, connect
        to a router with the others in your group. Important note: The router will
        only properly route messages where the first 4 bits are the To: address and
        the second 4 bits are the From: address.\r
        \r
        [TODO: NetSim needs to support
        hierarchical addresses. For now, level is set up for 4 bit to and from addresses]
      NetSim Standalone SendAB_instruction: |
        You and your partner share a single
        wire that can only be in state A or state B. You can set the wire to either
        state at any time, and you can read the state of the wire at any time. Can
        you figure out a way to effectively communicate with just this system?
      NetSim Standalone Sending Numbers Ascii_instruction: |
        Now that you've transmitted
        information represented as decimal numbers, you can map those numbers to text
        characters to send text-based information back and forth. With a text-based
        protocol, you can easily represent and communicate all kinds of information.
      NetSim Standalone Sending Numbers_instruction: "You and your partner can now\nreliably
        send messages back and forth without extra coordination! While you're\nalways
        sending bits back and forth, you can also represent those bits as decimal\nnumbers.
        What kinds of information can you represent with this system? \n"
      NetSim_AddressingMessages_instruction: |
        In this version of the simulator, you
        will connect to a Router instead of directly to another student. Enter an
        address in the "To" box to send a message to another student.
      NetSim_AutomaticDNS_instruction: |
        In this version of the simulator a DNS service
        is provided for you. Send a message in the form GET [hostname] to the DNS
        service at address 15 to get a student's address.
      NetSim_ManualDNS_instruction: |
        In this version of the simulator you can't
        see the other students' addresses.  Instead, one of you must act as a name
        service, to help share addresses with each other.
      NetSim_SendAB_instruction: |
        Connect to another student.  Each of you can set
        the value of the wire between you to "A" or "B".  See if you can send
        a complete message!
      NetSim_SendAscii_instruction: |
        In this version of the simulator, you can send
        numbers or ASCII characters to one another, one bit at a time.
      NetSim_SendBits_instruction: |
        Connect to another student.  You can now set
        your wire to "0" or "1".  Send a message to your partner!
      NetSim_SendingABTest_instruction: |
        This is Sarah's test of making a netsim
        level
      NetSim_SendNumbers_instruction: |
        In this version of the simulator, you can
        view the decimal representations of the binary you are sending.
      NetSim_Superuser_instruction: You have loaded NetSim in superuser mode.
      NetSim_Variant1_instruction: |
        NetSim: Variant 1 allows students to manually
        work out the timing of sending bits back and forth.
      NetSim_Variant2_instruction: |
        NetSim: Variant 2: Students connect directly
        to one another and send entire packets back and forth, exploring systems of
        encoding data.
      NetSim_Variant3_instruction: |
        NetSim: Variant 3: Connects groups of 2-6 students
        with a router, and explores issues in routing and DNS
      New Artist Project_instruction: Desenează ceva minunat! Liniile tale de cod
        vor fi salvate ca proiect aşa că tu poţi reveni oricând.
      NEW Course 4 Artist Functions 1_instruction: Poți desena un pătrat care are
        lungimea laturii de 100 pixeli, folosind o construcție buclă?
      NEW Course 4 Artist Functions 10.1_instruction: Utilizează funcțiile de la puzzle-urile
        anterioare pentru a desena acest model.
      NEW Course 4 Artist Functions 10_instruction: Clic pe "edit" pentru a completa
        blocurile de instrucţiuni din definirea funcţiei pentru a realiza un pătrat
        cu latura de 40 pixeli.
      NEW Course 4 Artist Functions 11_instruction: Avem o funcţie nouă numită "draw
        a line of squares." Fi liber să arunci o privire în interiorul blocului de
        instrucţiuni al funcţiei pentru a vedea cum am construit-o. Clic pe "Run"
        când eşti gata pentru următorul puzzle.
      NEW Course 4 Artist Functions 12_instruction: Foloseştei funcţia "draw a line
        of squares" din ultimul puzzle pentru a desena acest model
      NEW Course 4 Artist Functions 13_instruction: 'Poţi desena o formă stea folosind
        funcţia "draw a line of squares"? Indicaţie: La fiecare repetare trebuie să
        muţi înainte un anumit număr de pixeli şi să roteşti la 144 grade.'
      NEW Course 4 Artist Functions 14_instruction: 'Joacă liber! '
      NEW Course 4 Artist Functions 2_instruction: 'Poţi desena 3 pătrate situate
        la 20 pixeli depărtare unul de celălalt? Indicaţie: fiecare pătrat are latura
        de 100 pixeli'
      NEW Course 4 Artist Functions 3_instruction: "Aici este un nou tip de bloc de
        instrucţiuni.\nPoartă numele de \"Function block.\" Clic pe \"Run\" ca să
        vezi ce face. \n"
      NEW Course 4 Artist Functions 4_instruction: 'Folosește funcția "desenează un
        pătrat" pentru a realiza acest model. Sugestie: Va trebui să folosești un
        bloc "virează la dreapta cu 120 de grade" după fiecare pătrat.'
      NEW Course 4 Artist Functions 5_instruction: Cum a știut blocul "desenează un
        pătrat" ce comenzi să ruleze? Fă clic pe "editare" în blocul funcţiei "desenează
        un pătrat". Blocurile din editorul de funcţie sunt definiţia care alcătuiesc
        "desenează un pătrat." Când ai terminat de observat, fă clic pe "Salvare şi
        Închidere" şi apoi "Rulează."
      NEW Course 4 Artist Functions 6_instruction: |
        Folosind blocul de funcție "desenează un pătrat", poţi desena această imagine? Indicaţie: fiecare pătrat este la 20 de pixeli distanță unul față de celălalt.\r
      NEW Course 4 Artist Functions 7_instruction: 'Începi să-ți dai seama cum să
        folosești blocurile de funcție? Hai să modificăm acest pătrat astfel încât
        să aibe o dimensiune de 200 de pixeli. Sugestie: fă clic pe "editează" pentru
        a introduce editorul funcției "desenează un pătrat". Amintește-ți să faci
        clic pe "Închide" pentru a ieși din editorul de funcție. '
      NEW Course 4 Artist Functions 8_instruction: Am creat o nouă funcţie pentru
        tine numită "Desenează un triunghi".  Poți edita definiţia de funcţie pentru
        a desena un triunghi cu laturile 100 pixeli?
      NEW Course 4 Artist Functions 9_instruction: Poți rezolva acest lucru prin adăugarea
        unui singur bloc?
      NEW Course 4 Artist Functions inspire_instruction: Fă clic aici pentru a vedea
        din nou imaginea de inspiraţie.
      New Course 4 Artist Functions Level 4_instruction: Folosește funcţia "desenează
        un pătrat" pentru a elabora acest model.
      NEW Course 4 Artist Params 1_instruction: Hai să definim această funcţie pentru
        a desena un pătrat cu laturi de 50 de pixeli. Fă clic pe "editare" pentru
        a începe.
      NEW Course 4 Artist Params 10_instruction: 'Creează un bloc de funcţie "desenează
        un hexagon" cu un parametru de lungime. Sugestie: acest hexagon are o dimensiune
        de 100 de pixeli. '
      NEW Course 4 Artist Params 11_instruction: Pot să îţi dai seama cum să desenezi
        această formă? Editează funcţia pentru a utiliza parametrul "laturi".
      NEW Course 4 Artist Params 12_instruction: "Poţi completa acest desen? \nLaturile
        tuturor formelor sunt de 100 de pixeli lungime.\n"
      NEW Course 4 Artist Params 12a_instruction: Această imagine este similară ultimei.
        Poţi utiliza o "buclă pentru" cu funcţia ta pentru a realiza acest design?
      NEW Course 4 Artist Params 13_instruction: "Hai să edităm această funcţie \"desenează
        o formă\". Ea are deja un parametru \"lungime\". Acum, hai să edităm funcţia
        pentru a adăuga un parametru \"laturi\". Amintește-ți că unghiul de viraj
        pentru o formă dată este de 360 împărţit la numărul de laturi avute. Sugestie:
        Dimensiunea globală a fiecărei forme este de 200 de pixeli. \nîți amintești
        ecuaţia pentru a face forme de aceeaşi dimensiune, atunci când acestea au
        un număr diferit de laturi?\n"
      NEW Course 4 Artist Params 14_instruction: Editează "desenează o margine de
        spirală" pentru a utiliza parametri şi a recrea aceste forme.
      NEW Course 4 Artist Params 15_instruction: |
        Joc la alegere: Aici sunt funcțiile pe care le-ai scris tu și încă ceva în plus cu care să te joci. Desenează ceva minunat!
        Joacă-te cu lățimea peniței pentru a vedea cât de diferit arată desenele tale!
      NEW Course 4 Artist Params 2_instruction: Creează de la zero o funcţie "desenează
        un triunghi" cu laturile de 50 pixeli
      NEW Course 4 Artist Params 3_instruction: |
        Acum hai să folosim funcția pentru a desena 5 triunghiuri pe un rând. Indiciu: fiecare triunghi este situat la 30 de pixeli distanță unul față de celălalt.\r
      NEW Course 4 Artist Params 4_instruction: "Observi ceva diferit \nla aceste
        blocuri de funcţie? Fă clic pe \"Rulează\" pentru a vedea ce se întâmplă.\n"
      NEW Course 4 Artist Params 5_instruction: 'Completează ??? în blocul de intrare
        a parametrului lungime. Sugestie: Pentagonul are dimensiunea de 100 de pixeli. '
      NEW Course 4 Artist Params 6_instruction: Completează parametrul "lungime" pentru
        a desena aceste forme prin înlocuirea "???" cu numerele corecte. Pătratul
        şi triunghiul sunt de 100 de pixeli mărime, în timp ce hexagonul are o dimensiune
        de 75 de pixeli.
      NEW Course 4 Artist Params 7_instruction: 'Poţi termina acest desen? Sfat: fiecare
        triunghi este cu 25 pixeli mai mare decât ultimul. Primul triunghi are latura
        de 25 pixeli.'
      NEW Course 4 Artist Params 8_instruction: Codul pentru acest triunghi este greşit.
        Poţi să editezi funcţia pentru a-l depana şi apoi să faci triunghiuri cu laturile
        de 25, 50 şi 75 pixeli?
      NEW Course 4 Artist Params 9_instruction: 'Fă clic pe "editare" pentru a completa
        definiția funcţiei "desenează un pătrat" şi pentru a adăuga un parametru.
        Ar trebui să ia un parametru de lungime, la fel ca și triunghiul. De această
        dată, desenează 3 pătrate: cu 25, 50 și 75 de pixeli lungime, fiecare la distanță
        de 100 de pixeli unul față de celălalt.'
      NEW Course 4 Artist Params inspire_instruction: "Inspiraţie pentru joc liber:
        Acum ai învăţat tot ce ai nevoie să ştii pentru a crea un model ca acesta!
        Dacă această imagine te inspiră, încearcă să faci ceva similar. Altfel, creează
        ceva propriu și personal.\\r\n\\r\nVrei să știi cum a fost făcut modelul nostru
        de inspirație? "
      NEW Course 4 Artist Vars 1.5_instruction: 'Aruncă o privire la acest cod, poţi
        vedea cum blocul "setează lungimea" şi blocul "lungime" lucrează împreună?
        Fă clic pe "Rulează" pentru a-l vedea în acţiune. '
      NEW Course 4 Artist Vars 12_instruction: Acum, recrează algoritmul de la ultimul
        nivel şi creează un pentagon cu laturile de 150.
      NEW Course 4 Artist Vars 2.5_instruction: 'Aruncă o privire la acest cod, poţi
        vedea cum blocul "setează lungimea" şi blocul "lungime" lucrează împreună?
        Fă clic pe "Rulează" pentru a-l vedea în acţiune. '
      NEW Course 4 Artist Vars 2_instruction: 'Glisează un bloc cu număr în blocul
        "setare lungime" pentru a desena un set de triunghiuri de 50 de pixeli. '
      NEW Course 4 Artist Vars 4 5_instruction: |
        Minunat lucru cu ultimul puzzle,
        hai să-l mai încercăm din nou, de data aceasta hai să facem acest design super cu hexagoane de 60 de pixeli.
      NEW Course 4 Artist Vars 4_instruction: 'Hai să-l încercăm din nou. Poți tu
        seta variabila de lungime pentru a face acest design minunat cu hexagoane?
        Indiciu: Este un multiplu de 10.'
      NEW Course 4 Artist Vars 6_instruction: |
        Deseneaza acest model prin mutarea variabilei lungime in locurile corecte si apoi setati valoarea corecta pentru lungime. (pont: este un multiplu de 10). \r\r Vezi cum setezi valoarea pentru lungime doar o data, iar codurile folosesc aceeasi valoare peste tot? \r\r\r
      NEW Course 4 Bee For Loops 1_instruction: Utilizează o buclă pentru a colecta
        nectarul din fiecare floare.
      NEW Course 4 Bee For Loops 10_instruction: Folosește variabila ta din bucla
        "pentru" ca să controlezi cât de departe să muți pe orizontal.
      NEW Course 4 Bee For Loops 10a_instruction: 'Gata pentru o provocare? Foloseste
        ce ai invatat despre bucle si incearca sa rezolvi problema asta. Aminteste-ti:
        se poate sa rulezi solutia de mai multe ori inainte sa iti dai seama de toti
        pasii.'
      NEW Course 4 Bee For Loops 11_instruction: Poţi folosi variabila de buclă pentru
        a controla mişcarea şi colectarea de nectar?
      NEW Course 4 Bee For Loops 2_instruction: Adauga codul necesar pentru a fii
        sigur ca albinele colecteaza tot nectarul. Uite de cate linii de cod ai nevoie
        pentru puzzle-ul acesta! (Vom invata un mod mai usor puzzle-ul urmator.)
      NEW Course 4 Bee For Loops 3_instruction: 'Ah, blocul "pentru bucla" face asta
        mult mai usor! Toate cod-urile de care ai nevoie sunt aici, arunca o privire
        si vezi cum sunt puse impreuna apoi selecteaza "Ruleaza" pentru a vedea cum
        merge. '
      NEW Course 4 Bee For Loops 4 4_instruction: Acum trebuie sa ne mutam inainte
        "de atatea ori" si sa culegem nectarul "de atatea ori". Poti folosi buclele
        "repetare"pentru a rezolva aceasta provocare?
      NEW Course 4 Bee For Loops 4_instruction: 'Înlocuiţi??? în "pentru buclă" cu
        cea mai mare cantitate de polen pe care albinele trebuie să o colecteze. '
      NEW Course 4 Bee For Loops 5 5_instruction: Incepeti sa stii sa folositi buclele?
        Haideti sa ajutam albinele sa culeaga si nectarul ramas.
      NEW Course 4 Bee For Loops 5_instruction: De asemenea, poţi utiliza o buclă
        "pentru" ca să numere în ordine descrescătoare. Încearcă să colectezi acest
        nectar numărând în ordine descrescătoare de la 5 la 1 câte 1.
      NEW Course 4 Bee For Loops 6_instruction: Ultimul numar din blocul "pentru bucla"
        este numit "crescatorul". De fiecare data cand ruleaza bucla, variabila se
        schimba cu valoarea crescatorului. Incearca sa colectezi aceste flori utilizand
        crescatorul 2.
      NEW Course 4 Bee For Loops 7_instruction: 'Acum, haideti sa combinam variabila
        "contorul" cu un bloc matematic! Cum poti utiliza variabila "contorul" pentru
        a naviga prin gradina cu cat mai putine blocuri posibile? Ce trebuie sa faci
        pentru a colecta 3, 6, 9, 12, sau 15 randuri de polen de data asta? Secretul
        este variabila "contorul"!\r\rAminteste-ti: daca bucla ta numara crescator,
        cresterea este adaugata variabilei "Contor" de fiecare data.'
      NEW Course 4 Bee For Loops 8_instruction: |
        Ati prins ideea! Care ar trebui sa fie variabila voastra crescatoare pentru a colecta 3, 6, 9, 12 sau 15 randuri de polen?\r
      NEW Course 4 Bee For Loops 9_instruction: Dacă bucla ta este de numărare în
        ordine descrescătoare, incrementul este scăzut din variabila ta numărător
        la fiecare buclă. Ce ar trebui să fie incrementul tău pentru a colecta 9 nectaruri,
        apoi 6, şi apoi 3 nectaruri?
      NEW Course 4 Bee For Loops 95_instruction: Aruncati o privire la fiecare piesa
        de "pentru bucla" pe care ati realizat-o. Iti poti da seama de ce numere ai
        nevoie pentru a rezolva acest puzzle? Cum functioneaza?
      NEW Course 4 Play Lab Params 11_instruction: 'Este timpul sa va jucati liberi!
        Distrati-va cu toate blocurile din bara de instrumente. '
      NEW Course 4 Play Lab Params 5 5_instruction: Haideti sa incercam din nou, dar
        cu mai putin ajutor. Ce trebuie sa schimbi acum pentru a face actorii sa se
        deplaseze?
      NEW Course 4 Play Lab Vars 4 5_instruction: '"Ce crezi ca va face codul aceasta?
        Apasa "Ruleaza" ca sa vezi ce se intampla."'
      NEW Course 4 Play Labs For Loops 7a_instruction: Folosind tot ceea ce ai invatat
        pana acum, poti sa il faci pe dinozaur sa fara un pas de fiecare data cand
        trece pe langa un pinguin?
      NEW Course 4 Play Labs For Loops 8 Free Play_instruction: 'Este timpul sa va
        jucati liberi! Distrati-va cu toate blocurile din bara de instrumente. '
      NEW Course 4 Play Labs For Loops 8a_instruction: 'Provocare: Cum a-ti folosi
        blocul "pentru bucla" pentru a face fiecare actor sa mearga de jur impresur
        si sa isi rosteasca numarul, apoi sa dispara de pe ecran? '
      New Play Lab Project_instruction: Creeaza-ti propria poveste sau joc! Codul
        tau este salvat ca proiect, asa ca te poti intoarce la el in orice moment.
      Ninjacat Demo B (copy 1)_instruction: |
        \r
        Let’s begin by exploring a simple
        videogame, and then figuring out how it works. You can use the arrow keys
        to move the ninja left, right and jump - try to catch the unicorn and avoid
        the dragon!\r
        \r
        \r
        \r
          \r
        \r
      Ninjacat Demo B_instruction: |
        Let’s begin by exploring a simple videogame,
        and then figuring out how it works. You can use the arrow keys to move the
        ninja up and down - try to catch the unicorn and avoid the dragon! When you
        think you've figured out how the game works, click "Finish"
      Ninjacat Demo No Animate_instruction: |
        Let’s begin by exploring a simple videogame,
        and then figuring out how it works. You can use the arrow keys to move the
        ninja up and down - try to catch the unicorn and avoid the dragon! When you
        think you've figured out how the game works, click "Finish"
      October15 bat_instruction: |
        Freeplay: Here are some functions to play with.  Can
        you draw a bat?\r
      October15 ghost 1_instruction: |
        Give the ghost eyes, using the "draw a circle"
        function.
      October15 JoL 1_instruction: |
        Program the artist to design a face for your
        jack-o-lantern!
      October15 pumpkin 1_instruction: |
        Finish this jack-o-lantern by drawing the
        eyes and nose in any style you would like.
      October15 stars 1_instruction: |
        Use loops and the "random integer" block
        to fill the night sky with stars of different shapes and sizes.
      Overworld Avoid Monsters_instruction: |
        Intalnirea unui Vierme nu este o idee buna.
        Mergeti cu atentie pe langa ei si ajungeti in siguranta in casa.
      Overworld Chop Tree - allthethings_instruction: |
        Wood is a very important resource.
        Many things are made from it. Walk to the tree and use the “destroy block”
        command to chop it down.
      Overworld Chop Tree_instruction: Lemnul este o resursa importanta. Se pot construi
        multe cu ajutorul lui. Mergeti la copac si utilizati blocul "Distrugeti" pentru
        a-l taia.
      Overworld Chop Trees_instruction: 'Trebuie sa construim o casa inainte de apus.
        Este necesar mult lemn. Taie toti cei trei copaci. '
      Overworld Free Play 20x20_instruction: Felicitări! Ai finalizat toate puzzle-urile!
        Acum extrage, construieste si creeaza ceva unic folosind tot ceea ce ai invatat
        pana acum.
      Overworld Free Play_instruction: Te poti juca cu acest peisaj. Tu alegi ce sa
        construiesti.
      Overworld House Frame - A_instruction: Sa ne construim propria casa! Acest loc
        arata bine. Construieste un cadru pe blocurile de pamant.
      Overworld House Frame - C_instruction: Sa ne construim propria casa! Acest loc
        arata bine. Construieste un cadru pe blocurile de pamant.
      Overworld House Frame B_instruction: Un perete a fost terminat, acum sa construim
        restul casei urmand planurile! Va trebui sa repeti mutarile destul de mult.
      Overworld House Frame B2_instruction: Un perete a fost terminat, acum sa construim
        restul casei urmand planurile! Va trebui sa repeti mutarile destul de mult.
      Overworld House Frame C_instruction: Un perete a fost terminat, acum sa construim
        restul casei urmand planurile! Va trebui sa repeti mutarile destul de mult.
      Overworld House Frame Chosen_instruction: Construieste restul casei din orice
        material doresti. Comanda "Repeta" iti va fi de ajutor.
      Overworld House Frame_instruction: Sa ne construim propria casa! Acest loc arata
        bine. Construieste un cadru pe blocurile de pamant.
      Overworld Minecart Track_instruction: Esti din nou la suprafata cu o multime
        de resurse subterane. Acum, vom construi un drum de-a lungul traseului cu
        mizerie de la casa ta. Primul pas este sa cureti tot de pe traseu. Urmareste
        traseul si taie copacii.
      Overworld Move to Sheep_instruction: Adauga din nou instructiunea "Mergi inainte"
        pentru a ajunge la oaie.
      Overworld Place Wall_instruction: Fiecare casa incepe cu un perete. Construieste
        prima parte a casei asezand comenzile "Loc" si "Mergi inainte" in interiorul
        buclei "Repeta".
      Overworld Plant Crops_instruction: Este bine sa planifici dinainte. Planteaza
        culturi pe ambele parti ale apei astfel incat mai tarziu sa nu-ti fie foame.
      Overworld Powered Minecart_instruction: Buna treaba! Ai adunat suficiente resurse
        pentru a construi o casa modesta. Acum dezvolta o cale ferata de la marginea
        hartii pana la usa casei tale.
      Overworld Shear Sheep_instruction: E vremea sa tunzi oile! Foloseste comanda
        "Tunde" pentru a aduna lana de la oi.
      PDAlg 13-16 Sam Extension Puzzle_instruction: |
        Add a second parameter to "onscreen?"
        for Sam's y coordinate and update the function so it keeps him safe on all
        four sides.
      PDAlg 17-20 Luigi Extension Puzzle_instruction: |
        Without modifying your existing
        "cost" function, create a new "coupon" function that takes a pizza topping
        and coupon code and returns the cost of a pizza with that topping. If the
        coupon code is correct (you get to decide what it is), apply a 30% discount
        to the pizza.
      PDAlg 8-12 ex dr 1_instruction: |
        The definition in this Design Recipe doesn't
        match both examples. Test each example to see which is failing, and then fix
        the definition to match.
      PDAlg 8-12 ex dr 2_instruction: |
        This student has created two examples for
        the function "apples" but something's not quite right. How would you direct
        this student to correct their mistake?
      PDAlg 8-12 Rocket Height Puzzle_instruction: |
        Let's write a "rocket-height"
        function with simple acceleration. Write a function that ensures the rocket
        is at 15 meters at 1 second, 45 meters at 2 seconds, 95 at 3 seconds, and
        165 at 4 seconds.
      PDAlg Big Game History_instruction: |
        Now that you've played through a Big
        Game level you should see a new entry in your history. Click the Version History
        button and you should see at least one version. Each time you go back to a
        Big Game level you'll get a new record in your version history that you can
        revert back to.
      PDAlg Big Game Remix_instruction: |-
        Here's your Big Game as you last left it.
        Try clicking the Remix button to spin off a new remix of your project.\r
        \r
        Any
        changes you make after you click Remix will be saved on your new remix and
        not on your main Big Game.
      PDAlg Design Recipe Delete_instruction: |
        Click the delete button to get rid
        of this function, then try creating and deleting a few of your own.
      PDAlg Design Recipe Examples_instruction: |
        The definition in this Design Recipe
        doesn't match both examples. Test each example to see which is failing, and
        then fix the definition to match.
      PDAlg Design Recipe Required_instruction: |
        Complete the Design Recipe for the
        "eggs" function, making sure to create and test your examples.
      PDAlg Updates Cond_instruction: |
        When you went to PD in the summer, the Conditional
        block that you were introduced to was black and allowed any data type to be
        used. This proved to be confusing, given that every other function we've
        seen always produces the same type of data. To help make conditionals clearer
        and more consistent we've replaced the single black block with a separate
        block for each data type.
      PDAlg Updates Errors_instruction: |
        Run the provided program and use the error
        messages to try and track down the bugs.
      PDAlg Updates Space_instruction: |
        Making use of limited programming space (especially
        on small screens) is challenging with a block based language. To help with
        this we've added a few features. Experiment with this provided code to see
        how the space can be manipulated to deal with larger programs.
      PDK5 Conditionals 1_instruction: |
        Purple flowers may have either 1 or 0 nectar,
        but you don't know which one! Be careful not to collect nectar from a purple
        flower if it doesn't have any. Check if the nectar is equal to 1 by using
        the if block.
      PDK5 Conditionals 2_instruction: "Try this puzzle that uses conditionals and\nloops
        together. Use the \"if\" block to decide when to turn. Hint: you only\nneed
        one more block to complete this puzzle. \n"
      PDK5 Events 1_instruction: "So far all of the programs we've written are executed\nin
        order from top to bottom. In this puzzle, we'll use \"Events\" to respond\nto
        an action on demand. Make the octopus say \"Hello\" only when you click\non
        the Octopus. \n"
      PDK5 Functions 1_instruction: |
        Hello. Me zombie artist. Me love drawing! Help
        me draw the square glasses.  Hint:  the bridge between the glasses is 25 pixels
        shorter than the square length.
      PDK5 Functions 2_instruction: Funcțiile îțî permit să construiești blocuri noi!
        Am mutat blocurile ce deseneaza un pătrat într-o funcție numită "desenează
        un pătrat". Poți folosi această funcție pentru a crea ochelarii? Pătratele
        au 75 de pixeli între ele.
      PDK5 Loops 1_instruction: "Instead of using 5 \"move forward\" blocks, use\nthe
        \"repeat\" block with a \"move forward\" block inside of it. In computer\nscience,
        this is called a \"loop.\" \n"
      PDK5 Loops 3_instruction: |
        Here's another puzzle to practice loops. What happens
        if you use the repeat block to run the code already provided on the workspace
        4 times?
      Pixelation - Lesson 14 - Fix bit offset v.2_instruction: |
        Something happened
        to the bits in this image! Find the error and fix it! Hint: a few extra bits
        were added. You should only need to remove some bits.
      Pixelation - Lesson 14 - Fix bit offset_instruction: |
        A single extra bit was
        inserted into the stream of bits that make up the C of the Code.org logo.
        That extra bit bumps all of the other bits down the line which makes the logo
        look messed up. Hunt down the extra bit and remove it to fix the Code.org
        logo.
      Pixelation - Lesson 14 - Fix the error_instruction: |
        Something happened to
        the bits in this image!  Find error and fix it!  Hint: a few extra bits were
        added.  You should only need to remove some bits.
      Pixelation - Lesson 14 - Make the Letter A_instruction: |
        Make a 3x5 letter
        'A'. The widget is setup with the incorrect dimensions. Your first task
        is to set the second byte to the 8-bit binary code for 5: 0000 0101. Then
        start entering pixel data.
      Pixelation - Lesson 14 - Make your own B and W Image_instruction: |
        Now make
        your own image! We've started you off with a 10x10 canvas but you can make
        it whatever size you want. Happy pixeling!
      Pixelation - Lesson 14 - Make your own B&W Image_instruction: |
        Now make your
        own image! We've started you off with a 10x10 canvas but you can make it
        whatever size you want.  Happy pixeling!
      Pixelation - Lesson 15 - Color Free Play_instruction: |
        Requirements: The icon
        must be 16x16 pixels. You must use the Pixelation Widget to encode the bits
        of color information. The image must be encoded with at least 12 bits per
        pixel.
      Pixelation - Lesson 15 - Color Shades 4x4_instruction: |
        We start you out with
        the 4x4 image Maddie created in the video. Your task is to fill a 4x4 grid
        with colors using 12-bits per pixel. Here are the requirements: Row 1 - fill
        with shades of red. Row 2 - shades of green. Row 3 - shades of blue. Row 4
        - shades of gray.
      Pixelation - Lesson 15 - Color Shades_instruction: |
        We start you out with the
        row of shades of red that Maddie created in the video. Experiment with 6-bit
        color by filling in the bottom row of the image with shades of a different
        color. Here is an example with some shades of blue. Try your own color!
      Pixelation - Lesson 15 - Complete 3-bit color_instruction: |
        We start you with
        the 4x2 image Maddie was creating, but we've left out the last two squares.
        Finish off the image by figuring out which two colors are missing and encode
        them.
      Pixelation 2_instruction: |
        Something happened to the bits in this image!  Find
        error and fix it!
      Pixelation 4x4 Empty_instruction: |
        The width and height are now encoded in
        the pixel data. Can you figure out how to adjust the dimensions?
      Pixelation Bee_instruction: |
        This larger image of a bee encodes color with
        12 bits per pixel, but viewing in hex makes it easier to see the color of
        each pixel. If you switch to binary mode - hold on to your hat - it's a lot
        of bits. Here's another mind-blowing thing to try: slide the bits per pixel
        up to 24 bits per pixel. What happens? Can you explain this behavior?
      Pixelation Flappy_instruction: |
        Here is a bigger image at 9 bits per pixel.
        With 9 bits per pixel you can express 512 different colors. Click through
        to see the next image which is even more sophisticated, but easier to understand.
      Play Lab Rocket 1_instruction: |
        A rocket blasts off, traveling at 15 meters
        per second... press "Run" to see how this word problem looks as an animation.
      Play Lab Rocket 2_instruction: |
        We've started the Design Recipe for rocket-height
        using the contract and examples you just wrote. Complete the function definition
        for rocket-height and run your animation.
      Play Lab Rocket 2B_instruction: |
        A rocket blasts off, traveling at 15 meters
        per second. Using the Design Recipe, write a function called rocket-height
        that takes in a number of  seconds that have passed since the rocket took
        off, and produces the height of the rocket at that time.
      Play Lab Rocket 3_instruction: |
        Awesome, now can you update that function so
        that our rocket moves more quickly? Make sure to update the purpose statement,
        examples, and function definition to launch a rocket at 40 meters per second.
      Play Lab Rocket 4 (copy 1)_instruction: |
        Real rockets start off slowly and
        gain speed over time - let's make ours do the same! Write an exponential
        function that describes a rocket that travels at "seconds" squared meters
        per second.
      Play Lab Rocket 4_instruction: |
        Real rockets start off slowly and gain speed
        over time - so let's add some simple acceleration to ours! Can you write
        a function that describes a rocket that is at 10 meters at 1 second, 40 meters
        at 2 seconds, 90 meters at 3 seconds, 160 at 4 seconds and so on?
      Play Lab Rocket 5_instruction: |
        Much better, but let's write one more function
        with simple acceleration. This time the rocket should be 15 meters at 1 second,
        45 meters at 2 seconds, 95 at 3 seconds, and 165 at 4 seconds.
      Play Lab Rocket Free Play_instruction: |
        Free Play: Experiment with your rocket-height
        function to make the rocket fly in different ways. Click "Finish" when you
        are done.
      Poorva-test_instruction: |
        Here are regular instructions for a level. There
        is nothing fancy going on here.
      PS Log test - Define and use turnAround_instruction: |
        Define a function called
        turnAround. Call the function and then move the turtle forward. (Click to
        see full instructions)
      Quantum Bee - Ryan_instruction: |
        These clouds are bugging me! Some of the clouds
        have flowers inside, and some don't. I should check each cloud, and only
        get nectar from the flowers.
      Quantum Bee_instruction: "Florile violete pot avea ori 1 ori 0 \nnectar, dar
        nu știi exact care din ele! Ai grijă să nu colectezi nectar dintr-o \nfloare
        violetă dacă aceasta nu are deloc. Verifică dacă nectarul este egal cu 1 \nfolosind
        blocul - dacă.\n"
      Ryan - 4-5 Bee Conditionals 2_instruction: Albina vrea doar nectar acum. Nu
        toate obiectele sunt flori, deci verifică sub FIECARE NOR pentru a vedea dacă
        el ascunde o floare. Dacă este așa, atunci poți aduna nectar.
      Ryan - Bee Conditionals_instruction: |
        Albina vrea doar nectar acum.
        Nu toate obiectele sunt flori, așa că verifică FIECARE NOR pentru a vedea
        dacă ascunde o floare. Dacă da, atunci poți aduna nectar.
      Ryan Doily Step 1_instruction: |
        Now we're going to draw a doily step by step.
        First, draw a square.
      Ryan Doily Step 2_instruction: |
        Now you need to turn and repeat it 20 times!
        How many degrees do you turn to get 360 after 20 iterations?
      Ryan Doily Step 3_instruction: |
        Now you need to turn and repeat it 20 times!
        How many degrees do you turn to get 360 after 20 iterations?
      Ryan Test Locked Blocks_instruction: |
        Aici este o funcţie numită "patrol."
        Editeaz-o pentru a muta pisica în sus cu 400 pixeli şi apoi în jos cu 400 pixeli.
      Ryan's clone of C4S15P10_instruction: "We've added one last function for you.\n\\r\n\\r\nUse
        an \"if\" statement to program your game to call the \"level_up\"\nfunction
        only when \"player_score\" becomes greater than a certain number.\\r\n\\r\nFor\nexample:
        \"player_score\" > 6\\r\n\\r\nPlay the game, and make it past level\n4 to
        move to the next puzzle. "
      Sam the Butterfly 1 (copy 1)_instruction: |
        This butterfly is named Sam, and
        the game area is Sam’s yard. Sam's yard is 400 pixels wide by 400 pixels
        tall! As you can see, Sam is free to walk around the yard, and the coordinates
        at the top of the screen update to tell you his location. Use the arrow keys
        to move sam around his yard. Help Sam collect all of the flags to move on.
      Sam the Butterfly 1_instruction: |
        This bat is named Sam, and the game area
        is Sam’s yard. Sam's yard is 400 pixels wide by 400 pixels tall! As you can
        see, Sam is free to walk around the yard, and the coordinates at the top of
        the screen update to tell you his location. Click "Run" and then use the
        arrow keys to move Sam around his yard, making note of Sam's coordinates
        at different locations. Click "Finish" when you're ready to move on.
      Sam the Butterfly 2_instruction: |
        Sam's mom wants to make sure that she can
        always see at least a bit of him, so lets write some functions that help make
        sure he doesn't go too far out of the yard. Here's a function called safe-left?
        - it should take a Number for its domain that represents Sam's x-coordinates
        and return true if he's completely visible on screen. If your function works,
        Sam shouldn't be able to leave the yard from the left side.
      Sam the Butterfly 3_instruction: |
        In the last puzzle we kept Sam from leaving
        on the left, now let's do the same thing on the right. Complete the safe-right?
        function to make sure Sam can't go off the right side of the screen.
      Sam the Butterfly 4_instruction: |
        Huh, we can keep Sam from leaving on the
        left, or we can keep him from leaving on the right, but how can we keep him
        safe from leaving both directions? Try using the and block to program the
        function on-screen? to check if Sam is safe-left? and safe-right?
      Sam the Butterfly 5_instruction: |
        Free Play: Awesome, we've kept Sam safe
        on the left and right! Use this free play stage to experiment with your functions
        and further improve onscreen?
      Sam the Butterfly 6_instruction: |
        We've added a new parameter "y" to the
        "on-screen?" function. Update the function so that it checks that "safe-left?"
        AND "safe-right?" AND "safe-up?" are all true. When you've fixed the
        function, try going out of the yard from the left, right, and top sides.
      Sam the Butterfly 7_instruction: |
        Only one last direction to worry about! Create
        a "safe-down?" function and update the "on-screen?" function so that it
        checks up, down, left, and right.
      Sam the Butterfly Complete_instruction: |
        Only one last direction to worry about!
        Create a "safe-down?" function and update the "on-screen?" function so
        that it checks up, down, left, and right.
      scrat 16 (copy 1)_instruction: |
        Acorn! Acorn! Acorn! Use an "if" block to
        get me there with the fewest number of blocks.
      scrat 16_instruction: Ghindă! Ghindă! Ghindă! Utilizaţi un bloc "dacă" pentru
        a mă acolo cu cel mai mic număr de blocuri.
      scrat 17 (copy 1)_instruction: |
        Ok, let's do that again for practice - this
        isn't very different, but watch out for the <insert obstacle name for Scrat>!
      scrat 17_instruction: Ok, haideți să exersăm din nou - nu este foarte diferit,
        dar uitați-vă după perete!
      scrat 18 (copy 1)_instruction: |
        The "If-else" blocks checks a condition,
        and then does one thing OR another. To get me to the acorn try to use this
        new block.
      scrat 18_instruction: Blocurile "dacă-altfel" verifică o condiţie, şi apoi execută
        un lucru sau altul. Pentru a mă duce la ghindă încercaţi să utilizaţi acest
        bloc nou.
      scrat 19 (copy 1)_instruction: |
        One more practice of the "if-else" block,
        can you get it right on your first try?
      scrat 19_instruction: Încă un exercițiu de practică cu blocul "dacă-altfel",
        poate reușești chiar prima încercare?
      scrat 20_instruction: Puteți să mai adăugați doar 3 blocuri pentru a mă ajuta
        să rezolv un labirint mai complex? Dacă o faceți bine, voi putea să merg pe
        orice traseu curbat, indiferent de lungime. Uraaa! Gheața se topește!
      SpecialFrozenLevel_instruction: Ai devenit oficial un artist maestru! Creează
        un paradis de iarnă.
      Standalone_Artist_1_instruction: Bine ai venit la Artist! În primul rând, să
        încercăm să facem un pătrat simplu folosind blocul "rotește la dreapta" şi
        blocul "mută înainte". Fiecare latură ar trebui să aibă lungimea de 100 de
        pixeli.
      Standalone_Artist_2_instruction: Desenează acest romb cu unghiuri de 120 şi
        60 de grade şi laturile cu lungimea de 150 de pixeli.
      Standalone_Artist_3_instruction: Poţi desena acest hexagon cu laturi de 100
        de pixeli şi rotiri de 60 grade?
      Standalone_Artist_4_instruction: Acum ai un bloc nou cu care să te joci, bucla.
        Aceasta va repeta un set de comenzi. Ce se întâmplă dacă buclezi aceste comenzi
        de 6 ori?
      Standalone_Artist_5.5_instruction: 'Observă cum am simplificat codul rombului
        transformându-l într-o buclă. Poți repeta întreaga secvență de 12 ori pentru
        a desena floarea. Sugestie: Vei avea nevoie să rotești cu 30 de grade, după
        bucla rombului tău. astfel încât să nu tot desenezi peste acelaşi romb.'
      Standalone_Artist_5_instruction: De câte ori trebuie să repeți acest romb pentru
        a desena floarea?
      Standalone_Artist_6_instruction: 'Buclează acest cod hexagon de 6 ori pentru
        a crea designul. Cu câte grade va trebui să rotești de fiecare dată? Indiciu:
        împarte numărul de grade într-un cerc la numărul de câte ori buclezi.'
      Standalone_Artist_7_instruction: 'O funcţie este un alt instrument de programare
        care a te ajută să eviți să te repeți. Această funcţie desenează o floare,
        așadar o poţi folosi oricând vrei să desenezi o floare. Utilizează această
        funcție şi blocul nou "Salt" pentru a desena aceste flori. Sugestie: Florile
        sunt la aproximativ 150 de pixeli distanță una față de cealaltă'
      Standalone_Artist_8_instruction: Aici este o funcţie numită "Desenează o formă",
        pe care noi am programat-o să elaboreze hexagoane. Rulează codul pentru a
        vedea ce face şi apoi experimentează cu funcția pentru a vedea ce se întâmplă.
        Poţi să o faci să deseneze un model de pătrate, triunghiuri sau octagoane?
      Standalone_Artist_9_instruction: Acum mergi mai departe şi creează orice imagine
        dorești! Ai chiar şi o funcţie goală pe care o poți face să realizeze ce vrei
        tu!
      Standalone_Artist_v2_instruction: Bine ai venit la Artist! În primul rând, să
        încercăm să facem un pătrat simplu folosind blocul "rotește la dreapta" şi
        blocul "mută înainte". Fiecare latură ar trebui să aibă lungimea de 100 de
        pixeli.
      template test_instruction: what up
      Test Play Lab_instruction: This is a test play lab level.
      test_sarah_instruction: hi
      Testing Quantum Farmer_instruction: "Wow, look at that! \\r\n\\r\nI don't know\nhow
        many shovelfuls of dirt this hole needs.  \\r\nCan you write a program\nthat
        keeps using the `fill` block until the ground is even?  "
      Text Compression 1_instruction: |
        Look for patterns (repeated words or phrases)
        in the text. Enter the patterns you see into the dictionary on the right.
        As you type entries into the dictionary, the symbol for the entry is inserted
        into the text in place of the pattern.
      Total Artist Clone Me_instruction: |
        Freeplay: Here are the functions you've
        written, and some more for you to play with. Draw something awesome! Play
        with the pen width to see how different your drawings look!
      U1L10 NetSim numbers with decimal_instruction: |
        Invent and test a protocol
        for encoding and sending text messages. Your protocol must include the letters
        a-z, spaces, and common punctuation marks. You may add additional characters
        if you wish. See the worksheet handed out by your teacher for more detailed
        instructions!
      U1L11 NetSim numbers with Ascii_instruction: |
        Work with a partner or in a small
        team to develop a protocol that allows you to send formatted text. See the
        worksheet handed out by your teacher for more detailed instructions!
      U1L13 Text Compression_instruction: |
        Look for patterns (repeated words or phrases)
        in the text. Enter the patterns you see into the dictionary on the right.
        As you type entries into the dictionary, the symbol for the entry is inserted
        into the text in place of the pattern.
      U1L4 NetSim SendAB_instruction: "Develop, document, and test a protocol that\nallows
        you to use Internet Simulator to relay a message. See the worksheet\nfor more
        detailed instructions.  \n"
      U1L8 NetSim numbers no decimal_instruction: Default instructions
      U1L8 NetSim numbers with decimal_instruction: |
        With your partner, develop a
        protocol or set of rules for communicating a drawing using only bits. See
        the worksheet handed out by your teacher for more detailed instructions!
      U2 frequency caesar_instruction: Instrucţiuni
      U2 frequency random sub_instruction: Instrucţiuni
      U2 vigenere cipher_instruction: Instrucţiuni
      U2 Vigenere_instruction: Test
      U2L04 - NetSim Routers with Addresses_instruction: |
        Send messages with your
        classmates (Click to see full instructions)
      U2L05 - NetSim - Packets and Building TCP_instruction: |-
        Develop a Protocol
        for Reliably Sending a Message.\r
        \r
        Constraints:\r
        - Packets may contain
        only 6 characters\r
        - Packets may drop with small probability\r
        - Packets
        may not arrive in order
      U2L10 NetSim Automatic DNS_instruction: |
        In this version of the Internet Simulator,
        a Domain Name System (DNS) is provided for you and knows the IP addresses
        of all connected computers. Send a message in the form GET [hostname] to the
        DNS service at address <yourRouterNumber>.15 to get a student's address.
      U2L10 NetSim Manual DNS_instruction: |
        In this version of the simulator you
        can't see the other students' addresses.  Instead, one of you must act as
        a name service, to help share addresses with each other.
      U2L14 frequency random_instruction: Test
      U2L2 NetSim Hub Mode_instruction: |
        Now use the Internet Simulator to send the
        battleship moves. For setup, join a Room with your group, and add ships to
        your paper board for each opponent. When playing, all communication must be
        done through the tool, so no talking, but have fun!\r
      U2L3 NetSim Hub Mode_instruction: |
        Use the Internet Simulator to test out your
        group's binary communication protocol for battleship. How short can you make
        the message and response?
      U2L4 NetSim Routers Addresses_instruction: |-
        For this activity, connect to a
        router with the others in your group. Important note: The router will only
        properly route messages where the first 4 bits are the To: address and the
        second 4 bits are the From: address.\r
        \r
        [TODO: NetSim needs to support
        hierarchical addresses. For now, level is set up for 4 bit to and from addresses]
      U2L5 NetSim Classroom Internet_instruction: |
        For this activity, connect to
        a router with the others in your group. The Internet Simulator now provides
        a place for you to put the To and From addresses, so you don't have to type
        out the bits manually.\r
        \r
      U2L7 NetSim Need for Packets_instruction: |
        Transfer your favicon to a partner
        across a network in which the larger a packet grows, the more likely it is
        to be dropped.
      U3 - Arrays - appendItem_instruction: |
        Create an array of odd numbers 1-11
        by using appendItem. (Click to see full instructions)
      U3 - Arrays - assignment_instruction: |
        Use indexes to change the values in
        this array from 1 to 0. (Click to see full instructions)
      U3 - Arrays - assignment2_instruction: |
        Calculate the sum of three values stored
        in an array. (Click to see full instructions)
      U3 - Arrays - assignment3_instruction: |
        Increase the value of each value in
        the randomly generated array by 1. (Click to see full instructions)
      U3 - Arrays - createFirstArray_instruction: |
        Create an array of the even numbers
        from 0 to 10 and display its contents with console.log. (Click to see full
        instructions)
      U3 - Arrays - Demo App_instruction: |
        Use the "My Favorite Things" app. How
        might this app be making use of an array? (Click to see full instructions)
      U3 - Arrays - expressionsAsIndexes_instruction: |
        Write a program that displays
        a randomly chosen color from the array. (Click to see full instructions)
      U3 - Arrays - favThings addItem_instruction: |
        Write code that allows a user
        to add their own favorite things to the list. (Click to see full instructions)
      U3 - Arrays - favThings bounds_instruction: |
        Add if statements to your event
        handlers that prevent the global index from going out of bounds. (Click to
        see full instructions)
      U3 - Arrays - favThings Counting Variable_instruction: |
        Create a global variable
        for the current index and use it to display the first item in the array. (Click
        to see full instructions)
      U3 - Arrays - favThings createArray_instruction: |
        Create an array of words
        describing your favorite things. (Click to see full instructions)
      U3 - Arrays - favThings firstOutput_instruction: |
        Use setText to display the
        first item in the array. (Click to see full instructions)
      U3 - Arrays - favThings giveIDs_instruction: |
        Give your UI elements descriptive
        and meaningful IDs. (Click to see full instructions)
      U3 - Arrays - favThings keepPlaying_instruction: |
        Make any other improvements
        you want! (Click to see full instructions)
      U3 - Arrays - favThings Next_instruction: |
        Write code that allows the user
        to move forward through your list by clicking the "Next" button. (Click
        to see full instructions)
      U3 - Arrays - favThings Prev_instruction: |
        Write code that allows the user
        to move backward through your list by clicking the "Last" button. (Click
        to see full instructions)
      U3 - Arrays - favThings template_instruction: |
        Give your UI elements descriptive
        and meaningful IDs. (Click to see full instructions)
      U3 - Arrays - globalVariableIndex_instruction: |
        Give your UI elements descriptive
        and meaningful IDs. (Click to see full instructions)
      U3 - Arrays - indexPractice_instruction: |
        Write the contents of the array to
        the screen in numerical order. (Click to see full instructions)
      U3 - Arrays - insertingItems_instruction: |
        Insert items into an array to form
        a complete sentence. (Click to see full instructions)
      U3 - Arrays - insertionErrors_instruction: |
        Run each command that references
        indexes that are out of bounds and observe the results. (Click to see full
        instructions)
      U3 - Arrays - introIndex_instruction: |
        Display the first and last element in
        the array. Display the number 5 from the array. (Click to see full instructions)
      U3 - Arrays - length_instruction: |
        Use list.length to determine the length
        of each array. (Click to see full instructions)
      U3 - Arrays - lengthMinus1_instruction: |
        Use list.length - 1 to log the last
        item in the array to the console. (Click to see full instructions)
      U3 - Arrays - remove_instruction: |
        Remove items from an array to form a complete
        sentence. (Click to see full instructions)
      U3 - Arrays - stringsInArrays_instruction: |
        Write a sentence word by word by
        adding strings to an array. (Click to see full instructions)
      U3 - Canvas - 200dots_instruction: |
        Add a loop to your program that draws 200
        dots on your canvas. (Click to see full instructions)
      U3 - Canvas - appendToArray_instruction: |
        Create an array to store each event
        parameter. Append each event parameter to this array within your event handler.
        (Click to see full instructions)
      U3 - Canvas - changeToMouseMove_instruction: |
        Change your program so that dots
        are drawn at the location of the mouse as the user moves the mouse on the
        canvas. (Click to see full instructions)
      U3 - Canvas - clickToAdd_instruction: |
        Change your program so that dots are
        added to the canvas when the user clicks on it. (Click to see full instructions)
      U3 - Canvas - delete_instruction: |
        Create a button that deletes the drawing
        by clearing the canvas and removing all stored values. (Click to see full
        instructions)
      U3 - Canvas - draw at click point_instruction: |
        Change your program so that
        dots are drawn at the location of the mouse click. (Click to see full instructions)
      U3 - Canvas - freePlay_instruction: |
        Extend the functionality of one of the
        effects, or create an entirely new one of your own. (Click to see full instructions)
      U3 - Canvas - introCanvas_instruction: |
        Add a canvas to your app and set it
        to be the active canvas. Then add a large dot to your canvas. (Click to see
        full instructions)
      U3 - Canvas - movementFunction fix Orig_instruction: |
        Modify the "Original"
        button event handler so that it takes the movement of the mouse into account.
        (Click to see full instructions)
      U3 - Canvas - movementFunction_instruction: |
        Write a function that takes the
        movement of the mouse as input and generates a line width as output. (Click
        to see full instructions)
      U3 - Canvas - One Dot sprayPaint_instruction: |
        Write code that redraws your
        image using a dot whose x and y locations use offsetX and offsetY with a small
        random value added. (Click to see full instructions)
      U3 - Canvas - redrawOriginal_instruction: |
        Write a function that processes
        your array, redrawing the dots as they originally appeared. (Click to see
        full instructions)
      U3 - Canvas - redrawRandom_instruction: |
        Set up a button and event handler
        for the random function. (Click to see full instructions)
      U3 - Canvas - redrawRandom2_instruction: |
        Write a function that processes your
        array, redrawing every dot with a random size. (Click to see full instructions)
      U3 - Canvas - shiftKey_instruction: |
        Add an if statement to your event handler
        so dots are only drawn when the shift key is pressed. (Click to see full instructions)
      U3 - Canvas - sketch_instruction: |
        Write code that redraws your image using
        a sketch effect. (Click to see full instructions)
      U3 - Canvas - sprayPaint_instruction: |
        Update the spray paint code so that
        it redraws your image using multiple random dots instead of using a nested
        for loop. (Click to see full instructions)
      U3 - Canvas - transparentDots_instruction: |
        Change the colors of your dots
        so they have a fully transparent stroke and partially transparent fill. (Click
        to see full instructions)
      U3 - Canvas - usingOffsetXY_instruction: |
        Add a console.log command inside
        the function of your event handler. Use it to display the event parameter.
        Click on the screen to see the contents of the event parameter (Click to see
        full instructions)
      U3 - Conditional Basics - 6_instruction: |
        Add a setText after the if statement
        to "Nope. Guess again." (Click to see full instructions)
      U3 - Conditionals - Combine AND and OR_instruction: |
        Write an if statement
        that uses AND and OR to display "Time to go to school!" if it's not the
        weekend and the user is under 18. (Click to see full instrucitons.
      U3 - Conditionals - Combine AND OR and NOT_instruction: |
        Write an if statement
        that uses AND and OR to display "Time to go to school!" if it's not the
        weekend and the user is under 18. (Click to see full instructions.)
      U3 - Conditionals - Combine AND OR Simple_instruction: |
        Write an if statement
        that uses AND and OR to display "Sleep in!" if it's the weekend and the
        user is a teenager. (Click to see full instructions.
      U3 - Conditionals - intoOr_instruction: |
        Add 2 if statements that use the OR
        operator. (Click to see full instructions)
      U3 - Conditionals - introAND_instruction: |
        Add 2 if statements that use the
        OR operator. (Click to see full instructions)
      U3 - Conditionals - Simple AND_instruction: |
        Write an if statement that uses
        AND to display "You are a teenager." if the user enters an age between 13
        and 19. (Click to see full instructions)
      U3 - Conditionals - Simple OR_instruction: |
        Write an if statement that uses
        OR to display "It's the weekend!" if the user enters a weekend day at the
        prompt. (Click to see full instructions)
      U3 - Design Mode - Console Log_instruction: |
        Update the ID names and `console.log`
        messages to match the correct button. (Click to see full instructions.)
      U3 - Design Mode - Layers and Delete_instruction: |
        Fix the layout of the bullseye
        game. (Click to see full instructions)
      U3 - Design Mode - Multi Screens 2_instruction: |
        Make a 2 screen app which
        can switch back and forth between a black screen and a white screen using
        buttons. (Click to see detailed instructions.)
      U3 - Design Mode - Multi Screens_instruction: |
        Make a 2 screen app with a black
        screen and a white screen. (Click to see detailed instructions)
      U3 - Design Mode - Other Events_instruction: |
        Delete the button and make the
        image move to a random location when you click on it. (click to see detailed
        instructions)
      U3 - Design Mode - WTF Console Log_instruction: |
        Add a 3 console.log messages
        and test them out. (Click to see full instructions.)
      U3 - Design Mode -Recreate Beyond Buttons_instruction: |
        Recreate the game from
        the "Chaser Game" with a Welcome Screen and Game Over Screen. (Click to
        see full instructions.)
      U3 - Design Mode 1_instruction: |
        Add a large red button to your screen using
        Design Mode. (Click for full instructions.)
      U3 - Dice - Dropdown and Score_instruction: |
        Add guess and score to the Dice
        Game (Click to see full instructions)
      U3 - Dice - Dropdown with Strings_instruction: |
        Add a dropdown for difficulty
        level that prints the difficulty level in the console. (Click to see full
        instructions)
      U3 - Dice - If_instruction: |
        Show different die images for the random number
        generated. (Click to see full instructions)
      U3 - Dice - Nested_instruction: |
        Use nested if statements to make the scoring
        different for the different game levels. (Click to see full instructions)
      U3 - High Low - Debug_instruction: |
        Debug the order of the conditionals so
        that it will actually tell the user when their guess is close. (Click to see
        full instructions)
      U3 - High Low - Dropdown_instruction: |
        Add a dropdown for their guess instead
        of promptNum (Click to see full instructions)
      U3 - High Low - Else if_instruction: |
        Add an else-if statement in order to
        tell the user if their guess is high or low instead of just wrong. (Click
        to see full instructions)
      U3 - High Low - Else_instruction: |
        Add an else statement so that the program
        will tell the user when they are right and when they are wrong. (Click to
        see full instructions)\r
      U3 - High Low - If_instruction: |
        Add code to the if statement that indicates
        the user guessed the secret number. (Click to see full instructions)
      U3 - Keys - Add Image URLs_instruction: |
        Add image URLs to your array. Replace
        the text area with an image and setText with setImageURL. Then test your app!
        (Click to see full instructions)
      U3 - Keys - Buttons and Keys_instruction: |
        Have the program respond the same
        way for both clicking images on the screen and hitting the up and down keys
        on the keyboard. (Click to see full instructions)
      U3 - Keys - Demo App_instruction: |
        Play with the image scroller. Press the
        left and right arrows to progress through the images.
      U3 - Keys - Final Image Scroller_instruction: |
        Update the image scroller to
        respond to buttons and key presses. (Click to see full instructions)
      U3 - Keys - Functions_instruction: |
        Write doUpArrow and doDownArrow functions
        and call the functions instead of duplicating the code. (Click to see full
        instructions)
      U3 - Keys - Key Up and Down_instruction: |
        Try out the keyup and keydown events
        to see how they are different from keypress. (Click to see full instructions)
      U3 - Keys - Multiple Keys_instruction: |
        Play a different sound when the down
        arrow is pressed. (Click to see full instructions)
      U3 - Keys - Practice Adding Images with URL_instruction: |
        Add image URLs to
        your image array. Test out the add button. Style your image scroller. (Click
        to see full instructions)
      U3 - Keys - Words to Images_instruction: |
        Add image URLs to your image array.
        Test out the add button. Style your image scroller. (Click to see full instructions)
      U3 - Loops -  9 Part 2_instruction: |
        Change the boolean expression for the
        while loop so that it will roll until both dice are greater than 3. (Click
        to see full instructions)
      U3 - Loops -  Complex Condition_instruction: |
        Change the boolean expression
        for the while loop so that it will stop when both dice are greater than or
        equal to 5. (Click to see full instructions)
      U3 - Loops - 1_instruction: |
        Change the condition for the while loop to check
        if the variable num is less than 90. (Click to see full instructions)
      U3 - Loops - 10_instruction: |
        Write a program that simulates the rolling of
        two dice. Roll the dice repeatedly until the sum of the dice is either 7 or
        11.
      U3 - Loops - 11_instruction: |
        Fix the condition so that it keeps rolling the
        die as long as the value is not a 2 or a 3 instead of rolling infinitely.
        (Click to see full instructions)
      U3 - Loops - 12_instruction: |
        Change the code so that it prints the string
        "Hi" 5 times. (Click to see full instructions)
      U3 - Loops - 13_instruction: |
        Update the code to count up by 3 instead of 1.
        (Click to see full instructions)
      U3 - Loops - 14_instruction: |
        Change the loop condition to prevent the infinite
        loop and stop counting once the count is past 30. (Click to see full instructions)
      U3 - Loops - 15_instruction: |
        Count the number of times the sum of the dice
        is 12. (Click to see full instructions)
      U3 - Loops - 16_instruction: |
        Find out how many times you have to roll to get
        the sum of 7 100 times (Click to see full instructions)
      U3 - Loops - 2_instruction: |
        Try creating an infinite loop using !=, > and
        <. (Click to see full instructions)
      U3 - Loops - 3_instruction: |
        Change the if statement to a while loop so the
        program will run until it rolls a 6. (Click to see full instructions)
      U3 - Loops - 4_instruction: |2
         Use the Debug Commands to make a list of all
        the values rolled before a 6. (Click to see full instructions)
      U3 - Loops - 5_instruction: |
        Add code inside the while loop which will update
        the variable num so that the condition will eventually become false. (Click
        to see full instructions)
      U3 - Loops - 6_instruction: |
        Fix the problem so the loop will run at least
        once. Change the initial value of num to a dummy value such as -1. (Click
        to see full instructions)
      U3 - Loops - 7_instruction: |
        Without adding any lines of code, reorder the
        code so that it prints all the values of num. (Click to see full instructions)
      U3 - Loops - 8_instruction: |
        Debug which number is not getting printed and
        add a write statement to display that value. (Click to see full instructions)
      U3 - Loops - 9_instruction: |2
         Modify the condition so that it keeps rolling
        as long as both are less than 3. (Click to see full instructions)
      U3 - Loops - Continue_instruction: |2
         Use the Debug Commands to to make a list
        of all the values rolled before a 6. (Click to see full instructions)
      U3 - Loops - minus = operator_instruction: |
        Update the code to use the -= operator
        to count from 30 down to 0 by 3's. (Click to see full instructions)
      U3 - Loops - Minus Minus_instruction: |
        Change the code to count down from 10
        to 1. (Click to see full instructions)
      U3 - Loops - plus and minus = operator_instruction: |
        Update the code to use
        the += operator. (Click to see full instructions)
      U3 - Loops - Plus Plus_instruction: |
        Change the code to use count++ instead
        of count = count + 1.  (Click to see full instructions)
      U3 - Loops - Typing in Console_instruction: |
        Use console to check the ending
        value of num. (Click to see full instructions)
      U3 - Loops And Arrays - Add 5_instruction: |
        Add 5 to all the values in an array
        (Click to see full instructions)
      U3 - Loops And Arrays - Challenge 1_instruction: |
        Write a function that finds
        and returns the minimum value in an array.   (Click to see full instructions)
      U3 - Loops And Arrays - Challenge 2_instruction: |
        Write a function that finds
        and returns the minimum value in an array.   (Click to see full instructions)
      U3 - Loops And Arrays - Counting Times_instruction: |
        Count the number of times
        5 appears in an array. (Click to see full instructions)
      U3 - Loops And Arrays - Divid by 2_instruction: |
        Divide every value in the
        array by 2. (Click to see full instructions)
      U3 - Loops And Arrays - Find Max_instruction: |
        Design a function that displays
        the smallest number in an array  (Click to see full instructions)
      U3 - Loops And Arrays - Find Min_instruction: |
        Complete the findMinVal function
        to find and display the smallest value in an array  (Click to see full instructions)
      U3 - Loops And Arrays - Functions that Return Value_instruction: |
        Call findMin
        within the console.log statement to calculate the minimum of two values.  (Click
        to see full instructions)
      U3 - Loops And Arrays - General Search Param_instruction: |
        Add a second parameter
        to the search function for the value to search for.  (Click to see full instructions)
      U3 - Loops And Arrays - Intro For Loop_instruction: |
        Add a for loop with a
        console.log inside and test out the 3 pieces of the for loop. (Click to see
        full instructions)
      U3 - Loops And Arrays - Linear Search_instruction: |
        Visit every element in
        the array and display "true" if the value is a 5, and "false" otherwise.
        (Click to see full instructions)
      U3 - Loops And Arrays - Loop Array If_instruction: |
        Use an if statement to
        only display the values in the array that are greater than 5. (Click to see
        full instructions)
      U3 - Loops And Arrays - Make it a Function - add list parameter_instruction: |
        Create
        a function that takes a list parameter and prints if the list contains a 5.
        (Click to see full instructions)
      U3 - Loops And Arrays - Make it a Function_instruction: |
        Move the code that
        searches the list for a 5 into a function called "search". (Click to see
        full instructions)
      U3 - Loops And Arrays - Multiple Returns_instruction: |
        Test out the return
        values of the findMax function.  (Click to see full instructions)
      U3 - Loops And Arrays - Print Array_instruction: |
        Use a for loop to print out
        all the values in an array. (Click to see full instructions)
      U3 - Loops And Arrays - Printing Single True_instruction: |
        Process the array
        and display a single "true" if the array contains a 5 or a single "false"
        if it does not.  (Click to see full instructions)
      U3 - Loops And Arrays - Return Index_instruction: |
        Make the search function
        return the index of the search value in the array. (Click to see full instructions)
      U3 - Loops And Arrays - Return Value_instruction: |
        Use constrain in this simple
        app to keep the turtle from driving off the screen.  (Click to see full instructions)
      U3 - Loops And Arrays - Search and Remove_instruction: |
        Search for 5 in the
        array and remove it from the array. (Click to see full instructions)
      U3 - Loops And Arrays - Search with Boolean Var_instruction: |
        Make a boolean
        variable to use as a flag to keep track of whether there is a 5 in the array.
        (Click to see full instructions)
      U3 - Loops And Arrays - useFindMin_instruction: |
        Call findMin within the console.log
        statement to calculate the minimum of two values.  (Click to see full instructions)
      U3 - Movie Bot - Multiple If Sequences_instruction: |
        Add another set of if,
        else if, and else statements inside the question if statement to check for
        keywords for movie ratings (G, PG, PG-13, and R). (Click to see full instructions)
      U3 - Movie Bot - Nested Motivation_instruction: |
        Add a separate set of if statements
        to check for a "?" in the input. (Click to see full instructions)
      U3 - Movie Bot - toLowerCase_instruction: |
        Use the toLowerCase command to change
        all user input into lowercase letters after they enter it. (Click to see full
        instructions)
      U3 - Movie Bot - When Multiple If Statements_instruction: |
        Add an if and else-if
        statement that checks for please and thank you. (Click to see full instructions)
      U3 - Practice Create Performance Task_instruction: |
        Design and implement your
        practice Create Performance Task. (Click to see full instructions)
      U3 - Read Record - 1.2_instruction: |
        Console.log the records returned by a
        call to readRecords. (Click to see full instructions)\r
      U3 - Read Record - 1.5_instruction: |
        Console.log the records returned by a
        call to readRecords. (Click to see full instructions)\r
      U3 - Read Record - 1.6_instruction: |
        Console.log the records returned by a
        call to readRecords. (Click to see full instructions)\r
      U3 - Read Record - 1_instruction: |
        Console.log the records returned by a call
        to readRecords. (Click to see full instructions)\r
      U3 - Read Record - 2_instruction: |
        Change the table name so that the records
        are read from the new table.(Click to see full instructions)\r
      U3 - Read Record - 3_instruction: |
        Change the name of the table in a readRecords
        command to read from a table that does not exist. (Click to see full instructions)\r
      U3 - Read Record - 4.1_instruction: |
        Print out each record return from the
        readRecords call individually. (Click to see full instructions)\r
      U3 - Read Record - 4_instruction: |
        Print out each record return from the readRecords
        call individually. (Click to see full instructions)\r
      U3 - Read Record - 5 and half_instruction: |
        Print out the name of each movie
        in the records return from the readRecords call. (Click to see full instructions)\r
      U3 - Read Record - 5_instruction: |
        Print out the name of each movie in the
        records return from the readRecords call. (Click to see full instructions)\r
      U3 - Return Values - constrainTurtle_instruction: |
        Use constrain in this simple
        app to keep the turtle from driving off the screen.  (Click to see full instructions)
      U3 - Return Values - debuggingConstrain_instruction: |
        Correct the error in
        constrain so that it returns the appropriate value.  (Click to see full instructions)
      U3 - Return Values - debuggingMaxVal_instruction: |
        Correct the error in maxVal
        so that it correctly reports the maximum value.  (Click to see full instructions)
      U3 - Return Values - debuggingReturns_instruction: |
        Correct the error in maxVal
        so that it correctly reports the maximum value.  (Click to see full instructions)
      U3 - Return Values - increase1_instruction: |
        Call the increase function within
        moveForward, write, and console.log.  (Click to see full instructions)
      U3 - Return Values - increase2_instruction: |
        Change the increase function to
        return 3 times the input value. (Click to see full instructions)
      U3 - Return Values - min1_instruction: |
        Test out the return values of the findMax
        function.  (Click to see full instructions)
      U3 - Return Values - useFindMin_instruction: |
        Call findMin within the console.log
        statement to calculate the minimum of two values.  (Click to see full instructions)
      U3 - Return Values - useMinVal_instruction: |
        Call minVal within the console.log
        statement to calculate the minimum of two values.  (Click to see full instructions)
      U3 - Return Values - wrapTurtle_instruction: |
        Write wrap in this simple app
        to let the turtle "wrap" to the other side of the screen when it goes off.  (Click
        to see full instructions)
      U3 - Return Values - writeMaxVal_instruction: |
        Write the function maxVal and
        then use it within the console.log statement to calculate the maximum of two
        values.  (Click to see full instructions)
      U3 - Search Terms - 1_instruction: |
        Create an array of all the movies made
        in 2008 and print it out. (Click to see full instructions)\r
      U3 - Search Terms - 2_instruction: |
        Print out all the movies with year 2008
        using the readRecords search terms. (Click to see full instructions)\r
      U3 - Search Terms - 3_instruction: |
        Print whether or not there are movies matching
        the search criteria (Click to see full instructions)\r
      U3 - Search Terms - 4_instruction: |
        Print whether or not there are movies matching
        the search criteria (Click to see full instructions)\r
      U3 - Search Terms - 5_instruction: |
        Print out the cities that are in California
        or have a population of 2,000,000. (Click to see full instructions)\r
      U3 - Search Terms - 6_instruction: |
        Print out the cities that are in California
        or have a population of 2,000,000. (Click to see full instructions)\r
      U3 - Simple Drawing - Comments_instruction: Do this
      U3 - Simple Drawing - Ellipse and No Fill_instruction: Do this
      U3 - Simple Drawing - No Fill_instruction: Do this
      U3 - Simple Drawing - Order of Blocks_instruction: Do this
      U3 - Simple Drawing - Personal Drawing_instruction: DO This
      U3 - Simple Drawing - Rectangle_instruction: Do This
      U3 - Simple Drawing - regular polygon_instruction: Do this
      U3 - Simple Drawing - Road Ellipse_instruction: Do This
      U3 - Simple Drawing - Road Rects and Color_instruction: Do This
      U3 - Simple Drawing - Stroke and Stroke Weight_instruction: Do this
      U3 - Simple Drawing - text_instruction: Do This
      U3 - Simple Drawing - X and Y values_instruction: Do This
      U3 - Simulation - 1_instruction: |
        Use a while loop to "flip a coin 10 times"
        and write the values to the screen. (Click to see full instructions)
      U3 - Simulation - 2.1_instruction: |
        Change your looping condition so the simulation
        runs until there are 5 heads flipped. (Click to see full instructions)
      U3 - Simulation - 2.5_instruction: |
        Run your simulation to get the full 10,000
        heads! How long did it take? (Click to see full instructions)
      U3 - Simulation - 2_instruction: |
        Keep track of how many heads (1's) your
        program generates and print the results to the screen. (Click to see full
        instructions)
      U3 - Simulation - 3_instruction: |
        Add functionality that counts how many heads
        in a row are flipped. (Click to see full instructions)\r
      U3 - Simulation - 4_instruction: |
        Update your while loop's condition so the
        the coin flips until there are three heads in a row. (Click to see full instructions)
      U3 - Simulation - 5_instruction: |
        Change your while loop to run until you get
        a streak of 12 heads. How many flips did it take? (Click to see full instructions)
      U3 - Simulation - 6_instruction: |
        Keep adding to your simulation. What do you
        want to explore next? (Click to see full instructions)
      U3 - Simulation - App_instruction: |
        Change your code to run the full simulation
        with 10,000 coins. What was your longest streak of heads? (Click to see full
        instructions)
      U3 - Simulation - Template_instruction: |
        Use a while loop to "flip 10 coins"
        and write them to the screen. (Click to see full instructions)
      U3 - User Input - Save getText To Variable_instruction: |
        Save the age and name
        of the user in variables (Click to see full instructions)
      U3 - User Input - Saving After Input_instruction: |
        Save the age of the user
        in a variable using getText() (Click to see full instructions)
      U3 - User Input and String -  Concat_instruction: |
        Output a message about age
        in a Text Area (Click to see full instructions)
      U3 - Variables - Clicker Game_instruction: |
        Create your improved Chaser-Game
        here. (Click to see full instructions)
      U3 - Variables - Debug Scope_instruction: |
        Why isn't the value of foo changing
        correctly? Make a guess. (Click to see full instructions)
      U3 - Variables - Debugging with Turtle_instruction: |
        Use your new debugging
        techniques to get the code to run correctly (Click to see full instructions)
      U3 - Variables - Decrement_instruction: |
        Decrement the value of the variable.
        (Click to see full instructions)
      U3 - Variables - Identify Variables_instruction: |
        Identify the values printing
        in the terminal with console.log statements. (Click to see full instructions)
      U3 - Variables - Increment_instruction: |
        Use the console.log debugging technique
        to see what is happening in this example. Add another variable and increment
        its value. (Click to see full instructions)
      U3 - Variables - Incrementing Variables_instruction: |
        Create a repeat loop
        for the repeated code and use increment to recreate the original program with
        less lines of code! (Click to see full instructions)
      U3 - Variables - Read Using Turtle_instruction: |
        Create a second set of variables
        for x and y position. Move turtle to that new location. (Click to see full
        instructions)
      U3 - Variables - Reassigning Variables with Console.log_instruction: |
        Add another
        reassignment statement at the end of the code to change the value of the variable
        at second time. (Click to see full instructions)
      U3 - Variables - Set to Expression with Other Variables and Turtle_instruction: |
        (click
        to see full instructions)
      U3 - Variables - Set to Expression with Other Variables_instruction: |
        Write
        an expression that calculates the player's total score and stores it in the
        totalScore variable. The calculation is: the player's points times lives
        divided by the total time. (click to see full instructions)
      U3 - Variables - Set to Expression with Turtle_instruction: |
        (click to see
        full)
      U3 - Variables - Set to Expression_instruction: |
        Test out the new expressions.
        (Click to see full instructions)
      U3 Digital Assistant Design_instruction: |
        Pick a topic for your Digital Assistant
        and create the basic layout with a text input and text area. (Click to show
        full instructions)
      U3 Digital Assistant Set Text_instruction: |
        Have your digital assistant repeat
        back what the user types and include a canned response. (Click to see full
        instructions)
      U3 Digital Assistant Target - Mehal_instruction: |
        Try out a demo of the Digital
        Assistant!
      U3 Digital Assistant Target_instruction: Try out a demo of the Digital Assistant!
      U3 Digital Assistant Template_instruction: This is a project template!
      U3 Digital_instruction: |
        Choose a specialization topic for your digital assistant.
        Create a basic digital assistant that takes the user's input and displays
        back a default response.
      U3 full clicker demo_instruction: Clicker game - Try it out!
      U3 mehal's clone_instruction: Try out a demo of the Digital Assistant!
      U3 Variables consolelog_instruction: |
        Use the write block to display the value
        of size
      U3 Variables misconceptions try it_instruction: |
        Test out your predictions
        from the previous level.
      U3 Variables write_instruction: |
        Use the write block to display the value of
        size
      U3- Variables - Assign Random For Turtle Draw_instruction: |
        Try writing the
        same code in text mode.
      U3- Variables - Changing the Value_instruction: |
        Update the value of 'turnAmount'
        before each moveForward so the turtle turns a different amount each time.
        (Click to see full instructions)
      U3- Variables - Create And Assign_instruction: |
        On one line add a variable
        called "lives" and assign it the value 3. Print it to the console. (Click
        to see full instructions)
      U3- Variables - Text Mode_instruction: |
        1. Switch to text mode and type instructions;
        2. drag blocks out into text mode; 3. experiment with code completion
      U3-Design Mode-ID and Event Handler_instruction: |
        Add an event handler for
        the button using the "Insert and show" link in the Design Mode Events tab.
        (Click to see full instructions).
      U3-Design Mode-ID_instruction: |
        Using the Design Mode Events change the button
        ID and update the code to match. (Click to see detail instructions).
      U3-Design Mode-Image_instruction: |
        Recreate the "Chaser Game" from the last
        lesson using Design Mode. (Click to see full instructions.)
      U313 drag Two Buttons_instruction: |
        Run a program with two buttons that have
        the same id to see the warning message in the console. Change the ids to make
        the program run without getting a warning message.
      U313 eventsDetails_instruction: |
        Run a program with two buttons that have the
        same id to see the warning message in the console. Change the ids to make
        the program run without getting a warning message.
      U313 Two Buttons with Ids_instruction: |
        Predict what will happen. Once you've
        made a prediction, run the code to see what happens. (Click to see full instructions)
      U3L03 - draw rect function_instruction: |-
        Write a function called drawRectangle().\r
        (Click
        to see full instructions)
      U3L03 - draw step_instruction: |
        Write the drawStep function. (Click to see
        full instructions)
      U3L03 choose your own drawing_instruction: |
        Now choose your own!  Pick one
        of the three drawings shown here and attempt to create it on your own, making
        smart decisions about how to break the problem down into re-usable functions.  You
        will review your work with a peer using "procedures peer review rubric."  Check
        it for the requirements.  GIF: U3L3-ProceduresChooseOne.png
      U3L03 Creating Procedures 1_instruction: |
        Write the turnAround() function and
        use it to make the turtle move as depicted. see: U3L03-turnAndDown.gif
      U3L03 Define and use turnAround_instruction: |
        Define a function called turnAround.
        Call the function and then move the turtle forward. (Click to see full instructions)
      U3L03 define turnRight and draw a rectangle_instruction: |
        Define a function
        called right() that turns the turtle to the right. Then use this function
        to draw a rectangle, as shown below. (Click to see full instructions)
      U3L03 Draw a T using turnAround_instruction: |
        Draw a plus sign using the provided
        version of turnAround().  (Click to see full instructions)
      U3L03 draw diamond_instruction: |
        Create a function called drawDiamond() that
        makes use of your previous work to draw the complete diamond. (Click to see
        full instructions)
      U3L03 Three Steps_instruction: |
        Define a function called drawSide() which draws
        three steps and moves the turtle to prepare for the next side (Click to see
        full instructions)
      U3L04 - 3 by 3 with functions_instruction: |
        Make the 3x3 square as efficiently
        as you can. (Click to see full instructions)
      U3L04 - snowflake_instruction: |
        Create the design by breaking it down into
        layers of functions. (Click to see full instructions)
      U3L04 choose your own drawing_instruction: |
        Now choose your own!  Pick one
        of the three drawings shown here and attempt to create it on your own, making
        smart decisions about how to break the problem down into re-usable functions.  You
        will review your work with a peer using "procedures peer review rubric."  Check
        it for the requirements.
      U3L04 diamond solution_instruction: |
        Study this solution to the drawDiamond
        problem.  Notice that the whole program starts by calling drawDiamond() at
        the top.  The program then follows a chain of function calls.  You can trace
        what's happening in the code to see the functions reused.  It's also easy
        to read because the function names describe the expected behavior.
      U3L05_3x3GridEfficiencyChallenge_instruction: |
        Let's revisit the 3x3 grid
        problem you did a few lessons ago.  This time the challenge is to program
        the solution "as efficiently as possible."  Now that you know how to write
        functions, it should be easier to break the problem down, and your code should
        be easier to read and debug.  See the rubric for more details about requirements
        and expectations.
      U3L05_draw3x3GridEfficiently_instruction: |
        Draw a 3x3 grid above and to the
        right of the turtle. Try to do so with the fewest number of commands possible.
        NOTE: This is a very challenging problem.  You may need to play with it for
        a while and tweak it.  You might also consider using pencil and paper to sketch
        your ideas.
      U3L06 - moveForwardwithParams_instruction: |
        Use a single command to move the
        turtle to the edge of the screen. (Click to see full instructions)
      U3L06 Challenge 1 triangle_instruction: |
        Use the parameterized versions of
        the turtle commands to create a triangle with sides 100 pixels long. (Click
        to see full instructions)
      U3L06 Challenge 2 purple square_instruction: |
        Read the documentation for penColor()
        and penWidth() before using them to draw the blue square.
      U3L06 Challenge 3 fill pink_instruction: |
        Fill in the background of the screen
        with your favorite color. (Click to see full instructions)
      U3L06 Challenge 4 bullseye_instruction: |
        Create the bullseye using hexadecimal
        colors and dot(). (Click to see full instructions)
      U3L06 Challenge 5 overlapping circles_instruction: |
        This image is created just
        using dot() and penColor() but, how are we going to get those circles to be
        transparent?  If you haven't gotten the hint yet: check out the documentation!
      U3L06 Challenge 6 squiggles_instruction: "Read the documentation for the \"arcLeft\"\nand
        \"arcRight\" commands and then draw the squiggles as shown. \n"
      U3L06 Challenge 7 smiley face_instruction: |
        Use turnTo() and moveTo() to help
        draw a smiley face. (Click to see full instructions)
      U3L06 Challenge 8 make your own_instruction: |
        Create a drawing of your own.
        (Click to see full instructions)
      U3L07 - allSeaGrass_instruction: |
        Add 50 pieces of seagrass to the image by
        writing drawAllSeagrass with a loop. (Click to see full instructions)
      U3L07 - bubbles_instruction: |
        Add 200 bubbles to the image by writing drawAllBubbles
        with a loop. (Click to see full instructions)
      U3L07 - callingFunctionsInLoops_instruction: |
        Call the function within the
        loop to complete the figure. (Click to see full instructions)
      U3L07 - createTriangleParam_instruction: |
        Define a function that accepts a
        parameter to match the function calls and complete the image. (Click to see
        full instructions)
      U3L07 - fish_instruction: |
        Add 15 fish to the image by writing drawAllFish
        with a loop. (Click to see full instructions)
      U3L07 - Free Play Loops and Random_instruction: |
        Free Play! Use what you learned
        from loops and random to make your own little scene. Have fun.
      U3L07 - introSquare_instruction: |
        Use a loop to draw a square. Then add another
        loop to draw many squares each one rotated some amount. (Click to see full
        instructions)
      U3L07 - loopsWithRandom_instruction: |
        Increase the number of iterations to
        fill the screen with white. (Click to see full instructions)
      U3L07 - randomDots1_instruction: |
        Increase the number of iterations to fully
        fill the screen with random dots. (Click to see full instructions)
      U3L07 - randomSquare_instruction: |
        Draw the figure using a loop. (Click to
        see full instructions)
      U3L07 - seaGrass_instruction: |
        Add a parameter to drawSeagrass that controls
        the number of waves in the grass. (Click to see full instructions)
      U3L07 - seaStar_instruction: |
        Add 5 sea stars to the image by writing drawAllSeaStars
        with a loop. (Click to see full instructions)
      U3L07 - Starry Night Starter Code_instruction: "You are going to use loops\nand
        random numbers to generate an image of starry night sky similar to one\nshown
        here.  We have given you some starter code to generate the ground and\nsky
        (just two giant dots), you will add code to this project to make the stars,\ngrass,
        and moon.  All of the effects are clever applications of turtle dots,\nlines,
        and colors.  To get started, follow the series of steps suggested in\nthe
        accompanying worksheet. \n"
      U3L07 - sunBeams_instruction: |
        Add 100 sunbeams to the image by writing drawAllSunbeams
        with a loop. (Click to see full instructions)
      U3L07 - topDownDesign_instruction: |
        Get comfortable with the structure of this
        program, then move on to the next exercise. (Click to see full instructions)
      U3L08 - createTwoParamTriangle_instruction: |
        Define a function called drawTriangle()
        that accepts two parameters to set the size and width of the triangle. (Click
        to see full instructions)
      U3L08 - digitalScene_instruction: |
        Create the functions you were assigned as
        part of your digital scene. (Click to see full instructions)
      U3L08 - drawSquaresWithParams_instruction: |
        Write drawSmallSquare() to draw
        a 25px square. (Click to see full instructions)
      U3L08 - drawSquareWithParam - for video_instruction: |
        Use drawSquare() to recreate
        the image of both squares, this time using parameters. (Click to see full
        instructions)
      U3L08 - drawSquareWithParam_instruction: |
        Use drawSquare() to recreate the
        image of both squares, this time using parameters. (Click to see full instructions)
      U3L08 - Enchantment Under the Sea_instruction: |
        You have been provided with
        starter code for an “Under the Sea” scene which includes three functions,
        one each for the starfish, sea grass, and fish. Create versions of these functions
        which accept parameters to allow you to add more variation to your scene.  The
        student worksheet provides more details and guidance.
      U3L08 - fish_instruction: |
        Add a parameter to drawFish that changes the size
        of the fish drawn. (Click to see full instructions)
      U3L08 - freePlay_instruction: |
        Keep adding to your image by making more calls
        to your new functions with parameters. (Click to see full instructions)
      U3L08 - individualCode_instruction: |
        Create the functions you were assigned
        as part of your digital scene. (Click to see full instructions)
      U3L08 - introUnderTheSea_instruction: |
        Add an extra fish, starfish, and piece
        of sea grass to the image. Look at, but don't change, the functions that
        create them. (Click to see full instructions)
      U3L08 - multiParamFish_instruction: |
        Add three parameters to your drawFish
        function to accept red, green and blue values to make your fish different
        colors. (Click to see full instructions)
      U3L08 - multipleLayersofParams_instruction: |
        Call drawPlusSign() to complete
        the image. (Click to see full instructions)
      U3L08 - paramsToStarfish_instruction: |
        Add a parameter to drawStarfish that
        changes the size of the starfish drawn. (Click to see full instructions)
      U3L08 - randomInput_instruction: |
        Use the randomNumber() blocks to test the
        functions you designed with random input. (Click to see full instructions)
      U3L08 - seaGrass_instruction: |
        Add a parameter to drawSeagrass that changes
        the size of the piece of seagrass drawn. (Click to see full instructions)
      U3L08 - squareTwoParams_instruction: |
        Call drawSquare() to complete the drawing
        of two squares. (Click to see full instructions)
      U3L08 - starFish_instruction: |
        Add an extra fish, starfish, and piece of sea
        grass to the image. Look at, but don't change, the functions that create
        them. (Click to see full instructions)
      U3L08 - triangleTwoParams_instruction: |
        Call drawSquare() to complete the drawing
        of two squares. (Click to see full instructions)
      U3L1 - Simulation - Template_instruction: |
        Use a while loop to "flip 10 coins"
        and write them to the screen. (Click to see full instructions)
      U3L12 Chaser Template_instruction: This is a project template!
      U3L13 - Button with ID_instruction: |
        Drag a button out onto the screen and
        set its text to "Go forth!".  Run the program to make sure you can see the
        button.
      U3L13 - Debug Id plus logic problem_instruction: |-
        The last problem was an example
        of syntax error.  App Lab did not understand which object it should be listening
        to for a "click" event so it showed an error message in the console to let
        you know.  Another kind of error is a logical error - the program is valid,
        but it's not doing what you want it to do.\r
        \r
        This program has 2 errors.
        A (tricky) syntax error and logical error.  Find them, fix them, and make
        the program work as expected.
      U3L13 - Debug Id Problem_instruction: |
        Improve the button by choosing a descriptive
        and meaningful ID. (Click to see full instructions)
      U3L13 - Debugging 1_instruction: |
        Debug the program by verifying your IDs are
        being referenced properly. (Click to see full instructions)
      U3L13 - Debugging 2_instruction: |
        Debug the program by properly ordering your
        button commands and event handlers. (Click to see full instructions)
      U3L13 - Debugging 3_instruction: |
        Debug the program by fixing the logical error
        within the program. (Click to see full instructions)
      U3L13 - Project_instruction: |
        Create your multi-screen app. (Click to see full
        instructions.)
      U3L13 - Turtle Driver Project_instruction: |
        Create a "turtle driver" that
        includes buttons to move the turtle forward and turn it left and right. (Click
        to see full instructions)
      U3L13 - Turtle move with button_instruction: |
        Add a button that moves the turtle
        when clicked.  (Click to see full instructions)
      U3L13 eventsDetails_instruction: |
        Add an event handler to the button to move
        the turtle forward. (Click to see full instructions)
      U3L14 - Assigning Random Value_instruction: |
        Write a program that simulates
        the rolling of two dice and reports their individual values as well as the
        sum. (click to see full instructions)
      U3L14 - concatenate simple_instruction: |
        Modify the write statement on line
        3 to combine text and variables together to make the app display a single
        line of text that shows the player's lives and score. (click to see full
        instructions)
      U3L14 - Mini Calculator embed_instruction: |
        You will be prompted for two numbers,
        one right after the other.  See what happens.  Enter different numbers until
        you get the idea.
      U3L14 - moving memory challenge1_instruction: |
        Using only the variables provided,
        assignment (=) and arithmetic (+ - * /) re-assign the values to make the console.log
        statement display the correct value(s).  (Click to see full instructions)
      U3L14 - moving memory challenge2_instruction: |
        Using only the variables provided,
        assignment (=) and arithmetic (+ - * /) re-assign the values to make the console.log
        statement display the correct value(s).  (Click to see full instructions)
      U3L14 - moving memory challenge3_instruction: |
        Using only the variables provided,
        assignment (=) and arithmetic (+ - * /) re-assign the values to make the console.log
        statement display the correct value(s).  (Click to see full instructions)
      U3L14 - moving memory challenge4_instruction: |
        Using only the variables provided,
        assignment (=) and arithmetic (+ - * /) re-assign the values to make the console.log
        statement display the correct value(s).  (Click to see full instructions)
      U3L14 - moving memory challenge5_instruction: |
        Using only the variables provided,
        assignment (=) and arithmetic (+ - * /) re-assign the values to make the console.log
        statement display the correct value(s).  (Click to see full instructions)
      U3L14 - moving memory challenge6_instruction: |
        Using only the variables provided,
        assignment (=) and arithmetic (+ - * /) re-assign the values to make the console.log
        statement display the correct value(s).  (Click to see full instructions)
      U3L14 - Unfortunate Events Free Play_instruction: |
        Follow the "Unfortunate
        Events" Worksheet and enter your code here to experiment.  We've pre-loaded
        the code you need to start.
      U3L14 - User Input Division calculator_instruction: |
        Write a program that acts
        as a simple calculator. (click to see full instructions)
      U3L14 - Variable ReAssignment pt2_instruction: |
        Trace the code and predict
        what you think will be printed to the console. Then add a console.log statement
        at the end of the program to see the last value of someNum to see if your
        full prediction is correct. (click to see full Instructions)
      U3L15 - add code to make count down work_instruction: |
        Write code to make the
        down arrow work as expected. (Click to see full instructions)
      U3L15 - Add reset button to UpDown app_instruction: |
        Add code so that clicking
        the start over button will reset the game and send you back to the main screen.
        (Click to see full instructions)
      U3L15 - clicker update score_instruction: |
        Add code to update the score when
        the apple is clicked. (Click to see full instructions)
      U3L15 - count upDown bug forget to set text_instruction: |
        Find the bug in the
        program and fix it. (Click to see full instructions)
      U3L15 - count upDown bug logic error wrong update_instruction: |
        Find the bug
        in the program and fix it. (Click to see full instructions)
      U3L15 - count upDown bug var not created globally_instruction: |
        Find the bug
        in the program and fix it. (Click to see full instructions)
      U3L15 - Debug forget to update var on reset in UpDown app_instruction: |
        Run
        the app, and click the up or down button until you get to the gameOverScreen.
        Click 'Start Over' and try the app again. Find and fix the issue in the
        code. (Click to see full instructions)
      U3L15 - Debug if never triggers in UpDown app_instruction: |
        Run the app and
        use the up and down arrows to try to hit the gameOverScreen. You can't! Find
        and fix the issue in the code. (Click to see full instructions)
      U3L15 - Debugging Simple If-statements =v==_instruction: |
        Run the app, and
        click the up button. Then restart and run it again, and click the down button.
        Find and fix the issue in the code. (Click to see full instructions)
      U3L15 - DEMO up down count practice app_instruction: |
        Try out the demo app
        (Click to see full instructions)
      U3L15 - global var example count up_instruction: |
        Look at the code for this
        app and see how the code works to update the count variable when the up arrow
        is clicked. (Click to see full instructions).
      U3L15 - mini clicker update score_instruction: |
        Add code to update the score
        when the apple is clicked. (Click to see full instructions)
      U3L15 - practice with setText_instruction: |
        Use setText to complete the click
        event handler for the down arrow. (Click to see full instructions)
      U3L15 - Simple If-statements in UpDown App_instruction: |
        Add an if statement
        so that the app changes screens when the count reaches -5. (Click to see full
        instructions)
      U3L15 - variable scoping problem debugging_instruction: |
        See if you can figure
        out why the code is no longer working. (Click to see full instructions)
      U3L15 click add lives_instruction: |
        Add lives to the clicker game that decrement
        by 1 when the background image is clicked (Click to see full instructions)
      U3L15 full clicker app_instruction: |
        Complete your clicker game! (Click to
        see full instructions)
      U3L16 - challenge say hi app_instruction: |
        Write a greeting to the user when
        they hit 'enter' in the text input, using the 'change' event. (Click to
        see full instructions)
      U3L16 - chaserApp_instruction: |
        Create your own "Chaser Game." (Click to
        see full instructions)
      U3L16 - chooseImages_instruction: |
        Replace the image in your application with
        one of your own. (Click to see full instructions)
      U3L16 - doubleQuotes_instruction: |
        Save a string inside a variable and log
        it to the console. (Click to see full instructions)
      U3L16 - hideAndShow_instruction: |
        Introducing textInput, getText and write.  First
        run the starter code several times.  Try to change what's written to the
        screen when the button is clicked. Then use getText to write to the screen
        what the user entered in the text box. GIF: U3L16 - useGetText.gif
      U3L16 - hideAndShowPractice_instruction: |
        You are given some starting code
        that puts an image and two buttons on the screen.  The image is initially
        hidden. Add two new event handlers: one for each button, that when clicked
        hide and show the image.
      U3L16 - image and text labels_instruction: |
        Introducing the setPosition command!  Replace
        the moveTo in the button-click event handler to use setPosition to move the
        button itself to a random location when it's clicked.
      U3L16 - images and text labels_instruction: "Introducing objects other than\nbuttons!
        - textLabels and images.  First try replacing your button with a\ntextLabel.
        \ Will the text respond to events just like the button?  Try connecting\nan
        event handler to it.  We've started you out with code similar to the result\nof
        the last level, you can copy your code from that level into here if you\nprefer.
        \n"
      U3L16 - images_instruction: "Introducing Images.  Try replacing the textLabel\nwith
        an image..  Will the image respond to events just like the button?  Try\nconnecting
        an event handler to it.  We've started you out with code similar\nto the result
        of the last level, you can copy your code from that level into\nhere if you
        prefer. \n"
      U3L16 - intro getText_instruction: |
        Add an event handler to the Submit button
        so that when the button is clicked it will display the name entered in the
        text box to the console.  Use getText to get the value out of the text box.
        (Click to see full instructions)
      U3L16 - introSetPosition_instruction: |
        Move the buttons to the bottom of the
        screen. (Click to see full instructions)
      U3L16 - introStrings_instruction: |
        Save a string inside a variable and log
        it to the console. (Click to see full instructions)
      U3L16 - nameAgeTemplate_instruction: |
        Add an Text Input box for the name and
        age. (Click to see full instructions)
      U3L16 - newEventTypes_instruction: |
        Experiment with different event types and
        select the one that you think is best. (Click to see full instructions)
      U3L16 - outputWithTextArea_instruction: |
        Output a message to the 'textArea'
        (Click to see full instructions)
      U3L16 - projectTemplate_instruction: |
        Create your own "Chaser App". (Click
        to see full instructions)
      U3L16 - quick double click_instruction: |
        Mini-Project.  The Quick Double-Click
        game.  In this simple game an object (an image) moves around, or pops up randomly
        on the screen, as the user clicks it.  The goal of our game will be to try
        to double-click the object before it moves.  Part of the challenge (and fun)
        here is creating this app from scratch.  You can look back at your previous
        work for examples, but it's fun to create something from scratch, too.  Try
        it!  For more details see the Activity guide for this lesson.
      U3L16 - setPosition to move button_instruction: |
        Introducing the setPosition
        command! Replace the moveTo in the button-click event handler to use setPosition
        to move the button itself to a random location when it's clicked.
      U3L16 - setPositionMoveButton_instruction: Use setPositon to moveButton
      U3L16 - setupMoveToRandom_instruction: |
        Modify the code so that the turtle
        moves to a random screen location when the button is clicked. (Click to see
        full instructions)
      U3L16 - singleSetPosition_instruction: |
        Move the button to the middle of the
        screen. (Click to see full instructions)
      U3L16 - stringsVsNumbers_instruction: |
        Run the program to see how strings and
        numbers behave with different arithmetic operators. (Click to see full instructions)
      U3L16 - text labels_instruction: |
        Use the textLabel command to replace the
        button in your program with a text label. (Click to see full instructions)
      U3L16 - textInput getText write_instruction: |
        Add an Text Input box for the
        name and age. (Click to see full instructions)
      U3L16 - toUpper_instruction: |
        Make the name of the user appear in uppercase
        (Click to see full instructions)
      U3L16 - use images_instruction: |
        Use the image command to replace the text
        label in your program with an image. (Click to see full instructions)
      U3L16 Mad Lib Clear Input_instruction: "Clear the user's previous text when\nthe
        Play Again button is clicked (Click to see full instructions) \n"
      U3L16 Mad Lib Demo_instruction: Mad Libs Demo - Try it out!
      U3L16 Mad Lib getText_instruction: "Before setting the text area with your\nMad
        Libs outline, get the user's text and incorporate their responses. (Click\nto
        see full instructions) \n"
      U3L16 Mad Lib setText_instruction: "When the Next button is clicked, set the\ntext
        area to have the main outline of your How-to Mad Libs (without the user's\ninput).
        (Click to see full instructions) \n"
      U3L16 Mad Lib Student Setup_instruction: |
        Back to Mad Libs: To get started,
        set up the two screens for your Mad Libs app (Click to show full instructions)
      U3L16 Mad Lib toUpper_instruction: "Apply the toUpperCase and toLowerCase string\nfunctions
        to the user's text. (Click to see full instructions) \n"
      U3L17 - getAndSetKeyValue_instruction: |
        Create an image like app. (Click to
        see full instructions)
      U3L17 - getKeyValue_instruction: |
        Run the program several times to observe
        how the setKeyValue commands now always arrive in order. (Click to see full
        instructions)
      U3L17 - introCallbacks_instruction: |
        Run the program several times to observe
        how the setKeyValue commands now always arrive in order. (Click to see full
        instructions)
      U3L17 - introKeyValue_instruction: |
        Explore your key value pairs with the Data
        Viewer. (Click to see full instructions)
      U3L17 - readKeyValue_instruction: |
        Explore your key value pairs with the Data
        Viewer. (Click to see full instructions)
      U3L17 - setKeyValue_instruction: |
        Create and update your key value pairs using
        setKeyValue. (Click to see full instructions)
      U3L17 - twoSetKeyValue_instruction: |
        Run the program several times to observe
        how often setKeyValue commands arrive out of order. (Click to see full instructions)
      U3L18 comparison operators_instruction: |
        Use console.log to print out the different
        boolean expressions below to see what information they return. (Click to see
        full instructions)
      U3L18 comparison operators_for_video_instruction: |
        Use `console.log` to print
        out the different boolean expressions below to see what information they return.
        (Click to see full instructions)
      U3L19 - Clicker Game Freeplay Area_instruction: |
        Use this App Lab area to improve
        your clicker game.  You should start by copy/pasting the code from your old
        game here.  We're showing a more full set of blocks in the toolbox - some
        of the things you might not have used yet.  Feel free to explore then and
        experiment if you want to.  Everything else you need should be shown.  Have
        fun!
      U3L19 - Debugging with consoleLog_instruction: |
        Add console.log() statements
        to find out the value of a and b after the first reassignment statement a
        = b; (Click to see full instructions)
      U3L19 - DEMO up down count practice app_instruction: |
        Try out the demo app
        (Click to see full instructions)
      U3L19 - do concatenate string with var_instruction: |
        We've given you a piece
        of code from the previous screen.  Try changing the value assigned to foo
        to see the string change. \r
        Do this: \r
        1. Try changing the value assigned
        to foo to see the string change. \r
        2. By only modifying the lines of code
        that were given to you, try to get the output to say: “The value of foo is:
        9.  And isn’t that fine.” \r
      U3L19 - fix the var name syntax error v2_instruction: |
        Fix the error and get
        it to print the value of both variables (Click to see full instructions)
      U3L19 - fix the var name syntax error_instruction: |
        Fix the error and get it
        to print the value of both variables (Click to see full instructions)
      U3L19 - global var example count up_instruction: |
        Look at the code for this
        app and see how the code works to update the count variable when the up arrow
        is clicked. (Click to see full instructions).
      U3L19 - practice with setText_instruction: |
        Add another button that changes
        the text to the value of a new variable. (Click to see full instructions)
      U3L19 - Simple If-statements in UpDown App_instruction: |
        Add an if statement
        so that the app changes screens when the count reaches -5. (Click to see full
        instructions)
      U3L19 - Target Clicker App_instruction: |
        Investigate the new elements of the
        'chaser-game'
      U3L19 - test reassignment of two vars_instruction: |
        Predict the value of a
        and b. Add console.log statements to find out the actual value of a and b.
        (Click for full instructions)
      U3L19 - three basic ops of variables_instruction: |
        Add another variable called
        "lives" and set the value to 3. Print the value of the variable to the console.
        (Click to see full instructions)
      U3L19 - try out console log_instruction: |-
        Try out console.log.  Do this: replace
        the statement write("foo is: " + foo) with console.log("foo is: " + foo).  Run
        the program and you should see the output show up in the console area below
        the workspace.  Then try adding a few more console.log statements.  Display
        some text.  Make another variable and display that.  \r
        The app screen will
        be blank -- that's the point.  With console.log you can test output behind
        the scenes in a way the user cannot see.  \r
        \r
        \r
        GIF: U3L19-useconsolelog.gif
      U3L19 - up down count practice app_instruction: |
        Set up the down button to
        decrease the value of count by 1 each time it is clicked. (Click to see full
        instructions)
      U3L19 - updating variables pt1_instruction: |
        This app is only SLIGHTLY different
        from the previous one, but much more dynamic.  See if you can figure out how
        and why the count is going up.  Once you've figured it out then you should
        be able to DO THIS: add a button to the app that when clicked makes the count
        go down, and updates the label.  When you're done the app should work as
        shown in the demonstration.  GIF: U3L19 - upDownCountApp.gif
      U3L19 - variable reassignment challenge pt2_instruction: |
        Make a prediction
        about the ending values of a, b, and c. Then use console.log to check your
        understanding (Click to see full instructions)
      U3L19 - variable reassignment part 1_instruction: |
        Predict the value of a and
        b. Add console.log statements to find out the actual value of a and b. (Click
        for full instructions)
      U3L19 - variable scope problem 2_instruction: |
        What is happening with foo?
        Play with the level to try to figure it out. (Click to see full instructions)
      U3L19 - variable scoping problem debugging_instruction: |
        See if you can figure
        out why the code is no longer work. (Click to see full instructions)
      U3L19 - write var and string with same name v2_instruction: |
        Fix the code so
        that the values of both variables print to the console. (Click to see full
        instructions)
      U3L19 - write var and string with same name_instruction: |
        Fix the code so that
        the value of both variables prints to the console. (Click to see full instructions)
      U3L2 Using Simple Commands (no tooltips)_instruction: |
        Draw a 1x1 square above
        and to the left of the turtle's starting position. Click to see full instructions.
      U3L2 Using Simple Commands_instruction: |
        Draw a 1x1 square above and to the
        left of the turtle's starting position. Click to see full instructions.
      U3L23 Chatbot Conditionals 1_instruction: |
        Add if, else if, and else statements
        to detect the movie genres Comedy, Romance, Action, and Horror. (Click to
        see full instructions)
      U3L23 Chatbot Intro 1a_instruction: |
        Store the user's input inside a variable
        and log it to the console.
      U3L23 Chatbot Intro 2_instruction: |
        Use string concatenation to store the user's
        input and assistant's answer into the conversation variable using the format
        "User: <input><bot name>: <default response>" . Log the conversation to
        the console.
      U3L23 Chatbot Intro 2a_instruction: |
        Display the conversation onto the "text_area"
        element. Optional: clear the user's input after every "change" event.
      U3L23 Chatbot Intro 3_instruction: |
        Add newline characters "\
        " to separate
        the user's input and the computer's response.
      U3L23 Chatbot Intro 4_instruction: |
        Use this level to make your chatbot look
        and work better!
      U3L23 Chatbot Intro_instruction: |
        Choose a specialization topic for your digital
        assistant. Create a basic digital assistant that takes the user's input and
        displays back a default response.
      U3L23 Digital Assistant 1_instruction: |
        Set the text_area element to display
        the user's input from the text_input element.
      U3L23 Digital Assistant 2_instruction: |
        Add the response "I don't know."
        after each of the user's inputs.
      U3L23 Digital Assistant 3_instruction: |
        Add the response "I don't know."
        after each of the user's inputs.
      U3L23 Digital Assistant 4_instruction: |
        Display the user's input and the digital
        assistant's response on different lines.
      U3L23 Digital Assistant 5_instruction: |
        Start the user's command with the
        phrase "User:" and the digital assistant's response with the phrase "Bot:"
      U3L23 Digital Assistant 6_instruction: |
        When the user hits Run, display the
        text "I'm a generic digital assistant. Ask me anything!"
      U3L24 Basic String Parsing 1_instruction: |
        Use the function "userInput.indexOf(<food>)"
        to check if the strings "pizza" or "soup" are anywhere in the user's
        response.
      U3L24 Chatbot Basic Conditionals_instruction: |
        Check out the project description
        for instructions. (Click to see full instructions.)
      U3L24 Chatbot Conditionals 2_instruction: |
        Adjust the "if" block to make
        the bot respond "I don't know that color." if the user types anything besides
        "blue"
      U3L24 Chatbot Conditionals 3_instruction: |
        Adjust the "if/else" block to
        make the bot respond to the colors blue, red, and green, and to two additional
        colors.
      U3L24 Chatbot Keyword Record_instruction: |
        Use the next level to record your
        digital assistant's keywords/phrases.
      U3L24 Chatbot Nested Conditionals_instruction: |
        Add a chained conditional with
        at least 3 "else if" statements to your personal assistant.
      U3L24 introIncludes_instruction: |
        Practice using the includes command. (Click
        to see full instructions)
      U3L24 Nested Conditionals 1_instruction: |
        Change all of the boolean expressions
        to use includes instead of ==. (Click to see full instructions)
      U3L24 Nested Conditionals 2_instruction: "Nest your movie genre if statements\ninside
        the if statements to check for a ? in the input. \n"
      U3L24 Nested Conditionals Bugs 2_instruction: |
        Fix the problem with the code
        so that all the conditions can be reached. (Click to see full instructions)
      U3L24 Nested Conditionals Bugs 3_instruction: |
        Fix the bugs that still exist
        in this program. Prove that the program works correctly.
      U3L24 Nested Conditionals Bugs_instruction: |
        Expose the bugs in this problem
        by typing inputs into the user-input box. Track which inputs cause unexpected
        outputs.
      U3L25 - drag out key event_instruction: |
        Set up an event handler to respond
        to keypress events, and display event.key in the console. Hit keys on the
        keyboard to see what happens. (Click to see full instructions)
      U3L25 - play sound when up key_instruction: |
        Change the code so the sound will
        only play when the up arrow is pressed. (Click to see full instructions)
      U3L25 Chatbot Strings_instruction: |
        1. Adjust your digital assistant to evaluate
        inputs the same way whether the inputs are capitalized or lowercase. 2. If
        a user asks "What is <phrase>?", where <phrase> is an input your digital
        assistant does not recognize, make your digital assistant respond "I don't
        know what <phrase> is."
      U3L25 String Parsing 1_instruction: |
        Given the string "Wisdom begins with
        wonder." what is the index of the following characters W, t, w, ., d, and
        k? Confirm your expectation using the string.indexOf() function.
      U3L25 String Parsing 2_instruction: |
        Use str.length to find the length of the
        strings “Hello World”, “Computer science rocks!", and “I promise to do my
        homework every day.”
      U3L25 String Parsing 3_instruction: |
        Write a password length checker that writes
        “yes” to the console if a string has a length greater than 10, or “no” if
        it is less than or equal to 10.  Test your function using two strings, one
        that will satisfy each conditional option.
      U3L25 String Parsing 4_instruction: |
        You are given the string "Wisdom begins
        with wonder." Use the string.substring(begin, end) function to print "begin"
        and "nder" to the console.
      U3L25 String Parsing 5_instruction: |
        Fill in the function, findBeginNder()
        to get the strings "begin" and "nder" from a sentence no matter where
        in the sentence they exist.\r
        Print the strings and their index to the console.
      U3L25 String Parsing 6_instruction: |
        Write a function that takes a name (first
        last) and reorders it (last, first).
      U3L25 String Parsing 7_instruction: |
        You are given the string “The earth has
        music for those who listen.” Manipulate it using the functions str.toUpperCase()
        and str.toLowerCase().
      U3L26 AND operator_instruction: |
        Update the genre and rating if statements
        to give only one movie suggestion at a time. (Click to see full instructions)
      U3L26 Chatbot Compound Conditionals_instruction: |
        Update your digital assistant
        to include at least one each of AND, OR, and NOT
      U3L26 Chatbot Final_instruction: |
        Update your digital assistant to include
        at least one each of AND, OR, and NOT
      U3L26 Compound Logic_instruction: |
        Write a conditional statement that detects
        if a command contains all the phrases "2000" "animated" and "G-rated."
        If all these phrases are detected, make Movie Bot respond "The top grossing
        animated and G-rated film in the 2000 decade was Finding Nemo."
      U3L26 NOT operator_instruction: "Write a conditional statement that detects\nif
        a command does not contain the phrase \"bad.\" If \"bad\" is not detected,\nmake
        Movie Bot respond normally. Otherwise, make Movie Bot respond \"Sorry,\nI
        don't know about bad movies.\" \n"
      U3L26 OR operator_instruction: |
        Update the if statement to use an OR to check
        for a "?" as well as who, what, where, when, why, how in the user input.
        (Click to see full instructions)
      U3L27 Chatbot Final_instruction: |
        Make your digital assistant awesome and when
        you are finished, ask one of your classmates to test it for you using the
        activity guide. As you add features to your digital assistant, track them
        on the next level.
      U3L2_Turtle3by3Grid_instruction: |
        Draw a 3x3 grid to the front and right of
        the turtle as efficiently as possible. The turtle should end at its original
        location, facing its original direction. (Click to see full instructions)
      U3L2_TurtleSquare_right_instruction: |
        Draw a square to the front and to the
        right of the starting location. (Click to show full instructions)
      U4 - add createRecord to contacts App_instruction: |
        Add code to your contacts
        app so that newly-added contacts are saved in a table. (Click to see full
        instructions)
      U4 - Add Row By Hand_instruction: |
        Add a new record to your table in the Data
        Viewer. (Click to see full instructions)
      U4 - Charts - drawChartFromRecords 1_instruction: |
        Use the drawChartFromRecords
        block to create a scatter plot from the table in the database. (Click to see
        full instructions)
      U4 - Charts - drawChartFromRecords Options 1_instruction: |
        Add a title to your
        chart and change the colors of your lines using the options parameter of drawChartFromRecords.
        (Click to see full instructions)
      U4 - Charts - drawChartFromRecords Options 2_instruction: |
        Look through the
        drawChartFromRecords API and choose some more options to customize. (Click
        to see full instructions)
      U4 - Charts - drawChartsFromRecords 1_instruction: |
        Add screen element, pull
        out drawCharts block, run the program!
      U4 - Charts - Export Data_instruction: |
        Export the data from the “ages” table
        as a CSV file, then remix this app and import the CSV file. (Click to see
        full instructions)
      U4 - Charts - Import Data 1_instruction: |
        Download the CSV file we’ve provided,
        and then use the data viewer to import the data from the file into the “mytable”
        table. (Click to see full instructions)
      U4 - Charts - Import Data 2_instruction: |
        Call readRecords on “mytable” and
        print each record to the console. (Click to see full instructions)
      U4 - Charts - Line Chart 1_instruction: |
        Create a line chart showing the change
        in popularity of “#tbt” over time. (Click to see full instructions)
      U4 - Charts - Line Chart 2_instruction: |
        Add a second line to your chart to
        show the change in popularity of both “#tbt” and “#nofilter” at the same time.
        (Click to see full instructions)
      U4 - Charts - Line Chart Template_instruction: This is a template.
      U4 - Charts - Remixing Apps with Data_instruction: |
        Run this app and see what
        it prints to the console. Then remix the app and run the remixed version to
        see what happened to the data. (Click to see full instructions)
      U4 - Charts - Scatter Chart_instruction: |
        Create a scatter plot of the “rottenTomatoes”
        table, using the new table and column names. (Click to see full instructions)
      U4 - CreateRecord - 1_instruction: |
        Add a createRecord command and run the
        program. (Click to see full instructions)
      U4 - CreateRecord - 2.5_instruction: |
        Change the table name in createRecord
        then check the Data Viewer to see the new table. (Click to see  full instructions)
      U4 - CreateRecord - 2_instruction: |
        Change the name from "Alice" to something
        else in the createRecord command.  Run the program and use the Data Viewer
        to see the changes to your table. (Click to see full instructions)
      U4 - CreateRecord - 3_instruction: |
        Use createRecord to add the song object
        as a record to a table. (Click to see full instructions)
      U4 - CreateRecord - 4_instruction: |
        Run the program. Verify the song object
        was added to the database. Note the callback function now displays the copy
        of the record sent back back by the database. (Click to see full instructions)
      U4 - CreateRecord - 5_instruction: |
        Add a property to the JavaScript object,
        then run the program.  View the data table and see how changing the object
        affects the data table. (Click to see full instructions)
      U4 - debug column names are case sensitive_instruction: |
        Change song.title
        to song.Title (capital T).  And run the program.  Check the data table  (Click
        to see full instructions)
      U4 - deleteRecords 0_instruction: |
        Use the deleteRecord command with default
        values. Verify the record was deleted. (Click for full instructions).
      U4 - deleteRecords 1_instruction: |
        Find the id of "Little Bunny Foo Foo"
        in the data table "mySongs".  Use the deleteRecord command to delete it.  See
        what happens when you try to delete an ID a second time. (Click for full Instructions).
      U4 - deleteRecords 2 delete object_instruction: |
        Use the song object to delete
        multiple objects in the database by changing only the "id" property. (Click
        for full Instructions).
      U4 - deleteRecords 2_instruction: |
        Using the data viewer, find the id of a
        a record you want to delete. Use the deleteRecord command to delete it. (Click
        for full instructions).
      U4 - Edit Data Table by Hand_instruction: |
        View the data table and click edit
        next to each row.  Add the artists names for each song by hand. (Click to
        see full instructions)
      U4 - Exploring Data Tools - Template_instruction: |
        Use createRecord to add
        the song object as a record to a table. (Click to see full instructions)
      U4 - fix contacts by hand in data table_instruction: |
        Use the data viewer to
        add rows to the data table.  Add the original hard-coded contacts from your
        app to the database. (Click to see full instructions)
      U4 - last stage test adding contcts_instruction: |
        Confirm that new contacts
        you add are saved to the database.  Verify that after restarting your app,
        the contacts you added no longer show in the app, but still exist in the database.
        (Click to see full instructions)
      U4 - Objects - accessingPropertiesInArray_instruction: |
        Access the properties
        of the objects stored in an array. (Click to see full instructions)
      U4 - Objects - arraysOfObjects_instruction: |
        Create an array called "students"
        and add all 5 student objects to the array. (Click to see full instructions)
      U4 - Objects - createContactObject_instruction: |
        Construct a new object from
        the user inputs, and append it to your array. (Click to see full instructions)
      U4 - Objects - createContactsData_instruction: |
        Add values to the three contact
        objects provided in the starter code. (Click to see full instructions)
      U4 - Objects - createDotNotation_instruction: |
        Create a student Object yourself.
        Add properties to your object one at a time using dot notation. (Click to
        see full instructions)
      U4 - Objects - createObject_instruction: |
        Create an object with at least 3
        properties and display it in the Debug Console. (Click to see full instructions)
      U4 - Objects - dotNotation_instruction: |
        Use dot notation to display individual
        properties of the object. (Click to see full instructions)
      U4 - Objects - eventHandlersToSwitchScreen_instruction: |
        Attach event handlers
        to the "Add Contact" and "Go Back" buttons that allow the user to switch
        screens. (Click to see full instructions)
      U4 - Objects - eventParameter_instruction: |
        Trigger both the keyboard and mouse
        event and examine the event objects displayed in the console. Why might an
        object be the best way to store this information? (Click to see full instructions)
      U4 - Objects - exemplarContactsApp_instruction: |
        Use the Contacts app and then
        add a contact of your own. (Click to see full instructions)
      U4 - Objects - loopingArray_instruction: |
        Loop over your array of students
        and print the name of every students. (Click to see full instructions)
      U4 - Objects - loopingArray2_instruction: |
        Loop over your array of students
        and print the name and grade of every student. (Click to see full instructions)
      U4 - Objects - loopingCompoundConditions_instruction: |
        Loop over the array
        of students and display the information of students who are present and in
        the 11th grade. (Click to see full instructions)
      U4 - Objects - loopingConditions_instruction: |
        Loop over your array of student
        objects and display the names of every student who is present in class. (Click
        to see full instructions)
      U4 - Objects - pullValues_instruction: |
        Create an event handler for the "Save
        Contact" button that displays the contents of the 4 text input fields in
        the console. (Click to see full instructions)
      U4 - Objects - readStarterCode_instruction: |
        Familiarize yourself with the
        starter code and UI elements provided. (Click to see full instructions)
      U4 - Objects - resetIndexAndShow_instruction: |
        Add code to your event handler
        for the "Save Contact" button so that when a new contact is added, the inputs
        are cleared, the screen is switched, and the correct contact is shown. (Click
        to see full instructions)
      U4 - Objects - showContact1_instruction: |
        Add code to the showCurrentContact
        function to show the name of the contact stored at the currentIndex of your
        array. (Click to see full instructions)
      U4 - Objects - showContact2_instruction: |
        Add the phone number and birthday
        text to your text area. (Click to see full instructions)
      U4 - Objects - showContact3_instruction: |
        Display the image information for
        each contact. (Click to see full instructions)
      U4 - Objects - showSampleImage_instruction: |
        Attach an event handler to the
        image URL text input so that the user can confirm their image will work as
        expected. (Click to see full instructions)
      U4 - Objects - writeWrap_instruction: |
        Use the wrap function to prevent currentIndex
        from leaving the bounds of your array. (Click to see full instructions)
      U4 - Read Record - 1.2_instruction: |
        Place a console.log command below the
        readRecords command. (Click to see full instructions)\r
      U4 - Read Record - 1.3_instruction: |
        Add a console.log command inside the callback
        function. (Click to see full instructions)\r
      U4 - Read Record - 1_instruction: |
        Use console.log to display the records returned
        by a call to readRecords. (Click to see full instructions)\r
      U4 - Read Record - 2_instruction: |
        Change the table name so that the records
        are read from the new table. (Click to see full instructions)\r
      U4 - Read Record - 3_instruction: |
        Change the name of the table in a readRecords
        command to read from a table that does not exist. (Click to see full instructions)\r
      U4 - Read Record - 4.1_instruction: |
        Use indexes and dot notation to reference
        values in the response from the database. (Click to see full instructions)\r
      U4 - Read Record - 4_instruction: |
        Print out each record return from the readRecords
        call individually. (Click to see full instructions)\r
      U4 - Read Record - 5_instruction: |
        Using a for loop, display the title of each
        movie in your database. (Click to see full instructions)\r
      U4 - Read Record - part 1 - template_instruction: |
        Use console.log to display
        the records returned by a call to readRecords. (Click to see full instructions)\r
      U4 - ReadRecords - Contacts App 1_instruction: |
        Use readRecords to copy the
        data in your database into your "contacts" global variable and call showCurrentContact.
        (Click to see full instructions)
      U4 - ReadRecords - Contacts App 2_instruction: |
        Create a function called refreshLocalData.
        (Click to see full instructions)
      U4 - ReadRecords - Contacts App 3_instruction: |
        Add a call to "refreshLocalData"
        to the callback function of the createRecord you use to add a new contact
        to your database. (Click to see full instructions)
      U4 - ReadRecords - Contacts App 4_instruction: |
        Create a "Delete" button.
        (Click to see full instructions)
      U4 - ReadRecords - Contacts App 5 make delete work_instruction: |
        Create an
        event handler for the "Delete" button you created. (Click to see full instructions)
      U4L02 - Objects - createObject_instruction: "Create an object with at least\n5
        values including at least one string and one number. (Click to see full\ninstructions)
        \n"
      U4L02 - Objects - eventParameter_instruction: |
        Trigger both the keyboard and
        mouse event and examine the event objects displayed in the console. Why might
        an object be the best way to store this information? (Click to see full instructions)
      U4L02 - Objects - Template1_instruction: "Șablon"
      U4L06 Data Storage 1_instruction: |
        Fill in your name instead of "Enter Your
        Name", run the app and click the button. Run it multiple times with different
        names! Watch the console and use the ‘View Data” button to see how the table
        is updated. As you play around make sure you can explain the purpose of each
        of the circled parts of the diagram.\r
        \r
      U4L06 Data Storage 2_instruction: "The app is a continuation of the previous\none
        we started. Add a text label to collect the users name and use that as\nthe
        data input for the record.\\r\n\\r\nRun the app and click the button multiple\ntimes
        and see what happens. Is there a problem you notice? "
      U4L06 Data Storage 3_instruction: |
        We want to improve the user experience.
        Once they have submitted their data for storage, it would be nice to clear
        the textbox.  Update your app to clear the textbox after the data is stored.
      U4L06 Data Storage 4_instruction: |
        Add a label and drop down box, to your app
        and save the data to your JSON object and add it to your table. Make sure
        to reset the dropdown after the data is stored.
      U4L06 Data Storage 5_instruction: "Add a couple radio buttons or checkboxes\nto
        our app. Then find a way to collect the data from those. \n"
      U4L06 Data Storage 6_instruction: " Use one of the getTime() and getUserId()\nblocks
        to collect additional data. \n"
      U4L06 Data Storage 7_instruction: |
        Add a second screen to the sample app we
        have been building to capture an image from a user. Return to screen 1 after
        the JSON object has been stored in the table.
      U4L15 Read Data 1_instruction: |
        Run the level and see what happens. Then edit
        the code to make it print a different column of information.
      U4L15 Read Data 2_instruction: |-
        Student should create a sentence which puts
        together all the pieces from a record.\r
        \r
        <<Name>> is <<Age>> years old
        and like <<Food>>
      U4L15 Read Data 3_instruction: |
        Print the sentence using the first JSON object
        in the array\r
        \r
      U4L15 Read Data 4_instruction: |-
        \r
        Use a random record from the list of records
        to display your sentence.
      U6 - Final Project - Project Level_instruction: |
        Build your final project here.
        (Click to see full instructions)
      U6 - updateRecord - Callback Success Parameter_instruction: |
        Add an if-else
        block inside the callback function for updateRecord. (Click to see full instructions)
      U6 - updateRecord - Contacts - Edit event handler_instruction: |
        Write event
        handlers for the Edit Contacts UI elements. (Click to see full instructions)
      U6 - updateRecord - Contacts - Edit UI_instruction: |
        Set up the UI elements
        needed to edit contacts. (Click to see full instructions)
      U6 - updateRecord - Contacts - Save edited contact_instruction: |
        Use updateRecord
        to store the user's edits in the database. (Click to see full instructions)
      U6 - updateRecord - Default Block_instruction: |
        Use updateRecord to change
        the record for "Eye of the Tiger." (Click to see full instructions)
      U6 - updateRecord - Update Nonexistent Record_instruction: |
        Force updateRecord
        to fail by changing the ID of songToUpdate. (Click to see full instructions)
      Underground Avoiding Lava_instruction: Sub aceste blocuri se gaseste lava, pe
        care trebuie sa o acoperi inainte sa mergi inainte. O comanda "Daca" ar fi
        de ajutor aici. Adauga o comanda "Mergi inainte" in locul corect pentru a
        acoperi aceste blocuri.
      Underground If Statements_instruction: Acum lucrurile devin mai dificile. Aduna
        3 pietre rosii, dar fara sa cazi in lava. Foloseste o comanda "daca" pentru
        a acoperi lava cu piatra.
      Underground Iron_instruction: A merge in lava topita este o idee rea. Plaseaza
        placi de gresie pentru a crea un pod, apoi aduna cel putin 2 dintre blocurile
        de fier.
      Underground Mine in a Circle_instruction: |
        Gaseste un mod sa aduni 5 diamante si 7 pietre rosii! Incearca sa folosesti o comanda "repeta" in interiorul altei comenzi "repeta" pentru a intra in patrat.\r
      Underground Mining Coal_instruction: Vei gasi cele mai valoroase resurse in
        subteran, dar se poate face intuneric. Plaseaza cel putin 2 torte si cauta
        cel putin 2 carbuni.
      Underground Test Level_instruction: Colecteaza toate mineralele!
      Vigenere_instruction: Test
      XML Scratchpad_instruction: Using this test level to grab xml for unit tests
