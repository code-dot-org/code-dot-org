"es-MX":
  data:
    instructions:
      2-3 Artist 1 new_instruction: Qué tal! Soy un artista. Tú puedes escribir en
        código para hacerme dibujar casi cualquier objeto. Usa unos cuantos bloques
        sobre las líneas grises de la imagen. (Cada línea es de 100 pixeles de largo)
      2-3 Artist 11_instruction: "Dale a la señal de alto un borde haciendo un octágono
        (8 lados), cada uno de 100 pixeles de largo. ¿Cuántos grados debe girar?\n(Tip:
        ¿Cuánto es 360 dividido entre 8?) \n"
      2-3 Artist 12_instruction: Establece el bloque "Repetir" para crear un "círculo"
        y terminar el ojo. Si cada movimiento gira a la derecha en un grado, ¿Cuantas
        veces tienes que repetir para completar un círculo? ¿180, 360 o 500?
      2-3 Artist 2 new_instruction: 'Esta casa tiene una pared a medio terminar. Cada
        lado es de 100, pero el lado sin terminar es solamente 50. Completa el muro. '
      2-3 Artist 2_instruction: Esta casa tiene una pared a medio terminar. Cada lado
        es 100, pero la pared a medio terminar es sólo 50. Termine la pared.
      2-3 Artist 3.4_instruction: El bloque saltar mueve al artista sin dibujar. Dibuja
        la línea discontinua utilizando los bloques de saltar y de mover.
      2-3 Artist 3_instruction: Este sombrero tiene 100 pixeles de alto. Dibuja un
        sombrero que tenga 70 pixeles o menos.
      2-3 Artist 3new_instruction: El sombrero rojo tiene 100 pixeles de alto. Termina
        de dibujar un sombrero negro que tiene 70 pixeles menos. El ancho del sombrero
        negro es de 50 pixeles.
      2-3 Artist 4_instruction: Ayúdame a completar la casa para este gato.
      2-3 Artist 5_instruction: Sustituye este código con el bloque "Repetir" para
        dibujar la misma casa usando sólo 3 bloques.
      2-3 Artist 6_instruction: "¡Esta casa necesita un techo! Dibuja el triángulo.
        Pista: Los 3 lados tienen la misma longitud."
      2-3 Artist 7_instruction: "Termina de dibujar la mitad derecha de la ultima
        ventana.\nCada cuadrado de la ventana mide 25 pixeles. \n"
      2-3 Artist 8_instruction: Completa las habitaciones para cada uno de los animales
        dividiendo el rectángulo en 2 cuadrados del mismo tamaño. El rectángulo mide
        200 pixeles de ancho y 100 pixeles de alto.
      2-3 Artist 9_instruction: Termina este cometa
      2-3 Artist Assessment 1_instruction: 'Evaluación: Termina de dibujar el último
        diente, 25 píxeles de ancho y 25 píxeles de alto.'
      2-3 Artist Debugging 1_instruction: "¿Puedes hacer este sombrero con una longitud
        máxima de 100?"
      2-3 Artist Debugging 10_instruction: 'El pad de dirección en mi control es demasiado
        angosto. Sugerencia: Hazlo 10 pixeles mas ancho'
      2-3 Artist Debugging 11_instruction: |
        Ayúdame a terminar mi hermoso copo de nieve.
        ¿Cuantas veces necesito "Repetir" para finalizarlo?
      2-3 Artist Debugging 12_instruction: Tengo que añadir una ola oceánica a esta
        escena.  ¿Me puedes ayudar?
      2-3 Artist Debugging 2_instruction: 'El código para los tres hilos que tu ves
        esta mal: cada hilo tiene 75 pixels de largo. arregla este código para mover
        los hilos.'
      2-3 Artist Debugging 3_instruction: "¡Mi bote tiene un agujero! ¿Podrías repararlo
        cambiando el ángulo de la línea? Pista: el último ángulo se pasó 15 grados."
      2-3 Artist Debugging 4_instruction: "¿Qué imagen tratamos de representar?. Termina
        de unir los puntos usando los ángulos y lineas adecuados."
      2-3 Artist Debugging 5_instruction: 'El código para la pierna y el pie está
        equivocado. Sugerencia: El pie es demasiado largo, tal vez necesitemos eliminar
        un paso (juego de palabras intencional)'
      2-3 Artist Debugging 6_instruction: Parece que estoy sentado en una silla a
        la que le falta una pata. Edita los bloques para dibujar la pata.
      2-3 Artist Debugging 7_instruction: |
        Parece que la "C" en código está dibujada al revés.
        ¿Puedes hacer que parezca una "C"?
      2-3 Artist Debugging 8_instruction: Mi molinillo no está terminado. ¿Cuántas
        veces necesito repetir para terminarlo?
      2-3 Artist Debugging 9_instruction: 'El código de este tallo es incorrecto.
        Sugerencia: El ángulo está equivocado por 60 grados'
      2-3 Artist Debugging Assessment 1_instruction: 'Esta figura está muy pequeña.
        ¿Puedes hacerla más grande? Pista: debería ser 75 píxeles más larga en cada
        lado.'
      2-3 Artist Free Play_instruction: "¡Juego libre! Dibuja lo que quieras."
      2-3 Artist Functions 1_instruction: 'Hola. Yo artista zombie. ¡Yo gusta dibujar!
        Ayúdame a dibujar las gafas cuadradas. Pista: El puente de enmedio de las
        gafas es 25 píxeles más corto que el largo del cuadrado.'
      2-3 Artist Functions 10_instruction: Aquí hay dos funciones, una para dibujar
        un engrane grande y una para dibujar un engrane pequeño. ¡Usalas para dibujar
        la parte interior de una máquina!
      2-3 Artist Functions 11.5_instruction: Aquí está la misma función "Dibuja un
        hexágono". ¿Que pasa si sólo giras 60 grados en cada iteración?
      2-3 Artist Functions 11_instruction: Hemos renombrado la función "dibuja un
        cuadrado" a "dibuja un hexágono", ¡pero sigue dibujando cuadrados! ¿Puedes
        modificar la función "dibuja un hexágono" para que dibuje un hexágono con
        50 pixeles por cada lado y que dibuje la imagen usando la función?
      2-3 Artist Functions 12_instruction: 'Las funciones son geniales para dibujar
        cosas complejas varias veces. ¿Puedes utilizar la función "dibujar una flor"
        para llenar el resto de la jardinera?. (Pista: las plantas están separadas
        por una longitud de 100 píxeles)  '
      2-3 Artist Functions 13_instruction: Te hemos dado cuatro funciones. Úsalas
        de la manera que quieras dentro de uno o más bucles para crear imágenes que
        puedas compartir con tus amigos. Presiona ejecutar para ver un ejemplo.
      2-3 Artist Functions 2_instruction: ¡Las funciones permiten definir nuevos bloques!
        Hemos movido los bloques para dibujar un cuadrado a la función denominada
        "dibuja un cuadrado". ¿Puedes utilizar la función "dibuja un cuadrado" para
        crear las gafas? Los cuadrados están separados por 75 píxeles.
      2-3 Artist Functions 3_instruction: Edita la función para dibujar un cuadrado
        con una longitud de 115 por lado y dibuja los anteojos más grandes. los cuadrados
        están ahora separados 45 píxeles.
      2-3 Artist Functions 4_instruction: Usa el bloque "repetir" para dibujar estos
        3 cuadrados.
      2-3 Artist Functions 7_instruction: 'Usa la función "dibujar una casa" para
        dibujar dos casas utilizando diferentes parámetros.(pista: la primera casa
        es de 100 píxeles).'
      2-3 Artist Functions 9_instruction: Esta es una función copo de nieve. Experimenta
        con ella para crear una escena de invierno! Este es un nivel de juego libre,
        así que no hay rompecabezas que resolver. ¡Divierte!
      2-3 Artist Loops 1_instruction: "¿Podrías hacer un hexágono que sus lados midan
        100 pixeles de largo para terminar la célula? ¡Recuerda, eso significa que
        sólo deberás girar 60 grados!"
      2-3 Artist Loops 10_instruction: "¿Qué pasa con el diseño cuando hacemos que
        nuestro último paso hacia adelante la mitad de largo?"
      2-3 Artist Loops 11_instruction: Ahora vamos a poner * otro * bucle alrededor
        de toda la creación!  No olvide añadir un ángulo al final del bucle externo.
      2-3 Artist Loops 2_instruction: Ahora, usa un bloque de repetición para que
        la célula se convierta en una concha.
      2-3 Artist Loops 4_instruction: "¿Quieres ver que pasa cuando repetimos esa
        forma una y otra vez usando un ciclo?"
      2-3 Artist Loops 5_instruction: Ahora hagamos un pequeño cambio al bucle y veamos
        que tan diferente se ve nuestra imagen.
      2-3 Artist Loops 6_instruction: Añade un movimiento más y otra vuelta dentro
        de la iteración y ve cómo cambia tu diseño.
      2-3 Artist Loops 7_instruction: Podemos usar bucles para hacer todas clase de
        polígonos.  ¿Puedes crear un rombo dentro de este hexágono?
      2-3 Artist Loops 8_instruction: Pongamos ambos elementos dentro de un ciclo.
      2-3 Artist Loops 9_instruction: |-
        Vamos a iterar sobre los mismos elementos, pero ahora vamos a añadir algo de separación entre ellos. \r
        Usa el mismo código de antes pero añade un paso mas al final del bucle exterior.
      2-3 Artist Loops New 1_instruction: "¡Dibujemos la cabeza de este robot! ¿Puedes
        hacer un cuadrado con lados de 100 píxeles?"
      2-3 Artist Loops New 10_instruction: Ahora conectemos un montón de V juntos,
        dibujándolos en un bucle.
      2-3 Artist Loops New 11_instruction: Esta vez vamos a dibujarlo 24 veces. Añade
        un giro a la izquierda de 30 grados a este código y ponlo todo en un bloque
        de repetición.
      2-3 Artist Loops New 12_instruction: |
        Dibuja un diamante con lados de 100 píxeles.
      2-3 Artist Loops New 13_instruction: Ahora dibuje el diamante 3 veces en un
        bucle.
      2-3 Artist Loops New 14_instruction: Ahora a dibujar el diamante 10 veces pero
        gire 90 grados entre cada diamante.
      2-3 Artist Loops New 15_instruction: Dibuja algo divertido.
      2-3 Artist Loops New 2_instruction: Aquí está parte del código utilizado para
        dibujar ese cuadrado. ¿Qué sucede si utilizas el bloque de repetición para
        ejecutar este código 4 veces?
      2-3 Artist Loops New 9_instruction: Dibujar una "V" simple donde ambos lados
        sean 50 píxeles para completar la flecha.
      2-3 Artist Match Hex Pic_instruction: 'Igualar: Ayuda a terminar el hexágono.'
      2-3 Artist Match Rho Pic_instruction: 'Igualar: Terminar el código faltante.'
      2-3 Artist Match Sq Pic_instruction: 'Igualar: Completa el código faltante'
      2-3 Artist Match Tri pic_instruction: 'Igualando: Completa el código faltante.'
      2-3 Artist Nested Loops 1_instruction: Ya has usado iteraciones para dibujar
        formas antes, pero ¿sabias que puedes poner una iteración dentro de otra iteración?\r\nRepite
        este bloque completo de código 3 veces para dibujar el patrón.
      2-3 Artist Nested Loops 10_instruction: Itera este código 12 veces para completar
        el patrón.
      2-3 Artist Nested Loops 11_instruction: Itera este código 4 veces para completar
        el patrón, gira 90 grados después de cada circulo.
      2-3 Artist Nested Loops 12_instruction: Itera este código 12 veces para completar
        las curvas.
      2-3 Artist Nested Loops 2_instruction: Ahora itera el triángulo 6 veces. Después
        de cada triangulo, necesitaras girar 60 grados antes de dibujar el siguiente.
      2-3 Artist Nested Loops 3_instruction: Necesitaras iterar el triangulo 12 veces
        para dibujar este patrón. Divide el numero de grados en un circulo (360) por
        el numero de formas que estas dibujando (12) para determinar cuánto debes
        girar después de cada forma.
      2-3 Artist Nested Loops 4_instruction: 'Itera este diamante 12 veces para dibujar
        una flor. Pista: los 12 diamantes son como los 12 triángulos que hiciste,
        ¿cuánto necesitas girar después de cada figura?'
      2-3 Artist Nested Loops 5_instruction: Llena las ventanas de este edificio usando
        una iteración anidada. Las ventanas tienen 20 pixeles de largo y 20 pixeles
        de separación.
      2-3 Artist Nested Loops 6_instruction: Este dinosaurio tiene 8 púas a lo largo
        de su cola; cada púa es de 30 píxeles de largo. Repite los triángulos 8 veces,
        pero asegúrate de avanzar después de cada uno.
      2-3 Artist Nested Loops 7_instruction: Itera este triangulo 10 veces para dibujar
        el sol. Necesitarás moverte y girar después de cada triangulo. Puedes calcular
        cuanto girar dividiendo la cantidad de grados en un circulo por la cantidad
        de figuras que lo componen.
      2-3 Artist Nested Loops 8_instruction: Ahora vamos a agregar un poco de pasto
        a nuestra imagen. Cada manojo de pasto esta separado 50 pixeles.
      2-3 Artist Nested Loops 9_instruction: Terminaremos esta foto agregándole una
        flor. Itera el diamante 12 veces para dibujar tu flor.
      2-3 Artist Nested Loops Free Play_instruction: Juego libre, dibuja algo increíble
        usando iteraciones anidadas.
      2-3 Bee Conditionals 1_instruction: "¡ Hola! Soy una abeja. Ayúdame a obtener
        néctar de la flor."
      2-3 Bee Conditionals 10_instruction: |
        Las flores moradas pueden tener 1 o 0 néctar. Ten cuidado de no recoger néctar de una flor si no tiene.\r
      2-3 Bee Conditionals 11_instruction: Colecta néctar donde las flores tienen
        néctar.
      2-3 Bee Conditionals 12_instruction: "Utiliza un ciclo para revisar y recolectar
        el néctar \nde todas estas flores.\n"
      2-3 Bee Conditionals 13_instruction: 'Recoge néctar y haz miel. Pista: ¿Qué
        ocurre si usas el condicional "Si nectar" en una flor roja? ¿Puedes completar
        esto con un ciclo?'
      2-3 Bee Conditionals 14_instruction: "Colecta néctar y haz miel. Ten cuidado
        \nde no recoger néctar de una flor morada si no tiene.\n"
      2-3 Bee Conditionals 15_instruction: Recoge néctar de las cuatro flores.
      2-3 Bee Conditionals 2_instruction: Hola, soy una abeja! Ayúdame a recoger todo
        el néctar de las flores. Utiliza un ciclo.
      2-3 Bee Conditionals 3_instruction: Ayúdame a recoger todo el néctar de las
        flores y a hacer miel. Usa un ciclo (loop).
      2-3 Bee Conditionals 4_instruction: Ayúdame a recoger todo el néctar de las
        flores y a hacer toda la miel.
      2-3 Bee Conditionals 5_instruction: "Las flores moradas pueden tener 1 o 0 \nnéctar,
        pero no sabes cuál! Ten cuidado de no recoger néctar de \nuna flor morada
        si no tiene. Revisa si el néctar es igual a 1\nutilizando el bloque Si.\n"
      2-3 Bee Conditionals 6_instruction: |
        Checa esta flor con un bloque de "Si"
        para ver si hay néctar disponible.
      2-3 Bee Conditionals 7_instruction: Colecta néctar de cada flor si tiene.
      2-3 Bee Conditionals 8_instruction: |
        Este campo tiene flores rojas y moradas.
        Las flores rojas tienen una cantidad conocida de néctar, pero se desconoce la cantidad de néctar de la flor morada.
        Colecta todo el néctar.
      2-3 Bee Conditionals 9_instruction: Colecta todo el néctar de cada flor.
      2-3 Bee Conditionals Assessment 1_instruction: "Evaluación: Colecta todo \nel
        néctar. Tenga cuidado de no recoger néctar de una flor morada si no tiene.\n"
      2-3 Bee Debugging 1_instruction: Estos bloques realmente me molestan. Correge
        el/los error(s) para recoger todo el néctar y hacer toda la miel.
      2-3 Bee Debugging 10_instruction: |
        Estos bloques realmente me molestan. Corrige
        el/los error(s) para recoger todo el néctar y hacer toda la miel.
      2-3 Bee Debugging 2_instruction: Estos bloques realmente me molestan. Correge
        el/los error(s) para recoger todo el néctar y hacer toda la miel.
      2-3 Bee Debugging 3_instruction: Estos bloques realmente me molestan. Correge
        el/los error(s) para recoger todo el néctar y hacer toda la miel.
      2-3 Bee Debugging 4_instruction: Estos bloques realmente me molestan. Correge
        el/los error(s) para recoger todo el néctar y hacer toda la miel.
      2-3 Bee Debugging 5_instruction: "Estos bloques realmente me molestan. Corrige\nel/los
        error(s) para recoger todo el néctar y hacer toda la miel.  Ahora puedes \nusar
        ejecutar y paso.\n"
      2-3 Bee Debugging 6_instruction: Estos bloques realmente me molestan. Correge
        el/los error(s) para recoger todo el néctar y hacer toda la miel.
      2-3 Bee Debugging 7_instruction: Estos bloques realmente me molestan. Correge
        el/los error(s) para recoger todo el néctar y hacer toda la miel.
      2-3 Bee Debugging 8_instruction: Estos bloques realmente me molestan. Correge
        el/los error(s) para recoger todo el néctar y hacer toda la miel.
      2-3 Bee Debugging 9_instruction: Estos bloques realmente me molestan. Correge
        el/los error(s) para recoger todo el néctar y hacer toda la miel.
      2-3 Bee Debugging Assessment 1_instruction: |
        Evaluación: Estos bloques
        realmente me molestan. Corrige el/los error(s) para recoger todo el néctar y hacer
        toda la miel.
      2-3 Bee Functions 1_instruction: "Las funciones son bloques de código que realizan
        \nuna tarea. Usa la función \"recoge 2 néctar\" para recolectar el néctar
        de cada\nflor.\n"
      2-3 Bee Functions 10_instruction: Las flores moradas pueden tener 1 o 0 néctar.
        Crea una función que recoja el néctar solo de aquellas flores que lo tengan.
      2-3 Bee Functions 2_instruction: "Las funciones son bloques de código que realizan\nuna
        tarea. Utilice la función \"recoge 5\" para obtener 5 néctares a la vez. Asegúrate
        de \nutilizar un ciclo para obtener también un conteo de bloques ideal.\n"
      2-3 Bee Functions 3_instruction: Colecta todo el néctar de cada flor.
      2-3 Bee Functions 4_instruction: La función "mover y recoger néctar" gira la
        abeja, recoge el néctar y devuelve a la abeja al lugar donde empezó. Usa la
        función para recoger todo el néctar.
      2-3 Bee Functions 5_instruction: Ahora hay más néctar en las flores. Edita la
        función dada de manera que recoja 4 néctar y úsala para recoger todo el néctar
        de las flores.
      2-3 Bee Functions 6_instruction: |
        Ahora utiliza la misma función para recoger el néctar
        de las tres flores.
      2-3 Bee Functions 7_instruction: |
        Las flores ahora están más lejos. Edita la
        función dada y úsala para recoger todo el néctar de las flores.
      2-3 Bee Functions 8_instruction: Crea tu propia función que obtiene 7 de néctar,
        avanza hacia adelante y hace 7 de miel. Utiliza la función para recoger néctar
        en cada flor y hacer miel en cada panal de miel.
      2-3 Bee Functions 9_instruction: Crea tu propia función que siga por un camino,
        obtenga néctar, haga miel y luego devuelva la abeja al inicio de la ruta.
      2-3 Bee Functions Assessment 1_instruction: 'Evaluación: Utilice la función
        dada para recolectar néctar de cada flor.'
      2-3 Bee Functions Assessment 2_instruction: 'Evaluación: Crea una función para
        hacer 3 mieles a la vez.'
      2-3 Bee Loops 1_instruction: 'Cada flor contiene una unidad de néctar. Recolecta
        néctar de cada una de las flores. '
      2-3 Bee Loops 10_instruction: ¿Podrías utilizar un ciclo "while" dentro de otros
        dos ciclos para recolectar todo el néctar?
      2-3 Bee Loops 11_instruction: Utiliza ciclos "while" para recolectar todo el
        néctar de las flores en este campo.
      2-3 Bee Loops 12_instruction: Utiliza ciclos "while" para recolectar todo el
        néctar de las flores en este campo.
      2-3 Bee Loops 13_instruction: 'Evaluación: Utiliza el bloque de repetición para
        recolectar todo el néctar.'
      2-3 Bee Loops 1A_instruction: 'Hola, soy una abeja. ¿Me puedes ayudar a recoger
        el néctar de estas flores? '
      2-3 Bee Loops 2_instruction: Usa un ciclo para recolectar el néctar y hacer
        la miel.
      2-3 Bee Loops 2A_instruction: "¿Podrías hacer la misma tarea más fácilmente
        con un ciclo?"
      2-3 Bee Loops 3_instruction: Recolecta el néctar de cada flor y haz miel en
        cada panal.
      2-3 Bee Loops 3A_instruction: "¿Podrías utilizar un ciclo para recolectar todo
        el néctar?"
      2-3 Bee Loops 3B_instruction: Ahora usa el nuevo bloque de repetición para recolectar
        todo el néctar y hacer toda la miel.
      2-3 Bee Loops 4_instruction: Utiliza un bucle (ciclo) similar al que utilizó
        en el último problema, con la diferencia que ahora agregará una vuelta (turn).
      2-3 Bee Loops 4A_instruction: |
        ¿Qué sucede si repite este ciclo (bucle) tres veces?
        ¡No olvide al final agregar la miel!
      2-3 Bee Loops 5_instruction: Utilice el ciclo (bucle) para bajar las escaleras
        y recoger el néctar.
      2-3 Bee Loops 6_instruction: Utilice un bucle (ciclo) para recoger el néctar
        de cada flor y hacer miel en cada panal.
      2-3 Bee Loops 7_instruction: Coloque estos blocks dentro del bucle (ciclo) para
        recolectar el néctar de cada flor.
      2-3 Bee Loops 8_instruction: Estas flores moradas contienen una cantidad desconocida
        de néctar. Utilice el bucle "while nectar" para recolectar el néctar. Este
        bucle va a ejecutarse mientras la condición sea verdadera, en este caso cuando
        Nectar>0.
      2-3 Bee Loops 9_instruction: El bucle "while loop" puede ejecutar la misma función
        que la sentencia "if" en un bucle. Agregue un bucle "while loop" a este código
        para realizar la misma tarea.
      2-3 Bee Loops Assessment 1_instruction: Utilice un bucle "while loop" para recolectar
        todo el néctar de esta flor.
      2-3 Maze 1_instruction: '¿Me puede ayudar a atrapar al cerdo travieso? Apila
        un par de blocks "move forward" y presiona "Run". '
      2-3 Maze 10_instruction: "¡Guíame al demonio verde! (Cuidado con el TNT)"
      2-3 Maze 11_instruction: "¡Tengo hambre, llévame a la flor! ¿Cuántas veces tiene
        que repetir un block?"
      2-3 Maze 12 (copy 1)_instruction: '¿Podría reemplazar la respuesta anterior
        con solo dos blocks? (Sugerencia: Crear un bucle utilizando el block "repeat
        times")'
      2-3 Maze 12 (copy 2)_instruction: '¿Podría reemplazar la respuesta anterior
        con solo dos blocks? (Sugerencia: Crear un bucle utilizando el block "repeat
        times")'
      2-3 Maze 12 (old)_instruction: Lléveme cerca del cerdo. ¡Ahora, con el block
        "Repeat times"!
      2-3 Maze 12_instruction: |
        ¿Podría reemplazar estos cinco blocks con solo dos?
        (Sugerencia: Crear un bucle utilizando el block "Repeat times")
      2-3 Maze 13 (old)_instruction: Llévame con el cerdo, ahora. ¡Utiliza el block
        "Repeat until"!
      2-3 Maze 13_instruction: Llévame al cerdo utilizando solo dos blocks.
      2-3 Maze 14 (old)_instruction: ¡Llévame al cerdo utilizando el block "Repeat
        until"!
      2-3 Maze 14_instruction: ¡Llévame al girasol! (¿Dónde está el block "Repeat
        times" cuando se necesita?)
      2-3 Maze 15 (old)_instruction: ¡Llévame al cerdo utilizando el block "Repeat
        until"!
      2-3 Maze 15_instruction: Utiliza dos bucles para acercarse al cerdo, utilizando
        el menor número de blocks posible.
      2-3 Maze 16 (old)_instruction: ¡Llévame al cerdo utilizando el block "Repeat
        until"!
      2-3 Maze 16 before_instruction: Llévame al cerdo.
      2-3 Maze 16_instruction: Llévame al girasol. ¡Convierta la secuencia en un bucle!
      2-3 Maze 2_instruction: Este cerdo me está colmando la paciencia. ¡Ayúdame a
        atraparlo!
      2-3 Maze 3_instruction: Traza el camino y guíame hasta este cerdo loco. ¡Evite
        TNT o habrá problemas!
      2-3 Maze 4_instruction: "¡Guíame al demonio verde! (Cuidado con el TNT)"
      2-3 Maze 5_instruction: "¡Guíame al demonio verde! (Cuidado con el TNT)"
      2-3 Maze 6_instruction: Manten la calma y ayúdame a encontrar al cerdo malo.
        Sino, puede que me enfade!
      2-3 Maze 7_instruction: "¡Guíame al demonio verde! (Cuidado con el TNT)"
      2-3 Maze 8_instruction: Llévame al cerdo!
      2-3 Maze 9_instruction: "¡Guíame al demonio verde! (Cuidado con el TNT)"
      2-3 Maze Loops 1_instruction: "¿Puedes llevarme hasta el cerdo usando 5 bloques?"
      2-3 Maze Loops 17_instruction: "¡Llévame al girasol!"
      2-3 Maze Loops 18_instruction: "¡Llévame al girasol!"
      2-3 Maze Loops 19_instruction: "¡Llévame al girasol!"
      2-3 Maze Loops 20_instruction: "¡Llévame al girasol!"
      2-3 Maze Loops 21_instruction: "¡Llévame al girasol!"
      2-3 Maze Loops Assessment 1_instruction: 'Evaluación: ¡Llévame al girasol usando
        solo 5 bloques! '
      2-3 Maze sq1_instruction: |
        This pig is ruffling my feathers.  Help me find
        him!
      2-3 Maze sq10_instruction: "¡Llévame hasta el cerdo! ¿Qué bloques se han repetido?"
      2-3 Maze sq10v2_instruction: "¡Llévame hasta el cerdo! ¿Qué bloques se han repetido?"
      2-3 maze sq11_instruction: "¡Llévame hasta el cerdo! ¿Qué bloques se han repetido?"
      2-3 maze sq12_instruction: ¿Podrías reemplazar la respuesta anterior con un
        ciclo usando un bloque de "repeticiones"?
      2-3 maze sq13_instruction: |
        Querida persona. Yo zombie. Debo... llegar... a girasol.
        Crea un ciclo con el bloque "repetir hasta".
      2-3 maze sq14_instruction: "¿Podrías llegar al girasol usando solo cuatro bloques?"
      2-3 maze sq15_instruction: "¿Podrías llegar al girasol usando solo cinco bloques?"
      2-3 maze sq16_instruction: Ok, esto es similar, pero un poco diferente. ¿Puedes
        hacerlo con solo cinco bloques?
      2-3 Maze sq2_instruction: "Traza el camino y llévame al cerdo tonto. Evita \nel
        TNT o las plumas volarán!\n"
      2-3 Maze sq3_instruction: "¡Guíame al demonio verde! (Cuidado con el TNT)"
      2-3 Maze sq4_instruction: Manten la calma y ayúdame a encontrar al cerdo malo.
        Sino, puede que me enfade!
      2-3 Maze sq5_instruction: |
        ¡Llévame al cerdo! ¿Cuántas veces debes
        repetir un bloque?
      2-3 Maze sq6_instruction: |
        ¿Podrías reemplazar la respuesta anterior con solo dos
        bloques? (Sugerencia: Crea un ciclo usando un bloque de "repeticiones".)
      2-3 Maze sq7_instruction: Llévame al intruso verde usando solo tres bloques.
      2-3 Maze sq8_instruction: Llevame hacia el cerdo! (¿Dónde está el bloque "repeticiones"
        cuando lo necesito?)
      2-3 Maze sq9_instruction: Crea bucles para llegar al cerdo usand menos bloques.
      2-3_instruction: |
        Purple flowers may have either 1 or 0 nectar. Be careful
        not to collect nectar from a purple flower if it doesn't have any.
      2-3level1_instruction: Ayúdale al pájaro a atrapar al cerdo travieso moviéndolo
        hacia adelante
      4-5 Artist 1_instruction: 'Ayúdame a terminar de dibujar mi caja. (Cada línea
        tiene 300 píxeles de largo) '
      4-5 Artist 10_instruction: Presione "Ejecutar" para probar el código. Luego,
        repita varias veces para completar el dibujo. Los colores serán diferentes
        cada vez.
      4-5 Artist 11_instruction: Completa las líneas verdes. Las líneas son de 300
        píxeles de largo y están separadas por 15 píxeles.
      4-5 Artist 2_instruction: "¿Puedes crear un ciclo con este código para completar
        el cuadrado?"
      4-5 Artist 3.5_instruction: Muy bien, trata de averiguar qué pasaría si ejecutas
        este código (o si presionas "Ejecutar" para probarlo). Luego, repítelo varias
        veces para completar el dibujo. Los colores serán (probablemente) diferentes
        cada vez.
      4-5 Artist 3_instruction: |
        Esta jardinera de flores rectangular tiene un perímetro de 600.
        El lado más largo tiene una longitud de 200. Dibuja el rectángulo.
      4-5 Artist 4_instruction: "¿Cuántos grados hay en un círculo?  Crea ciclos de
        iteración con los bloques para crear un círculo de colores."
      4-5 Artist 5_instruction: "¿Qué ángulo utilizas?"
      4-5 Artist 6_instruction: Este triángulo equilátero tiene ángulos de 60, 60
        y 60 grados. Cada lado es de 200 píxeles. Completa el dibujo.
      4-5 Artist 7_instruction: Este triángulo rectángulo tiene ángulos de 30, 60
        y 90 grados. La longitud de la hipotenusa es del doble de la altura de 100
        píxeles. Completa el dibujo.
      4-5 Artist 8_instruction: La línea media en un campo de fútbol es perpendicular
        a las líneas laterales. Este campo tiene un perímetro de 800 pixeles y es
        de 240 pixeles de largo. ¿Cuál es el ancho? Dibuja los límites y la línea
        media.
      4-5 Artist 9_instruction: Dibuja la otra mitad para que el diseño sea simétrico.
        Los triángulos son equiláteros y tienen 50 pixeles de largo.
      4-5 Artist Assessment 1_instruction: 'Evaluación: Utiliza un ciclo para dibujar
        el triángulo equilátero. Cada lado es de 300 píxeles.'
      4-5 Artist For Loops 1_instruction: Pon los números 1 a 10 en los bloques de
        ancho y ejecuta el código.
      4-5 Artist For Loops 11_instruction: Completa el bloque "for" de manera que
        cuente 0, 20, 40, 60, 80... 200.
      4-5 Artist For Loops 12_instruction: '¿Qué pasa si inviertes los números "desde"
        y "hasta"? Completa el bloque "para" para que cuente 200, 180, 140, 120...0. '
      4-5 Artist For Loops 13_instruction: '¡Éste diseño comienza sin un bloque "para"
        y toma demasiados bloques! Usa un bloque "para" para completar la espiral.
        Pista: La última línea mide 250 píxeles.'
      4-5 Artist For Loops 14_instruction: '¡Alguien comenzó el código, pero después
        se dió cuenta de que debe haber una forma más rápida! Usa un bloque "para"
        para reemplazar los bloques y completar la espiral triangular. (Pista: la
        última línea es de 300 píxeles.)'
      4-5 Artist For Loops 15_instruction: '¡Alguien comenzó el código, pero después
        se dió cuenta de que debe haber una forma más rápida! Usa un bloque "para"
        para reemplazar los bloques y completar la espiral triangular. (Pista: la
        última línea es de 200 píxeles.)'
      4-5 Artist For Loops 2_instruction: |
        This is a "for" block. Instead of typing
        1,2,3... 10, the "for" block can repeat the blocks inside it and count the
        numbers for you. Place the number 10 into the "to" section of the "for"
        block.
      4-5 Artist For Loops 3_instruction: ¿Cómo podemos contar del 1 al 50? Edita
        el bloque "para".
      4-5 Artist For Loops 4_instruction: Completa el bloque "para" de modo que cuente
        del 1 al 10 de 1 en 1.
      4-5 Artist For Loops 6_instruction: Dibuja cuadrados con lados de 50, 60, 70,
        80 y 90 píxeles. Necesitarás usar la función "dibujar un cuadrado" cinco veces.
      4-5 Artist For Loops 7_instruction: 'Dibuja los mismos cuadrados pero usa un
        bloque "contar con" para cambiar los tamaños. Coloca el bloque "contador"
        en la función "dibujar un cuadrado". Pista: está en la categoría de Variables.'
      4-5 Artist For Loops 8_instruction: ¿Puedes completar el programa poniendo los
        bloques dentro de un bloque "por" que cuente del 10 al 200 de 10 en 10? Puedes
        encontrar el bloque "para" en la categoría de bucles.
      4-5 Artist For Loops 9_instruction: Éstos círculos tienen un tamaño de 5, 10,
        15, 20, 25, 30 y 35. Dibuja los círculos usando un bloque "para".
      4-5 Artist Free Draw 1_instruction: "¡Dibujo libre! Dibuja cualquier cosa que
        estés inspirado para crear."
      4-5 Artist Functions 1_instruction: Usa un bucle de repetición para dibujar
        éste triángulo.
      4-5 Artist Functions 10a_instruction: Pon éste código dentro de la función "dibujar
        copo de nieve" y reemplaza el 50 con el parámetro "tamaño". La función está
        lista para dibujar un copo de nieve de 100 píxeles.
      4-5 Artist Functions 10b_instruction: |
        Utilice la función "dibujar un copo de nieve" para crear copos de diferente tamaño.  Sugerencia:
        El primer copo de nieve es de un tamaño de 25 en longitud y cada copo de nieve es doble del anterior.
      4-5 Artist Functions 11_instruction: 'La "dibujar un hexágono" función se utiliza
        en la función "dibujar un triángulo". Completa la función del hexágono. (Sugerencia:
        un hexágono tiene 6 lados, cada 100 píxeles de largo.)'
      4-5 Artist Functions 12_instruction: 'Completa la "ondas de empate" función.
        Cada onda está écho por una onda mas chica. (Sugerencia: dibuja cinco ondas
        azules.)'
      4-5 Artist Functions 13 Free play_instruction: "Aquí están algunas funciones
        para dibujar los planetas, las estrellas, los cohetes y los robots. \nUtiliza
        cualquier forma que te guste para hacer imagenes que puedas compartir con
        tus amigos.\n"
      4-5 Artist Functions 14 Free play_instruction: "Aquí te ofrecemos varias funciones.
        \ \nUtilizarlas como quiera dentro de uno o más bucles para hacer imagenes
        que puedas compartir con tus amigos. \nHaga clic en 'Ejectuar' para ver un
        ejemplo.\n"
      4-5 Artist Functions 15 Assessment_instruction: "Evaluación: \nUtilice la función
        \"dibuja un cuadro \" para crear los cuadros.  Los cuadros tienen 50, 100
        y 150 píxeles.\n"
      4-5 Artist Functions 2a_instruction: Ahora utiliza esos bloques en una nueva
        funcion llamada ¨ dibuja un pequeño triángulo¨ y llaman en el.
      4-5 Artist Functions 2b_instruction: Ahora cree una función llamada ¨Dibuja
        un triangulo peqeñio"usando los bloques proporcionados.
      4-5 Artist Functions 3_instruction: Ahora cree las funciónes ¨dibuja un triángulo
        mediano" y ¨dibuja un triángulo grande¨. La función ¨dibuja un triángulo pequeñio¨
        esta echa para ti. Los triángulos tienen lados longitudes de cincuenta (pequeñio),
        cien (mediano), y cien cinquenta (grande).
      4-5 Artist Functions 4_instruction: Esta nueva ¨dibuja un triangulo¨ función
        tiene un parámetro y puede hacer el trabajo de las tres funciónes de antes.
        Dibuja los mismos triángulos usando el nuevo función.
      4-5 Artist Functions 5_instruction: "¿Puedes modifar la función ¨dibuja un triángulo¨
        en una función ¨dibuja un cuadrado¨ y cambiar el dibujo?"
      4-5 Artist Functions 6_instruction: 'Usa el ¨dibuja un cuadro¨ y ¨dibuja un
        triángulo funciónes¨ para dibujar una casa. (Sugerencia: Los lados del cuadro
        son dos cientos píxeles)'
      4-5 Artist Functions 6b_instruction: Usa ¨dibuja un cuadro y triángulo funciónes
        junto con otros bloques para creer una casa añadiéndolos a la función ¨dibuja
        una casa¨ y llamala.
      4-5 Artist Functions 7_instruction: Usa el ¨dibuja una casa¨ función para dibujar
        casas de cien píxeles y cinquenta píxeles. Las dos casas son separadas por
        cinquenta píxeles.
      4-5 Artist Functions 8_instruction: La función ¨dibuja una flor¨ tiene un parámetro
        que le permite ajustar la altura del tallo. Esteblézcalo en dos cientos y
        vea que pasa.
      4-5 Artist Functions 9_instruction: Dibuja estas tres flores. La primera de
        una altura de cien y la siguiente flor es siempre cinquenta píxeles mas que
        la altura de la anterior. Las flores también son separadas por cien píxeles.
      4-5 Artist Patterns 1_instruction: "¿Puedes dibujar este cuadro por usando un
        bucle? Cada lado es de vente píxeles largo."
      4-5 Artist Patterns 10_instruction: "Este código dibuja dos filas de hexágonos
        -utilice un bucle de 4 veces para dibujar el panal entero. \nConsejo:\n Tendrás
        que retroceder 120 píxeles en su bucle para asegurarse de que el artista no
        dibuja fuera de la pantalla.\n"
      4-5 Artist Patterns 11_instruction: |
        ¿Cuántas veces necesitas bucle para dibujar un semicírculo?
        Sugerencia: si hay 360 grados en un círculo y cada bucle se mueve 3 grados, ¿cuántas veces necesitarías para que el bucle dibuje un círculo completo?
      4-5 Artist Patterns 12_instruction: Si copia ese lazo y gira a la izquierda
        en lugar de la derecha, ¿qué pasa? ¿Puedes repetir para dibujar esta onda?
      4-5 Artist Patterns 13_instruction: Ahora repitamos todo eso cuatro veces para
        crear este cuadro. Cuidado con las esquinas - ¡simplemente no puedes girar
        90 grados! Si repetir 60 veces un giro de 3 grados hace un semicírculo, ¿cuál
        de estos bloques de código hará un cuarto de círculo para las esquinas?
      4-5 Artist Patterns 2_instruction: Si usted pone su bucle cuadrado dentro de
        otro bucle, lo llamamos un bucle anidado. ¿Qué necesitas agregar a su bucle
        externo para asegurarse de que todos los 15 cuadrados se alinean al lado del
        otro?
      4-5 Artist Patterns 3_instruction: Ahora vamos a ir un nivel más profundo. Hemos
        anidado todo bloque de código en otro bucle, pero quiere hacerse al artista
        en el lugar para trazar la línea siguiente. ¿Que estos bloques de código se
        puede colocar en el extremo del bucle exterior para dibujar la cuadrícula
        entera?
      4-5 Artist Patterns 4_instruction: Este dimante tiene 50 pixeles lado y angulos
        de 120 y 60 grados. Utiliza un bucle para dibujarlo.
      4-5 Artist Patterns 5.5_instruction: "¿Cuántas veces necesitas repetir este
        bloque para dibujar la red completa de diamantes?"
      4-5 Artist Patterns 5_instruction: |
        Repetimos para hacer una fila de 6 diamantes.
        Observe que hemos cambiado nuestro código del diamante para repetir 3 veces en lugar de 2 - ¿por qué crees que es asi?
      4-5 Artist Patterns 6_instruction: "¿Cuántas veces necesitas repetir este bloque
        para dibujar la red completa de diamantes?"
      4-5 Artist Patterns 7_instruction: Vamos a modificar el código del último rompecabezas
        para hacer este patrón más complejo. ¿Observe cómo los diamantes se superponen
        ahora,intente cambiar el primero "jump backwards" de 100 a 50 (medio en la
        medida) -ahora como cuanto mas debe de ir el artista en el segundo "jump backwards"?
      4-5 Artist Patterns 8_instruction: Utilice un bucle para dibujar este hexágono
        con 40 píxeles lados y ángulos de 60 grados.
      4-5 Artist Patterns 9.5_instruction: |
        Ciclemos este código para dibujar dos filas de hexágonos.
        Observe cómo nuestra segunda fila se desplaza hacia la derecha.
      4-5 Artist Patterns 9_instruction: "Ahora repite que código 3 veces para dibujar
        toda la fila. \nSugerencia, cada hexágono es 80 píxeles de ancho desde los
        puntos más lejano de izquierda a derecha.\n"
      4-5 Artist Patterns Free Play_instruction: Juego libre - prueba tu destreza
        en la fabricación de un patrón propio!
      4-5 Bee Conditionals - FC Test_instruction: La abeja sólo quiere ahora néctar.
        No todos los objetos son flores, así que compruebe debajo de cada nube a ver
        si se esconde una flor. Si es así, puede recolectar néctar.
      4-5 Bee Conditionals 1 (copy 1)_instruction: |
        The bee can't tell if this is
        a flower or a honeycomb. Gather nectar only from flowers, but first check
        if it is a flower or a honeycomb.
      4-5 Bee Conditionals 1_instruction: La abeja no puede decir si se trata de una
        flor o un panal de miel. Junten néctar de las flores, pero primero tienes
        que checar si es una flor o un panal de miel.
      4-5 Bee Conditionals 2 (copy 1)_instruction: |
        The bee only wants nectar right
        now. Remember, not all objects are flowers, so check to gather nectar only
        at flowers.
      4-5 Bee Conditionals 2_instruction: "La abeja sólo quiere néctar ahora . \nRecuerde
        que no todos los objetos son flores, recoge néctar solamente de las flores.\n"
      4-5 Bee Conditionals 3_instruction: "Ahora la abeja sólo quiere hacer miel.
        \nAsegúrese de que sólo hacer miel en el panal.\n"
      4-5 Bee Conditionals 4 (copy 1)_instruction: |
        The unknown object is either
        a flower or a honeycomb. Use the if/else block to collect nectar if it is
        a flower, else to make honey (because it is a honeycomb).
      4-5 Bee Conditionals 4_instruction: El objeto desconocido es una flor o un panal
        de abejas. Uso el bloque if/else para recolectar néctar, si es una flor, otra
        para hacer miel (ya que es un panal de abejas).
      4-5 Bee Conditionals 5_instruction: Puede haber una flor o un panal bajo esas
        nubes. Usa el bloque if/else para recoger néctar si hay una flor, sino haz
        miel (porque hay un panal de abejas).
      4-5 Bee Conditionals 6 (copy 1)_instruction: |
        This purple flower may have either
        3, 2, or 1 nectar. Here an if-else block is combined with another if-else
        block to create an if, else-if, else block. Complete the solution to collect
        the unknown amount of nectar.
      4-5 Bee Conditionals 6_instruction: Esta flor púrpura puede tener 3, 2 o 1 néctar.
        Aquí un bloque if-else se combina con otro bloque if-else para crear un bloque
        if,else-if, else. Completa la solución para recoger la cantidad desconocida
        de néctar.
      4-5 Bee Conditionals 7_instruction: Recuerda que las flores púrpura pueden tener
        1, 2 ó 3 néctares. Completa la función "revisar flor púrpura" y úsala para
        recoger todo el néctar de las flores.
      4-5 Bee Conditionals 8_instruction: Escribe una función dentro del bloque llamada
        "revisar que la flor hace miel." Tu función debe comprobar cuánto néctar tiene
        la flor púrpura, recogerla, avanzar y luego hacer miel.
      4-5 Bee Conditionals Assessment 1_instruction: |
        Evaluación: Este código está errado.
        Completa la función "consigue néctar o produce miel" entonces llámalo para recolectar todo el néctar y la miel. Recuerda que las rosas púrpuras pueden tener 3,2 o 1 néctares.
      4-5 Bee Debugging 1_instruction: Estos bloques realmente me molestan. ¿Puedes
        arreglarlos?
      4-5 Bee Debugging 10_instruction: Encuentra los errores y arréglalos.
      4-5 Bee Debugging 11_instruction: "¿Esto está contado correctamente?"
      4-5 Bee Debugging 2_instruction: |
        Ayuda a la abeja a conseguir el néctar para hacer la miel.
      4-5 Bee Debugging 3_instruction: Encuentra los errores y arréglalos.
      4-5 Bee Debugging 4_instruction: Estos bloques no funcionan. ¿Cúal es el patrón?
      4-5 Bee Debugging 5_instruction: Halgo no esta bien aqui...
      4-5 Bee Debugging 6_instruction: La flor púrpura contiene una cantidad desconocida
        de néctar. Arrela los bloques, para obtener todo el néctar de la flor.
      4-5 Bee Debugging 7_instruction: La función le falta algo...
      4-5 Bee Debugging 8_instruction: Esta función está bien, pero no fue usada correctamente.
      4-5 Bee Debugging 9_instruction: "¿Por qué la abeja no está haciendo suficiente
        miel?"
      4-5 Bee Debugging Assessment 1_instruction: 'Evaluación: Arregla el código.'
      4-5 Bee Nested Loops 1_instruction: Utiliza un bucle para recolectar todo el
        néctar.
      4-5 Bee Nested Loops 2_instruction: 'Recolecta todo el néctar de cada flor.
        Utiliza un bucle anidado. '
      4-5 Bee Nested Loops 3_instruction: Recolecta todo el néctar poniendo el código
        de arranque en un bucle anidado.
      4-5 Bee Nested Loops 4_instruction: 'Recolecta todo el néctar de cada flor y
        haz miel en cada panel. Utiliza un bucle anidado. '
      4-5 Bee Nested Loops 5_instruction: Recolecta todo el néctar creando un bucle
        anidado.
      4-5 Bee Nested Loops 6_instruction: Recolecta el néctar.
      4-5 Bee Nested Loops 7_instruction: Pon este bucle dentro de otro bucle para
        crear un bucle anidado y recolectar todo el néctar de las flores.
      4-5 Bee Nested Loops 8_instruction: 'Recolecta todo el néctar de estas flores
        anidando un bucle de tiempo. Reemplaza el bloque interno repetidas veces con
        un bucle de tiempo. '
      4-5 Bee Nested Loops 9_instruction: Recolecta todo el néctar de estas flores,
        anidando un bucle de tiempo dentro de un bloque de repetición.
      4-5 Bee Nested Loops Assessment 1_instruction: Evaluación - Recolecta todo el
        néctar y haz toda la miel mediante el uso de bucles.
      4-5 Bee Nested Loops Rows_instruction: |
        Reune todo el néctar de las filas de las flores!
        Utiliza un bucle anidado.
      4-5 Maze 1 (copy 1)_instruction: Estimada persona. Yo zombie. Debe...llegar...al
        girasol.
      4-5 Maze 1_instruction: Estimada persona. Yo zombie. Debe...llegar...al girasol.
      4-5 Maze 10_instruction: "¿Podrías llegar al girasol usando solo cuatro bloques?"
      4-5 Maze 11_instruction: "¿Podrías llegar al girasol usando solo cinco bloques?"
      4-5 Maze 12_instruction: Ok, esto es ligeramente diferente. ¿Puedes hacerlos
        con sólo seis bloques?
      4-5 Maze 13_instruction: Llévame al cerdo!
      4-5 Maze 14_instruction: "¡Tráeme al cerdo! Utiliza la repetición hasta el bloque."
      4-5 Maze 2 (copy 1)_instruction: Lleva al zombie hasta el girasol, pero evade
        al ¡chomper!
      4-5 Maze 2_instruction: Lleva al zombie hasta el girasol, pero evade al ¡chomper!
      4-5 Maze 3 (copy 1)_instruction: Debe... llegar... al girasol.
      4-5 Maze 3_instruction: Debe... llegar... al girasol.
      4-5 Maze 4 (copy 1)_instruction: Intenta usar el bloque "repetir" para utilizar
        menos bloques...
      4-5 Maze 4_instruction: Intenta usar el bloque "repetir" para utilizar menos
        bloques...
      4-5 Maze 5 (copy 1)_instruction: "¿Puedes resolver este rompecabezas utilizando
        el menor número de bloque posibles?"
      4-5 Maze 5_instruction: "¿Puedes resolver este rompecabezas utilizando el menor
        número de bloque posibles?"
      4-5 Maze 6 (copy 1)_instruction: "¿Puedes resolver este rompecabezas utilizando
        el menor número de bloque posibles?"
      4-5 Maze 6_instruction: "¿Puedes resolver este rompecabezas utilizando el menor
        número de bloque posibles?"
      4-5 Maze 7_instruction: Estimada persona. Yo zombie. Debe...llegar...al girasol.
      4-5 Maze 8_instruction: Utilice el bloque "repetir" para obtener al zombie para
        el girasol. (Evite a los chompers!)
      4-5 Maze 9_instruction: Crear un lazo en el bloque "repetir hasta".
      4-5 Maze Assessment 1_instruction: 'Evaluzción: Llega hasta el girasol.'
      4-5 Maze Conditionals 1_instruction: Utiliza el bloque repetir para llevar al
        zombie hasta el girasol.
      4-5 Maze Conditionals 10_instruction: "¿Puedes agregar sólo tres bloques para
        ayudarme a resolver un laberinto más complejo? si lo haces correctamente,
        puedo caminar cualquier camino curvo sin importar la longitud."
      4-5 Maze Conditionals 2_instruction: Utiliza el bloque repetir para llevar al
        zombie hasta el girasol.
      4-5 Maze Conditionals 3_instruction: 'Utiliza el bloque "if" para dejarme decidir
        cuando voltear. Sugerencia: Sólo necesitas un bloque mas, pero aprende como
        se configura, con eso lo puedes hacer por ti mismo la próxima vez.'
      4-5 Maze Conditionals 4_instruction: Ok, esto es como con el ultimo rompecabezas,
        pero recuerda como utilizaste el bloque "if" y el bloque "repeat" juntos.
      4-5 Maze Conditionals 5_instruction: ¡Yo queiro el girasol! Utiliza el bloque
        "if" para llevarme allá, con el menor número de bloques.
      4-5 Maze Conditionals 6_instruction: ¡Yo queiro el girasol! Utiliza el bloque
        "if" para llevarme allá, con el menor número de bloques.
      4-5 Maze Conditionals 7_instruction: Ok, hagámoslo de nuevo para pacticar -
        esto no es muy diferente, pero ten cuidado con los ¡masticadores!
      4-5 Maze Conditionals 8_instruction: Los bloques "if-else" comprueban una condición,
        y luego realizan una cosa o la otra. Para llevarme al girasol trata usando
        este nuevo bloque.
      4-5 Maze Conditionals 9_instruction: Una práctica mas con el bloque "if-else",
        ¿Puedes hacerlo corectamente en el primer intento?
      4-5 Maze Conditionals Assessment 1_instruction: Utiliza un bloque "repeat until"
        y un bloque "if-else" para llevarme al girasol usando la mínima cantidad de
        bloques posible.
      4-5 Nested Loops 1_instruction: 'Completa el código para dibujar estos triángulos.
        El primero esta hecho por ti. Sugerencia: 3 triángulos en una rotación de
        360 grados.'
      4-5 Nested Loops 10_instruction: Dibuja la última fila de estrellas de esta
        bandera por medio de un bucle de bloques proporcionados. Las estrellas son
        de 50 píxeles, pero recuerda que las estrellas por si mismas son 30 píxeles
        de ancho.
      4-5 Nested Loops 11_instruction: "¿Puedes dibujar estas 10 plazas de esta acera,
        usando un bucle anidado? Cada cuadrado tiene 30 píxeles."
      4-5 Nested Loops 12_instruction: "¿Puedes dibujar estos 36 triángulos utilizando
        un bucle anidado?"
      4-5 Nested Loops 2_instruction: 'Ahora anida este circuito dentro de otro circuito
        para dibujar 3 triángulos. Esto es llamado un circuito anidado. Sugerencia:
        Todos los 10 triángulos completan una rotación de 360 grados.  '
      4-5 Nested Loops 3_instruction: |
        Crea un sol anidando el código de arranque en otro bucle. Esto se llama un bucle anidado. \r
      4-5 Nested Loops 5_instruction: Has un bucle con el código dado para crear un
        molino de viento.
      4-5 Nested Loops 6_instruction: "¿Puedes dibujar un hexágono con un bucle del
        código del triángulo?"
      4-5 Nested Loops 7_instruction: 'Repite el bucle 6 veces. ¿Cuánto tienes que
        girar cada vez el bucle? (Pista: ¿Cuánto es 360 dividido por 10?)'
      4-5 Nested Loops 8_instruction: 'Repite el bucle 6 veces. ¿Cuánto tienes que
        girar cada vez el bucle? (Pista: ¿Cuánto es 360 dividido por 6?)'
      4-5 Nested Loops 9_instruction: Dibuja los dientes en la boca de el cocodrilo!
      4-5 Nested Loops Assessment 1_instruction: Utiliza un bucle anidado para completar
        el diseño.
      4-5 While Loops 1_instruction: Mueveme al agujero y rellena con dos palas de
        tierra, usando el bloque de "relleno".
      4-5 While Loops 2_instruction: Mueveme a la pila de tierra y remueve con 5 paleos,
        usando el bloque 'remover'.
      4-5 While Loops 3_instruction: 'Mueveme a la pila y remueve todo, despues mueveme
        hacia el agujero y llenalo completamente.  Sugerencia: Utiliza tan pocos bloques
        como sea posible.'
      4-5 While Loops 4_instruction: 'Wow, encontre un agujero realmente profundo!
        no se cuantas paleadas de tierra necesita. ¿Puedes escribir un programa que
        llene hasta que el suelo este parejo? Sugerencia: trata usando el bucle mientras.'
      4-5 While Loops 5_instruction: Wow, ahora hay dos agujeros muy profundos. ¿Puedes
        escribir un programa que llene ambos hasta que el suelo este parejo?
      4-5 While Loops 6_instruction: Wow, ahora hay un monton de tierra! ¿Puedes escribir
        un programa que quite todo eso para que el suelo quede parejo?
      4-5 While Loops 7_instruction: "¡Wow, ahora hay tres montones de tierra! ¿Puedes
        escribir un programa que elimine cada uno de ellos hasta que la tierre quede
        plana?"
      4-5 While Loops 8_instruction: ' Hay un hueco muy profundo y mucha tierra amontonada.
        ¿Cúantas paladas son necesarias para aplanar la tierra? Sugerencia: Utiliza
        el circuito de bloque "while" para ambas.'
      4-5 While Loops Assessment 1_instruction: Existen un montón de huecos y pilotes.
        Ayúdame a llenarlos y removerlos para aplanar la tierra.
      AlgPD DR Free Play_instruction: Create a function based on your own word problem.
      AllTheThings Applab - Turtle move with button_instruction: |
        Add a button that
        moves the turtle when clicked.  (Click to see full instructions)
      allthethings data blocks test_instruction: |
        Please sign in to test applab levels
        (By design, applab levels only work if signed in. Normally, we make people
        sign in, but this is only enforceable for a whole script and would be annoying
        to do for the allthethings script).
      allthethings design mode elements_instruction: |
        Please sign in to test applab
        levels (By design, applab levels only work if signed in. Normally, we make
        people sign in, but this is only enforceable for a whole script and would
        be annoying to do for the allthethings script).
      allthethings_moviebot_instruction: |
        This level cloned from "U3 Digital Assistant
        Target"
      allthethings_template_backed1_instruction: "Backed by a template #1. Please\nsign
        in to test applab levels (By design, applab levels only work if signed\nin.
        Normally, we make people sign in, but this is only enforceable for a whole\nscript
        and would be annoying to do for the allthethings script). \n"
      allthethings_template_backed2_instruction: |
        Backed by a template #2. Please
        sign in to test applab levels (By design, applab levels only work if signed
        in. Normally, we make people sign in, but this is only enforceable for a whole
        script and would be annoying to do for the allthethings script).
      App Lab test_instruction: prueba
      Applab allthethings onRecordEvent_instruction: |
        Please sign in to test applab
        levels (By design, applab levels only work if signed in. Normally, we make
        people sign in, but this is only enforceable for a whole script and would
        be annoying to do for the allthethings script).
      Applab test_instruction: This level is submittable. For testing only!
      AppLab_test02_instruction: |
        One sentence summary of the activity. Click to
        view full instructions.
      Artist - Nested Loops 1_instruction: |
        Complete the code to draw these triangles.  The
        first one is done for you.  Hint:  3 triangles in a 360 degree rotation.
      Artist - Nested Loops 10_instruction: |
        Draw the last row of stars on this flag
        by looping the provided blocks. The stars are 50 pixels apart, but remember
        that the stars themselves are 30 pixels wide.
      Artist - Nested Loops 11_instruction: |
        Can you draw these 10 squares of this
        sidewalk using a nested loop? Each square is 30 pixels.
      Artist - Nested Loops 12_instruction: |
        Can you draw these 36 triangles using
        a nested loop?
      Artist - Nested Loops 2_instruction: "Now nest this loop inside another loop\nto
        draw 10 triangles.  This is called a nested loop.  Hint: All 10 triangles\ncomplete
        a 360 degree rotation.  \n"
      Artist - Nested Loops 3_instruction: |
        Create a sun by nesting the starter code
        in another loop. This is called a nested loop.\r
      Artist - Nested Loops 5_instruction: Loop the given code to create a windmill.
      Artist - Nested Loops 6_instruction: |
        Can you draw a hexagon by looping the
        triangle code?
      Artist - Nested Loops 7_instruction: |
        Loop this design 10 times. How much do
        you have to turn each time you loop? (Hint: What is 360 divided by 10?)
      Artist - Nested Loops 8_instruction: |
        Loop this design 6 times. How much do
        you have to turn each time you loop? (Hint: What is 360 divided by 6?)
      Artist - Nested Loops 9_instruction: Draw the teeth in the alligator's mouth!
      Artist - Nested Loops Assessment 1_instruction: Utiliza un circuito anidado
        para completar el diseño.
      Auto Open Function Editor_instruction: ¡Puedes llamar una función dentro de
        otra función! Utilizando tu función "shape" como base, crea 3 formas de casa
        cada una de 20 píxeles mas larga que la anterior, empezando con 50 píxeles
        de longitud. Usar un circuito de contar puede ser útil.
      Bee Recommended Blocks test_instruction: Las flores moradas pueden tener 1 o
        0 néctar, ¡Pero tu no sabes cual de los dos! Ten cuidado de no recolectar
        néctar de una flor morada que no tenga. Comprueba que el néctar es igual a
        1 utilizando un bloque si-entonces.
      Big Game Animation 1 (copy 1)_instruction: |
        Now that you've learned to write
        simple linear functions, let's work on using them to add some movement to
        our game. Click play to see what your game can currently do (not much!), update
        any variables you like, and then click finish to move on.
      Big Game Animation 1_instruction: |
        Now that you've learned to write simple
        linear functions, let's work on using them to add some movement to our game.
        Click "Run" to see what your game can currently do (not much!), update any
        variables you like, and then click finish to move on.
      Big Game Animation 2 (copy 1)_instruction: |
        The function 'update-target'
        function takes the target's current x value, and returns an updated value.
        Complete the 'update-target' function so that it adds to the x value each
        time it is called. The more you add to x, the faster the target will go.
      Big Game Animation 2_instruction: |
        The update-target function takes the target's
        current x value, and returns an updated value. Complete the update-target
        function so that it adds to the x value each time it is called. The more you
        add to x, the faster the target will go.
      Big Game Animation 3_instruction: |
        The update-danger function should work just
        like update-target, except that the danger should move from the right side
        over towards the left. Complete update-danger to make the danger fly across
        the screen.
      Big Game Animation 4_instruction: |
        At this point in your game, your danger
        should run across the screen from right to left, and your target should run
        across from left to right. They don't ever come back on screen once they've
        left, but we'll take care of that later. Take a minute to make sure your
        game is working like you want it to, and then click "Finish" to move on.
      Big Game Booleans 1_instruction: |
        When you last worked on your game we got
        our target and danger sprites to fly across the screen, but they never come
        back. Click "Run" to see how your game is currently working, and then click
        finish and we'll work on making those sprites reappear on screen after they've
        left.
      Big Game Booleans 2_instruction: |
        Go to the Functions section of the toolbox
        and complete the safe-left? function so that it returns true if the sprite's
        x coordinate is greater than -50. If you're successful you should see the
        Danger go off the left side and then return on the right side.
      Big Game Booleans 3_instruction: |
        Now that you've got safe-left?, let's fill
        in safe-right? - it should take in a sprite's x coordinate and return true
        if that coordinate is less than 450. Once your safe-right? is complete you
        should see the Target go off the right side of the screen and return on the
        left.
      Big Game Booleans 4_instruction: |
        Complete the onscreen? function so that it
        checks whether both safe-left? and safe-right? are true.
      Big Game Booleans 5_instruction: |
        At this point your Danger should run across
        the screen from right to left, your Target should run across from left to
        right, and they should both return to the opposite side, repeatedly. Take
        a minute to make sure your game is working like you want it to, and then click
        "Finish" to move on.
      Big Game Collision 1 (copy 1)_instruction: |
        When you last worked on your game
        we got our target and danger sprites to fly across the screen, but they never
        come back. Click run to see how your game is currently working, and then click
        finish and we'll work on making those sprites reappear on screen after they've
        left.
      Big Game Collision 1_instruction: |
        At this point you've programmed a video
        game with a moving Target and Danger, both of which return to the screen once
        they've left, and a Player that responds to keyboard input. Click "Run"
        to see how your game is currently working, and then we'll dig into the final
        missing piece - collision detection!
      Big Game Collision 2_instruction: |
        To move the player up and down, we'll need
        to use a conditional block to figure out which key is pressed and respond
        accordingly. Computers read keypresses as numeric key codes - the up arrow
        is 38 and the down arrow is 40. You can lookup other key codes in your student
        workbook. Edit the 'update-player' function so that if moves the player
        up when the up arrow is pressed, or down when the down arrow is pressed.
      Big Game Collision 3_instruction: |
        Use the Distance Formula, so the distance
        function returns the distance between the player's center coordinates (px,
        py) and another sprite's center coordinates (cx, cy).
      Big Game Collision 4_instruction: |
        Complete the collide? function so that it
        returns true if the distance between two points is less than 100 pixels apart.
      Big Game Complete_instruction: |
        A demo of the completed CS in Algebra Big Game
        project
      Big Game Final_instruction: |
        You made it! At this point your game should be
        fully functioning, take some time to enjoy your new game and make any final
        tweaks to it. When you're happy with the final product, click Finish and
        you'll have an opportunity to share a link to your game. Good work!
      Big Game Player 1_instruction: |
        We're getting really close to a finished game!
        Last time you worked on your game, you used booleans to make your Target and
        Danger return to the screen once they've left. Click Run to see how your
        game looks right now, and then we'll get to making your Player move up and
        down.
      Big Game Player 2_instruction: |
        Edit the update-player function so the player
        moves up when the up arrow (keycode 38) is pressed, and moves down (keycode
        40) when the down arrow is pressed.
      Big Game Testing_instruction: |
        A demo of the completed CS in Algebra Big Game
        project
      Big Game Vars 1 (copy 1)_instruction: |
        Let's get started on your Big Game!
        Here you'll see a whole bunch of placeholder code that you'll eventually
        replace with your own, but for now we're only going to worry about defining
        variables. Click "Run" to see what the game looks like with the default
        values.
      Big Game Vars 1_instruction: |
        Let's get started on your Big Game! Here you'll
        see a whole bunch of placeholder code that you'll eventually replace with
        your own, but for now we're only going to worry about defining variables.
        Click "Run" to see what the game looks like with the default values.
      Big Game Vars 2 (copy 1)_instruction: |
        The first step to making this game your
        own is to give it a good Title. Click edit on the 'title' and 'subtitle'
        variables and change them to something new.
      Big Game Vars 2_instruction: |
        The first step to making this game your own is
        to give it a good Title. Click edit on the title and subtitle variables and
        change them to something new.
      Big Game Vars 3 (copy 1)_instruction: |
        Now let's set the background for your
        new game. Edit the 'bg' variable and select a new background Image from
        the dropdown.
      Big Game Vars 3_instruction: |
        Now let's set the background for your new game.
        Edit the bg variable and select a new background Image from the dropdown.
      Big Game Vars 4 (copy 1)_instruction: |
        Awesome, now you can update the variables
        for your Player, Target, and Danger. Feel free to play with all of the variables
        at this point to make your game look like you'd like it to. Click 'finish'
        when you're done.
      Big Game Vars 4_instruction: |
        Awesome! Now you can update the variables for
        your Player, Target, and Danger. Feel free to play with all of the variables
        at this point to make your game look like you'd like it to. Click "Finish"
        when you're done.
      Brad Spooky House Copy_instruction: |
        Freeplay: Here are the functions you've
        written, and some more for you to play with. Draw something awesome! Play
        with the pen width to see how different your drawings look!
      Brad Spooky House_instruction: |
        Freeplay: Here are the functions you've written,
        and some more for you to play with. Draw something awesome! Play with the
        pen width to see how different your drawings look!
      Building a Foundation Assessment_instruction: |
        Build a three level pyramid,
        there are no other directions, so just play with the pieces until you get
        it!
      Busy Bee 2_instruction: "¡Esta abeja tiene mucho trabajo por hacer! ¿Puedes
        encontrar algún patrón que se pueda utilizar para simplificar el código?"
      Busy Bee_instruction: "¡Esta abeja tiene mucho trabajo por hacer! ¿Puedes encontrar
        algún patrón que se pueda utilizar para simplificar el código?"
      C3-Farmer While Loops 1_instruction: |
        Move me to the hole and fill it with
        two shovelfuls of dirt, using the "fill" block.
      C3-Farmer While Loops 2_instruction: |
        Move me to the pile of dirt and remove
        it with 5 shovel scoops, using the 'remove' block.
      C3-Farmer While Loops 3_instruction: |
        Move me to the pile and remove all of
        it, then move to the hole and fill it completely.  Hint:  Use as few blocks
        as possible.
      C3-Farmer While Loops 4_instruction: |
        Wow, I found a really deep hole! I don't
        know how many shovelfuls of dirt it needs.  Can you write a program that fills
        it until the ground is even?  Hint:  Try using the while loop this time.
      C3-Farmer While Loops 5_instruction: |
        Wow, now there are two deep holes! Can
        you write a program that fills them both until the ground is even?
      C3-Farmer While Loops 6_instruction: |
        Wow, now there is a large pile of dirt!
        Can you write a program that removes all of it so the ground is even?
      C3-Farmer While Loops 7_instruction: |
        Wow, now there are three piles of dirt!
        Can you write a program that removes each of them until the ground is even?
      C3-Farmer While Loops 8_instruction: |2
         There is a really deep hole and a really
        large pile of dirt.  How many shovelfuls of dirt need to be moved around to
        make the ground flat?  Hint: Use the while loop for both.
      C3-Farmer While Loops Assessment 1_instruction: |
        There are a lot of holes and
        piles.  Help me to fill and remove them to make the ground flat.
      Calc Circles of Eval .1_instruction: |
        You’ll be writing a kind of code called
        Evaluation Blocks, because each block of code evaluates to a single value.
        Change the ??? in this code so that the block evaluates to 5.
      Calc Circles of Eval .2_instruction: |
        This Evaluation Block is a multiplication
        function which takes two numbers and returns the product of those numbers.
        Edit this block so that it multiplies 2 * 5
      Calc Circles of Eval .3_instruction: |
        Here's a function for addition which
        takes two numbers and returns their sum. Use this Addition Block to add 3
        + 6.
      Calc Circles of Eval .4_instruction: |
        Here we've nested an Addition Block
        inside a Multiplication Block. Complete this code so it multiplies 3 by (4
        + 1)
      Calc Circles of Eval 1 (copy 1)_instruction: |
        Convert this statement to <some_shape>
        of evaluation.
      Calc Circles of Eval 1_instruction: |
        Every mathematical operator (+, -, *,
        /, and so on) can be represented by an Evaluation Block in code. Change the
        Evaluation Block to match the expression.
      Calc Circles of Eval 2 (copy 1)_instruction: |
        Convert this statement to <some_shape>
        of evaluation.
      Calc Circles of Eval 2_instruction: |
        Use a Multiplication Block to complete
        this code.
      Calc Circles of Eval 3_instruction: |
        Complete the Evaluation Blocks to match
        this statement.
      Calc Circles of Eval 4_instruction: |
        This code is missing a couple of Evaluation
        Blocks - make sure you put everything in the right order.
      Calc Circles of Eval 5_instruction: |
        Complete the Evaluation Blocks to match
        this statement.
      Calc Circles of Eval 6_instruction: |
        Complete the Evaluation Blocks to match
        this expression.
      Calc Circles of Eval 7_instruction: |
        Complete the Evaluation Blocks to match
        this statement.
      Calc Circles of Eval 8_instruction: |
        Complete the Evaluation Blocks to match
        this statement.
      Calc Circles of Eval 9_instruction: |
        Complete the Evaluation Blocks to match
        this statement.
      Calc Circles of Eval Free Play_instruction: |
        Free Play: Try using the Evaluation
        Blocks to write some equations of your own. How does nesting the blocks in
        different ways impact their evaluation?
      Calc Define Funcs 1 (copy 1)_instruction: |
        Let's look at some more algebraic
        functions now. Here's a function translated from the simple algebraic function
        f(x) = x + 1. What would you expect this function to output if provided an
        input of 15?
      Calc Define Funcs 1_instruction: |
        Let's look at some more traditional algebraic
        functions now. Here's a function translated from the simple algebraic function
        f(x) = x + 1. What would you expect this function to output if provided an
        input of 15?
      Calc Define Funcs 2_instruction: |
        Write a function f that takes a parameter
        x and returns x - 10. Test your function using f(15).
      Calc Define Funcs 3_instruction: |
        We don't have to call our function f every
        time; create a function called times-ten that should take a parameter x and
        return x * 10. Once you've created the function, run times-ten(50).
      Calc Define Funcs 4_instruction: |
        Write a function called half that takes a
        number x and returns half that number. Once you've written the function,
        use it to calculate half(21)
      Calc Define Funcs 5 - multiply 1_instruction: |
        Oh no! We lost our multiply
        block! We'll have to create a function to multiply for us. To start off,
        write a function "f" that takes a parameter "x" and returns x*5. Test
        your function using f(3).
      Calc Design Recipe 1_instruction: |
        Let's use the Design Recipe to create a
        function called cube - this function should take in a Number and return that
        number to the power of 3. Make sure to write two example cases! When you're
        done, use your new function to calculate cube(7).
      Calc Design Recipe 2_instruction: |-
        Your school is holding a bake sale, and
        you need to track the cost of making each cookie, the money paid, and the
        total profit. Cookies cost $0.25 each to make, and sell for $1.50/cookie.\r
        Write
        the function cost, which takes in the number of cookies you intend to sell,
        and returns the cost of making those cookies.
      Calc Design Recipe 3_instruction: |
        Write the function sales which takes in
        the number of cookies sold, and produces the amount of money customers spent
        to buy those cookies (each cookie is sold at $1.50).
      Calc Design Recipe 4_instruction: |
        Using the two functions we just wrote, write
        the function profit, which takes in the number of cookies you sold, and gives
        you back the total profit you make from selling your cookies, accounting for
        the cost of baking them.
      Calc Free Play_instruction: |
        Free Play: Write functions and algorithms of your
        own design!
      Calc Rocket 1 (copy 1)_instruction: |
        In the last puzzle you wrote a contract
        for the function "rocket-height" that states it has a range of Number, domain
        of Number, and should return the height of the rocket traveling at 15 m/s
        after a given number of seconds. Let's write an example case now for the
        height of the rocket at 3 seconds.\r
        \r
        \r
        \r
          \r
        \r
      Calc Rocket 1_instruction: |
        In the last puzzle you wrote a contract for the
        function rocket-height that states it has a range of Number, domain of Number,
        and should return the height of the rocket traveling at 15 m/s after a given
        number of seconds. Let's write an example case now for the height of the
        rocket at 3 seconds.
      Calc Rocket 2_instruction: |
        Great, let's do one more example before writing
        the function - what should the rocket height be after 30 seconds?
      Calc Vars 1.1_instruction: |
        Here we've set the age variable to 17 years. Can
        you write an expression that calculates age in days?
      Calc Vars 1_instruction: |
        Variables allow us to name values so that we can
        easily refer to them repeatedly throughout our programs. Here's a variable
        called age. Set its value to your age and click run.
      Calc Vars 2 (copy 1)_instruction: |
        Here we've set the "age" variable to
        17 - can you write an expression that calculates "age" in months?
      Calc Vars 2.1_instruction: |
        Here's a new variable called age-in-months. Use
        the variable age to set age-in-months.
      Calc Vars 2_instruction: |
        Can you write an expression that calculates age in
        months?
      Calc Vars 3 (copy 1)_instruction: |
        Can you add to this code so that it calculates
        how many hours there are in "age" years?
      Calc Vars 3_instruction: |
        Can you add to this code so that it uses the "age"
        variable to calculate age in hours?
      Calc Vars 4_instruction: |
        We can also set variables by using other variables.
        Let's say you have a brother who is two years younger than you - can you
        set a new variable "brother-age" using your "age" variable?
      Code Studio Puzzle Challenge 1 - Artist_instruction: "Draw the line. It is\n200
        pixels long. \n"
      Code Studio Puzzle Challenge 1 Artist1_instruction: "Draw the line. It is 200\npixels
        long. \n"
      Code Studio Puzzle Challenge 10 - Bee (copy 1)_instruction: |
        Move the Bee to
        the flower and get all of the nectar.
      Code Studio Puzzle Challenge 10 - Bee_instruction: |
        Move the Bee to the flower
        and get all of the nectar.
      Code Studio Puzzle Challenge 10b - Bee_instruction: |
        Move the Bee to the flowers
        and get all of the nectar at each.
      Code Studio Puzzle Challenge 11 - Artist_instruction: |
        Draw this line by using
        the variable "length". Each line segment is 75 pixels long.
      Code Studio Puzzle Challenge 11b - Artist_instruction: |
        Draw a square by using
        the variable length provided.
      Code Studio Puzzle Challenge 12 - Artist_instruction: |
        The code provided draws
        one triangle. Add to it to draw triangles in a hexagon pattern.
      Code Studio Puzzle Challenge 12a - Artist_instruction: |
        The code provided draws
        one triangle. Add to it to draw triangles in a hexagon pattern.
      Code Studio Puzzle Challenge 13 - Artist_instruction: "This is just like a\n\"for\"
        loop. Complete the code to draw six lines that grow from 50, 60, 70,\n80,
        90, to 100 pixels long. \n"
      Code Studio Puzzle Challenge 14 - Artist_instruction: "This is just like a\n\"for\"
        loop. Complete the loop to draw 4 squares that grow from 80, 100,\n120, to
        140 pixels. \n"
      Code Studio Puzzle Challenge 2 - Artist_instruction: |
        Now add a turn and another
        line. The lines are 200 pixels long.
      Code Studio Puzzle Challenge 3 - Artist_instruction: |
        Draw the square. Each
        side is 100 pixels long.
      Code Studio Puzzle Challenge 4 - Artist_instruction: |
        Draw the octagon. Each
        side is 100 pixels long.
      Code Studio Puzzle Challenge 5 - Bee (copy 1)_instruction: |
        Move the Bee to
        the flower and get the nectar.
      Code Studio Puzzle Challenge 5 - Bee_instruction: |
        Flowers contain a specific
        amount of nectar. Move the Bee to the flower and collect nectar with the get
        nectar block.
      Code Studio Puzzle Challenge 6 - Bee_instruction: |
        Honeycombs can hold a specific
        amount of honey. Get the nectar from the flower and make some honey.
      Code Studio Puzzle Challenge 7 - Bee_instruction: |
        Move the Bee to the flower
        and get the nectar.
      Code Studio Puzzle Challenge 8 - Bee_instruction: |
        The cloud could be hiding
        a flower or a honeycomb. Only get nectar from flowers. Only make honey at
        honeycombs.
      Code Studio Puzzle Challenge 9 - Bee_instruction: |
        The cloud could be hiding
        a flower or a honeycomb. Only get nectar from flowers. Only make honey at
        honeycombs.
      Code Studio Puzzle Challenge Artist Screencast (copy 1)_instruction: "Draw\nthe
        line. Each segment is 100 pixels long. \n"
      Code Studio Puzzle Challenge Artist Screencast 2_instruction: "Complete the\ncode
        to draw the line. Each segment is 100 pixels long. \n"
      Code Studio Puzzle Challenge Artist Screencast_instruction: "Draw the line.\nEach
        segment is 100 pixels long. \n"
      Code Studio Puzzle Challenge Bee Screencast_instruction: |
        Move the Bee to the
        flowers and get all of the nectar.
      Code Studio Puzzle Challenge Square - Artist_instruction: |
        Draw a square by
        using the variable length provided.
      Code Studio Puzzle Challenge Var - Artist_instruction: |
        Draw a line by using
        a variable "length" set to 180.
      Course 2 Bee Loops 1_instruction: "Hi, I'm a bee. Can you help me collect\nthe
        nectar from these flowers? \n"
      Course 2 Bee Loops 13_instruction: |
        Assessment: Use the repeat block to collect
        all of the nectar.
      Course 2 Bee Loops 2_instruction: |
        Can you do the same task more easily with
        a loop?
      Course 2 Bee Loops 3_instruction: |
        Now use the new repeat block to collect
        all of the nectar and make all of the honey.
      Course 2 Bee Loops 3__instruction: |
        Can you use a loop to collect all that
        nectar?
      Course 2 Bee Loops 4_instruction: |
        What happens if you loop this sequence 3
        times? Don't forget to make the honey at the end!
      Course 2 Maze Loops 1_instruction: "¿Puedes llevarme hasta el cerdo usando 5
        bloques?"
      Course 4 2_instruction: La abeja solo quiere néctar ahora mismo. Recuerda, no
        todos los objetos son flores, así que chequea, para solo recoger néctar de
        las flores.
      Course 4 Artist 1_instruction: Ayúdame a terminar de dibujar mi caja. (Cada
        línea es de 200 píxeles de largo)
      Course 4 Artist 10_instruction: |-
        Haz clic pra ver las sugerencias otra vez!\r
        \r
        Aqui
        esta el codigo para una interesante figura. Que pasa cuando lo repites muchas veces, torneado entre cada iteraccion? nota que el giro en esta figura agrega mas de 420 grados, el cual significa que cuando el artista termino de dibujar, vera otra direccion difente que cuando empezo. Esa nueva direccion es exacta 60 grados a la derecha de cuando comenzo.
      Course 4 Artist 11_instruction: "¡Ahora, un desafío! Aquí hay un diseño que
        solamente usa bloques que ya te hemos mostrado. ¿Puedes averiguar cómo crearlo
        nuevamente sin información extra? Sugerencia: Tantea, usa ensayo y error.
        No se espera que esté perfecto la primera vez."
      Course 4 Artist 12_instruction: "¿Quieres un segundo vistazo al diseño de inspiración
        o los consejos?  Haga clic aquí! \\r \\r si lo prefieres, ¡crea un diseño
        propio!"
      Course 4 Artist 13_instruction: "¿Aún jugando? aquí hay un lienzo en blanco
        donde usted podrá diseñar lo que quiera!"
      Course 4 Artist 2_instruction: "¿Puedes enlazar este código para que dibuje
        de gris el cuadrado?"
      Course 4 Artist 20_instruction: "¿Aún jugando? aquí hay un lienzo en blanco
        donde usted podrá crear lo que quiera!"
      Course 4 Artist 3_instruction: Muy bien, trat de averiguar que sucede si ejecutas
        este código (o presionas "Run" para comprobarlo). Entonces repítelo varias
        veces hasta completar el dibujo.
      Course 4 Artist 4_instruction: "¿Cúantos grados tiene un círculo? Rellena el
        bloque de repetición con ese número para crear un círculo de colores."
      Course 4 Artist 5_instruction: Dibuja la otra mitad de este diseño de tal manera
        que sea simétrico. Los triángulos son equiláteros y tienen 50 píxeles de longitud.
      Course 4 Artist 6_instruction: |
        Completa el código para dibujar estos triángulos.
        Sugerencia: 3 triángulos en una rotación de 360 grados.
      Course 4 Artist 7_instruction: 'Ahora anida este circuito dentro de otro circuito
        para dibujar 3 triángulos. Esto es llamado un circuito anidado. Sugerencia:
        Todos los 10 triángulos completan una rotación de 360 grados.'
      Course 4 Artist 8_instruction: Dibuje este sol enlazando este bloque de código
        íntegramente 12 veces.
      Course 4 Artist 8a_instruction: "¿Recuerdas esta forma?  Ahora vamos a dejarte
        construir la sin darte ningún bloques para empezar! \\r sugerencia: hay 3
        triángulos dentro de la rotación de 360 grados... ¿Cuántas veces 3 va en 360?"
      Course 4 Artist 9_instruction: 'Continúe con este diseño 10 veces y asegúrese
        que cada forma que dibuja apunte hacia adentro.  Aquí hay una sugerencia cuánto
        más debe apuntar: ¿Cuánto es 360 dividido entre 10?'
      Course 4 Artist Binary 1_instruction: Aquí hay una función que toma una cadena
        binaria de 0 y 1 e instruye al artista a que gire de izquierda a derecha,
        de arriba hacia abajo, llenando  los cuadrados cuando ve 1 e ignorándolos
        cuando ve 0. Corre este código para ver como el artista usa el binario para
        dibujar el patrón.
      Course 4 Artist Binary 1a_instruction: Aquí hay una función que toma una cadena
        binaria de 0 y 1 e instruye al artista a que gire de izquierda a derecha,
        de arriba hacia abajo, llenando  los cuadrados cuando ve 1 e ignorándolos
        cuando ve 0. Corre este código para ver como el artista usa el binario para
        dibujar el patrón.
      Course 4 Artist Binary 2_instruction: "¿Cuántas de estas secuencias binarias
        podría enlazar 8 veces para dibujar esta imagen?"
      Course 4 Artist Binary 3_instruction: "¿Puede dibujar este molde enlazando una
        secuencia binaria de tres dígitos?"
      Course 4 Artist Binary 4_instruction: Cada secuencia binaria representa una
        fila de esta figura.  ¿Puede re acomodarla de tal manera que dibuje una cara
        con una sonrisa en lugar de una cara de aspecto fruncido?
      Course 4 Artist Binary 5_instruction: "¿Cual de las secuencias binarias de 6
        dígitos, repetidas 11 veces, dibujará esta imagen?"
      Course 4 Artist Binary 6_instruction: "¿Cuál es la secuencia binaria más corta
        que puede repetir para dibujar esta imagen?"
      Course 4 Artist Binary 7_instruction: Termine este dibujo.
      Course 4 Artist Binary Free Play 2_instruction: 'Juego Libre: Aquí tiene un
        lienzo de alta resolución para dibujar - 16 bits por 16 bits!'
      Course 4 Artist Binary Free Play 2a_instruction: |-
        Aquí hay un lienzo con mejor resolución para pintar - 16 pixeles por 16 pixeles!\r
        \r
        ¿Ves lo que pasa cuando empezamos a ser creativos con los bits?
      Course 4 Artist Binary Free Play 2b_instruction: Haga clic aquí para ver sugerencias.
      Course 4 Artist Binary Free Play_instruction: 'Juego Gratis: Dibuje lo que quiera
        con binarios!'
      Course 4 Artist Binary pre1_instruction: Binario es una forma de representar
        información mediante sólo dos opciones.  Aquí, vamos a usar las opciones "apagado"
        (representado por el número 0) y "encendido" (representado por el número 1).  \r
        \r Le hemos provisto con una red de "píxeles" que usted podrá revisar y hacer
        diseños encendiendo sólo algunos cuadrados.  ¿Puede hacer que el artista pinte
        "01010101" en binario en la primera fila?
      Course 4 Artist Binary ryan_instruction: Binario es una forma de representar
        información mediante sólo dos opciones.  Aquí, vamos a usar las opciones "apagado"
        (representado por el número 0) y "encendido" (representado por el número 1).  \r
        \r Le hemos provisto con una red de "píxeles" que usted podrá revisar y hacer
        diseños encendiendo sólo algunos cuadrados.  ¿Puede hacer que el artista pinte
        "01010101" en binario en la primera fila?
      Course 4 Artist For  Functions 10_instruction: Elevemos un poco el nivel de
        dificultad ¿Puede dibujar una forma de estrella usando el la función "Dibuje
        una Línea Cuadrada"? ¡Buena suerte!
      Course 4 Artist For  Functions 11_instruction: Elevemos un poco el nivel de
        dificultad ¿Puede dibujar una forma de estrella usando el la función "Dibuje
        una Línea Cuadrada"? ¡Buena suerte!
      Course 4 Artist For Loops 1_instruction: 'Dibuje este triángulo que tiene un
        tamaño de 50 pixeles.  Sugerencia: Use un bloque de repetición.'
      Course 4 Artist For Loops 10_instruction: 'Juego Gratis: Diviértase dibujando
        lo que le guste con los bloques que ha aprendido a usar'
      Course 4 Artist For Loops 11_instruction: "¿Recuerdas cuando usamos una variable
        para controlar el número de lados de una forma? Este patrón empieza con un
        triángulo y agrega un cada lado a la vez hasta que dibuja un decágono (10
        lados). cada lado debe ser de 100 píxeles de largo. Sugerencia: 360 dividido
        por el número de lados de una forma, es el número de grados que necesitarás
        para girar."
      Course 4 Artist For Loops 11a_instruction: Vamos a poner todo junto!  Usando
        tu conocimiento de "ciclos for" y del "contador", crear este dibujo donde
        cada forma tiene dos partes más que el anterior.  Asegúrate de que cada lado
        sea 10 veces mas largo que el número de lados del polígono. \r \r muy poco
        del código se ha proporcionado para ti.
      Course 4 Artist For Loops 12_instruction: 'Eso se ve muy bien, pero ahora me
        gustaría que dibuje cada forma junto a la otra.  Esta vez, cada lado es de
        20 pixeles.  Use un bloque de salto para saltar 20 pixeles adelante después
        de cada forma. '
      Course 4 Artist For Loops 13_instruction: "¡Hmmm, esas formas están creciendo
        a cada instante! ¿No solucionamos este problema con las variables? ¿Cómo podemos
        usar la variable de contar para hacer lados mas pequenos, ya que hay mas de
        ellos? En lugar de mover hacia adelante estableciendo una cantidad, tratemos
        de avanzar (100/counter) píxeles."
      Course 4 Artist For Loops 14_instruction: Si girara un poco más o menos de lo
        que normalmente haría para una forma, crearía un efecto más nítido.  Intente
        girar 89 grados para crear esta espiral cuadrada torcida.
      Course 4 Artist For Loops 15_instruction: 'Juego Gratis: Intente hacer algunos
        dibujos propios usando Para Vueltas.  Hemos añadido también algunas variables
        genéricas para su uso.'
      Course 4 Artist For Loops 2_instruction: 'He puesto un código para dibujar un
        triángulo dentro de una iteración que cuenta de 50 a 100 por 10.  Revise cómo
        he creado el código y presione "Ejecutar" cuando esté listo para verlo en
        acción. '
      Course 4 Artist For Loops 3_instruction: El triángulo más pequeño tiene 20 píxeles
        de lado, el más grande tiene 200 píxeles de lado y cada triángulo es 20 píxeles
        más grande que el anterior. Actualiza el bucle "for" para dibujar estos triángulos.
      Course 4 Artist For Loops 4_instruction: 'Usa un bucle "FOR" para dibujar estos
        cuadrados. Empiezan a 15 píxeles de largo, el más grande es de 300 píxeles
        de largos, y cada cuadrado es 15 píxeles más grande que el anterior. Te he
        dado casi todo el código que vas a necesitar - haz perdido un bloque, ¿cuál
        es. '
      Course 4 Artist For Loops 5_instruction: ¡Buen trabajo en el último rompecabezas!
        Usemos ese bloque variable "counter" de nuevo para dibujar esta asombrosa
        pintura.
      Course 4 Artist For Loops 6_instruction: "¡Juego gratis! Intenta usando un circuito
        para dibujar un patrón de forma creciente con tu propio diseño."
      Course 4 Artist For Loops 6a_instruction: Haz 3 pequeños cambios al código desde
        el último nivel para obtener esto!
      Course 4 Artist For Loops 7_instruction: Que pasa si eliminas el "repeat 3"
        de este algoritmo, manteniendo los bloques "move" y "turn" en el circuito.
        En este triángulo en espiral, cada lado es 20 píxeles mas largo que el anterior.
      Course 4 Artist For Loops 8_instruction: La línea mas pequeña de este espiral
        cuadrado es 10, el mas largo es 200, y cada línea es 10 píxeles mas larga
        que la anterior. ¿Puedes llenar los bloques faltantes para completar este
        sorprendente dibujo?
      Course 4 Artist For Loops 8a_instruction: La línea mas pequeña de este espiral
        cuadrado es 10, el mas largo es 200, y cada línea es 10 píxeles mas larga
        que la anterior. ¿Puedes llenar los bloques faltantes para completar este
        sorprendente dibujo?
      Course 4 Artist For Loops 9_instruction: "¿Puedes hacer un espiral? avanza de
        1 a 75 píxeles, incrementando de  1 a 1 píxeles."
      Course 4 Artist For Loops Challenge_instruction: |-
        Con todas las cosas que ha aprendido, podrías decir como se hizo esta imagen?\r
        \r
        Necesita una ayuda? Presione aquí.
      Course 4 Artist For Loops inspire_instruction: 'Inspiración de juego libre:
        Ahora has aprendido todo lo que necesitas saber para hacer un patrón como
        este! Si te inspira esta imagen, tratar de hacer algo similar. De lo contrario,
        crea algo por tu cuenta. \r \r quieres saber cómo se hizo nuestro patron de
        inspiración? Visita https://studio.code.org/c/106387604 para la solución.'
      Course 4 Artist Functions 1_instruction: "¿Puedes dibujar en cuadrado que tiene
        100 píxeles de longitud, utilizando un circuito?"
      Course 4 Artist Functions 10_instruction: "¿Cúal bloque necesitas agregar para
        conseguir que el triángulo se ubique en la cima del cuadrado?"
      Course 4 Artist Functions 11_instruction: Mira este código que dibuja un cubo
        - ¿Puedes moverlo en una función llamada "Draw a cube"?
      Course 4 Artist Functions 12.1_instruction: Creemos una función llamada "dibujar
        un octágono 20" que dibuja un octágono donde cada lado es de 20 píxeles de
        largo.
      Course 4 Artist Functions 12_instruction: La función circuito cudrado para dibujar
        una línea
      Course 4 Artist Functions 13.1_instruction: 'Ahora, vamos a hacer una función
        llamada "salto para arriba a la derecha" que  mueve el artista a la derecha
        superior del Octógono que usted acaba de dibujar por lo que podemos terminar
        este toque patrón. \r \r: para usted llegar a la esquina superior derecha,
        tratar de saltar en un patrón que hace apenas 3/8 del octógono.'
      Course 4 Artist Functions 13_instruction: Mira, tenemos una nueva función llamada
        "draw a line of squares". No dudes en echar un vistazo dentro de la función
        de bloque para ver como se construye. Haz click en "Run" cuando  estés listo
        para el siguiente rompezabezas.
      Course 4 Artist Functions 14.1_instruction: Ahora, vamos a hacer una función
        llamada "saltar arriba a la derecha" que mueve el artista a la parte superior
        derecha del Octógono que usted acaba de dibujar por lo que podemos terminar
        este patrón.
      Course 4 Artist Functions 14_instruction: ¡Estás haciéndolo muy bien! Usemos
        tu nueva función "Draw a line of squares" para dibujar un cuadrado. Recuerda
        que cada cuadrado es de 40 píxeles de longitud.
      Course 4 Artist Functions 15_instruction: '¡Demos un pequeño paso hacia adelante!
        ¿Puedes dibujar una forma de estrella usando la función "dibuja una línea
        de cuadrados"? ¡Buena Suerte! Sugerencia: Debes girar a 144 grados'
      Course 4 Artist Functions 2_instruction: "¿Puedes dibujar 3 cuadrados de 20
        píxeles separado uno del otro? Sugerencia: cada cuadrado es de medida 100
        píxeles "
      Course 4 Artist Functions 3_instruction: 'Usando la función de bloque "dibuja
        un cuadrado" ¿Puedes dibujar este dibujo? Sugerencia: cada cuadrado debe ser
        de 120 píxeles entre uno y otro.'
      Course 4 Artist Functions 4_instruction: '¿Estás listo para crear tu propio
        "Function Block"? Haz click en el bloque "functions" en la caja de herramientas,
        donde dice "draw a triangle", entonces crea un triángulo como lo has hecho
        con anterioridad con los bloques acción y circuitos. Haz click en guardar
        y cerrar en la esquina superior derecha . Sugerencia: Crea un triángulo que
        tiene 100 píxeles de longitud. ¡Buena suerte!'
      Course 4 Artist Functions 5 OLD_instruction: Tratemos de usar nuestras dos funciones
        para dibujar una casa - ¿Qué se necesita arreglar en este código para dibujar
        la casa correctamente?
      Course 4 Artist Functions 5_instruction: 'Usando la función de bloque "dibuja
        un cuadrado" ¿Puedes dibujar este dibujo? Sugerencia: cada cuadrado debe ser
        de 120 píxeles entre uno y otro.'
      Course 4 Artist Functions 6_instruction: "¿Cúal bloque necesitas agregar para
        conseguir que el triángulo se ubique en la cima del cuadrado?"
      Course 4 Artist Functions 7_instruction: "¿Puedes dibujar una línea de cuadrados
        usando la función de cuadrado? Cada cuadrado es 40 píxeles de longutud."
      Course 4 Artist Functions 8_instruction: '¿Le estás agarrando el tiro de como
        usar la función de los bloques? Modifiquemos este cuadrado de medida 200 píxeles.
        Sugerencia: haz click en "edit" para cambiar el tamaño del "draw a square"
        en la función editor. Recuerda hacer click en "guardar y cerrar" para salir
        de la función editor.'
      Course 4 Artist Functions 9_instruction: Te hemos dado la mayor parte del código
        para crear una función. Sin embargo parece que falta algo. ¿Puedes completar
        esta función de bloques?
      Course 4 Artist Functions challenge_instruction: Click aquí para ver las sugerencias
        nuevamente.
      Course 4 Artist Functions Inspiration_instruction: Click aquí para ver las sugerencias
        nuevamente.
      Course 4 Artist Functions inspire_instruction: 'Inspiración de juego libre:
        Ahora has aprendido todo lo que necesitas saber para hacer un patrón como
        este! Si te inspira esta imagen, tratar de hacer algo similar. De lo contrario,
        crea algo por tu cuenta. \r \r quieres saber cómo se hizo nuestro patron de
        inspiración? Visita https://studio.code.org/c/106387604 para la solución.'
      Course 4 Artist Inspire_instruction: 'Inspiración para ejercicio libre: ¡Ya
        has aprendido todo lo que necesitas saber para hacer un patrón como este!  Si
        te inspira esta imagen, tratar de hacer algo similar.  Si no, crea algo por
        tu cuenta \r \r ¿Quieres saber cómo se hizo nuestro modelo de inspiración?
        Echa un vistazo aquí: https://levelbuilder-studio.code.org/c/8781/edit'
      Course 4 Artist Params 1_instruction: Editemos una función que dibuje un cuadrado
        de 50 píxeles cada lado
      Course 4 Artist Params 10_instruction: ¡Puedes llamar una función dentro de
        otra función! Utilizando tu función "shape" como base, crea 3 formas de casa
        cada una de 20 píxeles mas larga que la anterior, empezando con 50 píxeles
        de longitud. Usar un circuito de contar puede ser útil.
      Course 4 Artist Params 11_instruction: |
        How about a function called "pinwheel"
        that takes three parameters - "sides," "length" and "repeat." You can
        calculate how much to turn after each shape using the same math you used to
        figure out the turns for a shape of "sides". Can you recreate this picture?
        Here's a tip each shape is 100 pixel's in length.
      Course 4 Artist Params 12_instruction: Utilice la función "pinwheel" (molinete)
        para dibujar cada una de estas formas. La longitud del lado de cada imagen
        es 50.
      Course 4 Artist Params 13_instruction: 'Freeplay: Aquí están las funciones que
        has escrito y un algunas más para que juegues. Dibuja algo impresionante!'
      Course 4 Artist Params 2_instruction: |
        That triangle function would be a whole
        lot more useful if it could draw triangles of different sizes. I've added
        a parameter for line length, but it doesn't do anything yet. Can you update
        the function so it uses the "length" parameter when it draws each side?
        The triangle sizes are 150 pixels, 75 pixels and 25 pixels.
      Course 4 Artist Params 3_instruction: 'Impresionante, ¿puedes dibujar cada uno
        de estos triángulos con esa nueva función? El primero es 25 píxeles de largo,
        el segundo es de 50, y el tercero es de 75. '
      Course 4 Artist Params 4_instruction: "¿Puede agregar una nueva función llamada
        cuadrado? También debe tomar un parámetro de longitud, al igual que el triángulo.
        Esta vez dibuja 3 cuadrados, 25, 50 y 75 píxeles de lado, aparte uno de 100
        píxeles."
      Course 4 Artist Params 5_instruction: Usa tus dos funciones para dibujar esta
        imagen. Para hacer esto más fácil, usa un bucle con un parámetro de "contador".
      Course 4 Artist Params 6_instruction: "Vamos a editar esta función \"dibujar
        una forma\".\nYa tiene un parámetro de \"longitud\". Ahora, vamos  a editar
        la función para añadir un parámetro \"lados\". Recuerda que el ángulo de una
        forma determinada es 360 dividido por la cantidad de lados que tiene. Sugerencia:
        las longitudes para cada forma son: el triángulo 100 píxeles, el hexágono
        es 25 píxeles y el cuadrado es de 50 píxeles. \n"
      Course 4 Artist Params 7_instruction: 'Puedes dibujar estas formas rellenando
        el "???" El cuadrado y triángulo son 100 píxeles de tamaño mientras que el
        hexágono es 75 píxeles de tamaño. '
      Course 4 Artist Params 8_instruction: "¿Puedes calcular cómo dibujar esta forma?
        \nAquí hay una pista, crea una nueva función con 6 lados llamada hexágono.
        \n"
      Course 4 Artist Params 9_instruction: ¿Recuerdas cuando usamos el bucle con
        Contador pero habíamos quitado un bucle dentro? Vamos a divertirnos y usa
        la función "dibujar una forma" con parámetros de "lados" y "longitud". ¿Puede
        volver a crear estas formas? El contador de cuadrados debe ser 5/100/5, el
        contador del triángulo debe ser 10/100/10 y el hexágono es 2/100/2.
      Course 4 Artist Var 9_instruction: 'Aquí está el algoritmo para dibujar un triángulo,
        modificarlo para que utilice la variable "lados". Reemplazar el número 3 con
        la variable "lados". Sugerencia: Recuerda que debes utilizar el bloque de
        "set sides to".'
      Course 4 Artist Vars 1_instruction: "¿Puedes ayudarme a dibujar un triángulo?
        Es de 100 píxeles de largo en cada lado."
      Course 4 Artist Vars 10_instruction: Aquí encontrarás un algoritmo que dibuja
        un triángulo de pequeños triángulos. ¿Podrías modificarlo usando la variable
        de "sides" para dibujar cada triángulo? Observa a través del código y cada
        vez que veas el número 3, reemplázalo con tu variable "sides". Recuerda el
        uso del bloque "set sides".
      Course 4 Artist Vars 11_instruction: Aquí está el mismo algoritmo que ideamos
        con el último rompecabezas - ¿Qué debes establecer en la variable "sides"
        para dibujar este dibujo de cuadrados?
      Course 4 Artist Vars 12_instruction: Vamos a poner la variable "sides" en 5.
        Si agrego mas lados a este algoritmo, ¡mas grande es el patrón entero!. Agreguemos
        una nueva variable llamada longitud "lengh" y úsala si tienes que avanzar
        "move forward". Establece la variable longitud "lengh" a 75 para esta figura.
      Course 4 Artist Vars 13_instruction: "Cuando una forma tiene varios lados, cada
        lado necesita ser más corto Si tu quieres el patrón completo para ajustar
        la pantalla. \n\\r\nVamos a recrear el algoritmo desde este increíble patrón,
        pero en lugar de poner manualmente la variable de \"longitud\", vamos a usar
        un bloque de matemáticas con la variable de \"lados\" dentro para asegurarse
        que cada forma se ajusta correctamente. ¿El perímetro de cada polígono es
        de 300 píxeles.\\r\nNecesitas algunos consejos?  Haga clic aquí."
      Course 4 Artist Vars 14_instruction: 'Juego Gratis: revísalo, ahora tu algoritmo
        está anidado dentro de otro circuito. Experimenta cambiando los valores de
        tus dos variables para dibujar patrones asombrosos.'
      Course 4 Artist Vars 2_instruction: En lugar de avanzar por 100 "moving forward
        by 100", el bloque mover "move" ahora referencia la variable longitud "lengh".
        ¿ Podrías establecer la longitud "lengh" a 150 para dibujar este nuevo triángulo?.
      Course 4 Artist Vars 3_instruction: 'Aquí es un bucle que dibuja un cuadrado,
        pero algo esta mal. ¿Puedes arreglarlo para que utiliza la variable "largo"
        para averiguar que tan largo debe se cada lado? '
      Course 4 Artist Vars 4_instruction: Ahora quiero hacer un rectángulo que es
        dos veces tan alto como ancha. Tenemos una variable llamada "ancho" que se
        encuentra a 100. ¿Puedes usar los bloques de matemáticas para completar el
        código?
      Course 4 Artist Vars 5_instruction: Utiliza las variable "caras" para controlar
        cuántas veces el bucle se repite.
      Course 4 Artist Vars 6_instruction: |-
        Aquí hay un código que puede dibujar cualquier polígono regular. Hay una nueva variable llamada lados que se inicializa a 4. ¿Puedes usar la variable lados (junto con el bloque de matemáticas) para activar la cantidad correcta independientemente de cuantos lados hay en el polígono?\r
        \r
        ¡Click aquí para regresar a la pista!
      Course 4 Artist Vars 7_instruction: |-
        Utiliza lo que aprendiste en el rompecabezas anterior para crear el hexagono usando la variable "lados"\r
        \r
        Ve como puedes cambiar solo una varable para dibujar un traingulo, cuadrado, pentagono, o octagono?
      Course 4 Artist Vars 8_instruction: 'Juego libre: Experimento con el número
        de lados de esta forma. ¿Puedes cambiar el algoritmo de modo que el tamaño
        total de la forma sigue siendo el mismo, no importa cuántos lados tengá? Consejo:
        Tendrás que usar tus bloques de matemáticas (360 dividido por "caras" en dos
        lugares esta vez) '
      Course 4 Artist Vars 9_instruction: Modificar este algoritmo para utilizar la
        variable "caras" en lugar de un número fijo para dibujar un triángulo. Reemplazar
        el número 3 con la variable "caras" y utilizar el bloque de "establecer lados".
      Course 4 Bee 1_instruction: 'La abeja no puede decir si se trata de una flor
        o un panal de miel. Compruebe primero si se trata de una flor o un panal de
        abejas y entonces sólo recogen néctar de si es una flor. '
      Course 4 Bee 2_instruction: Utiliza el bloque "Si/de lo contratio" para revisar
        cada objeto para ver si es una flor o un panal...de lo contrario, haz miel!
      Course 4 Bee 3_instruction: El objeto desconocido es una flor o un panal de
        miel. Ahora utiliza el bloque "Si/de lo contrario" para colectar néctar, "Si"
        si es una flor, "de lo contrario" haz miel (porque entonces sería un panal).
      Course 4 Bee 4_instruction: Esta flor púrpura puede tener 3, 2 o 1 néctar. Aquí
        un bloque Si-de lo contrario es combinado con otro bloque bloque Si/de lo
        contrario para crear una sentencia "Si/de lo contrario-Si/de lo contrario".
        Completa la solución para recoger la cantidad desconocida de néctar.
      Course 4 Bee 5_instruction: Esta flor púrpura puede tener 3, 2 o 1 néctares.
        Agrega un bloque si-de lo contrario para crear un bloque si, de lo contrario-si,
        de lo contrario. Completa la solución para recolectar la cantidad desconocida
        de néctar.
      Course 4 Bee 6_instruction: Esta flor púrpura puede tener 3, 2 o 1 néctares.
        Crea un bloque si, de lo contrario-si, de lo contrario para recoger la cantidad
        desconocida de néctar.
      Course 4 Bee 7_instruction: Aprovecha todo lo que has aprendido hasta ahora
        para recolectar todo el néctar. La flor púrpura puede tener 3, 2 o 1 néctares.
      Course 4 Bee For Loops 1_instruction: Utilizar un bucle para recolectar el néctar
        de cada flor.
      Course 4 Bee For Loops 10_instruction: Si tu ciclo es regresivo, se resta el
        incremento de la variable contador en cada bucle. Lo que debería ser un incremento
        a recoger néctar 9, luego 6 y 3 ?
      Course 4 Bee For Loops 11_instruction: "¿Que hay de malo en este ciclo? A ver
        si puedes arreglarlo y hacer que las abejas recolecten el néctar."
      Course 4 Bee For Loops 2_instruction: Aquí es un nuevo tipo de lazo, llamado
        el bucle "for" . Este particular bucle for contará de 1 a 5 por 1 y ejecutar
        el contenido del bucle cada vez cuenta. Ayudar a la abeja el néctar.
      Course 4 Bee For Loops 3_instruction: Puede resolver este problema utilizando
        un bucle para contar del 1 al 3 por 1. Ahora vamos a obtener un néctar!
      Course 4 Bee For Loops 4_instruction: Recoge todo el néctar de las flores. Me
        pregunto si hay una manera más fácil de hacer esto...
      Course 4 Bee For Loops 5_instruction: 'Ah, el bucle esto hace mucho más fácil!
        Usando la variable "contador" de la de circuito a circuito el "obtener néctar"
        bloquea el mismo número de veces que el bucle. Wow! Eso es un montón de bucles.
        Todo el código que necesitas, echa un vistazo a cómo es juntar a continuación,
        haga clic en ejecutar y ver cómo funciona. '
      Course 4 Bee For Loops 6_instruction: También puedes utilizar un bucle a contar
        hacia atrás. Trata de recoger este néctar por la cuenta regresiva del 5 al
        1 por 1.
      Course 4 Bee For Loops 7_instruction: Usa tu variable "contador" de bucle para
        el controlar que tan lejos debe moverse horizontalmente.
      Course 4 Bee For Loops 8_instruction: "¿Puedes usar la variable del bucle para
        controlar el movimiento y la recolección de néctar?"
      Course 4 Bee For Loops 9_instruction: El último número en tu bucle for se llama
        "incremento", y cada vez que se ejecuta el bucle la variable contador cambia
        por el incremento, Trata de recoger la flores usando un incremento de 2.
      Course 4 Bee Loops 5 NEW_instruction: Aquí hay tres flores. ¿Puedes encontrar
        el patrón de instrucciones que se repita 3 veces para recoger el néctar con
        el menor número de bloques?
      Course 4 Bee Loops 5a NEW_instruction: Ahora, utiliza ciclos para ayudar a la
        abeja a recoger todo el néctar en su camino hacia el panal con tan pocos bloques
        como sea posible.  Al llegar allí, no olvides hacer la miel!
      Course 4 Bee Params 1_instruction: Use la función "obtener néctar 3" que gira,
        mueve para recoger el néctar y luego regresa a su ubicación original.  Escriba
        una secuencia par recoger todo el néctar usando "obtener nectar 3".
      Course 4 Bee Params 2_instruction: Modifique la función "obtener néctar 3" dede
        tal manera que me haga girar a la derecha hacia las flores en vez de izquierda.
      Course 4 Bee Params 3 (copy 1)_instruction: ¡Ahora hay flores en ambos lados!
        Tal vez puede usar un parámetro de tal manera que la misma funcione para la
        flores en cada lado.  He añadido un parámetro a la función denominado "dirección".  Si
        el parámetro "dirección" es igual a 0 debería voltear a la izquierda, si es
        1 debería voltear a la derecha.
      Course 4 Bee Params 3_instruction: ¡Ahora hay flores en ambos lados! He añadido
        un parámetro a la función.  Use las variables "izquierda" y "derecha" para
        controlar la dirección.  Termine el resto de la definición de la función y
        luego haga click en "Salver y Cerrar".
      Course 4 Bee Params 4 (copy 1)_instruction: Trate de usar la nueva función para
        recoger todas las flores.  Recuerde, 0 = izquierda y 1 = derecha.
      Course 4 Bee Params 4 - Two WhenRun_instruction: Pruebe usando su nueva función
        para recolectar todas las flores. Recuerde usar las variables izquierda y
        derecha.
      Course 4 Bee Params 4 backup_instruction: ¿No sería bueno si pudiéramos recoger
        todo este néctar con una sola función? Intente añadir un nuevo parámetro a
        la función denominada "néctares" para controlar la cantidad de néctar a ser
        recogido.  Probablemente también querrás cambiar de nombre a la función!
      Course 4 Bee Params 4_instruction: Intente usar su nueva función para recoger
        todas las flores.  Recuerde usar las variables izquierda y derecha.
      Course 4 Bee Params 5_instruction: Vamos a empezar desde cero - ¿Puedes crear
        una nueva función llamada "consigue 5 néctares" con un parámetro de dirección?
      Course 4 Bee Params 6 (copy 1)_instruction: Intenta utilizar tu nueva función
        para recolectar todo este néctar.
      Course 4 Bee Params 6_instruction: No sería genial si pudiéramos recolectar
        todo este néctar con una sola función? Intenta agregar un nuevo parámetro
        a tu función "nectars" para controlar la cantidad de nectar para recolectar.
        Probablemente quieras renombrar la función también!
      Course 4 Bee Params 7 (copy 1)_instruction: Intenta utilizar tu nueva función
        para recolectar todo este néctar.
      Course 4 Bee Params 7_instruction: Trata de utilizar tu nueva función para recolectar
        todos este néctar.
      Course 4 Bee Params 8 Clone 2_instruction: Oooh, ahora hay miel con la que lidiar
        también! Cómo puedes actualizar tu función para así obtener néctar o hacer
        miel.
      Course 4 Bee Params 8 clone 3_instruction: Oooh, ahora hay miel con la que lidiar
        también! Cómo puedes actualizar tu función para así obtener néctar o hacer
        miel.
      Course 4 Bee Params 8 Clone_instruction: Oooh, ahora hay miel con la que lidiar
        también! Cómo puedes actualizar tu función para así obtener néctar o hacer
        miel.
      Course 4 Bee Params 8 new_instruction: Oooh, ahora también hay miel de la que
        ocuparse! Cómo puedes actualizar tu función para así obtener néctar o hacer
        miel?
      Course 4 Bee Params 8_instruction: 'Desafio: Ahora hay que ocuparse de la miel!
        Vuelve a escribir tu funcion para usar las dos el numero de unidades de miel
        y el numero de unidades de nectar. ¿Cómo utilizarias esos numeros para decidir
        que puedes hacer?'
      Course 4 Bee Params Ex_instruction: Trata de utilizar tu nueva función para
        recolectar todos este néctar.
      Course 4 Binary 1_instruction: Esta es una función que toma una cadena binaria
        de 0s y 1s e instruye al granjero girar de izquierda a derecha, de arriba
        a abajo, girando en los cuadrados donde el número tiene un cero. Ejecute el
        código proporcionado para ver cómo los granjeros utilizan binario para dibujar
        una imagen.
      Course 4 Binary 2_instruction: '¿Qué cadena binaria podrías repetir 8 veces
        para dibujar esta imagen? Pista: el número "1" llena un hueco.'
      Course 4 Binary 3_instruction: "¿Puedes dibujar este patrón repitiendo una sola
        cadena binaria?"
      Course 4 Binary 5 (copy 1)_instruction: "¿Qué cadena binaria, repetida 10 veces,
        dibujará esta imagen?"
      Course 4 Binary 5_instruction: "¿Qué cadena binaria, repetida 10 veces, dibujará
        esta imagen?"
      Course 4 Binary 6 (copy 1)_instruction: "¿Qué cadena binaria, repetida 10 veces,
        dibujará esta imagen?"
      Course 4 Binary 6_instruction: "¿Qué cadena binaria, repetida 10 veces, dibujará
        esta imagen?"
      Course 4 Binary 7_instruction: "¿Qué cadena binaria, repetida 10 veces, dibujará
        esta imagen?"
      Course 4 Binary 8_instruction: Puedes completar la mayor parte de esta imagen
        repitiendo un numero binario de 5 bits - luego, necesitarás un número más
        de 4 bits a la esquina inferior derecha.
      Course 4 EC 1a_instruction: Sin reglas. Sin pistas. ¡Sólo el desafío!
      Course 4 EC 1b_instruction: Sin reglas. Sin pistas. ¡Sólo el desafío!
      Course 4 EC 2a_instruction: "**Reto Extremo:** No Reglas. No Pistas. Solo el
        reto!"
      Course 4 EC 2b_instruction: "**Reto Extremo:** No Reglas. No Pistas. Solo el
        reto!"
      Course 4 EC 2c_instruction: "**Reto Extremo:** No Reglas. No Pistas. Solo el
        reto!"
      Course 4 EC 3_instruction: 'Utiliza lo que aprendiste en la lección anterior
        para dibujar una imagen como esta. Nota: El código se vuelve más simple si
        incorporas parámetros. '
      Course 4 EC 3a_instruction: 'Desafío Extremo: Sin reglas. Sin pistas. ¡Solo
        el desafío!'
      Course 4 Maze 1_instruction: Envía las aves enojadas al cerdo!
      Course 4 Maze 2_instruction: Evite la TNT!
      Course 4 Maze 3_instruction: 'Programe la aves enojadas para llegar al cerdo. '
      Course 4 Maze 4_instruction: Intenta usar un bloque de "repeticion" para utilizar
        menos bloques cuando resuelvas el rompecabezas...
      Course 4 Maze 5_instruction: "¿Puedes resolver este rompecabezas utilizando
        el menor número de bloque posibles?"
      Course 4 Maze 6_instruction: "¿Puedes resolver este rompecabezas utilizando
        el menor número de bloque posibles?"
      Course 4 Play Lab For Loops 2_instruction: Esta vez, intentemos contar los números
        impares de 1 a 100.
      Course 4 Play Lab Params 1_instruction: Aquí está la función denominada "salto"
        que permite que tu personaje principal salte hasta 100 píxeles.  Use la función
        salto para recoger todas las banderas.
      Course 4 Play Lab Params 10_instruction: "Añadimos una última función para\nti.
        \\r\n\\r\nUtiliza una sentencia \"Si\" para que tu programa llame la funcion
        \"livel_mas\" solo cuando \"puntuacion_jugador\" sea mayor que un cierto numero.\\r\n\\r\nPor\nejemplo:
        \"puntuacion_jugador\" > 6\\r\n\\r\nJuega el juego, y hazlo pasar de nivel\n4
        para mover al siguiente problema. "
      Course 4 Play Lab Params 2_instruction: "¡Ahora tenemos banderas que son muy
        \naltas para nuestro actual salto! Usaremos ambas flechas \"arriba\" y \"abajo\"
        para poder tener mutiples saltos de altura.\\r\n\\r\nNecesitamos agregar un
        parametro\na nuestra funcion llamada \"altura\". La flecha arriba debe hacer
        al perro brincar 200 pixeles y la flecha de abajo debe hacerlo brincar solo
        100 pixeles.\n\\r\n\\r\nPista: deberas hacer clic en \"editar\" en la funcion
        brinca y actualizar para que uses el parametro \"altura\"."
      Course 4 Play Lab Params 3_instruction: "Añadimos otro parámetro a la función
        salto para poder usar otros actores. Cada actor es\nrepresentado\npor un numero,
        empezando de uno. Edita la funcion de \"salto\" para que \nutilise\nel parametro
        \"actor\" hacer el correcto salto del personaje. \n"
      Course 4 Play Lab Params 4_instruction: Aquí hay una función denominada "patrulla".
        Edítela para mover el Gato hacia arriba 400 píxeles y luego hacia abajo 400
        píxeles.
      Course 4 Play Lab Params 5_instruction: Llene el  parámetro de entrada "actor"
        de tal manera que podamos llamar la función "patrulla" para cada uno de los
        actores.  Recuerde, los actores corresponden a los números 1, 2 y 3.
      Course 4 Play Lab Params 6_instruction: |
        Agrega otro parámetro llamado "velocidad"
        a la función de "patrulla". Trata de usar un bloque "obten velocidad" con el nuevo parámetro "velocidad" para ayudar a Pingüino que obtenga ambas banderas antes de que los otros duendes obtengan una.
      Course 4 Play Lab Params 7_instruction: |-
        Vamos a divertinos! Mira el codigo dado para ver si puedes averiguar que es lo que hace cada bloque.\r
        \r
        cuando
        termines, usa las flechas de tu teclado para controlar el Perro y colecta todas las banderas.
      Course 4 Play Lab Params 8_instruction: Use un bloque "cuando el actor toque"
        para enviar al Perro de regreso al lado superior izquierdo SOLAMENTE si el
        Perro toca a alguno de los otros actores.
      Course 4 Play Lab Params 9_instruction: "Aquí esta nuestro juego de una etapa
        anterior,\npero la mayoría del código está oculto. Hay una nueva función \"puntuación.\"\\r\n\\r\neditar\nla
        función para que el parámetro \"puntos\" sea agregado a la variable \"puntuacion_jugador\".
        \\r\n\\r\nLa variable \"puntuación_jugador\" debe aumentar cada vez que\nPerro
        etiquete Gato con corazones y disminuir cada vez que Gato etiquete Perro con
        corazones. \\r\n\\r\nNota: cuando haya terminado, haga clic en \"Ejecutar\"
        para jugar. Cuando perro tenga 6 puntos, Tú serás llevado al siguiente rompecabezas. "
      Course 4 Play Lab Vars 1_instruction: Ahora no tienes que escribir nada de código,
        sólo presione "ejecutar" para jugar el juego! En este juego, Tu eres el perro
        que está tratando de recoger más banderas que el Gato. Use la flecha abajo
        para controlar al Perro. Presiona "Finalizar" cuando terminaste de jugar.
      Course 4 Play Lab Vars 2_instruction: |
        ¡Esa carrera en ese ultimo problema no
        fue justa! Cambia la variable de "velocidad_perro" para asegurarse que puede recoger más banderas que el Gato. ¡El primero en recoger 10 banderas gana!
      Course 4 Play Lab Vars 3_instruction: "¡Aquí tiene una nueva clase de juego!
        Use las flechas hacia la izquierda y hacia la derecha para moverse y las flechas
        hacia arriba y hacia para saltar.  Vea si puede recoger todas las banderas."
      Course 4 Play Lab Vars 4_instruction: 'Ahora estamos usando una variable denominada
        "altura" para controlar cuán alto puede saltar el perro.  Actualice la variable
        "altura" de tal manera que el perro pueda saltar lo suficientemente alto para
        alcanzar todas las banderas.  Pista: las banderas nuevas tienen 200 píxeles
        de altura.'
      Course 4 Play Lab Vars 5_instruction: ¡Diseñemos un juego! Primero necesitaremos
        una calificación.  Use el bloque "asigne puntos a" para establecer la calificación
        a 10.
      Course 4 Play Lab Vars 6 (copy 1)_instruction: "¡Que padre! ahora tenemos nuestra
        variable puantuacion\npero, ¿cómo vamos a hacerla útil? ¿Qué tal si añadimos
        tu variable\npuantuacion cada vez que toca al enemigo con una bola de fuego?
        Uza el evento \"cuando actor 2 toca cualquier cosa\" para generar una actualización
        a tu puntuacion cuando tus \nbolas de fuego\ntoquen al gato. Puedes incrementar
        tu puntuacion estableciendo puntuacion=\npuntuacion\n+ 1. Obten tu puntuacion
        mas de 10 (¡llendo una a la vez!) para pasar de nivel.\n"
      Course 4 Play Lab Vars 6_instruction: "Usa la flecha de la derecha para disparar
        corazones.\\r\n\\r\nEn\nnuestro juego, ¿Cómo deberíamos anotar puntos? Añada
        1 a su variable \"puntos\" cada vez que el \nPerro golpea al Gato con un corazon.
        Use el evento \"cuando actor 2 toca cualquier cosa\"\npara iniciar una actualización
        a tu puntuacion. Puedes incrementar tu variable estableciendo \"puntos = puntos
        + 1\". Obten tu puntaje mas de 10 (¡llendo uno a la vez!) para pasar de nivel."
      Course 4 Play Lab Vars 7_instruction: Bien, ahora asegurémonos que este juego
        no sea muy fácil - cada vez que el Perro (actor 1) es golpeado por una bola
        de fuego used debe perder un punto.  Empiece con 10 puntos de tal manera que
        no sea muy difícil.  Deje que su calificación caiga de 10 a 0 para pasar de
        nivel.
      Course 4 Play Lab Vars 8 (copy 1)_instruction: Muy bien, una consideración final
        para este juego - programémoslo de tal manera que el jugador pueda ganar (o
        perder).  Use una iteración infinita para verificar el valor de la calificación
        ' si la calificación es alguna vez mayor de 20, haga que el enemigo se esfume.  Si
        la calificación es menor de 0, haga que el jugador se esfume.  Presione "Terminar"
        cuando el juego funcione como le gustaría.
      Course 4 Play Lab Vars 8_instruction: Vamos a configurar este juego donde el
        Perro puede ganar (o perder). Use un ciclo continuo para verificar el valor
        de la puntuación - Si la puntuacion es mayor que 20, haz que desaparezca un
        enemigo (Un gato), SI la puntuacion es siempre menor que 0 haz que desaparezca
        el jugador (El Perro). Presiona "Finalizar" cuando el juego funcione como
        te gustaría.
      Course 4 Play Lab Vars 9_instruction: 'Tiempo Libre para jugar! Aquí estan todas
        las variables con las que hemos jugado hasta ahora, tambien unas pocas mas
        en caso de necesitarlas. Haz un juego o historia que utilice estas variables.
        Sugerencia: desplazate hacia abajo para ver todos los comandos en el área
        de trabajo.'
      Course 4 Play Lab Vars_instruction: Muy bien, una cosa mas para este juego -
        configuralo para que el pueda ganar ( peder). Usa un ciclo continuo para verificar
        el valor de la puntuación - si la puntuación es siempre mayor que 20. haz
        que el enemigo desaparezca. Si la puntuacion es siempre menor que 0, haz que
        el jugador desaparezca.
      Course 4 Play Labs For Loops 1_instruction: Vamos a hacer que el perro diga
        todos los números desde el 1 hasta el 100. Usa un ciclo y un bloque contador
        para decir la variable contador cada vez que se ejecute el ciclo.
      Course 4 Play Labs For Loops 2_instruction: Esta vez, intentemos contar los
        números impares de 1 a 100.
      Course 4 Play Labs For Loops 3_instruction: |
        Si contamos con numeros mayores
        nosotros podriamos contar velozmente en el mismo tiempo. Pruebalo haciendo al perro contar
        de 10 en 10 hasta mil empezando de 10
      Course 4 Play Labs For Loops 4_instruction: "Cambiare3l incremento puede ser
        \nbenefico, pero seguiriamos contando linearmente (cada número cambia en la
        misma medida que el anterior). ¿Que pasaría si contamos exponencialmente?
        Sin cambiar las instrucciones en este enlace, ¿podrías contar 1,4, 9,16,25...(contéo
        cuadrádico)? \n"
      Course 4 Play Labs For Loops 4a_instruction: Ahora, vamos a mezclar las variables
        del nivel 7 junto con la variable "contador" para que la magia suceda.   \r
        \r en este rompecabezas, el perro contará de 0 a 1000 "incrementando".  Establezca
        la variable "incremento" en 10 al principio de tu código para ver que pasa.
      Course 4 Play Labs For Loops 5_instruction: En el último paso, contamos el cuadrádo
        de cada número. Intenta cambiar "conteo ^ 2" a "contéo ^ 3" para trabajar
        con el cubo de cada número
      Course 4 Play Labs For Loops 5a_instruction: |-
        In this puzzle, Dog will be your
        time keeper.\r
        \r
        Dog will count from 0 to 30 by "increment".  The "increment"
        variable will begin with a value of 1.\r
        \r
        Can you make it so that each
        time you click Dog, the increment increases by 2?  Click the forward arrow
        to run the for loop.\r
        \r
        Run the loop a couple of times, clicking Dog before
        each one.
      Course 4 Play Labs For Loops 6_instruction: |
        Recordaras que los números primos
        es cualquer número que solo puede ser dividido por sí mísmo y por 1. Utiliza la función "is_prime" para dialogar solo con los números primos desde 1 a 100
      Course 4 Play Labs For Loops 6a_instruction: El Perro aún mantendrá tiempo contando
        con nuestro bucle "for" de incremento, pero esta vez, vamos a añadir el asistente
        en la mezcla.  Se puede cambiar el código para que el "incremento"  suba de
        dos en dos cada vez se hace clic en el Asistente? \r \r ¡ Cuidado!  El asistente
        se mueve rápidamente!
      Course 4 Play Labs For Loops 7_instruction: "¿Podrías utilizar un enlace para
        dialogar \nla secuencia 1,4,7,10,13,16,19,22,25?\n"
      Course 4 Play Labs For Loops 7a_instruction: Ahora estamos consiguiendo algo!  ¿Qué
        pasa si empezamos contando cuántas veces  podemos hacer clic en el Asistente
        de antes perro llega a 30?  \r \r terminar de añadir bloques al mago para
        que cada vez se hace clic en la variable "hacer clic en" aumenta en uno. Puede
        ignorar "incrementar" por ahora. \r \r perro comenzará a contar cuando usted
        haga clic en "Ejecutar".
      Course 4 Play Labs For Loops 8_instruction: |
        ¿Que enlace me haria dialogar
        19,27,35,43,51?
      Course 4 Play Labs For Loops 8a_instruction: Para terminar nuestro juego, tenemos
        que usar de nuevo la variable "incremento".    Vamos a vincularlo al nivel
        del juego. \r \r 1) registra la cantidad de veces que se hace clic en el asistente.
        \r 2) Si al mago se hace clic en al menos 10 veces antes de que el perro cuente
        30, sumar 1 a la variable "incrementar"  y comenzar de nuevo. \r 3) si el
        mago no hace clic en al menos 10 veces, el juego es terminado.
      Course 4 SCF 1_instruction: Utiliza las funciones sugeridas para dibujar cuatro
        filas de hexágonos. ¿Te das cuenta cómo nuestras filas pares se desplazan
        hacia la derecha?
      Course 4 SCF 1a_instruction: "¿Puedes averiguar como recolectar todo este néctar
        con la menor cantidad de bloques posibles?"
      Course 4 SCF 1b_instruction: "¿Puedes averiguar como recolectar todo este néctar
        con la menor cantidad de bloques posibles?"
      Course 4 SCF 2_instruction: 'Utiliza lo que aprendiste en la lección anterior
        para dibujar una imagen como esta. Nota: El código se vuelve más simple si
        incorporas parámetros. '
      Course 4 SCF 3 Fail 1_instruction: Puedes averiguar como...
      Course 4 SCF 3 Fail 2_instruction: Puedes averiguar como...
      Course 4 SCF 3_instruction: 'Utiliza lo que aprendiste en la lección anterior
        para dibujar una imagen como esta. Nota: El código se vuelve más simple si
        incorporas parámetros. '
      Course 4 SCFL 1_instruction: Resuelve este rompecabezas con la menor cantidad
        de bloques posible.
      Course 4 SCFL 1a_instruction: "¿Puedes hacer que Skrat llegue a su bellota usando
        la menor cantidad de bloques posible?"
      Course 4 SCFL 1b_instruction: "¿Puedes hacer que Skrat llegue a su bellota usando
        la menor cantidad de bloques posible?"
      Course 4 SCFL 2_instruction: Resuelve este rompecabezas con la menor cantidad
        de bloques posible.
      Course 4 SCFL 3_instruction: "¿Puedes averiguar como volver a crear este dibujo?"
      Course 4 SCFL 4_instruction: "¿Puedes averiguar como volver a crear este dibujo?"
      Course 4 SCFL 5_instruction: "¿Puedes averiguar como volver a crear este dibujo?"
      Course 4 SCFL 6_instruction: "¿Puedes averiguar como volver a crear este dibujo
        utilizando un solo ciclo?"
      Course 4 SCFL 7_instruction: "¡El artista quiere coger algunas olas! ¿Puedes
        averiguar como volver a crear este dibujo?"
      Course 4 SCFP 1_instruction: Crea una función con parámetros que permita al
        artista saltar hacia adelante y atrás una cantidad x de pixeles, y además
        arriba y abajo una cantidad y de pixeles (utilizando números positivos y negativos).
      Course 4 SCV 1_instruction: Haga clic aquí para ver las instrucciones de nuevo.
      Course 4 SCV 2_instruction: Haga clic aquí para ver las instrucciones de nuevo.
      Course 4 SCV 3_instruction: Ahora por un juego de tocar!  toca al Gato para
        obtener 2 puntos. Toca al Pingüino para conseguir 3 puntos.  Consigue 10 puntos
        para ganar! \r, pero ten cuidado, cuando Gato y Pingüino se tocan mutuamente,
        le quitan puntos. \r \r agregar los bloques necesarios para hacer de este
        juego funcionan de la manera que se explica.  ¿Cómo podrá el perro moverse
        en todas las direcciones con las flechas?  ¿Cómo se va añadir puntos cuando
        perro toque al gato o pingüino?  ¿Cómo se restarán puntos cuando gato y Pinguino
        se tocan?
      Course 4 SCV 4_instruction: Resuelve este rompecabezas con el menor número de
        bloques posible.
      Course 4 SCV 5_instruction: Resuelve este rompecabezas con el menor número de
        bloques posible.
      Course 4 SCV 6_instruction: Haga clic aquí para ver las instrucciones de nuevo.
      Course 4 SCVP 1_instruction: Crea una función con parámetros que permita al
        artista saltar hacia adelante y atrás una cantidad x de pixeles, y además
        arriba y abajo una cantidad y de pixeles (utilizando números positivos y negativos).
      Course 4 Variables Assessment_instruction: "¿Puedes crear esta imagen utilizando
        una variable para los lados? Cada línea debe tener 50 píxeles de largo."
      Course1BeePuzzle12_instruction: Get three nectars and then make two honey
      Course1MazeAssessment1_instruction: |-
        This is a test!\r
        Move one way, then
        another to get me to the pig
      Course1MazeAssessment2_instruction: |-
        This is a test!\r
        Move one way, then
        another to get me to the pig.
      CSP Data Unit - Counting Multiple Things_instruction: |-
        If you can count one
        thing you can count multiple things\r
        \r
        Find out how many people like something
        other than dogs and cats\r
        \r
        Count dogs\r
        Count cats\r
        Count total\r
        Do
        the math\r
        \r
        blank/ blank toal\r
        \r
        Can also use this to find percents
        from this\r
        \r
        x% are dog lovers
      CSP Data Unit -Counting Records - Easy Way_instruction: |
        ReadRecords with specific
        criteria \r
        find the length of an array\r
      CSP Data Unit -Counting Records - Hard Way_instruction: |
        \r
        1. ReadRecords
        for all records\r
        2. Way to loop through and count\r
      CSP U4 - JSON Object Intro - Bad Way_instruction: |
        Trigger both the keyboard
        and mouse event and examine the event objects displayed in the console. Why
        might an object be the best way to store this information? (Click to see full
        instructions)
      CSP U4 - JSON Object Intro - Good Way_instruction: "Create an object with at\nleast
        5 values including at least one string and one number. (Click to see\nfull
        instructions) \n"
      CSP U4 - Objects - createObject_instruction: "Create an object with at least\n5
        values including at least one string and one number. (Click to see full\ninstructions)
        \n"
      drawings!_instruction: |
        Draw the equilateral triangle - all the sides are the
        same!
      ECSPD Binary Odometer_instruction: |
        This is another resource you could use
        with your students.
      Eval Booleans 1_instruction: |
        Boolean operators (like >, <, =) allow us to
        compare different values, returning either true or false. Click "Run" to
        see how this expression evaluates.
      Eval Booleans 2_instruction: |
        Can you set the values so that this expression
        evaluates as true?
      Eval Booleans 3_instruction: |
        The string-length function returns the number
        of characters in a string (including spaces!) - make this code evaluate to
        true.
      Eval Booleans 4_instruction: |
        Here's an Evaluation Block called AND - it returns
        true if both of its parameters are true, otherwise it returns false. Edit
        the x variable so that this expression returns true.
      Eval Booleans 5_instruction: |
        This OR block returns true if either of its parameters
        is true. Otherwise, if both parameters are false it will return false. Set
        the y variable to a value that will cause this expression to return false.
      Eval Booleans 6_instruction: |
        Here's one more boolean block called NOT. This
        block flips true to false, or false to true. If you wrap this block of code
        in a NOT block, it should return true (because we are asking if the two expressions
        do NOT produce equal values).
      Eval Booleans Free Play_instruction: |
        Free Play: Try out some creations of
        your own using Booleans.
      Eval Booleans_instruction: |
        Booleans allow us to compare different values,
        returning "true" if the are equal, or "false" if they are not. What do
        you think this code will evaluate to?
      Eval Cond 1_instruction: |
        The cond block checks the boolean expressions in
        the left column, and as soon as it finds one that returns "true" it runs
        the corresponding code on the right. If none of the expressions evaluate to
        "true," it runs the bottom block. Update the "temperature" variable so
        that this block returns "It's just right."
      Eval Cond 2 (copy 1)_instruction: |
        This condition returns a different shape
        based on the value of the "sides" variable - change the value of "sides"
        so that the conditional returns a triangle.
      Eval Cond 2_instruction: |
        This condition returns a different shape based on
        the value of the "sides" variable - change the value of "sides" so that
        the conditional returns a triangle.
      Eval Cond 3 (copy 1)_instruction: |
        Can you write a conditional that checks
        the variable "age" and returns "Old enough to vote and drive" if age >
        17, "Old enough to drive" if age is > 15, and "Can't drive or vote" if
        neither conditions is true. Hint: The first condition to return "true" wins
        - make sure you put your conditions in the right order.
      Eval Cond 3_instruction: |
        Can you write a conditional that checks the variable
        "age" and returns "Old enough to vote and drive" if age > 17, "Old enough
        to drive" if age is > 15, and "Can't drive or vote" if neither conditions
        is true. Hint: The first condition to return "true" wins - make sure you
        put your conditions in the right order.
      Eval Cond 4_instruction: |
        We can use the string=? function to make conditionals
        that respond to text input. Here's a function called green shape that takes
        a string for the type of shape. Complete the conditions so that the correct
        solid green shape is returned when the function is run with "circle", "triangle",
        "square", or "rectangle".
      Eval Cond 5_instruction: |
        Here's a similar function red shape with an additional
        variable for size. Complete the conditionals so the correct solid red image
        of a given size is drawn for "circle", "triangle", and "star".
      Eval Cond 6_instruction: |-
        Write a function called food-critic, which takes
        in the name of a food and produces a String that says how you feel about that
        food. For example, (food-critic “pizza”) might evaluate to “delicious”, but
        (food-critic “rotten eggs”) might evaluate to “gross!”. Choose at least two
        foods to review, but you can you write more if you like!  Don’t forget to
        add an “else” clause!\r
        One example - and part of the definition -  has already
        been done for you!
      Eval Cond 7_instruction: |
        Free Play: Write a function called green-shape, which
        takes in the name of a shape and produces a solid green shape. Your function
        should work with at least “circle”, “star” and “rectangle”, but you can add
        other shapes if you like. You can choose the size of each shape. Don’t forget
        to add an “else” clause!\r
        One example - and part of the definition -  has
        already been done for you!\r
      Eval Cond 8_instruction: |
        Free Play: Suppose you want to own a car at 21, or
        have your own business by 30. Write a function called life-goals, which takes
        in an age and produces a string that describes your life goals by then. Don’t
        forget to add an “else” clause!\r
      Eval Contracts 1_instruction: |
        Use the "star" function to produce a red star
        with a 60 pixel radius
      Eval Contracts 10A_instruction: |
        Alright let's complete this puzzle with a
        Green Square that is 175 pixels in size.
      Eval Contracts 11A_instruction: |
        Can you complete this puzzle to read "Hello
        World" in the banner?
      Eval Contracts 2_instruction: |
        Check out the "rotate" function - can you
        use it to rotate this 90 pixel green square by 45 degrees?
      Eval Contracts 3_instruction: |
        Try using the "text" function to write this
        teal text at size 40.
      Eval Contracts 4 A_instruction: |
        The "scale" function returns an image that
        is scaled either larger or smaller than the input image. Try scaling this
        circle by a factor of 10 - how is the resulting image different than if you'd
        just made a circle of that size in the first place?
      Eval Contracts 4_instruction: |
        The scale function returns an image that is
        either larger or smaller than the input image. Try scaling this circle by
        a factor of 10. How is the returned image different than if you'd just made
        a circle of that size in the first place?
      Eval Contracts 8A_instruction: |
        Can you complete this puzzle? The big-triangle
        is 200 pixels in size and purple?
      Eval Contracts A_instruction: |
        Use the star function to produce a solid red
        star with a 60 pixel radius
      Eval Contracts C_instruction: |
        Check out the rotate function - can you use
        it to rotate this 90 pixel green square by 45 degrees?
      Eval Contracts E_instruction: |
        Try using the text function to write "Hello,
        world!" in teal at size 40.
      Eval Contracts shrink_instruction: "Can you complete this image using the \"shrink\"\nfunction
        block? The radius is 20. \n"
      Eval Define Funcs 1_instruction: |
        Here's a new function called green-triangle
        that takes a single Number for size and produces a green triangle. Use the
        new function to create a 125 pixel green triangle.
      Eval Define Funcs 2_instruction: |
        Let's look inside that green-triangle function
        to see how it works. Can you modify it so that the green-triangle function
        always draws outlined green triangles?
      Eval Define Funcs 3_instruction: |
        Here's the start of another new function
        called purple-circle with a domain of one Number (the radius) and a range
        of Image. The body of the function is broken though - fix it and then make
        a purple circle with 150 pixel radius
      Eval Define Funcs 4_instruction: |
        Create a new function called aqua-star that
        has a Domain of a single Number for radius and returns an aqua star of the
        given radius. Run your new function with a radius of 75.
      Eval Define Funcs 5_instruction: |
        Let's use that aqua-star function to make
        a row of different sized stars. From left to right, the stars should have
        radii of 25, 50, and 75.
      Eval Define Funcs Test_instruction: |
        Here's the start of another new function
        called purple-circle with a domain of one Number (the radius) and a range
        of Image. The body of the function is broken though - fix it and then make
        a purple circle with 150 pixel radius
      Eval Defining Vars Free Play 1_instruction: |
        Free Play: We've provided a function
        that fills your screen with my-image. Change my-image to see what patterns
        you can make.
      Eval Design Recipe .1_instruction: |
        Here's a Design Recipe for a function
        called square-circle with domain Number String and range Image. Click Edit
        to write the function definition (you will see two examples provided).
      Eval Design Recipe 1 (copy 1)_instruction: |
        We're going to write a function
        that draws a solid rectangle of any color that is twice wide as it is high.
        Start with an example - draw a solid green rectangle that has a height on
        100 pixels.
      Eval Design Recipe 1_instruction: |
        Alright, now given the Contract wide-rect:
        Number String -> Image, write an example - draw a solid green rectangle that
        has a height of 100 pixels.
      Eval Design Recipe 2 (copy 1)_instruction: |
        Let's do one more example before
        writing the function definition - this time draw a solid red rectangle with
        a height of 75 pixels.
      Eval Design Recipe 2_instruction: |
        Let's do one more example before writing
        the function definition - this time draw a solid red rectangle with a height
        of 75 pixels.
      Eval Design Recipe 3_instruction: |
        The Design Recipe for wide-rect already
        has a contract and one example. Can you write a second example and then complete
        the definition? The wide-rect function should produce a rectangle of given
        color that is twice as wide as it is high.
      Eval Design Recipe 4_instruction: |
        Use the Design Recipe to create a function
        starburst. When given a number of points and an outer radius, starburst returns
        a yellow radial star with given points, and an inner radius that is half the
        outer radius.
      Eval Design Recipe 5_instruction: |
        Using the Design Recipe, write a function
        striped-flag that takes two colors and produces a flag that is 250 pixels
        wide, 150 pixels tall, with three even horizontal stripes of given colors,
        in the order color2, color1, color2.
      Eval Design Recipe 6_instruction: |
        Write a function large-polygon that should
        output a solid polygon of given sides and color that takes up most of the
        window, regardless of the number of sides. To make sure that the polygon doesn't
        get too large as you increase the number of sides, side length should be inversely
        proportional to side number, with a length of (800/sides).
      Eval Design Recipe Free Play_instruction: |
        Free Play: Use the Design Recipe
        to create some functions of your own design
      Eval Free Play_instruction: 'Free Play: Make art with code!'
      Eval Strings Images .1_instruction: |
        So far we've only dealt with a single
        type of data, Numbers. Another type of data is a String, which is any combination
        of letters, numbers, or other characters wrapped in quotation marks. Run the
        String "Hello, world!" and see what happens.
      Eval Strings Images .2_instruction: |
        The string-append function takes two Strings
        and returns a single combined String. Add a String "Universe" to the second
        argument of string-append.
      Eval Strings Images 1_instruction: |
        The third type of data we're going to
        use is an Image. This star function takes in a Number and two Strings, and
        it evaluates to an Image. Use this function to make a solid red star with
        radius of 100.
      Eval Strings Images 2_instruction: |
        Free Play: Every Evaluation Block is color-coded
        to let you know which data type it returns and which types it needs for its
        parameters. The last parameter of the triangle function takes a String that
        controls its color - try some different colors to see what works.
      Eval Strings Images 3_instruction: |
        Some functions can only take a specific
        set of Strings, such as the second argument of this circle function, which
        controls its style. Draw this orange outline circle using the special String
        block with a dropdown to make sure you only use valid styles.
      Eval Strings Images 4_instruction: |
        Try using the rectangle block to draw this
        solid, red rectangle - it is 175 pixels wide and 100 pixels tall.
      Eval Strings Images 5_instruction: |
        Try using this new Evaluation Block called
        overlay to place a 100 pixel white triangle on top of a 200 pixel red circle.
      Eval Strings Images 6_instruction: |
        Use the overlay block to place a 75 pixel
        radius yellow star on top of a 150 pixel long blue square.
      Eval Strings Images 7_instruction: |
        The offset block lets you move an image
        relative to where it would normally be placed. Use this block to offset the
        square by 100 pixels on the y-axis.
      Eval Strings Images 8_instruction: |
        Here's a different kind of star block
        - it's called radial-star and it allows you to draw stars with any number
        of points! Use it to create a 7 point solid orange star with an inner radius
        of 75 pixels and an outer radius of 175 pixels.
      Eval Strings Images Free Play_instruction: |
        Free Play: Explore the blocks available
        to create something interesting. Make sure to share your favorite creations.
      Farmer for Authored Hint testing_instruction: |
        Wow, I found a really deep hole!
        I don't know how many shovelfuls of dirt it needs.  Can you write a program
        that fills it until the ground is even?  Hint:  Try using the while loop this
        time.
      Frequency Analysis_instruction: Test
      frozen circle function in circle_instruction: Ahora crearemos 20 círculos sobrepuestos,
        girando 18 grados entre cada círculo.
      frozen circle function with parameter_instruction: Aquí está un bloque "Crear
        círculo" que puede dibujar círculos de diferentes tamaños. ¿Puedes usarlo
        para dibujar un circulo pequeño de tamaño 5 y uno más grande de tamaño 10?
      frozen circle function_instruction: Utiliza el nuevo bloque "Crear círculo"
        para crear 10 círculos sobrepuestos. No olvides saltar hacia adelante entre
        cada círculo.
      frozen circle_instruction: Un círculo es una figura especial. ¿Puedes adivinar
        qué número debe reemplazar los signos de interrogación para dibujar un círculo?
      frozen cross rotate dense_instruction: "¡Ahora repitámoslo 90 veces! ¿Cuántas
        veces cabe 90 en 360? Pista: Es un número muy pequeño."
      frozen cross rotate_instruction: Ahora trata de repetirlo 10 veces. ¿Cuántos  grados
        necesitas girar entre cada línea?
      frozen cross_instruction: Cubre un bloque de "Repetir" alrededor de estos comandos
        para crear un signo más. ¿Notaste que Elsa puede moverse hacia adelante y
        hacia atrás?
      frozen diamond mini snowflake_instruction: |
        ¿Sabías que cada copo de nieve tiene
        una forma distinta? Crearemos un nuevo copo de nieve utilizando other bloque de "Repetir" para repetir el paralelogramo 4 veces, girando hacia la derecha 90 grados entre cada paralelogramo.
      frozen diamond snowflake_instruction: Ahora crearemos un nuevo copo de nieve,
        utilizando el bloque "Repetir" para repetir el paralelogramo 10 veces, girando
        a la derecha 36 grados entre cada uno.
      frozen diamond_instruction: |
        Utiliza una repetición alrededor de estos bloques para crear un paralelogramo.
        Es como un rectángulo, pero tiene diferentes ángulos. Este tiene 60 grados
        y 120 ángulos de grados en lugar de todos los 90 ángulos de grados.
      frozen freeplay_instruction: "¡Te has convertido oficialmente en un artista
        maestro! Crea un paraíso invernal."
      frozen line_instruction: "¡Hola! Soy Elsa de Arendelle. Ayúdame a crear una
        línea."
      frozen perpendicular_instruction: Ahora veamos si podemos crear dos líneas que
        se encuentran a un ángulo de 90 grados una de la otra. Necesitarás usar tanto
        el bloque de "Giro" como el bloque de "Mover".
      frozen snowflake branch_instruction: Intenta utilizar el bloque "Crear una rama
        de copo de nieve" para dibujar 3 ramas, lo que empezará a parecerse a un copo
        de nieve.
      frozen snowflake full_instruction: "¡Ahora repitámoslo 8 veces para dibujar
        un hermoso copo de nieve!"
      frozen snowflower_instruction: Formas complejas de nieve pueden crearse usando
        figuras geométricas muy simples. ¿Puedes crear uno repitiendo 5 círculos de
        tamaño 5 y 5 círculos de tamaño 10?
      frozen square iterative_instruction: Parece que estamos a la mitad de completar
        un cuadrado. Ahora pongamos 4 líneas juntas para crear un cuadrado.
      frozen square loop 3x_instruction: Ahora crearemos tres cuadrados, girando al
        terminar cada cuadrado. Asegúrate de girar 120 grados antes de iniciar un
        nuevo cuadrado.
      frozen square loop_instruction: ¡Hola! Soy Anna de Arandelle. Dibujemos un cuadrado
        con el bloque de "Repetir", lo que nos permitirá utilizar menos bloques. ¿Cuántas
        veces (???) se deberían repetir los bloques que están dentro del bloque "Repetir"
        para formar un cuadrado?
      frozen square snowflake_instruction: ¿Puedes dibujar un copo de nieve utilizando
        el bloque "Repetir" para dibujar un cuadrado 10 veces y el bloque "Girar"
        para girar 36 grados entre cada cuadrado?
      Infinity_catch_instruction: ¿Puedes hacer que Elsa ("actor2") alcance a Anna
        utilizando las teclas de flecha?
      Infinity_finale_instruction: "¡Crea cualquier osa que desees compartir!"
      Infinity_move_collide_instruction: Hiro es el "actor 1".  Muevelo cerca de Baymax
        y reproduce un sonido cuando se toquen.
      Infinity_move_directions_instruction: Baymax es  el "actor 2".  Agregar bloques
        de movimiento y luego mueve a Baymax utilizando las flechas.  Haz que toque
        a los otros dos personajes.
      Infinity_move_right_instruction: Hiro es el "actor 1".  Utiliza el bloque de
        movimiento para mover a Hiro hasta a tocar Baymax.
      Infinity_repeat_instruction: Utilice un bloque "repetir para siempre" para mover
        a Anna arriba y abajo de 400 píxeles.
      Infinity_say_instruction: Has a Anna decir "Hola" utilizando el bloque de decir.
      Infinity_shoot_instruction: Baymax es el "actor 2".  Has que Baymax lance un
        cohete a Hiro.
      Infinity_shoot_directions_instruction: Hiro es el "actor 3".  Has que Hiro lance
        un proyectil a cada uno de los cuatro personajes.  Espera un segundo entre
        cada tiro.
      Infinity_test_instruction: This is a test Infinity level.
      Infinity_touch_faster_instruction: "¡Toca aún más copos de nieve!"
      Infinity_touch_four_instruction: Mueve a Anna hacia arriba, abajo a la izquierda
        y a la derecha para tocar cada uno de los cuatro copos de nieve.
      Infinity_touch_score_instruction: Has que Anna anote un punto cuando ella toque
        un copo de nieve.  Después has clic en "Ejecutar" y conducela para tocar una
        vez cada copo de nieve.
      jessie-test_instruction: Lots of instructions
      Just for Testing_instruction: Test instructions
      K-1 Artist 1 Assessment 1_instruction: |
        ¡Dibuja una linea corta hacia arriba y una larga
        a la derecha!
      K-1 artist 1 level 10_instruction: Dibuja una linea punteada utilizando los
        bloques de dibujar y saltar
      K-1 artist 1 level 9_instruction: Dibuja esto utilizando tres líenas
      K-1 Artist Loops 1_instruction: Dibuja esa linea moviendote al este 4 veces
      K-1 Artist Loops 2_instruction: "¿Podrías dibujar la misma linea usando un enlace?"
      K-1 Artist Loops 3_instruction: "¿Podrías enlazar estos bloques para dibujar
        6 lineas?"
      K-1 Artist Loops 4_instruction: "¿Podría un enlace ayudarnos a dibujar el tope
        del castillo?"
      K-1 Artist Loops 5_instruction: "¿Puedes repetir 4 veces el mismo enlace para
        dibujar la escalera?"
      K-1 Artist Loops 6_instruction: 'Aqui se necesitan dos enlaces: Uno para subir
        y otro para bajar la escalera.'
      K-1 Artist Loops 7_instruction: "¿Podrias terminar este patrón con dos enlaces?"
      K-1 Artist Loops 8_instruction: Esta escalera tiene escalones largos
      K-1 Artist Loops 9_instruction: |
        Evaluación: utilice un enlace para dibujar la escalera
      K-1 Artist Loops Free Play_instruction: "¡Manos libres, dibuja algo divertido!"
      K-1 Artist1 1_instruction: Dibuja el pie del hombre con una linea
      K-1 Artist1 10_instruction: Dibuja y salta para trazar el camino al tesoro
      K-1 Artist1 2_instruction: "¡Dibuja el bigote del gato con dos lineas!"
      K-1 Artist1 3_instruction: |
        ¡Dibuja dos lineas al este y dos al norte para terminar
        la casa!
      K-1 Artist1 4_instruction: "¡Dibuja lineas verticales, superiores e inferiores
        para terminar el castillo!"
      K-1 Artist1 5.5_instruction: |
        Completa la tercera torre del castillo usando
        lineas pequeñas
      K-1 Artist1 5_instruction: "¡Dibuja el tallo de la flor con dos linéas! "
      K-1 Artist1 6_instruction: "¡Termina el dibujo usando el bloque de salto! "
      K-1 Artist1 7_instruction: "Use el bloque de salto para moverte sin dibujar.
        Salta hacia arriba \ny dibuja una linea\n"
      K-1 Artist1 8_instruction: Trazqa una linea usando los bloques de saltar y dibujar
      K-1 Artist1 9_instruction: Dibuja y salta para trazar una linea
      K-1 Artist1 Assessment 1_instruction: "¡Dibuja lineas largas y cortas!"
      K-1 Artist1 Assessment 2_instruction: "¡Dibuja una traza de lineas cortas!"
      K-1 Artist2 1_instruction: Dibuja un cuadrado debajo del triángulo
      K-1 Artist2 2_instruction: '"Salta y dibuja un cuadrado junto a la casa".'
      K-1 Artist2 3_instruction: Dibuja un cuadrado arriba de otro cuadrado
      K-1 Artist2 4_instruction: Dibuja un rectángulo para completar el puente.
      K-1 Artist2 5_instruction: Dibuja un rectángulo para completar los soportes
        del puente
      K-1 Artist2 6_instruction: "¡Dibuja dos cuadrados para hacer el rectángulo!"
      K-1 Artist2 Assessment1_instruction: '"Evaluación: Dibuja un cuadrado junto
        a otro cuadrado".'
      K-1 Artist2 Free Draw_instruction: "¡Dibuja cualquier cosa!"
      K-1 Artist2_7_instruction: "¡Dibuja un rectángulo para hacerle un cajón al vestidor!"
      K-1 Bee 1_instruction: |
        Llevame a la flor, toma el nectar, entonces llevame
        a la colmena, y haz miel
      K-1 Bee 10_instruction: "¡Toma cuatro nectar y entonces haz doy mieles!"
      K-1 Bee 11.5_instruction: "¡Toma cuatro nectar y haz cuatro mieles!"
      K-1 Bee 11_instruction: Toma tres nectar y entonces haz una miel
      K-1 Bee 12_instruction: "¡Toma tres nectar y entonces haz dos mieles!"
      K-1 Bee 13_instruction: "¡Toma tres nectar y entonces haz una miel!"
      K-1 Bee 14_instruction: |
        Llevame al nectar, recogelo, llevame a la colmena
        y haz miel
      K-1 Bee 15_instruction: "¡Conseguir dos néctares para hacer dos unidades de
        miel!"
      K-1 Bee 2_instruction: |
        Llevame a la flor, toma el nectar, entonces llevame
        a la colmena, y haz miel
      K-1 Bee 3_instruction: |
        Llevame a la flor, toma el nectar, entonces llevame
        a la colmena, y haz miel
      K-1 Bee 4_instruction: "¡Consigue dos unidades de néctar y luego has dos unidades
        de miel!"
      K-1 Bee 5_instruction: "¡Toma tres nectar y entonces haz tres mieles!"
      K-1 Bee 6_instruction: "¡Consigue dos unidades de néctar y luego has dos unidades
        de miel!"
      K-1 Bee 7_instruction: "¡Toma tres nectar y entonces haz dos mieles!"
      K-1 Bee 8_instruction: "¡Consigue dos unidades de néctar y luego has dos unidades
        de miel!"
      K-1 Bee 9_instruction: "¡Consigue dos unidades de néctar y luego has dos unidades
        de miel!"
      K-1 Bee Assessment 1_instruction: "¡Consigue néctar para hacer miel!"
      K-1 Bee Assessment 2_instruction: "¡Consigue néctar para hacer miel!"
      K-1 Bee Loops 1_instruction: "¡Obten el nectar para hacer miel!"
      K-1 Bee Loops 10_instruction: "¡Utiliza enlaces para obtener nectar, miel y
        para moverte!"
      K-1 Bee Loops 11_instruction: Evaluación:¡Utiliza enlaces para obtener nectar
        y miel!
      K-1 Bee Loops 12_instruction: 'Evaluación: ¡Utiliza enlaces para obtener nectar,
        miel y moverte!'
      K-1 Bee Loops 2_instruction: |
        ¡Utiliza un enlace para moverte obtener el nectar y
        hacer miel!
      K-1 Bee Loops 3_instruction: "¡Utiliza enlaces para obtener nectar, y para hacer
        miel!"
      K-1 Bee Loops 4_instruction: "¡Ulilice enlaces para obtener nectar, hacer miel
        y moverte!"
      K-1 Bee Loops 5_instruction: "¡Utiliza enlaces para tomar nectar y miel!"
      K-1 Bee Loops 6_instruction: "¡Utiliza enlaces para obtener nectar, miel y para
        moverte!"
      K-1 Bee Loops 7_instruction: "¡Utiliza enlaces para obtener nectar, y para hacer
        miel!"
      K-1 Bee Loops 8_instruction: "¡Utiliza enlaces para obtener nectar, y para hacer
        miel!"
      K-1 Bee Loops 9_instruction: "¡Utiliza enlaces para obtener nectar, miel y para
        moverte!"
      K-1 Bee Loops Assessment 1_instruction: "¡Toma nectar para hacer miel y usa
        enlaces para moverte!"
      K-1 Bee Loops Assessment 2_instruction: "¡Utiliza enlaces para tomar nectar
        y hacer miel!"
      K-1 Bee Puzzle 12_instruction: Get three nectars and then make two honey
      K-1 Building a Foundation Assessment_instruction: |
        Build a three level pyramid,
        there are no other directions, so just play with the pieces until you get
        it!
      k-1 maze 1_instruction: "¿Me llevarias al Oeste para agarrar al cerdo? "
      K-1 Maze 10_instruction: "¡Evita el TNT para llevarme con el cerdo!"
      K-1 Maze 11_instruction: "\"Traza la ruta y llevame con el cerdo loco. ¡Evita
        \nel TNT o las plumas volarían! Ayuda:El está al sur de mi\".\n"
      K-1 Maze 2_instruction: "¡Mueveme al Este para llevarme con el cerdo!"
      K-1 Maze 3_instruction: "¡Mueveme al sur para llegar al cerdo!"
      K-1 Maze 4_instruction: "¡Mueveme al norte para llegar al cerdo!"
      K-1 Maze 5_instruction: "¡Mueveme al Este para llevarme con el cerdo!"
      K-1 Maze 6_instruction: Muveme en una dirección, luego otra para llevarme el
        cerdo!
      K-1 Maze 7_instruction: Muveme en una dirección, luego otra para llevarme el
        cerdo!
      K-1 Maze 8_instruction: Muveme en una dirección, luego otra para llevarme el
        cerdo!
      K-1 Maze 9_instruction: Muveme en una dirección, luego otra para llevarme el
        cerdo!
      K-1 Maze Assessment 1_instruction: Evaluación, ¡Tráeme al cerdo!
      K-1 Maze Assessment 12_instruction: Nivel de evaluación
      K-1 Maze Assessment 13_instruction: Nivel de evaluación
      K-1 Maze Assessment 2_instruction: Evaluación, ¡Tráeme al cerdo!
      K-1 maze debug 1_instruction: Cambie el código para traerme al cerdo!
      K-1 maze debug 10_instruction: Depura este nivel reorganizando y agregando bloques
        para llevarme al cerdo!
      K-1 maze debug 11_instruction: |-
        Esta es una prueba!\r
        Depura este nivel reorganizando y agregando bloques para llevarme al cerdo
      K-1 maze debug 2_instruction: Averigüa qué falta y entonces agrega bloques para
        llevarme al cerdo!
      K-1 maze debug 3_instruction: Averigüa cuál es el problema y borra bloques para
        llevarme al cerdo!
      K-1 maze debug 4_instruction: Ejecuta estos bloques y arréglalos! Yo creo que
        voy en la dirección equivocada.
      K-1 maze debug 5_instruction: Depura este nivel reorganizando y agregando bloques
        para llevarme al cerdo!
      K-1 maze debug 6_instruction: Depura este nivel reorganizando y agregando bloques
        para llevarme al cerdo!
      K-1 maze debug 7_instruction: Depura este nivel reorganizando y agregando bloques
        para llevarme al cerdo!
      K-1 maze debug 8_instruction: Depura este nivel reorganizando y agregando bloques
        para llevarme al cerdo!
      K-1 maze debug 9_instruction: Depura este nivel reorganizando y agregando bloques
        para llevarme al cerdo!
      K-1 Maze debug Assessment 1_instruction: Evaluación -- Depura este nivel reorganizando
        y agregando bloques para llevarme al cerdo!
      K-1 Maze Loops 1_instruction: Llévame al cerdo!
      K-1 Maze Loops 10_instruction: Llévame al cerdo! Usa el bloque de repetición.
      K-1 Maze Loops 11_instruction: Llévame al cerdo! Usa el bloque de repetición.
      K-1 Maze Loops 12_instruction: Llévame al cerdo! Usa el bloque de repetición.
      K-1 Maze Loops 2_instruction: Usa el bloque de Repetición para llevarme al cerdo!
      K-1 Maze Loops 3_instruction: Llévame al cerdo! Usa el bloque de repetición.
      K-1 Maze Loops 4_instruction: Llévame al cerdo!
      K-1 Maze Loops 5_instruction: Llévame al cerdo! Usa el bloque de repetición.
      K-1 Maze Loops 6_instruction: Llévame al cerdo! Usa el bloque de repetición.
      K-1 Maze Loops 7_instruction: Llévame al cerdo! Usa el bloque de repetición.
      K-1 Maze Loops 8_instruction: Llévame al cerdo! Usa el bloque de repetición.
      K-1 Maze Loops 9_instruction: Llévame al cerdo!
      K-1 Maze Loops Assessment 1_instruction: Evaluación -- Usa ciclos para llevarme
        al cerdo!
      K-1 Maze Loops Assessment 2_instruction: Evaluación -- Usa ciclos para llevarme
        al cerdo!
      K-1 Maze Multi 14_instruction: Nivel de evaluación
      K-1 Maze Multi 15_instruction: Nivel de evaluación
      K-1 Maze Sequence Assessment 1_instruction: |-
        Esta es una prueba!\r
        Muévete en una dirección,
        luego en otra para llevarme al cerdo
      K-1 Maze Sequence Assessment 2_instruction: |-
        Esta es una prueba!\r
        Muévete en una dirección,
        luego enotra para llevarme al cerdo.
      kikiTesting_instruction: |
        .\r
         .\r
        .\r
        .\r
        .\r
        .\r
        \r
        .\r
        \r
      love_spring_1_instruction: |
        Let's celebrate Spring!  We have put some seeds
        in the ground to prepare for the season's flowers.  Can you cover them up
        so that the birds don't eat them?
      love_spring_2_instruction: |
        Our flowers are in full bloom!  Now we need the
        bee to grab nectar from each one so he can make plenty of honey back at his
        hive!
      love_spring_3_instruction: |-
        Figure out how to change this code so that Robin
        chooses a number between 1 and 20.  \r
        \r
        When you're ready, press "Run"
        and play until you guess Robin's number!
      Luigi's Pizza 1_instruction: |
        Welcome to Luigi's Pizza! To order a pizza,
        type the name of a topping into the cost function, and we'll return the price
        of that pizza. Try ordering a pepperoni pizza to start.
      Luigi's Pizza 2 (copy 1)_instruction: |
        Right now there are only four choices
        available at Luigi's pizza - let's fix that! Add a couple of new toppings
        to the conditional block in the "cost" function. Once you've added your
        toppings, test out the function to make sure it works.
      Luigi's Pizza 2_instruction: |
        Right now there are only four choices available
        at Luigi's pizza - let's fix that! Add a couple of new toppings to the conditional
        block in the cost function. Once you've added your toppings, test out the
        function to make sure it works.
      Luigi's Pizza 3 (copy 1)_instruction: |
        That's better, everyone loves more
        variety in their pizza toppings! But you still can't please everyone, and
        folks are coming in to order toppings that Luigi doesn't have. Instead of
        saying no to those people, could you update the "else" clause so that we
        charge them a premium for toppings that we don't normally offer?
      Luigi's Pizza 3_instruction: |
        That's better, everyone loves more variety in
        their pizza toppings! But you still can't please everyone, and folks are
        coming in to order toppings that Luigi doesn't have. Instead of saying no
        to those people, could you update the else clause so that we charge them a
        premium for toppings that we don't normally offer? Let's charge $10,000
        for a topping we don't carry.
      Luigi's Pizza 4_instruction: |
        Free Play: What can you do to make Luigi's cost
        function even more useful?
      MSM Big Game Empty_instruction: |
        All variables and functions are currently
        empty stubs. Each puzzle progression will be focused on defining and handful
        of them, and therefore adding functionality.
      MSM Big Game Vars 1 (copy 1)_instruction: |
        In the Variables toolbox you'll
        see several variables that define how your game characters look, move, and
        interact
      MSM Big Game Vars 1_instruction: |
        In the Variables toolbox you'll see several
        variables that define how your game characters look, move, and interact
      MSM Big Game Vars Backup_instruction: |
        In the Variables toolbox you'll see
        several variables that define how your game characters look, move, and interact
      MSM Defining Vars 1 (copy 1)_instruction: |
        Write a program that produces a
        50 pixel solid green triangle.
      MSM Defining Vars 1_instruction: |
        Write a program that produces a 50 pixel
        solid green triangle.
      MSM Defining Vars 2 (copy 1)_instruction: |
        If we wanted to make fifty green
        triangles, it would be a pain to repeat that block of code 50 times. Let's
        create a variable called "my-shape" and put the code for a 50 pixel solid
        green triangle inside.
      MSM Defining Vars 2_instruction: |
        If we wanted to make fifty green triangles,
        it would be a pain to repeat that block of code 50 times. Let's create a
        variable called my-shape and put the code for a 50 pixel solid green triangle
        inside.
      MSM Defining Vars 3 (copy 1)_instruction: |
        Take your "my-shape" variable
        and use it with this provided code to draw two identical green triangles.
      MSM Defining Vars 3_instruction: |
        Take your my-shape variable and use it with
        this provided code to draw two identical green triangles that are 50 pixels
        in size.
      MSM Defining Vars 4_instruction: |
        Edit your my-shape variable so that it draws
        75 pixel solid red stars.
      MSM Play Lab Butterfly 1_instruction: |
        Help Sam stay on the screen so that
        you can always see at least a little piece of him. Using the arrow keys, see
        how far Sam can go to the left while still staying onscreen. You’ll find that
        Sam is onscreen as long as his x-coordinate is greater than -50. Then, fill
        in the code to make Sam stay on the screen.
      MSM Play Lab Butterfly 2_instruction: |
        Now make Sam stay on the right side
        of the screen. You'll have to experiment to see how far he can go and still
        be partially visible on the screen.
      MSM Play Lab Butterfly 3_instruction: |
        Now, combine your work to make Sam stay
        on both sides of the screen.
      MSM Play Lab Game 2_instruction: |
        Variables can also be used to control the
        speed of players in a game. Set the player speed and the enemy speed and see
        how the movement changes. Speed can be between 2 and 12.
      NetSim Standalone Automatic DNS_instruction: |
        In this version of the Internet
        Simulator, a Domain Name System (DNS) is provided for you and knows the IP
        addresses of all connected computers. Send a message in the form GET [hostname]
        to the DNS service at address <yourRouterNumber>.15 to get a student's address.
      NetSim Standalone Broadcast_instruction: |
        In this version of the Internet Simulator,
        you can connect to up to 5 other people in a room. When you send messages
        in the room, everyone receives them. What are some of the challenges of this
        system, and how might you solve them?\r
      NetSim Standalone Classroom Routers_instruction: |
        In this version of the Internet
        Simulator, everyone connects to a router and has a specific address. To send
        messages, you have to address your message to the specific address of the
        recipient, and the router will take care of delivering it to the right computer.
        If there are other routers created in your class, ask for the address of one
        of your classmates and send them a message! View the Log Router to see the
        path the messages have taken through the network.
      NetSim Standalone Freeplay_instruction: |
        In this configuration, most of the
        options are turned on, and you can play with them. Have fun!
      NetSim Standalone Manual DNS_instruction: |
        In this version of the simulator
        you can't see the other students' addresses.  Instead, one of you must act
        as a name service, to help share addresses with each other.
      NetSim Standalone Packets TCP_instruction: |
        Messages on the Internet can take
        many paths to get to their destination, and sometimes along the way the message
        gets dropped. In this version of the Internet Simulator, there is a 10% chance
        of a packet being dropped, multiple packets may take different paths to the
        destination, and the default max packet size is set to 6 additional characters.
      NetSim Standalone Routers Addresses_instruction: |-
        For this activity, connect
        to a router with the others in your group. Important note: The router will
        only properly route messages where the first 4 bits are the To: address and
        the second 4 bits are the From: address.\r
        \r
        [TODO: NetSim needs to support
        hierarchical addresses. For now, level is set up for 4 bit to and from addresses]
      NetSim Standalone SendAB_instruction: |
        You and your partner share a single
        wire that can only be in state A or state B. You can set the wire to either
        state at any time, and you can read the state of the wire at any time. Can
        you figure out a way to effectively communicate with just this system?
      NetSim Standalone Sending Numbers Ascii_instruction: |
        Now that you've transmitted
        information represented as decimal numbers, you can map those numbers to text
        characters to send text-based information back and forth. With a text-based
        protocol, you can easily represent and communicate all kinds of information.
      NetSim Standalone Sending Numbers_instruction: "You and your partner can now\nreliably
        send messages back and forth without extra coordination! While you're\nalways
        sending bits back and forth, you can also represent those bits as decimal\nnumbers.
        What kinds of information can you represent with this system? \n"
      NetSim_AddressingMessages_instruction: |
        In this version of the simulator, you
        will connect to a Router instead of directly to another student. Enter an
        address in the "To" box to send a message to another student.
      NetSim_AutomaticDNS_instruction: |
        In this version of the simulator a DNS service
        is provided for you. Send a message in the form GET [hostname] to the DNS
        service at address 15 to get a student's address.
      NetSim_ManualDNS_instruction: |
        In this version of the simulator you can't
        see the other students' addresses.  Instead, one of you must act as a name
        service, to help share addresses with each other.
      NetSim_SendAB_instruction: |
        Connect to another student.  Each of you can set
        the value of the wire between you to "A" or "B".  See if you can send
        a complete message!
      NetSim_SendAscii_instruction: |
        In this version of the simulator, you can send
        numbers or ASCII characters to one another, one bit at a time.
      NetSim_SendBits_instruction: |
        Connect to another student.  You can now set
        your wire to "0" or "1".  Send a message to your partner!
      NetSim_SendingABTest_instruction: |
        This is Sarah's test of making a netsim
        level
      NetSim_SendNumbers_instruction: |
        In this version of the simulator, you can
        view the decimal representations of the binary you are sending.
      NetSim_Superuser_instruction: You have loaded NetSim in superuser mode.
      NetSim_Variant1_instruction: |
        NetSim: Variant 1 allows students to manually
        work out the timing of sending bits back and forth.
      NetSim_Variant2_instruction: |
        NetSim: Variant 2: Students connect directly
        to one another and send entire packets back and forth, exploring systems of
        encoding data.
      NetSim_Variant3_instruction: |
        NetSim: Variant 3: Connects groups of 2-6 students
        with a router, and explores issues in routing and DNS
      New Artist Project_instruction: Dibuja algo impresionante! Tu código ha sido
        guardado como un projecto al que puedes regresar en cualquier momento.
      NEW Course 4 Artist Functions 1_instruction: Puedes dibujar un cuadrado de 100
        pixeles de largo usando un ciclo?
      NEW Course 4 Artist Functions 10.1_instruction: Use las funciones de los puzzles
        anteriores para dibujar este patrón.
      NEW Course 4 Artist Functions 10_instruction: Has click en "editar" para llenar
        los bloques en la definición de la función, para hacer un cuadrado de 40 pixeles.
      NEW Course 4 Artist Functions 11_instruction: Tenemos una nueva función llamada
        "dibuja una fila de cuadrados". Puedes mirar dentro del bloque de función
        para entender cómo la construimos. Has click en "Ejecutar" cuando estés listo/a
        para el siguiente ejercicio.
      NEW Course 4 Artist Functions 12_instruction: Utiliza la función "trazar una
        linea de cuadrados" del rompecabezas anterior para trazar este patron.
      NEW Course 4 Artist Functions 13_instruction: 'Puede dibujar la forma de una
        estrella usando la función "traza una linea de cuadrados"? Te daré una pista:
        puedes avanzar 60 pixeles y girar 144 grados'
      NEW Course 4 Artist Functions 14_instruction: Tiempo de juego libre!
      NEW Course 4 Artist Functions 2_instruction: "¿Puedes dibujar 3 cuadrados de
        20 píxeles separado uno del otro? Sugerencia: cada cuadrado es de medida 100
        píxeles "
      NEW Course 4 Artist Functions 3_instruction: |
        Aqui esta el nuevo tipo de Bloque.
        Es llamada "Bloque funcion". Haga click "Ejecutar" para ver que pasa.
      NEW Course 4 Artist Functions 4_instruction: 'Utiliza la función "dibujar un
        cuadrado" para dibujar este patrón. Pista: tendrás que usar un bloque "girar
        a la derecha 120 grados" después de cada cuadrado.'
      NEW Course 4 Artist Functions 5_instruction: ¿Cómo sabía el bloque "dibujar
        un cuadrado" qué comandos ejecutar? Haz clic en "Editar" en el bloque de función
        "dibujar un cuadrado". Los bloques en el editor de la función son la definición
        de lo que lleva a cabo "dibujar un cuadrado". Cuando hayas terminado, haz
        clic en "Guardar y Cerrar" y luego en "Ejecutar".
      NEW Course 4 Artist Functions 6_instruction: |
        ¿Puedes dibujar esta imagen usando la función "dibujar un cuadrado"? Pista: cada cuadrado está separado por 20 píxeles.\r
      NEW Course 4 Artist Functions 7_instruction: '¿Le estás agarrando el tiro a
        cómo usar los bloques de función? Modifiquemos este cuadrado para que mida
        200 píxeles. Sugerencia: haz click en "editar" para cambiar el tamaño del
        editor de la función "dibujar un cuadrado". Recuerda hacer click en "guardar
        y cerrar" para salir del editor de la función. '
      NEW Course 4 Artist Functions 8_instruction: Te hemos dado la mayoría del código
        para crear una función. Sin embargo parece que falta algo. ¿Puedes editar
        la definición de la función para dibujar el triángulo?
      NEW Course 4 Artist Functions 9_instruction: "¿Qué bloque necesitas añadir para
        conseguir que el triángulo se ponga encima del cuadrado?"
      NEW Course 4 Artist Functions inspire_instruction: 'Inspiración de juego libre:
        Ahora has aprendido todo lo que necesitas saber para hacer un patrón como
        este! Si te inspira esta imagen, tratar de hacer algo similar. De lo contrario,
        crea algo por tu cuenta. \r \r quieres saber cómo se hizo nuestro patron de
        inspiración? Visita https://studio.code.org/c/106387604 para la solución.'
      New Course 4 Artist Functions Level 4_instruction: Usa la función "dibujar un
        cuadrado" para dibujar este patrón.
      NEW Course 4 Artist Params 1_instruction: Vamos a definir esta función para
        dibujar un cuadrado con lados de 50 píxeles. Haz click en "editar" para empezar.
      NEW Course 4 Artist Params 10_instruction: 'Crea un bloque de función "dibujar
        un hexágono" con un parámetro de longitud. Pista: este hexágono tiene 100
        píxeles de tamaño. '
      NEW Course 4 Artist Params 11_instruction: ¿Puedes averiguar cómo dibujar esta
        forma? Edita la función para usar el parámetro "lados".
      NEW Course 4 Artist Params 12_instruction: "¿Puedes completar este dibujo? Los
        lados de todas las formas son 100 píxeles de largos."
      NEW Course 4 Artist Params 12a_instruction: Esta imagen es similar a la última.
        ¿Se puede utilizar un "ciclo for" con tu función para hacer este diseño?
      NEW Course 4 Artist Params 13_instruction: |
        Vamos a editar esta función "dibujar una forma".
        Ya tiene un parámetro de "longitud". Ahora, vamos a editar la función para añadir también un parámetro "lados". Recuerda que el ángulo para girar una forma determinada es 360 dividido por la cantidad de lados que tiene. Sugerencia: las longitudes para cada forma son: el triángulo es 100 píxeles, el hexágono es 25 píxeles y el cuadrado es de 50 píxeles.
      NEW Course 4 Artist Params 14_instruction: '¿Puedes recrear estas formas? Arrastra
        el parámetro "longitud" en la definición de función. '
      NEW Course 4 Artist Params 15_instruction: 'Juego Libre: Aquí están las funciones
        que has escrito y algunas más para que juegues con ellas. ¡Dibuja algo impresionante!'
      NEW Course 4 Artist Params 2_instruction: Crea desde cero una función "dibujar
        un triángulo" con lados de 50 píxeles
      NEW Course 4 Artist Params 3_instruction: |
        Ahora vamos a utilizar la función para dibujar 5 triángulos desde el último puzzle en una fila. Sugerencia: cada triángulo tiene 30 píxeles de separación. \r
      NEW Course 4 Artist Params 4_instruction: ¿Notas algo diferente en estos bloques
        de función? Haz clic en "Ejecutar" para ver qué pasa.
      NEW Course 4 Artist Params 5_instruction: 'Llena en el ??? en el bloque de entrada
        del parámetro de longitud. Sugerencia: El Pentágono es de 100 píxeles de tamaño. '
      NEW Course 4 Artist Params 6_instruction: Llena el parámetro "longitud" para
        dibujar estas formas substituyendo el "???" con los números correctos. El
        cuadrado y el triángulo son de 100 píxeles de tamaño mientras que el hexágono
        es de 75 píxeles de tamaño.
      NEW Course 4 Artist Params 7_instruction: "¿Puedes completar este dibujo? Sugerencia:
        cada triángulo es 25 píxeles mas grande que el último.  El primer triángulo
        es de 25 píxeles de tamaño."
      NEW Course 4 Artist Params 8_instruction: '¿Puedes dibujar cada uno de estos
        triángulos con esa nueva función? El primero es de 25 píxeles de largo, el
        segundo es de 50 y el tercero es de 75. Sugerencia: comienza haciendo clic
        en "Editar" en tu bloque de función.'
      NEW Course 4 Artist Params 9_instruction: 'Haz clic en "Editar" para completar
        la definición de la función "dibujar un cuadrado" y agrega un parámetro. Debe
        tomar un parámetro de longitud, al igual que el triángulo. Esta vez, dibuja
        3 cuadrados: de 25, 50 y 75 píxeles de largo, separados por 100 píxeles.'
      NEW Course 4 Artist Params inspire_instruction: 'Inspiración de juego libre:
        Ahora has aprendido todo lo que necesitas saber para hacer un patrón como
        este! Si te inspira esta imagen, tratar de hacer algo similar. De lo contrario,
        crea algo por tu cuenta. \r \r quieres saber cómo se hizo nuestro patron de
        inspiración? Visita https://studio.code.org/c/106387604 para la solución.'
      NEW Course 4 Artist Vars 1.5_instruction: '¿Echa un vistazo al código, puedes
        ver cómo los bloques "establecer longitud" y "longitud" trabajan juntos? Haz
        clic en "Ejecutar" para verlo en acción. '
      NEW Course 4 Artist Vars 12_instruction: Modifica este algoritmo para que utilice
        la variable "lados" en lugar de un número fijo para dibujar un pentágono.
        Reemplaza el número 5 con la variable "lados" y usa el bloque "establecer
        lados".
      NEW Course 4 Artist Vars 2.5_instruction: '¿Echa un vistazo al código, puedes
        ver cómo los bloques "establecer longitud" y "longitud" trabajan juntos? Haz
        clic en "Ejecutar" para verlo en acción. '
      NEW Course 4 Artist Vars 2_instruction: 'Arrastra un bloque de número hasta
        el bloque "establecer longitud" para dibujar un conjunto de triángulos de
        50 píxeles. '
      NEW Course 4 Artist Vars 4 5_instruction: Impresionante trabajo en el último
        puzzle, vamos a intentarlo de nuevo esta vez vamos a hacer este diseño cool
        con un hexágono de 60 píxeles.
      NEW Course 4 Artist Vars 4_instruction: Vamos a intentarlo otra vez. Ahora,
        vamos a hacer este diseño cool con un hexágono de 60 píxeles.
      NEW Course 4 Artist Vars 6_instruction: ¿Me puedes ayudar a dibujar este patrón
        cool dejando caer el bloque de variable "longitud" en los lugares correctos?
      NEW Course 4 Bee For Loops 1_instruction: Utiliza un bucle para recolectar el
        néctar de cada flor.
      NEW Course 4 Bee For Loops 10_instruction: Usa tu variable "contador" de bucle
        para el controlar que tan lejos debe moverse horizontalmente.
      NEW Course 4 Bee For Loops 10a_instruction: "¿Listo para un desafío?  Toma lo
        que has aprendido sobre ciclos y trata de solucionar este problema. Recuerda:
        puedes tener que ejecutar la solución varias veces antes de averiguar todos
        los pasos."
      NEW Course 4 Bee For Loops 11_instruction: "¿Puedes utilizar la variable de
        bucle para controlar el movimiento y la recolección del néctar?"
      NEW Course 4 Bee For Loops 2_instruction: Agrega el código necesario para asegurarte
        que la abeja recolecta todo el néctar. Mira cuánto código necesitas para este
        puzzle! (Aprenderemos una manera más simple en el siguiente puzzle).
      NEW Course 4 Bee For Loops 3_instruction: '¡Ah, el de bucle for hace esto mucho
        más fácil! Todo el código que necesitas está allí, echa un vistazo a cómo
        se colocan juntos luego haz clic en "Ejecutar" para ver cómo funciona. '
      NEW Course 4 Bee For Loops 4 4_instruction: "¿Puedes ayudar a la abeja a recolectar
        el resto de la miel utilizando este bucle for? "
      NEW Course 4 Bee For Loops 4_instruction: 'Reemplaza el ??? en el bucle for
        con la mayor cantidad de néctar que la abeja debe recoger. '
      NEW Course 4 Bee For Loops 5 5_instruction: ¿Le has pillado el truco al bucle
        "for"? Vamos a ayudar a la abeja a obtener el resto del néctar.
      NEW Course 4 Bee For Loops 5_instruction: También puedes utilizar un bucle a
        contar hacia atrás. Trata de recoger este néctar por la cuenta regresiva del
        5 al 1 por 1.
      NEW Course 4 Bee For Loops 6_instruction: El último número en tu bucle for se
        llama el "incremento", y cada vez que el bucle se ejecuta la variable contador
        cambia al incrementarse. Trata de recoger estas flores con un incremento de
        2.
      NEW Course 4 Bee For Loops 7_instruction: "¿Le estás pillando el truco a los
        bucles? Esto es parecido al último puzzle, pero tienes que conseguir 2, 4,
        6, 8,10 de néctar. Ya tienes el código de arranque, excepto los números en
        los bucles del contador. ¡Vamos a recoger algo de néctar!"
      NEW Course 4 Bee For Loops 8_instruction: |
        Si tu bucle está contando, el incremento se agrega a la variable contador en cada ciclo. ¿Cuál debe ser el incremento para recoger 3, 6, 9 de néctar? \r
      NEW Course 4 Bee For Loops 9_instruction: Si tu ciclo es regresivo, se resta
        el incremento de la variable contador en cada bucle. Lo que debería ser un
        incremento a recoger néctar 9, luego 6 y 3 ?
      NEW Course 4 Bee For Loops 95_instruction: Echa un vistazo a cada pieza de la
        ciclo "for" que acabas de crear.  ¿Puedes averiguar qué números necesitas
        multiplicar por dos para resolver este rompecabeza? ¿Por qué funciona?
      NEW Course 4 Play Lab Params 11_instruction: "¡Es hora de jugar! Diviértete
        con todos los bloques en tu caja de herramientas. "
      NEW Course 4 Play Lab Params 5 5_instruction: 'Introducir entradas de parámetro
        de actor con los números (1, 2 y 3) para hacer de estos actores patrulla. '
      NEW Course 4 Play Lab Vars 4 5_instruction: '"Que piensas que este código realizara?
        Presiona "Ejecutar" para ver que ocurre."'
      NEW Course 4 Play Labs For Loops 7a_instruction: Usando lo que has aprendido
        hasta ahora, ¿puedes hacer al dinosaurio dar un paso adelante cada vez que
        el pingüino cuenta?
      NEW Course 4 Play Labs For Loops 8 Free Play_instruction: "Es hora de Jugar
        libremente, \ndiviértete con todos los bloques de tu caja de herramientas.\n"
      NEW Course 4 Play Labs For Loops 8a_instruction: 'Desafío: ¿Cómo utilizas el
        ciclo for para lograr que todos los actores den la vuelta, digan su número
        de actor y desaparezcan de la pantalla? '
      New Play Lab Project_instruction: |
        Crea tu propia historia o juego! Tu código
        es guardado como un proyecto al cual tu puedes acceder en cualquier momento.
      Ninjacat Demo B (copy 1)_instruction: |
        \r
        Let’s begin by exploring a simple
        videogame, and then figuring out how it works. You can use the arrow keys
        to move the ninja left, right and jump - try to catch the unicorn and avoid
        the dragon!\r
        \r
        \r
        \r
          \r
        \r
      Ninjacat Demo B_instruction: |
        Let’s begin by exploring a simple videogame,
        and then figuring out how it works. You can use the arrow keys to move the
        ninja up and down - try to catch the unicorn and avoid the dragon! When you
        think you've figured out how the game works, click "Finish"
      Ninjacat Demo No Animate_instruction: |
        Let’s begin by exploring a simple videogame,
        and then figuring out how it works. You can use the arrow keys to move the
        ninja up and down - try to catch the unicorn and avoid the dragon! When you
        think you've figured out how the game works, click "Finish"
      October15 bat_instruction: |
        Freeplay: Here are some functions to play with.  Can
        you draw a bat?\r
      October15 ghost 1_instruction: |
        Give the ghost eyes, using the "draw a circle"
        function.
      October15 JoL 1_instruction: |
        Program the artist to design a face for your
        jack-o-lantern!
      October15 pumpkin 1_instruction: |
        Finish this jack-o-lantern by drawing the
        eyes and nose in any style you would like.
      October15 stars 1_instruction: |
        Use loops and the "random integer" block
        to fill the night sky with stars of different shapes and sizes.
      Overworld Avoid Monsters_instruction: Encontrarse con un creeper no es buena
        idea. Pásalos con cuidado y entra en tu casa.
      Overworld Chop Tree_instruction: La madera es un recurso importante porque puedes
        construir muchas cosas con ella. Camina hacia el árbol y usa el comando "destruir
        bloque" para talarlo.
      Overworld Chop Trees_instruction: Debemos construir una casa antes de que caiga
        el sol. Las casas requieren mucha madera. Tala los 3 árboles.
      Overworld Free Play 20x20_instruction: "¡Felicitaciones! Completaste todos los
        puzles. Ahora mina, construye y crea algo único con todo lo que aprendiste
        hasta ahora."
      Overworld Free Play_instruction: Este paisaje es para que juegues y elijas qué
        construir.
      Overworld House Frame - A_instruction: "¡Hagamos nuestra propia casa! Este lugar
        se ve bien. Construye una estructura en los bloques de tierra."
      Overworld House Frame - C_instruction: "¡Hagamos nuestra propia casa! Este lugar
        se ve bien. Construye una estructura en los bloques de tierra."
      Overworld House Frame B_instruction: Una pared está terminada, construyamos
        ahora el resto de la casa siguiendo los planos de la planta. Vas a tener que
        repetirte mucho aquí.
      Overworld House Frame B2_instruction: Una pared está terminada, construyamos
        ahora el resto de la casa siguiendo los planos de la planta. Vas a tener que
        repetirte mucho aquí.
      Overworld House Frame C_instruction: Una pared está terminada, construyamos
        ahora el resto de la casa siguiendo los planos de la planta. Vas a tener que
        repetirte mucho aquí.
      Overworld House Frame Chosen_instruction: Construye el resto de tu casa de cualquier
        material que desees. El comando "repetir" va a venir bien.
      Overworld House Frame_instruction: "¡Construyamos una casa! Este lugar se ve
        bien. Construye el marco en los bloques de tierra."
      Overworld Minecart Track_instruction: Ya estás de vuelta en la superficie y
        tienes muchos recursos subterráneos. Ahora construiremos un camino desde tu
        casa. El primer paso es limpiar el camino. Síguelo y elimina los árboles.
      Overworld Move to Sheep_instruction: Agrega un segundo comando "ir hacia adelante"
        para llegar a las ovejas.
      Overworld Place Wall_instruction: Una casa comienza con una pared. Para construir
        la primera parte de tu casa, ubica los comandos "colocar" e "ir hacia adelante"
        dentro del bucle de repetición.
      Overworld Plant Crops_instruction: Es bueno planificar. Planta cultivos a ambos
        lados del agua para no pasar hambre más adelante.
      Overworld Powered Minecart_instruction: "¡Buen trabajo! Reuniste muchos recursos
        y construiste una casa modesta. Ahora coloca rieles desde el extremo del mapa
        hasta la puerta de tu casa."
      Overworld Shear Sheep_instruction: ¡Hora de esquilar! Usa el comando "tijera"
        para obtener lana de las dos ovejas.
      PDAlg 13-16 Sam Extension Puzzle_instruction: |
        Add a second parameter to "onscreen?"
        for Sam's y coordinate and update the function so it keeps him safe on all
        four sides.
      PDAlg 17-20 Luigi Extension Puzzle_instruction: |
        Without modifying your existing
        "cost" function, create a new "coupon" function that takes a pizza topping
        and coupon code and returns the cost of a pizza with that topping. If the
        coupon code is correct (you get to decide what it is), apply a 30% discount
        to the pizza.
      PDAlg 8-12 ex dr 1_instruction: |
        The definition in this Design Recipe doesn't
        match both examples. Test each example to see which is failing, and then fix
        the definition to match.
      PDAlg 8-12 ex dr 2_instruction: |
        This student has created two examples for
        the function "apples" but something's not quite right. How would you direct
        this student to correct their mistake?
      PDAlg 8-12 Rocket Height Puzzle_instruction: |
        Let's write a "rocket-height"
        function with simple acceleration. Write a function that ensures the rocket
        is at 15 meters at 1 second, 45 meters at 2 seconds, 95 at 3 seconds, and
        165 at 4 seconds.
      PDAlg Big Game History_instruction: |
        Now that you've played through a Big
        Game level you should see a new entry in your history. Click the Version History
        button and you should see at least one version. Each time you go back to a
        Big Game level you'll get a new record in your version history that you can
        revert back to.
      PDAlg Big Game Remix_instruction: |-
        Here's your Big Game as you last left it.
        Try clicking the Remix button to spin off a new remix of your project.\r
        \r
        Any
        changes you make after you click Remix will be saved on your new remix and
        not on your main Big Game.
      PDAlg Design Recipe Delete_instruction: |
        Click the delete button to get rid
        of this function, then try creating and deleting a few of your own.
      PDAlg Design Recipe Examples_instruction: |
        The definition in this Design Recipe
        doesn't match both examples. Test each example to see which is failing, and
        then fix the definition to match.
      PDAlg Design Recipe Required_instruction: |
        Complete the Design Recipe for the
        "eggs" function, making sure to create and test your examples.
      PDAlg Updates Cond_instruction: |
        When you went to PD in the summer, the Conditional
        block that you were introduced to was black and allowed any data type to be
        used. This proved to be confusing, given that every other function we've
        seen always produces the same type of data. To help make conditionals clearer
        and more consistent we've replaced the single black block with a separate
        block for each data type.
      PDAlg Updates Errors_instruction: |
        Run the provided program and use the error
        messages to try and track down the bugs.
      PDAlg Updates Space_instruction: |
        Making use of limited programming space (especially
        on small screens) is challenging with a block based language. To help with
        this we've added a few features. Experiment with this provided code to see
        how the space can be manipulated to deal with larger programs.
      PDK5 Conditionals 1_instruction: |
        Purple flowers may have either 1 or 0 nectar,
        but you don't know which one! Be careful not to collect nectar from a purple
        flower if it doesn't have any. Check if the nectar is equal to 1 by using
        the if block.
      PDK5 Conditionals 2_instruction: "Try this puzzle that uses conditionals and\nloops
        together. Use the \"if\" block to decide when to turn. Hint: you only\nneed
        one more block to complete this puzzle. \n"
      PDK5 Events 1_instruction: "So far all of the programs we've written are executed\nin
        order from top to bottom. In this puzzle, we'll use \"Events\" to respond\nto
        an action on demand. Make the octopus say \"Hello\" only when you click\non
        the Octopus. \n"
      PDK5 Functions 1_instruction: |
        Hello. Me zombie artist. Me love drawing! Help
        me draw the square glasses.  Hint:  the bridge between the glasses is 25 pixels
        shorter than the square length.
      PDK5 Functions 2_instruction: ¡Las funciones permiten definir nuevos bloques!
        Hemos movido los bloques para dibujar un cuadrado a la función denominada
        "dibuja un cuadrado". ¿Puedes utilizar la función "dibuja un cuadrado" para
        crear las gafas? Los cuadrados están separados por 75 píxeles.
      PDK5 Loops 1_instruction: "Instead of using 5 \"move forward\" blocks, use\nthe
        \"repeat\" block with a \"move forward\" block inside of it. In computer\nscience,
        this is called a \"loop.\" \n"
      PDK5 Loops 3_instruction: |
        Here's another puzzle to practice loops. What happens
        if you use the repeat block to run the code already provided on the workspace
        4 times?
      Pixelation - Lesson 14 - Fix bit offset v.2_instruction: |
        Something happened
        to the bits in this image! Find the error and fix it! Hint: a few extra bits
        were added. You should only need to remove some bits.
      Pixelation - Lesson 14 - Fix bit offset_instruction: |
        A single extra bit was
        inserted into the stream of bits that make up the C of the Code.org logo.
        That extra bit bumps all of the other bits down the line which makes the logo
        look messed up. Hunt down the extra bit and remove it to fix the Code.org
        logo.
      Pixelation - Lesson 14 - Fix the error_instruction: |
        Something happened to
        the bits in this image!  Find error and fix it!  Hint: a few extra bits were
        added.  You should only need to remove some bits.
      Pixelation - Lesson 14 - Make the Letter A_instruction: |
        Make a 3x5 letter
        'A'. The widget is setup with the incorrect dimensions. Your first task
        is to set the second byte to the 8-bit binary code for 5: 0000 0101. Then
        start entering pixel data.
      Pixelation - Lesson 14 - Make your own B and W Image_instruction: |
        Now make
        your own image! We've started you off with a 10x10 canvas but you can make
        it whatever size you want. Happy pixeling!
      Pixelation - Lesson 14 - Make your own B&W Image_instruction: |
        Now make your
        own image! We've started you off with a 10x10 canvas but you can make it
        whatever size you want.  Happy pixeling!
      Pixelation - Lesson 15 - Color Free Play_instruction: |
        Requirements: The icon
        must be 16x16 pixels. You must use the Pixelation Widget to encode the bits
        of color information. The image must be encoded with at least 12 bits per
        pixel.
      Pixelation - Lesson 15 - Color Shades 4x4_instruction: |
        We start you out with
        the 4x4 image Maddie created in the video. Your task is to fill a 4x4 grid
        with colors using 12-bits per pixel. Here are the requirements: Row 1 - fill
        with shades of red. Row 2 - shades of green. Row 3 - shades of blue. Row 4
        - shades of gray.
      Pixelation - Lesson 15 - Color Shades_instruction: |
        We start you out with the
        row of shades of red that Maddie created in the video. Experiment with 6-bit
        color by filling in the bottom row of the image with shades of a different
        color. Here is an example with some shades of blue. Try your own color!
      Pixelation - Lesson 15 - Complete 3-bit color_instruction: |
        We start you with
        the 4x2 image Maddie was creating, but we've left out the last two squares.
        Finish off the image by figuring out which two colors are missing and encode
        them.
      Pixelation 2_instruction: |
        Something happened to the bits in this image!  Find
        error and fix it!
      Pixelation 4x4 Empty_instruction: |
        The width and height are now encoded in
        the pixel data. Can you figure out how to adjust the dimensions?
      Pixelation Bee_instruction: |
        This larger image of a bee encodes color with
        12 bits per pixel, but viewing in hex makes it easier to see the color of
        each pixel. If you switch to binary mode - hold on to your hat - it's a lot
        of bits. Here's another mind-blowing thing to try: slide the bits per pixel
        up to 24 bits per pixel. What happens? Can you explain this behavior?
      Pixelation Flappy_instruction: |
        Here is a bigger image at 9 bits per pixel.
        With 9 bits per pixel you can express 512 different colors. Click through
        to see the next image which is even more sophisticated, but easier to understand.
      Play Lab Rocket 1_instruction: |
        A rocket blasts off, traveling at 15 meters
        per second... press "Run" to see how this word problem looks as an animation.
      Play Lab Rocket 2_instruction: |
        We've started the Design Recipe for rocket-height
        using the contract and examples you just wrote. Complete the function definition
        for rocket-height and run your animation.
      Play Lab Rocket 2B_instruction: |
        A rocket blasts off, traveling at 15 meters
        per second. Using the Design Recipe, write a function called rocket-height
        that takes in a number of  seconds that have passed since the rocket took
        off, and produces the height of the rocket at that time.
      Play Lab Rocket 3_instruction: |
        Awesome, now can you update that function so
        that our rocket moves more quickly? Make sure to update the purpose statement,
        examples, and function definition to launch a rocket at 40 meters per second.
      Play Lab Rocket 4 (copy 1)_instruction: |
        Real rockets start off slowly and
        gain speed over time - let's make ours do the same! Write an exponential
        function that describes a rocket that travels at "seconds" squared meters
        per second.
      Play Lab Rocket 4_instruction: |
        Real rockets start off slowly and gain speed
        over time - so let's add some simple acceleration to ours! Can you write
        a function that describes a rocket that is at 10 meters at 1 second, 40 meters
        at 2 seconds, 90 meters at 3 seconds, 160 at 4 seconds and so on?
      Play Lab Rocket 5_instruction: |
        Much better, but let's write one more function
        with simple acceleration. This time the rocket should be 15 meters at 1 second,
        45 meters at 2 seconds, 95 at 3 seconds, and 165 at 4 seconds.
      Play Lab Rocket Free Play_instruction: |
        Free Play: Experiment with your rocket-height
        function to make the rocket fly in different ways. Click "Finish" when you
        are done.
      Poorva-test_instruction: |
        Here are regular instructions for a level. There
        is nothing fancy going on here.
      Quantum Bee - Ryan_instruction: Estas nubes me están molestando! Algunas de
        las nubes tienen flores dentro, y otras no. Debo comprobar cada nube y obtener
        el néctar sólo de las flores.
      Quantum Bee_instruction: "¡ Las flores moradas pueden tener un tipo de néctar
        de 1 ó 0, pero tu no sabes cuál !. Ten cuidado de no recolectar el néctar
        de una flor morada sin  néctar. Revisa si el valor del néctar es igual a 1
        usando el bloque “if”. "
      Ryan - 4-5 Bee Conditionals 2_instruction: La abeja sólo quiere ahora néctar.
        No todos los objetos son flores, así que compruebe debajo de cada nube a ver
        si se esconde una flor. Si es así, puede recolectar néctar.
      Ryan - Bee Conditionals_instruction: La abeja sólo quiere néctar ahora. No todos
        los objetos son flores, así que mira debajo de TODAS LAS NUBES para verlo
        si esta escondiendo una flor. Si es así, puedes coger néctar.
      Ryan Test Locked Blocks_instruction: Aquí hay una función denominada "patrulla".
        Edítela para mover el Gato hacia arriba 400 píxeles y luego hacia abajo 400
        píxeles.
      Ryan's clone of C4S15P10_instruction: "We've added one last function for you.\n\\r\n\\r\nUse
        an \"if\" statement to program your game to call the \"level_up\"\nfunction
        only when \"player_score\" becomes greater than a certain number.\\r\n\\r\nFor\nexample:
        \"player_score\" > 6\\r\n\\r\nPlay the game, and make it past level\n4 to
        move to the next puzzle. "
      Sam the Butterfly 1 (copy 1)_instruction: |
        This butterfly is named Sam, and
        the game area is Sam’s yard. Sam's yard is 400 pixels wide by 400 pixels
        tall! As you can see, Sam is free to walk around the yard, and the coordinates
        at the top of the screen update to tell you his location. Use the arrow keys
        to move sam around his yard. Help Sam collect all of the flags to move on.
      Sam the Butterfly 1_instruction: |
        This bat is named Sam, and the game area
        is Sam’s yard. Sam's yard is 400 pixels wide by 400 pixels tall! As you can
        see, Sam is free to walk around the yard, and the coordinates at the top of
        the screen update to tell you his location. Click "Run" and then use the
        arrow keys to move Sam around his yard, making note of Sam's coordinates
        at different locations. Click "Finish" when you're ready to move on.
      Sam the Butterfly 2_instruction: |
        Sam's mom wants to make sure that she can
        always see at least a bit of him, so lets write some functions that help make
        sure he doesn't go too far out of the yard. Here's a function called safe-left?
        - it should take a Number for its domain that represents Sam's x-coordinates
        and return true if he's completely visible on screen. If your function works,
        Sam shouldn't be able to leave the yard from the left side.
      Sam the Butterfly 3_instruction: |
        In the last puzzle we kept Sam from leaving
        on the left, now let's do the same thing on the right. Complete the safe-right?
        function to make sure Sam can't go off the right side of the screen.
      Sam the Butterfly 4_instruction: |
        Huh, we can keep Sam from leaving on the
        left, or we can keep him from leaving on the right, but how can we keep him
        safe from leaving both directions? Try using the and block to program the
        function on-screen? to check if Sam is safe-left? and safe-right?
      Sam the Butterfly 5_instruction: |
        Free Play: Awesome, we've kept Sam safe
        on the left and right! Use this free play stage to experiment with your functions
        and further improve onscreen?
      Sam the Butterfly 6_instruction: |
        We've added a new parameter "y" to the
        "on-screen?" function. Update the function so that it checks that "safe-left?"
        AND "safe-right?" AND "safe-up?" are all true. When you've fixed the
        function, try going out of the yard from the left, right, and top sides.
      Sam the Butterfly 7_instruction: |
        Only one last direction to worry about! Create
        a "safe-down?" function and update the "on-screen?" function so that it
        checks up, down, left, and right.
      Sam the Butterfly Complete_instruction: |
        Only one last direction to worry about!
        Create a "safe-down?" function and update the "on-screen?" function so
        that it checks up, down, left, and right.
      scrat 16 (copy 1)_instruction: |
        Acorn! Acorn! Acorn! Use an "if" block to
        get me there with the fewest number of blocks.
      scrat 16_instruction: ¡Bellota! ¡Bellota! ¡Bellota! Utiliza un bloque "si" para
        llevarme ahí con el menor número de bloques.
      scrat 17 (copy 1)_instruction: |
        Ok, let's do that again for practice - this
        isn't very different, but watch out for the <insert obstacle name for Scrat>!
      scrat 17_instruction: Ok, vamos a hacerlo de nuevo para practicar - este no
        es muy diferente, ¡Pero ten cuidado con la pared!
      scrat 18 (copy 1)_instruction: El bloque "If-else" verifica una condición y
        después hace o una cosa u otra. Para llevarme a la bellota intenta usar este
        nuevo bloque.
      scrat 18_instruction: Los bloques "si-si no" comprueban una condición, y luego
        hacen una cosa O la otra. Para llevarme a la bellota intenta usar este nuevo
        bloque.
      scrat 19 (copy 1)_instruction: Una práctica más del bloque "si-sino", ¿Puedes
        hacerlo bien en tu primer intento?
      scrat 19_instruction: Una práctica mas con el bloque "si-si no", ¿Puedes hacerlo
        bien en tu primer intento?
      scrat 20_instruction: "¿Puedes agregar sólo 3 bloques para ayudarme a resolver
        un laberinto más complejo? Si lo haces correctamente, puedo caminar cualquier
        camino curvo sin importar su longitud. ¡Apresúrate! ¡El hielo se está derritiendo!"
      SpecialFrozenLevel_instruction: "¡Te has convertido oficialmente en un artista
        maestro! Crea un paraíso invernal."
      Standalone_Artist_1_instruction: "¡ Bienvenido a Artista! En primer lugar, vamos
        a intentar hacer un simple cuadrado usando el bloque vuelta derecha y el bloque
        mover hacia adelante. Cada lado debe tener 100 píxeles de largo."
      Standalone_Artist_2_instruction: Dibuja este diamante con 120 y 60 grados de
        ángulo y lados largos de 150 píxeles.
      Standalone_Artist_3_instruction: "¿Puede dibujar este hexágono con lados de
        100 píxeles y vueltas de 60 grados?"
      Standalone_Artist_4_instruction: Ahora tienes un nuevo bloque para poder jugar,
        el bucle. Este repetirá un conjunto de comandos. ¿Qué sucede si realizar un
        bucle de estos comandos 6 veces?
      Standalone_Artist_5.5_instruction: 'Nota que simplificamos el código del diamante
        convirtiéndolo en una repetición. Puedes repetir toda la secuencia 12 veces
        para dibujar la flor. Pista: Necesitas girar 30 grados después de dibujar
        el diamante, para que no sigas dibujando sobre el mismo diamante.'
      Standalone_Artist_5_instruction: "¿Cuántas veces necesitas repetir  este diamante
        para dibujar la flor?"
      Standalone_Artist_6_instruction: 'Repite este código de hexagono 6 veces para
        crear el diseño. ¿Cuantos grados necesitarás girar cada vez? Pista: Divide
        el numero de grados en un circulo por el numero de veces que estás repitiendo.'
      Standalone_Artist_7_instruction: 'Una función es otra herramienta de programación
        que te ayuda a evitar repetir código. Esta función dibuja una flor, para que
        la puedes utilizar en cualquier momento para dibujar una flor. Utiliza esto
        y el nuevo bloque de salto para dibujar estas flores. Pista: Hay 150 pixeles
        de espacio entre cada flor'
      Standalone_Artist_8_instruction: Aquí hay una función llamada "Dibuja una figura"
        que hemos programado para dibujar hexágonos. Ejecuta el código para ver lo
        que hace y luego experimenta con la función para ver qué pasa. ¿Puedes hacer
        que dibuje un patrón de cuadrados, triángulos u octágonos?
      Standalone_Artist_9_instruction: "¡Ahora sigue adelante y haz la imagen que
        tu quieras! ¡Incluso tienes una función vacía con la que puedes hacer lo que
        quieras!"
      Standalone_Artist_v2_instruction: "¡ Bienvenido a Artista! En primer lugar,
        vamos a intentar hacer un simple cuadrado usando el bloque vuelta derecha
        y el bloque mover hacia adelante. Cada lado debe tener 100 píxeles de largo."
      template test_instruction: what up
      Test Play Lab_instruction: This is a test play lab level.
      test_sarah_instruction: hi
      Text Compression 1_instruction: |
        Look for patterns (repeated words or phrases)
        in the text. Enter the patterns you see into the dictionary on the right.
        As you type entries into the dictionary, the symbol for the entry is inserted
        into the text in place of the pattern.
      Total Artist Clone Me_instruction: |
        Freeplay: Here are the functions you've
        written, and some more for you to play with. Draw something awesome! Play
        with the pen width to see how different your drawings look!
      U1L10 NetSim numbers with decimal_instruction: |
        Invent and test a protocol
        for encoding and sending text messages. Your protocol must include the letters
        a-z, spaces, and common punctuation marks. You may add additional characters
        if you wish. See the worksheet handed out by your teacher for more detailed
        instructions!
      U1L11 NetSim numbers with Ascii_instruction: |
        Work with a partner or in a small
        team to develop a protocol that allows you to send formatted text. See the
        worksheet handed out by your teacher for more detailed instructions!
      U1L13 Text Compression_instruction: |
        Look for patterns (repeated words or phrases)
        in the text. Enter the patterns you see into the dictionary on the right.
        As you type entries into the dictionary, the symbol for the entry is inserted
        into the text in place of the pattern.
      U1L4 NetSim SendAB_instruction: "Develop, document, and test a protocol that\nallows
        you to use Internet Simulator to relay a message. See the worksheet\nfor more
        detailed instructions.  \n"
      U1L8 NetSim numbers no decimal_instruction: Default instructions
      U1L8 NetSim numbers with decimal_instruction: |
        With your partner, develop a
        protocol or set of rules for communicating a drawing using only bits. See
        the worksheet handed out by your teacher for more detailed instructions!
      U2 frequency caesar_instruction: Instrucciones
      U2 frequency random sub_instruction: Instrucciones
      U2 vigenere cipher_instruction: Instrucciones
      U2 Vigenere_instruction: Test
      U2L04 - NetSim Routers with Addresses_instruction: |
        Send messages with your
        classmates (Click to see full instructions)
      U2L05 - NetSim - Packets and Building TCP_instruction: |-
        Develop a Protocol
        for Reliably Sending a Message.\r
        \r
        Constraints:\r
        - Packets may contain
        only 6 characters\r
        - Packets may drop with small probability\r
        - Packets
        may not arrive in order
      U2L10 NetSim Automatic DNS_instruction: |
        In this version of the Internet Simulator,
        a Domain Name System (DNS) is provided for you and knows the IP addresses
        of all connected computers. Send a message in the form GET [hostname] to the
        DNS service at address <yourRouterNumber>.15 to get a student's address.
      U2L10 NetSim Manual DNS_instruction: |
        In this version of the simulator you
        can't see the other students' addresses.  Instead, one of you must act as
        a name service, to help share addresses with each other.
      U2L14 frequency random_instruction: Test
      U2L2 NetSim Hub Mode_instruction: |
        Now use the Internet Simulator to send the
        battleship moves. For setup, join a Room with your group, and add ships to
        your paper board for each opponent. When playing, all communication must be
        done through the tool, so no talking, but have fun!\r
      U2L3 NetSim Hub Mode_instruction: |
        Use the Internet Simulator to test out your
        group's binary communication protocol for battleship. How short can you make
        the message and response?
      U2L4 NetSim Routers Addresses_instruction: |-
        For this activity, connect to a
        router with the others in your group. Important note: The router will only
        properly route messages where the first 4 bits are the To: address and the
        second 4 bits are the From: address.\r
        \r
        [TODO: NetSim needs to support
        hierarchical addresses. For now, level is set up for 4 bit to and from addresses]
      U2L5 NetSim Classroom Internet_instruction: |
        For this activity, connect to
        a router with the others in your group. The Internet Simulator now provides
        a place for you to put the To and From addresses, so you don't have to type
        out the bits manually.\r
        \r
      U2L7 NetSim Need for Packets_instruction: |
        Transfer your favicon to a partner
        across a network in which the larger a packet grows, the more likely it is
        to be dropped.
      U3 - Arrays - appendItem_instruction: |
        Create an array of odd numbers 1-11
        by using appendItem. (Click to see full instructions)
      U3 - Arrays - assignment_instruction: |
        Use indexes to change the values in
        this array from 1 to 0. (Click to see full instructions)
      U3 - Arrays - assignment2_instruction: |
        Calculate the sum of three values stored
        in an array. (Click to see full instructions)
      U3 - Arrays - assignment3_instruction: |
        Increase the value of each value in
        the randomly generated array by 1. (Click to see full instructions)
      U3 - Arrays - createFirstArray_instruction: |
        Create an array of the even numbers
        from 0 to 10 and display its contents with console.log. (Click to see full
        instructions)
      U3 - Arrays - Demo App_instruction: |
        Use the "My Favorite Things" app. How
        might this app be making use of an array? (Click to see full instructions)
      U3 - Arrays - expressionsAsIndexes_instruction: |
        Write a program that displays
        a randomly chosen color from the array. (Click to see full instructions)
      U3 - Arrays - favThings addItem_instruction: |
        Write code that allows a user
        to add their own favorite things to the list. (Click to see full instructions)
      U3 - Arrays - favThings bounds_instruction: |
        Add if statements to your event
        handlers that prevent the global index from going out of bounds. (Click to
        see full instructions)
      U3 - Arrays - favThings Counting Variable_instruction: |
        Create a global variable
        for the current index and use it to display the first item in the array. (Click
        to see full instructions)
      U3 - Arrays - favThings createArray_instruction: |
        Create an array of words
        describing your favorite things. (Click to see full instructions)
      U3 - Arrays - favThings firstOutput_instruction: |
        Use setText to display the
        first item in the array. (Click to see full instructions)
      U3 - Arrays - favThings giveIDs_instruction: |
        Give your UI elements descriptive
        and meaningful IDs. (Click to see full instructions)
      U3 - Arrays - favThings keepPlaying_instruction: |
        Make any other improvements
        you want! (Click to see full instructions)
      U3 - Arrays - favThings Next_instruction: |
        Write code that allows the user
        to move forward through your list by clicking the "Next" button. (Click
        to see full instructions)
      U3 - Arrays - favThings Prev_instruction: |
        Write code that allows the user
        to move backward through your list by clicking the "Last" button. (Click
        to see full instructions)
      U3 - Arrays - favThings template_instruction: |
        Give your UI elements descriptive
        and meaningful IDs. (Click to see full instructions)
      U3 - Arrays - globalVariableIndex_instruction: |
        Give your UI elements descriptive
        and meaningful IDs. (Click to see full instructions)
      U3 - Arrays - indexPractice_instruction: |
        Write the contents of the array to
        the screen in numerical order. (Click to see full instructions)
      U3 - Arrays - insertingItems_instruction: |
        Insert items into an array to form
        a complete sentence. (Click to see full instructions)
      U3 - Arrays - insertionErrors_instruction: |
        Run each command that references
        indexes that are out of bounds and observe the results. (Click to see full
        instructions)
      U3 - Arrays - introIndex_instruction: |
        Display the first and last element in
        the array. Display the number 5 from the array. (Click to see full instructions)
      U3 - Arrays - length_instruction: |
        Use list.length to determine the length
        of each array. (Click to see full instructions)
      U3 - Arrays - lengthMinus1_instruction: |
        Use list.length - 1 to log the last
        item in the array to the console. (Click to see full instructions)
      U3 - Arrays - remove_instruction: |
        Remove items from an array to form a complete
        sentence. (Click to see full instructions)
      U3 - Arrays - stringsInArrays_instruction: |
        Write a sentence word by word by
        adding strings to an array. (Click to see full instructions)
      U3 - Canvas - 200dots_instruction: |
        Add a loop to your program that draws 200
        dots on your canvas. (Click to see full instructions)
      U3 - Canvas - appendToArray_instruction: |
        Create an array to store each event
        parameter. Append each event parameter to this array within your event handler.
        (Click to see full instructions)
      U3 - Canvas - changeToMouseMove_instruction: |
        Change your program so that dots
        are drawn at the location of the mouse as the user moves the mouse on the
        canvas. (Click to see full instructions)
      U3 - Canvas - clickToAdd_instruction: |
        Change your program so that dots are
        added to the canvas when the user clicks on it. (Click to see full instructions)
      U3 - Canvas - delete_instruction: |
        Create a button that deletes the drawing
        by clearing the canvas and removing all stored values. (Click to see full
        instructions)
      U3 - Canvas - draw at click point_instruction: |
        Change your program so that
        dots are drawn at the location of the mouse click. (Click to see full instructions)
      U3 - Canvas - freePlay_instruction: |
        Extend the functionality of one of the
        effects, or create an entirely new one of your own. (Click to see full instructions)
      U3 - Canvas - introCanvas_instruction: |
        Add a canvas to your app and set it
        to be the active canvas. Then add a large dot to your canvas. (Click to see
        full instructions)
      U3 - Canvas - movementFunction fix Orig_instruction: |
        Modify the "Original"
        button event handler so that it takes the movement of the mouse into account.
        (Click to see full instructions)
      U3 - Canvas - movementFunction_instruction: |
        Write a function that takes the
        movement of the mouse as input and generates a line width as output. (Click
        to see full instructions)
      U3 - Canvas - One Dot sprayPaint_instruction: |
        Write code that redraws your
        image using a dot whose x and y locations use offsetX and offsetY with a small
        random value added. (Click to see full instructions)
      U3 - Canvas - redrawOriginal_instruction: |
        Write a function that processes
        your array, redrawing the dots as they originally appeared. (Click to see
        full instructions)
      U3 - Canvas - redrawRandom_instruction: |
        Set up a button and event handler
        for the random function. (Click to see full instructions)
      U3 - Canvas - redrawRandom2_instruction: |
        Write a function that processes your
        array, redrawing every dot with a random size. (Click to see full instructions)
      U3 - Canvas - shiftKey_instruction: |
        Add an if statement to your event handler
        so dots are only drawn when the shift key is pressed. (Click to see full instructions)
      U3 - Canvas - sketch_instruction: |
        Write code that redraws your image using
        a sketch effect. (Click to see full instructions)
      U3 - Canvas - sprayPaint_instruction: |
        Update the spray paint code so that
        it redraws your image using multiple random dots instead of using a nested
        for loop. (Click to see full instructions)
      U3 - Canvas - transparentDots_instruction: |
        Change the colors of your dots
        so they have a fully transparent stroke and partially transparent fill. (Click
        to see full instructions)
      U3 - Canvas - usingOffsetXY_instruction: |
        Add a console.log command inside
        the function of your event handler. Use it to display the event parameter.
        Click on the screen to see the contents of the event parameter (Click to see
        full instructions)
      U3 - Conditional Basics - 6_instruction: |
        Add a setText after the if statement
        to "Nope. Guess again." (Click to see full instructions)
      U3 - Conditionals - Combine AND and OR_instruction: |
        Write an if statement
        that uses AND and OR to display "Time to go to school!" if it's not the
        weekend and the user is under 18. (Click to see full instrucitons.
      U3 - Conditionals - Combine AND OR and NOT_instruction: |
        Write an if statement
        that uses AND and OR to display "Time to go to school!" if it's not the
        weekend and the user is under 18. (Click to see full instructions.)
      U3 - Conditionals - Combine AND OR Simple_instruction: |
        Write an if statement
        that uses AND and OR to display "Sleep in!" if it's the weekend and the
        user is a teenager. (Click to see full instructions.
      U3 - Conditionals - intoOr_instruction: |
        Add 2 if statements that use the OR
        operator. (Click to see full instructions)
      U3 - Conditionals - introAND_instruction: |
        Add 2 if statements that use the
        OR operator. (Click to see full instructions)
      U3 - Conditionals - Simple AND_instruction: |
        Write an if statement that uses
        AND to display "You are a teenager." if the user enters an age between 13
        and 19. (Click to see full instructions)
      U3 - Conditionals - Simple OR_instruction: |
        Write an if statement that uses
        OR to display "It's the weekend!" if the user enters a weekend day at the
        prompt. (Click to see full instructions)
      U3 - Design Mode - Console Log_instruction: |
        Update the ID names and `console.log`
        messages to match the correct button. (Click to see full instructions.)
      U3 - Design Mode - Layers and Delete_instruction: |
        Fix the layout of the bullseye
        game. (Click to see full instructions)
      U3 - Design Mode - Multi Screens 2_instruction: |
        Make a 2 screen app which
        can switch back and forth between a black screen and a white screen using
        buttons. (Click to see detailed instructions.)
      U3 - Design Mode - Multi Screens_instruction: |
        Make a 2 screen app with a black
        screen and a white screen. (Click to see detailed instructions)
      U3 - Design Mode - Other Events_instruction: |
        Delete the button and make the
        image move to a random location when you click on it. (click to see detailed
        instructions)
      U3 - Design Mode - WTF Console Log_instruction: |
        Add a 3 console.log messages
        and test them out. (Click to see full instructions.)
      U3 - Design Mode -Recreate Beyond Buttons_instruction: |
        Recreate the game from
        the "Chaser Game" with a Welcome Screen and Game Over Screen. (Click to
        see full instructions.)
      U3 - Design Mode 1_instruction: |
        Add a large red button to your screen using
        Design Mode. (Click for full instructions.)
      U3 - Dice - Dropdown and Score_instruction: |
        Add guess and score to the Dice
        Game (Click to see full instructions)
      U3 - Dice - Dropdown with Strings_instruction: |
        Add a dropdown for difficulty
        level that prints the difficulty level in the console. (Click to see full
        instructions)
      U3 - Dice - If_instruction: |
        Show different die images for the random number
        generated. (Click to see full instructions)
      U3 - Dice - Nested_instruction: |
        Use nested if statements to make the scoring
        different for the different game levels. (Click to see full instructions)
      U3 - High Low - Debug_instruction: |
        Debug the order of the conditionals so
        that it will actually tell the user when their guess is close. (Click to see
        full instructions)
      U3 - High Low - Dropdown_instruction: |
        Add a dropdown for their guess instead
        of promptNum (Click to see full instructions)
      U3 - High Low - Else if_instruction: |
        Add an else-if statement in order to
        tell the user if their guess is high or low instead of just wrong. (Click
        to see full instructions)
      U3 - High Low - Else_instruction: |
        Add an else statement so that the program
        will tell the user when they are right and when they are wrong. (Click to
        see full instructions)\r
      U3 - High Low - If_instruction: |
        Add code to the if statement that indicates
        the user guessed the secret number. (Click to see full instructions)
      U3 - Keys - Add Image URLs_instruction: |
        Add image URLs to your array. Replace
        the text area with an image and setText with setImageURL. Then test your app!
        (Click to see full instructions)
      U3 - Keys - Buttons and Keys_instruction: |
        Have the program respond the same
        way for both clicking images on the screen and hitting the up and down keys
        on the keyboard. (Click to see full instructions)
      U3 - Keys - Demo App_instruction: |
        Play with the image scroller. Press the
        left and right arrows to progress through the images.
      U3 - Keys - Final Image Scroller_instruction: |
        Update the image scroller to
        respond to buttons and key presses. (Click to see full instructions)
      U3 - Keys - Functions_instruction: |
        Write doUpArrow and doDownArrow functions
        and call the functions instead of duplicating the code. (Click to see full
        instructions)
      U3 - Keys - Key Up and Down_instruction: |
        Try out the keyup and keydown events
        to see how they are different from keypress. (Click to see full instructions)
      U3 - Keys - Multiple Keys_instruction: |
        Play a different sound when the down
        arrow is pressed. (Click to see full instructions)
      U3 - Keys - Practice Adding Images with URL_instruction: |
        Add image URLs to
        your image array. Test out the add button. Style your image scroller. (Click
        to see full instructions)
      U3 - Keys - Words to Images_instruction: |
        Add image URLs to your image array.
        Test out the add button. Style your image scroller. (Click to see full instructions)
      U3 - Loops -  9 Part 2_instruction: |
        Change the boolean expression for the
        while loop so that it will roll until both dice are greater than 3. (Click
        to see full instructions)
      U3 - Loops -  Complex Condition_instruction: |
        Change the boolean expression
        for the while loop so that it will stop when both dice are greater than or
        equal to 5. (Click to see full instructions)
      U3 - Loops - 1_instruction: |
        Change the condition for the while loop to check
        if the variable num is less than 90. (Click to see full instructions)
      U3 - Loops - 10_instruction: |
        Write a program that simulates the rolling of
        two dice. Roll the dice repeatedly until the sum of the dice is either 7 or
        11.
      U3 - Loops - 11_instruction: |
        Fix the condition so that it keeps rolling the
        die as long as the value is not a 2 or a 3 instead of rolling infinitely.
        (Click to see full instructions)
      U3 - Loops - 12_instruction: |
        Change the code so that it prints the string
        "Hi" 5 times. (Click to see full instructions)
      U3 - Loops - 13_instruction: |
        Update the code to count up by 3 instead of 1.
        (Click to see full instructions)
      U3 - Loops - 14_instruction: |
        Change the loop condition to prevent the infinite
        loop and stop counting once the count is past 30. (Click to see full instructions)
      U3 - Loops - 15_instruction: |
        Count the number of times the sum of the dice
        is 12. (Click to see full instructions)
      U3 - Loops - 16_instruction: |
        Find out how many times you have to roll to get
        the sum of 7 100 times (Click to see full instructions)
      U3 - Loops - 2_instruction: |
        Try creating an infinite loop using !=, > and
        <. (Click to see full instructions)
      U3 - Loops - 3_instruction: |
        Change the if statement to a while loop so the
        program will run until it rolls a 6. (Click to see full instructions)
      U3 - Loops - 4_instruction: |2
         Use the Debug Commands to make a list of all
        the values rolled before a 6. (Click to see full instructions)
      U3 - Loops - 5_instruction: |
        Add code inside the while loop which will update
        the variable num so that the condition will eventually become false. (Click
        to see full instructions)
      U3 - Loops - 6_instruction: |
        Fix the problem so the loop will run at least
        once. Change the initial value of num to a dummy value such as -1. (Click
        to see full instructions)
      U3 - Loops - 7_instruction: |
        Without adding any lines of code, reorder the
        code so that it prints all the values of num. (Click to see full instructions)
      U3 - Loops - 8_instruction: |
        Debug which number is not getting printed and
        add a write statement to display that value. (Click to see full instructions)
      U3 - Loops - 9_instruction: |2
         Modify the condition so that it keeps rolling
        as long as both are less than 3. (Click to see full instructions)
      U3 - Loops - Continue_instruction: |2
         Use the Debug Commands to to make a list
        of all the values rolled before a 6. (Click to see full instructions)
      U3 - Loops - minus = operator_instruction: |
        Update the code to use the -= operator
        to count from 30 down to 0 by 3's. (Click to see full instructions)
      U3 - Loops - Minus Minus_instruction: |
        Change the code to count down from 10
        to 1. (Click to see full instructions)
      U3 - Loops - plus and minus = operator_instruction: |
        Update the code to use
        the += operator. (Click to see full instructions)
      U3 - Loops - Plus Plus_instruction: |
        Change the code to use count++ instead
        of count = count + 1.  (Click to see full instructions)
      U3 - Loops - Typing in Console_instruction: |
        Use console to check the ending
        value of num. (Click to see full instructions)
      U3 - Loops And Arrays - Add 5_instruction: |
        Add 5 to all the values in an array
        (Click to see full instructions)
      U3 - Loops And Arrays - Challenge 1_instruction: |
        Write a function that finds
        and returns the minimum value in an array.   (Click to see full instructions)
      U3 - Loops And Arrays - Challenge 2_instruction: |
        Write a function that finds
        and returns the minimum value in an array.   (Click to see full instructions)
      U3 - Loops And Arrays - Counting Times_instruction: |
        Count the number of times
        5 appears in an array. (Click to see full instructions)
      U3 - Loops And Arrays - Divid by 2_instruction: |
        Divide every value in the
        array by 2. (Click to see full instructions)
      U3 - Loops And Arrays - Find Max_instruction: |
        Design a function that displays
        the smallest number in an array  (Click to see full instructions)
      U3 - Loops And Arrays - Find Min_instruction: |
        Complete the findMinVal function
        to find and display the smallest value in an array  (Click to see full instructions)
      U3 - Loops And Arrays - Functions that Return Value_instruction: |
        Call findMin
        within the console.log statement to calculate the minimum of two values.  (Click
        to see full instructions)
      U3 - Loops And Arrays - General Search Param_instruction: |
        Add a second parameter
        to the search function for the value to search for.  (Click to see full instructions)
      U3 - Loops And Arrays - Intro For Loop_instruction: |
        Add a for loop with a
        console.log inside and test out the 3 pieces of the for loop. (Click to see
        full instructions)
      U3 - Loops And Arrays - Linear Search_instruction: |
        Visit every element in
        the array and display "true" if the value is a 5, and "false" otherwise.
        (Click to see full instructions)
      U3 - Loops And Arrays - Loop Array If_instruction: |
        Use an if statement to
        only display the values in the array that are greater than 5. (Click to see
        full instructions)
      U3 - Loops And Arrays - Make it a Function - add list parameter_instruction: |
        Create
        a function that takes a list parameter and prints if the list contains a 5.
        (Click to see full instructions)
      U3 - Loops And Arrays - Make it a Function_instruction: |
        Move the code that
        searches the list for a 5 into a function called "search". (Click to see
        full instructions)
      U3 - Loops And Arrays - Multiple Returns_instruction: |
        Test out the return
        values of the findMax function.  (Click to see full instructions)
      U3 - Loops And Arrays - Print Array_instruction: |
        Use a for loop to print out
        all the values in an array. (Click to see full instructions)
      U3 - Loops And Arrays - Printing Single True_instruction: |
        Process the array
        and display a single "true" if the array contains a 5 or a single "false"
        if it does not.  (Click to see full instructions)
      U3 - Loops And Arrays - Return Index_instruction: |
        Make the search function
        return the index of the search value in the array. (Click to see full instructions)
      U3 - Loops And Arrays - Return Value_instruction: |
        Use constrain in this simple
        app to keep the turtle from driving off the screen.  (Click to see full instructions)
      U3 - Loops And Arrays - Search and Remove_instruction: |
        Search for 5 in the
        array and remove it from the array. (Click to see full instructions)
      U3 - Loops And Arrays - Search with Boolean Var_instruction: |
        Make a boolean
        variable to use as a flag to keep track of whether there is a 5 in the array.
        (Click to see full instructions)
      U3 - Loops And Arrays - useFindMin_instruction: |
        Call findMin within the console.log
        statement to calculate the minimum of two values.  (Click to see full instructions)
      U3 - Movie Bot - Multiple If Sequences_instruction: |
        Add another set of if,
        else if, and else statements inside the question if statement to check for
        keywords for movie ratings (G, PG, PG-13, and R). (Click to see full instructions)
      U3 - Movie Bot - Nested Motivation_instruction: |
        Add a separate set of if statements
        to check for a "?" in the input. (Click to see full instructions)
      U3 - Movie Bot - toLowerCase_instruction: |
        Use the toLowerCase command to change
        all user input into lowercase letters after they enter it. (Click to see full
        instructions)
      U3 - Movie Bot - When Multiple If Statements_instruction: |
        Add an if and else-if
        statement that checks for please and thank you. (Click to see full instructions)
      U3 - Practice Create Performance Task_instruction: |
        Design and implement your
        practice Create Performance Task. (Click to see full instructions)
      U3 - Read Record - 1.2_instruction: |
        Console.log the records returned by a
        call to readRecords. (Click to see full instructions)\r
      U3 - Read Record - 1.5_instruction: |
        Console.log the records returned by a
        call to readRecords. (Click to see full instructions)\r
      U3 - Read Record - 1.6_instruction: |
        Console.log the records returned by a
        call to readRecords. (Click to see full instructions)\r
      U3 - Read Record - 1_instruction: |
        Console.log the records returned by a call
        to readRecords. (Click to see full instructions)\r
      U3 - Read Record - 2_instruction: |
        Change the table name so that the records
        are read from the new table.(Click to see full instructions)\r
      U3 - Read Record - 3_instruction: |
        Change the name of the table in a readRecords
        command to read from a table that does not exist. (Click to see full instructions)\r
      U3 - Read Record - 4.1_instruction: |
        Print out each record return from the
        readRecords call individually. (Click to see full instructions)\r
      U3 - Read Record - 4_instruction: |
        Print out each record return from the readRecords
        call individually. (Click to see full instructions)\r
      U3 - Read Record - 5 and half_instruction: |
        Print out the name of each movie
        in the records return from the readRecords call. (Click to see full instructions)\r
      U3 - Read Record - 5_instruction: |
        Print out the name of each movie in the
        records return from the readRecords call. (Click to see full instructions)\r
      U3 - Return Values - constrainTurtle_instruction: |
        Use constrain in this simple
        app to keep the turtle from driving off the screen.  (Click to see full instructions)
      U3 - Return Values - debuggingConstrain_instruction: |
        Correct the error in
        constrain so that it returns the appropriate value.  (Click to see full instructions)
      U3 - Return Values - debuggingMaxVal_instruction: |
        Correct the error in maxVal
        so that it correctly reports the maximum value.  (Click to see full instructions)
      U3 - Return Values - debuggingReturns_instruction: |
        Correct the error in maxVal
        so that it correctly reports the maximum value.  (Click to see full instructions)
      U3 - Return Values - increase1_instruction: |
        Call the increase function within
        moveForward, write, and console.log.  (Click to see full instructions)
      U3 - Return Values - increase2_instruction: |
        Change the increase function to
        return 3 times the input value. (Click to see full instructions)
      U3 - Return Values - min1_instruction: |
        Test out the return values of the findMax
        function.  (Click to see full instructions)
      U3 - Return Values - useFindMin_instruction: |
        Call findMin within the console.log
        statement to calculate the minimum of two values.  (Click to see full instructions)
      U3 - Return Values - useMinVal_instruction: |
        Call minVal within the console.log
        statement to calculate the minimum of two values.  (Click to see full instructions)
      U3 - Return Values - wrapTurtle_instruction: |
        Write wrap in this simple app
        to let the turtle "wrap" to the other side of the screen when it goes off.  (Click
        to see full instructions)
      U3 - Return Values - writeMaxVal_instruction: |
        Write the function maxVal and
        then use it within the console.log statement to calculate the maximum of two
        values.  (Click to see full instructions)
      U3 - Search Terms - 1_instruction: |
        Create an array of all the movies made
        in 2008 and print it out. (Click to see full instructions)\r
      U3 - Search Terms - 2_instruction: |
        Print out all the movies with year 2008
        using the readRecords search terms. (Click to see full instructions)\r
      U3 - Search Terms - 3_instruction: |
        Print whether or not there are movies matching
        the search criteria (Click to see full instructions)\r
      U3 - Search Terms - 4_instruction: |
        Print whether or not there are movies matching
        the search criteria (Click to see full instructions)\r
      U3 - Search Terms - 5_instruction: |
        Print out the cities that are in California
        or have a population of 2,000,000. (Click to see full instructions)\r
      U3 - Search Terms - 6_instruction: |
        Print out the cities that are in California
        or have a population of 2,000,000. (Click to see full instructions)\r
      U3 - Simulation - 1_instruction: |
        Use a while loop to "flip a coin 10 times"
        and write the values to the screen. (Click to see full instructions)
      U3 - Simulation - 2.1_instruction: |
        Change your looping condition so the simulation
        runs until there are 5 heads flipped. (Click to see full instructions)
      U3 - Simulation - 2.5_instruction: |
        Run your simulation to get the full 10,000
        heads! How long did it take? (Click to see full instructions)
      U3 - Simulation - 2_instruction: |
        Keep track of how many heads (1's) your
        program generates and print the results to the screen. (Click to see full
        instructions)
      U3 - Simulation - 3_instruction: |
        Add functionality that counts how many heads
        in a row are flipped. (Click to see full instructions)\r
      U3 - Simulation - 4_instruction: |
        Update your while loop's condition so the
        the coin flips until there are three heads in a row. (Click to see full instructions)
      U3 - Simulation - 5_instruction: |
        Change your while loop to run until you get
        a streak of 12 heads. How many flips did it take? (Click to see full instructions)
      U3 - Simulation - 6_instruction: |
        Keep adding to your simulation. What do you
        want to explore next? (Click to see full instructions)
      U3 - Simulation - App_instruction: |
        Change your code to run the full simulation
        with 10,000 coins. What was your longest streak of heads? (Click to see full
        instructions)
      U3 - Simulation - Template_instruction: |
        Use a while loop to "flip 10 coins"
        and write them to the screen. (Click to see full instructions)
      U3 - User Input - Save getText To Variable_instruction: |
        Save the age and name
        of the user in variables (Click to see full instructions)
      U3 - User Input - Saving After Input_instruction: |
        Save the age of the user
        in a variable using getText() (Click to see full instructions)
      U3 - User Input and String -  Concat_instruction: |
        Output a message about age
        in a Text Area (Click to see full instructions)
      U3 - Variables - Clicker Game_instruction: |
        Create your improved Chaser-Game
        here. (Click to see full instructions)
      U3 - Variables - Debug Scope_instruction: |
        Why isn't the value of foo changing
        correctly? Make a guess. (Click to see full instructions)
      U3 - Variables - Debugging with Turtle_instruction: |
        Use your new debugging
        techniques to get the code to run correctly (Click to see full instructions)
      U3 - Variables - Decrement_instruction: |
        Decrement the value of the variable.
        (Click to see full instructions)
      U3 - Variables - Identify Variables_instruction: |
        Identify the values printing
        in the terminal with console.log statements. (Click to see full instructions)
      U3 - Variables - Increment_instruction: |
        Use the console.log debugging technique
        to see what is happening in this example. Add another variable and increment
        its value. (Click to see full instructions)
      U3 - Variables - Incrementing Variables_instruction: |
        Create a repeat loop
        for the repeated code and use increment to recreate the original program with
        less lines of code! (Click to see full instructions)
      U3 - Variables - Read Using Turtle_instruction: |
        Create a second set of variables
        for x and y position. Move turtle to that new location. (Click to see full
        instructions)
      U3 - Variables - Reassigning Variables with Console.log_instruction: |
        Add another
        reassignment statement at the end of the code to change the value of the variable
        at second time. (Click to see full instructions)
      U3 - Variables - Set to Expression with Other Variables and Turtle_instruction: |
        (click
        to see full instructions)
      U3 - Variables - Set to Expression with Other Variables_instruction: |
        Write
        an expression that calculates the player's total score and stores it in the
        totalScore variable. The calculation is: the player's points times lives
        divided by the total time. (click to see full instructions)
      U3 - Variables - Set to Expression with Turtle_instruction: |
        (click to see
        full)
      U3 - Variables - Set to Expression_instruction: |
        Test out the new expressions.
        (Click to see full instructions)
      U3 Digital Assistant Design_instruction: |
        Pick a topic for your Digital Assistant
        and create the basic layout with a text input and text area. (Click to show
        full instructions)
      U3 Digital Assistant Set Text_instruction: |
        Have your digital assistant repeat
        back what the user types and include a canned response. (Click to see full
        instructions)
      U3 Digital Assistant Target - Mehal_instruction: |
        Try out a demo of the Digital
        Assistant!
      U3 Digital Assistant Target_instruction: Try out a demo of the Digital Assistant!
      U3 Digital Assistant Template_instruction: This is a project template!
      U3 Digital_instruction: |
        Choose a specialization topic for your digital assistant.
        Create a basic digital assistant that takes the user's input and displays
        back a default response.
      U3 full clicker demo_instruction: Clicker game - Try it out!
      U3 mehal's clone_instruction: Try out a demo of the Digital Assistant!
      U3- Variables - Assign Random For Turtle Draw_instruction: |
        Try writing the
        same code in text mode.
      U3- Variables - Changing the Value_instruction: |
        Update the value of 'turnAmount'
        before each moveForward so the turtle turns a different amount each time.
        (Click to see full instructions)
      U3- Variables - Create And Assign_instruction: |
        On one line add a variable
        called "lives" and assign it the value 3. Print it to the console. (Click
        to see full instructions)
      U3- Variables - Text Mode_instruction: |
        1. Switch to text mode and type instructions;
        2. drag blocks out into text mode; 3. experiment with code completion
      U3-Design Mode-ID and Event Handler_instruction: |
        Add an event handler for
        the button using the "Insert and show" link in the Design Mode Events tab.
        (Click to see full instructions).
      U3-Design Mode-ID_instruction: |
        Using the Design Mode Events change the button
        ID and update the code to match. (Click to see detail instructions).
      U3-Design Mode-Image_instruction: |
        Recreate the "Chaser Game" from the last
        lesson using Design Mode. (Click to see full instructions.)
      U313 drag Two Buttons_instruction: |
        Run a program with two buttons that have
        the same id to see the warning message in the console. Change the ids to make
        the program run without getting a warning message.
      U313 eventsDetails_instruction: |
        Run a program with two buttons that have the
        same id to see the warning message in the console. Change the ids to make
        the program run without getting a warning message.
      U313 Two Buttons with Ids_instruction: |
        Predict what will happen. Once you've
        made a prediction, run the code to see what happens. (Click to see full instructions)
      U3L03 - draw rect function_instruction: |-
        Write a function called drawRectangle().\r
        (Click
        to see full instructions)
      U3L03 - draw step_instruction: |
        Write the drawStep function. (Click to see
        full instructions)
      U3L03 choose your own drawing_instruction: |
        Now choose your own!  Pick one
        of the three drawings shown here and attempt to create it on your own, making
        smart decisions about how to break the problem down into re-usable functions.  You
        will review your work with a peer using "procedures peer review rubric."  Check
        it for the requirements.  GIF: U3L3-ProceduresChooseOne.png
      U3L03 Creating Procedures 1_instruction: |
        Write the turnAround() function and
        use it to make the turtle move as depicted. see: U3L03-turnAndDown.gif
      U3L03 Define and use turnAround_instruction: |
        Define a function called turnAround.
        Call the function and then move the turtle forward. (Click to see full instructions)
      U3L03 define turnRight and draw a rectangle_instruction: |
        Define a function
        called right() that turns the turtle to the right. Then use this function
        to draw a rectangle, as shown below. (Click to see full instructions)
      U3L03 Draw a T using turnAround_instruction: |
        Draw a plus sign using the provided
        version of turnAround().  (Click to see full instructions)
      U3L03 draw diamond_instruction: |
        Create a function called drawDiamond() that
        makes use of your previous work to draw the complete diamond. (Click to see
        full instructions)
      U3L03 Three Steps_instruction: |
        Define a function called drawSide() which draws
        three steps and moves the turtle to prepare for the next side (Click to see
        full instructions)
      U3L04 - 3 by 3 with functions_instruction: |
        Make the 3x3 square as efficiently
        as you can. (Click to see full instructions)
      U3L04 - snowflake_instruction: |
        Create the design by breaking it down into
        layers of functions. (Click to see full instructions)
      U3L04 choose your own drawing_instruction: |
        Now choose your own!  Pick one
        of the three drawings shown here and attempt to create it on your own, making
        smart decisions about how to break the problem down into re-usable functions.  You
        will review your work with a peer using "procedures peer review rubric."  Check
        it for the requirements.
      U3L04 diamond solution_instruction: |
        Study this solution to the drawDiamond
        problem.  Notice that the whole program starts by calling drawDiamond() at
        the top.  The program then follows a chain of function calls.  You can trace
        what's happening in the code to see the functions reused.  It's also easy
        to read because the function names describe the expected behavior.
      U3L05_3x3GridEfficiencyChallenge_instruction: |
        Let's revisit the 3x3 grid
        problem you did a few lessons ago.  This time the challenge is to program
        the solution "as efficiently as possible."  Now that you know how to write
        functions, it should be easier to break the problem down, and your code should
        be easier to read and debug.  See the rubric for more details about requirements
        and expectations.
      U3L05_draw3x3GridEfficiently_instruction: |
        Draw a 3x3 grid above and to the
        right of the turtle. Try to do so with the fewest number of commands possible.
        NOTE: This is a very challenging problem.  You may need to play with it for
        a while and tweak it.  You might also consider using pencil and paper to sketch
        your ideas.
      U3L06 - moveForwardwithParams_instruction: |
        Use a single command to move the
        turtle to the edge of the screen. (Click to see full instructions)
      U3L06 Challenge 1 triangle_instruction: |
        Use the parameterized versions of
        the turtle commands to create a triangle with sides 100 pixels long. (Click
        to see full instructions)
      U3L06 Challenge 2 purple square_instruction: |
        Read the documentation for penColor()
        and penWidth() before using them to draw the blue square.
      U3L06 Challenge 3 fill pink_instruction: |
        Fill in the background of the screen
        with your favorite color. (Click to see full instructions)
      U3L06 Challenge 4 bullseye_instruction: |
        Create the bullseye using hexadecimal
        colors and dot(). (Click to see full instructions)
      U3L06 Challenge 5 overlapping circles_instruction: |
        This image is created just
        using dot() and penColor() but, how are we going to get those circles to be
        transparent?  If you haven't gotten the hint yet: check out the documentation!
      U3L06 Challenge 6 squiggles_instruction: "Read the documentation for the \"arcLeft\"\nand
        \"arcRight\" commands and then draw the squiggles as shown. \n"
      U3L06 Challenge 7 smiley face_instruction: |
        Use turnTo() and moveTo() to help
        draw a smiley face. (Click to see full instructions)
      U3L06 Challenge 8 make your own_instruction: |
        Create a drawing of your own.
        (Click to see full instructions)
      U3L07 - allSeaGrass_instruction: |
        Add 50 pieces of seagrass to the image by
        writing drawAllSeagrass with a loop. (Click to see full instructions)
      U3L07 - bubbles_instruction: |
        Add 200 bubbles to the image by writing drawAllBubbles
        with a loop. (Click to see full instructions)
      U3L07 - callingFunctionsInLoops_instruction: |
        Call the function within the
        loop to complete the figure. (Click to see full instructions)
      U3L07 - createTriangleParam_instruction: |
        Define a function that accepts a
        parameter to match the function calls and complete the image. (Click to see
        full instructions)
      U3L07 - fish_instruction: |
        Add 15 fish to the image by writing drawAllFish
        with a loop. (Click to see full instructions)
      U3L07 - Free Play Loops and Random_instruction: |
        Free Play! Use what you learned
        from loops and random to make your own little scene. Have fun.
      U3L07 - introSquare_instruction: |
        Use a loop to draw a square. (Click to see
        full instructions)
      U3L07 - loopsWithRandom_instruction: |
        Increase the number of iterations to
        fill the screen with white. (Click to see full instructions)
      U3L07 - randomDots1_instruction: |
        Increase the number of iterations to fully
        fill the screen with random dots. (Click to see full instructions)
      U3L07 - randomSquare_instruction: |
        Draw the figure using a loop. (Click to
        see full instructions)
      U3L07 - seaGrass_instruction: |
        Add a parameter to drawSeagrass that controls
        the number of waves in the grass. (Click to see full instructions)
      U3L07 - seaStar_instruction: |
        Add 5 sea stars to the image by writing drawAllSeaStars
        with a loop. (Click to see full instructions)
      U3L07 - Starry Night Starter Code_instruction: "You are going to use loops\nand
        random numbers to generate an image of starry night sky similar to one\nshown
        here.  We have given you some starter code to generate the ground and\nsky
        (just two giant dots), you will add code to this project to make the stars,\ngrass,
        and moon.  All of the effects are clever applications of turtle dots,\nlines,
        and colors.  To get started, follow the series of steps suggested in\nthe
        accompanying worksheet. \n"
      U3L07 - sunBeams_instruction: |
        Add 100 sunbeams to the image by writing drawAllSunbeams
        with a loop. (Click to see full instructions)
      U3L07 - topDownDesign_instruction: |
        Get comfortable with the structure of this
        program, then move on to the next exercise. (Click to see full instructions)
      U3L08 - createTwoParamTriangle_instruction: |
        Define a function called drawTriangle()
        that accepts two parameters to set the size and width of the triangle. (Click
        to see full instructions)
      U3L08 - digitalScene_instruction: |
        Create the functions you were assigned as
        part of your digital scene. (Click to see full instructions)
      U3L08 - drawSquaresWithParams_instruction: |
        Write drawSmallSquare() to draw
        a 25px square. (Click to see full instructions)
      U3L08 - drawSquareWithParam - for video_instruction: |
        Use drawSquare() to recreate
        the image of both squares, this time using parameters. (Click to see full
        instructions)
      U3L08 - drawSquareWithParam_instruction: |
        Use drawSquare() to recreate the
        image of both squares, this time using parameters. (Click to see full instructions)
      U3L08 - Enchantment Under the Sea_instruction: |
        You have been provided with
        starter code for an “Under the Sea” scene which includes three functions,
        one each for the starfish, sea grass, and fish. Create versions of these functions
        which accept parameters to allow you to add more variation to your scene.  The
        student worksheet provides more details and guidance.
      U3L08 - fish_instruction: |
        Add a parameter to drawFish that changes the size
        of the fish drawn. (Click to see full instructions)
      U3L08 - freePlay_instruction: |
        Keep adding to your image by making more calls
        to your new functions with parameters. (Click to see full instructions)
      U3L08 - individualCode_instruction: |
        Create the functions you were assigned
        as part of your digital scene. (Click to see full instructions)
      U3L08 - introUnderTheSea_instruction: |
        Add an extra fish, starfish, and piece
        of sea grass to the image. Look at, but don't change, the functions that
        create them. (Click to see full instructions)
      U3L08 - multiParamFish_instruction: |
        Add three parameters to your drawFish
        function to accept red, green and blue values to make your fish different
        colors. (Click to see full instructions)
      U3L08 - multipleLayersofParams_instruction: |
        Call drawPlusSign() to complete
        the image. (Click to see full instructions)
      U3L08 - paramsToStarfish_instruction: |
        Add a parameter to drawStarfish that
        changes the size of the starfish drawn. (Click to see full instructions)
      U3L08 - randomInput_instruction: |
        Use the randomNumber() blocks to test the
        functions you designed with random input. (Click to see full instructions)
      U3L08 - seaGrass_instruction: |
        Add a parameter to drawSeagrass that changes
        the size of the piece of seagrass drawn. (Click to see full instructions)
      U3L08 - squareTwoParams_instruction: |
        Call drawSquare() to complete the drawing
        of two squares. (Click to see full instructions)
      U3L08 - starFish_instruction: |
        Add an extra fish, starfish, and piece of sea
        grass to the image. Look at, but don't change, the functions that create
        them. (Click to see full instructions)
      U3L08 - triangleTwoParams_instruction: |
        Call drawSquare() to complete the drawing
        of two squares. (Click to see full instructions)
      U3L1 - Simulation - Template_instruction: |
        Use a while loop to "flip 10 coins"
        and write them to the screen. (Click to see full instructions)
      U3L12 Chaser Template_instruction: This is a project template!
      U3L13 - Button with ID_instruction: |
        Drag a button out onto the screen and
        set its text to "Go forth!".  Run the program to make sure you can see the
        button.
      U3L13 - Debug Id plus logic problem_instruction: |-
        The last problem was an example
        of syntax error.  App Lab did not understand which object it should be listening
        to for a "click" event so it showed an error message in the console to let
        you know.  Another kind of error is a logical error - the program is valid,
        but it's not doing what you want it to do.\r
        \r
        This program has 2 errors.
        A (tricky) syntax error and logical error.  Find them, fix them, and make
        the program work as expected.
      U3L13 - Debug Id Problem_instruction: |
        Improve the button by choosing a descriptive
        and meaningful ID. (Click to see full instructions)
      U3L13 - Debugging 1_instruction: |
        Debug the program by verifying your IDs are
        being referenced properly. (Click to see full instructions)
      U3L13 - Debugging 2_instruction: |
        Debug the program by properly ordering your
        button commands and event handlers. (Click to see full instructions)
      U3L13 - Debugging 3_instruction: |
        Debug the program by fixing the logical error
        within the program. (Click to see full instructions)
      U3L13 - Project_instruction: |
        Create your multi-screen app. (Click to see full
        instructions.)
      U3L13 - Turtle Driver Project_instruction: |
        Create a "turtle driver" that
        includes buttons to move the turtle forward and turn it left and right. (Click
        to see full instructions)
      U3L13 - Turtle move with button_instruction: |
        Add a button that moves the turtle
        when clicked.  (Click to see full instructions)
      U3L13 eventsDetails_instruction: |
        Add an event handler to the button to move
        the turtle forward. (Click to see full instructions)
      U3L14 - Assigning Random Value_instruction: |
        Write a program that simulates
        the rolling of two dice and reports their individual values as well as the
        sum. (click to see full instructions)
      U3L14 - concatenate simple_instruction: |
        Modify the write statement on line
        3 to combine text and variables together to make the app display a single
        line of text that shows the player's lives and score. (click to see full
        instructions)
      U3L14 - Mini Calculator embed_instruction: |
        You will be prompted for two numbers,
        one right after the other.  See what happens.  Enter different numbers until
        you get the idea.
      U3L14 - moving memory challenge1_instruction: |
        Using only the variables provided,
        assignment (=) and arithmetic (+ - * /) re-assign the values to make the console.log
        statement display the correct value(s).  (Click to see full instructions)
      U3L14 - moving memory challenge2_instruction: |
        Using only the variables provided,
        assignment (=) and arithmetic (+ - * /) re-assign the values to make the console.log
        statement display the correct value(s).  (Click to see full instructions)
      U3L14 - moving memory challenge3_instruction: |
        Using only the variables provided,
        assignment (=) and arithmetic (+ - * /) re-assign the values to make the console.log
        statement display the correct value(s).  (Click to see full instructions)
      U3L14 - moving memory challenge4_instruction: |
        Using only the variables provided,
        assignment (=) and arithmetic (+ - * /) re-assign the values to make the console.log
        statement display the correct value(s).  (Click to see full instructions)
      U3L14 - moving memory challenge5_instruction: |
        Using only the variables provided,
        assignment (=) and arithmetic (+ - * /) re-assign the values to make the console.log
        statement display the correct value(s).  (Click to see full instructions)
      U3L14 - moving memory challenge6_instruction: |
        Using only the variables provided,
        assignment (=) and arithmetic (+ - * /) re-assign the values to make the console.log
        statement display the correct value(s).  (Click to see full instructions)
      U3L14 - Unfortunate Events Free Play_instruction: |
        Follow the "Unfortunate
        Events" Worksheet and enter your code here to experiment.  We've pre-loaded
        the code you need to start.
      U3L14 - User Input Division calculator_instruction: |
        Write a program that acts
        as a simple calculator. (click to see full instructions)
      U3L14 - Variable ReAssignment pt2_instruction: |
        Trace the code and predict
        what you think will be printed to the console. Then add a console.log statement
        at the end of the program to see the last value of someNum to see if your
        full prediction is correct. (click to see full Instructions)
      U3L15 - add code to make count down work_instruction: |
        Write code to make the
        down arrow work as expected. (Click to see full instructions)
      U3L15 - Add reset button to UpDown app_instruction: |
        Add code so that clicking
        the start over button will reset the game and send you back to the main screen.
        (Click to see full instructions)
      U3L15 - clicker update score_instruction: |
        Add code to update the score when
        the apple is clicked. (Click to see full instructions)
      U3L15 - count upDown bug forget to set text_instruction: |
        Find the bug in the
        program and fix it. (Click to see full instructions)
      U3L15 - count upDown bug logic error wrong update_instruction: |
        Find the bug
        in the program and fix it. (Click to see full instructions)
      U3L15 - count upDown bug var not created globally_instruction: |
        Find the bug
        in the program and fix it. (Click to see full instructions)
      U3L15 - Debug forget to update var on reset in UpDown app_instruction: |
        Run
        the app, and click the up or down button until you get to the gameOverScreen.
        Click 'Start Over' and try the app again. Find and fix the issue in the
        code. (Click to see full instructions)
      U3L15 - Debug if never triggers in UpDown app_instruction: |
        Run the app and
        use the up and down arrows to try to hit the gameOverScreen. You can't! Find
        and fix the issue in the code. (Click to see full instructions)
      U3L15 - Debugging Simple If-statements =v==_instruction: |
        Run the app, and
        click the up button. Then restart and run it again, and click the down button.
        Find and fix the issue in the code. (Click to see full instructions)
      U3L15 - DEMO up down count practice app_instruction: |
        Try out the demo app
        (Click to see full instructions)
      U3L15 - global var example count up_instruction: |
        Look at the code for this
        app and see how the code works to update the count variable when the up arrow
        is clicked. (Click to see full instructions).
      U3L15 - mini clicker update score_instruction: |
        Add code to update the score
        when the apple is clicked. (Click to see full instructions)
      U3L15 - practice with setText_instruction: |
        Use setText to complete the click
        event handler for the down arrow. (Click to see full instructions)
      U3L15 - Simple If-statements in UpDown App_instruction: |
        Add an if statement
        so that the app changes screens when the count reaches -5. (Click to see full
        instructions)
      U3L15 - variable scoping problem debugging_instruction: |
        See if you can figure
        out why the code is no longer working. (Click to see full instructions)
      U3L15 click add lives_instruction: |
        Add lives to the clicker game that decrement
        by 1 when the background image is clicked (Click to see full instructions)
      U3L15 full clicker app_instruction: |
        Complete your clicker game! (Click to
        see full instructions)
      U3L16 - challenge say hi app_instruction: |
        Write a greeting to the user when
        they hit 'enter' in the text input, using the 'change' event. (Click to
        see full instructions)
      U3L16 - chaserApp_instruction: |
        Create your own "Chaser Game." (Click to
        see full instructions)
      U3L16 - chooseImages_instruction: |
        Replace the image in your application with
        one of your own. (Click to see full instructions)
      U3L16 - doubleQuotes_instruction: |
        Save a string inside a variable and log
        it to the console. (Click to see full instructions)
      U3L16 - hideAndShow_instruction: |
        Introducing textInput, getText and write.  First
        run the starter code several times.  Try to change what's written to the
        screen when the button is clicked. Then use getText to write to the screen
        what the user entered in the text box. GIF: U3L16 - useGetText.gif
      U3L16 - hideAndShowPractice_instruction: |
        You are given some starting code
        that puts an image and two buttons on the screen.  The image is initially
        hidden. Add two new event handlers: one for each button, that when clicked
        hide and show the image.
      U3L16 - image and text labels_instruction: |
        Introducing the setPosition command!  Replace
        the moveTo in the button-click event handler to use setPosition to move the
        button itself to a random location when it's clicked.
      U3L16 - images and text labels_instruction: "Introducing objects other than\nbuttons!
        - textLabels and images.  First try replacing your button with a\ntextLabel.
        \ Will the text respond to events just like the button?  Try connecting\nan
        event handler to it.  We've started you out with code similar to the result\nof
        the last level, you can copy your code from that level into here if you\nprefer.
        \n"
      U3L16 - images_instruction: "Introducing Images.  Try replacing the textLabel\nwith
        an image..  Will the image respond to events just like the button?  Try\nconnecting
        an event handler to it.  We've started you out with code similar\nto the result
        of the last level, you can copy your code from that level into\nhere if you
        prefer. \n"
      U3L16 - intro getText_instruction: |
        Add an event handler to the Submit button
        so that when the button is clicked it will display the name entered in the
        text box to the console.  Use getText to get the value out of the text box.
        (Click to see full instructions)
      U3L16 - introSetPosition_instruction: |
        Move the buttons to the bottom of the
        screen. (Click to see full instructions)
      U3L16 - introStrings_instruction: |
        Save a string inside a variable and log
        it to the console. (Click to see full instructions)
      U3L16 - nameAgeTemplate_instruction: |
        Add an Text Input box for the name and
        age. (Click to see full instructions)
      U3L16 - newEventTypes_instruction: |
        Experiment with different event types and
        select the one that you think is best. (Click to see full instructions)
      U3L16 - outputWithTextArea_instruction: |
        Output a message to the 'textArea'
        (Click to see full instructions)
      U3L16 - projectTemplate_instruction: |
        Create your own "Chaser App". (Click
        to see full instructions)
      U3L16 - quick double click_instruction: |
        Mini-Project.  The Quick Double-Click
        game.  In this simple game an object (an image) moves around, or pops up randomly
        on the screen, as the user clicks it.  The goal of our game will be to try
        to double-click the object before it moves.  Part of the challenge (and fun)
        here is creating this app from scratch.  You can look back at your previous
        work for examples, but it's fun to create something from scratch, too.  Try
        it!  For more details see the Activity guide for this lesson.
      U3L16 - setPosition to move button_instruction: |
        Introducing the setPosition
        command! Replace the moveTo in the button-click event handler to use setPosition
        to move the button itself to a random location when it's clicked.
      U3L16 - setPositionMoveButton_instruction: Use setPositon to moveButton
      U3L16 - setupMoveToRandom_instruction: |
        Modify the code so that the turtle
        moves to a random screen location when the button is clicked. (Click to see
        full instructions)
      U3L16 - singleSetPosition_instruction: |
        Move the button to the middle of the
        screen. (Click to see full instructions)
      U3L16 - stringsVsNumbers_instruction: |
        Run the program to see how strings and
        numbers behave with different arithmetic operators. (Click to see full instructions)
      U3L16 - text labels_instruction: |
        Use the textLabel command to replace the
        button in your program with a text label. (Click to see full instructions)
      U3L16 - textInput getText write_instruction: |
        Add an Text Input box for the
        name and age. (Click to see full instructions)
      U3L16 - toUpper_instruction: |
        Make the name of the user appear in uppercase
        (Click to see full instructions)
      U3L16 - use images_instruction: |
        Use the image command to replace the text
        label in your program with an image. (Click to see full instructions)
      U3L16 Mad Lib Clear Input_instruction: "Clear the user's previous text when\nthe
        Play Again button is clicked (Click to see full instructions) \n"
      U3L16 Mad Lib Demo_instruction: Mad Libs Demo - Try it out!
      U3L16 Mad Lib getText_instruction: "Before setting the text area with your\nMad
        Libs outline, get the user's text and incorporate their responses. (Click\nto
        see full instructions) \n"
      U3L16 Mad Lib setText_instruction: "When the Next button is clicked, set the\ntext
        area to have the main outline of your How-to Mad Libs (without the user's\ninput).
        (Click to see full instructions) \n"
      U3L16 Mad Lib Student Setup_instruction: |
        Back to Mad Libs: To get started,
        set up the two screens for your Mad Libs app (Click to show full instructions)
      U3L16 Mad Lib toUpper_instruction: "Apply the toUpperCase and toLowerCase string\nfunctions
        to the user's text. (Click to see full instructions) \n"
      U3L17 - getAndSetKeyValue_instruction: |
        Create an image like app. (Click to
        see full instructions)
      U3L17 - getKeyValue_instruction: |
        Run the program several times to observe
        how the setKeyValue commands now always arrive in order. (Click to see full
        instructions)
      U3L17 - introCallbacks_instruction: |
        Run the program several times to observe
        how the setKeyValue commands now always arrive in order. (Click to see full
        instructions)
      U3L17 - introKeyValue_instruction: |
        Explore your key value pairs with the Data
        Viewer. (Click to see full instructions)
      U3L17 - readKeyValue_instruction: |
        Explore your key value pairs with the Data
        Viewer. (Click to see full instructions)
      U3L17 - setKeyValue_instruction: |
        Create and update your key value pairs using
        setKeyValue. (Click to see full instructions)
      U3L17 - twoSetKeyValue_instruction: |
        Run the program several times to observe
        how often setKeyValue commands arrive out of order. (Click to see full instructions)
      U3L18 comparison operators_instruction: |
        Use console.log to print out the different
        boolean expressions below to see what information they return. (Click to see
        full instructions)
      U3L18 comparison operators_for_video_instruction: |
        Use `console.log` to print
        out the different boolean expressions below to see what information they return.
        (Click to see full instructions)
      U3L19 - Clicker Game Freeplay Area_instruction: |
        Use this App Lab area to improve
        your clicker game.  You should start by copy/pasting the code from your old
        game here.  We're showing a more full set of blocks in the toolbox - some
        of the things you might not have used yet.  Feel free to explore then and
        experiment if you want to.  Everything else you need should be shown.  Have
        fun!
      U3L19 - Debugging with consoleLog_instruction: |
        Add console.log() statements
        to find out the value of a and b after the first reassignment statement a
        = b; (Click to see full instructions)
      U3L19 - DEMO up down count practice app_instruction: |
        Try out the demo app
        (Click to see full instructions)
      U3L19 - do concatenate string with var_instruction: |
        We've given you a piece
        of code from the previous screen.  Try changing the value assigned to foo
        to see the string change. \r
        Do this: \r
        1. Try changing the value assigned
        to foo to see the string change. \r
        2. By only modifying the lines of code
        that were given to you, try to get the output to say: “The value of foo is:
        9.  And isn’t that fine.” \r
      U3L19 - fix the var name syntax error v2_instruction: |
        Fix the error and get
        it to print the value of both variables (Click to see full instructions)
      U3L19 - fix the var name syntax error_instruction: |
        Fix the error and get it
        to print the value of both variables (Click to see full instructions)
      U3L19 - global var example count up_instruction: |
        Look at the code for this
        app and see how the code works to update the count variable when the up arrow
        is clicked. (Click to see full instructions).
      U3L19 - practice with setText_instruction: |
        Add another button that changes
        the text to the value of a new variable. (Click to see full instructions)
      U3L19 - Simple If-statements in UpDown App_instruction: |
        Add an if statement
        so that the app changes screens when the count reaches -5. (Click to see full
        instructions)
      U3L19 - Target Clicker App_instruction: |
        Investigate the new elements of the
        'chaser-game'
      U3L19 - test reassignment of two vars_instruction: |
        Predict the value of a
        and b. Add console.log statements to find out the actual value of a and b.
        (Click for full instructions)
      U3L19 - three basic ops of variables_instruction: |
        Add another variable called
        "lives" and set the value to 3. Print the value of the variable to the console.
        (Click to see full instructions)
      U3L19 - try out console log_instruction: |-
        Try out console.log.  Do this: replace
        the statement write("foo is: " + foo) with console.log("foo is: " + foo).  Run
        the program and you should see the output show up in the console area below
        the workspace.  Then try adding a few more console.log statements.  Display
        some text.  Make another variable and display that.  \r
        The app screen will
        be blank -- that's the point.  With console.log you can test output behind
        the scenes in a way the user cannot see.  \r
        \r
        \r
        GIF: U3L19-useconsolelog.gif
      U3L19 - up down count practice app_instruction: |
        Set up the down button to
        decrease the value of count by 1 each time it is clicked. (Click to see full
        instructions)
      U3L19 - updating variables pt1_instruction: |
        This app is only SLIGHTLY different
        from the previous one, but much more dynamic.  See if you can figure out how
        and why the count is going up.  Once you've figured it out then you should
        be able to DO THIS: add a button to the app that when clicked makes the count
        go down, and updates the label.  When you're done the app should work as
        shown in the demonstration.  GIF: U3L19 - upDownCountApp.gif
      U3L19 - variable reassignment challenge pt2_instruction: |
        Make a prediction
        about the ending values of a, b, and c. Then use console.log to check your
        understanding (Click to see full instructions)
      U3L19 - variable reassignment part 1_instruction: |
        Predict the value of a and
        b. Add console.log statements to find out the actual value of a and b. (Click
        for full instructions)
      U3L19 - variable scope problem 2_instruction: |
        What is happening with foo?
        Play with the level to try to figure it out. (Click to see full instructions)
      U3L19 - variable scoping problem debugging_instruction: |
        See if you can figure
        out why the code is no longer work. (Click to see full instructions)
      U3L19 - write var and string with same name v2_instruction: |
        Fix the code so
        that the values of both variables print to the console. (Click to see full
        instructions)
      U3L19 - write var and string with same name_instruction: |
        Fix the code so that
        the value of both variables prints to the console. (Click to see full instructions)
      U3L2 Using Simple Commands (no tooltips)_instruction: |
        Draw a 1x1 square above
        and to the left of the turtle's starting position. Click to see full instructions.
      U3L2 Using Simple Commands_instruction: |
        Draw a 1x1 square above and to the
        left of the turtle's starting position. Click to see full instructions.
      U3L23 Chatbot Conditionals 1_instruction: |
        Add if, else if, and else statements
        to detect the movie genres Comedy, Romance, Action, and Horror. (Click to
        see full instructions)
      U3L23 Chatbot Intro 1a_instruction: |
        Store the user's input inside a variable
        and log it to the console.
      U3L23 Chatbot Intro 2_instruction: |
        Use string concatenation to store the user's
        input and assistant's answer into the conversation variable using the format
        "User: <input><bot name>: <default response>" . Log the conversation to
        the console.
      U3L23 Chatbot Intro 2a_instruction: |
        Display the conversation onto the "text_area"
        element. Optional: clear the user's input after every "change" event.
      U3L23 Chatbot Intro 3_instruction: |
        Add newline characters "\
        " to separate
        the user's input and the computer's response.
      U3L23 Chatbot Intro 4_instruction: |
        Use this level to make your chatbot look
        and work better!
      U3L23 Chatbot Intro_instruction: |
        Choose a specialization topic for your digital
        assistant. Create a basic digital assistant that takes the user's input and
        displays back a default response.
      U3L23 Digital Assistant 1_instruction: |
        Set the text_area element to display
        the user's input from the text_input element.
      U3L23 Digital Assistant 2_instruction: |
        Add the response "I don't know."
        after each of the user's inputs.
      U3L23 Digital Assistant 3_instruction: |
        Add the response "I don't know."
        after each of the user's inputs.
      U3L23 Digital Assistant 4_instruction: |
        Display the user's input and the digital
        assistant's response on different lines.
      U3L23 Digital Assistant 5_instruction: |
        Start the user's command with the
        phrase "User:" and the digital assistant's response with the phrase "Bot:"
      U3L23 Digital Assistant 6_instruction: |
        When the user hits Run, display the
        text "I'm a generic digital assistant. Ask me anything!"
      U3L24 Basic String Parsing 1_instruction: |
        Use the function "userInput.indexOf(<food>)"
        to check if the strings "pizza" or "soup" are anywhere in the user's
        response.
      U3L24 Chatbot Basic Conditionals_instruction: |
        Check out the project description
        for instructions. (Click to see full instructions.)
      U3L24 Chatbot Conditionals 2_instruction: |
        Adjust the "if" block to make
        the bot respond "I don't know that color." if the user types anything besides
        "blue"
      U3L24 Chatbot Conditionals 3_instruction: |
        Adjust the "if/else" block to
        make the bot respond to the colors blue, red, and green, and to two additional
        colors.
      U3L24 Chatbot Keyword Record_instruction: |
        Use the next level to record your
        digital assistant's keywords/phrases.
      U3L24 Chatbot Nested Conditionals_instruction: |
        Add a chained conditional with
        at least 3 "else if" statements to your personal assistant.
      U3L24 introIncludes_instruction: |
        Practice using the includes command. (Click
        to see full instructions)
      U3L24 Nested Conditionals 1_instruction: |
        Change all of the boolean expressions
        to use includes instead of ==. (Click to see full instructions)
      U3L24 Nested Conditionals 2_instruction: "Nest your movie genre if statements\ninside
        the if statements to check for a ? in the input. \n"
      U3L24 Nested Conditionals Bugs 2_instruction: |
        Fix the problem with the code
        so that all the conditions can be reached. (Click to see full instructions)
      U3L24 Nested Conditionals Bugs 3_instruction: |
        Fix the bugs that still exist
        in this program. Prove that the program works correctly.
      U3L24 Nested Conditionals Bugs_instruction: |
        Expose the bugs in this problem
        by typing inputs into the user-input box. Track which inputs cause unexpected
        outputs.
      U3L25 - drag out key event_instruction: |
        Set up an event handler to respond
        to keypress events, and display event.key in the console. Hit keys on the
        keyboard to see what happens. (Click to see full instructions)
      U3L25 - play sound when up key_instruction: |
        Change the code so the sound will
        only play when the up arrow is pressed. (Click to see full instructions)
      U3L25 Chatbot Strings_instruction: |
        1. Adjust your digital assistant to evaluate
        inputs the same way whether the inputs are capitalized or lowercase. 2. If
        a user asks "What is <phrase>?", where <phrase> is an input your digital
        assistant does not recognize, make your digital assistant respond "I don't
        know what <phrase> is."
      U3L25 String Parsing 1_instruction: |
        Given the string "Wisdom begins with
        wonder." what is the index of the following characters W, t, w, ., d, and
        k? Confirm your expectation using the string.indexOf() function.
      U3L25 String Parsing 2_instruction: |
        Use str.length to find the length of the
        strings “Hello World”, “Computer science rocks!", and “I promise to do my
        homework every day.”
      U3L25 String Parsing 3_instruction: |
        Write a password length checker that writes
        “yes” to the console if a string has a length greater than 10, or “no” if
        it is less than or equal to 10.  Test your function using two strings, one
        that will satisfy each conditional option.
      U3L25 String Parsing 4_instruction: |
        You are given the string "Wisdom begins
        with wonder." Use the string.substring(begin, end) function to print "begin"
        and "nder" to the console.
      U3L25 String Parsing 5_instruction: |
        Fill in the function, findBeginNder()
        to get the strings "begin" and "nder" from a sentence no matter where
        in the sentence they exist.\r
        Print the strings and their index to the console.
      U3L25 String Parsing 6_instruction: |
        Write a function that takes a name (first
        last) and reorders it (last, first).
      U3L25 String Parsing 7_instruction: |
        You are given the string “The earth has
        music for those who listen.” Manipulate it using the functions str.toUpperCase()
        and str.toLowerCase().
      U3L26 AND operator_instruction: |
        Update the genre and rating if statements
        to give only one movie suggestion at a time. (Click to see full instructions)
      U3L26 Chatbot Compound Conditionals_instruction: |
        Update your digital assistant
        to include at least one each of AND, OR, and NOT
      U3L26 Chatbot Final_instruction: |
        Update your digital assistant to include
        at least one each of AND, OR, and NOT
      U3L26 Compound Logic_instruction: |
        Write a conditional statement that detects
        if a command contains all the phrases "2000" "animated" and "G-rated."
        If all these phrases are detected, make Movie Bot respond "The top grossing
        animated and G-rated film in the 2000 decade was Finding Nemo."
      U3L26 NOT operator_instruction: "Write a conditional statement that detects\nif
        a command does not contain the phrase \"bad.\" If \"bad\" is not detected,\nmake
        Movie Bot respond normally. Otherwise, make Movie Bot respond \"Sorry,\nI
        don't know about bad movies.\" \n"
      U3L26 OR operator_instruction: |
        Update the if statement to use an OR to check
        for a "?" as well as who, what, where, when, why, how in the user input.
        (Click to see full instructions)
      U3L27 Chatbot Final_instruction: |
        Make your digital assistant awesome and when
        you are finished, ask one of your classmates to test it for you using the
        activity guide. As you add features to your digital assistant, track them
        on the next level.
      U3L2_Turtle3by3Grid_instruction: |
        Draw a 3x3 grid to the front and right of
        the turtle as efficiently as possible. The turtle should end at its original
        location, facing its original direction. (Click to see full instructions)
      U3L2_TurtleSquare_right_instruction: |
        Draw a square to the front and to the
        right of the starting location. (Click to show full instructions)
      U4 - add createRecord to contacts App_instruction: |
        Add code to your contacts
        app so that newly-added contacts are saved in a table. (Click to see full
        instructions)
      U4 - Add Row By Hand_instruction: |
        Add a new record to your table in the Data
        Viewer. (Click to see full instructions)
      U4 - Charts - drawChartFromRecords 1_instruction: |
        Use the drawChartFromRecords
        block to create a scatter plot from the table in the database. (Click to see
        full instructions)
      U4 - Charts - drawChartFromRecords Options 1_instruction: |
        Add a title to your
        chart and change the colors of your lines using the options parameter of drawChartFromRecords.
        (Click to see full instructions)
      U4 - Charts - drawChartFromRecords Options 2_instruction: |
        Look through the
        drawChartFromRecords API and choose some more options to customize. (Click
        to see full instructions)
      U4 - Charts - drawChartsFromRecords 1_instruction: |
        Add screen element, pull
        out drawCharts block, run the program!
      U4 - Charts - Export Data_instruction: |
        Export the data from the “ages” table
        as a CSV file, then remix this app and import the CSV file. (Click to see
        full instructions)
      U4 - Charts - Import Data 1_instruction: |
        Download the CSV file we’ve provided,
        and then use the data viewer to import the data from the file into the “mytable”
        table. (Click to see full instructions)
      U4 - Charts - Import Data 2_instruction: |
        Call readRecords on “mytable” and
        print each record to the console. (Click to see full instructions)
      U4 - Charts - Line Chart 1_instruction: |
        Create a line chart showing the change
        in popularity of “#tbt” over time. (Click to see full instructions)
      U4 - Charts - Line Chart 2_instruction: |
        Add a second line to your chart to
        show the change in popularity of both “#tbt” and “#nofilter” at the same time.
        (Click to see full instructions)
      U4 - Charts - Line Chart Template_instruction: This is a template.
      U4 - Charts - Remixing Apps with Data_instruction: |
        Run this app and see what
        it prints to the console. Then remix the app and run the remixed version to
        see what happened to the data. (Click to see full instructions)
      U4 - Charts - Scatter Chart_instruction: |
        Create a scatter plot of the “rottenTomatoes”
        table, using the new table and column names. (Click to see full instructions)
      U4 - CreateRecord - 1_instruction: |
        Add a createRecord command and run the
        program. (Click to see full instructions)
      U4 - CreateRecord - 2.5_instruction: |
        Change the table name in createRecord
        then check the Data Viewer to see the new table. (Click to see  full instructions)
      U4 - CreateRecord - 2_instruction: |
        Change the name from "Alice" to something
        else in the createRecord command.  Run the program and use the Data Viewer
        to see the changes to your table. (Click to see full instructions)
      U4 - CreateRecord - 3_instruction: |
        Use createRecord to add the song object
        as a record to a table. (Click to see full instructions)
      U4 - CreateRecord - 4_instruction: |
        Run the program. Verify the song object
        was added to the database. Note the callback function now displays the copy
        of the record sent back back by the database. (Click to see full instructions)
      U4 - CreateRecord - 5_instruction: |
        Add a property to the JavaScript object,
        then run the program.  View the data table and see how changing the object
        affects the data table. (Click to see full instructions)
      U4 - debug column names are case sensitive_instruction: |
        Change song.title
        to song.Title (capital T).  And run the program.  Check the data table  (Click
        to see full instructions)
      U4 - deleteRecords 0_instruction: |
        Use the deleteRecord command with default
        values. Verify the record was deleted. (Click for full instructions).
      U4 - deleteRecords 1_instruction: |
        Find the id of "Little Bunny Foo Foo"
        in the data table "mySongs".  Use the deleteRecord command to delete it.  See
        what happens when you try to delete an ID a second time. (Click for full Instructions).
      U4 - deleteRecords 2 delete object_instruction: |
        Use the song object to delete
        multiple objects in the database by changing only the "id" property. (Click
        for full Instructions).
      U4 - deleteRecords 2_instruction: |
        Using the data viewer, find the id of a
        a record you want to delete. Use the deleteRecord command to delete it. (Click
        for full instructions).
      U4 - Edit Data Table by Hand_instruction: |
        View the data table and click edit
        next to each row.  Add the artists names for each song by hand. (Click to
        see full instructions)
      U4 - Exploring Data Tools - Template_instruction: |
        Use createRecord to add
        the song object as a record to a table. (Click to see full instructions)
      U4 - fix contacts by hand in data table_instruction: |
        Use the data viewer to
        add rows to the data table.  Add the original hard-coded contacts from your
        app to the database. (Click to see full instructions)
      U4 - last stage test adding contcts_instruction: |
        Confirm that new contacts
        you add are saved to the database.  Verify that after restarting your app,
        the contacts you added no longer show in the app, but still exist in the database.
        (Click to see full instructions)
      U4 - Objects - accessingPropertiesInArray_instruction: |
        Access the properties
        of the objects stored in an array. (Click to see full instructions)
      U4 - Objects - arraysOfObjects_instruction: |
        Create an array called "students"
        and add all 5 student objects to the array. (Click to see full instructions)
      U4 - Objects - createContactObject_instruction: |
        Construct a new object from
        the user inputs, and append it to your array. (Click to see full instructions)
      U4 - Objects - createContactsData_instruction: |
        Add values to the three contact
        objects provided in the starter code. (Click to see full instructions)
      U4 - Objects - createDotNotation_instruction: |
        Create a student Object yourself.
        Add properties to your object one at a time using dot notation. (Click to
        see full instructions)
      U4 - Objects - createObject_instruction: |
        Create an object with at least 3
        properties and display it in the Debug Console. (Click to see full instructions)
      U4 - Objects - dotNotation_instruction: |
        Use dot notation to display individual
        properties of the object. (Click to see full instructions)
      U4 - Objects - eventHandlersToSwitchScreen_instruction: |
        Attach event handlers
        to the "Add Contact" and "Go Back" buttons that allow the user to switch
        screens. (Click to see full instructions)
      U4 - Objects - eventParameter_instruction: |
        Trigger both the keyboard and mouse
        event and examine the event objects displayed in the console. Why might an
        object be the best way to store this information? (Click to see full instructions)
      U4 - Objects - exemplarContactsApp_instruction: |
        Use the Contacts app and then
        add a contact of your own. (Click to see full instructions)
      U4 - Objects - loopingArray_instruction: |
        Loop over your array of students
        and print the name of every students. (Click to see full instructions)
      U4 - Objects - loopingArray2_instruction: |
        Loop over your array of students
        and print the name and grade of every student. (Click to see full instructions)
      U4 - Objects - loopingCompoundConditions_instruction: |
        Loop over the array
        of students and display the information of students who are present and in
        the 11th grade. (Click to see full instructions)
      U4 - Objects - loopingConditions_instruction: |
        Loop over your array of student
        objects and display the names of every student who is present in class. (Click
        to see full instructions)
      U4 - Objects - pullValues_instruction: |
        Create an event handler for the "Save
        Contact" button that displays the contents of the 4 text input fields in
        the console. (Click to see full instructions)
      U4 - Objects - readStarterCode_instruction: |
        Familiarize yourself with the
        starter code and UI elements provided. (Click to see full instructions)
      U4 - Objects - resetIndexAndShow_instruction: |
        Add code to your event handler
        for the "Save Contact" button so that when a new contact is added, the inputs
        are cleared, the screen is switched, and the correct contact is shown. (Click
        to see full instructions)
      U4 - Objects - showContact1_instruction: |
        Add code to the showCurrentContact
        function to show the name of the contact stored at the currentIndex of your
        array. (Click to see full instructions)
      U4 - Objects - showContact2_instruction: |
        Add the phone number and birthday
        text to your text area. (Click to see full instructions)
      U4 - Objects - showContact3_instruction: |
        Display the image information for
        each contact. (Click to see full instructions)
      U4 - Objects - showSampleImage_instruction: |
        Attach an event handler to the
        image URL text input so that the user can confirm their image will work as
        expected. (Click to see full instructions)
      U4 - Objects - writeWrap_instruction: |
        Use the wrap function to prevent currentIndex
        from leaving the bounds of your array. (Click to see full instructions)
      U4 - Read Record - 1.2_instruction: |
        Place a console.log command below the
        readRecords command. (Click to see full instructions)\r
      U4 - Read Record - 1.3_instruction: |
        Add a console.log command inside the callback
        function. (Click to see full instructions)\r
      U4 - Read Record - 1_instruction: |
        Use console.log to display the records returned
        by a call to readRecords. (Click to see full instructions)\r
      U4 - Read Record - 2_instruction: |
        Change the table name so that the records
        are read from the new table. (Click to see full instructions)\r
      U4 - Read Record - 3_instruction: |
        Change the name of the table in a readRecords
        command to read from a table that does not exist. (Click to see full instructions)\r
      U4 - Read Record - 4.1_instruction: |
        Use indexes and dot notation to reference
        values in the response from the database. (Click to see full instructions)\r
      U4 - Read Record - 4_instruction: |
        Print out each record return from the readRecords
        call individually. (Click to see full instructions)\r
      U4 - Read Record - 5_instruction: |
        Using a for loop, display the title of each
        movie in your database. (Click to see full instructions)\r
      U4 - Read Record - part 1 - template_instruction: |
        Use console.log to display
        the records returned by a call to readRecords. (Click to see full instructions)\r
      U4 - ReadRecords - Contacts App 1_instruction: |
        Use readRecords to copy the
        data in your database into your "contacts" global variable and call showCurrentContact.
        (Click to see full instructions)
      U4 - ReadRecords - Contacts App 2_instruction: |
        Create a function called refreshLocalData.
        (Click to see full instructions)
      U4 - ReadRecords - Contacts App 3_instruction: |
        Add a call to "refreshLocalData"
        to the callback function of the createRecord you use to add a new contact
        to your database. (Click to see full instructions)
      U4 - ReadRecords - Contacts App 4_instruction: |
        Create a "Delete" button.
        (Click to see full instructions)
      U4 - ReadRecords - Contacts App 5 make delete work_instruction: |
        Create an
        event handler for the "Delete" button you created. (Click to see full instructions)
      U4L02 - Objects - createObject_instruction: "Create an object with at least\n5
        values including at least one string and one number. (Click to see full\ninstructions)
        \n"
      U4L02 - Objects - eventParameter_instruction: |
        Trigger both the keyboard and
        mouse event and examine the event objects displayed in the console. Why might
        an object be the best way to store this information? (Click to see full instructions)
      U4L02 - Objects - Template1_instruction: Plantilla
      U4L06 Data Storage 1_instruction: |
        Fill in your name instead of "Enter Your
        Name", run the app and click the button. Run it multiple times with different
        names! Watch the console and use the ‘View Data” button to see how the table
        is updated. As you play around make sure you can explain the purpose of each
        of the circled parts of the diagram.\r
        \r
      U4L06 Data Storage 2_instruction: "The app is a continuation of the previous\none
        we started. Add a text label to collect the users name and use that as\nthe
        data input for the record.\\r\n\\r\nRun the app and click the button multiple\ntimes
        and see what happens. Is there a problem you notice? "
      U4L06 Data Storage 3_instruction: |
        We want to improve the user experience.
        Once they have submitted their data for storage, it would be nice to clear
        the textbox.  Update your app to clear the textbox after the data is stored.
      U4L06 Data Storage 4_instruction: |
        Add a label and drop down box, to your app
        and save the data to your JSON object and add it to your table. Make sure
        to reset the dropdown after the data is stored.
      U4L06 Data Storage 5_instruction: "Add a couple radio buttons or checkboxes\nto
        our app. Then find a way to collect the data from those. \n"
      U4L06 Data Storage 6_instruction: " Use one of the getTime() and getUserId()\nblocks
        to collect additional data. \n"
      U4L06 Data Storage 7_instruction: |
        Add a second screen to the sample app we
        have been building to capture an image from a user. Return to screen 1 after
        the JSON object has been stored in the table.
      U4L15 Read Data 1_instruction: |
        Run the level and see what happens. Then edit
        the code to make it print a different column of information.
      U4L15 Read Data 2_instruction: |-
        Student should create a sentence which puts
        together all the pieces from a record.\r
        \r
        <<Name>> is <<Age>> years old
        and like <<Food>>
      U4L15 Read Data 3_instruction: |
        Print the sentence using the first JSON object
        in the array\r
        \r
      U4L15 Read Data 4_instruction: |-
        \r
        Use a random record from the list of records
        to display your sentence.
      U6 - Final Project - Project Level_instruction: |
        Build your final project here.
        (Click to see full instructions)
      U6 - updateRecord - Callback Success Parameter_instruction: |
        Add an if-else
        block inside the callback function for updateRecord. (Click to see full instructions)
      U6 - updateRecord - Contacts - Edit event handler_instruction: |
        Write event
        handlers for the Edit Contacts UI elements. (Click to see full instructions)
      U6 - updateRecord - Contacts - Edit UI_instruction: |
        Set up the UI elements
        needed to edit contacts. (Click to see full instructions)
      U6 - updateRecord - Contacts - Save edited contact_instruction: |
        Use updateRecord
        to store the user's edits in the database. (Click to see full instructions)
      U6 - updateRecord - Default Block_instruction: |
        Use updateRecord to change
        the record for "Eye of the Tiger." (Click to see full instructions)
      U6 - updateRecord - Update Nonexistent Record_instruction: |
        Force updateRecord
        to fail by changing the ID of songToUpdate. (Click to see full instructions)
      Underground Avoiding Lava_instruction: Hay lava debajo de algunos de estos bloques,
        de modo que deberás cubrirte antes de avanzar. Es un buen momento para usar
        un comando "Si" . Agrega un comando "ir hacia adelante" en el lugar correcto
        para minar estos bloques.
      Underground If Statements_instruction: Ahora la cosa se pone más difícil. Mina
        3 piedras rojizas, pero no te caigas en la lava. Usa un comando "Si\ para
        ubicar guijarros sobre cualquier lava que te encuentres.
      Underground Iron_instruction: Caminar sobre lava hirviente es mala idea. Ubica
        guijarros para crear un puente y luego mina al menos dos de los bloques de
        hierro.
      Underground Mine in a Circle_instruction: "¡Obtén 5 diamantes y 7 piedras rojizas!
        Intenta usar un comando de repetición para caminar en un cuadrado."
      Underground Mining Coal_instruction: Los mejores recursos están bajo tierra,
        pero es un lugar muy oscuro. Coloca al menos 2 antorchas y mina al menos 2
        carbones.
      Underground Test Level_instruction: "¡Recolecta todos los minerales!"
      Vigenere_instruction: Test
      XML Scratchpad_instruction: Using this test level to grab xml for unit tests
