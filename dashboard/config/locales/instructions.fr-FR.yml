"fr":
  data:
    instructions:
      2-3 _instruction: Une fleur violette peut posséder 1 ou 0 nectar. Ne récupérez
        un nectar que si une fleur n'en possède pas déjà.
      2-3 Artist 1 new_instruction: Salut ! Je suis un artiste. Tu peux écrire du
        code pour me faire dessiner presque n'importe quoi. Utilise quelques blocs
        pour me faire repasser les lignes grises de l'image. (Chaque ligne a une longueur
        d'environ 100 pixels.)
      2-3 Artist 11_instruction: 'Ajoutez une ligne au panneau stop en dessinant un
        octagone de 8 côtés, chacun faisant 100 pixels de long. Quel angle de rotation
        choisiriez-vous ? (Indice : Que font 360/8 ?)'
      2-3 Artist 12_instruction: Utilise le bloc « répéter plusieurs fois » pour créer
        un « cercle » qui complètera le globe. Si chaque mouvement effectue une rotation
        d'1 degré sur la droite, combien de répétitions dois-tu effectuer ? 180 ?
        360 ? 500 ?
      2-3 Artist 2 new_instruction: Le mur de cette maison est à moitié fini. La valeur
        de chaque côté est 100, mais le mur incomplet est à 50. Finissez la construction.
      2-3 Artist 2_instruction: 'Le mur de cette maison est à moitié terminé. Chaque
        côté a une longueur de 100, mais le mur à moitié fait a une hauteur de 50.
        Finis le mur. '
      2-3 Artist 3.4_instruction: Le bloc de saut déplace l'artiste sans rien dessiner.
        Dessine la ligne pointillée en utilisant les blocs de saut et de dessin.
      2-3 Artist 3_instruction: Ce chapeau a une taille de 100 pixels. Dessine un
        chapeau qui fait 70 pixels de moins.
      2-3 Artist 3new_instruction: Le chapeau rouge est de 100 pixels de haut. Terminez
        le dessin d'un chapeau noir qui est plus court de 70 pixels. La largeur du
        chapeau noir est de 50 pixels.
      2-3 Artist 4_instruction: Aide-moi à terminer la maison pour ce chat.
      2-3 Artist 5_instruction: Refais ce code avec un bloc « répéter plusieurs fois »
        pour dessiner la même maison à l'aide de seulement 3 blocs.
      2-3 Artist 6_instruction: 'Cette maison a besoin d''un toit ! Dessine le triangle.
        Astuce : les 3 côtés sont égaux.'
      2-3 Artist 7_instruction: "Termine en dessinant la moitié droite de la dernière
        fenêtre.\n\nChaque carré de la fenêtre fait 25 pixels. \n"
      2-3 Artist 8_instruction: Complète les chambres pour chacun des animaux en divisant
        le rectangle en 2 carrés égaux. Le rectangle est de 200 pixels de large et
        100 pixels de haut.
      2-3 Artist 9_instruction: Terminer ce kite
      2-3 Artist Assessment 1_instruction: 'Évaluation : Termine la dernière dent,
        de 25 pixels de large et 25 pixels de hauteur.'
      2-3 Artist Debugging 1_instruction: Peux-tu faire en sorte que ce chapeau ait
        une hauteur de 100 ?
      2-3 Artist Debugging 10_instruction: 'La direction de mon contrôleur de jeu
        est trop étroite. Astuce : rend-le plus large de 10 pixels'
      2-3 Artist Debugging 11_instruction: Aide-moi à terminer mon magnifique flocon
        de neige. Combien de fois ai-je besoin de « répéter » pour le finir ?
      2-3 Artist Debugging 12_instruction: Je suis censé ajouter une vague sur cet
        océan. Peux-tu m'aider ?
      2-3 Artist Debugging 2_instruction: 'Le code pour les trois moustaches que tu
        voies est erroné. Astuce : chaque moustache est longue de 75 pixels. Corrige
        ce code pour dessiner les moustaches.'
      2-3 Artist Debugging 3_instruction: 'Mon bateau a un trou ! Peux-tu y remédier
        en changeant l''angle de la ligne ? Astuce : le dernier angle est dévié de
        15 degrés.'
      2-3 Artist Debugging 4_instruction: Quelle est l'image que nous essayons de
        dessiner ? Finis de relier les points en utilisant les angles et les lignes
        appropriées.
      2-3 Artist Debugging 5_instruction: 'Le code pour la jambe et le pied que tu
        voies est erroné. Astuce : le pied est trop long, nous devrons peut-être enlever
        un morceau (jeu de mots volontaire)'
      2-3 Artist Debugging 6_instruction: On dirait que je suis assis sur une chaise
        à laquelle il manque un pied. Modifie les blocs pour dessiner le pied.
      2-3 Artist Debugging 7_instruction: On dirait que le C est dessiné dans le mauvais
        sens dans le code. Peux-tu le faire ressembler à un C ?
      2-3 Artist Debugging 8_instruction: Mon moulinet n'est pas complet. Combien
        de fois dois-je répéter pour le terminer ?
      2-3 Artist Debugging 9_instruction: 'Le code de cette tige est incorrect. Astuce
        : l''angle est dévié de 60 degrés'
      2-3 Artist Debugging Assessment 1_instruction: 'Cette forme est trop petite.
        Peux-tu l''agrandir ? Astuce : elle devrait avoir 75 pixels de plus de chaque
        côté.'
      2-3 Artist Free Play_instruction: Jeu libre ! Dessine tout ce que tu veux.
      2-3 Artist Functions 1_instruction: 'Salut. Moi artiste zombie. Moi aime dessiner !
        Toi aider moi à dessiner les verres carrés. Astuce : le pont entre les verres
        fait 25 pixels de moins que la longueur du carré.'
      2-3 Artist Functions 10_instruction: 'Voici deux fonctions : une pour dessiner
        une grande roue et l''autre pour dessiner un petit engrenage. Utilise-les
        pour dessiner l''intérieur d''une machine !'
      2-3 Artist Functions 11.5_instruction: Voici cette même fonction « dessiner
        un hexagone ». Que se passe-t-il si tu mets seulement 60 degrés à chaque fois
        que tu boucles ?
      2-3 Artist Functions 11_instruction: Nous avons renommé la fonction « dessiner
        un carré » en « dessiner un hexagone », mais elle dessine encore des carrés !
        Peux-tu modifier la fonction « dessiner un hexagone » pour dessiner un hexagone
        avec des côtés de 50 pixels et dessiner l'image en utilisant cette fonction ?
      2-3 Artist Functions 12_instruction: 'Les fonctions sont très pratiques pour
        dessiner des choses complexes plusieurs fois. Peux-tu utiliser la fonction
        « dessiner une fleur » pour remplir le reste du bac de plantes ? (Astuce :
        les plantes sont toutes séparées par une longueur de 100 pixels) '
      2-3 Artist Functions 13_instruction: Voici quatre fonctions. Utilise-les comme
        bon te semble à l'intérieur d'une ou plusieurs boucles pour faire des images
        que tu pourras partager avec tes amis. Appuie sur Démarrer pour voir un exemple.
      2-3 Artist Functions 2_instruction: Les fonctions te permettent de définir de
        nouveaux blocs ! Nous avons déplacé les blocs permettant de dessiner un carré
        dans une fonction appelée « dessiner un carré ». Peux-tu utiliser la fonction
        « dessiner un carré » pour créer les verres ? Les carrés sont espacés de 75
        pixels.
      2-3 Artist Functions 3_instruction: Modifie la fonction pour dessiner un carré
        de 115 pixels de côté et dessine les plus grands verres. Les carrés sont maintenant
        espacés de 45 pixels.
      2-3 Artist Functions 4_instruction: Utilise le bloc « répéter » pour dessiner
        ces 3 carrés.
      2-3 Artist Functions 7_instruction: 'Utilise la fonction « dessiner une maison »
        pour dessiner les deux maisons à l''aide de deux paramètres différents. (Astuce :
        la première maison fait 100 pixels.)'
      2-3 Artist Functions 9_instruction: Voici une fonction pour le flocon de neige.
        Expérimente-la pour créer une scène d'hiver ! Il s'agit d'un niveau de jeu
        libre, donc il n'y a aucun puzzle à résoudre. Amuse-toi !
      2-3 Artist Loops 1_instruction: Peux-tu tracer un hexagone avec des côtés de
        100 pixels de long pour terminer la cellule ? N'oublie pas, cela signifie
        que tu devras seulement tourner de 60 degrés !
      2-3 Artist Loops 10_instruction: Que se passe-t-il à la conception, lorsque
        nous faisons notre dernier pas deux fois moins long ?
      2-3 Artist Loops 11_instruction: Maintenant nous allons mettre *autre* boucle
        autour de notre création toute entière !  N'oubliez pas d'ajouter un angle
        à la fin de la boucle externe.
      2-3 Artist Loops 2_instruction: Maintenant, utilisez un bloc répéter pour que
        la cellule devienne une coquille.
      2-3 Artist Loops 4_instruction: Voulez-vous voir ce qui se passe lorsque nous
        répétons cette forme encore et encore une fois à l'aide d'une boucle ?
      2-3 Artist Loops 5_instruction: Maintenant faisons un petit changement à la
        boucle et voyons comment ce que devient notre image.
      2-3 Artist Loops 6_instruction: Ajoutez un déplacement et un tour supplémentaire
        à l'intérieur de la boucle et voyez l'évolution de votre conception.
      2-3 Artist Loops 7_instruction: Nous pouvons utiliser les boucles pour faire
        toutes sortes de polygones.  Pouvez-vous créer un losange à l'intérieur de
        cet hexagone ?
      2-3 Artist Loops 8_instruction: Mettons les deux éléments à l'intérieur d'une
        boucle.
      2-3 Artist Loops 9_instruction: "Nous allons boucler sur les mêmes éléments,
        mais maintenant nous allons ajouter quelques distance entre eux. \r Utilisez
        le même code que précédemment, mais ajoutez un pas en avant à la fin de la
        boucle externe."
      2-3 Artist Loops New 1_instruction: Dessinons la tête de ce robot ! Pouvez-vous
        faire un carré de 100 pixels de côté ?
      2-3 Artist Loops New 10_instruction: Maintenant connectons ensemble un groupe
        de V, en les dessinant dans une boucle.
      2-3 Artist Loops New 11_instruction: Cette fois nous allons le dessiner 24 fois.
        Ajoutez un virage à gauche de 30 degrés à ce code et mettez le tout dans un
        bloc Répéter.
      2-3 Artist Loops New 12_instruction: |
        Dessinez un losange avec des côtés de 100 pixels.
      2-3 Artist Loops New 13_instruction: Maintenant dessinez le losange 3 fois dans
        une boucle.
      2-3 Artist Loops New 14_instruction: Maintenant nous allons dessiner le losange
        10 fois mais en pivotant de 90 degrés entre chaque losange.
      2-3 Artist Loops New 15_instruction: Dessinez quelque chose d'amusant.
      2-3 Artist Loops New 2_instruction: Voici une partie du code que vous utilisé
        pour dessiner ce carré. Que se passe-t-il si vous utilisez le bloc Répéter
        pour exécuter ce code 4 fois ?
      2-3 Artist Loops New 9_instruction: Pour remplir la flèche, dessinez un simple
        V dont les deux parties font 50 pixels de long.
      2-3 Artist Match Hex Pic_instruction: 'Correspondances : Aidez à finir l''hexagone.'
      2-3 Artist Match Rho Pic_instruction: 'Correspondances : Terminez le code manquant.'
      2-3 Artist Match Sq Pic_instruction: 'Correspondances : Complétez le code manquant'
      2-3 Artist Match Tri pic_instruction: 'Correspondances : Renseignez le code
        manquant.'
      2-3 Artist Nested Loops 1_instruction: "Vous avez utilisé des boucles pour dessiner
        des formes avant, mais saviez-vous que vous pouvez mettre une boucle à l'intérieur
        d'une autre boucle ? \r bouclez tout ce bloc de code 3 fois pour dessiner
        le motif."
      2-3 Artist Nested Loops 10_instruction: Bouclez ce code 12 fois pour compléter
        le motif.
      2-3 Artist Nested Loops 11_instruction: Bouclez ce code 4 fois pour compléter
        le motif, en tournant à 90 degrés après chaque cercle.
      2-3 Artist Nested Loops 12_instruction: Bouclez ce code 12 fois pour compléter
        les boucles.
      2-3 Artist Nested Loops 2_instruction: Maintenant bouclez le triangle 6 fois.
        Après chaque triangle, vous devrez tourner à 60 degrés avant de dessiner la
        prochaine.
      2-3 Artist Nested Loops 3_instruction: Vous aurez besoin de boucler le triangle
        12 fois dessiner ce motif. Divisez le nombre de degrés dans un cercle (360)
        par le nombre de formes que vous dessinez (12) pour découvrir de combien est-ce
        que vous devez tourner après chaque forme.
      2-3 Artist Nested Loops 4_instruction: 'Boucle ce losange 12 fois pour dessiner
        une fleur. Conseil : les 12 losanges sont juste comme les 12 triangles, que
        vous avez fait - de combien est-ce que vous devez tourner après chaque forme
        ?'
      2-3 Artist Nested Loops 5_instruction: Retrace les fenêtres de ce bâtiment avec
        une boucle imbriquée. Les fenêtres mesurent 20 pixels et sont séparées de
        20 pixels.
      2-3 Artist Nested Loops 6_instruction: Ce dinosaure a 8 pointes en haut sa queue
        ; chaque pointe mesure 30 pixels. Boucle le triangle 8 fois, mais n'oublie
        pas d'aller vers l'avant après chacun d'eux.
      2-3 Artist Nested Loops 7_instruction: Boucle ce triangle 10 fois pour dessiner
        le soleil. Tu devras déplacer et tourner après chaque triangle. Tu peux déterminer
        l'angle de rotation en divisant le nombre de degrés dans un cercle par le
        nombre de formes qui composent ton soleil.
      2-3 Artist Nested Loops 8_instruction: Maintenant nous allons ajouter quelques
        herbes à notre image. Les touffes d'herbe sont séparées de 50 pixels.
      2-3 Artist Nested Loops 9_instruction: Nous allons terminer ce dessin en ajoutant
        une fleur. Boucle le losange 12 fois pour dessiner ta fleur.
      2-3 Artist Nested Loops Free Play_instruction: Activité libre, dessine quelque
        chose de cool avec des boucles imbriquées.
      2-3 Bee Conditionals 1_instruction: Salut ! Je suis une abeille. Aide-moi à
        obtenir le nectar de la fleur.
      2-3 Bee Conditionals 10_instruction: "Les fleurs violettes peuvent avoir 1 ou
        0 nectar. Veille à ne pas butiner une fleur violette si celui-ci n'en possède
        pas. \r\n"
      2-3 Bee Conditionals 11_instruction: Butine sur les fleurs qui ont du nectar.
      2-3 Bee Conditionals 12_instruction: Utilise une boucle pour vérifier et collecter
        le nectar de toutes ces fleurs.
      2-3 Bee Conditionals 13_instruction: 'Collecte du nectar et fais du miel. Astuce
        : que se passe-t-il si tu utilises la condition "si nectar" sur une fleur
        rouge ? Peux-tu compléter ceci avec une boucle ?'
      2-3 Bee Conditionals 14_instruction: Collecte le nectar et fais du miel. Veille
        à ne pas butiner de fleur pourpre, si elle n'en a pas.
      2-3 Bee Conditionals 15_instruction: Collecte le nectar des quatre fleurs.
      2-3 Bee Conditionals 2_instruction: Salut, je suis une abeille ! Aide-moi à
        collecter l'ensemble du nectar des fleurs. Utilise une boucle.
      2-3 Bee Conditionals 3_instruction: Aide-moi à collecter l'ensemble du nectar
        des fleurs et miel. Utilise une boucle.
      2-3 Bee Conditionals 4_instruction: Aide-moi à collecter l'ensemble du nectar
        des fleurs et faire tout le miel.
      2-3 Bee Conditionals 5_instruction: Les fleurs violettes peuvent avoir 1 ou
        0 nectar, mais tu ne sais pas lesquelles ! Veille à ne pas butiner de fleur
        violette si elle n'en a pas. Vérifie si le nectar est égal à 1 à l'aide du
        bloc « si ».
      2-3 Bee Conditionals 6_instruction: Vérifie cette fleur avec un bloc « si »
        pour voir s'il y a du nectar disponible.
      2-3 Bee Conditionals 7_instruction: Butine chaque fleur qui a du nectar.
      2-3 Bee Conditionals 8_instruction: Ce champ possède des fleurs rouges et violettes.
        Les fleurs rouges ont une quantité connue de nectar, mais le nectar de la
        fleur violette est inconnue. Recueille tout le nectar.
      2-3 Bee Conditionals 9_instruction: Recueille tout le nectar de chaque fleur.
      2-3 Bee Conditionals Assessment 1_instruction: 'Évaluation : Collecte tout le
        nectar. Veille à ne pas butiner de fleur pourpre, si elle n''en a pas.'
      2-3 Bee Debugging 1_instruction: Ces blocs sont vraiment casse-pieds. Corrige
        la ou les erreur(s) afin de recueillir l'ensemble du nectar et faire tout
        le miel.
      2-3 Bee Debugging 10_instruction: Ces blocs sont vraiment casse-pieds. Corriger
        la ou les erreur(s) afin de recueillir l'ensemble du nectar et faire tout
        le miel.
      2-3 Bee Debugging 2_instruction: Ces blocs sont vraiment casse-pieds. Corrige
        la ou les erreur(s) afin de recueillir l'ensemble du nectar et faire tout
        le miel.
      2-3 Bee Debugging 3_instruction: Ces blocs sont vraiment casse-pieds. Corrige
        la ou les erreur(s) afin de recueillir l'ensemble du nectar et faire tout
        le miel.
      2-3 Bee Debugging 4_instruction: Ces blocs sont vraiment casse-pieds. Corrige
        la ou les erreur(s) afin de recueillir l'ensemble du nectar et faire tout
        le miel.
      2-3 Bee Debugging 5_instruction: Ces blocs sont vraiment casse-pieds. Corrige
        la ou les erreur(s) afin de recueillir l'ensemble du nectar et faire tout
        le miel.  Tu peux maintenant utiliser exécuter et étape.
      2-3 Bee Debugging 6_instruction: 'Ces blocs sont vraiment casse-pieds. Corrige
        la ou les erreur(s) afin de recueillir l''ensemble du nectar et faire tout
        le miel. '
      2-3 Bee Debugging 7_instruction: Ces blocs sont vraiment casse-pieds. Corrige
        la ou les erreur(s) afin de recueillir l'ensemble du nectar et faire tout
        le miel.
      2-3 Bee Debugging 8_instruction: Ces blocs sont vraiment casse-pieds. Corrige
        la ou les erreur(s) afin de recueillir l'ensemble du nectar et faire tout
        le miel.
      2-3 Bee Debugging 9_instruction: Ces blocs sont vraiment casse-pieds. Corrige
        la ou les erreur(s) afin de recueillir l'ensemble du nectar et faire tout
        le miel.
      2-3 Bee Debugging Assessment 1_instruction: 'Évaluation : Ces blocs sont vraiment
        casse-pieds. Corrige la ou les erreur(s) afin de recueillir l''ensemble du
        nectar et faire tout le miel.'
      2-3 Bee Functions 1_instruction: Les fonctions sont des blocs de code qui effectuent
        une tâche. Utilise la fonction « obtenir 2 nectars » pour recueillir le nectar
        de chaque fleur.
      2-3 Bee Functions 10_instruction: Les fleurs violettes peuvent avoir 1 ou 0
        nectar.  Crée une fonction qui recueille du nectar qu'à partir des fleurs
        violettes qui ont du nectar.
      2-3 Bee Functions 2_instruction: Les fonctions sont des blocs de code qui effectuent
        une tâche. Utilise la fonction « obtenir 5 » pour obtenir 5 nectars à la fois.
        Veille aussi à utiliser une boucle pour obtenir un nombre de blocs idéal.
      2-3 Bee Functions 3_instruction: Recueille tout le nectar de chaque fleur.
      2-3 Bee Functions 4_instruction: La fonction « déplacer et obtenir le nectar
        » déplace l'abeille, recueille le nectar et renvoie l'abeille à où elle a
        commencé. Utilise la fonction pour recueillir l'ensemble du nectar.
      2-3 Bee Functions 5_instruction: "Il y a maintenant plus de nectar dans les
        fleurs. \nModifie la fonction donnée afin qu'elle recueille 4 nectars et utilise-la
        pour recueillir l'ensemble du nectar des fleurs.\n"
      2-3 Bee Functions 6_instruction: Maintenant, utilise la même fonction pour recueillir
        le nectar des trois fleurs.
      2-3 Bee Functions 7_instruction: Les fleurs sont maintenant plus loin. Modifie
        la fonction donnée et utilise-la pour recueillir l'ensemble du nectar des
        fleurs.
      2-3 Bee Functions 8_instruction: Crée ta propre fonction qui obtient 7 nectar,
        se déplace vers l'avant et fait 7 de miel. Utilise cette fonction pour recueillir
        du nectar sur chaque fleur et faire du miel à chaque nid d'abeille.
      2-3 Bee Functions 9_instruction: Créer ta propre fonction qui descend un chemin,
        obtient du nectar, produit du miel, puis retourne l'abeille vers le haut du
        chemin.
      2-3 Bee Functions Assessment 1_instruction: 'Évaluation : Utilise la fonction
        donnée pour recueillir le nectar de chaque fleur.'
      2-3 Bee Functions Assessment 2_instruction: 'Évaluation : Crée une fonction
        pour faire 3 de miel à la fois.'
      2-3 Bee Loops 1_instruction: 'Chaque fleur contient une unité de nectar. Recueille
        le nectar de chacune des fleurs. '
      2-3 Bee Loops 10_instruction: Peux-tu utiliser une boucle "tant que" à l'intérieur
        de deux autres boucles pour recueillir tout le nectar ?
      2-3 Bee Loops 11_instruction: Utilise des boucles "Tant que" pour recueillir
        l'ensemble du nectar des fleurs dans ce terrain.
      2-3 Bee Loops 12_instruction: Utilise des boucles "Tant que" pour recueillir
        l'ensemble du nectar des fleurs dans ce terrain.
      2-3 Bee Loops 13_instruction: |
        Assessment: Use the repeat block to collect
        all of the nectar.
      2-3 Bee Loops 1A_instruction: 'Salut, Je suis une abeille. Peut-tu m''aider
        à récolter le nectar de ces fleurs ? '
      2-3 Bee Loops 2_instruction: Utilise une boucle pour recueillir le nectar et
        faire le miel.
      2-3 Bee Loops 2A_instruction: Peut-tu faire la même action plus facilement avec
        une boucle ?
      2-3 Bee Loops 3_instruction: Récolte le nectar de chaque fleur et produit du
        miel à chaque nid d'abeille.
      2-3 Bee Loops 3A_instruction: Peut-tu utiliser une boucle pour collecter tout
        ce nectar ?
      2-3 Bee Loops 3B_instruction: Maintenant, utiliser un nouveau bloc "répéter"
        pour collecter tous le nectar et fabriquer tous le miel.
      2-3 Bee Loops 4_instruction: Utilisez une boucle semblable comme le dernier
        puzzle, mais rajoute un tour dedans.
      2-3 Bee Loops 4A_instruction: Que se passe-t-il si tu fait cette boucle en 3
        séquence ? N'oublie pas de fabriquer le miel à la fin!
      2-3 Bee Loops 5_instruction: Utilise une boucle pour descendre les marches et
        recueillir le nectar.
      2-3 Bee Loops 6_instruction: Utilise une boucle pour recueillir le nectar de
        chaque fleur et faire du miel à chaque nid d'abeille.
      2-3 Bee Loops 7_instruction: Met ces blocs dans une boucle pour recueillir le
        nectar de chaque fleur.
      2-3 Bee Loops 8_instruction: Ces fleurs ont une quantité inconnue de nectar.
        Utilise la boucle "tant qu'il y a du nectar"  pour recueillir l'ensemble du
        nectar. Cette boucle s'exécutera tant que la condition est vraie, dans ce
        cas Nectar > 0.
      2-3 Bee Loops 9_instruction: La boucle "Tant que" peut exécuter la même action
        qu'une instruction "if" dans une boucle. Ajouter une boucle "Tant que" à ce
        code pour effectuer la même tâche.
      2-3 Bee Loops Assessment 1_instruction: Évaluation - utilise une boucle Tant
        Que pour recueillir l'ensemble du nectar de cette fleur.
      2-3 Maze 1_instruction: 'Peux-tu m''aider à attraper le cochon vilain ? Empile
        un ensemble de blocs « avancer » et appuie sur « Démarrer ». '
      2-3 Maze 10_instruction: Guide-moi jusqu'à cette maudite créature verte ! (Fais
        attention aux explosifs…)
      2-3 Maze 11_instruction: Amène-moi à la fleur, j'ai faim ! Combien de fois dois-tu
        répéter un bloc ?
      2-3 Maze 12 (copy 1)_instruction: 'Peux-tu remplacer la réponse précédente avec
        seulement deux blocs ? (Astuce : crée une boucle à l''aide d''un bloc « répéter
        N fois ».)'
      2-3 Maze 12 (copy 2)_instruction: 'Peux-tu remplacer la réponse précédente avec
        seulement deux blocs ? (Astuce : crée une boucle à l''aide d''un bloc « répéter
        N fois ».)'
      2-3 Maze 12 (old)_instruction: Emmène-moi jusqu'au cochon, en utilisant cette
        fois le bloc "Répéter plusieurs fois" !
      2-3 Maze 12_instruction: |
        Peux-tu remplacer ces 5 blocs avec seulement 2 blocs ?
        (Astuce : créée une boucle avec le bloc "répéter plusieurs fois")
      2-3 Maze 13 (old)_instruction: Emmène-moi jusqu'au cochon, en utilisant cette
        fois le bloc "Répéter jusqu'à" !
      2-3 Maze 13_instruction: Emmène-moi jusqu'au cochon en utilisant seulement deux
        blocs.
      2-3 Maze 14 (old)_instruction: Emmène-moi jusqu'au cochon en utilisant le bloc
        "Répéter jusqu'à" !
      2-3 Maze 14_instruction: Emmène-moi jusqu'au tournesol ! (où diable est ce bloc
        "Répéter plusieurs fois" lorsqu'on a besoin de lui ?)
      2-3 Maze 15 (old)_instruction: Emmène-moi jusqu'au cochon en utilisant le bloc
        "Répéter jusqu'à" !
      2-3 Maze 15_instruction: Utilise deux boucles pour aller jusqu'au cochon en
        utilisant moins de boucles.
      2-3 Maze 16 (old)_instruction: Emmène-moi jusqu'au cochon en utilisant le bloc
        "Répéter jusqu'à" !
      2-3 Maze 16 before_instruction: Emmène-moi jusqu'au cochon.
      2-3 Maze 16_instruction: Emmène-moi jusqu'au tournesol. Fais tourner la séquence
        en boucle !
      2-3 Maze 2_instruction: Ce cochon m'agace. Aide-moi à l'attraper !
      2-3 Maze 3_instruction: Trace le chemin et conduit moi jusqu'au villain cochon.  Évite
        la TNT ou les plumes vont s'envoler!
      2-3 Maze 4_instruction: Guide-moi jusqu'à cette maudite créature verte ! (Fais
        attention aux explosifs…)
      2-3 Maze 5_instruction: Guide-moi jusqu'à cette maudite créature verte ! (Fais
        attention aux explosifs…)
      2-3 Maze 6_instruction: Reste calme et aide moi a trouver ce cochon. Autrement
        je pourrais m'énerver!
      2-3 Maze 7_instruction: Guide-moi jusqu'à cette maudite créature verte ! (Fais
        attention aux explosifs…)
      2-3 Maze 8_instruction: Amène moi jusqu'au cochon!
      2-3 Maze 9_instruction: Guide-moi jusqu'à cette maudite créature verte ! (Fais
        attention aux explosifs…)
      2-3 Maze Loops 1_instruction: Peux-tu m'amener au cochon en utilisant 5 blocs?
      2-3 Maze Loops 17_instruction: Amène moi jusqu'au tournesol!
      2-3 Maze Loops 18_instruction: Amène moi jusqu'au tournesol!
      2-3 Maze Loops 19_instruction: Amène moi jusqu'au tournesol!
      2-3 Maze Loops 20_instruction: Amène moi jusqu'au tournesol!
      2-3 Maze Loops 21_instruction: Amène moi jusqu'au tournesol!
      2-3 Maze Loops Assessment 1_instruction: 'Évaluation: amène moi jusqu''au tournesol
        en utilisant seulement 5 blocs! '
      2-3 Maze sq1 _instruction: Ce cochon me casse les pieds. Aide-moi à le trouver
        !
      2-3 Maze sq10_instruction: Emmène-moi jusqu'au cochon ! Quels blocs sont répétés
        ?
      2-3 Maze sq10v2_instruction: Emmène-moi jusqu'au cochon ! Quels blocs sont répétés
        ?
      2-3 maze sq11_instruction: Emmène-moi jusqu'au cochon ! Quels blocs sont répétés
        ?
      2-3 maze sq12_instruction: Pouvez-vous remplacer la réponse par une boucle en
        utilisant un bloc "répéter" ?
      2-3 maze sq13_instruction: |
        Cher humain. Moi zombie. Dois... obtenir... tournesol.
        Crée boucle avec bloc "répéter jusqu'à".
      2-3 maze sq14_instruction: Peux-tu rejoindre le tournesol en utilisant uniquement
        quatre blocs ?
      2-3 maze sq15_instruction: Pouvez-vous obtenir le tournesol en utilisant seulement
        cinq blocs ?
      2-3 maze sq16_instruction: OK, c'est similaire, mais légèrement différent. Peux-tu
        le faire en seulement cinq blocs ?
      2-3 Maze sq2_instruction: Suis le chemin et amène-moi à ce stupide cochon.  Évite
        la TNT ou les plumes vont voler !
      2-3 Maze sq3_instruction: Guide-moi jusqu'à cette maudite créature verte ! (Fais
        attention aux explosifs…)
      2-3 Maze sq4_instruction: Garde ton calme et aide-moi à trouver le méchant cochon.
        Dans le cas contraire, je pourrais m'énerver !
      2-3 Maze sq5_instruction: Envoie-moi sur le cochon ! Combien de fois dois-tu
        répéter un bloc ?
      2-3 Maze sq6_instruction: 'Peux-tu remplacer la réponse précédente avec seulement
        deux blocs ? (Astuce : crée une boucle à l''aide d''un bloc « répéter X fois
        ».)'
      2-3 Maze sq7_instruction: Emmène-moi jusqu'à l'intrus vert en utilisant seulement
        trois blocs.
      2-3 Maze sq8_instruction: Emmène-moi jusqu'au cochon ! (Mais où est ce bloc
        "répéter" quand j'en ai besoin ?)
      2-3 Maze sq9_instruction: Crée des boucles pour rejoindre le cochon en utilisant
        moins de blocs.
      2-3level1_instruction: Aide l'oiseau à attraper le cochon en le déplaçant vers
        l'avant
      4-5 Artist 1_instruction: 'Aide-moi à finir de dessiner ma boîte. (Chaque ligne
        est longue de 300 pixels.) '
      4-5 Artist 10_instruction: Appuie sur "Exécuter" pour tester ton code. Puis,
        répète-le assez de fois pour finir le dessin. Les couleurs seront différentes
        à chaque fois.
      4-5 Artist 11_instruction: Complète les lignes vertes. Les lignes font 300 pixels
        de longueur et sont séparées par 15 pixels.
      4-5 Artist 2_instruction: Peux-tu répéter ce code pour compléter le carré ?
      4-5 Artist 3.5_instruction: OK, essaie de deviner ce qui se passe quand tu exécutes
        ce code (ou appuie sur "Exécuter" pour l'essayer). Puis, répète-le assez de
        fois pour finir le dessin. Les couleurs seront (probablement) différentes
        chaque fois.
      4-5 Artist 3_instruction: |
        Ce parterre de fleurs rectangulaire a un périmètre de 600.
        Le côté le plus long a une longueur de 200. Dessine le rectangle.
      4-5 Artist 4_instruction: Combien de degrés y'a-t-il dans un cercle ? Crée une
        boucle avec les blocs pour créer un cercle de couleurs.
      4-5 Artist 5_instruction: Quel angle utilises-tu ?
      4-5 Artist 6_instruction: Ce triangle équilatéral a des angles de 60 degrés
        chacun. Chaque côté fait 200 pixels. Complète le dessin.
      4-5 Artist 7_instruction: Ce triangle rectangle a des angles de 30, 60 et 90
        degrés. La longueur du côté penché (l'hypoténuse) est le double de la hauteur
        de 100 pixels. Complète le dessin.
      4-5 Artist 8_instruction: Sur un terrain de football, la ligne du milieu de
        terrain est perpendiculaire aux lignes de touche. Ce terrain a un périmètre
        de 800 pixels et une longueur de 240 pixels. Quelle est sa largeur ? Dessine
        les limites et la ligne médiane.
      4-5 Artist 9_instruction: Dessine l'autre moitié pour que le dessin soit symétrique.
        Les triangles sont équilatéraux et mesurent 50 pixels de long.
      4-5 Artist Assessment 1_instruction: 'Consigne : Utilise une boucle pour dessiner
        le triangle équilatéral. Chaque côté fait 300 pixels.'
      4-5 Artist For Loops 1_instruction: Mets les nombres de 1 à 10 dans les blocs
        "largeur" et exécute le code.
      4-5 Artist For Loops 11_instruction: Complète la boucle "pour" pour qu'elle
        compte 0, 20, 40, 60, 80... 200.
      4-5 Artist For Loops 12_instruction: 'Que se passe-t-il si on échange les nombres
        de départ et d''arrivée ? Complète le bloc de la boucle for pour qu''il compte
        200, 180, 160, 140, 120...0. '
      4-5 Artist For Loops 13_instruction: 'Cette conception a commencé sans une boucle
        "Pour" et prend trop de blocs !  Utilise un bloc "Pour" pour finir la spirale.
        Astuce : la longueur de la dernière ligne est de 250 pixels.'
      4-5 Artist For Loops 14_instruction: 'Quelqu''un a commencé le code, mais a
        réalisé qu''il devait y avoir un moyen plus rapide! Utilise un bloc «Pour»
        pour remplacer les blocs et complète la spirale triangulaire (Indice: la longueur
        de la dernière ligne est 300 pixels.'
      4-5 Artist For Loops 15_instruction: 'Quelqu''un a commencé le code, mais a
        réalisé qu''il devait y avoir un moyen plus rapide! Utilise un bloc «Pour»
        pour remplacer les blocs et complète la spirale hexagonale (Indice: la longueur
        de la dernière ligne est 200 pixels.'
      4-5 Artist For Loops 2_instruction: Ceci est un bloc «pour». Plutôt que de taper
        1,2,3... 10, le bloc «pour» peut répéter les blocs qu'il contient et compter
        pour toi. Place le nombre 10 dans la section «à» du bloc «pour».
      4-5 Artist For Loops 3_instruction: Comment peut-on compter de 1 à 50? Édite
        le bloc «pour».
      4-5 Artist For Loops 4_instruction: Complète le bloc «pour» pour qu'il compte
        de 1 à 10 par bonds de 1.
      4-5 Artist For Loops 6_instruction: Dessine des carrés avec des côtés de 50,
        60, 70, 80 et 90 pixels. Tu devras utiliser la fonction «dessiner un carré»
        cinq fois.
      4-5 Artist For Loops 7_instruction: 'Dessine les mêmes carrés, mais utilise
        un bloc «compter avec» pour changer les tailles. Place le bloc «compteur»
        dans la fonction «dessiner une carré». Indice: Il est dans la catégorie Variables.'
      4-5 Artist For Loops 8_instruction: Peux-tu compléter le programme en plaçant
        des blocs dans le bloc «pour» qui compte de 10 à 200 par bonds de 10? Tu peux
        trouver le bloc «pour» dans la catégorie Boucles.
      4-5 Artist For Loops 9_instruction: Ces cercles sont de taille 5, 10, 15, 20,
        25, 30, et 35. Dessine les cercles en utilisant un bloc «pour».
      4-5 Artist Free Draw 1_instruction: Dessin libre! Dessine tout ce que tu souhaites
        créer.
      4-5 Artist Functions 1_instruction: Utiliser une boucle de répétition pour dessiner
        ce triangle.
      4-5 Artist Functions 10a_instruction: Place ce code dans la fonction «Dessiner
        un flocon» et remplace le 50 par le paramètre «taille». La fonction est déjà
        appelée pour faire un flocon de neige de 100 pixels.
      4-5 Artist Functions 10b_instruction: 'Utilise la fonction « dessiner un flocon
        de neige » pour créer différentes tailles de flocons. Indice: le premier flocon
        a une largeur de 25 et les flocons suivants ont le double de la taille du
        précédent.'
      4-5 Artist Functions 11_instruction: 'Cette fonction « dessiner un hexagone
        » utilise la fonction « dessiner un triangle ». Complète la fonction de l''hexagone.
        (Indice: Un hexagone a 6 côtés de 100 pixels chacun)'
      4-5 Artist Functions 12_instruction: 'Complète la fonction « dessiner des vagues
        ». Chaque vague est faite d''une vague supérieure et d''une vague inférieure.
        Indice: Dessine 5 vagues bleues.'
      4-5 Artist Functions 13 Free play_instruction: Voici des fonctions pour dessiner
        des planètes, des étoiles, des fusées et des robots. Utilise-les comme tu
        veux pour créer des images que tu peux partager avec tes amis.
      4-5 Artist Functions 14 Free play_instruction: Ici, nous te fournissons plusieurs
        fonctions. Utilise-les comme tu veux à l'intérieur d'une ou plusieurs boucles
        pour créer des images que tu peux partager avec tes amis. Clique sur « Démarrer
        » pour voir un exemple.
      4-5 Artist Functions 15 Assessment_instruction: |
        Évaluation: Utilise la fonction « dessiner un carré » pour créer les carrés. Les carrés ont des tailles de 50, 100 et 150
        pixels.
      4-5 Artist Functions 2a_instruction: Maintenant, place ces blocs dans une nouvelle
        fonction nommée « dessiner un petit triangle » et appelle-la.
      4-5 Artist Functions 2b_instruction: Maintenant, crée une fonction nommée «
        dessiner un petit triangle » en utilisant les blocs fournis.
      4-5 Artist Functions 3_instruction: 'Maintenant, crée les fonction « dessiner
        un triangle moyen » et « dessiner un grand triangle ». La fonction « dessiner
        un petit triangle » a déjà été créée pour toi. Les triangles ont des longueurs
        de côté de 50 (petit), 100 (moyen) et 150 (grand). '
      4-5 Artist Functions 4_instruction: Cette nouvelle fonction « dessiner un triangle
        » a un paramètre et peut faire le travail des trois fonctions précédentes.
        Dessine les mêmes triangles à l'aide de cette nouvelle fonction.
      4-5 Artist Functions 5_instruction: Peux-tu changer la fonction « dessiner un
        triangle » par une fonction de « dessiner un carré » afin de modifier le dessin
        ?
      4-5 Artist Functions 6_instruction: 'Utilise les fonctions « dessiner un carré
        » et « dessiner un triangle » pour dessiner une maison. (Indice : les côtés
        du carré mesurent 200 pixels)'
      4-5 Artist Functions 6b_instruction: Ajoutant les fonctions « dessiner un carré
        » et « dessiner un triangle » ainsi que d'autres blocs à la fonction « dessiner
        une maison » et appelle cette fonction afin de dessiner une maison.
      4-5 Artist Functions 7_instruction: Utilise la fonction « dessiner une maison
        » pour dessiner des maisons de 100 pixels et 50 pixels. Les deux maisons sont
        séparées par 50 pixels.
      4-5 Artist Functions 8_instruction: La fonction « dessiner une fleur » a un
        paramètre qui permet de définir la hauteur de la tige. Règle-le à 200 pour
        voir ce qui se passe.
      4-5 Artist Functions 9_instruction: Dessine ces 3 fleurs. La première a une
        hauteur de 100 et les suivantes ont toujours une hauteur 50 pixels plus élevée
        que la précédente. Il y a 100 pixels entre chaque fleurs.
      4-5 Artist Patterns 1_instruction: Peux-tu dessiner ce carré à l'aide d'une
        boucle ? Chaque côté mesure 20 pixels.
      4-5 Artist Patterns 10_instruction: 'Ce code dessine deux rangées d''hexagones
        - répète le tout 4 fois pour dessiner un nid d''abeille. Indice : Tu dois
        revenir en arrière de 120 pixels dans la boucle externe pour éviter que l''artiste
        ne dessine hors de l''écran.'
      4-5 Artist Patterns 11_instruction: 'Combien de fois dois-tu répéter la boucle
        pour dessiner un demi-cercle? Indice: s''il y a 360 degrés dans un cercle
        et que chaque tour de boucle avance de 3 degrés, combien de fois dois-tu répéter
        la boucle pour dessiner un cercle complet?'
      4-5 Artist Patterns 12_instruction: Si tu copies cette boucle et tourne à gauche
        plutôt qu'à droite, que se passe-t-il ? Peux-tu répéter ceci pour dessiner
        cette vague ?
      4-5 Artist Patterns 13_instruction: Essayons maintenant de répéter cette boucle
        quatre fois pour créer ce cadre d'image. Attention aux coins - tu ne peux
        pas simplement tourner de 90 degrés! Si répéter une rotation de 3 degrés 60
        fois produit un demi-cercle, lequel de ces blocs de code fera un quart de
        tour pour les coins?
      4-5 Artist Patterns 2_instruction: Si tu places ta boucle de carré à l'intérieur
        d'une autre boucle, on appelle ça une boucle imbriquée. Que faut-il ajouter
        à ta boucle externe pour s'assurer que les 15 carrés soit alignés côte à côte
        ?
      4-5 Artist Patterns 3_instruction: Maintenant allons un niveau plus profond
        ! Nous avons imbriqué ce bloc de code dans une autre boucle, mais tu dois
        replacer l'artiste à la bonne place pour dessiner la ligne suivante. Lequel
        de ces blocs peux-tu placer à la fin de la boucle extene pour dessiner la
        grille entière ?
      4-5 Artist Patterns 4_instruction: Ce diamant a des côtés de 50 pixels et des
        angles de 120 et 60 degrés. Utilise une boucle pour le dessiner.
      4-5 Artist Patterns 5.5_instruction: Combien de fois dois-tu répéter ce bloc
        pour dessiner la grille de diamants complète ?
      4-5 Artist Patterns 5_instruction: Nous allons répéter cela pour faire une rangée
        de 6 diamants. Remarque que nous avons changé notre code de diamant pour faire
        3 répétitions plutôt que 2. Pourquoi pense-tu que nous avons fait cela ?
      4-5 Artist Patterns 6_instruction: Combien de fois dois-tu répéter ce bloc pour
        dessiner la grille de diamants complète ?
      4-5 Artist Patterns 7_instruction: Nous allons modifier le code du dernier puzzle
        pour faire un motif plus complexe. Observe comment les diamants se chevauchent
        maintenant. Essaie de changer le premier « saut en arrière » de 100 à 50 (réduction
        de moitié). De combien l'artiste doit-il se déplacer dans le deuxième « saut
        en arrière » maintenant ?
      4-5 Artist Patterns 8_instruction: Utilise une boucle pour dessiner cet hexagone
        avec des côtés de 40 pixels et des angles de 60 degrés.
      4-5 Artist Patterns 9.5_instruction: Nous allons boucler ce code pour dessiner
        deux rangées d'hexagones. Observe comment notre deuxième rangée est décalée
        vers la droite.
      4-5 Artist Patterns 9_instruction: Répétez maintenant ce code 3 fois pour dessiner
        la ligne entière. Rappelez-vous, chaque hexagone a 80 pixels de large de l'ultime
        point gauche à celle droite.
      4-5 Artist Patterns Free Play_instruction: Jeux gratuite - essaie de dessiner
        un modèle de votre choix!
      4-5 Bee Conditionals 1 (copy 1)_instruction: |
        The bee can't tell if this is
        a flower or a honeycomb. Gather nectar only from flowers, but first check
        if it is a flower or a honeycomb.
      4-5 Bee Conditionals 1_instruction: L'abeille ne peut pas dire si c'est une
        fleur ou un nid d'abeilles. Ne recueille le nectar qu'à partir de fleurs,
        mais vérifie d'abord si c'est une fleur ou un nid d'abeilles.
      4-5 Bee Conditionals 2 (copy 1)_instruction: |
        The bee only wants nectar right
        now. Remember, not all objects are flowers, so check to gather nectar only
        at flowers.
      4-5 Bee Conditionals 2_instruction: L'abeille veut du nectar dès maintenant.
        N'oublie pas, tous les objets ne sont pas des fleurs, donc vérifie pour ne
        recueillir le nectar que sur les fleurs.
      4-5 Bee Conditionals 3_instruction: Maintenant l'abeille veut juste faire du
        miel. Vérifier pour le faire dans les nids d'abeille justement.
      4-5 Bee Conditionals 4 (copy 1)_instruction: |
        The unknown object is either
        a flower or a honeycomb. Use the if/else block to collect nectar if it is
        a flower, else to make honey (because it is a honeycomb).
      4-5 Bee Conditionals 4_instruction: L'objet inconnu est soit une fleur ou un
        rayon de miel.  Employez le bloc if/else pour récupérer le nectar si (if)
        c'est une fleur, sinon (else) pour fair le miel (parce que c'est un rayon
        de miel).
      4-5 Bee Conditionals 5_instruction: Il pourrait y avoir une fleur ou un rayon
        de miel sous ces nuages-là.  Employez le bloc "if/else" pour récupérer le
        nectar si (if) il y a une fleur, sinon (else) pour faire le miel (parce qu'il
        y a un rayon de miel).
      4-5 Bee Conditionals 6 (copy 1)_instruction: |
        This purple flower may have either
        3, 2, or 1 nectar. Here an if-else block is combined with another if-else
        block to create an if, else-if, else block. Complete the solution to collect
        the unknown amount of nectar.
      4-5 Bee Conditionals 6_instruction: Cette fleur-là pourrait contenir soit 3,
        2, ou 1 nectar.  Ici un bloc "if-else" (si-sinon) sera combiné avec un autre
        bloc "if-else" pour créer un bloc "if, else-if, else" (si, sinon-si, sinon).  Trouvez
        la solution pour récupérer la quantité inconnue de nectar.
      4-5 Bee Conditionals 7_instruction: N'oublie pas que les fleurs violettes peuvent
        avoir 1, 2 ou 3 doses de nectar. Remplis la fonction de « vérifier la fleur
        violette » et utilise-la pour recueillir le nectar de toutes les fleurs.
      4-5 Bee Conditionals 8_instruction: Écris une fonction dans le bloc « vérifier
        fleur et faire miel ». Ta fonction doit vérifier combien de nectar contient
        la fleur pourpre, le recueillir, aller de l'avant et faire du miel.
      4-5 Bee Conditionals Assessment 1_instruction: |
        Evaluation: ce code est erroné.
        Complétez la fonction "get nectar or make honey" (récupérez du nectar ou faites du miel"), puis appelez-le récupérer tout le nectar et le miel.  N'oubliez pas que les fleurs violets puissent contenir soit 3, 2, ou 1 nectars.
      4-5 Bee Debugging 1_instruction: Ces blocs-là me gênent.  Vous pouvez les réparer?
      4-5 Bee Debugging 10_instruction: Trouvez les erreurs et réparez-les.
      4-5 Bee Debugging 11_instruction: Est-ce que ça compte comme il faut?
      4-5 Bee Debugging 2_instruction: Aidez l'abeille à récupérer le nectar et faire
        du miel.
      4-5 Bee Debugging 3_instruction: Trouvez les erreurs et réparez-les.
      4-5 Bee Debugging 4_instruction: Ces blocs-là ne marchent pas.  Quel est le
        motif?
      4-5 Bee Debugging 5_instruction: Quelque chose ne marche pas  içi...
      4-5 Bee Debugging 6_instruction: La fleur violet contient une quantité inconnue
        de nectar.  Réparez les blocs pour récupérer tout le nectar de la fleur.
      4-5 Bee Debugging 7_instruction: La fonction manque quelque chose...
      4-5 Bee Debugging 8_instruction: Cette fonction-là est bonne, mais elle ne s'emploie
        pas comme il faut.
      4-5 Bee Debugging 9_instruction: Pourquoi l'abeille ne fait-il pas assez de
        miel?
      4-5 Bee Debugging Assessment 1_instruction: 'Evaluation:  Réparez le code.'
      4-5 Bee Nested Loops 1_instruction: Employez un boucle pour récupérer tout le
        nectar.
      4-5 Bee Nested Loops 2_instruction: |
        Récupérez tout le nectar de chaque fleur.
        Employez un boucle emboîté.
      4-5 Bee Nested Loops 3_instruction: Récupérez tout le nectar en mettant le code
        de démarrage dans une boucle emboîtée.
      4-5 Bee Nested Loops 4_instruction: 'Récupérez tout le nectar de chaque fleur
        et faites du miel chez chaque rayon de miel.  Employez une boucle emboîtée. '
      4-5 Bee Nested Loops 5_instruction: Récupérez tout le nectar en créant une boucle
        emboîtée.
      4-5 Bee Nested Loops 6_instruction: Recueille tout le nectar.
      4-5 Bee Nested Loops 7_instruction: Mets cette boucle dans une autre boucle
        pour créer une boucle imbriquée et recueillir tout le nectar des fleurs.
      4-5 Bee Nested Loops 8_instruction: 'Récolte le nectar de ces fleurs en imbriquant
        une boucle "tant que". Remplace le bloc qui est répété plusieurs fois par
        un bloc dans une boucle "tant que". '
      4-5 Bee Nested Loops 9_instruction: Récolte tout le nectar de ces fleurs en
        imbriquant une boucle "tant que" à l'intérieur d'une répétition.
      4-5 Bee Nested Loops Assessment 1_instruction: Évaluation - Récolte tout le
        nectar et fais tout le miel en utilisant des boucles.
      4-5 Bee Nested Loops Rows_instruction: Récolte le nectar de chaque rangée de
        fleurs! Utilise une boucle imbriquée.
      4-5 Maze 1 (copy 1)_instruction: Chère personne. Moi zombie. Devoir...atteindre...tournesol.
      4-5 Maze 1_instruction: Chère personne. Moi zombie. Devoir...atteindre...tournesol.
      4-5 Maze 10_instruction: Peux-tu rejoindre le tournesol en utilisant uniquement
        quatre blocs ?
      4-5 Maze 11_instruction: Peux-tu aller au tournesol en utilisant uniquement
        six blocs?
      4-5 Maze 12_instruction: OK, cette fois c'est un peu différent. Peux-tu y arriver
        en six blocs uniquement?
      4-5 Maze 13_instruction: Amène moi jusqu'au cochon!
      4-5 Maze 14_instruction: Amène-moi au cochon! Utilise le bloc répéter jusqu'à.
      4-5 Maze 2 (copy 1)_instruction: Amène le zombie vers le tournesol, mais évite
        le gobeur!
      4-5 Maze 2_instruction: Amène le zombie vers le tournesol, mais évite le gobeur!
      4-5 Maze 3 (copy 1)_instruction: Devoir...atteindre...tournesol.
      4-5 Maze 3_instruction: Devoir...atteindre...tournesol.
      4-5 Maze 4 (copy 1)_instruction: Essaie d'utiliser un bloc de répétition pour
        utiliser moins de blocs...
      4-5 Maze 4_instruction: Essaie d'utiliser un bloc de répétition pour utiliser
        moins de blocs...
      4-5 Maze 5 (copy 1)_instruction: Peux-tu résoudre cette énigme en utilisant
        le moins de blocs possible?
      4-5 Maze 5_instruction: Peux-tu résoudre cette énigme en utilisant le moins
        de blocs possible?
      4-5 Maze 6 (copy 1)_instruction: Peux-tu résoudre cette énigme en utilisant
        le moins de blocs possible?
      4-5 Maze 6_instruction: Peux-tu résoudre cette énigme en utilisant le moins
        de blocs possible?
      4-5 Maze 7_instruction: Chère personne. Moi zombie. Devoir...atteindre...tournesol.
      4-5 Maze 8_instruction: Utilise le bloc de répétition pour amener le zombie
        au tournesol. (Évite les Gobeurs!)
      4-5 Maze 9_instruction: Crée une boucle avec le bloc "répéter jusqu'à".
      4-5 Maze Assessment 1_instruction: 'Évaluation: rejoins le tournesol.'
      4-5 Maze Conditionals 1_instruction: Utilise le bloc "répéter jusqu'à" pour
        amener le zombie au tournesol.
      4-5 Maze Conditionals 10_instruction: Peux-tu ajouter seulement 3 blocs pour
        m'aider à traverser un labyrinthe plus complexe? Si tu réussis, je pourrai
        marcher le long de n'importe quel chemin sinueux, peu importe sa longueur.
      4-5 Maze Conditionals 2_instruction: Utilise le bloc "répéter jusqu'à" pour
        amener le zombie au tournesol.
      4-5 Maze Conditionals 3_instruction: 'Utilise le bloc "si" pour me faire décider
        quand je dois tourner. Astuce: tu n''as besoin que d''un seul bloc supplémentaire,
        mais apprends comment nous avons fait ici pour pouvoir le faire toi-même la
        prochaine fois.'
      4-5 Maze Conditionals 4_instruction: OK, cette fois c'est comme pour la dernière
        énigme, mais tu dois te rappeler comment tu as utilisé les blocs "si" et "répéter"
        ensemble.
      4-5 Maze Conditionals 5_instruction: Moi vouloir tournesol! Utilise un bloc
        "si" pour m'y amener avec le plus petit nombre de blocs possible.
      4-5 Maze Conditionals 6_instruction: Moi vouloir tournesol! Utilise un bloc
        "si" pour m'y amener avec le plus petit nombre de blocs possible.
      4-5 Maze Conditionals 7_instruction: OK, refais-le encore une fois pour t'exercer
        - ce n'est pas très différent, mais attention aux Gobeurs!
      4-5 Maze Conditionals 8_instruction: Le bloc "Si-sinon" vérifie une condition
        et puis fait une chose OU une autre. Pour m'amener au tournesol essaie d'utiliser
        ce nouveau bloc.
      4-5 Maze Conditionals 9_instruction: Encore un exercice avec le bloc "si-sinon",
        peux-tu y arriver du premier coup?
      4-5 Maze Conditionals Assessment 1_instruction: Utilise un bloc "répéter jusqu'à"
        et un bloc "si-sinon" pour m'amener au tournesol avec le plus petit nombre
        de blocs possible.
      4-5 Nested Loops 1_instruction: 'Complète le code pour dessiner ces triangles.
        Le premier a été fait pour toi. Astuce: 3 triangles en une rotation de 360
        degrés.'
      4-5 Nested Loops 10_instruction: Dessine la dernière rangée d'étoile sur ce
        drapeau en arrangeant en boucle les blocs fournis. Les étoiles sont espacées
        de 50 pixels, mais rappelle-toi que les étoiles elles-mêmes font 30 pixels
        de large.
      4-5 Nested Loops 11_instruction: Peux-tu dessiner les 10 carrés de ce trottoir
        en utilisant une boucle imbriquée? Chaque carré fait 30 pixels de côté.
      4-5 Nested Loops 12_instruction: Peux-tu dessiner ces 36 triangles en utilisant
        une boucle imbriquée?
      4-5 Nested Loops 2_instruction: 'Maintenant, insère cette boucle dans une autre
        boucle pour dessiner 10 triangles. On appelle cela une boucle imbriquée. Astuce:
        les 10 triangles forment une rotation de 360 degrés.  '
      4-5 Nested Loops 3_instruction: "Crée un soleil en insérant le code fourni dans
        une autre boucle. On appelle cela une boucle imbriquée.\r\n"
      4-5 Nested Loops 5_instruction: Insère le code fourni dans une boucle pour créer
        un moulin à vent.
      4-5 Nested Loops 6_instruction: Peux-tu dessiner un hexagone en insérant le
        code du triangle dans une boucle?
      4-5 Nested Loops 7_instruction: 'Répète ce dessin 10 fois. De combien dois-tu
        tourner à chaque fois que la boucle est effectuée? (Astuce: combien fait 360
        divisé par 10?)'
      4-5 Nested Loops 8_instruction: 'Répète ce dessin 6 fois. De combien dois-tu
        tourner à chaque fois que la boucle est effectuée? (Astuce: combien fait 360
        divisé par 6?)'
      4-5 Nested Loops 9_instruction: Dessinez les dents dans la bouche de l'alligator!
      4-5 Nested Loops Assessment 1_instruction: Utilise une boucle imbriquée pour
        compléter le dessin.
      4-5 While Loops 1_instruction: Déplace-moi vers le trou et remplis-le avec deux
        pelletées de terre, en utilisant le bloc "remplir".
      4-5 While Loops 2_instruction: Déplace-moi vers le tas de terre et enlève-le
        en 5 coups de pelle, en utilisant le bloc "supprimer".
      4-5 While Loops 3_instruction: 'Déplace-moi vers le tas et enlève-le entièrement,
        ensuite déplace-moi vers le trou et remplis-le entièrement. Astuce: utilise
        le moins de blocs possible.'
      4-5 While Loops 4_instruction: 'Oh, j''ai trouvé un trou vraiment très profond!
        Je ne sais pas combien de pelletées de terre sont nécessaires à le remplir.
        Peux-tu écrire un programme qui remplit le trou jusqu''à ce qu''il soit à
        la hauteur du sol? Astuce: essaie d''utiliser la boucle "tant que" cette fois-ci.'
      4-5 While Loops 5_instruction: Oh, maintenant il y a deux trous profonds! Peux-tu
        écrire un programme qui les remplisse tout deux jusqu'à la hauteur du sol?
      4-5 While Loops 6_instruction: Oh, en voilà un gros tas de terre! Peux-tu écrire
        un programme qui enlève toute la terre jusqu'au niveau du sol?
      4-5 While Loops 7_instruction: Oh, maintenant il y a trois tas de terre! Peux-tu
        écrire un programme qui enlève chacun d'eux jusqu'au niveau du sol?
      4-5 While Loops 8_instruction: ' Voilà un trou vraiment profond et un gros tas
        de terre. Combien de pelletées de terre doivent être déplacées pour égaliser
        le sol? Astuce: utilise la boucle "tant que" pour les deux.'
      4-5 While Loops Assessment 1_instruction: Voilà beaucoup de trous et de tas.
        Aide-moi à déplacer la terre pour rendre le sol plat.
      Artist - Nested Loops 1_instruction: |
        Complete the code to draw these triangles.  The
        first one is done for you.  Hint:  3 triangles in a 360 degree rotation.
      Artist - Nested Loops 10_instruction: |
        Draw the last row of stars on this flag
        by looping the provided blocks. The stars are 50 pixels apart, but remember
        that the stars themselves are 30 pixels wide.
      Artist - Nested Loops 11_instruction: |
        Can you draw these 10 squares of this
        sidewalk using a nested loop? Each square is 30 pixels.
      Artist - Nested Loops 12_instruction: |
        Can you draw these 36 triangles using
        a nested loop?
      Artist - Nested Loops 2_instruction: "Now nest this loop inside another loop\nto
        draw 10 triangles.  This is called a nested loop.  Hint: All 10 triangles\ncomplete
        a 360 degree rotation.  \n"
      Artist - Nested Loops 3_instruction: "Create a sun by nesting the starter code\nin
        another loop. This is called a nested loop.\r\n"
      Artist - Nested Loops 5_instruction: Loop the given code to create a windmill.
      Artist - Nested Loops 6_instruction: |
        Can you draw a hexagon by looping the
        triangle code?
      Artist - Nested Loops 7_instruction: |
        Loop this design 10 times. How much do
        you have to turn each time you loop? (Hint: What is 360 divided by 10?)
      Artist - Nested Loops 8_instruction: |
        Loop this design 6 times. How much do
        you have to turn each time you loop? (Hint: What is 360 divided by 6?)
      Artist - Nested Loops 9_instruction: Draw the teeth in the alligator's mouth!
      Artist - Nested Loops Assessment 1_instruction: Utilise une boucle imbriquée
        pour compléter le dessin.
      Big Game Animation 1 (copy 1)_instruction: |
        Now that you've learned to write
        simple linear functions, let's work on using them to add some movement to
        our game. Click play to see what your game can currently do (not much!), update
        any variables you like, and then click finish to move on.
      Big Game Animation 1_instruction: |
        Now that you've learned to write simple
        linear functions, let's work on using them to add some movement to our game.
        Click run to see what your game can currently do (not much!), update any variables
        you like, and then click finish to move on.
      Big Game Animation 2 (copy 1)_instruction: |
        The function 'update-target'
        function takes the target's current x value, and returns an updated value.
        Complete the 'update-target' function so that it adds to the x value each
        time it is called. The more you add to x, the faster the target will go.
      Big Game Animation 2_instruction: |
        The 'update-target' function takes the
        target's current x value, and returns an updated value. Complete the 'update-target'
        function so that it adds to the x value each time it is called. The more you
        add to x, the faster the target will go.
      Big Game Animation 3_instruction: |
        The 'update-danger' function should work
        just like 'update-target', except that the danger should move from the right
        side over towards the left. Complete the 'update-danger' function to make
        the danger fly across the screen.
      Big Game Animation 4_instruction: |
        At this point your game your danger should
        run across the screen from right to left, and your target should run across
        from left to right. They don't ever come back on screen once they've left,
        but we'll take care of that later. Take a minute to make sure your game is
        working like you want it to, and then click finish to move on.
      Big Game Booleans 1_instruction: |
        When you last worked on your game we got
        our target and danger sprites to fly across the screen, but they never come
        back. Click run to see how your game is currently working, and then click
        finish and we'll work on making those sprites reappear on screen after they've
        left.
      Big Game Booleans 2_instruction: |
        Now that your onscreen? function is checking
        safe-left? and safe-right? we can complete those functions. Go to the "Functions"
        section of the toolbox and complete the safe-left? function so that it returns
        true if the sprite's x coordinate is greater than -50. If you're successful
        you should see the Danger go off the left side and then return on right side.
      Big Game Booleans 3_instruction: |
        Now that you've got safe-left?, let's fill
        in safe-right? - it should take in a sprite's x coordinate and return true
        if that coordinate is less than 450. Once your safe-right? is complete you
        should see the Target go off the right side of the screen and return on the
        left.
      Big Game Booleans 4_instruction: |
        We've provided a couple of empty functions
        for safe-left? and safe-right? The first thing you need to do is complete
        the onscreen? function so that it checks whether both safe-left? and safe-right?
        are true. TIP - even after you add safe-left? and safe-right? your sprites
        won't return to the screen - why do you think that is?
      Big Game Booleans 5_instruction: |
        At this point your danger should run across
        the screen from right to left, your target should run across from left to
        right, and they should both return to the opposite side, repeatedly. Take
        a minute to make sure your game is working like you want it to, and then click
        Finish to move on.
      Big Game Collision 1 (copy 1)_instruction: |
        When you last worked on your game
        we got our target and danger sprites to fly across the screen, but they never
        come back. Click run to see how your game is currently working, and then click
        finish and we'll work on making those sprites reappear on screen after they've
        left.
      Big Game Collision 1_instruction: |
        At this point you've programmed a video
        game with a moving target and danger, both of which return to the screen once
        they've left, and a player that responds to keyboard input. Click run to
        see how your game is currently working, and then we'll dig into the final
        missing piece - collision detection!
      Big Game Collision 2_instruction: |
        To move the player up and down, we'll need
        to use a conditional block to figure out which key is pressed and respond
        accordingly. Computers read keypresses as numeric key codes - the up arrow
        is 38 and the down arrow is 40. You can lookup other key codes in your student
        workbook. Edit the 'update-player' function so that if moves the player
        up when the up arrow is pressed, or down when the down arrow is pressed.
      Big Game Collision 3_instruction: |
        Let's fix this distance function so our
        collision detection works properly. Use the Distance Formula, so the distance
        function returns the distance between the player's center coordinates (px,
        py) and another sprite's center coordinates (cx, cy). We've provided a working
        line-length function to help you out.
      Big Game Collision 4_instruction: |
        The 'distance' function returns the distance
        between two sprites. Complete the 'collide?' function so that it returns
        true if the distance between two points is less than 100 pixels apart. If
        you're successful, your sprites will instantly collide - why do you think
        that is?
      Big Game Complete (copy 1)_instruction: |
        A demo of the completed CS in Algebra
        Big Game project
      Big Game Complete_instruction: |
        A demo of the completed CS in Algebra Big Game
        project
      Big Game Final_instruction: |
        You made it! At this point your game should be
        fully functioning, take some time to enjoy your new game and make any final
        tweaks to it. When you're happy with the final product, click Finish and
        you'll have an opportunity to share a link to your game. Good work!
      Big Game Player 1_instruction: |
        We're getting really close to a finished game!
        Last time you worked on your game, you used booleans to make your Target and
        Danger return to the screen once they've left. Click Run to see how your
        game looks right now, and then we'll get to making your Player move up and
        down.
      Big Game Player 2_instruction: |
        To move the player up and down, we'll need
        to use a conditional block to figure out which key is pressed and respond
        accordingly. Computers read keypresses as numeric key codes - the up arrow
        is 38 and the down arrow is 40. You can lookup other key codes in your student
        workbook. Edit the 'update-player' function so the player moves up when
        the up arrow is pressed, and moves down when the down arrow is pressed.
      Big Game Testing_instruction: |
        A demo of the completed CS in Algebra Big Game
        project
      Big Game Vars 1 (copy 1)_instruction: |
        Let's get started on your Big Game!
        Here you'll see a whole bunch of placeholder code that you'll eventually
        replace with your own, but for now we're only going to worry about defining
        variables. Click "Run" to see what the game looks like with the default
        values.
      Big Game Vars 1_instruction: |
        Let's get started on your Big Game! Here you'll
        see a whole bunch of placeholder code that you'll eventually replace with
        your own, but for now we're only going to worry about defining variables.
        Click "Run" to see what the game looks like with the default values.
      Big Game Vars 2 (copy 1)_instruction: |
        The first step to making this game your
        own is to give it a good Title. Click edit on the 'title' and 'subtitle'
        variables and change them to something new.
      Big Game Vars 2_instruction: |
        The first step to making this game your own is
        to give it a good Title. Click edit on the 'title' and 'subtitle' variables
        and change them to something new.
      Big Game Vars 3 (copy 1)_instruction: |
        Now let's set the background for your
        new game. Edit the 'bg' variable and select a new background Image from
        the dropdown.
      Big Game Vars 3_instruction: |
        Now let's set the background for your new game.
        Edit the 'bg' variable and select a new background Image from the dropdown.
      Big Game Vars 4 (copy 1)_instruction: |
        Awesome, now you can update the variables
        for your Player, Target, and Danger. Feel free to play with all of the variables
        at this point to make your game look like you'd like it to. Click 'finish'
        when you're done.
      Big Game Vars 4_instruction: |
        Awesome! Now you can update the variables for
        your Player, Target, and Danger. Feel free to play with all of the variables
        at this point to make your game look like you'd like it to. Click "Finish"
        when you're done.
      Building a Foundation Assessment_instruction: |
        Build a three level pyramid,
        there are no other directions, so just play with the pieces until you get
        it!
      C3-Farmer While Loops 1_instruction: |
        Move me to the hole and fill it with
        two shovelfuls of dirt, using the "fill" block.
      C3-Farmer While Loops 2_instruction: |
        Move me to the pile of dirt and remove
        it with 5 shovel scoops, using the 'remove' block.
      C3-Farmer While Loops 3_instruction: |
        Move me to the pile and remove all of
        it, then move to the hole and fill it completely.  Hint:  Use as few blocks
        as possible.
      C3-Farmer While Loops 4_instruction: |
        Wow, I found a really deep hole! I don't
        know how many shovelfuls of dirt it needs.  Can you write a program that fills
        it until the ground is even?  Hint:  Try using the while loop this time.
      C3-Farmer While Loops 5_instruction: |
        Wow, now there are two deep holes! Can
        you write a program that fills them both until the ground is even?
      C3-Farmer While Loops 6_instruction: |
        Wow, now there is a large pile of dirt!
        Can you write a program that removes all of it so the ground is even?
      C3-Farmer While Loops 7_instruction: |
        Wow, now there are three piles of dirt!
        Can you write a program that removes each of them until the ground is even?
      C3-Farmer While Loops 8_instruction: |2
         There is a really deep hole and a really
        large pile of dirt.  How many shovelfuls of dirt need to be moved around to
        make the ground flat?  Hint: Use the while loop for both.
      C3-Farmer While Loops Assessment 1_instruction: |
        There are a lot of holes and
        piles.  Help me to fill and remove them to make the ground flat.
      Calc Circles of Eval .1_instruction: |
        You’ll be writing a kind of code called
        Evaluation Blocks, because each block of code evaluates to a single value.
        Change the ??? in this code so that the block evaluates to 5.
      Calc Circles of Eval .2_instruction: |
        This Evaluation Block is a multiplication
        function which takes two numbers and returns the product of those numbers.
        Edit this block so that it multiplies 2 * 5
      Calc Circles of Eval .3_instruction: |
        Here's a function for Addition which
        takes two numbers and returns their sum. Use this Addition block to add 3
        + 6.
      Calc Circles of Eval .4_instruction: |
        Here we've nested an Addition Block
        inside a Multiplication Block. Complete this code so it multiplies 3 by (4
        + 1)
      Calc Circles of Eval 1 (copy 1)_instruction: |
        Convert this statement to <some_shape>
        of evaluation.
      Calc Circles of Eval 1_instruction: |
        Every mathematical operator (+, -, *,
        /, and so on) can be represented by an Evaluation Block in code. Change the
        Evaluation Block to match the expression.
      Calc Circles of Eval 2 (copy 1)_instruction: |
        Convert this statement to <some_shape>
        of evaluation.
      Calc Circles of Eval 2_instruction: |
        Use a multiplication block to complete
        this code.
      Calc Circles of Eval 3_instruction: |
        Complete the Evaluation Blocks to match
        this statement.
      Calc Circles of Eval 4_instruction: |
        This code is missing a couple of Evaluation
        Blocks - make sure you put everything in the right order.
      Calc Circles of Eval 5_instruction: |
        Complete the Evaluation Blocks to match
        this statement.
      Calc Circles of Eval 6_instruction: |
        Complete the Evaluation Blocks to match
        this expression.
      Calc Circles of Eval 7_instruction: |
        Complete the Evaluation Blocks to match
        this statement.
      Calc Circles of Eval 8_instruction: |
        Complete the Evaluation Blocks to match
        this expression.
      Calc Circles of Eval 9_instruction: |
        Complete the Evaluation Blocks to match
        this statement.
      Calc Circles of Eval Free Play_instruction: |
        Free Play: Try using the Evaluation
        Blocks to write some equations of your own. How does nesting the blocks in
        different ways impact their evaluation?
      Calc Define Funcs 1 (copy 1)_instruction: |
        Let's look at some more algebraic
        functions now. Here's a function translated from the simple algebraic function
        f(x) = x + 1. What would you expect this function to output if provided an
        input of 15?
      Calc Define Funcs 1_instruction: |
        Let's look at some more traditional algebraic
        functions now. Here's a function translated from the simple algebraic function
        f(x) = x + 1. What would you expect this function to output if provided an
        input of 15?
      Calc Define Funcs 2_instruction: |
        Write a function "f" that takes a parameter
        "x" and returns x - 10. Test your function using f(15).
      Calc Define Funcs 3_instruction: |
        We don't have to call our function 'f'
        every time; create a function called 'times-ten' that should take a parameter
        'x' and return x * 10. Once you've created the function, run times-ten(50).
      Calc Define Funcs 4_instruction: |
        Write a function called 'half' that takes
        a number 'x' and returns half that number. Once you've written the function,
        use it to calculate half(21)
      Calc Define Funcs 5 - multiply 1_instruction: |
        Oh no! We lost our multiply
        block! We'll have to create a function to multiply for us. To start off,
        write a function "f" that takes a parameter "x" and returns x*5. Test
        your function using f(3).
      Calc Design Recipe 1_instruction: |
        Let's use the Design Recipe to create a
        function called "cube" - this function should have a domain of Number, range
        of Number, and return the given number to the power of 3. Make sure to write
        two example cases! When you're done, use your new function to calculate 7
        cubed.
      Calc Design Recipe 2_instruction: "Your school is holding a bake sale, and\nyou
        need to track the cost of making each cookie, the money paid, and the\ntotal
        profit. Cookies cost $0.25 each to make, and sell for $1.50/cookie.\r\nWrite\nthe
        function `cost`, which takes in the number of cookies you intend to sell,\nand
        returns the cost of making those cookies."
      Calc Design Recipe 3_instruction: |
        Write the function `sales` which takes in
        the number of cookies sold, and produces the amount of money customers spent
        to buy those cookies (each cookie is sold at $1.50).
      Calc Design Recipe 4_instruction: |
        Using the two functions we just wrote, write
        the function `profit`, which takes in the number of cookies you sold, and
        gives you back the total profit you make from selling your cookies, accounting
        for the cost of baking them.
      Calc Free Play_instruction: |
        Free Play: Write functions and algorithms of your
        own design!
      Calc Rocket 1 (copy 1)_instruction: "In the last puzzle you wrote a contract\nfor
        the function \"rocket-height\" that states it has a range of Number, domain\nof
        Number, and should return the height of the rocket traveling at 15 m/s\nafter
        a given number of seconds. Let's write an example case now for the\nheight
        of the rocket at 3 seconds.\r\n\r\n\r\n\r\n  \r\n\r\n"
      Calc Rocket 1_instruction: "In the last puzzle you wrote a contract for the\nfunction
        \"rocket-height\" that states it has a range of Number, domain of\nNumber,
        and should return the height of the rocket traveling at 15 m/s after\na given
        number of seconds. Let's write an example case now for the height\nof the
        rocket at 3 seconds.\r\n\r\n\r\n\r\n\r\n  \r\n\r\n"
      Calc Rocket 2_instruction: |
        Great, let's do one more example before writing
        the function - what should the rocket height be after 30 seconds?
      Calc Vars 1.1_instruction: |
        Here we've set the "age" variable to 17 years.
        Can you write an expression that calculates "age" in days?
      Calc Vars 1_instruction: |
        Variables allow us to name values so that we can
        easily refer to them repeatedly throughout our programs. Here's a variable
        called "age". Set its value to your age and click run.
      Calc Vars 2 (copy 1)_instruction: |
        Here we've set the "age" variable to
        17 - can you write an expression that calculates "age" in months?
      Calc Vars 2.1_instruction: |
        Here's a new variable called "age-in-months"
        - use the variable "age" to set "age-in-months"
      Calc Vars 2_instruction: |
        Can you write an expression that calculates "age"
        in months?
      Calc Vars 3 (copy 1)_instruction: |
        Can you add to this code so that it calculates
        how many hours there are in "age" years?
      Calc Vars 3_instruction: |
        Can you add to this code so that it uses the "age"
        variable to calculate age in hours?
      Calc Vars 4_instruction: |
        We can also set variables by using other variables.
        Let's say you have a brother who is two years younger than you - can you
        set a new variable "brother-age" using your "age" variable?
      Code Studio Puzzle Challenge 1 - Artist_instruction: "Draw the line. It is\n200
        pixels long. \n"
      Code Studio Puzzle Challenge 1 Artist1_instruction: "Draw the line. It is 200\npixels
        long. \n"
      Code Studio Puzzle Challenge 10 - Bee (copy 1)_instruction: |
        Move the Bee to
        the flower and get all of the nectar.
      Code Studio Puzzle Challenge 10 - Bee_instruction: |
        Move the Bee to the flower
        and get all of the nectar.
      Code Studio Puzzle Challenge 10b - Bee_instruction: |
        Move the Bee to the flowers
        and get all of the nectar at each.
      Code Studio Puzzle Challenge 11 - Artist_instruction: |
        Draw this line by using
        the variable "length". Each line segment is 75 pixels long.
      Code Studio Puzzle Challenge 11b - Artist_instruction: |
        Draw a square by using
        the variable length provided.
      Code Studio Puzzle Challenge 12 - Artist_instruction: |
        The code provided draws
        one triangle. Add to it to draw triangles in a hexagon pattern.
      Code Studio Puzzle Challenge 12a - Artist_instruction: |
        The code provided draws
        one triangle. Add to it to draw triangles in a hexagon pattern.
      Code Studio Puzzle Challenge 13 - Artist_instruction: "This is just like a\n\"for\"
        loop. Complete the code to draw six lines that grow from 50, 60, 70,\n80,
        90, to 100 pixels long. \n"
      Code Studio Puzzle Challenge 14 - Artist_instruction: "This is just like a\n\"for\"
        loop. Complete the loop to draw 4 squares that grow from 80, 100,\n120, to
        140 pixels. \n"
      Code Studio Puzzle Challenge 2 - Artist_instruction: |
        Now add a turn and another
        line. The lines are 200 pixels long.
      Code Studio Puzzle Challenge 3 - Artist_instruction: |
        Draw the square. Each
        side is 100 pixels long.
      Code Studio Puzzle Challenge 4 - Artist_instruction: |
        Draw the octagon. Each
        side is 100 pixels long.
      Code Studio Puzzle Challenge 5 - Bee (copy 1)_instruction: |
        Move the Bee to
        the flower and get the nectar.
      Code Studio Puzzle Challenge 5 - Bee_instruction: |
        Flowers contain a specific
        amount of nectar. Move the Bee to the flower and collect nectar with the get
        nectar block.
      Code Studio Puzzle Challenge 6 - Bee_instruction: Les nids d'abeille peuvent
        contenir une certaine quantité de miel. Prends du nectar sur la fleur et fabrique
        du miel.
      Code Studio Puzzle Challenge 7 - Bee_instruction: Déplace l'abeille vers la
        fleur, et prends le nectar.
      Code Studio Puzzle Challenge 8 - Bee_instruction: |
        The cloud could be hiding
        a flower or a honeycomb. Only get nectar from flowers. Only make honey at
        honeycombs.
      Code Studio Puzzle Challenge 9 - Bee_instruction: |
        The cloud could be hiding
        a flower or a honeycomb. Only get nectar from flowers. Only make honey at
        honeycombs.
      Code Studio Puzzle Challenge Artist Screencast (copy 1)_instruction: "Draw\nthe
        line. Each segment is 100 pixels long. \n"
      Code Studio Puzzle Challenge Artist Screencast 2_instruction: "Complete the\ncode
        to draw the line. Each segment is 100 pixels long. \n"
      Code Studio Puzzle Challenge Artist Screencast_instruction: "Draw the line.\nEach
        segment is 100 pixels long. \n"
      Code Studio Puzzle Challenge Bee Screencast_instruction: |
        Move the Bee to the
        flowers and get all of the nectar.
      Code Studio Puzzle Challenge Square - Artist_instruction: |
        Draw a square by
        using the variable length provided.
      Code Studio Puzzle Challenge Var - Artist_instruction: |
        Draw a line by using
        a variable "length" set to 180.
      course 1 artist 1 level 10_instruction: |
        Draw the dashed line by using both
        the jump and draw blocks
      course 1 artist 1 level 9_instruction: Draw this using three lines
      Course 2 Bee Loops 1_instruction: 'Bonjour! Je suis une abeille. Peux-tu m''aider
        à collecter le nectar de ces fleurs ? '
      Course 2 Bee Loops 13_instruction: |
        Assessment: Use the repeat block to collect
        all of the nectar.
      Course 2 Bee Loops 2_instruction: |
        Can you do the same task more easily with
        a loop?
      Course 2 Bee Loops 3_instruction: |
        Now use the new repeat block to collect
        all of the nectar and make all of the honey.
      Course 2 Bee Loops 3__instruction: |
        Can you use a loop to collect all that
        nectar?
      Course 2 Bee Loops 4_instruction: |
        What happens if you loop this sequence 3
        times? Don't forget to make the honey at the end!
      Course 2 Maze Loops 1_instruction: Peux-tu m'amener au cochon en utilisant 5
        blocs?
      Course 4 2_instruction: L'abeille veut du nectar dès maintenant. N'oublie pas,
        tous les objets ne sont pas des fleurs, donc vérifie pour ne recueillir le
        nectar que sur les fleurs.
      Course 4 Artist 1_instruction: 'Aide-moi à finir de dessiner ma boîte. (Chaque
        ligne fait 300 pixels de long) '
      Course 4 Artist 10_instruction: 'C''est l''heure de jouer! Amuse-toi à dessiner
        ce que tu souhaites. '
      Course 4 Artist 2_instruction: Vous pouvez boucler ce code-ci pour dessiner
        le carré en gris?
      Course 4 Artist 3_instruction: Bon, essayez de comprendre ce qui arrivera si
        vous faites fonctionner ce code (ou appuyez sur "run" pour essayer). Ensuite,
        répétez-le suffisamment de fois pour terminer le dessin.
      Course 4 Artist 4_instruction: 'Il y a combien de degrés dans un cercle? Remplissez
        le bloc "repeat" (répéter) avec ce numéro pour créer un cercle de couleurs. '
      Course 4 Artist 5_instruction: Dessinez l'autre moitié de cette conception pour
        qu'il soit symétrique. Les triangles sont équilatéraux sont de 50 pixels.
      Course 4 Artist 6_instruction: |
        Complétez le code pour dessiner ces triangles-là.
        Indice: 3 triangles dans une rotation de 360 degrés.
      Course 4 Artist 7_instruction: 'Ensuite emboîtez cette boucle dans une autre
        boucle pour dessiner 10 triangles. Cela s''appelle une boucle emboîtée. Indice:
        les 10 triangles font en totale une rotation de 360 degrés.'
      Course 4 Artist 8_instruction: Dessinez ce soleil en faisant une boucle de tout
        ce bloc de code 12 fois.
      Course 4 Artist 9_instruction: 'Faites une boucle de 10 fois avec ce modèle
        et veillez à tourner entre chaque forme tracée. Voici un indice pour combien
        vous devez tourner : ce qui est de 360 divisé par 10 ?'
      Course 4 Artist Binary 1_instruction: Voici une fonction qui prend en paramètre
        une chaîne binaire avec des '1' et des '0' et demande à l'artiste d'avancer
        de gauche à droite, et de haut en bas, en remplissant la case quand il voit
        un '1' et en sautant la case quand il voit un '0'. Exécutez ce code pour voir
        comment l'artiste utilise le binaire pour dessiner ce modèle.
      Course 4 Artist Binary 2_instruction: Laquelle de ces chaînes binaires pourriez-vous
        utilisez 8 fois en boucle pour dessiner cette image ?
      Course 4 Artist Binary 3_instruction: Pouvez-vous dessiner ce modèle en bouclant
        sur une chaîne binaire à trois chiffres ?
      Course 4 Artist Binary 4_instruction: Chaque séquence binaire représente une
        ligne de cette image. Peux tu les remettre dans l'ordre pour dessiner un visage
        souriant au lieu d'un visage fâché ?
      Course 4 Artist Binary 5_instruction: Quelle chaîne binaire de 6 chiffres répétée
        11 fois va dessiner cette image ?
      Course 4 Artist Binary 6_instruction: Quelle est la chaîne binaire la plus courte
        qui, répétée plusieurs fois, va dessiner cette image ?
      Course 4 Artist Binary 7_instruction: Finissez ce dessin.
      Course 4 Artist Binary Free Play 2_instruction: 'Jeu libre : Pour dessiner,
        voilà une canevas de haute résolution, 16 bits par 16 bits !'
      Course 4 Artist Binary Free Play_instruction: 'Jeu libre : dessine ce que tu
        veux avec les binaires !'
      Course 4 Artist For  Functions 10_instruction: Plus difficile, peux-tu dessiner
        une étoile en utilisant la fonction "Tracer une ligne de carrés" ? Bonne chance
        !
      Course 4 Artist For  Functions 11_instruction: Plus difficile, peux-tu dessiner
        une étoile en utilisant la fonction "Tracer une ligne de carrés" ? Bonne chance
        !
      Course 4 Artist For Loops 1_instruction: 'Dessine ce triangle qui a des côtés
        de 50 pixels. Astuce : Utilise le bloc "Répéter".'
      Course 4 Artist For Loops 10_instruction: Jeu Libre ! Amuse toi à dessiner ce
        que tu veux avec les blocs que tu as appris à utiliser.
      Course 4 Artist For Loops 11_instruction: 'Tu te souviens quand nous avons utilisé
        une variable pour contrôler le nombre de côtés dans une forme ? Ce modèle
        commence par un triangle et rajoute un côté à la fois jusqu''à dessiner un
        décagone (10 côtés). Chaque côté doit mesurer 100 pixels de long. Astuce :
        360 divisé par le nombre de côtés de la forme est le nombre de degré que tu
        dois utiliser pour tourner à chaque fois.'
      Course 4 Artist For Loops 12_instruction: 'Ça avait l''air assez cool, mais
        maintenant je voudrais dessiner chaque forme à côté de la précédente. Cette
        fois chaque côté est de 20 pixels. Utilise un bloc de saut pour sauter en
        avant de 40 pixels après chaque forme. '
      Course 4 Artist For Loops 13_instruction: Hmmm, ces formes grossissent à chaque
        fois ! N'as pas déjà résolu ce problème avec des variables ? Comment pouvons-nous
        utiliser la variable de compteur pour rendre les parties plus petits quand
        nous en avons de plus en plus ? Au lieu d'avancer sur une longueur fixe, essaie
        de te déplacer de (100 / compteur) pixels vers l'avant.
      Course 4 Artist For Loops 14 _instruction: Si tu tournes un peu plus ou un peu
        moins que la normale pour dessiner une forme, tu vas créer un effet plus structuré.
        Essaie de tourner de 89 degrés pour créer cette spirale carrée tordue.
      Course 4 Artist For Loops 14_instruction: Si tu tournes un peu plus ou un peu
        moins que la normale pour dessiner une forme, tu vas créer un effet plus structuré.
        Essaie de tourner de 89 degrés pour créer cette spirale carrée tordue.
      Course 4 Artist For Loops 15_instruction: 'Jeu libre : Essaie de dessiner en
        utilisant les boucles. Nous avons ajouté quelques variables génériques à utiliser
        aussi.'
      Course 4 Artist For Loops 2_instruction: 'J''ai programmé le dessin d''un triangle
        à l''intérieur d''une boucle qui compte de 10 en 10, à partir de 50 jusqu''à
        100. Regarde comment j''ai fait et ensuite appuie sur "Exécuter" quand tu
        es prêt à voir mon programme en action. '
      Course 4 Artist For Loops 3_instruction: Le triangle le plus petit fait 20 pixels
        de côté, le plus grand 200 pixels. Chaque triangle est 20 pixels plus grand
        que le précédent. Met à jour la boucle pour dessiner ces triangles.
      Course 4 Artist For Loops 4_instruction: |
        Utilise une boucle pour dessiner ces carrés.
        Le premier fait 50 pixels de côté, le plus grand fait 300 pixels de côté et chaque carré est 25 pixels plus grand que le précédent. Je t'ai donné pratiquement toute la programmation dont tu auras besoin sauf pour un bloc. Lequel ?
      Course 4 Artist For Loops 5_instruction: 'Bon travail avec le dernier puzzle
        ! Utilisons ce bloc de variable "compteur" encore pour dessiner ce dessin
        cool. '
      Course 4 Artist For Loops 6_instruction: Jeu libre! Essaie d'utiliser une boucle
        pour dessiner une suite de formes grandissantes de ton choix.
      Course 4 Artist For Loops 7_instruction: Que se passe-il si tu enlèves le "Répète
        3 fois" de cette algorithme, en gardant les blocs "bouge" et "tourne" dans
        la boucle ? Dans ce triangle en spirale, chaque côté a 20 pixels de plus que
        le précédent.
      Course 4 Artist For Loops 8_instruction: La plus petite ligne des spirales carrées
        est de 10, la plus grande de 200 et chaque ligne est 10 pixels plus grande
        que la précédente. Peux-tu compléter les blocs manquants pour terminer cette
        magnifique image ?
      Course 4 Artist For Loops 9_instruction: Sais-tu dessiner une spirale ? Avance
        d'1 pixel à la fois, de 1 à 75.
      Course 4 Artist Functions 1_instruction: Peux-tu dessiner un carré qui a 100
        pixels de côté en utilisant une boucle ?
      Course 4 Artist Functions 10_instruction: De quel bloc as-tu besoin d'ajouter
        pour que le triangle soit sur le dessus du carré ?
      Course 4 Artist Functions 11_instruction: Regarde ce code qui dessine un cube
        - peux-tu le déplacer dans une fonction appelée "Dessine un cube"
      Course 4 Artist Functions 12_instruction: Bouclez la fonction de carré pour
        dessiner une ligne
      Course 4 Artist Functions 13_instruction: Vérifiez dehors nous avons une nouvelle
        fonction appelée « tracer une ligne de carrés ». N'hésitez pas à jeter un
        oeil à l'intérieur du bloc de fonction pour voir comment nous avons le construit.
        Cliquez sur « Exécuter » lorsque vous êtes prêt pour le prochain casse-tête.
      Course 4 Artist Functions 14_instruction: Vous faites un bon travail ! Allons
        y utiliser votre nouvelle fonction de « Tracer une ligne de carrés » pour
        dessiner une forme carrée. N'oubliez pas que chaque carré est de 40 pixels
        de longueur.
      Course 4 Artist Functions 15_instruction: 'Allons y l''intensifier un peu, pouvez-vous
        dessiner une forme d''étoile à l''aide de la fonction de « tracer une ligne
        de carrés » ? Bonne chance! Remarque : vous devrez peut-être tourner 144 degrés'
      Course 4 Artist Functions 2_instruction: 'Peux-tu dessiner 3 carrés avec 20
        pixels de distance entre chaque carré ? Astuce : chaque carré a une taille
        de 100 pixels'
      Course 4 Artist Functions 3_instruction: "En utilisant le bloc fonction \"dessiner
        un carré\" , peux-tu faire ce dessin ? Les carrés sont espacés de 120 pixels.
        \r\n"
      Course 4 Artist Functions 4_instruction: 'Es-tu prêt à créer ton propre bloc
        ? Clique sur le bloc "Fonctions" dans la boîte à outils, appelle la "dessiner
        un triangle" et crée ton triangle comme tu l''as fait avant, avec les blocs
        "action" et "boucle". Clique ensuite sur "enregitrer et fermer" dans le coin
        droit. Astuce : cree un triangle qui est long de 100 pixels. Bonne chance
        !'
      Course 4 Artist Functions 5 OLD_instruction: Essayons d'utiliser nos deux fonctions
        pour dessiner une maison -que devons-nous corriger pour dessiner correctement
        la maison ?
      Course 4 Artist Functions 5_instruction: "En utilisant le bloc fonction \"dessiner
        un carré\" , peux-tu faire ce dessin ? Les carrés sont espacés de 120 pixels.
        \r\n"
      Course 4 Artist Functions 6_instruction: De quel bloc as-tu besoin d'ajouter
        pour que le triangle soit sur le dessus du carré ?
      Course 4 Artist Functions 7_instruction: |
        Can you draw a line of squares using
        a Square function? Each square is 40 pixel's in length.
      Course 4 Artist Functions 8_instruction: "Are you getting the hang of how to\nuse
        function blocks? Let's modify this square so that it is 200 pixels in\nsize.
        Hint: click on \"edit\" to change the size of the \"draw a square\"\nfunction
        editor. Remember to click on \"save and close\" to get out of the\nfunction
        editor. \n"
      Course 4 Artist Functions 9_instruction: |
        We have given you most of the code
        to create a function. However there seems to be something missing. Can you
        make this function block complete?
      Course 4 Artist Params 1_instruction: |
        Let's edit a function that draws a
        square with 50 pixel sides
      Course 4 Artist Params 10_instruction: "You can call functions from inside\nother
        functions! Using your \"shape\" function as a base, create 3 house shapes\neach
        20 pixels larger than the last starting at 50 pixels in length. Using\na counter
        loop might be helpful. \n"
      Course 4 Artist Params 11_instruction: |
        How about a function called "pinwheel"
        that takes three parameters - "sides," "length" and "repeat." You can
        calculate how much to turn after each shape using the same math you used to
        figure out the turns for a shape of "sides". Can you recreate this picture?
        Here's a tip each shape is 100 pixel's in length.
      Course 4 Artist Params 12_instruction: |
        Use your "pinwheel" function to draw
        each of these shapes. The side length for each image is 50.
      Course 4 Artist Params 13_instruction: |
        Freeplay: Here are the functions you've
        written, and some more for you to play with. Draw something awesome!
      Course 4 Artist Params 2_instruction: |
        That triangle function would be a whole
        lot more useful if it could draw triangles of different sizes. I've added
        a parameter for line length, but it doesn't do anything yet. Can you update
        the function so it uses the "length" parameter when it draws each side?
        The triangle sizes are 150 pixels, 75 pixels and 25 pixels.
      Course 4 Artist Params 3_instruction: 'Génial, peux-tu dessiner chacun de ces
        triangles avec cette nouvelle fonction ? Le premier est 25 pixels de long,
        la seconde est de 50, et le troisième est de 75. '
      Course 4 Artist Params 4_instruction: |
        Can you add a new function called square?
        It should also take a length parameter, just like the triangle. This time
        draw 3 squares 25, 50 and 75 pixels in length,100 pixels apart.
      Course 4 Artist Params 5_instruction: |
        Use both of your new functions to draw
        this picture. To make this easier you use a loop with a "counter" parameter.
      Course 4 Artist Params 6_instruction: "Let's edit this \"draw a shape\" function.\nIt
        already has a \"length\" parameter. Now, let's edit the function to also\nadd
        a \"sides\" parameter. Remember the angle to turn for a given shape is\n360
        divided by the sides it has. Hint: lengths for each shape are the triangle\nis
        100 pixels, the hexagon is 25 pixels and the square is 50 pixels. \n"
      Course 4 Artist Params 7_instruction: "Can you draw these shapes by filling\nin
        the \"???\" The square and triangle are 100 pixels in size while the hexagon\nis
        75 pixels in size. \n"
      Course 4 Artist Params 8_instruction: |
        Can you figure out how to draw this
        shape? Here's a hint create a new function with 6 sides called a hexagon.
      Course 4 Artist Params 9_instruction: |
        Do you remember when we used the counter
        loop but removed a loop within? Let's have some fun and use the "draw a
        shape" function with "sides" and "length" parameters. Can you re create
        these shapes? The square counter should be 5/100/5, the triangle counter should
        be 10/100/10 and the hexagon is 2/100/2.
      Course 4 Artist Var 9_instruction: |
        Here's the algorithm to draw a triangle,
        modify it so it uses the "sides" variable instead. Replace the number 3
        with the "sides" variable. Hint: remember to use the "set sides to" block.
      Course 4 Artist Vars 1_instruction: |
        Can you help me draw a triangle? It's
        100 pixels long on each side.
      Course 4 Artist Vars 10_instruction: |
        Here's an algorithm that draws a triangle
        out of smaller triangles. Can you modify it so that it uses the "sides"
        variable to draw each triangle? Look through the code, and every time you
        see the number 3, replace it with your "sides" variable. Remember to use
        the "set sides" block.
      Course 4 Artist Vars 11_instruction: |
        Here's the same algorithm that we came
        up with for the last puzzle - what should you set the "sides" variable to
        in order to draw this picture of squares?
      Course 4 Artist Vars 12_instruction: Maintenant affectons la variable « côtés
        » à la valeur 5. Plus nous ajoutons de côtés à cet algorithme, plus le motif
        global devient grand ! Nous allons ajouter une nouvelle variable appelée «
        longueur » et l'utiliser partout où tu utilises un « avancer ». Affecte la
        variable « longueur » à 75 pour cette forme.
      Course 4 Artist Vars 13_instruction: |
        The more sides a shape has, the shorter
        each side needs to be in order for the whole pattern to fit on the screen.
        Instead of manually setting the "length" variable, let's use the "sides"
        variable and a math block to set the "length." Choose the correct equation
        from the toolbox to set the "length" variable, and also update the "sides"
        variable.
      Course 4 Artist Vars 14_instruction: |
        Free Play: Check it out, now your algorithm
        is nested within one more loop. Experiment with changing the values of the
        your two variables to draw cool patterns.
      Course 4 Artist Vars 2_instruction: Au lieu de « avancer de 100 », le bloc «
        avancer » fait maintenant référence à la variable "longueur". Peux-tu affecter
        « longueur » à 150 pour dessiner ce nouveau triangle ?
      Course 4 Artist Vars 3_instruction: "Here's a loop that draws a square, but\nsomething's
        missing. Can you fix it so that it uses the variable \"length\"\nto figure
        out how long each side should be? \n"
      Course 4 Artist Vars 4_instruction: |
        Now I want to make a rectangle that is
        twice as tall as it is wide. We've got a variable called "width" that is
        set to 100. Can you use the math blocks to complete the code?
      Course 4 Artist Vars 5_instruction: |
        Use the variable "sides" to control
        how many times this loop gets run.
      Course 4 Artist Vars 6_instruction: |
        Hmmm, I tried changing the "sides" variable
        to 4 from the code in the last puzzle, but it's still drawing a triangle.
        Can you use the "sides" variable (along with a math block) to make sure
        that I turn the right amount too? Hint: 360 divided by the number of sides
        will give you the number of degrees to turn.
      Course 4 Artist Vars 7_instruction: |
        Can you modify the "sides" variable
        to help me draw this hexagon?
      Course 4 Artist Vars 8_instruction: "Free Play: Experiment with the number\nof
        sides this shape has. Can you change the algorithm so that the overall\nsize
        of the shape stays the same, no matter how many sides it has? Hint: You\nmight
        have to use your math blocks (360 divided by \"sides\" in two places\nthis
        time) \n"
      Course 4 Artist Vars 9_instruction: |
        Modify this algorithm so it uses the "sides"
        variable instead of a fixed number to draw a triangle. Replace the number
        3 with the "sides" variable, and use the "set sides to" block.
      Course 4 Bee 1_instruction: 'L''abeille ne peut pas dire si c''est une fleur
        ou un nid d''abeilles. Vérifie d''abord si c''est une fleur ou un nid d''abeilles,
        puis recueille le nectar si c''est une fleur. '
      Course 4 Bee 2_instruction: Vérifie chacun des objets pour voir si c'est une
        fleur - si c'est le cas, recueille le nectar.
      Course 4 Bee 3_instruction: |
        The unknown object is either a flower or a honeycomb.
        Use the if/else block to collect nectar if it is a flower, else make honey
        (because then it would be a honeycomb).
      Course 4 Bee 4_instruction: |
        This purple flower may have either 3, 2, or 1
        nectar. Here an if-else block is combined with another if-else block to create
        an if, else-if, else block. Complete the solution to collect the unknown amount
        of nectar.
      Course 4 Bee For Loops 1_instruction: |
        Use a loop to collect the nectar from
        each flower.
      Course 4 Bee For Loops 10_instruction: |
        If your loop is counting down, the
        increment is subtracted from your counter variable each loop. What should
        your increment be to collect 9, then 6, and then 3 nectar?
      Course 4 Bee For Loops 2_instruction: |
        Here's a new kind of loop, called the
        "for" loop. This particular for loop will count from 1 to 5 by 1, and run
        the contents of the loop each time it counts. Help the Bee get the nectar.
      Course 4 Bee For Loops 3_instruction: |
        You can solve this puzzle by using a
        for loop to count from 1 to 3 by 1. Now let's go get some nectar!
      Course 4 Bee For Loops 4_instruction: |
        Collect all of the nectar from these
        flowers. I wonder if there's an easier way to do this...
      Course 4 Bee For Loops 5_instruction: "Ah, the for loop makes this much easier!\nUsing
        the \"counter\" variable from the for loop to loop the \"get nectar\"\nblock
        the same number of times as the loop. Whew! That's a lot of loops.\nAll the
        code you need it there, take a look at how it is put together then\nclick
        on Run and see how it works. \n"
      Course 4 Bee For Loops 6_instruction: |
        You can also use a for loop to count
        down. Try gathering this nectar by counting down from 5 to 1 by 1.
      Course 4 Bee For Loops 7_instruction: |
        Use your for loop "counter" variable
        to control how far to move horizontally.
      Course 4 Bee For Loops 8_instruction: |
        Can you use the loop variable to control
        movement and nectar collection?
      Course 4 Bee For Loops 9_instruction: |
        The last number in your for loop is
        called the "increment,"  and each time the loop is run the counter variable
        changes by the increment. Try collecting these flowers using an increment
        of 2.
      Course 4 Bee Params 1_instruction: |
        Use the function "get 3 nectar" which
        turns, moves to collect the nectar, and then returns to the original location.
        Write a sequence to collect all of the nectar using "get 3 nectar."
      Course 4 Bee Params 2_instruction: |
        Modify the "get 3 nectar" function so
        it makes me turn right instead of left to the flowers.
      Course 4 Bee Params 3 (copy 1)_instruction: |
        Now there are flowers on both
        sides! Maybe you can use a parameter so that the same function works for flowers
        on either side. I've added a parameter called "direction" to the function.
        If the "direction" parameter equals 0 I should turn left, if it's 1 I should
        turn right.
      Course 4 Bee Params 3_instruction: |
        Now there are flowers on both sides! I've
        added a parameter called "direction" to the function. Use the "left" and
        "right" variables to control direction. Fill in the rest of the function
        definition and then click "Save and Close."
      Course 4 Bee Params 4 (copy 1)_instruction: |
        Try using your new function to
        collect all of the flowers. Remember, 0 = left and 1 = right.
      Course 4 Bee Params 4 backup_instruction: |
        Wouldn't it be nice if we could
        collect all of these nectars with the a single function? Try adding a new
        parameter to your function called "nectars" to control the amount of nectar
        to collect. You'll probably want to rename the function too!
      Course 4 Bee Params 4_instruction: |
        Try using your new function to collect
        all of the flowers. Remember to use the left and right variables.
      Course 4 Bee Params 5_instruction: |
        Let's start from scratch - can you create
        a new function called "get 5 nectar" with a direction parameter?
      Course 4 Bee Params 6 (copy 1)_instruction: |
        Try using your new function to
        collect all of this nectar.
      Course 4 Bee Params 6_instruction: |
        Wouldn't it be nice if we could collect
        all of these nectars with the a single function? Try adding a new parameter
        to your function called "nectars" to control the amount of nectar to collect.
        You'll probably want to rename the function too!
      Course 4 Bee Params 7 (copy 1)_instruction: |
        Try using your new function to
        collect all of this nectar.
      Course 4 Bee Params 7_instruction: |
        Try using your new function to collect
        all of this nectar.
      Course 4 Bee Params 8_instruction: |
        Oooh, now there's honey to deal with too!
        How could you update your function to either get nectar or make honey.
      Course 4 Binary 1_instruction: |
        Here's a function that takes a binary string
        of 1's and 0's and instructs the farmer to turn on the go from left to right,
        top to bottom, turning on the squares where the number has a zero. Run the
        code provided to see how the farmers uses binary to draw an image.
      Course 4 Binary 2_instruction: |
        What binary string could you loop 8 times to
        draw this image? Hint: the number "1" fills a hole.
      Course 4 Binary 3_instruction: |
        Can you draw this pattern by looping a single
        binary string?
      Course 4 Binary 5 (copy 1)_instruction: |
        Which binary string, repeated 10 times,
        will draw this image?
      Course 4 Binary 5_instruction: |
        Which binary string, repeated 10 times, will
        draw this image?
      Course 4 Binary 6 (copy 1)_instruction: |
        Which binary string, repeated 10 times,
        will draw this image?
      Course 4 Binary 6_instruction: |
        Which binary string, repeated 10 times, will
        draw this image?
      Course 4 Binary 7 (copy 1)_instruction: |
        You can complete the most of this
        image by looping a 5 bit binary number - then you'll need one more 4 bit
        number to get the bottom right-hand corner.
      Course 4 Binary 7_instruction: |
        Which binary string, repeated 10 times, will
        draw this image?
      Course 4 Binary 8_instruction: |
        You can complete the most of this image by
        looping a 5 bit binary number - then you'll need one more 4 bit number to
        get the bottom right-hand corner.
      Course 4 Maze 1_instruction: Get the angry bird to the pig!
      Course 4 Maze 2_instruction: Évitez la TNT!
      Course 4 Maze 3_instruction: 'Program the angry bird to get to the pig. '
      Course 4 Maze 4_instruction: Essaie d'utiliser un bloc de répétition pour utiliser
        moins de blocs...
      Course 4 Maze 5_instruction: Peux-tu résoudre cette énigme en utilisant le moins
        de blocs possible?
      Course 4 Maze 6_instruction: Peux-tu résoudre cette énigme en utilisant le moins
        de blocs possible?
      Course 4 Play Lab For Loops 2_instruction: |
        This time, let's try counting
        the odd numbers from 1 to 100.
      Course 4 Play Lab Params 1 (copy 1)_instruction: |
        Here's a function called
        "jump" that causes your main character to jump up 100 pixels. Use the jump
        function to collect all of the flags.
      Course 4 Play Lab Params 1_instruction: |
        Here's a function called "jump"
        that causes your main character to jump up 100 pixels. Use the jump function
        to collect all of the flags.
      Course 4 Play Lab Params 10_instruction: |
        We've added one last function for
        you to use. Program your game to call the "level_up" function if "player_points"
        > 10. Play the game, and make it past level 4 to move to the next puzzle.
      Course 4 Play Lab Params 2 (copy 1)_instruction: |
        Now we've got flags that
        are too high for our current jump! Let's add a parameter to our jump function
        called "height." The up arrow should jump 100 pixels, but the down arrow
        should jump 300 pixels. Watch out, you don't want to hit the <future barrier
        above lower flags>!
      Course 4 Play Lab Params 2_instruction: |
        Now we've got flags that are too
        high for our current jump! Let's add a parameter to our jump function called
        "height." The up arrow should jump 200 pixels, but the down arrow should
        jump 100 pixels. Click "edit" on the jump function and update it so that
        it uses the height parameter instead of just jumping 100 pixels.
      Course 4 Play Lab Params 3_instruction: "Let's add another parameter to the\njump
        function so that we can use it with other actors. Each actor is represented\nby
        a number, starting from one. Edit the \"jump\" function so that the definition\nincludes
        the \"actor\" parameter. \n"
      Course 4 Play Lab Params 4_instruction: |
        Here's a function called "patrol."
        Edit it to move the Cat up 400 pixels and then down 400 pixels.
      Course 4 Play Lab Params 5_instruction: |
        Fill in the "actor" parameter input
        so that we can call the "patrol" function for each of the actors. Remember,
        the actors correspond to numbers 1, 2, and 3.
      Course 4 Play Lab Params 6_instruction: |
        Add another parameter called "speed"
        to the "patrol" function. Use a "set speed" block with the new "speed"
        parameter.
      Course 4 Play Lab Params 7_instruction: |
        Use the arrow keys to control the
        Dog and collect all of the flags.
      Course 4 Play Lab Params 8_instruction: |
        Use a "when touching" block to send
        the Dog back to the top-left if the Dog touches any of the other actors.
      Course 4 Play Lab Params 9_instruction: "Here's one of the games we were working\non
        earlier. We've added a function called \"score_points\" that takes a parameter\n\"points.\"
        Edit the function so that the \"points\" parameter is added to\nthe \"player_points\"
        variable. Have the Dog score 10 points to move on to\nthe next puzzle. \n"
      Course 4 Play Lab Vars 1_instruction: |
        You don't have to write any code, just
        hit "run" to play the game! In this game, you're the Dog who is trying
        to collect more flags than the Cat. Use the down arrow to control the Dog.
        Press "Finish" when you're done playing.
      Course 4 Play Lab Vars 2_instruction: |
        That race wasn't very fair! Change
        the "dog_speed" variable to make sure you can collect more flags than the
        Cat. The first to collect 10 flags wins!
      Course 4 Play Lab Vars 3 (copy 1)_instruction: |
        Here's a new kind of game!
        Use the left and right arrows to move, and the up arrow to jump. See if you
        can collect all of the flags.
      Course 4 Play Lab Vars 3_instruction: |
        Here's a new kind of game! Use the
        left and right arrows to move, and the up arrow to jump. See if you can collect
        all of the flags.
      Course 4 Play Lab Vars 4_instruction: |
        Now we're using a variable called "height"
        to control how high the dog can jump. Update the "height" variable so that
        the dog can jump high enough to reach all the flags. Hint: the new flags are
        200 pixels high.
      Course 4 Play Lab Vars 5_instruction: "Let's build a game! First we'll need\na
        score. Use the \"set points to\" block to set the score to 10. \n"
      Course 4 Play Lab Vars 6 (copy 1)_instruction: |
        Cool, now we've got our score
        variable, but how are we going to make it useful? How about adding to your
        score variable each time you hit the enemy with a fireball? Use the "when
        actor 2 touches anything" event to trigger an update to your score when your
        fireballs hit the cat. You can increment the score by setting score = score
        + 1. Get your score up to 10 (going one at a time!) to pass the level.
      Course 4 Play Lab Vars 6_instruction: |
        In our game, how should we score points?
        Add 1 to your "points" variable each time the Dog hits the Cat with a fireball.
        Use the "when actor 2 touches anything" event to trigger an update to your
        score. You can increment your variable by setting "points = points + 1."
        Get your score up to 10 (going one at a time!) to pass the level.
      Course 4 Play Lab Vars 7 (copy 1)_instruction: |
        Nice, now let's make sure
        this game isn't too easy - any time you get hit by a fireball, you should
        lose a point. Let's also start with 10 points so it's not too hard. Let
        your score drop down from 10 to 0 to pass the level.
      Course 4 Play Lab Vars 7_instruction: |
        Nice, now let's make sure this game
        isn't too easy - any time the Dog (actor 1) gets hit by a fireball, you should
        lose a point. Start with 10 points so it's not too hard. Let your score drop
        down from 10 to 0 to pass the level.
      Course 4 Play Lab Vars 8 (copy 1)_instruction: |
        Alright, one last thing for
        this game - let's set it up so the player can win (or lose). Use a forever
        loop to check the value of score - if score is ever greater that 20, make
        the enemy vanish. If the score is every less than 0, make the player vanish.
        Click "Finish" when the game works like you'd like it to.
      Course 4 Play Lab Vars 8_instruction: |
        Let's set up this game so the Dog can
        win (or lose). Use a forever loop to check the value of score - if score is
        ever greater that 20, make the enemy (the Cat) vanish. If the score is ever
        less than 0, make the player (the Dog) vanish. Click "Finish" when the game
        works like you'd like it to.
      Course 4 Play Lab Vars 9_instruction: |
        Free Play time! Here are all of the
        variables we've played with so far, as well as a few more in case you want
        them. Make a game or story that uses these variables. Hint: scroll down to
        see all the commands in the work space.
      Course 4 Play Lab Vars_instruction: |
        Alright, one last thing for this game
        - let's set it up so the player can win (or lose). Use a forever loop to
        check the value of score - if score is ever greater that 20, make the emeny
        vanish. If the score is every less than 0, make the player vanish.
      Course 4 Play Labs For Loops 1_instruction: |
        Let's make the dog speak every
        number from 1 to 100. Use a for loop and the counter block to speak the counter
        variable each time the loop is run.
      Course 4 Play Labs For Loops 2_instruction: |
        This time, let's try counting
        the odd numbers from 1 to 100.
      Course 4 Play Labs For Loops 3_instruction: |
        If we count by larger numbers,
        we count even higher in the same amount of time. Try making the dog count
        from 10 up to 1000, by 10 at a time.
      Course 4 Play Labs For Loops 4 (copy 1)_instruction: |
        Changing the increment
        can be helpful, but we're still counting linearly (each number is the same
        distance from the last) What if I wanted to count exponentially? Without changing
        the settings in this for loop, can you count 1, 4, 9 , 16, 25... (counter
        squared)?
      Course 4 Play Labs For Loops 4_instruction: |
        Changing the increment can be
        helpful, but we're still counting linearly (each number is the same distance
        from the last) What if I wanted to count exponentially? Without changing the
        settings in this for loop, can you count 1, 4, 9 , 16, 25... (counter squared)?
      Course 4 Play Labs For Loops 5_instruction: |
        In the last stage we counted the
        square of each number. Try changing "counter ^ 2" to "counter ^ 3" to
        count the cube of each number (1, 8, 27, 64, 125, 216, 343….)
      Course 4 Play Labs For Loops 6_instruction: |
        You may recall that a prime number
        is any whole number that is only divisible by itself and 1. Use the "is_prime"
        function to speak out only the prime numbers from 1 to 100.
      Course 4 Play Labs For Loops 7_instruction: |
        Could you use a for loop to help
        me speak the sequence 1, 4, 7, 10, 13, 16, 19, 22, 25?
      Course 4 Play Labs For Loops 8_instruction: |
        What for loop would make me speak
        19, 27, 35, 43, 51?
      Course1BeePuzzle12_instruction: Get three nectars and then make two honey
      Course1MazeAssessment1_instruction: "This is a test!\r\nMove one way, then\nanother
        to get me to the pig"
      Course1MazeAssessment2_instruction: "This is a test!\r\nMove one way, then\nanother
        to get me to the pig."
      Eval Booleans 1_instruction: |
        Boolean operators (like >, <, =) allow us to
        compare different values, returning either "true" or "false." Click "Run"
        to see how this expression evaluates.
      Eval Booleans 2_instruction: |
        Can you set the values so that this expression
        evaluates as "true"?
      Eval Booleans 3_instruction: |
        The "string-length" function returns the number
        of characters in a string (including spaces!) - make this code evaluate to
        "true."
      Eval Booleans 4_instruction: |
        Here's an Evaluation Block called AND - it returns
        true if both of its parameters are true, otherwise it returns false. Edit
        the x variable so that this expression returns true.
      Eval Booleans 5_instruction: |
        This OR block returns true if either of its parameters
        is true. Otherwise, if both parameters are false it will return false. Set
        the y variable to a value that will cause this expression to return false.
      Eval Booleans 6_instruction: |
        Here's one more boolean block called NOT. This
        block flips true to false, or false to true. If you wrap this block of code
        in a NOT block, it should return true (because we are asking if the two expressions
        do NOT produce equal values).
      Eval Booleans Free Play_instruction: |
        Free Play: Try out some creations of
        your own using Booleans.
      Eval Booleans_instruction: |
        Booleans allow us to compare different values,
        returning "true" if the are equal, or "false" if they are not. What do
        you think this code will evaluate to?
      Eval Cond 1_instruction: |
        The cond block checks the boolean expressions in
        the left column, and as soon as it finds one that returns "true" it runs
        the corresponding code on the right. If none of the expressions evaluate to
        "true," it runs the bottom block. Update the "temperature" variable so
        that this block returns "It's just right."
      Eval Cond 2 (copy 1)_instruction: |
        This condition returns a different shape
        based on the value of the "sides" variable - change the value of "sides"
        so that the conditional returns a triangle.
      Eval Cond 2_instruction: |
        This condition returns a different shape based on
        the value of the "sides" variable - change the value of "sides" so that
        the conditional returns a triangle.
      Eval Cond 3 (copy 1)_instruction: |
        Can you write a conditional that checks
        the variable "age" and returns "Old enough to vote and drive" if age >
        17, "Old enough to drive" if age is > 15, and "Can't drive or vote" if
        neither conditions is true. Hint: The first condition to return "true" wins
        - make sure you put your conditions in the right order.
      Eval Cond 3_instruction: |
        Can you write a conditional that checks the variable
        "age" and returns "Old enough to vote and drive" if age > 17, "Old enough
        to drive" if age is > 15, and "Can't drive or vote" if neither conditions
        is true. Hint: The first condition to return "true" wins - make sure you
        put your conditions in the right order.
      Eval Cond 4_instruction: |
        We can use the "string=?" function to make conditionals
        that respond to text input. Here's a function called "green shape" that
        takes a string parameter for the shape. Complete the conditions so that the
        correct shape is drawn when the function is run with "circle," "triangle,"
        "square," or "rectangle."
      Eval Cond 5_instruction: |
        Here's a similar function "red shape" with an
        additional parameter for size. Complete the conditionals so the correct image
        is drawn for "circle," "triangle," and "star."
      Eval Cond 6_instruction: "Write a function called food-critic, which takes\nin
        the name of a food and produces a String that says how you feel about that\nfood.
        For example, (food-critic “pizza”) might evaluate to “delicious”, but\n(food-critic
        “rotten eggs”) might evaluate to “gross!”. Choose at least two\nfoods to review,
        but you can you write more if you like!  Don’t forget to\nadd an “else” clause!\r\nOne
        example - and part of the definition -  has already\nbeen done for you!"
      Eval Cond 7_instruction: "Free Play: Write a function called green-shape, which\ntakes
        in the name of a shape and produces a solid green shape. Your function\nshould
        work with at least “circle”, “star” and “rectangle”, but you can add\nother
        shapes if you like. You can choose the size of each shape. Don’t forget\nto
        add an “else” clause!\r\nOne example - and part of the definition -  has\nalready
        been done for you!\r\n"
      Eval Cond 8_instruction: "Free Play: Suppose you want to own a car at 21, or\nhave
        your own business by 30. Write a function called life-goals, which takes\nin
        an age and produces a string that describes your life goals by then. Don’t\nforget
        to add an “else” clause!\r\n"
      Eval Contracts 1_instruction: |
        Use the "star" function to produce a red star
        with a 60 pixel radius
      Eval Contracts 10A_instruction: |
        Alright let's complete this puzzle with a
        Green Square that is 175 pixels in size.
      Eval Contracts 11A_instruction: |
        Can you complete this puzzle to read "Hello
        World" in the banner?
      Eval Contracts 2_instruction: |
        Check out the "rotate" function - can you
        use it to rotate this 90 pixel green square by 45 degrees?
      Eval Contracts 3_instruction: |
        Try using the "text" function to write this
        teal text at size 40.
      Eval Contracts 4 A_instruction: |
        The "scale" function returns an image that
        is scaled either larger or smaller than the input image. Try scaling this
        circle by a factor of 10 - how is the resulting image different than if you'd
        just made a circle of that size in the first place?
      Eval Contracts 4_instruction: |
        The "scale" function returns an image that
        is either larger or smaller than the input image. Try scaling this circle
        by a factor of 10. How is the returned image different than if you'd just
        made a circle of that size in the first place?
      Eval Contracts 8A_instruction: |
        Can you complete this puzzle? The big-triangle
        is 200 pixels in size and purple?
      Eval Contracts A_instruction: |
        Use the "star" function to produce a solid
        red star with a 60 pixel radius
      Eval Contracts C_instruction: |
        Check out the "rotate" function - can you
        use it to rotate this 90 pixel green square by 45 degrees?
      Eval Contracts E_instruction: |
        Try using the "text" function to write this
        "Hello, world!" in teal at size 40.
      Eval Contracts shrink_instruction: "Can you complete this image using the \"shrink\"\nfunction
        block? The radius is 20. \n"
      Eval Define Funcs 1_instruction: |
        Here's a new function called "green-triangle"
        that takes a single Number for size and produces a green triangle. Use the
        new function to create a 125 pixel green triangle
      Eval Define Funcs 2_instruction: |
        Let's look inside that "green-triangle"
        function to see how it works. Can you modify it so that the "green-triangle"
        function always draws outlined green triangles?
      Eval Define Funcs 3_instruction: "Here's the start of another new function\ncalled
        \"purple-circle\" with a domain of one Number (the radius) and a range\nof
        Image. The body of the function is broken though, it always draws a circle\nof
        50 pixel radius instead of using the radius parameter. Replace the current\nNumber
        with the \"radius\" block from the domain. \n"
      Eval Define Funcs 4_instruction: |
        Create a new function called "aqua-star"
        that has a Domain of a single Number for radius and returns an aqua star of
        the given radius. Run your new function with a radius of 75.
      Eval Define Funcs 5_instruction: |
        Let's use that "aqua-star" function to
        make a row of different sized stars. From left to right, the stars should
        have radiuses of 25, 50, and 75.
      Eval Defining Vars Free Play 1_instruction: |
        Free Play: We've provided a function
        that fills your screen with my-image. Change my-image to see what patterns
        you can make.
      Eval Design Recipe .1_instruction: |
        Here's a Design Recipe for a function
        called "square-circle" with domain Number String and range Image. Click
        Edit to write the function definition (you will see two examples provided).
      Eval Design Recipe 1 (copy 1)_instruction: |
        We're going to write a function
        that draws a solid rectangle of any color that is twice wide as it is high.
        Start with an example - draw a solid green rectangle that has a height on
        100 pixels.
      Eval Design Recipe 1_instruction: |
        Alright, now given the Contract wide-rect:
        Number String -> Image, write an example - draw a solid green rectangle that
        has a height of 100 pixels.
      Eval Design Recipe 2 (copy 1)_instruction: |
        Let's do one more example before
        writing the function definition - this time draw a solid red rectangle with
        a height of 75 pixels.
      Eval Design Recipe 2_instruction: |
        Let's do one more example before writing
        the function definition - this time draw a solid red rectangle with a height
        of 75 pixels.
      Eval Design Recipe 3_instruction: |
        The design recipe for "wide-rect" already
        has a contract and one example. Can you write a second example and then complete
        the definition. The "wide-rect" function should produce a rectangle of given
        color that is twice as wide as it is high.
      Eval Design Recipe 4_instruction: |
        Use the Design Recipe to create a function
        "starburst" that has two domains. 1) a number of points and 2) a radius.
        "starburst" returns a yellow radial star with given points, and an inner
        radius that is half the outer radius.
      Eval Design Recipe 5_instruction: |
        Using the Design Recipe, write a function
        "striped-flag" that takes two colors and produces a flag that is 250 pixels
        wide, 150 pixels tall, with three even horizontal stripes of given colors,
        in the order color2, color1, color2.
      Eval Design Recipe 6_instruction: |
        Using the Design Recipe, write a function
        "large-polygon" that should output a polygon of given sides and color that
        takes up most of the window, regardless of the number of sides. To make sure
        that the polygon doesn't get too large as you increase the number of sides,
        side length should be inversely proportional to side number, with a length
        of (800/sides).
      Eval Design Recipe Free Play_instruction: |
        Free Play: Use the design recipe
        to create some functions of your own design
      Eval Free Play_instruction: 'Free Play: Make art with code!'
      Eval Strings Images .1_instruction: |
        So far we've only dealt with a single
        type of data, Numbers. Another type of data is a String, which is any combination
        of letters, numbers, or other characters wrapped in quotation marks. Run the
        String "Hello, world!" and see what happens.
      Eval Strings Images .2_instruction: |
        The "string-append" function takes two
        Strings and returns a single combined String. Add a String "Universe" to
        the second argument of "string-append."
      Eval Strings Images 1_instruction: |
        The third type of data we're going to
        use is an Image. This "star" function takes in a Number and two Strings,
        and it evaluates to an Image. Use this function to make a solid red star with
        radius of 100.
      Eval Strings Images 2_instruction: |
        Free Play: Every Evaluation Block is color-coded
        to let you know which data type it returns and which types it needs for its
        parameters. The last parameter of the triangle function takes a String that
        controls its color - try some different colors to see what works.
      Eval Strings Images 3_instruction: |
        Some functions can only take a specific
        set of Strings, such as the second argument of this circle function, which
        controls its style. Draw this orange outline circle using the special String
        block with a dropdown to make sure you only use valid styles.
      Eval Strings Images 4_instruction: |
        Try using the "rectangle" block to draw
        this solid red rectangle - it is 175 pixels wide and 100 pixels tall.
      Eval Strings Images 5_instruction: |
        Try using this new Evaluation Block called
        "overlay" to place a 100 pixel white triangle on top of a 200 pixel red
        circle.
      Eval Strings Images 6_instruction: |
        Use the overlay function to place a 75
        pixel radius yellow star on top of a 150 pixel long blue square.
      Eval Strings Images 7_instruction: |
        The "offset" block lets you move an image
        relative to where it would normally be placed. Use this block to offset the
        square by 100 pixels on the y-axis.
      Eval Strings Images 8_instruction: |
        Here's a different kind of star block
        - it's called "radial-star" and it allows you to draw stars with any number
        of points! Use it to create a solid orange star with an inner radius of 75
        pixels and an outer radius of 175 pixels.
      Eval Strings Images Free Play_instruction: |
        Free Play: Explore the blocks available
        to create something interesting. Make sure to share your favorite creations.
      frozen circle function in circle_instruction: Maintenant, nous allons créer
        20 cercles superposés, en tournant de 18 degrés entre chaque cercle.
      frozen circle function with parameter_instruction: Voici un bloc « Créer cercle
        » qui peut faire des cercles de différentes tailles. Peux-tu l'utiliser pour
        créer un petit cercle de taille 5 et un plus grand cercle de taille 10 ?
      frozen circle function_instruction: Utilise le nouveau bloc « Créer un cercle
        » pour créer 10 cercles superposés. N'oublie pas d'aller vers l'avant entre
        les cercles.
      frozen circle_instruction: Un cercle est une forme spéciale. Peux-tu trouver
        par quel nombre remplacer le point d'interrogation pour dessiner un cercle
        ?
      frozen cross rotate dense_instruction: 'Nous allons le répéter 90 fois ! Combien
        de fois 90 rentre dans 360 ? Indice : C''est un très petit nombre.'
      frozen cross rotate_instruction: Maintenant, essaie de le répéter 10 fois. De
        combien de degrés dois-tu tourner entre chaque ligne ?
      frozen cross_instruction: Utilise le bloc « Répéter » pour créer un signe plus.
        As-tu remarqué qu'Elsa peut se déplacer vers l'avant et vers l'arrière ?
      frozen diamond mini snowflake_instruction: Savais-tu que chaque flocon de neige
        a une forme différente ? Nous allons créer un nouveau flocon de neige en utilisant
        le bloc « Répéter » pour répéter un parallélogramme 4 fois, en tournant à
        droite de 90 degrés entre chaque parallélogramme.
      frozen diamond snowflake_instruction: Maintenant, nous allons créer un nouveau
        flocon de neige en utilisant le bloc « Répéter » pour répéter un parallélogramme
        10 fois, en tournant à droite par 36 degrés entre chacun d'eux.
      frozen diamond_instruction: 'Nous allons créer un parallélogramme. Ça ressemble
        à un carré, mais avec des angles différents : les angles sont de 60 et 120
        degrés au lieu de 90 degrés.'
      frozen freeplay_instruction: Tu es officiellement devenu un maître de l'art
        ! Crée un paradis d'hiver.
      frozen line_instruction: Salut ! Je suis Elsa d'Arendelle. Aide-moi à créer
        une ligne.
      frozen perpendicular_instruction: Maintenant, voyons si nous pouvons créer deux
        lignes qui ont un angle de 90 degrés entre elles. Tu devras utiliser le bloc
        « Tourner » ainsi que le bloc « Avancer ».
      frozen snowflake branch_instruction: Essaie d'utiliser le bloc « Créer une branche
        de flocon de neige » pour créer trois branches, qui commencent à former un
        vrai flocon de neige.
      frozen snowflake full_instruction: Maintenant, répétons ceci 8 fois pour faire
        un beau flocon de neige !
      frozen snowflower_instruction: Des motifs de de neige complexes peuvent être
        créés avec des formes très simples. Peux-tu créer un motif en répétant 5 cercles
        de taille 5 et 5 cercles de taille 10 ?
      frozen square iterative_instruction: On dirait que nous sommes à mi-chemin d'avoir
        un carré. Essayons de combiner 4 lignes pour créer un carré.
      frozen square loop 3x_instruction: Essayons de créer trois carrés, en tournant
        après chaque carré. Tu dois tourner de 120 degrés avant chaque nouveau carré.
      frozen square loop_instruction: Salut, je suis Anna dArendelle ! Nous allons
        faire un carré avec le bloc « Répéter », ce qui nécessitera moins de blocs.
        Combien de fois (???) est-ce que le bloc « Répéter » devrait répéter les blocs
        qu'il contient pour faire un carré ?
      frozen square snowflake_instruction: Peux-tu créer un flocon de neige en utilisant
        le bloc « Répéter » pour faire un carré 10 fois et le bloc « Tourner » pour
        tourner de 36 degrés entre chaque carré ?
      Infinity_catch_instruction: |
        Can you make Elsa ("actor 2") catch up with
        Anna by using the arrow keys?
      Infinity_finale_instruction: Create anything you like and share it!
      Infinity_move_collide_instruction: |
        Hiro is "actor 1".  Move him right to
        Baymax, and play a sound when they touch.
      Infinity_move_directions_instruction: |
        Baymax is "actor 2".  Add Move blocks
        and then move Baymax using the arrows.  Make him touch the two other characters.
      Infinity_move_right_instruction: |
        Hiro is "actor 1".  Use the Move block
        to move Hiro right to touch Baymax.
      Infinity_repeat_instruction: |
        Use a "repeat forever" block to make Anna move
        up and down 400 pixels.
      Infinity_say_instruction: Make Anna say "Hi there." by using the Say block.
      Infinity_shoot_instruction: |
        Baymax is "actor 2".  Make Baymax throw a rocket
        at Hiro.
      Infinity_shoot_directions_instruction: |
        Hiro is "actor 3".  Make Hiro throw
        a projectile to each of the four characters.  Wait one second between each
        throw.
      Infinity_test_instruction: This is a test Infinity level.
      Infinity_touch_faster_instruction: Touch even more snowflakes!
      Infinity_touch_four_instruction: |
        Move Anna up, down left, and right to touch
        each of the four snowflakes.
      Infinity_touch_score_instruction: |
        Make Anna score a point when she touches
        a snowflake.  Then click "Run" and steer her to touch each snowflake once.
      K-1 Artist 1 Assessment 1_instruction: Dessine une courte ligne vers le haut
        et une longue ligne vers la droite !
      K-1 artist 1 level 10_instruction: Dessine la ligne pointillée en utilisant
        les blocs de saut et de dessin
      K-1 artist 1 level 9_instruction: Draw this using three lines
      K-1 Artist Loops 1_instruction: Trace cette ligne en allant vers l'est 4 fois.
      K-1 Artist Loops 2_instruction: Peux-tu dessiner la même ligne à l'aide d'une
        boucle ?
      K-1 Artist Loops 3_instruction: Peux-tu mettre ces blocs dans une boucle pour
        dessiner 6 lignes ?
      K-1 Artist Loops 4_instruction: Une boucle pourrait-elle nous aider à dessiner
        la partie supérieure de ce château ?
      K-1 Artist Loops 5_instruction: Qu'est-ce que tu pourrais répéter 4 fois pour
        dessiner ces escaliers ?
      K-1 Artist Loops 6_instruction: 'Nous avons maintenant besoin de deux boucles
        : une pour monter l''escalier et une autre pour descendre.'
      K-1 Artist Loops 7_instruction: Peux-tu terminer ce motif avec deux boucles
        ?
      K-1 Artist Loops 8_instruction: Cet escalier a des marches plus longues.
      K-1 Artist Loops 9_instruction: 'Évaluation : Utilise une boucle pour dessiner
        les escaliers'
      K-1 Artist Loops Free Play_instruction: Jeu libre, dessine quelque chose d'amusant
        !
      K-1 Artist1 1_instruction: Dessine le pied de l'homme avec une seule ligne
      K-1 Artist1 10_instruction: Dessine et Saute pour faire le chemin en pointillés
        menant au Trésor X
      K-1 Artist1 2_instruction: Dessine les moustaches sur le chat avec deux lignes
        !
      K-1 Artist1 3_instruction: Dessine deux lignes vers l'est et deux lignes vers
        le nord pour finir la maison !
      K-1 Artist1 4_instruction: Trace des lignes vers le haut, horizontalement et
        vers le bas pour compléter le château !
      K-1 Artist1 5.5_instruction: Termine la troisième tour du château à l'aide de
        lignes courtes
      K-1 Artist1 5_instruction: Dessine la tige de cette fleur avec deux lignes !
      K-1 Artist1 6_instruction: Fini l'image en utilisant un bloc de saut !
      K-1 Artist1 7_instruction: Utilise le bloc de saut pour te déplacer sans dessiner.
        Saute vers le haut et dessine une ligne.
      K-1 Artist1 8_instruction: Dessine la ligne pointillée en utilisant les blocs
        de saut et de dessin
      K-1 Artist1 9_instruction: Dessine et Saute pour créer la ligne pointillée
      K-1 Artist1 Assessment 1_instruction: Dessine les lignes courtes et longues
        !
      K-1 Artist1 Assessment 2_instruction: Dessine les courtes lignes pointillées
        !
      K-1 Artist2 1_instruction: Dessine un carré sous le triangle.
      K-1 Artist2 2_instruction: Saute et dessine un carré à côté de la maison.
      K-1 Artist2 3_instruction: Dessine un carré au-dessus de l'autre carré
      K-1 Artist2 4_instruction: Dessine un rectangle pour terminer le pont.
      K-1 Artist2 5_instruction: Dessine un rectangle pour compléter les supports
        de pont
      K-1 Artist2 6_instruction: Dessine deux carrés pour faire un rectangle !
      K-1 Artist2 Assessment1_instruction: 'Évaluation : Dessine un carré à côté de
        l''autre carré.'
      K-1 Artist2 Free Draw_instruction: Dessine ce que tu veux!
      K-1 Artist2_7_instruction: Dessine un rectangle pour donner un tiroir supérieur
        à la commode !
      K-1 Bee 1_instruction: Déplace moi jusqu'à la fleur, récolte le nectar, puis
        déplace moi jusqu'à la ruche et fabrique du miel
      K-1 Bee 10_instruction: Récolte quatre nectars et fabrique ensuite deux miels
        !
      K-1 Bee 11.5_instruction: Récolte quatre nectars pour faire quatre miels !
      K-1 Bee 11_instruction: Récolte trois nectars et fabrique un miel
      K-1 Bee 12_instruction: Récolte trois nectars et fabrique ensuite deux miels
        !
      K-1 Bee 13_instruction: Récolte trois nectars et fabrique un miel!
      K-1 Bee 14_instruction: Emmène-moi au nectar, récolte-le, emmène-moi à l'alvéole
        et fais du miel
      K-1 Bee 15_instruction: Récolte deux nectars pour fabriquer deux miels !
      K-1 Bee 2_instruction: Déplace moi jusqu'à la fleur, récolte le nectar, puis
        déplace moi jusqu'à la ruche et fabrique du miel
      K-1 Bee 3_instruction: Déplace moi jusqu'à la fleur, récolte le nectar, puis
        déplace moi jusqu'à la ruche et fabrique du miel
      K-1 Bee 4_instruction: Récolte deux nectars et fabrique ensuite deux miels !
      K-1 Bee 5_instruction: Récolte trois nectars et fais ensuite trois miels !
      K-1 Bee 6_instruction: Récolte deux nectars et fabrique ensuite deux miels !
      K-1 Bee 7_instruction: Récolte trois nectars et fabrique ensuite deux miels
        !
      K-1 Bee 8_instruction: Récolte deux nectars et fabrique ensuite deux miels !
      K-1 Bee 9_instruction: Récolte deux nectars et fabrique ensuite deux miels !
      K-1 Bee Assessment 1_instruction: Récolte du nectar pour faire du miel !
      K-1 Bee Assessment 2_instruction: Récolte du nectar pour faire du miel !
      K-1 Bee Loops 1_instruction: Récolte le nectar pour faire du miel !
      K-1 Bee Loops 10_instruction: Utilise des boucles pour obtenir le nectar, faire
        du miel et te déplacer !
      K-1 Bee Loops 11_instruction: 'Évaluation : Utilise des boucles pour obtenir
        le nectar et le miel !'
      K-1 Bee Loops 12_instruction: 'Évaluation : Utilise des boucles pour obtenir
        le nectar, faire du miel et te déplacer !'
      K-1 Bee Loops 2_instruction: Utilise une boucle pour te déplacer, récolter le
        nectar et faire du miel !
      K-1 Bee Loops 3_instruction: Utilise des boucles pour récolter le nectar et
        faire du miel !
      K-1 Bee Loops 4_instruction: Utilise des boucles pour récolter le nectar, faire
        du miel et te déplacer !
      K-1 Bee Loops 5_instruction: Utilise des boucles pour obtenir le nectar et le
        miel !
      K-1 Bee Loops 6_instruction: Utilise des boucles pour obtenir le nectar, faire
        du miel et te déplacer !
      K-1 Bee Loops 7_instruction: Utilise des boucles pour récolter le nectar et
        faire du miel !
      K-1 Bee Loops 8_instruction: Utilise des boucles pour obtenir le nectar et le
        miel !
      K-1 Bee Loops 9_instruction: Utilise des boucles pour obtenir le nectar, faire
        du miel et te déplacer !
      K-1 Bee Loops Assessment 1_instruction: Récolte du nectar pour faire du miel
        et utilise des boucles pour te déplacer !
      K-1 Bee Loops Assessment 2_instruction: Récolte du nectar pour faire du miel
        en utilisant des boucles !
      K-1 Bee Puzzle 12_instruction: Get three nectars and then make two honey
      K-1 Building a Foundation Assessment_instruction: Construis une pyramide à trois
        niveaux. Il n'y a pas d'autres directives, joue simplement avec les pièces
        jusqu'à ce que tu l'obtiennes !
      k-1 maze 1_instruction: Peux-tu me faire bouger vers l'Ouest pour rejoindre
        le cochon ?
      K-1 Maze 10_instruction: 'Fais le tour de la TNT pour m''amener au cochon ! '
      K-1 Maze 11_instruction: 'Trace le chemin pour m''emmener au cochon stupide.
        Évite la TNT, sinon mes plumes vont s''envoler ! Indice : Le cochon est au
        sud de moi.'
      K-1 Maze 2_instruction: Déplace-moi vers l'est pour que je rejoigne le cochon
        !
      K-1 Maze 3_instruction: Déplace-moi vers le sud pour que je rejoigne le cochon
        !
      K-1 Maze 4_instruction: Déplace-moi vers le nord pour que je rejoigne le cochon
        !
      K-1 Maze 5_instruction: Déplace-moi vers l'est pour que je rejoigne le cochon
        !
      K-1 Maze 6_instruction: Déplace-moi dans une direction, puis dans une autre
        direction afin de m'amener au cochon !
      K-1 Maze 7_instruction: Déplace-moi dans une direction, puis dans une autre
        direction afin de m'amener au cochon !
      K-1 Maze 8_instruction: Déplace-moi dans une direction, puis dans une autre
        direction afin de m'amener au cochon !
      K-1 Maze 9_instruction: Déplace-moi dans une direction, puis dans une autre
        direction afin de m'amener au cochon !
      K-1 Maze Assessment 1_instruction: Évaluation -- Amène-moi au cochon !
      K-1 Maze Assessment 12_instruction: Niveau d'évaluation
      K-1 Maze Assessment 13_instruction: Niveau d'évaluation
      K-1 Maze Assessment 2_instruction: Évaluation -- Amène-moi au cochon !
      K-1 maze debug 1_instruction: Modifie le code pour m'amener au cochon !
      K-1 maze debug 10_instruction: Débogue ce niveau en réorganisant et en ajoutant
        des blocs afin de m'amener au cochon !
      K-1 maze debug 11_instruction: "Ceci est un test! \r Débogue ce niveau en réorganisant
        et en ajoutant des blocs afin de m'amener au cochon"
      K-1 maze debug 2_instruction: Trouve ce qui nous manque, puis ajoute des blocs
        pour m'amener au cochon !
      K-1 maze debug 3_instruction: Trouve ce qui nous manque, puis RETIRE des blocs
        pour m'amener au cochon !
      K-1 maze debug 4_instruction: Observe ces blocs et corrige-les ! Je pense que
        ces blocs m'amènent dans la mauvaise direction.
      K-1 maze debug 5_instruction: Débogue ce niveau en réorganisant et en ajoutant
        des blocs afin de m'amener au cochon !
      K-1 maze debug 6_instruction: Débogue ce niveau en réorganisant et en ajoutant
        des blocs afin de m'amener au cochon !
      K-1 maze debug 7_instruction: Débogue ce niveau en réorganisant et en ajoutant
        des blocs afin de m'amener au cochon !
      K-1 maze debug 8_instruction: Débogue ce niveau en réorganisant et en ajoutant
        des blocs afin de m'amener au cochon !
      K-1 maze debug 9_instruction: Débogue ce niveau en réorganisant et en ajoutant
        des blocs afin de m'amener au cochon !
      K-1 Maze debug Assessment 1_instruction: Évaluation -- Débogue ce niveau en
        réorganisant et en ajoutant des blocs afin de m'amener au cochon !
      K-1 Maze Loops 1_instruction: Amène moi jusqu'au cochon!
      K-1 Maze Loops 10_instruction: Amène-moi au cochon ! Utilise la boucle.
      K-1 Maze Loops 11_instruction: Amène-moi au cochon ! Utilise la boucle.
      K-1 Maze Loops 12_instruction: Amène-moi au cochon ! Utilise la boucle.
      K-1 Maze Loops 2_instruction: Utilise le bloc Répéter pour m'amener au cochon
        !
      K-1 Maze Loops 3_instruction: Amène-moi au cochon ! Utilise la boucle.
      K-1 Maze Loops 4_instruction: Amène moi jusqu'au cochon!
      K-1 Maze Loops 5_instruction: Amène-moi au cochon ! Utilise la boucle.
      K-1 Maze Loops 6_instruction: Amène-moi au cochon ! Utilise la boucle.
      K-1 Maze Loops 7_instruction: Amène-moi au cochon ! Utilise la boucle.
      K-1 Maze Loops 8_instruction: Amène-moi au cochon ! Utilise la boucle.
      K-1 Maze Loops 9_instruction: Amène moi jusqu'au cochon!
      K-1 Maze Loops Assessment 1_instruction: Évaluation -- Utilise des boucles pour
        m'amener au cochon !
      K-1 Maze Loops Assessment 2_instruction: Évaluation -- Utilise des boucles pour
        m'amener au cochon !
      K-1 Maze Multi 14_instruction: Niveau d'évaluation
      K-1 Maze Multi 15_instruction: Niveau d'évaluation
      K-1 Maze Sequence Assessment 1_instruction: "Ceci est un test ! \r Déplace-moi
        dans une direction, puis dans une autre direction pour m'amener au cochon"
      K-1 Maze Sequence Assessment 2_instruction: "Ceci est un test ! \r Déplace-moi
        dans une direction, puis dans une autre direction pour m'amener au cochon."
      Luigi's Pizza 1_instruction: |
        Welcome to Luigi's Pizza! To order a pizza,
        type the name of a topping into the "cost" function, and we'll return the
        price of that pizza. Try ordering a pepperoni pizza to start.
      Luigi's Pizza 2 (copy 1)_instruction: |
        Right now there are only four choices
        available at Luigi's pizza - let's fix that! Add a couple of new toppings
        to the conditional block in the "cost" function. Once you've added your
        toppings, test out the function to make sure it works.
      Luigi's Pizza 2_instruction: |
        Right now there are only four choices available
        at Luigi's pizza - let's fix that! Add a couple of new toppings to the conditional
        block in the "cost" function. Once you've added your toppings, test out
        the function to make sure it works.
      Luigi's Pizza 3 (copy 1)_instruction: |
        That's better, everyone loves more
        variety in their pizza toppings! But you still can't please everyone, and
        folks are coming in to order toppings that Luigi doesn't have. Instead of
        saying no to those people, could you update the "else" clause so that we
        charge them a premium for toppings that we don't normally offer?
      Luigi's Pizza 3_instruction: |
        That's better, everyone loves more variety in
        their pizza toppings! But you still can't please everyone, and folks are
        coming in to order toppings that Luigi doesn't have. Instead of saying no
        to those people, could you update the "else" clause so that we charge them
        a premium for toppings that we don't normally offer? Let's charge $10,000
        for a topping we don't carry.
      Luigi's Pizza 4_instruction: "Free Play: What can you do to make Luigi's cost\nfunction
        even better? Try one (or more) of the following:\r\n- Display an\nimage of
        the chosen pizza\r\n- Allow for multiple topping combinations\r\n-\nAllow
        for ordering multiple pizzas\r\n- Add a coupon code for a 50% discount"
      MSM Big Game Empty_instruction: |
        All variables and functions are currently
        empty stubs. Each puzzle progression will be focused on defining and handful
        of them, and therefore adding functionality.
      MSM Big Game Vars 1 (copy 1)_instruction: |
        In the Variables toolbox you'll
        see several variables that define how your game characters look, move, and
        interact
      MSM Big Game Vars 1_instruction: |
        In the Variables toolbox you'll see several
        variables that define how your game characters look, move, and interact
      MSM Big Game Vars Backup_instruction: |
        In the Variables toolbox you'll see
        several variables that define how your game characters look, move, and interact
      MSM Defining Vars 1 (copy 1)_instruction: |
        Write a program that produces a
        50 pixel solid green triangle.
      MSM Defining Vars 1_instruction: |
        Write a program that produces a 50 pixel
        solid green triangle.
      MSM Defining Vars 2 (copy 1)_instruction: |
        If we wanted to make fifty green
        triangles, it would be a pain to repeat that block of code 50 times. Let's
        create a variable called "my-shape" and put the code for a 50 pixel solid
        green triangle inside.
      MSM Defining Vars 2_instruction: |
        If we wanted to make fifty green triangles,
        it would be a pain to repeat that block of code 50 times. Let's create a
        variable called "my-shape" and put the code for a 50 pixel solid green triangle
        inside.
      MSM Defining Vars 3 (copy 1)_instruction: |
        Take your "my-shape" variable
        and use it with this provided code to draw two identical green triangles.
      MSM Defining Vars 3_instruction: |
        Take your "my-shape" variable and use it
        with this provided code to draw two identical green triangles that are 50
        pixels in size.
      MSM Defining Vars 4_instruction: |
        Edit your "my-shape" variable so that it
        draws 75 pixel solid red stars.
      MSM Play Lab Butterfly 1_instruction: |
        Help Sam stay on the screen so that
        you can always see at least a little piece of him. Using the arrow keys, see
        how far Sam can go to the left while still staying onscreen. You’ll find that
        Sam is onscreen as long as his x-coordinate is greater than -50. Then, fill
        in the code to make Sam stay on the screen.
      MSM Play Lab Butterfly 2_instruction: |
        Now make Sam stay on the right side
        of the screen. You'll have to experiment to see how far he can go and still
        be partially visible on the screen.
      MSM Play Lab Butterfly 3_instruction: |
        Now, combine your work to make Sam stay
        on both sides of the screen.
      MSM Play Lab Game 2_instruction: |
        Variables can also be used to control the
        speed of players in a game. Set the player speed and the enemy speed and see
        how the movement changes. Speed can be between 2 and 12.
      NetSim_AddressingMessages_instruction: |
        In this version of the simulator, you
        will connect to a Router instead of directly to another student. Enter an
        address in the "To" box to send a message to another student.
      NetSim_AutomaticDNS_instruction: |
        In this version of the simulator a DNS service
        is provided for you. Send a message in the form GET [hostname] to the DNS
        service at address 15 to get a student's address.
      NetSim_ManualDNS_instruction: |
        In this version of the simulator you can't
        see the other students' addresses.  Instead, one of you must act as a name
        service, to help share addresses with each other.
      NetSim_SendAB_instruction: |
        Connect to another student.  Each of you can set
        the value of the wire between you to "A" or "B".  See if you can send
        a complete message!
      NetSim_SendAscii_instruction: |
        In this version of the simulator, you can send
        numbers or ASCII characters to one another, one bit at a time.
      NetSim_SendBits_instruction: |
        Connect to another student.  You can now set
        your wire to "0" or "1".  Send a message to your partner!
      NetSim_SendingABTest_instruction: |
        This is Sarah's test of making a netsim
        level
      NetSim_SendNumbers_instruction: |
        In this version of the simulator, you can
        view the decimal representations of the binary you are sending.
      NetSim_Superuser_instruction: You have loaded NetSim in superuser mode.
      NetSim_Variant1_instruction: |
        NetSim: Variant 1 allows students to manually
        work out the timing of sending bits back and forth.
      NetSim_Variant2_instruction: |
        NetSim: Variant 2: Students connect directly
        to one another and send entire packets back and forth, exploring systems of
        encoding data.
      NetSim_Variant3_instruction: |
        NetSim: Variant 3: Connects groups of 2-6 students
        with a router, and explores issues in routing and DNS
      New Artist Project_instruction: |
        Draw something awesome! Your code is saved
        as a project that you can return to at any time.
      NEW Course 4 Artist Functions 1_instruction: |
        Can you draw a square that is
        100 pixels in length, using a loop?
      NEW Course 4 Artist Functions 10_instruction: |
        Click "edit" to fill out the
        blocks in the function definition to make a 40 pixel square.
      NEW Course 4 Artist Functions 11_instruction: |
        We have a new function called
        "draw a line of squares." Feel free to take a look inside the function block
        to see how we built it. Click on "Run" when your are ready for the next
        puzzle.
      NEW Course 4 Artist Functions 12_instruction: |
        Use the "draw a line of squares"
        function from the last puzzle to draw this pattern."
      NEW Course 4 Artist Functions 13_instruction: 'Peux-tu dessiner une étoile à
        l''aide de la fonction « tracer une ligne de carrés » ? Remarque : tu devras
        peut-être te déplacer de 60 pixels et tourner de 144 degrés'
      NEW Course 4 Artist Functions 14_instruction: 'Free Play time! '
      NEW Course 4 Artist Functions 2_instruction: 'Peux-tu dessiner 3 carrés avec
        20 pixels de distance entre chaque carré ? Astuce : chaque carré a une taille
        de 100 pixels'
      NEW Course 4 Artist Functions 3_instruction: "Here is a new type of Block.\nIt
        is called a \"Function block.\" Click \"Run\" to see what it can do. \n"
      NEW Course 4 Artist Functions 4_instruction: |
        Use the "draw a square" function
        to draw this pattern. Hint: You will have to use a "turn right by 120 degrees"
        block after each square.
      NEW Course 4 Artist Functions 5_instruction: |
        How did the "draw a square"
        block know what commands to run? Click on "edit" in the "draw a square"
        function block. The blocks in the function editor are the definition that
        make up "draw a square." When you're done looking around, click "Save
        and Close" and then "Run."
      NEW Course 4 Artist Functions 6_instruction: "Using the \"draw a square\" function\nblock,
        can you draw this picture? Hint: each square is 20 pixels apart.\r\n"
      NEW Course 4 Artist Functions 7_instruction: "Are you getting the hang of how\nto
        use function blocks? Let's modify this square so that it is 200 pixels\nin
        size. Hint: click on \"edit\" to change the size of the \"draw a square\"\nfunction
        editor. Remember to click on \"save and close\" to get out of the\nfunction
        editor. \n"
      NEW Course 4 Artist Functions 8_instruction: |
        We have given you most of the
        code to create a function. However there seems to be something missing. Can
        you edit the function definition to draw the triangle?
      NEW Course 4 Artist Functions 9_instruction: |
        Which block do you need to add
        to get the triangle to sit on top of the square?
      New Course 4 Artist Functions Level 4_instruction: |
        Use the "draw a square"
        function to draw this pattern.
      NEW Course 4 Artist Params 1_instruction: |
        Let's define this function to draw
        a square with 50 pixel sides. Click "edit" to get started.
      NEW Course 4 Artist Params 10_instruction: "Create a \"draw a hexagon\" function\nblock
        with a length parameter. Hint: this hexagon is 100 pixels in size. \n"
      NEW Course 4 Artist Params 11_instruction: |
        Can you figure out how to draw
        this shape? Edit the function to use the "sides" parameter.
      NEW Course 4 Artist Params 12_instruction: |
        Can you complete this drawing?
        The sides of all the shapes are 100 pixels long.
      NEW Course 4 Artist Params 13_instruction: |
        Let's edit this "draw a shape"
        function. It already has a "length" parameter. Now, let's edit the function
        to also add a "sides" parameter. Remember the angle to turn for a given
        shape is 360 divided by the sides it has. Hint: lengths for each shape are;
        the triangle is 100 pixels, the hexagon is 25 pixels and the square is 50
        pixels.
      NEW Course 4 Artist Params 14_instruction: "Can you recreate these shapes?\nDrag
        the \"length\" parameter into the function definition. \n"
      NEW Course 4 Artist Params 15_instruction: |
        Freeplay: Here are the functions
        you've written, and some more for you to play with. Draw something awesome!
      NEW Course 4 Artist Params 2 _instruction: |
        Create a “draw a triangle function
        with 50 pixels sides” from scratch
      NEW Course 4 Artist Params 2_instruction: |
        Create a “draw a triangle function
        with 50 pixels sides” from scratch
      NEW Course 4 Artist Params 3_instruction: "Now let's use the function to draw\n3
        triangles from the last puzzle in a row. Hint: each triangle is 50 pixel\napart.\r\n"
      NEW Course 4 Artist Params 4_instruction: |
        Do you notice anything different
        about these function blocks? Click “Run” to see what happens.
      NEW Course 4 Artist Params 5_instruction: "Fill in the ??? in the length parameter\ninput
        block. Hint: The pentagon is 100 pixels in size. \n"
      NEW Course 4 Artist Params 6_instruction: |
        Fill in the "length" parameter
        to draw these shapes by replacing the "???" with the right numbers. The
        square and triangle are 100 pixels in size while the hexagon is 75 pixels
        in size.
      NEW Course 4 Artist Params 7_instruction: |
        Can you complete this drawing? Hint:
        each triangle is 25 pixels larger than the last.  The first triangle is 25
        pixels in size.
      NEW Course 4 Artist Params 8_instruction: |
        Can you draw each of these triangles
        with that new function? The first is 25 pixels long, the second is 50, and
        the third is 75. Hint: start by clicking on "edit" on your function block.
      NEW Course 4 Artist Params 9_instruction: |
        Click "edit" to fill in the function
        definition of "draw a square" and add a parameter. It should take a length
        parameter, just like the triangle. This time, draw 3 squares: 25, 50 and 75
        pixels in length, each 100 pixels apart.
      NEW Course 4 Artist Vars 1.5_instruction: "Take a look at the code, can you\nsee
        how the \"set length\" block and \"length\" block works together? Click\non
        \"Run\" to see it in action. \n"
      NEW Course 4 Artist Vars 12_instruction: |
        Modify this algorithm so it uses
        the "sides" variable instead of a fixed number to draw a pentagon. Replace
        the number 5 with the "sides" variable, and use the "set sides to" block.
      NEW Course 4 Artist Vars 2.5_instruction: "Take a look at the code, can you\nsee
        how the \"set length\" block and \"length\" block works together? Click\non
        \"Run\" to see it in action. \n"
      NEW Course 4 Artist Vars 2_instruction: "Drag a number block to the \"set length\"\nblock
        to draw a set of 50 pixel triangles. \n"
      NEW Course 4 Artist Vars 4 5_instruction: |
        Awesome job on the last puzzle,
        let's try it again this time let's make this cool design with with 60 pixel
        hexagon's.
      NEW Course 4 Artist Vars 4_instruction: |
        Let's try it again. Now, let's make
        this cool design with with 60 pixel hexagons.
      NEW Course 4 Artist Vars 6_instruction: |
        Can you help me draw this cool pattern
        by dropping in the "length" variable block into the correct places?
      NEW Course 4 Bee For Loops 1_instruction: |
        Use a loop to collect the nectar
        from each flower.
      NEW Course 4 Bee For Loops 10_instruction: |
        Use your for loop "counter" variable
        to control how far to move horizontally.
      NEW Course 4 Bee For Loops 11_instruction: |
        Can you use the loop variable to
        control movement and nectar collection?
      NEW Course 4 Bee For Loops 2_instruction: |
        Add the code necessary to make sure
        the bee collects all the nectar. Look at how much code you need for this puzzle!
        (We'll learn a simpler way in the next puzzle.)
      NEW Course 4 Bee For Loops 3_instruction: "Ah, the for loop makes this much\neasier!
        All the code you need is there, take a look at how it is put together\nthen
        click \"Run\" to see how it works. \n"
      NEW Course 4 Bee For Loops 4 4_instruction: "Can you help the Bee collect the\nrest
        of the honey using this for loop? \n"
      NEW Course 4 Bee For Loops 4_instruction: "Replace the ??? in the for loop\nwith
        the largest amount of nectar the bee has to collect. \n"
      NEW Course 4 Bee For Loops 5 5_instruction: |
        Are you getting the hang of using
        the for loop? Let's help the bee get the rest of the nectar.
      NEW Course 4 Bee For Loops 5_instruction: |
        You can also use a for loop to count
        down. Try gathering this nectar by counting down from 5 to 1 by 1.
      NEW Course 4 Bee For Loops 6_instruction: |
        The last number in your for loop
        is called the "increment,"  and each time the loop is run the counter variable
        changes by the increment. Try collecting these flowers using an increment
        of 2.
      NEW Course 4 Bee For Loops 7_instruction: |
        Are you getting the hang of for
        Loops? This is similar to last puzzle, but you have to get 2,4,6,8,10 nectar.
        You’re given the starter code except for the numbers in the counter loops.
        Let's collect some nectar!
      NEW Course 4 Bee For Loops 8_instruction: "If your loop is counting up, the\nincrement
        is added to your counter variable each loop. What should your increment\nbe
        to collect 3, 6, 9 nectar?\r\n"
      NEW Course 4 Bee For Loops 9_instruction: |
        If your loop is counting down, the
        increment is subtracted from your counter variable each loop. What should
        your increment be to collect 9, then 6, and then 3 nectar?
      NEW Course 4 Play Lab Params 11 (copy 1)_instruction: "It's Free Play time!\nHave
        fun with all the blocks in your tool box. \n"
      NEW Course 4 Play Lab Params 11_instruction: "It's Free Play time! Have fun\nwith
        all the blocks in your tool box. \n"
      NEW Course 4 Play Lab Params 5 5_instruction: "Fill in actor parameter inputs\nwith
        numbers (1, 2, and 3) to make these actors patrol. \n"
      NEW Course 4 Play Lab Vars 4 5_instruction: |
        “What do you think this code will
        do? Press “Run” to see what happens.”
      NEW Course 4 Play Labs For Loops 8 Free Play_instruction: "It's Free Play\ntime,
        have fun with all the blocks in your tool box. \n"
      New Play Lab Project_instruction: |
        Create your own story or game! Your code
        is saved as a project you can return to at any time.
      Ninjacat Demo B (copy 1)_instruction: "\r\nLet’s begin by exploring a simple\nvideogame,
        and then figuring out how it works. You can use the arrow keys\nto move the
        ninja left, right and jump - try to catch the unicorn and avoid\nthe dragon!\r\n\r\n\r\n\r\n
        \ \r\n\r\n"
      Ninjacat Demo B_instruction: |
        Let’s begin by exploring a simple videogame,
        and then figuring out how it works. You can use the arrow keys to move the
        ninja up and down - try to catch the unicorn and avoid the dragon! When you
        think you've figured out how the game works, click "Finish"
      PDK5 Conditionals 1_instruction: |
        Purple flowers may have either 1 or 0 nectar,
        but you don't know which one! Be careful not to collect nectar from a purple
        flower if it doesn't have any. Check if the nectar is equal to 1 by using
        the if block.
      PDK5 Conditionals 2_instruction: "Try this puzzle that uses conditionals and\nloops
        together. Use the \"if\" block to decide when to turn. Hint: you only\nneed
        one more block to complete this puzzle. \n"
      PDK5 Events 1_instruction: "So far all of the programs we've written are executed\nin
        order from top to bottom. In this puzzle, we'll use \"Events\" to respond\nto
        an action on demand. Make the octopus say \"Hello\" only when you click\non
        the Octopus. \n"
      PDK5 Functions 1_instruction: |
        Hello. Me zombie artist. Me love drawing! Help
        me draw the square glasses.  Hint:  the bridge between the glasses is 25 pixels
        shorter than the square length.
      PDK5 Functions 2_instruction: Les fonctions te permettent de définir de nouveaux
        blocs ! Nous avons déplacé les blocs permettant de dessiner un carré dans
        une fonction appelée « dessiner un carré ». Peux-tu utiliser la fonction « dessiner
        un carré » pour créer les verres ? Les carrés sont espacés de 75 pixels.
      PDK5 Loops 1_instruction: "Instead of using 5 \"move forward\" blocks, use\nthe
        \"repeat\" block with a \"move forward\" block inside of it. In computer\nscience,
        this is called a \"loop.\" \n"
      PDK5 Loops 3_instruction: |
        Here's another puzzle to practice loops. What happens
        if you use the repeat block to run the code already provided on the workspace
        4 times?
      Pixelation - Lesson 14 - Fix bit offset v.2_instruction: |
        Something happened
        to the bits in this image!  Find error and fix it!  Hint: a few extra bits
        were added.  You should only need to remove some bits.
      Pixelation - Lesson 14 - Fix the error_instruction: |
        Something happened to
        the bits in this image!  Find error and fix it!  Hint: a few extra bits were
        added.  You should only need to remove some bits.
      Pixelation - Lesson 14 - Make the Letter A_instruction: |
        Make a 3x5 letter
        'A'.  The widget is setup with the incorrect dimensions. Your first task
        is to set the second byte to the 8-bit binary code for 5: 0000 0101.  Then
        start entering pixel data.
      Pixelation - Lesson 14 - Make your own B and W Image_instruction: |
        Now make
        your own image! We've started you off with a 10x10 canvas but you can make
        it whatever size you want.  Happy pixeling!
      Pixelation - Lesson 14 - Make your own B&W Image_instruction: |
        Now make your
        own image! We've started you off with a 10x10 canvas but you can make it
        whatever size you want.  Happy pixeling!
      Pixelation 2_instruction: |
        Something happened to the bits in this image!  Find
        error and fix it!
      Pixelation 4x4 Empty_instruction: |
        The width and height are now encoded in
        the pixel data. Can you figure out how to adjust the dimensions?
      Play Lab Rocket 1_instruction: |
        A rocket blasts off, traveling at 15 meters
        per second... press "Run" to see how this word problem looks as an animation.
      Play Lab Rocket 2 (copy 1)_instruction: |
        We've added your contract and two
        examples into the Design Recipe for rocket-height. Now write the function
        for rocket-height.
      Play Lab Rocket 2 (copy 2)_instruction: |
        We've started the Design Recipe for
        rocket-height using the contract and examples you just wrote. Complete the
        function definition for rocket-height and run your animation.
      Play Lab Rocket 2_instruction: |
        We've started the Design Recipe for rocket-height
        using the contract and examples you just wrote. Complete the function definition
        for rocket-height and run your animation.
      Play Lab Rocket 2B (copy 1)_instruction: |
        We've started the Design Recipe
        for rocket-height using the contract and examples you just wrote. Complete
        the function definition for rocket-height and run your animation.
      Play Lab Rocket 2B_instruction: |
        A rocket blasts off, traveling at 15 meters
        per second. Using the Design Recipe, write a function called rocket-height
        that takes in a number of  seconds that have passed since the rocket took
        off, and produces the height of the rocket at that time.
      Play Lab Rocket 3 (copy 1)_instruction: |
        Awesome, now can you update that function
        so that our rocket moves more quickly? Make sure to update the purpose statement,
        examples, and function definition to launch a rocket at 40 meters per second.
      Play Lab Rocket 3_instruction: |
        Awesome, now can you update that function so
        that our rocket moves more quickly? Make sure to update the purpose statement,
        examples, and function definition to launch a rocket at 40 meters per second.
      Play Lab Rocket 4 (copy 1)_instruction: |
        Real rockets start off slowly and
        gain speed over time - let's make ours do the same! Write an exponential
        function that describes a rocket that travels at "seconds" squared meters
        per second.
      Play Lab Rocket 4_instruction: |
        Real rockets start off slowly and gain speed
        over time - so let's add some simple acceleration to ours! Can you write
        a function that describes a rocket that is at 10 meters at 1 second, 40 meters
        at 2 seconds, 90 meters at 3 seconds, 160 at 4 seconds and so on?
      Play Lab Rocket 5_instruction: |
        Much better, but let's write one more function
        with simple acceleration. This time the rocket should be 15 meters at 1 second,
        45 meters at 2 seconds, 95 at 3 seconds, and 165 at 4 seconds.
      Play Lab Rocket Free Play_instruction: |
        Free Play: Experiment with your rocket-height
        function to make the rocket fly in different ways. Click "Finish" when you
        are done.
      Sam the Butterfly 1 (copy 1)_instruction: |
        This butterfly is named Sam, and
        the game area is Sam’s yard. Sam's yard is 400 pixels wide by 400 pixels
        tall! As you can see, Sam is free to walk around the yard, and the coordinates
        at the top of the screen update to tell you his location. Use the arrow keys
        to move sam around his yard. Help Sam collect all of the flags to move on.
      Sam the Butterfly 1_instruction: |
        This bat is named Sam, and the game area
        is Sam’s yard. Sam's yard is 400 pixels wide by 400 pixels tall! As you can
        see, Sam is free to walk around the yard, and the coordinates at the top of
        the screen update to tell you his location. Use the arrow keys to move Sam
        around his yard, making note of Sam's coordinates at different locations.
        Click "Finish" when you're ready to move on.
      Sam the Butterfly 2_instruction: |
        Sam's mom wants to make sure that she can
        always see at least a bit of him, so lets write some functions that help make
        sure he doesn't go too far out of the yard. Here's a function called "safe-left?"
        - it should take a Number for its domain that represents Sam's x-coordinates
        and return true if he's inside the left boundary of the yard (x > -25). If
        your function works, Sam shouldn't be able to leave the yard from the left
        side.
      Sam the Butterfly 3_instruction: |
        In the last puzzle we kept Sam from leaving
        on the left, now let's do the same thing on the right. Fill out the "safe-right?"
        function to make sure Sam can't go past x = 425.
      Sam the Butterfly 4_instruction: |
        Huh, we can keep Sam from leaving on the
        left, or we can keep him from leaving on the right, but how can we keep him
        from going either direction? Try using the "AND" block to program the function
        "on-screen?" to check if Sam is safe-left? AND safe-right?
      Sam the Butterfly 5_instruction: |
        Free Play: Awesome, now Sam can't leave
        the yard from the left or the right, but what about up and down? We've added
        an additional parameter 'y' to the 'onscreen?' function. Can you update
        your program so Sam can't leave from the top (y = 425) or bottom (y = -25)
        either? Test your program by moving Sam as far as he can go in all four directions.
        Click Finish when Sam is completely protected.
      Sam the Butterfly 6_instruction: |
        We've added a new parameter "y" to the
        "on-screen?" function. Update the function so that it checks that "safe-left?"
        AND "safe-right?" AND "safe-up?" are all true. When you've fixed the
        function, try going out of the yard from the left, right, and top sides.
      Sam the Butterfly 7_instruction: |
        Only one last direction to worry about! Create
        a "safe-down?" function and update the "on-screen?" function so that it
        checks up, down, left, and right.
      Sam the Butterfly Complete_instruction: |
        Only one last direction to worry about!
        Create a "safe-down?" function and update the "on-screen?" function so
        that it checks up, down, left, and right.
      scrat 16 (copy 1)_instruction: |
        Acorn! Acorn! Acorn! Use an "if" block to
        get me there with the fewest number of blocks.
      scrat 16_instruction: Un Gland ! Un Gland ! Un Gland ! Utilisez un bloc "if"
        pour m'y amener avec le plus petit nombre possible de blocs.
      scrat 17 (copy 1)_instruction: |
        Ok, let's do that again for practice - this
        isn't very different, but watch out for the <insert obstacle name for Scrat>!
      scrat 17_instruction: OK, nous allons le refaire encore une fois pour s'entrainer
        - ce n'est pas très différent, mais attention au mur !
      scrat 18 (copy 1)_instruction: |
        The "If-else" blocks checks a condition,
        and then does one thing OR another. To get me to the acorn try to use this
        new block.
      scrat 18_instruction: Les blocs "If-else" vérifient une condition et suivant
        le résultat, font une chose ou une autre. Pour m'amener au gland essayez d'utiliser
        ce nouveau bloc.
      scrat 19 (copy 1)_instruction: |
        One more practice of the "if-else" block,
        can you get it right on your first try?
      scrat 19_instruction: Un exercice de plus avec le bloc "if-else". Pouvez-vous
        y arriver du premier coup ?
      scrat 20_instruction: Pouvez-vous ajouter seulement 3 blocs pour m'aider à résoudre
        un labyrinthe encore plus compliqué ? Si vous le faites bien, je peux suivre
        n'importe quelle chemin sinueux, peu importe sa longueur. Faites-vite ! La
        glace fond !
      SpecialFrozenLevel_instruction: Tu es officiellement devenu un maître de l'art
        ! Crée un paradis hivernal.
      Standalone_Artist_1_instruction: Bienvenue à l'artiste ! Tout d'abord, nous
        allons essayer de faire un simple carré à l'aide du bloc tourner à droite
        et du bloc déplacer vers l'avant. Chaque côté doit être de 100 pixels de long.
      Standalone_Artist_2_instruction: |
        Draw this diamond with 120 and 60 degree
        angles and 150 pixel long sides.
      Standalone_Artist_3_instruction: |
        Can you draw this hexagon with 100 pixel
        sides and 60 degree turns?
      Standalone_Artist_4_instruction: |
        Now you've got a new block to play with,
        the loop. This will repeat a set of commands. What happens if you loop these
        commands 6 times?
      Standalone_Artist_5.5_instruction: |
        Notice how we simplified the diamond code
        by turning it into a loop. You can loop that whole sequence 12 times to draw
        the flower. Hint: You'll need to turn 30 degrees after your diamond loop
        so you don't keep drawing over the same diamond.
      Standalone_Artist_5_instruction: |
        How many times do you need to loop this diamond
        to draw the flower?
      Standalone_Artist_6_instruction: |
        Loop this hexagon code 6 times to create
        the design. How many degrees will you need to turn each time? Hint: divide
        the number of degrees in a circle by the number of times you are looping.
      Standalone_Artist_7_instruction: |
        A function is another programming tool to
        help you avoid repeating yourself. This function draws a flower, so you can
        use it any time you want to draw a flower. Use this and the new jump block
        to draw these flowers. Hint: The flowers are 150 pixels apart
      Standalone_Artist_8_instruction: |
        Here's a function called "Draw a shape"
        that we've programmed to draw hexagons. Run the code to see what it does
        and then experiment with the function to see what happens. Can you make it
        draw a pattern of squares, triangles, or octagons?
      Standalone_Artist_9_instruction: |
        Now go ahead and make whatever picture you'd
        like! You've even got an empty function that you can make do whatever you
        want!
      Standalone_Artist_v2_instruction: Bienvenue à l'artiste ! Tout d'abord, nous
        allons essayer de faire un simple carré à l'aide du bloc tourner à droite
        et du bloc déplacer vers l'avant. Chaque côté doit être de 100 pixels de long.
      Text Compression Peter Piper_instruction: Ce poème a été compressé en remplaçant
        deux phrases identiques par des symboles dans le dictionnaire. Pouvez-vous
        identifier une autre partie répétée pour compresser encore plus le poème ?
      U1L4 NetSim SendAB_instruction: |
        NetSim: Variant 1 playground: UNDER CONSTRUCTION:
        Variant 1 is not yet functional because P2P connections have not been implemented.
        Variant 1 allows students to manually work out the timing of sending bits
        back and forth.
      U2L10 NetSim Automatic DNS_instruction: |
        In this version of the simulator a
        DNS service is provided for you. Send a message in the form GET [hostname]
        to the DNS service at address 15 to get a student's address.
      U2L10 NetSim Manual DNS_instruction: |
        In this version of the simulator you
        can't see the other students' addresses.  Instead, one of you must act as
        a name service, to help share addresses with each other.
      U2L2 NetSim Hub Mode_instruction: "You'll now play the \"Game of Messages\"\ngame
        you just played in person, but this time using the Internet Simulator.\nJoin
        a room to be connected to your group, and then follow the instructions\non
        the worksheet handed out by your teacher.\r\n"
      U2L3 NetSim Hub Mode_instruction: "With your group, invent a standard addressing\nscheme
        for the \"Game of Messages\" game, and try it out using the Internet\nSimulator.
        \n"
      U2L4 NetSim Routers Addresses_instruction: "For this activity, connect to a\nrouter
        with the others in your group. Important note: The router will only\nproperly
        route messages where the first 4 bits are the To: address and the\nsecond
        4 bits are the From: address.\r\n\r\n[TODO: NetSim needs to support\nhierarchical
        addresses. For now, level is set up for 4 bit to and from addresses]"
      U2L5 NetSim Classroom Internet_instruction: "For this activity, connect to\na
        router with the others in your group. The Internet Simulator now provides\na
        place for you to put the To and From addresses, so you don't have to type\nout
        the bits manually.\r\n\r\n"
      U2L7 NetSim Need for Packets_instruction: |
        Transfer your favicon to a partner
        across a network in which the larger a packet grows, the more likely it is
        to be dropped.
      U313 Two Buttons with Ids_instruction: |
        Now you try it! We've given you some
        starting code with two buttons and two event handlers on the screen, but we've
        just left the default Ids of "id".  You need to change the ids to connect
        the right event handler to the right button. (Interestingly, the incorrect
        program does work, but exhibits some bizarre behavior.  We'll discuss this
        more in the next lesson.  Make the buttons work correctly for now).
      U3L03 choose your own drawing_instruction: |
        Now choose your own!  Pick one
        of the three drawings shown here and attempt to create it on your own, making
        smart decisions about how to break the problem down into re-usable functions.  You
        will review your work with a peer using "procedures peer review rubric."  Check
        it for the requirements.  GIF: U3L3-ProceduresChooseOne.png
      U3L03 Creating Procedures 1_instruction: |
        Write the turnAround() function and
        use it to make the turtle move as depicted. see: U3L03-turnAndDown.gif
      U3L03 Define and use turnAround_instruction: |
        Write the turnAround() function
        and use it to make the turtle move as depicted.
      U3L03 define turnRight and draw a rectangle_instruction: "Create a turnRight()\nfunction
        and draw a rectangle twice as tall as it is wide by having the turtle\nnavigate
        clockwise to draw the rectangle. \n"
      U3L03 Draw a T using turnAround_instruction: |
        The turnAround function is now
        provided for you in the code.  Use the turnAround() function to draw a T as
        depicted.
      U3L03 draw diamond_instruction: "Use any and all of the functions you wrote\npreviously
        to make a 'diamond' shape as shown in the image.\r\n\r\nNOTE:\nthis is another
        tricky one.  The 4 sides of the diamond are made by drawing\nthree steps with
        other movement made between calls.  HINT: you might want\nto make another
        function that handles drawing one side of the diamond. "
      U3L03 Three Steps_instruction: |
        Draw 3 "steps" moving up and to the right.  Notice
        the pattern in the movement. You should define a function called drawStep()
        which draws one of the steps, and then call it 3 times to achieve the effect.
      U3L04 choose your own drawing_instruction: |
        Now choose your own!  Pick one
        of the three drawings shown here and attempt to create it on your own, making
        smart decisions about how to break the problem down into re-usable functions.  You
        will review your work with a peer using "procedures peer review rubric."  Check
        it for the requirements.
      U3L04 diamond solution_instruction: |
        Study this solution to the drawDiamond
        problem.  Notice that the whole program starts by calling drawDiamond() at
        the top.  The program then follows a chain of function calls.  You can trace
        what's happening in the code to see the functions reused.  It's also easy
        to read because the function names describe the expected behavior.
      U3L05_3x3GridEfficiencyChallenge_instruction: |
        Let's revisit the 3x3 grid
        problem you did a few lessons ago.  This time the challenge is to program
        the solution "as efficiently as possible."  Now that you know how to write
        functions, it should be easier to break the problem down, and your code should
        be easier to read and debug.  See the rubric for more details about requirements
        and expectations.
      U3L05_draw3x3GridEfficiently_instruction: |
        Draw a 3x3 grid above and to the
        right of the turtle. Try to do so with the fewest number of commands possible.
        NOTE: This is a very challenging problem.  You may need to play with it for
        a while and tweak it.  You might also consider using pencil and paper to sketch
        your ideas.
      U3L06 Challenge 1 triangle_instruction: |
        Check out the extended Turtle palette
        now made available to you. These new commands accept parameters, allowing
        you to specify precisely how the function operates rather than only being
        able to move or turn a predetermined amount. Make use of these functions to
        draw the triangle as shown.
      U3L06 Challenge 2 purple square_instruction: |
        This time we're going to learn
        a little bit about changing the turtle's pen. Read through the documentation
        for penWidth() and penColor(), and then draw the purple square as shown.
      U3L06 Challenge 3 fill pink_instruction: |
        Now let's try to fill in the entire
        background of the screen. To make it a little easier for you, we can tell
        you the color we chose is one of the 140 named colors.  If you don't know
        what the named colors are, take a closer look at the documentation for penColor()
        again. Hint: you need to use dot().
      U3L06 Challenge 4 bullseye_instruction: |
        Let's try this out one more time.
        This time the colors are NOT named colors - you need to use the hex-color
        number to set the color.  So that you're not randomly guessing, we'll give
        you a hint -- each of the colors shown in the target image is one of these
        one of the five in the following list:  #00ABDC, #CC4400, #1188CC, #006699,
        #11CC00  You might be able to guess correctly if you apply what you know about
        RGB colors.
      U3L06 Challenge 5 overlapping circles_instruction: |
        This image is created just
        using dot() and penColor() but, how are we going to get those circles to be
        transparent?  If you haven't gotten the hint yet: check out the documentation!
      U3L06 Challenge 6 squiggles_instruction: |
        Next we're going to be adding some
        curves to our drawing. Read the documentation for the "arc" commands and
        then draw the squiggles as shown. To make things easier here's a hint: all
        the parameters are multiples of 10, and the colors are from the following
        list of named colors: PowderBlue, lightBlue, Indigo, Purple, Magenta.
      U3L06 Challenge 7 smiley face_instruction: |
        To make this smiley face you'll
        need to look at the documentation for the move() command and then use it with
        the others you've learned.  You can make reasonable guesses about the colors.
      U3L06 Challenge 8 make your own_instruction: |
        Use the tools you've learned
        today to create a drawing of your own creation. If you have time, challenge
        your friends to see if they can duplicate your image.  We'll show you the
        drawing we made for ourselves.  You can try to duplicate that if you want
        to, otherwise, have fun making your own!
      U3L07 - Free Play Loops and Random_instruction: |
        Free Play!  Use what you learned
        from loops and random to make your own little scene.  Have fun.
      U3L07 - Starry Night Starter Code_instruction: "You are going to use loops\nand
        random numbers to generate an image of starry night sky similar to one\nshown
        here.  We have given you some starter code to generate the ground and\nsky
        (just two giant dots), you will add code to this project to make the stars,\ngrass,
        and moon.  All of the effects are clever applications of turtle dots,\nlines,
        and colors.  To get started, follow the series of steps suggested in\nthe
        accompanying worksheet. \n"
      U3L08 - Enchantment Under the Sea_instruction: |
        You have been provided with
        starter code for an “Under the Sea” scene which includes three functions,
        one each for the starfish, sea grass, and fish. Create versions of these functions
        which accept parameters to allow you to add more variation to your scene.  The
        student worksheet provides more details and guidance.
      U3L13 - Button with ID_instruction: |
        Drag a button out onto the screen and
        set its text to "Go forth!".  Run the program to make sure you can see the
        button.
      U3L13 - Debug Id plus logic problem_instruction: "The last problem was an example\nof
        syntax error.  App Lab did not understand which object it should be listening\nto
        for a \"click\" event so it showed an error message in the console to let\nyou
        know.  Another kind of error is a logical error - the program is valid,\nbut
        it's not doing what you want it to do.\r\n\r\nThis program has 2 errors.\nA
        (tricky) syntax error and logical error.  Find them, fix them, and make\nthe
        program work as expected."
      U3L13 - Debug Id Problem_instruction: |
        This program has problem!  Can you figure
        it out?  Run the program and see if you can figure out from the error messages
        in the console what the issue is.  There is not much code, so you might be
        able to figure it out just by reading carefully.  Make a change that will
        make the program work as expected.
      U3L13 - Turtle Driver Project_instruction: |
        Challenge: Create a “turtle driver”
        with at least three buttons on the screen to move the turtle forward, and
        turn the turtle right and left. You can copy/paste code from a previous level
        if you like but it will help build your coding muscles if you create this
        small program from scratch.  If you have time, try adding additional buttons!  You
        can also have fun changing the parameters on the turtle functions, using colors,
        etc.
      U3L13 - Turtle move with button_instruction: "Drag a button out onto the screen\nand
        set its text to \"Go forth!\".  Add an event handler for the button, that\nmakes
        the turtle move forward.  Run the program to make sure it works. \n"
      U3L14 - Unfortunate Events Free Play_instruction: |
        Follow the "Unfortunate
        Events" Worksheet and enter your code here to experiment.  We've pre-loaded
        the code you need to start.
      U3L16 - challenge say hi app_instruction: "In this challenge we give you starter\ncode
        that lays all the elements out on the screen.  Here’s what you need to\ndo:\r\nAdd
        event handler to textInput with the event type ‘input’ that shows\nthe “Say
        hi” button when that event occurs.\r\nAdd event handler to button\nso that
        on click, it writes a hello message to the screen and hides the textInput\nand
        button."
      U3L16 - hideAndShow_instruction: |
        Introducing textInput, getText and write.  First
        run the starter code several times.  Try to change what's written to the
        screen when the button is clicked. Then use getText to write to the screen
        what the user entered in the text box. GIF: U3L16 - useGetText.gif
      U3L16 - hideAndShowPractice_instruction: |
        You are given some starting code
        that puts an image and two buttons on the screen.  The image is initially
        hidden. Add two new event handlers: one for each button, that when clicked
        hide and show the image.
      U3L16 - image and text labels_instruction: |
        Introducing the setPosition command!  Replace
        the moveTo in the button-click event handler to use setPosition to move the
        button itself to a random location when it's clicked.
      U3L16 - images and text labels_instruction: "Introducing objects other than\nbuttons!
        - textLabels and images.  First try replacing your button with a\ntextLabel.
        \ Will the text respond to events just like the button?  Try connecting\nan
        event handler to it.  We've started you out with code similar to the result\nof
        the last level, you can copy your code from that level into here if you\nprefer.
        \n"
      U3L16 - images_instruction: "Introducing Images.  Try replacing the textLabel\nwith
        an image..  Will the image respond to events just like the button?  Try\nconnecting
        an event handler to it.  We've started you out with code similar\nto the result
        of the last level, you can copy your code from that level into\nhere if you
        prefer. \n"
      U3L16 - quick double click_instruction: |
        Mini-Project.  The Quick Double-Click
        game.  In this simple game an object (an image) moves around, or pops up randomly
        on the screen, as the user clicks it.  The goal of our game will be to try
        to double-click the object before it moves.  Part of the challenge (and fun)
        here is creating this app from scratch.  You can look back at your previous
        work for examples, but it's fun to create something from scratch, too.  Try
        it!  For more details see the Activity guide for this lesson.
      U3L16 - setPosition to move button_instruction: |
        Introducing the setPosition
        command!  Replace the moveTo in the button-click event handler to use setPosition
        to move the button itself to a random location when it's clicked.
      U3L16 - setPositionMoveButton_instruction: Use setPositon to moveButton
      U3L16 - setupMoveToRandom_instruction: "We'll be building upon some simple\nstarting
        code throughout this lesson.  Your first task: use moveTo and randomNumber\nto
        get the turtle to move to a random location with each button click.  We've\ngiven
        you starting code for our common setup: a button that moves the turtle\nwhen
        clicked.  You should modify this code.  \n"
      U3L16 - text labels_instruction: "Introducing textLabels.  First try replacing\nyour
        button with a textLabel.  Will the text respond to events just like the\nbutton?
        \ Try connecting an event handler to it.  We've started you out with\ncode
        similar to the result of the last level, you can copy your code from\nthat
        level into here if you prefer. \n"
      U3L16 - textInput getText write_instruction: |
        Introducing textInput, getText
        and write.  First run the starter code several times.  Try to change what's
        written to the screen when the button is clicked. Then use getText to write
        to the screen what the user entered in the text box.
      U3L16 - use images_instruction: |
        Introducing Images.  Try replacing the textLabel
        with an image..  Will the image respond to events just like the button?  Try
        connecting an event handler to it.  We've started you out with code similar
        to the result of the last level, you can copy your code from that level into
        here if you prefer.
      U3L19 - Debugging with consoleLog_instruction: |
        This example shows how you
        might insert console.log statements in your code to verify for yourself how
        the values in the variables change during the running of the code.  This is
        an important debugging technique to use when each line in your program doesn't
        have a visual effect on the app that you can see to verify things are working
        right.  Run the code to see the output in the console.
      U3L19 - DEMO up down count practice app_instruction: |
        This is a demonstration
        of a simple App that uses variables, arithmetic and setText.  Play with it
        a little bit here to see what it does.  You can also come back to experiment
        if you want.  You are going to try to create this app yourself on the next
        screen.  Don't worry, we'll start you out with some of the code and leave
        the rest for you to complete.
      U3L19 - do concatenate string with var_instruction: "We've given you a piece\nof
        code from the previous screen.  Try changing the value assigned to foo\nto
        see the string change. \r\nDo this: \r\n1. Try changing the value assigned\nto
        foo to see the string change. \r\n2. By only modifying the lines of code\nthat
        were given to you, try to get the output to say: “The value of foo is:\n9.
        \ And isn’t that fine.” \r\n"
      U3L19 - fix the var name syntax error_instruction: "We've given you some code\nwith
        an error.  It doesn’t recognize the variable.  Can you figure out why?  Fix\nthe
        error and get the program to run.  Also note the error message since it\nmight
        come up at some point later in your life.\r\n\r\n"
      U3L19 - practice with setText_instruction: |
        We've started you out with the
        code shown on the previous screen.  First experiment with the app.  Identify
        where setText is being used.  CHALLENGE: modify the code to also use setText
        to change the text on the button itself when it's clicked.  GIF: U3L19 -
        setTextOfButton.gif
      U3L19 - Target Clicker App_instruction: "# A motivating example\r\n\r\nHere\nis
        an example of the kind of app we want to make.  Study this for the elements\ncontained
        in the app rather than what it is or does.  Things to investigate:\n\r\n\r\n1.
        what happens when you click on the Code.org logo? \r\n2. What happens\nwhen
        you click somewhere else? \r\n3. Try the reset button.   \r\n\r\nThe\nelements
        contained in this app appear to be simple, and they are in some ways.\nHowever,
        the computing principles involved - controlling and keeping track\nof things
        in memory while the program is running - get into some deeper issues\nof programming
        and computer science in general.  There are some devilish details\nand paths
        that can lead to misunderstanding if you're not careful.\r\n\r\nSo,\nkeep
        this app in mind as you go through the different levels in this lesson.  It\nmight
        seem like you need to learn a lot in order to get this simple thing\nworking.
        \ But it's worth taking the time to understand at a deeper level\nwhat is
        going on.  Because this one topic: controlling memory leads to many\npossible
        misunderstandings about coding, and how computers work.  We want\nto make
        sure you get it right from the outset.  \r\n\r\nSo take your time.  Work\nthrough
        the issues.  Read the explanations.  You'll come out on the other\nside a
        better programmer with much deeper knowledge and understanding of how\nthings
        work.  \r\n\r\nAre you ready?  Click 'finish' to move to the next\npage and
        start the lesson."
      U3L19 - test reassignment of two vars_instruction: |
        Why is this happening?
        The code given here is the same as the example from the previous page where
        we asked you to make a prediction about what will happen.  Run this code to
        find out if you were right.  If you weren't, that's okay.  You might experiment  a
        little if you want to, but bon't spend too much time here. We'll explain
        more on the next page.
      U3L19 - three basic ops of variables_instruction: "Do this:\r\nWe've given\nyou
        the three lines of code shown in the previous page.  Add three lines of\ncode
        just below the ones shown here to make your own variable, assign it a\nvalue
        and write it to the screen.  NOTE: change the variable name from the\ndefault
        x to something else.\r\n"
      U3L19 - try out console log_instruction: "Try out console.log.  Do this: replace\nthe
        statement write(\"foo is: \" + foo) with console.log(\"foo is: \" + foo).
        \ Run\nthe program and you should see the output show up in the console area
        below\nthe workspace.  Then try adding a few more console.log statements.
        \ Display\nsome text.  Make another variable and display that.  \r\nThe app
        screen will\nbe blank -- that's the point.  With console.log you can test
        output behind\nthe scenes in a way the user cannot see.  \r\n\r\n\r\nGIF:
        U3L19-useconsolelog.gif"
      U3L19 - up down count practice app_instruction: |
        This app is only SLIGHTLY
        different from the previous one, but much more dynamic.  See if you can figure
        out how and why the count is going up.  Once you've figured it out then you
        should be able to DO THIS: add a button to the app that when clicked makes
        the count go down, and updates the label.  When you're done the app should
        work as shown in the demonstration.  GIF: U3L19 - upDownCountApp.gif
      U3L19 - updating variables pt1_instruction: |
        This app is only SLIGHTLY different
        from the previous one, but much more dynamic.  See if you can figure out how
        and why the count is going up.  Once you've figured it out then you should
        be able to DO THIS: add a button to the app that when clicked makes the count
        go down, and updates the label.  When you're done the app should work as
        shown in the demonstration.  GIF: U3L19 - upDownCountApp.gif
      U3L19 - variable reassignment challenge pt2_instruction: |
        We've given you
        the code from the previous page.  Right now, because the code only sets the
        values of variables, the app doesn't display anything. DO THIS: insert write
        or console.log statements into the code to figure out what the values of a,
        b, and c are after the code has executed.  You should have first made a prediction
        to see if your mental model of how the computer works is correct.  We'll
        ask for the answer on the next page.
      U3L19 - variable scope problem 2_instruction: |
        First run the program to see
        the problem.  You don't need to write code to solve any problem here.  But
        you do need to investigate the code and come up with an explanation for WHY
        what's happening is happening.  Why aren't 3 things being written to the
        screen?  Why does the variable foo seem to exist once but not the other times?  If
        you switch to code mode you'll see some warning messages next to two lines
        of code -- why do you get those messages?  Once you think you have a good
        answer, continue to the next page.
      U3L19 - variable scoping problem debugging_instruction: "Here is the code from\nprevious
        page that has a subtle problem with it.  FIRST: run the app and try\nit to
        see the problem. NOTE: NaN stands for \"Not a Number\".   DO THIS: figure\nout
        what's happening, where, and fix the problem.  We'll explain the issue\non
        the next page. \n"
      U3L19 - write var and string with same name_instruction: |
        Now look at this
        example. We’ve added another write statement.  Before you run the code, see
        if you can predict what the output will be.  Seriously, write it down. THEN
        run the code, mess with it if you like, and continue to the next page for
        an explanation.
      U3L2 Using Simple Commands_instruction: |
        Draw a square using only moveForward
        and turnLeft.  The square should be drawn above and to the left of the turtle's
        starting position.
      U3L2_Turtle3by3Grid_instruction: |
        Draw a 3x3 grid above and to the right of
        the turtle. Try to do so with the fewest number of commands possible. NOTE:
        This is a very challenging problem.  You may need to play with it for a while
        and tweak it.  You might also consider using pencil and paper to sketch your
        ideas.
      U3L2_TurtleSquare_right_instruction: |
        Draw a square using only moveForward
        and turnLeft, but this time, make the square appear ABOVE and to the RIGHT
        of the starting location.
      XML Scratchpad_instruction: Using this test level to grab xml for unit tests
