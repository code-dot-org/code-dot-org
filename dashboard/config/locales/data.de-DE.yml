"de":
  data:
    script:
      name:
        20-hour:
          desc: Einführung in die Informatik bis 8. Schuljahr
          Unplug1: Teil 1
          Maze: Teil 2
          Unplug2: Teil 3
          Unplug3: Teil 4
          Artist: Teil 5
          Unplug4: Teil 6
          Artist2: Teil 7
          Unplug5: Teil 8
          Farmer: Teil 9
          Unplug6: Teil 10
          Artist3: Teil 11
          Unplug7: Teil 12
          Farmer2: Teil 13
          Unplug8: Teil 14
          Artist4: Teil 15
          Unplug9: Teil 16
          Farmer3: Teil 17
          Unplug10: Teil 18
          Artist5: Teil 19
          Unplug11: Teil 20
        Hour of Code:
          desc: Programmierstunde
          Maze: Teil 1
        Edit Code:
          desc: Code bearbeiten (beta)
          MazeEC: Stufe 1
        2014 Levels:
          desc: Hüpfen (beta)
          Bounce: Stufe 1
        Builder Levels:
          desc: von Benutzern erstellte Aufgaben (beta)
          Custom: Stufe 1
        Flappy Levels:
          desc: Flappy Bird
          Flappy: Stufe 1
        Jigsaw Levels:
          desc: Puzzle (beta)
          Jigsaw: Stufe 1
        Step Levels:
          desc: Labyrinth (Beta)
          MazeStep: Bühnen-Schritt
        edit-code:
          desc: Code bearbeiten (beta)
          MazeEC: Stufe 1
          Applab: Teil 2
          ArtistEC: Teil 3
          StudioEC: Teil 4
        events:
          desc: Hüpfen (beta)
          Bounce: Stufe 1
          Studio: Teil 2
        builder:
          desc: von Benutzern erstellte Aufgaben (beta)
          Custom: Stufe 1
        flappy:
          desc: Flappy Bird
          Flappy: Stufe 1
        jigsaw:
          desc: Puzzle (beta)
          Jigsaw: Stufe 1
        step:
          desc: Labyrinth (Beta)
          MazeStep: Bühnen-Schritt
        wordsearch:
          desc: Buchstabierwettbewerb (beta)
          WordSearch: Stufe 1
    game:
      name:
        Unplug1: Einführung in die Informatik
        Maze: Das Labyrinth
        Multi: Multiple-Choice Sachen
        Unplug2: Computerorientiertes Denken
        Unplug3: Programmieren auf Millimeterpapier
        Artist: Der Künstler
        Unplug4: Algorithmen
        Artist2: Der Künstler 2
        Unplug5: Funktionen
        Farmer: Der Bauer
        Unplug6: Bedingungen
        Artist3: Der Künstler 3
        Unplug7: Lieder schreiben
        Farmer2: Der Bauer 2
        Unplug8: Abstraktion
        Artist4: Der Künstler 4
        Unplug9: Relais-Programmierung
        Farmer3: Der Bauer 3
        Unplug10: das Internet
        Artist5: Der Künstler 5
        Unplug11: Zusammenfassung
        MazeEC: Das Labyrinth
        Bounce: Bounce
        Flappy: Flappy Bird
        Jigsaw: Puzzle
        MazeStep: Labyrinth-Schritt-Modus
        Wordsearch: Wörtersuche
        Webapp: App-Labor
        ArtistEC: Der Künstler
        TextMatch: Text Spiel
        StudioEC: Play Lab
        Applab: App-Labor
        NetSim: Internet-Simulator
        Custom: Künstler
        CustomStudio: Play Lab
    trophy:
      name:
        Bronze: Bronze
        Silver: Silber
        Gold: Gold
    concept:
      description:
        sequence: Sequenz
        if: Wenn-Baustein
        if_else: Wenn-Dann-Baustein
        loop_times: Wiederhole-Anzahl-Baustein
        loop_until: Wiederhole-Bis-Baustein
        loop_while: Solange-Baustein
        loop_for: Zähler-Baustein
        function: Funktionen
        parameters: Funktionen mit Parametern
    level:
      instructions:
        maze_2_2: 'Kannst du mir helfen, das freche Schwein zu fangen? Stecke ein
          paar „vorwärts bewegen“-Bausteine zusammen und drücke „Ausführen“, um mir
          zu helfen. '
        maze_2_1: Dieses Schwein lässt meine Federn zu Berge stehen. Hilf mir es zu
          finden!
        maze_2_2_5: Folge dem Weg und führe mich zum Schwein. Lass mich nicht ins
          TNT laufen, sonst fliegen die Federn!
        maze_2_3: Führe mich zu dem grünen Bösewicht! (Pass auf das TNT auf)
        maze_2_4: Bleibe ruhig – und hilf mir, das böse Schwein zu finden. Sonst werde
          ich noch wütend!
        maze_2_5: Es gibt einen Weg, mit dem ich mit nur zwei Bausteinen zum grünen
          Schweinchen komme. Findest du ihn?
        maze_2_6: Versuche mich mit nur drei Blöcken zum grünen Eindringling zu bringen.
        maze_2_7: Hilf mir dieses böse Schweinchen mit möglichst wenigen Bausteinen
          zu erwischen. Verwende mehr als einen „Wiederholen“-Baustein.
        maze_2_8: 'Wenn ein Baustein grau ist, kannst du ihn nicht löschen. Löse die
          Aufgabe mit dem „Wiederholen“-Baustein, der die Aktionen darin 3 mal wiederholt.
          Versuche die folgenden 3 Bausteine in den grauen „Wiederholen“-Baustein
          zu stecken: Bewegen, Bewegen, Drehen.'
        maze_2_9: OK, probiere den neuen „Wiederholen-bis“-Baustein aus – dieser wiederholt
          alle Aktionen darin, bis ich das grüne Schwein erreiche.
        maze_2_10: Okay, eine letzte Übung - kannst du das mit nur 4 Bausteinen lösen?
        maze_2_11: Hallo Mensch. Ich Zombie. Ich hungrig. Muss… zur… Sonnenblume…
          gelangen. Kannst du mich mit nur 5 Bausteinen dorthin bringen?
        maze_2_12: OK, das ist ähnlich, aber etwas anders. Schaffst du es in nur 5
          Bausteinen?
        maze_2_13: 'Nutze den neuen "Wenn" Baustein um zu entscheiden wann ich mich
          drehen soll. Hinweis: Du brauchst nur einen weiteren Baustein, aber schau
          dir an wie wir es gemacht haben um es beim nächsten Mal alleine machen zu
          können.'
        maze_2_14: Ok, es ist wie die letzte Aufgabe, aber vergiss nicht wie du den
          "Wenn" Baustein und den "Wiederholen" Baustein zusammen verwendet hast.
        maze_2_15: Sonnenblume haben will! Benutze einen "Wenn" Baustein um mich mit
          so wenig Bausteinen wie möglich dort hin zu bringen.
        maze_2_16: Ok, lass uns das nochmal üben. Das ist wieder beinahe dasselbe,
          aber hüte dich vor den fleischfressenden Pflanzen!
        maze_2_17: Der "Wenn-Ansonsten" Baustein überprüft eine Bedingung und macht
          dann eine Sache ODER eine andere. Versuche den neuen Baustein zu verwenden
          um mich zu der Sonnenblume zu bringen.
        maze_2_18: Noch eine Übung mit dem "Wenn-Ansonsten" Baustein, schaffst du
          es mit dem ersten Versuch?
        maze_2_19: Kannst du nur 3 Bausteine hinzufügen um mir mit einem komplexen
          Labyrinth zu helfen? Wenn du es richtig machst, kann ich jeden kurvigen
          Weg gehen, unabhängig von der Länge.
        turtle_1_1: Hallo, ich bin ein Künstler. Du kannst Code schreiben, um mich
          fast alles malen zu lassen. Benutze ein paar Bausteine um mich die grauen
          Linien im Bild übermalen zu lassen.
        turtle_1_2: 'Lass uns ein Quadrat zeichnen! Tipp: Verwende deine Lieblingsfarbe,
          indem du sie mit dem neuen „Farbe festlegen“-Baustein auswählst.'
        turtle_1_3: Zeichne ein Viereck mit nur 3 Bausteinen.
        turtle_1_4: 'Zeichne ein Dreieck, dessen Seiten alle unterschiedliche Farben
          haben. Verwende dazu die „zufällige Farbe“-Option, die jedes Mal eine andere
          Farbe auswählt. Hinweis: Du musst herausfinden wie weit du dich an den Ecken
          drehen musst. Klicke dazu auf die Zahl im Dreh-Baustein!'
        turtle_1_5: Lass uns üben! Zeichne ein Dreieck und dann ein Quadrat, um einen
          Briefumschlag zu zeichnen.
        turtle_1_6: 'Kannst du herausfinden wie man dieses Dreieck und Quadrat zeichnet?
          Tipp: Zuerst das Dreieck zeichnen, dann rechne aus wie viele Umdrehungen
          benötigt sind, bevor du das Quadrat zeichnest.'
        turtle_1_7: Ok, lass es uns ein wenig schwieriger machen - mal schauen, ob
          du diese grüne Brille zeichnen kannst. Die Quadrate haben eine Kantenlänge
          von jeweils 100 Pixel und sie sind 50 Pixel von einander entfernt. Vergiss
          nicht Grün zu verwenden!
        turtle_1_8: Ok, versuche herauszufinden was passiert, wenn du diesen Code
          ausführst (oder drücke „Programm Starten“ um es zu versuchen). Danach wiederhole
          es so oft, bis die Zeichnung fertig ist. Die Farben werden jedes Mal unterschiedlich
          sein.
        turtle_1_9: Kannst du herausfinden mit welcher Nummer du das Fragezeichen
          ersetzen musst, um einen Kreis zu zeichnen?
        turtle_1_10: 'Du hast es geschafft! Jetzt, zeichne was du willst! Hier sind
          ein paar Ideen: ein Strichmännchen, eine Schneeflocke, oder eine Spirale.
          Probiere auch den neuen "Setze Breite"-Baustein aus. Viel Spaß!'
        turtle_4_1: 'Kannst du ein Dreieck (mit den Kanten von 100 Pixeln) mit nur
          3 Bausteinen zeichnen? Tipp: Verwende einen "Wiederholen"-Baustein.'
        turtle_4_2: Füge einen "nach rechts drehen um 90 Grad" Baustein irgendwo in
          der Mitte des Programmes ein, welches sich bereits auf dem Arbeitsplatz
          befindet, um diese Dreiecke zu zeichnen.
        turtle_4_3: Ok, hier ist das Programm das du geschrieben hast um ein einzelnes
          Dreieck zu zeichnen. Kannst du einen "Wiederholen"- und "Drehen"-Baustein
          hinzufügen um eine hübsche Blume zu zeichnen?
        turtle_4_4: 'Hier ist das gleiche Programm aus der vorherigen Aufgabe, aber
          diesmal nur 36 Grad drehend nach dem Zeichnen jedes Dreiecks. Wie oft muss
          das wiederholt werden? (Hinweis: nach 360 Grad wird die Zeichnung zu einem
          vollen Kreis)'
        turtle_4_5: 'Hier ist das gleiche Programm aus der vorherigen Aufgabe, aber
          diesmal werden die Drehungen 36 Mal wiederholt. Wie viel Grad müssten die
          Drehungen sein? (Hinweis: nach 360 Grad wird die Zeichnung zu einem vollen
          Kreis)'
        turtle_4_6: Kannst du ein Viereck mit der Kantenlänge von 20 Pixeln mit nur
          3 Bausteinen zeichnen?
        turtle_4_7: 'Hier ist das Programm aus der vorherigen Aufgabe, das Quadrate
          zeichnen kann. Kannst du es wiederholen, damit es 10 angrenzende Quadrate
          zeichnet, die zusammen aussehen wie eine Leiter? Hinweis: du brauchst nur
          zwei weitere Bausteine.'
        turtle_4_8: Hier ist die Lösung für die vorherige Aufgabe. Kannst du nur zwei
          weitere Bausteine benutzen um die Zeichnung zu beenden?
        turtle_4_9: Hier ist die Lösung für die vorherige Aufgabe. Wie weit muss gedreht
          werden um die Zeichnung zu beenden? (Du musst wahrscheinlich ein paar Mal
          probieren)
        turtle_4_10: Hier ist die Lösung für die vorherige Aufgabe. Wie oft musst
          du wiederholen um die Zeichnung zu beenden?
        turtle_4_11: Ändere die Werte im "Drehen"- und "Wiederholen"-Baustein um verschiedene
          Muster zu zeichnen. Oder experimentiere und ändere das restliche Programm
          um zu Malen was du willst.
        maze_karel_1_1: Hallo, ich bin ein Bauer. Ich brauche deine Hilfe beim Glätten
          meines Feldes um es für das Säen vorzubereiten. Bewege mich zu dem Erdblock
          und nutze den "Entfernen" Baustein um diesen zu entfernen.
        maze_karel_1_2: Anschließend verschiebe mich in das Loch und fülle es mit
          zwei Schaufelladungen Erde mit dem "Füllen"-Block.
        maze_karel_1_3: Verschiebe mich zum Erdhaufen und sag mir, wie viele Schaufeln
          entfernt werden sollen. Verwende dabei so wenig Bausteine wie möglich.
        maze_karel_1_4: 'Kannst du mir helfen alle vier Haufen Erde zu entfernen?
          Hinweis: Nutze einen "Wiederholen" Block wenn du kannst.'
        maze_karel_1_5: 'Hilf diese Löcher mit 5 Schaufeln Erde aufzufüllen. Tipp:
          Du kannst einen "Wiederholen" Baustein innerhalb des Bausteins "Wenn" setzen.'
        maze_karel_1_6: Entferne alle Erdhaufen, mit so wenig Bausteine wie möglich.
          Die neuen Optionen im Dropdown-Menü auf dem "Wenn"-Baustein sagen mir, ob
          ich auf einem Haufen oder einem Loch stehe.
        maze_karel_1_7: Wow, ich habe ein wirklich tiefes Loch gefunden! Ich weiß
          nicht wie viele Schaufeln von Erde es braucht. Kannst du ein Programm schreiben,
          das es ausfüllt, bis der Boden eben ist?
        maze_karel_1_8: Hilf mir das Loch am Ende des Feldes zu füllen mit so wenigen
          Bausteinen wie möglich.
        maze_karel_1_9: 'Hilf mir, all diese Haufen Erde zu entfernen. Versuche so
          wenig Bausteine wie möglich zu benutzen. Hinweis: Versuche den „Solange“-Baustein
          zu benutzen.'
        maze_karel_1_10: Weil ich Überstunden mache und es deshalb draußen schon dunkel
          ist, kann ich nicht erkennen wie groß die Häufen sind. Jetzt habe ich nicht
          alle Optionen, die ich sonst beim "solange"-Baustein hatte. Bewege mich
          am Feld entlang und wenn dort ein Haufen ist, dann entferne ihn.
        maze_karel_1_11: 'Es ist immer noch dunkel draußen. Bewege mich am Feld entlang.
          Wenn dort ein Haufen ist, dann entferne ihn. Ist dort jedoch ein Loch, dann
          fülle es auf. Hinweis: verwende das Aufklappmenü des "wenn"-Bausteins.'
        turtle_2_1: 'Hallo. Mich Zombie Künstler. Mich lieben zeichnen! Hilf mir ein
          Quadrat in einer besonderen Farbe zu zeichnen. Wichtiger Hinweis: du hast
          die gleichen Bausteine, aber sie wurden jetzt in Kategorien sortiert.'
        turtle_2_2: Willkommen bei der Verwendung von Funktionen. Diese lassen dich
          neue Bausteine definieren. Probiere den neuen "Zeichne ein Viereck"-Baustein
          aus, um ein kleines, grünes 50x50 Quadrat zu zeichnen. Den Baustein findest
          du in der "Funktionen"-Kategorie.
        turtle_2_3: Verwende den "Wiederholen"-Baustein (in der "Schleifen"-Kategorie),
          um 3 Quadrate, jeweils 120 Grad entfernt, der Größe 100 zu zeichnen. Verwende
          dazu 3 verschiedene, zufällige Farben.
        turtle_2_4: 'Jetzt wird es interessant. Verändere den Code um 36 Quadrate
          zu zeichnen, 100 Pixel breit und jeweils 10 Grad von einander entfernt.
          Hinweis: du kannst den Schiebregler verwenden, um mich schneller werden
          zu lassen.'
        turtle_2_5: Zeichne Quadrate mit Seitenlängen von 50, 60, 70, 80 und 90 Pixel.
          Du wirst die "Zeichne ein Quadrat"-Funktion fünf Mal benötigen.
        turtle_2_6: 'Ok, dieses Programm verwendet einen Zähler, um die gleichen Quadrate
          vom letzten Mal zu zeichnen. Du möchtest, dass die Quadrate alle die selbe
          Größe haben wie der Zähler, deshalb verwende den "Zähler"-Baustein. Hinweis:
          Er ist in der Variablen Kategorie.'
        turtle_2_7: Das ist ein Programm, das Spiralen zeichnet. Jedoch sind die Bausteine
          deaktiviert, weshalb sie nicht ausgeführt werden. Erstelle ein neues Programm,
          welches einen "Zählen mit"-Baustein (in der Schleifen Kategorie) und einen
          "Zähler"-Baustein (in der Variablen Kategorie) verwendet, um die gleiche
          Spirale zu zeichnen.
        turtle_2_7_5: Es gibt eine neue "zeichne einen Schneemann"-Funktion (in der
          Funktionen Kategorie). Zeichne zwei Schneemänner, mit der Höhe 250 und 100.
        turtle_2_8: Das ist ein bisschen knifflig. Verwende die "zeichne einen Schneemann"-Funktion
          und den neuen "springe vorwärts"-Baustein (in der Aktionen Kategorie). Zeichne
          3 Schneemänner in verschiedenen Farben, jeweils 100 Pixel von einander entfernt.
        turtle_2_9: 'Verwende eine "zähle mit"-Schleife, um eine Schneemann-Familie
          zu zeichnen. Verwende folgende Höhen: 110, 100, 90, 80. Die Schneemänner
          sollten alle 60 Pixel von einander entfernt sein.'
        turtle_2_10: Hier ist ein wenig Code, um mit verschiedenen Spiralen experimentieren
          zu können. Was passiert wenn du den Dreh-Betrag veränderst? Oder wenn du
          eine zufällige Farbe in der Schleife verwendest? Zeichne was du möchtest.
        maze_karel_2_1: 'Verwende die Bausteine um mir zu helfen alle Haufen wegzuräumen
          und alle Löcher im Boden aufzufüllen. Versuche Schleifen anstatt zu viele
          Bausteine zu verwenden. Hinweis: Du kannst eine Schleife in eine andere
          Schleife hinein setzen.'
        maze_karel_2_2: Wir haben unseren eigenen Baustein, der "fülle 5" heißt, definiert.
          Er ist jetzt in der Funktionen-Kategorie. Verwende diesen um mir dabei zu
          helfen die Löcher aufzufüllen.
        maze_karel_2_3: Verwende den neuen "fülle 5"-Baustein, damit ich alle Löcher
          auffülle. Du musst den "fülle 5"-Baustein aus der Funktionen-Kategorie herausziehen.
        maze_karel_2_4: Definiere eine neue Funktion, die 7 Schaufeln voller Erde
          beseitigt. Diese verwendest du um ein Programm zu schreiben, das mir hilft
          alle Häufen zu entfernen.
        maze_karel_2_5: Erstelle eine neue Funktion, die 6 Schaufeln voller Erde von
          einem Haufen entfernt und hilf mir mit der Funktion alle Haufen platt zu
          machen.
        maze_karel_2_6: Verwende zwei neue Funktionen, "fülle 8" und "entferne 8",
          um mir zu helfen die Haufen platt zu machen und die Löcher aufzufüllen.
        maze_karel_2_7: Da ist eine Kuh in meinem Feld. Schreibe eine Funktion, die
          mir hilft, der Kuh auszuweichen und den Haufen zu entfernen. Ziehe alle
          dafür dazu nötigen Bausteine in die neue Funktion.
        maze_karel_2_8: Verwende diese neue Funktion "vermeide die Kuh und entferne
          1", um mir zu helfen alle Haufen zu entfernen.
        maze_karel_2_9: OK, ist hier eine Funktion, die 4 verschiedene Erdhaufen in
          einer vertikalen Spalte entfernt. Versuche diese Funktion in einer Schleife,
          so dass du alle Haufen mit nur ein paar neuen Bausteinen entfernst.
        maze_karel_2_10: Bewege mich über das Feld und verwende diese beiden Funktionen,
          um mir zu helfen, alle Haufen zu entfernen und alle Löcher zu füllen.
        turtle_3_1: Diese Aufgabe zeigt, wie die Funktionen "Zeichne ein Quadrat"
          und "Zeichne einen Kreis" definiert sind.  Eine Funktion definieren, führt
          die Bausteine nicht aus.  Du musst den Bausteine "Zeichne ein Quadrat" ziehen,
          um ein Quadrat zu zeichnen.
        turtle_3_2: Benutze die "Zeichne Quadrat"-Funktion als Grundlage und erstelle
          eine "Zeichne Dreieck"-Funktion und verwende diese entsprechend.
        turtle_3_3: 'Zeichne mehrere dreieckige Zäune um die Katzen und einen quadratischen
          Zaun um die Kuh. Tipp: Am Besten du testest das Programm zwischen durch
          immer mal wieder.'
        turtle_3_4: Probiere mal, ob du herausfinden kannst, wie du die Funktionen
          "Zeichne Quadrat" und "Zeichne Dreieck" (und weitere) dazu benutzen kannst,
          ein Haus um den Löwen herum zu zeichnen.
        turtle_3_5: 'Erstelle jetzt eine neue "zeichne ein Haus"-Funktion und verwende
          sie um zwei Katzen unterzubringen. Hinweis: erstelle eine neue Funktion
          mit Hilfe des "mach etwas"-Bausteins und gib einen Namen für den Baustein
          ein.'
        turtle_3_6: 'Füge eine Eingabe, die "Länge" heißen soll, zu "zeichne ein Dreieck"
          hinzu, wie im Beispiel "zeichne ein Quadrat". Anschließend, zeichne verschieden
          große Dreiecke. (Hinweis: klicke auf den Stern, um bei einer Funktion eine
          Eingabe hinzu zufügen)'
        turtle_3_7: Füge eine Eingabe, die "Höhe" heißen soll, zu "zeichne ein Haus"
          hinzu und baue ein Haus, das groß genug für den Elefanten ist (die Kanten
          sollen 150 Pixel lang sein)
        turtle_3_8: Verändere "Male ein Haus" so, dass ich rechts unten in der Ecke
          stehe, nachdem ich ein neues Haus gemalt habe. Verwende diese geänderte
          Funktion um drei neue Häuser zu malen.
        turtle_3_9: Kannst du die "zeichne ein Haus"-Funktion ohne Hilfe wieder erstellen?
          Versuche es und zeichne anschließend eine ganze Reihe von Häusern.
        turtle_3_10: Glückwunsch, du hast jetzt schon viel gelernt. Jetzt kannst alles
          zeichnen was dir einfällt. Versuch doch mal einen Stern, ein Spirale, oder
          eine hübsche Schneeflocke.
        maze_karel_debug_seq_1: Willkommen zur "Fehlerbeseitigung"! Mein Code funktioniert
          nicht richtig. Kannst du das Problem finden und mein Programm reparieren,
          damit ich mein Feld flach bekomme und es bepflanzt werden kann?
        maze_karel_debug_seq_2: Was ist an diesem Programm falsch? Wie kannst du es
          reparieren, damit ich diesen Erdhaufen entfernen kann?
        maze_karel_debug_repeat: Suche und beseitige die Fehler in diesem Programm
          für mich, damit mein Feld wieder flach und schön wird.
        maze_karel_debug_while: Was musst du am Programm ändern, damit es mir hilft
          das Loch zu füllen?
        maze_karel_debug_if: Hilfe! Repariere das Programm, damit mein Feld komplett
          flach wird.
        maze_karel_debug_if_else: Überprüfe dieses Programm auf Fehler und beseitige
          sie, damit ich alle Löcher auffüllen und alle Erdhaufen entfernen kann.
        maze_karel_debug_function_1: Was musst du am Programm ändern, damit es mir
          hilft alle Erdhaufen zu entfernen?
        maze_karel_debug_function_2: Kannst du dieses Programm für mich auf Fehler
          überprüfen und sie beseitigen, damit ich mein Feld flach machen kann?
        maze_karel_debug_function_3: 'Bearbeite das Programm so, dass ich alle Erdhaufen
          von meinem Feld entferne. '
        turtle_5_1: Versuche, dieses Programm auszuführen und verändere es, um zu
          sehen, was passiert. Kannst du herausfinden, wie es funktioniert? (Oder
          lösche es und ersetze es durch etwas ganz anderes)
        turtle_5_2: Versuche, dieses Programm auszuführen und verändere es, um zu
          sehen, was passiert. Kannst du herausfinden, wie es funktioniert? (Oder
          lösche es und ersetze es durch etwas ganz anderes)
        turtle_5_3: Versuche, dieses Programm auszuführen und verändere es, um zu
          sehen, was passiert. Kannst du herausfinden, wie es funktioniert? (Oder
          lösche es und ersetze es durch etwas ganz anderes)
        turtle_5_4: Versuche, dieses Programm auszuführen und verändere es, um zu
          sehen, was passiert. Kannst du herausfinden, wie es funktioniert? (Oder
          lösche es und ersetze es durch etwas ganz anderes)
        turtle_5_5: Versuche, dieses Programm auszuführen und verändere es, um zu
          sehen, was passiert. Kannst du herausfinden, wie es funktioniert? (Oder
          lösche es und ersetze es durch etwas ganz anderes)
        turtle_5_6: Versuche, dieses Programm auszuführen und verändere es, um zu
          sehen, was passiert. Kannst du herausfinden, wie es funktioniert? (Oder
          lösche es und ersetze es durch etwas ganz anderes)
        maze_3_1: Ich muss zu diesem Schwein kommen! Schreibe ein paar Aufrufe von
          bewegen(); damit ich mir meine Eier zurückholen kann.
        maze_3_2: Schreibe mir ein Programm mit dem ich es bis zu dem Schwein schaffe.
        maze_3_3: Wie komme ich zum Schwein? Passe auf das ich nicht in den TNT-Sprengstoff
          laufe!
        maze_3_4: Argh! Schreibe mir ein Programm das mich um den TNT-Sprengstoff
          zum Schwein bringt.
        bounce_1: Hänge einen Baustein an den "Wenn linker Pfeil"-Baustein und drücke
          "Programm ausführen". Bewege jetzt das Paddel mit dem linken Pfeil um das
          Ziel zu erreichen.
        bounce_2: Hänge einen Baustein an den "Wenn rechter Pfeil"- und den "Wenn
          linker Pfeil"-Baustein. Bewege jetzt das Paddel um beide Ziele zu erreichen.
        bounce_3: Versuche jetzt etwas ähnliches mit dem "Wenn oben Pfeil"-Baustein.
          Bewege das Paddel zum oberen Ziel.
        bounce_4: Jetzt musst du vier Bausteine anhängen. Bewege das Paddel zu allen
          vier Zielen, um diese Aufgabe zu lösen.
        bounce_5: Wir werden jetzt einen Ball auf das Paddel runterfliegen lassen.
          Füge einen Baustein an den "Wenn Ball Paddel berührt"-Baustein um sicherzustellen,
          dass der Ball das Ziel erreicht.
        bounce_6: Jetzt ist das Ziel oben. Du musst Bausteine an beide "Wenn Ball
          auftrifft"-Bausteine anhängen um diese Aufgabe zu lösen.
        bounce_7: Füge jedem der "Wenn"-Bausteine weitere Bausteine hinzu. Lasse den
          Ball springen bis er das Ziel trifft.
        bounce_10: Jetzt gibt es oben ein Ziel. Hänge den "Erziele einen Punkt"- und
          den "Erziele Gegnerpunkt"-Baustein an den "Wenn Ball im Tor"- und "Wenn
          Ball Paddel verfehlt"-Baustein, um ein Spiel zu erstellen. Schau wie viele
          Punkte du erzielen kannst, bevor der Gegner zweimal gewinnt.
        bounce_11: Du kannst nun Bausteine zum "Wenn ausführen" Baustein hinzufügen.
          Du musst den "Starte neuen Ball" Baustein an mehreren Orten hinzufügen.
          Versuche die Szene oder die Geschwindigkeit des Schlägers und des Balls
          und sieh wie viele Punkte du erzielen kannst, bevor dein Gegner zwei Punkte
          macht.
        bounce_12: Baue dein eigenes Bounce-Spiel. Du kannst alle Grafiken und Regeln
          ändern. Wenn du fertig bist, klick "Abschliessen" um dein Spiel deinen Freunden
          zu zeigen.
        Custom_builder: Ziehe Bausteine aus deiner Werkzeugkiste auf den Arbeitsplatz
          um den Level zu zeichnen, welchen du erstellen möchtest. Drücke auf "Ausführen"
          wenn du bereit bist.
        flappy_1: Füge dem "Beim Klicken"-Baustein einen weiteren Baustein hinzu und
          drücke dann "Ausführen". Klicke oder tippe auf den Bildschirm, um Flappy
          zum Ziel zu bewegen.
        flappy_2: Nun haben wir etwas Boden hinzugefügt. Füge dem "Wenn auf Boden
          gestürzt"-Baustein einen weiteren Baustein hinzu. Dein Programm benötigt
          einen "Spiel beendet"-Baustein, wenn Flappy zu Boden stürzt.
        flappy_3: Der "Wenn ausführen" Baustein erlaubt dir Code auszuführen, wenn
          dein Spiel startet. Versuche die Geschwindigkeit zu ändern und zum Ziel
          zu fliegen.
        flappy_4: Flappy fliegt durch Hindernisse hindurch, es sei denn, du programmierst
          ihn so, dass er abstürzt. Füge einen Baustein zum "Wenn Hindernis getroffen"-Baustein
          hinzu. Dein Code muss das Spiel beenden, wenn Flappy gegen die ersten Rohre
          fliegt.
        flappy_5: Füge einen Punktezähler hinzu, der Punkte zählt, wenn Flappy es
          an Hindernissen vorbeischafft. Füge ihn zum "Wenn Hindernis überwunden"-Baustein
          hinzu und erziele einen Punkt, indem du Flappy durch die erste Reihe von
          Rohren fliegst.
        flappy_6: Versuche, ob du auch dann einen Punkt erzielen kannst, wenn Flappy
          schwächer oder stärker flattert.
        flappy_7: Versuche als nächstes die Szene zu ändern indem du einen weitern
          Baustein zum "Wenn ausführen" Baustein hinzufügst.
        flappy_8: Du kannst jederzeit Hintergründe festlegen, nicht nur zu Spielbeginn.
          Versuche, einen zufälligen Hintergrund zu setzen, wenn andere Ereignisse
          stattfinden, zum Beispiel wenn ein Hindernis überwunden wird.
        flappy_9: 'Jetzt sorgen wir für etwas Abwechslung: Statt das Spiel zu beenden,
          setze den Punktestand auf 0 zurück, wenn du auf ein Hindernis triffst.'
        flappy_11: Erstelle dein eigenes Flappy Spiel. Du kannst alle Grafiken, die
          Regeln und sogar die Schwerkraft verändern. Wenn du fertig bist, klicke
          auf "Teilen" um das Spiel deinen Freunden zu zeigen.
        flappy_k1_1: Flappy spielen
        flappy_k1_2: Füge dem "Beim Klicken"-Baustein einen weiteren Baustein hinzu
          und drücke dann "Ausführen". Klicke oder tippe auf den Bildschirm, um Flappy
          zum Ziel zu bewegen.
        flappy_k1_3: Nun haben wir etwas Boden hinzugefügt. Füge dem "Wenn auf Boden
          gestürzt"-Baustein einen weiteren Baustein hinzu. Dein Programm benötigt
          einen "Spiel beendet"-Baustein, wenn Flappy zu Boden stürzt.
        flappy_k1_4: Der "Wenn ausführen" Baustein erlaubt dir Code auszuführen, wenn
          dein Spiel startet. Versuche die Geschwindigkeit zu ändern und zum Ziel
          zu fliegen.
        flappy_k1_5: Flappy fliegt durch Hindernisse hindurch, es sei denn, du programmierst
          ihn so, dass er abstürzt. Füge einen Baustein zum "Wenn Hindernis getroffen"-Baustein
          hinzu. Dein Code muss das Spiel beenden, wenn Flappy gegen die ersten Rohre
          fliegt.
        flappy_k1_6: Füge einen Punktezähler hinzu, der Punkte zählt, wenn Flappy
          es an Hindernissen vorbeischafft. Füge ihn zum "Wenn Hindernis überwunden"-Baustein
          hinzu und erziele einen Punkt, indem du Flappy durch die erste Reihe von
          Rohren fliegst.
        flappy_k1_7: Versuche mehrere Punkte zu erzielen, indem du die ersten Rohre
          umfliegst.
        flappy_k1_8: Versuche als nächstes die Szene zu ändern indem du einen weitern
          Baustein zum "Wenn ausführen" Baustein hinzufügst.
        flappy_k1_9: Versuche den Charakter zu ändern, idem du einen "Setze Spieler"
          Baustein zum "Wenn ausführen" Baustein hinzufügst.
        jigsaw_1: Klicke auf den Baustein
        jigsaw_2: Ziehe den Baustein zum Ziel
        jigsaw_3: Ordne die Teile an um das Bild zu erstellen
        jigsaw_4: Ordne die Teile an um das Bild zu erstellen
        jigsaw_5: Ordne die Teile an um das Bild zu erstellen
        jigsaw_6: Ordne die Teile an um das Bild zu erstellen
        jigsaw_7: Ordne die Teile an um das Bild zu erstellen
        jigsaw_8: Ordne die Teile an um das Bild zu erstellen
        jigsaw_9: Ordne die Teile an um das Bild zu erstellen
        jigsaw_10: Ordne die Teile an um das Bild zu erstellen
        jigsaw_11: Ordne die Teile an um das Bild zu erstellen
        jigsaw_12: Ordne die Teile an um das Bild zu erstellen
        jigsaw_13: Repariere das Puzzle!
        mazestep_1: Labyrinth-Schritt-Beschreibung hier
        mazestep_2: Labyrinth-Schritt-Beschreibung hier
        mazestep_3: Labyrinth-Schritt-Beschreibung hier
        mazestep_4: Labyrinth-Schritt-Beschreibung hier
        mazestep_5: Labyrinth-Schritt-Beschreibung hier
        studio_c2_1: Kannst du diesen Hund "Hallo Welt" sagen lassen?
        studio_c2_2: Kannst du erst den Hund und danach die Katze etwas sagen lassen?
        studio_c2_3: Kannst du ein Program schreiben, bei welchem der Hund auf die
          Katze zugeht?
        studio_c2_4: Kannst du ein Programm schreiben, bei welchem der Hund zur Katze
          geht und die Katze "Hallo" sagt, sobal der Hund sie erreicht?
        studio_c2_5: Kannst du ein Programm schreiben, bei welchem der Tintenfisch
          "Hallo" sagt, wenn er geklickt wird?
        studio_c2_6: Kannst du ein Programm schreiben um den Pinguin mit den Pfeilttasten
          zu steuern und alle Ziele zu treffen?
        studio_c2_7: Der "wiederholen für immer" Baustein erlaubt es dir Code ohne
          Unterbruch auszuführen. Kannst du mehr Bausteine hinzufügen um den Dinosaurier
          wiederholt auf und ab laufen zu lassen?
        studio_c2_8: Kannst du den Pinguin "Autsch!" sagen lassen und einen "Getroffen"
          Ton abspielen, wenn er in den Dinosaurier läuft, und ihn dazu mit den Pfeiltasten
          zu bewegen?
        studio_c2_9: Kannst du einen Baustein hinzufügen um eine Punkt zu erzeilen,
          wenn der Pinguin in den Tintenfisch rennt, und ihn dann mit den Pfeiltasten
          bewegen bis du einen Punkt erzielst?
        studio_c2_10: Kannst du Bausteine hinzufügen um den Hintergrund und die Geschwindigkeit
          des Pinguins zu ändern, und ihn dann mit den Pfeiltasten bewegen bis du
          punktest?
        studio_c2_11: Erzähl deine eigene Geschichte. Wenn du fertig bist, klick auf
          "Abschliessen" um deine Geschichte deinen Freunden zu zeigen.
        studio_c3_story_1: Kannst du diesen Hund "Hallo Welt" sagen lassen?
        studio_c3_story_2: Kannst du erst den Hund und danach die Katze etwas sagen
          lassen?
        studio_c3_story_3: Kannst du ein Program schreiben, bei welchem der Hund auf
          die Katze zugeht?
        studio_c3_story_4: Kannst du ein Programm schreiben, bei welchem der Hund
          zur Katze geht und die Katze "Hallo" sagt, sobal der Hund sie erreicht?
        studio_c3_story_5: Kannst du einen Baustein hinzufügen um den Tintenfisch
          glücklich zu machen?
        studio_c3_story_6: Erzähl deine eigene Geschichte. Wenn du fertig bist, klick
          auf "Abschliessen" um deine Geschichte deinen Freunden zu zeigen.
        studio_c3_game_1: Kannst du ein Programm schreiben, bei welchem der Tintenfisch
          "Hallo" sagt, wenn er geklickt wird?
        studio_c3_game_2: Kannst du ein Programm schreiben um den Pinguin mit den
          Pfeilttasten zu steuern und alle Ziele zu treffen?
        studio_c3_game_3: Der "wiederholen für immer" Baustein erlaubt es dir Code
          ohne Unterbruch auszuführen. Kannst du mehr Bausteine hinzufügen um den
          Dinosaurier wiederholt auf und ab laufen zu lassen?
        studio_c3_game_4: Kannst du den Pinguin "Autsch!" sagen lassen und einen "Getroffen"
          Ton abspielen, wenn er in den Dinosaurier läuft, und ihn dazu mit den Pfeiltasten
          zu bewegen?
        studio_c3_game_5: Kannst du einen Baustein hinzufügen um eine Punkt zu erzeilen,
          wenn der Pinguin in den Tintenfisch rennt, und ihn dann mit den Pfeiltasten
          bewegen bis du einen Punkt erzielst?
        studio_c3_game_6: Kannst du Bausteine hinzufügen um den Hintergrund und die
          Geschwindigkeit des Pinguins zu ändern, und in dann mit den Pfeiltasten
          zu bewegen bis du punktest?
        studio_c3_game_7: Entwickele Dein eigenes Spiel. Wenn Du fertig bist, klicke
          auf "Fertig" und lass' Deine Freunde das Spiel auf ihren Smartphones ausprobieren.
        studio_playlab_1: Der Pinguin will "hallo" sagen - kannst du ihm helfen?
        studio_playlab_2: Höhlenjunge (Schauspieler 1) und Höhlenmädchen (Schauspieler
          2) wollen "hallo" zueinander sagen. Kannst du ihnen dabei helfen den "reden"
          Block zweimal zu benutzen?
        studio_playlab_3: Kannst du dem Tennis Mädchen helfen die Fahne zu bekommen?
        studio_playlab_4: Kannst du dem Tennisspieler (Schauspieler 1) helfen zur
          Tennisspielerin (Schauspielerin 2) zu kommen und ein Geräusch abzuspielen
          wenn er ankommt?
        studio_playlab_5: Kannst du Spacebot helfen, "Willkommen Erdlinge" zu sagen,
          wenn es geklickt wird? Vergiss nach dem Ausführen nicht, auf es zu klicken
        studio_playlab_6: Kannst du der Hexe helfen sich zu bewegen, um alle magischen
          Feuerbälle einzusammeln? Nutze die Tasten hoch/runter/rechts/links.
        studio_playlab_7: Der Block "wiederhole dauerhaft" ermöglicht dir, Code ständig
          auszuführen. Kannst Du Blöcke hinzufügen und dem Zauberer helfen, ständig
          nach rechts und links zu gehen?
        studio_playlab_8: Der Block "wiederhole dauerhaft" ermöglicht dir, Code ständig
          auszuführen. Kannst Du Blöcke hinzufügen und dem Zauberer helfen, ständig
          nach rechts und links zu gehen?
        studio_playlab_9: Bestimme den Hintergrund für diese Alien-Invasion und hilf
          dem Spacebot, schneller zu den Aliens zu gelangen, indem Du die Geschwindigkeit
          einstellst. Dann bewege ihn mit den Pfeiltasten um zum Alien zu gelangen
          und benachrichtige alle anderen.
        studio_playlab_10: Entwickele Dein eigenes Spiel. Wenn Du fertig bist, klicke
          auf "Fertig" und lass' Deine Freunde das Spiel auf ihren Smartphones ausprobieren.
        studio_iceage_hello1: Sid wants to gather everyone for a new adventure. Can
          you help him say "hello" by dragging the `say` block out into the work area
          and typing the word "hello" inside?
        studio_iceage_hello2: Sid (actor 1) found Manny (actor 2) and wants to invite
          him on the adventure.  Help them greet each other by using the the "actor
          say" block twice.
        studio_iceage_move_to_flag: Scrat is looking for his acorn!  Help him go the
          last 200 pixels using the "move" block.
        studio_iceage_move_to_actor: Diego (actor 1) is searching for Manny (actor
          2). Help Diego get 200 pixels down to Manny using the "move actor" block.
          Next, connect a block to the "when actor touches" event to play a sound
          when they find each other.
        studio_iceage_repeat: The "repeat forever" block allows you to run code continuously.
          Can you attach blocks to it to help Granny get some exercise by moving left
          and right repeatedly?
        studio_iceage_click_hello: Can you help Sid do a final call for friends when
          clicked? Don’t forget to click on him after you hit Run.
        studio_iceage_move_events: Scrat is still looking for acorns! Help him scamper
          around by attaching the "move" block to each of the events and changing
          the direction to work for each arrow key. When you’re done, click Run and
          try to collect all of the acorns.
        studio_iceage_sound_and_points: We’ve provided most of the code that keeps
          Granny moving left and right, as well as the code to move Sid around the
          screen. Can you finish the code and add blocks to the "when actor touches"
          event to make it so that you both play a sound and score a point when Sid
          and Granny collide? Press Run to play the game.
        studio_iceage_warn_ice_age: Everyone needs to move faster because an ice age
          is coming! Change the background to "icebergs" and set Sid’s speed to fast,
          then press Run and move him to Diego to warn him.
        studio_iceage_throw_hearts: Sid wants to let his grandmother, Granny, know
          that he loves her. Use the "actor throw" command to have Sid (actor 1) throw
          hearts at Granny (actor 2)! Set Granny's mood to happy when she gets hit
          with the hearts.
        studio_iceage_free_play: Time to create your own game or story! When you're
          done, click Finish to let friends try your game on their phones, tablets,
          or computers!
        studio_gumball_hello1: Anais will neue Freunde machen. Können Sie ihr helfen
          "Hallo" zu sagen,  indem Sie den Block "say" heraus in den Arbeitsbereich
          ziehen und das Wort "Hallo" zu tippen?
        studio_gumball_hello2: Darwin (Schauspieler 1) und seinem Bruder Gumball (Schauspieler
          2) gehen zur Schule.  Helfen sie einander zu grüßen, indem Sie den "Schauspieler
          sagen" Block zweimal benutzen.
        studio_gumball_move_to_flag: Banana Joe soll ein gefundenes Fressen-Rennen
          zu gewinnen!  Helfen Sie ihm die letzten 200 Pixel mit dem "verschieben"-Block
          zu gehen.
        studio_gumball_move_to_actor: Gumball (actor 1) and Darwin (actor 2) are late
          for the field day! Help Gumball get 200 pixels down to Darwin using the
          "move actor" block.  Next, connect a block to the "when actor touches" event
          to play a sound when they find each other.
        studio_gumball_repeat: The "repeat forever" block allows you to run code continuously.  Can
          you attach blocks to it to help Gumball warm up for his race by moving left
          and right repeatedly?
        studio_gumball_click_hello: Can you help Anton announce the start of a race
          by saying "Ready, set, go!"? To test your program, don’t forget to click
          Anton after you click Run!
        studio_gumball_move_events: Darwin is in the flag gathering contest! Help
          him run around by attaching the "move" block to each of the events. When
          you’re done, click Run and try to collect all of the flags.
        studio_gumball_sound_and_points: We’ve provided most of the code that keeps
          Anton (actor 2) moving left and right, as well as the code to move Banana
          Joe (actor 1) around the screen.  Can you finish the code and add blocks
          to the "when actor touches" event to make it so that you both play a sound
          and score a point when Banana Joe and Anton collide?  Press Run to play
          the game.
        studio_gumball_warn_food_fight: Darwin just escaped a food fight! Change the
          background to "characters" and set Darwin’s speed to fast, then press Run
          and move him to Penny to warn her.
        studio_gumball_join_food_fight: Join the food fight! Use the "actor throw
          item right" command to have Banana Joe (actor 1) throw food at Anton (actor
          2)! Set Anton’s mood to angry when he gets hit.
        studio_gumball_free_play: Create your own game or story. When you're done,
          click Finish to let friends try your game on their phones, tablets, or computers!
        studio_full_sandbox: Entwickele Dein eigenes Spiel. Wenn Du fertig bist, klicke
          auf "Fertig" und lass' Deine Freunde das Spiel auf ihren Smartphones ausprobieren.
        studio_k1_1: Kannst du diesen Hund "Hallo Welt" sagen lassen?
        studio_k1_2: Kannst du erst den Hund und danach die Katze etwas sagen lassen?
        studio_k1_3: Kannst du ein Program schreiben, bei welchem der Hund auf die
          Katze zugeht?
        studio_k1_4: Lass den Hund auf die Katze zugehen und die Katze "Hallo" sagen,
          wenn er dort ankommt.
        studio_k1_5: Kannst du einen Baustein hinzufügen um den Tintenfisch glücklich
          zu machen?
        studio_k1_6: Erzähl deine eigene Geschichte! Bewege die Katze und den Hund,
          und bring sie zum reden.
        maze_wordsearch_k_1: Bewege mich, um das Wort EAST (Osten) zu schreiben
        maze_wordsearch_k_2: Bewege mich, um das Wort SOUTH (Süden) zu schreiben
        maze_wordsearch_k_3: Bewege mich, um das Wort WEST (Westen) zu schreiben
        maze_wordsearch_k_4: Bewege mich, um das Wort NORTH (Norden) zu schreiben
        maze_wordsearch_k_6: Bewegen mich nach Osten, dann nach Süden, um das Wort
          JUMP zu schreiben
        maze_wordsearch_k_9: Bewege mich ein Feld, dann noch eins, um das Wort CODE
          zu schreiben
        maze_wordsearch_k_13: Bewege mich ein Feld, dann noch eins, um das Wort DEBUG
          zu schreiben
        maze_wordsearch_k_15: Bewege mich ein Feld, dann noch eins, um das Wort ABOVE
          zu schreiben
        maze_wordsearch_k_16: Bewege mich ein Feld, dann noch eins, um das Wort BELOW
          zu schreiben
        maze_wordsearch_k_20: Das ist ein Test! Bewege mich ein Feld, dann noch eins,
          um das Wort STORY zu buchstabieren
        applab_ec_simple: Erstelle deine Anwendung mithilfe der Blöcke in der Toolbox.
        turtle_ec_1_2: 'Zeichne nun ein Quadrat. Hinweis: Benutze Deine Lieblingsfarbe
          durch Auswahl im "neue Stiftfarbe"-Absatz.'
        turtle_ec_1_10: 'Du hast es geschafft! Zeichne jetzt, was du willst. Einige
          lustige Ideen: ein Strichmännchen, Schneeflocke oder Spirale. Versuche auch
          den neuen "Stift-Breite"-Block. Viel Spaß!'
        studio_ec_sandbox: Entwickele Dein eigenes Spiel. Wenn Du fertig bist, klicke
          auf "Fertig" und lass' Deine Freunde das Spiel auf ihren Smartphones ausprobieren.
    video:
      name:
        maze_intro: Labyrinth Einführung
        artist_intro: Künstler Einführung
        farmer_intro: Bauer Einführung
        flappy_intro: Flappy Intro
        loop_times: Wiederhole-Anzahl-Baustein
        loop_until: Wiederhole-Bis-Baustein
        if: Wenn-Baustein
        if_else: Wenn/Ansonsten-Baustein
        if_else_scrat: Wenn/Ansonsten-Baustein
        function: Funktionen
        loop_while: Solange-Baustein
        loop_for: Zähler-Baustein
        parameters: Funktionen mit Parametern
        hoc_wrapup: '"Hour of Code" Zusammenfassung'
        Unplug1: Was ist Informatik?
        Unplug2: Computerorientiertes Denken
        Unplug3: Programmieren auf Millimeterpapier
        Unplug4: Algorithmen
        Unplug5: Funktionen
        Unplug6: Bedingungen
        Unplug7: Songschreiben
        Unplug8: Abstraktion
        Unplug9: Relais-Programmierung
        Unplug10: Internet
        Unplug11: Zusammenfassung
        C1_happy_maps_unplugged: Glücklich Karten
        C1_moveitmoveit_unplugged: Bewegung, Bewegung
        C1_bigevent_unplugged: Der große Event
        C1_getting_loopy: Schöne Schleifen
        C1_pair_programming: Paar Programmierung
        C1_maze_intro_sequencing: Labyrinth-Sequenzierung-Intro
        C1_maze_debugging: 'Labyrinth: Debuggen'
        C1_bee_level_intro: Bienen Level - Intro
        C1_artist_intro: Künstler Einführung
        C1_spelling_bee_intro: Buchstabierwettbewerb Intro
        C1_zuck_repeat_loop: Labyrinth Schleifen
        C1_bee_loops: Biene Schleifen
        C1_maze_loops: Labyrinth Schleifen
        C1_playlab_storytelling: 'Play Lab: Erstelle eine Story'
        C1_planting_seed: Einen Samen pflanzen
        C1_building_foundation: Grundlagen aufbauen
        C1_going_places_safely: Sicher unterwegs
        C2_maze_intro: Labyrinth Einführung
        C2_artist_intro: Künstler Einführung
        C2_zuck_repeat_loop: Labyrinth Schleifen
        C2_artist_loops: Künstler Schleifen
        C2_artist_debugging: Künstler Debuggen
        C2_bee_loops: Biene Schleifen
        C2_bee_debugging: Biene Debuggen
        C2_bee_conditionals: Biene Bedingungen
        C2_playlab_createstory: 'Play Lab: Erstelle eine Story'
        C2_graph_paper: Programmieren auf Millimeterpapier
        C2_conditionals_with_cards: Bedingungen
        C2_binary_bracelets: Binäre Armbänder
        C2_relay_programming: Relais-Programmierung
        C2_paper_airplanes: Papier Flugzeuge
        C2_digital_footprint: Dein digitaler Fußabdruck
        C2_digital_footprint_v2: Dein digitaler Fußabdruck
        C3_maze_level_4: Labyrinth Schleifen
        C3_artist_intro: Künstler Einführung
        C3_artist_functions: Künstler Funktionen
        C3_bee_functions: Biene Funktionen
        C3_bee_conditionals: Biene Bedingungen
        C3_maze_conditionals: 'Labyrinth: Bedingungen'
        C3_artist_nested_loops: Verschachtelte Schleifen
        C3_farmer_while: While-Schleifen
        C3_bee_nested_loops: Verschachtelte Schleifen
        C3_bee_debugging: Biene Debuggen
        C3_bounce: Bounce
        C3_playlab_create_game: Play Lab - Erstellen eines Spiels
        C3_computational_thinking: Computerorientiertes Denken
        C3_dice_race: Würfelrennen
        C3_internet: Internet
        C3_crowdsourcing: Crowdsourcing
        C3_functional_suncatchers: Funktionale Sonnenfänger
        C3_songwriting_with_parameters: Komponieren mit Parametern
        C4_intro: Einführung
        C4_loops_zombie: Schleifen
        C4_bee_conditional: Biene Bedingungen
        C4_variables_artist: Variablen - Künstler
        C4_variables_playlab: Variablen - Spiele Labor
        C4_for_loops: '"Für"-Schleifen'
        C4_for_loops_bee: '"Für"-Schleifen'
        C4_for_loops_no_bee: '"Für"-Schleifen'
        C4_math_artist: Programmiere den Künstler mit Mathematik
        C4_function_edit: Funktionen bearbeiten
        C4_function_create: Funktionen erstellen
        C4_function_parameters: Funktionen mit Parametern
        C4_conditionals: Bedingungen
        C4_unplugged_algorithms: Algorithmen mit Tangrammen
        C4_unplugged_madlibs: Mad Libs
        C4_unplugged_variables: Variablen in Briefumschlägen
        C4_unplugged_forloops: '"Für"-Schleifen'
        C4_unplugged_parameters: Komponieren mit Parametern
        C4_unplugged_binary: Binärdatei
        frozen_intro: Hour of Code Einführung
        frozen_loops: Einführung in Wiederholungen (Schleifen)
        frozen_functions: Einführung in Funktionen
        playlab_intro: Einführung ins Spiele Labor
        playlab_events: Spiele Labor Ereignisse
        playlab_repeat_forever: Spiele Labor für immer wiederholen
        tutorial_puzzle_challenge: Tutorial Puzzle Challenge
        infinity_playlab_intro: Play Lab - Einführung
        infinity_playlab_events: Play Lab - Ereignisse
        infinity_playlab_repeat_forever: Play Lab - Wiederhole ohne Ende
        csp_applab_conditionals_1: Introduction to Conditionals - Part 1
        csp_applab_conditionals_2: Introduction to Conditionals - Part 2
        csp_applab_conditionals_3: Introduction to Conditionals - Part 3
        csp_applab_design: Introduction to Design Mode
        csp_applab_variables_1: Introduction to Variables - Part 1
        csp_applab_variables_2: Introduction to Variables - Part 2
        csp_applab_functions: Einführung in Funktionen
        csp_applab_functions_parameters: Funktionen mit Parametern
        csp_applab_loops: Schleifen
        csp_applab_turtle: Turtle Programming
        csp_concept_rgb: A Little Bit About Pixels
        csp_pixelation_color_1: Color pixelation widget - Part 1
        csp_pixelation_color_2: Color pixelation widget - Part 2
        csp_pixelation_color_3: Color pixelation widget - Part 3
        csp_pixelation_bw: Black and white pixelation widget
        csp_U1L14_tipstricks: Unit 1 Lesson 14 Teacher Tips & Tricks
        csp_textcompression: Text compression widget
        csp_textcompression_new: Text compression widget
        csp_internetsimulator_1: Internet Simulator - Part 1
        csp_internetsimulator_2: Internet Simulator - Part 2
        csp_internetsimulator_3: Internet Simulator - Part 3
        alg_1_intro: CS in Algebra - Introduction
        alg_2_eval_block: CS in Algebra - Evaluation Blocks
        alg_3_pemdas: CS in Algebra - Order of Operations
        alg_4_data_types: CS in Algebra - Data Types
        alg_5_contracts: CS in Algebra - Contracts
        alg_6_variables: CS in Algebra - Variables
        alg_7_function: CS in Algebra - Functions
        alg_8_design_recipe: CS in Algebra - Design Recipe
        alg_9_booleans: CS in Algebra - Booleans
        alg_10_conditionals: CS in Algebra - Conditionals
        alg_11_coordinate_plane: CS in Algebra - Coordinate Plane
        alg_12_biggame_variables: CS in Algebra - Big Game Variables
        alg_13_biggame_animation: CS in Algebra - Big Game Animation
        alg_14_biggame_booleans: CS in Algebra - Big Game Booleans
        alg_15_biggame_update_player: CS in Algebra - Big Game Update Player
        alg_16_biggame_collision_detection: CS in Algebra - Big Game Collision Detection
        alg_17_sambat_compound_booleans: CS in Algebra - Compound Booleans
        hoc2015_preview_blocks: Make your own game blocks
        hoc2015_preview_typing: Make your own game typing
        hoc2015_preview_conclusion: Make your own game conclusion
        starwars_intro: 'Star Wars: Baue eine Galaxie aus Code - Einführung'
        starwars_typing: 'Star Wars: Baue eine Galaxie aus Code - JavaScript'
        starwars_events: 'Star Wars: Baue eine Galaxie aus Code - Ereignisse'
        starwars_congrats: 'Star Wars: Baue eine Galaxie aus Code - Herzlichen Glückwunsch'
        starwars_blocks_intro: 'Star Wars: Baue eine Galaxie aus Code - Einführung'
        starwars_blocks_events: 'Star Wars: Baue eine Galaxie aus Code - Ereignisse'
        starwars_blocks_congrats: 'Star Wars: Baue eine Galaxie aus Code - Herzlichen
          Glückwunsch'
        mc_intro: Minecraft - Einführung
        mc_repeat: Minecraft – Wiederholen
        mc_if_statements: Minecraft - If Anweisungen ("wenn"-Anweisung)
        mc_congrats_share: Minecraft - Glückwunsch
        mc_congrats_no_share: Minecraft - Glückwunsch
        gumball_intro: Gumball Hour of Code - Einführung
        gumball_events: Gumball Hour of Code - Events
        gumball_repeat: Gumball Hour of Code - Repeat statements
        iceage_intro: Ice Age Hour of Code - Introduction
        iceage_events: Ice Age Hour of Code - Events
        iceage_repeat: Ice Age Hour of Code - Repeat statements
    callout:
      text:
        drag_blocks: Ziehe einen "vorwärts bewegen"-Baustein und lasse ihn unter den
          anderen Baustein einrasten
        run: Drücke "Ausführen", um dein Programm zu testen
        watch_again: Hier klicken, um das Video nochmal anzusehen
        gray_block_explanation: Graue Blöcke können nicht gelöscht werden. Kannst
          du die Aufgabe trotzdem lösen?
        show_code_explanation: Klicke hier, um den Code deines Programms zu sehen
        instructions_repeat_explanation: Die Anweisungen für jede Aufgabe werden hier
          wiederholt
        category_explanation: Du hast die gleichen Blöcke, aber sie sind jetzt in
          Kategorien geordnet worden
        set_sprite_image: Füge einen "Schauspieler Bild zuweisen" Block zu einem "wenn
          die Geschichte beginnt" Block hinzu um einen Schauspieler für diese Geschichte
          zu aktivieren
        studio_say_text: Gebe ein was dein Schauspieler sagen soll zwischen diesen
          Anführungszeichen
        jigsaw_click: Klicke auf diesen Block!
        move_elsa_forward: Ziehe einen "Vorwärts bewegen" Block unterhalb des "Äusführen"
          Blocks um Elsa vorwärts zu bewegen
        turn_elsa: Verwende den "Drehen"-Block um Elsa zu drehen. Die Zahl in der
          Dropdown-Liste bestimmt, wieviel Elsa sich dreht
        replace_questions: Verwende den Dropdown-Pfeil, um  "???" mit einer Nummer
          zu ersetzen
        replace_questions_degree: Verwende den Dropdown-Pfeil, um "???" mit dem richtigen
          Drehungs-Grad zu ersetzen
        repeat_blocks: Verwende den "Wiederholen" Block und lege diesen um die Blöcke
          im Arbeitsbereich
        repeat_blocks_1: (1) Nutze diesen Block und platziere ihn um die grauen Blöcke
          im Arbeitsraum
        repeat_blocks_2: (2) Bewege den "Wiederholen" Block hierher und platziere
          die grauen Blöcke im Inneren
        snowflake_dropdown: Verwende dieses Dropdown-Menü, um verschiedene Schneeflocken
          zu erstellen!
        degrees_per_side: Teile 360 durch die Anzahl der Seiten, um die Größe der
          einzelnen Winkel in Grad zu erhalten.
        set_sides: Verwende diesen Baustein um "Seiten" auf die gebrauchte Anzahl
          einzustellen.
        set_length: Verwende diesen Block um "Länge" auf den richtigen Wert festzulegen.
        which_equation: Welche Gleichung macht jede Seite kleiner und Formen mit mehr
          Seiten?
        get_nectar: Verwende den neuen "nehme-Nektar"-Block.
        actions_category: Die Tool-Box hat einen neuen Look! Die "Aktionen"-Blöcke
          sind jetzt drin.
        draw_square_hint: 'Hinweis: Verwende die quadratische Schleife, die du in
          der letzten Aufgabe erstellt hast.'
        edit_function: Klicke hier um die Funktion zu bearbeiten.
        create_function: Klicke hier, um das "Funktionsmenü" zu öffnen, dann klicke
          auf "Erstelle eine Funktion".
        house_hint: Es ist ok, wenn das Bild noch nicht wie ein Haus aussieht. Wir
          werden es in der nächsten Aufgabe beheben.
        edit_draw_square: Benutze diesen Knopf zum bearbeiten der Funktion und Schleife
          hinzufügen.
        edit_get_nectar: Verwende diese Schaltfläche, um die Funktion zu bearbeiten
          und die Richtung der Biene zu ändern um den Nektar zu erhalten.
        logic_category: Öffne das "Logik"-Fenster um den "if/else"-Absatz zu finden.
        length_parameter: Kannst Du diese Funktion so anpassen, dass sie den "Länge"
          Parameter benutzt?
        frozen_diamond_repeat: Nutze den Wiederholen Block um diese Form zu erstellen.
        frozen_circle_function_in_circle_turn: Vergiss nicht zu drehen, nachdem erstellen
          eines Kreises.
        frozen_circle_function_with_parameter_circle: Nutze den "Kreis erstellen"
          Block und ändere die Größe.
        frozen_snowflake_branch: Verwende den Block "Erstelle einen Schneeflocken-Zweig"
        frozen_create_square: Füge hier mehr Blöcke an, um ein Quadrat zu erstellen
        playlab_drag_say: Ziehe den "sagen"-Baustein hierher und schreibe "hallo"
          hinein
        playlab_use_twice: Benutzer diesen Baustein zwei mal und vergiss nicht, die
          Nummer des Schauspielers anzupassen
        playlab_move_girl: Benutze den "bewege rechts"-Baustein, um das Tennismädchen
          nach rechts zu bewegen
        playlab_play_sound: '"Geräusch abspielen" Baustein hier hinzufügen'
        playlab_arrow_keys: Denke nach dem Ausführen daran, diese zu benutzen, um
          die Hexe zu bewegen
        playlab_add_move: Füge "bewegen"-Bausteine in diesen "wiederholen"-Baustein
          ein
        playlab_add_score: Füge hier den Punkte Block ein
        playlab_add_blocks: Füge hier deinen Blöcke ein
        set_variable: Ziehe den Nummernblock hierhin um die Variable festzulegen
        place_variable: Ziehe deine Variable in diesen Block
        bee_for_loop: Entscheide, wieviel Nektar die Biene höchstens sammeln soll,
          in dem eine Zahl hier reinziehst
        place_counter_variable: Ziehe deine Zählervariable in diesen Baustein
        function_editor_draw_square: Dies ist deine Funktionsdefinition. Diese Bausteine
          werden jedes mal ausgeführt, wenn du die "Zeichne ein Quadrat"-Funktion
          ausführst
        change_here: Mach deine änderung hier
        write_draw_square_function: Ziehe Blöcke aus der Toolbox hier her, um ein
          Quadrat zu zeichnen
        write_draw_triangle_function: Ziehe Blöcke aus der Toolbox hier her, um ein
          Dreieck zu zeichnen
        edit_add_parameter: Klicke "bearbeiten" an um einen Parameter zu deiner Funktion
          hinzuzufügen
        add_and_drag_parameter: Schreibe den Namen deines Parameters hier hin, klicke
          Hinzufügen und ziehe ihn dann in deine Funktionsdefinition
        fill_in_actor: Fülle die ??? mit Nummern, die zu den Schauspielern (1, 2 und
          3) passen
        repeat: Setze Blöcke in die Schleife um Befehle zu wiederholen
        if_bee_nectar: Nutze den "wenn"-Baustein um zu entscheiden, ob die Biene Nektar
          sammeln sollen
        if_else_bee: Nutze den "wenn/ansonsten"-Baustein, so dass die Biene Nektar
          von Blumen sammelt und, wenn es keine Blume ist, Honig macht
        repeat_full_circle: Füge die Anzahl der Bewegungen ein, die der Zombie machen
          muss, um eine volle Runde zu laufen
        place_length_variable: Ziehe die Längenvariable hier her, um die Fragezeichen
          zu ersetzen
        arrows_move_actor: Benutze die Pfeile um den Schauspieler zu bewegen
        right_arrow_fireball: Drücke Pfeil-nach-rechts, um Feuerbälle zu schießen
        name_function: Schreib den Funktionsnamen hierhin
        Infinity_move_right_runbutton: Füge den "bewegen"-Baustein hier hinzu
        Infinity_move_directions_callout: Welcher Baustein bewegt Baymax nach oben,
          wenn Pfeil-nach-oben gedrückt wird?
        Infinity_move_directions_callout_arrow: Benutze die Pfeiltasten zum Bewegen
        Infinity_move_collide_callout: Spiele einen Ton, wenn dieses Ereignis passiert.
        Infinity_repeat_callout: Platziere "bewegen"-Bausteine hier drin
        craft_run_button_callout: Drücke auf "Ausführen", um dein Programm auszuprobieren.
        craft_drag_block_callout: Ziehe einen "vorwärts"-Block zu einem anderen Block
          und docke ihn darunter an.
        craft_callout_preplaced: Hier haben wir ein paar Blöcke für den Anfang.
        craft_inside_repeat: Wiederhole Aktionen, indem du hier Blöcke hineinplatzierst.
        craft_callout_preplaced_house: Dieser Code wird anfangen, dein Haus zu bauen.
          Kannst du es fertigstellen?
        craft_what_is_iron: Baue dieses Eisen ab!
        craft_callout_moveforward: Dieser Code sucht nach Lava. Kannst du einen Befehl
          zum Vorwärtsbewegen hinzufügen?
