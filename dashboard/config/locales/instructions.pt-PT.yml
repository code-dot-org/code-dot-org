"pt":
  data:
    instructions:
      2-3 Artist 1 new_instruction: Oi, eu sou um artista. Você pode escrever códigos
        para me fazer desenhar quase qualquer coisa. Use alguns blocos para me fazer
        desenhar sobre as linhas cinzas na imagem. (Cada linha tem o comprimento de
        100 pixels)
      2-3 Artist 11_instruction: |
        Faça uma borda na placa de pare criando um octógono
        com 8 lados, com 100 pixels de comprimento cada. Quantos graus você deve virar? (Dica:
        quanto é 360 divido por 8?)
      2-3 Artist 12_instruction: |
        Configure o bloco "repita vezes" para que ele crie
        um "círculo" para terminar o globo ocular. Se cada movimento virar um grau para a direita,
        quantas vezes você precisa repetir para completar o círculo? 180? 360? 500?
      2-3 Artist 2 new_instruction: |
        Esta casa tem uma parede inacabada. Cada lado
        tem 100 pixels de comprimento, mas a parede inacabada tem apenas 50. Complete a parede.
      2-3 Artist 2_instruction: "This house has a half-finished wall. Each side is\n100,
        but the half-finished wall is only 50. Complete the wall. \n"
      2-3 Artist 3.4_instruction: |
        O bloco pule move o artista sem desenhar.
        Desenhe a linha tracejada usando os bloco pule e desenhe.
      2-3 Artist 3_instruction: Esse chapéu tem 100 pixels de altura. Desenhe um chapéu
        que tenha 70 pixels a menos.
      2-3 Artist 3new_instruction: |
        O chapéu vermelho tem 100 pixels de altura. Termine o desenho
        de um chapéu preto que seja 70 pixels menor. A largura do chapéu preto é de 50 pixels.
      2-3 Artist 4_instruction: Ajude-me a completar a casa para o gato.
      2-3 Artist 5_instruction: |
        Substitua esse código por um bloco "repita vezes"
        para desenhar a mesma casa usando apenas 3 blocos.
      2-3 Artist 6_instruction: 'Essa casa precisa de um telhado! Desenhe o triângulo.
        Dica: todos os 3 lados têm o mesmo comprimento.'
      2-3 Artist 7_instruction: |
        Termine de desenhar a metade direita da última janela.
        Cada quadrado da janela tem 25 pixels.
      2-3 Artist 8_instruction: |
        Complete os quartos para cada um dos animais dividindo
         o retângulo em 2 quadrados de mesmo tamanho. O retângulo tem 200 pixels de largura
        e 100 pixels de altura.
      2-3 Artist 9 NEW_instruction: Terminar este papagaio
      2-3 Artist 9 REPLACEMENT_instruction: Finish drawing these stairs!
      2-3 Artist 9_instruction: Terminar este papagaio
      2-3 Artist Assessment 1_instruction: "Avaliação: Terminar o desenho do último
        dente, \ntem 25 píxeis de largura e 25 píxels de altura.\n"
      2-3 Artist Debugging 1_instruction: "Este chapéu deveria ter apenas 50 píxeis
        de largura. \nConsegue corrigir isto?\n"
      2-3 Artist Debugging 10_instruction: "O controlo de direção no meu controlador\ndo
        jogo é muito estreito. \r\n\r\nConsegue fazê-lo mais largo, em 10 píxeis?"
      2-3 Artist Debugging 11_instruction: Ajude-me a terminar meu lindo floco de
        neve. Quantas vezes preciso "repetir" para terminá-lo?
      2-3 Artist Debugging 12_instruction: "É suposto eu adicionar uma onda do mar
        \nnessa cena. Pode ajudar-me?\n"
      2-3 Artist Debugging 2_instruction: 'O código para os três bigodes que você
        vê está errado. Dica: cada bigode tem o comprimento de 75 pixels. Corrija
        esse código para desenhar os bigodes.'
      2-3 Artist Debugging 3_instruction: |
        Meu barco tem um buraco! Você consegue corrigi-lo
        alterando o ângulo da linha? Dica: o último ângulo está 15 graus fora de lugar.
      2-3 Artist Debugging 4_instruction: |
        Qual é a imagem que estamos tentando
        desenhar? Termine de conectar os pontos usando as linhas e ângulos apropriados.
      2-3 Artist Debugging 5_instruction: |
        O código para a perna e para o pé que você vê
        está errado. Dica: o pé está muito comprido, pode ser necessário excluir um passo (pé... passo... trocadilho)
      2-3 Artist Debugging 6_instruction: |
        Parece que estou sentado em uma cadeira
        sem uma perna. Edite os blocos para desenhar a perna.
      2-3 Artist Debugging 7_instruction: "Parece que o C no código está desenhado
        ao contrário.\r\n\r\nConsegues voltar a transformá-lo num C?"
      2-3 Artist Debugging 8_instruction: |
        Meu cata-vento não está pronto. Quantas
        vezes eu preciso repetir para terminá-lo?
      2-3 Artist Debugging 9_instruction: |
        O código para este caule está incorreto. Dica:
        o ângulo está 60 graus fora de lugar
      2-3 Artist Debugging Assessment 1_instruction: |
        Esta forma é muito pequena. Você
        pode fazê-la maior? Dica: ela deve ter 75 pixels a mais de cada lado.
      2-3 Artist Free Play_instruction: Atividade livre! Desenhe o que você quiser.
      2-3 Artist Functions 1_instruction: |
        Olá. Mim artista zumbi. Mim ama desenhar!
        Me ajude a desenhar os óculos quadrados. Dica: a haste entre as lentes é
        25 pixels menor que o comprimento do quadrado.
      2-3 Artist Functions 10_instruction: |
        Aqui temos duas funções, uma para desenhar uma
        engrenagem grande e outra para desenhar uma engrenagem pequena. Use-as para desenhar o interior de uma máquina!
      2-3 Artist Functions 11.5_instruction: |
        Aqui está a mesma função "Desenhe um hexágono".
        O que acontece se você virar apenas 60 graus a cada repetição?
      2-3 Artist Functions 11_instruction: |
        Renomeamos a função "desenhe um quadrado"
        como "desenhe um hexágono", mas ela ainda desenha apenas quadrados! Você consegue
        modificar a função "desenhe um hexágono" para desenhar um hexágono com lados de 50 pixels, e
        desenhar a imagem usando a função?
      2-3 Artist Functions 12 Mike_instruction: |
        Funções são ótimas para desenhar
        coisas complexas várias vezes. Você consegue usar a função "desenhe uma flor"
        para preencher o resto do canteiro de plantas? (Dica: as plantas estão todas separadas
        por um comprimento de 100 pixels)
      2-3 Artist Functions 12_instruction: |
        Funções são ótimas para desenhar
        coisas complexas várias vezes. Você consegue usar a função "desenhe uma flor"
        para preencher o resto do canteiro de plantas? (Dica: as plantas estão todas separadas
        por um comprimento de 100 pixels)
      2-3 Artist Functions 13_instruction: |
        Fornecemos quatro funções para você.
        Use-as da forma que quiser dentro de um ou mais laços para criar imagens que
        você pode compartilhar com seus amigos. Pressione "Executar" para ver um exemplo.
      2-3 Artist Functions 2_instruction: |
        As funções permitem que você defina novos blocos! Movemos
        os blocos para desenhar um quadrado para dentro de uma função chamada "desenhe um quadrado".
        Você consegue usar a função "desenhe um quadrado" para criar os óculos? Os quadrados são separados
        por 75 pixels.
      2-3 Artist Functions 3_instruction: |
        Edite a função para desenhar um quadrado com
        lados de 115 pixels de comprimento e desenhe os óculos maiores. Agora, os quadrados estão separados por 45 pixels.
      2-3 Artist Functions 4_instruction: |
        Use o bloco "repita" para desenhar esses
        3 quadrados.
      2-3 Artist Functions 7_instruction: |
        Use a função "desenhar uma casa" para desenhar
        duas casas usando dois parâmetros diferentes. (Dica: a primeira casa tem 100 pixels).
      2-3 Artist Functions 9_instruction: |
        Esta é uma função para flocos de neve. Experimente
        usá-la para criar uma cena de inverno! Esse nível é livre, então não há
        desafios para resolver. Divirta-se!
      2-3 Artist Loops 1_instruction: |
        Você consegue fazer um hexágono com lados de
        100 pixels de comprimento para terminar a célula? Lembre-se, isso significa que você só vai
        precisar virar 60 graus!
      2-3 Artist Loops 10_instruction: |
        O que acontece com o design quando fazemos nossa
        etapa final com metade do comprimento?
      2-3 Artist Loops 11_instruction: |
        Agora, vamos colocar *outro* laço em torno de toda
        a criação! Não se esqueça de adicionar um ângulo ao final do laço externo.
      2-3 Artist Loops 2_instruction: |
        Agora, use um bloco "repita" para transformar a célula em uma
        concha.
      2-3 Artist Loops 4_instruction: |
        Quer ver o que acontece quando repetimos essa
        forma várias vezes usando um laço?
      2-3 Artist Loops 5_instruction: |
        Agora, vamos fazer uma pequena alteração no laço
        e ver como nossas imagens ficam diferentes.
      2-3 Artist Loops 6_instruction: |
        Adicione mais um movimento e outra ação de virar dentro
        do laço e veja como seu design muda.
      2-3 Artist Loops 7_instruction: |
        Podemos usar laços para criar todos os tipos de polígonos. Você
        consegue criar um losango dentro desse hexágono?
      2-3 Artist Loops 8_instruction: Vamos colocar ambos os elementos dentro de um
        laço.
      2-3 Artist Loops 9_instruction: "Vamos repetir os mesmos elementos, mas \nagora
        vamos adicionar alguma distância entre eles.\r\nUse o mesmo código usado \nanteriormente,
        mas adicione um passo à frente no final do laço externo."
      2-3 Artist Loops New 1_instruction: |
        Vamos desenhar a cabeça do robô! Você pode
        fazer um quadrado com lados de 100 pixels?
      2-3 Artist Loops New 10_instruction: |
        Agora vamos conectar um monte de V's,
        desenhando-os em um laço.
      2-3 Artist Loops New 11_instruction: |
        Dessa vez, vamos desenhar 24 vezes. Adicione
        uma ação de virar à esquerda em 30 graus ao código e coloque tudo em um bloco repita.
      2-3 Artist Loops New 12_instruction: Desenhe um diamante com lados de 100 pixels.
      2-3 Artist Loops New 13_instruction: Agora, desenhe o diamante 3 vezes em um
        laço.
      2-3 Artist Loops New 14_instruction: |
        Agora, vamos desenhar o diamante 10 vezes,
        mas vamos rotacionar 90 graus entre cada diamante.
      2-3 Artist Loops New 15_instruction: Desenha algo divertido.
      2-3 Artist Loops New 2_instruction: |
        Aqui temos alguns dos códigos que você usou para desenhar
        aquele quadrado. O que acontece se você usar o bloco repita para executar esse código 4 vezes?
      2-3 Artist Loops New 9_instruction: |
        Desenhe um V simples com ambos os lados com 50
        pixels para completar a seta.
      2-3 Artist Match Hex Pic_instruction: 'Correspondência: ajude a terminar o hexágono.'
      2-3 Artist Match Rho Pic_instruction: 'Correspondência: termine o código que
        falta.'
      2-3 Artist Match Sq Pic_instruction: 'Correspondência: complete o código que
        falta'
      2-3 Artist Match Tri pic_instruction: 'Correspondência: preencha o código que
        falta.'
      2-3 Artist Nested Loops 1_instruction: "Você usou laços para desenhar formas
        antes,\nmas você sabia que pode colocar um laço dentro de outro laço?\r\nRepita
        este bloco\nde código inteiro 3 vezes para desenhar o padrão."
      2-3 Artist Nested Loops 10_instruction: |
        Repita este código 12 vezes para completar
        o padrão.
      2-3 Artist Nested Loops 11_instruction: |
        Repita este código 4 vezes para completar
        o padrão, vire 90 graus após cada círculo.
      2-3 Artist Nested Loops 12_instruction: |
        Repita este código 12 vezes para completar
        as espirais.
      2-3 Artist Nested Loops 2_instruction: |
        Agora, repita o triângulo 6 vezes. Depois
        de cada triângulo, você precisa virar 60 graus antes de desenhar o próximo.
      2-3 Artist Nested Loops 3_instruction: |
        Você vai precisar repetir o triângulo 12
        vezes para desenhar este padrão. Divida o número de graus em um círculo (360)
        pelo número de formas que você está desenhando (12) para descobrir quanto virar
        depois de cada forma.
      2-3 Artist Nested Loops 4_instruction: |
        Repita este diamante 12 vezes para desenhar
        uma flor. Dica: 12 diamantes são como os 12 triângulos que você fez - quanto
        você precisa virar depois de cada forma?
      2-3 Artist Nested Loops 5_instruction: |
        Preencha as janelas deste edifício com
        um laço aninhado. As janelas têm 20 pixels de comprimento e são separadas por 20 pixels.
      2-3 Artist Nested Loops 6_instruction: |
        Esse dinossauro tem 8 espinhos ao longo
        de sua cauda. Cada espinho tem 30 pixels de comprimento. Repita o triângulo 8 vezes, mas
        lembre-se de avançar depois de cada um.
      2-3 Artist Nested Loops 7_instruction: |
        Repita esse triângulo 10 vezes para desenhar
        o sol. Você vai precisar mover e virar depois de cada triângulo. Você pode descobrir
        quanto virar dividindo o número de graus em um círculo pelo
        número de formas que o compõem.
      2-3 Artist Nested Loops 8_instruction: |
        Agora, vamos adicionar um pouco de grama à imagem.
        Cada tufo de grama é separado por 50 pixels.
      2-3 Artist Nested Loops 9_instruction: |
        Vamos terminar essa imagem adicionando
        uma flor. Repita o diamante 12 vezes para desenhar sua flor.
      2-3 Artist Nested Loops Free Play_instruction: |
        Atividade livre. Desenhe algo legal
        com laços aninhados.
      2-3 Bee Conditionals 1_instruction: |
        Olá! Eu sou uma abelha. Ajude-me a coletar o néctar
        da flor.
      2-3 Bee Conditionals 10_instruction: "As flores roxas podem ter 1 ou 0 néctar.\nTenha
        cuidado para não coletar néctar de uma flor roxa se ela não\ntiver néctar.\r\n"
      2-3 Bee Conditionals 11_instruction: Colete néctar onde as flores têm néctar.
      2-3 Bee Conditionals 12_instruction: |
        Use um laço para verificar e coletar o néctar
        de todas essas flores.
      2-3 Bee Conditionals 13_instruction: |
        Colete néctar e produza mel. Dica:
        o que acontece se você usar a condição "se houver néctar" em uma flor vermelha? Você pode
        completar isso com um laço?
      2-3 Bee Conditionals 14_instruction: |
        Colete néctar e produza mel. Tenha cuidado
        para não coletar néctar de uma flor roxa se ela não tiver néctar.
      2-3 Bee Conditionals 15_instruction: Colete néctar das quatro flores.
      2-3 Bee Conditionals 2_instruction: |
        Olá, eu sou uma abelha! Ajude-me a coletar todo
        o néctar das flores. Use um laço.
      2-3 Bee Conditionals 3_instruction: |
        Ajude-me a coletar todo o néctar das
        flores e a produzir mel. Use um laço.
      2-3 Bee Conditionals 4_instruction: |
        Ajude-me a coletar todo o néctar das
        flores e a produzir todo o mel.
      2-3 Bee Conditionals 5_instruction: |
        As flores roxas podem ter 1 ou 0
        néctar, mas você não sabe quanto! Tenha cuidado para não coletar néctar de
        uma flor roxa se ela não tiver néctar. Verifique se o néctar é igual a 1
        usando o bloco se.
      2-3 Bee Conditionals 6_instruction: |
        Verifique essa flor com um bloco "se"
        para ver se há algum néctar disponível.
      2-3 Bee Conditionals 7_instruction: |
        Colete o néctar de cada flor que
        tiver néctar disponível.
      2-3 Bee Conditionals 8_instruction: |
        Este campo tem flores vermelhas e roxas.
        As flores vermelhas têm uma quantidade de néctar conhecida, mas o néctar das flores roxas é desconhecido.
        Colete todo o néctar.
      2-3 Bee Conditionals 9_instruction: Colete todo o néctar de cada flor.
      2-3 Bee Conditionals Assessment 1_instruction: |
        Avaliação: Colete todo o
        néctar. Tenha cuidado para não coletar néctar de uma flor roxa se ela não
        tiver néctar.
      2-3 Bee Debugging 1_instruction: |
        Esses blocos estão me incomodando. Conserte o(s)
        erro(s) para coletar todo o néctar e produzir todo o mel.
      2-3 Bee Debugging 10_instruction: |
        Esses blocos estão me incomodando. Conserte
        o(s) erro(s) para coletar todo o néctar e produzir todo o mel.
      2-3 Bee Debugging 2_instruction: |
        Esses blocos estão me incomodando. Conserte o(s)
        erro(s) para coletar todo o néctar e produzir todo o mel.
      2-3 Bee Debugging 3_instruction: |
        Esses blocos estão me incomodando. Conserte o(s)
        erro(s) para coletar todo o néctar e produzir todo o mel.
      2-3 Bee Debugging 4_instruction: |
        Esses blocos estão me incomodando. Conserte o(s)
        erro(s) para coletar todo o néctar e produzir todo o mel.
      2-3 Bee Debugging 5_instruction: |
        Esses blocos estão me incomodando. Conserte o(s)
        erro(s) para coletar todo o néctar e produzir todo o mel. Agora você pode
        usar os botões Executar e Passo.
      2-3 Bee Debugging 6_instruction: |
        Esses blocos estão me incomodando. Conserte o(s)
        erro(s) para coletar todo o néctar e produzir todo o mel.
      2-3 Bee Debugging 7_instruction: |
        Esses blocos estão me incomodando. Conserte o(s)
        erro(s) para coletar todo o néctar e produzir todo o mel.
      2-3 Bee Debugging 8_instruction: |
        Esses blocos estão me incomodando. Conserte o(s)
        erro(s) para coletar todo o néctar e produzir todo o mel.
      2-3 Bee Debugging 9_instruction: |
        Esses blocos estão me incomodando. Conserte o(s)
        erro(s) para coletar todo o néctar e produzir todo o mel.
      2-3 Bee Debugging Assessment 1_instruction: |
        Avaliação:  Esses blocos estão
        me incomodando. Conserte o(s) erro(s) para coletar todo o néctar e produzir
        todo o mel.
      2-3 Bee Functions 1_instruction: |
        Funções são blocos de código que realizam
        uma tarefa. Use a função "obtenha 2 néctares" para coletar o néctar de cada
        flor.
      2-3 Bee Functions 10_instruction: |
        As flores roxas podem ter 1 ou 0 néctar.  Crie
        uma função que coleta néctar apenas das flores que têm néctar.
      2-3 Bee Functions 2_instruction: |
        Funções são blocos de código que realizam
        uma tarefa. Use a função "obtenha 5" para coletar 5 néctares de uma vez. Lembre-se também
        de usar um laço para obter um contador de bloco ideal.
      2-3 Bee Functions 3_instruction: Colete todo o néctar de cada flor.
      2-3 Bee Functions 4_instruction: |
        A função "mova e obtenha néctar" vira
        a abelha, coleta néctar, e então retorna a abelha para onde ela começou. Use
        a função para coletar todo o néctar.
      2-3 Bee Functions 5_instruction: |
        Agora há mais néctar nas flores.
        Edite a função dada para que ela colete 4 néctares e use-a para coletar
        todo o néctar das flores.
      2-3 Bee Functions 6_instruction: |
        Agora, use a mesma função para coletar néctar
        das três flores.
      2-3 Bee Functions 7_instruction: |
        Agora as flores estão mais longe. Edite a
        função dada e use-a para coletar todo o néctar das flores.
      2-3 Bee Functions 8_instruction: |
        Crie sua própria função que coleta 7 néctares,
        avança e produz 7 unidades de mel. Use a função para coletar néctar em todas as
        flores e produzir mel em todas as colmeias.
      2-3 Bee Functions 9_instruction: |
        Crie sua própria função que vai por um
        caminho, obtém néctar, produz mel, e então retorna a abelha para o início do
        caminho.
      2-3 Bee Functions Assessment 1_instruction: |
        Avaliação: Use a função dada
        para coletar o néctar de cada flor.
      2-3 Bee Functions Assessment 2_instruction: |
        Avaliação: Crie uma função
        para produzir 3 unidades de mel de uma vez.
      2-3 Bee Loops 1_instruction: |
        Cada flor contém uma unidade de néctar. Colete
        o néctar de cada uma das flores.
      2-3 Bee Loops 10_instruction: |
        Você pode usar um laço enquanto dentro de outros dois
        laços para coletar todo o néctar?
      2-3 Bee Loops 11_instruction: |
        Use laços enquanto para coletar todo o néctar
        das flores desse campo.
      2-3 Bee Loops 12_instruction: |
        Use laços enquanto para coletar todo o néctar
        das flores desse campo.
      2-3 Bee Loops 13_instruction: |
        Avaliação: use o bloco repita para coletar
        todo o néctar.
      2-3 Bee Loops 1A_instruction: |
        Olá, eu sou uma abelha. Você pode me ajudar a coletar
        o néctar dessas flores?
      2-3 Bee Loops 2_instruction: |
        Use um laço para coletar o néctar e produzir o
        mel.
      2-3 Bee Loops 2A_instruction: |
        Você consegue realizar a mesma tarefa mais facilmente
        com um laço?
      2-3 Bee Loops 3_instruction: |
        Colete o néctar de cada flor e produza mel
        em cada colmeia.
      2-3 Bee Loops 3A_instruction: Você consegue usar um laço para coletar todo o
        néctar?
      2-3 Bee Loops 3B_instruction: Agora, use o novo bloco repita para coletar todo
        o néctar e produzir todo o mel.
      2-3 Bee Loops 4_instruction: |
        Use um laço parecido com o do último desafio, mas realize
        uma ação de virar dentro dele.
      2-3 Bee Loops 4A_instruction: O que acontece se você repetir esta sequência
        3 vezes? Não se esqueça de fazer o mel no final!
      2-3 Bee Loops 5_instruction: |
        Use um laço para descer as escadas e coletar o
        néctar.
      2-3 Bee Loops 6_instruction: |
        Use um laço para coletar o néctar de cada flor
        e produzir mel em cada colmeia.
      2-3 Bee Loops 7_instruction: |
        Coloque esses blocos em um laço para coletar o néctar
        de cada flor.
      2-3 Bee Loops 8_instruction: |
        Essas flores roxas têm uma quantidade desconhecida de
        néctar. Use o laço "enquanto houver néctar" para coletar todo o néctar. Esse laço
        será executado enquanto a condição for verdadeira, neste caso, enquanto néctar > 0.
      2-3 Bee Loops 9_instruction: |
        O laço enquanto pode realizar a mesma ação que
        um comando se em um laço. Adicione um laço enquanto a esse código para realizar a mesma
        tarefa.
      2-3 Bee Loops Assessment 1_instruction: |
        Avaliação - use um laço enquanto para coletar
        todo o néctar dessa flor.
      2-3 Maze 1_instruction: "Consegues ajudar-me a apanhar o porquinho malvado?\nEmpilha
        alguns blocos `mover para a frente` por baixo do bloco `quando executar` e
        depois clica em \"Executar\". \n"
      2-3 Maze 10_instruction: Guia-me até à maldade verde! (Cuidado com a dinamite)
      2-3 Maze 11_instruction: |
        Estou com fome, leve-me até a flor! Quantas vezes
        você precisa repetir um bloco?
      2-3 Maze 12 (copy 1)_instruction: |
        Você pode substituir a resposta anterior por
        apenas dois blocos? (Dica: crie um laço usando um bloco "repita vezes")
      2-3 Maze 12 (copy 2)_instruction: |
        Você pode substituir a resposta anterior por
        apenas dois blocos? (Dica: crie um laço usando um bloco "repita vezes")
      2-3 Maze 12 (old)_instruction: |
        Leve-me até o porco, agora com o bloco repita
        vezes!
      2-3 Maze 12 - One Move Block_instruction: |
        Get to the pig! But this time, you
        can only use one `move forward` block. Do you see any other blocks that could
        help you?
      2-3 Maze 12_instruction: |
        Você pode substituir esses cinco blocos por apenas dois blocos?
        (Dica: crie um laço usando um bloco "repita vezes")
      2-3 Maze 13 (old)_instruction: |
        Leve-me até o porco, agora com o bloco repita
        até!
      2-3 Maze 13_instruction: Leve-me até o porco usando apenas dois blocos.
      2-3 Maze 14 (old)_instruction: Leve-me até o porco com o bloco repita até!
      2-3 Maze 14_instruction: |
        Leve-me até o girassol! (Onde está o bloco "repita
        vezes" quando eu preciso dele?)
      2-3 Maze 15 (old)_instruction: Leve-me até o porco com o bloco repita até!
      2-3 Maze 15_instruction: Use dois laços para chegar até o porco usando menos
        blocos.
      2-3 Maze 16 (old)_instruction: Leve-me até o porco com o bloco repita até!
      2-3 Maze 16 before_instruction: Leve-me até o porco.
      2-3 Maze 16_instruction: Leve-me até o girassol. Repita a sequência!
      2-3 Maze 2_instruction: Esse porco está me irritando. Ajude-me a chegar até
        ele!
      2-3 Maze 3_instruction: |
        Trace o caminho e leve-me até o porco bobalhão. Desvie
        do TNT, ou penas vão voar!
      2-3 Maze 4_instruction: Guia-me até à maldade verde! (Cuidado com a dinamite)
      2-3 Maze 5_instruction: Guia-me até à maldade verde! (Cuidado com a dinamite)
      2-3 Maze 6_instruction: |
        Fique calmo e ajude-me a chegar até o porco malvado. Senão
        eu vou ficar braco!
      2-3 Maze 7_instruction: Guia-me até à maldade verde! (Cuidado com a dinamite)
      2-3 Maze 8_instruction: Leve-me até o porco!
      2-3 Maze 9_instruction: Guia-me até à maldade verde! (Cuidado com a dinamite)
      2-3 Maze Loops 1_instruction: Consegues levar-me até ao porquinho com 5 blocos
        do mesmo género?
      2-3 Maze Loops 17_instruction: Leve-me até o girassol!
      2-3 Maze Loops 18_instruction: Leve-me até o girassol!
      2-3 Maze Loops 19_instruction: Leve-me até o girassol!
      2-3 Maze Loops 20_instruction: Leve-me até o girassol!
      2-3 Maze Loops 21_instruction: Leve-me até o girassol!
      2-3 Maze Loops Assessment 1_instruction: |
        Avaliação: Leve-me até o girassol
        usando apenas 5 blocos!
      2-3 Maze sq1_instruction: |
        This pig is ruffling my feathers.  Help me find
        him!
      2-3 Maze sq10_instruction: Leve-me até o porco! Que blocos foram repetidos?
      2-3 Maze sq10v2_instruction: Leve-me até o porco! Que blocos foram repetidos?
      2-3 maze sq11_instruction: Leve-me até o porco! Que blocos foram repetidos?
      2-3 maze sq12_instruction: |
        Você pode substituir a resposta anterior por um laço
        usando um bloco "repita vezes"?
      2-3 maze sq13_instruction: |
        Querida pessoa. Mim zumbi. Deve... chegar... girassol.
        Crie um laço com o bloco "repita até".
      2-3 maze sq14_instruction: Você pode chegar até o girassol usando apenas quatro
        blocos?
      2-3 maze sq15_instruction: Você pode chegar até o girassol usando apenas blocos?
      2-3 maze sq16_instruction: |
        Ok, isso é parecido, mas um pouco diferente. Você pode
        fazer isso em apenas cinco blocos?
      2-3 Maze sq2_instruction: |
        Trace o caminho e leve-me até o porco bobalhão. Desvie
        do TNT, ou penas vão voar!
      2-3 Maze sq3_instruction: Guia-me até à maldade verde! (Cuidado com a dinamite)
      2-3 Maze sq4_instruction: |
        Fique calmo e ajude-me a chegar até o porco malvado. Senão
        eu vou ficar braco!
      2-3 Maze sq5_instruction: |
        Leve-me até o porco! Quantas vezes você precisa
        repetir um bloco?
      2-3 Maze sq6_instruction: |
        Você pode substituir a resposta anterior por apenas dois
        blocos? (Dica: crie um laço usando um bloco "repita vezes")
      2-3 Maze sq7_instruction: Leve-me até o intruso verde usando apenas três blocos.
      2-3 Maze sq8_instruction: |
        Leve-me até o porco! (Onde está o bloco "repita vezes"
        quando eu preciso dele?)
      2-3 Maze sq9_instruction: Crie laços para chegar até o porco usando menos blocos.
      2-3_instruction: |
        Purple flowers may have either 1 or 0 nectar. Be careful
        not to collect nectar from a purple flower if it doesn't have any.
      2-3level1_instruction: Ajude o pássaro a pegar o porco safado movendo-o para
        frente
      20hr_farmer_stage9_1_instruction: |
        Hi, I'm a farmer. I need your help to flatten
        the field on my farm so it's ready for planting. Move me to the pile of dirt
        and use the "remove" block to remove it.
      20hr_farmer_stage9_10_instruction: |
        I'm working late, so it's dark out, and
        I can't tell how large the piles are. Now I don't have all the options I
        used to have on the while block. Move me along the field, and if there is
        a pile, remove it
      20hr_farmer_stage9_11_instruction: |
        It's still dark outside. Move me along
        the field. If there is a pile, remove it, and if there is a hole, fill it
        in. Hint: use the dropdown menu of options on the "if" block.
      20hr_farmer_stage9_2_instruction: |
        Next, move me to the hole and fill it with
        TWO shovelfuls of dirt, using the "fill" block.
      20hr_farmer_stage9_3_instruction: |
        Move me to the pile of dirt and tell me
        how many shovelfuls to remove using as few blocks as possible.
      20hr_farmer_stage9_4_instruction: |
        Can you help me remove all four piles of
        dirt? Hint: use a repeat block if you can.
      20hr_farmer_stage9_5_instruction: |
        Help me fill in all these holes with 5 shovelfuls
        of dirt. Hint: you can put a "repeat" block inside the "while" block.
      20hr_farmer_stage9_6_instruction: |
        Remove all the piles of dirt, using as few
        blocks as possible. The new options in the dropdown menu on the "while"
        block tell me if I'm standing on a pile or a hole.
      20hr_farmer_stage9_7_instruction: |
        Wow, I found a really deep hole! I don't
        know how many shovelfuls of dirt it needs. Can you write a program that fills
        it until the ground is even?
      20hr_farmer_stage9_8_instruction: |
        Help me fill in the hole at the end of the
        field, using as few blocks as possible.
      20hr_farmer_stage9_9_instruction: |
        Make me remove all these piles of dirt.
        Try to use as few blocks as possible. Hint: try using a "while" block.
      20hr_maze_stage2_1_instruction: |
        Can you help me to catch the naughty pig?
        Stack a couple of "move forward" blocks together and press "Run" to help
        me get there.
      20hr_maze_stage2_10_instruction: |
        Ok, try the new "repeat until" block -
        it will repeat until I reach the annoying pig.
      20hr_maze_stage2_11_instruction: |
        Ok, one last time for practice - can you
        solve this one using only 4 blocks?
      20hr_maze_stage2_12_instruction: |
        Dear person. Me zombie. Me hungry. Must...
        get... to sunflower... Can you get me there with only 5 blocks?
      20hr_maze_stage2_13_instruction: |
        Ok, this is similar, but slightly different.
        Can you do it in only 5 blocks?
      20hr_maze_stage2_14_instruction: |
        Use the new "if" block to let me decide
        when to turn. Hint: you only need one more block, but learn how we set it
        up so you can do it on your own next time.
      20hr_maze_stage2_15_instruction: |
        Ok, this is just like the last puzzle, but
        you need to remember how you used the "if" block and the "repeat" block
        together.
      20hr_maze_stage2_16_instruction: |
        Me want sunflower! Use an "if" block to
        get me there with the fewest number of blocks.
      20hr_maze_stage2_17_instruction: |
        Ok, let's do that again for practice - this
        isn't very different, but watch out for the chompers!
      20hr_maze_stage2_18_instruction: |
        The "If-else" blocks checks a condition,
        and then does one thing OR another. To get me to the sunflower try to use
        this new block.
      20hr_maze_stage2_19_instruction: |
        One more practice of the "if-else" block,
        can you get it right on your first try?
      20hr_maze_stage2_2_instruction: |
        This pig is ruffling my feathers. Help me
        to find him!
      20hr_maze_stage2_20_instruction: |
        Can you add just 3 blocks to help me solve
        a more complex maze? If you do it right, I can walk any curvy path no matter
        the length.
      20hr_maze_stage2_3_instruction: |
        Trace the path and lead me to the silly pig.
        Avoid TNT or the feathers will fly!
      20hr_maze_stage2_4_instruction: |
        Guide me to the green evilness! (Watch out
        for TNT)
      20hr_maze_stage2_5_instruction: |
        Keep calm and help me to find the bad pig.
        Otherwise I might get angry!
      20hr_maze_stage2_6_instruction: |
        There's a way I can get to the silly pig
        using only 2 blocks. Can you figure it out?
      20hr_maze_stage2_7_instruction: |
        Try to get me to the green intruder using
        only three blocks.
      20hr_maze_stage2_8_instruction: |
        Help me banish this bad piggy using the fewest
        number of blocks. Try using more than one "repeat times" block.
      20hr_maze_stage2_9_instruction: |
        When a block is grey, that means you can't
        delete it. Solve this puzzle using the "repeat" block that repeats 3 times.
        Try putting these 3 blocks inside the grey "repeat" block: move, move, turn.
      4-5 Artist 1_instruction: |
        Ajude-me a terminar de desenhar minha caixa. (Cada linha
        tem 300 pixels de comprimento)
      4-5 Artist 10_instruction: |
        Pressione "Executar" para testar o código. Em seguida, repita o código
        o número suficiente de vezes para completar o desenho. As cores serão diferentes toda vez.
      4-5 Artist 11_instruction: |
        Complete as retas verdes. As retas têm 300 pixels
        de comprimento e são separadas por 15 pixels.
      4-5 Artist 2_instruction: Você pode repetir esse código para completar o quadrado?
      4-5 Artist 3.5_instruction: |
        Ok, tente descobrir o que acontece se você executar
        esse código (ou pressione "Executar" para testar o código). Em seguida, repita o código o número suficiente de vezes para completar
        o desenho. As cores serão (provavelmente) diferentes toda vez.
      4-5 Artist 3_instruction: |
        Esse canteiro de flores retangular tem um perímetro de 600.
        O lado comprido tem 200 de comprimento. Desenhe o retângulo.
      4-5 Artist 4_instruction: |
        Quantos graus há em um círculo? Repita os blocos
        para criar um círculo de cores.
      4-5 Artist 5_instruction: Que ângulo você usa?
      4-5 Artist 6_instruction: |
        Esse triângulo equilátero tem ângulos de 60, 60
        e 60 graus. Cada lado tem 200 pixels. Complete o desenho.
      4-5 Artist 7_instruction: |
        O triângulo reto tem ângulos de 30, 60 e 90
        graus. O comprimento do lado inclinado é o dobro da altura de 100 pixels. Complete
        o desenho.
      4-5 Artist 8_instruction: |
        A linha do meio-campo em um campo de futebol é perpendicular
        às linhas laterais. O campo tem um perímetro de 800 pixels e tem 240 pixels
        de comprimento. Qual é sua largura? Desenhe as bordas e a linha do meio-campo.
      4-5 Artist 9_instruction: |
        Desenhe a outra metade de forma que o design seja simétrico.
        Os triângulos são equiláteros e têm 50 pixels de comprimento.
      4-5 Artist Assessment 1_instruction: |
        Avaliação: Use um laço para desenhar o triângulo
        equilátero. Cada lado tem 300 pixels.
      4-5 Artist For Loops 1_instruction: |
        Coloque os números de 1 a 10 nos
        blocos de largura e execute o código.
      4-5 Artist For Loops 11_instruction: |
        Complete o bloco "para" para que ele
        conte 0, 20, 40, 60, 80... 200.
      4-5 Artist For Loops 12_instruction: |
        O que acontece se você inverter os números que estão em "de"
        e "até"? Complete o bloco "para" de forma que ele conte 200, 180,
        160, 140, 120...0.
      4-5 Artist For Loops 13_instruction: |
        Esse design foi iniciado sem um laço "para"
        e está usando muitos blocos! Use um bloco "para" e complete a espiral. Dica:
        a última linha tem 250 pixels.
      4-5 Artist For Loops 14_instruction: |
        Alguém começou o código, mas então percebeu que
        deve haver uma forma mais rápida! Use um bloco "para" para substituir os blocos e
        complete a espiral triangular. (Dica: a última linha tem 300 pixels.
      4-5 Artist For Loops 15_instruction: |
        Alguém começou o código, mas então percebeu que
        deve haver uma forma mais rápida! Use um bloco "para" para substituir os blocos e
        complete a espiral hexagonal. (Dica: a última linha tem 200 pixels.
      4-5 Artist For Loops 2_instruction: |
        Este é um bloco "para". Ao invés de digitar
        1, 2, 3... 10, o bloco "para" pode repetir os blocos que estão dentro dele e contar os
        números por ti. Coloca o número 10 na seção "até" do bloco
        "para".
      4-5 Artist For Loops 3_instruction: |
        Como podemos contar de 1 até 50? Edite o
        bloco "para".
      4-5 Artist For Loops 4_instruction: |
        Complete o bloco "para" para que ele
        conte de 1 até 10, de 1 em 1.
      4-5 Artist For Loops 6_instruction: |
        Desenhe quadrados com lados de 50, 60, 70,
        80 e 90 pixels. Você vai precisar usar a função "desenhe um quadrado" cinco
        vezes.
      4-5 Artist For Loops 7_instruction: |
        Desenhe os mesmos quadrados, mas use um bloco "conte
        com" para alterar os tamanhos. Coloque o bloco "contador" na função "desenhe
        um quadrado". Dica: ele está na categoria Variáveis.
      4-5 Artist For Loops 8_instruction: |
        Você pode completar o programa colocando
        os blocos dentro de um bloco "para" que conta de 10 até 200, de 10 em 10? Você pode
        encontrar o bloco "for" na categoria Laços.
      4-5 Artist For Loops 9_instruction: |
        Esses círculos são de tamanhos 5, 10, 15, 20,
        25, 30 e 35. Desenhe os círculos usando um bloco "para".
      4-5 Artist Free Draw 1_instruction: |
        Desenho livre! Desenhe o que você estiver inspirado
        a criar.
      4-5 Artist Functions 1_instruction: Use um laço repita para desenhar esse triângulo.
      4-5 Artist Functions 10a_instruction: |
        Coloque esse código na função "desenhe um floco de neve"
        e substitua o 50 pelo parâmetro "tamanho". A função já é
        chamada para criar um floco de neve que tem 100 pixels.
      4-5 Artist Functions 10b_instruction: |
        Use a função "desenhe um floco de neve"
        para criar flocos de tamanhos diferentes. Dica: o primeiro floco de neve tem 25 de comprimento
        e cada floco de neve tem duas vezes o tamanho do floco anterior.
      4-5 Artist Functions 11_instruction: |
        Essa função "desenhe um hexágono" usa
        a função "desenhe um triângulo". Complete a função do hexágono. (Dica: um
        hexágono tem 6 lados, cada um com 100 pixels de comprimento)
      4-5 Artist Functions 12_instruction: |
        Complete a função "desenhe ondas". Cada
        onda é feita de uma onda superior e uma onda inferior. Dica: desenhe 5 ondas
        azuis.
      4-5 Artist Functions 13 Free play_instruction: |
        Temos aqui algumas funções para
        desenhar planetas, estrelas, foguetes e robôs. Use-as da forma que quiser para criar
        imagens que você pode compartilhar com seus amigos.
      4-5 Artist Functions 14 Free play_instruction: |
        Aqui, fornecemos
        várias funções para você. Use-as da forma que quiser dentro de um ou mais laços
        para criar imagens que você pode compartilhar com seus amigos. Clique em "Executar" para ver
        um exemplo.
      4-5 Artist Functions 15 Assessment_instruction: |
        Avaliação: use a função "desenhe
        um quadrado" para criar os quadrados. Os quadrados têm 50, 100 e 150
        pixels.
      4-5 Artist Functions 2a_instruction: |
        Agora coloque esses blocos em uma nova função
        chamada "desenhe um triângulo pequeno" e chame-a.
      4-5 Artist Functions 2b_instruction: |
        Agora crie uma função chamada "desenhe um
        triângulo pequeno" usando os blocos fornecidos.
      4-5 Artist Functions 3_instruction: |
        Agora crie as funções "desenhe um triângulo
        médio" e "desenhe um triângulo grande". A função "desenhe um triângulo pequeno"
        está pronta para você. Os triângulos têm comprimentos de 50 (pequeno), 100 (médio)
        e 150 (grande).
      4-5 Artist Functions 4_instruction: |
        Essa nova função "desenhe um triângulo"
        tem um parâmetro e pode fazer o trabalho das três funções de antes. Desenhe os
        mesmos triângulos usando essa nova função.
      4-5 Artist Functions 5_instruction: |
        Você pode transformar a função "desenhe um triângulo"
        em uma função "desenhe um quadrado" para alterar o desenho?
      4-5 Artist Functions 6_instruction: |
        Use as funções "desenhe um quadrado" e "desenhe um
        triângulo" para desenhar uma casa. (Dica: os lados do quadrado têm 200 pixels)
      4-5 Artist Functions 6b_instruction: |
        Use as funções desenhe um quadrado e desenhe um triângulo
        junto com outros blocos para criar uma casa, adicionando-as à função "desenhar uma casa"
        e chamando-a.
      4-5 Artist Functions 7_instruction: |
        Use a função "desenhar uma casa" para desenhar
        casas de 100 pixels e 50 pixels. As duas casas são separadas por
        50 pixels.
      4-5 Artist Functions 8_instruction: |
        A função "desenhe uma flor" tem um parâmetro
        que permite que você defina a altura do caule. Defina a altura como 200 e veja o que acontece.
      4-5 Artist Functions 9_instruction: |
        Desenhe essas 3 flores. A altura da primeira
        é 100 e a próxima flor sempre tem 50 pixels de altura a mais que
        a anterior. As flores também são separadas por 100 pixels.
      4-5 Artist Patterns 1_instruction: |
        Você pode desenhar esse quadrado usando um laço?
        Cada lado tem 20 pixels de comprimento.
      4-5 Artist Patterns 10_instruction: |
        O código desenha duas fileiras de hexágonos -
        repita todo o código 4 vezes para desenhar a colmeia inteira. Dica: você vai precisar
        recuar 120 pixels no laço mais externo para garantir que o artista não
        desenhe fora da tela.
      4-5 Artist Patterns 11_instruction: |
        Quantas vezes você precisa repetir isso
        para desenhar um semicírculo? Dica: se há 360 graus em um círculo e cada
        repetição move 3 graus, quantas vezes você precisaria repetir para desenhar um círculo completo?
      4-5 Artist Patterns 12_instruction: |
        Se você copiar esse laço e virar para a esquerda ao invés
        da direita, o que acontece? Você pode repetir isso para desenhar essa onda?
      4-5 Artist Patterns 13_instruction: |
        Agora vamos repetir tudo quatro
        vezes para criar a moldura dessa imagem. Preste atenção aos cantos - você não pode
        simplesmente virar 90 graus! Se repetir uma ação de virar 3 graus 60 vezes faz um semicírculo,
        qual desses blocos de código vai fazer um quarto de círculo para os cantos?
      4-5 Artist Patterns 2_instruction: |
        Se você colocar seu laço do quadrado dentro
        de outro laço, o chamamos de laço aninhado. O que você precisa adicionar ao seu laço externo
        para garantir que todos os 15 quadrados fiquem alinhados?
      4-5 Artist Patterns 3_instruction: |
        Agora, vamos nos aprofundar mais um nível!
        Aninhamos todo o bloco de código dentro de outro laço, mas você precisa posicionar o
        artista no lugar para desenhar a próxima reta. Qual desses blocos de código você
        pode colocar no final do laço mais externo para desenhar toda a grade?
      4-5 Artist Patterns 4_instruction: |
        Esse diamante tem lados de 50 pixels e ângulos
        de 120 e 60 graus. Use um laço para desenhá-lo.
      4-5 Artist Patterns 5.5_instruction: |
        Quantas vezes você precisa repetir
        esse bloco para desenhar toda a grade de diamantes?
      4-5 Artist Patterns 5_instruction: |
        Vamos repetir isso para fazer uma fileira de 6 diamantes.
        Perceba que alteramos nosso código do diamante para repetir 3 vezes ao invés de 2 - por que
        você acha que fizemos isso?
      4-5 Artist Patterns 6_instruction: |
        Quantas vezes você precisa repetir esse
        bloco para desenhar toda a grade de diamantes?
      4-5 Artist Patterns 7_instruction: |
        Vamos modificar o código do último desafio
        para fazer esse padrão mais complexo. Perceba como os diamantes se sobrepõem agora. Tente
        alterar o primeiro "pule para trás" de 100 para 50 (metade da distância) - agora, quão
        longe o artista deve ir no segundo "pule para trás"?
      4-5 Artist Patterns 8_instruction: |
        Use um laço para desenhar esse hexágono com
        lados de 40 pixels e ângulos de 60 graus.
      4-5 Artist Patterns 9.5_instruction: |
        Vamos repetir esse código para desenhar duas fileiras
        de hexágonos. Perceba como nossa segunda fileira está deslocada para a direita.
      4-5 Artist Patterns 9_instruction: |
        Agora, repita o código 3 vezes para desenhar a
        a linha inteira. Dica: cada hexágono tem 80 pixels de largura da extrema esquerda
        à extrema direita.
      4-5 Artist Patterns Free Play_instruction: |
        Atividade livre - experimente criar
        seu próprio padrão!
      4-5 Bee Conditionals - FC Test_instruction: A abelha só quer néctar agora. Nem
        todos os objetos são flores, portanto procura debaixo de cada nuvem para ver
        se ela esconde uma. Se estiver, então podes recolher o néctar.
      4-5 Bee Conditionals 1 (copy 1)_instruction: |
        The bee can't tell if this is
        a flower or a honeycomb. Gather nectar only from flowers, but first check
        if it is a flower or a honeycomb.
      4-5 Bee Conditionals 1_instruction: |
        A abelha não sabe se isso é uma flor ou
        uma colmeia. Colete néctar apenas das flores, mas primeiro verifique se o objeto é
        uma flor ou uma colmeia.
      4-5 Bee Conditionals 2 (copy 1)_instruction: |
        The bee only wants nectar right
        now. Remember, not all objects are flowers, so check to gather nectar only
        at flowers.
      4-5 Bee Conditionals 2_instruction: |
        Agora a abelha só quer néctar. Lembre-se,
        nem todos os objetos são flores, então faça a verificação para coletar néctar apenas das flores.
      4-5 Bee Conditionals 3_instruction: |
        Agora a abelha só quer produzir mel.
        Faça a verificação para produzir mel apenas nas colmeias.
      4-5 Bee Conditionals 4 (copy 1)_instruction: |
        The unknown object is either
        a flower or a honeycomb. Use the if/else block to collect nectar if it is
        a flower, else to make honey (because it is a honeycomb).
      4-5 Bee Conditionals 4_instruction: |
        O objeto desconhecido pode ser uma flor
        ou uma colmeia. Use o bloco se/senão para coletar néctar se ele for uma flor,
        senão para produzir mel (porque ele é, então, uma colmeia).
      4-5 Bee Conditionals 5_instruction: |
        Deve haver uma flor ou uma colmeia
        sob essas nuvens. Use o bloco se/senão para coletar néctar se houver uma
        uma flor, senão para produzir mel (porque há, então, uma colmeia).
      4-5 Bee Conditionals 6 (copy 1)_instruction: |
        This purple flower may have either
        3, 2, or 1 nectar. Here an if-else block is combined with another if-else
        block to create an if, else-if, else block. Complete the solution to collect
        the unknown amount of nectar.
      4-5 Bee Conditionals 6_instruction: |
        Essa flor roxa pode ter 1,
        2 ou 3 néctares. Aqui um bloco se-senão está combinado com outro bloco se-senão
        para criar um bloco se, senão-se, senão. Complete a solução para coletar a
        quantidade desconhecida de néctar.
      4-5 Bee Conditionals 7_instruction: |
        Lembre-se de que as flores roxas podem ter
        1, 2 ou 3 néctares. Complete a função "verifique a flor roxa" e use-a
        para coletar todo o néctar das flores.
      4-5 Bee Conditionals 8_instruction: |
        Escreva uma função dentro do bloco chamado
        "verifique a flor e produza mel". Sua função deve verificar quanto néctar a
        flor roxa tem e coletá-lo, avançar e então produzir mel.
      4-5 Bee Conditionals Assessment 1_instruction: |
        Avaliação: esse código está errado.
        Complete a função "colete néctar ou produza mel" e então chame-a para coletar
        todo o néctar e produzir o mel. Lembre-se, as flores roxas podem ter 1, 2 ou 3 néctares.
      4-5 Bee Debugging 1_instruction: |
        Estes blocos estão me incomodando. Você pode
        consertá-los?
      4-5 Bee Debugging 10_instruction: Encontre os erros e corrija-os.
      4-5 Bee Debugging 11_instruction: Isso conta corretamente?
      4-5 Bee Debugging 2_instruction: Ajude a abelha a coletar o néctar e fabricar
        o mel.
      4-5 Bee Debugging 3_instruction: Encontre os erros e corrija-os.
      4-5 Bee Debugging 4_instruction: Esses blocos não funcionam. Qual é o padrão?
      4-5 Bee Debugging 5_instruction: Algo não está certo aqui...
      4-5 Bee Debugging 6_instruction: |
        A flor roxa tem uma quantidade desconhecida de
        néctar. Conserte os blocos para coletar todo o néctar da flor.
      4-5 Bee Debugging 7_instruction: Está faltando alguma coisa na função...
      4-5 Bee Debugging 8_instruction: |
        Essa função está certa, mas não é usada
        corretamente.
      4-5 Bee Debugging 9_instruction: Por que a abelha não está produzindo mel suficiente?
      4-5 Bee Debugging Assessment 1_instruction: 'Avaliação: conserte o código.'
      4-5 Bee Nested Loops 1_instruction: Use um laço para coletar todo o néctar.
      4-5 Bee Nested Loops 2_instruction: |
        Colete todo o néctar de cada flor.
        Use um laço aninhado.
      4-5 Bee Nested Loops 3_instruction: |
        Colete todo o néctar colocando o
        código inicial dentro de um laço aninhado.
      4-5 Bee Nested Loops 4_instruction: |
        Colete todo o néctar de cada flor
        e produza mel em cada colmeia. Use um laço aninhado.
      4-5 Bee Nested Loops 5_instruction: |
        Colete todo o néctar criando
        um laço aninhado.
      4-5 Bee Nested Loops 6_instruction: Colete todo o néctar.
      4-5 Bee Nested Loops 7_instruction: |
        Coloque esse laço dentro de outro laço para criar
        um laço aninhado e coletar todo o néctar das flores.
      4-5 Bee Nested Loops 8_instruction: |
        Colete todo o néctar dessas flores
        aninhando um laço enquanto. Substitua o bloco interno repita vezes por um bloco
        enquanto.
      4-5 Bee Nested Loops 9_instruction: |
        Colete todo o néctar dessas flores
        aninhando um laço enquanto dentro de um bloco repita.
      4-5 Bee Nested Loops Assessment 1_instruction: |
        Avaliação - colete todo o
        néctar e produza todo o mel usando laços.
      4-5 Bee Nested Loops Rows_instruction: |
        Colete o néctar das fileiras de flores!
        Use um laço aninhado.
      4-5 Maze 1 (copy 1)_instruction: |
        Querida pessoa. Mim zumbi. Precisa... chegar...
        girassol.
      4-5 Maze 1_instruction: Querida pessoa. Mim zumbi. Deve... chegar... girassol.
      4-5 Maze 10_instruction: Você pode chegar até o girassol usando apenas quatro
        blocos?
      4-5 Maze 11_instruction: Você pode chegar até o girassol usando apenas seis
        blocos?
      4-5 Maze 12_instruction: |
        Ok, isso é um pouco diferente. Você pode fazer isso em
        apenas seis blocos?
      4-5 Maze 13_instruction: Leve-me até o porco!
      4-5 Maze 14_instruction: Leve-me até o porco! Use o bloco repita até.
      4-5 Maze 2 (copy 1)_instruction: |
        Leve o zumbi até o girassol, mas desvie
        da carnívora!
      4-5 Maze 2_instruction: Leve o zumbi até o girassol, mas desvie da carnívora!
      4-5 Maze 3 (copy 1)_instruction: Precisa... chegar... girassol.
      4-5 Maze 3_instruction: Precisa... chegar... girassol.
      4-5 Maze 4 (copy 1)_instruction: Experimente o bloco "repita" para usar menos
        blocos...
      4-5 Maze 4_instruction: Experimente o bloco "repita" para usar menos blocos...
      4-5 Maze 5 (copy 1)_instruction: |
        Você pode resolver esse desafio usando o menor
        número possível de blocos?
      4-5 Maze 5_instruction: |
        Você pode resolver esse desafio usando o menor número
        possível de blocos?
      4-5 Maze 6 (copy 1)_instruction: |
        Você pode resolver esse desafio usando o menor
        número possível de blocos?
      4-5 Maze 6_instruction: |
        Você pode resolver esse desafio usando o menor número
        possível de blocos?
      4-5 Maze 7_instruction: Querida pessoa. Mim zumbi. Deve... chegar... girassol.
      4-5 Maze 8_instruction: |
        Use o bloco "repita" para levar o zumbi até o
        girassol. (Desvie das carnívoras!)
      4-5 Maze 9_instruction: Crie um laço com o bloco "repita até".
      4-5 Maze Assessment 1_instruction: 'Avaliação: chegue até o girassol.'
      4-5 Maze Conditionals 1_instruction: |
        Use o bloco repita até para levar o
        zumbi até o girassol.
      4-5 Maze Conditionals 10_instruction: "Can you add just 3 blocks to help the\nzombie
        solve a more complex maze? \r\n\r\nIf you do it right, he can walk\nany curvy
        path no matter the length!"
      4-5 Maze Conditionals 2_instruction: |
        Use o bloco repita até para levar o
        zumbi até o girassol.
      4-5 Maze Conditionals 3_instruction: |
        Use o bloco "se" para me deixar decidir
        quando virar. Dica: você precisa de somente mais um bloco, mas aprenda como o configuramos
        para que você possa fazer isso sozinho na próxima vez.
      4-5 Maze Conditionals 4_instruction: |
        Ok, esse desafio é como o último,
        mas você precisa se lembrar de como usou o bloco "se" e o bloco "repita"
        juntos.
      4-5 Maze Conditionals 5_instruction: |
        Mim querer girassol! Use um bloco "se"
        para que eu chegue lá com o menor número de blocos possível.
      4-5 Maze Conditionals 6_instruction: |
        Mim querer girassol! Use um bloco "se"
        para que eu chegue lá com o menor número de blocos possível.
      4-5 Maze Conditionals 7_instruction: |
        Ok, vamos praticar mais uma vez
        - essa parte não é muito diferente, mas fique de olho nas carnívoras!
      4-5 Maze Conditionals 8_instruction: |
        Os blocos "se-senão" verificam uma condição
        e, em seguida, fazem uma coisa OU outra. Para me levar ao girassol, tente
        usar esse novo bloco.
      4-5 Maze Conditionals 9_instruction: |
        Vamos praticar o uso do bloco "se-senão" mais uma
        vez, você consegue fazer corretamente na primeira tentativa?
      4-5 Maze Conditionals Assessment 1_instruction: |
        Use um bloco "repita até" e
        um bloco "se-senão" para me levar até o girassol no menor número de blocos possível.
      4-5 Nested Loops 1_instruction: |
        Complete o código para desenhar esses triângulos. O
        primeiro está pronto para você. Dica: 3 triângulos em uma rotação de 360 graus.
      4-5 Nested Loops 10_instruction: |
        Desenhe a última linha de estrelas nessa bandeira
        repetindo os blocos fornecidos. As estrelas estão separadas por 50 pixels, mas lembre-se
        que elas têm 30 pixels de largura.
      4-5 Nested Loops 11_instruction: |
        Você pode desenhar esses 10 quadrados dessa
        calçada usando um laço aninhado? Cada quadrado tem 30 pixels.
      4-5 Nested Loops 12_instruction: |
        Você pode desenhar esses 36 triângulos usando
        um laço aninhado?
      4-5 Nested Loops 2_instruction: |
        Agora, aninhe esse laço dentro de outro laço para desenhar
        10 triângulos. Isso se chama laço aninhado. Dica: todos os 10 triângulos completam
        uma rotação de 360 graus.
      4-5 Nested Loops 3_instruction: "Crie um sol aninhando o código inicial\ndentro
        de outro laço. Chamamos isso de laço aninhado.\r\n"
      4-5 Nested Loops 5_instruction: Repita o código dado para criar um moinho de
        vento.
      4-5 Nested Loops 6_instruction: |
        Você pode desenhar um hexágono repetindo o
        código do triângulo?
      4-5 Nested Loops 7_instruction: |
        Repita esse design 10 vezes. Quanto
        você precisa virar a cada repetição? (Dica: quanto é 360 dividido por 10?)
      4-5 Nested Loops 8_instruction: |
        Repita esse design 6 vezes. Quanto
        você precisa virar a cada repetição? (Dica: quanto é 360 dividido por 6?)
      4-5 Nested Loops 9_instruction: Desenhe o dente na boca do crocodilo!
      4-5 Nested Loops Assessment 1_instruction: |
        Use um laço aninhado para completar
        o design.
      4-5 While Loops 1_instruction: |
        Mova-me para o buraco e preencha-o com
        duas pás de terra, usando o bloco "preencha".
      4-5 While Loops 2_instruction: |
        Mova-me para o monte de terra e remova-o
        com 5 pás de terra, usando o bloco "remova".
      4-5 While Loops 3_instruction: |
        Mova-me para o monte e remova toda a
        terra, então mova-me para o buraco e preencha-o completamente. Dica: use o menor número de
        blocos possível.
      4-5 While Loops 4_instruction: |
        Uau, eu encontrei um buraco realmente fundo! Eu não
        sei quantas pás de terra são necessárias. Você pode escrever um programa que preencha-o
        até que o solo fique nivelado? Dica: dessa vez, tente usar o laço enquanto.
      4-5 While Loops 5_instruction: |
        Uau, agora há dois buracos profundos! Você
        pode escrever um programa que os preencha até o que o solo fique nivelado?
      4-5 While Loops 6_instruction: |
        Uau, agora há um grande monte de terra!
        Você pode escrever um programa que remova a terra até que o solo fique nivelado?
      4-5 While Loops 7_instruction: |
        Uau, agora há três grandes montes de terra!
        Você pode escrever um programa que remova cada um deles até que o solo fique nivelado?
      4-5 While Loops 8_instruction: |2
         Há um buraco realmente fundo e um monte de terra
        realmente grande. Quantas pás de terra são necessárias para
        tornar o solo plano? Dica: use o laço enquanto para ambos.
      4-5 While Loops Assessment 1_instruction: |
        Há um monte de buracos e
        montes. Ajude-me a preenchê-los e removê-los para tornar o solo plano.
      aE1_instruction: "You chose to make a square napkin! \r\n\r\nTo finish, draw\na
        square with 20 pixel sides. "
      aE2_instruction: |
        If you place your square loop inside another loop, we call
        that a nested loop. What do you need to add as an outer loop to make sure
        all 14 napkins line up next to each other?
      aE3_instruction: "We've got to have a tablecloth!  \r\n\r\nTake your row of\n14
        napkins and sew 14 of those together with another **outer loop** to make\na
        cover for our table."
      aE3alternate_instruction: Alternate
      aE3alternateB_instruction: Alternate
      aE4_instruction: Alternate
      aE5_instruction: Example of puzzle using highest difficulty level shape.
      aE6_instruction: "How many times do you need to loop this to draw half  of\na
        circle? \n"
      aE7_instruction: "If you create another loop like this one, but turn left instead\nof
        right, what happens? \r\n\r\nCan you repeat all of that to draw this wave?"
      aE8_instruction: "Now let's loop that whole thing four times to create this\npicture
        frame. Watch out for the corners - you can't just turn 90 degrees!\n\r\n\r\nIf
        looping a 3 degree turn 60 times makes a half circle, which of\nthese blocks
        of code will make an additional quarter circle for the corners?"
      aEfreeplay_instruction: Free Play!
      AlgPD DR Free Play_instruction: Create a function based on your own word problem.
      AllTheThings Applab - Turtle move with button_instruction: |
        Add a button that
        moves the turtle when clicked.  (Click to see full instructions)
      allthethings data blocks test_instruction: |
        Please sign in to test applab levels
        (By design, applab levels only work if signed in. Normally, we make people
        sign in, but this is only enforceable for a whole script and would be annoying
        to do for the allthethings script).
      allthethings design mode elements_instruction: |
        Please sign in to test applab
        levels (By design, applab levels only work if signed in. Normally, we make
        people sign in, but this is only enforceable for a whole script and would
        be annoying to do for the allthethings script).
      allthethings_moviebot_instruction: |
        This level cloned from "U3 Digital Assistant
        Target"
      allthethings_template_backed1_instruction: "Backed by a template #1. Please\nsign
        in to test applab levels (By design, applab levels only work if signed\nin.
        Normally, we make people sign in, but this is only enforceable for a whole\nscript
        and would be annoying to do for the allthethings script). \n"
      allthethings_template_backed2_instruction: |
        Backed by a template #2. Please
        sign in to test applab levels (By design, applab levels only work if signed
        in. Normally, we make people sign in, but this is only enforceable for a whole
        script and would be annoying to do for the allthethings script).
      allthethings_U3 - Simple Drawing - Rectangle Width and Height_instruction: |
        Do
        This
      App Lab test_instruction: teste
      Applab allthethings onRecordEvent_instruction: |
        Please sign in to test applab
        levels (By design, applab levels only work if signed in. Normally, we make
        people sign in, but this is only enforceable for a whole script and would
        be annoying to do for the allthethings script).
      Applab test_instruction: This level is submittable. For testing only!
      AppLab_test02_instruction: |
        One sentence summary of the activity. Click to
        view full instructions.
      Artist - Nested Loops 1_instruction: |
        Complete the code to draw these triangles.  The
        first one is done for you.  Hint:  3 triangles in a 360 degree rotation.
      Artist - Nested Loops 10_instruction: |
        Draw the last row of stars on this flag
        by looping the provided blocks. The stars are 50 pixels apart, but remember
        that the stars themselves are 30 pixels wide.
      Artist - Nested Loops 11_instruction: |
        Can you draw these 10 squares of this
        sidewalk using a nested loop? Each square is 30 pixels.
      Artist - Nested Loops 12_instruction: |
        Can you draw these 36 triangles using
        a nested loop?
      Artist - Nested Loops 2_instruction: "Now nest this loop inside another loop\nto
        draw 10 triangles.  This is called a nested loop.  Hint: All 10 triangles\ncomplete
        a 360 degree rotation.  \n"
      Artist - Nested Loops 3_instruction: "Create a sun by nesting the starter code\nin
        another loop. This is called a nested loop.\r\n"
      Artist - Nested Loops 5_instruction: Loop the given code to create a windmill.
      Artist - Nested Loops 6_instruction: |
        Can you draw a hexagon by looping the
        triangle code?
      Artist - Nested Loops 7_instruction: |
        Loop this design 10 times. How much do
        you have to turn each time you loop? (Hint: What is 360 divided by 10?)
      Artist - Nested Loops 8_instruction: |
        Loop this design 6 times. How much do
        you have to turn each time you loop? (Hint: What is 360 divided by 6?)
      Artist - Nested Loops 9_instruction: Draw the teeth in the alligator's mouth!
      Artist - Nested Loops Assessment 1_instruction: |
        Use um laço aninhado para completar
        o design.
      Artist Inspiration_instruction: "Free Play Inspiration: You've now learned\neverything
        you need to know to make a pattern like this! If this picture inspires\nyou,
        try to make something similar. Otherwise, create something all your own.\r\n\n\r\nWant
        to know how our inspiration pattern was made? "
      artistLoopsK1_instruction: |
        This is a new type of puzzle called "Artist".
        Play with the level and draw something fun.
      artistLoopsK2_instruction: |
        Now, use a `repeat` loop to draw this line five
        times!
      artistLoopsK2gradek_artist_loops3_instruction: |
        Now, use a `repeat` loop to
        draw this line five times!
      artistLoopsK3_instruction: |
        Draw a line eight steps long. This will become
        the land for our kingdom!
      artistLoopsK4_instruction: |
        Now we need a castle with a draw bridge.  Fix the
        code so that the bridge lays straight instead of falling down.
      artistLoopsK5_instruction: |
        Now we need to fix the top of the castle. Can you
        loop the code three times?
      artistLoopsK6_instruction: "Someone is stuck in the tower!  Fix the stairs\nto
        set them free. \n"
      artistLoopsK7_instruction: "This tower is lovely, what is downstairs? Build\nanother
        staircase to find out! \n"
      artistLoopsK8_instruction: |
        Wow! There's a garden over there!  Help fix these
        stairs so I can get to it.
      artistLoopsK9_instruction: |
        **Challenge:**  Lovely! Let's take a walk around
        the garden.
      artistLoopsKA_instruction: |
        These stones are in the wrong place.  Help me move
        them so I don't fall in!
      artistLoopsKB_instruction: "Look!  It's a theater.  Help me set up the chairs\nso
        we can all see the stage. \n"
      artistLoopsKFP_instruction: |
        Picture time!  Use what you have learned to draw
        a picture of what you think the Artist saw on stage.
      Auto Open Function Editor_instruction: |
        Você pode chamar funções de dentro
        de outras funções! Usando sua função "forma" como base, crie 3 formas
        de casa, cada uma 20 pixels maior que a anterior, começando com um comprimento de 50 pixels. Usar
        um laço com contador pode ser útil.
      Bee Recommended Blocks test_instruction: |
        Purple flowers may have either 1
        or 0 nectar, but you don't know which one! Be careful not to collect nectar
        from a purple flower if it doesn't have any. Check if the nectar is equal
        to 1 by using the if block.
      Bergeron Robot Maze1_instruction: |
        Can you help me catch the naughty pig? Stack
        a couple of `move forward` blocks below the `when run` block and press "Run".
      Big Game Animation 1 (copy 1)_instruction: |
        Now that you've learned to write
        simple linear functions, let's work on using them to add some movement to
        our game. Click play to see what your game can currently do (not much!), update
        any variables you like, and then click finish to move on.
      Big Game Animation 1_instruction: |
        Now that you've learned to write simple
        linear functions, let's work on using them to add some movement to our game.
        Click "Run" to see what your game can currently do (not much!), update any
        variables you like, and then click finish to move on.
      Big Game Animation 2 (copy 1)_instruction: |
        The function 'update-target'
        function takes the target's current x value, and returns an updated value.
        Complete the 'update-target' function so that it adds to the x value each
        time it is called. The more you add to x, the faster the target will go.
      Big Game Animation 2_instruction: |
        The update-target function takes the target's
        current x value, and returns an updated value. Complete the update-target
        function so that it adds to the x value each time it is called. The more you
        add to x, the faster the target will go.
      Big Game Animation 3_instruction: |
        The update-danger function should work just
        like update-target, except that the danger should move from the right side
        over towards the left. Complete update-danger to make the danger fly across
        the screen.
      Big Game Animation 4_instruction: |
        At this point in your game, your danger
        should run across the screen from right to left, and your target should run
        across from left to right. They don't ever come back on screen once they've
        left, but we'll take care of that later. Take a minute to make sure your
        game is working like you want it to, and then click "Finish" to move on.
      Big Game Booleans 1_instruction: |
        When you last worked on your game we got
        our target and danger sprites to fly across the screen, but they never come
        back. Click "Run" to see how your game is currently working, and then click
        finish and we'll work on making those sprites reappear on screen after they've
        left.
      Big Game Booleans 2_instruction: |
        Go to the Functions section of the toolbox
        and complete the safe-left? function so that it returns true if the sprite's
        x coordinate is greater than -50. If you're successful you should see the
        Danger go off the left side and then return on the right side.
      Big Game Booleans 3_instruction: |
        Now that you've got safe-left?, let's fill
        in safe-right? - it should take in a sprite's x coordinate and return true
        if that coordinate is less than 450. Once your safe-right? is complete you
        should see the Target go off the right side of the screen and return on the
        left.
      Big Game Booleans 4_instruction: |
        Complete the onscreen? function so that it
        checks whether both safe-left? and safe-right? are true.
      Big Game Booleans 5_instruction: |
        At this point your Danger should run across
        the screen from right to left, your Target should run across from left to
        right, and they should both return to the opposite side, repeatedly. Take
        a minute to make sure your game is working like you want it to, and then click
        "Finish" to move on.
      Big Game Collision 1 (copy 1)_instruction: |
        When you last worked on your game
        we got our target and danger sprites to fly across the screen, but they never
        come back. Click run to see how your game is currently working, and then click
        finish and we'll work on making those sprites reappear on screen after they've
        left.
      Big Game Collision 1_instruction: |
        At this point you've programmed a video
        game with a moving Target and Danger, both of which return to the screen once
        they've left, and a Player that responds to keyboard input. Click "Run"
        to see how your game is currently working, and then we'll dig into the final
        missing piece - collision detection!
      Big Game Collision 2_instruction: |
        To move the player up and down, we'll need
        to use a conditional block to figure out which key is pressed and respond
        accordingly. Computers read keypresses as numeric key codes - the up arrow
        is 38 and the down arrow is 40. You can lookup other key codes in your student
        workbook. Edit the 'update-player' function so that if moves the player
        up when the up arrow is pressed, or down when the down arrow is pressed.
      Big Game Collision 3_instruction: |
        Use the Distance Formula, so the distance
        function returns the distance between the player's center coordinates (px,
        py) and another sprite's center coordinates (cx, cy).
      Big Game Collision 4_instruction: |
        Complete the collide? function so that it
        returns true if the distance between two points is less than 100 pixels apart.
      Big Game Complete_instruction: |
        A demo of the completed CS in Algebra Big Game
        project
      Big Game Final_instruction: |
        You made it! At this point your game should be
        fully functioning, take some time to enjoy your new game and make any final
        tweaks to it. When you're happy with the final product, click Finish and
        you'll have an opportunity to share a link to your game. Good work!
      Big Game Player 1_instruction: |
        We're getting really close to a finished game!
        Last time you worked on your game, you used booleans to make your Target and
        Danger return to the screen once they've left. Click Run to see how your
        game looks right now, and then we'll get to making your Player move up and
        down.
      Big Game Player 2_instruction: |
        Edit the update-player function so the player
        moves up when the up arrow (keycode 38) is pressed, and moves down (keycode
        40) when the down arrow is pressed.
      Big Game Testing_instruction: |
        A demo of the completed CS in Algebra Big Game
        project
      Big Game Vars 1 (copy 1)_instruction: |
        Let's get started on your Big Game!
        Here you'll see a whole bunch of placeholder code that you'll eventually
        replace with your own, but for now we're only going to worry about defining
        variables. Click "Run" to see what the game looks like with the default
        values.
      Big Game Vars 1_instruction: |
        Let's get started on your Big Game! Here you'll
        see a whole bunch of placeholder code that you'll eventually replace with
        your own, but for now we're only going to worry about defining variables.
        Click "Run" to see what the game looks like with the default values.
      Big Game Vars 2 (copy 1)_instruction: |
        The first step to making this game your
        own is to give it a good Title. Click edit on the 'title' and 'subtitle'
        variables and change them to something new.
      Big Game Vars 2_instruction: |
        The first step to making this game your own is
        to give it a good Title. Click edit on the title and subtitle variables and
        change them to something new.
      Big Game Vars 3 (copy 1)_instruction: |
        Now let's set the background for your
        new game. Edit the 'bg' variable and select a new background Image from
        the dropdown.
      Big Game Vars 3_instruction: |
        Now let's set the background for your new game.
        Edit the bg variable and select a new background Image from the dropdown.
      Big Game Vars 4 (copy 1)_instruction: |
        Awesome, now you can update the variables
        for your Player, Target, and Danger. Feel free to play with all of the variables
        at this point to make your game look like you'd like it to. Click 'finish'
        when you're done.
      Big Game Vars 4_instruction: |
        Awesome! Now you can update the variables for
        your Player, Target, and Danger. Feel free to play with all of the variables
        at this point to make your game look like you'd like it to. Click "Finish"
        when you're done.
      Brad Spooky House Copy_instruction: |
        Freeplay: Here are the functions you've
        written, and some more for you to play with. Draw something awesome! Play
        with the pen width to see how different your drawings look!
      Brad Spooky House_instruction: |
        Freeplay: Here are the functions you've written,
        and some more for you to play with. Draw something awesome! Play with the
        pen width to see how different your drawings look!
      Building a Foundation Assessment_instruction: |
        Build a three level pyramid,
        there are no other directions, so just play with the pieces until you get
        it!
      Busy Bee 2_instruction: Esta abelha tem um muito trabalho para fazer! Reparaste
        em algum padrão que possas usar para simplificar o teu código?
      Busy Bee_instruction: Esta abelha tem um muito trabalho para fazer! Reparaste
        em algum padrão que possas usar para simplificar o teu código?
      C3-Farmer While Loops 1_instruction: |
        Move me to the hole and fill it with
        two shovelfuls of dirt, using the "fill" block.
      C3-Farmer While Loops 2_instruction: |
        Move me to the pile of dirt and remove
        it with 5 shovel scoops, using the 'remove' block.
      C3-Farmer While Loops 3_instruction: |
        Move me to the pile and remove all of
        it, then move to the hole and fill it completely.  Hint:  Use as few blocks
        as possible.
      C3-Farmer While Loops 4_instruction: |
        Wow, I found a really deep hole! I don't
        know how many shovelfuls of dirt it needs.  Can you write a program that fills
        it until the ground is even?  Hint:  Try using the while loop this time.
      C3-Farmer While Loops 5_instruction: |
        Wow, now there are two deep holes! Can
        you write a program that fills them both until the ground is even?
      C3-Farmer While Loops 6_instruction: |
        Wow, now there is a large pile of dirt!
        Can you write a program that removes all of it so the ground is even?
      C3-Farmer While Loops 7_instruction: |
        Wow, now there are three piles of dirt!
        Can you write a program that removes each of them until the ground is even?
      C3-Farmer While Loops 8_instruction: |2
         There is a really deep hole and a really
        large pile of dirt.  How many shovelfuls of dirt need to be moved around to
        make the ground flat?  Hint: Use the while loop for both.
      C3-Farmer While Loops Assessment 1_instruction: |
        There are a lot of holes and
        piles.  Help me to fill and remove them to make the ground flat.
      Calc Circles of Eval .1_instruction: |
        You’ll be writing a kind of code called
        Evaluation Blocks, because each block of code evaluates to a single value.
        Change the ??? in this code so that the block evaluates to 5.
      Calc Circles of Eval .2_instruction: |
        This Evaluation Block is a multiplication
        function which takes two numbers and returns the product of those numbers.
        Edit this block so that it multiplies 2 * 5
      Calc Circles of Eval .3_instruction: |
        Here's a function for addition which
        takes two numbers and returns their sum. Use this Addition Block to add 3
        + 6.
      Calc Circles of Eval .4_instruction: |
        Here we've nested an Addition Block
        inside a Multiplication Block. Complete this code so it multiplies 3 by (4
        + 1)
      Calc Circles of Eval 1 (copy 1)_instruction: |
        Convert this statement to <some_shape>
        of evaluation.
      Calc Circles of Eval 1_instruction: |
        Every mathematical operator (+, -, *,
        /, and so on) can be represented by an Evaluation Block in code. Change the
        Evaluation Block to match the expression.
      Calc Circles of Eval 2 (copy 1)_instruction: |
        Convert this statement to <some_shape>
        of evaluation.
      Calc Circles of Eval 2_instruction: |
        Use a Multiplication Block to complete
        this code.
      Calc Circles of Eval 3_instruction: |
        Complete the Evaluation Blocks to match
        this statement.
      Calc Circles of Eval 4_instruction: |
        This code is missing a couple of Evaluation
        Blocks - make sure you put everything in the right order.
      Calc Circles of Eval 5_instruction: |
        Complete the Evaluation Blocks to match
        this statement.
      Calc Circles of Eval 6_instruction: |
        Complete the Evaluation Blocks to match
        this expression.
      Calc Circles of Eval 7_instruction: |
        Complete the Evaluation Blocks to match
        this statement.
      Calc Circles of Eval 8_instruction: |
        Complete the Evaluation Blocks to match
        this statement.
      Calc Circles of Eval 9_instruction: |
        Complete the Evaluation Blocks to match
        this statement.
      Calc Circles of Eval Free Play_instruction: |
        Free Play: Try using the Evaluation
        Blocks to write some equations of your own. How does nesting the blocks in
        different ways impact their evaluation?
      Calc Define Funcs 1 (copy 1)_instruction: |
        Let's look at some more algebraic
        functions now. Here's a function translated from the simple algebraic function
        f(x) = x + 1. What would you expect this function to output if provided an
        input of 15?
      Calc Define Funcs 1_instruction: |
        Let's look at some more traditional algebraic
        functions now. Here's a function translated from the simple algebraic function
        f(x) = x + 1. What would you expect this function to output if provided an
        input of 15?
      Calc Define Funcs 2_instruction: |
        Write a function f that takes a parameter
        x and returns x - 10. Test your function using f(15).
      Calc Define Funcs 3_instruction: |
        We don't have to call our function f every
        time; create a function called times-ten that should take a parameter x and
        return x * 10. Once you've created the function, run times-ten(50).
      Calc Define Funcs 4_instruction: |
        Write a function called half that takes a
        number x and returns half that number. Once you've written the function,
        use it to calculate half(21)
      Calc Define Funcs 5 - multiply 1_instruction: |
        Oh no! We lost our multiply
        block! We'll have to create a function to multiply for us. To start off,
        write a function "f" that takes a parameter "x" and returns x*5. Test
        your function using f(3).
      Calc Design Recipe 1_instruction: |
        Let's use the Design Recipe to create a
        function called cube - this function should take in a Number and return that
        number to the power of 3. Make sure to write two example cases! When you're
        done, use your new function to calculate cube(7).
      Calc Design Recipe 2_instruction: "Your school is holding a bake sale, and\nyou
        need to track the cost of making each cookie, the money paid, and the\ntotal
        profit. Cookies cost $0.25 each to make, and sell for $1.50/cookie.\r\n\r\nWrite\nthe
        function cost, which takes in the number of cookies you intend to sell,\nand
        returns the cost of making those cookies.\r\n\r\nTest your function by\ncalculating
        the cost of 42 cookies"
      Calc Design Recipe 3_instruction: "Write the function sales which takes in\nthe
        number of cookies sold, and produces the amount of money customers spent\nto
        buy those cookies (each cookie is sold at $1.50).\r\n\r\nTest your function\nby
        calculating the sales for 135 cookies"
      Calc Design Recipe 4_instruction: "Using the two functions we just wrote, write\nthe
        function profit, which takes in the number of cookies you sold, and gives\nyou
        back the total profit you make from selling your cookies, accounting for\nthe
        cost of baking them.\r\n\r\nTest your function by calculating the total\nprofit
        for 15 cookies."
      Calc Free Play_instruction: |
        Free Play: Write functions and algorithms of your
        own design!
      Calc Rocket 1 (copy 1)_instruction: "In the last puzzle you wrote a contract\nfor
        the function \"rocket-height\" that states it has a range of Number, domain\nof
        Number, and should return the height of the rocket traveling at 15 m/s\nafter
        a given number of seconds. Let's write an example case now for the\nheight
        of the rocket at 3 seconds.\r\n\r\n\r\n\r\n  \r\n\r\n"
      Calc Rocket 1_instruction: |
        In the last puzzle you wrote a contract for the
        function rocket-height that states it has a range of Number, domain of Number,
        and should return the height of the rocket traveling at 15 m/s after a given
        number of seconds. Let's write an example case now for the height of the
        rocket at 3 seconds.
      Calc Rocket 2_instruction: |
        Great, let's do one more example before writing
        the function - what should the rocket height be after 30 seconds?
      Calc Vars 1.1_instruction: |
        Here we've set the age variable to 17 years. Can
        you write an expression that calculates age in days?
      Calc Vars 1_instruction: |
        Variables allow us to name values so that we can
        easily refer to them repeatedly throughout our programs. Here's a variable
        called age. Set its value to your age and click run.
      Calc Vars 2 (copy 1)_instruction: |
        Here we've set the "age" variable to
        17 - can you write an expression that calculates "age" in months?
      Calc Vars 2.1_instruction: |
        Here's a new variable called age-in-months. Use
        the variable age to set age-in-months.
      Calc Vars 2_instruction: |
        Can you write an expression that calculates age in
        months?
      Calc Vars 3 (copy 1)_instruction: |
        Can you add to this code so that it calculates
        how many hours there are in "age" years?
      Calc Vars 3_instruction: |
        Can you add to this code so that it uses the "age"
        variable to calculate age in hours?
      Calc Vars 4_instruction: |
        We can also set variables by using other variables.
        Let's say you have a brother who is two years younger than you - can you
        set a new variable "brother-age" using your "age" variable?
      Code Studio Puzzle Challenge 1 - Artist_instruction: "Draw the line. It is\n200
        pixels long. \n"
      Code Studio Puzzle Challenge 1 Artist1_instruction: "Draw the line. It is 200\npixels
        long. \n"
      Code Studio Puzzle Challenge 10 - Bee (copy 1)_instruction: |
        Move the Bee to
        the flower and get all of the nectar.
      Code Studio Puzzle Challenge 10 - Bee_instruction: |
        Move the Bee to the flower
        and get all of the nectar.
      Code Studio Puzzle Challenge 10b - Bee_instruction: |
        Move the Bee to the flowers
        and get all of the nectar at each.
      Code Studio Puzzle Challenge 11 - Artist_instruction: |
        Draw this line by using
        the variable "length". Each line segment is 75 pixels long.
      Code Studio Puzzle Challenge 11b - Artist_instruction: |
        Draw a square by using
        the variable length provided.
      Code Studio Puzzle Challenge 12 - Artist_instruction: |
        The code provided draws
        one triangle. Add to it to draw triangles in a hexagon pattern.
      Code Studio Puzzle Challenge 12a - Artist_instruction: |
        The code provided draws
        one triangle. Add to it to draw triangles in a hexagon pattern.
      Code Studio Puzzle Challenge 13 - Artist_instruction: "This is just like a\n\"for\"
        loop. Complete the code to draw six lines that grow from 50, 60, 70,\n80,
        90, to 100 pixels long. \n"
      Code Studio Puzzle Challenge 14 - Artist_instruction: "This is just like a\n\"for\"
        loop. Complete the loop to draw 4 squares that grow from 80, 100,\n120, to
        140 pixels. \n"
      Code Studio Puzzle Challenge 2 - Artist_instruction: |
        Now add a turn and another
        line. The lines are 200 pixels long.
      Code Studio Puzzle Challenge 3 - Artist_instruction: |
        Draw the square. Each
        side is 100 pixels long.
      Code Studio Puzzle Challenge 4 - Artist_instruction: |
        Draw the octagon. Each
        side is 100 pixels long.
      Code Studio Puzzle Challenge 5 - Bee (copy 1)_instruction: |
        Move the Bee to
        the flower and get the nectar.
      Code Studio Puzzle Challenge 5 - Bee_instruction: |
        Flowers contain a specific
        amount of nectar. Move the Bee to the flower and collect nectar with the get
        nectar block.
      Code Studio Puzzle Challenge 6 - Bee_instruction: |
        Honeycombs can hold a specific
        amount of honey. Get the nectar from the flower and make some honey.
      Code Studio Puzzle Challenge 7 - Bee_instruction: |
        Move the Bee to the flower
        and get the nectar.
      Code Studio Puzzle Challenge 8 - Bee_instruction: |
        The cloud could be hiding
        a flower or a honeycomb. Only get nectar from flowers. Only make honey at
        honeycombs.
      Code Studio Puzzle Challenge 9 - Bee_instruction: |
        The cloud could be hiding
        a flower or a honeycomb. Only get nectar from flowers. Only make honey at
        honeycombs.
      Code Studio Puzzle Challenge Artist Screencast (copy 1)_instruction: "Draw\nthe
        line. Each segment is 100 pixels long. \n"
      Code Studio Puzzle Challenge Artist Screencast 2_instruction: "Complete the\ncode
        to draw the line. Each segment is 100 pixels long. \n"
      Code Studio Puzzle Challenge Artist Screencast_instruction: "Draw the line.\nEach
        segment is 100 pixels long. \n"
      Code Studio Puzzle Challenge Bee Screencast_instruction: |
        Move the Bee to the
        flowers and get all of the nectar.
      Code Studio Puzzle Challenge Square - Artist_instruction: |
        Draw a square by
        using the variable length provided.
      Code Studio Puzzle Challenge Var - Artist_instruction: |
        Draw a line by using
        a variable "length" set to 180.
      Collector Demo_instruction: |
        Look at all this loot! Help me get as many coins
        as I can so I can improve my farm. I can only use 9 blocks though!
      Course 2 Bee Loops 1_instruction: "Hi, I'm a bee. Can you help me collect\nthe
        nectar from these flowers? \n"
      Course 2 Bee Loops 13_instruction: |
        Assessment: Use the repeat block to collect
        all of the nectar.
      Course 2 Bee Loops 2_instruction: |
        Can you do the same task more easily with
        a loop?
      Course 2 Bee Loops 3_instruction: |
        Now use the new repeat block to collect
        all of the nectar and make all of the honey.
      Course 2 Bee Loops 3__instruction: |
        Can you use a loop to collect all that
        nectar?
      Course 2 Bee Loops 4_instruction: |
        What happens if you loop this sequence 3
        times? Don't forget to make the honey at the end!
      Course 2 Maze Loops 1_instruction: Consegues levar-me até ao porquinho com 5
        blocos?
      Course 4 2_instruction: |
        Agora a abelha só quer néctar. Lembre-se, nem
        todos os objetos são flores, então faça a verificação para coletar néctar apenas das flores.
      Course 4 Artist 1_instruction: |
        Ajude-me a terminar de desenhar minha caixa. (Cada linha tem
        200 pixels de comprimento)
      Course 4 Artist 10_instruction: |
        Atividade livre! Divirta-se e desenhe
        o que quiser.
      Course 4 Artist 11_instruction: |
        Agora um desafio!  Temos aqui um design que
        usa apenas blocos que já foram mostrados. Você consegue descobrir como
        recriá-lo sem usar qualquer informação extra? Dica: fique à vontade para usar tentativa
        e erro. Não esperamos que você seja perfeito na primeira vez.
      Course 4 Artist 12_instruction: "Atividade livre - Inspiração: agora você aprendeu\ntudo
        o que precisa para criar um padrão como esse! Se essa imagem inspira\nvocê,
        tente fazer algo semelhante. Caso contrário, crie algo você mesmo.\r\n\n\r\nQuer
        saber como nosso padrão de inspiração foi feito? Visite https://studio.code.org/c/105671120/edit\npara
        ver a solução."
      Course 4 Artist 13_instruction: |
        Ainda jogando?  Temos aqui uma tela em branco
        na qual você pode projetar o que quiser!
      Course 4 Artist 2_instruction: |
        Você consegue repetir este código para desenhar
        o quadrado em cinza?
      Course 4 Artist 20_instruction: |
        Ainda jogando?  Temos aqui uma tela em branco na qual
        você pode criar o que quiser!
      Course 4 Artist 3_instruction: |
        Ok, tente descobrir o que acontece se você executar
        esse código (ou clique em "Executar" para ver). Em seguida, execute-o várias vezes para completar
        o desenho.
      Course 4 Artist 4_instruction: |
        How many degrees are in a circle?  Fill in
        the repeat block with that number to create a circle of colors.
      Course 4 Artist 5_instruction: |
        Desenhe a outra metade desse design para que ele
        fique simétrico. Os triângulos são equiláteros e têm 50 pixels de comprimento.
      Course 4 Artist 6_instruction: |
        Complete o código para desenhar esses triângulos.
        Dica: 3 triângulos em uma rotação de 360 graus.
      Course 4 Artist 7_instruction: |
        Agora, aninhe esse laço dentro de outro laço para desenhar
        10 triângulos. Isso se chama laço aninhado. Dica: todos os 10 triângulos completam
        uma rotação de 360 graus.
      Course 4 Artist 8_instruction: |
        Desenhe esse sol repetindo todo este bloco de código
        12 vezes.
      Course 4 Artist 8a_instruction: |
        Lembra-se dessa forma? Agora vamos te deixar construí-la sem te dar qualquer bloco parar começar.
        Dica: Existem 3 triângulos dentro da rotação de 360º... Quantas  vezes 3 cabe em 360?
      Course 4 Artist 9_instruction: |
        Repita esse design 10 vezes e certifique-se de virar
        a cada figura desenhada. Uma dica sobre o quanto você
        precisa virar: quanto é 360 dividido por 10?
      Course 4 Artist Binary 1_instruction: |
        Temos aqui uma função que recebe uma string
        binária de 1's e 0's e instrui o artista a mover-se da esquerda para
        a direita, de cima para baixo, preenchendo os quadrados nos quais ele vê um 1 e ignorando
        os que têm um 0. Execute esse código para ver como o artista usa números binários para desenhar
        este padrão.
      Course 4 Artist Binary 1a_instruction: |
        Temos aqui uma função que recebe uma string
        binária de 1's e 0's e instrui o artista a mover-se da esquerda para
        a direita, de cima para baixo, preenchendo os quadrados nos quais ele vê um 1 e ignorando
        os que têm um 0. Execute esse código para ver como o artista usa números binários para desenhar
        este padrão.
      Course 4 Artist Binary 2_instruction: |
        Qual dessas strings binárias você poderia
        repetir 8 vezes para desenhar esta imagem?
      Course 4 Artist Binary 3_instruction: |
        Você consegue desenhar este padrão usando
        a repetição de uma string binária de 3 dígitos?
      Course 4 Artist Binary 4_instruction: |
        Cada string binária representa uma linha dessa
        imagem. Você consegue reorganizá-las de forma que elas desenhem um rostinho feliz
        ao invés de um rostinho triste?
      Course 4 Artist Binary 5_instruction: |
        Que string binária de 6 dígitos, repetida
        11 vezes, vai desenhar essa imagem?
      Course 4 Artist Binary 6_instruction: |
        Qual é a menor string binária que você
        pode repetir para desenhar esta imagem?
      Course 4 Artist Binary 7_instruction: Termine o desenho.
      Course 4 Artist Binary Free Play 2_instruction: |
        Atividade livre: aqui temos uma tela de maior
        resolução para desenhar - 16 bits por 16 bits!
      Course 4 Artist Binary Free Play 2a_instruction: "Here's a higher resolution\ncanvas
        to draw on - 16 pixels by 16 pixels!\r\n\r\nSee what happens when we\nstart
        to get creative with the bits?"
      Course 4 Artist Binary Free Play 2b_instruction: Clica aqui para ver pistas.
      Course 4 Artist Binary Free Play_instruction: |
        Atividade livre: desenhe o que quiser
        com números binários!
      Course 4 Artist Binary pre1_instruction: "Binary is a way of representing information\nusing
        only two options.  Here, we're going to use the options \"off\" (represented\nby
        the number 0) and \"on\" (represented by the number 1).  \r\n\r\nWe've\nprovided
        you with a grid of \"pixels\" that you can walk through and make\ndesigns
        by turning on only certain squares.  Can you have the artist draw\n\"01010101\"
        in binary in the first row?"
      Course 4 Artist Binary ryan_instruction: "Binary is a way of representing information\nusing
        only two options.  Here, we're going to use the options \"off\" (represented\nby
        the number 0) and \"on\" (represented by the number 1).  \r\n\r\nWe've\nprovided
        you with a grid of \"pixels\" that you can walk through and make\ndesigns
        by turning on only certain squares.  Can you have the artist draw\n\"01010101\"
        in binary in the first row?"
      Course 4 Artist For  Functions 10_instruction: |
        Vamos acelerar um pouco,
        você consegue desenhar uma forma de estrela usando a função "desenhe uma linha de quadrados"?
        Boa sorte!
      Course 4 Artist For  Functions 11_instruction: |
        Vamos acelerar um pouco,
        você consegue desenhar uma forma de estrela usando a função "desenhe uma linha de quadrados"?
        Boa sorte!
      Course 4 Artist For Loops 1_instruction: |
        Desenhe este triângulo que tem 50 pixels.
        Dica: use um bloco repita.
      Course 4 Artist For Loops 10_instruction: |
        Atividade livre! Divirta-se desenhando
        o que quiser com os blocos que você aprendeu a usar
      Course 4 Artist For Loops 11_instruction: |
        Você se lembra de quando usamos uma variável
        para controlar o número de lados em uma forma? Este padrão começa com um triângulo
        e adiciona um lado por vez, até que seja desenhado um decágono (10 lados). Cada lado
        deve ter 100 pixels de comprimento. Dica: 360 dividido pelo número de lados de uma forma
        é o número de graus que você vai precisar virar.
      Course 4 Artist For Loops 11a_instruction: "Vamos juntar tudo!  Usando\nseu
        conhecimento em \"laços para\" e o \"contador\", crie este desenho no qual\ncada
        forma tem dois lados a mais que a anterior. Lembre-se de que cada lado é\n10
        vezes maior que o número de lados do polígono.\r\n\r\nApenas uma pequena parte\ndo
        código foi fornecida para você."
      Course 4 Artist For Loops 12_instruction: |
        Isso foi muito legal, mas agora
        eu gostaria de desenhar uma forma do lado da outra. Desta vez, cada lado tem
        20 pixels. Use um bloco pule para avançar 40 pixels após cada forma.
      Course 4 Artist For Loops 13_instruction: |
        Hmm, essas formas estão ficando cada vez
        maiores! Já não tínhamos resolvido esse problema com variáveis? Como
        podemos usar a variável contador para deixar os lados menores conforme a forma tem
        mais lados? Ao invés de avançar por uma quantidade definida, avance (100 /
        contador) pixels.
      Course 4 Artist For Loops 14_instruction: |
        Se você virar um pouco mais, ou um pouco menos, do que normalmente faria para uma forma, você cria um efeito legal. Tente
        virar 89 graus para criar esse efeito de espiral quadrada.
      Course 4 Artist For Loops 15_instruction: |
        Atividade livre: tente fazer alguns desenhos
        você mesmo, usando laços para. Adicionamos algumas variáveis genéricas
        para você usar também.
      Course 4 Artist For Loops 2_instruction: |
        Eu coloquei o código para desenhar
        um triângulo dentro de um laço para que conta de 50 até 100, de 10 em 10. Veja como
        eu fiz o código, e então clique em "Executar" quando você estiver pronto para vê-lo
        em ação.
      Course 4 Artist For Loops 3_instruction: |
        O menor triângulo tem lados de 20 pixels,
        o maior tem lados de 200 pixels, e cada triângulo é 20 pixels maior que
        o anterior. Atualize o laço para desenhar esses triângulos.
      Course 4 Artist For Loops 4_instruction: |
        Use um laço "para" para desenhar esses quadrados.
        Eles começam com 50 pixels de comprimento, o maior tem 300 pixels de comprimento, e cada quadrado
        é 25 pixels maior que o anterior. Foi fornecida a maior parte do código
        de que você vai precisar - está faltando um bloco, qual?
      Course 4 Artist For Loops 5_instruction: |
        Você fez um bom trabalho no último desafio!
        Vamos usar o bloco da variável "contador" mais uma vez para desenhar esta imagem.
      Course 4 Artist For Loops 6_instruction: |
        Atividade livre: tente usar um laço "para"
        para desenhar um padrão crescente de formas com seu próprio design.
      Course 4 Artist For Loops 6a_instruction: |
        Make three small changes to the
        code from the last level to get this!
      Course 4 Artist For Loops 7_instruction: |
        O que acontece se você remover "Repita 3"
        desse algoritmo, mantendo os blocos "mova" e "vire" no laço
        para? Neste triângulo espiralado, cada lado é 20 pixels mais comprido que o anterior.
      Course 4 Artist For Loops 8_instruction: |
        A menor reta nessa espiral quadrada
        tem 10 pixels, a maior tem 200, e cada reta é 10 pixels maior que a
        anterior. Você consegue preencher os blocos que faltam para completar essa imagem incrível?
      Course 4 Artist For Loops 8a_instruction: |
        A menor reta nessa espiral quadrada
        tem 10 pixels, a maior tem 200, e cada reta é 10 pixels maior que a
        anterior. Você consegue preencher os blocos que faltam para completar essa imagem incrível?
      Course 4 Artist For Loops 9_instruction: |
        Você consegue fazer uma espiral? Avance
        de 1 a 75 pixels, aumentando 1 pixel de cada vez.
      Course 4 Artist For Loops Challenge_instruction: |
        Você consegue descobrir como usar tudo que aprendeu para criar essa imagem?

        Precisa de uma dica? Clique aqui.
      Course 4 Artist For Loops inspire_instruction: "Atividade livre - Inspiração:
        agora você\naprendeu tudo o que precisa saber para criar um padrão como esse!
        Se essa\nimagem inspira você, tente fazer algo similar. Caso contrário, crie
        algo\nvocê mesmo.\r\n\r\nQuer saber como nosso padrão de inspiração foi feito?
        Acesse\nhttps://studio.code.org/c/106387604 para ver a solução."
      Course 4 Artist Functions 1_instruction: |
        Você consegue desenhar um quadrado com 100
        pixels de comprimento usando um laço?
      Course 4 Artist Functions 10_instruction: |
        Qual bloco você precisa adicionar para
        que o triângulo fique em cima do quadrado?
      Course 4 Artist Functions 11_instruction: |
        Veja esse código para desenhar um
        cubo - você consegue movê-lo para dentro de uma função chamada "desenhe um cubo"?
      Course 4 Artist Functions 12.1_instruction: |
        Let's create a function called
        "draw an octagon 20" that draws an octagon where each side is 20 pixels
        long.
      Course 4 Artist Functions 12_instruction: Repita a função quadrado para desenhar
        uma reta
      Course 4 Artist Functions 13.1_instruction: "Now, let's make a function called\n\"jump
        to upper right\" that moves the artist to the upper-right of the octagon\nthat
        you just drew so we can finish this pattern.\r\n\r\nHint:  To get yourself\nto
        the upper-right corner, try jumping in a pattern that makes just 3/8 of\nthe
        octagon."
      Course 4 Artist Functions 13_instruction: |
        Confira nossa nova função
        "desenhe uma linha de quadrados". Fique à vontade para olhar dentro do bloco da função
        e ver como a construímos. Clique em "Executar" quando estiver pronto para o
        próximo desafio.
      Course 4 Artist Functions 14.1_instruction: |
        Now, let's make a function called
        "jump to upper right" that moves the artist to the top-right of the octagon
        that you just drew so we can finish this pattern.
      Course 4 Artist Functions 14_instruction: |
        Excelente! Vamos usar
        sua nova função "desenhe uma linha de quadrados" para desenhar uma forma de quadrado. Lembre-se,
        cada quadrado tem 40 pixels de comprimento.
      Course 4 Artist Functions 15_instruction: 'Vamos acelerar um pouco, você consegue
        desenhar uma forma de estrela usando a função "desenhe uma linha de quadrados"?
        Boa sorte! Dica: você terá de virar 144 graus'
      Course 4 Artist Functions 2_instruction: |
        Você consegue desenhar 3 quadrados com 20 pixels de distância
        entre cada um? Dica: cada quadrado tem 100 pixels de tamanho
      Course 4 Artist Functions 3_instruction: "Usando o bloco de função \"desenhe
        um quadrado\",\nvocê consegue desenhar esta imagem? Dica: os quadrados estão
        a 120 pixels de distância um do outro.\r\n"
      Course 4 Artist Functions 4_instruction: |
        Você está pronto para criar seu próprio
        "bloco de função"? Clique no bloco "Funções" na caixa de ferramentas, nomeie-o
        como "desenhe um triângulo", e então crie um triângulo como você fez anteriormente
        com os blocos de ação e de laços. Então, clique em salvar e fechar no canto
        superior direito. Dica: crie um triângulo que tenha 100 pixels de comprimento.
        Boa sorte!
      Course 4 Artist Functions 5 OLD_instruction: |
        Vamos tentar usar nossas duas funções
        para desenhar uma casa - o que precisa ser corrigido neste código para desenhar a casa corretamente?
      Course 4 Artist Functions 5_instruction: "Usando o bloco de função \"desenhe
        um quadrado\",\nvocê consegue desenhar esta imagem? Dica: os quadrados estão
        a 120 pixels de distância um do outro.\r\n"
      Course 4 Artist Functions 6_instruction: |
        Qual bloco você precisa adicionar para
        que o triângulo fique em cima do quadrado?
      Course 4 Artist Functions 7_instruction: |
        Você consegue desenhar uma linha de quadrados usando
        uma função Quadrado? Cada quadrado tem 40 pixels de comprimento.
      Course 4 Artist Functions 8_instruction: |
        Você está pegando o jeito de como
        usar os blocos de função? Vamos modificar esse quadrado para que ele tenha 200 pixels
        de tamanho. Dica: clique em "editar" para alterar o tamanho de "desenhe um quadrado"
        no editor da função. Lembre-se de clicar em "Salvar e Fechar" para sair do
        editor da função.
      Course 4 Artist Functions 9_instruction: |
        A maior parte do código para
        criar uma função foi dada a você. Contudo, parece que algo está faltando. Você consegue
        completar este bloco de função?
      Course 4 Artist Functions challenge_instruction: |
        Click here to see the hints
        again.
      Course 4 Artist Functions Inspiration_instruction: |
        Click here to see the hints
        again.
      Course 4 Artist Functions inspire_instruction: "Atividade livre - Inspiração:\nAgora
        você aprendeu tudo o que precisa saber para criar um padrão como esse!\nSe
        essa imagem inspira você, tente fazer algo similar. Caso contrário, crie\nalgo
        você mesmo.\r\n\r\nQuer saber como nosso padrão de inspiração foi\nfeito?
        Visite-nos para ver a solução."
      Course 4 Artist Inspire_instruction: "Atividade livre - Inspiração: agora você
        aprendeu\ntudo o que precisa saber para criar um padrão como esse! Se essa
        imagem\ninspira você, tente fazer algo semelhante. Caso contrário, crie algo
        você mesmo.\r\n\n\r\nQuer saber como nosso padrão de inspiração foi feito?
        Visite https://studio.code.org/c/105765376/edit\npara ver a solução."
      Course 4 Artist Params 1_instruction: |
        Vamos editar uma função que desenha um
        quadrado com lados de 50 pixels
      Course 4 Artist Params 10_instruction: |
        Você pode chamar funções de dentro
        de outras funções! Usando sua função "forma" como base, crie 3 formas
        de casa, cada uma 20 pixels maior que a anterior, começando com um comprimento de 50 pixels. Usar
        um laço com contador pode ser útil.
      Course 4 Artist Params 11_instruction: |
        How about a function called "pinwheel"
        that takes three parameters - "sides," "length" and "repeat." You can
        calculate how much to turn after each shape using the same math you used to
        figure out the turns for a shape of "sides". Can you recreate this picture?
        Here's a tip each shape is 100 pixel's in length.
      Course 4 Artist Params 12_instruction: |
        Use sua função "cata-vento" para desenhar
        cada uma dessas formas. O comprimento do lado de cada imagem é 50.
      Course 4 Artist Params 13_instruction: |
        Atividade livre: aqui estão as funções que você escreveu
        e mais algumas com as quais você pode brincar. Desenhe alguma coisa incrível!
      Course 4 Artist Params 2_instruction: |
        That triangle function would be a whole
        lot more useful if it could draw triangles of different sizes. I've added
        a parameter for line length, but it doesn't do anything yet. Can you update
        the function so it uses the "length" parameter when it draws each side?
        The triangle sizes are 150 pixels, 75 pixels and 25 pixels.
      Course 4 Artist Params 3_instruction: |
        Incrível! Você consegue desenhar cada um desses triângulos
        com essa nova função? O primeiro tem 25 pixels de comprimento, o segundo
        tem 50 e o terceiro tem 75.
      Course 4 Artist Params 4_instruction: |
        Você consegue adicionar uma nova função chamada quadrado?
        Ela também deve receber um parâmetro comprimento, como a função triângulo. Dessa vez,
        desenhe 3 quadrados, de 25, 50, e 75 pixels de comprimento, separados por 100 pixels.
      Course 4 Artist Params 5_instruction: |
        Use suas duas novas funções para desenhar
        esta imagem. Para facilitar, você pode usar um laço com um parâmetro "contador".
      Course 4 Artist Params 6_instruction: |
        Vamos editar essa função "desenhe uma forma".
        Ela já tem um parâmetro "comprimento". Agora, vamos editar a função para adicionar também
        um parâmetro "lados". Lembre-se de que o ângulo para virar para uma determinada forma é
        360 dividido pelos lados que ela tem. Dica: o triângulo tem 100 pixels de comprimento, o hexágono tem 25 pixels e o quadrado tem 50 pixels.
      Course 4 Artist Params 7_instruction: |
        Você consegue desenhar essas formas, preenchendo
        o "???"? O quadrado e o triângulo têm 100 pixels, enquanto o hexágono
        tem 75 pixels.
      Course 4 Artist Params 8_instruction: |
        Você consegue descobrir como desenhar esta
        forma? Dica: crie uma nova função com 6 lados chamada hexágono.
      Course 4 Artist Params 9_instruction: |
        Você se lembra de quando usamos o laço contador,
        mas removemos um laço de dentro? Vamos nos divertir um pouco e usar a função "desenhe uma
        forma" com os parâmetros "lados" e "comprimento". Você pode recriar
        essas formas? O contador do quadrado deve ser 5/100/5, o do triângulo deve ser
        10/100/10 e o do hexágono deve ser 2/100/2.
      Course 4 Artist Var 9_instruction: |
        Aqui está o algoritmo para desenhar um triângulo.
        Modifique-o para que ele use a variável "lados". Substitua o número 3
        pela variável "lados". Dica: lembre-se de usar o bloco "defina os lados para".
      Course 4 Artist Vars 1_instruction: |
        Você pode me ajudar a desenhar um triângulo? Ele tem
        100 pixels de comprimento em cada lado.
      Course 4 Artist Vars 10_instruction: |
        Aqui temos um algoritmo que desenha um triângulo
        a partir de triângulos menores. Você pode modificá-lo para que ele use a variável "lados"
        para desenhar cada triângulo? Olhe para o código e, toda vez que você
        vir o número 3, substitua-o pela variável "lados". Lembre-se de usar
        o bloco "defina os lados".
      Course 4 Artist Vars 11_instruction: |
        Aqui está o mesmo algoritmo que usamos
        no último desafio - qual deve ser o valor atribuído à variável "lados"
        para desenhar essa imagem de quadrados?
      Course 4 Artist Vars 12_instruction: |
        Vamos definir a variável "lados" como
        5. Quanto mais lados adicionarmos a esse algoritmo, maior será o
        padrão! Vamos adicionar uma nova variável chamada "comprimento" e usá-la onde há
        um bloco "avance". Para essa forma, defina a variável "comprimento" como 75.
      Course 4 Artist Vars 13_instruction: "When a shape has lots of sides, each\nside
        needs to be shorter if you want the whole pattern to fit on the screen.\n\r\nLet's
        recreate the algorithm for this amazing pattern, but instead of\nmanually
        setting the `length` variable, let's use a math block with the `sides`\nvariable
        inside to make sure that each shape fits correctly. The perimeter\nof each
        polygon is 300 pixels.\r\nNeed some hints?  Click here."
      Course 4 Artist Vars 14_instruction: |
        Atividade livre: veja, agora seu algoritmo
        está aninhado dentro de mais um laço. Experimente alterar os valores das
        suas duas variáveis para desenhar padrões legais.
      Course 4 Artist Vars 2_instruction: |
        Ao invés de "avance por 100,"
        o bloco "mova" agora referencia a variável "comprimento". Você pode definir
        "comprimento" como 150 para desenhar esse triângulo novo?
      Course 4 Artist Vars 3_instruction: |
        Temos aqui um laço que desenha um quadrado, mas
        algo está faltando. Você pode consertá-lo para que ele use a variável "comprimento"
        para descobrir qual deve ser o tamanho de cada lado?
      Course 4 Artist Vars 4_instruction: |
        Agora eu quero fazer um retângulo que tenha
        a altura duas vezes maior que a largura. Temos uma variável chamada "largura" que
        tem valor 100. Você pode usar os blocos matemáticos para completar o código?
      Course 4 Artist Vars 5_instruction: |
        Use a variável "lados" para controlar
        quantas vezes esse laço é executado.
      Course 4 Artist Vars 6_instruction: |
        Hmm, eu tentei alterar o valor da variável "lados"
        para 4 a partir do código do último desafio, mas ele ainda está desenhando um triângulo.
        Você pode usar a variável "lados" (junto com um bloco matemático) para garantir
        que eu vire a quantidade correta? Dica: 360 dividido pelo número de lados
        resulta no número de graus a virar.
      Course 4 Artist Vars 7_instruction: |
        Você pode modificar a variável "lados"
        para me ajudar a desenhar esse hexágono?
      Course 4 Artist Vars 8_instruction: |
        Atividade livre: faça experiências com o número
        de lados que essa forma tem. Você consegue alterar o algoritmo de forma que o tamanho
        total da forma seja sempre o mesmo, não importando quantos lados ela tem? Dica: você
        pode precisar usar seus blocos matemáticos (360 dividido por "lados" em dois lugares
        desta vez)
      Course 4 Artist Vars 9_instruction: |
        Modifique esse algoritmo para que ele use a variável
        "lados" ao invés de um número fixo para desenhar um triângulo. Use o bloco
        "defina os lados para".
      Course 4 Bee 1_instruction: |
        A abelha não sabe dizer se isso é uma flor ou uma colmeia.
        Primeiro verifique se isso é uma for ou uma colmeia, e então colete néctar
        apenas se for uma flor.
      Course 4 Bee 2_instruction: |
        Verifique cada objeto para ver se é uma flor. Se for,
        colete o néctar... caso contrário, você pode ignorá-lo!
      Course 4 Bee 3_instruction: |
        O objeto desconhecido pode ser uma flor ou uma colmeia.
        Use o bloco se-senão para coletar néctar se ele for uma flor, senão produza mel
        (porque então ele seria uma colmeia).
      Course 4 Bee 4_instruction: |
        Essa flor roxa pode ter 1, 2 ou 3
        néctares. Aqui um bloco se-senão é combinado com outro bloco se-senão para criar
        um bloco se, senão-se, senão. Complete a solução para coletar a quantidade desconhecida
        de néctar.
      Course 4 Bee 5_instruction: |
        Essa flor roxa pode ter 1, 2 ou 3
        néctares. Adicione um bloco se-senão para criar um bloco se, senão-se, senão. Complete
        a solução para coletar a quantidade desconhecida de néctar.
      Course 4 Bee 6_instruction: |
        Essa flor roxa pode ter 1, 2 ou 3
        néctares. Crie um bloco se, senão-se, senão para coletar a quantidade desconhecida de
        néctar.
      Course 4 Bee 7_instruction: |
        Use tudo o que você aprendeu até agora para coletar
        todo o néctar. A flor roxa pode ter 1, 2 ou 3 néctares.
      Course 4 Bee For Loops 1_instruction: |
        Use um laço para coletar o néctar de
        todas as flores.
      Course 4 Bee For Loops 10_instruction: |
        Se seu laço está fazendo contagem regressiva, o
        incremento é subtraído da sua variável contador a cada repetição. Qual deve ser
        seu incremento para coletar 9, então 6, e então 3 néctares?
      Course 4 Bee For Loops 11_instruction: |
        O que está errado nesse laço? Veja se
        você consegue arrumá-lo e fazer a abelha coletar todo o néctar.
      Course 4 Bee For Loops 2_instruction: |
        Temos aqui um novo tipo de laço, chamado de
        laço "para". Esse laço para em particular vai contar de 1 até 5, de 1 em 1, e executar
        o conteúdo do laço a cada contagem. Ajude a abelha a chegar até o néctar.
      Course 4 Bee For Loops 3_instruction: |
        Você pode resolver esse desafio usando um
        laço "para" para contar de 1 até 3, de 1 em 1. Agora vamos coletar um pouco de néctar!
      Course 4 Bee For Loops 4_instruction: |
        Colete todo o néctar dessas
        flores. Eu gostaria de saber se existe uma forma mais fácil de fazer isso...
      Course 4 Bee For Loops 5_instruction: |
        Ah, o laço para deixa isso muito mais fácil!
        Estamos usando a variável "contador" do laço "para" para repetir o bloco "obtenha néctar"
        o mesmo número de vezes que o laço se repete. Ufa! São muitas repetições.
        Todo o código que você precisa está aqui, dê uma olhada nele e então
        clique em Executar para ver como ele funciona.
      Course 4 Bee For Loops 6_instruction: |
        Você também pode usar um laço "para" para fazer contagem
        regressiva. Tente coletar esse néctar fazendo uma contagem regressiva de 5 até 1, de 1 em 1.
      Course 4 Bee For Loops 7_instruction: |
        Use a variável "contador" do seu laço "para"
        para controlar a distância do movimento horizontal.
      Course 4 Bee For Loops 8_instruction: |
        Você pode usar a variável do laço para controlar
        o movimento e a coleta de néctar?
      Course 4 Bee For Loops 9_instruction: |
        O último número em seu laço para é
        chamado de "incremento" e, a cada execução do laço, a variável contador
        é alterada de acordo com o incremento. Tente coletar essas flores usando um incremento
        de 2.
      Course 4 Bee Loops 5 NEW_instruction: Aqui estão três flores. Você consegue
        encontrar o padrão de instruções que você precisa repetir 3 vezes para coletar
        o néctar com o menor número de blocos?
      Course 4 Bee Loops 5a NEW_instruction: Agora, use os loops para ajudar a abelha
        a recolher todo o néctar em seu caminho ao favo de mel com tão poucos blocos
        quanto possível.  Quando você chegar lá, não se esqueça de fazer mel!
      Course 4 Bee Params 1_instruction: |
        Use a função "obtenha 3 néctares" que
        vira, move-se para coletar o néctar e então retorna à posição original.
        Escreva uma sequência para coletar todo o néctar usando "obtenha 3 néctares".
      Course 4 Bee Params 2_instruction: |
        Modifique a função "obtenha 2 néctares" para
        que ela me faça virar para a direita ao invés da esquerda para chegar às flores.
      Course 4 Bee Params 3 (copy 1)_instruction: |
        Agora há flores em ambos os
        lados! Talvez você possa usar um parâmetro para que a mesma função funcione para flores
        dos dois lados. Eu adicionei um parâmetro chamado "direção" à função.
        Se o parâmetro "direção" for igual a 0 eu devo virar à esquerda, se ele for 1 eu devo
        virar à direita.
      Course 4 Bee Params 3_instruction: |
        Agora há flores em ambos os lados! Eu
        adicionei um parâmetro chamado "direção" à função. Use as variáveis "esquerda" e
        "direita" para controlar a direção. Preencha o resto da definição da função
        e então clique em "Salvar e Fechar".
      Course 4 Bee Params 4 (copy 1)_instruction: |
        Tente usar sua nova função para
        coletar todas as flores. Lembre-se, 0 = esquerda e 1 = direita.
      Course 4 Bee Params 4 - Two WhenRun_instruction: |
        Try using your new function
        to collect all of the flowers. Remember to use the left and right variables.
      Course 4 Bee Params 4 backup_instruction: |
        Não seria legal se pudéssemos
        coletar todo o néctar com uma única função? Tente adicionar um novo
        parâmetro à função chamado "néctares" para controlar a quantidade de néctar
        a coletar. Você provavelmente vai querer renomear a função também!
      Course 4 Bee Params 4_instruction: |
        Tente usar sua nova função para coletar
        todas as flores. Lembre-se de usar as variáveis esquerda e direita.
      Course 4 Bee Params 5_instruction: |
        Vamos começar do princípio - você pode criar
        uma nova função chamada "obtenha 5 néctares" com um parâmetro de direção?
      Course 4 Bee Params 6 (copy 1)_instruction: |
        Tente usar sua nova função para
        coletar todo o néctar.
      Course 4 Bee Params 6_instruction: |
        Não seria legal se pudéssemos coletar
        todo o néctar com uma única função? Tente adicionar um novo parâmetro
        à função chamado "néctares" para controlar a quantidade de néctar a coletar.
        Você provavelmente vai querer renomear a função também!
      Course 4 Bee Params 7 (copy 1)_instruction: |
        Tente usar sua nova função para
        coletar todo o néctar.
      Course 4 Bee Params 7_instruction: |
        Tente usar sua nova função para coletar
        todo o néctar.
      Course 4 Bee Params 8 Clone 2_instruction: |
        Oooh, now there's honey to deal
        with too! How could you update your function to either get nectar or make
        honey.
      Course 4 Bee Params 8 clone 3_instruction: |
        Oooh, now there's honey to deal
        with too! How could you update your function to either get nectar or make
        honey.
      Course 4 Bee Params 8 Clone_instruction: |
        Oooh, now there's honey to deal
        with too! How could you update your function to either get nectar or make
        honey.
      Course 4 Bee Params 8 new_instruction: |
        Oooh, now there's honey to deal with
        too! How could you update your function to either get nectar or make honey.
      Course 4 Bee Params 8_instruction: |
        Ah, agora também precisamos lidar com o mel!
        Como você poderia atualizar sua função para coletar néctar ou produzir mel?
      Course 4 Bee Params Ex_instruction: |
        Tente usar sua nova função para coletar
        todo o néctar.
      Course 4 Binary 1_instruction: |
        Temos aqui uma função que recebe uma string binária
        de 1's e 0's e instrui a fazendeira a se mover da esquerda para a direita,
        de cima para baixo, passando pelos quadrados nos quais o número tem um zero. Execute o
        código fornecido para ver como a fazendeira usa números binários para desenhar uma imagem.
      Course 4 Binary 2_instruction: |
        Qual string binária você poderia repetir 8 vezes para
        desenhar essa imagem? Dica o número "1" preenche um buraco.
      Course 4 Binary 3_instruction: |
        Você pode desenhar esse padrão repetindo uma única
        string binária?
      Course 4 Binary 5 (copy 1)_instruction: |
        Qual string binária, repetida 10 vezes,
        vai desenhar essa imagem?
      Course 4 Binary 5_instruction: |
        Qual string binária, repetida 10 vezes, vai
        desenhar essa imagem?
      Course 4 Binary 6 (copy 1)_instruction: |
        Qual string binária, repetida 10 vezes,
        vai desenhar essa imagem?
      Course 4 Binary 6_instruction: |
        Qual string binária, repetida 10 vezes, vai
        desenhar essa imagem?
      Course 4 Binary 7_instruction: |
        Qual string binária, repetida 10 vezes, vai
        desenhar essa imagem?
      Course 4 Binary 8_instruction: |
        Você pode completar a maior parte dessa imagem
        repetindo um número binário de 5 bits - então você vai precisar de mais um número de 4 bits
        para completar o canto inferior direito.
      Course 4 EC 1a_instruction: No rules. No clues. Just the challenge!
      Course 4 EC 1b_instruction: No rules. No clues. Just the challenge!
      Course 4 EC 2a_instruction: |
        **Extreme Challenge:**  No rules. No clues. Just
        the challenge!
      Course 4 EC 2b_instruction: |
        **Extreme Challenge:**  No rules. No clues. Just
        the challenge!
      Course 4 EC 2c_instruction: |
        **Extreme Challenge:**  No rules. No clues. Just
        the challenge!
      Course 4 EC 2d_instruction: No rules. No clues. Just the challenge!
      Course 4 EC 3_instruction: "Use what you learned in the previous level to draw\nan
        image like this. Note: The code becomes more simple if you incorporate\nparameters.
        \n"
      Course 4 EC 3a_instruction: |
        Extreme Challenge: No rules. No clues. Just the
        challenge!
      Course 4 Maze 1_instruction: Leve o Angry Bird até o porco!
      Course 4 Maze 2_instruction: Desvie do TNT!
      Course 4 Maze 3_instruction: 'Programe o Angry Bird para chegar até o porco. '
      Course 4 Maze 4_instruction: Experimente o bloco "repita" para usar menos blocos...
      Course 4 Maze 5_instruction: |
        Você pode resolver esse desafio usando o menor número
        possível de blocos?
      Course 4 Maze 6_instruction: |
        Você pode resolver esse desafio usando o menor número
        possível de blocos?
      Course 4 Play Lab For Loops 2_instruction: |
        Dessa vez, vamos tentar contar
        os números ímpares de 1 até 100.
      Course 4 Play Lab Params 1_instruction: |
        Aqui temos uma função chamada "pule"
        que faz seu personagem principal pular 100 pixels. Use a função pule
        para coletar todas as bandeiras.
      Course 4 Play Lab Params 10_instruction: |
        Adicionamos uma última função para
        que você use. Programe seu jogo para chamar a função "suba de nível" se "pontos_jogador"
        > 10. Jogue o jogo e passe do nível 4 para seguir para o próximo desafio.
      Course 4 Play Lab Params 2_instruction: |
        Agora temos bandeiras que estão altas demais
        para nosso pulo atual! Vamos adicionar um parâmetro à função pule chamado
        "altura". A seta para cima deve pular 200 pixels, mas a seta para baixo deve
        pular 100 pixels. Clique em "editar" na função pule e atualize-a para que
        ela use o parâmetro altura ao invés de simplesmente pular 100 pixels.
      Course 4 Play Lab Params 3_instruction: |
        Vamos adicionar outro parâmetro à
        função pule para que possamos usá-la com outros personagens. Cada personagem é representado
        por um número, começando em um. Edite a função "pule" para que a definição
        inclua o parâmetro "personagem".
      Course 4 Play Lab Params 4_instruction: |
        Aqui temos uma função chamada "patrulhe".
        Edite-a para mover o gato 400 pixels para cima, e então 400 pixels para baixo.
      Course 4 Play Lab Params 5_instruction: |
        Preencha a entrada do parâmetro "personagem"
        para que possamos chamar a função "patrulhe" para cada um dos personagens. Lembre-se,
        os personagens correspondem aos números 1, 2 e 3.
      Course 4 Play Lab Params 6_instruction: |
        Add another parameter called "speed"
        to the "patrol" function. Try using a "set speed" block with the new "speed"
        parameter to help Penguin get both flags before the other sprites even get
        one.
      Course 4 Play Lab Params 7_instruction: |
        Use as setas do teclado para controlar o
        cão e coletar todas as bandeiras.
      Course 4 Play Lab Params 8_instruction: |
        Use um bloco "quando tocar" para enviar
        o cão de volta para a parte superior esquerda se ele tocar em qualquer outro personagem.
      Course 4 Play Lab Params 9_instruction: "Here's our game from an earlier stage,\nbut
        most of the code is hidden. There’s a new function `score_points.`\r\n\r\nEdit\nthe
        function so that a new parameter called `points` can be added to `player_score`.\n\r\n\r\nThe
        variable `player_score` should increase each time Dog tags Cat\nwith pie,
        and decrease each time that Cat tags Dog with a sandwich.\r\n\r\nNote:\nWhen
        you're done, click \"Run\" to play.  When Dog scores 6 points, you will\nmove
        on to the next puzzle. "
      Course 4 Play Lab Vars 1_instruction: |
        Você não precisa escrever código algum, apenas
        clique em "Executar" para jogar! Nesse jogo, você é o cão que está tentando
        coletar mais bandeiras do que o gato. Use a seta para baixo para controlar o cão.
        Pressione "Terminar" quando você terminar de jogar.
      Course 4 Play Lab Vars 2_instruction: |
        Essa corrida não foi muito justa! Altere
        a variável "velocidade_cão" para garantir que você possa coletar mais bandeiras do que o
        gato. O primeiro a coletar 10 bandeiras vence!
      Course 4 Play Lab Vars 3_instruction: |
        Temos aqui um novo tipo de jogo! Use as
        setas para a esquerda e para a direita para se mover e a seta para cima para pular. Veja se você
        consegue coletar todas as bandeiras.
      Course 4 Play Lab Vars 4_instruction: |
        Agora estamos usando uma variável chamada "altura"
        para controlar a altura que o cão pode pular. Atualize a variável "altura" para que
        o cão possa pular alto o suficiente para alcançar todas as bandeiras. Dica: as novas bandeiras estão
        a uma altura de 200 pixels.
      Course 4 Play Lab Vars 5_instruction: |
        Vamos criar um jogo! Primeiro precisamos de
        uma pontuação. Use o bloco "defina os pontos como" para definir a pontuação com valor 10.
      Course 4 Play Lab Vars 6 (copy 1)_instruction: |
        Legal, agora temos nossa variável
        pontuação, mas como vamos torná-la útil? Que tal somar à variável
        pontuação toda vez que você acertar o inimigo com uma bola de fogo? Use o evento
        "quando o personagem 2 tocar em alguma coisa" para disparar uma atualização para a pontuação
        quando sua bola de fogo atingir o gato. Você pode incrementar a pontuação fazendo pontuação
        = pontuação + 1. Faça sua pontuação chegar até 10 (um ponto por vez!) para passar de nível.
      Course 4 Play Lab Vars 6_instruction: |
        Em nosso jogo, como devemos marcar pontos?
        Adicione 1 à variável "pontos" toda vez que o cão atingir o gato com uma bola de fogo.
        Use o evento "quando o personagem 2 tocar alguma coisa" para disparar uma atualização em
        sua pontuação. Você pode incrementar sua variável definindo "pontos = pontos +1".
        Faça sua pontuação chegar até 10 (aumentando um ponto por vez!) para passar de nível.
      Course 4 Play Lab Vars 7_instruction: |
        Legal, agora vamos garantir que esse jogo
        não seja muito fácil - sempre que o cão (personagem 1) for atingido por uma bola de fogo,
        você deve perder um ponto. Comece com 10 pontos para que o jogo não seja muito difícil. Faça sua
        pontuação cair de 10 para 0 para passar de nível.
      Course 4 Play Lab Vars 8 (copy 1)_instruction: |
        Certo, uma última coisa para
        esse jogo - vamos configurá-lo para que o jogador possa ganhar (ou perder). Use um laço infinito
        para verificar o valor da pontuação - se a pontuação for maior que 20, faça
        o inimigo desaparecer. Se a pontuação for menor que 0, faça o jogador desaparecer.
        Clique em "Terminar" quando o jogo funcionar do jeito que você gostaria.
      Course 4 Play Lab Vars 8_instruction: |
        Vamos configurar o jogo para que o cão possa
        ganhar (ou perder). Use um laço infinito para para verificar o valor da pontuação - se a pontuação
        for maior que 20, faça o inimigo (o gato) desaparecer. Se a pontuação for
        menor que 0, faça o jogador (o cão) desaparecer. Clique em "Terminar" quando o jogo
        funcionar do jeito que você gostaria.
      Course 4 Play Lab Vars 9_instruction: |
        Hora da atividade livre! Aqui estão todas as
        variáveis que usamos até agora e também algumas a mais, caso você as
        queira. Crie um jogo ou uma história que usa essas variáveis. Dica: role para baixo para
        ver todos os comandos da área de trabalho.
      Course 4 Play Lab Vars_instruction: |
        Certo, uma última coisa para esse jogo
        - vamos configurá-lo para que o jogador possa ganhar (ou perder). Use um laço infinito para
        verificar o valor da pontuação - se a pontuação for maior que 20, faça o inimigo
        desaparecer. Se a pontuação for menor que 0, faça o jogador desaparecer.
      Course 4 Play Labs For Loops 1_instruction: |
        Vamos fazer o cão falar todos
        os números de 1 a 100. Use um laço para e o bloco contador para que ele fale o valor da variável
        contador a cada vez que o laço for executado.
      Course 4 Play Labs For Loops 2_instruction: |
        Dessa vez, vamos tentar contar
        os números ímpares de 1 até 100.
      Course 4 Play Labs For Loops 3_instruction: |
        Se contarmos usando números maiores,
        podemos contar até números ainda maiores no mesmo intervalo de tempo. Tente fazer o cão
        contar de 10 até 1000, contando de 10 em 10.
      Course 4 Play Labs For Loops 4_instruction: |
        Alterar o incremento pode ser
        útil, mas ainda estamos contando linearmente (cada número está separado pela mesma
        distância do anterior). E se eu quisesse contar exponencialmente? Sem alterar
        as configurações desse laço para, você pode contar 1, 4, 9 , 16, 25... (contador
        ao quadrado)?
      Course 4 Play Labs For Loops 4a_instruction: "Now, let's blend the variables\nfrom
        Stage 7 together with your \"counter\" variable to make some magic happen.
        \  \r\n\r\nIn\nthis puzzle, Dog will count from 0 to 1000 by \"increment\".
        \ Set the \"increment\"\nvariable to 10 at the beginning of your code to see
        what happens."
      Course 4 Play Labs For Loops 5_instruction: |
        Na última etapa contamos o
        quadrado de cada número. Tente alterar "contador ^ 2" para "contador ^ 3" para
        contar o cubo de cada número (1, 8, 27, 64, 125, 216, 343 ….)
      Course 4 Play Labs For Loops 5a_instruction: "In this puzzle, Dog will be your\ntime
        keeper.\r\n\r\nDog will count from 0 to 30 by \"increment\".  The \"increment\"\nvariable
        will begin with a value of 1.\r\n\r\nCan you make it so that each\ntime you
        click Dog, the increment increases by 2?  Click the forward arrow\nto run
        the for loop.\r\n\r\nRun the loop a couple of times, clicking Dog before\neach
        one."
      Course 4 Play Labs For Loops 6_instruction: |
        Você deve se lembrar de que um número primo
        é qualquer número inteiro que é divisível apenas por ele mesmo e por 1. Use a função "é_primo"
        para falar apenas os números primos de 1 a 100.
      Course 4 Play Labs For Loops 6a_instruction: "Dog will still keep time by counting\nwith
        our \"for loop\" by \"increment\", but this time, we will add The Wizard\ninto
        the mix.  Can you change the code so that \"increment\" goes up by two\neach
        time The Wizard is clicked?\r\n\r\nWatch out!  The Wizard moves quickly!"
      Course 4 Play Labs For Loops 7_instruction: |
        Você poderia usar um laço "para" para me
        ajudar a falar a sequência 1, 4, 7, 10, 13, 16, 19, 22, 25?
      Course 4 Play Labs For Loops 7a_instruction: "Now we're getting somewhere!  What\nif
        we start counting how many times we can click The Wizard before Dog gets\nto
        30?  \r\n\r\nFinish adding blocks to The Wizard so that every time he's\nclicked
        the variable \"clicked\" increases by one. You can ignore \"increment\"\nfor
        now.\r\n\r\nDog will start counting when you click \"Run\"."
      Course 4 Play Labs For Loops 8_instruction: |
        Qual laço me faria falar
        19, 27, 35, 43, 51?
      Course 4 Play Labs For Loops 8a_instruction: "To finish our game, we need to\nbring
        back the \"increment\" variable!    Let's tie it to the level of the\ngame.\r\n\r\n1)
        Keep track of the number of times The Wizard is clicked.\r\n2)\nIf The Wizard
        is clicked at least 10 times before Dog counts to 30, raise\n\"increment\"
        by 1 and start again.\r\n3) If The Wizard does not get clicked\nat least 10
        times, the game is over."
      Course 4 Playlab For Loop Freeplay_instruction: |
        Freeplay: Use everything you've
        learned so far to make a game that includes a `for` loop!
      Course 4 Playlab For Loops 4b_instruction: "Now, these two characters are going\nto
        race!  \r\n\r\nEach of them will move `counter` steps at a time, but their\ncounters
        will have different values because of the `for` loops.  \r\n\r\nCan\nyou change
        the increment in one of the loops so that the race is a tie?"
      Course 4 Playlab For Loops 5b_instruction: |
        Adjust the interval on these `for`
        loops so that the two characters end in the exact same place.
      Course 4 Playlab For Loops 6b_instruction: "Edit this `for` loop to create\na
        game that's fun for you to play!\r\n\r\nPress \"Run\" and click Madame\nUnicorn
        four times to win. "
      Course 4 SCF 1_instruction: |
        Use the suggested functions to draw four rows
        of hexagons. Notice how our even numbered rows are shifted to the right?
      Course 4 SCF 1a_instruction: |
        Can you figure out how to collect all of this
        nectar with the fewest blocks possible?
      Course 4 SCF 1b_instruction: |
        Can you figure out how to collect all of this
        honey with the fewest blocks possible?
      Course 4 SCF 2_instruction: "Use what you learned in the previous level to\ndraw
        an image like this. Note: The code becomes more simple if you incorporate\nparameters.
        \n"
      Course 4 SCF 3 Fail 1_instruction: Can you figure out how to...
      Course 4 SCF 3 Fail 2_instruction: Can you figure out how to...
      Course 4 SCF 3_instruction: "Use what you learned in the previous level to\ndraw
        an image like this. Note: The code becomes more simple if you incorporate\nparameters.
        \n"
      Course 4 SCFL 1_instruction: |
        Solve this puzzle using the fewest number of
        blocks possible.
      Course 4 SCFL 1a_instruction: |
        Can you get Skrat to his acorn using as few
        blocks as possible?
      Course 4 SCFL 1b_instruction: |
        Can you get Skrat to his acorn using as few
        blocks as possible?
      Course 4 SCFL 2_instruction: |
        Solve this puzzle using the fewest number of
        blocks possible.
      Course 4 SCFL 3_instruction: Can you figure out how to re-create this drawing?
      Course 4 SCFL 4_instruction: Can you figure out how to re-create this drawing?
      Course 4 SCFL 5_instruction: Can you figure out how to re-create this drawing?
      Course 4 SCFL 6_instruction: |
        Can you figure out how to re-create this drawing
        with a single loop?
      Course 4 SCFL 7_instruction: |
        The artist wants to catch some waves! Can you
        figure out how to re-create this drawing?
      Course 4 SCFP 1_instruction: |
        Create a function with parameters that allows
        the artist to jump backward and forward by x pixels, and also up and down
        by y pixels (using positive and negative numbers).
      Course 4 SCV 1_instruction: Click here to view the instructions again.
      Course 4 SCV 2_instruction: Click here to view the instructions again.
      Course 4 SCV 3_instruction: "Now for a game of tag!  Tag Cat to get 2 points.\nTag
        Penguin to get 3 points.  Get exactly 10 points to win!\r\nBut be careful,\nwhen
        Cat and Penguin tag each other, they take points away.\r\n\r\nAdd the\nblocks
        necessary to make this game work the way it's been explained.  How\nwill you
        get Dog to move in all directions using the arrow keys?  How will\nyou add
        points when Dog tags Cat or Penguin?  How will you subtract points\nwhen Cat
        and Penguin touch?"
      Course 4 SCV 4_instruction: |
        Solve this puzzle with the fewest number of blocks
        possible.
      Course 4 SCV 5_instruction: |
        Solve this puzzle with the fewest number of blocks
        possible.
      Course 4 SCV 6_instruction: Click here to view the instructions again.
      Course 4 SCVP 1_instruction: |
        Create a function with parameters that allows
        the artist to jump backward and forward by x pixels, and also up and down
        by y pixels (using positive and negative numbers).
      Course 4 Variables Assessment_instruction: |
        Você consegue criar essa imagem usando
        uma variável para os lados? Cada linha deve ter 50 pixels de comprimento.
      Course1BeePuzzle12_instruction: Get three nectars and then make two honey
      Course1MazeAssessment1_instruction: "This is a test!\r\nMove one way, then\nanother
        to get me to the pig"
      Course1MazeAssessment2_instruction: "This is a test!\r\nMove one way, then\nanother
        to get me to the pig."
      course2_playlab_stage17_1_instruction: |
        Can you make Jorge the Dog (actor 1)
        say "Hi"?
      course2_playlab_stage17_10_instruction: "Add blocks to the `when run` event\nto
        change the background and the speed of Waddles.\r\n\r\nPlay the game and\nmove
        Waddles with the arrows until you score."
      course2_playlab_stage17_11_instruction: |
        Create your own story. When you're
        done, click Finish to let friends try your story on their phones.
      course2_playlab_stage17_2_instruction: |
        Can you make Jorge (actor 1) say something,
        then have Olive the Cat (actor 2) say something?
      course2_playlab_stage17_3_instruction: |
        Can you write a program to make Jorge
        (actor 1) move toward Olive the Cat?
      course2_playlab_stage17_4_instruction: |
        Can you write a program that makes
        Jorge (actor 1) move to Olive the Cat, and have Olive say "Hello" when Jorge
        reaches her?
      course2_playlab_stage17_5_instruction: |
        Can you write a program to make Octavia
        say "Hi" when she is clicked?
      course2_playlab_stage17_6_instruction: |
        Now, write a program to make Waddles
        move around using the up / down / left /right keys to hit all of the targets!
      course2_playlab_stage17_7_instruction: |
        The `repeat forever` block allows you
        to run code over and over forever. Can you attach blocks to move Chomp the
        Dino (actor 2) up and down forever?
      course2_playlab_stage17_8_instruction: "Can you have Waddles (actor 1) say\n\"Ouch!\"
        and play a \"hit\" sound if he runs into Chomp? \r\n\r\nWhen you're\ndone,
        play the game to make that happen."
      course2_playlab_stage17_9_instruction: "Can you add a block to score a point\nwhen
        Waddles runs into Octavia (actor 3)? \r\nPlay the game and move Waddles\nwith
        the arrows until you score!"
      course3_playlab_stage16_1_instruction: Você consegue fazer esse cachorro dizer
        "Olá, mundo"?
      course3_playlab_stage16_2_instruction: |
        Can you make the dog say something
        and then have the cat say something afterwards?
      course3_playlab_stage16_3_instruction: |
        Can you write a program to make this
        dog move to the cat?
      course3_playlab_stage16_4_instruction: |
        Can you write a program that makes
        the dog move to the cat, and have the cat say "hello" when the dog reaches
        him?
      course3_playlab_stage16_5_instruction: |
        Can you add a block to make the octopus
        happy?
      course3_playlab_stage16_6_instruction: |
        Create your own story. When you're
        done, click Finish to let friends try your story on their phones.
      course3_playlab_stage17_1_instruction: |
        Can you write a program to make the
        octopus say "hello" when it is clicked?
      course3_playlab_stage17_2_instruction: |
        Can you write a program to make Waddles
        move around using the up / down / left /right keys to hit all of the targets?
      course3_playlab_stage17_3_instruction: |
        The "repeat forever" block allows
        you to run code continuously. Can you attach blocks to move this dinosaur
        up and down repeatedly?
      course3_playlab_stage17_4_instruction: |
        Can you have Waddles say "Ouch!"
        and play a "hit" sound if he runs into the dinosaur, and then move him with
        the arrows to make that happen?
      course3_playlab_stage17_5_instruction: |
        Can you add a block to score a point
        when Waddles runs into the octopus, and then move him with the arrows until
        you score?
      course3_playlab_stage17_6_instruction: |
        Can you add blocks to change the background
        and the speed of Waddles, and then move him with the arrows until you score?
      course3_playlab_stage17_7_instruction: |
        Create your own story. When you're
        done, click Finish to let friends try your story on their phones.
      courseA_maze_seq1_instruction: |
        Play with these blocks to see if you can get
        me to the pig!
      courseA_maze_seq2_instruction: Altere o código para me levar até o porco!
      courseB_playlab_events2_instruction: |
        Have Daisy the Dragon say something when
        you click "Run".
      courseB_playlab_events3_instruction: |
        Use an event to make Daisy the Dragon
        switch to a random mood when you click on her.
      courseB_playlab_events4_instruction: |
        Knight time!  Add an event so that the
        knight moves toward the dragon when the left arrow is clicked.
      courseB_playlab_events5_instruction: |
        Now add an event so that the knight runs
        away from the dragon when you press the right arrow.
      courseB_playlab_events6_instruction: "Help your knight get all of the flags!\r\n\r\nTo\ndo
        this, you'll need to add events to help the knight move up and down."
      courseB_playlab_events7_instruction: |
        Make this game fun by setting the knight
        to vanish when he runs into the dragon!  Play a sound when they collide to
        make it feel more real.
      courseB_playlab_events8_instruction: |
        Use your imagination. What can you do
        to make this game more fun?
      courseB_playlab_eventsFP_instruction: |
        Use your imagination. What can you do
        to make this game more fun?
      courseB_playlab_eventsToolbox_instruction: |
        Finish by playing a sound and making
        the knight vanish when he runs into the dragon!
      courseC_puppy_loops10_instruction: You are doing great! Keep it up!
      courseC_puppy_loops11_instruction: |
        You are almost there! This time, choose
        any path you like!
      courseC_puppy_loops8_instruction: |
        Challenge puzzle! Combine ideas from the
        last few puzzles to complete this.
      courseC_puppy_loops9_instruction: You are doing great! Keep it up!
      Crack a Caesar Cipher_instruction: Instruções
      Crack Random Substitution_instruction: Instruções
      CSD Hackathon Pt 1_instruction: "(Click to see full instructions)"
      CSD Hackathon Pt 2_instruction: "(Click to see full instructions)"
      CSD Hackathon Week 1_instruction: "(Click to see full instructions)"
      CSD Hackathon Week 2_instruction: "(Click to see full instructions)"
      CSD U3 Background Discuss_instruction: |
        Here's a program that looks pretty
        similar to what you've been writing, but may behave quite differently. You'll
        want to stop and discuss with the class before moving on.
      CSD U3 Background Experiment_instruction: |
        Here's a program that looks pretty
        similar to what you've been writing, but may behave quite differently. You'll
        want to stop and discuss with the class before moving on.
      CSD U3 Boolean Modify_instruction: |
        Modify the code so that all of the console.log
        commands print true
      CSD U3 Boolean Predict_instruction: |
        What do you think this code will do when
        it is run? Predict what each console.log() command will print, then run the
        program to check your predictions.
      CSD U3 Draw Loop Discuss_instruction: |
        Here's a program that looks pretty
        similar to what you've been writing, but may behave quite differently. You'll
        want to stop and discuss with the class before moving on.
      CSD U3 Draw Loop Experiment_instruction: |
        Try using some of the other shape
        functions you've learned in the draw loop. What happens when you use randomNumber()
        to generate some of the inputs?You'll want to stop and discuss with the class
        before moving on.
      CSD U3 Expressions calculator_instruction: |
        Add the numbers 1 through 10. Multiply
        the numbers 1 through 10. Check your answers with a neighbor.
      CSD U3 Frame Rate_instruction: Slow down Gamelab Gary's animation with frameRate()
      CSD U3 Keypress Boolean_instruction: |
        Modify the code so that all of the console.log
        commands print true
      CSD U3 Keypress Watchers_instruction: |
        Modify the code so that all of the console.log
        commands print true
      CSD U3 Random Animation_instruction: |
        Use randomNumber() to animate Gary's
        mouth.
      CSD U3 Random Choice_instruction: |
        Use the randomNumber() block to generate
        either 0 or 1
      CSD U3 Random Color_instruction: |
        Could you use randomNumber() to pick random
        colors as well? Try setting one or more of the channels in the rgb block with
        a random number. What should the maximum value be?
      CSD U3 Random Intro_instruction: |
        What do you think this code will do when
        it is run? Make a prediction, then run this code 5 - 10 times, recording the
        output each time. Share your results with your neighbor.
      CSD U3 Random Min Max_instruction: |
        Using console.log() write a program that
        randomly returns a number in a range you define.
      CSD U3 Random Width Height_instruction: |
        Pick a shape block and use calls to
        randomNumber() in place of one or more of the parameters. Maker sure you run
        it a few times so you can see the effect of randomization.
      CSD U3 Simple Drawing - Animation 2_instruction: |
        Use randomNumber() on the
        x position and width of your cloud ellipses to introduce a bit of animation.
      CSD U3 Simple Drawing - Animation_instruction: |
        Use randomNumber() on the x
        position and width of your cloud ellipses to introduce a bit of animation.
      CSD U3 Simple Drawing - Background_instruction: |
        Put all of your code into
        a draw() loop and then add set the background to blue with the background()
        block.
      CSD U3 Simple Drawing - Personal Animation_instruction: DO This
      CSD U3 Sprites intro sprites_instruction: Do This
      CSD U3 Variable Arithmetic pt2_instruction: |
        Predict: What two numbers will
        be displayed in the console?
      CSD U3 Variable Arithmetic_instruction: |
        Change the value "size" initialized
        to make a larger square.
      CSD U3 Variable Incrementation pt2_instruction: |
        Predict: What two numbers
        will be displayed in the console?
      CSD U3 Variable Incrementation_instruction: |
        Predict: What two numbers will
        be displayed in the console?
      CSD U3 Variables CHALLENGE gamelab gary_instruction: |
        Use variables to animate
        Game Lab Gary
      CSD U3 Variables create and assign_instruction: |
        Create and assign size in
        a single line of code.
      CSD U3 Variables draw loop newVars_instruction: |
        Extend this project to create
        your own random art visualization with variables.
      CSD U3 Variables draw loop rgb_instruction: |
        Assign the variables x1 and y1
        random values inside the draw loop and use them to control where the square
        is drawn.
      CSD U3 Variables draw loop xy_instruction: |
        Assign the variables x1 and y1
        random values inside the draw loop and use them to control where the square
        is drawn.
      CSD U3 Variables eyeBrows_instruction: |
        Predict what will happen when you move
        the assignment of eyeSize inside the draw loop. Then try it out
      CSD U3 Variables Initialize_instruction: |
        Predict: What will get displayed
        in the console?
      CSD U3 Variables Intro_instruction: |
        Create your own variable, give it a value,
        and display that value in the console.
      CSD U3 Variables make a big square_instruction: |
        Change the value of size multiple
        times. How does it change your drawing?
      CSD U3 Variables make a square_instruction: |
        Change the value of size multiple
        times. How does it change your drawing?
      CSD U3 Variables multiple assignments_instruction: |
        Change the value of petalSize
        multiple times. How does it change your drawing?
      CSD U3 Variables naming rules_instruction: |
        Change the value of petalSize multiple
        times. How does it change your drawing?
      CSD U3 Variables random assignment_instruction: |
        Change the value of petalSize
        multiple times. How does it change your drawing?
      CSD U3 Variables random draw loop_instruction: |
        Predict what will happen when
        you move the assignment of eyeSize inside the draw loop. Then try it out
      CSD U3 Variables random drawing exemplar_instruction: |
        Check out this example
        randomized drawing.
      CSD U3 Variables Random_instruction: |
        Predict: What will get displayed in the
        console?
      CSD U3 Variables Reassign pt2_instruction: |
        Create and assign a new variable
        in a single line.
      CSD U3 Variables Reassign_instruction: |
        Predict: What will get displayed in
        the console?
      CSD U3 Variables Square Random Loop_instruction: |
        Test your predictions from
        the last level.
      CSD U3 Variables Square Random_instruction: |
        Change the value "size" initialized
        to make a larger square.
      CSD U3 Variables Square_instruction: |
        Change the value "size" initialized
        to make a larger square.
      CSD U3 Variables TEMPLATE square_instruction: |
        Change the value of petalSize
        multiple times. How does it change your drawing?
      CSD U3 Variables use value rect_instruction: |
        Predict: What will get displayed
        in the console?
      CSD U3 Variables write_instruction: |
        Use the write block to display the value
        of size
      CSD U3 Variables2 expressions in commands_instruction: |
        Use expressions inside
        a drawing command
      CSD U3 Variables2 expressions in variables_instruction: |
        Assign the value of
        each expression to a variable and console.log that variable.
      CSD U3 Variables2 expressions_instruction: |
        Use console.log to display the
        results of each expression. Then create your own.
      CSD U4 - Events Template_instruction: |
        Add a large red button to your screen
        using Design Mode. (Click for full instructions.)
      CSDU4 - AppLab - 1_instruction: |
        Read the documentation for penColor() and
        penWidth() before using them to draw the blue square.
      CSDU4 - AppLab - 2_instruction: |
        Write a program that acts as a simple calculator.
        (click to see full instructions)
      CSDU4 - AppLab - 3_instruction: |
        Use console to check the ending value of num.
        (Click to see full instructions)
      CSDU4 - AppLab - 4_instruction: |2
         Use the Debug Commands to make a list of
        all the values rolled before a 6. (Click to see full instructions)
      CSDU4 - Design Mode - 1_instruction: |
        Add a button that moves the turtle when
        clicked.  (Click to see full instructions)
      CSDU4 - Design Mode - 10_instruction: |
        Introducing the setPosition command!
        Replace the moveTo in the button-click event handler to use setPosition to
        move the button itself to a random location when it's clicked.
      CSDU4 - Design Mode - 11_instruction: |
        Experiment with different event types
        and select the one that you think is best. (Click to see full instructions)
      CSDU4 - Design Mode - 12_instruction: |
        Use the textLabel command to replace
        the button in your program with a text label. (Click to see full instructions)
      CSDU4 - Design Mode - 16_instruction: |
        Add an event handler for the button
        using the "Insert and show" link in the Design Mode Events tab. (Click to
        see full instructions).
      CSDU4 - Design Mode - 17_instruction: |
        Update the ID names and `console.log`
        messages to match the correct button. (Click to see full instructions.)
      CSDU4 - Design Mode - 18_instruction: |
        Fix the layout of the bullseye game.
        (Click to see full instructions)
      CSDU4 - Design Mode - 2_instruction: |
        Run a program with two buttons that have
        the same id to see the warning message in the console. Change the ids to make
        the program run without getting a warning message.
      CSDU4 - Design Mode - 24_instruction: |
        Add an Text Input box for the name and
        age. (Click to see full instructions)
      CSDU4 - Design Mode - 25_instruction: |
        Add an event handler to the Submit button
        so that when the button is clicked it will display the name entered in the
        text box to the console.  Use getText to get the value out of the text box.
        (Click to see full instructions)
      CSDU4 - Design Mode - 26_instruction: |
        Save the age and name of the user in
        variables (Click to see full instructions)
      CSDU4 - Design Mode - 27_instruction: |
        Output a message to the 'textArea'
        (Click to see full instructions)
      CSDU4 - Design Mode - 28_instruction: |
        Write a greeting to the user when they
        hit 'enter' in the text input, using the 'change' event. (Click to see
        full instructions)
      CSDU4 - Design Mode - 29_instruction: |
        Add a dropdown for their guess instead
        of promptNum (Click to see full instructions)
      CSDU4 - Design Mode - 30_instruction: |
        Show different die images for the random
        number generated. (Click to see full instructions)
      CSDU4 - Design Mode - 31_instruction: |
        Set up an event handler to respond to
        keypress events, and display event.key in the console. Hit keys on the keyboard
        to see what happens. (Click to see full instructions)
      CSDU4 - Design Mode - 32_instruction: |
        Try out the keyup and keydown events
        to see how they are different from keypress. (Click to see full instructions)
      CSDU4 - Design Mode - 33_instruction: |
        Change the code so the sound will only
        play when the up arrow is pressed. (Click to see full instructions)
      CSDU4 - Design Mode - 4_instruction: |
        Improve the button by choosing a descriptive
        and meaningful ID. (Click to see full instructions)
      CSDU4 - Design Mode - 5_instruction: |
        Debug the program by verifying your IDs
        are being referenced properly. (Click to see full instructions)
      CSDU4 - Design Mode - 6_instruction: |
        Debug the program by properly ordering
        your button commands and event handlers. (Click to see full instructions)
      CSDU4 - Design Mode - 7_instruction: |
        Debug the program by fixing the logical
        error within the program. (Click to see full instructions)
      CSDU4 - Design Mode - 8_instruction: |
        Move the button to the middle of the
        screen. (Click to see full instructions)
      CSP Data Unit - Counting Multiple Things_instruction: "If you can count one\nthing
        you can count multiple things\r\n\r\nFind out how many people like something\nother
        than dogs and cats\r\n\r\nCount dogs\r\nCount cats\r\nCount total\r\nDo\nthe
        math\r\n\r\nblank/ blank toal\r\n\r\nCan also use this to find percents\nfrom
        this\r\n\r\nx% are dog lovers"
      CSP Data Unit -Counting Records - Easy Way_instruction: "ReadRecords with specific\ncriteria
        \r\nfind the length of an array\r\n"
      CSP Data Unit -Counting Records - Hard Way_instruction: "\r\n1. ReadRecords\nfor
        all records\r\n2. Way to loop through and count\r\n"
      CSP U4 - JSON Object Intro - Bad Way_instruction: |
        Trigger both the keyboard
        and mouse event and examine the event objects displayed in the console. Why
        might an object be the best way to store this information? (Click to see full
        instructions)
      CSP U4 - JSON Object Intro - Good Way_instruction: "Create an object with at\nleast
        5 values including at least one string and one number. (Click to see\nfull
        instructions) \n"
      CSP U4 - Objects - createObject_instruction: "Create an object with at least\n5
        values including at least one string and one number. (Click to see full\ninstructions)
        \n"
      drawings!_instruction: |
        Draw the equilateral triangle - all the sides are the
        same!
      ECSPD Binary Odometer_instruction: |
        This is another resource you could use
        with your students.
      Eval Booleans 1_instruction: |
        Boolean operators (like >, <, =) allow us to
        compare different values, returning either true or false. Click "Run" to
        see how this expression evaluates.
      Eval Booleans 2_instruction: |
        Can you set the values so that this expression
        evaluates as true?
      Eval Booleans 3_instruction: |
        The string-length function returns the number
        of characters in a string (including spaces!) - make this code evaluate to
        true.
      Eval Booleans 4_instruction: |
        Here's an Evaluation Block called AND - it returns
        true if both of its parameters are true, otherwise it returns false. Edit
        the x variable so that this expression returns true.
      Eval Booleans 5_instruction: |
        This OR block returns true if either of its parameters
        is true. Otherwise, if both parameters are false it will return false. Set
        the y variable to a value that will cause this expression to return false.
      Eval Booleans 6_instruction: |
        Here's one more boolean block called NOT. This
        block flips true to false, or false to true. If you wrap this block of code
        in a NOT block, it should return true (because we are asking if the two expressions
        do NOT produce equal values).
      Eval Booleans Free Play_instruction: |
        Free Play: Try out some creations of
        your own using Booleans.
      Eval Booleans_instruction: |
        Booleans allow us to compare different values,
        returning "true" if the are equal, or "false" if they are not. What do
        you think this code will evaluate to?
      Eval Cond 1_instruction: |
        The cond block checks the boolean expressions in
        the left column, and as soon as it finds one that returns "true" it runs
        the corresponding code on the right. If none of the expressions evaluate to
        "true," it runs the bottom block. Update the "temperature" variable so
        that this block returns "It's just right."
      Eval Cond 2 (copy 1)_instruction: |
        This condition returns a different shape
        based on the value of the "sides" variable - change the value of "sides"
        so that the conditional returns a triangle.
      Eval Cond 2_instruction: |
        This condition returns a different shape based on
        the value of the "sides" variable - change the value of "sides" so that
        the conditional returns a triangle.
      Eval Cond 3 (copy 1)_instruction: |
        Can you write a conditional that checks
        the variable "age" and returns "Old enough to vote and drive" if age >
        17, "Old enough to drive" if age is > 15, and "Can't drive or vote" if
        neither conditions is true. Hint: The first condition to return "true" wins
        - make sure you put your conditions in the right order.
      Eval Cond 3_instruction: |
        Can you write a conditional that checks the variable
        "age" and returns "Old enough to vote and drive" if age > 17, "Old enough
        to drive" if age is > 15, and "Can't drive or vote" if neither conditions
        is true. Hint: The first condition to return "true" wins - make sure you
        put your conditions in the right order.
      Eval Cond 4_instruction: |
        We can use the string=? function to make conditionals
        that respond to text input. Here's a function called green shape that takes
        a string for the type of shape. Complete the conditions so that the correct
        solid green shape is returned when the function is run with "circle", "triangle",
        "square", or "rectangle".
      Eval Cond 5_instruction: |
        Here's a similar function red shape with an additional
        variable for size. Complete the conditionals so the correct solid red image
        of a given size is drawn for "circle", "triangle", and "star".
      Eval Cond 6_instruction: "Write a function called food-critic, which takes\nin
        the name of a food and produces a String that says how you feel about that\nfood.
        For example, (food-critic “pizza”) might evaluate to “delicious”, but\n(food-critic
        “rotten eggs”) might evaluate to “gross!”. Choose at least two\nfoods to review,
        but you can you write more if you like!  Don’t forget to\nadd an “else” clause!\r\nOne
        example - and part of the definition -  has already\nbeen done for you!"
      Eval Cond 7_instruction: "Free Play: Write a function called green-shape, which\ntakes
        in the name of a shape and produces a solid green shape. Your function\nshould
        work with at least “circle”, “star” and “rectangle”, but you can add\nother
        shapes if you like. You can choose the size of each shape. Don’t forget\nto
        add an “else” clause!\r\nOne example - and part of the definition -  has\nalready
        been done for you!\r\n"
      Eval Cond 8_instruction: "Free Play: Suppose you want to own a car at 21, or\nhave
        your own business by 30. Write a function called life-goals, which takes\nin
        an age and produces a string that describes your life goals by then. Don’t\nforget
        to add an “else” clause!\r\n"
      Eval Contracts 1_instruction: |
        Use the "star" function to produce a red star
        with a 60 pixel radius
      Eval Contracts 10A_instruction: |
        Alright let's complete this puzzle with a
        Green Square that is 175 pixels in size.
      Eval Contracts 11A_instruction: |
        Can you complete this puzzle to read "Hello
        World" in the banner?
      Eval Contracts 2_instruction: |
        Check out the "rotate" function - can you
        use it to rotate this 90 pixel green square by 45 degrees?
      Eval Contracts 3_instruction: |
        Try using the "text" function to write this
        teal text at size 40.
      Eval Contracts 4 A_instruction: |
        The "scale" function returns an image that
        is scaled either larger or smaller than the input image. Try scaling this
        circle by a factor of 10 - how is the resulting image different than if you'd
        just made a circle of that size in the first place?
      Eval Contracts 4_instruction: |
        The scale function returns an image that is
        either larger or smaller than the input image. Try scaling this circle by
        a factor of 10. How is the returned image different than if you'd just made
        a circle of that size in the first place?
      Eval Contracts 8A_instruction: |
        Can you complete this puzzle? The big-triangle
        is 200 pixels in size and purple?
      Eval Contracts A_instruction: |
        Use the star function to produce a solid red
        star with a 60 pixel radius
      Eval Contracts C_instruction: |
        Check out the rotate function - can you use
        it to rotate this 90 pixel green square by 45 degrees?
      Eval Contracts E_instruction: |
        Try using the text function to write "Hello,
        world!" in teal at size 40.
      Eval Contracts shrink_instruction: "Can you complete this image using the \"shrink\"\nfunction
        block? The radius is 20. \n"
      Eval Define Funcs 1_instruction: |
        Here's a new function called green-triangle
        that takes a single Number for size and produces a green triangle. Use the
        new function to create a 125 pixel green triangle.
      Eval Define Funcs 2_instruction: |
        Let's look inside that green-triangle function
        to see how it works. Can you modify it so that the green-triangle function
        always draws outlined green triangles?
      Eval Define Funcs 3_instruction: |
        Here's the start of another new function
        called purple-circle with a domain of one Number (the radius) and a range
        of Image. The body of the function is broken though - fix it and then make
        a purple circle with 150 pixel radius
      Eval Define Funcs 4_instruction: |
        Create a new function called aqua-star that
        has a Domain of a single Number for radius and returns an aqua star of the
        given radius. Run your new function with a radius of 75.
      Eval Define Funcs 5_instruction: |
        Let's use that aqua-star function to make
        a row of different sized stars. From left to right, the stars should have
        radii of 25, 50, and 75.
      Eval Define Funcs Test_instruction: |
        Here's the start of another new function
        called purple-circle with a domain of one Number (the radius) and a range
        of Image. The body of the function is broken though - fix it and then make
        a purple circle with 150 pixel radius
      Eval Defining Vars Free Play 1_instruction: |
        Free Play: We've provided a function
        that fills your screen with my-image. Change my-image to see what patterns
        you can make.
      Eval Design Recipe .1_instruction: |
        Here's a Design Recipe for a function
        called square-circle with domain Number String and range Image. Click Edit
        to write the function definition (you will see two examples provided).
      Eval Design Recipe 1 (copy 1)_instruction: |
        We're going to write a function
        that draws a solid rectangle of any color that is twice wide as it is high.
        Start with an example - draw a solid green rectangle that has a height on
        100 pixels.
      Eval Design Recipe 1_instruction: |
        Alright, now given the Contract wide-rect:
        Number String -> Image, write an example - draw a solid green rectangle that
        has a height of 100 pixels.
      Eval Design Recipe 2 (copy 1)_instruction: |
        Let's do one more example before
        writing the function definition - this time draw a solid red rectangle with
        a height of 75 pixels.
      Eval Design Recipe 2_instruction: |
        Let's do one more example before writing
        the function definition - this time draw a solid red rectangle with a height
        of 75 pixels.
      Eval Design Recipe 3_instruction: |
        The Design Recipe for wide-rect already
        has a contract and one example. Can you write a second example and then complete
        the definition? The wide-rect function should produce a rectangle of given
        color that is twice as wide as it is high.
      Eval Design Recipe 4_instruction: |
        Use the Design Recipe to create a function
        starburst. When given a number of points and an outer radius, starburst returns
        a yellow radial star with given points, and an inner radius that is half the
        outer radius.
      Eval Design Recipe 5_instruction: |
        Using the Design Recipe, write a function
        striped-flag that takes two colors and produces a flag that is 250 pixels
        wide, 150 pixels tall, with three even horizontal stripes of given colors,
        in the order color2, color1, color2.
      Eval Design Recipe 6_instruction: |
        Write a function large-polygon that should
        output a solid polygon of given sides and color that takes up most of the
        window, regardless of the number of sides. To make sure that the polygon doesn't
        get too large as you increase the number of sides, side length should be inversely
        proportional to side number, with a length of (800/sides).
      Eval Design Recipe Free Play_instruction: |
        Free Play: Use the Design Recipe
        to create some functions of your own design
      Eval Free Play_instruction: 'Free Play: Make art with code!'
      Eval Strings Images .1_instruction: |
        So far we've only dealt with a single
        type of data, Numbers. Another type of data is a String, which is any combination
        of letters, numbers, or other characters wrapped in quotation marks. Run the
        String "Hello, world!" and see what happens.
      Eval Strings Images .2_instruction: |
        The string-append function takes two Strings
        and returns a single combined String. Add a String "Universe" to the second
        argument of string-append.
      Eval Strings Images 1_instruction: |
        The third type of data we're going to
        use is an Image. This star function takes in a Number and two Strings, and
        it evaluates to an Image. Use this function to make a solid red star with
        radius of 100.
      Eval Strings Images 2_instruction: |
        Free Play: Every Evaluation Block is color-coded
        to let you know which data type it returns and which types it needs for its
        parameters. The last parameter of the triangle function takes a String that
        controls its color - try some different colors to see what works.
      Eval Strings Images 3_instruction: |
        Some functions can only take a specific
        set of Strings, such as the second argument of this circle function, which
        controls its style. Draw this orange outline circle using the special String
        block with a dropdown to make sure you only use valid styles.
      Eval Strings Images 4_instruction: |
        Try using the rectangle block to draw this
        solid, red rectangle - it is 175 pixels wide and 100 pixels tall.
      Eval Strings Images 5_instruction: |
        Try using this new Evaluation Block called
        overlay to place a 100 pixel white triangle on top of a 200 pixel red circle.
      Eval Strings Images 6_instruction: |
        Use the overlay block to place a 75 pixel
        radius yellow star on top of a 150 pixel long blue square.
      Eval Strings Images 7_instruction: |
        The offset block lets you move an image
        relative to where it would normally be placed. Use this block to offset the
        square by 100 pixels on the y-axis.
      Eval Strings Images 8_instruction: |
        Here's a different kind of star block
        - it's called radial-star and it allows you to draw stars with any number
        of points! Use it to create a 7 point solid orange star with an inner radius
        of 75 pixels and an outer radius of 175 pixels.
      Eval Strings Images Free Play_instruction: |
        Free Play: Explore the blocks available
        to create something interesting. Make sure to share your favorite creations.
      eventsIntro_instruction: Need a better playlab/events combo
      Farmer for Authored Hint testing_instruction: |
        Wow, I found a really deep hole!
        I don't know how many shovelfuls of dirt it needs.  Can you write a program
        that fills it until the ground is even?  Hint:  Try using the while loop this
        time.
      Food Fight!_instruction: "We've added one last function for you. \r\n\r\nUse\nan
        \"if\" statement to program your game to call the \"level_up\" function\nonly
        when \"player_score\" becomes greater than a certain number.\r\n\r\nFor\nexample:
        \"player_score\" > 6\r\n\r\nPlay the game, and make it to level 3\nto move
        to the next puzzle. "
      Food Fight_instruction: "We've added one last function for you. \r\n\r\nUse\nan
        \"if\" statement to program your game to call the \"level_up\" function\nonly
        when \"player_score\" becomes greater than a certain number.\r\n\r\nFor\nexample:
        \"player_score\" > 6\r\n\r\nPlay the game, and make it to level 3\nto move
        to the next puzzle. "
      Frequency Analysis_instruction: Test
      frozen circle function in circle_instruction: |
        Agora vamos criar 20 círculos
        sobrepostos, virando 18 graus entre cada círculo.
      frozen circle function with parameter_instruction: |
        Temos aqui um bloco "crie um círculo"
        que pode fazer círculos de tamanhos diferentes. Você pode usar isso para criar
        um pequeno círculo de tamanho 5 e um círculo maior de tamanho 10?
      frozen circle function_instruction: |
        Use o novo bloco "crie um círculo" para
        criar 10 círculos sobrepostos. Não se esqueça de avançar entre os círculos.
      frozen circle_instruction: |
        Um círculo é uma forma especial. Você pode descobrir
        que número usar para substituir os pontos de interrogação para desenhar um círculo?
      frozen cross rotate dense_instruction: |
        Vamos repetir isso 90 vezes! Quantas
        vezes 90 cabe em 360? Dica: é um número realmente pequeno.
      frozen cross rotate_instruction: |
        Agora, tente repetir isso 10 vezes. Quantos graus
        você precisa virar entre cada reta?
      frozen cross_instruction: |
        Use o bloco "repita" para criar um sinal de adição. Você
        percebeu que Elsa pode se mover para a frente e para trás?
      frozen diamond mini snowflake_instruction: |
        Você sabia que cada floco de neve tem
        uma forma diferente? Vamos criar um novo floco de neve usando o bloco "repita"
        para repetir um paralelogramo 4 vezes, virando 90 graus à direita entre cada
        paralelogramo.
      frozen diamond snowflake_instruction: |
        Agora, vamos criar um novo floco de neve
        usando o bloco repita para repetir um paralelogramo 10 vezes, virando 36 graus
        à direita entre cada um.
      frozen diamond_instruction: Use uma repetição em torno desses blocos para criar
        um paralelogramo. É como um retângulo mas tem ângulos diferentes. Este tem
        ângulos de 60 graus e 120 graus em vez de todos os ângulos de 90 graus.
      frozen freeplay_instruction: |
        Você se tornou oficialmente um artista mestre! Crie
        um país das maravilhas de gelo.
      frozen line_instruction: Olá! Chamo-me Elsa Arendelle. Podes ajudar-me a criar
        uma reta?
      frozen perpendicular_instruction: |
        Agora, vamos ver se podemos criar duas retas
        que formam um ângulo de 90 graus entre si. Você vai precisar usar o bloco "vire"
        e também o bloco "mova".
      frozen snowflake branch_instruction: |
        Tente usar o bloco "crie um floco de neve do tipo ramificado”
        para criar três ramificações, o que começa a parecer um floco de neve.
      frozen snowflake full_instruction: |
        Agora, vamos repetir isso 8 vezes para fazer um
        belo floco de neve!
      frozen snowflower_instruction: |
        Padrões de neve complexos podem ser criados com
        formas muito simples. Você pode criar um padrão repetindo 5 círculos de tamanho
        5 e 5 círculos de tamanho 10?
      frozen square iterative_instruction: |
        Parece que estamos na metade do caminho para fazer
        um quadrado. Vamos juntar 4 retas para criar um quadrado.
      frozen square loop 3x_instruction: |
        Vamos criar três quadrados, virando depois
        de cada quadrado. Lembre-se de virar 120 graus antes de cada novo quadrado.
      frozen square loop_instruction: |
        Oi, eu sou Anna de Arendelle! Vamos fazer um quadrado
        com o bloco "repita", que usa menos blocos. Quantas vezes (???) o bloco
        "repita" deve repetir os blocos dentro dele para fazer um quadrado?
      frozen square snowflake_instruction: |
        Você consegue criar um floco de neve usando o bloco
        "repita" para criar um quadrado 10 vezes e o bloco "vire" para virar 36
        graus entre cada quadrado?
      Geometric Pattern_instruction: |
        Project Idea: Create a pattern using geometric
        ideas like shapes. This requires persistence and planning!
      'Grade 4 Example PlayLab Project #1_instruction': |
        Take a look at this project.  Do
        you see how it was made?
      'Grade 4 Example PlayLab Project #2_instruction': |
        Take a look at this project.  Do
        you see how it was made?
      grade1_adventurer_loops1_instruction: Four piles of gold!  Collect all four.
      grade1_adventurer_loops10_instruction: |
        Help me get all of the gold from this
        cave.
      grade1_adventurer_loops2_instruction: |
        How can Laurel collect all five piles
        of gold using only one `move forward` block?
      grade1_adventurer_loops3_instruction: |
        Can you fix Laurel's path to get all
        of this gold?
      grade1_adventurer_loops4_instruction: "Add to the code from the last puzzle\nto
        get all of the gold. \n"
      grade1_adventurer_loops5_instruction: |
        What should you add to this code to
        get all of the gold?
      grade1_adventurer_loops6_instruction: Write the code to get all of this gold.
      grade1_adventurer_loops7_challenge_instruction: |
        Challenge: The gold goes all
        the way down these stairs!  Write the code to help me get it all.
      grade1_adventurer_loops8_challenge_instruction: |
        Challenge: Try this staircase
        now! It has an extra spike at the end you'll have to climb.
      grade1_adventurer_loops9_instruction: |
        Help me get the gold from this deep
        valley.
      grade1_adventurer_loopsFP_instruction: |
        Eureka!  Collect as much gold as you
        can!
      grade1_adventurer_loopsPre_instruction: |
        This is Laurel the Adventurer!  Can
        you move her around and get gold?
      grade1_artist_loops1_instruction: |
        The Artist is trying to draw a line six
        times, but can't get it right.  Can you help?
      grade1_artist_loops2_instruction: |
        Help the artist draw a line 7 times to make
        a garden wall.
      grade1_artist_loops3_instruction: "Now we need to get the soil ready to plant.\nFind
        the bug and help the artist prepare the ground. \n"
      grade1_artist_loops4_instruction: |
        Time to fix the stairs!  Repeat this pattern
        five times so the artist can reach the top of the bushes.
      grade1_artist_loops5_instruction: |
        Behind the bushes there is a beautiful vine
        full of flowers.  Can you climb the vine and see where it goes?
      grade1_artist_loops6_instruction: |
        **Challenge:**  It's a hidden garden! Let's
        walk around.
      grade1_artist_loops7_instruction: |
        The flowers down here are so pretty.  Let's
        take a closer look.
      grade1_artist_loops7a_instruction: |
        **Challenge:**  Lovely! Let's take a walk
        around the garden.
      grade1_artist_loops7b_instruction: |
        Time to head home. Can you fix this ladder
        to help the artist get down?
      grade1_artist_loops8_instruction: |
        Let's take the short way over the pond.
        Can you help the artist stay on the stones?
      grade1_artist_loops9_instruction: I still need a story for this puzzle
      grade1_artist_loopsFP_instruction: |
        Use what you have learned to draw a picture
        of what you think the artist saw when he got home.
      grade1_maze_sequence1_instruction: Altere o código para me levar até o porco!
      grade1_maze_sequence10_instruction: Move me around the TNT to get to the pig.
      grade1_maze_sequence2_instruction: Altere o código para me levar até o porco!
      grade1_maze_sequence3_instruction: |
        Can you add 2 blocks to get the bird to
        the pig.
      grade1_maze_sequence4_instruction: Now try this puzzle from the start!
      grade1_maze_sequence5_instruction: |
        Move one way, then another to get me to
        the pig!
      grade1_maze_sequence6_instruction: |
        Figure out what is missing and then add
        blocks to get me to the pig!
      grade1_maze_sequence7_instruction: |
        Your turn!  What do you need to do to get
        the bird to the pig?
      grade1_maze_sequence8_instruction: |
        Debug this level by adding blocks to get
        me to the pig!
      grade1_maze_sequence9_instruction: |
        Go around the TNT to get me to the pig!
      grade1_maze_sequenceA_instruction: |
        Challenge: Move me around the TNT to get
        to the pig.
      grade1_maze_sequenceB_instruction: Fix the bugs to get the bird to the pig.
      grade1_maze_sequenceC_instruction: It's all you!  Get the bird to the pig.
      grade1_maze_sequenceD_instruction: 'It''s a pig party!  Get those pigs! '
      grade1_playlab_events1_instruction: |
        This game is called "Play Lab".  See
        if you can figure out what each block does.
      grade1_playlab_events1a_instruction: |
        Make your robot say "Hello!" when the
        button is clicked.
      grade1_playlab_events2_instruction: |
        This program makes Robin fly.  Can you
        get her to vanish when you click her?
      grade1_playlab_events2a_instruction: |
        Edit the code so that when the second
        bird is clicked, your program plays a sound!
      grade1_playlab_events3_instruction: "This program makes Robin fly.  Can you\nmake
        the robot jump when you press the up button?\r\n"
      grade1_playlab_events3a_instruction: |
        When the third bird is clicked, the background
        should change to a city. Can you add code to make this happen?
      grade1_playlab_events4_instruction: |
        Add a block to make Robin vanish when
        she collides with the robot.
      grade1_playlab_events4a_instruction: |
        Add code to make something happen when
        the fourth bird is clicked. Be creative!
      grade1_playlab_events5_instruction: |
        Add a block to the 'when run' event
        that starts the dragon flying.
      grade1_playlab_events5a_instruction: |
        About My Robot Project! Write code so
        that clicking on each bird shows a new fact about your robot.
      grade1_playlab_events6_instruction: |
        Add a block to the 'when actor 1 clicked'
        event that makes the dragon return to the middle of the screen.
      grade1_playlab_events7_instruction: |
        Add a block so that when you push the
        left arrow button, the knight surges toward the dragon.
      grade1_playlab_events8_instruction: |
        Add a block so that when the knight collides
        with the dragon, it plays a sound.
      grade1_playlab_events9 RYAN COPY_instruction: |
        Now, have Robin wait a second,
        then come back after she vanishes.
      grade1_playlab_events9_instruction: |
        Now, add a block to keep score each time
        the knight hits the dragon.
      grade1_playlab_eventsFP_instruction: |
        Use your imagination. What can you do
        to make this game more fun?
      grade1_sequence_pre_instruction: |
        Play with these blocks to see what they make
        the bird do!
      grade1_video_frustrationRainbow_instruction: |
        This video describes the rainbow
        of frustration and introduces persistence.
      grade2_CaringForNewPet_0_instruction: |
        Can you help me catch the naughty pig?
        Add a move forward block to this code, then press "Run".
      grade2_CaringForNewPet_1_instruction: "Can you help me catch the naughty pig?\nStack
        a couple of `move forward` blocks below the `when run` block and press\n\"Run\".
        \n"
      grade2_CaringForNewPet_10_instruction: Leve-me até o porco!
      grade2_CaringForNewPet_11_instruction: |
        Keep calm and help me find the bad
        pig. Otherwise I might get angry!
      grade2_CaringForNewPet_2_instruction: |
        This pig is ruffling my feathers. Help
        me get to him!
      grade2_CaringForNewPet_3_instruction: |
        Trace the path and lead me to the silly
        pig. Avoid TNT or feathers will fly!
      grade2_CaringForNewPet_3D_instruction: Fix this code to get me to the pig!
      grade2_CaringForNewPet_4_instruction: |
        Keep calm and help me find the bad pig.
        Otherwise I might get angry!
      grade2_CaringForNewPet_5_instruction: Leve-me até o porco!
      grade2_CaringForNewPet_6_instruction: |
        Challenge: Guide me to the green evilness!
        (Watch out for TNT)
      grade2_CaringForNewPet_7D_instruction: |
        This code has a lot of bugs, you'll
        need to both remove and add blocks to get me to the pig.
      grade2_collector_10_instruction: |
        You're almost done! Collect all of the coins
        to finish the stage!
      grade2_collector_2_instruction: |
        I love to chase the ball, but what should
        I do when I get to it?
      grade2_collector_3_instruction: |
        Sequence matters! The blocks you need are
        already in the workspace, but not connected.  Order these blocks to solve
        the puzzle.
      grade2_collector_4_instruction: |
        Sequence matters! The blocks you need are
        already in the workspace, but not connected.  Order these blocks to solve
        the puzzle.
      grade2_collector_5_instruction: |
        These blocks are in the wrong order! Help
        me collect each coin by putting the commands in the right order.
      grade2_collector_6_instruction: |
        These blocks are in the wrong order! Help
        me collect each coin by putting the commands in the right order.
      grade2_collector_7_instruction: |
        Challenge puzzle! What is going on here? Even
        if we put these in the right order, there will still be some missing.
      grade2_collector_8_instruction: |
        Keep up the good work! Help me collect all
        of the coins.
      grade2_collector_9_instruction: Let's get the coins!
      grade2_collector_pre1_instruction: |
        Ruff! Can you help me collect some tennis
        balls?
      grade2_MakeDogTag_1_instruction: |
        Drag blocks onto the screen to have the artist
        draw over the grey lines in the picture. (Each line is 100 pixels long)
      grade2_MakeDogTag_10_instruction: Desenha algo divertido.
      grade2_MakeDogTag_2_instruction: "This spaceship needs a window!\r\n\r\nEach\nside
        is 100 pixels and all of the angles are 90 degrees."
      grade2_MakeDogTag_3_instruction: Ajude-me a completar a casa para o gato.
      grade2_MakeDogTag_4_instruction: 'Essa casa precisa de um telhado! Desenhe o
        triângulo. Dica: todos os 3 lados têm o mesmo comprimento.'
      grade2_MakeDogTag_5_instruction: "\"Now a tag for Belle!\"\r\n\r\nDraw this\ndiamond
        with 200 pixel sides."
      grade2_MakeDogTag_6_instruction: Atividade livre! Desenhe o que você quiser.
      grade2_MakeDogTag_7_instruction: "One more tag.  This is a triangle for Pi.\r\n(Each\nside
        is 150 pixels)"
      grade2_MakeDogTag_8_instruction: |
        Agora vamos conectar um monte de V's,
        desenhando-os em um laço.
      grade2_MakeDogTag_9_instruction: |
        Rebuild the code from the last puzzle, but
        this time, add a left turn of 30 degrees inside the loop. Now, repeat it 24
        times instead of 8.
      grade2_MakeDogTag_BFP_instruction: "\"Hi, I'm an artist. You can write code\nto
        make me draw almost anything.\"\r\n\r\nPlay with the blocks in the toolbox\nto
        see what they do!"
      grade2_MakeDogTag_FP_instruction: |
        Freeplay: What shape will you make the tag
        for your pet?
      grade2_maze_debuggingFP_instruction: |
        Now, help me sneak up on the pig any
        way you want to!
      grade2_maze_debuggingPre_instruction: |
        Play with these blocks to see what they
        make the bird do!
      grade2_maze_intro10_instruction: Solve this puzzle.
      grade2_maze_intro2_instruction: |
        Welcome to Code Studio! Here you will learn
        to use blocks to build programs. Press `Run` to run a program now!
      grade2_maze_intro3_instruction: |
        The `workspace` is where you will create all
        of your programs. Can you guess what this program does? Press the “Run” button
        to find out.
      grade2_maze_intro4_instruction: |
        Drag a block from the toolbox into the workspace.
        Connect it to the other blocks.
      grade2_maze_intro6_instruction: "That’s it!  Now we’re ready to try to solve\na
        few puzzles. \n"
      grade2_maze_intro7_instruction: This time, try something a bit more challenging.
      grade2_maze_intro8_instruction: |
        This is a challenge puzzle.  It is meant to
        be hard and will probably take you a couple of tries to solve.  If you don’t
        solve it after several tries, don’t worry!  It will be in the Play Zone at
        the end of the stage and you can try it again when you’ve had more practice.
      grade2_maze_intro9_instruction: Solve this puzzle.
      grade2_playlab_project_1_instruction: |
        Now, write a program to make Waddles
        move around using the up / down / left /right keys to hit all of the targets!
      grade2_playlab_project_2_instruction: |
        The `repeat forever` block allows you
        to run code over and over forever. Can you attach blocks to move Chomp the
        Dino (actor 2) up and down forever?
      grade2_playlab_project_3_instruction: "Can you have Waddles (actor 1) say \"Ouch!\"\nand
        play a \"hit\" sound if he runs into Chomp? \r\n\r\nWhen you're done,\nplay
        the game to make that happen."
      grade2_playlab_project_4_instruction: "Can you add a block to score a point\nwhen
        Waddles runs into Octavia (actor 3)? \r\nPlay the game and move Waddles\nwith
        the arrows until you score!"
      grade2_playlab_project_5_instruction: "Add blocks to the `when run` event to\nchange
        the background and the speed of Waddles.\r\n\r\nPlay the game and move\nWaddles
        with the arrows until you score."
      grade2_playlab_project_6_instruction: |
        Create your own story. When you're
        done, click Finish to let friends try your story on their phones.
      grade2_puppy_loops2_instruction: |
        Can you get to the pig by creating a loop
        that uses only one `move forward` block inside of a `repeat`?
      grade2_puppy_loops3_instruction: |
        Get me to the pig! Solve this puzzle by creating
        a loop!
      grade2_puppy_loops4_instruction: |
        In this puzzle, two `repeat` loops will help
        you get to the pig with the fewest number of blocks!
      grade2_puppy_loops5_instruction: Leve-me até o porco.
      grade2_puppy_loops6_instruction: |
        Loops even work with more than one block
        inside!  Can you loop this sequence to get me to the pig?
      grade2_puppy_loops7_instruction: Use what you learned to get me to the pig!
      grade2_PuppyLoops_1_instruction: |
        Can you get me to the pig using 5 of the
        same kind of blocks?
      grade2_PuppyLoops_10_instruction: |
        Meu cata-vento não está pronto. Quantas
        vezes eu preciso repetir para terminá-lo?
      grade2_PuppyLoops_2_instruction: |
        Can you get to the pig by creating a loop
        that uses only one `move forward` block inside of a `repeat`?
      grade2_PuppyLoops_3_instruction: |
        Get me to the pig! Solve this puzzle by creating
        a loop!
      grade2_PuppyLoops_4_instruction: |
        In this puzzle, two `repeat` loops will help
        you get to the pig with the fewest number of blocks!
      grade2_PuppyLoops_5_instruction: Leve-me até o porco.
      grade2_PuppyLoops_6_instruction: |
        Loops even work with more than one block
        inside!  Can you loop this sequence to get me to the pig?
      grade2_PuppyLoops_7_instruction: Leve-me até o girassol!
      grade2_PuppyLoops_8_instruction: 'O código para os três bigodes que você vê
        está errado. Dica: cada bigode tem o comprimento de 75 pixels. Corrija esse
        código para desenhar os bigodes.'
      grade2_PuppyLoops_9_instruction: "Parece que o C no código está desenhado ao
        contrário.\r\n\r\nConsegues voltar a transformá-lo num C?"
      grade3_AboutMyRobot_1_instruction: |
        Make your robot say "Hello!" when the
        button is clicked.
      grade3_AboutMyRobot_2_instruction: |
        Edit the code so that when the second bird
        is clicked, your program plays a sound!
      grade3_AboutMyRobot_3_instruction: |
        When the third bird is clicked, the background
        should change to a city. Can you add code to make this happen?
      grade3_AboutMyRobot_4_instruction: |
        Add code to make something happen when
        the fourth bird is clicked. Be creative!
      grade3_AboutMyRobot_5_instruction: |
        About My Robot Project! Write code so that
        clicking on each bird shows a new fact about your robot.
      grade3_AboutMyRobot_TeacherIDo_instruction: |
        Run this puzzle and click on the
        robot to see what happens!
      grade3_bee_conditionals_new1a_instruction: |
        Help the bee collect all of the
        nectar. You can only collect nectar from flowers, but you can check any space
        to see if there is a flower.
      grade3_bee_conditionals_new1b_instruction: |
        Help the bee collect all of the
        nectar. You can only collect nectar from flowers, but you can check any space
        to see if there is a flower.
      grade3_bee_conditionals_new2_instruction: |
        Can you help the bee collect the
        nectar from the flowers? You can only collect nectar from flowers, but you
        can check any space to see if there is a flower.
      grade3_bee_conditionals_new2a_instruction: "Now we know that every flower has\nexactly
        one nectar. Use the blocks provided to check each space and only get\nnectar
        when there's a flower. \n"
      grade3_bee_conditionals_new2b_instruction: |
        Collect all of the nectar. You
        can only collect nectar from flowers, but you can check any space to see if
        there is a flower.
      grade3_bee_conditionals_new3a_instruction: |
        Collect all of the nectar or make
        all the honey. You can only collect nectar from flowers and make honey from
        honeycombs. Check any space to see if there is a flower or honeycomb.
      grade3_bee_conditionals_new3b_instruction: |
        Uh oh! The bee is not sure if he
        should collect nectar or make honey. Can you help him out?
      grade3_bee_conditionals_new3c_instruction: |
        Help the bee collect all of the
        nectar and make all of the honey! Hint: Try using one loop inside of another
        loop.
      grade3_bee_Conditionals_new4_instruction: |
        Now try checking all of these flowers
        with "if" blocks to see if there is any nectar available.
      grade3_bee_conditionals_quantum1_instruction: |
        This cloud is blocking my view!
        Check to see if there's a flower under the cloud, and only get nectar if
        there's a flower. Be careful, it can change!
      grade3_bee_conditionals_quantum2_instruction: |
        Agora a abelha só quer néctar. Lembre-se,
        nem todos os objetos são flores, então faça a verificação para coletar néctar apenas das flores.
      grade3_bee_conditionals_quantum3_instruction: |
        Now I just want to make honey.
        Some of these clouds might have honeycombs under them. The way we've been
        going about things won't work here. Be sure to check if a honeycomb is hiding
        behind each cloud!
      grade3_bee_conditionals_quantum4_instruction: |
        Sometimes this cloud covers
        a flower, and sometimes it covers a honeycomb! Use the if/else block to collect
        nectar if it is a flower, else to make honey (because it is a honeycomb).
      grade3_bee_conditionals_quantum5_instruction: "There will be either a flower\nor
        a honeycomb under each of those clouds!\r\n\r\nUse the `if/else` block\nto
        collect nectar if there is a flower.\r\nOtherwise, make honey (because\nthere
        is a honeycomb)."
      grade3_Conditionals_1 BAD_instruction: Use um laço para coletar todo o néctar.
      grade3_Conditionals_1_instruction: |
        Olá, eu sou uma abelha! Ajude-me a coletar todo
        o néctar das flores. Use um laço.
      grade3_Conditionals_10 BAD_instruction: |
        Colete o néctar das fileiras de flores!
        Use um laço aninhado.
      grade3_Conditionals_10_instruction: |
        Colete néctar e produza mel. Dica:
        o que acontece se você usar a condição "se houver néctar" em uma flor vermelha? Você pode
        completar isso com um laço?
      grade3_Conditionals_11 BAD_instruction: |
        Avaliação - use um laço enquanto para coletar
        todo o néctar dessa flor.
      grade3_Conditionals_11_instruction: |
        Colete néctar e produza mel. Tenha cuidado
        para não coletar néctar de uma flor roxa se ela não tiver néctar.
      grade3_Conditionals_12_instruction: Colete néctar das quatro flores.
      grade3_Conditionals_13_instruction: |
        Assessment: Collect all of the nectar.
        Be careful not to try to collect nectar from a purple flower if it doesn't
        have any.
      grade3_Conditionals_2_instruction: |
        Ajude-me a coletar todo o néctar das
        flores e a produzir mel. Use um laço.
      grade3_Conditionals_3_instruction: "Be careful not to collect nectar from a\npurple
        flower if it doesn't have any. \r\nYou must first check if the nectar\nis
        equal to 1 using the `if nectar` block."
      grade3_Conditionals_4_instruction: |
        Verifique essa flor com um bloco "se"
        para ver se há algum néctar disponível.
      grade3_Conditionals_5_instruction: |
        Colete o néctar de cada flor que
        tiver néctar disponível.
      grade3_Conditionals_6_instruction: |
        Este campo tem flores vermelhas e roxas.
        As flores vermelhas têm uma quantidade de néctar conhecida, mas o néctar das flores roxas é desconhecido.
        Colete todo o néctar.
      grade3_Conditionals_7_instruction: Colete todo o néctar de cada flor.
      grade3_Conditionals_8_instruction: Colete néctar onde as flores têm néctar.
      grade3_Conditionals_9_instruction: |
        Help me find all of the nectar using as
        few blocks as possible!
      grade3_Conditionals_TeacherIDo_instruction: |
        Check this flower with an "if"
        block to see if there is any nectar available.
      grade3_ConditionalsElse_1_instruction: |
        A abelha não sabe se isso é uma flor ou
        uma colmeia. Colete néctar apenas das flores, mas primeiro verifique se o objeto é
        uma flor ou uma colmeia.
      grade3_ConditionalsElse_2_instruction: |
        Agora a abelha só quer néctar. Lembre-se,
        nem todos os objetos são flores, então faça a verificação para coletar néctar apenas das flores.
      grade3_ConditionalsElse_3_instruction: |
        Now I just want to make honey. Some
        of these clouds might have honeycombs under them. Be sure to check each cloud!
      grade3_ConditionalsElse_4_instruction: |
        O objeto desconhecido pode ser uma flor
        ou uma colmeia. Use o bloco se/senão para coletar néctar se ele for uma flor,
        senão para produzir mel (porque ele é, então, uma colmeia).
      grade3_ConditionalsElse_5_instruction: "There will be either a flower or a\nhoneycomb
        under each of those clouds!\r\n\r\nUse the `if/else` block to collect\nnectar
        if there is a flower.\r\nOtherwise, make honey (because there is a\nhoneycomb)."
      grade3_ConditionalsElse_6_instruction: "I am not sure how much nectar this\nflower
        has, but I know it has either 1, 2, or 3 nectar. \r\n\r\nCombine the\nconditional
        blocks (`if` and/or `if/else`) to only get as much nectar as the\nflower has.
        \r\n\r\nRemember, the amount of nectar can change each time you\nrun the puzzle!"
      grade3_ConditionalsElse_7_instruction: |
        Lembre-se de que as flores roxas podem ter
        1, 2 ou 3 néctares. Complete a função "verifique a flor roxa" e use-a
        para coletar todo o néctar das flores.
      grade3_ConditionalsElse_8_instruction: "Write the function for `check flower\nmake
        honey`. \r\n\r\nYour function should check if the purple flower has 3,\n2,
        or 1 nectar and get all of the nectar. \r\nThen, move forward and make\nhoney."
      grade3_ConditionalsElse_9_instruction: "**Assessment:** This cloud is either\nhiding
        a flower with one nectar or a honeycomb that needs one honey.  \r\n\r\nComplete\nthe
        `get nectar or make honey` function, then call it to collect the nectar\nor
        honey. \r\n"
      grade3_ConditionalsElse_TeacherIDo_instruction: "There will be either a flower\nor
        a honeycomb under each of those clouds!\r\n\r\nUse the `if/else` block\nto
        collect nectar if there is a flower.\r\nOtherwise, make honey (because\nthere
        is a honeycomb)."
      grade3_Debugging_1_instruction: |
        Esses blocos estão me incomodando. Conserte o(s)
        erro(s) para coletar todo o néctar e produzir todo o mel.
      grade3_Debugging_10_instruction: "This puzzle is making me loopy! \r\nFix the\nerror(s)
        to collect all of the nectar and make all of the honey."
      grade3_Debugging_11_instruction: "Assessment:  Now it's time to show what\nyou
        know!\r\n\r\nFix the error(s) to collect all of the nectar and make all\nof
        the honey."
      grade3_Debugging_2_instruction: |
        Esses blocos estão me incomodando. Conserte o(s)
        erro(s) para coletar todo o néctar e produzir todo o mel.
      grade3_Debugging_3_instruction: |
        Esses blocos estão me incomodando. Conserte o(s)
        erro(s) para coletar todo o néctar e produzir todo o mel.
      grade3_Debugging_4_instruction: |
        Esses blocos estão me incomodando. Conserte o(s)
        erro(s) para coletar todo o néctar e produzir todo o mel.
      grade3_Debugging_5_instruction: "That flower looks tasty! \r\n\r\nFix the error(s)\nto
        collect all of the nectar.  You can now use both run and step."
      grade3_Debugging_6_instruction: |
        Esses blocos estão me incomodando. Conserte o(s)
        erro(s) para coletar todo o néctar e produzir todo o mel.
      grade3_Debugging_7_instruction: |
        Esses blocos estão me incomodando. Conserte o(s)
        erro(s) para coletar todo o néctar e produzir todo o mel.
      grade3_Debugging_8_instruction: |
        Esses blocos estão me incomodando. Conserte o(s)
        erro(s) para coletar todo o néctar e produzir todo o mel.
      grade3_Debugging_9_instruction: |
        Esses blocos estão me incomodando. Conserte o(s)
        erro(s) para coletar todo o néctar e produzir todo o mel.
      grade3_Debugging_TeacherIDo_instruction: |
        These blocks are really bugging me.
        Fix the error(s) to collect all of the nectar and make all of the honey.
      grade3_Loops_1_instruction: "Can you help me collect the nectar from these\nflowers?
        \n"
      grade3_Loops_10_instruction: |
        Use um laço parecido com o do último desafio, mas realize
        uma ação de virar dentro dele.
      grade3_Loops_11_instruction: |
        Use um laço para descer as escadas e coletar o
        néctar.
      grade3_Loops_12_instruction: |
        Use um laço para coletar o néctar de cada flor
        e produzir mel em cada colmeia.
      grade3_Loops_2_instruction: |
        Você consegue realizar a mesma tarefa mais facilmente
        com um laço?
      grade3_Loops_3_instruction: Você consegue usar um laço para coletar todo o néctar?
      grade3_Loops_4_instruction: |
        Now use the `repeat` block to collect all of the
        nectar and make all of the honey.
      grade3_Loops_5_instruction: |
        Coloque esses blocos em um laço para coletar o néctar
        de cada flor.
      grade3_Loops_6_instruction: O que acontece se você repetir esta sequência 3
        vezes? Não se esqueça de fazer o mel no final!
      grade3_Loops_7_instruction: |
        Cada flor contém uma unidade de néctar. Colete
        o néctar de cada uma das flores.
      grade3_Loops_8_instruction: |
        Use um laço para coletar o néctar e produzir o
        mel.
      grade3_Loops_9_instruction: |
        Colete o néctar de cada flor e produza mel
        em cada colmeia.
      grade3_Loops_TeacherIDo_instruction: "Those flowers look tasty!\r\n\r\nCollect\nnectar
        from each of the flowers using the fewest blocks possible."
      grade3_maze_Loop1_instruction: "Assessment:  Get me to the sunflower using\nonly
        5 blocks! \n"
      grade3_maze_loops1_instruction: "Assessment:  Get me to the sunflower using\nonly
        5 blocks! \n"
      grade3_maze_loops2_instruction: Leve-me até o girassol!
      grade3_maze_loops3_instruction: Leve-me até o girassol!
      grade3_maze_loops4_instruction: Leve-me até o girassol!
      grade3_maze_loops5_instruction: Leve-me até o girassol!
      grade3_maze_nestedLoops1_instruction: |
        Can you get me to the pig using 5 of
        the same kind of blocks?
      grade3_maze_nestedLoops2_instruction: |
        Can you get to the pig by creating a
        loop that uses only one `move forward` block inside of a `repeat`?
      grade3_maze_nestedLoops3_instruction: |
        Get me to the pig! You can only use
        one move forward block this time
      grade3_maze_nestedLoops4_instruction: |
        In this puzzle, two `repeat` loops will
        help you get to the pig with the fewest number of blocks!
      grade3_playLab_buildGame_1_instruction: |
        There is a new block in this lesson,
        the `random integer` block. It is used to choose a random number. Write a
        program where the robot says a random number between 1 and 100!
      grade3_playLab_buildGame_2_instruction: |
        We have already created a random integer,
        "j", which is either 1 or 0. Now, we need to use it to decide whether our
        card is red or black. Add a second if statement to the code under `when run`
        to complete this code.
      grade3_playLab_buildGame_3_instruction: |
        There are 13 different card values
        in a deck of cards, so we'll need to have 13 options. Under the empty `when
        run` block, add a line that sets the placeholder "i" to a random integer
        between 1 and 13.
      grade3_playLab_buildGame_4_instruction: |
        In a deck of cards, a card with value
        1 isn't actually called a "1", there's a special name. Write an if statement
        that checks if the random number is a 1, then tell the computer that the value
        of that card is "Ace".
      grade3_playLab_buildGame_5_instruction: |
        We can just call the cards from 2
        to 10 by their numbers, so add an if statement that checks whether the number
        generated is within those numbers, then sets the card value to the number
        generated.
      grade3_playLab_buildGame_6_instruction: |
        There are three more cards with special
        names in the deck. Add to your code so that a card number 11 is called a "Jack",
        a 12 is a "Queen" and a 13 is a "King"
      grade3_playLab_buildGame_7_instruction: |
        You already know what color your card
        is, but what suit is it? Add code to the conditional statement "if card is
        Red" to choose hearts or diamonds.
      grade3_playLab_buildGame_8_instruction: |
        Add the second part of the code to
        choose a suit, copying what you made for a Red card.
      grade3_playLab_buildGame_final_instruction: |
        Final stage for playlab conditionals
        level (could hide entire function so that students just work with point scoring)
      grade3_playLab_buildGame_final2_instruction: |
        Here's all of your code to choose
        a card - try adding some other fun features!
      grade3_robotFarmer_ConditionalsIntro_1_instruction: |
        Hi, I'm a farmer. I need
        your help to flatten the field on my farm so it's ready for planting. Move
        me to the pile of dirt and use the "remove" block to remove it.
      grade3_robotFarmer_ConditionalsIntro_10_instruction: |
        I'm working late, so
        it's dark out, and I can't tell how large the piles are. Now I don't have
        all the options I used to have on the while block. Move me along the field,
        and if there is a pile, remove it
      grade3_robotFarmer_ConditionalsIntro_11_instruction: |
        It's still dark outside.
        Move me along the field. If there is a pile, remove it, and if there is a
        hole, fill it in. Hint: use the dropdown menu of options on the "if" block.
      grade3_robotFarmer_ConditionalsIntro_2_instruction: |
        Next, move me to the hole
        and fill it with TWO shovelfuls of dirt, using the "fill" block.
      grade3_robotFarmer_ConditionalsIntro_3_instruction: |
        Move me to the pile of
        dirt and tell me how many shovelfuls to remove using as few blocks as possible.
      grade3_robotFarmer_ConditionalsIntro_4_instruction: |
        Can you help me remove
        all four piles of dirt? Hint: use a repeat block if you can.
      grade3_robotFarmer_ConditionalsIntro_5_instruction: |
        Help me fill in all these
        holes with 5 shovelfuls of dirt. Hint: you can put a "repeat" block inside
        the "while" block.
      grade3_robotFarmer_ConditionalsIntro_6_instruction: |
        Remove all the piles of
        dirt, using as few blocks as possible. The new options in the dropdown menu
        on the "while" block tell me if I'm standing on a pile or a hole.
      grade3_robotFarmer_ConditionalsIntro_7_instruction: |
        Wow, I found a really
        deep hole! I don't know how many shovelfuls of dirt it needs. Can you write
        a program that fills it until the ground is even?
      grade3_robotFarmer_ConditionalsIntro_8_instruction: |
        Help me fill in the hole
        at the end of the field, using as few blocks as possible.
      grade3_robotFarmer_ConditionalsIntro_9_instruction: |
        Make me remove all these
        piles of dirt. Try to use as few blocks as possible. Hint: try using a "while"
        block.
      grade3_robotFarmer_ConditionalsIntro_TeacherIDo1_instruction: |
        Help me fill
        in all these holes with 5 shovelfuls of dirt. Hint: you can put a "repeat"
        block inside the "while" block.
      grade3_robotFarmer_ConditionalsIntro_TeacherIDo2_instruction: |
        I'm working
        late, so it's dark out, and I can't tell how large the piles are. Now I
        don't have all the options I used to have on the while block. Move me along
        the field, and if there is a pile, remove it
      grade3_RunningFarm_1_instruction: "(Notes for Review) Since the last stage\ntaught
        the 'repeat until' block, the purpose of this is most likely to teach\nthe
        'repeat while' block. In the context of the levels already created,\nI think
        using the 'repeat' and 'if' blocks could be possible,  (ex. if\nthe crops
        weren't spread as evenly on the field so the farmer would have\nto test for
        wheat present before collecting it). A Repeat While block would\nbe more applicable
        if there were multiple wheat/potatoes in each square, which\nmight be a possible
        change.\r\n\r\nGrant Notes: for the coins, 1=0 and 2=1\n(I couldn't get the
        coins to show up with a value of 0). The wheat should\ngrow at random intervals.
        For the graphic, think about the Minecraft way of\ngrowing wheat (green, has
        multiple heights showing growth, then yellow for\nripe)."
      grade3_RunningFarm_10_instruction: |
        This is another debugging to make sure
        the students understand the difference between the IF block and While loop.
        Start off all crops as ripe with at least 1 item, with growth after Run.
      grade3_RunningFarm_2_instruction: "NOTES: have wheat and potatoes interspersed\nthroughout
        the row. Potatoes should be fully grown, with some randomly showing\nmore
        than 1 potato per spot. This is different from the previous puzzle because\nstudents
        will have to use the drop down menu on the IF block to select potatoes\ninstead
        of harvesting wheat.\r\n\r\n"
      grade3_RunningFarm_3_instruction: |
        This will look essentially the same as the
        previous puzzle. There should be two crops randomly planted in the row. Each
        plant should start at a random growth stage and grow when the user runs their
        algorithm. Students are using the while loop and hopefully understand that
        it's better at picking all the crops of one type.
      grade3_RunningFarm_4_instruction: |
        Since students started this course using
        events, we wanted to include them into this culminating stage. We will only
        use them in a few stages then move on. This puzzle should randomly populate
        the entire column with wheat and potatoes. The puzzle should also start with
        the following event blocks: up arrow, down arrow, and space bar. Attached
        to the space bar should be a collect block.
      grade3_RunningFarm_5_instruction: |
        This puzzle should randomly populate the
        entire row with wheat and potatoes. The puzzle should also start with the
        following event blocks: up arrow, down arrow, and space bar. Can we check
        to make sure students are using while loop?
      grade3_RunningFarm_6_instruction: |
        This puzzle should randomly populate the
        entire field with wheat and potatoes. The puzzle should also start with the
        following event blocks: up arrow, down arrow, left arrow, right arrow, and
        space bar. Can we check to make sure students are using while loop?
      grade3_RunningFarm_7_instruction: |
        Have wheat and potatoes planted randomly
        at various growth stages. I just wanted a quick debugging puzzles in here
        to transition away from events
      grade3_RunningFarm_8_instruction: |
        Have wheat and potatoes planted randomly
        at various growth stages. Now we introduce multiple while loops (stacked)
        nested inside a loop. The two while loops in the solution represent different
        while loops (while there is potato and while there is wheat)
      grade3_RunningFarm_9_instruction: |
        Add Weeds element. Weeds start out in random
        spots in the field and spread more and more rapidly as time goes on.. This
        puzzle is the culminating game-like puzzle. Students should have the event
        blocks (up, down, left, right, spacebar) available in the toolbox to use if
        they want. The entire field should be planted randomly with mostly wheat,
        potatoes, and a few weeds.
      grade3_RunningFarm_TeacherIDo_instruction: |
        Teacher I Do: Show students how
        they can use loops and conditionals to plant and harvest 2 rows of crops.
      grade3_RunningFarm_TeacherIDo2_instruction: |
        Teacher I Do: Show students how
        to use loops to harvest many crops.
      grade4_arist_functions_star0_instruction: |
        Have you drawn something like this
        star before? Practice making it one more time by adding a turn and a repeat
        block.
      grade4_arist_nested_loop_circles1_instruction: |
        Assessment: Use a nested loop
        to complete the design.
      grade4_arist_nested_loop_flags1_instruction: |
        Loop the given code to create
        a windmill.
      grade4_arist_nested_loop_polygons1_instruction: "Loop this design 10 times.\n\r\n\r\nHow
        much do you have to turn each time you loop?"
      grade4_arist_nested_loop_polygons2_instruction: "Loop this shape 6 times. \r\n\r\nHow\nmuch
        do you have to turn each time you loop? "
      grade4_arist_nested_loop_squares1_instruction: |
        Can you draw these 10 squares
        of this sidewalk using a nested loop? Each square is 30 pixels.
      grade4_arist_nested_loop_triangles2_instruction: "Now nest this loop inside\nanother
        loop to draw 10 triangles.  This is called a \"nested\" loop.  \n"
      grade4_arist_nested_loop_triangles3_instruction: |
        Can you draw a hexagon by
        looping the triangle code?
      grade4_arist_nested_loop_triangles4_instruction: |
        Draw the teeth in the alligator's
        mouth!
      grade4_arist_nested_loop_triangles5_instruction: "Create a sun by nesting the\nstarter
        code in another loop.\r\n\r\nTo get this cool design with a hollow\ncenter,
        you'll need to jump forward by the length of the triangle before\nturning."
      grade4_arist_nested_loop_triangles6_instruction: |
        Can you draw these 36 triangles
        using a nested loop?
      grade4_artist_freeplay_instruction: |
        You are on your own now! Try out any of
        the functions you used in this stage or try this new function that will automatically
        give your image a beautiful background color! This creation will be saved
        to your Projects dashboard so that you can easily edit it any time!
      grade4_artist_functions1_instruction: |
        Olá. Mim artista zumbi. Mim ama desenhar!
        Me ajude a desenhar os óculos quadrados. Dica: a haste entre as lentes é
        25 pixels menor que o comprimento do quadrado.
      grade4_artist_functions2_instruction: "Functions let you define new blocks!\n\r\n\r\nWe've
        moved the blocks needed for drawing a square into a function\ncalled `draw
        a square`. This time, use the `draw a square` function to create\nthe glasses.
        \r\n\r\nThe squares are 75 pixels apart."
      grade4_artist_functions_challenge_instruction: |
        Use the suggested functions
        to draw four rows of hexagons. Notice how our even numbered rows are shifted
        to the right?
      grade4_artist_functions_challenge2_instruction: |
        Use the suggested functions
        to draw four rows of hexagons. Notice how our even numbered rows are shifted
        to the right?
      grade4_artist_functions_freeplay_instruction: |
        You are on your own now! Try
        out any of the functions you used in this stage or try this new function that
        will automatically give your image a beautiful background color! This creation
        will be saved to your Projects dashboard so that you can easily edit it any
        time!
      grade4_artist_functions_stars0_instruction: |
        We will come back to functions
        shortly. Let's take a break to practice making this star. You can make this
        drawing by adding a turn and a repeat block.
      grade4_artist_functions_stars1_instruction: |
        Now that you can draw a star,
        try drawing four stars!
      grade4_artist_functions_stars2_instruction: |
        When is drawing three stars harder
        than drawing four? When you also have to jump over the moon!
      grade4_artist_functions_stars3_instruction: |
        That last one is tough if you
        only use loops. Let's try drawing the same picture using this new 'function'
        that will help to **draw a star**.
      grade4_artist_functions_windows0_instruction: |
        You are doing great! Do you
        remember when you used nested loops to draw a pinwheel shape out of triangles?
        Let's try using that same algorithm to make a window!
      grade4_artist_functions_windows1_instruction: |
        If you can draw one window,
        you can draw three! Try using your choice of a nested loop or a function here.
        Don't forget the jump block!
      grade4_artist_functions_windows2_instruction: |
        Can you figure out how to add
        these windows? Watch out for the door!
      grade4_artist_nested_loop_circles1_instruction: |
        Assessment: Use a nested loop
        to complete the design.
      grade4_artist_nested_loop_flags1_instruction: |
        Loop the given code to create
        a windmill.
      grade4_artist_nested_loop_polygons1_instruction: "Loop this design 10 times.\n\r\n\r\nHow
        much do you have to turn each time you loop?"
      grade4_artist_nested_loop_polygons2_instruction: "Hi, I'm the Artist! Let's\ncreate
        some drawings together! For starters, try repeating this shape 6 times.\n\r\n\r\nHow
        much do you have to turn each time you loop? "
      grade4_artist_nested_loop_squares1_instruction: |
        Can you draw these 10 squares
        of this sidewalk using a nested loop? Each square is 30 pixels.
      grade4_artist_nested_loop_triangles1_instruction: |
        Complete the code to draw
        these triangles.  The first one is done for you.  Hint:  3 triangles in a
        360 degree rotation.
      grade4_artist_nested_loop_triangles2_instruction: "Let's make a quick adjustment\nto
        get completely different image!  \r\nHint: ? × 10 = 360"
      grade4_artist_nested_loop_triangles3_instruction: "Can you draw a hexagon by\nlooping
        the triangle code?\r\nHint: 6 × ? = 360"
      grade4_artist_nested_loop_triangles4_instruction: |
        Hi! I'm the Artist. Let's
        try some different types of drawings together. Can you help me draw the bottom
        teeth in the alligator's mouth?
      grade4_artist_nested_loop_triangles5_instruction: "Create a sun by nesting\nthe
        starter code in another loop.\r\n\r\nTo get this cool design with a hollow\ncenter,
        you'll need to jump forward by the length of the triangle before\nturning."
      grade4_artist_nested_loop_triangles6_instruction: |
        Can you draw these 36 triangles
        using a nested loop?
      grade4_artist_nestedLoops_challenge_instruction: "Click here to see the full\ninstructions
        again!\r\n\r\nHere is the code for an interesting shape.  What\nhappens when
        you repeat it multiple times, turning between each iteration?   Notice\nthat
        the turns in this shape add up to 420 degrees, which means that when\nyour
        artist is done drawing, it will be facing a different direction than\nwhen
        you started.  That new direction is exactly 60 degrees to the right of\nwhere
        you began."
      grade4_artist_nestedLoops_challenge2_instruction: |
        Now for a challenge!  Feel
        free to use trial and error. You are not expected to get the image perfect
        the first time.   Want to see more hints?  Click here!
      grade4_artist_parameters_squares1_instruction: |
        Click "edit" to fill in the
        function definition of "draw a square" and add a parameter. It should take
        a length parameter, just like the triangle. This time, draw 3 squares: 25,
        50 and 75 pixels in length, each 100 pixels apart.
      grade4_artist_parameters_triangles1_instruction: |
        Today, we're going to try
        out a different, more powerful function editor. See if you can figure out
        how to edit the function 'draw a triangle' to find the bugs.
      grade4_artist_parameters_triangles2_instruction: |
        Você percebe algo diferente
        sobre esses blocos de função? Clique em "Executar" para ver o que acontece.
      grade4_artist_parameters_triangles2b_instruction: |
        Can you complete this drawing?
        The sides of each triangle are 25 pixels larger than the last.  The first
        triangle has 25 pixel sides.
      grade4_artist_parameters_triangles3_instruction: |
        Can you complete this drawing?
        The sides of each triangle are 25 pixels larger than the last.  The first
        triangle has 25 pixel sides.
      grade4_artist_parameters_triangles4_instruction: |
        The code for this triangle
        function is broken. Can you edit the function to fix it, and then make triangles
        of length 25, 50, and 75?
      grade4_artist_parameters_trianglesx_instruction: |
        Can you complete this drawing?
        The sides of each triangle are 25 pixels larger than the last.  The first
        triangle has 25 pixel sides.
      grade4_bee_conditionals_nested_loops_instruction: |
        Collect all of the nectar.
        You can only collect nectar from flowers, but you can check any space to see
        if there is a flower.
      grade4_bee_conditionals_new1_instruction: |
        Collect all of the nectar. You can
        only collect nectar from flowers, but you can check any space to see if there
        is a flower.
      grade4_bee_conditionals_new1a_instruction: |
        Help the bee make all of the honey.
        You can only make honey at a honey comb, but you can check any space to see
        if there is a honey comb.
      grade4_bee_conditionals_new2_instruction: |
        Can you help the bee collect the
        nectar from the flowers? You can only collect nectar from flowers, but you
        can check any space to see if there is a flower.
      grade4_bee_conditionals_new2a_instruction: |
        Make all of the honey. It's actually
        more efficient to check each space for a honey comb, even when you know some
        are empty.
      grade4_bee_conditionals_new3a_instruction: |
        Collect all of the nectar or make
        all the honey. You can only collect nectar from flowers and make honey from
        honeycombs. Check any space to see if there is a flower or honeycomb.
      grade4_bee_conditionals_new3b_instruction: |
        Uh oh! The bee is not sure if he
        should collect nectar or make honey. Can you help him out?
      grade4_bee_conditionals_new3c_instruction: |
        Help the bee collect all of the
        nectar and make all of the honey! Hint: Try using one loop inside of another
        loop.
      grade4_bee_conditionals_quantum1_instruction: |
        This cloud is blocking my view!
        Check to see if there's a flower under the cloud, and only get nectar if
        there's a flower. Be careful, it can change!
      grade4_bee_conditionals_quantum2_instruction: |
        Agora a abelha só quer néctar. Lembre-se,
        nem todos os objetos são flores, então faça a verificação para coletar néctar apenas das flores.
      grade4_bee_conditionals_quantum3_instruction: |
        Now I just want to make honey.
        Some of these clouds might have honeycombs under them. The way we've been
        going about things won't work here. Be sure to check if a honeycomb is hiding
        behind each cloud!
      grade4_bee_conditionals_quantum4_instruction: |
        Sometimes this cloud covers
        a flower, and sometimes it covers a honeycomb! Use the if/else block to collect
        nectar if it is a flower, else to make honey (because it is a honeycomb).
      grade4_bee_conditionals_quantum5_instruction: "There will be either a flower\nor
        a honeycomb under each of those clouds!\r\n\r\nUse the `if/else` block\nto
        collect nectar if there is a flower.\r\nOtherwise, make honey (because\nthere
        is a honeycomb)."
      grade4_bee_functions_instruction: |
        Have we met before? I'm the farmer! Please
        help me remove this pile of dirt and fill this hole.
      grade4_bee_functions1_instruction: Colete todo o néctar de cada flor.
      grade4_bee_functions10_instruction: |
        Assessment: Use the given function to
        collect nectar from each flower.
      grade4_bee_functions11_instruction: |
        Assessment: Create a function to turn,
        move forward and make 3 honey, then return the bee to where it started and
        turn back.
      grade4_bee_functions2_instruction: |
        Funções são blocos de código que realizam
        uma tarefa. Use a função "obtenha 2 néctares" para coletar o néctar de cada
        flor.
      grade4_bee_functions3_instruction: |
        Funções são blocos de código que realizam
        uma tarefa. Use a função "obtenha 5" para coletar 5 néctares de uma vez. Lembre-se também
        de usar um laço para obter um contador de bloco ideal.
      grade4_bee_functions4_instruction: |
        A função "mova e obtenha néctar" vira
        a abelha, coleta néctar, e então retorna a abelha para onde ela começou. Use
        a função para coletar todo o néctar.
      grade4_bee_functions5_instruction: This puzzle will be deleted!
      grade4_bee_functions6_instruction: |
        Now write the function to collect nectar
        from the three flowers.
      grade4_bee_functions7_instruction: |
        Create a function and call it to collect
        nectar at each flower and make honey at each honeycomb.
      grade4_bee_functions8_instruction: |
        Create your own function that goes down
        a path, gets nectar, makes honey, and then returns the bee to the top of the
        path. Then collect all the nectar and make all the honey!
      grade4_bee_functions9_instruction: "Red flowers can have an unknown amount\nof
        nectar each time you run the puzzle.   \r\n\r\nCreate a function that collects\nall
        of the nectar from each flower."
      grade4_bee_nestedLoops0_instruction: Use um laço para coletar todo o néctar.
      grade4_bee_nestedLoops1_instruction: |
        Colete todo o néctar de cada flor.
        Use um laço aninhado.
      grade4_bee_nestedLoops2_instruction: Can you determine the missing blocks?
      grade4_bee_nestedLoops2a_instruction: |
        Can you create a nested loop to collect
        all of the nectar?
      grade4_bee_nestedLoops3_instruction: |
        Colete todo o néctar criando
        um laço aninhado.
      grade4_bee_nestedLoops4_instruction: |
        Colete todo o néctar de cada flor
        e produza mel em cada colmeia. Use um laço aninhado.
      grade4_bee_nestedLoops5_instruction: "Challenge time!\r\n\r\nCollect all of\nthe
        nectar from each flower and make honey at each honeycomb. \r\n\r\nHint:\nYou
        will need 4 repeat blocks!"
      grade4_bee_nestedLoops_assess_instruction: "**Assessment:** Collect all of\nthe
        nectar and make all of the honey using loops.\r\n\r\nHint: There are several\npossible
        solutions!"
      grade4_designProcess_vid_instruction: |
        Prepare to build a project within some
        given parameters.
      grade4_farmer_functions1_instruction: |
        Have we met before? I'm the farmer!
        Please help me remove this pile and fill this hole.
      grade4_farmer_functions2_instruction: |
        Take the code you just wrote it and
        use it to define a new function. Call the function twice to complete the puzzle.
      grade4_farmer_functions3_instruction: |
        Try using a couple of repeat blocks
        within your function definition.
      grade4_farmer_functions4_instruction: |
        Swap out your repeat loops for more
        versatile while loops.
      grade4_farmer_functions5_instruction: |
        Things are going to start getting trickier,
        but don't give up! You can use the same while loops to check both spaces
        in each pass.
      grade4_farmer_functions6_instruction: |
        The paths are a different length. You
        can use a different type of while loop to keep the pattern going as long as
        you need to.
      grade4_frozen_freeplay_instruction: |
        Você se tornou oficialmente um artista mestre!
        Crie um país das maravilhas de gelo.
      grade4_frozen_functions0_instruction: |
        Can you figure out what number to replace
        the question marks with to draw a circle?
      grade4_frozen_functions1_instruction: |
        Use the new “draw a circle” function
        to create 10 overlapping circles. Don't forget to jump forward between circles.
      grade4_frozen_functions1a_instruction: |
        Use the new “Create a circle” block
        to create 10 overlapping circles. Don't forget to jump forward between circles.
      grade4_frozen_functions2_instruction: |
        Now let's create 20 overlapping circles,
        turning 18 degrees between each circle.
      grade4_frozen_functions3_instruction: |
        Here's a ”Create circle” block that
        can make circles of different sizes. Can you use this to create a small circle
        of size 5 and a larger circle of size 10?
      grade4_frozen_functions4_instruction: |
        Intricate snow patterns can be created
        with very simple shapes. Can you make a pattern by repeating 5 circles of
        size 5 and 5 circles of size 10?
      grade4_frozen_nested_loop_diamonds1_instruction: |
        Let’s use a repeat block
        to create a rhombus. Like a square, all sides are equal length, but the angles
        are different. This one has 60 degree and 120 degree angles instead of all
        90 degree angles.
      grade4_frozen_nested_loop_diamonds2_instruction: |
        Did you know every snowflake
        is a different shape? Let's create a new snowflake by using another “Repeat"
        block to repeat a parallelogram 4 times, turning right by 90 degrees between
        each parallelogram.
      grade4_frozen_nested_loop_diamonds3_instruction: |
        Now, let's create a new
        snowflake by using the repeat block to repeat a parallelogram 10 times, turning
        right by 36 degrees between each one.
      grade4_frozen_nested_loop_rectangle1_instruction: |
        Hi, I’m Anna of Arendelle!
        Let’s use a repeat block to create a rectangle. This one is  200 pixels long
        and 100 pixels tall. All of the corners are 90 degree angles.
      grade4_frozen_square_instruction: |
        Hi, I’m Anna of Arendelle! Let’s make a
        square with the “Repeat” block, which uses fewer blocks. How many times (???)
        should the “Repeat” block loop the blocks inside it to make a square?
      grade4_frozen_square_loop1_instruction: |
        Hi, I’m Anna of Arendelle! Let’s make
        a square with the “Repeat” block, which uses fewer blocks. How many times
        (???) should the “Repeat” block loop the blocks inside it to make a square?
      grade4_frozen_square_loop2_instruction: |
        Let's create three squares, turning
        after each square. Be sure to turn by 120 degrees before each new square.
      grade4_frozen_square_loop3_instruction: |
        Você consegue criar um floco de neve usando o bloco
        "repita" para criar um quadrado 10 vezes e o bloco "vire" para virar 36
        graus entre cada quadrado?
      grade4_playlab_freeplay_instruction: "It's free play time! Have fun with all\nthe
        blocks in your tool box. \n"
      grade4_playLab_proj_example1_instruction: instructions
      grade4_playLab_proj_example1a_instruction: |
        Take a look at this project.  Do
        you see how it was made?
      grade4_playLab_proj_example2a_instruction: |
        Take a look at this project.  Do
        you see how it was made?
      grade4_playlab_test_instruction: |
        Em nosso jogo, como devemos marcar pontos?
        Adicione 1 à variável "pontos" toda vez que o cão atingir o gato com uma bola de fogo.
        Use o evento "quando o personagem 2 tocar alguma coisa" para disparar uma atualização em
        sua pontuação. Você pode incrementar sua variável definindo "pontos = pontos +1".
        Faça sua pontuação chegar até 10 (aumentando um ponto por vez!) para passar de nível.
      grade4_playlab_test2_instruction: |
        Here's a function called `jump` that causes
        your main character to jump up 100 pixels. Run the program and use the jump
        function to collect all of the flags by moving the dog with the arrow keys.
      grade4_prompt_test_instruction: This is a test play lab level.
      grade4_review_artist1_instruction: |
        Hi, I'm an artist. You can write code
        to make me draw almost anything. Use a few blocks to make me draw over the
        grey lines in the picture. (Each line is 100 pixels long)
      grade4_review_artist2_instruction: 'Essa casa precisa de um telhado! Desenhe
        o triângulo. Dica: todos os 3 lados têm o mesmo comprimento.'
      grade4_review_artist3_instruction: |
        The jump block moves the artist without
        drawing. Draw the dashed line using both the `jump forward` and `move forward`
        blocks. Each line is 50 pixels long.
      grade4_review_bee1_instruction: |
        Now use the `repeat` block to collect all
        of the nectar and make all of the honey.
      grade4_review_bee2_instruction: |
        Colete o néctar de cada flor e produza mel
        em cada colmeia.
      grade4_review_bee3_instruction: |
        Use um laço parecido com o do último desafio, mas realize
        uma ação de virar dentro dele.
      grade4_scaffolded_project1_instruction: |
        It is amazing how much you have learned!
        Let's put them together to make a game, step by step.
      grade4_scaffolded_project2_instruction: "Now let's get things moving! Use\nthese
        event handlers and actions to make your hero move.\r\n\r\nWe've added\nthese
        blocks to your tool box to help you.\r\n"
      grade4_scaffolded_project3_instruction: "Now that your game has a hero, it's\ntime
        to start adding other actors and assigning them behaviors. \r\n\r\nAdd\ntwo
        or more additional actors to your game and make them move. Do you want\nto
        have an actor patrol back and forth? Try using a these new blocks to bring\nthese
        other components of your game to life!"
      grade4_scaffolded_project4_instruction: |
        Just getting the actors moving is
        a great step, but we need to program some interactions to make this really
        feel like a game. A simple way to do this is to add or remove points when
        actors collide with projectiles or each other. Find some interesting ways
        to change the score in your game.
      grade4_scaffolded_project4a_instruction: |
        Just getting the actors moving is
        a great step, but we need to program some interactions to make this really
        feel like a game. A simple way to do this is to add or remove points when
        actors collide with projectiles or each other. Find some interesting ways
        to change the score in your game.
      grade4_scaffolded_project5_instruction: |
        Now spend some time making sure the
        game works the way you want. Try including a way to win or lose your game.
      grade4_scaffolded_project6_instruction: |
        You've finished! Now you can play
        your game or share it with your friends and classmates!
      grade5_artist_binary1_instruction: "Binary is a way of representing information\nusing
        only two options.  Here, we're going to use the options \"off\" (represented\nby
        the number 0) and \"on\" (represented by the number 1).  \r\n\r\nWe've\nprovided
        you with a grid of \"pixels\" that you can walk through and make\ndesigns
        by turning on only certain squares.  Can you have the artist draw\n\"01010101\"
        in binary in the first row?"
      grade5_artist_binary10_instruction: Clica aqui para ver pistas.
      grade5_artist_binary11_instruction: |
        Free Play: Here's a blank canvas for
        you to draw on.  Have fun!
      grade5_artist_binary2_instruction: |
        Temos aqui uma função que recebe uma string
        binária de 1's e 0's e instrui o artista a mover-se da esquerda para
        a direita, de cima para baixo, preenchendo os quadrados nos quais ele vê um 1 e ignorando
        os que têm um 0. Execute esse código para ver como o artista usa números binários para desenhar
        este padrão.
      grade5_artist_binary3_instruction: |
        Which of these binary strings could you
        loop 8 times to draw this image?
      grade5_artist_binary4_instruction: |
        Can you draw this pattern by looping just
        three binary digits (0s and 1s)?
      grade5_artist_binary5_instruction: |
        Each binary string represents one row of
        this picture. Can you rearrange them so it draws a smiley face instead of
        a frowny face?
      grade5_artist_binary6_instruction: |
        Which 6 digit binary string, repeated 11
        times, will draw this image?
      grade5_artist_binary7_instruction: |
        Qual é a menor string binária que você
        pode repetir para desenhar esta imagem?
      grade5_artist_binary8_instruction: Termine o desenho.
      grade5_artist_binary9_instruction: "Here's a higher resolution canvas to draw\non
        - 16 pixels by 16 pixels!\r\n\r\nSee what happens when we start to get\ncreative
        with the bits?"
      grade5_artist_for_loops1_instruction: |
        Desenhe este triângulo que tem 50 pixels.
        Dica: use um bloco repita.
      grade5_artist_for_loops10_instruction: "Can you figure out how to use all of\nthe
        things you've learned to create this image?\r\n\r\nNeed a hint? Click\nhere."
      grade5_artist_for_loops1a_instruction: |
        Try using a `for loop`to create this
        triangular design. Don't worry that the numbers are different than the last
        puzzle. As long as you turn by the right number of degrees, the artist will
        make the correct shape!
      grade5_artist_for_loops1b_instruction: |
        Experiment with the `for` loop and
        play with the `counter` variable.
      grade5_artist_for_loops2_instruction: |
        Use a `repeat` inside of a `for` loop
        to create this stack of triangles that goes from 50 pixels to 100 pixels.
      grade5_artist_for_loops3_instruction: "These triangles go from 20 pixel sides\nto
        200 pixel sides, and each triangle is 20 pixels larger than the last. \n"
      grade5_artist_for_loops4_instruction: "These squares start at 15 pixels long,\nthe
        largest is 300 pixels long, and each square is 15 pixels larger than the\nlast.
        \n"
      grade5_artist_for_loops5_instruction: "Just one little change to the code from\nthe
        last image can create this drawing. Can you figure out what that change\nis?\r\n\r\nHint:
        \ You need to remove something!"
      grade5_artist_for_loops6_instruction: |
        If you turn a little bit more or less
        than you normally would for a shape, it creates a neat effect. Try using some
        of the code from the last level, but turning 89 degrees to create this twisted
        square spiral.
      grade5_artist_for_loops7_instruction: |
        Make three small changes to the code
        from the last level to get this!
      grade5_artist_for_loops7a_instruction: |
        Take the angle down to 72 degrees to
        get a spiraled pentagon.
      grade5_artist_for_loops7b_instruction: "Use the counter inside the `set alpha`\nblock
        to get this faded center.\r\n(This hexagon pattern was made using a\n60 degree
        turn.)"
      grade5_artist_for_loops8_instruction: "Remember back in a previous stage when\nwe
        used a variable to control the number of sides in a shape? We are going\nto
        do the same thing with the `counter` variable now. This pattern starts\nwith
        a triangle and adds one side at a time until it draws a decagon (10 sides).\nEach
        side should be 100 pixels long. \n"
      grade5_artist_for_loops9_instruction: "Let's put it all together!  Using your\nknowledge
        of `for` loops and the `counter` variable, create this drawing where\neach
        shape has two more sides than the last.  Make sure that each side is\n10 times
        as long as the number of sides in the polygon.\r\n\r\nVery little\nof the
        code has been provided for you."
      grade5_artist_for_loopsfreeplay11_instruction: "Atividade livre - Inspiração:
        agora você\naprendeu tudo o que precisa saber para criar um padrão como esse!
        Se essa\nimagem inspira você, tente fazer algo similar. Caso contrário, crie
        algo\nvocê mesmo.\r\n\r\nQuer saber como nosso padrão de inspiração foi feito?
        Acesse\nhttps://studio.code.org/c/106387604 para ver a solução."
      grade5_artist_for_loopsfreeplay12_instruction: |
        Free Play: Try using the `counter`
        variable with other drawing elements to make magical images like this one.
      grade5_artist_freeplay_instruction: |
        Create your own project! This creation
        will be saved to your Projects dashboard so that you can easily edit it any
        time!
      grade5_artist_functionparameters10_instruction: "Atividade livre - Inspiração:
        agora você\naprendeu tudo o que precisa saber para criar um padrão como esse!
        Se essa\nimagem inspira você, tente fazer algo similar. Caso contrário, crie
        algo\nvocê mesmo.\r\n \r\nQuer saber como nosso padrão de inspiração foi feito?
        Acesse\nhttps://studio.code.org/c/106387530 para ver a solução."
      grade5_artist_functionparameters11_instruction: |
        Atividade livre: aqui estão as funções
        que você escreveu e mais algumas com as quais você pode brincar. Desenhe alguma coisa incrível!
      grade5_artist_functionparameters7_instruction: |
        This image is similar to the
        last. Can you use a `for` loop with your function to make this design?
      grade5_artist_functionparameters8_instruction: |
        Vamos editar essa função "desenhe uma forma".
        Ela já tem um parâmetro "comprimento". Agora, vamos editar a função
        para adicionar também um parâmetro "lados". Lembre-se de que o ângulo para virar para uma
        determinada forma é 360 dividido pelos lados que ela tem. Dica: os comprimentos de cada forma
        são: o triângulo tem 100 pixels, o hexágono tem 25 pixels e o quadrado tem 50 pixels.
      grade5_artist_functionparameters9_instruction: |
        Edit "draw a spiral edge"
        to use "length" and "sides" parameters, then recreate these shapes.
      grade5_artist_functionparameters_6_instruction: |
        Você consegue completar esse desenho?
        Os lados de todas as formas têm 100 pixels de comprimento.
      grade5_artist_parameters_squares1_instruction: |
        Click "edit" to fill in the
        function definition of "draw a square" and add a parameter. It should take
        a length parameter, just like the triangle. This time, draw 3 squares: 25,
        50 and 75 pixels in length, each 100 pixels apart.
      grade5_artist_parameters_squares2_instruction: |
        Now try creating the function
        from scratch! Create a function called 'draw a square' and use it to outline
        these four boxes. Make sure to add a parameter for 'length'!
      grade5_artist_parameters_stars1_instruction: |
        That last one is tough if you
        only use loops. Let's try drawing the same picture using this new 'function'
        that will help to **draw a star**.
      grade5_artist_parameters_triangles1_instruction: |
        This program looks okay from
        here, but something isn't working right. See if you can figure out how to
        edit the function 'draw a triangle' to find the bug.
      grade5_artist_parameters_triangles1a_instruction: |
        Today, we're going to try
        out a different, more powerful function editor. See if you can figure out
        how to edit the function 'draw a triangle' to find the bugs.
      grade5_artist_parameters_triangles2_instruction: |
        This drawing can be easily
        created using a new type of function that includes a parameter. The sides
        of each triangle are 25 pixels larger than the last.  The first triangle has
        25 pixel sides. Replace the '???' with the correct values to draw the picture.
      grade5_artist_parameters_triangles2a_instruction: |
        Você percebe algo diferente
        sobre esses blocos de função? Clique em "Executar" para ver o que acontece.
      grade5_artist_parameters_triangles3_instruction: "The code for this triangle\nfunction
        is broken.\r\n\r\nCan you edit the function to fix it, and then make\ntriangles
        of length 150, 75, 25?"
      grade5_artist_parameters_triangles4_instruction: |
        The code for this triangle
        function is broken. Can you edit the function to fix it, and then make triangles
        of length 25, 50, and 75?
      grade5_artist_parameters_trianglesy_instruction: "The code for this triangle\nfunction
        is broken.\r\n\r\nCan you edit the function to fix it, and then make\ntriangles
        of length 150, 75, 25?"
      grade5_artist_variables_freeplay10_instruction: |
        Free Play: Experiment with
        the number of sides this shape has. Can you change the algorithm so that the
        overall size of the shape stays the same, no matter how many sides it has?
        Hint: If you divide your starting length by the number of sides, the length
        of each side will get shorter as the number of sides gets higher.
      grade5_artist_variables_freeplay14_instruction: "Free Play: Check it out! Now\nyour
        algorithm is nested within one more loop. Experiment with changing the\nvalues
        of your two variables to draw cool patterns.\r\n\r\nFor even more effect,\ntry
        playing with color!  Use random colors inside loops to see how it changes\nyour
        design."
      grade5_artist_variables_freeplay15_instruction: "Want a second peek at the\ninspiration
        design or the hints?  Click here!\r\n\r\nOtherwise, make a design\nall your
        own!"
      grade5_artist_variables_freeplay16_instruction: |
        Still playing?  Here is a
        blank canvas where you can create whatever you want!
      grade5_artist_variables_hexagons1_instruction: "Let's try it again! \r\n\r\nCan\nyou
        set the `length` variable to 60 to make this cool design with hexagons?"
      grade5_artist_variables_letterT11_instruction: |
        Here’s more complicated code
        using the same concepts from the last puzzle - what should you set the "sides"
        variable to in order to draw this picture made of squares?
      grade5_artist_variables_new1_instruction: |
        Here is a program that will create
        an image. There are a few things that are wrong with it.
      grade5_artist_variables_octagons13_instruction: "When a shape has lots of sides,\neach
        side needs to be shorter if you want the whole pattern to fit on the\nscreen.
        \r\nLet's recreate the algorithm for this amazing pattern, but instead\nof
        manually setting the `length` variable, let's use a math block with the\n`sides`
        variable inside to make sure that each shape fits correctly. The perimeter\nof
        each polygon is 300 pixels.\r\nNeed some hints?  Click here."
      grade5_artist_variables_pentagon8_instruction: "Use what you learned in the\nlast
        puzzle to create this hexagon using the \"sides\" variable.\r\n\r\nSee\nhow
        you could change just one value to draw a triangle,  square, pentagon,\nor
        octagon?"
      grade5_artist_variables_pentagon9_instruction: |
        Now, recreate the algorithm
        from the last level and create a pentagon with sides of length 150.
      grade5_artist_variables_pentagons1_instruction: "Draw this pattern of pentagons\nwith
        100 pixel sides by setting the right value for `length` and dropping\nthe
        `length` variable into all of the the correct places. \r\n\r\nSee how\nyou
        only have to set the value for `length` once, and the code uses the right\nvalue
        everywhere?"
      grade5_artist_variables_pentagons12_instruction: |
        Let's set the "sides"
        variable to 5. The more sides we add to this algorithm, the bigger this whole
        pattern gets! Notice that there is another variable called "length". We
        can now use that wherever we have a "move forward." Set the "length" variable
        to 75 for this shape.
      grade5_artist_variables_rectangle6_instruction: |
        Now I want to make a rectangle
        that is twice as tall as it is wide. We've got a variable called "width"
        that needs to be set to 100. Can you use the math blocks to complete the code?
      grade5_artist_variables_square7_instruction: "Here’s some code that can draw\nany
        regular polygon. There’s a new variable called sides that is set to 4.\nCan
        you use the sides variable (along with the math block) to turn the right\namount
        regardless of how many sides there are in the polygon?\r\n\r\nClick\nhere
        to go back to the hint!"
      grade5_artist_variables_triangles1_instruction: "Let's draw an equilateral\ntriangle.
        \r\n\r\nIt has to be exactly 100 pixels long on each side."
      grade5_artist_variables_triangles2_instruction: |
        Instead of using "move forward
        by 150," the "move" block is now referencing a variable called "length."
        Can you set "length" to 150 to draw this new triangle?
      grade5_artist_variables_triangles3_instruction: "Drag a number block to both\nthe
        `set length` block and the `repeat _ times` block to draw a set of 50\npixel
        triangles. \n"
      grade5_bee_for_loops1_instruction: |
        Use a loop to collect the nectar from each
        flower.
      grade5_bee_for_loops10_instruction: |
        If your loop is counting down, the increment
        is subtracted from your counter variable each loop. What should your increment
        be to collect 15, then 12, then 9, 6, 3 nectar?
      grade5_bee_for_loops11_instruction: |
        Ready for a challenge?  Take what you've
        learned about loops and try to solve this problem. Remember: You may have
        to run through solutions multiple times before you figure out all of the steps.
      grade5_bee_for_loops2_instruction: |
        Add the code necessary to make sure the
        bee collects all the nectar. Look at how much code you need for this puzzle!
        (We'll learn a simpler way in the next puzzle.)
      grade5_bee_for_loops3_instruction: "Ah, the \"for loop\" makes this much easier!\nAll
        the code you need is here, take a look at how it is put together then\nclick
        \"Run\" to see how it works. \n"
      grade5_bee_for_loops4_instruction: "Replace the ??? in the \"for loop\" with\nthe
        largest amount of nectar the bee has to collect. \n"
      grade5_bee_for_loops5_instruction: |
        Você pode ajudar a abelha a coletar o
        resto do mel usando esse laço para?
      grade5_bee_for_loops6_instruction: |
        You can also use a "for loop" to count
        down. Try gathering this nectar by counting down from 5 to 1 by 1.
      grade5_bee_for_loops7_instruction: |
        The last number in your for loop is called
        the "increment". Each time the loop is run, the counter variable changes
        by the value of the increment. Try collecting these flowers using an increment
        of 2.
      grade5_bee_for_loops8_instruction: |
        You've got this! What should your increment
        be to collect 3, 6, 9, 12, 15 nectar?
      grade5_bee_for_loops9_instruction: "Now, let's combine the \"counter\" variable\nwith
        a math block! How can you use the \"counter\" variable to navigate this\ngarden
        with the fewest number of blocks possible? What do you need to do to\ncollect
        3, 6, 9, 12, 15 nectar this time? The secret is in the \"counter\"\nvariable!\r\n\r\nRemember:
        If your loop is counting up, the increment is added\nto your \"counter\" variable
        each time through."
      grade5_bee_parameters_new1_instruction: |
        Help the bee collect all of the nectar.
        You can only collect nectar from flowers, but you can check any space to see
        if there is a flower.
      grade5_bee_parameters_new2_instruction: |
        Let's take that last program you
        wrote and turn it into a function. Then, call the function to collect the
        nectar when needed. This may seem like a strange step now, but it will be
        really helpful soon!
      grade5_bee_parameters_new3_instruction: |
        Time to put the function to the test!
        Let's see if it makes it any easier to collect these three rows of nectar.
      grade5_bee_parameters_new4_instruction: |
        How is your function holding up? We
        may need to make some adjustments here. Can you add a 'length' parameter
        to the function so that it will still work if the row is a different length?
      grade5_bee_parameters_new5_instruction: |
        Challenge Level! You are doing great
        so far! Let's use this parametric function to collect a lot of nectar.
      grade5_bee_parameters_new6_instruction: |
        You can make your program much shorter
        and more efficient when you notice new patterns. Try using some other blocks
        to make a short and simple solution!
      grade5_bee_parameters_new7_instruction: |
        Something looks a little different.
        Can you modify your function to account for all this honey that needs to be
        made?
      grade5_bee_parameters_new8_instruction: |
        That's a great function you've created!
        You are officially on your own now. Collect all the nectar. Make all the honey.
      grade5_bee_parameters_new9_instruction: |
        Bonus Challenge! If you are feeling
        ambitious, try this puzzle. It is possible to collect all of the nectar and
        make all of the honey using only a For loop, a Repeat loop, a function call,
        and a turn. Try it all on your own, or view the hints to build it step-by-step.
        Great job with this stage!
      grade5_pixelation_instruction: |
        Encode an image of anything you like using
        binary. Remember that the binary language will be represented with '0' and
        '1' only.
      grade5_playlab_freeplay_instruction: "It's free play time! Have fun with all\nthe
        blocks in your tool box. \n"
      grade5_playlab_parameters_points1_instruction: "Here's the same game but most\nof
        the code is hidden. We've added a new function called `score_points.`\r\n\r\nAdd\na
        new parameter called `points` to the `player_score` function. \r\n\r\nThe\n`score_points`
        function should be able to both add and remove points from\n`player_score`
        depending on which actor is hit.\r\nChanging the score by 1\nwill add a point,
        while changing the score by -1 will subtract a point.\r\n\r\nWhen\nyou're
        done, click \"Run\" to play.  When Dog scores 6 points, you will move\non
        to the next puzzle. "
      grade5_playlab_variables1_instruction: |
        This time you don't have to write
        any code, just hit "Run" to play the game! In this game, you're the dog
        who is trying to collect more flags than the cat. Use the down arrow to control
        the dog. Press "Finish" when you're done playing.
      grade5_playlab_variables10_instruction: |
        Preencha a entrada do parâmetro "personagem"
        para que possamos chamar a função "patrulhe" para cada um dos personagens. Lembre-se,
        os personagens correspondem aos números 1, 2 e 3.
      grade5_playlab_variables11_instruction: |
        Add another parameter called "speed"
        to the "patrol" function. Try using a "set speed" block with the new "speed"
        parameter to help Penguin get both flags before the other sprites even get
        one.
      grade5_playlab_variables12_instruction: |
        Use as setas do teclado para controlar o
        cão e coletar todas as bandeiras.
      grade5_playlab_variables13_instruction: |
        Use um bloco "quando tocar" para enviar
        o cão de volta para a parte superior esquerda se ele tocar em qualquer outro personagem.
      grade5_playlab_variables14_instruction: "It's free play time! Have fun with\nall
        the blocks in your tool box. \n"
      grade5_playlab_variables1ask_instruction: "This time, when you press 'run',\nyou
        will see a 'prompt' asking you for a number. This number will be stored\nin
        a variable used to set the dog's speed.\r\n\r\n\r\nPay attention to how\nthis
        program is written!"
      grade5_playlab_variables2_instruction: |
        Essa corrida não foi muito justa! Altere
        a variável "velocidade_cão" para garantir que você possa coletar mais bandeiras do que o
        gato. O primeiro a coletar 10 bandeiras vence!
      grade5_playlab_variables3_instruction: |
        Temos aqui um novo tipo de jogo! Use as
        setas para a esquerda e para a direita para se mover e a seta para cima para pular. Veja se você
        consegue coletar todas as bandeiras.
      grade5_playlab_variables4_instruction: |
        Now we're using a variable called
        "height" to control how high the dog can jump. Update the "height" variable
        so that the dog can jump high enough to reach all the flags.
      grade5_playlab_variables5_instruction: "You've seen now how a variable can\nbe
        used to set the height of an actor's jump. How else could  you use a variable?\r\n\r\nLet's\nbuild
        a game! First we'll need a score. Try setting the 'points' variable\nto give
        yourself 10 free points!"
      grade5_playlab_variables6_instruction: |
        Em nosso jogo, como devemos marcar pontos?
        Adicione 1 à variável "pontos" toda vez que o cão atingir o gato com uma bola de fogo.
        Use o evento "quando o personagem 2 tocar alguma coisa" para disparar uma atualização em
        sua pontuação. Você pode incrementar sua variável definindo "pontos = pontos +1".
        Faça sua pontuação chegar até 10 (aumentando um ponto por vez!) para passar de nível.
      grade5_playlab_variables6ask_instruction: "This time, you need 100 points to\nwin!
        \ Don't worry though, you can choose how many points you earn each time\nyou
        score a hit!\r\nTry adding the `ask` block and changing the number 1 out\nfor
        the variable `value`."
      grade5_playlab_variables7_instruction: |
        Legal, agora vamos garantir que esse jogo
        não seja muito fácil - sempre que o cão (personagem 1) for atingido por uma bola de fogo,
        você deve perder um ponto. Comece com 10 pontos para que o jogo não seja muito difícil. Faça sua
        pontuação cair de 10 para 0 para passar de nível.
      grade5_playlab_variables71_instruction: "Here's our game from an earlier stage,\nbut
        most of the code is hidden. There’s a new function `score_points.`\r\n\r\nEdit\nthe
        function so that a new parameter called `points` can be added to `player_score`.\n\r\n\r\nThe
        variable `player_score` should increase each time Dog tags Cat\nwith pie,
        and decrease each time that Cat tags Dog with a sandwich.\r\n\r\nNote:\nWhen
        you're done, click \"Run\" to play.  When Dog scores 6 points, you will\nmove
        on to the next puzzle. "
      grade5_playlab_variables81_instruction: |
        Adicionamos uma última função para
        que você use. Programe seu jogo para chamar a função "suba de nível" se "pontos_jogador"
        > 10. Jogue o jogo e passe do nível 4 para seguir para o próximo desafio.
      grade5_playlab_variables9_instruction: |
        Aqui temos uma função chamada "patrulhe".
        Edite-a para mover o gato 400 pixels para cima, e então 400 pixels para baixo.
      grade5_playlab_variables_freeplay_instruction: "Free Play time! Here are all\nof
        the variables we've played with so far in this stage, as well as a few\nmore
        in case you want them. \r\n\r\nNotice that there are now so many blocks\nin
        our toolbox that they need to be organized!  Here, we've put each piece\ninto
        an appropriate category.  Take some time to explore everything that is\navailable.
        When you're done browsing, make a game or story using repeats,\nvariables,
        and events.  \r\n\r\nHint: scroll down to see all the commands\nin the workspace."
      grade5_playlab_variables_jump1_instruction: |
        This puzzle uses a hidden function
        that makes the dog jump when the 'up' arrow is pressed. The height of the
        jumps can be set at the start of the game using the 'jumpPower' variable.
        Try to touch all of the flags!
      grade5_prompt_test_instruction: |
        Variables aren't always numbers. What if
        you wanted to store a word or text? Experiment with the new `ask` block.
      gradek_adventurer_loops1_instruction: |
        This is Laurel the Adventurer!  Can
        you move her around and get gold?
      gradek_adventurer_loops10_instruction: |
        Help me get all of the gold from this
        cave.
      gradek_adventurer_loops2_instruction: |
        How can Laurel collect all five piles
        of gold using only one --> block?
      gradek_adventurer_loops3_instruction: |
        Can you fix Laurel's path to get all
        of this gold?
      gradek_adventurer_loops4_instruction: |
        Use what you learned to get all of the
        coins.
      gradek_adventurer_loops4a_instruction: |
        Add to this code to collect all of
        the coins.
      gradek_adventurer_loops5_instruction: |
        What should you add to this code to
        get all of the gold?
      gradek_adventurer_loops6_instruction: Write the code to get all of this gold.
      gradek_adventurer_loops7_instruction: Write the code to get all of this gold.
      gradek_adventurer_loops7_challenge_instruction: |
        Challenge: The gold goes all
        the way up these stairs!  Write the code to help me get it all.
      gradek_adventurer_loops8_instruction: |
        Help me get the gold from this deep
        valley.
      gradek_adventurer_loops9_instruction: |
        Help me get all of the gold from this
        cave.
      gradek_adventurer_loopsFP_instruction: |
        Eureka!  Collect as much gold as you
        can!
      gradek_adventurer_loopsPre_instruction: |
        This is Laurel the Adventurer!  Can
        you move her around and get gold?
      gradek_artist_loops1_instruction: |
        Help the artist draw this line two times
        forward.
      gradek_artist_loops2_instruction: |
        Our artist is trying to draw a line five
        times, but can't get it right.  Can you help?
      gradek_artist_loops3_instruction: |
        Now, use a `repeat` loop to draw this line
        five times!
      gradek_artist_loops4_instruction: |
        Draw a line eight steps long. This will
        become our horizon.
      gradek_artist_loops5_instruction: Let's put a nice hill in the back.
      gradek_artist_loops6_instruction: |
        Use the `repeat` loop to add waves to the
        water.
      gradek_artist_loops7_instruction: We need a ladder up to the boat.
      gradek_artist_loops8_instruction: |
        Challenge: The stairs are broken.  Help
        me fix them.
      gradek_artist_loops9_instruction: |
        Time to head back to land. Help me put down
        stones so I don't fall in!
      gradek_artist_loopsA_instruction: |
        Help me build steps to watch the ship sail
        away.
      gradek_artist_loopsFP_instruction: |
        The artist saw something funny in the distance.  Draw
        what you think he saw.
      gradek_artist_loopsPre_instruction: |
        This is a new type of puzzle called "Artist".
        Play with the level and draw something fun.
      gradek_playlab_events1_instruction: |
        Make your robot say "Hello!" when the
        button is clicked.
      gradek_playlab_events1a_instruction: |
        Add a block so that when you click the
        "up" button, Olive the Cat walks up.
      gradek_playlab_events2_instruction: |
        Edit the code so that when the second
        bird is clicked, your program plays a sound!
      gradek_playlab_events2a_instruction: |
        Add a block so that when you click "down"
        Olive the Cat walks down.
      gradek_playlab_events3_instruction: |
        When the third bird is clicked, the background
        should change to a city. Can you add code to make this happen?
      gradek_playlab_events3a_instruction: |
        When the third bird is clicked, the background
        should change to a city. Can you add code to make this happen?
      gradek_playlab_events3b_instruction: |
        Add a button so that Olive the Cat moves
        right when you click the "right" button.
      gradek_playlab_events4_instruction: |
        Add code to make something happen when
        the fourth bird is clicked. Be creative!
      gradek_playlab_events4a_instruction: |
        Add a block so that Olive the Cat moves
        left when you click the "left" button.
      gradek_playlab_events5_instruction: |
        About My Robot Project! Write code so
        that clicking on each bird shows a new fact about your robot.
      gradek_playlab_events5a_instruction: |
        About My Robot Project! Write code so
        that clicking on each bird shows a new fact about your robot.
      gradek_playlab_eventsA_instruction: |
        Now, have the actor change to a random
        size AND have it play a random sound when you click the center button.
      gradek_playlab_eventsFP_instruction: |
        Add anything you want to this game.  Can
        you make Olive the Cat disappear when you click on her?
      gradek_playlab_eventsPre_instruction: |
        This is a Play Lab level.  Move blocks
        to the workspace and see what happens!
      gradeK_sequence_4_instruction: Try this one yourself from the beginning.
      Guess The Number_instruction: |
        Build whatever you want. This is an example
        of a number-guessing game!
      Harvesting_instruction: |
        Uh oh, I lost my map and can't remember what I planted.
        Every sprout could grow up to be corn, beans, or pumpkins. Can you write some
        code to pick all the crops, no matter what they are?
      Infinity_catch_instruction: |
        Você pode fazer Elsa ("personagem 2") alcançar
        Anna usando as setas do teclado?
      Infinity_finale_instruction: Crie o que quiser e compartilhe!
      Infinity_move_collide_instruction: |
        Hiro é o "personagem 1". Mova-o em direção a
        Baymax e reproduza um som quando eles se tocarem.
      Infinity_move_directions_instruction: |
        Baymax é o "personagem 2". Adicione blocos "mova"
        e então mova Baymax usando as setas. Faça com que ele toque os outros dois personagens.
      Infinity_move_right_instruction: |
        Hiro é o "personagem 1". Use o bloco "mova"
        para mover Hiro para que ele toque Baymax.
      Infinity_repeat_instruction: |
        Use um bloco "repita infinitamente" para fazer Anna se mover
        400 pixels para cima e para baixo.
      Infinity_say_instruction: Faça Anna dizer "Oi." usando o bloco "diga".
      Infinity_shoot_instruction: |
        Baymax é o "personagem 2". Faça Baymax lançar um foguete
        em Hiro.
      Infinity_shoot_directions_instruction: |
        Hiro é o "personagem 3". Faça Hiro lançar
        um projétil em cada um dos quatro personagens. Espere um segundo entre cada
        lançamento.
      Infinity_test_instruction: This is a test Infinity level.
      Infinity_touch_faster_instruction: Toque ainda mais flocos de neve!
      Infinity_touch_four_instruction: |
        Mova Anna para cima, para a esquerda e para a direita para tocar
        cada um dos quatro flocos de neve.
      Infinity_touch_score_instruction: |
        Faça Anna marcar um ponto quando ela tocar
        em um floco de neve. Depois clique em "Executar" e faça ela tocar uma vez em cada floco de neve.
      Inspirational Artwork_instruction: "Free Play Inspiration: You've now learned\neverything
        you need to know to make a pattern like this! If this picture inspires\nyou,
        try to make something similar. Otherwise, create something all your own.\r\n\n\r\nWant
        to know how our inspiration pattern was made? "
      'Internet Simulator: Broadcast Mode_instruction': "Now use the Internet Simulator\nto
        send the battleship moves. For setup, join a Room with your group, and\nadd
        ships to your paper board for each opponent. When playing, all communication\nmust
        be done through the tool, so no talking, but have fun!\r\n"
      'Internet Simulator: Broadcast_instruction': "Now use the Internet Simulator\nto
        send the battleship moves. For setup, join a Room with your group, and\nadd
        ships to your paper board for each opponent. When playing, all communication\nmust
        be done through the tool, so no talking, but have fun!\r\n"
      'Internet Simulator: DNS Mode_instruction': |
        In this version of the Internet
        Simulator, a Domain Name System (DNS) is provided for you and knows the IP
        addresses of all connected computers. Send a message in the form GET [hostname]
        to the DNS service at address <yourRouterNumber>.15 to get a student's address.
      'Internet Simulator: DNS_instruction': |
        In this version of the Internet Simulator,
        a Domain Name System (DNS) is provided for you and knows the IP addresses
        of all connected computers. Send a message in the form GET [hostname] to the
        DNS service at address <yourRouterNumber>.15 to get a student's address.
      'Internet Simulator: Packets_instruction': "Develop a Protocol for Reliably\nSending
        a Message.\r\n\r\nConstraints:\r\n- Packets may contain only 8 characters\r\n-\nPackets
        may drop with small probability\r\n- Packets may not arrive in order"
      'Internet Simulator: Routers_instruction': |
        Send messages with your classmates
        (Click to see full instructions)
      'Internet Simulator: Sending Binary Messages 1_instruction': "Develop, document,\nand
        test a protocol that allows you to use Internet Simulator to relay a message.\nSee
        the worksheet for more detailed instructions.  \n"
      'Internet Simulator: Sending Binary Messages_instruction': "Develop, document,\nand
        test a protocol that allows you to use Internet Simulator to relay a message.\nSee
        the worksheet for more detailed instructions.  \n"
      'Internet Simulator: Sending Numbers_instruction': |
        With your partner, develop
        a protocol or set of rules for communicating a drawing using only bits. See
        the worksheet handed out by your teacher for more detailed instructions!
      'Internet Simulator: Sending Text_instruction': |
        Work with a partner or in
        a small team to develop a protocol that allows you to send formatted text.
        See the worksheet handed out by your teacher for more detailed instructions!
      jessie-test_instruction: Lots of instructions
      Just for Testing_instruction: Test instructions
      K-1 Artist 1 Assessment 1_instruction: |
        Desenhe uma pequena reta para cima e uma
        grande para a direita!
      K-1 artist 1 level 10_instruction: Desenhe as linhas tracejadas usando os blocos
        pule e desenhe
      K-1 artist 1 level 9_instruction: Faça o desenho usando três retas
      K-1 Artist Loops 1_instruction: Desenhe esta reta usando o movimento para o
        leste 4 vezes.
      K-1 Artist Loops 2_instruction: Você pode desenhar a mesma reta usando um laço?
      K-1 Artist Loops 3_instruction: Você pode repetir esses blocos para desenhar
        6 retas?
      K-1 Artist Loops 4_instruction: |
        Um laço poderia nos ajudar a desenhar o topo desse
        castelo?
      K-1 Artist Loops 5_instruction: O que você pode repetir 4 vezes para desenhar
        essas escadas?
      K-1 Artist Loops 6_instruction: |
        São necessários dois laços: um para subir as
        escadas e outro para descer.
      K-1 Artist Loops 7_instruction: Você pode terminar este padrão com dois laços?
      K-1 Artist Loops 8_instruction: Esta escada tem degraus mais longos.
      K-1 Artist Loops 9_instruction: 'Avaliação: use um laço para desenhar as escadas'
      K-1 Artist Loops Free Play_instruction: Atividade livre, desenhe algo divertido!
      K-1 Artist1 1_instruction: Desenhe o pé do homem com uma reta
      K-1 Artist1 10_instruction: |
        Desenhe e pule para fazer o caminho tracejado até o tesouro
        X
      K-1 Artist1 2_instruction: Desenhe o bigode no gato com duas retas!
      K-1 Artist1 3_instruction: |
        Desenhe duas retas para o leste e duas retas para o norte para terminar
        a casa!
      K-1 Artist1 4_instruction: Desenhe retas para cima, sobre e para baixo para
        completar o castelo!
      K-1 Artist1 5.5_instruction: |
        Complete a terceira torre do castelo usando
        retas curtas
      K-1 Artist1 5_instruction: Desenhe o caule desta flor com duas retas!
      K-1 Artist1 6_instruction: Termine a imagem usando um bloco pule!
      K-1 Artist1 7_instruction: |
        Use o bloco pule para se mover sem desenhar. Pule
        e desenhe uma reta.
      K-1 Artist1 8_instruction: |
        Desenhe linhas tracejadas usando os blocos pule e
        desenhe
      K-1 Artist1 9_instruction: Desenhe e pule para fazer a reta tracejada
      K-1 Artist1 Assessment 1_instruction: Desenhe as retas pequenas e grandes!
      K-1 Artist1 Assessment 2_instruction: Desenhe as retas pequenas tracejadas!
      K-1 Artist2 1_instruction: Desenhe um quadrado abaixo do triângulo.
      K-1 Artist2 2_instruction: Pule e desenhe um quadrado próximo à casa.
      K-1 Artist2 3_instruction: Desenhe um quadrado sobre o outro quadrado
      K-1 Artist2 4_instruction: Desenhe um retângulo para completar a ponte.
      K-1 Artist2 5_instruction: Desenhe um retângulo para completar os suportes da
        ponte
      K-1 Artist2 6_instruction: Desenhe dois quadrados para criar um retângulo!
      K-1 Artist2 Assessment1_instruction: |
        Avaliação: desenhe um quadrado ao lado do
        outro quadrado.
      K-1 Artist2 Free Draw_instruction: Desenhe qualquer coisa!
      K-1 Artist2_7_instruction: Desenhe um retângulo para dar uma gaveta à cômoda!
      K-1 Bee 1_instruction: |
        Mova-me até a flor, colete o néctar e então mova-me
        até a colmeia e produza mel
      K-1 Bee 10_instruction: Colete quatro néctares e então fabrique duas unidades
        de mel!
      K-1 Bee 11.5_instruction: Colete quatro néctares para fabricar quatro unidades
        de mel!
      K-1 Bee 11_instruction: Colete três néctares e então fabrique uma unidade de
        mel
      K-1 Bee 12_instruction: Colete três néctares e então fabrique duas unidades
        de mel!
      K-1 Bee 13_instruction: Colete três néctares e então fabrique uma unidade de
        mel!
      K-1 Bee 14_instruction: |
        Leve-me até o néctar e colete-o, leve-me até o mel
        e produza mel
      K-1 Bee 15_instruction: Colete dois néctares para fabricar duas unidades de
        mel!
      K-1 Bee 2_instruction: |
        Mova-me até a flor, colete o néctar e então mova-me
        até a colmeia e produza mel
      K-1 Bee 3_instruction: |
        Mova-me até a flor, colete o néctar e então mova-me
        até a colmeia e produza mel
      K-1 Bee 4_instruction: Colete dois néctares e então fabrique duas unidades de
        mel!
      K-1 Bee 5_instruction: Colete três néctares e então fabrique três unidades de
        mel!
      K-1 Bee 6_instruction: Colete dois néctares e então fabrique duas unidades de
        mel!
      K-1 Bee 7_instruction: Colete três néctares e então fabrique duas unidades de
        mel!
      K-1 Bee 8_instruction: Colete dois néctares e então fabrique duas unidades de
        mel!
      K-1 Bee 9_instruction: Colete dois néctares e então fabrique duas unidades de
        mel!
      K-1 Bee Assessment 1_instruction: Colete néctar para fabricar mel!
      K-1 Bee Assessment 2_instruction: Colete néctar para fabricar mel!
      K-1 Bee Loops 1_instruction: Colete o néctar para fabricar mel!
      K-1 Bee Loops 10_instruction: Use laços para coletar néctar, fabricar mel e
        para se mover!
      K-1 Bee Loops 11_instruction: |
        Avaliação: use laços e obtenha o néctar e o
        mel!
      K-1 Bee Loops 12_instruction: |
        Avaliação: use laços para obter néctar, mel
        e para mover!
      K-1 Bee Loops 2_instruction: |
        Use um laço para mover e então coletar o néctar e
        produzir mel!
      K-1 Bee Loops 3_instruction: Use laços para coletar o néctar e fabricar o mel!
      K-1 Bee Loops 4_instruction: |
        Use laços para obter néctar, produzir mel e
        para mover!
      K-1 Bee Loops 5_instruction: Use laços para obter néctar e mel!
      K-1 Bee Loops 6_instruction: Use laços para coletar néctar, fabricar mel e para
        se mover!
      K-1 Bee Loops 7_instruction: Use laços para coletar o néctar e fabricar o mel!
      K-1 Bee Loops 8_instruction: Use laços para coletar o néctar e fabricar o mel!
      K-1 Bee Loops 9_instruction: Use laços para coletar néctar, fabricar mel e para
        se mover!
      K-1 Bee Loops Assessment 1_instruction: |
        Obtenha néctar para produzir mel e use laços
        para mover!
      K-1 Bee Loops Assessment 2_instruction: Colete néctar para fabricar mel usando
        laços!
      K-1 Bee Puzzle 12_instruction: Get three nectars and then make two honey
      K-1 Building a Foundation Assessment_instruction: |
        Construa uma pirâmide de três níveis.
        Não há outras instruções, então simplesmente brinque com as peças até
        conseguir!
      k-1 maze 1_instruction: Você pode me mover para o oeste para chegar até o porco?
      K-1 Maze 10_instruction: 'Desvie do TNT para me levar até o porco! '
      K-1 Maze 11_instruction: |
        Trace o caminho e leve-me até o porco bobalhão. Desvie
        do TNT, ou penas vão voar! Dica: ele está ao sul de onde estou.
      K-1 Maze 2_instruction: Mova-me para o leste para chegar até o porco!
      K-1 Maze 3_instruction: Mova-me para o sul para chegar até o porco!
      K-1 Maze 4_instruction: Mova-me para o norte para chegar até o porco!
      K-1 Maze 5_instruction: Mova-me para o leste para chegar até o porco!
      K-1 Maze 6_instruction: Mova-me por um caminho, e então por outro para me levar
        até o porco!
      K-1 Maze 7_instruction: Mova-me por um caminho, e então por outro para me levar
        até o porco!
      K-1 Maze 8_instruction: Mova-me por um caminho, e então por outro para me levar
        até o porco!
      K-1 Maze 9_instruction: Mova-me por um caminho, e então por outro para me levar
        até o porco!
      K-1 Maze Assessment 1_instruction: 'Avaliação: leve-me até o porco!'
      K-1 Maze Assessment 12_instruction: Avaliação de nível
      K-1 Maze Assessment 13_instruction: Avaliação de nível
      K-1 Maze Assessment 2_instruction: 'Avaliação: leve-me até o porco!'
      K-1 maze debug 1_instruction: Altere o código para me levar até o porco!
      K-1 maze debug 10_instruction: |
        Depure esse nível reorganizando e adicionando
        blocos para me levar até o porco!
      K-1 maze debug 11_instruction: "Isso é um teste!\r\nDepure esse nível reorganizando\ne
        adicionando blocos para me levar até o porco"
      K-1 maze debug 2_instruction: |
        Descubra o que está faltando e então adicione blocos
        para me levar até o porco!
      K-1 maze debug 3_instruction: |
        Descubra o que está faltando e então REMOVA blocos
        para me levar até o porco!
      K-1 maze debug 4_instruction: |
        Passe por esses blocos e conserte-os! Eu acho
        que estou indo na direção errada.
      K-1 maze debug 5_instruction: |
        Depure esse nível reorganizando e adicionando blocos
        para me levar até o porco!
      K-1 maze debug 6_instruction: |
        Depure esse nível reorganizando e adicionando
        blocos para me levar até o porco!
      K-1 maze debug 7_instruction: |
        Depure esse nível reorganizando e adicionando
        blocos para me levar até o porco!
      K-1 maze debug 8_instruction: |
        Depure esse nível reorganizando e adicionando blocos
        para me levar até o porco!
      K-1 maze debug 9_instruction: |
        Depure esse nível reorganizando e adicionando
        blocos para me levar até o porco!
      K-1 Maze debug Assessment 1_instruction: |
        Avaliação -- depure esse nível
        reorganizando e adicionando blocos para me levar até o porco!
      K-1 Maze Loops 1_instruction: Leve-me até o porco!
      K-1 Maze Loops 10_instruction: Leve-me até o porco! Use o laço repita.
      K-1 Maze Loops 11_instruction: Leve-me até o porco! Use o laço repita.
      K-1 Maze Loops 12_instruction: Leve-me até o porco! Use o laço repita.
      K-1 Maze Loops 2_instruction: Use o bloco repita para me levar até o porco!
      K-1 Maze Loops 3_instruction: Leve-me até o porco! Use o laço repita.
      K-1 Maze Loops 4_instruction: Leve-me até o porco!
      K-1 Maze Loops 5_instruction: Leve-me até o porco! Use o laço repita.
      K-1 Maze Loops 6_instruction: Leve-me até o porco! Use o laço repita.
      K-1 Maze Loops 7_instruction: Leve-me até o porco! Use o laço repita.
      K-1 Maze Loops 8_instruction: Leve-me até o porco! Use o laço repita.
      K-1 Maze Loops 9_instruction: Leve-me até o porco!
      K-1 Maze Loops Assessment 1_instruction: |
        Avaliação -- use laços para me levar
        até o poco!
      K-1 Maze Loops Assessment 2_instruction: |
        Avaliação -- use laços para me levar
        até o poco!
      K-1 Maze Multi 14_instruction: Avaliação de nível
      K-1 Maze Multi 15_instruction: Avaliação de nível
      K-1 Maze Sequence Assessment 1_instruction: "Isso é um teste!\r\nMova-me por
        um caminho e então\npor outro para me levar até o porco"
      K-1 Maze Sequence Assessment 2_instruction: "Isso é um teste!\r\nMova-me por
        um caminho e então\npor outro para me levar até o porco."
      K2.0 sequence 1_instruction: Altere o código para me levar até o porco!
      K2.0 sequence 10_instruction: |
        Challenge: Move me around the TNT to get to
        the pig.
      K2.0 sequence 12_instruction: 'Let''s get that pig! '
      K2.0 sequence 2_instruction: Altere o código para me levar até o porco!
      K2.0 sequence 3_instruction: |
        Something is not quite right. REMOVE a block
        to get me to the pig!
      K2.0 sequence 4_instruction: |
        Time for a shorter puzzle!  Move one way, then
        another to get me to the pig.
      K2.0 sequence 4a_instruction: Try this puzzle again from the start!
      K2.0 sequence 5_instruction: Mova-me por um caminho, e então por outro para
        me levar até o porco!
      K2.0 sequence 6_instruction: |
        Descubra o que está faltando e então adicione blocos
        para me levar até o porco!
      K2.0 sequence 7_instruction: |
        Debug this level by changing a block to get me
        to the pig!
      K2.0 sequence 8_instruction: |
        Debug this level by adding blocks to get me to
        the pig!
      K2.0 sequence 9_instruction: 'Desvie do TNT para me levar até o porco! '
      K2.0 sequence FP_instruction: |
        Now figure out how to get the pig any way you
        can!
      K2.0 sequence pre_instruction: |
        Play with these blocks to see if you can get
        me to the pig!
      kikiTesta_instruction: "Our adventurer wants to collect coins.  But she can\nonly
        use 4 blocks to get them.\r\n\r\nCan you help her grab as many as she\ncan
        using just 4 blocks?"
      kikiTesting_instruction: |
        .\r
         .\r
        .\r
        .\r
        .\r
        .\r
        \r
        .\r
        \r
      KTest1_instruction: Can you make me move South once more to get to the pig?
      KTest2_instruction: |
        Trace the path and lead me to the silly pig. Avoid TNT
        or the feathers will fly!
      level 'grade3_Loops_10_instruction: "Such a busy bee!\r\n\r\nHelp bee collect\nall
        of the nectar and make all of the honey with the fewest blocks possible."
      level 'grade3_Loops_11_instruction: "The shape of this path is different than\nthe
        others. \r\n\r\nCan you collect all of the nectar using as few blocks\nas
        possible?"
      level 'grade3_Loops_12_instruction: |
        Can you find the quickest way for the
        bee to collect all of the nectar and make all of the honey?
      level 'grade3_Loops_2_instruction: |
        This time, use a loop to gather all of
        the nectar.
      level 'grade3_Loops_3_instruction: |
        Use a `repeat` loop to collect all of the
        nectar.
      level 'grade3_Loops_4_instruction: |
        Now use the `repeat` block to collect all
        of the nectar and make all of the honey.
      level 'grade3_Loops_5_instruction: |
        What a beautiful field of flowers!   Help
        the bee visit each one.  Can you find a way to do it with fewer than 7 blocks?
      level 'grade3_Loops_6_instruction: "How many times can loops help you in this\npuzzle?
        \ \r\n\r\nLoops are your friend! Use a few of them to complete this\npuzzle
        with the fewest blocks possible."
      level 'grade3_Loops_7_instruction: "Those flowers look tasty!\r\n\r\nCollect\nnectar
        from each of the flowers using the fewest blocks possible."
      level 'grade3_Loops_8_instruction: |
        Collect all the nectar and make all of
        the honey using the fewest blocks possible.
      level 'grade3_Loops_9_instruction: |
        Collect nectar from each flower and make
        honey at each honeycomb using the fewest blocks possible.
      level grade3_Loops_2_instruction: |
        This time, use a loop to gather all of the
        nectar.
      Limited Quantity of Blocks Test_instruction: |
        Get me to the pig by adding only
        one block
      love_spring_1_instruction: |
        Let's celebrate Spring!  We have put some seeds
        in the ground to prepare for the season's flowers.  Can you cover them up
        so that the birds don't eat them?
      love_spring_2_instruction: |
        Our flowers are in full bloom!  Now we need the
        bee to grab nectar from each one so he can make plenty of honey back at his
        hive!
      love_spring_3_instruction: "Figure out how to change this code so that Robin\nchooses
        a number between 1 and 20.  \r\n\r\nWhen you're ready, press \"Run\"\nand
        play until you guess Robin's number!"
      Luigi's Pizza 1_instruction: |
        Welcome to Luigi's Pizza! To order a pizza,
        type the name of a topping into the cost function, and we'll return the price
        of that pizza. Try ordering a pepperoni pizza to start.
      Luigi's Pizza 2 (copy 1)_instruction: |
        Right now there are only four choices
        available at Luigi's pizza - let's fix that! Add a couple of new toppings
        to the conditional block in the "cost" function. Once you've added your
        toppings, test out the function to make sure it works.
      Luigi's Pizza 2_instruction: |
        Right now there are only four choices available
        at Luigi's pizza - let's fix that! Add a couple of new toppings to the conditional
        block in the cost function. Once you've added your toppings, test out the
        function to make sure it works.
      Luigi's Pizza 3 (copy 1)_instruction: |
        That's better, everyone loves more
        variety in their pizza toppings! But you still can't please everyone, and
        folks are coming in to order toppings that Luigi doesn't have. Instead of
        saying no to those people, could you update the "else" clause so that we
        charge them a premium for toppings that we don't normally offer?
      Luigi's Pizza 3_instruction: |
        That's better, everyone loves more variety in
        their pizza toppings! But you still can't please everyone, and folks are
        coming in to order toppings that Luigi doesn't have. Instead of saying no
        to those people, could you update the else clause so that we charge them a
        premium for toppings that we don't normally offer? Let's charge $10,000
        for a topping we don't carry.
      Luigi's Pizza 4_instruction: |
        Free Play: What can you do to make Luigi's cost
        function even more useful?
      Middle School Hackathon Pt 1_instruction: "(Click to see full instructions)"
      Middle School Hackathon Pt 2_instruction: "(Click to see full instructions)"
      Mike Pair Programming_instruction: Here are the instructions
      Mike Test Bee Conditionals 1_instruction: |
        This cloud is blocking my view!
        Check to see if there's a flower under the cloud, and only get nectar if
        there's a flower. Be careful, it can change!
      Mike Test Bee Conditionals 2_instruction: |
        Collect all of the nectar. You can
        only collect nectar from flowers, but you can check any space to see if there
        is a flower.
      MikeAssessment1_instruction: Now do it right!
      MikeStar_instruction: Draw this.
      MikeStarHard_instruction: Draw this.
      MikeStarNested_instruction: Draw this.
      MikeTest1_instruction: Who knows what you should do?!?!
      MikeTest2_instruction: Draw something!
      MikeTest3_instruction: Build Something
      MSM Big Game Empty_instruction: |
        All variables and functions are currently
        empty stubs. Each puzzle progression will be focused on defining and handful
        of them, and therefore adding functionality.
      MSM Big Game Vars 1 (copy 1)_instruction: |
        In the Variables toolbox you'll
        see several variables that define how your game characters look, move, and
        interact
      MSM Big Game Vars 1_instruction: |
        In the Variables toolbox you'll see several
        variables that define how your game characters look, move, and interact
      MSM Big Game Vars Backup_instruction: |
        In the Variables toolbox you'll see
        several variables that define how your game characters look, move, and interact
      MSM Defining Vars 1 (copy 1)_instruction: |
        Write a program that produces a
        50 pixel solid green triangle.
      MSM Defining Vars 1_instruction: |
        Write a program that produces a 50 pixel
        solid green triangle.
      MSM Defining Vars 2 (copy 1)_instruction: |
        If we wanted to make fifty green
        triangles, it would be a pain to repeat that block of code 50 times. Let's
        create a variable called "my-shape" and put the code for a 50 pixel solid
        green triangle inside.
      MSM Defining Vars 2_instruction: |
        If we wanted to make fifty green triangles,
        it would be a pain to repeat that block of code 50 times. Let's create a
        variable called my-shape and put the code for a 50 pixel solid green triangle
        inside.
      MSM Defining Vars 3 (copy 1)_instruction: |
        Take your "my-shape" variable
        and use it with this provided code to draw two identical green triangles.
      MSM Defining Vars 3_instruction: |
        Take your my-shape variable and use it with
        this provided code to draw two identical green triangles that are 50 pixels
        in size.
      MSM Defining Vars 4_instruction: |
        Edit your my-shape variable so that it draws
        75 pixel solid red stars.
      MSM Play Lab Butterfly 1_instruction: |
        Help Sam stay on the screen so that
        you can always see at least a little piece of him. Using the arrow keys, see
        how far Sam can go to the left while still staying onscreen. You’ll find that
        Sam is onscreen as long as his x-coordinate is greater than -50. Then, fill
        in the code to make Sam stay on the screen.
      MSM Play Lab Butterfly 2_instruction: |
        Now make Sam stay on the right side
        of the screen. You'll have to experiment to see how far he can go and still
        be partially visible on the screen.
      MSM Play Lab Butterfly 3_instruction: |
        Now, combine your work to make Sam stay
        on both sides of the screen.
      MSM Play Lab Game 2_instruction: |
        Variables can also be used to control the
        speed of players in a game. Set the player speed and the enemy speed and see
        how the movement changes. Speed can be between 2 and 12.
      NetSim Standalone Automatic DNS_instruction: |
        In this version of the Internet
        Simulator, a Domain Name System (DNS) is provided for you and knows the IP
        addresses of all connected computers. Send a message in the form GET [hostname]
        to the DNS service at address <yourRouterNumber>.15 to get a student's address.
      NetSim Standalone Broadcast_instruction: "In this version of the Internet Simulator,\nyou
        can connect to up to 5 other people in a room. When you send messages\nin
        the room, everyone receives them. What are some of the challenges of this\nsystem,
        and how might you solve them?\r\n"
      NetSim Standalone Classroom Routers_instruction: |
        In this version of the Internet
        Simulator, everyone connects to a router and has a specific address. To send
        messages, you have to address your message to the specific address of the
        recipient, and the router will take care of delivering it to the right computer.
        If there are other routers created in your class, ask for the address of one
        of your classmates and send them a message! View the Log Router to see the
        path the messages have taken through the network.
      NetSim Standalone Freeplay_instruction: |
        In this configuration, most of the
        options are turned on, and you can play with them. Have fun!
      NetSim Standalone Manual DNS_instruction: |
        In this version of the simulator
        you can't see the other students' addresses.  Instead, one of you must act
        as a name service, to help share addresses with each other.
      NetSim Standalone Packets TCP_instruction: |
        Messages on the Internet can take
        many paths to get to their destination, and sometimes along the way the message
        gets dropped. In this version of the Internet Simulator, there is a 10% chance
        of a packet being dropped, multiple packets may take different paths to the
        destination, and the default max packet size is set to 6 additional characters.
      NetSim Standalone Routers Addresses_instruction: "For this activity, connect\nto
        a router with the others in your group. Important note: The router will\nonly
        properly route messages where the first 4 bits are the To: address and\nthe
        second 4 bits are the From: address.\r\n\r\n[TODO: NetSim needs to support\nhierarchical
        addresses. For now, level is set up for 4 bit to and from addresses]"
      NetSim Standalone SendAB_instruction: |
        You and your partner share a single
        wire that can only be in state A or state B. You can set the wire to either
        state at any time, and you can read the state of the wire at any time. Can
        you figure out a way to effectively communicate with just this system?
      NetSim Standalone Sending Numbers Ascii_instruction: |
        Now that you've transmitted
        information represented as decimal numbers, you can map those numbers to text
        characters to send text-based information back and forth. With a text-based
        protocol, you can easily represent and communicate all kinds of information.
      NetSim Standalone Sending Numbers_instruction: "You and your partner can now\nreliably
        send messages back and forth without extra coordination! While you're\nalways
        sending bits back and forth, you can also represent those bits as decimal\nnumbers.
        What kinds of information can you represent with this system? \n"
      NetSim_AddressingMessages_instruction: |
        In this version of the simulator, you
        will connect to a Router instead of directly to another student. Enter an
        address in the "To" box to send a message to another student.
      NetSim_AutomaticDNS_instruction: |
        In this version of the simulator a DNS service
        is provided for you. Send a message in the form GET [hostname] to the DNS
        service at address 15 to get a student's address.
      NetSim_ManualDNS_instruction: |
        In this version of the simulator you can't
        see the other students' addresses.  Instead, one of you must act as a name
        service, to help share addresses with each other.
      NetSim_SendAB_instruction: |
        Connect to another student.  Each of you can set
        the value of the wire between you to "A" or "B".  See if you can send
        a complete message!
      NetSim_SendAscii_instruction: |
        In this version of the simulator, you can send
        numbers or ASCII characters to one another, one bit at a time.
      NetSim_SendBits_instruction: |
        Connect to another student.  You can now set
        your wire to "0" or "1".  Send a message to your partner!
      NetSim_SendingABTest_instruction: |
        This is Sarah's test of making a netsim
        level
      NetSim_SendNumbers_instruction: |
        In this version of the simulator, you can
        view the decimal representations of the binary you are sending.
      NetSim_Superuser_instruction: You have loaded NetSim in superuser mode.
      NetSim_Variant1_instruction: |
        NetSim: Variant 1 allows students to manually
        work out the timing of sending bits back and forth.
      NetSim_Variant2_instruction: |
        NetSim: Variant 2: Students connect directly
        to one another and send entire packets back and forth, exploring systems of
        encoding data.
      NetSim_Variant3_instruction: |
        NetSim: Variant 3: Connects groups of 2-6 students
        with a router, and explores issues in routing and DNS
      New Artist Project_instruction: |
        Desenhe algo incrível! Seu código é salvo
        como um projeto e você pode retornar a ele a qualquer momento.
      NEW Course 4 Artist Functions 1_instruction: |
        Você consegue desenhar um quadrado com
        100 pixels de comprimento usando um laço?
      NEW Course 4 Artist Functions 10.1_instruction: |
        Use the functions from the
        previous puzzles to draw this pattern.
      NEW Course 4 Artist Functions 10_instruction: |
        Clique em "editar" para preencher
        os blocos na definição da função para fazer um quadrado de 40 pixels.
      NEW Course 4 Artist Functions 11_instruction: |
        Temos uma nova função chamada
        "desenhe uma linha de quadrados". Fique à vontade para olhar dentro do bloco da função
        para ver como a construímos. Clique em "Executar" quando você estiver pronto para o próximo
        desafio.
      NEW Course 4 Artist Functions 12_instruction: |
        Use a função "desenhe uma linha de quadrados"
        do último desafio para desenhar esse padrão."
      NEW Course 4 Artist Functions 13_instruction: |
        Você consegue desenhar uma forma de estrela usando
        a função "desenhe uma linha de quadrados"? Dica: você pode precisar avançar
        60 pixels e virar 144 graus
      NEW Course 4 Artist Functions 14_instruction: 'Atividade livre! '
      NEW Course 4 Artist Functions 2_instruction: |
        Você consegue desenhar 3 quadrados com 20 pixels de distância
        entre cada um? Dica: cada quadrado tem 100 pixels de tamanho
      NEW Course 4 Artist Functions 3_instruction: |
        Temos aqui um novo tipo de bloco.
        Ele é chamado de "bloco de função". Clique em "Executar" para ver o que ele pode fazer.
      NEW Course 4 Artist Functions 4_instruction: |
        Use a função "desenhe um quadrado"
        para desenhar esse padrão. Dica: você vai precisar usar um bloco "vire 120 graus à direita"
        após cada quadrado.
      NEW Course 4 Artist Functions 5_instruction: |
        Como o bloco "desenhe um quadrado"
        sabia que comandos executar? Clique em "editar" no bloco de função "desenhe um quadrado".
        Os blocos no editor da função são a definição que
        compõe "desenhe um quadrado". Quando você terminar de analisar, clique em "Salvar
        e Fechar" e então em "Executar".
      NEW Course 4 Artist Functions 6_instruction: "Usando o bloco de função \"desenhe
        um quadrado\",\nvocê pode desenhar esta imagem? Dica: cada quadrado está separado
        por 20 pixels.\r\n"
      NEW Course 4 Artist Functions 7_instruction: |
        Você está pegando o jeito de como
        usar os blocos de função? Vamos modificar esse quadrado para que ele tenha 200 pixels
        de tamanho. Dica: clique em "editar" para alterar o tamanho de "desenhe um quadrado"
        no editor da função. Lembre-se de clicar em "Salvar e Fechar" para sair do
        editor da função.
      NEW Course 4 Artist Functions 8_instruction: |
        Demos a você a maior parte do
        código para criar uma função. Contudo, parece que algo está faltando. Você
        consegue editar a definição da função para desenhar o triângulo?
      NEW Course 4 Artist Functions 9_instruction: |
        Qual bloco você precisa adicionar
        para que o triângulo fique em cima do quadrado?
      NEW Course 4 Artist Functions inspire_instruction: "Atividade livre - Inspiração:\nAgora
        você aprendeu tudo o que precisa saber para criar um padrão como esse!\nSe
        essa imagem inspira você, tente fazer algo similar. Caso contrário, crie\nalgo
        você mesmo.\r\n\r\nQuer saber como nosso padrão de inspiração foi\nfeito?
        Visite-nos para ver a solução."
      New Course 4 Artist Functions Level 4_instruction: |
        Use a função "desenhe um quadrado"
        para desenhar esse padrão.
      NEW Course 4 Artist Params 1_instruction: |
        Vamos definir essa função para desenhar
        um quadrado com lados de 50 pixels. Clique em "editar" para começar.
      NEW Course 4 Artist Params 10_instruction: |
        Crie um bloco de função "desenhe um hexágono"
        com um parâmetro comprimento. Dica: esse hexágono tem 100 pixels de tamanho.
      NEW Course 4 Artist Params 11_instruction: |
        Você consegue descobrir como desenhar
        essa forma? Edite a função para usar o parâmetro "lados".
      NEW Course 4 Artist Params 12_instruction: |
        Você consegue completar esse desenho?
        Os lados de todas as formas têm 100 pixels de comprimento.
      NEW Course 4 Artist Params 12a_instruction: |
        Esta imagem é semelhante à anterior.
        Você consegue usar um "laço para" com sua função para criar deste design?
      NEW Course 4 Artist Params 13_instruction: |
        Vamos editar essa função "desenhe uma forma".
        Ela já tem um parâmetro "comprimento". Agora, vamos editar a função
        para adicionar também um parâmetro "lados". Lembre-se de que o ângulo para virar para uma
        determinada forma é 360 dividido pelos lados que ela tem. Dica: os comprimentos de cada forma
        são: o triângulo tem 100 pixels, o hexágono tem 25 pixels e o quadrado tem 50 pixels.
      NEW Course 4 Artist Params 14_instruction: |
        Você consegue recriar essas formas?
        Arraste o parâmetro "comprimento" para dentro da definição da função.
      NEW Course 4 Artist Params 15_instruction: |
        Atividade livre: aqui estão as funções
        que você escreveu e mais algumas com as quais você pode brincar. Desenhe alguma coisa incrível!
      NEW Course 4 Artist Params 2_instruction: |
        Crie uma função "desenhe um triângulo
        com lados de 50 pixels" desde o início
      NEW Course 4 Artist Params 3_instruction: "Agora, vamos usar a função para desenhar\n3
        triângulos do último desafio em uma linha. Dica: cada triângulo está separado
        por\n50 pixels.\r\n"
      NEW Course 4 Artist Params 4_instruction: |
        Você percebe algo diferente
        sobre esses blocos de função? Clique em "Executar" para ver o que acontece.
      NEW Course 4 Artist Params 5_instruction: |
        Preencha o ??? no bloco de entrada
        do parâmetro comprimento. Dica: o tamanho do pentágono é de 100 pixels.
      NEW Course 4 Artist Params 6_instruction: |
        Preencha o parâmetro "comprimento"
        para desenhar essa formas substituindo o "???" pelos números corretos. O
        quadrado e o triângulo têm tamanho de 100 pixels, enquanto o hexágono tem tamanho de
        75 pixels.
      NEW Course 4 Artist Params 7_instruction: |
        Você consegue completar este desenho? Dica:
        cada triângulo é 25 pixels maior que o anterior. O primeiro triângulo tem 25
        pixels.
      NEW Course 4 Artist Params 8_instruction: |
        O código da função deste triângulo
        está corrompido. Você consegue editar a função para corrigi-lo e criar triângulos
        de 25, 50 e 75 pixels de comprimento?
      NEW Course 4 Artist Params 9_instruction: |
        Clique em "editar" para preencher a definição
        da função "desenhe um quadrado" e adicionar um parâmetro. Ela deve receber um parâmetro
        comprimento, como no triângulo. Dessa vez, desenhe 3 quadrados: 25, 50 e 75
        pixels de comprimento e separados por 100 pixels cada.
      NEW Course 4 Artist Params inspire_instruction: "Atividade livre - Inspiração:
        agora você\naprendeu tudo o que precisa saber para criar um padrão como esse!
        Se essa\nimagem inspira você, tente fazer algo similar. Caso contrário, crie
        algo\nvocê mesmo.\r\n \r\nQuer saber como nosso padrão de inspiração foi feito?
        Acesse\nhttps://studio.code.org/c/106387530 para ver a solução."
      NEW Course 4 Artist Vars 1.5_instruction: |
        Dê uma olhada no código. Você consegue
        ver como o bloco "defina o comprimento" e o bloco "comprimento" funcionam juntos? Clique
        em "Executar" para vê-los em ação.
      NEW Course 4 Artist Vars 12_instruction: |
        Modifique esse algoritmo para que ele use
        a variável "lados" ao invés de um número fixo para desenhar um pentágono. Substitua
        o número 5 pela variável "lados" e use o bloco "defina lados para".
      NEW Course 4 Artist Vars 2.5_instruction: |
        Dê uma olhada no código. Você consegue
        ver como o bloco "defina o comprimento" e o bloco "comprimento" funcionam juntos? Clique
        em "Executar" para vê-los em ação.
      NEW Course 4 Artist Vars 2_instruction: |
        Arraste um bloco numérico para o bloco "defina o comprimento"
        para desenhar um conjunto de triângulos de 50 pixels.
      NEW Course 4 Artist Vars 4 5_instruction: |
        Belo trabalho no último desafio,
        vamos tentar novamente. Desta vez, vamos fazer esse design bacana com hexágonos
        de 60 pixels.
      NEW Course 4 Artist Vars 4_instruction: |
        Vamos tentar novamente. Agora, vamos fazer
        esse design bacana com hexágonos de 60 pixels.
      NEW Course 4 Artist Vars 6_instruction: |
        Você pode me ajudar a desenhar esse padrão
        colocando o bloco da variável "comprimento" nos lugares corretos?
      NEW Course 4 Bee For Loops 1_instruction: |
        Use um laço para coletar o néctar
        de cada flor.
      NEW Course 4 Bee For Loops 10_instruction: |
        Use a variável "contador" do seu laço "para"
        para controlar a distância do movimento horizontal.
      NEW Course 4 Bee For Loops 10a_instruction: 'Pronto para um desafio?  Pegue
        o que aprendeu sobre loops e tenta resolver este problema. Lembre-se: Você
        pode ter que executar sua solução várias vezes antes de conseguir descobrir
        todas as etapas.'
      NEW Course 4 Bee For Loops 11_instruction: |
        Você pode usar a variável do laço para
        controlar o movimento e a coleta de néctar?
      NEW Course 4 Bee For Loops 2_instruction: |
        Adicione o código necessário para garantir que
        a abelha colete todo o néctar. Olhe quanto código você precisa para esse desafio!
        (Vamos aprender uma maneira mais simples no próximo desafio).
      NEW Course 4 Bee For Loops 3_instruction: |
        Ah, o laço para torna isso muito mais
        fácil! Todo o código que você precisa está lá, dê uma olhada em como ele é feito
        e então clique em "Executar" para ver como ele funciona.
      NEW Course 4 Bee For Loops 4 4_instruction: |
        Você pode ajudar a abelha a coletar o
        resto do mel usando esse laço para?
      NEW Course 4 Bee For Loops 4_instruction: |
        Substitua o ??? no laço "para"
        pela maior quantidade de néctar que a abelha tem que coletar.
      NEW Course 4 Bee For Loops 5 5_instruction: |
        Você está pegando o jeito de como usar
        o laço para? Vamos ajudar a abelha a obter o resto do néctar.
      NEW Course 4 Bee For Loops 5_instruction: |
        Você também pode usar um laço "para" para fazer contagem
        regressiva. Tente coletar esse néctar fazendo uma contagem regressiva de 5 até 1, de 1 em 1.
      NEW Course 4 Bee For Loops 6_instruction: |
        O último número em seu laço para é
        chamado de "incremento" e a cada execução do laço a variável contador
        é alterada de acordo com o incremento. Tente coletar essas flores usando um incremento
        de 2.
      NEW Course 4 Bee For Loops 7_instruction: |
        Você está pegando o jeito dos laços para?
        Isso é parecido com o último desafio, mas você precisa coletar 2, 4, 6, 8 e 10 néctares.
        O código inicial foi fornecido, exceto pelos números nos laços contadores.
        Vamos coletar um pouco de néctar!
      NEW Course 4 Bee For Loops 8_instruction: "Se seu laço está contando, o\nincremento
        é somado à variável contador a cada repetição. Qual deve ser seu incremento\npara
        coletar 3, 6 e 9 néctares?\r\n"
      NEW Course 4 Bee For Loops 9_instruction: |
        Se seu laço está fazendo contagem regressiva, o
        incremento é subtraído da sua variável contador a cada repetição. Qual deve ser
        seu incremento para coletar 9, então 6, e então 3 néctares?
      NEW Course 4 Bee For Loops 95_instruction: |
        Dê uma olhada em cada parte do
        "laço para" que você acabou de criar. Você consegue descobrir quais números
        você precisa dobrar para resolver esse desafio? Por que isso funciona?
      NEW Course 4 Play Lab Params 11_instruction: |
        É hora da atividade livre! Divirta-se
        com todos os blocos da sua caixa de ferramentas.
      NEW Course 4 Play Lab Params 5 5_instruction: |
        Preencha as entradas de parâmetro
        dos personagens com números (1, 2 e 3) para fazer com que esses personagens patrulhem.
      NEW Course 4 Play Lab Vars 4 5_instruction: |
        "O que você acha que esse código vai
        fazer? Pressione "Executar" para ver o que acontece".
      NEW Course 4 Play Labs For Loops 7a_instruction: |
        Usando o que você aprendeu até
        agora, você consegue fazer o dinossauro dar um passo à frente toda vez que o pinguim contar?
      NEW Course 4 Play Labs For Loops 8 Free Play_instruction: |
        É hora da atividade livre,
        divirta-se com todos os blocos da sua caixa de ferramentas.
      NEW Course 4 Play Labs For Loops 8a_instruction: "Desafio: como você\nusaria
        o \"laço para\" para fazer cada ator andar e dizer seu número de ator,\ne
        então sumir da tela? \n"
      Ninjacat Demo B (copy 1)_instruction: "\r\nLet’s begin by exploring a simple\nvideogame,
        and then figuring out how it works. You can use the arrow keys\nto move the
        ninja left, right and jump - try to catch the unicorn and avoid\nthe dragon!\r\n\r\n\r\n\r\n
        \ \r\n\r\n"
      Ninjacat Demo B_instruction: |
        Let’s begin by exploring a simple videogame,
        and then figuring out how it works. You can use the arrow keys to move the
        ninja up and down - try to catch the unicorn and avoid the dragon! When you
        think you've figured out how the game works, click "Finish"
      Ninjacat Demo No Animate_instruction: |
        Let’s begin by exploring a simple videogame,
        and then figuring out how it works. You can use the arrow keys to move the
        ninja up and down - try to catch the unicorn and avoid the dragon! When you
        think you've figured out how the game works, click "Finish"
      October15 bat_instruction: "Freeplay: Here are some functions to play with.
        \ Can\nyou draw a bat?\r\n"
      October15 ghost 1_instruction: |
        Give the ghost eyes, using the "draw a circle"
        function.
      October15 JoL 1_instruction: |
        Program the artist to design a face for your
        jack-o-lantern!
      October15 pumpkin 1_instruction: |
        Finish this jack-o-lantern by drawing the
        eyes and nose in any style you would like.
      October15 stars 1_instruction: |
        Use loops and the "random integer" block
        to fill the night sky with stars of different shapes and sizes.
      Overworld Avoid Monsters_instruction: Esbarrar num Creeper é má ideia. Desvia-te
        cuidadosamente dos Creepers e põe-te em segurança em casa.
      Overworld Chop Tree - allthethings_instruction: |
        Wood is a very important resource.
        Many things are made from it. Walk to the tree and use the “destroy block”
        command to chop it down.
      Overworld Chop Tree_instruction: A madeira é um recurso muito importante. Fazem-se
        muitas coisas com ela. Aproxima-te de uma árvore e utiliza o comando "destruir
        bloco" para a cortares.
      Overworld Chop Trees_instruction: Temos de construir uma casa antes que o sol
        se ponha. As casas precisam de muita madeira. Abate todas as 3 árvores.
      Overworld Free Play 20x20_instruction: 'Parabéns! Completaste todos os nossos
        quebra-cabeças! Agora escava, constrói e cria algo único, utilizando tudo
        o que aprendeste até agora. '
      Overworld Free Play_instruction: Esta paisagem é para tu brincares. Tu é que
        escolhes o que vais construir.
      Overworld House Frame - A_instruction: Vamos fazer a nossa própria casa! Este
        sítio parece bom. Construa uma moldura nos blocos de terra.
      Overworld House Frame - C_instruction: Vamos fazer a nossa própria casa! Este
        sítio parece bom. Construa uma moldura nos blocos de terra.
      Overworld House Frame B_instruction: Uma parede está terminada, vamos construir
        o resto da casa seguindo a sua planta! Vai precisar de se repetir bastante
        aqui.
      Overworld House Frame B2_instruction: Uma parede está terminada, vamos construir
        o resto da casa seguindo a sua planta! Vai precisar de se repetir bastante
        aqui.
      Overworld House Frame C_instruction: Uma parede está terminada, vamos construir
        o resto da casa seguindo a sua planta! Vai precisar de se repetir bastante
        aqui.
      Overworld House Frame Chosen_instruction: Construa o resto da casa de qualquer
        material que goste. O comando "repetir" vai dar jeito.
      Overworld House Frame_instruction: 'Vamos construir a nossa casa! Este lugar
        parece bom. Constrói uma estrutura nos blocos de terra. '
      Overworld Minecart Track_instruction: Voltaste à superfície com montes de recursos
        do subsolo. Agora vamos construir uma pista ao longo do caminho de terra que
        sai da tua casa. O primeiro passo é limpar o caminho de obstáculos. Segue
        o caminho e elimina as árvores.
      Overworld Move to Sheep_instruction: Adiciona um segundo comando "mover para
        a frente" para chegares às ovelhas.
      Overworld Place Wall_instruction: Cada casa começa com uma parede. Constrói
        a primeira parte da tua casa encaixando os comandos "colocar" e "mover para
        a frente" no interior da sequência de repetição.
      Overworld Plant Crops_instruction: "É bom fazer planos para o futuro. Planta
        plantações nos dois lados da água para não teres fome mais tarde."
      Overworld Powered Minecart_instruction: Bom trabalho! Recolheste imensos recursos
        e construíste uma casa modesta. Agora dispõe carris da orla do mapa até à
        porta da tua casa.
      Overworld Shear Sheep_instruction: Está na hora de tosquiar ovelhas! Utiliza
        o comando "tosquiar" para recolheres lã das duas ovelhas.
      Pattern Bee 1_instruction: |
        What a strange field of goodies! I wonder if there's
        a pattern here...
      PDAlg 13-16 Sam Extension Puzzle_instruction: |
        Add a second parameter to "onscreen?"
        for Sam's y coordinate and update the function so it keeps him safe on all
        four sides.
      PDAlg 17-20 Luigi Extension Puzzle_instruction: |
        Without modifying your existing
        "cost" function, create a new "coupon" function that takes a pizza topping
        and coupon code and returns the cost of a pizza with that topping. If the
        coupon code is correct (you get to decide what it is), apply a 30% discount
        to the pizza.
      PDAlg 8-12 ex dr 1_instruction: |
        The definition in this Design Recipe doesn't
        match both examples. Test each example to see which is failing, and then fix
        the definition to match.
      PDAlg 8-12 ex dr 2_instruction: |
        This student has created two examples for
        the function "apples" but something's not quite right. How would you direct
        this student to correct their mistake?
      PDAlg 8-12 Rocket Height Puzzle_instruction: |
        Let's write a "rocket-height"
        function with simple acceleration. Write a function that ensures the rocket
        is at 15 meters at 1 second, 45 meters at 2 seconds, 95 at 3 seconds, and
        165 at 4 seconds.
      PDAlg Big Game History_instruction: |
        Now that you've played through a Big
        Game level you should see a new entry in your history. Click the Version History
        button and you should see at least one version. Each time you go back to a
        Big Game level you'll get a new record in your version history that you can
        revert back to.
      PDAlg Big Game Remix_instruction: "Here's your Big Game as you last left it.\nTry
        clicking the Remix button to spin off a new remix of your project.\r\n\r\nAny\nchanges
        you make after you click Remix will be saved on your new remix and\nnot on
        your main Big Game."
      PDAlg Design Recipe Delete_instruction: |
        Click the delete button to get rid
        of this function, then try creating and deleting a few of your own.
      PDAlg Design Recipe Examples_instruction: |
        The definition in this Design Recipe
        doesn't match both examples. Test each example to see which is failing, and
        then fix the definition to match.
      PDAlg Design Recipe Required_instruction: |
        Complete the Design Recipe for the
        "eggs" function, making sure to create and test your examples.
      PDAlg Updates Cond_instruction: |
        When you went to PD in the summer, the Conditional
        block that you were introduced to was black and allowed any data type to be
        used. This proved to be confusing, given that every other function we've
        seen always produces the same type of data. To help make conditionals clearer
        and more consistent we've replaced the single black block with a separate
        block for each data type.
      PDAlg Updates Errors_instruction: |
        Run the provided program and use the error
        messages to try and track down the bugs.
      PDAlg Updates Space_instruction: |
        Making use of limited programming space (especially
        on small screens) is challenging with a block based language. To help with
        this we've added a few features. Experiment with this provided code to see
        how the space can be manipulated to deal with larger programs.
      PDK5 Conditionals 1_instruction: |
        Purple flowers may have either 1 or 0 nectar,
        but you don't know which one! Be careful not to collect nectar from a purple
        flower if it doesn't have any. Check if the nectar is equal to 1 by using
        the if block.
      PDK5 Conditionals 2_instruction: "Try this puzzle that uses conditionals and\nloops
        together. Use the \"if\" block to decide when to turn. Hint: you only\nneed
        one more block to complete this puzzle. \n"
      PDK5 Events 1_instruction: "So far all of the programs we've written are executed\nin
        order from top to bottom. In this puzzle, we'll use \"Events\" to respond\nto
        an action on demand. Make the octopus say \"Hello\" only when you click\non
        the Octopus. \n"
      PDK5 Functions 1_instruction: |
        Hello. Me zombie artist. Me love drawing! Help
        me draw the square glasses.  Hint:  the bridge between the glasses is 25 pixels
        shorter than the square length.
      PDK5 Functions 2_instruction: |
        As funções permitem que você defina novos blocos! Movemos
        os blocos para desenhar um quadrado para dentro de uma função chamada "desenhe um quadrado".
        Você consegue usar a função "desenhe um quadrado" para criar os óculos? Os quadrados são separados
        por 75 pixels.
      PDK5 Loops 1_instruction: "Instead of using 5 \"move forward\" blocks, use\nthe
        \"repeat\" block with a \"move forward\" block inside of it. In computer\nscience,
        this is called a \"loop.\" \n"
      PDK5 Loops 3_instruction: |
        Here's another puzzle to practice loops. What happens
        if you use the repeat block to run the code already provided on the workspace
        4 times?
      Pixelation - Lesson 14 - Fix bit offset v.2_instruction: |
        Something happened
        to the bits in this image! Find the error and fix it! Hint: a few extra bits
        were added. You should only need to remove some bits.
      Pixelation - Lesson 14 - Fix bit offset_instruction: |
        A single extra bit was
        inserted into the stream of bits that make up the C of the Code.org logo.
        That extra bit bumps all of the other bits down the line which makes the logo
        look messed up. Hunt down the extra bit and remove it to fix the Code.org
        logo.
      Pixelation - Lesson 14 - Fix the error_instruction: |
        Something happened to
        the bits in this image!  Find error and fix it!  Hint: a few extra bits were
        added.  You should only need to remove some bits.
      Pixelation - Lesson 14 - Make the Letter A_instruction: |
        Make a 3x5 letter
        'A'. The widget is setup with the incorrect dimensions. Your first task
        is to set the second byte to the 8-bit binary code for 5: 0000 0101. Then
        start entering pixel data.
      Pixelation - Lesson 14 - Make your own B and W Image_instruction: |
        Now make
        your own image! We've started you off with a 10x10 canvas but you can make
        it whatever size you want. Happy pixeling!
      Pixelation - Lesson 14 - Make your own B&W Image_instruction: |
        Now make your
        own image! We've started you off with a 10x10 canvas but you can make it
        whatever size you want.  Happy pixeling!
      Pixelation - Lesson 15 - Color Free Play_instruction: |
        Requirements: The icon
        must be 16x16 pixels. You must use the Pixelation Widget to encode the bits
        of color information. The image must be encoded with at least 12 bits per
        pixel.
      Pixelation - Lesson 15 - Color Shades 4x4_instruction: |
        We start you out with
        the 4x4 image Maddie created in the video. Your task is to fill a 4x4 grid
        with colors using 12-bits per pixel. Here are the requirements: Row 1 - fill
        with shades of red. Row 2 - shades of green. Row 3 - shades of blue. Row 4
        - shades of gray.
      Pixelation - Lesson 15 - Color Shades_instruction: |
        We start you out with the
        row of shades of red that Maddie created in the video. Experiment with 6-bit
        color by filling in the bottom row of the image with shades of a different
        color. Here is an example with some shades of blue. Try your own color!
      Pixelation - Lesson 15 - Complete 3-bit color_instruction: |
        We start you with
        the 4x2 image Maddie was creating, but we've left out the last two squares.
        Finish off the image by figuring out which two colors are missing and encode
        them.
      Pixelation 2_instruction: |
        Something happened to the bits in this image!  Find
        error and fix it!
      Pixelation 4x4 Empty_instruction: |
        The width and height are now encoded in
        the pixel data. Can you figure out how to adjust the dimensions?
      Pixelation Bee_instruction: |
        This larger image of a bee encodes color with
        12 bits per pixel, but viewing in hex makes it easier to see the color of
        each pixel. If you switch to binary mode - hold on to your hat - it's a lot
        of bits. Here's another mind-blowing thing to try: slide the bits per pixel
        up to 24 bits per pixel. What happens? Can you explain this behavior?
      Pixelation Flappy_instruction: |
        Here is a bigger image at 9 bits per pixel.
        With 9 bits per pixel you can express 512 different colors. Click through
        to see the next image which is even more sophisticated, but easier to understand.
      Pizza on a Plate_instruction: |
        Project Idea: Create a picture of something
        familiar from the real world. This requires persistence and planning!
      Planning Farmer_instruction: |
        What a strange field of goodies! I wonder if
        there's a pattern here...
      Play Lab Rocket 1_instruction: |
        A rocket blasts off, traveling at 15 meters
        per second... press "Run" to see how this word problem looks as an animation.
      Play Lab Rocket 2_instruction: |
        We've started the Design Recipe for rocket-height
        using the contract and examples you just wrote. Complete the function definition
        for rocket-height and run your animation.
      Play Lab Rocket 2B_instruction: |
        A rocket blasts off, traveling at 15 meters
        per second. Using the Design Recipe, write a function called rocket-height
        that takes in a number of  seconds that have passed since the rocket took
        off, and produces the height of the rocket at that time.
      Play Lab Rocket 3_instruction: |
        Awesome, now can you update that function so
        that our rocket moves more quickly? Make sure to update the purpose statement,
        examples, and function definition to launch a rocket at 40 meters per second.
      Play Lab Rocket 4 (copy 1)_instruction: |
        Real rockets start off slowly and
        gain speed over time - let's make ours do the same! Write an exponential
        function that describes a rocket that travels at "seconds" squared meters
        per second.
      Play Lab Rocket 4_instruction: |
        Real rockets start off slowly and gain speed
        over time - so let's add some simple acceleration to ours! Can you write
        a function that describes a rocket that is at 10 meters at 1 second, 40 meters
        at 2 seconds, 90 meters at 3 seconds, 160 at 4 seconds and so on?
      Play Lab Rocket 5_instruction: |
        Much better, but let's write one more function
        with simple acceleration. This time the rocket should be 15 meters at 1 second,
        45 meters at 2 seconds, 95 at 3 seconds, and 165 at 4 seconds.
      Play Lab Rocket Free Play_instruction: |
        Free Play: Experiment with your rocket-height
        function to make the rocket fly in different ways. Click "Finish" when you
        are done.
      playEventsK1_instruction: |
        This game is called "Play Lab".  See if you can
        figure out what each block does.
      playEventsK2_instruction: "Jorge wants to say \"Hi there.\"\r\n\r\nCan you\nhelp?"
      playEventsK3_instruction: |
        Jorge wants to be scratched behind the ears!  Can
        you make it so that when you click Jorge he is happy?
      playEventsK4_instruction: |
        Can you make it so that Jorge the dog chases Robin
        the bird when you click the up arrow?
      playEventsK5_instruction: |
        Now add code so that Robin flies away when you click
        the forward arrow.
      playEventsK6_instruction: |
        Have Robin talk back to Jorge when you click on
        her.
      playEventsK7_instruction: What else can you do in this fun scene?
      Poorva copy U3L2 Using Simple Commands_instruction: |
        Draw a 1x1 square above
        and to the left of the turtle's starting position. Click to see full instructions.
      Poorva-test_instruction: |
        Here are regular instructions for a level. There
        is nothing fancy going on here.
      Prompt Test_instruction: |
        Build whatever you want. This is an example of a
        number-guessing game!
      PS copy 2-3 Bee Conditionals 5_instruction: "Be careful not to collect nectar\nfrom
        a purple flower if it doesn't have any. \r\nYou must first check if\nthe nectar
        is equal to 1 using the `if nectar` block."
      PS FR test 7-25_instruction: 'Here are your instructions for this free response.  '
      PS Log test - Define and use turnAround_instruction: |
        Define a function called
        turnAround. Call the function and then move the turtle forward. (Click to
        see full instructions)
      PS predictive Applab level test_instruction: 'Here are some instructions. '
      Quantum Bee - Ryan_instruction: |
        These clouds are bugging me! Some of the clouds
        have flowers inside, and some don't. I should check each cloud, and only
        get nectar from the flowers.
      Quantum Bee_instruction: |
        Purple flowers may have either 1 or 0 nectar, but
        you don't know which one! Be careful not to collect nectar from a purple
        flower if it doesn't have any. Check if the nectar is equal to 1 by using
        the if block.
      Rocket Height Course A_instruction: |
        Follow the Design Recipe to create a function
        rocket-height.
      Ryan - 4-5 Bee Conditionals 2_instruction: A abelha só quer néctar agora. Nem
        todos os objetos são flores, portanto procura debaixo de cada nuvem para ver
        se ela esconde uma. Se estiver, então podes recolher o néctar.
      Ryan - Bee Conditionals_instruction: |
        The bee only wants nectar right now.
        Not all objects are flowers, so check underneath EVERY CLOUD to see if it
        is hiding a flower. If it is, then you can gather nectar.
      Ryan Doily Step 1_instruction: |
        Now we're going to draw a doily step by step.
        First, draw a square.
      Ryan Doily Step 2_instruction: |
        Now you need to turn and repeat it 20 times!
        How many degrees do you turn to get 360 after 20 iterations?
      Ryan Doily Step 3_instruction: |
        Now you need to turn and repeat it 20 times!
        How many degrees do you turn to get 360 after 20 iterations?
      Ryan Test Locked Blocks_instruction: |
        Aqui temos uma função chamada "patrulhe".
        Edite-a para mover o gato 400 pixels para cima, e então 400 pixels para baixo.
      Ryan's clone of C4S15P10_instruction: "We've added one last function for you.\n\r\n\r\nUse
        an \"if\" statement to program your game to call the \"level_up\"\nfunction
        only when \"player_score\" becomes greater than a certain number.\r\n\r\nFor\nexample:
        \"player_score\" > 6\r\n\r\nPlay the game, and make it past level\n4 to move
        to the next puzzle. "
      Sam the Butterfly 1 (copy 1)_instruction: |
        This butterfly is named Sam, and
        the game area is Sam’s yard. Sam's yard is 400 pixels wide by 400 pixels
        tall! As you can see, Sam is free to walk around the yard, and the coordinates
        at the top of the screen update to tell you his location. Use the arrow keys
        to move sam around his yard. Help Sam collect all of the flags to move on.
      Sam the Butterfly 1_instruction: |
        This bat is named Sam, and the game area
        is Sam’s yard. Sam's yard is 400 pixels wide by 400 pixels tall! As you can
        see, Sam is free to walk around the yard, and the coordinates at the top of
        the screen update to tell you his location. Click "Run" and then use the
        arrow keys to move Sam around his yard, making note of Sam's coordinates
        at different locations. Click "Finish" when you're ready to move on.
      Sam the Butterfly 2_instruction: |
        Sam's mom wants to make sure that she can
        always see at least a bit of him, so lets write some functions that help make
        sure he doesn't go too far out of the yard. Here's a function called safe-left?
        - it should take a Number for its domain that represents Sam's x-coordinates
        and return true if he's completely visible on screen. If your function works,
        Sam shouldn't be able to leave the yard from the left side.
      Sam the Butterfly 3_instruction: |
        In the last puzzle we kept Sam from leaving
        on the left, now let's do the same thing on the right. Complete the safe-right?
        function to make sure Sam can't go off the right side of the screen.
      Sam the Butterfly 4_instruction: |
        Huh, we can keep Sam from leaving on the
        left, or we can keep him from leaving on the right, but how can we keep him
        safe from leaving both directions? Try using the and block to program the
        function on-screen? to check if Sam is safe-left? and safe-right?
      Sam the Butterfly 5_instruction: |
        Free Play: Awesome, we've kept Sam safe
        on the left and right! Use this free play stage to experiment with your functions
        and further improve onscreen?
      Sam the Butterfly 6_instruction: |
        We've added a new parameter "y" to the
        "on-screen?" function. Update the function so that it checks that "safe-left?"
        AND "safe-right?" AND "safe-up?" are all true. When you've fixed the
        function, try going out of the yard from the left, right, and top sides.
      Sam the Butterfly 7_instruction: |
        Only one last direction to worry about! Create
        a "safe-down?" function and update the "on-screen?" function so that it
        checks up, down, left, and right.
      Sam the Butterfly Complete_instruction: |
        Only one last direction to worry about!
        Create a "safe-down?" function and update the "on-screen?" function so
        that it checks up, down, left, and right.
      sample1_instruction: "Our adventurer wants to collect coins.  But she can only\nuse
        4 blocks to get them.\r\n\r\nCan you help her grab as many as she can\nusing
        just 4 blocks?"
      sample10_instruction: Now you can use loops to draw whatever you like!
      sample10a_instruction: "You have helped the adventurer and her bee!  As a reward,\nplease
        stay and play around in my magical village. \r\n\r\nYou should have\neverything
        you need to create a game of your own."
      sample2_instruction: |
        Use what you've learned to help bee gather all of this
        honey using only the blocks that you have here.
      sample2a_instruction: |
        Use what you've learned to help bee gather all of this
        honey using only 4 blocks.
      sample3_instruction: |
        Now you can help bee make all of the honey using just
        the blocks in the toolbox.
      sample3assessment_instruction: |
        Can you figure out how to gather all of this
        nectar in just one try?
      sample4_instruction: "Our adventurer has found a stash of coins in this cave.\r\n\r\nCan\nyou
        help her grab as many as she can using just 7 blocks?"
      sample5_instruction: Help bee make all of the honey.
      sample6_instruction: 'Challenge: Help bee make all of the honey.'
      sample7assessment_instruction: |
        Can you help bee make all of the honey in just
        one try?
      sample8_instruction: |
        Look at this trove of coins! How many can you get the
        adventurer to grab?
      sample9_instruction: |
        Use loops to help the artist connect all of the dots.
      sample9a_instruction: |
        The wizard has found his potions!  Use everything you
        have learned to help him collect them.
      scrat 16 (copy 1)_instruction: |
        Acorn! Acorn! Acorn! Use an "if" block to
        get me there with the fewest number of blocks.
      scrat 16_instruction: |
        Bolota! Bolota! Bolota! Use um bloco "se" para me levar até lá
        com o menor número de blocos.
      scrat 17 (copy 1)_instruction: |
        Ok, let's do that again for practice - this
        isn't very different, but watch out for the <insert obstacle name for Scrat>!
      scrat 17_instruction: |
        Ok, vamos fazer novamente para pegar a prática - este não é
        muito diferente, mas cuidado com a parede!
      scrat 18 (copy 1)_instruction: |
        The "If-else" blocks checks a condition,
        and then does one thing OR another. To get me to the acorn try to use this
        new block.
      scrat 18_instruction: |
        Os blocos "se-senão" verificam uma condição e, em seguida,
        fazem uma coisa OU outra. Para que eu chegue até a bolota, tente usar este novo bloco.
      scrat 19 (copy 1)_instruction: |
        One more practice of the "if-else" block,
        can you get it right on your first try?
      scrat 19_instruction: |
        Vamos praticar o uso do bloco "se-senão" mais uma vez. Você consegue
        acertar na primeira tentativa?
      scrat 20_instruction: Podes adicionar mais 3 blocos para me ajudares a resolver
        um labirinto mais complicado? Se o fizeres bem, eu consigo andar qualquer
        caminho com curvas, não interessa o comprimento.  Despacha-te! O gelo está
        a derreter!
      SpecialFrozenLevel_instruction: |
        Você se tornou oficialmente um artista mestre!
        Crie um país das maravilhas de gelo.
      Standalone_Artist_1_instruction: |
        Bem-vindo ao Artista! Primeiro, vamos tentar
        fazer um quadrado simples usando os blocos "vire à direita" e "avance".
        Cada lado deve medir 100 pixels.
      Standalone_Artist_2_instruction: |
        Desenhe esse diamante com ângulos de 120 e 60
        graus e lados de 150 pixels de comprimento.
      Standalone_Artist_3_instruction: |
        Você consegue desenhar este hexágono com lados de
        100 pixels e ângulos de 60 graus?
      Standalone_Artist_4_instruction: |
        Agora você tem um novo bloco para brincar,
        o laço. Ele vai repetir um conjunto de comandos. O que acontece se você repetir esses
        comandos 6 vezes?
      Standalone_Artist_5.5_instruction: |
        Observe como simplificamos o código do diamante,
        transformando-o em um laço. Você pode repetir toda a sequência 12 vezes para desenhar
        a flor. Dica: você terá que virar 30 graus depois do laço do seu diamante
        para não continuar desenhando o mesmo diamante todas as vezes.
      Standalone_Artist_5_instruction: |
        Quantas vezes você precisa repetir esse diamante
        para desenhar a flor?
      Standalone_Artist_6_instruction: |
        Repita esse código do hexágono 6 vezes para criar
        o design. Quantos graus você precisa virar a cada vez? Dica: divida
        o número de graus em um círculo pelo número de vezes que você está repetindo.
      Standalone_Artist_7_instruction: |
        Uma função é mais uma ferramenta de programação para que
        você não tenha que repetir as mesmas ações. Essa função desenha uma flor, então
        você pode usá-la sempre que quiser desenhar uma flor. Use-a juntamente com o novo bloco
        "pule" para desenhar essas flores. Dica: as flores são separadas por 150 pixels
      Standalone_Artist_8_instruction: |
        Temos aqui uma função chamada "Desenhe uma forma",
        que programamos para desenhar hexágonos. Execute o código para ver o que ele faz e,
        em seguida, tente usá-lo com a função para ver o que acontece. Você consegue fazer
        com que ela desenhe um padrão de quadrados, triângulos ou octógonos?
      Standalone_Artist_9_instruction: |
        Agora vá em frente e faça a imagem que
        quiser! Você tem até uma função vazia para usar para fazer o que
        quiser!
      Standalone_Artist_v2_instruction: |
        Bem-vindo ao Artista! Primeiro, vamos tentar
        fazer um quadrado simples usando os blocos "vire à direita" e "avance".
        Cada lado deve medir 100 pixels.
      StepIntro_instruction: Here's how to use the "Step" button.
      template test_instruction: what up
      Test Play Lab_instruction: This is a test play lab level.
      test_sarah_instruction: hi
      testArtistForTestK_instruction: |
        The Artist is trying to draw a line five times,
        but can't get it right.  Can you help?
      Testing Quantum Farmer_instruction: "Wow, look at that! \r\n\r\nI don't know\nhow
        many shovelfuls of dirt this hole needs.  \r\nCan you write a program\nthat
        keeps using the `fill` block until the ground is even?  "
      Text Compression 1_instruction: |
        Look for patterns (repeated words or phrases)
        in the text. Enter the patterns you see into the dictionary on the right.
        As you type entries into the dictionary, the symbol for the entry is inserted
        into the text in place of the pattern.
      The Vigenere Cipher Widget_instruction: Instruções
      The Vigenere Cipher_instruction: Instruções
      Total Artist Clone Me_instruction: |
        Freeplay: Here are the functions you've
        written, and some more for you to play with. Draw something awesome! Play
        with the pen width to see how different your drawings look!
      U1L10 NetSim numbers with decimal_instruction: |
        Invent and test a protocol
        for encoding and sending text messages. Your protocol must include the letters
        a-z, spaces, and common punctuation marks. You may add additional characters
        if you wish. See the worksheet handed out by your teacher for more detailed
        instructions!
      U1L11 NetSim numbers with Ascii_instruction: |
        Work with a partner or in a small
        team to develop a protocol that allows you to send formatted text. See the
        worksheet handed out by your teacher for more detailed instructions!
      U1L13 Text Compression_instruction: |
        Look for patterns (repeated words or phrases)
        in the text. Enter the patterns you see into the dictionary on the right.
        As you type entries into the dictionary, the symbol for the entry is inserted
        into the text in place of the pattern.
      U1L4 NetSim SendAB_instruction: "Develop, document, and test a protocol that\nallows
        you to use Internet Simulator to relay a message. See the worksheet\nfor more
        detailed instructions.  \n"
      U1L8 NetSim numbers no decimal_instruction: Default instructions
      U1L8 NetSim numbers with decimal_instruction: |
        With your partner, develop a
        protocol or set of rules for communicating a drawing using only bits. See
        the worksheet handed out by your teacher for more detailed instructions!
      U2 frequency caesar_instruction: Instruções
      U2 frequency random sub_instruction: Instruções
      U2 vigenere cipher_instruction: Instruções
      U2 Vigenere_instruction: Test
      U2L04 - NetSim Routers with Addresses_instruction: |
        Send messages with your
        classmates (Click to see full instructions)
      U2L05 - NetSim - Packets and Building TCP_instruction: "Develop a Protocol\nfor
        Reliably Sending a Message.\r\n\r\nConstraints:\r\n- Packets may contain\nonly
        6 characters\r\n- Packets may drop with small probability\r\n- Packets\nmay
        not arrive in order"
      U2L10 NetSim Automatic DNS_instruction: |
        In this version of the Internet Simulator,
        a Domain Name System (DNS) is provided for you and knows the IP addresses
        of all connected computers. Send a message in the form GET [hostname] to the
        DNS service at address <yourRouterNumber>.15 to get a student's address.
      U2L10 NetSim Manual DNS_instruction: |
        In this version of the simulator you
        can't see the other students' addresses.  Instead, one of you must act as
        a name service, to help share addresses with each other.
      U2L14 frequency random_instruction: Test
      U2L2 NetSim Hub Mode_instruction: "Now use the Internet Simulator to send the\nbattleship
        moves. For setup, join a Room with your group, and add ships to\nyour paper
        board for each opponent. When playing, all communication must be\ndone through
        the tool, so no talking, but have fun!\r\n"
      U2L3 NetSim Hub Mode_instruction: |
        Use the Internet Simulator to test out your
        group's binary communication protocol for battleship. How short can you make
        the message and response?
      U2L4 NetSim Routers Addresses_instruction: "For this activity, connect to a\nrouter
        with the others in your group. Important note: The router will only\nproperly
        route messages where the first 4 bits are the To: address and the\nsecond
        4 bits are the From: address.\r\n\r\n[TODO: NetSim needs to support\nhierarchical
        addresses. For now, level is set up for 4 bit to and from addresses]"
      U2L5 NetSim Classroom Internet_instruction: "For this activity, connect to\na
        router with the others in your group. The Internet Simulator now provides\na
        place for you to put the To and From addresses, so you don't have to type\nout
        the bits manually.\r\n\r\n"
      U2L7 NetSim Need for Packets_instruction: |
        Transfer your favicon to a partner
        across a network in which the larger a packet grows, the more likely it is
        to be dropped.
      U3 - Arrays - appendItem_instruction: |
        Create an array of odd numbers 1-11
        by using appendItem. (Click to see full instructions)
      U3 - Arrays - assignment_instruction: |
        Use indexes to change the values in
        this array from 1 to 0. (Click to see full instructions)
      U3 - Arrays - assignment2_instruction: |
        Calculate the sum of three values stored
        in an array. (Click to see full instructions)
      U3 - Arrays - assignment3_instruction: |
        Increase the value of each value in
        the randomly generated array by 1. (Click to see full instructions)
      U3 - Arrays - createFirstArray_instruction: |
        Create an array of the even numbers
        from 0 to 10 and display its contents with console.log. (Click to see full
        instructions)
      U3 - Arrays - Demo App_instruction: |
        Use the "My Favorite Things" app. How
        might this app be making use of an array? (Click to see full instructions)
      U3 - Arrays - expressionsAsIndexes_instruction: |
        Write a program that displays
        a randomly chosen color from the array. (Click to see full instructions)
      U3 - Arrays - favThings addItem_instruction: |
        Write code that allows a user
        to add their own favorite things to the list. (Click to see full instructions)
      U3 - Arrays - favThings bounds_instruction: |
        Add if statements to your event
        handlers that prevent the global index from going out of bounds. (Click to
        see full instructions)
      U3 - Arrays - favThings Counting Variable_instruction: |
        Create a global variable
        for the current index and use it to display the first item in the array. (Click
        to see full instructions)
      U3 - Arrays - favThings createArray_instruction: |
        Create an array of words
        describing your favorite things. (Click to see full instructions)
      U3 - Arrays - favThings firstOutput_instruction: |
        Use setText to display the
        first item in the array. (Click to see full instructions)
      U3 - Arrays - favThings giveIDs_instruction: |
        Give your UI elements descriptive
        and meaningful IDs. (Click to see full instructions)
      U3 - Arrays - favThings keepPlaying_instruction: |
        Make any other improvements
        you want! (Click to see full instructions)
      U3 - Arrays - favThings Next_instruction: |
        Write code that allows the user
        to move forward through your list by clicking the "Next" button. (Click
        to see full instructions)
      U3 - Arrays - favThings Prev_instruction: |
        Write code that allows the user
        to move backward through your list by clicking the "Last" button. (Click
        to see full instructions)
      U3 - Arrays - favThings template_instruction: |
        Give your UI elements descriptive
        and meaningful IDs. (Click to see full instructions)
      U3 - Arrays - globalVariableIndex_instruction: |
        Give your UI elements descriptive
        and meaningful IDs. (Click to see full instructions)
      U3 - Arrays - indexPractice_instruction: |
        Write the contents of the array to
        the screen in numerical order. (Click to see full instructions)
      U3 - Arrays - insertingItems_instruction: |
        Insert items into an array to form
        a complete sentence. (Click to see full instructions)
      U3 - Arrays - insertionErrors_instruction: |
        Run each command that references
        indexes that are out of bounds and observe the results. (Click to see full
        instructions)
      U3 - Arrays - introIndex_instruction: |
        Display the first and last element in
        the array. Display the number 5 from the array. (Click to see full instructions)
      U3 - Arrays - length_instruction: |
        Use list.length to determine the length
        of each array. (Click to see full instructions)
      U3 - Arrays - lengthMinus1_instruction: |
        Use list.length - 1 to log the last
        item in the array to the console. (Click to see full instructions)
      U3 - Arrays - remove_instruction: |
        Remove items from an array to form a complete
        sentence. (Click to see full instructions)
      U3 - Arrays - stringsInArrays_instruction: |
        Write a sentence word by word by
        adding strings to an array. (Click to see full instructions)
      U3 - Canvas - 200dots_instruction: |
        Add a loop to your program that draws 200
        dots on your canvas. (Click to see full instructions)
      U3 - Canvas - appendToArray_instruction: |
        Create an array to store each event
        parameter. Append each event parameter to this array within your event handler.
        (Click to see full instructions)
      U3 - Canvas - changeToMouseMove_instruction: |
        Change your program so that dots
        are drawn at the location of the mouse as the user moves the mouse on the
        canvas. (Click to see full instructions)
      U3 - Canvas - clickToAdd_instruction: |
        Change your program so that dots are
        added to the canvas when the user clicks on it. (Click to see full instructions)
      U3 - Canvas - delete_instruction: |
        Create a button that deletes the drawing
        by clearing the canvas and removing all stored values. (Click to see full
        instructions)
      U3 - Canvas - draw at click point_instruction: |
        Change your program so that
        dots are drawn at the location of the mouse click. (Click to see full instructions)
      U3 - Canvas - freePlay_instruction: |
        Extend the functionality of one of the
        effects, or create an entirely new one of your own. (Click to see full instructions)
      U3 - Canvas - introCanvas_instruction: |
        Add a canvas to your app and set it
        to be the active canvas. Then add a large dot to your canvas. (Click to see
        full instructions)
      U3 - Canvas - movementFunction fix Orig_instruction: |
        Modify the "Original"
        button event handler so that it takes the movement of the mouse into account.
        (Click to see full instructions)
      U3 - Canvas - movementFunction_instruction: |
        Write a function that takes the
        movement of the mouse as input and generates a line width as output. (Click
        to see full instructions)
      U3 - Canvas - One Dot sprayPaint_instruction: |
        Write code that redraws your
        image using a dot whose x and y locations use offsetX and offsetY with a small
        random value added. (Click to see full instructions)
      U3 - Canvas - redrawOriginal_instruction: |
        Write a function that processes
        your array, redrawing the dots as they originally appeared. (Click to see
        full instructions)
      U3 - Canvas - redrawRandom_instruction: |
        Set up a button and event handler
        for the random function. (Click to see full instructions)
      U3 - Canvas - redrawRandom2_instruction: |
        Write a function that processes your
        array, redrawing every dot with a random size. (Click to see full instructions)
      U3 - Canvas - shiftKey_instruction: |
        Add an if statement to your event handler
        so dots are only drawn when the shift key is pressed. (Click to see full instructions)
      U3 - Canvas - sketch_instruction: |
        Write code that redraws your image using
        a sketch effect. (Click to see full instructions)
      U3 - Canvas - sprayPaint_instruction: |
        Update the spray paint code so that
        it redraws your image using multiple random dots instead of using a nested
        for loop. (Click to see full instructions)
      U3 - Canvas - transparentDots_instruction: |
        Change the colors of your dots
        so they have a fully transparent stroke and partially transparent fill. (Click
        to see full instructions)
      U3 - Canvas - usingOffsetXY_instruction: |
        Add a console.log command inside
        the function of your event handler. Use it to display the event parameter.
        Click on the screen to see the contents of the event parameter (Click to see
        full instructions)
      U3 - Conditional Basics - 6_instruction: |
        Add a setText after the if statement
        to "Nope. Guess again." (Click to see full instructions)
      U3 - Conditionals - Combine AND and OR_instruction: |
        Write an if statement
        that uses AND and OR to display "Time to go to school!" if it's not the
        weekend and the user is under 18. (Click to see full instrucitons.
      U3 - Conditionals - Combine AND OR and NOT_instruction: |
        Write an if statement
        that uses AND and OR to display "Time to go to school!" if it's not the
        weekend and the user is under 18. (Click to see full instructions.)
      U3 - Conditionals - Combine AND OR Simple_instruction: |
        Write an if statement
        that uses AND and OR to display "Sleep in!" if it's the weekend and the
        user is a teenager. (Click to see full instructions.
      U3 - Conditionals - intoOr_instruction: |
        Add 2 if statements that use the OR
        operator. (Click to see full instructions)
      U3 - Conditionals - introAND_instruction: |
        Add 2 if statements that use the
        OR operator. (Click to see full instructions)
      U3 - Conditionals - Simple AND_instruction: |
        Write an if statement that uses
        AND to display "You are a teenager." if the user enters an age between 13
        and 19. (Click to see full instructions)
      U3 - Conditionals - Simple OR_instruction: |
        Write an if statement that uses
        OR to display "It's the weekend!" if the user enters a weekend day at the
        prompt. (Click to see full instructions)
      U3 - Design Mode - Console Log_instruction: |
        Update the ID names and `console.log`
        messages to match the correct button. (Click to see full instructions.)
      U3 - Design Mode - Layers and Delete_instruction: |
        Fix the layout of the bullseye
        game. (Click to see full instructions)
      U3 - Design Mode - Multi Screens 2_instruction: |
        Make a 2 screen app which
        can switch back and forth between a black screen and a white screen using
        buttons. (Click to see detailed instructions.)
      U3 - Design Mode - Multi Screens_instruction: |
        Make a 2 screen app with a black
        screen and a white screen. (Click to see detailed instructions)
      U3 - Design Mode - Other Events_instruction: |
        Delete the button and make the
        image move to a random location when you click on it. (click to see detailed
        instructions)
      U3 - Design Mode - WTF Console Log_instruction: |
        Add a 3 console.log messages
        and test them out. (Click to see full instructions.)
      U3 - Design Mode -Recreate Beyond Buttons_instruction: |
        Recreate the game from
        the "Chaser Game" with a Welcome Screen and Game Over Screen. (Click to
        see full instructions.)
      U3 - Design Mode 1_instruction: |
        Add a large red button to your screen using
        Design Mode. (Click for full instructions.)
      U3 - Dice - Dropdown and Score_instruction: |
        Add guess and score to the Dice
        Game (Click to see full instructions)
      U3 - Dice - Dropdown with Strings_instruction: |
        Add a dropdown for difficulty
        level that prints the difficulty level in the console. (Click to see full
        instructions)
      U3 - Dice - If_instruction: |
        Show different die images for the random number
        generated. (Click to see full instructions)
      U3 - Dice - Nested_instruction: |
        Use nested if statements to make the scoring
        different for the different game levels. (Click to see full instructions)
      U3 - High Low - Debug_instruction: |
        Debug the order of the conditionals so
        that it will actually tell the user when their guess is close. (Click to see
        full instructions)
      U3 - High Low - Dropdown_instruction: |
        Add a dropdown for their guess instead
        of promptNum (Click to see full instructions)
      U3 - High Low - Else if_instruction: |
        Add an else-if statement in order to
        tell the user if their guess is high or low instead of just wrong. (Click
        to see full instructions)
      U3 - High Low - Else_instruction: "Add an else statement so that the program\nwill
        tell the user when they are right and when they are wrong. (Click to\nsee
        full instructions)\r\n"
      U3 - High Low - If_instruction: |
        Add code to the if statement that indicates
        the user guessed the secret number. (Click to see full instructions)
      U3 - images - bee free play_instruction: Do this
      U3 - Keys - Add Image URLs_instruction: |
        Add image URLs to your array. Replace
        the text area with an image and setText with setImageURL. Then test your app!
        (Click to see full instructions)
      U3 - Keys - Buttons and Keys_instruction: |
        Have the program respond the same
        way for both clicking images on the screen and hitting the up and down keys
        on the keyboard. (Click to see full instructions)
      U3 - Keys - Demo App_instruction: |
        Play with the image scroller. Press the
        left and right arrows to progress through the images.
      U3 - Keys - Final Image Scroller_instruction: |
        Update the image scroller to
        respond to buttons and key presses. (Click to see full instructions)
      U3 - Keys - Functions_instruction: |
        Write doUpArrow and doDownArrow functions
        and call the functions instead of duplicating the code. (Click to see full
        instructions)
      U3 - Keys - Key Up and Down_instruction: |
        Try out the keyup and keydown events
        to see how they are different from keypress. (Click to see full instructions)
      U3 - Keys - Multiple Keys_instruction: |
        Play a different sound when the down
        arrow is pressed. (Click to see full instructions)
      U3 - Keys - Practice Adding Images with URL_instruction: |
        Add image URLs to
        your image array. Test out the add button. Style your image scroller. (Click
        to see full instructions)
      U3 - Keys - Words to Images_instruction: |
        Add image URLs to your image array.
        Test out the add button. Style your image scroller. (Click to see full instructions)
      U3 - Loops -  9 Part 2_instruction: |
        Change the boolean expression for the
        while loop so that it will roll until both dice are greater than 3. (Click
        to see full instructions)
      U3 - Loops -  Complex Condition_instruction: |
        Change the boolean expression
        for the while loop so that it will stop when both dice are greater than or
        equal to 5. (Click to see full instructions)
      U3 - Loops - 1_instruction: |
        Change the condition for the while loop to check
        if the variable num is less than 90. (Click to see full instructions)
      U3 - Loops - 10_instruction: |
        Write a program that simulates the rolling of
        two dice. Roll the dice repeatedly until the sum of the dice is either 7 or
        11.
      U3 - Loops - 11_instruction: |
        Fix the condition so that it keeps rolling the
        die as long as the value is not a 2 or a 3 instead of rolling infinitely.
        (Click to see full instructions)
      U3 - Loops - 12_instruction: |
        Change the code so that it prints the string
        "Hi" 5 times. (Click to see full instructions)
      U3 - Loops - 13_instruction: |
        Update the code to count up by 3 instead of 1.
        (Click to see full instructions)
      U3 - Loops - 14_instruction: |
        Change the loop condition to prevent the infinite
        loop and stop counting once the count is past 30. (Click to see full instructions)
      U3 - Loops - 15_instruction: |
        Count the number of times the sum of the dice
        is 12. (Click to see full instructions)
      U3 - Loops - 16_instruction: |
        Find out how many times you have to roll to get
        the sum of 7 100 times (Click to see full instructions)
      U3 - Loops - 2_instruction: |
        Try creating an infinite loop using !=, > and
        <. (Click to see full instructions)
      U3 - Loops - 3_instruction: |
        Change the if statement to a while loop so the
        program will run until it rolls a 6. (Click to see full instructions)
      U3 - Loops - 4_instruction: |2
         Use the Debug Commands to make a list of all
        the values rolled before a 6. (Click to see full instructions)
      U3 - Loops - 5_instruction: |
        Add code inside the while loop which will update
        the variable num so that the condition will eventually become false. (Click
        to see full instructions)
      U3 - Loops - 6_instruction: |
        Fix the problem so the loop will run at least
        once. Change the initial value of num to a dummy value such as -1. (Click
        to see full instructions)
      U3 - Loops - 7_instruction: |
        Without adding any lines of code, reorder the
        code so that it prints all the values of num. (Click to see full instructions)
      U3 - Loops - 8_instruction: |
        Debug which number is not getting printed and
        add a write statement to display that value. (Click to see full instructions)
      U3 - Loops - 9_instruction: |2
         Modify the condition so that it keeps rolling
        as long as both are less than 3. (Click to see full instructions)
      U3 - Loops - Continue_instruction: |2
         Use the Debug Commands to to make a list
        of all the values rolled before a 6. (Click to see full instructions)
      U3 - Loops - minus = operator_instruction: |
        Update the code to use the -= operator
        to count from 30 down to 0 by 3's. (Click to see full instructions)
      U3 - Loops - Minus Minus_instruction: |
        Change the code to count down from 10
        to 1. (Click to see full instructions)
      U3 - Loops - plus and minus = operator_instruction: |
        Update the code to use
        the += operator. (Click to see full instructions)
      U3 - Loops - Plus Plus_instruction: |
        Change the code to use count++ instead
        of count = count + 1.  (Click to see full instructions)
      U3 - Loops - Typing in Console_instruction: |
        Use console to check the ending
        value of num. (Click to see full instructions)
      U3 - Loops And Arrays - Add 5_instruction: |
        Add 5 to all the values in an array
        (Click to see full instructions)
      U3 - Loops And Arrays - Challenge 1_instruction: |
        Write a function that finds
        and returns the minimum value in an array.   (Click to see full instructions)
      U3 - Loops And Arrays - Challenge 2_instruction: |
        Write a function that finds
        and returns the minimum value in an array.   (Click to see full instructions)
      U3 - Loops And Arrays - Counting Times_instruction: |
        Count the number of times
        5 appears in an array. (Click to see full instructions)
      U3 - Loops And Arrays - Divid by 2_instruction: |
        Divide every value in the
        array by 2. (Click to see full instructions)
      U3 - Loops And Arrays - Find Max_instruction: |
        Design a function that displays
        the smallest number in an array  (Click to see full instructions)
      U3 - Loops And Arrays - Find Min_instruction: |
        Complete the findMinVal function
        to find and display the smallest value in an array  (Click to see full instructions)
      U3 - Loops And Arrays - Functions that Return Value_instruction: |
        Call findMin
        within the console.log statement to calculate the minimum of two values.  (Click
        to see full instructions)
      U3 - Loops And Arrays - General Search Param_instruction: |
        Add a second parameter
        to the search function for the value to search for.  (Click to see full instructions)
      U3 - Loops And Arrays - Intro For Loop_instruction: |
        Add a for loop with a
        console.log inside and test out the 3 pieces of the for loop. (Click to see
        full instructions)
      U3 - Loops And Arrays - Linear Search_instruction: |
        Visit every element in
        the array and display "true" if the value is a 5, and "false" otherwise.
        (Click to see full instructions)
      U3 - Loops And Arrays - Loop Array If_instruction: |
        Use an if statement to
        only display the values in the array that are greater than 5. (Click to see
        full instructions)
      U3 - Loops And Arrays - Make it a Function - add list parameter_instruction: |
        Create
        a function that takes a list parameter and prints if the list contains a 5.
        (Click to see full instructions)
      U3 - Loops And Arrays - Make it a Function_instruction: |
        Move the code that
        searches the list for a 5 into a function called "search". (Click to see
        full instructions)
      U3 - Loops And Arrays - Multiple Returns_instruction: |
        Test out the return
        values of the findMax function.  (Click to see full instructions)
      U3 - Loops And Arrays - Print Array_instruction: |
        Use a for loop to print out
        all the values in an array. (Click to see full instructions)
      U3 - Loops And Arrays - Printing Single True_instruction: |
        Process the array
        and display a single "true" if the array contains a 5 or a single "false"
        if it does not.  (Click to see full instructions)
      U3 - Loops And Arrays - Return Index_instruction: |
        Make the search function
        return the index of the search value in the array. (Click to see full instructions)
      U3 - Loops And Arrays - Return Value_instruction: |
        Use constrain in this simple
        app to keep the turtle from driving off the screen.  (Click to see full instructions)
      U3 - Loops And Arrays - Search and Remove_instruction: |
        Search for 5 in the
        array and remove it from the array. (Click to see full instructions)
      U3 - Loops And Arrays - Search with Boolean Var_instruction: |
        Make a boolean
        variable to use as a flag to keep track of whether there is a 5 in the array.
        (Click to see full instructions)
      U3 - Loops And Arrays - useFindMin_instruction: |
        Call findMin within the console.log
        statement to calculate the minimum of two values.  (Click to see full instructions)
      U3 - Movie Bot - Multiple If Sequences_instruction: |
        Add another set of if,
        else if, and else statements inside the question if statement to check for
        keywords for movie ratings (G, PG, PG-13, and R). (Click to see full instructions)
      U3 - Movie Bot - Nested Motivation_instruction: |
        Add a separate set of if statements
        to check for a "?" in the input. (Click to see full instructions)
      U3 - Movie Bot - toLowerCase_instruction: |
        Use the toLowerCase command to change
        all user input into lowercase letters after they enter it. (Click to see full
        instructions)
      U3 - Movie Bot - When Multiple If Statements_instruction: |
        Add an if and else-if
        statement that checks for please and thank you. (Click to see full instructions)
      U3 - Practice Create Performance Task_instruction: |
        Design and implement your
        practice Create Performance Task. (Click to see full instructions)
      U3 - Read Record - 1.2_instruction: "Console.log the records returned by a\ncall
        to readRecords. (Click to see full instructions)\r\n"
      U3 - Read Record - 1.5_instruction: "Console.log the records returned by a\ncall
        to readRecords. (Click to see full instructions)\r\n"
      U3 - Read Record - 1.6_instruction: "Console.log the records returned by a\ncall
        to readRecords. (Click to see full instructions)\r\n"
      U3 - Read Record - 1_instruction: "Console.log the records returned by a call\nto
        readRecords. (Click to see full instructions)\r\n"
      U3 - Read Record - 2_instruction: "Change the table name so that the records\nare
        read from the new table.(Click to see full instructions)\r\n"
      U3 - Read Record - 3_instruction: "Change the name of the table in a readRecords\ncommand
        to read from a table that does not exist. (Click to see full instructions)\r\n"
      U3 - Read Record - 4.1_instruction: "Print out each record return from the\nreadRecords
        call individually. (Click to see full instructions)\r\n"
      U3 - Read Record - 4_instruction: "Print out each record return from the readRecords\ncall
        individually. (Click to see full instructions)\r\n"
      U3 - Read Record - 5 and half_instruction: "Print out the name of each movie\nin
        the records return from the readRecords call. (Click to see full instructions)\r\n"
      U3 - Read Record - 5_instruction: "Print out the name of each movie in the\nrecords
        return from the readRecords call. (Click to see full instructions)\r\n"
      U3 - Return Values - constrainTurtle_instruction: |
        Use constrain in this simple
        app to keep the turtle from driving off the screen.  (Click to see full instructions)
      U3 - Return Values - debuggingConstrain_instruction: |
        Correct the error in
        constrain so that it returns the appropriate value.  (Click to see full instructions)
      U3 - Return Values - debuggingMaxVal_instruction: |
        Correct the error in maxVal
        so that it correctly reports the maximum value.  (Click to see full instructions)
      U3 - Return Values - debuggingReturns_instruction: |
        Correct the error in maxVal
        so that it correctly reports the maximum value.  (Click to see full instructions)
      U3 - Return Values - increase1_instruction: |
        Call the increase function within
        moveForward, write, and console.log.  (Click to see full instructions)
      U3 - Return Values - increase2_instruction: |
        Change the increase function to
        return 3 times the input value. (Click to see full instructions)
      U3 - Return Values - min1_instruction: |
        Test out the return values of the findMax
        function.  (Click to see full instructions)
      U3 - Return Values - useFindMin_instruction: |
        Call findMin within the console.log
        statement to calculate the minimum of two values.  (Click to see full instructions)
      U3 - Return Values - useMinVal_instruction: |
        Call minVal within the console.log
        statement to calculate the minimum of two values.  (Click to see full instructions)
      U3 - Return Values - wrapTurtle_instruction: |
        Write wrap in this simple app
        to let the turtle "wrap" to the other side of the screen when it goes off.  (Click
        to see full instructions)
      U3 - Return Values - writeMaxVal_instruction: |
        Write the function maxVal and
        then use it within the console.log statement to calculate the maximum of two
        values.  (Click to see full instructions)
      U3 - Search Terms - 1_instruction: "Create an array of all the movies made\nin
        2008 and print it out. (Click to see full instructions)\r\n"
      U3 - Search Terms - 2_instruction: "Print out all the movies with year 2008\nusing
        the readRecords search terms. (Click to see full instructions)\r\n"
      U3 - Search Terms - 3_instruction: "Print whether or not there are movies matching\nthe
        search criteria (Click to see full instructions)\r\n"
      U3 - Search Terms - 4_instruction: "Print whether or not there are movies matching\nthe
        search criteria (Click to see full instructions)\r\n"
      U3 - Search Terms - 5_instruction: "Print out the cities that are in California\nor
        have a population of 2,000,000. (Click to see full instructions)\r\n"
      U3 - Search Terms - 6_instruction: "Print out the cities that are in California\nor
        have a population of 2,000,000. (Click to see full instructions)\r\n"
      U3 - Simple Drawing - Comments_instruction: Do this
      U3 - Simple Drawing - Ellipse and No Fill_instruction: Do this
      U3 - Simple Drawing - Fill_instruction: Do This
      U3 - Simple Drawing - No Fill_instruction: Do this
      U3 - Simple Drawing - Order of Blocks_instruction: Do this
      U3 - Simple Drawing - Oval_instruction: Do This
      U3 - Simple Drawing - Personal Drawing_instruction: DO This
      U3 - Simple Drawing - Rectangle Width and Height_instruction: Do This
      U3 - Simple Drawing - Rectangle_instruction: Do This
      U3 - Simple Drawing - regular polygon_instruction: Do this
      U3 - Simple Drawing - Road Ellipse_instruction: Do This
      U3 - Simple Drawing - Road Rects and Color_instruction: Do This
      U3 - Simple Drawing - Simple Shape Drawing_instruction: Do This
      U3 - Simple Drawing - Stroke and Stroke Weight_instruction: Do this
      U3 - Simple Drawing - text_instruction: Do This
      U3 - Simple Drawing - X and Y values_instruction: Do This
      U3 - Simulation - 1_instruction: |
        Use a while loop to "flip a coin 10 times"
        and write the values to the screen. (Click to see full instructions)
      U3 - Simulation - 2.1_instruction: |
        Change your looping condition so the simulation
        runs until there are 5 heads flipped. (Click to see full instructions)
      U3 - Simulation - 2.5_instruction: |
        Run your simulation to get the full 10,000
        heads! How long did it take? (Click to see full instructions)
      U3 - Simulation - 2_instruction: |
        Keep track of how many heads (1's) your
        program generates and print the results to the screen. (Click to see full
        instructions)
      U3 - Simulation - 3_instruction: "Add functionality that counts how many heads\nin
        a row are flipped. (Click to see full instructions)\r\n"
      U3 - Simulation - 4_instruction: |
        Update your while loop's condition so the
        the coin flips until there are three heads in a row. (Click to see full instructions)
      U3 - Simulation - 5_instruction: |
        Change your while loop to run until you get
        a streak of 12 heads. How many flips did it take? (Click to see full instructions)
      U3 - Simulation - 6_instruction: |
        Keep adding to your simulation. What do you
        want to explore next? (Click to see full instructions)
      U3 - Simulation - App_instruction: |
        Change your code to run the full simulation
        with 10,000 coins. What was your longest streak of heads? (Click to see full
        instructions)
      U3 - Simulation - Template_instruction: |
        Use a while loop to "flip 10 coins"
        and write them to the screen. (Click to see full instructions)
      U3 - Sprites - Intro Sprites_instruction: Do This
      U3 - Sprites and Mod - Create  and Draw Sprite_instruction: Do This
      U3 - Sprites and Mod - Mouse Width and Height_instruction: Do this
      U3 - Sprites and Mod - Mouse X and Y_instruction: Do this
      U3 - Sprites and Mod - Rand Around Mouse_instruction: Do this
      U3 - Sprites and Mod - Rand Shape Color_instruction: Do This
      U3 - Sprites and Mod - Shape Color_instruction: Do This
      U3 - Sprites and Mod - two sprites_instruction: Do This
      U3 - Sprites and Mod - Wrap Many Squares_instruction: Do This
      U3 - Sprites and Mod - X and Y Prop_instruction: Do This
      U3 - User Input - Save getText To Variable_instruction: |
        Save the age and name
        of the user in variables (Click to see full instructions)
      U3 - User Input - Saving After Input_instruction: |
        Save the age of the user
        in a variable using getText() (Click to see full instructions)
      U3 - User Input and String -  Concat_instruction: |
        Output a message about age
        in a Text Area (Click to see full instructions)
      U3 - Variables - Clicker Game_instruction: |
        Create your improved Chaser-Game
        here. (Click to see full instructions)
      U3 - Variables - Debug Scope_instruction: |
        Why isn't the value of foo changing
        correctly? Make a guess. (Click to see full instructions)
      U3 - Variables - Debugging with Turtle_instruction: |
        Use your new debugging
        techniques to get the code to run correctly (Click to see full instructions)
      U3 - Variables - Decrement_instruction: |
        Decrement the value of the variable.
        (Click to see full instructions)
      U3 - Variables - Identify Variables_instruction: |
        Identify the values printing
        in the terminal with console.log statements. (Click to see full instructions)
      U3 - Variables - Increment_instruction: |
        Use the console.log debugging technique
        to see what is happening in this example. Add another variable and increment
        its value. (Click to see full instructions)
      U3 - Variables - Incrementing Variables_instruction: |
        Create a repeat loop
        for the repeated code and use increment to recreate the original program with
        less lines of code! (Click to see full instructions)
      U3 - Variables - Read Using Turtle_instruction: |
        Create a second set of variables
        for x and y position. Move turtle to that new location. (Click to see full
        instructions)
      U3 - Variables - Reassigning Variables with Console.log_instruction: |
        Add another
        reassignment statement at the end of the code to change the value of the variable
        at second time. (Click to see full instructions)
      U3 - Variables - Set to Expression with Other Variables and Turtle_instruction: |
        (click
        to see full instructions)
      U3 - Variables - Set to Expression with Other Variables_instruction: |
        Write
        an expression that calculates the player's total score and stores it in the
        totalScore variable. The calculation is: the player's points times lives
        divided by the total time. (click to see full instructions)
      U3 - Variables - Set to Expression with Turtle_instruction: |
        (click to see
        full)
      U3 - Variables - Set to Expression_instruction: |
        Test out the new expressions.
        (Click to see full instructions)
      U3 Digital Assistant Design_instruction: |
        Pick a topic for your Digital Assistant
        and create the basic layout with a text input and text area. (Click to show
        full instructions)
      U3 Digital Assistant Set Text_instruction: |
        Have your digital assistant repeat
        back what the user types and include a canned response. (Click to see full
        instructions)
      U3 Digital Assistant Target - Mehal_instruction: |
        Try out a demo of the Digital
        Assistant!
      U3 Digital Assistant Target_instruction: Try out a demo of the Digital Assistant!
      U3 Digital Assistant Template_instruction: This is a project template!
      U3 Digital_instruction: |
        Choose a specialization topic for your digital assistant.
        Create a basic digital assistant that takes the user's input and displays
        back a default response.
      U3 full clicker demo_instruction: Clicker game - Try it out!
      U3 mehal's clone_instruction: Try out a demo of the Digital Assistant!
      U3 Variables consolelog_instruction: |
        Use the write block to display the value
        of size
      U3 Variables flower example_instruction: |
        Change the value of petalSize multiple
        times. How does it change your drawing?
      U3 Variables gray square_instruction: |
        Change the value of petalSize multiple
        times. How does it change your drawing?
      U3 Variables make a square_instruction: |
        Change the value of size multiple
        times. How does it change your drawing?
      U3 Variables misconceptions try it_instruction: |
        Test out your predictions
        from the previous level.
      U3 Variables randomize your square_instruction: |
        Change the value of petalSize
        multiple times. How does it change your drawing?
      U3 Variables write_instruction: |
        Use the write block to display the value of
        size
      U3- Variables - Assign Random For Turtle Draw_instruction: |
        Try writing the
        same code in text mode.
      U3- Variables - Changing the Value_instruction: |
        Update the value of 'turnAmount'
        before each moveForward so the turtle turns a different amount each time.
        (Click to see full instructions)
      U3- Variables - Create And Assign_instruction: |
        On one line add a variable
        called "lives" and assign it the value 3. Print it to the console. (Click
        to see full instructions)
      U3- Variables - Text Mode_instruction: |
        1. Switch to text mode and type instructions;
        2. drag blocks out into text mode; 3. experiment with code completion
      U3-Design Mode-ID and Event Handler_instruction: |
        Add an event handler for
        the button using the "Insert and show" link in the Design Mode Events tab.
        (Click to see full instructions).
      U3-Design Mode-ID_instruction: |
        Using the Design Mode Events change the button
        ID and update the code to match. (Click to see detail instructions).
      U3-Design Mode-Image_instruction: |
        Recreate the "Chaser Game" from the last
        lesson using Design Mode. (Click to see full instructions.)
      U313 drag Two Buttons_instruction: |
        Run a program with two buttons that have
        the same id to see the warning message in the console. Change the ids to make
        the program run without getting a warning message.
      U313 eventsDetails_instruction: |
        Run a program with two buttons that have the
        same id to see the warning message in the console. Change the ids to make
        the program run without getting a warning message.
      U313 Two Buttons with Ids_instruction: |
        Predict what will happen. Once you've
        made a prediction, run the code to see what happens. (Click to see full instructions)
      U3L03 - draw rect function_instruction: "Write a function called drawRectangle().\r\n(Click\nto
        see full instructions)"
      U3L03 - draw step_instruction: |
        Write the drawStep function. (Click to see
        full instructions)
      U3L03 choose your own drawing_instruction: |
        Now choose your own!  Pick one
        of the three drawings shown here and attempt to create it on your own, making
        smart decisions about how to break the problem down into re-usable functions.  You
        will review your work with a peer using "procedures peer review rubric."  Check
        it for the requirements.  GIF: U3L3-ProceduresChooseOne.png
      U3L03 Creating Procedures 1_instruction: |
        Write the turnAround() function and
        use it to make the turtle move as depicted. see: U3L03-turnAndDown.gif
      U3L03 Define and use turnAround_instruction: |
        Define a function called turnAround.
        Call the function and then move the turtle forward. (Click to see full instructions)
      U3L03 define turnRight and draw a rectangle_instruction: |
        Define a function
        called right() that turns the turtle to the right. Then use this function
        to draw a rectangle, as shown below. (Click to see full instructions)
      U3L03 Draw a T using turnAround_instruction: |
        Draw a plus sign using the provided
        version of turnAround().  (Click to see full instructions)
      U3L03 draw diamond_instruction: |
        Create a function called drawDiamond() that
        makes use of your previous work to draw the complete diamond. (Click to see
        full instructions)
      U3L03 Three Steps_instruction: |
        Define a function called drawSide() which draws
        three steps and moves the turtle to prepare for the next side (Click to see
        full instructions)
      U3L04 - 3 by 3 with functions_instruction: |
        Make the 3x3 square as efficiently
        as you can. (Click to see full instructions)
      U3L04 - snowflake_instruction: |
        Create the design by breaking it down into
        layers of functions. (Click to see full instructions)
      U3L04 choose your own drawing_instruction: |
        Now choose your own!  Pick one
        of the three drawings shown here and attempt to create it on your own, making
        smart decisions about how to break the problem down into re-usable functions.  You
        will review your work with a peer using "procedures peer review rubric."  Check
        it for the requirements.
      U3L04 diamond solution_instruction: |
        Study this solution to the drawDiamond
        problem.  Notice that the whole program starts by calling drawDiamond() at
        the top.  The program then follows a chain of function calls.  You can trace
        what's happening in the code to see the functions reused.  It's also easy
        to read because the function names describe the expected behavior.
      U3L05_3x3GridEfficiencyChallenge_instruction: |
        Let's revisit the 3x3 grid
        problem you did a few lessons ago.  This time the challenge is to program
        the solution "as efficiently as possible."  Now that you know how to write
        functions, it should be easier to break the problem down, and your code should
        be easier to read and debug.  See the rubric for more details about requirements
        and expectations.
      U3L05_draw3x3GridEfficiently_instruction: |
        Draw a 3x3 grid above and to the
        right of the turtle. Try to do so with the fewest number of commands possible.
        NOTE: This is a very challenging problem.  You may need to play with it for
        a while and tweak it.  You might also consider using pencil and paper to sketch
        your ideas.
      U3L06 - moveForwardwithParams_instruction: |
        Use a single command to move the
        turtle to the edge of the screen. (Click to see full instructions)
      U3L06 Challenge 1 triangle_instruction: |
        Use the parameterized versions of
        the turtle commands to create a triangle with sides 100 pixels long. (Click
        to see full instructions)
      U3L06 Challenge 2 purple square_instruction: |
        Read the documentation for penColor()
        and penWidth() before using them to draw the blue square.
      U3L06 Challenge 3 fill pink_instruction: |
        Fill in the background of the screen
        with your favorite color. (Click to see full instructions)
      U3L06 Challenge 4 bullseye_instruction: |
        Create the bullseye using hexadecimal
        colors and dot(). (Click to see full instructions)
      U3L06 Challenge 5 overlapping circles_instruction: |
        This image is created just
        using dot() and penColor() but, how are we going to get those circles to be
        transparent?  If you haven't gotten the hint yet: check out the documentation!
      U3L06 Challenge 6 squiggles_instruction: "Read the documentation for the \"arcLeft\"\nand
        \"arcRight\" commands and then draw the squiggles as shown. \n"
      U3L06 Challenge 7 smiley face_instruction: |
        Use turnTo() and moveTo() to help
        draw a smiley face. (Click to see full instructions)
      U3L06 Challenge 8 make your own_instruction: |
        Create a drawing of your own.
        (Click to see full instructions)
      U3L07 - allSeaGrass_instruction: |
        Add 50 pieces of seagrass to the image by
        writing drawAllSeagrass with a loop. (Click to see full instructions)
      U3L07 - bubbles_instruction: |
        Add 200 bubbles to the image by writing drawAllBubbles
        with a loop. (Click to see full instructions)
      U3L07 - callingFunctionsInLoops_instruction: |
        Call the function within the
        loop to complete the figure. (Click to see full instructions)
      U3L07 - createTriangleParam_instruction: |
        Define a function that accepts a
        parameter to match the function calls and complete the image. (Click to see
        full instructions)
      U3L07 - fish_instruction: |
        Add 15 fish to the image by writing drawAllFish
        with a loop. (Click to see full instructions)
      U3L07 - Free Play Loops and Random_instruction: |
        Free Play! Use what you learned
        from loops and random to make your own little scene. Have fun.
      U3L07 - introSquare_instruction: |
        Use a loop to draw a square. Then add another
        loop to draw many squares each one rotated some amount. (Click to see full
        instructions)
      U3L07 - loopsWithRandom_instruction: |
        Increase the number of iterations to
        fill the screen with white. (Click to see full instructions)
      U3L07 - randomDots1_instruction: |
        Increase the number of iterations to fully
        fill the screen with random dots. (Click to see full instructions)
      U3L07 - randomSquare_instruction: |
        Draw the figure using a loop. (Click to
        see full instructions)
      U3L07 - seaGrass_instruction: |
        Add a parameter to drawSeagrass that controls
        the number of waves in the grass. (Click to see full instructions)
      U3L07 - seaStar_instruction: |
        Add 5 sea stars to the image by writing drawAllSeaStars
        with a loop. (Click to see full instructions)
      U3L07 - Starry Night Starter Code_instruction: "You are going to use loops\nand
        random numbers to generate an image of starry night sky similar to one\nshown
        here.  We have given you some starter code to generate the ground and\nsky
        (just two giant dots), you will add code to this project to make the stars,\ngrass,
        and moon.  All of the effects are clever applications of turtle dots,\nlines,
        and colors.  To get started, follow the series of steps suggested in\nthe
        accompanying worksheet. \n"
      U3L07 - sunBeams_instruction: |
        Add 100 sunbeams to the image by writing drawAllSunbeams
        with a loop. (Click to see full instructions)
      U3L07 - topDownDesign_instruction: |
        Get comfortable with the structure of this
        program, then move on to the next exercise. (Click to see full instructions)
      U3L08 - createTwoParamTriangle_instruction: |
        Define a function called drawTriangle()
        that accepts two parameters to set the size and width of the triangle. (Click
        to see full instructions)
      U3L08 - digitalScene_instruction: |
        Create the functions you were assigned as
        part of your digital scene. (Click to see full instructions)
      U3L08 - drawSquaresWithParams_instruction: |
        Write drawSmallSquare() to draw
        a 25px square. (Click to see full instructions)
      U3L08 - drawSquareWithParam - for video_instruction: |
        Use drawSquare() to recreate
        the image of both squares, this time using parameters. (Click to see full
        instructions)
      U3L08 - drawSquareWithParam_instruction: |
        Use drawSquare() to recreate the
        image of both squares, this time using parameters. (Click to see full instructions)
      U3L08 - Enchantment Under the Sea_instruction: |
        You have been provided with
        starter code for an “Under the Sea” scene which includes three functions,
        one each for the starfish, sea grass, and fish. Create versions of these functions
        which accept parameters to allow you to add more variation to your scene.  The
        student worksheet provides more details and guidance.
      U3L08 - fish_instruction: |
        Add a parameter to drawFish that changes the size
        of the fish drawn. (Click to see full instructions)
      U3L08 - freePlay_instruction: |
        Keep adding to your image by making more calls
        to your new functions with parameters. (Click to see full instructions)
      U3L08 - individualCode_instruction: |
        Create the functions you were assigned
        as part of your digital scene. (Click to see full instructions)
      U3L08 - introUnderTheSea_instruction: |
        Add an extra fish, starfish, and piece
        of sea grass to the image. Look at, but don't change, the functions that
        create them. (Click to see full instructions)
      U3L08 - multiParamFish_instruction: |
        Add three parameters to your drawFish
        function to accept red, green and blue values to make your fish different
        colors. (Click to see full instructions)
      U3L08 - multipleLayersofParams_instruction: |
        Call drawPlusSign() to complete
        the image. (Click to see full instructions)
      U3L08 - paramsToStarfish_instruction: |
        Add a parameter to drawStarfish that
        changes the size of the starfish drawn. (Click to see full instructions)
      U3L08 - randomInput_instruction: |
        Use the randomNumber() blocks to test the
        functions you designed with random input. (Click to see full instructions)
      U3L08 - seaGrass_instruction: |
        Add a parameter to drawSeagrass that changes
        the size of the piece of seagrass drawn. (Click to see full instructions)
      U3L08 - squareTwoParams_instruction: |
        Call drawSquare() to complete the drawing
        of two squares. (Click to see full instructions)
      U3L08 - starFish_instruction: |
        Add an extra fish, starfish, and piece of sea
        grass to the image. Look at, but don't change, the functions that create
        them. (Click to see full instructions)
      U3L08 - triangleTwoParams_instruction: |
        Call drawSquare() to complete the drawing
        of two squares. (Click to see full instructions)
      U3L1 - Simulation - Template_instruction: |
        Use a while loop to "flip 10 coins"
        and write them to the screen. (Click to see full instructions)
      U3L12 Chaser Template_instruction: This is a project template!
      U3L13 - Button with ID_instruction: |
        Drag a button out onto the screen and
        set its text to "Go forth!".  Run the program to make sure you can see the
        button.
      U3L13 - Debug Id plus logic problem_instruction: "The last problem was an example\nof
        syntax error.  App Lab did not understand which object it should be listening\nto
        for a \"click\" event so it showed an error message in the console to let\nyou
        know.  Another kind of error is a logical error - the program is valid,\nbut
        it's not doing what you want it to do.\r\n\r\nThis program has 2 errors.\nA
        (tricky) syntax error and logical error.  Find them, fix them, and make\nthe
        program work as expected."
      U3L13 - Debug Id Problem_instruction: |
        Improve the button by choosing a descriptive
        and meaningful ID. (Click to see full instructions)
      U3L13 - Debugging 1_instruction: |
        Debug the program by verifying your IDs are
        being referenced properly. (Click to see full instructions)
      U3L13 - Debugging 2_instruction: |
        Debug the program by properly ordering your
        button commands and event handlers. (Click to see full instructions)
      U3L13 - Debugging 3_instruction: |
        Debug the program by fixing the logical error
        within the program. (Click to see full instructions)
      U3L13 - Project_instruction: |
        Create your multi-screen app. (Click to see full
        instructions.)
      U3L13 - Turtle Driver Project_instruction: |
        Create a "turtle driver" that
        includes buttons to move the turtle forward and turn it left and right. (Click
        to see full instructions)
      U3L13 - Turtle move with button_instruction: |
        Add a button that moves the turtle
        when clicked.  (Click to see full instructions)
      U3L13 eventsDetails_instruction: |
        Add an event handler to the button to move
        the turtle forward. (Click to see full instructions)
      U3L14 - Assigning Random Value_instruction: |
        Write a program that simulates
        the rolling of two dice and reports their individual values as well as the
        sum. (click to see full instructions)
      U3L14 - concatenate simple_instruction: |
        Modify the write statement on line
        3 to combine text and variables together to make the app display a single
        line of text that shows the player's lives and score. (click to see full
        instructions)
      U3L14 - Mini Calculator embed_instruction: |
        You will be prompted for two numbers,
        one right after the other.  See what happens.  Enter different numbers until
        you get the idea.
      U3L14 - moving memory challenge1_instruction: |
        Using only the variables provided,
        assignment (=) and arithmetic (+ - * /) re-assign the values to make the console.log
        statement display the correct value(s).  (Click to see full instructions)
      U3L14 - moving memory challenge2_instruction: |
        Using only the variables provided,
        assignment (=) and arithmetic (+ - * /) re-assign the values to make the console.log
        statement display the correct value(s).  (Click to see full instructions)
      U3L14 - moving memory challenge3_instruction: |
        Using only the variables provided,
        assignment (=) and arithmetic (+ - * /) re-assign the values to make the console.log
        statement display the correct value(s).  (Click to see full instructions)
      U3L14 - moving memory challenge4_instruction: |
        Using only the variables provided,
        assignment (=) and arithmetic (+ - * /) re-assign the values to make the console.log
        statement display the correct value(s).  (Click to see full instructions)
      U3L14 - moving memory challenge5_instruction: |
        Using only the variables provided,
        assignment (=) and arithmetic (+ - * /) re-assign the values to make the console.log
        statement display the correct value(s).  (Click to see full instructions)
      U3L14 - moving memory challenge6_instruction: |
        Using only the variables provided,
        assignment (=) and arithmetic (+ - * /) re-assign the values to make the console.log
        statement display the correct value(s).  (Click to see full instructions)
      U3L14 - Unfortunate Events Free Play_instruction: |
        Follow the "Unfortunate
        Events" Worksheet and enter your code here to experiment.  We've pre-loaded
        the code you need to start.
      U3L14 - User Input Division calculator_instruction: |
        Write a program that acts
        as a simple calculator. (click to see full instructions)
      U3L14 - Variable ReAssignment pt2_instruction: |
        Trace the code and predict
        what you think will be printed to the console. Then add a console.log statement
        at the end of the program to see the last value of someNum to see if your
        full prediction is correct. (click to see full Instructions)
      U3L15 - add code to make count down work_instruction: |
        Write code to make the
        down arrow work as expected. (Click to see full instructions)
      U3L15 - Add reset button to UpDown app_instruction: |
        Add code so that clicking
        the start over button will reset the game and send you back to the main screen.
        (Click to see full instructions)
      U3L15 - clicker update score_instruction: |
        Add code to update the score when
        the apple is clicked. (Click to see full instructions)
      U3L15 - count upDown bug forget to set text_instruction: |
        Find the bug in the
        program and fix it. (Click to see full instructions)
      U3L15 - count upDown bug logic error wrong update_instruction: |
        Find the bug
        in the program and fix it. (Click to see full instructions)
      U3L15 - count upDown bug var not created globally_instruction: |
        Find the bug
        in the program and fix it. (Click to see full instructions)
      U3L15 - Debug forget to update var on reset in UpDown app_instruction: |
        Run
        the app, and click the up or down button until you get to the gameOverScreen.
        Click 'Start Over' and try the app again. Find and fix the issue in the
        code. (Click to see full instructions)
      U3L15 - Debug if never triggers in UpDown app_instruction: |
        Run the app and
        use the up and down arrows to try to hit the gameOverScreen. You can't! Find
        and fix the issue in the code. (Click to see full instructions)
      U3L15 - Debugging Simple If-statements =v==_instruction: |
        Run the app, and
        click the up button. Then restart and run it again, and click the down button.
        Find and fix the issue in the code. (Click to see full instructions)
      U3L15 - DEMO up down count practice app_instruction: |
        Try out the demo app
        (Click to see full instructions)
      U3L15 - global var example count up_instruction: |
        Look at the code for this
        app and see how the code works to update the count variable when the up arrow
        is clicked. (Click to see full instructions).
      U3L15 - mini clicker update score_instruction: |
        Add code to update the score
        when the apple is clicked. (Click to see full instructions)
      U3L15 - practice with setText_instruction: |
        Use setText to complete the click
        event handler for the down arrow. (Click to see full instructions)
      U3L15 - Simple If-statements in UpDown App_instruction: |
        Add an if statement
        so that the app changes screens when the count reaches -5. (Click to see full
        instructions)
      U3L15 - variable scoping problem debugging_instruction: |
        See if you can figure
        out why the code is no longer working. (Click to see full instructions)
      U3L15 click add lives_instruction: |
        Add lives to the clicker game that decrement
        by 1 when the background image is clicked (Click to see full instructions)
      U3L15 full clicker app_instruction: |
        Complete your clicker game! (Click to
        see full instructions)
      U3L16 - challenge say hi app_instruction: |
        Write a greeting to the user when
        they hit 'enter' in the text input, using the 'change' event. (Click to
        see full instructions)
      U3L16 - chaserApp_instruction: |
        Create your own "Chaser Game." (Click to
        see full instructions)
      U3L16 - chooseImages_instruction: |
        Replace the image in your application with
        one of your own. (Click to see full instructions)
      U3L16 - doubleQuotes_instruction: |
        Save a string inside a variable and log
        it to the console. (Click to see full instructions)
      U3L16 - hideAndShow_instruction: |
        Introducing textInput, getText and write.  First
        run the starter code several times.  Try to change what's written to the
        screen when the button is clicked. Then use getText to write to the screen
        what the user entered in the text box. GIF: U3L16 - useGetText.gif
      U3L16 - hideAndShowPractice_instruction: |
        You are given some starting code
        that puts an image and two buttons on the screen.  The image is initially
        hidden. Add two new event handlers: one for each button, that when clicked
        hide and show the image.
      U3L16 - image and text labels_instruction: |
        Introducing the setPosition command!  Replace
        the moveTo in the button-click event handler to use setPosition to move the
        button itself to a random location when it's clicked.
      U3L16 - images and text labels_instruction: "Introducing objects other than\nbuttons!
        - textLabels and images.  First try replacing your button with a\ntextLabel.
        \ Will the text respond to events just like the button?  Try connecting\nan
        event handler to it.  We've started you out with code similar to the result\nof
        the last level, you can copy your code from that level into here if you\nprefer.
        \n"
      U3L16 - images_instruction: "Introducing Images.  Try replacing the textLabel\nwith
        an image..  Will the image respond to events just like the button?  Try\nconnecting
        an event handler to it.  We've started you out with code similar\nto the result
        of the last level, you can copy your code from that level into\nhere if you
        prefer. \n"
      U3L16 - intro getText_instruction: |
        Add an event handler to the Submit button
        so that when the button is clicked it will display the name entered in the
        text box to the console.  Use getText to get the value out of the text box.
        (Click to see full instructions)
      U3L16 - introSetPosition_instruction: |
        Move the buttons to the bottom of the
        screen. (Click to see full instructions)
      U3L16 - introStrings_instruction: |
        Save a string inside a variable and log
        it to the console. (Click to see full instructions)
      U3L16 - nameAgeTemplate_instruction: |
        Add an Text Input box for the name and
        age. (Click to see full instructions)
      U3L16 - newEventTypes_instruction: |
        Experiment with different event types and
        select the one that you think is best. (Click to see full instructions)
      U3L16 - outputWithTextArea_instruction: |
        Output a message to the 'textArea'
        (Click to see full instructions)
      U3L16 - projectTemplate_instruction: |
        Create your own "Chaser App". (Click
        to see full instructions)
      U3L16 - quick double click_instruction: |
        Mini-Project.  The Quick Double-Click
        game.  In this simple game an object (an image) moves around, or pops up randomly
        on the screen, as the user clicks it.  The goal of our game will be to try
        to double-click the object before it moves.  Part of the challenge (and fun)
        here is creating this app from scratch.  You can look back at your previous
        work for examples, but it's fun to create something from scratch, too.  Try
        it!  For more details see the Activity guide for this lesson.
      U3L16 - setPosition to move button_instruction: |
        Introducing the setPosition
        command! Replace the moveTo in the button-click event handler to use setPosition
        to move the button itself to a random location when it's clicked.
      U3L16 - setPositionMoveButton_instruction: Use setPositon to moveButton
      U3L16 - setupMoveToRandom_instruction: |
        Modify the code so that the turtle
        moves to a random screen location when the button is clicked. (Click to see
        full instructions)
      U3L16 - singleSetPosition_instruction: |
        Move the button to the middle of the
        screen. (Click to see full instructions)
      U3L16 - stringsVsNumbers_instruction: |
        Run the program to see how strings and
        numbers behave with different arithmetic operators. (Click to see full instructions)
      U3L16 - text labels_instruction: |
        Use the textLabel command to replace the
        button in your program with a text label. (Click to see full instructions)
      U3L16 - textInput getText write_instruction: |
        Add an Text Input box for the
        name and age. (Click to see full instructions)
      U3L16 - toUpper_instruction: |
        Make the name of the user appear in uppercase
        (Click to see full instructions)
      U3L16 - use images_instruction: |
        Use the image command to replace the text
        label in your program with an image. (Click to see full instructions)
      U3L16 Mad Lib Clear Input_instruction: "Clear the user's previous text when\nthe
        Play Again button is clicked (Click to see full instructions) \n"
      U3L16 Mad Lib Demo_instruction: Mad Libs Demo - Try it out!
      U3L16 Mad Lib getText_instruction: "Before setting the text area with your\nMad
        Libs outline, get the user's text and incorporate their responses. (Click\nto
        see full instructions) \n"
      U3L16 Mad Lib setText_instruction: "When the Next button is clicked, set the\ntext
        area to have the main outline of your How-to Mad Libs (without the user's\ninput).
        (Click to see full instructions) \n"
      U3L16 Mad Lib Student Setup_instruction: |
        Back to Mad Libs: To get started,
        set up the two screens for your Mad Libs app (Click to show full instructions)
      U3L16 Mad Lib toUpper_instruction: "Apply the toUpperCase and toLowerCase string\nfunctions
        to the user's text. (Click to see full instructions) \n"
      U3L17 - getAndSetKeyValue_instruction: |
        Create an image like app. (Click to
        see full instructions)
      U3L17 - getKeyValue_instruction: |
        Run the program several times to observe
        how the setKeyValue commands now always arrive in order. (Click to see full
        instructions)
      U3L17 - introCallbacks_instruction: |
        Run the program several times to observe
        how the setKeyValue commands now always arrive in order. (Click to see full
        instructions)
      U3L17 - introKeyValue_instruction: |
        Explore your key value pairs with the Data
        Viewer. (Click to see full instructions)
      U3L17 - readKeyValue_instruction: |
        Explore your key value pairs with the Data
        Viewer. (Click to see full instructions)
      U3L17 - setKeyValue_instruction: |
        Create and update your key value pairs using
        setKeyValue. (Click to see full instructions)
      U3L17 - twoSetKeyValue_instruction: |
        Run the program several times to observe
        how often setKeyValue commands arrive out of order. (Click to see full instructions)
      U3L18 comparison operators_instruction: |
        Use console.log to print out the different
        boolean expressions below to see what information they return. (Click to see
        full instructions)
      U3L18 comparison operators_for_video_instruction: |
        Use `console.log` to print
        out the different boolean expressions below to see what information they return.
        (Click to see full instructions)
      U3L19 - Clicker Game Freeplay Area_instruction: |
        Use this App Lab area to improve
        your clicker game.  You should start by copy/pasting the code from your old
        game here.  We're showing a more full set of blocks in the toolbox - some
        of the things you might not have used yet.  Feel free to explore then and
        experiment if you want to.  Everything else you need should be shown.  Have
        fun!
      U3L19 - Debugging with consoleLog_instruction: |
        Add console.log() statements
        to find out the value of a and b after the first reassignment statement a
        = b; (Click to see full instructions)
      U3L19 - DEMO up down count practice app_instruction: |
        Try out the demo app
        (Click to see full instructions)
      U3L19 - do concatenate string with var_instruction: "We've given you a piece\nof
        code from the previous screen.  Try changing the value assigned to foo\nto
        see the string change. \r\nDo this: \r\n1. Try changing the value assigned\nto
        foo to see the string change. \r\n2. By only modifying the lines of code\nthat
        were given to you, try to get the output to say: “The value of foo is:\n9.
        \ And isn’t that fine.” \r\n"
      U3L19 - fix the var name syntax error v2_instruction: |
        Fix the error and get
        it to print the value of both variables (Click to see full instructions)
      U3L19 - fix the var name syntax error_instruction: |
        Fix the error and get it
        to print the value of both variables (Click to see full instructions)
      U3L19 - global var example count up_instruction: |
        Look at the code for this
        app and see how the code works to update the count variable when the up arrow
        is clicked. (Click to see full instructions).
      U3L19 - practice with setText_instruction: |
        Add another button that changes
        the text to the value of a new variable. (Click to see full instructions)
      U3L19 - Simple If-statements in UpDown App_instruction: |
        Add an if statement
        so that the app changes screens when the count reaches -5. (Click to see full
        instructions)
      U3L19 - Target Clicker App_instruction: |
        Investigate the new elements of the
        'chaser-game'
      U3L19 - test reassignment of two vars_instruction: |
        Predict the value of a
        and b. Add console.log statements to find out the actual value of a and b.
        (Click for full instructions)
      U3L19 - three basic ops of variables_instruction: |
        Add another variable called
        "lives" and set the value to 3. Print the value of the variable to the console.
        (Click to see full instructions)
      U3L19 - try out console log_instruction: "Try out console.log.  Do this: replace\nthe
        statement write(\"foo is: \" + foo) with console.log(\"foo is: \" + foo).
        \ Run\nthe program and you should see the output show up in the console area
        below\nthe workspace.  Then try adding a few more console.log statements.
        \ Display\nsome text.  Make another variable and display that.  \r\nThe app
        screen will\nbe blank -- that's the point.  With console.log you can test
        output behind\nthe scenes in a way the user cannot see.  \r\n\r\n\r\nGIF:
        U3L19-useconsolelog.gif"
      U3L19 - up down count practice app_instruction: |
        Set up the down button to
        decrease the value of count by 1 each time it is clicked. (Click to see full
        instructions)
      U3L19 - updating variables pt1_instruction: |
        This app is only SLIGHTLY different
        from the previous one, but much more dynamic.  See if you can figure out how
        and why the count is going up.  Once you've figured it out then you should
        be able to DO THIS: add a button to the app that when clicked makes the count
        go down, and updates the label.  When you're done the app should work as
        shown in the demonstration.  GIF: U3L19 - upDownCountApp.gif
      U3L19 - variable reassignment challenge pt2_instruction: |
        Make a prediction
        about the ending values of a, b, and c. Then use console.log to check your
        understanding (Click to see full instructions)
      U3L19 - variable reassignment part 1_instruction: |
        Predict the value of a and
        b. Add console.log statements to find out the actual value of a and b. (Click
        for full instructions)
      U3L19 - variable scope problem 2_instruction: |
        What is happening with foo?
        Play with the level to try to figure it out. (Click to see full instructions)
      U3L19 - variable scoping problem debugging_instruction: |
        See if you can figure
        out why the code is no longer work. (Click to see full instructions)
      U3L19 - write var and string with same name v2_instruction: |
        Fix the code so
        that the values of both variables print to the console. (Click to see full
        instructions)
      U3L19 - write var and string with same name_instruction: |
        Fix the code so that
        the value of both variables prints to the console. (Click to see full instructions)
      U3L2 Using Simple Commands (no tooltips)_instruction: |
        Draw a 1x1 square above
        and to the left of the turtle's starting position. Click to see full instructions.
      U3L2 Using Simple Commands_instruction: |
        Draw a 1x1 square above and to the
        left of the turtle's starting position. Click to see full instructions.
      U3L23 Chatbot Conditionals 1_instruction: |
        Add if, else if, and else statements
        to detect the movie genres Comedy, Romance, Action, and Horror. (Click to
        see full instructions)
      U3L23 Chatbot Intro 1a_instruction: |
        Store the user's input inside a variable
        and log it to the console.
      U3L23 Chatbot Intro 2_instruction: |
        Use string concatenation to store the user's
        input and assistant's answer into the conversation variable using the format
        "User: <input><bot name>: <default response>" . Log the conversation to
        the console.
      U3L23 Chatbot Intro 2a_instruction: |
        Display the conversation onto the "text_area"
        element. Optional: clear the user's input after every "change" event.
      U3L23 Chatbot Intro 3_instruction: |
        Add newline characters "\
        " to separate
        the user's input and the computer's response.
      U3L23 Chatbot Intro 4_instruction: |
        Use this level to make your chatbot look
        and work better!
      U3L23 Chatbot Intro_instruction: |
        Choose a specialization topic for your digital
        assistant. Create a basic digital assistant that takes the user's input and
        displays back a default response.
      U3L23 Digital Assistant 1_instruction: |
        Set the text_area element to display
        the user's input from the text_input element.
      U3L23 Digital Assistant 2_instruction: |
        Add the response "I don't know."
        after each of the user's inputs.
      U3L23 Digital Assistant 3_instruction: |
        Add the response "I don't know."
        after each of the user's inputs.
      U3L23 Digital Assistant 4_instruction: |
        Display the user's input and the digital
        assistant's response on different lines.
      U3L23 Digital Assistant 5_instruction: |
        Start the user's command with the
        phrase "User:" and the digital assistant's response with the phrase "Bot:"
      U3L23 Digital Assistant 6_instruction: |
        When the user hits Run, display the
        text "I'm a generic digital assistant. Ask me anything!"
      U3L24 Basic String Parsing 1_instruction: |
        Use the function "userInput.indexOf(<food>)"
        to check if the strings "pizza" or "soup" are anywhere in the user's
        response.
      U3L24 Chatbot Basic Conditionals_instruction: |
        Check out the project description
        for instructions. (Click to see full instructions.)
      U3L24 Chatbot Conditionals 2_instruction: |
        Adjust the "if" block to make
        the bot respond "I don't know that color." if the user types anything besides
        "blue"
      U3L24 Chatbot Conditionals 3_instruction: |
        Adjust the "if/else" block to
        make the bot respond to the colors blue, red, and green, and to two additional
        colors.
      U3L24 Chatbot Keyword Record_instruction: |
        Use the next level to record your
        digital assistant's keywords/phrases.
      U3L24 Chatbot Nested Conditionals_instruction: |
        Add a chained conditional with
        at least 3 "else if" statements to your personal assistant.
      U3L24 introIncludes_instruction: |
        Practice using the includes command. (Click
        to see full instructions)
      U3L24 Nested Conditionals 1_instruction: |
        Change all of the boolean expressions
        to use includes instead of ==. (Click to see full instructions)
      U3L24 Nested Conditionals 2_instruction: "Nest your movie genre if statements\ninside
        the if statements to check for a ? in the input. \n"
      U3L24 Nested Conditionals Bugs 2_instruction: |
        Fix the problem with the code
        so that all the conditions can be reached. (Click to see full instructions)
      U3L24 Nested Conditionals Bugs 3_instruction: |
        Fix the bugs that still exist
        in this program. Prove that the program works correctly.
      U3L24 Nested Conditionals Bugs_instruction: |
        Expose the bugs in this problem
        by typing inputs into the user-input box. Track which inputs cause unexpected
        outputs.
      U3L25 - drag out key event_instruction: |
        Set up an event handler to respond
        to keypress events, and display event.key in the console. Hit keys on the
        keyboard to see what happens. (Click to see full instructions)
      U3L25 - play sound when up key_instruction: |
        Change the code so the sound will
        only play when the up arrow is pressed. (Click to see full instructions)
      U3L25 Chatbot Strings_instruction: |
        1. Adjust your digital assistant to evaluate
        inputs the same way whether the inputs are capitalized or lowercase. 2. If
        a user asks "What is <phrase>?", where <phrase> is an input your digital
        assistant does not recognize, make your digital assistant respond "I don't
        know what <phrase> is."
      U3L25 String Parsing 1_instruction: |
        Given the string "Wisdom begins with
        wonder." what is the index of the following characters W, t, w, ., d, and
        k? Confirm your expectation using the string.indexOf() function.
      U3L25 String Parsing 2_instruction: |
        Use str.length to find the length of the
        strings “Hello World”, “Computer science rocks!", and “I promise to do my
        homework every day.”
      U3L25 String Parsing 3_instruction: |
        Write a password length checker that writes
        “yes” to the console if a string has a length greater than 10, or “no” if
        it is less than or equal to 10.  Test your function using two strings, one
        that will satisfy each conditional option.
      U3L25 String Parsing 4_instruction: |
        You are given the string "Wisdom begins
        with wonder." Use the string.substring(begin, end) function to print "begin"
        and "nder" to the console.
      U3L25 String Parsing 5_instruction: "Fill in the function, findBeginNder()\nto
        get the strings \"begin\" and \"nder\" from a sentence no matter where\nin
        the sentence they exist.\r\nPrint the strings and their index to the console.\n"
      U3L25 String Parsing 6_instruction: |
        Write a function that takes a name (first
        last) and reorders it (last, first).
      U3L25 String Parsing 7_instruction: |
        You are given the string “The earth has
        music for those who listen.” Manipulate it using the functions str.toUpperCase()
        and str.toLowerCase().
      U3L26 AND operator_instruction: |
        Update the genre and rating if statements
        to give only one movie suggestion at a time. (Click to see full instructions)
      U3L26 Chatbot Compound Conditionals_instruction: |
        Update your digital assistant
        to include at least one each of AND, OR, and NOT
      U3L26 Chatbot Final_instruction: |
        Update your digital assistant to include
        at least one each of AND, OR, and NOT
      U3L26 Compound Logic_instruction: |
        Write a conditional statement that detects
        if a command contains all the phrases "2000" "animated" and "G-rated."
        If all these phrases are detected, make Movie Bot respond "The top grossing
        animated and G-rated film in the 2000 decade was Finding Nemo."
      U3L26 NOT operator_instruction: "Write a conditional statement that detects\nif
        a command does not contain the phrase \"bad.\" If \"bad\" is not detected,\nmake
        Movie Bot respond normally. Otherwise, make Movie Bot respond \"Sorry,\nI
        don't know about bad movies.\" \n"
      U3L26 OR operator_instruction: |
        Update the if statement to use an OR to check
        for a "?" as well as who, what, where, when, why, how in the user input.
        (Click to see full instructions)
      U3L27 Chatbot Final_instruction: |
        Make your digital assistant awesome and when
        you are finished, ask one of your classmates to test it for you using the
        activity guide. As you add features to your digital assistant, track them
        on the next level.
      U3L2_Turtle3by3Grid_instruction: |
        Draw a 3x3 grid to the front and right of
        the turtle as efficiently as possible. The turtle should end at its original
        location, facing its original direction. (Click to see full instructions)
      U3L2_TurtleSquare_right_instruction: |
        Draw a square to the front and to the
        right of the starting location. (Click to show full instructions)
      U4 - add createRecord to contacts App_instruction: |
        Add code to your contacts
        app so that newly-added contacts are saved in a table. (Click to see full
        instructions)
      U4 - Add Row By Hand_instruction: |
        Add a new record to your table in the Data
        Viewer. (Click to see full instructions)
      U4 - Charts - drawChartFromRecords 1_instruction: |
        Use the drawChartFromRecords
        block to create a scatter plot from the table in the database. (Click to see
        full instructions)
      U4 - Charts - drawChartFromRecords Options 1_instruction: |
        Add a title to your
        chart and change the colors of your lines using the options parameter of drawChartFromRecords.
        (Click to see full instructions)
      U4 - Charts - drawChartFromRecords Options 2_instruction: |
        Look through the
        drawChartFromRecords API and choose some more options to customize. (Click
        to see full instructions)
      U4 - Charts - drawChartsFromRecords 1_instruction: |
        Add screen element, pull
        out drawCharts block, run the program!
      U4 - Charts - Export Data_instruction: |
        Export the data from the “ages” table
        as a CSV file, then remix this app and import the CSV file. (Click to see
        full instructions)
      U4 - Charts - Import Data 1_instruction: |
        Download the CSV file we’ve provided,
        and then use the data viewer to import the data from the file into the “mytable”
        table. (Click to see full instructions)
      U4 - Charts - Import Data 2_instruction: |
        Call readRecords on “mytable” and
        print each record to the console. (Click to see full instructions)
      U4 - Charts - Line Chart 1_instruction: |
        Create a line chart showing the change
        in popularity of “#tbt” over time. (Click to see full instructions)
      U4 - Charts - Line Chart 2_instruction: |
        Add a second line to your chart to
        show the change in popularity of both “#tbt” and “#nofilter” at the same time.
        (Click to see full instructions)
      U4 - Charts - Line Chart Template_instruction: This is a template.
      U4 - Charts - Remixing Apps with Data_instruction: |
        Run this app and see what
        it prints to the console. Then remix the app and run the remixed version to
        see what happened to the data. (Click to see full instructions)
      U4 - Charts - Scatter Chart_instruction: |
        Create a scatter plot of the “rottenTomatoes”
        table, using the new table and column names. (Click to see full instructions)
      U4 - CreateRecord - 1_instruction: |
        Add a createRecord command and run the
        program. (Click to see full instructions)
      U4 - CreateRecord - 2.5_instruction: |
        Change the table name in createRecord
        then check the Data Viewer to see the new table. (Click to see  full instructions)
      U4 - CreateRecord - 2_instruction: |
        Change the name from "Alice" to something
        else in the createRecord command.  Run the program and use the Data Viewer
        to see the changes to your table. (Click to see full instructions)
      U4 - CreateRecord - 3_instruction: |
        Use createRecord to add the song object
        as a record to a table. (Click to see full instructions)
      U4 - CreateRecord - 4_instruction: |
        Run the program. Verify the song object
        was added to the database. Note the callback function now displays the copy
        of the record sent back back by the database. (Click to see full instructions)
      U4 - CreateRecord - 5_instruction: |
        Add a property to the JavaScript object,
        then run the program.  View the data table and see how changing the object
        affects the data table. (Click to see full instructions)
      U4 - debug column names are case sensitive_instruction: |
        Change song.title
        to song.Title (capital T).  And run the program.  Check the data table  (Click
        to see full instructions)
      U4 - deleteRecords 0_instruction: |
        Use the deleteRecord command with default
        values. Verify the record was deleted. (Click for full instructions).
      U4 - deleteRecords 1_instruction: |
        Find the id of "Little Bunny Foo Foo"
        in the data table "mySongs".  Use the deleteRecord command to delete it.  See
        what happens when you try to delete an ID a second time. (Click for full Instructions).
      U4 - deleteRecords 2 delete object_instruction: |
        Use the song object to delete
        multiple objects in the database by changing only the "id" property. (Click
        for full Instructions).
      U4 - deleteRecords 2_instruction: |
        Using the data viewer, find the id of a
        a record you want to delete. Use the deleteRecord command to delete it. (Click
        for full instructions).
      U4 - Edit Data Table by Hand_instruction: |
        View the data table and click edit
        next to each row.  Add the artists names for each song by hand. (Click to
        see full instructions)
      U4 - Exploring Data Tools - Template_instruction: |
        Use createRecord to add
        the song object as a record to a table. (Click to see full instructions)
      U4 - fix contacts by hand in data table_instruction: |
        Use the data viewer to
        add rows to the data table.  Add the original hard-coded contacts from your
        app to the database. (Click to see full instructions)
      U4 - last stage test adding contcts_instruction: |
        Confirm that new contacts
        you add are saved to the database.  Verify that after restarting your app,
        the contacts you added no longer show in the app, but still exist in the database.
        (Click to see full instructions)
      U4 - Objects - accessingPropertiesInArray_instruction: |
        Access the properties
        of the objects stored in an array. (Click to see full instructions)
      U4 - Objects - arraysOfObjects_instruction: |
        Create an array called "students"
        and add all 5 student objects to the array. (Click to see full instructions)
      U4 - Objects - createContactObject_instruction: |
        Construct a new object from
        the user inputs, and append it to your array. (Click to see full instructions)
      U4 - Objects - createContactsData_instruction: |
        Add values to the three contact
        objects provided in the starter code. (Click to see full instructions)
      U4 - Objects - createDotNotation_instruction: |
        Create a student Object yourself.
        Add properties to your object one at a time using dot notation. (Click to
        see full instructions)
      U4 - Objects - createObject_instruction: |
        Create an object with at least 3
        properties and display it in the Debug Console. (Click to see full instructions)
      U4 - Objects - dotNotation_instruction: |
        Use dot notation to display individual
        properties of the object. (Click to see full instructions)
      U4 - Objects - eventHandlersToSwitchScreen_instruction: |
        Attach event handlers
        to the "Add Contact" and "Go Back" buttons that allow the user to switch
        screens. (Click to see full instructions)
      U4 - Objects - eventParameter_instruction: |
        Trigger both the keyboard and mouse
        event and examine the event objects displayed in the console. Why might an
        object be the best way to store this information? (Click to see full instructions)
      U4 - Objects - exemplarContactsApp_instruction: |
        Use the Contacts app and then
        add a contact of your own. (Click to see full instructions)
      U4 - Objects - loopingArray_instruction: |
        Loop over your array of students
        and print the name of every students. (Click to see full instructions)
      U4 - Objects - loopingArray2_instruction: |
        Loop over your array of students
        and print the name and grade of every student. (Click to see full instructions)
      U4 - Objects - loopingCompoundConditions_instruction: |
        Loop over the array
        of students and display the information of students who are present and in
        the 11th grade. (Click to see full instructions)
      U4 - Objects - loopingConditions_instruction: |
        Loop over your array of student
        objects and display the names of every student who is present in class. (Click
        to see full instructions)
      U4 - Objects - pullValues_instruction: |
        Create an event handler for the "Save
        Contact" button that displays the contents of the 4 text input fields in
        the console. (Click to see full instructions)
      U4 - Objects - readStarterCode_instruction: |
        Familiarize yourself with the
        starter code and UI elements provided. (Click to see full instructions)
      U4 - Objects - resetIndexAndShow_instruction: |
        Add code to your event handler
        for the "Save Contact" button so that when a new contact is added, the inputs
        are cleared, the screen is switched, and the correct contact is shown. (Click
        to see full instructions)
      U4 - Objects - showContact1_instruction: |
        Add code to the showCurrentContact
        function to show the name of the contact stored at the currentIndex of your
        array. (Click to see full instructions)
      U4 - Objects - showContact2_instruction: |
        Add the phone number and birthday
        text to your text area. (Click to see full instructions)
      U4 - Objects - showContact3_instruction: |
        Display the image information for
        each contact. (Click to see full instructions)
      U4 - Objects - showSampleImage_instruction: |
        Attach an event handler to the
        image URL text input so that the user can confirm their image will work as
        expected. (Click to see full instructions)
      U4 - Objects - writeWrap_instruction: |
        Use the wrap function to prevent currentIndex
        from leaving the bounds of your array. (Click to see full instructions)
      U4 - Read Record - 1.2_instruction: "Place a console.log command below the\nreadRecords
        command. (Click to see full instructions)\r\n"
      U4 - Read Record - 1.3_instruction: "Add a console.log command inside the callback\nfunction.
        (Click to see full instructions)\r\n"
      U4 - Read Record - 1_instruction: "Use console.log to display the records returned\nby
        a call to readRecords. (Click to see full instructions)\r\n"
      U4 - Read Record - 2_instruction: "Change the table name so that the records\nare
        read from the new table. (Click to see full instructions)\r\n"
      U4 - Read Record - 3_instruction: "Change the name of the table in a readRecords\ncommand
        to read from a table that does not exist. (Click to see full instructions)\r\n"
      U4 - Read Record - 4.1_instruction: "Use indexes and dot notation to reference\nvalues
        in the response from the database. (Click to see full instructions)\r\n"
      U4 - Read Record - 4_instruction: "Print out each record return from the readRecords\ncall
        individually. (Click to see full instructions)\r\n"
      U4 - Read Record - 5_instruction: "Using a for loop, display the title of each\nmovie
        in your database. (Click to see full instructions)\r\n"
      U4 - Read Record - part 1 - template_instruction: "Use console.log to display\nthe
        records returned by a call to readRecords. (Click to see full instructions)\r\n"
      U4 - ReadRecords - Contacts App 1_instruction: |
        Use readRecords to copy the
        data in your database into your "contacts" global variable and call showCurrentContact.
        (Click to see full instructions)
      U4 - ReadRecords - Contacts App 2_instruction: |
        Create a function called refreshLocalData.
        (Click to see full instructions)
      U4 - ReadRecords - Contacts App 3_instruction: |
        Add a call to "refreshLocalData"
        to the callback function of the createRecord you use to add a new contact
        to your database. (Click to see full instructions)
      U4 - ReadRecords - Contacts App 4_instruction: |
        Create a "Delete" button.
        (Click to see full instructions)
      U4 - ReadRecords - Contacts App 5 make delete work_instruction: |
        Create an
        event handler for the "Delete" button you created. (Click to see full instructions)
      U4 vigenere cipher 2_instruction: Instruções
      U4L02 - Objects - createObject_instruction: "Create an object with at least\n5
        values including at least one string and one number. (Click to see full\ninstructions)
        \n"
      U4L02 - Objects - eventParameter_instruction: |
        Trigger both the keyboard and
        mouse event and examine the event objects displayed in the console. Why might
        an object be the best way to store this information? (Click to see full instructions)
      U4L02 - Objects - Template1_instruction: |
        Create an object with at least 3
        properties and display it in the Debug Console. (Click to see full instructions)
      U4L06 Data Storage 1_instruction: "Fill in your name instead of \"Enter Your\nName\",
        run the app and click the button. Run it multiple times with different\nnames!
        Watch the console and use the ‘View Data” button to see how the table\nis
        updated. As you play around make sure you can explain the purpose of each\nof
        the circled parts of the diagram.\r\n\r\n"
      U4L06 Data Storage 2_instruction: "The app is a continuation of the previous\none
        we started. Add a text label to collect the users name and use that as\nthe
        data input for the record.\r\n\r\nRun the app and click the button multiple\ntimes
        and see what happens. Is there a problem you notice? "
      U4L06 Data Storage 3_instruction: |
        We want to improve the user experience.
        Once they have submitted their data for storage, it would be nice to clear
        the textbox.  Update your app to clear the textbox after the data is stored.
      U4L06 Data Storage 4_instruction: |
        Add a label and drop down box, to your app
        and save the data to your JSON object and add it to your table. Make sure
        to reset the dropdown after the data is stored.
      U4L06 Data Storage 5_instruction: "Add a couple radio buttons or checkboxes\nto
        our app. Then find a way to collect the data from those. \n"
      U4L06 Data Storage 6_instruction: " Use one of the getTime() and getUserId()\nblocks
        to collect additional data. \n"
      U4L06 Data Storage 7_instruction: |
        Add a second screen to the sample app we
        have been building to capture an image from a user. Return to screen 1 after
        the JSON object has been stored in the table.
      U4L15 Read Data 1_instruction: |
        Run the level and see what happens. Then edit
        the code to make it print a different column of information.
      U4L15 Read Data 2_instruction: "Student should create a sentence which puts\ntogether
        all the pieces from a record.\r\n\r\n<<Name>> is <<Age>> years old\nand like
        <<Food>>"
      U4L15 Read Data 3_instruction: "Print the sentence using the first JSON object\nin
        the array\r\n\r\n"
      U4L15 Read Data 4_instruction: "\r\nUse a random record from the list of records\nto
        display your sentence."
      U6 - Final Project - Project Level_instruction: |
        Build your final project here.
        (Click to see full instructions)
      U6 - updateRecord - Callback Success Parameter_instruction: |
        Add an if-else
        block inside the callback function for updateRecord. (Click to see full instructions)
      U6 - updateRecord - Contacts - Edit event handler_instruction: |
        Write event
        handlers for the Edit Contacts UI elements. (Click to see full instructions)
      U6 - updateRecord - Contacts - Edit UI_instruction: |
        Set up the UI elements
        needed to edit contacts. (Click to see full instructions)
      U6 - updateRecord - Contacts - Save edited contact_instruction: |
        Use updateRecord
        to store the user's edits in the database. (Click to see full instructions)
      U6 - updateRecord - Default Block_instruction: |
        Use updateRecord to change
        the record for "Eye of the Tiger." (Click to see full instructions)
      U6 - updateRecord - Update Nonexistent Record_instruction: |
        Force updateRecord
        to fail by changing the ID of songToUpdate. (Click to see full instructions)
      Underground Avoiding Lava_instruction: A lava esconde-se debaixo de alguns destes
        blocos, e vais precisar de tapá-la antes de avançares. Aqui vai dar-te jeito
        um comando "se". Acrescenta um comando "mover para a frente" no lugar correto
        para escavares estes blocos.
      Underground If Statements_instruction: Agora as coisas começam a ficar difíceis.
        Escava 3 redstone, mas não caias na lava. Utiliza um comando "se" para colocares
        empedrado sobre qualquer lava que destapares.
      Underground Iron_instruction: Caminhar sobre lava derretida é má ideia. Coloca
        empedrado para criares uma ponte, depois escava pelo menos dois dos blocos
        de ferro.
      Underground Mine in a Circle_instruction: Arranja maneira de obteres 5 diamantes
        e 7 redstone! Experimenta utilizar um comando de repetição no interior de
        um comando de repetição para caminhares num quadrado.
      Underground Mining Coal_instruction: Vais encontrar os recursos mais valiosos
        no subsolo, mas pode fazer escuro lá em baixo. Coloca pelo menos 2 tochas
        e escava pelo menos 2 carvões.
      Underground Test Level_instruction: Colete todos os minérios!
      Unicorn Tag_instruction: |
        Take a look at this project.  Do you see how it was
        made?
      Vigenere_instruction: Test
      weird_playLab_instruction: |
        About My Robot Project! Write code so that clicking
        on each bird shows a new fact about your robot.
      WhileAdventure_instruction: |
        Our adventurer wants to collect coins. Can you
        help her grab as many as she can using only one remove 1 block?
      'Widget: Black and White Pixelation_instruction': |
        Now make your own image!
        We've started you off with a 10x10 canvas but you can make it whatever size
        you want. Happy pixeling!
      'Widget: Color Pixelation_instruction': |
        Requirements: The icon must be 16x16
        pixels. You must use the Pixelation Widget to encode the bits of color information.
        The image must be encoded with at least 12 bits per pixel.
      'Widget: Text Compression_instruction': |
        Look for patterns (repeated words
        or phrases) in the text. Enter the patterns you see into the dictionary on
        the right. As you type entries into the dictionary, the symbol for the entry
        is inserted into the text in place of the pattern.
      XML Scratchpad_instruction: Using this test level to grab xml for unit tests
