"pt-PT":
  data:
    instructions:
      2-3 Artist 1 new_instruction: Oi, eu sou um artista. Você pode escrever códigos
        para me fazer desenhar quase qualquer coisa. Use alguns blocos para me fazer
        desenhar sobre as linhas cinzas na imagem. (Cada linha tem o comprimento de
        100 pixels)
      2-3 Artist 11_instruction: |
        Faça uma borda na placa de pare criando um octógono
        com 8 lados, com 100 pixels de comprimento cada. Quantos graus você deve virar? (Dica:
        quanto é 360 divido por 8?)
      2-3 Artist 12_instruction: |
        Configure o bloco "repita vezes" para que ele crie
        um "círculo" para terminar o globo ocular. Se cada movimento virar um grau para a direita,
        quantas vezes você precisa repetir para completar o círculo? 180? 360? 500?
      2-3 Artist 2 new_instruction: |
        Esta casa tem uma parede inacabada. Cada lado
        tem 100 pixels de comprimento, mas a parede inacabada tem apenas 50. Complete a parede.
      2-3 Artist 2_instruction: "This house has a half-finished wall. Each side is\n100,
        but the half-finished wall is only 50. Complete the wall. \n"
      2-3 Artist 3.4_instruction: |
        O bloco pule move o artista sem desenhar.
        Desenhe a linha tracejada usando os bloco pule e desenhe.
      2-3 Artist 3_instruction: Esse chapéu tem 100 pixels de altura. Desenhe um chapéu
        que tenha 70 pixels a menos.
      2-3 Artist 3new_instruction: |
        O chapéu vermelho tem 100 pixels de altura. Termine o desenho
        de um chapéu preto que seja 70 pixels menor. A largura do chapéu preto é de 50 pixels.
      2-3 Artist 4_instruction: Ajude-me a completar a casa para o gato.
      2-3 Artist 5_instruction: |
        Substitua esse código por um bloco "repita vezes"
        para desenhar a mesma casa usando apenas 3 blocos.
      2-3 Artist 6_instruction: 'Essa casa precisa de um telhado! Desenhe o triângulo.
        Dica: todos os 3 lados têm o mesmo comprimento.'
      2-3 Artist 7_instruction: |
        Termine de desenhar a metade direita da última janela.
        Cada quadrado da janela tem 25 pixels.
      2-3 Artist 8_instruction: |
        Complete os quartos para cada um dos animais dividindo
         o retângulo em 2 quadrados de mesmo tamanho. O retângulo tem 200 pixels de largura
        e 100 pixels de altura.
      2-3 Artist 9_instruction: Termine esta pipa
      2-3 Artist Assessment 1_instruction: 'Avaliação: termine de desenhar o último
        dente, 25 pixels de largura e 25 pixels de altura.'
      2-3 Artist Debugging 1_instruction: Você consegue fazer esse chapéu com 100
        pixels de altura?
      2-3 Artist Debugging 10_instruction: |
        O controlador de direção do controle do meu jogo
        é muito estreito. Dica: faça-o 10 pixels mais largo
      2-3 Artist Debugging 11_instruction: Ajuda-me a terminar o meu lindo floco de
        neve. Quantas vezes preciso fazer "repetir" para conseguir acabar?
      2-3 Artist Debugging 12_instruction: Eu devo adicionar uma onda do mar nessa
        cena. Você pode me ajudar?
      2-3 Artist Debugging 2_instruction: 'O código para os três bigodes que você
        vê está errado. Dica: cada bigode tem o comprimento de 75 pixels. Corrija
        esse código para desenhar os bigodes.'
      2-3 Artist Debugging 3_instruction: |
        Meu barco tem um buraco! Você consegue corrigi-lo
        alterando o ângulo da linha? Dica: o último ângulo está 15 graus fora de lugar.
      2-3 Artist Debugging 4_instruction: |
        Qual é a imagem que estamos tentando
        desenhar? Termine de conectar os pontos usando as linhas e ângulos apropriados.
      2-3 Artist Debugging 5_instruction: |
        O código para a perna e para o pé que você vê
        está errado. Dica: o pé está muito comprido, pode ser necessário excluir um passo (pé... passo... trocadilho)
      2-3 Artist Debugging 6_instruction: |
        Parece que estou sentado em uma cadeira
        sem uma perna. Edite os blocos para desenhar a perna.
      2-3 Artist Debugging 7_instruction: |
        Parece que o C no código está desenhado ao contrário.
        Você consegue fazê-lo parecer com um C?
      2-3 Artist Debugging 8_instruction: |
        Meu cata-vento não está pronto. Quantas
        vezes eu preciso repetir para terminá-lo?
      2-3 Artist Debugging 9_instruction: |
        O código para este caule está incorreto. Dica:
        o ângulo está 60 graus fora de lugar
      2-3 Artist Debugging Assessment 1_instruction: |
        Esta forma é muito pequena. Você
        pode fazê-la maior? Dica: ela deve ter 75 pixels a mais de cada lado.
      2-3 Artist Free Play_instruction: Atividade livre! Desenhe o que você quiser.
      2-3 Artist Functions 1_instruction: |
        Olá. Mim artista zumbi. Mim ama desenhar!
        Me ajude a desenhar os óculos quadrados. Dica: a haste entre as lentes é
        25 pixels menor que o comprimento do quadrado.
      2-3 Artist Functions 10_instruction: |
        Aqui temos duas funções, uma para desenhar uma
        engrenagem grande e outra para desenhar uma engrenagem pequena. Use-as para desenhar o interior de uma máquina!
      2-3 Artist Functions 11.5_instruction: |
        Aqui está a mesma função "Desenhe um hexágono".
        O que acontece se você virar apenas 60 graus a cada repetição?
      2-3 Artist Functions 11_instruction: |
        Renomeamos a função "desenhe um quadrado"
        como "desenhe um hexágono", mas ela ainda desenha apenas quadrados! Você consegue
        modificar a função "desenhe um hexágono" para desenhar um hexágono com lados de 50 pixels, e
        desenhar a imagem usando a função?
      2-3 Artist Functions 12_instruction: |
        Funções são ótimas para desenhar
        coisas complexas várias vezes. Você consegue usar a função "desenhe uma flor"
        para preencher o resto do canteiro de plantas? (Dica: as plantas estão todas separadas
        por um comprimento de 100 pixels)
      2-3 Artist Functions 13_instruction: |
        Fornecemos quatro funções para você.
        Use-as da forma que quiser dentro de um ou mais laços para criar imagens que
        você pode compartilhar com seus amigos. Pressione "Executar" para ver um exemplo.
      2-3 Artist Functions 2_instruction: |
        As funções permitem que você defina novos blocos! Movemos
        os blocos para desenhar um quadrado para dentro de uma função chamada "desenhe um quadrado".
        Você consegue usar a função "desenhe um quadrado" para criar os óculos? Os quadrados são separados
        por 75 pixels.
      2-3 Artist Functions 3_instruction: |
        Edite a função para desenhar um quadrado com
        lados de 115 pixels de comprimento e desenhe os óculos maiores. Agora, os quadrados estão separados por 45 pixels.
      2-3 Artist Functions 4_instruction: |
        Use o bloco "repita" para desenhar esses
        3 quadrados.
      2-3 Artist Functions 7_instruction: |
        Use a função "desenhe uma casa" para desenhar
        duas casas usando dois parâmetros diferentes. (Dica: a primeira casa tem 100 pixels).
      2-3 Artist Functions 9_instruction: |
        Esta é uma função para flocos de neve. Experimente
        usá-la para criar uma cena de inverno! Esse nível é livre, então não há
        desafios para resolver. Divirta-se!
      2-3 Artist Loops 1_instruction: |
        Você consegue fazer um hexágono com lados de
        100 pixels de comprimento para terminar a célula? Lembre-se, isso significa que você só vai
        precisar virar 60 graus!
      2-3 Artist Loops 10_instruction: |
        O que acontece com o design quando fazemos nossa
        etapa final com metade do comprimento?
      2-3 Artist Loops 11_instruction: |
        Agora, vamos colocar *outro* laço em torno de toda
        a criação! Não se esqueça de adicionar um ângulo ao final do laço externo.
      2-3 Artist Loops 2_instruction: |
        Agora, use um bloco "repita" para transformar a célula em uma
        concha.
      2-3 Artist Loops 4_instruction: |
        Quer ver o que acontece quando repetimos essa
        forma várias vezes usando um laço?
      2-3 Artist Loops 5_instruction: |
        Agora, vamos fazer uma pequena alteração no laço
        e ver como nossas imagens ficam diferentes.
      2-3 Artist Loops 6_instruction: |
        Adicione mais um movimento e outra ação de virar dentro
        do laço e veja como seu design muda.
      2-3 Artist Loops 7_instruction: |
        Podemos usar laços para criar todos os tipos de polígonos. Você
        consegue criar um losango dentro desse hexágono?
      2-3 Artist Loops 8_instruction: Vamos colocar ambos os elementos dentro de um
        laço.
      2-3 Artist Loops 9_instruction: "Vamos repetir os mesmos elementos, mas \nagora
        vamos adicionar alguma distância entre eles.\r\nUse o mesmo código usado \nanteriormente,
        mas adicione um passo à frente no final do laço externo."
      2-3 Artist Loops New 1_instruction: |
        Vamos desenhar a cabeça do robô! Você pode
        fazer um quadrado com lados de 100 pixels?
      2-3 Artist Loops New 10_instruction: |
        Agora vamos conectar um monte de V's,
        desenhando-os em um laço.
      2-3 Artist Loops New 11_instruction: |
        Dessa vez, vamos desenhar 24 vezes. Adicione
        uma ação de virar à esquerda em 30 graus ao código e coloque tudo em um bloco repita.
      2-3 Artist Loops New 12_instruction: Desenhe um diamante com lados de 100 pixels.
      2-3 Artist Loops New 13_instruction: Agora, desenhe o diamante 3 vezes em um
        laço.
      2-3 Artist Loops New 14_instruction: |
        Agora, vamos desenhar o diamante 10 vezes,
        mas vamos rotacionar 90 graus entre cada diamante.
      2-3 Artist Loops New 15_instruction: Desenha algo divertido.
      2-3 Artist Loops New 2_instruction: |
        Aqui temos alguns dos códigos que você usou para desenhar
        aquele quadrado. O que acontece se você usar o bloco repita para executar esse código 4 vezes?
      2-3 Artist Loops New 9_instruction: |
        Desenhe um V simples com ambos os lados com 50
        pixels para completar a seta.
      2-3 Artist Match Hex Pic_instruction: 'Correspondência: ajude a terminar o hexágono.'
      2-3 Artist Match Rho Pic_instruction: 'Correspondência: termine o código que
        falta.'
      2-3 Artist Match Sq Pic_instruction: 'Correspondência: complete o código que
        falta'
      2-3 Artist Match Tri pic_instruction: 'Correspondência: preencha o código que
        falta.'
      2-3 Artist Nested Loops 1_instruction: "Você usou laços para desenhar formas
        antes,\nmas você sabia que pode colocar um laço dentro de outro laço?\r\nRepita
        este bloco\nde código inteiro 3 vezes para desenhar o padrão."
      2-3 Artist Nested Loops 10_instruction: |
        Repita este código 12 vezes para completar
        o padrão.
      2-3 Artist Nested Loops 11_instruction: |
        Repita este código 4 vezes para completar
        o padrão, vire 90 graus após cada círculo.
      2-3 Artist Nested Loops 12_instruction: |
        Repita este código 12 vezes para completar
        as espirais.
      2-3 Artist Nested Loops 2_instruction: |
        Agora, repita o triângulo 6 vezes. Depois
        de cada triângulo, você precisa virar 60 graus antes de desenhar o próximo.
      2-3 Artist Nested Loops 3_instruction: |
        Você vai precisar repetir o triângulo 12
        vezes para desenhar este padrão. Divida o número de graus em um círculo (360)
        pelo número de formas que você está desenhando (12) para descobrir quanto virar
        depois de cada forma.
      2-3 Artist Nested Loops 4_instruction: |
        Repita este diamante 12 vezes para desenhar
        uma flor. Dica: 12 diamantes são como os 12 triângulos que você fez - quanto
        você precisa virar depois de cada forma?
      2-3 Artist Nested Loops 5_instruction: |
        Preencha as janelas deste edifício com
        um laço aninhado. As janelas têm 20 pixels de comprimento e são separadas por 20 pixels.
      2-3 Artist Nested Loops 6_instruction: |
        Esse dinossauro tem 8 espinhos ao longo
        de sua cauda. Cada espinho tem 30 pixels de comprimento. Repita o triângulo 8 vezes, mas
        lembre-se de avançar depois de cada um.
      2-3 Artist Nested Loops 7_instruction: |
        Repita esse triângulo 10 vezes para desenhar
        o sol. Você vai precisar mover e virar depois de cada triângulo. Você pode descobrir
        quanto virar dividindo o número de graus em um círculo pelo
        número de formas que o compõem.
      2-3 Artist Nested Loops 8_instruction: |
        Agora, vamos adicionar um pouco de grama à imagem.
        Cada tufo de grama é separado por 50 pixels.
      2-3 Artist Nested Loops 9_instruction: |
        Vamos terminar essa imagem adicionando
        uma flor. Repita o diamante 12 vezes para desenhar sua flor.
      2-3 Artist Nested Loops Free Play_instruction: |
        Atividade livre. Desenhe algo legal
        com laços aninhados.
      2-3 Bee Conditionals 1_instruction: |
        Olá! Eu sou uma abelha. Ajude-me a coletar o néctar
        da flor.
      2-3 Bee Conditionals 10_instruction: "As flores roxas podem ter 1 ou 0 néctar.\nTenha
        cuidado para não coletar néctar de uma flor roxa se ela não\ntiver néctar.\r\n"
      2-3 Bee Conditionals 11_instruction: Colete néctar onde as flores têm néctar.
      2-3 Bee Conditionals 12_instruction: |
        Use um laço para verificar e coletar o néctar
        de todas essas flores.
      2-3 Bee Conditionals 13_instruction: |
        Colete néctar e produza mel. Dica:
        o que acontece se você usar a condição "se houver néctar" em uma flor vermelha? Você pode
        completar isso com um laço?
      2-3 Bee Conditionals 14_instruction: |
        Colete néctar e produza mel. Tenha cuidado
        para não coletar néctar de uma flor roxa se ela não tiver néctar.
      2-3 Bee Conditionals 15_instruction: Colete néctar das quatro flores.
      2-3 Bee Conditionals 2_instruction: |
        Olá, eu sou uma abelha! Ajude-me a coletar todo
        o néctar das flores. Use um laço.
      2-3 Bee Conditionals 3_instruction: |
        Ajude-me a coletar todo o néctar das
        flores e a produzir mel. Use um laço.
      2-3 Bee Conditionals 4_instruction: |
        Ajude-me a coletar todo o néctar das
        flores e a produzir todo o mel.
      2-3 Bee Conditionals 5_instruction: |
        As flores roxas podem ter 1 ou 0
        néctar, mas você não sabe quanto! Tenha cuidado para não coletar néctar de
        uma flor roxa se ela não tiver néctar. Verifique se o néctar é igual a 1
        usando o bloco se.
      2-3 Bee Conditionals 6_instruction: |
        Verifique essa flor com um bloco "se"
        para ver se há algum néctar disponível.
      2-3 Bee Conditionals 7_instruction: |
        Colete o néctar de cada flor que
        tiver néctar disponível.
      2-3 Bee Conditionals 8_instruction: |
        Este campo tem flores vermelhas e roxas.
        As flores vermelhas têm uma quantidade de néctar conhecida, mas o néctar das flores roxas é desconhecido.
        Colete todo o néctar.
      2-3 Bee Conditionals 9_instruction: Colete todo o néctar de cada flor.
      2-3 Bee Conditionals Assessment 1_instruction: |
        Avaliação: Colete todo o
        néctar. Tenha cuidado para não coletar néctar de uma flor roxa se ela não
        tiver néctar.
      2-3 Bee Debugging 1_instruction: |
        Esses blocos estão me incomodando. Conserte o(s)
        erro(s) para coletar todo o néctar e produzir todo o mel.
      2-3 Bee Debugging 10_instruction: |
        Esses blocos estão me incomodando. Conserte
        o(s) erro(s) para coletar todo o néctar e produzir todo o mel.
      2-3 Bee Debugging 2_instruction: |
        Esses blocos estão me incomodando. Conserte o(s)
        erro(s) para coletar todo o néctar e produzir todo o mel.
      2-3 Bee Debugging 3_instruction: |
        Esses blocos estão me incomodando. Conserte o(s)
        erro(s) para coletar todo o néctar e produzir todo o mel.
      2-3 Bee Debugging 4_instruction: |
        Esses blocos estão me incomodando. Conserte o(s)
        erro(s) para coletar todo o néctar e produzir todo o mel.
      2-3 Bee Debugging 5_instruction: |
        Esses blocos estão me incomodando. Conserte o(s)
        erro(s) para coletar todo o néctar e produzir todo o mel. Agora você pode
        usar os botões Executar e Passo.
      2-3 Bee Debugging 6_instruction: |
        Esses blocos estão me incomodando. Conserte o(s)
        erro(s) para coletar todo o néctar e produzir todo o mel.
      2-3 Bee Debugging 7_instruction: |
        Esses blocos estão me incomodando. Conserte o(s)
        erro(s) para coletar todo o néctar e produzir todo o mel.
      2-3 Bee Debugging 8_instruction: |
        Esses blocos estão me incomodando. Conserte o(s)
        erro(s) para coletar todo o néctar e produzir todo o mel.
      2-3 Bee Debugging 9_instruction: |
        Esses blocos estão me incomodando. Conserte o(s)
        erro(s) para coletar todo o néctar e produzir todo o mel.
      2-3 Bee Debugging Assessment 1_instruction: |
        Avaliação:  Esses blocos estão
        me incomodando. Conserte o(s) erro(s) para coletar todo o néctar e produzir
        todo o mel.
      2-3 Bee Functions 1_instruction: |
        Funções são blocos de código que realizam
        uma tarefa. Use a função "obtenha 2 néctares" para coletar o néctar de cada
        flor.
      2-3 Bee Functions 10_instruction: |
        As flores roxas podem ter 1 ou 0 néctar.  Crie
        uma função que coleta néctar apenas das flores que têm néctar.
      2-3 Bee Functions 2_instruction: |
        Funções são blocos de código que realizam
        uma tarefa. Use a função "obtenha 5" para coletar 5 néctares de uma vez. Lembre-se também
        de usar um laço para obter um contador de bloco ideal.
      2-3 Bee Functions 3_instruction: Colete todo o néctar de cada flor.
      2-3 Bee Functions 4_instruction: |
        A função "mova e obtenha néctar" vira
        a abelha, coleta néctar, e então retorna a abelha para onde ela começou. Use
        a função para coletar todo o néctar.
      2-3 Bee Functions 5_instruction: |
        Agora há mais néctar nas flores.
        Edite a função dada para que ela colete 4 néctares e use-a para coletar
        todo o néctar das flores.
      2-3 Bee Functions 6_instruction: |
        Agora, use a mesma função para coletar néctar
        das três flores.
      2-3 Bee Functions 7_instruction: |
        Agora as flores estão mais longe. Edite a
        função dada e use-a para coletar todo o néctar das flores.
      2-3 Bee Functions 8_instruction: |
        Crie sua própria função que coleta 7 néctares,
        avança e produz 7 unidades de mel. Use a função para coletar néctar em todas as
        flores e produzir mel em todas as colmeias.
      2-3 Bee Functions 9_instruction: |
        Crie sua própria função que vai por um
        caminho, obtém néctar, produz mel, e então retorna a abelha para o início do
        caminho.
      2-3 Bee Functions Assessment 1_instruction: |
        Avaliação: Use a função dada
        para coletar o néctar de cada flor.
      2-3 Bee Functions Assessment 2_instruction: |
        Avaliação: Crie uma função
        para produzir 3 unidades de mel de uma vez.
      2-3 Bee Loops 1_instruction: |
        Cada flor contém uma unidade de néctar. Colete
        o néctar de cada uma das flores.
      2-3 Bee Loops 10_instruction: |
        Você pode usar um laço enquanto dentro de outros dois
        laços para coletar todo o néctar?
      2-3 Bee Loops 11_instruction: |
        Use laços enquanto para coletar todo o néctar
        das flores desse campo.
      2-3 Bee Loops 12_instruction: |
        Use laços enquanto para coletar todo o néctar
        das flores desse campo.
      2-3 Bee Loops 13_instruction: |
        Avaliação: use o bloco repita para coletar
        todo o néctar.
      2-3 Bee Loops 1A_instruction: |
        Olá, eu sou uma abelha. Você pode me ajudar a coletar
        o néctar dessas flores?
      2-3 Bee Loops 2_instruction: |
        Use um laço para coletar o néctar e produzir o
        mel.
      2-3 Bee Loops 2A_instruction: |
        Você consegue realizar a mesma tarefa mais facilmente
        com um laço?
      2-3 Bee Loops 3_instruction: |
        Colete o néctar de cada flor e produza mel
        em cada colmeia.
      2-3 Bee Loops 3A_instruction: Você consegue usar um laço para coletar todo o
        néctar?
      2-3 Bee Loops 3B_instruction: Agora, use o novo bloco repita para coletar todo
        o néctar e produzir todo o mel.
      2-3 Bee Loops 4_instruction: |
        Use um laço parecido com o do último desafio, mas realize
        uma ação de virar dentro dele.
      2-3 Bee Loops 4A_instruction: O que acontece se você repetir esta sequência
        3 vezes? Não se esqueça de fazer o mel no final!
      2-3 Bee Loops 5_instruction: |
        Use um laço para descer as escadas e coletar o
        néctar.
      2-3 Bee Loops 6_instruction: |
        Use um laço para coletar o néctar de cada flor
        e produzir mel em cada colmeia.
      2-3 Bee Loops 7_instruction: |
        Coloque esses blocos em um laço para coletar o néctar
        de cada flor.
      2-3 Bee Loops 8_instruction: |
        Essas flores roxas têm uma quantidade desconhecida de
        néctar. Use o laço "enquanto houver néctar" para coletar todo o néctar. Esse laço
        será executado enquanto a condição for verdadeira, neste caso, enquanto néctar > 0.
      2-3 Bee Loops 9_instruction: |
        O laço enquanto pode realizar a mesma ação que
        um comando se em um laço. Adicione um laço enquanto a esse código para realizar a mesma
        tarefa.
      2-3 Bee Loops Assessment 1_instruction: |
        Avaliação - use um laço enquanto para coletar
        todo o néctar dessa flor.
      2-3 Maze 1_instruction: |
        Você pode me ajudar a pegar o porco malvado? Junte alguns
        blocos "avance" e clique em "Executar".
      2-3 Maze 10_instruction: Guia-me até à maldade verde! (Cuidado com a dinamite)
      2-3 Maze 11_instruction: |
        Estou com fome, leve-me até a flor! Quantas vezes
        você precisa repetir um bloco?
      2-3 Maze 12 (copy 1)_instruction: |
        Você pode substituir a resposta anterior por
        apenas dois blocos? (Dica: crie um laço usando um bloco "repita vezes")
      2-3 Maze 12 (copy 2)_instruction: |
        Você pode substituir a resposta anterior por
        apenas dois blocos? (Dica: crie um laço usando um bloco "repita vezes")
      2-3 Maze 12 (old)_instruction: |
        Leve-me até o porco, agora com o bloco repita
        vezes!
      2-3 Maze 12_instruction: |
        Você pode substituir esses cinco blocos por apenas dois blocos?
        (Dica: crie um laço usando um bloco "repita vezes")
      2-3 Maze 13 (old)_instruction: |
        Leve-me até o porco, agora com o bloco repita
        até!
      2-3 Maze 13_instruction: Leve-me até o porco usando apenas dois blocos.
      2-3 Maze 14 (old)_instruction: Leve-me até o porco com o bloco repita até!
      2-3 Maze 14_instruction: |
        Leve-me até o girassol! (Onde está o bloco "repita
        vezes" quando eu preciso dele?)
      2-3 Maze 15 (old)_instruction: Leve-me até o porco com o bloco repita até!
      2-3 Maze 15_instruction: Use dois laços para chegar até o porco usando menos
        blocos.
      2-3 Maze 16 (old)_instruction: Leve-me até o porco com o bloco repita até!
      2-3 Maze 16 before_instruction: Leve-me até o porco.
      2-3 Maze 16_instruction: Leve-me até o girassol. Repita a sequência!
      2-3 Maze 2_instruction: Esse porco está me irritando. Ajude-me a chegar até
        ele!
      2-3 Maze 3_instruction: |
        Trace o caminho e leve-me até o porco bobalhão. Desvie
        do TNT, ou penas vão voar!
      2-3 Maze 4_instruction: Guia-me até à maldade verde! (Cuidado com a dinamite)
      2-3 Maze 5_instruction: Guia-me até à maldade verde! (Cuidado com a dinamite)
      2-3 Maze 6_instruction: |
        Fique calmo e ajude-me a chegar até o porco malvado. Senão
        eu vou ficar braco!
      2-3 Maze 7_instruction: Guia-me até à maldade verde! (Cuidado com a dinamite)
      2-3 Maze 8_instruction: Leve-me até o porco!
      2-3 Maze 9_instruction: Guia-me até à maldade verde! (Cuidado com a dinamite)
      2-3 Maze Loops 1_instruction: Você pode me levar até o porco usando 5 blocos?
      2-3 Maze Loops 17_instruction: Leve-me até o girassol!
      2-3 Maze Loops 18_instruction: Leve-me até o girassol!
      2-3 Maze Loops 19_instruction: Leve-me até o girassol!
      2-3 Maze Loops 20_instruction: Leve-me até o girassol!
      2-3 Maze Loops 21_instruction: Leve-me até o girassol!
      2-3 Maze Loops Assessment 1_instruction: |
        Avaliação: Leve-me até o girassol
        usando apenas 5 blocos!
      2-3 Maze sq1_instruction: |
        This pig is ruffling my feathers.  Help me find
        him!
      2-3 Maze sq10_instruction: Leve-me até o porco! Que blocos foram repetidos?
      2-3 Maze sq10v2_instruction: Leve-me até o porco! Que blocos foram repetidos?
      2-3 maze sq11_instruction: Leve-me até o porco! Que blocos foram repetidos?
      2-3 maze sq12_instruction: |
        Você pode substituir a resposta anterior por um laço
        usando um bloco "repita vezes"?
      2-3 maze sq13_instruction: |
        Querida pessoa. Mim zumbi. Deve... chegar... girassol.
        Crie um laço com o bloco "repita até".
      2-3 maze sq14_instruction: Você pode chegar até o girassol usando apenas quatro
        blocos?
      2-3 maze sq15_instruction: Você pode chegar até o girassol usando apenas blocos?
      2-3 maze sq16_instruction: |
        Ok, isso é parecido, mas um pouco diferente. Você pode
        fazer isso em apenas cinco blocos?
      2-3 Maze sq2_instruction: |
        Trace o caminho e leve-me até o porco bobalhão. Desvie
        do TNT, ou penas vão voar!
      2-3 Maze sq3_instruction: Guia-me até à maldade verde! (Cuidado com a dinamite)
      2-3 Maze sq4_instruction: |
        Fique calmo e ajude-me a chegar até o porco malvado. Senão
        eu vou ficar braco!
      2-3 Maze sq5_instruction: |
        Leve-me até o porco! Quantas vezes você precisa
        repetir um bloco?
      2-3 Maze sq6_instruction: |
        Você pode substituir a resposta anterior por apenas dois
        blocos? (Dica: crie um laço usando um bloco "repita vezes")
      2-3 Maze sq7_instruction: Leve-me até o intruso verde usando apenas três blocos.
      2-3 Maze sq8_instruction: |
        Leve-me até o porco! (Onde está o bloco "repita vezes"
        quando eu preciso dele?)
      2-3 Maze sq9_instruction: Crie laços para chegar até o porco usando menos blocos.
      2-3_instruction: |
        Purple flowers may have either 1 or 0 nectar. Be careful
        not to collect nectar from a purple flower if it doesn't have any.
      2-3level1_instruction: Ajude o pássaro a pegar o porco safado movendo-o para
        frente
      4-5 Artist 1_instruction: |
        Ajude-me a terminar de desenhar minha caixa. (Cada linha
        tem 300 pixels de comprimento)
      4-5 Artist 10_instruction: |
        Pressione "Executar" para testar o código. Em seguida, repita o código
        o número suficiente de vezes para completar o desenho. As cores serão diferentes toda vez.
      4-5 Artist 11_instruction: |
        Complete as retas verdes. As retas têm 300 pixels
        de comprimento e são separadas por 15 pixels.
      4-5 Artist 2_instruction: Você pode repetir esse código para completar o quadrado?
      4-5 Artist 3.5_instruction: |
        Ok, tente descobrir o que acontece se você executar
        esse código (ou pressione "Executar" para testar o código). Em seguida, repita o código o número suficiente de vezes para completar
        o desenho. As cores serão (provavelmente) diferentes toda vez.
      4-5 Artist 3_instruction: |
        Esse canteiro de flores retangular tem um perímetro de 600.
        O lado comprido tem 200 de comprimento. Desenhe o retângulo.
      4-5 Artist 4_instruction: |
        Quantos graus há em um círculo? Repita os blocos
        para criar um círculo de cores.
      4-5 Artist 5_instruction: Que ângulo você usa?
      4-5 Artist 6_instruction: |
        Esse triângulo equilátero tem ângulos de 60, 60
        e 60 graus. Cada lado tem 200 pixels. Complete o desenho.
      4-5 Artist 7_instruction: |
        O triângulo reto tem ângulos de 30, 60 e 90
        graus. O comprimento do lado inclinado é o dobro da altura de 100 pixels. Complete
        o desenho.
      4-5 Artist 8_instruction: |
        A linha do meio-campo em um campo de futebol é perpendicular
        às linhas laterais. O campo tem um perímetro de 800 pixels e tem 240 pixels
        de comprimento. Qual é sua largura? Desenhe as bordas e a linha do meio-campo.
      4-5 Artist 9_instruction: |
        Desenhe a outra metade de forma que o design seja simétrico.
        Os triângulos são equiláteros e têm 50 pixels de comprimento.
      4-5 Artist Assessment 1_instruction: |
        Avaliação: Use um laço para desenhar o triângulo
        equilátero. Cada lado tem 300 pixels.
      4-5 Artist For Loops 1_instruction: |
        Coloque os números de 1 a 10 nos
        blocos de largura e execute o código.
      4-5 Artist For Loops 11_instruction: |
        Complete o bloco "para" para que ele
        conte 0, 20, 40, 60, 80... 200.
      4-5 Artist For Loops 12_instruction: |
        O que acontece se você inverter os números que estão em "de"
        e "até"? Complete o bloco "para" de forma que ele conte 200, 180,
        160, 140, 120...0.
      4-5 Artist For Loops 13_instruction: |
        Esse design foi iniciado sem um laço "para"
        e está usando muitos blocos! Use um bloco "para" e complete a espiral. Dica:
        a última linha tem 250 pixels.
      4-5 Artist For Loops 14_instruction: |
        Alguém começou o código, mas então percebeu que
        deve haver uma forma mais rápida! Use um bloco "para" para substituir os blocos e
        complete a espiral triangular. (Dica: a última linha tem 300 pixels.
      4-5 Artist For Loops 15_instruction: |
        Alguém começou o código, mas então percebeu que
        deve haver uma forma mais rápida! Use um bloco "para" para substituir os blocos e
        complete a espiral hexagonal. (Dica: a última linha tem 200 pixels.
      4-5 Artist For Loops 2_instruction: |
        Este é um bloco "para". Ao invés de digitar
        1, 2, 3... 10, o bloco "para" pode repetir os blocos dentro dele e contar os
        números para você. Coloque o número 10 na seção "até" do bloco
        "para".
      4-5 Artist For Loops 3_instruction: |
        Como podemos contar de 1 até 50? Edite o
        bloco "para".
      4-5 Artist For Loops 4_instruction: |
        Complete o bloco "para" para que ele
        conte de 1 até 10, de 1 em 1.
      4-5 Artist For Loops 6_instruction: |
        Desenhe quadrados com lados de 50, 60, 70,
        80 e 90 pixels. Você vai precisar usar a função "desenhe um quadrado" cinco
        vezes.
      4-5 Artist For Loops 7_instruction: |
        Desenhe os mesmos quadrados, mas use um bloco "conte
        com" para alterar os tamanhos. Coloque o bloco "contador" na função "desenhe
        um quadrado". Dica: ele está na categoria Variáveis.
      4-5 Artist For Loops 8_instruction: |
        Você pode completar o programa colocando
        os blocos dentro de um bloco "para" que conta de 10 até 200, de 10 em 10? Você pode
        encontrar o bloco "for" na categoria Laços.
      4-5 Artist For Loops 9_instruction: |
        Esses círculos são de tamanhos 5, 10, 15, 20,
        25, 30 e 35. Desenhe os círculos usando um bloco "para".
      4-5 Artist Free Draw 1_instruction: |
        Desenho livre! Desenhe o que você estiver inspirado
        a criar.
      4-5 Artist Functions 1_instruction: Use um laço repita para desenhar esse triângulo.
      4-5 Artist Functions 10a_instruction: |
        Coloque esse código na função "desenhe um floco de neve"
        e substitua o 50 pelo parâmetro "tamanho". A função já é
        chamada para criar um floco de neve que tem 100 pixels.
      4-5 Artist Functions 10b_instruction: |
        Use a função "desenhe um floco de neve"
        para criar flocos de tamanhos diferentes. Dica: o primeiro floco de neve tem 25 de comprimento
        e cada floco de neve tem duas vezes o tamanho do floco anterior.
      4-5 Artist Functions 11_instruction: |
        Essa função "desenhe um hexágono" usa
        a função "desenhe um triângulo". Complete a função do hexágono. (Dica: um
        hexágono tem 6 lados, cada um com 100 pixels de comprimento)
      4-5 Artist Functions 12_instruction: |
        Complete a função "desenhe ondas". Cada
        onda é feita de uma onda superior e uma onda inferior. Dica: desenhe 5 ondas
        azuis.
      4-5 Artist Functions 13 Free play_instruction: |
        Temos aqui algumas funções para
        desenhar planetas, estrelas, foguetes e robôs. Use-as da forma que quiser para criar
        imagens que você pode compartilhar com seus amigos.
      4-5 Artist Functions 14 Free play_instruction: |
        Aqui, fornecemos
        várias funções para você. Use-as da forma que quiser dentro de um ou mais laços
        para criar imagens que você pode compartilhar com seus amigos. Clique em "Executar" para ver
        um exemplo.
      4-5 Artist Functions 15 Assessment_instruction: |
        Avaliação: use a função "desenhe
        um quadrado" para criar os quadrados. Os quadrados têm 50, 100 e 150
        pixels.
      4-5 Artist Functions 2a_instruction: |
        Agora coloque esses blocos em uma nova função
        chamada "desenhe um triângulo pequeno" e chame-a.
      4-5 Artist Functions 2b_instruction: |
        Agora crie uma função chamada "desenhe um
        triângulo pequeno" usando os blocos fornecidos.
      4-5 Artist Functions 3_instruction: |
        Agora crie as funções "desenhe um triângulo
        médio" e "desenhe um triângulo grande". A função "desenhe um triângulo pequeno"
        está pronta para você. Os triângulos têm comprimentos de 50 (pequeno), 100 (médio)
        e 150 (grande).
      4-5 Artist Functions 4_instruction: |
        Essa nova função "desenhe um triângulo"
        tem um parâmetro e pode fazer o trabalho das três funções de antes. Desenhe os
        mesmos triângulos usando essa nova função.
      4-5 Artist Functions 5_instruction: |
        Você pode transformar a função "desenhe um triângulo"
        em uma função "desenhe um quadrado" para alterar o desenho?
      4-5 Artist Functions 6_instruction: |
        Use as funções "desenhe um quadrado" e "desenhe um
        triângulo" para desenhar uma casa. (Dica: os lados do quadrado têm 200 pixels)
      4-5 Artist Functions 6b_instruction: |
        Use as funções desenhe um quadrado e desenhe um triângulo
        junto com outros blocos para criar uma casa, adicionando-as à função "desenhe uma casa"
        e chamando-a.
      4-5 Artist Functions 7_instruction: |
        Use a função "desenhe uma casa" para desenhar
        casas de 100 pixels e 50 pixels. As duas casas são separadas por
        50 pixels.
      4-5 Artist Functions 8_instruction: |
        A função "desenhe uma flor" tem um parâmetro
        que permite que você defina a altura do caule. Defina a altura como 200 e veja o que acontece.
      4-5 Artist Functions 9_instruction: |
        Desenhe essas 3 flores. A altura da primeira
        é 100 e a próxima flor sempre tem 50 pixels de altura a mais que
        a anterior. As flores também são separadas por 100 pixels.
      4-5 Artist Patterns 1_instruction: |
        Você pode desenhar esse quadrado usando um laço?
        Cada lado tem 20 pixels de comprimento.
      4-5 Artist Patterns 10_instruction: |
        O código desenha duas fileiras de hexágonos -
        repita todo o código 4 vezes para desenhar a colmeia inteira. Dica: você vai precisar
        recuar 120 pixels no laço mais externo para garantir que o artista não
        desenhe fora da tela.
      4-5 Artist Patterns 11_instruction: |
        Quantas vezes você precisa repetir isso
        para desenhar um semicírculo? Dica: se há 360 graus em um círculo e cada
        repetição move 3 graus, quantas vezes você precisaria repetir para desenhar um círculo completo?
      4-5 Artist Patterns 12_instruction: |
        Se você copiar esse laço e virar para a esquerda ao invés
        da direita, o que acontece? Você pode repetir isso para desenhar essa onda?
      4-5 Artist Patterns 13_instruction: |
        Agora vamos repetir tudo quatro
        vezes para criar a moldura dessa imagem. Preste atenção aos cantos - você não pode
        simplesmente virar 90 graus! Se repetir uma ação de virar 3 graus 60 vezes faz um semicírculo,
        qual desses blocos de código vai fazer um quarto de círculo para os cantos?
      4-5 Artist Patterns 2_instruction: |
        Se você colocar seu laço do quadrado dentro
        de outro laço, o chamamos de laço aninhado. O que você precisa adicionar ao seu laço externo
        para garantir que todos os 15 quadrados fiquem alinhados?
      4-5 Artist Patterns 3_instruction: |
        Agora, vamos nos aprofundar mais um nível!
        Aninhamos todo o bloco de código dentro de outro laço, mas você precisa posicionar o
        artista no lugar para desenhar a próxima reta. Qual desses blocos de código você
        pode colocar no final do laço mais externo para desenhar toda a grade?
      4-5 Artist Patterns 4_instruction: |
        Esse diamante tem lados de 50 pixels e ângulos
        de 120 e 60 graus. Use um laço para desenhá-lo.
      4-5 Artist Patterns 5.5_instruction: |
        Quantas vezes você precisa repetir
        esse bloco para desenhar toda a grade de diamantes?
      4-5 Artist Patterns 5_instruction: |
        Vamos repetir isso para fazer uma fileira de 6 diamantes.
        Perceba que alteramos nosso código do diamante para repetir 3 vezes ao invés de 2 - por que
        você acha que fizemos isso?
      4-5 Artist Patterns 6_instruction: |
        Quantas vezes você precisa repetir esse
        bloco para desenhar toda a grade de diamantes?
      4-5 Artist Patterns 7_instruction: |
        Vamos modificar o código do último desafio
        para fazer esse padrão mais complexo. Perceba como os diamantes se sobrepõem agora. Tente
        alterar o primeiro "pule para trás" de 100 para 50 (metade da distância) - agora, quão
        longe o artista deve ir no segundo "pule para trás"?
      4-5 Artist Patterns 8_instruction: |
        Use um laço para desenhar esse hexágono com
        lados de 40 pixels e ângulos de 60 graus.
      4-5 Artist Patterns 9.5_instruction: |
        Vamos repetir esse código para desenhar duas fileiras
        de hexágonos. Perceba como nossa segunda fileira está deslocada para a direita.
      4-5 Artist Patterns 9_instruction: |
        Agora, repita o código 3 vezes para desenhar a
        a linha inteira. Dica: cada hexágono tem 80 pixels de largura da extrema esquerda
        à extrema direita.
      4-5 Artist Patterns Free Play_instruction: |
        Atividade livre - experimente criar
        seu próprio padrão!
      4-5 Bee Conditionals 1 (copy 1)_instruction: |
        The bee can't tell if this is
        a flower or a honeycomb. Gather nectar only from flowers, but first check
        if it is a flower or a honeycomb.
      4-5 Bee Conditionals 1_instruction: |
        A abelha não sabe se isso é uma flor ou
        uma colmeia. Colete néctar apenas das flores, mas primeiro verifique se o objeto é
        uma flor ou uma colmeia.
      4-5 Bee Conditionals 2 (copy 1)_instruction: |
        The bee only wants nectar right
        now. Remember, not all objects are flowers, so check to gather nectar only
        at flowers.
      4-5 Bee Conditionals 2_instruction: |
        Agora a abelha só quer néctar. Lembre-se,
        nem todos os objetos são flores, então faça a verificação para coletar néctar apenas das flores.
      4-5 Bee Conditionals 3_instruction: |
        Agora a abelha só quer produzir mel.
        Faça a verificação para produzir mel apenas nas colmeias.
      4-5 Bee Conditionals 4 (copy 1)_instruction: |
        The unknown object is either
        a flower or a honeycomb. Use the if/else block to collect nectar if it is
        a flower, else to make honey (because it is a honeycomb).
      4-5 Bee Conditionals 4_instruction: |
        O objeto desconhecido pode ser uma flor
        ou uma colmeia. Use o bloco se/senão para coletar néctar se ele for uma flor,
        senão para produzir mel (porque ele é, então, uma colmeia).
      4-5 Bee Conditionals 5_instruction: |
        Deve haver uma flor ou uma colmeia
        sob essas nuvens. Use o bloco se/senão para coletar néctar se houver uma
        uma flor, senão para produzir mel (porque há, então, uma colmeia).
      4-5 Bee Conditionals 6 (copy 1)_instruction: |
        This purple flower may have either
        3, 2, or 1 nectar. Here an if-else block is combined with another if-else
        block to create an if, else-if, else block. Complete the solution to collect
        the unknown amount of nectar.
      4-5 Bee Conditionals 6_instruction: |
        Essa flor roxa pode ter 1,
        2 ou 3 néctares. Aqui um bloco se-senão está combinado com outro bloco se-senão
        para criar um bloco se, senão-se, senão. Complete a solução para coletar a
        quantidade desconhecida de néctar.
      4-5 Bee Conditionals 7_instruction: |
        Lembre-se de que as flores roxas podem ter
        1, 2 ou 3 néctares. Complete a função "verifique a flor roxa" e use-a
        para coletar todo o néctar das flores.
      4-5 Bee Conditionals 8_instruction: |
        Escreva uma função dentro do bloco chamado
        "verifique a flor e produza mel". Sua função deve verificar quanto néctar a
        flor roxa tem e coletá-lo, avançar e então produzir mel.
      4-5 Bee Conditionals Assessment 1_instruction: |
        Avaliação: esse código está errado.
        Complete a função "colete néctar ou produza mel" e então chame-a para coletar
        todo o néctar e produzir o mel. Lembre-se, as flores roxas podem ter 1, 2 ou 3 néctares.
      4-5 Bee Debugging 1_instruction: |
        Estes blocos estão me incomodando. Você pode
        consertá-los?
      4-5 Bee Debugging 10_instruction: Encontre os erros e corrija-os.
      4-5 Bee Debugging 11_instruction: Isso conta corretamente?
      4-5 Bee Debugging 2_instruction: Ajude a abelha a coletar o néctar e fabricar
        o mel.
      4-5 Bee Debugging 3_instruction: Encontre os erros e corrija-os.
      4-5 Bee Debugging 4_instruction: Esses blocos não funcionam. Qual é o padrão?
      4-5 Bee Debugging 5_instruction: Algo não está certo aqui...
      4-5 Bee Debugging 6_instruction: |
        A flor roxa tem uma quantidade desconhecida de
        néctar. Conserte os blocos para coletar todo o néctar da flor.
      4-5 Bee Debugging 7_instruction: Está faltando alguma coisa na função...
      4-5 Bee Debugging 8_instruction: |
        Essa função está certa, mas não é usada
        corretamente.
      4-5 Bee Debugging 9_instruction: Por que a abelha não está produzindo mel suficiente?
      4-5 Bee Debugging Assessment 1_instruction: 'Avaliação: conserte o código.'
      4-5 Bee Nested Loops 1_instruction: Use um laço para coletar todo o néctar.
      4-5 Bee Nested Loops 2_instruction: |
        Colete todo o néctar de cada flor.
        Use um laço aninhado.
      4-5 Bee Nested Loops 3_instruction: |
        Colete todo o néctar colocando o
        código inicial dentro de um laço aninhado.
      4-5 Bee Nested Loops 4_instruction: |
        Colete todo o néctar de cada flor
        e produza mel em cada colmeia. Use um laço aninhado.
      4-5 Bee Nested Loops 5_instruction: |
        Colete todo o néctar criando
        um laço aninhado.
      4-5 Bee Nested Loops 6_instruction: Colete todo o néctar.
      4-5 Bee Nested Loops 7_instruction: |
        Coloque esse laço dentro de outro laço para criar
        um laço aninhado e coletar todo o néctar das flores.
      4-5 Bee Nested Loops 8_instruction: |
        Colete todo o néctar dessas flores
        aninhando um laço enquanto. Substitua o bloco interno repita vezes por um bloco
        enquanto.
      4-5 Bee Nested Loops 9_instruction: |
        Colete todo o néctar dessas flores
        aninhando um laço enquanto dentro de um bloco repita.
      4-5 Bee Nested Loops Assessment 1_instruction: |
        Avaliação - colete todo o
        néctar e produza todo o mel usando laços.
      4-5 Bee Nested Loops Rows_instruction: |
        Colete o néctar das fileiras de flores!
        Use um laço aninhado.
      4-5 Maze 1 (copy 1)_instruction: |
        Querida pessoa. Mim zumbi. Precisa... chegar...
        girassol.
      4-5 Maze 1_instruction: Querida pessoa. Mim zumbi. Deve... chegar... girassol.
      4-5 Maze 10_instruction: Você pode chegar até o girassol usando apenas quatro
        blocos?
      4-5 Maze 11_instruction: Você pode chegar até o girassol usando apenas seis
        blocos?
      4-5 Maze 12_instruction: |
        Ok, isso é um pouco diferente. Você pode fazer isso em
        apenas seis blocos?
      4-5 Maze 13_instruction: Leve-me até o porco!
      4-5 Maze 14_instruction: Leve-me até o porco! Use o bloco repita até.
      4-5 Maze 2 (copy 1)_instruction: |
        Leve o zumbi até o girassol, mas desvie
        da carnívora!
      4-5 Maze 2_instruction: Leve o zumbi até o girassol, mas desvie da carnívora!
      4-5 Maze 3 (copy 1)_instruction: Precisa... chegar... girassol.
      4-5 Maze 3_instruction: Precisa... chegar... girassol.
      4-5 Maze 4 (copy 1)_instruction: Experimente o bloco "repita" para usar menos
        blocos...
      4-5 Maze 4_instruction: Experimente o bloco "repita" para usar menos blocos...
      4-5 Maze 5 (copy 1)_instruction: |
        Você pode resolver esse desafio usando o menor
        número possível de blocos?
      4-5 Maze 5_instruction: |
        Você pode resolver esse desafio usando o menor número
        possível de blocos?
      4-5 Maze 6 (copy 1)_instruction: |
        Você pode resolver esse desafio usando o menor
        número possível de blocos?
      4-5 Maze 6_instruction: |
        Você pode resolver esse desafio usando o menor número
        possível de blocos?
      4-5 Maze 7_instruction: Querida pessoa. Mim zumbi. Deve... chegar... girassol.
      4-5 Maze 8_instruction: |
        Use o bloco "repita" para levar o zumbi até o
        girassol. (Desvie das carnívoras!)
      4-5 Maze 9_instruction: Crie um laço com o bloco "repita até".
      4-5 Maze Assessment 1_instruction: 'Avaliação: chegue até o girassol.'
      4-5 Maze Conditionals 1_instruction: |
        Use o bloco repita até para levar o
        zumbi até o girassol.
      4-5 Maze Conditionals 10_instruction: |
        Você pode adicionar apenas 3 blocos para me ajudar
        a resolver um labirinto mais complexo? Se você fizer isso corretamente, eu poderei andar por qualquer caminho cheio de curvas,
        não importa o comprimento.
      4-5 Maze Conditionals 2_instruction: |
        Use o bloco repita até para levar o
        zumbi até o girassol.
      4-5 Maze Conditionals 3_instruction: |
        Use o bloco "se" para me deixar decidir
        quando virar. Dica: você precisa de somente mais um bloco, mas aprenda como o configuramos
        para que você possa fazer isso sozinho na próxima vez.
      4-5 Maze Conditionals 4_instruction: |
        Ok, esse desafio é como o último,
        mas você precisa se lembrar de como usou o bloco "se" e o bloco "repita"
        juntos.
      4-5 Maze Conditionals 5_instruction: |
        Mim querer girassol! Use um bloco "se"
        para que eu chegue lá com o menor número de blocos possível.
      4-5 Maze Conditionals 6_instruction: |
        Mim querer girassol! Use um bloco "se"
        para que eu chegue lá com o menor número de blocos possível.
      4-5 Maze Conditionals 7_instruction: |
        Ok, vamos praticar mais uma vez
        - essa parte não é muito diferente, mas fique de olho nas carnívoras!
      4-5 Maze Conditionals 8_instruction: |
        Os blocos "se-senão" verificam uma condição
        e, em seguida, fazem uma coisa OU outra. Para me levar ao girassol, tente
        usar esse novo bloco.
      4-5 Maze Conditionals 9_instruction: |
        Vamos praticar o uso do bloco "se-senão" mais uma
        vez, você consegue fazer corretamente na primeira tentativa?
      4-5 Maze Conditionals Assessment 1_instruction: |
        Use um bloco "repita até" e
        um bloco "se-senão" para me levar até o girassol no menor número de blocos possível.
      4-5 Nested Loops 1_instruction: |
        Complete o código para desenhar esses triângulos. O
        primeiro está pronto para você. Dica: 3 triângulos em uma rotação de 360 graus.
      4-5 Nested Loops 10_instruction: |
        Desenhe a última linha de estrelas nessa bandeira
        repetindo os blocos fornecidos. As estrelas estão separadas por 50 pixels, mas lembre-se
        que elas têm 30 pixels de largura.
      4-5 Nested Loops 11_instruction: |
        Você pode desenhar esses 10 quadrados dessa
        calçada usando um laço aninhado? Cada quadrado tem 30 pixels.
      4-5 Nested Loops 12_instruction: |
        Você pode desenhar esses 36 triângulos usando
        um laço aninhado?
      4-5 Nested Loops 2_instruction: |
        Agora, aninhe esse laço dentro de outro laço para desenhar
        10 triângulos. Isso se chama laço aninhado. Dica: todos os 10 triângulos completam
        uma rotação de 360 graus.
      4-5 Nested Loops 3_instruction: "Crie um sol aninhando o código inicial\ndentro
        de outro laço. Chamamos isso de laço aninhado.\r\n"
      4-5 Nested Loops 5_instruction: Repita o código dado para criar um moinho de
        vento.
      4-5 Nested Loops 6_instruction: |
        Você pode desenhar um hexágono repetindo o
        código do triângulo?
      4-5 Nested Loops 7_instruction: |
        Repita esse design 10 vezes. Quanto
        você precisa virar a cada repetição? (Dica: quanto é 360 dividido por 10?)
      4-5 Nested Loops 8_instruction: |
        Repita esse design 6 vezes. Quanto
        você precisa virar a cada repetição? (Dica: quanto é 360 dividido por 6?)
      4-5 Nested Loops 9_instruction: Desenhe o dente na boca do crocodilo!
      4-5 Nested Loops Assessment 1_instruction: |
        Use um laço aninhado para completar
        o design.
      4-5 While Loops 1_instruction: |
        Mova-me para o buraco e preencha-o com
        duas pás de terra, usando o bloco "preencha".
      4-5 While Loops 2_instruction: |
        Mova-me para o monte de terra e remova-o
        com 5 pás de terra, usando o bloco "remova".
      4-5 While Loops 3_instruction: |
        Mova-me para o monte e remova toda a
        terra, então mova-me para o buraco e preencha-o completamente. Dica: use o menor número de
        blocos possível.
      4-5 While Loops 4_instruction: |
        Uau, eu encontrei um buraco realmente fundo! Eu não
        sei quantas pás de terra são necessárias. Você pode escrever um programa que preencha-o
        até que o solo fique nivelado? Dica: dessa vez, tente usar o laço enquanto.
      4-5 While Loops 5_instruction: |
        Uau, agora há dois buracos profundos! Você
        pode escrever um programa que os preencha até o que o solo fique nivelado?
      4-5 While Loops 6_instruction: |
        Uau, agora há um grande monte de terra!
        Você pode escrever um programa que remova a terra até que o solo fique nivelado?
      4-5 While Loops 7_instruction: |
        Uau, agora há três grandes montes de terra!
        Você pode escrever um programa que remova cada um deles até que o solo fique nivelado?
      4-5 While Loops 8_instruction: |2
         Há um buraco realmente fundo e um monte de terra
        realmente grande. Quantas pás de terra são necessárias para
        tornar o solo plano? Dica: use o laço enquanto para ambos.
      4-5 While Loops Assessment 1_instruction: |
        Há um monte de buracos e
        montes. Ajude-me a preenchê-los e removê-los para tornar o solo plano.
      AlgPD DR Free Play_instruction: Create a function based on your own word problem.
      AppLab_test02_instruction: |
        One sentence summary of the activity. Click to
        view full instructions.
      Artist - Nested Loops 1_instruction: |
        Complete the code to draw these triangles.  The
        first one is done for you.  Hint:  3 triangles in a 360 degree rotation.
      Artist - Nested Loops 10_instruction: |
        Draw the last row of stars on this flag
        by looping the provided blocks. The stars are 50 pixels apart, but remember
        that the stars themselves are 30 pixels wide.
      Artist - Nested Loops 11_instruction: |
        Can you draw these 10 squares of this
        sidewalk using a nested loop? Each square is 30 pixels.
      Artist - Nested Loops 12_instruction: |
        Can you draw these 36 triangles using
        a nested loop?
      Artist - Nested Loops 2_instruction: "Now nest this loop inside another loop\nto
        draw 10 triangles.  This is called a nested loop.  Hint: All 10 triangles\ncomplete
        a 360 degree rotation.  \n"
      Artist - Nested Loops 3_instruction: "Create a sun by nesting the starter code\nin
        another loop. This is called a nested loop.\r\n"
      Artist - Nested Loops 5_instruction: Loop the given code to create a windmill.
      Artist - Nested Loops 6_instruction: |
        Can you draw a hexagon by looping the
        triangle code?
      Artist - Nested Loops 7_instruction: |
        Loop this design 10 times. How much do
        you have to turn each time you loop? (Hint: What is 360 divided by 10?)
      Artist - Nested Loops 8_instruction: |
        Loop this design 6 times. How much do
        you have to turn each time you loop? (Hint: What is 360 divided by 6?)
      Artist - Nested Loops 9_instruction: Draw the teeth in the alligator's mouth!
      Artist - Nested Loops Assessment 1_instruction: |
        Use um laço aninhado para completar
        o design.
      Big Game Animation 1 (copy 1)_instruction: |
        Now that you've learned to write
        simple linear functions, let's work on using them to add some movement to
        our game. Click play to see what your game can currently do (not much!), update
        any variables you like, and then click finish to move on.
      Big Game Animation 1_instruction: |
        Now that you've learned to write simple
        linear functions, let's work on using them to add some movement to our game.
        Click run to see what your game can currently do (not much!), update any variables
        you like, and then click finish to move on.
      Big Game Animation 2 (copy 1)_instruction: |
        The function 'update-target'
        function takes the target's current x value, and returns an updated value.
        Complete the 'update-target' function so that it adds to the x value each
        time it is called. The more you add to x, the faster the target will go.
      Big Game Animation 2_instruction: |
        The update-target function takes the target's
        current x value, and returns an updated value. Complete the update-target
        function so that it adds to the x value each time it is called. The more you
        add to x, the faster the target will go.
      Big Game Animation 3_instruction: |
        The update-danger function should work just
        like update-target, except that the danger should move from the right side
        over towards the left. Complete update-danger to make the danger fly across
        the screen.
      Big Game Animation 4_instruction: |
        At this point your game your danger should
        run across the screen from right to left, and your target should run across
        from left to right. They don't ever come back on screen once they've left,
        but we'll take care of that later. Take a minute to make sure your game is
        working like you want it to, and then click finish to move on.
      Big Game Booleans 1_instruction: |
        When you last worked on your game we got
        our target and danger sprites to fly across the screen, but they never come
        back. Click run to see how your game is currently working, and then click
        finish and we'll work on making those sprites reappear on screen after they've
        left.
      Big Game Booleans 2_instruction: |
        Go to the Functions section of the toolbox
        and complete the safe-left? function so that it returns true if the sprite's
        x coordinate is greater than -50. If you're successful you should see the
        Danger go off the left side and then return on right side.
      Big Game Booleans 3_instruction: |
        Now that you've got safe-left?, let's fill
        in safe-right? - it should take in a sprite's x coordinate and return true
        if that coordinate is less than 450. Once your safe-right? is complete you
        should see the Target go off the right side of the screen and return on the
        left.
      Big Game Booleans 4_instruction: |
        Complete the onscreen? function so that it
        checks whether both safe-left? and safe-right? are true.
      Big Game Booleans 5_instruction: |
        At this point your danger should run across
        the screen from right to left, your target should run across from left to
        right, and they should both return to the opposite side, repeatedly. Take
        a minute to make sure your game is working like you want it to, and then click
        Finish to move on.
      Big Game Collision 1 (copy 1)_instruction: |
        When you last worked on your game
        we got our target and danger sprites to fly across the screen, but they never
        come back. Click run to see how your game is currently working, and then click
        finish and we'll work on making those sprites reappear on screen after they've
        left.
      Big Game Collision 1_instruction: |
        At this point you've programmed a video
        game with a moving target and danger, both of which return to the screen once
        they've left, and a player that responds to keyboard input. Click run to
        see how your game is currently working, and then we'll dig into the final
        missing piece - collision detection!
      Big Game Collision 2_instruction: |
        To move the player up and down, we'll need
        to use a conditional block to figure out which key is pressed and respond
        accordingly. Computers read keypresses as numeric key codes - the up arrow
        is 38 and the down arrow is 40. You can lookup other key codes in your student
        workbook. Edit the 'update-player' function so that if moves the player
        up when the up arrow is pressed, or down when the down arrow is pressed.
      Big Game Collision 3_instruction: |
        Use the Distance Formula, so the distance
        function returns the distance between the player's center coordinates (px,
        py) and another sprite's center coordinates (cx, cy).
      Big Game Collision 4_instruction: |
        Complete the collide? function so that it
        returns true if the distance between two points is less than 100 pixels apart.
      Big Game Complete (copy 1)_instruction: |
        A demo of the completed CS in Algebra
        Big Game project
      Big Game Complete_instruction: |
        A demo of the completed CS in Algebra Big Game
        project
      Big Game Final_instruction: |
        You made it! At this point your game should be
        fully functioning, take some time to enjoy your new game and make any final
        tweaks to it. When you're happy with the final product, click Finish and
        you'll have an opportunity to share a link to your game. Good work!
      Big Game Player 1_instruction: |
        We're getting really close to a finished game!Last
        time you worked on your game, you used booleans to make your Target and Danger
        return to the screen once they've left. Click Run to see how your game looks
        right now, and then we'll get to making your Player move up and down.
      Big Game Player 2_instruction: |
        Edit the update-player function so the player
        moves up when the up arrow (keycode 38) is pressed, and moves down (keycode
        40) when the down arrow is pressed.
      Big Game Testing_instruction: |
        A demo of the completed CS in Algebra Big Game
        project
      Big Game Vars 1 (copy 1)_instruction: |
        Let's get started on your Big Game!
        Here you'll see a whole bunch of placeholder code that you'll eventually
        replace with your own, but for now we're only going to worry about defining
        variables. Click "Run" to see what the game looks like with the default
        values.
      Big Game Vars 1_instruction: |
        Let's get started on your Big Game! Here you'll
        see a whole bunch of placeholder code that you'll eventually replace with
        your own, but for now we're only going to worry about defining variables.
        Click "Run" to see what the game looks like with the default values.
      Big Game Vars 2 (copy 1)_instruction: |
        The first step to making this game your
        own is to give it a good Title. Click edit on the 'title' and 'subtitle'
        variables and change them to something new.
      Big Game Vars 2_instruction: |
        The first step to making this game your own is
        to give it a good Title. Click edit on the title and subtitle variables and
        change them to something new.
      Big Game Vars 3 (copy 1)_instruction: |
        Now let's set the background for your
        new game. Edit the 'bg' variable and select a new background Image from
        the dropdown.
      Big Game Vars 3_instruction: |
        Now let's set the background for your new game.
        Edit the bg variable and select a new background Image from the dropdown.
      Big Game Vars 4 (copy 1)_instruction: |
        Awesome, now you can update the variables
        for your Player, Target, and Danger. Feel free to play with all of the variables
        at this point to make your game look like you'd like it to. Click 'finish'
        when you're done.
      Big Game Vars 4_instruction: |
        Awesome! Now you can update the variables for
        your Player, Target, and Danger. Feel free to play with all of the variables
        at this point to make your game look like you'd like it to. Click "Finish"
        when you're done.
      Building a Foundation Assessment_instruction: |
        Build a three level pyramid,
        there are no other directions, so just play with the pieces until you get
        it!
      C3-Farmer While Loops 1_instruction: |
        Move me to the hole and fill it with
        two shovelfuls of dirt, using the "fill" block.
      C3-Farmer While Loops 2_instruction: |
        Move me to the pile of dirt and remove
        it with 5 shovel scoops, using the 'remove' block.
      C3-Farmer While Loops 3_instruction: |
        Move me to the pile and remove all of
        it, then move to the hole and fill it completely.  Hint:  Use as few blocks
        as possible.
      C3-Farmer While Loops 4_instruction: |
        Wow, I found a really deep hole! I don't
        know how many shovelfuls of dirt it needs.  Can you write a program that fills
        it until the ground is even?  Hint:  Try using the while loop this time.
      C3-Farmer While Loops 5_instruction: |
        Wow, now there are two deep holes! Can
        you write a program that fills them both until the ground is even?
      C3-Farmer While Loops 6_instruction: |
        Wow, now there is a large pile of dirt!
        Can you write a program that removes all of it so the ground is even?
      C3-Farmer While Loops 7_instruction: |
        Wow, now there are three piles of dirt!
        Can you write a program that removes each of them until the ground is even?
      C3-Farmer While Loops 8_instruction: |2
         There is a really deep hole and a really
        large pile of dirt.  How many shovelfuls of dirt need to be moved around to
        make the ground flat?  Hint: Use the while loop for both.
      C3-Farmer While Loops Assessment 1_instruction: |
        There are a lot of holes and
        piles.  Help me to fill and remove them to make the ground flat.
      Calc Circles of Eval .1_instruction: |
        You’ll be writing a kind of code called
        Evaluation Blocks, because each block of code evaluates to a single value.
        Change the ??? in this code so that the block evaluates to 5.
      Calc Circles of Eval .2_instruction: |
        This Evaluation Block is a multiplication
        function which takes two numbers and returns the product of those numbers.
        Edit this block so that it multiplies 2 * 5
      Calc Circles of Eval .3_instruction: |
        Here's a function for Addition which
        takes two numbers and returns their sum. Use this Addition block to add 3
        + 6.
      Calc Circles of Eval .4_instruction: |
        Here we've nested an Addition Block
        inside a Multiplication Block. Complete this code so it multiplies 3 by (4
        + 1)
      Calc Circles of Eval 1 (copy 1)_instruction: |
        Convert this statement to <some_shape>
        of evaluation.
      Calc Circles of Eval 1_instruction: |
        Every mathematical operator (+, -, *,
        /, and so on) can be represented by an Evaluation Block in code. Change the
        Evaluation Block to match the expression.
      Calc Circles of Eval 2 (copy 1)_instruction: |
        Convert this statement to <some_shape>
        of evaluation.
      Calc Circles of Eval 2_instruction: |
        Use a multiplication block to complete
        this code.
      Calc Circles of Eval 3_instruction: |
        Complete the Evaluation Blocks to match
        this statement.
      Calc Circles of Eval 4_instruction: |
        This code is missing a couple of Evaluation
        Blocks - make sure you put everything in the right order.
      Calc Circles of Eval 5_instruction: |
        Complete the Evaluation Blocks to match
        this statement.
      Calc Circles of Eval 6_instruction: |
        Complete the Evaluation Blocks to match
        this expression.
      Calc Circles of Eval 7_instruction: |
        Complete the Evaluation Blocks to match
        this statement.
      Calc Circles of Eval 8_instruction: |
        Complete the Evaluation Blocks to match
        this expression.
      Calc Circles of Eval 9_instruction: |
        Complete the Evaluation Blocks to match
        this statement.
      Calc Circles of Eval Free Play_instruction: |
        Free Play: Try using the Evaluation
        Blocks to write some equations of your own. How does nesting the blocks in
        different ways impact their evaluation?
      Calc Define Funcs 1 (copy 1)_instruction: |
        Let's look at some more algebraic
        functions now. Here's a function translated from the simple algebraic function
        f(x) = x + 1. What would you expect this function to output if provided an
        input of 15?
      Calc Define Funcs 1_instruction: |
        Let's look at some more traditional algebraic
        functions now. Here's a function translated from the simple algebraic function
        f(x) = x + 1. What would you expect this function to output if provided an
        input of 15?
      Calc Define Funcs 2_instruction: |
        Write a function f that takes a parameter
        x and returns x - 10. Test your function using f(15).
      Calc Define Funcs 3_instruction: |
        We don't have to call our function 'f'
        every time; create a function called 'times-ten' that should take a parameter
        'x' and return x * 10. Once you've created the function, run times-ten(50).
      Calc Define Funcs 4_instruction: |
        Write a function called half that takes a
        number x and returns half that number. Once you've written the function,
        use it to calculate half(21)
      Calc Define Funcs 5 - multiply 1_instruction: |
        Oh no! We lost our multiply
        block! We'll have to create a function to multiply for us. To start off,
        write a function "f" that takes a parameter "x" and returns x*5. Test
        your function using f(3).
      Calc Design Recipe 1_instruction: |
        Let's use the Design Recipe to create a
        function called cube - this function should have a domain of Number, range
        of Number, and return the given number to the power of 3. Make sure to write
        two example cases! When you're done, use your new function to calculate 7
        cubed.
      Calc Design Recipe 2_instruction: "Your school is holding a bake sale, and\nyou
        need to track the cost of making each cookie, the money paid, and the\ntotal
        profit. Cookies cost $0.25 each to make, and sell for $1.50/cookie.\r\nWrite\nthe
        function cost, which takes in the number of cookies you intend to sell,\nand
        returns the cost of making those cookies."
      Calc Design Recipe 3_instruction: |
        Write the function sales which takes in
        the number of cookies sold, and produces the amount of money customers spent
        to buy those cookies (each cookie is sold at $1.50).
      Calc Design Recipe 4_instruction: |
        Using the two functions we just wrote, write
        the function profit, which takes in the number of cookies you sold, and gives
        you back the total profit you make from selling your cookies, accounting for
        the cost of baking them.
      Calc Free Play_instruction: |
        Free Play: Write functions and algorithms of your
        own design!
      Calc Rocket 1 (copy 1)_instruction: "In the last puzzle you wrote a contract\nfor
        the function \"rocket-height\" that states it has a range of Number, domain\nof
        Number, and should return the height of the rocket traveling at 15 m/s\nafter
        a given number of seconds. Let's write an example case now for the\nheight
        of the rocket at 3 seconds.\r\n\r\n\r\n\r\n  \r\n\r\n"
      Calc Rocket 1_instruction: "In the last puzzle you wrote a contract for the\nfunction
        rocket-height that states it has a range of Number, domain of Number,\nand
        should return the height of the rocket traveling at 15 m/s after a given\nnumber
        of seconds. Let's write an example case now for the height of the\nrocket
        at 3 seconds.\r\n\r\n\r\n\r\n\r\n  \r\n\r\n"
      Calc Rocket 2_instruction: |
        Great, let's do one more example before writing
        the function - what should the rocket height be after 30 seconds?
      Calc Vars 1.1_instruction: |
        Here we've set the age variable to 17 years. Can
        you write an expression that calculates age in days?
      Calc Vars 1_instruction: |
        Variables allow us to name values so that we can
        easily refer to them repeatedly throughout our programs. Here's a variable
        called age. Set its value to your age and click run.
      Calc Vars 2 (copy 1)_instruction: |
        Here we've set the "age" variable to
        17 - can you write an expression that calculates "age" in months?
      Calc Vars 2.1_instruction: |
        Here's a new variable called age-in-months - use
        the variable age to set age-in-months.
      Calc Vars 2_instruction: |
        Can you write an expression that calculates age in
        months?
      Calc Vars 3 (copy 1)_instruction: |
        Can you add to this code so that it calculates
        how many hours there are in "age" years?
      Calc Vars 3_instruction: |
        Can you add to this code so that it uses the "age"
        variable to calculate age in hours?
      Calc Vars 4_instruction: |
        We can also set variables by using other variables.
        Let's say you have a brother who is two years younger than you - can you
        set a new variable "brother-age" using your "age" variable?
      Code Studio Puzzle Challenge 1 - Artist_instruction: "Draw the line. It is\n200
        pixels long. \n"
      Code Studio Puzzle Challenge 1 Artist1_instruction: "Draw the line. It is 200\npixels
        long. \n"
      Code Studio Puzzle Challenge 10 - Bee (copy 1)_instruction: |
        Move the Bee to
        the flower and get all of the nectar.
      Code Studio Puzzle Challenge 10 - Bee_instruction: |
        Move the Bee to the flower
        and get all of the nectar.
      Code Studio Puzzle Challenge 10b - Bee_instruction: |
        Move the Bee to the flowers
        and get all of the nectar at each.
      Code Studio Puzzle Challenge 11 - Artist_instruction: |
        Draw this line by using
        the variable "length". Each line segment is 75 pixels long.
      Code Studio Puzzle Challenge 11b - Artist_instruction: |
        Draw a square by using
        the variable length provided.
      Code Studio Puzzle Challenge 12 - Artist_instruction: |
        The code provided draws
        one triangle. Add to it to draw triangles in a hexagon pattern.
      Code Studio Puzzle Challenge 12a - Artist_instruction: |
        The code provided draws
        one triangle. Add to it to draw triangles in a hexagon pattern.
      Code Studio Puzzle Challenge 13 - Artist_instruction: "This is just like a\n\"for\"
        loop. Complete the code to draw six lines that grow from 50, 60, 70,\n80,
        90, to 100 pixels long. \n"
      Code Studio Puzzle Challenge 14 - Artist_instruction: "This is just like a\n\"for\"
        loop. Complete the loop to draw 4 squares that grow from 80, 100,\n120, to
        140 pixels. \n"
      Code Studio Puzzle Challenge 2 - Artist_instruction: |
        Now add a turn and another
        line. The lines are 200 pixels long.
      Code Studio Puzzle Challenge 3 - Artist_instruction: |
        Draw the square. Each
        side is 100 pixels long.
      Code Studio Puzzle Challenge 4 - Artist_instruction: |
        Draw the octagon. Each
        side is 100 pixels long.
      Code Studio Puzzle Challenge 5 - Bee (copy 1)_instruction: |
        Move the Bee to
        the flower and get the nectar.
      Code Studio Puzzle Challenge 5 - Bee_instruction: |
        Flowers contain a specific
        amount of nectar. Move the Bee to the flower and collect nectar with the get
        nectar block.
      Code Studio Puzzle Challenge 6 - Bee_instruction: |
        Honeycombs can hold a specific
        amount of honey. Get the nectar from the flower and make some honey.
      Code Studio Puzzle Challenge 7 - Bee_instruction: |
        Move the Bee to the flower
        and get the nectar.
      Code Studio Puzzle Challenge 8 - Bee_instruction: |
        The cloud could be hiding
        a flower or a honeycomb. Only get nectar from flowers. Only make honey at
        honeycombs.
      Code Studio Puzzle Challenge 9 - Bee_instruction: |
        The cloud could be hiding
        a flower or a honeycomb. Only get nectar from flowers. Only make honey at
        honeycombs.
      Code Studio Puzzle Challenge Artist Screencast (copy 1)_instruction: "Draw\nthe
        line. Each segment is 100 pixels long. \n"
      Code Studio Puzzle Challenge Artist Screencast 2_instruction: "Complete the\ncode
        to draw the line. Each segment is 100 pixels long. \n"
      Code Studio Puzzle Challenge Artist Screencast_instruction: "Draw the line.\nEach
        segment is 100 pixels long. \n"
      Code Studio Puzzle Challenge Bee Screencast_instruction: |
        Move the Bee to the
        flowers and get all of the nectar.
      Code Studio Puzzle Challenge Square - Artist_instruction: |
        Draw a square by
        using the variable length provided.
      Code Studio Puzzle Challenge Var - Artist_instruction: |
        Draw a line by using
        a variable "length" set to 180.
      Course 2 Bee Loops 1_instruction: "Hi, I'm a bee. Can you help me collect\nthe
        nectar from these flowers? \n"
      Course 2 Bee Loops 13_instruction: |
        Assessment: Use the repeat block to collect
        all of the nectar.
      Course 2 Bee Loops 2_instruction: |
        Can you do the same task more easily with
        a loop?
      Course 2 Bee Loops 3_instruction: |
        Now use the new repeat block to collect
        all of the nectar and make all of the honey.
      Course 2 Bee Loops 3__instruction: |
        Can you use a loop to collect all that
        nectar?
      Course 2 Bee Loops 4_instruction: |
        What happens if you loop this sequence 3
        times? Don't forget to make the honey at the end!
      Course 2 Maze Loops 1_instruction: Você pode me levar até o porco usando 5 blocos?
      Course 4 2_instruction: |
        Agora a abelha só quer néctar. Lembre-se, nem
        todos os objetos são flores, então faça a verificação para coletar néctar apenas das flores.
      Course 4 Artist 1_instruction: |
        Ajude-me a terminar de desenhar minha caixa. (Cada linha tem
        300 pixels de comprimento)
      Course 4 Artist 10_instruction: |
        Atividade livre! Divirta-se e desenhe
        o que quiser.
      Course 4 Artist 11_instruction: |
        Now for a challenge!  Here is a design that
        uses only blocks that you have already been shown.  Can you figure out how
        to recreate it without any extra information?  Hint:  Feel free to use trial
        and error. You are not expected to get it perfect the first time.
      Course 4 Artist 12_instruction: "Free Play Inspiration: You've now learned\neverything
        you need to know to make a pattern like this! If this picture inspires\nyou,
        try to make something similar. Otherwise, create something all your own.\r\n\n\r\nWant
        to know how our inspiration pattern was made? Visit https://studio.code.org/c/105671120/edit\nfor
        the solution."
      Course 4 Artist 13_instruction: |
        Still playing?  Here is a blank canvas where
        you can design anything you want!
      Course 4 Artist 2_instruction: |
        Você consegue repetir este código para desenhar
        o quadrado em cinza?
      Course 4 Artist 20_instruction: |
        Still playing?  Here is a blank canvas where
        you can create whatever you want!
      Course 4 Artist 3_instruction: |
        Ok, tente descobrir o que acontece se você executar
        esse código (ou clique em "Executar" para ver). Em seguida, execute-o várias vezes para completar
        o desenho.
      Course 4 Artist 4_instruction: |
        How many degrees are in a circle?  Fill in
        the repeat block with that number to create a circle of colors.
      Course 4 Artist 5_instruction: |
        Desenhe a outra metade desse design para que ele
        fique simétrico. Os triângulos são equiláteros e têm 50 pixels de comprimento.
      Course 4 Artist 6_instruction: |
        Complete o código para desenhar esses triângulos.
        Dica: 3 triângulos em uma rotação de 360 graus.
      Course 4 Artist 7_instruction: |
        Agora, aninhe esse laço dentro de outro laço para desenhar
        10 triângulos. Isso se chama laço aninhado. Dica: todos os 10 triângulos completam
        uma rotação de 360 graus.
      Course 4 Artist 8_instruction: |
        Desenhe esse sol repetindo todo este bloco de código
        12 vezes.
      Course 4 Artist 9_instruction: |
        Repita esse design 10 vezes e certifique-se de virar
        a cada figura desenhada. Uma dica sobre o quanto você
        precisa virar: quanto é 360 dividido por 10?
      Course 4 Artist Binary 1_instruction: |
        Temos aqui uma função que recebe uma string
        binária de 1's e 0's e instrui o artista a mover-se da esquerda para
        a direita, de cima para baixo, preenchendo os quadrados nos quais ele vê um 1 e ignorando
        os que têm um 0. Execute esse código para ver como o artista usa números binários para desenhar
        este padrão.
      Course 4 Artist Binary 2_instruction: |
        Qual dessas strings binárias você poderia
        repetir 8 vezes para desenhar esta imagem?
      Course 4 Artist Binary 3_instruction: |
        Você consegue desenhar este padrão usando
        a repetição de uma string binária de 3 dígitos?
      Course 4 Artist Binary 4_instruction: |
        Cada string binária representa uma linha dessa
        imagem. Você consegue reorganizá-las de forma que elas desenhem um rostinho feliz
        ao invés de um rostinho triste?
      Course 4 Artist Binary 5_instruction: |
        Que string binária de 6 dígitos, repetida
        11 vezes, vai desenhar essa imagem?
      Course 4 Artist Binary 6_instruction: |
        Qual é a menor string binária que você
        pode repetir para desenhar esta imagem?
      Course 4 Artist Binary 7_instruction: Termine o desenho.
      Course 4 Artist Binary Free Play 2_instruction: |
        Atividade livre: aqui temos uma tela de maior
        resolução para desenhar - 16 bits por 16 bits!
      Course 4 Artist Binary Free Play_instruction: |
        Atividade livre: desenhe o que quiser
        com números binários!
      Course 4 Artist For  Functions 10_instruction: |
        Vamos acelerar um pouco,
        você consegue desenhar uma forma de estrela usando a função "desenhe uma linha de quadrados"?
        Boa sorte!
      Course 4 Artist For  Functions 11_instruction: |
        Vamos acelerar um pouco,
        você consegue desenhar uma forma de estrela usando a função "desenhe uma linha de quadrados"?
        Boa sorte!
      Course 4 Artist For Loops 1_instruction: |
        Desenhe este triângulo que tem 50 pixels.
        Dica: use um bloco repita.
      Course 4 Artist For Loops 10_instruction: |
        Atividade livre! Divirta-se desenhando
        o que quiser com os blocos que você aprendeu a usar
      Course 4 Artist For Loops 11_instruction: |
        Você se lembra de quando usamos uma variável
        para controlar o número de lados em uma forma? Este padrão começa com um triângulo
        e adiciona um lado por vez, até que seja desenhado um decágono (10 lados). Cada lado
        deve ter 100 pixels de comprimento. Dica: 360 dividido pelo número de lados de uma forma
        é o número de graus que você vai precisar virar.
      Course 4 Artist For Loops 11a_instruction: "Let's put it all together!  Using\nyour
        knowledge of \"for loops\" and the \"counter\", create this drawing where\neach
        shape has two more sides than the last.  Make sure that each side is\n10 times
        as long as the number of sides in the polygon.\r\n\r\nVery little\nof the
        code has been provided for you."
      Course 4 Artist For Loops 12_instruction: |
        Isso foi muito legal, mas agora
        eu gostaria de desenhar uma forma do lado da outra. Desta vez, cada lado tem
        20 pixels. Use um bloco pule para avançar 40 pixels após cada forma.
      Course 4 Artist For Loops 13_instruction: |
        Hmm, essas formas estão ficando cada vez
        maiores! Já não tínhamos resolvido esse problema com variáveis? Como
        podemos usar a variável contador para deixar os lados menores conforme a forma tem
        mais lados? Ao invés de avançar por uma quantidade definida, avance (100 /
        contador) pixels.
      Course 4 Artist For Loops 14_instruction: |
        Se você virar um pouco mais, ou um pouco menos, do que normalmente faria para uma forma, você cria um efeito legal. Tente
        virar 89 graus para criar esse efeito de espiral quadrada.
      Course 4 Artist For Loops 15_instruction: |
        Atividade livre: tente fazer alguns desenhos
        você mesmo, usando laços para. Adicionamos algumas variáveis genéricas
        para você usar também.
      Course 4 Artist For Loops 2_instruction: |
        Eu coloquei o código para desenhar
        um triângulo dentro de um laço para que conta de 50 até 100, de 10 em 10. Veja como
        eu fiz o código, e então clique em "Executar" quando você estiver pronto para vê-lo
        em ação.
      Course 4 Artist For Loops 3_instruction: |
        O menor triângulo tem lados de 20 pixels,
        o maior tem lados de 200 pixels, e cada triângulo é 20 pixels maior que
        o anterior. Atualize o laço para desenhar esses triângulos.
      Course 4 Artist For Loops 4_instruction: |
        Use um laço "para" para desenhar esses quadrados.
        Eles começam com 50 pixels de comprimento, o maior tem 300 pixels de comprimento, e cada quadrado
        é 25 pixels maior que o anterior. Foi fornecida a maior parte do código
        de que você vai precisar - está faltando um bloco, qual?
      Course 4 Artist For Loops 5_instruction: |
        Você fez um bom trabalho no último desafio!
        Vamos usar o bloco da variável "contador" mais uma vez para desenhar esta imagem.
      Course 4 Artist For Loops 6_instruction: |
        Atividade livre: tente usar um laço "para"
        para desenhar um padrão crescente de formas com seu próprio design.
      Course 4 Artist For Loops 7_instruction: |
        O que acontece se você remover "Repita 3"
        desse algoritmo, mantendo os blocos "mova" e "vire" no laço
        para? Neste triângulo espiralado, cada lado é 20 pixels mais comprido que o anterior.
      Course 4 Artist For Loops 8_instruction: |
        A menor reta nessa espiral quadrada
        tem 10 pixels, a maior tem 200, e cada reta é 10 pixels maior que a
        anterior. Você consegue preencher os blocos que faltam para completar essa imagem incrível?
      Course 4 Artist For Loops 9_instruction: |
        Você consegue fazer uma espiral? Avance
        de 1 a 75 pixels, aumentando 1 pixel de cada vez.
      Course 4 Artist For Loops inspire_instruction: "Free Play Inspiration: You've\nnow
        learned everything you need to know to make a pattern like this! If this\npicture
        inspires you, try to make something similar. Otherwise, create something\nall
        your own.\r\n\r\nWant to know how our inspiration pattern was made? Visit\nhttps://studio.code.org/c/106387604
        for the solution."
      Course 4 Artist Functions 1_instruction: |
        Você consegue desenhar um quadrado com 100
        pixels de comprimento usando um laço?
      Course 4 Artist Functions 10_instruction: |
        Qual bloco você precisa adicionar para
        que o triângulo fique em cima do quadrado?
      Course 4 Artist Functions 11_instruction: |
        Veja esse código para desenhar um
        cubo - você consegue movê-lo para dentro de uma função chamada "desenhe um cubo"?
      Course 4 Artist Functions 12_instruction: Repita a função quadrado para desenhar
        uma reta
      Course 4 Artist Functions 13_instruction: |
        Confira nossa nova função
        "desenhe uma linha de quadrados". Fique à vontade para olhar dentro do bloco da função
        e ver como a construímos. Clique em "Executar" quando estiver pronto para o
        próximo desafio.
      Course 4 Artist Functions 14_instruction: |
        Excelente! Vamos usar
        sua nova função "desenhe uma linha de quadrados" para desenhar uma forma de quadrado. Lembre-se,
        cada quadrado tem 40 pixels de comprimento.
      Course 4 Artist Functions 15_instruction: 'Vamos acelerar um pouco, você consegue
        desenhar uma forma de estrela usando a função "desenhe uma linha de quadrados"?
        Boa sorte! Dica: você terá de virar 144 graus'
      Course 4 Artist Functions 2_instruction: |
        Você consegue desenhar 3 quadrados com 20 pixels de distância
        entre cada um? Dica: cada quadrado tem 100 pixels de tamanho
      Course 4 Artist Functions 3_instruction: "Usando o bloco de função \"desenhe
        um quadrado\",\nvocê consegue desenhar esta imagem? Dica: os quadrados estão
        a 120 pixels de distância um do outro.\r\n"
      Course 4 Artist Functions 4_instruction: |
        Você está pronto para criar seu próprio
        "bloco de função"? Clique no bloco "Funções" na caixa de ferramentas, nomeie-o
        como "desenhe um triângulo", e então crie um triângulo como você fez anteriormente
        com os blocos de ação e de laços. Então, clique em salvar e fechar no canto
        superior direito. Dica: crie um triângulo que tenha 100 pixels de comprimento.
        Boa sorte!
      Course 4 Artist Functions 5 OLD_instruction: |
        Vamos tentar usar nossas duas funções
        para desenhar uma casa - o que precisa ser corrigido neste código para desenhar a casa corretamente?
      Course 4 Artist Functions 5_instruction: "Usando o bloco de função \"desenhe
        um quadrado\",\nvocê consegue desenhar esta imagem? Dica: os quadrados estão
        a 120 pixels de distância um do outro.\r\n"
      Course 4 Artist Functions 6_instruction: |
        Qual bloco você precisa adicionar para
        que o triângulo fique em cima do quadrado?
      Course 4 Artist Functions 7_instruction: |
        Você consegue desenhar uma linha de quadrados usando
        uma função Quadrado? Cada quadrado tem 40 pixels de comprimento.
      Course 4 Artist Functions 8_instruction: |
        Você está pegando o jeito de como
        usar os blocos de função? Vamos modificar esse quadrado para que ele tenha 200 pixels
        de tamanho. Dica: clique em "editar" para alterar o tamanho de "desenhe um quadrado"
        no editor da função. Lembre-se de clicar em "Salvar e Fechar" para sair do
        editor da função.
      Course 4 Artist Functions 9_instruction: |
        A maior parte do código para
        criar uma função foi dada a você. Contudo, parece que algo está faltando. Você consegue
        completar este bloco de função?
      Course 4 Artist Inspire_instruction: "Free Play Inspiration: You've now learned\neverything
        you need to know to make a pattern like this! If this picture inspires\nyou,
        try to make something similar. Otherwise, create something all your own.\r\n\n\r\nWant
        to know how our inspiration pattern was made?  Visit https://studio.code.org/c/105765376/edit\nfor
        the solution."
      Course 4 Artist Params 1_instruction: |
        Vamos editar uma função que desenha um
        quadrado com lados de 50 pixels
      Course 4 Artist Params 10_instruction: |
        Você pode chamar funções de dentro
        de outras funções! Usando sua função "forma" como base, crie 3 formas
        de casa, cada uma 20 pixels maior que a anterior, começando com um comprimento de 50 pixels. Usar
        um laço com contador pode ser útil.
      Course 4 Artist Params 11_instruction: |
        How about a function called "pinwheel"
        that takes three parameters - "sides," "length" and "repeat." You can
        calculate how much to turn after each shape using the same math you used to
        figure out the turns for a shape of "sides". Can you recreate this picture?
        Here's a tip each shape is 100 pixel's in length.
      Course 4 Artist Params 12_instruction: |
        Use sua função "cata-vento" para desenhar
        cada uma dessas formas. O comprimento do lado de cada imagem é 50.
      Course 4 Artist Params 13_instruction: |
        Atividade livre: aqui estão as funções que você escreveu
        e mais algumas com as quais você pode brincar. Desenhe alguma coisa incrível!
      Course 4 Artist Params 2_instruction: |
        That triangle function would be a whole
        lot more useful if it could draw triangles of different sizes. I've added
        a parameter for line length, but it doesn't do anything yet. Can you update
        the function so it uses the "length" parameter when it draws each side?
        The triangle sizes are 150 pixels, 75 pixels and 25 pixels.
      Course 4 Artist Params 3_instruction: |
        Incrível! Você consegue desenhar cada um desses triângulos
        com essa nova função? O primeiro tem 25 pixels de comprimento, o segundo
        tem 50 e o terceiro tem 75.
      Course 4 Artist Params 4_instruction: |
        Você consegue adicionar uma nova função chamada quadrado?
        Ela também deve receber um parâmetro comprimento, como a função triângulo. Dessa vez,
        desenhe 3 quadrados, de 25, 50, e 75 pixels de comprimento, separados por 100 pixels.
      Course 4 Artist Params 5_instruction: |
        Use suas duas novas funções para desenhar
        esta imagem. Para facilitar, você pode usar um laço com um parâmetro "contador".
      Course 4 Artist Params 6_instruction: |
        Vamos editar essa função "desenhe uma forma".
        Ela já tem um parâmetro "comprimento". Agora, vamos editar a função para adicionar também
        um parâmetro "lados". Lembre-se de que o ângulo para virar para uma determinada forma é
        360 dividido pelos lados que ela tem. Dica: o triângulo tem 100 pixels de comprimento, o hexágono tem 25 pixels e o quadrado tem 50 pixels.
      Course 4 Artist Params 7_instruction: |
        Você consegue desenhar essas formas, preenchendo
        o "???"? O quadrado e o triângulo têm 100 pixels, enquanto o hexágono
        tem 75 pixels.
      Course 4 Artist Params 8_instruction: |
        Você consegue descobrir como desenhar esta
        forma? Dica: crie uma nova função com 6 lados chamada hexágono.
      Course 4 Artist Params 9_instruction: |
        Você se lembra de quando usamos o laço contador,
        mas removemos um laço de dentro? Vamos nos divertir um pouco e usar a função "desenhe uma
        forma" com os parâmetros "lados" e "comprimento". Você pode recriar
        essas formas? O contador do quadrado deve ser 5/100/5, o do triângulo deve ser
        10/100/10 e o do hexágono deve ser 2/100/2.
      Course 4 Artist Var 9_instruction: |
        Aqui está o algoritmo para desenhar um triângulo.
        Modifique-o para que ele use a variável "lados". Substitua o número 3
        pela variável "lados". Dica: lembre-se de usar o bloco "defina os lados para".
      Course 4 Artist Vars 1_instruction: |
        Você pode me ajudar a desenhar um triângulo? Ele tem
        100 pixels de comprimento em cada lado.
      Course 4 Artist Vars 10_instruction: |
        Aqui temos um algoritmo que desenha um triângulo
        a partir de triângulos menores. Você pode modificá-lo para que ele use a variável "lados"
        para desenhar cada triângulo? Olhe para o código e, toda vez que você
        vir o número 3, substitua-o pela variável "lados". Lembre-se de usar
        o bloco "defina os lados".
      Course 4 Artist Vars 11_instruction: |
        Aqui está o mesmo algoritmo que usamos
        no último desafio - qual deve ser o valor atribuído à variável "lados"
        para desenhar essa imagem de quadrados?
      Course 4 Artist Vars 12_instruction: |
        Vamos definir a variável "lados" como
        5. Quanto mais lados adicionarmos a esse algoritmo, maior será o
        padrão! Vamos adicionar uma nova variável chamada "comprimento" e usá-la onde há
        um bloco "avance". Para essa forma, defina a variável "comprimento" como 75.
      Course 4 Artist Vars 13_instruction: |
        Quanto mais lados a forma tem, menor
        cada lado precisa ser para que o padrão todo caiba na tela.
        Ao invés de definir a variável "comprimento" manualmente, vamos usar a variável "lados"
        e um bloco matemático para definir o "comprimento". Escolha a equação correta
        da caixa de ferramentas para definir a variável "comprimento" e também atualize a variável
        "lados".
      Course 4 Artist Vars 14_instruction: |
        Atividade livre: veja, agora seu algoritmo
        está aninhado dentro de mais um laço. Experimente alterar os valores das
        suas duas variáveis para desenhar padrões legais.
      Course 4 Artist Vars 2_instruction: |
        Ao invés de "avance por 100,"
        o bloco "mova" agora referencia a variável "comprimento". Você pode definir
        "comprimento" como 150 para desenhar esse triângulo novo?
      Course 4 Artist Vars 3_instruction: |
        Temos aqui um laço que desenha um quadrado, mas
        algo está faltando. Você pode consertá-lo para que ele use a variável "comprimento"
        para descobrir qual deve ser o tamanho de cada lado?
      Course 4 Artist Vars 4_instruction: |
        Agora eu quero fazer um retângulo que tenha
        a altura duas vezes maior que a largura. Temos uma variável chamada "largura" que
        tem valor 100. Você pode usar os blocos matemáticos para completar o código?
      Course 4 Artist Vars 5_instruction: |
        Use a variável "lados" para controlar
        quantas vezes esse laço é executado.
      Course 4 Artist Vars 6_instruction: |
        Hmm, eu tentei alterar o valor da variável "lados"
        para 4 a partir do código do último desafio, mas ele ainda está desenhando um triângulo.
        Você pode usar a variável "lados" (junto com um bloco matemático) para garantir
        que eu vire a quantidade correta? Dica: 360 dividido pelo número de lados
        resulta no número de graus a virar.
      Course 4 Artist Vars 7_instruction: |
        Você pode modificar a variável "lados"
        para me ajudar a desenhar esse hexágono?
      Course 4 Artist Vars 8_instruction: |
        Atividade livre: faça experiências com o número
        de lados que essa forma tem. Você consegue alterar o algoritmo de forma que o tamanho
        total da forma seja sempre o mesmo, não importando quantos lados ela tem? Dica: você
        pode precisar usar seus blocos matemáticos (360 dividido por "lados" em dois lugares
        desta vez)
      Course 4 Artist Vars 9_instruction: |
        Modifique esse algoritmo para que ele use a variável
        "lados" ao invés de um número fixo para desenhar um triângulo. Use o bloco
        "defina os lados para".
      Course 4 Bee 1_instruction: |
        A abelha não sabe dizer se isso é uma flor ou uma colmeia.
        Primeiro verifique se isso é uma for ou uma colmeia, e então colete néctar
        apenas se for uma flor.
      Course 4 Bee 2_instruction: |
        Verifique cada objeto para ver se é uma flor. Se for,
        colete o néctar... caso contrário, você pode ignorá-lo!
      Course 4 Bee 3_instruction: |
        O objeto desconhecido pode ser uma flor ou uma colmeia.
        Use o bloco se-senão para coletar néctar se ele for uma flor, senão produza mel
        (porque então ele seria uma colmeia).
      Course 4 Bee 4_instruction: |
        Essa flor roxa pode ter 1, 2 ou 3
        néctares. Aqui um bloco se-senão é combinado com outro bloco se-senão para criar
        um bloco se, senão-se, senão. Complete a solução para coletar a quantidade desconhecida
        de néctar.
      Course 4 Bee 5_instruction: |
        This purple flower may have either 3, 2, or 1
        nectar. Add an if-else block to create an if, else-if, else block. Complete
        the solution to collect the unknown amount of nectar.
      Course 4 Bee 6_instruction: |
        This purple flower may have either 3, 2, or 1
        nectar. Create an if, else-if, else block to collect the unknown amount of
        nectar.
      Course 4 Bee 7_instruction: |
        Use everything you have learned so far to collect
        all the nectar. The purple flower may have either 3, 2, or 1 nectar.
      Course 4 Bee For Loops 1_instruction: |
        Use um laço para coletar o néctar de
        todas as flores.
      Course 4 Bee For Loops 10_instruction: |
        Se seu laço está fazendo contagem regressiva, o
        incremento é subtraído da sua variável contador a cada repetição. Qual deve ser
        seu incremento para coletar 9, então 6, e então 3 néctares?
      Course 4 Bee For Loops 11_instruction: |
        What's wrong with this loop? See if
        you can fix it and make the bee collect all the nectar.
      Course 4 Bee For Loops 2_instruction: |
        Temos aqui um novo tipo de laço, chamado de
        laço "para". Esse laço para em particular vai contar de 1 até 5, de 1 em 1, e executar
        o conteúdo do laço a cada contagem. Ajude a abelha a chegar até o néctar.
      Course 4 Bee For Loops 3_instruction: |
        Você pode resolver esse desafio usando um
        laço "para" para contar de 1 até 3, de 1 em 1. Agora vamos coletar um pouco de néctar!
      Course 4 Bee For Loops 4_instruction: |
        Colete todo o néctar dessas
        flores. Eu gostaria de saber se existe uma forma mais fácil de fazer isso...
      Course 4 Bee For Loops 5_instruction: |
        Ah, o laço para deixa isso muito mais fácil!
        Estamos usando a variável "contador" do laço "para" para repetir o bloco "obtenha néctar"
        o mesmo número de vezes que o laço se repete. Ufa! São muitas repetições.
        Todo o código que você precisa está aqui, dê uma olhada nele e então
        clique em Executar para ver como ele funciona.
      Course 4 Bee For Loops 6_instruction: |
        Você também pode usar um laço "para" para fazer contagem
        regressiva. Tente coletar esse néctar fazendo uma contagem regressiva de 5 até 1, de 1 em 1.
      Course 4 Bee For Loops 7_instruction: |
        Use a variável "contador" do seu laço "para"
        para controlar a distância do movimento horizontal.
      Course 4 Bee For Loops 8_instruction: |
        Você pode usar a variável do laço para controlar
        o movimento e a coleta de néctar?
      Course 4 Bee For Loops 9_instruction: |
        O último número em seu laço para é
        chamado de "incremento" e, a cada execução do laço, a variável contador
        é alterada de acordo com o incremento. Tente coletar essas flores usando um incremento
        de 2.
      Course 4 Bee Params 1_instruction: |
        Use a função "obtenha 3 néctares" que
        vira, move-se para coletar o néctar e então retorna à posição original.
        Escreva uma sequência para coletar todo o néctar usando "obtenha 3 néctares".
      Course 4 Bee Params 2_instruction: |
        Modifique a função "obtenha 2 néctares" para
        que ela me faça virar para a direita ao invés da esquerda para chegar às flores.
      Course 4 Bee Params 3 (copy 1)_instruction: |
        Agora há flores em ambos os
        lados! Talvez você possa usar um parâmetro para que a mesma função funcione para flores
        dos dois lados. Eu adicionei um parâmetro chamado "direção" à função.
        Se o parâmetro "direção" for igual a 0 eu devo virar à esquerda, se ele for 1 eu devo
        virar à direita.
      Course 4 Bee Params 3_instruction: |
        Agora há flores em ambos os lados! Eu
        adicionei um parâmetro chamado "direção" à função. Use as variáveis "esquerda" e
        "direita" para controlar a direção. Preencha o resto da definição da função
        e então clique em "Salvar e Fechar".
      Course 4 Bee Params 4 (copy 1)_instruction: |
        Tente usar sua nova função para
        coletar todas as flores. Lembre-se, 0 = esquerda e 1 = direita.
      Course 4 Bee Params 4 backup_instruction: |
        Não seria legal se pudéssemos
        coletar todo o néctar com uma única função? Tente adicionar um novo
        parâmetro à função chamado "néctares" para controlar a quantidade de néctar
        a coletar. Você provavelmente vai querer renomear a função também!
      Course 4 Bee Params 4_instruction: |
        Tente usar sua nova função para coletar
        todas as flores. Lembre-se de usar as variáveis esquerda e direita.
      Course 4 Bee Params 5_instruction: |
        Vamos começar do princípio - você pode criar
        uma nova função chamada "obtenha 5 néctares" com um parâmetro de direção?
      Course 4 Bee Params 6 (copy 1)_instruction: |
        Tente usar sua nova função para
        coletar todo o néctar.
      Course 4 Bee Params 6_instruction: |
        Não seria legal se pudéssemos coletar
        todo o néctar com uma única função? Tente adicionar um novo parâmetro
        à função chamado "néctares" para controlar a quantidade de néctar a coletar.
        Você provavelmente vai querer renomear a função também!
      Course 4 Bee Params 7 (copy 1)_instruction: |
        Tente usar sua nova função para
        coletar todo o néctar.
      Course 4 Bee Params 7_instruction: |
        Tente usar sua nova função para coletar
        todo o néctar.
      Course 4 Bee Params 8_instruction: |
        Ah, agora também precisamos lidar com o mel!
        Como você poderia atualizar sua função para coletar néctar ou produzir mel?
      Course 4 Binary 1_instruction: |
        Temos aqui uma função que recebe uma string binária
        de 1's e 0's e instrui a fazendeira a se mover da esquerda para a direita,
        de cima para baixo, passando pelos quadrados nos quais o número tem um zero. Execute o
        código fornecido para ver como a fazendeira usa números binários para desenhar uma imagem.
      Course 4 Binary 2_instruction: |
        Qual string binária você poderia repetir 8 vezes para
        desenhar essa imagem? Dica o número "1" preenche um buraco.
      Course 4 Binary 3_instruction: |
        Você pode desenhar esse padrão repetindo uma única
        string binária?
      Course 4 Binary 5 (copy 1)_instruction: |
        Qual string binária, repetida 10 vezes,
        vai desenhar essa imagem?
      Course 4 Binary 5_instruction: |
        Qual string binária, repetida 10 vezes, vai
        desenhar essa imagem?
      Course 4 Binary 6 (copy 1)_instruction: |
        Qual string binária, repetida 10 vezes,
        vai desenhar essa imagem?
      Course 4 Binary 6_instruction: |
        Qual string binária, repetida 10 vezes, vai
        desenhar essa imagem?
      Course 4 Binary 7_instruction: |
        Qual string binária, repetida 10 vezes, vai
        desenhar essa imagem?
      Course 4 Binary 8_instruction: |
        Você pode completar a maior parte dessa imagem
        repetindo um número binário de 5 bits - então você vai precisar de mais um número de 4 bits
        para completar o canto inferior direito.
      Course 4 Maze 1_instruction: Leve o Angry Bird até o porco!
      Course 4 Maze 2_instruction: Desvie do TNT!
      Course 4 Maze 3_instruction: 'Programe o Angry Bird para chegar até o porco. '
      Course 4 Maze 4_instruction: Experimente o bloco "repita" para usar menos blocos...
      Course 4 Maze 5_instruction: |
        Você pode resolver esse desafio usando o menor número
        possível de blocos?
      Course 4 Maze 6_instruction: |
        Você pode resolver esse desafio usando o menor número
        possível de blocos?
      Course 4 Play Lab For Loops 2_instruction: |
        Dessa vez, vamos tentar contar
        os números ímpares de 1 até 100.
      Course 4 Play Lab Params 1_instruction: |
        Aqui temos uma função chamada "pule"
        que faz seu personagem principal pular 100 pixels. Use a função pule
        para coletar todas as bandeiras.
      Course 4 Play Lab Params 10_instruction: |
        Adicionamos uma última função para
        que você use. Programe seu jogo para chamar a função "suba de nível" se "pontos_jogador"
        > 10. Jogue o jogo e passe do nível 4 para seguir para o próximo desafio.
      Course 4 Play Lab Params 2_instruction: |
        Agora temos bandeiras que estão altas demais
        para nosso pulo atual! Vamos adicionar um parâmetro à função pule chamado
        "altura". A seta para cima deve pular 200 pixels, mas a seta para baixo deve
        pular 100 pixels. Clique em "editar" na função pule e atualize-a para que
        ela use o parâmetro altura ao invés de simplesmente pular 100 pixels.
      Course 4 Play Lab Params 3_instruction: |
        Vamos adicionar outro parâmetro à
        função pule para que possamos usá-la com outros personagens. Cada personagem é representado
        por um número, começando em um. Edite a função "pule" para que a definição
        inclua o parâmetro "personagem".
      Course 4 Play Lab Params 4_instruction: |
        Aqui temos uma função chamada "patrulhe".
        Edite-a para mover o gato 400 pixels para cima, e então 400 pixels para baixo.
      Course 4 Play Lab Params 5_instruction: |
        Preencha a entrada do parâmetro "personagem"
        para que possamos chamar a função "patrulhe" para cada um dos personagens. Lembre-se,
        os personagens correspondem aos números 1, 2 e 3.
      Course 4 Play Lab Params 6_instruction: |
        Adicione outro parâmetro chamado "velocidade"
        à função "patrulhe". Use um bloco "defina a velocidade" com o novo parâmetro
        "velocidade".
      Course 4 Play Lab Params 7_instruction: |
        Use as setas do teclado para controlar o
        cão e coletar todas as bandeiras.
      Course 4 Play Lab Params 8_instruction: |
        Use um bloco "quando tocar" para enviar
        o cão de volta para a parte superior esquerda se ele tocar em qualquer outro personagem.
      Course 4 Play Lab Params 9_instruction: |
        Temos aqui um dos jogos nos quais estávamos trabalhando
        mais cedo. Adicionamos uma função chamada "marque_pontos" que recebe um parâmetro
        "pontos". Edite a função para que o parâmetro "pontos" seja adicionado à
        variável "pontos_do_jogador". Faça o cão marcar 10 pontos para seguir para
        o próximo desafio.
      Course 4 Play Lab Vars 1_instruction: |
        Você não precisa escrever código algum, apenas
        clique em "Executar" para jogar! Nesse jogo, você é o cão que está tentando
        coletar mais bandeiras do que o gato. Use a seta para baixo para controlar o cão.
        Pressione "Terminar" quando você terminar de jogar.
      Course 4 Play Lab Vars 2_instruction: |
        Essa corrida não foi muito justa! Altere
        a variável "velocidade_cão" para garantir que você possa coletar mais bandeiras do que o
        gato. O primeiro a coletar 10 bandeiras vence!
      Course 4 Play Lab Vars 3_instruction: |
        Temos aqui um novo tipo de jogo! Use as
        setas para a esquerda e para a direita para se mover e a seta para cima para pular. Veja se você
        consegue coletar todas as bandeiras.
      Course 4 Play Lab Vars 4_instruction: |
        Agora estamos usando uma variável chamada "altura"
        para controlar a altura que o cão pode pular. Atualize a variável "altura" para que
        o cão possa pular alto o suficiente para alcançar todas as bandeiras. Dica: as novas bandeiras estão
        a uma altura de 200 pixels.
      Course 4 Play Lab Vars 5_instruction: |
        Vamos criar um jogo! Primeiro precisamos de
        uma pontuação. Use o bloco "defina os pontos como" para definir a pontuação com valor 10.
      Course 4 Play Lab Vars 6 (copy 1)_instruction: |
        Legal, agora temos nossa variável
        pontuação, mas como vamos torná-la útil? Que tal somar à variável
        pontuação toda vez que você acertar o inimigo com uma bola de fogo? Use o evento
        "quando o personagem 2 tocar em alguma coisa" para disparar uma atualização para a pontuação
        quando sua bola de fogo atingir o gato. Você pode incrementar a pontuação fazendo pontuação
        = pontuação + 1. Faça sua pontuação chegar até 10 (um ponto por vez!) para passar de nível.
      Course 4 Play Lab Vars 6_instruction: |
        Em nosso jogo, como devemos marcar pontos?
        Adicione 1 à variável "pontos" toda vez que o cão atingir o gato com uma bola de fogo.
        Use o evento "quando o personagem 2 tocar alguma coisa" para disparar uma atualização em
        sua pontuação. Você pode incrementar sua variável definindo "pontos = pontos +1".
        Faça sua pontuação chegar até 10 (aumentando um ponto por vez!) para passar de nível.
      Course 4 Play Lab Vars 7_instruction: |
        Legal, agora vamos garantir que esse jogo
        não seja muito fácil - sempre que o cão (personagem 1) for atingido por uma bola de fogo,
        você deve perder um ponto. Comece com 10 pontos para que o jogo não seja muito difícil. Faça sua
        pontuação cair de 10 para 0 para passar de nível.
      Course 4 Play Lab Vars 8 (copy 1)_instruction: |
        Certo, uma última coisa para
        esse jogo - vamos configurá-lo para que o jogador possa ganhar (ou perder). Use um laço infinito
        para verificar o valor da pontuação - se a pontuação for maior que 20, faça
        o inimigo desaparecer. Se a pontuação for menor que 0, faça o jogador desaparecer.
        Clique em "Terminar" quando o jogo funcionar do jeito que você gostaria.
      Course 4 Play Lab Vars 8_instruction: |
        Vamos configurar o jogo para que o cão possa
        ganhar (ou perder). Use um laço infinito para para verificar o valor da pontuação - se a pontuação
        for maior que 20, faça o inimigo (o gato) desaparecer. Se a pontuação for
        menor que 0, faça o jogador (o cão) desaparecer. Clique em "Terminar" quando o jogo
        funcionar do jeito que você gostaria.
      Course 4 Play Lab Vars 9_instruction: |
        Hora da atividade livre! Aqui estão todas as
        variáveis que usamos até agora e também algumas a mais, caso você as
        queira. Crie um jogo ou uma história que usa essas variáveis. Dica: role para baixo para
        ver todos os comandos da área de trabalho.
      Course 4 Play Lab Vars_instruction: |
        Certo, uma última coisa para esse jogo
        - vamos configurá-lo para que o jogador possa ganhar (ou perder). Use um laço infinito para
        verificar o valor da pontuação - se a pontuação for maior que 20, faça o inimigo
        desaparecer. Se a pontuação for menor que 0, faça o jogador desaparecer.
      Course 4 Play Labs For Loops 1_instruction: |
        Vamos fazer o cão falar todos
        os números de 1 a 100. Use um laço para e o bloco contador para que ele fale o valor da variável
        contador a cada vez que o laço for executado.
      Course 4 Play Labs For Loops 2_instruction: |
        Dessa vez, vamos tentar contar
        os números ímpares de 1 até 100.
      Course 4 Play Labs For Loops 3_instruction: |
        Se contarmos usando números maiores,
        podemos contar até números ainda maiores no mesmo intervalo de tempo. Tente fazer o cão
        contar de 10 até 1000, contando de 10 em 10.
      Course 4 Play Labs For Loops 4_instruction: |
        Alterar o incremento pode ser
        útil, mas ainda estamos contando linearmente (cada número está separado pela mesma
        distância do anterior). E se eu quisesse contar exponencialmente? Sem alterar
        as configurações desse laço para, você pode contar 1, 4, 9 , 16, 25... (contador
        ao quadrado)?
      Course 4 Play Labs For Loops 5_instruction: |
        Na última etapa contamos o
        quadrado de cada número. Tente alterar "contador ^ 2" para "contador ^ 3" para
        contar o cubo de cada número (1, 8, 27, 64, 125, 216, 343 ….)
      Course 4 Play Labs For Loops 6_instruction: |
        Você deve se lembrar de que um número primo
        é qualquer número inteiro que é divisível apenas por ele mesmo e por 1. Use a função "é_primo"
        para falar apenas os números primos de 1 a 100.
      Course 4 Play Labs For Loops 7_instruction: |
        Você poderia usar um laço "para" para me
        ajudar a falar a sequência 1, 4, 7, 10, 13, 16, 19, 22, 25?
      Course 4 Play Labs For Loops 8_instruction: |
        Qual laço me faria falar
        19, 27, 35, 43, 51?
      Course 4 Variables Assessment_instruction: |
        Can you create this image using
        a variable for sides? Each line should be 50 pixels long.
      Course1BeePuzzle12_instruction: Get three nectars and then make two honey
      Course1MazeAssessment1_instruction: "This is a test!\r\nMove one way, then\nanother
        to get me to the pig"
      Course1MazeAssessment2_instruction: "This is a test!\r\nMove one way, then\nanother
        to get me to the pig."
      Eval Booleans 1_instruction: |
        Boolean operators (like >, <, =) allow us to
        compare different values, returning either true or false. Click "Run" to
        see how this expression evaluates.
      Eval Booleans 2_instruction: |
        Can you set the values so that this expression
        evaluates as true?
      Eval Booleans 3_instruction: |
        The string-length function returns the number
        of characters in a string (including spaces!) - make this code evaluate to
        true.
      Eval Booleans 4_instruction: |
        Here's an Evaluation Block called AND - it returns
        true if both of its parameters are true, otherwise it returns false. Edit
        the x variable so that this expression returns true.
      Eval Booleans 5_instruction: |
        This OR block returns true if either of its parameters
        is true. Otherwise, if both parameters are false it will return false. Set
        the y variable to a value that will cause this expression to return false.
      Eval Booleans 6_instruction: |
        Here's one more boolean block called NOT. This
        block flips true to false, or false to true. If you wrap this block of code
        in a NOT block, it should return true (because we are asking if the two expressions
        do NOT produce equal values).
      Eval Booleans Free Play_instruction: |
        Free Play: Try out some creations of
        your own using Booleans.
      Eval Booleans_instruction: |
        Booleans allow us to compare different values,
        returning "true" if the are equal, or "false" if they are not. What do
        you think this code will evaluate to?
      Eval Cond 1_instruction: |
        The cond block checks the boolean expressions in
        the left column, and as soon as it finds one that returns "true" it runs
        the corresponding code on the right. If none of the expressions evaluate to
        "true," it runs the bottom block. Update the "temperature" variable so
        that this block returns "It's just right."
      Eval Cond 2 (copy 1)_instruction: |
        This condition returns a different shape
        based on the value of the "sides" variable - change the value of "sides"
        so that the conditional returns a triangle.
      Eval Cond 2_instruction: |
        This condition returns a different shape based on
        the value of the "sides" variable - change the value of "sides" so that
        the conditional returns a triangle.
      Eval Cond 3 (copy 1)_instruction: |
        Can you write a conditional that checks
        the variable "age" and returns "Old enough to vote and drive" if age >
        17, "Old enough to drive" if age is > 15, and "Can't drive or vote" if
        neither conditions is true. Hint: The first condition to return "true" wins
        - make sure you put your conditions in the right order.
      Eval Cond 3_instruction: |
        Can you write a conditional that checks the variable
        "age" and returns "Old enough to vote and drive" if age > 17, "Old enough
        to drive" if age is > 15, and "Can't drive or vote" if neither conditions
        is true. Hint: The first condition to return "true" wins - make sure you
        put your conditions in the right order.
      Eval Cond 4_instruction: |
        We can use the string=? function to make conditionals
        that respond to text input. Here's a function called green shape that takes
        a string for the type of shape. Complete the conditions so that the correct
        solid green shape is returned when the function is run with "circle", "triangle",
        "square", or "rectangle".
      Eval Cond 5_instruction: |
        Here's a similar function red shape with an additional
        variable for size. Complete the conditionals so the correct solid red image
        of a given size is drawn for "circle", "triangle", and "star".
      Eval Cond 6_instruction: "Write a function called food-critic, which takes\nin
        the name of a food and produces a String that says how you feel about that\nfood.
        For example, (food-critic “pizza”) might evaluate to “delicious”, but\n(food-critic
        “rotten eggs”) might evaluate to “gross!”. Choose at least two\nfoods to review,
        but you can you write more if you like!  Don’t forget to\nadd an “else” clause!\r\nOne
        example - and part of the definition -  has already\nbeen done for you!"
      Eval Cond 7_instruction: "Free Play: Write a function called green-shape, which\ntakes
        in the name of a shape and produces a solid green shape. Your function\nshould
        work with at least “circle”, “star” and “rectangle”, but you can add\nother
        shapes if you like. You can choose the size of each shape. Don’t forget\nto
        add an “else” clause!\r\nOne example - and part of the definition -  has\nalready
        been done for you!\r\n"
      Eval Cond 8_instruction: "Free Play: Suppose you want to own a car at 21, or\nhave
        your own business by 30. Write a function called life-goals, which takes\nin
        an age and produces a string that describes your life goals by then. Don’t\nforget
        to add an “else” clause!\r\n"
      Eval Contracts 1_instruction: |
        Use the "star" function to produce a red star
        with a 60 pixel radius
      Eval Contracts 10A_instruction: |
        Alright let's complete this puzzle with a
        Green Square that is 175 pixels in size.
      Eval Contracts 11A_instruction: |
        Can you complete this puzzle to read "Hello
        World" in the banner?
      Eval Contracts 2_instruction: |
        Check out the "rotate" function - can you
        use it to rotate this 90 pixel green square by 45 degrees?
      Eval Contracts 3_instruction: |
        Try using the "text" function to write this
        teal text at size 40.
      Eval Contracts 4 A_instruction: |
        The "scale" function returns an image that
        is scaled either larger or smaller than the input image. Try scaling this
        circle by a factor of 10 - how is the resulting image different than if you'd
        just made a circle of that size in the first place?
      Eval Contracts 4_instruction: |
        The scale function returns an image that is
        either larger or smaller than the input image. Try scaling this circle by
        a factor of 10. How is the returned image different than if you'd just made
        a circle of that size in the first place?
      Eval Contracts 8A_instruction: |
        Can you complete this puzzle? The big-triangle
        is 200 pixels in size and purple?
      Eval Contracts A_instruction: |
        Use the star function to produce a solid red
        star with a 60 pixel radius
      Eval Contracts C_instruction: |
        Check out the rotate function - can you use
        it to rotate this 90 pixel green square by 45 degrees?
      Eval Contracts E_instruction: |
        Try using the text function to write "Hello,
        world!" in teal at size 40.
      Eval Contracts shrink_instruction: "Can you complete this image using the \"shrink\"\nfunction
        block? The radius is 20. \n"
      Eval Define Funcs 1_instruction: |
        Here's a new function called green-triangle
        that takes a single Number for size and produces a green triangle. Use the
        new function to create a 125 pixel green triangle.
      Eval Define Funcs 2_instruction: |
        Let's look inside that green-triangle function
        to see how it works. Can you modify it so that the green-triangle function
        always draws outlined green triangles?
      Eval Define Funcs 3_instruction: |
        Here's the start of another new function
        called purple-circle with a domain of one Number (the radius) and a range
        of Image. The body of the function is broken though - fix it and then make
        a purple circle with 150 pixel radius
      Eval Define Funcs 4_instruction: |
        Create a new function called aqua-star that
        has a Domain of a single Number for radius and returns an aqua star of the
        given radius. Run your new function with a radius of 75.
      Eval Define Funcs 5_instruction: |
        Let's use that aqua-star function to make
        a row of different sized stars. From left to right, the stars should have
        radiuses of 25, 50, and 75.
      Eval Defining Vars Free Play 1_instruction: |
        Free Play: We've provided a function
        that fills your screen with my-image. Change my-image to see what patterns
        you can make.
      Eval Design Recipe .1_instruction: |
        Here's a Design Recipe for a function
        called square-circle with domain Number String and range Image. Click Edit
        to write the function definition (you will see two examples provided).
      Eval Design Recipe 1 (copy 1)_instruction: |
        We're going to write a function
        that draws a solid rectangle of any color that is twice wide as it is high.
        Start with an example - draw a solid green rectangle that has a height on
        100 pixels.
      Eval Design Recipe 1_instruction: |
        Alright, now given the Contract wide-rect:
        Number String -> Image, write an example - draw a solid green rectangle that
        has a height of 100 pixels.
      Eval Design Recipe 2 (copy 1)_instruction: |
        Let's do one more example before
        writing the function definition - this time draw a solid red rectangle with
        a height of 75 pixels.
      Eval Design Recipe 2_instruction: |
        Let's do one more example before writing
        the function definition - this time draw a solid red rectangle with a height
        of 75 pixels.
      Eval Design Recipe 3_instruction: |
        The design recipe for wide-rect already
        has a contract and one example. Can you write a second example and then complete
        the definition. The wide-rect function should produce a rectangle of given
        color that is twice as wide as it is high.
      Eval Design Recipe 4_instruction: |
        Use the Design Recipe to create a function
        starburst that has two domains. 1) a number of points and 2) a radius. starburst
        returns a yellow radial star with given points, and an inner radius that is
        half the outer radius.
      Eval Design Recipe 5_instruction: |
        Using the Design Recipe, write a function
        striped-flag that takes two colors and produces a flag that is 250 pixels
        wide, 150 pixels tall, with three even horizontal stripes of given colors,
        in the order color2, color1, color2.
      Eval Design Recipe 6_instruction: |
        Using the Design Recipe, write a function
        large-polygon that should output a solid polygon of given sides and color
        that takes up most of the window, regardless of the number of sides. To make
        sure that the polygon doesn't get too large as you increase the number of
        sides, side length should be inversely proportional to side number, with a
        length of (800/sides).
      Eval Design Recipe Free Play_instruction: |
        Free Play: Use the design recipe
        to create some functions of your own design
      Eval Free Play_instruction: 'Free Play: Make art with code!'
      Eval Strings Images .1_instruction: |
        So far we've only dealt with a single
        type of data, Numbers. Another type of data is a String, which is any combination
        of letters, numbers, or other characters wrapped in quotation marks. Run the
        String "Hello, world!" and see what happens.
      Eval Strings Images .2_instruction: |
        The string-append function takes two Strings
        and returns a single combined String. Add a String "Universe" to the second
        argument of string-append.
      Eval Strings Images 1_instruction: |
        The third type of data we're going to
        use is an Image. This star function takes in a Number and two Strings, and
        it evaluates to an Image. Use this function to make a solid red star with
        radius of 100.
      Eval Strings Images 2_instruction: |
        Free Play: Every Evaluation Block is color-coded
        to let you know which data type it returns and which types it needs for its
        parameters. The last parameter of the triangle function takes a String that
        controls its color - try some different colors to see what works.
      Eval Strings Images 3_instruction: |
        Some functions can only take a specific
        set of Strings, such as the second argument of this circle function, which
        controls its style. Draw this orange outline circle using the special String
        block with a dropdown to make sure you only use valid styles.
      Eval Strings Images 4_instruction: |
        Try using the rectangle block to draw this
        solid red rectangle - it is 175 pixels wide and 100 pixels tall.
      Eval Strings Images 5_instruction: |
        Try using this new Evaluation Block called
        _overlay_ to place a 100 pixel white triangle on top of a 200 pixel red circle.
      Eval Strings Images 6_instruction: |
        Use the overlay function to place a 75
        pixel radius yellow star on top of a 150 pixel long blue square.
      Eval Strings Images 7_instruction: |
        The offset block lets you move an image
        relative to where it would normally be placed. Use this block to offset the
        square by 100 pixels on the y-axis.
      Eval Strings Images 8_instruction: |
        Here's a different kind of star block
        - it's called radial-star and it allows you to draw stars with any number
        of points! Use it to create a 7 point solid orange star with an inner radius
        of 75 pixels and an outer radius of 175 pixels.
      Eval Strings Images Free Play_instruction: |
        Free Play: Explore the blocks available
        to create something interesting. Make sure to share your favorite creations.
      frozen circle function in circle_instruction: |
        Agora vamos criar 20 círculos
        sobrepostos, virando 18 graus entre cada círculo.
      frozen circle function with parameter_instruction: |
        Temos aqui um bloco "crie um círculo"
        que pode fazer círculos de tamanhos diferentes. Você pode usar isso para criar
        um pequeno círculo de tamanho 5 e um círculo maior de tamanho 10?
      frozen circle function_instruction: |
        Use o novo bloco "crie um círculo" para
        criar 10 círculos sobrepostos. Não se esqueça de avançar entre os círculos.
      frozen circle_instruction: |
        Um círculo é uma forma especial. Você pode descobrir
        que número usar para substituir os pontos de interrogação para desenhar um círculo?
      frozen cross rotate dense_instruction: |
        Vamos repetir isso 90 vezes! Quantas
        vezes 90 cabe em 360? Dica: é um número realmente pequeno.
      frozen cross rotate_instruction: |
        Agora, tente repetir isso 10 vezes. Quantos graus
        você precisa virar entre cada reta?
      frozen cross_instruction: |
        Use o bloco "repita" para criar um sinal de adição. Você
        percebeu que Elsa pode se mover para a frente e para trás?
      frozen diamond mini snowflake_instruction: |
        Você sabia que cada floco de neve tem
        uma forma diferente? Vamos criar um novo floco de neve usando o bloco "repita"
        para repetir um paralelogramo 4 vezes, virando 90 graus à direita entre cada
        paralelogramo.
      frozen diamond snowflake_instruction: |
        Agora, vamos criar um novo floco de neve
        usando o bloco repita para repetir um paralelogramo 10 vezes, virando 36 graus
        à direita entre cada um.
      frozen diamond_instruction: |
        Vamos criar um paralelogramo. Ele é como
        um quadrado, mas tem ângulos diferentes: ângulos de 60 e de 120 graus ao invés de
        ângulos de 90 graus.
      frozen freeplay_instruction: |
        Você se tornou oficialmente um artista mestre! Crie
        um país das maravilhas de gelo.
      frozen line_instruction: Olá! Chamo-me Elsa Arendelle. Ajuda-me a criar uma
        reta.
      frozen perpendicular_instruction: |
        Agora, vamos ver se podemos criar duas retas
        que formam um ângulo de 90 graus entre si. Você vai precisar usar o bloco "vire"
        e também o bloco "mova".
      frozen snowflake branch_instruction: |
        Tente usar o bloco "crie um floco de neve do tipo ramificado”
        para criar três ramificações, o que começa a parecer um floco de neve.
      frozen snowflake full_instruction: |
        Agora, vamos repetir isso 8 vezes para fazer um
        belo floco de neve!
      frozen snowflower_instruction: |
        Padrões de neve complexos podem ser criados com
        formas muito simples. Você pode criar um padrão repetindo 5 círculos de tamanho
        5 e 5 círculos de tamanho 10?
      frozen square iterative_instruction: |
        Parece que estamos na metade do caminho para fazer
        um quadrado. Vamos juntar 4 retas para criar um quadrado.
      frozen square loop 3x_instruction: |
        Vamos criar três quadrados, virando depois
        de cada quadrado. Lembre-se de virar 120 graus antes de cada novo quadrado.
      frozen square loop_instruction: |
        Oi, eu sou Anna de Arendelle! Vamos fazer um quadrado
        com o bloco "repita", que usa menos blocos. Quantas vezes (???) o bloco
        "repita" deve repetir os blocos dentro dele para fazer um quadrado?
      frozen square snowflake_instruction: |
        Você consegue criar um floco de neve usando o bloco
        "repita" para criar um quadrado 10 vezes e o bloco "vire" para virar 36
        graus entre cada quadrado?
      hoc2015_intro_instruction: |
        Hiro é o "personagem 1".  Use o bloco Mova para mover
        Hiro até tocar Baymax.
      hoc2015_sandbox_instruction: |
        Hiro é o "personagem 1".  Use o bloco Mova para mover
        Hiro até tocar Baymax.
      Infinity_catch_instruction: |
        Você pode fazer Elsa ("personagem 2") alcançar
        Anna usando as setas do teclado?
      Infinity_finale_instruction: Crie o que quiser e compartilhe!
      Infinity_move_collide_instruction: |
        Hiro é o "personagem 1". Mova-o em direção a
        Baymax e reproduza um som quando eles se tocarem.
      Infinity_move_directions_instruction: |
        Baymax é o "personagem 2". Adicione blocos "mova"
        e então mova Baymax usando as setas. Faça com que ele toque os outros dois personagens.
      Infinity_move_right_instruction: |
        Hiro é o "personagem 1". Use o bloco "mova"
        para mover Hiro para que ele toque Baymax.
      Infinity_repeat_instruction: |
        Use um bloco "repita infinitamente" para fazer Anna se mover
        400 pixels para cima e para baixo.
      Infinity_say_instruction: Faça Anna dizer "Oi." usando o bloco "diga".
      Infinity_shoot_instruction: |
        Baymax é o "personagem 2". Faça Baymax lançar um foguete
        em Hiro.
      Infinity_shoot_directions_instruction: |
        Hiro é o "personagem 3". Faça Hiro lançar
        um projétil em cada um dos quatro personagens. Espere um segundo entre cada
        lançamento.
      Infinity_test_instruction: This is a test Infinity level.
      Infinity_touch_faster_instruction: Toque ainda mais flocos de neve!
      Infinity_touch_four_instruction: |
        Mova Anna para cima, para a esquerda e para a direita para tocar
        cada um dos quatro flocos de neve.
      Infinity_touch_score_instruction: |
        Faça Anna marcar um ponto quando ela tocar
        em um floco de neve. Depois clique em "Executar" e faça ela tocar uma vez em cada floco de neve.
      jessie-test_instruction: Lots of instructions
      Just for Testing_instruction: Test instructions
      K-1 Artist 1 Assessment 1_instruction: |
        Desenhe uma pequena reta para cima e uma
        grande para a direita!
      K-1 artist 1 level 10_instruction: Desenhe as linhas tracejadas usando os blocos
        pule e desenhe
      K-1 artist 1 level 9_instruction: Faça o desenho usando três retas
      K-1 Artist Loops 1_instruction: Desenhe esta reta usando o movimento para o
        leste 4 vezes.
      K-1 Artist Loops 2_instruction: Você pode desenhar a mesma reta usando um laço?
      K-1 Artist Loops 3_instruction: Você pode repetir esses blocos para desenhar
        6 retas?
      K-1 Artist Loops 4_instruction: |
        Um laço poderia nos ajudar a desenhar o topo desse
        castelo?
      K-1 Artist Loops 5_instruction: O que você pode repetir 4 vezes para desenhar
        essas escadas?
      K-1 Artist Loops 6_instruction: |
        São necessários dois laços: um para subir as
        escadas e outro para descer.
      K-1 Artist Loops 7_instruction: Você pode terminar este padrão com dois laços?
      K-1 Artist Loops 8_instruction: Esta escada tem degraus mais longos.
      K-1 Artist Loops 9_instruction: 'Avaliação: use um laço para desenhar as escadas'
      K-1 Artist Loops Free Play_instruction: Atividade livre, desenhe algo divertido!
      K-1 Artist1 1_instruction: Desenhe o pé do homem com uma reta
      K-1 Artist1 10_instruction: |
        Desenhe e pule para fazer o caminho tracejado até o tesouro
        X
      K-1 Artist1 2_instruction: Desenhe o bigode no gato com duas retas!
      K-1 Artist1 3_instruction: |
        Desenhe duas retas para o leste e duas retas para o norte para terminar
        a casa!
      K-1 Artist1 4_instruction: Desenhe retas para cima, sobre e para baixo para
        completar o castelo!
      K-1 Artist1 5.5_instruction: |
        Complete a terceira torre do castelo usando
        retas curtas
      K-1 Artist1 5_instruction: Desenhe o caule desta flor com duas retas!
      K-1 Artist1 6_instruction: Termine a imagem usando um bloco pule!
      K-1 Artist1 7_instruction: |
        Use o bloco pule para se mover sem desenhar. Pule
        e desenhe uma reta.
      K-1 Artist1 8_instruction: |
        Desenhe linhas tracejadas usando os blocos pule e
        desenhe
      K-1 Artist1 9_instruction: Desenhe e pule para fazer a reta tracejada
      K-1 Artist1 Assessment 1_instruction: Desenhe as retas pequenas e grandes!
      K-1 Artist1 Assessment 2_instruction: Desenhe as retas pequenas tracejadas!
      K-1 Artist2 1_instruction: Desenhe um quadrado abaixo do triângulo.
      K-1 Artist2 2_instruction: Pule e desenhe um quadrado próximo à casa.
      K-1 Artist2 3_instruction: Desenhe um quadrado sobre o outro quadrado
      K-1 Artist2 4_instruction: Desenhe um retângulo para completar a ponte.
      K-1 Artist2 5_instruction: Desenhe um retângulo para completar os suportes da
        ponte
      K-1 Artist2 6_instruction: Desenhe dois quadrados para criar um retângulo!
      K-1 Artist2 Assessment1_instruction: |
        Avaliação: desenhe um quadrado ao lado do
        outro quadrado.
      K-1 Artist2 Free Draw_instruction: Desenhe qualquer coisa!
      K-1 Artist2_7_instruction: Desenhe um retângulo para dar uma gaveta à cômoda!
      K-1 Bee 1_instruction: |
        Mova-me até a flor, colete o néctar e então mova-me
        até a colmeia e produza mel
      K-1 Bee 10_instruction: Colete quatro néctares e então fabrique duas unidades
        de mel!
      K-1 Bee 11.5_instruction: Colete quatro néctares para fabricar quatro unidades
        de mel!
      K-1 Bee 11_instruction: Colete três néctares e então fabrique uma unidade de
        mel
      K-1 Bee 12_instruction: Colete três néctares e então fabrique duas unidades
        de mel!
      K-1 Bee 13_instruction: Colete três néctares e então fabrique uma unidade de
        mel!
      K-1 Bee 14_instruction: |
        Leve-me até o néctar e colete-o, leve-me até o mel
        e produza mel
      K-1 Bee 15_instruction: Colete dois néctares para fabricar duas unidades de
        mel!
      K-1 Bee 2_instruction: |
        Mova-me até a flor, colete o néctar e então mova-me
        até a colmeia e produza mel
      K-1 Bee 3_instruction: |
        Mova-me até a flor, colete o néctar e então mova-me
        até a colmeia e produza mel
      K-1 Bee 4_instruction: Colete dois néctares e então fabrique duas unidades de
        mel!
      K-1 Bee 5_instruction: Colete três néctares e então fabrique três unidades de
        mel!
      K-1 Bee 6_instruction: Colete dois néctares e então fabrique duas unidades de
        mel!
      K-1 Bee 7_instruction: Colete três néctares e então fabrique duas unidades de
        mel!
      K-1 Bee 8_instruction: Colete dois néctares e então fabrique duas unidades de
        mel!
      K-1 Bee 9_instruction: Colete dois néctares e então fabrique duas unidades de
        mel!
      K-1 Bee Assessment 1_instruction: Colete néctar para fabricar mel!
      K-1 Bee Assessment 2_instruction: Colete néctar para fabricar mel!
      K-1 Bee Loops 1_instruction: Colete o néctar para fabricar mel!
      K-1 Bee Loops 10_instruction: Use laços para coletar néctar, fabricar mel e
        para se mover!
      K-1 Bee Loops 11_instruction: |
        Avaliação: use laços e obtenha o néctar e o
        mel!
      K-1 Bee Loops 12_instruction: |
        Avaliação: use laços para obter néctar, mel
        e para mover!
      K-1 Bee Loops 2_instruction: |
        Use um laço para mover e então coletar o néctar e
        produzir mel!
      K-1 Bee Loops 3_instruction: Use laços para coletar o néctar e fabricar o mel!
      K-1 Bee Loops 4_instruction: |
        Use laços para obter néctar, produzir mel e
        para mover!
      K-1 Bee Loops 5_instruction: Use laços para obter néctar e mel!
      K-1 Bee Loops 6_instruction: Use laços para coletar néctar, fabricar mel e para
        se mover!
      K-1 Bee Loops 7_instruction: Use laços para coletar o néctar e fabricar o mel!
      K-1 Bee Loops 8_instruction: Use laços para obter néctar e mel!
      K-1 Bee Loops 9_instruction: Use laços para coletar néctar, fabricar mel e para
        se mover!
      K-1 Bee Loops Assessment 1_instruction: |
        Obtenha néctar para produzir mel e use laços
        para mover!
      K-1 Bee Loops Assessment 2_instruction: Colete néctar para fabricar mel usando
        laços!
      K-1 Bee Puzzle 12_instruction: Get three nectars and then make two honey
      K-1 Building a Foundation Assessment_instruction: |
        Construa uma pirâmide de três níveis.
        Não há outras instruções, então simplesmente brinque com as peças até
        conseguir!
      k-1 maze 1_instruction: Você pode me mover para o oeste para chegar até o porco?
      K-1 Maze 10_instruction: 'Desvie do TNT para me levar até o porco! '
      K-1 Maze 11_instruction: |
        Trace o caminho e leve-me até o porco bobalhão. Desvie
        do TNT, ou penas vão voar! Dica: ele está ao sul de onde estou.
      K-1 Maze 2_instruction: Mova-me para o leste para chegar até o porco!
      K-1 Maze 3_instruction: Mova-me para o sul para chegar até o porco!
      K-1 Maze 4_instruction: Mova-me para o norte para chegar até o porco!
      K-1 Maze 5_instruction: Mova-me para o leste para chegar até o porco!
      K-1 Maze 6_instruction: Mova-me por um caminho, e então por outro para me levar
        até o porco!
      K-1 Maze 7_instruction: Mova-me por um caminho, e então por outro para me levar
        até o porco!
      K-1 Maze 8_instruction: Mova-me por um caminho, e então por outro para me levar
        até o porco!
      K-1 Maze 9_instruction: Mova-me por um caminho, e então por outro para me levar
        até o porco!
      K-1 Maze Assessment 1_instruction: 'Avaliação: leve-me até o porco!'
      K-1 Maze Assessment 12_instruction: Avaliação de nível
      K-1 Maze Assessment 13_instruction: Avaliação de nível
      K-1 Maze Assessment 2_instruction: 'Avaliação: leve-me até o porco!'
      K-1 maze debug 1_instruction: Altere o código para me levar até o porco!
      K-1 maze debug 10_instruction: |
        Depure esse nível reorganizando e adicionando
        blocos para me levar até o porco!
      K-1 maze debug 11_instruction: "Isso é um teste!\r\nDepure esse nível reorganizando\ne
        adicionando blocos para me levar até o porco"
      K-1 maze debug 2_instruction: |
        Descubra o que está faltando e então adicione blocos
        para me levar até o porco!
      K-1 maze debug 3_instruction: |
        Descubra o que está faltando e então REMOVA blocos
        para me levar até o porco!
      K-1 maze debug 4_instruction: |
        Passe por esses blocos e conserte-os! Eu acho
        que estou indo na direção errada.
      K-1 maze debug 5_instruction: |
        Depure esse nível reorganizando e adicionando blocos
        para me levar até o porco!
      K-1 maze debug 6_instruction: |
        Depure esse nível reorganizando e adicionando blocos
        para me levar até o porco!
      K-1 maze debug 7_instruction: |
        Depure esse nível reorganizando e adicionando blocos
        para me levar até o porco!
      K-1 maze debug 8_instruction: |
        Depure esse nível reorganizando e adicionando blocos
        para me levar até o porco!
      K-1 maze debug 9_instruction: |
        Depure esse nível reorganizando e adicionando blocos
        para me levar até o porco!
      K-1 Maze debug Assessment 1_instruction: |
        Avaliação -- depure esse nível
        reorganizando e adicionando blocos para me levar até o porco!
      K-1 Maze Loops 1_instruction: Leve-me até o porco!
      K-1 Maze Loops 10_instruction: Leve-me até o porco! Use o laço repita.
      K-1 Maze Loops 11_instruction: Leve-me até o porco! Use o laço repita.
      K-1 Maze Loops 12_instruction: Leve-me até o porco! Use o laço repita.
      K-1 Maze Loops 2_instruction: Use o bloco repita para me levar até o porco!
      K-1 Maze Loops 3_instruction: Leve-me até o porco! Use o laço repita.
      K-1 Maze Loops 4_instruction: Leve-me até o porco!
      K-1 Maze Loops 5_instruction: Leve-me até o porco! Use o laço repita.
      K-1 Maze Loops 6_instruction: Leve-me até o porco! Use o laço repita.
      K-1 Maze Loops 7_instruction: Leve-me até o porco! Use o laço repita.
      K-1 Maze Loops 8_instruction: Leve-me até o porco! Use o laço repita.
      K-1 Maze Loops 9_instruction: Leve-me até o porco!
      K-1 Maze Loops Assessment 1_instruction: |
        Avaliação -- use laços para me levar
        até o poco!
      K-1 Maze Loops Assessment 2_instruction: |
        Avaliação -- use laços para me levar
        até o poco!
      K-1 Maze Multi 14_instruction: Avaliação de nível
      K-1 Maze Multi 15_instruction: Avaliação de nível
      K-1 Maze Sequence Assessment 1_instruction: "Isso é um teste!\r\nMova-me por
        um caminho e então\npor outro para me levar até o porco"
      K-1 Maze Sequence Assessment 2_instruction: "Isso é um teste!\r\nMova-me por
        um caminho e então\npor outro para me levar até o porco."
      Luigi's Pizza 1_instruction: |
        Welcome to Luigi's Pizza! To order a pizza,
        type the name of a topping into the cost function, and we'll return the price
        of that pizza. Try ordering a pepperoni pizza to start.
      Luigi's Pizza 2 (copy 1)_instruction: |
        Right now there are only four choices
        available at Luigi's pizza - let's fix that! Add a couple of new toppings
        to the conditional block in the "cost" function. Once you've added your
        toppings, test out the function to make sure it works.
      Luigi's Pizza 2_instruction: |
        Right now there are only four choices available
        at Luigi's pizza - let's fix that! Add a couple of new toppings to the conditional
        block in the cost function. Once you've added your toppings, test out the
        function to make sure it works.
      Luigi's Pizza 3 (copy 1)_instruction: |
        That's better, everyone loves more
        variety in their pizza toppings! But you still can't please everyone, and
        folks are coming in to order toppings that Luigi doesn't have. Instead of
        saying no to those people, could you update the "else" clause so that we
        charge them a premium for toppings that we don't normally offer?
      Luigi's Pizza 3_instruction: |
        That's better, everyone loves more variety in
        their pizza toppings! But you still can't please everyone, and folks are
        coming in to order toppings that Luigi doesn't have. Instead of saying no
        to those people, could you update the else clause so that we charge them a
        premium for toppings that we don't normally offer? Let's charge $10,000
        for a topping we don't carry.
      Luigi's Pizza 4_instruction: |
        Free Play: What can you do to make Luigi's cost
        function even more useful?
      MSM Big Game Empty_instruction: |
        All variables and functions are currently
        empty stubs. Each puzzle progression will be focused on defining and handful
        of them, and therefore adding functionality.
      MSM Big Game Vars 1 (copy 1)_instruction: |
        In the Variables toolbox you'll
        see several variables that define how your game characters look, move, and
        interact
      MSM Big Game Vars 1_instruction: |
        In the Variables toolbox you'll see several
        variables that define how your game characters look, move, and interact
      MSM Big Game Vars Backup_instruction: |
        In the Variables toolbox you'll see
        several variables that define how your game characters look, move, and interact
      MSM Defining Vars 1 (copy 1)_instruction: |
        Write a program that produces a
        50 pixel solid green triangle.
      MSM Defining Vars 1_instruction: |
        Write a program that produces a 50 pixel
        solid green triangle.
      MSM Defining Vars 2 (copy 1)_instruction: |
        If we wanted to make fifty green
        triangles, it would be a pain to repeat that block of code 50 times. Let's
        create a variable called "my-shape" and put the code for a 50 pixel solid
        green triangle inside.
      MSM Defining Vars 2_instruction: |
        If we wanted to make fifty green triangles,
        it would be a pain to repeat that block of code 50 times. Let's create a
        variable called my-shape and put the code for a 50 pixel solid green triangle
        inside.
      MSM Defining Vars 3 (copy 1)_instruction: |
        Take your "my-shape" variable
        and use it with this provided code to draw two identical green triangles.
      MSM Defining Vars 3_instruction: |
        Take your my-shape variable and use it with
        this provided code to draw two identical green triangles that are 50 pixels
        in size.
      MSM Defining Vars 4_instruction: |
        Edit your my-shape variable so that it draws
        75 pixel solid red stars.
      MSM Play Lab Butterfly 1_instruction: |
        Help Sam stay on the screen so that
        you can always see at least a little piece of him. Using the arrow keys, see
        how far Sam can go to the left while still staying onscreen. You’ll find that
        Sam is onscreen as long as his x-coordinate is greater than -50. Then, fill
        in the code to make Sam stay on the screen.
      MSM Play Lab Butterfly 2_instruction: |
        Now make Sam stay on the right side
        of the screen. You'll have to experiment to see how far he can go and still
        be partially visible on the screen.
      MSM Play Lab Butterfly 3_instruction: |
        Now, combine your work to make Sam stay
        on both sides of the screen.
      MSM Play Lab Game 2_instruction: |
        Variables can also be used to control the
        speed of players in a game. Set the player speed and the enemy speed and see
        how the movement changes. Speed can be between 2 and 12.
      NetSim_AddressingMessages_instruction: |
        In this version of the simulator, you
        will connect to a Router instead of directly to another student. Enter an
        address in the "To" box to send a message to another student.
      NetSim_AutomaticDNS_instruction: |
        In this version of the simulator a DNS service
        is provided for you. Send a message in the form GET [hostname] to the DNS
        service at address 15 to get a student's address.
      NetSim_ManualDNS_instruction: |
        In this version of the simulator you can't
        see the other students' addresses.  Instead, one of you must act as a name
        service, to help share addresses with each other.
      NetSim_SendAB_instruction: |
        Connect to another student.  Each of you can set
        the value of the wire between you to "A" or "B".  See if you can send
        a complete message!
      NetSim_SendAscii_instruction: |
        In this version of the simulator, you can send
        numbers or ASCII characters to one another, one bit at a time.
      NetSim_SendBits_instruction: |
        Connect to another student.  You can now set
        your wire to "0" or "1".  Send a message to your partner!
      NetSim_SendingABTest_instruction: |
        This is Sarah's test of making a netsim
        level
      NetSim_SendNumbers_instruction: |
        In this version of the simulator, you can
        view the decimal representations of the binary you are sending.
      NetSim_Superuser_instruction: You have loaded NetSim in superuser mode.
      NetSim_Variant1_instruction: |
        NetSim: Variant 1 allows students to manually
        work out the timing of sending bits back and forth.
      NetSim_Variant2_instruction: |
        NetSim: Variant 2: Students connect directly
        to one another and send entire packets back and forth, exploring systems of
        encoding data.
      NetSim_Variant3_instruction: |
        NetSim: Variant 3: Connects groups of 2-6 students
        with a router, and explores issues in routing and DNS
      New Artist Project_instruction: |
        Desenhe algo incrível! Seu código é salvo
        como um projeto e você pode retornar a ele a qualquer momento.
      NEW Course 4 Artist Functions 1_instruction: |
        Você consegue desenhar um quadrado com
        100 pixels de comprimento usando um laço?
      NEW Course 4 Artist Functions 10_instruction: |
        Clique em "editar" para preencher
        os blocos na definição da função para fazer um quadrado de 40 pixels.
      NEW Course 4 Artist Functions 11_instruction: |
        Temos uma nova função chamada
        "desenhe uma linha de quadrados". Fique à vontade para olhar dentro do bloco da função
        para ver como a construímos. Clique em "Executar" quando você estiver pronto para o próximo
        desafio.
      NEW Course 4 Artist Functions 12_instruction: |
        Use a função "desenhe uma linha de quadrados"
        do último desafio para desenhar esse padrão."
      NEW Course 4 Artist Functions 13_instruction: |
        Você consegue desenhar uma forma de estrela usando
        a função "desenhe uma linha de quadrados"? Dica: você pode precisar avançar
        60 pixels e virar 144 graus
      NEW Course 4 Artist Functions 14_instruction: 'Atividade livre! '
      NEW Course 4 Artist Functions 2_instruction: |
        Você consegue desenhar 3 quadrados com 20 pixels de distância
        entre cada um? Dica: cada quadrado tem 100 pixels de tamanho
      NEW Course 4 Artist Functions 3_instruction: |
        Temos aqui um novo tipo de bloco.
        Ele é chamado de "bloco de função". Clique em "Executar" para ver o que ele pode fazer.
      NEW Course 4 Artist Functions 4_instruction: |
        Use a função "desenhe um quadrado"
        para desenhar esse padrão. Dica: você vai precisar usar um bloco "vire 120 graus à direita"
        após cada quadrado.
      NEW Course 4 Artist Functions 5_instruction: |
        Como o bloco "desenhe um quadrado"
        sabia que comandos executar? Clique em "editar" no bloco de função "desenhe um quadrado".
        Os blocos no editor da função são a definição que
        compõe "desenhe um quadrado". Quando você terminar de analisar, clique em "Salvar
        e Fechar" e então em "Executar".
      NEW Course 4 Artist Functions 6_instruction: "Usando o bloco de função \"desenhe
        um quadrado\",\nvocê pode desenhar esta imagem? Dica: cada quadrado está separado
        por 20 pixels.\r\n"
      NEW Course 4 Artist Functions 7_instruction: |
        Você está pegando o jeito de como
        usar os blocos de função? Vamos modificar esse quadrado para que ele tenha 200 pixels
        de tamanho. Dica: clique em "editar" para alterar o tamanho de "desenhe um quadrado"
        no editor da função. Lembre-se de clicar em "Salvar e Fechar" para sair do
        editor da função.
      NEW Course 4 Artist Functions 8_instruction: |
        Demos a você a maior parte do
        código para criar uma função. Contudo, parece que algo está faltando. Você
        consegue editar a definição da função para desenhar o triângulo?
      NEW Course 4 Artist Functions 9_instruction: |
        Qual bloco você precisa adicionar
        para que o triângulo fique em cima do quadrado?
      NEW Course 4 Artist Functions inspire_instruction: "Free Play Inspiration:\nYou've
        now learned everything you need to know to make a pattern like this!\nIf this
        picture inspires you, try to make something similar. Otherwise, create\nsomething
        all your own.\r\n \r\nWant to know how our inspiration pattern was\nmade?
        Visit for the solution."
      New Course 4 Artist Functions Level 4_instruction: |
        Use a função "desenhe um quadrado"
        para desenhar esse padrão.
      NEW Course 4 Artist Params 1_instruction: |
        Vamos definir essa função para desenhar
        um quadrado com lados de 50 pixels. Clique em "editar" para começar.
      NEW Course 4 Artist Params 10_instruction: |
        Crie um bloco de função "desenhe um hexágono"
        com um parâmetro comprimento. Dica: esse hexágono tem 100 pixels de tamanho.
      NEW Course 4 Artist Params 11_instruction: |
        Você consegue descobrir como desenhar
        essa forma? Edite a função para usar o parâmetro "lados".
      NEW Course 4 Artist Params 12_instruction: |
        Você consegue completar esse desenho?
        Os lados de todas as formas têm 100 pixels de comprimento.
      NEW Course 4 Artist Params 12a_instruction: |
        This image is similar to the last.
        Can you use a "for loop" with your function to make this design?
      NEW Course 4 Artist Params 13_instruction: |
        Vamos editar essa função "desenhe uma forma".
        Ela já tem um parâmetro "comprimento". Agora, vamos editar a função
        para adicionar também um parâmetro "lados". Lembre-se de que o ângulo para virar para uma
        determinada forma é 360 dividido pelos lados que ela tem. Dica: os comprimentos de cada forma
        são: o triângulo tem 100 pixels, o hexágono tem 25 pixels e o quadrado tem 50 pixels.
      NEW Course 4 Artist Params 14_instruction: |
        Você consegue recriar essas formas?
        Arraste o parâmetro "comprimento" para dentro da definição da função.
      NEW Course 4 Artist Params 15_instruction: |
        Atividade livre: aqui estão as funções
        que você escreveu e mais algumas com as quais você pode brincar. Desenhe alguma coisa incrível!
      NEW Course 4 Artist Params 2_instruction: |
        Crie uma função "desenhe um triângulo
        com lados de 50 pixels" desde o início
      NEW Course 4 Artist Params 3_instruction: "Agora, vamos usar a função para desenhar\n3
        triângulos do último desafio em uma linha. Dica: cada triângulo está separado
        por\n50 pixels.\r\n"
      NEW Course 4 Artist Params 4_instruction: |
        Você percebe algo diferente
        sobre esses blocos de função? Clique em "Executar" para ver o que acontece.
      NEW Course 4 Artist Params 5_instruction: |
        Preencha o ??? no bloco de entrada
        do parâmetro comprimento. Dica: o tamanho do pentágono é de 100 pixels.
      NEW Course 4 Artist Params 6_instruction: |
        Preencha o parâmetro "comprimento"
        para desenhar essa formas substituindo o "???" pelos números corretos. O
        quadrado e o triângulo têm tamanho de 100 pixels, enquanto o hexágono tem tamanho de
        75 pixels.
      NEW Course 4 Artist Params 7_instruction: |
        Você consegue completar este desenho? Dica:
        cada triângulo é 25 pixels maior que o anterior. O primeiro triângulo tem 25
        pixels.
      NEW Course 4 Artist Params 8_instruction: |
        O código da função deste triângulo
        está corrompido. Você consegue editar a função para corrigi-lo e criar triângulos
        de 25, 50 e 75 pixels de comprimento?
      NEW Course 4 Artist Params 9_instruction: |
        Clique em "editar" para preencher a definição
        da função "desenhe um quadrado" e adicionar um parâmetro. Ela deve receber um parâmetro
        comprimento, como no triângulo. Dessa vez, desenhe 3 quadrados: 25, 50 e 75
        pixels de comprimento e separados por 100 pixels cada.
      NEW Course 4 Artist Params inspire_instruction: "Free Play Inspiration: You've\nnow
        learned everything you need to know to make a pattern like this! If this\npicture
        inspires you, try to make something similar. Otherwise, create something\nall
        your own.\r\n \r\nWant to know how our inspiration pattern was made? Visit\nhttps://studio.code.org/c/106387530
        for the solution."
      NEW Course 4 Artist Vars 1.5_instruction: |
        Dê uma olhada no código. Você consegue
        ver como o bloco "defina o comprimento" e o bloco "comprimento" funcionam juntos? Clique
        em "Executar" para vê-los em ação.
      NEW Course 4 Artist Vars 12_instruction: |
        Modifique esse algoritmo para que ele use
        a variável "lados" ao invés de um número fixo para desenhar um pentágono. Substitua
        o número 5 pela variável "lados" e use o bloco "defina lados para".
      NEW Course 4 Artist Vars 2.5_instruction: |
        Dê uma olhada no código. Você consegue
        ver como o bloco "defina o comprimento" e o bloco "comprimento" funcionam juntos? Clique
        em "Executar" para vê-los em ação.
      NEW Course 4 Artist Vars 2_instruction: |
        Arraste um bloco numérico para o bloco "defina o comprimento"
        para desenhar um conjunto de triângulos de 50 pixels.
      NEW Course 4 Artist Vars 4 5_instruction: |
        Belo trabalho no último desafio,
        vamos tentar novamente. Desta vez, vamos fazer esse design bacana com hexágonos
        de 60 pixels.
      NEW Course 4 Artist Vars 4_instruction: |
        Vamos tentar novamente. Agora, vamos fazer
        esse design bacana com hexágonos de 60 pixels.
      NEW Course 4 Artist Vars 6_instruction: |
        Você pode me ajudar a desenhar esse padrão
        colocando o bloco da variável "comprimento" nos lugares corretos?
      NEW Course 4 Bee For Loops 1_instruction: |
        Use um laço para coletar o néctar
        de cada flor.
      NEW Course 4 Bee For Loops 10_instruction: |
        Use a variável "contador" do seu laço "para"
        para controlar a distância do movimento horizontal.
      NEW Course 4 Bee For Loops 11_instruction: |
        Você pode usar a variável do laço para
        controlar o movimento e a coleta de néctar?
      NEW Course 4 Bee For Loops 2_instruction: |
        Adicione o código necessário para garantir que
        a abelha colete todo o néctar. Olhe quanto código você precisa para esse desafio!
        (Vamos aprender uma maneira mais simples no próximo desafio).
      NEW Course 4 Bee For Loops 3_instruction: |
        Ah, o laço para torna isso muito mais
        fácil! Todo o código que você precisa está lá, dê uma olhada em como ele é feito
        e então clique em "Executar" para ver como ele funciona.
      NEW Course 4 Bee For Loops 4 4_instruction: |
        Você pode ajudar a abelha a coletar o
        resto do mel usando esse laço para?
      NEW Course 4 Bee For Loops 4_instruction: |
        Substitua o ??? no laço "para"
        pela maior quantidade de néctar que a abelha tem que coletar.
      NEW Course 4 Bee For Loops 5 5_instruction: |
        Você está pegando o jeito de como usar
        o laço para? Vamos ajudar a abelha a obter o resto do néctar.
      NEW Course 4 Bee For Loops 5_instruction: |
        Você também pode usar um laço "para" para fazer contagem
        regressiva. Tente coletar esse néctar fazendo uma contagem regressiva de 5 até 1, de 1 em 1.
      NEW Course 4 Bee For Loops 6_instruction: |
        O último número em seu laço para é
        chamado de "incremento" e a cada execução do laço a variável contador
        é alterada de acordo com o incremento. Tente coletar essas flores usando um incremento
        de 2.
      NEW Course 4 Bee For Loops 7_instruction: |
        Você está pegando o jeito dos laços para?
        Isso é parecido com o último desafio, mas você precisa coletar 2, 4, 6, 8 e 10 néctares.
        O código inicial foi fornecido, exceto pelos números nos laços contadores.
        Vamos coletar um pouco de néctar!
      NEW Course 4 Bee For Loops 8_instruction: "Se seu laço está contando, o\nincremento
        é somado à variável contador a cada repetição. Qual deve ser seu incremento\npara
        coletar 3, 6 e 9 néctares?\r\n"
      NEW Course 4 Bee For Loops 9_instruction: |
        Se seu laço está fazendo contagem regressiva, o
        incremento é subtraído da sua variável contador a cada repetição. Qual deve ser
        seu incremento para coletar 9, então 6, e então 3 néctares?
      NEW Course 4 Bee For Loops 95_instruction: |
        Take a look at each piece of the
        "for loop" that you have just created.  Can you figure out which numbers
        you need to double to solve this puzzle? Why does it work?
      NEW Course 4 Play Lab Params 11_instruction: |
        É hora da atividade livre! Divirta-se
        com todos os blocos da sua caixa de ferramentas.
      NEW Course 4 Play Lab Params 5 5_instruction: |
        Preencha as entradas de parâmetro
        dos personagens com números (1, 2 e 3) para fazer com que esses personagens patrulhem.
      NEW Course 4 Play Lab Vars 4 5_instruction: |
        "O que você acha que esse código vai
        fazer? Pressione "Executar" para ver o que acontece".
      NEW Course 4 Play Labs For Loops 7a_instruction: |
        Using what you learned so
        far, can you have Dinosaur take a step forward every time Penguin counts?
      NEW Course 4 Play Labs For Loops 8 Free Play_instruction: |
        É hora da atividade livre,
        divirta-se com todos os blocos da sua caixa de ferramentas.
      NEW Course 4 Play Labs For Loops 8a_instruction: "Challenge: How would you\nuse
        the \"for loop\" to get every actor to go around and say their actor number,\nthen
        vanish from the screen? \n"
      New Play Lab Project_instruction: |
        Crie sua própria história ou jogo! Seu código
        está salvo como um projeto para o qual você pode retornar a qualquer hora.
      Ninjacat Demo B (copy 1)_instruction: "\r\nLet’s begin by exploring a simple\nvideogame,
        and then figuring out how it works. You can use the arrow keys\nto move the
        ninja left, right and jump - try to catch the unicorn and avoid\nthe dragon!\r\n\r\n\r\n\r\n
        \ \r\n\r\n"
      Ninjacat Demo B_instruction: |
        Let’s begin by exploring a simple videogame,
        and then figuring out how it works. You can use the arrow keys to move the
        ninja up and down - try to catch the unicorn and avoid the dragon! When you
        think you've figured out how the game works, click "Finish"
      Ninjacat Demo No Animate_instruction: |
        Let’s begin by exploring a simple videogame,
        and then figuring out how it works. You can use the arrow keys to move the
        ninja up and down - try to catch the unicorn and avoid the dragon! When you
        think you've figured out how the game works, click "Finish"
      PDK5 Conditionals 1_instruction: |
        Purple flowers may have either 1 or 0 nectar,
        but you don't know which one! Be careful not to collect nectar from a purple
        flower if it doesn't have any. Check if the nectar is equal to 1 by using
        the if block.
      PDK5 Conditionals 2_instruction: "Try this puzzle that uses conditionals and\nloops
        together. Use the \"if\" block to decide when to turn. Hint: you only\nneed
        one more block to complete this puzzle. \n"
      PDK5 Events 1_instruction: "So far all of the programs we've written are executed\nin
        order from top to bottom. In this puzzle, we'll use \"Events\" to respond\nto
        an action on demand. Make the octopus say \"Hello\" only when you click\non
        the Octopus. \n"
      PDK5 Functions 1_instruction: |
        Hello. Me zombie artist. Me love drawing! Help
        me draw the square glasses.  Hint:  the bridge between the glasses is 25 pixels
        shorter than the square length.
      PDK5 Functions 2_instruction: |
        As funções permitem que você defina novos blocos! Movemos
        os blocos para desenhar um quadrado para dentro de uma função chamada "desenhe um quadrado".
        Você consegue usar a função "desenhe um quadrado" para criar os óculos? Os quadrados são separados
        por 75 pixels.
      PDK5 Loops 1_instruction: "Instead of using 5 \"move forward\" blocks, use\nthe
        \"repeat\" block with a \"move forward\" block inside of it. In computer\nscience,
        this is called a \"loop.\" \n"
      PDK5 Loops 3_instruction: |
        Here's another puzzle to practice loops. What happens
        if you use the repeat block to run the code already provided on the workspace
        4 times?
      Pixelation - Lesson 14 - Fix bit offset v.2_instruction: |
        Something happened
        to the bits in this image!  Find error and fix it!  Hint: a few extra bits
        were added.  You should only need to remove some bits.
      Pixelation - Lesson 14 - Fix the error_instruction: |
        Something happened to
        the bits in this image!  Find error and fix it!  Hint: a few extra bits were
        added.  You should only need to remove some bits.
      Pixelation - Lesson 14 - Make the Letter A_instruction: |
        Make a 3x5 letter
        'A'.  The widget is setup with the incorrect dimensions. Your first task
        is to set the second byte to the 8-bit binary code for 5: 0000 0101.  Then
        start entering pixel data.
      Pixelation - Lesson 14 - Make your own B and W Image_instruction: |
        Now make
        your own image! We've started you off with a 10x10 canvas but you can make
        it whatever size you want.  Happy pixeling!
      Pixelation - Lesson 14 - Make your own B&W Image_instruction: |
        Now make your
        own image! We've started you off with a 10x10 canvas but you can make it
        whatever size you want.  Happy pixeling!
      Pixelation 2_instruction: |
        Something happened to the bits in this image!  Find
        error and fix it!
      Pixelation 4x4 Empty_instruction: |
        The width and height are now encoded in
        the pixel data. Can you figure out how to adjust the dimensions?
      Play Lab Rocket 1_instruction: |
        A rocket blasts off, traveling at 15 meters
        per second... press "Run" to see how this word problem looks as an animation.
      Play Lab Rocket 2 (copy 1)_instruction: |
        We've added your contract and two
        examples into the Design Recipe for rocket-height. Now write the function
        for rocket-height.
      Play Lab Rocket 2 (copy 2)_instruction: |
        We've started the Design Recipe for
        rocket-height using the contract and examples you just wrote. Complete the
        function definition for rocket-height and run your animation.
      Play Lab Rocket 2_instruction: |
        We've started the Design Recipe for rocket-height
        using the contract and examples you just wrote. Complete the function definition
        for rocket-height and run your animation.
      Play Lab Rocket 2B (copy 1)_instruction: |
        We've started the Design Recipe
        for rocket-height using the contract and examples you just wrote. Complete
        the function definition for rocket-height and run your animation.
      Play Lab Rocket 2B_instruction: |
        A rocket blasts off, traveling at 15 meters
        per second. Using the Design Recipe, write a function called rocket-height
        that takes in a number of  seconds that have passed since the rocket took
        off, and produces the height of the rocket at that time.
      Play Lab Rocket 3 (copy 1)_instruction: |
        Awesome, now can you update that function
        so that our rocket moves more quickly? Make sure to update the purpose statement,
        examples, and function definition to launch a rocket at 40 meters per second.
      Play Lab Rocket 3_instruction: |
        Awesome, now can you update that function so
        that our rocket moves more quickly? Make sure to update the purpose statement,
        examples, and function definition to launch a rocket at 40 meters per second.
      Play Lab Rocket 4 (copy 1)_instruction: |
        Real rockets start off slowly and
        gain speed over time - let's make ours do the same! Write an exponential
        function that describes a rocket that travels at "seconds" squared meters
        per second.
      Play Lab Rocket 4_instruction: |
        Real rockets start off slowly and gain speed
        over time - so let's add some simple acceleration to ours! Can you write
        a function that describes a rocket that is at 10 meters at 1 second, 40 meters
        at 2 seconds, 90 meters at 3 seconds, 160 at 4 seconds and so on?
      Play Lab Rocket 5_instruction: |
        Much better, but let's write one more function
        with simple acceleration. This time the rocket should be 15 meters at 1 second,
        45 meters at 2 seconds, 95 at 3 seconds, and 165 at 4 seconds.
      Play Lab Rocket Free Play_instruction: |
        Free Play: Experiment with your rocket-height
        function to make the rocket fly in different ways. Click "Finish" when you
        are done.
      Sam the Butterfly 1 (copy 1)_instruction: |
        This butterfly is named Sam, and
        the game area is Sam’s yard. Sam's yard is 400 pixels wide by 400 pixels
        tall! As you can see, Sam is free to walk around the yard, and the coordinates
        at the top of the screen update to tell you his location. Use the arrow keys
        to move sam around his yard. Help Sam collect all of the flags to move on.
      Sam the Butterfly 1_instruction: |
        This bat is named Sam, and the game area
        is Sam’s yard. Sam's yard is 400 pixels wide by 400 pixels tall! As you can
        see, Sam is free to walk around the yard, and the coordinates at the top of
        the screen update to tell you his location. Use the arrow keys to move Sam
        around his yard, making note of Sam's coordinates at different locations.
        Click "Finish" when you're ready to move on.
      Sam the Butterfly 2_instruction: |
        Sam's mom wants to make sure that she can
        always see at least a bit of him, so lets write some functions that help make
        sure he doesn't go too far out of the yard. Here's a function called safe-left?
        - it should take a Number for its domain that represents Sam's x-coordinates
        and return true if he's completely visible on screen. If your function works,
        Sam shouldn't be able to leave the yard from the left side.
      Sam the Butterfly 3_instruction: |
        In the last puzzle we kept Sam from leaving
        on the left, now let's do the same thing on the right. Complete the safe-right?
        function to make sure Sam can't go off the right side of the screen.
      Sam the Butterfly 4_instruction: |
        Huh, we can keep Sam from leaving on the
        left, or we can keep him from leaving on the right, but how can we keep him
        from going either direction? Try using the AND block to program the function
        on-screen? to check if Sam is safe-left? AND safe-right?
      Sam the Butterfly 5_instruction: |
        Free Play: Awesome, we've kept Sam safe
        on the left and right! Use this free play stage to experiment with your functions
        and further improve onscreen?
      Sam the Butterfly 6_instruction: |
        We've added a new parameter "y" to the
        "on-screen?" function. Update the function so that it checks that "safe-left?"
        AND "safe-right?" AND "safe-up?" are all true. When you've fixed the
        function, try going out of the yard from the left, right, and top sides.
      Sam the Butterfly 7_instruction: |
        Only one last direction to worry about! Create
        a "safe-down?" function and update the "on-screen?" function so that it
        checks up, down, left, and right.
      Sam the Butterfly Complete_instruction: |
        Only one last direction to worry about!
        Create a "safe-down?" function and update the "on-screen?" function so
        that it checks up, down, left, and right.
      scrat 16 (copy 1)_instruction: |
        Acorn! Acorn! Acorn! Use an "if" block to
        get me there with the fewest number of blocks.
      scrat 16_instruction: |
        Bolota! Bolota! Bolota! Use um bloco "se" para me levar até lá
        com o menor número de blocos.
      scrat 17 (copy 1)_instruction: |
        Ok, let's do that again for practice - this
        isn't very different, but watch out for the <insert obstacle name for Scrat>!
      scrat 17_instruction: |
        Ok, vamos fazer novamente para pegar a prática - este não é
        muito diferente, mas cuidado com a parede!
      scrat 18 (copy 1)_instruction: |
        The "If-else" blocks checks a condition,
        and then does one thing OR another. To get me to the acorn try to use this
        new block.
      scrat 18_instruction: |
        Os blocos "se-senão" verificam uma condição e, em seguida,
        fazem uma coisa OU outra. Para que eu chegue até a bolota, tente usar este novo bloco.
      scrat 19 (copy 1)_instruction: |
        One more practice of the "if-else" block,
        can you get it right on your first try?
      scrat 19_instruction: |
        Vamos praticar o uso do bloco "se-senão" mais uma vez. Você consegue
        acertar na primeira tentativa?
      scrat 20_instruction: |
        Você consegue adicionar somente 3 blocos para me ajudar a resolver um labirinto mais
        complexo? Se você fizer isso corretamente, eu posso percorrer qualquer caminho cheio de curvas,
        não importa o comprimento. Depressa! O gelo está derretendo!
      SpecialFrozenLevel_instruction: |
        Você se tornou oficialmente um artista mestre!
        Crie um país das maravilhas de gelo.
      Standalone_Artist_1_instruction: |
        Bem-vindo ao Artista! Primeiro, vamos tentar
        fazer um quadrado simples usando os blocos "vire à direita" e "avance".
        Cada lado deve medir 100 pixels.
      Standalone_Artist_2_instruction: |
        Desenhe esse diamante com ângulos de 120 e 60
        graus e lados de 150 pixels de comprimento.
      Standalone_Artist_3_instruction: |
        Você consegue desenhar este hexágono com lados de
        100 pixels e ângulos de 60 graus?
      Standalone_Artist_4_instruction: |
        Agora você tem um novo bloco para brincar,
        o laço. Ele vai repetir um conjunto de comandos. O que acontece se você repetir esses
        comandos 6 vezes?
      Standalone_Artist_5.5_instruction: |
        Observe como simplificamos o código do diamante,
        transformando-o em um laço. Você pode repetir toda a sequência 12 vezes para desenhar
        a flor. Dica: você terá que virar 30 graus depois do laço do seu diamante
        para não continuar desenhando o mesmo diamante todas as vezes.
      Standalone_Artist_5_instruction: |
        Quantas vezes você precisa repetir esse diamante
        para desenhar a flor?
      Standalone_Artist_6_instruction: |
        Repita esse código do hexágono 6 vezes para criar
        o design. Quantos graus você precisa virar a cada vez? Dica: divida
        o número de graus em um círculo pelo número de vezes que você está repetindo.
      Standalone_Artist_7_instruction: |
        Uma função é mais uma ferramenta de programação para que
        você não tenha que repetir as mesmas ações. Essa função desenha uma flor, então
        você pode usá-la sempre que quiser desenhar uma flor. Use-a juntamente com o novo bloco
        "pule" para desenhar essas flores. Dica: as flores são separadas por 150 pixels
      Standalone_Artist_8_instruction: |
        Temos aqui uma função chamada "Desenhe uma forma",
        que programamos para desenhar hexágonos. Execute o código para ver o que ele faz e,
        em seguida, tente usá-lo com a função para ver o que acontece. Você consegue fazer
        com que ela desenhe um padrão de quadrados, triângulos ou octógonos?
      Standalone_Artist_9_instruction: |
        Agora vá em frente e faça a imagem que
        quiser! Você tem até uma função vazia para usar para fazer o que
        quiser!
      Standalone_Artist_v2_instruction: |
        Bem-vindo ao Artista! Primeiro, vamos tentar
        fazer um quadrado simples usando os blocos "vire à direita" e "avance".
        Cada lado deve medir 100 pixels.
      Test Play Lab_instruction: This is a test play lab level.
      Text Compression Peter Piper_instruction: |
        Esse poema foi comprimido com
        a substituição de duas frases comuns por símbolos do dicionário. Você consegue identificar
        outro padrão comum para comprimir ainda mais o poema?
      U1L10 NetSim numbers with decimal_instruction: |
        Invent and test a protocol
        for encoding and sending text messages. Your protocol must include the letters
        a-z, spaces, and common punctuation marks. You may add additional characters
        if you wish. See the worksheet handed out by your teacher for more detailed
        instructions!
      U1L11 NetSim numbers with Ascii_instruction: |
        Work with a partner or in a small
        team to develop a protocol that allows you to send formatted text. See the
        worksheet handed out by your teacher for more detailed instructions!
      U1L4 NetSim SendAB_instruction: "Develop, document, and test a protocol that\nallows
        you to use Internet Simulator to relay a message. See the worksheet\nfor more
        detailed instructions.  \n"
      U1L8 NetSim numbers no decimal_instruction: Default instructions
      U1L8 NetSim numbers with decimal_instruction: |
        With your partner, develop a
        protocol or set of rules for communicating a drawing using only bits. See
        the worksheet handed out by your teacher for more detailed instructions!
      U2L05 - NetSim - Packets and Building TCP_instruction: "Develop a Protocol\nfor
        Reliably Sending a Message.\r\n\r\nConstraints:\r\n- Packets may contain\nonly
        6 characters\r\n- Packets may drop with small probability\r\n- Packets\nmay
        not arrive in order"
      U2L10 NetSim Automatic DNS_instruction: |
        In this version of the Internet Simulator,
        a Domain Name System (DNS) is provided for you and knows the IP addresses
        of all connected computers. Send a message in the form GET [hostname] to the
        DNS service at address <yourRouterNumber>.15 to get a student's address.
      U2L10 NetSim Manual DNS_instruction: |
        In this version of the simulator you
        can't see the other students' addresses.  Instead, one of you must act as
        a name service, to help share addresses with each other.
      U2L2 NetSim Hub Mode_instruction: "Now use the Internet Simulator to send the\nbattleship
        moves. For setup, join a Room with your group, and add ships to\nyour paper
        board for each opponent. When playing, all communication must be\ndone through
        the tool, so no talking, but have fun!\r\n"
      U2L3 NetSim Hub Mode_instruction: |
        Use the Internet Simulator to test out your
        group's binary communication protocol for battleship. How short can you make
        the message and response?
      U2L4 NetSim Routers Addresses_instruction: "For this activity, connect to a\nrouter
        with the others in your group. Important note: The router will only\nproperly
        route messages where the first 4 bits are the To: address and the\nsecond
        4 bits are the From: address.\r\n\r\n[TODO: NetSim needs to support\nhierarchical
        addresses. For now, level is set up for 4 bit to and from addresses]"
      U2L5 NetSim Classroom Internet_instruction: "For this activity, connect to\na
        router with the others in your group. The Internet Simulator now provides\na
        place for you to put the To and From addresses, so you don't have to type\nout
        the bits manually.\r\n\r\n"
      U2L7 NetSim Need for Packets_instruction: |
        Transfer your favicon to a partner
        across a network in which the larger a packet grows, the more likely it is
        to be dropped.
      U313 Two Buttons with Ids_instruction: |
        Now you try it! We've given you some
        starting code with two buttons and two event handlers on the screen, but we've
        just left the default Ids of "id".  You need to change the ids to connect
        the right event handler to the right button. (Interestingly, the incorrect
        program does work, but exhibits some bizarre behavior.  We'll discuss this
        more in the next lesson.  Make the buttons work correctly for now).
      U3L03 choose your own drawing_instruction: |
        Now choose your own!  Pick one
        of the three drawings shown here and attempt to create it on your own, making
        smart decisions about how to break the problem down into re-usable functions.  You
        will review your work with a peer using "procedures peer review rubric."  Check
        it for the requirements.  GIF: U3L3-ProceduresChooseOne.png
      U3L03 Creating Procedures 1_instruction: |
        Write the turnAround() function and
        use it to make the turtle move as depicted. see: U3L03-turnAndDown.gif
      U3L03 Define and use turnAround_instruction: |
        Write the turnAround() function
        and use it to make the turtle move as depicted.
      U3L03 define turnRight and draw a rectangle_instruction: "Create a turnRight()\nfunction
        and draw a rectangle twice as tall as it is wide by having the turtle\nnavigate
        clockwise to draw the rectangle. \n"
      U3L03 Draw a T using turnAround_instruction: |
        The turnAround function is now
        provided for you in the code.  Use the turnAround() function to draw a T as
        depicted.
      U3L03 draw diamond_instruction: "Use any and all of the functions you wrote\npreviously
        to make a 'diamond' shape as shown in the image.\r\n\r\nNOTE:\nthis is another
        tricky one.  The 4 sides of the diamond are made by drawing\nthree steps with
        other movement made between calls.  HINT: you might want\nto make another
        function that handles drawing one side of the diamond. "
      U3L03 Three Steps_instruction: |
        Draw 3 "steps" moving up and to the right.  Notice
        the pattern in the movement. You should define a function called drawStep()
        which draws one of the steps, and then call it 3 times to achieve the effect.
      U3L04 choose your own drawing_instruction: |
        Now choose your own!  Pick one
        of the three drawings shown here and attempt to create it on your own, making
        smart decisions about how to break the problem down into re-usable functions.  You
        will review your work with a peer using "procedures peer review rubric."  Check
        it for the requirements.
      U3L04 diamond solution_instruction: |
        Study this solution to the drawDiamond
        problem.  Notice that the whole program starts by calling drawDiamond() at
        the top.  The program then follows a chain of function calls.  You can trace
        what's happening in the code to see the functions reused.  It's also easy
        to read because the function names describe the expected behavior.
      U3L05_3x3GridEfficiencyChallenge_instruction: |
        Let's revisit the 3x3 grid
        problem you did a few lessons ago.  This time the challenge is to program
        the solution "as efficiently as possible."  Now that you know how to write
        functions, it should be easier to break the problem down, and your code should
        be easier to read and debug.  See the rubric for more details about requirements
        and expectations.
      U3L05_draw3x3GridEfficiently_instruction: |
        Draw a 3x3 grid above and to the
        right of the turtle. Try to do so with the fewest number of commands possible.
        NOTE: This is a very challenging problem.  You may need to play with it for
        a while and tweak it.  You might also consider using pencil and paper to sketch
        your ideas.
      U3L06 Challenge 1 triangle_instruction: |
        Check out the extended Turtle palette
        now made available to you. These new commands accept parameters, allowing
        you to specify precisely how the function operates rather than only being
        able to move or turn a predetermined amount. Make use of these functions to
        draw the triangle as shown.
      U3L06 Challenge 2 purple square_instruction: |
        This time we're going to learn
        a little bit about changing the turtle's pen. Read through the documentation
        for penWidth() and penColor(), and then draw the purple square as shown.
      U3L06 Challenge 3 fill pink_instruction: |
        Now let's try to fill in the entire
        background of the screen. To make it a little easier for you, we can tell
        you the color we chose is one of the 140 named colors.  If you don't know
        what the named colors are, take a closer look at the documentation for penColor()
        again. Hint: you need to use dot().
      U3L06 Challenge 4 bullseye_instruction: |
        Let's try this out one more time.
        This time the colors are NOT named colors - you need to use the hex-color
        number to set the color.  So that you're not randomly guessing, we'll give
        you a hint -- each of the colors shown in the target image is one of these
        one of the five in the following list:  #00ABDC, #CC4400, #1188CC, #006699,
        #11CC00  You might be able to guess correctly if you apply what you know about
        RGB colors.
      U3L06 Challenge 5 overlapping circles_instruction: |
        This image is created just
        using dot() and penColor() but, how are we going to get those circles to be
        transparent?  If you haven't gotten the hint yet: check out the documentation!
      U3L06 Challenge 6 squiggles_instruction: |
        Next we're going to be adding some
        curves to our drawing. Read the documentation for the "arc" commands and
        then draw the squiggles as shown. To make things easier here's a hint: all
        the parameters are multiples of 10, and the colors are from the following
        list of named colors: PowderBlue, lightBlue, Indigo, Purple, Magenta.
      U3L06 Challenge 7 smiley face_instruction: |
        To make this smiley face you'll
        need to look at the documentation for the move() command and then use it with
        the others you've learned.  You can make reasonable guesses about the colors.
      U3L06 Challenge 8 make your own_instruction: |
        Use the tools you've learned
        today to create a drawing of your own creation. If you have time, challenge
        your friends to see if they can duplicate your image.  We'll show you the
        drawing we made for ourselves.  You can try to duplicate that if you want
        to, otherwise, have fun making your own!
      U3L07 - Free Play Loops and Random_instruction: |
        Free Play!  Use what you learned
        from loops and random to make your own little scene.  Have fun.
      U3L07 - Starry Night Starter Code_instruction: "You are going to use loops\nand
        random numbers to generate an image of starry night sky similar to one\nshown
        here.  We have given you some starter code to generate the ground and\nsky
        (just two giant dots), you will add code to this project to make the stars,\ngrass,
        and moon.  All of the effects are clever applications of turtle dots,\nlines,
        and colors.  To get started, follow the series of steps suggested in\nthe
        accompanying worksheet. \n"
      U3L08 - Enchantment Under the Sea_instruction: |
        You have been provided with
        starter code for an “Under the Sea” scene which includes three functions,
        one each for the starfish, sea grass, and fish. Create versions of these functions
        which accept parameters to allow you to add more variation to your scene.  The
        student worksheet provides more details and guidance.
      U3L13 - Button with ID_instruction: |
        Drag a button out onto the screen and
        set its text to "Go forth!".  Run the program to make sure you can see the
        button.
      U3L13 - Debug Id plus logic problem_instruction: "The last problem was an example\nof
        syntax error.  App Lab did not understand which object it should be listening\nto
        for a \"click\" event so it showed an error message in the console to let\nyou
        know.  Another kind of error is a logical error - the program is valid,\nbut
        it's not doing what you want it to do.\r\n\r\nThis program has 2 errors.\nA
        (tricky) syntax error and logical error.  Find them, fix them, and make\nthe
        program work as expected."
      U3L13 - Debug Id Problem_instruction: |
        This program has problem!  Can you figure
        it out?  Run the program and see if you can figure out from the error messages
        in the console what the issue is.  There is not much code, so you might be
        able to figure it out just by reading carefully.  Make a change that will
        make the program work as expected.
      U3L13 - Turtle Driver Project_instruction: |
        Challenge: Create a “turtle driver”
        with at least three buttons on the screen to move the turtle forward, and
        turn the turtle right and left. You can copy/paste code from a previous level
        if you like but it will help build your coding muscles if you create this
        small program from scratch.  If you have time, try adding additional buttons!  You
        can also have fun changing the parameters on the turtle functions, using colors,
        etc.
      U3L13 - Turtle move with button_instruction: "Drag a button out onto the screen\nand
        set its text to \"Go forth!\".  Add an event handler for the button, that\nmakes
        the turtle move forward.  Run the program to make sure it works. \n"
      U3L14 - Unfortunate Events Free Play_instruction: |
        Follow the "Unfortunate
        Events" Worksheet and enter your code here to experiment.  We've pre-loaded
        the code you need to start.
      U3L16 - challenge say hi app_instruction: "In this challenge we give you starter\ncode
        that lays all the elements out on the screen.  Here’s what you need to\ndo:\r\nAdd
        event handler to textInput with the event type ‘input’ that shows\nthe “Say
        hi” button when that event occurs.\r\nAdd event handler to button\nso that
        on click, it writes a hello message to the screen and hides the textInput\nand
        button."
      U3L16 - hideAndShow_instruction: |
        Introducing textInput, getText and write.  First
        run the starter code several times.  Try to change what's written to the
        screen when the button is clicked. Then use getText to write to the screen
        what the user entered in the text box. GIF: U3L16 - useGetText.gif
      U3L16 - hideAndShowPractice_instruction: |
        You are given some starting code
        that puts an image and two buttons on the screen.  The image is initially
        hidden. Add two new event handlers: one for each button, that when clicked
        hide and show the image.
      U3L16 - image and text labels_instruction: |
        Introducing the setPosition command!  Replace
        the moveTo in the button-click event handler to use setPosition to move the
        button itself to a random location when it's clicked.
      U3L16 - images and text labels_instruction: "Introducing objects other than\nbuttons!
        - textLabels and images.  First try replacing your button with a\ntextLabel.
        \ Will the text respond to events just like the button?  Try connecting\nan
        event handler to it.  We've started you out with code similar to the result\nof
        the last level, you can copy your code from that level into here if you\nprefer.
        \n"
      U3L16 - images_instruction: "Introducing Images.  Try replacing the textLabel\nwith
        an image..  Will the image respond to events just like the button?  Try\nconnecting
        an event handler to it.  We've started you out with code similar\nto the result
        of the last level, you can copy your code from that level into\nhere if you
        prefer. \n"
      U3L16 - quick double click_instruction: |
        Mini-Project.  The Quick Double-Click
        game.  In this simple game an object (an image) moves around, or pops up randomly
        on the screen, as the user clicks it.  The goal of our game will be to try
        to double-click the object before it moves.  Part of the challenge (and fun)
        here is creating this app from scratch.  You can look back at your previous
        work for examples, but it's fun to create something from scratch, too.  Try
        it!  For more details see the Activity guide for this lesson.
      U3L16 - setPosition to move button_instruction: |
        Introducing the setPosition
        command!  Replace the moveTo in the button-click event handler to use setPosition
        to move the button itself to a random location when it's clicked.
      U3L16 - setPositionMoveButton_instruction: Use setPositon to moveButton
      U3L16 - setupMoveToRandom_instruction: "We'll be building upon some simple\nstarting
        code throughout this lesson.  Your first task: use moveTo and randomNumber\nto
        get the turtle to move to a random location with each button click.  We've\ngiven
        you starting code for our common setup: a button that moves the turtle\nwhen
        clicked.  You should modify this code.  \n"
      U3L16 - text labels_instruction: "Introducing textLabels.  First try replacing\nyour
        button with a textLabel.  Will the text respond to events just like the\nbutton?
        \ Try connecting an event handler to it.  We've started you out with\ncode
        similar to the result of the last level, you can copy your code from\nthat
        level into here if you prefer. \n"
      U3L16 - textInput getText write_instruction: |
        Introducing textInput, getText
        and write.  First run the starter code several times.  Try to change what's
        written to the screen when the button is clicked. Then use getText to write
        to the screen what the user entered in the text box.
      U3L16 - use images_instruction: |
        Introducing Images.  Try replacing the textLabel
        with an image..  Will the image respond to events just like the button?  Try
        connecting an event handler to it.  We've started you out with code similar
        to the result of the last level, you can copy your code from that level into
        here if you prefer.
      U3L19 - Clicker Game Freeplay Area_instruction: |
        Use this App Lab area to improve
        your clicker game.  You should start by copy/pasting the code from your old
        game here.  We're showing a more full set of blocks in the toolbox - some
        of the things you might not have used yet.  Feel free to explore then and
        experiment if you want to.  Everything else you need should be shown.  Have
        fun!
      U3L19 - Debugging with consoleLog_instruction: |
        This example shows how you
        might insert console.log statements in your code to verify for yourself how
        the values in the variables change during the running of the code.  This is
        an important debugging technique to use when each line in your program doesn't
        have a visual effect on the app that you can see to verify things are working
        right.  Run the code to see the output in the console.
      U3L19 - DEMO up down count practice app_instruction: |
        This is a demonstration
        of a simple App that uses variables, arithmetic and setText.  Play with it
        a little bit here to see what it does.  You can also come back to experiment
        if you want.  You are going to try to create this app yourself on the next
        screen.  Don't worry, we'll start you out with some of the code and leave
        the rest for you to complete.
      U3L19 - do concatenate string with var_instruction: "We've given you a piece\nof
        code from the previous screen.  Try changing the value assigned to foo\nto
        see the string change. \r\nDo this: \r\n1. Try changing the value assigned\nto
        foo to see the string change. \r\n2. By only modifying the lines of code\nthat
        were given to you, try to get the output to say: “The value of foo is:\n9.
        \ And isn’t that fine.” \r\n"
      U3L19 - fix the var name syntax error_instruction: "We've given you some code\nwith
        an error.  It doesn’t recognize the variable.  Can you figure out why?  Fix\nthe
        error and get the program to run.  Also note the error message since it\nmight
        come up at some point later in your life.\r\n\r\n"
      U3L19 - practice with setText_instruction: |
        We've started you out with the
        code shown on the previous screen.  First experiment with the app.  Identify
        where setText is being used.  CHALLENGE: modify the code to also use setText
        to change the text on the button itself when it's clicked.  GIF: U3L19 -
        setTextOfButton.gif
      U3L19 - Target Clicker App_instruction: "# A motivating example\r\n\r\nHere\nis
        an example of the kind of app we want to make.  Study this for the elements\ncontained
        in the app rather than what it is or does.  Things to investigate:\n\r\n\r\n1.
        what happens when you click on the Code.org logo? \r\n2. What happens\nwhen
        you click somewhere else? \r\n3. Try the reset button.   \r\n\r\nThe\nelements
        contained in this app appear to be simple, and they are in some ways.\nHowever,
        the computing principles involved - controlling and keeping track\nof things
        in memory while the program is running - get into some deeper issues\nof programming
        and computer science in general.  There are some devilish details\nand paths
        that can lead to misunderstanding if you're not careful.\r\n\r\nSo,\nkeep
        this app in mind as you go through the different levels in this lesson.  It\nmight
        seem like you need to learn a lot in order to get this simple thing\nworking.
        \ But it's worth taking the time to understand at a deeper level\nwhat is
        going on.  Because this one topic: controlling memory leads to many\npossible
        misunderstandings about coding, and how computers work.  We want\nto make
        sure you get it right from the outset.  \r\n\r\nSo take your time.  Work\nthrough
        the issues.  Read the explanations.  You'll come out on the other\nside a
        better programmer with much deeper knowledge and understanding of how\nthings
        work.  \r\n\r\nAre you ready?  Click 'finish' to move to the next\npage and
        start the lesson."
      U3L19 - test reassignment of two vars_instruction: |
        Why is this happening?
        The code given here is the same as the example from the previous page where
        we asked you to make a prediction about what will happen.  Run this code to
        find out if you were right.  If you weren't, that's okay.  You might experiment  a
        little if you want to, but bon't spend too much time here. We'll explain
        more on the next page.
      U3L19 - three basic ops of variables_instruction: "Do this:\r\nWe've given\nyou
        the three lines of code shown in the previous page.  Add three lines of\ncode
        just below the ones shown here to make your own variable, assign it a\nvalue
        and write it to the screen.  NOTE: change the variable name from the\ndefault
        x to something else.\r\n"
      U3L19 - try out console log_instruction: "Try out console.log.  Do this: replace\nthe
        statement write(\"foo is: \" + foo) with console.log(\"foo is: \" + foo).
        \ Run\nthe program and you should see the output show up in the console area
        below\nthe workspace.  Then try adding a few more console.log statements.
        \ Display\nsome text.  Make another variable and display that.  \r\nThe app
        screen will\nbe blank -- that's the point.  With console.log you can test
        output behind\nthe scenes in a way the user cannot see.  \r\n\r\n\r\nGIF:
        U3L19-useconsolelog.gif"
      U3L19 - up down count practice app_instruction: |
        This app is only SLIGHTLY
        different from the previous one, but much more dynamic.  See if you can figure
        out how and why the count is going up.  Once you've figured it out then you
        should be able to DO THIS: add a button to the app that when clicked makes
        the count go down, and updates the label.  When you're done the app should
        work as shown in the demonstration.  GIF: U3L19 - upDownCountApp.gif
      U3L19 - updating variables pt1_instruction: |
        This app is only SLIGHTLY different
        from the previous one, but much more dynamic.  See if you can figure out how
        and why the count is going up.  Once you've figured it out then you should
        be able to DO THIS: add a button to the app that when clicked makes the count
        go down, and updates the label.  When you're done the app should work as
        shown in the demonstration.  GIF: U3L19 - upDownCountApp.gif
      U3L19 - variable reassignment challenge pt2_instruction: |
        We've given you
        the code from the previous page.  Right now, because the code only sets the
        values of variables, the app doesn't display anything. DO THIS: insert write
        or console.log statements into the code to figure out what the values of a,
        b, and c are after the code has executed.  You should have first made a prediction
        to see if your mental model of how the computer works is correct.  We'll
        ask for the answer on the next page.
      U3L19 - variable scope problem 2_instruction: |
        First run the program to see
        the problem.  You don't need to write code to solve any problem here.  But
        you do need to investigate the code and come up with an explanation for WHY
        what's happening is happening.  Why aren't 3 things being written to the
        screen?  Why does the variable foo seem to exist once but not the other times?  If
        you switch to code mode you'll see some warning messages next to two lines
        of code -- why do you get those messages?  Once you think you have a good
        answer, continue to the next page.
      U3L19 - variable scoping problem debugging_instruction: "Here is the code from\nprevious
        page that has a subtle problem with it.  FIRST: run the app and try\nit to
        see the problem. NOTE: NaN stands for \"Not a Number\".   DO THIS: figure\nout
        what's happening, where, and fix the problem.  We'll explain the issue\non
        the next page. \n"
      U3L19 - write var and string with same name_instruction: |
        Now look at this
        example. We’ve added another write statement.  Before you run the code, see
        if you can predict what the output will be.  Seriously, write it down. THEN
        run the code, mess with it if you like, and continue to the next page for
        an explanation.
      U3L2 Using Simple Commands_instruction: |
        Draw a square above and to the left
        of the turtle's starting position. Click to see full instructions.
      U3L23 Chatbot Conditionals 1_instruction: |
        Ask the user the question "What
        is your favorite color?" using the "prompt" block. Using the "if" block,
        check if the user's response matches yours. Add a "write" block to the
        body of the "if" statement to add the response "<favorite_color> is my
        favorite color too!" to the screen.
      U3L23 Chatbot Conditionals 2_instruction: |
        Replace the "if" block with an
        "if/else" block to make your chatbot respond in all circumstances.
      U3L23 Chatbot Conditionals 3_instruction: |
        In text mode, add several "else
        if" statements to your program.
      U3L23 Chatbot Intro 2_instruction: |
        Create a click event for your button. Create
        a conversation variable and store the user's input in it. You may need the
        "getText," "setText," and "+" blocks in your code.
      U3L23 Chatbot Intro 3_instruction: |
        Add the response "uh huh" by using the
        "+" operator. Add newline characters (\
        ) where appropriate.
      U3L23 Chatbot Intro 4_instruction: |
        Use this level to make your chatbot look
        and work better!
      U3L23 Chatbot Intro_instruction: |
        Add a Lable, Text Input, Button, and Text
        Area object to your project
      U3L2_Turtle3by3Grid_instruction: |
        Draw a 3x3 grid to the front and right of
        the turtle as efficiently as possible. The turtle should end at its original
        location, facing its original direction. (Click to see full instructions)
      U3L2_TurtleSquare_right_instruction: |
        Draw a square ABOVE and to the RIGHT
        of the starting location. (Click to show full instructions)
      XML Scratchpad_instruction: Using this test level to grab xml for unit tests
