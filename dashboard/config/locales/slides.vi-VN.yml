"vi":
  slides:
    maze_intro:
      1:
        image: notes/hoc1_1.jpg
        text: Chào mừng bạn đến với buổi Giờ lập trình đầu tiên! Hãy cùng tìm hiểu
          phần đầu tiên của việc lập trình nào.
      2:
        image: notes/hoc1_2.jpg
        text: Chúng ta sẽ sử dụng Blockly, một ngôn ngữ lập trình trực quan nơi mà
          bạn kéo và thả những khối lệnh để viết dòng lệnh.
      3:
        image: notes/hoc1_3.jpg
        text: Hầu hết các dòng lệnh được đánh máy, nhưng Blockly thì trực quan hơn.
          Mỗi khối lệnh tương ứng với 1 dòng lệnh "thực sự".
      4:
        image: notes/hoc1_4.jpg
        text: Bạn sẽ học căn bản của khoa học máy tính, những khái niệm được sử dụng
          tại bất kì đâu từ tạo những ứng dụng cho đến điều khiển tàu thám hiểm sao
          Hỏa.
      5:
        image: notes/hoc1_5.jpg
        text: Một chương trình là một tập hợp các chỉ dẫn cho máy tính của bạn làm
          theo.
      6:
        image: notes/hoc1_6.jpg
        text: Mục tiêu của chương trình đầu tiên của bạn là dẫn một Chú Chim Tức Giận
          qua một mê cung để đến chỗ Con Lợn Xanh.
      7:
        image: notes/hoc1_7.jpg
        text: Phía bên trái là mê cung nơi mà chương trình của bạn chạy. Những chỉ
          dẫn cho mỗi câu đố ở dưới mê cung.
      8:
        image: notes/hoc1_8.jpg
        text: Hộp công cụ ở giữa có các dòng lệnh cho Chú Chim Tức Giận. Bạn sẽ sử
          dụng chúng để xây dựng đoạn code của bạn.
      9:
        image: notes/hoc1_9.jpg
        text: "Ở bên phải là không gian làm việc nơi mà bạn sẽ kéo từng khối lệnh
          từ hộp công cụ để xây dựng chương trình của bạn. Để xóa một khối, kéo nó
          vào thùng rác ở trong góc."
      10:
        image: notes/hoc1_10.jpg
        text: Mỗi khối là một chỉ dẫn. Nếu bạn kéo một khối lệnh "di chuyển về phía
          trước" vào trong không gian làm việc và ấn "Chạy chương trình", con chim
          sẽ di chuyển 1 bước trong mê cung.
      11:
        image: notes/hoc1_11.jpg
        text: "Để thực hiện nhiều hơn 1 hành động, bạn có thể kéo nhiều khối lệnh
          vào không gian làm việc của bạn và gắn chúng vào với nhau. Con chim sẽ thực
          hiện các dòng lệnh từ trên xuống dưới."
      12:
        image: notes/hoc1_12.jpg
        text: Nếu bạn chạy một chương trình và muốn sửa nó và thử lại, ấn nút "Khởi
          động lại".
      13:
        image: notes/hoc1_13.jpg
        text: Hãy đi bắt những con lợn đó nào!
    artist_intro:
      1:
        image: notes/stage5_1.jpg
        text: Xin chào, tôi là JR! Mỗi đội xe đua cần các nhà khoa học về máy tính
          để giành chiến thắng. Họ phân tích dữ liệu từ xe để giúp nó đi nhanh hơn.
      2:
        image: notes/stage5_2.jpg
        text: Trong loạt câu đố này, bạn là một họa sĩ vẽ đường thẳng bên dưới chân
          bạn ở bất cứ nơi nào bạn đi qua.
      3:
        image: notes/stage5_3.jpg
        text: Khối lệnh này nói rằng "đi thẳng về phía trước 100 điểm ảnh." Điểm ảnh
          là những chấm nhỏ trên màn hình của bạn.
      4:
        image: notes/stage5_4.jpg
        text: Khối lệnh này nói rằng "rẽ phải 90 độ." Nó sẽ quay hướng họa sĩ của
          bạn giống như khối lệnh "quay" trong loạt câu đố mê cung.
      5:
        image: notes/stage5_5.jpg
        text: Nhấp chuột vào mũi tên trong các khối để thay đổi số lượng các di chuyển
          của nghệ sĩ về phía trước hoặc quay. Chơi nhiều khối để làm quen với các
          khối mới.
    farmer_intro:
      1:
        image: notes/stage9_1.jpg
        text: Xin chào, tôi là Paola! Trong loạt câu đố này, bạn là một người nông
          dân đã san phẳng đất trên cánh đồng để bắt đầu trồng cây.
      2:
        image: notes/stage9_2.jpg
        text: Bạn phải giúp cô ấy loại bỏ các cọc bị bám bẩn và cắm vào các lỗ.
      3:
        image: notes/stage9_3.jpg
        text: Các block mới loại bỏ 1 xẻng bụi bẩn từ đống cọc và lấp 1 xẻng bụi bẩn
          vào một lỗ.
      4:
        image: notes/stage9_4.jpg
        text: Cọc và lỗ có những kích cỡ khác nhau, do đó bạn cần phải hỏi người nông
          dân cần bao nhiêu xẻng/ cuốc để dùng.
    flappy_intro:
      1:
        image: notes/flappy01.jpg
        text: Chào! Tôi là Katie! Bạn biết đấy, một trong những điều thú vị nhất của
          khoa học máy tính chính là các chương trình của máy tính có thể tương tác
          với nhau.
      2:
        image: notes/flappy02.jpg
        text: Bất cứ thời điểm nào khi ai đó clicks hay taps hay gõ trên máy tính
          hoặc điện thoại, để tạo ra một sự kiện/ EVENT, và đây là một vài mã/ code
          để đưa ra quyết định phải làm gì khi một sự kiện/ EVENT diễn ra.
      3:
        image: notes/flappy03.jpg
        text: 'Ví dụ cụ thể sau: bạn có một sự kiện trên tay/ EVENT-HANDLER có viết
          "khi chuột máy tính của được bấm, hãy chơi một giai điệu"'
      4:
        image: notes/flappy04.jpg
        text: Bạn có biết trò chơi FlappyBird? Chúng ta sẽ học cách tạo ra phiên bản
          FlappyBird của riêng mình bằng việc Xử lý sự kiện!
      5:
        image: notes/flappy05.jpg
        text: Những phần code bạn sẽ viết liên quan đến việc kéo và thả các khối lệnh.
          Các khối lệnh này diễn tả các câu lệnh cho máy tính. Thực chất bên dưới
          các khối này là những dòng code thật.
      6:
        image: notes/flappy06.jpg
        text: 'Ở khu làm việc đã đặt sẵn một số khối màu xanh lá cây, chúng chính
          là các lệnh "Xử lý sự kiện" '
      7:
        image: notes/flappy07.jpg
        text: Nếu bạn muốn chú chim vỗ cánh khi bạn nhấp chuột, gắn các khối "FLAP"
          vào cách lệnh xử lý sự kiện thích hợp, sau đó trở đi cứ khi nào bạn nhấp
          chuột, chú chim sẽ vỗ cánh.
      8:
        image: notes/flappy08.jpg
        text: Trong mỗi câu đố của hoạt động này, chúng tôi sẽ giới thiệu các loại
          sự kiện mới tương ứng với các khối xanh lá cây trong khu làm việc, và bạn
          sẽ quyết định gắn khối lệnh thích hợp để đáp lại các sự kiện trên.
      9:
        image: notes/flappy09.jpg
        text: Khi bạn thấy một mũi tên xổ dọc xuống như thế này, điều đó có nghĩa
          là bạn có thể chỉnh sửa cài đặt trong game.
      10:
        image: notes/flappy10.jpg
        text: Trong câu đố cuối cùng, có thể bạn sẽ tạo ra trò chơi của riêng bạn
          và chia sẻ nó với bạn bè của bạn. Chúc vui vẻ!
    loop_times:
      1:
        image: notes/hoc2_1.jpg
        text: Xin chào, tôi là Mark! Cùng tìm hiểu về vòng lặp nào. Sử dụng vòng lặp,
          bạn có thể nói với một cái máy tính lặp đi lặp lại bất kì tập hợp hành động
          nào, hàng nghìn hoặc thậm chí hàng tỉ lần.
      2:
        image: notes/hoc2_2.jpg
        text: Trong câu đố này, chúng tôi muốn làm con chim tiến lên phía trước 5
          đoạn để trúng vào con lợn.
      3:
        image: notes/hoc2_3.jpg
        text: Chúng ta có thể sử dụng khối "lặp" mới để giúp đỡ.
      4:
        image: notes/hoc2_4.jpg
        text: Thay vì kéo ra 5 khối "tiến lên phía trước"...
      5:
        image: notes/hoc2_5.jpg
        text: Chúng tôi có thể đặt các khối "di chuyển về phía trước" bên trong khối
          "lặp lại" và viết một số vào trong khối để cho biết nó lặp lại bao nhiêu
          lần.
      6:
        image: notes/hoc2_6.jpg
        text: 'Điều quan trọng: bạn có thể đặt nhiều hơn một lệnh bên trong một khối
          "lặp lại".'
      7:
        image: notes/hoc2_7.jpg
        text: Sử dụng khối "lặp lại" mới của bạn!
    loop_until:
      1:
        image: notes/hoc3_1.jpg
        text: 'Xin chào, tôi là Chris. Trước khi gia nhập Miami Heat, tôi đã đi đến
          Georgia Tech để nghiên cứu khoa học máy tính. Hãy thử khối mới của chúng
          tôi: "lặp lại cho đến khi".'
      2:
        image: notes/hoc3_2.jpg
        text: Phải làm gì nếu chúng tôi không biết khoảng cách những con chim phải
          di chuyển bao xa để đến được những con lợn?
      3:
        image: notes/hoc3_3.jpg
        text: Nếu chúng ta đặt một khối "di chuyển về phía trước" bên trong khối "lặp
          lại cho đến khi", chim sẽ di chuyển về phía trước cho đến khi nó đi đến
          con lợn (hay đâm vào một bức tường).
      4:
        image: notes/hoc3_4.jpg
        text: 'Và điều này là quan trọng: giống như trước, chúng tôi đặt nhiều khối
          bên trong khối "lặp lại cho đến khi", và nó sẽ lặp đi lặp lại tất cả.'
    if:
      1:
        image: notes/hoc4_1.jpg
        text: 'Xin chào, tôi là Bill! Hãy tìm hiểu một khái niệm cơ bản mới: "nếu"
          báo cáo. Điều này là làm thế nào để máy tính đưa ra quyết định.'
      2:
        image: notes/hoc4_2.jpg
        text: Bạn sử dụng báo cáo "nếu" cho mình mỗi ngày. Trước khi bạn đi ra ngoài
          mỗi buổi sáng, bạn nói nếu nó mưa bên ngoài, tôi phải mặc áo của tôi.
      3:
        image: notes/hoc4_3.jpg
        text: Chúng tôi có thể cho các zombie biết để kiểm tra xem nếu có các con
          đường bên trái, và nếu anh ta tìm thấy một con đường bên trái, chúng tôi
          có thể có anh ta chuyển theo hướng đó.
      4:
        image: notes/hoc4_4.jpg
        text: Để viết mã cho việc này, hãy kéo ra khối "nếu" và đặt một khối "rẽ trái"
          bên trong nó.
      5:
        image: notes/hoc4_5.jpg
        text: Bây giờ, nếu chúng ta đặt một khối "di chuyển về phía trước" ở trên
          nó và một khối "lặp lại" xung quanh tất cả mọi thứ, mỗi khi zombie di chuyển,
          anh ta sẽ kiểm tra nếu có một con đường bên trái và quay sang. "Lặp lại"
          lệnh là rất quan trọng để kiểm tra một lần lượt tại mỗi bước.
      6:
        image: notes/hoc4_6.jpg
        text: Lệnh nếu rất quan trọng trong khoa học máy tính. Một trong những chương
          trình đầu tiên tôi đã viết là một trò chơi tic-tac-toe, Và trong trò chơi
          nếu có một người về đầu và dành chiến thắng, ngay lập tức chặn cái vị trí
          chiến thắng lại đối với những người còn lại.
      7:
        image: notes/hoc4_7.jpg
        text: Vui chơi bằng cách sử dụng khối "if"!
    if_else:
      1:
        image: notes/hoc5_1.jpg
        text: Chào, tên tôi là Saloni. Tôi sử dụng khoa học máy tính để giúp giải
          quyết các vấn đề sức khỏe và y học. Hãy tìm hiểu về các khối "if else".
          Cũng giống như khối "if", nhưng nó có một phần phụ vào cuối là "else".
      2:
        image: notes/hoc5_2.jpg
        text: Nếu tôi đặt một khối "di chuyển về phía trước" ở vị trí "làm" và một
          khối "rẽ trái" ở vị trí "khác" có nghĩa là các zombie sẽ lựa chọn giữa 2
          lựa chọn. Nếu có một con đường phía trước, zombie sẽ di chuyển về phía trước,
          và nếu không (không có một con đường phía trước), zombie sẽ rẽ trái.
      3:
        image: notes/hoc5_3.jpg
        text: Giống như các khối "nếu", chúng tôi có thể đặt khối "nếu khác" bên trong
          khối "lặp lại", zombie sẽ giữ di chuyển và các "nếu khối khác" sẽ kiểm tra
          nếu có một nơi nào đó để chuyển, sẽ di chuyển theo hướng đó.
      4:
        image: notes/hoc5_4.jpg
        text: Bây giờ, hãy đá đít lũ thây ma ấy nào!
    if_else_scrat:
      1:
        image: notes/saloni_ifelse_scrat1.jpg
        text: Một tuyên bố khác nếu là một quyết định giữa hai điều. Chúng ta hãy
          xem làm thế nào chúng tôi có thể sử dụng một tuyên bố khác với bạn của chúng
          tôi, chú sóc Scrat.
      2:
        image: notes/saloni_ifelse_scrat2.jpg
        text: Khối này trông giống như khối "if", nhưng có một phần phụ phía dưới
          cùng đó nói "else". nếu tôi đặt khối "move forward" nơi mà nó nói "do" và
          một khối "turn left" nơi mà nó nói "else". điều đó có nghĩa là con sóc Scrat
          sẽ di chuyển tiến về phía trước nếu đó có một đường phía trước. còn nếu
          không có đường phía trước, Scrat sẽ rẽ trái.
      3:
        image: notes/saloni_ifelse_scrat3.jpg
        text: nó thực hiện một quyết định và làm một trong hai hành động dựa trên
          quyết định đó. and cũng giống như khối "if", bạn có thể đặt khối "if-else"
          bên trong khối "repeat.
      4:
        image: notes/saloni_ifelse_scrat4.jpg
        text: Giờ chúng ta hãy giúp chú sóc Scrat lấy được quả hạch đó!
    function:
      1:
        image: notes/stage13_1.jpg
        text: Xin chào, tôi là Brina, một kỹ sư tại Instagram. Có một chức năng mà
          một số dòng mã bạn muốn sử dụng nhiều, thay vì viết mã trong mọi lúc, bạn
          có thể chỉ cần sử dụng một khối.
      2:
        image: notes/stage13_2.jpg
        text: Chúng ta sẽ tìm hiểu làm thế nào để xác định chức năng. Định nghĩa chức
          năng có một ngôi sao trong góc. Tên của các chức năng được viết trên dòng
          trên cùng.
      3:
        image: notes/stage13_3.jpg
        text: các khối mà đi bên trong định nghĩa cho chúng ta biết những gì mà nó
          làm. vì thế định nghĩa chức năng được gọi là "fill5" và nó tạo thành khối
          "rêpat" và khối "fill".
      4:
        image: notes/stage13_4.jpg
        text: Định nghĩa ngồi trên không gian làm việc, nhưng người nông dân của chúng
          ta sẽ không cho chạy các chức năng đến khi ta kéo "fill 5" khối chức năng
          từ thể loại chức năng ra.
      5:
        image: notes/stage13_5.jpg
        text: Let's put the "fun" back in "FUNction!"
    loop_while:
      1:
        image: notes/stage9_5.jpg
        text: Hi, I'm Makinde! Let's learn about the "while block."
      2:
        image: notes/stage9_6.jpg
        text: Khối màu trắng sẽ làm mọi thứ bạn bỏ vào trong nó miễn sao các khối
          ở trên đều đã lập trình đúng.
      3:
        image: notes/stage9_7.jpg
        text: Ví dụ, nếu người nông dân đang đứng trên một đống, cô ta sẽ tiếp tục
          xóa 1 đồ mang được trên xẻng khi vẫn còn một đống dưới cô.
    loop_for:
      1:
        image: notes/stage11_1.jpg
        text: Hi, I 'm Trina, và tôi làm việc cho Pixar. Tôi đã làm việc trên một
          loạt các phim, trong đó có Shrek.
      2:
        image: notes/stage11_2.jpg
        text: Đây là vòng "truy cập" mới của chúng tôi. Nó sẽ biểu diễn hành động
          hơn và hơn nữa rồi bạn có thễ chuyển các hành động mỗi lần một chút.
      3:
        image: notes/stage11_3.jpg
        text: trong ví dụ này, vòng lặp "counter" của chúng ta nói rằng "count with
          counter from 50 to 90 by 10" và bên trong nó, chúng ta có khối "draw a square".
          kéo khối "counter" từ phần "variables" vào trong vị trí "length".
      4:
        image: notes/stage11_4.jpg
        text: Có nghĩa là họa sĩ của chúng ta sẽ đi vẽ một hình vuông có cạnh dài
          là 50 pixel, sau đó thêm 10 vào để vẽ thêm một hình vuông có cạch dài 60
          pixel. Cứ như thế, mỗi lần vẽ tăng lên 10 cho đến khi đạt 90. Như vậy, chúng
          ta sẽ có các hình vuông có cạnh dài 50, 60, 70, 80, và 90 pixel.
    parameters:
      1:
        image: notes/stage15_1.jpg
        text: Hi, tôi là Janete, và tôi là một kỹ sư tại Zynga.
      2:
        image: notes/stage15_2.jpg
        text: Sẽ như thế nào nếu như chúng ta muốn vẽ thật nhiều hình tam giác có
          độ dài khác nhau?
      3:
        image: notes/stage15_3.jpg
        text: chúng ta có thể viết tất cả mã ra bằng tay hoặc chúng ta có thể sử dụng
          một hàm với các tham số.
      4:
        image: notes/stage15_4.jpg
        text: để làm được điều này, nhấp chuột vào ngôi sao màu xanh trên định nghĩa
          hàm "draw a triangle". sau đó kéo "input name" vào trong khối "input".
      5:
        image: notes/stage15_5.jpg
        text: Sau đó, nếu bạn viết "length" tại chỗ nơi được nói là "x" và nhấn "Enter"
          bạn sẽ tạo một đầu vào độ dài cho hàm của bạn.
      6:
        image: notes/stage15_6.jpg
        text: Sau đó nhấp chuộc vào ngôi sau. bây giờ, bạn muốn nhấp chuột vào loại
          biến và kéo khối "length" vào trong khối "move forward" của định nghĩa hàm
          của bạn. và kéo ra xa khối số cũ.
      7:
        image: notes/stage15_7.jpg
        text: để sử dụng hàm của bạn với các tham số, nhấp chuột vào loại hàm và kéo
          ra ngoài hàm "draw a triangle with length" của bạn.
      8:
        image: notes/stage15_8.jpg
        text: bây giờ bạn có thể sử dụng khối toán học để đặt đầu vào các số khác
          nhau để vẽ các hình tam giác có kích thước khác nhau.
    hoc_wrapup:
      1:
        image: notes/hoc6_1.jpg
        text: Chúc mừng! Với câu đố cuối cùng bạn giải quyết được, bạn chỉ cần viết
          các đoạn mã từ đó có thể nói cho bất kỳ con robot làm thế nào để tìm thấy
          con đường của nó thông qua một mê cung không phân nhánh hay hầm với chiều
          dài bất kỳ, cho dù đó là một chú zombie, một con chim, một chiếc xe dò đường
          trên sao Hỏa, hoặc thậm chí là một chiếc xe hơi tự lái.
      2:
        image: notes/hoc6_2.jpg
        text: Các khái niệm cơ bản bạn sử dụng ở trung tâm của mọi chương trình hoặc
          ứng dụng bạn sẽ phải cố gắng.  Chúng tôi đã được học về vòng lặp lại, lặp
          lại trừ khi thực thi, nếu thực thi, và ngược lại.
      3:
        image: notes/hoc6_3.jpg
        text: Nếu bạn thích giờ đầu tiên của việc lập trình, hãy truy cập code.org
          để tiếp tục việc học của bạn vào khoa học máy tính! Khi bạn hoàn tất khóa
          học 20 giờ của chúng tôi, bạn sẽ nắm bắt các khái niệm cơ bản của chương
          trình, và có thể bắt đầu học tập làm thế nào để viết ứng dụng điện thoại,
          hướng dẫn robot, trò chơi, đặt tên cho nó.
      4:
        image: notes/hoc6_4.jpg
        text: 'Công nghệ đang thay đổi tất cả mọi thứ chúng ta làm và nó không quan
          trọng nếu bạn còn trẻ hay già: lập trình là thú vị, đó là sáng tạo, và bất
          cứ ai có thể tìm hiểu!'
    20_wrapup:
      1:
        image: notes/bird.png
        text: Hiển thị ghi chú đến!
    frozen_intro:
      1:
        image: notes/frozen1_1.jpg
        text: Xin chào, tên tôi là Lyndsey. Tôi làm mô hình ,khắc phục các lỗi, và
          viết ứng dụng của riêng tôi. Hãy sử dụng đoạn mã để tham gia vào thế giới
          của Anna và Elsa cùng họ khám phá sự kỳ diệu và vẻ đẹp của băng tuyết.
      2:
        image: notes/frozen1_2.jpg
        text: Bạn sẽ tạo ra các bông tuyết , các mẫu như giầy trượt băng và tạo ra
          một sứ sở thần tiên mùa đông sau đó bạn có thể chia sẻ với bạn bè của bạn.
      3:
        image: notes/frozen1_3.jpg
        text: Trong những giờ tiếp theo, bạn sẽ tìm hiểu làm thế nào để lập trình
          một cách cơ bản. Lập trình truyền thống thường là các đoạn câu lệnh ngắn,
          nhưng chúng ta sẽ sử dụng các khối mã,bằng cách sử dụng các hình khối mà
          bạn có thể kéo và thả để viết chương trình. Đây chính là cách cơ bản để
          sinh viên học. Nhưng thực chất bạn vẫn đang học tạo ra các dòng mã
      4:
        image: notes/frozen1_4.jpg
        text: Một chương trình là một tập hợp các chỉ dẫn để nói cho máy tính biết
          phải làm gì. Hãy xây dựng một đoạn mã, hoặc một chương trình, mà sẽ giúp
          đỡ Elsa tạo ra một con đường đơn giản. Chúng tôi sẽ sử dụng nó sau này để
          tạo ra các mô hình phức tạp hơn.
      5:
        image: notes/frozen1_5.jpg
        text: Màn hình của bạn được chia thành ba phần chính. Bên trái, là bề mặt
          băng nơi bạn sẽ chạy chương trình của bạn. Các chỉ dẫn cho mỗi cấp độ được
          viết ngay bên dưới bề mặt.
      6:
        image: notes/frozen1_6.jpg
        text: "Ở giữa là hộp công cụ, và mỗi khối là một hành động mà Elsa và Anna
          có thể làm."
      7:
        image: notes/frozen1_7.jpg
        text: 'Khoảng trắng ở phía bên phải được gọi là workspace, và đây là nơi chúng
          ta sẽ xây dựng chương trình của chúng ta. Để di chuyển xung quanh trên bề
          mặt băng, bạn sẽ sử dụng khối "Di chuyển về phía trước" '
      8:
        image: notes/frozen1_8.jpg
        text: Ở đây, khối "Di chuyển về phía trước" nói, "di chuyển về phía trước
          100 điểm ảnh." Khi chúng tôi nhấn "Chạy", điều gì sẽ xảy ra? Elsa di chuyển
          về phía trước một số khoảng cách nhất định trên màn hình, 100 điểm ảnh trong
          thực tế! Điểm ảnh về cơ bản là một hình vuông nhỏ trên màn hình máy tính
          của bạn.
      9:
        image: notes/frozen1_9.jpg
        text: Với các khối khác, trong câu đố này chúng ta chúng ta nói "qua phải
          90 độ". Khi chúng ta sử dụng khối "quay phải", điều đó làm cho Elsa quay
          một khoảng cách nhất định. Bạn có thể cho quay xung quanh với một khoảng
          bao xa bạn muốn Elsa quay. Các góc được đo từ con đường phía trước của Elsa.
          Vì vậy đây là quay 90 độ. Và đây là quay 120 độ.
      10:
        image: notes/frozen1_10.jpg
        text: Hãy nhớ rằng, bạn có thể thay đổi số lượng điểm ảnh và góc độ bằng cách
          nhấp vào mũi tên bên cạnh chúng.
    frozen_loops:
      1:
        image: notes/frozen2_1.jpg
        text: Hi, I 'm Paola! Máy vi tính có thực sự tốt khi hành động lặp đi lặp
          lại. Bạn có thể đếm đến 10, 20, hoặc 100. Nhưng một máy tính có thể đếm
          đến một tỷ hoặc một nghìn tỷ. Nó sẽ không cảm thấy chán nản và chỉ mất một
          vài giây. Cho dù nó đếm, hoặc vẽ, hoặc làm bất cứ điều gì - máy tính có
          thể lặp lại điều đó hàng trăm hoặc thậm chí hàng tỷ lần.
      2:
        image: notes/frozen2_2.jpg
        text: Trong chương trình, chúng tôi gọi đây là một vòng lặp. Một vòng lặp
          là làm thế nào bạn lặp lại mã của bạn nhiều lần. Đối với các câu đố tiếp
          theo, mục tiêu của bạn là giúp Anna tạo ra một hình vuông với khối "Lặp
          lại".
      3:
        image: notes/frozen2_3.jpg
        text: Bất kỳ khối mã bạn đặt bên trong khối "Lặp lại" sẽ được lặp lại theo
          thứ tự, như số lần như bạn muốn.
      4:
        image: notes/frozen2_4.jpg
        text: Để vẽ một hình vuông, bạn có thể sử dụng khối "Di chuyển về phía trước"
          và "Quay phải" 4 lần. Nhưng có một cách dễ dàng hơn là nói với máy tính
          "Di chuyển về phía trước" và "Quay phải 90 độ" một lần, và sau đó nói với
          nó để lặp lại cặp hành động này 4 lần. Để làm điều đó, bạn cần phải đặt
          khối "Di chuyển về phía trước" và "Quay phải" bên trong một khối "Lặp lại".
      5:
        image: notes/frozen2_5.jpg
        text: Hãy nhớ rằng, bạn có thể thay đổi số trong khối "Lặp lại" chọn bất cứ
          số gì, và nó sẽ lặp lại số trong khối đó từng đấy lần.
    frozen_functions:
      1:
        image: notes/frozen3_1.jpg
        text: Xin chào, tôi là Chris Bosh. Tôi là một cầu thủ bóng rổ chuyên nghiệp,
          và tôi viết mã trong trường cao đẳng.
      2:
        image: notes/frozen3_2.jpg
        text: Một trong những khái niệm quan trọng nhất trong khoa học máy tính là
          làm thế nào để xác định các lệnh mới. Hầu hết các ngôn ngữ máy tính đã chỉ
          khoảng 100 từ hoặc câu lệnh. Và thực sự, nghệ thuật và ma thuật là việc
          định nghĩa các khối mới thuộc về bạn khác những khối được xây dựng.
      3:
        image: notes/frozen3_3.jpg
        text: Một khi bạn đã dạy một máy tính làm thế nào để làm một hành động một
          lần bằng cách sử dụng dãy lệnh này, bạn có thể tạo 1 tên riêng cho hành
          động đó. Vì vậy ta dễ dàng lặp lại hành động đó sau này. Khi bạn định nghĩa
          các lệnh của riêng bạn và đặt tên cho nó, ta gọi đó là hàm.
      4:
        image: notes/frozen3_4.jpg
        text: Xin chào, Tôi là Jess. Khi lập trình với các khối, bạn sẽ sử dụng hàm
          nếu có một tập các hành động bạn muốn sử dụng nhiều lần. Ví dụ, bạn đã viết
          mã để tạo ra một hình vuông.
      5:
        image: notes/frozen3_5.jpg
        text: 'Bạn có thể định nghĩa nó như là một hàm với tên "tạo ra một hình vuông." '
      6:
        image: notes/frozen3_6.jpg
        text: Bây giờ bạn có một khối mới mà bạn có thể sử dụng nhiều lần để tạo ra
          nhiều hình vuông.
      7:
        image: notes/frozen3_7.jpg
        text: Rất nhiều hình đơn giản có thể được sử dụng để tạo ra các hình phức
          tạp hơn. Trong trò chơi tiếp theo, mã bạn đã viết mới đây để tạo một vòng
          tròn sẽ được dùng để định nghĩa 1 hàm mới mà có thể tạo hình tròn với kích
          thước khác nhau. Bạn có thể sử dụng nó để giúp Elsa tạo ra các hình phức
          tạp và xinh đẹp trong tuyết?
    playlab_intro:
      1:
        image: notes/playlab_intro_1.png
        text: Chúng ta sẽ tạo ra trò chơi bằng cách sử dụng Play Lab. Một trò chơi
          hay cần có cốt truyện, và mọi trò chơi cần có nhân vật. Chúng ta có thể
          học cách xây dựng nhân vật như phù thuỷ, công chúa, giọng nói của các con
          thú, chuyển động, nói chuyện. Ở cuối bài học này, bạn có thể làm 1 trò chơi
          từ đầu tới cuối và chia sẻ với bạn bè.
      2:
        image: notes/playlab_intro_2.png
        text: Màn hình của bạn được chia thành ba phần chính. Ở bên trái là không
          gian chương trình sẽ chạy. Các lệnh cho từng cấp độ được viết bên dưới.
      3:
        image: notes/playlab_intro_3.png
        text: Khu vực giữa là hộp công cụ, và mỗi khối là 1 lệnh. Không gian màu trắng
          bên phải được gọi là không gian làm việc và đây là nơi chúng ta sẽ xây dựng
          chương trình của mình.
      4:
        image: notes/playlab_intro_4.png
        text: Để bắt đầu, bạn sẽ cần liên kết các khối với khối màu cam "khi chạy".
          Bạn có thể liên kết nhiều khối với nhau bằng cách kéo chúng cho đến khi
          bạn nhìn thấy đường màu vàng, và sau đó chúng sẽ nối liền với nhau.
      5:
        image: notes/playlab_intro_5.png
        text: Trong trò chơi đầu tiên, nhân vật của chúng ta là chim cánh cụt và chúng
          ta sẽ làm cho nó nói "Xin chào!" bằng cách kéo các khối nói ra, liên kết
          với khối "khi chạy" và gõ vào "Xin chào." Chúng ta cũng có thể di chuyển
          chim cánh cụt bằng cách sử dụng khối đi sang phải và đi sang trái. Khi bạn
          đã có các khối đúng vị trí, nhấn nút Chạy để xem những gì bạn đã lập trình
          được.
      6:
        image: notes/playlab_intro_6.png
        text: Bắt đầu và kết thúc, bạn sẽ có thể tạo cho riêng bạn trò chơi mà tất
          cả mọi người đều có thể tương tác với nhau, vui hay buồn, điểm số, hoặc
          ném quả cầu lửa, hoặc thậm chí làm biến mất mọi thứ. Đó là phụ thuộc vào
          bạn và trò chơi bạn muốn thực hiện.
    playlab_events:
      1:
        image: notes/playlab_events_1.png
        text: Bây giờ, chúng ta sẽ tìm hiểu về một số thứ mà tất cả các lập trình
          viên trò chơi sử dụng hàng ngày. Đó là sự kiện. Một sự kiện nói chương trình
          của bạn lắng nghe khi một điều gì đó xảy ra. Khi nó xảy ra, ta thực hiện
          1 hành động.
      2:
        image: notes/playlab_events_2.png
        text: 'Một số ví dụ về các sự kiện là: đang lắng nghe cho một nhấp chuột,
          phím mũi tên hoặc phím tab được nhấn.'
      3:
        image: notes/playlab_events_3.png
        text: Ở đây, chúng tôi sẽ làm cho "robot không gian" chào đón các "cư dân
          của hành tinh trái đất" khi một người chơi nhấp vào anh ta. Chúng tôi sẽ
          sử dụng khối "khi nhấn vào" và đính kèm các khối "nói" cho nó. Khi người
          chơi nhấp vào "robot không gian", tất cả mọi thứ kèm theo sự kiện của khối
          "khi nhấp vào" sẽ được thực hiện. Người ngoài hành tinh nói điều gì vậy?
      4:
        image: notes/playlab_events_4.png
        text: Cũng có những khối "khi mũi tên". Nếu bạn liên kết khối "di chuyển"
          tới đây, bạn có thể bắt đầu để di chuyển các nhân vật của bạn lên, xuống,
          trái, hoặc bên phải. Từng bước một, trò chơi của bạn sẽ có được nhiều tương
          tác.
    playlab_repeat_forever:
      1:
        image: notes/playlab_repeat_forever_1.png
        text: Đây là khối "lặp lại mãi mãi". Bất cứ điều gì bên trong khối này sẽ
          xảy ra mãi mãi trong trò chơi.
      2:
        image: notes/playlab_repeat_forever_2.png
        text: Nếu chúng ta muốn một nhân vật làm một cái gì đó nhiều lần, mà không
          cần người chơi phải làm bất cứ điều gì, chúng tôi sẽ đưa những khối hành
          động đó bên trong khối "lặp lại mãi mãi".
      3:
        image: notes/playlab_repeat_forever_3.png
        text: Trong trò chơi tiếp theo này, mục tiêu của chúng tôi là giúp thuật sĩ
          tuần tra biên giới của Vương Quốc, trái và phải liên tục. Học cách lặp lại
          lệnh hoạt động, sẽ giúp bạn tiết kiệm một tấn thời gian sau đó bạn sẽ xây
          dựng trò chơi của riêng bạn.
    C1_artist_intro:
      1:
        image: notes/C1_artist_intro_1.png
        text: "Đây là khối vẽ của bạn. Sử dụng đúng để di chuyển các nhân vật mà chúng
          cần phải đi để điền vào các dòng màu xám."
      2:
        image: notes/C1_artist_intro_2.png
        text: "Đây là những khối nhảy. Khi bạn sử dụng này, nhân vật của bạn di chuyển
          nhưng không đi đến gần, mà sử dụng này khối này để nhảy đến dòng màu xám
          kế tiếp."
    C1_bee_level_intro:
      1:
        image: notes/C1_bee_level_intro_1.png
        text: Các chú ong có phải thật ngầu không? Trong này thiết lập tiếp theo của
          câu đố, mục tiêu của bạn là để giúp đỡ các con ong nhận được để những bông
          hoa và lấy mật hoa từ những bông hoa và bay qua các tổ ong để làm mật ong.
          Bạn sẽ cần phải sử dụng khối "lấy mật" và khối "làm mật ong" cho phần tập
          luyện này.
      2:
        image: notes/C1_bee_level_intro_2.png
        text: 'Mỗi bông hoa có một số mật ong khác nhau: 1, 2, 3 hoặc nhiều hơn nữa.
          Chúng ta biết có bao nhiêu mật hoa trong những bông hoa màu đỏ, bởi con
          số nhỏ trong góc. Vì vậy, hãy chắc chắn để có được tất cả mật hoa từ Hoa
          trước khi bạn di chuyển về phía trước. Ngoài ra, mỗi tổ ong chỉ có thể chứa
          rất nhiều mật ong: 1, 2, 3 hoặc nhiều hơn nữa. Vì vậy, hãy chắc chắn để
          làm cho càng nhiều mật ong mà các tổ ong có thể giữ.'
      3:
        image: notes/C1_bee_level_intro_3.png
        text: Nếu bạn có thể thu thập tất cả các mật hoa và tạo ra mật ong, bạn sẽ
          qua cửa. Nếu không bạn sẽ phải thử lại màn này. Hãy hơi một lúc và cảm nhận
          mình như một "con ong" lập trình chăm chỉ!
    C1_bee_loops:
      1:
        image: notes/C1_bee_loops_1.png
        text: '"Vòng lặp" là sự lặp lại liên tục của hoạt động. Khi tôi nhìn vào tổ
          ong để kiểm tra mật, tôi nhìn vào một tấm lưới và kéo nó ra, và việc này
          được lặp lại nhiều lần. Việc "lặp đi lặp lại" như vậy gọi là Vòng lặp.'
      2:
        image: notes/C1_bee_loops_2.png
        text: Ở màn này, chúng ta muốn chú ong sẽ thu thập ba giọt mật từ bông hoa.
          Thay vì sử dụng ba khối "lấy mật", bạn sẽ sử dụng "khối lặp" để lấy mật
          ba lần. Bấm "chạy" để xem bạn có làm đúng không. Tốt lắm!
    C1_bigevent_unplugged:
      1:
        image: notes/C1_bigevent_unplugged_1.png
        text: Bài học này được gọi là sự kiện lớn. Nó đề cập đến việc làm sao chúng
          ta có thể kiểm soát các chương trình và thực tế là thay đổi cách 1 chương
          trình chạy tốc hành bằng việc sử dụng các sự kiện, như việc nhấn nút hoặc
          nhấp chuột.
      2:
        image: notes/C1_bigevent_unplugged_2.png
        text: Với bài học này, bạn sẽ được điều khiển bởi một điều khiển từ xa. Nó
          giống như là một trò chơi video thực tế.
      3:
        image: notes/C1_bigevent_unplugged_3.png
        text: Sự kiện là một hành động khiến một điều gì đó xảy ra. Giống như khi
          bạn nhấp chuột và tải một trang web. Đó là một sự kiện. Khi bạn chạm vào
          màn hình máy tính bảng để di chuyển, đó cũng là 1 sự kiện. Sự kiện là một
          cách tuyệt vời cho phép người dùng điều khiển chương trình của bạn khi họ
          cần hoặc muốn làm thế.
      4:
        image: notes/C1_bigevent_unplugged_4.png
        text: Chúng ta đáp ứng các sự việc xảy ra. Nếu thấy đói ta sẽ đi lục tủ lạnh.
          Ta nghe thấy người đưa thư đến và anh ta đặt thư vào thùng thư, sau đó chúng
          ta ra lấy thư. Những điều này giống như là các sự kiện nhấn nút hay di chuyển
          cần điều khiển. Đó là những sự việc xảy ra khiến chúng ta phải có hành động
          hồi đáp.
      5:
        image: notes/C1_bigevent_unplugged_5.png
        text: Trong các trò chơi video, có một sự kiện gọi là "Cập nhật" và nó xảy
          ra 30 hoặc 60 lần 1 giây. Với người lập trình video trò chơi, một sự kiện
          thì quan trọng hơn cái nút bấm hay cái cần điều kiển.
      6:
        image: notes/C1_bigevent_unplugged_6.png
        text: Sự kiện chính mà chúng ta đang xem là việc "Cập nhật'' diễn ra. Và sau
          đó chúng ta kiểm tra nhanh cần điều khiển. Vì vậy chúng ta nói, "Ồ, có ai
          đó đã ấn nút khung này phải không?". Nếu không có khác sự kiện, người chơi
          không thể di chuyển, bạn không thể nhảy, bạn không thể điều khiển những
          gì đang diễn ra. Video trò chơi sẽ không thể tạo ra hiệu ứng gì.
    C1_building_foundation:
      1:
        image: notes/C1_building_foundation_1.jpg
        text: Trong nghệ thuật điêu khắc cát, bạn phải hiểu rằng thất bại là một phần
          của quá trình. Nhưng nếu bạn kiên trì, mọi thứ sẽ trở nên tốt đẹp và thú
          vị hơn nhiều. Kiên trì là mục đích của trò chơi này. Cứ chơi rồi bạn sẽ
          thích nó.
      2:
        image: notes/C1_building_foundation_2.jpg
        text: Bài học này được gọi là xây dựng nền tảng. Trong bài học này, Chúng
          ta sẽ làm việc với một bài tập được coi là khó. Bạn sẽ tìm ra cách để tạo
          1 cấu trúc cao tối thiểu là bằng một trong những chiếc cốc này và nó phải
          đủ vững chắc để đỡ được một quyển sách.
      3:
        image: notes/C1_building_foundation_3.jpg
        text: Có thể có những lúc sáng tạo của chúng ta không thành công. Có thể có
          những lúc chúng ta thấy mệt mỏi và muốn bỏ cuộc. Có thể có rất nhiều lúc
          như thế. Nhưng nếu chúng ta tiếp tục cố gắng, hết lần này tới lần khác cố
          hết sức mình, chắc chắn chúng ta sẽ sớm đạt được điều mình muốn.
      4:
        image: notes/C1_building_foundation_4.jpg
        text: Kiên trì chính là cố gắng tiếp tục khi bạn thực sự muốn từ bỏ. Nếu bạn
          muốn tạo ra điều gì đó mới lạ và khác biệt, con đường sẽ còn nhiều khó khăn,
          thất bại.
      5:
        image: notes/C1_building_foundation_5.jpg
        text: Nguyên tắc kiên trì là lựa chọn bước tiếp và học hỏi từ những thất bại
          của bản thân thay vì bỏ cuộc vì bạn mất phương hướng. Mất phương hướng thực
          chất chỉ có nghĩa là điều tuyệt vời đang sắp xảy ra. Vì vậy đừng bỏ cuộc
          trước khi bạn đạt được điều đó. Wooo!
    C1_getting_loopy:
      1:
        image: notes/C1_getting_loopy_1.png
        text: Xin chào, tên tôi là Miral Kotb và tôi là nhà sáng tạo của Iluminate.
          Trong công việc của mình, có một thứ chúng tôi sử dụng trong cả nhảy múa
          và lập trình những bộ quần áo phát sáng. Và đó là các vòng lặp! Các vòng
          lặp tức là nhắc đi nhắc lại 1 hành động.
      2:
        image: notes/C1_getting_loopy_2.png
        text: Khi bạn lặp lại 1 thứ nhiều lần, như hành động của tôi để giữ cho vòng
          lắc eo quay, tôi đang biểu diễn 1 vòng lặp của hành động đó. Đây là 1 vòng
          lặp. Đây cũng là 1 vòng lặp. Và đây cũng là 1 vòng lặp.
      3:
        image: notes/C1_getting_loopy_3.png
        text: Hôm nay chúng ta sẽ có một buổi tiệc nhảy múa. Chúng ta sẽ tạo những
          vòng lặp bằng điệu nhảy mới. Điệu "The Iteration". Chúng ta sẽ học về vòng
          lặp bằng cách sử dụng một điệu nhảy. Bạn sẽ học 1 vài bước đơn giản và lặp
          đi lặp lại chúng để hoàn thành điệu nhảy.
      4:
        image: notes/C1_getting_loopy_4.png
        text: "Đây là những bước bạn cần học. Vỗ tay. Đặt tay ra sau đầu. Đặt tay
          lên eo. Nâng tay trái lên. Nâng tay phải lên. Khá đơn giản phải không? Bạn
          sẽ nhận ra là bạn có thể rút ngắn chỉ dẫn bằng cách ghi nhớ một số bước
          nhảy theo vòng lặp."
      5:
        image: notes/C1_getting_loopy_5.png
        text: Chúng tôi thực ra có sử dụng vòng lặp trong các bài nhảy. Các vũ công
          trang bị các máy tính, tất cả trong cùng một mạng lưới. Tôi có thể tạo vòng
          các ánh sáng lặp đi lặp lại qua người vũ công. Trong vòng lặp đó, tôi có
          thể có 1 bước lặp khi tôi đặt lệnh rằng bạn muốn có vòng lặp qua người 6
          vũ công này và sau đó trong vòng lặp bạn muốn tăng tốc độ của ánh sáng.
          Và tất cả điều này được tạo ra thông qua các vòng lặp. Vòng lặp quan trọng
          đối với khoa học máy tính vì chúng khiến công việc của chúng tôi tốn ít
          thời gian và dễ dàng hơn.
    C1_happy_maps_unplugged:
      1:
        image: notes/C1_happy_maps_unplugged_1.png
        text: Bài học này được gọi là Các Bản Đồ Vui Vẻ. Hôm nay chúng ta sẽ giúp
          bạn thú nhỏ Flurb lượm trái cây,.
      2:
        image: notes/C1_happy_maps_unplugged_2.png
        text: "Điều khiển bạn Flurb đến chỗ hoa quả. Để làm điều này bạn cần tìm ra
          đường đi cho Flurb và dùng mũi tên chỉ dẫn bạn ấy. Để bạn Flurb lượm được
          quả táo, bạn ấy phải đi theo chỉ dẫn nào? Vạch đường để điều khiển đi lên."
      3:
        image: notes/C1_happy_maps_unplugged_3.png
        text: "Để tới nơi, bạn khoanh tròn chỉ dẫn mà nó phải đi."
      4:
        image: notes/C1_happy_maps_unplugged_4.png
        text: Tạo ra thuật toán của bạn bằng cách dán mũi tên bên cạnh bản đồ mà bạn
          đang cố giải quyết. Cái thứ hai giống với cái đầu nhưng nó hướng đi xuống.
      5:
        image: notes/C1_happy_maps_unplugged_5.png
        text: Nó cũng giống như là lập trình trên giấy. Và thế thôi!
    C1_maze_debugging:
      1:
        image: notes/C1_maze_debugging_1.png
        text: Gỡ lỗi là việc tìm kiếm và sửa chữa vấn đề. Có rất nhiều cách để gỡ
          lỗi các vấn đề. Một trong những đơn giản nhất là di chuyển từng bước cho
          đến khi bạn tìm thấy nơi có chỗ sai. Ở đây tôi đang cố gắng để thực hiện
          kỹ thuật lộn sau chống tay lên sà nhưng tôi liên tục thất bại.
      2:
        image: notes/C1_maze_debugging_2.png
        text: Tôi lần theo mỗi phần từng bước một và đã nhận ra chỗ tôi sai sót. Tôi
          đã không đặt tay lên sà đúng cách. Vì thế tôi thử thực hiện lần nữa với
          vị trí tay mới và tôi đã thành công. Tôi thực sự đã rất vui vì đã gỡ được
          lỗi lộn sau chống tay của mình.
      3:
        image: notes/C1_maze_debugging_3.png
        text: "Để tìm hiểu về gỡ lỗi, chúng ta bắt đầu với 1 tập hợp các khối đã ở
          sẵn trong bàn. Bạn sẽ nhận thấy rằng các khối này sẽ không giúp bạn đến
          được mục tiêu. Chúng ta cần tháo gỡ giải pháp và sửa chữa nó. Điều gì không
          đúng? Bạn sẽ nhận thấy rằng bạn cần di chuyển thêm một khối nữa về hướng
          tây."
      4:
        image: notes/C1_maze_debugging_4.png
        text: Hãy cùng khắc phục điều này bằng cách thêm 1 một khối nữa ở phía tây
          và bấm chạy để xem bạn đúng hay chưa. Và bạn đã làm đúng rồi!
    C1_maze_intro_sequencing:
      1:
        image: notes/C1_maze_intro_sequencing_1.png
        text: Với trò chơi này, bạn cần đưa con chim tới con lợn. Hãy nhìn vào trò
          chơi và xem hướng dẫn những điều cần làm.
      2:
        image: notes/C1_maze_intro_sequencing_2.png
        text: Bạn cần phải kéo các khối từ hộp công cụ đến khu thực hành. Đảm bảo
          nó ở dưới khối ''Khi chạy'' và khi bạn nghĩ bạn đã có lời giải chính xác,
          bạn có thể nhấp ''Chạy'' và xem chú chim đi tới chỗ chú lợn.
    C1_maze_loops:
      1:
        image: notes/C1_maze_loops_1.png
        text: Một trong những điều máy tính làm rất tốt đó là nhắc lại các câu lệnh.
          Con người sẽ thấy rất nhàm chán nếu phải làm một việc rất nhiều lần không
          ngừng nghỉ. Nhưng một máy tính có thể làm một việc cả triệu thậm chí cả
          tỷ lần mà không thấy nhàm chán và có thể thực hiện điều đó rất tốt.
      2:
        image: notes/C1_maze_loops_2.png
        text: Ví dụ, nếu tôi muốn chúc mừng sinh nhật mọi người trên Facebook bằng
          cách gửi tin nhắn cho họ, tôi có thể mất hơn 1 thế kỷ để thực sự viết ra
          tất cả các tin nhắn đó. Nhưng với chỉ 1 vài dòng lệnh, tôi có thể có 1 hệ
          thống gửi tin nhắn đến từng người trên Facebook để chúc họ sinh nhật vui
          vẻ.
      3:
        image: notes/C1_maze_loops_3.png
        text: Để đưa con chim tới chỗ con lợn trong cấp độ này... thay vì kéo 3 khối
          lệnh Phía Bắc tới không gian làm việc, bạn sẽ sử dụng khối lệnh ''lặp lại''.
          Kéo khối lệnh ''nhắc lại'' tới không gian làm việc và nhập vào số 3. Sau
          đó kéo khối lệnh ''Di chuyển phía Bắc'' vào khối lệnh ''lặp lại'' và nhấn
          ''Chạy" để xem bạn làm đúng chưa. Chúc mừng, bạn đã thành công!
    C1_moveitmoveit_unplugged:
      1:
        image: notes/C1_moveitmoveit_unplugged_1.png
        text: Bài học này được gọi là di chuyển, di chuyển nó. Chúng ta sẽ cùng nhau
          viết một chương trình để đưa bạn bè của chúng ta từ điểm khởi đầu với bông
          hoa chỉ hướng đến mục tiêu mặt cười.
      2:
        image: notes/C1_moveitmoveit_unplugged_2.png
        text: Nhưng biểu tượng mặt cười đang là mặt mếu và chỉ một người biết cách
          đi tới đó. Hãy bắt đầu chương trình này.
      3:
        image: notes/C1_moveitmoveit_unplugged_3.png
        text: Một chương trình là một thuật toán đã được lập trình vào một thứ có
          thể chạy bằng máy móc. Hầu hết chúng ta đều nghĩ rằng chương trình là thứ
          chúng ta viết cho máy tính. Chương trình rất cần thiết cho máy tính nhưng
          chúng cũng rất hữu ích ở những nơi khác. Bạn có thể tự tạo ra trò chơi riêng
          hoặc thậm chí lập trình một con rô bốt làm việc cho bạn.
    C1_going_places_safely:
      1:
        image: notes/C1_going_places_safely_1.png
        text: Tên em là Jeremiah. Xin chào! Tôi 7 tuổi. Tôi rất thích chơi máy tính
          của mẹ nhưng tôi luôn phải xin phép trước. "Mẹ ơi, con có thể dùng máy tính
          được không? Chắc chắn rồi con yêu!"
      2:
        image: notes/C1_going_places_safely_2.png
        text: Tôi thích máy tính của mẹ vì tôi có thể truy cập Internet. Internet
          giống kiểu như là bạn hàng xóm của bạn vậy. Bạn có thể thăm thú những nơi
          thú vị, bạn có thể trò chuyện với gia đình và bạn bè và bạn có thể học hỏi
          nhiều điều mới lạ.
      3:
        image: notes/C1_going_places_safely_3.png
        text: Hôm qua, tôi đã đi thăm sở thú gần nhà. Tôi nhìn thấy 1 chú ngựa vằn
          con. Tôi đã chụp ảnh và thay đổi màu sọc vằn của chú, sau đó thêm 1 chiếc
          mũ và thêm hình ảnh đó vào bộ siêu tập động vật kì lạ của mình. Tuyệt vời!
          Sau đó, tôi đã đi thăm một nơi xa rất xa. Tôi đã đi thăm Kenya. Đó là 1
          quốc gia ở châu Phi. Rất nhiều ngựa vằn sống ở đây.
      4:
        image: notes/C1_going_places_safely_4.png
        text: Đôi khi trên Internet, tôi trò chuyện với những người mà tôi biết, như
          bà ngoại tôi người sống ở 1 bang khác. Chào bà ngoại! Bà đang làm bánh để
          gửi cho tôi nhân ngày sinh nhật. "Ngon quá, cháu ước Internet có thể truyền
          mùi vị." Tôi có thể trò chuyện với nhiều người khác trên Internet, như là
          các anh chị em họ hàng nhà tôi, nhưng tôi chỉ trò chuyện với người mà tôi
          quen.
      5:
        image: notes/C1_going_places_safely_5.png
        text: "Điều tôi thích nhất trên Internet là tôi có thể chơi những trò chơi
          vui nhộn. Ghi điểm! Tôi cũng thích vẽ và sáng tạo ra những thứ mới lạ và
          chia sẻ với bạn bè. Tuyệt vời! Đôi khi tôi truy cập vào 1 trang web và học
          hỏi được những điều mới lạ, nhưng tôi luôn vào những trang phù hợp với mình.
          Wow, những chú khủng long!"
      6:
        image: notes/C1_going_places_safely_6.png
        text: 'Internet là một nơi cực kì vui nhộn. Nhưng cũng như khi bạn đi qua
          đường trong khu phố nhà mình, bạn phải cẩn thận khi bạn truy cập trực tuyến.
          Đây là 3 quy tắc cần nhớ. Quy tắc số 1: Luôn xin phép bố mẹ trước tiên.
          Quy tắc số 2: Chỉ trò chuyện với những người mà bạn biết. Quy tắc số 3:
          Truy cập những trang web phù hợp với bạn.'
      7:
        image: notes/C1_going_places_safely_7.png
        text: Wow, vừa rồi thật vui! Đến giờ ăn tối rồi. Bây giờ tôi phải đăng xuất
          rồi. Tôi rất nóng lòng được đăng nhập lại và xem tiếp theo mình có thể ghé
          thăm nơi nào.
    C1_pair_programming:
      1:
        image: notes/C1_pair_programming_1.png
        text: Hôm nay chúng ta sẽ học về Lập trình Đôi. Trong lập trình đôi, bạn sẽ
          làm việc theo nhóm. Tại sao 2 người nên sử dụng 1 máy tính? Vì 2 cái đầu
          thì tốt hơn là một. Trong lập trình đôi, bạn và cộng sự sẽ cùng ngồi với
          nhau chung một máy tính và các bạn sẽ cùng chung 1 dự án.
      2:
        image: notes/C1_pair_programming_2.png
        text: Trong lập trình đôi, một người là tài xế còn một người là hoa tiêu,
          giống như khi lái xe. Tài xế ngồi trước máy tính và là người sử dụng bàn
          phím và chuột hoặc màn hình chạm và kiểm soát hoạt động chính của máy tính.
          Người còn lại là hoa tiêu. Hoa tiêu giúp tài xế bằng cách trả lời các câu
          hỏi của tài xế và chỉ ra các vấn đề hoặc lỗi tiềm tàng.
      3:
        image: notes/C1_pair_programming_3.png
        text: Giao tiếp là chìa khoá để lập trình đôi thành công. Không công kích,
          tôn trọng nhau, đừng là một hoa tiêu hống hách, vì chẳng ai thích một tài
          xế ngồi ghế sau. Bạn và cộng sự nên luôn nói chuyện với nhau. Tài xế có
          thể giải thích điều họ đang làm. Và hoa tiêu có thể giúp gợi ý điều tiếp
          theo nên làm.
      4:
        image: notes/C1_pair_programming_4.png
        text: Hoa tiêu nên suy nghĩ về bức tranh toàn cảnh còn tài xế tập trung vào
          các chi tiết. Cả 2 vai trò đều quan trọng. Lập trình đôi tức là làm việc
          với nhau như một đội.
    C1_planting_seed:
      1:
        image: notes/C1_planting_seed_1.png
        text: Bài học này được gọi là gieo hạt và nó sẽ giúp chúng ta hiểu về các
          thuật toán. Thuật toán là những hướng dẫn cụ thể mà giải thích các việc
          cần làm theo thứ tự. Thậm chí hàng ngày, các việc như ăn sáng hay đánh răng
          cũng là thuật toán yêu cầu từng bước nhỏ để hoàn thành công việc đó.
      2:
        image: notes/C1_planting_seed_2.png
        text: Máy tính có thể là rất thông minh nhưng chúng chỉ có thể hiểu bạn nếu
          bạn nói cho chúng chính xác điều bạn muốn từng bước một. Điều tuyệt vời
          về thuật toán là nếu bạn tuân theo hướng dẫn theo thứ tự, bạn có thể làm
          điều mà trước đây bạn chưa từng biết cách làm. Nó giống như là tuân theo
          một công thức.
      3:
        image: notes/C1_planting_seed_3.png
        text: Hôm nay chúng ta sẽ tự gieo hạt giống sử dụng 1 thuật toán. Tạo ra thuật
          toán của riêng bạn bằng cách cắt các bức trah thành từng phầm. Chọn những
          bức tranh mà chỉ ra các bước gieo hạt và sắp xếp các bức tranh đó theo thự
          tự đúng.
      4:
        image: notes/C1_planting_seed_4.png
        text: Bây giờ là lúc bạn xem liệu thuật toán của mình có hoạt động. Tuân thủ
          các bước trong thuật toán 1 cách thật cẩn thận. Chúng đã đúng thứ tự chưa?
          Bạn đã gieo hạt thành công bằng việc tuân thủ thuật toán chưa? Nó giống
          như là lập trình với các bức tranh!
      5:
        image: notes/C1_planting_seed_5.png
        text: Khi chúng ta muốn làm sô cô la, có rất nhiều bước lớn trong quá trình
          và trong mỗi bước lớn đó lại có tập hợp những bước nhỏ hơn và có các công
          thức hay thuật toán khác nhau tuỳ theo chúng ta muốn sô cô la có vị như
          thế nào. Mỗi bước đều quan trọng, thậm chí là các bước nhỏ, vì thiếu một
          bước thì các bước còn lại không thể hoàn thành. Tạo ra thuật toán mà người
          khác có thể hiểu được là rất quan trọng. Đó là lí do tại sao mỗi bước phải
          được viết ra cốt để dù ai làm thì đều ra cùng kết quả.
    C1_playlab_storytelling:
      1:
        image: notes/C1_playlab_storytelling_1.png
        text: Giờ là lúc sáng tạo và sử dụng kỹ năng lập trình của bạn để kể chuyện.
          Câu chuyện của bạn sẽ có diễn viên và bạn có thể khiến các diễn viên này
          trò chuyện và tương tác vói nhau. Hãy bắt đầu nghĩ về loại câu chuyện mà
          bạn muốn kể.
      2:
        image: notes/C1_playlab_storytelling_2.png
        text: Con mèo luôn sợ chó và nếu con mèo nhận ra rằng con chó đang cố thân
          thiện? Khối lệnh "khi chạy" khởi động mọi thứ. Khối lệnh "di chuyển" sẽ
          di chuyển nhân vật của bạn và khối lệnh "nói" sẽ khiến nhân vật của bạn
          nói bất kỳ điều gì bạn gõ.
      3:
        image: notes/C1_playlab_storytelling_3.png
        text: Đây là khối lệnh "khi các diễn viên gặp nhau" mà bạn có thể liên kết
          tới các khối lệnh khác.
      4:
        image: notes/C1_playlab_storytelling_4.png
        text: Tôi đã làm con chó đi ngang qua và nói "Xin chào" nhưng sau đó con mèo
          hoảng sợ nên nó chạy mất. "Ahhh" nếu có thêm lần nữa, có thể có kết thúc
          có hậu rồi. Kết thúc!
    C1_spelling_bee_intro:
      1:
        image: notes/C1_spelling_bee_intro_1.png
        text: "Đây là cấp độ con ong đánh vần. Sử dụng các mảnh ghép để di chuyển
          con ong. Khi nó di chuyển, nó sẽ thu thập các chữ cái để đánh vần các từ."
      2:
        image: notes/C1_spelling_bee_intro_2.png
        text: Hãy xem liệu bạn có thể đánh vần từ họ cho ở trong ô phía dưới sân khấu.
          Nhưng con ong cẩn thận! Di chuyển sai hướng sẽ thêm chữ cái mà bạn không
          mong muốn.
    C1_zuck_repeat_loop:
      1:
        image: notes/C1_zuck_repeat_loop_1.png
        text: Một trong những điều máy tính làm rất tốt đó là nhắc lại các câu lệnh.
          Con người sẽ thấy rất nhàm chán nếu phải làm một việc rất nhiều lần không
          ngừng nghỉ. Nhưng một máy tính có thể làm một việc cả triệu thậm chí cả
          tỷ lần mà không thấy nhàm chán và có thể thực hiện điều đó rất tốt.
      2:
        image: notes/C1_zuck_repeat_loop_2.png
        text: Ví dụ, nếu tôi muốn chúc mừng sinh nhật mọi người trên Facebook bằng
          cách gửi tin nhắn cho họ, tôi có thể mất hơn 1 thế kỷ để thực sự viết ra
          tất cả các tin nhắn đó. Nhưng với chỉ 1 vài dòng lệnh, tôi có thể có 1 hệ
          thống gửi tin nhắn đến từng người trên Facebook để chúc họ sinh nhật vui
          vẻ.
      3:
        image: notes/C1_zuck_repeat_loop_3.png
        text: Trong ví dụ này, mục tiêu của bạn sẽ là di chuyển con chim tới chỗ con
          lợn. Bây giờ chúng ta có thể sử dụng khối lệnh lặp lại để làm điều này rất
          dễ dàng. Bạn có thể làm điều này bằng cách đưa vào máy tính lệnh di chuyển
          lên phía trước 5 lần để mỗi lần chú chim tiến một bước tới chú lợn hoặc
          bạn có thể yêu cầu máy tính di chuyển 1 lần, và sau đó yêu cầu nó lặp lại
          lệnh đó 5 lần và nó sẽ làm tương tự.
      4:
        image: notes/C1_zuck_repeat_loop_4.png
        text: "Để làm điều này, bạn kéo lệnh di chuyển về phía trước và sau đó bạn
          đặt nó vào khối lệnh lặp lại. Và bạn có thể nhấp chuột vào nó và cho biết
          bạn lặp lại khối lệnh bao nhiêu lần để nó biết bạn muốn nó di chuyển về
          phía trước bao nhiêu bước."
      5:
        image: notes/C1_zuck_repeat_loop_5.png
        text: Một điều nữa là bạn có thể đặt bao nhiêu lệnh tuỳ ý vào khối lệnh lặp
          lại. Vì thế trong ví dụ này, bạn sẽ yêu cầu nó di chuyển về phía trước và
          rẽ trái và nó sẽ thực hiện 5 lần. Chúc vui!
    C2_artist_intro:
      1:
        image: notes/C2_artist_intro_1.png
        text: Bạn thậm chí không đủ tiêu chuẩn cho cuộc đua nếu bạn không có những
          người thành thạo trong khoa học máy tính vì số dữ liệu mà các xe phải thu
          thập và sự cần thiết của việc có những người có thể viết chương trình để
          tìm ra cách bạn tiếp tục xây dựng giao thức.
      2:
        image: notes/C2_artist_intro_2.png
        text: Trong các trò chơi này, bạn sẽ là một nghệ sỹ sử dụng bút chì để vẽ
          các hình dạng khác nhau. Nghệ sỹ của bạn đi đâu, nó sẽ vẽ 1 đường thẳng
          ở phía sau.
      3:
        image: notes/C2_artist_intro_3.png
        text: "Để di chuyển xung quanh bức vẽ, bạn sẽ sử dụng khối lệnh di chuyển
          về phía trước. Đây là khối lệnh nói di chuyển về phía trước 100 điểm ảnh.
          Khi chúng ta nhấn chạy, điều gì sẽ xảy ra? Nghệ sỹ di chuyển 1 số bước nhất
          định là 100 điểm ảnh. Điểm ảnh cơ bản là những hình vuông rất nhỏ trên màn
          hình máy tính của bạn."
      4:
        image: notes/C2_artist_intro_4.png
        text: Khối lệnh khác chúng ta có trong trò chơi này nói "qua phải 1 góc 90
          độ". Và khi chúng ta kéo khối lệnh sẽ khiến nghệ sỹ của chúng ta quay 1
          góc nhất định. Vì vậy bạn có thể chơi và điều khiển nghệ sỹ quay theo ý
          muốn. Đây là một góc quay 90 độ.
      5:
        image: notes/C2_artist_intro_5.png
        text: Và đây là một góc quay 120 độ. Và nhớ là, bạn có thể thay đổi những
          giá trị này bằng cách nhấp vào các mũi tên bên cạnh các chỉ điểm ảnh hoặc
          độ. Hãy tận hưởng trò chơi!
    C2_bee_conditionals:
      1:
        image: notes/C2_bee_conditionals_1.png
        text: "Đây là khối lệnh câu điều kiện. Nó nói rằng NẾU mật hoa hoặc mật ong
          ít hơn hoặc bằng hoặc lớn hơn 1 số nào đó, THÌ làm điều gì đó."
      2:
        image: notes/C2_bee_conditionals_2.png
        text: "Điều này hữu ích khi chúng ta không biết cần lấy bao nhiêu mật hoa
          hoặc mật ong, như chúng ta thấy ở đây với dấu hỏi này."
      3:
        image: notes/C2_bee_conditionals_3.png
        text: Trong ví dụ này, chúng ta sẽ nói NẾU bông hoa đỏ có số mật hoa lớn hơn
          0, lấy mật hoa. Nó sẽ khiến con ong lấy mật hoa với điều kiện là con ong
          ở chỗ bông hoa. Và đây!
    C2_binary_bracelets:
      1:
        image: notes/C2_binary_bracelets_1.png
        text: "Đây là bài học vòng tay nhị phân. Chúng ta sẽ viết chữ cái đầu của
          tên mình bằng mật mã lên vòng đeo tay và cho bạn bè xem!"
      2:
        image: notes/C2_binary_bracelets_2.png
        text: Nhị phân là cách thể hiện thông tin bằng cách chỉ sử dụng 2 lựa chọn.
          Đôi khi mọi người nghĩ cái này chỉ bao gồm 1 và 0. Nhưng bạn có thể thể
          hiện nhị phân với bộ đôi bật và tắt, lên và xuống, trong và ngoài hoặc bất
          kỳ cặp đối lập nào.
      3:
        image: notes/C2_binary_bracelets_3.png
        text: Xin chào, tôi là Orion và tôi lập trình rô bốt tại đây Play-im. Tất
          cả não bộ của máy tính và rô bốt ở mức cơ bản nhất là các cổng điện tử nhỏ.
          Khi cổng mở, dòng điện có thể chạy qua và khi nó đóng, dòng điện không thể
          chạy.
      4:
        image: notes/C2_binary_bracelets_4.png
        text: Một ví dụ về nhị phân trên rô bốt là mắt của rô bốt. Những con mắt này
          là đèn led và đó là những bóng đèn có thể bật hoặc tắt. Nó là một hệ thống
          nhị phân. Chúng ta có thể sử dụng những bóng đèn này để thể hiện số nhị
          phân. Nếu chúng ta có một tập hợp các rô bốt, chúng ta có thể nói con rô
          bốt đầu tiên ở vị trí số 1, rô bốt thứ 2 ở vị trí thứ 2, rô bốt thứ 3 ở
          vị trí thứ 3 và tiếp tục như thế. Đó là cách bạn thể hiện số thập phân.
          Rô bốt sẽ làm điều đó nhờ con mắt thập phân của chúng và đếm ra cho bạn.
    C2_conditionals_with_cards:
      1:
        image: notes/C2_conditionals_with_cards_1.png
        text: Bài học này được gọi là câu điều kiện bằng thẻ. Hàng ngày bạn đưa ra
          quyết định dựa trên những gì bạn nhìn và nghe thấy.
      2:
        image: notes/C2_conditionals_with_cards_2.png
        text: Tôi muốn đi bộ ra công viên nhưng trước hết tôi phải quyết định xem
          liệu mình có nên mang ô không. Vì thế tôi nhìn ra ngoài cửa sổ. Nếu trời
          nhiều mây, tôi sẽ mang ô. Ngược lại, tôi sẽ mang kính râm. Tôi nghĩ là tôi
          nên mang ô. Những gì tôi nhìn và nghe thấy quyết định thứ tôi sẽ mang theo.
      3:
        image: notes/C2_conditionals_with_cards_3.png
        text: Câu điều kiện cũng được sử dụng trong các trò chơi. Hôm nay chúng ta
          sẽ luyện tập sử dụng câu điều kiện bằng thẻ trò chơi. Trong trò chơi này,
          thẻ mà tôi giơ sẽ xác định việc bạn tôi sẽ làm. Nếu tôi giơ số 7, mọi người
          sẽ vỗ tay. Nếu là số khác, mọi người sẽ nói "awww". Hãy thử nào! "Awww"
          "Chúc mừng"
      4:
        image: notes/C2_conditionals_with_cards_4.png
        text: Tôi đố bạn có thể nghĩ ra trò chơi vui hơn với câu điều kiện. Hãy thử
          xem! Câu điều kiện là những gì khiến máy tính có vẻ thông minh hơn. 1 chương
          trình máy tính bao gồm các câu điều kiện thì có thể tương tác lại với người
          dùng và thay đổi tiến trình hành động của nó.
      5:
        image: notes/C2_conditionals_with_cards_5.png
        text: Hãy nghĩ về trò chơi yêu thích của bạn. Bạn có kiếm được nhiều điểm
          hơn cho 1 số hành động so với khi bạn làm các hành động khác? Điều này xảy
          ra là vì máy tính sử dụng câu điều kiện. Đây là cách máy tính ra quyết định.
          Thế còn nếu bạn đạt mục tiêu, bạn sẽ kiếm được 10 điểm. Nếu không, bạn mất
          3 điểm. Khi bạn biết cách câu điều kiện hoạt động, bạn có thể tạo ra các
          loại trò chơi thú vị.
    C2_artist_debugging:
      1:
        image: notes/C2_artist_debugging_1.png
        text: "Ở đây chúng ta có sẵn 1 số khối lệnh trên không gian làm việc. Nhưng
          có điều gì đó không đúng."
      2:
        image: notes/C2_artist_debugging_2.png
        text: Hãy gỡ lỗi lập trình này bằng cách giảm tốc độ và xem nó chạy qua từng
          khối lệnh một.
      3:
        image: notes/C2_artist_debugging_3.png
        text: "Ôi có vấn đề rồi. Râu của con mèo dài 75 điểm ảnh, không phải 25."
    C2_bee_debugging:
      1:
        image: notes/C2_bee_debugging_1.png
        text: Bạn đã bao giờ nghe đến việc gỡ lỗi 1 chương trình? Đây là cách bạn
          tìm ra những gì không hoạt động. Khi bạn gỡ lỗi lập trình, bạn xác định
          và loại bỏ các lỗi sai.
      2:
        image: notes/C2_bee_debugging_2.png
        text: Ở đây chúng ta được cho sẵn 1 vài khối lệnh trong không gian làm việc.
          Chúng ta sẽ sử dụng nút "Bước" để đi qua từng khối lệnh 1, xem liệu đây
          đã là phương pháp đúng chưa và chỗ nào chúng ta cần sửa chữa.
      3:
        image: notes/C2_bee_debugging_3.png
        text: Có vẻ như đây là vấn đề rồi! Chúng ta cần thêm 1 khối lệnh tiến về phía
          trước nữa. Nút "Bước" giúp chúng ta gỡ lỗi bằng cách xác định lỗi sai ở
          đâu vì thế chúng ta có thể sửa chữa nó.
    C2_digital_footprint:
      1:
        image: notes/C2_digital_footprint_1.png
        text: Giữ cái mũ ở trên cái đầu và trí khôn sẽ cho bạn biết bạn đang ở đâu
          và hãy nghĩ về sở thú, và gật đầu để gửi lời chào! Dùng cái đầu để suy nghĩ
          khi bạn lên mạng để những gì của mình thì giữ cho riêng mình và để biết
          cách giữ an toàn, cách để có vài khoảng không gian riêng tư trong cuộc sống!
          Từ đầu tới chân, dừng lại, nghĩ về điều này. Từ chân lên đầu, dừng lại,
          hãy nghĩ về việc lên mạng!
      2:
        image: notes/C2_digital_footprint_2.png
        text: Dùng trái tim mình để lớn dần lên, và để gương mặt hồng hào khoẻ mạnh,
          và để làm 1 hình trái tìm và nói cho ai đó biết rằng họ sẽ là của bạn! Dùng
          trái tim mình khi bạn lên mạng, cảm nhận điều gì là đúng và luôn tốt bụng,
          và thể hiện sự tôn trọng bạn bè, hãy công bằng và tử tế khi bạn lên mạng.
          Từ đầu tới chân, dừng lại, nghĩ về điều này. Từ chân lên đầu, dừng lại và
          nghĩ về việc lên mạng!
      3:
        image: notes/C2_digital_footprint_3.png
        text: Dùng cái tay để ôm thú cưng của bạn, để giữ quần áo của bạn khỏi ướt,
          và để mặc chiếc áo yêu thích và để giúp bạn bay cao và tin tưởng. Dùng tay
          khi bạn lên mạng, để nghỉ ngơi và cân bằng thời gian, rời xa công nghệ và
          tìm 1 cái cây để leo trèo. Từ đầu tới chân, dừng lại, hãy nghĩ về điều này.
          Từ chân lên đầu, dừng lại và hãy nghĩ về việc lên mạng!
      4:
        image: notes/C2_digital_footprint_4.png
        text: Dùng cái bụng để chứa đồ ăn, và để nghe cái bụng gầm gừ, để bụng nhảy
          ùm xuống nước, và để cảm nhận bụng đầy bọt khí khi uống nước có gas. Dùng
          cái bụng khi bạn lên mạng, để biết để xem những dấu hiệu nhất định, và để
          nó giúp bạn biết khi có gì không ổn. Từ đầu tới chân, dừng lại, nghĩ về
          điều này. Từ chân lên đầu, dừng lại, hãy nghĩ về việc lên mạng!
      5:
        image: notes/C2_digital_footprint_5.png
        text: Vậy nên hãy suy nghĩ bằng đầu, và cảm nhận bằng trái tim, giữ cân bằng
          bằng tay, lắng nghe cái bụng khi lên mạng. Dùng đôi chân để chạy và đá,
          và để nhảy và bật nảy trên chiếc gậy nhún, và để nhảy đầy chuyên nghiệp,
          và để nhảy chân sáo với đôi tất bốc mùi. Dùng đôi chân khi bạn lên mạng,
          để đứng lên chống lại những kẻ xấu cư xử quá trớn, và nhớ hãy đứng thẳng,
          đối tốt với những người bạn nhỏ bé và tuyệt vời.
      6:
        image: notes/C2_digital_footprint_6.png
        text: Từ đầu tới chân, dừng lại, hãy nghĩ về điều này. Từ chân lên đầu, dừng
          lại và nghĩ về việc lên mạng! Vậy nên hãy suy nghĩ bằng đầu, và cảm nhận
          bằng trái tim, giữ cân bằng bằng tay, lắng nghe cái bụng, đứng thẳng bằng
          đôi chân của mình. Từ đầu đến chân, hãy dừng lại và nghĩ về điều này. Từ
          chân lên đầu, dừng lại, hãy nghĩ về việc lên mạng!
    C2_digital_footprint_v2:
      1:
        image: notes/C2_digital_footprint_v2_1.png
        text: Mỗi lần bạn lên mạng, bạn để lại 1 dấu chân mà có thể bị tìm kiếm, sao
          chép, chia sẻ, phát sóng và nó là vĩnh viễn. Bạn đang để lại loại dấu chân
          số nào? Bạn muốn để lại loại nào?
    C2_graph_paper:
      1:
        image: notes/C2_graph_paper_1.png
        text: Bài học này được gọi là "Lập trình sơ đồ giấy" và nó đề cập tới thuật
          toán. Hôm nay chúng ta sẽ học cách viết chương trình giúp tái tạo lại những
          hình ảnh đen trắng đơn giản, chỉ sử dụng các mũi tên vẽ bằng tay.
      2:
        image: notes/C2_graph_paper_2.png
        text: Một thuật toán là 1 danh sách các chỉ dẫn để hoàn thành 1 nhiệm vụ.
          Chúng ta sẽ tuân theo các chỉ dẫn này để làm 1 cái bát. Thuật toán thực
          sự hữu ích khi bạn cần người khác hiểu cách làm cái gì đó.
      3:
        image: notes/C2_graph_paper_3.png
        text: Nếu bạn đang viết 1 thuật toán cho máy tính, bạn phải chia ra thành
          các bước cực kì nhỏ. Vậy nên hoàn thành hàng này rồi tới hàng tiếp, rồi
          hàng tiếp theo nữa, và bạn sẽ thực hiện xong.
      4:
        image: notes/C2_graph_paper_4.png
        text: Tôi sử dụng thuật toán trong công việc của mình. Nếu tôi viết ra tất
          cả các bước tôi có thể tái tạo lại cùng 1 việc, hoặc tôi có thể dạy người
          khác làm việc đó. Đặt miếng kính vào trong lò, hợp nhất lại, tuân theo phần
          chỉ dẫn còn lại để làm 1 chiếc bát. Thuật toán cho bạn 1 bản đồ dẫn đường
          để hoàn thành việc gì đó.
    C2_artist_loops:
      1:
        image: notes/C2_artist_loops_1.png
        text: "Ở đây chúng ta sẽ sử dụng khối lệnh lặp lại để giúp ta tiết kiệm các
          bước khi lập trình nhân vật nghệ sỹ. Chúng ta đã có sẵn 1 vài khối lệnh
          trên sân khấu nhưng chúng chỉ để ta khởi động."
      2:
        image: notes/C2_artist_loops_2.png
        text: Để lặp những khối lệnh này 4 lần để vẽ cả hình vuông, chúng ta chỉ cần
          kéo khối lệnh lặp lại và đặt khối lệnh "di chuyển về phía trước và rẽ phải"
          trong khối lệnh "lặp lại". Khi chúng ta nhấn Chạy, nghệ sỹ sẽ lặp lại những
          bước này 4 lần để hoàn thành hình vuông.
    C2_bee_loops:
      1:
        image: notes/C2_bee_loops_1.png
        text: '"Vòng lặp" là sự lặp lại liên tục của hành động. Khi định quan sát
          1 tổ ong, tôi kéo 1 khung cầu ong ra xem, và sau đó lại đặt lại. Tôi lặp
          lại việc này nhiều lần. Việc "lặp đi lặp lại" như vậy gọi là Vòng lặp.'
      2:
        image: notes/C2_bee_loops_2.png
        text: Đây là khối lệnh lặp lại. Bất kì hành động nào bạn đặt vào khối lệnh
          sẽ lặp lại hành động đó theo số lần mà bạn yêu cầu. Ví dụ, trong cấp độ
          này, thay vì kéo lệnh "di chuyển về phía trước" và lấy mật 3 lần, chúng
          ta sẽ chỉ cần kéo lệnh 1 lần và nhắc lại hành động đó 3 lần. Thật dễ dàng!
    C2_maze_intro:
      1:
        image: notes/C2_maze_intro_1.png
        text: Thông thường, lập trình là dưới dạng văn bản nhưng chúng ta sẽ sử dụng
          Blockly tức là sử dụng các hình lệnh mà bạn kéo và thả để viết các chương
          trình. Dưới lớp hình, thực ra bạn vẫn đang tạo câu lệnh. Để khởi động, chúng
          ta sẽ xây dựng câu lệnh cho chương trình mà giúp nhân vật Angry Bird này
          di chuyển qua một mê cung để đến được chỗ những con lợn độc ác đã ăn cắp
          trứng của nó.
      2:
        image: notes/C2_maze_intro_2.png
        text: Blockly được chia thành 3 phần chính. Bên trái là mê cung của chú chim,
          nơi chương trình của bạn sẽ chạy. Các chỉ dẫn cho mỗi cấp độ được viết bên
          dưới mê cung. Khu vực ở giữa là hộp công cụ và mỗi 1 khối lệnh này là 1
          mệnh lệnh mà chú chim có thể hiểu được. Khu vực trống ở bên phải được gọi
          là không gian làm việc và đây là nơi chúng ta sẽ xây dựng chương trình.
      3:
        image: notes/C2_maze_intro_3.png
        text: Nếu tôi kéo khối lệnh Di chuyển tới không gian làm việc và nhấn "Chạy",
          điều gì sẽ xảy ra? Chú chim tiến về phía trước 1 ô trong khung. Và nếu tôi
          muốn chú chim làm gì khác sau khi tiến lên 1 ô? Tôi có thể thêm khối lệnh
          khác vào chương trình.
      4:
        image: notes/C2_maze_intro_4.png
        text: Tôi sẽ chọn khối lệnh "rẽ phải" và tôi sẽ kéo nó đặt xuống dưới khối
          lệnh di chuyển sao cho mũi tên màu vàng xuất hiện. Sau đó tôi thả lệnh và
          2 khối lệnh sẽ chập lại với nhau. Khi tôi nhấn "Chạy", chú chim sẽ thực
          hiện lần lượt các lệnh được xếp từ trên xuống dưới trong không gian làm
          việc.
      5:
        image: notes/C2_maze_intro_5.png
        text: Nếu bạn muốn xoá 1 khối lệnh, chỉ cần bỏ nó khỏi ngăn xếp và kéo đến
          thùng rác. Sau khi đã nhấn chạy, bạn vẫn có thể nhấn nút "Thiết lập lại"
          để chú chim trở lại điểm khởi đầu. Bây giờ hãy đi bắt những con lợn xấu
          xa!
    C2_paper_airplanes:
      1:
        image: notes/C2_paper_airplanes_1.png
        text: Bài học này được gọi là Thuật toán Đời thực. Thuật toán miêu tả những
          gì con người làm hàng ngày. Công thức làm bánh quy và hướng dẫn xây dựng
          nhà cho chim đều là những thuật toán hàng ngày.
      2:
        image: notes/C2_paper_airplanes_2.png
        text: Hôm nay chúng ta sẽ sáng tạo ra và kiểm tra 1 thuật toán của máy bay
          giấy. Nhưng trước hết, chúng ta cần chia kế hoạch lớn này thành các bước
          nhỏ dễ làm theo. Để tạo ra 1 chiếc máy bay giấy, chúng ta cần quyết định
          các bước và thứ tự tiến hành các bước đó.
      3:
        image: notes/C2_paper_airplanes_3.png
        text: Bạn sẽ tạo ra thuật toán trước hết bằng việc cắt nhỏ các bức tranh.
          Tiếp theo, bạn sẽ chọn 6 bức tranh mà chỉ ra các bước cần thiết để tạo 1
          chiếc máy bay giấy và sắp xếp các bức tranh này theo thứ tự đúng. Sau khi
          có tất cả mọi thứ theo thứ tự, bạn sẽ trao đổi thuạt toán với nhóm học sinh
          khác để kiểm tra xem thuật toán có hoạt động không. Một thuật toán được
          thiết kế tốt là rất quan trọng để tạo ra chiếc máy bay tốt nhất.
      4:
        image: notes/C2_paper_airplanes_4.png
        text: Khi chúng ta muốn làm sô cô la, có rất nhiều bước lớn trong quá trình
          đó. Và mỗi bước lớn lại chứa tập hợp các bước nhỏ hơn. Và có rất nhiều công
          thức hay thuật toán khác nhau, tuỳ thuộc vào việc chúng ta muốn sô cô la
          có vị như thế nào. Mỗi bước đều quan trọng, thậm chí là các bước nhỏ. Vậy
          nên thiếu 1 bước thì các bước còn lại không thể hoàn thành. Tạo ra thuật
          toán mà người khác có thể hiểu được là rất quan trọng. Đó là lí do mỗi thuật
          toán đều phải được viết ra, để dù cho là ai làm, thì kết quả cũng không
          đổi.
    C2_playlab_createstory:
      1:
        image: notes/C2_playlab_createastory_1.png
        text: So far you've been making an animation or a story that does the exact
          same thing every time you run it. Now you can make an interactive game that
          you can actually play.
      2:
        image: notes/C2_playlab_createastory_2.png
        text: There are some new blocks to try out. There's the "when arrow" block
          and the "move actor" block. You can put these blocks together to move the
          actors around with the arrow keys. And there are some blocks that do stuff
          when actors collide or are clicked. Check them out and have fun!
    C2_relay_programming:
      1:
        image: notes/C2_relay_programming_1.png
        text: Hôm nay chúng ta sẽ thực hiện lập trình tiếp sức. Nó đề cập đến việc
          lập trình dưới áp lực và gỡ các lỗi thi thoảng xảy ra khi bạn làm việc rất
          nhanh hoặc làm trong nhóm. Chúng ta sử dụng lập trình sơ đồ trên giấy để
          mô phỏng việc mã hoá, và sử dụng đường chạy tiếp sức để mô phỏng việc có
          hạn chót.
      2:
        image: notes/C2_relay_programming_2.png
        text: Trong lập trình tiếp sức, các đôi sẽ cùng đua để hoàn thành 1 chương
          trình sơ đồ trên giấy. Bạn sẽ phải kiểm tra công việc của đồng đội, hoặc
          gỡ lỗi, sửa chữa nếu có lỗi, thêm mũi tên, và chạy trở lại và chạm vào đồng
          đội.
      3:
        image: notes/C2_relay_programming_3.png
        text: Các nhà lập trình sử dụng việc gỡ lỗi rất nhiều để tìm và sửa chữa các
          thuật toán hoặc mã. Có rất nhiều cách để gỡ lỗi các vấn đề. 1 trong những
          cách dễ nhất là di chuyển từng bước một cho đến khi bạn thấy có chỗ sai,
          sau đó chữa nó.
      4:
        image: notes/C2_relay_programming_4.png
        text: "Ở đây tôi đang cố thực hiện động tác lộn sau chống tay, nhưng tôi cứ
          bị thất bại. Tôi kiểm tra lại từng bước một, và nhận ra lỗi của mình ở đâu.
          Huấn luyện viên chỉ ra rằng tôi đang không đặt tay trên xà đúng cách. Vì
          vậy tôi thử làm lại với vị trí tay đã sửa và tôi đã thành công! Tôi thực
          sự rất vui vì đã gỡ được lỗi động tác lộn sau chống tay. Chúng ta đã tìm
          ra cách! Gỡ lỗi là tìm ra và sửa chữa các vấn đề. Làm tốt lắm!"
    C2_zuck_repeat_loop:
      1:
        image: notes/C2_zuck_repeat_loop_1.png
        text: One thing that computers are really good at is repeating commands. As
          a person, you'd get really bored if you had to do the same thing lots of
          times in a row. But a computer can do the same thing millions or even billions
          of times, and not get bored and be able to carry that out really well.
      2:
        image: notes/C2_zuck_repeat_loop_2.png
        text: So for example if I wanted to wish everyone on Facebook a happy birthday
          by sending them an email, it might take me more than a century to actually
          write out all of those emails to everyone. But with just a few lines of
          code, I can have a system send an email to everyone on Facebook wishing
          them a happy birthday. So that's what loops are, and why they're valuable,
          and something that computers can do very well.
      3:
        image: notes/C2_zuck_repeat_loop_3.png
        text: In this example your goal is going to be to move the bird to get the
          pig.  Now we're gonna be able to use the "repeat" block in order to be able
          to do this very easily. You can either do this by giving the computer a
          "move forward" command five times in order to advance the bird one step
          each time to the pig.
      4:
        image: notes/C2_zuck_repeat_loop_4.png
        text: Or you can just tell the computer to "move forward" once, and then tell
          it to "repeat" that 5 times, and it will do the same thing. So in order
          to do this you drag your "move forward" command, and then you put it inside
          the "repeat" block.And you can click on it and tell it how many times you
          want to repeat the block to tell it how many steps you want it to take forward.
      5:
        image: notes/C2_zuck_repeat_loop_5.png
        text: Now one more thing is you can put as many commands as you want inside
          the "repeat" block. So in this example you're telling it to move forward
          and turn left, which it will do five times. All right good job and have
          fun!
    C3_artist_functions:
      1:
        image: notes/C3_artist_functions_1.png
        text: One of the great things in computer programming is once you've taught
          a computer how to do an action, you can call that function again. You give
          it a name and then you can call it. That's really like extending the language.
      2:
        image: notes/C3_artist_functions_2.png
        text: In the program we built, we learned how to draw a square by moving and
          turning four times. We can take that function and give it a name, draw a
          square, so that any time we want to do that, we simply say draw a square
          and it will go back and invoke that function, that code. It will get done
          for us. We've added that concept to our programming language.
    C3_artist_intro:
      1:
        image: notes/C3_artist_intro_1.png
        text: Bạn thậm chí không đủ tiêu chuẩn cho cuộc đua nếu bạn không có những
          người thành thạo trong khoa học máy tính vì số dữ liệu mà các xe phải thu
          thập và sự cần thiết của việc có những người có thể viết chương trình để
          tìm ra cách bạn tiếp tục xây dựng giao thức.
      2:
        image: notes/C3_artist_intro_2.png
        text: Trong các trò chơi này, bạn sẽ là một nghệ sỹ sử dụng bút chì để vẽ
          các hình dạng khác nhau. Nghệ sỹ của bạn đi đâu, nó sẽ vẽ 1 đường thẳng
          ở phía sau.
      3:
        image: notes/C3_artist_intro_3.png
        text: "Để di chuyển xung quanh bức vẽ, bạn sẽ sử dụng khối lệnh di chuyển
          về phía trước. Đây là khối lệnh nói di chuyển về phía trước 100 điểm ảnh.
          Khi chúng ta nhấn chạy, điều gì sẽ xảy ra? Nghệ sỹ di chuyển 1 số bước nhất
          định là 100 điểm ảnh. Điểm ảnh cơ bản là những hình vuông rất nhỏ trên màn
          hình máy tính của bạn."
      4:
        image: notes/C3_artist_intro_4.png
        text: Khối lệnh khác chúng ta có trong trò chơi này nói "qua phải 1 góc 90
          độ". Và khi chúng ta kéo khối lệnh sẽ khiến nghệ sỹ của chúng ta quay 1
          góc nhất định. Vì vậy bạn có thể chơi và điều khiển nghệ sỹ quay theo ý
          muốn. Đây là một góc quay 90 độ.
      5:
        image: notes/C3_artist_intro_5.png
        text: Và đây là một góc quay 120 độ. Và nhớ là, bạn có thể thay đổi những
          giá trị này bằng cách nhấp vào các mũi tên bên cạnh các chỉ điểm ảnh hoặc
          độ. Hãy tận hưởng trò chơi!
    C3_artist_nested_loops:
      1:
        image: notes/C3_artist_nested_loops_1.png
        text: When you put a loop inside of another loop, we call that a nested loop.
          For example, here we're given the code already to draw one triangle with
          sides of length 100 pixels using the repeat times block set to three, once
          for each side of a triangle.
      2:
        image: notes/C3_artist_nested_loops_2.png
        text: But we want to draw six triangles. In order to do that, we're going
          to take that loop and place it inside of another repeat times block. Pretty
          cool!
    C3_bee_conditionals:
      1:
        image: notes/C3_bee_conditionals_1.png
        text: "Đây là khối lệnh câu điều kiện. Nó nói rằng NẾU mật hoa hoặc mật ong
          ít hơn hoặc bằng hoặc lớn hơn 1 số nào đó, THÌ làm điều gì đó."
      2:
        image: notes/C3_bee_conditionals_2.png
        text: "Điều này hữu ích khi chúng ta không biết cần lấy bao nhiêu mật hoa
          hoặc mật ong, như chúng ta thấy ở đây với dấu hỏi này."
      3:
        image: notes/C3_bee_conditionals_3.png
        text: Trong ví dụ này, chúng ta sẽ nói NẾU bông hoa đỏ có số mật hoa lớn hơn
          0, lấy mật hoa. Nó sẽ khiến con ong lấy mật hoa với điều kiện là con ong
          ở chỗ bông hoa. Và đây!
    C3_bee_debugging:
      1:
        image: notes/C3_debugging_bee_1.png
        text: Bạn đã bao giờ nghe đến việc gỡ lỗi 1 chương trình? Đây là cách bạn
          tìm ra những gì không hoạt động. Khi bạn gỡ lỗi lập trình, bạn xác định
          và loại bỏ các lỗi sai.
      2:
        image: notes/C3_debugging_bee_2.png
        text: Ở đây chúng ta được cho sẵn 1 vài khối lệnh trong không gian làm việc.
          Chúng ta sẽ sử dụng nút "Bước" để đi qua từng khối lệnh 1, xem liệu đây
          đã là phương pháp đúng chưa và chỗ nào chúng ta cần sửa chữa.
      3:
        image: notes/C3_debugging_bee_3.png
        text: Có vẻ như đây là vấn đề rồi! Chúng ta cần thêm 1 khối lệnh tiến về phía
          trước nữa. Nút "Bước" giúp chúng ta gỡ lỗi bằng cách xác định lỗi sai ở
          đâu vì thế chúng ta có thể sửa chữa nó.
    C3_bee_functions:
      1:
        image: notes/C3_bee_functions_1.png
        text: One of the most important concepts in computer science is how to define
          new commands, how to add your own words to a computer language. Most computer
          languages have only about one hundred words or commands. The art and magic
          is in defining your own new words out of these building blocks.
      2:
        image: notes/C3_bee_functions_2.png
        text: We do this all the time in sports. For example, in basketball, you start
          by learning how to dribble, how to do a lay-up, how to rebound. Once you've
          learned these really basic moves, you learn new moves and put together these
          building blocks, like a pick and roll or give and go. You can then go from
          there to do more complex plays. Once you learn that play and give it a name,
          everybody on the team knows how to do it.
      3:
        image: notes/C3_bee_functions_3.png
        text: Similarly once you've taught a computer how to do an action once using
          these sequences of commands, you can make up your own name for that action
          so it's easy to repeat it later. When you define your own command and give
          it a name, that's called a function. Now we're going to use functions to
          help the bee.
      4:
        image: notes/C3_bee_functions_4.png
        text: In this example, our function is called get 2 nectar, this green block
          right here. We know what get 2 nectar does by looking at this grey box which
          is the function definition. If we look inside there, the get 2 nectar is
          going to get nectar and then get nectar again. Always look at what's inside
          the grey box so that you know what these green function blocks can do.
    C3_bee_nested_loops:
      1:
        image: notes/C3_bee_nested_loops_1.png
        text: Now we're going to use nested loops with the bee. We're given some starter
          code which tells the bee to move forward and get nectar three times and
          then turn right. Let's take that whole piece of code and nest it inside
          another repeat block and set to repeat three times. Done!
    C3_bounce:
      1:
        image: notes/C3_bounce_1.png
        text: You're going to be creating your very own bounce game that you'll be
          able to share with your friends! How cool!
      2:
        image: notes/C3_bounce_2.png
        text: To get started, we have to link up the paddle controls to the arrow
          keys on our keyboard.
      3:
        image: notes/C3_bounce_3.png
        text: We can do this by linking the when left arrow block to the move left
          block and the when right arrow block to the move right block. Give it a
          go and you'll be programming your own bounce game in no time!
    C3_computational_thinking:
      1:
        image: notes/C3_computational_thinking_1.png
        text: This lesson is computational thinking. Sometimes learning a new game
          can be tough, right? At first it might seem really confusing and sometimes,
          there's no one there to teach you the rules, so you have to figure it out
          on your own.
      2:
        image: notes/C3_computational_thinking_2.png
        text: The good news is that you can get better at figuring things out on your
          own when you know a few thinking tricks. These tricks are unique ways for
          looking at and solving problems. In this lesson, you'll learn about four
          tricks and practice them with your friends to figure out the rules to a
          game.
      3:
        image: notes/C3_computational_thinking_3.png
        text: When you break down a big problem into smaller pieces, you're using
          your brain to decompose the big problem. Once we've decomposed the big problem
          into several smaller problems, we can go on to our next trick, which is
          called pattern match.
      4:
        image: notes/C3_computational_thinking_4.png
        text: That's when we look for similarities between things. Once I find the
          things that are the same, I can figure out what things are different. When
          I remove those differences, that's called abstraction.
      5:
        image: notes/C3_computational_thinking_5.png
        text: After I have figured out the steps to solving a problem, I can put those
          steps in a specific order called an algorithm so that anyone can use my
          directions to solve that problem. We're going to use these four steps to
          figure out how to play the game with no rules. By the end of the game, you'll
          be able to play something that looks like this!
    C3_crowdsourcing:
      1:
        image: notes/C3_crowdsourcing_1.png
        text: This lesson is called crowdsourcing. In this lesson we'll use a deck
          of cards to learn about how much easier some things can be to do in groups
          instead of trying to do them all alone. So grab some friends and make something
          awesome. Crowdsourcing is getting help from a large group of people to finish
          something faster.
      2:
        image: notes/C3_crowdsourcing_2.png
        text: In computer science, we use crowdsourcing all the time. Thousands of
          amateurs and professionals link their computers together to search through
          billions and billions of pieces of information. Looking for things like
          the next Marsenne prime number, or even possible alien communications.
      3:
        image: notes/C3_crowdsourcing_3.png
        text: When you see a movie, each second of the movie is 24 individual pictures,
          we call those frames. So every one of those pictures needs to be created
          and rendered and put all together. My team and I, we're all software developers.
          We all work together to create a piece of software that actually creates
          an image, creates the final image that you see on screen. That's a tool
          that artists and other developers can use as part of their teamwork and
          their process to be able to create the images that they want on screen.
      4:
        image: notes/C3_crowdsourcing_4.png
        text: For example, in Finding Nemo, when Crush and Squirt and all their friends
          are flying through the East Australian Current. You're seeing images of
          water flowing by, you're seeing the colors on the back of the turtle, you're
          seeing the sides of the fish. All of those things are generated through
          math and computer programs that we write, that we then give to the artist
          and they take that to create that final image and tweak it and make it look
          beautiful and look fun.
    C3_dice_race:
      1:
        image: notes/C3_dice_race_1.png
        text: This lesson is called dice race. Almost everyone likes to play computer
          games. Have you ever thought about how computer programmers turn the steps
          of a game into a program? The first step in creating computer games and
          in solving any problem requires thinking and planning.
      2:
        image: notes/C3_dice_race_2.png
        text: The thinking step of problem solving produces an algorithm, which is
          a step by step plan for solving a problem or finishing a task. In this lesson,
          you'll create an algorithm for a dice race game. Then you'll ask your friends
          to try out your plan to see if they can follow the steps to play the game.
          After the programmer is sure the steps are correct, it's time to translate
          the algorithm into a program with language that the computer can understand.
      3:
        image: notes/C3_dice_race_3.png
        text: Almost everything we do every day requires an algorithm, a list of steps
          you can follow to finish a task. Think about getting ready for school or
          planning a fun day with your friends or fixing a snack. To complete any
          of those tasks, you'll need to break it down into smaller steps and sometimes
          the steps must be in a specific order.
      4:
        image: notes/C3_dice_race_4.png
        text: Think about making a sandwich. It doesn't matter which ingredient you
          get out of the cabinet first. But you can't spread the peanut butter until
          you open the jar. Computers need algorithms and programs to show them how
          to do even simple things that we can do without thinking about it.
      5:
        image: notes/C3_dice_race_5.png
        text: An algorithm is the thinking behind what needs to happen while the program
          is the actual instructions given to the computer to make it happen. An algorithm
          has to be translated into a program before a computer can run it. Breaking
          a task into steps called an algorithm is sometimes difficult. But like any
          new skill, it gets easier and easier with practice.
    C3_farmer_while:
      1:
        image: notes/C3_farmer_while_1.png
        text: While loops are pretty similar to what you do in everyday life. Imagine
          you are washing your car, you'll keep scrubbing until it's clean. While
          it's not clean, continue to scrub. You're evaluating these things all the
          time.
      2:
        image: notes/C3_farmer_while_2.png
        text: We've got a new look to help your farmer out. It's called a while-block.
          It's pretty simple actually. While a statement at the top is true, do something.
          For example, while there's a pile move one hayful. Go ahead and give it
          a try with your farmer.
    C3_functional_suncatchers:
      1:
        image: notes/C3_functional_suncatchers_1.png
        text: This lesson is functional suncatchers. You'll be creating these pretty
          suncatchers using functions. There are several steps in creating one of
          these suncatchers. Some of the steps you have to repeat many times.
      2:
        image: notes/C3_functional_suncatchers_2.png
        text: The first step in simplifying the process of making a suncatcher is
          figure out what we have to repeat over and over again. We can group these
          steps into what we call a function.
      3:
        image: notes/C3_functional_suncatchers_3.png
        text: But there is more to creating a beautiful suncatcher than following
          precise steps. Sometimes we want to be creative and change the color of
          the beads we're using. We can make every suncatcher unique if we use different
          colored beads.
      4:
        image: notes/C3_functional_suncatchers_4.png
        text: Your suncatcher will be uniquely yours when you learn to think of the
          beads as variables which is a word that means a placeholder for information
          that can change. Have fun creating beautiful suncatchers using functions
          and variables!
    C3_internet:
      1:
        image: notes/C3_internet_1.png
        text: This lesson is all about the internet. The internet is a very busy place
          and similar to this busy road. Messages like cars are zooming along to get
          to their destinations. Messages move through the internet very quickly.
      2:
        image: notes/C3_internet_2.png
        text: Acting out how the internet works will help you understand what's happening
          when you use the internet. You'll learn how messages get from your computer
          to a favorite website or from a friend to an email inbox. Just like it's
          easier to navigate busy roads when you know the roads and can read the signs,
          traveling the internet is not so complicated when you know what goes on
          behind the scenes.
      3:
        image: notes/C3_internet_3.png
        text: Sending messages on the internet is a little bit like sending messages
          in the mail but with a few differences. I'm here at Google.com. The IP address
          for this website is this number. You can think of an IP address as your
          return address in the mail. Let's imagine that I want to send a message
          in the mail to someone in the office down the there. Do you see URL and
          the IP address on that door? I've written this message and hit send.
      4:
        image: notes/C3_internet_4.png
        text: Unlike the Postal Service, the first thing that happens is that the
          internet breaks the message into smaller parts so it can be sent more easily.
          These small parts are called packets. Each packet of the message is delivered
          to the destination one at a time. These packets are all put together in
          the right order so that the receiver can read the message correctly. Of
          course, there are many more things to learn about how the internet works
          but this is a great start. You're on your way to becoming a savvy internet
          user! Be sure to tell your family and friends what you've learned!
      5:
        image: notes/C3_internet_5.png
        text: My name is Amanda Camp and I'm a software engineer at Google. I work
          on a team that works on a backend server that stores profiles and contacts.
          In my job, we think a lot about how contacts can be sent to other devices,
          such as your phone. Most people have a lot of contacts, you might have say,
          1000 contacts and we don't want to send all of those contacts at once to
          your phone because it's too large of a message. Similar to the way the internet
          breaks large messages down into packets, we use a concept called paging
          where we might only send your phone 100 contacts at a time and let your
          phone respond to us and ask for the next 100.
      6:
        image: notes/C3_internet_6.png
        text: The most exciting thing about software is the fact that it can impact
          the entire world. I first learned to program when I was about nineteen.
          I think I was already a sophomore or a junior in college. The first program
          I remember writing is something that converted Celsius to Fahrenheit. I
          like programming because I like helping people. I can write programs at
          Google that help people all over the world and that's really mind-boggling
          and exciting.
    C3_maze_conditionals:
      1:
        image: notes/C3_maze_conditionals_1.png
        text: People make decisions everyday. For example, before you go outside,
          you have an if statement that says if it's raining, then I need to get my
          jacket. Computers are amazing once you decide those kinds of statements
          that they can reliably execute those things and unbelievable speed. A computer
          program really is a little bit of math and some if statements where the
          decision gets made.
      2:
        image: notes/C3_maze_conditionals_2.png
        text: The if block helps the zombie make a decision. It checks something.
          For example, let's use the block that says if there's a path to the left,
          and put a turn left command inside it. We're telling the zombie to check
          its surroundings, see if there's a path on the left and if so, make that
          turn.
      3:
        image: notes/C3_maze_conditionals_3.png
        text: Then we use the move forward block inside this repeat to get it to keep
          moving forward as long as it just wants to go straight. Then when there's
          a turn, the if block will tell it to make that turn to the left. You can
          see that if we do that, if we take the turn to the left and otherwise moving
          forward, we'll achieve our goal.
      4:
        image: notes/C3_maze_conditionals_4.png
        text: It's an example of using an if statement which is really a fundamental
          concept in computer programming. One of the first things I learned was how
          to write a program that played tic-tac-toe. I had if statements to say,
          ok, if the other person is about to win, go ahead and block that spot. Have
          fun learning how to use if statements, it's a key concept.
    C3_maze_level_4:
      1:
        image: notes/C3_maze_level_4_1.png
        text: In this example, your goal is to get zombie to the sunflower. We could
          use five move forward blocks or we could tell the computer to move forward
          and repeat five times using the one repeat block.
      2:
        image: notes/C3_maze_level_4_2.png
        text: This saves time and makes it way easier. To use it, just put the move
          forward block inside the repeat block. Hit run and the zombie will move
          forward five times to the yummy sunflower.
    C3_playlab_create_game:
      1:
        image: notes/playlab_1.png
        text: So far you've been making an animation or a story that does the exact
          same thing every time you run it. Now you can make an interactive game that
          you can actually play.
      2:
        image: notes/playlab_2.png
        text: There's the "when arrow" block and the "move actor" block. You can put
          these blocks together to move the actors around with the arrow keys.
    C3_songwriting_with_parameters:
      1:
        image: notes/C3_songwriting_with_parameters_1.png
        text: This is the song writing lesson. Music is a lot like a computer program.
          The written notes and words tell the singer exactly what to do. Some parts
          of music are used over and over again.
      2:
        image: notes/C3_songwriting_with_parameters_2.png
        text: We call this the chorus. In a computer program, the parts of the program
          that are used over and over again are called functions. When you read song
          lyrics and it says the word chorus, do you sing the word chorus? No, you
          look at the top of the page to see what words make up the chorus.
      3:
        image: notes/C3_songwriting_with_parameters_3.png
        text: In this lesson, you'll learn a silly little song called little bunny
          foo foo. The song has a chorus that you will sing several times over and
          over again. A function is a piece of code that you can call and use over
          and over again. It makes programming easier and more efficient so you don't
          have to write out the steps of your function over and over again. You can
          just write it once!
    C4_bee_conditional:
      1:
        image: notes/C4_bee_conditional_1.png
        text: This is the conditional block. It says if you're at the flower or the
          honeycomb, then do something. This is useful when we don't know how much
          honey or nectar to get as we see here with this question mark.
      2:
        image: notes/C4_bee_conditional_2.png
        text: In this example, we're going to say, if it's a flower, get all the nectar
          and then use another one to say, if it's a honeycomb, make honey. Ta-dah!
    C4_conditionals:
      1:
        image: notes/C4_conditionals_1.png
        text: We have a new block that's called the if/else block. It's a conditional
          statement just like the if block you've used in the puzzles before. But
          now there's a new part at the bottom that says else. The if/else block lets
          the bee make a decision between two sets of actions. If the bee is at a
          flower, the bee will do the set of actions you put in the first part where
          it says do. If the bee is not at a flower, the bee will do the set of actions
          you put in the slot where it says else.
      2:
        image: notes/C4_conditionals_2.png
        text: If statements are how computers are able to make decisions. Humans set
          up conditions for the computer that say if the computer is presented with
          a certain situation do this. Else, which just means otherwise, do that.
          The top of our if/else block says if at flower. But the top of our block
          could say other things, like if nectar equals 2 or if there's a path ahead,
          our block will behave in the same way. That if the statement at the top
          is true it will do the first set of actions. But if the statement at the
          top is false, it will do the second set of actions.
    C4_for_loops:
      1:
        image: notes/C4_for_loops_1.png
        text: When you use a repeat block to loop your code, how does the computer
          know when it's repeated enough times? The repeat block is actually hiding
          a more sophisticated piece of code called a for loop which counts from a
          starting value up to an ending value by a specific increment.
      2:
        image: notes/C4_for_loops_2.png
        text: For example, a repeat three block counts from 1 to 3 by 1. Every time
          it counts, it runs the code inside the loop. The for loop knows how many
          times it has run by using a counter variable which is set to the starting
          value at the beginning of the loop and has the increment added to it each
          time the loop is run. As soon as the counter variable is greater than the
          ending value, the loop stops running.
      3:
        image: notes/C4_for_loops_3.png
        text: The benefit of using a real for loop instead of the repeat block is
          that you can actually see the counter variable and use it in your loop.
          For example, if I have a series of flowers and the first one has one nectar,
          the second one has two nectars and the third one has three, I can use the
          for loop to tell the bee to collect 'counter' nectars each time, which would
          one at the first flower, two at the second and three at the third.
      4:
        image: notes/C4_for_loops_4.png
        text: Also in a for loop, you can increment the counter by a number other
          than one each time. You can potentially count by 2s, 4s or even an amount
          that changes every time through.
    C4_for_loops_bee:
      1:
        image: notes/C4_for_loops_bee_1.png
        text: When you use a repeat block to loop your code, how does the computer
          know when it's repeated enough times? The repeat block is actually hiding
          a more sophisticated piece of code called a for loop which counts from a
          starting value up to an ending value by a specific increment.
      2:
        image: notes/C4_for_loops_bee_2.png
        text: For example, a repeat three block counts from 1 to 3 by 1. Every time
          it counts, it runs the code inside the loop. The for loop knows how many
          times it has run by using a counter variable which is set to the starting
          value at the beginning of the loop and has the increment added to it each
          time the loop is run. As soon as the counter variable is greater than the
          ending value, the loop stops running.
      3:
        image: notes/C4_for_loops_bee_3.png
        text: The benefit of using a real for loop instead of the repeat block is
          that you can actually see the counter variable and use it in your loop.
          For example, if I have a series of flowers and the first one has one nectar,
          the second one has two nectars and the third one has three, I can use the
          for loop to tell the bee to collect 'counter' nectars each time, which would
          one at the first flower, two at the second and three at the third.
      4:
        image: notes/C4_for_loops_bee_4.png
        text: Also in a for loop, you can increment the counter by a number other
          than one each time. You can potentially count by 2s, 4s or even an amount
          that changes every time through.
    C4_for_loops_no_bee:
      1:
        image: notes/C4_for_loops_no_bee_1.png
        text: When you use a repeat block to loop your code, how does the computer
          know when it's repeated enough times? The repeat block is actually hiding
          a more sophisticated piece of code called a for loop which counts from a
          starting value up to an ending value by a specific increment.
      2:
        image: notes/C4_for_loops_no_bee_2.png
        text: For example, a repeat three block counts from 1 to 3 by 1. Every time
          it counts, it runs the code inside the loop. The for loop knows how many
          times it has run by using a counter variable which is set to the starting
          value at the beginning of the loop and has the increment added to it each
          time the loop is run. As soon as the counter variable is greater than the
          ending value, the loop stops running. The benefit of using a real for loop
          instead of the repeat block is that you can actually see the counter variable
          and use it in your loop.
    C4_function_create:
      1:
        image: notes/C4_function_create_1.png
        text: Now that you've edited function blocks, it's time to create a new function
          block from scratch. It's really simple. You'll see the toolbox has a category
          called functions. If you click on this, you'll see an orange button called
          create a function. Clicking on this brings up the function editor that you've
          already used to edit existing function blocks.
      2:
        image: notes/C4_function_create_2.png
        text: Just like before, you started by naming your function, writing down
          a description for what the function is supposed to do. For instance, it's
          supposed to draw a square or draw a triangle and then drag blocks from the
          toolbox into the white work space below. Remember to drag these blocks inside
          the green wrapping block for the function.
      3:
        image: notes/C4_function_create_3.png
        text: Once you're done, click on save and exit. This will take you back to
          the main puzzle work space. The new function you created will show up as
          a green block in the function category in your toolbox. Drag and drop this
          into the main work space and use it like any other block to solve the puzzle.
    C4_function_edit:
      1:
        image: notes/C4_function_edit_1.png
        text: One of the great things in computer programming is once you've taught
          a computer how to do an action, you can call that function again. You give
          it a name and then you can call it. That's really like extending the language.
      2:
        image: notes/C4_function_edit_2.png
        text: In the program we built, we learned how to draw a square by moving and
          turning four times. We can take that function and give it a name, draw a
          square so that any time we want to do that, we simply say draw a square
          and it will go back and invoke that function, that code and it will get
          done for us. We've added that concept to our programming language.
      3:
        image: notes/C4_function_edit_3.png
        text: In this puzzle, we have already created a draw a square function for
          you. You'll see it in the toolbox as a green block. What you'll need to
          do is write the same code you wrote before to draw a square and put it in
          this function. To do that, click on the edit option in the green draw a
          square block. This will open up the function editor. The function editor
          has three parts. A place where you name your function. This will appear
          on the green block before that function. Then write out a short description
          of what your function is supposed to do.
      4:
        image: notes/C4_function_edit_4.png
        text: In this case, it's supposed to draw a square. The white space below
          this is the work space and works just like the work space you've already
          been using. Drag and drop blocks from the toolbox into this work space.
          Remember to put the blocks that create a square inside the green wrapping
          block for the function. Once you're done, click on save and exit. This will
          take you back to the main puzzle work space. Now you can use the draw the
          square function block just like any other block to solve the puzzle.
    C4_function_parameters:
      1:
        image: notes/C4_function_parameters_1.png
        text: Here's a function that draws a square with 50 pixel sides. That's great
          but what if I wanted to draw a square with sides 50 pixels and another square
          with sides of 100 pixels? We shouldn't have to make two separate functions
          that do almost the same thing. Instead, we can use one function with a parameter.
      2:
        image: notes/C4_function_parameters_2.png
        text: Parameters allow us to pass values into a function that get used as
          variables inside the function. Let's try adding a parameter called like
          to this function so we can use it to create squares of different sizes.
          In the function editor, you can edit the name and description like before
          but now you can also add a parameter. Write the name of your parameter in
          the space and click Add Parameter. This will create a red block with the
          name of the parameter you just created. Now we can replace the move forward
          by 100 block with the parameter Length so it will move forward by Length.
      3:
        image: notes/C4_function_parameters_3.png
        text: Click save and close and drag out your new create a square block from
          the functions category in the toolbox. You'll notice there's an empty space
          next to length because the function wants to know what value the parameter
          Length should have. Drag a number block from the Math category and place
          it in this space. See how you can use the function again and again with
          different lengths to make squares of different sizes? Try it for yourself!
    C4_intro:
      1:
        image: notes/C4_intro_1.png
        text: Thông thường, lập trình là dưới dạng văn bản nhưng chúng ta sẽ sử dụng
          Blockly tức là sử dụng các hình lệnh mà bạn kéo và thả để viết các chương
          trình. Dưới lớp hình, thực ra bạn vẫn đang tạo câu lệnh. Để khởi động, chúng
          ta sẽ xây dựng câu lệnh cho chương trình mà giúp nhân vật Angry Bird này
          di chuyển qua một mê cung để đến được chỗ những con lợn độc ác đã ăn cắp
          trứng của nó.
      2:
        image: notes/C4_intro_2.png
        text: Blockly được chia thành 3 phần chính. Bên trái là mê cung của chú chim,
          nơi chương trình của bạn sẽ chạy. Các chỉ dẫn cho mỗi cấp độ được viết bên
          dưới mê cung. Khu vực ở giữa là hộp công cụ và mỗi 1 khối lệnh này là 1
          mệnh lệnh mà chú chim có thể hiểu được. Khu vực trống ở bên phải được gọi
          là không gian làm việc và đây là nơi chúng ta sẽ xây dựng chương trình.
      3:
        image: notes/C4_intro_3.png
        text: If I drag the move block to our work space and press "run", what happens?
          The bird moves forward one box on the grid. And what if I want the bird
          to do something after it moves forward one box? I can add another block
          to our program.
      4:
        image: notes/C4_intro_4.png
        text: I'm going to choose the "turn right" block and I'll drag it under my
          move block until the yellow arrow appears. Then I'll drop it and the two
          blocks will snap together. When I press "run" again,  the bird will perform
          the commands that are stacked from top to bottom on our work space.
      5:
        image: notes/C4_intro_5.png
        text: Nếu bạn muốn xoá 1 khối lệnh, chỉ cần bỏ nó khỏi ngăn xếp và kéo đến
          thùng rác. Sau khi đã nhấn chạy, bạn vẫn có thể nhấn nút "Thiết lập lại"
          để chú chim trở lại điểm khởi đầu. Bây giờ hãy đi bắt những con lợn xấu
          xa!
    C4_math_artist:
      1:
        image: notes/C4_math_artist_1.png
        text: If I want to draw a rectangle 50 pixels tall and that is twice as wide
          as it is tall, how would I program the computer to do that? Well, I could
          tell the artist to go up fifty, turn right, and then go over 100 and move
          the whole thing twice. But then I'm doing the math for the computer.
      2:
        image: notes/C4_math_artist_2.png
        text: Multiplying fifty by two in your head may not that hard but computers
          are really good at doing math so we should leave it to them whenever possible.
          If I just used a variable called height instead, then I could easily change
          height to fifty and then change my algorithm to tell the artist to go up
          by height, turn right and then go over by height times 2, which gives us
          a rectangle that is twice as wide as it is tall.
    C4_unplugged_algorithms:
      1:
        image: notes/C4_unplugged_algorithms_1.png
        text: This lesson is called Tangram Algorithms. A tangram is a puzzle with
          seven pieces that can be put together to make other shapes. You'll be using
          an algorithm to explain to your partner how to put the puzzle together.
      2:
        image: notes/C4_unplugged_algorithms_2.png
        text: An algorithm is just a of list steps that you can take to complete a
          task. We use them every day with things like shopping lists and recipes.
          If you keep an algorithm simple, there are lots of ways to interpret it
          and whoever performs that algorithm might not get exactly what you wanted.
          If you want to make sure that everyone ends up with the exact same thing,
          then your algorithm will need to be detailed and very specific.
      3:
        image: notes/C4_unplugged_algorithms_3.png
        text: I'm using an algorithm today to complete a painting. I wanted to try
          doing a painting of some wolves but I'm not the most amazing painter. Luckily
          for people by me, there is paint by numbers. There are forty colors and
          it has little letters and numbers that tell you which color to paint each
          section. Paint by numbers tells me exactly what color to use and where.
      4:
        image: notes/C4_unplugged_algorithms_4.png
        text: It's very specific so I'm able to follow directions and the painting
          will come out looking awesome. It's a great algorithm. If the instructions
          weren't specific enough, my wolves wouldn't look as good. When you really
          want something to turn out exactly the way that you planned it, it's best
          to be extremely precise.
    C4_unplugged_binary:
      1:
        image: notes/C4_unplugged_binary_1.png
        text: Each team, the person who's instructing that's the person who's holding
          the paper, has to figure out what their off symbol is going to be and what
          their on symbol is going to be. In binary, it's kind of like an alphabet
          with two letters. Like having A and B be your entire alphabet but you've
          got a 0 and a 1.
      2:
        image: notes/C4_unplugged_binary_2.png
        text: The most common way you use binary is in an if statement. It's a classic
          thing from programming. The program runs along and it says if something
          is true, then do this. Or it's not true and you do something else. What
          if you want to do something maybe a little more complicated. Instead an
          if statement, you want to work with something like an image or a sound in
          a computer.
      3:
        image: notes/C4_unplugged_binary_3.png
        text: 'A computer only knows binary but an image, it''s not binary, it''s
          not ones and zeros so how do you do that? Here''s an example: You have this
          beautiful picture. Now a picture is basically a form of information. All
          information can be encoded in binary one way or another, you just have to
          figure out how to do it.'
      4:
        image: notes/C4_unplugged_binary_4.png
        text: You imagine that we're going to put a grid over this panda bear and
          for each square, we're going to decide whether that square is more black
          or more white. And then we're going to color it that way. Now each cell
          on the grid is either black or white and then the black squares we say those
          are zeros (binary digit) and the white squares are ones, the other binary
          digit. At the end, you're left with just a bunch of ones and zeros. That's
          how you represent this image in binary.
    C4_unplugged_forloops:
      1:
        image: notes/C4_unplugged_forloops_1.png
        text: This lesson is called for loop fun. In this lesson, we'll use a number
          line to play a dice game. Each player will roll three times to assign a
          starting value, a stopping value, and our interval. During each turn, we
          circle our starting value, and every value that is the same number of steps
          forward as our interval value. We stop circling when we get to our stopping
          value. The person with the highest score wins!
      2:
        image: notes/C4_unplugged_forloops_2.png
        text: For loops can come in handy a lot of places and if you were to become
          a meteorologist, you would use for loops all the time. Hi, I'm Becky. I
          work at EverPower Renewables as a wind meteorologist. I forecast wind speeds
          for the Columbia River Gorge area where the company owns wind farms.
      3:
        image: notes/C4_unplugged_forloops_3.png
        text: We're trying to understand how much wind is going to be there so that
          we know how much power is going to be outputted. We give that information
          to real time energy traders. They buy and sell power based on how much power
          we tell them is going to be there in order to make sure the power grid is
          balanced, your lights stay on, and that we maximize the amount of energy
          we get out of our farms.
      4:
        image: notes/C4_unplugged_forloops_4.png
        text: We're at the national control center for EverPower Renewables here in
          Portland and this is where we have information coming in from all our farms
          across the country. Even the highest power computers today can't simulate
          the atmosphere everywhere. In computer forecasting models, we have what
          we call a grid. Each grid point is a latitude, longitude. We have to calculate
          the physics and try and figure out the wind speed, temperature,  pressure,
          that sort of thing.
      5:
        image: notes/C4_unplugged_forloops_5.png
        text: Since these are fairly big grids and we're doing this in a lot of points
          we're looping over these things millions and millions of times. Everything
          I do I'll use for loops. Here for example is a for loop right there. When
          you're forecasting wind, there's so many different parameters that go into
          it it would be impossible for a human to sit down and do all those calculations.
          There's so many different aspects to what's going to be affecting what's
          happening to the wind that we need a computer model in order to forecast
          it.
    C4_unplugged_madlibs:
      1:
        image: notes/C4_unplugged_madlibs_1.png
        text: In this lesson, we'll be playing with some fill in the blank stories.
          You have a template that you can fill in to create similar stories that
          have very amusing differences.
      2:
        image: notes/C4_unplugged_madlibs_2.png
        text: In this lesson, we also learned how to make an abstracted template from
          two stories that have already been created. Abstraction is the art of removing
          differences and details so that you can see how one solution might work
          for many different problems. It's very helpful in computer science because
          it allows us to create functions that may be useful in several different
          situations.
    C4_unplugged_parameters:
      1:
        image: notes/C4_unplugged_parameters_1.png
        text: This lesson is called songwriting with parameters. We're going to be
          writing some songs here. Sometimes the chorus is just a little bit different
          each time you sing it. Do you remember Old Macdonald Had a Farm? The chorus
          is slightly different for each animal. And on that farm, he had a cow, e-i-e-i-o.
          The small change in each chorus can be shown using something we call parameters.
      2:
        image: notes/C4_unplugged_parameters_2.png
        text: Sometimes a function needs a parameter. A parameter is an extra piece
          of information you can pass to a function to customize it for a special
          need. When you make ice cream sundaes with your friends, you are using a
          process similar to parameters in a computer program.
      3:
        image: notes/C4_unplugged_parameters_3.png
        text: The disk of vanilla ice cream might be the same for every sundae but
          when you ask your friends which two toppings they'd like, you could get
          lots of different combinations. Topping is the function name but each type
          of topping is a parameter. Functions and parameters work together to make
          great computer programs and great sundaes too.
    C4_unplugged_variables:
      1:
        image: notes/C4_unplugged_variables_1.png
        text: This lesson is called variables in envelopes. We're going to learn how
          we can build sentences when we're still missing pieces of information. Most
          of us are already familiar with the idea of filling in a blank. We do it
          when we're putting our name on our homework. Sometimes there's more than
          one word that needs to be filled out and in that case, we give that blank
          a label so that we know which piece of information goes where.
      2:
        image: notes/C4_unplugged_variables_2.png
        text: Variables are placeholders for pieces of information that can change.
          By using a variable for the missing information, we can continue working
          on whatever we were doing and let someone else fill in the missing information
          later. In software, we use variables a lot. We use variables as placeholders
          for name, email address, and even username. That way we can let the program
          know where those details will appear after the user fills them in. We use
          variables all the time in our work.
      3:
        image: notes/C4_unplugged_variables_3.png
        text: Any time you need to store a piece of information for later, we use
          a variable. Let's say we need to count the number of times the user has
          tweeted. Every time that user tweets, we'll add one to that number and every
          time the user deletes a tweet, we'll decrease that number by one. Anytime
          we need to know how many times that user has tweeted, we'll just look at
          that variable.
    C4_variables_artist:
      1:
        image: notes/C4_variables_artist_1.png
        text: A variable is a container you can store a value in. When you use that
          variable in an algorithm, it opens up the container and looks at the value
          inside. This lets you write smarter algorithms that behave differently depending
          on the value stored in the variable.
      2:
        image: notes/C4_variables_artist_2.png
        text: For example, if you wanted to write an algorithm to say Happy birthday,
          you're turning 10! to my little brother, that's great now but when I run
          it next year I'd want it to say, Happy birthday, you're turning 11! I could
          create a variable called age to store my brother's age and write my algorithm
          to say Happy birthday, you're turning 'age' instead. Because variable can
          change, every year I can update the variable 'age' to equal 'age' plus 1.
      3:
        image: notes/C4_variables_artist_3.png
        text: In this puzzle, we're going to be using a variable that will set the
          length of the line our artist draws. Later on in our code, the move forward
          block will look at that length variable to see what value you've set it
          to.
    C4_variables_playlab:
      1:
        image: notes/C4_variables_playlab_1.png
        text: A variable is a container that you can store a value in. When you use
          that variable in an algorithm, it opens up the container and looks at the
          value inside. This lets you write smarter algorithms that behave differently
          depending on the value stored in the variable.
      2:
        image: notes/C4_variables_playlab_2.png
        text: Now you're going to try playlab where you are given different games
          and you can change the values of variables like speed, height, score, in
          order to change the game. You won't have to change the algorithm of the
          game to change how it plays, just the variable.
      3:
        image: notes/C4_variables_playlab_3.png
        text: In my work for Kindle and on X-ray for books, we apply variables in
          many different ways. One way that you can use a variable is to store page
          numbers of a book. A user can increase and decrease the size of the font
          on a page. Based on the font size, the number of pages in the book can change.
          We can adjust it by storing the number of pages in the variable.
    infinity_playlab_events:
      1:
        image: notes/infinity_playlab_events_1.png
        text: Now we're going to learn about something that all game programmers use
          everyday. They're called events. An event tells your program to listen for
          when something happens. And then when it does, it performs an action. Some
          examples of events are listening for a mouse click, an arrow button, or
          a tap on the screen.
      2:
        image: notes/infinity_playlab_events_2.png
        text: Here, we're going to make Baymax move up to touch Hiro and move down
          to touch Rapunzel when the player uses the up/down arrow keys or the up/down
          buttons. We'll use the when up arrow block and attach the move actor up
          block to it, so when the player presses the up arrow key, everything attached
          to the "when up arrow" block is run. We'll do the same thing to make Baymax
          move down. Step by step your game is getting more interactive.
    infinity_playlab_intro:
      1:
        image: notes/infinity_playlab_intro_1.png
        text: So what grade are you in? Second. Tenth grade. First grade. I was in
          eighth grade when I learned to program. I got my first computer when I was
          in sixth grade. What gets me excited is being able to fix people's problems.
          You can express yourself, you can build things from an idea.
      2:
        image: notes/infinity_playlab_intro_2.png
        text: Computer science is the basis for a lot of the things that college students
          and professionals will do for the next twenty or thirty years. I like programming
          because I like helping people. I get the opportunity to build something
          that's gonna make people's lives easier. I think it's the closest thing
          we have to a superpower. Getting started is the most important part. I'm
          a beginner myself and I want you to learn with me.
      3:
        image: notes/infinity_playlab_intro_3.png
        text: I'm John Vechey, I'm one of the co-founders of PopCap Games. We make
          games like Plants vs. Zombies, Bejeweled, and Peggle. A lot about games
          isn't how perfect your code is, it's not how perfect your art is, it's about
          how does it feel and how much fun it is. You can only get that sense by
          trying it, by doing it, by learning and adapting and iterating your own
          skills of making games.
      4:
        image: notes/infinity_playlab_intro_4.png
        text: Do you have a favorite video game? Well, we're going to take one step
          towards creating games just like that using Play Lab. Good games have a
          story and every story has actors. Actors do things like speak, move, and
          interact with each other. Maybe even score points based on the rules of
          the game. Today we'll be learning how to do all these things, one by one,
          with Disney's characters like Anna, Elsa, Hiro, Baymax, and Rapunzel. We'll
          build a game from scratch that can be shared and played on a phone.
      5:
        image: notes/infinity_playlab_intro_5.png
        text: Your screen is split into three main parts. On the left is the gamespace,
          where your program will run. The instructions for each level are written
          below. This middle area is the toolbox, and each of these blocks is a piece
          of code. The white space on the right is called the workspace, and this
          is where we'll build our program.
      6:
        image: notes/infinity_playlab_intro_6.png
        text: To start off, you'll need to link your blocks to the orange "when run"
          block. You can link multiple blocks together by dragging them out until
          you see the yellow outline, and then they'll snap together. In this first
          puzzle, Hiro is Actor 1 and Baymax is Actor 2. We need to move Hiro to get
          to Baymax by dragging the "move right" block out and linking it to the "when
          run" block. Once you have your blocks in place, hit the "Run" button to
          see what you've programmed.
      7:
        image: notes/infinity_playlab_intro_7.png
        text: Get started and by the end you'll be able to create your own game with
          these amazing actors that can interact, score points, throw microbots, cherries,
          saucepans, sparkles, and ice.. and vanish each other. It's all up to you!
    infinity_playlab_repeat_forever:
      1:
        image: notes/infinity_playlab_repeat_forever_1.png
        text: Can you imagine if you had to repeat something forever and ever? Hopefully
          you'll never have to because computers are really good at repeating things.
          This is the repeat forever block. Anything inside this block will happen
          forever in the game.
      2:
        image: notes/infinity_playlab_repeat_forever_2.png
        text: So if we wanted an actor to do something repeatedly without the player
          having to do anything, we'll put those blocks inside the repeat forever
          block. In this next puzzle, our goal is to help Anna walk up and down continuously.
          Learning how the repeat commands work will save you a ton of time later
          when you build your own game.
    tutorial_puzzle_challenge:
      1:
        image: notes/tutorial_puzzle_challenge_1.png
        text: What do you want to be when you grow up Olivia? An astronaut. Do you
          happen to know what a computer programmer is? Yeah um no. Ummm wait what?
          I'm not really sure how to explain it computer programming is pretty simple.
          It's a set of instructions like a recipe, you have to follow them step-by-step
          to get the end result you want.
      2:
        image: notes/tutorial_puzzle_challenge_2.png
        text: I can change the number of pixels, the length of the line, using this
          dropdown. How long was it again? You can see the instructions again by looking
          under the run button. Here I used the move forward block and I'm going to
          select 100 pixels. I can delete a block by dragging it into the toolbox
          or the trash can. Let's put it back.
      3:
        image: notes/tutorial_puzzle_challenge_3.png
        text: Run the code by pressing run. Well that didn't work! I'll press reset
          and figure out what's wrong. You can try a puzzle as many times as you'd
          like and skip puzzles and come back to them. Just make sure to try your
          best and don't give up. Let's add another move forward. That still didn't
          work. I can place a block between other blocks.
      4:
        image: notes/tutorial_puzzle_challenge_4.png
        text: Let's take a turn block and place it in between the move forwards. Turn
          left 45 degrees. Let's run it again. Reset, run, awesome! Here's another
          puzzle. Sometimes you are given starter code to complete. Here I need to
          add the appropriate lengths and degrees.
      5:
        image: notes/tutorial_puzzle_challenge_5.png
        text: You may sometimes accidentally trash the starter code. What do you do
          then? You can press clear puzzle and start all over again. I'm going to
          drag this number block into the different pixel areas. Select 100 for pixels,
          45 for degrees and 100 for pixels again. Awesome! Here is the Code Studio
          bee. I need to move the bee to each flower and get nectar.
      6:
        image: notes/tutorial_puzzle_challenge_6.png
        text: The first flower is three blocks away so I need three move forwards.
          1, 2, 3. Then a get nectar, then another get nectar. Well that didn't work!
          I'll place another move forward between the get nectars and run it again.
          Yay, it works! You just learned how to use the Code Studio artist and bee
          puzzles. Good luck on the Code Studio puzzle challenge.
    unplug1:
      1:
        image: notes/unplug1_1.png
        text: What do you want to be when you grow up Olivia? Umm, an astronaut! Do
          you happen to know what a computer programmer is? Yeahh, umm, no. Umm, what
          what? I'm not really sure how to explain it. Computer programming is pretty
          simple. It's a set of instructions, like a recipe. You have to follow them
          step by step to get the end result you want.
      2:
        image: notes/unplug1_2.png
        text: Computer science is a way to impact the world. It can be music videos,
          it can be games, detect whether or not someone is related to someone else.
          Find you know, people's friends. You can do all sorts of other crazy things
          that actually save lives. You do have to have a drive I think. It is to
          me like a paintbrush. I think great programming is not all that dissimilar
          from great art.
      3:
        image: notes/unplug1_3.png
        text: When I finally learned a little bit of programming, that blank wall
          resolved into a bunch of doors and you open them and of course then you
          find behind them is another hallway filled with a bunch of doors. Programming
          is fun and easy. You can do anything your mind wants to do. Finally you
          start to open enough doors the light comes in. To me a finished program
          is like a structure filled with light. All the corners are illuminated.
          The number of people that you can touch and interact with is something the
          world has never seen before.
      4:
        image: notes/unplug1_4.png
        text: Our first lesson in this series is all about what computer science is,
          what a computer scientist does and how you can be more responsible in your
          use of technology. It's a very important lesson but it is a little text-heavy.
          At the end, you get to make your very own customized encoding using your
          initials. It's a fun activity and it's very empowering because binary is
          one of those things that feels very technical but once you understand it,
          it's like you speak a secret language.
    unplug2:
      1:
        image: notes/unplug2_1.png
        text: The lesson on computational thinking is intended to teach you how to
          take a big difficult problem and break it down into several simpler problems.
          The goal of this lesson is to write a set of instructions that someone can
          follow to draw one of the monsters included in the lesson plan.
      2:
        image: notes/unplug2_2.png
        text: 'Students will break into groups to write instructions and then they''ll
          switch them with another group that will have to draw the monster. Groups
          will write instructions using the four steps of computational thinking:
          decomposition, pattern location, abstraction and algorithms.'
      3:
        image: notes/unplug2_3.png
        text: First groups will decompose the task which means make a game plan. Then
          they'll look for patterns between all the monsters in the catalog. When
          they come across differences between the monsters, they'll abstract or remove
          those details. For instance, one monster in the catalog has vegitas eyes
          and another has spritem eyes. But they both have eyes so we can write a
          line that says the monster has blank eyes.
      4:
        image: notes/unplug2_4.png
        text: So students will be able to write a set of instructions, called an algorithm,
          that list the monsters' parts with blanks for what the styles should be.
          This is the set of instructions they'll pass to other students to recreate
          their very own monster.
    unplug3:
      1:
        image: notes/unplug3_1.png
        text: In graph paper programming, we help explain how coding works by trying
          to help people recreate drawings using only arrows and scribbles. One person
          is given a small drawing on graph paper and they need to go through using
          only specific arrows and try to describe how to recreate that drawing.
      2:
        image: notes/unplug3_2.png
        text: 'In this activity, the only symbols you can use are these: move one
          square forward, one square backward, move one square up, move one square
          down, change to next color, and fill in your square with color. Once we
          have that coded up, we can hand it off to another person who can read the
          code and try and recreate the picture.'
    unplug4:
      1:
        image: notes/unplug4_1.png
        text: In graph paper programming, we help explain how coding works by trying
          to help people recreate drawings using only arrows and scribbles. One person
          is given a small drawing on graph paper and they need to go through using
          only specific arrows and try to describe how to recreate that drawing.
      2:
        image: notes/unplug4_2.png
        text: In the second half of the activity, we ask students how many different
          ways they can fold a piece of paper to create sixteen identical rectangles.
          Then you'll discuss how multiple solutions can lead to the same end result
          and why some solutions are better in certain situations.
    unplug5:
      1:
        image: notes/unplug5_1.png
        text: In graph paper programming, we help explain how coding works by trying
          to help people recreate drawings using only arrows and scribbles. One person
          is given a small drawing on graph paper and they need to go through using
          only specific arrows and try to describe how to recreate that drawing.
      2:
        image: notes/unplug5_2.png
        text: In the second half of the activity, we ask students how many different
          ways they can fold a piece of paper to create sixteen identical rectangles.
          Then you'll discuss how multiple solutions can lead to the same end result
          and why some solutions are better in certain situations.
    unplug6:
      1:
        image: notes/unplug6_1.png
        text: This activity is called coding with cards and it's great for any age.
          Like you learned with the if statements in earlier lessons,  during Blockly,
          if statements have a piece about them you have to evaluate to find out if
          it's true or false. That's the conditional and it can be used in lots of
          different ways.
      2:
        image: notes/unplug6_2.png
        text: We take advantage of that by creating programs on paper that you run
          using a random draw of playing cards. You might have an if statement that
          says something like if the card you draw is greater than 8, you get a point.
          Otherwise, your opponent gets a point. You can make it as simple or as complicated
          as you feel comfortable.
    unplug7:
      1:
        image: notes/unplug7_1.png
        text: You know how when you look up the lyrics for a song and they define
          the chorus at the very beginning and then for the rest of the song, they
          just refer you back to the chorus? That's how you call a function.
      2:
        image: notes/unplug7_2.png
        text: In this lesson, we define the chorus at the beginning of our song and
          then we sing through our song and go back and we notice that the class doesn't
          sing the word chorus, they automatically go up to the top where we define
          the chorus and sing through that. We use that as a great introduction to
          how to understand what a program is doing when it defines and calls a function.
      3:
        image: notes/unplug7_3.png
        text: We use familiar songs including Old Macdonald to talk about how a chorus
          is called over and over and how sometimes a chorus can change. When you
          have a song like Old Macdonald, where certain words change, that's a great
          place to introduce the idea of parameters. Passing certain words through
          so that you can send extra information to your function. Once we're sure
          everybody gets it, you can take your own familiar songs and break them up
          yourself. See if you can figure it out together.
    unplug8:
      1:
        image: notes/unplug8_1.png
        text: Our lesson on abstraction uses the familiar concept of madlibs, where
          you basically insert a blank in a story that can be filled with lots of
          different words. We take that idea, challenge kids to come up with their
          own words for their own stories, and really explain the concept of abstraction.
      2:
        image: notes/unplug8_2.png
        text: It's all about functions and how you can have a function, like in Old
          Macdonald, where you have a structure for your chorus but you have something
          little that changes and you abstract out that little thing that changes
          and you can fill it in with your own word every time through. But sometimes
          you have three words that change and so you fill those in with three parameters,
          that's still pretty helpful.
      3:
        image: notes/unplug8_3.png
        text: You can have one function that handles lots of different problems. Lots
          of times people will write separate functions for all those problems, not
          realizing there's only one little difference. If they could just find a
          way to handle that one little difference, they could just reuse one function
          over and over again, instead of having 14 different functions.
    unplug9:
      1:
        image: notes/unplug9_1.png
        text: Relay programming is an extremely fun lesson that gets across way more
          than computer science. Sometimes everybody is getting a little bit antsy
          and you want to get them up on their feet. This is a great way to add some
          excitement to computer science.
      2:
        image: notes/unplug9_2.png
        text: You break everyone up into two groups where they stand in a line and
          run relay style. The first person in each group runs to the other side of
          the room where you have a graph paper drawing and a blank piece of paper
          waiting for them. They write down the first step to creating that image,
          run back to their line, tag the next player who goes back up to write the
          next step.
      3:
        image: notes/unplug9_3.png
        text: This is a great way to get across the idea of debugging, needing to
          proofread your own work, and needing to check the work of the people done
          before you. You'll quickly understand how important it is that you be careful
          in your coding when a whole team is depending on you.
    unplug10:
      1:
        image: notes/unplug10_1.png
        text: This activity explains in an easy-to-understand way how the internet
          works. We explain all the terminology you'll need in simple terms so that
          students can simulate transmitting messages, like an email.
      2:
        image: notes/unplug10_2.png
        text: Students will transmit messages while pretending to be one of three
          transmission methods. Wireless internet, DSL or fiber optic. The students
          who represent wi-fi will have to wear the message they're transmitting on
          their head because wifi is the most likely to drop some information.
      3:
        image: notes/unplug10_3.png
        text: The students pretending to be DSL or cable will carry the message on
          the back of their hand, where they're slightly less likely to drop information.
          And the students representing fiber optic will get to carry them with both
          hands. This activity is a great way to understand something that many of
          us use every day.
    unplug11:
      1:
        image: notes/unplug11_1.png
        text: So now it's time to step back and take a birds eye view of everything
          you've done in these past nineteen lessons. This is a great time to call
          out to students that what they've just done is a huge achievement. They've
          learned more over these lessons than most adults know about computer science.
      2:
        image: notes/unplug11_2.png
        text: Discuss as a class or in small groups about their favorite lessons.
          Once you take a look back at everything you've learned, this is where your
          students' creativity can shine. Split them into groups and have them create
          an unplugged lesson of their own. Assign each group a key concept, like
          functions or algorithms and have lots of craft materials on hand for them
          to use. Have each group present their new unplugged activity or even set
          aside another day to do a few of the student created activities.
      3:
        image: notes/unplug11_3.png
        text: From everyone here at Code.org, we hope you've had a TON of fun during
          this course. And whether your dream is to create the best new app, use programming
          to help cure diseases, or you just want to be a stellar problem-solver,
          this course was the first step in achieving those dreams.
    starwars_intro:
      1:
        image: notes/starwars_intro_1.JPG
        text: Hi, I'm Kathleen Kennedy and I'm the producer of Star Wars, The Force
          Awakens. Today you'll be working with one of our stars, BB-8. BB-8 is a
          spherical droid. Everything he does and every movement that he makes is
          controlled by computer software. Computer science impacts every industry,
          from marketing to health care to film. In fact, hundreds of computer engineers
          worked together to make a film like The Force Awakens.
      2:
        image: notes/starwars_intro_2.JPG
        text: Hi I'm Rachel Rose, I'm a senior R&D engineer at ILM and I lead the
          animation and creature development team. In The Force Awakens, I'm responsible
          for helping the artists develop rigs which are the parts of the character
          that move that allow the character to look very believable in a galaxy far
          far away.
      3:
        image: notes/starwars_intro_3.JPG
        text: In the next hour, we're going to build our own Star Wars game. We'll
          teach you the basic concepts of programming. Usually programming is all
          text but we're going to use blocks here so that we can drag and drop to
          write the programs. Under the hood, you're still creating code. After you
          try the basics with blocks, we'll switch you to JavaScript, one of the most
          popular programming languages on the web.
      4:
        image: notes/starwars_intro_4.JPG
        text: To start off, we're going to work with Rey to program BB-8 to walk to
          collect all of the scrap parts. Your screen is split into three parts. On
          the left is the Star Wars game space, where code will run. The instructions
          for each level are written below the game space.
      5:
        image: notes/starwars_intro_5.JPG
        text: This middle area is the toolbox and each of these blocks is a command
          that BB-8 can understand.
      6:
        image: notes/starwars_intro_6.JPG
        text: The white space on the right is called the workspace and this is where
          we are going to build our program.
      7:
        image: notes/starwars_intro_7.JPG
        text: If I drag the moveLeft(); block to our workspace and press run, what
          happens? BB-8 moves left one block on the grid.
      8:
        image: notes/starwars_intro_8.JPG
        text: And what if I want BB-8 to do something after the moveLeft(); block?
          I can add another block to our program. I'm going to choose the moveUp();
          block and I'll drag it under my moveLeft(); block until the highlight appears.
          Then I'll drop it and the two blocks will snap together.
      9:
        image: notes/starwars_intro_9.JPG
        text: When I press run again, BB-8 will perform the commands that are stacked
          from top to bottom on our workspace. If you ever want to delete a block,
          just remove it from the stack and drag it back into the tool box.
      10:
        image: notes/starwars_intro_10.JPG
        text: After you've hit run, you can always hit the reset button to get BB-8
          back to the start. Now let's get rolling!
    starwars_typing:
      1:
        image: notes/starwars_typing_1.JPG
        text: Inside the blocks we've been using are JavaScript commands. JavaScript
          is the most popular programming language for professional developers today.
          Blocks are a great way to get started learning to code and in fact, top
          universities like Harvard and Berkeley start teaching this way. But once
          we learn the basics, engineers write code by typing because it allows us
          to go faster.
      2:
        image: notes/starwars_typing_2.JPG
        text: We can type hundreds of commands without having to find them in the
          toolbox or drag them out. Because you're learning typing may be slower at
          first but we wanted you to give it a try.
      3:
        image: notes/starwars_typing_3.JPG
        text: In the upper right corner on your workspace, you can click the show
          text button on any puzzle to switch from blocks to typing code as text.
      4:
        image: notes/starwars_typing_4.JPG
        text: In the next lesson, we'll start you out in typing mode. Here you can
          still drag the block from the toolbox or you can type the command name.
          As you start to type, you'll see names of possible commands show below where
          you're typing. Instead of typing the whole command name, you can select
          one of these to move faster. In my job, I use this auto-complete feature
          all the time when writing code.
      5:
        image: notes/starwars_typing_5.JPG
        text: When you're typing code, the computer needs you to be very precise.
          You need to spell and capitalize the command name exactly correctly, including
          the parentheses and the semi-colon. Even with a small typing mistake, BB-8
          cannot understand the code and won't be able to move.
      6:
        image: notes/starwars_typing_6.JPG
        text: When you make an error on the line, the editor highlights it for you
          so that you can try changing your text to fix it.
      7:
        image: notes/starwars_typing_7.JPG
        text: If you get stuck, you can always start over with the start over button
          and you can switch back to block mode at any time by clicking in the top-right
          corner. Ok, let's give typing a try! And if you make mistakes, don't get
          frustrated. It takes everybody a few tries to get it right.
    starwars_events:
      1:
        image: notes/starwars_events_1.JPG
        text: Hello, my name is Charita Carter. I'm a senior creative producer here
          at Walt Disney Imagineering. I'm responsible for leading teams that actually
          produce the attractions that our guests get to experience. We are always
          looking for ways that we can improve and make a better experience for our
          guests and technology is at the heart of that.
      2:
        image: notes/starwars_events_2.JPG
        text: Congratulations, you did it! You programmed BB-8. Now I think we're
          ready for something harder. Let's go for it. Now that you've learned the
          basics of programming, we're going to back in time to build your own game,
          starring R2-D2 and C3PO.
      3:
        image: notes/starwars_events_3.JPG
        text: 'To make a game, we need to learn about something that game programmers
          use every day: they''re called events. Events tell your program to listen
          or wait for when something happens and then when it does, it performs an
          action.'
      4:
        image: notes/starwars_events_4.JPG
        text: Some examples of events are listening for a mouse click, an arrow button
          or a tap on the screen.
      5:
        image: notes/starwars_events_5.JPG
        text: Here we're going to make R2-D2 move up to deliver a message to a rebel
          pilot and then move down to the other rebel pilot. We'll use events to make
          him move. When the player uses the up/down arrow keys, or the up/down buttons.
      6:
        image: notes/starwars_events_6.JPG
        text: We use the whenUp() event block and attach the goUp() block to it. When
          the player presses the up arrow key, the code attached to the whenUp() block
          is run. And we'll do the same thing to make R2-D2 move down.
      7:
        image: notes/starwars_events_7.JPG
        text: To do this, we'll use a command called whenUp(). When you drag the command
          out of the toolbox, you'll see that it starts and ends with a curly bracket
          instead of a semi-colon. This gives us space to put other commands in the
          middle. Every command that we place inside these brackets will run when
          the player presses the up arrow.
      8:
        image: notes/starwars_events_8.JPG
        text: We want R2-D2 to go up so let's put a goUp(); block inside the command.
          And we'll do the same thing to make R2-D2 go down.
      9:
        image: notes/starwars_events_9.JPG
        text: Now instead of writing all the code to control our droid in advance,
          we can let R2-D2 react to button press events that move him around the screen.
          Step by step, your game is getting more interactive.
    starwars_congrats:
      1:
        image: notes/starwars_congrats_1.JPG
        text: Hi, my name is Alice and I run the project and engineering teams here
          at Code.org and I worked on this tutorial that you're playing through right
          now.
      2:
        image: notes/starwars_congrats_2.JPG
        text: You just made it to the last level. Congratulations! You just learned
          everything you need to know to make your own Star Wars game. Now there are
          no more instructions, no puzzles to solve. You can make your own game and
          you choose how it works. One more thing, you've unlocked new sounds and
          new commands to do even more.
      3:
        image: notes/starwars_congrats_3.JPG
        text: "[students speaking] So we made a game basically where you get points
          when you get puffer pigs. The twist is everytime you get a puffer pig a
          storm trooper appears. Actually the whole screen is full of puffer pigs
          and then when you touch 10,000 of them, you win."
      4:
        image: notes/starwars_congrats_4.JPG
        text: "[students speaking] We made a game where you can't lose and everything
          you kill gives you points. For my program, I reversed the keys so that whenever
          you click up, your character goes down and when you go right, your character
          goes left. It's really hard! Sometimes you just get an advantage, an unfair
          advantage if you're the developer of the game. Did I get it? Yay!"
      5:
        image: notes/starwars_congrats_5.JPG
        text: When you're done making your game, choose share to get a link you can
          share with friends or play your game on your phone. Have fun!
    starwars_blocks_intro:
      1:
        image: notes/starwars_blocks_intro_1.JPG
        text: 'Hi I''m Kathleen Kennedy and I''m the producer of Star Wars: The Force
          Awakens. Today you''ll be working with one of our stars, BB-8. BB-8 is a
          spherical droid. Everything he does and every movement that he makes is
          controlled by computer software. Computer science impacts every industry,
          from marketing to health care to film. In fact, hundreds of computer engineers
          worked together to make a film like The Force Awakens.'
      2:
        image: notes/starwars_blocks_intro_2.JPG
        text: Hi, I'm Rachel Rose. I'm a senior R&D engineer at ILM and I lead the
          animation and creature development team. In The Force Awakens, I'm responsible
          for helping the artist develop rigs, which are the parts of the character
          that move that allow the character to look very believable in a galaxy far,
          far away.
      3:
        image: notes/starwars_blocks_intro_3.JPG
        text: In the next hour, we're going to build our own Star Wars game that will
          teach you the basic concepts of programming. Usually programming is all
          text but we're going to use blocks here so we can drag and drop to write
          the programs. To start off, we're going to work with Rey to program BB-8
          to walk to collect all of the scrap parts.
      4:
        image: notes/starwars_blocks_intro_4.JPG
        text: Your screen is split into three parts. On the left is the Star Wars
          game space where code will run. The instructions for each level are written
          below the game space.
      5:
        image: notes/starwars_blocks_intro_5.JPG
        text: This middle area is the toolbox and each of these blocks is a command
          that BB-8 can understand.
      6:
        image: notes/starwars_blocks_intro_6.JPG
        text: The white space on the right is called the work space and this is where
          we're going to build our program.
      7:
        image: notes/starwars_blocks_intro_7.JPG
        text: If I drag the moveLeft(); block to our workspace, what happens? BB-8
          moves left one block on the grid.
      8:
        image: notes/starwars_blocks_intro_8.JPG
        text: And what if I want BB-8 to do something after the moveLeft(); block?
          I can add another block to our program. I'm going to choose the moveUp();
          block and I'll drag it under my moveLeft(); block until the highlight appears.
          Then I'll drop it and the two blocks will snap together. When I press run
          again, BB-8 will perform the commands that are stacked top to bottom on
          our workspace.
      9:
        image: notes/starwars_blocks_intro_9.JPG
        text: If you ever want to delete a block, just remove it from the stack and
          drag it back into the toolbox.
      10:
        image: notes/starwars_blocks_intro_10.JPG
        text: After you hit run, you can always hit the reset button to get BB-8 back
          to the start. Now let's get rolling!
    starwars_blocks_events:
      1:
        image: notes/starwars_blocks_events_1.JPG
        text: Hello, my name is Charita Carter. I'm a senior creative producer here
          at Walt Disney Imagineering. I'm responsible for leading teams that actually
          produce the attractions that our guests get to experience. We are always
          looking for ways that we can improve and make a better experience for our
          guests and technology is at the heart of that.
      2:
        image: notes/starwars_blocks_events_2.JPG
        text: Congratulations, you did it! You programmed BB-8. Now I think we're
          ready for something harder. Let's go for it. Now that you've learned the
          basics of programming, we're going to back in time to build your own game,
          starring R2-D2 and C3PO.
      3:
        image: notes/starwars_blocks_events_3.JPG
        text: 'To make a game, we need to learn about something that game programmers
          use every day: they''re called events. Events tell your program to listen
          or wait for when something happens and then when it does, it performs an
          action.'
      4:
        image: notes/starwars_blocks_events_4.JPG
        text: Some examples of events are listening for a mouse click, an arrow button
          or a tap on the screen.
      5:
        image: notes/starwars_blocks_events_5.JPG
        text: Here we're going to make R2-D2 move up to deliver a message to a rebel
          pilot and then move down to the other rebel pilot. We'll use events to make
          him move. When the player uses the up/down arrow keys, or the up/down buttons.
      6:
        image: notes/starwars_blocks_events_6.JPG
        text: We use the whenUp() event block and attach the goUp() block to it. When
          the player presses the up arrow key, the code attached to the whenUp() block
          is run. And we'll do the same thing to make R2-D2 move down. Now instead
          of writing all the code to control our droid in advance, we can let R2-D2
          react to button press events that move him around the screen.
      7:
        image: notes/starwars_blocks_events_7.JPG
        text: Step by step, your game is getting more interactive.
    starwars_blocks_congrats:
      1:
        image: notes/starwars_blocks_congrats_1.JPG
        text: Hi, my name is Alice and I run the project and engineering teams here
          at Code.org and I worked on this tutorial that you're playing through right
          now.
      2:
        image: notes/starwars_blocks_congrats_2.JPG
        text: You just made it to the last level. Congratulations! You just learned
          everything you need to know to make your own Star Wars game. Now there are
          no more instructions, no puzzles to solve. You can make your own game and
          you choose how it works. One more thing, you've unlocked new sounds and
          new commands to do even more.
      3:
        image: notes/starwars_blocks_congrats_3.JPG
        text: "[students speaking] So we made a game basically where you get points
          when you get puffer pigs. The twist is everytime you get a puffer pig a
          storm trooper appears. Actually the whole screen is full of puffer pigs
          and then when you touch 10,000 of them, you win."
      4:
        image: notes/starwars_blocks_congrats_4.JPG
        text: "[students speaking] We made a game where you can't lose and everything
          you kill gives you points. For my program, I reversed the keys so that whenever
          you click up, your character goes down and when you go right, your character
          goes left. It's really hard! Sometimes you just get an advantage, an unfair
          advantage if you're the developer of the game. Did I get it? Yay!"
      5:
        image: notes/starwars_blocks_congrats_5.JPG
        text: When you're done making your game, choose share to get a link you can
          share with friends or play your game on your phone. Have fun!
    mc_intro:
      1:
        image: notes/mc_intro_1.JPG
        text: Tôi tên là Jens Bergensten, nhưng tốt hơn nên gọi tôi là Jeb. Tôi là
          trưởng nhóm lập trình viên của Minecraft, ở đây tại Mojang, Stockholm. Tôi
          nghĩ lúc tôi mười bảy tuổi hay có thể là mười hai tuổi, tôi đã bắt đầu lập
          chương vì tôi muốn tạo ra các trò chơi. Một trong số những người bạn của
          cha tôi nói với tôi là để tạo ra trò chơi thì tôi cần phải học cách lập
          trình. Đó là cách mà tôi bắt đầu. Tôi thích thiết kế và lập cấu trúc của
          các trò chơi. Đó là những gì tôi thực sự thích ở Minecraft.
      2:
        image: notes/mc_intro_2.JPG
        text: Trong một giờ tới, bạn sẽ học những khái niệm cơ bản của khoa học máy
          tính bằng cách lập trình Alex hoặc Steve để vượt qua một phần giả lập của
          thế giới Minecarft.
      3:
        image: notes/mc_intro_3.JPG
        text: Lập trình truyền thống thường là bằng văn bản, nhưng ngày nay chúng
          ta sẽ sử dụng Blovkly, là một hệ thống sử dụng các khối hữu hình và bạn
          sẽ kéo và thẻ để viết chương trình. Nói cách khác, bạn đang tạo mã Javascript.
      4:
        image: notes/mc_intro_4.JPG
        text: Các khái niệm mà bạn sẽ học là những gì mà các lập trình viên máy tính
          sử dụng hằng ngày và là nền tảng cho khoa học máy tính. Ở đây, tại Mojang,
          chúng tôi sử dụng các khái niệm giống nhau này để giúp Minecraft hoạt động.
      5:
        image: notes/mc_intro_5.JPG
        text: Trước khi bắt đầu, bạn sẽ chọn nhân vật của mình. Tôi sẽ chọn Alex.
          Hãy xây dựng mã cho một chương trình để giúp cô ấy di chuyển quanh màn hình.
      6:
        image: notes/mc_intro_6.JPG
        text: Màn hình của bạn được chia thành ba phần chính. Ở bên trái là không
          gian chơi Minecraft, là nơi chương trình của bạn sẽ hoạt động. Các hướng
          dẫn cho mỗi cấp độ được viết bên dưới.
      7:
        image: notes/mc_intro_7.JPG
        text: Khu vực ở giữa là hộp công cụ và mỗi khối này là một lệnh để hướng dẫn
          cho các hoạt động của Alex.
      8:
        image: notes/mc_intro_8.JPG
        text: Vùng màu trắng bên phải được gọi là không gian làm việc và đây là nơi
          bạn sẽ xây dựng chương trình.
      9:
        image: notes/mc_intro_9.JPG
        text: Nếu chúng ta kéo khối moveForward(); vào không gian làm việc rồi sau
          đó bấm chạy, điều gì xảy ra? Alex di chuyển về phía một không gian trên
          lưới.
      10:
        image: notes/mc_intro_10.JPG
        text: Và nếu chúng ta muốn làm điều gì đó sau khi cô ấy đã di chuyển về phía
          một không gian thì sao? Chúng ta có thể thêm một khối khác vào chương trình
          của chúng ta. Tôi sẽ chọn khối turnRight(); và tôi sẽ kéo nó vào bên dưới
          khối moveForward(); cho đến khi đường màu cam này xuất hiện. Sau đó tôi
          sẽ thả nó và hai khối sẽ dính lại với nhau. Khi chúng ta nhấn chạy một lần
          nữa, Alex sẽ thực hiện các lệnh đã được tập hợp từ đầu đến cuối trong không
          gian làm việc của chúng ta.
      11:
        image: notes/mc_intro_11.JPG
        text: Nếu bạn muốn xóa một khối, chỉ cần kéo nó từ cụm lệnh trở lại hộp công
          cụ.
      12:
        image: notes/mc_intro_12.JPG
        text: "Để hoàn tác các thay đổi và quay lại mức ban đầu của cấp độ, hãy sử
          dụng nút Start Over ở góc phải trên cùng của không gian làm việc. Một điều
          nữa: bạn nhìn thấy hình tam giác nhỏ trên các khối rẽ không? Bất cứ khi
          nào bạn nhìn thấy các hình tam giác này, có nghĩa là bạn có thể chọn một
          tùy chọn khác. Hãy bắt đầu lập mã nào!"
    mc_repeat:
      1:
        image: notes/mc_repeat_1.JPG
        text: Tôi là Lydia Winters, giám đốc thương hiệu của Mojang và chúng tôi đã
          tạo ra một trò chơi nhỏ gọi là Minecraft.
      2:
        image: notes/mc_repeat_2.JPG
        text: "Điều mà tôi thích làm trong Minecraft là khám phá. Tôi yêu thích khám
          phá trong những hang động và quan sát những gì tôi có thể tìm thấy. Vì không
          phải là lập trình viên, nên tôi thực sự rất thích thú khi khám phá bài học
          của Minecraft và thực sự tự học được một vài cách mã hóa."
      3:
        image: notes/mc_repeat_3.JPG
        text: Cấp cuối cùng cần nhiều khối moveForward();. Sẽ dễ hơn nếu chúng ta
          chỉ yêu cầu máy tính thực hiện lệnh moveForward(); bốn hoặc năm lần. May
          là máy tính thực sự rất giỏi về khoản lặp lại các lệnh với các vòng lặp.
      4:
        image: notes/mc_repeat_4.JPG
        text: Khi xây dựng Minecraft, chúng tôi sử dụng các vòng lặp để đặt tất cả
          các nguyên vật liệu ban đầu để tạo nên một thế giới mới. Đó là hàng ngàn,
          hàng ngàn khối. Chúng tôi cũng sử dụng các vòng này cho một số mục đích
          khác, ví dụ như để khiến chân của Alex chuyển động ra phía trước và sau
          khi cô ấy bước. Các vòng lặp là một phần quan trọng khi lập trình.
      5:
        image: notes/mc_repeat_5.JPG
        text: Ban đêm đang buông xuống, vì vậy trong vài cấp độ kế tiếp, chúng ta
          sẽ xây một ngôi nhà để lưu trú an toàn. Chúng ta sẽ sử dụng khối lặp để
          làm được điều này cực dễ dàng.
      6:
        image: notes/mc_repeat_6.JPG
        text: "Để xây tường của ngôi nhà, chúng ta có thể hoặc là yêu cầu Alex moveForward();
          và đặt các tấm ván bốn lần hoặc chúng ta có thể yêu cầu cô ấy moveForward();
          và đặt một tấm ván, sau đó nhận lệnh này và sử dụng khối lặp để yêu cầu
          cô ấy thực hiện hành động này nhiều lần. Bây giờ, chúng ta sẽ bấm vào khối
          lặp và cho cô ấy biết số lần mà chúng ta muốn cô ấy thực hiện hành động
          này. Bây giờ, hãy xây ngôi nhà của chúng ta trước khi trời tối! Chúc vui
          vẻ."
    mc_if_statements:
      1:
        image: notes/mc_if_statements_1.JPG
        text: Bây giờ, chúng ta sẽ học về các lệnh if. Lệnh if là một phần căn bản
          khi học lập trình. Chúng giúp máy tính đưa ra quyết định.
      2:
        image: notes/mc_if_statements_2.JPG
        text: Tất cả các máy tính đều sử dụng lệnh if, bao gồm cả điện thoại của tôi.
          Ví dụ, khi tôi mở khóa điện thoại của mình, nó sẽ chạy một số mã nói rằng
          nếu tọi nhập mật khẩu chính xác, thì khi đó điện thoại sẽ mở khóa. Nếu không,
          nó sẽ hiển thị thông báo lỗi.
      3:
        image: notes/mc_if_statements_3.JPG
        text: Bạn có thể sử dụng lệnh if trong mã của mình để khiến Steve và Alice
          phản ứng trước những gì mà họ nhìn thấy trong thế giới này. Ví dụ, nếu có
          một hòn đá ở phía trước họ, họ có thể rẽ trái. Hoặc rẽ phải nếu họ gặp một
          cái cây.
      4:
        image: notes/mc_if_statements_4.JPG
        text: Trong trường hợp này, chúng ta không muốn rơi vào dung nham. Đối phó
          với dung nham dễ lắm. Chúng ta có thể nhìn thấy nó trên màn hình. Nhưng
          còn dung nham mà chúng ta không thể nhìn thấy ở dưới đá thì sao?
      5:
        image: notes/mc_if_statements_5.JPG
        text: Sau khi chúng ta đào hòn đá lên, chúng ta sẽ cần phải kiểm tra xem có
          dung nham ở đó không trước khi di chuyển về phía trước. Nếu có dung nham
          ở đó, chúng ta cần phải đặt một hòn đá ở phía trước nhân vật của chúng ta
          trước khi chúng ta có thể di chuyển về phía trước. Bằng cách đó, chúng ta
          có thể di chuyển tiếp một cách an toàn. Đã đến lúc khai thác thêm! Và hãy
          nhớ sử dụng lệnh if để di chuyển cẩn thận.
    mc_congrats_share:
      1:
        image: notes/mc_congrats_share_1.JPG
        text: Xin chúc mừng! Bạn vừa học được các khối xây dựng cơ bản của khoa học
          máy tính.
      2:
        image: notes/mc_congrats_share_2.JPG
        text: Bây giờ bạn có thể sử dụng các khối này để xây dựng tác phẩm của riêng
          mình. Không có thêm hướng dẫn nào khác và không có câu đố để giải quyết.
          Bạn có thể xây bất cứ thứ gì mà bạn muốn. Bạn có sự lựa chọn.
      3:
        image: notes/mc_congrats_share_3.JPG
        text: "[học sinh đang nói chuyện] Sắp hành hình rồi. Xén đi. Em làm được chữ
          L bằng đuốc rồi. Em làm được chữ A bằng ván gỗ bulo rồi. Làm được rồi, làm
          được rồi. Chúng em đã xây được môi ngôi nhà bằng len!"
      4:
        image: notes/mc_congrats_share_4.JPG
        text: Khi các bạn hoàn thành tác phẩm của mình, hãy chọn chia sẻ để nhận liên
          kết và chia sẻ với bạn bè của mình. Chúc vui vẻ!
    mc_congrats_no_share:
      1:
        image: notes/mc_congrats_no_share_1.JPG
        text: Xin chúc mừng! Bạn vừa học được các khối xây dựng cơ bản của khoa học
          máy tính.
      2:
        image: notes/mc_congrats_no_share_2.JPG
        text: Bây giờ bạn có thể sử dụng các khối này để xây dựng tác phẩm của riêng
          mình. Không có thêm hướng dẫn nào khác và không có câu đố để giải quyết.
          Bạn có thể xây bất cứ thứ gì mà bạn muốn. Bạn có sự lựa chọn.
      3:
        image: notes/mc_congrats_no_share_3.JPG
        text: "[học sinh đang nói chuyện] Sắp hành hình rồi. Xén đi. Em làm được chữ
          L bằng đuốc rồi. Em làm được chữ A bằng ván gỗ bulo rồi. Làm được rồi, làm
          được rồi. Chúng em đã xây được môi ngôi nhà bằng len!"
      4:
        image: notes/mc_congrats_no_share_4.JPG
        text: Bây giờ bạn có thể xây dựng bất cứ thứ gì mà bạn muốn. Chúc vui vẻ!
    gumball_intro:
      1:
        image: notes/gumball_intro_1.JPG
        text: If you'd like to make your own game, it's really easy. All you need
          are just a few basics of programming and you can start playing a game that
          you created.
      2:
        image: notes/gumball_intro_2.JPG
        text: Do you have a favorite video game? We're going to take one step toward
          creating games just like that in PlayLab. Good games have a story and every
          story has actors. Actors that do things like speak, move and interact with
          each other. Maybe even score points based on the rules of the game. Today,
          we'll be learning how to do all these things one by one with fun actors
          and then build a game from scratch that can be shared and played on a phone.
      3:
        image: notes/gumball_intro_3.JPG
        text: Today, we'll be learning how to do all these things one by one with
          fun actors and then build a game from scratch that can be shared and played
          on a phone.
      4:
        image: notes/gumball_intro_4.JPG
        text: Your screen is split into three main parts. On the left is the gamespace
          where your program will run. The instructions for each level are written
          below.
      5:
        image: notes/gumball_intro_5.JPG
        text: This middle area is the tool box and each of these blocks is a piece
          of code.
      6:
        image: notes/gumball_intro_6.JPG
        text: Vùng màu trắng bên phải được gọi là không gian làm việc và đây là nơi
          bạn sẽ xây dựng chương trình.
      7:
        image: notes/gumball_intro_7.JPG
        text: To start off, you'll need to link your blocks to the orange when run
          block. You can link multiple blocks together by dragging them out until
          you see the yellow line and then they'll snap together.
      8:
        image: notes/gumball_intro_8.JPG
        text: In this first puzzle, we'll make the actors say something by linking
          the "say" block to the when run block and typing in your message. Once you
          have your blocks in place, hit the run button to see what you programmed.
      9:
        image: notes/gumball_intro_9.JPG
        text: Get started and by the end you'll be able to create your own game with
          all kinds of players that can interact, score points, throw things, and
          vanish each other. It's all up to you!
    gumball_events:
      1:
        image: notes/gumball_events_1.JPG
        text: Now we're going to learn about something all game programmers use everyday.
          They're called events. An event tells your program to listen for when something
          happens and then when it does, the game performs an action.
      2:
        image: notes/gumball_events_2.JPG
        text: Some examples of events are listening for a mouse click or an up or
          down arrow key or even a tap on the screen.
      3:
        image: notes/gumball_events_3.JPG
        text: Here, we're going to make the actor say something when the player clicks
          on it. We will use the when clicked block and attach the "say" block to
          it. When the player clicks, all the blocks attached to this block will be
          performed.
      4:
        image: notes/gumball_events_4.JPG
        text: There are also when arrow blocks. If you link move blocks to those,
          you can start to move your actors up, down, left, right, with the arrow
          keys. Little by little your game is getting more interactive.
    gumball_repeat:
      1:
        image: notes/gumball_repeat_1.JPG
        text: Can you imagine if you had to repeat something forever and ever? Hopefully
          you never have to because computers are really good at repeating things.
      2:
        image: notes/gumball_repeat_2.JPG
        text: This is the repeat forever block. Anything inside this block will happen
          forever in the game. If we want an actor to do something repeatedly without
          the player having to do anything, we'll put those blocks inside the repeat
          forever block.
      3:
        image: notes/gumball_repeat_3.JPG
        text: In this next puzzle, our goal is to help the actor do a job continuously.
          Learning how the repeat commands work will save you a ton of time later
          when you build your own game.
    iceage_intro:
      1:
        image: notes/iceage_intro_1.JPG
        text: If you'd like to make your own game, it's really easy. All you need
          are just a few basics of programming and you can start playing a game that
          you created.
      2:
        image: notes/iceage_intro_2.JPG
        text: Do you have a favorite video game? We're going to take one step toward
          creating games just like that in PlayLab. Good games have a story and every
          story has actors. Actors that do things like speak, move and interact with
          each other. Maybe even score points based on the rules of the game. Today,
          we'll be learning how to do all these things one by one with fun actors
          and then build a game from scratch that can be shared and played on a phone.
      3:
        image: notes/iceage_intro_3.JPG
        text: Today, we'll be learning how to do all these things one by one with
          fun actors and then build a game from scratch that can be shared and played
          on a phone.
      4:
        image: notes/iceage_intro_4.JPG
        text: Your screen is split into three main parts. On the left is the gamespace
          where your program will run. The instructions for each level are written
          below.
      5:
        image: notes/iceage_intro_5.JPG
        text: This middle area is the tool box and each of these blocks is a piece
          of code.
      6:
        image: notes/iceage_intro_6.JPG
        text: Vùng màu trắng bên phải được gọi là không gian làm việc và đây là nơi
          bạn sẽ xây dựng chương trình.
      7:
        image: notes/iceage_intro_7.JPG
        text: To start off, you'll need to link your blocks to the orange when run
          block. You can link multiple blocks together by dragging them out until
          you see the yellow line and then they'll snap together.
      8:
        image: notes/iceage_intro_8.JPG
        text: In this first puzzle, we'll make the actors say something by linking
          the "say" block to the when run block and typing in your message. Once you
          have your blocks in place, hit the run button to see what you programmed.
      9:
        image: notes/iceage_intro_9.JPG
        text: Get started and by the end you'll be able to create your own game with
          all kinds of players that can interact, score points, throw things, and
          vanish each other. It's all up to you!
    iceage_events:
      1:
        image: notes/iceage_events_1.JPG
        text: Now we're going to learn about something all game programmers use everyday.
          They're called events. An event tells your program to listen for when something
          happens and then when it does, the game performs an action.
      2:
        image: notes/iceage_events_2.JPG
        text: Some examples of events are listening for a mouse click or an up or
          down arrow key or even a tap on the screen.
      3:
        image: notes/iceage_events_3.JPG
        text: Here, we're going to make the actor say something when the player clicks
          on it. We will use the when clicked block and attach the "say" block to
          it. When the player clicks, all the blocks attached to this block will be
          performed.
      4:
        image: notes/iceage_events_4.JPG
        text: There are also when arrow blocks. If you link move blocks to those,
          you can start to move your actors up, down, left, right, with the arrow
          keys. Little by little your game is getting more interactive.
    iceage_repeat:
      1:
        image: notes/iceage_repeat_1.JPG
        text: Can you imagine if you had to repeat something forever and ever? Hopefully
          you never have to because computers are really good at repeating things.
      2:
        image: notes/iceage_repeat_2.JPG
        text: This is the repeat forever block. Anything inside this block will happen
          forever in the game. If we want an actor to do something repeatedly without
          the player having to do anything, we'll put those blocks inside the repeat
          forever block.
      3:
        image: notes/iceage_repeat_3.JPG
        text: In this next puzzle, our goal is to help the actor do a job continuously.
          Learning how the repeat commands work will save you a ton of time later
          when you build your own game.
    mc_2016_intro:
      1:
        image: notes/mc_2016_intro_1.jpg
        text: Hi, my name is Jens and I'm the lead creative designer of Minecraft.
          In the next hour, you'll make your own Minecraft game. This looks like Minecraft
          but the world has stopped. The sheep aren't moving, the chickens aren't
          laying eggs, and zombies are just standing still. It's up to you to add
          the code to make the Minecraft world work.
      2:
        image: notes/mc_2016_intro_2.jpg
        text: 'My name is Melissa and I am a user researcher at Minecraft. What I''m
          really interested in is how people think and interact with technology and
          so this job is the perfect job for me to put together the computer engineering
          with the psychology: how people think and behave.'
      3:
        image: notes/mc_2016_intro_3.jpg
        text: You'll see your screen is split into three main parts. 1) On the left
          is the Minecraft game. Right now the world is frozen but we're going to
          fix that with code.
      4:
        image: notes/mc_2016_intro_4.jpg
        text: 2) This middle area is the toolbox. Each of these blocks is a command
          that chickens, sheep, and other Minecraft creatures can understand.
      5:
        image: notes/mc_2016_intro_5.jpg
        text: 3) The space on the right is called the workspace and this is where
          we'll build our program.
      6:
        image: notes/mc_2016_intro_6.jpg
        text: If you forget what to do, the instructions for each level are at the
          top.
      7:
        image: notes/mc_2016_intro_7.jpg
        text: To start off, we're going to program a chicken. Let's drag the "move
          forward" command to the workspace. When I hit "Run" the chicken moves forward
          one step. To go further, I'll drag another "move forward" block underneath
          the first "move forward" block until the highlight appears. Then I'll drop
          it and the two blocks snap together. If I hit "Run" again, the chicken walks
          two steps.
      8:
        image: notes/mc_2016_intro_8.jpg
        text: If you ever want to delete a block, just remove it from the stack and
          drag it back to the toolbox.
      9:
        image: notes/mc_2016_intro_9.jpg
        text: After you've hit "Run" you can always hit the "Reset" button to reset
          the game and start over. Now, it's your turn to make your very own version
          of Minecraft. Have fun!
    mc_2016_loops:
      1:
        image: notes/mc_2016_loops_1.jpg
        text: Hi, I'm Lisa. I'm a software developer on Minecraft and I work on some
          of the animals and enemies in the game. One of the animals that I worked
          on is the ocelot. I worked on the part where you can feed an ocelot a fish
          to tame it into your own cat.
      2:
        image: notes/mc_2016_loops_2.jpg
        text: As humans, we get really bored if we have to do the same thing over
          and over and over again. But the cool thing about computers is that they
          can do the same thing millions or even billions of times in a row without
          getting bored. This repetition is called a loop and every creature in Minecraft
          uses loops.
      3:
        image: notes/mc_2016_loops_3.jpg
        text: Earlier, we got a chicken to move across the screen but then she stopped.
          In Minecraft, the chickens wander around forever and ever. Let's use a "forever
          do" loop from our toolbox to keep our chickens moving around forever too.
          The power of loops will save you tons of time and open up all kinds of neat
          options as you build your own version of Minecraft.
    mc_2016_events:
      1:
        image: notes/mc_2016_events_1.jpg
        text: On this next level, you can pick to be either Steve or Alex. Press the
          arrow buttons on your keyboard to move up, down, left, and right. Now you
          can move around a level wherever you want. To use a creature, just walk
          towards it, turn to face it, and press the spacebar.
      2:
        image: notes/mc_2016_events_2.jpg
        text: If you're using a touch screen, swipe up, down, left, and right to move
          around. Then tap the game to use the item in front of you.
      3:
        image: notes/mc_2016_events_3.jpg
        text: But what happens when you use it? In Minecraft, sheep drop wool when
          you shear them, cows run away when you hit them, and creepers explode when
          you get near them. These reactions happen thanks to something called events.
          Events tell your program to listen or wait for when something happens. And
          when it does, perform an action.
      4:
        image: notes/mc_2016_events_4.jpg
        text: So far, you've used one event. Code you put in the "when spawned" slot
          runs when your creature is created or when the game starts. Over the next
          few levels you'll have new slots for events such as "when touched" that
          runs when you touch the creature, or "when used" for when you use the creature.
          Or, if you want your zombie to disappear when the sun comes up, put that
          in the "when day" slot
    mc_2016_spawn:
      1:
        image: notes/mc_2016_spawn_1.jpg
        text: In games, spawn means the same thing as create. In this level, let's
          make zombies spawn when the sun goes down. To do this, we'll use the "when
          night" block.
      2:
        image: notes/mc_2016_spawn_2.jpg
        text: Since we want the zombies to spawn at night we'll add the "spawn zombie"
          block under the "when night" block. As soon as they're spawned, each zombie
          will run the code that you put in their "when spawned" event slot. Have
          fun spawning zombies!
    mc_2016_congrats:
      1:
        image: notes/mc_2016_congrats_1.jpg
        text: Congratulations! You've learned to use computer science commands to
          bring the Minecraft world to life. You are the developer now. You've unlocked
          all the commands and all the creatures. You choose what happens.
      2:
        image: notes/mc_2016_congrats_2.jpg
        text: When you're done making your game, choose share to get a link that you
          can share with your friends or to play your game on your phone. Have fun!
          I'm looking forward to playing your version of Minecraft.
    applab_intro_welcome:
      1:
        image: notes/applab_intro_welcome_1.png
        text: My name is Mei'lani. I'm an intern at code.org and I'm also a computer
          science student. I like computer science because it's really creative. I
          get to be the problem solver. I get to make everything function how I want
          it to. But I also get to be the designer. I get to be the artist and choose
          everything on the creative side of it.
      2:
        image: notes/applab_intro_welcome_2.png
        text: Making your own apps is easy with App Lab! Whether you're new to coding
          or have some experience. App Lab is a great tool for building new apps and
          sharing them with your friends.
      3:
        image: notes/applab_intro_welcome_3.png
        text: This is a App Lab. On the left side is your app. On the right side is
          the code that will make it run. You build your program by dragging in blocks
          from the toolbox. To start you'll just have one block called 'setProperty'.
      4:
        image: notes/applab_intro_welcome_4.png
        text: The set property block changes the look of the elements on your screen.
          Like the buttons, labels, or even the screen itself. First you need to decide
          which element you want to change. If you hover over an element in your app
          you can see the name or ID here. Then go select that ID from the first drop
          down.
      5:
        image: notes/applab_intro_welcome_5.png
        text: Elements have lots of properties you can change like their text color,
          background color or font size. You can see the full list and choose which
          property you want to change in the second drop down.
      6:
        image: notes/applab_intro_welcome_6.png
        text: The last drop down is where you'll write the value you want to use value
          you want to use. The block will make a suggestion for you. But you can always
          type in different colors or numbers yourself.
      7:
        image: notes/applab_intro_welcome_7.png
        text: Once you're done, the block reads a bit like a sentence:'Set button1's
          background color to green.' Hit run to see the changes you're building in
          code. If you reset you can drag in more blocks to change other things about
          your app. Like the text!
      8:
        image: notes/applab_intro_welcome_8.png
        text: For this tutorial we'll be working in block mode but App Lab also supports
          working in text.
      9:
        image: notes/applab_intro_welcome_9.png
        text: Either way you'll be programming in JavaScript, the language of the
          web. Each level has a goal, instructions and an image of what you're aiming
          to create.
      10:
        image: notes/applab_intro_welcome_10.png
        text: If you're ever stuck, click on this picture and it will show you exactly
          how to complete the level. But see if you can do it on your own first.
      11:
        image: notes/applab_intro_welcome_11.png
        text: Once you've completed the goal for this level click Finish to move on.
          That's all there is to it! Hit the orange "continue" button to go to the
          next level and start your adventure with an App Lab!
    applab_intro_events:
      1:
        image: notes/applab_intro_events_1.png
        text: Apps are really cool because it's kind of like starting your own business
          I mean, you get to design everything from the ground up, you get to manage
          everything, and you're the owner of this piece of work that you just created
          with code.
      2:
        image: notes/applab_intro_events_2.png
        text: Now that you can change the look of your app let's make it interactive
          by responding to events! Events are user actions like clicking a button,
          scrolling through a menu, or hovering over a picture. Interactive apps need
          ways to respond to events, like playing a sound when I click this button.
          To do this in App Lab you need to use a new block called 'onEvent'.
      3:
        image: notes/applab_intro_events_3.png
        text: This program sets the screen to blue. I want the screen to turn green
          when I click this button. First I'll need to drag in an onEvent block. By
          hovering I know the button's ID is "bigButton" so I'll select that in the
          first drop-down.
      4:
        image: notes/applab_intro_events_4.png
        text: Next I'll choose the type of event. There's lots of options you can
          pick from but right now I'll leave it as a regular old click.
      5:
        image: notes/applab_intro_events_5.png
        text: 'Finally I''ll add code inside the on event that will change the background
          color of the screen. You can read this block like a sentence: "On the event
          that the button is clicked run all this code."'
      6:
        image: notes/applab_intro_events_6.png
        text: Let's test it. Blocks outside an onEvent still run right away so the
          screen starts blue.
      7:
        image: notes/applab_intro_events_7.png
        text: And when I click the big button the code inside my onEvent runs and
          my screen turns green.
      8:
        image: notes/applab_intro_events_8.png
        text: If you want to change more things after the event, like the text on
          the screen just add more code to the onEvent
      9:
        image: notes/applab_intro_events_9.png
        text: To make your program respond to more events add more onEvent blocks.
          Just make sure not to put them inside of each other. Now it's time to try
          it out for yourself. Have fun!
    applab_intro_sounds:
      1:
        image: notes/applab_intro_sounds_1.png
        text: Next you'll learn about adding images and sounds to your app. Let's
          start by checking out the sound options.
      2:
        image: notes/applab_intro_sounds_2.png
        text: In the tool box you'll find a new block called "playSound". Drag it
          into the workspace. You can pick a sound to play by clicking the drop-down
          then clicking "Choose".
      3:
        image: notes/applab_intro_sounds_3.png
        text: From here you can either upload a sound file from your computer, or
          search for a sound from the sound library. The sound library has lots of
          different categories like instruments, background music or animals.
      4:
        image: notes/applab_intro_sounds_4.png
        text: Once you've got the sound you want, click "Choose". When this block
          runs, it will play the sound you chose.
      5:
        image: notes/applab_intro_sounds_5.png
        text: To add images to your elements you can just use the setProperty block.
          Select the image property in the second drop-down
      6:
        image: notes/applab_intro_sounds_6.png
        text: Then select "Choose" from the third drop down.
      7:
        image: notes/applab_intro_sounds_7.png
        text: From here you can upload an image from your computer or you can look
          through a huge library of icons in the icon library.
      8:
        image: notes/applab_intro_sounds_8.png
        text: Back in code mode you can use the "setProperty" block to change the
          icon color of your icon. Once you've picked what image your icon to use
          click "Run" to see how it looks.
      9:
        image: notes/applab_intro_sounds_9.png
        text: That's all there is to it! Now you can start adding images and sounds
          to make your apps even more fun and dynamic.
    applab_intro_designmode:
      1:
        image: notes/applab_intro_designmode_1.png
        text: To build your own apps you're going to need to start designing screens
          and elements from scratch. App Lab makes this easy to do with Design Mode.
      2:
        image: notes/applab_intro_designmode_2.png
        text: Use the switch on top of your app to go into Design Mode.
      3:
        image: notes/applab_intro_designmode_3.png
        text: You can add new elements by dragging them onto the screen. You can move
          them around to different locations and change their size by dragging the
          bottom right corner.
      4:
        image: notes/applab_intro_designmode_4.png
        text: To change an element's properties use the controls on the right. For
          example, it's really easy to change this button's text, color, and font
          size.
      5:
        image: notes/applab_intro_designmode_5.png
        text: When you add a new element to your screen it'll get a generic ID like
          button1. It's a good idea to change this button's ID to something more meaningful
          like "rightButton". So that you'll know which one it is when you go to the
          program.
      6:
        image: notes/applab_intro_designmode_6.png
        text: If you add an element to your app by mistake, just drag it out or hit
          the delete.
      7:
        image: notes/applab_intro_designmode_7.png
        text: You can add entirely new screens to your app by dragging in a screen
          element
      8:
        image: notes/applab_intro_designmode_8.png
        text: From the drop-down at the top you can quickly switch back and forth
          between the screens you create.
      9:
        image: notes/applab_intro_designmode_9.png
        text: Inside your app, you'll need a way to switch between all of these screens,
          so the setScreen block has been added to the toolbox. Use "setScreen" inside
          the "onEvent" block to change screens at the click of a button.
      10:
        image: notes/applab_intro_designmode_10.png
        text: In the next few levels you'll be working on a single project. First
          you'll add a button then you'll add a new screen and finally you'll write
          code so that the button switches to the new screen.
    applab_intro_share:
      1:
        image: notes/applab_intro_share_1.png
        text: Now that you've learned some of the basics of App Lab like adding buttons,
          sounds, images, text and new screens you can make all sorts of apps.
      2:
        image: notes/applab_intro_share_2.png
        text: In the next level you'll find the app you just finished building. With
          a little creativity, you can turn this into a personality quiz for your
          friends, a greeting card that you can share with your family or a choose-your-own-adventure
          game. All of these apps are just a combination of the skills you've already
          learned, and I bet you can come up with even more.
      3:
        image: notes/applab_intro_share_3.png
        text: Once you're done with your app you can easily send it to your phone
          to see how it looks. Just click "Share" and enter your phone number here.
      4:
        image: notes/applab_intro_share_4.png
        text: You'll receive a text message that'll let you open up your app instantly.
      5:
        image: notes/applab_intro_share_5.png
        text: You can also share a link to your app over social media or post it to
          the code.org public gallery for other people to play and share.
      6:
        image: notes/applab_intro_share_6.png
        text: You've just scratched the surface of what App Lab can do. Full App Lab
          features more advanced user interactions, new screen elements and even a
          built-in database so you can quickly build full featured apps. At "code.org/applab"
          you'll find the full tool and lots of ideas if you want to keep going.
      7:
        image: notes/applab_intro_share_7.png
        text: Thanks for coming along the ride. Now go build and share your first
          app, and keep on building apps with App Lab!
    mc_2017_agent_intro:
      1:
        image: notes/mc_2017_agent_intro_1.png
        text: 'Stacy: Stampy, Lizzy, Preston - thank you for coming with me. What
          I want to show you is just over this mesa plateau. I think you''re going
          to love it!'
      2:
        image: notes/mc_2017_agent_intro_2.png
        text: Wait a minute - there's a hole in the track! (screaming)
      3:
        image: notes/mc_2017_agent_intro_3.png
        text: 'Is everyone okay? Stampy: Ah, I see the problem. Look! There was a
          hole in the track. Stacy: Really, Stampy? Lizzy: Maybe we should gather
          blocks to fix it. Preston: Let''s make it a race. First one back to the
          top wins. Stacy: Ok, on your mark, get set, GO! Ok, I''m just gonna gather
          some of this terracotta. Wait. Guys, I can''t mine! Preston: Same. Lizzy:
          I can''t either. Stacy: Ok, that is really strange. Stampy, can you mine?
          Stampy: I can''t mine! Stacy: Ok, everyone stay calm. Stampy: Is the game
          broken? Stacy: If it is, how do we fix it? Lizzy: I don''t know. Stampy:
          Does anyone know how to write Minecraft code?'
      4:
        image: notes/mc_2017_agent_intro_4.png
        text: "(poof) Preston: What is that? Stampy: I've never seen one of these
          before. Lizzy: It's so adorable! Stacy: Is it...is it tameable? Preston:
          Okay, what is going on? Someone needs to go back to the real world and fix
          this.  All: Not it! Stacy: Not i- (Sigh.) Ok, I'll go."
      5:
        image: notes/mc_2017_agent_intro_5.png
        text: Oh, okay, hey, so I'm in the real world now. I'm going to go try to
          find the Minecraft offices.
      6:
        image: notes/mc_2017_agent_intro_6.png
        text: But, I'm going to need your help. Start doing the tutorial, start learning
          how to code, and I'll catch up with you guys after a few levels, okay? Wish
          me luck! I think it's this way. Ow! Cactus! I'm okay!
      7:
        image: notes/mc_2017_agent_intro_7.png
        text: To complete the Hour of Code challenge, you'll need to write code to
          program the agent. You'll work together with The Agent to clear any obstacles
          in your path, so you can pick up the items you'll need for your journey.
          Only the Agent can place and break blocks, and only you can collect items.
          Your screen is split into three main parts. On the left is Minecraft.
      8:
        image: notes/mc_2017_agent_intro_8.png
        text: The middle area is the toolbox with commands that the Agent can understand.
      9:
        image: notes/mc_2017_agent_intro_9.png
        text: And on the right, is the workspace. That's where you stack the commands
          to build your program to control the Agent.
      10:
        image: notes/mc_2017_agent_intro_10.png
        text: The Agent can walk, turn, and activate pressure plates. It can also
          destroy blocks and place blocks. When it places the block like these minecart
          rails, it places it underneath itself.
      11:
        image: notes/mc_2017_agent_intro_11.png
        text: If you forget what to do, the instructions for each level are at the
          top.
      12:
        image: notes/mc_2017_agent_intro_12.png
        text: If you want to try again, you can hit the blue reset button to reset
          everything to where it started. And if you need to delete a block of code,
          drag it from your workspace to the toolbox. Remember to hit run to get the
          Agent moving. Okay, go ahead and try out the first few levels. Good luck!
    mc_2017_repeat:
      1:
        image: notes/mc_2017_repeat_1.png
        text: 'Stampy: I wonder what Stacy is up to?'
      2:
        image: notes/mc_2017_repeat_2.png
        text: 'Stacy: Woah, I think I''m in the right place. This is amazing!'
      3:
        image: notes/mc_2017_repeat_3.png
        text: I feel like I'm back in Minecraft! Hello. How are you? Hello?
      4:
        image: notes/mc_2017_repeat_4.png
        text: 'Oh, there''s a creeper. You don''t do anything, do you? Katie: Stacy?
          Stacy:Hi, Katie? Katie: Yes, welcome to Minecraft!'
      5:
        image: notes/mc_2017_repeat_5.png
        text: 'Stacy: This is amazing. So you work here every day as a developer,
          right? Katie: Yeah, it''s pretty awesome. I''m a developer on the Minecraft
          marketplace team. Stacy: How many coding languages do you know? Katie: In
          my career I''ve probably worked with over a dozen. Stacy: A dozen? Katie:
          Yeah. Stacy: So now, you wouldn''t happen to know anything about this little
          golem guy that calls himself the Agent? Katie: We use the Agent to do things
          that Steve or Alex can''t, like go across lava. Stacy: Well, I want to learn
          how to code, and they want to learn how to code, so what is one of the first
          things that you need to know when you''re learning?'
      6:
        image: notes/mc_2017_repeat_6.png
        text: 'Katie: Well, you need to learn how to use loops. Loops are things that
          developers write to give commands to a computer that can be run over and
          over again. Stacy: Got it, so I think there''s actually some of that coming
          up in the levels ahead, so go ahead and give loops a try.'
      7:
        image: notes/mc_2017_repeat_7.png
        text: In the next level, you can use a loop to move the Agent along the path.
          Drag the repeat block into the workspace and place the move forward block
          inside the repeat block. This tells the computer to do the same thing many
          times in a row without having to drag a whole bunch of blocks into the workspace.
          You can choose how many times to repeat by putting a number in the repeat
          block.
      8:
        image: notes/mc_2017_repeat_8.png
        text: You can put turns and multiple commands in the repeat block too, but
          for now try using a repeat to move the Agent forward a few steps. Remember,
          if you get stuck on a puzzle you can always hit the blue reset button and
          try again.
      9:
        image: notes/mc_2017_repeat_9.png
        text: 'If you are thinking about having a cool job like Katie''s, go ahead
          and click the show code button when you finish every level. That''s going
          to actually show you the Javascript code that someone like Katie uses when
          she''s actually programming Minecraft. Katie: Yeah, good luck everyone!'
    mc_2017_functions:
      1:
        image: notes/mc_2017_functions_1.png
        text: 'Preston: I''m not trying to brag, but I''m pretty good at parkour.
          Lizzy: Let''s sleep so it''s day when Stacy comes back.'
      2:
        image: notes/mc_2017_functions_2.png
        text: 'Stacy: Ok guys, I am back from the Minecraft offices, and I think I
          know how to solve the problem I''m having in my game. I think I can use
          a function. Let me just open this.'
      3:
        image: notes/mc_2017_functions_3.png
        text: So a function is a specific set of instructions to accomplish a certain
          task, kind of like a recipe. In the next few levels, you'll have access
          to functions that you can use to solve the puzzles.
      4:
        image: notes/mc_2017_functions_4.png
        text: Look at the code in the function when it's in the workspace to see what
          it does.
      5:
        image: notes/mc_2017_functions_5.png
        text: Then, find the block with that name in the toolbox and drag it from
          the toolbox to the when run block.
      6:
        image: notes/mc_2017_functions_6.png
        text: Remember, you can use the same function every time you need to run the
          same set of instructions to do something, like build a bridge. Good luck,
          I know you can do it!
    mc_2017_congratulations:
      1:
        image: notes/mc_2017_congratulations_1.png
        text: 'Preston: Congratulations!'
      2:
        image: notes/mc_2017_congratulations_2.png
        text: 'Lizzy: Congratulations!'
      3:
        image: notes/mc_2017_congratulations_3.png
        text: 'Stampy: Congratulations, you did it!'
      4:
        image: notes/mc_2017_congratulations_4.png
        text: 'Stacy: Congratulations guys, you totally rocked that! And now that
          you''ve completed the Hour of Code, you can start coding in Minecraft. You''ve
          learned about loops, functions, and what a software Agent does.'
      5:
        image: notes/mc_2017_congratulations_5.png
        text: Now, it's time for the free play level, where you are the developer.
          Use any remaining time to write your own functions to explore, mine, and
          build.
      6:
        image: notes/mc_2017_congratulations_6.png
        text: 'You can take the code that you write in this level into your Minecraft
          world on Minecraft: Education Edition. Just click ''Finish'' and follow
          the instructions for getting the link to use in your world. to continue
          coding with the Agent. Have fun, and good job!'
      7:
        image: notes/mc_2017_congratulations_7.png
        text: 'Stacy: And I''m back! Okay, you guys, this is the Agent! Let me show
          you what it can do. Look, it''s doing it! I told it to build a staircase
          out of these terra cotta blocks, now we can just use this to get out of
          here. And you guys, it''s not just staircases. I can tell the Agent to do
          anything I want, and it will do it for me.'
      8:
        image: notes/mc_2017_congratulations_8.png
        text: 'Stampy: How did you do that? Stacy: It was easy, actually. I just used
          code!'
    csd_concept_how_computers_work:
      1:
        image: notes/csd_concept_how_computers_work_1.png
        text: 'Everywhere you look, computers are changing the world. Whether they''re
          on our desktops, in our homes, our pockets, or just about anywhere else.
          But while most of us use this revolutionary technology daily, we don''t
          often ask: "How do computers work?" In this series, you''re going to learn
          how computers really work, starting with what makes a computer a computer.
          Then, you''ll look at how information is represented inside the computer
          using tiny electrical signals going on and off at mind-boggling speeds.'
      2:
        image: notes/csd_concept_how_computers_work_2.png
        text: After that, you'll learn how computers use circuits to do everything
          from simple math to simulating entire virtual worlds. Next, you'll zoom
          out and look at the different parts of a computer that actually input, output,
          and store all that information. Finally, you'll take a look at what code
          actually is and how software controls hardware. So whether you're just curious
          about the devices you use every day or you want to design the innovations
          of the future, the first step is learning how computers work.
    csd_concept_computer:
      1:
        image: notes/csd_concept_computer_1.png
        text: My name is May-Li Khoe and I'm a designer and an inventor. So some of
          the things I've designed have been at Apple, and now I design products for
          kids to use so that they can have an easier time in school. My other jobs
          include DJ-ing and dancing.
      2:
        image: notes/csd_concept_computer_2.png
        text: Computers are everywhere! They're in people's pockets, they're in people's
          cars, people have them on their wrists. They might be in your backpack right
          now. But what makes a computer a computer? What does make a computer a computer
          anyway? And how does it even work?
      3:
        image: notes/csd_concept_computer_3.png
        text: Hi I'm Nat! I was one of the original designers of the Xbox. I've been
          working with computers since I was maybe seven years old and now I work
          on virtual reality. As humans, we've always built tools to help us solve
          problems. Tools like a wheelbarrow, a hammer, or a printing press, or a
          tractor-trailer.
      4:
        image: notes/csd_concept_computer_4.png
        text: All of these inventions helped us with manual work. Over time, people
          began to wonder if a machine could be designed and built to help us with
          the thinking work we do, like solving equations or tracking the stars in
          the sky. Rather than moving or manipulating physical things like dirt and
          stone, these machines would need to be designed to manipulate information.
          As the pioneers of computer science explored how to design a thinking machine,
          they realized that it had to perform four different tasks.
      5:
        image: notes/csd_concept_computer_5.png
        text: It would need to take input, store information process it and then output
          the results. Now this might sound simple, but these four things are common
          to all computers. That's what makes a computer a computer.
      6:
        image: notes/csd_concept_computer_6.png
        text: Computers started out as basic calculators, which was already really
          awesome at the time, and they were only manipulating numbers back then.
          But now we can use them to talk to each other, we can use them to play games,
          control robots, and do any crazy thing that you could probably imagine.
          Modern computers look nothing like those clunky old machines but they still
          do these same four things.
      7:
        image: notes/csd_concept_computer_7.png
        text: First, we're going to talk about input. You can tell computers what
          to do with the keyboard, you can tell them what to do with the mouse, the
          microphone, the camera. All these different inputs give a computer information,
          which is then stored in memory.
      8:
        image: notes/csd_concept_computer_8.png
        text: A computer's processor takes information from memory. It manipulates
          it or changes it using an algorithm, which is just a series of commands.
          And then it sends the processed information back to be stored in memory
          again. This continues until the processed information is ready to be output.
      9:
        image: notes/csd_concept_computer_9.png
        text: How a computer outputs information depends on what the computer is designed
          to do. A computer display can show text, photos, videos, or interactive
          games -- even virtual reality! The output of a computer may even include
          signals to control a robot.
      10:
        image: notes/csd_concept_computer_10.png
        text: And who knows what the computers of tomorrow will be like? My hope is
          that you get to help decide what you want the computers of tomorrow to look
          like. But across all computers, regardless of the different types of technology
          they use, they're always doing those same four things. They take in information,
          they store it as data, they process it, and then they output the results.
    csd_concept_binary_data:
      1:
        image: notes/csd_concept_binary_data_1.png
        text: Hi! My name is Limor Fried, and I'm an engineer here at Adafruit Industries.
          And this is where I do engineering and design, and I design circuits for
          fashion and music and technology.
      2:
        image: notes/csd_concept_binary_data_2.png
        text: My name is Federico Gomez Suarez, and I'm a software developer with
          Microsoft Hack for Good. And I look into using technology to help us solve
          some of the big social problems of our times.
      3:
        image: notes/csd_concept_binary_data_3.png
        text: You may have heard that computers work on ones and zeros. But almost
          nobody today actually deals directly with these ones and zeros. But ones
          and zeroes do play a big role in how computers work on the inside.
      4:
        image: notes/csd_concept_binary_data_4.png
        text: Inside a computer are electric wires and circuits that carry all the
          information in a computer. How do you store or represent information using
          electricity?
      5:
        image: notes/csd_concept_binary_data_5.png
        text: Well, if you have a single wire with electricity flowing through it,
          the signal could either be on or off. That's not a lot of choices, but it's
          a really important start. With one wire, we can represent a yes or no, true
          or false, a one or zero, or anything else with only two options. This on/off
          state of a single wire is called a bit, and it's the smallest piece of information
          a computer can store.
      6:
        image: notes/csd_concept_binary_data_6.png
        text: 'If you use more wires you get more bits: more ones and zeros. With
          more bits you can represent more complex information. But to understand
          that, we need to learn about something called the binary number system.'
      7:
        image: notes/csd_concept_binary_data_7.png
        text: 'In the decimal number system, we have ten digits from zero to nine,
          and that''s how we''ve all learned to count. In the binary number system,
          we only have two digits: zero and one. With these two digits, we can count
          up to any number.'
      8:
        image: notes/csd_concept_binary_data_8.png
        text: Here's how this works. In a decimal number system we're all used to,
          each position in a number has a different value. There's a 1 position, the
          10 position, the 100 position, and so on. For example, a 9 in the 100 position
          is a 900. In binary, each position also carries a value. But instead of
          multiplying by 10 each time, we multiply by 2. So there's the 1 position,
          the 2 position, the 4 position, the 8 position, and so on. For example,
          the number 9 in binary is 1001. To calculate the value, we add 1 times 8,
          plus 0 times 4, plus 0 times 2, plus 1 times 1. Almost nobody does this
          math because computers do it for us. What's important is that any number
          can be represented with only ones and zeros, or by a bunch of wires that
          are on or off. The more wires you use, the larger the numbers you can store.
          With 8 wires, you can store numbers between 0 and 255. That's 8 ones. With
          just 32 wires, you can store all the way from 0 to over 4 billion. Using
          the binary number system, you can represent any number you like.
      9:
        image: notes/csd_concept_binary_data_9.png
        text: But what about other types of information? Like text, images, or sound?
          It turns out that all these things can also be represented with numbers.
          Think of all the letters in the alphabet. You could assign a number to each
          letter. A could be 1, B could be 2, and so on. You can then represent any
          word or paragraph as a sequence of numbers. And as we saw, these numbers
          can be stored as on or off electrical signals. Every word you see on every
          webpage or your phone is represented using a system like this.
      10:
        image: notes/csd_concept_binary_data_10.png
        text: Now, let's consider photos, videos, and all the graphics you see on
          a screen.
      11:
        image: notes/csd_concept_binary_data_11.png
        text: All of these images are made out of teeny dots called pixels, and each
          pixel has a color. Each of the colors can be represented with numbers. When
          you consider the typical image has millions of these pixels, and the typical
          video shows 30 images per second now we're talking about a lot of data here.
      12:
        image: notes/csd_concept_binary_data_12.png
        text: Every sound is basically a series of vibrations in the air. Vibrations
          can be represented graphically as a waveform. Any point on this waveform
          can be represented by a number. And this way, any sound can be broken down
          into a series of numbers. If you want higher quality sound, you will pick
          32-bit audio or an 8-bit audio. More bits means a higher range of numbers.
      13:
        image: notes/csd_concept_binary_data_13.png
        text: When you use a computer to write code or make your own app, you're not
          dealing directly with these ones and zeros. But you will be dealing with
          images or sound or video. So if you want to understand how computers work
          on the inside, it all comes down these simple ones and zeros and the electrical
          signals in the circuits behind them.
    csd_concept_circuits_logic:
      1:
        image: notes/csd_concept_circuits_logic_1.png
        text: One of the coolest things I've discovered about circuits is circuitry
          can be an art form like if I have a creative idea, I can get that creative
          idea out using circuits. So if you have ideas, you can use technology to
          make those ideas come to life.
      2:
        image: notes/csd_concept_circuits_logic_2.png
        text: Every input or output of a computer is effectively a type of information,
          which can be represented by on or off electrical signals or ones and zeros.
      3:
        image: notes/csd_concept_circuits_logic_3.png
        text: In order to process the information that comes in as input, and to make
          the information that is output, a computer needs to modify and combine the
          input signals. To do this, a computer uses millions of teeny electronic
          components, which come together to form circuits.
      4:
        image: notes/csd_concept_circuits_logic_4.png
        text: Let's take a closer look at how circuits can modify and process information
          that's represented in ones and zeros. This is an incredibly simple circuit.
          It takes an electrical signal, on or off, and it flips it. So if the signal
          you give it is a 1, the circuit gives you a 0, and if you give the circuit
          a 0, it gives you a 1. The signal that goes in is not the same as the signal
          that comes out, and so we call this circuit NOT.
      5:
        image: notes/csd_concept_circuits_logic_5.png
        text: More complicated circuits can take multiple signals and combine them,
          and give you a different result. In this example, a circuit will take two
          electrical signals, now each one might be a 1 or a 0. If either of the signals
          coming in is a 0, then the result is also a 0. This circuit will only give
          you a 1, if the first signal and the second signal are both a 1, and so
          we call the circuit AND.
      6:
        image: notes/csd_concept_circuits_logic_6.png
        text: There are many small circuits like this that perform simple logical
          calculations. By connecting these circuits together, we can make more complex
          circuits that perform more complex calculations.
      7:
        image: notes/csd_concept_circuits_logic_7.png
        text: For example, you can make a circuit that adds 2 bits together called
          an adder. This circuit takes in 2 individual bits, each one a 1 or a 0,
          and adds them together to calculate the sum. The sum can be 0 plus 0 equals
          0, 0 plus 1 equals 1, or 1 plus 1 equals 2. You need two wires coming out
          because it can take up to two binary digits to represent the sum. Once you
          have a single adder for adding two bits of information, you can put together
          multiples of these adder circuits side-by-side to add together much larger
          numbers.
      8:
        image: notes/csd_concept_circuits_logic_8.png
        text: For example, here's how an 8-bit adder adds the numbers 25 and 50. Each
          number is represented using 8 bits, resulting in 16 different electrical
          signals that go into the circuit. The circuit for an 8-bit adder has lots
          of little adders inside of it, which together, calculate the sum.
      9:
        image: notes/csd_concept_circuits_logic_9.png
        text: Different electrical circuits can perform other simple calculations
          like subtraction or multiplication. In fact, all the information processing
          your computer does is just lots and lots of small simple operations put
          together. Each individual operation done by a computer is so, so simple
          it could be done by a human, but these circuits inside computers are way
          way faster.
      10:
        image: notes/csd_concept_circuits_logic_10.png
        text: Back in the day, these circuits were big and clunky, and an 8-bit adder
          could be as big as a fridge, and it would take minutes for them to perform
          a simple calculation. Today, computer circuits are microscopic in size,
          and way way faster. Why are smaller computers also faster? Well, because
          the smaller the circuit is, the less distance the electrical signal has
          to go. Electricity moves at just about the speed of light, which is why
          modern circuits can perform billions of calculations per second.
      11:
        image: notes/csd_concept_circuits_logic_11.png
        text: So whether you're playing a game, recording a video, or exploring the
          cosmos, everything you could possibly do with technology requires lots of
          information to be processed extremely quickly. Underneath all this complexity
          is just lots of teeny little circuits that turn binary signals into websites,
          videos, music, and games. These circuits can even help us decode DNA to
          diagnose and cure disease. So what would you like to do with all these circuits?
    csd_concept_memory_cpu_input_output:
      1:
        image: notes/csd_concept_memory_cpu_input_output_1.png
        text: Hi, my name is Madison Maxey. I have a company called Loomia, and we
          focus on making smart fabrics for smart clothing and smart soft good products.
          The sky's the limit when it comes to textiles.
      2:
        image: notes/csd_concept_memory_cpu_input_output_2.png
        text: My name is Danielle Applestone, and I'm CEO of Othermachine Company.
          We build a desktop milling machine. A milling machine takes a rotating cutting
          tool and moves it through material to create a 3D object.
      3:
        image: notes/csd_concept_memory_cpu_input_output_3.png
        text: Under the hood, all computers do the same four basic things. They input
          information, store and process the information, and then, output information.
          Each of these things is done by a different part of the computer.
      4:
        image: notes/csd_concept_memory_cpu_input_output_4.png
        text: There are input devices that take input from the outside world and convert
          it into binary information. There is memory to store this information. There's
          a central processing unit or CPU, where all the calculations are done. And,
          finally, there are output devices that take information and convert it into
          a physical output.
      5:
        image: notes/csd_concept_memory_cpu_input_output_5.png
        text: Let's talk about input first. Computers can take many different types
          of input, like the keyboard of a computer, the touchpad of a phone, a camera,
          a microphone, or a GPS. But even the sensors on a car, a thermostat, or
          a drone are also different input devices.
      6:
        image: notes/csd_concept_memory_cpu_input_output_6.png
        text: Now, let's look at a simple example of how input travels through a computer
          and becomes output. When you press a key on your keyboard - let's say the
          letter "B". The keyboard converts the letter to a number. That number is
          sent as binary, ones and zeros, into the computer.
      7:
        image: notes/csd_concept_memory_cpu_input_output_7.png
        text: Starting from this number, the CPU calculates how to display the letter
          "B" pixel by pixel. The CPU requests step-by-step instructions from memory,
          which tell it how to draw the letter "B". The CPU runs these instructions
          and stores the results as pixels in memory.
      8:
        image: notes/csd_concept_memory_cpu_input_output_8.png
        text: Finally, this pixel information is sent in binary to the screen. The
          screen is an output device, which converts the binary signals into the tiny
          lights and colors that make up what you see.
      9:
        image: notes/csd_concept_memory_cpu_input_output_9.png
        text: This all happens so quickly it feels instantaneous, but to display each
          letter a computer runs thousands of instructions, starting from the moment
          your finger presses the key point.
      10:
        image: notes/csd_concept_memory_cpu_input_output_10.png
        text: In that example, the output device was the screen, but there are many
          different types of output which take a binary signal from the computer and
          do something in the physical world. For example, a speaker will play sound,
          and a 3D printer will print an object. Output devices can also control physical
          motion like a robotic arm, the motor of a car, or the cutting tool of the
          milling machine that my company makes. New types of inputs and outputs let
          computers interact with the world in entirely new ways. This has been helped
          out by improvements to the speed and size of the memory and CPU.
      11:
        image: notes/csd_concept_memory_cpu_input_output_11.png
        text: The more complicated a task is and the more information that is input
          or output, the more processing power and memory a computer needs. Typing
          letters on a screen may be easy but to do complicated 3d graphics or record
          a high-definition movie, modern computers often have multiple CPUs to process
          all that information and many gigabytes of memory to store it.
      12:
        image: notes/csd_concept_memory_cpu_input_output_12.png
        text: 'No matter what it is you want to do with the computer, every single
          action is about: inputting information from the physical world, storing
          and processing that information, and getting some output back into the physical
          world.'
    csd_concept_hardware_software:
      1:
        image: notes/csd_concept_hardware_software_1.png
        text: Hi, my name is Erica Gomez and I'm an engineering manager at Amazon.com.
          One of the best things about working in tech, and at Amazon in particular,
          is that I get to bring my dog with me to work every day. My job is to help
          make sure software gets out the door and her job is to nap under my desk
          and snore very loudly.
      2:
        image: notes/csd_concept_hardware_software_2.png
        text: 'My name is Jerome Holman, and I''m a Program Manager on Team Xbox and
          I have a really fun job: Basically bringing the hardware and the software
          together to give you all the games that you love on your Xbox.'
      3:
        image: notes/csd_concept_hardware_software_3.png
        text: When you look inside a computing device you see a bunch of circuits,
          chips, wires, speakers, plugs, and all sorts of other stuff. This is the
          hardware.
      4:
        image: notes/csd_concept_hardware_software_4.png
        text: But what you don't see is the software. Software is all of the computer
          programs, or code, running on this machine. Software can be anything from
          apps and games to webpages and the data science software that me and my
          teams use at Amazon to understand how customers behave.
      5:
        image: notes/csd_concept_hardware_software_5.png
        text: But how do the hardware and the software interact with one another?
          Let's start at looking at a computer's central processing unit, or CPU.
      6:
        image: notes/csd_concept_hardware_software_6.png
        text: The CPU is the master chip that controls all the other parts of the
          computer. A CPU needs to do different things so inside it has smaller, simpler
          parts that handle specific tasks. It has circuits to do simple math and
          logic. It has other circuits to send and receive information to and from
          different parts of the computer.
      7:
        image: notes/csd_concept_hardware_software_7.png
        text: The real magic of the CPU is how it knows which circuits to use and
          when to use them. The CPU receives simple commands that tell it which circuit
          to use to do a specific job. For example, an "add" command tells the CPU
          to use its outer circuit to calculate a new number. And then the "store"
          command tells the CPU to use a different circuit to save that result into
          memory.
      8:
        image: notes/csd_concept_hardware_software_8.png
        text: Just like numbers, all of these simple commands can be represented in
          binary ones and zeros or on and off electrical signals. The binary commands
          are stored in memory and the CPU fetches and executes them in sequence one
          after the other. This sequence of commands is, in fact, a very simple computer
          program.
      9:
        image: notes/csd_concept_hardware_software_9.png
        text: Binary code is the most basic form of software and it controls all the
          hardware of a computer. These days, nobody writes software in binary. It
          would take forever!
      10:
        image: notes/csd_concept_hardware_software_10.png
        text: Today, the software we write looks more like this (Python), or this
          (Ruby), or even this (Blockly). Programming languages like these let you
          type in commands in something that looks a lot like English.
      11:
        image: notes/csd_concept_hardware_software_11.png
        text: To draw a rectangle on the screen, you just need a single command. This
          high-level command is converted into hundreds, or thousands, of simpler
          binary commands that the CPU understands. Software tells the CPU what to
          do, but when you're listening to music, and browsing the web, and chatting
          with a friend, your computer is running multiple pieces of software all
          at once.
      12:
        image: notes/csd_concept_hardware_software_12.png
        text: So, how do all of these programs get on the computer in the first place,
          and how can the CPU run them all at once? To find out we'll have to take
          a look at the operating system.
      13:
        image: notes/csd_concept_hardware_software_13.png
        text: The operating system of the computer is the master program that manages
          how software gets to use the hardware of the computer. For example, I helped
          create the Windows operating system that runs on most personal computers.
      14:
        image: notes/csd_concept_hardware_software_14.png
        text: The operating system is a program with special abilities that let it
          control the other software on the computer. It lets you install new programs
          by loading them into your computer's memory. It decides when a program is
          run by the central processing unit, and whether that program can access
          the computer's input and output devices. And when you think your computer
          is running many programs at once, in reality, it's the operating system
          that's quickly switching between programs sharing that CPU for fractions
          of a second.
      15:
        image: notes/csd_concept_hardware_software_15.png
        text: Inside every computer is an operating system managing software that
          controls the computer's hardware.
      16:
        image: notes/csd_concept_hardware_software_16.png
        text: The software is a series of commands made of simple binary code, and
          that binary code is just electrical signals flowing through billions of
          tiny circuits.
      17:
        image: notes/csd_concept_hardware_software_17.png
        text: Computers have the potential to do all kinds of amazing things. But
          the only thing that makes the computer smart, or useful, is you. When you
          learn to code you get to define the problem you want to solve, and write
          the software that turns those ideas into reality.
