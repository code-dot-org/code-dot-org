"sq":
  slides:
    maze_intro:
      1:
        image: notes/hoc1_1.jpg
        text: Mirësevini ne orën tuaj të parë të kodimit! Le të zhytemi në shijen
          tuaj të parë të programimit.
      2:
        image: notes/hoc1_2.jpg
        text: Do të përdorim një gjuhë programimi vizuale të quajtur Blockly, ku mund
          të lëvizim blloqe për të shkruajtur kod.
      3:
        image: notes/hoc1_3.jpg
        text: Shumica e kodit shkruhet, por Blockly është mënyrë paraqitjeje vizuale.
          Çdo bllok i korrespondon një rreshti real kodi.
      4:
        image: notes/hoc1_4.jpg
        text: Ti do mësosh bazat e shkencës kompjuterike, konceptet, të cilat janë
          përdorur kudo, nga krijimi i aplikacioneve tek kontrolli i makinës në Mars.
      5:
        image: notes/hoc1_5.jpg
        text: Një program është një grumbull udhëzimesh që ndjek kompjuteri juaj.
      6:
        image: notes/hoc1_6.jpg
        text: Qëllimi i programit tuaj të parë, është të çojë një Angry Bird ndërmjet
          një labiriniti për të gjuajtur një Derrkuc të Gjelbër.
      7:
        image: notes/hoc1_7.jpg
        text: Ana e majtë është labirinti ku ekzekutohet programi juaj. Udhëzimet
          për çdo formues janë poshtë tunelit.
      8:
        image: notes/hoc1_8.jpg
        text: Toolbox-i i mesit ka komandat e Angry Bird. Ti do të përdorësh ato për
          të ndërtuar kodin tënd.
      9:
        image: notes/hoc1_9.jpg
        text: Djathtas është vendi yt i punës ku ti do lëvizësh blloqet nga toolboxi
          për të ndërtuar programin tënd. Për të fshirë një bllok, lëvize atë tek
          koshi në cep.
      10:
        image: notes/hoc1_10.jpg
        text: Çdo bllok është një udhëzim. Nëse ti lëviz një bllok "move forward"
          tek zona jote e punës dhe shtyp "Run Program", zogu do lëvizë një hapësirë
          në labirint.
      11:
        image: notes/hoc1_11.jpg
        text: Për të bërë më shumë se një veprim, ti mund të lëvizësh shumë blloqe
          tek zona jote e punës dhe bashkangjiti ato bashkë. Zogu do bëjë komandat
          nga lart poshtë.
      12:
        image: notes/hoc1_12.jpg
        text: Nëse ti ekzekuton një program dhe dëshiron ta rregullosh atë dhe ta
          përsërisësh, shtyp butonin "Reset".
      13:
        image: notes/hoc1_13.jpg
        text: Le të shkojmë ti kapim ata derrkuca!
    artist_intro:
      1:
        image: notes/stage5_1.jpg
        text: Pëshëndetje! Unë jam JR! Çdo ekip garash makine ka nevojë shkencëtarë
          kompjuterash për të fituar. Ata analizojnë të dhëna nga makina për ta bërë
          atë të ecë më shpejt.
      2:
        image: notes/stage5_2.jpg
        text: Në këto puzzle-a ti do jesh një artist që vizaton një vijë mbrapa tyre
          kudo që ata shkojnë.
      3:
        image: notes/stage5_3.jpg
        text: Ky bllok thotë "move forward by 100 pixels". Pikselat janë pika vërtet
          të vogla në ekranin tënd.
      4:
        image: notes/stage5_4.jpg
        text: Ky bllok thotë "turn right by 90 degrees." Kjo do të kthejë artistin
          tënd në të njëjtën sasi si blloqet "turn" në formueset e labirintit.
      5:
        image: notes/stage5_5.jpg
        text: Kliko tek shigjeta në secilën nga këto blloqe për të ndryshuar vlerën
          e artistit kur ecën përpara ose kthehet. Luaj për tu familjarizuar me këto
          blloqe të reja.
    farmer_intro:
      1:
        image: notes/stage9_1.jpg
        text: Përshëndetje, unë jam Paola! Në këto formues, ti je një fermer, i cili
          duhet të bëjë fushën komplet të sheshtë për të filluar mbjelljen e prodhimeve.
      2:
        image: notes/stage9_2.jpg
        text: Ti duhet ta ndihmosh atë të heqë të gjithë grumbujt me dhe dhe të mbushë
          të gjitha gropat.
      3:
        image: notes/stage9_3.jpg
        text: Blloku i ri heq 1 lopatë dhe nga grumbulli dhe mbush me të një gropë.
      4:
        image: notes/stage9_4.jpg
        text: Grumbujt dhe gropat janë të madhësive të ndryshme, kështu që ti duhet
          ti thuash fermerit se sa lopata duhet të përdorë.
    flappy_intro:
      1:
        image: notes/flappy01.jpg
        text: Përshëndetje, unë jam Katie! Një nga gjërat më emocionuese rreth shkencës
          kompjuterike është që një program kompjuterik mund të jetë interaktiv.
      2:
        image: notes/flappy02.jpg
        text: "Çdo moment kur dikush klikon ose shtyp në një kompjuter ose telefon,
          kjo do gjenerojë një EVENT, dhe ka pjesë kodi që vendosin çfarë bëhet kur
          ndodh një EVENT."
      3:
        image: notes/flappy03.jpg
        text: 'Për shembull, ti mund të kesh një EVENT-HANDLER që thotë "kur mouse
          klikohet, luaj një muzikë" '
      4:
        image: notes/flappy04.jpg
        text: A ke dëgjuar ndonjëherë për lojën FlappyBird? Duke përdorur Event handlers,
          ne do të mësojmë të programojmë versionin tonë të FlappyBird!
      5:
        image: notes/flappy05.jpg
        text: Kodi që do shkruash përfshin lëvizjen e blloqeve që përfaqësojnë komandat
          për kompjuterin. Në të vërtetë, secili nga këto blloqe përfaqësohet nga
          kodi i vërtetë.
      6:
        image: notes/flappy06.jpg
        text: 'Nëse hedh një vështrim tek vendi jot i punës, ka disa blloqe të gjelbër
          që janë mbushur për ty - këto janë "event handlers" '
      7:
        image: notes/flappy07.jpg
        text: Nëse do që zogu të PËRPLASET kur ti KLIKON mouse-in, mund t'a bësh këtë
          duke bashkuar bllokun "FLAP" tek mbajtësi i duhur i eventit dhe tani në
          lojën tënde kurdo që ti klikon mousin, zogu do përplaset.
      8:
        image: notes/flappy08.jpg
        text: Në çdo puzzle të këtij aktiviteti ne do të prezantojmë tipe të reja
          eventesh si blloqe të gjelbra në vendin tënd të punës, dhe ti mund të vendosësh
          blloqet e përshtatshëm për ti shtuar në përgjigje të këtyre eventeve.
      9:
        image: notes/flappy09.jpg
        text: Kur të shohësh një shigjetë drop down si kjo, kjo nënkupton që ti mund
          të ndryshosh konfigurimet - si për shembull çfarë muzike të luash kur flappy
          prek tokën.
      10:
        image: notes/flappy10.jpg
        text: Në formuesin përfundimtar, ti do të kesh mundësi të krijosh lojën tënde
          dhe ta ndash atë me shokët e tu. Bëfsh qejf!
    loop_times:
      1:
        image: notes/hoc2_1.jpg
        text: Përshëndetje, unë jam Mark! Le të mësojmë rreth cikleve. Duke përdorur
          ciklet, ti mund ti thuash kompjuterit të përsërisë një grup veprimesh herë
          pas here, mijëra ose biliona herë.
      2:
        image: notes/hoc2_2.jpg
        text: Në këtë formues, ne duam të bëjmë zogun që të ecë 5 hapësira përpara
          për të arritur derrkucin.
      3:
        image: notes/hoc2_3.jpg
        text: Ne mund të përdorim bllokun e ri "repeat" për të na ndihmuar.
      4:
        image: notes/hoc2_4.jpg
        text: Në vend që të lëvizësh 5 blloqe "move forward"...
      5:
        image: notes/hoc2_5.jpg
        text: Ne mund të vendosim bllokun "move forward" brenda bllokut "repeat" dhe
          shkruaj një numër në bllok për ti thënë sa herë të përsëritet.
      6:
        image: notes/hoc2_6.jpg
        text: 'Dhe kjo është e rëndësishme: ti mund të vendosësh më shumë se një komandë
          brenda bllokut "repeat".'
      7:
        image: notes/hoc2_7.jpg
        text: Argëtohu duke përdorur bllokun tënd të ri "repeat"!
    loop_until:
      1:
        image: notes/hoc3_1.jpg
        text: Përshëndetje, unë jam Chris. Përpara se të bashkohesha me Miami Heat,
          unë shkova në Georgia Tech për të studiuar Shkenca Kompjuterike. Le të provojmë
          bllokun tonë të ri "repeat until".
      2:
        image: notes/hoc3_2.jpg
        text: Po sikur ne nuk do e dinim sa larg duhej të lëvizte zogu për të arritur
          te derrkuci?
      3:
        image: notes/hoc3_3.jpg
        text: Nëse ne vendosim një bllok "move forward" brenda bllokut "repeat until",
          zogu do të ecë përpara DERISA të arrijë derrkucin (ose të përplaset me ndonjë
          mur).
      4:
        image: notes/hoc3_4.jpg
        text: 'Dhe kjo është shumë e rëndësishme: si më përpara, ne mund të vendosim
          blloqe të shumtë brenda bllokut "repeat until" dhe të gjithë do të përsëriten.'
    if:
      1:
        image: notes/hoc4_1.jpg
        text: 'Përshëndetje, unë jam Bill! Le të mësojmë një koncept bazë: deklaratat
          "If". Kjo është se si kompjuterat marrin vendime.'
      2:
        image: notes/hoc4_2.jpg
        text: Ti i përdor deklaratat "If" me veten tënde çdo ditë. Përpara se të dalësh
          çdo mëngjes, ti thua NËSE është duke rënë shi jashtë, unë duhet të vesh
          xhaketën time.
      3:
        image: notes/hoc4_3.jpg
        text: Ne mund ti themi zombit të kontrollojë NËSE ka rrugë nga e majta, dhe
          nëse gjen një rrugë majtas, ne mund ta bëjmë atë të kthehet në atë drejtim.
      4:
        image: notes/hoc4_4.jpg
        text: Për të shkruar kodin për këtë, le të zhvendosim bllokun tonë "if" dhe
          vendosim një bllok "turn left" brenda tij.
      5:
        image: notes/hoc4_5.jpg
        text: Tani, nëse ne vendosim një bllok "move forward" mbi atë dhe një bllok
          "repeat" për rreth çdo gjëje, çdo herë që zombi lëviz, ai do të kontrollojë
          nëse ka rrugë majtas dhe kthehet. Komanda "repeat" është kritike, për të
          kontrolluar për një kthim në çdo hap.
      6:
        image: notes/hoc4_6.jpg
        text: Përcaktimet If janë shumë të rëndësishme në shkencën kompjuterike. Një
          nga programet e para që shkruajta ishte një lojë tic-tac-toe, dhe ishte
          një përcaktim If që thoshte NËSE personi tjetër po fiton, blloko vendin
          që le atë të fitojë.
      7:
        image: notes/hoc4_7.jpg
        text: Argëtohu duke përdorur bllokun "if"!
    if_else:
      1:
        image: notes/hoc5_1.jpg
        text: Përshëndetje, emri im është Saloni. Unë përdor shkencën kompjuterike
          për të ndihmuar në zgjidhjen e problemeve në shëndet dhe mjekësi. Le të
          mësojmë rreth bllokut "if else". Duket si blloku "if", por ka një pjesë
          shtesë në fund që thotë "else".
      2:
        image: notes/hoc5_2.jpg
        text: Nëse unë vendos një bllok "move forward" në vendin ku thotë "do" dhe
          një bllok "turn left" ku thotë "else" kjo do të thotë qe zombi do të zgjedhë
          ndërmjet dy mundësive. NËSE ka rrugë përpara, zombi do të ecë përpara, dhe
          PËRNDRYSHE (nëse nuk ka rrugë përpara), zombi do të kthehet majtas.
      3:
        image: notes/hoc5_3.jpg
        text: Si blloku "if", ne mund të vendosim blloqet "if else" brenda një blloku
          "repeat" në mënyrë që zombi të vazhdojë lëvizjen dhe blloku "if else" do
          të vazhdojë të kontrollojë nëse ka për tu kthyer diku.
      4:
        image: notes/hoc5_4.jpg
        text: Tani, çoni zombit aty ku duhet të jenë!
    if_else_scrat:
      1:
        image: notes/saloni_ifelse_scrat1.jpg
        text: Një përcaktim if else është një vendim midis dy gjërave. Le të shohim
          se si ne mund të përdorim një përcaktim if-else me shokun tonë, ketrin Scrat.
      2:
        image: notes/saloni_ifelse_scrat2.jpg
        text: Ky bllok duket njësoj me bllokun "if", por ka një pjesë shtesë në fund
          që thotë "else". Nëse unë vendos një bllok "move forward" ku thotë "do"
          dhe një bllok "turn left" ku thotë "else", kjo nënkupton që ketri Scrat
          do të ecë përpara nëse ka rrugë. Nëse nuk ka rrugë, Scrat do kthehet majtas.
      3:
        image: notes/saloni_ifelse_scrat3.jpg
        text: Të marrësh një vendim dhe të bësh një nga dy vendimet bazuar në atë
          vendim. Dhe njësoj si blloqet "if", ti mund të vendosësh blloqet "if-else"
          brenda blloqeve "repeat".
      4:
        image: notes/saloni_ifelse_scrat4.jpg
        text: Tani, le ta ndihmojmë ketrin Scrat të marrë atë lajthi!
    function:
      1:
        image: notes/stage13_1.jpg
        text: Përshëndetje, unë jam Brina, një inxhiniere tek Instagram. Një funksion
          është një kod me rreshta që ti do ti përdorësh disa herë, kështu që në vënd
          të shkruash atë kod gjithë ato herë, ti mund të përdorësh një bllok.
      2:
        image: notes/stage13_2.jpg
        text: Ne do të mësojmë si të përcaktojmë funksionet. Përcaktimet e funksionit
          kanë një yll në cep. Emri i funksionit shkruhet në rreshtin kryesor.
      3:
        image: notes/stage13_3.jpg
        text: Blloqet që shkojnë brenda përcaktimit na thotë cfarë të bëjmë. Kështu
          që përcaktimi i funksionit quhet "mbush 5" dhe përbëhet nga blloku "repeat"
          dhe blloku "fill".
      4:
        image: notes/stage13_4.jpg
        text: Pëcaktimi qëndron në zonën tënde të punës, por fermeri ynë nuk e ekzekuton
          funksionin derisa ne të zhvendosim bllokun e funksionit tonë "fill 5" nga
          kategoria funksioneve.
      5:
        image: notes/stage13_5.jpg
        text: Let's put the "fun" back in "FUNction!"
    loop_while:
      1:
        image: notes/stage9_5.jpg
        text: 'Përshëndetje, unë jam Makinde! Le të mësojmë rreth "blloqeve të bardha". '
      2:
        image: notes/stage9_6.jpg
        text: Blloku "while" do bëjë gjithçka që ti vendos brenda atij PËR SA KOHË
          që përcaktimi lart është I VËRTETË.
      3:
        image: notes/stage9_7.jpg
        text: Për shembull, nëse fermeri është duke qëndruar në një grumbull, ajo
          do të vazhdojë të heqë 1 lopatë NDËRKOHË që ka ende një gropë rreth saj.
    loop_for:
      1:
        image: notes/stage11_1.jpg
        text: Përshëndetje, unë jam Trina dhe punoj për Pixar. Kam punuar në shumë
          filma, duke përfshirë Shrek.
      2:
        image: notes/stage11_2.jpg
        text: Ky është cikli ynë i ri "counter". Do të kryejë veprime herë pas here
          dhe ti mund ti ndryshosh veprimet çdo herë nga pak.
      3:
        image: notes/stage11_3.jpg
        text: Në këtë shembull, cikli jonë "counter" thotë "numëro me numëruesin nga
          50 tek 90 me 10" dhe brenda tij ne kemi një bllok "draw a square". Zhvendos
          bllokun "counter" nga pjesa "Variablave" në vendin e "gjatësisë".
      4:
        image: notes/stage11_4.jpg
        text: Kjo nënkupton që artisti jonë do të vizatojë një katror që ka gjatësi
          brinjësh 50 piksela , më pas do të shtojë 10 tek ajo dhe do të vizatojë
          një katror me gjatësi brinjësh 60 piksela. Më pas do vazhdojë të shtojë
          nga 10 dhe të vizatojë katorrë derisa të arrijë 90. Kështu që ne do kemi
          katrorë 50, 60, 70, 80 dhe 90.
    parameters:
      1:
        image: notes/stage15_1.jpg
        text: Përshëndetje, unë jam Janete dhe jam inxhiniere tek Zynga.
      2:
        image: notes/stage15_2.jpg
        text: Po nëse ne duam të vizatojmë një grup trekëndëshash dhe ti kemi me madhësi
          të ndryshme?
      3:
        image: notes/stage15_3.jpg
        text: Ne mund të shkruanim gjithe kodin me dorë ose ne mund të përdorim një
          funksion me parametra.
      4:
        image: notes/stage15_4.jpg
        text: Për ta bërë këtë, kliko yllin blu në përcaktimin e funksionit "draw
          a triangle". Më pas, zhvendos bllokun "input name" në bllokun "input".
      5:
        image: notes/stage15_5.jpg
        text: Më pas, nëse ti shkruan "gjatësi" në vendin ku thotë "x" dhe shtyp "Enter",
          ti do të krijosh një length input për funksionin tënd.
      6:
        image: notes/stage15_6.jpg
        text: Më pas kliko tek ylli. Tani, ti dëshiron të klikosh në kategorinë e
          variablave dhe të zhvendosësh bllokun "length" në bllokun "move forward"
          të funksionit tënd. Dhe hiq bllokun e numrit të vjetër.
      7:
        image: notes/stage15_7.jpg
        text: Për të përdorur funksionin tënd me parametra, kliko në kategorinë e
          funksioneve dhe lëviz funksionin tënd "draw a triangle with length".
      8:
        image: notes/stage15_8.jpg
        text: Tani ti mund të përdorësh bllokun e matematikës për të futur numra të
          ndryshëm, që të vizatos trekëndësha me madhësi të ndryshme.
    hoc_wrapup:
      1:
        image: notes/hoc6_1.jpg
        text: Urime! Me formuesin e fundit që zgjidhe, ti sapo shkruajte kodin që
          mund ti thuash ÇDO pajisje se si të gjejë rrugën e tij midis një labirinti
          ose tuneli të çdo gjatësie, edhe nëse është një zombi, një zog, një makinë
          marsi ose edhe një makinë që e nget vetë.
      2:
        image: notes/hoc6_2.jpg
        text: Konceptet bazë që ti përdore, janë zemra e çdo programi ose apliakcioni
          që ti do provosh gjithmonë.  Ne mësuam rreth cikleve përsërit, përcaktimeve
          pësërit derisa, përcaktimeve nëse dhe përcaktimeve if else.
      3:
        image: notes/hoc6_3.jpg
        text: Nëse ti e pëlqeve orën tënde të parë të kodimit, vizito code.org për
          të vazhduar edukimin tënd në shkenca kompjterike! Sapo ti të përfundosh
          kursin tonë prej 20 orësh, ti do të kesh përvetësuar bazat e programimit
          dhe mund të fillosh të mësosh se si të shkruah aplikacione telefoni, instruksione
          robotike, lojëra, përcaktoje vetë.
      4:
        image: notes/hoc6_4.jpg
        text: 'Teknologjia po ndryshon gjithçka që ne bëjmë dhe nuk ka rëndësi nëse
          je i ri apo i vjetër: programimi është argëtues, kreativ dhe mund ta mësojë
          kushdo!'
    20_wrapup:
      1:
        image: notes/bird.png
        text: Shfaq shënimet vjen së shpejti!
    frozen_intro:
      1:
        image: notes/frozen1_1.jpg
        text: Përshëndetje, emri im është Lyndey. Unë modeloj, aktroj dhe shkruaj
          aplikacionet e mia. Le të përdorim kod për të lidhur Anën dhe Elsën ndërkohë
          që ato eksplorojnë magjinë dhe bukurinë e akullit.
      2:
        image: notes/frozen1_2.jpg
        text: Ti do të krijosh flokë dëbore dhe modele ndërkohë që patinon dhe bën
          një magji dimërore që mund ta ndash më pas me shokët e tu.
      3:
        image: notes/frozen1_3.jpg
        text: Në orën tjetër, ti do të mësosh bazat se si të kodosh. Programimi tradicional
          është zakonisht në tekst, por ne do të përodrim Blockly, që përdor blloqe
          të dukshëm që ti mund ti lëvizësh sa andej këndej për të shkruar programe.
          Kjo është se si studentët e universiteteve mësojnë bazat. Ti gjithsesi je
          duke krijuar kod.
      4:
        image: notes/frozen1_4.jpg
        text: Një program është një grup udhëzimesh që i thotë kompjuterit çfarë të
          bëjë. Le të ndërtojmë një kod ose një program që do ndihmojë Elsan të krijojë
          një rresht të thjeshtë. Ne do ta përdorim këtë më vonë për të krijuar modele
          më komplekse.
      5:
        image: notes/frozen1_5.jpg
        text: Ekrani jot është ndarë në 3 pjesë kryesore. Majtas, është hapsira e
          akullit ku ti do ekzekutosh programin tënd. Udhëzimet për çdo nivel janë
          shkruar poshtë hapsirës.
      6:
        image: notes/frozen1_6.jpg
        text: Kjo fushë e mesit është toolboxi dhe secili nga këto blloqe është një
          veprim që mund të bëjë Anna dhe Elsa.
      7:
        image: notes/frozen1_7.jpg
        text: Hapsira  e bardhë në të djathtë quhet zona e punës dhe këtu ne do të
          ndërtojmë programin tonë. Për të lëvizur rreth sipërfaqes së akullt, ti
          do të përdorësh bllokun "Move forward".
      8:
        image: notes/frozen1_8.jpg
        text: Këtu, blloku "Move forward" thotë, "move forward by 100 pixels." Kur
          ne shtypim "Run", çfarë ndodh? Elsa ecën përpara në një masë të caktuar
          në ekran, 100 piksela në fakt! Pikselat janë shumë katrorë të vegjël në
          ekranin e kompjuterit tënd.
      9:
        image: notes/frozen1_9.jpg
        text: Blloku tjetër që ne kemi në këtë formues thotë "turn right by 90 degrees."
          Dhe kur ta përdorim këtë bllok "Turn Right", që bën Elsën të kthehet në
          një masë të caktuar. Mund të luash se sa larg do që të kthehet Elsa. Këndi
          matet nga rruga përpara Elsës. Kështu që ky është një kthim 90 gradësh.
          Dhe ky, është një kthim 120 gradësh.
      10:
        image: notes/frozen1_10.jpg
        text: Kujtohu, ti mund të ndryshosh numrin e pikselave dhe gradët duke klikuar
          shigjetat anash tyre.
    frozen_loops:
      1:
        image: notes/frozen2_1.jpg
        text: Përshëndetje, unë jam Paola! Kompjuterat janë vërtet të mirë në përsëritjen
          e veprimeve. Ti mund të numërosh në 10, 20 ose 100. Por, një kompjuter mund
          të numërojë deri në biliona ose trilona. Nuk do mërzitet dhe do e bëjë për
          pak sekonda. Edhe nëse është duke numëruar ose vizatuar ose diçka tjetër--kompjuterat
          mund të përsërisin gjëra në qindra ose madje edhe biliona herë.
      2:
        image: notes/frozen2_2.jpg
        text: Në programim, ne e quajmë këtë një cikël. Një cikël është se si ti e
          përsërit kodin tënd herë pas here. Për formuesin tënd, çelsi jot është të
          ndihmosh Anën të krijojë një katror me bllokun "Repeat".
      3:
        image: notes/frozen2_3.jpg
        text: Çdo bllok kodi që ti fut brenda bllokut "Repeat" do të përsëritet në
          sekuencë, aq herë sa ti dëshiron.
      4:
        image: notes/frozen2_4.jpg
        text: Për të vizatuar një katror, ti mund të përdorësh bllokun "Move Forward"
          dhe "Turn right" 4 herë. Por, mënyra më e lehtë është ti thuash kompjuterit
          "Move Forward" dhe "Turn right by 90 degrees" njëherë, dhe më ps thuaji
          të përsërisë këtë grup veprimesh 4 herë. Për ta bërë këtë, ti duhet të vendosësh
          bllokun "Move Forward" dhe "Turn right" brenda një blloku "Repeat".
      5:
        image: notes/frozen2_5.jpg
        text: Kujtohu, ti mund të ndryshosh numrin në bllokun "Repeat" në çfarëdo,
          dhe ti do të përsërisësh çfarë ka brenda bllokut shumë herë.
    frozen_functions:
      1:
        image: notes/frozen3_1.jpg
        text: Përshëndetje, unë jam Chris Bosh. Unë jam një basketbollist profesionist
          dhe kodoja në kolegj.
      2:
        image: notes/frozen3_2.jpg
        text: Një nga konceptet më të rëndësishme në shkencën kompjuterike është se
          si të përcaktojë komandat e reja. Shumë gjuhë kompjuterike kanë vetëm 100
          fjalë ose komanda. Dhe me të vërtetë, arti dhe magjia është në përcaktimin
          e fjalëve të tua të reja jashtë nga ndërtimi i blloqeve.
      3:
        image: notes/frozen3_3.jpg
        text: Sapo ti i mëson një kompjuteri se si ta bëjë një veprim njëherë duke
          përdorur këtë sekuencë komandash, ti mund të bësh emrin tënd për atë veprim
          kështu që është e lehtë për ta përsëritur më vonë.
      4:
        image: notes/frozen3_4.jpg
        text: Përshëndetje, unë jam Jess. Kur programon me blloqe, ti do të përdorësh
          funksionet if. Janë një grup veprimesh që ti do dëshirosh ti përdorësh shumë
          herë. Për shembull, ti ke shkruar kodin për të krijuar një katror.
      5:
        image: notes/frozen3_5.jpg
        text: 'Ti mund të përcaktosh këtë si një funksion të quajtur "create a square." '
      6:
        image: notes/frozen3_6.jpg
        text: Tani ke një bllok të ri që ti mund ta përdorësh disa herë për të krijuar
          katrorë të shumëfishtë.
      7:
        image: notes/frozen3_7.jpg
        text: Shumë forma të thjeshta mund të përdoren për të krijuar modele shumë
          më të komplikuara. Në formuesin tjetër, kodi që ti sapo shkruajte për të
          bërë një rreth është i vlefshëm për ty si një funksion i ri që mund të bëjë
          rrathë të madhësive të ndryshme. A mund ta përdorësh atë për të ndihmuar
          Elsën të krijojë modele të ndërlikuara edhe të bukura në dëborë?
    playlab_intro:
      1:
        image: notes/playlab_intro_1.png
        text: Ne do të krijojmë lojëra duke përdorur Play Lab. Lojrat e mira kanë
          një histori dhe çdo histori ka pjesmarrës. Ne do të mësojmë si ti bëjmë
          pjesmarrësit tanë si magjistarë, alienë, dhe kafshë që flasin, të lëvizin
          dhe të bashkëveprojnë me njëri-tjetrin. Në fund të këtij tutoriali, ti mund
          të ndërtosh një lojë dhe ta shpërndash me shokët e tu.
      2:
        image: notes/playlab_intro_2.png
        text: Ekrani jot është ndarë në 3 pjesë kryesore. Në të majtë është hapsira
          e lojës ku do ekzekutohet programi. Udhëzimet për çdo nivel janë shkruar
          poshtë.
      3:
        image: notes/playlab_intro_3.png
        text: Hapsira e mesit është toolboxi dhe secili nga këto blloqe është një
          pjesë kodi. Hapsira e bardhë djathtas quhet zona e punës dhe këtu ne do
          të ndërtojmë programin tonë.
      4:
        image: notes/playlab_intro_4.png
        text: Për të filluar, ti duhet të lidhësh blloqet e tua tek blloku portokalli
          "when run". Ti mund të lidhësh shumë blloqe bashkë duke i lëvizur ato derisa
          ti të shohësh vijën e verdhë dhe më pas ato do të lidhen bashkë.
      5:
        image: notes/playlab_intro_5.png
        text: Në këtë puzzle të parë, aktori jonë është një pinguin dhe ne do ta bëjmë
          atë të thotë "Përshëndetje!" duke lëvizur bllokun, duke e lidhur atë me
          bllokun "when run" dhe duke shtypur "Përshëndetje." Ne, gjithashtu, mund
          të bëjmë pinguinin të lëvizë duke përdorur blloqet "move right" dhe "move
          left". Sapo ti ke vendosur blloqet në vend, shtyp butonin "Run" për të parë
          se çfarë ke programuar.
      6:
        image: notes/playlab_intro_6.png
        text: Fillo dhe deri në fund, ti do të kesh mundësinë të krijosh lojën tënde
          me të gjithë llojet e lojtarëve që mund të bashkëveprojnë, të bëhen të lumtur
          ose të mërzitur, të shënosh pikë ose të hedhësh topa zjarri, ose madje edhe
          të zhdukësh secilin. Është e gjitha në dorën tënde dhe në lojën që ti dëshirosh
          të bësh.
    playlab_events:
      1:
        image: notes/playlab_events_1.png
        text: Tani, ne do të mësojmë rreth diçkaje që të gjithë programuesit e lojërave
          përdorin çdo ditë. Ato quhen evente. Një event i thotë programit tënd të
          dëgjojë kur diçka ndodh. Kur ajo ndodh, kryen një veprim.
      2:
        image: notes/playlab_events_2.png
        text: Disa she,buj eventesh janë duke dëgjuar për një klikim muse, një buton
          shigjete ose një shkelje në ekran.
      3:
        image: notes/playlab_events_3.png
        text: Këtu, ne do të bëjmë një anije kozmike të përshëndesë tokësorët kur
          një lojtar klikon në të. Ne do të përodrim bllokun "when clicked" dhe do
          bashkojmë bllokun "say" me të. Kur lojtari klikon në anijen kozmike, gjithçka
          e bashkuar me këtë bblok eventi "when clicked", do të kryhet. Çfarë thotë
          alieni jot?
      4:
        image: notes/playlab_events_4.png
        text: Ka gjithashtu blloqe "when arrows". Nëse ti lidh blloqet "move" me ato,
          ti mund të fillosh ti lëvizësh aktorët lart, poshtë, majtas ose djathtas.
          Hap pas hapi, loja jote është duke u bërë më interaktive.
    playlab_repeat_forever:
      1:
        image: notes/playlab_repeat_forever_1.png
        text: Ky është blloku "repeat forever". Gjithçka brenda këtij blloku do të
          ndodhë gjiithmonë në lojë.
      2:
        image: notes/playlab_repeat_forever_2.png
        text: Nëse ne duam një aktor të bëjë diçka në mënyrë të herë pas hershme,
          pa bërë asgjë lojtari, ne do të vendosim këto blloqe brenda bllokut "repeat
          forever".
      3:
        image: notes/playlab_repeat_forever_3.png
        text: Në këtë formues tjetër, qëllimi jonë është të ndihmojmë magjistarin
          të patrullojë kufijtë e mbretërisë, majtas dhe djathtas vazhdimisht. Duke
          mësuar se si komandat repeat punojnë, do të ruajnë ty shumë kohë kur ti
          të ndërtosh lojën tënde.
    C1_artist_intro:
      1:
        image: notes/C1_artist_intro_1.png
        text: Këto janë blloqet tuaja të vizatimit. Përdor të duhurën për të lëvizur
          artistin ku ai ka nevojë të shkojë për të mbushur linjat gri.
      2:
        image: notes/C1_artist_intro_2.png
        text: Këto janë blloqet e kërcimit. Kur ju përdorni këto, artisti juaj lëviz
          mirëpo nuk vizaton, kështu që përdor këto për të këcyer të linja gri e rradhës.
    C1_bee_level_intro:
      1:
        image: notes/C1_bee_level_intro_1.png
        text: A nuk janë bletët shumë të mira? Në këtë set të rradhës me enigma, qëllimi
          juaj është të ndihmoni bletën të mbërrijë te lulet dhe të marrë nektarin
          dhe të fluturojë mbi huall të bëjë mjaltin. Ju do të keni nevojë të përdorni
          blloqet "merr nektarin" dhe "bëj mjaltin" për këtë ushtrim.
      2:
        image: notes/C1_bee_level_intro_2.png
        text: 'Cdo lule ka një numër të ndryshëm të nektërëve: 1, 2, 3 apo më shumë.
          Ne e dijmë sa shumë nektar është në lulet e kuqe, nga numri i vogël në qoshe.
          Kështu që sigurohu të marrësh të gjithë nektarin nga lulet para se të levizësh
          përpara. Gjithashtu, çdo huall mund të mbajë vetëm kaq mjaltë: 1, 2, 3 apo
          më shume. Kështu që sigurohu të bësh aq mjalte sa hualli mund të mbajë.'
      3:
        image: notes/C1_bee_level_intro_3.png
        text: Nëse ju jeni i gatshëm të merrni të gjithë nektarin dhe të pregaditni
          mjaltin, ju do të keni sukses dhe kaloni në nivelin tjetër. Përndryshe,
          ju duhet të provoni këtë engimë përsëri. Provoje pak lojën dhe shiko se
          si është të "bletë" një kodues!
    C1_bee_loops:
      1:
        image: notes/C1_bee_loops_1.png
        text: Një lak është një përsëritje e aktivitetit. Kështu që duke shkuar në
          një koshere për të inspektuar, une shikojë në një kornizë dhe pastaj e kthej
          atë mbrapa, kështu që unë përsëris atë aktivitet të njejtë shumë herë. Është
          duke u kthyer përseri, duke bërë aktivitetin e njejtë disa herë.
      2:
        image: notes/C1_bee_loops_2.png
        text: Në këtë nivel, ne duam që bleta të grumbullojë tre nektarë nga lulja.
          Në vend të përdorimit tre blloqe "merr nektarin" ju do të përdorni këtë
          bllok përsëritës për të marrë nektarin tre herë. Prek "Vrapo" dhe shiko
          nëse e keni bërë mirë. Bukur!
    C1_bigevent_unplugged:
      1:
        image: notes/C1_bigevent_unplugged_1.png
        text: Ky mësim thirret ngjarja e madhe. Është gjithçka si ne mund të kontrollojmë
          programet tona dhe të ndryshojmë mënyrën që një program shkon në fluturim
          duke përdorur ngjarjet, sikur shtyp një buton apo kliko miun.
      2:
        image: notes/C1_bigevent_unplugged_2.png
        text: Për këtë mësim, ju do të kontrolloheni me një kontrollues letre. Është
          sikur një video loje e vërtetë.
      3:
        image: notes/C1_bigevent_unplugged_3.png
        text: Një ngjarje është një aksion që shtyn diçka të ndodhë. Është sikur kur
          ju klikoni butonin në një mi dhe një uebfaqe ngarkohet. Kjo është një ngjarje.
          Kur ju prekni ekranin tuaj në një tabletë për të lëvizur, dhe kjo poashtu
          është një ngjarje. Ngjarjet janë një mënyrë e mrekullueshme për të lënë
          përdoruesin të drejtojë programin tuaj kudo që ata kanë nevojë apo duan.
      4:
        image: notes/C1_bigevent_unplugged_4.png
        text: Gjërat ndodhin që ne të gjithë përgjigjemi për to. Ne ndjehemi të uritur
          dhe shkojmë te frigoriferi. Ne ndëgjojmë postierin duke ardhur dhe ai vendos
          letrat tona në postë dhe ne shkojmë për ti marrë. Këto janë sikur ngjarjet
          e shtypjes së një butoni apo lëvizjes së dorezës. Ato janë dicka që ndodhin
          që na shtyn neve të bëjmë dicka.
      5:
        image: notes/C1_bigevent_unplugged_5.png
        text: Në video lojrat, është një ngjarje që thirret "Përditësimi" dhe kjo
          ndodhë 30 apo 60 herë në sekond. Për programerët e videolojrave ajo është
          gati më e rëndësishme si një ngjarje sesa butonët apo doreza.
      6:
        image: notes/C1_bigevent_unplugged_6.png
        text: Ngjarja kryesore që ne jemi duke shikuar është ajo "Përditësimi" tik-tak
          duke ndodhur. Dhe pastaj ne kontrollojmë dorezën në tik-tak. Kështu që ne
          themi, "Oh, dikush ka shtypur butonin këtë kornizë? Po apo jo?" Pa ngjarje,
          lojtari nuk mund të lëvizë, ju nuk mund të kërceni, ju nuk do të jeni të
          gatshëm të kontrolloni se çfarë po ndodhë. Videoloja nuk mund të gjallërojë
          asgjë.
    C1_building_foundation:
      1:
        image: notes/C1_building_foundation_1.jpg
        text: Në skulpturën e rërës ju do të keni rastin të mësoni se dështimi është
          pjesë e programit. Por nëse ju këmbëngulni, do të bëhet më mirë dhe më emocionuese
          për ty. Këmbëngulësia është emri i lojës. Qëndro me të, do të duash.
      2:
        image: notes/C1_building_foundation_2.jpg
        text: Ky ushtrim njihet si ndërtimi i një themeli. Në këtë ushtrim, ne do
          të punojmë në një detyrë që është menduar të jetë me të vërtetë e vështirë.
          Ju do të mësoni si të ndërtoni një strukturë së fundmi aq të gjatë sa një
          nga këto gota dhe duhet të jetë e fortë mjaftueshëm të mbajë peshën e një
          libri.
      3:
        image: notes/C1_building_foundation_3.jpg
        text: Mund të ketë kohë që kreacioni jonë nuk funksionon. Mund të ketë kohë
          kur ne bëhemi të frustruar dhe duam të dorëzohemi. Mund të ketë shumë nga
          këto momente. Por nëse ne vazhdojmë në përpjekje, jepi goditjen më të mirë
          përsëri dhe përsëri, pastaj ne do të sigurohemi ta marrim atë para se të
          zgjatet.
      4:
        image: notes/C1_building_foundation_4.jpg
        text: Këmbëngulësia është gjithqka rreth të qëndruarit aty kur ju me të vërtetë
          dëshironi të dorëzoheni. Nëse doni të krijoni diqka të re dhe ndryshe, do
          të ketë shumë dështime gjatë rruges.
      5:
        image: notes/C1_building_foundation_5.jpg
        text: Triku te këmbëngulësia është duke zgjedhur të qëndrosh dhe të mësosh
          nga dështimet tuaja në vend se të hiqni dorë sepse jeni i frustruar. Frustrimi
          do të thotë që ka diqka të mrekullueshme rreth qoshit. Kështu që mos heq
          dorë para se të arrini te ajo. Wooo!
    C1_getting_loopy:
      1:
        image: notes/C1_getting_loopy_1.png
        text: Tung, emri im është Miral Kotb dhe unë jam kreatorja e Iluminate. Në
          punën time, ka diqka që ne përdorim në të dyja vallëzim dhe programim. Dhe
          ajoi është unazore! Laqet janë duke përsëritur një aksion përsëri dhe përsëri.
      2:
        image: notes/C1_getting_loopy_2.png
        text: Kur ju përsërisni diqka shumë herë, sikur aksionet e mia për të mbajtur
          kolovajzën duke u luhatur, unë jam duke performuar një unazë përsëritëse
          të atij aksioni. Kjo është një unazë përsëritëse. Kjo është një unazë përsëritëse.
          Dhe kjo është një unazë përsëritëse.
      3:
        image: notes/C1_getting_loopy_3.png
        text: Sot ne do të kemi një parti vallëzimi. Ne do të veprojmë jashtë përsëritjeve
          me një vallëzim të ri. Përsëritja. Ne do të mësojmë rreth përsëritjeve duke
          përdorur një vallëzim. Ju do të mësoni disa hapa të thjeshtë dhe përsërit
          ata përsëri dhe përsëri për të kompletuar vallëzimin.
      4:
        image: notes/C1_getting_loopy_4.png
        text: Këtu janë hapat që ju duhet të mësoni. Duartrokitni. Vendos duart tuaja
          pas kokës. Vendos duart mbi ijet tuaja. Ngrini dorën tuaj të majtë lart.
          Ngrini dorën tuaj të djathtë lart. E lehtë, apo jo? Ju do të zbuloni se
          ju mund të shkurtoni udhëzimet duke vendosur disa hapa të vallëzimit në
          përsëritje.
      5:
        image: notes/C1_getting_loopy_5.png
        text: Ne i përdorim përsëritjet në vallëzimet tona. Valltarët janë të veshur
          me kompjutera, të gjithë në të njëjtin rrjet. Unë mund të përsëris dritat
          përmes të njejtëve vallëtarë pa pushim. Në unazë përsëritëse unë mund të
          kem një përsëritje ku unë do të them se ti dëshiron të përsëritësh nëpërmjet
          këtyre gjashtë kërcimtarve pa pushim dhe pastaj brenda unazës përsëritëse
          ti dëshiron të rrisësh shpejtësinë e dritës. Dhe kjo e gjitha është krijuaj
          përmes përsëritjeve. Përsëritjet janë të rëndësishme në shkenca kompjuterike
          sepse ata e bëjnë punën tonë më të shkurtër dhe më të lehtë.
    C1_happy_maps_unplugged:
      1:
        image: notes/C1_happy_maps_unplugged_1.png
        text: Ky mësim thirret harta e lumtur. Sot ne do të ndihmojmë shokun tonë
          të vogël prej gëzofi Flurb të marrë ftutin e tij.
      2:
        image: notes/C1_happy_maps_unplugged_2.png
        text: Bëj Flurbin tuaj të shkojë te fruti juaj. Për të bërë këtë ju duhet
          të zbuloni në cilën rrugë Flurb duhet të shkojë dhe direkto atë me shigjeta.
          Në mënyrë që Flurb të marrë mollën, qfarë drejtimi Flurb duhet të shkojë?
          Linja për ta shtyrë atë.
      3:
        image: notes/C1_happy_maps_unplugged_3.png
        text: Për të marrë atë atje ju rrethoni drejtimin që ka për të shkuar.
      4:
        image: notes/C1_happy_maps_unplugged_4.png
        text: Krijo algoritmin tuaj duke ngjitur shigjetat afër hartës që ju provoni
          për të zgjidhur. E dyta është e njejtë vetëm se shkon poshtë.
      5:
        image: notes/C1_happy_maps_unplugged_5.png
        text: "Është sikur duke programuar me letër. Dhe kjo është!"
    C1_maze_debugging:
      1:
        image: notes/C1_maze_debugging_1.png
        text: Rregullimi është gjetja dhe fiksimi i problemeve. Janë shumë mënyra
          për të rregulluar problemet. Një nga më të lehtat është të lëvizësh hap
          pas hapi deri sa të gjesh kur diqka shkon gabim. Këtu unë jam duke provuar
          për të bërë salto mbi duar prap në rreze por vazhdoj të keqsohem.
      2:
        image: notes/C1_maze_debugging_2.png
        text: Kam ecur nëpër çdo pjesë hap pas hapi dhe e kuptova ku ishte gabimi
          im. Unë nuk isha duke vendosur duart e mia në rreze si duhet. Kështu që
          provova një tjetër salto mbi duar prapa në rreze me pozicionin e ri të dorës
          dhe ja dola. Unë isha me të vërtetë krenare që e rregullova salton time
          me duar prapa.
      3:
        image: notes/C1_maze_debugging_3.png
        text: Për të mësuar për rregullimin, ne fillojmë me një grup të blloqeve tashmë
          në skenë. Ju do të vëreni që këto blloqe nuk do të ju dërgojnë te qellimi.
          Ne duhet të rregullojmë zgjidhjen dhe fiksojmë atë. Cfare shkoi gabim? Ju
          do të vëreni se ju keni pasur nevojë të vazhdoni në perëndim një bllok më
          shumë.
      4:
        image: notes/C1_maze_debugging_4.png
        text: Le ta rregullojmë këtë duke shtuar një tjetër bllok në perëndim dhe
          duke shtypur fillo për të parë nëse e keni bërë mirë. Yay, ja dole!
    C1_maze_intro_sequencing:
      1:
        image: notes/C1_maze_intro_sequencing_1.png
        text: Për këtë mister, ju keni nevojë për të marrë zogun deri te derri. Shikoni
          në enigmë dhe shiko se çfarë drejtime ajo ka nevojë për të marrë.
      2:
        image: notes/C1_maze_intro_sequencing_2.png
        text: Ju duhet të bartni blloqet prej kutisë së veglave në hapsirën e punës.
          Sigurohu që është nën bllokun "kur vazhdon" dhe kur mendon se e keni gjetur
          zgjidhjen e duhur, pastaj kliko "vazhdo" dhe shiko zogun të shkojë te derri.
    C1_maze_loops:
      1:
        image: notes/C1_maze_loops_1.png
        text: Një që kompjuterët janë vërtetë të mirë është përsëritja e komandave.
          Si një person, ju do të mërziteni nëse duhet të bëni gjërat e njejta shumë
          herë në një rresht. Por një kompjuter mund të bëjë gjënë e njejtë milion
          apo bilion herë dhe nuk mërzitet dhe mund ta bëjë atë shumë mirë.
      2:
        image: notes/C1_maze_loops_2.png
        text: Për shembull, nëse do të doja të urojë të gjithë në Facebook një ditëlindje
          të lumtur duke u dërguar atyre një email, do të më merrte kohë më shumë
          së një shekull për të shkruar të gjithë kto emaile. Por me pak linja kodimi,
          mund të kem një sistem që u dërgon emaile të gjithve për t'i uruar ditëndje
          të lumtur.
      3:
        image: notes/C1_maze_loops_3.png
        text: Për të marrë zogun deri te derri në këtë nivel... më mirë sesa të tërheqësh
          tre blloqe veriore në hapsirën e punës, ju do të përdorni bllokun "përsërit".
          Tërhiq bllokun "përsërit" në hapsirën e punës dhe shkruaj numrin 3. Pastaj
          tërhiq bllokun "lëviz në veri" në bllokun "përsërit" dhe shtyp "vazhdo"
          për të parë nëse e keni bërë mirë. Përgëzime, ja dole!
    C1_moveitmoveit_unplugged:
      1:
        image: notes/C1_moveitmoveit_unplugged_1.png
        text: This lesson is called move it, move it. Together we're going to write
          a program to get our friends from the starting with the compass rose to
          the smiley face goal.
      2:
        image: notes/C1_moveitmoveit_unplugged_2.png
        text: Por fytyra e qeshur është poshtë dhe vetëm një person di si të arrijë
          atje. Le të fillojmë këtë program.
      3:
        image: notes/C1_moveitmoveit_unplugged_3.png
        text: Një program është një algoritëm që ka qenë i programuar nëpërmes diqkaje
          që mund të punojë si makinë. Shumë prej nesh mendojnë një program si diqka
          që ne e shkruajmë për një kompjuter. Programet janë vërtetë të mira për
          atë por ato janë gjithashtu ndihmuese në vende të tjera. Ti mund të bësh
          lojën tënde apo program që një robot të bëjë gjërat për ju.
    C1_going_places_safely:
      1:
        image: notes/C1_going_places_safely_1.png
        text: Emri im është Jeremiah. Tung! Une jam shtatë vjeqare. Pëlqej të luaj
          në kompjuterin e nënës time por unë gjithëmonë kërkojë leje fillimisht.
          "Nënë, mund të shkojë te kompjuteri? Sigurisht shpirti im!"
      2:
        image: notes/C1_going_places_safely_2.png
        text: E pëlqejë kompjuterin e nënës time sepse mund të përdorë internetin.
          Interneti është diqka si lagjia juaj. Mund të vizitoni vende të bukura,
          mund të flisni me familjen dhe shokët dhe të mësoni plot gjëra të reja.
      3:
        image: notes/C1_going_places_safely_3.png
        text: Dje, unë vizitova nje kopsht zoologjik afër shtëpisë time. Unë pash
          një zebër. E fotografova dhe i ndryshova ngjyrat e vijave të saj, pastaj
          i shtova një kapelë dhe e shtova një koleksionin tim të kafshëve. E përkryer!
          Më vonë, shkova në një vend shumë shumë larg. Vizitova Kenian. Është një
          vend në Afrikë. Shume zebra jetojnë atje.
      4:
        image: notes/C1_going_places_safely_4.png
        text: Nganjëherë në internet unë flas me njerëzit qe njoh, si gjyshja ime
          që jeton në tjetër shtet. Tung gjyshe! Ajo ështe duke më pregaditur kekë
          dhe do të m'i dërgojë për ditëlindje. "Yummy, do të doja që interneti të
          ketë shijues!" Unë mund të flas me njerëz të ndryshëm në internet, si kusheriri
          im por unë vetëm flas me njerëzit që njoh.
      5:
        image: notes/C1_going_places_safely_5.png
        text: Cfarë më pëlqen më së shumti në internet është sepse luaj lojra. Pikë!
          Unë gjithashtu pëlqej të vizatojë dhe krijojë gjëra të reja dhe t'i ndajë
          me shokët e mi. Bukur! Nganjëherë unë vizitojë faqe të internetit ku mund
          të mësojë gjëra të reja por une gjithëmonë ndalem në faqe të internetit
          që janë atje pikërisht për mua. Wow, dinozaurë!
      6:
        image: notes/C1_going_places_safely_6.png
        text: 'Interneti është një super vend i mirë. Por sikur kur kalon një rrugë
          në lagjen tënde, ju gjithashtu duhet të keni kujdes kur paraqiteni online.
          Këtu janë tre rregulla për t''u mbajtur në mend. Rregulli numër 1: Gjithmonë
          pyet prindërit tuaj së pari. Rregulli numër 2: Fol vetëm me njerëzit që
          njeh. Rregulli numër 3: Ndalo te vendet që janë për ty.'
      7:
        image: notes/C1_going_places_safely_7.png
        text: Wow, ajo ishte e bukur! Koha e darkës. Unë po c'kyqem tani. Nuk mund
          të pres të kyqem përsëri të shoh cfarë do të vizitojë në vazhdim.
    C1_pair_programming:
      1:
        image: notes/C1_pair_programming_1.png
        text: Sot ne do të mësojmë për programimin në dyshe. Në programimin në dyshe
          ju punoni si një ekip. Pse duhet dy njerëz të përdorin një kompjuter? Sepse
          dy koka janë më mirë se një. Në programimin dyshe ju dhe partneri juaj do
          të uleni bashkë në një kompjuter dhe ju bashkë do të punoni në projektin
          e njejtë.
      2:
        image: notes/C1_pair_programming_2.png
        text: Në programimin dyshe, një person është vozitësi dhe tjetri person udhëzuesi,
          sikur kur vozitë një veturë. Vozitësi ulet te kompjuteri dhe është ai që
          përdor tastaturën apo miun apo ekranin me prekje dhe duke kontrulluan aksionet
          kryesore të kompjuterit. Tjetri person është udhëzuesi. Udhëzuesi ndihmon
          vozitësin duke iu përgjigjur pyetjeve të shoferit dhe duke i gjetur problemet
          e mundshme apo gabimet.
      3:
        image: notes/C1_pair_programming_3.png
        text: Komunikimi është qelsi për një programim në dyshe të suksesshëm. S'ka
          ofendime, bëhu i respektueshem, mos u bëj një udhëzues boss, sepse askush
          nuk dëshiron një pasagjer të pakëndshëm. Ju dhe partneri juaj duhet gjithmonë
          të flisni. Shoferi mund të shpjegojë cfarë ajo apo ai janë duke bëre. Dhe
          udhëzuesi mund të ndihmojë duke sygjeruar qfarë të bëjë në vazhdim.
      4:
        image: notes/C1_pair_programming_4.png
        text: Udhëzuesi duhet të mendojë për fotografinë e madhe dhe shoferi fokusohet
          në detaje. Të dy rolet janë të rëndësishëm, Programimi në dyshe ka të bëjë
          me punën së bashku si një ekip.
    C1_planting_seed:
      1:
        image: notes/C1_planting_seed_1.png
        text: Ky mësim thirret mbjellja e një fare dhe do të na ndihmojë të kuptojmë
          algoritmet. Algoritmet janë instruksione specifike që shpjegojnë urdhërin
          në cfarë të bëjmë diqka. Madje cdo ditë gjërat si ngernia e mëngjesit apo
          larja e dhëmbëve janë algoritme që kërkojnë hapa të vegjël për të kryer
          një punë.
      2:
        image: notes/C1_planting_seed_2.png
        text: Kompjuterët mund të jenë shumë të menqur por ata mund të kuptojnë vetëm
          nëse ju tregon taman cfarë dëshiron hap pas hapi. Gjëja më e mirë rreth
          algoritmeve është se nëse përcjell udhëzimet në rregull, ju mund të bëni
          diqka që nuk e keni ditur si të bëni që moti. Është sikur të përcjellësh
          një recept.
      3:
        image: notes/C1_planting_seed_3.png
        text: Sot ne do të mbjellim farat tona duke përdorur një algoritm. Krijo algoritmin
          tuaj duke prerë fotografinë. Zgjedh fotografitë që tregojnë hapat në mbjelljen
          e një fare dhe aranzho këto fotografi në mënyrë korrekte.
      4:
        image: notes/C1_planting_seed_4.png
        text: Tani është koha që të shihni nëse algoritmi juaj funksionon. Ndiq hapat
          në algoritëm me kujdes. A janë në mënyrë korrekte? A keni qenë të suksesshëm
          në mbjelljen e një fare duke ndjekur algoritmin? Është sikur programimi
          me fotografi!
      5:
        image: notes/C1_planting_seed_5.png
        text: Kur ne duam të bëjmë qokollatë, jane shumë hapa të mëdhenjë drejt atij
          procesi dhe secili prej këtyre hapave të medhenjë ka një set hapash të vegjël
          dhe ka receptë të ndryshëm apo algoritme duke u varur në atë se si duam
          që qokollata të shijojë. Secili hap është i rëndësishëm, edhe të vegjlit,
          kështu që pa një hap, të tjerët nuk mund të kompletohen. Krijimi i algoritmeve
          që të tjerët mund të kuptojnë është me të vërtetë i rëndësishëm. Kjo ndodhë
          për shkak që secili hap duhet të shkruhet poshtë kështu që nuk ka lidhje
          kush e bën atë, rezultati është i njejtë.
    C1_playlab_storytelling:
      1:
        image: notes/C1_playlab_storytelling_1.png
        text: Koha për t'u bërë kreativ dhe për të përdorur aftësitë e kodimit për
          të treguar një histori. Historia juaj do të ketë aktorë dhe ju do të jeni
          në gjendje për t'i bërë këta aktorë të flasin me njëri tjetrin. Fillo të
          mendosh se qfarë lloj historie dëshiron të tregosh.
      2:
        image: notes/C1_playlab_storytelling_2.png
        text: Macja gjithmonë ka qenë e frikësuar nga qeni dhe cka nëse macja kupton
          se qeni dëshiron të jetë i mirë? Blloku 'fillo' fillon gjithcka. Blloku
          'lëviz' do të lëvizë personazhin tuaj dhe blloku 'fol' do të bëjë karakterin
          tuaj të flas cka do që ju shtypni.
      3:
        image: notes/C1_playlab_storytelling_3.png
        text: Ky është blloku 'kur aktorët përplasen' të cilin mund ta bashkosh me
          blloqet e tjera.
      4:
        image: notes/C1_playlab_storytelling_4.png
        text: Isha duke e bërë qenin të vij dhe thotë 'Tung' por pastaj macja u frikësua
          dhe iku larg. 'Ahh' nëse do të kishte më shumë kohë, do të ishte një fund
          i lumtur. Fundi!
    C1_spelling_bee_intro:
      1:
        image: notes/C1_spelling_bee_intro_1.png
        text: Ky është niveli i drejtshkrimit bletë. Përdor pjesët e enigmës për të
          levizur bletën. Kur ajo levizë, ajo do të grumbullojë shkronjat të shqiptojë
          fjalët.
      2:
        image: notes/C1_spelling_bee_intro_2.png
        text: Shiko nëse mundesh të shqiptosh fjalën që të kanë dhënë në kutinë poshtë
          fazës. Por keni kujdes! Duke lëvizur në drejtimin e gabuar do të shtojë
          shkronjë që nuk dëshironi.
    C1_zuck_repeat_loop:
      1:
        image: notes/C1_zuck_repeat_loop_1.png
        text: Një që kompjuterët janë vërtetë të mirë është përsëritja e komandave.
          Si një person, ju do të mërziteni nëse duhet të bëni gjërat e njejta shumë
          herë në një rresht. Por një kompjuter mund të bëjë gjënë e njejtë milion
          apo bilion herë dhe nuk mërzitet dhe mund ta bëjë atë shumë mirë.
      2:
        image: notes/C1_zuck_repeat_loop_2.png
        text: Për shembull, nëse do të doja të urojë të gjithë në Facebook një ditëlindje
          të lumtur duke u dërguar atyre një email, do të më merrte kohë më shumë
          së një shekull për të shkruar të gjithë kto emaile. Por me pak linja kodimi,
          mund të kem një sistem që u dërgon emaile të gjithve për t'i uruar ditëndje
          të lumtur.
      3:
        image: notes/C1_zuck_repeat_loop_3.png
        text: Në këtë shembull, qëllimi juaj do të jetë të levizësh zogun për të marrë
          derrin. Tani, ne do të jemi të gatshëm për të përdorur bllokun përsëritës
          siq duhet për të qenë të gatshëm për ta bërë këtë shumë lehtë. Ju mund ta
          bëni këtë duke i dhëne kompjuterit një komandë të hecë përpara disa herë
          për të avansuar zogun një hap secilën herë për të shkuar te derri apo ju
          mund ti thoni kompjuterit të levizë njëherë përpara dhe pastaj ti thoni
          ta përsërisë atë disa herë dhe ai do ta bëjë të njejtën gjë.
      4:
        image: notes/C1_zuck_repeat_loop_4.png
        text: Në mënyrë që ta bëni këtë, ju tërhiqni komandën tuaj për të levizur
          përpara dhe pastaj e futni atë brenda bllokut përsëritës, Dhe ju mund të
          klikoni në të dhe t'i tregoni se sa herë ju të përsëritni bllokun për t'i
          treguar atij sa hapa ju dëshironi që të marrë përpara.
      5:
        image: notes/C1_zuck_repeat_loop_5.png
        text: Një gjë më shumë është se ju mund të vendosni aq shumë komanda sa dëshironi
          brenda bllokut përsëritës. Kështu në ketë shembull, ju jeni duke i thënë
          të lëvizë përpara dhe të kthehet në të majtë, të cilën do ta bëjë disa herë,
          Kënaqu!
    C2_artist_intro:
      1:
        image: notes/C2_artist_intro_1.png
        text: Ju nuk do të mund as të kualifikoheni për garën nëse nuk keni njerëz
          që janë të aftë në shkenca kompjuterike sepse kaq shumë të dhëna që makinat
          grumbullojnë dhe nevoja për të pasur njerëz që mund të shkruajnë programe
          për të gjetur si të vazhdojmë të gjejmë si të ndërtojmë performancën.
      2:
        image: notes/C2_artist_intro_2.png
        text: Në këto enigma, ju do të jeni një artist që përdorë një laps për të
          vizatuar forma të ndryshme. Kudo që artisti juaj shkon, do të vizatoje një
          vizë pas jush.
      3:
        image: notes/C2_artist_intro_3.png
        text: Për të lëvizur rreth kanavacës, ju do të përdorni bllokun lëviz përpara.
          Këtu blloku lëviz përpara thotë lëviz përpara me 100 pikselë. Kur ne shtypim
          lësho, cfarë ndodhë? Artisti lëviz përpara në shumë të caktuar dhe ajo shumë
          është 100 pikselë. Pikselët janë katrorë shumë të vegjël në ekranin e kompjuterit
          tuaj.
      4:
        image: notes/C2_artist_intro_4.png
        text: Blloku tjeter që ne kemi në këtë enigmë thotë kthehu djathtas në 90
          shkallë. Dhe kur ne tërheqim atë e bën artistin tonë të kthejë një shumë
          të caktuar. Kështu që ju mund të luani përreth me aq shumë sa ju dëshironi
          që artisti të kthejë. Kjo është një 90 shkallë kthesë.
      5:
        image: notes/C2_artist_intro_5.png
        text: Dhe kjo është një 120 shkallë kthesë. Dhe kujto, ti mund të ndryshosh
          këto vlera duke klikuar në shigjetën afër numrave për pikselë dhe shkallë.
          Shijo vizatimin me artistin tuaj!
    C2_bee_conditionals:
      1:
        image: notes/C2_bee_conditionals_1.png
        text: Ky është një bllok i kushtëzuar. Thotë NËSE ka një nektar apo mjaltë
          që është më pak, e barabartë apo më e madhe se një numër, PASTAJ bëj diqka.
      2:
        image: notes/C2_bee_conditionals_2.png
        text: Kjo është ndihmuese kur ne nuk dijmë sa shumë nektar apo mjaltë të marrim,
          siq e shohim këtu me këtë shenjë pyetse.
      3:
        image: notes/C2_bee_conditionals_3.png
        text: Në këtë shembull, ne do të themi se NËSE lulja vjollcë ka nektar me
          të madh se 0, merr nektar. Ajo do të i tregojë bletës tonë të mbaj nektarin
          aq gjatë sa është atje. Ta-dah!
    C2_binary_bracelets:
      1:
        image: notes/C2_binary_bracelets_1.png
        text: Ky është mësimi binar bylyzyk. Ne do të kodojmë inicialet tona ne një
          bylyzyk që mund ta veshim dhe të i'a tregojmë shokëve tanë!
      2:
        image: notes/C2_binary_bracelets_2.png
        text: Binari është një rrugë e prezantimit të informacionit duke perdorur
          vetëm dy opsione. Nganjëherë njerëzit mendojnë për këtë vetëm si një 1s
          dhe 0s. Por ju mund te prezantoni binarin me kombinime të on dhe off, lart
          dhe poshtë, brenda dhe jashtë apo qfarëdo grup i të kundërtave.
      3:
        image: notes/C2_binary_bracelets_3.png
        text: Tung, unë jam Orion dhe unë programojë robotë këtu në Play-im. Gjithë
          kompjuterët dhe trurët e robotit në nivelin e tyre fundamental janë porta
          elektronike të vogla. Kur posta është e hapur, elektriciteti mund të rrjedhë
          dhe kur është e mbyllur, elektriciteti nuk mundet.
      4:
        image: notes/C2_binary_bracelets_4.png
        text: Një shembull i binarëve në robot janë sytë e robotit. Sytë e robotit
          janë LED dhe këto janë dritat që janë on apo off. Është një sistem binarë,
          një apo tjetri. Ne mund të përdorim dritat për të prezantuar numrat binarë.
          Nëse ne kemi një set robotësh, ne mund të themi se roboti i parë është vendi
          i parë dhe roboti i dytë është vendi i dytë, roboti i tretë është në vendin
          e katërt dhe kështu. Kjo është si ju prezantoni një numër binar. Robotët
          do ta bëjnë këtë me sytë e tyre binarë dhe të llogarisin për ju.
    C2_conditionals_with_cards:
      1:
        image: notes/C2_conditionals_with_cards_1.png
        text: Ky mësim thirret kushtëzimet me karta. Cdo ditë ju merrni vendime të
          bazuara në cfarë ju shihni dhe ndëgjoni.
      2:
        image: notes/C2_conditionals_with_cards_2.png
        text: Unë dëshirojë të shkojë te parku por së pari unë duhet të vendos nëse
          duhet të marrë nje umbrellë apo jo. Kështu që shikojë jashtë dritares. Nëse
          është vranët, do ta marrë umbrellën time. Nëse jo, do t'i marrë syzet e
          diellit. Mendojë më mirë të marrë umbrellën. Cfarë unë shoh dhe ndëgjojë
          determinon cfarë marrë për te parku.
      3:
        image: notes/C2_conditionals_with_cards_3.png
        text: Kushtëzimet janë të përdorshme në lojra gjithashtu. Sot ne do të praktikojmë
          përdorjen e kushtëzimeve me një lojë me karta. Në këtë lojë, karta që unë
          vizatojë determinon cfarë shokët e mi do të bëjnë. Nëse unë vizatoj një
          shtatë, cdokush duartroket. Përndryshe, cdokush thotë "awww". Le ta provojmë!
          "Awww" "gëzuar"
      4:
        image: notes/C2_conditionals_with_cards_4.png
        text: Vë bast që ju mund të bëni në lojra që janë edhe më argëtuese me kushtëzime.
          Provoje! Kushtëzimet janë cfarë i bëjnë kompjuterët të duken të menqur.
          Një program kompjuteri që përfshin kushtëzimet mund të reagojë të përdoruesi
          dhe ndryshojë kursin e tij të veprimit.
      5:
        image: notes/C2_conditionals_with_cards_5.png
        text: Mendo për lojën tënde të preferuar. A fitoni më shumë pikë për disa
          veprime sesa ju bëni për të tjera? Kjo ndodhë sepse kompjuteri është duke
          përdorur kushtëzimet. Është mënyra që një kompjuter merr një vendim. Cka
          rreth, nëse ju goditni targetin, ju fitoni dhjetë pikë. Përndryshe, ju humbni
          tre. Kur ju dini si kushtëzimet punojnë, ju mund të krijoni të gjitha llojet
          e lojrave emocionuese.
    C2_artist_debugging:
      1:
        image: notes/C2_artist_debugging_1.png
        text: Këtu ne kemi disa blloqe në hapsirën tonë të punës. Por diqka ka gabim.
      2:
        image: notes/C2_artist_debugging_2.png
        text: Le ta rregullojmë ketë kod duke zvogëluar shpejtësinë dhe duke e shikuar
          atë si shkon përmes secilit bllok hap pas hapi.
      3:
        image: notes/C2_artist_debugging_3.png
        text: Oh, ka një problem! Mustaqet e maces janë 75 pikselë të gjata, jo 25.
    C2_bee_debugging:
      1:
        image: notes/C2_bee_debugging_1.png
        text: Keni ndegjuar ndonjëherë për rregullimin e një programi? Kjo është mënyra
          si ju kuptoni cfarë nuk punon. Kur ju rregulloni një kod, ju identifikoni
          dhe fshini gabimet.
      2:
        image: notes/C2_bee_debugging_2.png
        text: Këtu ne tashmë kemi disa blloqe në hapsirën tonë të punës. Ne do të
          përdorim butonin e hapit për të ecur përmes blloqeve, hap pas hapi, për
          të parë nëse kjo është zgjidhja e duhur dhe ku kemi nevojë ta rregullojmë.
      3:
        image: notes/C2_bee_debugging_3.png
        text: Duket sikur ka një problem! Ne kemi nevojë për një bllok më shumë ec
          përpara. Butoni i hapit na ndihmon neve të rregullojmë problemin tonë duke
          identifikuar ku gabimi është kështu qe ne mund ta riparojmë atë.
    C2_digital_footprint:
      1:
        image: notes/C2_digital_footprint_1.png
        text: Në kokën tuaj mbani kapelën dhe mendja juaj do të ju tregojë juve kur
          jeni në dhe të mendoni për kopshtin zoologjik, dhe të tundi kokën tung për
          ty dhe ty! Përdor kokën tuaj kur ju jeni online për të ruajtur cfarë është
          e juaja brenda kokës suaj dhe të dini si të jeni i sigurtë, si ti jepni
          jetës tuaj pak hapësirë private! Nga koka juaj poshtë këpucëve tua, pauzo,
          mendo për këtë. Nga këmbët të hunda juaj, pauzo dhe mendo online!
      2:
        image: notes/C2_digital_footprint_2.png
        text: Përdor zemrën tënde të rritesh dhe të rritesh, dhe ti japësh vetës një
          shkelqim të shëndetshëm, dhe të bërë një të dashur, t'i thuash dikujt se
          do të jesh i imi! Përdor zemrën tuaj kur jeni online, ndjej cfarë është
          e duhur dhe gjithmonë e këndshme, dhe trego për shokët tuaj respekt, të
          jesh i drejtë dhe i mirë në internet. Nga koka juaj te këpucët, pauzo, mendo
          për të. Nga këmbët te hunda juaj, pauzo dhe mendo online!
      3:
        image: notes/C2_digital_footprint_3.png
        text: Përdor krahët tuaj për të përqafuar kafshën tuaj shtëpiake, të mbash
          rrobat tuaja nga lagështia, dhe për të veshur mëngët tuaja të preferuara
          dhe të ju ndihmojë të flutorosh dhe të ju bëj të besosh. Përdor krahët tuaja
          kur ju jeni online, për të marrë pushim dhe për të balancuar kohën dhe të
          lësh teknologjinë anash dhe t'i gjesh vets një lis për t'u ngjitur. Nga
          koka juaj te këpucët, pauzo, mendo për të. Nga këmbët tuaja te hunda juaj,
          pauzo dhe mendo online!
      4:
        image: notes/C2_digital_footprint_4.png
        text: Përdor barkun tënd për të vendosur ushqimin, dhe të ndëgjosh ulërimin
          e tij, për të bërë një bark të bie, dhe të ndjesh gazin në pop sode. Përdor
          barkun kur je online, të shikosh për shenja të caktuara, dhe të lejosh atë
          të tregojë rrugën dhe të tregojë kur nuk është në rregull. Nga koka juaj
          te këpucët tuaja, pauzo, mendo për atë. Nga këmbët tuaja te hunda, pauzo
          dhe mendo online!
      5:
        image: notes/C2_digital_footprint_5.png
        text: Kështu që mendo me kokën tënde, dhe ndjeje me zemrën tënde, balanco
          krahët tu, ndëgjo te barku yt, online. Përdor këmbët për të drejtuar dhe
          goditur, dhe për të kërcyer në një shkop pogo, dhe të vallëzosh rreth bllokut,
          dhe të kaloni së bashku në qorapet tua me aromë. Përdor këmbët tuaja kur
          jeni online për të qendruar që të kalojnë vijën, dhe kujto të qëndrosh gjatë,
          ji i mirë te krijesat e mëdha dhe të vogla.
      6:
        image: notes/C2_digital_footprint_6.png
        text: Nga koka juaj te këpucët, pauzo, mendo për të. Nga këmbët te hunda juaj,
          pauzo dhe mendo online! Kështu që mendo me kokën tënde, dhe ndjej me zemrën
          tënde, bëj balancin me krahët tu, ndëgjo në barkun tënd, qëndro ngritur
          me këmbët tua. Nga koka juaj te këpucët tua, pauzo, mendo për të. Nga këmbët
          tua te hunda juaj, pauzo, mendo online!
    C2_digital_footprint_v2:
      1:
        image: notes/C2_digital_footprint_v2_1.png
        text: Cdoherë që ju jeni online, ju lërni një gjurmë që mund të kërkohet,
          kopjohet, shpërndahet, transmetohet dhe është e përhershme. Cfarë lloj të
          gjurmëve digjitale po leni? Cfarë lloj të gjurmëve digjitale dëshironi të
          leni?
    C2_graph_paper:
      1:
        image: notes/C2_graph_paper_1.png
        text: Ky mësim thirret "Programimi i letër grafiqeve" dhe ka të bëjë me algoritme.
          Sot ne do të mësojmë si të shkruajm programe që i tregojnë njëri tjetrit
          si të rikrijojnë imazhe të thjeshta bardhë edhe zi, duke përdorur vetëm
          shigjeta të tërhequra me dorë.
      2:
        image: notes/C2_graph_paper_2.png
        text: Një algoritëm është një listë e instruksioneve për të kompletuar një
          detyrë. Ne do të njekim këtë kuti të instruksioneve për të bërë tasin. Algoritmet
          janë me të vërtetë ndihmuese kur ju keni nevojë për dikë të kuptojë si të
          bëjmë dicka.
      3:
        image: notes/C2_graph_paper_3.png
        text: Nëse ju jeni duke shkruaj një algoritëm për një kompjuter, ju duhet
          ta ndani atë në hapa të vegjël. Kështu që përfundoje këtë rresht dhe shko
          te tjetri, pastaj te tjetri, dhe do ta përfundosh.
      4:
        image: notes/C2_graph_paper_4.png
        text: Unë përdor algoritmet në punën time. Nëse unë shkruaj të gjitha hapat
          unë mund të rikrijojë të njejtën pjesë përsëri, apo unë mund të mësojë dikë
          ta bëjë këtë. Vendos xhamin në tharrës, bashkëshkrij ato së bashku, ndjek
          të gjitha instruksionet për të bërë tasin. Algoritmet ju japin juve një
          hartë të rrugës për të përfunduar dicka.
    C2_artist_loops:
      1:
        image: notes/C2_artist_loops_1.png
        text: Këtu ne do të përdorin bllokun përsëritës të na ndihmojë neve të ruajmë
          hapat kur jemi duke programuar artistin. Ne tashmë kemi disa blloqe jashtë
          fazës tonë por ata janë atje vetëm sa të fillojmë ne.
      2:
        image: notes/C2_artist_loops_2.png
        text: Për t'i përsëritur këto blloqe katër herë për të vizatuar të gjithë
          katrorin, ne tërheqim jashtë bllokun përsëritës dhe vendosim blloqet ec
          përpara dhe kthehu djathtas brenda bllokut përsëritës. Kur shtypim lësho,
          artisti do të përsëris këta hapa katër herë për të kompletuar katrorin.
    C2_bee_loops:
      1:
        image: notes/C2_bee_loops_1.png
        text: Një unazë përsëritëse është një përsëritje e aktivitetit. Duke shkuar
          brenda një zgjua për të inspektuar, unë shikojë në një kornizë, dhe pastaj
          e vendos atë prapa. Unë përsëris të njejtin aktivitet disa herë. Është duke
          u përsëritur përreth, duke e bërë aktivitetin e njejtë disa herë.
      2:
        image: notes/C2_bee_loops_2.png
        text: Ky është blloku përsëritës. Ckado që ju vendosni brenda bllokut përsëritës
          do të përsërisë këto veprime numrin që ju i thoni t'a bëjë. Për shembull,
          në këtë nivel, më mirë sesa të terheqim jashtë ec përpara dhe të marrim
          nektarin tre herë, ne do të tërheqim atë njëherë dhe të përsërisim veprimin
          tre herë. Ajo e bëri atë më të lehtë!
    C2_maze_intro:
      1:
        image: notes/C2_maze_intro_1.png
        text: Zakonisht programimi është i gjithi në tekst por ne do të përdorim Bllokuesin
          i cili përdorë blloqe vizuele që ju tërhiqni dhe lëshoni për të shkruar
          programe. Poshtë mbulesës ju ende jeni duke krijuar kodim. Për të filluar,
          ne do të ndërtojmë kodim për një program që do të ndihmojë këtë Angry Bird
          të lëvizë përmes një labirinti për të mbrrirë te derrat e egër që vodhi
          vezët e tij.
      2:
        image: notes/C2_maze_intro_2.png
        text: Bllokuesi është i ndarë në tre pjesë kryesore. Në të majtë është labirinti
          i zogut, ku programi juaj fillon. Intruksionet për cdo nivel janë të shkruara
          poshtë labirintit. Kjo zonë e mesme është kuti e veglave dhe secili bllok
          është një komandë që zogu mund ta kuptojë. Hapësira e bardhë në të djathtë
          thirret hapësirë e punës dhe kjo është ku ne do të ndërtojmë programin tonë.
      3:
        image: notes/C2_maze_intro_3.png
        text: Nëse unë tërheq bllokun lëvizës në hapsirën tonë të punës dhe shtyp
          "lësho" cfarë ndodhë? Zogu lëvizë përpara një kuti në rrjet. Dhe cka nëse
          unë dua që zogu të bëjë dicka pasi që e lëvizë përpara një kuti? Unë mund
          të shtojë një tjetër bllok në programin tonë.
      4:
        image: notes/C2_maze_intro_4.png
        text: Unë do të zgjedhë bllokun "kthehu djathtas" dhe do ta tërheqë atë poshtë
          bllokut tim lëvizës deri sa shigjeta e verdhë të paraqitet. Pastaj do ta
          lëshojë dhe dy blloqet do të kapen së bashku. Kur unë shtyp "lësho" përsëri,
          zogu do të performojë komandat që janë grumbulluar nga lart poshtë në hapsirën
          tonë të punës.
      5:
        image: notes/C2_maze_intro_5.png
        text: Nëse ju dëshironi të fshini ndonjë bllok, vetëm largoje atë nga grumbulli
          dhe tërhiqe te shporta. Pasi që ju shtypni lësho, ju mund gjithmonë të shtypi
          butonin rivendos për të kthyer zogun mbrapa nga fillimi. Tash lë t'i marrim
          këta derra!
    C2_paper_airplanes:
      1:
        image: notes/C2_paper_airplanes_1.png
        text: Ky mësim thirret Algormitni në jetën e vërtetë. Algoritmet shpjegojnë
          gjërat që njerëzit bëjnë cdo ditë. Recepte të kekeve dhe drejtimet për të
          ndërtuar një fole janë algoritme cdo ditore.
      2:
        image: notes/C2_paper_airplanes_2.png
        text: Sot ne do të bëjmë, krijojmë dhe testojmë një algoritëm për një aeroplan
          letre. Por në fillim, ne duhet ta ndajmë këtë projekt të madh në hapa të
          vogël të lehtë për t'i ndjekur. Për të bërë një aeroplan letre. ne duhet
          të vendosim cfarë hapa të marrim dhe në mënyrë që t'i marrim ata.
      3:
        image: notes/C2_paper_airplanes_3.png
        text: Ju do të krijoni argoritmin tuaj fillimisht duke prerë në pjesë pikturen.
          Në vazhdim, ju do të zgjidhni 6 forografi që tregojnë hapat të nevojshëm
          për të bërë një aeroplan letre dhe për të aranzhuar në mënyrën e duhur.
          Pasi që keni bërë gjithcka në rregull, ju do të tregtoni algoritmet me një
          tjetër ekipë studenti për të provuar nëse algoritmi punon. Një algoritëm
          i mirë dizajnuar është shumë i rëndësishëm për të bërë aeroplanin më të
          mirë prej letre.
      4:
        image: notes/C2_paper_airplanes_4.png
        text: Kur ne bëjmë qokolatë, janë disa hapa të mëdhenjë në atë proces. Dhe
          secili nga këta hapa të mëdhenjë ka setin e vet me hapa të vegjël. Dhe ka
          recepte të ndryshme, apo algoritme, duke u bazuar në atë se si duam që qokolata
          të shijojë. Cdo hap është i rëndësishëm, edhe të vegjlit. Kështu që pa një
          hap, të tjerë nuk mund të kompletohen. Krijimi i algoritmeve që të tjerët
          mund të kuptojnë është me të vërtetë i rëndësishëm. Kjo është për shkak
          që cdo hap duhet të shkruhet, kështu që nuk ka lidhje kush e bën atë, rezultati
          është i njejtë.
    C2_playlab_createastory:
      1:
        image: notes/C2_playlab_createastory_1.png
        text: Deri tani ti ke qënë duke bërë një animim ose një histori që bën të
          njëjtën gjë sa herë që ti ekzekuton atë. Tani ti mund të bësh një lojë interaktive
          që mund ta luash.
      2:
        image: notes/C2_playlab_createastory_2.png
        text: Këtu është blloku "when arrow" dhe blloku "move actor." Ti mund ti vendosësh
          këto blloqe bashkë për të lëvizur pjesmarrësit rreth e rrotull me tastat
          e shigjetave.
    C2_relay_programming:
      1:
        image: notes/C2_relay_programming_1.png
        text: Sot ne do të transmetojmë programimin. E gjitha është rreth programimit
          në presion dhe rregullimi i gabimeve që ndonjëherë ndodhin kur ju punoni
          shumë shpejt apo në ekipe. Ne do të përdorim letër grafik programimin për
          të stimuluar kodimin, dhe përdorimin i garave transmetuese për stimulimin
          duke pasur një afat.
      2:
        image: notes/C2_relay_programming_2.png
        text: Në transmetimin e programimit, ekipet do të garojnë për të përfunduar
          nje program grafiku letre. Ju duhet të kontrolloni punën e kolegut tuaj,
          ta rregulloni, fiksoni nëse ka ndonjë gabim, shtoje shigjetën tuaj dhe lësho
          dhe etiketo kolegun tuaj.
      3:
        image: notes/C2_relay_programming_3.png
        text: Programerët përdorin shumë rregullimin për të gjetur dhe fiksuar problemet
          në algoritmet e tyre apo kodim. Ka shumë rrugë për të rregulluar problemet.
          Një nga më të lehtat është për të lëvizur hap pas hapi derisa ju gjeni dicka
          që shkon gabim, pastaj fiksoje atë.
      4:
        image: notes/C2_relay_programming_4.png
        text: Këtu, unë jam duke provuar për të bërë një salto me duar prapa, por
          vazhdoj të bie. Unë ec përmes secilës pjesë, hap pas hapi, dhe kuptojë ku
          kanë qenë gabimet e mia. Trajneri im më tregoi mua që unë nuk isha duke
          i vënë duart në kokë në rregull. Kështu që unë provova një tjeter salto
          me duar prap në kokë me pozicionin tim të ri të duarve, dhe ja dola! Unë
          isha shumë krenar që e rregullova salton time me duar prapa. Ne e gjetëm!
          Rregullimi është gjetja dhe fiksimi i problemeve. Mirë, punë e mirë!
    C2_zuck_repeat_loop:
      1:
        image: notes/C2_zuck_repeat_loop_1.png
        text: Një gjë që kompjuterën janë vërtetë të mirë është përsëritja e komandave.
          Si një person, ju do të mërziteni nëse do të duhej të bënit të njejtën gjë
          shumë herë në një rresht. Por një kompjuter mund të bëje gjënë e njejtë
          milion apo bilion herë, dhe nuk mërzitet dhe është në gjetje ta bëjë shumë
          mirë.
      2:
        image: notes/C2_zuck_repeat_loop_2.png
        text: Kështu që për shembull nëse dëshiron t'i urosh secilit në Facebook një
          urim ditëlindjeje duke dërguar një email, do të marrë më shumë kohë se një
          shekull për t'i shkruat të gjithë këto emaile për secilin. Por me pak linja
          kodimi, unë mund të kem një sistem për të dërguar një email të secili në
          Facebook duke i uruar një ditëlindje të gëzuar. Kjo është cfarë përsëritjet
          janë, dhe pse janë të vlefshme, dhe diqka që kompjuterët mund ta bëjnë shumë
          mirë.
      3:
        image: notes/C2_zuck_repeat_loop_3.png
        text: Në këtë shembull qëllimi juaj do të jetë për të lëvizur zogun për të
          marrë derrin. Tani ne do të jemi të gatshëm të përdorim bllokun "përsëritës"
          në mënyrë që të jemi të gatshëm ta bëjmë këtë shumë lehtë. Ju mund ta bëni
          këtë duke i dhënë kompjuterit komanden "ec përpara" pesë herë në mënyrë
          që të avancosh zogun një hap përpara për te derri.
      4:
        image: notes/C2_zuck_repeat_loop_4.png
        text: Apo ju mund ti thoni një kompjuteri të "ec përpara" njëherë, dhe pastaj
          t'i thoni ta "përsëris" atë 5 herë, dhe do ta bëjë gjënë e njejtë. Kështu
          që në mënyrë për ta bërë këtë tërhiq komandën tuaj "lëviz përpaa" dhe pastaj
          vendose brenda bllokut "përsërit". Dhe ju mund të klikoni në të dhe t'i
          tregoni së herë ju dëshironi të përsërisni bllokun për t'i treguar së shumë
          hapa dëshironi që të marrë përpara.
      5:
        image: notes/C2_zuck_repeat_loop_5.png
        text: Tani një gjë më shumë është që ju mund të vendosni aq shumë komanda
          sa ju dëshironi brenda bllokut "përsërit". Kështu që në këtë shembull ju
          do ti tregoni ta lëvizë përpara dhe të kthehet majtas, që do tav bëjë pesë
          herë. Gjithcka në rregull punë e mirë dhe kënaqu!
    C3_artist_functions:
      1:
        image: notes/C3_artist_functions_1.png
        text: Një nga gjërat më të mëdha në programimin kompjuterik është që nëse
          njëherë ju mësoni një kompjuter si ta bëjë një veprim, ju mund të thërrisni
          atë funksion përsëri. Ju i jepni një emër dhe pastaj ju e thërrisni atë.
          Kjo është sikur zgjerimi i një gjuhe.
      2:
        image: notes/C3_artist_functions_2.png
        text: Në programin që ne ndërtojmë, ne kemi mësuar si të vizatojmë një katror
          duke lëvizur dhe duke kthyer katër herë. Ne mund të marrin atë funksion
          dhe t'i japim një emër, vizatoj një katror, kështu që në qdo kohë që duam
          ta bëjmë atë, ne thjeshtë themi vizato një katror dhe do të kthehet dhe
          ta bëjë atë funksion, atë kod. Do të kryejë për ne. Ne e kemi shtuar atë
          koncept në gjuhën tonë programuese.
    C3_artist_intro:
      1:
        image: notes/C3_artist_intro_1.png
        text: Ju nuk do të mund as të kualifikoheni për garën nëse nuk keni njerëz
          që janë të aftë në shkenca kompjuterike sepse kaq shumë të dhëna që makinat
          grumbullojnë dhe nevoja për të pasur njerëz që mund të shkruajnë programe
          për të gjetur si të vazhdojmë të gjejmë si të ndërtojmë performancën.
      2:
        image: notes/C3_artist_intro_2.png
        text: Në këto enigma, ju do të jeni një artist që përdorë një laps për të
          vizatuar forma të ndryshme. Kudo që artisti juaj shkon, do të vizatoje një
          vizë pas jush.
      3:
        image: notes/C3_artist_intro_3.png
        text: Për të lëvizur rreth kanavacës, ju do të përdorni bllokun lëviz përpara.
          Këtu blloku lëviz përpara thotë lëviz përpara me 100 pikselë. Kur ne shtypim
          lësho, cfarë ndodhë? Artisti lëviz përpara në shumë të caktuar dhe ajo shumë
          është 100 pikselë. Pikselët janë katrorë shumë të vegjël në ekranin e kompjuterit
          tuaj.
      4:
        image: notes/C3_artist_intro_4.png
        text: Blloku tjeter që ne kemi në këtë enigmë thotë kthehu djathtas në 90
          shkallë. Dhe kur ne tërheqim atë e bën artistin tonë të kthejë një shumë
          të caktuar. Kështu që ju mund të luani përreth me aq shumë sa ju dëshironi
          që artisti të kthejë. Kjo është një 90 shkallë kthesë.
      5:
        image: notes/C3_artist_intro_5.png
        text: Dhe kjo është një 120 shkallë kthesë. Dhe kujto, ti mund të ndryshosh
          këto vlera duke klikuar në shigjetën afër numrave për pikselë dhe shkallë.
          Shijo vizatimin me artistin tuaj!
    C3_artist_nested_loops:
      1:
        image: notes/C3_artist_nested_loops_1.png
        text: Kur ju vendosni një përsëritës brenda një tjetër përsëritësi, ne thërrasim
          një unazë përsëritëse të mbivendosur. Për shembull, këtu ne kemi dhënë kodin
          tashmë për të vizatuar një trekëndësh me anë të gjatësisë 100 pikselë duke
          përdorur herët përsëritëse të setit me blloqe në tre, një për secilën anë
          të trekëndëshit.
      2:
        image: notes/C3_artist_nested_loops_2.png
        text: Por ne duam të vizatojmë gjashtë trekëndësha. Në mënyrë që ta bëjmë
          këtë, ne do të marrim këtë unazë përsëritëse dhe ta vendosim atë brenda
          një blloku tjetër përsëritës. Shumë bukur!
    C3_bee_conditionals:
      1:
        image: notes/C3_bee_conditionals_1.png
        text: Ky është një bllok i kushtëzuar. Thotë NËSE ka një nektar apo mjaltë
          që është më pak, e barabartë apo më e madhe se një numër, PASTAJ bëj diqka.
      2:
        image: notes/C3_bee_conditionals_2.png
        text: Kjo është ndihmuese kur ne nuk dijmë sa shumë nektar apo mjaltë të marrim,
          siq e shohim këtu me këtë shenjë pyetse.
      3:
        image: notes/C3_bee_conditionals_3.png
        text: Në këtë shembull, ne do të themi se NËSE lulja vjollcë ka nektar me
          të madh se 0, merr nektar. Ajo do të i tregojë bletës tonë të mbaj nektarin
          aq gjatë sa është atje. Ta-dah!
    C3_debugging_bee:
      1:
        image: notes/C3_debugging_bee_1.png
        text: Keni ndegjuar ndonjëherë për rregullimin e një programi? Kjo është mënyra
          si ju kuptoni cfarë nuk punon. Kur ju rregulloni një kod, ju identifikoni
          dhe fshini gabimet.
      2:
        image: notes/C3_debugging_bee_2.png
        text: Këtu ne tashmë kemi disa blloqe në hapsirën tonë të punës. Ne do të
          përdorim butonin e hapit për të ecur përmes blloqeve, hap pas hapi, për
          të parë nëse kjo është zgjidhja e duhur dhe ku kemi nevojë ta rregullojmë.
      3:
        image: notes/C3_debugging_bee_3.png
        text: Duket sikur ka një problem! Ne kemi nevojë për një bllok më shumë ec
          përpara. Butoni i hapit na ndihmon neve të rregullojmë problemin tonë duke
          identifikuar ku gabimi është kështu qe ne mund ta riparojmë atë.
    C3_bee_functions:
      1:
        image: notes/C3_bee_functions_1.png
        text: Një nga konceptet më të rëndësishme në shkenca kompjuterike është si
          të definosh komanda të reja, si të shtosh fjalët tua në një gjuhë kompjuterike.
          Shumica e gjuhëve kompjuterike ka vetëm rreth 100 fjalë apo komanda. Arti
          dhe magjia është në definimin e fjalëve tua të reja jashtë këtyrë blloqeve
          ndërtuese.
      2:
        image: notes/C3_bee_functions_2.png
        text: Ne e bëjmë këtë gjithë kohën në sporte. Për shembull, në basketbollm
          ju filloni duke mësuar si të dribloni, si të hedhni lart, si të tërhiqeni.
          Njëherë që ju mësoni këto lëvizje bazike, ju mësoni lëvizje të reja dhe
          t'i vendosni së bashku këto blloqe ndërtuese, si një zgjedh dhe rrotullo
          apo jep dhe shko. Ju mund pastaj të shkoni nga aty për të bërë më shumë
          lojra komplekse. Njëherë që mësoni atë lojë dhe i jepni një emër, secili
          në ekipë do të dijë ta bëjë atë.
      3:
        image: notes/C3_bee_functions_3.png
        text: Njejtë njëherë pasi që keni mësuar një kompjuter si të bëjë një veprim
          njëherë duke përdorur këto sekuenca të komandave, ju mund të krijoni emrin
          tuaj për atë veprim kështu që është e lehtë për ta përsëritur më vonë. Kur
          ju definoni komandën tuaj dhe i jepni një emër, ajo thirret një funksion.
          Tani ne do të përdorim funksionet t'i ndihmojmë bletës.
      4:
        image: notes/C3_bee_functions_4.png
        text: Në këtë shembull, funksioni jonë thirret 2 nektar, ky bllok i gjelbër
          këtu. Ne e dijmë cfarë marrja e 2 nektarëve bën dukë shikuar në këtë kuti
          gri e cila është definicioni i funksionit. Nëse ne shikojmë brenda, marrja
          e dy nektareve do të marrë nektarin dhe pastaj të marrë nektarin përsëri.
          Gjithmonë shiko cfarë ka brenda kutisë gri kështu që ju dini cfarë këto
          funksione të blloqeve të gjelbërta mund të bëjnë.
    C3_bee_nested_loops:
      1:
        image: notes/C3_bee_nested_loops_1.png
        text: Tani ne do të përdorim unazat përsëritëse të mbivendosuar me bletën.
          Ne kemi disa kode startuese që tregojnë bletë të ecë përpara dhe merr nektarin
          tre herë dhe pastaj të kthehet djathtas. Le të marrim të gjithë pjesën e
          kodit dhe mbivendosim atë brenda bllokut përsëritës dhe vendosim në përsëritje
          tre herë. U krye!
    C3_bounce:
      1:
        image: notes/C3_bounce_1.png
        text: Ju do të krijoni lojën tuaj të kërcimit që do të jeni në gjendje ta
          shpërndani me shokët tuaj! Shume bukur!
      2:
        image: notes/C3_bounce_2.png
        text: Për të filluar, ne duket të lidhim kontrollet e vozitjes në qelsat e
          shigjetës në tastierën tonë.
      3:
        image: notes/C3_bounce_3.png
        text: Ne mund të bëjmë këtë duke lidhur bllokun e shigjetës së majtë te blloku
          i majtë dhe bllokun e shigjetës së djathtë te blloku i djathtë. Jepi një
          shtysë dhe ju do të jeni duke programuar lojën tuaj të kërcimit në jo kohë!
    C3_computational_thinking:
      1:
        image: notes/C3_computational_thinking_1.png
        text: Ky mësim është të mendiarit kompjuterik. Nganjëherë të mësuarit e një
          loje të re mund të jetë e ashpër, apo jo? Në fillim mund të duket me të
          vërtetë konfuze dhe nganjëherë, nuk është askush për të ju mësuar rregullat,
          kështu që ju duhet të zbuloni tuajat.
      2:
        image: notes/C3_computational_thinking_2.png
        text: Lajmi i mirë është që ju mund të bëni më mirë dukë gjetur gjërat vetë
          kur ju dini disa trika. Këto trika janë mënyra unike për të shikuar dhe
          zgjidhjen e problemeve. Në këtë mësim, ju do të mësoni katër trike dhe praktikoni
          ato me shokët për të zbuluar rregullat për një lojë.
      3:
        image: notes/C3_computational_thinking_3.png
        text: Kur ju e ndani një problem të madh në pjesë të vogla, ju jeni duke përdorur
          trurin tuaj për të zbërthyer problemin e madh. Si të zbërthejmë problemin
          e madh ne disa probleme të vogla, ne mund të shkojmë në trikun tonë të rradhes,
          i cili thirret përshatatja e modeleve.
      4:
        image: notes/C3_computational_thinking_4.png
        text: Kjo është kur ne shikojmë për ngjasime në mes të gjërave. Njëherë që
          gjej gjërat që janë të njejta, unë mund të zbulojë gjërat që janë të ndryshme.
          Kur une fshij këto ndryshime, ajo thirret abstragim.
      5:
        image: notes/C3_computational_thinking_5.png
        text: Pasi që kam zbuluar hapat në zgjidhjen e një problemi, unë mund të vendos
          këta hapa në nje mënyrë specifike që thirret një algoritëm kështu që cdokush
          mund të përdor drejtimet e mia për të zgjidhur atë problem. Ne do të përdorim
          këta katër hapa për të zbuluar si të luajmë një lojë pa rregulla. Në fund
          të lojës, ju do të jeni në gjendje të luani dicka që duket kështu!
    C3_crowdsourcing:
      1:
        image: notes/C3_crowdsourcing_1.png
        text: Ky mësim thirret bing. Në këtë mësim ju do të përdorni një pako kartash
          për të mësuar sa lehtë disa gjëra mund të jenë për të bërë në grupe në vend
          të provojnë të bëjnë gjithqka të vetëm. Kështu që merr disa shoke dhe krijo
          diqka të bukur. Bingu është marrja e ndihmës nga një grup të madh të njerëzve
          për të përfunduar diqka më shpejtë.
      2:
        image: notes/C3_crowdsourcing_2.png
        text: In computer science, we use crowdsourcing all the time. Thousands of
          amateurs and professionals link their computers together to search through
          billions and billions of pieces of information. Looking for things like
          the next Marsenne prime number, or even possible alien communications.
      3:
        image: notes/C3_crowdsourcing_3.png
        text: Kur ju shikoni një film, secili sekond i filmit është 24 fotografi individuale,
          ne i thërrasim këto korniza. Kështu që secili nga këto fotografi ka nevojë
          për t'u krijuar dhe për t'i vendosur të gjitha bashkë. Ekipi im dhe unë,
          ne të gjithë jemi zhvillues të softuerit. Ne të gjithë punojmë për të krijuar
          një pjesë softueri që aktualisht krijon një imazh, krijon imazhin final
          që ju shikoni në ekran. Është një mjet që artistët dhe zhvilluesit mund
          ta përdorin si një pjesë të punës ekipore të tyre dhe procesit të tyre për
          të qenë të gatshëm për të krijuar imazhet që ata duan në ekran.
      4:
        image: notes/C3_crowdsourcing_4.png
        text: For example, in Finding Nemo, when Crush and Squirt and all their friends
          are flying through the East Australian Current. You're seeing images of
          water flowing by, you're seeing the colors on the back of the turtle, you're
          seeing the sides of the fish. All of those things are generated through
          math and computer programs that we write, that we then give to the artist
          and they take that to create that final image and tweak it and make it look
          beautiful and look fun.
    C3_dice_race:
      1:
        image: notes/C3_dice_race_1.png
        text: Ky mësim thirret garë me zare. Gati cdokush pëlqen të luaj lojra kompjuterike.
          A keni menduar ndonjëherë rreth asaj si programuesit e kompjuterin kthejnë
          hapat të një loje në një program? Hapi i parë në krijimi e lojrave kompjuterike
          dhe në zgjidhen e cfarë do problemi kërkon të menduarit dhe planifikimin.
      2:
        image: notes/C3_dice_race_2.png
        text: Hapi i të menduarit në zgjidhjen e problemit prodhon një algoritëm,
          cili është një plan hap pas hapi në zgjidhjen e problemit apo në përfundimin
          e detyrave. Në këtë mësim, ju do të krijoni një algoritëm për nje garë loje
          me zare. Pastaj ju do të pyesni shokët tuaj ta provojnë planin tuaj për
          të parë nëse ata mund të ndjekin hapat për të luajtur lojën. Pasi që programeri
          është i sigurtë që hapat janë korrekt, është koha për të përkthyer algoritmin
          në një program me një gjuhë që kompjuteri mund të kuptojë.
      3:
        image: notes/C3_dice_race_3.png
        text: Gati se gjithcka që ne bëjmë cdo ditë kërkon një algoritëm, një listë
          të hapave që ju mund të ndiqni për të përfunduar një detyrë. Mendo për t'u
          bërë gati për shkollë apo për të planifrikuar një ditë knaqësie me shokët
          tuaj apo fiksimin e një pjese. Për të përfunduar një nga këto detyra, ju
          duhet të ndani atë në hapa të vegjël dhe nganjëherë hapat duhet të jenë
          në një mënyrë specifike.
      4:
        image: notes/C3_dice_race_4.png
        text: Mendo për të bërë një sanduiq. Nuk ka rëndësi cilin përbërës ju nxirrni
          nga bufeja së pari. Por ju nuk mund të shperndani gjalpin e kikirikut para
          se të hapni qypin. Kompjuterët kanë nevojë për algoritme dhe programe për
          të u treguar atyre si të bëjmë edhe gjërat me të thjeshta që ne mund të
          bëjmë pa menduar për të.
      5:
        image: notes/C3_dice_race_5.png
        text: Një algoritëm është të menduarit pas asaj se qfarë duhet të ndodhë përderisa
          programi është instruksionet aktuale të dhëna te kompjuteri për ta bërë
          të ndodhë. Një algoritëm duhet të përkthehet në një program para se kompjuteri
          ta lëshojë atë. Ndarja e një detyre në algoritëm është nganjëherë e rëndë.
          Por sikur cdo aftësi e re, bëhet me e lehtë me praktikim.
    C3_farmer_while:
      1:
        image: notes/C3_farmer_while_1.png
        text: Përderisa përsëritjet janë shumë të ngjashme me atë se cfarë bëni cdo
          dite në jetë. Imagjino që ju jeni duke e larë veturën tuaj, ju do të vazhdoni
          ta pastroni përderisa është e pastër. Përderisa nuk është e pastër, vazhdo
          ta pastrosh. Ju jeni duke vlerësuar këto gjëra gjatë gjithë kohës.
      2:
        image: notes/C3_farmer_while_2.png
        text: Ne kemi një pamje të re për të ndihmuar fermerin tuaj. Thirret një përderisa-bllok.
          Është shumë e thjeshtë aktualisht. Përderisa një fjali në maje është e vërtetë,
          bëj diqka. Për shembull, përderisa ka një grumbull leviz një. Shko përpara
          dhe jeni një provë me fermerin tuaj.
    C3_functional_suncatchers:
      1:
        image: notes/C3_functional_suncatchers_1.png
        text: Ky mësim është dekorim diellsjellës funksional. Ju do të jeni duke krijuar
          këto dekorime duke përdorur funksionet. Janë disa hapa në krijimin e një
          nga këto diellsjellës dekorime. Disa nga hapat ju duhet t'i përsërisni shumë
          herë.
      2:
        image: notes/C3_functional_suncatchers_2.png
        text: Hapi i parë në thjeshtësimin e procesit për krijimin e një diellsjellës
          dekorimit është të zbulojmë cka ne duhet të përsërisim përseri dhe përsëri.
          Ne mund të grupojmë këta hapa në cfarë ne thërrasim një funksion.
      3:
        image: notes/C3_functional_suncatchers_3.png
        text: Por ka më shumë në krijimin e një diellsjellës dekorimi të bukur sesë
          përcjellja e hapave preciz. Nganjëherë ne duam të jemi kreativ dhe ndryshojmë
          ngjyren e rruzava që ne jemi duke përdorur. Ne mund të bëjmë cdo diellsjellës
          dekorim unik nëse ne përdorim rruza me ngjyra të ndryshme.
      4:
        image: notes/C3_functional_suncatchers_4.png
        text: Dekorimi juaj diellsjellës do të jetë unik i juaji kur ju mësoni të
          mendoni për rruza si variabla e cila është një fjalë që do të thotë 'placeholder'
          per informacionin që mund të ndryshojë. Kënaqu duke krijuaj dekorime diellsjellës
          të bukur duke përdorur funksionet dhe variablat!
    C3_internet:
      1:
        image: notes/C3_internet_1.png
        text: Ky mësim është rreth internetit. Interneti është një vend shumë i ngarkuar
          dhe i ngjashëm me këtë rrugë të ngarkuar. Mesazhet si veturat janë duke
          ikur shpejtë për të mbërrirë në destinacionet e tyre. Mesazhet lëvizin nëpërmes
          internetit shumë shpejt.
      2:
        image: notes/C3_internet_2.png
        text: Duke kuptuar si interneti punon do të ju ndihmojë të kuptoni cfarë po
          ndodhë kur ju përdorni internetin. Ju do të mësoni si mesazhet shkojnë nga
          kompjuteri juaj në një faqe të internetit të preferuar apo nga një shok
          në inbox të emailit. Sikur që është lehtë të drejtosh në rrugët e ngarkuara
          kur ju dini rrugët dhe mund të lexoni shenjat, udhëtimi në internet nuk
          është aq i komplikuar kur ju dini cfarë ndodhë pas skenës.
      3:
        image: notes/C3_internet_3.png
        text: Dergimi i mesazheve në internet është pak sikur dërgimi i mesazheve
          në email por me disa ndryshime. Uhë jam këtu në Google.com IP adresa për
          këtë faqe të internetit është ky numër. Ju mund të mendoni për një IP adresë
          si adresë kthyese në email. Le të imagjinojmë që unë dua të dërgojë një
          mesazh në postë te dikush në zyre. A po shikoni URL dhe IP adresën në atë
          derë? Unë e kam shkruar këtë mesazh dhe shtypur dërgo.
      4:
        image: notes/C3_internet_4.png
        text: Sikur shërbimi i postës, gjëja e parë që ndodhë është që interneti e
          ndan mesazhin në pjesë të vogla kështu që mund të dërgohet më lehtë. Këto
          pjesë të vogla thirren pako. Secila pako e mesazheve është e dërguar në
          destinacionin njëherë. Këto paketa janë të vendosura së bashku në mënyrën
          e duhur kështu që pranuesi mund të lexojë mesazhin në mënyrë korrekte. Sigurisht,
          ka shumë gjëra për të mësuar se si interneti punon por ky është një fillim
          i bukur. Ju jeni në rrugën tuaj për t'u bërë një përdorues interneti i menqur!
          Ji i sigurtë të iu tregosh familjes dhe shokëve tuaj cfarë keni mësuar!
      5:
        image: notes/C3_internet_5.png
        text: Emri im është Armanda Camp dhe unë jam një inxhinier softueri në Google.
          Unë punojë në një ekip që punon në serverin backend që ruan profile dhe
          kontakte. Në punën time, ne mendojmë shumë se si kontaktet mund të dërgohen
          në paisje tjera, sikur në telefon. Shumë njerëz kanë shumë kontakte, ju
          mund të keni thënë, 1000 kontakte dhe ne nuk duam të dërgojmë të gjithë
          këto kontakte njëherë në telefonin tuaj sepse është mesazh shumë i madh.
          Njejtë sikur interneti e ndan një mesazh të madh në pako, ne përdorim një
          koncept që thirret ndarje ku ne mund të dërgojmë vetëm 100 kontakte në një
          kohë dhe lejojmë telefonin tuaj të pergjigjet duke kërkuar për 100 të rradhës.
      6:
        image: notes/C3_internet_6.png
        text: Gjëja më emocionuese për softuerin është fakti që mund të ketë ndikim
          në të gjithë botën. Unë në fillim mësova të programoj kur unë isha gati
          nëntëmbëdhjetë. Unë mendojë që isha gati student i vitit të dytë apo i ri
          në kolegj. Programi i parë që unë kujtoj dukë shkruar është diqka që konvertoi
          Celsius në Fahrenheit. Pëlqej programimin për shkak që unë pëlqej të ndihmojë
          njerëzit. Unë mund të shkruaj programe në Google që ndihmon njerëzit rreth
          gjithë botës dhe kjo është emocionuese.
    C3_maze_conditionals:
      1:
        image: notes/C3_maze_conditionals_1.png
        text: Njerëzit marrin vendime cdo ditë. Për shembull, para se të dilni jashtë,
          ju keni një nëse deklarim që thotë nëse është duke rënë shi, unë duhet të
          marrë xhaketën time. Kompjuterët janë të mrekullueshëm kur ju vendosni këto
          lloje të deklaratave që mund seriozisht të ekzekutojnë këto gjëra në një
          shpejtësi të pabesueshme. Një program kompjuteri është me të vërtetë pak
          matematikë dhe disa nëse deklarata ku vendimi merret.
      2:
        image: notes/C3_maze_conditionals_2.png
        text: Blloku nëse ndihmon mumjet të marrin një vendim. Ajo kontrollon gjithcka.
          Për shembull, le të përdorim bllokun që thotë nëse ka një rrugë në të majtë,
          dhe jepi një komandë kthehu majtas brenda saj. Ne jemi duke ju treguar mumjeve
          të kontrollojnë rrethinat e saj, shikojnë nëse ka një rrugë majtas dhe nëse
          po, bëje atë kthesë.
      3:
        image: notes/C3_maze_conditionals_3.png
        text: Pastaj ne përdorim bllokun ec përpara brenda kësaj përsëritje për të
          mbajtur atë duke lëvizur përpara aq gjatë sa dëshiron të shkojë drejtë.
          Pastaj kur ka një kthesë, blloku nëse do të ju tregojë të bëni atë kthesë
          në të majtë. Ju mund të shihni nëse ne e bëjmë atë, nëse ne marrim kthesën
          në të majtë dhe përndryshe duke lëvizur përpara, ne do të arrijmë qëllimin
          tonë.
      4:
        image: notes/C3_maze_conditionals_4.png
        text: "Është një shembull të përdorimit nëse deklarimit i cili është më të
          vërtetë koncept fundamental në programimin kompjuterik. Një nga gjërat e
          para që kam mësuar ishtë si të shkruaj një program që ka luajtur lojën tic-tac
          toe. Unë kisha nëse deklaratën për të thënë, ok, nëse tjetri person do të
          fitojë, ec përpara dhe bllokoje atë vend. Kënaqu duke mësuar si të perdorësh
          nëse deklaratat, është një koncept kyq."
    C3_maze_level_4:
      1:
        image: notes/C3_maze_level_4_1.png
        text: Në këtë shembull, qëllimi juaj është ti dërgosh mumjet te luledielli.
          Ne mund të kishim përdorur pesë blloqe ec përpara apo ne mund të i kishin
          thënë kompjuterit të lëviz përpara dhe përsëris pesë herë duke përdorur
          bllokun përsëritës.
      2:
        image: notes/C3_maze_level_4_2.png
        text: Kjo kursen kohë dhe e bënë atë më të lehtë. Për të përdorur këtë, vetëm
          vendos bllokun ec përpara brenda bllokut përsëritës. Shtyp lësho dhe mumjet
          do të lëvizin përpara pesë herë për te luledielli.
    C3_playlab_create_game:
      1:
        image: notes/playlab_1.png
        text: Deri tani ti ke qënë duke bërë një animim ose një histori që bën të
          njëjtën gjë sa herë që ti ekzekuton atë. Tani ti mund të bësh një lojë interaktive
          që mund ta luash.
      2:
        image: notes/playlab_2.png
        text: Këtu është blloku "when arrow" dhe blloku "move actor." Ti mund ti vendosësh
          këto blloqe bashkë për të lëvizur pjesmarrësit rreth e rrotull me tastat
          e shigjetave.
    C3_songwriting_with_parameters:
      1:
        image: notes/C3_songwriting_with_parameters_1.png
        text: Ky është mësimi i shkruarjes së këngës. Muzika është sikur një program
          kompjuteri. Shenimet e shkruara dhe fjalët tregojnë këngëtarit saktësisht
          cfarë të bëjë. Disa pjesë të muzikës janë të përdorura përseri dhe përsëri.
      2:
        image: notes/C3_songwriting_with_parameters_2.png
        text: Ne e thërrasim këtë kor. Në një program kompjuterik, pjesët e programit
          që janë të përdorura shumë herë thirren funksione. Kur ju lexoni tekstin
          e këngëve dhe thotë fjalën kor, a e këndoni fjalën kor? Jo, ju shikoni në
          krye të faqes për të parë cfarë fjalë duhen për korin.
      3:
        image: notes/C3_songwriting_with_parameters_3.png
        text: Në këtë mësim, ju do të mësoni një këngë të vogël pa kuptim që thirret
          lepuri i vogël foo foo. Kënga ka një kor që ju do të këndoni shumë herë
          përsëri dhe përsëri. Një funksion është një pjesë e kodimit qe ju mund ta
          thërrisni dhe përdorni shumë herë. Ajo e bën programimin më të lehtë dhe
          më eficient kështu që ju nuk duhet të shkuani hapat të funksionit tuaj shumë
          herë. Ju mund ta shkruani atë vetëm njëherë!
    C4_bee_conditional:
      1:
        image: notes/C4_bee_conditional_1.png
        text: Ky është blloku kushtëzues. Ajo thotë nëse jeni në lule apo në huall,
          pastaj bëj diqka. Kjo është e përdorshme kur ne nuk dijmë sa shumë mjaltë
          apo nektar të marrim siq e shohim këtë me këtë shenjë pyetse.
      2:
        image: notes/C4_bee_conditional_2.png
        text: Në këtë shembull, ne do të themi, nëse është një lule, merr gjithë nektarin
          dhe pastaj përdore një tjetër për të thënë, nëse është një huall, bëj mjaltë.
          Ta-dah!
    C4_conditionals:
      1:
        image: notes/C4_conditionals_1.png
        text: Ne kemi blloqe të reja që thirren blloku nëse/tjetër. Është një deklaratë
          kushtëzuese sikur blloku nëse që keni përdorur në enigma më parë. Por tani
          ka një pjesë tjetër në mes që thotë tjetër. Blloku nëse/tjetër lejon bletën
          të marrë një vendim në mes dy seteve të veprimeve. Nëse bleta është në një
          lule, bleta do të bëjë setin e veprimeve që ju vendosni në pjesën e parë
          ku ajo thotë bëje. Nëse bleta nuk është në një lule, bleta do të bëjë setin
          e veprimeve që ju vendosni në vrimë ku ajo thotë tjetër.
      2:
        image: notes/C4_conditionals_2.png
        text: Nëse deklarimet janë si kompjuterët janë të gatshëm të marrin vendime.
          Njerëzit vendosin kushtezimet për kompjuterin që thotë nëse kompjuteri është
          i prezantuar me një situatë të caktuar bëjë këtë. Tjetër, e cila do të thotë
          përndryshe, bëjë këtë. Maja e bllokut tonë nëse/tjetër thotë nëse në një
          lule. Por maja e bllokut tonë do të thotë gjëra tjera, sikur nëse nektari
          bën 2 apo nëse ka një rrugë përpara, blloku jonë do të sillet në të njejtën
          mënyrë. Ai nëse deklarim në maje është i vërtëte do të bëjë setin e parë
          të veprimeve. Por nëse deklarimi në maje është fals, do të bëjë setin e
          dytë të veprimeve.
    C4_for_loops:
      1:
        image: notes/C4_for_loops_1.png
        text: When you use a repeat block to loop your code, how does the computer
          know when it's repeated enough times? The repeat block is actually hiding
          a more sophisticated piece of code called a for loop which counts from a
          starting value up to an ending value by a specific increment.
      2:
        image: notes/C4_for_loops_2.png
        text: For example, a repeat three block counts from 1 to 3 by 1. Every time
          it counts, it runs the code inside the loop. The for loop knows how many
          times it has run by using a counter variable which is set to the starting
          value at the beginning of the loop and has the increment added to it each
          time the loop is run. As soon as the counter variable is greater than the
          ending value, the loop stops running.
      3:
        image: notes/C4_for_loops_3.png
        text: The benefit of using a real for loop instead of the repeat block is
          that you can actually see the counter variable and use it in your loop.
          For example, if I have a series of flowers and the first one has one nectar,
          the second one has two nectars and the third one has three, I can use the
          for loop to tell the bee to collect 'counter' nectars each time, which would
          one at the first flower, two at the second and three at the third.
      4:
        image: notes/C4_for_loops_4.png
        text: Also in a for loop, you can increment the counter by a number other
          than one each time. You can potentially count by 2s, 4s or even an amount
          that changes every time through.
    C4_for_loops_bee:
      1:
        image: notes/C4_for_loops_bee_1.png
        text: When you use a repeat block to loop your code, how does the computer
          know when it's repeated enough times? The repeat block is actually hiding
          a more sophisticated piece of code called a for loop which counts from a
          starting value up to an ending value by a specific increment.
      2:
        image: notes/C4_for_loops_bee_2.png
        text: For example, a repeat three block counts from 1 to 3 by 1. Every time
          it counts, it runs the code inside the loop. The for loop knows how many
          times it has run by using a counter variable which is set to the starting
          value at the beginning of the loop and has the increment added to it each
          time the loop is run. As soon as the counter variable is greater than the
          ending value, the loop stops running.
      3:
        image: notes/C4_for_loops_bee_3.png
        text: The benefit of using a real for loop instead of the repeat block is
          that you can actually see the counter variable and use it in your loop.
          For example, if I have a series of flowers and the first one has one nectar,
          the second one has two nectars and the third one has three, I can use the
          for loop to tell the bee to collect 'counter' nectars each time, which would
          one at the first flower, two at the second and three at the third.
      4:
        image: notes/C4_for_loops_bee_4.png
        text: Also in a for loop, you can increment the counter by a number other
          than one each time. You can potentially count by 2s, 4s or even an amount
          that changes every time through.
    C4_for_loops_no_bee:
      1:
        image: notes/C4_for_loops_no_bee_1.png
        text: When you use a repeat block to loop your code, how does the computer
          know when it's repeated enough times? The repeat block is actually hiding
          a more sophisticated piece of code called a for loop which counts from a
          starting value up to an ending value by a specific increment.
      2:
        image: notes/C4_for_loops_no_bee_2.png
        text: For example, a repeat three block counts from 1 to 3 by 1. Every time
          it counts, it runs the code inside the loop. The for loop knows how many
          times it has run by using a counter variable which is set to the starting
          value at the beginning of the loop and has the increment added to it each
          time the loop is run. As soon as the counter variable is greater than the
          ending value, the loop stops running. The benefit of using a real for loop
          instead of the repeat block is that you can actually see the counter variable
          and use it in your loop.
    C4_function_create:
      1:
        image: notes/C4_function_create_1.png
        text: Now that you've edited function blocks, it's time to create a new function
          block from scratch. It's really simple. You'll see the toolbox has a category
          called functions. If you click on this, you'll see an orange button called
          create a function. Clicking on this brings up the function editor that you've
          already used to edit existing function blocks.
      2:
        image: notes/C4_function_create_2.png
        text: Just like before, you started by naming your function, writing down
          a description for what the function is supposed to do. For instance, it's
          supposed to draw a square or draw a triangle and then drag blocks from the
          toolbox into the white work space below. Remember to drag these blocks inside
          the green wrapping block for the function.
      3:
        image: notes/C4_function_create_3.png
        text: Once you're done, click on save and exit. This will take you back to
          the main puzzle work space. The new function you created will show up as
          a green block in the function category in your toolbox. Drag and drop this
          into the main work space and use it like any other block to solve the puzzle.
    C4_function_edit:
      1:
        image: notes/C4_function_edit_1.png
        text: Një nga gjërat më të mëdha në programimin kompjuterik është që nëse
          njëherë ju mësoni një kompjuter si ta bëjë një veprim, ju mund të thërrisni
          atë funksion përsëri. Ju i jepni një emër dhe pastaj ju e thërrisni atë.
          Kjo është sikur zgjerimi i një gjuhe.
      2:
        image: notes/C4_function_edit_2.png
        text: In the program we built, we learned how to draw a square by moving and
          turning four times. We can take that function and give it a name, draw a
          square so that any time we want to do that, we simply say draw a square
          and it will go back and invoke that function, that code and it will get
          done for us. We've added that concept to our programming language.
      3:
        image: notes/C4_function_edit_3.png
        text: In this puzzle, we have already created a draw a square function for
          you. You'll see it in the toolbox as a green block. What you'll need to
          do is write the same code you wrote before to draw a square and put it in
          this function. To do that, click on the edit option in the green draw a
          square block. This will open up the function editor. The function editor
          has three parts. A place where you name your function. This will appear
          on the green block before that function. Then write out a short description
          of what your function is supposed to do.
      4:
        image: notes/C4_function_edit_4.png
        text: In this case, it's supposed to draw a square. The white space below
          this is the work space and works just like the work space you've already
          been using. Drag and drop blocks from the toolbox into this work space.
          Remember to put the blocks that create a square inside the green wrapping
          block for the function. Once you're done, click on save and exit. This will
          take you back to the main puzzle work space. Now you can use the draw the
          square function block just like any other block to solve the puzzle.
    C4_function_parameters:
      1:
        image: notes/C4_function_parameters_1.png
        text: Here's a function that draws a square with 50 pixel sides. That's great
          but what if I wanted to draw a square with sides 50 pixels and another square
          with sides of 100 pixels? We shouldn't have to make two separate functions
          that do almost the same thing. Instead, we can use one function with a parameter.
      2:
        image: notes/C4_function_parameters_2.png
        text: Parameters allow us to pass values into a function that get used as
          variables inside the function. Let's try adding a parameter called like
          to this function so we can use it to create squares of different sizes.
          In the function editor, you can edit the name and description like before
          but now you can also add a parameter. Write the name of your parameter in
          the space and click Add Parameter. This will create a red block with the
          name of the parameter you just created. Now we can replace the move forward
          by 100 block with the parameter Length so it will move forward by Length.
      3:
        image: notes/C4_function_parameters_3.png
        text: Click save and close and drag out your new create a square block from
          the functions category in the toolbox. You'll notice there's an empty space
          next to length because the function wants to know what value the parameter
          Length should have. Drag a number block from the Math category and place
          it in this space. See how you can use the function again and again with
          different lengths to make squares of different sizes? Try it for yourself!
    C4_intro:
      1:
        image: notes/C4_intro_1.png
        text: Zakonisht programimi është i gjithi në tekst por ne do të përdorim Bllokuesin
          i cili përdorë blloqe vizuele që ju tërhiqni dhe lëshoni për të shkruar
          programe. Poshtë mbulesës ju ende jeni duke krijuar kodim. Për të filluar,
          ne do të ndërtojmë kodim për një program që do të ndihmojë këtë Angry Bird
          të lëvizë përmes një labirinti për të mbrrirë te derrat e egër që vodhi
          vezët e tij.
      2:
        image: notes/C4_intro_2.png
        text: Bllokuesi është i ndarë në tre pjesë kryesore. Në të majtë është labirinti
          i zogut, ku programi juaj fillon. Intruksionet për cdo nivel janë të shkruara
          poshtë labirintit. Kjo zonë e mesme është kuti e veglave dhe secili bllok
          është një komandë që zogu mund ta kuptojë. Hapësira e bardhë në të djathtë
          thirret hapësirë e punës dhe kjo është ku ne do të ndërtojmë programin tonë.
      3:
        image: notes/C4_intro_3.png
        text: If I drag the move block to our work space and press "run", what happens?
          The bird moves forward one box on the grid. And what if I want the bird
          to do something after it moves forward one box? I can add another block
          to our program.
      4:
        image: notes/C4_intro_4.png
        text: I'm going to choose the "turn right" block and I'll drag it under my
          move block until the yellow arrow appears. Then I'll drop it and the two
          blocks will snap together. When I press "run" again,  the bird will perform
          the commands that are stacked from top to bottom on our work space.
      5:
        image: notes/C4_intro_5.png
        text: Nëse ju dëshironi të fshini ndonjë bllok, vetëm largoje atë nga grumbulli
          dhe tërhiqe te shporta. Pasi që ju shtypni lësho, ju mund gjithmonë të shtypi
          butonin rivendos për të kthyer zogun mbrapa nga fillimi. Tash lë t'i marrim
          këta derra!
    C4_math_artist:
      1:
        image: notes/C4_math_artist_1.png
        text: If I want to draw a rectangle 50 pixels tall and that is twice as wide
          as it is tall, how would I program the computer to do that? Well, I could
          tell the artist to go up fifty, turn right, and then go over 100 and move
          the whole thing twice. But then I'm doing the math for the computer.
      2:
        image: notes/C4_math_artist_2.png
        text: Multiplying fifty by two in your head may not that hard but computers
          are really good at doing math so we should leave it to them whenever possible.
          If I just used a variable called height instead, then I could easily change
          height to fifty and then change my algorithm to tell the artist to go up
          by height, turn right and then go over by height times 2, which gives us
          a rectangle that is twice as wide as it is tall.
    C4_unplugged_algorithms:
      1:
        image: notes/C4_unplugged_algorithms_1.png
        text: This lesson is called Tangram Algorithms. A tangram is a puzzle with
          seven pieces that can be put together to make other shapes. You'll be using
          an algorithm to explain to your partner how to put the puzzle together.
      2:
        image: notes/C4_unplugged_algorithms_2.png
        text: An algorithm is just a of list steps that you can take to complete a
          task. We use them every day with things like shopping lists and recipes.
          If you keep an algorithm simple, there are lots of ways to interpret it
          and whoever performs that algorithm might not get exactly what you wanted.
          If you want to make sure that everyone ends up with the exact same thing,
          then your algorithm will need to be detailed and very specific.
      3:
        image: notes/C4_unplugged_algorithms_3.png
        text: I'm using an algorithm today to complete a painting. I wanted to try
          doing a painting of some wolves but I'm not the most amazing painter. Luckily
          for people by me, there is paint by numbers. There are forty colors and
          it has little letters and numbers that tell you which color to paint each
          section. Paint by numbers tells me exactly what color to use and where.
      4:
        image: notes/C4_unplugged_algorithms_4.png
        text: It's very specific so I'm able to follow directions and the painting
          will come out looking awesome. It's a great algorithm. If the instructions
          weren't specific enough, my wolves wouldn't look as good. When you really
          want something to turn out exactly the way that you planned it, it's best
          to be extremely precise.
    C4_unplugged_binary:
      1:
        image: notes/C4_unplugged_binary_1.png
        text: Each team, the person who's instructing that's the person who's holding
          the paper, has to figure out what their off symbol is going to be and what
          their on symbol is going to be. In binary, it's kind of like an alphabet
          with two letters. Like having A and B be your entire alphabet but you've
          got a 0 and a 1.
      2:
        image: notes/C4_unplugged_binary_2.png
        text: The most common way you use binary is in an if statement. It's a classic
          thing from programming. The program runs along and it says if something
          is true, then do this. Or it's not true and you do something else. What
          if you want to do something maybe a little more complicated. Instead an
          if statement, you want to work with something like an image or a sound in
          a computer.
      3:
        image: notes/C4_unplugged_binary_3.png
        text: 'A computer only knows binary but an image, it''s not binary, it''s
          not ones and zeros so how do you do that? Here''s an example: You have this
          beautiful picture. Now a picture is basically a form of information. All
          information can be encoded in binary one way or another, you just have to
          figure out how to do it.'
      4:
        image: notes/C4_unplugged_binary_4.png
        text: You imagine that we're going to put a grid over this panda bear and
          for each square, we're going to decide whether that square is more black
          or more white. And then we're going to color it that way. Now each cell
          on the grid is either black or white and then the black squares we say those
          are zeros (binary digit) and the white squares are ones, the other binary
          digit. At the end, you're left with just a bunch of ones and zeros. That's
          how you represent this image in binary.
    C4_unplugged_forloops:
      1:
        image: notes/C4_unplugged_forloops_1.png
        text: This lesson is called for loop fun. In this lesson, we'll use a number
          line to play a dice game. Each player will roll three times to assign a
          starting value, a stopping value, and our interval. During each turn, we
          circle our starting value, and every value that is the same number of steps
          forward as our interval value. We stop circling when we get to our stopping
          value. The person with the highest score wins!
      2:
        image: notes/C4_unplugged_forloops_2.png
        text: For loops can come in handy a lot of places and if you were to become
          a meteorologist, you would use for loops all the time. Hi, I'm Becky. I
          work at EverPower Renewables as a wind meteorologist. I forecast wind speeds
          for the Columbia River Gorge area where the company owns wind farms.
      3:
        image: notes/C4_unplugged_forloops_3.png
        text: We're trying to understand how much wind is going to be there so that
          we know how much power is going to be outputted. We give that information
          to real time energy traders. They buy and sell power based on how much power
          we tell them is going to be there in order to make sure the power grid is
          balanced, your lights stay on, and that we maximize the amount of energy
          we get out of our farms.
      4:
        image: notes/C4_unplugged_forloops_4.png
        text: We're at the national control center for EverPower Renewables here in
          Portland and this is where we have information coming in from all our farms
          across the country. Even the highest power computers today can't simulate
          the atmosphere everywhere. In computer forecasting models, we have what
          we call a grid. Each grid point is a latitude, longitude. We have to calculate
          the physics and try and figure out the wind speed, temperature,  pressure,
          that sort of thing.
      5:
        image: notes/C4_unplugged_forloops_5.png
        text: Since these are fairly big grids and we're doing this in a lot of points
          we're looping over these things millions and millions of times. Everything
          I do I'll use for loops. Here for example is a for loop right there. When
          you're forecasting wind, there's so many different parameters that go into
          it it would be impossible for a human to sit down and do all those calculations.
          There's so many different aspects to what's going to be affecting what's
          happening to the wind that we need a computer model in order to forecast
          it.
    C4_unplugged_madlibs:
      1:
        image: notes/C4_unplugged_madlibs_1.png
        text: In this lesson, we'll be playing with some fill in the blank stories.
          You have a template that you can fill in to create similar stories that
          have very amusing differences.
      2:
        image: notes/C4_unplugged_madlibs_2.png
        text: In this lesson, we also learned how to make an abstracted template from
          two stories that have already been created. Abstraction is the art of removing
          differences and details so that you can see how one solution might work
          for many different problems. It's very helpful in computer science because
          it allows us to create functions that may be useful in several different
          situations.
    C4_unplugged_parameters:
      1:
        image: notes/C4_unplugged_parameters_1.png
        text: This lesson is called songwriting with parameters. We're going to be
          writing some songs here. Sometimes the chorus is just a little bit different
          each time you sing it. Do you remember Old Macdonald Had a Farm? The chorus
          is slightly different for each animal. And on that farm, he had a cow, e-i-e-i-o.
          The small change in each chorus can be shown using something we call parameters.
      2:
        image: notes/C4_unplugged_parameters_2.png
        text: Sometimes a function needs a parameter. A parameter is an extra piece
          of information you can pass to a function to customize it for a special
          need. When you make ice cream sundaes with your friends, you are using a
          process similar to parameters in a computer program.
      3:
        image: notes/C4_unplugged_parameters_3.png
        text: The disk of vanilla ice cream might be the same for every sundae but
          when you ask your friends which two toppings they'd like, you could get
          lots of different combinations. Topping is the function name but each type
          of topping is a parameter. Functions and parameters work together to make
          great computer programs and great sundaes too.
    C4_unplugged_variables:
      1:
        image: notes/C4_unplugged_variables_1.png
        text: This lesson is called variables in envelopes. We're going to learn how
          we can build sentences when we're still missing pieces of information. Most
          of us are already familiar with the idea of filling in a blank. We do it
          when we're putting our name on our homework. Sometimes there's more than
          one word that needs to be filled out and in that case, we give that blank
          a label so that we know which piece of information goes where.
      2:
        image: notes/C4_unplugged_variables_2.png
        text: Variables are placeholders for pieces of information that can change.
          By using a variable for the missing information, we can continue working
          on whatever we were doing and let someone else fill in the missing information
          later. In software, we use variables a lot. We use variables as placeholders
          for name, email address, and even username. That way we can let the program
          know where those details will appear after the user fills them in. We use
          variables all the time in our work.
      3:
        image: notes/C4_unplugged_variables_3.png
        text: Any time you need to store a piece of information for later, we use
          a variable. Let's say we need to count the number of times the user has
          tweeted. Every time that user tweets, we'll add one to that number and every
          time the user deletes a tweet, we'll decrease that number by one. Anytime
          we need to know how many times that user has tweeted, we'll just look at
          that variable.
    C4_variables_artist:
      1:
        image: notes/C4_variables_artist_1.png
        text: A variable is a container you can store a value in. When you use that
          variable in an algorithm, it opens up the container and looks at the value
          inside. This lets you write smarter algorithms that behave differently depending
          on the value stored in the variable.
      2:
        image: notes/C4_variables_artist_2.png
        text: For example, if you wanted to write an algorithm to say Happy birthday,
          you're turning 10! to my little brother, that's great now but when I run
          it next year I'd want it to say, Happy birthday, you're turning 11! I could
          create a variable called age to store my brother's age and write my algorithm
          to say Happy birthday, you're turning 'age' instead. Because variable can
          change, every year I can update the variable 'age' to equal 'age' plus 1.
      3:
        image: notes/C4_variables_artist_3.png
        text: In this puzzle, we're going to be using a variable that will set the
          length of the line our artist draws. Later on in our code, the move forward
          block will look at that length variable to see what value you've set it
          to.
    C4_variables_playlab:
      1:
        image: notes/C4_variables_playlab_1.png
        text: A variable is a container that you can store a value in. When you use
          that variable in an algorithm, it opens up the container and looks at the
          value inside. This lets you write smarter algorithms that behave differently
          depending on the value stored in the variable.
      2:
        image: notes/C4_variables_playlab_2.png
        text: Now you're going to try playlab where you are given different games
          and you can change the values of variables like speed, height, score, in
          order to change the game. You won't have to change the algorithm of the
          game to change how it plays, just the variable.
      3:
        image: notes/C4_variables_playlab_3.png
        text: In my work for Kindle and on X-ray for books, we apply variables in
          many different ways. One way that you can use a variable is to store page
          numbers of a book. A user can increase and decrease the size of the font
          on a page. Based on the font size, the number of pages in the book can change.
          We can adjust it by storing the number of pages in the variable.
    infinity_playlab_events:
      1:
        image: notes/infinity_playlab_events_1.png
        text: Now we're going to learn about something that all game programmers use
          everyday. They're called events. An event tells your program to listen for
          when something happens. And then when it does, it performs an action. Some
          examples of events are listening for a mouse click, an arrow button, or
          a tap on the screen.
      2:
        image: notes/infinity_playlab_events_2.png
        text: Here, we're going to make Baymax move up to touch Hiro and move down
          to touch Rapunzel when the player uses the up/down arrow keys or the up/down
          buttons. We'll use the when up arrow block and attach the move actor up
          block to it, so when the player presses the up arrow key, everything attached
          to the "when up arrow" block is run. We'll do the same thing to make Baymax
          move down. Step by step your game is getting more interactive.
    infinity_playlab_intro:
      1:
        image: notes/infinity_playlab_intro_1.png
        text: So what grade are you in? Second. Tenth grade. First grade. I was in
          eighth grade when I learned to program. I got my first computer when I was
          in sixth grade. What gets me excited is being able to fix people's problems.
          You can express yourself, you can build things from an idea.
      2:
        image: notes/infinity_playlab_intro_2.png
        text: Computer science is the basis for a lot of the things that college students
          and professionals will do for the next twenty or thirty years. I like programming
          because I like helping people. I get the opportunity to build something
          that's gonna make people's lives easier. I think it's the closest thing
          we have to a superpower. Getting started is the most important part. I'm
          a beginner myself and I want you to learn with me.
      3:
        image: notes/infinity_playlab_intro_3.png
        text: I'm John Vechey, I'm one of the co-founders of PopCap Games. We make
          games like Plants vs. Zombies, Bejeweled, and Peggle. A lot about games
          isn't how perfect your code is, it's not how perfect your art is, it's about
          how does it feel and how much fun it is. You can only get that sense by
          trying it, by doing it, by learning and adapting and iterating your own
          skills of making games.
      4:
        image: notes/infinity_playlab_intro_4.png
        text: Do you have a favorite video game? Well, we're going to take one step
          towards creating games just like that using Play Lab. Good games have a
          story and every story has actors. Actors do things like speak, move, and
          interact with each other. Maybe even score points based on the rules of
          the game. Today we'll be learning how to do all these things, one by one,
          with Disney's characters like Anna, Elsa, Hiro, Baymax, and Rapunzel. We'll
          build a game from scratch that can be shared and played on a phone.
      5:
        image: notes/infinity_playlab_intro_5.png
        text: Your screen is split into three main parts. On the left is the gamespace,
          where your program will run. The instructions for each level are written
          below. This middle area is the toolbox, and each of these blocks is a piece
          of code. The white space on the right is called the workspace, and this
          is where we'll build our program.
      6:
        image: notes/infinity_playlab_intro_6.png
        text: To start off, you'll need to link your blocks to the orange "when run"
          block. You can link multiple blocks together by dragging them out until
          you see the yellow outline, and then they'll snap together. In this first
          puzzle, Hiro is Actor 1 and Baymax is Actor 2. We need to move Hiro to get
          to Baymax by dragging the "move right" block out and linking it to the "when
          run" block. Once you have your blocks in place, hit the "Run" button to
          see what you've programmed.
      7:
        image: notes/infinity_playlab_intro_7.png
        text: Get started and by the end you'll be able to create your own game with
          these amazing actors that can interact, score points, throw microbots, cherries,
          saucepans, sparkles, and ice.. and vanish each other. It's all up to you!
    infinity_playlab_repeat_forever:
      1:
        image: notes/infinity_playlab_repeat_forever_1.png
        text: Can you imagine if you had to repeat something forever and ever? Hopefully
          you'll never have to because computers are really good at repeating things.
          This is the repeat forever block. Anything inside this block will happen
          forever in the game.
      2:
        image: notes/infinity_playlab_repeat_forever_2.png
        text: So if we wanted an actor to do something repeatedly without the player
          having to do anything, we'll put those blocks inside the repeat forever
          block. In this next puzzle, our goal is to help Anna walk up and down continuously.
          Learning how the repeat commands work will save you a ton of time later
          when you build your own game.
    tutorial_puzzle_challenge:
      1:
        image: notes/tutorial_puzzle_challenge_1.png
        text: What do you want to be when you grow up Olivia? An astronaut. Do you
          happen to know what a computer programmer is? Yeah um no. Ummm wait what?
          I'm not really sure how to explain it computer programming is pretty simple.
          It's a set of instructions like a recipe, you have to follow them step-by-step
          to get the end result you want.
      2:
        image: notes/tutorial_puzzle_challenge_2.png
        text: I can change the number of pixels, the length of the line, using this
          dropdown. How long was it again? You can see the instructions again by looking
          under the run button. Here I used the move forward block and I'm going to
          select 100 pixels. I can delete a block by dragging it into the toolbox
          or the trash can. Let's put it back.
      3:
        image: notes/tutorial_puzzle_challenge_3.png
        text: Run the code by pressing run. Well that didn't work! I'll press reset
          and figure out what's wrong. You can try a puzzle as many times as you'd
          like and skip puzzles and come back to them. Just make sure to try your
          best and don't give up. Let's add another move forward. That still didn't
          work. I can place a block between other blocks.
      4:
        image: notes/tutorial_puzzle_challenge_4.png
        text: Let's take a turn block and place it in between the move forwards. Turn
          left 45 degrees. Let's run it again. Reset, run, awesome! Here's another
          puzzle. Sometimes you are given starter code to complete. Here I need to
          add the appropriate lengths and degrees.
      5:
        image: notes/tutorial_puzzle_challenge_5.png
        text: You may sometimes accidentally trash the starter code. What do you do
          then? You can press clear puzzle and start all over again. I'm going to
          drag this number block into the different pixel areas. Select 100 for pixels,
          45 for degrees and 100 for pixels again. Awesome! Here is the Code Studio
          bee. I need to move the bee to each flower and get nectar.
      6:
        image: notes/tutorial_puzzle_challenge_6.png
        text: The first flower is three blocks away so I need three move forwards.
          1, 2, 3. Then a get nectar, then another get nectar. Well that didn't work!
          I'll place another move forward between the get nectars and run it again.
          Yay, it works! You just learned how to use the Code Studio artist and bee
          puzzles. Good luck on the Code Studio puzzle challenge.
    unplug1:
      1:
        image: notes/unplug1_1.png
        text: What do you want to be when you grow up Olivia? Umm, an astronaut! Do
          you happen to know what a computer programmer is? Yeahh, umm, no. Umm, what
          what? I'm not really sure how to explain it. Computer programming is pretty
          simple. It's a set of instructions, like a recipe. You have to follow them
          step by step to get the end result you want.
      2:
        image: notes/unplug1_2.png
        text: Computer science is a way to impact the world. It can be music videos,
          it can be games, detect whether or not someone is related to someone else.
          Find you know, people's friends. You can do all sorts of other crazy things
          that actually save lives. You do have to have a drive I think. It is to
          me like a paintbrush. I think great programming is not all that dissimilar
          from great art.
      3:
        image: notes/unplug1_3.png
        text: When I finally learned a little bit of programming, that blank wall
          resolved into a bunch of doors and you open them and of course then you
          find behind them is another hallway filled with a bunch of doors. Programming
          is fun and easy. You can do anything your mind wants to do. Finally you
          start to open enough doors the light comes in. To me a finished program
          is like a structure filled with light. All the corners are illuminated.
          The number of people that you can touch and interact with is something the
          world has never seen before.
      4:
        image: notes/unplug1_4.png
        text: Our first lesson in this series is all about what computer science is,
          what a computer scientist does and how you can be more responsible in your
          use of technology. It's a very important lesson but it is a little text-heavy.
          At the end, you get to make your very own customized encoding using your
          initials. It's a fun activity and it's very empowering because binary is
          one of those things that feels very technical but once you understand it,
          it's like you speak a secret language.
    unplug2:
      1:
        image: notes/unplug2_1.png
        text: The lesson on computational thinking is intended to teach you how to
          take a big difficult problem and break it down into several simpler problems.
          The goal of this lesson is to write a set of instructions that someone can
          follow to draw one of the monsters included in the lesson plan.
      2:
        image: notes/unplug2_2.png
        text: 'Students will break into groups to write instructions and then they''ll
          switch them with another group that will have to draw the monster. Groups
          will write instructions using the four steps of computational thinking:
          decomposition, pattern location, abstraction and algorithms.'
      3:
        image: notes/unplug2_3.png
        text: First groups will decompose the task which means make a game plan. Then
          they'll look for patterns between all the monsters in the catalog. When
          they come across differences between the monsters, they'll abstract or remove
          those details. For instance, one monster in the catalog has vegitas eyes
          and another has spritem eyes. But they both have eyes so we can write a
          line that says the monster has blank eyes.
      4:
        image: notes/unplug2_4.png
        text: So students will be able to write a set of instructions, called an algorithm,
          that list the monsters' parts with blanks for what the styles should be.
          This is the set of instructions they'll pass to other students to recreate
          their very own monster.
    unplug3:
      1:
        image: notes/unplug3_1.png
        text: In graph paper programming, we help explain how coding works by trying
          to help people recreate drawings using only arrows and scribbles. One person
          is given a small drawing on graph paper and they need to go through using
          only specific arrows and try to describe how to recreate that drawing.
      2:
        image: notes/unplug3_2.png
        text: 'In this activity, the only symbols you can use are these: move one
          square forward, one square backward, move one square up, move one square
          down, change to next color, and fill in your square with color. Once we
          have that coded up, we can hand it off to another person who can read the
          code and try and recreate the picture.'
    unplug4:
      1:
        image: notes/unplug4_1.png
        text: In graph paper programming, we help explain how coding works by trying
          to help people recreate drawings using only arrows and scribbles. One person
          is given a small drawing on graph paper and they need to go through using
          only specific arrows and try to describe how to recreate that drawing.
      2:
        image: notes/unplug4_2.png
        text: In the second half of the activity, we ask students how many different
          ways they can fold a piece of paper to create sixteen identical rectangles.
          Then you'll discuss how multiple solutions can lead to the same end result
          and why some solutions are better in certain situations.
    unplug5:
      1:
        image: notes/unplug5_1.png
        text: In graph paper programming, we help explain how coding works by trying
          to help people recreate drawings using only arrows and scribbles. One person
          is given a small drawing on graph paper and they need to go through using
          only specific arrows and try to describe how to recreate that drawing.
      2:
        image: notes/unplug5_2.png
        text: In the second half of the activity, we ask students how many different
          ways they can fold a piece of paper to create sixteen identical rectangles.
          Then you'll discuss how multiple solutions can lead to the same end result
          and why some solutions are better in certain situations.
    unplug6:
      1:
        image: notes/unplug6_1.png
        text: This activity is called coding with cards and it's great for any age.
          Like you learned with the if statements in earlier lessons,  during Blockly,
          if statements have a piece about them you have to evaluate to find out if
          it's true or false. That's the conditional and it can be used in lots of
          different ways.
      2:
        image: notes/unplug6_2.png
        text: We take advantage of that by creating programs on paper that you run
          using a random draw of playing cards. You might have an if statement that
          says something like if the card you draw is greater than 8, you get a point.
          Otherwise, your opponent gets a point. You can make it as simple or as complicated
          as you feel comfortable.
    unplug7:
      1:
        image: notes/unplug7_1.png
        text: You know how when you look up the lyrics for a song and they define
          the chorus at the very beginning and then for the rest of the song, they
          just refer you back to the chorus? That's how you call a function.
      2:
        image: notes/unplug7_2.png
        text: In this lesson, we define the chorus at the beginning of our song and
          then we sing through our song and go back and we notice that the class doesn't
          sing the word chorus, they automatically go up to the top where we define
          the chorus and sing through that. We use that as a great introduction to
          how to understand what a program is doing when it defines and calls a function.
      3:
        image: notes/unplug7_3.png
        text: We use familiar songs including Old Macdonald to talk about how a chorus
          is called over and over and how sometimes a chorus can change. When you
          have a song like Old Macdonald, where certain words change, that's a great
          place to introduce the idea of parameters. Passing certain words through
          so that you can send extra information to your function. Once we're sure
          everybody gets it, you can take your own familiar songs and break them up
          yourself. See if you can figure it out together.
    unplug8:
      1:
        image: notes/unplug8_1.png
        text: Our lesson on abstraction uses the familiar concept of madlibs, where
          you basically insert a blank in a story that can be filled with lots of
          different words. We take that idea, challenge kids to come up with their
          own words for their own stories, and really explain the concept of abstraction.
      2:
        image: notes/unplug8_2.png
        text: It's all about functions and how you can have a function, like in Old
          Macdonald, where you have a structure for your chorus but you have something
          little that changes and you abstract out that little thing that changes
          and you can fill it in with your own word every time through. But sometimes
          you have three words that change and so you fill those in with three parameters,
          that's still pretty helpful.
      3:
        image: notes/unplug8_3.png
        text: You can have one function that handles lots of different problems. Lots
          of times people will write separate functions for all those problems, not
          realizing there's only one little difference. If they could just find a
          way to handle that one little difference, they could just reuse one function
          over and over again, instead of having 14 different functions.
    unplug9:
      1:
        image: notes/unplug9_1.png
        text: Relay programming is an extremely fun lesson that gets across way more
          than computer science. Sometimes everybody is getting a little bit antsy
          and you want to get them up on their feet. This is a great way to add some
          excitement to computer science.
      2:
        image: notes/unplug9_2.png
        text: You break everyone up into two groups where they stand in a line and
          run relay style. The first person in each group runs to the other side of
          the room where you have a graph paper drawing and a blank piece of paper
          waiting for them. They write down the first step to creating that image,
          run back to their line, tag the next player who goes back up to write the
          next step.
      3:
        image: notes/unplug9_3.png
        text: This is a great way to get across the idea of debugging, needing to
          proofread your own work, and needing to check the work of the people done
          before you. You'll quickly understand how important it is that you be careful
          in your coding when a whole team is depending on you.
    unplug10:
      1:
        image: notes/unplug10_1.png
        text: This activity explains in an easy-to-understand way how the internet
          works. We explain all the terminology you'll need in simple terms so that
          students can simulate transmitting messages, like an email.
      2:
        image: notes/unplug10_2.png
        text: Students will transmit messages while pretending to be one of three
          transmission methods. Wireless internet, DSL or fiber optic. The students
          who represent wi-fi will have to wear the message they're transmitting on
          their head because wifi is the most likely to drop some information.
      3:
        image: notes/unplug10_3.png
        text: The students pretending to be DSL or cable will carry the message on
          the back of their hand, where they're slightly less likely to drop information.
          And the students representing fiber optic will get to carry them with both
          hands. This activity is a great way to understand something that many of
          us use every day.
    unplug11:
      1:
        image: notes/unplug11_1.png
        text: So now it's time to step back and take a birds eye view of everything
          you've done in these past nineteen lessons. This is a great time to call
          out to students that what they've just done is a huge achievement. They've
          learned more over these lessons than most adults know about computer science.
      2:
        image: notes/unplug11_2.png
        text: Discuss as a class or in small groups about their favorite lessons.
          Once you take a look back at everything you've learned, this is where your
          students' creativity can shine. Split them into groups and have them create
          an unplugged lesson of their own. Assign each group a key concept, like
          functions or algorithms and have lots of craft materials on hand for them
          to use. Have each group present their new unplugged activity or even set
          aside another day to do a few of the student created activities.
      3:
        image: notes/unplug11_3.png
        text: From everyone here at Code.org, we hope you've had a TON of fun during
          this course. And whether your dream is to create the best new app, use programming
          to help cure diseases, or you just want to be a stellar problem-solver,
          this course was the first step in achieving those dreams.
    starwars_intro:
      1:
        image: notes/starwars_intro_1.JPG
        text: Hi, I'm Kathleen Kennedy and I'm the producer of Star Wars, The Force
          Awakens. Today you'll be working with one of our stars, BB-8. BB-8 is a
          spherical droid. Everything he does and every movement that he makes is
          controlled by computer software. Computer science impacts every industry,
          from marketing to health care to film. In fact, hundreds of computer engineers
          worked together to make a film like The Force Awakens.
      2:
        image: notes/starwars_intro_2.JPG
        text: Hi I'm Rachel Rose, I'm a senior R&D engineer at ILM and I lead the
          animation and creature development team. In The Force Awakens, I'm responsible
          for helping the artists develop rigs which are the parts of the character
          that move that allow the character to look very believable in a galaxy far
          far away.
      3:
        image: notes/starwars_intro_3.JPG
        text: In the next hour, we're going to build our own Star Wars game. We'll
          teach you the basic concepts of programming. Usually programming is all
          text but we're going to use blocks here so that we can drag and drop to
          write the programs. Under the hood, you're still creating code. After you
          try the basics with blocks, we'll switch you to JavaScript, one of the most
          popular programming languages on the web.
      4:
        image: notes/starwars_intro_4.JPG
        text: To start off, we're going to work with Rey to program BB-8 to walk to
          collect all of the scrap parts. Your screen is split into three parts. On
          the left is the Star Wars game space, where code will run. The instructions
          for each level are written below the game space.
      5:
        image: notes/starwars_intro_5.JPG
        text: This middle area is the toolbox and each of these blocks is a command
          that BB-8 can understand.
      6:
        image: notes/starwars_intro_6.JPG
        text: The white space on the right is called the workspace and this is where
          we are going to build our program.
      7:
        image: notes/starwars_intro_7.JPG
        text: If I drag the moveLeft(); block to our workspace and press run, what
          happens? BB-8 moves left one block on the grid.
      8:
        image: notes/starwars_intro_8.JPG
        text: And what if I want BB-8 to do something after the moveLeft(); block?
          I can add another block to our program. I'm going to choose the moveUp();
          block and I'll drag it under my moveLeft(); block until the highlight appears.
          Then I'll drop it and the two blocks will snap together.
      9:
        image: notes/starwars_intro_9.JPG
        text: When I press run again, BB-8 will perform the commands that are stacked
          from top to bottom on our workspace. If you ever want to delete a block,
          just remove it from the stack and drag it back into the tool box.
      10:
        image: notes/starwars_intro_10.JPG
        text: After you've hit run, you can always hit the reset button to get BB-8
          back to the start. Now let's get rolling!
    starwars_typing:
      1:
        image: notes/starwars_typing_1.JPG
        text: Inside the blocks we've been using are JavaScript commands. JavaScript
          is the most popular programming language for professional developers today.
          Blocks are a great way to get started learning to code and in fact, top
          universities like Harvard and Berkeley start teaching this way. But once
          we learn the basics, engineers write code by typing because it allows us
          to go faster.
      2:
        image: notes/starwars_typing_2.JPG
        text: We can type hundreds of commands without having to find them in the
          toolbox or drag them out. Because you're learning typing may be slower at
          first but we wanted you to give it a try.
      3:
        image: notes/starwars_typing_3.JPG
        text: In the upper right corner on your workspace, you can click the show
          text button on any puzzle to switch from blocks to typing code as text.
      4:
        image: notes/starwars_typing_4.JPG
        text: In the next lesson, we'll start you out in typing mode. Here you can
          still drag the block from the toolbox or you can type the command name.
          As you start to type, you'll see names of possible commands show below where
          you're typing. Instead of typing the whole command name, you can select
          one of these to move faster. In my job, I use this auto-complete feature
          all the time when writing code.
      5:
        image: notes/starwars_typing_5.JPG
        text: When you're typing code, the computer needs you to be very precise.
          You need to spell and capitalize the command name exactly correctly, including
          the parentheses and the semi-colon. Even with a small typing mistake, BB-8
          cannot understand the code and won't be able to move.
      6:
        image: notes/starwars_typing_6.JPG
        text: When you make an error on the line, the editor highlights it for you
          so that you can try changing your text to fix it.
      7:
        image: notes/starwars_typing_7.JPG
        text: If you get stuck, you can always start over with the start over button
          and you can switch back to block mode at any time by clicking in the top-right
          corner. Ok, let's give typing a try! And if you make mistakes, don't get
          frustrated. It takes everybody a few tries to get it right.
    starwars_events:
      1:
        image: notes/starwars_events_1.JPG
        text: Hello, my name is Charita Carter. I'm a senior creative producer here
          at Walt Disney Imagineering. I'm responsible for leading teams that actually
          produce the attractions that our guests get to experience. We are always
          looking for ways that we can improve and make a better experience for our
          guests and technology is at the heart of that.
      2:
        image: notes/starwars_events_2.JPG
        text: Congratulations, you did it! You programmed BB-8. Now I think we're
          ready for something harder. Let's go for it. Now that you've learned the
          basics of programming, we're going to back in time to build your own game,
          starring R2-D2 and C3PO.
      3:
        image: notes/starwars_events_3.JPG
        text: 'To make a game, we need to learn about something that game programmers
          use every day: they''re called events. Events tell your program to listen
          or wait for when something happens and then when it does, it performs an
          action.'
      4:
        image: notes/starwars_events_4.JPG
        text: Some examples of events are listening for a mouse click, an arrow button
          or a tap on the screen.
      5:
        image: notes/starwars_events_5.JPG
        text: Here we're going to make R2-D2 move up to deliver a message to a rebel
          pilot and then move down to the other rebel pilot. We'll use events to make
          him move. When the player uses the up/down arrow keys, or the up/down buttons.
      6:
        image: notes/starwars_events_6.JPG
        text: We use the whenUp() event block and attach the goUp() block to it. When
          the player presses the up arrow key, the code attached to the whenUp() block
          is run. And we'll do the same thing to make R2-D2 move down.
      7:
        image: notes/starwars_events_7.JPG
        text: To do this, we'll use a command called whenUp(). When you drag the command
          out of the toolbox, you'll see that it starts and ends with a curly bracket
          instead of a semi-colon. This gives us space to put other commands in the
          middle. Every command that we place inside these brackets will run when
          the player presses the up arrow.
      8:
        image: notes/starwars_events_8.JPG
        text: We want R2-D2 to go up so let's put a goUp(); block inside the command.
          And we'll do the same thing to make R2-D2 go down.
      9:
        image: notes/starwars_events_9.JPG
        text: Now instead of writing all the code to control our droid in advance,
          we can let R2-D2 react to button press events that move him around the screen.
          Step by step, your game is getting more interactive.
    starwars_congrats:
      1:
        image: notes/starwars_congrats_1.JPG
        text: Hi, my name is Alice and I run the project and engineering teams here
          at Code.org and I worked on this tutorial that you're playing through right
          now.
      2:
        image: notes/starwars_congrats_2.JPG
        text: You just made it to the last level. Congratulations! You just learned
          everything you need to know to make your own Star Wars game. Now there are
          no more instructions, no puzzles to solve. You can make your own game and
          you choose how it works. One more thing, you've unlocked new sounds and
          new commands to do even more.
      3:
        image: notes/starwars_congrats_3.JPG
        text: "[students speaking] So we made a game basically where you get points
          when you get puffer pigs. The twist is everytime you get a puffer pig a
          storm trooper appears. Actually the whole screen is full of puffer pigs
          and then when you touch 10,000 of them, you win."
      4:
        image: notes/starwars_congrats_4.JPG
        text: "[students speaking] We made a game where you can't lose and everything
          you kill gives you points. For my program, I reversed the keys so that whenever
          you click up, your character goes down and when you go right, your character
          goes left. It's really hard! Sometimes you just get an advantage, an unfair
          advantage if you're the developer of the game. Did I get it? Yay!"
      5:
        image: notes/starwars_congrats_5.JPG
        text: When you're done making your game, choose share to get a link you can
          share with friends or play your game on your phone. Have fun!
    starwars_blocks_intro:
      1:
        image: notes/starwars_blocks_intro_1.JPG
        text: 'Hi I''m Kathleen Kennedy and I''m the producer of Star Wars: The Force
          Awakens. Today you''ll be working with one of our stars, BB-8. BB-8 is a
          spherical droid. Everything he does and every movement that he makes is
          controlled by computer software. Computer science impacts every industry,
          from marketing to health care to film. In fact, hundreds of computer engineers
          worked together to make a film like The Force Awakens.'
      2:
        image: notes/starwars_blocks_intro_2.JPG
        text: Hi, I'm Rachel Rose. I'm a senior R&D engineer at ILM and I lead the
          animation and creature development team. In The Force Awakens, I'm responsible
          for helping the artist develop rigs, which are the parts of the character
          that move that allow the character to look very believable in a galaxy far,
          far away.
      3:
        image: notes/starwars_blocks_intro_3.JPG
        text: In the next hour, we're going to build our own Star Wars game that will
          teach you the basic concepts of programming. Usually programming is all
          text but we're going to use blocks here so we can drag and drop to write
          the programs. To start off, we're going to work with Rey to program BB-8
          to walk to collect all of the scrap parts.
      4:
        image: notes/starwars_blocks_intro_4.JPG
        text: Your screen is split into three parts. On the left is the Star Wars
          game space where code will run. The instructions for each level are written
          below the game space.
      5:
        image: notes/starwars_blocks_intro_5.JPG
        text: This middle area is the toolbox and each of these blocks is a command
          that BB-8 can understand.
      6:
        image: notes/starwars_blocks_intro_6.JPG
        text: The white space on the right is called the work space and this is where
          we're going to build our program.
      7:
        image: notes/starwars_blocks_intro_7.JPG
        text: If I drag the moveLeft(); block to our workspace, what happens? BB-8
          moves left one block on the grid.
      8:
        image: notes/starwars_blocks_intro_8.JPG
        text: And what if I want BB-8 to do something after the moveLeft(); block?
          I can add another block to our program. I'm going to choose the moveUp();
          block and I'll drag it under my moveLeft(); block until the highlight appears.
          Then I'll drop it and the two blocks will snap together. When I press run
          again, BB-8 will perform the commands that are stacked top to bottom on
          our workspace.
      9:
        image: notes/starwars_blocks_intro_9.JPG
        text: If you ever want to delete a block, just remove it from the stack and
          drag it back into the toolbox.
      10:
        image: notes/starwars_blocks_intro_10.JPG
        text: After you hit run, you can always hit the reset button to get BB-8 back
          to the start. Now let's get rolling!
    starwars_blocks_events:
      1:
        image: notes/starwars_blocks_events_1.JPG
        text: Hello, my name is Charita Carter. I'm a senior creative producer here
          at Walt Disney Imagineering. I'm responsible for leading teams that actually
          produce the attractions that our guests get to experience. We are always
          looking for ways that we can improve and make a better experience for our
          guests and technology is at the heart of that.
      2:
        image: notes/starwars_blocks_events_2.JPG
        text: Congratulations, you did it! You programmed BB-8. Now I think we're
          ready for something harder. Let's go for it. Now that you've learned the
          basics of programming, we're going to back in time to build your own game,
          starring R2-D2 and C3PO.
      3:
        image: notes/starwars_blocks_events_3.JPG
        text: 'To make a game, we need to learn about something that game programmers
          use every day: they''re called events. Events tell your program to listen
          or wait for when something happens and then when it does, it performs an
          action.'
      4:
        image: notes/starwars_blocks_events_4.JPG
        text: Some examples of events are listening for a mouse click, an arrow button
          or a tap on the screen.
      5:
        image: notes/starwars_blocks_events_5.JPG
        text: Here we're going to make R2-D2 move up to deliver a message to a rebel
          pilot and then move down to the other rebel pilot. We'll use events to make
          him move. When the player uses the up/down arrow keys, or the up/down buttons.
      6:
        image: notes/starwars_blocks_events_6.JPG
        text: We use the whenUp() event block and attach the goUp() block to it. When
          the player presses the up arrow key, the code attached to the whenUp() block
          is run. And we'll do the same thing to make R2-D2 move down. Now instead
          of writing all the code to control our droid in advance, we can let R2-D2
          react to button press events that move him around the screen.
      7:
        image: notes/starwars_blocks_events_7.JPG
        text: Step by step, your game is getting more interactive.
    starwars_blocks_congrats:
      1:
        image: notes/starwars_blocks_congrats_1.JPG
        text: Hi, my name is Alice and I run the project and engineering teams here
          at Code.org and I worked on this tutorial that you're playing through right
          now.
      2:
        image: notes/starwars_blocks_congrats_2.JPG
        text: You just made it to the last level. Congratulations! You just learned
          everything you need to know to make your own Star Wars game. Now there are
          no more instructions, no puzzles to solve. You can make your own game and
          you choose how it works. One more thing, you've unlocked new sounds and
          new commands to do even more.
      3:
        image: notes/starwars_blocks_congrats_3.JPG
        text: "[students speaking] So we made a game basically where you get points
          when you get puffer pigs. The twist is everytime you get a puffer pig a
          storm trooper appears. Actually the whole screen is full of puffer pigs
          and then when you touch 10,000 of them, you win."
      4:
        image: notes/starwars_blocks_congrats_4.JPG
        text: "[students speaking] We made a game where you can't lose and everything
          you kill gives you points. For my program, I reversed the keys so that whenever
          you click up, your character goes down and when you go right, your character
          goes left. It's really hard! Sometimes you just get an advantage, an unfair
          advantage if you're the developer of the game. Did I get it? Yay!"
      5:
        image: notes/starwars_blocks_congrats_5.JPG
        text: When you're done making your game, choose share to get a link you can
          share with friends or play your game on your phone. Have fun!
    mc_intro:
      1:
        image: notes/mc_intro_1.JPG
        text: My name is Jens Bergensten but I'm better known as Jeb. I'm the lead
          developer on Minecraft, here at Mojang in Stockholm. I think I was eleven
          or maybe twelve and I started programming because I wanted to make games.
          One of my father's friends told me that in order to make games, you need
          to learn how to program. That's how I got started. I like designing and
          figuring out the architecture of games. That's what I really like about
          Minecraft.
      2:
        image: notes/mc_intro_2.JPG
        text: Over the next hour, you're going to learn the basics of computer science
          by programming Alex or Steve to move through a simulated piece of a Minecraft
          world.
      3:
        image: notes/mc_intro_3.JPG
        text: Traditional programming is usually in text but today we'll use Blockly,
          a system which uses visual blocks that you can drag and drop to write programs.
          Under the hood, you're creating Javascript code.
      4:
        image: notes/mc_intro_4.JPG
        text: The concepts you'll be learning are what computer programmers use every
          day and are the foundation to computer science. Here at Mojang, we use these
          same concepts to make Minecraft work.
      5:
        image: notes/mc_intro_5.JPG
        text: Before you start, you'll pick your character. I'm going to choose Alex.
          Let's build code for a program that will help her move around the screen.
      6:
        image: notes/mc_intro_6.JPG
        text: Your screen is split into three main parts. On the left is the Minecraft
          playspace where your program will run. The instructions for each level are
          written below.
      7:
        image: notes/mc_intro_7.JPG
        text: This middle area is the toolbox and each of these blocks is a command
          that directs Alex's actions.
      8:
        image: notes/mc_intro_8.JPG
        text: The white space on the right is called the work space and this is where
          we'll build our program.
      9:
        image: notes/mc_intro_9.JPG
        text: If we drag the moveForward(); block to our workspace and then click
          run, what happens? Alex moves forward one space on the grid.
      10:
        image: notes/mc_intro_10.JPG
        text: And what if we want to do something after she has moved forward one
          space? We can add another block to our program. I'm going to choose the
          turnRight(); block and I'll drag it underneath my moveForward(); block until
          this orange line appears. Then I'll drop it and the two blocks will snap
          together. When we press run again, Alex will perform the commands that are
          stacked from top to bottom in our workspace.
      11:
        image: notes/mc_intro_11.JPG
        text: If you ever want to delete a block, just drag it from the stack back
          to the toolbox.
      12:
        image: notes/mc_intro_12.JPG
        text: 'To undo your changes and get back to how the level started, use the
          Start Over button in the top right corner of the workspace. One more thing:
          you see the little triangle on the turn blocks? Anytime you see these triangles,
          it means that you can pick a different option. Let''s start coding!'
    mc_repeat:
      1:
        image: notes/mc_repeat_1.JPG
        text: I'm Lydia Winters, Mojang's brand director and we made a little game
          called Minecraft.
      2:
        image: notes/mc_repeat_2.JPG
        text: My favorite thing to do in Minecraft is explore. I love adventuring
          in caves and seeing what I can find. As someone who isn't a programmer,
          I'm really excited to go through the Minecraft lesson and actually learn
          some coding myself.
      3:
        image: notes/mc_repeat_3.JPG
        text: The last level needed lots of moveForward(); blocks. It would be easier
          if we could just tell the computer to perform the moveForward(); command
          four or five times. Luckily for us, computers are really good at repeating
          commands with repeat loops.
      4:
        image: notes/mc_repeat_4.JPG
        text: When building Minecraft, we use repeat loops to place all the initial
          materials for creating a new world. That's thousands and thousands of blocks.
          We also use loops in little ways, for example to make Alex's feet move back
          and forth as she walks. Repeat loops are a powerful part of programming.
      5:
        image: notes/mc_repeat_5.JPG
        text: Night is coming so in the next couple of levels, we're going to build
          a house to stay safe. We're going to use the repeat block to do this very
          easily.
      6:
        image: notes/mc_repeat_6.JPG
        text: To build a wall of our house, we can either tell Alex to moveForward();
          and place planks four times or we can tell her to moveForward(); and place
          one plank, then take this command and use the repeat block to have her perform
          the action multiple times. Now we'll click on the repeat block and tell
          her how many times we want her to perform this action. Now let's build our
          house before night falls! Have fun.
    mc_if_statements:
      1:
        image: notes/mc_if_statements_1.JPG
        text: Now we're going to learn about if statements. If statements are a fundamental
          part of learning to program. They help a computer make decisions.
      2:
        image: notes/mc_if_statements_2.JPG
        text: All computers use if statements, including my phone. For example, when
          I unlock my phone, it runs some code that says if I enter the password correctly,
          then unlock the phone. Otherwise, it shows an error message.
      3:
        image: notes/mc_if_statements_3.JPG
        text: You can use if statements in your code to make Steve and Alice react
          to what they see in the world. For example, if there is a rock in front
          of them, they can turn left. Or turn right if they run into a tree.
      4:
        image: notes/mc_if_statements_4.JPG
        text: In this case, we don't want to fall in the lava. It's easy to plan for
          the lava. We can see it on the screen. But what about the lava that we can't
          under the stone?
      5:
        image: notes/mc_if_statements_5.JPG
        text: After we mine the stone, we'll need to check if there's any lava in
          that place before moving forward. If there is lava there, we want to place
          a stone in front of our character before we can move forward. That way we
          can safely move on. Time for more mining! And remember to use the if statement
          to watch your step.
    mc_congrats_share:
      1:
        image: notes/mc_congrats_share_1.JPG
        text: Congratulations! You just learned the basic building blocks of computer
          science.
      2:
        image: notes/mc_congrats_share_2.JPG
        text: Now you can use these blocks to build your own creation. There are no
          more instructions and no puzzles to solve. You can build anything you want.
          You get to choose.
      3:
        image: notes/mc_congrats_share_3.JPG
        text: "[students talking] It's about to get real. Shear. I made an L out of
          torches. I made an A out of birch planks. It worked, it worked. We built
          a house out of wool!"
      4:
        image: notes/mc_congrats_share_4.JPG
        text: When you're done making your creation, choose share to get a link to
          share with your friends. Have fun!
    mc_congrats_no_share:
      1:
        image: notes/mc_congrats_no_share_1.JPG
        text: Congratulations! You just learned the basic building blocks of computer
          science.
      2:
        image: notes/mc_congrats_no_share_2.JPG
        text: Now you can use these blocks to build your own creation. There are no
          more instructions and no puzzles to solve. You can build anything you want.
          You get to choose.
      3:
        image: notes/mc_congrats_no_share_3.JPG
        text: "[students talking] It's about to get real. Shear. I made an L out of
          torches. I made an A out of birch planks. It worked, it worked. We built
          a house out of wool!"
      4:
        image: notes/mc_congrats_no_share_4.JPG
        text: Now you can build whatever you want. Have fun!
    gumball_intro:
      1:
        image: notes/gumball_intro_1.JPG
        text: If you'd like to make your own game, it's really easy. All you need
          are just a few basics of programming and you can start playing a game that
          you created.
      2:
        image: notes/gumball_intro_2.JPG
        text: Do you have a favorite video game? We're going to take one step toward
          creating games just like that in PlayLab. Good games have a story and every
          story has actors. Actors that do things like speak, move and interact with
          each other. Maybe even score points based on the rules of the game. Today,
          we'll be learning how to do all these things one by one with fun actors
          and then build a game from scratch that can be shared and played on a phone.
      3:
        image: notes/gumball_intro_3.JPG
        text: Today, we'll be learning how to do all these things one by one with
          fun actors and then build a game from scratch that can be shared and played
          on a phone.
      4:
        image: notes/gumball_intro_4.JPG
        text: Your screen is split into three main parts. On the left is the gamespace
          where your program will run. The instructions for each level are written
          below.
      5:
        image: notes/gumball_intro_5.JPG
        text: This middle area is the tool box and each of these blocks is a piece
          of code.
      6:
        image: notes/gumball_intro_6.JPG
        text: The white space on the right is called the work space and this is where
          we'll build our program.
      7:
        image: notes/gumball_intro_7.JPG
        text: To start off, you'll need to link your blocks to the orange when run
          block. You can link multiple blocks together by dragging them out until
          you see the yellow line and then they'll snap together.
      8:
        image: notes/gumball_intro_8.JPG
        text: In this first puzzle, we'll make the actors say something by linking
          the "say" block to the when run block and typing in your message. Once you
          have your blocks in place, hit the run button to see what you programmed.
      9:
        image: notes/gumball_intro_9.JPG
        text: Get started and by the end you'll be able to create your own game with
          all kinds of players that can interact, score points, throw things, and
          vanish each other. It's all up to you!
    gumball_events:
      1:
        image: notes/gumball_events_1.JPG
        text: Now we're going to learn about something all game programmers use everyday.
          They're called events. An event tells your program to listen for when something
          happens and then when it does, the game performs an action.
      2:
        image: notes/gumball_events_2.JPG
        text: Some examples of events are listening for a mouse click or an up or
          down arrow key or even a tap on the screen.
      3:
        image: notes/gumball_events_3.JPG
        text: Here, we're going to make the actor say something when the player clicks
          on it. We will use the when clicked block and attach the "say" block to
          it. When the player clicks, all the blocks attached to this block will be
          performed.
      4:
        image: notes/gumball_events_4.JPG
        text: There are also when arrow blocks. If you link move blocks to those,
          you can start to move your actors up, down, left, right, with the arrow
          keys. Little by little your game is getting more interactive.
    gumball_repeat:
      1:
        image: notes/gumball_repeat_1.JPG
        text: Can you imagine if you had to repeat something forever and ever? Hopefully
          you never have to because computers are really good at repeating things.
      2:
        image: notes/gumball_repeat_2.JPG
        text: This is the repeat forever block. Anything inside this block will happen
          forever in the game. If we want an actor to do something repeatedly without
          the player having to do anything, we'll put those blocks inside the repeat
          forever block.
      3:
        image: notes/gumball_repeat_3.JPG
        text: In this next puzzle, our goal is to help the actor do a job continuously.
          Learning how the repeat commands work will save you a ton of time later
          when you build your own game.
    iceage_intro:
      1:
        image: notes/iceage_intro_1.JPG
        text: If you'd like to make your own game, it's really easy. All you need
          are just a few basics of programming and you can start playing a game that
          you created.
      2:
        image: notes/iceage_intro_2.JPG
        text: Do you have a favorite video game? We're going to take one step toward
          creating games just like that in PlayLab. Good games have a story and every
          story has actors. Actors that do things like speak, move and interact with
          each other. Maybe even score points based on the rules of the game. Today,
          we'll be learning how to do all these things one by one with fun actors
          and then build a game from scratch that can be shared and played on a phone.
      3:
        image: notes/iceage_intro_3.JPG
        text: Today, we'll be learning how to do all these things one by one with
          fun actors and then build a game from scratch that can be shared and played
          on a phone.
      4:
        image: notes/iceage_intro_4.JPG
        text: Your screen is split into three main parts. On the left is the gamespace
          where your program will run. The instructions for each level are written
          below.
      5:
        image: notes/iceage_intro_5.JPG
        text: This middle area is the tool box and each of these blocks is a piece
          of code.
      6:
        image: notes/iceage_intro_6.JPG
        text: The white space on the right is called the work space and this is where
          we'll build our program.
      7:
        image: notes/iceage_intro_7.JPG
        text: To start off, you'll need to link your blocks to the orange when run
          block. You can link multiple blocks together by dragging them out until
          you see the yellow line and then they'll snap together.
      8:
        image: notes/iceage_intro_8.JPG
        text: In this first puzzle, we'll make the actors say something by linking
          the "say" block to the when run block and typing in your message. Once you
          have your blocks in place, hit the run button to see what you programmed.
      9:
        image: notes/iceage_intro_9.JPG
        text: Get started and by the end you'll be able to create your own game with
          all kinds of players that can interact, score points, throw things, and
          vanish each other. It's all up to you!
    iceage_events:
      1:
        image: notes/iceage_events_1.JPG
        text: Now we're going to learn about something all game programmers use everyday.
          They're called events. An event tells your program to listen for when something
          happens and then when it does, the game performs an action.
      2:
        image: notes/iceage_events_2.JPG
        text: Some examples of events are listening for a mouse click or an up or
          down arrow key or even a tap on the screen.
      3:
        image: notes/iceage_events_3.JPG
        text: Here, we're going to make the actor say something when the player clicks
          on it. We will use the when clicked block and attach the "say" block to
          it. When the player clicks, all the blocks attached to this block will be
          performed.
      4:
        image: notes/iceage_events_4.JPG
        text: There are also when arrow blocks. If you link move blocks to those,
          you can start to move your actors up, down, left, right, with the arrow
          keys. Little by little your game is getting more interactive.
    iceage_repeat:
      1:
        image: notes/iceage_repeat_1.JPG
        text: Can you imagine if you had to repeat something forever and ever? Hopefully
          you never have to because computers are really good at repeating things.
      2:
        image: notes/iceage_repeat_2.JPG
        text: This is the repeat forever block. Anything inside this block will happen
          forever in the game. If we want an actor to do something repeatedly without
          the player having to do anything, we'll put those blocks inside the repeat
          forever block.
      3:
        image: notes/iceage_repeat_3.JPG
        text: In this next puzzle, our goal is to help the actor do a job continuously.
          Learning how the repeat commands work will save you a ton of time later
          when you build your own game.
