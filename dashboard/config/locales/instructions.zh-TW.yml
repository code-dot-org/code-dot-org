"zh-TW":
  data:
    instructions:
      2-3 Artist 1 new_instruction: 嗨，我是一個藝術家。您可以寫程式來讓我畫出任何東西。現在請您用一些程式積木，讓我沿著圖中的灰色線條畫畫。（每一條線的長度都是
        100 像素）
      2-3 Artist 11_instruction: |
        我們來做一個停止的交通標誌吧！畫出一個正八邊形，每邊長 100 像素。\r
        \r
      2-3 Artist 12_instruction: |-
        建立一個圓形來完成這個眼球！\r
        \r
        如果小藝術家在每次的循環轉向 1 度，要重複這個程式多少次才能畫出一個圓形呢？180？360？500？
      2-3 Artist 2 new_instruction: '這房子有個半完成的牆。每一邊都應該是 100，但是半完成的牆是只有 50。請試著完成這個牆吧。 '
      2-3 Artist 2_instruction: "This house has a half-finished wall. Each side is\n100,
        but the half-finished wall is only 50. Complete the wall. "
      2-3 Artist 3.4_instruction: |-
        跳躍積木只會移動小藝術家而不會繪圖。
        同時使用`跳躍-向前`和`移動-向前`積木來畫出這個虛線。
        每個線條長度為 50 像素。
      2-3 Artist 3_instruction: 這個帽子有 100 像素高。畫出一個高度少於 70 像素的帽子。
      2-3 Artist 3new_instruction: |-
        紅色帽子的高是 100 像素，畫完比它矮 70 像素的黑色帽子。\r
        （注意：每個帽子的寬度都是 50 像素。）
      2-3 Artist 4_instruction: 幫助我完成這隻貓的房子。
      2-3 Artist 5_instruction: 用「重複」積木來取代這個程式，讓它可以只用 3 個積木就畫出相同的房子。
      2-3 Artist 6_instruction: 這個房子需要一個屋頂！畫出這個三角形。提示：三個邊的長度都相同。
      2-3 Artist 7_instruction: '畫完學校上頭的最後一組窗戶，這樣每個學生就可以看到窗外景色了。正方形窗戶的外框邊長是 25 像素。 '
      2-3 Artist 8_instruction: 替每一隻動物完成房間。把這個長方形切成 2 個大小相同的正方形。這個長方形的寬為 200 像素、高為
        100 像素。完成這個關卡的方法不只一種，看看你可以想到幾種方法吧！
      2-3 Artist 9 NEW_instruction: 完成這個風箏
      2-3 Artist 9 REPLACEMENT_instruction: 畫完這些梯子！
      2-3 Artist 9_instruction: 完成這個風箏
      2-3 Artist Assessment 1_instruction: |-
        評量：把最後一顆牙齒畫完。
        這顆牙寬：25 像素；高：25像素
      2-3 Artist Debugging 1_instruction: 這個帽子的寬度應該只有 50 像素，你能修正它嗎？
      2-3 Artist Debugging 10_instruction: |-
        在我的遊戲控制器上的方向鍵太窄了。\r
        \r
        你能幫我製作寬度有 10 像素的方向鍵嗎？\r
        \r
        先試試這個程式，看看是哪兒出錯了。
      2-3 Artist Debugging 11_instruction: |-
        我的雪花有個缺口！\r
        \r
        你可以找到是哪兒出了錯嗎？
      2-3 Artist Debugging 12_instruction: 我打算要添加一個海浪到場景上，你能幫我嗎？
      2-3 Artist Debugging 2_instruction: |-
        畫出貓鬍鬚的程式不正確。
        \r
        \r
        修正這個程式來給貓畫上一樣長的鬍鬚。
      2-3 Artist Debugging 3_instruction: |-
        我的船破了個洞！\r
        \r
        你需要修正什麼地方才能把線接起來？
      2-3 Artist Debugging 4_instruction: |-
        我們一直要畫的圖象是什麼？
        利用適當的角度和線段來完成連接全部的點
      2-3 Artist Debugging 5_instruction: |-
        畫出腿和腳的程式有錯。\r
        \r
        你能修正它嗎？
      2-3 Artist Debugging 6_instruction: |-
        看來我好像坐在缺了個腳的椅子上！\r
        \r
        編輯程式來畫個椅腳。
      2-3 Artist Debugging 7_instruction: |-
        看起來Ｃ被畫反了\r
        \r
        你可以將它改正嗎？
      2-3 Artist Debugging 8_instruction: |-
        我的老師告訴我們做事要有始有終！\r
        \r
        幫我完成我的風車，你可以找到錯誤的地方嗎？
      2-3 Artist Debugging 9_instruction: |-
        有個部分斷開了！\r
        \r
        畫出莖的程式碼不大正確。想一想，要如何才讓小藝術家畫出正確的莖？
      2-3 Artist Debugging Assessment 1_instruction: |-
        評量：為什麼這個正方形用了 75 像素的邊長還是太小？\r
        \r
        程式的哪個地方出錯了？
      2-3 Artist Free Play_instruction: 自由遊戲！畫出你想要畫的任何東西。
      2-3 Artist Functions 1 a_instruction: |-
        「偶…殭屍…畫家，偶愛畫畫！」\r
        \r
        幫殭屍畫副方形眼鏡。 \r
        \r
        提示： 正方形的寬度是 100 像素，而鏡圈之間的鼻托比它短 25 像素。
      2-3 Artist Functions 1_instruction: |-
        「偶…殭屍…畫家，偶愛畫畫！」\r
        \r
        幫殭屍畫副方形眼鏡。 \r
        \r
        提示： 正方形的寬度是 100 像素，而鏡圈之間的鼻托比它短 25 像素。
      2-3 Artist Functions 10_instruction: 自由發揮：這裏有 2 個函式：一個是 big gear（大齒輪），另一個是 small
        gear（小齒輪）。用它們來畫出一台機器的內部。
      2-3 Artist Functions 11 a_instruction: |-
        We've renamed the `draw a square`
        function to `draw a hexagon`, but it's still giving us squares! Can you modify
        the `draw a hexagon` function to draw a hexagon with 50 pixel sides? \r
        \r
        Draw
        the image using the new function!
      2-3 Artist Functions 11.5 a_instruction: |-
        這裡是一個相同的 `draw a hexagon`（畫個六邊形）函式。\r
        \r
        如果你循環主要的程式 6 次，每次循環都轉 60 度，會發生什麼事呢？
      2-3 Artist Functions 11.5_instruction: |-
        這裡是一個相同的 `draw a hexagon`（畫個六邊形）函式。\r
        \r
        如果你循環主要的程式 6 次，每次循環都轉 60 度，會發生什麼事呢？
      2-3 Artist Functions 11_instruction: |-
        我們已經將 `draw a square`（畫個正方形）函式重新命名成 `draw a hexagon`（畫個六邊形），但是它還是只能畫出正方形！你可以修改 `draw a hexagon` 函式，讓它能畫出每邊長 50 像素的六邊形嗎？\r
        \r
        用新的函式把圖案畫出來吧！
      2-3 Artist Functions 12 Mike_instruction: |-
        函式（Functions）很適合用來重複繪製複雜圖案。\r
        \r
        你可以使用 `draw a flower`（畫個花朵）函式將播種盒上剩餘的圖案填滿嗎？\r
        植物之間的距離是 100 像素。
      2-3 Artist Functions 12 a_instruction: |-
        函式（Functions）很適合用來重複繪製複雜圖案。\r
        \r
        你可以使用 `draw a flower`（畫個花朵）函式將播種盒上剩餘的圖案填滿嗎？\r
        植物之間的距離是 100 像素。
      2-3 Artist Functions 12_instruction: |-
        函式（Functions）很適合用來重複繪製複雜圖案。\r
        \r
        你可以使用 `draw a flower`（畫個花朵）函式將播種盒上剩餘的圖案填滿嗎？\r
        植物之間的距離是 100 像素。
      2-3 Artist Functions 13_instruction: |-
        我們為你提供了 4 個函式。
        在一個甚至多個迴圈裡隨意的使用它們，以畫出一個圖案讓你分享給朋友。點擊運行來看看範例。
      2-3 Artist Functions 2 a_instruction: "Use the small green `draw a square`\nblock
        to call this new function and create the glasses. "
      2-3 Artist Functions 2_instruction: |-
        函式（Functions）能讓你能夠製作一個屬於自己的新積木！\r
        \r
        我們已經把繪製一個正方形所需要的所有積木放到一個名叫 `draw a square` 的函式裡。這一次，使用 `draw a square` 函式來製作個眼鏡。
        \r
        \r
        鏡片外框之間的距離為 75 像素。
      2-3 Artist Functions 3 a_instruction: |-
        Edit the "draw a square" function
        to draw glasses with frames that are 115px on each side. \r
        \r
        The squares
        are now 45 pixels apart.
      2-3 Artist Functions 3_instruction: |-
        編輯 draw a square（畫個正方形）函式，用 115 像素的邊長來畫出較大的鏡片。\r
        \r
        正方形之間的間隔距離為 45 像素。
      2-3 Artist Functions 4 a_instruction: |-
        Now, put the function inside of a loop
        and add an extra turn to draw these three squares.
      2-3 Artist Functions 4_instruction: 現在，把這個函式放進迴圈來畫出這 3 個正方形。
      2-3 Artist Functions 7_instruction: 使用"畫一個房子"函數，輸入兩個不同的參數來畫出兩棟房子。(提示：第一個房子的參數是100像素)
      2-3 Artist Functions 9_instruction: |-
        自由發揮：這裏有個 draw a snowflake（畫個雪花）函式。
        用它來實現一個冬季場景！這是一個自由發揮的關卡，所以沒有要解決的問題，玩得愉快！
      2-3 Artist Loops 1_instruction: |-
        你可以做出邊長100像素的六邊形嗎？
        記住，這代表著你只需要轉六十度。
      2-3 Artist Loops 10_instruction: 如果讓最後一步提早一半，什麼將會發生？
      2-3 Artist Loops 11_instruction: 現在我們來放置*另一個*迴圈來包住整個程式！不要忘了在外層迴圈的下面添加轉向角度。
      2-3 Artist Loops 2_instruction: 利用重複方塊來完成殼
      2-3 Artist Loops 4_instruction: 想想看，當我們用一個迴圈不斷重複畫出那個圖形，會發生什麼事？
      2-3 Artist Loops 5_instruction: 現在我們來小小調整迴圈並看看圖片的不同
      2-3 Artist Loops 6_instruction: 在迴圈之中加入一個步驟和一個轉身並看看有什麼變化
      2-3 Artist Loops 7_instruction: |-
        我們可以利用迴圈完成各式多邊形，
        你能在六邊形之中創造一菱形嗎？
      2-3 Artist Loops 8_instruction: 讓我們把兩個元素放到迴圈內。
      2-3 Artist Loops 9_instruction: |-
        我們要開始重覆執行同樣的元素了，
        但現在我們要在他門之間增加一點距離\r
        運用跟之前一樣的程式碼，但在外圍的迴圈前加一個步驟
      2-3 Artist Loops New 1_instruction: 讓我們來畫個機器人的頭吧！你能做出一個邊長為 100 像素的正方形嗎？
      2-3 Artist Loops New 10_instruction: 現在我們用迴圈來把一堆的 V 連接在一起。
      2-3 Artist Loops New 11_instruction: 重建上一關的程式，但這次在迴圈裡添加一個向左轉 30 度的指令。現在把重複 8
        次改成 24 次。
      2-3 Artist Loops New 12_instruction: '畫一個邊長為 100 畫素的鑽石圖形。

'
      2-3 Artist Loops New 13_instruction: |-
        我們會從一些程式（灰色）開始來建立一個菱形。\r
        \r
        循環這些灰色的程式來建立有趣的圖案！
      2-3 Artist Loops New 14_instruction: 玩玩這個畫菱形的程式，看看你可以畫出什麼圖案。試著修改轉向的角度，還有循環的次數。
      2-3 Artist Loops New 15_instruction: 現在，畫你喜歡的任何東西！
      2-3 Artist Loops New 2_instruction: |-
        這個關卡和前一關差不多，不過這次，我們只可以用 1 個`移動-向前`積木，還有 1 個`轉向`積木。\r
        \r
        你可以使用`重複`積木來解決這個問題嗎？
      2-3 Artist Loops New 9_instruction: 畫出一個簡單的 V（兩邊的長度都是 50 像素）以完成這個箭頭符號。
      2-3 Artist Match Hex Pic_instruction: 配對：幫忙完成六邊形。
      2-3 Artist Match Rho Pic_instruction: 配對：完成遺失的程式碼。
      2-3 Artist Match Sq Pic_instruction: 配對：完成缺少的程式碼
      2-3 Artist Match Tri pic_instruction: 配對：填入遺失的積木。
      2-3 Artist Nested Loops 1_instruction: 用一個`重複`積木包在整個程式外圍，以畫出這個圖形。
      2-3 Artist Nested Loops 10_instruction: 循環這個程式 12 次來完成這個圖案。
      2-3 Artist Nested Loops 11_instruction: 循環這個程式 4 次來完成這個圖案。每繞完一圈就轉向 90 度。
      2-3 Artist Nested Loops 12_instruction: 循環這個程式 12 次來完成這個漩渦。
      2-3 Artist Nested Loops 2_instruction: |-
        現在循環畫出這個三角形 6 次。
        \r
        \r
        每畫出一次，需要轉向 60 度後再畫下一個。
      2-3 Artist Nested Loops 3_instruction: |-
        你需要循環這個三角形 12 次才能畫出個圖案。\r
        \r
        用一圈 360 度除以圖形數量 12，就可以知道每個形狀畫完後要轉向的角度是多少了。
      2-3 Artist Nested Loops 4_instruction: |-
        循環這個菱形 12 次以畫出一朵花！\r
        \r
        注意：我們在循環菱形 12 次所用的角度，和之前循環三角形 12 次所使用的角度是一樣的。\r
        你知道在每次畫出圖樣後，要轉多少角度嗎？
      2-3 Artist Nested Loops 5_instruction: |-
        用巢狀迴圈來畫出這棟大樓的窗戶。\r
        \r
        這些窗戶邊長為 20 像素，間距為 20 像素。
      2-3 Artist Nested Loops 6_instruction: |-
        這隻恐龍的尾巴上有 8 根尖刺。\r
        每個尖刺有 30 像素長。將三角形循環 8 次，並確保在畫出每個三角形之後向前跳！
      2-3 Artist Nested Loops 7_instruction: |-
        循環這個三角形 10 次來畫出這個太陽。\r
        \r
        你會需要在每次畫三角形後移動然後轉向。
        \r
        \r
        想一想，每次轉向的角度是多少，角度 = 一圈的度數除以三角形的個數。
      2-3 Artist Nested Loops 8_instruction: |-
        現在我們來添加一些草到圖片上。
        \r
        \r
        每簇草的間隔距離為 50 像素。
      2-3 Artist Nested Loops 9_instruction: |-
        再加一朵花我們就完成這幅圖囉。\r
        \r
        循環這個菱形 12 次來畫出這朵花。
      2-3 Artist Nested Loops Free Play_instruction: 自由發揮，使用巢狀迴圈畫些有趣的東西。
      2-3 Bee Conditionals 1_instruction: 你好！我是一隻蜜蜂，請幫我採集這朵花上的花蜜。
      2-3 Bee Conditionals 10_instruction: 紫色的花可能有1或0的花蜜。小心不要去採集沒有花蜜的紫花
      2-3 Bee Conditionals 11_instruction: "我想知道那裡有些什麼！\\r\n\\r\n幫忙讓我在院子裡飛翔，並收集花朵中的花蜜。 "
      2-3 Bee Conditionals 12_instruction: 盡可能用最少的積木幫我找到全部的花蜜！
      2-3 Bee Conditionals 13_instruction: |-
        這裡也太多活要做了吧！\r
        \r
        使用你所學到的來收集所有花蜜及蜂蜜。
      2-3 Bee Conditionals 14_instruction: |-
        我們把所有東西都放在一起吧！\r
        \r
        利用你學過的技能來幫我收集花蜜，用的積木愈少愈好。不要忘了在最後幫它們釀成蜂蜜。
      2-3 Bee Conditionals 15_instruction: |-
        不陌生吧，這種樓梯模式的關卡。\r
        \r
        你可以只在有花蜜的花朵上採集嗎？用的積木愈少愈好。
      2-3 Bee Conditionals 2_instruction: |-
        我是一隻蜜蜂！\r
        使用最少的積木幫我採集到花朵中的所有花蜜。
      2-3 Bee Conditionals 3_instruction: "仔細收集花蜜！\\r\n\\r\n幫我收集花蜜及蜂蜜，用的積木愈少愈好。  "
      2-3 Bee Conditionals 4_instruction: 幫我收集所有花朵中的花蜜，並全部釀成蜂蜜。
      2-3 Bee Conditionals 5_instruction: |-
        小心不要採集到沒有任何花蜜的紫花。\r
        你必須用`如果花蜜`積木先檢查看看。
      2-3 Bee Conditionals 6_instruction: 用一個「如果」積木來檢查這朵花上面有沒有花蜜。
      2-3 Bee Conditionals 7_instruction: 在有花蜜的花朵中採集花蜜。
      2-3 Bee Conditionals 8_instruction: |-
        這塊地上有紅色和紫色的花朵。
        紅花上的花蜜數量很明確，但是紫花上的花蜜數量就不知道了。
        收集所有的花蜜吧。
      2-3 Bee Conditionals 9_instruction: 收集每一朵花的花蜜。
      2-3 Bee Conditionals Assessment 1_instruction: 評量：收集所有的花蜜。小心，不要採集沒有花蜜的紫花。
      2-3 Bee Debugging 1_instruction: 這些積木真是讓我一陣錯亂！修正錯誤（可能不只一個）來收集到所有的花蜜。
      2-3 Bee Debugging 10_instruction: |-
        這個關卡讓我腦袋轉個不停！\r
        修正錯誤（可能不只一個）來收集所有的花蜜及蜂蜜。
      2-3 Bee Debugging 2_instruction: |-
        你可以找到是哪兒出了問題嗎？\r
        改正
        錯誤（可能不只一個）並收集到全部花蜜。
      2-3 Bee Debugging 3_instruction: |-
        真是折騰人！\r
        \r
        修正錯誤（可能不只一個）並收集全部的花蜜。
      2-3 Bee Debugging 4_instruction: 這些積木真是讓我一陣錯亂！修正錯誤（可能不只一個）來收集到所有的花蜜及蜂蜜。
      2-3 Bee Debugging 5_instruction: |-
        那花看起來真美味！\r
        \r
        修正錯誤（可能不只一個）來收集到所有的花蜜。\r
        現在你可以同時使用運行和步進。
      2-3 Bee Debugging 6_instruction: |-
        真是甜蜜的挑戰啊！\r
        \r
        修正錯誤（可能不只一個）來收集到所有的花蜜。
      2-3 Bee Debugging 7_instruction: 修復錯誤（可能不只一個）以收集所有的花蜜與蜂蜜。
      2-3 Bee Debugging 8_instruction: |-
        那麼多美麗的花朵！\r
        \r
        修正錯誤（可能不只一個）以收集所有的花蜜。
      2-3 Bee Debugging 9_instruction: |-
        有點耐心！\r
        \r
        你需要修復程式裡的一些問題，才能夠收集所有的花蜜和蜂蜜。
      2-3 Bee Debugging Assessment 1_instruction: |-
        評量：是時候看看你學得如何了！\r
        \r
        改正錯誤（可能不只一個），收集全部的花蜜及蜂蜜。
      2-3 Bee Functions 1_instruction: 函式是一段程式碼，用來執行某個任務。請使用 get 2 nectar（採集 2 個花蜜）函式，從每一朵花中採集花蜜。
      2-3 Bee Functions 10_instruction: |-
        紫花的花蜜會在每次程式運行變成 1 或 0 個。\r
        \r
        創建一個函式，讓它可以只在有花蜜的紫花中，收集花蜜。
      2-3 Bee Functions 2_instruction: |-
        函式是執行特定任務的一串程式碼。\r
        \r
        用 `get 5` 這個函式來一次採集 5 個花蜜。
      2-3 Bee Functions 3_instruction: 收集每一朵花的花蜜。
      2-3 Bee Functions 4_instruction: |-
        `Move and get nectar`（移動並採集花蜜）函式讓蜜蜂轉向、收集花蜜，接著再讓蜜蜂轉向回到起始點。\r
        \r
        使用這個函式來收集所有的花蜜。
      2-3 Bee Functions 5_instruction: |-
        這兒現在有更多的花蜜在花朵裡。
        編輯提供的函式，讓它可以採集 4 個花蜜，並使用它來收集到花朵裡的所有花蜜。
      2-3 Bee Functions 6_instruction: 現在用相同的函式從 3 朵花中收集到花蜜。
      2-3 Bee Functions 7_instruction: 花朵變得有一些遠了。編輯所提供的函式，並用它來收集到所有花朵上的花蜜。
      2-3 Bee Functions 8_instruction: 建立你自己的函式來採集 7 個花蜜、向前移動、然後釀造 7 個蜂蜜。使用這個函式來收集所有的花蜜及蜂蜜。
      2-3 Bee Functions 9_instruction: 寫一個你自己的函式，順著路走、採集花蜜、釀造蜂蜜、然後讓蜜蜂回到路徑的起點。
      2-3 Bee Functions Assessment 1_instruction: 評量：用給定的函式從每朵花上採集花蜜。
      2-3 Bee Functions Assessment 2_instruction: 評量：新建一個函式來轉向、向前移動、釀造 3 個蜂蜜。然後讓蜜蜂返回出發的位置並向後轉。
      2-3 Bee Loops 1_instruction: |-
        那些花看起來真是香甜可口！\r
        \r
        從每個花朵上採集花蜜，用的積木愈少愈好。
      2-3 Bee Loops 10_instruction: 你能使用一個「當…」迴圈，裡頭包含 2 個其他的迴圈，以收集到所有的花蜜嗎？
      2-3 Bee Loops 11_instruction: 使用當…迴圈來收集花朵上的所有花蜜。
      2-3 Bee Loops 12_instruction: 使用當…迴圈來收集花朵上的所有花蜜。
      2-3 Bee Loops 13_instruction: 評量：使用最少量的積木來收集所有的花蜜。
      2-3 Bee Loops 1A_instruction: '嗨，我是蜜蜂。你能幫助我從這些花朵中收集花蜜嗎？ '
      2-3 Bee Loops 2_instruction: 使用最少的積木來收集所有花蜜及蜂蜜。
      2-3 Bee Loops 2A_instruction: 這一回，用一個迴圈來收集所有的花蜜。
      2-3 Bee Loops 3_instruction: 使用最少的積木，從每一朵花中採集花蜜，並在每一個蜂窩裡釀造蜂蜜。
      2-3 Bee Loops 3A_instruction: 使用一個`重複`迴圈來收集所有的花蜜。
      2-3 Bee Loops 3B_instruction: 現在使用`重複`積木來收集所有的花蜜和蜂蜜。
      2-3 Bee Loops 4_instruction: |-
        蜜蜂就是那麼忙！\r
        \r
        幫助蜜蜂收集所有的花蜜及蜂蜜，用的積木愈少愈好。
      2-3 Bee Loops 4A_instruction: |-
        在這關中，迴圈應該進行多少次？\r
        \r
        迴圈是你的朋友！用一些迴圈來減少積木使用數量，並完成這個關卡。
      2-3 Bee Loops 5_instruction: |-
        這個圖形的路徑不同於其他的圖形。\r
        \r
        你能收集到花蜜嗎？用的積木愈少愈好。
      2-3 Bee Loops 6_instruction: 你能用最快的方式，讓蜜蜂收集到所有的花蜜及蜂蜜嗎？
      2-3 Bee Loops 7_instruction: 多麼美麗的一片花田啊！幫助蜜蜂到每朵花上參觀一下。你能在 7 個積木內完成嗎？
      2-3 Bee Loops 8_instruction: |-
        這些紫色的花在每次關卡運得時，就會有不同的花蜜數量。\r
        \r
        使用`當花蜜…`迴圈來收集到所有的花蜜。\r
        \r
        只要條件判斷後是 true（剩下的花蜜數 > 0），這個迴圈就會不斷循環。
      2-3 Bee Loops 9_instruction: While迴圈等同於在迴圈中加上if的敘述。在這個程式碼中加上一個while迴圈來執行同樣的任務。
      2-3 Bee Loops Assessment 1_instruction: 評量：使用一個`當…`迴圈來採集這些花朵上的所有花蜜。
      2-3 Maze 1_instruction: '你可以幫我抓住那頑皮的豬嗎？把幾個`移動-向前`積木放到`當運行時`積木的下面，然後點擊「運行」。 '
      2-3 Maze 10_instruction: 將我帶到那個綠色小惡魔那！(記得小心TNT黃色炸藥喔)
      2-3 Maze 11_instruction: 我餓了！讓我到花那兒！你需要重複使用一個積木幾次？
      2-3 Maze 12 (copy 1)_instruction: "你可以用兩個程式積木就完成上一題的任務嗎? \n(提示: 使用程式積木\"repeat
        times\"來建立一個迴圈)"
      2-3 Maze 12 (copy 2)_instruction: "你可以用兩個程式積木就完成上一題的任務嗎? \n(提示: 使用程式積木\"repeat
        times\"來建立一個迴圈)"
      2-3 Maze 12 (old)_instruction: 讓我抓到那隻豬！現在再用上重複積木！
      2-3 Maze 12 - One Move Block_instruction: 抓到這隻豬！但這次，你只可以使用 1 個`移動-向前`積木。看看其它的程式積木是不是能幫上你的忙？
      2-3 Maze 12_instruction: 你能用 1 個`移動-向前`和 1 個`重複`積木來創建出一個迴圈，然後到達小豬那兒嗎？
      2-3 Maze 13 (old)_instruction: 讓我抓到那隻豬！現在再用上重複直到積木！
      2-3 Maze 13_instruction: 讓我抓到那隻豬！這一次，你只能用 1 個向前移動積木。
      2-3 Maze 14 (old)_instruction: 使用「重複直到」積木讓我到豬那兒！
      2-3 Maze 14_instruction: 使用最少的積木讓我吃到向日葵！（我需要的「重複」積木在哪兒呢？）
      2-3 Maze 15 (old)_instruction: 使用「重複直到」積木讓我到豬那兒！
      2-3 Maze 15_instruction: 這個關卡裡，2 個 `重複` 迴圈可以幫你使用最少的積木數來抓到豬！
      2-3 Maze 16 (old)_instruction: 使用「重複直到」積木讓我到豬那兒！
      2-3 Maze 16 before_instruction: 想想看，如何用最快的方式讓我可以抓到豬？
      2-3 Maze 16_instruction: 迴圈裡還可以放入更多的積木！你可以循環這個序列，讓殭屍吃到向日葵嗎？
      2-3 Maze 2_instruction: 那隻豬惹毛我了，幫助我抓到牠！
      2-3 Maze 3_instruction: 順著路徑讓我抓到那隻蠢豬，當心別碰到 TNT 炸藥，不然我的羽毛會滿天飛！
      2-3 Maze 4_instruction: 將我帶到那個綠色小惡魔那！(記得小心TNT黃色炸藥喔)
      2-3 Maze 5_instruction: 將我帶到那個綠色小惡魔那！(記得小心TNT黃色炸藥喔)
      2-3 Maze 6_instruction: 保持冷靜，幫我找到那隻壞豬豬。否則我真的會憤怒！
      2-3 Maze 7_instruction: 將我帶到那個綠色小惡魔那！(記得小心TNT黃色炸藥喔)
      2-3 Maze 8_instruction: 讓我抓到那隻豬！
      2-3 Maze 9_instruction: 將我帶到那個綠色小惡魔那！(記得小心TNT黃色炸藥喔)
      2-3 Maze Loops 1_instruction: 你可以只用 5 個相同的積木就讓我抓到豬嗎？
      2-3 Maze Loops 17_instruction: 用你學到的，讓我吃到向日葵！
      2-3 Maze Loops 18_instruction: |-
        使用最少的積木帶我吃到向日葵！\r
        \r
        試試把一個`重複`迴圈放到另一個`重複`迴圈裡頭，可以減少積木的使用次數。
      2-3 Maze Loops 19_instruction: |-
        我們來把它帶到另一個層次！\r
        使用迴圈，讓我吃到向日葵，用愈少積木愈好！
      2-3 Maze Loops 20_instruction: 使用最少的積木讓我吃到向日葵！
      2-3 Maze Loops 21_instruction: 使用最少的積木帶我吃到向日葵！
      2-3 Maze Loops Assessment 1_instruction: '評量：只能用 5 個積木，把我帶到向日葵那兒。 '
      2-3 Maze sq1_instruction: |-
        This pig is ruffling my feathers.  Help me find
        him!
      2-3 Maze sq10_instruction: 拿頭豬來讓我看看吧！ 有哪些方塊重複了呢?
      2-3 Maze sq10v2_instruction: 拿頭豬來讓我看看吧！ 有哪些方塊重複了呢?
      2-3 Maze sq2_instruction: 順著路徑讓我抓到那隻蠢豬，當心別碰到 TNT 炸藥，不然我的羽毛會滿天飛！
      2-3 Maze sq3_instruction: 將我帶到那個綠色小惡魔那！(記得小心TNT黃色炸藥喔)
      2-3 Maze sq4_instruction: 保持冷靜，幫我找到那隻壞豬豬。否則我真的會憤怒！
      2-3 Maze sq5_instruction: 帶我到那隻豬旁邊！你需要重複幾次程式積木呢？
      2-3 Maze sq6_instruction: 你能夠只用兩個程式積木就完成先前的任務嗎？(提示：用"重複次數"的程式積木來建立一個迴圈)
      2-3 Maze sq7_instruction: 試著用 3 個程式積木讓我到綠色入侵者那。
      2-3 Maze sq8_instruction: 讓我抓到那隻豬！（我需要的重複積木在哪裡？）
      2-3 Maze sq9_instruction: 創造迴圈 以更少的積木抵達豬那裏。
      2-3 maze sq11_instruction: 拿頭豬來讓我看看吧！ 有哪些方塊重複了呢?
      2-3 maze sq12_instruction: 你能使用"重複次數"的積木來取代先前的答案嗎？
      2-3 maze sq13_instruction: |-
        親愛的... 人類, 我... 殭屍。需要... 到... 向日葵。
        用「重複直到」積木來建立一個迴圈。
      2-3 maze sq14_instruction: 你可以只用 4 個積木就到達向日葵那裡嗎？
      2-3 maze sq15_instruction: 你可以只用 5 個積木就到達向日葵那裡嗎？
      2-3 maze sq16_instruction: 好的，這和上一關很相似，有些不一樣就是。你可以只用 5 個積木解決嗎？
      2-3_instruction: |-
        Purple flowers may have either 1 or 0 nectar. Be careful
        not to collect nectar from a purple flower if it doesn't have any.
      2-3level1_instruction: 往前移動，幫助憤怒鳥抓到頑皮的豬。
      20hr_farmer_stage9_1_instruction: |-
        Hi, I'm a farmer. I need your help to flatten
        the field on my farm so it's ready for planting. Move me to the pile of dirt
        and use the "remove" block to remove it.
      20hr_farmer_stage9_10_instruction: |-
        I'm working late, so it's dark out, and
        I can't tell how large the piles are. Now I don't have all the options I
        used to have on the while block. Move me along the field, and if there is
        a pile, remove it
      20hr_farmer_stage9_11_instruction: |-
        It's still dark outside. Move me along
        the field. If there is a pile, remove it, and if there is a hole, fill it
        in. Hint: use the dropdown menu of options on the "if" block.
      20hr_farmer_stage9_2_instruction: |-
        Next, move me to the hole and fill it with
        TWO shovelfuls of dirt, using the "fill" block.
      20hr_farmer_stage9_3_instruction: |-
        Move me to the pile of dirt and tell me
        how many shovelfuls to remove using as few blocks as possible.
      20hr_farmer_stage9_4_instruction: |-
        Can you help me remove all four piles of
        dirt? Hint: use a repeat block if you can.
      20hr_farmer_stage9_5_instruction: |-
        Help me fill in all these holes with 5 shovelfuls
        of dirt. Hint: you can put a "repeat" block inside the "while" block.
      20hr_farmer_stage9_6_instruction: |-
        Remove all the piles of dirt, using as few
        blocks as possible. The new options in the dropdown menu on the "while"
        block tell me if I'm standing on a pile or a hole.
      20hr_farmer_stage9_7_instruction: |-
        Wow, I found a really deep hole! I don't
        know how many shovelfuls of dirt it needs. Can you write a program that fills
        it until the ground is even?
      20hr_farmer_stage9_8_instruction: |-
        Help me fill in the hole at the end of the
        field, using as few blocks as possible.
      20hr_farmer_stage9_9_instruction: |-
        Make me remove all these piles of dirt.
        Try to use as few blocks as possible. Hint: try using a "while" block.
      20hr_maze_stage2_1_instruction: |-
        Can you help me to catch the naughty pig?
        Stack a couple of "move forward" blocks together and press "Run" to help
        me get there.
      20hr_maze_stage2_10_instruction: |-
        Ok, try the new "repeat until" block -
        it will repeat until I reach the annoying pig.
      20hr_maze_stage2_11_instruction: |-
        Ok, one last time for practice - can you
        solve this one using only 4 blocks?
      20hr_maze_stage2_12_instruction: |-
        Dear person. Me zombie. Me hungry. Must...
        get... to sunflower... Can you get me there with only 5 blocks?
      20hr_maze_stage2_13_instruction: |-
        Ok, this is similar, but slightly different.
        Can you do it in only 5 blocks?
      20hr_maze_stage2_14_instruction: |-
        Use the new "if" block to let me decide
        when to turn. Hint: you only need one more block, but learn how we set it
        up so you can do it on your own next time.
      20hr_maze_stage2_15_instruction: |-
        Ok, this is just like the last puzzle, but
        you need to remember how you used the "if" block and the "repeat" block
        together.
      20hr_maze_stage2_16_instruction: |-
        Me want sunflower! Use an "if" block to
        get me there with the fewest number of blocks.
      20hr_maze_stage2_17_instruction: |-
        Ok, let's do that again for practice - this
        isn't very different, but watch out for the chompers!
      20hr_maze_stage2_18_instruction: |-
        The "If-else" blocks checks a condition,
        and then does one thing OR another. To get me to the sunflower try to use
        this new block.
      20hr_maze_stage2_19_instruction: 再練習一次「如果…否則」積木，你可以一次就完成嗎？
      20hr_maze_stage2_2_instruction: |-
        This pig is ruffling my feathers. Help me
        to find him!
      20hr_maze_stage2_20_instruction: |-
        Can you add just 3 blocks to help me solve
        a more complex maze? If you do it right, I can walk any curvy path no matter
        the length.
      20hr_maze_stage2_3_instruction: |-
        Trace the path and lead me to the silly pig.
        Avoid TNT or the feathers will fly!
      20hr_maze_stage2_4_instruction: |-
        Guide me to the green evilness! (Watch out
        for TNT)
      20hr_maze_stage2_5_instruction: |-
        Keep calm and help me to find the bad pig.
        Otherwise I might get angry!
      20hr_maze_stage2_6_instruction: |-
        There's a way I can get to the silly pig
        using only 2 blocks. Can you figure it out?
      20hr_maze_stage2_7_instruction: |-
        Try to get me to the green intruder using
        only three blocks.
      20hr_maze_stage2_8_instruction: |-
        Help me banish this bad piggy using the fewest
        number of blocks. Try using more than one "repeat times" block.
      20hr_maze_stage2_9_instruction: |-
        When a block is grey, that means you can't
        delete it. Solve this puzzle using the "repeat" block that repeats 3 times.
        Try putting these 3 blocks inside the grey "repeat" block: move, move, turn.
      4-5 Artist 1_instruction: '請幫我畫完我的盒子。（每個線段的長度是 300 像素） '
      4-5 Artist 10_instruction: 點擊「運行」來試試程式，接著，重複它指定次數來完成這個圖案，每次使用不同的顏色。
      4-5 Artist 11_instruction: 完成這些綠色的線。它們的長度是 300 像素，線條與線條之間的距離為 15 像素。
      4-5 Artist 2_instruction: 使用`重複`積木來循環這個程式，以完成這個正方形。
      4-5 Artist 3.5_instruction: 想一想，當你運行這個程式時會發生什麼事（你也可以直接點擊「運行」來看看）。接著，重複它一定的次數來完成這個圖形！
      4-5 Artist 3_instruction: 這個長方形花圃的周長是 600。長邊的長度是 200。畫出這個長方形，用的積木愈少愈好。
      4-5 Artist 4_instruction: 一個圓有多少度？藉由迴圈來創造一個彩色的圓。
      4-5 Artist 5_instruction: 我們可以把「???」換成什麼，殭屍才可以用提供的迴圈完成這個圖案？
      4-5 Artist 6_instruction: 這個正三角形的三個角都是 60 度，三個邊都是 200 像素。完成這個圖形。
      4-5 Artist 7_instruction: 這個直角三角形的角度分別是 30、60、90 度。斜邊的長度是 200 像素。完成這個圖形。
      4-5 Artist 8_instruction: |-
        足球場的半場線與邊線互相垂直。\r
        這個長方形的周長是 800 像素，長邊是 240 像素。它的高是多少？\r
        \r
        把邊線與半場線畫出來。
      4-5 Artist 9_instruction: 畫出圖形的右半邊，以讓這個設計對稱。這是個正三角形，邊長為 50 像素。
      4-5 Artist Assessment 1_instruction: 評量：用迴圈畫出正三角形。每一邊長 300 像素。
      4-5 Artist For Loops 1_instruction: 把數字 1 到 10 放進寬度積木，然後運行程式。
      4-5 Artist For Loops 11_instruction: 完成這個計數迴圈積木，這樣就可以從 0, 20, 40, 60, 80...
        計數到 200。
      4-5 Artist For Loops 12_instruction: '如果你把「從…」和「到…」之間的數字互換，會發生什麼事？完成這個計數迴圈，讓它倒著算出
        200、180、160、140、120…0。 '
      4-5 Artist For Loops 13_instruction: 這個圖案沒有使用計數迴圈，所以用掉太多積木了！使用一個計數迴圈來完成這個螺旋圖案。提示：最後一個線段長
        250 像素。
      4-5 Artist For Loops 14_instruction: 有人在開始寫程式碼之後，發現應該有更快的方式！用一個計數迴圈積木來取代其他積木，然後完成這個三角形螺旋。（提示：最後一條線的長度是
        300 像素。）
      4-5 Artist For Loops 15_instruction: 有人在開始寫程式碼之後，發現應該有更快的方式！用一個計數迴圈積木來取代其他積木，然後完成這個六邊形螺旋。（提示：最後一條線的長度是
        200 像素。）
      4-5 Artist For Loops 2_instruction: 這是一個計數迴圈，取代輸入 1,2,3... 10，這個計數積木可以重複執行裡頭的程式並為你算出數字。放置數字
        10 到計數迴圈的「到…」欄位上。
      4-5 Artist For Loops 3_instruction: 我們要用什麼方法從 1 數到 50 呢？編輯這個計數積木。
      4-5 Artist For Loops 4_instruction: 完成一個能從 1 數到 10 的計數迴圈積木。
      4-5 Artist For Loops 6_instruction: 畫出邊長為 50、60、70、80、90 像素的正方形。你會需要用到 draw
        a square（畫個正方形）的函式 5 次。
      4-5 Artist For Loops 7_instruction: 用一個「以⋯方式計數」模塊改變尺寸畫同樣的正方形。把「計數器」模塊放到「畫一個正方形」函數中。提示：它在變量欄中。
      4-5 Artist For Loops 8_instruction: 你可以完成這個程式嗎？放置積木到「計數循環」積木裡，循環中的計數從 10 算到
        200，以 10 為間隔數。你可以在迴圈類指令中找到「計數迴圈」積木。
      4-5 Artist For Loops 9_instruction: 這些圓形的大小分別是5、10、15、20、25、30、35。用"for"程式積木來畫圓形。
      4-5 Artist Free Draw 1_instruction: 隨便畫吧！把你的靈感變成創作！
      4-5 Artist Functions 1_instruction: 用一個重複迴圈來畫出這個三角形。
      4-5 Artist Functions 10a_instruction: 把這個代碼放在「繪製一片雪花」函數中，並用參數「大小」來代替50。已經調用的函數是用來畫一個一百像素的雪花的。
      4-5 Artist Functions 10b_instruction: '用「畫一片雪花」函數創建不同大小的雪花。 提示: 第一片雪花長度為 25
        像素而且每片雪花的長度是前一個的兩倍。'
      4-5 Artist Functions 11_instruction: '"畫一個六邊形"函數使用"畫一個三角形"函數。完成這個六角形函數。(提示:
        一個六邊形有 6 邊，每邊長 100 像素)'
      4-5 Artist Functions 12_instruction: '完成畫波浪線函數。 每個波浪是一個上突波和一個下凹波組成。  提示: 繪製
        5 個藍色的波浪。'
      4-5 Artist Functions 13 Free play_instruction: |-
        這裡有一些讓你畫出星球、星型、火箭和機器人的工具
        多多利用它們做出你原創的圖片，你還能跟你的好朋友們分享喔！
      4-5 Artist Functions 14 Free play_instruction: 這裡，我要已經為你提供了幾個函式。要在一個還是多個迴圈裡？要用哪些函式？一切隨你，你高興就好。用它們來製作圖案並和你的朋友分享。點擊「運行」來看看範例。
      4-5 Artist Functions 15 Assessment_instruction: 評量：用 draw a square（畫個正方形）函式來建立邊長為
        50、100 以及 150 像素的正方形。
      4-5 Artist Functions 2a_instruction: 現在把這些程式積木放進名為 draw a small triangle（畫個小三角形）的新函式，接著呼叫它。
      4-5 Artist Functions 2b_instruction: 現在用提供的積木建立一個名為 draw a small triangle（畫個小三角形）的函式。
      4-5 Artist Functions 3_instruction: '現在請建出新的「畫一個中三角形」和「畫一個小三角形」函式。「畫一個小三角形」函式已經好了。三角形的邊長為
        50 (小)、100 (中)、150 (大)。 '
      4-5 Artist Functions 4_instruction: 這個新的「畫三角形」函式有一個參數，它可以做到之前的三個功能。用這個函式來畫一些三角形吧。
      4-5 Artist Functions 5_instruction: 你能夠將 draw a triangle（畫個三角形）函式修改成 draw a
        square（畫個正方形）函式嗎？
      4-5 Artist Functions 6_instruction: 用畫正方形和三角形的函式來畫一間房子。提示：方形的邊長是 200 像素。
      4-5 Artist Functions 6b_instruction: 用畫正方形和三角形的函式與其它的程式積木，把積木組合成「畫一間房子」函式並呼叫它。
      4-5 Artist Functions 7_instruction: 用「畫一間房子」函式來分別畫出 100 及 50 像素的房子。這兩間房子相隔 50
        像素。
      4-5 Artist Functions 8_instruction: Draw a flower（畫個花朵）函式中有一個參數，它可以讓你設定莖的高度。將它設為
        200，看看會發生什麼事。
      4-5 Artist Functions 9_instruction: 畫這 3 朵花。第一朵花高 100 像素，然後後面的花要比前一朵高 50 像素。而花朵之間距離是
        100 像素。
      4-5 Artist Patterns 1_instruction: |-
        使用迴圈來畫出這個正方形。\r
        \r
        每個邊長是 20 像素。
      4-5 Artist Patterns 10_instruction: |
        這個是用來畫出 2 列六邊形的程式 - 循環整個程式 4 次就可以畫出整個蜂窩。\r
        \r
        你需要在每次的循環之後向後跳躍 120 像素，以確保小藝術家不會跑出畫面。\r
      4-5 Artist Patterns 11_instruction: 你需要重複迴圈多少次才可以畫出一個半圓？
      4-5 Artist Patterns 12_instruction: |-
        如果你要再建立一個像這樣的迴圈，然後把向左轉改成向右，會發生什麼事呢？\r
        \r
        你可以重複那些程式來畫出波浪嗎？
      4-5 Artist Patterns 13_instruction: |-
        現在我們來循環做這件 4 次以建立這個畫框。當心轉角處 - 你不能直接轉向 90 度！\r
        \r
        如果循環 3 度 60 次會產生一個半圓，這些程式中的哪些積木可以額外畫出四分之一圓作為畫框圓角呢？
      4-5 Artist Patterns 2_instruction: 如果你放置一個正方形迴圈到其它的迴圈裡，我們稱它為巢狀迴圈（nested loop）。你需要在迴圈最外層添加什麼積木，讓所有
        15 個正方形靠在一起且排成一直線？
      4-5 Artist Patterns 3_instruction: |-
        現在讓我們加深難度！
        我們已經將整個程式積木嵌套在另一個迴圈內，但你需要讓小藝術家回到初始位置來畫出下一行。要在最外層迴圈下添加哪個積木，才能畫完整個網格？
      4-5 Artist Patterns 4_instruction: 這個菱形的邊長為 50 像素，角度分別是 120 及 60 度。用一個迴圈把它畫出來。
      4-5 Artist Patterns 5.5_instruction: 你需要重複這個積木多少次才能畫出網格上的所有菱形？
      4-5 Artist Patterns 5_instruction: |
        重複這個程式來製作一排 6 個的菱形。
        \r
        \r
        注意我們已修改菱形的程式，將重複次數從 2 改成 3，你覺得那是為什麼？\r
      4-5 Artist Patterns 6_instruction: 你需要重複這個積木多少次才能畫出網格上的所有菱形？
      4-5 Artist Patterns 7_instruction: 讓我們修改上一題的代碼來畫出這個更複雜的圖案。注意現在菱形是如何重疊的，試著把第一個「跳躍-向後」積木上的數值從
        100 改成 50（一半的距離）- 現在藝術家應該將第二個「跳躍-向後」上的數值改成多少？
      4-5 Artist Patterns 8_instruction: 使用一個迴圈來畫出這個六邊形，它的每個邊長是 40 像素，每個角度是 60 度。
      4-5 Artist Patterns 9.5_instruction: 讓我們循環這段程式來畫出兩列六邊形。注意第二列是如何被移動到右邊的。
      4-5 Artist Patterns 9_instruction: |-
        現在重複這個程式 3 次來畫出這列圖案。\r
        \r
        每個六邊形的對角距離為 80 像素。
      4-5 Artist Patterns Free Play_instruction: 自由發揮 - 試著親手做一個自己的圖案！
      4-5 Bee Conditionals - FC Test_instruction: 蜂蜜現在只想要花蜜。不是全部的東西都是花朵，所以檢查每朵雲裡面是否藏著花朵。如果是的話，那就可以採集花蜜。
      4-5 Bee Conditionals 1 (copy 1)_instruction: |-
        The bee can't tell if this is
        a flower or a honeycomb. Gather nectar only from flowers, but first check
        if it is a flower or a honeycomb.
      4-5 Bee Conditionals 1_instruction: 這雲遮住了我的視線！檢查看看雲的下面是不是有花朵，只有在有花朵的時候才採集花蜜。注意，它會變來變去的！
      4-5 Bee Conditionals 2 (copy 1)_instruction: |-
        The bee only wants nectar right
        now. Remember, not all objects are flowers, so check to gather nectar only
        at flowers.
      4-5 Bee Conditionals 2_instruction: |-
        雲愈來愈多了！\r
        \r
        檢查每個雲，在你採集花蜜前看看是不是有花朵藏在裡頭。\r
        \r
        記住：
        雲底下藏的東西不見得一樣！
      4-5 Bee Conditionals 3_instruction: 現在蜜蜂只想要製作蜂蜜。在一些雲裡可能藏著蜂窩，仔細的檢查每個雲！
      4-5 Bee Conditionals 4 (copy 1)_instruction: |-
        The unknown object is either
        a flower or a honeycomb. Use the if/else block to collect nectar if it is
        a flower, else to make honey (because it is a honeycomb).
      4-5 Bee Conditionals 4_instruction: 有時雲裡面有花朵，有時雲裡藏著蜂窩！使用「如果…否則」積木，如果是花朵就收集花蜜。否則，就釀造蜂蜜（因為它是蜂窩）。
      4-5 Bee Conditionals 5_instruction: |-
        雲下藏的不是花朵就是蜂窩！\r
        \r
        用`如果…否則`積木，如果是花的話就採集花蜜，\r
        否則，就釀造蜂蜜。
      4-5 Bee Conditionals 6 (copy 1)_instruction: |-
        This purple flower may have either
        3, 2, or 1 nectar. Here an if-else block is combined with another if-else
        block to create an if, else-if, else block. Complete the solution to collect
        the unknown amount of nectar.
      4-5 Bee Conditionals 6_instruction: |-
        我不確定這朵花裡有多少花蜜，也許是 1 或 2 或 3 個。\r
        \r
        組合這個條件判斷積木（`如果`和`如果…否則`）來取得花朵中實際的花蜜數。
        \r
        \r
        記住，花蜜的數量會在你每次運行之後改變！
      4-5 Bee Conditionals 7_instruction: |-
        這些花朵上可能有 3、2 或 1 個花蜜。
        \r
        \r
        完成 `check purple flower`（檢查紫花）這個函式，並使用它來收集花朵上的所有花蜜。
      4-5 Bee Conditionals 8_instruction: |-
        寫個 `check flower make honey`（檢查花朵釀造蜂蜜）的函式。\r
        \r
        你的函式應該要檢查紫花裡有多少的花蜜（1-3 不等）並採集起來。\r
        然後，再向前移動釀造蜂蜜。
      4-5 Bee Conditionals Assessment 1_instruction: |
        **評量：**雲朵中可能隱藏著帶有花蜜的花朵，或是可裝蜂蜜的蜂窩。\r
        \r
        完成這個`get nectar or make honey`的函式，然後調用它來收集花蜜或蜂蜜。（註：get nectar or make honey 是採到花蜜或釀成蜂蜜的意思）\r
      4-5 Bee Debugging 1_instruction: 這些積木真是讓我一陣錯亂！你可以修正它們嗎？
      4-5 Bee Debugging 10_instruction: 找到錯誤並修正它們。
      4-5 Bee Debugging 11_instruction: 這個計數是正確的嗎？
      4-5 Bee Debugging 2_instruction: 幫助蜜蜂收集花蜜及製造蜂蜜。
      4-5 Bee Debugging 3_instruction: 找到錯誤並修正它們。
      4-5 Bee Debugging 4_instruction: 這些程式積木無法正常動作，你能幫我找出模式嗎？
      4-5 Bee Debugging 5_instruction: 這兒的程式積木有點不對勁…
      4-5 Bee Debugging 6_instruction: |-
        在你每次運行時，紫色的花朵都會有不同數量的花蜜。\r
        \r
        修正這個程式以在每次運行時都能採集到花朵上的所有花蜜。
      4-5 Bee Debugging 7_instruction: 這個函式缺少了一些東西…
      4-5 Bee Debugging 8_instruction: 函式本身沒問題，但它沒有被正確使用。
      4-5 Bee Debugging 9_instruction: 為什麼釀造的蜂蜜永遠都不夠用？
      4-5 Bee Debugging Assessment 1_instruction: 評量：修正程式碼。
      4-5 Bee Nested Loops 1_instruction: 使用一個迴圈來收集所有的花蜜。
      4-5 Bee Nested Loops 2_instruction: 使用巢狀迴圈從每朵花中收集所有的花蜜。
      4-5 Bee Nested Loops 3_instruction: 將起始程式碼放到巢狀迴圈中來收集的所有花蜜。
      4-5 Bee Nested Loops 4_instruction: "收集每一朵花的花蜜，並在每一個蜂窩製造蜂蜜。 \\r\n\\r\n使用巢狀迴圈。 "
      4-5 Bee Nested Loops 5_instruction: 建立一個巢狀迴圈來收集所有的花蜜。
      4-5 Bee Nested Loops 6_instruction: 收集所有的花蜜。
      4-5 Bee Nested Loops 7_instruction: 把這個迴圈放入另一個迴圈來建構一個巢狀迴圈，從花朵上採集到所有花蜜。
      4-5 Bee Nested Loops 8_instruction: '收集所有花朵裡的花蜜。透過巢狀迴圈（將裡面的重複積木換成當…積木）來完成。 '
      4-5 Bee Nested Loops 9_instruction: 透過巢狀迴圈（在重複迴圈裡放置一個當…迴圈）來收集所有花朵裡的花蜜。
      4-5 Bee Nested Loops Assessment 1_instruction: "**評量：**用迴圈收集所有的花蜜及蜂蜜。"
      4-5 Bee Nested Loops Rows_instruction: |-
        採集每一排花朵中的花蜜！
        使用巢狀迴圈。
      4-5 Maze 1 (copy 1)_instruction: 親愛的... 人類，我... 殭屍。需要... 到... 向日葵。
      4-5 Maze 1_instruction: 親愛的... 人類, 我... 殭屍。需要... 到... 向日葵。
      4-5 Maze 10_instruction: 你可以只用 4 個積木就到達向日葵那裡嗎？
      4-5 Maze 11_instruction: 你可以只用 6 個積木就到達向日葵那裡嗎？
      4-5 Maze 12_instruction: 好啦，現在有點不一樣了。你能不能只用 6 個積木完成關卡？
      4-5 Maze 13_instruction: 讓我抓到那隻豬！
      4-5 Maze 14_instruction: 讓我抓到那隻豬！利用「重複直到」積木完成關卡。
      4-5 Maze 2 (copy 1)_instruction: 讓殭屍吃到向日葵，記得要避開食殭花！
      4-5 Maze 2_instruction: 讓殭屍吃到向日葵，記得要避開食殭花！
      4-5 Maze 3 (copy 1)_instruction: 就速要... 吃到... 向日葵。
      4-5 Maze 3_instruction: 就速要... 吃到... 向日葵。
      4-5 Maze 4 (copy 1)_instruction: 試試看用「重複」積木來減少積木的使用數…
      4-5 Maze 4_instruction: 試著使用"重覆"程式積木來減少程式積木的使用量。
      4-5 Maze 5 (copy 1)_instruction: 你可以用最少的積木來完成這個關卡嗎？
      4-5 Maze 5_instruction: 你可以用最少的積木來完成這個關卡嗎？
      4-5 Maze 6 (copy 1)_instruction: 你可以用最少的積木來完成這個關卡嗎？
      4-5 Maze 6_instruction: 使用最少的積木讓我吃到向日葵！
      4-5 Maze 7_instruction: 讓殭屍快一點吃到向日葵！你能用 11 個以下的積木來完成這個關卡嗎？
      4-5 Maze 8_instruction: |-
        用最少的積木讓殭屍吃到向日葵。\r
        （記得要避開食殭花！）
      4-5 Maze 9_instruction: |-
        現在我們有個新的積木叫做`重複直到`。\r
        這可以讓我們持續循環指令，直到殭屍吃到向日葵。\r
        \r
        使用新的`重複直到`積木來完成這個關卡，用的積木愈少愈好。
      4-5 Maze Assessment 1_instruction: 評量：用最少的程式積木取得向日葵。
      4-5 Maze Conditionals 1_instruction: 使用`重複 直到`積木讓殭屍吃到向日葵。
      4-5 Maze Conditionals 10_instruction: |-
        你可以只用 3 個積木來幫助殭屍解決更複雜的關卡嗎？ \r
        \r
        如果你成功了，不管怎樣曲折的路他都能克服！
      4-5 Maze Conditionals 2_instruction: 使用`重複 直到`積木讓殭屍吃到向日葵。
      4-5 Maze Conditionals 3_instruction: '使用`如果`積木來幫我決定何時要轉向。\r

'
      4-5 Maze Conditionals 4_instruction: 好啦，這個關卡的解法和上一關很像，但是請記住你是怎麼應用`如果`、`重複直到`積木的。
      4-5 Maze Conditionals 5_instruction: |-
        「偶想... 粗... 向日葵！」\r
        \r
        使用`如果`陳述式，讓殭屍用最少的積木到達向日葵那裡。
      4-5 Maze Conditionals 6_instruction: |-
        「偶想... 粗... 向日葵。」\r
        \r
        使用`如果`積木，讓殭屍用最少的積木到達向日葵那裡。
      4-5 Maze Conditionals 7_instruction: 這個關卡的解法並不是特別困難，只不過請當心噬殭花！
      4-5 Maze Conditionals 8_instruction: |-
        `如果…否則`積木可以檢查一個狀況，接著執行一個操作或另一個。\r
        \r
        使用這個新積木，讓我吃到向日葵。
      4-5 Maze Conditionals 9_instruction: |-
        再練習一次如何使用`如果…否則`積木！\r
        \r
        試試先用手指頭追蹤看看，再寫出程式，你能不能一次就成功。
      4-5 Maze Conditionals Assessment 1_instruction: "**評量：**用一個`重複直到`和`如果/否則`積木讓我到向日葵的位置，使用的積木愈少愈好。"
      4-5 Nested Loops 1_instruction: '完成代碼來畫這些三角形。第一個三角形的代碼已經幫你打好了。提示: 3個三角形旋轉了360度'
      4-5 Nested Loops 10_instruction: |-
        Draw the last row of stars on this flag by
        looping the provided blocks. The stars are 50 pixels apart, but remember that
        the stars themselves are 30 pixels wide.
      4-5 Nested Loops 11_instruction: 你可以用巢狀迴圈來畫出在人行道上的 10 個正方形嗎？每個正方形的邊長為 30 像素。
      4-5 Nested Loops 12_instruction: 你可以用巢狀迴圈來畫出這 36 個三角形嗎？
      4-5 Nested Loops 2_instruction: '現在將這個迴圈嵌套進另一個迴圈內，以畫出 10 個三角形。這就是所謂的「巢狀式迴圈」。  '
      4-5 Nested Loops 3_instruction: |-
        把起始程式碼嵌進另一個迴圈中來畫出一個太陽。\r
        \r
        要能夠製作出這樣酷炫的圖案，你必須在轉向之前向前跳一段距離。
      4-5 Nested Loops 5_instruction: 重複已給的代碼來畫出一個風車。
      4-5 Nested Loops 6_instruction: 你可以藉由重複畫三角形的代碼來畫出一個六邊形嗎？
      4-5 Nested Loops 7_instruction: |-
        循環這個圖樣 10 次。\r
        \r
        你知道在每個圖樣畫完後要轉多少角度嗎？
      4-5 Nested Loops 8_instruction: "重複這個圖案6次。\\r\n\\r\n你知道每次重複畫圖案時需要轉多少度？ "
      4-5 Nested Loops 9_instruction: 在鱷魚的嘴內畫出牙齒!
      4-5 Nested Loops Assessment 1_instruction: 評量：使用一個巢狀迴圈來完成這個設計。
      4-5 While Loops 1_instruction: 把我移動到洞口，然後使用`填充`積木，鏟 2 鏟土填平它。
      4-5 While Loops 2_instruction: 把我移動到土堆，然後使用`移除 1`積木，挖除 5 鏟土。
      4-5 While Loops 3_instruction: |-
        盡可能使用最少的積木來完成這個關卡！\r
        \r
        讓我移動到土堆上並把土鏟平，再移動到坑洞上並把洞填滿。
      4-5 While Loops 4_instruction: "哇，瞧瞧這兒！\\r\n\\r\n我不知道要用多少鏟土才可以把它填平。\\r\n你可以寫一個程式，讓它不斷的用`填充`積木填土，直到地面變平坦嗎？
        \ "
      4-5 While Loops 5_instruction: 哇，現在這裡有兩個很深的坑洞！你可以寫個程式，填滿它們直到地面變平整嗎？
      4-5 While Loops 6_instruction: 哇，現在這裡有一個很大的土堆！你可以寫個程式，挖除它們直到地面變平整嗎？
      4-5 While Loops 7_instruction: 哇，現在這裡有三個土堆！你可以寫個程式，挖除它們直到地面變平整嗎？
      4-5 While Loops 8_instruction: " 有一個非常深的洞，還有一個非常大的土堆。需要幾鏟土才能把地面變平整呢？提示:：填土和挖土都用了「當…」迴圈。"
      4-5 While Loops Assessment 1_instruction: 這兒有許多坑洞和土堆。幫我把它們填滿或鏟除，讓地面變平整。
      AlgPD DR Free Play_instruction: Create a function based on your own word problem.
      Alien Defender_instruction: 專案點子：在 Play Lab 裡設計一個獨一無二的遊戲！
      Alien Defender_2018_instruction: |-
        Project Idea: Make a defender game in Play
        Lab!
      AllTheThings Applab - Turtle move with button_instruction: 添加一個按鈕，讓你在點擊它時，烏龜能夠移動。（點擊觀看完整說明）
      'AllTheThings: Pixelation - Lesson 14 - Make the Letter A_instruction': |-
        Make
        a 3x5 letter 'A'. The widget is setup with the incorrect dimensions. Your
        first task is to set the second byte to the 8-bit binary code for 5: 0000
        0101. Then start entering pixel data.
      'AllTheThings: Pixelation - Lesson 15 - Color Shades 4x4_instruction': |-
        We
        start you out with the 4x4 image Maddie created in the video. Your task is
        to fill a 4x4 grid with colors using 12-bits per pixel. Here are the requirements:
        Row 1 - fill with shades of red. Row 2 - shades of green. Row 3 - shades of
        blue. Row 4 - shades of gray.
      'AllTheThings: Pixelation - Lesson 15 - Complete 3-bit color_instruction': |-
        We
        start you with the 4x2 image Maddie was creating, but we've left out the
        last two squares. Finish off the image by figuring out which two colors are
        missing and encode them.
      App Lab test_instruction: 測試
      AppLab_test02_instruction: |-
        One sentence summary of the activity. Click to
        view full instructions.
      Applab AllTheThings ResourcesTab AllResources_instruction: |-
        Draw a 1x1 square
        above and to the left of the turtle's starting position. Click to see full
        instructions.
      Applab AllTheThings ResourcesTab MapReference_instruction: |-
        Draw a 1x1 square
        above and to the left of the turtle's starting position. Click to see full
        instructions.
      Applab AllTheThings ResourcesTab ReferenceLinks_instruction: |-
        Draw a 1x1 square
        above and to the left of the turtle's starting position. Click to see full
        instructions.
      Applab allthethings onRecordEvent_instruction: |-
        Please sign in to test applab
        levels (By design, applab levels only work if signed in. Normally, we make
        people sign in, but this is only enforceable for a whole script and would
        be annoying to do for the allthethings script).
      Applab test_instruction: This level is submittable. For testing only!
      Artist - Nested Loops 1_instruction: |-
        Complete the code to draw these triangles.  The
        first one is done for you.  Hint:  3 triangles in a 360 degree rotation.
      Artist - Nested Loops 10_instruction: |-
        Draw the last row of stars on this flag
        by looping the provided blocks. The stars are 50 pixels apart, but remember
        that the stars themselves are 30 pixels wide.
      Artist - Nested Loops 11_instruction: |-
        Can you draw these 10 squares of this
        sidewalk using a nested loop? Each square is 30 pixels.
      Artist - Nested Loops 12_instruction: |-
        Can you draw these 36 triangles using
        a nested loop?
      Artist - Nested Loops 2_instruction: "Now nest this loop inside another loop\nto
        draw 10 triangles.  This is called a nested loop.  Hint: All 10 triangles\ncomplete
        a 360 degree rotation.  "
      Artist - Nested Loops 3_instruction: |
        Create a sun by nesting the starter code
        in another loop. This is called a nested loop.\r
      Artist - Nested Loops 5_instruction: Loop the given code to create a windmill.
      Artist - Nested Loops 6_instruction: |-
        Can you draw a hexagon by looping the
        triangle code?
      Artist - Nested Loops 7_instruction: |-
        Loop this design 10 times. How much do
        you have to turn each time you loop? (Hint: What is 360 divided by 10?)
      Artist - Nested Loops 8_instruction: |-
        Loop this design 6 times. How much do
        you have to turn each time you loop? (Hint: What is 360 divided by 6?)
      Artist - Nested Loops 9_instruction: Draw the teeth in the alligator's mouth!
      Artist - Nested Loops Assessment 1_instruction: 用一個巢狀迴圈來完成這個圖案。
      Artist Inspiration_instruction: "Free Play Inspiration: You've now learned\neverything
        you need to know to make a pattern like this! If this picture inspires\nyou,
        try to make something similar. Otherwise, create something all your own.\\r\n\n\\r\nWant
        to know how our inspiration pattern was made? "
      Auto Open Function Editor_instruction: "You can call functions from inside\nother
        functions! Using your \"shape\" function as a base, create 3 house shapes\neach
        20 pixels larger than the last starting at 50 pixels in length. Using\na counter
        loop might be helpful. "
      Bee Recommended Blocks test_instruction: |-
        Purple flowers may have either 1
        or 0 nectar, but you don't know which one! Be careful not to collect nectar
        from a purple flower if it doesn't have any. Check if the nectar is equal
        to 1 by using the if block.
      Bergeron Robot Maze1_instruction: |
        Can you help me catch the naughty pig? Stack
        a couple of `move forward` blocks below the `when run` block and press "Run".
      Big Game Animation 1 (copy 1)_instruction: |-
        Now that you've learned to write
        simple linear functions, let's work on using them to add some movement to
        our game. Click play to see what your game can currently do (not much!), update
        any variables you like, and then click finish to move on.
      Big Game Animation 1_instruction: |-
        Now that you've learned to write simple
        linear functions, let's work on using them to add some movement to our game.
        Click "Run" to see what your game can currently do (not much!), update any
        variables you like, and then click finish to move on.
      Big Game Animation 2 (copy 1)_instruction: |-
        The function 'update-target'
        function takes the target's current x value, and returns an updated value.
        Complete the 'update-target' function so that it adds to the x value each
        time it is called. The more you add to x, the faster the target will go.
      Big Game Animation 2_instruction: |-
        The update-target function takes the target's
        current x value, and returns an updated value. Complete the update-target
        function so that it adds to the x value each time it is called. The more you
        add to x, the faster the target will go.
      Big Game Animation 3_instruction: |-
        The update-danger function should work just
        like update-target, except that the danger should move from the right side
        over towards the left. Complete update-danger to make the danger fly across
        the screen.
      Big Game Animation 4_instruction: |-
        At this point in your game, your danger
        should run across the screen from right to left, and your target should run
        across from left to right. They don't ever come back on screen once they've
        left, but we'll take care of that later. Take a minute to make sure your
        game is working like you want it to, and then click "Finish" to move on.
      Big Game Booleans 1_instruction: |-
        When you last worked on your game we got
        our target and danger sprites to fly across the screen, but they never come
        back. Click "Run" to see how your game is currently working, and then click
        finish and we'll work on making those sprites reappear on screen after they've
        left.
      Big Game Booleans 2_instruction: |-
        Go to the Functions section of the toolbox
        and complete the safe-left? function so that it returns true if the sprite's
        x coordinate is greater than -50. If you're successful you should see the
        Danger go off the left side and then return on the right side.
      Big Game Booleans 3_instruction: |-
        Now that you've got safe-left?, let's fill
        in safe-right? - it should take in a sprite's x coordinate and return true
        if that coordinate is less than 450. Once your safe-right? is complete you
        should see the Target go off the right side of the screen and return on the
        left.
      Big Game Booleans 4_instruction: |-
        Complete the onscreen? function so that it
        checks whether both safe-left? and safe-right? are true.
      Big Game Booleans 5_instruction: |-
        At this point your Danger should run across
        the screen from right to left, your Target should run across from left to
        right, and they should both return to the opposite side, repeatedly. Take
        a minute to make sure your game is working like you want it to, and then click
        "Finish" to move on.
      Big Game Collision 1 (copy 1)_instruction: |-
        When you last worked on your game
        we got our target and danger sprites to fly across the screen, but they never
        come back. Click run to see how your game is currently working, and then click
        finish and we'll work on making those sprites reappear on screen after they've
        left.
      Big Game Collision 1_instruction: |-
        At this point you've programmed a video
        game with a moving Target and Danger, both of which return to the screen once
        they've left, and a Player that responds to keyboard input. Click "Run"
        to see how your game is currently working, and then we'll dig into the final
        missing piece - collision detection!
      Big Game Collision 2_instruction: |-
        To move the player up and down, we'll need
        to use a conditional block to figure out which key is pressed and respond
        accordingly. Computers read keypresses as numeric key codes - the up arrow
        is 38 and the down arrow is 40. You can lookup other key codes in your student
        workbook. Edit the 'update-player' function so that if moves the player
        up when the up arrow is pressed, or down when the down arrow is pressed.
      Big Game Collision 3_instruction: |-
        Use the Distance Formula, so the distance
        function returns the distance between the player's center coordinates (px,
        py) and another sprite's center coordinates (cx, cy).
      Big Game Collision 4_instruction: |-
        Complete the collide? function so that it
        returns true if the distance between two points is less than 100 pixels apart.
      Big Game Complete_instruction: 在 CS 代數 - Big Game 專案的完成範例
      Big Game Final_instruction: |-
        You made it! At this point your game should be
        fully functioning, take some time to enjoy your new game and make any final
        tweaks to it. When you're happy with the final product, click Finish and
        you'll have an opportunity to share a link to your game. Good work!
      Big Game Player 1_instruction: |-
        We're getting really close to a finished game!
        Last time you worked on your game, you used booleans to make your Target and
        Danger return to the screen once they've left. Click Run to see how your
        game looks right now, and then we'll get to making your Player move up and
        down.
      Big Game Player 2_instruction: |-
        Edit the update-player function so the player
        moves up when the up arrow (keycode 38) is pressed, and moves down (keycode
        40) when the down arrow is pressed.
      Big Game Testing_instruction: 在 CS 代數 - Big Game 專案的完成範例
      Big Game Vars 1 (copy 1)_instruction: |-
        Let's get started on your Big Game!
        Here you'll see a whole bunch of placeholder code that you'll eventually
        replace with your own, but for now we're only going to worry about defining
        variables. Click "Run" to see what the game looks like with the default
        values.
      Big Game Vars 1_instruction: |-
        Let's get started on your Big Game! Here you'll
        see a whole bunch of placeholder code that you'll eventually replace with
        your own, but for now we're only going to worry about defining variables.
        Click "Run" to see what the game looks like with the default values.
      Big Game Vars 2 (copy 1)_instruction: |-
        The first step to making this game your
        own is to give it a good Title. Click edit on the 'title' and 'subtitle'
        variables and change them to something new.
      Big Game Vars 2_instruction: |-
        The first step to making this game your own is
        to give it a good Title. Click edit on the title and subtitle variables and
        change them to something new.
      Big Game Vars 3 (copy 1)_instruction: |-
        Now let's set the background for your
        new game. Edit the 'bg' variable and select a new background Image from
        the dropdown.
      Big Game Vars 3_instruction: |-
        Now let's set the background for your new game.
        Edit the bg variable and select a new background Image from the dropdown.
      Big Game Vars 4 (copy 1)_instruction: |-
        Awesome, now you can update the variables
        for your Player, Target, and Danger. Feel free to play with all of the variables
        at this point to make your game look like you'd like it to. Click 'finish'
        when you're done.
      Big Game Vars 4_instruction: |-
        Awesome! Now you can update the variables for
        your Player, Target, and Danger. Feel free to play with all of the variables
        at this point to make your game look like you'd like it to. Click "Finish"
        when you're done.
      Brad Spooky House Copy_instruction: |-
        Freeplay: Here are the functions you've
        written, and some more for you to play with. Draw something awesome! Play
        with the pen width to see how different your drawings look!
      Brad Spooky House_instruction: |-
        Freeplay: Here are the functions you've written,
        and some more for you to play with. Draw something awesome! Play with the
        pen width to see how different your drawings look!
      Building a Foundation Assessment_instruction: |-
        Build a three level pyramid,
        there are no other directions, so just play with the pieces until you get
        it!
      Busy Bee 2_instruction: 這隻蜜蜂的工作也太多了吧！你注意到有甚麼模式可以用來簡化你的程式嗎？
      Busy Bee_instruction: 這隻蜜蜂的工作也太多了吧！你注意到有甚麼模式可以用來簡化你的程式嗎？
      C3-Farmer While Loops 1_instruction: |-
        Move me to the hole and fill it with
        two shovelfuls of dirt, using the "fill" block.
      C3-Farmer While Loops 2_instruction: |-
        Move me to the pile of dirt and remove
        it with 5 shovel scoops, using the 'remove' block.
      C3-Farmer While Loops 3_instruction: |-
        Move me to the pile and remove all of
        it, then move to the hole and fill it completely.  Hint:  Use as few blocks
        as possible.
      C3-Farmer While Loops 4_instruction: |-
        Wow, I found a really deep hole! I don't
        know how many shovelfuls of dirt it needs.  Can you write a program that fills
        it until the ground is even?  Hint:  Try using the while loop this time.
      C3-Farmer While Loops 5_instruction: |-
        Wow, now there are two deep holes! Can
        you write a program that fills them both until the ground is even?
      C3-Farmer While Loops 6_instruction: |-
        Wow, now there is a large pile of dirt!
        Can you write a program that removes all of it so the ground is even?
      C3-Farmer While Loops 7_instruction: |-
        Wow, now there are three piles of dirt!
        Can you write a program that removes each of them until the ground is even?
      C3-Farmer While Loops 8_instruction: " 有一個非常深的洞，還有一個非常大的土堆。需要幾鏟土來把地面變平整？提示:：填土和挖土都用了「當…時」迴圈。"
      C3-Farmer While Loops Assessment 1_instruction: |-
        There are a lot of holes and
        piles.  Help me to fill and remove them to make the ground flat.
      CSD Hackathon Pt 1_instruction: "（點擊觀看完整說明）"
      CSD Hackathon Pt 2_instruction: "（點擊觀看完整說明）"
      CSD Hackathon Week 1_instruction: "（點擊觀看完整說明）"
      CSD Hackathon Week 2_instruction: "（點擊觀看完整說明）"
      CSD U3 Background Discuss_instruction: |-
        Here's a program that looks pretty
        similar to what you've been writing, but may behave quite differently. You'll
        want to stop and discuss with the class before moving on.
      CSD U3 Background Experiment_instruction: |-
        Here's a program that looks pretty
        similar to what you've been writing, but may behave quite differently. You'll
        want to stop and discuss with the class before moving on.
      CSD U3 Boolean Modify_instruction: |-
        Modify the code so that all of the console.log
        commands print true
      CSD U3 Boolean Modify_2018_instruction: |-
        Modify the code so that all of the
        console.log commands print true
      CSD U3 Boolean Predict_instruction: |-
        What do you think this code will do when
        it is run? Predict what each console.log() command will print, then run the
        program to check your predictions.
      CSD U3 Boolean Predict_2018_instruction: |-
        What do you think this code will
        do when it is run? Predict what each console.log() command will print, then
        run the program to check your predictions.
      CSD U3 Draw Loop Discuss_instruction: |-
        Here's a program that looks pretty
        similar to what you've been writing, but may behave quite differently. You'll
        want to stop and discuss with the class before moving on.
      CSD U3 Draw Loop Experiment_instruction: |-
        Try using some of the other shape
        functions you've learned in the draw loop. What happens when you use randomNumber()
        to generate some of the inputs?You'll want to stop and discuss with the class
        before moving on.
      CSD U3 Expressions calculator_instruction: |-
        Add the numbers 1 through 10. Multiply
        the numbers 1 through 10. Check your answers with a neighbor.
      CSD U3 Frame Rate_instruction: Slow down Gamelab Gary's animation with frameRate()
      CSD U3 Keypress Boolean-2018_instruction: |-
        Modify the code so that all of the
        console.log commands print true
      CSD U3 Keypress Boolean_instruction: |-
        Modify the code so that all of the console.log
        commands print true
      CSD U3 Keypress Boolean_2018_instruction: |-
        Modify the code so that all of the
        console.log commands print true
      CSD U3 Keypress Watchers_instruction: |-
        Modify the code so that all of the console.log
        commands print true
      CSD U3 Keypress Watchers_2018_instruction: |-
        Modify the code so that all of
        the console.log commands print true
      CSD U3 L5 Freeplay_instruction: |-
        Change the value of petalSize multiple times.
        How does it change your drawing?
      CSD U3 L5 Freeplay_2018_instruction: |-
        Change the value of petalSize multiple
        times. How does it change your drawing?
      CSD U3 Mouse Input Bee 2_instruction: Do this
      CSD U3 Mouse Input Bee 2_2018_instruction: Do this
      CSD U3 Random Animation_instruction: |-
        Use randomNumber() to animate Gary's
        mouth.
      CSD U3 Random Choice_instruction: |-
        Use the randomNumber() block to generate
        either 0 or 1
      CSD U3 Random Color_instruction: |-
        Could you use randomNumber() to pick random
        colors as well? Try setting one or more of the channels in the rgb block with
        a random number. What should the maximum value be?
      CSD U3 Random Intro_instruction: |-
        What do you think this code will do when
        it is run? Make a prediction, then run this code 5 - 10 times, recording the
        output each time. Share your results with your neighbor.
      CSD U3 Random Min Max_instruction: |-
        Using console.log() write a program that
        randomly returns a number in a range you define.
      CSD U3 Random Width Height_instruction: |-
        Pick a shape block and use calls to
        randomNumber() in place of one or more of the parameters. Maker sure you run
        it a few times so you can see the effect of randomization.
      CSD U3 Simple Drawing - Animation 2_instruction: |-
        Use randomNumber() on the
        x position and width of your cloud ellipses to introduce a bit of animation.
      CSD U3 Simple Drawing - Animation_instruction: |-
        Use randomNumber() on the x
        position and width of your cloud ellipses to introduce a bit of animation.
      CSD U3 Simple Drawing - Background_instruction: |-
        Put all of your code into
        a draw() loop and then add set the background to blue with the background()
        block.
      CSD U3 Simple Drawing - Personal Animation_instruction: DO This
      CSD U3 Sprites intro sprites_instruction: Do This
      CSD U3 Sprites intro sprites_2018_instruction: Do This
      CSD U3 Variable Arithmetic pt2_instruction: |-
        Predict: What two numbers will
        be displayed in the console?
      CSD U3 Variable Arithmetic_instruction: |-
        Change the value "size" initialized
        to make a larger square.
      CSD U3 Variable Incrementation pt2_instruction: |-
        Predict: What two numbers
        will be displayed in the console?
      CSD U3 Variable Incrementation_instruction: |-
        Predict: What two numbers will
        be displayed in the console?
      CSD U3 Variables CHALLENGE gamelab gary_instruction: |-
        Use variables to animate
        Game Lab Gary
      CSD U3 Variables Initialize_instruction: |-
        Predict: What will get displayed
        in the console?
      CSD U3 Variables Intro_instruction: |
        Create your own variable, give it a value,
        and display that value in the console.
      CSD U3 Variables Random_instruction: |-
        Predict: What will get displayed in the
        console?
      CSD U3 Variables Reassign pt2_instruction: |-
        Create and assign a new variable
        in a single line.
      CSD U3 Variables Reassign_instruction: |-
        Predict: What will get displayed in
        the console?
      CSD U3 Variables Square Random Loop_instruction: |-
        Test your predictions from
        the last level.
      CSD U3 Variables Square Random_instruction: |-
        Change the value "size" initialized
        to make a larger square.
      CSD U3 Variables Square_instruction: |-
        Change the value "size" initialized
        to make a larger square.
      CSD U3 Variables TEMPLATE square_instruction: 改變花瓣尺寸的值數次，你的圖案會有什麼變化呢？
      CSD U3 Variables change circle size_instruction: |-
        Change the value of petalSize
        multiple times. How does it change your drawing?
      CSD U3 Variables change circle size_2018_instruction: |-
        Change the value of
        petalSize multiple times. How does it change your drawing?
      CSD U3 Variables create and assign_instruction: |-
        Create and assign size in
        a single line of code.
      CSD U3 Variables draw loop newVars_instruction: |-
        Extend this project to create
        your own random art visualization with variables.
      CSD U3 Variables draw loop rgb_instruction: |-
        Assign the variables x1 and y1
        random values inside the draw loop and use them to control where the square
        is drawn.
      CSD U3 Variables draw loop xy_instruction: |-
        Assign the variables x1 and y1
        random values inside the draw loop and use them to control where the square
        is drawn.
      CSD U3 Variables eyeBrows_instruction: |-
        Predict what will happen when you move
        the assignment of eyeSize inside the draw loop. Then try it out
      CSD U3 Variables make a big square_instruction: |-
        Change the value of size multiple
        times. How does it change your drawing?
      CSD U3 Variables make a square_instruction: |-
        Change the value of size multiple
        times. How does it change your drawing?
      CSD U3 Variables multiple assignments_instruction: |-
        Change the value of petalSize
        multiple times. How does it change your drawing?
      CSD U3 Variables naming rules v2-2018_instruction: |-
        Change the value of petalSize
        multiple times. How does it change your drawing?
      CSD U3 Variables naming rules v2_instruction: |-
        Change the value of petalSize
        multiple times. How does it change your drawing?
      CSD U3 Variables naming rules v2_2018_instruction: |-
        Change the value of petalSize
        multiple times. How does it change your drawing?
      CSD U3 Variables naming rules_instruction: |-
        Change the value of petalSize multiple
        times. How does it change your drawing?
      CSD U3 Variables random assignment_instruction: |-
        Change the value of petalSize
        multiple times. How does it change your drawing?
      CSD U3 Variables random draw loop_instruction: |-
        Predict what will happen when
        you move the assignment of eyeSize inside the draw loop. Then try it out
      CSD U3 Variables random drawing exemplar_instruction: |-
        Check out this example
        randomized drawing.
      CSD U3 Variables random with assignment_instruction: |-
        Change the value of petalSize
        multiple times. How does it change your drawing?
      CSD U3 Variables random with assignment_2018_instruction: |-
        Change the value
        of petalSize multiple times. How does it change your drawing?
      CSD U3 Variables use value rect_instruction: |-
        Predict: What will get displayed
        in the console?
      CSD U3 Variables write_instruction: |-
        Use the write block to display the value
        of size
      CSD U3 Variables2 expressions in commands_instruction: |-
        Use expressions inside
        a drawing command
      CSD U3 Variables2 expressions in variables_instruction: |-
        Assign the value of
        each expression to a variable and console.log that variable.
      CSD U3 Variables2 expressions_instruction: |-
        Use console.log to display the
        results of each expression. Then create your own.
      CSD U4 - Events Template_instruction: 添加一個大的紅色按鈕到設計模式畫面上。（點擊觀看完整說明）
      CSD U5 black white images pixelation 2_instruction: 畫一個笑臉(點擊這裡瀏覽圖案)
      CSD U5 black white images pixelation 3_instruction: 修改寬度和高度的滑桿以找到圖像（點擊這裡查看更多）
      CSD U5 black white images pixelation 4_instruction: |-
        Add eyebrows to the smiley
        face (click here to see the image)
      CSD U5 black white images pixelation 5_instruction: 畫你喜歡的任何東西
      CSD U5 black white images pixelation_instruction: 利用 0 和 1 來完成這個 X 圖形。
      CSD U6 params modify clouds_instruction: |-
        # Clouds\r
        \r
        This program makes
        the clouds move when you blow on the sound sensor, but it's not finished.\r
        \r
        #
        Do This\r
        * Create a new function `moveCloud(name)` that will move any cloud.\r
          *
        (Hint: you will use almost all the same code as the `moveCloud0` function)\r
        *
        Call your new `moveCloud(name)` function inside the event block, once for
        each cloud name.\r
         * (Hint: this is similar to how the `loopCloud(name)`
        function is called many times.
      CSD U6 params modify clouds_2018_instruction: |-
        # Clouds\r
        \r
        This program
        makes the clouds move when you blow on the sound sensor, but it's not finished.\r
        \r
        #
        Do This\r
        * Create a new function `moveCloud(name)` that will move any cloud.\r
          *
        (Hint: you will use almost all the same code as the `moveCloud0` function)\r
        *
        Call your new `moveCloud(name)` function inside the event block, once for
        each cloud name.\r
         * (Hint: this is similar to how the `loopCloud(name)`
        function is called many times.
      CSD U6 params modify planes_instruction: |-
        # Multi-plane Controller\r
        \r
        This
        program moves the three planes using the board accelerometer and the on-screen
        check boxes.  Right now, only the red plane works.\r
        \r
        # Do This\r
        * Create
        a new `movePlane(name)` function that can move any plane.\r
        * Call the `movePlane(name)`
        function inside the event block, such that it only moves when its checkbox
        is checked.\r
        \r
        _Challenge: Right now the planes move way too fast.  Can
        you figure out how to change the code so they move more slowly?_
      CSD U6 params modify planes_2018_instruction: |-
        # Multi-plane Controller\r
        \r
        This
        program moves the three planes using the board accelerometer and the on-screen
        check boxes.  Right now, only the red plane works.\r
        \r
        # Do This\r
        * Create
        a new `movePlane(name)` function that can move any plane.\r
        * Call the `movePlane(name)`
        function inside the event block, such that it only moves when its checkbox
        is checked.\r
        \r
        _Challenge: Right now the planes move way too fast.  Can
        you figure out how to change the code so they move more slowly?_
      CSDU4 - AppLab - 1_instruction: |-
        Read the documentation for penColor() and
        penWidth() before using them to draw the blue square.
      CSDU4 - AppLab - 2_instruction: |-
        Write a program that acts as a simple calculator.
        (click to see full instructions)
      CSDU4 - AppLab - 3_instruction: |-
        Use console to check the ending value of num.
        (Click to see full instructions)
      CSDU4 - AppLab - 4_instruction: " 使用偵錯指令以列出在第 6 點之前的清單。（點擊查看完整說明）"
      CSDU4 - Design Mode - 1_instruction: 添加一個按鈕，讓你在點擊它時，烏龜能夠移動。（點擊觀看完整說明）
      CSDU4 - Design Mode - 10_instruction: |-
        Introducing the setPosition command!
        Replace the moveTo in the button-click event handler to use setPosition to
        move the button itself to a random location when it's clicked.
      CSDU4 - Design Mode - 11_instruction: |-
        Experiment with different event types
        and select the one that you think is best. (Click to see full instructions)
      CSDU4 - Design Mode - 12_instruction: |-
        Use the textLabel command to replace
        the button in your program with a text label. (Click to see full instructions)
      CSDU4 - Design Mode - 16_instruction: |-
        Add an event handler for the button
        using the "Insert and show" link in the Design Mode Events tab. (Click to
        see full instructions).
      CSDU4 - Design Mode - 17_instruction: |-
        Update the ID names and `console.log`
        messages to match the correct button. (Click to see full instructions.)
      CSDU4 - Design Mode - 18_instruction: |-
        Fix the layout of the bullseye game.
        (Click to see full instructions)
      CSDU4 - Design Mode - 2_instruction: |-
        Run a program with two buttons that have
        the same id to see the warning message in the console. Change the ids to make
        the program run without getting a warning message.
      CSDU4 - Design Mode - 24_instruction: |-
        Add an Text Input box for the name and
        age. (Click to see full instructions)
      CSDU4 - Design Mode - 25_instruction: |-
        Add an event handler to the Submit button
        so that when the button is clicked it will display the name entered in the
        text box to the console.  Use getText to get the value out of the text box.
        (Click to see full instructions)
      CSDU4 - Design Mode - 26_instruction: |-
        Save the age and name of the user in
        variables (Click to see full instructions)
      CSDU4 - Design Mode - 27_instruction: |-
        Output a message to the 'textArea'
        (Click to see full instructions)
      CSDU4 - Design Mode - 28_instruction: |-
        Write a greeting to the user when they
        hit 'enter' in the text input, using the 'change' event. (Click to see
        full instructions)
      CSDU4 - Design Mode - 29_instruction: 添加一個下拉式清單供選擇，取代 promptNum（點擊觀看完整說明）
      CSDU4 - Design Mode - 30_instruction: |-
        Show different die images for the random
        number generated. (Click to see full instructions)
      CSDU4 - Design Mode - 31_instruction: |-
        Set up an event handler to respond to
        keypress events, and display event.key in the console. Hit keys on the keyboard
        to see what happens. (Click to see full instructions)
      CSDU4 - Design Mode - 32_instruction: |-
        Try out the keyup and keydown events
        to see how they are different from keypress. (Click to see full instructions)
      CSDU4 - Design Mode - 33_instruction: |-
        Change the code so the sound will only
        play when the up arrow is pressed. (Click to see full instructions)
      CSDU4 - Design Mode - 4_instruction: |-
        Improve the button by choosing a descriptive
        and meaningful ID. (Click to see full instructions)
      CSDU4 - Design Mode - 5_instruction: |-
        Debug the program by verifying your IDs
        are being referenced properly. (Click to see full instructions)
      CSDU4 - Design Mode - 6_instruction: |-
        Debug the program by properly ordering
        your button commands and event handlers. (Click to see full instructions)
      CSDU4 - Design Mode - 7_instruction: |-
        Debug the program by fixing the logical
        error within the program. (Click to see full instructions)
      CSDU4 - Design Mode - 8_instruction: |-
        Move the button to the middle of the
        screen. (Click to see full instructions)
      CSDU4 nameAgeTemplate_instruction: 添加一個輸入姓名、年齡的文字方塊。（點擊觀看完整說明）
      CSDU6 - Arrays - expressionsAsIndexes_instruction: |-
        Write a program that displays
        a randomly chosen color from the array. (Click to see full instructions)
      CSDU6 - Arrays - indexPractice_instruction: |-
        Write the contents of the array
        to the screen in numerical order. (Click to see full instructions)
      CSDU6 - Arrays - length_instruction: |-
        Use list.length to determine the length
        of each array. (Click to see full instructions)
      CSDU6 - Arrays - lengthMinus1_instruction: |-
        Use list.length - 1 to log the
        last item in the array to the console. (Click to see full instructions)
      CSDU6 - for loop - color buttons with for_instruction: 將陣列的內容依序寫到畫面上。（點擊查看完整說明）
      CSDU6 - for loop - color buttons_instruction: |-
        Write the contents of the array
        to the screen in numerical order. (Click to see full instructions)
      CSDU6 - for loop - why for_instruction: |-
        Write the contents of the array to
        the screen in numerical order. (Click to see full instructions)
      CSDU6 arrays rainbow_instruction: |-
        Write the contents of the array to the screen
        in numerical order. (Click to see full instructions)
      CSDU6 arrays random_instruction: |-
        Write a program that displays a randomly
        chosen color from the array. (Click to see full instructions)
      CSDU6 arrays select icons_instruction: |-
        Write a program that displays a randomly
        chosen color from the array. (Click to see full instructions)
      CSDU6 arrays select rainbow_instruction: |-
        Write the contents of the array to
        the screen in numerical order. (Click to see full instructions)
      CSDU6 arrays select rainbow_2018_instruction: |-
        Write the contents of the array
        to the screen in numerical order. (Click to see full instructions)
      CSDU6 arrays select random_instruction: |-
        Write a program that displays a randomly
        chosen color from the array. (Click to see full instructions)
      CSDU6 arrays select random_2018_instruction: |-
        Write a program that displays
        a randomly chosen color from the array. (Click to see full instructions)
      CSDU6 arrays select variable_instruction: |-
        Write a program that displays a
        randomly chosen color from the array. (Click to see full instructions)
      CSDU6 arrays select variable_2018_instruction: |-
        Write a program that displays
        a randomly chosen color from the array. (Click to see full instructions)
      CSDU6 arrays variable_instruction: |-
        Write a program that displays a randomly
        chosen color from the array. (Click to see full instructions)
      CSP Data Unit - Counting Multiple Things_instruction: |-
        If you can count one
        thing you can count multiple things\r
        \r
        Find out how many people like something
        other than dogs and cats\r
        \r
        Count dogs\r
        Count cats\r
        Count total\r
        Do
        the math\r
        \r
        blank/ blank toal\r
        \r
        Can also use this to find percents
        from this\r
        \r
        x% are dog lovers
      CSP Data Unit -Counting Records - Easy Way_instruction: |
        ReadRecords with specific
        criteria \r
        find the length of an array\r
      CSP Data Unit -Counting Records - Hard Way_instruction: |
        \r
        1. ReadRecords
        for all records\r
        2. Way to loop through and count\r
      CSP U4 - JSON Object Intro - Bad Way_instruction: |-
        Trigger both the keyboard
        and mouse event and examine the event objects displayed in the console. Why
        might an object be the best way to store this information? (Click to see full
        instructions)
      CSP U4 - JSON Object Intro - Good Way_instruction: "Create an object with at\nleast
        5 values including at least one string and one number. (Click to see\nfull
        instructions) "
      CSP U4 - Objects - createObject_instruction: "Create an object with at least\n5
        values including at least one string and one number. (Click to see full\ninstructions) "
      CSP student contact info_instruction: 請輸入你的電子信箱。
      CSPU5 Add Screens to Chaser Game_instruction: |-
        Recreate the game from the "Chaser
        Game" with a Welcome Screen and Game Over Screen. (Click to see full instructions.)
      CSPU5 Add a 2nd Screen_instruction: |-
        Make a 2 screen app with a black screen
        and a white screen. (Click to see detailed instructions)
      CSPU5 Add full screen image to bg of chaser game_instruction: |-
        Recreate the
        game from the "Chaser Game" with a Welcome Screen and Game Over Screen.
        (Click to see full instructions.)
      CSPU5 Add game over screen_instruction: |-
        Recreate the game from the "Chaser
        Game" with a Welcome Screen and Game Over Screen. (Click to see full instructions.)
      CSPU5 Add onEvent from Design Mode_instruction: |-
        Add an event handler for the
        button using the "Insert and show" link in the Design Mode Events tab. (Click
        to see full instructions).
      CSPU5 Add welcome screen to chaser game_instruction: |-
        Recreate the game from
        the "Chaser Game" with a Welcome Screen and Game Over Screen. (Click to
        see full instructions.)
      CSPU5 Adding Screens Template_instruction: |-
        Make a 2 screen app with a black
        screen and a white screen. (Click to see detailed instructions)
      CSPU5 Debugging Overlapping Objects and Screen Events_instruction: |-
        Recreate
        the "Chaser Game" from the last lesson using Design Mode. (Click to see
        full instructions.)
      CSPU5 First Time Console.log_instruction: 添加 3 個控制紀錄訊息，並測試將它們輸出。（點擊觀看完整說明）
      CSPU5 Layering and Deleting in Design Mode_instruction: |-
        Fix the layout of
        the bullseye game. (Click to see full instructions)
      CSPU5 Project - Multi Screen App_instruction: |-
        Create your multi-screen app.
        (Click to see full instructions.)
      CSPU5 Use Console.log to update IDs_instruction: |-
        Update the ID names and `console.log`
        messages to match the correct button. (Click to see full instructions.)
      CSPU5 Use setScreen for first time_instruction: |-
        Make a 2 screen app which
        can switch back and forth between a black screen and a white screen using
        buttons. (Click to see detailed instructions.)
      CSPU5_AddImageToChaserGame_instruction: |-
        Introducing the setPosition command!
        Replace the moveTo in the button-click event handler to use setPosition to
        move the button itself to a random location when it's clicked.
      CSPU5_AddImage_andMakeChaserGame_instruction: |-
        Introducing the setPosition
        command! Replace the moveTo in the button-click event handler to use setPosition
        to move the button itself to a random location when it's clicked.
      CSPU5_AddLabelToChaserGame_instruction: |-
        Introducing the setPosition command!
        Replace the moveTo in the button-click event handler to use setPosition to
        move the button itself to a random location when it's clicked.
      CSPU5_Debugging predict unexpected behavior - two onEvents to one ID_instruction: |-
        Predict
        what will happen. Once you've made a prediction, run the code to see what
        happens. (Click to see full instructions)
      CSPU5_FinalizeChaserGame_instruction: |-
        Introducing the setPosition command!
        Replace the moveTo in the button-click event handler to use setPosition to
        move the button itself to a random location when it's clicked.
      CSPU5_Project - Multi Screen App_instruction: |-
        Create your multi-screen app.
        (Click to see full instructions.)
      CSPU5_U3 - Arrays - Demo App_instruction: |-
        Use the "My Favorite Things" app.
        How might this app be making use of an array? (Click to see full instructions)
      CSPU5_U3 - Arrays - appendItem_instruction: |-
        Create an array of odd numbers
        1-11 by using appendItem. (Click to see full instructions)
      CSPU5_U3 - Arrays - assignment_instruction: |-
        Use indexes to change the values
        in this array from 1 to 0. (Click to see full instructions)
      CSPU5_U3 - Arrays - assignment2_instruction: |-
        Calculate the sum of three values
        stored in an array. (Click to see full instructions)
      CSPU5_U3 - Arrays - assignment3_instruction: |-
        Increase the value of each value
        in the randomly generated array by 1. (Click to see full instructions)
      CSPU5_U3 - Arrays - createFirstArray_instruction: |-
        Create an array of the even
        numbers from 0 to 10 and display its contents with console.log. (Click to
        see full instructions)
      CSPU5_U3 - Arrays - expressionsAsIndexes_instruction: |-
        Write a program that
        displays a randomly chosen color from the array. (Click to see full instructions)
      CSPU5_U3 - Arrays - favThings Counting Variable_instruction: |-
        Create a global
        variable for the current index and use it to display the first item in the
        array. (Click to see full instructions)
      CSPU5_U3 - Arrays - favThings Next_instruction: |-
        Write code that allows the
        user to move forward through your list by clicking the "Next" button. (Click
        to see full instructions)
      CSPU5_U3 - Arrays - favThings Prev_instruction: |-
        Write code that allows the
        user to move backward through your list by clicking the "Last" button. (Click
        to see full instructions)
      CSPU5_U3 - Arrays - favThings addItem_instruction: |-
        Write code that allows
        a user to add their own favorite things to the list. (Click to see full instructions)
      CSPU5_U3 - Arrays - favThings bounds_instruction: |-
        Add if statements to your
        event handlers that prevent the global index from going out of bounds. (Click
        to see full instructions)
      CSPU5_U3 - Arrays - favThings createArray_instruction: |-
        Create an array of
        words describing your favorite things. (Click to see full instructions)
      CSPU5_U3 - Arrays - favThings firstOutput_instruction: |-
        Use setText to display
        the first item in the array. (Click to see full instructions)
      CSPU5_U3 - Arrays - favThings giveIDs_instruction: |-
        Give your UI elements descriptive
        and meaningful IDs. (Click to see full instructions)
      CSPU5_U3 - Arrays - favThings keepPlaying_instruction: |-
        Make any other improvements
        you want! (Click to see full instructions)
      CSPU5_U3 - Arrays - indexPractice_instruction: |-
        Write the contents of the array
        to the screen in numerical order. (Click to see full instructions)
      CSPU5_U3 - Arrays - insertingItems_instruction: |-
        Insert items into an array
        to form a complete sentence. (Click to see full instructions)
      CSPU5_U3 - Arrays - insertionErrors_instruction: |-
        Run each command that references
        indexes that are out of bounds and observe the results. (Click to see full
        instructions)
      CSPU5_U3 - Arrays - introIndex_instruction: |-
        Display the first and last element
        in the array. Display the number 5 from the array. (Click to see full instructions)
      CSPU5_U3 - Arrays - length_instruction: |-
        Use list.length to determine the length
        of each array. (Click to see full instructions)
      CSPU5_U3 - Arrays - lengthMinus1_instruction: |-
        Use list.length - 1 to log the
        last item in the array to the console. (Click to see full instructions)
      CSPU5_U3 - Arrays - remove_instruction: |-
        Remove items from an array to form
        a complete sentence. (Click to see full instructions)
      CSPU5_U3 - Arrays - stringsInArrays_instruction: |-
        Write a sentence word by
        word by adding strings to an array. (Click to see full instructions)
      CSPU5_U3 - Canvas - 200dots_instruction: 添加一個迴圈到程式，以在畫布上畫出 200 個黑點。（點擊觀看完整說明）
      CSPU5_U3 - Canvas - One Dot sprayPaint_instruction: |-
        Write code that redraws
        your image using a dot whose x and y locations use offsetX and offsetY with
        a small random value added. (Click to see full instructions)
      CSPU5_U3 - Canvas - appendToArray_instruction: |-
        Create an array to store each
        event parameter. Append each event parameter to this array within your event
        handler. (Click to see full instructions)
      CSPU5_U3 - Canvas - changeToMouseMove_instruction: |-
        Change your program so
        that dots are drawn at the location of the mouse as the user moves the mouse
        on the canvas. (Click to see full instructions)
      CSPU5_U3 - Canvas - clickToAdd_instruction: |-
        Change your program so that dots
        are added to the canvas when the user clicks on it. (Click to see full instructions)
      CSPU5_U3 - Canvas - delete_instruction: |-
        Create a button that deletes the drawing
        by clearing the canvas and removing all stored values. (Click to see full
        instructions)
      CSPU5_U3 - Canvas - draw at click point_instruction: |-
        Change your program so
        that dots are drawn at the location of the mouse click. (Click to see full
        instructions)
      CSPU5_U3 - Canvas - freePlay_instruction: |-
        Extend the functionality of one
        of the effects, or create an entirely new one of your own. (Click to see full
        instructions)
      CSPU5_U3 - Canvas - introCanvas_instruction: 添加一個畫布（canvas）到你的 app 上，並將它設定成啟用。接著在你的畫布上新增一個大的圓點。（點擊觀看完整說明）
      CSPU5_U3 - Canvas - movementFunction fix Orig_instruction: |-
        Modify the "Original"
        button event handler so that it takes the movement of the mouse into account.
        (Click to see full instructions)
      CSPU5_U3 - Canvas - movementFunction_instruction: |-
        Write a function that takes
        the movement of the mouse as input and generates a line width as output. (Click
        to see full instructions)
      CSPU5_U3 - Canvas - redrawOriginal_instruction: |-
        Write a function that processes
        your array, redrawing the dots as they originally appeared. (Click to see
        full instructions)
      CSPU5_U3 - Canvas - redrawRandom_instruction: |-
        Set up a button and event handler
        for the random function. (Click to see full instructions)
      CSPU5_U3 - Canvas - redrawRandom2_instruction: |-
        Write a function that processes
        your array, redrawing every dot with a random size. (Click to see full instructions)
      CSPU5_U3 - Canvas - shiftKey_instruction: |-
        Add an if statement to your event
        handler so dots are only drawn when the shift key is pressed. (Click to see
        full instructions)
      CSPU5_U3 - Canvas - sketch_instruction: |-
        Write code that redraws your image
        using a sketch effect. (Click to see full instructions)
      CSPU5_U3 - Canvas - sprayPaint_instruction: |-
        Update the spray paint code so
        that it redraws your image using multiple random dots instead of using a nested
        for loop. (Click to see full instructions)
      CSPU5_U3 - Canvas - transparentDots_instruction: |-
        Change the colors of your
        dots so they have a fully transparent stroke and partially transparent fill.
        (Click to see full instructions)
      CSPU5_U3 - Canvas - usingOffsetXY_instruction: 添加一個控制紀錄指令到你的事件處理函式裡，使用它來顯示事件參數，同時在上面點擊能觀看事件參數的內容。（點擊觀看完整說明）
      CSPU5_U3 - Conditional Basics - 6_instruction: 添加一個「設定文字」到如果陳述式的「不對，再猜猜。」之後。（點擊觀看完整說明）
      CSPU5_U3 - Conditionals - Combine AND OR Simple_instruction: |-
        Write an if statement
        that uses AND and OR to display "Sleep in!" if it's the weekend and the
        user is a teenager. (Click to see full instructions.
      CSPU5_U3 - Conditionals - Combine AND OR and NOT_instruction: |-
        Write an if
        statement that uses AND and OR to display "Time to go to school!" if it's
        not the weekend and the user is under 18. (Click to see full instructions.)
      CSPU5_U3 - Conditionals - Simple AND_instruction: |-
        Write an if statement that
        uses AND to display "You are a teenager." if the user enters an age between
        13 and 19. (Click to see full instructions)
      CSPU5_U3 - Conditionals - Simple OR_instruction: |-
        Write an if statement that
        uses OR to display "It's the weekend!" if the user enters a weekend day
        at the prompt. (Click to see full instructions)
      CSPU5_U3 - Design Mode - Console Log_instruction: |-
        Update the ID names and
        `console.log` messages to match the correct button. (Click to see full instructions.)
      CSPU5_U3 - Design Mode - Layers and Delete_instruction: |-
        Fix the layout of
        the bullseye game. (Click to see full instructions)
      CSPU5_U3 - Design Mode - Multi Screens 2_instruction: |-
        Make a 2 screen app
        which can switch back and forth between a black screen and a white screen
        using buttons. (Click to see detailed instructions.)
      CSPU5_U3 - Design Mode - Multi Screens_instruction: |-
        Make a 2 screen app with
        a black screen and a white screen. (Click to see detailed instructions)
      CSPU5_U3 - Design Mode - WTF Console Log_instruction: 添加 3 個控制紀錄訊息，並測試將它們輸出。（點擊觀看完整說明）
      CSPU5_U3 - Design Mode -Recreate Beyond Buttons_instruction: |-
        Recreate the
        game from the "Chaser Game" with a Welcome Screen and Game Over Screen.
        (Click to see full instructions.)
      CSPU5_U3 - Design Mode 1_instruction: 添加一個大的紅色按鈕到設計模式畫面上。（點擊觀看完整說明）
      CSPU5_U3 - Dice - Dropdown and Score_instruction: |-
        Add guess and score to the
        Dice Game (Click to see full instructions)
      CSPU5_U3 - Dice - Dropdown with Strings_instruction: 添加一個下拉式選單來選擇難度，並將所選的結果輸出到控制台。（點擊觀看完整說明）
      CSPU5_U3 - Dice - If_instruction: |-
        Show different die images for the random
        number generated. (Click to see full instructions)
      CSPU5_U3 - Dice - Nested_instruction: |-
        Use nested if statements to make the
        scoring different for the different game levels. (Click to see full instructions)
      CSPU5_U3 - High Low - Debug_instruction: |-
        Debug the order of the conditionals
        so that it will actually tell the user when their guess is close. (Click to
        see full instructions)
      CSPU5_U3 - High Low - Dropdown_instruction: 添加一個下拉式清單供選擇，取代 promptNum（點擊觀看完整說明）
      CSPU5_U3 - High Low - Else if_instruction: |-
        Add an else-if statement in order
        to tell the user if their guess is high or low instead of just wrong. (Click
        to see full instructions)
      CSPU5_U3 - High Low - Else_instruction: |
        Add an else statement so that the
        program will tell the user when they are right and when they are wrong. (Click
        to see full instructions)\r
      CSPU5_U3 - High Low - If_instruction: |-
        Add code to the if statement that indicates
        the user guessed the secret number. (Click to see full instructions)
      CSPU5_U3 - Keys - Add Image URLs_instruction: |-
        Add image URLs to your array.
        Replace the text area with an image and setText with setImageURL. Then test
        your app! (Click to see full instructions)
      CSPU5_U3 - Keys - Buttons and Keys_instruction: |-
        Have the program respond the
        same way for both clicking images on the screen and hitting the up and down
        keys on the keyboard. (Click to see full instructions)
      CSPU5_U3 - Keys - Demo App_instruction: |-
        Play with the image scroller. Press
        the left and right arrows to progress through the images.
      CSPU5_U3 - Keys - Final Image Scroller_instruction: |-
        Update the image scroller
        to respond to buttons and key presses. (Click to see full instructions)
      CSPU5_U3 - Keys - Functions_instruction: |-
        Write doUpArrow and doDownArrow functions
        and call the functions instead of duplicating the code. (Click to see full
        instructions)
      CSPU5_U3 - Keys - Key Up and Down_instruction: |-
        Try out the keyup and keydown
        events to see how they are different from keypress. (Click to see full instructions)
      CSPU5_U3 - Keys - Multiple Keys_instruction: |-
        Play a different sound when the
        down arrow is pressed. (Click to see full instructions)
      CSPU5_U3 - Loops -  Complex Condition_instruction: |-
        Change the boolean expression
        for the while loop so that it will stop when both dice are greater than or
        equal to 5. (Click to see full instructions)
      CSPU5_U3 - Loops - 1_instruction: |-
        Change the condition for the while loop
        to check if the variable num is less than 90. (Click to see full instructions)
      CSPU5_U3 - Loops - 10_instruction: |-
        Write a program that simulates the rolling
        of two dice. Roll the dice repeatedly until the sum of the dice is either
        7 or 11.
      CSPU5_U3 - Loops - 11_instruction: |-
        Fix the condition so that it keeps rolling
        the die as long as the value is not a 2 or a 3 instead of rolling infinitely.
        (Click to see full instructions)
      CSPU5_U3 - Loops - 12_instruction: |-
        Change the code so that it prints the string
        "Hi" 5 times. (Click to see full instructions)
      CSPU5_U3 - Loops - 14_instruction: |-
        Change the loop condition to prevent the
        infinite loop and stop counting once the count is past 30. (Click to see full
        instructions)
      CSPU5_U3 - Loops - 15_instruction: |-
        Count the number of times the sum of the
        dice is 12. (Click to see full instructions)
      CSPU5_U3 - Loops - 2_instruction: |-
        Try creating an infinite loop using !=,
        > and <. (Click to see full instructions)
      CSPU5_U3 - Loops - 3_instruction: |-
        Change the if statement to a while loop
        so the program will run until it rolls a 6. (Click to see full instructions)
      CSPU5_U3 - Loops - 4_instruction: " 使用偵錯指令以列出在第 6 點之前的清單。（點擊查看完整說明）"
      CSPU5_U3 - Loops - 5_instruction: |-
        Add code inside the while loop which will
        update the variable num so that the condition will eventually become false.
        (Click to see full instructions)
      CSPU5_U3 - Loops - 6_instruction: |-
        Fix the problem so the loop will run at
        least once. Change the initial value of num to a dummy value such as -1. (Click
        to see full instructions)
      CSPU5_U3 - Loops - 7_instruction: |-
        Without adding any lines of code, reorder
        the code so that it prints all the values of num. (Click to see full instructions)
      CSPU5_U3 - Loops - 8_instruction: |-
        Debug which number is not getting printed
        and add a write statement to display that value. (Click to see full instructions)
      CSPU5_U3 - Loops - 9_instruction: " 修改條件讓它持續轉動，只要每個都小於 3。（點擊觀看完整說明）"
      CSPU5_U3 - Loops - Minus Minus_instruction: |-
        Change the code to count down
        from 10 to 1. (Click to see full instructions)
      CSPU5_U3 - Loops - Plus Plus_instruction: |-
        Change the code to use count++ instead
        of count = count + 1.  (Click to see full instructions)
      CSPU5_U3 - Loops - Typing in Console_instruction: |-
        Use console to check the
        ending value of num. (Click to see full instructions)
      CSPU5_U3 - Loops - minus = operator_instruction: |-
        Update the code to use the
        -= operator to count from 30 down to 0 by 3's. (Click to see full instructions)
      CSPU5_U3 - Loops - plus and minus = operator_instruction: |-
        Update the code
        to use the += operator. (Click to see full instructions)
      CSPU5_U3 - Loops And Arrays - Add 5_instruction: 將陣列裡的所有數值都加 5（點擊觀看完整說明）
      CSPU5_U3 - Loops And Arrays - Counting Times_instruction: |-
        Count the number
        of times 5 appears in an array. (Click to see full instructions)
      CSPU5_U3 - Loops And Arrays - Divid by 2_instruction: |-
        Divide every value in
        the array by 2. (Click to see full instructions)
      CSPU5_U3 - Loops And Arrays - Find Min_instruction: |-
        Complete the findMinVal
        function to find and display the smallest value in an array  (Click to see
        full instructions)
      CSPU5_U3 - Loops And Arrays - General Search Param_instruction: 添加第二個參數到搜尋函式，作為要搜尋的值。（點擊觀看完整說明）
      CSPU5_U3 - Loops And Arrays - Intro For Loop_instruction: 添加一個 for 迴圈，裡頭帶有控制紀錄，並試試輸出
        3 次。（點擊觀看完整說明）
      CSPU5_U3 - Loops And Arrays - Linear Search_instruction: |-
        Visit every element
        in the array and display "true" if the value is a 5, and "false" otherwise.
        (Click to see full instructions)
      CSPU5_U3 - Loops And Arrays - Loop Array If_instruction: |-
        Use an if statement
        to only display the values in the array that are greater than 5. (Click to
        see full instructions)
      CSPU5_U3 - Loops And Arrays - Make it a Function - add list parameter_instruction: |-
        Create
        a function that takes a list parameter and prints if the list contains a 5.
        (Click to see full instructions)
      CSPU5_U3 - Loops And Arrays - Make it a Function_instruction: |-
        Move the code
        that searches the list for a 5 into a function called "search". (Click to
        see full instructions)
      CSPU5_U3 - Loops And Arrays - Print Array_instruction: |-
        Use a for loop to print
        out all the values in an array. (Click to see full instructions)
      CSPU5_U3 - Loops And Arrays - Printing Single True_instruction: |-
        Process the
        array and display a single "true" if the array contains a 5 or a single
        "false" if it does not.  (Click to see full instructions)
      CSPU5_U3 - Loops And Arrays - Search with Boolean Var_instruction: |-
        Make a
        boolean variable to use as a flag to keep track of whether there is a 5 in
        the array. (Click to see full instructions)
      CSPU5_U3 - Movie Bot - Multiple If Sequences_instruction: |-
        Add another set
        of if, else if, and else statements inside the question if statement to check
        for keywords for movie ratings (G, PG, PG-13, and R). (Click to see full instructions)
      CSPU5_U3 - Movie Bot - Nested Motivation_instruction: |-
        Add a separate set of
        if statements to check for a "?" in the input. (Click to see full instructions)
      CSPU5_U3 - Movie Bot - When Multiple If Statements_instruction: |-
        Add an if
        and else-if statement that checks for please and thank you. (Click to see
        full instructions)
      CSPU5_U3 - Movie Bot - toLowerCase_instruction: |-
        Use the toLowerCase command
        to change all user input into lowercase letters after they enter it. (Click
        to see full instructions)
      CSPU5_U3 - Practice Create Performance Task_instruction: |-
        Design and implement
        your practice Create Performance Task. (Click to see full instructions)
      CSPU5_U3 - Return Values - constrainTurtle_instruction: |-
        Use constrain in this
        simple app to keep the turtle from driving off the screen.  (Click to see
        full instructions)
      CSPU5_U3 - Return Values - debuggingConstrain_instruction: |-
        Correct the error
        in constrain so that it returns the appropriate value.  (Click to see full
        instructions)
      CSPU5_U3 - Return Values - debuggingMaxVal_instruction: |-
        Correct the error
        in maxVal so that it correctly reports the maximum value.  (Click to see full
        instructions)
      CSPU5_U3 - Return Values - useMinVal_instruction: |-
        Call minVal within the console.log
        statement to calculate the minimum of two values.  (Click to see full instructions)
      CSPU5_U3 - Return Values - wrapTurtle_instruction: |-
        Write wrap in this simple
        app to let the turtle "wrap" to the other side of the screen when it goes
        off.  (Click to see full instructions)
      CSPU5_U3 - Return Values - writeMaxVal_instruction: |-
        Write the function maxVal
        and then use it within the console.log statement to calculate the maximum
        of two values.  (Click to see full instructions)
      CSPU5_U3 - Simulation - 1_instruction: |-
        Use a while loop to "flip a coin 10
        times" and write the values to the screen. (Click to see full instructions)
      CSPU5_U3 - Simulation - 2.1_instruction: |-
        Change your looping condition so
        the simulation runs until there are 5 heads flipped. (Click to see full instructions)
      CSPU5_U3 - Simulation - 2.5_instruction: |-
        Run your simulation to get the full
        10,000 heads! How long did it take? (Click to see full instructions)
      CSPU5_U3 - Simulation - 2_instruction: |-
        Keep track of how many heads (1's)
        your program generates and print the results to the screen. (Click to see
        full instructions)
      CSPU5_U3 - Simulation - 3_instruction: |
        Add functionality that counts how many
        heads in a row are flipped. (Click to see full instructions)\r
      CSPU5_U3 - Simulation - 4_instruction: |-
        Update your while loop's condition
        so the the coin flips until there are three heads in a row. (Click to see
        full instructions)
      CSPU5_U3 - Simulation - 5_instruction: |-
        Change your while loop to run until
        you get a streak of 12 heads. How many flips did it take? (Click to see full
        instructions)
      CSPU5_U3 - Simulation - 6_instruction: |-
        Keep adding to your simulation. What
        do you want to explore next? (Click to see full instructions)
      CSPU5_U3 - User Input - Save getText To Variable_instruction: |-
        Save the age
        and name of the user in variables (Click to see full instructions)
      CSPU5_U3 - Variables - Set to Expression with Other Variables_instruction: |-
        Write
        an expression that calculates the player's total score and stores it in the
        totalScore variable. The calculation is: the player's points times lives
        divided by the total time. (click to see full instructions)
      CSPU5_U3 - Variables - Set to Expression_instruction: |-
        Test out the new expressions.
        (Click to see full instructions)
      CSPU5_U3 Digital Assistant Design_instruction: |-
        Pick a topic for your Digital
        Assistant and create the basic layout with a text input and text area. (Click
        to show full instructions)
      CSPU5_U3 Digital Assistant Set Text_instruction: |-
        Have your digital assistant
        repeat back what the user types and include a canned response. (Click to see
        full instructions)
      CSPU5_U3 Digital Assistant Target_instruction: |-
        Try out a demo of the Digital
        Assistant!
      CSPU5_U3 full clicker demo_instruction: Clicker game - Try it out!
      CSPU5_U3- Variables - Create And Assign_instruction: |-
        On one line add a variable
        called "lives" and assign it the value 3. Print it to the console. (Click
        to see full instructions)
      CSPU5_U3- Variables - Text Mode_instruction: 1. 切換到文字模式並輸入說明；2. 拖曳積木到文字模式；3.
        實驗程式碼完成
      CSPU5_U3-Design Mode-ID and Event Handler_instruction: |-
        Add an event handler
        for the button using the "Insert and show" link in the Design Mode Events
        tab. (Click to see full instructions).
      CSPU5_U3-Design Mode-Image_instruction: |-
        Recreate the "Chaser Game" from
        the last lesson using Design Mode. (Click to see full instructions.)
      CSPU5_U313 Two Buttons with Ids_instruction: |-
        Predict what will happen. Once
        you've made a prediction, run the code to see what happens. (Click to see
        full instructions)
      CSPU5_U313 drag Two Buttons_instruction: |-
        Run a program with two buttons that
        have the same id to see the warning message in the console. Change the ids
        to make the program run without getting a warning message.
      CSPU5_U3L13 - Debug Id Problem_instruction: |-
        Improve the button by choosing
        a descriptive and meaningful ID. (Click to see full instructions)
      CSPU5_U3L13 - Debugging 1_instruction: |-
        Debug the program by verifying your
        IDs are being referenced properly. (Click to see full instructions)
      CSPU5_U3L13 - Debugging 2_instruction: |-
        Debug the program by properly ordering
        your button commands and event handlers. (Click to see full instructions)
      CSPU5_U3L13 - Debugging 3_instruction: |-
        Debug the program by fixing the logical
        error within the program. (Click to see full instructions)
      CSPU5_U3L13 - Debugging IDs case sensitive_instruction: |-
        Debug the program
        by verifying your IDs are being referenced properly. (Click to see full instructions)
      CSPU5_U3L13 - Project_instruction: |-
        Create your multi-screen app. (Click to
        see full instructions.)
      CSPU5_U3L13 - Turtle Driver Project_instruction: |-
        Create a "turtle driver"
        that includes buttons to move the turtle forward and turn it left and right.
        (Click to see full instructions)
      CSPU5_U3L13 - Turtle move with button_instruction: 添加一個按鈕，讓你在點擊它時，烏龜能夠移動。（點擊觀看完整說明）
      CSPU5_U3L13 eventsDetails_instruction: |-
        Add an event handler to the button
        to move the turtle forward. (Click to see full instructions)
      CSPU5_U3L14 - Assigning Random Value_instruction: |-
        Write a program that simulates
        the rolling of two dice and reports their individual values as well as the
        sum. (click to see full instructions)
      CSPU5_U3L14 - Mini Calculator embed_instruction: |-
        You will be prompted for
        two numbers, one right after the other.  See what happens.  Enter different
        numbers until you get the idea.
      CSPU5_U3L14 - User Input Division calculator_instruction: |-
        Write a program
        that acts as a simple calculator. (click to see full instructions)
      CSPU5_U3L14 - Variable ReAssignment pt2_instruction: |-
        Trace the code and predict
        what you think will be printed to the console. Then add a console.log statement
        at the end of the program to see the last value of someNum to see if your
        full prediction is correct. (click to see full Instructions)
      CSPU5_U3L14 - concatenate simple_instruction: |-
        Modify the write statement on
        line 3 to combine text and variables together to make the app display a single
        line of text that shows the player's lives and score. (click to see full
        instructions)
      CSPU5_U3L14 - moving memory challenge1_instruction: |-
        Using only the variables
        provided, assignment (=) and arithmetic (+ - * /) re-assign the values to
        make the console.log statement display the correct value(s).  (Click to see
        full instructions)
      CSPU5_U3L14 - moving memory challenge2_instruction: |-
        Using only the variables
        provided, assignment (=) and arithmetic (+ - * /) re-assign the values to
        make the console.log statement display the correct value(s).  (Click to see
        full instructions)
      CSPU5_U3L14 - moving memory challenge3_instruction: |-
        Using only the variables
        provided, assignment (=) and arithmetic (+ - * /) re-assign the values to
        make the console.log statement display the correct value(s).  (Click to see
        full instructions)
      CSPU5_U3L14 - moving memory challenge4_instruction: |-
        Using only the variables
        provided, assignment (=) and arithmetic (+ - * /) re-assign the values to
        make the console.log statement display the correct value(s).  (Click to see
        full instructions)
      CSPU5_U3L14 - moving memory challenge5_instruction: |-
        Using only the variables
        provided, assignment (=) and arithmetic (+ - * /) re-assign the values to
        make the console.log statement display the correct value(s).  (Click to see
        full instructions)
      CSPU5_U3L14 - moving memory challenge6_instruction: |-
        Using only the variables
        provided, assignment (=) and arithmetic (+ - * /) re-assign the values to
        make the console.log statement display the correct value(s).  (Click to see
        full instructions)
      CSPU5_U3L15 - Add reset button to UpDown app_instruction: |-
        Add code so that
        clicking the start over button will reset the game and send you back to the
        main screen. (Click to see full instructions)
      CSPU5_U3L15 - DEMO up down count practice app_instruction: |-
        Try out the demo
        app (Click to see full instructions)
      CSPU5_U3L15 - Debug forget to update var on reset in UpDown app_instruction: |-
        Run
        the app, and click the up or down button until you get to the gameOverScreen.
        Click 'Start Over' and try the app again. Find and fix the issue in the
        code. (Click to see full instructions)
      CSPU5_U3L15 - Debug if never triggers in UpDown app_instruction: |-
        Run the app
        and use the up and down arrows to try to hit the gameOverScreen. You can't!
        Find and fix the issue in the code. (Click to see full instructions)
      CSPU5_U3L15 - Debugging Simple If-statements =v==_instruction: |-
        Run the app,
        and click the up button. Then restart and run it again, and click the down
        button. Find and fix the issue in the code. (Click to see full instructions)
      CSPU5_U3L15 - Simple If-statements in UpDown App_instruction: |-
        Add an if statement
        so that the app changes screens when the count reaches -5. (Click to see full
        instructions)
      CSPU5_U3L15 - add code to make count down work_instruction: |-
        Write code to
        make the down arrow work as expected. (Click to see full instructions)
      CSPU5_U3L15 - count upDown bug forget to set text_instruction: |-
        Find the bug
        in the program and fix it. (Click to see full instructions)
      CSPU5_U3L15 - count upDown bug logic error wrong update_instruction: |-
        Find
        the bug in the program and fix it. (Click to see full instructions)
      CSPU5_U3L15 - count upDown bug var not created globally_instruction: |-
        Find
        the bug in the program and fix it. (Click to see full instructions)
      CSPU5_U3L15 - global var example count up_instruction: |-
        Look at the code for
        this app and see how the code works to update the count variable when the
        up arrow is clicked. (Click to see full instructions).
      CSPU5_U3L15 - mini clicker update score_instruction: |-
        Add code to update the
        score when the apple is clicked. (Click to see full instructions)
      CSPU5_U3L15 - practice with setText_instruction: |-
        Use setText to complete the
        click event handler for the down arrow. (Click to see full instructions)
      CSPU5_U3L15 - variable scoping problem debugging_instruction: |-
        See if you can
        figure out why the code is no longer working. (Click to see full instructions)
      CSPU5_U3L15 click add lives_instruction: |-
        Add lives to the clicker game that
        decrement by 1 when the background image is clicked (Click to see full instructions)
      CSPU5_U3L15 full clicker app_instruction: |-
        Complete your clicker game! (Click
        to see full instructions)
      CSPU5_U3L16 - challenge say hi app_instruction: |-
        Write a greeting to the user
        when they hit 'enter' in the text input, using the 'change' event. (Click
        to see full instructions)
      CSPU5_U3L16 - chaserApp_instruction: |-
        Create your own "Chaser Game." (Click
        to see full instructions)
      CSPU5_U3L16 - chooseImages_instruction: |-
        Replace the image in your application
        with one of your own. (Click to see full instructions)
      CSPU5_U3L16 - doubleQuotes_instruction: |-
        Save a string inside a variable and
        log it to the console. (Click to see full instructions)
      CSPU5_U3L16 - intro getText_instruction: |-
        Add an event handler to the Submit
        button so that when the button is clicked it will display the name entered
        in the text box to the console.  Use getText to get the value out of the text
        box. (Click to see full instructions)
      CSPU5_U3L16 - introSetPosition_instruction: |-
        Move the buttons to the bottom
        of the screen. (Click to see full instructions)
      CSPU5_U3L16 - introStrings_instruction: |-
        Save a string inside a variable and
        log it to the console. (Click to see full instructions)
      CSPU5_U3L16 - newEventTypes_instruction: |-
        Experiment with different event types
        and select the one that you think is best. (Click to see full instructions)
      CSPU5_U3L16 - outputWithTextArea_instruction: |-
        Output a message to the 'textArea'
        (Click to see full instructions)
      CSPU5_U3L16 - setPosition to fixed location_instruction: |-
        Introducing the setPosition
        command! Replace the moveTo in the button-click event handler to use setPosition
        to move the button itself to a random location when it's clicked.
      CSPU5_U3L16 - setPosition to move button_instruction: |-
        Introducing the setPosition
        command! Replace the moveTo in the button-click event handler to use setPosition
        to move the button itself to a random location when it's clicked.
      CSPU5_U3L16 - singleSetPosition_instruction: |-
        Move the button to the middle
        of the screen. (Click to see full instructions)
      CSPU5_U3L16 - text labels_instruction: |-
        Use the textLabel command to replace
        the button in your program with a text label. (Click to see full instructions)
      CSPU5_U3L16 - textInput getText write_instruction: |-
        Add an Text Input box for
        the name and age. (Click to see full instructions)
      CSPU5_U3L16 - toUpper_instruction: |-
        Make the name of the user appear in uppercase
        (Click to see full instructions)
      CSPU5_U3L16 - use images_instruction: |-
        Use the image command to replace the
        text label in your program with an image. (Click to see full instructions)
      CSPU5_U3L16 Mad Lib Clear Input_instruction: "Clear the user's previous text\nwhen
        the Play Again button is clicked (Click to see full instructions) "
      CSPU5_U3L16 Mad Lib Demo_instruction: Mad Libs Demo - Try it out!
      CSPU5_U3L16 Mad Lib Student Setup_instruction: |-
        Back to Mad Libs: To get started,
        set up the two screens for your Mad Libs app (Click to show full instructions)
      CSPU5_U3L16 Mad Lib getText_instruction: "Before setting the text area with\nyour
        Mad Libs outline, get the user's text and incorporate their responses.\n(Click
        to see full instructions) "
      CSPU5_U3L16 Mad Lib setText_instruction: "When the Next button is clicked,\nset
        the text area to have the main outline of your How-to Mad Libs (without\nthe
        user's input). (Click to see full instructions) "
      CSPU5_U3L16 Mad Lib toUpper_instruction: "Apply the toUpperCase and toLowerCase\nstring
        functions to the user's text. (Click to see full instructions) "
      CSPU5_U3L18 comparison operators_instruction: |-
        Use console.log to print out
        the different boolean expressions below to see what information they return.
        (Click to see full instructions)
      CSPU5_U3L19 - fix the var name syntax error v2_instruction: |-
        Fix the error
        and get it to print the value of both variables (Click to see full instructions)
      CSPU5_U3L19 - test reassignment of two vars_instruction: |-
        Predict the value
        of a and b. Add console.log statements to find out the actual value of a and
        b. (Click for full instructions)
      CSPU5_U3L19 - three basic ops of variables_instruction: |-
        Add another variable
        called "lives" and set the value to 3. Print the value of the variable to
        the console. (Click to see full instructions)
      CSPU5_U3L19 - variable reassignment challenge pt2_instruction: |-
        Make a prediction
        about the ending values of a, b, and c. Then use console.log to check your
        understanding (Click to see full instructions)
      CSPU5_U3L19 - write var and string with same name v2_instruction: |-
        Fix the
        code so that the values of both variables print to the console. (Click to
        see full instructions)
      CSPU5_U3L23 Chatbot Conditionals 1_instruction: |-
        Add if, else if, and else
        statements to detect the movie genres Comedy, Romance, Action, and Horror.
        (Click to see full instructions)
      CSPU5_U3L24 Chatbot Basic Conditionals_instruction: |-
        Check out the project
        description for instructions. (Click to see full instructions.)
      CSPU5_U3L24 Nested Conditionals 1_instruction: |-
        Change all of the boolean expressions
        to use includes instead of ==. (Click to see full instructions)
      CSPU5_U3L24 Nested Conditionals 2_instruction: "Nest your movie genre if statements\ninside
        the if statements to check for a ? in the input. "
      CSPU5_U3L24 introIncludes_instruction: |-
        Practice using the includes command.
        (Click to see full instructions)
      CSPU5_U3L25 - drag out key event_instruction: |-
        Set up an event handler to respond
        to keypress events, and display event.key in the console. Hit keys on the
        keyboard to see what happens. (Click to see full instructions)
      CSPU5_U3L25 - play sound when up key_instruction: |-
        Change the code so the sound
        will only play when the up arrow is pressed. (Click to see full instructions)
      CSPU5_U3L26 AND operator_instruction: |-
        Update the genre and rating if statements
        to give only one movie suggestion at a time. (Click to see full instructions)
      CSPU5_U3L26 OR operator_instruction: |-
        Update the if statement to use an OR
        to check for a "?" as well as who, what, where, when, why, how in the user
        input. (Click to see full instructions)
      CSPU5_addDescriptiveIDsToTurtleDriver_instruction: |-
        Improve the button by choosing
        a descriptive and meaningful ID. (Click to see full instructions)
      CSPU5_basic if - DIY secret number_instruction: |-
        Use console.log to print out
        the different boolean expressions below to see what information they return.
        (Click to see full instructions)
      CSPU5_basic if - check driving age_instruction: |-
        Use console.log to print out
        the different boolean expressions below to see what information they return.
        (Click to see full instructions)
      CSPU5_basic if - voting examle_instruction: |-
        Use console.log to print out the
        different boolean expressions below to see what information they return. (Click
        to see full instructions)
      CSPU5_basic if-else - driving age_instruction: |-
        Use console.log to print out
        the different boolean expressions below to see what information they return.
        (Click to see full instructions)
      CSPU5_clickerGame_v1_template_instruction: |-
        Create your own "Chaser App".
        (Click to see full instructions)
      CSPU5_moveTurtleOnButtonClick_instruction: |-
        Add an event handler to the button
        to move the turtle forward. (Click to see full instructions)
      CSPU5_playWithEventTypes_instruction: |-
        Debug the program by fixing the logical
        error within the program. (Click to see full instructions)
      CSPU5_setPosition to fixed location_instruction: |-
        Introducing the setPosition
        command! Replace the moveTo in the button-click event handler to use setPosition
        to move the button itself to a random location when it's clicked.
      CSPU5_turtleDriver_add2ndButton_instruction: |-
        Debug the program by verifying
        your IDs are being referenced properly. (Click to see full instructions)
      Calc Circles of Eval .1_instruction: |-
        You’ll be writing a kind of code called
        Evaluation Blocks, because each block of code evaluates to a single value.
        Change the ??? in this code so that the block evaluates to 5.
      Calc Circles of Eval .2_instruction: |-
        This Evaluation Block is a multiplication
        function which takes two numbers and returns the product of those numbers.
        Edit this block so that it multiplies 2 * 5
      Calc Circles of Eval .3_instruction: |-
        Here's a function for addition which
        takes two numbers and returns their sum. Use this Addition Block to add 3
        + 6.
      Calc Circles of Eval .4_instruction: |-
        Here we've nested an Addition Block
        inside a Multiplication Block. Complete this code so it multiplies 3 by (4
        + 1)
      Calc Circles of Eval 1 (copy 1)_instruction: |-
        Convert this statement to <some_shape>
        of evaluation.
      Calc Circles of Eval 1_instruction: |-
        Every mathematical operator (+, -, *,
        /, and so on) can be represented by an Evaluation Block in code. Change the
        Evaluation Block to match the expression.
      Calc Circles of Eval 2 (copy 1)_instruction: |-
        Convert this statement to <some_shape>
        of evaluation.
      Calc Circles of Eval 2_instruction: |-
        Use a Multiplication Block to complete
        this code.
      Calc Circles of Eval 3_instruction: |-
        Complete the Evaluation Blocks to match
        this statement.
      Calc Circles of Eval 4_instruction: |-
        This code is missing a couple of Evaluation
        Blocks - make sure you put everything in the right order.
      Calc Circles of Eval 5_instruction: |-
        Complete the Evaluation Blocks to match
        this statement.
      Calc Circles of Eval 6_instruction: |-
        Complete the Evaluation Blocks to match
        this expression.
      Calc Circles of Eval 7_instruction: |-
        Complete the Evaluation Blocks to match
        this statement.
      Calc Circles of Eval 8_instruction: |-
        Complete the Evaluation Blocks to match
        this statement.
      Calc Circles of Eval 9_instruction: |-
        Complete the Evaluation Blocks to match
        this statement.
      Calc Circles of Eval Free Play_instruction: |-
        Free Play: Try using the Evaluation
        Blocks to write some equations of your own. How does nesting the blocks in
        different ways impact their evaluation?
      Calc Define Funcs 1 (copy 1)_instruction: |-
        Let's look at some more algebraic
        functions now. Here's a function translated from the simple algebraic function
        f(x) = x + 1. What would you expect this function to output if provided an
        input of 15?
      Calc Define Funcs 1_instruction: |-
        Let's look at some more traditional algebraic
        functions now. Here's a function translated from the simple algebraic function
        f(x) = x + 1. What would you expect this function to output if provided an
        input of 15?
      Calc Define Funcs 2_instruction: |-
        Write a function f that takes a parameter
        x and returns x - 10. Test your function using f(15).
      Calc Define Funcs 3_instruction: |-
        We don't have to call our function f every
        time; create a function called times-ten that should take a parameter x and
        return x * 10. Once you've created the function, run times-ten(50).
      Calc Define Funcs 4_instruction: |-
        Write a function called half that takes a
        number x and returns half that number. Once you've written the function,
        use it to calculate half(21)
      Calc Define Funcs 5 - multiply 1_instruction: |-
        Oh no! We lost our multiply
        block! We'll have to create a function to multiply for us. To start off,
        write a function "f" that takes a parameter "x" and returns x*5. Test
        your function using f(3).
      Calc Design Recipe 1_instruction: |-
        Let's use the Design Recipe to create a
        function called cube - this function should take in a Number and return that
        number to the power of 3. Make sure to write two example cases! When you're
        done, use your new function to calculate cube(7).
      Calc Design Recipe 2_instruction: |-
        Your school is holding a bake sale, and
        you need to track the cost of making each cookie, the money paid, and the
        total profit. Cookies cost $0.25 each to make, and sell for $1.50/cookie.\r
        \r
        Write
        the function cost, which takes in the number of cookies you intend to sell,
        and returns the cost of making those cookies.\r
        \r
        Test your function by
        calculating the cost of 42 cookies
      Calc Design Recipe 3_instruction: |-
        Write the function sales which takes in
        the number of cookies sold, and produces the amount of money customers spent
        to buy those cookies (each cookie is sold at $1.50).\r
        \r
        Test your function
        by calculating the sales for 135 cookies
      Calc Design Recipe 4_instruction: |-
        Using the two functions we just wrote, write
        the function profit, which takes in the number of cookies you sold, and gives
        you back the total profit you make from selling your cookies, accounting for
        the cost of baking them.\r
        \r
        Test your function by calculating the total
        profit for 15 cookies.
      Calc Free Play_instruction: |-
        Free Play: Write functions and algorithms of your
        own design!
      Calc Rocket 1 (copy 1)_instruction: |
        In the last puzzle you wrote a contract
        for the function "rocket-height" that states it has a range of Number, domain
        of Number, and should return the height of the rocket traveling at 15 m/s
        after a given number of seconds. Let's write an example case now for the
        height of the rocket at 3 seconds.\r
        \r
        \r
        \r
          \r
        \r
      Calc Rocket 1_instruction: |-
        In the last puzzle you wrote a contract for the
        function rocket-height that states it has a range of Number, domain of Number,
        and should return the height of the rocket traveling at 15 m/s after a given
        number of seconds. Let's write an example case now for the height of the
        rocket at 3 seconds.
      Calc Rocket 2_instruction: |-
        Great, let's do one more example before writing
        the function - what should the rocket height be after 30 seconds?
      Calc Vars 1.1_instruction: |-
        Here we've set the age variable to 17 years. Can
        you write an expression that calculates age in days?
      Calc Vars 1_instruction: |-
        Variables allow us to name values so that we can
        easily refer to them repeatedly throughout our programs. Here's a variable
        called age. Set its value to your age and click run.
      Calc Vars 2 (copy 1)_instruction: |-
        Here we've set the "age" variable to
        17 - can you write an expression that calculates "age" in months?
      Calc Vars 2.1_instruction: |-
        Here's a new variable called age-in-months. Use
        the variable age to set age-in-months.
      Calc Vars 2_instruction: |-
        Can you write an expression that calculates age in
        months?
      Calc Vars 3 (copy 1)_instruction: |-
        Can you add to this code so that it calculates
        how many hours there are in "age" years?
      Calc Vars 3_instruction: |-
        Can you add to this code so that it uses the "age"
        variable to calculate age in hours?
      Calc Vars 4_instruction: |-
        We can also set variables by using other variables.
        Let's say you have a brother who is two years younger than you - can you
        set a new variable "brother-age" using your "age" variable?
      Choose Your Own Adventure_instruction: |-
        You can do whatever you want in play
        lab! Here's an example of choose your own adventure story in play lab.
      Choose Your Own Adventure_2018_instruction: |-
        You can do whatever you want in
        play lab! Here's an example of choose your own adventure story in play lab.
      Code Studio Puzzle Challenge 1 - Artist_instruction: "Draw the line. It is\n200
        pixels long. "
      Code Studio Puzzle Challenge 1 Artist1_instruction: "Draw the line. It is 200\npixels
        long. "
      Code Studio Puzzle Challenge 10 - Bee (copy 1)_instruction: |-
        Move the Bee to
        the flower and get all of the nectar.
      Code Studio Puzzle Challenge 10 - Bee_instruction: |-
        Move the Bee to the flower
        and get all of the nectar.
      Code Studio Puzzle Challenge 10b - Bee_instruction: |-
        Move the Bee to the flowers
        and get all of the nectar at each.
      Code Studio Puzzle Challenge 11 - Artist_instruction: |-
        Draw this line by using
        the variable "length". Each line segment is 75 pixels long.
      Code Studio Puzzle Challenge 11b - Artist_instruction: |-
        Draw a square by using
        the variable length provided.
      Code Studio Puzzle Challenge 12 - Artist_instruction: |-
        The code provided draws
        one triangle. Add to it to draw triangles in a hexagon pattern.
      Code Studio Puzzle Challenge 12a - Artist_instruction: |-
        The code provided draws
        one triangle. Add to it to draw triangles in a hexagon pattern.
      Code Studio Puzzle Challenge 13 - Artist_instruction: "This is just like a\n\"for\"
        loop. Complete the code to draw six lines that grow from 50, 60, 70,\n80,
        90, to 100 pixels long. "
      Code Studio Puzzle Challenge 14 - Artist_instruction: "This is just like a\n\"for\"
        loop. Complete the loop to draw 4 squares that grow from 80, 100,\n120, to
        140 pixels. "
      Code Studio Puzzle Challenge 2 - Artist_instruction: |-
        Now add a turn and another
        line. The lines are 200 pixels long.
      Code Studio Puzzle Challenge 3 - Artist_instruction: |-
        Draw the square. Each
        side is 100 pixels long.
      Code Studio Puzzle Challenge 4 - Artist_instruction: |-
        Draw the octagon. Each
        side is 100 pixels long.
      Code Studio Puzzle Challenge 5 - Bee (copy 1)_instruction: |-
        Move the Bee to
        the flower and get the nectar.
      Code Studio Puzzle Challenge 5 - Bee_instruction: |-
        Flowers contain a specific
        amount of nectar. Move the Bee to the flower and collect nectar with the get
        nectar block.
      Code Studio Puzzle Challenge 6 - Bee_instruction: |-
        Honeycombs can hold a specific
        amount of honey. Get the nectar from the flower and make some honey.
      Code Studio Puzzle Challenge 7 - Bee_instruction: |-
        Move the Bee to the flower
        and get the nectar.
      Code Studio Puzzle Challenge 8 - Bee_instruction: |-
        The cloud could be hiding
        a flower or a honeycomb. Only get nectar from flowers. Only make honey at
        honeycombs.
      Code Studio Puzzle Challenge 9 - Bee_instruction: |-
        The cloud could be hiding
        a flower or a honeycomb. Only get nectar from flowers. Only make honey at
        honeycombs.
      Code Studio Puzzle Challenge Artist Screencast (copy 1)_instruction: "Draw\nthe
        line. Each segment is 100 pixels long. "
      Code Studio Puzzle Challenge Artist Screencast 2_instruction: "Complete the\ncode
        to draw the line. Each segment is 100 pixels long. "
      Code Studio Puzzle Challenge Artist Screencast_instruction: "Draw the line.\nEach
        segment is 100 pixels long. "
      Code Studio Puzzle Challenge Bee Screencast_instruction: |-
        Move the Bee to the
        flowers and get all of the nectar.
      Code Studio Puzzle Challenge Square - Artist_instruction: |-
        Draw a square by
        using the variable length provided.
      Code Studio Puzzle Challenge Var - Artist_instruction: |-
        Draw a line by using
        a variable "length" set to 180.
      Collector Demo_instruction: |-
        Look at all this loot! Help me get as many coins
        as I can so I can improve my farm. I can only use 9 blocks though!
      Course 2 Bee Loops 1_instruction: "Hi, I'm a bee. Can you help me collect\nthe
        nectar from these flowers? "
      Course 2 Bee Loops 13_instruction: 評量：使用重複積木來收集所有的花蜜。
      Course 2 Bee Loops 2_instruction: |-
        Can you do the same task more easily with
        a loop?
      Course 2 Bee Loops 3_instruction: |-
        Now use the new repeat block to collect
        all of the nectar and make all of the honey.
      Course 2 Bee Loops 3__instruction: |-
        Can you use a loop to collect all that
        nectar?
      Course 2 Bee Loops 4_instruction: |-
        What happens if you loop this sequence 3
        times? Don't forget to make the honey at the end!
      Course 2 Maze Loops 1_instruction: 你可以只用 5 個積木就讓我抓到豬嗎？
      Course 4 2_instruction: |-
        The bee only wants nectar right now. Remember, not
        all objects are flowers, so check to gather nectar only at flowers.
      Course 4 Artist 1_instruction: '幫我畫一個盒子。（每個線段的長度是 200 像素） '
      Course 4 Artist 10_instruction: |-
        點擊此處再次觀看完整說明！\r\r
        這是有趣圖形的程式碼。當你每次都轉一點方向角度，重複程式碼很多次會發生什麼事呢？注意在此圖案中會轉到 420 度，這表示小藝術家晝完時，它會朝向與開始不同的方向。它會朝著從開始方向右邊 60 度的方向。
      Course 4 Artist 11_instruction: 現在來挑戰一下！多試驗、多試錯，不要指望一次就能畫出完全的圖案。想觀看更多提示？點擊這裡！
      Course 4 Artist 12_instruction: |-
        想再看個啟發人的設計或者提示嗎？點擊這裡！ \r
        \r
        除此之外，你也可以設計自己的圖形！
      Course 4 Artist 13_instruction: 還在玩啊？給你一張空白畫布，你可以在上面設計任何東西，隨你高興！
      Course 4 Artist 2_instruction: 你可以用迴圈來繪製最外圍的灰色正方形嗎？（每邊邊長為 300 像素）
      Course 4 Artist 20_instruction: 還在玩啊？給你一張空白畫布，你可以在上面設計任何東西，隨你高興！
      Course 4 Artist 3_instruction: 想一想，當你運行這個程式時會發生什麼事（你也可以直接點擊「運行」來看看）。接著，重複它一定的次數來完成這個圖形。
      Course 4 Artist 4_instruction: 一個圓有多少度？將這個數字填到重複積木中，來創造一個彩色的圓。
      Course 4 Artist 5_instruction: 畫出另一半圖形，讓它對稱。這是等邊三角形，每條邊是 50 像素。提示：你可能需要多運行幾次代碼來看看需要加上哪些積木。
      Course 4 Artist 6_instruction: 完成程式碼以畫出這 3 個正三角形。
      Course 4 Artist 7_instruction: '現在將這個迴圈嵌套進另一個迴圈內，以畫出 10 個三角形。這就是所謂的「巢狀式迴圈」。
        提示：全部 10 個三角形完成了 360 度的旋轉。  '
      Course 4 Artist 8_instruction: 用迴圈包住這些程式積木，重覆執行多次來畫出這個太陽
      Course 4 Artist 8a_instruction: 記得這個圖形嗎？現在我們要讓你建立它，但這次我們不提供任何初始積木！
      Course 4 Artist 9_instruction: '循環這個圖樣 10 次並確定在每個圖樣畫完後轉向。\r

'
      Course 4 Artist Binary 1_instruction: "這裡有一個函式採用 1與 0 的二進位字串，引導藝術家跟隨它們由左至右，由上到下。
        當藝術家看到 1 時會填滿方格，當藝術家看到 0 時則忽略方格。\\r \n\\r\n運行這個程式，看看這位藝術家如何使用二進位繪製這個圖案。"
      Course 4 Artist Binary 1a_instruction: "這裡有一個函式採用 1與 0 的二進位字串，引導藝術家跟隨它們由左至右，由上到下。
        當藝術家看到 1 時會填滿方格，當藝術家看到 0 時則忽略方格。\\r \n\\r\n運行這個程式，看看這位藝術家如何使用二進位繪製這個圖案。"
      Course 4 Artist Binary 2_instruction: 怎樣的二進制字符串可以讓你循環 8 次來畫出這樣的圖像？
      Course 4 Artist Binary 3_instruction: 你可以靠迴圈，只用 3 個二進制（0 或 1）來完成這個圖案嗎？
      Course 4 Artist Binary 4_instruction: 圖像上每一排都是用二進位制（binary）組合成的字串。你可以重新排列它們，讓圖片上的哭臉變笑臉嗎？
      Course 4 Artist Binary 5_instruction: 用怎樣的六位數的二進制字符串，在重複 11 次後將能畫出這個圖案？
      Course 4 Artist Binary 6_instruction: 能讓你重複畫出這個圖案的最短的二進制字符串是什麼？
      Course 4 Artist Binary 7_instruction: 完成這幅畫。
      Course 4 Artist Binary Free Play 2_instruction: 自由發揮：這裡有張空白畫布讓你創作，開心的玩吧！
      Course 4 Artist Binary Free Play 2a_instruction: |-
        這是一個有更高解析度的畫布（16 X 16像素）！\r
        \r
        當我們開始使用這些位元創作時，看看會發生甚麼事情？
      Course 4 Artist Binary Free Play 2b_instruction: 點擊此處觀看提示。
      Course 4 Artist Binary Free Play_instruction: 自由發揮：用二進制畫出任何你喜歡的東西！
      Course 4 Artist Binary pre1_instruction: 使用下方的程式積木讓小藝術家在網格中的第一行以二進位畫出「01010101」。
      Course 4 Artist Binary ryan_instruction: |-
        二進制（Binary）是個只用兩種符號來表達訊息的方法。以下我們將會使用「關」（用 0 表示）及「開」（用 1 代表）。\r\r
        我們提供了「像素」網格，讓你在網格中移動並切換特定的像素方格以進行設計。你能夠讓小藝術家在網格中的第一行以二進位畫出「01010101」嗎？
      Course 4 Artist For  Functions 10_instruction: |-
        Let's Step it up a little,
        can you draw a Star shape using the "Draw a Square Line" function? Good
        luck!
      Course 4 Artist For  Functions 11_instruction: |-
        Let's Step it up a little,
        can you draw a Star shape using the "Draw a Square Line" function? Good
        luck!
      Course 4 Artist For Loops 1_instruction: 使用重複積木來畫出這個邊長 50 像素的三角形。
      Course 4 Artist For Loops 10_instruction: |-
        Free Play Time! Have fun drawing
        whatever you like with the blocks you have learned how to use
      Course 4 Artist For Loops 11_instruction: "還記得在上一個階段，我們使用一個變數來控制圖形的邊數嗎？\n現在我們要用
        counter 這個變數來做相同的事情。\n這個圖案從一個三角形開始，且每次增加 1 個邊直到畫出一個十邊形。每個圖形的邊長為 100 像素。 "
      Course 4 Artist For Loops 11a_instruction: |-
        讓我們總結一下吧！用你所知道的計數迴圈與計數器變數，來創造出每個形狀都比前一個多 2 條邊的圖案，確保每條邊長是這個多邊形邊數的 10 倍。\r
        \r
        這裡提供給你一些些參考的程式碼。
      Course 4 Artist For Loops 12_instruction: "That looked pretty cool, but now\nI'd
        like to draw each shape next to the last one. This time each side is\n20 pixels.
        Use a jump block to jump forward 40 pixels after each shape. "
      Course 4 Artist For Loops 13_instruction: |-
        Hmmm, those shapes are getting bigger
        every time! Didn't we already solve this problem with variables? How can
        we use the counter variable to make the sides smaller as there are more of
        them? Instead of moving forward by a set amount, try moving forward (100 /
        counter) pixels.
      Course 4 Artist For Loops 14_instruction: 如果每次都多轉或少轉一些角度，那麼你可以創作出一個有規律的效果。試著重用上一關的一些代碼，但是轉89度來創造螺旋的正方形。
      Course 4 Artist For Loops 15_instruction: 自由發揮：試著用計數迴圈來繪製一些自己的畫作。我們也為你新增了一些有用的變數。
      Course 4 Artist For Loops 2_instruction: 我已經放置了畫三角形的程式到計數迴圈（for loop）裡，計數是從
        50 算到 100，每次增加 10。注意：先點擊「運行」前，確定這些程式碼，這樣你才知道如何完成後面的關卡。
      Course 4 Artist For Loops 3_instruction: '參考上個關卡來完成這一關，這個最小的三角形邊長為 20 像素，最大的是
        200 像素，每個三角形都比前一個的邊長多 20 像素。

'
      Course 4 Artist For Loops 4_instruction: '要怎樣利用學過的積木來畫這些正方形？它們之中最小的邊長是 15 像素，最大的是
        300 像素，每個正方形的邊長都比上一個長 15 像素。 '
      Course 4 Artist For Loops 5_instruction: '上個關卡表現得很好！讓我們再用一次「計數器」變數積木來畫出這個很酷的圖案。 '
      Course 4 Artist For Loops 6_instruction: |-
        Free Play! Try using a for loop to
        draw a growing shape pattern of your own design.
      Course 4 Artist For Loops 6a_instruction: 修改 3 個小地方，把上個關卡的程式修改成這樣！
      Course 4 Artist For Loops 7_instruction: |-
        What happens if you remove the "Repeat
        3" from this algorithm, keeping the "move" and "turn" blocks in the for
        loop? In this spiraling triangle, each side is 20 pixels longer than the last.
      Course 4 Artist For Loops 8_instruction: |-
        只是小小的修改了上個可以繪製出這個圖案的程式，你能找出改變了什麼嗎？\r
        \r
        提示，你需要移除某個東西！
      Course 4 Artist For Loops 8a_instruction: 只是小小的修改了上個可以繪製出這個圖案的程式，你能找出改變了什麼嗎？
      Course 4 Artist For Loops 9_instruction: 你能做出一個每次向前移動 1 到 75 像素，(每次增加 1 個像素)的螺旋嗎?
      Course 4 Artist For Loops Challenge_instruction: |-
        **挑戰：**
        你能想的到要如何建立這個多邊形圖案嗎？這個圖案的邊長是 40 像素，用你所有學過的東西試試看。
      Course 4 Artist For Loops Challenge_a_instruction: |-
        你想得到要怎麼使用你學到的東西來完成這個圖像嗎？\r
        \r
        需要
        提示？點擊這裡。
      Course 4 Artist For Loops inspire_instruction: |-
        自由發揮靈感：你已經學會了製作這樣的圖案所需的知識了！如果這個圖案讓你有些聯想，試試畫出一些類似的圖像。要不然，就畫畫你想畫的一些東。 \r
        \r
        需要提示？點擊這裡。
      Course 4 Artist Functions 1_instruction: 你可以利用迴圈來畫出一個邊長 100 像素的正方形嗎？
      Course 4 Artist Functions 10_instruction: 你需要加入哪一個方塊來使三角形坐落在正方型上?
      Course 4 Artist Functions 11_instruction: 檢查一下這個畫立方體的程式 - 你能將它挪到一個叫做 Draw a
        Cube（畫個立方體）的函式嗎？
      Course 4 Artist Functions 12.1_instruction: |-
        Let's create a function called
        "draw an octagon 20" that draws an octagon where each side is 20 pixels
        long.
      Course 4 Artist Functions 12_instruction: Loop square function to draw a line
      Course 4 Artist Functions 13.1_instruction: |-
        Now, let's make a function called
        "jump to upper right" that moves the artist to the upper-right of the octagon
        that you just drew so we can finish this pattern.\r
        \r
        Hint:  To get yourself
        to the upper-right corner, try jumping in a pattern that makes just 3/8 of
        the octagon.
      Course 4 Artist Functions 13_instruction: |-
        Check it out we have a new function
        called "draw a line of squares". Feel free to take a look inside the function
        block to see how we built it. Click on "Run" when your are ready for the
        next puzzle.
      Course 4 Artist Functions 14.1_instruction: |-
        Now, let's make a function called
        "jump to upper right" that moves the artist to the top-right of the octagon
        that you just drew so we can finish this pattern.
      Course 4 Artist Functions 14_instruction: |-
        You're doing great! Let's use
        your new "Draw a line of squares" function to draw a Square shape. Remember
        each square is 40 pixels in length.
      Course 4 Artist Functions 15_instruction: |-
        Let's Step it up a little, can
        you draw a star shape using the "draw a line of squares" function? Good
        luck! Hint: you may have to turn 144 degrees
      Course 4 Artist Functions 2_instruction: 你可以畫出 3 個正方形嗎？每個正方形的邊長是 100 像素，且之間要相隔
        20 像素
      Course 4 Artist Functions 3_instruction: |
        Using the "draw a square" function
        block, can you draw this picture? Hint: each square is 120 pixels apart.\r
      Course 4 Artist Functions 4_instruction: |-
        Are you ready to create your own
        "Function Block"? Click on the "Functions" block in the tool box, name
        it "draw a triangle", then create a triangle as you have done before with
        the Action and Loops blocks. Then click on the Save and Close in the upper
        right hand corner. Hint: Create a triangle that is 100 pixels in length. Good
        luck!
      Course 4 Artist Functions 5 OLD_instruction: |-
        Let's try to use our two functions
        to draw a house - what needs to be fixed in this code to draw the house properly?
      Course 4 Artist Functions 5_instruction: |
        Using the "draw a square" function
        block, can you draw this picture? Hint: each square is 120 pixels apart.\r
      Course 4 Artist Functions 6_instruction: 你需要加入哪一個方塊來使三角形坐落在正方型上?
      Course 4 Artist Functions 7_instruction: |-
        Can you draw a line of squares using
        a Square function? Each square is 40 pixel's in length.
      Course 4 Artist Functions 8_instruction: '你已經掌握函式積木的使用技巧了嗎？讓我們修改一下代碼，來讓正方形的邊長變成
        200像素。提示：在「編輯」上點一下，並在 draw a square（畫個正方形）函式編輯器上修改尺寸。記得在離開函式編輯器前點擊「保存並關閉」。 '
      Course 4 Artist Functions 9_instruction: |-
        We have given you most of the code
        to create a function. However there seems to be something missing. Can you
        make this function block complete?
      Course 4 Artist Functions Inspiration_instruction: 點擊此處再次觀看提示。
      Course 4 Artist Functions challenge_instruction: 點擊此處再次觀看提示。
      Course 4 Artist Functions inspire_instruction: |-
        Click here to see the inspiration
        picture again.
      Course 4 Artist Inspire_instruction: |-
        想再看一次啟發人的設計或者提示嗎？點擊這裡！ \r
        \r
        除此之外，你也可以設計自己的圖形！
      Course 4 Artist Params 1_instruction: |-
        Let's edit a function that draws a
        square with 50 pixel sides
      Course 4 Artist Params 10_instruction: "You can call functions from inside\nother
        functions! Using your \"shape\" function as a base, create 3 house shapes\neach
        20 pixels larger than the last starting at 50 pixels in length. Using\na counter
        loop might be helpful. "
      Course 4 Artist Params 11_instruction: |-
        How about a function called "pinwheel"
        that takes three parameters - "sides," "length" and "repeat." You can
        calculate how much to turn after each shape using the same math you used to
        figure out the turns for a shape of "sides". Can you recreate this picture?
        Here's a tip each shape is 100 pixel's in length.
      Course 4 Artist Params 12_instruction: |-
        Use your "pinwheel" function to draw
        each of these shapes. The side length for each image is 50.
      Course 4 Artist Params 13_instruction: 自由發揮：這是除了你寫的函式，還有更多的函式讓你發揮。畫些令人驚嘆的東西吧！
      Course 4 Artist Params 2_instruction: |-
        That triangle function would be a whole
        lot more useful if it could draw triangles of different sizes. I've added
        a parameter for line length, but it doesn't do anything yet. Can you update
        the function so it uses the "length" parameter when it draws each side?
        The triangle sizes are 150 pixels, 75 pixels and 25 pixels.
      Course 4 Artist Params 3_instruction: '太棒了，你能用新函式來畫出這兒的三角形嗎？第一個邊長是 25 像素，第二個是
        50 像素，第三個是 75 像素。 '
      Course 4 Artist Params 4_instruction: |-
        Can you add a new function called square?
        It should also take a length parameter, just like the triangle. This time
        draw 3 squares 25, 50 and 75 pixels in length,100 pixels apart.
      Course 4 Artist Params 5_instruction: |
        Use both of your new functions to draw
        this picture. To make this easier you use a loop with a "counter" parameter.
      Course 4 Artist Params 6_instruction: '讓我們編輯 draw a polygon（畫個多邊形）這個函式。它已經有
        length（長度）參數了，現在讓我們添加一個 sides（邊數）參數到上頭。記住要繪製的圖形要轉向的角度等於 360 除以邊長數。提示：三角形的邊長為
        100 像素、六邊形是 25 像素、正方形是 50 像素。 '
      Course 4 Artist Params 7_instruction: "Can you draw these shapes by filling\nin
        the \"???\" The square and triangle are 100 pixels in size while the hexagon\nis
        75 pixels in size. "
      Course 4 Artist Params 8_instruction: '你能想出怎樣畫出這個圖形嗎？提示：創建一個能畫 6 條邊的函式，並命名為
        hexagon（六邊形）。

'
      Course 4 Artist Params 9_instruction: 還記得當我們用計數迴圈但移除了裡面的一個循環了嗎？讓我們做點有意思的，使用一個
        draw a shape（畫個圖形）函式，裡頭帶有 sides（邊數）和 length（長度）參數。你可以重新創建這些形狀嗎？這些正方形計數應該是
        5/100/5，三角形的計數應該是 10/100/10，而六邊形是 2/100/2。
      Course 4 Artist Var 9_instruction: |-
        Here's the algorithm to draw a triangle,
        modify it so it uses the "sides" variable instead. Replace the number 3
        with the "sides" variable. Hint: remember to use the "set sides to" block.
      Course 4 Artist Vars 1_instruction: |-
        你能幫我畫一個等邊三角形嗎？\r
        \r
        它的每條邊都正好一樣是100像素長。
      Course 4 Artist Vars 10_instruction: |-
        Here's an algorithm that draws a triangle
        out of smaller triangles. Can you modify it so that it uses the "sides"
        variable to draw each triangle? Look through the code, and every time you
        see the number 3, replace it with your "sides" variable. Remember to use
        the "set sides" block.
      Course 4 Artist Vars 11_instruction: 這裡是更複雜的程式，不過用的是和上個關卡相同的概念 - 你應該將 sides（邊）變數設成多少，才可以畫出這個用正方形組合出來的圖案呢？
      Course 4 Artist Vars 12_instruction: 我們將 sides（邊數）參數設為 5。添加到算式中的邊數越多，圖形就會變得愈大！注意這裡有另外一個參數叫做
        length（長度）。我們可以在「移動-向前」的地方用到它。將 length 設成 75 讓每個形狀的邊長變成 75。
      Course 4 Artist Vars 13_instruction: |-
        當一個圖形的邊愈多，每個邊的長度就要愈小，這樣你才能讓整個圖案顯示在畫面。\r
        我們來重建這個演算式來畫出神奇的圖案，取代原來需手動設置的 length（長度）變數，我們改用運算類型的積木和一個 sides（邊數）變數。這可以確保每個圖形都能完整顯示在畫面。每個多邊形的周長都是 300 像素。\r
        需要一些提示嗎？點擊這裡。
      Course 4 Artist Vars 14_instruction: |-
        自由發揮：讓我們一探究竟！現在你的演算法嵌入了又一個循環中。試著改變這兩個變數的值來畫出很酷的圖形。 \r
        \r
        如果想看到更好的效果，試試使用顏色積木！在循環裡面使用隨機取色，看看效果如何。
      Course 4 Artist Vars 2_instruction: 取代向前移動 150 像素，「移動」積木現在用了一個變數叫做 length（長度）。你可以將
        length 設為 150 以畫出這個新的三角形嗎？
      Course 4 Artist Vars 3_instruction: "Here's a loop that draws a square, but\nsomething's
        missing. Can you fix it so that it uses the variable \"length\"\nto figure
        out how long each side should be? "
      Course 4 Artist Vars 4_instruction: 現在我想要製作一個長方形，它的高是寬的 2 倍。這裡有個叫作 width（寬度）的變數，請把它設為
        100。你能用運算類別裡的積木來完成程式嗎？
      Course 4 Artist Vars 5_instruction: 使用變數 sides（邊數）來控制迴圈循環的次數。
      Course 4 Artist Vars 6_instruction: |-
        這是可以畫出任何規則多邊形的一些程式。有一個新的變數叫做 sides（邊），現在設定為 4。不管邊數是多少，你都能使用 sides 變數（隨著運算積木）來轉向正確的角度嗎？\r
        \r
        點擊此處以返回到提示！
      Course 4 Artist Vars 7_instruction: |-
        使用你在上個關卡學到的，用 sides（邊數）變數來建立這個六邊形。\r
        \r
        看看你在只修改 1 個值的情況下能否畫出一個三角形、正方形、五邊形或者八邊形？
      Course 4 Artist Vars 8_instruction: 自由發揮：嘗試改變這個圖形的邊數。你能改變算法，不管邊數是多少，都讓這個圖形的大小基本不變嗎？提示：如果你用長度除以邊數，這樣當邊數變多的時候，每條邊長會變短。
      Course 4 Artist Vars 9_instruction: |-
        Modify this algorithm so it uses the "sides"
        variable instead of a fixed number to draw a triangle. Don't forget to use
        the "set sides to" block.
      Course 4 Bee 1_instruction: |-
        蜜蜂分不出雲的下面有什麼！\r
        \r
        使用「如果」積木來檢查在雲底下的是不是花朵。\r
        \r
        取得花蜜，如果是花朵的話。
      Course 4 Bee 2_instruction: 使用「如果…否則」積木來檢查每個物品，看看它們是花朵還是蜂窩。如果是花朵，就收集一個花蜜…不然，就釀造一個蜂蜜。
      Course 4 Bee 3_instruction: 裡頭不是花朵就是蜂窩。這回，使用「如果…否則」積木。**如果**它是花朵，就收集一個花蜜；**否則**就收集一個蜂蜜。
      Course 4 Bee 4_instruction: |-
        This purple flower may have either 3, 2, or 1
        nectar. Here an if/else block is combined with another if/else block to create
        an "if/else-if/else" statement. Complete the solution to collect the unknown
        amount of nectar.
      Course 4 Bee 5_instruction: |-
        This purple flower may have either 3, 2, or 1
        nectar. Add an if-else block to create an if, else-if, else block. Complete
        the solution to collect the unknown amount of nectar.
      Course 4 Bee 6_instruction: |-
        This purple flower may have either 3, 2, or 1
        nectar. Create an if, else-if, else block to collect the unknown amount of
        nectar.
      Course 4 Bee 7_instruction: |-
        Use everything you have learned so far to collect
        all the nectar. The purple flower may have either 3, 2, or 1 nectar.
      Course 4 Bee For Loops 1_instruction: 使用一個迴圈來收集每個花朵上的花蜜。
      Course 4 Bee For Loops 10_instruction: 如果循環的數字是由大排到小，每次循環就會從計數器變量中減去間隔的值。如果要依序收集
        9、6、3 個花蜜，間隔數需要設成多少？
      Course 4 Bee For Loops 11_instruction: |-
        What's wrong with this loop? See if
        you can fix it and make the bee collect all the nectar.
      Course 4 Bee For Loops 2_instruction: 這是一種新的迴圈，叫做計數迴圈（for loop）。這種特別的迴圈會從 1
        數到 5，計數間隔為 1，每數一次就執行迴圈的內容一次。幫助蜜蜂採集到花蜜。
      Course 4 Bee For Loops 3_instruction: |-
        You can solve this puzzle by using a
        for loop to count from 1 to 3 by 1. Now let's go get some nectar!
      Course 4 Bee For Loops 4_instruction: |-
        Collect all of the nectar from these
        flowers. I wonder if there's an easier way to do this...
      Course 4 Bee For Loops 5_instruction: '啊，計數循環（for loop）讓事情變得簡單多了！使用「計數」變數來運行同樣多次數的「採集花蜜」積木。你需要的程式碼都在這兒，看一看它是如何放在一起的，然後點擊「運行」看看它怎麼工作。 '
      Course 4 Bee For Loops 6_instruction: 你也可以使用一個「計數迴圈」來倒數，試著從 5 數到 1，間隔數為 1 的方式來採集這些花蜜。
      Course 4 Bee For Loops 7_instruction: |-
        Use your for loop "counter" variable
        to control how far to move horizontally.
      Course 4 Bee For Loops 8_instruction: 你能使用迴圈的變數來控制移動及採集花蜜嗎？
      Course 4 Bee For Loops 9_instruction: 在你的計數迴圈上的最後一個數字叫做 increment（增量），每次過了一個循環，counter
        變數會依照增量的值改變。試試每次增量 2，以收集到這些花朵。
      Course 4 Bee Loops 5 NEW_instruction: 這裡有 3 朵花，你能找出你需要重複 3 次去收集花蜜的操作模式，在使用最少數量的積木情況來完成這個關卡嗎？
      Course 4 Bee Loops 5a NEW_instruction: 現在，使用迴圈來幫助蜜蜂在往蜂窩的路上採集所有的花蜜，盡可能使用最少的程式積木。當你到達目的地時，別忘了要釀成蜂蜜！
      Course 4 Bee Params 1_instruction: 寫一序列的指令以收集所有花蜜。使用 `get 3 nectar`（採集 3 個花蜜）這個函式，其功能為轉向，然後移動到目標並採花蜜，最後回到原本的位置。
      Course 4 Bee Params 2_instruction: 修改 get 3 nectar（採集 3 個花蜜）這個函式，讓我右轉找到花朵，而不是向左轉。
      Course 4 Bee Params 3 (copy 1)_instruction: 現在，兩邊都有花了！也許你可以用一個參數，讓同一個函式對兩邊的花都可以使用。我們已添加了一個叫做
        direction（方向）的參數到函式裡。如果這個 direction 參數等於 0，就會向左轉，如果它等於 1，就會向右轉。
      Course 4 Bee Params 3_instruction: '現在，兩邊都有花了！這裡有二個變量，分別是 left（左）、right（右）。同時我們已添加了一個叫做
        direction（方向）的參數到 get 3 nectar（採集 3 個花蜜）函式裡。編輯函式 get 3 nectar，當變量 left 或者
        right 傳遞進函數時，讓蜜蜂往正確的方向轉。  '
      Course 4 Bee Params 4 (copy 1)_instruction: 試試用你的新函式收集所有的花朵，記住，0 = left 和 1
        = right。
      Course 4 Bee Params 4 - Two WhenRun_instruction: 嘗試用你的新函式來收集所有的花朵。記得要用 left（左）和
        right（右）這兩個變數。
      Course 4 Bee Params 4 backup_instruction: 如果我們只用一個函式就能收集到所有花蜜的話，那不是很棒嗎？試著添加一個名為
        nectar（花蜜）的新參數到函式，來控制要採集的花蜜數量。你可能也會想為這個函式重新命名！
      Course 4 Bee Params 4_instruction: 嘗試用你的新函式來收集所有的花朵。記得要用 left（左）和 right（右）這兩個變數。
      Course 4 Bee Params 5_instruction: 讓我們從頭開始 - 你能建立一個含有 direction（方向）參數的 get 5
        nectar（拿 5 罐花蜜）的函式嗎？
      Course 4 Bee Params 6 (copy 1)_instruction: 試著使用你的新函式來收集所有的花蜜。
      Course 4 Bee Params 6_instruction: 如果我們只用一個函式就能收集到所有花蜜的話，那不是很棒嗎？試著添加一個名為 nectar
        units（花蜜數）的新參數到函式，來控制要採集的花蜜數量。你可能也會想為這個函式重新命名！
      Course 4 Bee Params 7 (copy 1)_instruction: 試著使用你的新函式來收集所有的花蜜。
      Course 4 Bee Params 7_instruction: 試著用你的新函式來收集所有的花蜜。
      Course 4 Bee Params 8 Clone 2_instruction: |-
        Oooh, now there's honey to deal
        with too! How could you update your function to either get nectar or make
        honey.
      Course 4 Bee Params 8 Clone_instruction: |-
        Oooh, now there's honey to deal
        with too! How could you update your function to either get nectar or make
        honey.
      Course 4 Bee Params 8 clone 3_instruction: |-
        Oooh, now there's honey to deal
        with too! How could you update your function to either get nectar or make
        honey.
      Course 4 Bee Params 8 new_instruction: |-
        Oooh, now there's honey to deal with
        too! How could you update your function to either get nectar or make honey.
      Course 4 Bee Params 8_instruction: 挑戰：現在還有蜂蜜也需要處理！重寫你的函式以使用相同數量的蜂蜜和花蜜。怎樣用這些數字來決定你應該做什麼？
      Course 4 Bee Params Ex_instruction: 試著用你的新函式來收集所有的花蜜。
      Course 4 Binary 1_instruction: 這裡的函式使用了一個由 1 和 0 組成的二進制字串，來指導農夫從左到右，從上到下移動。當數字是
        0 時會開啟方格。運行程式來看看農夫是怎樣通過二進制字串來畫圖的。
      Course 4 Binary 2_instruction: |-
        What binary string could you loop 8 times to
        draw this image? Hint: the number "1" fills a hole.
      Course 4 Binary 3_instruction: 你可以靠迴圈，只用 1 個二進制字元來畫出這個圖形嗎？
      Course 4 Binary 5 (copy 1)_instruction: 怎樣的二進制字串在重複 10 次後可以畫出這個圖形？
      Course 4 Binary 5_instruction: 怎樣的二進制字串在重複 10 次後可以畫出這個圖形？
      Course 4 Binary 6 (copy 1)_instruction: 怎樣的二進制字串在重複 10 次後可以畫出這個圖形？
      Course 4 Binary 6_instruction: 怎樣的二進制字串在重複 10 次後可以畫出這個圖形？
      Course 4 Binary 7_instruction: 怎樣的二進制字串在重複 10 次後可以畫出這個圖形？
      Course 4 Binary 8_instruction: |-
        You can complete the most of this image by
        looping a 5 bit binary number - then you'll need one more 4 bit number to
        get the bottom right-hand corner.
      Course 4 EC 1a_instruction: 沒有規則、沒有提示。只有挑戰！
      Course 4 EC 1b_instruction: 沒有規則、沒有提示。只有挑戰！
      Course 4 EC 2a_instruction: 沒有規則、沒有提示。只有挑戰！
      Course 4 EC 2b_instruction: 沒有規則、沒有提示。只有挑戰！
      Course 4 EC 2c_instruction: 沒有規則、沒有提示。只有挑戰！
      Course 4 EC 2d_instruction: 沒有規則、沒有提示。只有挑戰！
      Course 4 EC 3_instruction: '用你在上個關卡學到的來畫出像這樣的圖形。注意：如果你合併了參數，程式碼會變得更精簡。 '
      Course 4 EC 3a_instruction: 終極挑戰：沒有規則、沒有提示、只有挑戰！
      Course 4 Maze 1_instruction: 讓憤怒鳥抓到豬！
      Course 4 Maze 2_instruction: 小心 TNT 炸藥！
      Course 4 Maze 3_instruction: '為憤怒鳥編寫程式，想辦法讓他抓到豬。 '
      Course 4 Maze 4_instruction: 當你完成關卡後，試試看用「重複」積木來減少積木的使用數…
      Course 4 Maze 5_instruction: 你可以用最少的積木來完成這個關卡嗎？
      Course 4 Maze 6_instruction: 你可以用最少的積木來完成這個關卡嗎？
      Course 4 Play Lab For Loops 2_instruction: 這次，我們來試著算出從 1 到 100 的奇數。
      Course 4 Play Lab Params 1_instruction: 這裡有個函式叫做 `jump`（跳躍），它可以讓你的主要角色向上跳 100
        像素。運行這個程式，用方向鍵來控制小狗，並利用 `jump` 函式收集所有的旗幟。
      Course 4 Play Lab Params 10_instruction: "我們為你準備了最後一個函式。\\r\n\\r\n使用一個「如果」陳述式來編程你的遊戲，當
        player_score（玩家分數）達到了一定的數字後，就呼叫 level_up（升級）這個函式。\\r\n\\r\n例如 player_score
        > 6\\r\n\\r\n玩玩看這個遊戲，達到 level 3 你就可以移動到下個關卡。 "
      Course 4 Play Lab Params 2_instruction: |
        現在我們知道有些旗子太高了，跳不上去！讓我們使用「向上」、「向下」方向鍵來讓我們能夠跳躍不同的高度。\r
        \r
        我們添加一個 height（高度）參數到 jump（跳躍）函式裡，向上鍵用來讓小狗跳 200 像素高， 向下鍵用來讓小狗跳 100 像素高。
      Course 4 Play Lab Params 3_instruction: '我們已經添加另一個參數到 jump（跳躍）函式裡，這樣一來我們就可以在其他角色使用它。每個角色有個數字作代表，從
        1 開始算起。編輯這個 jump 函式，讓它使用 actor（角色）參數來讓正確的角色跳起來。 '
      Course 4 Play Lab Params 4_instruction: |-
        這裡有個函式叫做 `patrol`（巡邏）。
        \r
        \r
        編輯 `patrol` 讓貓能夠向上移動 400 像素，再向下 400 像素。
      Course 4 Play Lab Params 5_instruction: 編輯 patrol（巡邏）函式，加進一個 actor（角色）參數，這樣一來我們就可以為每個在畫面上的角色呼叫它。記住這些角色分別對應數字
        1、2、3。
      Course 4 Play Lab Params 6_instruction: 添加一個名為 speed（速度）的參數到 patrol（巡邏）函式中。試著在「設定速度」積木中使用新的參數，來幫助企鵝趕在其他動物前得到所有旗幟。
      Course 4 Play Lab Params 7_instruction: |-
        我們來點有趣的！仔細看看提供的程式碼，你能不能想像每個積木在做些什麼。 \r
        當你完成後，使用方向鍵來控制小狗，並收集到所有的旗子。 \r
        注意：
        你不需要對程式進行任何修改
      Course 4 Play Lab Params 8_instruction: 使用`當角色碰到`積木，在小狗碰到其他角色時，把狗送回左上方的位置。
      Course 4 Play Lab Params 9_instruction: "這是一個早先的遊戲，但是大部分程式都隱藏了。這裡有個新函式叫做 score_points（獲得分數）。\\r\n\\r\n編輯這個函式，使得
        points（分數）參數能被添加到 player_score （玩家分數）變數上。 \\r\n\\r\n變數 player_score 應該會在每次小狗的派碰到小貓時增加；在每次小貓的三明治碰到小狗時減少。
        \\r\n\\r\n注意：當你完成後，點擊「運行」玩玩看，當小狗得到 6 分時，就可以進入下一關。 "
      Course 4 Play Lab Vars 1_instruction: 這一次你不需要寫任何程式，只要點擊「運行」來玩這個遊戲！在這個遊戲裡，你扮演一隻狗，要想辦法比貓拿到更多的旗子。使用向下鍵來控制狗，點你玩完了，點擊「完成」。
      Course 4 Play Lab Vars 2_instruction: 上一關的比賽一點都不公平！修改 dog_speed 變數，確保你可以收集到比貓還要多的旗子，誰先拿到
        10 個旗子就勝利！
      Course 4 Play Lab Vars 3_instruction: 使用向左鍵和向右鍵移動、向上鍵是跳，看看你能不能收集到所有的旗子。
      Course 4 Play Lab Vars 4_instruction: 現在，我們使用了一個叫作 height（高度）的變數來控制小狗能跳躍的高度。更新
        height 變數來讓小狗能夠跳得夠高以碰到所有旗子。
      Course 4 Play Lab Vars 5_instruction: '讓我們來創造一個遊戲吧！首先我們需要計分，我們將分數設為 10 分。 '
      Course 4 Play Lab Vars 6 (copy 1)_instruction: |-
        Cool, now we've got our score
        variable, but how are we going to make it useful? How about adding to your
        score variable each time you hit the enemy with a fireball? Use the "when
        actor 2 touches anything" event to trigger an update to your score when your
        fireballs hit the cat. You can increment the score by setting score = score
        + 1. Get your score up to 10 (going one at a time!) to pass the level.
      Course 4 Play Lab Vars 6_instruction: |-
        使用向右鍵扔出派。\r
        \r
        在我們的遊戲中，要怎樣才能獲得分數呢？在每次小狗用派擊中小貓時，加 1 到你的 points 變數上。使用「當角色2碰到任何東西」事件來觸發分數更新。你可以利用「points = points +1」的方式增加變數值，分數到達 10 分（每次加 1 分）就過關。
      Course 4 Play Lab Vars 7_instruction: 很好，現在我們來確定這個遊戲不至於太簡單！每當小狗（角色1）被小貓（角色2）的三明治丟到時就扣
        1 分。初始分數 10 分似乎不大困難，我們把分數從 10 改成 0 後再試試吧。
      Course 4 Play Lab Vars 8 (copy 1)_instruction: |-
        Alright, one last thing for
        this game - let's set it up so the player can win (or lose). Use a forever
        loop to check the value of score - if score is ever greater that 20, make
        the enemy vanish. If the score is every less than 0, make the player vanish.
        Click "Finish" when the game works like you'd like it to.
      Course 4 Play Lab Vars 8_instruction: |-
        Let's set up this game so the Dog can
        win (or lose). Use a forever loop to check the value of score - if score is
        ever greater that 20, make the enemy (the Cat) vanish. If the score is ever
        less than 0, make the player (the Dog) vanish. Click "Finish" when the game
        works like you'd like it to.
      Course 4 Play Lab Vars 9_instruction: |-
        自由遊戲時間！這裡我們目前為止玩過的所有變數，還有一些是你可能想要的。\r
        \r
        注意現在在工具箱裡有好多好多可以被組合的積木！在這裡，我們已經將它們分類放好。花點時間去嘗試每一個東西，當你一切就緖，就可以用重複、變數、事件類的各種指令製作一個遊戲或是故事。\r
        \r
        提示：可以捲動頁面以查看工作區裡的所有指令。
      Course 4 Play Lab Vars_instruction: |-
        Alright, one last thing for this game
        - let's set it up so the player can win (or lose). Use a forever loop to
        check the value of score - if score is ever greater that 20, make the emeny
        vanish. If the score is every less than 0, make the player vanish.
      Course 4 Play Labs For Loops 1_instruction: 我們來讓狗從 1 叫到 100。使用計數迴圈（for loop）還有計數器積木，在每循環一次時就念出計數器變數當前數值。
      Course 4 Play Labs For Loops 2_instruction: 這一回，幫助小貓數數，從 1 算到 101，只要奇數。
      Course 4 Play Labs For Loops 3_instruction: 如果我們數大一點的數，也能在相同次數內完成它。試著讓小狗從 10
        數到 1000，每次增加 10。
      Course 4 Play Labs For Loops 4_instruction: |-
        Changing the increment can be
        helpful, but we're still counting linearly (each number is the same distance
        from the last) What if I wanted to count exponentially? Without changing the
        settings in this for loop, can you count 1, 4, 9 , 16, 25... (counter squared)?
      Course 4 Play Labs For Loops 4a_instruction: |-
        Now, let's blend the variables
        from Stage 7 together with your "counter" variable to make some magic happen.   \r
        \r
        In
        this puzzle, Dog will count from 0 to 1000 by "increment".  Set the "increment"
        variable to 10 at the beginning of your code to see what happens.
      Course 4 Play Labs For Loops 5_instruction: |-
        In the last stage we counted the
        square of each number. Try changing "counter ^ 2" to "counter ^ 3" to
        count the cube of each number (1, 8, 27, 64, 125, 216, 343…)
      Course 4 Play Labs For Loops 5a_instruction: |-
        In this puzzle, Dog will be your
        time keeper.\r
        \r
        Dog will count from 0 to 30 by "increment".  The "increment"
        variable will begin with a value of 1.\r
        \r
        Can you make it so that each
        time you click Dog, the increment increases by 2?  Click the forward arrow
        to run the for loop.\r
        \r
        Run the loop a couple of times, clicking Dog before
        each one.
      Course 4 Play Labs For Loops 6_instruction: |-
        You may recall that a prime number
        is any whole number that is only divisible by itself and 1. Use the "is_prime"
        function to speak out only the prime numbers from 1 to 100.
      Course 4 Play Labs For Loops 6a_instruction: |-
        Dog will still keep time by counting
        with our "for loop" by "increment", but this time, we will add The Wizard
        into the mix.  Can you change the code so that "increment" goes up by two
        each time The Wizard is clicked?\r
        \r
        Watch out!  The Wizard moves quickly!
      Course 4 Play Labs For Loops 7_instruction: 你可以用一個計數迴圈來幫助我數序列出 1, 4, 7, 10,
        13, 16, 19, 22, 25 嗎？
      Course 4 Play Labs For Loops 7a_instruction: |-
        Now we're getting somewhere!  What
        if we start counting how many times we can click The Wizard before Dog gets
        to 30?  \r
        \r
        Finish adding blocks to The Wizard so that every time he's
        clicked the variable "clicked" increases by one. You can ignore "increment"
        for now.\r
        \r
        Dog will start counting when you click "Run".
      Course 4 Play Labs For Loops 8_instruction: |-
        Now, help the actors move as they
        count.  \r
        \r
        Dog should move and count by adding 2 (counter + 2) each time.  Cat
        will move and count by multiplying by 2 (counter * 2)  each time. Penguin
        will move and count to the power of 2 (counter ^ 2) each time.  Who will reach
        their flag first?
      Course 4 Play Labs For Loops 8a_instruction: |-
        To finish our game, we need to
        bring back the "increment" variable!    Let's tie it to the level of the
        game.\r
        \r
        1) Keep track of the number of times The Wizard is clicked.\r
        2)
        If The Wizard is clicked at least 10 times before Dog counts to 30, raise
        "increment" by 1 and start again.\r
        3) If The Wizard does not get clicked
        at least 10 times, the game is over.
      Course 4 Playlab For Loop Freeplay_instruction: 自由發揮：使用目前為止你學會的一切製作一個遊戲，包括計數迴圈！
      Course 4 Playlab For Loops 4b_instruction: 你能修改迴圈中的**增量**，讓比賽變得更公平嗎？
      Course 4 Playlab For Loops 5b_instruction: 調整這些計數迴圈（for loops）的間隔數，以便這兩個角色最後到達完全相同的位置。
      Course 4 Playlab For Loops 6b_instruction: "編輯這個計數迴圈去創造一個你自己覺得好玩的遊戲！\\r\n點擊「運行」然後盡你所能的點擊獨角獸，你能超過我們的最高紀錄
        24 分嗎？ "
      Course 4 SCF 1_instruction: 使用建議的函式來畫出四列的六角形，注意到我們的偶數列是如何移動到右邊的嗎？
      Course 4 SCF 1a_instruction: 想想看，要怎樣用最少的積木收集到所有的花蜜？
      Course 4 SCF 1b_instruction: 想想看，要怎樣用最少的積木收集到所有的蜂蜜？
      Course 4 SCF 2_instruction: '用你在上個關卡學到的來畫出像這樣的圖形。注意：如果你合併了參數，程式碼會變得更精簡。 '
      Course 4 SCF 3 Fail 1_instruction: 你能想出如何......
      Course 4 SCF 3 Fail 2_instruction: 你能想出如何......
      Course 4 SCF 3_instruction: '用你在上個關卡學到的來畫出像這樣的圖形。注意：如果你合併了參數，程式碼會變得更精簡。 '
      Course 4 SCFL 1_instruction: 盡可能使用最少的程式積木來完成這個關卡。
      Course 4 SCFL 1a_instruction: 你能用最少的積木讓鼠奎特到達他的橡果園嗎？
      Course 4 SCFL 1b_instruction: 你能用最少的積木讓鼠奎特到達他的橡果園嗎？
      Course 4 SCFL 2_instruction: 盡可能使用最少的程式積木來完成這個關卡。
      Course 4 SCFL 3_instruction: 想想看，如何重複的繪製出這個圖？
      Course 4 SCFL 4_instruction: 想想看，如何重複的繪製出這個圖？
      Course 4 SCFL 5_instruction: 想想看，如何重複的繪製出這個圖？
      Course 4 SCFL 6_instruction: 想想看，如何用單一迴圈重複的繪製出這個圖？
      Course 4 SCFL 7_instruction: 小藝術家想要畫出海浪！想一想，要怎麼重建這個圖案？
      Course 4 SCFP 1_instruction: |-
        Create a function with parameters that allows
        the artist to jump backward and forward by x pixels, and also up and down
        by y pixels (using positive and negative numbers).
      Course 4 SCV 1_instruction: 點擊此處再次觀看說明。
      Course 4 SCV 2_instruction: 點擊此處再次觀看說明。
      Course 4 SCV 3_instruction: |-
        現在來玩個捉人遊戲！捉住小貓得 2 分、捉住企鵝得 3 分、得到 10 分就獲勝！ \r
        但是小心，當小貓和企鵝互相碰到時，他們就會把分數要回去。\r
        \r
        添加所需要的積木，讓這個遊戲按照解說那樣運行。怎樣讓小狗能用方向鍵往所有方向移動？怎樣在小狗捉住小貓或者企鵝時加分？怎樣在小貓和企鵝碰到時扣分？
      Course 4 SCV 4_instruction: 盡可能使用最少的程式積木來完成這個關卡。
      Course 4 SCV 5_instruction: 盡可能使用最少的程式積木來完成這個關卡。
      Course 4 SCV 6_instruction: 點擊此處再次觀看說明。
      Course 4 SCVP 1_instruction: |-
        Create a function with parameters that allows
        the artist to jump backward and forward by x pixels, and also up and down
        by y pixels (using positive and negative numbers).
      Course 4 Variables Assessment_instruction: |-
        Can you create this image using
        a variable for sides? Each line should be 50 pixels long.
      Course1BeePuzzle12_instruction: 讓我採3次花蜜來製作2次蜂蜜
      Course1MazeAssessment1_instruction: |-
        This is a test!\r
        Move one way, then
        another to get me to the pig
      Course1MazeAssessment2_instruction: |-
        This is a test!\r
        Move one way, then
        another to get me to the pig.
      CourseF_PlayLab_vars1_instruction: "To play this game, you don't have to write\nany
        code, just hit \"Run\"! "
      CourseF_PlayLab_vars10_instruction: |-
        Free Play time! Here are all of the variables
        we've played with so far in this stage, as well as a few more in case you
        want them. \r
        \r
        Notice that there are now so many blocks in our toolbox
        that they need to be organized!  Here, we've put each piece into an appropriate
        category.  Take some time to explore everything that is available. When you're
        done browsing, make a game or story using repeats, variables, and events.  \r
        \r
        Hint:
        scroll down to see all the commands in the workspace.
      CourseF_PlayLab_vars2_instruction: |-
        The race in that last puzzle wasn't very
        fair! Change the `dog_speed` variable to make sure you can collect more flags
        than Cat. The first to collect 10 flags wins!
      CourseF_PlayLab_vars3_instruction: 使用向左鍵和向右鍵移動、向上鍵是跳，看看你能不能收集到所有的旗子。
      CourseF_PlayLab_vars4_instruction: 現在，我們使用了一個叫作 height（高度）的變數來控制小狗能跳躍的高度。更新
        height 變數來讓小狗能夠跳得夠高以碰到所有旗子。
      CourseF_PlayLab_vars5_instruction: '讓我們來創造一個遊戲吧！首先我們需要計分，我們將分數設為 10 分。 '
      CourseF_PlayLab_vars6_instruction: |-
        使用向右鍵扔出派。\r
        \r
        在我們的遊戲中，要怎樣才能獲得分數呢？在每次小狗用派擊中小貓時，加 1 到你的 points 變數上。使用「當角色2碰到任何東西」事件來觸發分數更新。你可以利用「points = points +1」的方式增加變數值，分數到達 10 分（每次加 1 分）就過關。
      CourseF_PlayLab_vars7_instruction: |-
        使用向右鍵扔出派。\r
        \r
        在我們的遊戲中，要怎樣才能獲得分數呢？在每次小狗用派擊中小貓時，加 1 到你的 points 變數上。使用「當角色2碰到任何東西」事件來觸發分數更新。你可以利用「points = points +1」的方式增加變數值，分數到達 10 分（每次加 1 分）就過關。
      CourseF_PlayLab_vars8_instruction: |-
        使用向右鍵扔出派。\r
        \r
        在我們的遊戲中，要怎樣才能獲得分數呢？在每次小狗用派擊中小貓時，加 1 到你的 points 變數上。使用「當角色2碰到任何東西」事件來觸發分數更新。你可以利用「points = points +1」的方式增加變數值，分數到達 10 分（每次加 1 分）就過關。
      CourseF_PlayLab_vars9_instruction: |-
        Nice, now let's make sure this game isn't
        too easy to play. Any time Dog (actor 1) gets hit by a sandwich from Cat (actor
        2), you should lose a point. Start with 10 points so it's not too hard. Let
        your score drop down from 10 to 0 to pass the level.
      Crack Random Substitution_instruction: 說明
      Crack a Caesar Cipher_instruction: 說明
      D_Frozen_nested3_instruction: Let's spin that line of shapes around!
      D_Frozen_nested4_instruction: Time to layer those shapes!
      D_Frozen_nested5_instruction: Play with the snowflakes!
      D_Frozen_nested6_instruction: |-
        Draw a stair-step pattern that uses turns between
        75 and 105 degrees.
      D_Frozen_nested7_instruction: |-
        Now, turn around 180 degrees and draw the stair
        pattern again!
      D_Frozen_nested8_instruction: Spin that shape around 5 or 6 times in a circle.
      D_Frozen_nested9_instruction: |-
        Try playing around with what you've created.
        Draw whatever you like!\r
        - What happens if you use two different angles
        in your stair step pattern?\r
        - What happens if you make your diamond pattern
        longer or shorter?\r
        - What does it look like to draw two snowflakes on top
        of one another?
      ECSPD Binary Odometer_instruction: |-
        This is another resource you could use
        with your students.
      Eval Booleans 1_instruction: 布林運算子（像是 >、 <、 =）讓我們能夠比較不同的值，並返回 true 或 false。點擊「運行」來看看這個運算式的結果。
      Eval Booleans 2_instruction: |-
        Can you set the values so that this expression
        evaluates as true?
      Eval Booleans 3_instruction: |-
        The string-length function returns the number
        of characters in a string (including spaces!) - make this code evaluate to
        true.
      Eval Booleans 4_instruction: |-
        Here's an Evaluation Block called AND - it returns
        true if both of its parameters are true, otherwise it returns false. Edit
        the x variable so that this expression returns true.
      Eval Booleans 5_instruction: |-
        This OR block returns true if either of its parameters
        is true. Otherwise, if both parameters are false it will return false. Set
        the y variable to a value that will cause this expression to return false.
      Eval Booleans 6_instruction: |-
        Here's one more boolean block called NOT. This
        block flips true to false, or false to true. If you wrap this block of code
        in a NOT block, it should return true (because we are asking if the two expressions
        do NOT produce equal values).
      Eval Booleans Free Play_instruction: |-
        Free Play: Try out some creations of
        your own using Booleans.
      Eval Booleans_instruction: 布林值（Booleans）讓我們能夠比較不同的值，如果二者相等則返回 true；如果沒有則返回 false。你覺得這個程式運行後的結果會是什麼呢？
      Eval Cond 1_instruction: |-
        The cond block checks the boolean expressions in
        the left column, and as soon as it finds one that returns "true" it runs
        the corresponding code on the right. If none of the expressions evaluate to
        "true," it runs the bottom block. Update the "temperature" variable so
        that this block returns "It's just right."
      Eval Cond 2 (copy 1)_instruction: |-
        This condition returns a different shape
        based on the value of the "sides" variable - change the value of "sides"
        so that the conditional returns a triangle.
      Eval Cond 2_instruction: |-
        This condition returns a different shape based on
        the value of the "sides" variable - change the value of "sides" so that
        the conditional returns a triangle.
      Eval Cond 3 (copy 1)_instruction: |-
        Can you write a conditional that checks
        the variable "age" and returns "Old enough to vote and drive" if age >
        17, "Old enough to drive" if age is > 15, and "Can't drive or vote" if
        neither conditions is true. Hint: The first condition to return "true" wins
        - make sure you put your conditions in the right order.
      Eval Cond 3_instruction: |-
        Can you write a conditional that checks the variable
        "age" and returns "Old enough to vote and drive" if age > 17, "Old enough
        to drive" if age is > 15, and "Can't drive or vote" if neither conditions
        is true. Hint: The first condition to return "true" wins - make sure you
        put your conditions in the right order.
      Eval Cond 4_instruction: |-
        We can use the string=? function to make conditionals
        that respond to text input. Here's a function called green shape that takes
        a string for the type of shape. Complete the conditions so that the correct
        solid green shape is returned when the function is run with "circle", "triangle",
        "square", or "rectangle".
      Eval Cond 5_instruction: |-
        Here's a similar function red shape with an additional
        variable for size. Complete the conditionals so the correct solid red image
        of a given size is drawn for "circle", "triangle", and "star".
      Eval Cond 6_instruction: |-
        Write a function called food-critic, which takes
        in the name of a food and produces a String that says how you feel about that
        food. For example, (food-critic “pizza”) might evaluate to “delicious”, but
        (food-critic “rotten eggs”) might evaluate to “gross!”. Choose at least two
        foods to review, but you can you write more if you like!  Don’t forget to
        add an “else” clause!\r
        One example - and part of the definition -  has already
        been done for you!
      Eval Cond 7_instruction: |
        Free Play: Write a function called green-shape, which
        takes in the name of a shape and produces a solid green shape. Your function
        should work with at least “circle”, “star” and “rectangle”, but you can add
        other shapes if you like. You can choose the size of each shape. Don’t forget
        to add an “else” clause!\r
        One example - and part of the definition -  has
        already been done for you!\r
      Eval Cond 8_instruction: |
        Free Play: Suppose you want to own a car at 21, or
        have your own business by 30. Write a function called life-goals, which takes
        in an age and produces a string that describes your life goals by then. Don’t
        forget to add an “else” clause!\r
      Eval Contracts 1_instruction: |-
        Use the "star" function to produce a red star
        with a 60 pixel radius
      Eval Contracts 10A_instruction: |-
        Alright let's complete this puzzle with a
        Green Square that is 175 pixels in size.
      Eval Contracts 11A_instruction: |-
        Can you complete this puzzle to read "Hello
        World" in the banner?
      Eval Contracts 2_instruction: |-
        Check out the "rotate" function - can you
        use it to rotate this 90 pixel green square by 45 degrees?
      Eval Contracts 3_instruction: |-
        Try using the "text" function to write this
        teal text at size 40.
      Eval Contracts 4 A_instruction: |-
        The "scale" function returns an image that
        is scaled either larger or smaller than the input image. Try scaling this
        circle by a factor of 10 - how is the resulting image different than if you'd
        just made a circle of that size in the first place?
      Eval Contracts 4_instruction: |-
        The scale function returns an image that is
        either larger or smaller than the input image. Try scaling this circle by
        a factor of 10. How is the returned image different than if you'd just made
        a circle of that size in the first place?
      Eval Contracts 8A_instruction: |-
        Can you complete this puzzle? The big-triangle
        is 200 pixels in size and purple?
      Eval Contracts A_instruction: |-
        Use the star function to produce a solid red
        star with a 60 pixel radius
      Eval Contracts C_instruction: |-
        Check out the rotate function - can you use
        it to rotate this 90 pixel green square by 45 degrees?
      Eval Contracts E_instruction: |-
        Try using the text function to write "Hello,
        world!" in teal at size 40.
      Eval Contracts shrink_instruction: "Can you complete this image using the \"shrink\"\nfunction
        block? The radius is 20. "
      Eval Define Funcs 1_instruction: |-
        Here's a new function called green-triangle
        that takes a single Number for size and produces a green triangle. Use the
        new function to create a 125 pixel green triangle.
      Eval Define Funcs 2_instruction: |-
        Let's look inside that green-triangle function
        to see how it works. Can you modify it so that the green-triangle function
        always draws outlined green triangles?
      Eval Define Funcs 3_instruction: |-
        Here's the start of another new function
        called purple-circle with a domain of one Number (the radius) and a range
        of Image. The body of the function is broken though - fix it and then make
        a purple circle with 150 pixel radius
      Eval Define Funcs 4_instruction: |-
        Create a new function called aqua-star that
        has a Domain of a single Number for radius and returns an aqua star of the
        given radius. Run your new function with a radius of 75.
      Eval Define Funcs 5_instruction: |-
        Let's use that aqua-star function to make
        a row of different sized stars. From left to right, the stars should have
        radii of 25, 50, and 75.
      Eval Define Funcs Test_instruction: |-
        Here's the start of another new function
        called purple-circle with a domain of one Number (the radius) and a range
        of Image. The body of the function is broken though - fix it and then make
        a purple circle with 150 pixel radius
      Eval Defining Vars Free Play 1_instruction: |-
        Free Play: We've provided a function
        that fills your screen with my-image. Change my-image to see what patterns
        you can make.
      Eval Design Recipe .1_instruction: |-
        Here's a Design Recipe for a function
        called square-circle with domain Number String and range Image. Click Edit
        to write the function definition (you will see two examples provided).
      Eval Design Recipe 1 (copy 1)_instruction: |-
        We're going to write a function
        that draws a solid rectangle of any color that is twice wide as it is high.
        Start with an example - draw a solid green rectangle that has a height on
        100 pixels.
      Eval Design Recipe 1_instruction: |-
        Alright, now given the Contract wide-rect:
        Number String -> Image, write an example - draw a solid green rectangle that
        has a height of 100 pixels.
      Eval Design Recipe 2 (copy 1)_instruction: |-
        Let's do one more example before
        writing the function definition - this time draw a solid red rectangle with
        a height of 75 pixels.
      Eval Design Recipe 2_instruction: |-
        Let's do one more example before writing
        the function definition - this time draw a solid red rectangle with a height
        of 75 pixels.
      Eval Design Recipe 3_instruction: |-
        The Design Recipe for wide-rect already
        has a contract and one example. Can you write a second example and then complete
        the definition? The wide-rect function should produce a rectangle of given
        color that is twice as wide as it is high.
      Eval Design Recipe 4_instruction: |-
        Use the Design Recipe to create a function
        starburst. When given a number of points and an outer radius, starburst returns
        a yellow radial star with given points, and an inner radius that is half the
        outer radius.
      Eval Design Recipe 5_instruction: |-
        Using the Design Recipe, write a function
        striped-flag that takes two colors and produces a flag that is 250 pixels
        wide, 150 pixels tall, with three even horizontal stripes of given colors,
        in the order color2, color1, color2.
      Eval Design Recipe 6_instruction: |-
        Write a function large-polygon that should
        output a solid polygon of given sides and color that takes up most of the
        window, regardless of the number of sides. To make sure that the polygon doesn't
        get too large as you increase the number of sides, side length should be inversely
        proportional to side number, with a length of (800/sides).
      Eval Design Recipe Free Play_instruction: |-
        Free Play: Use the Design Recipe
        to create some functions of your own design
      Eval Free Play_instruction: 'Free Play: Make art with code!'
      Eval Strings Images .1_instruction: |-
        So far we've only dealt with a single
        type of data, Numbers. Another type of data is a String, which is any combination
        of letters, numbers, or other characters wrapped in quotation marks. Run the
        String "Hello, world!" and see what happens.
      Eval Strings Images .2_instruction: |-
        The string-append function takes two Strings
        and returns a single combined String. Add a String "Universe" to the second
        argument of string-append.
      Eval Strings Images 1_instruction: |-
        The third type of data we're going to
        use is an Image. This star function takes in a Number and two Strings, and
        it evaluates to an Image. Use this function to make a solid red star with
        radius of 100.
      Eval Strings Images 2_instruction: |-
        Free Play: Every Evaluation Block is color-coded
        to let you know which data type it returns and which types it needs for its
        parameters. The last parameter of the triangle function takes a String that
        controls its color - try some different colors to see what works.
      Eval Strings Images 3_instruction: |-
        Some functions can only take a specific
        set of Strings, such as the second argument of this circle function, which
        controls its style. Draw this orange outline circle using the special String
        block with a dropdown to make sure you only use valid styles.
      Eval Strings Images 4_instruction: |-
        Try using the rectangle block to draw this
        solid, red rectangle - it is 175 pixels wide and 100 pixels tall.
      Eval Strings Images 5_instruction: |-
        Try using this new Evaluation Block called
        overlay to place a 100 pixel white triangle on top of a 200 pixel red circle.
      Eval Strings Images 6_instruction: |-
        Use the overlay block to place a 75 pixel
        radius yellow star on top of a 150 pixel long blue square.
      Eval Strings Images 7_instruction: |-
        The offset block lets you move an image
        relative to where it would normally be placed. Use this block to offset the
        square by 100 pixels on the y-axis.
      Eval Strings Images 8_instruction: |-
        Here's a different kind of star block
        - it's called radial-star and it allows you to draw stars with any number
        of points! Use it to create a 7 point solid orange star with an inner radius
        of 75 pixels and an outer radius of 175 pixels.
      Eval Strings Images Free Play_instruction: |-
        Free Play: Explore the blocks available
        to create something interesting. Make sure to share your favorite creations.
      Farmer for Authored Hint testing_instruction: |-
        Wow, I found a really deep hole!
        I don't know how many shovelfuls of dirt it needs.  Can you write a program
        that fills it until the ground is even?  Hint:  Try using the while loop this
        time.
      Farmer for TTS testing_instruction: |-
        Wow, I found a really deep hole! I don't
        know how many shovelfuls of dirt it needs.  Can you write a program that fills
        it until the ground is even?  Hint:  Try using the while loop this time.
      Finalize Your Chaser Game v.1_instruction: |-
        Introducing the setPosition command!
        Replace the moveTo in the button-click event handler to use setPosition to
        move the button itself to a random location when it's clicked.
      Find the Wizard_instruction: 做你喜歡的任何東西。比方說一個猜數字遊戲！
      Find the Wizard_2018_instruction: |-
        Build whatever you want. This is an example
        of a number-guessing game!
      Food Fight!_instruction: "We've added one last function for you. \\r\n\\r\nUse\nan
        \"if\" statement to program your game to call the \"level_up\" function\nonly
        when \"player_score\" becomes greater than a certain number.\\r\n\\r\nFor\nexample:
        \"player_score\" > 6\\r\n\\r\nPlay the game, and make it to level 3\nto move
        to the next puzzle. "
      Food Fight_instruction: |-
        You can make whatever you want in play lab! This is
        an example of a game you can make in play lab.
      FoodFight_instruction: 這是一個遊戲範例，你也可以在 play lab 裡自己做一個。
      FoodFight_2018_instruction: |-
        This is an example of a game you can make in play
        lab.
      Frequency Analysis_instruction: Test
      Function intro Ryan_instruction: 使用「建造橋樑」功能兩次，以開闢路徑前往火把。
      GLJ Drag and fall_instruction: |-
        This Corgi has been a good boy! Drag this carrot
        to him as a special treat.
      GLJ Dragity_instruction: |-
        This Corgi has been a good boy! Drag this carrot
        to him as a special treat.
      GLJ Flappy2_instruction: Click to flap - don't touch the ground!
      GLJr_Behavior_1_instruction: |-
        On your worksheet, write what you think the dog
        will do when you click "Run."
      GLJr_Behavior_2_instruction: |-
        Now you have some new blocks! Try them out and
        see how they work. On your worksheet, write down which ones you tried, and
        what they do.
      GLJr_Behavior_5_instruction: |-
        Now we have two sprites! Use behaviors to make
        the dog jittery and make the cat wander
      GLJr_Behavior_6_instruction: |-
        Let's try some more behaviors - make the dog
        run up and make the cat run right.
      GLJr_Forever_1_instruction: |-
        On your worksheet, write what you think the dog
        will do when you click "Run."
      GLJr_Forever_2_instruction: |-
        Now you have some new blocks! Try them out and
        see how they work. On your worksheet, write down which ones you tried, and
        what they do.
      GLJr_Forever_5_instruction: |-
        Now we have two sprites! Use a loop to make the
        dog jittery and make the cat wander
      'Game Lab Workshop: Random_instruction': |-
        Pick a shape block and use calls
        to randomNumber() in place of one or more of the parameters. Maker sure you
        run it a few times so you can see the effect of randomization.
      Geometric Pattern_instruction: |-
        Project Idea: Create a pattern using geometric
        ideas like shapes. This requires persistence and planning!
      Geometric Sun_instruction: |-
        Project Idea: Create a pattern using geometric
        ideas like shapes. This requires persistence and planning!
      Geometric Sun_2018_instruction: |-
        Project Idea: Create a pattern using geometric
        ideas like shapes. This requires persistence and planning!
      Get To The Goal_instruction: 做你喜歡的任何東西。比方說一個猜數字遊戲！
      'Grade 4 Example PlayLab Project #1_instruction': |-
        Take a look at this project.  Do
        you see how it was made?
      'Grade 4 Example PlayLab Project #2_instruction': |-
        Take a look at this project.  Do
        you see how it was made?
      Guess The Number 2_instruction: |-
        Build whatever you want. This is an example
        of a number-guessing game!
      Guess The Number_instruction: |-
        Build whatever you want. This is an example
        of a number-guessing game!
      Guess The Number_2018_instruction: |-
        Build whatever you want. This is an example
        of a number-guessing game!
      Harvester Test_instruction: |-
        It's harvest time! But I forgot what crop I planted
        at which tile. Please help me harvest all my crops, no matter how they were
        originally planted!
      Harvesting_instruction: |-
        Uh oh, I lost my map and can't remember what I planted.
        Every sprout could grow up to be corn, beans, or pumpkins. Can you write some
        code to pick all the crops, no matter what they are?
      Infinity_catch_instruction: 您能用方向鍵控制艾莎（角色2），讓她追上安娜嗎？
      Infinity_finale_instruction: 自由發揮吧！然後把您的成果分享出來！
      Infinity_move_collide_instruction: 阿廣是「角色1」，讓他向右走到杯麵那裡，然後在他們碰面時播放一個音效。
      Infinity_move_directions_instruction: 杯麵是「角色2」。添加移動積木讓杯麵可以透過方向鍵移動。讓它走向其它兩個角色。
      Infinity_move_right_instruction: 阿廣是「角色1」，用「移動」積木來移動阿廣往右走以碰到杯麵。
      Infinity_repeat_instruction: 用「重複無限次」積木讓安娜不停的上下移動 400 像素。
      Infinity_say_instruction: 用「說出」積木讓安娜說 Hi there.。
      Infinity_shoot_instruction: 杯麵是「角色2」。讓杯麵對著阿廣發射火箭吧！
      Infinity_shoot_directions_instruction: 阿廣是「角色3」，讓阿廣對著其他四個角色各發射一個東西出去，每一次發射後都等
        1 秒再發射下一個。
      Infinity_test_instruction: This is a test Infinity level.
      Infinity_touch_faster_instruction: 觸碰更多的雪花！
      Infinity_touch_four_instruction: 上、下、左、右移動安娜去碰四個雪花。
      Infinity_touch_score_instruction: 讓安娜去碰雪花，每次碰到就得一分。點擊「運行」後，就用方向鍵去控制安娜讓她得分吧！
      Inspirational Artwork_instruction: "Free Play Inspiration: You've now learned\neverything
        you need to know to make a pattern like this! If this picture inspires\nyou,
        try to make something similar. Otherwise, create something all your own.\\r\n\n\\r\nWant
        to know how our inspiration pattern was made? "
      InspirationalArtwork_instruction: 如果這個圖形給了你靈感，試著自己做一個類似的。或者，你也可以隨意的創作。
      InspirationalArtwork_2018_instruction: |-
        If this picture inspires you, try to
        make something similar. Otherwise, create something all your own.
      'Internet Simulator: Broadcast Mode_instruction': |
        Now use the Internet Simulator
        to send the battleship moves. For setup, join a Room with your group, and
        add ships to your paper board for each opponent. When playing, all communication
        must be done through the tool, so no talking, but have fun!\r
      'Internet Simulator: Broadcast_instruction': |
        Now use the Internet Simulator
        to send the battleship moves. For setup, join a Room with your group, and
        add ships to your paper board for each opponent. When playing, all communication
        must be done through the tool, so no talking, but have fun!\r
      'Internet Simulator: Broadcast_2018_instruction': |
        Now use the Internet Simulator
        to send the battleship moves. For setup, join a Room with your group, and
        add ships to your paper board for each opponent. When playing, all communication
        must be done through the tool, so no talking, but have fun!\r
      'Internet Simulator: DNS Mode_instruction': |-
        In this version of the Internet
        Simulator, a Domain Name System (DNS) is provided for you and knows the IP
        addresses of all connected computers. Send a message in the form GET [hostname]
        to the DNS service at address <yourRouterNumber>.15 to get a student's address.
      'Internet Simulator: DNS_instruction': |-
        In this version of the Internet Simulator,
        a Domain Name System (DNS) is provided for you and knows the IP addresses
        of all connected computers. Send a message in the form GET [hostname] to the
        DNS service at address <yourRouterNumber>.15 to get a student's address.
      'Internet Simulator: DNS_2018_instruction': |-
        In this version of the Internet
        Simulator, a Domain Name System (DNS) is provided for you and knows the IP
        addresses of all connected computers. Send a message in the form GET [hostname]
        to the DNS service at address <yourRouterNumber>.15 to get a student's address.
      'Internet Simulator: Packets_instruction': |-
        Develop a Protocol for Reliably
        Sending a Message.\r
        \r
        Constraints:\r
        - Packets may contain only 8 characters\r
        -
        Packets may drop with small probability\r
        - Packets may not arrive in order
      'Internet Simulator: Packets_2018_instruction': |-
        Develop a Protocol for Reliably
        Sending a Message.\r
        \r
        Constraints:\r
        - Packets may contain only 8 characters\r
        -
        Packets may drop with small probability\r
        - Packets may not arrive in order
      'Internet Simulator: Routers_instruction': |-
        Send messages with your classmates
        (Click to see full instructions)
      'Internet Simulator: Routers_2018_instruction': |-
        Send messages with your classmates
        (Click to see full instructions)
      'Internet Simulator: Sending Binary Messages 1_instruction': "Develop, document,\nand
        test a protocol that allows you to use Internet Simulator to relay a message.\nSee
        the worksheet for more detailed instructions.  "
      'Internet Simulator: Sending Binary Messages_instruction': "Develop, document,\nand
        test a protocol that allows you to use Internet Simulator to relay a message.\nSee
        the worksheet for more detailed instructions.  "
      'Internet Simulator: Sending Binary Messages_2018_instruction': "Develop, document,\nand
        test a protocol that allows you to use Internet Simulator to relay a message.\nSee
        the worksheet for more detailed instructions.  "
      'Internet Simulator: Sending Numbers_instruction': |-
        With your partner, develop
        a protocol or set of rules for communicating a drawing using only bits. See
        the worksheet handed out by your teacher for more detailed instructions!
      'Internet Simulator: Sending Numbers_2018_instruction': |-
        With your partner,
        develop a protocol or set of rules for communicating a drawing using only
        bits. See the worksheet handed out by your teacher for more detailed instructions!
      'Internet Simulator: Sending Text_instruction': |-
        Work with a partner or in
        a small team to develop a protocol that allows you to send formatted text.
        See the worksheet handed out by your teacher for more detailed instructions!
      'Internet Simulator: Sending Text_2018_instruction': |-
        Work with a partner or
        in a small team to develop a protocol that allows you to send formatted text.
        See the worksheet handed out by your teacher for more detailed instructions!
      Just for Testing_instruction: Test instructions
      K-1 Artist 1 Assessment 1_instruction: 繪製一條短線條在上及一條長線條在右！
      K-1 Artist Loops 1_instruction: 向東移動 4 次來畫出這條線。
      K-1 Artist Loops 2_instruction: 現在，使用一個迴圈畫出相同的線條。
      K-1 Artist Loops 3_instruction: 你可以讓這些積木循環執行到畫出 6 條線嗎？
      K-1 Artist Loops 4_instruction: 能用一個迴圈幫助我們畫出這座城堡的頂端嗎？
      K-1 Artist Loops 5_instruction: 將哪些積木重複 4 次才能畫出這些樓梯？
      K-1 Artist Loops 6_instruction: 這裡需要用到 2 個迴圈：一個用來上樓梯，另一個用來下樓梯。
      K-1 Artist Loops 7_instruction: 迴圈可以幫你完成這個圖案。
      K-1 Artist Loops 8_instruction: 這個樓梯的踏面比較長。
      K-1 Artist Loops 9_instruction: 要畫出這些樓梯，最簡單的方式是什麼？
      K-1 Artist Loops Free Play_instruction: 自由發揮，畫些有趣的東西！
      K-1 Artist1 1_instruction: 用一條線畫出這個人的腳
      K-1 Artist1 10_instruction: 用畫線和跳躍來畫出通往寶藏記號 X 的虛線路徑。
      K-1 Artist1 2_instruction: 用 2 條線畫出貓的鬍鬚！
      K-1 Artist1 3_instruction: 往東畫 2 條線再往北畫 2 條線來完成這間房子！
      K-1 Artist1 4_instruction: 向上下左右方畫線，完成城堡！
      K-1 Artist1 5.5_instruction: 使用短線條來完成城堡的第三座塔樓。
      K-1 Artist1 5_instruction: 用 2 條線來畫出這朵花的莖！
      K-1 Artist1 6_instruction: 用「跳躍」積木來完成這張圖片！
      K-1 Artist1 7_instruction: 使用跳躍積木可以向前移動但不會畫線。向前跳之後再畫一條線。
      K-1 Artist1 8_instruction: 用「跳躍」和「畫線」積木來畫出虛線。
      K-1 Artist1 9_instruction: 利用繪製和跳躍積木來完成虛線。
      K-1 Artist1 Assessment 1_instruction: 畫出短線條和長線條！
      K-1 Artist1 Assessment 2_instruction: 畫出短的虛線線條！
      K-1 Artist2 1_instruction: 在三角形底下畫一個正方形。
      K-1 Artist2 2_instruction: 跳躍並在房子旁畫出一個正方形。
      K-1 Artist2 3_instruction: 在其他的正方形上方再畫另一個正方形
      K-1 Artist2 4_instruction: 畫出一個長方形來完成這座橋。
      K-1 Artist2 5_instruction: 畫出一個長方形來完成這座橋的支柱
      K-1 Artist2 6_instruction: 藉由畫 2 個正方形來做出一個長方形！
      K-1 Artist2 Assessment1_instruction: 評量：在正方形的旁邊再畫另一個正方形。
      K-1 Artist2 Free Draw_instruction: 自由發揮吧！
      K-1 Artist2_7_instruction: 畫出一個長方形來完成梳妝台上的抽屜！
      K-1 Bee 1_instruction: 讓我移動到花朵那兒，採集花蜜，再到蜂窩那兒，製作蜂蜜。
      K-1 Bee 10_instruction: 採集 4 個花蜜，然後釀造 2 個蜂蜜！
      K-1 Bee 11.5_instruction: 採集 4 個花蜜，然後釀造 4 個蜂蜜！
      K-1 Bee 11_instruction: 採集 3 個花蜜然後釀成 1 個蜂蜜
      K-1 Bee 12_instruction: 採集 3 個花蜜然後釀成 2 個蜂蜜！
      K-1 Bee 13_instruction: 採集 3 個花蜜然後釀成 1 個蜂蜜！
      K-1 Bee 14_instruction: 帶我到花朵那兒採集花蜜，再帶我到蜂窩那兒釀造蜂蜜！
      K-1 Bee 15_instruction: 採集 2 個花蜜然後釀成 2 個蜂蜜！
      K-1 Bee 2_instruction: 讓我移動到花朵那兒，採集花蜜，再到蜂窩那兒，製作蜂蜜。
      K-1 Bee 3_instruction: 讓我移動到花朵那兒，採集花蜜，再到蜂窩那兒，製作蜂蜜。
      K-1 Bee 4_instruction: 採集 2 個花蜜然後釀成 2 個蜂蜜！
      K-1 Bee 5_instruction: 採集 3 個花蜜然後釀成 3 個蜂蜜
      K-1 Bee 6_instruction: 採集 2 個花蜜然後釀成 2 個蜂蜜！
      K-1 Bee 7_instruction: 採集 3 個花蜜然後釀成 2 個蜂蜜！
      K-1 Bee 8_instruction: 採集 2 個花蜜然後釀成 2 個蜂蜜！
      K-1 Bee 9_instruction: 採集 2 個花蜜然後釀成 2 個蜂蜜！
      K-1 Bee Assessment 1_instruction: 採集花蜜以釀成蜂蜜！
      K-1 Bee Assessment 2_instruction: 採集花蜜以釀成蜂蜜！
      K-1 Bee Loops 1_instruction: 採集花蜜並釀成蜂蜜！
      K-1 Bee Loops 10_instruction: 收集所有的花蜜及蜂蜜。
      K-1 Bee Loops 11_instruction: 收集全部的花蜜和蜂蜜！
      K-1 Bee Loops 12_instruction: 收集所有的花蜜以及所有的蜂蜜。
      K-1 Bee Loops 2_instruction: 使用一個「重複」迴圈來移動、接著採集花蜜、然後釀造蜂蜜！
      K-1 Bee Loops 3_instruction: 使用 3 個「重複」迴圈來採集花蜜和釀造蜂蜜！
      K-1 Bee Loops 4_instruction: 使用「重複」迴圈來採集花蜜、釀造蜂蜜、接著移動！
      K-1 Bee Loops 5_instruction: 使用「重複」迴圈讓我收集到花蜜和蜂蜜！
      K-1 Bee Loops 6_instruction: 使用一個「重複」迴圈來採集花蜜、釀造蜂蜜、接著移動！
      K-1 Bee Loops 7_instruction: 採集花蜜並釀成蜂蜜！
      K-1 Bee Loops 8_instruction: 採集花蜜並釀成蜂蜜！
      K-1 Bee Loops 9_instruction: 採集所有的花蜜並全部釀成蜂蜜。
      K-1 Bee Loops Assessment 1_instruction: 採集花蜜以釀成蜂蜜，並使用迴圈來移動！
      K-1 Bee Loops Assessment 2_instruction: 使用迴圈採集花蜜以釀成蜂蜜！
      K-1 Bee Puzzle 12_instruction: 讓我採3次花蜜來製作2次蜂蜜
      K-1 Building a Foundation Assessment_instruction: |-
        建一個三層的金字塔。
        沒有說明，完成它就對了！
      K-1 Maze 10_instruction: '繞開 TNT 炸藥，讓我抓到豬！ '
      K-1 Maze 11_instruction: 沿著路走，讓我抓到那隻蠢豬，當心別碰到 TNT 炸藥，不然我的羽毛會滿天飛！沒看到牠嗎？牠在我的南邊。
      K-1 Maze 2_instruction: 讓我往東邊移動，我要抓到這頭豬！
      K-1 Maze 3_instruction: 讓我往南邊移動，我要抓到這頭豬！
      K-1 Maze 4_instruction: 讓我往北邊移動，我要抓到這頭豬！
      K-1 Maze 5_instruction: 讓我往東邊移動，我要抓到這頭豬！
      K-1 Maze 6_instruction: 先往一個方向移動，接著再往另一個方向移動，讓我抓到那頭豬。
      K-1 Maze 7_instruction: 先往一個方向移動，接著再往另一個方向移動，讓我抓到那頭豬。
      K-1 Maze 8_instruction: 先往一個方向移動，接著再往另一個方向移動，讓我抓到那頭豬。
      K-1 Maze 9_instruction: 先往一個方向移動，接著再往另一個方向移動，讓我抓到那頭豬。
      K-1 Maze Assessment 1_instruction: 評量：抓住那頭豬！
      K-1 Maze Assessment 12_instruction: 評量級別
      K-1 Maze Assessment 13_instruction: 評量級別
      K-1 Maze Assessment 2_instruction: 評量：抓住那頭豬！
      K-1 Maze Loops 1_instruction: 讓我抓到那隻豬！
      K-1 Maze Loops 10_instruction: 讓我抓到那隻豬！用「重複」迴圈會讓問題更容易解決。
      K-1 Maze Loops 11_instruction: |-
        讓我抓到那隻豬！\r
        用「重複」迴圈會讓這件事變得更容易。
      K-1 Maze Loops 12_instruction: 讓我抓到那隻豬！用「重複」迴圈會讓問題更容易解決。
      K-1 Maze Loops 2_instruction: 使用`重複`積木讓我抓到豬！
      K-1 Maze Loops 3_instruction: 讓我抓到那隻豬！一定要用重複迴圈。
      K-1 Maze Loops 4_instruction: 讓我抓到那隻豬！
      K-1 Maze Loops 5_instruction: 讓我抓到那隻豬！一定要用重複迴圈。
      K-1 Maze Loops 6_instruction: 讓我抓到那隻豬！一定要用重複迴圈。
      K-1 Maze Loops 7_instruction: 讓我抓到那隻豬！一定要用重複迴圈。
      K-1 Maze Loops 8_instruction: 使用「重複」迴圈讓我抓到豬。
      K-1 Maze Loops 9_instruction: 讓我抓到那隻豬！
      K-1 Maze Loops Assessment 1_instruction: 我們來看看你學得怎麼樣！使用「重複」迴圈來讓我抓到這頭豬！
      K-1 Maze Loops Assessment 2_instruction: 使用「重複」迴圈讓我抓到豬！
      K-1 Maze Multi 14_instruction: 評量級別
      K-1 Maze Multi 15_instruction: 評量級別
      K-1 Maze Sequence Assessment 1_instruction: |-
        讓我們看看你學得如何！\r
        先往一個方向移動，再往另一個方向移動，讓我到達豬的位置。
      K-1 Maze Sequence Assessment 2_instruction: 先往一個方向移動，接著再往另一個方向移動，讓我抓到那頭豬。
      K-1 Maze debug Assessment 1_instruction: 評量：透過重新排列並增加程式積木來除錯，讓我抓到豬！
      K-1 artist 1 level 10_instruction: 用「跳躍」和「畫線」積木來畫出虛線。
      K-1 artist 1 level 9_instruction: 用 3 行程式碼畫出這張圖
      K-1 maze debug 1_instruction: 修改程式，讓為能到達豬的位置！
      K-1 maze debug 10_instruction: 找出這個關卡的錯誤，重新調整積木的順序，並添加積木，讓使我能移動到豬那兒！
      K-1 maze debug 11_instruction: |-
        這是個測驗！\r
        用重新排列、更換積木的方式來除錯，讓我抓到這隻豬。
      K-1 maze debug 2_instruction: 找找看遺失了哪些積木，添加積木以到達豬那兒！
      K-1 maze debug 3_instruction: 有些地方不大正確，移除這些程式積木，讓我抓到這隻豬！
      K-1 maze debug 4_instruction: 運行並檢查這些程式積木，修正他們！我想我或許是走錯方向了。
      K-1 maze debug 5_instruction: 在這個關卡中，重新更改程式積木的順序並增加程式積木來除錯，使我能走到豬在的地方!
      K-1 maze debug 6_instruction: 找出這個關卡的錯誤，重新調整積木的順序，並添加積木，讓使我能移動到豬那兒！
      K-1 maze debug 7_instruction: 找出這個關卡的錯誤，重新調整積木的順序，並添加積木，讓使我能移動到豬那兒！
      K-1 maze debug 8_instruction: 找出這個關卡的錯誤，重新調整積木的順序，並添加積木，讓使我能移動到豬那兒！
      K-1 maze debug 9_instruction: 找出這個關卡的錯誤，重新調整積木的順序，並添加積木，讓使我能移動到豬那兒！
      K2.0 sequence 1_instruction: 有個臭蟲（bug，程式中有錯誤的意思）！修正這個程式讓我到豬豬那兒。
      K2.0 sequence 10_instruction: |-
        Challenge: Move me around the TNT to get to
        the pig.
      K2.0 sequence 12_instruction: 'Let''s get that pig! '
      K2.0 sequence 2_instruction: 修正這個程式，使我能到達豬的位置！
      K2.0 sequence 3_instruction: |-
        Something is not quite right. REMOVE a block
        to get me to the pig!
      K2.0 sequence 4_instruction: |-
        Time for a shorter puzzle!  Move one way, then
        another to get me to the pig.
      K2.0 sequence 4a_instruction: Try this puzzle again from the start!
      K2.0 sequence 5_instruction: 先往一個方向移動，接著再往另一個方向移動，讓我抓到那頭豬。
      K2.0 sequence 6_instruction: 找找看遺失了哪些積木，添加積木以到達豬那兒！
      K2.0 sequence 7_instruction: |
        Debug this level by changing a block to get me
        to the pig!
      K2.0 sequence 8_instruction: |-
        Debug this level by adding blocks to get me to
        the pig!
      K2.0 sequence 9_instruction: '挑戰：繞開 TNT 炸藥，讓我抓到豬！ '
      K2.0 sequence FP_instruction: |-
        Now figure out how to get the pig any way you
        can!
      K2.0 sequence pre_instruction: |-
        Play with these blocks to see if you can get
        me to the pig!
      KIKI GLJ Test Response_instruction: |
        Look carefully at the code below.  What
        do you think the plane will do when you click "Run"?\r
      KTest1_instruction: Can you make me move South once more to get to the pig?
      KTest2_instruction: |-
        Trace the path and lead me to the silly pig. Avoid TNT
        or the feathers will fly!
      Kiki_StarWars_Test_3_instruction: 文字
      Kiki_StarWars_Test_4_instruction: 文字
      Kiki_StarWars_Test_5_instruction: 文字
      Kiki_StarWars_Test_5_Example_instruction: 文字
      LaurelDebugging4Video1_instruction: 移動 Laurel，幫助牠找到愈多的黃金愈好！
      Limited Quantity of Blocks Test_instruction: |-
        Get me to the pig by adding only
        one block
      Luigi's Pizza 1_instruction: |-
        Welcome to Luigi's Pizza! To order a pizza,
        type the name of a topping into the cost function, and we'll return the price
        of that pizza. Try ordering a pepperoni pizza to start.
      Luigi's Pizza 2 (copy 1)_instruction: |-
        Right now there are only four choices
        available at Luigi's pizza - let's fix that! Add a couple of new toppings
        to the conditional block in the "cost" function. Once you've added your
        toppings, test out the function to make sure it works.
      Luigi's Pizza 2_instruction: |-
        Right now there are only four choices available
        at Luigi's pizza - let's fix that! Add a couple of new toppings to the conditional
        block in the cost function. Once you've added your toppings, test out the
        function to make sure it works.
      Luigi's Pizza 3 (copy 1)_instruction: |-
        That's better, everyone loves more
        variety in their pizza toppings! But you still can't please everyone, and
        folks are coming in to order toppings that Luigi doesn't have. Instead of
        saying no to those people, could you update the "else" clause so that we
        charge them a premium for toppings that we don't normally offer?
      Luigi's Pizza 3_instruction: |-
        That's better, everyone loves more variety in
        their pizza toppings! But you still can't please everyone, and folks are
        coming in to order toppings that Luigi doesn't have. Instead of saying no
        to those people, could you update the else clause so that we charge them a
        premium for toppings that we don't normally offer? Let's charge $10,000
        for a topping we don't carry.
      Luigi's Pizza 4_instruction: |-
        Free Play: What can you do to make Luigi's cost
        function even more useful?
      MC Agent Freeplay_instruction: "**自由遊戲：**是自己探索的時候了！"
      MC HOC 2016 Level 10_instruction: 是時候讓你打造自己的 Minecraft 啦！你可以生成生物，讓牠們做你要牠們做的事，好好享受遊戲吧！
      MC HOC 2016 Level 2-2_instruction: 讓呆住的雞動起來。在`當生成時`裡放置`移動`和`轉向`積木。
      MC HOC 2016 Level 3_instruction: |
        好極了，雞動起來了！不過現在牠又停住了。
        要讓雞走來走去的方式是，使用`重複無限次`指令。
        \r
      MC HOC 2016 Level 4_instruction: 現在雞都朝同個方向移動，看起來有點怪吧，你可以利用`隨機移動`、`隨機轉向`，讓牠們看起來更真實。
      MC HOC 2016 Level 5_instruction: 這些乳牛迷路了！在`重複無限次`中放置`移動一步-向目標`積木，將牠們引領到草地。
      MC HOC 2016 Level 6_instruction: 現在請使用`生成`積木製造殭屍。在夜晚降臨時製造 3 個殭屍，並讓它們向你移動。喔，在天亮前，請保住你的小命。
      MC HOC 2016 Level 8_instruction: 到綿羊那邊的路被石牆擋住了。幸好這裡有一個苦力怕。苦力怕在你碰觸後就會爆炸。利用苦力怕炸掉牆壁，你才能到達羊旁邊！
      MC HOC 2016 New Drop_instruction: 在 Minecraft 中，綿羊身上有羊毛。在 `當使用時`指令裡放置`掉落`積木，然後走過去，讓綿羊掉出物品。
      MC HOC 2016 New Spawn_instruction: 在這個世界創造一些新生命吧，「生成」表示添加一些東西到遊戲裡，在`當運行時`下放置`生成`積木，遊戲開始時就會添加指定的東西了。
      MC HOC 2016 New Walk_instruction: 我們來探索世界吧！用方向鍵（鍵盤或畫面上的）可移動、按空格鍵（或點擊畫面空白處）可使用物品。現在請「使用」門進入房子裡。
      MC HOC 2016 SCORE LEVEL_instruction: 大部分的遊戲會有分數機制吧。與這些鐵魔像玩「人捉鬼」遊戲，再用`增加 1 分`積木，在你捉到他們時給自己加分。達到
        5 分就勝利！
      MC HOC 2016 Village Test_instruction: 不好了！殭屍把你困住啦！對鐵魔像編寫程式，讓它們追蹤並攻擊殭屍！
      MC_2017_Ryan_02_instruction: |-
        Help the player get out by using loops to get
        the Agent to the pressure plate.
      MC_HOC_2017 Agent Test_instruction: |-
        Click "Run" to move the player to the
        orange square inside of the house.
      MC_HOC_2017_01_instruction: |-
        Click "Run" to move the player to the orange
        square inside of the house.
      MC_HOC_2017_01_Cole_instruction: |-
        You need to collect all the tools on this
        journey. Move around using the **arrow keys**, and get to the chest on the
        path to win
      MC_HOC_2017_01_Kiki_instruction: |-
        Click "Run" to move the player to the orange
        square inside of the house.
      MC_HOC_2017_01_RETRY_instruction: 讓 Agent 前往壓板，然後按「執行」並使用箭頭按鍵，移動玩家離開房屋以收集箱子。
      MC_HOC_2017_02_instruction: 讓 Agent 前往壓板。
      MC_HOC_2017_02_Cole_instruction: 移動 Agent 前往壓板，這樣 {currentPlayerName} 才能前往地圖。
      MC_HOC_2017_02_Kiki_instruction: 讓 Agent 前往壓板，然後讓玩家前往橙色方塊。
      MC_HOC_2017_02_Will_instruction: 讓 Agent 前往壓板。
      MC_HOC_2017_03_Cole_instruction: 設定 Agent 的代碼以開啟大門。
      MC_HOC_2017_03_Kiki_instruction: 讓 Agent 前往壓板。
      MC_HOC_2017_04_instruction: 變更上一個版圖的循環，讓 Agent 可以在這條河較寬的部分開闢路徑。
      MC_HOC_2017_04POINT5_Cole_instruction: 讓 Agent 前往壓板。
      MC_HOC_2017_04POINT5_RYAN_instruction: 讓 Agent 前往壓板。
      MC_HOC_2017_04_Cole_instruction: 讓 Agent 前往壓板。
      MC_HOC_2017_04_Kiki_instruction: 讓 Agent 前往壓板。
      MC_HOC_2017_05_instruction: 使用一種功能，讓 Agent 可前往壓板。
      MC_HOC_2017_05_Cole_instruction: 讓玩家前往鏟子的位置。
      MC_HOC_2017_05_Josh_instruction: 讓玩家前往鏟子的位置。
      MC_HOC_2017_05_Kiki_instruction: 讓玩家前往橙色方塊。
      MC_HOC_2017_06_Cole_instruction: 修正此代碼，讓 Agent 可建造橫跨這條河流的橋樑。
      MC_HOC_2017_06_Josh_instruction: 修正此代碼，幫助 Agent 建造橫跨這條河流的橋樑。
      MC_HOC_2017_06_Kiki_instruction: 修正此代碼，幫助 Agent 建造橫跨這條河流的橋樑。
      MC_HOC_2017_07_Cole_instruction: 破壞冰塊，並讓 {currentPlayerName} 前往礦車。
      MC_HOC_2017_07_Kiki_instruction: 使用一種功能，清除前往橙色方塊的路徑。
      MC_HOC_2017_07a_Kiki_instruction: 清除前往橙色方塊的路徑。
      MC_HOC_2017_08_Cole_instruction: 變更提供的功能以於此生態域中使用。
      MC_HOC_2017_08_Kiki_instruction: 變更功能以於此版圖中使用。
      MC_HOC_2017_08_RY_instruction: 使用功能以找到穿過熔岩的路。
      MC_HOC_2017_08_Will_instruction: 使用功能以找到穿過熔岩的路。
      MC_HOC_2017_09_Cole_instruction: 設定 Agent 的程式以清除玩家的路徑。
      MC_HOC_2017_09_Kiki_instruction: 設定 Agent 的程式以清除玩家的路徑，並讓玩家前往壓板。
      MC_HOC_2017_10_Cole_instruction: 建立一種功能，幫助您完成此礦車。
      MC_HOC_2017_10_Cole_old_instruction: 建立一種功能，幫助您完成此礦車。
      MC_HOC_2017_10_Kiki_instruction: 建立一種功能，幫助您完成此礦車。
      MC_HOC_2017_10_RETRY_instruction: 建立一種功能，幫助您完成此礦車。
      MC_HOC_2017_10_RYAN_instruction: 建立一種功能，幫助您完成此礦車。
      MC_HOC_2017_10_RYAN2_instruction: 建立一種功能，幫助您完成此礦車。
      MC_HOC_2017_13_Cole_instruction: "**自由遊戲：**是自己探索的時候了！"
      MC_HOC_2017_4.5v2_instruction: 讓 Agent 前往壓板。
      MC_HOC_2017_Ali_instruction: 使用功能以找到穿過熔岩的路。
      MC_HOC_2017_FP10x10_instruction: "**自由遊戲：**您可以挑戰自己，在此關卡中收集到所有鑽石嗎？"
      MC_HOC_2017_FP10x10_RE_instruction: "**自由遊戲：**您可以挑戰自己，在此關卡中收集到所有鑽石嗎？"
      MC_HOC_2017_FP20x20_instruction: "**自由遊戲：**是自己探索的時候了！"
      MC_HOC_2017_Ryan_03_instruction: 現在就使用循環，在水中放置方塊，協助 Agent 建造橫跨河流的橋樑。
      MC_HOC_2017_Ryan_05_instruction: 破壞仙人掌，讓玩家可以抵達目的地。
      MC_HOC_Kiki_02_instruction: 讓 Agent 前往壓板。
      MSM Big Game Empty_instruction: |-
        All variables and functions are currently
        empty stubs. Each puzzle progression will be focused on defining and handful
        of them, and therefore adding functionality.
      MSM Big Game Vars 1 (copy 1)_instruction: |-
        In the Variables toolbox you'll
        see several variables that define how your game characters look, move, and
        interact
      MSM Big Game Vars 1_instruction: |-
        In the Variables toolbox you'll see several
        variables that define how your game characters look, move, and interact
      MSM Big Game Vars Backup_instruction: |-
        In the Variables toolbox you'll see
        several variables that define how your game characters look, move, and interact
      MSM Defining Vars 1 (copy 1)_instruction: |-
        Write a program that produces a
        50 pixel solid green triangle.
      MSM Defining Vars 1_instruction: |-
        Write a program that produces a 50 pixel
        solid green triangle.
      MSM Defining Vars 2 (copy 1)_instruction: |-
        If we wanted to make fifty green
        triangles, it would be a pain to repeat that block of code 50 times. Let's
        create a variable called "my-shape" and put the code for a 50 pixel solid
        green triangle inside.
      MSM Defining Vars 2_instruction: |-
        If we wanted to make fifty green triangles,
        it would be a pain to repeat that block of code 50 times. Let's create a
        variable called my-shape and put the code for a 50 pixel solid green triangle
        inside.
      MSM Defining Vars 3 (copy 1)_instruction: |-
        Take your "my-shape" variable
        and use it with this provided code to draw two identical green triangles.
      MSM Defining Vars 3_instruction: |-
        Take your my-shape variable and use it with
        this provided code to draw two identical green triangles that are 50 pixels
        in size.
      MSM Defining Vars 4_instruction: |-
        Edit your my-shape variable so that it draws
        75 pixel solid red stars.
      MSM Play Lab Butterfly 1_instruction: |-
        Help Sam stay on the screen so that
        you can always see at least a little piece of him. Using the arrow keys, see
        how far Sam can go to the left while still staying onscreen. You’ll find that
        Sam is onscreen as long as his x-coordinate is greater than -50. Then, fill
        in the code to make Sam stay on the screen.
      MSM Play Lab Butterfly 2_instruction: |-
        Now make Sam stay on the right side
        of the screen. You'll have to experiment to see how far he can go and still
        be partially visible on the screen.
      MSM Play Lab Butterfly 3_instruction: |-
        Now, combine your work to make Sam stay
        on both sides of the screen.
      MSM Play Lab Game 2_instruction: |-
        Variables can also be used to control the
        speed of players in a game. Set the player speed and the enemy speed and see
        how the movement changes. Speed can be between 2 and 12.
      Middle School Hackathon Pt 1_instruction: "（點擊觀看完整說明）"
      Middle School Hackathon Pt 2_instruction: "（點擊觀看完整說明）"
      Mike Pair Programming_instruction: Here are the instructions
      Mike Test Bee Conditionals 1_instruction: |-
        This cloud is blocking my view!
        Check to see if there's a flower under the cloud, and only get nectar if
        there's a flower. Be careful, it can change!
      Mike Test Bee Conditionals 2_instruction: |-
        Collect all of the nectar. You can
        only collect nectar from flowers, but you can check any space to see if there
        is a flower.
      MikeAssessment1_instruction: Now do it right!
      MikeStar_instruction: Draw this.
      MikeStarHard_instruction: Draw this.
      MikeStarNested_instruction: Draw this.
      MikeTest1_instruction: Who knows what you should do?!?!
      MikeTest2_instruction: Draw something!
      MikeTest3_instruction: 建立一些東西
      NEW Course 4 Artist Functions 1_instruction: 你能使用一個重複迴圈，畫出一個邊長 100 像素的正方形嗎？
      NEW Course 4 Artist Functions 10.1_instruction: |-
        Use the functions from the
        previous puzzles to draw this pattern.
      NEW Course 4 Artist Functions 10_instruction: |-
        Click "edit" to fill out the
        blocks in the function definition to make a 40 pixel square.
      NEW Course 4 Artist Functions 11_instruction: 現在我們想創建一個新函式，名為 draw a line of
        squares（畫排正方形），用來將六個正方形畫在一橫列上。你可以用我們為你準備好的函式 draw a square 20 來建立出這個新函式嗎？
      NEW Course 4 Artist Functions 12_instruction: 使用上一關的 draw a line of squares
        函式來畫出這個圖案。
      NEW Course 4 Artist Functions 13_instruction: '你可以使用 draw a line of squares（畫出方格邊）函式畫出一個星形嗎？  '
      NEW Course 4 Artist Functions 14_instruction: '自由遊戲時間！ '
      NEW Course 4 Artist Functions 2_instruction: 你可以畫出 3 個正方形嗎？每個正方形的邊長是 100 像素，且之間要相隔
        20 像素
      NEW Course 4 Artist Functions 3_instruction: |-
        這裡有個新的積木，稱為函式積木。點擊「編輯」，然後在裡頭添加能畫出一個邊長 100 像素的正方形所需的積木。\r
        \r
        當你編輯完這個函式後，點擊「關閉」來返回你的程式。
      NEW Course 4 Artist Functions 4_instruction: 使用 draw a square（畫個正方形）函式來畫出這個圖案。
      NEW Course 4 Artist Functions 5_instruction: |-
        How did the "draw a square"
        block know what commands to run? Click on "edit" in the "draw a square"
        function block. The blocks in the function editor are the definition that
        make up "draw a square." When you're done looking around, click "Save
        and Close" and then "Run."
      NEW Course 4 Artist Functions 6_instruction: |
        Using the "draw a square" function
        block, can you draw this picture? Hint: each square is 20 pixels apart.\r
      NEW Course 4 Artist Functions 7_instruction: '你已經掌握函式積木的使用技巧了嗎？讓我們修改一下代碼，來讓正方形的邊長變成
        200像素。在「編輯」上點一下以進入 draw a square（畫個正方形）函式。記住點擊「關閉」以離開函式編輯器。 '
      NEW Course 4 Artist Functions 8_instruction: 我們已經創建了一個新的函式給你，叫做 draw a triangle（畫個三角形）。你可以編輯這個函式定義以畫出每邊長
        100 像素的三角形嗎？
      NEW Course 4 Artist Functions 9_instruction: 你可以只用 1 個積木來完成關卡嗎？
      NEW Course 4 Artist Functions inspire_instruction: |-
        Click here to see the inspiration
        picture again.
      NEW Course 4 Artist Params 1_instruction: 讓我們定義 draw a square（畫個正方形）函式以畫出邊長為
        50 像素的正方形。點擊「編輯」來開始。
      NEW Course 4 Artist Params 10_instruction: '建立一個 draw a hexagon（畫個六邊形）函式積木，裡頭帶有
        length（長度）參數。這個六邊形的邊長為 100 像素。 '
      NEW Course 4 Artist Params 11_instruction: 你想得到要怎麼畫出這個形狀嗎？編輯函式來使用 sides（邊長）參數。
      NEW Course 4 Artist Params 12_instruction: |-
        你可以完成這個畫嗎？
        所有形狀的邊長都是 100 像素。
      NEW Course 4 Artist Params 12a_instruction: 這個圖形和上一個很類似，你能使用一個計數迴圈和你的函式來完成這個圖案嗎？
      NEW Course 4 Artist Params 13_instruction: |-
        讓我們編輯 draw a polygon（畫個多邊形）這個函式。它已經有 sides（邊數）參數了，現在讓我們添加一個 length（長度）參數到上頭。\r
        每個圖形的周長是 200 像素，你知道當周長固定時，正多變形的邊長要怎麼樣計算出來嗎？
      NEW Course 4 Artist Params 14_instruction: 編輯 draw a spiral edge（畫個螺旋圖）以使用 length（長度）和
        sides（邊）參數，然後重新創建這些形狀。
      NEW Course 4 Artist Params 15_instruction: 自由發揮：這是除了你寫的函式，還有更多的函式讓你發揮。畫些令人驚嘆的東西吧！用不同的筆跡寬度來看看你能畫出什麼不一樣的圖形！
      NEW Course 4 Artist Params 2_instruction: 創建一個「繪製三角形」的函式，製作一個邊長 50 像素的三角形。
      NEW Course 4 Artist Params 3_instruction: '現在讓我們使用這個函式在一列上畫出 5 個三角形\r

'
      NEW Course 4 Artist Params 4_instruction: 你有察覺這個函式積木有什麼不一樣嗎？點擊「運行」來看看發生什麼事。
      NEW Course 4 Artist Params 5_instruction: '將 length（長度）參數積木裡的問號（???）換成數字。這個五邊形的邊長是
        100 像素。 '
      NEW Course 4 Artist Params 6_instruction: 在 length（參數）的問號處填入正確的數字以畫出這些圖形。正方形和三角形的邊長是
        100 像素，六邊形的邊長是 75 像素。
      NEW Course 4 Artist Params 7_instruction: 你能完成這幅畫嗎？每一次畫的三角形的邊長比前一個多 25 像素。第一個三角形的邊長是
        25 像素。
      NEW Course 4 Artist Params 8_instruction: 畫出三角形的程式壞掉了。你可以編輯並修正這個函式，以畫出邊長為 25、50、75
        的三角形嗎？
      NEW Course 4 Artist Params 9_instruction: 點擊「編輯」來完成 draw a square（畫個正方形）函式的定義，並且加一個參數。它應該像三角形一樣有一個
        length（長度）參數。這次，畫出 3 個正方形，邊長分別為 25、50、75 像素，每個正方形相隔 100 像素。
      NEW Course 4 Artist Params inspire_instruction: "自由發揮靈感：你已經學會了所有需要創建這個模式的知識了！如果這個圖形引起了你的聯想，試試畫出一些類似的圖像。要不然，就畫畫你想畫的一些東西。
        \\r\n\\r \n想要知道我們的這些創意圖案是怎麼做出來的嗎？ "
      NEW Course 4 Artist Vars 1.5_instruction: "Take a look at the code, can you\nsee
        how the \"set length\" block and \"length\" block works together? Click\non
        \"Run\" to see it in action. "
      NEW Course 4 Artist Vars 12_instruction: 現在，重新建立最後一關的演算法，並創作一個邊長 150 像素的五邊形。
      NEW Course 4 Artist Vars 2.5_instruction: "Take a look at the code, can you\nsee
        how the \"set length\" block and \"length\" block works together? Click\non
        \"Run\" to see it in action. "
      NEW Course 4 Artist Vars 2_instruction: '拖曳數字積木到「設定長度」積木和「重複」積木裡，以畫出一連串的 50
        像素長的三角形。

'
      NEW Course 4 Artist Vars 4 5_instruction: |-
        Awesome job on the last puzzle,
        let's try it again this time let's make this cool design with with 60 pixel
        hexagon's.
      NEW Course 4 Artist Vars 4_instruction: |-
        讓我們再試一次！\r
        \r
        你可以將 length（長度）變數設為 60，以完成這個酷炫的六邊形圖案嗎？
      NEW Course 4 Artist Vars 6_instruction: |-
        設定正確的 length（長度），並將 length 變數拖曳到正確的位置，以畫出邊長為 100 像素的五角形。\r
        \r
        看看你是不是能一次就能設定好 length 的值和程式碼？
      NEW Course 4 Bee For Loops 1_instruction: 使用一個迴圈來收集每個花朵上的花蜜。
      NEW Course 4 Bee For Loops 10_instruction: |-
        Use your for loop "counter" variable
        to control how far to move horizontally.
      NEW Course 4 Bee For Loops 10a_instruction: 準備好接受挑戰了嗎？善用所學，試著解決這個問題。記住：在你想出所有步驟前，你可能必須要運行程式好多次。
      NEW Course 4 Bee For Loops 11_instruction: 你能用迴圈變數來控制移動且採集花蜜嗎？
      NEW Course 4 Bee For Loops 2_instruction: 添加需要的代碼來讓蜜蜂收集到所有的花蜜。看看你需要用到多少程式碼才能完成關卡！（我們會在下一個關卡學到更簡單的辦法。)
      NEW Course 4 Bee For Loops 3_instruction: '啊，計數循環（for loop）讓事情變得簡單多了！你需要的程式碼都在這兒，看一看它是如何放在一起的，然後點擊「運行」看看它怎麼工作。 '
      NEW Course 4 Bee For Loops 4 4_instruction: 現在，我們需要向前移動，移動距離為計數器的次數，接著採集花蜜，採集個數也是計數器的次數。你可以使用
        2 個「重複」迴圈來完成這個挑戰嗎？
      NEW Course 4 Bee For Loops 4_instruction: '把計數迴圈裡的問號（???）換成蜜蜂必須收集的最大花蜜數。 '
      NEW Course 4 Bee For Loops 5 5_instruction: 你已經掌握計數循環的使用技巧了嗎？讓我們來幫助蜜蜂取得剩餘的花蜜。
      NEW Course 4 Bee For Loops 5_instruction: 你也可以使用一個「計數迴圈」來倒數，試著從 5 數到 1，間隔數為
        1 的方式來採集這些花蜜。
      NEW Course 4 Bee For Loops 6_instruction: 在你的計數迴圈上的最後一個數字叫做 increment（增量），每次過了一個循環，counter
        變數會依照增量的值改變。試試每次增量 2，以收集到這些花朵。
      NEW Course 4 Bee For Loops 7_instruction: |-
        現在，我們來組合 counter 變數和一個運算積木！怎樣透過 counter 變數減少積木使用數來遊覽花園呢？這次你要怎麼做才能收集到 3、6、9、12、15個花蜜呢？counter 變數就是秘密武器！\r
        \r
        記住：如果你的循環是遞增計數的，增量就會在每次循環加到 counter 變數裡。
      NEW Course 4 Bee For Loops 8_instruction: 你明白了吧！如果要依次收集 3、6、9、12、15 個花蜜，要在每次的數字後加多少呢？
      NEW Course 4 Bee For Loops 9_instruction: 如果循環的數字是由大排到小，每次循環就會從計數器變量中減去間隔的值。如果要依序收集
        15、12、9、6、3 個花蜜，間隔數需要設成多少？
      NEW Course 4 Bee For Loops 95_instruction: |-
        Take a look at each piece of the
        "for loop" that you have just created.  Can you figure out which numbers
        you need to double to solve this puzzle? Why does it work?
      NEW Course 4 Play Lab Params 11_instruction: '自由發揮的時間到了，用工具箱裡的程式積木來做一些好玩的事吧。 '
      NEW Course 4 Play Lab Params 5 5_instruction: |-
        Let's try that again, but with
        less help. What do you need to edit this time to make the actors patrol?
      NEW Course 4 Play Lab Vars 4 5_instruction: |-
        “What do you think this code will
        do? Press “Run” to see what happens.”
      NEW Course 4 Play Labs For Loops 7a_instruction: |-
        Using what you learned so
        far, can you have Dinosaur take a step forward every time Penguin counts?
      NEW Course 4 Play Labs For Loops 8 Free Play_instruction: '自由發揮的時間到了，用工具箱裡的程式積木來做一些好玩的事吧。 '
      NEW Course 4 Play Labs For Loops 8a_instruction: "Challenge: How would you\nuse
        the \"for loop\" to get every actor to go around and say their actor number,\nthen
        vanish from the screen? "
      NetSim Standalone Automatic DNS_instruction: |-
        In this version of the Internet
        Simulator, a Domain Name System (DNS) is provided for you and knows the IP
        addresses of all connected computers. Send a message in the form GET [hostname]
        to the DNS service at address <yourRouterNumber>.15 to get a student's address.
      NetSim Standalone Broadcast_instruction: |
        In this version of the Internet Simulator,
        you can connect to up to 5 other people in a room. When you send messages
        in the room, everyone receives them. What are some of the challenges of this
        system, and how might you solve them?\r
      NetSim Standalone Classroom Routers_instruction: |-
        In this version of the Internet
        Simulator, everyone connects to a router and has a specific address. To send
        messages, you have to address your message to the specific address of the
        recipient, and the router will take care of delivering it to the right computer.
        If there are other routers created in your class, ask for the address of one
        of your classmates and send them a message! View the Log Router to see the
        path the messages have taken through the network.
      NetSim Standalone Freeplay_instruction: |-
        In this configuration, most of the
        options are turned on, and you can play with them. Have fun!
      NetSim Standalone Manual DNS_instruction: |-
        In this version of the simulator
        you can't see the other students' addresses.  Instead, one of you must act
        as a name service, to help share addresses with each other.
      NetSim Standalone Packets TCP_instruction: |
        Messages on the Internet can take
        many paths to get to their destination, and sometimes along the way the message
        gets dropped. In this version of the Internet Simulator, there is a 10% chance
        of a packet being dropped, multiple packets may take different paths to the
        destination, and the default max packet size is set to 6 additional characters.
      NetSim Standalone Routers Addresses_instruction: |-
        For this activity, connect
        to a router with the others in your group. Important note: The router will
        only properly route messages where the first 4 bits are the To: address and
        the second 4 bits are the From: address.\r
        \r
        [TODO: NetSim needs to support
        hierarchical addresses. For now, level is set up for 4 bit to and from addresses]
      NetSim Standalone SendAB_instruction: |-
        You and your partner share a single
        wire that can only be in state A or state B. You can set the wire to either
        state at any time, and you can read the state of the wire at any time. Can
        you figure out a way to effectively communicate with just this system?
      NetSim Standalone Sending Numbers Ascii_instruction: |
        Now that you've transmitted
        information represented as decimal numbers, you can map those numbers to text
        characters to send text-based information back and forth. With a text-based
        protocol, you can easily represent and communicate all kinds of information.
      NetSim Standalone Sending Numbers_instruction: "You and your partner can now\nreliably
        send messages back and forth without extra coordination! While you're\nalways
        sending bits back and forth, you can also represent those bits as decimal\nnumbers.
        What kinds of information can you represent with this system? "
      NetSim_AddressingMessages_instruction: |-
        In this version of the simulator, you
        will connect to a Router instead of directly to another student. Enter an
        address in the "To" box to send a message to another student.
      NetSim_AutomaticDNS_instruction: |-
        In this version of the simulator a DNS service
        is provided for you. Send a message in the form GET [hostname] to the DNS
        service at address 15 to get a student's address.
      NetSim_ManualDNS_instruction: |-
        In this version of the simulator you can't
        see the other students' addresses.  Instead, one of you must act as a name
        service, to help share addresses with each other.
      NetSim_SendAB_instruction: |-
        Connect to another student.  Each of you can set
        the value of the wire between you to "A" or "B".  See if you can send
        a complete message!
      NetSim_SendAscii_instruction: |-
        In this version of the simulator, you can send
        numbers or ASCII characters to one another, one bit at a time.
      NetSim_SendBits_instruction: |-
        Connect to another student.  You can now set
        your wire to "0" or "1".  Send a message to your partner!
      NetSim_SendNumbers_instruction: |-
        In this version of the simulator, you can
        view the decimal representations of the binary you are sending.
      NetSim_SendingABTest_instruction: |-
        This is Sarah's test of making a netsim
        level
      NetSim_Superuser_instruction: You have loaded NetSim in superuser mode.
      NetSim_Variant1_instruction: |-
        NetSim: Variant 1 allows students to manually
        work out the timing of sending bits back and forth.
      NetSim_Variant2_instruction: |-
        NetSim: Variant 2: Students connect directly
        to one another and send entire packets back and forth, exploring systems of
        encoding data.
      NetSim_Variant3_instruction: |-
        NetSim: Variant 3: Connects groups of 2-6 students
        with a router, and explores issues in routing and DNS
      New Artist Project_instruction: 畫些厲害的東西！你的程式碼會被保存成專案，讓你可以隨時回來繼續創作。
      New Basketball Project_instruction: |-
        Create your own Basketball game. You can
        change all the rules. When you're done, click Finish to let friends try your
        game on their phones.
      New Bounce Project_instruction: |-
        Create your own Bounce game. You can change
        all the visuals and the rules. When you're done, click Finish to let friends
        try your game on their phones.
      New Course 4 Artist Functions Level 4_instruction: 使用 draw a square（畫個正方形）積木來完成這個圖案。
      New Gumball Project_instruction: 自由發揮吧！然後把您的成果分享出來！
      New Ice Age Project_instruction: 自由發揮吧！然後把您的成果分享出來！
      New Infinity Project_instruction: 自由發揮吧！然後把您的成果分享出來！
      New Minecraft Hero Project_instruction: |-
        **Freeplay:**  Time to explore on
        your own!
      New Sports Project_instruction: |-
        Create your own game! You're in charge here:
        you can change all the rules, mix and match sports, get creative! When you're
        done, click Finish to let friends try your game on their phones.
      Ninjacat Demo B (copy 1)_instruction: |
        \r
        Let’s begin by exploring a simple
        videogame, and then figuring out how it works. You can use the arrow keys
        to move the ninja left, right and jump - try to catch the unicorn and avoid
        the dragon!\r
        \r
        \r
        \r
          \r
        \r
      Ninjacat Demo B_instruction: |-
        Let’s begin by exploring a simple videogame,
        and then figuring out how it works. You can use the arrow keys to move the
        ninja up and down - try to catch the unicorn and avoid the dragon! When you
        think you've figured out how the game works, click "Finish"
      Ninjacat Demo No Animate_instruction: |-
        Let’s begin by exploring a simple videogame,
        and then figuring out how it works. You can use the arrow keys to move the
        ninja up and down - try to catch the unicorn and avoid the dragon! When you
        think you've figured out how the game works, click "Finish"
      October15 JoL 1_instruction: |-
        Program the artist to design a face for your
        jack-o-lantern!
      October15 bat_instruction: |
        Freeplay: Here are some functions to play with.  Can
        you draw a bat?\r
      October15 ghost 1_instruction: |-
        Give the ghost eyes, using the "draw a circle"
        function.
      October15 pumpkin 1_instruction: |-
        Finish this jack-o-lantern by drawing the
        eyes and nose in any style you would like.
      October15 stars 1_instruction: |-
        Use loops and the "random integer" block
        to fill the night sky with stars of different shapes and sizes.
      Overworld Avoid Monsters_instruction: 碰上苦力怕就糟了。小心的從苦力怕身邊通過，安全地抵達你的家裡。
      Overworld Avoid Monsters_2018_instruction: |-
        Running into a Creeper is a bad
        idea. Carefully move past the Creepers and reach the safety of your home.
      Overworld Chop Tree - allthethings_instruction: 木材是相當重要的資源，很多東西都要用到它。走到樹木前面，使用「摧毀方塊」指令把它砍下。
      Overworld Chop Tree_instruction: 木材是相當重要的資源，很多東西都要用到它。走到樹木前面，使用「摧毀方塊」指令把它砍下。
      Overworld Chop Tree_2018_instruction: |-
        Wood is a very important resource. Many
        things are made from it. Walk to the tree and use the “destroy block” command
        to chop it down.
      Overworld Chop Trees_instruction: 我們必須在太陽下山前蓋好房子，房屋需要用到大量木材。請將 3 棵樹全部砍倒。
      Overworld Chop Trees_2018_instruction: |-
        We need to build a house before the
        sun goes down. Houses require a lot of wood. Cut down all 3 trees.
      Overworld Free Play 20x20_instruction: 恭喜！您已完成所有關卡！現在，運用您學習到的一切，採礦、建造並創造出一些獨特的東西吧。
      Overworld Free Play 20x20_2018_instruction: 恭喜！您已完成所有關卡！現在，運用您學習到的一切，採礦、建造並創造出一些獨特的東西吧。
      Overworld House Frame Chosen_instruction: 使用你喜歡的材料建立房子的其它部份。「重複」指令會派得上用場。
      Overworld House Frame Chosen_2018_instruction: |-
        Build the rest of your house
        from any material you'd like. The "repeat" command will come in handy.
      Overworld Move to Sheep_instruction: 添加第二個「移動-向前」指令，到達綿羊的位置。
      Overworld Move to Sheep_2018_instruction: |-
        Add a second `move forward` block
        to reach the sheep.
      Overworld Place Wall_instruction: 每幢房子都是由砌牆開始的。在循環指令裡嵌入「放置」與「移動」積木，建造房子的第一部分。
      Overworld Place Wall_2018_instruction: |-
        Every house starts with a wall. Build
        the first part of your house by putting the "place" and "move forward"
        commands inside the repeat loop.
      Overworld Plant Crops_instruction: 提前規劃是很棒的！在水的兩側種植作物，這樣以後就不會挨餓了。
      Overworld Plant Crops_2018_instruction: |-
        It’s good to plan ahead. Plant crops
        on both sides of the water so you don’t get hungry later on.
      Overworld Powered Minecart_instruction: 做得好！您收集到了許多資源，也蓋了一棟體面的房屋。現在請從地圖邊緣鋪設一條軌道，通向你的房屋門口。
      Overworld Powered Minecart_2018_instruction: |-
        Great job! You’ve gathered lots
        of resources and built a modest home. Now lay rail from the edge of the map
        to the door of your house.
      Overworld Shear Sheep_instruction: 剪羊毛的時候到了！用「修剪」指令從 2 隻綿羊身上收集羊毛。
      Overworld Shear Sheep_2018_instruction: |-
        Sheep-shearing time! Use the “shear”
        command to gather wool from both sheep.
      PDAlg 13-16 Sam Extension Puzzle_instruction: |-
        Add a second parameter to "onscreen?"
        for Sam's y coordinate and update the function so it keeps him safe on all
        four sides.
      PDAlg 17-20 Luigi Extension Puzzle_instruction: |-
        Without modifying your existing
        "cost" function, create a new "coupon" function that takes a pizza topping
        and coupon code and returns the cost of a pizza with that topping. If the
        coupon code is correct (you get to decide what it is), apply a 30% discount
        to the pizza.
      PDAlg 8-12 Rocket Height Puzzle_instruction: |-
        Let's write a "rocket-height"
        function with simple acceleration. Write a function that ensures the rocket
        is at 15 meters at 1 second, 45 meters at 2 seconds, 95 at 3 seconds, and
        165 at 4 seconds.
      PDAlg 8-12 ex dr 1_instruction: |-
        The definition in this Design Recipe doesn't
        match both examples. Test each example to see which is failing, and then fix
        the definition to match.
      PDAlg 8-12 ex dr 2_instruction: |-
        This student has created two examples for
        the function "apples" but something's not quite right. How would you direct
        this student to correct their mistake?
      PDAlg Big Game History_instruction: |-
        Now that you've played through a Big
        Game level you should see a new entry in your history. Click the Version History
        button and you should see at least one version. Each time you go back to a
        Big Game level you'll get a new record in your version history that you can
        revert back to.
      PDAlg Big Game Remix_instruction: |-
        Here's your Big Game as you last left it.
        Try clicking the Remix button to spin off a new remix of your project.\r
        \r
        Any
        changes you make after you click Remix will be saved on your new remix and
        not on your main Big Game.
      PDAlg Design Recipe Delete_instruction: |-
        Click the delete button to get rid
        of this function, then try creating and deleting a few of your own.
      PDAlg Design Recipe Examples_instruction: |-
        The definition in this Design Recipe
        doesn't match both examples. Test each example to see which is failing, and
        then fix the definition to match.
      PDAlg Design Recipe Required_instruction: |-
        Complete the Design Recipe for the
        "eggs" function, making sure to create and test your examples.
      PDAlg Updates Cond_instruction: |-
        When you went to PD in the summer, the Conditional
        block that you were introduced to was black and allowed any data type to be
        used. This proved to be confusing, given that every other function we've
        seen always produces the same type of data. To help make conditionals clearer
        and more consistent we've replaced the single black block with a separate
        block for each data type.
      PDAlg Updates Errors_instruction: |-
        Run the provided program and use the error
        messages to try and track down the bugs.
      PDAlg Updates Space_instruction: |-
        Making use of limited programming space (especially
        on small screens) is challenging with a block based language. To help with
        this we've added a few features. Experiment with this provided code to see
        how the space can be manipulated to deal with larger programs.
      PDK5 Conditionals 1_instruction: |-
        Purple flowers may have either 1 or 0 nectar,
        but you don't know which one! Be careful not to collect nectar from a purple
        flower if it doesn't have any. Check if the nectar is equal to 1 by using
        the if block.
      PDK5 Conditionals 2_instruction: "Try this puzzle that uses conditionals and\nloops
        together. Use the \"if\" block to decide when to turn. Hint: you only\nneed
        one more block to complete this puzzle. "
      PDK5 Events 1_instruction: "So far all of the programs we've written are executed\nin
        order from top to bottom. In this puzzle, we'll use \"Events\" to respond\nto
        an action on demand. Make the octopus say \"Hello\" only when you click\non
        the Octopus. "
      PDK5 Functions 1_instruction: |-
        Hello. Me zombie artist. Me love drawing! Help
        me draw the square glasses.  Hint:  the bridge between the glasses is 25 pixels
        shorter than the square length.
      PDK5 Functions 2_instruction: 函式（Functions）能讓你能夠製作一個屬於自己的新積木！我們已經把要繪製出一個正方形的所有積木放到一個名為
        draw a square 的函式裡。你可以使用 draw a square 函式以建立這幅眼鏡？兩個鏡框之間的距離是 75 像素。
      PDK5 Loops 1_instruction: "Instead of using 5 \"move forward\" blocks, use\nthe
        \"repeat\" block with a \"move forward\" block inside of it. In computer\nscience,
        this is called a \"loop.\" "
      PDK5 Loops 3_instruction: |-
        Here's another puzzle to practice loops. What happens
        if you use the repeat block to run the code already provided on the workspace
        4 times?
      PS - test - pixelation_instruction: 利用 0 和 1 來完成這個 X 圖形。
      PS FR test 7-25_instruction: 'Here are your instructions for this free response.  '
      PS Log test - Define and use turnAround_instruction: |-
        Define a function called
        turnAround. Call the function and then move the turtle forward. (Click to
        see full instructions)
      PS copy 2-3 Bee Conditionals 5_instruction: |-
        Be careful not to collect nectar
        from a purple flower if it doesn't have any. \r
        You must first check if
        the nectar is equal to 1 using the `if nectar` block.
      PS predictive Applab level test_instruction: 'Here are some instructions. '
      Pattern Bee 1_instruction: |-
        What a strange field of goodies! I wonder if there's
        a pattern here...
      Pixelation - AllTheThings 4_instruction: |-
        This pixelation level demonstrates
        the use of the `hide_encoding_controls` option.  Notice that the level displays
        the image data in hexadecimal and does not let you change it back to binary.
      Pixelation - AllTheThings 5_instruction: |-
        This pixelation level demonstrates
        the use of the "Hide sliders" option.  Notice that the width and height
        sliders are not available, and the width and height fields are not editable.
      Pixelation - Lesson 14 - Fix bit offset v.2_instruction: |-
        Something happened
        to the bits in this image! Find the error and fix it! Hint: a few extra bits
        were added. You should only need to remove some bits.
      Pixelation - Lesson 14 - Fix bit offset_instruction: 在 Code.org 標誌中，字母 C 的串流（stream）中多了一個不必要的位元（bit），搞亂了在它之後其他的位元，害得這個標誌變得亂七八糟。抓出這個位元，將它移除，讓
        Code.org 這個標誌恢復正常。
      Pixelation - Lesson 14 - Fix the error_instruction: |-
        Something happened to
        the bits in this image!  Find error and fix it!  Hint: a few extra bits were
        added.  You should only need to remove some bits.
      Pixelation - Lesson 14 - Make the Letter A_instruction: |-
        Make a 3x5 letter
        'A'. The widget is setup with the incorrect dimensions. Your first task
        is to set the second byte to the 8-bit binary code for 5: 0000 0101. Then
        start entering pixel data.
      Pixelation - Lesson 14 - Make your own B and W Image_instruction: |-
        Now make
        your own image! We've started you off with a 10x10 canvas but you can make
        it whatever size you want. Happy pixeling!
      Pixelation - Lesson 14 - Make your own B&W Image_instruction: |-
        Now make your
        own image! We've started you off with a 10x10 canvas but you can make it
        whatever size you want.  Happy pixeling!
      Pixelation - Lesson 15 - Color Free Play_instruction: |-
        Requirements: The icon
        must be 16x16 pixels. You must use the Pixelation Widget to encode the bits
        of color information. The image must be encoded with at least 12 bits per
        pixel.
      Pixelation - Lesson 15 - Color Shades 4x4_instruction: |-
        We start you out with
        the 4x4 image Maddie created in the video. Your task is to fill a 4x4 grid
        with colors using 12-bits per pixel. Here are the requirements: Row 1 - fill
        with shades of red. Row 2 - shades of green. Row 3 - shades of blue. Row 4
        - shades of gray.
      Pixelation - Lesson 15 - Color Shades_instruction: |-
        We start you out with the
        row of shades of red that Maddie created in the video. Experiment with 6-bit
        color by filling in the bottom row of the image with shades of a different
        color. Here is an example with some shades of blue. Try your own color!
      Pixelation - Lesson 15 - Complete 3-bit color_instruction: |-
        We start you with
        the 4x2 image Maddie was creating, but we've left out the last two squares.
        Finish off the image by figuring out which two colors are missing and encode
        them.
      Pixelation 2_instruction: |-
        Something happened to the bits in this image!  Find
        error and fix it!
      Pixelation 4x4 Empty_instruction: |-
        The width and height are now encoded in
        the pixel data. Can you figure out how to adjust the dimensions?
      Pixelation Bee_instruction: |-
        This larger image of a bee encodes color with
        12 bits per pixel, but viewing in hex makes it easier to see the color of
        each pixel. If you switch to binary mode - hold on to your hat - it's a lot
        of bits. Here's another mind-blowing thing to try: slide the bits per pixel
        up to 24 bits per pixel. What happens? Can you explain this behavior?
      Pixelation Flappy_instruction: |-
        Here is a bigger image at 9 bits per pixel.
        With 9 bits per pixel you can express 512 different colors. Click through
        to see the next image which is even more sophisticated, but easier to understand.
      Pizza on a Plate_instruction: |-
        Project Idea: Create a picture of something
        familiar from the real world. This requires persistence and planning!
      Planning Farmer_instruction: |-
        What a strange field of goodies! I wonder if
        there's a pattern here...
      Planter Test_instruction: Help me plant my fields!
      Play Lab Rocket 1_instruction: 火箭升空，以每秒 15 米的速度航行…點擊「運行」以檢查文字在動畫播放時的問題。
      Play Lab Rocket 2_instruction: |-
        We've started the Design Recipe for rocket-height
        using the contract and examples you just wrote. Complete the function definition
        for rocket-height and run your animation.
      Play Lab Rocket 2B_instruction: 火箭升空，以 15 米/秒的速度航行。使用設計程序，寫出一個名為「rocket-height」的函式，以顯示一個以秒為單位的高度指示儀板，並顯示火箭從起飛到目前為止的高度。
      Play Lab Rocket 3_instruction: |-
        Awesome, now can you update that function so
        that our rocket moves more quickly? Make sure to update the purpose statement,
        examples, and function definition to launch a rocket at 40 meters per second.
      Play Lab Rocket 4 (copy 1)_instruction: |-
        Real rockets start off slowly and
        gain speed over time - let's make ours do the same! Write an exponential
        function that describes a rocket that travels at "seconds" squared meters
        per second.
      Play Lab Rocket 4_instruction: |-
        Real rockets start off slowly and gain speed
        over time - so let's add some simple acceleration to ours! Can you write
        a function that describes a rocket that is at 10 meters at 1 second, 40 meters
        at 2 seconds, 90 meters at 3 seconds, 160 at 4 seconds and so on?
      Play Lab Rocket 5_instruction: |-
        Much better, but let's write one more function
        with simple acceleration. This time the rocket should be 15 meters at 1 second,
        45 meters at 2 seconds, 95 at 3 seconds, and 165 at 4 seconds.
      Play Lab Rocket Free Play_instruction: |-
        Free Play: Experiment with your rocket-height
        function to make the rocket fly in different ways. Click "Finish" when you
        are done.
      Poorva copy U3L2 Using Simple Commands_instruction: |-
        Draw a 1x1 square above
        and to the left of the turtle's starting position. Click to see full instructions.
      Poorva-test_instruction: |-
        Here are regular instructions for a level. There
        is nothing fancy going on here.
      Practice Create Performance Task_instruction: |-
        Design and implement your practice
        Create Performance Task. (Click to see full instructions)
      Project - Final Image Scroller_instruction: |-
        Update the image scroller to respond
        to buttons and key presses. (Click to see full instructions)
      Project - Finish your canvas app_instruction: |-
        Extend the functionality of
        one of the effects, or create an entirely new one of your own. (Click to see
        full instructions)
      Project - Make Your Own Clicker Game_instruction: |-
        完成你的點點點遊戲！
        （點此觀看完整說明）
      Project - Your Own Multi Screen App_instruction: |-
        Create your multi-screen
        app. (Click to see full instructions.)
      Prompt Test_instruction: |-
        Build whatever you want. This is an example of a
        number-guessing game!
      Quantum Bee - Ryan_instruction: |-
        These clouds are bugging me! Some of the clouds
        have flowers inside, and some don't. I should check each cloud, and only
        get nectar from the flowers.
      Quantum Bee_instruction: |-
        Purple flowers may have either 1 or 0 nectar, but
        you don't know which one! Be careful not to collect nectar from a purple
        flower if it doesn't have any. Check if the nectar is equal to 1 by using
        the if block.
      Robot Doodle_instruction: |-
        Project Idea: Create a picture of something familiar
        from the real world. This requires persistence and planning!
      Robot Doodle_2018_instruction: |-
        Project Idea: Create a picture of something
        familiar from the real world. This requires persistence and planning!
      Robot Drawing_instruction: |-
        Project Idea: Create a picture of something familiar
        from the real world. This requires persistence and planning!
      Robot_instruction: |-
        Project Idea: Create a picture of something familiar from
        the real world. This requires persistence and planning!
      Rocket Height Course A_instruction: |-
        Follow the Design Recipe to create a function
        rocket-height.
      Ryan - 4-5 Bee Conditionals 2_instruction: 蜂蜜現在只想要花蜜。不是全部的東西都是花朵，所以檢查每朵雲裡面是否藏著花朵。如果是的話，那就可以採集花蜜。
      Ryan - Bee Conditionals_instruction: |-
        The bee only wants nectar right now.
        Not all objects are flowers, so check underneath EVERY CLOUD to see if it
        is hiding a flower. If it is, then you can gather nectar.
      Ryan Doily Step 1_instruction: |-
        Now we're going to draw a doily step by step.
        First, draw a square.
      Ryan Doily Step 2_instruction: |-
        Now you need to turn and repeat it 20 times!
        How many degrees do you turn to get 360 after 20 iterations?
      Ryan Doily Step 3_instruction: |-
        Now you need to turn and repeat it 20 times!
        How many degrees do you turn to get 360 after 20 iterations?
      Ryan Test Locked Blocks_instruction: 這裡有個函式名叫 patrol（巡邏）。編輯它以讓貓向上移動 400 像素，然後往下
        400 像素。
      Ryan's clone of C4S15P10_instruction: "We've added one last function for you.\n\\r\n\\r\nUse
        an \"if\" statement to program your game to call the \"level_up\"\nfunction
        only when \"player_score\" becomes greater than a certain number.\\r\n\\r\nFor\nexample:
        \"player_score\" > 6\\r\n\\r\nPlay the game, and make it past level\n4 to
        move to the next puzzle. "
      RyanTest3_instruction: |-
        This level has shape-shifting turned on! Refresh to
        see different variants.
      SG Add Subgoals practice_instruction: |-
        Draw a 3x3 grid to the front and right
        of the turtle as efficiently as possible. The turtle should end at its original
        location, facing its original direction. (Click to see full instructions)
      SG U3L03 - draw rect function_instruction: |-
        Write a function called drawRectangle().\r
        (Click
        to see full instructions)
      SG U3L03 - draw step_instruction: |-
        Write the drawStep function. (Click to see
        full instructions)
      SG U3L03 Define and use turnAround_instruction: |-
        Define a function called turnAround.
        Call the function and then move the turtle forward. (Click to see full instructions)
      SG U3L03 Draw a T using turnAround_instruction: |-
        Draw a plus sign using the
        provided version of turnAround().  (Click to see full instructions)
      SG U3L03 Three Steps_instruction: |-
        Define a function called drawSide() which
        draws three steps and moves the turtle to prepare for the next side (Click
        to see full instructions)
      SG U3L03 define turnRight and draw a rectangle_instruction: |-
        Define a function
        called right() that turns the turtle to the right. Then use this function
        to draw a rectangle, as shown below. (Click to see full instructions)
      SG U3L03 draw diamond_instruction: |-
        Create a function called drawDiamond()
        that makes use of your previous work to draw the complete diamond. (Click
        to see full instructions)
      SG U3L04 - 3 by 3 with functions_instruction: |-
        Make the 3x3 square as efficiently
        as you can. (Click to see full instructions)
      SG U3L04 - snowflake_instruction: |-
        Create the design by breaking it down into
        layers of functions. (Click to see full instructions)
      SG U3L06 - moveForwardwithParams_instruction: |-
        Use a single command to move
        the turtle to the edge of the screen. (Click to see full instructions)
      SG U3L06 Challenge 1 triangle_instruction: |-
        Use the parameterized versions
        of the turtle commands to create a triangle with sides 100 pixels long. (Click
        to see full instructions)
      SG U3L06 Challenge 2 purple square_instruction: |-
        Read the documentation for
        penColor() and penWidth() before using them to draw the blue square.
      SG U3L06 Challenge 3 fill pink_instruction: |-
        Fill in the background of the
        screen with your favorite color. (Click to see full instructions)
      SG U3L06 Challenge 4 bullseye_instruction: |-
        Create the bullseye using hexadecimal
        colors and dot(). (Click to see full instructions)
      SG U3L06 Challenge 5 overlapping circles_instruction: |-
        This image is created
        just using dot() and penColor() but, how are we going to get those circles
        to be transparent?  If you haven't gotten the hint yet: check out the documentation!
      SG U3L06 Challenge 6 squiggles_instruction: |
        Read the documentation for the
        "arcLeft" and "arcRight" commands and then draw the squiggles as shown.
      SG U3L06 Challenge 7 smiley face_instruction: |-
        Use turnTo() and moveTo() to
        help draw a smiley face. (Click to see full instructions)
      SG U3L06 Challenge 8 make your own_instruction: |-
        Create a drawing of your own.
        (Click to see full instructions)
      SG U3L07 - Free Play Loops and Random_instruction: |-
        Free Play! Use what you
        learned from loops and random to make your own little scene. Have fun.
      SG U3L07 - allSeaGrass_instruction: |-
        Add 50 pieces of seagrass to the image
        by writing drawAllSeagrass with a loop. (Click to see full instructions)
      SG U3L07 - bubbles_instruction: 用迴圈的方式在圖片上添加 200 個泡泡。（點擊觀看完整說明）
      SG U3L07 - createTriangleParam_instruction: |-
        Define a function that accepts
        a parameter to match the function calls and complete the image. (Click to
        see full instructions)
      SG U3L07 - fish_instruction: 用迴圈的方式在圖片上添加 15 隻魚。（點擊觀看完整說明）
      SG U3L07 - introSquare_instruction: |-
        Use a loop to draw a square. Then add
        another loop to draw many squares each one rotated some amount. (Click to
        see full instructions)
      SG U3L07 - loopsWithRandom_instruction: |-
        Increase the number of iterations
        to fill the screen with white. (Click to see full instructions)
      SG U3L07 - randomDots1_instruction: |-
        Increase the number of iterations to fully
        fill the screen with random dots. (Click to see full instructions)
      SG U3L07 - randomSquare_instruction: |-
        Draw the figure using a loop. (Click
        to see full instructions)
      SG U3L07 - seaGrass_instruction: 添加一個參數到「畫個海草」裡，以改變海草在繪製時的彎曲數。（點擊觀看完整說明）
      SG U3L07 - seaStar_instruction: 用迴圈的方式在圖片上添加 5 個海星。（點擊觀看完整說明）
      SG U3L07 - sunBeams_instruction: |-
        Add 100 sunbeams to the image by writing
        drawAllSunbeams with a loop. (Click to see full instructions)
      SG U3L07 - topDownDesign_instruction: |-
        Get comfortable with the structure of
        this program, then move on to the next exercise. (Click to see full instructions)
      SG U3L07 More Subgoals_instruction: |-
        Read the documentation for penColor()
        and penWidth() before using them to draw the blue square.
      SG U3L08 - createTwoParamTriangle_instruction: |-
        Define a function called drawTriangle()
        that accepts two parameters to set the size and width of the triangle. (Click
        to see full instructions)
      SG U3L08 - digitalScene_instruction: |-
        Create the functions you were assigned
        as part of your digital scene. (Click to see full instructions)
      SG U3L08 - drawSquareWithParam_instruction: |-
        Use drawSquare() to recreate the
        image of both squares, this time using parameters. (Click to see full instructions)
      SG U3L08 - fish_instruction: |-
        Add a parameter to drawFish that changes the
        size of the fish drawn. (Click to see full instructions)
      SG U3L08 - freePlay_instruction: |-
        Keep adding to your image by making more
        calls to your new functions with parameters. (Click to see full instructions)
      SG U3L08 - individualCode_instruction: |-
        Create the functions you were assigned
        as part of your digital scene. (Click to see full instructions)
      SG U3L08 - introUnderTheSea - recovery_instruction: |-
        Add an extra fish, starfish,
        and piece of seagrass to the image. Look at, but don't change, the functions
        that create them. (Click to see full instructions)
      SG U3L08 - introUnderTheSea_instruction: |-
        Add an extra fish, starfish, and
        piece of seagrass to the image. Look at, but don't change, the functions
        that create them. (Click to see full instructions)
      SG U3L08 - multiParamFish_instruction: |-
        Add three parameters to your drawFish
        function to accept red, green and blue values to make your fish different
        colors. (Click to see full instructions)
      SG U3L08 - paramsToStarfish_instruction: 添加一個參數到「畫個海星」裡，以改變海星在繪製時的尺寸。（點擊觀看完整說明）
      SG U3L08 - randomInput_instruction: |-
        Use the randomNumber() blocks to test
        the functions you designed with random input. (Click to see full instructions)
      SG U3L08 - seaGrass_instruction: 添加一個參數到「畫個海草」裡，以改變海草在繪製時的尺寸。（點擊觀看完整說明）
      SG U3L08 - squareTwoParams_instruction: |-
        Call drawSquare() to complete the
        drawing of two squares. (Click to see full instructions)
      SG U3L08 comments_instruction: |-
        Use the randomNumber() blocks to test the functions
        you designed with random input. (Click to see full instructions)
      SG U3L08 how to add comments_instruction: |-
        Use the randomNumber() blocks to
        test the functions you designed with random input. (Click to see full instructions)
      SG U3L2 Using Simple Commands part 1_instruction: |-
        Draw a 1x1 square above
        and to the left of the turtle's starting position. Click to see full instructions.
      SG U3L2 Using Simple Commands_instruction: |-
        Draw a 1x1 square above and to
        the left of the turtle's starting position. Click to see full instructions.
      SG U3L2_Add-subgoals_instruction: |-
        Draw a 3x3 grid to the front and right of
        the turtle as efficiently as possible. The turtle should end at its original
        location, facing its original direction. (Click to see full instructions)
      SG U3L2_Turtle3by3Grid_instruction: |-
        Draw a 3x3 grid to the front and right
        of the turtle as efficiently as possible. The turtle should end at its original
        location, facing its original direction. (Click to see full instructions)
      SG U3L2_TurtleSquare_right_instruction: |-
        Draw a square to the front and to
        the right of the starting location. (Click to show full instructions)
      SGU3L07 - randomDots1_instruction: |-
        Increase the number of iterations to fully
        fill the screen with random dots. (Click to see full instructions)
      Sam the Butterfly 1 (copy 1)_instruction: |-
        This butterfly is named Sam, and
        the game area is Sam’s yard. Sam's yard is 400 pixels wide by 400 pixels
        tall! As you can see, Sam is free to walk around the yard, and the coordinates
        at the top of the screen update to tell you his location. Use the arrow keys
        to move sam around his yard. Help Sam collect all of the flags to move on.
      Sam the Butterfly 1_instruction: |-
        This bat is named Sam, and the game area
        is Sam’s yard. Sam's yard is 400 pixels wide by 400 pixels tall! As you can
        see, Sam is free to walk around the yard, and the coordinates at the top of
        the screen update to tell you his location. Click "Run" and then use the
        arrow keys to move Sam around his yard, making note of Sam's coordinates
        at different locations. Click "Finish" when you're ready to move on.
      Sam the Butterfly 2_instruction: |-
        Sam's mom wants to make sure that she can
        always see at least a bit of him, so lets write some functions that help make
        sure he doesn't go too far out of the yard. Here's a function called safe-left?
        - it should take a Number for its domain that represents Sam's x-coordinates
        and return true if he's completely visible on screen. If your function works,
        Sam shouldn't be able to leave the yard from the left side.
      Sam the Butterfly 3_instruction: |-
        In the last puzzle we kept Sam from leaving
        on the left, now let's do the same thing on the right. Complete the safe-right?
        function to make sure Sam can't go off the right side of the screen.
      Sam the Butterfly 4_instruction: |-
        Huh, we can keep Sam from leaving on the
        left, or we can keep him from leaving on the right, but how can we keep him
        safe from leaving both directions? Try using the and block to program the
        function on-screen? to check if Sam is safe-left? and safe-right?
      Sam the Butterfly 5_instruction: |-
        Free Play: Awesome, we've kept Sam safe
        on the left and right! Use this free play stage to experiment with your functions
        and further improve onscreen?
      Sam the Butterfly 6_instruction: |-
        We've added a new parameter "y" to the
        "on-screen?" function. Update the function so that it checks that "safe-left?"
        AND "safe-right?" AND "safe-up?" are all true. When you've fixed the
        function, try going out of the yard from the left, right, and top sides.
      Sam the Butterfly 7_instruction: |-
        Only one last direction to worry about! Create
        a "safe-down?" function and update the "on-screen?" function so that it
        checks up, down, left, and right.
      Sam the Butterfly Complete_instruction: |-
        Only one last direction to worry about!
        Create a "safe-down?" function and update the "on-screen?" function so
        that it checks up, down, left, and right.
      SpecialFrozenLevel_instruction: 您已經變成一個專業的藝術家囉！開始打造一個冬季仙境吧。
      Standalone_Artist_1_instruction: |-
        歡迎使用小藝術家！首先，讓我們試試建立一個簡單的正方形，用的是「轉向-右方」積木和「移動-向前」積木。
        每邊長度應該是 100 像素。
      Standalone_Artist_2_instruction: 用 120 度、60度當做角度，並以 150 像素當做邊長，畫出這個菱形吧。
      Standalone_Artist_3_instruction: 你能用邊長 100 像素及旋轉 60 度，來畫出這個六邊形嗎？
      Standalone_Artist_4_instruction: 現在你有了一個新的積木可以玩囉，這個積木是迴圈（loop），它能將一連串的指令重複執行。如果你循環這些指令
        6 次，會發生什麼事呢？
      Standalone_Artist_5.5_instruction: 注意我們是如何利用重複積木把畫一個菱形的程式再簡化的。接著，我們要把這個程式放到迴圈裡，並循環整個序列
        12 次以畫出這朵花。提示：每畫完一次菱形後，你需要轉向 30 度，這樣子你才不會畫在相同的菱形上。
      Standalone_Artist_5_instruction: 你需要重複畫出菱形多少次，才能用它創造出這朵花？
      Standalone_Artist_6_instruction: 循環這個畫六邊形的程式 6 次以創作出這個花樣。你知道每畫完一次六邊形要轉多少角度嗎？提示：把一圈的度數除以循環次數。
      Standalone_Artist_7_instruction: 函式是另一種編程的工具，它可以幫助你避免重複打相同的程式編碼。這個函式會畫出花朵，所以你可以在任何你想要的時候用它來畫花朵。用這個函式和新的「跳躍」積木來繪製這些花朵。提示：花朵之間的間隔距離是
        150 像素。
      Standalone_Artist_8_instruction: 這裡有個函式名為 Draw a shape（畫個形狀），我們已經編寫了程式來畫出六角形。運行這個程式看看它會做些什麼，並試著修改函式看會發生什麼事。你可以讓它畫出一個正方形、三角形、八角形嗎？
      Standalone_Artist_9_instruction: 現在繼續創作任何你想要的圖案！你得到了一個空的函式，讓你想做啥就做啥！
      Standalone_Artist_v2_instruction: |-
        歡迎使用小藝術家！首先，讓我們試試建立一個簡單的正方形，用的是「轉向-右方」積木和「移動-向前」積木。
        每邊長度應該是 100 像素。
      StepIntro_instruction: Here's how to use the "Step" button.
      Test Play Lab_instruction: This is a test play lab level.
      Test embedded Blockly in instructions_instruction: |-
        As a block element, we
        should be able to include XML representing a valid Blockly block or blocks.\r
        \r
        <xml>\r
          <block
        type="draw_move_by_constant">\r
            <title name="DIR">moveForward</title>\r
            <title
        name="VALUE">100</title>\r
          </block>\r
        </xml>\r
        \r
        We also support
        Blockly XML as an inline element like so: <xml><block type="draw_move_by_constant"><title
        name="DIR">moveForward</title><title name="VALUE">100</title></block></xml>.
        The difference in input format being that this one is embedded within a paragraph,
        whereas the previous one is in a text block of its own. The difference in
        output is comparable.
      Test embedded K1 Blockly in instructions_instruction: |-
        Use three `move west`
        blocks and one `pick corn` block to solve this puzzle.
      Test of comment block_instruction: 拖曳出你想用的子目標標籤積木。
      Testing Quantum Farmer_instruction: "Wow, look at that! \\r\n\\r\nI don't know\nhow
        many shovelfuls of dirt this hole needs.  \\r\nCan you write a program\nthat
        keeps using the `fill` block until the ground is even?  "
      Text Compression 1_instruction: |
        Look for patterns (repeated words or phrases)
        in the text. Enter the patterns you see into the dictionary on the right.
        As you type entries into the dictionary, the symbol for the entry is inserted
        into the text in place of the pattern.\r
        \r
      The Vigenere Cipher Widget_instruction: 說明
      The Vigenere Cipher_instruction: 說明
      Total Artist Clone Me_instruction: |-
        Freeplay: Here are the functions you've
        written, and some more for you to play with. Draw something awesome! Play
        with the pen width to see how different your drawings look!
      U1L10 NetSim numbers with decimal_instruction: |-
        Invent and test a protocol
        for encoding and sending text messages. Your protocol must include the letters
        a-z, spaces, and common punctuation marks. You may add additional characters
        if you wish. See the worksheet handed out by your teacher for more detailed
        instructions!
      U1L11 NetSim numbers with Ascii_instruction: |-
        Work with a partner or in a small
        team to develop a protocol that allows you to send formatted text. See the
        worksheet handed out by your teacher for more detailed instructions!
      U1L13 Text Compression_instruction: |-
        Look for patterns (repeated words or phrases)
        in the text. Enter the patterns you see into the dictionary on the right.
        As you type entries into the dictionary, the symbol for the entry is inserted
        into the text in place of the pattern.
      U1L4 NetSim SendAB_instruction: "Develop, document, and test a protocol that\nallows
        you to use Internet Simulator to relay a message. See the worksheet\nfor more
        detailed instructions.  "
      U1L8 NetSim numbers no decimal_instruction: Default instructions
      U1L8 NetSim numbers with decimal_instruction: |-
        With your partner, develop a
        protocol or set of rules for communicating a drawing using only bits. See
        the worksheet handed out by your teacher for more detailed instructions!
      U2 Vigenere_instruction: Test
      U2 frequency caesar_instruction: 說明
      U2 frequency random sub_instruction: 說明
      U2 vigenere cipher_instruction: 說明
      U2L04 - NetSim Routers with Addresses_instruction: |-
        Send messages with your
        classmates (Click to see full instructions)
      U2L05 - NetSim - Packets and Building TCP_instruction: |-
        Develop a Protocol
        for Reliably Sending a Message.\r
        \r
        Constraints:\r
        - Packets may contain
        only 6 characters\r
        - Packets may drop with small probability\r
        - Packets
        may not arrive in order
      U2L10 NetSim Automatic DNS_instruction: |-
        In this version of the Internet Simulator,
        a Domain Name System (DNS) is provided for you and knows the IP addresses
        of all connected computers. Send a message in the form GET [hostname] to the
        DNS service at address <yourRouterNumber>.15 to get a student's address.
      U2L10 NetSim Manual DNS_instruction: |-
        In this version of the simulator you
        can't see the other students' addresses.  Instead, one of you must act as
        a name service, to help share addresses with each other.
      U2L14 frequency random_instruction: Test
      U2L2 NetSim Hub Mode_instruction: |
        Now use the Internet Simulator to send the
        battleship moves. For setup, join a Room with your group, and add ships to
        your paper board for each opponent. When playing, all communication must be
        done through the tool, so no talking, but have fun!\r
      U2L3 NetSim Hub Mode_instruction: |-
        Use the Internet Simulator to test out your
        group's binary communication protocol for battleship. How short can you make
        the message and response?
      U2L4 NetSim Routers Addresses_instruction: |-
        For this activity, connect to a
        router with the others in your group. Important note: The router will only
        properly route messages where the first 4 bits are the To: address and the
        second 4 bits are the From: address.\r
        \r
        [TODO: NetSim needs to support
        hierarchical addresses. For now, level is set up for 4 bit to and from addresses]
      U2L5 NetSim Classroom Internet_instruction: |
        For this activity, connect to
        a router with the others in your group. The Internet Simulator now provides
        a place for you to put the To and From addresses, so you don't have to type
        out the bits manually.\r
        \r
      U2L7 NetSim Need for Packets_instruction: |-
        Transfer your favicon to a partner
        across a network in which the larger a packet grows, the more likely it is
        to be dropped.
      U3 - Arrays - Demo App_instruction: |-
        Use the "My Favorite Things" app. How
        might this app be making use of an array? (Click to see full instructions)
      U3 - Arrays - appendItem_instruction: |-
        Create an array of odd numbers 1-11
        by using appendItem. (Click to see full instructions)
      U3 - Arrays - assignment_instruction: |-
        Use indexes to change the values in
        this array from 1 to 0. (Click to see full instructions)
      U3 - Arrays - assignment2_instruction: |-
        Calculate the sum of three values stored
        in an array. (Click to see full instructions)
      U3 - Arrays - assignment3_instruction: |-
        Increase the value of each value in
        the randomly generated array by 1. (Click to see full instructions)
      U3 - Arrays - createFirstArray_instruction: |-
        Create an array of the even numbers
        from 0 to 10 and display its contents with console.log. (Click to see full
        instructions)
      U3 - Arrays - expressionsAsIndexes_instruction: |-
        Write a program that displays
        a randomly chosen color from the array. (Click to see full instructions)
      U3 - Arrays - favThings Counting Variable_instruction: |-
        Create a global variable
        for the current index and use it to display the first item in the array. (Click
        to see full instructions)
      U3 - Arrays - favThings Next_instruction: |-
        Write code that allows the user
        to move forward through your list by clicking the "Next" button. (Click
        to see full instructions)
      U3 - Arrays - favThings Prev_instruction: |-
        Write code that allows the user
        to move backward through your list by clicking the "Last" button. (Click
        to see full instructions)
      U3 - Arrays - favThings addItem_instruction: |-
        Write code that allows a user
        to add their own favorite things to the list. (Click to see full instructions)
      U3 - Arrays - favThings bounds_instruction: |-
        Add if statements to your event
        handlers that prevent the global index from going out of bounds. (Click to
        see full instructions)
      U3 - Arrays - favThings createArray_instruction: |-
        Create an array of words
        describing your favorite things. (Click to see full instructions)
      U3 - Arrays - favThings firstOutput_instruction: |-
        Use setText to display the
        first item in the array. (Click to see full instructions)
      U3 - Arrays - favThings giveIDs_instruction: |-
        Give your UI elements descriptive
        and meaningful IDs. (Click to see full instructions)
      U3 - Arrays - favThings keepPlaying_instruction: |-
        Make any other improvements
        you want! (Click to see full instructions)
      U3 - Arrays - favThings template_instruction: |-
        Give your UI elements descriptive
        and meaningful IDs. (Click to see full instructions)
      U3 - Arrays - globalVariableIndex_instruction: |-
        Give your UI elements descriptive
        and meaningful IDs. (Click to see full instructions)
      U3 - Arrays - indexPractice_instruction: |-
        Write the contents of the array to
        the screen in numerical order. (Click to see full instructions)
      U3 - Arrays - insertingItems_instruction: |-
        Insert items into an array to form
        a complete sentence. (Click to see full instructions)
      U3 - Arrays - insertionErrors_instruction: |-
        Run each command that references
        indexes that are out of bounds and observe the results. (Click to see full
        instructions)
      U3 - Arrays - introIndex_instruction: |-
        Display the first and last element in
        the array. Display the number 5 from the array. (Click to see full instructions)
      U3 - Arrays - length_instruction: |-
        Use list.length to determine the length
        of each array. (Click to see full instructions)
      U3 - Arrays - lengthMinus1_instruction: |-
        Use list.length - 1 to log the last
        item in the array to the console. (Click to see full instructions)
      U3 - Arrays - remove_instruction: |-
        Remove items from an array to form a complete
        sentence. (Click to see full instructions)
      U3 - Arrays - stringsInArrays_instruction: |-
        Write a sentence word by word by
        adding strings to an array. (Click to see full instructions)
      U3 - Canvas - 200dots_instruction: 添加一個迴圈到程式，以在畫布上畫出 200 個黑點。（點擊觀看完整說明）
      U3 - Canvas - One Dot sprayPaint_instruction: |-
        Write code that redraws your
        image using a dot whose x and y locations use offsetX and offsetY with a small
        random value added. (Click to see full instructions)
      U3 - Canvas - appendToArray_instruction: |-
        Create an array to store each event
        parameter. Append each event parameter to this array within your event handler.
        (Click to see full instructions)
      U3 - Canvas - changeToMouseMove_instruction: |-
        Change your program so that dots
        are drawn at the location of the mouse as the user moves the mouse on the
        canvas. (Click to see full instructions)
      U3 - Canvas - clickToAdd_instruction: |-
        Change your program so that dots are
        added to the canvas when the user clicks on it. (Click to see full instructions)
      U3 - Canvas - delete_instruction: |-
        Create a button that deletes the drawing
        by clearing the canvas and removing all stored values. (Click to see full
        instructions)
      U3 - Canvas - draw at click point_instruction: |-
        Change your program so that
        dots are drawn at the location of the mouse click. (Click to see full instructions)
      U3 - Canvas - freePlay_instruction: |-
        Extend the functionality of one of the
        effects, or create an entirely new one of your own. (Click to see full instructions)
      U3 - Canvas - introCanvas_instruction: 添加一個畫布（canvas）到你的 app 上，並將它設定成啟用。接著在你的畫布上新增一個大的圓點。（點擊觀看完整說明）
      U3 - Canvas - movementFunction fix Orig_instruction: |-
        Modify the "Original"
        button event handler so that it takes the movement of the mouse into account.
        (Click to see full instructions)
      U3 - Canvas - movementFunction_instruction: |-
        Write a function that takes the
        movement of the mouse as input and generates a line width as output. (Click
        to see full instructions)
      U3 - Canvas - redrawOriginal_instruction: |-
        Write a function that processes
        your array, redrawing the dots as they originally appeared. (Click to see
        full instructions)
      U3 - Canvas - redrawRandom_instruction: |-
        Set up a button and event handler
        for the random function. (Click to see full instructions)
      U3 - Canvas - redrawRandom2_instruction: |-
        Write a function that processes your
        array, redrawing every dot with a random size. (Click to see full instructions)
      U3 - Canvas - shiftKey_instruction: |-
        Add an if statement to your event handler
        so dots are only drawn when the shift key is pressed. (Click to see full instructions)
      U3 - Canvas - sketch_instruction: |-
        Write code that redraws your image using
        a sketch effect. (Click to see full instructions)
      U3 - Canvas - sprayPaint_instruction: |-
        Update the spray paint code so that
        it redraws your image using multiple random dots instead of using a nested
        for loop. (Click to see full instructions)
      U3 - Canvas - transparentDots_instruction: |-
        Change the colors of your dots
        so they have a fully transparent stroke and partially transparent fill. (Click
        to see full instructions)
      U3 - Canvas - usingOffsetXY_instruction: 添加一個控制紀錄指令到你的事件處理函式裡，使用它來顯示事件參數，同時在上面點擊能觀看事件參數的內容。（點擊觀看完整說明）
      U3 - Conditional Basics - 6_instruction: 添加一個「設定文字」到如果陳述式的「不對，再猜猜。」之後。（點擊觀看完整說明）
      U3 - Conditionals - Combine AND OR Simple_instruction: |-
        Write an if statement
        that uses AND and OR to display "Sleep in!" if it's the weekend and the
        user is a teenager. (Click to see full instructions.
      U3 - Conditionals - Combine AND OR and NOT_instruction: |-
        Write an if statement
        that uses AND and OR to display "Time to go to school!" if it's not the
        weekend and the user is under 18. (Click to see full instructions.)
      U3 - Conditionals - Combine AND and OR_instruction: |-
        Write an if statement
        that uses AND and OR to display "Time to go to school!" if it's not the
        weekend and the user is under 18. (Click to see full instrucitons.
      U3 - Conditionals - Simple AND_instruction: |-
        Write an if statement that uses
        AND to display "You are a teenager." if the user enters an age between 13
        and 19. (Click to see full instructions)
      U3 - Conditionals - Simple OR_instruction: |-
        Write an if statement that uses
        OR to display "It's the weekend!" if the user enters a weekend day at the
        prompt. (Click to see full instructions)
      U3 - Conditionals - intoOr_instruction: 添加 2 個用上「或」運算子的如果陳述式。（點擊觀看完整說明）
      U3 - Conditionals - introAND_instruction: 添加 2 個用上「或」運算子的如果陳述式。（點擊觀看完整說明）
      U3 - Design Mode - Console Log_instruction: |-
        Update the ID names and `console.log`
        messages to match the correct button. (Click to see full instructions.)
      U3 - Design Mode - Layers and Delete_instruction: |-
        Fix the layout of the bullseye
        game. (Click to see full instructions)
      U3 - Design Mode - Multi Screens 2_instruction: |-
        Make a 2 screen app which
        can switch back and forth between a black screen and a white screen using
        buttons. (Click to see detailed instructions.)
      U3 - Design Mode - Multi Screens_instruction: |-
        Make a 2 screen app with a black
        screen and a white screen. (Click to see detailed instructions)
      U3 - Design Mode - Other Events_instruction: |-
        Delete the button and make the
        image move to a random location when you click on it. (click to see detailed
        instructions)
      U3 - Design Mode - WTF Console Log_instruction: 添加 3 個控制紀錄訊息，並測試將它們輸出。（點擊觀看完整說明）
      U3 - Design Mode -Recreate Beyond Buttons_instruction: |-
        Recreate the game from
        the "Chaser Game" with a Welcome Screen and Game Over Screen. (Click to
        see full instructions.)
      U3 - Design Mode 1_instruction: 添加一個大的紅色按鈕到設計模式畫面上。（點擊觀看完整說明）
      U3 - Dice - Dropdown and Score_instruction: |-
        Add guess and score to the Dice
        Game (Click to see full instructions)
      U3 - Dice - Dropdown with Strings_instruction: 添加一個下拉式選單來選擇難度，並將所選的結果輸出到控制台。（點擊觀看完整說明）
      U3 - Dice - If_instruction: |-
        Show different die images for the random number
        generated. (Click to see full instructions)
      U3 - Dice - Nested_instruction: |-
        Use nested if statements to make the scoring
        different for the different game levels. (Click to see full instructions)
      U3 - High Low - Debug_instruction: |-
        Debug the order of the conditionals so
        that it will actually tell the user when their guess is close. (Click to see
        full instructions)
      U3 - High Low - Dropdown_instruction: 添加一個下拉式清單供選擇，取代 promptNum（點擊觀看完整說明）
      U3 - High Low - Else if_instruction: |-
        Add an else-if statement in order to
        tell the user if their guess is high or low instead of just wrong. (Click
        to see full instructions)
      U3 - High Low - Else_instruction: |
        Add an else statement so that the program
        will tell the user when they are right and when they are wrong. (Click to
        see full instructions)\r
      U3 - High Low - If_instruction: |-
        Add code to the if statement that indicates
        the user guessed the secret number. (Click to see full instructions)
      U3 - Keys - Add Image URLs_instruction: |-
        Add image URLs to your array. Replace
        the text area with an image and setText with setImageURL. Then test your app!
        (Click to see full instructions)
      U3 - Keys - Buttons and Keys_instruction: |-
        Have the program respond the same
        way for both clicking images on the screen and hitting the up and down keys
        on the keyboard. (Click to see full instructions)
      U3 - Keys - Demo App_instruction: |-
        Play with the image scroller. Press the
        left and right arrows to progress through the images.
      U3 - Keys - Final Image Scroller_instruction: |-
        Update the image scroller to
        respond to buttons and key presses. (Click to see full instructions)
      U3 - Keys - Functions_instruction: |-
        Write doUpArrow and doDownArrow functions
        and call the functions instead of duplicating the code. (Click to see full
        instructions)
      U3 - Keys - Key Up and Down_instruction: |-
        Try out the keyup and keydown events
        to see how they are different from keypress. (Click to see full instructions)
      U3 - Keys - Multiple Keys_instruction: |-
        Play a different sound when the down
        arrow is pressed. (Click to see full instructions)
      U3 - Keys - Practice Adding Images with URL_instruction: |-
        Add image URLs to
        your image array. Test out the add button. Style your image scroller. (Click
        to see full instructions)
      U3 - Keys - Words to Images_instruction: |-
        Add image URLs to your image array.
        Test out the add button. Style your image scroller. (Click to see full instructions)
      U3 - Loops -  9 Part 2_instruction: |-
        Change the boolean expression for the
        while loop so that it will roll until both dice are greater than 3. (Click
        to see full instructions)
      U3 - Loops -  Complex Condition_instruction: |-
        Change the boolean expression
        for the while loop so that it will stop when both dice are greater than or
        equal to 5. (Click to see full instructions)
      U3 - Loops - 1_instruction: |-
        Change the condition for the while loop to check
        if the variable num is less than 90. (Click to see full instructions)
      U3 - Loops - 10_instruction: |-
        Write a program that simulates the rolling of
        two dice. Roll the dice repeatedly until the sum of the dice is either 7 or
        11.
      U3 - Loops - 11_instruction: |-
        Fix the condition so that it keeps rolling the
        die as long as the value is not a 2 or a 3 instead of rolling infinitely.
        (Click to see full instructions)
      U3 - Loops - 12_instruction: |-
        Change the code so that it prints the string
        "Hi" 5 times. (Click to see full instructions)
      U3 - Loops - 13_instruction: |-
        Update the code to count up by 3 instead of 1.
        (Click to see full instructions)
      U3 - Loops - 14_instruction: |-
        Change the loop condition to prevent the infinite
        loop and stop counting once the count is past 30. (Click to see full instructions)
      U3 - Loops - 15_instruction: |-
        Count the number of times the sum of the dice
        is 12. (Click to see full instructions)
      U3 - Loops - 16_instruction: |-
        Find out how many times you have to roll to get
        the sum of 7 100 times (Click to see full instructions)
      U3 - Loops - 2_instruction: |-
        Try creating an infinite loop using !=, > and
        <. (Click to see full instructions)
      U3 - Loops - 3_instruction: |-
        Change the if statement to a while loop so the
        program will run until it rolls a 6. (Click to see full instructions)
      U3 - Loops - 4_instruction: " 使用偵錯指令以列出在第 6 點之前的清單。（點擊查看完整說明）"
      U3 - Loops - 5_instruction: |-
        Add code inside the while loop which will update
        the variable num so that the condition will eventually become false. (Click
        to see full instructions)
      U3 - Loops - 6_instruction: |-
        Fix the problem so the loop will run at least
        once. Change the initial value of num to a dummy value such as -1. (Click
        to see full instructions)
      U3 - Loops - 7_instruction: |-
        Without adding any lines of code, reorder the
        code so that it prints all the values of num. (Click to see full instructions)
      U3 - Loops - 8_instruction: |-
        Debug which number is not getting printed and
        add a write statement to display that value. (Click to see full instructions)
      U3 - Loops - 9_instruction: " 修改條件讓它持續轉動，只要每個都小於 3。（點擊觀看完整說明）"
      U3 - Loops - Continue_instruction: " 使用偵錯指令以列出在第 6 點之前的清單。（點擊查看完整說明）"
      U3 - Loops - Minus Minus_instruction: |-
        Change the code to count down from 10
        to 1. (Click to see full instructions)
      U3 - Loops - Plus Plus_instruction: |-
        Change the code to use count++ instead
        of count = count + 1.  (Click to see full instructions)
      U3 - Loops - Typing in Console_instruction: |-
        Use console to check the ending
        value of num. (Click to see full instructions)
      U3 - Loops - minus = operator_instruction: |-
        Update the code to use the -= operator
        to count from 30 down to 0 by 3's. (Click to see full instructions)
      U3 - Loops - plus and minus = operator_instruction: |-
        Update the code to use
        the += operator. (Click to see full instructions)
      U3 - Loops And Arrays - Add 5_instruction: 將陣列裡的所有數值都加 5（點擊觀看完整說明）
      U3 - Loops And Arrays - Challenge 1_instruction: |-
        Write a function that finds
        and returns the minimum value in an array.   (Click to see full instructions)
      U3 - Loops And Arrays - Challenge 2_instruction: |-
        Write a function that finds
        and returns the minimum value in an array.   (Click to see full instructions)
      U3 - Loops And Arrays - Counting Times_instruction: |-
        Count the number of times
        5 appears in an array. (Click to see full instructions)
      U3 - Loops And Arrays - Divid by 2_instruction: |-
        Divide every value in the
        array by 2. (Click to see full instructions)
      U3 - Loops And Arrays - Find Max_instruction: |-
        Design a function that displays
        the smallest number in an array  (Click to see full instructions)
      U3 - Loops And Arrays - Find Min_instruction: |-
        Complete the findMinVal function
        to find and display the smallest value in an array  (Click to see full instructions)
      U3 - Loops And Arrays - Functions that Return Value_instruction: |-
        Call findMin
        within the console.log statement to calculate the minimum of two values.  (Click
        to see full instructions)
      U3 - Loops And Arrays - General Search Param_instruction: 添加第二個參數到搜尋函式，作為要搜尋的值。（點擊觀看完整說明）
      U3 - Loops And Arrays - Intro For Loop_instruction: 添加一個 for 迴圈，裡頭帶有控制紀錄，並試試輸出
        3 次。（點擊觀看完整說明）
      U3 - Loops And Arrays - Linear Search_instruction: |-
        Visit every element in
        the array and display "true" if the value is a 5, and "false" otherwise.
        (Click to see full instructions)
      U3 - Loops And Arrays - Loop Array If_instruction: |-
        Use an if statement to
        only display the values in the array that are greater than 5. (Click to see
        full instructions)
      U3 - Loops And Arrays - Make it a Function - add list parameter_instruction: |-
        Create
        a function that takes a list parameter and prints if the list contains a 5.
        (Click to see full instructions)
      U3 - Loops And Arrays - Make it a Function_instruction: |-
        Move the code that
        searches the list for a 5 into a function called "search". (Click to see
        full instructions)
      U3 - Loops And Arrays - Multiple Returns_instruction: |-
        Test out the return
        values of the findMax function.  (Click to see full instructions)
      U3 - Loops And Arrays - Print Array_instruction: |-
        Use a for loop to print out
        all the values in an array. (Click to see full instructions)
      U3 - Loops And Arrays - Printing Single True_instruction: |-
        Process the array
        and display a single "true" if the array contains a 5 or a single "false"
        if it does not.  (Click to see full instructions)
      U3 - Loops And Arrays - Return Index_instruction: |-
        Make the search function
        return the index of the search value in the array. (Click to see full instructions)
      U3 - Loops And Arrays - Return Value_instruction: |-
        Use constrain in this simple
        app to keep the turtle from driving off the screen.  (Click to see full instructions)
      U3 - Loops And Arrays - Search and Remove_instruction: |-
        Search for 5 in the
        array and remove it from the array. (Click to see full instructions)
      U3 - Loops And Arrays - Search with Boolean Var_instruction: |-
        Make a boolean
        variable to use as a flag to keep track of whether there is a 5 in the array.
        (Click to see full instructions)
      U3 - Loops And Arrays - useFindMin_instruction: |-
        Call findMin within the console.log
        statement to calculate the minimum of two values.  (Click to see full instructions)
      U3 - Movie Bot - Multiple If Sequences_instruction: |-
        Add another set of if,
        else if, and else statements inside the question if statement to check for
        keywords for movie ratings (G, PG, PG-13, and R). (Click to see full instructions)
      U3 - Movie Bot - Nested Motivation_instruction: |-
        Add a separate set of if statements
        to check for a "?" in the input. (Click to see full instructions)
      U3 - Movie Bot - When Multiple If Statements_instruction: |-
        Add an if and else-if
        statement that checks for please and thank you. (Click to see full instructions)
      U3 - Movie Bot - toLowerCase_instruction: |-
        Use the toLowerCase command to change
        all user input into lowercase letters after they enter it. (Click to see full
        instructions)
      U3 - Practice Create Performance Task_instruction: |-
        Design and implement your
        practice Create Performance Task. (Click to see full instructions)
      U3 - Read Record - 1.2_instruction: |
        Console.log the records returned by a
        call to readRecords. (Click to see full instructions)\r
      U3 - Read Record - 1.5_instruction: |
        Console.log the records returned by a
        call to readRecords. (Click to see full instructions)\r
      U3 - Read Record - 1.6_instruction: |
        Console.log the records returned by a
        call to readRecords. (Click to see full instructions)\r
      U3 - Read Record - 1_instruction: |
        Console.log the records returned by a call
        to readRecords. (Click to see full instructions)\r
      U3 - Read Record - 2_instruction: |
        Change the table name so that the records
        are read from the new table.(Click to see full instructions)\r
      U3 - Read Record - 3_instruction: |
        Change the name of the table in a readRecords
        command to read from a table that does not exist. (Click to see full instructions)\r
      U3 - Read Record - 4.1_instruction: |
        Print out each record return from the
        readRecords call individually. (Click to see full instructions)\r
      U3 - Read Record - 4_instruction: |
        Print out each record return from the readRecords
        call individually. (Click to see full instructions)\r
      U3 - Read Record - 5 and half_instruction: |
        Print out the name of each movie
        in the records return from the readRecords call. (Click to see full instructions)\r
      U3 - Read Record - 5_instruction: |
        Print out the name of each movie in the
        records return from the readRecords call. (Click to see full instructions)\r
      U3 - Return Values - constrainTurtle_instruction: |-
        Use constrain in this simple
        app to keep the turtle from driving off the screen.  (Click to see full instructions)
      U3 - Return Values - debuggingConstrain_instruction: |-
        Correct the error in
        constrain so that it returns the appropriate value.  (Click to see full instructions)
      U3 - Return Values - debuggingMaxVal_instruction: |-
        Correct the error in maxVal
        so that it correctly reports the maximum value.  (Click to see full instructions)
      U3 - Return Values - debuggingReturns_instruction: |-
        Correct the error in maxVal
        so that it correctly reports the maximum value.  (Click to see full instructions)
      U3 - Return Values - increase1_instruction: |-
        Call the increase function within
        moveForward, write, and console.log.  (Click to see full instructions)
      U3 - Return Values - increase2_instruction: |-
        Change the increase function to
        return 3 times the input value. (Click to see full instructions)
      U3 - Return Values - min1_instruction: |-
        Test out the return values of the findMax
        function.  (Click to see full instructions)
      U3 - Return Values - useFindMin_instruction: |-
        Call findMin within the console.log
        statement to calculate the minimum of two values.  (Click to see full instructions)
      U3 - Return Values - useMinVal_instruction: |-
        Call minVal within the console.log
        statement to calculate the minimum of two values.  (Click to see full instructions)
      U3 - Return Values - wrapTurtle_instruction: |-
        Write wrap in this simple app
        to let the turtle "wrap" to the other side of the screen when it goes off.  (Click
        to see full instructions)
      U3 - Return Values - writeMaxVal_instruction: |-
        Write the function maxVal and
        then use it within the console.log statement to calculate the maximum of two
        values.  (Click to see full instructions)
      U3 - Search Terms - 1_instruction: |
        Create an array of all the movies made
        in 2008 and print it out. (Click to see full instructions)\r
      U3 - Search Terms - 2_instruction: |
        Print out all the movies with year 2008
        using the readRecords search terms. (Click to see full instructions)\r
      U3 - Search Terms - 3_instruction: |
        Print whether or not there are movies matching
        the search criteria (Click to see full instructions)\r
      U3 - Search Terms - 4_instruction: |
        Print whether or not there are movies matching
        the search criteria (Click to see full instructions)\r
      U3 - Search Terms - 5_instruction: |
        Print out the cities that are in California
        or have a population of 2,000,000. (Click to see full instructions)\r
      U3 - Search Terms - 6_instruction: |
        Print out the cities that are in California
        or have a population of 2,000,000. (Click to see full instructions)\r
      U3 - Simple Drawing - Comments_instruction: Do this
      U3 - Simple Drawing - Ellipse and No Fill_instruction: Do this
      U3 - Simple Drawing - Fill_instruction: Do This
      U3 - Simple Drawing - No Fill_instruction: Do this
      U3 - Simple Drawing - Order of Blocks_instruction: Do this
      U3 - Simple Drawing - Oval_instruction: Do This
      U3 - Simple Drawing - Personal Drawing_instruction: DO This
      U3 - Simple Drawing - Rectangle Width and Height_instruction: Do This
      U3 - Simple Drawing - Rectangle_instruction: Do This
      U3 - Simple Drawing - Road Ellipse_instruction: Do This
      U3 - Simple Drawing - Road Rects and Color_instruction: Do This
      U3 - Simple Drawing - Simple Shape Drawing_instruction: Do This
      U3 - Simple Drawing - Stroke and Stroke Weight_instruction: Do this
      U3 - Simple Drawing - X and Y values_instruction: Do This
      U3 - Simple Drawing - regular polygon_instruction: Do this
      U3 - Simple Drawing - text_instruction: Do This
      U3 - Simulation - 1_instruction: |-
        Use a while loop to "flip a coin 10 times"
        and write the values to the screen. (Click to see full instructions)
      U3 - Simulation - 2.1_instruction: |-
        Change your looping condition so the simulation
        runs until there are 5 heads flipped. (Click to see full instructions)
      U3 - Simulation - 2.5_instruction: |-
        Run your simulation to get the full 10,000
        heads! How long did it take? (Click to see full instructions)
      U3 - Simulation - 2_instruction: |-
        Keep track of how many heads (1's) your
        program generates and print the results to the screen. (Click to see full
        instructions)
      U3 - Simulation - 3_instruction: |
        Add functionality that counts how many heads
        in a row are flipped. (Click to see full instructions)\r
      U3 - Simulation - 4_instruction: |-
        Update your while loop's condition so the
        the coin flips until there are three heads in a row. (Click to see full instructions)
      U3 - Simulation - 5_instruction: |-
        Change your while loop to run until you get
        a streak of 12 heads. How many flips did it take? (Click to see full instructions)
      U3 - Simulation - 6_instruction: |-
        Keep adding to your simulation. What do you
        want to explore next? (Click to see full instructions)
      U3 - Simulation - App_instruction: |-
        Change your code to run the full simulation
        with 10,000 coins. What was your longest streak of heads? (Click to see full
        instructions)
      U3 - Simulation - Template_instruction: |-
        Use a while loop to "flip 10 coins"
        and write them to the screen. (Click to see full instructions)
      U3 - Sprites - Intro Sprites_instruction: Do This
      U3 - Sprites and Mod - Create  and Draw Sprite_instruction: Do This
      U3 - Sprites and Mod - Mouse Width and Height_instruction: Do this
      U3 - Sprites and Mod - Mouse X and Y_instruction: Do this
      U3 - Sprites and Mod - Rand Around Mouse_instruction: Do this
      U3 - Sprites and Mod - Rand Shape Color_instruction: Do This
      U3 - Sprites and Mod - Shape Color_instruction: Do This
      U3 - Sprites and Mod - Wrap Many Squares_instruction: Do This
      U3 - Sprites and Mod - X and Y Prop_instruction: Do This
      U3 - Sprites and Mod - two sprites_instruction: Do This
      U3 - User Input - Save getText To Variable_instruction: |-
        Save the age and name
        of the user in variables (Click to see full instructions)
      U3 - User Input - Saving After Input_instruction: |-
        Save the age of the user
        in a variable using getText() (Click to see full instructions)
      U3 - User Input and String -  Concat_instruction: |-
        Output a message about age
        in a Text Area (Click to see full instructions)
      U3 - Variables - Clicker Game_instruction: |-
        Create your improved Chaser-Game
        here. (Click to see full instructions)
      U3 - Variables - Debug Scope_instruction: |-
        Why isn't the value of foo changing
        correctly? Make a guess. (Click to see full instructions)
      U3 - Variables - Debugging with Turtle_instruction: |-
        Use your new debugging
        techniques to get the code to run correctly (Click to see full instructions)
      U3 - Variables - Decrement_instruction: |-
        Decrement the value of the variable.
        (Click to see full instructions)
      U3 - Variables - Identify Variables_instruction: |-
        Identify the values printing
        in the terminal with console.log statements. (Click to see full instructions)
      U3 - Variables - Increment_instruction: |-
        Use the console.log debugging technique
        to see what is happening in this example. Add another variable and increment
        its value. (Click to see full instructions)
      U3 - Variables - Incrementing Variables_instruction: |-
        Create a repeat loop
        for the repeated code and use increment to recreate the original program with
        less lines of code! (Click to see full instructions)
      U3 - Variables - Read Using Turtle_instruction: |-
        Create a second set of variables
        for x and y position. Move turtle to that new location. (Click to see full
        instructions)
      U3 - Variables - Reassigning Variables with Console.log_instruction: |-
        Add another
        reassignment statement at the end of the code to change the value of the variable
        at second time. (Click to see full instructions)
      U3 - Variables - Set to Expression with Other Variables and Turtle_instruction: "（點擊觀看完整說明）"
      U3 - Variables - Set to Expression with Other Variables_instruction: |-
        Write
        an expression that calculates the player's total score and stores it in the
        totalScore variable. The calculation is: the player's points times lives
        divided by the total time. (click to see full instructions)
      U3 - Variables - Set to Expression with Turtle_instruction: "（點擊觀看全部）"
      U3 - Variables - Set to Expression_instruction: |-
        Test out the new expressions.
        (Click to see full instructions)
      U3 - images - bee free play_instruction: Do this
      U3 Digital Assistant Design_instruction: |-
        Pick a topic for your Digital Assistant
        and create the basic layout with a text input and text area. (Click to show
        full instructions)
      U3 Digital Assistant Set Text_instruction: |-
        Have your digital assistant repeat
        back what the user types and include a canned response. (Click to see full
        instructions)
      U3 Digital Assistant Target - Mehal_instruction: |-
        Try out a demo of the Digital
        Assistant!
      U3 Digital Assistant Target_instruction: Try out a demo of the Digital Assistant!
      U3 Digital Assistant Template_instruction: This is a project template!
      U3 Digital_instruction: |-
        Choose a specialization topic for your digital assistant.
        Create a basic digital assistant that takes the user's input and displays
        back a default response.
      U3 Variables consolelog_instruction: |-
        Use the write block to display the value
        of size
      U3 Variables flower example_instruction: |-
        Change the value of petalSize multiple
        times. How does it change your drawing?
      U3 Variables gray square_instruction: |-
        Change the value of petalSize multiple
        times. How does it change your drawing?
      U3 Variables make a square_instruction: |-
        Change the value of size multiple
        times. How does it change your drawing?
      U3 Variables misconceptions try it_instruction: |-
        Test out your predictions
        from the previous level.
      U3 Variables randomize your square_instruction: |-
        Change the value of petalSize
        multiple times. How does it change your drawing?
      U3 Variables write_instruction: |-
        Use the write block to display the value of
        size
      U3 full clicker demo_instruction: Clicker game - Try it out!
      U3 mehal's clone_instruction: Try out a demo of the Digital Assistant!
      U3- Variables - Assign Random For Turtle Draw_instruction: |-
        Try writing the
        same code in text mode.
      U3- Variables - Changing the Value_instruction: |-
        Update the value of 'turnAmount'
        before each moveForward so the turtle turns a different amount each time.
        (Click to see full instructions)
      U3- Variables - Create And Assign_instruction: |-
        On one line add a variable
        called "lives" and assign it the value 3. Print it to the console. (Click
        to see full instructions)
      U3- Variables - Text Mode_instruction: 1. 切換到文字模式並輸入說明；2. 拖曳積木到文字模式；3. 實驗程式碼完成
      U3-Design Mode-ID and Event Handler_instruction: |-
        Add an event handler for
        the button using the "Insert and show" link in the Design Mode Events tab.
        (Click to see full instructions).
      U3-Design Mode-ID_instruction: |-
        Using the Design Mode Events change the button
        ID and update the code to match. (Click to see detail instructions).
      U3-Design Mode-Image_instruction: |-
        Recreate the "Chaser Game" from the last
        lesson using Design Mode. (Click to see full instructions.)
      U313 Two Buttons with Ids_instruction: |-
        Predict what will happen. Once you've
        made a prediction, run the code to see what happens. (Click to see full instructions)
      U313 drag Two Buttons_instruction: |-
        Run a program with two buttons that have
        the same id to see the warning message in the console. Change the ids to make
        the program run without getting a warning message.
      U313 eventsDetails_instruction: |-
        Run a program with two buttons that have the
        same id to see the warning message in the console. Change the ids to make
        the program run without getting a warning message.
      U3L03 - draw rect function_instruction: |-
        Write a function called drawRectangle().\r
        (Click
        to see full instructions)
      U3L03 - draw step_instruction: |-
        Write the drawStep function. (Click to see
        full instructions)
      U3L03 Creating Procedures 1_instruction: |-
        Write the turnAround() function and
        use it to make the turtle move as depicted. see: U3L03-turnAndDown.gif
      U3L03 Define and use turnAround_instruction: |-
        Define a function called turnAround.
        Call the function and then move the turtle forward. (Click to see full instructions)
      U3L03 Draw a T using turnAround_instruction: |-
        Draw a plus sign using the provided
        version of turnAround().  (Click to see full instructions)
      U3L03 Three Steps_instruction: |-
        Define a function called drawSide() which draws
        three steps and moves the turtle to prepare for the next side (Click to see
        full instructions)
      U3L03 choose your own drawing_instruction: |-
        Now choose your own!  Pick one
        of the three drawings shown here and attempt to create it on your own, making
        smart decisions about how to break the problem down into re-usable functions.  You
        will review your work with a peer using "procedures peer review rubric."  Check
        it for the requirements.  GIF: U3L3-ProceduresChooseOne.png
      U3L03 define turnRight and draw a rectangle_instruction: |-
        Define a function
        called right() that turns the turtle to the right. Then use this function
        to draw a rectangle, as shown below. (Click to see full instructions)
      U3L03 draw diamond_instruction: |-
        Create a function called drawDiamond() that
        makes use of your previous work to draw the complete diamond. (Click to see
        full instructions)
      U3L04 - 3 by 3 with functions_instruction: |-
        Make the 3x3 square as efficiently
        as you can. (Click to see full instructions)
      U3L04 - snowflake_instruction: |-
        Create the design by breaking it down into
        layers of functions. (Click to see full instructions)
      U3L04 choose your own drawing_instruction: |-
        Now choose your own!  Pick one
        of the three drawings shown here and attempt to create it on your own, making
        smart decisions about how to break the problem down into re-usable functions.  You
        will review your work with a peer using "procedures peer review rubric."  Check
        it for the requirements.
      U3L04 diamond solution_instruction: |-
        Study this solution to the drawDiamond
        problem.  Notice that the whole program starts by calling drawDiamond() at
        the top.  The program then follows a chain of function calls.  You can trace
        what's happening in the code to see the functions reused.  It's also easy
        to read because the function names describe the expected behavior.
      U3L05_3x3GridEfficiencyChallenge_instruction: |-
        Let's revisit the 3x3 grid
        problem you did a few lessons ago.  This time the challenge is to program
        the solution "as efficiently as possible."  Now that you know how to write
        functions, it should be easier to break the problem down, and your code should
        be easier to read and debug.  See the rubric for more details about requirements
        and expectations.
      U3L05_draw3x3GridEfficiently_instruction: |-
        Draw a 3x3 grid above and to the
        right of the turtle. Try to do so with the fewest number of commands possible.
        NOTE: This is a very challenging problem.  You may need to play with it for
        a while and tweak it.  You might also consider using pencil and paper to sketch
        your ideas.
      U3L06 - moveForwardwithParams_instruction: |-
        Use a single command to move the
        turtle to the edge of the screen. (Click to see full instructions)
      U3L06 Challenge 1 triangle_instruction: |-
        Use the parameterized versions of
        the turtle commands to create a triangle with sides 100 pixels long. (Click
        to see full instructions)
      U3L06 Challenge 2 purple square_instruction: |-
        Read the documentation for penColor()
        and penWidth() before using them to draw the blue square.
      U3L06 Challenge 3 fill pink_instruction: |-
        Fill in the background of the screen
        with your favorite color. (Click to see full instructions)
      U3L06 Challenge 4 bullseye_instruction: |-
        Create the bullseye using hexadecimal
        colors and dot(). (Click to see full instructions)
      U3L06 Challenge 5 overlapping circles_instruction: |-
        This image is created just
        using dot() and penColor() but, how are we going to get those circles to be
        transparent?  If you haven't gotten the hint yet: check out the documentation!
      U3L06 Challenge 6 squiggles_instruction: "Read the documentation for the \"arcLeft\"\nand
        \"arcRight\" commands and then draw the squiggles as shown. "
      U3L06 Challenge 7 smiley face_instruction: |-
        Use turnTo() and moveTo() to help
        draw a smiley face. (Click to see full instructions)
      U3L06 Challenge 8 make your own_instruction: |-
        Create a drawing of your own.
        (Click to see full instructions)
      U3L07 - Free Play Loops and Random_instruction: |-
        Free Play! Use what you learned
        from loops and random to make your own little scene. Have fun.
      U3L07 - Starry Night Starter Code_instruction: "You are going to use loops\nand
        random numbers to generate an image of starry night sky similar to one\nshown
        here.  We have given you some starter code to generate the ground and\nsky
        (just two giant dots), you will add code to this project to make the stars,\ngrass,
        and moon.  All of the effects are clever applications of turtle dots,\nlines,
        and colors.  To get started, follow the series of steps suggested in\nthe
        accompanying worksheet. "
      U3L07 - allSeaGrass_instruction: 用迴圈的方式在圖片上添加 50 個海草。（點擊觀看完整說明）
      U3L07 - bubbles_instruction: 用迴圈的方式在圖片上添加 200 個泡泡。（點擊觀看完整說明）
      U3L07 - callingFunctionsInLoops_instruction: |-
        Call the function within the
        loop to complete the figure. (Click to see full instructions)
      U3L07 - createTriangleParam_instruction: |-
        Define a function that accepts a
        parameter to match the function calls and complete the image. (Click to see
        full instructions)
      U3L07 - fish_instruction: 用迴圈的方式在圖片上添加 15 隻魚。（點擊觀看完整說明）
      U3L07 - introSquare_instruction: |-
        Use a loop to draw a square. Then add another
        loop to draw many squares each one rotated some amount. (Click to see full
        instructions)
      U3L07 - loopsWithRandom_instruction: |-
        Increase the number of iterations to
        fill the screen with white. (Click to see full instructions)
      U3L07 - randomDots1_instruction: |-
        Increase the number of iterations to fully
        fill the screen with random dots. (Click to see full instructions)
      U3L07 - randomSquare_instruction: |-
        Draw the figure using a loop. (Click to
        see full instructions)
      U3L07 - seaGrass_instruction: 添加一個參數到「畫個海草」裡，以改變海草在繪製時的彎曲數。（點擊觀看完整說明）
      U3L07 - seaStar_instruction: 用迴圈的方式在圖片上添加 5 個海星。（點擊觀看完整說明）
      U3L07 - sunBeams_instruction: 用迴圈的方式在圖片上添加 100 道陽光光芒。（點擊觀看完整說明）
      U3L07 - topDownDesign_instruction: |-
        Get comfortable with the structure of this
        program, then move on to the next exercise. (Click to see full instructions)
      U3L08 - Enchantment Under the Sea_instruction: |-
        You have been provided with
        starter code for an “Under the Sea” scene which includes three functions,
        one each for the starfish, seagrass, and fish. Create versions of these functions
        which accept parameters to allow you to add more variation to your scene.  The
        student worksheet provides more details and guidance.
      U3L08 - createTwoParamTriangle_instruction: |-
        Define a function called drawTriangle()
        that accepts two parameters to set the size and width of the triangle. (Click
        to see full instructions)
      U3L08 - digitalScene_instruction: |-
        Create the functions you were assigned as
        part of your digital scene. (Click to see full instructions)
      U3L08 - drawSquareWithParam - for video_instruction: |-
        Use drawSquare() to recreate
        the image of both squares, this time using parameters. (Click to see full
        instructions)
      U3L08 - drawSquareWithParam_instruction: |-
        Use drawSquare() to recreate the
        image of both squares, this time using parameters. (Click to see full instructions)
      U3L08 - drawSquaresWithParams_instruction: |-
        Write drawSmallSquare() to draw
        a 25px square. (Click to see full instructions)
      U3L08 - fish_instruction: 添加一個參數到「畫個魚兒」裡，以改變魚兒在繪製時的尺寸。（點擊觀看完整說明）
      U3L08 - freePlay_instruction: |-
        Keep adding to your image by making more calls
        to your new functions with parameters. (Click to see full instructions)
      U3L08 - individualCode_instruction: |-
        Create the functions you were assigned
        as part of your digital scene. (Click to see full instructions)
      U3L08 - introUnderTheSea with comments_instruction: |-
        Add an extra fish, starfish,
        and piece of seagrass to the image. Look at, but don't change, the functions
        that create them. (Click to see full instructions)
      U3L08 - introUnderTheSea_instruction: |-
        Add an extra fish, starfish, and piece
        of seagrass to the image. Look at, but don't change, the functions that create
        them. (Click to see full instructions)
      U3L08 - multiParamFish_instruction: |-
        Add three parameters to your drawFish
        function to accept red, green and blue values to make your fish different
        colors. (Click to see full instructions)
      U3L08 - multipleLayersofParams_instruction: |-
        Call drawPlusSign() to complete
        the image. (Click to see full instructions)
      U3L08 - paramsToStarfish_instruction: 添加一個參數到「畫個海星」裡，以改變海星在繪製時的尺寸。（點擊觀看完整說明）
      U3L08 - randomInput_instruction: |-
        Use the randomNumber() blocks to test the
        functions you designed with random input. (Click to see full instructions)
      U3L08 - seaGrass_instruction: 添加一個參數到「畫個海草」裡，以改變海草在繪製時的尺寸。（點擊觀看完整說明）
      U3L08 - squareTwoParams_instruction: |-
        Call drawSquare() to complete the drawing
        of two squares. (Click to see full instructions)
      U3L08 - starFish_instruction: |-
        Add an extra fish, starfish, and piece of seagrass
        to the image. Look at, but don't change, the functions that create them.
        (Click to see full instructions)
      U3L08 - triangleTwoParams_instruction: |-
        Call drawSquare() to complete the drawing
        of two squares. (Click to see full instructions)
      U3L08 how to add comments_instruction: |-
        Use the randomNumber() blocks to test
        the functions you designed with random input. (Click to see full instructions)
      U3L1 - Simulation - Template_instruction: |-
        Use a while loop to "flip 10 coins"
        and write them to the screen. (Click to see full instructions)
      U3L12 Chaser Template_instruction: This is a project template!
      U3L13 - Button with ID_instruction: |-
        Drag a button out onto the screen and
        set its text to "Go forth!".  Run the program to make sure you can see the
        button.
      U3L13 - Debug Id Problem_instruction: |-
        Improve the button by choosing a descriptive
        and meaningful ID. (Click to see full instructions)
      U3L13 - Debug Id plus logic problem_instruction: |-
        The last problem was an example
        of syntax error.  App Lab did not understand which object it should be listening
        to for a "click" event so it showed an error message in the console to let
        you know.  Another kind of error is a logical error - the program is valid,
        but it's not doing what you want it to do.\r
        \r
        This program has 2 errors.
        A (tricky) syntax error and logical error.  Find them, fix them, and make
        the program work as expected.
      U3L13 - Debugging 1_instruction: |-
        Debug the program by verifying your IDs are
        being referenced properly. (Click to see full instructions)
      U3L13 - Debugging 2_instruction: |-
        Debug the program by properly ordering your
        button commands and event handlers. (Click to see full instructions)
      U3L13 - Debugging 3_instruction: |-
        Debug the program by fixing the logical error
        within the program. (Click to see full instructions)
      U3L13 - Project_instruction: |-
        Create your multi-screen app. (Click to see full
        instructions.)
      U3L13 - Turtle Driver Project_instruction: |-
        Create a "turtle driver" that
        includes buttons to move the turtle forward and turn it left and right. (Click
        to see full instructions)
      U3L13 - Turtle move with button_instruction: 添加一個按鈕，讓你在點擊它時，烏龜能夠移動。（點擊觀看完整說明）
      U3L13 eventsDetails_instruction: |-
        Add an event handler to the button to move
        the turtle forward. (Click to see full instructions)
      U3L14 - Assigning Random Value_instruction: |-
        Write a program that simulates
        the rolling of two dice and reports their individual values as well as the
        sum. (click to see full instructions)
      U3L14 - Mini Calculator embed_instruction: |-
        You will be prompted for two numbers,
        one right after the other.  See what happens.  Enter different numbers until
        you get the idea.
      U3L14 - Unfortunate Events Free Play_instruction: |-
        Follow the "Unfortunate
        Events" Worksheet and enter your code here to experiment.  We've pre-loaded
        the code you need to start.
      U3L14 - User Input Division calculator_instruction: |-
        Write a program that acts
        as a simple calculator. (click to see full instructions)
      U3L14 - Variable ReAssignment pt2_instruction: |-
        Trace the code and predict
        what you think will be printed to the console. Then add a console.log statement
        at the end of the program to see the last value of someNum to see if your
        full prediction is correct. (click to see full Instructions)
      U3L14 - concatenate simple_instruction: |-
        Modify the write statement on line
        3 to combine text and variables together to make the app display a single
        line of text that shows the player's lives and score. (click to see full
        instructions)
      U3L14 - moving memory challenge1_instruction: |-
        Using only the variables provided,
        assignment (=) and arithmetic (+ - * /) re-assign the values to make the console.log
        statement display the correct value(s).  (Click to see full instructions)
      U3L14 - moving memory challenge2_instruction: |-
        Using only the variables provided,
        assignment (=) and arithmetic (+ - * /) re-assign the values to make the console.log
        statement display the correct value(s).  (Click to see full instructions)
      U3L14 - moving memory challenge3_instruction: |-
        Using only the variables provided,
        assignment (=) and arithmetic (+ - * /) re-assign the values to make the console.log
        statement display the correct value(s).  (Click to see full instructions)
      U3L14 - moving memory challenge4_instruction: |-
        Using only the variables provided,
        assignment (=) and arithmetic (+ - * /) re-assign the values to make the console.log
        statement display the correct value(s).  (Click to see full instructions)
      U3L14 - moving memory challenge5_instruction: |-
        Using only the variables provided,
        assignment (=) and arithmetic (+ - * /) re-assign the values to make the console.log
        statement display the correct value(s).  (Click to see full instructions)
      U3L14 - moving memory challenge6_instruction: |-
        Using only the variables provided,
        assignment (=) and arithmetic (+ - * /) re-assign the values to make the console.log
        statement display the correct value(s).  (Click to see full instructions)
      U3L15 - Add reset button to UpDown app_instruction: |-
        Add code so that clicking
        the start over button will reset the game and send you back to the main screen.
        (Click to see full instructions)
      U3L15 - DEMO up down count practice app_instruction: |-
        Try out the demo app
        (Click to see full instructions)
      U3L15 - Debug forget to update var on reset in UpDown app_instruction: |-
        Run
        the app, and click the up or down button until you get to the gameOverScreen.
        Click 'Start Over' and try the app again. Find and fix the issue in the
        code. (Click to see full instructions)
      U3L15 - Debug if never triggers in UpDown app_instruction: |-
        Run the app and
        use the up and down arrows to try to hit the gameOverScreen. You can't! Find
        and fix the issue in the code. (Click to see full instructions)
      U3L15 - Debugging Simple If-statements =v==_instruction: |-
        Run the app, and
        click the up button. Then restart and run it again, and click the down button.
        Find and fix the issue in the code. (Click to see full instructions)
      U3L15 - Simple If-statements in UpDown App_instruction: |-
        Add an if statement
        so that the app changes screens when the count reaches -5. (Click to see full
        instructions)
      U3L15 - add code to make count down work_instruction: |-
        Write code to make the
        down arrow work as expected. (Click to see full instructions)
      U3L15 - clicker update score_instruction: |-
        Add code to update the score when
        the apple is clicked. (Click to see full instructions)
      U3L15 - count upDown bug forget to set text_instruction: |-
        Find the bug in the
        program and fix it. (Click to see full instructions)
      U3L15 - count upDown bug logic error wrong update_instruction: |-
        Find the bug
        in the program and fix it. (Click to see full instructions)
      U3L15 - count upDown bug var not created globally_instruction: |-
        Find the bug
        in the program and fix it. (Click to see full instructions)
      U3L15 - global var example count up_instruction: |-
        Look at the code for this
        app and see how the code works to update the count variable when the up arrow
        is clicked. (Click to see full instructions).
      U3L15 - mini clicker update score_instruction: |-
        Add code to update the score
        when the apple is clicked. (Click to see full instructions)
      U3L15 - practice with setText_instruction: |-
        Use setText to complete the click
        event handler for the down arrow. (Click to see full instructions)
      U3L15 - variable scoping problem debugging_instruction: |-
        See if you can figure
        out why the code is no longer working. (Click to see full instructions)
      U3L15 click add lives_instruction: |-
        Add lives to the clicker game that decrement
        by 1 when the background image is clicked (Click to see full instructions)
      U3L15 full clicker app_instruction: |-
        Complete your clicker game! (Click to
        see full instructions)
      U3L16 - challenge say hi app_instruction: |-
        Write a greeting to the user when
        they hit 'enter' in the text input, using the 'change' event. (Click to
        see full instructions)
      U3L16 - chaserApp_instruction: |-
        Create your own "Chaser Game." (Click to
        see full instructions)
      U3L16 - chooseImages_instruction: |-
        Replace the image in your application with
        one of your own. (Click to see full instructions)
      U3L16 - doubleQuotes_instruction: |-
        Save a string inside a variable and log
        it to the console. (Click to see full instructions)
      U3L16 - hideAndShow_instruction: |-
        Introducing textInput, getText and write.  First
        run the starter code several times.  Try to change what's written to the
        screen when the button is clicked. Then use getText to write to the screen
        what the user entered in the text box. GIF: U3L16 - useGetText.gif
      U3L16 - hideAndShowPractice_instruction: |-
        You are given some starting code
        that puts an image and two buttons on the screen.  The image is initially
        hidden. Add two new event handlers: one for each button, that when clicked
        hide and show the image.
      U3L16 - image and text labels_instruction: |-
        Introducing the setPosition command!  Replace
        the moveTo in the button-click event handler to use setPosition to move the
        button itself to a random location when it's clicked.
      U3L16 - images and text labels_instruction: "Introducing objects other than\nbuttons!
        - textLabels and images.  First try replacing your button with a\ntextLabel.
        \ Will the text respond to events just like the button?  Try connecting\nan
        event handler to it.  We've started you out with code similar to the result\nof
        the last level, you can copy your code from that level into here if you\nprefer. "
      U3L16 - images_instruction: "Introducing Images.  Try replacing the textLabel\nwith
        an image..  Will the image respond to events just like the button?  Try\nconnecting
        an event handler to it.  We've started you out with code similar\nto the result
        of the last level, you can copy your code from that level into\nhere if you
        prefer. "
      U3L16 - intro getText_instruction: |-
        Add an event handler to the Submit button
        so that when the button is clicked it will display the name entered in the
        text box to the console.  Use getText to get the value out of the text box.
        (Click to see full instructions)
      U3L16 - introSetPosition_instruction: |-
        Move the buttons to the bottom of the
        screen. (Click to see full instructions)
      U3L16 - introStrings_instruction: |-
        Save a string inside a variable and log
        it to the console. (Click to see full instructions)
      U3L16 - nameAgeTemplate_instruction: |-
        Add an Text Input box for the name and
        age. (Click to see full instructions)
      U3L16 - newEventTypes_instruction: |-
        Experiment with different event types and
        select the one that you think is best. (Click to see full instructions)
      U3L16 - outputWithTextArea_instruction: |-
        Output a message to the 'textArea'
        (Click to see full instructions)
      U3L16 - projectTemplate_instruction: |-
        Create your own "Chaser App". (Click
        to see full instructions)
      U3L16 - quick double click_instruction: |-
        Mini-Project.  The Quick Double-Click
        game.  In this simple game an object (an image) moves around, or pops up randomly
        on the screen, as the user clicks it.  The goal of our game will be to try
        to double-click the object before it moves.  Part of the challenge (and fun)
        here is creating this app from scratch.  You can look back at your previous
        work for examples, but it's fun to create something from scratch, too.  Try
        it!  For more details see the Activity guide for this lesson.
      U3L16 - setPosition to move button_instruction: |-
        Introducing the setPosition
        command! Replace the moveTo in the button-click event handler to use setPosition
        to move the button itself to a random location when it's clicked.
      U3L16 - setPositionMoveButton_instruction: Use setPositon to moveButton
      U3L16 - setupMoveToRandom_instruction: |-
        Modify the code so that the turtle
        moves to a random screen location when the button is clicked. (Click to see
        full instructions)
      U3L16 - singleSetPosition_instruction: |-
        Move the button to the middle of the
        screen. (Click to see full instructions)
      U3L16 - stringsVsNumbers_instruction: |-
        Run the program to see how strings and
        numbers behave with different arithmetic operators. (Click to see full instructions)
      U3L16 - text labels_instruction: |-
        Use the textLabel command to replace the
        button in your program with a text label. (Click to see full instructions)
      U3L16 - textInput getText write_instruction: |-
        Add an Text Input box for the
        name and age. (Click to see full instructions)
      U3L16 - toUpper_instruction: |-
        Make the name of the user appear in uppercase
        (Click to see full instructions)
      U3L16 - use images_instruction: |-
        Use the image command to replace the text
        label in your program with an image. (Click to see full instructions)
      U3L16 Mad Lib Clear Input_instruction: "Clear the user's previous text when\nthe
        Play Again button is clicked (Click to see full instructions) "
      U3L16 Mad Lib Demo_instruction: Mad Libs Demo - Try it out!
      U3L16 Mad Lib Student Setup_instruction: |-
        Back to Mad Libs: To get started,
        set up the two screens for your Mad Libs app (Click to show full instructions)
      U3L16 Mad Lib getText_instruction: "Before setting the text area with your\nMad
        Libs outline, get the user's text and incorporate their responses. (Click\nto
        see full instructions) "
      U3L16 Mad Lib setText_instruction: "When the Next button is clicked, set the\ntext
        area to have the main outline of your How-to Mad Libs (without the user's\ninput).
        (Click to see full instructions) "
      U3L16 Mad Lib toUpper_instruction: "Apply the toUpperCase and toLowerCase string\nfunctions
        to the user's text. (Click to see full instructions) "
      U3L17 - getAndSetKeyValue_instruction: |-
        Create an image like app. (Click to
        see full instructions)
      U3L17 - getKeyValue_instruction: |-
        Run the program several times to observe
        how the setKeyValue commands now always arrive in order. (Click to see full
        instructions)
      U3L17 - introCallbacks_instruction: |-
        Run the program several times to observe
        how the setKeyValue commands now always arrive in order. (Click to see full
        instructions)
      U3L17 - introKeyValue_instruction: |-
        Explore your key value pairs with the Data
        Viewer. (Click to see full instructions)
      U3L17 - readKeyValue_instruction: |-
        Explore your key value pairs with the Data
        Viewer. (Click to see full instructions)
      U3L17 - setKeyValue_instruction: |-
        Create and update your key value pairs using
        setKeyValue. (Click to see full instructions)
      U3L17 - twoSetKeyValue_instruction: |-
        Run the program several times to observe
        how often setKeyValue commands arrive out of order. (Click to see full instructions)
      U3L18 comparison operators_instruction: |-
        Use console.log to print out the different
        boolean expressions below to see what information they return. (Click to see
        full instructions)
      U3L18 comparison operators_for_video_instruction: |-
        Use `console.log` to print
        out the different boolean expressions below to see what information they return.
        (Click to see full instructions)
      U3L19 - Clicker Game Freeplay Area_instruction: |-
        Use this App Lab area to improve
        your clicker game.  You should start by copy/pasting the code from your old
        game here.  We're showing a more full set of blocks in the toolbox - some
        of the things you might not have used yet.  Feel free to explore then and
        experiment if you want to.  Everything else you need should be shown.  Have
        fun!
      U3L19 - DEMO up down count practice app_instruction: |-
        Try out the demo app
        (Click to see full instructions)
      U3L19 - Debugging with consoleLog_instruction: |-
        Add console.log() statements
        to find out the value of a and b after the first reassignment statement a
        = b; (Click to see full instructions)
      U3L19 - Simple If-statements in UpDown App_instruction: |-
        Add an if statement
        so that the app changes screens when the count reaches -5. (Click to see full
        instructions)
      U3L19 - Target Clicker App_instruction: |-
        Investigate the new elements of the
        'chaser-game'
      U3L19 - do concatenate string with var_instruction: |
        We've given you a piece
        of code from the previous screen.  Try changing the value assigned to foo
        to see the string change. \r
        Do this: \r
        1. Try changing the value assigned
        to foo to see the string change. \r
        2. By only modifying the lines of code
        that were given to you, try to get the output to say: “The value of foo is:
        9.  And isn’t that fine.” \r
      U3L19 - fix the var name syntax error v2_instruction: |-
        Fix the error and get
        it to print the value of both variables (Click to see full instructions)
      U3L19 - fix the var name syntax error_instruction: |-
        Fix the error and get it
        to print the value of both variables (Click to see full instructions)
      U3L19 - global var example count up_instruction: |-
        Look at the code for this
        app and see how the code works to update the count variable when the up arrow
        is clicked. (Click to see full instructions).
      U3L19 - practice with setText_instruction: |-
        Add another button that changes
        the text to the value of a new variable. (Click to see full instructions)
      U3L19 - test reassignment of two vars_instruction: |-
        Predict the value of a
        and b. Add console.log statements to find out the actual value of a and b.
        (Click for full instructions)
      U3L19 - three basic ops of variables_instruction: |-
        Add another variable called
        "lives" and set the value to 3. Print the value of the variable to the console.
        (Click to see full instructions)
      U3L19 - try out console log_instruction: |-
        Try out console.log.  Do this: replace
        the statement write("foo is: " + foo) with console.log("foo is: " + foo).  Run
        the program and you should see the output show up in the console area below
        the workspace.  Then try adding a few more console.log statements.  Display
        some text.  Make another variable and display that.  \r
        The app screen will
        be blank -- that's the point.  With console.log you can test output behind
        the scenes in a way the user cannot see.  \r
        \r
        \r
        GIF: U3L19-useconsolelog.gif
      U3L19 - up down count practice app_instruction: |-
        Set up the down button to
        decrease the value of count by 1 each time it is clicked. (Click to see full
        instructions)
      U3L19 - updating variables pt1_instruction: |-
        This app is only SLIGHTLY different
        from the previous one, but much more dynamic.  See if you can figure out how
        and why the count is going up.  Once you've figured it out then you should
        be able to DO THIS: add a button to the app that when clicked makes the count
        go down, and updates the label.  When you're done the app should work as
        shown in the demonstration.  GIF: U3L19 - upDownCountApp.gif
      U3L19 - variable reassignment challenge pt2_instruction: |-
        Make a prediction
        about the ending values of a, b, and c. Then use console.log to check your
        understanding (Click to see full instructions)
      U3L19 - variable reassignment part 1_instruction: |-
        Predict the value of a and
        b. Add console.log statements to find out the actual value of a and b. (Click
        for full instructions)
      U3L19 - variable scope problem 2_instruction: |-
        What is happening with foo?
        Play with the level to try to figure it out. (Click to see full instructions)
      U3L19 - variable scoping problem debugging_instruction: |-
        See if you can figure
        out why the code is no longer work. (Click to see full instructions)
      U3L19 - write var and string with same name v2_instruction: |-
        Fix the code so
        that the values of both variables print to the console. (Click to see full
        instructions)
      U3L19 - write var and string with same name_instruction: |-
        Fix the code so that
        the value of both variables prints to the console. (Click to see full instructions)
      U3L2 Using Simple Commands (no tooltips)_instruction: |-
        Draw a 1x1 square above
        and to the left of the turtle's starting position. Click to see full instructions.
      U3L2 Using Simple Commands_instruction: |-
        Draw a 1x1 square above and to the
        left of the turtle's starting position. Click to see full instructions.
      U3L23 Chatbot Conditionals 1_instruction: |-
        Add if, else if, and else statements
        to detect the movie genres Comedy, Romance, Action, and Horror. (Click to
        see full instructions)
      U3L23 Chatbot Intro 1a_instruction: |-
        Store the user's input inside a variable
        and log it to the console.
      U3L23 Chatbot Intro 2_instruction: |-
        Use string concatenation to store the user's
        input and assistant's answer into the conversation variable using the format
        "User: <input><bot name>: <default response>" . Log the conversation to
        the console.
      U3L23 Chatbot Intro 2a_instruction: |-
        Display the conversation onto the "text_area"
        element. Optional: clear the user's input after every "change" event.
      U3L23 Chatbot Intro 3_instruction: |-
        Add newline characters "\n" to separate
        the user's input and the computer's response.
      U3L23 Chatbot Intro 4_instruction: |-
        Use this level to make your chatbot look
        and work better!
      U3L23 Chatbot Intro_instruction: |-
        Choose a specialization topic for your digital
        assistant. Create a basic digital assistant that takes the user's input and
        displays back a default response.
      U3L23 Digital Assistant 1_instruction: |-
        Set the text_area element to display
        the user's input from the text_input element.
      U3L23 Digital Assistant 2_instruction: |-
        Add the response "I don't know."
        after each of the user's inputs.
      U3L23 Digital Assistant 3_instruction: |-
        Add the response "I don't know."
        after each of the user's inputs.
      U3L23 Digital Assistant 4_instruction: |-
        Display the user's input and the digital
        assistant's response on different lines.
      U3L23 Digital Assistant 5_instruction: |-
        Start the user's command with the
        phrase "User:" and the digital assistant's response with the phrase "Bot:"
      U3L23 Digital Assistant 6_instruction: |-
        When the user hits Run, display the
        text "I'm a generic digital assistant. Ask me anything!"
      U3L24 Basic String Parsing 1_instruction: |-
        Use the function "userInput.indexOf(<food>)"
        to check if the strings "pizza" or "soup" are anywhere in the user's
        response.
      U3L24 Chatbot Basic Conditionals_instruction: |-
        Check out the project description
        for instructions. (Click to see full instructions.)
      U3L24 Chatbot Conditionals 2_instruction: |-
        Adjust the "if" block to make
        the bot respond "I don't know that color." if the user types anything besides
        "blue"
      U3L24 Chatbot Conditionals 3_instruction: |-
        Adjust the "if/else" block to
        make the bot respond to the colors blue, red, and green, and to two additional
        colors.
      U3L24 Chatbot Keyword Record_instruction: |-
        Use the next level to record your
        digital assistant's keywords/phrases.
      U3L24 Chatbot Nested Conditionals_instruction: 添加一個條件式到你的個人助理，裡頭至少包含 3 個「否則」陳述式。
      U3L24 Nested Conditionals 1_instruction: |-
        Change all of the boolean expressions
        to use includes instead of ==. (Click to see full instructions)
      U3L24 Nested Conditionals 2_instruction: "Nest your movie genre if statements\ninside
        the if statements to check for a ? in the input. "
      U3L24 Nested Conditionals Bugs 2_instruction: |-
        Fix the problem with the code
        so that all the conditions can be reached. (Click to see full instructions)
      U3L24 Nested Conditionals Bugs 3_instruction: |-
        Fix the bugs that still exist
        in this program. Prove that the program works correctly.
      U3L24 Nested Conditionals Bugs_instruction: |-
        Expose the bugs in this problem
        by typing inputs into the user-input box. Track which inputs cause unexpected
        outputs.
      U3L24 introIncludes_instruction: |-
        Practice using the includes command. (Click
        to see full instructions)
      U3L25 - drag out key event_instruction: |-
        Set up an event handler to respond
        to keypress events, and display event.key in the console. Hit keys on the
        keyboard to see what happens. (Click to see full instructions)
      U3L25 - play sound when up key_instruction: |-
        Change the code so the sound will
        only play when the up arrow is pressed. (Click to see full instructions)
      U3L25 Chatbot Strings_instruction: |-
        1. Adjust your digital assistant to evaluate
        inputs the same way whether the inputs are capitalized or lowercase. 2. If
        a user asks "What is <phrase>?", where <phrase> is an input your digital
        assistant does not recognize, make your digital assistant respond "I don't
        know what <phrase> is."
      U3L25 String Parsing 1_instruction: |-
        Given the string "Wisdom begins with
        wonder." what is the index of the following characters W, t, w, ., d, and
        k? Confirm your expectation using the string.indexOf() function.
      U3L25 String Parsing 2_instruction: |-
        Use str.length to find the length of the
        strings “Hello World”, “Computer science rocks!", and “I promise to do my
        homework every day.”
      U3L25 String Parsing 3_instruction: |-
        Write a password length checker that writes
        “yes” to the console if a string has a length greater than 10, or “no” if
        it is less than or equal to 10.  Test your function using two strings, one
        that will satisfy each conditional option.
      U3L25 String Parsing 4_instruction: |-
        You are given the string "Wisdom begins
        with wonder." Use the string.substring(begin, end) function to print "begin"
        and "nder" to the console.
      U3L25 String Parsing 5_instruction: |
        Fill in the function, findBeginNder()
        to get the strings "begin" and "nder" from a sentence no matter where
        in the sentence they exist.\r
        Print the strings and their index to the console.
      U3L25 String Parsing 6_instruction: |-
        Write a function that takes a name (first
        last) and reorders it (last, first).
      U3L25 String Parsing 7_instruction: |-
        You are given the string “The earth has
        music for those who listen.” Manipulate it using the functions str.toUpperCase()
        and str.toLowerCase().
      U3L26 AND operator_instruction: |-
        Update the genre and rating if statements
        to give only one movie suggestion at a time. (Click to see full instructions)
      U3L26 Chatbot Compound Conditionals_instruction: |-
        Update your digital assistant
        to include at least one each of AND, OR, and NOT
      U3L26 Chatbot Final_instruction: |-
        Update your digital assistant to include
        at least one each of AND, OR, and NOT
      U3L26 Compound Logic_instruction: |-
        Write a conditional statement that detects
        if a command contains all the phrases "2000" "animated" and "G-rated."
        If all these phrases are detected, make Movie Bot respond "The top grossing
        animated and G-rated film in the 2000 decade was Finding Nemo."
      U3L26 NOT operator_instruction: "Write a conditional statement that detects\nif
        a command does not contain the phrase \"bad.\" If \"bad\" is not detected,\nmake
        Movie Bot respond normally. Otherwise, make Movie Bot respond \"Sorry,\nI
        don't know about bad movies.\" "
      U3L26 OR operator_instruction: |-
        Update the if statement to use an OR to check
        for a "?" as well as who, what, where, when, why, how in the user input.
        (Click to see full instructions)
      U3L27 Chatbot Final_instruction: |-
        Make your digital assistant awesome and when
        you are finished, ask one of your classmates to test it for you using the
        activity guide. As you add features to your digital assistant, track them
        on the next level.
      U3L2_Turtle3by3Grid_instruction: |-
        Draw a 3x3 grid to the front and right of
        the turtle as efficiently as possible. The turtle should end at its original
        location, facing its original direction. (Click to see full instructions)
      U3L2_TurtleSquare_right_instruction: |-
        Draw a square to the front and to the
        right of the starting location. (Click to show full instructions)
      U4 - Add Row By Hand_instruction: 添加一筆資料到你在數據檢視器上的資料表。（點擊觀看完整說明）
      U4 - Charts - Export Data_instruction: |-
        Export the data from the “ages” table
        as a CSV file, then remix this app and import the CSV file. (Click to see
        full instructions)
      U4 - Charts - Import Data 1_instruction: |-
        Download the CSV file we’ve provided,
        and then use the data viewer to import the data from the file into the “mytable”
        table. (Click to see full instructions)
      U4 - Charts - Import Data 2_instruction: |-
        Call readRecords on “mytable” and
        print each record to the console. (Click to see full instructions)
      U4 - Charts - Line Chart 1_instruction: |-
        Create a line chart showing the change
        in popularity of “#tbt” over time. (Click to see full instructions)
      U4 - Charts - Line Chart 2_instruction: |-
        Add a second line to your chart to
        show the change in popularity of both “#tbt” and “#nofilter” at the same time.
        (Click to see full instructions)
      U4 - Charts - Line Chart Template_instruction: This is a template.
      U4 - Charts - Remixing Apps with Data_instruction: |-
        Run this app and see what
        it prints to the console. Then remix the app and run the remixed version to
        see what happened to the data. (Click to see full instructions)
      U4 - Charts - Scatter Chart_instruction: |-
        Create a scatter plot of the “rottenTomatoes”
        table, using the new table and column names. (Click to see full instructions)
      U4 - Charts - drawChartFromRecords 1_instruction: |-
        Use the drawChartFromRecords
        block to create a scatter plot from the table in the database. (Click to see
        full instructions)
      U4 - Charts - drawChartFromRecords Options 1_instruction: 添加一個標題到你的圖表，並用「畫個資料圖表」裡可用的參數改變線條的顏色。（點擊觀看完整說明）
      U4 - Charts - drawChartFromRecords Options 2_instruction: |-
        Look through the
        drawChartFromRecords API and choose some more options to customize. (Click
        to see full instructions)
      U4 - Charts - drawChartsFromRecords 1_instruction: |-
        Add screen element, pull
        out drawCharts block, run the program!
      U4 - CreateRecord - 1_instruction: 添加一個「創建紀錄」指令，並運行程式。（點擊觀看完整說明）
      U4 - CreateRecord - 2.5_instruction: |-
        Change the table name in createRecord
        then check the Data Viewer to see the new table. (Click to see  full instructions)
      U4 - CreateRecord - 2_instruction: |-
        Change the name from "Alice" to something
        else in the createRecord command.  Run the program and use the Data Viewer
        to see the changes to your table. (Click to see full instructions)
      U4 - CreateRecord - 3_instruction: |-
        Use createRecord to add the song object
        as a record to a table. (Click to see full instructions)
      U4 - CreateRecord - 4_instruction: |-
        Run the program. Verify the song object
        was added to the database. Note the callback function now displays the copy
        of the record sent back back by the database. (Click to see full instructions)
      U4 - CreateRecord - 5_instruction: 添加一個屬性到 JavaScript 物件，運行後檢視資料表，觀察改變的物件如何影響資料表。（點擊觀看完整說明）
      U4 - Edit Data Table by Hand_instruction: |-
        View the data table and click edit
        next to each row.  Add the artists names for each song by hand. (Click to
        see full instructions)
      U4 - Exploring Data Tools - Template_instruction: |-
        Use createRecord to add
        the song object as a record to a table. (Click to see full instructions)
      U4 - Objects - accessingPropertiesInArray_instruction: 存取陣列中的物件屬性。（點擊查看完整說明）
      U4 - Objects - arraysOfObjects_instruction: |-
        Create an array called "students"
        and add all 5 student objects to the array. (Click to see full instructions)
      U4 - Objects - createContactObject_instruction: |-
        Construct a new object from
        the user inputs, and append it to your array. (Click to see full instructions)
      U4 - Objects - createContactsData_instruction: |-
        Add values to the three contact
        objects provided in the starter code. (Click to see full instructions)
      U4 - Objects - createDotNotation_instruction: |-
        Create a student Object yourself.
        Add properties to your object one at a time using dot notation. (Click to
        see full instructions)
      U4 - Objects - createObject_instruction: |
        Create an object with at least 3
        properties and display it in the Debug Console. (Click to see full instructions)
      U4 - Objects - dotNotation_instruction: |-
        Use dot notation to display individual
        properties of the object. (Click to see full instructions)
      U4 - Objects - eventHandlersToSwitchScreen_instruction: |-
        Attach event handlers
        to the "Add Contact" and "Go Back" buttons that allow the user to switch
        screens. (Click to see full instructions)
      U4 - Objects - eventParameter_instruction: |-
        Trigger both the keyboard and mouse
        event and examine the event objects displayed in the console. Why might an
        object be the best way to store this information? (Click to see full instructions)
      U4 - Objects - exemplarContactsApp_instruction: |-
        Use the Contacts app and then
        add a contact of your own. (Click to see full instructions)
      U4 - Objects - loopingArray_instruction: |-
        Loop over your array of students
        and print the name of every students. (Click to see full instructions)
      U4 - Objects - loopingArray2_instruction: |-
        Loop over your array of students
        and print the name and grade of every student. (Click to see full instructions)
      U4 - Objects - loopingCompoundConditions_instruction: |-
        Loop over the array
        of students and display the information of students who are present and in
        the 11th grade. (Click to see full instructions)
      U4 - Objects - loopingConditions_instruction: |-
        Loop over your array of student
        objects and display the names of every student who is present in class. (Click
        to see full instructions)
      U4 - Objects - pullValues_instruction: |-
        Create an event handler for the "Save
        Contact" button that displays the contents of the 4 text input fields in
        the console. (Click to see full instructions)
      U4 - Objects - readStarterCode_instruction: |-
        Familiarize yourself with the
        starter code and UI elements provided. (Click to see full instructions)
      U4 - Objects - resetIndexAndShow_instruction: |-
        Add code to your event handler
        for the "Save Contact" button so that when a new contact is added, the inputs
        are cleared, the screen is switched, and the correct contact is shown. (Click
        to see full instructions)
      U4 - Objects - showContact1_instruction: |-
        Add code to the showCurrentContact
        function to show the name of the contact stored at the currentIndex of your
        array. (Click to see full instructions)
      U4 - Objects - showContact2_instruction: |-
        Add the phone number and birthday
        text to your text area. (Click to see full instructions)
      U4 - Objects - showContact3_instruction: |-
        Display the image information for
        each contact. (Click to see full instructions)
      U4 - Objects - showSampleImage_instruction: |-
        Attach an event handler to the
        image URL text input so that the user can confirm their image will work as
        expected. (Click to see full instructions)
      U4 - Objects - writeWrap_instruction: |-
        Use the wrap function to prevent currentIndex
        from leaving the bounds of your array. (Click to see full instructions)
      U4 - Read Record - 1.2_instruction: |
        Place a console.log command below the
        readRecords command. (Click to see full instructions)\r
      U4 - Read Record - 1.3_instruction: '添加一個控制紀錄指令到回呼函式（callback function）裡。（點擊觀看完整說明）\r

'
      U4 - Read Record - 1_instruction: |
        Use console.log to display the records returned
        by a call to readRecords. (Click to see full instructions)\r
      U4 - Read Record - 2_instruction: |
        Change the table name so that the records
        are read from the new table. (Click to see full instructions)\r
      U4 - Read Record - 3_instruction: |
        Change the name of the table in a readRecords
        command to read from a table that does not exist. (Click to see full instructions)\r
      U4 - Read Record - 4.1_instruction: |
        Use indexes and dot notation to reference
        values in the response from the database. (Click to see full instructions)\r
      U4 - Read Record - 4_instruction: |
        Print out each record return from the readRecords
        call individually. (Click to see full instructions)\r
      U4 - Read Record - 5_instruction: |
        Using a for loop, display the title of each
        movie in your database. (Click to see full instructions)\r
      U4 - Read Record - part 1 - template_instruction: |
        Use console.log to display
        the records returned by a call to readRecords. (Click to see full instructions)\r
      U4 - ReadRecords - Contacts App 1_instruction: |-
        Use readRecords to copy the
        data in your database into your "contacts" global variable and call showCurrentContact.
        (Click to see full instructions)
      U4 - ReadRecords - Contacts App 2_instruction: |-
        Create a function called refreshLocalData.
        (Click to see full instructions)
      U4 - ReadRecords - Contacts App 3_instruction: |-
        Add a call to "refreshLocalData"
        to the callback function of the createRecord you use to add a new contact
        to your database. (Click to see full instructions)
      U4 - ReadRecords - Contacts App 4_instruction: |-
        Create a "Delete" button.
        (Click to see full instructions)
      U4 - ReadRecords - Contacts App 5 make delete work_instruction: |-
        Create an
        event handler for the "Delete" button you created. (Click to see full instructions)
      U4 - add createRecord to contacts App_instruction: |-
        Add code to your contacts
        app so that newly-added contacts are saved in a table. (Click to see full
        instructions)
      U4 - debug column names are case sensitive_instruction: |-
        Change song.title
        to song.Title (capital T).  And run the program.  Check the data table  (Click
        to see full instructions)
      U4 - deleteRecords 0_instruction: |-
        Use the deleteRecord command with default
        values. Verify the record was deleted. (Click for full instructions).
      U4 - deleteRecords 1_instruction: |-
        Find the id of "Little Bunny Foo Foo"
        in the data table "mySongs".  Use the deleteRecord command to delete it.  See
        what happens when you try to delete an ID a second time. (Click for full Instructions).
      U4 - deleteRecords 2 delete object_instruction: |-
        Use the song object to delete
        multiple objects in the database by changing only the "id" property. (Click
        for full Instructions).
      U4 - deleteRecords 2_instruction: |-
        Using the data viewer, find the id of a
        a record you want to delete. Use the deleteRecord command to delete it. (Click
        for full instructions).
      U4 - fix contacts by hand in data table_instruction: |-
        Use the data viewer to
        add rows to the data table.  Add the original hard-coded contacts from your
        app to the database. (Click to see full instructions)
      U4 - last stage test adding contcts_instruction: |-
        Confirm that new contacts
        you add are saved to the database.  Verify that after restarting your app,
        the contacts you added no longer show in the app, but still exist in the database.
        (Click to see full instructions)
      U4 Model App_instruction: |-
        Add a large red button to your screen using Design
        Mode. (Click for full instructions.)
      U4 Model Design 1_instruction: 添加一個大的紅色按鈕到設計模式畫面上。（點擊觀看完整說明）
      U4 vigenere cipher 2_instruction: 說明
      U4L02 - Objects - Template1_instruction: 範本
      U4L02 - Objects - createObject_instruction: "Create an object with at least\n5
        values including at least one string and one number. (Click to see full\ninstructions) "
      U4L02 - Objects - eventParameter_instruction: |-
        Trigger both the keyboard and
        mouse event and examine the event objects displayed in the console. Why might
        an object be the best way to store this information? (Click to see full instructions)
      U4L06 Data Storage 1_instruction: |
        Fill in your name instead of "Enter Your
        Name", run the app and click the button. Run it multiple times with different
        names! Watch the console and use the ‘View Data” button to see how the table
        is updated. As you play around make sure you can explain the purpose of each
        of the circled parts of the diagram.\r
        \r
      U4L06 Data Storage 2_instruction: "The app is a continuation of the previous\none
        we started. Add a text label to collect the users name and use that as\nthe
        data input for the record.\\r\n\\r\nRun the app and click the button multiple\ntimes
        and see what happens. Is there a problem you notice? "
      U4L06 Data Storage 3_instruction: |-
        We want to improve the user experience.
        Once they have submitted their data for storage, it would be nice to clear
        the textbox.  Update your app to clear the textbox after the data is stored.
      U4L06 Data Storage 4_instruction: 添加一個說明文字（label）及下拉清單到你的 app，然後儲存資料到你的 JSON
        物件，並添加到你資料表。在確定資料儲存後，重置下拉清單。
      U4L06 Data Storage 5_instruction: '添加一對單選按鈕或是多選方塊到你的 app，接著找到方式從它們那兒收集到資料。 '
      U4L06 Data Storage 6_instruction: " 使用「取得時間」或是「取得使用者 Id」積木來收集額外的資訊。 "
      U4L06 Data Storage 7_instruction: 添加第二個畫面到我們所建立的簡單應用程式裡，用來截取使用者的圖像。在 JSON 物件被儲存到資料表之後返回畫面
        1。
      U4L15 Read Data 1_instruction: |-
        Run the level and see what happens. Then edit
        the code to make it print a different column of information.
      U4L15 Read Data 2_instruction: |-
        Student should create a sentence which puts
        together all the pieces from a record.\r
        \r
        <<Name>> is <<Age>> years old
        and like <<Food>>
      U4L15 Read Data 3_instruction: |
        Print the sentence using the first JSON object
        in the array\r
        \r
      U4L15 Read Data 4_instruction: |-
        \r
        Use a random record from the list of records
        to display your sentence.
      U5 if-else-if movie example_instruction: |-
        Add an else-if statement in order
        to tell the user if their guess is high or low instead of just wrong. (Click
        to see full instructions)
      U6 - Final Project - Project Level_instruction: |-
        Build your final project here.
        (Click to see full instructions)
      U6 - updateRecord - Callback Success Parameter_instruction: |-
        Add an if-else
        block inside the callback function for updateRecord. (Click to see full instructions)
      U6 - updateRecord - Contacts - Edit UI_instruction: |-
        Set up the UI elements
        needed to edit contacts. (Click to see full instructions)
      U6 - updateRecord - Contacts - Edit event handler_instruction: |-
        Write event
        handlers for the Edit Contacts UI elements. (Click to see full instructions)
      U6 - updateRecord - Contacts - Save edited contact_instruction: |-
        Use updateRecord
        to store the user's edits in the database. (Click to see full instructions)
      U6 - updateRecord - Default Block_instruction: |-
        Use updateRecord to change
        the record for "Eye of the Tiger." (Click to see full instructions)
      U6 - updateRecord - Update Nonexistent Record_instruction: |-
        Force updateRecord
        to fail by changing the ID of songToUpdate. (Click to see full instructions)
      Underground Avoiding Lava_instruction: 有些方塊下有熔岩，您必須先覆蓋好才能夠往前移動。這時候「如果」指令就派上用場了。在正確位置添加「移動-向前」指令，開採到這些方塊。
      Underground Avoiding Lava_2018_instruction: |-
        Lava is hiding beneath some of
        these blocks, which you'll need to cover up before moving forward. An "if"
        command will come in handy here. Add a "move forward" command in the correct
        place to mine these blocks.
      Underground If Statements_instruction: 現在情況有些棘手。請開採 3 塊紅石，但可別掉進熔岩。使用「如果」指令，將鵝卵石放在你發現的任何熔岩上。
      Underground If Statements_2018_instruction: |-
        Now things are getting tricky.
        Mine 3 redstone, but don’t fall in the lava. Use an "If" command to place
        cobblestone over any lava you uncover.
      Underground Iron_instruction: 走進熔化的岩漿是不智的行為。放置鵝卵石來造出一座橋，接著開採至少 2 個鐵方塊。
      Underground Iron_2018_instruction: |-
        Walking into molten lava is a bad idea.
        Place cobblestone to create a bridge, then mine at least two of the iron blocks.
      Underground Mining Coal_instruction: 在地下可以找到稀有資源，但這兒真的太黑了。請放置至少 2 根火把，並且開採到至少
        2 塊煤炭。
      Underground Mining Coal_2018_instruction: 在地下可以找到稀有資源，但這兒真的太黑了。請放置至少 2 根火把，並且開採到至少
        2 塊煤炭。
      Unicorn Tag_instruction: |-
        Take a look at this project.  Do you see how it was
        made?
      Valentine_artist2_01_instruction: |-
        Program the artist to draw some grass for
        the Love Bug.
      Valentine_artist_01_instruction: 'Help the artist finish his llama heart. '
      Valentine_playlab_01_instruction: "Program Kiki (Actor 1) to move left and\nright
        when the left and right arrows are pressed. When Kiki is clicked, she\nshould
        throw hearts towards her friends. "
      Vigenere_instruction: Test
      WhileAdventure_instruction: |-
        Our adventurer wants to collect coins. Can you
        help her grab as many as she can using only one remove 1 block?
      'Widget: Black and White Pixelation_instruction': |-
        Now make your own image!
        We've started you off with a 10x10 canvas but you can make it whatever size
        you want. Happy pixeling!
      'Widget: Color Pixelation_instruction': |-
        Requirements: The icon must be 16x16
        pixels. You must use the Pixelation Widget to encode the bits of color information.
        The image must be encoded with at least 12 bits per pixel.
      'Widget: Text Compression_instruction': |-
        Look for patterns (repeated words
        or phrases) in the text. Enter the patterns you see into the dictionary on
        the right. As you type entries into the dictionary, the symbol for the entry
        is inserted into the text in place of the pattern.
      XML Scratchpad_instruction: 使用這個測試標準來抓取 xml 以作為單元測試
      aE1_instruction: "You chose to make a square napkin! \\r\n\\r\nTo finish, draw\na
        square with 20 pixel sides. "
      aE2_instruction: |-
        If you place your square loop inside another loop, we call
        that a nested loop. What do you need to add as an outer loop to make sure
        all 14 napkins line up next to each other?
      aE3_instruction: |-
        We've got to have a tablecloth!  \r
        \r
        Take your row of
        14 napkins and sew 14 of those together with another **outer loop** to make
        a cover for our table.
      aE3alternate_instruction: Alternate
      aE3alternateB_instruction: Alternate
      aE4_instruction: Alternate
      aE5_instruction: Example of puzzle using highest difficulty level shape.
      aE6_instruction: "How many times do you need to loop this to draw half  of\na
        circle? "
      aE7_instruction: |-
        If you create another loop like this one, but turn left instead
        of right, what happens? \r
        \r
        Can you repeat all of that to draw this wave?
      aE8_instruction: |-
        Now let's loop that whole thing four times to create this
        picture frame. Watch out for the corners - you can't just turn 90 degrees!
        \r
        \r
        If looping a 3 degree turn 60 times makes a half circle, which of
        these blocks of code will make an additional quarter circle for the corners?
      aEfreeplay_instruction: Free Play!
      allHallows2017_instruction: |-
        Trap the Code.org employees in the crayon box
        by drawing a square with 320 pixel sides!
      allthethings data blocks test_instruction: |-
        Please sign in to test applab levels
        (By design, applab levels only work if signed in. Normally, we make people
        sign in, but this is only enforceable for a whole script and would be annoying
        to do for the allthethings script).
      allthethings design mode elements_instruction: |-
        Please sign in to test applab
        levels (By design, applab levels only work if signed in. Normally, we make
        people sign in, but this is only enforceable for a whole script and would
        be annoying to do for the allthethings script).
      allthethings level dataTables_instruction: |-
        Please sign in to test applab levels
        (By design, applab levels only work if signed in. Normally, we make people
        sign in, but this is only enforceable for a whole script and would be annoying
        to do for the allthethings script).
      allthethings_U3 - Simple Drawing - Rectangle Width and Height_instruction: |-
        Do
        This
      allthethings_moviebot_instruction: |-
        This level cloned from "U3 Digital Assistant
        Target"
      allthethings_template_backed1_instruction: "Backed by a template #1. Please\nsign
        in to test applab levels (By design, applab levels only work if signed\nin.
        Normally, we make people sign in, but this is only enforceable for a whole\nscript
        and would be annoying to do for the allthethings script). "
      allthethings_template_backed2_instruction: |-
        Backed by a template #2. Please
        sign in to test applab levels (By design, applab levels only work if signed
        in. Normally, we make people sign in, but this is only enforceable for a whole
        script and would be annoying to do for the allthethings script).
      allthethings_ttscsp_instruction: |-
        Debug the program by fixing the logical error
        within the program. (Click to see full instructions)
      artistDebugVideo1_instruction: 使用`重複`迴圈為水添加波紋。
      artistFunctionsVideo1_instruction: 按照指示來做出你自己的函式。
      artistLoopsK1_instruction: |-
        This is a new type of puzzle called "Artist".
        Play with the level and draw something fun.
      artistLoopsK2_instruction: |-
        Now, use a `repeat` loop to draw this line five
        times!
      artistLoopsK2gradek_artist_loops3_instruction: |-
        Now, use a `repeat` loop to
        draw this line five times!
      artistLoopsK3_instruction: |-
        Draw a line eight steps long. This will become
        the land for our kingdom!
      artistLoopsK4_instruction: |-
        Now we need a castle with a draw bridge.  Fix the
        code so that the bridge lays straight instead of falling down.
      artistLoopsK5_instruction: |-
        Now we need to fix the top of the castle. Can you
        loop the code three times?
      artistLoopsK6_instruction: "Someone is stuck in the tower!  Fix the stairs\nto
        set them free. "
      artistLoopsK7_instruction: "This tower is lovely, what is downstairs? Build\nanother
        staircase to find out! "
      artistLoopsK8_instruction: |-
        Wow! There's a garden over there!  Help fix these
        stairs so I can get to it.
      artistLoopsK9_instruction: "**挑戰：**可愛極了！讓我們在花園裡散個步。"
      artistLoopsKA_instruction: |-
        These stones are in the wrong place.  Help me move
        them so I don't fall in!
      artistLoopsKB_instruction: "Look!  It's a theater.  Help me set up the chairs\nso
        we can all see the stage. "
      artistLoopsKFP_instruction: |-
        Picture time!  Use what you have learned to draw
        a picture of what you think the Artist saw on stage.
      asteroids_instruction: |-
        This Corgi has been a good boy! Drag this carrot to
        him as a special treat.
      beeDebugVideo1_instruction: 使用一個`重複`迴圈來收集所有的花蜜。
      behavior bash mary_instruction: Clone this level and make your own blocks!
      behaviors clone me 2_instruction: Clone this level and make your own blocks!
      behaviors clone me Ram_instruction: Clone this level and make your own blocks!
      behaviors clone me joshl_instruction: Clone this level and make your own blocks!
      behaviors clone me nk_instruction: Clone this level and make your own blocks!
      behaviors clone me tanya_instruction: Clone this level and make your own blocks!
      behaviors clone me_instruction: Clone this level and make your own blocks!
      behaviors pet test 123 copy_instruction: |-
        When Daisy gets a carrot, she gets
        excited. Use the **"when touches"** event and the "add behavior" block
        to make Daisy do something fun when she gets the carrot.
      behaviors pet test 123_instruction: |-
        When Daisy gets a carrot, she gets excited.
        Use the **"when touches"** event and the "add behavior" block to make
        Daisy do something fun when she gets the carrot.
      behaviors pet test 2_instruction: |-
        When Daisy gets a carrot, she gets excited.
        Use the **"when touches"** event and the "add behavior" block to make
        Daisy do something fun when she gets the carrot.
      behaviors pet test 3_instruction: "**It's time to make your own virtual pet!**\nYou
        can change whatever code you want to to make your own pet. Here are some\nideas:\\r\n*
        Can you make your pet start a new behavior when you click on it?\\r\n*\nCan
        you make your pet run away when you drag the vacuum to it?\\r\n* Can you\nadd
        other animal friends to your pet's area? "
      behaviors pet test_instruction: |-
        Last time, you practiced using "behaviors"
        to make a sprite do something forever. This time, we will use behaviors to
        make a virtual pet. \r
        \r
        This dog's name is Daisy. Daisy LOVES to snack
        on carrots. Add the "drag and drop" behavior to the carrot so you can move
        it to her.
      behaviors_caley_instruction: Clone this level and make your own blocks!
      ben's first level_instruction: Clone this level and make your own blocks!
      birdsDebugVideo1_instruction: 順著路徑讓我抓到那隻蠢豬，當心別碰到 TNT 炸藥，不然我的羽毛會滿天飛！
      bounce_1_instruction: 添加一個積木到「當按向左鍵時」積木下，並點擊「運行」。讓球拍可以用向左鍵移動到目標。
      bounce_10_instruction: 畫面上方有個新的目標區域，把「得分 - 自己」和「得分 - 對手」積木分別附加到「當球命中目標時」和「當球沒有碰到球拍時」積木下以製作一個遊戲。看看在對手得到
        2 分前，你能得到幾分。
      bounce_10_2018_instruction: 畫面上方有個新的目標區域，把「得分 - 自己」和「得分 - 對手」積木分別附加到「當球命中目標時」和「當球沒有碰到球拍時」積木下以製作一個遊戲。看看在對手得到
        2 分前，你能得到幾分。
      bounce_10_basketball_instruction: 現在畫面上方有一個目標！將「得分 - 自己」和「得分 - 對手」積木附加在「當球命中目標時」以及「當手沒有碰到球」積木的後方，創建一個遊戲。看看在對手得到
        2 分前，你可以獲得多少分。
      bounce_10_sports_instruction: 現在，目標在最上方！把「得分-自己」和「得分-對手」積木拖曳到「當球命中目標時」及「當球沒有碰到手」下以製作遊戲。試看看在對手獲得
        2 分前，你能得到幾分！
      bounce_11_instruction: 現在你可以附加積木到「當運行時」積木下。你必須在超過一個地方附加新的「重新新球」積木。並且試著改變場景、球拍和球的移動速度，看看在對手得
        2 分之前，你可以獲得多少分。
      bounce_11_2018_instruction: |-
        You can now attach blocks to the "when run"
        block. You have to attach the new "launch new ball" block in more than one
        place. Also, try changing the scene or the speed of the paddle and the ball
        and see how many points you can score before your opponent scores twice.
      bounce_11_basketball_instruction: 你現在可以在「當運行時」積木下方添加程式。你必須在多個地方添加「扔出新球」積木。此外，試著改變場景，或是手和球的移動速度。看看在你的對手得
        2 分前，你可以得幾分！
      bounce_11_sports_instruction: 你現在可以在「當運行時」積木下方添加程式。你必須在多個地方添加「扔出新球」積木。此外，試著改變場景，或是手和球的移動速度。看看在你的對手得
        2 分前，你可以得幾分！
      bounce_12_instruction: 創造你自己的彈跳遊戲。您可以改變所有看的到的東西，也可以改變規則。當你完成時，點擊完成，讓朋友可以在他們的手機上試試你的遊戲。
      bounce_12_2018_instruction: |-
        Create your own Bounce game. You can change all
        the visuals and the rules. When you're done, click Finish to let friends
        try your game on their phones.
      bounce_12_basketball_instruction: 創造你的籃球遊戲，你可以改變所有的遊戲規則。當你做好了，點擊「完成」，讓朋友可以在手機上玩你的遊戲。
      bounce_12_sports_instruction: 創建你自己的遊戲 ！這裡一切由你做主：你可以更改所有規則、混合搭配不同的運動，愈多創意愈好！當你完成後，點擊完成就可以讓你的朋友在手機上試試看你創造的遊戲。
      bounce_1_2018_instruction: |-
        Attach a block to the "when left arrow" block
        and press "Run". Move the paddle using the left arrow to reach the finish
        target.
      bounce_1_basketball_instruction: 在「當按向左鍵時」積木的下方添加程式並點擊「運行」。用向左鍵來移動手來到達終點目標。
      bounce_1_sports_instruction: 移動到旗幟那兒！在「當按向左鍵時」積木下添加程式，點擊「運行」讓球員移動到目標旗幟。
      bounce_2_instruction: 添加一個積木到「當按向右鍵時」積木下，並點擊「運行」。讓球拍可以用向右鍵移動到目標。
      bounce_2_2018_instruction: |-
        Attach a block to the "when right arrow" and
        "when left arrow" blocks. Move the paddle to reach both finish targets.
      bounce_2_basketball_instruction: 分別在「當按向右鍵時」和「當按向左鍵時」的積木添加程式，移動手到達兩邊的目標。
      bounce_2_sports_instruction: 現在有 2 個旗幟！在「當按向左鍵時」和「當按向右鍵時」的積木下添加程式，讓你的球員能往兩個方向移動。
      bounce_3_instruction: 現在，試試與「當按向上鍵時」積木類似的東西，將球拍移到上方的結束目標處。
      bounce_3_2018_instruction: 現在，試試與「當按向上鍵時」積木類似的東西，將球拍移到上方的結束目標處。
      bounce_4_instruction: 這一回你需要添加 4 個積木。移動球拍到 4 個目標區域以完成這個關卡。
      bounce_4_2018_instruction: |-
        This time you need to add four blocks. Move the
        paddle to all four finish targets to complete this puzzle.
      bounce_5_instruction: 我們將發送一顆球到手上。添加一個程式到「當球碰到手」積木下，確保球能到達旗幟的位置。
      bounce_5_2018_instruction: |-
        We're going to send a ball flying down towards
        the paddle. Attach a block to the "when ball hits paddle" block to ensure
        the ball reaches the finish target.
      bounce_5_basketball_instruction: 我們將發送一顆球到手上。添加一個程式到「當球碰到手」積木下，確保球能到達旗幟的位置。
      bounce_5_sports_instruction: 曲棍球即將從上頭掉下來！在「當碰到球員」積木下添加程式，以擊中目標旗幟。
      bounce_6_instruction: 現在目標在最上方，你需要附加一些積木到二個「當球碰到…」積木中間以完成這個關卡。
      bounce_6_2018_instruction: |-
        Now the finish target is on the top. You need to
        attach blocks to both of the "when ball hits" blocks to solve this puzzle.
      bounce_6_basketball_instruction: 現在要完成的目標在最上方。你需要添加程式到這兩個「當球碰到…」積木中以完成這個關卡。
      bounce_6_sports_instruction: 現在要完成的目標在最上方。你需要添加程式到這兩個「當球碰到…」積木中以完成這個關卡。
      bounce_7_instruction: 新增一個積木到「當…」積木中。試著讓球反彈，直到球擊中目標區為止。
      bounce_7_2018_instruction: 新增一個積木到「當…」積木中。試著讓球反彈，直到球擊中目標區為止。
      bounce_7_basketball_instruction: 添加程式到每個「當…」積木的下方。試著將球反彈直到擊中旗幟。
      bounce_7_sports_instruction: 添加程式到每個「當…」積木的下方。試著將球反彈直到擊中旗幟。
      brendan behaviors clone_instruction: Clone this level and make your own blocks!
      brendan hackathon level_instruction: |-
        these are the instructions for my level.  you
        should do this level and have a good time.
      clone me mary_instruction: Clone this level and make your own blocks!
      collector example_instruction: |-
        Put these blocks in order to collect all of
        the gold and solve the puzzle.
      collectorDebugVideo2_instruction: 把這些積木按照一個次序排列，收集所有的黃金以完成這個關卡。
      collectorSkinVideo1_instruction: 收集所有的 4 堆以通過這個關卡。
      collectorSkinVideo2_instruction: 收集一堆黃金以通過這個關卡。
      comment_intro_maze_2018_instruction: |-
        Use the new `comment` block to leave
        yourself quick reminders.
      conditionals_forvideo_harvester_instruction: |-
        Collect all of the corn and lettuce,
        then pick the pumpkin.
      conditionals_forvideo_playlab_instruction: Score as many points as you can!
      course1_artist_loops_challenge1_instruction: |-
        You can use a loop to draw many
        lines in a row.\r
        \r
        Can you draw a house? Make it look just the way you
        like it!  Try looking for patterns that repeat!
      course1_artist_loops_challenge2_instruction: 我們來玩個遊戲！盡可能畫多一些的 X！你有辦法每一排畫出 3
        個嗎？
      course1_artist_loops_challenge3_instruction: 啾啾！你能幫我做兩個鳥屋嗎？
      course1_artist_loops_challenge4_instruction: |-
        "It's time to toss the dice!
        Can you help me draw these?"
      course1_collector_loops_challenge1_instruction: |-
        "Can you help me spot some
        bugs? I know which way I want to go, but I'm not sure how many steps to take."
      course1_collector_loops_challenge2_instruction: '這次你只可以用一個移動積木，試著收集到寶藏吧！ '
      course1_collector_loops_challenge3_instruction: '這次你只可以用一個移動積木，試著收集到寶藏吧！ '
      course1_collector_loops_challenge4_instruction: |-
        Let's get the treasure! Help
        me across each row then come back to start the next row. Can you find a pattern?
      course1_maze_debugging_challenge1_instruction: |-
        Debug this level. Remove the
        extra blocks and add the missing blocks. Get the bird to the pig!
      course1_maze_debugging_challenge2_instruction: |-
        Debug this level. These are
        the right blocks, but they're in the wrong order!
      course1_maze_seq_challenge1_instruction: 沿著這條路帶我去找那隻笨豬，記得躲開 TNT 炸藥，不然會見到我的羽毛滿天飛！
      course1_maze_seq_challenge2_instruction: |-
        You can only move up to four times
        in each direction. Can you find a path before you run out of blocks?
      course1_playlab_events_challenge1_instruction: |-
        我的朋友藏在哪兒？
        你能寫個程式把我的朋友找出來嗎？
      course1_playlab_events_challenge2_instruction: |-
        "Let's have a party! Give
        my friends something to do when you click or tap them."
      course2_artist_nestedLoops_challenge1_instruction: |-
        Can you figure out how
        to make a picture like this?
      course2_artist_nestedLoops_challenge2_instruction: |-
        Can you figure out how
        to make a picture like this?
      course2_artist_prog_challenge1_instruction: |-
        Draw rooms for each of the animals.
        There are many different ways to solve this puzzle, so have some fun. The
        shortest possible solution is 6 blocks, but use as many as you like!
      course2_artist_prog_challenge2_instruction: |-
        *Help me paint the yellow lines
        on this road!*
      course2_bee_conditionals_challenge1_instruction: |-
        Collect all of the nectar
        or make all the honey.
      course2_bee_conditionals_challenge2_instruction: |-
        Collect all of the nectar
        or make all the honey.
      course2_collector_loops_challenge2_instruction: |-
        Let's hunt for treasure -
        using loops! Help the collector by debugging this code. Get all of the treasure!
      course2_collector_prog_challenge1_instruction: |-
        Look carefully! Can you collect
        all *10* pieces of treasure?
      course2_collector_prog_challenge2_instruction: |-
        There are 20 pieces of treasure
        to be found. Collect at least half to finish this challenge!
      course2_harvester_loops_challenge1_instruction: 收集所有的玉米。
      course2_harvester_loops_challenge2_instruction: |-
        收集所有的生菜。
        注意避開樹木和田地！
      course2_maze_loops_challenge1_instruction: "Now Scrat wants to try using loops\nto
        find his acorn! "
      course2_maze_programming_challenge1_instruction: |-
        *"The pig is hiding! Can
        you help me find a way around?"*
      course2_maze_programming_challenge2_instruction: |-
        Sometimes there is more than
        one way to solve the same problem. Sometimes it's faster to go backwards
        than it is to go forwards!
      course2_maze_seq_challenge1_instruction: 沿著這條路帶我去找那隻笨豬，記得躲開 TNT 炸藥，不然會見到我的羽毛滿天飛！
      course2_maze_seq_challenge2_instruction: |-
        You can only move up to four times
        in each direction. Can you find a path before you run out of blocks?
      course2_playlab_stage17_1_instruction: 你能讓小狗（角色1）說 Hi 嗎？
      course2_playlab_stage17_10_instruction: |-
        添加積木到「當運行時」事件，以改變背景及企鵝的移動速度。\r
        \r
        玩這個遊戲，並使用方向鍵移動企鵝，幫助他達到過關分數。
      course2_playlab_stage17_11_instruction: 創造你自己的故事，當你做好後點擊完成，讓你朋友能透過手機玩體驗你的故事。
      course2_playlab_stage17_2_instruction: 你能使小狗（角色1）說點甚麼，然後也讓小貓（角色2）說點甚麼嗎？
      course2_playlab_stage17_3_instruction: 你可以寫一個程式來讓小狗（角色1）走向小貓嗎？
      course2_playlab_stage17_4_instruction: 你可以寫一個程式來讓小狗（角色1）走向小貓，並且在小狗到達時，小貓對牠說
        Hello？
      course2_playlab_stage17_5_instruction: 你可以寫一個程式讓小貓被點擊時說 Hi 嗎？
      course2_playlab_stage17_6_instruction: 現在，寫一個程式來控制企鵝，用向上/下/左/右鍵來到達所有目標！
      course2_playlab_stage17_7_instruction: |-
        The `repeat forever` block allows you
        to run code over and over forever. Can you attach blocks to move Chomp the
        Dino (actor 2) up and down forever?
      course2_playlab_stage17_8_instruction: |-
        你可以讓企鵝（角色1）撞到恐龍時說「哎喲！」，然後播放一個「撞擊」的音效？\r
        \r
        完成後試試看，用方向鍵移動企鵝，讓這個情況發生。
      course2_playlab_stage17_9_instruction: |-
        添加一個積木，讓企鵝撞上章魚（角色3）時得到一分。\r
        運行遊戲並用方向鍵移動企鵝，直到你得分為止！
      course3_artist_concept_challenge1_instruction: |-
        Feel free to use trial and
        error. You are not expected to get the image perfect the first time.   Want
        to see more hints?  Click here!
      course3_artist_functions_challenge1_instruction: |-
        Once you define a function,
        you can call it over and over again - whenever and wherever you want! Try
        this code to see how it works, then change it to make your own impressive
        design!
      course3_artist_functions_challenge2_instruction: |-
        Try this code to see how
        it works, then make the program your own!
      course3_bee_debugging_challenge1_instruction: |-
        Watch how the bee gets the nectar.
        Can you use the same kind of pattern to help the bee make all of the honey?
      course3_bee_functions_challenge1_instruction: |-
        You are on your own for this
        challenge. This could "bee" harder than it looks!
      course3_bee_functions_challenge2_instruction: |-
        You are on your own for this
        challenge!
      course3_bee_functions_challenge3_instruction: |-
        Create a new function to collect
        all the nectar and honey while there is a path ahead. Use it to complete the
        puzzle!
      course3_bee_functions_challenge4_instruction: |-
        Use everything you have learned
        to complete this puzzle!
      course3_collector_debugging_challenge2_instruction: |-
        Are you an expert of nested
        loops? Use what you have learned so far to collect all of the treasure!
      course3_farmer_condLoops_challenge1_instruction: |-
        Turn right at the pumpkins.
        Collect everything to complete the level. Each hidden crop has only one corn
        or lettuce.
      course3_farmer_condLoops_challenge2_instruction: |-
        Collect everything to complete
        the level.
      course3_farmer_until_challenge2_instruction: |-
        Use If/Else blocks to follow
        the curvy path. At each corner, use the `remove 1` command in a loop to clear
        the piles.
      course3_maze_debugging_challenge1_instruction: |-
        *"Am I just going around in
        circles?"*
      course3_maze_debugging_challenge2_instruction: |-
        *"If I turn too often, I might
        get dizzy! Help me reach the acorn with only four `turn` commands."*
      course3_maze_until_challenge1_instruction: |-
        No hints, just challenge. Get the
        zombie to the sunflower.
      course3_playLab_challenge1_instruction: |-
        Something should happen when you get
        enough points or when you run out of points. Add some code to the `win game`
        and `lose game` functions to make the game work the way it should. \r
        Click
        the hints for ideas!
      course3_playlab_challenge2_instruction: |-
        Can you figure out how this "Fortune
        Teller" app works? Click `MORE` to see your challenges.
      course3_playlab_stage16_1_instruction: 你能讓這隻狗說出 Hello World 嗎？
      course3_playlab_stage16_2_instruction: 你可以先讓小狗說一些話，然後再讓小貓說一些話嗎？
      course3_playlab_stage16_3_instruction: 你可以寫個程式讓小狗移動到小貓那裡嗎？
      course3_playlab_stage16_4_instruction: 你可以寫一個程式，讓小狗移動到小貓那裡，並且在小狗到達小貓那兒時，讓小貓說
        hello？
      course3_playlab_stage16_5_instruction: 你能夠添加一個積木讓章魚變得快樂嗎？
      course3_playlab_stage16_6_instruction: 創造你自己的故事，當你做好後點擊完成，讓你朋友能透過手機玩體驗你的故事。
      course3_playlab_stage17_1_instruction: 你可以寫一個程式讓章魚被點擊時說 hello 嗎？
      course3_playlab_stage17_2_instruction: 妳能寫一個程式，用上/下/左/右鍵來控制企鵝移動去碰到所有的目標嗎？
      course3_playlab_stage17_3_instruction: "「重複無限次」積木可以讓你不斷執行程式。你能把程式積木附加到裡頭，讓恐龍不停的上下移動嗎？"
      course3_playlab_stage17_4_instruction: 你可以讓企鵝撞到恐龍時說「哎喲！」，然後播放一個「撞擊」的音效？用方向鍵移動企鵝，讓這個情況發生。
      course3_playlab_stage17_5_instruction: 你能添加一個積木讓企鵝撞上章魚時就加一分嗎？運行遊戲用方向鍵移動企鵝，直到得分為止。
      course3_playlab_stage17_6_instruction: 你能添加一些積木來變更背景還有企鵝的速度嗎？用方向鍵移動牠直到得分為止。
      course3_playlab_stage17_7_instruction: 創造你自己的故事，當你做好後點擊完成，讓你朋友能透過手機玩體驗你的故事。
      course4_artist_binary_challenge1_instruction: |-
        You can only use each binary
        value (0 or 1) once each in this puzzle. Try using nested loops to complete
        this drawing.
      course4_artist_binary_challenge2_instruction: |-
        Are you persistent enough to
        restore this logo back to normal?
      course4_artist_concept_challenge2_instruction: |-
        Create five pinwheel designs
        using the code below.
      course4_artist_functions_challenge2_instruction: |-
        Try this code to see how
        it works, then make the program your own!
      course4_artist_fwp_challenge1_instruction: |-
        Try running this program, and make
        changes to see what happens. Can you figure out how it works? (Or delete it
        and replace it with something totally different)
      course4_artist_variables_challenge1_instruction: |-
        You've now learned everything
        you need to know to make a pattern like this! This puzzle is meant to be difficult.  Can
        you stick with it until you figure out the solution?
      course4_artist_variables_challenge2_instruction: |-
        You've now learned everything
        you need to know to make a pattern like this! This puzzle is meant to be difficult.  Can
        you stick with it until you figure out the solution?
      course4_bee_for_challenge1_instruction: |-
        Use this for loop to collect all of
        the nectar. There are a few actions that you will want to repeat 'counter'
        times.
      course4_bee_fwp_challenge1_instruction: |-
        Use one `for loop` in a function to
        collect all of the corn. The same `for loop` can count to different maximum
        values by using the `length` parameter.
      course4_bee_fwp_challenge2_instruction: |-
        Use one `for loop` in a function to
        collect all of the vegetables in the row. Make the `for loop` can count to
        different maximum values by using the `length` parameter. Make your program
        as short as possible by using a second `for loop` outside the function.
      course4_collector_nested_loops_challenge2_instruction: |-
        Help the collector
        reach at least two piles of treasure using only the blocks in your toolbox.
        It is possible to collect all 4.
      course4_harvester_nested_loops_challenge1_instruction: |-
        "I need some help
        on the farm! Help me harvest this corn using only the blocks in your toolbox."
      course4_playlab_variables_challenge1_instruction: |-
        Use these blocks to make
        the actors share a knock-knock joke. Change the setup and punchline to tell
        your own joke!
      course4_playlab_variables_challenge3_instruction: |-
        Can you figure out how this
        "Fortune Teller" app works? Click `MORE` to see your challenges.
      courseA_artist_loops1_instruction: |-
        This is a new type of puzzle called "Artist".
        Play with the level and draw something fun.
      courseA_artist_loops10_instruction: 幫我放些石頭，我不想掉下去！
      courseA_artist_loops10_2018_instruction: |-
        Help me put down stones so I don't
        fall in!
      courseA_artist_loops11_instruction: 幫我建置階梯，讓我可以看著船航行到遠方。
      courseA_artist_loops11_2018_instruction: |-
        Help me build steps to watch the
        ship sail away.
      courseA_artist_loops12_instruction: 小藝術家在遠處看到了一些有趣的東西，你覺得他看到了什麼？把它畫出來。
      courseA_artist_loops12_2018_instruction: |-
        The artist saw something funny in
        the distance.  Draw what you think he saw.
      courseA_artist_loops1_2018_instruction: |-
        This is a new type of puzzle called
        "Artist". Play with the level and draw something fun.
      courseA_artist_loops2_instruction: |-
        Help the artist draw this line two times
        forward.
      courseA_artist_loops2_2018_instruction: |-
        Help the artist draw this line two
        times forward.
      courseA_artist_loops3_instruction: 向前畫一條線，重複 5 次。
      courseA_artist_loops3_2018_instruction: 向前畫一條線，重複 5 次。
      courseA_artist_loops4_instruction: |-
        Now, use a `repeat` loop to draw this line
        five times!
      courseA_artist_loops4_2018_instruction: |-
        Now, use a `repeat` loop to draw this
        line five times!
      courseA_artist_loops5_instruction: |-
        Draw a line seven steps long. This will
        become our horizon.
      courseA_artist_loops5_2018_instruction: |-
        Draw a line seven steps long. This
        will become our horizon.
      courseA_artist_loops6_instruction: Let's put a nice hill in the back.
      courseA_artist_loops6_2018_instruction: Let's put a nice hill in the back.
      courseA_artist_loops7_instruction: 使用「重複」迴圈為水添加波紋。
      courseA_artist_loops7_2018_instruction: 使用`重複`迴圈為水添加波紋。
      courseA_artist_loops7_forVideo_instruction: 使用`重複`迴圈為水添加波紋。
      courseA_artist_loops8_instruction: We need a ladder up to the boat.
      courseA_artist_loops8_2018_instruction: We need a ladder up to the boat.
      courseA_artist_loops9_instruction: 挑戰：修復這些階梯。
      courseA_artist_loops9_2018_instruction: 挑戰：修復這些階梯。
      courseA_artist_loops_challenge1_instruction: |-
        Can you draw a house? Make it
        look just the way you like it!
      courseA_artist_loops_challenge1_2018_instruction: |-
        Can you draw a house? Make
        it look just the way you like it!
      courseA_artist_loops_challenge2_instruction: 啾啾！你能幫我做兩個鳥屋嗎？
      courseA_artist_loops_challenge2a_instruction: |-
        *"Help me get these three tents
        set up!"*
      courseA_artist_loops_challenge2a_2018_instruction: |-
        *"Help me get these three
        tents set up!"*
      courseA_artist_loops_challenge3_instruction: 我們來玩個遊戲！盡可能畫多一些的 X！你有辦法每一排畫出 3
        個嗎？
      courseA_bee_seq1_instruction: |-
        Play with these blocks to help the bee get *one*
        nectar.
      courseA_bee_seq10_instruction: Try it by yourself! Get all the nectar.
      courseA_bee_seq11_instruction: Get all the nectar.
      courseA_bee_seq12_instruction: |-
        Play with these blocks to help the bee get
        *one* nectar.
      courseA_bee_seq13_instruction: |-
        Use three `Move West` blocks and one `Get Nectar`
        block.
      courseA_bee_seq14_instruction: |-
        Use three `Move North` blocks and one `Get
        Nectar` block.
      courseA_bee_seq2_instruction: Help the bee get the nectar!
      courseA_bee_seq3_instruction: Find the bug and fix it!
      courseA_bee_seq4_instruction: Try it yourself!
      courseA_bee_seq5_instruction: Try it yourself!
      courseA_bee_seq6_instruction: Now the bee needs to get nectar from two flowers!
      courseA_bee_seq7_instruction: Add two blocks to finish this puzzle!
      courseA_bee_seq8_instruction: Make sure to get nectar from every flower!
      courseA_bee_seq9_instruction: Make sure to get nectar from every flower!
      courseA_collector_loops1_instruction: 幫助 Laurel 移動，盡可能讓他找到所有的寶藏！
      courseA_collector_loops10_instruction: 幫助 Laurel 在幽深的山谷得到所有的寶藏。
      courseA_collector_loops10_2018_instruction: 幫助 Laurel 在幽深的山谷得到所有的寶藏。
      courseA_collector_loops11_instruction: 幫助 Laurel 獲得洞穴中的所有黃金。
      courseA_collector_loops11_2018_instruction: 幫助 Laurel 獲得洞穴中的所有黃金。
      courseA_collector_loops12_instruction: 發現寶藏啦！盡可能的收集到所有的寶藏吧！
      courseA_collector_loops12_2018_instruction: |-
        *"Eureka!  Get as much treasure
        as you can!"*
      courseA_collector_loops1_2018_instruction: |-
        Move Laurel around and get as much
        treasure as you can!
      courseA_collector_loops2_instruction: 這裡有 3 堆黃金！把它們全部收集起來。
      courseA_collector_loops2_2018_instruction: |-
        Get all three piles to pass this
        level.
      courseA_collector_loops4_instruction: 修正 Laurel 的路徑，讓牠能收集到寶藏。
      courseA_collector_loops4_2018_instruction: |-
        Fix Laurel's path to get all of
        this treasure.
      courseA_collector_loops5_instruction: 用你學到的方法來收集到所有的寶藏。
      courseA_collector_loops5_2018_instruction: |-
        Use what you learned to get all
        of the treasure.
      courseA_collector_loops6_instruction: 添加積木到程式中，以收集到所有的寶藏。
      courseA_collector_loops6_2018_instruction: |-
        Add blocks to this code to get
        all of the treasure.
      courseA_collector_loops7_instruction: 要添加什麼程式積木才可以收集到所有的寶藏？
      courseA_collector_loops7_2018_instruction: |-
        What should you add to this code
        to get all of the treasure?
      courseA_collector_loops8_instruction: 編寫程式來收集這些寶藏。
      courseA_collector_loops8_2018_instruction: 編寫程式來收集這些寶藏。
      courseA_collector_loops9_instruction: "**挑戰：**階梯上到處都是寶藏！寫個程式幫我得到全部的寶藏。"
      courseA_collector_loops9_2018_instruction: |-
        **Challenge:** The treasure goes
        all the way up these stairs!  Write the code to help Laurel get it all.
      courseA_collector_loops_challenge1_instruction: |-
        *"Can you help me spot some
        bugs?"*
      courseA_collector_loops_challenge1_2018_instruction: |-
        *"Can you help me spot
        some bugs?"*
      courseA_collector_loops_challenge2_instruction: '試著收集到寶藏吧！ '
      courseA_collector_loops_challenge2kp_instruction: |-
        Collect at least **3** pieces
        of treasure to pass this level.
      courseA_collector_loops_challenge2kp_2018_instruction: |-
        Collect at least **3**
        pieces of treasure to pass this level.
      courseA_collector_preLoops1_instruction: |-
        This is Laurel the Adventurer! \r
        \r
        Press
        "Run" to see her walk up to the treasure and grab it.
      courseA_collector_preLoops2_instruction: |-
        Great!  Now you get to add code yourself!  \r
        \r
        Snap
        a `get treasure` block to the bottom of the program and click "Run".
      courseA_collector_preLoops3_instruction: |-
        Snap two `E -->` blocks and one `get
        treasure` block to the bottom of the program, then click "Run".
      courseA_collector_preLoops4_instruction: |-
        Can you figure out how to solve this
        puzzle?
      courseA_collector_preLoops5_instruction: |-
        Get 1 of these 2 gems to solve this
        puzzle.
      courseA_collector_preLoops6_instruction: |-
        Get both pieces of treasure to solve
        this puzzle.
      courseA_collector_preLoops7_instruction: |-
        Get all three piles to pass this
        level.
      courseA_forVideoTest_artist_instruction: 使用`重複`迴圈為水添加波紋。
      courseA_harvester_forVideo_instruction: |-
        Can you pick all the corn using only
        **one** move block?
      courseA_harvester_loops1_instruction: Help the farmer pick all the corn!
      courseA_harvester_loops10_instruction: |-
        Help the harvester pick all five ears
        of corn!
      courseA_harvester_loops11_instruction: 'Try one more on your own! '
      courseA_harvester_loops2_instruction: Make sure to pick all the corn!
      courseA_harvester_loops3_instruction: |-
        Can you pick all the corn using only
        **one** move block?
      courseA_harvester_loops4_instruction: |-
        Can you help the harvester find the
        bug in her code?
      courseA_harvester_loops5_instruction: |-
        Try it yourself! Can you pick the corn
        at the end too?
      courseA_harvester_loops5a_instruction: |-
        Look at all this corn! Can you pick
        it all by yourself?
      courseA_harvester_loops5b_instruction: |-
        Can you change your code to make the
        harvester pick all the corn?
      courseA_harvester_loops6_instruction: |-
        You will need **one** `Move South` block
        and **one** `Move West` block.
      courseA_harvester_loops7_instruction: 'Try it on your own! '
      courseA_harvester_loops8_instruction: |-
        This is the same puzzle, but now you
        have to repeat **three** times!
      courseA_harvester_loops9_instruction: |-
        Can you figure out how to pick all the
        corn?
      courseA_harvester_seq1_instruction: |-
        Play with these blocks to help the harvester
        pick the piece of corn.
      courseA_harvester_seq10_instruction: Make sure to pick all the corn!
      courseA_harvester_seq11_instruction: Try it by yourself! Pick all the corn.
      courseA_harvester_seq12_instruction: |-
        Play with these blocks to help the bee
        get *one* nectar.
      courseA_harvester_seq13_instruction: |-
        Play with these blocks to help the harvester
        pick **one** corn.
      courseA_harvester_seq2_instruction: |-
        Use three `move west` blocks and one `pick
        corn` block to solve this puzzle.
      courseA_harvester_seq3_instruction: |-
        Use three `Move North` blocks and one
        `Pick Corn` block.
      courseA_harvester_seq4_instruction: |-
        Add one block to help the harvester pick
        the corn.
      courseA_harvester_seq5_instruction: Find the bug and fix it!
      courseA_harvester_seq6_instruction: Try it yourself!
      courseA_harvester_seq7_instruction: Try it yourself!
      courseA_harvester_seq8_instruction: |-
        Now the harvester needs to pick corn two
        times!
      courseA_harvester_seq9_instruction: Add two blocks to finish this puzzle!
      courseA_maze_ramp2_2018_instruction: |-
        Snap all blocks together to finish your
        code, then click "Run".
      courseA_maze_ramp2a_2018_instruction: |-
        Snap all blocks together to finish your
        code, then click "Run".
      courseA_maze_ramp3_2018_instruction: |-
        There is one extra block that is going
        to cause the bird to crash. Throw it away by dragging it back to the toolbox.
      courseA_maze_ramp3a_2018_instruction: |-
        Add a `North` block to the bottom of
        the other blocks to finish this code, then click "Run".
      courseA_maze_ramp4_2018_instruction: 小心 TNT 炸藥，不然羽毛會被炸飛！
      courseA_maze_ramp4a_2018_instruction: |-
        Can you figure out which block you need
        to add to the bottom of the other blocks to finish this code?
      courseA_maze_ramp5_2018_instruction: 小心 TNT 炸藥。
      courseA_maze_ramp5a_2018_instruction: 讓鳥抓到這隻豬！
      courseA_maze_seq1_instruction: 讓這隻鳥抓到壞豬豬！
      courseA_maze_seq10_instruction: '挑戰：繞開 TNT 炸蘗，讓鳥能夠抓到豬！ '
      courseA_maze_seq10_2018_instruction: "Challenge: Avoid the TNT to get the bird\nto
        the pig! "
      courseA_maze_seq11_instruction: 先往一個方向移動，接著再往另一個方向移動，讓鳥能夠抓到那頭豬。
      courseA_maze_seq11_2018_instruction: |-
        Move one way, then another to get the
        bird to the pig.
      courseA_maze_seq12_instruction: '抓住那頭豬！ '
      courseA_maze_seq12_2018_instruction: '抓住那頭豬！ '
      courseA_maze_seq13_instruction: 抓到這頭豬，不管你用什麼方法！
      courseA_maze_seq13_2018_instruction: 抓到這頭豬，不管你用什麼方法！
      courseA_maze_seq1_2018_instruction: 讓這隻鳥抓到壞豬豬！
      courseA_maze_seq2_instruction: 有個臭蟲（bug，程式中有錯誤的意思）！修正這個程式讓我到豬豬那兒。
      courseA_maze_seq2_2018_instruction: 有個臭蟲（bug，程式中有錯誤的意思）！修正這個程式讓我到豬豬那兒。
      courseA_maze_seq3_instruction: 修正這個程式，讓鳥抓到這頭豬！
      courseA_maze_seq3_2018_instruction: 修正這個程式，讓鳥抓到這頭豬！
      courseA_maze_seq4_instruction: "「移除」一個積木，讓鳥抓到這頭豬！"
      courseA_maze_seq4_2018_instruction: |-
        REMOVE a block to get the bird to the
        pig!
      courseA_maze_seq4a_instruction: |-
        Get the bird to the pig using the fewest possible
        blocks.
      courseA_maze_seq5_instruction: Try this one yourself from the beginning.
      courseA_maze_seq5_2018_instruction: Try this one yourself from the beginning.
      courseA_maze_seq5a_2018_instruction: |-
        What can you add to the end of this code
        to get the bird to the pig?
      courseA_maze_seq6_instruction: 先往一個方向移動，接著再往另一個方向移動，讓鳥能夠抓到這頭豬！
      courseA_maze_seq6_2018_instruction: |-
        Move one way, then another to get the
        bird to the pig!
      courseA_maze_seq7_instruction: 想想看，這裡頭少了什麼積木，添加積木讓鳥可以抓到這頭豬！
      courseA_maze_seq7_2018_instruction: |-
        Figure out what is missing and then add
        blocks to get the bird to the pig!
      courseA_maze_seq8_instruction: 完成這個關卡，讓鳥抓到這頭豬！
      courseA_maze_seq8_2018_instruction: |-
        Solve this level and get the bird to the
        pig!
      courseA_maze_seq9_instruction: 找出這個關卡的錯誤，添加積木以修正程式，讓鳥可以抓到這頭豬！
      courseA_maze_seq9_2018_instruction: |-
        Debug this level by adding blocks to get
        the bird to the pig!
      courseA_maze_seq_challenge1_instruction: 替這個關卡除錯，移除多餘的積木並添加缺少的積木，讓憤怒鳥抓到這頭豬！
      courseA_maze_seq_challenge1_2018_instruction: |-
        Something is wrong here. Help
        fix the code to get the bird to the pig!
      courseA_maze_seq_challenge2_instruction: 沿著這條路帶我去找那隻笨豬，記得躲開 TNT 炸藥，不然會見到我的羽毛滿天飛！
      courseA_maze_seq_challenge2_2018_instruction: |-
        Trace the path to lead the bird
        to the pig. Avoid TNT or feathers will fly!
      courseA_playLab_events1_instruction: |-
        This is a Play Lab level.  Move blocks
        to the workspace and see what happens!
      courseA_playLab_events1_2018_instruction: |-
        This is a Play Lab level.  Move
        blocks to the workspace and see what happens!
      courseA_playLab_events2_instruction: |-
        Jorge the Dog wants to say "Hi there."  Can
        you help him?
      courseA_playLab_events2_2018_instruction: |-
        Jorge the Dog wants to say "Hi
        there."  Can you help him?
      courseA_playLab_events3_instruction: 將「移動-向左」積木連接到工作區裡的「當按向左鍵時」事件積木下。
      courseA_playLab_events3_2018_instruction: |-
        Connect the `move left` block to
        the `when left` event block that is already in the workspace.
      courseA_playLab_events4_instruction: |-
        Now, get Jorge to move right when the
        `right` button is clicked.
      courseA_playLab_events4_2018_instruction: |-
        Now, get Jorge to move right when
        the `right` button is clicked.
      courseA_playLab_events5_instruction: |-
        Add events to have Jorge move up and
        down when the `up` and `down` buttons are pressed.
      courseA_playLab_events5_2018_instruction: |-
        Add events to have Jorge move up
        and down when the `up` and `down` buttons are pressed.
      courseA_playLab_events6_instruction: |-
        Make this more interesting by changing
        the background and playing a random sound when Jorge is clicked.
      courseA_playLab_events6_2018_instruction: |-
        Make this more interesting by changing
        the background and playing a random sound when Jorge is clicked.
      courseA_playLab_events7_instruction: |-
        Add anything you want to this game.  Can
        you make the dinosaur disappear when Jorge runs into him?
      courseA_playLab_events7_2018_instruction: |-
        Add anything you want to this game.  Can
        you make the dinosaur disappear when Jorge runs into him?
      courseA_playlab_events_challenge1_instruction: |-
        我的朋友藏在哪兒？
        你能寫個程式把我的朋友找出來嗎？
      courseA_playlab_events_challenge1_2018_instruction: |-
        Can you write code to
        show the rest of my friends? The hints will help you do this project step-by-step.
      courseA_playlab_events_challenge2_instruction: |-
        Give everyone something to
        do when you click on them.
      courseA_playlab_events_challenge2_2018_instruction: |-
        Give everyone something
        to do when you click on them.
      courseA_playlab_events_challengeClone_instruction: |-
        Where are my friends hiding?
        Can you write code to show the rest of my friends?
      courseA_toMakeLoopsVideo_Collector_instruction: |-
        Loops let you do whatever
        is inside over and over again!
      courseA_video_events_instruction: Need a better playlab/events combo
      courseA_video_events_2018_instruction: Need a better playlab/events combo
      courseB_Scrat_ramp1_2018_instruction: |-
        For this puzzle, snap the blocks together
        and click "Run"!
      courseB_Scrat_ramp2_2018_instruction: |-
        Snap all blocks together to finish your
        code, then click "Run".
      courseB_Scrat_ramp3a_2018_instruction: |-
        Add a `North` block to the bottom of
        the other blocks to finish this code, then click "Run".
      courseB_Scrat_ramp4a_2018_instruction: |-
        Can you figure out which block you
        need to add to the bottom of the other blocks to finish this code?
      courseB_Scrat_ramp5a_2018_instruction: 讓鳥抓到這隻豬！
      courseB_artist_loops1_instruction: |-
        This is a new type of puzzle called "Artist".
        Play with the level and draw something fun.
      courseB_artist_loops10_instruction: |-
        Use what you have learned to draw a picture
        of what you think the artist saw when he got home.
      courseB_artist_loops10_2018_instruction: |-
        Use what you have learned to draw
        a picture of what you think the artist saw when he got home.
      courseB_artist_loops1_2018_instruction: |-
        This is a new type of puzzle called
        "Artist". Play with the level and draw something fun.
      courseB_artist_loops2_instruction: |-
        The Artist is trying to draw a line **6**
        times, but can't get it right.  Can you help?
      courseB_artist_loops2_2018_instruction: |-
        The Artist is trying to draw a line
        **6** times, but can't get it right.  Can you help?
      courseB_artist_loops3_instruction: 幫助小藝術家畫一條線，畫 7 次以繪出花園的牆。
      courseB_artist_loops3_2018_instruction: |-
        Help the artist draw a line 7 times
        to make a garden wall.
      courseB_artist_loops4_instruction: "Now we need to get the soil ready to plant.\nFind
        the bugs in the code and help the artist prepare the ground. "
      courseB_artist_loops4_2018_instruction: |
        Now we need to get the soil ready
        to plant. Find the bugs in the code and help the artist prepare the ground.
      courseB_artist_loops5_instruction: |-
        Time to fix the stairs!  Repeat this pattern
        **5** times so the artist can reach the top of the bushes.
      courseB_artist_loops5_2018_instruction: |-
        Time to fix the stairs!  Repeat this
        pattern **5** times so the artist can reach the top of the bushes.
      courseB_artist_loops6_instruction: 爬上藤，看看它在哪裡？
      courseB_artist_loops6_2018_instruction: 爬上藤，看看它在哪裡？
      courseB_artist_loops7_instruction: "**挑戰：**有個隱藏的花園！讓我們隨便逛逛。"
      courseB_artist_loops7_2018_instruction: "**挑戰：**有個隱藏的花園！讓我們隨便逛逛。"
      courseB_artist_loops8_instruction: |-
        Time to head home. Can you fix this ladder
        using only one block to help the artist get down?
      courseB_artist_loops8_2018_instruction: |-
        Time to head home. Can you fix this
        ladder using only one block to help the artist get down?
      courseB_artist_loops9_instruction: |-
        Let's take the short way home, over the
        pond. Can you help the artist stay on the stones?
      courseB_artist_loops9_2018_instruction: |-
        Let's take the short way home, over
        the pond. Can you help the artist stay on the stones?
      courseB_artist_loops_challenge1_instruction: |-
        "It's time to toss the dice!
        Can you help me draw these?"
      courseB_artist_loops_challenge1_2018_instruction: |-
        "It's time to toss the
        dice! Can you help me draw these?"
      courseB_artist_loops_challenge2_instruction: 我們來玩個遊戲！盡可能畫多一些的 X！你有辦法每一排畫出 3
        個嗎？
      courseB_artist_loops_challenge2_2018_instruction: |-
        Draw as many X's as you
        can. Can you get 3 in a row?
      courseB_collector_loops1_instruction: 這位是冒險家 Laurel！你能幫助他移動以取得寶藏嗎？
      courseB_collector_loops10_instruction: 幫助 Laurel 獲得洞穴中的所有黃金。
      courseB_collector_loops10_2018_instruction: 幫助 Laurel 獲得洞穴中的所有黃金。
      courseB_collector_loops11_instruction: 發現寶藏啦！盡可能的收集到所有的寶藏吧！
      courseB_collector_loops11_2018_instruction: |-
        Eureka!  Get as much treasure
        as you can!
      courseB_collector_loops1_2018_instruction: 這位是冒險家 Laurel！你能幫助他移動以取得寶藏嗎？
      courseB_collector_loops2_instruction: 收集所有的 4 堆以通過這個關卡。
      courseB_collector_loops2_2018_instruction: |-
        Get all four piles to pass this
        level.
      courseB_collector_loops3_instruction: Laurel 要怎麼只使用一個`向東`積木收集所有的 5 堆黃金？
      courseB_collector_loops3_2018_instruction: |-
        How can Laurel get all five piles
        of treasure using only one `E -->` block?
      courseB_collector_loops3_predict1_instruction: |-
        How can Laurel collect all
        five piles of gold using only one `E -->` block?
      courseB_collector_loops4_instruction: 修正 Laurel 的路徑，讓牠能收集到寶藏！
      courseB_collector_loops4_2018_instruction: |-
        Fix Laurel's path to get all of
        this treasure!
      courseB_collector_loops5_instruction: 添加類似上一關的程式來收集到寶藏。
      courseB_collector_loops5_2018_instruction: 添加類似上一關的程式來收集到寶藏。
      courseB_collector_loops6_instruction: 想一想要怎麼編程才能幫助 Laurel 取得這些寶藏！
      courseB_collector_loops6_2018_instruction: |-
        Figure out the code to help Laurel
        get all of the treasure!
      courseB_collector_loops7_instruction: 編寫程式來收集這些寶藏。
      courseB_collector_loops7_2018_instruction: |-
        Write the code to get all of this
        treasure.
      courseB_collector_loops8_instruction: "**挑戰：**階梯上到處都是寶藏！寫個程式幫我得到全部的寶藏。"
      courseB_collector_loops8_2018_instruction: |-
        **Challenge: ** The treasure goes
        all the way down these stairs!  Write the code to help Laurel get it all.
      courseB_collector_loops9_instruction: "*「幫我拿到深谷裡的所有寶藏。」*"
      courseB_collector_loops9_2018_instruction: |-
        *"Help me get the treasure from
        this deep valley."*
      courseB_collector_loops_challenge1_instruction: '這次你只可以用一個移動積木，試著收集到寶藏吧！ '
      courseB_collector_loops_challenge1_2018_instruction: '這次你只可以用一個移動積木，試著收集到寶藏吧！ '
      courseB_collector_loops_challenge2_instruction: |-
        Let's get the treasure! Help
        me across each row then come back to start the next row. Can you find a pattern?
      courseB_collector_loops_challenge2a_instruction: |-
        Help Laurel get at least
        **5** pieces of treasure to finish this puzzle.
      courseB_collector_loops_challenge2a_2018_instruction: |-
        Help Laurel get at least
        **5** pieces of treasure to finish this puzzle.
      courseB_collector_loops_challenge`_instruction: '這次你只可以用一個移動積木，試著收集到寶藏吧！ '
      courseB_collector_prog1_instruction: 這位是冒險家 Laurel！你能幫助她移動以取得黃金嗎？
      courseB_collector_prog2_instruction: Four piles of gold!  Collect all four.
      courseB_collector_prog3_instruction: |-
        How can Laurel collect all five piles
        of gold using only one `E -->` block?
      courseB_iceage_loops1_instruction: |-
        Help Scrat across the ice to get to the
        acorn!
      courseB_iceage_loops10_instruction: |-
        Help Scrat get all the way over to the
        acorn!
      courseB_iceage_loops11_instruction: Help Scrat get to the acorn!
      courseB_iceage_loops12_instruction: Get to the acorn any way you can!
      courseB_iceage_loops2_instruction: |-
        Use two different move blocks to get to
        the acorn!
      courseB_iceage_loops3_instruction: |-
        Can you get to the acorn with just one
        `W` block?
      courseB_iceage_loops4_instruction: |-
        Add one more block to get Scrat all the
        way to the acorn!
      courseB_iceage_loops5_instruction: |-
        Can you add one more loop to get to the
        acorn?
      courseB_iceage_loops6_instruction: Can you add a loop to get to the acorn?
      courseB_iceage_loops7_instruction: 'Scrat really wants that acorn! '
      courseB_iceage_loops8_instruction: 'Can you fix this code? '
      courseB_iceage_loops9_instruction: |-
        The acorn is so far away! Can you use loops
        to help Scrat get there?
      courseB_maze_seq1_instruction: |-
        Play with these blocks to see what they make
        the bird do! \r
        \r
        Get the bird to the pig to complete the level.
      courseB_maze_seq10_instruction: Fix the bugs to get the bird to the pig.
      courseB_maze_seq10_2018_instruction: Fix the bugs to get the bird to the pig.
      courseB_maze_seq11_instruction: It's all you!  Get the bird to the pig.
      courseB_maze_seq11_2018_instruction: It's all you!  Get the bird to the pig.
      courseB_maze_seq12_instruction: 現在抓到那頭豬，不管你用什麼方法！
      courseB_maze_seq12_2018_instruction: 現在抓到那頭豬，不管你用什麼方法！
      courseB_maze_seq1_2018_instruction: |-
        Play with these blocks to see what they
        make Scrat do! \r
        \r
        Get Scrat to the acorn to complete the level.
      courseB_maze_seq2_instruction: "*「有個臭蟲（bug，程式中有錯誤的意思）！修正這個程式讓我到豬豬那兒。」*"
      courseB_maze_seq2_2018_instruction: |-
        A bug! Fix the code to get Scrat to the
        acorn!
      courseB_maze_seq4_instruction: 添加 2 個積木讓鳥移動到豬那裡。
      courseB_maze_seq4_2018_instruction: 添加 2 個積木讓鳥移動到豬那裡。
      courseB_maze_seq5_instruction: Now try this puzzle from the start!
      courseB_maze_seq5_2018_instruction: Now try this puzzle from the start!
      courseB_maze_seq6_instruction: 先往一個方向移動，接著再往另一個方向移動，讓鳥能夠抓到這頭豬！
      courseB_maze_seq6_2018_instruction: |-
        Move one way, then another to get Scrat
        to the acorn!
      courseB_maze_seq7_instruction: 想想看，這裡頭少了什麼積木，添加積木讓鳥可以抓到這頭豬！
      courseB_maze_seq7_2018_instruction: |-
        Figure out what is missing and then add
        blocks to get Scrat to the acorn!
      courseB_maze_seq8_instruction: 輪到你了！要怎麼樣才能讓鳥抓到這頭豬呢？
      courseB_maze_seq8_2018_instruction: |-
        Your turn!  What do you need to do to
        get Scrat to the acorn?
      courseB_maze_seq9_instruction: 挑戰：繞開 TNT 炸蘗，讓鳥能夠抓到豬！
      courseB_maze_seq9_2018_instruction: |-
        Challenge: Move around the broken ice
        to get Scrat to the acorn.
      courseB_maze_seq9_challenge1_instruction: "*那隻豬現在藏在哪裡？*"
      courseB_maze_seqCold_instruction: 挑戰：找出這個關卡的錯誤，添加積木以修正程式，讓鳥可以抓到這頭豬！
      courseB_maze_seqOld_instruction: '繞開 TNT 炸藥，讓鳥抓到這頭豬！ '
      courseB_maze_seq_challenge1_instruction: |-
        Can you find a path before you run
        out of blocks?
      courseB_maze_seq_challenge1_2018_instruction: |-
        Can you find a path before you
        run out of blocks?
      courseB_maze_seq_challenge2_instruction: |-
        Debug this level. These are the right
        blocks, but they're in the wrong order!
      courseB_maze_seq_challenge2_2018_instruction: |-
        Debug this level. These are
        the right blocks, but they're in the wrong order!
      courseB_playLab_events1_instruction: 看看你是否能指出每個積木的用途。
      courseB_playLab_events1_2018_instruction: |-
        See if you can figure out what each
        block does.
      courseB_playlab_events2_instruction: |-
        Have Daisy the Dragon say something when
        you click "Run".
      courseB_playlab_events2_2018_instruction: |-
        Have Daisy the Dragon say something
        when you click "Run".
      courseB_playlab_events3_instruction: |-
        Use an event to make Daisy the Dragon
        switch to a random mood when you click on her.
      courseB_playlab_events3_2018_instruction: |-
        Use an event to make Daisy the Dragon
        switch to a random mood when you click on her.
      courseB_playlab_events4_instruction: |-
        Knight time!  Add an event so that the
        knight moves toward the dragon when the left arrow is clicked.
      courseB_playlab_events4_2018_instruction: |-
        Knight time!  Add an event so that
        the knight moves toward the dragon when the left arrow is clicked.
      courseB_playlab_events5_instruction: |-
        Now add an event so that the knight runs
        away from the dragon when you press the right arrow.
      courseB_playlab_events5_2018_instruction: |-
        Now add an event so that the knight
        runs away from the dragon when you press the right arrow.
      courseB_playlab_events6_instruction: |-
        Help your knight get all of the flags!\r
        \r
        To
        do this, you'll need to add events to help the knight move up, down, left,
        and right.
      courseB_playlab_events6_2018_instruction: |-
        Help your knight get all of the
        flags!\r
        \r
        To do this, you'll need to add events to help the knight move
        up, down, left, and right.
      courseB_playlab_events7_instruction: |-
        Make this game fun by setting the knight
        to vanish when he runs into the dragon on his way to get the flags!  Play
        a sound when they collide to make it feel more real.
      courseB_playlab_events7_2018_instruction: |-
        Make this game fun by setting the
        knight to vanish when he runs into the dragon on his way to get the flags!  Play
        a sound when they collide to make it feel more real.
      courseB_playlab_events8_instruction: |-
        Use your imagination. What can you do
        to make this game more fun?
      courseB_playlab_eventsFP_instruction: |-
        Use your imagination. What can you do
        to make this game more fun?
      courseB_playlab_eventsFP_2018_instruction: |-
        Use your imagination. What can
        you do to make this game more fun?
      courseB_playlab_eventsToolbox_instruction: |-
        Finish by playing a sound and making
        the knight vanish when he runs into the dragon!
      courseB_playlab_events_challenge1_instruction: "Make the animals move down\nwhen
        you press ▼. "
      courseB_playlab_events_challenge1_2018_instruction: "Make the animals move\ndown
        when you press ▼. "
      courseB_playlab_events_challenge2_instruction: |-
        Make the animals disappear
        when you click on them.
      courseB_playlab_events_challenge2_2018_instruction: |-
        Make the animals disappear
        when you click on them.
      courseB_playlab_events_challenge2_embed_instruction: 這兒是你完成的遊戲！
      courseB_playlab_events_challenge2_template_instruction: |-
        Let's make the animals
        disappear when you click on them! You can also add sounds and score points
        to create a fun game of Animal Tag!
      courseB_playlab_events_challenge2_template_2018_instruction: |-
        Let's make the
        animals disappear when you click on them! You can also add sounds and score
        points to create a fun game of Animal Tag!
      courseB_scrat_forVideo_instruction: Get the acorn!
      courseB_starWars_prog1_instruction: 幫助 BB-8 拿到所有廢金屬！
      courseB_starWars_prog10_instruction: 幫助 BB-8 收集到所有發光的廢金屬
      courseB_starWars_prog10_2018_instruction: |-
        Help BB-8 gather the glowing scrap
        metal
      courseB_starWars_prog11_instruction: 幫助 BB-8 收集到所有發光的廢金屬
      courseB_starWars_prog11_2018_instruction: |-
        Help BB-8 gather the glowing scrap
        metal
      courseB_starWars_prog1_2018_instruction: 幫助 BB-8 拿到所有廢金屬！
      courseB_starWars_prog2_instruction: 幫助 BB-8 收集到**所有的**發光廢金屬
      courseB_starWars_prog2_2018_instruction: 幫助 BB-8 收集到**所有的**發光廢金屬
      courseB_starWars_prog3_instruction: 幫助 BB-8 收集到**所有的**發光廢金屬
      courseB_starWars_prog3_2018_instruction: 幫助 BB-8 收集到**所有的**發光廢金屬
      courseB_starWars_prog4_instruction: 幫助 BB-8 收集到**所有的**發光廢金屬
      courseB_starWars_prog4_2018_instruction: 幫助 BB-8 收集到**所有的**發光廢金屬
      courseB_starWars_prog5_instruction: 幫助 BB-8 收集到所有發光的廢金屬
      courseB_starWars_prog5_2018_instruction: 幫助 BB-8 收集到所有發光的廢金屬
      courseB_starWars_prog6_instruction: 幫助 BB-8 收集到**所有的**發光廢金屬
      courseB_starWars_prog6_2018_instruction: 幫助 BB-8 收集到**所有的**發光廢金屬
      courseB_starWars_prog7_instruction: 幫助 BB-8 收集到所有發光的廢金屬
      courseB_starWars_prog7_2018_instruction: 幫助 BB-8 收集到所有發光的廢金屬
      courseB_starWars_prog8_instruction: "**挑戰：**幫助 BB-8 收集所有的發光廢金屬"
      courseB_starWars_prog8_2018_instruction: |-
        **Challenge:** Help BB-8 gather the
        glowing scrap metal
      courseB_starWars_prog9_instruction: 幫助 BB-8 收集到所有發光的廢金屬
      courseB_starWars_prog9_2018_instruction: |-
        Help BB-8 gather the glowing scrap
        metal
      courseC_PlayLab_events1_instruction: |-
        Make Jorge the Dog (actor 1) say "Hi
        there."
      courseC_PlayLab_events1_2018_instruction: |-
        Make Jorge the Dog (actor 1) say
        "Hi there."
      courseC_PlayLab_events2_instruction: |-
        Can you make Jorge the Dog (actor 1)
        say something, then have Olive the Cat (actor 2) say something afterward?
      courseC_PlayLab_events2_2018_instruction: |-
        Can you make Jorge the Dog (actor
        1) say something, then have Olive the Cat (actor 2) say something afterward?
      courseC_PlayLab_events3_instruction: 你可以寫一個程式來讓小狗（角色1）走向小貓嗎？
      courseC_PlayLab_events3_2018_instruction: |-
        Can you write a program to make
        Jorge (actor 1) move toward Olive the Cat?
      courseC_PlayLab_events4_instruction: |-
        Can you write a program that makes Jorge
        (actor 1) move to Olive the Cat, and have Olive say "Hi there." when Jorge
        reaches her?
      courseC_PlayLab_events4_2018_instruction: |-
        Can you write a program that makes
        Jorge (actor 1) move to Olive the Cat, and have Olive say "Hi there." when
        Jorge reaches her?
      courseC_PlayLab_events5_instruction: |-
        Can you write a program to make Octavia
        the Octopus say "What's new?" when she is clicked?
      courseC_PlayLab_events5_2018_instruction: |-
        Can you write a program to make
        Octavia the Octopus say "What's new?" when she is clicked?
      courseC_PlayLab_events6_instruction: |-
        Now, write a program to make Waddles
        the Penguin move around using the up / down / left / right keys to hit all
        of the targets!
      courseC_PlayLab_events6_2018_instruction: |-
        Now, write a program to make Waddles
        the Penguin move around using the up / down / left / right keys to hit all
        of the targets!
      courseC_PlayLab_events7_instruction: |-
        The `repeat forever` block allows you
        to run code over and over forever.  Use this block to move Chomp the Dino
        (actor 2) up and down by 400 pixels forever.
      courseC_PlayLab_events7_2018_instruction: |-
        The `repeat forever` block allows
        you to run code over and over forever.  Use this block to move Chomp the Dino
        (actor 2) up and down by 400 pixels forever.
      courseC_PlayLab_events8_instruction: |-
        Can you have Waddles (actor 1) play a
        "hit" sound and say "Ouch!" if he runs into Chomp? \r
        When you're done,
        play the game to make that happen.
      courseC_PlayLab_events8_2018_instruction: |-
        Can you have Waddles (actor 1) play
        a "hit" sound and say "Ouch!" if he runs into Chomp? \r
        When you're
        done, play the game to make that happen.
      courseC_PlayLab_events9_instruction: |-
        Can you add a block to score a point
        when Waddles the Penguin (actor1) runs into Octavia the Octopus (actor 3)?
        \r
        Play the game and move Waddles with the arrows until you score!
      courseC_PlayLab_events9_2018_instruction: |-
        Can you add a block to score a point
        when Waddles the Penguin (actor1) runs into Octavia the Octopus (actor 3)?
        \r
        Play the game and move Waddles with the arrows until you score!
      courseC_PlayLab_eventsA_instruction: |-
        Add blocks to the `when run` event to
        change the background scene and the speed of Waddles the Penguin.\r
        \r
        Play
        the game and move Waddles with the arrows until you score.
      courseC_PlayLab_eventsA_2018_instruction: |-
        Add blocks to the `when run` event
        to change the background scene and the speed of Waddles the Penguin.\r
        \r
        Play
        the game and move Waddles with the arrows until you score.
      courseC_PlayLab_eventsFP_instruction: |-
        Create your own story. When you're
        done, click "Finish" to share with friends. See story ideas in the hints.
      courseC_PlayLab_eventsFP_2018_instruction: |-
        Create your own story. When you're
        done, click "Finish" to share with friends. See story ideas in the hints.
      courseC_PlayLab_events_challenge1_instruction: |-
        Use a new block to make Waddles
        automatically move back to the start when he runs into the Dinosaur and when
        he scores a point. \r
        Play the game and move Waddles with the arrows until
        you score enough points.
      courseC_PlayLab_events_challenge1_2018_instruction: |-
        Use a new block to make
        Waddles automatically move back to the start when he runs into the Dinosaur
        and when he scores a point. \r
        Play the game and move Waddles with the arrows
        until you score enough points.
      courseC_PlayLab_events_challenge1_xy_blocks_instruction: |-
        Here is a new block
        that is somewhat complicated. Use it to move Waddles back to the start when
        he runs into the Dinosaur and when he scores a point. This will make your
        game more challenging and fun!\r
        \r
        Play the game and move Waddles with
        the arrows until you score enough points.
      courseC_artist_loop1_instruction: Let's add some pizazz!
      courseC_artist_loop1_2018_instruction: Let's add some pizazz!
      courseC_artist_loops1_instruction: "*\"Zombie.  Draw!\"*\\r\n\\r\nThe zombie\nwants
        to draw a line from where he is to the garden of sunflowers.  Can you\nhelp
        him?  \\r\n*(The garden is 250 pixels away)*  "
      courseC_artist_loops1a_instruction: "Get the artist to the center of the play\narea,
        then draw a bird using a sticker. "
      courseC_artist_loops1a_2018_instruction: "Get the artist to the center of the\nplay
        area, then draw a bird using a sticker. "
      courseC_artist_loops2_instruction: |-
        Now that the zombie knows his way, help
        him dig holes along the path to plant more flowers!
      courseC_artist_loops2a_instruction: |-
        Now, use a loop to spin your bird around
        12 times with a 30 degree turn.
      courseC_artist_loops2a_2018_instruction: |-
        Now, use a loop to spin your bird
        around 12 times with a 30 degree turn.
      courseC_artist_loops3_instruction: |-
        Excellent!  Now that the flowers have sprouted,
        help the zombie place a friend every 50 pixels to guard over them until they
        are grown.
      courseC_artist_loops3a_instruction: Now add a bat!
      courseC_artist_loops3a_2018_instruction: Now add a bat!
      courseC_artist_loops4_instruction: |-
        The zombie has found an empty farm!  Can
        you help him bring it to life by stamping animal stickers every 100 pixels
        around the border?
      courseC_artist_loops4a_instruction: Try jumping forward by 75 pixels.
      courseC_artist_loops4a_2018_instruction: Try jumping forward by 75 pixels.
      courseC_artist_loops5_instruction: |
        Great!  Now it's time to make a fence
        inside to keep the animals out.   \r
        \r
      courseC_artist_loops5a_instruction: Try new stickers!
      courseC_artist_loops5a_2018_instruction: Try new stickers!
      courseC_artist_loops5b_instruction: Try adding lines!
      courseC_artist_loops5b_2018_instruction: Try adding lines!
      courseC_artist_loops6_instruction: |
        What should the zombie put inside of the
        garden?  \r
        \r
        \r
      courseC_artist_loops6a_instruction: Add another sticker!
      courseC_artist_loops6a_2018_instruction: Add another sticker!
      courseC_artist_loops7a_instruction: Play with the loops and angles.
      courseC_artist_loops7a_2018_instruction: Play with the loops and angles.
      courseC_artist_loops8a_instruction: Now try something on your own!
      courseC_artist_loops8a_2018_instruction: Now try something on your own!
      courseC_artist_loopsPre1a_instruction: Time to spin that line around!
      courseC_artist_loopsPre1a_2018_instruction: Time to spin that line around!
      courseC_artist_loopsPrePre1a_instruction: "Get the artist to the center of\nthe
        play area, then draw a line. "
      courseC_artist_loopsPrePre1a_2018_instruction: "Get the artist to the center\nof
        the play area, then draw a line. "
      courseC_artist_loopsTemplate_instruction: |-
        Excellent!  Now that the flowers
        have sprouted, help the zombie place a friend every 50 pixels to guard over
        them until they are grown.
      courseC_artist_loopsTemplateA_instruction: "Get the artist to the center of\nthe
        play area, then draw a bird using a sticker. "
      courseC_artist_loopsTemplateA_2018_instruction: "Get the artist to the center\nof
        the play area, then draw a bird using a sticker. "
      courseC_artist_prog1_instruction: |-
        Play with the blocks in the toolbox to see
        what they do!
      courseC_artist_prog1_2018_instruction: |-
        Play with the blocks in the toolbox
        to see what they do!
      courseC_artist_prog2_instruction: |-
        Drag blocks onto the screen to have the
        artist draw over the grey lines in the picture. (Each line is 100 pixels long)
      courseC_artist_prog2_2018_instruction: |-
        Drag blocks onto the screen to have
        the artist draw over the grey lines in the picture. (Each line is 100 pixels
        long)
      courseC_artist_prog3_instruction: |-
        Each side of the inner square is 100 pixels
        and all of the angles are 90 degrees.
      courseC_artist_prog3_2018_instruction: |-
        Each side of the inner square is 100
        pixels and all of the angles are 90 degrees.
      courseC_artist_prog4_instruction: |-
        Finish Starla's rocket so she can chase
        her pet.
      courseC_artist_prog4_2018_instruction: |-
        Finish Starla's rocket so she can
        chase her pet.
      courseC_artist_prog5_instruction: |-
        這棟房子需要屋頂！請畫出三角形。
        提示：三邊都是同樣的長度。
      courseC_artist_prog5_2018_instruction: |-
        Finish this tag by drawing a rectangle
        around the outside.\r
        (The long sides are 200 pixels each and the short sides
        are each 100 pixels)
      courseC_artist_prog6_instruction: Draw this diamond with 200 pixel sides.
      courseC_artist_prog6_2018_instruction: Draw this diamond with 200 pixel sides.
      courseC_artist_prog7_instruction: "**挑戰：**這個標記非常特別！你想的到要怎麼畫出這種輪廓嗎？"
      courseC_artist_prog7_2018_instruction: |-
        **Challenge:** This tag is a special
        one!  Can you figure out how to draw the outline?
      courseC_artist_prog8_instruction: |-
        One more tag.  This is a triangle for Pi.\r
        (Each
        side is 150 pixels)
      courseC_artist_prog8_2018_instruction: |-
        One more tag.  This is a triangle for
        Pi.\r
        (Each side is 150 pixels)
      courseC_artist_prog_challenge1-doghouse_instruction: |-
        Let's build a dog house
        for Jorge!
      courseC_artist_prog_challenge1_instruction: 'Draw rooms for each of the animals.

'
      courseC_artist_prog_challenge1_2018_instruction: "Draw rooms for each of the\nanimals. "
      courseC_artist_prog_challenge2_instruction: |-
        *Help me paint the yellow lines
        on this road!*
      courseC_artist_prog_challenge2a_instruction: |-
        *"Help me paint the yellow lines
        on this road!"*
      courseC_artist_prog_challenge2a_2018_instruction: |-
        *"Help me paint the yellow
        lines on this road!"*
      courseC_collector_loops_challenge2_instruction: |-
        Get at least **5** pieces
        of treasure!
      courseC_collector_loops_challenge2_2018_instruction: |-
        Get at least **5** pieces
        of treasure!
      courseC_collector_prog1_instruction: |-
        Play around with the blocks to see if
        you can help Laurel collect some treasure.
      courseC_collector_prog1_2018_instruction: |-
        Play around with the blocks to see
        if you can help Laurel collect some treasure.
      courseC_collector_prog2_instruction: 幫 Laurel 移動到寶藏的位置，接著使用`收集`積木拿到寶藏。
      courseC_collector_prog2_2018_instruction: |-
        Move Laurel to the treasure, then
        use `collect` to pick it up.
      courseC_collector_prog3_instruction: |-
        Order these blocks to collect the treasure
        and solve the puzzle.
      courseC_collector_prog3_2018_instruction: |-
        Order these blocks to collect the
        treasure and solve the puzzle.
      courseC_collector_prog4_instruction: |-
        Put these blocks in order to collect
        all of the treasure and solve the puzzle.
      courseC_collector_prog4_2018_instruction: |-
        Put these blocks in order to collect
        all of the treasure and solve the puzzle.
      courseC_collector_prog5_instruction: |-
        These blocks are in the wrong order.
        Can you fix them?
      courseC_collector_prog5_2018_instruction: |-
        These blocks are in the wrong order.
        Can you fix them?
      courseC_collector_prog6_instruction: |-
        Reorder the blocks to collect all of
        the treasure.
      courseC_collector_prog6_2018_instruction: |-
        Reorder the blocks to collect all
        of the treasure.
      courseC_collector_prog7_instruction: |-
        Use blocks from the toolbox to collect
        all of the treasure.
      courseC_collector_prog7_2018_instruction: |-
        Use blocks from the toolbox to collect
        all of the treasure.
      courseC_collector_prog8_instruction: "*「就是這樣！繼續幫助我收集所有的硬幣。」*"
      courseC_collector_prog8_2018_instruction: |-
        *"Keep up the good work! Help me
        collect all of the treasure."*
      courseC_collector_prog9_instruction: "*「讓我們獲得所有的硬幣！」*"
      courseC_collector_prog9_2018_instruction: "*「讓我們獲得所有的硬幣！」*"
      courseC_collector_progA_instruction: Help Laurel collect all of the treasure.
      courseC_collector_progB_instruction: |-
        Collect as many coins as you can to finish
        the stage!
      courseC_collector_prog_challenge1_instruction: |-
        Look carefully! Can you collect
        all **10** pieces of treasure?
      courseC_collector_prog_challenge1_2018_instruction: |-
        Look carefully! Can you
        collect all **10** pieces of treasure?
      courseC_collector_prog_challenge2_instruction: |-
        Collect at least **10** pieces
        of treasure to finish this challenge!
      courseC_collector_prog_challenge2_2018_instruction: |-
        Collect at least **10**
        pieces of treasure to finish this challenge!
      courseC_flappy_embed_events_instruction: |-
        Here's an example of a game that
        you're about to create yourself! Play through it one or two times to get
        an idea of what you are about to make.
      courseC_flappy_events1_instruction: |-
        Attach the `flap normal amount` block
        to the `when click` event, then press "Run".    Click or tap on the play
        space to move Flappy to the target.
      courseC_flappy_events10_instruction: 'Create your own Flappy game! '
      courseC_flappy_events10_2018_instruction: 'Create your own Flappy game! '
      courseC_flappy_events1_2018_instruction: |-
        Attach the `flap normal amount` block
        to the `when click` event, then press "Run".    Click or tap on the play
        space to move Flappy to the target.
      courseC_flappy_events2_instruction: |-
        Try adding a block that sets the level
        speed when the "Run" button is pressed.  Play the game and flap to the target
        to continue.
      courseC_flappy_events2_2018_instruction: |-
        Try adding a block that sets the
        level speed when the "Run" button is pressed.  Play the game and flap to
        the target to continue.
      courseC_flappy_events3_instruction: |-
        Attach the `end game` block to the `when
        hit the ground` event.   Play the game and crash the bird into the ground
        to continue.
      courseC_flappy_events3_2018_instruction: |-
        Attach the `end game` block to the
        `when hit the ground` event.   Play the game and crash the bird into the ground
        to continue.
      courseC_flappy_events4_instruction: |-
        Attach a block to the `when hit an obstacle`
        event so that the game ends when Flappy crashes into the first set of pipes.
      courseC_flappy_events4_2018_instruction: |-
        Attach a block to the `when hit an
        obstacle` event so that the game ends when Flappy crashes into the first set
        of pipes.
      courseC_flappy_events5_instruction: |-
        Add a block to the `when pass an obstacle`
        event, then press "Run" to score a point by flying Flappy through the first
        set of pipes.
      courseC_flappy_events5_2018_instruction: |-
        Add a block to the `when pass an
        obstacle` event, then press "Run" to score a point by flying Flappy through
        the first set of pipes.
      courseC_flappy_events6_instruction: |-
        See if you can still score a point after
        making Flappy flap either a smaller or larger amount each time you click.
      courseC_flappy_events6_2018_instruction: |-
        See if you can still score a point
        after making Flappy flap either a smaller or larger amount each time you click.
      courseC_flappy_events7_instruction: |-
        Next, try changing the scene by attaching
        a block to the `when run` event.
      courseC_flappy_events7_2018_instruction: |-
        Next, try changing the scene by attaching
        a block to the `when run` event.
      courseC_flappy_events8_instruction: |-
        Try setting a **random** scene when other
        events happen...for example, when passing an obstacle.
      courseC_flappy_events8_2018_instruction: |-
        Try setting a **random** scene when
        other events happen...for example, when passing an obstacle.
      courseC_flappy_events9_instruction: |-
        To mix things up, instead of ending the
        game when Flappy hits an obstacle, try setting the score back to 0.
      courseC_flappy_events9_2018_instruction: |-
        To mix things up, instead of ending
        the game when Flappy hits an obstacle, try setting the score back to 0.
      courseC_harvester_loops1_instruction: Use loops to pick all of the pumpkins.
      courseC_harvester_loops10_instruction: |-
        Collect all of the corn and all of
        the pumpkins.
      courseC_harvester_loops10_2018_instruction: |-
        Collect all of the corn and all
        of the pumpkins.
      courseC_harvester_loops11_instruction: |-
        Collect all of the corn and all of
        the pumpkins.
      courseC_harvester_loops11_2018_instruction: |-
        Collect all of the corn and all
        of the pumpkins.
      courseC_harvester_loops1_2018_instruction: Use loops to pick all of the pumpkins.
      courseC_harvester_loops2_instruction: |-
        Can you combine two different loops
        to move toward the pumpkins, then collect them all?
      courseC_harvester_loops2_2018_instruction: |-
        Can you combine two different loops
        to move toward the pumpkins, then collect them all?
      courseC_harvester_loops3_instruction: Collect all of the pumpkins.
      courseC_harvester_loops3_2018_instruction: Collect all of the pumpkins.
      courseC_harvester_loops4_instruction: |-
        Collect all of the corn and all of the
        pumpkins.
      courseC_harvester_loops4_2018_instruction: |-
        Collect all of the corn and all
        of the pumpkins.
      courseC_harvester_loops5_instruction: |-
        Collect all of the corn and all of the
        pumpkins.
      courseC_harvester_loops5_2018_instruction: |-
        Collect all of the corn and all
        of the pumpkins.
      courseC_harvester_loops6_instruction: |-
        Collect all of the corn and all of the
        pumpkins.
      courseC_harvester_loops6_2018_instruction: |-
        Collect all of the corn and all
        of the pumpkins.
      courseC_harvester_loops7_instruction: |-
        Collect all of the corn and all of the
        pumpkins.
      courseC_harvester_loops7_2018_instruction: |-
        Collect all of the corn and all
        of the pumpkins.
      courseC_harvester_loops8_instruction: "**挑戰：**收集所有的玉米和所有的南瓜。"
      courseC_harvester_loops8_2018_instruction: |-
        **Challenge:** Collect all of the
        corn and all of the pumpkins.
      courseC_harvester_loops9_instruction: |-
        Collect all of the corn and all of the
        pumpkins.
      courseC_harvester_loops9_2018_instruction: |-
        Collect all of the corn and all
        of the pumpkins.
      courseC_harvester_loops_challenge1_instruction: 收集所有的玉米。
      courseC_harvester_loops_challenge1a_instruction: 收集所有的玉米。
      courseC_harvester_loops_challenge1a_2018_instruction: 收集所有的玉米。
      courseC_harvester_loops_challenge2_instruction: |-
        收集所有的生菜。
        注意避開樹木和田地！
      courseC_harvester_loops_challenge2_2018_instruction: |-
        收集所有的生菜。
        注意避開樹木和田地！
      courseC_harvester_loops_forVid_instruction: |-
        Collect all of the corn, all of
        the lettuce, and all of the pumpkins.
      courseC_maze_debugging1_instruction: |-
        Fix the code to help get Scrat get to
        the acorn.
      courseC_maze_debugging10_instruction: |-
        Debug this level by rearranging and
        changing blocks to get me to the pig!
      courseC_maze_debugging1_2018_instruction: |-
        Fix the code to help get Scrat get
        to the acorn.
      courseC_maze_debugging2_instruction: |-
        Use your debugging skills to get Scrat
        to the acorn.
      courseC_maze_debugging2_2018_instruction: |-
        Use your debugging skills to get
        Scrat to the acorn.
      courseC_maze_debugging3_instruction: Remove blocks to get Skrat to the acorn!
      courseC_maze_debugging3_2018_instruction: |-
        Remove blocks to get Scrat to the
        acorn!
      courseC_maze_debugging4_instruction: |-
        Someone has their directions mixed up!
        Can you help?
      courseC_maze_debugging4_2018_instruction: |-
        Someone has their directions mixed
        up! Can you help?
      courseC_maze_debugging5_instruction: |-
        Debug this level by rearranging and changing
        blocks.
      courseC_maze_debugging5_2018_instruction: |-
        Debug this level by rearranging
        and changing blocks.
      courseC_maze_debugging6_instruction: |-
        Figure out what is wrong and get Scrat
        to the acorn.
      courseC_maze_debugging6_2018_instruction: |-
        Figure out what is wrong and get
        Scrat to the acorn.
      courseC_maze_debugging7_instruction: "**挑戰：**找出關卡裡的錯誤，重新組合、添加、移除程式積木。"
      courseC_maze_debugging7_2018_instruction: |-
        **Challenge:** Debug this level
        by rearranging, adding, and deleting blocks.
      courseC_maze_debugging8_instruction: |-
        Debug this level to get Scrat to the
        acorn.
      courseC_maze_debugging9_instruction: |-
        Debug this level to get Scrat to the
        acorn.
      courseC_maze_debugging9_2018_instruction: |-
        Debug this level to get Scrat to
        the acorn.
      courseC_maze_debugging_challenge1_instruction: |-
        Help Scrat decide which way
        to turn to get to the acorn.
      courseC_maze_debugging_challenge1_2018_instruction: |-
        Help Scrat decide which
        way to turn to get to the acorn.
      courseC_maze_debugging_challenge2_instruction: |-
        Help Scrat reach the acorn
        with only four `turn` commands.
      courseC_maze_debugging_challenge2_2018_instruction: |-
        Help Scrat reach the acorn
        with only four `turn` commands.
      courseC_maze_loops1_instruction: |-
        Can you get the bird to the pig using 5 of
        the same kind of blocks?
      courseC_maze_loops10_instruction: You are doing great! Keep it up!
      courseC_maze_loops11_instruction: |-
        You are almost there! This time, choose
        any path you like!
      courseC_maze_loops2_instruction: |-
        Can you get the bird to the pig by creating
        a loop that uses only one `move forward` block inside of a `repeat`?
      courseC_maze_loops3_instruction: Solve this puzzle by creating a loop!
      courseC_maze_loops4_instruction: |-
        In this puzzle, two `repeat` loops will help
        you get the bird to the pig with the fewest number of blocks!
      courseC_maze_loops5_instruction: "*「愈快抓到豬愈好！」*"
      courseC_maze_loops6_instruction: |-
        Loops even work with more than one block
        inside!  Can you loop this sequence?
      courseC_maze_loops7_instruction: Use what you learned in other puzzles!
      courseC_maze_loops8_instruction: |-
        Challenge: Combine ideas from the last few
        puzzles to complete this level.
      courseC_maze_loops9_instruction: You are doing great! Keep it up!
      courseC_maze_loops_challenge1_instruction: "Now Scrat wants to try using loops\nto
        find his acorn! "
      courseC_maze_loops_challenge1a_instruction: "Now Scrat wants to try using loops\nto
        find his acorn! "
      courseC_maze_loops_challenge1a_2018_instruction: "Now Scrat wants to try using\nloops
        to find his acorn! "
      courseC_maze_loops_challenge2_instruction: |-
        Let's hunt for treasure - using
        loops! Help the collector by debugging this code. Get all of the treasure!
      courseC_maze_programming1_instruction: |-
        For this puzzle, drag all of the blocks
        together and click "Run" to watch it go!
      courseC_maze_programming1_2018_instruction: 在這一關，把所有的積木放在一起，然後點擊「運行」看看結果如何！
      courseC_maze_programming2_instruction: |-
        Drag an extra `move forward` block
        out of the toolbox to finish your code.
      courseC_maze_programming2_2018_instruction: |-
        Drag an extra `move forward` block
        out of the toolbox to finish your code.
      courseC_maze_programming3_instruction: |-
        There is one extra block that is going
        to cause the bird to crash. Throw it away by dragging it back to the toolbox.
      courseC_maze_programming3_2018_instruction: |-
        There is one extra block that
        is going to cause the bird to crash. Throw it away by dragging it back to
        the toolbox.
      courseC_maze_programming4_instruction: 小心 TNT 炸藥，不然羽毛會被炸飛！
      courseC_maze_programming4_2018_instruction: 小心 TNT 炸藥，不然羽毛會被炸飛！
      courseC_maze_programming5_instruction: 小心 TNT 炸藥。
      courseC_maze_programming5_2018_instruction: 小心 TNT 炸藥。
      courseC_maze_programming6_instruction: "「保持冷靜，幫我找到那隻壞豬豬。否則我真的會變成憤怒鳥！」"
      courseC_maze_programming6_2018_instruction: |-
        "Keep calm and help me find the
        bad pig. Otherwise I might get angry!"
      courseC_maze_programming7_instruction: "**挑戰：**這個程式有很多的臭蟲（bugs，錯誤的地方），你必須移除一些，同時添加其它的積木。"
      courseC_maze_programming7_2018_instruction: |-
        **Challenge:** This code has a
        lot of bugs. You'll need to remove some blocks and add others.
      courseC_maze_programming8_instruction: "*「保持冷靜，幫我找到那隻壞豬豬」*"
      courseC_maze_programming8_2018_instruction: |-
        *"Keep calm and help me find
        the bad pig."*
      courseC_maze_programming8_predict1_instruction: |-
        *"Keep calm and help me find
        the bad pig."*
      courseC_maze_programming8_predict1_2018_instruction: |-
        *"Keep calm and help
        me find the bad pig."*
      courseC_maze_programming9_instruction: "*「現在，幫我偷襲這隻豬，不管用什麼辦法，你想得到的都行！」*"
      courseC_maze_programming9_2018_instruction: |-
        *"Now, help me sneak up on the
        pig any way you want to!"*
      courseC_maze_programming_challenge1_instruction: "The pig is hiding, and the\ngoal
        is to find it. "
      courseC_maze_programming_challenge1_2018_instruction: "The pig is hiding, and\nthe
        goal is to find it. "
      courseC_maze_programming_challenge2_instruction: |-
        Sometimes there is more than
        one way to solve the same problem. Sometimes it's faster to go backwards
        than it is to go forwards!
      courseC_maze_programming_challenge2_2018_instruction: |-
        Sometimes there is more
        than one way to solve the same problem. Sometimes it's faster to go backwards
        than it is to go forwards!
      courseC_playLab_embedded_instruction: |-
        Here's a game for you to play! To win,
        use your arrow keys to get the penguin to run into the octopus.\r
        \r
        Once
        you are done, you will learn how to make this game!
      courseC_puppy_loops10_instruction: You are doing great! Keep it up!
      courseC_puppy_loops11_instruction: |-
        You are almost there! This time, choose
        any path you like!
      courseC_puppy_loops8_instruction: |-
        Challenge: Combine ideas from the last few
        puzzles to complete this level.
      courseC_puppy_loops8courseC_maze_loops8_instruction: |-
        Challenge: Combine ideas
        from the last few puzzles to complete this level.
      courseC_puppy_loops9_instruction: You are doing great! Keep it up!
      courseC_starWars_loops1_instruction: |-
        BB-8 will pick up any metal scraps along
        the path where he moves. Use 5 of the same block to get BB-8 to pick up all
        of the scrap metal in the play area.
      courseC_starWars_loops10_instruction: You are doing great! Keep it up!
      courseC_starWars_loops10_2018_instruction: You are doing great! Keep it up!
      courseC_starWars_loops10_predict2_instruction: |-
        You are doing great! Keep it
        up!
      courseC_starWars_loops10_predict2_2018_instruction: |-
        You are doing great! Keep
        it up!
      courseC_starWars_loops11_instruction: |-
        You are almost there! This time, choose
        any path you like!
      courseC_starWars_loops11_2018_instruction: |-
        You are almost there! This time,
        choose any path you like!
      courseC_starWars_loops1_2018_instruction: |-
        BB-8 will pick up any metal scraps
        along the path where he moves. Use 5 of the same block to get BB-8 to pick
        up all of the scrap metal in the play area.
      courseC_starWars_loops1_predict1_instruction: |-
        BB-8 will pick up any metal
        scraps along the path where he moves. Use 5 of the same block to get BB-8
        to pick up all of the scrap metal in the play area.
      courseC_starWars_loops1_predict1_2018_instruction: |-
        BB-8 will pick up any metal
        scraps along the path where he moves. Use 5 of the same block to get BB-8
        to pick up all of the scrap metal in the play area.
      courseC_starWars_loops2_instruction: |-
        To get all the scrap metal, try creating
        a loop that uses only one block inside of a `repeat` block.
      courseC_starWars_loops2_2018_instruction: |-
        To get all the scrap metal, try
        creating a loop that uses only one block inside of a `repeat` block.
      courseC_starWars_loops4_instruction: |-
        In this puzzle, two `repeat` loops will
        help you get BB-8 to all of the scrap metal with the fewest number of blocks!
      courseC_starWars_loops4_2018_instruction: |-
        In this puzzle, two `repeat` loops
        will help you get BB-8 to all of the scrap metal with the fewest number of
        blocks!
      courseC_starWars_loops5_instruction: |-
        Get BB-8 to pick up all the scrap metal
        as quickly as possible!
      courseC_starWars_loops5_2018_instruction: |-
        Get BB-8 to pick up all the scrap
        metal as quickly as possible!
      courseC_starWars_loops6_instruction: |-
        Loops even work with more than one block
        inside!  Can you loop this sequence?
      courseC_starWars_loops6_2018_instruction: |-
        Loops even work with more than one
        block inside!  Can you loop this sequence?
      courseC_starWars_loops7_instruction: |-
        Can you try to get all the scrap metal
        using just one loop? Try programming it all out then finding the repeating
        code to put in a loop.
      courseC_starWars_loops7_2018_instruction: |-
        Can you try to get all the scrap
        metal using just one loop? Try programming it all out then finding the repeating
        code to put in a loop.
      courseC_starWars_loops9_instruction: |-
        Use what you have learned to pick up
        all of the scrap metal!
      courseC_starWars_loops9_2018_instruction: |-
        Use what you have learned to pick
        up all of the scrap metal!
      courseD_Frozen_nested1_instruction: "Draw a small shape, between **20 and 50**\npixels
        wide.  It can be any shape that you like.  "
      courseD_Frozen_nested2_instruction: |-
        Now take your shape and draw two or three
        in a row!
      courseD_Frozen_nested3_instruction: Let's spin that line of shapes around!
      courseD_Frozen_nested4_instruction: Time to layer those shapes!
      courseD_Frozen_nested5_instruction: Play with the snowflakes!
      courseD_Frozen_nested6_instruction: |-
        Draw a stair-step pattern that uses turns
        between 75 and 105 degrees.
      courseD_Frozen_nested7_instruction: |-
        Now, turn around 180 degrees and draw
        the stair pattern again!
      courseD_Frozen_nested8_instruction: |-
        Spin that shape around 5 or 6 times in
        a circle.
      courseD_Frozen_nested9_instruction: |-
        Try playing around with what you've created.
        Draw whatever you like!\r
        - What happens if you use two different angles
        in your stair step pattern?\r
        - What happens if you make your diamond pattern
        longer or shorter?\r
        - What does it look like to draw two snowflakes on top
        of one another?
      courseD_artist_1_2018_instruction: |
        Draw a small square with **30** pixel long
        sides.  \r
      courseD_artist_2_2018_instruction: |
        Now, turn right by **60** degrees, then
        draw a straight line **150** pixels long and jump back to the center of the
        play area.\r
      courseD_artist_3_2018_instruction: "Nest all of the code inside of another\n`repeat`
        loop and run it a total of **6** times. "
      courseD_artist_4_2018_instruction: Add a tiny shape to the end of your line!
      courseD_artist_5_2018_instruction: Play with the snowflakes!
      courseD_artist_6_2018_instruction: |
        Try changing your long 150 pixel line into
        6 short lines of **25** pixels, with little turns at the end.\r
      courseD_artist_7_2018_instruction: |-
        Now, turn around 180 degrees and draw the
        stair pattern again!
      courseD_artist_8_2018_instruction: |-
        Spin that shape around 5 or 6 times in
        a circle.
      courseD_artist_9_2018_instruction: |-
        Try playing around with what you've created.
        Draw whatever you like!\r
        - What happens if you use two different angles
        in your stair step pattern?\r
        - What happens if you make your diamond pattern
        longer or shorter?\r
        - What does it look like to draw two snowflakes on top
        of one another?
      courseD_artist_binary1_instruction: |-
        Use the blocks below to have the artist
        draw "01010101" in binary in the first row.
      courseD_artist_binary1_2018_instruction: 使用下方的程式積木讓小藝術家在網格中的第一行以二進位畫出「01010101」。
      courseD_artist_binary2_instruction: |-
        Run this code to see how the artist uses
        binary to draw this pattern.
      courseD_artist_binary2_2018_instruction: |-
        Run this code to see how the artist
        uses binary to draw this pattern.
      courseD_artist_binary3_instruction: |-
        Which of the binary strings below could
        you loop 8 times to draw this image?
      courseD_artist_binary3_2018_instruction: |-
        Which of the binary strings below
        could you loop 8 times to draw this image?
      courseD_artist_binary4_instruction: |-
        Can you draw this pattern by looping just
        three binary digits (0s and 1s)?
      courseD_artist_binary4_2018_instruction: 你可以靠迴圈，只用 3 個二進制（0 或 1）來完成這個圖案嗎？
      courseD_artist_binary5_instruction: |-
        Each binary string below represents one
        row of this picture. \r
        \r
        Can you rearrange them so it draws a smiley face
        instead of a frown?
      courseD_artist_binary5_2018_instruction: |-
        Each binary string below represents
        one row of this picture. \r
        \r
        Can you rearrange them so it draws a smiley
        face instead of a frown?
      courseD_artist_binary6_instruction: 用怎樣的六位數的二進制字符串，在重複 11 次後將能畫出這個圖案？
      courseD_artist_binary6_2018_instruction: 用怎樣的六位數的二進制字符串，在重複 11 次後將能畫出這個圖案？
      courseD_artist_binary7_instruction: 能讓你重複畫出這個圖案的最短的二進制字符串是什麼？
      courseD_artist_binary7_2018_instruction: |-
        What is the shortest binary string
        that you can repeat to draw this image?
      courseD_artist_binary8_instruction: Finish the code to create this drawing.
      courseD_artist_binary8_2018_instruction: Finish the code to create this drawing.
      courseD_artist_binary8_predict1_instruction: 完成這些程式來畫出圖案。
      courseD_artist_binary8_predict1_2018_instruction: |-
        Finish the code to create
        this drawing.
      courseD_artist_binaryFP_instruction: |-
        Here's a higher resolution canvas to
        draw on - 16 pixels by 16 pixels!\r
        \r
        See what happens when we start to
        get creative with the bits!
      courseD_artist_binaryFP8_instruction: "**Free Play:**  Draw whatever you want\nin
        binary! "
      courseD_artist_binaryFP_2018_instruction: |-
        Here's a higher resolution canvas
        to draw on - 16 pixels by 16 pixels!\r
        \r
        See what happens when we start
        to get creative with the bits!
      courseD_artist_binary_challenge0_instruction: |-
        Try using nested loops to complete
        this drawing.
      courseD_artist_binary_challenge1_instruction: |-
        You can only use each binary
        value (0 or 1) once each in this puzzle. Try using nested loops to complete
        this drawing.
      courseD_artist_binary_challenge1_2018_instruction: |-
        You can only use each binary
        value (0 or 1) once each in this puzzle. Try using nested loops to complete
        this drawing.
      courseD_artist_binary_challenge2_instruction: |-
        Are you persistent enough to
        restore this logo back to normal?
      courseD_artist_binary_challenge2_2018_instruction: |-
        Are you persistent enough
        to restore this logo back to normal?
      courseD_artist_binary_challenge3_instruction: |-
        Are you persistent enough to
        restore this logo back to normal?
      courseD_artist_embed_frozen_instruction: Press Run to see a snowflake design!
      courseD_artist_embed_frozen2_instruction: Press Run to see a snowflake design.
      courseD_artist_functions10_instruction: |-
        This time, use lines of 8 hexagons
        with 25 pixel sides.
      courseD_artist_functions2_instruction: |
        This time, use the `draw a square`
        function to create the glasses. \r
      courseD_artist_functions3_instruction: |-
        You can make this drawing by adding
        a repeat block.
      courseD_artist_functions4_instruction: |-
        Now that you can draw a star, try drawing
        four stars!
      courseD_artist_functions5_instruction: |-
        Draw only those three stars to finish
        this puzzle.
      courseD_artist_functions6_instruction: |-
        Make this window by drawing a square,
        then turning 90 degrees before drawing another, and so on.
      courseD_artist_functions7_instruction: |-
        Try solving this puzzle by creating
        `draw a window` and calling it five times. Watch out for the door!
      courseD_artist_functions8_instruction: |-
        Challenge: Create as many functions
        as you think you need to make this drawing of 50 pixel squares.
      courseD_artist_functions9_instruction: |-
        Create this image using only the blocks
        provided.
      courseD_artist_nestedLoops1_instruction: |-
        Draw a triangle to kickstart this
        stage.  \r
        (Each side is 100 pixels long and you'll need to turn 120 degrees
        for each exterior angle.)
      courseD_artist_nestedLoops10_instruction: |-
        Take the squares from before, but
        this time only make 7 of them, and lay them out in a row.
      courseD_artist_nestedLoops10_2018_instruction: |-
        Take the squares from before,
        but this time only make 7 of them, and lay them out in a row.
      courseD_artist_nestedLoops1_2018_instruction: |-
        Draw a triangle to kickstart
        this stage.  \r
        (Each side is 100 pixels long and you'll need to turn 120
        degrees for each exterior angle.)
      courseD_artist_nestedLoops1a_instruction: |-
        Now loop the triangle 6 times. \r
        After
        each triangle, you'll need to turn 60 degrees before drawing the next.
      courseD_artist_nestedLoops1a_2018_instruction: 'Now loop the triangle 6 times.

'
      courseD_artist_nestedLoops2_instruction: |-
        This time, complete the puzzle with
        the fewest number of blocks possible.
      courseD_artist_nestedLoops2_2018_instruction: |-
        This time, complete the puzzle
        with the fewest number of blocks possible.
      courseD_artist_nestedLoops3_instruction: |-
        Use your new skills to quickly draw
        the last row of windows for this building.\r
        \r
        The windows are 20 pixel
        squares, each 20 pixels apart.
      courseD_artist_nestedLoops3_2018_instruction: |-
        Use your new skills to quickly
        draw the last row of windows for this building.\r
        \r
        The windows are 20
        pixel squares, each 20 pixels apart.
      courseD_artist_nestedLoops4_instruction: |-
        Great!  Do the same thing with these
        circles.
      courseD_artist_nestedLoops4_2018_instruction: |-
        Great!  Do the same thing with
        these circles.
      courseD_artist_nestedLoops5_instruction: |-
        What happens if you also turn 90
        degrees between circles?
      courseD_artist_nestedLoops5_2018_instruction: |-
        What happens if you also turn
        90 degrees between circles?
      courseD_artist_nestedLoops6_instruction: |-
        Edit blocks within your existing
        code to make this image.
      courseD_artist_nestedLoops7_instruction: |-
        Use what you've learned to make
        this drawing.
      courseD_artist_nestedLoops7_2018_instruction: |-
        Use what you've learned to
        make this drawing.
      courseD_artist_nestedLoops8_instruction: |-
        Using what you have learned in the
        last couple of puzzles, build this image from the beginning.
      courseD_artist_nestedLoops8_2018_instruction: |-
        Using what you have learned
        in the last couple of puzzles, build this image from the beginning.
      courseD_artist_nestedLoops9_instruction: "**挑戰：**想的到要怎麼製作出這樣的圖像嗎？"
      courseD_artist_nestedLoops9_2018_instruction: "**挑戰：**想的到要怎麼製作出這樣的圖像嗎？"
      courseD_artist_nestedLoops9_predict1_instruction: "**挑戰：**想的到要怎麼製作出這樣的圖像嗎？"
      courseD_artist_nestedLoops9_predict1_2018_instruction: |-
        **Challenge:** Can
        you figure out how to make a picture like this?
      courseD_artist_nestedLoopsFP_instruction: |-
        Now it's your turn.  Take the skills
        you have learned and make something that you love!
      courseD_artist_nestedLoopsFP_2018_instruction: |-
        Now it's your turn.  Take
        the skills you have learned and make something that you love!
      courseD_artist_nestedLoopsPre1_instruction: |-
        Create a triangle to kickstart
        this stage.
      courseD_artist_nestedLoops_challenge1_instruction: |-
        Can you figure out how
        to make a picture like this?
      courseD_artist_nestedLoops_challenge1_2018_instruction: |-
        Can you figure out
        how to make a picture like this?
      courseD_artist_nestedLoops_challenge2_instruction: |-
        Fix the code to make this
        picture!
      courseD_artist_nestedLoops_challenge2_2018_instruction: |-
        Fix the code to make
        this picture!
      courseD_artist_project1_instruction: "Draw a small shape, between **20 and\n50**
        pixels wide.  It can be any shape that you like.  "
      courseD_artist_project1_2018_instruction: "Draw a small shape, between **20\nand
        50** pixels wide.  It can be any shape that you like.  "
      courseD_artist_project1a_instruction: |-
        Draw a stair-step pattern that uses
        turns between 75 and 105 degrees.
      courseD_artist_project1a_2018_instruction: |-
        Draw a stair-step pattern that
        uses turns between 75 and 105 degrees.
      courseD_artist_project2_instruction: |-
        Now take your shape and draw two or three
        in a row!
      courseD_artist_project2_2018_instruction: |-
        Now take your shape and draw two
        or three in a row!
      courseD_artist_project2a_instruction: |-
        Now, turn around 180 degrees and draw
        the stair pattern again!
      courseD_artist_project2a_2018_instruction: |-
        Now, turn around 180 degrees and
        draw the stair pattern again!
      courseD_artist_project3_instruction: Let's spin that line of shapes around!
      courseD_artist_project3_2018_instruction: |-
        Let's spin that line of shapes
        around!
      courseD_artist_project3a_instruction: |-
        Spin that shape around 5 or 6 times
        in a circle.
      courseD_artist_project3a_2018_instruction: |-
        Spin that shape around 5 or 6 times
        in a circle.
      courseD_artist_project4_instruction: Time to layer those shapes!
      courseD_artist_project4_2018_instruction: Time to layer those shapes!
      courseD_artist_project4a_instruction: |-
        Try playing around with what you've
        created. Draw whatever you like!\r
        - What happens if you use two different
        angles in your stair step pattern?\r
        - What happens if you make your diamond
        pattern longer or shorter?\r
        - What does it look like to draw two snowflakes
        on top of one another?
      courseD_artist_project4a_2018_instruction: |-
        Try playing around with what you've
        created. Draw whatever you like!\r
        - What happens if you use two different
        angles in your stair step pattern?\r
        - What happens if you make your diamond
        pattern longer or shorter?\r
        - What does it look like to draw two snowflakes
        on top of one another?
      courseD_artist_project5_instruction: Play with the snowflakes!
      courseD_artist_project5_2018_instruction: Play with the snowflakes!
      courseD_artist_project_embedded_instruction: |-
        Here's what you will soon be
        making!
      courseD_artist_ramp11_instruction: 現在用小藝術家來畫出一個正方形！
      courseD_artist_ramp12_instruction: 使用你學到的方法，在正方形裡頭畫出這個三角形。
      courseD_bee_conditionals1_instruction: |-
        Check to see if there's a flower under
        the cloud. If there's a flower, get nectar.
      courseD_bee_conditionals10_instruction: |-
        Collect all of the nectar and make
        all of the honey.
      courseD_bee_conditionals10_2018_instruction: |-
        Collect all of the nectar and
        make all of the honey.
      courseD_bee_conditionals1_predict1_instruction: 檢查看看雲裡面是不是有花朵，如果有的話，就採集花蜜。
      courseD_bee_conditionals1_predict1_2018_instruction: |-
        Check to see if there's
        a flower under the cloud. If there's a flower, get nectar.
      courseD_bee_conditionals2_instruction: "Check underneath every cloud to see\nif
        it is hiding a flower before you get nectar.  "
      courseD_bee_conditionals2_2018_instruction: "Check underneath every cloud to\nsee
        if it is hiding a flower before you get nectar.  "
      courseD_bee_conditionals2_test_instruction: "Check underneath every cloud to\nsee
        if it is hiding a flower before you get nectar.  "
      courseD_bee_conditionals3_instruction: |-
        Help the bee collect all of the nectar.
        \r
        \r
        You can only collect nectar from flowers, but you can check any space
        to see if there is a flower.
      courseD_bee_conditionals3_2018_instruction: |-
        Help the bee collect all of the
        nectar. \r
        \r
        You can only collect nectar from flowers, but you can check
        any space to see if there is a flower.
      courseD_bee_conditionals4_instruction: |-
        Get all of the nectar using as few
        blocks as possible.
      courseD_bee_conditionals4_2018_instruction: |-
        Get all of the nectar using as
        few blocks as possible.
      courseD_bee_conditionals5_instruction: |-
        Collect all of the nectar using as
        few blocks as possible
      courseD_bee_conditionals5_2018_instruction: |-
        Collect all of the nectar using
        as few blocks as possible
      courseD_bee_conditionals6_instruction: |-
        Some of these clouds might have honeycombs
        under them.  Be sure to check if a honeycomb is hiding behind each cloud!
      courseD_bee_conditionals6_2018_instruction: |-
        Some of these clouds might have
        honeycombs under them.  Be sure to check if a honeycomb is hiding behind each
        cloud!
      courseD_bee_conditionals7_instruction: |-
        Use the `if/else` block to collect
        nectar at flowers and make honey at honeycomb.
      courseD_bee_conditionals7_2018_instruction: |-
        Use the `if/else` block to collect
        nectar at flowers and make honey at honeycomb.
      courseD_bee_conditionals7_predict2_instruction: 使用`如果/否則`積木來收集花朵上的花蜜，並在蜂窩上釀造蜂蜜。
      courseD_bee_conditionals7_predict2_2018_instruction: |-
        Use the `if/else` block
        to collect nectar at flowers and make honey at honeycomb.
      courseD_bee_conditionals8_instruction: |-
        Collect nectar if there is a flower.\r
        Otherwise,
        make honey (because there is a honeycomb).
      courseD_bee_conditionals8_2018_instruction: |-
        Collect nectar if there is a flower.\r
        Otherwise,
        make honey (because there is a honeycomb).
      courseD_bee_conditionals9_instruction: |-
        Collect all of the nectar or make all
        the honey.
      courseD_bee_conditionals9_2018_instruction: |-
        Collect all of the nectar or make
        all the honey.
      courseD_bee_conditionals_challenge1_instruction: |-
        Collect all the nectar and
        make all the honey.
      courseD_bee_conditionals_challenge1_2018_instruction: |-
        Collect all the nectar
        and make all the honey.
      courseD_bee_conditionals_challenge2_instruction: |-
        Collect all of the nectar
        and make all the honey.
      courseD_bee_conditionals_challenge2_2018_instruction: |-
        Collect all of the nectar
        and make all the honey.
      courseD_bee_conditionals_challenge3_instruction: |-
        Collect all of the nectar
        or make all the honey.
      courseD_bee_debugging1_instruction: |-
        Fix the error(s) to collect all of the
        nectar.
      courseD_bee_debugging2_instruction: |-
        Fix the error(s) to collect all of the
        nectar.
      courseD_bee_debugging3_instruction: |-
        Fix the error(s) to collect all of the
        nectar and make all of the honey.
      courseD_bee_debugging4_instruction: Fix the error(s) to make all of the honey.
      courseD_bee_debugging5_instruction: |-
        Challenge: All of the commands that you
        need are already here...now use your debugging skills to figure out how to
        solve this puzzle.
      courseD_bee_debugging6_instruction: |-
        Challenge:  Fix the errors to collect
        all of the nectar and make all of the honey.
      courseD_bee_debugging9_instruction: |-
        Help the bee fix the code to get all the
        nectar.
      courseD_bee_debugging_challenge1_instruction: |-
        Watch how the bees gets the
        nectar. Can you use the same kind of pattern to help the bee make all of the
        honey?
      courseD_bee_debugging_challenge1_2018_instruction: |-
        Watch how the bees gets
        the nectar. Can you use the same kind of pattern to help the bee make all
        of the honey?
      courseD_bee_debugging_challenge1a_instruction: |-
        Watch how the bee gets the
        nectar. Use the same pattern to help the bee make all the honey.
      courseD_bee_debugging_challenge2_instruction: |-
        Watch how the bees gets the
        nectar. Can you use the same kind of pattern to help the bee make all of honey?
      courseD_bee_nestedLoops1_instruction: Help the bee collect all of the nectar.
      courseD_bee_nestedLoops1_2018_instruction: |-
        Help the bee collect all of the
        nectar.
      courseD_bee_nestedLoops1a_instruction: Help the bee collect all of the nectar.
      courseD_bee_nestedLoops1a_2018_instruction: |-
        Help the bee collect all of the
        nectar.
      courseD_bee_nestedLoops2_instruction: |-
        This time, help the bee collect all
        of the nectar using as few blocks as possible.
      courseD_bee_nestedLoops2_2018_instruction: |-
        This time, help the bee collect
        all of the nectar using as few blocks as possible.
      courseD_bee_nestedLoops2_predict1_instruction: |-
        This time, help the bee collect
        all of the nectar using as few blocks as possible.
      courseD_bee_nestedLoops2_predict1_2018_instruction: |-
        This time, help the bee
        collect all of the nectar using as few blocks as possible.
      courseD_bee_nestedLoops3_instruction: |-
        Collect all of the nectar from each
        flower.
      courseD_bee_nestedLoops5_instruction: "Collect all of the nectar from each\nflower
        and make honey at the honeycomb. "
      courseD_bee_nestedLoops6_instruction: Make all of the nectar.
      courseD_bee_nestedLoops6_2018_instruction: |-
        Get the zombie to the sunflower
        using only the blocks available.
      courseD_bee_nestedLoops7_instruction: |-
        Challenge: Figure out how to get all
        of the nectar using only the blocks available.
      courseD_bee_nestedLoops7_2018_instruction: |-
        Challenge: Figure out how to get
        all of the nectar using only the blocks available.
      courseD_bee_nestedLoops8_instruction: "Collect all of the nectar from each\nflower
        and make honey at the honeycomb. "
      courseD_bee_nestedLoops8_2018_instruction: "Collect all of the nectar from\neach
        flower and make honey at the honeycomb. "
      courseD_bee_nestedLoops9_instruction: Make all of the honey.
      courseD_bee_nestedLoops9_2018_instruction: Make all of the honey.
      courseD_bee_nestedLoops9_predict2_instruction: Make all of the honey.
      courseD_bee_nestedLoops9_predict2_2018_instruction: Make all of the honey.
      courseD_bee_nested_loops_challenge1_instruction: |-
        Let's hunt for treasure
        - using loops! Help the collector reach at least two piles of treasure using
        only the blocks in your toolbox.
      courseD_bee_nested_loops_challenge2_instruction: |-
        Let's hunt for treasure
        - using loops! Help the collector reach at least two piles of treasure using
        only the blocks in your toolbox.
      courseD_bounce_embed_endgame_instruction: |-
        Use the left and right arrows to
        move the paddle. See how many points you can get before your opponent scores
        twice!
      courseD_bounce_embedded_instruction: Write Instructions Here
      courseD_bounce_events1_instruction: |-
        Attach a block to the "when left arrow"
        block and press "Run" to move the player to the flag.
      courseD_bounce_events10_instruction: |-
        There is now a goal at the top. Attach
        the "score point" and "score opponent point" blocks to the "when ball
        in goal" and "when ball misses paddle" blocks to make a game. See how many
        points you can score before your opponent scores twice.
      courseD_bounce_events10s_instruction: "Attach the `score point` block to the\n`when
        ball in goal` event and the `score opponent point` block to the `when\nball
        misses hand` event to make a game. "
      courseD_bounce_events10s_2018_instruction: "Attach the `score point` block\nto
        the `when ball in goal` event and the `score opponent point` block to the\n`when
        ball misses hand` event to make a game. "
      courseD_bounce_events11_instruction: |-
        You can now attach blocks to the "when
        run" block. You have to attach the new "launch new ball" block in more
        than one place. Also, try changing the scene or the speed of the paddle and
        the ball and see how many points you can score before your opponent scores
        twice.
      courseD_bounce_events11s_instruction: "Attach the `throw new ball` block in\nall
        of the places where the game needs a new ball. "
      courseD_bounce_events11s_2018_instruction: "Attach the `throw new ball` block\nin
        all of the places where the game needs a new ball. "
      courseD_bounce_events12_instruction: |-
        Create your own Bounce game. You can
        change all the visuals and the rules. When you're done, click Finish to let
        friends try your game on their phones.
      courseD_bounce_events12s_instruction: |-
        Make this game your own. You can change
        all the visuals and the rules. When you're done, click "Finish" to let
        friends try your game on their phones.
      courseD_bounce_events12s_2018_instruction: |-
        Make this game your own. You can
        change all the visuals and the rules. When you're done, click "Finish"
        to let friends try your game on their phones.
      courseD_bounce_events1s_instruction: |-
        Attach a block to the "when left arrow"
        block and press "Run" to move the player to the net.
      courseD_bounce_events1s_2018_instruction: |-
        Attach a block to the "when left
        arrow" block and press "Run" to move the player to the net.
      courseD_bounce_events2_instruction: |-
        Attach a block to the "when right arrow"
        and "when left arrow" blocks. Move the paddle to reach both finish targets.
      courseD_bounce_events2s_instruction: |-
        Now, attach a block to the `when right
        event` so that the hand can get to both baskets.
      courseD_bounce_events2s_2018_instruction: |-
        Now, attach a block to the `when
        right event` so that the hand can get to both baskets.
      courseD_bounce_events3_instruction: |-
        Now try something similar with the "when
        up arrow" block. Move the paddle to the finish target at the top.
      courseD_bounce_events3s_instruction: |-
        Now try something similar with the "when
        up arrow" block. Move the paddle to the finish target at the top.
      courseD_bounce_events4_instruction: |-
        This time you need to add four blocks.
        Move the paddle to all four finish targets to complete this puzzle.
      courseD_bounce_events4s_instruction: |-
        This time you need to add four blocks.
        Move the paddle to all four finish targets to complete this puzzle.
      courseD_bounce_events5_instruction: |-
        We're going to send a ball flying down
        towards the paddle. Attach a block to the "when ball hits paddle" block
        to ensure the ball reaches the finish target.
      courseD_bounce_events5s_instruction: |-
        Attach a block to the `when ball hits
        hand` event to ensure the ball reaches the basket.
      courseD_bounce_events5s_2018_instruction: |-
        Attach a block to the `when ball
        hits hand` event to ensure the ball reaches the basket.
      courseD_bounce_events6_instruction: |-
        Now the finish target is on the top. You
        need to attach blocks to both of the "when ball hits" blocks to solve this
        puzzle.
      courseD_bounce_events6s_instruction: |-
        Attach code to make the ball bounce when
        it hits the wall so you can solve this puzzle.
      courseD_bounce_events6s_2018_instruction: |-
        Attach code to make the ball bounce
        when it hits the wall so you can solve this puzzle.
      courseD_bounce_events7_instruction: |-
        Attach blocks to each of the "when"
        blocks. Bounce the ball until it hits the finish target.
      courseD_bounce_events7s_instruction: |-
        Attach sound blocks to make the net swish
        when you hit the basket and have the whistle blow when the ball misses your
        hand. Bounce the ball until it hits the finish target.
      courseD_bounce_events7s_2018_instruction: |-
        Attach sound blocks to make the
        net swish when you hit the basket and have the whistle blow when the ball
        misses your hand. Bounce the ball until it hits the finish target.
      courseD_collector_debugging1_instruction: |-
        Fix the error(s) to collect all
        of the treasure.
      courseD_collector_debugging1_2018_instruction: |-
        Fix the error(s) to collect
        all of the treasure.
      courseD_collector_debugging1a_instruction: |-
        Fix the error(s) to collect all
        of the treasure.
      courseD_collector_debugging1a_2018_instruction: |-
        Fix the error(s) to collect
        all of the treasure.
      courseD_collector_debugging2_instruction: |-
        Fix the error(s) to collect all
        of the treasure.
      courseD_collector_debugging2_2018_instruction: |-
        Fix the error(s) to collect
        all of the treasure.
      courseD_collector_debugging2a_instruction: |-
        Fix the error(s) to collect all
        of the treasure.
      courseD_collector_debugging2a_2018_instruction: |-
        Fix the error(s) to collect
        all of the treasure.
      courseD_collector_debugging3_instruction: |-
        Fix the error(s) to collect all
        of the treasure.
      courseD_collector_debugging3_2018_instruction: |-
        Fix the error(s) to collect
        all of the treasure.
      courseD_collector_debugging3a_instruction: |-
        Fix the error(s) to collect all
        of the treasure.
      courseD_collector_debugging3a_2018_instruction: |-
        Fix the error(s) to collect
        all of the treasure.
      courseD_collector_debugging4_instruction: |-
        Fix the error(s) to collect all
        of the treasure.
      courseD_collector_debugging4_2018_instruction: |-
        Fix the error(s) to collect
        all of the treasure.
      courseD_collector_debugging4a_instruction: |-
        Fix the error(s) to collect all
        of the treasure.
      courseD_collector_debugging4a_2018_instruction: |-
        Fix the error(s) to collect
        all of the treasure.
      courseD_collector_debugging5_instruction: |-
        All of the commands that you need
        are already here...now use your debugging skills to figure out how to solve
        this puzzle.
      courseD_collector_debugging5_2018_instruction: |-
        All of the commands that you
        need are already here...now use your debugging skills to figure out how to
        solve this puzzle.
      courseD_collector_debugging5a_instruction: |-
        All of the commands that you need
        are already here...now use your debugging skills to figure out how to solve
        this puzzle.
      courseD_collector_debugging5a_2018_instruction: |-
        All of the commands that you
        need are already here...now use your debugging skills to figure out how to
        solve this puzzle.
      courseD_collector_debugging6_instruction: |-
        Challenge: Use your debugging skills
        to fix the errors and collect all of the treasure.
      courseD_collector_debugging6_2018_instruction: |-
        Challenge: Use your debugging
        skills to fix the errors and collect all of the treasure.
      courseD_collector_debugging6a_instruction: |-
        Challenge: Use the code in the
        work area to get at least **6** pieces of treasure!
      courseD_collector_debugging6a_2018_instruction: |-
        Challenge: Use the code in
        the work area to get at least **6** pieces of treasure!
      courseD_collector_debugging7_instruction: |-
        Challenge: All of the commands that
        you need are already here...now use your debugging skills to figure out how
        to solve this puzzle.
      courseD_collector_debugging_challenge2_instruction: |-
        Are you an expert at nested
        loops? Use what you have learned so far to collect all the treasure!
      courseD_collector_debugging_challenge2_2018_instruction: |-
        Are you an expert
        at nested loops? Use what you have learned so far to collect all the treasure!
      courseD_collector_nested_loops_challenge2_instruction: |-
        Help the collector
        reach at least two piles of treasure using only the blocks in your toolbox.
        It is possible to collect all 4.
      courseD_collector_nested_loops_challenge2_2018_instruction: |-
        Help the collector
        reach at least two piles of treasure using only the blocks in your toolbox.
        It is possible to collect all 4.
      courseD_collector_nested_loops_challenge2a_instruction: |-
        Help Laurel collect
        at least two piles of treasure.
      courseD_collector_ramp10_instruction: Help Laurel collect all of the treasure.
      courseD_collector_ramp8_instruction: Help Laurel collect all of the treasure.
      courseD_collector_ramp9_instruction: Help Laurel collect all of the treasure.
      courseD_collector_until_challenge1_instruction: |-
        Are you an expert of nested
        loops? Use what you have learned so far to collect all of the treasure!
      courseD_debugging_1_instruction: Fix the error(s) to collect all of the nectar.
      courseD_debugging_2_instruction: Fix the error(s) to collect all of the nectar.
      courseD_debugging_3_instruction: 修復錯誤（可能不只一個）以收集所有的花蜜與蜂蜜。
      courseD_debugging_4_instruction: Fix the error(s) to make all of the honey.
      courseD_debugging_5_instruction: |-
        Challenge: All of the commands that you need
        are already here...now use your debugging skills to figure out how to solve
        this puzzle.
      courseD_debugging_6_instruction: |-
        Challenge:  Fix the errors to collect all
        of the nectar and make all of the honey.
      courseD_farmer_condLoops1_instruction: |-
        Use conditionals to make sure that
        you pick corn only when it's there.
      courseD_farmer_condLoops1_2018_instruction: |-
        Use conditionals to make sure
        that you pick corn only when it's there.
      courseD_farmer_condLoops2_instruction: |-
        Help the harvester collect both corn
        and lettuce from the field.
      courseD_farmer_condLoops2_2018_instruction: |-
        Help the harvester collect both
        corn and lettuce from the field.
      courseD_farmer_condLoops3_instruction: "*「玉米、生菜、南瓜！幫我收成它們。」*"
      courseD_farmer_condLoops3_2018_instruction: |-
        *"Corn, lettuce, AND pumpkins!
        Help me harvest them all."*
      courseD_farmer_condLoops4_instruction: |-
        Help the harvester pick all of the
        lettuce in each cluster before moving on to the next bunch.
      courseD_farmer_condLoops4_2018_instruction: |-
        Help the harvester pick all of
        the lettuce in each cluster before moving on to the next bunch.
      courseD_farmer_condLoops4a_instruction: |-
        Help the farmer pick all of the lettuce
        in each cluster before moving on to the next bunch.
      courseD_farmer_condLoops5_instruction: |-
        Collect all of the corn and lettuce,
        then grab the pumpkin at the end.
      courseD_farmer_condLoops5_2018_instruction: |-
        Collect all of the corn and lettuce,
        then grab the pumpkin at the end.
      courseD_farmer_condLoops6_instruction: |-
        Can you figure out how to pick the
        pumpkin?  Make sure to collect all of the corn along the way!
      courseD_farmer_condLoops6_2018_instruction: |-
        Can you figure out how to pick
        the pumpkin?  Make sure to collect all of the corn along the way!
      courseD_farmer_condLoops7_instruction: |-
        Challenge: Collect all of the corn
        and lettuce, then pick the pumpkin.
      courseD_farmer_condLoops7_2018_instruction: |-
        Challenge: Collect all of the
        corn and lettuce, then pick the pumpkin.
      courseD_farmer_condLoops8_instruction: |-
        Collect all of the corn and lettuce,
        then pick the pumpkin.
      courseD_farmer_condLoops8_2018_instruction: |-
        Collect all of the corn and lettuce,
        then pick the pumpkin.
      courseD_farmer_condLoops9_instruction: |-
        Collect all of the corn and lettuce,
        then pick the pumpkin.
      courseD_farmer_condLoops9_2018_instruction: |-
        Collect all of the corn and lettuce,
        then pick the pumpkin.
      courseD_farmer_condLoops9_predict1_instruction: |-
        Collect all of the corn and
        lettuce, then pick the pumpkin.
      courseD_farmer_condLoops9_predict1_2018_instruction: |-
        Collect all of the corn
        and lettuce, then pick the pumpkin.
      courseD_farmer_condLoops_challenge1_instruction: |-
        Collect everything to complete
        the level. Each hidden crop has only one corn or lettuce.
      courseD_farmer_condLoops_challenge1_2018_instruction: |-
        Collect everything to
        complete the level. Each hidden crop has only one corn or lettuce.
      courseD_farmer_condLoops_challenge2_instruction: |-
        Collect everything to complete
        the level.
      courseD_farmer_condLoops_challenge2_2018_instruction: |-
        Collect everything to
        complete the level.
      courseD_farmer_condLoops_challenge2_clone_instruction: |-
        Collect everything
        to complete the level.
      courseD_farmer_conditionals1_instruction: |-
        Move to the pile of dirt and use
        the `remove` block to remove it.
      courseD_farmer_conditionals10_instruction: "Flatten all of these piles using\nas
        few blocks as possible. "
      courseD_farmer_conditionals2_instruction: |-
        Move to the hole and fill it with
        six shovelfuls of dirt, using the `fill` block.
      courseD_farmer_conditionals3_instruction: |-
        Use as few blocks as possible to
        solve this puzzle.
      courseD_farmer_conditionals4_instruction: |-
        Help the farmer remove this entire
        pile using a `while` loop.
      courseD_farmer_conditionals5_instruction: 'Help me remove all of this dirt.

'
      courseD_farmer_conditionals6_instruction: 使用「當…」迴圈來輕鬆的填滿所有坑洞。
      courseD_farmer_conditionals7_instruction: |-
        Fill in the hole at the end of each
        of these paths.
      courseD_farmer_conditionals8_instruction: "Challenge: Fill all of these holes\nusing
        as few blocks as possible. "
      courseD_farmer_conditionals9_instruction: "Flatten all of these piles using\nas
        few blocks as possible. "
      courseD_farmer_until_challenge2_instruction: |-
        Use If/Else blocks to follow
        the curvy path. At each corner, use the `remove 1` command in a loop to clear
        the piles.
      courseD_farmer_until_challenge2_2018_instruction: |-
        Use If/Else blocks to follow
        the curvy path. At each corner, use the `remove 1` command in a loop to clear
        the piles.
      courseD_farmer_while1_instruction: |-
        Move to the pile of dirt and use the `remove`
        block to remove it.
      courseD_farmer_while10_instruction: "Flatten all of these piles using as few\nblocks
        as possible. "
      courseD_farmer_while10_2018_instruction: "Flatten all of these piles using\nas
        few blocks as possible. "
      courseD_farmer_while10_predict2_instruction: "Flatten all of these piles using\nas
        few blocks as possible. "
      courseD_farmer_while10_predict2_2018_instruction: "Flatten all of these piles\nusing
        as few blocks as possible. "
      courseD_farmer_while1_2018_instruction: |-
        Move to the pile of dirt and use the
        `remove` block to remove it.
      courseD_farmer_while2_instruction: |-
        Move to the hole and fill it with six shovelfuls
        of dirt, using the `fill` block.
      courseD_farmer_while2_2018_instruction: |-
        Move to the hole and fill it with
        six shovelfuls of dirt, using the `fill` block.
      courseD_farmer_while3_instruction: |-
        Use as few blocks as possible to solve
        this puzzle.
      courseD_farmer_while3_2018_instruction: |-
        Use as few blocks as possible to solve
        this puzzle.
      courseD_farmer_while4_instruction: |-
        Help the farmer remove this entire pile
        using a `while` loop.
      courseD_farmer_while4_2018_instruction: |-
        Help the farmer remove this entire
        pile using a `while` loop.
      courseD_farmer_while4_predict1_instruction: |-
        Help the farmer remove this entire
        pile using a `while` loop.
      courseD_farmer_while4_predict1_2018_instruction: |-
        Help the farmer remove this
        entire pile using a `while` loop.
      courseD_farmer_while5_instruction: 'Help me remove all of this dirt. '
      courseD_farmer_while5_2018_instruction: 'Help me remove all of this dirt. '
      courseD_farmer_while6_instruction: 使用「當…」迴圈來輕鬆的填滿所有坑洞。
      courseD_farmer_while6_2018_instruction: 使用「當…」迴圈來輕鬆的填滿所有坑洞。
      courseD_farmer_while7_instruction: |-
        Fill in the hole at the end of each of
        these paths.
      courseD_farmer_while7_2018_instruction: |-
        Fill in the hole at the end of each
        of these paths.
      courseD_farmer_while8_instruction: "Challenge: Fill all of these holes using\nas
        few blocks as possible. "
      courseD_farmer_while8_2018_instruction: "Challenge: Fill all of these holes\nusing
        as few blocks as possible. "
      courseD_farmer_while9_instruction: "Flatten all of these piles using as few\nblocks
        as possible. "
      courseD_farmer_while9_2018_instruction: "Flatten all of these piles using as\nfew
        blocks as possible. "
      courseD_farmer_while_challenge1_instruction: |-
        Fill all of the holes and remove
        all of the piles.
      courseD_farmer_while_challenge1_2018_instruction: |-
        Fill all of the holes and
        remove all of the piles.
      courseD_farmer_while_challenge2_instruction: |-
        Fill all of the holes and remove
        all of the piles.
      courseD_farmer_while_challenge2_2018_instruction: |-
        Fill all of the holes and
        remove all of the piles.
      courseD_harvester_nested_loops_challenge1-broken_instruction: |-
        "I need some
        help on the farm! Help me harvest this corn using only the blocks in your
        toolbox."
      courseD_harvester_nested_loops_challenge1_instruction: |-
        "I need some help
        on the farm! Help me harvest this corn using only the blocks in your toolbox."
      courseD_harvester_nested_loops_challenge1_2018_instruction: |-
        "I need some
        help on the farm! Help me harvest this corn using only the blocks in your
        toolbox."
      courseD_iceage_loops1_instruction: |-
        Help Scrat across the ice to get to the
        acorn!
      courseD_iceage_loops10_instruction: |-
        Help Scrat get all the way over to the
        acorn!
      courseD_iceage_loops11_instruction: Help Scrat get to the acorn!
      courseD_iceage_loops12_instruction: Get to the acorn any way you can!
      courseD_iceage_loops2_instruction: Use a `turn left` block to get to the acorn!
      courseD_iceage_loops3_instruction: |-
        Can you get to the acorn with just one
        `move forward` block?
      courseD_iceage_loops4_instruction: |-
        Add one more block to get Scrat all the
        way to the acorn!
      courseD_iceage_loops6_instruction: Can you add a loop to get to the acorn?
      courseD_iceage_loops7_instruction: 'Scrat really wants that acorn! '
      courseD_iceage_loops8_instruction: 'Can you fix this code? '
      courseD_iceage_loops9_instruction: |-
        The acorn is so far away! Can you use loops
        to help Scrat get there?
      courseD_maze_loops_challenge1_instruction: |-
        Let's hunt for treasure - using
        loops! Help the collector reach at least two piles of treasure using only
        the blocks in your toolbox.
      courseD_maze_nestedLoops3_instruction: |-
        Get the zombie to the sunflower using
        the fewest number of blocks possible.
      courseD_maze_nestedLoops3_2018_instruction: |-
        Get the zombie to the sunflower
        using the fewest number of blocks possible.
      courseD_maze_nestedLoops4_instruction: "Get the zombie to the sunflower using\nthe
        fewest blocks possible!  "
      courseD_maze_nestedLoops4_2018_instruction: "Get the zombie to the sunflower\nusing
        the fewest blocks possible!  "
      courseD_maze_nestedLoops5_instruction: |-
        Get the zombie to the sunflower using
        the fewest number of blocks possible!
      courseD_maze_nestedLoops5_2018_instruction: |-
        Get the zombie to the sunflower
        using the fewest number of blocks possible!
      courseD_maze_nestedLoops6_instruction: |-
        Get the zombie to the sunflower using
        only the blocks available.
      courseD_maze_nestedLoops6_2018_instruction: |-
        Get the zombie to the sunflower
        using only the blocks available.
      courseD_maze_ramp1_instruction: 在這一關，把所有的積木放在一起，然後點擊「運行」看看結果如何！
      courseD_maze_ramp1_2018_instruction: |-
        For this puzzle, snap all of the blocks
        together and click "Run" to watch it go!
      courseD_maze_ramp2_instruction: 從工具箱中拉出另外的`移動-向前`積木來完成這個程式。
      courseD_maze_ramp2_2018_instruction: |-
        Drag an extra `move forward` block out
        of the toolbox, then attach all blocks to `when run` to finish your code.
      courseD_maze_ramp3_instruction: 這裡有個多餘的積木害得鳥撞牆，找到它，然後把它拖回工具箱以消除它。
      courseD_maze_ramp3_2018_instruction: |-
        There is one extra block that is going
        to cause the bird to crash. Throw it away by dragging it back to the toolbox.
      courseD_maze_ramp4_instruction: 小心 TNT 炸藥，不然羽毛會被炸飛！
      courseD_maze_ramp4_2018_instruction: 小心 TNT 炸藥，不然羽毛會被炸飛！
      courseD_maze_ramp5_instruction: 小心 TNT 炸藥。
      courseD_maze_ramp5_2018_instruction: 小心 TNT 炸藥。
      courseD_maze_ramp5a_instruction: |-
        Pay attention to the sequence and see if
        you can figure out how to get to that pig!
      courseD_maze_ramp5a_2018_instruction: |-
        Pay attention to the sequence and see
        if you can figure out how to get to that pig!
      courseD_maze_ramp5b_instruction: |-
        Navigate this maze to help the bird find
        the pig!
      courseD_maze_ramp5b_2018_instruction: |-
        Navigate this maze to help the bird
        find the pig!
      courseD_maze_ramp5c_instruction: Help the bird get to the pig.
      courseD_maze_ramp5c_2018_instruction: Help the bird get to the pig.
      courseD_maze_ramp5d_instruction: Get the bird to the pig.
      courseD_maze_ramp5d_2018_instruction: Get the bird to the pig.
      courseD_maze_ramp6_instruction: "「保持冷靜，幫我找到那隻壞豬豬。否則我真的會變成憤怒鳥！」"
      courseD_maze_ramp6a_instruction: "「保持冷靜，幫我找到那隻壞豬豬。否則我真的會變成憤怒鳥！」"
      courseD_maze_ramp7_instruction: 讓鳥抓到這隻豬！
      courseD_maze_until1_instruction: Get the angry bird to the pig.
      courseD_maze_until10_instruction: Help the zombie get to the sunflower.
      courseD_maze_until10_2018_instruction: Help the zombie get to the sunflower.
      courseD_maze_until10_predict2_instruction: Help the zombie get to the sunflower.
      courseD_maze_until10_predict2_2018_instruction: |-
        Help the zombie get to the
        sunflower.
      courseD_maze_until1_2018_instruction: Get the angry bird to the pig.
      courseD_maze_until2_instruction: |-
        Now, use the `repeat until` loop to do the
        same thing without specifying how many times to move forward and turn.
      courseD_maze_until3_instruction: Get the bird to the pig.
      courseD_maze_until3_2018_instruction: Get the bird to the pig.
      courseD_maze_until4_instruction: |-
        Can you get the zombie to the sunflower using
        only the blocks that are available?
      courseD_maze_until4_2018_instruction: |-
        Can you get the zombie to the sunflower
        using only the blocks that are available?
      courseD_maze_until5_instruction: |-
        Use the `if` block to help the zombie decide
        when to turn, then get the zombie to the sunflower.
      courseD_maze_until5_2018_instruction: |-
        Use the `if` block to help the zombie
        decide when to turn, then get the zombie to the sunflower.
      courseD_maze_until6_instruction: Help the zombie get to the sunflower.
      courseD_maze_until6_2018_instruction: Help the zombie get to the sunflower.
      courseD_maze_until7_instruction: Help the zombie get to the sunflower.
      courseD_maze_until7_2018_instruction: Help the zombie get to the sunflower.
      courseD_maze_until8_instruction: Help the zombie get to the sunflower.
      courseD_maze_until8_2018_instruction: Help the zombie get to the sunflower.
      courseD_maze_until9_instruction: "**挑戰：**避開食僵花，並幫助僵屍移動到向日葵那兒。"
      courseD_maze_until9_2018_instruction: |-
        **Challenge:** Avoid the chompers and
        help the zombie get to the sunflower.
      courseD_maze_until_challenge_instruction: |-
        No hints, just challenge. Get the
        zombie to the sunflower.
      courseD_maze_until_challenge1-delete-this-copy_instruction: |-
        No hints, just
        challenge. Get the zombie to the sunflower.
      courseD_maze_until_challenge1_instruction: |-
        No hints, just challenge. Get the
        zombie to the sunflower.
      courseD_maze_until_challenge1_2018_instruction: |-
        No hints, just challenge.
        Get the zombie to the sunflower.
      courseD_maze_until_challenge2_instruction: |-
        No hints, just challenge. Get the
        zombie to the sunflower.
      courseD_pixelation_instruction: |-
        Encode an image of anything you like using
        binary. The binary language will be represented with '0' and '1' only.
      courseD_playLab_cond1_instruction: |-
        Get Pegleg to the dragon to solve this
        puzzle.
      courseD_playLab_cond1_2018_instruction: |-
        Get Pegleg to the flags to solve this
        puzzle.
      courseD_playLab_cond2_instruction: "Give Pegleg a point every time he makes\nit
        to the dragon. "
      courseD_playLab_cond2_2018_instruction: "Give Pegleg a point every time he\nmakes
        it to the dragon. "
      courseD_playLab_cond3_instruction: "Make the dragon change between random emotions\nevery
        second.  "
      courseD_playLab_cond3_2018_instruction: "Make the dragon change between random\nemotions
        every second.  "
      courseD_playLab_cond3a_instruction: |-
        Make it so when Pegleg gets to the dragon,
        he gets 2 points if the dragon is happy and 1 otherwise.
      courseD_playLab_cond3a_2018_instruction: |-
        Make it so when Pegleg gets to the
        dragon, he gets 2 points if the dragon is happy and 1 otherwise.
      courseD_playLab_cond3b_instruction: |-
        1) Make the dragon change between random
        emotions every second.  \r
        2) Make it so when Pegleg gets to the dragon,
        he gets 2 points if the dragon is happy and 1 otherwise.
      courseD_playLab_cond4_instruction: |-
        Add some code so that the ninja (actor
        3) starts chasing Pegleg as soon as the game begins.  End the game as a loss
        if the ninja catches him.
      courseD_playLab_cond4_2018_instruction: |-
        Add some code so that the ninja (actor
        3) starts chasing Pegleg as soon as the game begins.  End the game as a loss
        if the ninja catches him.
      courseD_playLab_cond5_instruction: |-
        Add a `repeat forever` loop that continuously
        checks if the score is greater than 5, then ends the game as a win when it
        is.
      courseD_playLab_cond5_2018_instruction: |-
        Add a `repeat forever` loop that continuously
        checks if the score is greater than 5, then ends the game as a win when it
        is.
      courseD_playLab_cond6_instruction: "1)  Slow the ninja (actor 3) down before\nyou
        set him to chase the pirate.  \\r\n2)  If the pirate is greater than 225\npixels
        down, set the ninja to **flee** the pirate.  Otherwise, set the ninja\nto
        **chase** the pirate.  "
      courseD_playLab_cond6_2018_instruction: "1)  Slow the ninja (actor 3) down\nbefore
        you set him to chase the pirate.  \\r\n2)  If the pirate is greater\nthan
        225 pixels down, set the ninja to **flee** the pirate.  Otherwise, set\nthe
        ninja to **chase** the pirate.  "
      courseD_playLab_cond6a_instruction: |-
        If the pirate (actor 1) is in the safe
        zone, wait one second, then deduct a point as long as he stays beneath the
        octopus line.
      courseD_playLab_cond6a_2018_instruction: |-
        If the pirate (actor 1) is in the
        safe zone, wait one second, then deduct a point as long as he stays beneath
        the octopus line.
      courseD_playLab_cond6cloneForTest_instruction: Testing
      courseD_playLab_condFP_instruction: |-
        Now, build your own game to show off to
        your friends!
      courseD_playLab_condFP_2018_instruction: |-
        Now, build your own game to show
        off to your friends!
      courseD_playLab_embedded_instruction: |-
        Move Pegleg the Pirate with the arrow
        keys. Get to the dragon to score points, but avoid the ninja! Standing below
        the line of octopuses will make the ninja stop chasing you, but beware! The
        longer you stay there, the more points you lose. \r
        \r
        Get 5 points to win!
      courseD_scrat_ramp1_instruction: 在這一關，把所有的積木放在一起，然後點擊「運行」看看結果如何！
      courseD_scrat_ramp1_2018_instruction: |-
        For this puzzle, snap all of the blocks
        together and click "Run" to watch it go!
      courseD_scrat_ramp2_instruction: 從工具箱中拉出另外的`移動-向前`積木來完成這個程式。
      courseD_scrat_ramp2_2018_instruction: |-
        Drag an extra `move forward` block out
        of the toolbox, then attach all blocks to `when run` to finish your code.
      courseD_scrat_ramp3_instruction: |-
        There is one extra block that is going to
        cause Scrat to crash. Throw it away by dragging it back to the toolbox.
      courseD_scrat_ramp3_2018_instruction: |-
        There is one extra block that is going
        to cause Scrat to crash. Throw it away by dragging it back to the toolbox.
      courseD_scrat_ramp4_instruction: Avoid the cracked ice to keep Scrat safe!
      courseD_scrat_ramp4_2018_instruction: |-
        Avoid the cracked ice to keep Scrat
        safe!
      courseD_scrat_ramp5_instruction: Avoid the cracked ice.
      courseD_scrat_ramp5_2018_instruction: Avoid the cracked ice.
      courseD_scrat_ramp6_instruction: Help Scrat get to the acorn using a loop!
      courseD_scrat_ramp6_2018_instruction: |-
        Help Scrat get to the acorn using a
        loop!
      courseD_scrat_ramp7_instruction: Help Scrat get to the acorn!
      courseD_scrat_ramp7_2018_instruction: Help Scrat get to the acorn!
      courseD_scrat_ramp8_instruction: |-
        Use what you've learned to get Scrat to
        the acorn!
      courseD_scrat_ramp8_2018_instruction: |-
        Use what you've learned to get Scrat
        to the acorn!
      courseE_artist_concept1_instruction: 'Recreate this image. '
      courseE_artist_concept1_2018_instruction: 'Recreate this image. '
      courseE_artist_concept4_instruction: |-
        Recreate this drawing using 13 blocks
        or fewer.
      courseE_artist_concept4_2018_instruction: Recreate this drawing.
      courseE_artist_concept_challenge1_instruction: "Help the artist draw this unique\nshape. "
      courseE_artist_concept_challenge1_2018_instruction: "Help the artist draw this\nunique
        shape. "
      courseE_artist_concept_challenge2_instruction: |-
        Create five pinwheel designs
        using the code below.
      courseE_artist_concept_challenge2_2018_instruction: |-
        Create five pinwheel designs
        using the code below.
      courseE_artist_embed_functions8_instruction: |-
        Look at this level carefully.
        What kind of functions do you see a program needing in order to create a design
        like this. You'll soon make this on your own, so come back here if you need
        help.
      courseE_artist_functions1_instruction: |-
        Help the zombie draw glasses using
        squares with sides of 100 pixels.  \r
        The bridge between the glasses is 75
        pixels long.
      courseE_artist_functions10_instruction: |-
        This time, use lines of 8 hexagons
        with 25 pixel sides.
      courseE_artist_functions10_2018_instruction: |-
        This time, use lines of 8 hexagons
        with 25 pixel sides.
      courseE_artist_functions1_2018_instruction: |-
        Help the zombie draw glasses using
        squares with sides of 100 pixels.  \r
        The bridge between the glasses is 75
        pixels long.
      courseE_artist_functions2_instruction: "This time, use the `draw a square`\nfunction
        to create the glasses. "
      courseE_artist_functions2_2018_instruction: "This time, use the `draw a square`\nfunction
        to create the glasses. "
      courseE_artist_functions3_instruction: |-
        You can make this drawing by adding
        a repeat block.
      courseE_artist_functions3_2018_instruction: |-
        You can make this drawing by adding
        a repeat block.
      courseE_artist_functions4_instruction: |-
        Now that you can draw a star, try drawing
        four stars!
      courseE_artist_functions4_2018_instruction: |-
        Now that you can draw a star,
        try drawing four stars!
      courseE_artist_functions5_instruction: |-
        Draw only those three stars to finish
        this puzzle.
      courseE_artist_functions5_2018_instruction: |-
        Draw only those three stars to
        finish this puzzle.
      courseE_artist_functions6_instruction: |-
        Make this window by drawing a square,
        then turning 90 degrees before drawing another, and so on.
      courseE_artist_functions6_2018_instruction: |-
        Make this window by drawing a
        square, then turning 90 degrees before drawing another, and so on.
      courseE_artist_functions7_instruction: |-
        Try solving this puzzle by creating
        `draw a window` and calling it five times. Watch out for the door!
      courseE_artist_functions7_2018_instruction: |-
        Try solving this puzzle by creating
        `draw a window` and calling it five times. Watch out for the door!
      courseE_artist_functions8_instruction: |-
        Challenge: Create as many functions
        as you think you need to make this drawing of 50 pixel squares.
      courseE_artist_functions8_2018_instruction: |-
        Challenge: Create as many functions
        as you think you need to make this drawing of 50 pixel squares.
      courseE_artist_functions9_instruction: |-
        Create this image using only the blocks
        provided.
      courseE_artist_functions9_2018_instruction: |-
        Create this image using only the
        blocks provided.
      courseE_artist_functions_challenge_instruction: |-
        Once you define a function,
        you can call it over and over again - whenever and wherever you want! Try
        this code to see how it works, then change it to make your own impressive
        design!
      courseE_artist_functions_challenge1_instruction: |-
        Once you define a function,
        you can call it over and over again - whenever and wherever you want! Try
        this code to see how it works, then change it to make your own impressive
        design!
      courseE_artist_functions_challenge1_2018_instruction: |-
        Once you define a function,
        you can call it over and over again - whenever and wherever you want! Try
        this code to see how it works, then change it to make your own impressive
        design!
      courseE_artist_functions_challenge2_instruction: |-
        Try this code to see how
        it works, then make the program your own!
      courseE_artist_functions_challenge2_2018_instruction: |-
        Try this code to see
        how it works, then make the program your own!
      courseE_artist_ramp10_instruction: 現在，把上個畫出三角形的程式放到新的迴圈積木裡，讓它邊轉邊畫，就可以畫出一個雪花囉！
      courseE_artist_ramp11_instruction: 現在用小藝術家來畫出一個正方形！
      courseE_artist_ramp12_instruction: 使用你學到的方法，在正方形裡頭畫出這個三角形。
      courseE_artist_ramp8_instruction: 現在用小藝術家來畫出一個正方形！
      courseE_artist_ramp8_2_instruction: 現在用小藝術家來畫出一個正方形！
      courseE_artist_ramp8_2018_instruction: 現在用小藝術家來畫出一個正方形！
      courseE_artist_ramp8_2_2018_instruction: 現在用小藝術家來畫出一個正方形！
      courseE_artist_ramp9_instruction: 使用你學到的方法來畫出這個三角形。
      courseE_artist_ramp9_2_instruction: |-
        Use what you've learned to draw this
        triangle.
      courseE_artist_ramp9_2018_instruction: |-
        Use what you've learned to draw this
        triangle.
      courseE_artist_ramp9_2_2018_instruction: |-
        Use what you've learned to draw
        this triangle.
      courseE_bee_concept1_instruction: 使用巢狀迴圈從每朵花中收集所有的花蜜。
      courseE_bee_concept1_2018_instruction: |-
        Collect all of the nectar from each
        flower.
      courseE_bee_concept2_instruction: |-
        Help the bee make all of the honey. You
        can only make honey at a honeycomb, but you can check any space to see if
        there is a honeycomb.
      courseE_bee_concept2_2018_instruction: 'Help the bee make all of the honey.

'
      courseE_bee_concept3_instruction: |-
        Collect all of the nectar using  as few
        blocks as possible.
      courseE_bee_concept3_2018_instruction: |-
        Collect all of the nectar using  as
        few blocks as possible.
      courseE_bee_concept4_instruction: |-
        Uh oh! The bee is not sure if he should
        collect nectar or make honey. Can you help him out?
      courseE_bee_concept4_2018_instruction: |-
        Uh oh! The bee is not sure if he should
        collect nectar or make honey. Can you help him out?
      courseE_bee_concept5_instruction: |-
        Help the bee collect the nectar from the
        flowers?
      courseE_bee_concept5_2018_instruction: |-
        Help the bee collect the nectar from
        the flowers?
      courseE_bee_functions1_instruction: 收集每一朵花的花蜜。
      courseE_bee_functions10_instruction: |-
        Solve this puzzle by creating a function
        that helps the bee go get all of the honey before returning back to the main
        path.
      courseE_bee_functions10_2018_instruction: |-
        Solve this puzzle by creating a
        function that helps the bee go get all of the honey before returning back
        to the main path.
      courseE_bee_functions1_2018_instruction: |-
        Collect all the nectar from each
        flower.
      courseE_bee_functions2_instruction: |-
        Use the `get 2 nectar` function to collect
        the nectar from each flower.
      courseE_bee_functions2_2018_instruction: |-
        Use the `get 2 nectar` function to
        collect the nectar from each flower.
      courseE_bee_functions3_instruction: |-
        函式是執行特定任務的一串程式碼。用「get 5」這個函式來一次拿5個花蜜。
        記得用迴圈來計算理想的積木塊次數。
      courseE_bee_functions3_2018_instruction: |-
        Build the `get 5` function to use
        in this puzzle.
      courseE_bee_functions4_instruction: |-
        "移動，並得到花蜜"函式能讓蜜蜂轉身，收集花蜜，最後返回到開始的地方。
        使用函式來收集所有的花蜜。
      courseE_bee_functions4_2018_instruction: |-
        "移動，並得到花蜜"函式能讓蜜蜂轉身，收集花蜜，最後返回到開始的地方。
        使用函式來收集所有的花蜜。
      courseE_bee_functions5_instruction: |-
        Now write the function to collect nectar
        from the flowers.
      courseE_bee_functions5_2018_instruction: |-
        Now write the function to collect
        nectar from the flowers.
      courseE_bee_functions6_instruction: |-
        Create a function and call it to collect
        nectar at each flower and make honey at each honeycomb.
      courseE_bee_functions6_2018_instruction: |-
        Create a function and call it to
        collect nectar at each flower and make honey at each honeycomb.
      courseE_bee_functions6test_instruction: |-
        Create a function and call it to collect
        nectar at each flower and make honey at each honeycomb.
      courseE_bee_functions7_instruction: |-
        Create your own function that goes down
        a path, gets nectar, makes honey, and then returns the bee to the top of the
        path. Collect all the nectar and make all the honey!
      courseE_bee_functions7_2018_instruction: |-
        Create your own function that goes
        down a path, gets nectar, makes honey, and then returns the bee to the top
        of the path. Collect all the nectar and make all the honey!
      courseE_bee_functions8_instruction: |-
        Create a function that collects all of
        the nectar from each flower.
      courseE_bee_functions8_2018_instruction: |-
        Create a function that collects all
        of the nectar from each flower.
      courseE_bee_functions9_instruction: |-
        Create a function to collect all of the
        nectar from each flower.
      courseE_bee_functions9_2018_instruction: |-
        Create a function to collect all
        of the nectar from each flower.
      courseE_bee_functions9b_instruction: Now try it in Bee!
      courseE_bee_functions_challenge1_instruction: |-
        You are on your own for this
        challenge. This could "bee" harder than it looks!
      courseE_bee_functions_challenge1_2018_instruction: |-
        You are on your own for
        this challenge. This could "bee" harder than it looks!
      courseE_bee_functions_challenge2_instruction: |-
        You are on your own for this
        challenge. Sweet!
      courseE_bee_functions_challenge2_2018_instruction: |-
        You are on your own for
        this challenge. Sweet!
      courseE_bee_ramp14_instruction: |-
        Help the bee follow the path to gather all
        of the honey and all of the nectar.
      courseE_bee_ramp14_2018_instruction: |-
        Help the bee follow the path to gather
        all of the honey and all of the nectar.
      courseE_bee_ramp17_instruction: Use what you have learned to solve this puzzle.
      courseE_collector_ramp10_instruction: Help Laurel collect all of the treasure.
      courseE_collector_ramp8_instruction: Help Laurel collect all of the treasure.
      courseE_collector_ramp9_instruction: Help Laurel collect all of the treasure.
      courseE_farmer_concept1_instruction: |-
        Can you write a program that fills these
        holes until the ground is even?
      courseE_farmer_concept1_2018_instruction: |-
        Can you write a program that fills
        these holes until the ground is even?
      courseE_farmer_concept2_instruction: Collect all of the pumpkins.
      courseE_farmer_concept2_2018_instruction: Collect all of the pumpkins.
      courseE_farmer_concept3_instruction: |-
        Fill in the hole at the end of each of
        these paths.
      courseE_farmer_concept3_2018_instruction: |-
        Fill in the hole at the end of each
        of these paths.
      courseE_farmer_concept4_instruction: |-
        現在讓我們加深難度！
        我們已經將整個程式積木嵌套在另一個迴圈內，但你需要讓小藝術家回到初始位置來畫出下一行。要在最外層迴圈下添加哪個積木，才能畫完整個網格？
      courseE_farmer_functions1_instruction: |-
        Help the harvester get to the pumpkin
        and pick it.
      courseE_farmer_functions10_instruction: "No one knows what these sprouts will\nbecome.
        \ Use `if` statements to write the code to check and harvest each one.   "
      courseE_farmer_functions10b_instruction: |-
        Use your new function twice to solve
        this puzzle.
      courseE_farmer_functions10b_2018_instruction: |-
        Use your new function twice
        to solve this puzzle.
      courseE_farmer_functions1_2018_instruction: |-
        Help the harvester get to the
        pumpkin and pick it.
      courseE_farmer_functions1a_instruction: |-
        Now help the harvester pick the corn,
        lettuce, **and** pumpkin.
      courseE_farmer_functions1a_2018_instruction: |-
        Now help the harvester pick the
        corn, lettuce, **and** pumpkin.
      courseE_farmer_functions2_instruction: |-
        Now, there will be a different number
        of pumpkins each time you run the program.   \r
        \r
        Use the `while` block
        to pick only as many pumpkins as you need.
      courseE_farmer_functions2a_instruction: |-
        We're going to check lots of squares
        for crops in the next few puzzles.  Let's move everything into a function
        to make it easier.
      courseE_farmer_functions2aALT_instruction: |-
        We're going to check lots of squares
        for crops in the next few puzzles.  Let's move everything into a function
        to make it easier.
      courseE_farmer_functions2b_instruction: |-
        Help the harvester pick the corn and
        pumpkins.
      courseE_farmer_functions2b_2018_instruction: |-
        Help the harvester pick the corn
        and pumpkins.
      courseE_farmer_functions2ba_instruction: |-
        Help the farmer pick the corn and
        pumpkins using the `corn and pumpkin` function.
      courseE_farmer_functions2ba_2018_instruction: |-
        Help the farmer pick the corn
        and pumpkins using the `corn and pumpkin` function.
      courseE_farmer_functions3_instruction: |-
        What happens when the paths to the
        pumpkins are all different lengths?   \r
        \r
        Get them all with as few blocks
        as possible.
      courseE_farmer_functions3b_instruction: |-
        Now help the farmer pick the corn,
        lettuce, **and** pumpkin.
      courseE_farmer_functions3c_instruction: |-
        Now, fill-in the function yourself
        by pulling the blocks from the code and dropping them into the **function
        definition**.
      courseE_farmer_functions3c_2018_instruction: |-
        Now, fill-in the function yourself
        by pulling the blocks from the code and dropping them into the **function
        definition**.
      courseE_farmer_functions4_instruction: |-
        Great!  Now you have code that will
        work to get pumpkins from any size path.\r
        \r
        Let's drag that code into
        a function so we can use it in lots of ways...but first use it to solve this
        puzzle again.
      courseE_farmer_functions4b_instruction: |-
        Use your new function to solve this
        puzzle.
      courseE_farmer_functions4b_2018_instruction: |-
        Use your new function to solve
        this puzzle.
      courseE_farmer_functions5_instruction: |-
        How can you change your program to
        get this function to work for each of these paths?
      courseE_farmer_functions5a_instruction: |-
        How can you change your program to
        get this function to work for each of these paths?
      courseE_farmer_functions5b_instruction: |-
        The crops are now growing in clusters.  Add
        some new `while` loops to your function to make sure you get all of the produce.
      courseE_farmer_functions5c_instruction: Your function will come in handy here.
      courseE_farmer_functions5c_2018_instruction: |-
        Your function will come in handy
        here.
      courseE_farmer_functions6_instruction: |-
        *「生菜，試點新玩意！」*\r
        \r
        這裡有某個可以收集所有生菜的程式，將它變成函式，這樣一來我們之後可以方便的使用它。
      courseE_farmer_functions6b_instruction: Pick all of the produce.
      courseE_farmer_functions6c_instruction: |-
        What do you need to add this program
        to check whether a sprout is corn or lettuce?
      courseE_farmer_functions6c_2018_instruction: |-
        What do you need to add this
        program to check whether a sprout is corn or lettuce?
      courseE_farmer_functions7_instruction: Use your functions to solve this puzzle.
      courseE_farmer_functions7b_instruction: |-
        Help the harvester find her way down
        this confusing path and to the pumpkin by turning left at the corn and right
        at the lettuce.
      courseE_farmer_functions7b_2018_instruction: |-
        Help the harvester find her way
        down this confusing path and to the pumpkin by turning left at the corn and
        right at the lettuce.
      courseE_farmer_functions8_instruction: "**挑戰：**完成這個關卡，使用的積木愈少愈好。"
      courseE_farmer_functions8b_instruction: "**挑戰：**讓農夫走到南瓜那兒，並沿著路收集生菜與玉米。 "
      courseE_farmer_functions8b_2018_instruction: "**Challenge:** Collect all of\nthe
        pumpkins using the method from the last puzzle. "
      courseE_farmer_functions9_instruction: Use conditionals to simplify your program.
      courseE_farmer_functions9b_instruction: |-
        Can you figure out the pattern that
        you need to solve this puzzle?
      courseE_farmer_functions9b_2018_instruction: |-
        Can you figure out the pattern
        that you need to solve this puzzle?
      courseE_farmer_functions9b_clone_instruction: |-
        Can you figure out the pattern
        that you need to solve this puzzle?
      courseE_farmer_predict1_instruction: |-
        Pick all of the lettuce (only while there
        is some to pick.)
      courseE_farmer_predict1_2018_instruction: |-
        Pick all of the lettuce (only while
        there is some to pick.)
      courseE_farmer_ramp11_instruction: 這個關卡用到了巢狀迴圈，想想看，要怎麼完成呢？
      courseE_farmer_ramp11a_instruction: "Pick lettuce only while there is still\nlettuce
        to pick. "
      courseE_farmer_ramp11a_2018_instruction: While there is a pile, remove dirt.
      courseE_farmer_ramp11b_instruction: While there is a pile, remove dirt.
      courseE_farmer_ramp11b_2018_instruction: While there is a pile, remove dirt.
      courseE_farmer_ramp12_instruction: 現在使用巢狀迴圈（`重複`和`當…`）來完成這個關卡。
      courseE_farmer_ramp12_2018_instruction: |-
        Now use nested loops to solve this
        puzzle.
      courseE_farmer_ramp12_forswap_instruction: |-
        Now use nested loops to solve this
        puzzle.
      courseE_farmer_ramp12_forswap_2018_instruction: |-
        Now use nested loops to solve
        this puzzle.
      courseE_farmer_ramp12a_instruction: |-
        Help the farmer correctly travel the path
        to gather all of the lettuce.
      courseE_farmer_ramp12a_2018_instruction: |-
        Help the farmer correctly travel
        the path to gather all of the lettuce.
      courseE_farmer_ramp12b_instruction: While there is lettuce, pick lettuce!
      courseE_farmer_ramp12b_2018_instruction: While there is lettuce, pick lettuce!
      courseE_farmer_ramp12c_instruction: |-
        Move forward until you reach the lettuce,
        then pick it all using a `while` loop.
      courseE_farmer_ramp12c_2018_instruction: |-
        Move forward until you reach the
        lettuce, then pick it all using a `while` loop.
      courseE_farmer_ramp12d_instruction: |-
        Move forward until you reach the lettuce,
        then pick it all using a `while` loop.
      courseE_farmer_ramp12d_2018_instruction: |-
        Move forward until you reach the
        lettuce, then pick it all using a `while` loop.
      courseE_farmer_ramp12e_instruction: |-
        Move forward until you reach the lettuce,
        then pick it all using a `while` loop.
      courseE_farmer_ramp12e_2018_instruction: |-
        Move forward until you reach the
        lettuce, then pick it all using a `while` loop.
      courseE_farmer_ramp12f_instruction: |-
        Move forward until you reach the lettuce,
        then turn left **if** there is a path to the left.  Otherwise, turn right.
      courseE_farmer_ramp12f_2018_instruction: |-
        Move forward until you reach the
        lettuce, then turn left **if** there is a path to the left.  Otherwise, turn
        right.
      courseE_farmer_ramp12g_instruction: |-
        Move forward until you reach the lettuce,
        then turn left **if** there is a path to the left.  Otherwise, turn right.
      courseE_farmer_ramp12g_2018_instruction: |-
        Move forward until you reach the
        lettuce, then turn left **if** there is a path to the left.  Otherwise, turn
        right.
      courseE_farmer_ramp13_instruction: 如果有玉米就收集玉米；如果有生菜就收集生菜。
      courseE_farmer_ramp13_2018_instruction: |-
        Pick corn if there is corn, and pick
        lettuce while there is lettuce.
      courseE_farmer_ramp15_instruction: |-
        Solve this puzzle using only the blocks
        available.
      courseE_farmer_ramp15_2018_instruction: |-
        Solve this puzzle using only the blocks
        available.
      courseE_farmer_ramp16_instruction: |-
        **Challenge:** Solve this puzzle with the
        fewest number of blocks.
      courseE_maze_predict1_instruction: |-
        This code includes a new block. What do
        you think would happen if you press the "Run" block?
      courseE_maze_predict1_2018_instruction: |-
        This code includes a new block. What
        do you think would happen if you press the "Run" block?
      courseE_maze_ramp1_instruction: 在這一關，把所有的積木放在一起，然後點擊「運行」看看結果如何！
      courseE_maze_ramp13_instruction: Time for one last puzzle to pull it all together!
      courseE_maze_ramp1_2018_instruction: |-
        For this puzzle, drag all of the blocks
        together and click "Run" to watch it go!
      courseE_maze_ramp2_instruction: 從工具箱中拉出另外的`移動-向前`積木來完成這個程式。
      courseE_maze_ramp2_2018_instruction: |-
        Drag an extra `move forward` block out
        of the toolbox, then attach all blocks to `when run` to finish your code.
      courseE_maze_ramp3_instruction: 這裡有個多餘的積木害得鳥撞牆，找到它，然後把它拖回工具箱以消除它。
      courseE_maze_ramp3_2018_instruction: |-
        There is one extra block that is going
        to cause the bird to crash. Throw it away by dragging it back to the toolbox.
      courseE_maze_ramp4_instruction: 小心 TNT 炸藥，不然羽毛會被炸飛！
      courseE_maze_ramp4_2018_instruction: 小心 TNT 炸藥，不然羽毛會被炸飛！
      courseE_maze_ramp5_instruction: 小心 TNT 炸藥。
      courseE_maze_ramp5_2018_instruction: 小心 TNT 炸藥。
      courseE_maze_ramp6_instruction: "「保持冷靜，幫我找到那隻壞豬豬。否則我真的會變成憤怒鳥！」"
      courseE_maze_ramp6_2018_instruction: "「保持冷靜，幫我找到那隻壞豬豬。否則我真的會變成憤怒鳥！」"
      courseE_maze_ramp7_instruction: "**挑戰：** 讓鳥抓到這隻豬！"
      courseE_maze_ramp7_2018_instruction: |-
        Use what you've learned to get the bird
        to the pig!
      courseE_maze_ramp_predict1_instruction: |-
        This code includes a new block. What
        do you think would happen if you press the "Run" block?
      courseE_multi_maze_ramp5_instruction: 小心 TNT 炸藥。
      courseE_playLab_challenge1_instruction: |-
        Something should happen when you get
        enough points or when you run out of points. Add some code to the `win game`
        and `lose game` functions to make the game work the way it should. \r
        Click
        the hints for ideas!
      courseE_playLab_challenge1_2018_instruction: |-
        Something should happen when
        you get enough points or when you run out of points. Add some code to the
        `win game` and `lose game` functions to make the game work the way it should.
        \r
        Click the hints for ideas!
      courseE_playLab_embedded_instruction: |-
        This is an example game you can play
        around with. Move the dog with your arrow keys. When the dog touches one of
        the cats, he scores a point! Score 5 points to win!
      courseE_playLab_exampleProject2_instruction: |-
        Here's all of your code to choose
        a card - try adding some other fun features!
      courseE_playLab_scaffold1_instruction: |-
        Choose a background and map, and pick
        an actor to be your game's hero.
      courseE_playLab_scaffold1_2018_instruction: |-
        Choose a background and map, and
        pick an actor to be your game's hero.
      courseE_playLab_scaffold2_instruction: |-
        Use event handlers and actions to make
        your hero move.
      courseE_playLab_scaffold2_2018_instruction: |-
        Use event handlers and actions
        to make your hero move.
      courseE_playLab_scaffold3_instruction: |-
        Add two or more additional actors to
        your game and make them move.
      courseE_playLab_scaffold3_2018_instruction: |-
        Add two or more additional actors
        to your game and make them move.
      courseE_playLab_scaffold4_instruction: |-
        Find some interesting ways to change
        the score in your game. Get the score to show something other than 0 to continue.
      courseE_playLab_scaffold4_2018_instruction: |-
        Find some interesting ways to
        change the score in your game. Get the score to show something other than
        0 to continue.
      courseE_playLab_scaffold5_instruction: 現在花些時間確保遊戲按照你想要的方式運作。包括輸或贏的方式，還有滿足的條件設定。
      courseE_playLab_scaffold5_2018_instruction: |-
        Now spend some time making sure
        the game works the way you want. Include a way to win or lose your game, then
        play until you meet one of those conditions.
      courseE_playLab_scaffold6_instruction: |-
        You've finished! Now you can play
        your game or share it with your friends and classmates!
      courseE_playLab_scaffold6_2018_instruction: |-
        You've finished! Now you can
        play your game or share it with your friends and classmates!
      courseE_playlab_challenge2_instruction: |-
        Can you figure out how this "Fortune
        Teller" app works? Click `MORE` to see your challenges.
      courseE_playlab_variables_challenge2_instruction: |-
        Can you figure out how this
        "Fortune Teller" app works? Click `MORE` to see your challenges.
      courseE_video_createFunctions_instruction: |-
        We don't have a video for creating
        functions, yet. This is a placeholder.
      courseE_video_createFunctions2_instruction: |-
        We don't have a video for creating
        functions, yet. This is a placeholder.
      courseE_video_createFunctions2_2018_instruction: |-
        We don't have a video for
        creating functions, yet. This is a placeholder.
      courseE_video_createFunctions_2018_instruction: |-
        We don't have a video for
        creating functions, yet. This is a placeholder.
      courseF_IceAge_1_instruction: |-
        Help Sid say "Hello!" by dragging the `actor
        1 say` block out and connecting it to the bottom of the `when run` event.
      courseF_IceAge_10_instruction: |-
        Use the `actor __ throw` command to have Sid
        (actor 1) throw hearts at Granny (actor 2) and set Granny's mood to happy
        when she gets hit with them.
      courseF_IceAge_11_instruction: 'Time to create your own game or story! '
      courseF_IceAge_2_instruction: |-
        Help Manny and Sid greet each other by using
        the the `actor ___ say` block twice.
      courseF_IceAge_3_instruction: |-
        Scrat is looking for his acorn! Can you help
        him move the last 200 pixels?
      courseF_IceAge_4_instruction: |-
        Connect a block to the `when actor touches`
        event to play a sound when Diego finds Manny.
      courseF_IceAge_5_instruction: |-
        Help Granny get some exercise by moving left
        and right repeatedly.
      courseF_IceAge_6_instruction: "Can you help Sid call for his friends when you\nclick
        on him? "
      courseF_IceAge_7_instruction: |-
        Write the code to help Scrat get all of the
        acorns!
      courseF_IceAge_8_instruction: |
        Can you finish this program to make it so that
        you both **play a sound** and **score a point** when Sid and Granny collide?
      courseF_IceAge_9_instruction: |-
        Change the scene to an icy background and set
        Sid’s (actor 1) speed to fast.
      courseF_IceAge_template_instruction: |-
        Write the code to help Scrat get all
        of the acorns!
      courseF_artist_embed_for7_instruction: |-
        Press Run to see a program in action!
        This one uses for loops.
      courseF_artist_embed_variables9_instruction: |-
        Press Run to see this program
        in action!
      courseF_artist_for1_instruction: |-
        Experiment with the `for` loop and play with
        the `counter` variable.
      courseF_artist_for10_instruction: |-
        Free Play: Try using the `counter` variable
        with other drawing elements to make magical images like this one.
      courseF_artist_for10_2018_instruction: |-
        Free Play: Try using the `counter`
        variable with other drawing elements to make magical images like this one.
      courseF_artist_for1_2018_instruction: |-
        Experiment with the `for` loop and play
        with the `counter` variable.
      courseF_artist_for2_instruction: |-
        Create this stack of triangles that goes
        from 50 pixel to 100 pixel sides.
      courseF_artist_for2_2018_instruction: |-
        Create this stack of triangles that
        goes from 50 pixel to 100 pixel sides.
      courseF_artist_for3_instruction: "These triangles go from 20 pixel sides to\n200
        pixel sides, and each triangle is 20 pixels larger than the last. "
      courseF_artist_for3_2018_instruction: "These triangles go from 20 pixel sides\nto
        200 pixel sides, and each triangle is 20 pixels larger than the last. "
      courseF_artist_for4_instruction: |
        These squares start at 15 pixels long. The
        largest is 300 pixels long, and each square is 15 pixels larger than the last.
      courseF_artist_for4_2018_instruction: "These squares start at 15 pixels long.\nThe
        largest is 300 pixels long, and each square is 15 pixels larger than the\nlast. "
      courseF_artist_for5_instruction: |-
        Just one little change to the code from the
        last image can create this drawing. Can you figure out what that change is?
      courseF_artist_for5_2018_instruction: |-
        Just one little change to the code from
        the last image can create this drawing. Can you figure out what that change
        is?
      courseF_artist_for6_instruction: |-
        Recreate your code from the last level, but
        turn 89 degrees to create this twisted square spiral.
      courseF_artist_for6_2018_instruction: |-
        Recreate your code from the last level,
        but turn 89 degrees to create this twisted square spiral.
      courseF_artist_for7_instruction: |-
        Make three small changes to the code from
        the last level to get this!
      courseF_artist_for7_2018_instruction: |-
        Make three small changes to the code
        from the last level to get this!
      courseF_artist_for8_instruction: |-
        Take the angle down to 72 degrees to get
        a spiraled pentagon.
      courseF_artist_for8_2018_instruction: |-
        Take the angle down to 72 degrees to
        get a spiraled pentagon.
      courseF_artist_for9_instruction: |-
        **Inspiration:**  Use the counter inside
        the `set alpha` block to get this faded center.
      courseF_artist_for9_2018_instruction: |-
        **Inspiration:**  Use the counter inside
        the `set alpha` block to get this faded center.
      courseF_artist_for_Template_instruction: |-
        Try using some of the code from the
        last level, but turning 89 degrees to create this twisted square spiral.
      courseF_artist_for_Template_2018_instruction: |-
        Try using some of the code from
        the last level, but turning 89 degrees to create this twisted square spiral.
      courseF_artist_for_challenge1_instruction: |-
        Can you figure out how to re-create
        this drawing?
      courseF_artist_for_challenge1_2018_instruction: |-
        Can you figure out how to
        re-create this drawing?
      courseF_artist_for_challenge2_instruction: |-
        Can you figure out how to re-create
        this drawing with a single loop?
      courseF_artist_for_challenge2_2018_instruction: |-
        Can you figure out how to
        re-create this drawing with a single loop?
      courseF_artist_fwp1_instruction: 編輯函式 draw a square（畫個正方形），找出程式裡頭的錯誤。
      courseF_artist_fwp1_2018_instruction: |-
        Edit the function 'draw a square'
        to find bugs.
      courseF_artist_fwp2_instruction: 編輯這個函式，讓函式裡頭帶有一個稱做 length（長度）的參數。
      courseF_artist_fwp2_2018_instruction: 編輯這個函式，讓函式裡頭帶有一個稱做 `length`（長度）的參數。
      courseF_artist_fwp2_predict1_instruction: 編輯這個函式，讓函式裡頭帶有一個稱做 `length`（長度）的參數。
      courseF_artist_fwp2_predict1_2018_instruction: |-
        Edit the function to accept
        a parameter called `length`.
      courseF_artist_fwp3_instruction: 創建一個函式，名為 draw a square（畫個正方形），並使用參數來畫出這 4
        個盒子的外框線。
      courseF_artist_fwp3_2018_instruction: 創建一個函式，名為 draw a square（畫個正方形），並使用參數來畫出這
        4 個盒子的外框線。
      courseF_artist_fwp4_instruction: 編輯這個函式以添加一個參數，參數用來表示多邊形的邊數。
      courseF_artist_fwp4_2018_instruction: |-
        Edit this function to add a parameter
        for the number of sides in your polygon.
      courseF_artist_fwp5_instruction: '使用上個關卡的函式來畫出這些圖形。  '
      courseF_artist_fwp5_2018_instruction: "Use the function from the last puzzle\nto
        draw this series of shapes.  "
      courseF_artist_fwp6_instruction: 編輯 draw a spiral edge（畫個螺旋圖）以使用 length（長度）和
        sides（邊）參數，然後重新創建這些形狀。
      courseF_artist_fwp6_2018_instruction: |-
        Challenge: Edit `draw a spiral edge`
        to use `length` and `sides` parameters, then recreate these shapes.
      courseF_artist_fwp7_instruction: 完成 draw a spiral edge（畫個螺旋圖）函式，同時詢問螺旋中心所需的最小長度。
      courseF_artist_fwp7_2018_instruction: |-
        Finish off the `draw a spiral edge`
        function to also ask for a minimum length for the center of the spiral.
      courseF_artist_fwp8_instruction: 想一想要怎麼使用你剛剛創建的函式來製作出這個圖案？
      courseF_artist_fwp8_2018_instruction: |-
        Can you figure out how to make this
        drawing using the function that you just created?
      courseF_artist_fwp9_instruction: 自由發揮：畫些很棒的東西出來吧！變化筆跡寬度，看看你的圖案會變得怎麼樣！
      courseF_artist_fwp9_2018_instruction: |-
        Freeplay: Draw something awesome! Play
        with the pen width to see how different your drawings look!
      courseF_artist_fwp_challenge1_instruction: |-
        Can you figure out how this program
        works?
      courseF_artist_fwp_challenge1_2018_instruction: |-
        Can you figure out how this
        program works?
      courseF_artist_fwp_challenge2_instruction: |-
        Use what you learned in the previous
        level to draw an image like this.
      courseF_artist_fwp_challenge2_2018_instruction: |-
        Use what you learned in the
        previous level to draw an image like this.
      courseF_artist_ramp10_instruction: 現在，把上個畫出三角形的程式放到新的迴圈積木裡，讓它邊轉邊畫，就可以畫出一個雪花囉！
      courseF_artist_ramp10_2018_instruction: 現在，把上個畫出三角形的程式放到新的迴圈積木裡，讓它邊轉邊畫，就可以畫出一個雪花囉！
      courseF_artist_ramp8_instruction: 現在用小藝術家來畫出一個正方形！
      courseF_artist_ramp8_2018_instruction: 現在用小藝術家來畫出一個正方形！
      courseF_artist_ramp9_instruction: 使用你學到的方法來畫出這個三角形。
      courseF_artist_ramp9_2018_instruction: |-
        Use what you've learned to draw this
        triangle.
      courseF_artist_variables1_instruction: |-
        Let's draw an equilateral triangle
        that is exactly 50 pixels long on each side.
      courseF_artist_variables10_instruction: "Here's your code from the last puzzle.
        \ Try\nediting the variable in other ways.  "
      courseF_artist_variables10_2018_instruction: "Here's your code from the last\npuzzle.
        \ Try editing the variable in other ways.  "
      courseF_artist_variables2_instruction: "Now draw three of those triangles right\nnext
        to each other.   "
      courseF_artist_variables2_2018_instruction: "Now draw three of those triangles\nright
        next to each other.   "
      courseF_artist_variables3_instruction: |-
        Move the length of 50 into a variable
        so we can use it in the next few puzzles.
      courseF_artist_variables3_2018_instruction: |-
        Move the length of 50 into a variable
        so we can use it in the next few puzzles.
      courseF_artist_variables4_instruction: |-
        Now, use the `length` variable to have
        the artist jump forward and down by `length` pixels between triangles.
      courseF_artist_variables4_2018_instruction: |-
        Now, use the `length` variable
        to have the artist jump forward and down by `length` pixels between triangles.
      courseF_artist_variables5_instruction: |-
        Add another set of loops at the end
        of your code to add three more triangles. This time, move forward and up!
      courseF_artist_variables5_2018_instruction: |-
        Add another set of loops at the
        end of your code to add three more triangles. This time, move forward and
        up!
      courseF_artist_variables6_instruction: "Now make the triangles to be 60 pixels\nwide,
        with 60 pixel jumps.  "
      courseF_artist_variables6_2018_instruction: "Now make the triangles to be 60\npixels
        wide, with 60 pixel jumps.  "
      courseF_artist_variables6a_instruction: |-
        Build this design where the squares
        have 80 pixel sides and the artist jumps 80 pixels over and down between each
        one.
      courseF_artist_variables6a_2018_instruction: |-
        Build this design where the squares
        have 80 pixel sides and the artist jumps 80 pixels over and down between each
        one.
      courseF_artist_variables7_instruction: 'Draw a triangle with 150 pixels sides.

'
      courseF_artist_variables7_2018_instruction: "Draw a triangle with 150 pixels\nsides. "
      courseF_artist_variables8_instruction: |-
        Rebuild the triangle code from the
        last puzzle, but this time use the `set length to` block to reset the `length`
        variable to `length`+10 at the end of each loop iteration.
      courseF_artist_variables8_2018_instruction: |-
        Rebuild the triangle code from
        the last puzzle, but this time use the `set length to` block to reset the
        `length` variable to `length`+10 at the end of each loop iteration.
      courseF_artist_variables9_instruction: |-
        See what happens when you repeat the
        code from the last puzzle 30 times instead of only 3!  Feel free to make your
        lines any color or pattern for some extra zest.
      courseF_artist_variables9_2018_instruction: |-
        See what happens when you repeat
        the code from the last puzzle 30 times instead of only 3!  Feel free to make
        your lines any color or pattern for some extra zest.
      courseF_artist_variablesFP_instruction: "**Freeplay:** Take what you've learned\nand
        make your own drawing. "
      courseF_artist_variablesFP_2018_instruction: "**Freeplay:** Take what you've\nlearned
        and make your own drawing. "
      courseF_artist_variables_10_instruction: "Here's your code from the last puzzle.
        \ Try\nediting the variable in other ways.  "
      courseF_artist_variables_2_instruction: |
        Now use another loop to draw three
        of those triangles right next to each other.   \r
        You can nest the code from
        your last puzzle inside.\r
      courseF_artist_variables_5_instruction: |-
        Add another set of loops at the end
        of your code to add three more triangles. This time, move forward and up!
      courseF_artist_variables_6_instruction: |-
        OOPS! We actually need the triangles
        to be 60 pixels wide, with 60 pixel jumps.  \r
        Aren't you glad you're using
        a variable?
      courseF_artist_variables_6a_instruction: |-
        Build this design where the squares
        have 80 pixel sides and the artist jumps 80 pixels over and down between each
        one.
      courseF_artist_variables_9_instruction: |-
        See what happens when you repeat the
        code from the last puzzle 30 times instead of only 3!\r
        \r
        Feel free to
        make your lines any color or pattern for some extra zest.
      courseF_artist_variables_FP_instruction: |-
        **自由活動：**用你學過的東西，繪製出自己的作品。\r
        \r
        你知道怎麼畫出帶變數正方形、五角形、六角形嗎？
      courseF_artist_variables_challenge1_instruction: |-
        Can you create a `length`
        variable and use it to create this pattern?
      courseF_artist_variables_challenge1_2018_instruction: |-
        Can you create a `length`
        variable and use it to create this pattern?
      courseF_artist_variables_challenge1a_instruction: |-
        You've now learned everything
        you need to know to make a pattern like this! This puzzle is meant to be difficult.  Can
        you stick with it until you figure out the solution?
      courseF_artist_variables_challenge2_instruction: |-
        You've now learned everything
        you need to know to make a pattern like this!
      courseF_artist_variables_challenge2_2018_instruction: |-
        You've now learned
        everything you need to know to make a pattern like this!
      courseF_artistembed_variables9_instruction: |-
        See what happens when you repeat
        the code from the last puzzle 30 times instead of only 3!  Feel free to make
        your lines any color or pattern for some extra zest.
      courseF_bee_conditionals10_instruction: |-
        Collect all of the nectar and make
        all of the honey.
      courseF_bee_conditionals10_2018_instruction: |-
        Collect all of the nectar and
        make all of the honey.
      courseF_bee_conditionals1_predict1_instruction: 檢查看看雲裡面是不是有花朵，如果有的話，就採集花蜜。
      courseF_bee_conditionals1_predict1_2018_instruction: |-
        Check to see if there's
        a flower under the cloud. If there's a flower, get nectar.
      courseF_bee_conditionals2_instruction: "Check underneath each cloud to see\nif
        it is hiding a flower before you get nectar.  "
      courseF_bee_conditionals2_2018_instruction: "Check underneath each cloud to\nsee
        if it is hiding a flower before you get nectar.  "
      courseF_bee_conditionals3_instruction: 'Help the bee collect all of the nectar.

'
      courseF_bee_conditionals3_2018_instruction: "Help the bee collect all of the\nnectar. "
      courseF_bee_conditionals4_instruction: |-
        Get all of the nectar using as few
        blocks as possible.
      courseF_bee_conditionals4_2018_instruction: |-
        Get all of the nectar using as
        few blocks as possible.
      courseF_bee_conditionals5_instruction: |-
        Collect all of the nectar using as
        few blocks as possible
      courseF_bee_conditionals5_2018_instruction: |-
        Collect all of the nectar using
        as few blocks as possible
      courseF_bee_conditionals7_predict2_instruction: 使用`如果/否則`積木來收集花朵上的花蜜，並在蜂窩上釀造蜂蜜。
      courseF_bee_conditionals7_predict2_2018_instruction: |-
        Use the `if/else` block
        to collect nectar at flowers and make honey at honeycomb.
      courseF_bee_conditionals8_instruction: |-
        Collect nectar if there is a flower.\r
        Otherwise,
        make honey (because there is a honeycomb).
      courseF_bee_conditionals8_2018_instruction: |-
        Collect nectar if there is a flower.\r
        Otherwise,
        make honey (because there is a honeycomb).
      courseF_bee_for1_instruction: |-
        Collect the nectar from each flower using the
        fewest blocks possible.
      courseF_bee_for10_instruction: "**Challenge:** Take what you've learned about\n`for`
        loops and try to solve this problem. "
      courseF_bee_for10_2018_instruction: "**挑戰：**利用你學過的迴圈來解決這個問題。 "
      courseF_bee_for11_instruction: |-
        What should your increment be to collect 15,
        then 12, then 9, 6, 3 nectar?
      courseF_bee_for11_2018_instruction: |-
        What should your increment be to collect
        15, then 12, then 9, 6, 3 nectar?
      courseF_bee_for1_2018_instruction: |-
        Collect the nectar from each flower using
        the fewest blocks possible.
      courseF_bee_for2_instruction: |-
        Write the code to help the bee collect all of
        the nectar.
      courseF_bee_for2_2018_instruction: |-
        Write the code to help the bee collect
        all of the nectar.
      courseF_bee_for3_instruction: |-
        Try this puzzle using the `for` loop and the
        `counter` variable to see how much shorter your code becomes.
      courseF_bee_for4_instruction: Help the bee collect all of the nectar.
      courseF_bee_for4_2018_instruction: Help the bee collect all of the nectar.
      courseF_bee_for5_instruction: |-
        Use the `counter` variable twice to solve this
        puzzle.
      courseF_bee_for5_2018_instruction: |-
        Use the `counter` variable twice to solve
        this puzzle.
      courseF_bee_for6_instruction: |-
        Try gathering this nectar by counting down from
        5 to 1 by 1.
      courseF_bee_for6_2018_instruction: |-
        Try gathering this nectar by counting down
        from 5 to 1 by 1.
      courseF_bee_for7_instruction: |-
        Try collecting these flowers using an increment
        of 2.
      courseF_bee_for7_2018_instruction: |-
        Try collecting these flowers using an increment
        of 2.
      courseF_bee_for8_instruction: |-
        You've got this! What should your increment
        be to collect 3, 6, 9, 12, 15 nectar?
      courseF_bee_for8_2018_instruction: |-
        You've got this! What should your increment
        be to collect 3, 6, 9, 12, 15 nectar?
      courseF_bee_for9_instruction: |-
        Use the `counter` variable to navigate this
        garden with the fewest number of blocks possible.
      courseF_bee_for9_2018_instruction: |-
        Use the `counter` variable to navigate
        this garden with the fewest number of blocks possible.
      courseF_bee_for_challenge1_instruction: "Use this `for loop` to collect all\nof
        the nectar. "
      courseF_bee_for_challenge1_2018_instruction: "Use this `for loop` to collect\nall
        of the nectar. "
      courseF_bee_for_challenge2_instruction: |-
        Solve this puzzle using the fewest
        number of blocks possible.
      courseF_bee_for_challenge2_2018_instruction: |-
        Solve this puzzle using the fewest
        number of blocks possible.
      courseF_bee_for_challenge3_instruction: |-
        Solve this puzzle using the fewest
        number of blocks possible.
      courseF_bee_functions2_instruction: |-
        Use the `get only nectar` function to
        collect the nectar from each flower.
      courseF_bee_functions2_2018_instruction: |-
        Use the `get only nectar` function
        to collect the nectar from each flower.
      courseF_bee_functions3_instruction: |-
        Click "edit" to put code inside the
        `only make honey` function, then use it to solve this puzzle.
      courseF_bee_functions3_2018_instruction: |-
        Click "edit" to put code inside
        the `only make honey` function, then use it to solve this puzzle.
      courseF_bee_functions3a_instruction: |-
        Write a function that gets nectar if
        the bee is at a flower, otherwise it gets honey.  Use your function to solve
        the puzzle!
      courseF_bee_functions3a_2018_instruction: |-
        Write a function that gets nectar
        if the bee is at a flower, otherwise it gets honey.  Use your function to
        solve the puzzle!
      courseF_bee_functions4_instruction: |-
        "移動，並得到花蜜"函式能讓蜜蜂轉身，收集花蜜，最後返回到開始的地方。
        使用函式來收集所有的花蜜。
      courseF_bee_functions4_2018_instruction: |-
        "移動，並得到花蜜"函式能讓蜜蜂轉身，收集花蜜，最後返回到開始的地方。
        使用函式來收集所有的花蜜。
      courseF_bee_functions5_instruction: |-
        Now write the function to collect nectar
        from the flowers.
      courseF_bee_functions5a_instruction: |-
        Use the `move and check` function to
        collect all of the nectar.
      courseF_bee_functions5a_2018_instruction: |-
        Use the `move and check` function
        to collect all of the nectar.
      courseF_bee_functions6_instruction: |-
        Help the bee through the maze by turning
        left at flowers and right at honeycomb.
      courseF_bee_functions6_2018_instruction: |-
        Help the bee through the maze by
        turning left at flowers and right at honeycomb.
      courseF_bee_functions7_instruction: |-
        Rebuild your function from the last puzzle
        to solve this maze.
      courseF_bee_functions7_2018_instruction: |-
        Rebuild your function from the last
        puzzle to solve this maze.
      courseF_bee_functions8a_instruction: |-
        Collect all the nectar or make all of
        the honey!
      courseF_bee_functions8a_2018_instruction: |-
        Collect all the nectar or make all
        of the honey!
      courseF_bee_functionsPre7_instruction: |-
        Now try building a function to solve
        this maze.  How is it different from last time?
      courseF_bee_functionsPre7_2018_instruction: |-
        Now try building a function to
        solve this maze.  How is it different from last time?
      courseF_bee_functions_challenge1_instruction: |-
        Create a new function to collect
        all the nectar and honey while there is a path ahead.
      courseF_bee_functions_challenge1_2018_instruction: |-
        Create a new function to
        collect all the nectar and honey while there is a path ahead.
      courseF_bee_functions_challenge2_instruction: |-
        Use everything you have learned
        to complete this puzzle!
      courseF_bee_functions_challenge2_2018_instruction: |-
        Use everything you have
        learned to complete this puzzle!
      courseF_bee_functions_challenge2_recursion_instruction: |-
        Collect all the nectar
        or make all of the honey!
      courseF_bee_fwp2_instruction: 將這些程式變成一個函式，接著呼叫這個函式來檢查是否有花蜜。
      courseF_bee_fwp2_2018_instruction: |-
        Pull this code into a function, then call
        the function to check this row for nectar.
      courseF_bee_fwp3_instruction: 讓我們來看看這個函式是否有辦法很容易的收集到三列的花蜜。
      courseF_bee_fwp3_2018_instruction: 讓我們來看看這個函式是否有辦法很容易的收集到三列的花蜜。
      courseF_bee_fwp4_instruction: 添加一個 length（長度）參數到函式裡，這樣一來當橫列長度不一樣時，它也一樣有用。
      courseF_bee_fwp4_2018_instruction: |-
        Add a `length` parameter to the function
        so that it will still work when the row is a different length.
      courseF_bee_fwp5_instruction: 使用這個函式來收集花蜜。
      courseF_bee_fwp5_2018_instruction: 使用這個函式來收集花蜜。
      courseF_bee_fwp6_instruction: 為這個關卡建立一個簡短有力的解法。
      courseF_bee_fwp6_2018_instruction: |-
        Build a short and sweet solution to this
        puzzle.
      courseF_bee_fwp7_instruction: "**挑戰：**修改你的函式，讓你的函式也可以釀造蜂蜜。"
      courseF_bee_fwp7_2018_instruction: |-
        **Challenge:** Modify your function to
        make honey as well.
      courseF_bee_fwp8_instruction: 使用你的新函式以畫出這個螺旋圖形。
      courseF_bee_fwp8_2018_instruction: 使用你的新函式以畫出這個螺旋圖形。
      courseF_bee_fwp9_instruction: 使用你的新函式以完成這個關卡。
      courseF_bee_fwp9_predict1_instruction: |-
        Use your new function to solve this
        puzzle.
      courseF_bee_fwp9_predict1_2018_instruction: |-
        Use your new function to solve
        this puzzle.
      courseF_bee_fwp_challenge1_instruction: |-
        Use one `for loop` in a function with
        a `length` parameter to collect all of the corn.
      courseF_bee_fwp_challenge1_2018_instruction: |-
        Use one `for loop` in a function
        with a `length` parameter to collect all of the corn.
      courseF_bee_fwp_challenge2_instruction: "Use one `for loop` in a function with\na
        `length` parameter to collect all of the vegetables in each row. "
      courseF_bee_fwp_challenge2_2018_instruction: "Use one `for loop` in a function\nwith
        a `length` parameter to collect all of the vegetables in each row. "
      courseF_farmer_ramp11_instruction: 這個關卡用到了巢狀迴圈，想想看，要怎麼完成呢？
      courseF_farmer_ramp11_2018_instruction: 這個關卡用到了巢狀迴圈，想想看，要怎麼完成呢？
      courseF_maze_predict1_instruction: |-
        This code includes a new block. What do
        you think would happen if you press the "Run" block?
      courseF_maze_ramp13_instruction: |-
        Time for another Angry Birds puzzle to pull
        it all together!
      courseF_maze_ramp15_instruction: |-
        Use what you've learned to get the bird
        to the pig!
      courseF_maze_ramp4_instruction: 小心 TNT 炸藥，不然羽毛會被炸飛！
      courseF_maze_ramp4_2018_instruction: 小心 TNT 炸藥，不然羽毛會被炸飛！
      courseF_maze_ramp5_instruction: 小心 TNT 炸藥。
      courseF_maze_ramp5_2018_instruction: 小心 TNT 炸藥。
      courseF_maze_ramp6_instruction: "「保持冷靜，幫我找到那隻壞豬豬。否則我真的會變成憤怒鳥！」"
      courseF_maze_ramp6_2018_instruction: "「保持冷靜，幫我找到那隻壞豬豬。否則我真的會變成憤怒鳥！」"
      courseF_maze_ramp7_instruction: "**挑戰：** 讓鳥抓到這隻豬！"
      courseF_playlab_embed_vars_instruction: |-
        Answer Pegleg the Pirate's questions.
        What happens if you enter the codename "password"? What about some other
        code name?
      courseF_playlab_variables0_instruction: |-
        This is Pirate Pegleg.  He's awfully
        hard to understand these days!
      courseF_playlab_variables1_instruction: |-
        This is Pirate Pegleg.  He's awfully
        hard to understand these days!
      courseF_playlab_variables1a_instruction: |-
        Variables can be used to store text
        that you want to use later.  Have Kiki, the soccer player,  scream "Goal!"
        by assigning that text to the `shout` variable.
      courseF_playlab_variables1a_2018_instruction: |-
        Variables can be used to store
        text that you want to use later.  Have Kiki, the soccer player,  scream "Goal!"
        by assigning that text to the `shout` variable.
      courseF_playlab_variables2_instruction: |
        Now, decode Pirate Pegleg's speech
        by changing the value of the variables in just two places! \r
      courseF_playlab_variables2a_instruction: |
        Now, decode Pirate Pegleg's speech
        by changing the value of the variables in just two places! \r
      courseF_playlab_variables2b RYAN CLONE_instruction: |-
        Insert the variable `color`
        into the middle of a sentence by putting it into the empty slot in the `join`
        block.
      courseF_playlab_variables2b_instruction: |-
        Insert the variable `color` into
        the middle of a sentence by putting it into the empty slot in the `join` block.
      courseF_playlab_variables2b_2018_instruction: |-
        Insert the variable `color`
        into the middle of a sentence by putting it into the empty slot in the `join`
        block.
      courseF_playlab_variables3_instruction: |-
        The `ask` block will automatically
        store whatever the user answers into the variable of your choice.
      courseF_playlab_variables3b_instruction: "Help Kiki have a conversation with\nBrian
        by using the variable `age` in all of the places where age `12` should\nbe
        used. "
      courseF_playlab_variables3bEdit_instruction: "Help Kiki have a conversation\nwith
        Brian by using the variable `A1` in all of the places where age `12`\nshould
        be used. "
      courseF_playlab_variables3b_josh_instruction: "Help Kiki have a conversation\nwith
        Brian by using the variable `age` in all of the places where age `12`\nshould
        be used. "
      courseF_playlab_variables3b_josh_2018_instruction: "Help Kiki have a conversation\nwith
        Brian by using the variable `age` in all of the places where age `12`\nshould
        be used. "
      courseF_playlab_variables4_instruction: |-
        Can you find the correct variable
        in the toolbox to fill in the slot?
      courseF_playlab_variables4b_instruction: |-
        Put the variables in the correct
        places to create this conversation.
      courseF_playlab_variables4b_2018_instruction: |-
        Put the variables in the correct
        places to create this conversation.
      courseF_playlab_variables5_instruction: |-
        Can you find the correct variable
        in the toolbox to fill in the slot?
      courseF_playlab_variables5b_instruction: |-
        Put all of the variables in the correct
        place so that Pegleg's story makes sense.
      courseF_playlab_variables5c RYAN Copy_instruction: |-
        Let's combine the `ask`
        block with an `if/else` statement to make a game!
      courseF_playlab_variables5c_instruction: |-
        Let's combine the `ask` block with
        an `if/else` statement to have some fun!
      courseF_playlab_variables5c_2018_instruction: |-
        Let's combine the `ask` block
        with an `if/else` statement to have some fun!
      courseF_playlab_variables6b_instruction: |-
        Join the variables together to make
        a fun story that takes more than one speech bubble to tell.
      courseF_playlab_variables6c_instruction: |-
        In the rest of this stage, we're
        going to build a game that you control!
      courseF_playlab_variables6c_2018_instruction: |-
        In the rest of this stage, we're
        going to build a game that you control!
      courseF_playlab_variables7b_instruction: |-
        Create some questions and weave the
        answers together into your very own story.
      courseF_playlab_variables7b_2018_instruction: |-
        Create some questions and weave
        the answers together into your very own story.
      courseF_playlab_variables7c_instruction: |-
        Make the game do something by asking
        the user to guess a color.
      courseF_playlab_variables7c_2018_instruction: |-
        Make the game do something by
        asking the user to guess a color.
      courseF_playlab_variables8b_instruction: |-
        Use what you've learned to create
        an improv scene between the actors.
      courseF_playlab_variables8c_instruction: |-
        Use the variables to make the game
        more personal.
      courseF_playlab_variables8c_2018_instruction: |-
        Use the variables to make the
        game more personal.
      courseF_playlab_variables_challenge1_instruction: "Use these blocks to make\nthe
        actors share a knock-knock joke. "
      courseF_playlab_variables_challenge1_2018_instruction: "Use these blocks to\nmake
        the actors share a knock-knock joke. "
      courseF_playlab_variables_challenge2_instruction: |-
        This game will use variables
        to keep track of points.  Tag Cat to get 2 points. Tag Penguin to get 3 points.  When
        Cat and Penguin touch, take points away. Get exactly 10 points to win!
      courseF_playlab_variables_challenge2_2018_instruction: |-
        This game will use
        variables to keep track of points.  Tag Cat to get 2 points. Tag Penguin to
        get 3 points.  When Cat and Penguin touch, take points away. Get exactly 10
        points to win!
      courseF_playlab_variables_challenge3_instruction: |-
        Can you figure out how this
        "Fortune Teller" app works? Click `MORE` to see your challenges.
      courseF_video_createFunctions_instruction: |-
        We don't have a video for creating
        functions, yet. This is a placeholder.
      courseF_video_createFunctions_2018_instruction: |-
        We don't have a video for
        creating functions, yet. This is a placeholder.
      course_playlab_variables1_instruction: |-
        This is Pirate Pegleg.  He's awfully
        hard to understand these days!
      course_playlab_variables2_instruction: |
        Now, decode Pirate Pegleg's speech
        by changing the value of the variables in just two places! \r
      course_playlab_variables3_instruction: |
        Now, decode Pirate Pegleg's speech
        by changing the value of the variables in just two places! \r
      coursea_maze_ramp1_2018_instruction: |-
        For this puzzle, snap the blocks together
        and click "Run"!
      coursef_explore_CYOA_Witch_instruction: |-
        You can do whatever you want in play
        lab! Here's an example of choose your own adventure story in play lab.
      coursef_explore_playlab2_instruction: |-
        You can do whatever you want in play
        lab! Here's an example of story in play lab.
      coursef_explore_playlab_cat_game_instruction: |-
        You can do whatever you want
        in play lab! Here's an example of game you can make.
      coursef_maze_ramp3_instruction: 這裡有個多餘的積木害得鳥撞牆，找到它，然後把它拖回工具箱以消除它。
      coursef_maze_ramp3_2018_instruction: |-
        There is one extra block that is going
        to cause the bird to crash. Throw it away by dragging it back to the toolbox.
      drawings!_instruction: |-
        Draw the equilateral triangle - all the sides are the
        same!
      eventsIntro_instruction: Need a better playlab/events combo
      flappy_1_instruction: 添加一個積木到「當點擊時」積木下，然後點擊「運行」。點擊或輕觸螢幕，讓像素鳥移動至目標。
      flappy_11_instruction: 創造你自己的像素鳥遊戲。你可以改變所有看的到的東西和所有規則，甚至是重力。當你完成時，點擊完成，讓你的朋友可以在他們手機上體驗你做的遊戲。
      flappy_11_2018_instruction: |-
        Create your own Flappy game. You can change all
        the visuals and all the rules, even the gravity. When you're done, click
        Finish to let friends try your game on their phones.
      flappy_1_2018_instruction: |-
        Attach a block to the "when click" block, then
        press "Run". Click or tap the screen to move Flappy to the target.
      flappy_2_instruction: 現在我們已經添加了一些地面。附加一個積木到「當碰到地面時」積木，當像素鳥撞上時你要程式來將「遊戲結束」。
      flappy_2_2018_instruction: |-
        Now we've added some ground.  Attach a block to
        the "when hit the ground" block.  Your code needs to 'END GAME' when Flappy
        crashes.
      flappy_3_instruction: 當你的遊戲開始時，「當運行時」積木能讓你運行程式。試著設定速度等級並飛到目的地。
      flappy_3_2018_instruction: |-
        The "when run" block allows you to run code when
        your game starts.  Try setting the level speed and flapping to the target.
      flappy_4_instruction: 像素鳥會穿過障礙物，除非你寫程式讓它停下來。添加一個積木到「當碰到障礙物時」積木裡，你必須在像素鳥在第一次撞到水管時「結束遊戲」。
      flappy_4_2018_instruction: |-
        Flappy will fly through obstacles unless you write
        code to make him crash. Attach a block to the "when hit an obstacle" block.
        Your code needs to 'END GAME' when Flappy crashes into the first set of
        pipes.
      flappy_5_instruction: 讓我們添加一個記分板，在像素鳥通過障礙時可以加分。把「得分」積木放到「當通過障礙時」積木下，這樣的話，當像素鳥飛過水管障礙時就可以獲得一分。
      flappy_5_2018_instruction: |-
        Let's add a scoreboard, and count points when
        Flappy makes it past obstacles. Add to the "when pass an obstacle" block,
        and then score a point by flying Flappy through the first set of pipes.
      flappy_6_instruction: 看看你能不能讓像素鳥在拍動更小或更大的數值時也能獲得分數。
      flappy_6_2018_instruction: |-
        See if you can still score a point after making
        Flappy flap either a smaller or larger amount.
      flappy_7_instruction: 接下來，試著附加另一個積木到「當運行時」積木的下方，讓場景改變。
      flappy_7_2018_instruction: |-
        Next, try changing the scene by attaching another
        block to the "when run" block.
      flappy_8_instruction: 你可以隨時設置視覺效果，不是只有遊戲開始時才可以。試著在其他事件發生時將場景設為隨機，比方說，當通過障礙物時。
      flappy_8_2018_instruction: |-
        You can set visuals anytime, not just when the
        game starts. Try setting a RANDOM scene when other events happen, for example,
        when passing an obstacle.
      flappy_9_instruction: 要把東西混在一起囉！當撞到一個障礙物時，不要結束遊戲，改成把遊戲分數歸零。
      flappy_9_2018_instruction: 要把東西混在一起囉！當撞到一個障礙物時，不要結束遊戲，改成把遊戲分數歸零。
      frozen circle function in circle_instruction: 現在我們來建立 20 個互有重疊的圓，在每個圓之後轉向 18
        度。
      frozen circle function with parameter_instruction: 這裡有一個「建立一個圓形」的程式積木，可以畫出不同大小的圓。您可以用這個來建立一個大小為
        5 的小圓，跟一個大小為 10 的較大的圓嗎？
      frozen circle function_instruction: 使用新的「建立一個圓形」積木讓我建立 10 個相互重疊的圓形。不要忘了在每次畫一個圓之後向前跳。
      frozen circle_instruction: 圓是一個特殊的形狀。您能想到中間的問號應該要選擇哪一個數字，才能畫出一個圓嗎？
      frozen cross rotate dense_instruction: 現在我們來重複 90 次！要重複 90 次的話，每次要幾度才能轉到 360
        度呢？提示：這是個非常小的數字。
      frozen cross rotate_instruction: 現在試著重複 10 次吧。你覺得每次畫出線之後，需要轉向幾度呢？
      frozen cross_instruction: 將這些指令放入「重複」積木裡來畫出一個加號。注意到了嗎？艾莎可以向後移動了。
      frozen diamond mini snowflake_instruction: 你知道每個雪花的形狀都不同嗎？讓我們用另一個「重複」積木創造一個新的雪花，它是由
        4 個重複的平行四邊形所組成，每畫完一個平行四邊形就向右轉 90 度。
      frozen diamond snowflake_instruction: 現在，我們用「重複」的程式積木來把平行四邊形重複 10 次，每次都向右轉 36
        度試試看，看看出現一片怎麼樣的雪花。
      frozen diamond_instruction: 將這些程式放到「重複」積木裡來畫出平行四邊形，它就像一個長方形，但角度不同。我們要畫的是有 60
        度和 120 度角的四邊形，而長方形的所有角度都是 90 度。
      frozen freeplay_instruction: 您已經變成一個專業的藝術家囉！開始打造一個冬季仙境吧。
      frozen line_instruction: 嗨！我是艾倫戴爾的艾莎女王。請幫幫我畫出一條線。
      frozen perpendicular_instruction: 現在看看我們能不能畫出 2 條線，然後讓 2 條線成 90 度。除了「移動-向前」積木外，你還需要用到「轉向-右方」或「轉向-左方」的積木喔。
      frozen snowflake branch_instruction: 用用看「建立雪花分支」積木，建立 3 個分支，讓它一開始像個雪花。
      frozen snowflake full_instruction: 現在我們來重複它 8 次以製作出美麗的雪花！
      frozen snowflower_instruction: 精細複雜的雪花樣式其實可以用非常簡單的形狀來產生。您可以畫重複五個大小為 5 的圓，以及五個大小為
        10 個圓嗎？
      frozen square iterative_instruction: 看來我們已經畫出了正方形的一半了！來，我們一起把 4 條線組合起來，變成一個正方形吧！
      frozen square loop 3x_instruction: 這次我們來建立 3 個正方形吧！每個正方形完成後，記得要轉 120 度，再畫下一個正方形。
      frozen square loop_instruction: 嗨，我是艾倫戴爾的安娜公主！讓我們用「循環」積木畫個正方形，這樣一來我們就可以用較少的積木完成。你覺得要「循環」幾次（???）才能畫出一個正方形呢？
      frozen square snowflake_instruction: 你可以用「重複」積木來畫 10 次正方形，每次轉 36 度嗎？這樣可以繪製出一個雪花喔！
      grade1_adventurer_loops1_instruction: Four piles of gold!  Collect all four.
      grade1_adventurer_loops10_instruction: |-
        Help me get all of the gold from this
        cave.
      grade1_adventurer_loops2_instruction: |-
        How can Laurel collect all five piles
        of gold using only one `E -->` block?
      grade1_adventurer_loops3_instruction: |-
        Can you fix Laurel's path to get all
        of this gold?
      grade1_adventurer_loops4_instruction: "Add to the code from the last puzzle\nto
        get all of the gold. "
      grade1_adventurer_loops5_instruction: |-
        What should you add to this code to
        get all of the gold?
      grade1_adventurer_loops6_instruction: Write the code to get all of this gold.
      grade1_adventurer_loops7_challenge_instruction: "**挑戰：**階梯上到處都是黃金！寫個程式幫我得到全部的黃金。"
      grade1_adventurer_loops8_challenge_instruction: |-
        Challenge: Try this staircase
        now! It has an extra spike at the end you'll have to climb.
      grade1_adventurer_loops9_instruction: |-
        Help me get the gold from this deep
        valley.
      grade1_adventurer_loopsFP_instruction: |-
        Eureka!  Collect as much gold as you
        can!
      grade1_adventurer_loopsPre_instruction: |-
        This is Laurel the Adventurer!  Can
        you move her around and get gold?
      grade1_artist_loops1_instruction: |-
        The Artist is trying to draw a line six
        times, but can't get it right.  Can you help?
      grade1_artist_loops2_instruction: |-
        Help the artist draw a line 7 times to make
        a garden wall.
      grade1_artist_loops3_instruction: "Now we need to get the soil ready to plant.\nFind
        the bugs in the code and help the artist prepare the ground. "
      grade1_artist_loops4_instruction: |-
        Time to fix the stairs!  Repeat this pattern
        five times so the artist can reach the top of the bushes.
      grade1_artist_loops5_instruction: |-
        Behind the bushes there is a beautiful vine
        full of flowers.  Can you climb the vine and see where it goes?
      grade1_artist_loops6_instruction: "**挑戰：**有個隱藏的花園！讓我們隨便逛逛。"
      grade1_artist_loops7_instruction: |-
        The flowers down here are so pretty.  Let's
        take a closer look.
      grade1_artist_loops7a_instruction: "**挑戰：**可愛極了！讓我們在花園裡散個步。"
      grade1_artist_loops7b_instruction: |-
        Time to head home. Can you fix this ladder
        to help the artist get down?
      grade1_artist_loops8_instruction: |-
        Let's take the short way home, over the
        pond. Can you help the artist stay on the stones?
      grade1_artist_loops9_instruction: I still need a story for this puzzle
      grade1_artist_loopsFP_instruction: |-
        Use what you have learned to draw a picture
        of what you think the artist saw when he got home.
      grade1_maze_sequence1_instruction: 有個臭蟲（bug，程式中有錯誤的意思）！修正這個程式讓我到豬豬那兒。
      grade1_maze_sequence10_instruction: Move me around the TNT to get to the pig.
      grade1_maze_sequence2_instruction: 修正這個程式，使我能到達豬的位置！
      grade1_maze_sequence3_instruction: 添加 2 個積木讓鳥移動到豬那裡。
      grade1_maze_sequence4_instruction: Now try this puzzle from the start!
      grade1_maze_sequence5_instruction: |-
        Move one way, then another to get me to
        the pig!
      grade1_maze_sequence6_instruction: |-
        Figure out what is missing and then add
        blocks to get me to the pig!
      grade1_maze_sequence7_instruction: |-
        Your turn!  What do you need to do to get
        the bird to the pig?
      grade1_maze_sequence8_instruction: |-
        Debug this level by adding blocks to get
        me to the pig!
      grade1_maze_sequence9_instruction: 'Go around the TNT to get me to the pig!

'
      grade1_maze_sequenceA_instruction: |-
        Challenge: Move me around the TNT to get
        to the pig.
      grade1_maze_sequenceB_instruction: Fix the bugs to get the bird to the pig.
      grade1_maze_sequenceC_instruction: It's all you!  Get the bird to the pig.
      grade1_maze_sequenceD_instruction: 'It''s a pig party!  Get those pigs! '
      grade1_playlab_events1_instruction: |-
        This game is called "Play Lab".  See
        if you can figure out what each block does.
      grade1_playlab_events1a_instruction: |-
        Make your robot say "Hello!" when the
        button is clicked.
      grade1_playlab_events2_instruction: |-
        This program makes Robin fly.  Can you
        get her to vanish when you click her?
      grade1_playlab_events2a_instruction: |-
        Edit the code so that when the second
        bird is clicked, your program plays a sound!
      grade1_playlab_events3_instruction: |
        This program makes Robin fly.  Can you
        make the robot jump when you press the up button?\r
      grade1_playlab_events3a_instruction: |-
        When the third bird is clicked, the background
        should change to a city. Can you add code to make this happen?
      grade1_playlab_events4_instruction: 添加一個積木，讓羅賓在撞到機器人時消失。
      grade1_playlab_events4a_instruction: |-
        Add code to make something happen when
        the fourth bird is clicked. Be creative!
      grade1_playlab_events5_instruction: 添加一個積木到「當運行時」事件，讓龍在遊戲開始時就在天空上飛來飛去。
      grade1_playlab_events5a_instruction: 關於我的機器人專案！寫下程式，在點擊每隻鳥時分別顯示你的機器人特色。
      grade1_playlab_events6_instruction: 添加一個積木到「當角色1被點擊時」事件，讓龍能返回到畫面的中間。
      grade1_playlab_events7_instruction: 添加一個積木，讓你在點擊「向左按鈕」時，騎士就朝龍那兒走去。
      grade1_playlab_events8_instruction: 添加一個積木，讓騎士與龍碰撞時，播放一個音效。
      grade1_playlab_events9 RYAN COPY_instruction: |-
        Now, have Robin wait a second,
        then come back after she vanishes.
      grade1_playlab_events9_instruction: |-
        Now, add a block to keep score each time
        the knight hits the dragon.
      grade1_playlab_eventsFP_instruction: |-
        Use your imagination. What can you do
        to make this game more fun?
      grade1_sequence_pre_instruction: |-
        Play with these blocks to see what they make
        the bird do!
      grade1_video_frustrationRainbow_instruction: |-
        This video describes the rainbow
        of frustration and introduces persistence.
      grade2_CaringForNewPet_0_instruction: |-
        For this puzzle, drag all of the blocks
        together and click "Run" to watch it go!
      grade2_CaringForNewPet_1_instruction: |-
        Drag an extra `move forward` block out
        of the toolbox to finish your code.
      grade2_CaringForNewPet_10_instruction: 讓我抓到那隻豬！
      grade2_CaringForNewPet_11_instruction: "「保持冷靜，幫我找到那隻壞豬豬。」"
      grade2_CaringForNewPet_2_instruction: |-
        「這隻豬真的把我惹毛了！」\r
        \r
        有個積木會讓鳥崩潰，把它移除掉（拖曳回工具箱」。
      grade2_CaringForNewPet_2courseC_maze_programming3_instruction: |-
        There is one
        extra block that is going to cause the bird to crash. Throw it away by dragging
        it back to the toolbox.
      grade2_CaringForNewPet_3_instruction: 沿著這條路帶我去找那隻笨豬，記得躲開 TNT 炸藥，不然會見到我的羽毛滿天飛！
      grade2_CaringForNewPet_3D_instruction: "「沿著這條路讓我抓到豬！」"
      grade2_CaringForNewPet_4_instruction: "「保持冷靜，幫我找到那隻壞豬豬。否則我真的會變成憤怒鳥！」"
      grade2_CaringForNewPet_5_instruction: 讓我抓到那隻豬！
      grade2_CaringForNewPet_6_instruction: |-
        Challenge: Guide me to the green evilness!
        (Watch out for TNT)
      grade2_CaringForNewPet_7D_instruction: |-
        Challenge: This code has a lot of bugs.
        You'll need to remove blocks and add blocks.
      grade2_MakeDogTag_1_instruction: |-
        Drag blocks onto the screen to have the artist
        draw over the grey lines in the picture. (Each line is 100 pixels long)
      grade2_MakeDogTag_10_instruction: 現在，畫你喜歡的任何東西！
      grade2_MakeDogTag_2_instruction: |-
        This spaceship needs a window!\r
        \r
        Each
        side of the inner square is 100 pixels and all of the angles are 90 degrees.
      grade2_MakeDogTag_3_instruction: |-
        「喔，不好了！Starla 的外星寵物飛走了！
        讓我們幫助她！」\r
        \r
        完成 Starla 的火箭，這樣她就可以追到她的寵物了。
      grade2_MakeDogTag_4_instruction: |-
        這棟房子需要屋頂！請畫出三角形。
        提示：三邊都是同樣的長度。
      grade2_MakeDogTag_5_instruction: |-
        「現在是貝兒標記！」\r
        \r
        利用長度 200 像素的邊，畫出鑽石來。
      grade2_MakeDogTag_6_instruction: 自由玩！畫你喜歡的任何東西
      grade2_MakeDogTag_7_instruction: |-
        One more tag.  This is a triangle for Pi.\r
        (Each
        side is 150 pixels)
      grade2_MakeDogTag_8_instruction: 現在我們用迴圈來把一堆的 V 連接在一起。
      grade2_MakeDogTag_9_instruction: |-
        Rebuild the code from the last puzzle, but
        this time, add a left turn of 30 degrees inside the loop. Now, repeat it 24
        times instead of 8.
      grade2_MakeDogTag_BFP_instruction: |-
        「嗨，我是個藝術家。你可以寫個程式，讓我繪製任何東西。」\r
        \r
        好好發揮在工具箱裡的所有程式積木，看看它們能做到什麼！
      grade2_MakeDogTag_FP_instruction: |-
        Freeplay: What shape will you make the tag
        for your pet?
      grade2_PuppyLoops_1_instruction: |-
        Can you get me to the pig using 5 of the
        same kind of blocks?
      grade2_PuppyLoops_10_instruction: |-
        我的老師告訴我們做事要有始有終！\r
        \r
        幫我完成我的風車，你可以找到錯誤的地方嗎？
      grade2_PuppyLoops_2_instruction: |-
        Can you get to the pig by creating a loop
        that uses only one `move forward` block inside of a `repeat`?
      grade2_PuppyLoops_3_instruction: |-
        Get me to the pig! Solve this puzzle by creating
        a loop!
      grade2_PuppyLoops_4_instruction: |-
        In this puzzle, two `repeat` loops will help
        you get to the pig with the fewest number of blocks!
      grade2_PuppyLoops_5_instruction: 想想看，如何用最快的方式讓我可以抓到豬？
      grade2_PuppyLoops_6_instruction: |-
        Loops even work with more than one block
        inside!  Can you loop this sequence to get me to the pig?
      grade2_PuppyLoops_7_instruction: 用你學到的，讓我吃到向日葵！
      grade2_PuppyLoops_8_instruction: |-
        畫出貓鬍鬚的程式不正確。
        \r
        \r
        修正這個程式來給貓畫上一樣長的鬍鬚。
      grade2_PuppyLoops_9_instruction: |-
        看起來Ｃ被畫反了\r
        \r
        你可以將它改正嗎？
      grade2_collector_10_instruction: |-
        You're almost done! Collect as many pieces
        of treasure as you can to finish the stage!
      grade2_collector_10_2018_instruction: |-
        You're almost done! Collect as many
        pieces of treasure as you can to finish the stage!
      grade2_collector_2_instruction: |-
        Move Laurel to the gold, then use `collect`
        to pick it up.
      grade2_collector_3_instruction: |-
        Put these blocks in order to collect all of
        the gold and solve the puzzle.
      grade2_collector_4_instruction: |-
        Sequence matters! The blocks you need are
        already in the workspace, but not connected.  Order these blocks to solve
        the puzzle.
      grade2_collector_5_instruction: |-
        These blocks are in the wrong order. Can you
        fix them?
      grade2_collector_6_instruction: |-
        "Help me collect each gold coin!"\r
        \r
        These
        blocks are in the wrong order.
      grade2_collector_7_instruction: |-
        Challenge puzzle! Use blocks from the toolbox
        to collect all of the treasure.
      grade2_collector_8_instruction: "「就是這樣！繼續幫助我收集所有的硬幣。」"
      grade2_collector_9_instruction: "*「讓我們獲得所有的硬幣！」*"
      grade2_collector_9a_instruction: "**挑戰：**拿到所有的硬幣。"
      grade2_collector_A_instruction: Help Laurel collect all of the treasure.
      grade2_collector_A_2018_instruction: Help Laurel collect all of the treasure.
      grade2_collector_pre1_instruction: |-
        「嗨，我是 Laurel。今天我要在狗狗公園尋找寶藏！」\r
        \r
        利用這些程式積木，看看你能不能幫助 Laurel 收集到一些黃金。
      grade2_maze_debuggingFP_instruction: "「現在，幫我偷襲這隻豬，不管用什麼辦法，你想得到的都行！」"
      grade2_maze_debuggingPre_instruction: |-
        Play with these blocks to see what they
        make the bird do!
      grade2_maze_intro10_instruction: Solve this puzzle.
      grade2_maze_intro2_instruction: |-
        Welcome to Code Studio! Here you will learn
        to use blocks to build programs. Press `Run` to run a program now!
      grade2_maze_intro3_instruction: |-
        The `workspace` is where you will create all
        of your programs. Can you guess what this program does? Press the “Run” button
        to find out.
      grade2_maze_intro4_instruction: |-
        Drag a block from the toolbox into the workspace.
        Connect it to the other blocks.
      grade2_maze_intro6_instruction: "That’s it!  Now we’re ready to try to solve\na
        few puzzles. "
      grade2_maze_intro7_instruction: This time, try something a bit more challenging.
      grade2_maze_intro8_instruction: |-
        This is a challenge puzzle.  It is meant to
        be hard and will probably take you a couple of tries to solve.  If you don’t
        solve it after several tries, don’t worry!  It will be in the Play Zone at
        the end of the stage and you can try it again when you’ve had more practice.
      grade2_maze_intro9_instruction: Solve this puzzle.
      grade2_playlab_project_1_instruction: 現在，寫一個程式來控制企鵝，用向上/下/左/右鍵來到達所有目標！
      grade2_playlab_project_2_instruction: |-
        The `repeat forever` block allows you
        to run code over and over forever. Can you attach blocks to move Chomp the
        Dino (actor 2) up and down forever?
      grade2_playlab_project_3_instruction: |-
        Can you have Waddles (actor 1) say "Ouch!"
        and play a "hit" sound if he runs into Chomp? \r
        \r
        When you're done,
        play the game to make that happen.
      grade2_playlab_project_4_instruction: |-
        添加一個積木，讓企鵝撞上章魚（角色3）時得到一分。\r
        運行遊戲並用方向鍵移動企鵝，直到你得分為止！
      grade2_playlab_project_5_instruction: |-
        Add blocks to the `when run` event to
        change the background and the speed of Waddles.\r
        \r
        Play the game and move
        Waddles with the arrows until you score.
      grade2_playlab_project_6_instruction: |-
        Create your own story. When you're
        done, click "Finish" to share with friends.
      grade2_puppy_loops2_instruction: |-
        Can you get to the pig by creating a loop
        that uses only one `move forward` block inside of a `repeat`?
      grade2_puppy_loops3_instruction: |-
        「讓我抓到這隻豬！」\r
        \r
        利用建立迴圈的方式完成這個關卡！
      grade2_puppy_loops4_instruction: |-
        In this puzzle, two `repeat` loops will help
        you get to the pig with the fewest number of blocks!
      grade2_puppy_loops5_instruction: "「愈快抓到豬愈好！」"
      grade2_puppy_loops6_instruction: |-
        「這隻豬真的把我惹毛了！」\r
        \r
        迴圈
        事件裡可以執行一個以上的程式積木！你可以調整一下迴圈裡指令的順序嗎？
      grade2_puppy_loops7_instruction: |-
        「讓我抓到這隻豬！」\r
        \r
        利用你在其他關卡學到的技巧！
      grade3_AboutMyRobot_1_instruction: |-
        Make your robot say "Hello!" when the
        button is clicked.
      grade3_AboutMyRobot_2_instruction: |-
        Edit the code so that when the second bird
        is clicked, your program plays a sound!
      grade3_AboutMyRobot_3_instruction: |-
        When the third bird is clicked, the background
        should change to a city. Can you add code to make this happen?
      grade3_AboutMyRobot_4_instruction: |-
        Add code to make something happen when
        the fourth bird is clicked. Be creative!
      grade3_AboutMyRobot_5_instruction: 關於我的機器人專案！寫下程式，在點擊每隻鳥時分別顯示你的機器人特色。
      grade3_AboutMyRobot_TeacherIDo_instruction: |-
        Run this puzzle and click on the
        robot to see what happens!
      grade3_ConditionalsElse_1_instruction: 這雲遮住了我的視線！檢查看看雲的下面是不是有花朵，只有在有花朵的時候才採集花蜜。注意，它會變來變去的！
      grade3_ConditionalsElse_2_instruction: |-
        雲愈來愈多了！\r
        \r
        檢查每個雲，在你採集花蜜前看看是不是有花朵藏在裡頭。\r
        \r
        記住：
        雲底下藏的東西不見得一樣！
      grade3_ConditionalsElse_3_instruction: |-
        Now I just want to make honey. Some
        of these clouds might have honeycombs under them. Be sure to check each cloud!
      grade3_ConditionalsElse_4_instruction: 有時雲裡面有花朵，有時雲裡藏著蜂窩！使用「如果…否則」積木，如果是花朵就收集花蜜。否則，就釀造蜂蜜（因為它是蜂窩）。
      grade3_ConditionalsElse_5_instruction: |-
        There will be either a flower or a
        honeycomb under each of those clouds!\r
        \r
        Use the `if/else` block to collect
        nectar if there is a flower.\r
        Otherwise, make honey (because there is a
        honeycomb).
      grade3_ConditionalsElse_6_instruction: |-
        I am not sure how much nectar this
        flower has, but I know it has either 1, 2, or 3 nectar. \r
        \r
        Combine the
        conditional blocks (`if` and/or `if/else`) to only get as much nectar as the
        flower has. \r
        \r
        Remember, the amount of nectar can change each time you
        run the puzzle!
      grade3_ConditionalsElse_7_instruction: |-
        這些花朵上可能有 3、2 或 1 個花蜜。
        \r
        \r
        完成 `check purple flower`（檢查紫花）這個函式，並使用它來收集花朵上的所有花蜜。
      grade3_ConditionalsElse_8_instruction: |-
        Write the function for `check flower
        make honey`. \r
        \r
        Your function should check if the purple flower has 3,
        2, or 1 nectar and get all of the nectar. \r
        Then, move forward and make
        honey.
      grade3_ConditionalsElse_9_instruction: |
        **評量：**雲朵中可能隱藏著帶有花蜜的花朵，或是可裝蜂蜜的蜂窩。\r
        \r
        完成這個「採到花蜜或釀成蜂蜜」的函式，然後調用它來收集花蜜或蜂蜜。\r
      grade3_ConditionalsElse_TeacherIDo_instruction: |-
        There will be either a flower
        or a honeycomb under each of those clouds!\r
        \r
        Use the `if/else` block
        to collect nectar if there is a flower.\r
        Otherwise, make honey (because
        there is a honeycomb).
      grade3_Conditionals_1 BAD_instruction: 使用一個迴圈來收集所有的花蜜。
      grade3_Conditionals_1_instruction: |-
        我是一隻蜜蜂！\r
        使用最少的積木幫我採集到花朵中的所有花蜜。
      grade3_Conditionals_10 BAD_instruction: |-
        採集每一排花朵中的花蜜！
        使用巢狀迴圈。
      grade3_Conditionals_10_instruction: |-
        這裡也太多活要做了吧！\r
        \r
        使用你所學到的來收集所有花蜜及蜂蜜。
      grade3_Conditionals_11 BAD_instruction: 評量：使用一個`當…`迴圈來採集這些花朵上的所有花蜜。
      grade3_Conditionals_11_instruction: |-
        我們把所有東西都放在一起吧！\r
        \r
        利用你學過的技能來幫我收集花蜜，用的積木愈少愈好。不要忘了在最後幫它們釀成蜂蜜。
      grade3_Conditionals_12_instruction: |-
        不陌生吧，這種樓梯模式的關卡。\r
        \r
        你可以只在有花蜜的花朵上採集嗎？用的積木愈少愈好。
      grade3_Conditionals_13_instruction: |-
        Assessment: Collect all of the nectar.
        Be careful not to try to collect nectar from a purple flower if it doesn't
        have any.
      grade3_Conditionals_2_instruction: "仔細收集花蜜！\\r\n\\r\n幫我收集花蜜及蜂蜜，用的積木愈少愈好。  "
      grade3_Conditionals_3_instruction: |-
        Be careful not to collect nectar from a
        purple flower if it doesn't have any. \r
        You must first check if the nectar
        is equal to 1 using the `if nectar` block.
      grade3_Conditionals_4_instruction: 用一個「如果」積木來檢查這朵花上面有沒有花蜜。
      grade3_Conditionals_5_instruction: 在有花蜜的花朵中採集花蜜。
      grade3_Conditionals_6_instruction: |-
        這塊地上有紅色和紫色的花朵。
        紅花上的花蜜數量很明確，但是紫花上的花蜜數量就不知道了。
        收集所有的花蜜吧。
      grade3_Conditionals_7_instruction: 收集每一朵花的花蜜。
      grade3_Conditionals_8_instruction: "我想知道那裡有些什麼！\\r\n\\r\n幫忙讓我在院子裡飛翔，並收集花朵中的花蜜。 "
      grade3_Conditionals_9_instruction: |-
        Help me find all of the nectar using as
        few blocks as possible!
      grade3_Conditionals_TeacherIDo_instruction: |-
        Check this flower with an "if"
        block to see if there is any nectar available.
      grade3_Debugging_1_instruction: 這些積木真是讓我一陣錯亂！修正錯誤（可能不只一個）來收集到所有的花蜜。
      grade3_Debugging_5_instruction: |-
        That flower looks tasty! \r
        \r
        Fix the error(s)
        to collect all of the nectar.  You can now use both run and step.
      grade3_Debugging_6_instruction: |-
        真是甜蜜的挑戰啊！\r
        \r
        修正錯誤（可能不只一個）來收集到所有的花蜜。
      grade3_Debugging_7_instruction: 修復錯誤（可能不只一個）以收集所有的花蜜與蜂蜜。
      grade3_Debugging_9_instruction: |-
        有點耐心！\r
        \r
        你需要修復程式裡的一些問題，才能夠收集所有的花蜜和蜂蜜。
      grade3_Debugging_TeacherIDo_instruction: |-
        These blocks are really bugging me.
        Fix the error(s) to collect all of the nectar and make all of the honey.
      grade3_Loops_1_instruction: "Can you help me collect the nectar from these\nflowers? "
      grade3_Loops_10_instruction: |-
        蜜蜂就是那麼忙！\r
        \r
        幫助蜜蜂收集所有的花蜜及蜂蜜，用的積木愈少愈好。
      grade3_Loops_11_instruction: |-
        這個圖形的路徑不同於其他的圖形。\r
        \r
        你能收集到花蜜嗎？用的積木愈少愈好。
      grade3_Loops_12_instruction: 你能用最快的方式，讓蜜蜂收集到所有的花蜜及蜂蜜嗎？
      grade3_Loops_2_instruction: 這一回，用一個迴圈來收集所有的花蜜。
      grade3_Loops_3_instruction: 使用一個`重複`迴圈來收集所有的花蜜。
      grade3_Loops_4_instruction: |-
        Now use the `repeat` block to collect all of the
        nectar and make all of the honey.
      grade3_Loops_5_instruction: 多麼美麗的一片花田啊！幫助蜜蜂到每朵花上參觀一下。你能在 7 個積木內完成嗎？
      grade3_Loops_6_instruction: |-
        在這關中，迴圈應該進行多少次？\r
        \r
        迴圈是你的朋友！用一些迴圈來減少積木使用數量，並完成這個關卡。
      grade3_Loops_7_instruction: |-
        那些花看起來真是香甜可口！\r
        \r
        從每個花朵上採集花蜜，用的積木愈少愈好。
      grade3_Loops_8_instruction: 使用最少的積木來收集所有花蜜及蜂蜜。
      grade3_Loops_9_instruction: 使用最少的積木，從每一朵花中採集花蜜，並在每一個蜂窩裡釀造蜂蜜。
      grade3_Loops_TeacherIDo_instruction: |-
        Those flowers look tasty!\r
        \r
        Collect
        nectar from each of the flowers using the fewest blocks possible.
      grade3_RunningFarm_1_instruction: |-
        Use conditionals to make sure that you pick
        all of the corn, but don't disturb the stalks where nothing is growing yet.
      grade3_RunningFarm_10_instruction: |-
        Collect all of the corn and lettuce, then
        pick the pumpkin.
      grade3_RunningFarm_11a_instruction: |-
        Collect all of the corn and lettuce, then
        pick the pumpkin.
      grade3_RunningFarm_2_instruction: |-
        Help the farmer collect both corn and lettuce
        from the field.
      grade3_RunningFarm_3_instruction: "*「玉米、生菜、南瓜！幫我收成它們。」*"
      grade3_RunningFarm_4_instruction: |-
        Help the farmer pick all of the lettuce
        in each cluster before moving on to the next bunch.
      grade3_RunningFarm_5_instruction: |-
        This field has clusters of corn, lettuce,
        and pumpkins all growing together.  Can you collect them all?
      grade3_RunningFarm_6_instruction: |-
        Can you figure out how to pick the pumpkin?  Make
        sure to collect all of the corn along the way!
      grade3_RunningFarm_7_instruction: "**挑戰：**收集所有的玉米和生菜，然後收成南瓜。"
      grade3_RunningFarm_8_instruction: |-
        Have wheat and potatoes planted randomly
        at various growth stages. Now we introduce multiple while loops (stacked)
        nested inside a loop. The two while loops in the solution represent different
        while loops (while there is potato and while there is wheat)
      grade3_RunningFarm_9_instruction: |-
        Add Weeds element. Weeds start out in random
        spots in the field and spread more and more rapidly as time goes on.. This
        puzzle is the culminating game-like puzzle. Students should have the event
        blocks (up, down, left, right, spacebar) available in the toolbox to use if
        they want. The entire field should be planted randomly with mostly wheat,
        potatoes, and a few weeds.
      grade3_RunningFarm_TeacherIDo_instruction: |-
        Teacher I Do: Show students how
        they can use loops and conditionals to plant and harvest 2 rows of crops.
      grade3_RunningFarm_TeacherIDo2_instruction: |-
        Teacher I Do: Show students how
        to use loops to harvest many crops.
      grade3_bee_Conditionals_new4_instruction: |-
        Now try checking all of these flowers
        with "if" blocks to see if there is any nectar available.
      grade3_bee_conditionals_new1a_instruction: |-
        Help the bee collect all of the
        nectar. \r
        \r
        You can only collect nectar from flowers, but you can check
        any space to see if there is a flower.
      grade3_bee_conditionals_new1b_instruction: |-
        Help the bee collect all of the
        nectar. You can only collect nectar from flowers, but you can check any space
        to see if there is a flower.
      grade3_bee_conditionals_new2_instruction: |-
        Collect all of the nectar using
        as few blocks as possible
      grade3_bee_conditionals_new2a_instruction: |-
        Get all of the nectar using as
        few blocks as possible.
      grade3_bee_conditionals_new2b_instruction: |-
        Collect all of the nectar. You
        can only collect nectar from flowers, but you can check any space to see if
        there is a flower.
      grade3_bee_conditionals_new3a_instruction: |-
        Collect all of the nectar or make
        all the honey. You can only collect nectar from flowers and make honey from
        honeycombs. Check any space to see if there is a flower or honeycomb.
      grade3_bee_conditionals_new3b_instruction: |-
        Collect all of the nectar and make
        all of the honey.
      grade3_bee_conditionals_new3c_instruction: |-
        Help the bee collect all of the
        nectar and make all of the honey! Hint: Try using one loop inside of another
        loop.
      grade3_bee_conditionals_quantum1_instruction: |-
        Check to see if there's a flower
        under the cloud. If there's a flower, get nectar.
      grade3_bee_conditionals_quantum2_instruction: 蜜蜂現在只想要花蜜。並非所有的物件都是花朵，所以檢查每朵雲的下面是否藏著一朵花。如果有，那麼你就可以採集花蜜。
      grade3_bee_conditionals_quantum3_instruction: |-
        Some of these clouds might have
        honeycombs under them.  Be sure to check if a honeycomb is hiding behind each
        cloud!
      grade3_bee_conditionals_quantum4_instruction: |-
        Use the `if/else` block to collect
        nectar at flowers and make honey at honeycomb.
      grade3_bee_conditionals_quantum5_instruction: |-
        Use the `if/else` block to collect
        nectar if there is a flower.\r
        Otherwise, make honey (because there is a
        honeycomb).
      grade3_maze_Loop1_instruction: '評量：只能用 5 個積木，把我帶到向日葵那兒。 '
      grade3_maze_loops1_instruction: Get the zombie to the sunflower.
      grade3_maze_loops2_instruction: 帶我到那朵向日葵的位置!
      grade3_maze_loops2a_instruction: |-
        Get the zombie to the sunflower using the
        fewest number of blocks possible.
      grade3_maze_loops3_instruction: 帶我到那朵向日葵的位置!
      grade3_maze_loops4_instruction: 帶我到那朵向日葵的位置!
      grade3_maze_loops5_instruction: 使用最少的積木帶我吃到向日葵！
      grade3_maze_nestedLoops1_instruction: |-
        Can you get me to the pig using 5 of
        the same kind of blocks?
      grade3_maze_nestedLoops2_instruction: |-
        Can you get to the pig by creating a
        loop that uses only one `move forward` block inside of a `repeat`?
      grade3_maze_nestedLoops3_instruction: |-
        Get me to the pig! You can only use
        one move forward block this time
      grade3_maze_nestedLoops4_instruction: |-
        In this puzzle, two `repeat` loops will
        help you get to the pig with the fewest number of blocks!
      grade3_playLab_buildGame_1_instruction: |-
        There is a new block in this lesson,
        the `random integer` block. It is used to choose a random number. Write a
        program where the robot says a random number between 1 and 100!
      grade3_playLab_buildGame_2_instruction: |-
        We have already created a random integer,
        "j", which is either 1 or 0. Now, we need to use it to decide whether our
        card is red or black. Add a second if statement to the code under `when run`
        to complete this code.
      grade3_playLab_buildGame_3_instruction: |-
        There are 13 different card values
        in a deck of cards, so we'll need to have 13 options. Under the empty `when
        run` block, add a line that sets the placeholder "i" to a random integer
        between 1 and 13.
      grade3_playLab_buildGame_4_instruction: |-
        In a deck of cards, a card with value
        1 isn't actually called a "1", there's a special name. Write an if statement
        that checks if the random number is a 1, then tell the computer that the value
        of that card is "Ace".
      grade3_playLab_buildGame_5_instruction: |-
        We can just call the cards from 2
        to 10 by their numbers, so add an if statement that checks whether the number
        generated is within those numbers, then sets the card value to the number
        generated.
      grade3_playLab_buildGame_6_instruction: |-
        There are three more cards with special
        names in the deck. Add to your code so that a card number 11 is called a "Jack",
        a 12 is a "Queen" and a 13 is a "King"
      grade3_playLab_buildGame_7_instruction: |-
        You already know what color your card
        is, but what suit is it? Add code to the conditional statement "if card is
        Red" to choose hearts or diamonds.
      grade3_playLab_buildGame_8_instruction: |-
        Add the second part of the code to
        choose a suit, copying what you made for a Red card.
      grade3_playLab_buildGame_final_instruction: |-
        Final stage for playlab conditionals
        level (could hide entire function so that students just work with point scoring)
      grade3_playLab_buildGame_final2_instruction: |-
        Here's all of your code to choose
        a card - try adding some other fun features!
      grade3_robotFarmer_ConditionalsIntro4_instruction: |-
        Help the farmer remove
        this entire pile using a `while` loop.
      grade3_robotFarmer_ConditionalsIntro_1_instruction: |-
        *「嗨，我是個農夫。我需要你幫我將農地整平，好讓我可以耕作！」*\r
        \r
        移到土堆那兒，使用「移除」積木來把土堆刪掉。
      grade3_robotFarmer_ConditionalsIntro_10_instruction: |-
        I'm working late, so
        it's dark out, and I can't tell how large the piles are. Now I don't have
        all the options I used to have on the while block. Move me along the field,
        and if there is a pile, remove it
      grade3_robotFarmer_ConditionalsIntro_10a_instruction: "Flatten all of these\npiles
        using as few blocks as possible. "
      grade3_robotFarmer_ConditionalsIntro_11_instruction: |-
        It's still dark outside.
        Move me along the field. If there is a pile, remove it, and if there is a
        hole, fill it in. Hint: use the dropdown menu of options on the "if" block.
      grade3_robotFarmer_ConditionalsIntro_11a_instruction: "Flatten all of these\npiles
        using as few blocks as possible. "
      grade3_robotFarmer_ConditionalsIntro_2_instruction: |-
        Next, move to the hole
        and fill it with six shovelfuls of dirt, using the `fill` block.
      grade3_robotFarmer_ConditionalsIntro_3_instruction: "*「移動到有污泥的土堆上，並告訴我該移除多少鏟的土，盡可能用最少的積木來完成。」*"
      grade3_robotFarmer_ConditionalsIntro_4_instruction: |-
        *「我不知道這堆土裡有多少污泥」*\r
        \r
        使用「當…時」迴圈，幫助農夫移除全部的土堆。
      grade3_robotFarmer_ConditionalsIntro_5_instruction: "Help me remove all of\nthis
        dirt. "
      grade3_robotFarmer_ConditionalsIntro_6_instruction: |-
        Remove all the piles of
        dirt, using as few blocks as possible. The new options in the dropdown menu
        on the "while" block tell me if I'm standing on a pile or a hole.
      grade3_robotFarmer_ConditionalsIntro_7_instruction: |-
        Look at all of those holes!  Each
        one needs a different amount of dirt.   \r
        \r
        You can use the `while` loop
        to easily fill them all!
      grade3_robotFarmer_ConditionalsIntro_8_instruction: |-
        Fill in the hole at the
        end of each of these paths.
      grade3_robotFarmer_ConditionalsIntro_9_instruction: "**挑戰：**填滿所有的洞，使用的積木愈少愈好。 "
      grade3_robotFarmer_ConditionalsIntro_TeacherIDo1_instruction: |-
        Help me fill
        in all these holes with 5 shovelfuls of dirt. Hint: you can put a "repeat"
        block inside the "while" block.
      grade3_robotFarmer_ConditionalsIntro_TeacherIDo2_instruction: |-
        I'm working
        late, so it's dark out, and I can't tell how large the piles are. Now I
        don't have all the options I used to have on the while block. Move me along
        the field, and if there is a pile, remove it
      grade4_arist_functions_star0_instruction: |-
        Have you drawn something like this
        star before? Practice making it one more time by adding a turn and a repeat
        block.
      grade4_arist_nested_loop_circles1_instruction: 評量：使用巢狀迴圈完成設計。
      grade4_arist_nested_loop_flags1_instruction: |-
        Loop the given code to create
        a windmill.
      grade4_arist_nested_loop_polygons1_instruction: |-
        Loop this design 10 times.
        \r
        \r
        How much do you have to turn each time you loop?
      grade4_arist_nested_loop_polygons2_instruction: "Loop this shape 6 times. \\r\n\\r\nHow\nmuch
        do you have to turn each time you loop? "
      grade4_arist_nested_loop_squares1_instruction: |-
        Can you draw these 10 squares
        of this sidewalk using a nested loop? Each square is 30 pixels.
      grade4_arist_nested_loop_triangles2_instruction: "Now nest this loop inside\nanother
        loop to draw 10 triangles.  This is called a \"nested\" loop.  "
      grade4_arist_nested_loop_triangles3_instruction: |-
        Can you draw a hexagon by
        looping the triangle code?
      grade4_arist_nested_loop_triangles4_instruction: |-
        Draw the teeth in the alligator's
        mouth!
      grade4_arist_nested_loop_triangles5_instruction: |-
        Create a sun by nesting the
        starter code in another loop.\r
        \r
        To get this cool design with a hollow
        center, you'll need to jump forward by the length of the triangle before
        turning.
      grade4_arist_nested_loop_triangles6_instruction: |-
        Can you draw these 36 triangles
        using a nested loop?
      grade4_artist_freeplay_instruction: |-
        You are on your own now! Try out any of
        the functions you used in this stage or try this new function that will automatically
        give your image a beautiful background color! This creation will be saved
        to your Projects dashboard so that you can easily edit it any time!
      grade4_artist_functions1_instruction: "哈囉。我是個僵屍。我是個熱愛繪畫的殭屍！ 幫我畫一副方形眼鏡。 \n提示：
        眼鏡框之間的鼻樑比鏡框的長度短 25 像素。"
      grade4_artist_functions2_instruction: |-
        Functions let you define new blocks!
        \r
        \r
        We've moved the blocks needed for drawing a square into a function
        called `draw a square`. This time, use the `draw a square` function to create
        the glasses. \r
        \r
        The squares are 75 pixels apart.
      grade4_artist_functions2a_instruction: |-
        Create this image using only the blocks
        provided.
      grade4_artist_functions3a_instruction: |-
        Create this image using only the blocks
        provided.
      grade4_artist_functions3b_instruction: |-
        This time, use lines of 8 hexagons
        with 25 pixel sides.
      grade4_artist_functionsChallenge0_instruction: "**挑戰：**盡可能做出你想要的函式，用函式來繪製邊長為
        50 像素的正方形。"
      grade4_artist_functions_challenge_instruction: |-
        Use the suggested functions
        to draw four rows of hexagons. Notice how our even numbered rows are shifted
        to the right?
      grade4_artist_functions_challenge2_instruction: |-
        Use the suggested functions
        to draw four rows of hexagons. Notice how our even numbered rows are shifted
        to the right?
      grade4_artist_functions_freeplay_instruction: |-
        You are on your own now! Try
        out any of the functions you used in this stage or try this new function that
        will automatically give your image a beautiful background color! This creation
        will be saved to your Projects dashboard so that you can easily edit it any
        time!
      grade4_artist_functions_stars0_instruction: |-
        You can make this drawing by adding
        a repeat block.
      grade4_artist_functions_stars1_instruction: |-
        Now that you can draw a star,
        try drawing four stars!
      grade4_artist_functions_stars2_instruction: |-
        Draw only those three stars to
        finish this puzzle.
      grade4_artist_functions_stars3_instruction: |-
        That last one is tough if you
        only use loops. Let's try drawing the same picture using this new 'function'
        that will help to **draw a star**.
      grade4_artist_functions_windows0_instruction: |-
        Make this window by drawing
        a square, then turning 90 degrees before drawing another, and so on.
      grade4_artist_functions_windows1_instruction: |-
        If you can draw one window,
        you can draw three! Try using your choice of a nested loop or a function here.
        Don't forget the jump block!
      grade4_artist_functions_windows2_instruction: |-
        Try solving this puzzle by creating
        `draw a window` and calling it five times. Watch out for the door!\r
        \r
        -
        The top windows are 50 pixels away from each other.  \r
        - The bottom windows
        are 100 pixels below the top set.
      grade4_artist_nestedLoops_challenge_instruction: |-
        Click here to see the full
        instructions again!\r
        \r
        Here is the code for an interesting shape.  What
        happens when you repeat it multiple times, turning between each iteration?   Notice
        that the turns in this shape add up to 420 degrees, which means that when
        your artist is done drawing, it will be facing a different direction than
        when you started.  That new direction is exactly 60 degrees to the right of
        where you began.
      grade4_artist_nestedLoops_challenge2_instruction: |-
        Now for a challenge!  Feel
        free to use trial and error. You are not expected to get the image perfect
        the first time.   Want to see more hints?  Click here!
      grade4_artist_nested_loop_circles1_instruction: 評量：使用巢狀迴圈完成設計。
      grade4_artist_nested_loop_flags1_instruction: |-
        Loop the given code to create
        a windmill.
      grade4_artist_nested_loop_polygons1_instruction: |-
        Loop this design 10 times.
        \r
        \r
        How much do you have to turn each time you loop?
      grade4_artist_nested_loop_polygons2_instruction: "Hi, I'm the Artist! Let's\ncreate
        some drawings together! For starters, try repeating this shape 6 times.\n\\r\n\\r\nHow
        much do you have to turn each time you loop? "
      grade4_artist_nested_loop_squares1_instruction: |-
        Can you draw these 10 squares
        of this sidewalk using a nested loop? Each square is 30 pixels.
      grade4_artist_nested_loop_triangles1_instruction: |-
        Complete the code to draw
        these triangles.  The first one is done for you.  Hint:  3 triangles in a
        360 degree rotation.
      grade4_artist_nested_loop_triangles2_instruction: |-
        Let's make a quick adjustment
        to get completely different image!  \r
        Hint: ? × 10 = 360
      grade4_artist_nested_loop_triangles3_instruction: |-
        Can you draw a hexagon by
        looping the triangle code?\r
        Hint: 6 × ? = 360
      grade4_artist_nested_loop_triangles4_instruction: |-
        Hi! I'm the Artist. Let's
        try some different types of drawings together. Can you help me draw the bottom
        teeth in the alligator's mouth?
      grade4_artist_nested_loop_triangles5_instruction: |-
        Create a sun by nesting
        the starter code in another loop.\r
        \r
        To get this cool design with a hollow
        center, you'll need to jump forward by the length of the triangle before
        turning.
      grade4_artist_nested_loop_triangles6_instruction: |-
        Can you draw these 36 triangles
        using a nested loop?
      grade4_artist_parameters_squares1_instruction: |-
        Click "edit" to fill in the
        function definition of "draw a square" and add a parameter. It should take
        a length parameter, just like the triangle. This time, draw 3 squares: 25,
        50 and 75 pixels in length, each 100 pixels apart.
      grade4_artist_parameters_triangles1_instruction: |-
        Today, we're going to try
        out a different, more powerful function editor. See if you can figure out
        how to edit the function 'draw a triangle' to find the bugs.
      grade4_artist_parameters_triangles2_instruction: 你有察覺這個函式積木有什麼不一樣嗎？點擊「運行」來看看發生什麼事。
      grade4_artist_parameters_triangles2b_instruction: |-
        Can you complete this drawing?
        The sides of each triangle are 25 pixels larger than the last.  The first
        triangle has 25 pixel sides.
      grade4_artist_parameters_triangles3_instruction: |-
        Can you complete this drawing?
        The sides of each triangle are 25 pixels larger than the last.  The first
        triangle has 25 pixel sides.
      grade4_artist_parameters_triangles4_instruction: |-
        The code for this triangle
        function is broken. Can you edit the function to fix it, and then make triangles
        of length 25, 50, and 75?
      grade4_artist_parameters_trianglesx_instruction: |-
        Can you complete this drawing?
        The sides of each triangle are 25 pixels larger than the last.  The first
        triangle has 25 pixel sides.
      grade4_bee_conditionals_nested_loops_instruction: |-
        Collect all of the nectar.
        You can only collect nectar from flowers, but you can check any space to see
        if there is a flower.
      grade4_bee_conditionals_new1_instruction: |-
        Collect all of the nectar. You can
        only collect nectar from flowers, but you can check any space to see if there
        is a flower.
      grade4_bee_conditionals_new1a_instruction: |-
        Help the bee make all of the honey.
        You can only make honey at a honeycomb, but you can check any space to see
        if there is a honeycomb.
      grade4_bee_conditionals_new2_instruction: |-
        Can you help the bee collect the
        nectar from the flowers? You can only collect nectar from flowers, but you
        can check any space to see if there is a flower.
      grade4_bee_conditionals_new2a_instruction: |-
        Make all of the honey. It's actually
        more efficient to check each space for a honey comb, even when you know some
        are empty.
      grade4_bee_conditionals_new3a_instruction: |-
        Collect all of the nectar or make
        all the honey. You can only collect nectar from flowers and make honey from
        honeycombs. Check any space to see if there is a flower or honeycomb.
      grade4_bee_conditionals_new3b_instruction: |-
        Uh oh! The bee is not sure if he
        should collect nectar or make honey. Can you help him out?
      grade4_bee_conditionals_new3c_instruction: |-
        Help the bee collect all of the
        nectar and make all of the honey! Hint: Try using one loop inside of another
        loop.
      grade4_bee_conditionals_quantum1_instruction: |-
        This cloud is blocking my view!
        Check to see if there's a flower under the cloud, and only get nectar if
        there's a flower. Be careful, it can change!
      grade4_bee_conditionals_quantum2_instruction: |-
        雲愈來愈多了！\r
        \r
        檢查每個雲，在你採集花蜜前看看是不是有花朵藏在裡頭。\r
        \r
        記住：
        雲底下藏的東西不見得一樣！
      grade4_bee_conditionals_quantum3_instruction: |-
        Now I just want to make honey.
        Some of these clouds might have honeycombs under them. The way we've been
        going about things won't work here. Be sure to check if a honeycomb is hiding
        behind each cloud!
      grade4_bee_conditionals_quantum4_instruction: |-
        Sometimes this cloud covers
        a flower, and sometimes it covers a honeycomb! Use the if/else block to collect
        nectar if it is a flower, else to make honey (because it is a honeycomb).
      grade4_bee_conditionals_quantum5_instruction: |-
        There will be either a flower
        or a honeycomb under each of those clouds!\r
        \r
        Use the `if/else` block
        to collect nectar if there is a flower.\r
        Otherwise, make honey (because
        there is a honeycomb).
      grade4_bee_functions_instruction: |-
        Have we met before? I'm the farmer! Please
        help me remove this pile of dirt and fill this hole.
      grade4_bee_functions1_instruction: 收集每一朵花的花蜜。
      grade4_bee_functions10_instruction: |-
        Create a function to collect all of the
        nectar from each flower.
      grade4_bee_functions11_instruction: |-
        Solve this function by creating a function
        to turn, move forward and make all of the honey, then return the bee to where
        it started and turn back.
      grade4_bee_functions2_instruction: 函式是一段程式碼，用來執行某個任務。請使用 get 2 nectar（採集 2 個花蜜）函式，從每一朵花中採集花蜜。
      grade4_bee_functions3_instruction: |-
        函式是執行特定任務的一串程式碼。用「get 5」這個函式來一次拿5個花蜜。
        記得用迴圈來計算理想的積木塊次數。
      grade4_bee_functions4_instruction: |-
        "移動，並得到花蜜"函式能讓蜜蜂轉身，收集花蜜，最後返回到開始的地方。
        使用函式來收集所有的花蜜。
      grade4_bee_functions5_instruction: This puzzle will be deleted!
      grade4_bee_functions6_instruction: |-
        Now write the function to collect nectar
        from the flowers.
      grade4_bee_functions7_instruction: |-
        Create a function and call it to collect
        nectar at each flower and make honey at each honeycomb.
      grade4_bee_functions8_instruction: |-
        Create your own function that goes down
        a path, gets nectar, makes honey, and then returns the bee to the top of the
        path. Then collect all the nectar and make all the honey!
      grade4_bee_functions9_instruction: |-
        Create a function that collects all of
        the nectar from each flower.
      grade4_bee_nestedLoops0_instruction: 使用一個迴圈來收集所有的花蜜。
      grade4_bee_nestedLoops1_instruction: 使用巢狀迴圈從每朵花中收集所有的花蜜。
      grade4_bee_nestedLoops2_instruction: "**挑戰：**想辦法用這些積木，得到所有的花蜜。"
      grade4_bee_nestedLoops2a_instruction: |-
        Collect all of the nectar using  as
        few blocks as possible.
      grade4_bee_nestedLoops3_instruction: 建立一個巢狀迴圈來收集所有的花蜜。
      grade4_bee_nestedLoops4_instruction: 使用巢狀迴圈來收集每一朵花的花蜜，並在每一個蜂巢製造蜂蜜。
      grade4_bee_nestedLoops_assess_instruction: |-
        **評量：**採集所有的花蜜並且用迴圈來釀成蜂蜜。\r
        \r
        提示：解決方法不只一種喔！
      grade4_designProcess_vid_instruction: |-
        Prepare to build a project within some
        given parameters.
      grade4_farmer_functions1_instruction: |-
        *「我們以前見過嗎？我是個農夫！」*\r
        \r
        幫助農夫到南瓜那並收成它們。
      grade4_farmer_functions2_instruction: |-
        Take the code you just wrote it and
        use it to define a new function. Call the function twice to complete the puzzle.
      grade4_farmer_functions3_instruction: |-
        Try using a couple of repeat blocks
        within your function definition.
      grade4_farmer_functions4_instruction: |-
        Swap out your repeat loops for more
        versatile while loops.
      grade4_farmer_functions5_instruction: |-
        Things are going to start getting trickier,
        but don't give up! You can use the same while loops to check both spaces
        in each pass.
      grade4_farmer_functions6_instruction: |-
        The paths are a different length. You
        can use a different type of while loop to keep the pattern going as long as
        you need to.
      grade4_frozen_freeplay_instruction: 您已經變成一個專業的藝術家囉！開始打造一個冬季仙境吧。
      grade4_frozen_functions0_instruction: |-
        Can you figure out what number to replace
        the question marks with to draw a circle?
      grade4_frozen_functions1_instruction: |-
        Use the new “draw a circle” function
        to create 10 overlapping circles. Don't forget to jump forward between circles.
      grade4_frozen_functions1a_instruction: |-
        Use the new “Create a circle” block
        to create 10 overlapping circles. Don't forget to jump forward between circles.
      grade4_frozen_functions2_instruction: |-
        Now let's create 20 overlapping circles,
        turning 18 degrees between each circle.
      grade4_frozen_functions3_instruction: |-
        Here's a ”Create circle” block that
        can make circles of different sizes. Can you use this to create a small circle
        of size 5 and a larger circle of size 10?
      grade4_frozen_functions4_instruction: |-
        Intricate snow patterns can be created
        with very simple shapes. Can you make a pattern by repeating 5 circles of
        size 5 and 5 circles of size 10?
      grade4_frozen_nested_loop_diamonds1_instruction: |-
        Let’s use a repeat block
        to create a rhombus. Like a square, all sides are equal length, but the angles
        are different. This one has 60 degree and 120 degree angles instead of all
        90 degree angles.
      grade4_frozen_nested_loop_diamonds2_instruction: 你知道每個雪花的形狀都不同嗎？讓我們用另一個「循環」積木創造一個新的雪花，它是由
        4 個重複的平行四邊形所組成，每畫完一個平行四邊形就向右轉 90 度。
      grade4_frozen_nested_loop_diamonds3_instruction: |-
        Now, let's create a new
        snowflake by using the repeat block to repeat a parallelogram 10 times, turning
        right by 36 degrees between each one.
      grade4_frozen_nested_loop_rectangle1_instruction: |-
        Hi, I’m Anna of Arendelle!
        Let’s use a repeat block to create a rectangle. This one is  200 pixels long
        and 100 pixels tall. All of the corners are 90 degree angles.
      grade4_frozen_square_instruction: 嗨，我是艾倫戴爾的安娜公主！讓我們用「循環」積木畫個正方形，這樣一來我們就可以用較少的積木完成。你覺得要「循環」幾次（???）才能畫出一個正方形呢？
      grade4_frozen_square_loop1_instruction: 嗨，我是艾倫戴爾的安娜公主！讓我們用「循環」積木畫個正方形，這樣一來我們就可以用較少的積木完成。你覺得要「循環」幾次（???）才能畫出一個正方形呢？
      grade4_frozen_square_loop2_instruction: 這次我們來建立 3 個正方形吧！每個正方形完成後，記得要轉 120 度，再畫下一個正方形。
      grade4_frozen_square_loop3_instruction: 你可以用「重複」積木來畫 10 次正方形，每次轉 36 度嗎？這樣可以繪製出一個雪花喔！
      grade4_playLab_proj_example1_instruction: instructions
      grade4_playLab_proj_example1a_instruction: |-
        Take a look at this project.  Do
        you see how it was made?
      grade4_playLab_proj_example2a_instruction: |-
        Take a look at this project.  Do
        you see how it was made?
      grade4_playlab_freeplay_instruction: "It's free play time! Have fun with all\nthe
        blocks in your tool box. "
      grade4_playlab_test_instruction: |-
        使用向右鍵扔出派。\r
        \r
        在我們的遊戲中，要怎樣才能獲得分數呢？在每次小狗用派擊中小貓時，加 1 到你的 points 變數上。使用「當角色2碰到任何東西」事件來觸發分數更新。你可以利用「points = points +1」的方式增加變數值，分數到達 10 分（每次加 1 分）就過關。
      grade4_playlab_test2_instruction: |-
        Here's a function called `jump` that causes
        your main character to jump up 100 pixels. Run the program and use the jump
        function to collect all of the flags by moving the dog with the arrow keys.
      grade4_prompt_test_instruction: This is a test play lab level.
      grade4_review_artist1_instruction: |-
        Hi, I'm an artist. You can write code
        to make me draw almost anything. Use a few blocks to make me draw over the
        grey lines in the picture. (Each line is 100 pixels long)
      grade4_review_artist2_instruction: 這個房子需要一個屋頂！畫出這個三角形。提示：三個邊的長度都相同。
      grade4_review_artist3_instruction: |-
        The jump block moves the artist without
        drawing. Draw the dashed line using both the `jump forward` and `move forward`
        blocks. Each line is 50 pixels long.
      grade4_review_bee1_instruction: |-
        Now use the `repeat` block to collect all
        of the nectar and make all of the honey.
      grade4_review_bee2_instruction: 使用最少的積木，從每一朵花中採集花蜜，並在每一個蜂窩裡釀造蜂蜜。
      grade4_review_bee3_instruction: |-
        蜜蜂就是那麼忙！\r
        \r
        幫助蜜蜂收集所有的花蜜及蜂蜜，用的積木愈少愈好。
      grade4_scaffolded_project1_instruction: |-
        It is amazing how much you have learned!
        Let's put them together to make a game, step by step.
      grade4_scaffolded_project2_instruction: |
        Now let's get things moving! Use
        event handlers and actions to make your hero move.\r
        \r
        We've added these
        blocks to your tool box to help you.\r
      grade4_scaffolded_project3_instruction: |-
        Now that your game has a hero, it's
        time to start adding other actors and assigning them behaviors. \r
        \r
        Add
        two or more additional actors to your game and make them move. Do you want
        to have an actor patrol back and forth? Try using a these new blocks to bring
        these other components of your game to life!
      grade4_scaffolded_project4_instruction: |-
        Just getting the actors moving is
        a great step, but we need to program some interactions to make this really
        feel like a game. A simple way to do this is to add or remove points when
        actors collide with projectiles or each other. Find some interesting ways
        to change the score in your game.
      grade4_scaffolded_project4a_instruction: |-
        Just getting the actors moving is
        a great step, but we need to program some interactions to make this really
        feel like a game. A simple way to do this is to add or remove points when
        actors collide with projectiles or each other. Find some interesting ways
        to change the score in your game.
      grade4_scaffolded_project5_instruction: |-
        Now spend some time making sure the
        game works the way you want. Try including a way to win or lose your game.
      grade4_scaffolded_project6_instruction: |-
        You've finished! Now you can play
        your game or share it with your friends and classmates!
      grade5_artist_binary1_instruction: |-
        二進制（Binary）是個只用兩種符號來表達訊息的方法。以下我們將會使用「關」（用 0 表示）及「開」（用 1 代表）。\r\r
        我們提供了「像素」網格，讓你在網格中移動並切換特定的像素方格以進行設計。你能夠讓小藝術家在網格中的第一行以二進位畫出「01010101」嗎？
      grade5_artist_binary10_instruction: 點擊此處觀看提示。
      grade5_artist_binary11_instruction: |-
        Free Play: Here's a blank canvas for
        you to draw on.  Have fun!
      grade5_artist_binary2_instruction: "這裡有一個函式採用 1與 0 的二進位字串，引導藝術家跟隨它們由左至右，由上到下。
        當藝術家看到 1 時會填滿方格，當藝術家看到 0 時則忽略方格。\\r \n\\r\n運行這個程式，看看這位藝術家如何使用二進位繪製這個圖案。"
      grade5_artist_binary3_instruction: |-
        Which of these binary strings could you
        loop 8 times to draw this image?
      grade5_artist_binary4_instruction: |-
        Can you draw this pattern by looping just
        three binary digits (0s and 1s)?
      grade5_artist_binary5_instruction: |-
        Each binary string represents one row of
        this picture. Can you rearrange them so it draws a smiley face instead of
        a frowny face?
      grade5_artist_binary6_instruction: |-
        Which 6 digit binary string, repeated 11
        times, will draw this image?
      grade5_artist_binary7_instruction: 能讓你重複畫出這個圖案的最短的二進制字符串是什麼？
      grade5_artist_binary8_instruction: 完成這幅畫。
      grade5_artist_binary9_instruction: |-
        Here's a higher resolution canvas to draw
        on - 16 pixels by 16 pixels!\r
        \r
        See what happens when we start to get
        creative with the bits?
      grade5_artist_for_loops1_instruction: |-
        Use a `for` loop to draw this triangle
        that is 50 pixels wide. If you count from 1 to 3 by 1s, you can use this just
        like a `repeat` loop.
      grade5_artist_for_loops10_instruction: |-
        Can you figure out how to use all of
        the things you've learned to create this image?\r
        \r
        Need a hint? Click
        here.
      grade5_artist_for_loops1a_instruction: |-
        Try using a `for loop`to create this
        triangular design. Don't worry that the numbers are different than the last
        puzzle. As long as you turn by the right number of degrees, the artist will
        make the correct shape!
      grade5_artist_for_loops1b_instruction: |-
        Experiment with the `for` loop and
        play with the `counter` variable.
      grade5_artist_for_loops2_instruction: |-
        Use a `repeat` inside of a `for` loop
        to create this stack of triangles that goes from 50 pixels to 100 pixels.
      grade5_artist_for_loops3_instruction: "These triangles go from 20 pixel sides\nto
        200 pixel sides, and each triangle is 20 pixels larger than the last. "
      grade5_artist_for_loops4_instruction: "These squares start at 15 pixels long,\nthe
        largest is 300 pixels long, and each square is 15 pixels larger than the\nlast. "
      grade5_artist_for_loops5_instruction: |-
        Just one little change to the code from
        the last image can create this drawing. Can you figure out what that change
        is?\r
        \r
        Hint:  You need to remove something!
      grade5_artist_for_loops6_instruction: |-
        If you turn a little bit more or less
        than you normally would for a shape, it creates a neat effect. Try using some
        of the code from the last level, but turning 89 degrees to create this twisted
        square spiral.
      grade5_artist_for_loops7_instruction: |-
        Make three small changes to the code
        from the last level to get this!
      grade5_artist_for_loops7a_instruction: |-
        Take the angle down to 72 degrees to
        get a spiraled pentagon.
      grade5_artist_for_loops7b_instruction: |-
        Use the counter inside the `set alpha`
        block to get this faded center.\r
        (This hexagon pattern was made using a
        60 degree turn.)
      grade5_artist_for_loops8_instruction: "Remember back in a previous stage when\nwe
        used a variable to control the number of sides in a shape? We are going\nto
        do the same thing with the `counter` variable now. This pattern starts\nwith
        a triangle and adds one side at a time until it draws a decagon (10 sides).\nEach
        side should be 100 pixels long. "
      grade5_artist_for_loops9_instruction: |-
        Let's put it all together!  Using your
        knowledge of `for` loops and the `counter` variable, create this drawing where
        each shape has two more sides than the last.  Make sure that each side is
        10 times as long as the number of sides in the polygon.\r
        \r
        Very little
        of the code has been provided for you.
      grade5_artist_for_loopsfreeplay11_instruction: |-
        自由發揮靈感：你已經學會了製作這樣的圖案所需的知識了！如果這個圖案讓你有些聯想，試試畫出一些類似的圖像。要不然，就畫畫你想畫的一些東。 \r
        \r
        需要提示？點擊這裡。
      grade5_artist_for_loopsfreeplay12_instruction: |-
        Free Play: Try using the `counter`
        variable with other drawing elements to make magical images like this one.
      grade5_artist_freeplay_instruction: |-
        Create your own project! This creation
        will be saved to your Projects dashboard so that you can easily edit it any
        time!
      grade5_artist_functionparameters10_instruction: "自由發揮靈感：你已經學會了所有需要創建這個模式的知識了！如果這個圖形引起了你的聯想，試試畫出一些類似的圖像。要不然，就畫畫你想畫的一些東西。
        \\r\n\\r \n想要知道我們的這些創意圖案是怎麼做出來的嗎？ "
      grade5_artist_functionparameters11_instruction: |-
        Freeplay: Below there are
        functions you've written, and more for you to play with. Draw something awesome!
        Play with the pen width to see how different your drawings look!
      grade5_artist_functionparameters7_instruction: |-
        This image is similar to the
        last. Can you use a `for` loop with your function to make this design?
      grade5_artist_functionparameters8_instruction: |-
        The triangle has 21 pixel sides,
        and the sides in each following shape are 7 pixels longer than the last.  Use
        the `multiplication` block to make this all happen with just one function
        call. Be sure to jump 100 pixels between polygons.
      grade5_artist_functionparameters9_instruction: |-
        Challenge: Edit `draw a spiral
        edge` to use `length` and `sides` parameters, then recreate these shapes.
      grade5_artist_functionparameters9a_instruction: |-
        Finish off the `draw a spiral
        edge` function to also ask for a minimum length for the center of the spiral.
      grade5_artist_functionparameters9b_instruction: |-
        Can you figure out how to
        make this drawing using the function that you just created?
      grade5_artist_functionparameters_6_instruction: |-
        Edit this function to add
        a parameter for the number of sides in your polygon.\r
        \r
        The sides of all
        the shapes are 100 pixels long.
      grade5_artist_parameters_squares1_instruction: |-
        Click "edit" to fill in the
        function definition of "draw a square" and add a parameter. It should take
        a length parameter, just like the triangle. This time, draw 3 squares: 25,
        50 and 75 pixels in length, each 100 pixels apart.
      grade5_artist_parameters_squares1a_instruction: |-
        This program looks okay from
        here, but something isn't working right. See if you can figure out how to
        edit the function 'draw a square' to find the bug.
      grade5_artist_parameters_squares2_instruction: |-
        Create a function called 'draw
        a square' and use it to outline these four boxes. Make sure to add a parameter
        for 'length'! Starting from the upper right, the box widths are 50, 100,
        150, and 200.
      grade5_artist_parameters_squares2a_instruction: |-
        Edit the function to accept
        a parameter called `length`.
      grade5_artist_parameters_stars1_instruction: |-
        That last one is tough if you
        only use loops. Let's try drawing the same picture using this new 'function'
        that will help to **draw a star**.
      grade5_artist_parameters_triangles1_instruction: |-
        This program looks okay from
        here, but something isn't working right. See if you can figure out how to
        edit the function 'draw a square' to find the bug.
      grade5_artist_parameters_triangles1a_instruction: |-
        Today, we're going to try
        out a different, more powerful function editor. See if you can figure out
        how to edit the function 'draw a triangle' to find the bugs.
      grade5_artist_parameters_triangles1aa_instruction: |-
        Click "edit" to fill
        in the function definition of "draw a triangle" and add a parameter. It
        should take a length parameter, just like the triangle. This time, draw 3
        triangles: 25, 50 and 75 pixels in length, each 100 pixels apart.
      grade5_artist_parameters_triangles2_instruction: |-
        This drawing can be easily
        created using a new type of function that includes a parameter. The sides
        of each triangle are 25 pixels larger than the last.  The first triangle has
        25 pixel sides. Replace the '???' with the correct values to draw the picture.
      grade5_artist_parameters_triangles2a_instruction: 你有察覺這個函式積木有什麼不一樣嗎？點擊「運行」來看看發生什麼事。
      grade5_artist_parameters_triangles3_instruction: |-
        The code for this triangle
        function is broken.\r
        \r
        Can you edit the function to fix it, and then make
        triangles of length 150, 75, 25?
      grade5_artist_parameters_triangles4_instruction: |-
        The code for this triangle
        function is broken. Can you edit the function to fix it, and then make triangles
        of length 25, 50, and 75?
      grade5_artist_parameters_trianglesy_instruction: |-
        The code for this triangle
        function is broken.\r
        \r
        Can you edit the function to fix it, and then make
        triangles of length 150, 75, 25?
      grade5_artist_variables_freeplay10_instruction: |-
        Free Play: Experiment with
        the number of sides this shape has. Can you change the algorithm so that the
        overall size of the shape stays the same, no matter how many sides it has?
        Hint: If you divide your starting length by the number of sides, the length
        of each side will get shorter as the number of sides gets higher.
      grade5_artist_variables_freeplay14_instruction: |-
        Free Play: Check it out! Now
        your algorithm is nested within one more loop. Experiment with changing the
        values of your two variables to draw cool patterns.\r
        \r
        For even more effect,
        try playing with color!  Use random colors inside loops to see how it changes
        your design.
      grade5_artist_variables_freeplay15_instruction: |-
        Want a second peek at the
        inspiration design or the hints?  Click here!\r
        \r
        Otherwise, make a design
        all your own!
      grade5_artist_variables_freeplay16_instruction: |-
        Still playing?  Here is a
        blank canvas where you can create whatever you want!
      grade5_artist_variables_hexagons1_instruction: |-
        Let's try it again! \r
        \r
        Can
        you set the `length` variable to 60 to make this cool design with hexagons?
      grade5_artist_variables_letterT11_instruction: |-
        Here’s more complicated code
        using the same concepts from the last puzzle - what should you set the "sides"
        variable to in order to draw this picture made of squares?
      grade5_artist_variables_new1_instruction: |-
        Here is a program that will create
        an image. There are a few things that are wrong with it.
      grade5_artist_variables_octagons13_instruction: |-
        When a shape has lots of sides,
        each side needs to be shorter if you want the whole pattern to fit on the
        screen. \r
        Let's recreate the algorithm for this amazing pattern, but instead
        of manually setting the `length` variable, let's use a math block with the
        `sides` variable inside to make sure that each shape fits correctly. The perimeter
        of each polygon is 300 pixels.\r
        Need some hints?  Click here.
      grade5_artist_variables_pentagon8_instruction: |-
        Use what you learned in the
        last puzzle to create this hexagon using the "sides" variable.\r
        \r
        See
        how you could change just one value to draw a triangle,  square, pentagon,
        or octagon?
      grade5_artist_variables_pentagon9_instruction: |-
        Now, recreate the algorithm
        from the last level and create a pentagon with sides of length 150.
      grade5_artist_variables_pentagons1_instruction: |-
        Draw this pattern of pentagons
        with 100 pixel sides by setting the right value for `length` and dropping
        the `length` variable into all of the the correct places. \r
        \r
        See how
        you only have to set the value for `length` once, and the code uses the right
        value everywhere?
      grade5_artist_variables_pentagons12_instruction: |-
        Let's set the "sides"
        variable to 5. The more sides we add to this algorithm, the bigger this whole
        pattern gets! Notice that there is another variable called "length". We
        can now use that wherever we have a "move forward." Set the "length" variable
        to 75 for this shape.
      grade5_artist_variables_rectangle6_instruction: |-
        Now I want to make a rectangle
        that is twice as tall as it is wide. We've got a variable called "width"
        that needs to be set to 100. Can you use the math blocks to complete the code?
      grade5_artist_variables_square7_instruction: |-
        Here’s some code that can draw
        any regular polygon. There’s a new variable called sides that is set to 4.
        Can you use the sides variable (along with the math block) to turn the right
        amount regardless of how many sides there are in the polygon?\r
        \r
        Click
        here to go back to the hint!
      grade5_artist_variables_triangles2_instruction: |-
        Instead of using "move forward
        by 150," the "move" block is now referencing a variable called "length."
        Can you set "length" to 150 to draw this new triangle?
      grade5_artist_variables_triangles3_instruction: "Drag a number block to both\nthe
        `set length` block and the `repeat _ times` block to draw a set of 50\npixel
        triangles. "
      grade5_bee_for_loops1_instruction: |-
        Use a loop to collect the nectar from each
        flower.
      grade5_bee_for_loops10_instruction: |-
        What should your increment be to collect
        15, then 12, then 9, 6, 3 nectar?
      grade5_bee_for_loops11_instruction: "**挑戰：**利用你學過的迴圈來解決這個問題。 "
      grade5_bee_for_loops2_instruction: |-
        Add the code necessary to make sure the
        bee collects all the nectar. Look at how much code you need for this puzzle!
        (We'll learn a simpler way in the next puzzle.)
      grade5_bee_for_loops3_instruction: |-
        Try this puzzle using the `for` loop with
        `counter` variable and see how much shorter your code becomes.
      grade5_bee_for_loops4_instruction: "Replace the ??? in the \"for loop\" with\nthe
        largest amount of nectar the bee has to collect. "
      grade5_bee_for_loops6_instruction: |-
        You can also use a "for loop" to count
        down. Try gathering this nectar by counting down from 5 to 1 by 1.
      grade5_bee_for_loops7_instruction: |-
        Try collecting these flowers using an increment
        of 2.
      grade5_bee_for_loops8_instruction: |-
        You've got this! What should your increment
        be to collect 3, 6, 9, 12, 15 nectar?
      grade5_bee_for_loops9_instruction: |-
        Use the `counter` variable to navigate
        this garden with the fewest number of blocks possible.
      grade5_bee_parameters_new8_instruction: |-
        That's a great function you've created!
        You are officially on your own now. Collect all the nectar. Make all the honey.
      grade5_bee_parameters_new9_instruction: |-
        Bonus Challenge! If you are feeling
        ambitious, try this puzzle. It is possible to collect all of the nectar and
        make all of the honey using only a For loop, a Repeat loop, a function call,
        and a turn. Try it all on your own, or view the hints to build it step-by-step.
        Great job with this stage!
      grade5_pixelation_instruction: |-
        Encode an image of anything you like using
        binary. The binary language will be represented with '0' and '1' only.
      grade5_playlab_freeplay_instruction: "It's free play time! Have fun with all\nthe
        blocks in your tool box. "
      grade5_playlab_parameters_points1_instruction: "Here's the same game but most\nof
        the code is hidden. We've added a new function called `score_points.`\\r\n\\r\nAdd\na
        new parameter called `points` to the `player_score` function. \\r\n\\r\nThe\n`score_points`
        function should be able to both add and remove points from\n`player_score`
        depending on which actor is hit.\\r\nChanging the score by 1\nwill add a point,
        while changing the score by -1 will subtract a point.\\r\n\\r\nWhen\nyou're
        done, click \"Run\" to play.  When Dog scores 6 points, you will move\non
        to the next puzzle. "
      grade5_playlab_variables1_instruction: |-
        This time you don't have to write
        any code, just hit "Run" to play the game! In this game, you're the dog
        who is trying to collect more flags than the cat. Use the down arrow to control
        the dog. Press "Finish" when you're done playing.
      grade5_playlab_variables10_instruction: 編輯 patrol（巡邏）函式，加進一個 actor（角色）參數，這樣一來我們就可以為每個在畫面上的角色呼叫它。記住這些角色分別對應數字
        1、2、3。
      grade5_playlab_variables11_instruction: 添加一個名為 speed（速度）的參數到 patrol（巡邏）函式中。試著在「設定速度」積木中使用新的參數，來幫助企鵝趕在其他動物前得到所有旗幟。
      grade5_playlab_variables12_instruction: |-
        我們來點有趣的！仔細看看提供的程式碼，你能不能想像每個積木在做些什麼。 \r
        當你完成後，使用方向鍵來控制小狗，並收集到所有的旗子。 \r
        注意：
        你不需要對程式進行任何修改
      grade5_playlab_variables13_instruction: 使用`當角色碰到`積木，在小狗碰到其他角色時，把狗送回左上方的位置。
      grade5_playlab_variables14_instruction: "It's free play time! Have fun with\nall
        the blocks in your tool box. "
      grade5_playlab_variables1ask_instruction: |-
        This time, when you press 'run',
        you will see a 'prompt' asking you for a number. This number will be stored
        in a variable used to set the dog's speed.\r
        \r
        \r
        Pay attention to how
        this program is written!
      grade5_playlab_variables2_instruction: 上一關的比賽一點都不公平！修改 dog_speed 變數，確保你可以收集到比貓還要多的旗子，誰先拿到
        10 個旗子就勝利！
      grade5_playlab_variables3_instruction: 使用向左鍵和向右鍵移動、向上鍵是跳，看看你能不能收集到所有的旗子。
      grade5_playlab_variables4_instruction: |-
        Now we're using a variable called
        "height" to control how high the dog can jump. Update the "height" variable
        so that the dog can jump high enough to reach all the flags.
      grade5_playlab_variables5_instruction: |-
        You've seen now how a variable can
        be used to set the height of an actor's jump. How else could  you use a variable?\r
        \r
        Let's
        build a game! First we'll need a score. Try setting the 'points' variable
        to give yourself 10 free points!
      grade5_playlab_variables6_instruction: |-
        使用向右鍵扔出派。\r
        \r
        在我們的遊戲中，要怎樣才能獲得分數呢？在每次小狗用派擊中小貓時，加 1 到你的 points 變數上。使用「當角色2碰到任何東西」事件來觸發分數更新。你可以利用「points = points +1」的方式增加變數值，分數到達 10 分（每次加 1 分）就過關。
      grade5_playlab_variables6ask_instruction: |-
        This time, you need 100 points to
        win!  Don't worry though, you can choose how many points you earn each time
        you score a hit!\r
        Try adding the `ask` block and changing the number 1 out
        for the variable `value`.
      grade5_playlab_variables7_instruction: 很好，現在我們來確定這個遊戲不至於太簡單！每當小狗（角色1）被小貓（角色2）的三明治丟到時就扣
        1 分。初始分數 10 分似乎不大困難，我們把分數從 10 改成 0 後再試試吧。
      grade5_playlab_variables71_instruction: "這是一個早先的遊戲，但是大部分程式都隱藏了。這裡有個新函式叫做 score_points（獲得分數）。\\r\n\\r\n編輯這個函式，使得
        points（分數）參數能被添加到 player_score （玩家分數）變數上。 \\r\n\\r\n變數 player_score 應該會在每次小狗的派碰到小貓時增加；在每次小貓的三明治碰到小狗時減少。
        \\r\n\\r\n注意：當你完成後，點擊「運行」玩玩看，當小狗得到 6 分時，就可以進入下一關。 "
      grade5_playlab_variables81_instruction: "我們為你準備了最後一個函式。\\r\n\\r\n使用一個「如果」陳述式來編程你的遊戲，當
        player_score（玩家分數）達到了一定的數字後，就呼叫 level_up（升級）這個函式。\\r\n\\r\n例如 player_score
        > 6\\r\n\\r\n玩玩看這個遊戲，達到 level 3 你就可以移動到下個關卡。 "
      grade5_playlab_variables9_instruction: |-
        這裡有個函式叫做 `patrol`（巡邏）。
        \r
        \r
        編輯 `patrol` 讓貓能夠向上移動 400 像素，再向下 400 像素。
      grade5_playlab_variables_freeplay_instruction: |-
        Free Play time! Here are all
        of the variables we've played with so far in this stage, as well as a few
        more in case you want them. \r
        \r
        Notice that there are now so many blocks
        in our toolbox that they need to be organized!  Here, we've put each piece
        into an appropriate category.  Take some time to explore everything that is
        available. When you're done browsing, make a game or story using repeats,
        variables, and events.  \r
        \r
        Hint: scroll down to see all the commands
        in the workspace.
      grade5_playlab_variables_jump1_instruction: |-
        This puzzle uses a hidden function
        that makes the dog jump when the 'up' arrow is pressed. The height of the
        jumps can be set at the start of the game using the 'jumpPower' variable.
        Try to touch all of the flags!
      grade5_prompt_test_instruction: |-
        Variables aren't always numbers. What if
        you wanted to store a word or text? Experiment with the new `ask` block.
      gradeK_sequence_4_instruction: Try this one yourself from the beginning.
      gradek_adventurer_loops1_instruction: |
        This is Laurel the Adventurer!  Can
        you move her around and get gold?
      gradek_adventurer_loops10_instruction: |-
        Help me get all of the gold from this
        cave.
      gradek_adventurer_loops2_instruction: |-
        How can Laurel collect all five piles
        of gold using only one `[E-->]` block?
      gradek_adventurer_loops3_instruction: |-
        Can you fix Laurel's path to get all
        of this gold?
      gradek_adventurer_loops4_instruction: |-
        Use what you learned to get all of the
        coins.
      gradek_adventurer_loops4a_instruction: |-
        Add to this code to collect all of
        the coins.
      gradek_adventurer_loops5_instruction: |-
        What should you add to this code to
        get all of the gold?
      gradek_adventurer_loops6_instruction: Write the code to get all of this gold.
      gradek_adventurer_loops7_instruction: Write the code to get all of this gold.
      gradek_adventurer_loops7_challenge_instruction: "**挑戰：**階梯上到處都是黃金！寫個程式幫我得到全部的黃金。"
      gradek_adventurer_loops8_instruction: |-
        Help me get all of the gold from this
        deep valley.
      gradek_adventurer_loops9_instruction: |-
        Help me get all of the gold from this
        cave.
      gradek_adventurer_loopsFP_instruction: |-
        Eureka!  Collect as much gold as you
        can!
      gradek_adventurer_loopsPre_instruction: |-
        This is Laurel the Adventurer.  Mover
        her around and get as much gold as you can!
      gradek_artist_loops1_instruction: |-
        Help the artist draw this line two times
        forward.
      gradek_artist_loops2_instruction: |-
        Our artist is trying to draw a line five
        times, but can't get it right.  Can you help?
      gradek_artist_loops3_instruction: |-
        Now, use a `repeat` loop to draw this line
        five times!
      gradek_artist_loops4_instruction: |-
        Draw a line seven steps long. This will
        become our horizon.
      gradek_artist_loops5_instruction: Let's put a nice hill in the back.
      gradek_artist_loops6_instruction: 使用「重複」迴圈為水添加波紋。
      gradek_artist_loops7_instruction: We need a ladder up to the boat.
      gradek_artist_loops8_instruction: |-
        Challenge: The stairs down to the dock are
        broken.  Help me fix them.
      gradek_artist_loops9_instruction: |-
        Time to head back to land. Help me put down
        stones so I don't fall in!
      gradek_artist_loopsA_instruction: |-
        Help me build steps to watch the ship sail
        away.
      gradek_artist_loopsFP_instruction: |-
        The artist saw something funny in the distance.  Draw
        what you think he saw.
      gradek_artist_loopsPre_instruction: |-
        This is a new type of puzzle called "Artist".
        Play with the level and draw something fun.
      gradek_playlab_events1_instruction: |-
        Make your robot say "Hello!" when the
        button is clicked.
      gradek_playlab_events1a_instruction: 添加一個積木，讓你在點擊「向上按鈕」時，貓也向上移動。
      gradek_playlab_events1c_instruction: |-
        Jorge the Dog wants to say "Hi there."  Can
        you help him?
      gradek_playlab_events2_instruction: |-
        Edit the code so that when the second
        bird is clicked, your program plays a sound!
      gradek_playlab_events2a_instruction: 添加一個積木，讓你在點擊「向下按鈕」時，貓也向下移動。
      gradek_playlab_events2c_instruction: |-
        Help Jorge the Dog get moving by connecting
        the `move left` block to the `when left` event block that is already in the
        workspace.
      gradek_playlab_events3_instruction: |-
        When the third bird is clicked, the background
        should change to a city. Can you add code to make this happen?
      gradek_playlab_events3a_instruction: |-
        When the third bird is clicked, the background
        should change to a city. Can you add code to make this happen?
      gradek_playlab_events3b_instruction: 添加一個按鈕，讓你在點擊它時，貓能向右移動。
      gradek_playlab_events3c_instruction: |-
        Now, get Jorge to move right when the
        `right` button is clicked.
      gradek_playlab_events4_instruction: |-
        Add code to make something happen when
        the fourth bird is clicked. Be creative!
      gradek_playlab_events4a_instruction: 添加一個積木，讓你在點擊「向左按鈕」時，貓也向左移動。
      gradek_playlab_events4c_instruction: |-
        Add events to have Jorge move up and
        down when the `up` and `down` buttons are pressed.
      gradek_playlab_events5_instruction: 關於我的機器人專案！寫下程式，在點擊每隻鳥時分別顯示你的機器人特色。
      gradek_playlab_events5a_instruction: 關於我的機器人專案！寫下程式，在點擊每隻鳥時分別顯示你的機器人特色。
      gradek_playlab_events5c_instruction: |-
        Make this more interesting by changing
        the background and playing a random sound when Jorge is clicked.
      gradek_playlab_eventsA_instruction: |-
        Now, have the cat change to a random size
        AND have it play a random sound when you click the center button.
      gradek_playlab_eventsFP_instruction: |-
        Add anything you want to this game.  Can
        you make the dinosaur disappear when Jorge runs into him?
      gradek_playlab_eventsPre_instruction: |-
        This is a Play Lab level.  Move blocks
        to the workspace and see what happens!
      group test_instruction: Make a game
      harvester_Kahoot_instruction: |-
        Now help the farmer pick the corn, lettuce,
        **and** pumpkin.
      harvey_pixelation_instruction: |-
        Encode an image of anything you like using
        binary. The binary language will be represented with '0' and '1' only.
      harvey_snowflake_artist1_instruction: Get your snowflake ready for 3d printing!
      harvey_snowflake_artist2_instruction: Get your snowflake ready for 3d printing!
      harvey_tictactoe_instruction: 我們來玩個遊戲！盡可能畫多一些的 X！你有辦法每一排畫出 3 個嗎？
      iceAgeLoopsforVideo_instruction: |-
        Can you get to the acorn with just one `move
        forward` block?
      iceage_click_hello_instruction: "Can you help Sid call for his friends when\nyou
        click on him? "
      iceage_click_hello_2018_instruction: "Can you help Sid call for his friends\nwhen
        you click on him? "
      iceage_free_play_instruction: 'Time to create your own game or story! '
      iceage_free_play_2018_instruction: 'Time to create your own game or story!

'
      iceage_free_playcourseF_IceAge_11_instruction: "Time to create your own game\nor
        story! "
      iceage_hello1_instruction: |-
        Help Sid say "Hello!" by dragging the `say` block
        out and connecting it to the bottom of the `when run` event.
      iceage_hello1_2018_instruction: |-
        Help Sid say "Hello!" by dragging the `say`
        block out and connecting it to the bottom of the `when run` event.
      iceage_hello2_instruction: |-
        Help Manny and Sid greet each other by using the
        the `actor ___ say` block twice.
      iceage_hello2_2018_instruction: |-
        Help Manny and Sid greet each other by using
        the the `actor ___ say` block twice.
      iceage_move_events_instruction: |-
        Write the code to help Scrat get all of the
        acorns!
      iceage_move_events_2018_instruction: |-
        Write the code to help Scrat get all
        of the acorns!
      iceage_move_to_actor_instruction: |-
        Connect a block to the `when actor touches`
        event to play a sound when Diego finds Manny.
      iceage_move_to_actor_2018_instruction: |-
        Connect a block to the `when actor
        touches` event to play a sound when Diego finds Manny.
      iceage_move_to_flag_instruction: |-
        Scrat is looking for his acorn! Can you help
        him move the last 200 pixels?
      iceage_move_to_flag_2018_instruction: |-
        Scrat is looking for his acorn! Can
        you help him move the last 200 pixels?
      iceage_repeat_instruction: |-
        Help Granny get some exercise by moving left and
        right repeatedly.
      iceage_repeat_2018_instruction: |-
        Help Granny get some exercise by moving left
        and right repeatedly.
      iceage_sound_and_points_instruction: "Can you finish this program to make it\nso
        that you both **play a sound** and **score a point** when Sid and Granny\ncollide? "
      iceage_sound_and_points_2018_instruction: "Can you finish this program to make\nit
        so that you both **play a sound** and **score a point** when Sid and Granny\ncollide? "
      iceage_throw_hearts_instruction: |-
        Use the `actor __ throw` command to have
        Sid (actor 1) throw hearts at Granny (actor 2) and set Granny's mood to happy
        when she gets hit with them.
      iceage_throw_hearts_2018_instruction: |-
        Use the `actor __ throw` command to
        have Sid (actor 1) throw hearts at Granny (actor 2) and set Granny's mood
        to happy when she gets hit with them.
      iceage_warn_ice_age_instruction: |-
        Change the scene to an icy background and
        set Sid’s (actor 1) speed to fast.
      iceage_warn_ice_age_2018_instruction: |-
        Change the scene to an icy background
        and set Sid’s (actor 1) speed to fast.
      jessie-test_instruction: Lots of instructions
      k-1 maze 1_instruction: 你可以讓我往西邊移動到達豬的位置嗎？
      k1stickerfreeplay_instruction: |-
        The artist saw something funny in the distance.  Draw
        what you think he saw.
      kikiTesta_instruction: |-
        Our adventurer wants to collect coins.  But she can
        only use 4 blocks to get them.\r
        \r
        Can you help her grab as many as she
        can using just 4 blocks?
      kikiTesting_instruction: |
        .\r
         .\r
        .\r
        .\r
        .\r
        .\r
        \r
        .\r
        \r
      level 'grade3_Loops_10_instruction: |-
        Such a busy bee!\r
        \r
        Help bee collect
        all of the nectar and make all of the honey with the fewest blocks possible.
      level 'grade3_Loops_11_instruction: |-
        The shape of this path is different than
        the others. \r
        \r
        Can you collect all of the nectar using as few blocks
        as possible?
      level 'grade3_Loops_12_instruction: |-
        Can you find the quickest way for the
        bee to collect all of the nectar and make all of the honey?
      level 'grade3_Loops_2_instruction: |-
        This time, use a loop to gather all of
        the nectar.
      level 'grade3_Loops_3_instruction: |-
        Use a `repeat` loop to collect all of the
        nectar.
      level 'grade3_Loops_4_instruction: |-
        Now use the `repeat` block to collect all
        of the nectar and make all of the honey.
      level 'grade3_Loops_5_instruction: |-
        What a beautiful field of flowers!   Help
        the bee visit each one.  Can you find a way to do it with fewer than 7 blocks?
      level 'grade3_Loops_6_instruction: |-
        How many times can loops help you in this
        puzzle?  \r
        \r
        Loops are your friend! Use a few of them to complete this
        puzzle with the fewest blocks possible.
      level 'grade3_Loops_7_instruction: |-
        Those flowers look tasty!\r
        \r
        Collect
        nectar from each of the flowers using the fewest blocks possible.
      level 'grade3_Loops_8_instruction: |-
        Collect all the nectar and make all of
        the honey using the fewest blocks possible.
      level 'grade3_Loops_9_instruction: |-
        Collect nectar from each flower and make
        honey at each honeycomb using the fewest blocks possible.
      level grade3_Loops_2_instruction: |-
        This time, use a loop to gather all of the
        nectar.
      loop pet test_instruction: |-
        Last time, you practiced using the "repeat forever"
        loop to make a sprite do something forever. This time, we will use it to make
        a virtual pet. \r
        \r
        This dog's name is Daisy. Daisy LOVES to snack on
        carrots. Use the "drag and drop" block to move the carrot to Daisy.
      loops_forvideo_angrybirds_ab_instruction: |-
        Use loops to get the bird to the
        pig!
      loops_forvideo_angrybirds_cf_instruction: |-
        Use loops to get the bird to the
        pig!
      loops_forvideo_bee_cf_instruction: |-
        Use loops to help the bee get nectar from
        all the flowers!
      loops_forvideo_collector_ab_instruction: |-
        Use loops to help the collector get
        all the gems!
      loops_forvideo_collector_cf_instruction: |-
        Use loops to help Laurel collect
        gems!
      loops_forvideo_harvester_ab_instruction: |-
        Use loops to help the harvester pick
        the corn!
      loops_forvideo_harvester_cf_instruction: |-
        Use loops to help the harvester pick
        her crops!
      loops_forvideo_iceage_ab_instruction: Use loops to get Scrat to the acorn!
      loops_forvideo_iceage_cf_instruction: Use loops to get Scrat to the acorn!
      love_spring_1_instruction: |-
        Let's celebrate Spring!  We have put some seeds
        in the ground to prepare for the season's flowers.  Can you cover them up
        so that the birds don't eat them?
      love_spring_2_instruction: |-
        Our flowers are in full bloom!  Now we need the
        bee to grab nectar from each one so he can make plenty of honey back at his
        hive!
      love_spring_3_instruction: |-
        Figure out how to change this code so that Robin
        chooses a number between 1 and 20.  \r
        \r
        When you're ready, press "Run"
        and play until you guess Robin's number!
      marina_gameLab_play_instruction: Clone this level and make your own blocks!
      mike3bit_instruction: |-
        We start you with the 4x2 image Maddie was creating,
        but we've left out the last few pixels. Finish off the image by figuring
        out which colors are missing and encoding them.
      mike3bitbird_instruction: |-
        Here's an example of an image made with 3-bit color.
        Try changing it to understand how it works. If you want to reset the image,
        press "Start Over".
      mike3bitfreeplay_instruction: |-
        Make something awesome and share it with your
        classmates! You can copy and paste the value of a pixel to use it repeatedly.
      mike3bitmario_instruction: |-
        粗心的二進位編碼器（binary coder）在圖像數據裡頭多輸入了一個 0 還是 1。這個額外的位元（bit）害得瑪利歐故障了！\r
        \r
        刪除這個額外的位元，讓瑪利歐恢復原狀！
      pet game 1_instruction: |-
        Use the "make a new sprite" block to make yourself
        a pet!
      pet game 2_instruction: |-
        Your pet needs some exercise! Use the "add behavior"
        block to get them moving.
      pet game 3_instruction: |-
        Pets love toys! Use a second "make sprite" block
        to give your pet a toy, then use the "move towards" behavior to make your
        pet run to their new toy.
      pet game 4_instruction: |-
        When your pet gets to their toy, they get excited!
        Use the "when touches" block to detect when your pet gets to their toy.\r
        \r
        When
        that happens, use the "remove behavior" block to make them stop walking,
        and the "add behavior" block to make them have a dance party!
      pet game 5_instruction: |-
        You can add lots more things for your pet to interact
        with! Play around with the "set sprite" block and make more stuff anywhere
        you want it!
      pet game 6_instruction: |-
        It's important for pets to learn to follow commands.
        Use the "when clicked" block to teach your pet to only start wandering after
        you click on them.
      pet game 7_instruction: |-
        Pets need to learn to stop, too! Use the "when clicked"
        block to teach your pet to stop wandering after you click on them.
      pet game 8_instruction: |-
        Your pet now has two toys! Use the "when clicked"
        block to get them to move to the toy you click on
      pet game 9_instruction: |-
        Your pet has been so good, they deserve a treat. Use
        the "add behavior" block to make the bone draggable, then drag it to your
        pet.
      playEventsK1_instruction: |-
        This game is called "Play Lab".  See if you can
        figure out what each block does.
      playEventsK2_instruction: |-
        Jorge wants to say "Hi there."\r
        \r
        Can you
        help?
      playEventsK3_instruction: |-
        Jorge wants to be scratched behind the ears!  Can
        you make it so that when you click Jorge he is happy?
      playEventsK4_instruction: |-
        Can you make it so that Jorge the dog chases Robin
        the bird when you click the up arrow?
      playEventsK5_instruction: |-
        Now add code so that Robin flies away when you click
        the forward arrow.
      playEventsK6_instruction: |-
        Have Robin talk back to Jorge when you click on
        her.
      playEventsK7_instruction: What else can you do in this fun scene?
      playLabDebugVideo1_instruction: |-
        Jorge the Dog wants to say "Hi there."  Can
        you help him?
      ramp_artist_loops1_instruction: |-
        Move forward by 60 pixels to complete this
        puzzle.
      ramp_artist_loops1_2018_instruction: |-
        Move forward by 60 pixels to complete
        this puzzle.
      ramp_artist_loops2_instruction: |-
        Move forward five times and make this colored
        line.
      ramp_artist_loops2_2018_instruction: |-
        Move forward five times and make this
        colored line.
      ramp_artist_loops3_instruction: Use a `repeat` loop to draw five colored dashes.
      ramp_artist_loops3_2018_instruction: |-
        Use a `repeat` loop to draw five colored
        dashes.
      ramp_artist_loops4_instruction: |-
        What happens when you add a 72 degree right
        turn after everything else inside your loop?
      ramp_artist_loops4_2018_instruction: |-
        What happens when you add a 72 degree
        right turn after everything else inside your loop?
      ramp_artist_loops5_instruction: Use loops to draw this staircase.
      ramp_artist_loops5_2018_instruction: Use loops to draw this staircase.
      ramp_artist_loops6_instruction: Edit your loop to draw this staircase.
      ramp_artist_loops6_2018_instruction: Edit your loop to draw this staircase.
      ramp_artist_loops7_instruction: |-
        Look for a pattern and make this code shorter
        using loops!
      ramp_artist_loops7_2018_instruction: |-
        Look for a pattern and make this code
        shorter using loops!
      ramp_artist_loops8_instruction: |-
        Look for a pattern and make this code shorter
        using loops.
      ramp_artist_loops8_2018_instruction: |-
        Look for a pattern and make this code
        shorter using loops.
      ramp_artist_loops8_clone_instruction: |-
        Look for a pattern and make this code
        shorter using loops.
      ramp_artist_loops9_instruction: Solve this puzzle by drawing a square.
      ramp_artist_loops9_2018_instruction: Solve this puzzle by drawing a square.
      sample1_instruction: |-
        Our adventurer wants to collect coins.  But she can only
        use 4 blocks to get them.\r
        \r
        Can you help her grab as many as she can
        using just 4 blocks?
      sample10_instruction: Now you can use loops to draw whatever you like!
      sample10a_instruction: |-
        You have helped the adventurer and her bee!  As a reward,
        please stay and play around in my magical village. \r
        \r
        You should have
        everything you need to create a game of your own.
      sample2_instruction: |-
        Use what you've learned to help bee gather all of this
        honey using only the blocks that you have here.
      sample2a_instruction: |-
        Use what you've learned to help bee gather all of this
        honey using only 4 blocks.
      sample3_instruction: |-
        Now you can help bee make all of the honey using just
        the blocks in the toolbox.
      sample3assessment_instruction: |-
        Can you figure out how to gather all of this
        nectar in just one try?
      sample4_instruction: |-
        Our adventurer has found a stash of coins in this cave.\r
        \r
        Can
        you help her grab as many as she can using just 7 blocks?
      sample5_instruction: Help bee make all of the honey.
      sample6_instruction: 'Challenge: Help bee make all of the honey.'
      sample7assessment_instruction: |-
        Can you help bee make all of the honey in just
        one try?
      sample8_instruction: |-
        Look at this trove of coins! How many can you get the
        adventurer to grab?
      sample9_instruction: 'Use loops to help the artist connect all of the dots.

'
      sample9a_instruction: |-
        The wizard has found his potions!  Use everything you
        have learned to help him collect them.
      scrat 16 (copy 1)_instruction: 橡樹！果實！橡樹果實！用「如果」積木讓我到那裡，愈少積木愈好。
      scrat 16_instruction: 橡樹！果實！橡樹果實！用「如果」積木帶我到達那裡，使用的積木數愈少愈好。
      scrat 17 (copy 1)_instruction: 好的，讓我們再練習一次，不會太難的，只是請注意 <insert obstacle name
        for Scrat>！
      scrat 17_instruction: 好的，讓我們再練習一遍。不會很難的，但是要小心，別撞到牆！
      scrat 18 (copy 1)_instruction: "「如果…否則」積木會視情況決定要執行哪一個部分的操作。如果要讓我順利獲得橡樹果實，試試這個新的積木。"
      scrat 18_instruction: "「如果…否則」積木會先檢查條件是否成立，然後才決定執行什麼操作。如果想讓我得到橡樹果實，就用用這個新的積木。"
      scrat 19 (copy 1)_instruction: 再練習一次「如果…否則」積木，你可以一次就完成嗎？
      scrat 19_instruction: 再練習一次「如果…否則」積木，你可以一次就成功嗎？
      scrat 20_instruction: 你可以只靠 3 個積木，來幫我完成一個更複雜的關卡嗎？只要你成功了，不管是多長的曲徑，我都能自己通過囉！快點！冰快融化啦！
      skratDebugVideo1_instruction: 幫鼠奎特拿到橡樹果實。
      subgoal U3 L4 introducing subgoal labels_instruction: |-
        Introduce orient turtle
        and move turtle
      subgoal U3L2 Using Simple Commands_instruction: |-
        Draw a 1x1 square above and
        to the left of the turtle's starting position. Click to see full instructions.
      subgoalU3L2_TurtleSquare_right_instruction: |-
        Draw a square to the front and
        to the right of the starting location. (Click to show full instructions)
      template test_instruction: 怎麼了
      testArtistForTestK_instruction: |-
        The Artist is trying to draw a line five times,
        but can't get it right.  Can you help?
      test_sarah_instruction: hi
      u3-old-drawing-view_instruction: DO This
      valentine_artist_03_instruction: Now try something on your own!
      weird_playLab_instruction: 關於我的機器人專案！寫下程式，在點擊每隻鳥時分別顯示你的機器人特色。
