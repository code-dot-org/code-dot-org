"uk":
  data:
    instructions:
      2-3 Artist 1 new_instruction: "Привіт, я художник. Можеш написати код, щоб допомогти
        мені малювати що завгодно. Використовуй кілька блоків, щоб допомогти мені
        малювати по сірих лініях на малюнку. (Кожна лінія має довжину 100 пікселів)"
      2-3 Artist 11_instruction: "Намалюй межі для знаку зупинки, створивши восьмикутник
        зі сторонами у 100 пікселів. На скільки градусів потрібно повертати? (Підказка:
        скільки буде 360 розділити на 8?) "
      2-3 Artist 12_instruction: Налаштуй блок "Повторити разів", так що він створював
        "коло", для завершення ока. Якщо після кожного переміщення повертати на 1
        градус, скільки поворотів потрібно для створення кола? 180? 360? 500?
      2-3 Artist 2 new_instruction: "Цей будинок має незавершену стіну. Кожна сторона
        має 100 пікселів, а незавершена - лише 50. Потрібно завершити стіну. "
      2-3 Artist 2_instruction: "Цей будинок має вальцюванні стіни. Кожній стороні
        є 100, але вальцюванні стіні становить лише 50. Повна стіни. "
      2-3 Artist 3.4_instruction: "Блок стрибку переміщує художника без малювання.
        Намалюй пунктирну лінію, використовуючи блоки стрибку і малювання."
      2-3 Artist 3_instruction: "Цей капелюх має висоту 100 пікселів. Намалюй капелюх
        на 70 пікселів менший."
      2-3 Artist 3new_instruction: "Червоний капелюх має висоту 100 пікселів. Заверши
        чорного капелюха, який на 70 пікселів коротший. Ширина чорного капелюха -
        50 пікселів."
      2-3 Artist 4_instruction: "Допоможи мені завершити домівку для цього кота."
      2-3 Artist 5_instruction: Заміни цей код блоком "повторити разів", щоб намалювати
        такий же будинок, використавши тільки 3 блоки.
      2-3 Artist 6_instruction: "Цей будинок потребує даху! Намалюй трикутник.  Підказка:
        всі три сторони мають однакову довжину."
      2-3 Artist 7_instruction: "Заверши малювання правої половини останнього вікна.
        Кожна квадратна віконна панель має 25 пікселів. "
      2-3 Artist 8_instruction: "Заверши кімнати для кожної з тварин, розділяючи прямокутник
        на два однакові квадрати. Прямокутник має 200 пікселів у ширину та 100 пікселів
        у висоту."
      2-3 Artist 9_instruction: "Заверши паперового змія"
      2-3 Artist Assessment 1_instruction: "Оцінювання: Заверши малювання останнього
        зуба, 25 пікселів у ширину та 25 пікселів заввишки."
      2-3 Artist Debugging 1_instruction: "Можеш намалювати такий капелюх з довжиною
        верху 100?"
      2-3 Artist Debugging 10_instruction: "Планка напрямку в моєму ігровому контролері
        надто вузька. Підказка: зроби її ширшою на 100 пікселів"
      2-3 Artist Debugging 11_instruction: Допоможи мені завершити цю красиву сніжинку.
        Скільки разів потрібно "повторити", щоб завершити її?
      2-3 Artist Debugging 12_instruction: "У цій сцені потрібно додати хвилі в океані.
        \ Ти можеш мені допомогти?"
      2-3 Artist Debugging 2_instruction: "Код малювання трьох вусиків, який тут наведено
        - неправильний. Підказка: кожен вусик має довжину 75 пікселів. Виправ код,
        щоб намалювати вуса."
      2-3 Artist Debugging 3_instruction: "У човні діра! Можеш це виправити, змінивши
        кут лінії? Підказка: останній кут відхиляється на 15 градусів від потрібного."
      2-3 Artist Debugging 4_instruction: "Що ми намагаємось намалювати? Завершуй
        з'єднання точок, використовуючи належні лінії та кути."
      2-3 Artist Debugging 5_instruction: "Код малювання ноги, який тут наведено -
        неправильний. Підказка: нога надто довга, доведеться видалити"
      2-3 Artist Debugging 6_instruction: "Схоже я сиджу на стільці без ніжки. Редагуй
        блоки, щоб намалювати ніжку."
      2-3 Artist Debugging 7_instruction: "Здається С в коді малюється неправильно.
        Можеш виправити, щоб це виглядало як С?"
      2-3 Artist Debugging 8_instruction: "Моя вертушка не завершена. Скільки разів
        потрібно повторити, щоб завершити її?"
      2-3 Artist Debugging 9_instruction: "Код малювання стебла, який тут наведено
        - неправильний. Підказка: кут відхиляється на 60 градусів від потрібного"
      2-3 Artist Debugging Assessment 1_instruction: "Ця фігура замала. Ви можете
        зробити її більшою? Підказка: вона повинна бути на 75 пікселів більша по кожній
        стороні."
      2-3 Artist Free Play_instruction: "Гра без правил! Малюй усе що завгодно."
      2-3 Artist Functions 1_instruction: "Вітаю. Я - зомбі художник. Мені подобається
        малювати! Допоможи мені намалювати квадратні окуляри. Підказка: місток між
        скельцями на 25 пікселів коротший, ніж довжина квадрата."
      2-3 Artist Functions 10_instruction: "Ось дві функції: одна для малювання великої
        шестірні, друга - для маленької. Використай їх, щоб намалювати середину механізму!"
      2-3 Artist Functions 11.5_instruction: Ось така ж функція "намалювати шестикутник".
        Що станеться, якщо повертати тільки на 60 градусів при кожному виконанні циклу?
      2-3 Artist Functions 11_instruction: Ми перейменували функцію "намалювати квадрат"
        у "намалювати шестикутник", але вона все ще малює квадрати! Можеш змінити
        функцію "намалюйте шестикутник" і намалювати шестикутник зі сторонами по 50
        пікселів за допомогою функції?
      2-3 Artist Functions 12_instruction: 'Функції дійсно чудово підходять для багаторазового
        малювання складних речей. Можеш використати функцію "намалювати квітку" для
        заповнення решти газону? (Підказка: між рослинами відстань у 100 пікселів)  '
      2-3 Artist Functions 13_instruction: "Ми навели чотири функції. Використай їх,
        як завгодно, всередині одного чи кількох циклів, щоб створити малюнок, яким
        можна поділитися з друзями. Клацай Запустити, щоб подивитися приклад."
      2-3 Artist Functions 2_instruction: Функції дозволяють визначити нові блоки!
        Ми перенесли блоки малювання квадрату в функцію під назвою "намалювати квадрат".
        Можеш використати функцію "намалювати квадрат", щоб створити окуляри? Квадрати
        розміщені на відстані 75 пікселів один від одного.
      2-3 Artist Functions 3_instruction: "Відредагуй функцію, щоб намалювати квадрат
        зі стороною 115 і намалюй великі окуляри. Квадрати розміщені на відстані 45
        пікселів один від одного."
      2-3 Artist Functions 4_instruction: Використовуй блок "повторити", щоб намалювати
        ці 3 квадрати.
      2-3 Artist Functions 7_instruction: 'Використай функцію "намалюйте будинок",
        щоб намалювати два будинки, використовуючи два різні параметри. (Підказка:
        перший будинок має 100 пікселів).'
      2-3 Artist Functions 9_instruction: "Ось функція Сніжинка. Поекспериментуй з
        нею, щоб створити зимову сцену! Це рівень вільної гри, тому завдання тут немає.
        Розважайся!"
      2-3 Artist Loops 1_instruction: "Можеш намалювати шестикутник зі сторонами у
        100 пікселів, щоб закінчити соти? Пам'ятай, що це означає, що потрібно буде
        тільки повернути на 60 градусів!"
      2-3 Artist Loops 10_instruction: "Що станеться з малюнком, якщо зробити останній
        крок вдвічі довшим?"
      2-3 Artist Loops 11_instruction: "А тепер додамо *ще один* цикл навколо всього
        творіння! Не забудь додати кут в кінці зовнішнього циклу."
      2-3 Artist Loops 2_instruction: Тепер використаємо блок "повторити", щоб намалювати
        границі клітинки.
      2-3 Artist Loops 4_instruction: "Хочеш побачити, що буде, якщо ми повторимо
        цю фігуру багато разів, скориставшись циклом?"
      2-3 Artist Loops 5_instruction: "Тепер внесемо незначні зміни до циклу і подивимось,
        наскільки різним може бути наше зображення."
      2-3 Artist Loops 6_instruction: "Додай ще одне переміщення та один поворот всередину
        циклу і подивись, як змінюється малюнок."
      2-3 Artist Loops 7_instruction: "Ми можемо використати цикли для створення різних
        багатокутників.  Зможеш створити ромб всередині цього шестикутника?"
      2-3 Artist Loops 8_instruction: "Додамо обидва елементи всередину циклу."
      2-3 Artist Loops 9_instruction: "Ми збираємося повторювати однакові елементи,
        але також ми додамо певну відстань між ними. \\r Використовуй той же код,
        як і раніше, але додай крокування вперед в кінці зовнішнього циклу."
      2-3 Artist Loops New 1_instruction: "Спробуємо намалювати голову для робота!
        Можеш намалювати квадрат зі стороною 100 пікселів?"
      2-3 Artist Loops New 10_instruction: "А тепер з'єднаємо кілька V разом, малюючи
        їх у циклі."
      2-3 Artist Loops New 11_instruction: Цього разу намалюємо 24 рази. Додамо лівий
        поворот на 30 градусів до цього коду і розмістимо все це всередині блоку "повторити".
      2-3 Artist Loops New 12_instruction: |
        Намалюй ромб зі сторонами 100 пікселів.
      2-3 Artist Loops New 13_instruction: "А тепер тричі намалюй ромб у циклі."
      2-3 Artist Loops New 14_instruction: "Намалюємо ромб 10 разів, але з поворотом
        на 90 градусів між ромбами."
      2-3 Artist Loops New 15_instruction: "Намалюй щось цікаве."
      2-3 Artist Loops New 2_instruction: Ось код, який ми використовували, щоб намалювати
        той квадрат. Що станеться, якщо використати блок "повторити", щоб виконати
        цей код 4 рази?
      2-3 Artist Loops New 9_instruction: "Намалюй просте V, зі сторонами у 50 пікселів,
        щоб завершити стрілку."
      2-3 Artist Match Hex Pic_instruction: "Порівняння: Допоможи завершити шестикутник."
      2-3 Artist Match Rho Pic_instruction: "Порівняй: Допиши відсутній код."
      2-3 Artist Match Sq Pic_instruction: "Порівняй: Заверши відсутній код"
      2-3 Artist Match Tri pic_instruction: "Порівняй: Заповни пропуски в коді."
      2-3 Artist Nested Loops 1_instruction: "Раніше ми використовували цикли, щоб
        малювати фігури, але ти знаєш, що можна розмістити цикл всередині іншого циклу?
        \\r Виконай весь цей блок коду тричі для того, щоб утворився візерунок."
      2-3 Artist Nested Loops 10_instruction: "Виконай цей код 12 разів, щоб завершити
        візерунок."
      2-3 Artist Nested Loops 11_instruction: "Повтори виконання цього коду 4 рази,
        повертаючи на 90 градусів після кожного кола."
      2-3 Artist Nested Loops 12_instruction: "Повтори виконання цього коду 12 разів,
        щоб завершити завитки."
      2-3 Artist Nested Loops 2_instruction: "Тепер намалюй трикутник 6 разів. Після
        кожного трикутника потрібно повернути на 60 градусів, перш ніж малювати наступний."
      2-3 Artist Nested Loops 3_instruction: "Потрібно виконати малювання трикутника
        12 разів, щоб створити цей узор. Розділи кількість градусів у колі (360) на
        кількість фігур, які малюєш (12), щоб визначити, на скільки потрібно повертати
        після кожної фігури."
      2-3 Artist Nested Loops 4_instruction: "Повтори цей ромб 12 разів, щоб намалювати
        квітку. Підказка: 12 ромбів схоже на 12 трикутників, які ми вже робили - на
        скільки потрібно повертати після кожної фігури?"
      2-3 Artist Nested Loops 5_instruction: "Заповни цю будівлю вікнами за допомогою
        вкладеного циклу. Вікна мають довжину 20 пікселів, і розміщені на відстані
        20 пікселів один від одного."
      2-3 Artist Nested Loops 6_instruction: "У динозавра на хвості є 8 шипів; кожен
        шип завдовжки 30 пікселів. Повтори трикутник 8 разів, але не забувай рухатись
        вперед після кожного із них."
      2-3 Artist Nested Loops 7_instruction: "Виконай малювання трикутника 10 разів,
        щоб вийшло сонце. Потрібно буде переміщуватись та повертати після кожного
        з трикутників. Спробуй здогадатись, на скільки градусів повертати, розділивши
        кількість градусів кола на кількість фігур, які утворюють малюнок."
      2-3 Artist Nested Loops 8_instruction: "Додамо до малюнка траву. Кожен наступний
        пучок трави на відстані 50 пікселів."
      2-3 Artist Nested Loops 9_instruction: "Що ж, завершуємо малюнок, додавши квітку.
        Повтори ромб 12 разів, щоб утворилась квітка."
      2-3 Artist Nested Loops Free Play_instruction: "Вільна гра, намалюй щось цікаве
        за допомогою вкладених циклів."
      2-3 Bee Conditionals 1_instruction: "Привіт! Я Бджілка. Допоможи мені отримати
        нектар з квітів."
      2-3 Bee Conditionals 10_instruction: |
        Фіолетові квіти можуть мати 1 або 0 нектарів. Обережно - не збирай нектар з квітки, якщо його там немає. \r
      2-3 Bee Conditionals 11_instruction: "Збирай нектар з квітів, які його мають."
      2-3 Bee Conditionals 12_instruction: "Використай цикли, щоб перевіряти і збирати
        нектар з усіх цих квітів."
      2-3 Bee Conditionals 13_instruction: 'Збирай нектар і роби мед. Підказка: що
        станеться, якщо використати "якщо нектар" на червоній квітці? Можеш завершити
        це циклом?'
      2-3 Bee Conditionals 14_instruction: "Збирай нектар і роби мед. Обережно - не
        збирай нектар з квітки, якщо його там немає."
      2-3 Bee Conditionals 15_instruction: "Збирай нектар з усіх чотирьох квітів."
      2-3 Bee Conditionals 2_instruction: "Привіт, я Бджілка! Допоможи мені зібрати
        весь нектар з квітів. Використай цикл."
      2-3 Bee Conditionals 3_instruction: "Допоможи мені зібрати весь нектар з квітів
        і зробити мед. Використовуй цикл."
      2-3 Bee Conditionals 4_instruction: "Допоможи мені зібрати весь нектар з квітів
        і зробити весь мед."
      2-3 Bee Conditionals 5_instruction: Фіолетові квіти можуть мати 1 або 0 нектарів,
        але це невідомо! Обережно - не збирай нектар з квітки, якщо його там немає.
        Перевір, чи нектар дорівнює 1 за допомогою блоку "якщо".
      2-3 Bee Conditionals 6_instruction: Перевір квітку блоком "якщо", щоб перевірити,
        чи вона має нектар.
      2-3 Bee Conditionals 7_instruction: "Збирай нектар з кожної квітки, яка його
        має."
      2-3 Bee Conditionals 8_instruction: "На полі є червоні та фіолетові квіти. Для
        червоних квітів кількість нектару відома, а для фіолетових - не відома. Збери
        весь нектар."
      2-3 Bee Conditionals 9_instruction: "Збери весь нектар з усіх квітів."
      2-3 Bee Conditionals Assessment 1_instruction: "Оцінювання: Збери весь нектар.
        Обережно, не збирай нектар з фіолетових квітів, якщо його там немає."
      2-3 Bee Debugging 1_instruction: "Ці блоки не дають мені спокою. Виправ помилки
        для того, щоб зібрати весь нектар і зробити мед."
      2-3 Bee Debugging 10_instruction: "Ці блоки не дають мені спокою. Виправ помилки,
        щоб зібрати весь нектар і зробити весь мед."
      2-3 Bee Debugging 2_instruction: "Ці блоки не дають мені спокою. Виправ помилки
        для того, щоб зібрати весь нектар і зробити мед."
      2-3 Bee Debugging 3_instruction: "Ці блоки не дають мені спокою. Виправ помилки
        для того, щоб зібрати весь нектар і зробити мед."
      2-3 Bee Debugging 4_instruction: "Ці блоки не дають мені спокою. Виправ помилки
        для того, щоб зібрати весь нектар і зробити мед."
      2-3 Bee Debugging 5_instruction: "Ці блоки не дають мені спокою. Виправ помилки
        для того, щоб зібрати весь нектар і зробити мед. Можна використовувати запуск
        та крок."
      2-3 Bee Debugging 6_instruction: "Ці блоки є дійсно не давали мені спокою. Виправи
        помилку(и), щоб зібрати весь нектар і зробити весь мед. "
      2-3 Bee Debugging 7_instruction: "Ці блоки не дають мені спокою. Виправ помилки
        для того, щоб зібрати весь нектар і зробити мед."
      2-3 Bee Debugging 8_instruction: "Ці блоки не дають мені спокою. Виправ помилки
        для того, щоб зібрати весь нектар і зробити мед."
      2-3 Bee Debugging 9_instruction: "Ці блоки не дають мені спокою. Виправ помилки
        для того, щоб зібрати весь нектар і зробити мед."
      2-3 Bee Debugging Assessment 1_instruction: "Оцінювання: Ці блоки не дають мені
        спокою. Виправ помилки для того, щоб зібрати весь нектар і зробити мед."
      2-3 Bee Functions 1_instruction: Функції - це блоки коду, які виконують завдання.
        Використовуй функцію "отримати 2 нектари", щоб збирати нектар з кожної квітки.
      2-3 Bee Functions 10_instruction: "Фіолетові квіти можуть мати 1 або 0 нектару.
        \ Створи функцію, яка збирає нектар тільки з тих фіолетових квітів, які мають
        нектар."
      2-3 Bee Functions 2_instruction: Функції - це блоки коду, які виконують завдання.
        Використовуй функцію "отримати 5", щоб зібрати 5 нектарів за раз. Також переконайся,
        що використовуєш цикл, щоб отримати ідеальну кількість блоків.
      2-3 Bee Functions 3_instruction: "Збери весь нектар з усіх квітів."
      2-3 Bee Functions 4_instruction: Функція "рухатись та отримати нектар" змушує
        Бджілку повертатися, збирати нектар, а потім повертає її на стартове місце.
        Використай цю функцію, щоб зібрати весь нектар.
      2-3 Bee Functions 5_instruction: |
        Тут є більше нектару на квітках.
        Редагуй задану функцію так, щоб вона збирала 4 нектари та використай її, щоб зібрати решту нектару з квітів.
      2-3 Bee Functions 6_instruction: "Тепер використай ту ж функцію, щоб зібрати
        нектар з трьох квітів."
      2-3 Bee Functions 7_instruction: "Квіти тепер далі. Зміни подану функцію і використай
        її, щоб зібрати весь нектар з квітів."
      2-3 Bee Functions 8_instruction: "Створи власну функцію, котра збирає 7 нектарів,
        рухається вперед і робить 7 меду. Використай функцію, щоб зібрати нектар з
        усіх квітів та зробити мед у всіх стільниках."
      2-3 Bee Functions 9_instruction: "Створи власну функцію, яка спрямовує по шляху,
        збирає нектар, робить мед, а потім повертає бджілку на початок шляху."
      2-3 Bee Functions Assessment 1_instruction: "Оцінювання: використай дану функцію,
        щоб зібрати нектар з усіх квітів."
      2-3 Bee Functions Assessment 2_instruction: "Оцінювання: Створи функцію, щоб
        зробити 3 меди за раз."
      2-3 Bee Loops 1_instruction: "Кожна квітка містить одну одиницю нектару. Збери
        нектар з усіх квітів. "
      2-3 Bee Loops 10_instruction: Можеш використати цикл "поки" всередині двох інших
        циклів, щоб зібрати весь нектар?
      2-3 Bee Loops 11_instruction: Використай цикл "поки" для того, щоб зібрати весь
        нектар з квітів на цьому полі.
      2-3 Bee Loops 12_instruction: Використай цикл "поки" для того, щоб зібрати весь
        нектар з квітів на цьому полі.
      2-3 Bee Loops 13_instruction: "Оцінювання: За допомогою блоку повторення збери
        весь нектар."
      2-3 Bee Loops 1A_instruction: "Привіт, я - Бджілка. Допоможеш мені зібрати нектар
        з цих квітів? "
      2-3 Bee Loops 2_instruction: "Використовуй цикл, щоб зібрати нектар та зробити
        мед."
      2-3 Bee Loops 2A_instruction: "Можеш виконати це саме завдання простіше, використовуючи
        цикл?"
      2-3 Bee Loops 3_instruction: "Збери нектар з усіх квітів та зроби мед у всіх
        стільниках."
      2-3 Bee Loops 3A_instruction: "Можеш використати цикл для того, щоб зібрати
        весь нектар?"
      2-3 Bee Loops 3B_instruction: "А тепер використовуй новий блок повторення, щоб
        зібрати весь нектар та зробити весь мед."
      2-3 Bee Loops 4_instruction: "Використай цикл, схожий до останнього завдання,
        але додай до нього ще поворот."
      2-3 Bee Loops 4A_instruction: "Що станеться, якщо ти повториш циклічно 3 рази?
        Не забудь зробити мед в кінці!"
      2-3 Bee Loops 5_instruction: "Використай цикл, щоб спуститися сходами та зібрати
        нектар."
      2-3 Bee Loops 6_instruction: "Використай цикл, щоб зібрати нектар з кожної квітки
        та зробити мед з медових стільників."
      2-3 Bee Loops 7_instruction: "Розмісти ці блоки в циклі, щоб зібрати нектар
        з кожної квітки."
      2-3 Bee Loops 8_instruction: Ці фіолетові квітки мають невідому кількість нектару.
        Використай цикл "поки нектар", щоб зібрати весь нектар. Цей цикл триватиме
        доти, доки умова є істинною, в цьому випадку Нектар > 0.
      2-3 Bee Loops 9_instruction: Цикл "поки" може виконувати ту ж дію, як команда
        "якщо" всередині циклу. Додай цикл "поки" до коду, щоб виконати те саме завдання.
      2-3 Bee Loops Assessment 1_instruction: "Оцінювання - Використай цикл поки щоб
        зібрати весь нектар з квітки."
      2-3 Maze 1_instruction: 'Можеш допомогти мені спіймати лиху свиню?  Склади кілька
        блоків "рухатись вперед" і клацни "Запустити". '
      2-3 Maze 10_instruction: "Проведіть мене до зеленої лиходійки! (Важайте на динаміт)"
      2-3 Maze 11_instruction: "Приведи мене до квітки, я - голодний! Скільки разів
        знадоиться повторити блок?"
      2-3 Maze 12 (copy 1)_instruction: 'Зможеш замінити попередню відповідь лише
        двома блоками? (Підказка: Створи цикл використовуючи блок "повторити разів".)'
      2-3 Maze 12 (copy 2)_instruction: 'Зможеш замінити попередню відповідь лише
        двома блоками? (Підказка: Створи цикл використовуючи блок "повторити разів".)'
      2-3 Maze 12 (old)_instruction: Приведи мене до свині, тепер за допомогою блоку
        "повторити разів"!
      2-3 Maze 12_instruction: 'Можеш замінити ці п''ять блоків лише двома? (Підказка:
        створи цикл використовуючи блоки "повторити".)'
      2-3 Maze 13 (old)_instruction: Приведи мене до свині, тепер за допомогою блоку
        "повторювати доки"!
      2-3 Maze 13_instruction: "Доведи мене до свині використовуючи лише два блоки"
      2-3 Maze 14 (old)_instruction: Доведи мене до свині використовуючи блок "повторювати
        доки"!
      2-3 Maze 14_instruction: Доведи мене до соняшника! (Де ж ці блоки "повторювати
        доки", коли вони так потрібні?)
      2-3 Maze 15 (old)_instruction: Доведи мене до свині використовуючи блок "повторювати
        доки"!
      2-3 Maze 15_instruction: "Використай два цикли, щоб дійти до свині, використовуючи
        найменшу кількість блоків."
      2-3 Maze 16 (old)_instruction: Доведи мене до свині використовуючи блок "повторювати
        доки"!
      2-3 Maze 16 before_instruction: "Доведи мене до свині."
      2-3 Maze 16_instruction: "Доведи мене до соняшника. Застосуй циклічну послідовність!"
      2-3 Maze 2_instruction: "Свиня куйовдить моє пір'я. Домопожи мені добратися
        до неї!"
      2-3 Maze 3_instruction: "Простеж шлях та проведи мене до лихої свині. Уникай
        вибухівки, або полетить пір'я!"
      2-3 Maze 4_instruction: "Проведіть мене до зеленої лиходійки! (Важайте на динаміт)"
      2-3 Maze 5_instruction: "Проведи мене до зеленої лиходійки! (Важай на динаміт)"
      2-3 Maze 6_instruction: "Зберігай спокій та допоможи мені знайти лиху свиню.
        Інакше я можу розсердитися!"
      2-3 Maze 7_instruction: "Проведи мене до зеленої лиходійки! (Важай на динаміт)"
      2-3 Maze 8_instruction: "Доведи мене до свині!"
      2-3 Maze 9_instruction: "Проведи мене до зеленої лиходійки! (Важай на динаміт)"
      2-3 Maze Loops 1_instruction: "Можеш допомогти мені дістатися свині, використавши
        5 блоків?"
      2-3 Maze Loops 17_instruction: "Доведи мене до соняшника!"
      2-3 Maze Loops 18_instruction: "Доведи мене до соняшника!"
      2-3 Maze Loops 19_instruction: "Доведи мене до соняшника!"
      2-3 Maze Loops 20_instruction: "Доведи мене до соняшника!"
      2-3 Maze Loops 21_instruction: "Доведи мене до соняшника!"
      2-3 Maze Loops Assessment 1_instruction: "Оцінювання: доведи мене до соняшника,
        використовуючи лише 5 блоків! "
      2-3 Maze sq1_instruction: |
        This pig is ruffling my feathers.  Help me find
        him!
      2-3 Maze sq10_instruction: "Доведи мене до свині! Які блоки потрібно повторити?"
      2-3 Maze sq10v2_instruction: "Доведи мене до свині! Які блоки потрібно повторити?"
      2-3 maze sq11_instruction: "Доведи мене до свині! Які блоки потрібно повторити?"
      2-3 maze sq12_instruction: Можеш замінити попередню відповідь циклом, використовуючи
        блок "повторити ...разів"?
      2-3 maze sq13_instruction: Шановна людино. Мені зомбі. Мені голодний. Треба
        ... дістатися ... соняшника. Створи цикл за допомогою блоку "повторювати доки".
      2-3 maze sq14_instruction: "Можеш добратися до соняшника, використовуючи лише
        4 блоки?"
      2-3 maze sq15_instruction: "Можеш добратися до соняшника, використовуючи лише
        5 блоків?"
      2-3 maze sq16_instruction: "Гаразд, це схоже, але дещо відрізняється. Ти можеш
        зробити це за допомогою лише 5 блоків?"
      2-3 Maze sq2_instruction: "Простеж шлях та проведи мене до лихої свині. Уникай
        вибухівки, або полетить пір'я!"
      2-3 Maze sq3_instruction: "Проведи мене до зеленої лиходійки! (Важай на динаміт)"
      2-3 Maze sq4_instruction: "Зберігай спокій та допоможи мені знайти лиху свиню.
        Інакше я можу розсердитися!"
      2-3 Maze sq5_instruction: "Доведи мене до свині! Скільки разів потрібно повторити
        блок?"
      2-3 Maze sq6_instruction: 'Можеш замінити попередню відповідь на два блоки?
        (Підказка: використай цикл з блоком "повторити ... разів".)'
      2-3 Maze sq7_instruction: "Доведи мене до зеленої порушниці, використовуючи
        лише три блоки."
      2-3 Maze sq8_instruction: Доведи мене до свині! (Де ж блок "повторити ... разів",
        який мені потрібен?)
      2-3 Maze sq9_instruction: "Створи цикли, щоб дійти до свині, використовуючи
        найменше блоків."
      2-3_instruction: |
        Purple flowers may have either 1 or 0 nectar. Be careful
        not to collect nectar from a purple flower if it doesn't have any.
      2-3level1_instruction: "Допоможи пташці спіймати лихе порося, рухаючи її вперед"
      4-5 Artist 1_instruction: "Допоможи мені домалювати коробку. (Довжина кожної
        лінії - 300 пікселів) "
      4-5 Artist 10_instruction: Натисни "Запустити", щоб випробувати код. Потім повторюй
        це стільки разів, щоб завершити ескіз. Кольори будуть відрізнятися кожного
        разу.
      4-5 Artist 11_instruction: "Заверши зелені лінії. Лінії довжиною 300 пікселів
        та 15 пікселів одна від одної."
      4-5 Artist 2_instruction: "Можеш створити цикл цього коду, щоб завершити квадрат?"
      4-5 Artist 3.5_instruction: Гаразд, спробуй з'ясувати, що відбувається, якщо
        ти запустиш цей код (або натиснеш "Запустити", щоб випробувати його). Потім
        повтори це достатньо разів, щоб завершити ескіз. Кольори будуть (з великою
        ймовірністю) щоразу різними.
      4-5 Artist 3_instruction: "Цей прямокутний квітник має периметр 600. Довжина
        сторони - 200. Намалюй прямокутник."
      4-5 Artist 4_instruction: "Скільки градусів у колі? Створи цикл з блоків, щоб
        створити коло кольорів."
      4-5 Artist 5_instruction: "Який кут використаєш?"
      4-5 Artist 6_instruction: "Цей рівносторонній трикутник має кути 60, 60 та 60
        градусів. Кожна сторона має 200 пікселів. Заверши ескіз."
      4-5 Artist 7_instruction: "Цей прямокутний трикутник має кути 30, 60 та 90 градусів.
        Довжина похилої сторони рівна подвійній висоті зі 100 пікселів. Заверши малюнок."
      4-5 Artist 8_instruction: "Лінія по середині футбольного поля перпендикулярна
        до бічних ліній. Це поле має периметр 800 пікселів та 240 пікселів в довжину.
        Якої воно ширини? Намалюй межі та середню лінію."
      4-5 Artist 9_instruction: "Намалюй іншу половину так, щоб дизайн був симетричним.
        Трикутники - рівносторонні та в довжину мають 50 пікселів."
      4-5 Artist Assessment 1_instruction: "Оцінювання: використай цикл, щоб намалювати
        рівносторонній трикутник. Кожна сторона - 300 пікселів."
      4-5 Artist For Loops 1_instruction: "Введи числа від 1 до 10 в блоки ширини
        та запусти код."
      4-5 Artist For Loops 11_instruction: Завершуй блок "для" так, щоб він мав значення
        0, 20, 40, 60, 80... 200.
      4-5 Artist For Loops 12_instruction: 'Що трапиться, якщо ти заміниш чисел "від"
        та "до" навпаки? Заверши блок "для" так, щоб він перелічував числа 200, 180,
        160, 140, 120...0. '
      4-5 Artist For Loops 13_instruction: 'Модель починається без циклу "для" та
        містить дуже багато блоків. Використай блок "для", щоб завершити спіраль.
        Підказка: остання лінія має довжину 250 пікселів.'
      4-5 Artist For Loops 14_instruction: 'Хтось почав писати код, але потім зрозумів,
        що має бути простіший спосіб! Використай блок "для", щоб змінити блоки та
        завершити трикутну спіраль. (Підказка: остання лінія має довжину 300 пікселів.'
      4-5 Artist For Loops 15_instruction: 'Хтось почав писати код, але потім зрозумів,
        що має бути швидший спосіб! Використай блок "для", щоб змінити блоки та завершити
        шестикутну спіраль. (Підказка: остання лінія має довжину 200 пікселів.'
      4-5 Artist For Loops 2_instruction: |
        This is a "for" block. Instead of typing
        1,2,3... 10, the "for" block can repeat the blocks inside it and count the
        numbers for you. Place the number 10 into the "to" section of the "for"
        block.
      4-5 Artist For Loops 3_instruction: Як ми можемо рахувати від 1 до 50? Відредагуй
        блок "для".
      4-5 Artist For Loops 4_instruction: Заповни блок "для" так, що він рахував по
        черзі від 1 до 10.
      4-5 Artist For Loops 6_instruction: Намалюй квадрати зі сторонами 50, 60, 70,
        80 та 90 пікселів. Ти повинен використати функцію "малювати квадрат" п'ять
        разів.
      4-5 Artist For Loops 7_instruction: 'Намалюй такі самі квадрати, але використай
        при цьому блок "рахувати з" для зміни їх розміру.  Вбудуй блок "лічильник"
        в функцію "малювати квадрат". Підказка: Він знаходиться в категорії "Змінні".'
      4-5 Artist For Loops 8_instruction: Можеш заповнити програму шляхом розміщення
        блоків всередині блоків "для", щоб рахувати від 10 до 200 десятками? Блоки
        "для"  знаходяться у категорії Цикли.
      4-5 Artist For Loops 9_instruction: Ці кола мають розмір 5, 10, 15, 20, 25,
        30, та 35. Намалюй кола, використовуючи блок "для".
      4-5 Artist Free Draw 1_instruction: "Вільне малювання! Намалюй будь-що, на що
        маєш натхнення творити."
      4-5 Artist Functions 1_instruction: "Використай цикл повторення, щоб намалювати
        трикутник."
      4-5 Artist Functions 10a_instruction: "Розмісти цей код в функцію 'намалювати
        сніжинку' та заміни 50 параметром 'розмір'. Функція вже викликана, щоб створити
        сніжинку на 100 пікселів."
      4-5 Artist Functions 10b_instruction: 'Використай функцію "намалювати сніжинку",
        щоб створити сніжинки різних розмірів. Підказка: перша сніжинка має довжину
        25 та кожна сніжинка - вдвічі більшого розміру, ніж попередня.'
      4-5 Artist Functions 11_instruction: 'Функція "намалювати шестикутник" використовує
        функцію "намалювати трикутник". Заверши функцію шестикутника. (Підказка: шестикутник
        має 6 сторін, кожна довжиною 100 пікселів)'
      4-5 Artist Functions 12_instruction: 'Заверши функцію "намалювати хвилі". Кожна
        хвиля складається с однієї Верхньої хвилі та однієї Нижньої хвилі. Підказка:
        намалюй 5 синіх хвиль.'
      4-5 Artist Functions 13 Free play_instruction: "Тут наведено деякі функції,
        щоб намалювати планети, зорі, ракети та роботів. Використай їх всіх для створення
        малюнка, яким зможеш поділитися з твоїми друзями."
      4-5 Artist Functions 14 Free play_instruction: Ми пропонуємо тобі декілька функцій.
        Використай їх так, як тобі подобається з одним чи кількома циклами, щоб створити
        малюнок, яким ти зможеш поділитися з друзями. Натисни "Запустити", щоб побачити
        приклад.
      4-5 Artist Functions 15 Assessment_instruction: 'Оцінювання: Використай функцію
        "намалювати квадрат", щоб створити квадрати. Квадрати - 50, 100 та 150 пікселів.'
      4-5 Artist Functions 2a_instruction: Зараз помісти ці блоки в нову функцію під
        назвою "намалювати маленький трикутник" та виконай її.
      4-5 Artist Functions 2b_instruction: Тепер створи функцію під назвою "намалювати
        маленький трикутник" за допомогою даних блоків.
      4-5 Artist Functions 3_instruction: 'Тепер створи функцію "намалювати середній
        трикутник" і "намалювати великий трикутник". Функція "намалювати маленький
        трикутник" вже готова. Трикутники мають сторони довжинами 50 (малий), 100
        (середній) і 150 (великий). '
      4-5 Artist Functions 4_instruction: Ця нова функція "намалювати трикутник" має
        параметр і може виконати роботу всіх трьох попередніх функції. Намалюй такі
        ж трикутники за допомогою цієї нової функції.
      4-5 Artist Functions 5_instruction: Можеш змінити функцію "намалювати трикутник"
        на "намалювати квадрат", щоб змінити малюнок?
      4-5 Artist Functions 6_instruction: 'Використовуй функції "намалювати квадрат"
        і "намалювати трикутник", щоб намалювати будинок. (Підказка: сторони квадрата
        по 200 пікселів)'
      4-5 Artist Functions 6b_instruction: За допомогою функцій малювання квадрата
        та трикутника, та інших блоків, створи будинок, додаючи ці блоки до функції
        "малювати будинок" та викликаючи її.
      4-5 Artist Functions 7_instruction: Використай функцію "намалювати будинок",
        щоб намалювати будинки на 100 пікселів і 50 пікселів. Відстань між будинками
        має бути 50 пікселів.
      4-5 Artist Functions 8_instruction: Функція "малювати квітку" має параметр,
        який дозволяє вказати висоту стебла. Встанови її в 200 і подивись, що відбуватиметься.
      4-5 Artist Functions 9_instruction: "Намалюй ці 3 квітки. Перша має висоту 100,
        а кожна наступного квітка на 50 пікселів вища за попередню. Квіти розміщені
        на відстані 100 пікселів одна від одної."
      4-5 Artist Patterns 1_instruction: "Можеш намалювати цей квадрат, використавши
        цикл? Кожна сторона має довжину 20 пікселів."
      4-5 Artist Patterns 10_instruction: "Цей код малює два ряди шестикутників -
        зацикли все для виконання 4 рази, щоб намалювати увесь стільник. Підказка:
        потрібно буде стрибати назад на 120 пікселів у зовнішньому циклі, щоб Художник
        не виходив за межі екрану."
      4-5 Artist Patterns 11_instruction: "Скільки разів потрібно виконати цикл, щоб
        намалювати половину кола? Підказка: якщо у колі 360 градусів, а кожен цикл
        переміщується на 3 градуси, скільки разів потрібно повторити, щоб намалювати
        повне коло?"
      4-5 Artist Patterns 12_instruction: "Якщо скопіювати цей цикл і повернути ліворуч,
        а не праворуч, що відбувається? Зможеш повторити це, щоб намалювати хвилю?"
      4-5 Artist Patterns 13_instruction: "Тепер зациклимо все на виконання 4 рази,
        щоб створити цю рамочку. Зважай на кути - не можна просто повертати на 90
        градусів! Якщо поворот на 3 градуси 60 разів утворює коло, то які блоки коду
        створять чверть кола для кута?"
      4-5 Artist Patterns 2_instruction: "Якщо розмістити цикл квадрата всередині
        іншого циклу, це називається вкладеним циклом. Що потрібно додати до зовнішнього
        циклу, щоб намалювати поряд 15 квадратів у ряд?"
      4-5 Artist Patterns 3_instruction: "А тепер на рівень вище! Ми розмістили цілий
        блок коду всередині циклу, але потрібно повертати Художника на місце, щоб
        малювати наступну лінію. Які блоки можна додати в кінець останнього циклу,
        щоб намалювати всю сітку?"
      4-5 Artist Patterns 4_instruction: "Цей ромб має сторони по 50 пікселів сторін
        і кути 120 і 60 градусів. Намалюй його за допомогою циклу."
      4-5 Artist Patterns 5.5_instruction: "Скільки разів потрібно повторити цей блок,
        щоб намалювати повну сітку ромбів?"
      4-5 Artist Patterns 5_instruction: "Повторимо це для того, щоб намалювати ряд
        з 6 ромбів. Зауваж, що ми змінили код ромба, щоб повторювати 3 рази, а не
        2 - як думаєш, чому?"
      4-5 Artist Patterns 6_instruction: "Скільки разів потрібно повторити цей блок,
        щоб намалювати повну сітку ромбів?"
      4-5 Artist Patterns 7_instruction: Змінимо код останнього завдання, щоб створити
        цей складніший узор. Зауваж, як перекриваються ромби і спробуй змінити перший
        блок "стрибнути вперед" зі 100 на 50 (вполовину) - а тепер, на скільки повинен
        Художник перестрибувати вдруге в "стрибнути назад"?
      4-5 Artist Patterns 8_instruction: "Використай цикл, щоб намалювати цей шестикутник
        зі сторонами 40 пікселів і кутами 60 градусів."
      4-5 Artist Patterns 9.5_instruction: "Розмісти у циклі цей код, щоб намалювати
        два ряди шестикутників. Зауваж, як другий ряд зміщено вправо."
      4-5 Artist Patterns 9_instruction: "А тепер повтори цей код 3 рази, щоб намалювати
        весь ряд. Підказка: кожен шестикутник має ширину 60 пікселів від найлівішої
        до найправішої точки."
      4-5 Artist Patterns Free Play_instruction: "Вільна гра - спробуй створити власний
        візерунок!"
      4-5 Bee Conditionals - FC Test_instruction: "Зараз бджолі потрібен тільки нектар.
        Не всі об'єкти є квітами, тож перевіряй під кожною хмаринкою, чи приховує
        вона квітку. Якщо так, то можна збирати нектар."
      4-5 Bee Conditionals 1 (copy 1)_instruction: |
        The bee can't tell if this is
        a flower or a honeycomb. Gather nectar only from flowers, but first check
        if it is a flower or a honeycomb.
      4-5 Bee Conditionals 1_instruction: "Бджілка не бачить, квітка це чи стільник.
        Збирай нектар лише з квітів, але спершу перевір, квітка це чи стільник."
      4-5 Bee Conditionals 2 (copy 1)_instruction: |
        The bee only wants nectar right
        now. Remember, not all objects are flowers, so check to gather nectar only
        at flowers.
      4-5 Bee Conditionals 2_instruction: "Бджола хоче збирати лише нектар. Пам'ятай,
        що не всі об'єкти є квітами, тож спершу перевіряй кожну хмаринку, щоб побачити,
        чи приховує вона квітку. Якщо так, то можна збирати нектар."
      4-5 Bee Conditionals 3_instruction: "Тепер Бджола хоче лише робити мед. Перевіряй,
        щоб робити мед лише у стільниках."
      4-5 Bee Conditionals 4 (copy 1)_instruction: |
        The unknown object is either
        a flower or a honeycomb. Use the if/else block to collect nectar if it is
        a flower, else to make honey (because it is a honeycomb).
      4-5 Bee Conditionals 4_instruction: "Невідомий об'єкт є квіткою або стільником.
        Використай блок якщо/інакше, щоб збирати нектар, якщо це квітка, інакше робити
        мед (оскільки тоді це стільник)."
      4-5 Bee Conditionals 5_instruction: "Під хмаринкою може бути квітка або стільник.
        Скористайся блоком якщо/інакше, щоб зібрати нектар, якщо там квітка, або робити
        мед у протилежному випадку (бо тоді там стільник)."
      4-5 Bee Conditionals 6 (copy 1)_instruction: |
        This purple flower may have either
        3, 2, or 1 nectar. Here an if-else block is combined with another if-else
        block to create an if, else-if, else block. Complete the solution to collect
        the unknown amount of nectar.
      4-5 Bee Conditionals 6_instruction: "Фіолетова квітка може мати 3, 2 або 1 нектар.
        Ось блок якщо-інакше, з'єднаний з іншим блоком якщо-інакше, щоб утворився
        блок якщо-інакше якщо-інакше. Завершуй розв'язок, щоб зібрати невідому кількість
        нектару."
      4-5 Bee Conditionals 7_instruction: Пам'ятай, що фіолетові квіти можуть 3, 2
        або 1 нектарів. Завершуй функцію "перевірити фіолетову квітку" і використай
        її, щоб зібрати весь нектар з квітів.
      4-5 Bee Conditionals 8_instruction: 'Напиши середину функції "перевірити квітку
        і зробити мед". Твоя функція має перевіряти, скільки нектару має фіолетова
        квітка: 3, 2, 1 і збирати весь цей нектар. А тоді переміщуватись вперед і
        робити мед.'
      4-5 Bee Conditionals Assessment 1_instruction: 'Оцінювання: Цей код є неправильним.
        Завершуй функцію "отримати нектар або зробити мед", а потім виклич її, щоб
        зібрати весь нектар і мед. Пам''ятай, що фіолетові квіти можуть мати 3, 2
        або 1 нектарів.'
      4-5 Bee Debugging 1_instruction: "Ці блоки не дають мені спокою. Можеш їх виправити?"
      4-5 Bee Debugging 10_instruction: "Знайди помилки та виправ їх."
      4-5 Bee Debugging 11_instruction: "Це правильно пораховано?"
      4-5 Bee Debugging 2_instruction: "Допоможи Бджолі зібрати нектар і зробити мед."
      4-5 Bee Debugging 3_instruction: "Знайди помилки та виправ їх."
      4-5 Bee Debugging 4_instruction: "Ці блоки не працюють. Який має бути шаблон?"
      4-5 Bee Debugging 5_instruction: "Щось тут не так..."
      4-5 Bee Debugging 6_instruction: "Фіолетова квітка має невідому кількість нектару.
        Виправ блоки, щоб зібрати весь нектар з квітів."
      4-5 Bee Debugging 7_instruction: "Функції щось бракує ..."
      4-5 Bee Debugging 8_instruction: "З функцією все гаразд, але її неправильно
        використано."
      4-5 Bee Debugging 9_instruction: "Чому бджола не робить достатньо меду?"
      4-5 Bee Debugging Assessment 1_instruction: "Оцінювання: Виправ код."
      4-5 Bee Nested Loops 1_instruction: "Використовуй цикли, щоб зібрати весь нектар."
      4-5 Bee Nested Loops 2_instruction: "Збери весь нектар з усіх квітів. Використовуй
        вкладені цикли. "
      4-5 Bee Nested Loops 3_instruction: "Збери весь нектар, розмістивши початковий
        код у вкладеному циклі."
      4-5 Bee Nested Loops 4_instruction: "Збери весь нектар з усіх квітів та зроби
        мед в усіх стільниках. Використовуй вкладені цикли. "
      4-5 Bee Nested Loops 5_instruction: "Збери весь нектар, використовуючи вкладений
        цикл."
      4-5 Bee Nested Loops 6_instruction: "Збери весь нектар."
      4-5 Bee Nested Loops 7_instruction: "Розмісти цей цикл всередині іншого, щоб
        створити вкладений цикл і збери весь нектар з квітів."
      4-5 Bee Nested Loops 8_instruction: "Збери весь нектар з цих квітів, вклавши
        цикл поки. Заміни внутрішній блок повторити разів блоком поки. "
      4-5 Bee Nested Loops 9_instruction: "Збери весь нектар з цих квітів, розмістивши
        цикл поки всередині циклу повторити."
      4-5 Bee Nested Loops Assessment 1_instruction: "Оцінювання - Збери весь нектар
        і зроби весь мед, використавши цикли."
      4-5 Bee Nested Loops Rows_instruction: "Збери нектар з усіх рядів квітів. Використовуй
        вкладені цикли."
      4-5 Maze 1 (copy 1)_instruction: "Шановна людино. Мені зомбі. Треба ... їсти
        ... соняшник."
      4-5 Maze 1_instruction: "Шановна людино. Мені зомбі. Треба ... їсти ... соняшник."
      4-5 Maze 10_instruction: "Можеш добратися до соняшника, використовуючи лише
        4 блоки?"
      4-5 Maze 11_instruction: "Можеш дістатися до соняшника, використавши тільки
        шість блоків?"
      4-5 Maze 12_instruction: "Гаразд, це дещо відрізняється. Зможеш зробити це,
        використавши лише шість блоків?"
      4-5 Maze 13_instruction: "Доведи мене до свині!"
      4-5 Maze 14_instruction: Доведи мене до свині! Використай блок "повторювати
        доки".
      4-5 Maze 2 (copy 1)_instruction: "Проведи зомбі до соняшника, але уникай пожирача!"
      4-5 Maze 2_instruction: "Проведи зомбі до соняшника, але уникай пожирача!"
      4-5 Maze 3 (copy 1)_instruction: "Треба... дістатися ...до соняшника."
      4-5 Maze 3_instruction: "Треба... дістатися ...до соняшника."
      4-5 Maze 4 (copy 1)_instruction: Спробуй блок "повторити", щоб використовувати
        менше блоків...
      4-5 Maze 4_instruction: Спробуй блок "повторити", щоб використовувати менше
        блоків...
      4-5 Maze 5 (copy 1)_instruction: "Можеш вирішити цю задачу, використовуючи найменшу
        кількість блоків?"
      4-5 Maze 5_instruction: "Можеш розв'язати цю задачу, використовуючи найменшу
        кількість блоків?"
      4-5 Maze 6 (copy 1)_instruction: "Можеш вирішити цю задачу, використовуючи найменшу
        кількість блоків?"
      4-5 Maze 6_instruction: "Можеш розв'язати цю задачу, використовуючи найменшу
        кількість блоків?"
      4-5 Maze 7_instruction: "Шановна людино. Мені зомбі. Треба ... їсти ... соняшник."
      4-5 Maze 8_instruction: Використовуй блок "повторити", щоб привести зомбі до
        соняшника. (Остерігайся пожирачів!)
      4-5 Maze 9_instruction: Створи цикл блоком "повторювати доки".
      4-5 Maze Assessment 1_instruction: "Оцінювання: Дістанься соняшника."
      4-5 Maze Conditionals 1_instruction: "Використовуй блок повторення, щоб провести
        зомбі до соняшника."
      4-5 Maze Conditionals 10_instruction: "Зможеш додати ще 3 блоки, щоб допомогти
        мені пройти складніший лабіринт? Якщо все зроблено правильно, я зможу проходити
        по довільному кривому шляху будь-якої довжини."
      4-5 Maze Conditionals 2_instruction: "Використовуй блок повторення, щоб провести
        зомбі до соняшника."
      4-5 Maze Conditionals 3_instruction: 'Блок "якщо" дає змогу самостійно вирішувати,
        коли повертати. Підказка: потрібно додати всього лише один блок, але досліди,
        як ми його налаштували, щоб можна було зробити це самостійно наступного разу.'
      4-5 Maze Conditionals 4_instruction: Гаразд, це схоже на попереднє завдання,
        але тобі треба згадати, як ми використовували блоки "якщо" і "повторити" разом.
      4-5 Maze Conditionals 5_instruction: Мені хочеться соняшника! Використовуй блок
        "якщо", щоб скерувати мене туди найменшою кількістю блоків.
      4-5 Maze Conditionals 6_instruction: Мені хочеться соняшника! Використовуй блок
        "якщо", щоб скерувати мене туди найменшою кількістю блоків.
      4-5 Maze Conditionals 7_instruction: "Гаразд, зробимо це ще раз для практики
        - це не дуже відрізняється, але остерігайся пожирачів!"
      4-5 Maze Conditionals 8_instruction: "Блок \"якщо-інакше\" перевіряє умову,
        потім \nвиконує одну АБО іншу дію. Щоб скерувати мене до соняшника, використай
        \nцей новий блок.\n"
      4-5 Maze Conditionals 9_instruction: Ще трохи практики використання блоку "якщо-або".
        Зможеш зробити усе правильно з першої спроби?
      4-5 Maze Conditionals Assessment 1_instruction: Скеруй мене до соняшника якомога
        меншою кількістю блоків "повторювати доки" і "якщо-інакше".
      4-5 Nested Loops 1_instruction: "Завершуй код, щоб намалювати ці трикутники.
        \ Перший вже готовий.  Підказка: 3 трикутники за 360 градусів обертання."
      4-5 Nested Loops 10_instruction: "Намалюй останній рядок зірок на цьому прапорі
        за цикл наданих блоків. Зірки розміщені на відстані 50 пікселів одна від одної,
        але пам'ятай, що самі зірки мають 30 пікселів у ширину."
      4-5 Nested Loops 11_instruction: "Можеш створити ці 10 квадратів на тротуарі
        за допомогою вкладеного циклу? Кожен квадрат має 30 пікселів."
      4-5 Nested Loops 12_instruction: "Можеш створити ці 36 трикутників за допомогою
        вкладеного циклу?"
      4-5 Nested Loops 2_instruction: "Тепер розмісти цей цикл всередині іншого циклу,
        щоб намалювати 10 трикутників.  Це називається вкладеним циклом.  Підказка:
        Всі 10 трикутників виконують поворот на 360 градусів.  "
      4-5 Nested Loops 3_instruction: |
        Намалюй сонце, розміщуючи початковий код всередині іншого циклу. Це називається вкладеним циклом. \r
      4-5 Nested Loops 5_instruction: "Зацикли поданий код, щоб створити вітряк."
      4-5 Nested Loops 6_instruction: "Зможеш створити шестикутник зацикливши код
        трикутника?"
      4-5 Nested Loops 7_instruction: "Виконай цю конструкцію 10 разів. На скільки
        потрібно щоразу повертати у циклі? (Підказка: скільки буде 360 поділити на
        10?)"
      4-5 Nested Loops 8_instruction: "Повторюй цей дизайн 6 разів. На скільки потрібно
        щоразу повертати у циклі? (Підказка: скільки буде 360 поділити на 6?)"
      4-5 Nested Loops 9_instruction: "Намалюй зуби в роті алігатора!"
      4-5 Nested Loops Assessment 1_instruction: "За допомогою вкладеного циклу завершуй
        оформлення."
      4-5 While Loops 1_instruction: Перемісти мене до ями і заповни її  двома відрами
        землі, використовуючи блок "заповнити".
      4-5 While Loops 2_instruction: Перемісти мене на купу землі і видали її 5 відрами,
        скориставшись блоком "видалити".
      4-5 While Loops 3_instruction: "Перемісти мене на купу бруду і видали його,
        потім перемісти до ями і повністю заповни її.  Підказка: Скористайся якомога
        меншою кількістю блоків."
      4-5 While Loops 4_instruction: "Ого, я знайшла дуже глибоку яму! Я не знаю,
        скільки відер землі для неї потрібно. Можеш написати програму, яка наповнює
        їх, поки земля не стане рівною? Підказка: на цей раз спробуй скористатись
        циклом поки."
      4-5 While Loops 5_instruction: "Ого, а тепер дві великі ями! Можеш написати
        програму, яка наповнить їх землею, допоки поверхня не стане рівною?"
      4-5 While Loops 6_instruction: "Ого, а тепер є велика купа землі! Можеш написати
        програму, яка видалить її, зрівнявши поверхню?"
      4-5 While Loops 7_instruction: "Ого, а тут три купи бруду! Можеш написати програму,
        яка видалить їх усі, зрівнявши землю?"
      4-5 While Loops 8_instruction: " Ого, я знайшла дуже глибоку яму і величезну
        купу бруду.  Скільки потрібно відер землі, щоб вирівняти поверхню? Підказка:
        в обох випадках використай цикл поки."
      4-5 While Loops Assessment 1_instruction: "Тут багато ям та куп. Допоможи заповнити
        або видалити їх, щоб вирівняти землю."
      AlgPD DR Free Play_instruction: Create a function based on your own word problem.
      AllTheThings Applab - Turtle move with button_instruction: |
        Add a button that
        moves the turtle when clicked.  (Click to see full instructions)
      allthethings data blocks test_instruction: |
        Please sign in to test applab levels
        (By design, applab levels only work if signed in. Normally, we make people
        sign in, but this is only enforceable for a whole script and would be annoying
        to do for the allthethings script).
      allthethings design mode elements_instruction: |
        Please sign in to test applab
        levels (By design, applab levels only work if signed in. Normally, we make
        people sign in, but this is only enforceable for a whole script and would
        be annoying to do for the allthethings script).
      allthethings_moviebot_instruction: |
        This level cloned from "U3 Digital Assistant
        Target"
      allthethings_template_backed1_instruction: "Backed by a template #1. Please\nsign
        in to test applab levels (By design, applab levels only work if signed\nin.
        Normally, we make people sign in, but this is only enforceable for a whole\nscript
        and would be annoying to do for the allthethings script). \n"
      allthethings_template_backed2_instruction: |
        Backed by a template #2. Please
        sign in to test applab levels (By design, applab levels only work if signed
        in. Normally, we make people sign in, but this is only enforceable for a whole
        script and would be annoying to do for the allthethings script).
      App Lab test_instruction: "тест"
      Applab allthethings onRecordEvent_instruction: |
        Please sign in to test applab
        levels (By design, applab levels only work if signed in. Normally, we make
        people sign in, but this is only enforceable for a whole script and would
        be annoying to do for the allthethings script).
      Applab test_instruction: This level is submittable. For testing only!
      AppLab_test02_instruction: |
        One sentence summary of the activity. Click to
        view full instructions.
      Artist - Nested Loops 1_instruction: |
        Complete the code to draw these triangles.  The
        first one is done for you.  Hint:  3 triangles in a 360 degree rotation.
      Artist - Nested Loops 10_instruction: |
        Draw the last row of stars on this flag
        by looping the provided blocks. The stars are 50 pixels apart, but remember
        that the stars themselves are 30 pixels wide.
      Artist - Nested Loops 11_instruction: |
        Can you draw these 10 squares of this
        sidewalk using a nested loop? Each square is 30 pixels.
      Artist - Nested Loops 12_instruction: |
        Can you draw these 36 triangles using
        a nested loop?
      Artist - Nested Loops 2_instruction: "Now nest this loop inside another loop\nto
        draw 10 triangles.  This is called a nested loop.  Hint: All 10 triangles\ncomplete
        a 360 degree rotation.  \n"
      Artist - Nested Loops 3_instruction: |
        Create a sun by nesting the starter code
        in another loop. This is called a nested loop.\r
      Artist - Nested Loops 5_instruction: "Циклічне повторення даний код для створення
        млині."
      Artist - Nested Loops 6_instruction: |
        Can you draw a hexagon by looping the
        triangle code?
      Artist - Nested Loops 7_instruction: |
        Loop this design 10 times. How much do
        you have to turn each time you loop? (Hint: What is 360 divided by 10?)
      Artist - Nested Loops 8_instruction: |
        Loop this design 6 times. How much do
        you have to turn each time you loop? (Hint: What is 360 divided by 6?)
      Artist - Nested Loops 9_instruction: Намалюйте зубів в рот на "Алігатор"!
      Artist - Nested Loops Assessment 1_instruction: "Завершуй оформлення, використавши
        вкладений цикл."
      Auto Open Function Editor_instruction: 'Можна викликати функції з інших функцій!
        Використай функцію "фігура" за основу, створи 3 будинки, кожен з яких на 20
        пікселів більший за попередній, починаючи з 50 пікселів. Використання циклу
        з лічильником може стати у нагоді. '
      Bee Recommended Blocks test_instruction: Фіолетові квіти можуть мати 1 або 0
        нектарів, але не відомо скільки саме! Обережно - не збирай нектар з квітки,
        якщо його там немає. Перевір, чи нектар рівний 1 за допомогою блоку "якщо".
      Big Game Animation 1 (copy 1)_instruction: |
        Now that you've learned to write
        simple linear functions, let's work on using them to add some movement to
        our game. Click play to see what your game can currently do (not much!), update
        any variables you like, and then click finish to move on.
      Big Game Animation 1_instruction: |
        Now that you've learned to write simple
        linear functions, let's work on using them to add some movement to our game.
        Click "Run" to see what your game can currently do (not much!), update any
        variables you like, and then click finish to move on.
      Big Game Animation 2 (copy 1)_instruction: |
        The function 'update-target'
        function takes the target's current x value, and returns an updated value.
        Complete the 'update-target' function so that it adds to the x value each
        time it is called. The more you add to x, the faster the target will go.
      Big Game Animation 2_instruction: |
        The update-target function takes the target's
        current x value, and returns an updated value. Complete the update-target
        function so that it adds to the x value each time it is called. The more you
        add to x, the faster the target will go.
      Big Game Animation 3_instruction: |
        The update-danger function should work just
        like update-target, except that the danger should move from the right side
        over towards the left. Complete update-danger to make the danger fly across
        the screen.
      Big Game Animation 4_instruction: |
        At this point in your game, your danger
        should run across the screen from right to left, and your target should run
        across from left to right. They don't ever come back on screen once they've
        left, but we'll take care of that later. Take a minute to make sure your
        game is working like you want it to, and then click "Finish" to move on.
      Big Game Booleans 1_instruction: Коли ми востаннє працювали над грою, ми дістались
        до цілі, і спрайти літали по екрану, але ніколи не повертались. Клацни "Запустити",
        щоб переглянути, як гра працює на даний момент, а тоді "Завершити", і ми спробуємо
        зробити так, щоб спрайти знову з'являлись на екрані.
      Big Game Booleans 2_instruction: |
        Go to the Functions section of the toolbox
        and complete the safe-left? function so that it returns true if the sprite's
        x coordinate is greater than -50. If you're successful you should see the
        Danger go off the left side and then return on the right side.
      Big Game Booleans 3_instruction: |
        Now that you've got safe-left?, let's fill
        in safe-right? - it should take in a sprite's x coordinate and return true
        if that coordinate is less than 450. Once your safe-right? is complete you
        should see the Target go off the right side of the screen and return on the
        left.
      Big Game Booleans 4_instruction: |
        Complete the onscreen? function so that it
        checks whether both safe-left? and safe-right? are true.
      Big Game Booleans 5_instruction: |
        At this point your Danger should run across
        the screen from right to left, your Target should run across from left to
        right, and they should both return to the opposite side, repeatedly. Take
        a minute to make sure your game is working like you want it to, and then click
        "Finish" to move on.
      Big Game Collision 1 (copy 1)_instruction: "Коли ви останній раз працював на
        вашій грі ми отримали наші цілі і небезпека спрайт літати по всьому екрану,
        але вони ніколи не повертається. Посилання запустити, щоб побачити, як ваша
        гра в даний час працює і потім натисніть закінчити, і ми будемо працювати
        з виготовлення цих спрайт, з'являються знову на екрані після того, як вони
        вийшли."
      Big Game Collision 1_instruction: |
        At this point you've programmed a video
        game with a moving Target and Danger, both of which return to the screen once
        they've left, and a Player that responds to keyboard input. Click "Run"
        to see how your game is currently working, and then we'll dig into the final
        missing piece - collision detection!
      Big Game Collision 2_instruction: |
        To move the player up and down, we'll need
        to use a conditional block to figure out which key is pressed and respond
        accordingly. Computers read keypresses as numeric key codes - the up arrow
        is 38 and the down arrow is 40. You can lookup other key codes in your student
        workbook. Edit the 'update-player' function so that if moves the player
        up when the up arrow is pressed, or down when the down arrow is pressed.
      Big Game Collision 3_instruction: |
        Use the Distance Formula, so the distance
        function returns the distance between the player's center coordinates (px,
        py) and another sprite's center coordinates (cx, cy).
      Big Game Collision 4_instruction: |
        Complete the collide? function so that it
        returns true if the distance between two points is less than 100 pixels apart.
      Big Game Complete_instruction: "Демо завершеного проекту великої гри Інформатика
        в алгебрі"
      Big Game Final_instruction: "Ви зробили це! Зараз ваша гра має бути повністю
        функціональною, тож можете пограти і внести остаточні виправлення. Коли будете
        задоволені результатом, клацніть Завершити і матимете можливість поділитись
        посиланням на свою гру. Успіхів!"
      Big Game Player 1_instruction: |
        We're getting really close to a finished game!
        Last time you worked on your game, you used booleans to make your Target and
        Danger return to the screen once they've left. Click Run to see how your
        game looks right now, and then we'll get to making your Player move up and
        down.
      Big Game Player 2_instruction: |
        Edit the update-player function so the player
        moves up when the up arrow (keycode 38) is pressed, and moves down (keycode
        40) when the down arrow is pressed.
      Big Game Testing_instruction: "Демо завершеного проекту великої гри Інформатика
        в алгебрі"
      Big Game Vars 1 (copy 1)_instruction: |
        Let's get started on your Big Game!
        Here you'll see a whole bunch of placeholder code that you'll eventually
        replace with your own, but for now we're only going to worry about defining
        variables. Click "Run" to see what the game looks like with the default
        values.
      Big Game Vars 1_instruction: |
        Let's get started on your Big Game! Here you'll
        see a whole bunch of placeholder code that you'll eventually replace with
        your own, but for now we're only going to worry about defining variables.
        Click "Run" to see what the game looks like with the default values.
      Big Game Vars 2 (copy 1)_instruction: |
        The first step to making this game your
        own is to give it a good Title. Click edit on the 'title' and 'subtitle'
        variables and change them to something new.
      Big Game Vars 2_instruction: |
        The first step to making this game your own is
        to give it a good Title. Click edit on the title and subtitle variables and
        change them to something new.
      Big Game Vars 3 (copy 1)_instruction: |
        Now let's set the background for your
        new game. Edit the 'bg' variable and select a new background Image from
        the dropdown.
      Big Game Vars 3_instruction: |
        Now let's set the background for your new game.
        Edit the bg variable and select a new background Image from the dropdown.
      Big Game Vars 4 (copy 1)_instruction: |
        Awesome, now you can update the variables
        for your Player, Target, and Danger. Feel free to play with all of the variables
        at this point to make your game look like you'd like it to. Click 'finish'
        when you're done.
      Big Game Vars 4_instruction: |
        Awesome! Now you can update the variables for
        your Player, Target, and Danger. Feel free to play with all of the variables
        at this point to make your game look like you'd like it to. Click "Finish"
        when you're done.
      Brad Spooky House Copy_instruction: |
        Freeplay: Here are the functions you've
        written, and some more for you to play with. Draw something awesome! Play
        with the pen width to see how different your drawings look!
      Brad Spooky House_instruction: |
        Freeplay: Here are the functions you've written,
        and some more for you to play with. Draw something awesome! Play with the
        pen width to see how different your drawings look!
      Building a Foundation Assessment_instruction: |
        Build a three level pyramid,
        there are no other directions, so just play with the pieces until you get
        it!
      Busy Bee 2_instruction: "У цієї бджілки купа роботи! Можеш знайти якісь шаблони,
        щоб спростити її код?"
      Busy Bee_instruction: "У цієї бджілки купа роботи! Можеш знайти якісь шаблони,
        щоб спростити її код?"
      C3-Farmer While Loops 1_instruction: |
        Move me to the hole and fill it with
        two shovelfuls of dirt, using the "fill" block.
      C3-Farmer While Loops 2_instruction: |
        Move me to the pile of dirt and remove
        it with 5 shovel scoops, using the 'remove' block.
      C3-Farmer While Loops 3_instruction: |
        Move me to the pile and remove all of
        it, then move to the hole and fill it completely.  Hint:  Use as few blocks
        as possible.
      C3-Farmer While Loops 4_instruction: |
        Wow, I found a really deep hole! I don't
        know how many shovelfuls of dirt it needs.  Can you write a program that fills
        it until the ground is even?  Hint:  Try using the while loop this time.
      C3-Farmer While Loops 5_instruction: |
        Wow, now there are two deep holes! Can
        you write a program that fills them both until the ground is even?
      C3-Farmer While Loops 6_instruction: |
        Wow, now there is a large pile of dirt!
        Can you write a program that removes all of it so the ground is even?
      C3-Farmer While Loops 7_instruction: |
        Wow, now there are three piles of dirt!
        Can you write a program that removes each of them until the ground is even?
      C3-Farmer While Loops 8_instruction: |2
         There is a really deep hole and a really
        large pile of dirt.  How many shovelfuls of dirt need to be moved around to
        make the ground flat?  Hint: Use the while loop for both.
      C3-Farmer While Loops Assessment 1_instruction: |
        There are a lot of holes and
        piles.  Help me to fill and remove them to make the ground flat.
      Calc Circles of Eval .1_instruction: |
        You’ll be writing a kind of code called
        Evaluation Blocks, because each block of code evaluates to a single value.
        Change the ??? in this code so that the block evaluates to 5.
      Calc Circles of Eval .2_instruction: |
        This Evaluation Block is a multiplication
        function which takes two numbers and returns the product of those numbers.
        Edit this block so that it multiplies 2 * 5
      Calc Circles of Eval .3_instruction: |
        Here's a function for addition which
        takes two numbers and returns their sum. Use this Addition Block to add 3
        + 6.
      Calc Circles of Eval .4_instruction: |
        Here we've nested an Addition Block
        inside a Multiplication Block. Complete this code so it multiplies 3 by (4
        + 1)
      Calc Circles of Eval 1 (copy 1)_instruction: |
        Convert this statement to <some_shape>
        of evaluation.
      Calc Circles of Eval 1_instruction: |
        Every mathematical operator (+, -, *,
        /, and so on) can be represented by an Evaluation Block in code. Change the
        Evaluation Block to match the expression.
      Calc Circles of Eval 2 (copy 1)_instruction: |
        Convert this statement to <some_shape>
        of evaluation.
      Calc Circles of Eval 2_instruction: |
        Use a Multiplication Block to complete
        this code.
      Calc Circles of Eval 3_instruction: |
        Complete the Evaluation Blocks to match
        this statement.
      Calc Circles of Eval 4_instruction: |
        This code is missing a couple of Evaluation
        Blocks - make sure you put everything in the right order.
      Calc Circles of Eval 5_instruction: |
        Complete the Evaluation Blocks to match
        this statement.
      Calc Circles of Eval 6_instruction: |
        Complete the Evaluation Blocks to match
        this expression.
      Calc Circles of Eval 7_instruction: |
        Complete the Evaluation Blocks to match
        this statement.
      Calc Circles of Eval 8_instruction: |
        Complete the Evaluation Blocks to match
        this statement.
      Calc Circles of Eval 9_instruction: |
        Complete the Evaluation Blocks to match
        this statement.
      Calc Circles of Eval Free Play_instruction: |
        Free Play: Try using the Evaluation
        Blocks to write some equations of your own. How does nesting the blocks in
        different ways impact their evaluation?
      Calc Define Funcs 1 (copy 1)_instruction: |
        Let's look at some more algebraic
        functions now. Here's a function translated from the simple algebraic function
        f(x) = x + 1. What would you expect this function to output if provided an
        input of 15?
      Calc Define Funcs 1_instruction: |
        Let's look at some more traditional algebraic
        functions now. Here's a function translated from the simple algebraic function
        f(x) = x + 1. What would you expect this function to output if provided an
        input of 15?
      Calc Define Funcs 2_instruction: |
        Write a function f that takes a parameter
        x and returns x - 10. Test your function using f(15).
      Calc Define Funcs 3_instruction: |
        We don't have to call our function f every
        time; create a function called times-ten that should take a parameter x and
        return x * 10. Once you've created the function, run times-ten(50).
      Calc Define Funcs 4_instruction: |
        Write a function called half that takes a
        number x and returns half that number. Once you've written the function,
        use it to calculate half(21)
      Calc Define Funcs 5 - multiply 1_instruction: |
        Oh no! We lost our multiply
        block! We'll have to create a function to multiply for us. To start off,
        write a function "f" that takes a parameter "x" and returns x*5. Test
        your function using f(3).
      Calc Design Recipe 1_instruction: |
        Let's use the Design Recipe to create a
        function called cube - this function should take in a Number and return that
        number to the power of 3. Make sure to write two example cases! When you're
        done, use your new function to calculate cube(7).
      Calc Design Recipe 2_instruction: |-
        Your school is holding a bake sale, and
        you need to track the cost of making each cookie, the money paid, and the
        total profit. Cookies cost $0.25 each to make, and sell for $1.50/cookie.\r
        Write
        the function cost, which takes in the number of cookies you intend to sell,
        and returns the cost of making those cookies.
      Calc Design Recipe 3_instruction: |
        Write the function sales which takes in
        the number of cookies sold, and produces the amount of money customers spent
        to buy those cookies (each cookie is sold at $1.50).
      Calc Design Recipe 4_instruction: |
        Using the two functions we just wrote, write
        the function profit, which takes in the number of cookies you sold, and gives
        you back the total profit you make from selling your cookies, accounting for
        the cost of baking them.
      Calc Free Play_instruction: |
        Free Play: Write functions and algorithms of your
        own design!
      Calc Rocket 1 (copy 1)_instruction: |
        In the last puzzle you wrote a contract
        for the function "rocket-height" that states it has a range of Number, domain
        of Number, and should return the height of the rocket traveling at 15 m/s
        after a given number of seconds. Let's write an example case now for the
        height of the rocket at 3 seconds.\r
        \r
        \r
        \r
          \r
        \r
      Calc Rocket 1_instruction: |
        In the last puzzle you wrote a contract for the
        function rocket-height that states it has a range of Number, domain of Number,
        and should return the height of the rocket traveling at 15 m/s after a given
        number of seconds. Let's write an example case now for the height of the
        rocket at 3 seconds.
      Calc Rocket 2_instruction: |
        Great, let's do one more example before writing
        the function - what should the rocket height be after 30 seconds?
      Calc Vars 1.1_instruction: |
        Here we've set the age variable to 17 years. Can
        you write an expression that calculates age in days?
      Calc Vars 1_instruction: |
        Variables allow us to name values so that we can
        easily refer to them repeatedly throughout our programs. Here's a variable
        called age. Set its value to your age and click run.
      Calc Vars 2 (copy 1)_instruction: |
        Here we've set the "age" variable to
        17 - can you write an expression that calculates "age" in months?
      Calc Vars 2.1_instruction: |
        Here's a new variable called age-in-months. Use
        the variable age to set age-in-months.
      Calc Vars 2_instruction: |
        Can you write an expression that calculates age in
        months?
      Calc Vars 3 (copy 1)_instruction: |
        Can you add to this code so that it calculates
        how many hours there are in "age" years?
      Calc Vars 3_instruction: |
        Can you add to this code so that it uses the "age"
        variable to calculate age in hours?
      Calc Vars 4_instruction: |
        We can also set variables by using other variables.
        Let's say you have a brother who is two years younger than you - can you
        set a new variable "brother-age" using your "age" variable?
      Code Studio Puzzle Challenge 1 - Artist_instruction: "Draw the line. It is\n200
        pixels long. \n"
      Code Studio Puzzle Challenge 1 Artist1_instruction: "Draw the line. It is 200\npixels
        long. \n"
      Code Studio Puzzle Challenge 10 - Bee (copy 1)_instruction: |
        Move the Bee to
        the flower and get all of the nectar.
      Code Studio Puzzle Challenge 10 - Bee_instruction: |
        Move the Bee to the flower
        and get all of the nectar.
      Code Studio Puzzle Challenge 10b - Bee_instruction: |
        Move the Bee to the flowers
        and get all of the nectar at each.
      Code Studio Puzzle Challenge 11 - Artist_instruction: |
        Draw this line by using
        the variable "length". Each line segment is 75 pixels long.
      Code Studio Puzzle Challenge 11b - Artist_instruction: |
        Draw a square by using
        the variable length provided.
      Code Studio Puzzle Challenge 12 - Artist_instruction: |
        The code provided draws
        one triangle. Add to it to draw triangles in a hexagon pattern.
      Code Studio Puzzle Challenge 12a - Artist_instruction: |
        The code provided draws
        one triangle. Add to it to draw triangles in a hexagon pattern.
      Code Studio Puzzle Challenge 13 - Artist_instruction: "This is just like a\n\"for\"
        loop. Complete the code to draw six lines that grow from 50, 60, 70,\n80,
        90, to 100 pixels long. \n"
      Code Studio Puzzle Challenge 14 - Artist_instruction: "This is just like a\n\"for\"
        loop. Complete the loop to draw 4 squares that grow from 80, 100,\n120, to
        140 pixels. \n"
      Code Studio Puzzle Challenge 2 - Artist_instruction: |
        Now add a turn and another
        line. The lines are 200 pixels long.
      Code Studio Puzzle Challenge 3 - Artist_instruction: |
        Draw the square. Each
        side is 100 pixels long.
      Code Studio Puzzle Challenge 4 - Artist_instruction: |
        Draw the octagon. Each
        side is 100 pixels long.
      Code Studio Puzzle Challenge 5 - Bee (copy 1)_instruction: |
        Move the Bee to
        the flower and get the nectar.
      Code Studio Puzzle Challenge 5 - Bee_instruction: |
        Flowers contain a specific
        amount of nectar. Move the Bee to the flower and collect nectar with the get
        nectar block.
      Code Studio Puzzle Challenge 6 - Bee_instruction: |
        Honeycombs can hold a specific
        amount of honey. Get the nectar from the flower and make some honey.
      Code Studio Puzzle Challenge 7 - Bee_instruction: |
        Move the Bee to the flower
        and get the nectar.
      Code Studio Puzzle Challenge 8 - Bee_instruction: |
        The cloud could be hiding
        a flower or a honeycomb. Only get nectar from flowers. Only make honey at
        honeycombs.
      Code Studio Puzzle Challenge 9 - Bee_instruction: |
        The cloud could be hiding
        a flower or a honeycomb. Only get nectar from flowers. Only make honey at
        honeycombs.
      Code Studio Puzzle Challenge Artist Screencast (copy 1)_instruction: "Draw\nthe
        line. Each segment is 100 pixels long. \n"
      Code Studio Puzzle Challenge Artist Screencast 2_instruction: "Complete the\ncode
        to draw the line. Each segment is 100 pixels long. \n"
      Code Studio Puzzle Challenge Artist Screencast_instruction: "Draw the line.\nEach
        segment is 100 pixels long. \n"
      Code Studio Puzzle Challenge Bee Screencast_instruction: |
        Move the Bee to the
        flowers and get all of the nectar.
      Code Studio Puzzle Challenge Square - Artist_instruction: |
        Draw a square by
        using the variable length provided.
      Code Studio Puzzle Challenge Var - Artist_instruction: |
        Draw a line by using
        a variable "length" set to 180.
      Course 2 Bee Loops 1_instruction: "Hi, I'm a bee. Can you help me collect\nthe
        nectar from these flowers? \n"
      Course 2 Bee Loops 13_instruction: |
        Assessment: Use the repeat block to collect
        all of the nectar.
      Course 2 Bee Loops 2_instruction: |
        Can you do the same task more easily with
        a loop?
      Course 2 Bee Loops 3_instruction: |
        Now use the new repeat block to collect
        all of the nectar and make all of the honey.
      Course 2 Bee Loops 3__instruction: |
        Can you use a loop to collect all that
        nectar?
      Course 2 Bee Loops 4_instruction: |
        What happens if you loop this sequence 3
        times? Don't forget to make the honey at the end!
      Course 2 Maze Loops 1_instruction: "Можеш допомогти мені дістатися свині, використавши
        5 блоків?"
      Course 4 2_instruction: "Бджола хоче зібрати нектар прямо зараз. Пам'ятай, що
        не всі об'єкти є квітами, тож спершу перевіряй, щоб збирати нектар тільки
        з квітів."
      Course 4 Artist 1_instruction: "Допоможи намалювати коробку (Довжина кожної
        лінії - 200 пікселів) "
      Course 4 Artist 10_instruction: |-
        Клацай тут, щоб знову побачити підказки!\r
        \r
        Ось код цікавої фігури. Що буде, якщо його повторити, повертаючи між повторами? Зверни увагу, що всі повороти у цій фігурі в сумі становлять 420 градусів, а це означає, коли художник завершить малювання, він буде повернутий щоразу в іншому напрямку, порівняно з початком малювання. Новий напрямок відрізняється від початкового на 60 градусів.
      Course 4 Artist 11_instruction: "А тепер складніше завдання! Ось дизайн, який
        використовує лише ті блоки, котрі ми вже розглянули. Можеш здогадатись, як
        відтворити його? Пробуй і не бійся помилятись. Ніхто не очікує, що з першого
        разу все вийде ідеально. Потрібні ще підказки? Клацай тут!"
      Course 4 Artist 12_instruction: |-
        Натхнення для вільної гри: ти вивчив все, що потрібно знати, щоб намалювати такий узор! Якщо це зображення тебе надихає, спробуй створити схоже. Або створи щось своє.\r

        \r
        Хочеш дізнатись, як створено цей узор? Клацни на синій закладці справа, а тоді на кнопці "подивитись рішення".
      Course 4 Artist 13_instruction: "Все ще граємо? Ось чисте полотно, де можна
        створити все, що забажаєш!"
      Course 4 Artist 2_instruction: "Можеш зациклити цей код, щоб намалювати квадрат,
        позначений сірим?"
      Course 4 Artist 20_instruction: "Все ще граємо? Ось чисте полотно, де можна
        створити все, що забажаєш!"
      Course 4 Artist 3_instruction: Гаразд, спробуємо з'ясувати, що відбувається
        при запуску цього коду (натисни "Запустити", щоб випробувати його). Повторюй
        достатню кількість разів для завершення креслення.
      Course 4 Artist 4_instruction: "Скільки градусів у колі?  Заповни блок повторити
        цим числом, щоб створити коло з кольорів."
      Course 4 Artist 5_instruction: "Намалюй другу половину цієї симетричної конструкції.
        Трикутники є рівносторонніми і мають довжину 50 пікселів. Підказка: можливо
        потрібно буде запустити код кілька разів, щоб здогадатись, які блоки слід
        додати."
      Course 4 Artist 6_instruction: "Завершуй код, щоб намалювати ці трикутники.
        Підказка: 3 трикутники за 360 градусів обертання... скільки разів 360 ділиться
        на 3?"
      Course 4 Artist 7_instruction: "Тепер розмісти цей цикл всередині іншого циклу,
        щоб намалювати 10 трикутників. Це називається вкладеним циклом. Підказка:
        всі 10 трикутників виконують поворот на 360 градусів.  "
      Course 4 Artist 8_instruction: "Намалюй це сонце, повторюючи цілий блок коду
        кілька разів."
      Course 4 Artist 8a_instruction: |-
        Пам'ятаєш цю фігуру? Зараз ми дозволимо тобі створити її, без блоків-заготовок?\r
        Підказка: тут є 3 трикутники у межах повороту на 360 градусів... скільки разів 3 входить у 360?
      Course 4 Artist 9_instruction: "Виконай цей дизайн 10 разів і не забувай повертати
        після малювання кожної з фігур. Ось підказка для градусів повороту: скільки
        буде 360 поділити на 10?"
      Course 4 Artist Binary 1_instruction: "Ось функція, котра приймає двійковий
        рядок 1 і 0 і вказує художнику повертати зліва направо і зверху вниз, заповнюючи
        квадрати, коли бачить 1 та ігноруючи, коли бачить 0. Запусти код, щоб побачити,
        як художник зобразить узор."
      Course 4 Artist Binary 1a_instruction: "Ось функція, котра приймає двійковий
        рядок 1 і 0 і вказує художнику повертати зліва направо і зверху вниз, заповнюючи
        квадрати, коли бачить 1 та ігноруючи, коли бачить 0. Запусти код, щоб побачити,
        як художник зобразить узор."
      Course 4 Artist Binary 2_instruction: "Які з цих двійкових рядків можна розмістити
        у циклі на 8 повторень, щоб утворилось це зображення?"
      Course 4 Artist Binary 3_instruction: "Можеш намалювати цей узор, повторюючи
        в циклі 3-цифровий двійковий рядок?"
      Course 4 Artist Binary 4_instruction: "Кожен двійковий рядок представляє один
        рядок зображення. Можеш впорядкувати їх так, щоб малювалось усміхнене обличчя,
        а не похмуре?"
      Course 4 Artist Binary 5_instruction: "Який 6-цифровий двійковий рядок, повторений
        11 разів, намалює це зображення?"
      Course 4 Artist Binary 6_instruction: "Який найкоротший двійковий рядок можна
        повторювати, щоб намалювати це зображення?"
      Course 4 Artist Binary 7_instruction: "Заверши цей малюнок."
      Course 4 Artist Binary Free Play 2_instruction: "Вільна гра: Ось полотно для
        малювання вищої розрядності - 16 на 16 біт!"
      Course 4 Artist Binary Free Play 2a_instruction: |-
        Ось полотно вищої роздільчої здатності - 16 на 16 пікселів!\r
        \r
        Подивимось, що станеться, коли ми почнемо експериментувати з бітами?
      Course 4 Artist Binary Free Play 2b_instruction: "Клацни, щоб побачити підказки."
      Course 4 Artist Binary Free Play_instruction: "Вільна гра: Малюй все, що завгодно,
        за допомогою двійкових рядків!"
      Course 4 Artist Binary pre1_instruction: |-
        Двійкова система дозволяє представити інформацію, використовуючи лише два варіанти. Ось, ми скористаємось варіантами "викл" (представлено цифрою 0) та "вкл" (представлено цифрою 1). \r
        \r
        Ми пропонуємо сітку "пікселів", по якій можна пройти і створити зображення, вмикаючи окремі квадратики. Можеш змусити художника намалювати "01010101" у двійковій системі в першому рядку?
      Course 4 Artist Binary ryan_instruction: |-
        Двійкова система дозволяє представити інформацію, використовуючи лише два варіанти. Ось, ми скористаємось варіантами "викл" (представлено цифрою 0) та "вкл" (представлено цифрою 1). \r
        \r
        Ми пропонуємо сітку "пікселів", по якій можна пройти і створити зображення, вмикаючи окремі квадратики. Можеш змусити художника намалювати "01010101" у двійковій системі в першому рядку?
      Course 4 Artist For  Functions 10_instruction: Трохи ускладнимо. Можеш намалювати
        фігуру зірки за допомогою функції "намалювати лінію квадратів"? Успіхів!
      Course 4 Artist For  Functions 11_instruction: Трохи ускладнимо. Можеш намалювати
        фігуру зірки за допомогою функції "намалювати лінію квадратів"? Успіхів!
      Course 4 Artist For Loops 1_instruction: "Намалюй цей трикутник, шириною 50
        пікселів. Підказка: використай блок повторення."
      Course 4 Artist For Loops 10_instruction: "Час вільної гри! Розважайся, малюючи
        за допомогою вивчених блоків усе, що завгодно"
      Course 4 Artist For Loops 11_instruction: 'Пам''ятаєш, як на Рівні 6 ми використовували
        змінну, щоб керувати кількістю сторін фігури? Зараз спробуємо зробити щось
        схоже, за допомогою змінної "лічильник". Цей узор починається трикутником
        і кількість сторін постійно збільшується, аж поки не отримаємо десятикутник
        (10 сторін). Кожна сторона має довжину 100 пікселів. Підказка: 360, поділене
        на кількість сторін фігури складає кількість градусів, на які потрібно повертати.'
      Course 4 Artist For Loops 11a_instruction: "Давайте все поєднаємо! Використовуючи
        наші знання про \"цикл for\" і \"лічильник\", створимо малюнок, де кожна з
        фігур має на дві сторони більше, ніж попередня. Переконайся, що довжина кожної
        зі сторін у 10 разів перевищує кількість сторін у багатокутнику.\\r \n\\r\nУ
        заготовці дуже мало коду."
      Course 4 Artist For Loops 12_instruction: "Це виглядає досить класно, але тепер
        потрібно намалювати кожну наступну фігуру біля попередньої. Цього разу кожна
        сторона має розмір 20 пікселів. Використай блок стрибка, щоб перестрибнути
        на 40 пікселів після кожної фігури. "
      Course 4 Artist For Loops 13_instruction: "Ой, ці фігури стають щораз більшими!
        Хіба ми ще не вирішили цієї проблеми за допомогою змінних? Як можна використати
        змінну лічильника, щоб зробити сторони меншими, коли їх стає більше? Замість
        того, щоб рухатись вперед на стале число, спробуй рухатись вперед на (100
        / лічильник) пікселів."
      Course 4 Artist For Loops 14_instruction: "Якщо повертати трохи менше, ніж зазвичай
        потрібно для фігури, створюється дуже цікавий ефект. Спробуй використати код
        з попереднього рівня, але повертати на 89 градусів, щоб створити цю закручену
        квадратну спіраль."
      Course 4 Artist For Loops 15_instruction: |-
        Вільна гра: Спробуй створити власні малюнки, використовуючи цикли "для". Ми додали кілька загальних змінних, які теж можна використати.\r
        \r
        Зверни увагу, що тепер у твоїй скарбничці так багато блоків, що їх довелось знову розділити на категорії. Клацай, щоб дослідити усі блоки, які можна використати на цьому рівні.
      Course 4 Artist For Loops 2_instruction: 'Я створив код для малювання трикутника
        всередині циклу "для", що рахує від 50 до 100 по 10. Поглянь на цей код, а
        потім клацни "Запустити", щоб побачити його в дії. '
      Course 4 Artist For Loops 3_instruction: |
        Використай попереднє завдання, щоб виконати це. Найменший трикутник має сторони по 20 пікселів, найбільший - по 200 пікселів, і кожен трикутник більший за попередній на 20 пікселів.
      Course 4 Artist For Loops 4_instruction: "Що можна змінити, щоб намалювати ці
        квадрати. Вони починаються з розміру 15 пікселів, найбільший має розмір 300
        пікселів, а кожен наступний на 15 пікселів більший, за попередній. "
      Course 4 Artist For Loops 5_instruction: 'Чудова робота в останньому завданні!
        Спробуємо ще раз використати блок змінної "лічильник", щоб намалювати цю класну
        картинку. '
      Course 4 Artist For Loops 6_instruction: Вільна гра! Спробуй використати цикл
        "для", щоб намалювати зростаючий узор власного дизайну.
      Course 4 Artist For Loops 6a_instruction: "Зроби три невеличкі виправлення в
        коді останнього рівня, щоб розв'язати це завдання!"
      Course 4 Artist For Loops 7_instruction: Що буде, якщо з цього алгоритму видалити
        блок "повторити тричі", залишивши блоки "рухатись" та "повертати"? У цьому
        спіральному трикутнику кожна сторона на 20 пікселів довша за попередню.
      Course 4 Artist For Loops 8_instruction: |-
        Лиш одна маленька зміна в коді, порівняно з попереднім разом, і вийде цей малюнок. Можеш здогадатись, що потрібно змінити? \r
        \r
        Підказка: потрібно щось вилучити!
      Course 4 Artist For Loops 8a_instruction: "Найменша лінія цієї квадратної спіралі
        - 10, найбільша - 100, а кожна лінія на 10 пікселів довша за попередню. Можеш
        заповнити блоки, щоб завершити цей дивовижний малюнок?"
      Course 4 Artist For Loops 9_instruction: "Зможеш створити спіраль? Потрібно
        рухатися вперед, від 1 до 75 пікселів, щоразу збільшуючи відстань на 1 піксель."
      Course 4 Artist For Loops Challenge_instruction: |-
        Можеш з'ясувати, як використати всі вивчені знання, щоб створити це зображення?\r
        \r
        Потрібна підказка? Клацай тут.
      Course 4 Artist For Loops inspire_instruction: |-
        Натхнення для вільної гри: ти вивчив все, що потрібно знати, щоб намалювати такий узор! Якщо це зображення тебе надихає, спробуй створити схоже. Або створи щось своє.\r
        \r
        Хочеш дізнатись, як створено цей узор? Відвідай https://studio.code.org/c/106387604 щоб побачити рішення.
      Course 4 Artist Functions 1_instruction: "Можеш створити квадрат розміром 100
        пікселів, використовуючи цикл?"
      Course 4 Artist Functions 10_instruction: "Який блок потрібно додати, щоб трикутник
        розмістився нагорі квадрату?"
      Course 4 Artist Functions 11_instruction: Поглянь на цей код, який малює куб
        - можеш перемістити його у функцію з назвою "малювати куб"
      Course 4 Artist Functions 12.1_instruction: Створимо функцію з назвою "намалювати
        восьмикутник 20", яка малює восьмикутник зі сторонами довжиною 20 пікселів.
      Course 4 Artist Functions 12_instruction: "Повтори у циклі функцію квадрата,
        щоб намалювати лінію"
      Course 4 Artist Functions 13.1_instruction: |-
        А тепер створимо функцію з назвою "стрибнути до верхнього правого кута", яка переміщує художника до верхнього правого кута восьмикутника, щоб завершити малювання цього узору.\r
        \r
        Підказка: Щоб перейти до верхнього правого кута, спробуй перестрибувати за шаблоном, який утворює 3/8 восьмикутника.
      Course 4 Artist Functions 13_instruction: Поглянь - у нас нова функція "малювати
        ряд квадратів". Поглянь, як вона утворена. Клацни "Запустити", коли будеш
        готовий перейти до наступного завдання.
      Course 4 Artist Functions 14.1_instruction: А тепер створимо функцію "стрибнути
        до правого верхнього кута", яка переміщує художника до правого верхнього кута
        восьмикутника, щоб завершити малювання цього узору.
      Course 4 Artist Functions 14_instruction: Чудова робота! Використаємо нову функцію
        "малювати ряд квадратів", щоб намалювати фігуру квадрата. Пам'ятай, що кожен
        квадрат розміром 40 пікселів.
      Course 4 Artist Functions 15_instruction: 'Трошки ускладнимо. Можеш намалювати
        зірку, використавши функцію "малювати ряд квадратів"? Успіхів! Підказка: потрібно
        буде повертати на 144 градуси'
      Course 4 Artist Functions 2_instruction: "Можеш намалювати 3 квадрати на відстані
        20 пікселів один від одного? Підказка: розмір кожного квадрату - 100 пікселів"
      Course 4 Artist Functions 3_instruction: |
        Використовуючи блок функції "малювати квадрат", зможеш намалювати цей малюнок? Підказка: відстань між квадратами - 120 пікселів. \r
      Course 4 Artist Functions 4_instruction: 'Готовий створити власний блок функції?
        Клацни блок "Функції" на панелі інструментів, вкажи назву "намалювати трикутник",
        тоді створи трикутник, як раніше, з допомогою блоків Дії та Цикли. Тоді клацни
        Зберегти та закрити у правому верхньому куті. Підказка: створюй трикутники,
        довжиною 100 пікселів. Успіхів!'
      Course 4 Artist Functions 5 OLD_instruction: "Спробуємо скористатись двома функціями
        для малювання будинку - що потрібно виправити у коді, щоб намалювати його
        належним чином?"
      Course 4 Artist Functions 5_instruction: |
        Використовуючи блок функції "малювати квадрат", зможеш намалювати цей малюнок? Підказка: відстань між квадратами - 120 пікселів. \r
      Course 4 Artist Functions 6_instruction: "Який блок потрібно додати, щоб трикутник
        розмістився нагорі квадрату?"
      Course 4 Artist Functions 7_instruction: "Зможеш намалювати ряд квадратів за
        допомогою функції Квадрату? Кожен квадрат має довжину 40 пікселів."
      Course 4 Artist Functions 8_instruction: 'Тепер зрозуміло, як використовувати
        блоки функцій? Змінимо цей квадрат, щоб він мав розмір 200 пікселів. Підказка:
        клацни на "редагувати", щоб змінити розмір у редакторі функції "малювати квадрат".
        Пам''ятай, що потрібно клацнути "зберегти і закрити", щоб вийти з редактора
        функцій. '
      Course 4 Artist Functions 9_instruction: "Ми надали більшу частину коду створення
        функції. Проте, здається, чогось не вистачає. Зможеш завершити цей блок функції?"
      Course 4 Artist Functions challenge_instruction: "Клацніть тут, щоб знову побачити
        підказки."
      Course 4 Artist Functions Inspiration_instruction: "Клацніть тут, щоб знову
        побачити підказки."
      Course 4 Artist Functions inspire_instruction: |-
        Натхнення для вільної гри: ти вивчив все, що потрібно знати, щоб намалювати такий узор! Якщо це зображення тебе надихає, спробуй створити схоже. Або створи щось своє.\r
         \r
        Хочеш дізнатись, як створено цей узор? Відвідай щоб побачити рішення.
      Course 4 Artist Inspire_instruction: |-
        Натхнення для вільної гри: ти вивчив все, що потрібно знати, щоб намалювати такий узор! Якщо це зображення тебе надихає, спробуй створити схоже. Або створи щось своє.\r

        \r
        Хочеш дізнатись, як створено цей узор? Клацни на синій закладці справа, а тоді на кнопці "подивитись рішення".
      Course 4 Artist Params 1_instruction: "Відредагуємо функцію, котра малює квадрат
        зі сторонами в 50 пікселів"
      Course 4 Artist Params 10_instruction: 'Можна викликати функції з інших функцій!
        Використай функцію "фігура" за основу, створи 3 будинки, кожен з яких на 20
        пікселів більший за попередній, починаючи з 50 пікселів. Використання циклу
        з лічильником може стати у нагоді. '
      Course 4 Artist Params 11_instruction: |
        How about a function called "pinwheel"
        that takes three parameters - "sides," "length" and "repeat." You can
        calculate how much to turn after each shape using the same math you used to
        figure out the turns for a shape of "sides". Can you recreate this picture?
        Here's a tip each shape is 100 pixel's in length.
      Course 4 Artist Params 12_instruction: "Використай функцію «вертушка», щоб намалювати
        кожну з цих фігур. Довжина сторони для кожного зображення становить 50."
      Course 4 Artist Params 13_instruction: "Вільна гра: Ось функції, які ми написали,
        і ще кілька - скористайся ними. Намалюй щось чудове!"
      Course 4 Artist Params 2_instruction: Ця функція трикутника буде набагато більш
        корисною, якщо вона зможе намалювати трикутники різного розміру. Я додав параметр
        для довжини лінії, але він не робить нічого ще. Можете змінити функцію так,
        щоб вона використовувала параметр "довжина", коли вона малює кожну сторону?
        Розміри трикутнику - 150 пікселів, 75 пікселів та 25 пікселів.
      Course 4 Artist Params 3_instruction: "Чудово, можеш намалювати кожен з цих
        трикутники за допомогою цієї нової функції? Перший має довжину 25 пікселів,
        другий – 50, а третій 75. "
      Course 4 Artist Params 4_instruction: "Можеш додати нову функцію, з назвою квадрат?
        Вона повинна приймати параметр довжини, як і трикутник. На цей раз намалюй
        3 квадрати, довжиною 25, 50 та 75 пікселів, на відстані 100 пікселів між ними."
      Course 4 Artist Params 5_instruction: "Використай обидві нові функції, щоб намалювати
        цю картину. Щоб зробити це було простіше, використовуй цикли з параметром
        \"лічильник\". \n"
      Course 4 Artist Params 6_instruction: 'Відредагуємо функцію "намалювати фігуру".
        Вона вже має параметр "довжина". А тепер додамо до цієї функції параметр "сторони".
        Пам''ятай, що кут повороту для заданої фігури рівний 360 розділити на кількість
        її сторін. Підказка: довжини для фігур є такими: трикутник становить 100 пікселів,
        і шестикутник - 25 пікселів, а квадрат - 50 пікселів. '
      Course 4 Artist Params 7_instruction: 'Можеш створити ці фігури, заповнивши
        "???" Квадрат та трикутник мають розмір 100 пікселів, а шестикутник - 75 пікселів. '
      Course 4 Artist Params 8_instruction: |
        Можеш з'ясувати як намалювати цю фігуру? Ось підказка: створи нову функцію з 6 сторін, які називаються шестикутником.
      Course 4 Artist Params 9_instruction: Пам'ятаєш, як ми використовували цикл
        з лічильником та внутрішній цикл? Спробуємо погратись і використати функцію
        "малювати фігуру" з параметрами "сторони" та "довжина". Можеш відтворити ці
        фігури? Для квадрата лічильник має бути 5/100/5, для трикутника 10/100/10,
        а шестикутника - 2/100/2.
      Course 4 Artist Var 9_instruction: 'Ось алгоритм малювання трикутника. Зміни
        його, так щоб він натомість використовував змінну "сторони". Заміни число
        3 змінною "сторони". Підказка: не забудь використати блок "встановити сторін".'
      Course 4 Artist Vars 1_instruction: "Можеш допомогти мені намалювати трикутник?
        Довжина сторін - по 100 пікселів."
      Course 4 Artist Vars 10_instruction: Ось алгоритм, який малює трикутник з менших
        трикутників. Можеш змінити його так, щоб він використовував змінну "сторони"
        для малювання трикутників? Переглянь код і щоразу, коли бачиш число 3, заміни
        його на змінну "сторони". Не забудь використати блок "встановити сторони".
      Course 4 Artist Vars 11_instruction: Ось трохи складніший код, що базується
        на тих же поняттях, що й останнє завдання - як слід змінити змінну "сторони"
        для того, щоб можна було намалювати зображення з квадратів?
      Course 4 Artist Vars 12_instruction: Встановимо змінну "сторони" як 5. Чим більше
        сторін ми додаємо до цього алгоритму, тим більшим стає узор! Зверни увагу
        на появу нової змінної "довжина". Тепер можна її використати, коли потрібно
        "рухатися вперед". Для цієї фігури встанови змінну "довжина" у значення 75.
      Course 4 Artist Vars 13_instruction: |-
        Коли фігура має багато сторін, кожна із них має бути коротшою, якщо ти хочеш, щоб увесь узор помістився на екран.
        \r
        Створимо алгоритм для цього цікавого візерунка, але замість того, щоб вручну задавати змінну "довжина", скористаємось математичним блоком зі змінною "сторін" всередині, щоб кожна фігура вписувалась коректно. Периметр багатокутника становить 300 пікселів.\r
        Потрібні підказки? Клацай тут.
      Course 4 Artist Vars 14_instruction: "Вільна гра: Поглянь, тепер алгоритм міститься
        всередині ще одного циклу. Поекспериментуй зі значеннями двох змінних, щоб
        утворились цікаві узори."
      Course 4 Artist Vars 2_instruction: Замість того, щоб "рухатися вперед на 100",
        тепер блок "рухатись" містить посилання на змінну "довжина". Можеш встановити
        "довжину" в 150 і намалювати новий трикутник?
      Course 4 Artist Vars 3_instruction: 'Ось цикл, що малює квадрат, але чогось
        не вистачає. Можеш виправити його так, щоб він використовував змінну "довжина",
        щоб встановити, якої довжини має бути кожна сторона? '
      Course 4 Artist Vars 4_instruction: Тепер я хочу створити прямокутник, висота
        якого вдвічі більша за ширину. У нас є змінна з назвою "ширина", яка повинна
        мати значення 100. Можеш використати математичні блоки для завершення коду?
      Course 4 Artist Vars 5_instruction: Використай змінну "сторони", щоб визначити,
        скільки разів буде виконано цей цикл.
      Course 4 Artist Vars 6_instruction: Порівняно з кодом попереднього завдання,
        змінено значення змінної "сторони" на 4. Можеш використати цю змінну (разом
        з математичними блоками), щоб переконатись, що поворот відбувається на правильний
        кут? Щоб намалювати правильний багатокутник, потрібно щоразу повертати на
        360 / сторін градусів.
      Course 4 Artist Vars 7_instruction: |-
        Скористайся здобутими знаннями, щоб намалювати цей шестикутник використавши змінну "сторони".\r
        \r
        Досліди, як можна змінити лише одне значення, щоб намалювати трикутник, квадрат, п'ятикутник чи восьмикутник?
      Course 4 Artist Vars 8_instruction: 'Вільна гра: Експериментуй з кількістю сторін,
        які має ця фігура. Можеш змінити алгоритм, так щоб загальний розмір фігури
        залишався незмінним, незалежно від того, скільки сторін вона матиме? Підказка:
        Можливо, потрібно буде скористатись математичними блоками (360 розділити на
        "сторони"), на цей раз у двох місцях.'
      Course 4 Artist Vars 9_instruction: Зміни цей алгоритм, так щоб він використовував
        змінну "сторони" замість фіксованого число при малюванні трикутника. Використай
        блок "встановити сторони".
      Course 4 Bee 1_instruction: 'Бджілка не бачить, що під хмаринкою! Спочатку використай
        блок "якщо", щоб перевірити, що там є - квітка або стільник. А потім збирай
        нектар, тільки якщо це квітка. '
      Course 4 Bee 2_instruction: Використай блок "якщо - інакше", щоб перевірити
        кожен об'єкт і побачити, чи це квітка. Якщо це квітка, то збирай нектар...
        у протилежному випадку, роби мед!
      Course 4 Bee 3_instruction: "Невідомий об'єкт є квіткою або стільником. На цей
        раз використай блок якщо/інакше, щоб збирати нектар, якщо це квітка, інакше
        робити мед (оскільки тоді це стільник)."
      Course 4 Bee 4_instruction: Ця фіолетова квітка може мати 3, 2 або 1 нектар.
        Ось блок якщо-інакше, з'єднаний з іншим блоком якщо-інакше, щоб утворилась
        конструкція "якщо-інакше якщо-інакше". Завершуй розв'язок, щоб зібрати невідому
        кількість нектару.
      Course 4 Bee 5_instruction: Ця фіолетова квітка може мати 3, 2 або 1 нектар.
        Додай блоки "if-else" для створення блоків if, else-if, else. Доповни рішення
        для збору невідомої кількості нектару.
      Course 4 Bee 6_instruction: "Ця фіолетова квітка може мати 3, 2 або 1 нектар.
        Створи блок if, else-if, else для збору невідомої кількості нектару."
      Course 4 Bee 7_instruction: "Використовуй все, що ми дізнались до цього часу,
        щоб зібрати весь нектар. Фіолетова квітка може мати 3, 2 або 1 нектар."
      Course 4 Bee For Loops 1_instruction: "Використай цикл, щоб зібрати нектар з
        кожної квітки."
      Course 4 Bee For Loops 10_instruction: "Якщо цикл рахує у зворотньому порядку,
        приріст віднімається від лічильника щоразу при виконанні циклу. Яким має бути
        приріст, щоб збирати 9, а потім 3 нектари?"
      Course 4 Bee For Loops 11_instruction: "Що не так з цим циклом? Подивись чи
        можеш ти виправити це і змусити бджілку зібрати весь нектар."
      Course 4 Bee For Loops 2_instruction: Ось новий вид циклу, він називається циклом
        "для". Цей конкретний цикл "для" рахуватиме від 1 до 5 і виконуватиме вміст
        циклу щоразу при переході до наступного числа. Поможи Бджілці зібрати нектар.
      Course 4 Bee For Loops 3_instruction: Можеш вирішити цю задачу, використовуючи
        цикл "для", щоб рахувати від 1 до 3, по 1. Зберемо трохи нектару!
      Course 4 Bee For Loops 4_instruction: "Збери весь нектар з цих квітів. Цікаво,
        чи є якийсь простіший спосіб це зробити ..."
      Course 4 Bee For Loops 5_instruction: 'О, цикл все значно спрощує! Використовуючи
        змінну "лічильник" з циклу "для" щоб повторно застосувати блок "отримати нектар"
        таку ж кількість разів як лічильник циклу. Ось так! Це багато циклів. Весь
        код, що тобі потрібен - вже є, розглянь, як він складений та клацни "Запустити",
        щоб подивитись, як він працює. '
      Course 4 Bee For Loops 6_instruction: "Цикли можна використовувати для зворотнього
        відліку. Спробуй зібрати нектар, рахуючи від 5 до 1 по 1."
      Course 4 Bee For Loops 7_instruction: Використай змінну "лічильник" циклу "для",
        щоб керувати, на скільки рухатись по горизонталі.
      Course 4 Bee For Loops 8_instruction: "Можеш використати змінну лічильника циклу,
        щоб керувати рухом та збором нектару?"
      Course 4 Bee For Loops 9_instruction: Останнє число у циклі називається "приріст"
        і щоразу при виконанні циклу лічильник змінюється на цей приріст. Спробуй
        збирати квіти, використавши приріст 2.
      Course 4 Bee Loops 5 NEW_instruction: "Ось три квітки. Можеш знайти в інструкції
        узор, який слід повторити тричі, щоб зібрати нектар, використавши найменшу
        кількість блоків?"
      Course 4 Bee Loops 5a NEW_instruction: "А тепер цикли допоможуть бджілці зібрати
        весь нектар по дорозі до стільника, використавши якомога меншу кількість блоків.
        Коли дістанешся туди, не забудь зробити мед!"
      Course 4 Bee Params 1_instruction: Використай функцію "збери 3 нектари", яка
        виконує поворот, рухається для збору нектару, а тоді повертається до початкового
        розташування. Запиши послідовність для збору всього нектару, використовуючи
        цю функцію.
      Course 4 Bee Params 2_instruction: Зміни функцію "зібрати 3 нектари", так щоб
        вона дозволяла повертати до квітів праворуч, а не ліворуч.
      Course 4 Bee Params 3 (copy 1)_instruction: А тепер у нас квіти з обох боків!
        Може скористаємось параметром, щоб одна і та ж функція працювала для квітів
        праворуч та ліворуч? До функції додали параметр, що називається "напрям".
        Якщо параметр "напрям" рівний 0, потрібно повернути ліворуч; якщо він рівний
        1, потрібно повернути праворуч.
      Course 4 Bee Params 3_instruction: 'А тепер у нас квіти з обох боків! До функції
        додали параметр, що називається "напрям" для того, щоб "зібрати 3 нектари".
        Використай змінні "ліворуч" та "праворуч", щоб керувати поворотами. Заповни
        визначення функції "зібрати 3 нектари" так, щоб Бджола повертала у правильному
        напрямку, коли змінні "ліворуч" та "праворуч" передаються у функцію.  '
      Course 4 Bee Params 4 (copy 1)_instruction: "Спробуй використати нову функцію,
        щоб зібрати всі квіти. Пам'ятай, що 0 = ліворуч, а 1 = праворуч."
      Course 4 Bee Params 4 - Two WhenRun_instruction: "Спробуй скористатись новою
        функцією, щоб зібрати всі квіти. Не забудь використати змінні ліворуч та праворуч."
      Course 4 Bee Params 4 backup_instruction: А правда, було б непогано, якби ми
        могли зібрати всі ці нектари в одній функції? Спробуй додати до нашої функції
        новий параметр, який називається "нектари", щоб керувати кількістю нектару,
        який збираємо. Можливо, потрібно перейменувати й саму функцію!
      Course 4 Bee Params 4_instruction: "Спробуй використати нову функцію, щоб зібрати
        всі квіти. Не забудь використати змінні ліворуч та праворуч."
      Course 4 Bee Params 5_instruction: Почнімо спочатку - зможеш створити нову функцію
        "отримати 5 нектарів" з параметром напрямку?
      Course 4 Bee Params 6 (copy 1)_instruction: "Спробуй використати нову функцію,
        щоб зібрати весь нектар."
      Course 4 Bee Params 6_instruction: А правда, було б непогано, якби ми могли
        зібрати весь цей нектар в одній функції? Спробуй додати до нашої функції новий
        параметр, який називається "нектари", щоб керувати кількістю нектару, який
        збираємо. Можливо, потрібно перейменувати й саму функцію!
      Course 4 Bee Params 7 (copy 1)_instruction: "Спробуй використати нову функцію,
        щоб зібрати весь нектар."
      Course 4 Bee Params 7_instruction: "Спробуй використати нову функцію, щоб зібрати
        весь нектар."
      Course 4 Bee Params 8 Clone 2_instruction: "О, тепер ще й мед! Як можна оновити
        функцію, щоб збирати нектар або робити мед."
      Course 4 Bee Params 8 clone 3_instruction: "О, тепер ще й мед! Як можна оновити
        функцію, щоб збирати нектар або робити мед."
      Course 4 Bee Params 8 Clone_instruction: "О, тепер ще й мед! Як можна оновити
        функцію, щоб збирати нектар або робити мед."
      Course 4 Bee Params 8 new_instruction: "О, тепер ще й мед! Як можна оновити
        функцію, щоб збирати нектар або робити мед."
      Course 4 Bee Params 8_instruction: "О, тепер ще й візьмемось за мед! Як можна
        оновити функцію, щоб збирати нектар або робити мед?"
      Course 4 Bee Params Ex_instruction: "Спробуй використати нову функцію, щоб зібрати
        весь нектар."
      Course 4 Binary 1_instruction: "Ось функція, котра приймає двійкову послідовність
        1 та 0 і вказує фермерові повертати зліва направо, зверху вниз, виконуючи
        поворот на клітинках з нулями. Запусти поданий код і поглянь, як фермер використовує
        двійкову систему для малювання картинки."
      Course 4 Binary 2_instruction: "Які двійкові рядки можна повторити 8 разів для
        побудови цього малюнка? Підказка: число 1 заповнює ямку."
      Course 4 Binary 3_instruction: "Можеш намалювати цей узор, повторюючи один і
        той же двійковий рядок?"
      Course 4 Binary 5 (copy 1)_instruction: "Який двійковий рядок, повторений 10
        разів, намалює це зображення?"
      Course 4 Binary 5_instruction: "Який двійковий рядок, повторений 10 разів, намалює
        це зображення?"
      Course 4 Binary 6 (copy 1)_instruction: "Який двійковий рядок, повторений 10
        разів, намалює це зображення?"
      Course 4 Binary 6_instruction: "Який двійковий рядок, повторений 10 разів, намалює
        це зображення?"
      Course 4 Binary 7_instruction: "Який двійковий рядок, повторений 10 разів, намалює
        це зображення?"
      Course 4 Binary 8_instruction: "Можна заповнити більшу частину цього зображення,
        розмістивши у циклі 5-бітне двійкове число - тоді потрібно буде ще одне 4-бітне
        число, щоб отримати правий нижній кутик."
      Course 4 EC 1a_instruction: "Жодних правил. Жодних підказок. Просто виклик!"
      Course 4 EC 1b_instruction: "Жодних правил. Жодних підказок. Просто виклик!"
      Course 4 EC 2a_instruction: "** Екстремальний виклик: ** жодних правил. Жодних
        підказок. Просто виклик!"
      Course 4 EC 2b_instruction: "** Екстремальний виклик: ** жодних правил. Жодних
        підказок. Просто виклик!"
      Course 4 EC 2c_instruction: "** Екстремальний виклик: ** жодних правил. Жодних
        підказок. Просто виклик!"
      Course 4 EC 3_instruction: "Щоб намалювати це зображення, скористайся тим, що
        ми вивчили на попередніх рівнях. Примітка: код стає простішим, якщо використати
        параметри. "
      Course 4 EC 3a_instruction: "Екстремальний виклик: Жодних правил. Жодних підказок.
        Просто виклик!"
      Course 4 Maze 1_instruction: "Поможи Злому птаху дістатись до свині!"
      Course 4 Maze 2_instruction: "Уникай вибухівки!"
      Course 4 Maze 3_instruction: "Запрограмуй злих пташок, щоб дістатись до свині. "
      Course 4 Maze 4_instruction: Спробуй блок "повторити", щоб використовувати менше
        блоків...
      Course 4 Maze 5_instruction: "Можеш розв'язати цю задачу, використовуючи найменшу
        кількість блоків?"
      Course 4 Maze 6_instruction: "Можеш розв'язати цю задачу, використовуючи найменшу
        кількість блоків?"
      Course 4 Play Lab For Loops 2_instruction: "На цей раз, спробуємо перелічити
        непарні числа від 1 до 100."
      Course 4 Play Lab Params 1_instruction: Ось функція, що називається "стрибати",
        яка змушує головного персонажа підстрибнути на 100 пікселів. Використовуйте
        функцію стрибання, щоб зібрати усі прапори.
      Course 4 Play Lab Params 10_instruction: |
        Ми додали ще одну функцію, яку можна використовувати. Запрограмуй гру так, щоб викликати функцію "наступний рівень" якщо "бали гравця" > 10. Зіграй в гру і пройди її до 4 рівня, щоб перейти до наступного завдання.
      Course 4 Play Lab Params 2_instruction: Тепер у нас є прапори, що занадто високі
        для наших поточних стрибків! Додамо до функції стрибка параметр, який називається
        "висота". Стрілка вгору повинна виконувати стрибок на 200 пікселів, а стрілка
        вниз на 100 пікселів. Натисни "Редагувати" на функції стрибка і онови її,
        так щоб замість простого стрибка на 100 пікселів використовувався параметр
        висоти.
      Course 4 Play Lab Params 3_instruction: "Давайте додамо ще один параметр до
        функції стрибка, так щоб можна було використовувати її з іншими персонажами.
        Кожен персонажам представлений числом, починаючи від одного. Зміни функцію
        стрибка, так щоб включити у її визначення параметр персонажа. "
      Course 4 Play Lab Params 4_instruction: Ось функції, яка називається "патрулювати."
        Зміни її так, щоб перемістити кішку на 400 пікселів вгору, а потім на 400
        пікселів вниз.
      Course 4 Play Lab Params 5_instruction: Заповни вхідний параметр "персонаж",
        так щоб можна було викликати функцію "патрулювати" для кожного персонажу.
        Пам'ятай, що персонажам відповідають номери 1, 2 і 3.
      Course 4 Play Lab Params 6_instruction: Додай параметр з назвою "швидкість"
        до функції "патрулювати". Спробуй використати блок "задати швидкість" з новим
        параметром "швидкість", щоб допомогти Пінгвіну дістатись до обох прапорців
        до того, як інші персонажі дістануться хоч до одного.
      Course 4 Play Lab Params 7_instruction: "Використовуй клавіші зі стрілками для
        керування собакою і збирання усіх прапорів."
      Course 4 Play Lab Params 8_instruction: Використовуй блок "коли торкається",
        щоб відправити собаку назад у верхній лівий напрям, якщо собака торкнеться
        будь-якого іншого персонажу.
      Course 4 Play Lab Params 9_instruction: "Ось наша гра з попереднього етапу,
        але більшість коду приховано. Є нова функція, яка називається \"отримати бали\".\\r\n\\r\nЗміни
        цю функцію так, щоб параметр \"бали\" додавався до змінної \"бали гравця\".\\r\n\\r\nЗмінна
        \"бали гравця\" повинна збільшуватись щоразу, як Собака торкається Кота сердечком,
        і зменшуватись щоразу, як Кіт влучає у Собаку сердечком.\n\\r\n\\r\nПримітка.
        Коли готово, клацай \"Запустити\", щоб грати. Коли Собака набере 6 балів,
        ти зможеш перейти до наступного завдання. "
      Course 4 Play Lab Vars 1_instruction: Тобі не доведеться писати код, просто
        натисни "Запустити", щоб пограти в гру! Ти граєш за собаку, яка намагається
        зібрати прапорів, ніж кішка. Використовуй стрілку вниз, щоб керувати собакою.
        Натисни "Готово", коли завершиш гру.
      Course 4 Play Lab Vars 2_instruction: Ті перегони були не зовсім справедливим!
        Поміняй змінну "швидкість собаки", щоб переконатися, що можеш зібрати більше
        прапорів, ніж кіт. Перемагає перший, хто збере 10 прапорів!
      Course 4 Play Lab Vars 3_instruction: "Ось і новий вид гри! Використовуй стрілки
        вліво та вправо для переміщення, а вгору, щоб стрибати. Подивимось, чи зможеш
        ти зібрати всі прапори."
      Course 4 Play Lab Vars 4_instruction: 'Тепер у нас є змінна з назвою "висота",
        яка вказує, як високо може стрибати собака. Зміни значення змінної "висота",
        щоб собака міг стрибнути достатньо високо, щоб досягти всі прапори. Підказка:
        нові прапори на висоті 200 пікселів.'
      Course 4 Play Lab Vars 5_instruction: "Створимо гру! По-перше, потрібен рахунок.
        Зміни код, який бачив на попередньому рівні, щоб задати бал, рівний 10. "
      Course 4 Play Lab Vars 6 (copy 1)_instruction: Класно! Тепер у нас є змінна
        з балами, але як ми її використаємо? Як щодо того, щоб збільшувати цю змінну
        щоразу, коли торкнемось супротивника вогненною кулею? Використай подію "коли
        персонаж 2 торкається будь-чого", щоб викликати оновлення рахунку, коли вогняна
        куля вдарить кота. Рахунок можна збільшувати, встановивши, що бал = бал +
        1. Зароби 10 балів (по одному!), щоб пройти рівень.
      Course 4 Play Lab Vars 6_instruction: Як можна набрати бали у нашій грі? Додавай
        1 до змінної "бали" щоразу, коли собака влучає в кота вогняною кулею. Використай
        подію "коли персонаж 2 торкається будь-чого" для оновлення балів. Можеш збільшувати
        змінну за допомогою команди "бали=бали+1". Отримай 10 балів (по одному), щоб
        пройти рівень.
      Course 4 Play Lab Vars 7_instruction: "Добре, тепер переконаємось, що гра не
        занадто легка. Щоразу, коли собака (персонаж 1) отримує удар жовтим сердечком
        від кота (персонаж 2), він має втрачати бал. Починаємо з 10 очок, щоб це не
        було надто складно. Нехай рахунок зменшиться з 10 до 0 очок, щоб перейти на
        наступний рівень."
      Course 4 Play Lab Vars 8 (copy 1)_instruction: Гаразд, і остання зміна для цієї
        гри - зробимо так, щоб можна було виграти (або програти). Скористайся циклом
        "завжди", щоб перевіряти значення рахунку - якщо бал більший 20, супротивник
        має зникнути. Якщо бал менший 0, то гравець має зникнути. Клацни "Завершити",
        коли гра працює так, як ти хочеш.
      Course 4 Play Lab Vars 8_instruction: Зробимо так, щоб Собака міг виграти (або
        програти). Скористайся циклом "завжди", щоб перевіряти значення рахунку -
        якщо бал більший 20, супротивник (Кіт) має зникнути. Якщо бал менший 0, то
        гравець (Собака) має зникнути. Клацни "Завершити", коли гра працює так, як
        ти хочеш.
      Course 4 Play Lab Vars 9_instruction: "Час вільної гри! Ось усі змінні, з якими
        ми працювали, а також ще кілька, на випадок, якщо вони тобі знадобляться.
        Створи розповідь або гру за допомогою цих змінних. Підказка: прокручуй вниз,
        щоб побачити усі команди робочої області."
      Course 4 Play Lab Vars_instruction: Що ж, останній штрих - зробимо так, щоб
        можна було виграти (або програти). Скористайся циклом "завжди", щоб перевіряти
        значення рахунку - якщо бал більший 20, супротивник має зникнути. Якщо бал
        менший 0, то гравець має зникнути.
      Course 4 Play Labs For Loops 1_instruction: "Зробимо так, щоб собака промовляв
        кожне число від 1 до 100. Використаємо блоки циклу та лічильника, щоб промовляти
        значення лічильника щоразу при виконанні циклу."
      Course 4 Play Labs For Loops 2_instruction: "На цей раз, спробуємо перелічити
        непарні числа від 1 до 100."
      Course 4 Play Labs For Loops 3_instruction: "Якщо ми рахуємо великими числами,
        ми можемо дістатись ще далі за той же час. Спробуй зробити так, щоб собака
        лічив від 10 до 1000, щоразу перескакуючи на десяток."
      Course 4 Play Labs For Loops 4_instruction: "Змінення приросту - звичайно дуже
        корисне, але ми при цьому рахуємо лінійно (кожне число відрізняється від попереднього
        на однакову величину). Що зробити, якби було потрібно рахувати експоненціально?
        Не змінюючи параметри в цьому циклі, чи можна рахувати 1, 4, 9, 16, 25...
        (лічильник в квадраті)?"
      Course 4 Play Labs For Loops 4a_instruction: |-
        А тепер, поєднаємо змінні з Етапу 7 зі змінною "лічильник", щоб створити дещо цікаве.  \r
        \r
        У цьому завданні Собака має порахувати від 0 до 1000 за "кроком". Встановіть змінну "крок" у 10 на початку свого коду і подивіться, що буде.
      Course 4 Play Labs For Loops 5_instruction: В останньому етапі ми рахували квадратами
        чисел. Спробуй змінити "лічильник ^ 2" на "лічильник ^ 3", щоб рахувати кубами
        чисел (1, 8, 27, 64, 125, 216, 343...)
      Course 4 Play Labs For Loops 5a_instruction: |-
        У цьому завданні Собака буде слідкувати за часом.\r
        \r
        Собака рахуватиме від 0 до 30 за "кроками". Змінна "крок" матиме значення, починаючи з 1. \r
        \r
        Можеш зробити так, щоб щоразу при клацанні Собаки, крок збільшувався на 2? Клацай стрілку вперед, щоб запустити цикл. \r
        \r
        Виконай цикл кілька разів, клацаючи по Собаці перед кожним із них.
      Course 4 Play Labs For Loops 6_instruction: Пригадаємо, що просте число - це
        ціле число, що кратне лише одиниці і самому собі. Використаємо функцію "є
        простим" для перелічування простих чисел від 1 до 100.
      Course 4 Play Labs For Loops 6a_instruction: |-
        Собака пильнуватиме час, рахуючи у циклі "для" за "кроком", але на цей раз ми додамо Чарівника. Можеш змінити код так, щоб "крок" збільшувався на 2 щоразу, як клацнули Чарівника?\r
        \r
        Уважно! Чарівник швидко рухається!
      Course 4 Play Labs For Loops 7_instruction: "Можеш створити цикл, щоб допомогти
        мені проговорити послідовність 1, 4, 7, 10, 13, 16, 19, 22, 25?"
      Course 4 Play Labs For Loops 7a_instruction: |-
        У нас вже щось вийшло! А що, якщо ми почнемо рахувати, скільки разів можна клацнути на Чарівникові, до того, як Собака дійде до 30? \r
        \r
        Додай блоки до Чарівника, щоб щоразу, коли на ньому клацають, змінна "клацань" збільшувалась на 1. Поки що можна ігнорувати "кроків".\r
        \r
        Собака почне відлік після натиснення "Запустити".
      Course 4 Play Labs For Loops 8_instruction: "Який цикл допоможе мені  проговорити
        19, 27, 35, 43, 51?"
      Course 4 Play Labs For Loops 8a_instruction: |-
        Щоб завершити гру, потрібно повернути змінну "кроків"! Прив'яжемо її до рівня гри.\r
        \r
        1) Потрібно зберігати кількість клацань на Чарівникові.\r
        \r
        2) Якщо Чарівника клацнули принаймні 10 разів до того, як Собака порахував до 30, збільшимо "крок" на 1 і почнемо заново.\r
        3) Якщо Чарівника не клацнути принаймні 10 разів, гру завершено.
      Course 4 SCF 1_instruction: "Скористайся кнопками, щоб намалювати чотири ряди
        шестикутників. Зауваж, як парні ряди зміщуються праворуч."
      Course 4 SCF 1a_instruction: "Здогадаєшся, як зібрати увесь нектар за допомогою
        найменшої можливої кількості блоків?"
      Course 4 SCF 1b_instruction: "Здогадаєшся, як зібрати увесь нектар за допомогою
        найменшої можливої кількості блоків?"
      Course 4 SCF 2_instruction: "Щоб намалювати це зображення, скористайся тим,
        що ми вивчили на попередньому рівні. Примітка: код стає простішим, якщо використати
        параметри. "
      Course 4 SCF 3 Fail 1_instruction: "Здогадаєшся, як..."
      Course 4 SCF 3 Fail 2_instruction: "Здогадаєшся, як..."
      Course 4 SCF 3_instruction: "Щоб намалювати це зображення, скористайся тим,
        що ми вивчили на попередньому рівні. Примітка: код стає простішим, якщо використати
        параметри. "
      Course 4 SCFL 1_instruction: "Розв'язуй це завдання за допомогою найменшої можливої
        кількості блоків."
      Course 4 SCFL 1a_instruction: "Допоможеш Скрету дістатись жолудя за допомогою
        найменшої кількості блоків?"
      Course 4 SCFL 1b_instruction: "Допоможеш Скрету дістатись жолудя за допомогою
        найменшої кількості блоків?"
      Course 4 SCFL 2_instruction: "Розв'язуй це завдання за допомогою найменшої можливої
        кількості блоків."
      Course 4 SCFL 3_instruction: "Можеш з'ясувати як намалювати цю фігуру?"
      Course 4 SCFL 4_instruction: "Можеш з'ясувати як намалювати цю фігуру?"
      Course 4 SCFL 5_instruction: "Можеш з'ясувати як намалювати цю фігуру?"
      Course 4 SCFL 6_instruction: "Можеш з'ясувати як намалювати цю фігуру за один
        цикл?"
      Course 4 SCFL 7_instruction: "Художник хоче зловити хвилю! Зможеш допомогти
        відтворити цей малюнок?"
      Course 4 SCFP 1_instruction: "Створи функцію з параметрами, яка дозволить Художнику
        перестрибувати вперед і назад на х пікселів, а також вгору і вниз на у пікселів
        (використовуючи додатні та від'ємні числа)."
      Course 4 SCV 1_instruction: "Натисни, щоб знову переглянути інструкції."
      Course 4 SCV 2_instruction: "Натисни, щоб знову переглянути інструкції."
      Course 4 SCV 3_instruction: |-
        А тепер до гри! Злови Кота, щоб отримати 2 бали. Злови Пінгвіна, щоб отримати 3 бали. Зароби 10 балів для перемоги!\r
        Уважно - коли Кіт та Пінгвін торкаються один одного, бали втрачаються.\r
        \r
        Додавай необхідні блоки, щоб гра працювала так, як у поясненні. Як можна змусити Собаку рухатись у різних напрямках за допомогою стрілочок? Як додавати бали, коли Собака ловить Кота чи Пінгвіна? Як віднімати бали, коли Кіт і Пінгвін торкаються один одного?
      Course 4 SCV 4_instruction: "Розв'язуй це завдання за допомогою найменшої можливої
        кількості блоків."
      Course 4 SCV 5_instruction: "Розв'язуй це завдання за допомогою найменшої можливої
        кількості блоків."
      Course 4 SCV 6_instruction: "Натисни, щоб знову переглянути інструкції."
      Course 4 SCVP 1_instruction: "Створи функцію з параметрами, яка дозволить Художнику
        перестрибувати вперед і назад на х пікселів, а також вгору і вниз на у пікселів
        (використовуючи додатні та від'ємні числа)."
      Course 4 Variables Assessment_instruction: "Можеш створити це зображення, використовуючи
        змінну для сторін? Кожна лінія повинна мати довжину 50 пікселів."
      Course1BeePuzzle12_instruction: "Збери три нектару, а потім зроби два меду"
      Course1MazeAssessment1_instruction: |-
        This is a test!\r
        Move one way, then
        another to get me to the pig
      Course1MazeAssessment2_instruction: |-
        This is a test!\r
        Move one way, then
        another to get me to the pig.
      CSP Data Unit - Counting Multiple Things_instruction: |-
        If you can count one
        thing you can count multiple things\r
        \r
        Find out how many people like something
        other than dogs and cats\r
        \r
        Count dogs\r
        Count cats\r
        Count total\r
        Do
        the math\r
        \r
        blank/ blank toal\r
        \r
        Can also use this to find percents
        from this\r
        \r
        x% are dog lovers
      CSP Data Unit -Counting Records - Easy Way_instruction: |
        ReadRecords with specific
        criteria \r
        find the length of an array\r
      CSP Data Unit -Counting Records - Hard Way_instruction: |
        \r
        1. ReadRecords
        for all records\r
        2. Way to loop through and count\r
      CSP U4 - JSON Object Intro - Bad Way_instruction: |
        Trigger both the keyboard
        and mouse event and examine the event objects displayed in the console. Why
        might an object be the best way to store this information? (Click to see full
        instructions)
      CSP U4 - JSON Object Intro - Good Way_instruction: "Create an object with at\nleast
        5 values including at least one string and one number. (Click to see\nfull
        instructions) \n"
      CSP U4 - Objects - createObject_instruction: "Create an object with at least\n5
        values including at least one string and one number. (Click to see full\ninstructions)
        \n"
      drawings!_instruction: |
        Draw the equilateral triangle - all the sides are the
        same!
      ECSPD Binary Odometer_instruction: |
        This is another resource you could use
        with your students.
      Eval Booleans 1_instruction: |
        Boolean operators (like >, <, =) allow us to
        compare different values, returning either true or false. Click "Run" to
        see how this expression evaluates.
      Eval Booleans 2_instruction: |
        Can you set the values so that this expression
        evaluates as true?
      Eval Booleans 3_instruction: |
        The string-length function returns the number
        of characters in a string (including spaces!) - make this code evaluate to
        true.
      Eval Booleans 4_instruction: |
        Here's an Evaluation Block called AND - it returns
        true if both of its parameters are true, otherwise it returns false. Edit
        the x variable so that this expression returns true.
      Eval Booleans 5_instruction: |
        This OR block returns true if either of its parameters
        is true. Otherwise, if both parameters are false it will return false. Set
        the y variable to a value that will cause this expression to return false.
      Eval Booleans 6_instruction: |
        Here's one more boolean block called NOT. This
        block flips true to false, or false to true. If you wrap this block of code
        in a NOT block, it should return true (because we are asking if the two expressions
        do NOT produce equal values).
      Eval Booleans Free Play_instruction: |
        Free Play: Try out some creations of
        your own using Booleans.
      Eval Booleans_instruction: |
        Booleans allow us to compare different values,
        returning "true" if the are equal, or "false" if they are not. What do
        you think this code will evaluate to?
      Eval Cond 1_instruction: |
        The cond block checks the boolean expressions in
        the left column, and as soon as it finds one that returns "true" it runs
        the corresponding code on the right. If none of the expressions evaluate to
        "true," it runs the bottom block. Update the "temperature" variable so
        that this block returns "It's just right."
      Eval Cond 2 (copy 1)_instruction: |
        This condition returns a different shape
        based on the value of the "sides" variable - change the value of "sides"
        so that the conditional returns a triangle.
      Eval Cond 2_instruction: |
        This condition returns a different shape based on
        the value of the "sides" variable - change the value of "sides" so that
        the conditional returns a triangle.
      Eval Cond 3 (copy 1)_instruction: |
        Can you write a conditional that checks
        the variable "age" and returns "Old enough to vote and drive" if age >
        17, "Old enough to drive" if age is > 15, and "Can't drive or vote" if
        neither conditions is true. Hint: The first condition to return "true" wins
        - make sure you put your conditions in the right order.
      Eval Cond 3_instruction: |
        Can you write a conditional that checks the variable
        "age" and returns "Old enough to vote and drive" if age > 17, "Old enough
        to drive" if age is > 15, and "Can't drive or vote" if neither conditions
        is true. Hint: The first condition to return "true" wins - make sure you
        put your conditions in the right order.
      Eval Cond 4_instruction: |
        We can use the string=? function to make conditionals
        that respond to text input. Here's a function called green shape that takes
        a string for the type of shape. Complete the conditions so that the correct
        solid green shape is returned when the function is run with "circle", "triangle",
        "square", or "rectangle".
      Eval Cond 5_instruction: |
        Here's a similar function red shape with an additional
        variable for size. Complete the conditionals so the correct solid red image
        of a given size is drawn for "circle", "triangle", and "star".
      Eval Cond 6_instruction: |-
        Write a function called food-critic, which takes
        in the name of a food and produces a String that says how you feel about that
        food. For example, (food-critic “pizza”) might evaluate to “delicious”, but
        (food-critic “rotten eggs”) might evaluate to “gross!”. Choose at least two
        foods to review, but you can you write more if you like!  Don’t forget to
        add an “else” clause!\r
        One example - and part of the definition -  has already
        been done for you!
      Eval Cond 7_instruction: |
        Free Play: Write a function called green-shape, which
        takes in the name of a shape and produces a solid green shape. Your function
        should work with at least “circle”, “star” and “rectangle”, but you can add
        other shapes if you like. You can choose the size of each shape. Don’t forget
        to add an “else” clause!\r
        One example - and part of the definition -  has
        already been done for you!\r
      Eval Cond 8_instruction: |
        Free Play: Suppose you want to own a car at 21, or
        have your own business by 30. Write a function called life-goals, which takes
        in an age and produces a string that describes your life goals by then. Don’t
        forget to add an “else” clause!\r
      Eval Contracts 1_instruction: |
        Use the "star" function to produce a red star
        with a 60 pixel radius
      Eval Contracts 10A_instruction: |
        Alright let's complete this puzzle with a
        Green Square that is 175 pixels in size.
      Eval Contracts 11A_instruction: |
        Can you complete this puzzle to read "Hello
        World" in the banner?
      Eval Contracts 2_instruction: |
        Check out the "rotate" function - can you
        use it to rotate this 90 pixel green square by 45 degrees?
      Eval Contracts 3_instruction: |
        Try using the "text" function to write this
        teal text at size 40.
      Eval Contracts 4 A_instruction: |
        The "scale" function returns an image that
        is scaled either larger or smaller than the input image. Try scaling this
        circle by a factor of 10 - how is the resulting image different than if you'd
        just made a circle of that size in the first place?
      Eval Contracts 4_instruction: |
        The scale function returns an image that is
        either larger or smaller than the input image. Try scaling this circle by
        a factor of 10. How is the returned image different than if you'd just made
        a circle of that size in the first place?
      Eval Contracts 8A_instruction: |
        Can you complete this puzzle? The big-triangle
        is 200 pixels in size and purple?
      Eval Contracts A_instruction: |
        Use the star function to produce a solid red
        star with a 60 pixel radius
      Eval Contracts C_instruction: |
        Check out the rotate function - can you use
        it to rotate this 90 pixel green square by 45 degrees?
      Eval Contracts E_instruction: |
        Try using the text function to write "Hello,
        world!" in teal at size 40.
      Eval Contracts shrink_instruction: "Can you complete this image using the \"shrink\"\nfunction
        block? The radius is 20. \n"
      Eval Define Funcs 1_instruction: |
        Here's a new function called green-triangle
        that takes a single Number for size and produces a green triangle. Use the
        new function to create a 125 pixel green triangle.
      Eval Define Funcs 2_instruction: |
        Let's look inside that green-triangle function
        to see how it works. Can you modify it so that the green-triangle function
        always draws outlined green triangles?
      Eval Define Funcs 3_instruction: |
        Here's the start of another new function
        called purple-circle with a domain of one Number (the radius) and a range
        of Image. The body of the function is broken though - fix it and then make
        a purple circle with 150 pixel radius
      Eval Define Funcs 4_instruction: |
        Create a new function called aqua-star that
        has a Domain of a single Number for radius and returns an aqua star of the
        given radius. Run your new function with a radius of 75.
      Eval Define Funcs 5_instruction: |
        Let's use that aqua-star function to make
        a row of different sized stars. From left to right, the stars should have
        radii of 25, 50, and 75.
      Eval Define Funcs Test_instruction: |
        Here's the start of another new function
        called purple-circle with a domain of one Number (the radius) and a range
        of Image. The body of the function is broken though - fix it and then make
        a purple circle with 150 pixel radius
      Eval Defining Vars Free Play 1_instruction: |
        Free Play: We've provided a function
        that fills your screen with my-image. Change my-image to see what patterns
        you can make.
      Eval Design Recipe .1_instruction: |
        Here's a Design Recipe for a function
        called square-circle with domain Number String and range Image. Click Edit
        to write the function definition (you will see two examples provided).
      Eval Design Recipe 1 (copy 1)_instruction: |
        We're going to write a function
        that draws a solid rectangle of any color that is twice wide as it is high.
        Start with an example - draw a solid green rectangle that has a height on
        100 pixels.
      Eval Design Recipe 1_instruction: |
        Alright, now given the Contract wide-rect:
        Number String -> Image, write an example - draw a solid green rectangle that
        has a height of 100 pixels.
      Eval Design Recipe 2 (copy 1)_instruction: |
        Let's do one more example before
        writing the function definition - this time draw a solid red rectangle with
        a height of 75 pixels.
      Eval Design Recipe 2_instruction: |
        Let's do one more example before writing
        the function definition - this time draw a solid red rectangle with a height
        of 75 pixels.
      Eval Design Recipe 3_instruction: |
        The Design Recipe for wide-rect already
        has a contract and one example. Can you write a second example and then complete
        the definition? The wide-rect function should produce a rectangle of given
        color that is twice as wide as it is high.
      Eval Design Recipe 4_instruction: |
        Use the Design Recipe to create a function
        starburst. When given a number of points and an outer radius, starburst returns
        a yellow radial star with given points, and an inner radius that is half the
        outer radius.
      Eval Design Recipe 5_instruction: |
        Using the Design Recipe, write a function
        striped-flag that takes two colors and produces a flag that is 250 pixels
        wide, 150 pixels tall, with three even horizontal stripes of given colors,
        in the order color2, color1, color2.
      Eval Design Recipe 6_instruction: |
        Write a function large-polygon that should
        output a solid polygon of given sides and color that takes up most of the
        window, regardless of the number of sides. To make sure that the polygon doesn't
        get too large as you increase the number of sides, side length should be inversely
        proportional to side number, with a length of (800/sides).
      Eval Design Recipe Free Play_instruction: |
        Free Play: Use the Design Recipe
        to create some functions of your own design
      Eval Free Play_instruction: 'Free Play: Make art with code!'
      Eval Strings Images .1_instruction: |
        So far we've only dealt with a single
        type of data, Numbers. Another type of data is a String, which is any combination
        of letters, numbers, or other characters wrapped in quotation marks. Run the
        String "Hello, world!" and see what happens.
      Eval Strings Images .2_instruction: |
        The string-append function takes two Strings
        and returns a single combined String. Add a String "Universe" to the second
        argument of string-append.
      Eval Strings Images 1_instruction: |
        The third type of data we're going to
        use is an Image. This star function takes in a Number and two Strings, and
        it evaluates to an Image. Use this function to make a solid red star with
        radius of 100.
      Eval Strings Images 2_instruction: |
        Free Play: Every Evaluation Block is color-coded
        to let you know which data type it returns and which types it needs for its
        parameters. The last parameter of the triangle function takes a String that
        controls its color - try some different colors to see what works.
      Eval Strings Images 3_instruction: |
        Some functions can only take a specific
        set of Strings, such as the second argument of this circle function, which
        controls its style. Draw this orange outline circle using the special String
        block with a dropdown to make sure you only use valid styles.
      Eval Strings Images 4_instruction: |
        Try using the rectangle block to draw this
        solid, red rectangle - it is 175 pixels wide and 100 pixels tall.
      Eval Strings Images 5_instruction: |
        Try using this new Evaluation Block called
        overlay to place a 100 pixel white triangle on top of a 200 pixel red circle.
      Eval Strings Images 6_instruction: |
        Use the overlay block to place a 75 pixel
        radius yellow star on top of a 150 pixel long blue square.
      Eval Strings Images 7_instruction: |
        The offset block lets you move an image
        relative to where it would normally be placed. Use this block to offset the
        square by 100 pixels on the y-axis.
      Eval Strings Images 8_instruction: |
        Here's a different kind of star block
        - it's called radial-star and it allows you to draw stars with any number
        of points! Use it to create a 7 point solid orange star with an inner radius
        of 75 pixels and an outer radius of 175 pixels.
      Eval Strings Images Free Play_instruction: |
        Free Play: Explore the blocks available
        to create something interesting. Make sure to share your favorite creations.
      Farmer for Authored Hint testing_instruction: |
        Wow, I found a really deep hole!
        I don't know how many shovelfuls of dirt it needs.  Can you write a program
        that fills it until the ground is even?  Hint:  Try using the while loop this
        time.
      Frequency Analysis_instruction: Test
      frozen circle function in circle_instruction: "А тепер створимо 20 кіл, котрі
        накладаються, повертаючи на 18 градусів між колами."
      frozen circle function with parameter_instruction: Ось блок "Створити коло",
        який малює кола різних розмірів. Зможеш використати його для створення малого
        кола, розміром 5, та великого кола, розміром 10?
      frozen circle function_instruction: Використай новий блок "Створити коло" для
        малювання 10 кіл, які перекриваються. Не забудь перескакувати між колами.
      frozen circle_instruction: "Коло є особливою фігурою. Здогадаєшся, які числа
        потрібно поставити замість знаків питання, щоб намалювати коло?"
      frozen cross rotate dense_instruction: "А повторимо це 90 разів! Скільки разів
        90 входить у 360? Підказка: це дуже мале число."
      frozen cross rotate_instruction: "А тепер спробуємо повторити 10 разів. На скільки
        градусів потрібно повертати між лініями?"
      frozen cross_instruction: Розмісти ці команди всередині блоку "Повторити", щоб
        створити знак плюса. А ти зауважив, що Ельза може рухатись вперед та назад?
      frozen diamond mini snowflake_instruction: Чи знаєш ти, що кожна сніжинка має
        унікальну форму? Створимо нову сніжинку, використавши блок "Повторити" для
        малювання паралелограма 4 рази, повертаючи на 90 градусів після кожної фігури.
      frozen diamond snowflake_instruction: "Що ж, створимо нову сніжинку, використавши
        блок повторення, щоб намалювати паралелограм 10 разів, повертаючи на 36 градусів
        між ними."
      frozen diamond_instruction: "Застосуй блок повторення до цих блоків, щоб намалювати
        паралелограм. Він схожий на квадрат, але з різними кутами. Цей має кути 60
        та 120 градусів, тоді як квадрат - усі по 90 градусів."
      frozen freeplay_instruction: "Вітаємо офіційного головного художника! Створіть
        свою зимову казку!"
      frozen line_instruction: "Привіт! Я Ельза з Еренделу. Допоможи мені намалювати
        лінію."
      frozen perpendicular_instruction: А тепер спробуємо створити дві лінії, розміщені
        під кутом 90 градусів між собою. Нам знадобиться блок "Повернути", а також
        блок "Рухатись".
      frozen snowflake branch_instruction: Спробуй використати блок "Створити гілочку
        сніжинки" для побудови трьох гілочок, котрі починають нагадувати сніжинку.
      frozen snowflake full_instruction: "А тепер повтори 8 разів, щоб утворилась
        красива сніжинка!"
      frozen snowflower_instruction: "Складні візерунки можна створити з простих фігур.
        Зможеш створити шаблон, намалювавши 5 кіл розміром 5, а та 5 кіл розміром
        10?"
      frozen square iterative_instruction: "Схоже, що ми вже на півдорозі до малювання
        квадрата. Складемо 4 лінії, щоб утворився квадрат."
      frozen square loop 3x_instruction: "Створимо 3 квадрати, повертаючи після кожного
        із них. Не забудь повернути на 120 градусів перед тим, як малювати наступний
        квадрат."
      frozen square loop_instruction: Привіт, я Анна з Еренделу! Спробуємо намалювати
        квадрат за допомогою блоку "Повторити", що дозволить використати менше блоків.
        Скільки разів ( замість ???) слід виконати дії всередині блоку "Повторити",
        щоб утворився квадрат?
      frozen square snowflake_instruction: Зможеш створити сніжинку за допомогою блоку
        "Повторити", в якому 10 разів малюватиметься квадрат, а блок "Повернути" виконає
        поворот на 36 градусів між фігурами?
      Infinity_catch_instruction: "Можеш допомогти Ельзі (персонаж 2) наздогнати Анну,
        використовуючи клавіші зі стрілками?"
      Infinity_finale_instruction: "Створи все, що завгодно, і поділись своїм творінням!"
      Infinity_move_collide_instruction: "Хіро - це персонаж 1. Перемісти його прямо
        до Беймаксу та програй звук, коли вони торкнуться один одного."
      Infinity_move_directions_instruction: Беймакс - це персонаж 2. Додай блоки "Рухатись"
        та перемісти Беймакса стрілками. Зроби так, щоб він торкнувся двох інших персонажів.
      Infinity_move_right_instruction: Хіро - це персонаж 1. Скористайся блоком "Рухатись"
        та перемісти Хіро так, щоб він торкнувся Беймаксу.
      Infinity_repeat_instruction: Скористайся блоком "Повторювати завжди", щоб Анна
        рухалась вгору і вниз на 400 пікселів.
      Infinity_say_instruction: Використай блок "Говорити", щоб Анна сказала "Привіт".
      Infinity_shoot_instruction: "Беймакс - це персонаж 2. Нехай Беймакс кине ракету
        в Хіро."
      Infinity_shoot_directions_instruction: "Хіро - це персонаж 3. Нехай Хіро кине
        снаряди в кожного з чотирьох персонажів. Між кидками зачекай 1 секунду."
      Infinity_test_instruction: "Це пробний рівень Infinity."
      Infinity_touch_faster_instruction: "Торкнись ще більшої кількості сніжинок!"
      Infinity_touch_four_instruction: "Перемісти Анну вгору, вниз, ліворуч та праворуч,
        щоб вона торкнулась кожної з чотирьох сніжинок."
      Infinity_touch_score_instruction: Нехай Анна отримує бал щоразу, коли торкається
        сніжинки. Клацни "Запустити" та скеруй її по разу до кожної сніжинки.
      jessie-test_instruction: Lots of instructions
      Just for Testing_instruction: Test instructions
      K-1 Artist 1 Assessment 1_instruction: "Намалюй коротку лінію вгору і довгу
        направо!"
      K-1 artist 1 level 10_instruction: "Намалюй пунктирну лінію, використовуючи
        обидва блоки стрибку і малювання"
      K-1 artist 1 level 9_instruction: "Намалюйте це, використавши три лінії"
      K-1 Artist Loops 1_instruction: "Намалюй цю лінію, 4 рази рухаючись на схід."
      K-1 Artist Loops 2_instruction: "Можеш намалювати таку ж лінію, використовуючи
        цикл?"
      K-1 Artist Loops 3_instruction: "Можеш зациклити ці блоки, щоб намалювати 6
        ліній?"
      K-1 Artist Loops 4_instruction: "Цикл може нам допомогти намалювати верх цього
        замку?"
      K-1 Artist Loops 5_instruction: "Що потрібно виконати 4 рази, щоб намалювати
        верх цих сходів?"
      K-1 Artist Loops 6_instruction: "Тут потрібно два цикли: один, щоб піднятись
        догори. інший - щоб спуститись вниз."
      K-1 Artist Loops 7_instruction: "Можеш завершити цей узор двома циклами?"
      K-1 Artist Loops 8_instruction: "Ці сходи мають довші сходинки."
      K-1 Artist Loops 9_instruction: "Оцінювання: Намалюй сходи, використовуючи цикл"
      K-1 Artist Loops Free Play_instruction: "Вільна гра, намалюй щось цікаве!"
      K-1 Artist1 1_instruction: "Намалюй стопу людини однією лінією"
      K-1 Artist1 10_instruction: "Малюй і перестрибуй, щоб створити пунктирний шлях
        до скарбу X"
      K-1 Artist1 2_instruction: "Намалюй вусик у кота за допомогою двох ліній!"
      K-1 Artist1 3_instruction: "Намалюй дві лінії на схід та дві лінії на північ,
        щоб завершити будинок!"
      K-1 Artist1 4_instruction: "Намалюй лінії вгору, вперед і вниз щоб завершити
        замок!"
      K-1 Artist1 5.5_instruction: "Заверши третю башту за допомогою коротких ліній"
      K-1 Artist1 5_instruction: "Намалюй стебло цієї квітки за допомогою двох ліній!"
      K-1 Artist1 6_instruction: "Завершуй зображення за допомогою блоку стрибок!"
      K-1 Artist1 7_instruction: "Щоб переміститись без малювання, використовуй блок
        стрибка. Перестрибни і намалюй лінію."
      K-1 Artist1 8_instruction: "Намалюй пунктирну лінію використовуючи обидва блоки
        стрибку і малювання"
      K-1 Artist1 9_instruction: "Малюй і перестрибуй, щоб зробити пунктирну лінію"
      K-1 Artist1 Assessment 1_instruction: "Малюй короткі та довгі лінії!"
      K-1 Artist1 Assessment 2_instruction: "Малюй короткі пунктирні лінії!"
      K-1 Artist2 1_instruction: "Намалюй квадрат під трикутником."
      K-1 Artist2 2_instruction: "Перестрибни і намалюй квадрат поруч з будинком."
      K-1 Artist2 3_instruction: "Намалюй квадрат вище іншого квадрату"
      K-1 Artist2 4_instruction: "Намалюй прямокутник, щоб завершити міст."
      K-1 Artist2 5_instruction: "Намалюй прямокутник, щоб завершити опору моста"
      K-1 Artist2 6_instruction: "Намалюй два квадрати, щоб створити прямокутник!"
      K-1 Artist2 Assessment1_instruction: "Оцінювання: Намалюй квадрат біля іншого
        квадрату."
      K-1 Artist2 Free Draw_instruction: "Намалюй що завгодно!"
      K-1 Artist2_7_instruction: "Намалюй прямокутник, щоб додати до комоду верхній
        ящик!"
      K-1 Bee 1_instruction: "Перемісти мене на квітку, отримай нектар, а потім переміщуй
        мене на медові стільники та зроби мед"
      K-1 Bee 10_instruction: "Збери чотири нектари, а потім зроби два меди!"
      K-1 Bee 11.5_instruction: "Збери 4 нектари, щоб зробити 4 меди!"
      K-1 Bee 11_instruction: "Збери три нектари, а потім зроби один мед"
      K-1 Bee 12_instruction: "Збери три нектари, а потім зроби два меди!"
      K-1 Bee 13_instruction: "Збери три нектари, а потім зроби один мед!"
      K-1 Bee 14_instruction: "Приведи мене до нектару, підніми його, приведи мене
        до стільника і зроби мед"
      K-1 Bee 15_instruction: "Збери два нектари, щоб зробити два меди!"
      K-1 Bee 2_instruction: "Перемісти мене на квітку, отримай нектар, а потім переміщуй
        мене на медові стільники та зроби мед"
      K-1 Bee 3_instruction: "Перемісти мене на квітку, отримай нектар, а потім переміщуй
        мене на медові стільники та зроби мед"
      K-1 Bee 4_instruction: "Збери два нектари, а потім зроби два меди!"
      K-1 Bee 5_instruction: "Збери три нектари, а потім зроби три меди!"
      K-1 Bee 6_instruction: "Збери два нектари, а потім зроби два меди!"
      K-1 Bee 7_instruction: "Збери три нектари, а потім зроби два меди!"
      K-1 Bee 8_instruction: "Збери два нектари, а потім зроби два меди!"
      K-1 Bee 9_instruction: "Збери два нектари, а потім зроби два меди!"
      K-1 Bee Assessment 1_instruction: "Збери нектар, щоб зробити мед!"
      K-1 Bee Assessment 2_instruction: "Збери нектар, щоб зробити мед!"
      K-1 Bee Loops 1_instruction: "Збери нектар, щоб зробити мед!"
      K-1 Bee Loops 10_instruction: "Збери весь нектар та зроби мед."
      K-1 Bee Loops 11_instruction: "Збери весь нектар та мед!"
      K-1 Bee Loops 12_instruction: "Збери весь нектар та мед."
      K-1 Bee Loops 2_instruction: "Використай цикл, щоб пересуватись, а потім збери
        нектар і зроби мед!"
      K-1 Bee Loops 3_instruction: "Використай цикли, щоб зібрати нектар і зробити
        мед!"
      K-1 Bee Loops 4_instruction: "Використай цикли, щоб зібрати нектар, зробити
        мед і рухатися!"
      K-1 Bee Loops 5_instruction: "Використай цикли, щоб зібрати нектар і мед!"
      K-1 Bee Loops 6_instruction: "Скористайся циклами, щоб зібрати нектар, зробити
        мед і рухатися!"
      K-1 Bee Loops 7_instruction: "Використай цикли, щоб зібрати нектар і зробити
        мед!"
      K-1 Bee Loops 8_instruction: "Використай цикли, щоб зібрати нектар і зробити
        мед!"
      K-1 Bee Loops 9_instruction: "Скористайся циклами, щоб зібрати нектар, зробити
        мед і рухатися!"
      K-1 Bee Loops Assessment 1_instruction: "Збери нектар, щоб зробити мед і використай
        цикли для переміщень!"
      K-1 Bee Loops Assessment 2_instruction: "Збери нектар, щоб зробити мед, використавши
        цикли!"
      K-1 Bee Puzzle 12_instruction: "Збери три нектару, а потім зроби два меду"
      K-1 Building a Foundation Assessment_instruction: "Побудуй трирівневу піраміду.
        Інших вказівок немає, так що складай блоки, поки ви не отримаєш правильний
        результат!"
      k-1 maze 1_instruction: "Поможеш мені рухатися на захід, щоб дістатися до свині?"
      K-1 Maze 10_instruction: "Обійди вибухівку, щоб помогти мені дістатися до свині! "
      K-1 Maze 11_instruction: "Простеж шлях та проведи мене до лихої свині. Уникай
        вибухівки, або полетить пір'я! Підказка: Вона знаходиться на південь від мене."
      K-1 Maze 2_instruction: "Перемісти мене на Схід, щоб дістатись до свині!"
      K-1 Maze 3_instruction: "Перемісти мене на Південь, щоб дістатись до свині!"
      K-1 Maze 4_instruction: "Перемісти мене на Північ, щоб дістатись до свині!"
      K-1 Maze 5_instruction: "Перемісти мене на Схід, щоб дістатись до свині!"
      K-1 Maze 6_instruction: "Перемісти мене в одну сторону, а потім в іншу, щоб
        дістатись до свині!"
      K-1 Maze 7_instruction: "Перемісти мене в одну сторону, а потім в іншу, щоб
        дістатись до свині!"
      K-1 Maze 8_instruction: "Перемісти мене в одну сторону, а потім в іншу, щоб
        дістатись до свині!"
      K-1 Maze 9_instruction: "Перемісти мене в одну сторону, а потім в іншу, щоб
        дістатись до свині!"
      K-1 Maze Assessment 1_instruction: "Оцінювання - Поможи дістатись до свині!"
      K-1 Maze Assessment 12_instruction: "Рівень оцінювання"
      K-1 Maze Assessment 13_instruction: "Рівень оцінювання"
      K-1 Maze Assessment 2_instruction: "Оцінювання - Поможи дістатись до свині!"
      K-1 maze debug 1_instruction: "Зміни код, щоб допомогти мені дістатись до свині!"
      K-1 maze debug 10_instruction: "Відлагодь цей рівень переставляючи і додаючи
        блоки, щоб дістатись до свині!"
      K-1 maze debug 11_instruction: "Випробування! \\r Налагодь цей рівень, переставляючи
        і додаючи блоки, щоб дістатись свині"
      K-1 maze debug 2_instruction: "З'ясуй, чого не вистачає, а потім додай блоки,
        щоб дістатись до свині!"
      K-1 maze debug 3_instruction: "З'ясуй, у чому помилка, а потім ВИДАЛИ блоки,
        щоб дістатись до свині!"
      K-1 maze debug 4_instruction: "Проглянь ці блоки і виправ їх! Здається, я рухаюсь
        у неправильному напрямку."
      K-1 maze debug 5_instruction: "Налагодь цей рівень переставляючи і додаючи блоки,
        щоб дістатися до свині!"
      K-1 maze debug 6_instruction: "Відлагодь цей рівень переставляючи і додаючи
        блоки, щоб дістатись до свині!"
      K-1 maze debug 7_instruction: "Відлагодь цей рівень переставляючи і додаючи
        блоки, щоб дістатись до свині!"
      K-1 maze debug 8_instruction: "Налагодь цей рівень переставляючи і додаючи блоки,
        щоб дістатися до свині!"
      K-1 maze debug 9_instruction: "Відлагодь цей рівень переставляючи і додаючи
        блоки, щоб дістатись до свині!"
      K-1 Maze debug Assessment 1_instruction: "Оцінювання - Налагодь цей рівень переставляючи
        і додаючи блоки, щоб дістатися до свині!"
      K-1 Maze Loops 1_instruction: "Доведи мене до свині!"
      K-1 Maze Loops 10_instruction: Приведи мене до свині! Використовуй цикл "повторити".
      K-1 Maze Loops 11_instruction: Приведи мене до свині! Використовуй цикл "повторити".
      K-1 Maze Loops 12_instruction: Приведи мене до свині! Використовуй цикл "повторити".
      K-1 Maze Loops 2_instruction: Використовуй блок "Повторити", щоб привести мене
        до свині!
      K-1 Maze Loops 3_instruction: Приведи мене до свині! Використовуй цикл "повторити".
      K-1 Maze Loops 4_instruction: "Доведи мене до свині!"
      K-1 Maze Loops 5_instruction: Приведи мене до свині! Використовуй цикл "повторити".
      K-1 Maze Loops 6_instruction: Приведи мене до свині! Використовуй цикл "повторити".
      K-1 Maze Loops 7_instruction: Приведи мене до свині! Використовуй цикл "повторити".
      K-1 Maze Loops 8_instruction: Приведи мене до свині! Використовуй цикл "повторити".
      K-1 Maze Loops 9_instruction: "Доведи мене до свині!"
      K-1 Maze Loops Assessment 1_instruction: "Оцінювання - Використай цикл, щоб
        привести мене до свині!"
      K-1 Maze Loops Assessment 2_instruction: "Оцінювання - Використай цикл, щоб
        привести мене до свині!"
      K-1 Maze Multi 14_instruction: "Рівень оцінювання"
      K-1 Maze Multi 15_instruction: "Рівень оцінювання"
      K-1 Maze Sequence Assessment 1_instruction: "Випробування! \\r Рухайся спочатку
        в одну, а потім в іншу сторону, щоб дістатися до свині"
      K-1 Maze Sequence Assessment 2_instruction: "Випробування! \\r Рухайся спочатку
        в одну, а потім в іншу сторону, щоб дістатися до свині."
      kikiTesting_instruction: |
        .\r
         .\r
        .\r
        .\r
        .\r
        .\r
        \r
        .\r
        \r
      love_spring_1_instruction: |
        Let's celebrate Spring!  We have put some seeds
        in the ground to prepare for the season's flowers.  Can you cover them up
        so that the birds don't eat them?
      love_spring_2_instruction: |
        Our flowers are in full bloom!  Now we need the
        bee to grab nectar from each one so he can make plenty of honey back at his
        hive!
      love_spring_3_instruction: |-
        Figure out how to change this code so that Robin
        chooses a number between 1 and 20.  \r
        \r
        When you're ready, press "Run"
        and play until you guess Robin's number!
      Luigi's Pizza 1_instruction: |
        Welcome to Luigi's Pizza! To order a pizza,
        type the name of a topping into the cost function, and we'll return the price
        of that pizza. Try ordering a pepperoni pizza to start.
      Luigi's Pizza 2 (copy 1)_instruction: |
        Right now there are only four choices
        available at Luigi's pizza - let's fix that! Add a couple of new toppings
        to the conditional block in the "cost" function. Once you've added your
        toppings, test out the function to make sure it works.
      Luigi's Pizza 2_instruction: |
        Right now there are only four choices available
        at Luigi's pizza - let's fix that! Add a couple of new toppings to the conditional
        block in the cost function. Once you've added your toppings, test out the
        function to make sure it works.
      Luigi's Pizza 3 (copy 1)_instruction: |
        That's better, everyone loves more
        variety in their pizza toppings! But you still can't please everyone, and
        folks are coming in to order toppings that Luigi doesn't have. Instead of
        saying no to those people, could you update the "else" clause so that we
        charge them a premium for toppings that we don't normally offer?
      Luigi's Pizza 3_instruction: |
        That's better, everyone loves more variety in
        their pizza toppings! But you still can't please everyone, and folks are
        coming in to order toppings that Luigi doesn't have. Instead of saying no
        to those people, could you update the else clause so that we charge them a
        premium for toppings that we don't normally offer? Let's charge $10,000
        for a topping we don't carry.
      Luigi's Pizza 4_instruction: |
        Free Play: What can you do to make Luigi's cost
        function even more useful?
      MSM Big Game Empty_instruction: |
        All variables and functions are currently
        empty stubs. Each puzzle progression will be focused on defining and handful
        of them, and therefore adding functionality.
      MSM Big Game Vars 1 (copy 1)_instruction: |
        In the Variables toolbox you'll
        see several variables that define how your game characters look, move, and
        interact
      MSM Big Game Vars 1_instruction: |
        In the Variables toolbox you'll see several
        variables that define how your game characters look, move, and interact
      MSM Big Game Vars Backup_instruction: |
        In the Variables toolbox you'll see
        several variables that define how your game characters look, move, and interact
      MSM Defining Vars 1 (copy 1)_instruction: |
        Write a program that produces a
        50 pixel solid green triangle.
      MSM Defining Vars 1_instruction: |
        Write a program that produces a 50 pixel
        solid green triangle.
      MSM Defining Vars 2 (copy 1)_instruction: |
        If we wanted to make fifty green
        triangles, it would be a pain to repeat that block of code 50 times. Let's
        create a variable called "my-shape" and put the code for a 50 pixel solid
        green triangle inside.
      MSM Defining Vars 2_instruction: |
        If we wanted to make fifty green triangles,
        it would be a pain to repeat that block of code 50 times. Let's create a
        variable called my-shape and put the code for a 50 pixel solid green triangle
        inside.
      MSM Defining Vars 3 (copy 1)_instruction: |
        Take your "my-shape" variable
        and use it with this provided code to draw two identical green triangles.
      MSM Defining Vars 3_instruction: |
        Take your my-shape variable and use it with
        this provided code to draw two identical green triangles that are 50 pixels
        in size.
      MSM Defining Vars 4_instruction: |
        Edit your my-shape variable so that it draws
        75 pixel solid red stars.
      MSM Play Lab Butterfly 1_instruction: |
        Help Sam stay on the screen so that
        you can always see at least a little piece of him. Using the arrow keys, see
        how far Sam can go to the left while still staying onscreen. You’ll find that
        Sam is onscreen as long as his x-coordinate is greater than -50. Then, fill
        in the code to make Sam stay on the screen.
      MSM Play Lab Butterfly 2_instruction: |
        Now make Sam stay on the right side
        of the screen. You'll have to experiment to see how far he can go and still
        be partially visible on the screen.
      MSM Play Lab Butterfly 3_instruction: |
        Now, combine your work to make Sam stay
        on both sides of the screen.
      MSM Play Lab Game 2_instruction: |
        Variables can also be used to control the
        speed of players in a game. Set the player speed and the enemy speed and see
        how the movement changes. Speed can be between 2 and 12.
      NetSim Standalone Automatic DNS_instruction: |
        In this version of the Internet
        Simulator, a Domain Name System (DNS) is provided for you and knows the IP
        addresses of all connected computers. Send a message in the form GET [hostname]
        to the DNS service at address <yourRouterNumber>.15 to get a student's address.
      NetSim Standalone Broadcast_instruction: |
        In this version of the Internet Simulator,
        you can connect to up to 5 other people in a room. When you send messages
        in the room, everyone receives them. What are some of the challenges of this
        system, and how might you solve them?\r
      NetSim Standalone Classroom Routers_instruction: |
        In this version of the Internet
        Simulator, everyone connects to a router and has a specific address. To send
        messages, you have to address your message to the specific address of the
        recipient, and the router will take care of delivering it to the right computer.
        If there are other routers created in your class, ask for the address of one
        of your classmates and send them a message! View the Log Router to see the
        path the messages have taken through the network.
      NetSim Standalone Freeplay_instruction: |
        In this configuration, most of the
        options are turned on, and you can play with them. Have fun!
      NetSim Standalone Manual DNS_instruction: |
        In this version of the simulator
        you can't see the other students' addresses.  Instead, one of you must act
        as a name service, to help share addresses with each other.
      NetSim Standalone Packets TCP_instruction: |
        Messages on the Internet can take
        many paths to get to their destination, and sometimes along the way the message
        gets dropped. In this version of the Internet Simulator, there is a 10% chance
        of a packet being dropped, multiple packets may take different paths to the
        destination, and the default max packet size is set to 6 additional characters.
      NetSim Standalone Routers Addresses_instruction: |-
        For this activity, connect
        to a router with the others in your group. Important note: The router will
        only properly route messages where the first 4 bits are the To: address and
        the second 4 bits are the From: address.\r
        \r
        [TODO: NetSim needs to support
        hierarchical addresses. For now, level is set up for 4 bit to and from addresses]
      NetSim Standalone SendAB_instruction: |
        You and your partner share a single
        wire that can only be in state A or state B. You can set the wire to either
        state at any time, and you can read the state of the wire at any time. Can
        you figure out a way to effectively communicate with just this system?
      NetSim Standalone Sending Numbers Ascii_instruction: |
        Now that you've transmitted
        information represented as decimal numbers, you can map those numbers to text
        characters to send text-based information back and forth. With a text-based
        protocol, you can easily represent and communicate all kinds of information.
      NetSim Standalone Sending Numbers_instruction: "You and your partner can now\nreliably
        send messages back and forth without extra coordination! While you're\nalways
        sending bits back and forth, you can also represent those bits as decimal\nnumbers.
        What kinds of information can you represent with this system? \n"
      NetSim_AddressingMessages_instruction: |
        In this version of the simulator, you
        will connect to a Router instead of directly to another student. Enter an
        address in the "To" box to send a message to another student.
      NetSim_AutomaticDNS_instruction: |
        In this version of the simulator a DNS service
        is provided for you. Send a message in the form GET [hostname] to the DNS
        service at address 15 to get a student's address.
      NetSim_ManualDNS_instruction: |
        In this version of the simulator you can't
        see the other students' addresses.  Instead, one of you must act as a name
        service, to help share addresses with each other.
      NetSim_SendAB_instruction: |
        Connect to another student.  Each of you can set
        the value of the wire between you to "A" or "B".  See if you can send
        a complete message!
      NetSim_SendAscii_instruction: |
        In this version of the simulator, you can send
        numbers or ASCII characters to one another, one bit at a time.
      NetSim_SendBits_instruction: |
        Connect to another student.  You can now set
        your wire to "0" or "1".  Send a message to your partner!
      NetSim_SendingABTest_instruction: |
        This is Sarah's test of making a netsim
        level
      NetSim_SendNumbers_instruction: |
        In this version of the simulator, you can
        view the decimal representations of the binary you are sending.
      NetSim_Superuser_instruction: You have loaded NetSim in superuser mode.
      NetSim_Variant1_instruction: |
        NetSim: Variant 1 allows students to manually
        work out the timing of sending bits back and forth.
      NetSim_Variant2_instruction: |
        NetSim: Variant 2: Students connect directly
        to one another and send entire packets back and forth, exploring systems of
        encoding data.
      NetSim_Variant3_instruction: |
        NetSim: Variant 3: Connects groups of 2-6 students
        with a router, and explores issues in routing and DNS
      New Artist Project_instruction: "Намалюй щось чудове! Код зберігається як проект
        і можна буде повернутися в будь-який час."
      NEW Course 4 Artist Functions 1_instruction: "Можеш створити квадрат, розміром
        100 пікселів, використовуючи цикл?"
      NEW Course 4 Artist Functions 10.1_instruction: "Щоб намалювати цей узор скористайся
        функціями з попередніх завдань."
      NEW Course 4 Artist Functions 10_instruction: Натисни "Редагувати" для заповнення
        блоків у визначенні функції, щоб створити квадрат на 40 пікселів.
      NEW Course 4 Artist Functions 11_instruction: У нас є нова функція, яка називається
        "намалювати ряд квадратів". Зазирни всередину блоків функції, щоб побачити,
        як ми її склали. Натисни "Виконати", коли будеш готовий до наступної задачки.
      NEW Course 4 Artist Functions 12_instruction: Використай функцію "намалювати
        ряд квадратів" з останнього завдання, щоб намалювати цей узор.
      NEW Course 4 Artist Functions 13_instruction: 'Зможеш намалювати зірку, використавши
        функцію "намалювати ряд квадратів"? Підказка: можливо доведеться рухатись
        вперед на 60 пікселів та повертати на 144 градуси'
      NEW Course 4 Artist Functions 14_instruction: "Час вільної гри! "
      NEW Course 4 Artist Functions 2_instruction: "Можеш намалювати 3 квадрати на
        відстані 20 пікселів один від одного? Підказка: розмір кожного квадрату -
        100 пікселів"
      NEW Course 4 Artist Functions 3_instruction: 'Ось новий тип блоку. Він називається
        "блок функції". Натисни кнопку "Виконати", щоб побачити, що він може робити. '
      NEW Course 4 Artist Functions 4_instruction: 'Використай функцію "намалювати
        квадрат" для малювання узору. Підказка: потрібно використати блок "повернути
        праворуч на 120 градусів" після кожного квадрата.'
      NEW Course 4 Artist Functions 5_instruction: Як блок "намалювати квадрат" знає,
        які команди виконувати? Натисни "Редагувати" у блоку "намалювати квадрат".
        Блоки у редакторі функцій є визначенням, яке утворює "намалювати квадрат".
        Роздивившись, натисни кнопку "Зберегти та закрити" і потім "Виконати".
      NEW Course 4 Artist Functions 6_instruction: |
        Використовуючи блок функції "намалювати квадрат", зможеш намалювати цей малюнок? Підказка: відстань між квадратами становить 20 пікселів.\r
      NEW Course 4 Artist Functions 7_instruction: 'Тепер зрозуміло, як використовувати
        блоки функцій? Змінимо цей квадрат, щоб він мав розмір 200 пікселів. Підказка:
        клацни на "редагувати", щоб змінити розмір у редакторі функції "малювати квадрат".
        Пам''ятай, що потрібно клацнути "зберегти і закрити", щоб вийти з редактора
        функцій. '
      NEW Course 4 Artist Functions 8_instruction: "Ми надали більшу частину коду
        створення функції. Проте, здається, чогось не вистачає. Зможеш відредагувати
        функцію малювання трикутника?"
      NEW Course 4 Artist Functions 9_instruction: "Який блок потрібно додати, щоб
        отримати трикутник наверху квадрата?"
      NEW Course 4 Artist Functions inspire_instruction: |-
        Натхнення для вільної гри: ти вивчив все, що потрібно знати, щоб намалювати такий узор! Якщо це зображення тебе надихає, спробуй створити схоже. Або створи щось своє.\r
         \r
        Хочеш дізнатись, як створено цей узор? Відвідай щоб побачити рішення.
      New Course 4 Artist Functions Level 4_instruction: Використай функцію "намалювати
        квадрат", щоб намалювати цей узор.
      NEW Course 4 Artist Params 1_instruction: Визначимо функцію для малювання квадрата
        зі стороною 50 пікселів. Натисни кнопку "Редагувати", щоб розпочати роботу.
      NEW Course 4 Artist Params 10_instruction: 'Створи блок функції "намалювати
        шестикутник" з параметром довжини. Підказка: цей шестикутник має розмір 100
        пікселів. '
      NEW Course 4 Artist Params 11_instruction: Зможеш здогадатись, як намалювати
        цю фігуру? Відредагуй функцію, щоб використати параметр "сторони".
      NEW Course 4 Artist Params 12_instruction: "Зможеш завершити цей малюнок? Всі
        сторони фігури мають довжину 100 пікселів."
      NEW Course 4 Artist Params 12a_instruction: Це зображення подібне до останнього.
        Можеш використати цикл "для" у своїй функції, щоб виконати цей проект?
      NEW Course 4 Artist Params 13_instruction: 'Відредагуємо функцію "намалювати
        фігуру". Вона вже має параметр "довжина". А тепер додамо параметр "сторони".
        Пам''ятай, що кут повороту для фігури рівний 360 розділене на кількість сторін
        цієї фігури. Підказка: задані довжини для кожної фігури: для трикутника це
        100 пікселів, шестикутника - 25 пікселів, а квадрата - 50 пікселів.'
      NEW Course 4 Artist Params 14_instruction: 'Можеш відтворити ці фігури? Перетягни
        параметр "довжина" у визначення функції. '
      NEW Course 4 Artist Params 15_instruction: "Вільна гра: ось функції, які ми
        створили, і ще кілька. Намалюй щось чудове!"
      NEW Course 4 Artist Params 2_instruction: Створи нову функцію "намалювати трикутник
        стороною 50 пікселів"
      NEW Course 4 Artist Params 3_instruction: |
        Використаємо функцію малювання 3 трикутників у ряд з останнього завдання. Підказка: відстань між трикутниками — 50 пікселів. \r
      NEW Course 4 Artist Params 4_instruction: Помітив щось відмінне у цих блоках
        функцій? Натисни кнопку "Виконати", щоб побачити, що відбувається.
      NEW Course 4 Artist Params 5_instruction: "Заповни ??? у параметрі довжини вхідного
        блоку . Підказка: п'ятикутник має розмір 100 пікселів. "
      NEW Course 4 Artist Params 6_instruction: Заповни параметр "довжина" для створення
        цих фігур, замінивши "???" на правильні числа. Квадрат та трикутник мають
        розмір 100 пікселів, а шестикутник - 75 пікселів.
      NEW Course 4 Artist Params 7_instruction: "Зможеш завершити цей малюнок? Підказка:
        кожен трикутник на 25 пікселів більший, ніж попередній. Перший трикутник має
        розмір 25 пікселів."
      NEW Course 4 Artist Params 8_instruction: "Код функції цього трикутника неправильний.
        Зможеш відредагувати функцію і виправити помилку, а тоді намалювати трикутники
        розмірами 25, 50 і 75?"
      NEW Course 4 Artist Params 9_instruction: 'Натисни "Редагувати" і заповни визначення
        функції "намалювати квадрат", додавши параметр. Він повинен приймати значення
        довжини, так само, як у трикутнику. На цей раз намалюй 3 квадрата: розміром
        25, 50 і 75 пікселів, кожен у 100 пікселях один від одного.'
      NEW Course 4 Artist Params inspire_instruction: |-
        Натхнення для вільної гри: ти вивчив все, що потрібно знати, щоб намалювати такий узор! Якщо це зображення тебе надихає, спробуй створити схоже. Або створи щось своє.\r
         \r
        Хочеш дізнатись, як створено цей узор? Відвідай https://studio.code.org/c/106387530 щоб побачити рішення.
      NEW Course 4 Artist Vars 1.5_instruction: 'Подивись на цей код - бачиш, як блоки
        "встановити довжину" та "довжина" працюють разом? Натисни на "Виконати", щоб
        побачити, як це працює. '
      NEW Course 4 Artist Vars 12_instruction: Зміни цей алгоритм, так щоб він використовував
        змінну "сторони" замість фіксованого число при малювання п'ятикутника. Заміни
        число 5 на змінну "сторони" і використай блок "встановити сторони".
      NEW Course 4 Artist Vars 2.5_instruction: 'Подивись на цей код - бачиш, як блоки
        "встановити довжину" та "довжина" працюють разом? Натисни на "Виконати", щоб
        побачити, як це працює. '
      NEW Course 4 Artist Vars 2_instruction: 'Перетягни блок з числом до блоку "встановити
        довжину", щоб малювати безліч 50-піксельних трикутників. '
      NEW Course 4 Artist Vars 4 5_instruction: "Чудовий результат попередньої задачі.
        Спробуємо знову, але на цей раз створимо цей крутий дизайн із шестикутників
        по 60 пікселів."
      NEW Course 4 Artist Vars 4_instruction: "Спробуємо знову. Зможеш встановити
        змінну довжини, щоб створити цей класний дизайн із шестикутників? Підказка:
        Це число кратне 10."
      NEW Course 4 Artist Vars 6_instruction: |
        Намалюй узор, розмістивши змінну "довжина" у правильних місцях, а тоді задай значення довжини (Підказка: це число кратне 10).\r
        \r
        Поглянь, як можна задати значення змінної один раз, а тоді використовувати його у всюди коді? \r
        \r
        \r
      NEW Course 4 Bee For Loops 1_instruction: "Використовуй цикли, щоб зібрати нектар
        з кожної квітки."
      NEW Course 4 Bee For Loops 10_instruction: Використай змінну "лічильник" циклу
        "для", щоб керувати, на скільки рухатись по горизонталі.
      NEW Course 4 Bee For Loops 10a_instruction: "Готовий до виклику? Скористайся
        здобутими знаннями про цикли, щоб розв'язати задачу. Пам'ятай: можна запускати
        своє рішення кілька разів, щоб з'ясувати потрібні кроки."
      NEW Course 4 Bee For Loops 11_instruction: "Можеш скористатись змінною циклу,
        щоб керувати рухом та збором нектару?"
      NEW Course 4 Bee For Loops 2_instruction: "Додай код, необхідний для того, щоб
        бджола зібрала весь нектар. Подивись, скільки коду потрібно, щоб розв'язати
        цю задачу! (Ми дізнаємось простіший спосіб розв'язку в наступному завданні.)"
      NEW Course 4 Bee For Loops 3_instruction: 'О, цикл все значно спрощує! Весь
        потрібний код тут, подивись, як він складений і клацни "Виконати", щоб подивитись,
        як він працює. '
      NEW Course 4 Bee For Loops 4 4_instruction: Тепер нам потрібно рухатись вперед
        "лічильник" разів, щоб зібрати нектар "лічильник" разів. Зможеш використати
        два цикли "повторити доки", щоб розв'язати задачу?
      NEW Course 4 Bee For Loops 4_instruction: "Заміни ??? у циклі на найбільшу кількість
        нектару, який має зібрати бджола. "
      NEW Course 4 Bee For Loops 5 5_instruction: "Ну що, розібрались із циклами?
        Допоможемо бджолі зібрати решту нектару."
      NEW Course 4 Bee For Loops 5_instruction: "Цикли можна використовувати для зворотнього
        відліку. Спробуй зібрати нектар, рахуючи від 5 до 1 по 1."
      NEW Course 4 Bee For Loops 6_instruction: Останнє число у циклі називається
        "приріст". Щоразу при виконанні циклу, лічильник змінюється на цей приріст.
        Спробуй збирати квіти, використавши приріст 2.
      NEW Course 4 Bee For Loops 7_instruction: "Подобаються цикли? Це схоже на останнє
        завдання, але потрібно зібрати 2,4,6,8,10 нектарів. Маєш початковий код, але
        без чисел у циклі з лічильником. Збираймо нектар!"
      NEW Course 4 Bee For Loops 8_instruction: |-
        Все правильно! Який має бути приріст, щоб збирати 3, 6, 9, 12, 15 нектарів?\r
        Підказка: Що потрібно додати до кожного числа, щоб отримати наступне за ним?
      NEW Course 4 Bee For Loops 9_instruction: "Якщо цикл рахує у зворотньому порядку,
        приріст віднімається від лічильника щоразу при виконанні циклу. Яким має бути
        приріст, щоб збирати 9, а потім 3 нектари?"
      NEW Course 4 Bee For Loops 95_instruction: Розглянь елементи щойно створеного
        циклу "для". Можеш здогадатися, які числа потрібно подвоїти, щоб розв'язати
        цю задачу? Чому це працює саме так?
      NEW Course 4 Play Lab Params 11_instruction: "Час вільної гри! Розважайся -
        усі блоки в твоєму розпорядженні. "
      NEW Course 4 Play Lab Params 5 5_instruction: "Заповни вхідні параметри персонажа
        числами (1, 2, and 3) і нехай вони патрулюють. "
      NEW Course 4 Play Lab Vars 4 5_instruction: '"Як думаєш, що робить цей код?
        Натисни "Запустити", щоб побачити, що відбувається."'
      NEW Course 4 Play Labs For Loops 7a_instruction: "Застосовуючи все, що ми вивчили
        до цього часу, зможеш змусити Динозавра рухатись вперед щоразу, як рахує Пінгвін?"
      NEW Course 4 Play Labs For Loops 8 Free Play_instruction: "Час для вільної гри,
        розважайся - доступні всі блоки. "
      NEW Course 4 Play Labs For Loops 8a_instruction: 'Завдання: як можна використати
        цикл "для", щоб кожен персонаж рухався і промовляв свій номер, а тоді зникав
        з екрану? '
      New Play Lab Project_instruction: "Створи власну розповідь або гру! Код зберігається
        як проект і можна буде повернутися в будь-який час."
      Ninjacat Demo B (copy 1)_instruction: |
        \r
        Let’s begin by exploring a simple
        videogame, and then figuring out how it works. You can use the arrow keys
        to move the ninja left, right and jump - try to catch the unicorn and avoid
        the dragon!\r
        \r
        \r
        \r
          \r
        \r
      Ninjacat Demo B_instruction: |
        Let’s begin by exploring a simple videogame,
        and then figuring out how it works. You can use the arrow keys to move the
        ninja up and down - try to catch the unicorn and avoid the dragon! When you
        think you've figured out how the game works, click "Finish"
      Ninjacat Demo No Animate_instruction: |
        Let’s begin by exploring a simple videogame,
        and then figuring out how it works. You can use the arrow keys to move the
        ninja up and down - try to catch the unicorn and avoid the dragon! When you
        think you've figured out how the game works, click "Finish"
      October15 bat_instruction: |
        Freeplay: Here are some functions to play with.  Can
        you draw a bat?\r
      October15 ghost 1_instruction: |
        Give the ghost eyes, using the "draw a circle"
        function.
      October15 JoL 1_instruction: |
        Program the artist to design a face for your
        jack-o-lantern!
      October15 pumpkin 1_instruction: |
        Finish this jack-o-lantern by drawing the
        eyes and nose in any style you would like.
      October15 stars 1_instruction: |
        Use loops and the "random integer" block
        to fill the night sky with stars of different shapes and sizes.
      Overworld Avoid Monsters_instruction: |
        Налетіти на Плазуна - погана ідея.
        Обережно пробирайся повз Плазунів та доберись до безпеки свого дому.
      Overworld Chop Tree_instruction: Деревина - важливий ресурс. З неї виготовляють
        багато речей. Підійди до дерева і скористайся командою "знищити блок", щоб
        зрубати його.
      Overworld Chop Trees_instruction: "Нам потрібно збудувати будинок до заходу
        сонця. Для цього потрібно багато деревини. Зрубай 3 дерева."
      Overworld Free Play 20x20_instruction: "Вітання! Вирішено останнє завдання!
        Тепер добувай, будуй, створюй щось унікальне, використовуючи все вивчене."
      Overworld Free Play_instruction: "Цей краєвид - твоє поле гри. Можеш будувати
        що завгодно."
      Overworld House Frame - A_instruction: "Створимо власний будинок! Це місце виглядає
        непогано. Збудуй каркас на земляних блоках."
      Overworld House Frame - C_instruction: "Створимо власний будинок! Це місце виглядає
        непогано. Збудуй каркас на земляних блоках."
      Overworld House Frame B_instruction: "Одну стіну завершено, збудуємо решту будинку,
        відповідно до плану! Потрібно буде повторювати багато дій."
      Overworld House Frame B2_instruction: "Одну стіну завершено, збудуємо решту
        будинку, відповідно до плану! Потрібно буде повторювати багато дій."
      Overworld House Frame C_instruction: "Одну стіну завершено, збудуємо решту будинку,
        відповідно до плану! Потрібно буде повторювати багато дій."
      Overworld House Frame Chosen_instruction: Збудуй решту будинку з матеріалу,
        який подобається. Команда "повторити" стане у нагоді.
      Overworld House Frame_instruction: "Збудуємо власний будинок! Це місце виглядає
        непогано. Будуй каркас на земляних блоках."
      Overworld Minecart Track_instruction: "Ми знову на поверхні, маючи багато підземних
        ресурсів. Тепер спробуємо побудувати колію вздовж шляху від твого будинку.
        Перший етап - очистити шлях. Слідуй по шляху і розчищай дерева."
      Overworld Move to Sheep_instruction: Додай другу команду "рухатись вперед" для
        того, щоб дістатись до вівці.
      Overworld Place Wall_instruction: Будинок починається зі стіни. Створи першу
        частину свого будинку, розміщуючи команди "поставити" та "рухатись вперед"
        всередині циклу повторення.
      Overworld Plant Crops_instruction: "Дуже добре планувати заздалегідь. Посади
        рослини по обидві сторони від води, щоб не бути голодним згодом."
      Overworld Powered Minecart_instruction: "Чудова робота! Зібрано багато ресурсів
        і побудовано скромний будиночок. А тепер додамо колію від краю карти до дверей
        твого будинку."
      Overworld Shear Sheep_instruction: Час стригти овець! Скористайся командою "стригти",
        щоб зістригти вовну з обох овець.
      PDAlg 13-16 Sam Extension Puzzle_instruction: |
        Add a second parameter to "onscreen?"
        for Sam's y coordinate and update the function so it keeps him safe on all
        four sides.
      PDAlg 17-20 Luigi Extension Puzzle_instruction: |
        Without modifying your existing
        "cost" function, create a new "coupon" function that takes a pizza topping
        and coupon code and returns the cost of a pizza with that topping. If the
        coupon code is correct (you get to decide what it is), apply a 30% discount
        to the pizza.
      PDAlg 8-12 ex dr 1_instruction: |
        The definition in this Design Recipe doesn't
        match both examples. Test each example to see which is failing, and then fix
        the definition to match.
      PDAlg 8-12 ex dr 2_instruction: |
        This student has created two examples for
        the function "apples" but something's not quite right. How would you direct
        this student to correct their mistake?
      PDAlg 8-12 Rocket Height Puzzle_instruction: |
        Let's write a "rocket-height"
        function with simple acceleration. Write a function that ensures the rocket
        is at 15 meters at 1 second, 45 meters at 2 seconds, 95 at 3 seconds, and
        165 at 4 seconds.
      PDAlg Big Game History_instruction: |
        Now that you've played through a Big
        Game level you should see a new entry in your history. Click the Version History
        button and you should see at least one version. Each time you go back to a
        Big Game level you'll get a new record in your version history that you can
        revert back to.
      PDAlg Big Game Remix_instruction: |-
        Here's your Big Game as you last left it.
        Try clicking the Remix button to spin off a new remix of your project.\r
        \r
        Any
        changes you make after you click Remix will be saved on your new remix and
        not on your main Big Game.
      PDAlg Design Recipe Delete_instruction: |
        Click the delete button to get rid
        of this function, then try creating and deleting a few of your own.
      PDAlg Design Recipe Examples_instruction: |
        The definition in this Design Recipe
        doesn't match both examples. Test each example to see which is failing, and
        then fix the definition to match.
      PDAlg Design Recipe Required_instruction: |
        Complete the Design Recipe for the
        "eggs" function, making sure to create and test your examples.
      PDAlg Updates Cond_instruction: |
        When you went to PD in the summer, the Conditional
        block that you were introduced to was black and allowed any data type to be
        used. This proved to be confusing, given that every other function we've
        seen always produces the same type of data. To help make conditionals clearer
        and more consistent we've replaced the single black block with a separate
        block for each data type.
      PDAlg Updates Errors_instruction: |
        Run the provided program and use the error
        messages to try and track down the bugs.
      PDAlg Updates Space_instruction: |
        Making use of limited programming space (especially
        on small screens) is challenging with a block based language. To help with
        this we've added a few features. Experiment with this provided code to see
        how the space can be manipulated to deal with larger programs.
      PDK5 Conditionals 1_instruction: |
        Purple flowers may have either 1 or 0 nectar,
        but you don't know which one! Be careful not to collect nectar from a purple
        flower if it doesn't have any. Check if the nectar is equal to 1 by using
        the if block.
      PDK5 Conditionals 2_instruction: "Try this puzzle that uses conditionals and\nloops
        together. Use the \"if\" block to decide when to turn. Hint: you only\nneed
        one more block to complete this puzzle. \n"
      PDK5 Events 1_instruction: "So far all of the programs we've written are executed\nin
        order from top to bottom. In this puzzle, we'll use \"Events\" to respond\nto
        an action on demand. Make the octopus say \"Hello\" only when you click\non
        the Octopus. \n"
      PDK5 Functions 1_instruction: |
        Hello. Me zombie artist. Me love drawing! Help
        me draw the square glasses.  Hint:  the bridge between the glasses is 25 pixels
        shorter than the square length.
      PDK5 Functions 2_instruction: Функції дозволяють визначити нові блоки! Ми перенесли
        блоки малювання квадрату в функцію під назвою "намалювати квадрат". Можеш
        використати функцію "намалювати квадрат", щоб створити окуляри? Квадрати розміщені
        на відстані 75 пікселів один від одного.
      PDK5 Loops 1_instruction: "Instead of using 5 \"move forward\" blocks, use\nthe
        \"repeat\" block with a \"move forward\" block inside of it. In computer\nscience,
        this is called a \"loop.\" \n"
      PDK5 Loops 3_instruction: |
        Here's another puzzle to practice loops. What happens
        if you use the repeat block to run the code already provided on the workspace
        4 times?
      Pixelation - Lesson 14 - Fix bit offset v.2_instruction: |
        Something happened
        to the bits in this image! Find the error and fix it! Hint: a few extra bits
        were added. You should only need to remove some bits.
      Pixelation - Lesson 14 - Fix bit offset_instruction: |
        A single extra bit was
        inserted into the stream of bits that make up the C of the Code.org logo.
        That extra bit bumps all of the other bits down the line which makes the logo
        look messed up. Hunt down the extra bit and remove it to fix the Code.org
        logo.
      Pixelation - Lesson 14 - Fix the error_instruction: |
        Something happened to
        the bits in this image!  Find error and fix it!  Hint: a few extra bits were
        added.  You should only need to remove some bits.
      Pixelation - Lesson 14 - Make the Letter A_instruction: |
        Make a 3x5 letter
        'A'. The widget is setup with the incorrect dimensions. Your first task
        is to set the second byte to the 8-bit binary code for 5: 0000 0101. Then
        start entering pixel data.
      Pixelation - Lesson 14 - Make your own B and W Image_instruction: |
        Now make
        your own image! We've started you off with a 10x10 canvas but you can make
        it whatever size you want. Happy pixeling!
      Pixelation - Lesson 14 - Make your own B&W Image_instruction: |
        Now make your
        own image! We've started you off with a 10x10 canvas but you can make it
        whatever size you want.  Happy pixeling!
      Pixelation - Lesson 15 - Color Free Play_instruction: |
        Requirements: The icon
        must be 16x16 pixels. You must use the Pixelation Widget to encode the bits
        of color information. The image must be encoded with at least 12 bits per
        pixel.
      Pixelation - Lesson 15 - Color Shades 4x4_instruction: |
        We start you out with
        the 4x4 image Maddie created in the video. Your task is to fill a 4x4 grid
        with colors using 12-bits per pixel. Here are the requirements: Row 1 - fill
        with shades of red. Row 2 - shades of green. Row 3 - shades of blue. Row 4
        - shades of gray.
      Pixelation - Lesson 15 - Color Shades_instruction: |
        We start you out with the
        row of shades of red that Maddie created in the video. Experiment with 6-bit
        color by filling in the bottom row of the image with shades of a different
        color. Here is an example with some shades of blue. Try your own color!
      Pixelation - Lesson 15 - Complete 3-bit color_instruction: |
        We start you with
        the 4x2 image Maddie was creating, but we've left out the last two squares.
        Finish off the image by figuring out which two colors are missing and encode
        them.
      Pixelation 2_instruction: |
        Something happened to the bits in this image!  Find
        error and fix it!
      Pixelation 4x4 Empty_instruction: |
        The width and height are now encoded in
        the pixel data. Can you figure out how to adjust the dimensions?
      Pixelation Bee_instruction: |
        This larger image of a bee encodes color with
        12 bits per pixel, but viewing in hex makes it easier to see the color of
        each pixel. If you switch to binary mode - hold on to your hat - it's a lot
        of bits. Here's another mind-blowing thing to try: slide the bits per pixel
        up to 24 bits per pixel. What happens? Can you explain this behavior?
      Pixelation Flappy_instruction: |
        Here is a bigger image at 9 bits per pixel.
        With 9 bits per pixel you can express 512 different colors. Click through
        to see the next image which is even more sophisticated, but easier to understand.
      Play Lab Rocket 1_instruction: |
        A rocket blasts off, traveling at 15 meters
        per second... press "Run" to see how this word problem looks as an animation.
      Play Lab Rocket 2_instruction: |
        We've started the Design Recipe for rocket-height
        using the contract and examples you just wrote. Complete the function definition
        for rocket-height and run your animation.
      Play Lab Rocket 2B_instruction: |
        A rocket blasts off, traveling at 15 meters
        per second. Using the Design Recipe, write a function called rocket-height
        that takes in a number of  seconds that have passed since the rocket took
        off, and produces the height of the rocket at that time.
      Play Lab Rocket 3_instruction: |
        Awesome, now can you update that function so
        that our rocket moves more quickly? Make sure to update the purpose statement,
        examples, and function definition to launch a rocket at 40 meters per second.
      Play Lab Rocket 4 (copy 1)_instruction: |
        Real rockets start off slowly and
        gain speed over time - let's make ours do the same! Write an exponential
        function that describes a rocket that travels at "seconds" squared meters
        per second.
      Play Lab Rocket 4_instruction: |
        Real rockets start off slowly and gain speed
        over time - so let's add some simple acceleration to ours! Can you write
        a function that describes a rocket that is at 10 meters at 1 second, 40 meters
        at 2 seconds, 90 meters at 3 seconds, 160 at 4 seconds and so on?
      Play Lab Rocket 5_instruction: |
        Much better, but let's write one more function
        with simple acceleration. This time the rocket should be 15 meters at 1 second,
        45 meters at 2 seconds, 95 at 3 seconds, and 165 at 4 seconds.
      Play Lab Rocket Free Play_instruction: |
        Free Play: Experiment with your rocket-height
        function to make the rocket fly in different ways. Click "Finish" when you
        are done.
      Poorva-test_instruction: |
        Here are regular instructions for a level. There
        is nothing fancy going on here.
      Quantum Bee - Ryan_instruction: "Ці хмари мене нервують! У деяких хмарках всередині
        є квіти, а деякі - порожні. Потрібно перевірити кожну хмарку, і добувати нектар
        лише з квітів."
      Quantum Bee_instruction: Фіолетові квіти можуть мати 1 або 0 нектарів, але не
        відомо скільки саме! Обережно - не збирай нектар з квітки, якщо його там немає.
        Перевір, чи нектар рівний 1 за допомогою блоку "якщо".
      Ryan - 4-5 Bee Conditionals 2_instruction: "Зараз бджолі потрібен тільки нектар.
        Не всі об'єкти є квітами, тож перевіряй під кожною хмаринкою, чи приховує
        вона квітку. Якщо так, то можна збирати нектар."
      Ryan - Bee Conditionals_instruction: "Бджола хоче збирати лише нектар. Пам'ятай,
        що не всі об'єкти є квітами, тож спершу перевіряй кожну хмаринку, щоб побачити,
        чи приховує вона квітку. Якщо так, то можна збирати нектар."
      Ryan Test Locked Blocks_instruction: Ось функції, яка називається "патрулювати."
        Зміни її так, щоб перемістити кішку на 400 пікселів вгору, а потім на 400
        пікселів вниз.
      Ryan's clone of C4S15P10_instruction: "We've added one last function for you.\n\\r\n\\r\nUse
        an \"if\" statement to program your game to call the \"level_up\"\nfunction
        only when \"player_score\" becomes greater than a certain number.\\r\n\\r\nFor\nexample:
        \"player_score\" > 6\\r\n\\r\nPlay the game, and make it past level\n4 to
        move to the next puzzle. "
      Sam the Butterfly 1 (copy 1)_instruction: |
        This butterfly is named Sam, and
        the game area is Sam’s yard. Sam's yard is 400 pixels wide by 400 pixels
        tall! As you can see, Sam is free to walk around the yard, and the coordinates
        at the top of the screen update to tell you his location. Use the arrow keys
        to move sam around his yard. Help Sam collect all of the flags to move on.
      Sam the Butterfly 1_instruction: |
        This bat is named Sam, and the game area
        is Sam’s yard. Sam's yard is 400 pixels wide by 400 pixels tall! As you can
        see, Sam is free to walk around the yard, and the coordinates at the top of
        the screen update to tell you his location. Click "Run" and then use the
        arrow keys to move Sam around his yard, making note of Sam's coordinates
        at different locations. Click "Finish" when you're ready to move on.
      Sam the Butterfly 2_instruction: |
        Sam's mom wants to make sure that she can
        always see at least a bit of him, so lets write some functions that help make
        sure he doesn't go too far out of the yard. Here's a function called safe-left?
        - it should take a Number for its domain that represents Sam's x-coordinates
        and return true if he's completely visible on screen. If your function works,
        Sam shouldn't be able to leave the yard from the left side.
      Sam the Butterfly 3_instruction: |
        In the last puzzle we kept Sam from leaving
        on the left, now let's do the same thing on the right. Complete the safe-right?
        function to make sure Sam can't go off the right side of the screen.
      Sam the Butterfly 4_instruction: |
        Huh, we can keep Sam from leaving on the
        left, or we can keep him from leaving on the right, but how can we keep him
        safe from leaving both directions? Try using the and block to program the
        function on-screen? to check if Sam is safe-left? and safe-right?
      Sam the Butterfly 5_instruction: |
        Free Play: Awesome, we've kept Sam safe
        on the left and right! Use this free play stage to experiment with your functions
        and further improve onscreen?
      Sam the Butterfly 6_instruction: |
        We've added a new parameter "y" to the
        "on-screen?" function. Update the function so that it checks that "safe-left?"
        AND "safe-right?" AND "safe-up?" are all true. When you've fixed the
        function, try going out of the yard from the left, right, and top sides.
      Sam the Butterfly 7_instruction: |
        Only one last direction to worry about! Create
        a "safe-down?" function and update the "on-screen?" function so that it
        checks up, down, left, and right.
      Sam the Butterfly Complete_instruction: |
        Only one last direction to worry about!
        Create a "safe-down?" function and update the "on-screen?" function so
        that it checks up, down, left, and right.
      scrat 16 (copy 1)_instruction: |
        Acorn! Acorn! Acorn! Use an "if" block to
        get me there with the fewest number of blocks.
      scrat 16_instruction: Жолудь! Жолудь! Мій жолудь! Скориставшись блоком "якщо"
        скеруй мене найменшою кількістю блоків.
      scrat 17 (copy 1)_instruction: |
        Ok, let's do that again for practice - this
        isn't very different, but watch out for the <insert obstacle name for Scrat>!
      scrat 17_instruction: "Гаразд, зробимо це ще раз для практики - це не дуже відрізнятиметься,
        але остерігайся стін!"
      scrat 18 (copy 1)_instruction: |
        The "If-else" blocks checks a condition,
        and then does one thing OR another. To get me to the acorn try to use this
        new block.
      scrat 18_instruction: Блок "якщо-інакше" перевіряє умову, потім виконує одну
        АБО іншу дію. Щоб направити мене до жолудя, використай цей новий блок.
      scrat 19 (copy 1)_instruction: |
        One more practice of the "if-else" block,
        can you get it right on your first try?
      scrat 19_instruction: Ще трохи практики використання блоку "якщо-або". Зможеш
        зробити усе правильно з першої спроби?
      scrat 20_instruction: "Зможеш додати ще 3 блоки, щоб допомогти мені пройти складніший
        лабіринт? Якщо все буде правильно, я зможу проходити по довільному кривому
        шляху будь-якої довжини. І поспішай - лід тане!"
      SpecialFrozenLevel_instruction: "Офіційно вітаємо головного художника! Створи
        свою зимову казку."
      Standalone_Artist_1_instruction: "Ласкаво просимо до Художника! Передусім, створимо
        простий квадрат, використовуючи блоки повороту направо та руху вперед. Кожна
        сторона повинна мати довжину 100 пікселів."
      Standalone_Artist_2_instruction: "Намалюйте ромб з кутами 120 та 60 градусів
        та сторонами по 150 пікселів."
      Standalone_Artist_3_instruction: "Зможеш намалювати цей шестикутник зі сторонами
        по 100 пікселів і поворотами по 60 градусів?"
      Standalone_Artist_4_instruction: "Тепер у нас є новий блок - цикл. Він повторює
        виконання набору команд. Що станеться, якщо розмістити ці команди в циклі
        на 6 виконань?"
      Standalone_Artist_5.5_instruction: "Зауважте, як завдяки циклу ми спростили
        код малювання ромба. Тепер можна виконати цикл 12 разів і утвориться квітка.
        Підказка: потрібно повертати на 30 градусів щоразу після малювання ромба,
        щоб не малювати повторно на тому ж місці."
      Standalone_Artist_5_instruction: "Скільки разів потрібно повторити цей ромб,
        щоб намалювати квітку?"
      Standalone_Artist_6_instruction: "Зацикли малювання шестикутника на 6 повторень.
        На скільки градусів потрібно щоразу повертати? Підказка: розділи кількість
        градусів кола на кількість повторень циклу."
      Standalone_Artist_7_instruction: 'Функція - це інструмент програмування, котрий
        дозволяє уникнути повторів. Ця функція малює квітку, тож її можна використовувати
        щоразу, коли потрібно намалювати квітку. Використай її, а також новий блок
        "перескочити вперед", щоб намалювати ці квіти. Підказка: відстань між квітами
        - 150 пікселів'
      Standalone_Artist_8_instruction: Ось функція з назвою "намалювати фігуру", яку
        ми запрограмували на малювання шестикутників. Запусти код і подивись, що відбувається,
        а тоді поекспериментуй з функцією. Можеш змінити її так, щоб малювати узори
        з квадратів, трикутників чи восьмикутників?
      Standalone_Artist_9_instruction: "А тепер можеш створити будь-яку картинку!
        Маєш порожню функцію, котра може виконати все, що забажаєш!"
      Standalone_Artist_v2_instruction: "Ласкаво просимо до Художника! Передусім,
        створимо простий квадрат, використовуючи блоки повороту направо та руху вперед.
        Кожна сторона повинна мати довжину 100 пікселів."
      template test_instruction: what up
      Test Play Lab_instruction: This is a test play lab level.
      test_sarah_instruction: hi
      Text Compression 1_instruction: |
        Look for patterns (repeated words or phrases)
        in the text. Enter the patterns you see into the dictionary on the right.
        As you type entries into the dictionary, the symbol for the entry is inserted
        into the text in place of the pattern.
      Total Artist Clone Me_instruction: |
        Freeplay: Here are the functions you've
        written, and some more for you to play with. Draw something awesome! Play
        with the pen width to see how different your drawings look!
      U1L10 NetSim numbers with decimal_instruction: |
        Invent and test a protocol
        for encoding and sending text messages. Your protocol must include the letters
        a-z, spaces, and common punctuation marks. You may add additional characters
        if you wish. See the worksheet handed out by your teacher for more detailed
        instructions!
      U1L11 NetSim numbers with Ascii_instruction: |
        Work with a partner or in a small
        team to develop a protocol that allows you to send formatted text. See the
        worksheet handed out by your teacher for more detailed instructions!
      U1L13 Text Compression_instruction: |
        Look for patterns (repeated words or phrases)
        in the text. Enter the patterns you see into the dictionary on the right.
        As you type entries into the dictionary, the symbol for the entry is inserted
        into the text in place of the pattern.
      U1L4 NetSim SendAB_instruction: "Develop, document, and test a protocol that\nallows
        you to use Internet Simulator to relay a message. See the worksheet\nfor more
        detailed instructions.  \n"
      U1L8 NetSim numbers no decimal_instruction: Default instructions
      U1L8 NetSim numbers with decimal_instruction: |
        With your partner, develop a
        protocol or set of rules for communicating a drawing using only bits. See
        the worksheet handed out by your teacher for more detailed instructions!
      U2 frequency caesar_instruction: "Інструкції"
      U2 frequency random sub_instruction: "Інструкції"
      U2 vigenere cipher_instruction: "Інструкції"
      U2 Vigenere_instruction: Test
      U2L04 - NetSim Routers with Addresses_instruction: |
        Send messages with your
        classmates (Click to see full instructions)
      U2L05 - NetSim - Packets and Building TCP_instruction: |-
        Develop a Protocol
        for Reliably Sending a Message.\r
        \r
        Constraints:\r
        - Packets may contain
        only 6 characters\r
        - Packets may drop with small probability\r
        - Packets
        may not arrive in order
      U2L10 NetSim Automatic DNS_instruction: |
        In this version of the Internet Simulator,
        a Domain Name System (DNS) is provided for you and knows the IP addresses
        of all connected computers. Send a message in the form GET [hostname] to the
        DNS service at address <yourRouterNumber>.15 to get a student's address.
      U2L10 NetSim Manual DNS_instruction: |
        In this version of the simulator you
        can't see the other students' addresses.  Instead, one of you must act as
        a name service, to help share addresses with each other.
      U2L14 frequency random_instruction: Test
      U2L2 NetSim Hub Mode_instruction: |
        Now use the Internet Simulator to send the
        battleship moves. For setup, join a Room with your group, and add ships to
        your paper board for each opponent. When playing, all communication must be
        done through the tool, so no talking, but have fun!\r
      U2L3 NetSim Hub Mode_instruction: |
        Use the Internet Simulator to test out your
        group's binary communication protocol for battleship. How short can you make
        the message and response?
      U2L4 NetSim Routers Addresses_instruction: |-
        For this activity, connect to a
        router with the others in your group. Important note: The router will only
        properly route messages where the first 4 bits are the To: address and the
        second 4 bits are the From: address.\r
        \r
        [TODO: NetSim needs to support
        hierarchical addresses. For now, level is set up for 4 bit to and from addresses]
      U2L5 NetSim Classroom Internet_instruction: |
        For this activity, connect to
        a router with the others in your group. The Internet Simulator now provides
        a place for you to put the To and From addresses, so you don't have to type
        out the bits manually.\r
        \r
      U2L7 NetSim Need for Packets_instruction: |
        Transfer your favicon to a partner
        across a network in which the larger a packet grows, the more likely it is
        to be dropped.
      U3 - Arrays - appendItem_instruction: |
        Create an array of odd numbers 1-11
        by using appendItem. (Click to see full instructions)
      U3 - Arrays - assignment_instruction: |
        Use indexes to change the values in
        this array from 1 to 0. (Click to see full instructions)
      U3 - Arrays - assignment2_instruction: |
        Calculate the sum of three values stored
        in an array. (Click to see full instructions)
      U3 - Arrays - assignment3_instruction: |
        Increase the value of each value in
        the randomly generated array by 1. (Click to see full instructions)
      U3 - Arrays - createFirstArray_instruction: |
        Create an array of the even numbers
        from 0 to 10 and display its contents with console.log. (Click to see full
        instructions)
      U3 - Arrays - Demo App_instruction: |
        Use the "My Favorite Things" app. How
        might this app be making use of an array? (Click to see full instructions)
      U3 - Arrays - expressionsAsIndexes_instruction: |
        Write a program that displays
        a randomly chosen color from the array. (Click to see full instructions)
      U3 - Arrays - favThings addItem_instruction: |
        Write code that allows a user
        to add their own favorite things to the list. (Click to see full instructions)
      U3 - Arrays - favThings bounds_instruction: |
        Add if statements to your event
        handlers that prevent the global index from going out of bounds. (Click to
        see full instructions)
      U3 - Arrays - favThings Counting Variable_instruction: |
        Create a global variable
        for the current index and use it to display the first item in the array. (Click
        to see full instructions)
      U3 - Arrays - favThings createArray_instruction: |
        Create an array of words
        describing your favorite things. (Click to see full instructions)
      U3 - Arrays - favThings firstOutput_instruction: |
        Use setText to display the
        first item in the array. (Click to see full instructions)
      U3 - Arrays - favThings giveIDs_instruction: |
        Give your UI elements descriptive
        and meaningful IDs. (Click to see full instructions)
      U3 - Arrays - favThings keepPlaying_instruction: |
        Make any other improvements
        you want! (Click to see full instructions)
      U3 - Arrays - favThings Next_instruction: |
        Write code that allows the user
        to move forward through your list by clicking the "Next" button. (Click
        to see full instructions)
      U3 - Arrays - favThings Prev_instruction: |
        Write code that allows the user
        to move backward through your list by clicking the "Last" button. (Click
        to see full instructions)
      U3 - Arrays - favThings template_instruction: |
        Give your UI elements descriptive
        and meaningful IDs. (Click to see full instructions)
      U3 - Arrays - globalVariableIndex_instruction: |
        Give your UI elements descriptive
        and meaningful IDs. (Click to see full instructions)
      U3 - Arrays - indexPractice_instruction: |
        Write the contents of the array to
        the screen in numerical order. (Click to see full instructions)
      U3 - Arrays - insertingItems_instruction: |
        Insert items into an array to form
        a complete sentence. (Click to see full instructions)
      U3 - Arrays - insertionErrors_instruction: |
        Run each command that references
        indexes that are out of bounds and observe the results. (Click to see full
        instructions)
      U3 - Arrays - introIndex_instruction: |
        Display the first and last element in
        the array. Display the number 5 from the array. (Click to see full instructions)
      U3 - Arrays - length_instruction: |
        Use list.length to determine the length
        of each array. (Click to see full instructions)
      U3 - Arrays - lengthMinus1_instruction: |
        Use list.length - 1 to log the last
        item in the array to the console. (Click to see full instructions)
      U3 - Arrays - remove_instruction: |
        Remove items from an array to form a complete
        sentence. (Click to see full instructions)
      U3 - Arrays - stringsInArrays_instruction: |
        Write a sentence word by word by
        adding strings to an array. (Click to see full instructions)
      U3 - Canvas - 200dots_instruction: |
        Add a loop to your program that draws 200
        dots on your canvas. (Click to see full instructions)
      U3 - Canvas - appendToArray_instruction: |
        Create an array to store each event
        parameter. Append each event parameter to this array within your event handler.
        (Click to see full instructions)
      U3 - Canvas - changeToMouseMove_instruction: |
        Change your program so that dots
        are drawn at the location of the mouse as the user moves the mouse on the
        canvas. (Click to see full instructions)
      U3 - Canvas - clickToAdd_instruction: |
        Change your program so that dots are
        added to the canvas when the user clicks on it. (Click to see full instructions)
      U3 - Canvas - delete_instruction: |
        Create a button that deletes the drawing
        by clearing the canvas and removing all stored values. (Click to see full
        instructions)
      U3 - Canvas - draw at click point_instruction: |
        Change your program so that
        dots are drawn at the location of the mouse click. (Click to see full instructions)
      U3 - Canvas - freePlay_instruction: |
        Extend the functionality of one of the
        effects, or create an entirely new one of your own. (Click to see full instructions)
      U3 - Canvas - introCanvas_instruction: |
        Add a canvas to your app and set it
        to be the active canvas. Then add a large dot to your canvas. (Click to see
        full instructions)
      U3 - Canvas - movementFunction fix Orig_instruction: |
        Modify the "Original"
        button event handler so that it takes the movement of the mouse into account.
        (Click to see full instructions)
      U3 - Canvas - movementFunction_instruction: |
        Write a function that takes the
        movement of the mouse as input and generates a line width as output. (Click
        to see full instructions)
      U3 - Canvas - One Dot sprayPaint_instruction: |
        Write code that redraws your
        image using a dot whose x and y locations use offsetX and offsetY with a small
        random value added. (Click to see full instructions)
      U3 - Canvas - redrawOriginal_instruction: |
        Write a function that processes
        your array, redrawing the dots as they originally appeared. (Click to see
        full instructions)
      U3 - Canvas - redrawRandom_instruction: |
        Set up a button and event handler
        for the random function. (Click to see full instructions)
      U3 - Canvas - redrawRandom2_instruction: |
        Write a function that processes your
        array, redrawing every dot with a random size. (Click to see full instructions)
      U3 - Canvas - shiftKey_instruction: |
        Add an if statement to your event handler
        so dots are only drawn when the shift key is pressed. (Click to see full instructions)
      U3 - Canvas - sketch_instruction: |
        Write code that redraws your image using
        a sketch effect. (Click to see full instructions)
      U3 - Canvas - sprayPaint_instruction: |
        Update the spray paint code so that
        it redraws your image using multiple random dots instead of using a nested
        for loop. (Click to see full instructions)
      U3 - Canvas - transparentDots_instruction: |
        Change the colors of your dots
        so they have a fully transparent stroke and partially transparent fill. (Click
        to see full instructions)
      U3 - Canvas - usingOffsetXY_instruction: |
        Add a console.log command inside
        the function of your event handler. Use it to display the event parameter.
        Click on the screen to see the contents of the event parameter (Click to see
        full instructions)
      U3 - Conditional Basics - 6_instruction: |
        Add a setText after the if statement
        to "Nope. Guess again." (Click to see full instructions)
      U3 - Conditionals - Combine AND and OR_instruction: |
        Write an if statement
        that uses AND and OR to display "Time to go to school!" if it's not the
        weekend and the user is under 18. (Click to see full instrucitons.
      U3 - Conditionals - Combine AND OR and NOT_instruction: |
        Write an if statement
        that uses AND and OR to display "Time to go to school!" if it's not the
        weekend and the user is under 18. (Click to see full instructions.)
      U3 - Conditionals - Combine AND OR Simple_instruction: |
        Write an if statement
        that uses AND and OR to display "Sleep in!" if it's the weekend and the
        user is a teenager. (Click to see full instructions.
      U3 - Conditionals - intoOr_instruction: |
        Add 2 if statements that use the OR
        operator. (Click to see full instructions)
      U3 - Conditionals - introAND_instruction: |
        Add 2 if statements that use the
        OR operator. (Click to see full instructions)
      U3 - Conditionals - Simple AND_instruction: |
        Write an if statement that uses
        AND to display "You are a teenager." if the user enters an age between 13
        and 19. (Click to see full instructions)
      U3 - Conditionals - Simple OR_instruction: |
        Write an if statement that uses
        OR to display "It's the weekend!" if the user enters a weekend day at the
        prompt. (Click to see full instructions)
      U3 - Design Mode - Console Log_instruction: |
        Update the ID names and `console.log`
        messages to match the correct button. (Click to see full instructions.)
      U3 - Design Mode - Layers and Delete_instruction: |
        Fix the layout of the bullseye
        game. (Click to see full instructions)
      U3 - Design Mode - Multi Screens 2_instruction: |
        Make a 2 screen app which
        can switch back and forth between a black screen and a white screen using
        buttons. (Click to see detailed instructions.)
      U3 - Design Mode - Multi Screens_instruction: |
        Make a 2 screen app with a black
        screen and a white screen. (Click to see detailed instructions)
      U3 - Design Mode - Other Events_instruction: |
        Delete the button and make the
        image move to a random location when you click on it. (click to see detailed
        instructions)
      U3 - Design Mode - WTF Console Log_instruction: |
        Add a 3 console.log messages
        and test them out. (Click to see full instructions.)
      U3 - Design Mode -Recreate Beyond Buttons_instruction: |
        Recreate the game from
        the "Chaser Game" with a Welcome Screen and Game Over Screen. (Click to
        see full instructions.)
      U3 - Design Mode 1_instruction: |
        Add a large red button to your screen using
        Design Mode. (Click for full instructions.)
      U3 - Dice - Dropdown and Score_instruction: |
        Add guess and score to the Dice
        Game (Click to see full instructions)
      U3 - Dice - Dropdown with Strings_instruction: |
        Add a dropdown for difficulty
        level that prints the difficulty level in the console. (Click to see full
        instructions)
      U3 - Dice - If_instruction: |
        Show different die images for the random number
        generated. (Click to see full instructions)
      U3 - Dice - Nested_instruction: |
        Use nested if statements to make the scoring
        different for the different game levels. (Click to see full instructions)
      U3 - High Low - Debug_instruction: |
        Debug the order of the conditionals so
        that it will actually tell the user when their guess is close. (Click to see
        full instructions)
      U3 - High Low - Dropdown_instruction: |
        Add a dropdown for their guess instead
        of promptNum (Click to see full instructions)
      U3 - High Low - Else if_instruction: |
        Add an else-if statement in order to
        tell the user if their guess is high or low instead of just wrong. (Click
        to see full instructions)
      U3 - High Low - Else_instruction: |
        Add an else statement so that the program
        will tell the user when they are right and when they are wrong. (Click to
        see full instructions)\r
      U3 - High Low - If_instruction: |
        Add code to the if statement that indicates
        the user guessed the secret number. (Click to see full instructions)
      U3 - Keys - Add Image URLs_instruction: |
        Add image URLs to your array. Replace
        the text area with an image and setText with setImageURL. Then test your app!
        (Click to see full instructions)
      U3 - Keys - Buttons and Keys_instruction: |
        Have the program respond the same
        way for both clicking images on the screen and hitting the up and down keys
        on the keyboard. (Click to see full instructions)
      U3 - Keys - Demo App_instruction: |
        Play with the image scroller. Press the
        left and right arrows to progress through the images.
      U3 - Keys - Final Image Scroller_instruction: |
        Update the image scroller to
        respond to buttons and key presses. (Click to see full instructions)
      U3 - Keys - Functions_instruction: |
        Write doUpArrow and doDownArrow functions
        and call the functions instead of duplicating the code. (Click to see full
        instructions)
      U3 - Keys - Key Up and Down_instruction: |
        Try out the keyup and keydown events
        to see how they are different from keypress. (Click to see full instructions)
      U3 - Keys - Multiple Keys_instruction: |
        Play a different sound when the down
        arrow is pressed. (Click to see full instructions)
      U3 - Keys - Practice Adding Images with URL_instruction: |
        Add image URLs to
        your image array. Test out the add button. Style your image scroller. (Click
        to see full instructions)
      U3 - Keys - Words to Images_instruction: |
        Add image URLs to your image array.
        Test out the add button. Style your image scroller. (Click to see full instructions)
      U3 - Loops -  9 Part 2_instruction: |
        Change the boolean expression for the
        while loop so that it will roll until both dice are greater than 3. (Click
        to see full instructions)
      U3 - Loops -  Complex Condition_instruction: |
        Change the boolean expression
        for the while loop so that it will stop when both dice are greater than or
        equal to 5. (Click to see full instructions)
      U3 - Loops - 1_instruction: |
        Change the condition for the while loop to check
        if the variable num is less than 90. (Click to see full instructions)
      U3 - Loops - 10_instruction: |
        Write a program that simulates the rolling of
        two dice. Roll the dice repeatedly until the sum of the dice is either 7 or
        11.
      U3 - Loops - 11_instruction: |
        Fix the condition so that it keeps rolling the
        die as long as the value is not a 2 or a 3 instead of rolling infinitely.
        (Click to see full instructions)
      U3 - Loops - 12_instruction: |
        Change the code so that it prints the string
        "Hi" 5 times. (Click to see full instructions)
      U3 - Loops - 13_instruction: |
        Update the code to count up by 3 instead of 1.
        (Click to see full instructions)
      U3 - Loops - 14_instruction: |
        Change the loop condition to prevent the infinite
        loop and stop counting once the count is past 30. (Click to see full instructions)
      U3 - Loops - 15_instruction: |
        Count the number of times the sum of the dice
        is 12. (Click to see full instructions)
      U3 - Loops - 16_instruction: |
        Find out how many times you have to roll to get
        the sum of 7 100 times (Click to see full instructions)
      U3 - Loops - 2_instruction: |
        Try creating an infinite loop using !=, > and
        <. (Click to see full instructions)
      U3 - Loops - 3_instruction: |
        Change the if statement to a while loop so the
        program will run until it rolls a 6. (Click to see full instructions)
      U3 - Loops - 4_instruction: |2
         Use the Debug Commands to make a list of all
        the values rolled before a 6. (Click to see full instructions)
      U3 - Loops - 5_instruction: |
        Add code inside the while loop which will update
        the variable num so that the condition will eventually become false. (Click
        to see full instructions)
      U3 - Loops - 6_instruction: |
        Fix the problem so the loop will run at least
        once. Change the initial value of num to a dummy value such as -1. (Click
        to see full instructions)
      U3 - Loops - 7_instruction: |
        Without adding any lines of code, reorder the
        code so that it prints all the values of num. (Click to see full instructions)
      U3 - Loops - 8_instruction: |
        Debug which number is not getting printed and
        add a write statement to display that value. (Click to see full instructions)
      U3 - Loops - 9_instruction: |2
         Modify the condition so that it keeps rolling
        as long as both are less than 3. (Click to see full instructions)
      U3 - Loops - Continue_instruction: |2
         Use the Debug Commands to to make a list
        of all the values rolled before a 6. (Click to see full instructions)
      U3 - Loops - minus = operator_instruction: |
        Update the code to use the -= operator
        to count from 30 down to 0 by 3's. (Click to see full instructions)
      U3 - Loops - Minus Minus_instruction: |
        Change the code to count down from 10
        to 1. (Click to see full instructions)
      U3 - Loops - plus and minus = operator_instruction: |
        Update the code to use
        the += operator. (Click to see full instructions)
      U3 - Loops - Plus Plus_instruction: |
        Change the code to use count++ instead
        of count = count + 1.  (Click to see full instructions)
      U3 - Loops - Typing in Console_instruction: |
        Use console to check the ending
        value of num. (Click to see full instructions)
      U3 - Loops And Arrays - Add 5_instruction: |
        Add 5 to all the values in an array
        (Click to see full instructions)
      U3 - Loops And Arrays - Challenge 1_instruction: |
        Write a function that finds
        and returns the minimum value in an array.   (Click to see full instructions)
      U3 - Loops And Arrays - Challenge 2_instruction: |
        Write a function that finds
        and returns the minimum value in an array.   (Click to see full instructions)
      U3 - Loops And Arrays - Counting Times_instruction: |
        Count the number of times
        5 appears in an array. (Click to see full instructions)
      U3 - Loops And Arrays - Divid by 2_instruction: |
        Divide every value in the
        array by 2. (Click to see full instructions)
      U3 - Loops And Arrays - Find Max_instruction: |
        Design a function that displays
        the smallest number in an array  (Click to see full instructions)
      U3 - Loops And Arrays - Find Min_instruction: |
        Complete the findMinVal function
        to find and display the smallest value in an array  (Click to see full instructions)
      U3 - Loops And Arrays - Functions that Return Value_instruction: |
        Call findMin
        within the console.log statement to calculate the minimum of two values.  (Click
        to see full instructions)
      U3 - Loops And Arrays - General Search Param_instruction: |
        Add a second parameter
        to the search function for the value to search for.  (Click to see full instructions)
      U3 - Loops And Arrays - Intro For Loop_instruction: |
        Add a for loop with a
        console.log inside and test out the 3 pieces of the for loop. (Click to see
        full instructions)
      U3 - Loops And Arrays - Linear Search_instruction: |
        Visit every element in
        the array and display "true" if the value is a 5, and "false" otherwise.
        (Click to see full instructions)
      U3 - Loops And Arrays - Loop Array If_instruction: |
        Use an if statement to
        only display the values in the array that are greater than 5. (Click to see
        full instructions)
      U3 - Loops And Arrays - Make it a Function - add list parameter_instruction: |
        Create
        a function that takes a list parameter and prints if the list contains a 5.
        (Click to see full instructions)
      U3 - Loops And Arrays - Make it a Function_instruction: |
        Move the code that
        searches the list for a 5 into a function called "search". (Click to see
        full instructions)
      U3 - Loops And Arrays - Multiple Returns_instruction: |
        Test out the return
        values of the findMax function.  (Click to see full instructions)
      U3 - Loops And Arrays - Print Array_instruction: |
        Use a for loop to print out
        all the values in an array. (Click to see full instructions)
      U3 - Loops And Arrays - Printing Single True_instruction: |
        Process the array
        and display a single "true" if the array contains a 5 or a single "false"
        if it does not.  (Click to see full instructions)
      U3 - Loops And Arrays - Return Index_instruction: |
        Make the search function
        return the index of the search value in the array. (Click to see full instructions)
      U3 - Loops And Arrays - Return Value_instruction: |
        Use constrain in this simple
        app to keep the turtle from driving off the screen.  (Click to see full instructions)
      U3 - Loops And Arrays - Search and Remove_instruction: |
        Search for 5 in the
        array and remove it from the array. (Click to see full instructions)
      U3 - Loops And Arrays - Search with Boolean Var_instruction: |
        Make a boolean
        variable to use as a flag to keep track of whether there is a 5 in the array.
        (Click to see full instructions)
      U3 - Loops And Arrays - useFindMin_instruction: |
        Call findMin within the console.log
        statement to calculate the minimum of two values.  (Click to see full instructions)
      U3 - Movie Bot - Multiple If Sequences_instruction: |
        Add another set of if,
        else if, and else statements inside the question if statement to check for
        keywords for movie ratings (G, PG, PG-13, and R). (Click to see full instructions)
      U3 - Movie Bot - Nested Motivation_instruction: |
        Add a separate set of if statements
        to check for a "?" in the input. (Click to see full instructions)
      U3 - Movie Bot - toLowerCase_instruction: |
        Use the toLowerCase command to change
        all user input into lowercase letters after they enter it. (Click to see full
        instructions)
      U3 - Movie Bot - When Multiple If Statements_instruction: |
        Add an if and else-if
        statement that checks for please and thank you. (Click to see full instructions)
      U3 - Practice Create Performance Task_instruction: |
        Design and implement your
        practice Create Performance Task. (Click to see full instructions)
      U3 - Read Record - 1.2_instruction: |
        Console.log the records returned by a
        call to readRecords. (Click to see full instructions)\r
      U3 - Read Record - 1.5_instruction: |
        Console.log the records returned by a
        call to readRecords. (Click to see full instructions)\r
      U3 - Read Record - 1.6_instruction: |
        Console.log the records returned by a
        call to readRecords. (Click to see full instructions)\r
      U3 - Read Record - 1_instruction: |
        Console.log the records returned by a call
        to readRecords. (Click to see full instructions)\r
      U3 - Read Record - 2_instruction: |
        Change the table name so that the records
        are read from the new table.(Click to see full instructions)\r
      U3 - Read Record - 3_instruction: |
        Change the name of the table in a readRecords
        command to read from a table that does not exist. (Click to see full instructions)\r
      U3 - Read Record - 4.1_instruction: |
        Print out each record return from the
        readRecords call individually. (Click to see full instructions)\r
      U3 - Read Record - 4_instruction: |
        Print out each record return from the readRecords
        call individually. (Click to see full instructions)\r
      U3 - Read Record - 5 and half_instruction: |
        Print out the name of each movie
        in the records return from the readRecords call. (Click to see full instructions)\r
      U3 - Read Record - 5_instruction: |
        Print out the name of each movie in the
        records return from the readRecords call. (Click to see full instructions)\r
      U3 - Return Values - constrainTurtle_instruction: |
        Use constrain in this simple
        app to keep the turtle from driving off the screen.  (Click to see full instructions)
      U3 - Return Values - debuggingConstrain_instruction: |
        Correct the error in
        constrain so that it returns the appropriate value.  (Click to see full instructions)
      U3 - Return Values - debuggingMaxVal_instruction: |
        Correct the error in maxVal
        so that it correctly reports the maximum value.  (Click to see full instructions)
      U3 - Return Values - debuggingReturns_instruction: |
        Correct the error in maxVal
        so that it correctly reports the maximum value.  (Click to see full instructions)
      U3 - Return Values - increase1_instruction: |
        Call the increase function within
        moveForward, write, and console.log.  (Click to see full instructions)
      U3 - Return Values - increase2_instruction: |
        Change the increase function to
        return 3 times the input value. (Click to see full instructions)
      U3 - Return Values - min1_instruction: |
        Test out the return values of the findMax
        function.  (Click to see full instructions)
      U3 - Return Values - useFindMin_instruction: |
        Call findMin within the console.log
        statement to calculate the minimum of two values.  (Click to see full instructions)
      U3 - Return Values - useMinVal_instruction: |
        Call minVal within the console.log
        statement to calculate the minimum of two values.  (Click to see full instructions)
      U3 - Return Values - wrapTurtle_instruction: |
        Write wrap in this simple app
        to let the turtle "wrap" to the other side of the screen when it goes off.  (Click
        to see full instructions)
      U3 - Return Values - writeMaxVal_instruction: |
        Write the function maxVal and
        then use it within the console.log statement to calculate the maximum of two
        values.  (Click to see full instructions)
      U3 - Search Terms - 1_instruction: |
        Create an array of all the movies made
        in 2008 and print it out. (Click to see full instructions)\r
      U3 - Search Terms - 2_instruction: |
        Print out all the movies with year 2008
        using the readRecords search terms. (Click to see full instructions)\r
      U3 - Search Terms - 3_instruction: |
        Print whether or not there are movies matching
        the search criteria (Click to see full instructions)\r
      U3 - Search Terms - 4_instruction: |
        Print whether or not there are movies matching
        the search criteria (Click to see full instructions)\r
      U3 - Search Terms - 5_instruction: |
        Print out the cities that are in California
        or have a population of 2,000,000. (Click to see full instructions)\r
      U3 - Search Terms - 6_instruction: |
        Print out the cities that are in California
        or have a population of 2,000,000. (Click to see full instructions)\r
      U3 - Simulation - 1_instruction: |
        Use a while loop to "flip a coin 10 times"
        and write the values to the screen. (Click to see full instructions)
      U3 - Simulation - 2.1_instruction: |
        Change your looping condition so the simulation
        runs until there are 5 heads flipped. (Click to see full instructions)
      U3 - Simulation - 2.5_instruction: |
        Run your simulation to get the full 10,000
        heads! How long did it take? (Click to see full instructions)
      U3 - Simulation - 2_instruction: |
        Keep track of how many heads (1's) your
        program generates and print the results to the screen. (Click to see full
        instructions)
      U3 - Simulation - 3_instruction: |
        Add functionality that counts how many heads
        in a row are flipped. (Click to see full instructions)\r
      U3 - Simulation - 4_instruction: |
        Update your while loop's condition so the
        the coin flips until there are three heads in a row. (Click to see full instructions)
      U3 - Simulation - 5_instruction: |
        Change your while loop to run until you get
        a streak of 12 heads. How many flips did it take? (Click to see full instructions)
      U3 - Simulation - 6_instruction: |
        Keep adding to your simulation. What do you
        want to explore next? (Click to see full instructions)
      U3 - Simulation - App_instruction: |
        Change your code to run the full simulation
        with 10,000 coins. What was your longest streak of heads? (Click to see full
        instructions)
      U3 - Simulation - Template_instruction: |
        Use a while loop to "flip 10 coins"
        and write them to the screen. (Click to see full instructions)
      U3 - User Input - Save getText To Variable_instruction: |
        Save the age and name
        of the user in variables (Click to see full instructions)
      U3 - User Input - Saving After Input_instruction: |
        Save the age of the user
        in a variable using getText() (Click to see full instructions)
      U3 - User Input and String -  Concat_instruction: |
        Output a message about age
        in a Text Area (Click to see full instructions)
      U3 - Variables - Clicker Game_instruction: |
        Create your improved Chaser-Game
        here. (Click to see full instructions)
      U3 - Variables - Debug Scope_instruction: |
        Why isn't the value of foo changing
        correctly? Make a guess. (Click to see full instructions)
      U3 - Variables - Debugging with Turtle_instruction: |
        Use your new debugging
        techniques to get the code to run correctly (Click to see full instructions)
      U3 - Variables - Decrement_instruction: |
        Decrement the value of the variable.
        (Click to see full instructions)
      U3 - Variables - Identify Variables_instruction: |
        Identify the values printing
        in the terminal with console.log statements. (Click to see full instructions)
      U3 - Variables - Increment_instruction: |
        Use the console.log debugging technique
        to see what is happening in this example. Add another variable and increment
        its value. (Click to see full instructions)
      U3 - Variables - Incrementing Variables_instruction: |
        Create a repeat loop
        for the repeated code and use increment to recreate the original program with
        less lines of code! (Click to see full instructions)
      U3 - Variables - Read Using Turtle_instruction: |
        Create a second set of variables
        for x and y position. Move turtle to that new location. (Click to see full
        instructions)
      U3 - Variables - Reassigning Variables with Console.log_instruction: |
        Add another
        reassignment statement at the end of the code to change the value of the variable
        at second time. (Click to see full instructions)
      U3 - Variables - Set to Expression with Other Variables and Turtle_instruction: |
        (click
        to see full instructions)
      U3 - Variables - Set to Expression with Other Variables_instruction: |
        Write
        an expression that calculates the player's total score and stores it in the
        totalScore variable. The calculation is: the player's points times lives
        divided by the total time. (click to see full instructions)
      U3 - Variables - Set to Expression with Turtle_instruction: |
        (click to see
        full)
      U3 - Variables - Set to Expression_instruction: |
        Test out the new expressions.
        (Click to see full instructions)
      U3 Digital Assistant Design_instruction: |
        Pick a topic for your Digital Assistant
        and create the basic layout with a text input and text area. (Click to show
        full instructions)
      U3 Digital Assistant Set Text_instruction: |
        Have your digital assistant repeat
        back what the user types and include a canned response. (Click to see full
        instructions)
      U3 Digital Assistant Target - Mehal_instruction: |
        Try out a demo of the Digital
        Assistant!
      U3 Digital Assistant Target_instruction: Try out a demo of the Digital Assistant!
      U3 Digital Assistant Template_instruction: This is a project template!
      U3 Digital_instruction: |
        Choose a specialization topic for your digital assistant.
        Create a basic digital assistant that takes the user's input and displays
        back a default response.
      U3 full clicker demo_instruction: Clicker game - Try it out!
      U3 mehal's clone_instruction: Try out a demo of the Digital Assistant!
      U3- Variables - Assign Random For Turtle Draw_instruction: |
        Try writing the
        same code in text mode.
      U3- Variables - Changing the Value_instruction: |
        Update the value of 'turnAmount'
        before each moveForward so the turtle turns a different amount each time.
        (Click to see full instructions)
      U3- Variables - Create And Assign_instruction: |
        On one line add a variable
        called "lives" and assign it the value 3. Print it to the console. (Click
        to see full instructions)
      U3- Variables - Text Mode_instruction: |
        1. Switch to text mode and type instructions;
        2. drag blocks out into text mode; 3. experiment with code completion
      U3-Design Mode-ID and Event Handler_instruction: |
        Add an event handler for
        the button using the "Insert and show" link in the Design Mode Events tab.
        (Click to see full instructions).
      U3-Design Mode-ID_instruction: |
        Using the Design Mode Events change the button
        ID and update the code to match. (Click to see detail instructions).
      U3-Design Mode-Image_instruction: |
        Recreate the "Chaser Game" from the last
        lesson using Design Mode. (Click to see full instructions.)
      U313 drag Two Buttons_instruction: |
        Run a program with two buttons that have
        the same id to see the warning message in the console. Change the ids to make
        the program run without getting a warning message.
      U313 eventsDetails_instruction: |
        Run a program with two buttons that have the
        same id to see the warning message in the console. Change the ids to make
        the program run without getting a warning message.
      U313 Two Buttons with Ids_instruction: |
        Predict what will happen. Once you've
        made a prediction, run the code to see what happens. (Click to see full instructions)
      U3L03 - draw rect function_instruction: |-
        Write a function called drawRectangle().\r
        (Click
        to see full instructions)
      U3L03 - draw step_instruction: |
        Write the drawStep function. (Click to see
        full instructions)
      U3L03 choose your own drawing_instruction: |
        Now choose your own!  Pick one
        of the three drawings shown here and attempt to create it on your own, making
        smart decisions about how to break the problem down into re-usable functions.  You
        will review your work with a peer using "procedures peer review rubric."  Check
        it for the requirements.  GIF: U3L3-ProceduresChooseOne.png
      U3L03 Creating Procedures 1_instruction: |
        Write the turnAround() function and
        use it to make the turtle move as depicted. see: U3L03-turnAndDown.gif
      U3L03 Define and use turnAround_instruction: |
        Define a function called turnAround.
        Call the function and then move the turtle forward. (Click to see full instructions)
      U3L03 define turnRight and draw a rectangle_instruction: |
        Define a function
        called right() that turns the turtle to the right. Then use this function
        to draw a rectangle, as shown below. (Click to see full instructions)
      U3L03 Draw a T using turnAround_instruction: |
        Draw a plus sign using the provided
        version of turnAround().  (Click to see full instructions)
      U3L03 draw diamond_instruction: |
        Create a function called drawDiamond() that
        makes use of your previous work to draw the complete diamond. (Click to see
        full instructions)
      U3L03 Three Steps_instruction: |
        Define a function called drawSide() which draws
        three steps and moves the turtle to prepare for the next side (Click to see
        full instructions)
      U3L04 - 3 by 3 with functions_instruction: |
        Make the 3x3 square as efficiently
        as you can. (Click to see full instructions)
      U3L04 - snowflake_instruction: |
        Create the design by breaking it down into
        layers of functions. (Click to see full instructions)
      U3L04 choose your own drawing_instruction: |
        Now choose your own!  Pick one
        of the three drawings shown here and attempt to create it on your own, making
        smart decisions about how to break the problem down into re-usable functions.  You
        will review your work with a peer using "procedures peer review rubric."  Check
        it for the requirements.
      U3L04 diamond solution_instruction: |
        Study this solution to the drawDiamond
        problem.  Notice that the whole program starts by calling drawDiamond() at
        the top.  The program then follows a chain of function calls.  You can trace
        what's happening in the code to see the functions reused.  It's also easy
        to read because the function names describe the expected behavior.
      U3L05_3x3GridEfficiencyChallenge_instruction: |
        Let's revisit the 3x3 grid
        problem you did a few lessons ago.  This time the challenge is to program
        the solution "as efficiently as possible."  Now that you know how to write
        functions, it should be easier to break the problem down, and your code should
        be easier to read and debug.  See the rubric for more details about requirements
        and expectations.
      U3L05_draw3x3GridEfficiently_instruction: |
        Draw a 3x3 grid above and to the
        right of the turtle. Try to do so with the fewest number of commands possible.
        NOTE: This is a very challenging problem.  You may need to play with it for
        a while and tweak it.  You might also consider using pencil and paper to sketch
        your ideas.
      U3L06 - moveForwardwithParams_instruction: |
        Use a single command to move the
        turtle to the edge of the screen. (Click to see full instructions)
      U3L06 Challenge 1 triangle_instruction: |
        Use the parameterized versions of
        the turtle commands to create a triangle with sides 100 pixels long. (Click
        to see full instructions)
      U3L06 Challenge 2 purple square_instruction: |
        Read the documentation for penColor()
        and penWidth() before using them to draw the blue square.
      U3L06 Challenge 3 fill pink_instruction: |
        Fill in the background of the screen
        with your favorite color. (Click to see full instructions)
      U3L06 Challenge 4 bullseye_instruction: |
        Create the bullseye using hexadecimal
        colors and dot(). (Click to see full instructions)
      U3L06 Challenge 5 overlapping circles_instruction: |
        This image is created just
        using dot() and penColor() but, how are we going to get those circles to be
        transparent?  If you haven't gotten the hint yet: check out the documentation!
      U3L06 Challenge 6 squiggles_instruction: "Read the documentation for the \"arcLeft\"\nand
        \"arcRight\" commands and then draw the squiggles as shown. \n"
      U3L06 Challenge 7 smiley face_instruction: |
        Use turnTo() and moveTo() to help
        draw a smiley face. (Click to see full instructions)
      U3L06 Challenge 8 make your own_instruction: |
        Create a drawing of your own.
        (Click to see full instructions)
      U3L07 - allSeaGrass_instruction: |
        Add 50 pieces of seagrass to the image by
        writing drawAllSeagrass with a loop. (Click to see full instructions)
      U3L07 - bubbles_instruction: |
        Add 200 bubbles to the image by writing drawAllBubbles
        with a loop. (Click to see full instructions)
      U3L07 - callingFunctionsInLoops_instruction: |
        Call the function within the
        loop to complete the figure. (Click to see full instructions)
      U3L07 - createTriangleParam_instruction: |
        Define a function that accepts a
        parameter to match the function calls and complete the image. (Click to see
        full instructions)
      U3L07 - fish_instruction: |
        Add 15 fish to the image by writing drawAllFish
        with a loop. (Click to see full instructions)
      U3L07 - Free Play Loops and Random_instruction: |
        Free Play! Use what you learned
        from loops and random to make your own little scene. Have fun.
      U3L07 - introSquare_instruction: |
        Use a loop to draw a square. (Click to see
        full instructions)
      U3L07 - loopsWithRandom_instruction: |
        Increase the number of iterations to
        fill the screen with white. (Click to see full instructions)
      U3L07 - randomDots1_instruction: |
        Increase the number of iterations to fully
        fill the screen with random dots. (Click to see full instructions)
      U3L07 - randomSquare_instruction: |
        Draw the figure using a loop. (Click to
        see full instructions)
      U3L07 - seaGrass_instruction: |
        Add a parameter to drawSeagrass that controls
        the number of waves in the grass. (Click to see full instructions)
      U3L07 - seaStar_instruction: |
        Add 5 sea stars to the image by writing drawAllSeaStars
        with a loop. (Click to see full instructions)
      U3L07 - Starry Night Starter Code_instruction: "You are going to use loops\nand
        random numbers to generate an image of starry night sky similar to one\nshown
        here.  We have given you some starter code to generate the ground and\nsky
        (just two giant dots), you will add code to this project to make the stars,\ngrass,
        and moon.  All of the effects are clever applications of turtle dots,\nlines,
        and colors.  To get started, follow the series of steps suggested in\nthe
        accompanying worksheet. \n"
      U3L07 - sunBeams_instruction: |
        Add 100 sunbeams to the image by writing drawAllSunbeams
        with a loop. (Click to see full instructions)
      U3L07 - topDownDesign_instruction: |
        Get comfortable with the structure of this
        program, then move on to the next exercise. (Click to see full instructions)
      U3L08 - createTwoParamTriangle_instruction: |
        Define a function called drawTriangle()
        that accepts two parameters to set the size and width of the triangle. (Click
        to see full instructions)
      U3L08 - digitalScene_instruction: |
        Create the functions you were assigned as
        part of your digital scene. (Click to see full instructions)
      U3L08 - drawSquaresWithParams_instruction: |
        Write drawSmallSquare() to draw
        a 25px square. (Click to see full instructions)
      U3L08 - drawSquareWithParam - for video_instruction: |
        Use drawSquare() to recreate
        the image of both squares, this time using parameters. (Click to see full
        instructions)
      U3L08 - drawSquareWithParam_instruction: |
        Use drawSquare() to recreate the
        image of both squares, this time using parameters. (Click to see full instructions)
      U3L08 - Enchantment Under the Sea_instruction: |
        You have been provided with
        starter code for an “Under the Sea” scene which includes three functions,
        one each for the starfish, sea grass, and fish. Create versions of these functions
        which accept parameters to allow you to add more variation to your scene.  The
        student worksheet provides more details and guidance.
      U3L08 - fish_instruction: |
        Add a parameter to drawFish that changes the size
        of the fish drawn. (Click to see full instructions)
      U3L08 - freePlay_instruction: |
        Keep adding to your image by making more calls
        to your new functions with parameters. (Click to see full instructions)
      U3L08 - individualCode_instruction: |
        Create the functions you were assigned
        as part of your digital scene. (Click to see full instructions)
      U3L08 - introUnderTheSea_instruction: |
        Add an extra fish, starfish, and piece
        of sea grass to the image. Look at, but don't change, the functions that
        create them. (Click to see full instructions)
      U3L08 - multiParamFish_instruction: |
        Add three parameters to your drawFish
        function to accept red, green and blue values to make your fish different
        colors. (Click to see full instructions)
      U3L08 - multipleLayersofParams_instruction: |
        Call drawPlusSign() to complete
        the image. (Click to see full instructions)
      U3L08 - paramsToStarfish_instruction: |
        Add a parameter to drawStarfish that
        changes the size of the starfish drawn. (Click to see full instructions)
      U3L08 - randomInput_instruction: |
        Use the randomNumber() blocks to test the
        functions you designed with random input. (Click to see full instructions)
      U3L08 - seaGrass_instruction: |
        Add a parameter to drawSeagrass that changes
        the size of the piece of seagrass drawn. (Click to see full instructions)
      U3L08 - squareTwoParams_instruction: |
        Call drawSquare() to complete the drawing
        of two squares. (Click to see full instructions)
      U3L08 - starFish_instruction: |
        Add an extra fish, starfish, and piece of sea
        grass to the image. Look at, but don't change, the functions that create
        them. (Click to see full instructions)
      U3L08 - triangleTwoParams_instruction: |
        Call drawSquare() to complete the drawing
        of two squares. (Click to see full instructions)
      U3L1 - Simulation - Template_instruction: |
        Use a while loop to "flip 10 coins"
        and write them to the screen. (Click to see full instructions)
      U3L12 Chaser Template_instruction: This is a project template!
      U3L13 - Button with ID_instruction: |
        Drag a button out onto the screen and
        set its text to "Go forth!".  Run the program to make sure you can see the
        button.
      U3L13 - Debug Id plus logic problem_instruction: |-
        The last problem was an example
        of syntax error.  App Lab did not understand which object it should be listening
        to for a "click" event so it showed an error message in the console to let
        you know.  Another kind of error is a logical error - the program is valid,
        but it's not doing what you want it to do.\r
        \r
        This program has 2 errors.
        A (tricky) syntax error and logical error.  Find them, fix them, and make
        the program work as expected.
      U3L13 - Debug Id Problem_instruction: |
        Improve the button by choosing a descriptive
        and meaningful ID. (Click to see full instructions)
      U3L13 - Debugging 1_instruction: |
        Debug the program by verifying your IDs are
        being referenced properly. (Click to see full instructions)
      U3L13 - Debugging 2_instruction: |
        Debug the program by properly ordering your
        button commands and event handlers. (Click to see full instructions)
      U3L13 - Debugging 3_instruction: |
        Debug the program by fixing the logical error
        within the program. (Click to see full instructions)
      U3L13 - Project_instruction: |
        Create your multi-screen app. (Click to see full
        instructions.)
      U3L13 - Turtle Driver Project_instruction: |
        Create a "turtle driver" that
        includes buttons to move the turtle forward and turn it left and right. (Click
        to see full instructions)
      U3L13 - Turtle move with button_instruction: |
        Add a button that moves the turtle
        when clicked.  (Click to see full instructions)
      U3L13 eventsDetails_instruction: |
        Add an event handler to the button to move
        the turtle forward. (Click to see full instructions)
      U3L14 - Assigning Random Value_instruction: |
        Write a program that simulates
        the rolling of two dice and reports their individual values as well as the
        sum. (click to see full instructions)
      U3L14 - concatenate simple_instruction: |
        Modify the write statement on line
        3 to combine text and variables together to make the app display a single
        line of text that shows the player's lives and score. (click to see full
        instructions)
      U3L14 - Mini Calculator embed_instruction: |
        You will be prompted for two numbers,
        one right after the other.  See what happens.  Enter different numbers until
        you get the idea.
      U3L14 - moving memory challenge1_instruction: |
        Using only the variables provided,
        assignment (=) and arithmetic (+ - * /) re-assign the values to make the console.log
        statement display the correct value(s).  (Click to see full instructions)
      U3L14 - moving memory challenge2_instruction: |
        Using only the variables provided,
        assignment (=) and arithmetic (+ - * /) re-assign the values to make the console.log
        statement display the correct value(s).  (Click to see full instructions)
      U3L14 - moving memory challenge3_instruction: |
        Using only the variables provided,
        assignment (=) and arithmetic (+ - * /) re-assign the values to make the console.log
        statement display the correct value(s).  (Click to see full instructions)
      U3L14 - moving memory challenge4_instruction: |
        Using only the variables provided,
        assignment (=) and arithmetic (+ - * /) re-assign the values to make the console.log
        statement display the correct value(s).  (Click to see full instructions)
      U3L14 - moving memory challenge5_instruction: |
        Using only the variables provided,
        assignment (=) and arithmetic (+ - * /) re-assign the values to make the console.log
        statement display the correct value(s).  (Click to see full instructions)
      U3L14 - moving memory challenge6_instruction: |
        Using only the variables provided,
        assignment (=) and arithmetic (+ - * /) re-assign the values to make the console.log
        statement display the correct value(s).  (Click to see full instructions)
      U3L14 - Unfortunate Events Free Play_instruction: |
        Follow the "Unfortunate
        Events" Worksheet and enter your code here to experiment.  We've pre-loaded
        the code you need to start.
      U3L14 - User Input Division calculator_instruction: |
        Write a program that acts
        as a simple calculator. (click to see full instructions)
      U3L14 - Variable ReAssignment pt2_instruction: |
        Trace the code and predict
        what you think will be printed to the console. Then add a console.log statement
        at the end of the program to see the last value of someNum to see if your
        full prediction is correct. (click to see full Instructions)
      U3L15 - add code to make count down work_instruction: |
        Write code to make the
        down arrow work as expected. (Click to see full instructions)
      U3L15 - Add reset button to UpDown app_instruction: |
        Add code so that clicking
        the start over button will reset the game and send you back to the main screen.
        (Click to see full instructions)
      U3L15 - clicker update score_instruction: |
        Add code to update the score when
        the apple is clicked. (Click to see full instructions)
      U3L15 - count upDown bug forget to set text_instruction: |
        Find the bug in the
        program and fix it. (Click to see full instructions)
      U3L15 - count upDown bug logic error wrong update_instruction: |
        Find the bug
        in the program and fix it. (Click to see full instructions)
      U3L15 - count upDown bug var not created globally_instruction: |
        Find the bug
        in the program and fix it. (Click to see full instructions)
      U3L15 - Debug forget to update var on reset in UpDown app_instruction: |
        Run
        the app, and click the up or down button until you get to the gameOverScreen.
        Click 'Start Over' and try the app again. Find and fix the issue in the
        code. (Click to see full instructions)
      U3L15 - Debug if never triggers in UpDown app_instruction: |
        Run the app and
        use the up and down arrows to try to hit the gameOverScreen. You can't! Find
        and fix the issue in the code. (Click to see full instructions)
      U3L15 - Debugging Simple If-statements =v==_instruction: |
        Run the app, and
        click the up button. Then restart and run it again, and click the down button.
        Find and fix the issue in the code. (Click to see full instructions)
      U3L15 - DEMO up down count practice app_instruction: |
        Try out the demo app
        (Click to see full instructions)
      U3L15 - global var example count up_instruction: |
        Look at the code for this
        app and see how the code works to update the count variable when the up arrow
        is clicked. (Click to see full instructions).
      U3L15 - mini clicker update score_instruction: |
        Add code to update the score
        when the apple is clicked. (Click to see full instructions)
      U3L15 - practice with setText_instruction: |
        Use setText to complete the click
        event handler for the down arrow. (Click to see full instructions)
      U3L15 - Simple If-statements in UpDown App_instruction: |
        Add an if statement
        so that the app changes screens when the count reaches -5. (Click to see full
        instructions)
      U3L15 - variable scoping problem debugging_instruction: |
        See if you can figure
        out why the code is no longer working. (Click to see full instructions)
      U3L15 click add lives_instruction: |
        Add lives to the clicker game that decrement
        by 1 when the background image is clicked (Click to see full instructions)
      U3L15 full clicker app_instruction: |
        Complete your clicker game! (Click to
        see full instructions)
      U3L16 - challenge say hi app_instruction: |
        Write a greeting to the user when
        they hit 'enter' in the text input, using the 'change' event. (Click to
        see full instructions)
      U3L16 - chaserApp_instruction: |
        Create your own "Chaser Game." (Click to
        see full instructions)
      U3L16 - chooseImages_instruction: |
        Replace the image in your application with
        one of your own. (Click to see full instructions)
      U3L16 - doubleQuotes_instruction: |
        Save a string inside a variable and log
        it to the console. (Click to see full instructions)
      U3L16 - hideAndShow_instruction: |
        Introducing textInput, getText and write.  First
        run the starter code several times.  Try to change what's written to the
        screen when the button is clicked. Then use getText to write to the screen
        what the user entered in the text box. GIF: U3L16 - useGetText.gif
      U3L16 - hideAndShowPractice_instruction: |
        You are given some starting code
        that puts an image and two buttons on the screen.  The image is initially
        hidden. Add two new event handlers: one for each button, that when clicked
        hide and show the image.
      U3L16 - image and text labels_instruction: |
        Introducing the setPosition command!  Replace
        the moveTo in the button-click event handler to use setPosition to move the
        button itself to a random location when it's clicked.
      U3L16 - images and text labels_instruction: "Introducing objects other than\nbuttons!
        - textLabels and images.  First try replacing your button with a\ntextLabel.
        \ Will the text respond to events just like the button?  Try connecting\nan
        event handler to it.  We've started you out with code similar to the result\nof
        the last level, you can copy your code from that level into here if you\nprefer.
        \n"
      U3L16 - images_instruction: "Introducing Images.  Try replacing the textLabel\nwith
        an image..  Will the image respond to events just like the button?  Try\nconnecting
        an event handler to it.  We've started you out with code similar\nto the result
        of the last level, you can copy your code from that level into\nhere if you
        prefer. \n"
      U3L16 - intro getText_instruction: |
        Add an event handler to the Submit button
        so that when the button is clicked it will display the name entered in the
        text box to the console.  Use getText to get the value out of the text box.
        (Click to see full instructions)
      U3L16 - introSetPosition_instruction: |
        Move the buttons to the bottom of the
        screen. (Click to see full instructions)
      U3L16 - introStrings_instruction: |
        Save a string inside a variable and log
        it to the console. (Click to see full instructions)
      U3L16 - nameAgeTemplate_instruction: |
        Add an Text Input box for the name and
        age. (Click to see full instructions)
      U3L16 - newEventTypes_instruction: |
        Experiment with different event types and
        select the one that you think is best. (Click to see full instructions)
      U3L16 - outputWithTextArea_instruction: |
        Output a message to the 'textArea'
        (Click to see full instructions)
      U3L16 - projectTemplate_instruction: |
        Create your own "Chaser App". (Click
        to see full instructions)
      U3L16 - quick double click_instruction: |
        Mini-Project.  The Quick Double-Click
        game.  In this simple game an object (an image) moves around, or pops up randomly
        on the screen, as the user clicks it.  The goal of our game will be to try
        to double-click the object before it moves.  Part of the challenge (and fun)
        here is creating this app from scratch.  You can look back at your previous
        work for examples, but it's fun to create something from scratch, too.  Try
        it!  For more details see the Activity guide for this lesson.
      U3L16 - setPosition to move button_instruction: |
        Introducing the setPosition
        command! Replace the moveTo in the button-click event handler to use setPosition
        to move the button itself to a random location when it's clicked.
      U3L16 - setPositionMoveButton_instruction: Use setPositon to moveButton
      U3L16 - setupMoveToRandom_instruction: |
        Modify the code so that the turtle
        moves to a random screen location when the button is clicked. (Click to see
        full instructions)
      U3L16 - singleSetPosition_instruction: |
        Move the button to the middle of the
        screen. (Click to see full instructions)
      U3L16 - stringsVsNumbers_instruction: |
        Run the program to see how strings and
        numbers behave with different arithmetic operators. (Click to see full instructions)
      U3L16 - text labels_instruction: |
        Use the textLabel command to replace the
        button in your program with a text label. (Click to see full instructions)
      U3L16 - textInput getText write_instruction: |
        Add an Text Input box for the
        name and age. (Click to see full instructions)
      U3L16 - toUpper_instruction: |
        Make the name of the user appear in uppercase
        (Click to see full instructions)
      U3L16 - use images_instruction: |
        Use the image command to replace the text
        label in your program with an image. (Click to see full instructions)
      U3L16 Mad Lib Clear Input_instruction: "Clear the user's previous text when\nthe
        Play Again button is clicked (Click to see full instructions) \n"
      U3L16 Mad Lib Demo_instruction: Mad Libs Demo - Try it out!
      U3L16 Mad Lib getText_instruction: "Before setting the text area with your\nMad
        Libs outline, get the user's text and incorporate their responses. (Click\nto
        see full instructions) \n"
      U3L16 Mad Lib setText_instruction: "When the Next button is clicked, set the\ntext
        area to have the main outline of your How-to Mad Libs (without the user's\ninput).
        (Click to see full instructions) \n"
      U3L16 Mad Lib Student Setup_instruction: |
        Back to Mad Libs: To get started,
        set up the two screens for your Mad Libs app (Click to show full instructions)
      U3L16 Mad Lib toUpper_instruction: "Apply the toUpperCase and toLowerCase string\nfunctions
        to the user's text. (Click to see full instructions) \n"
      U3L17 - getAndSetKeyValue_instruction: |
        Create an image like app. (Click to
        see full instructions)
      U3L17 - getKeyValue_instruction: |
        Run the program several times to observe
        how the setKeyValue commands now always arrive in order. (Click to see full
        instructions)
      U3L17 - introCallbacks_instruction: |
        Run the program several times to observe
        how the setKeyValue commands now always arrive in order. (Click to see full
        instructions)
      U3L17 - introKeyValue_instruction: |
        Explore your key value pairs with the Data
        Viewer. (Click to see full instructions)
      U3L17 - readKeyValue_instruction: |
        Explore your key value pairs with the Data
        Viewer. (Click to see full instructions)
      U3L17 - setKeyValue_instruction: |
        Create and update your key value pairs using
        setKeyValue. (Click to see full instructions)
      U3L17 - twoSetKeyValue_instruction: |
        Run the program several times to observe
        how often setKeyValue commands arrive out of order. (Click to see full instructions)
      U3L18 comparison operators_instruction: |
        Use console.log to print out the different
        boolean expressions below to see what information they return. (Click to see
        full instructions)
      U3L18 comparison operators_for_video_instruction: |
        Use `console.log` to print
        out the different boolean expressions below to see what information they return.
        (Click to see full instructions)
      U3L19 - Clicker Game Freeplay Area_instruction: |
        Use this App Lab area to improve
        your clicker game.  You should start by copy/pasting the code from your old
        game here.  We're showing a more full set of blocks in the toolbox - some
        of the things you might not have used yet.  Feel free to explore then and
        experiment if you want to.  Everything else you need should be shown.  Have
        fun!
      U3L19 - Debugging with consoleLog_instruction: |
        Add console.log() statements
        to find out the value of a and b after the first reassignment statement a
        = b; (Click to see full instructions)
      U3L19 - DEMO up down count practice app_instruction: |
        Try out the demo app
        (Click to see full instructions)
      U3L19 - do concatenate string with var_instruction: |
        We've given you a piece
        of code from the previous screen.  Try changing the value assigned to foo
        to see the string change. \r
        Do this: \r
        1. Try changing the value assigned
        to foo to see the string change. \r
        2. By only modifying the lines of code
        that were given to you, try to get the output to say: “The value of foo is:
        9.  And isn’t that fine.” \r
      U3L19 - fix the var name syntax error v2_instruction: |
        Fix the error and get
        it to print the value of both variables (Click to see full instructions)
      U3L19 - fix the var name syntax error_instruction: |
        Fix the error and get it
        to print the value of both variables (Click to see full instructions)
      U3L19 - global var example count up_instruction: |
        Look at the code for this
        app and see how the code works to update the count variable when the up arrow
        is clicked. (Click to see full instructions).
      U3L19 - practice with setText_instruction: |
        Add another button that changes
        the text to the value of a new variable. (Click to see full instructions)
      U3L19 - Simple If-statements in UpDown App_instruction: |
        Add an if statement
        so that the app changes screens when the count reaches -5. (Click to see full
        instructions)
      U3L19 - Target Clicker App_instruction: |
        Investigate the new elements of the
        'chaser-game'
      U3L19 - test reassignment of two vars_instruction: |
        Predict the value of a
        and b. Add console.log statements to find out the actual value of a and b.
        (Click for full instructions)
      U3L19 - three basic ops of variables_instruction: |
        Add another variable called
        "lives" and set the value to 3. Print the value of the variable to the console.
        (Click to see full instructions)
      U3L19 - try out console log_instruction: |-
        Try out console.log.  Do this: replace
        the statement write("foo is: " + foo) with console.log("foo is: " + foo).  Run
        the program and you should see the output show up in the console area below
        the workspace.  Then try adding a few more console.log statements.  Display
        some text.  Make another variable and display that.  \r
        The app screen will
        be blank -- that's the point.  With console.log you can test output behind
        the scenes in a way the user cannot see.  \r
        \r
        \r
        GIF: U3L19-useconsolelog.gif
      U3L19 - up down count practice app_instruction: |
        Set up the down button to
        decrease the value of count by 1 each time it is clicked. (Click to see full
        instructions)
      U3L19 - updating variables pt1_instruction: |
        This app is only SLIGHTLY different
        from the previous one, but much more dynamic.  See if you can figure out how
        and why the count is going up.  Once you've figured it out then you should
        be able to DO THIS: add a button to the app that when clicked makes the count
        go down, and updates the label.  When you're done the app should work as
        shown in the demonstration.  GIF: U3L19 - upDownCountApp.gif
      U3L19 - variable reassignment challenge pt2_instruction: |
        Make a prediction
        about the ending values of a, b, and c. Then use console.log to check your
        understanding (Click to see full instructions)
      U3L19 - variable reassignment part 1_instruction: |
        Predict the value of a and
        b. Add console.log statements to find out the actual value of a and b. (Click
        for full instructions)
      U3L19 - variable scope problem 2_instruction: |
        What is happening with foo?
        Play with the level to try to figure it out. (Click to see full instructions)
      U3L19 - variable scoping problem debugging_instruction: |
        See if you can figure
        out why the code is no longer work. (Click to see full instructions)
      U3L19 - write var and string with same name v2_instruction: |
        Fix the code so
        that the values of both variables print to the console. (Click to see full
        instructions)
      U3L19 - write var and string with same name_instruction: |
        Fix the code so that
        the value of both variables prints to the console. (Click to see full instructions)
      U3L2 Using Simple Commands (no tooltips)_instruction: |
        Draw a 1x1 square above
        and to the left of the turtle's starting position. Click to see full instructions.
      U3L2 Using Simple Commands_instruction: |
        Draw a 1x1 square above and to the
        left of the turtle's starting position. Click to see full instructions.
      U3L23 Chatbot Conditionals 1_instruction: |
        Add if, else if, and else statements
        to detect the movie genres Comedy, Romance, Action, and Horror. (Click to
        see full instructions)
      U3L23 Chatbot Intro 1a_instruction: |
        Store the user's input inside a variable
        and log it to the console.
      U3L23 Chatbot Intro 2_instruction: |
        Use string concatenation to store the user's
        input and assistant's answer into the conversation variable using the format
        "User: <input><bot name>: <default response>" . Log the conversation to
        the console.
      U3L23 Chatbot Intro 2a_instruction: |
        Display the conversation onto the "text_area"
        element. Optional: clear the user's input after every "change" event.
      U3L23 Chatbot Intro 3_instruction: |
        Add newline characters "\
        " to separate
        the user's input and the computer's response.
      U3L23 Chatbot Intro 4_instruction: |
        Use this level to make your chatbot look
        and work better!
      U3L23 Chatbot Intro_instruction: |
        Choose a specialization topic for your digital
        assistant. Create a basic digital assistant that takes the user's input and
        displays back a default response.
      U3L23 Digital Assistant 1_instruction: |
        Set the text_area element to display
        the user's input from the text_input element.
      U3L23 Digital Assistant 2_instruction: |
        Add the response "I don't know."
        after each of the user's inputs.
      U3L23 Digital Assistant 3_instruction: |
        Add the response "I don't know."
        after each of the user's inputs.
      U3L23 Digital Assistant 4_instruction: |
        Display the user's input and the digital
        assistant's response on different lines.
      U3L23 Digital Assistant 5_instruction: |
        Start the user's command with the
        phrase "User:" and the digital assistant's response with the phrase "Bot:"
      U3L23 Digital Assistant 6_instruction: |
        When the user hits Run, display the
        text "I'm a generic digital assistant. Ask me anything!"
      U3L24 Basic String Parsing 1_instruction: |
        Use the function "userInput.indexOf(<food>)"
        to check if the strings "pizza" or "soup" are anywhere in the user's
        response.
      U3L24 Chatbot Basic Conditionals_instruction: |
        Check out the project description
        for instructions. (Click to see full instructions.)
      U3L24 Chatbot Conditionals 2_instruction: |
        Adjust the "if" block to make
        the bot respond "I don't know that color." if the user types anything besides
        "blue"
      U3L24 Chatbot Conditionals 3_instruction: |
        Adjust the "if/else" block to
        make the bot respond to the colors blue, red, and green, and to two additional
        colors.
      U3L24 Chatbot Keyword Record_instruction: |
        Use the next level to record your
        digital assistant's keywords/phrases.
      U3L24 Chatbot Nested Conditionals_instruction: |
        Add a chained conditional with
        at least 3 "else if" statements to your personal assistant.
      U3L24 introIncludes_instruction: |
        Practice using the includes command. (Click
        to see full instructions)
      U3L24 Nested Conditionals 1_instruction: |
        Change all of the boolean expressions
        to use includes instead of ==. (Click to see full instructions)
      U3L24 Nested Conditionals 2_instruction: "Nest your movie genre if statements\ninside
        the if statements to check for a ? in the input. \n"
      U3L24 Nested Conditionals Bugs 2_instruction: |
        Fix the problem with the code
        so that all the conditions can be reached. (Click to see full instructions)
      U3L24 Nested Conditionals Bugs 3_instruction: |
        Fix the bugs that still exist
        in this program. Prove that the program works correctly.
      U3L24 Nested Conditionals Bugs_instruction: |
        Expose the bugs in this problem
        by typing inputs into the user-input box. Track which inputs cause unexpected
        outputs.
      U3L25 - drag out key event_instruction: |
        Set up an event handler to respond
        to keypress events, and display event.key in the console. Hit keys on the
        keyboard to see what happens. (Click to see full instructions)
      U3L25 - play sound when up key_instruction: |
        Change the code so the sound will
        only play when the up arrow is pressed. (Click to see full instructions)
      U3L25 Chatbot Strings_instruction: |
        1. Adjust your digital assistant to evaluate
        inputs the same way whether the inputs are capitalized or lowercase. 2. If
        a user asks "What is <phrase>?", where <phrase> is an input your digital
        assistant does not recognize, make your digital assistant respond "I don't
        know what <phrase> is."
      U3L25 String Parsing 1_instruction: |
        Given the string "Wisdom begins with
        wonder." what is the index of the following characters W, t, w, ., d, and
        k? Confirm your expectation using the string.indexOf() function.
      U3L25 String Parsing 2_instruction: |
        Use str.length to find the length of the
        strings “Hello World”, “Computer science rocks!", and “I promise to do my
        homework every day.”
      U3L25 String Parsing 3_instruction: |
        Write a password length checker that writes
        “yes” to the console if a string has a length greater than 10, or “no” if
        it is less than or equal to 10.  Test your function using two strings, one
        that will satisfy each conditional option.
      U3L25 String Parsing 4_instruction: |
        You are given the string "Wisdom begins
        with wonder." Use the string.substring(begin, end) function to print "begin"
        and "nder" to the console.
      U3L25 String Parsing 5_instruction: |
        Fill in the function, findBeginNder()
        to get the strings "begin" and "nder" from a sentence no matter where
        in the sentence they exist.\r
        Print the strings and their index to the console.
      U3L25 String Parsing 6_instruction: |
        Write a function that takes a name (first
        last) and reorders it (last, first).
      U3L25 String Parsing 7_instruction: |
        You are given the string “The earth has
        music for those who listen.” Manipulate it using the functions str.toUpperCase()
        and str.toLowerCase().
      U3L26 AND operator_instruction: |
        Update the genre and rating if statements
        to give only one movie suggestion at a time. (Click to see full instructions)
      U3L26 Chatbot Compound Conditionals_instruction: |
        Update your digital assistant
        to include at least one each of AND, OR, and NOT
      U3L26 Chatbot Final_instruction: |
        Update your digital assistant to include
        at least one each of AND, OR, and NOT
      U3L26 Compound Logic_instruction: |
        Write a conditional statement that detects
        if a command contains all the phrases "2000" "animated" and "G-rated."
        If all these phrases are detected, make Movie Bot respond "The top grossing
        animated and G-rated film in the 2000 decade was Finding Nemo."
      U3L26 NOT operator_instruction: "Write a conditional statement that detects\nif
        a command does not contain the phrase \"bad.\" If \"bad\" is not detected,\nmake
        Movie Bot respond normally. Otherwise, make Movie Bot respond \"Sorry,\nI
        don't know about bad movies.\" \n"
      U3L26 OR operator_instruction: |
        Update the if statement to use an OR to check
        for a "?" as well as who, what, where, when, why, how in the user input.
        (Click to see full instructions)
      U3L27 Chatbot Final_instruction: |
        Make your digital assistant awesome and when
        you are finished, ask one of your classmates to test it for you using the
        activity guide. As you add features to your digital assistant, track them
        on the next level.
      U3L2_Turtle3by3Grid_instruction: |
        Draw a 3x3 grid to the front and right of
        the turtle as efficiently as possible. The turtle should end at its original
        location, facing its original direction. (Click to see full instructions)
      U3L2_TurtleSquare_right_instruction: |
        Draw a square to the front and to the
        right of the starting location. (Click to show full instructions)
      U4 - add createRecord to contacts App_instruction: |
        Add code to your contacts
        app so that newly-added contacts are saved in a table. (Click to see full
        instructions)
      U4 - Add Row By Hand_instruction: |
        Add a new record to your table in the Data
        Viewer. (Click to see full instructions)
      U4 - Charts - drawChartFromRecords 1_instruction: |
        Use the drawChartFromRecords
        block to create a scatter plot from the table in the database. (Click to see
        full instructions)
      U4 - Charts - drawChartFromRecords Options 1_instruction: |
        Add a title to your
        chart and change the colors of your lines using the options parameter of drawChartFromRecords.
        (Click to see full instructions)
      U4 - Charts - drawChartFromRecords Options 2_instruction: |
        Look through the
        drawChartFromRecords API and choose some more options to customize. (Click
        to see full instructions)
      U4 - Charts - drawChartsFromRecords 1_instruction: |
        Add screen element, pull
        out drawCharts block, run the program!
      U4 - Charts - Export Data_instruction: |
        Export the data from the “ages” table
        as a CSV file, then remix this app and import the CSV file. (Click to see
        full instructions)
      U4 - Charts - Import Data 1_instruction: |
        Download the CSV file we’ve provided,
        and then use the data viewer to import the data from the file into the “mytable”
        table. (Click to see full instructions)
      U4 - Charts - Import Data 2_instruction: |
        Call readRecords on “mytable” and
        print each record to the console. (Click to see full instructions)
      U4 - Charts - Line Chart 1_instruction: |
        Create a line chart showing the change
        in popularity of “#tbt” over time. (Click to see full instructions)
      U4 - Charts - Line Chart 2_instruction: |
        Add a second line to your chart to
        show the change in popularity of both “#tbt” and “#nofilter” at the same time.
        (Click to see full instructions)
      U4 - Charts - Line Chart Template_instruction: This is a template.
      U4 - Charts - Remixing Apps with Data_instruction: |
        Run this app and see what
        it prints to the console. Then remix the app and run the remixed version to
        see what happened to the data. (Click to see full instructions)
      U4 - Charts - Scatter Chart_instruction: |
        Create a scatter plot of the “rottenTomatoes”
        table, using the new table and column names. (Click to see full instructions)
      U4 - CreateRecord - 1_instruction: |
        Add a createRecord command and run the
        program. (Click to see full instructions)
      U4 - CreateRecord - 2.5_instruction: |
        Change the table name in createRecord
        then check the Data Viewer to see the new table. (Click to see  full instructions)
      U4 - CreateRecord - 2_instruction: |
        Change the name from "Alice" to something
        else in the createRecord command.  Run the program and use the Data Viewer
        to see the changes to your table. (Click to see full instructions)
      U4 - CreateRecord - 3_instruction: |
        Use createRecord to add the song object
        as a record to a table. (Click to see full instructions)
      U4 - CreateRecord - 4_instruction: |
        Run the program. Verify the song object
        was added to the database. Note the callback function now displays the copy
        of the record sent back back by the database. (Click to see full instructions)
      U4 - CreateRecord - 5_instruction: |
        Add a property to the JavaScript object,
        then run the program.  View the data table and see how changing the object
        affects the data table. (Click to see full instructions)
      U4 - debug column names are case sensitive_instruction: |
        Change song.title
        to song.Title (capital T).  And run the program.  Check the data table  (Click
        to see full instructions)
      U4 - deleteRecords 0_instruction: |
        Use the deleteRecord command with default
        values. Verify the record was deleted. (Click for full instructions).
      U4 - deleteRecords 1_instruction: |
        Find the id of "Little Bunny Foo Foo"
        in the data table "mySongs".  Use the deleteRecord command to delete it.  See
        what happens when you try to delete an ID a second time. (Click for full Instructions).
      U4 - deleteRecords 2 delete object_instruction: |
        Use the song object to delete
        multiple objects in the database by changing only the "id" property. (Click
        for full Instructions).
      U4 - deleteRecords 2_instruction: |
        Using the data viewer, find the id of a
        a record you want to delete. Use the deleteRecord command to delete it. (Click
        for full instructions).
      U4 - Edit Data Table by Hand_instruction: |
        View the data table and click edit
        next to each row.  Add the artists names for each song by hand. (Click to
        see full instructions)
      U4 - Exploring Data Tools - Template_instruction: |
        Use createRecord to add
        the song object as a record to a table. (Click to see full instructions)
      U4 - fix contacts by hand in data table_instruction: |
        Use the data viewer to
        add rows to the data table.  Add the original hard-coded contacts from your
        app to the database. (Click to see full instructions)
      U4 - last stage test adding contcts_instruction: |
        Confirm that new contacts
        you add are saved to the database.  Verify that after restarting your app,
        the contacts you added no longer show in the app, but still exist in the database.
        (Click to see full instructions)
      U4 - Objects - accessingPropertiesInArray_instruction: |
        Access the properties
        of the objects stored in an array. (Click to see full instructions)
      U4 - Objects - arraysOfObjects_instruction: |
        Create an array called "students"
        and add all 5 student objects to the array. (Click to see full instructions)
      U4 - Objects - createContactObject_instruction: |
        Construct a new object from
        the user inputs, and append it to your array. (Click to see full instructions)
      U4 - Objects - createContactsData_instruction: |
        Add values to the three contact
        objects provided in the starter code. (Click to see full instructions)
      U4 - Objects - createDotNotation_instruction: |
        Create a student Object yourself.
        Add properties to your object one at a time using dot notation. (Click to
        see full instructions)
      U4 - Objects - createObject_instruction: |
        Create an object with at least 3
        properties and display it in the Debug Console. (Click to see full instructions)
      U4 - Objects - dotNotation_instruction: |
        Use dot notation to display individual
        properties of the object. (Click to see full instructions)
      U4 - Objects - eventHandlersToSwitchScreen_instruction: |
        Attach event handlers
        to the "Add Contact" and "Go Back" buttons that allow the user to switch
        screens. (Click to see full instructions)
      U4 - Objects - eventParameter_instruction: |
        Trigger both the keyboard and mouse
        event and examine the event objects displayed in the console. Why might an
        object be the best way to store this information? (Click to see full instructions)
      U4 - Objects - exemplarContactsApp_instruction: |
        Use the Contacts app and then
        add a contact of your own. (Click to see full instructions)
      U4 - Objects - loopingArray_instruction: |
        Loop over your array of students
        and print the name of every students. (Click to see full instructions)
      U4 - Objects - loopingArray2_instruction: |
        Loop over your array of students
        and print the name and grade of every student. (Click to see full instructions)
      U4 - Objects - loopingCompoundConditions_instruction: |
        Loop over the array
        of students and display the information of students who are present and in
        the 11th grade. (Click to see full instructions)
      U4 - Objects - loopingConditions_instruction: |
        Loop over your array of student
        objects and display the names of every student who is present in class. (Click
        to see full instructions)
      U4 - Objects - pullValues_instruction: |
        Create an event handler for the "Save
        Contact" button that displays the contents of the 4 text input fields in
        the console. (Click to see full instructions)
      U4 - Objects - readStarterCode_instruction: |
        Familiarize yourself with the
        starter code and UI elements provided. (Click to see full instructions)
      U4 - Objects - resetIndexAndShow_instruction: |
        Add code to your event handler
        for the "Save Contact" button so that when a new contact is added, the inputs
        are cleared, the screen is switched, and the correct contact is shown. (Click
        to see full instructions)
      U4 - Objects - showContact1_instruction: |
        Add code to the showCurrentContact
        function to show the name of the contact stored at the currentIndex of your
        array. (Click to see full instructions)
      U4 - Objects - showContact2_instruction: |
        Add the phone number and birthday
        text to your text area. (Click to see full instructions)
      U4 - Objects - showContact3_instruction: |
        Display the image information for
        each contact. (Click to see full instructions)
      U4 - Objects - showSampleImage_instruction: |
        Attach an event handler to the
        image URL text input so that the user can confirm their image will work as
        expected. (Click to see full instructions)
      U4 - Objects - writeWrap_instruction: |
        Use the wrap function to prevent currentIndex
        from leaving the bounds of your array. (Click to see full instructions)
      U4 - Read Record - 1.2_instruction: |
        Place a console.log command below the
        readRecords command. (Click to see full instructions)\r
      U4 - Read Record - 1.3_instruction: |
        Add a console.log command inside the callback
        function. (Click to see full instructions)\r
      U4 - Read Record - 1_instruction: |
        Use console.log to display the records returned
        by a call to readRecords. (Click to see full instructions)\r
      U4 - Read Record - 2_instruction: |
        Change the table name so that the records
        are read from the new table. (Click to see full instructions)\r
      U4 - Read Record - 3_instruction: |
        Change the name of the table in a readRecords
        command to read from a table that does not exist. (Click to see full instructions)\r
      U4 - Read Record - 4.1_instruction: |
        Use indexes and dot notation to reference
        values in the response from the database. (Click to see full instructions)\r
      U4 - Read Record - 4_instruction: |
        Print out each record return from the readRecords
        call individually. (Click to see full instructions)\r
      U4 - Read Record - 5_instruction: |
        Using a for loop, display the title of each
        movie in your database. (Click to see full instructions)\r
      U4 - Read Record - part 1 - template_instruction: |
        Use console.log to display
        the records returned by a call to readRecords. (Click to see full instructions)\r
      U4 - ReadRecords - Contacts App 1_instruction: |
        Use readRecords to copy the
        data in your database into your "contacts" global variable and call showCurrentContact.
        (Click to see full instructions)
      U4 - ReadRecords - Contacts App 2_instruction: |
        Create a function called refreshLocalData.
        (Click to see full instructions)
      U4 - ReadRecords - Contacts App 3_instruction: |
        Add a call to "refreshLocalData"
        to the callback function of the createRecord you use to add a new contact
        to your database. (Click to see full instructions)
      U4 - ReadRecords - Contacts App 4_instruction: |
        Create a "Delete" button.
        (Click to see full instructions)
      U4 - ReadRecords - Contacts App 5 make delete work_instruction: |
        Create an
        event handler for the "Delete" button you created. (Click to see full instructions)
      U4L02 - Objects - createObject_instruction: "Create an object with at least\n5
        values including at least one string and one number. (Click to see full\ninstructions)
        \n"
      U4L02 - Objects - eventParameter_instruction: |
        Trigger both the keyboard and
        mouse event and examine the event objects displayed in the console. Why might
        an object be the best way to store this information? (Click to see full instructions)
      U4L02 - Objects - Template1_instruction: "Шаблон"
      U4L06 Data Storage 1_instruction: |
        Fill in your name instead of "Enter Your
        Name", run the app and click the button. Run it multiple times with different
        names! Watch the console and use the ‘View Data” button to see how the table
        is updated. As you play around make sure you can explain the purpose of each
        of the circled parts of the diagram.\r
        \r
      U4L06 Data Storage 2_instruction: "The app is a continuation of the previous\none
        we started. Add a text label to collect the users name and use that as\nthe
        data input for the record.\\r\n\\r\nRun the app and click the button multiple\ntimes
        and see what happens. Is there a problem you notice? "
      U4L06 Data Storage 3_instruction: |
        We want to improve the user experience.
        Once they have submitted their data for storage, it would be nice to clear
        the textbox.  Update your app to clear the textbox after the data is stored.
      U4L06 Data Storage 4_instruction: |
        Add a label and drop down box, to your app
        and save the data to your JSON object and add it to your table. Make sure
        to reset the dropdown after the data is stored.
      U4L06 Data Storage 5_instruction: "Add a couple radio buttons or checkboxes\nto
        our app. Then find a way to collect the data from those. \n"
      U4L06 Data Storage 6_instruction: " Use one of the getTime() and getUserId()\nblocks
        to collect additional data. \n"
      U4L06 Data Storage 7_instruction: |
        Add a second screen to the sample app we
        have been building to capture an image from a user. Return to screen 1 after
        the JSON object has been stored in the table.
      U4L15 Read Data 1_instruction: |
        Run the level and see what happens. Then edit
        the code to make it print a different column of information.
      U4L15 Read Data 2_instruction: |-
        Student should create a sentence which puts
        together all the pieces from a record.\r
        \r
        <<Name>> is <<Age>> years old
        and like <<Food>>
      U4L15 Read Data 3_instruction: |
        Print the sentence using the first JSON object
        in the array\r
        \r
      U4L15 Read Data 4_instruction: |-
        \r
        Use a random record from the list of records
        to display your sentence.
      U6 - Final Project - Project Level_instruction: |
        Build your final project here.
        (Click to see full instructions)
      U6 - updateRecord - Callback Success Parameter_instruction: |
        Add an if-else
        block inside the callback function for updateRecord. (Click to see full instructions)
      U6 - updateRecord - Contacts - Edit event handler_instruction: |
        Write event
        handlers for the Edit Contacts UI elements. (Click to see full instructions)
      U6 - updateRecord - Contacts - Edit UI_instruction: |
        Set up the UI elements
        needed to edit contacts. (Click to see full instructions)
      U6 - updateRecord - Contacts - Save edited contact_instruction: |
        Use updateRecord
        to store the user's edits in the database. (Click to see full instructions)
      U6 - updateRecord - Default Block_instruction: |
        Use updateRecord to change
        the record for "Eye of the Tiger." (Click to see full instructions)
      U6 - updateRecord - Update Nonexistent Record_instruction: |
        Force updateRecord
        to fail by changing the ID of songToUpdate. (Click to see full instructions)
      Underground Avoiding Lava_instruction: Під деякими блоками приховано лаву, її
        потрібно прикрити перш, ніж рухатися вперед. Команда "якщо" стане тут у нагоді.
        Додай команду "рухатись вперед" на відповідну позицію, щоб видобути ці блоки.
      Underground If Statements_instruction: Ситуація ускладнюється. Треба добути
        3 червоні камені, але не потрап у лаву. Використай команду "якщо", щоб розмістити
        бруківку над відкритою лавою.
      Underground Iron_instruction: "Ходити по розплавленій лаві - погана ідея. Замости
        її бруківкою, створивши міст, а тоді добудь ще хоча б два блоки заліза."
      Underground Mine in a Circle_instruction: |
        Знайди спосіб добути 5 діамантів та 7 червоних каменів! Спробуй використати команду повторення всередині іншої команди повторення, щоб пройти по квадрату.\r
      Underground Mining Coal_instruction: "Під землею ти знайдеш багато цінних ресурсів,
        але там темно. Розмісти принаймні 2 факели та добудь принаймні 2 блоки вугілля."
      Underground Test Level_instruction: "Збирай усі мінерали!"
      Vigenere_instruction: Test
      XML Scratchpad_instruction: Using this test level to grab xml for unit tests
