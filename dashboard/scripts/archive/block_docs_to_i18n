#!/usr/bin/env ruby

# Script to grab parameter information from block documentation .md files
# and write it out to a .json localization file, following a key format

require 'json'

CDO_ROOT = '../../../'.freeze
FILE_LIST = "#{CDO_ROOT}pegasus/**/applab/docs/*.md".freeze
OUTPUT_FILE = "#{CDO_ROOT}apps/i18n/common/en_us.json".freeze
PARAM_DESCRIPTION_CHARACTER_LIMIT = 140

FunctionInfo = Struct.new(:name, :params)
ParameterInfo = Struct.new(:name, :description)

def filename_without_extension(file_path)
  File.basename(file_path, '.*')
end

# @param [String] doc_path path to .md block document
# @return [FunctionInfo] parsed function information
def parse_function_doc(doc_path)
  collecting_params = false

  function_shortname = filename_without_extension(doc_path)
  function = FunctionInfo.new(function_shortname, [])

  File.readlines(doc_path).each do |line|
    if line.include? '[parameters]'
      collecting_params = true
      next
    elsif line.include? '[/parameters]'
      collecting_params = false
      next
    end

    next unless collecting_params && line.match(/^\|[^-]/) && !line.include?('| Name')
    param_name = line.split('|')[1].strip
    param_name_no_brackets = param_name.tr('[]', '')
    param_description = line.split('|')[4].strip
    param_info = ParameterInfo.new(param_name_no_brackets, param_description)
    function.params.push(param_info)
  end
  function
end

# @param [Array.<String>] doc_files
# @return [Array.<FunctionInfo>] function infos
def parse_function_docs(doc_files)
  functions = []

  doc_files.each do |doc_filename|
    begin
      functions << parse_function_doc(doc_filename)
    rescue Exception => e
      puts "Error processing file #{doc_filename}:"
      puts e.message
      puts e.backtrace.inspect
    end
  end
  functions
end

def escape_for_message_format(unescaped_string)
  capture_bracket = /([{}])/
  escaped_backslash = '\\'
  double_escaped_backslash = (escaped_backslash * 2)
  capture_group = '\1'
  unescaped_string.gsub(capture_bracket, double_escaped_backslash + capture_group)
end

def update_docs_i18n_file(functions, i18n_json_filename)
  new_strings = {}

  functions.each do |f|
    f.params.each_with_index do |param, i|
      new_strings["dropletBlock_#{f.name}_param#{i}"] = param.name
      max_description_characters = PARAM_DESCRIPTION_CHARACTER_LIMIT
      message_format_description = escape_for_message_format(param.description)
      if param.description.length <= max_description_characters
        new_strings["dropletBlock_#{f.name}_param#{i}_description"] = message_format_description
      end
    end
  end

  data_hash = File.exist?(i18n_json_filename) ? JSON.parse(File.read(i18n_json_filename)) : {}

  modified_data_hash = data_hash.merge(new_strings)
  sorted_data_hash = Hash[modified_data_hash.sort]

  File.write(i18n_json_filename, JSON.pretty_generate(sorted_data_hash) + "\n")
end

doc_files = Dir.glob(FILE_LIST).select {|e| File.file? e}
puts "Processing #{doc_files.count} doc files..."
function_infos = parse_function_docs(doc_files)
puts 'Updating i18n lines...'
update_docs_i18n_file(function_infos, OUTPUT_FILE)
puts '⊙‿⊙'
