<%
var utils = require('../utils');
var _ = utils.getLodash();
var i18n = require('./locale');
var NodeType = require('./netsimConstants').NodeType;


/**
 * @typedef {Object} rowMetadata
 * @property {number} nodeID
 * @property {string} classAttr
 * @property {string} displayName
 * @property {string} status
 */

/**
 * For use with Array.prototype.filter()
 * @param {NetSimNode} node
 * @returns {boolean}
 */
var omitIncomingConnectionNodes = function (node) {
  return undefined === _.find(incomingConnectionNodes, function (connectionRequestNode) {
        return connectionRequestNode.entityID === node.entityID;
      });
};

/**
 * For use with Array.prototype.filter()
 * @param {NetSimNode} node
 * @returns {boolean}
 */
var omitOutgoingRequestTargets = function (node) {
  return !remoteNode || (remoteNode.entityID !== node.entityID);
};

/**
 * For use with Array.prototype.map()
 * @param {NetSimNode} node
 * @returns {rowMetadata}
 */
var nodeToRowMetadata = function (node) {
  var classes = (node.getNodeType() === NodeType.ROUTER) ? ['router-row'] : ['user-row'];

  if (controller.isMyNode(node)) {
    classes.push('own-row');
  }

  return {
    nodeID: node.entityID,
    classAttr: classes.join(' '),
    displayName: node.getDisplayName(),
    status: node.getStatus(),
    canConnectToNode: controller.canConnectToNode(node)
  };
};

/**
 * For use with Array.prototype.sort()
 * @param {rowMetadata} a
 * @param {rowMetadata} b
 * @returns {number}
 */
var displayNameSort = function (a, b) {
  return (a.displayName > b.displayName) ? 1 : -1;
};

var lobbyRows = nodesOnShard
    .filter(controller.shouldShowNode.bind(controller))
    .filter(omitIncomingConnectionNodes)
    .filter(omitOutgoingRequestTargets)
    .map(nodeToRowMetadata)
    .sort(displayNameSort);

var requestRows = incomingConnectionNodes
    .filter(controller.shouldShowNode.bind(controller))
    .filter(omitOutgoingRequestTargets)
    .map(nodeToRowMetadata)
    .sort(displayNameSort);

var outgoingRequestRows = (remoteNode ? [ remoteNode ] : [])
    .filter(controller.shouldShowNode.bind(controller))
    .map(nodeToRowMetadata);

/**
 * @param {string} buttonText
 * @param {string} buttonID
 * @param {string[]} extraClasses
 * @param {Object} extraAttributes
 * @returns {string} markup for NetSim-style button
 */
function buttonMarkup(buttonText, buttonID, extraClasses, extraAttributes) {
  var classes = utils.valueOr(extraClasses, []);
  classes.push('netsim-button');
  classes.push('large-button');

  extraAttributes = utils.valueOr(extraAttributes, {});

  var markup = '<span class="' + classes.join(' ') + '" ';

  // ID attribute for span tag
  if (buttonID) {
    markup += 'id="' + buttonID + '" ';
  }

  // Extra attributes for span tag
  for (var key in extraAttributes) {
    if (extraAttributes.hasOwnProperty(key)) {
      markup += key + '="' + extraAttributes[key] + '" ';
    }
  }

  markup += '>' + buttonText + '</span>';
  return markup;
}

function writeHeader(headerText) {
  %>
    <tr>
      <th colspan="3"><%= headerText %></th>
    </tr>
  <%
}

function writeEmptyRow(contents) {
  contents = utils.valueOr(contents, '');
  %>
    <tr>
      <td colspan="3" class="empty-row"><%- contents %></td>
    </tr>
  <%
}

function writeNodeRow(nodeID, nodeName, nodeStatus, buttonType, addlClass) {
  %>
    <tr>
      <td nowrap><%= nodeName %></td>
      <td><%- nodeStatus %></td>
      <td class="button-column">
        <%
          var markup = '';
          if (buttonType === 'join-button') {
            markup = buttonMarkup(i18n.buttonJoin(), undefined, [buttonType, addlClass], { 'data-node-id': nodeID });
          } else if (buttonType === 'accept-button') {
            markup = buttonMarkup(i18n.buttonAccept(), undefined, [buttonType, addlClass], { 'data-node-id': nodeID });
          } else if (buttonType === 'cancel-button') {
            markup = buttonMarkup(i18n.buttonCancel(), undefined, [buttonType, addlClass, 'secondary'], { 'data-node-id': nodeID });
          }
        %>
        <%- markup %>
      </td>
    </tr>
  <%
}

%>
<div class="content-wrap">
  <div class="instructions"><%= controller.getLocalizedLobbyInstructions() %></div>
  <div class="controls">
    <table>

      <%
        // Primary lobby list
        writeHeader(i18n.lobby());
        lobbyRows.forEach(function (row) {
          var buttonType;
          if (!controller.hasOutgoingRequest() && row.canConnectToNode) {
            buttonType = 'join-button';
          }
          writeNodeRow(row.nodeID, row.displayName, row.status, buttonType, row.classAttr);
        });

        if (!controller.hasOutgoingRequest() && showAddRouterButton) {
          writeEmptyRow(buttonMarkup(i18n.addRouter(), 'netsim-lobby-add-router', ['secondary']));
        } else if (lobbyRows.length === 0) {
          writeEmptyRow(i18n.lobbyIsEmpty());
        }

        // Incoming requests table
        if (requestRows.length > 0) {
          writeEmptyRow();
          writeHeader(i18n.incomingConnectionRequests());
          requestRows.forEach(function (row) {
            var buttonType;
            if (!controller.hasOutgoingRequest() && row.canConnectToNode) {
              buttonType = 'accept-button';
            }
            var incomingStatus = i18n.lobbyStatusWaitingForYou();
            writeNodeRow(row.nodeID, row.displayName, incomingStatus, buttonType, row.classAttr);
          });
        }

        // Outgoing request table
        if (outgoingRequestRows.length > 0) {
          writeEmptyRow();
          writeHeader(i18n.outgoingConnectionRequests());
          outgoingRequestRows.forEach(function (row) {
            var outgoingStatus = i18n.lobbyStatusWaitingForOther({
              spinner: '<img src="/assets/spinner-big.gif" />',
              otherName: row.displayName,
              otherStatus: row.status
            });
            writeNodeRow(row.nodeID, row.displayName, outgoingStatus, 'cancel-button', row.classAttr);
          });
        }
      %>

    </table>
  </div>
  <div class="clear"></div>
</div>
