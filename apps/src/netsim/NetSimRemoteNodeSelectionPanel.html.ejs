<%
var utils = require('../utils');
var _ = require('lodash')
var i18n = require('@cdo/netsim/locale');
var NetSimGlobals = require('./NetSimGlobals');
var NodeType = require('./NetSimConstants').NodeType;

/** @type {function} */
var getAssetUrl = NetSimGlobals.getAssetUrlFunction();

/** @type {NetSimLevelConfiguration} */
var levelConfig = NetSimGlobals.getLevelConfig();

/**
 * @typedef {Object} RowMetadata
 * @property {number} nodeID
 * @property {string} classAttr
 * @property {string} displayName
 * @property {string} status
 */

/**
 * For use with Array.prototype.filter()
 * @param {NetSimNode} node
 * @returns {boolean}
 */
var omitIncomingConnectionNodes = function (node) {
  return undefined === _.find(incomingConnectionNodes, function (connectionRequestNode) {
        return connectionRequestNode.entityID === node.entityID;
      });
};

/**
 * For use with Array.prototype.filter()
 * @param {NetSimNode} node
 * @returns {boolean}
 */
var omitOutgoingRequestTargets = function (node) {
  return !remoteNode || (remoteNode.entityID !== node.entityID);
};

/**
 * For use with Array.prototype.map()
 * @param {NetSimNode} node
 * @returns {RowMetadata}
 */
var nodeToRowMetadata = function (node) {
  var displayName = node.getDisplayName();
  var sortKey = displayName;
  var classes = ['user-row'];

  if (node.getNodeType() === NodeType.ROUTER) {
    // Sort routers by left-padded router number (looks like natural sort)
    sortKey = ('000' + node.routerNumber).slice(-3);
    classes = ['router-row'];
  }

  if (controller.isMyNode(node)) {
    classes.push('own-row');
  }

  return {
    nodeID: node.entityID,
    sortKey: sortKey,
    classAttr: classes.join(' '),
    displayName: displayName,
    hostname: node.getHostname(),
    status: node.getStatus(),
    isFull: node.isFull(),
    canConnectToNode: controller.canConnectToNode(node)
  };
};

/**
 * For use with Array.prototype.sort()
 * @param {RowMetadata} a
 * @param {RowMetadata} b
 * @returns {number}
 */
var lobbySort = function (a, b) {
  return (a.sortKey > b.sortKey) ? 1 : -1;
};

var lobbyRows = nodesOnShard
    .filter(controller.shouldShowNode.bind(controller))
    .filter(omitIncomingConnectionNodes)
    .filter(omitOutgoingRequestTargets)
    .map(nodeToRowMetadata)
    .sort(lobbySort);

var requestRows = incomingConnectionNodes
    .filter(controller.shouldShowNode.bind(controller))
    .filter(omitOutgoingRequestTargets)
    .map(nodeToRowMetadata)
    .sort(lobbySort);

var outgoingRequestRows = (remoteNode ? [ remoteNode ] : [])
    .filter(controller.shouldShowNode.bind(controller))
    .map(nodeToRowMetadata);

/**
 * @param {string} buttonText
 * @param {string} buttonID
 * @param {string[]} extraClasses
 * @param {Object} extraAttributes
 * @returns {string} markup for NetSim-style button
 */
function buttonMarkup(buttonText, buttonID, extraClasses, extraAttributes) {
  var classes = utils.valueOr(extraClasses, []);
  classes.push('netsim-button');
  classes.push('large-button');

  extraAttributes = utils.valueOr(extraAttributes, {});

  var markup = '<span class="' + classes.join(' ') + '" ';

  // ID attribute for span tag
  if (buttonID) {
    markup += 'id="' + buttonID + '" ';
  }

  // Extra attributes for span tag
  for (var key in extraAttributes) {
    if (extraAttributes.hasOwnProperty(key)) {
      markup += key + '="' + extraAttributes[key] + '" ';
    }
  }

  markup += '>' + buttonText + '</span>';
  return markup;
}

function writeBeginTable(classname) {
  if (classname) {
    %><table class="<%=classname%>"><%
  } else {
    %><table><%
  }
}

function writeEndTable() {
  %></table><%
}

function writeBeginTbody() {
  %><tbody><%
}

function writeEndTbody() {
  %></tbody><%
}

function writeHeader(headerText) {
  %>
    <thead>
      <tr>
        <th colspan="3"><%= headerText %></th>
      </tr>
    </thead>
  <%
}

function writeEmptyRow(contents) {
  contents = utils.valueOr(contents, '');
  %>
    <tr>
      <td colspan="3" class="empty-row"><%- contents %></td>
    </tr>
  <%
}

function writeNodeRow(row, nodeStatus, buttonType, addlClass) {
    var button;
    if (buttonType === 'join-button') {
      button = buttonMarkup(i18n.buttonJoin(), undefined, [buttonType, addlClass], { 'data-node-id': row.nodeID });
    } else if (buttonType === 'accept-button') {
      button = buttonMarkup(i18n.buttonAccept(), undefined, [buttonType, addlClass], { 'data-node-id': row.nodeID });
    } else if (buttonType === 'cancel-button') {
      button = buttonMarkup(i18n.buttonCancel(), undefined, [buttonType, addlClass, 'netsim-button-secondary'], { 'data-node-id': row.nodeID });
    } else if (buttonType === 'full-button') {
      button = buttonMarkup(i18n.buttonFull(), undefined, [buttonType, addlClass], { 'disabled': 'disabled' });
    }
  %>
    <tr>
      <td nowrap><%= row.displayName %> <small>(<%= row.hostname %>)</small></td>
      <% if (button) { %>
        <td><%- nodeStatus %></td>
        <td class="button-column">
          <%- button %>
        </td>
      <% } else { %>
        <td colspan="2"><%- nodeStatus %></td>
      <% } %>
    </tr>
  <%
}

%>
<div class="content-wrap">
  <div class="instructions">
    <%= controller.getLocalizedLobbyInstructions() %>
    <div class="reference-area-placeholder"></div>
  </div>
  <div class="controls">

    <%
      // Outgoing request table (hidden if empty)
      if (outgoingRequestRows.length > 0) {
        writeBeginTable();
        writeHeader(i18n.outgoingConnectionRequests());
        writeBeginTbody();
        outgoingRequestRows.forEach(function (row) {
          var outgoingStatus = i18n.lobbyStatusWaitingForOther({
            spinner: '<img src="' + getAssetUrl('media/netsim/loading.gif') + '" />',
            otherName: row.displayName,
            otherStatus: row.status
          });
          writeNodeRow(row, outgoingStatus, 'cancel-button', row.classAttr);
        });
        writeEndTbody();
        writeEndTable();
      }

      // Incoming requests table (hidden if empty)
      if (requestRows.length > 0) {
        writeBeginTable();
        writeHeader(i18n.incomingConnectionRequests());
        writeBeginTbody();
        requestRows.forEach(function (row) {
          var buttonType;
          if (!controller.hasOutgoingRequest() && row.canConnectToNode) {
            buttonType = 'accept-button';
          }
          var incomingStatus = i18n.lobbyStatusWaitingForYou();
          writeNodeRow(row, incomingStatus, buttonType, row.classAttr);
        });
        writeEndTbody();
        writeEndTable();
      }
    %>

    <%
      // Primary lobby list
      writeBeginTable("nomargin");
      writeHeader(i18n.lobbyForShard({shard: shardDisplayName}));
      writeEndTable();
    %>
    <div id="netsim-scrolling-lobby">
    <%
      writeBeginTable();
      writeBeginTbody();
      lobbyRows.forEach(function (row) {
        var buttonType;
        if (!controller.hasOutgoingRequest()) {
          if (row.isFull) {
            buttonType = 'full-button';
          } else if (row.canConnectToNode) {
            buttonType = 'join-button';
          }
        }
        writeNodeRow(row, row.status, buttonType, row.classAttr);
      });

      if (lobbyRows.length === 0) {
        writeEmptyRow(i18n.lobbyIsEmpty());
      }

      writeEndTbody();
      writeEndTable();
    %>
    </div>

    <%
      var buttons = [];

      if (controller.canAddRouter()) {
        var buttonText = levelConfig.broadcastMode ? i18n.addRoom() : i18n.addRouter();
        buttons.push(buttonMarkup(
            buttonText,
            'netsim-lobby-add-router',
            ['netsim-button-secondary']
        ));
      }

      if (levelConfig.showLogBrowserButton) {
        buttons.push(buttonMarkup(
            i18n.logBrowserButton(),
            'show-router-log-modal',
            ['netsim-button-secondary']
        ));
      }

      if (canSeeTeacherLog) {
        buttons.push(buttonMarkup(
            i18n.teacherLogButton(),
            'show-teacher-log-modal',
            ['netsim-button-secondary']
        ));
      }

      if (buttons.length > 0) {
        %>
          <div class="netsim-lobby-buttons">
            <%- buttons.join(' ') %>
          </div>
        <%
      }
    %>

    <% if (controller.isUserAlone()) { %>
    <div class="lobby-hint">
      <i class="fa fa-info-circle" aria-hidden="true"></i>
      <p>
        You're the only one here!  If you were expecting to see other people
        here, you might have accidentally joined the wrong simulator.
        Follow these steps to make sure you're in the right place:
      </p>
      <ul>
        <li><strong>Are you signed in?</strong>
        To use the simulator with your class, you must be
        signed in to a Code Studio account that is in the same class section as
        the other students.  Have your teacher confirm that your account is
        in the class section.</li>
        <li><strong>Are you on the right level?</strong>
        You'll only be able to see other students in your class if you are on the
        same simulator level.  Make sure everyone is on
        <pre><%= window.location %></pre></li>
        <% if (controller.isUserInMultipleSections()) { %>
          <li><strong>Are you in the right section?</strong>
          You were given a choice of class sections when you loaded this level.
          Are you sure you picked the right one?
          <a href="javascript:location.reload()">Reload this page</a> to select
          a different section and see if anyone is there.</li>
        <% } %>
      </ul>
      <p>
        These resources may also be helpful:
      </p>
      <ul>
        <li><a href="/s/netsim/stage/1/puzzle/2">Setup Instructions for Teachers</a></li>
        <li><a href="/s/netsim/stage/1/puzzle/3">Frequently Asked Questions</a></li>
        <li><a href="https://code.org/educate/it">IT Requirements</a></li>
      </ul>
    </div>
    <% } %>

  </div>
  <div class="clear"></div>
</div>
