import { Asset, FileSystem } from 'expo';

export default class CustomAsset {
  constructor({ asset, fileName }) {
    this.asset = asset;
    this.fileName = fileName;
  }

  static fromModule(moduleId, fileName) {
    const asset = Asset.fromModule(moduleId);
    return new CustomAsset({asset, fileName});
  }

  static loadAsyncAssets(assets) {
    return Promise.all(assets.map(a => a.downloadAsync()));
  }

  async downloadAsync() {
    const localUri = `${FileSystem.cacheDirectory}${encodeURI(this.fileName)}`;
    let exists, md5;
    ({ exists, md5 } = await FileSystem.getInfoAsync(localUri, {
      cache: true,
      md5: true,
    }));
    if (!exists || md5 !== this.asset.hash) {
      const dirName = localUri.substring(0, localUri.lastIndexOf('/'));
      if (`${dirName}/` !== FileSystem.cacheDirectory) {
        try {
          await FileSystem.makeDirectoryAsync(dirName, {
            intermediates: true,
          });
        } catch (e) {
          // Ignore this because it throws if the dir already exists on Android
        }
      }
      if (this.asset.localUri) {
        await FileSystem.copyAsync({
          from: this.asset.localUri,
          to: localUri,
        });
        ({ md5 } = await FileSystem.getInfoAsync(localUri, {
          cache: true,
          md5: true,
        }));
      } else {
        ({ md5 } = await FileSystem.downloadAsync(this.asset.uri, localUri, {
            cache: true,
            md5: true,
        }));
      }
      if (md5 !== this.asset.hash) {
        throw new Error(
          `Downloaded file for asset '${this.fileName} ` +
            `Located at ${localUri} ` +
            `failed MD5 integrity check`
        );
      }
    }
    this.localUri = localUri;
    this.downloaded = true;
  }
}
