// A primary goal of the firebase rules is to make sure there are no unsecured
// nodes for which arbitrary data can be written to one of its children.
// Generally, this can be prevented for a given node in one of two ways:
// A. do not specify a write() rule on the node or its ancestors (a write() rule
//    which returns true grants write access to all descendants)
// B. specify a type on the node, which forbids any descendants which
//    are not explicitly declared in the type definition.
//
// The strategy for ensuring that all nodes are secured via A or B is as follows:
// 1. a node with a write() rule must not have an ancestor with a write() rule.
// 2. a node with a write() rule must also have a type definition.
// 3. avoid the Any or Object types in type definitions, since these allow
//    arbitrary children. If these are used, the shape of the data must be
//    enforced via a validate() rule.

///////////////////////////////////////////////////////////////////////////
// PATH RULES
///////////////////////////////////////////////////////////////////////////

path /v3/config {
  read() { isLoggedIn() }
}

// Don't allow reading /v3/channels, since that would expose the list of channels.
path /v3/channels/{channelId} {
  read() { isLoggedIn() }
}

path /v3/channels/{channelId}/serverTime is Number {
  write() { isLoggedIn() }
}

path /v3/channels/{channelId}/counters is Counters {
  write() { isLoggedIn() }
}

path /v3/channels/{channelId}/counters/limits/15 {
  validate() {
    isValidRateLimitCounter(this.parent().parent().parent(), 15, root.v3.config.channels.limits['15'])
  }
}

path /v3/channels/{channelId}/counters/limits/60 {
  validate() {
    isValidRateLimitCounter(this.parent().parent().parent(), 60, root.v3.config.channels.limits['60'])
  }
}

path /v3/channels/{channelId}/metadata is Metadata {
  write() { isLoggedIn() }
}

path /v3/channels/{channelId}/storage is Storage {
  write() { isLoggedIn() }
}

///////////////////////////////////////////////////////////////////////////
// TYPES
///////////////////////////////////////////////////////////////////////////

// counters

type Counters {
  limits: RateLimitCounters
  tables: TableCounter[]
}

type TableCounter {
  lastId: Number | Null
  rowCount: Number | Null

  validate() {
    orZero(this.lastId) >= valueOr(prior(this).lastId, -1) &&
    orZero(this.rowCount) >= 0 && orZero(this.rowCount) <= root.v3.config.channels.maxTableRows
  }
}

type RateLimitCounters {
  '15': RateLimitCounter | Null
  '60': RateLimitCounter | Null
}

type RateLimitCounter {
  lastResetTime: Number | Null
  writeCount: Number | Null
}

// metadata

type Metadata {
  tables: TableMetadata[]
}

type TableMetadata {
  columns: Column[]
}

type Column {
  columnName: String
}

// storage

type Storage {
  tables: TableStorage[]
  keys: KeyValue[]
}

type KeyValue extends String {
  validate() { this.length <= root.v3.config.channels.maxPropertySize}
}

type TableStorage {
  records: Record[]
}

type Record extends String {
  validate() { this.length <= root.v3.config.channels.maxRecordSize}
}

///////////////////////////////////////////////////////////////////////////
// HELPER FUNCTIONS
///////////////////////////////////////////////////////////////////////////

// auth helpers

isLoggedIn() { auth.uid !== null }

// rate limit helpers

isValidRateLimitCounter(channel, interval, maxCount) {
  isValidIncrement(channel.counters.limits[interval + ''], maxCount) ||
  isValidReset(channel.counters.limits[interval + ''], interval)
}

isValidIncrement(limitCounter, maxCount) {
  isUnchanged(limitCounter.lastResetTime) &&
  isIncreased(limitCounter.writeCount) &&
  limitCounter.writeCount <= maxCount
}

// limitCounter: Firebase node representing the counters for this interval
// interval: number representing the length of the interval in seconds
isValidReset(limitCounter, interval) {
  limitCounter.lastResetTime == now &&
  isIncreasedBy(limitCounter.lastResetTime, interval * 1000) &&
  limitCounter.writeCount == 1
}

// general helpers

orZero(value) { valueOr(value, 0) }
valueOr(value, defaultValue) { value == null ? defaultValue : value }
isUnchanged(value) { orZero(value) == orZero(prior(value)) }
isIncreased(value) { orZero(value) > orZero(prior(value)) }
isIncreasedBy(value, increment) { orZero(value) >= orZero(prior(value)) + increment}
