@startuml

left header
  <size:14>Last updated: 4/23/19
end header

title
  <color:#blue><size:18>**JotForm Survey Summary Pipeline**
end title

start

partition 1.Ingest {
  #lightgrey:Jotform submissions
  (in Jotform server)]
  :Fetcher;
  note right
    Sync data from Jotform to CDO db as-is.
  end note
  #lightgrey:submissions_table
  (in CDO db)]
  note right #lightgrey
    Schema: (submission_json_str)
    Only access sequentially.
    Only insert to this table, no update.
  end note
}

partition 2.Query {
  :Parser;
  note right
    Parse submission JSON string, expose key information to enable direct access
    to submission content using submission id.
  end note
  #lightgrey:submissions_parsed_table]
  note right #lightgrey
    Schema: (submission_id, form_id, created_at, status, submission_json_str)
    Only insert to this table, no update.
  end note

  :Indexer;
  note right: Index submission using common lookup keys such as workshop_id
  #lightgrey:submissions_lookup_table]
  note right #lightgrey
    Schema: (submission_id, form_id, environment, workshop_id, user_id, facilitator_id)
    Can be destroyed and rebuilt if schema changes.
  end note

  :Filter;
  note right
    Filter submissions based on lookup conditions (e.g. CSF 201 in 2019)
    and validation rules (e.g. ignore invalid submissions)
  end note
  #lightgrey:submission_id_array]
}

partition 3.Summarize {
  :Retriever;
  note right: Retrieve submission content from database to in-memory data structure.
  #lightgrey:submission_content_array]
  note right #lightgrey
    [{submission_id, form_id, answers}] (array of hash)
    answers = {question_id : question_and_answer}
  end note

  :Modifier;
  note right
    Modify question and answer data to make them aggregatable.
    E.g. update question unique name or convert value range to make values consistent.
  end note
  #lightgrey:submission_content_array
  (modified)]

  :Transformer;
  note right: Transform data from submission-centric to question-centric
  #lightgrey:question_content_array]
  note right
    [{question_name, question_type, question_content_compiled}] (array of hash)
    question_content_compiled = [{form_id, submission_id, question_answer}]
  end note

  :Mapper;
  note right: Map question data to Reducer based on question name and type
  #lightgrey:question_content_array
  (subset)]

  :Reducer;
  note right
    Aggregate answers into 1 single result (e.g. max, min, count, histogram, distribution)
    Different reducer for different question type.
  end note
  #lightgrey:question_summary]
  note right #lightgrey: {form_id, workshop_id, question_name, question_type, reducer_name, result} (hash)
}

partition 4.Present {
  :Decorator;
  note right
    Add supporting info to describe summary results. Send all to client as JSON.
    E.g. add categories and order for questions;
    add info for workshops (course, subject, location), organizer and survey (e.g. name).
  end note
  #lightgrey:question_summary_array
  + supporting info
  (JSON)]
  note right #lightgrey
    question_summary_array: array of question_summary
    survey_info: {form_id, name}
    workshop_info: {workshop_id, course, subject, location, organizer_id}
  end note

  :Presenter;
  note right
    Display summaries for each {workshop, survey}
  end note
  #white:Survey summary view]
}

stop

legend center
  | Color | Type |
  |<#lightgrey>| Data |
  |<#Yellow>| Action |
  |<#white>| View |
end legend

left footer
  <size:14>Created using PlantUML
end footer

@enduml