<% ami = commit[0..4] -%>
  FrontendRole:
    Type: AWS::IAM::Role
    Properties:
      <%=service_role 'ec2'%>
      Policies:
        - PolicyName: LifecycleHook
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action: 'autoscaling:CompleteLifecycleAction'
                Resource: !Sub "arn:aws:autoscaling:${AWS::Region}:${AWS::AccountId}:autoScalingGroup:*:autoScalingGroupName/Frontends-${AWS::StackName}"
      ManagedPolicyArns: [!Ref CDOPolicy]
      PermissionsBoundary: !ImportValue IAM-DevPermissions
  FrontendInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties: {Roles: [!Ref FrontendRole]}
  # Signal when the instance is fully provisioned and ready for AMI creation.
  AMICreate<%=ami%>:
    Type: AWS::CloudFormation::WaitCondition
    DependsOn: WebServerAMI
    CreationPolicy:
      ResourceSignal:
        Timeout: PT120M
        Count: 1
  WebServerAMI:
    Type: AWS::EC2::Instance
    DependsOn: <%=[daemon].compact.to_json%>
    Properties:
      ImageId: <%=IMAGE_ID%>
      InstanceType: !Ref InstanceType
      IamInstanceProfile: !Ref FrontendInstanceProfile
      SecurityGroupIds: [!ImportValue VPC-FrontendSecurityGroup]
      SubnetId: !ImportValue VPC-Subnet<%=azs.first%>
      KeyName: <%=SSH_KEY_NAME%>
      BlockDeviceMappings:
        - DeviceName: /dev/sda1
          Ebs:
            VolumeSize: 64
            VolumeType: gp2
      UserData:
        Fn::Base64: <%=file('bootstrap_chef_stack.sh.erb',
          resource_id: "AMICreate#{ami}",
          node_name: 'ami-$INSTANCE_ID',
          run_list: [
            local_mode ? 'recipe[cdo-apps]' : 'role[unmonitored-frontend]'
          ],
          commit: commit,
          shutdown: true,
          daemon: false,
          chef_version: chef_version
        )%>
  AMI<%=ami%>: <%= lambda_fn.call 'AMIManager',
    DependsOn: "AMICreate#{ami}",
    InstanceId: {Ref: "WebServerAMI" } %>
  FastSnapshotRestore: <%= lambda_fn.call 'FastSnapshotRestore',
    ImageIds: [{Ref: "AMI#{ami}" }],
    AvailabilityZones: AVAILABILITY_ZONES
  %>
  ASGCount: <%= lambda_fn.call 'CountASG',
    Default: {
      MinSize: 2,
      MaxSize: 20,
      DesiredCapacity: 2
    },
    AutoScalingGroupTags: [
      {Key: 'aws:cloudformation:stack-id', Value: {Ref: 'AWS::StackId'}},
      {Key: 'aws:cloudformation:logical-id', Value: 'Frontends'}
    ],
    LaunchConfiguration: {Ref: 'FrontendLaunchConfig'}
  %>
  Frontends:
    DependsOn: [ASGCount]
    Type: AWS::AutoScaling::AutoScalingGroup
    CreationPolicy:
      ResourceSignal:
        Timeout: PT50M
        Count: !GetAtt [ASGCount, DesiredCapacity]
      AutoScalingCreationPolicy:
        MinSuccessfulInstancesPercent: 80
    UpdatePolicy:
      AutoScalingRollingUpdate:
        MaxBatchSize: 20
        MinInstancesInService: !GetAtt [ASGCount, DesiredCapacity]
        MinSuccessfulInstancesPercent: 80
        PauseTime: PT50M
        SuspendProcesses: [ScheduledActions]
        WaitOnResourceSignals: true
    Properties:
      AutoScalingGroupName: !Sub "Frontends-${AWS::StackName}"
      VPCZoneIdentifier: <%= subnets.to_json %>
      LaunchConfigurationName: !Ref FrontendLaunchConfig
      MinSize: !GetAtt [ASGCount, MinSize]
      MaxSize: !GetAtt [ASGCount, MaxSize]
      DesiredCapacity: !GetAtt [ASGCount, DesiredCapacity]
      HealthCheckType: EC2 # TODO: use ELB health check that returns healthy even when fully loaded.
      HealthCheckGracePeriod: 2000
      TargetGroupARNs: [Ref: ALBTargetGroup]
      MetricsCollection:
        - Granularity: 1Minute
  FrontendLaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    DependsOn: FastSnapshotRestore
    Properties:
      ImageId: !GetAtt [AMI<%=ami%>, ImageId]
      InstanceType: !Ref InstanceType
      IamInstanceProfile: !Ref FrontendInstanceProfile
      SecurityGroups: [!ImportValue VPC-FrontendSecurityGroup]
      KeyName: <%=SSH_KEY_NAME%>
      BlockDeviceMappings:
        - DeviceName: /dev/sda1
          Ebs:
            VolumeSize: 64
            VolumeType: gp2
      UserData:
        Fn::Base64: <%=file('bootstrap_frontend.sh.erb',
          resource_id: 'Frontends',
          hook: 'WebServerHook-${AWS::StackName}',
          auto_scaling_group: 'Frontends-${AWS::StackName}',
          node_name: 'fe-$INSTANCE_ID',
          commit: commit)%>
  CPUScalingPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AutoScalingGroupName: !Ref Frontends
      EstimatedInstanceWarmup: 300
      PolicyType: TargetTrackingScaling
      TargetTrackingConfiguration:
        PredefinedMetricSpecification:
          PredefinedMetricType: ASGAverageCPUUtilization
        TargetValue: 50
  WebServerHook:
    Type: AWS::AutoScaling::LifecycleHook
    Properties:
      LifecycleHookName: !Sub "WebServerHook-${AWS::StackName}"
      AutoScalingGroupName: !Ref Frontends
      LifecycleTransition: 'autoscaling:EC2_INSTANCE_LAUNCHING'
      DefaultResult: ABANDON
      HeartbeatTimeout: 1200 # seconds = 20 minutes
      NotificationTargetARN: !Ref WebServerHookTopicNew
      RoleARN: !GetAtt WebServerHookRole.Arn
  WebServerHookTopicNew: {Type: 'AWS::SNS::Topic'}
  WebServerHookRole:
    Type: AWS::IAM::Role
    Properties:
      <%=service_role 'autoscaling'%>
      Policies:
        - PolicyName: snsPublish
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action: 'sns:Publish'
                Resource: !Ref WebServerHookTopicNew
      PermissionsBoundary: !ImportValue IAM-DevPermissions
