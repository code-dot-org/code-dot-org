  #
  # Redis-based Session Store
  #
  SessionStoreSubnetGroup:
    Type: AWS::ElastiCache::SubnetGroup
    Properties:
      Description: Session Store Subnet Group
      SubnetIds: <%= subnets.to_json %>
  SessionStoreGroup:
    Type: AWS::ElastiCache::ReplicationGroup
    Properties:
      ReplicationGroupDescription: Session Store Replication Group
      # 3 nodes of cache.r7g.xlarge will cost ($0.437 * 730 * 3) = ~$960/month
      # and provide just under 80GB of storage.
      CacheNodeType: <%= rack_env?(:production) ? 'cache.r7g.xlarge' : 'cache.t4g.micro' -%>

      Engine: Redis
      EngineVersion: 7.1

      ClusterMode: disabled
<% num_cache_clusters = 3 # 1 primary and 2 replicas -%>
      NumCacheClusters: <%= num_cache_clusters %>
      AutomaticFailoverEnabled: true
      MultiAZEnabled: true
      TransitEncryptionEnabled: true
      AtRestEncryptionEnabled: true

      SecurityGroupIds: [!ImportValue VPC-RedisSecurityGroup]
      CacheSubnetGroupName: !Ref SessionStoreSubnetGroup
  # CloudWatch Alarms for the Redis-based Session Store
  #
  # Based on:
  # https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/CacheMetrics.WhichShouldIMonitor.html
  # and
  # https://aws.amazon.com/blogs/database/monitoring-best-practices-with-amazon-elasticache-for-redis-using-amazon-cloudwatch/
  SessionStoreCPUUsageAlarm:
    Type: AWS::CloudWatch::Alarm
    DependsOn: SessionStoreGroup
    Properties:
      AlarmName: <%="Redis Session Store CPU Usage Too High (#{stack_name})" %>
      AlarmDescription: AWS Documentation recommends maintaining
        EngineCPUUtilization below 90%. Note that we use EngineCPUUtilization
        rather than CPUUtilization because the cache.r7g.xlarge nodes we're
        using have 4vCPUs
      ActionsEnabled: true
      AlarmActions:
        - !Sub "arn:aws:sns:${AWS::Region}:${AWS::AccountId}:CDO-Urgent"
      EvaluationPeriods: 5
      DatapointsToAlarm: 3
      Threshold: 90
      ComparisonOperator: GreaterThanOrEqualToThreshold
      TreatMissingData: missing
      Metrics:
        - Id: max_cpu
          Label: Maximum EngineCPUUtilization Among Redis Session Store Nodes
          ReturnData: true
          Expression: MAX(METRICS())
<% (1..num_cache_clusters).each do |cluster_id| -%>
        - Id: <%= "cpu_#{cluster_id}" %>
          ReturnData: false
          MetricStat:
            Metric:
              Namespace: AWS/ElastiCache
              MetricName: EngineCPUUtilization
              Dimensions:
                - Name: CacheClusterId
                  Value: !Sub "${SessionStoreGroup}-<%= cluster_id.to_s.rjust(3, '0') %>"
            Period: 60
            Stat: Maximum
<% end -%>
  SessionStoreEvictionsAlarm:
    Type: AWS::CloudWatch::Alarm
    DependsOn: SessionStoreGroup
    Properties:
      AlarmName: <%="Redis Session Store High Eviction Rate (#{stack_name})" %>
      AlarmDescription: We're seeing a lot of evictions from the Redis session store.
        A steady amount of evictions is not a bad thing, but a rapid increase in
        eviction rate could be a sign of other instability.
      ActionsEnabled: true
      AlarmActions:
        - !Sub "arn:aws:sns:${AWS::Region}:${AWS::AccountId}:CDO-LowPriority"
      EvaluationPeriods: 5
      DatapointsToAlarm: 3
      Threshold: 500
      ComparisonOperator: GreaterThanThreshold
      TreatMissingData: missing
      Metrics:
        - Id: max_evictions
          Label: Maximum Evictions Among Redis Session Store NOdes
          ReturnData: true
          Expression: MAX(METRICS())
<% (1..num_cache_clusters).each do |cluster_id| -%>
        - Id: <%= "evictions_#{cluster_id}" %>
          ReturnData: false
          MetricStat:
            Metric:
              Namespace: AWS/ElastiCache
              MetricName: Evictions
              Dimensions:
                - Name: CacheClusterId
                  Value: !Sub "${SessionStoreGroup}-<%= cluster_id.to_s.rjust(3, '0') %>"
            Period: 60
            Stat: Maximum
<% end -%>
  SessionStoreCurrConnectionsAlarm:
    Type: AWS::CloudWatch::Alarm
    DependsOn: SessionStoreGroup
    Properties:
      AlarmName: <%="Redis Session Store Too Many Connections (#{stack_name})" %>
      AlarmDescription: >-
        ElastiCache's default limit on the maximum number of connections is up
        to 65,000 simultaneous connections per node. We set this alarm at 80% of
        that, or 52,000 connections on any given node.

        We normally max out at ~1600 connections, so 52k is a generous cap.
      ActionsEnabled: true
      AlarmActions:
        - !Sub "arn:aws:sns:${AWS::Region}:${AWS::AccountId}:CDO-Urgent"
      EvaluationPeriods: 5
      DatapointsToAlarm: 3
      Threshold: 52000
      ComparisonOperator: GreaterThanThreshold
      TreatMissingData: missing
      Metrics:
        - Id: max_currconnections
          Label: Maximum Current Connections Among Redis Session Store Nodes
          ReturnData: true
          Expression: MAX(METRICS())
<% (1..num_cache_clusters).each do |cluster_id| -%>
        - Id: <%= "currconnections_#{cluster_id}" %>
          ReturnData: false
          MetricStat:
            Metric:
              Namespace: AWS/ElastiCache
              MetricName: CurrConnections
              Dimensions:
                - Name: CacheClusterId
                  Value: !Sub "${SessionStoreGroup}-<%= cluster_id.to_s.rjust(3, '0') %>"
            Period: 60
            Stat: Maximum
<% end -%>
