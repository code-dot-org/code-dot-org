  #
  # Redis-based Session Store
  #
  SessionStoreSubnetGroup:
    Type: AWS::ElastiCache::SubnetGroup
    Properties:
      Description: Session Store Subnet Group
      SubnetIds: <%= subnets.to_json %>
  SessionStoreGroup:
    Type: AWS::ElastiCache::ReplicationGroup
    Properties:
      ReplicationGroupDescription: Session Store Replication Group
      # 3 nodes of cache.r7g.xlarge will cost ($0.437 * 730 * 3) = ~$960/month
      # and provide just under 80GB of storage.
      CacheNodeType: <%= rack_env?(:production) ? 'cache.r7g.xlarge' : 'cache.t4g.micro' -%>

      Engine: Redis
      EngineVersion: 7.1

      ClusterMode: disabled
<% num_cache_clusters = 3 # 1 primary and 2 replicas -%>
      NumCacheClusters: <%= num_cache_clusters %>
      AutomaticFailoverEnabled: true
      MultiAZEnabled: true
      TransitEncryptionEnabled: true
      AtRestEncryptionEnabled: true

      SecurityGroupIds: [!ImportValue VPC-RedisSecurityGroup]
      CacheSubnetGroupName: !Ref SessionStoreSubnetGroup
  # CloudWatch Alarms for the Redis-based Session Store
  #
  # Based on:
  # https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/CacheMetrics.WhichShouldIMonitor.html
  # and
  # https://aws.amazon.com/blogs/database/monitoring-best-practices-with-amazon-elasticache-for-redis-using-amazon-cloudwatch/
  SessionStoreCPUUsageAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: <%="Redis Session Store CPU Usage Too High (#{stack_name})" %>
      AlarmDescription: AWS Documentation recommends maintaining
        EngineCPUUtilization below 90%. Note that we use EngineCPUUtilization
        rather than CPUUtilization because the cache.r7g.xlarge nodes we're
        using have 4vCPUs
      ActionsEnabled: true
      AlarmActions:
        - !Ref InfraUrgent
      EvaluationPeriods: 5
      DatapointsToAlarm: 3
      Threshold: 90
      ComparisonOperator: GreaterThanOrEqualToThreshold
      TreatMissingData: missing
      Metrics:
        - Id: max_cpu
          Label: Maximum EngineCPUUtilization Among Redis Session Store Nodes
          ReturnData: true
          Expression: MAX(METRICS())
<% (1..num_cache_clusters).each do |cluster_id| -%>
        - Id: <%= "cpu_#{cluster_id}" %>
          ReturnData: false
          MetricStat:
            Metric:
              Namespace: AWS/ElastiCache
              MetricName: EngineCPUUtilization
              Dimensions:
                - Name: CacheClusterId
                  Value: !Sub "${SessionStoreGroup}-<%= cluster_id.to_s.rjust(3, '0') %>"
            Period: 60
            Stat: Maximum
<% end -%>
  SessionStoreEvictionsAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: <%="Redis Session Store High Eviction Rate (#{stack_name})" %>
      AlarmDescription: We're seeing a lot of evictions from the Redis session store.
        A steady amount of evictions is not a bad thing, but a rapid increase in
        eviction rate could be a sign of other instability.
      ActionsEnabled: true
      AlarmActions:
        - !Ref InfraLowPriority
      MetricName: Evictions
      Namespace: AWS/ElastiCache
      Statistic: Maximum
      Dimensions:
        - Name: CacheClusterId
          Value: !Sub "${SessionStoreGroup}-001"
      Period: 300
      EvaluationPeriods: 5
      DatapointsToAlarm: 3
      # TODO infra: update this threshold and upgrade the alarm to Urgent once
      # we've confirmed that this threshold and implementation are practical.
      Threshold: 20000
      ComparisonOperator: GreaterThanThreshold
      TreatMissingData: missing
  SessionStoreNetworkBytesInAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: <%="Redis Session Store Incoming Network Traffic Too High (#{stack_name})" %>
      AlarmDescription:
        The cache.r7g.xlarge nodes we use have a guaranteed performance of "Up
        to 12.5 Gigabit"; because that includes both reads and writes and
        because we generally read more than we write, set the write limit to
        1/4 of the total.
      ActionsEnabled: true
      AlarmActions:
        - !Ref InfraUrgent
      EvaluationPeriods: 5
      DatapointsToAlarm: 3
      Threshold: 3125000000
      ComparisonOperator: GreaterThanThreshold
      TreatMissingData: missing
      Metrics:
        - Id: max_networkin
          Label: Maximum Incoming Network Traffic Among Redis Session Store Nodes
          ReturnData: true
          Expression: MAX(METRICS())
<% (1..num_cache_clusters).each do |cluster_id| -%>
        - Id: <%= "networkin_#{cluster_id}" %>
          ReturnData: false
          MetricStat:
            Metric:
              Namespace: AWS/ElastiCache
              MetricName: NetworkBytesIn
              Dimensions:
                - Name: CacheClusterId
                  Value: !Sub "${SessionStoreGroup}-<%= cluster_id.to_s.rjust(3, '0') %>"
            Period: 60
            Stat: Maximum
<% end -%>
  SessionStoreNetworkBytesOutAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: <%="Redis Session Store Outgoing Network Traffic Too High (#{stack_name})" %>
      AlarmDescription:
        The cache.r7g.xlarge nodes we use have a guaranteed performance of "Up
        to 12.5 Gigabit"; because that includes both reads and writes and
        because we generally read more than we write, set the read limit to 1/2
        of the total.
      ActionsEnabled: true
      AlarmActions:
        - !Ref InfraUrgent
      EvaluationPeriods: 5
      DatapointsToAlarm: 3
      Threshold: 6250000000
      ComparisonOperator: GreaterThanThreshold
      TreatMissingData: missing
      Metrics:
        - Id: max_networkout
          Label: Maximum Outgoing Network Traffic Among Redis Session Store Nodes
          ReturnData: true
          Expression: MAX(METRICS())
<% (1..num_cache_clusters).each do |cluster_id| -%>
        - Id: <%= "networkout_#{cluster_id}" %>
          ReturnData: false
          MetricStat:
            Metric:
              Namespace: AWS/ElastiCache
              MetricName: NetworkBytesOut
              Dimensions:
                - Name: CacheClusterId
                  Value: !Sub "${SessionStoreGroup}-<%= cluster_id.to_s.rjust(3, '0') %>"
            Period: 60
            Stat: Maximum
<% end -%>
