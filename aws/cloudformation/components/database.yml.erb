<%
  PRODUCTION_DB_CLUSTER_ID = 'autoscale-prod-cluster'.freeze
  # If an adhoc environment is using MySQL server installed on the app server EC2 Instance instead of an AWS RDS Cluster
  # use default credentials and hostname.
  MYSQL_DAEMON_DEFAULT_CREDENTIALS = '{"username":"root", "password":""}'.freeze
  MYSQL_DAEMON_HOSTNAME = 'localhost'.freeze
  DATABASE_CONFIGURATION = {
    db_cluster_id: '!Ref AuroraCluster',
    db_endpoint_writer: '!GetAtt AuroraCluster.Endpoint.Address',
    db_endpoint_proxy_writer: '!GetAtt DBProxy.Endpoint',
    db_endpoint_proxy_reader: '!GetAtt ReaderDBProxyEndpoint.Endpoint',
    db_endpoint_proxy_reporting: '!GetAtt ReportingDBProxyEndpoint.Endpoint'
  }.tap do |hash|
    if rack_env?(:production)
      hash[:db_cluster_id] = PRODUCTION_DB_CLUSTER_ID
      # Use a placeholder string for production db cluster endpoint to avoid placing a slightly sensitive value
      # in source code. We set the value of the Secret manually in production.
      hash[:db_endpoint_writer] = 'PLACEHOLDER'
      # We haven't yet provisioned the Writer and Reader Proxy Endpoints in production.
      hash[:db_endpoint_proxy_writer] = 'PLACEHOLDER'
      hash[:db_endpoint_proxy_reader] = 'PLACEHOLDER'
    end
    if !database
      hash[:db_cluster_id] = MYSQL_DAEMON_HOSTNAME
      hash[:db_endpoint_writer] = MYSQL_DAEMON_HOSTNAME
      hash[:db_endpoint_proxy_writer] = MYSQL_DAEMON_HOSTNAME
      hash[:db_endpoint_proxy_reader] = MYSQL_DAEMON_HOSTNAME
      hash[:db_endpoint_proxy_reporting] = MYSQL_DAEMON_HOSTNAME
    end
  end
  # Integer range identifying each of the DB Instances to provision in the cluster.
  DB_INSTANCE_RANGE=(0..1)
-%>

  DatabaseSecretAdmin:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: !Sub "CfnStack/${AWS::StackName}/db_credential_admin"
      Description: !Sub "Database credentials for ${AWS::StackName} admin user."
<% if database -%>
      GenerateSecretString:
        SecretStringTemplate: !Sub '{"username": "${DatabaseUsername}"}'
        GenerateStringKey: password
        PasswordLength: 10
        ExcludePunctuation: True
<% else -%>
      SecretString: '<%=MYSQL_DAEMON_DEFAULT_CREDENTIALS %>'
<% end -%>
  DatabaseSecretWriter:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: !Sub "CfnStack/${AWS::StackName}/db_credential_writer"
      Description: !Sub "Database credentials for ${AWS::StackName} writer user."
<% if database -%>
      GenerateSecretString:
        SecretStringTemplate: '{"username": "writer"}'
        GenerateStringKey: password
        PasswordLength: 10
        ExcludePunctuation: True
<% else -%>
      SecretString: '<%=MYSQL_DAEMON_DEFAULT_CREDENTIALS %>'
<% end -%>
  DatabaseSecretReader:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: !Sub "CfnStack/${AWS::StackName}/db_credential_reader"
      Description: !Sub "Database credentials for ${AWS::StackName} reader user."
<% if database -%>
      GenerateSecretString:
        SecretStringTemplate: '{"username": "reader"}'
        GenerateStringKey: password
        PasswordLength: 10
        ExcludePunctuation: True
<% else -%>
      SecretString: '<%=MYSQL_DAEMON_DEFAULT_CREDENTIALS %>'
<% end -%>

# Publish identifiers for database Resources provisioned in this template to Secrets, so the values can dynamically
# populate CDO.* application configuration settings.
# TODO: Transition these configuration settings to AWS Systems Manager Parameter Store or some equivalent system.

  DBClusterIDConfig:
    Type: AWS::SecretsManager::Secret
    Properties:
      Description: 'Publish Database Cluster ID to application configuration setting CDO.db_cluster_id'
      Name: !Sub "CfnStack/${AWS::StackName}/db_cluster_id"
      SecretString: <%=DATABASE_CONFIGURATION[:db_cluster_id]%>
  DBWriterEndpointConfig:
    Type: AWS::SecretsManager::Secret
    Properties:
      Description: 'Publish Database Cluster Writer Endpoint to application configuration setting CDO.db_endpoint_writer'
      Name: !Sub "CfnStack/${AWS::StackName}/db_endpoint_writer"
      SecretString: <%=DATABASE_CONFIGURATION[:db_endpoint_writer]%>
  DBProxyWriterEndpointConfig:
    Type: AWS::SecretsManager::Secret
    Properties:
      Description: 'Publish RDS Proxy Writer Endpoint to the application configuration setting CDO.db_endpoint_proxy_writer'
      Name: !Sub "CfnStack/${AWS::StackName}/db_endpoint_proxy_writer"
      SecretString: <%=DATABASE_CONFIGURATION[:db_endpoint_proxy_writer]%>
  DBProxyReaderEndpointConfig:
    Type: AWS::SecretsManager::Secret
    Properties:
      Description: 'Publish RDS Proxy Reader Endpoint to the application configuration setting CDO.db_endpoint_proxy_reader'
      Name: !Sub "CfnStack/${AWS::StackName}/db_endpoint_proxy_reader"
      SecretString: <%=DATABASE_CONFIGURATION[:db_endpoint_proxy_reader]%>
  DBProxyReportingEndpointConfig:
    Type: AWS::SecretsManager::Secret
    Properties:
      Description: 'Publish RDS Proxy Reporting Endpoint to the application configuration setting CDO.db_endpoint_proxy_reporting'
      Name: !Sub "CfnStack/${AWS::StackName}/db_endpoint_proxy_reporting"
      SecretString: <%=DATABASE_CONFIGURATION[:db_endpoint_proxy_reporting]%>

<% if database-%>
# We don't yet provision the production database cluster/instances via CloudFormation, but we're incrementally
# working towards that. Start with provisioning the DB Instance and Cluster ParameterGroups via this template.

  # Aurora Engine 2.x (MySQL 5.x) ParameterGroups
  AuroraClusterDBParameters:
    Type: AWS::RDS::DBClusterParameterGroup
    Properties:
      Description: !Sub "Aurora Cluster DB Parameters for ${AWS::StackName}."
      Family: aurora-mysql5.7
      Parameters:
        # BEGIN: Static configuration settings.
        # WARNING - Changing these settings triggers restart of each database instance in the cluster during Stack Update.

        binlog_format: 'ROW'
        gtid-mode: 'ON'
        enforce_gtid_consistency: 'ON'

        innodb_autoinc_lock_mode: 2
        #END: Static configuration settings.

        # BEGIN: Dynamic configuration settings. Changing these settings does NOT require nor trigger restart of instances.
        slow_query_log: 1
        innodb_monitor_enable: all
        tx_isolation: READ-COMMITTED

        # Prevent a slow query from degrading instance or cluster performance.
        # https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_max_execution_time
        max_execution_time: 30000

        # Favor write performance over durability. In the event of a database server crash
        # we could lose roughly 1 second of transactions.
        # https://dev.mysql.com/doc/refman/5.7/en/innodb-parameters.html#sysvar_innodb_flush_log_at_trx_commit
        innodb_flush_log_at_trx_commit: 1
        # END: Dynamic configuration settings.
  AuroraWriterDBParameters:
    Type: AWS::RDS::DBParameterGroup
    Properties:
      Description: !Sub "Aurora Writer DB Parameters for ${AWS::StackName}."
      Family: aurora-mysql5.7
      Parameters:
        # BEGIN: Static configuration settings. Changing these settings will trigger a restart of each database instance.

        # END: Static configuration settings.

        # BEGIN: Dynamic configuration settings. Changing these settings does NOT require nor trigger restart of instances.

        # Prevent a slow query from degrading instance or cluster performance.
        # https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_max_execution_time
        max_execution_time: 30000
        # END: Dynamic configuration settings.
  Aurora3ClusterDBParameters:
    Type: AWS::RDS::DBClusterParameterGroup
    Properties:
      Description: !Sub "Aurora Engine 3.x (MySQL 8.x) Cluster DB Parameters for ${AWS::StackName}."
      Family: aurora-mysql8.0
      Parameters:
        # BEGIN: Static configuration settings.
        # WARNING - Changing these settings triggers restart of each database instance in the cluster during Stack Update.

        binlog_format: 'ROW'
        gtid-mode: 'ON'
        enforce_gtid_consistency: 'ON'

        # Enable Enhanced Binary Logging to support Zero-ETL Integration with Redshift
        aurora_enhanced_binlog: 1
        binlog_backup: 0
        binlog_replication_globaldb: 0
        binlog_row_image: full # This is actually a dynamic setting, but let's keep all these settings together.
        binlog_row_metadata: full # Also dynamic.

        innodb_autoinc_lock_mode: 2
        #END: Static configuration settings.

        # BEGIN: Dynamic configuration settings. Changing these settings does NOT require nor trigger restart of instances.
        slow_query_log: 1
        innodb_monitor_enable: all
        transaction_isolation: READ-COMMITTED

        # Prevent a slow query from degrading instance or cluster performance.
        # https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_max_execution_time
        max_execution_time: 30000

        # Favor write performance over durability. In the event of a database server crash
        # we could lose roughly 1 second of transactions.
        # https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_flush_log_at_trx_commit
        innodb_flush_log_at_trx_commit: 1
        innodb_trx_commit_allow_data_loss: 1
        # END: Dynamic configuration settings.
  DBProxyRole:
    Type: AWS::IAM::Role
    Properties:
      <%=service_role 'rds'%>
      Policies:
        - PolicyName: RDSProxy
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action: secretsmanager:GetSecretValue
                Resource: !Ref DatabaseSecretReader

              - Effect: Allow
                Action: secretsmanager:GetSecretValue
                Resource: !Ref DatabaseSecretWriter

              # Engineers with database access will have a read-only credential stored in a Secret.
              # Example: `db_credential_employee_ada.lovelace`
              - Effect: Allow
                Action: secretsmanager:GetSecretValue
                Resource: !Sub "arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:CfnStack/${AWS::StackName}/db_credential_employee_*"
      PermissionsBoundary: !ImportValue IAM-DevPermissions
  ReportingDBProxy:
    Type: AWS::RDS::DBProxy
    DependsOn: ReaderSQLUser
    Properties:
      DBProxyName: !Sub "${AWS::StackName}-reporting"
      EngineFamily: MYSQL
      RoleArn: !GetAtt DBProxyRole.Arn
      Auth:
        - {AuthScheme: SECRETS, SecretArn: !Ref DatabaseSecretReader, IAMAuth: DISABLED}
      VpcSubnetIds: <%=subnets.to_json%>
      VpcSecurityGroupIds: [!ImportValue VPC-DBSecurityGroup]
  ReportingDBDomainName:
    Type: AWS::Route53::RecordSetGroup
    Properties:
      HostedZoneName: !Sub "${BaseDomainName}."
      RecordSets:
<%   if rack_env?(:production) -%>
        - Name: !Sub "db-reporting.${BaseDomainName}"
<%   else -%>
        - Name: !Sub "${PegasusSubdomainName}-db-reporting.${BaseDomainName}"
<%   end -%>
          Type: CNAME
          TTL: <%= DNS_TTL %>
          ResourceRecords: [ !GetAtt ReportingDBProxyEndpoint.Endpoint ]
  ReportingDBProxyEndpoint:
    Type: AWS::RDS::DBProxyEndpoint
    Properties:
      DBProxyEndpointName: !Sub "${AWS::StackName}-reporting"
      DBProxyName: !Ref ReportingDBProxy
      TargetRole: READ_ONLY
      VpcSubnetIds: <%=subnets.to_json%>
      VpcSecurityGroupIds: [ !ImportValue VPC-DBSecurityGroup ]
  ReportingDBProxyTargetGroup:
    Type: AWS::RDS::DBProxyTargetGroup
<%  unless rack_env?(:production)%>
    # List of Database Instance Logical IDs that must be provisioned before this RDS Proxy TargetGroup (Aurora0,Aurora1)
    # These Database Instances are not yet provisioned by this Stack.
    DependsOn: [<%=DB_INSTANCE_RANGE.map {|i| "Aurora#{i}"}.join(',')%>]
<%  end -%>
    Properties:
      DBProxyName: !Ref ReportingDBProxy
      DBClusterIdentifiers: [<%=rack_env?(:production) ? "'#{PRODUCTION_DB_CLUSTER_ID}'" : '!Ref AuroraCluster'%>]
      TargetGroupName: default
      ConnectionPoolConfigurationInfo:
        ConnectionBorrowTimeout: 10
        # Send reporting/analytics queries to the reader database instances, but use the database connection
        # initialization to configure reporting sessions so that queries do not negatively impact cluster performance
        # and to permit long running queries.
        InitQuery: 'SET SESSION aurora_read_replica_read_committed=ON; SET SESSION transaction_isolation="READ-COMMITTED"; SET SESSION max_execution_time = 0;'
        # Ensure that connections to the reader database instances that are carrying out "reporting" queries do not
        # exceed 10% of the total database connection capacity of a reader instance.
        MaxConnectionsPercent: 10
  WriterSQLUser:
    Type: Custom::SQLUser
<%  unless rack_env?(:production)%>
    # Wait until DB Instances have completed provisioning before using the admin SQL user to provision an application
    # SQL user.
    DependsOn: [<%=DB_INSTANCE_RANGE.map {|i| "Aurora#{i}"}.join(',')%>]
<%  end -%>
    Properties:
      ServiceToken: !Sub "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:SQLUser"
      # Production cluster has not been imported into this Stack, so pass the Secret that stores the writer endpoint
      # instead of `!GetAtt AuroraCluster.Endpoint.Address`
      DBWriterEndpointSecret: !Ref DBWriterEndpointConfig
      # Credentials for SQL admin user that will create/update/delete this SQL user resource.
      DBCredentialAdminSecret: !Ref DatabaseSecretAdmin
      # Credentials (username and password) for the SQL User this Resource is provisioning.
      DBCredentialSecret: !Ref DatabaseSecretWriter
      Privileges:
        - SELECT
        - INSERT
        - UPDATE
        - DELETE
        - CREATE
        - DROP
        - REFERENCES
        - INDEX
        - ALTER
        - CREATE TEMPORARY TABLES
        - LOCK TABLES
        - EXECUTE
        - CREATE VIEW
        - SHOW VIEW
        - CREATE ROUTINE
        - ALTER ROUTINE
        - EVENT
        - TRIGGER
  ReaderSQLUser:
    Type: Custom::SQLUser
<%  unless rack_env?(:production)%>
    # Wait until DB Instances have completed provisioning before using the admin SQL user to provision an application
    # SQL user.
    DependsOn: [<%=DB_INSTANCE_RANGE.map {|i| "Aurora#{i}"}.join(',')%>]
<%  end -%>
    Properties:
      ServiceToken: !Sub "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:SQLUser"
      # Production cluster has not been imported into this Stack, so pass the Secret that stores the writer endpoint
      # instead of `!GetAtt AuroraCluster.Endpoint.Address`
      DBWriterEndpointSecret: !Ref DBWriterEndpointConfig
      # Credentials for SQL admin user that will create/update/delete this SQL user resource.
      DBCredentialAdminSecret: !Ref DatabaseSecretAdmin
      # Credentials (username and password) for the SQL User this Resource is provisioning.
      DBCredentialSecret: !Ref DatabaseSecretReader
      Privileges: ['SELECT']

# We don't provision these in production via CloudFormation ... yet!
<%  unless rack_env?(:production)%>
  AuroraCluster:
    Type: AWS::RDS::DBCluster
    Properties:
      DBClusterIdentifier: !Sub "${AWS::StackName}-cluster"
      DBClusterParameterGroupName: !Ref Aurora3ClusterDBParameters
      Engine: aurora-mysql
      # Updating a Stack with a change to EngineVersion causes "Some Interruption".
      # Each Database Instance in the cluster is restarted.
      # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-rds-dbcluster.html#cfn-rds-dbcluster-engineversion
      EngineVersion: 8.0.mysql_aurora.3.05.2
      MasterUsername: !Sub "{{resolve:secretsmanager:${DatabaseSecretAdmin}:SecretString:username}}"
      MasterUserPassword: !Sub "{{resolve:secretsmanager:${DatabaseSecretAdmin}:SecretString:password}}"
      EnableIAMDatabaseAuthentication: true
      VpcSecurityGroupIds: [!ImportValue VPC-DBSecurityGroup]
      DBSubnetGroupName: !ImportValue VPC-DBSubnetGroup
      EnableCloudwatchLogsExports:
        - general
        - audit
        - error
        - slowquery
      DeletionProtection: <%= rack_env?(:adhoc) ? false : true %>
      BackupRetentionPeriod: !Ref DBBackupRetention
<%    DB_INSTANCE_RANGE.each do |i| %>
  Aurora<%=i%>:
    Type: AWS::RDS::DBInstance
    Properties:
      AllowMajorVersionUpgrade: true
      DBInstanceIdentifier: !Sub "${AWS::StackName}-<%=i%>"
      DBClusterIdentifier: !Ref AuroraCluster
      DBInstanceClass: !Ref DBInstanceType
      DBSubnetGroupName: !ImportValue VPC-DBSubnetGroup
      Engine: aurora-mysql
      DBParameterGroupName: default.aurora-mysql8.0 #Explicitly stop setting a custom Instance ParameterGroup.
<%      if rack_env?(:production) || rack_env?(:test) -%>
      EnablePerformanceInsights: true
      PerformanceInsightsRetentionPeriod: <%= rack_env?(:production) ? 465 : 7 %>
<%      end -%>
<%    end -%>
  DBProxy:
    Type: AWS::RDS::DBProxy
    DependsOn: [WriterSQLUser, ReaderSQLUser]
    Properties:
      DBProxyName: !Ref AWS::StackName
      EngineFamily: MYSQL
      RoleArn: !GetAtt DBProxyRole.Arn
      Auth:
        - {AuthScheme: SECRETS, SecretArn: !Ref DatabaseSecretWriter, IAMAuth: DISABLED}
        - {AuthScheme: SECRETS, SecretArn: !Ref DatabaseSecretReader, IAMAuth: DISABLED}
      VpcSubnetIds: <%=subnets.to_json%>
      VpcSecurityGroupIds: [!ImportValue VPC-DBSecurityGroup]
  ReaderDBProxyEndpoint:
    Type: AWS::RDS::DBProxyEndpoint
    Properties:
      DBProxyEndpointName: !Sub "${AWS::StackName}-reader"
      DBProxyName: !Ref DBProxy
      TargetRole: READ_ONLY
      VpcSubnetIds: <%=subnets.to_json%>
      VpcSecurityGroupIds: [!ImportValue VPC-DBSecurityGroup]
  DBProxyTargetGroup:
    Type: AWS::RDS::DBProxyTargetGroup
    # List of Database Instance Logical IDs that must be provisioned before this RDS Proxy TargetGroup (Aurora0,Aurora1)
    DependsOn: [<%=DB_INSTANCE_RANGE.map {|i| "Aurora#{i}"}.join(',')%>]
    Properties:
      DBProxyName: !Ref DBProxy
      DBClusterIdentifiers: [!Ref AuroraCluster]
      TargetGroupName: default
      ConnectionPoolConfigurationInfo:
        ConnectionBorrowTimeout: 10
<%  end -%>
<%end -%>
