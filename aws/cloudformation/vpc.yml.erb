---
AWSTemplateFormatVersion: 2010-09-09
Description: VPC layer including all Subnets, NAT Gateway and Security Groups for Code.org infrastructure.
Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsHostnames: true
  VpcClassicLink: <%= lambda_fn.call 'VpcClassicLink',
    VpcId: {Ref: 'VPC'},
    DnsSupport: true %>
  InternetGateway:
    Type: AWS::EC2::InternetGateway
  Internet:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: {Ref: VPC}
      InternetGatewayId: {Ref: InternetGateway}
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: {Ref: VPC}
  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: Internet
    Properties:
      RouteTableId: {Ref: PublicRouteTable}
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: {Ref: InternetGateway}
<%
  AVAILABILITY_ZONES.each_with_index do |zone, i|
    az = zone[-1].upcase
-%>
# Create a private subnet in each availability zone.
  Subnet<%=az%>:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: {Ref: VPC}
      CidrBlock: 10.0.<%=i%>.0/24
      AvailabilityZone: '<%=zone%>'
      MapPublicIpOnLaunch: false
  PrivateRouteTable<%=az%>:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: {Ref: VPC}
  PrivateRoute<%=az%>:
    Type: AWS::EC2::Route
    DependsOn: Nat<%=az%>
    Properties:
      RouteTableId: {Ref: PrivateRouteTable<%=az%>}
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: {Ref: Nat<%=az%>}
  PrivateSubnetRouteTableAssociation<%=az%>:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: {Ref: PrivateRouteTable<%=az%>}
      SubnetId: {Ref: Subnet<%=az%>}
# Create a public subnet and NAT Gateway in each availability zone.
# The NAT Gateway provides outbound (but not inbound) Internet access for the private subnet.
  PublicSubnet<%=az%>:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: {Ref: VPC}
      CidrBlock: 10.0.<%=i + 128%>.0/24
      AvailabilityZone: '<%=zone%>'
      MapPublicIpOnLaunch: false
  PublicSubnetRouteTableAssociation<%=az%>:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: {Ref: PublicRouteTable}
      SubnetId: {Ref: PublicSubnet<%=az%>}
  Nat<%=az%>:
    Type: AWS::EC2::NatGateway
    DependsOn: Internet
    Properties:
      AllocationId: {'Fn::GetAtt': [NatEIP<%=az%>, AllocationId]}
      SubnetId: {Ref: PublicSubnet<%=az%>}
  NatEIP<%=az%>:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
<% end -%>
  GatewaySecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable SSH access from Gateway bastion server.
      VpcId: {Ref: VPC}
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: <%=ssh_ip%>
  ELBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Inbound HTTP[S] from the public Internet, outbound HTTP[S] downstream
      VpcId: {Ref: VPC}
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
  FrontendSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Inbound HTTP[S] from load balancer, SSH from Gateway.
      VpcId: {Ref: VPC}
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          SourceSecurityGroupId: {Ref: ELBSecurityGroup}
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          SourceSecurityGroupId: {Ref: ELBSecurityGroup}
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          SourceSecurityGroupId: {Ref: GatewaySecurityGroup}
  RedisSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Redis access from frontends
      VpcId: {Ref: VPC}
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 6379
          ToPort: 6379
          SourceSecurityGroupId: {Ref: FrontendSecurityGroup}
  EFSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: EFS access from frontends
      VpcId: {Ref: VPC}
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 2049
          ToPort: 2049
          SourceSecurityGroupId: {Ref: FrontendSecurityGroup}
  DBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: MySQL access to/from frontends, gateway, or other DB instances.
      VpcId: {Ref: VPC}
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          SourceSecurityGroupId: {Ref: GatewaySecurityGroup}
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          SourceSecurityGroupId: {Ref: FrontendSecurityGroup}
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          DestinationSecurityGroupId: {Ref: GatewaySecurityGroup}
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          DestinationSecurityGroupId: {Ref: FrontendSecurityGroup}
  DBSecurityGroupEgress:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      GroupId: {Ref: DBSecurityGroup}
      DestinationSecurityGroupId: {Ref: DBSecurityGroup}
      FromPort: 3306
      ToPort: 3306
      IpProtocol: tcp
  DBSecurityGroupIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: {Ref: DBSecurityGroup}
      SourceSecurityGroupId: {Ref: DBSecurityGroup}
      FromPort: 3306
      ToPort: 3306
      IpProtocol: tcp
  DBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: Public Database Subnet Group
      SubnetIds: <%=azs.map{|az| {Ref: "PublicSubnet#{az}"}}.to_json%>
  RedshiftSubnetGroup:
    Type: AWS::Redshift::ClusterSubnetGroup
    Properties:
      Description: Redshift Public Subnet Group
      SubnetIds: <%=azs.map{|az| {Ref: "PublicSubnet#{az}"}}.to_json%>
  RedshiftSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Inbound Redshift connections from public Internet.
      VpcId: {Ref: VPC}
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 5439
          ToPort: 5439
          CidrIp: 0.0.0.0/0
Outputs:
  VpcId:
    Description: VPC ID
    Value: {Ref: VPC}
  GatewaySecurityGroup:
    Description: Security group for Gateway bastion server
    Value: {'Fn::GetAtt': [GatewaySecurityGroup, GroupId]}
  ELBSecurityGroup:
    Description: Security group for Load Balancer
    Value: {'Fn::GetAtt': [ELBSecurityGroup, GroupId]}
  FrontendSecurityGroup:
    Description: Security group for Frontend server
    Value: {'Fn::GetAtt': [FrontendSecurityGroup, GroupId]}
  RedisSecurityGroup:
    Description: Security group for Redis cache
    Value: {'Fn::GetAtt': [RedisSecurityGroup, GroupId]}
  DBSecurityGroup:
    Description: Security group for DB
    Value: {'Fn::GetAtt': [DBSecurityGroup, GroupId]}
  RedshiftSubnetGroup:
    Description: Subnet group for Redshift
    Value: {Ref: RedshiftSubnetGroup}
  RedshiftSecurityGroup:
    Description: Security group for Redshift
    Value: {'Fn::GetAtt': [RedshiftSecurityGroup, GroupId]}
  EFSSecurityGroup:
    Description: Security group for EFS
    Value: {'Fn::GetAtt': [EFSSecurityGroup, GroupId]}
<%
  AVAILABILITY_ZONES.each_with_index do |zone, i|
    az = zone[-1].upcase
-%>
  Subnet<%=az%>:
    Description: Private Subnet in <%=zone%>
    Value: {Ref: Subnet<%=az%>}
  PublicSubnet<%=az%>:
    Description: Public Subnet in <%=zone%>
    Value: {Ref: PublicSubnet<%=az%>}
<% end -%>
