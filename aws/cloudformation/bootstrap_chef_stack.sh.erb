# Bootstrap prerequisites
apt-get update
unattended-upgrade
apt-get -y install python3-pip curl
test "$(pip3 show awscli)" || pip3 install awscli

STACK=${AWS::StackName}
CHEF_VERSION=<%=CHEF_VERSION%>
REGION=${AWS::Region}
BRANCH=${Branch}
S3_BUCKET=<%=S3_BUCKET%>
ENVIRONMENT=<%=environment%>
RUN_LIST='<%=run_list.join(',')%>'
INSTANCE_ID=$(curl -s http://169.254.169.254/latest/meta-data/instance-id)
NODE_NAME=<%=node_name%>
RESOURCE_ID=<%=resource_id%>

# Increase EC2 instance metadata service retries/timeouts.
export AWS_METADATA_SERVICE_TIMEOUT=30
export AWS_METADATA_SERVICE_NUM_ATTEMPTS=30

<% if environment == :adhoc -%>
<%   if options[:start_inactive_instance] -%>
# <%= Time.now %> - trigger an EC2-instance restart by changing user-data contents.
<%   end -%>
# Redirect copy of stdout/stderr to a log file for later auditing.
LOG=<%=TailLogs::LOG_NAME%>
exec >> >(tee -i $LOG)
exec 2>&1

# Temp dir that cleans up after itself.
MYTMPDIR=$(mktemp -d)
trap 'rm -rf "$MYTMPDIR"' EXIT

# Install AWS CloudWatch Logs
# Ref: http://docs.aws.amazon.com/AmazonCloudWatch/latest/DeveloperGuide/EC2NewInstanceCWL.html
AWSLOGS_AGENT_URL=https://s3.amazonaws.com/aws-cloudwatch/downloads/latest/awslogs-agent-setup.py
AWSLOGS_CONF=$MYTMPDIR/awslogs.conf
cat <<CONF > $AWSLOGS_CONF
[general]
region = $REGION
[$LOG]
log_group_name = $STACK
log_stream_name = $LOG
file = $LOG
CONF
curl -s $AWSLOGS_AGENT_URL | python - -n -r $REGION -c $AWSLOGS_CONF > /dev/null
aws logs put-retention-policy \
  --log-group-name $STACK \
  --retention-in-days 1 \
  --region $REGION
<% end -%>
<% unless load_balancer -%>
# Fetch acmesmith-provisioned SSL certificate and key from S3
aws configure set s3.signature_version s3v4
SUBDOMAIN=<%=subdomain%>
S3_PATH=<%=ssl_certs_path%>
CURRENT=$S3_PATH/$(aws s3 cp $S3_PATH/current -)
function replace_newline() {
  sed 's/$/\\n/' | tr -d '\n'
}
CERT=$(aws s3 cp $CURRENT/cert.pem - | replace_newline)
CHAIN=$(aws s3 cp $CURRENT/chain.pem - | replace_newline)
KEY=$(aws s3 cp $CURRENT/key.pem - | replace_newline)
<% end -%>

<% if database -%>
apt-get install -y  jq
DB_SECRET_NAME=${DatabaseSecret}
DB_SECRET=$(aws --region $REGION secretsmanager get-secret-value --secret-id $DB_SECRET_NAME --version-stage AWSCURRENT | jq -r ".SecretString")
DB_USERNAME=$(echo $DB_SECRET | jq -r ".username")
DB_PASSWORD=$(echo $DB_SECRET | jq -r ".password")
<% end -%>

# Customize Chef configuration.
FIRST_BOOT=/etc/chef/first-boot.json
mkdir -p $(dirname $FIRST_BOOT)
cat <<JSON > $FIRST_BOOT
{
<% unless load_balancer -%>
  "cdo-nginx": {
    "ssl_cert": {
      "content": "$CERT"
    },
    "ssl_chain": {
      "content": "$CHAIN"
    },
    "ssl_key": {
      "content": "$KEY"
    }
  },
<% end -%>
  "cdo-repository": {
    <% if commit %>
      "revision": "<%=commit%>",
    <% end -%>
    "branch": "${Branch}",
    "sync": <%=!daemon%>
  },
  "cdo-secrets": {
<% if frontends -%>
    "memcached_endpoint": "${Memcached.ConfigurationEndpoint.Address}:${Memcached.ConfigurationEndpoint.Port}",
    "redis_primary": "${GeocoderGroup.PrimaryEndPoint.Address}:${GeocoderGroup.PrimaryEndPoint.Port}",
    "redis_read_addresses": "${GeocoderGroup.ReadEndPoint.Addresses}",
    "redis_read_ports": "${GeocoderGroup.ReadEndPoint.Ports}",
<% end -%>
<% if database -%>
    "db_writer": "mysql://$DB_USERNAME:$DB_PASSWORD@${AuroraCluster.Endpoint.Address}:${AuroraCluster.Endpoint.Port}/",
    "db_reader": "mysql://$DB_USERNAME:$DB_PASSWORD@${AuroraCluster.ReadEndpoint.Address}:${AuroraCluster.Endpoint.Port}/",
    "db_cluster_id": "${AuroraCluster}",
<% end -%>
<% unless cdn_enabled -%>
    "cdn_enabled": false,
<% end -%>
<% if rack_env?(:adhoc) -%>
    "image_optim": false,
    "override_dashboard": "<%=studio_subdomain%>",
    "override_pegasus": "<%=subdomain%>",
<% end -%>
    "stack_name": "$STACK"
  },
<% if database -%>
  "cdo-mysql": {
    "rds_proxy": "${DBProxy.Endpoint}"
  },
<% end -%>
<% if CDO.chef_local_mode -%>
  "omnibus_updater": {
    "version": "$CHEF_VERSION"
  },
<% end -%>
<% if daemon -%>
  "cdo-apps": {
    "daemon": true
  },
<% end -%>
  "run_list": []
}
JSON

# Bootstrap Chef configuration: Install Chef, run chef-client with empty run-list to create node with first-boot config.
OPTIONS="<%=cookbooks_path ? '-z ' : ''%> -b $BRANCH -n $NODE_NAME -r '' -e $ENVIRONMENT -v $CHEF_VERSION"
sudo -u ubuntu bash -c "aws s3 cp <%=bootstrap_script_path%> - | sudo bash -s -- $OPTIONS"

CHEF_CDO_APP=<%=CdoApp::CHEF_BIN%>
cat <<SH > $CHEF_CDO_APP
#!/bin/bash
# Provisions the Code.org application using Chef.
# Invokes chef-client with fetched config attributes and provided run-list.
CHEF_CONFIG=\$(mktemp)
aws secretsmanager get-secret-value \\
  --region $REGION \\
  --secret-id ${ChefConfig} \\
  --version-stage AWSCURRENT \\
  --query SecretString \\
  --output text \\
  > \$CHEF_CONFIG
/opt/chef/bin/chef-client \\
  --runlist '$RUN_LIST' \\
  --chef-license accept-silent \\
  --json-attributes \$CHEF_CONFIG
rm -f "\$CHEF_CONFIG"
SH
chmod +x $CHEF_CDO_APP
# Run chef-client as root with SUDO_USER set to `ubuntu`.
sudo -u ubuntu bash -c "sudo $CHEF_CDO_APP"
[ $? -eq 0 ] && STATUS=SUCCESS || STATUS=<%=daemon ? 'SUCCESS' : 'FAILURE'%>

<% unless daemon -%>
# Workaround for version-controlled files modified by seed.
sudo -u ubuntu bash -c "cd /home/ubuntu/$ENVIRONMENT && git reset --hard"
<% end -%>
