# Manual steps not captured by this template:
# - Creating all Secrets Manager secrets before running this template. See: https://docs.drone.io/installation/github/multi-machine/
# - After successful stack creation, the Github OAuth app Homepage URL / Authorization callback URL must be updated to point to the new ELB.
#   Alternatively, a route 53 A record alias can be created for the ELB, and the OAuth app URLs can be pointed to that.

AWSTemplateFormatVersion: 2010-09-09
Description: 'AWS CloudFormation template for running Drone.io on ECS. Recreates these steps: https://docs.drone.io/installation/github/multi-machine/'
Parameters:
  VpcId:
    Type: AWS::EC2::VPC::Id
    Description: VpcId
  ServiceSubnetIds:
    Type: List<AWS::EC2::Subnet::Id>
    Description: Comma separated list of existing VPC Subnet Ids where ECS EC2 Instances hosting Drone Service & Drone Autoscaler Service containers will be provisioned.
  WorkerPoolMinimum:
    Type: Number
    Description: Minimum number of physical servers that the autoscaler must keep alive.
    Default: 0
  WorkerPoolMaximum:
    Type: Number
    Description: Maximum number of physical servers that the autoscaler can provision.
    Default: 20
  WorkerPoolMinimumAge:
    Type: String
    # https://autoscale.drone.io/reference/drone-pool-min-age/
    Description: Minimum age a server must reach before it can be terminated.
    Default: 2h
  WorkerCapacityBuffer:
    Type: Number
    Description: Minimum number of idle servers available for future workloads.
    Default: 2
  WorkerInstanceAMI:
    Type: String
    Description: Amazon Machine Image that Autoscaler uses to launch Worker EC2 Instances.
    Default: ami-09b347c7ebb552ae2
  WorkerInstanceType:
    Type: String
    Description: EC2 Instance Type that Autoscaler provisions to run Builds.
    Default: m5.xlarge
  WorkerSubnetId:
    Type: AWS::EC2::Subnet::Id
    Description: Existing VPC Subnet Id where ECS EC2 Instances hosting Drone Runner ("worker") containers will be provisioned.
  DroneServerECSAMI:
    Description: AMI ID for EC2 Instance running Drone Server ECS Service.
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: /aws/service/ecs/optimized-ami/amazon-linux/recommended/image_id
  AutoscalerECSAMI:
    Description: AMI ID
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: /aws/service/ecs/optimized-ami/amazon-linux-2/recommended/image_id
Resources:
# ELB resources:
# ELB / Target Group / Listener / ELB Security Group

  ElbSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: ELB Allowed Ports
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
        # Autoscaler service
        - IpProtocol: tcp
          FromPort: 8443
          ToPort: 8443
          CidrIp: 0.0.0.0/0
      Tags:
        -
          Key: Name
          Value: !Sub "ECS ${AWS::StackName} - ALB SecurityGroup"

  DroneMasterTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub "TargetGroup-${AWS::StackName}"
      VpcId: !Ref VpcId
      Port: 80
      Protocol: HTTP
      Tags:
        -
          Key: Name
          Value: !Sub "ECS ${AWS::StackName} - TargetGroup"

  DroneMasterELB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Sub "ELB-${AWS::StackName}"
      SecurityGroups:
        - !Ref ElbSecurityGroup
      Subnets: !Ref ServiceSubnetIds
      Tags:
        -
          Key: Name
          Value: !Sub "ECS ${AWS::StackName} - ELB"

  LoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref DroneMasterELB
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref DroneMasterTargetGroup

  ACMCertificate:
    Type: AWS::CertificateManager::Certificate
    Properties:
      DomainName: '*.cdn-code.org'
      ValidationMethod: DNS

  HttpsLoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref DroneMasterELB
      Port: 443
      Protocol: HTTPS
      Certificates:
        - CertificateArn: !Ref ACMCertificate
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref DroneMasterTargetGroup

# Drone Master resources:
# Security Group / EC2 Launch Template / EC2 Autoscaling Group
# ECS cluster / ECS service / ECS task definition

  DroneMasterEcsSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: ECS Allowed Ports
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        -
          IpProtocol: tcp
          FromPort: 1
          ToPort: 65535
          SourceSecurityGroupId: !Ref ElbSecurityGroup
        -
          IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 3.90.82.166/32

  DroneMasterECSCluster:
    Type: AWS::ECS::Cluster

  DroneMasterLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: !Sub "DroneMasterLaunchTemplate-${AWS::StackName}"
      LaunchTemplateData: 
        IamInstanceProfile: 
          Name: ecsInstanceRole
        KeyName: !Sub "winter-dev-${AWS::Region}"
        SecurityGroupIds: 
          - !Ref DroneMasterEcsSecurityGroup
        ImageId: !Ref DroneServerECSAMI
        InstanceType: t3.medium
        Monitoring:
          Enabled: true
        UserData: 
          Fn::Base64:
            !Sub 
              - "#!/bin/bash\necho ECS_CLUSTER=${EcsClusterName} >> /etc/ecs/ecs.config;echo ECS_BACKEND_HOST= >> /etc/ecs/ecs.config;"
              - {EcsClusterName: !Ref DroneMasterECSCluster}
 
  DroneMasterEcsInstanceAsg:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier: !Ref ServiceSubnetIds
      LaunchTemplate:
        LaunchTemplateId: !Ref DroneMasterLaunchTemplate
        Version: !GetAtt DroneMasterLaunchTemplate.LatestVersionNumber
      MinSize: 1
      MaxSize: 1
      DesiredCapacity: 1

  DroneMasterCloudwatchLogsGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "DroneMaster-${AWS::StackName}"
      RetentionInDays: 14

  DroneMasterTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Sub "${AWS::StackName}-drone-master"
      RequiresCompatibilities:
        - EC2
      ExecutionRoleArn: !Sub "arn:aws:iam::${AWS::AccountId}:role/DroneEcsTaskExecutionRole"
      TaskRoleArn: !Sub "arn:aws:iam::${AWS::AccountId}:role/DroneServer"
      Volumes:
        -
          Name: db-data
          Host:
            SourcePath: /var/lib/drone
      ContainerDefinitions:
        - 
          Name: drone-master
          Essential: true
          Image: drone/drone:1.9.0
          MemoryReservation: 1024
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref DroneMasterCloudwatchLogsGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: ecs
          PortMappings:
            - 
              ContainerPort: 80
            -
              ContainerPort: 443
          MountPoints:
            -
              ContainerPath: /data
              SourceVolume: db-data
          Secrets:
            -
              Name: DRONE_GITHUB_CLIENT_ID
              ValueFrom: !Sub "arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:drone/server/github-client-id-cORMtL"
            -
              Name: DRONE_GITHUB_CLIENT_SECRET
              ValueFrom: !Sub "arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:drone/server/github-client-secret-3gSebn"
            -
              Name: DRONE_RPC_SECRET
              ValueFrom: !Sub "arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:drone/shared/rpc-secret-etPSzp"
          Environment:
            -
              Name: DRONE_GITHUB_SERVER 
              Value: https://github.com
            -
              Name: DRONE_SERVER_HOST 
              Value: drone.cdn-code.org
            -
              Name: DRONE_SERVER_PROTO
              Value: https
            -
              Name: DRONE_TLS_AUTOCERT
              Value: true
            # Needed to create first admin user: https://docs.drone.io/administration/user/admins/
            -
              Name: DRONE_USER_CREATE
              Value: username:code-org,admin:true
            # Users on this Drone server must be members of the code-dot-org GitHub Organization.
            -
              Name: DRONE_USER_FILTER
              Value: code-dot-org
            # Require authentication for all repositories https://discourse.drone.io/t/drone-default-visibility/7411
            -
              Name: DRONE_SERVER_PRIVATE_MODE
              Value: true
            # Store Drone Build logs in S3 instead of in a blob column in the logs table in the Drone Server relational database.
            -
              Name: AWS_DEFAULT_REGION
              Value: us-east-1
            -
              Name: AWS_REGION
              Value: us-east-1
            -
              Name: DRONE_S3_BUCKET
              Value: code-dot-org
            -
              Name: DRONE_S3_PREFIX
              Value: /drone-build-logs/

  DroneMasterEcsService:
    Type: AWS::ECS::Service
    DependsOn: LoadBalancerListener
    Properties:
      Cluster: !Ref DroneMasterECSCluster
      LaunchType: EC2
      DesiredCount: 1
      LoadBalancers:
      - ContainerName: drone-master
        ContainerPort: 80
        TargetGroupArn: !Ref DroneMasterTargetGroup
      TaskDefinition: !Ref DroneMasterTaskDefinition
      PropagateTags: SERVICE

  DroneAutoscalerCloudwatchLogsGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "DroneAutoscaler-${AWS::StackName}"
      RetentionInDays: 14

  DroneAutoscalerTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Sub "${AWS::StackName}-drone-autoscaler"
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - EC2
      ExecutionRoleArn: !Sub "arn:aws:iam::${AWS::AccountId}:role/DroneEcsTaskExecutionRole"
      TaskRoleArn: !Sub "arn:aws:iam::${AWS::AccountId}:role/drone-autoscaler-ecs-task"
      ContainerDefinitions:
        -
          Name: drone-autoscaler
          Essential: true
          Image: drone/autoscaler:1.8.2
          MemoryReservation: 1024
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref DroneAutoscalerCloudwatchLogsGroup # TODO: implement cloud watch group
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: ecs
          PortMappings:
            -
              ContainerPort: 8080
          Secrets:
            # BEGIN: Secrets for the Drone Autoscaler service.
            -
              # API token generated by Drone Server for autoscaler-service admin user to authenticate to Drone Server.
              Name: DRONE_SERVER_TOKEN
              ValueFrom: !Sub "arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:drone/autoscaler/drone-server-token-t1g0us"
            # END: Secrets for the Drone Autoscaler service.

            # BEGIN: Secrets for the Drone Runner ("worker"/"agent") executing on the EC2 Instances provisioned by Autoscaler.
            -
              # API token for Drone Runner instances to authenticate to Drone Server.
              Name: DRONE_AGENT_TOKEN
              ValueFrom: !Sub "arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:drone/shared/rpc-secret-etPSzp"
            # END: Secrets for the Drone Runner.
          Environment:
            -
              Name: AWS_IAM
              Value: true
            -
              Name: DRONE_SERVER_HOST
              Value: drone.cdn-code.org
            -
              Name: DRONE_SERVER_PROTO
              Value: https
            -
              Name: DRONE_POOL_MIN
              Value: !Ref WorkerPoolMinimum
            -
              Name: DRONE_POOL_MAX
              Value: !Ref WorkerPoolMaximum
            -
              Name: DRONE_POOL_MIN_AGE
              Value: !Ref WorkerPoolMinimumAge
            -
              Name: DRONE_CAPACITY_BUFFER
              Value: !Ref WorkerCapacityBuffer
            -
              Name: DRONE_DEBUG
              Value: true
            -
              Name: DRONE_TRACE
              Value: true

            # BEGIN: Settings for the EC2 Instances that Drone Autoscaler provisions.

            # Override the AMI that Drone Autoscaler specifies:
            # https://github.com/drone/autoscaler/blob/master/drivers/amazon/util.go
            -
              Name: DRONE_AMAZON_IMAGE
              Value: !Ref WorkerInstanceAMI
            -
              Name: DRONE_AMAZON_INSTANCE
              Value: !Ref WorkerInstanceType
            -
              Name: DRONE_AMAZON_IAM_PROFILE_ARN
              Value: !Sub "arn:aws:iam::${AWS::AccountId}:instance-profile/DroneWorker"
            -
              Name: DRONE_AMAZON_REGION
              Value: !Ref AWS::Region
            -
              Name: DRONE_AMAZON_SUBNET_ID
              Value: !Ref WorkerSubnetId
            -
              Name: DRONE_AMAZON_SECURITY_GROUP
              Value: !Ref DroneRunnerEcsSecurityGroup
            -
              Name: DRONE_AMAZON_SSHKEY
              Value: !Sub "winter-dev-${AWS::Region}"
            -
              Name: DRONE_AMAZON_VOLUME_SIZE
              Value: 50
            # END: Settings for the EC2 Instances that Drone Autoscaler provisions.

            # BEGIN: Settings for the Drone Runner ("worker"/"agent") executing on the EC2 Instances provisioned by Autoscaler.
            -
              Name: DRONE_AGENT_CONCURRENCY
              Value: 1
            # END: Settings for the Drone Runner.
  AutoscalerEcsServiceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: SecurityGroup for Drone Autoscaler ECS Service
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        -
          IpProtocol: tcp
          FromPort: 8080
          ToPort: 8080
          SourceSecurityGroupId: !Ref ElbSecurityGroup
      SecurityGroupEgress:
        - IpProtocol: -1 # Allows all protocols
          CidrIp: 0.0.0.0/0 # Allows all destinations
  DroneAutoscalerEcsService:
    Type: AWS::ECS::Service
    DependsOn: LoadBalancerListener
    Properties:
      Cluster: !Ref DroneAutoscalerECSCluster
      LaunchType: EC2
      DesiredCount: 1
      LoadBalancers:
        - ContainerName: drone-autoscaler
          ContainerPort: 8080
          TargetGroupArn: !Ref DroneAutoscalerTargetGroup
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: DISABLED
          SecurityGroups:
            - !Ref AutoscalerEcsServiceSecurityGroup
          Subnets: !Ref ServiceSubnetIds
      TaskDefinition: !Ref DroneAutoscalerTaskDefinition
      PropagateTags: SERVICE

  DroneAutoscalerECSCluster:
    Type: AWS::ECS::Cluster

  DroneAutoscalerLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: !Sub "DroneAutoscalerLaunchTemplate-${AWS::StackName}"
      LaunchTemplateData:
        IamInstanceProfile:
          Name: ecsInstanceRole
        KeyName: !Sub "winter-dev-${AWS::Region}"
        SecurityGroupIds:
          - !Ref DroneAutoscalerEcsSecurityGroup
        ImageId: !Ref AutoscalerECSAMI
        InstanceType: t3.medium
        Monitoring:
          Enabled: true
        UserData:
          Fn::Base64:
            !Sub
            - "#!/bin/bash\necho ECS_CLUSTER=${EcsClusterName} >> /etc/ecs/ecs.config;echo ECS_BACKEND_HOST= >> /etc/ecs/ecs.config;"
            - {EcsClusterName: !Ref DroneAutoscalerECSCluster}

  DroneAutoscalerEcsInstanceAsg:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier: !Ref ServiceSubnetIds
      LaunchTemplate:
        LaunchTemplateId: !Ref DroneAutoscalerLaunchTemplate
        Version: !GetAtt DroneAutoscalerLaunchTemplate.LatestVersionNumber
      MinSize: 1
      MaxSize: 1
      DesiredCapacity: 1

  DroneAutoscalerEcsSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allowed Drone Autoscaler Ports
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        -
          IpProtocol: tcp
          FromPort: 8080
          ToPort: 8080
          SourceSecurityGroupId: !Ref ElbSecurityGroup
        - IpProtocol: tcp
          FromPort: 8080
          ToPort: 8080
          CidrIp: 0.0.0.0/0
        -
          IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 3.90.82.166/32

  AutoscalerLoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref DroneMasterELB
      Port: 8443
      Protocol: HTTPS
      Certificates:
        - CertificateArn: !Ref ACMCertificate
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref DroneAutoscalerTargetGroup

  DroneAutoscalerTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub "AutoscalerTrgGp-${AWS::StackName}"
      VpcId: !Ref VpcId
      TargetType: ip
      Port: 8080
      Protocol: HTTP
      HealthCheckPath: /healthz
      Tags:
        -
          Key: Name
          Value: !Sub "ECS ${AWS::StackName} - Autoscaler TargetGroup"

  DroneRunnerEcsSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Drone Runner Allowed Ports
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        -
          Description: Enable Autoscaler to issue Docker API calls to Runner EC2 Instances.
          SourceSecurityGroupId: !GetAtt AutoscalerEcsServiceSecurityGroup.GroupId
          IpProtocol: tcp
          FromPort: 2376
          ToPort: 2376
        -
          Description: Enable SSH to Drone Runner EC2 Instances from gateway.code.org (in the production AWS Account).
          IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 3.90.82.166/32

  # -------------------------
  # Drone Bucket for Cache and Logs
  # -------------------------

  DroneBucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketName: cdo-drone

  DroneBucketFullAccessPolicy:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyName: DroneBucketFullAccessPolicy
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action: 's3:*'
            Resource:
            - !Sub 'arn:aws:s3:::${DroneBucket}'
            - !Sub 'arn:aws:s3:::${DroneBucket}/*'
            # TODO: remove references to old bucket once no longer used
            - 'arn:aws:s3:::code-dot-org'
            - 'arn:aws:s3:::code-dot-org/*'
      Roles:
        - 'DroneWorker'
        - 'DroneServer'
