#!/bin/bash -x
# UserData bootstrap script for CloudFormation stack instances.
# This script bootstraps and creates an AMI.

# Modify cloud-init to re-run this user-data script every time instance restarts.
# Ref: http://stackoverflow.com/a/10455027
sed -i 's/scripts-user$/\[scripts-user, always\]/' /etc/cloud/cloud.cfg

# Bootstrap prerequisites
apt-get update
unattended-upgrade
apt-get -y install python3-pip curl
test "$(pip3 show awscli)" || pip3 install awscli

STACK=<%=stack_name%>
CHEF_VERSION=12.7.2
REGION=<%=region%>
BRANCH=<%=branch%>
S3_BUCKET=<%=s3_bucket%>
ENVIRONMENT=<%=environment%>
RUN_LIST='<%=run_list.to_json%>'
INSTANCE_ID=$(curl -s http://169.254.169.254/latest/meta-data/instance-id)
NODE_NAME=<%=node_name%>

# Customize Chef configuration.
FIRST_BOOT=/etc/chef/first-boot.json
mkdir -p $(dirname ${FIRST_BOOT})
cat <<JSON > ${FIRST_BOOT}
{
  "cdo-repository": {
    <% if commit %>
      "revision": "<%=commit%>",
    <% end -%>
    "branch": "<%=branch%>",
    "sync": true
  },
  "cdo-secrets": {
<% if local_mode -%>
    "build_apps": true,
    "use_my_apps": true,
<% end -%>
    "stack_name": "${STACK}"
  },
<% if local_mode -%>
  "omnibus_updater": {
    "version": "${CHEF_VERSION}"
  },
<% end -%>
<% if daemon -%>
  "cdo-apps": {
    "daemon": true
  },
<% end -%>
  "run_list": ${RUN_LIST}
}
JSON

# Provision via Chef.
OPTIONS="<%=local_mode ? '-z -b ${BRANCH}' : ''%> -n ${NODE_NAME} -r '${RUN_LIST}' -e ${ENVIRONMENT}"
sudo -u ubuntu bash -c "aws s3 cp s3://${S3_BUCKET}/chef/bootstrap-${STACK}.sh - | sudo bash -s -- ${OPTIONS}"
[ $? -eq 0 ] && STATUS=SUCCESS || STATUS=FAILURE

# Workaround for version-controlled files modified by seed.
sudo -u ubuntu bash -c "cd /home/ubuntu/${ENVIRONMENT} && git reset --hard"

# Signal the "create" WaitCondition.
aws cloudformation signal-resource \
  --stack-name ${STACK} \
  --logical-resource-id <%=create_id%> \
  --unique-id ${INSTANCE_ID} \
  --status ${STATUS} \
  --region ${REGION} \
  || true

<% if shutdown -%>
shutdown -h now
<% end -%>
