---
AWSTemplateFormatVersion: 2010-09-09
Description: >-
  IAM layer including roles and access permissions for Code.org infrastructure.
  Note: Admin permissions are required to manage this stack.
Resources:
  FrontendRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: [ec2.amazonaws.com]
          Action: ['sts:AssumeRole']
      Path: /
      Policies:
      - PolicyName: instance
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action: ['s3:GetObject']
            Resource: 'arn:aws:s3:::cdo-dist/*'
          - Effect: Allow
            Action:
            - 'cloudformation:SignalResource'
            - 'cloudformation:DescribeStackResources'
            - 'autoscaling:CompleteLifecycleAction'
            - 'ec2:DescribeImages'
            - 'ec2:DescribeTags'
            - 'cloudwatch:PutMetricData'
            Resource: '*'
      - PolicyName: ServiceAccess
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action:
            - 's3:*'
            - 'dynamodb:*'
            - 'sqs:*'
            Resource: '*'
  StandaloneFrontendRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: [ec2.amazonaws.com]
          Action: ['sts:AssumeRole']
      Path: '/'
      Policies:
      - PolicyName: instance
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action: ['s3:GetObject']
            Resource: 'arn:aws:s3:::*'
          - Effect: Allow
            Action:
            - "s3:PutObject"
            - "s3:PutObjectAcl"
            Resource:
            - "arn:aws:s3:::cdo-dist/adhoc/*"
          - Effect: Allow
            Action:
            - 'cloudformation:SignalResource'
            - 'cloudformation:DescribeStackResources'
            - 'autoscaling:CompleteLifecycleAction'
            - 'ec2:DescribeImages'
            - 'logs:Create*'
            - 'logs:PutLogEvents'
            - 'logs:PutRetentionPolicy'
            - 'cloudwatch:PutMetricData'
            Resource: '*'
          - Effect: Allow
            Action:
            - 'dynamodb:*'
            Resource:
            - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/adhoc_tables"
            - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/adhoc_properties"
  StandaloneRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal: {Service: [ec2.amazonaws.com]}
          Action: ['sts:AssumeRole']
      Path: /
      Policies:
      - PolicyName: instance
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action: ['s3:GetObject']
            Resource: 'arn:aws:s3:::*'
          - Effect: Allow
            Action:
            - "cloudformation:*"
            Resource: !Sub "arn:aws:cloudformation:${AWS::Region}:${AWS::AccountId}:stack/adhoc-*"
          - Effect: Allow
            Action:
            - "cloudformation:ValidateTemplate"
            - "autoscaling:CompleteLifecycleAction"
            - "ec2:DescribeImages"
            - "logs:Create*"
            - "logs:PutLogEvents"
            - "logs:PutRetentionPolicy"
            - "cloudwatch:PutMetricData"
            - "acm:ListCertificates"
            Resource: "*"
          - Effect: Allow
            Action: ["dynamodb:*"]
            Resource:
            - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/adhoc_tables"
            - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/adhoc_properties"
          - Effect: Allow
            Action:
            - "s3:PutObject"
            - "s3:PutObjectAcl"
            - "s3:PutObjectVersionAcl"
            Resource:
            - "arn:aws:s3:::cdo-dist/adhoc/*"
            - "arn:aws:s3:::cdo-build-logs/*"
            - "arn:aws:s3:::<%=TEMP_BUCKET%>/*"
  DaemonRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: [ec2.amazonaws.com]
          Action: ['sts:AssumeRole']
      Path: /
      Policies:
      - PolicyName: Daemon
        PolicyDocument:
          Statement:
          - Effect: Allow
            NotAction: ['iam:*', 'organizations:*']
            Resource: '*'
          - Effect: Allow
            Action:
            - 'iam:GetServerCertificate'
            Resource: '*'
  FrontendInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: '/'
      Roles: [!Ref FrontendRole]
  StandaloneInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles: [!Ref StandaloneRole]
  StandaloneFrontendInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: '/'
      Roles: [!Ref StandaloneFrontendRole]
  ProductionInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: '/'
      Roles: [!Ref DaemonRole]
  StagingInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: '/'
      Roles: [!Ref DaemonRole]
  LifecycleHookRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: [autoscaling.amazonaws.com]
          Action: ['sts:AssumeRole']
      Path: '/'
      Policies:
      - PolicyName: root
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action: ['sns:Publish']
            Resource: '*'
  FirehoseLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: ['sts:AssumeRole']
            Effect: Allow
            Principal: {Service: [lambda.amazonaws.com]}
      Path: /
      Policies:
      - PolicyName: root
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action:
            - 'firehose:DescribeDeliveryStream'
            - 'firehose:PutRecord'
            - 'firehose:PutRecordBatch'
            Resource:
            # TODO provide this ARN through a CloudFormation stack output resource reference.
            - !Sub "arn:aws:firehose:${AWS::Region}:${AWS::AccountId}:deliverystream/analysis-events"
      ManagedPolicyArns:
      - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
  CloudFormationRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: CloudFormationRole
      AssumeRolePolicyDocument:
        Statement:
          - Action: ['sts:AssumeRole']
            Effect: Allow
            Principal: {Service: [cloudformation.amazonaws.com]}
      Path: /
      Policies:
      - PolicyName: passRole
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action:
            - 'iam:PassRole'
            Resource: '*'
      ManagedPolicyArns:
      - "arn:aws:iam::aws:policy/PowerUserAccess"
Outputs:
  FrontendInstanceProfile:
    Description: Frontend Instance Profile
    Value: !Ref FrontendInstanceProfile
    Export: {Name: !Sub "${AWS::StackName}-FrontendInstanceProfile"}
  StandaloneFrontendInstanceProfile:
    Description: Standalone Frontend Instance Profile
    Value: !Ref StandaloneFrontendInstanceProfile
    Export: {Name: !Sub "${AWS::StackName}-StandaloneFrontendInstanceProfile"}
  StandaloneInstanceProfile:
    Description: Standalone Instance Profile
    Value: !Ref StandaloneInstanceProfile
    Export: {Name: !Sub "${AWS::StackName}-StandaloneInstanceProfile"}
  StagingInstanceProfile:
    Description: Staging Instance Profile
    Value: !Ref StagingInstanceProfile
    Export: {Name: !Sub "${AWS::StackName}-StagingInstanceProfile"}
  LifecycleHookRoleARN:
    Description: Auto Scaling Lifecycle Hook Role
    Value: !GetAtt LifecycleHookRole.Arn
    Export: {Name: !Sub "${AWS::StackName}-LifecycleHookRoleARN"}
  FirehoseLambdaRoleARN:
    Description: Firehose Lambda Role ARN
    Value: !GetAtt FirehoseLambdaRole.Arn
    Export: {Name: !Sub "${AWS::StackName}-FirehoseLambdaRoleARN"}
