---
AWSTemplateFormatVersion: 2010-09-09
Description: >-
  IAM layer including global/shared roles and access permissions for Code.org infrastructure.
  Note: Admin permissions are required to manage some admin-only resources in this stack.
Parameters:
  # Google ID parameters are defined in this template, use String placeholder during initial stack creation.
  DeveloperGoogleIDs:
    Type: AWS::SSM::Parameter::Value<List<String>>
    Default: /IAM/GoogleDeveloperIDs
    Description: SSM Parameter with a list of Google ID's for users granted Developer access.
  ContributorGoogleIDs:
    Type: AWS::SSM::Parameter::Value<List<String>>
    Default: /IAM/GoogleContributorIDs
    Description: SSM Parameter with a list of Google ID's for users granted Contributor access.
  BillingGoogleIDs:
    Type: AWS::SSM::Parameter::Value<List<String>>
    Default: /IAM/GoogleBillingIDs
    Description: SSM Parameter with a list of Google ID's for users granted Billing access.
Resources:
  # Admin Service Role for managing all resources in CloudFormation stacks.
  # Only admins can update stacks using this service role.
  CloudFormationAdmin:
    Type: AWS::IAM::Role
    Properties:
      RoleName: CloudFormationAdmin
      <%=service_role 'cloudformation'%>
      Path: /admin/
      ManagedPolicyArns: ['arn:aws:iam::aws:policy/AdministratorAccess']
  # Shared CloudFormation Service Role used by all stacks.
  CloudFormationService:
    Type: AWS::IAM::Role
    Properties:
      RoleName: CloudFormationService
      <%=service_role 'cloudformation'%>
      Path: /admin/
      Policies:
        # Grant permissions for managing specific non-admin AWS::IAM resources.
        - PolicyName: RolePermissionsBoundary
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  # AWS::IAM::ManagedPolicy
                  - iam:CreatePolicy
                  - iam:CreatePolicyVersion
                  - iam:DeletePolicy
                  - iam:DeletePolicyVersion
                NotResource: !Sub "arn:aws:iam::${AWS::AccountId}:role/admin/*"
              - Effect: Allow
                Action:
                  # AWS::IAM::InstanceProfile
                  - iam:CreateInstanceProfile
                  - iam:AddRoleToInstanceProfile
                  - iam:RemoveRoleFromInstanceProfile
                  - iam:DeleteInstanceProfile
                NotResource: !Sub "arn:aws:iam::${AWS::AccountId}:instance-profile/admin/*"
              - Effect: Allow
                Action:
                  - iam:DeleteRole
                  - iam:UpdateAssumeRolePolicy
                NotResource: !Sub "arn:aws:iam::${AWS::AccountId}:role/admin/*"
              - Effect: Allow
                Action:
                  # AWS::IAM::Role
                  - iam:CreateRole
                  - iam:PutRolePermissionsBoundary
                  # Managed policies attached to a Role
                  - iam:AttachRolePolicy
                  - iam:DetachRolePolicy
                  # Inline policies embedded in a Role
                  - iam:PutRolePolicy
                  - iam:DeleteRolePolicy
                NotResource: !Sub "arn:aws:iam::${AWS::AccountId}:role/admin/*"
                # Require DevPermissions boundary on all Roles, e.g.:
                # PermissionsBoundary: !ImportValue IAM-DevPermissions
                Condition:
                  StringEquals:
                    iam:PermissionsBoundary: !Ref DevPermissions
        # Permissions for managing AWS::SecretsManager::Secret resources.
        - PolicyName: SecretPermissions
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: secretsmanager:*
                Resource: '*'
      ManagedPolicyArns: [!Ref DevPermissions]
  # Shared 'Developer' permissions.
  # Used as default permissions for all developer Roles,
  # and as a required permissions boundary for CloudFormation-managed resources.
  DevPermissions:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      ManagedPolicyName: DevPermissions
      Path: /admin/
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            NotAction:
              - iam:*
              - organizations:*
              - secretsmanager:*
            Resource: '*'
          - Sid: IAMReadOnlyAccess
            Effect: Allow
            Action:
              - iam:GenerateCredentialReport
              - iam:GenerateServiceLastAccessedDetails
              - iam:Get*
              - iam:List*
              - iam:SimulateCustomPolicy
              - iam:SimulatePrincipalPolicy
            Resource: '*'
          - Effect: Allow
            Action: iam:PassRole
            Resource: '*'
          # Require CloudFormation Service Role on all stack operations.
          - Effect: Deny
            Action:
              - cloudformation:CreateStack
              - cloudformation:UpdateStack
              - cloudformation:DeleteStack
              - cloudformation:CreateChangeSet
            NotResource: "arn:aws:cloudformation:*:aws:transform/Serverless-2016-10-31"
            Condition:
              StringNotEquals:
                cloudformation:RoleARN: !Sub "arn:aws:iam::${AWS::AccountId}:role/admin/CloudFormationService"
          # Read-only access to secrets.
          - Effect: Allow
            Action: secretsmanager:GetSecretValue
            Resource: '*'
  # Permissions which grant the CurriculumBuilder project read-only acces to
  # the DCDO database, so select configuration variables can be shared between
  # the two projects.
  CurriculumBuilderDCDO:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      ManagedPolicyName: CurriculumBuilderDCDO
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - dynamodb:GetItem
            Resource: !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/dcdo_production"

# TODO: Migrate to Engineering_FullAccess
  Developer:
    Type: AWS::IAM::Role
    Properties:
      RoleName: Developer
      Path: /admin/
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
        - Effect: Allow
          Principal: {Federated: !Sub "arn:aws:iam::${AWS::AccountId}:saml-provider/Google"}
          Action: sts:AssumeRoleWithSAML
          Condition:
            StringEquals:
              SAML:aud: https://signin.aws.amazon.com/saml
        - Effect: Allow
          Principal: {Federated: accounts.google.com}
          Action: sts:AssumeRoleWithWebIdentity
          Condition:
            StringEquals:
              accounts.google.com:aud: '{{resolve:secretsmanager:admin/google_client_id}}'
            ForAnyValue:StringEquals:
              accounts.google.com:sub: !Ref DeveloperGoogleIDs
        - Effect: Allow
          Principal: {Service: ec2.amazonaws.com}
          Action: sts:AssumeRole
      Policies:
      # Only allow developers to create/update stacks in specific environments.
      - PolicyName: ProtectedStacks
        PolicyDocument:
          Statement:
          - Effect: Deny
            Action:
            - cloudformation:CreateStack
            - cloudformation:UpdateStack
            - cloudformation:DeleteStack
            - cloudformation:ExecuteChangeSet
            Resource: '*'
            Condition:
              ForAnyValue:StringNotEquals:
                aws:ResourceTag/environment: [adhoc, development]
              ForAnyValue:StringEquals:
                aws:TagKeys: environment
      # Don't allow developers to view/delete secrets in non-development environments.
      - PolicyName: SecretsAccess
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action: secretsmanager:*
            Resource: '*'
          - Effect: Deny
            Action:
            - secretsmanager:GetSecretValue
            - secretsmanager:DeleteSecret
            NotResource: !Sub "arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:development/*"
      # Deny all access to /admin logs.
      - PolicyName: DenyAdminLogs
        PolicyDocument:
          Statement:
          - Effect: Deny
            Action: logs:*
            Resource: !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/admin/*'
      ManagedPolicyArns: [!Ref DevPermissions]
      Tags:
        - Key: sqlworkbench-team
          Value: codedotorg

# TODO: Migrate to REDTeam_Analyst
  DataAnalystRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: DataAnalyst
      Path: /dataanalyst/
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal: {Federated: !Sub "arn:aws:iam::${AWS::AccountId}:saml-provider/Google"}
            Action: sts:AssumeRoleWithSAML
            Condition:
              StringEquals:
                SAML:aud: https://signin.aws.amazon.com/saml
      ManagedPolicyArns:
        - !Ref DataAnalystPolicy
        - !Ref DataAnalystDmsReadOnlyPolicy
        - !Ref DataAnalystRedshiftPolicy
        - arn:aws:iam::aws:policy/AmazonRedshiftQueryEditor
        - arn:aws:iam::aws:policy/AmazonRedshiftQueryEditorV2FullAccess
      Tags:
        - Key: sqlworkbench-team
          Value: codedotorg

# TODO: Migrate to Billing_ReadOnly
  BillingRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: Billing
      Description: Google-federated AWS Role for finance, granting limited access to the Billing console.
      Path: /admin/
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal: {Federated: !Sub "arn:aws:iam::${AWS::AccountId}:saml-provider/Google"}
            Action: sts:AssumeRoleWithSAML
            Condition:
              StringEquals:
                SAML:aud: https://signin.aws.amazon.com/saml
          - Effect: Allow
            Principal: {Federated: accounts.google.com}
            Action: sts:AssumeRoleWithWebIdentity
            Condition:
              StringEquals:
                accounts.google.com:aud: '{{resolve:secretsmanager:admin/google_client_id}}'
              ForAnyValue:StringEquals:
                accounts.google.com:sub: !Ref BillingGoogleIDs
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AWSBillingReadOnlyAccess

# Console & CLI Roles
# The term 'FullAccess' means the role has the highest access for it's type, not
# full access to all resources. It's in comparison to similar 'ReadOnly' roles.

<%
roles = {
  EngineeringReadOnlyRole: {
    RoleName: 'Engineering_ReadOnly',
    GoogleIdsSSMParameter: 'DeveloperGoogleIDs',
    ManagedPolicyArns: [
      'arn:aws:iam::aws:policy/ReadOnlyAccess',
      '!Ref EngineerSecretsPolicy',
      '!Ref AthenaCloudwatchLogsQueryPolicy',
    ]
  },
  EngineeringFullAccessRole: {
    RoleName: 'Engineering_FullAccess',
    GoogleIdsSSMParameter: 'DeveloperGoogleIDs',
    ManagedPolicyArns: [
      'arn:aws:iam::aws:policy/PowerUserAccess',
      'arn:aws:iam::aws:policy/IAMReadOnlyAccess',
      '!Ref EngineerSecretsPolicy',
      '!Ref CloudformationPassRolePolicy',
    ]
  },
  EngineeringContributorRole: {
    RoleName: 'Engineering_Contributor',
    GoogleIdsSSMParameter: 'ContributorGoogleIDs',
    ManagedPolicyArns: [
      '!Ref ContributorS3Policy',
      '!Ref ContributorSecretsPolicy',
      'arn:aws:iam::aws:policy/CloudFrontReadOnlyAccess'
    ]
  },
  TempS3LessEngineerRole: {
    RoleName: 'Temp_S3less_Engineer',
    GoogleIdsSSMParameter: 'DeveloperGoogleIDs',
    ManagedPolicyArns: [
      'arn:aws:iam::aws:policy/PowerUserAccess',
      'arn:aws:iam::aws:policy/IAMReadOnlyAccess',
      '!Ref NoS3ForYouPolicy',
    ]
  },
  EngineeringMusicLabContributorRole: {
    RoleName: 'Engineering_MusicLabContributor',
    ManagedPolicyArns: [
      '!Ref MusicLabS3ReadWritePolicy',
    ]
  },
  DataAnalyticsFullAccessRole: {
    RoleName: 'DataAnalytics_FullAccess',
    ManagedPolicyArns: [
      '!Ref DataAnalystPolicy',
      '!Ref DataAnalystDmsReadOnlyPolicy',
      '!Ref DataAnalystRedshiftPolicy',
      'arn:aws:iam::aws:policy/AmazonRedshiftQueryEditor',
      'arn:aws:iam::aws:policy/AmazonRedshiftQueryEditorV2FullAccess',
    ]
  },
  MarketingReadOnlyRole: {
    RoleName: 'Marketing_ReadOnly',
    ManagedPolicyArns: [
      'arn:aws:iam::aws:policy/ReadOnlyAccess',
      '!Ref AthenaCloudwatchLogsQueryPolicy',
    ]
  },
  BillingReadOnlyRole: {
    RoleName: 'Billing_ReadOnly',
    GoogleIdsSSMParameter: 'BillingGoogleIDs',
    ManagedPolicyArns: [
      'arn:aws:iam::aws:policy/AWSBillingReadOnlyAccess',
    ]
  },
  ProductManagerFullAccessRole: {
    RoleName: 'ProductManager_FullAccess',
    GoogleIdsSSMParameter: 'ProductGoogleIDs',
    ManagedPolicyArns: [
      'arn:aws:iam::aws:policy/AWSBillingReadOnlyAccess'
      '!Ref BedrockKnowledgeBaseInvocationPolicy',
      '!Ref CloudwatchDashboardViewerPolicy',
    ]
  }
}
roles.each do |name, config| %>
  <%= name %>:
    Type: AWS::IAM::Role
    Properties:
      RoleName: <%= config[:RoleName] %>
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal: {Federated: !Sub "arn:aws:iam::${AWS::AccountId}:saml-provider/Google"}
            Action: sts:AssumeRoleWithSAML
            Condition:
              StringEquals:
                SAML:aud: https://signin.aws.amazon.com/saml
          <%- if config[:GoogleIdsSSMParameter] -%>
          - Effect: Allow
            Principal: {Federated: accounts.google.com}
            Action: sts:AssumeRoleWithWebIdentity
            Condition:
              StringEquals:
                accounts.google.com:aud: '{{resolve:secretsmanager:admin/google_client_id}}'
              ForAnyValue:StringEquals:
                accounts.google.com:sub: !Ref <%= config[:GoogleIdsSSMParameter] %>
          <%- end -%>
      ManagedPolicyArns:
        <%- config[:ManagedPolicyArns].each do |arn| -%>
        - <%=arn%>
        <%- end -%>
      Policies:
        - PolicyName: "DenyAdminLogs"
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Deny
                Action: logs:*
                Resource: !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/admin/*'
      Tags:
        - Key: sqlworkbench-team
          Value: codedotorg
<%- end -%>
 
  CloudformationPassRolePolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      ManagedPolicyName: CloudformationPassRolePolicy
      Path: /admin/
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action: iam:PassRole
            Resource: '*'
            Condition:
              StringEquals:
                iam:PassedToService: cloudformation.amazonaws.com
          # Require CloudFormation Service Role on all stack operations.
          - Effect: Deny
            Action:
              - cloudformation:CreateStack
              - cloudformation:UpdateStack
              - cloudformation:DeleteStack
              - cloudformation:CreateChangeSet
            NotResource: "arn:aws:cloudformation:*:aws:transform/Serverless-2016-10-31"
            Condition:
              StringNotEquals:
                cloudformation:RoleARN: !Sub "arn:aws:iam::${AWS::AccountId}:role/admin/CloudFormationService"

  NoS3ForYouPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      ManagedPolicyName: NoS3ForYouPolicy
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Deny
            Action:
              - s3:*
            Resource: '*'

  DataAnalystPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      ManagedPolicyName: DataAnalystPolicy
      Path: /dataanalyst/
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: DataAnalystTools
            Effect: Allow
            Action:
              - 's3:ListAllMyBuckets'
              - 'cloudwatch:GetMetricData'
            Resource: '*'
          - Sid: DataAnalystS3ImportExportBucket
            Effect: Allow
            Action:
              - 's3:*'
            Resource:
              - 'arn:aws:s3:::cdo-data-sharing-internal/*'
              - 'arn:aws:s3:::cdo-data-sharing-internal'
              - 'arn:aws:s3:::cdo-census/*'
              - 'arn:aws:s3:::cdo-census'
              - 'arn:aws:s3:::cdo-nces/*'
              - 'arn:aws:s3:::cdo-nces'

  DataAnalystDmsReadOnlyPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      ManagedPolicyName: DataAnalystDmsReadOnlyPolicy
      Path: /dataanalyst/
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - 'dms:DescribeOrderableReplicationInstances'
              - 'dms:ListTagsForResource'
              - 'dms:DescribeEndpointSettings'
              - 'dms:DescribeConnections'
              - 'dms:DescribeReplicationInstances'
              - 'dms:DescribeApplicableIndividualAssessments'
              - 'dms:TestConnection'
              - 'dms:DescribeEndpoints'
              - 'dms:DescribeReplicationInstanceTaskLogs'
              - 'dms:DescribeSchemas'
              - 'dms:DescribeReplicationSubnetGroups'
              - 'dms:DescribeReplicationTasks'
              - 'dms:DescribeReplicationTaskAssessmentResults'
              - 'dms:DescribeAccountAttributes'
              - 'dms:DescribeRefreshSchemasStatus'
              - 'dms:DescribeReplicationTaskIndividualAssessments'
              - 'dms:DescribeCertificates'
              - 'dms:DescribeEvents'
              - 'dms:DescribeEventSubscriptions'
              - 'dms:DescribeEndpointTypes'
              - 'dms:DescribeEventCategories'
              - 'dms:DescribeReplicationTaskAssessmentRuns'
              - 'dms:DescribeTableStatistics'
            Resource: "*"

  DataAnalystRedshiftPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      ManagedPolicyName: DataAnalystRedshiftPolicy
      Path: /dataanalyst/
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: DataAnalystTools
            Effect: Allow
            Action:
              - 'redshift:DescribeReservedNodes'
              - 'redshift:DescribeEvents'
              - 'redshift:DescribeUsageLimits'
              - 'redshift:DescribeClusterDbRevisions'
              - 'redshift:DescribeClusterSnapshots'
              - 'redshift:DescribeClusterSubnetGroups'
              - 'redshift:ViewQueriesInConsole'
              - 'redshift:ViewQueriesFromConsole'
              - 'events:ListRules'
            Resource: '*'

  GoogleContributorIDs:
    Type: AWS::SSM::Parameter
    Properties:
      Name: /IAM/GoogleContributorIDs
      Type: StringList
      Value: initial,value
      Description: List of Google IDs of people being granted contributor access.
  
  ContributorS3Policy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      ManagedPolicyName: ContributorS3Policy
      Path: /engineering/
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: AllowUserToSeeBucketList
            Effect: Allow
            Action:
              - s3:ListAllMyBuckets
              - s3:GetBucketLocation
            Resource:
              - arn:aws:s3:::*
          - Sid: AllowListingCertainBucketsObjects
            Effect: Allow
            Action:
              - s3:ListBucket
              - s3:ListBucketVersions
            Resource:
              - arn:aws:s3:::cdo-v3-sources
              - arn:aws:s3:::cdo-v3-assets
              - arn:aws:s3:::cdo-v3-animations
              - arn:aws:s3:::cdo-v3-files
              - arn:aws:s3:::cdo-ai
            Condition:
              StringLike: {
                "s3:prefix": [
                    "",
                    "sources_development/*",
                    "assets_development/*",
                    "animations_development/*",
                    "files_development/*",
                    "teaching_assistant/*"
                ]
              }
          - Sid: AllowNeededS3ActionsInCertainBucketFolders
            Effect: Allow
            Action:
              - s3:AbortMultipartUpload
              - s3:DeleteObject
              - s3:DeleteObjectTagging
              - s3:DeleteObjectVersion
              - s3:DeleteObjectVersionTagging
              - s3:GetObject
              - s3:GetObjectAcl
              - s3:GetObjectTagging
              - s3:GetObjectTorrent
              - s3:GetObjectVersion
              - s3:GetObjectVersionAcl
              - s3:GetObjectVersionForReplication
              - s3:GetObjectVersionTagging
              - s3:GetObjectVersionTorrent
              - s3:PutObject
              - s3:PutObjectTagging
              - s3:PutObjectVersionTagging
              - s3:RestoreObject
            Resource:
              - arn:aws:s3:::cdo-v3-sources/sources_development/*
              - arn:aws:s3:::cdo-v3-assets/assets_development/*
              - arn:aws:s3:::cdo-v3-animations/animations_development/*
              - arn:aws:s3:::cdo-v3-files/files_development/*
              - arn:aws:s3:::cdo-ai/teaching_assistant/*
          - Sid: AllowListingToLibraryBuckets
            Effect: Allow
            Action:
              - s3:ListBucket
              - s3:ListBucketVersions
            Resource:
              - arn:aws:s3:::cdo-animation-library
              - arn:aws:s3:::cdo-sound-library
          - Sid: AllowReadOnlyToLibraryBuckets
            Effect: Allow
            Action:
              - s3:GetObject
              - s3:GetObjectAcl
              - s3:GetObjectTagging
              - s3:GetObjectVersion
              - s3:GetObjectVersionAcl
              - s3:GetObjectVersionTagging
            Resource:
              - arn:aws:s3:::cdo-animation-library/*
              - arn:aws:s3:::cdo-sound-library/*

  EngineerSecretsPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      ManagedPolicyName: EngineerSecretsPolicy
      Path: /engineering/
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Deny
            Action:
              - secretsmanager:GetSecretValue
              - secretsmanager:DeleteSecret
            Resource:
              - !Sub arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:production/cdo/*
              - !Sub arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:levelbuilder/cdo/*
              - !Sub arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:test/cdo/*
              - !Sub arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:CfnStack/*
          - Effect: Allow
            Action: secretsmanager:GetSecretValue
            Resource:
              - !Sub arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:development/cdo/*
              - !Sub arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:adhoc/cdo/*

  ContributorSecretsPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      ManagedPolicyName: ContributorSecretsPolicy
      Path: /engineering/
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action: secretsmanager:GetSecretValue
            Resource:
              - !Sub arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:development/cdo/properties_encryption_key-KUJqKF
              - !Sub arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:development/cdo/firebase_secret-ngO5yy

  MusicLabS3ReadWritePolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      ManagedPolicyName: MusicLabS3ReadWritePolicy
      Path: /engineering/
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - s3:ListAllMyBuckets
            Resource: '*'
          - Effect: 'Allow'
            Action:
              - s3:ListBucket
              - s3:GetBucketLocation
              - s3:GetBucketPublicAccessBlock
              - s3:GetBucketPolicyStatus
              - s3:GetBucketAcl
              - s3:ListAccessPoints
            Resource:
              - arn:aws:s3:::cdo-curriculum
          - Effect: Allow
            Action:
              - s3:AbortMultipartUpload
              - s3:DeleteObject
              - s3:DeleteObjectVersion
              - s3:GetObject
              - s3:GetObjectAcl
              - s3:GetObjectVersion
              - s3:GetObjectVersionAcl
              - s3:PutObject
              - s3:PutObjectAcl
              - s3:PutObjectVersionAcl
            Resource:
              - arn:aws:s3:::cdo-curriculum/media/musiclab/*

  GoogleBillingIDs:
    Type: AWS::SSM::Parameter
    Properties:
      Name: /IAM/GoogleBillingIDs
      Type: StringList
      Value: initial,value
      Description: List of Google IDs of people being granted billing access.

  AthenaCloudwatchLogsQueryPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      ManagedPolicyName: AthenaCloudwatchLogsQueryPolicy
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - athena:StartQueryExecution
              - athena:GetQueryExecution
            Resource: !Sub "arn:aws:athena:${AWS::Region}:${AWS::AccountId}:workgroup/primary"
          - Effect: Allow
            Action:
              - s3:GetObject
              - s3:PutObject
              - s3:ListBucket
            Resource: 
              - !Sub "arn:aws:s3:::aws-athena-query-results-${AWS::AccountId}-${AWS::Region}/*"
              - !Sub "arn:aws:s3:::aws-athena-query-results-${AWS::AccountId}-${AWS::Region}"
  
  ProductGoogleIDs:
    Type: AWS::SSM::Parameter
    Properties:
      Name: /IAM/ProductGoogleIDs
      Type: StringList
      Value: initial,value
      Description: List of Google IDs of people being granted product access.
  
  BedrockKnowledgeBaseInvocationPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      ManagedPolicyName: BedrockKnowledgeBaseInvocationPolicy
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - bedrock:InvokeModel
              - bedrock:Retrieve
              - bedrock:RetrieveAndGenerate
            Resource:
              - !Sub 'arn:aws:bedrock:${AWS::Region}:${AWS::AccountId}:knowledge-base/*'

  CloudwatchDashboardViewerPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      ManagedPolicyName: CloudwatchDashboardViewerPolicy
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - cloudwatch:GetDashboard
              - cloudwatch:ListDashboards
              - cloudwatch:GetMetricData
            Resource: '*'

  # Used by FirehoseMicroservice Lambda function.
  # TODO move to Data stack
  FirehoseLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: ['sts:AssumeRole']
            Effect: Allow
            Principal: {Service: [lambda.amazonaws.com]}
      Path: /
      Policies:
      - PolicyName: root
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action:
            - 'firehose:DescribeDeliveryStream'
            - 'firehose:PutRecord'
            - 'firehose:PutRecordBatch'
            Resource:
            # TODO provide this ARN through a CloudFormation stack output resource reference.
            - !Sub "arn:aws:firehose:${AWS::Region}:${AWS::AccountId}:deliverystream/analysis-events"
      ManagedPolicyArns:
      - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
  # Percona Monitoring and Management RDS access role.
  # See: https://www.percona.com/doc/percona-monitoring-and-management/amazon-rds.html#creating-a-policy
  # TODO: Move to Data stack
  PMMRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: [ec2.amazonaws.com, ecs-tasks.amazonaws.com]
            Action: ['sts:AssumeRole']
      Policies:
        - PolicyName: PMMRolePolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Sid: Stmt1508404837000
                Effect: Allow
                Action:
                  - 'rds:DescribeDBInstances'
                  - 'cloudwatch:GetMetricStatistics'
                  - 'cloudwatch:ListMetrics'
                Resource: '*'
              - Sid: Stmt1508410723001
                Effect: Allow
                Action:
                  - 'logs:DescribeLogStreams'
                  - 'logs:GetLogEvents'
                  - 'logs:FilterLogEvents'
                Resource:
                  - "arn:aws:logs:*:*:log-group:RDSOSMetrics:*"
  # TODO: Move to Data stack
  PMMInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      InstanceProfileName: Percona-Monitoring-Management
      Path: '/'
      Roles: [!Ref PMMRole]
  # Global managed-policy named role used by ECS.
  # Ref: https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task_execution_IAM_role.html
  EcsTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: ecsTaskExecutionRole
      AssumeRolePolicyDocument:
        Statement:
          - Action: 'sts:AssumeRole'
            Effect: Allow
            Principal: {Service: ecs-tasks.amazonaws.com}
      Path: /
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy'
  # TODO: Move this to gen_ai_curriculum.yml.erb
  # Execution role for GenAI Sagemaker Models
  SagemakerModelExecutionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: SagemakerModelExecutionRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: sagemaker.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/AmazonSageMakerFullAccess'
  SessionPermissions:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Description: Allows opening Session Manager sessions and writing to the audit log.
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: DescribeLogs
            Effect: Allow
            Action: logs:DescribeLogGroups
            Resource: '*'
          - Sid: PublishAuditEvents
            Effect: Allow
            Action:
              - logs:PutLogEvents
              - logs:DescribeLogStreams
              - logs:CreateLogStream
            Resource:
              !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/admin/auditlogs:log-stream:*"
          - Sid: AllowSession
            Effect: Allow
            Action:
              - ssmmessages:CreateControlChannel
              - ssmmessages:CreateDataChannel
              - ssmmessages:OpenControlChannel
              - ssmmessages:OpenDataChannel
              - ssm:UpdateInstanceInformation
            Resource: '*'
  # Manually creating Service Linked Roles rather than granting CloudFormationService role permission
  LambdaReplicatorRole:
    Type: AWS::IAM::ServiceLinkedRole
    Properties: 
      AWSServiceName: replicator.lambda.amazonaws.com
  CloudfrontLoggerRole:
    Type: AWS::IAM::ServiceLinkedRole
    Properties: 
      AWSServiceName: logger.cloudfront.amazonaws.com
Outputs:
  DevPermissions:
    Description: Developer Permissions
    Value: !Ref DevPermissions
    Export: {Name: !Sub "${AWS::StackName}-DevPermissions"}
  FirehoseLambdaRoleARN:
    Description: Firehose Lambda Role ARN
    Value: !GetAtt FirehoseLambdaRole.Arn
    Export: {Name: !Sub "${AWS::StackName}-FirehoseLambdaRoleARN"}
  PerconaMonitoringRoleARN:
    Description: Percona Monitoring Role ARN
    Value: !GetAtt PMMRole.Arn
    Export: {Name: !Sub "${AWS::StackName}-PerconaMonitoringRoleARN"}
  SessionPermissions:
    Description: Session Permissions
    Value: !Ref SessionPermissions
    Export: {Name: !Sub "${AWS::StackName}-SessionPermissions"}
  SagemakerModelExecutionRoleARN:
    Description: Execution Role for GenAI Sagemaker Models
    Value: !GetAtt SagemakerModelExecutionRole.Arn
    Export: {Name: !Sub "${AWS::StackName}-SagemakerExecutionRoleARN"}
