# Resources used for monitoring and alerting on issues
#
# Requires ADMIN=1 to deploy IAM resources.
# Also requires specifying parameters via
# environment variables or locals.yml for the
# initial stack creation.

---
Description: Resources used for monitoring and alerting on infrastructure issues.

Parameters:
  HoneybadgerApiKey:
    Type: String
    NoEcho: true
  OffsiteAwsAccountID:
    Type: String
    NoEcho: true

Resources:

  # ---------------------------------------------
  # Creates a SNS topic and Lambda which publish
  # events to Honeybadger. This allows for any
  # Cloudwatch Alarm to specify the
  # HoneybadgerSNSTopic as the notification
  # action to integrate with Honeybadger.
  # ---------------------------------------------

  HoneybadgerLambda:
    Type: AWS::Lambda::Function
    Properties:
      Description: 'Publish an SNS notification to Honeybadger.'
      FunctionName: HoneybadgerNotify
      Code: <%=js_zip ['honeybadgerNotify.js']%>
      Environment:
        Variables:
          HONEYBADGER_API_KEY: !Ref HoneybadgerApiKey
      Handler: honeybadgerNotify.handler
      Runtime: nodejs10.x
      Timeout: 30
      Role: !GetAtt BasicLambdaRole.Arn

  BasicLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: ['sts:AssumeRole']
            Effect: Allow
            Principal: {Service: [lambda.amazonaws.com]}
      Path: /
      ManagedPolicyArns:
      - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"

  SNSInvokeLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt HoneybadgerLambda.Arn
      Action: 'lambda:InvokeFunction'
      Principal: sns.amazonaws.com
      SourceArn: !Ref HoneybadgerSNSTopic

  HoneybadgerSNSTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: HoneybadgerNotify
      Subscription:
        - Endpoint: !GetAtt HoneybadgerLambda.Arn
          Protocol: lambda

  HoneybadgerSNSTopicPolicy:
    Type: AWS::SNS::TopicPolicy
    Properties:
      PolicyDocument:
        Id: HoneybadgerSNSTopicPolicy
        Version: '2012-10-17'
        Statement:
        # This is the default access policy
        - Sid: __default_statement_ID
          Effect: Allow
          Principal:
            AWS: "*"
          Action:
            - sns:GetTopicAttributes
            - sns:SetTopicAttributes
            - sns:AddPermission
            - sns:RemovePermission
            - sns:DeleteTopic
            - sns:Subscribe
            - sns:ListSubscriptionsByTopic
            - sns:Publish
            - sns:Receive
          Resource: !Ref HoneybadgerSNSTopic
          Condition:
            StringEquals:
              AWS:SourceOwner: !Ref AWS::AccountId
        - Sid: AllowOffsiteAccountToPublish
          Effect: Allow
          Principal:
            AWS: "*"
          Action: sns:Publish
          Resource: !Ref HoneybadgerSNSTopic
          Condition:
            StringEquals:
              AWS:SourceOwner: !Ref OffsiteAwsAccountID
      Topics:
      - !Ref HoneybadgerSNSTopic

  # ---------------------------------------------
  # Team Alerting SNS Topics
  # 
  # Note: When we specify a TopicName, we can't
  # perform an update that causes the resource to
  # be replaced. If you must replace it, specify
  # a new name or delete the topic first.
  # 
  # Unmanaged topics that could be migrated here:
  #   - CDO-LowPriority
  #   - CDO-WorkdayUrgent
  #   - CDO-Urgent
  #
  # ---------------------------------------------

  InfraLowPriorityTopic:
    Type: 'AWS::SNS::Topic'
    TopicName: Infra-LowPriority

  InfraWorkdayUrgentTopic:
    Type: 'AWS::SNS::Topic'
    TopicName: Infra-WorkdayUrgent

  InfraUrgentTopic:
    Type: 'AWS::SNS::Topic'
    TopicName: Infra-Urgent
