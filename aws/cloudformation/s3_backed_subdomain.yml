---
AWSTemplateFormatVersion: 2010-09-09
Description: Basic template for provisioning subdomains which serve content from S3 via CloudFront.

# We need three distinct components for this functionality.
#
# 1. Route53 record mapping subdomain to CloudFront distribution (ie,
#    tts.code.org)
# 2. CloudFront distribution with the domain of the S3 Bucket as origin (ie,
#    cdo-tts.s3.amazonaws.com)
# 3. S3 Bucket with a BucketPolicy which grants global read access (ie, cdo-tts)
#
# Notes:
# - The resources provisioned by this template are not environment-specific;
#   each subdomain should be provisioned once and then used by all environments,
#   including test and development.
# - Changes to this template are not automatically applied by our Continuous
#   Integration / Deployment process, and will need to be manually applied to
#   each stack that's using it.
#
# Known stacks using this template:
# - s3-backed-subdomain-dsco
# - s3-backed-subdomain-lesson-plans
#
# For more, see:
# - https://docs.aws.amazon.com/AmazonS3/latest/userguide/website-hosting-custom-domain-walkthrough.html
# - https://github.com/aws-samples/amazon-cloudfront-secure-static-site"

Parameters:
  BucketName:
    Type: String
    Default: cdo-dev-s3-backed-subdomain
    Description: The name of the s3 bucket, often the same as the domain.
  CertificateArn:
    Type: String
    Description: The ARN of a certificate for the selected Domain.
  Domain:
    Type: String
    Default: dev-code.org
    Description: The top level domain name, e.g. 'code.org', 'dev-code.org'
  Subdomain:
    Type: String
    Default: s3-backed-subdomain
    Description: The subdomain under the Domain to use for the site.

Resources:
  Bucket:
    Type: AWS::S3::Bucket
    Properties:
      AccessControl: PublicRead
      BucketName: !Ref BucketName
      CorsConfiguration:
        CorsRules:
          - AllowedMethods: [GET]
            AllowedOrigins:
              - !Sub "*.${Domain}"
              # Permit local host development environments
              - '*.code.org:3000'
              - 'http://localhost-studio.code.org:*'
            AllowedHeaders: ['*']
      Tags:
        - Key: environment
          Value: production

  BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref Bucket
      PolicyDocument:
        Statement:
          - Effect: Allow
            Principal: '*'
            Action: 's3:GetObject'
            Resource: !Sub 'arn:aws:s3:::${Bucket}/*'

  BucketBackedDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Aliases:
          - !Sub '${Subdomain}.${Domain}'
        Enabled: true
        DefaultCacheBehavior:
          # Use the Managed-CachingOptimized policy from
          # https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/using-managed-cache-policies.html
          CachePolicyId: 658327ea-f89d-4fab-a63d-7e88639e58f6
          TargetOriginId: !Sub 's3-${BucketName}'
          ViewerProtocolPolicy: https-only
        Origins:
          - DomainName: !Sub '${BucketName}.s3.amazonaws.com'
            Id: !Sub 's3-${BucketName}'
            S3OriginConfig:
              OriginAccessIdentity: ""
        ViewerCertificate:
          AcmCertificateArn: !Ref CertificateArn
          MinimumProtocolVersion: TLSv1
          SslSupportMethod: sni-only
      Tags:
        - Key: environment
          Value: production

  SubdomainRecord:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneName: !Sub '${Domain}.'
      Name: !Sub '${Subdomain}.${Domain}'
      Type: A
      AliasTarget:
        DNSName: !GetAtt
          - BucketBackedDistribution
          - DomainName
        # This is always the hosted zone ID when you create an alias record that routes traffic to a CloudFront distribution.
        # from https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-route53-aliastarget-1.html#cfn-route53-aliastarget-hostedzoneid
        HostedZoneId: Z2FDTNDATAQYW2
