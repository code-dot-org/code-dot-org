<%
  require 'aws-sdk-route53'

  # Types of redirected domains
  # - domain.com
  # - sub.domain.com NOT SUPPORTED
  # - sub.comain.com/with/path NOT SUPPORTED

  # Related Resources
  # - Domain Registrations: Not manageable by Cloudformation

  raise "'domains' parameter must be provided" unless defined?(domains)
  raise "'redirect_to' parameter must be provided" unless defined?(redirect_to)

  domains = domains.split(',')
    .map { |d| d.downcase }
    .each { |d|
      # lazily check that all domains are of the form something.tld
      # - subdomains not currently supported
      # - the longest TLD as of 7/15/2022 is 24 characters :O
      if !d.match(/^[a-z0-9\-]+\.[a-z]{2,24}$/)
        raise "'#{d}' is not a supported domain"
      end
    }

    # Convert domain names like "domain.com" to "DomainDotCom" because AWS
    # Cloudformation Resource Logical ID's must be alphanumeric (A-Za-z0-9) and
    # unique within the template.
    def camelize_domain(domain)
      domain.split(/\./).map(&:capitalize).join("Dot")
    end
-%>
---
AWSTemplateFormatVersion: 2010-09-09
Description: Provisions domains & subdomains that need to redirect to other domains or URL's. Uses Cloudfront Functions.

Resources:

<%- domains.each do |domain| -%>
  <%=camelize_domain(domain)%>HostedZone: 
    Type: "AWS::Route53::HostedZone"
    # Hosted zones will not be deleted upon stack deletion in case other records have been added.
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      Name: <%= domain %>

  <%=camelize_domain(domain)%>DnsRecord:
    Type: AWS::Route53::RecordSet
    Properties:
      Name: <%=domain%>
      HostedZoneId : !Ref <%=camelize_domain(domain)%>HostedZone
      Type: A
      AliasTarget:
        DNSName: !GetAtt [RedirectDistribution, DomainName]
        HostedZoneId: Z2FDTNDATAQYW2 # static ID for CloudFront aliases
<%- end -%>

  RedirectDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Enabled: true
        Comment: Redirects via CloudFront functions
        PriceClass: PriceClass_All
        Aliases: <% domains.each do |domain| %>
          - <%= domain -%>
        <%- end %>
        Origins:
          # An origin is required, but will never receive traffic
          - Id: PrimaryOrigin
            DomainName: example.com
            CustomOriginConfig:
              OriginProtocolPolicy: match-viewer
        DefaultCacheBehavior:
          TargetOriginId: PrimaryOrigin
          CachePolicyId: !Ref RedirectCachePolicy
          FunctionAssociations:
            - EventType: viewer-request
              FunctionARN: !Ref RedirectCloudfrontFunction
          ViewerProtocolPolicy: allow-all
          # Use shared Realtime Log config
          RealtimeLogConfigArn: !ImportValue AccessLogs-Config
        ViewerCertificate:
          AcmCertificateArn: !Ref RedirectedDomainCertificate
          SslSupportMethod: sni-only

  <%
    first_domain = domains[0];
    other_domains = domains.slice(1,domains.size)
  %>
  RedirectedDomainCertificate:
    Type: AWS::CertificateManager::Certificate
    Properties:
      DomainName: <%= first_domain %>
      <%- if other_domains.size > 0 -%>
      SubjectAlternativeNames:<% other_domains.each do |domain| %>
        - <%= domain -%>
      <%- end %>
      <%- end -%>
      ValidationMethod: DNS
      DomainValidationOptions:
        <%- domains.each do |domain| -%>
        - DomainName: <%= domain %>
          HostedZoneId: !Ref <%=camelize_domain(domain)%>HostedZone
        <%- end -%>

  RedirectCachePolicy:
    Type: AWS::CloudFront::CachePolicy
    Properties:
      CachePolicyConfig:
        Name: !Sub "${AWS::StackName}-redirect-policy"
        MinTTL: 3600
        MaxTTL: 31536000
        DefaultTTL: 86400
        ParametersInCacheKeyAndForwardedToOrigin:
          EnableAcceptEncodingGzip: false
          CookiesConfig: 
            CookieBehavior: none
          HeadersConfig: 
            HeaderBehavior: whitelist
            Headers:
              - Origin
          QueryStringsConfig: 
            QueryStringBehavior: all

  RedirectCloudfrontFunction:
    Type: AWS::CloudFront::Function
    Properties: 
      Name: !Sub "${AWS::StackName}-www-redirect"
      FunctionConfig: 
        Comment: Redirects to a new URL
        Runtime: cloudfront-js-1.0
      AutoPublish: true
      FunctionCode: |
        function handler(event) {
          var newUrl = '<%= redirect_to %>';

          // Append path
          newUrl += event.request.uri;

          return {
            statusCode: 301,
            statusDescription: '301 Redirect to root domain',
            headers:{
              "location": { "value": newUrl }
            }
          };
        };
