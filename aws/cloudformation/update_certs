#!/usr/bin/env ruby
#
# Creates/updates LetsEncrypt SSL certificates stored in S3 using acmesmith.
# Ref: https://github.com/sorah/acmesmith
#
# Provide a Common Name and a list of Subject Alternative Names as arguments.
#
# Usage: update_certs COMMON_NAME [SAN_1] [SAN_2] [...]
#
# Example: bundle exec ./update_certs adhoc-bugcrowd.cdn-code.org adhoc-bugcrowd-studio.cdn-code.org origin-adhoc-bugcrowd.cdn-code.org
#
# Prerequisites:
# - Execute this script from this directory ("aws/cloudformation")
# - AWS credentials provided by the environment with appropriate access policies
#   (ref: https://github.com/sorah/acmesmith#iam-policy)
# - Existing valid ACME account key in the object storage (created by `acmesmith register CONTACT`)
# - configuration in ./acmesmith.yml
require_relative '../../deployment'

# Workaround for https://github.com/rails/rails/issues/28918
# Fixed in ActiveSupport 5.1.1.
require 'active_support/core_ext/module/remove_method'

require 'acmesmith/command'

unless ARGV.length >= 1
  puts "Usage: #{$0} common_name [san_1] [san_2] [...]"
  exit 1
end

common_name = ARGV[0]
required_certs = ARGV.dup

def get_certificate_expiration(common_name)
  # Run the Acmesmith command using Ruby's system-level command execution and capture its output
  certificate_info = `acmesmith show-certificate #{common_name}`
  not_after_line = certificate_info.split("\n").find {|line| line.include?('Not After')}
  not_after = Date.parse(not_after_line.split(': ').last)
  return not_after
end

begin
  # Uncomment to force regeneration of a new certificate
  # raise 'new cert'

  CDO.log.info "Checking for existing certificate for #{common_name}..."
  Acmesmith::Command.start ['current', common_name] rescue raise 'cert not found'

  CDO.log.info "Existing certificate found, checking expiration..."
  expiration_date = get_certificate_expiration(common_name)
  raise 'cert expired' if expiration_date < Date.today
  CDO.log.info "Existing certificate for #{common_name} is valid until #{expiration_date}."
rescue => exception
  case exception.message
  when 'cert not found'
    CDO.log.info "No existing certificate found for #{common_name}."
  when 'cert expired'
    CDO.log.info "Existing certificate for #{common_name} is expired."
  when 'new cert'
    CDO.log.info "'new cert' error manually raised."
  else
    raise exception
  end

  CDO.log.info "Requesting new certificate for #{required_certs}"
  Acmesmith::Command.start ['order'].concat(required_certs)
end
