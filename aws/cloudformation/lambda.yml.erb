---
AWSTemplateFormatVersion: 2010-09-09
Description: 'Lambda layer for functions used in CloudFormation Custom Resources.'
Parameters:
  SlackEndpoint:
    Type: String
    NoEcho: true
Resources:
  LookupStackOutputs:
    Type: AWS::Lambda::Function
    Properties:
      Description: 'Implements the "Refer to Resources in Another Stack" layered-architecture pattern. Ref: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/walkthrough-custom-resources-lambda-cross-stack-ref.html'
      FunctionName: LookupStackOutputs
      Code:
        ZipFile: <%=js 'stack-xref.js' %>
      Handler: index.handler
      Runtime: nodejs
      Timeout: 30
      Role: !GetAtt LookupStackExecutionRole.Arn
  LookupStackExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: ['sts:AssumeRole']
            Effect: Allow
            Principal: {Service: [lambda.amazonaws.com]}
      Path: '/'
      Policies:
        - PolicyName: root
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action: ["logs:CreateLogGroup","logs:CreateLogStream","logs:PutLogEvents"]
                Resource: "arn:aws:logs:*:*:*"
              - Effect: Allow
                Action: ["cloudformation:DescribeStacks"]
                Resource: "*"
  AMIManager:
    Type: AWS::Lambda::Function
    Properties:
      Description: 'Takes an AWS CloudFormation stack name and instance id and returns the AMI ID. Ref: https://blogs.aws.amazon.com/application-management/post/Tx38Z5CAM5WWRXW'
      FunctionName: AMIManager
      Code:
        ZipFile: <%=js 'ami-manager.js' %>
      Handler: index.handler
      Runtime: nodejs
      Timeout: 300
      Role: !GetAtt AMIManagerRole.Arn
  AMIManagerRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: ['sts:AssumeRole']
            Effect: Allow
            Principal: {Service: [lambda.amazonaws.com]}
      Path: '/'
      Policies:
        - PolicyName: root
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action: ["logs:CreateLogGroup","logs:CreateLogStream","logs:PutLogEvents"]
                Resource: "arn:aws:logs:*:*:*"
              - Effect: Allow
                Action:
                  - "ec2:CreateImage"
                  - "ec2:DeregisterImage"
                  - "ec2:DescribeImages"
                  - "ec2:CreateTags"
                  - "ec2:DescribeSnapshots"
                  - "ec2:DeleteSnapshot"
                  - "ec2:DescribeInstances"
                Resource: "*"
              # allow recursive calls
              - Effect: Allow
                Action: ['lambda:InvokeFunction']
                Resource: '*'
  VpcClassicLink:
    Type: AWS::Lambda::Function
    Properties:
      Description: 'Enables a VPC for ClassicLink through the EnableVpcClassicLink API.'
      FunctionName: VpcClassicLink
      Code:
        ZipFile: <%=js 'vpcClassicLink.js' %>
      Handler: index.handler
      Runtime: nodejs
      Timeout: 300
      Role: !GetAtt VpcClassicLinkRole.Arn
  VpcClassicLinkRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: ['sts:AssumeRole']
            Effect: Allow
            Principal: {Service: [lambda.amazonaws.com]}
      Path: '/'
      Policies:
        - PolicyName: root
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action: ["logs:CreateLogGroup","logs:CreateLogStream","logs:PutLogEvents"]
                Resource: "arn:aws:logs:*:*:*"
              - Effect: Allow
                Action:
                  - "ec2:DisableVpcClassicLink"
                  - "ec2:EnableVpcClassicLink"
                  - "ec2:EnableVpcClassicLinkDnsSupport"
                  - "ec2:DisableVpcClassicLinkDnsSupport"
                Resource: "*"
  CountASG:
    Type: AWS::Lambda::Function
    Properties:
      Description: 'Returns the current number of InService instances in an Auto Scaling Group.'
      FunctionName: CountASG
      Code:
        ZipFile: <%=js 'count_asg.js' %>
      Handler: index.handler
      Runtime: nodejs
      Timeout: 30
      Role: !GetAtt CountASGRole.Arn
  CountASGRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: ['sts:AssumeRole']
            Effect: Allow
            Principal: {Service: [lambda.amazonaws.com]}
      Path: '/'
      Policies:
        - PolicyName: root
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action: ["logs:CreateLogGroup","logs:CreateLogStream","logs:PutLogEvents"]
                Resource: "arn:aws:logs:*:*:*"
              - Effect: Allow
                Action: ["autoscaling:DescribeAutoScalingGroups"]
                Resource: "*"
  SlackEvent:
    Type: AWS::Lambda::Function
    Properties:
      Description: 'Publish a CloudWatch Event to a Slack channel.'
      FunctionName: SlackEvent
      Code: <%=js_zip%>
      Environment:
        Variables:
          SLACK_ENDPOINT: !Ref SlackEndpoint
      Handler: slackCloudWatchEvent.handler
      Runtime: nodejs4.3
      Timeout: 30
      Role: !GetAtt BasicLambdaRole.Arn
  BasicLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: ['sts:AssumeRole']
            Effect: Allow
            Principal: {Service: [lambda.amazonaws.com]}
      Path: /
      ManagedPolicyArns:
      - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
Outputs:
  LookupStackOutputs:
    Value: !GetAtt LookupStackOutputs.Arn
    Description: ServiceToken for LookupStackOutputs Lambda function
  AMIManager:
    Value: !GetAtt AMIManager.Arn
    Description: ServiceToken for AMIManager Lambda function
    Export: {Name: AMIManager}
  VpcClassicLink:
    Value: !GetAtt VpcClassicLink.Arn
    Description: ServiceToken for VpcClassicLink Lambda function
  SlackEvent:
    Value: !GetAtt SlackEvent.Arn
    Export: {Name: SlackEvent}
