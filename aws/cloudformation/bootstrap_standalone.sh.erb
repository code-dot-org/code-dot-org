#!/bin/bash -x
# UserData bootstrap script for CloudFormation stack instances.
# This script overrides variables useful for setting up an standalone adhoc instance.

# Redirect copy of stdout/stderr to a log file for later auditing.
LOG=<%=log_name%>
exec >> >(tee -i ${LOG})
exec 2>&1

# Temp dir that cleans up after itself.
MYTMPDIR=$(mktemp -d)
trap 'rm -rf "$MYTMPDIR"' EXIT

# Modify cloud-init to re-run bootstrap script every time instance restarts.
# Ref: http://stackoverflow.com/a/10455027
sed -i 's/scripts-user$/\[scripts-user, always\]/' /etc/cloud/cloud.cfg

ENVIRONMENT=<%=environment%>

HOME_DIR=/home/ubuntu/${ENVIRONMENT}

# Workaround to delete any locally-modified files
(cd ${HOME_DIR} && git reset --hard --quiet &)

# Bootstrap prerequisites
apt-get -qq update
apt-get -qq -y install python3-pip jq curl
pip3 show -q awscli || pip3 install -q awscli

STACK=<%=stack_name%>
CHEF_VERSION=12.7.2
RUN_LIST='["recipe[cdo-apps]"]'
BRANCH=<%=branch%>
SUBDOMAIN=<%=subdomain%>
S3_BUCKET=<%=s3_bucket%>
REGION=<%=region%>
INSTANCE_ID=$(curl -s http://169.254.169.254/latest/meta-data/instance-id)
NODE_NAME=<%=rack_env%>-${INSTANCE_ID}

# Install AWS CloudWatch Logs
# Ref: http://docs.aws.amazon.com/AmazonCloudWatch/latest/DeveloperGuide/EC2NewInstanceCWL.html
AWSLOGS_AGENT_URL=https://s3.amazonaws.com/aws-cloudwatch/downloads/latest/awslogs-agent-setup.py
AWSLOGS_CONF=${MYTMPDIR}/awslogs.conf
cat <<CONF > ${AWSLOGS_CONF}
[general]
region = ${REGION}
[${LOG}]
log_group_name = ${STACK}
log_stream_name = ${LOG}
file = ${LOG}
CONF
curl -s ${AWSLOGS_AGENT_URL} | python - -n -r ${REGION} -c ${AWSLOGS_CONF} > /dev/null
aws logs put-retention-policy \
  --log-group-name ${STACK} \
  --retention-in-days 1 \
  --region ${REGION}

# Fetch acmesmith-provisioned SSL certificate and key from S3
aws configure set s3.signature_version s3v4
S3_PATH=s3://${S3_BUCKET}/ssl/certs/${SUBDOMAIN}
CURRENT=${S3_PATH}/$(aws s3 cp ${S3_PATH}/current -)
CERT=$(aws s3 cp ${CURRENT}/cert.pem -)
CHAIN=$(aws s3 cp ${CURRENT}/chain.pem -)
KEY=$(aws s3 cp ${CURRENT}/key.pem -)

FIRST_BOOT=/etc/chef/first-boot.json
mkdir -p $(dirname ${FIRST_BOOT})
jq "." <<JSON > ${FIRST_BOOT}
{
  "cdo-nginx": {
    "ssl_cert": {
      "content": "${CERT}"
    },
    "ssl_chain": {
      "content": "${CHAIN}"
    },
    "ssl_key": {
      "content": "${KEY}"
    }
  },
  "cdo-secrets": {
<% if local_mode %>
    "build_apps": true,
    "use_my_apps": true,
<% end %>
    "override_dashboard": "dashboard-<%=subdomain%>",
    "override_pegasus": "<%=subdomain%>"
  },
  "omnibus_updater": {
    "version": "${CHEF_VERSION}"
  },
  "cdo-repository": {
    "branch": "${BRANCH}",
    "sync": true
  },
  "run_list": ${RUN_LIST}
}
JSON

# TODO move these run-once notifications somewhere more appropriate
# Bootstrap the first cdo-apps Rakefile build on a new instance.
rm -f /etc/init.d/{dashboard,pegasus}
# Bootstrap the npm builds on a new instance.
rm -rf ${HOME_DIR}/apps/build
rm -rf ${HOME_DIR}/apps/node_modules

OPTIONS="<%=local_mode ? '-z' : ''%> -b ${BRANCH} -n ${NODE_NAME}"
sudo -u ubuntu bash -c "aws s3 cp s3://${S3_BUCKET}/chef/bootstrap-${STACK}.sh - | sudo bash -s -- ${OPTIONS}"
[ $? -eq 0 ] && STATUS=SUCCESS || STATUS=FAILURE

aws cloudformation signal-resource \
  --unique-id ${INSTANCE_ID} \
  --stack-name ${STACK} \
  --logical-resource-id WebServer \
  --status ${STATUS} \
  --region ${REGION} \
  || true
