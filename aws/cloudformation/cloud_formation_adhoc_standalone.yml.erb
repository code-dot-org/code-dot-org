<%
require 'cdo/aws/cloudfront'

local_branch = `git branch | grep \\* | cut -f 2 -d \\ `.strip
if local_branch == branch
  # In this first (default) case, the current branch is the one we're deploying to the adhoc server,
  # so check whether it's up-to-date with the remote before we get any further.
  unless `git remote show origin 2>&1 | grep \"(up to date)\" | grep \"#{branch}\" | wc -l`.strip.to_i > 0
    raise 'Current branch needs to be up-to-date with GitHub branch of the same name, otherwise deploy will fail.
To specify an alternate branch name, run `rake adhoc:start branch=BRANCH`.'
  end
else
  # In this second case we're deploying a different branch than the current local one;
  # simply check that the branch exists on GitHub before deploying.
  unless system("git ls-remote --exit-code 'https://github.com/code-dot-org/code-dot-org.git' #{branch} > /dev/null")
    raise 'Current branch needs to be pushed to GitHub with the same name, otherwise deploy will fail.
To specify an alternate branch name, run `rake adhoc:start branch=BRANCH`.'
  end
end

unless dry_run
  update_certs.call
  update_cookbooks.call
  update_bootstrap_script.call
end
-%>
---
AWSTemplateFormatVersion: 2010-09-09
Description: Standalone Code.org application on a single EC2 instance<%=cdn_enabled ? ' over CloudFront CDN' : ''%>.
Resources:
  WebServerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable HTTP[S] + SSH access
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: <%=ssh_ip%>
      VpcId: !ImportValue VPC
  WebServer:
    Type: AWS::EC2::Instance
    CreationPolicy:
      ResourceSignal:
        Timeout: PT60M
    Properties:
      ImageId: <%=adhoc_image_id%>
      InstanceType: <%=INSTANCE_TYPE%>
      IamInstanceProfile: !ImportValue IAM-StandaloneFrontendInstanceProfile
      KeyName: <%=SSH_KEY_NAME%>
      Tags: [{Key: Name, Value: <%=stack_name%>}]
      BlockDeviceMappings:
        - DeviceName: /dev/sda1
          Ebs:
            VolumeSize: 64
            VolumeType: gp2
      UserData:
        Fn::Base64: <%=file('bootstrap_standalone.sh.erb')%>
      NetworkInterfaces:
        - AssociatePublicIpAddress: true
          DeviceIndex: 0
          GroupSet: [Ref: WebServerSecurityGroup]
          SubnetId: !ImportValue VPC-PublicSubnet<%=azs.first%>
<%
  %w(Dashboard Pegasus).each do |app|
    app_domain = "#{app == 'Pegasus' ? '' : (app.downcase + '-')}#{subdomain}";
-%>
  <%=app%>DNS:
    Type: AWS::Route53::RecordSetGroup
    Properties:
      HostedZoneName: <%=domain%>.
      RecordSets:
        - Name: "<%=app_domain%>"
          Type: A
<%  if cdn_enabled-%>
          AliasTarget:
            DNSName: {'Fn::GetAtt': [<%=app%>CDN, DomainName]}
            HostedZoneId: Z2FDTNDATAQYW2 # static ID for cloudfront aliases
  <%=app%>CDN:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig: <%=AWS::CloudFront.distribution_config(app.downcase.to_sym, "origin-#{subdomain}", [app_domain],
        AcmCertificateArn: certificate_arn,
        MinimumProtocolVersion: 'TLSv1',
        SslSupportMethod: 'sni-only'
      )%>
<%  else-%>
          TTL: 60
          ResourceRecords: [{'Fn::GetAtt':[WebServer, PublicIp]}]
<%  end-%>
<%end -%>
<%  if cdn_enabled-%>
  OriginDNS:
    Type: AWS::Route53::RecordSetGroup
    Properties:
      HostedZoneName: <%=domain%>.
      RecordSets:
        - Name: "origin-<%=subdomain%>"
          Type: A
          TTL: 60
          ResourceRecords: [{'Fn::GetAtt':[WebServer, PublicIp]}]
<%end -%>
Outputs:
<%-
  %w(Dashboard Pegasus).each do |app|
    app_domain = "#{app == 'Pegasus' ? '' : (app.downcase + '-')}#{subdomain}";
-%>
  <%=app%>URL:
    Value: "https://<%=app_domain%>"
    Description: <%=app%> URL
<% end-%>
