<%
require 'cdo/aws/cloudfront'
unless system("git ls-remote --exit-code 'https://github.com/code-dot-org/code-dot-org.git' #{branch} > /dev/null")
  raise 'Current branch needs to be pushed to GitHub with the same name, otherwise deploy will fail.
To specify an alternate branch name, run `rake adhoc:start branch=BRANCH`.'
end
unless dry_run
  update_certs.call
  update_cookbooks.call
  update_bootstrap_script.call
end
-%>
---
AWSTemplateFormatVersion: 2010-09-09
Description: Standalone Code.org application on a single EC2 instance<%=cdn_enabled ? ' over CloudFront CDN' : ''%>.
Resources:
  VPC: <%= lambda.call 'LookupStackOutputs', StackName: 'VPC' %>
  IAM: <%= lambda.call 'LookupStackOutputs', StackName: 'IAM' %>
  WebServerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable HTTP[S] + SSH access
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: <%=ssh_ip%>
      VpcId: {'Fn::GetAtt': [VPC, VpcId]}
  WebServer:
    Type: AWS::EC2::Instance
    CreationPolicy:
      ResourceSignal:
        Timeout: PT60M
    Properties:
      ImageId: <%=image_id%>
      InstanceType: <%=instance_type%>
      IamInstanceProfile: {'Fn::GetAtt': [IAM, FrontendInstanceProfile]}
      KeyName: <%=ssh_key_name%>
      Tags: [{Key: Name, Value: <%=stack_name%>}]
      BlockDeviceMappings:
        - DeviceName: /dev/sda1
          Ebs:
            VolumeSize: 64
            VolumeType: gp2
      UserData:
        Fn::Base64: <%=file.call('bootstrap.sh.erb')%>
      NetworkInterfaces:
        - AssociatePublicIpAddress: true
          DeviceIndex: 0
          GroupSet: [Ref: WebServerSecurityGroup]
          SubnetId: {'Fn::GetAtt': [VPC, PublicSubnet<%=azs.first%>]}
<%
  %w(Dashboard Pegasus).each do |app|
    app_domain = "#{app == 'Pegasus' ? '' : (app.downcase + '-')}#{subdomain}";
%>
  <%=app%>DNS:
    Type: AWS::Route53::RecordSetGroup
    Properties:
      HostedZoneName: <%=domain%>.
      RecordSets:
        - Name: "<%=app_domain%>"
          Type: A
<%  if cdn_enabled%>
          AliasTarget:
            DNSName: {'Fn::GetAtt': [<%=app%>CDN, DomainName]}
            HostedZoneId: Z2FDTNDATAQYW2 # static ID for cloudfront aliases
  <%=app%>CDN:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig: <%=AWS::CloudFront.config_cloudformation(app.downcase.to_sym, "origin-#{subdomain}", [app_domain])%>
  # TODO remove once CloudFormation adds support for CloudFront ACM.
  <%=app%>CDNProperties:
    Type: Custom::CloudFrontProperties
    DependsOn: <%=app%>CDN
    Properties:
      DistributionId: {Ref: <%=app%>CDN}
      OldViewerCertificate:
        CloudFrontDefaultCertificate: true
        MinimumProtocolVersion: TLSv1
      ViewerCertificate:
        ACMCertificateArn: <%=certificate_arn%>
        MinimumProtocolVersion: TLSv1
        SSLSupportMethod: sni-only
      OldProtocols:
        Quantity: 2
        Items: [SSLv3, TLSv1]
      Protocols:
        Quantity: 2
        Items: [TLSv1.2, TLSv1.1]
      ServiceToken: {'Fn::GetAtt': [CloudFrontProperties, Arn]}
<%  else%>
          TTL: 60
          ResourceRecords: [{'Fn::GetAtt':[WebServer, PublicIp]}]
<%  end%>
<%end %>
<%  if cdn_enabled%>
  OriginDNS:
    Type: AWS::Route53::RecordSetGroup
    Properties:
      HostedZoneName: <%=domain%>.
      RecordSets:
        - Name: "origin-<%=subdomain%>"
          Type: A
          TTL: 60
          ResourceRecords: [{'Fn::GetAtt':[WebServer, PublicIp]}]
  # TODO remove once CloudFormation adds support for CloudFront ACM.
  CloudFrontProperties:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: <%=file.call('cloudfrontProperties.js')%>
      Handler: index.handler
      Runtime: nodejs
      Timeout: 300
      Role: {'Fn::GetAtt': [CloudFrontPropertiesRole, Arn]}
  # TODO remove once CloudFormation adds support for CloudFront ACM.
  CloudFrontPropertiesRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: ['sts:AssumeRole']
            Effect: Allow
            Principal: {Service: [lambda.amazonaws.com]}
      Path: '/'
      Policies:
        - PolicyName: root
          PolicyDocument:
            Statement:
              - Action: ['cloudFront:GetDistributionConfig', 'cloudFront:UpdateDistribution']
                Resource: ['*']
                Effect: Allow
              - Action: ['logs:CreateLogGroup', 'logs:CreateLogStream', 'logs:PutLogEvents']
                Resource: 'arn:aws:logs:*:*:*'
                Effect: Allow
<%end %>
Outputs:
<%
  %w(Dashboard Pegasus).each do |app|
    app_domain = "#{app == 'Pegasus' ? '' : (app.downcase + '-')}#{subdomain}";
%>
  <%=app%>URL:
    Value: "https://<%=app_domain%>"
    Description: <%=app%> URL
<% end%>
