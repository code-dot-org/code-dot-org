// CloudFront Functions handler to normalize Accept-Language header for optimized caching.
<% require 'cdo/languages' -%>
var tags = <%= Languages.table.select(:locale_s, :code_s).map {|x| x.values.values}.flatten.uniq.map(&:downcase).to_json %>;
var defaultTag = 'en';

function handler(event) {
    var headers = event.request.headers;
    var languageCookie = event.request.cookies.language_;
    var languageHeader = headers['accept-language'] ? headers['accept-language'].value : '';
    headers['accept-language'] = {value: languageCookie && languageCookie.value || lookup(languageHeader, tags, defaultTag)};
    return event.request;
}

/*
  Parse an Accept-Language request header field,
  performing a "lookup" of a matching language tag for the given request.

  References:

  HTTP/1.1 Semantics and Content, RFC 7231
  Section 5.3, Request Header Fields: Content Negotiation
  Quality Values, Section 5.3.1 (https://datatracker.ietf.org/doc/html/rfc7231#section-5.3.1)
  Accept-Language, Section 5.3.5 (https://datatracker.ietf.org/doc/html/rfc7231#section-5.3.5)
  
  Matching of Language Tags, RFC 4647
  Types of Matching: Lookup, Section 3.4 (https://datatracker.ietf.org/doc/html/rfc4647#section-3.4)
 */
function lookup(acceptLanguage, tags, defaultTag) {
    // 'Language tags and thus language ranges are to be treated as case-insensitive' (RFC4647 Section 2)
    // Normalize header and tags to lowercase.
    acceptLanguage = acceptLanguage.toLowerCase();

    /*
      JavaScript regex translation of Accept-Language ABNF syntax:

      Accept-Language = 1#( language-range [ weight ] )
      1#element       => element *( OWS "," OWS element )
      language-range  = (1*8ALPHA *("-" 1*8alphanum)) / "*"
      alphanum        = ALPHA / DIGIT
      weight          = OWS ";" OWS "q=" qvalue
      qvalue          = ( "0" [ "." 0*3DIGIT ] )
                      / ( "1" [ "." 0*3("0") ] )
     */
    var regex = /(?<range>([a-z]{1,8})(-([a-z0-9]{1,8}))*|\*)(\s*;\s*q=(?<qvalue>0(\.[0-9]{0,3})?|1(\.0{0,3})?))?(\s*,\s*)?/g

    var match,
      /* 'Each application, protocol, or specification that uses lookup MUST
      define the defaulting behavior when no tag matches the language
      priority list.' (RFC4647 Section 3.4.1) */
      bestTag = defaultTag,
      // 'a value of 0 means "not acceptable".' (RFC7231 Section 5.3.1)
      bestWeight = 0;

      while ((match = regex.exec(acceptLanguage)) !== null) {
        // 'If no "q" parameter is present, the default weight is 1.' (RFC7231 Section 5.3.1)
        var weight = match.groups.qvalue ? parseFloat(match.groups.qvalue) : 1.0
        if (weight > bestWeight) {
            /* 'In the lookup scheme, the language range is progressively truncated
            from the end until a matching language tag is located.' (RFC4647 Section 3.4) */
            var range = match.groups.range;
            var oldRange = null;
            while(range !== oldRange) {
                if (tags.includes(range)) {
                    bestWeight = weight;
                    bestTag = range;
                    break;
                }
                oldRange = range;
                range = oldRange.replace(/-([a-z0-9]{1,8})$/, '');
            }
        }
    }
    return bestTag;
}
