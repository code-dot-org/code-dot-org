<%
require 'active_support/core_ext/numeric/bytes'
require 'cdo/aws/cloudfront'

origin = "'https://github.com/code-dot-org/code-dot-org.git'"

if rack_env?(:adhoc) && RakeUtils.git_branch == branch
  # Current branch is the one we're deploying to the adhoc server,
  # so check whether it's up-to-date with the remote before we get any further.
  unless `git remote show #{origin} 2>&1 | grep \"(up to date)\" | grep \"#{branch}\" | wc -l`.strip.to_i > 0
    raise 'Current adhoc branch needs to be up-to-date with GitHub branch of the same name, otherwise deploy will fail.
To specify an alternate branch name, run `rake adhoc:start branch=BRANCH`.'
  end
else
  # Either not adhoc or deploying a different branch than the current local one;
  # simply check that the branch exists on GitHub before deploying.
  unless system("git ls-remote --exit-code #{origin} #{branch} > /dev/null")
    raise 'Current branch needs to be pushed to GitHub with the same name, otherwise deploy will fail.
  To specify an alternate branch name, run `rake stack:start branch=BRANCH`.'
  end
end

commit = ENV['COMMIT'] || `git ls-remote origin #{branch}`.split.first

frontends = @frontends = rack_env?(:production) || ENV['FRONTENDS']
database = @database = [:staging, :test, :levelbuilder].include?(rack_env) || ENV['DATABASE']
load_balancer = @load_balancer = !rack_env?(:adhoc) || ENV['FRONTENDS'] || ENV['LOAD_BALANCER']
alarms = @alarms = !rack_env?(:adhoc) || ENV['ALARMS']
chef_version = '15.2.20'

unless dry_run
  update_certs.call unless load_balancer
  update_cookbooks.call
  update_bootstrap_script.call
end

require 'cdo/cron'

self.log_resource_filter.push 'FrontendLaunchConfig', 'ASGCount'

# Don't provision daemon where manually-provisioned daemon instances already exist.
# Track Instance ID of manually-provisioned daemon instances that already exist and can't be referenced dynamically
# TODO migrate stacks to cloudformation-provisioned instances.
if %w(autoscale-prod test staging levelbuilder).include? stack_name
  self.daemon_instance_id = {
    'autoscale-prod' => 'i-08f5f8ace0a473b8d',
    'test' => 'i-004727200191f3251',
    'staging' => 'i-02e6cdc765421ab34',
    'levelbuilder' => 'i-0907b146f7e6503f6'
  }[stack_name]
else
  self.daemon = 'Daemon'
end

# Use alternate legacy EC2 instance resource name for standalone-adhoc stack.
self.daemon = 'WebServer' if rack_env?(:adhoc) && !frontends
-%>
---
AWSTemplateFormatVersion: 2010-09-09
Description: AWS CloudFormation Template for Code.org application
Parameters:
  InstanceType:
    Type: String
    Default: <%=INSTANCE_TYPE%>
  Branch:
    Type: String
    Default: <%=branch%>
<% if database -%>
  DatabaseUsername:
    Type: String
    Default: master
    MaxLength: 16
<% end -%>
Resources:
  # Stack-specific IAM permissions applied to both daemon and frontends.
  CDOPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Description: !Sub "Application permissions for ${AWS::StackName}."
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          # Read-only access to current secrets.
          - Effect: Allow
            Action: 'secretsmanager:GetSecretValue'
            Resource:
              - !Sub "arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:<%=environment%>/cdo/*"
<% if database -%>
              - !Ref DatabaseSecret
<% end -%>
            Condition:
              StringEquals:
                secretsmanager:VersionStage: AWSCURRENT
          # Read-only access to bootstrap scripts.
          - Effect: Allow
            Action: 's3:GetObject'
            Resource: 'arn:aws:s3:::cdo-dist/<%=environment%>/*'
          # Instance-bootstrap CloudFormation hook.
          - Effect: Allow
            Action: 'cloudformation:SignalResource'
            Resource: !Sub "arn:aws:cloudformation:${AWS::Region}:${AWS::AccountId}:stack/${AWS::StackName}/*"
          # Forward syslog to CloudWatch Logs via cdo-cloudwatch-logger.
          - Effect: Allow
            Action:
              - 'logs:CreateLogGroup'
              - 'logs:CreateLogStream'
              - 'logs:PutRetentionPolicy'
              - 'logs:PutLogEvents'
            Resource:
              - !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:<%=environment%>-*"
              - !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:${AWS::StackName}"
              - !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:${AWS::StackName}:log-stream:*"
          # Put custom metrics to CloudWatch.
          - Effect: Allow
            Action: 'cloudwatch:PutMetricData'
            Resource: '*'
          # Read EC2 tags to determine Auto Scaling Group in CloudWatch Monitoring Scripts.
          - Effect: Allow
            Action: 'ec2:DescribeTags'
            Resource: '*'
          # Read/Write DCDO and Gatekeeper tables.
          # TODO: Import resources into stack.
          - Effect: Allow
            Action:
              - 'dynamodb:GetItem'
              - 'dynamodb:PutItem'
              - 'dynamodb:Scan'
            Resource:
              - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/<%=CDO.dcdo_table_name%>"
              - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/<%=CDO.gatekeeper_table_name%>"
          # Write analysis events to Firehose.
          # TODO: Import resources into stack.
          - Effect: Allow
            Action:
            - 'firehose:PutRecord'
            - 'firehose:PutRecordBatch'
            Resource: !Sub "arn:aws:firehose:${AWS::Region}:${AWS::AccountId}:deliverystream/analysis-events"
          # S3 access for student-libraries bucket
          - Effect: Allow
            Action:
              - 's3:DeleteObject'
              - 's3:DeleteObjectVersion'
              - 's3:GetObject'
              - 's3:GetObjectVersion'
              - 's3:PutObject'
              - 's3:ReplicateObject'
              - 's3:RestoreObject'
            Resource: 'arn:aws:s3:::cdo-v3-libraries/libraries_<%=environment%>/*'
          # General s3 access.
          # TODO: Further restrict permissions to grant least privilege.
          - Effect: Allow
            Action: 's3:*'
            Resource: '*'
<% if frontends -%>
<%=  component 'ami', commit: commit, chef_version: chef_version%>
<% end -%>
<% if load_balancer -%>
  # TODO hourofcode.com and csedweek.org load balancers should be added to this template.
<% raise "LoadBalancer name [#{stack_name}] cannot be longer than 32 characters" if stack_name.length > 32 -%>

  ALB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Ref AWS::StackName
      SecurityGroups: [!ImportValue VPC-ELBSecurityGroup]
      Subnets: <%= public_subnets.to_json %>
      LoadBalancerAttributes:
        - Key: deletion_protection.enabled
          Value: true

  HTTPListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref ALB
      Port: 80
      Protocol: HTTP
      DefaultActions:
      - Type: forward
        TargetGroupArn: !Ref ALBTargetGroup

  HTTPSListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref ALB
      Port: 443
      Protocol: HTTPS
      Certificates:
      - CertificateArn: <%=certificate_arn%>
      SslPolicy: ELBSecurityPolicy-2016-08
      DefaultActions:
      - Type: forward
        TargetGroupArn: !Ref ALBTargetGroup

  ALBTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Ref AWS::StackName
      VpcId: !ImportValue VPC
      Port: 80
      Protocol: HTTP
      HealthCheckEnabled: true
      HealthCheckProtocol: HTTP
      HealthCheckPath: /health_check
      HealthCheckPort: 80
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 5
      HealthCheckIntervalSeconds: 10
      HealthCheckTimeoutSeconds: 5
      TargetGroupAttributes:
        - Key: load_balancing.algorithm.type
          Value: least_outstanding_requests
        - Key: stickiness.enabled
          Value: true
        - Key: stickiness.type
          Value: lb_cookie
        - Key: stickiness.lb_cookie.duration_seconds
          Value: 30
<%   if !frontends && daemon_instance_id -%>
      Targets:
        - Id: <%=daemon_instance_id%>
          Port: 80
<%   elsif daemon %>
      Targets:
        - Id: !Ref <%=daemon%>
          Port: 80
<%   end -%>
<% end -%>

<% if frontends -%>
<%= component 'slack_scaling_events' -%>
<%  if environment == :production -%>
<%=   component 'slack_health_events' -%>
<%=   component 'scaling_schedule' -%>
<%  end -%>
<% end -%>
# Route53 (DNS) and CloudFront (CDN) resources:
# TODO hourofcode.com and csedweek.org DNS/CDN resources should be added to this template.
<%
  %w(Dashboard Pegasus).each do |app|
    app_domain = app == 'Dashboard' ? studio_subdomain : subdomain
-%>
  <%=app%>DNS:
    Type: AWS::Route53::RecordSetGroup
    Properties:
      HostedZoneName: <%=domain%>.
      RecordSets:
        - Name: <%=app_domain%>
          Type: A
<%   if cdn_enabled -%>
          AliasTarget:
            DNSName: !GetAtt [<%=app%>CDN, DomainName]
            HostedZoneId: Z2FDTNDATAQYW2 # static ID for cloudfront aliases
<%   elsif load_balancer -%>
          AliasTarget:
            DNSName: !GetAtt [ALB, DNSName]
            HostedZoneId: !GetAtt [ALB, CanonicalHostedZoneID]
<%   else -%>
          TTL: <%= DNS_TTL %>
          ResourceRecords: [!GetAtt <%=daemon%>.PublicIp]
<%   end -%>
<%   if cdn_enabled -%>
  <%=app%>CDN:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig: <%= AWS::CloudFront.distribution_config(
        app.downcase.to_sym,
        subdomain('origin'),
        app == 'Dashboard' ?
          [studio_subdomain] :
          [subdomain] + (CDO.partners + ['advocacy']).map{|x| subdomain(nil, x)},
        {
          AcmCertificateArn: certificate_arn,
          MinimumProtocolVersion: 'TLSv1',
          SslSupportMethod: domain == 'code.org' ? 'vip' : 'sni-only'
        }
      )%>
<%   end -%>
<% end -%>
<% if cdn_enabled -%>
  OriginDNS:
    Type: AWS::Route53::RecordSetGroup
    Properties:
      HostedZoneName: <%=domain%>.
      RecordSets:
        - Name: "<%=subdomain('origin')%>"
          Type: A
<%   if load_balancer -%>
          AliasTarget:
            HostedZoneId: !GetAtt [ALB, CanonicalHostedZoneID]
            DNSName: !GetAtt [ALB, DNSName]
<%   else -%>
          TTL: <%= DNS_TTL %>
          ResourceRecords: [!GetAtt <%=daemon%>.PublicIp]
<%   end -%>
<% end -%>
<% if frontends-%>
<%=  component 'cache'%>
<% end -%>
  DaemonRole:
    Type: AWS::IAM::Role
    Properties:
      <%=service_role 'ec2'%>
      Policies:
        - PolicyName: Daemon
          PolicyDocument:
            Statement:
              # APIs used by ci:flush_cache task.
              - Effect: Allow
                Action:
                  - 'ec2:DescribeInstances'
                  - 'cloudfront:ListDistributions'
                  - 'cloudfront:CreateInvalidation'
                  - 'cloudfront:GetInvalidation'
                Resource: '*'
              # Lookup ACM certificate for ELB and CloudFront SSL.
              - Effect: Allow
                Action:
                  - 'acm:ListCertificates'
                  - 'acm:DescribeCertificate'
                Resource: '*'
              - Effect: Allow
                Action: 'cloudformation:DescribeStackEvents'
                Resource: !Ref AWS::StackId
              # Update Stack through `ci:deploy_stack` task.
              - Effect: Allow
                Action:
                  - 'cloudformation:UpdateStack'
                  - 'cloudformation:DescribeStacks'
                Resource: !Sub "arn:aws:cloudformation:${AWS::Region}:${AWS::AccountId}:stack/${AWS::StackName}/*"
              - Effect: Allow
                Action: iam:PassRole
                Resource: !Sub "arn:aws:iam::${AWS::AccountId}:role/admin/CloudFormationService"
<% if rack_env?(:production) -%>
        - PolicyName: StopInactiveAdhocInstances
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - cloudformation:DescribeStacks
                  - cloudwatch:GetMetricStatistics
                  - ec2:DescribeInstances
                Resource: '*'
              - Effect: Allow
                Action: cloudformation:DescribeStackResource
                Resource: '*'
        - PolicyName: RDSBackup
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - rds:DescribeDBInstances
                  - rds:DescribeDBClusters
                  - rds:DescribeDBClusterSnapshots
                Resource: '*'
              - Effect: Allow
                Action: rds:DescribeDBSnapshots
                Resource: !Sub "arn:aws:rds:${AWS::Region}:${AWS::AccountId}:db:production"
              - Effect: Allow
                Action: rds:CopyDBSnapshot
                Resource: !Sub "arn:aws:rds:${AWS::Region}:${AWS::AccountId}:snapshot:rds:production-*"
              - Effect: Allow
                Action: rds:CopyDBClusterSnapshot
                Resource: !Sub "arn:aws:rds:${AWS::Region}:${AWS::AccountId}:cluster-snapshot:rds:<%=CDO.db_cluster_id%>*"
              - Effect: Allow
                Action:
                  - rds:ModifyDBClusterSnapshotAttribute
                  - rds:CopyDBClusterSnapshot
                  - rds:DeleteDBClusterSnapshot
                  - rds:DescribeDBClusterSnapshotAttributes
                Resource: !Sub "arn:aws:rds:${AWS::Region}:${AWS::AccountId}:cluster-snapshot:temp-snapshot*"
              - Effect: Allow
                Action:
                  - rds:CopyDBSnapshot
                  - rds:DescribeDBSnapshots
                  - rds:DescribeDBSnapshotAttributes
                  - rds:ModifyDBSnapshotAttribute
                  - rds:DeleteDBSnapshot
                Resource: !Sub "arn:aws:rds:${AWS::Region}:${AWS::AccountId}:snapshot:temp-snapshot-*"
              - Effect: Allow
                Action:
                  - kms:CreateGrant
                  - kms:DescribeKey
                Resource: '*'
                Condition:
                  StringEquals:
                    kms:ViaService: !Sub "rds.${AWS::Region}.amazonaws.com"
        - PolicyName: DMSStartAndMonitorReplicationTasks
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - dms:DescribeReplicationTasks
                Resource: "*"
              - Effect: Allow
                Action:
                  - dms:DescribeTableStatistics
                  - dms:ListTagsForResource
                  - dms:StartReplicationTask
                Resource: !Sub "arn:aws:dms:${AWS::Region}:${AWS::AccountId}:task:*"
<% end -%>
      ManagedPolicyArns: [!Ref CDOPolicy]
      PermissionsBoundary: !ImportValue IAM-DevPermissions
  DaemonInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties: {Roles: [!Ref DaemonRole]}
<% if daemon -%>
  <%=daemon%>:
    Type: AWS::EC2::Instance
    CreationPolicy:
      ResourceSignal:
        Timeout: PT2H
    Properties:
      ImageId: <%=IMAGE_ID%>
      InstanceType: !Ref InstanceType
      IamInstanceProfile: !Ref DaemonInstanceProfile
      KeyName: <%=SSH_KEY_NAME%>
      Tags:
      - Key: Name
        Value: !Ref AWS::StackName
      BlockDeviceMappings:
        - DeviceName: /dev/sda1
          Ebs:
            VolumeSize: 64
            VolumeType: gp2
      UserData:
        Fn::Base64: <%=file('bootstrap_chef_stack.sh.erb',
          resource_id: daemon,
          node_name: '$STACK',
          run_list: local_mode ? ['recipe[cdo-apps]', 'recipe[cdo-home-ubuntu]'] : ['role[daemon]'],
          commit: nil, # track branch
          shutdown: false,
          daemon: true,
          chef_version: chef_version
        )%>
      NetworkInterfaces:
      - AssociatePublicIpAddress: true
        DeviceIndex: 0
        SubnetId: !ImportValue VPC-PublicSubnet<%=azs.first%>
        GroupSet:
          - !ImportValue VPC-FrontendSecurityGroup
          - !ImportValue VPC-DaemonSecurityGroup # SSH access to frontends
<%  unless load_balancer -%>
          - !ImportValue VPC-ELBSecurityGroup # Accept HTTP traffic on daemon
<%  end -%>
<% if database %>
    DependsOn: Aurora1
<% end -%>
<%end-%>
<% if alarms-%>
<%=  component 'alarms'%>
<% end -%>
<% if database-%>
<%=  component 'database'%>
<% end -%>
Outputs:
  DashboardURL:
    Value: "https://<%=studio_subdomain%>"
    Description: Dashboard URL
  PegasusURL:
    Value: "https://<%=subdomain%>"
    Description: Pegasus URL
# display information about how to ssh to console if this is a single instance adhoc environment
<% if rack_env?(:adhoc) && !frontends -%>
  SSHServerName:
    Value: <%=cdn_enabled ? subdomain('origin') : subdomain%>
    Description: SSH server name
<%end-%>