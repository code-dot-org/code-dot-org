<%
require 'cdo/aws/cloudfront'
unless system("git ls-remote --exit-code origin #{branch} > /dev/null")
  raise 'Current branch needs to be pushed to GitHub with the same name, otherwise deploy will fail.
To specify an alternate branch name, run `rake stack:start branch=BRANCH`.'
end

commit = ENV['COMMIT'] || `git ls-remote origin #{branch}`.split.first

ami = commit[0..4]

unless dry_run
  update_certs.call unless cdn_enabled
  update_cookbooks.call
  update_bootstrap_script.call
end
-%>
---
AWSTemplateFormatVersion: 2010-09-09
Description: AWS CloudFormation Template for Code.org application
Resources:
  VPC: <%= lambda_fn.call 'LookupStackOutputs', StackName: 'VPC', Nonce: 0 %>
  IAM: <%= lambda_fn.call 'LookupStackOutputs', StackName: 'IAM', Nonce: 0 %>

  # Signal when the instance is fully provisioned and ready for AMI creation.
  AMICreate<%=ami%>:
    Type: AWS::CloudFormation::WaitCondition
    DependsOn: WebServerAMI
    CreationPolicy:
      ResourceSignal:
        Timeout: PT60M
        Count: 1
  WebServerAMI:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: <%=image_id%>
      InstanceType: <%=instance_type%>
      IamInstanceProfile: {'Fn::GetAtt': [IAM, FrontendInstanceProfile]}
      SecurityGroupIds: ['Fn::GetAtt': [VPC, FrontendSecurityGroup]]
      SubnetId: {'Fn::GetAtt': [VPC, Subnet<%=azs.first%>]}
      KeyName: <%=ssh_key_name%>
      BlockDeviceMappings:
        - DeviceName: /dev/sda1
          Ebs:
            VolumeSize: 64
            VolumeType: gp2
      UserData:
        Fn::Base64: <%=file.call('bootstrap_chef.sh.erb',
          create_id: "AMICreate#{ami}",
          node_name: 'ami-${INSTANCE_ID}',
          run_list: [
            local_mode ? 'recipe[cdo-apps]' : 'role[unmonitored-frontend]'
          ],
          commit: commit,
          shutdown: true
        )%>
  AMI<%=ami%>: <%= lambda_fn.call 'AMIManager',
    DependsOn: "AMICreate#{ami}",
    InstanceId: {Ref: "WebServerAMI" } %>

  ASGCount: <%= lambda_fn.call 'CountASG',
    Default: {
      MinSize: 2,
      MaxSize: 20,
      DesiredCapacity: 2
    },
    AutoScalingGroupTags: [
      {Key: 'aws:cloudformation:stack-id', Value: {Ref: 'AWS::StackId'}},
      {Key: 'aws:cloudformation:logical-id', Value: 'WebServer'}
    ],
    LaunchConfiguration: {Ref: 'LaunchConfig'}
  %>
  LoadBalancer:
    Type: AWS::ElasticLoadBalancing::LoadBalancer
    Properties:
      LoadBalancerName: <%=stack_name%>
      CrossZone: true
      SecurityGroups: ['Fn::GetAtt': [VPC, ELBSecurityGroup]]
      Subnets: <%=public_subnets%>
      LBCookieStickinessPolicy:
        - PolicyName: CookieBasedPolicy
          CookieExpirationPeriod: 30
      Listeners:
        - LoadBalancerPort: 80
          InstancePort: 80
          Protocol: HTTP
          PolicyNames: [CookieBasedPolicy]
        - LoadBalancerPort: 443
          InstancePort: 80
          Protocol: HTTPS
          SSLCertificateId: <%=certificate_arn%>
          PolicyNames: [CookieBasedPolicy]
      HealthCheck:
        Target: HTTP:80/health_check
        HealthyThreshold: 2
        UnhealthyThreshold: 5
        Interval: 10
        Timeout: 5
      ConnectionDrainingPolicy:
        Enabled: true
        Timeout: 300
  WebServer:
    DependsOn: [ASGCount]
    Type: AWS::AutoScaling::AutoScalingGroup
    CreationPolicy:
      ResourceSignal:
        Timeout: PT50M
        Count: {'Fn::GetAtt': [ASGCount, DesiredCapacity]}
      AutoScalingCreationPolicy:
        MinSuccessfulInstancesPercent: 100
    UpdatePolicy:
#      AutoScalingReplacingUpdate:
#        WillReplace: true
      AutoScalingRollingUpdate:
        MaxBatchSize: 20
        MinInstancesInService: {'Fn::GetAtt': [ASGCount, DesiredCapacity]}
        MinSuccessfulInstancesPercent: 80
        PauseTime: PT50M
        SuspendProcesses: [ScheduledActions]
        WaitOnResourceSignals: true
    Properties:
      VPCZoneIdentifier: <%=subnets%>
      LaunchConfigurationName: {Ref: LaunchConfig}
      MinSize: {'Fn::GetAtt': [ASGCount, MinSize]}
      MaxSize: {'Fn::GetAtt': [ASGCount, MaxSize]}
      DesiredCapacity: {'Fn::GetAtt': [ASGCount, DesiredCapacity]}
      HealthCheckType: ELB
      HealthCheckGracePeriod: 2000
      LoadBalancerNames: [Ref: LoadBalancer]
      MetricsCollection:
        - Granularity: 1Minute
  ScaleUpPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AdjustmentType: PercentChangeInCapacity
      AutoScalingGroupName: {Ref: WebServer}
      MetricAggregationType: Average
      MinAdjustmentMagnitude: 1
      EstimatedInstanceWarmup: 600
      PolicyType: StepScaling
      StepAdjustments:
        # 50-60% cpu, +20% instances
        - MetricIntervalLowerBound: 0
          MetricIntervalUpperBound: 10
          ScalingAdjustment: 20
        # 60-70% cpu, +40% instances
        - MetricIntervalLowerBound: 10
          MetricIntervalUpperBound: 20
          ScalingAdjustment: 40
        # 70-90% cpu, +60% instances
        - MetricIntervalLowerBound: 20
          MetricIntervalUpperBound: 40
          ScalingAdjustment: 60
        # 90-100% cpu, +80% instances
        - MetricIntervalLowerBound: 40
          ScalingAdjustment: 80
  ScaleDownPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AdjustmentType: PercentChangeInCapacity
      AutoScalingGroupName: {Ref: WebServer}
      MetricAggregationType: Average
      MinAdjustmentMagnitude: 1
      EstimatedInstanceWarmup: 300
      PolicyType: StepScaling
      StepAdjustments:
        # 30-25% cpu, -10% instances
        - MetricIntervalUpperBound: 0
          MetricIntervalLowerBound: -5
          ScalingAdjustment: -10
        # 25-20% cpu, -15% instances
        - MetricIntervalUpperBound: -5
          MetricIntervalLowerBound: -10
          ScalingAdjustment: -15
        # 20-15% cpu, -20% instances
        - MetricIntervalUpperBound: -10
          MetricIntervalLowerBound: -15
          ScalingAdjustment: -20
        # 15-10% cpu, -30% instances
        - MetricIntervalUpperBound: -15
          MetricIntervalLowerBound: -20
          ScalingAdjustment: -40
        # 10-0% cpu, -50% instances
        - MetricIntervalUpperBound: -20
          ScalingAdjustment: -50
  ScaleUpAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: Scale-up if average CPU is greater than 50% for 10 minutes
      AlarmActions: [Ref: ScaleUpPolicy]
#      OKActions: [Ref: ScaleDownPolicy]
      MetricName: CPUUtilization
      Namespace: AWS/EC2
      Statistic: Average
      Period: 300
      EvaluationPeriods: 2
      Threshold: 50
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: AutoScalingGroupName
          Value: {Ref: WebServer}
  ScaleDownAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: Scale-down if average CPU is less than 30% for 10 minutes
      AlarmActions: [Ref: ScaleDownPolicy]
      MetricName: CPUUtilization
      Namespace: AWS/EC2
      Statistic: Average
      Period: 300
      EvaluationPeriods: 2
      Threshold: 30
      ComparisonOperator: LessThanOrEqualToThreshold
      Dimensions:
        - Name: AutoScalingGroupName
          Value: {Ref: WebServer}
  LaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      ImageId: {'Fn::GetAtt': [AMI<%=ami%>, ImageId]}
      InstanceType: <%=instance_type%>
      IamInstanceProfile: {'Fn::GetAtt': [IAM, FrontendInstanceProfile]}
      SecurityGroups: ['Fn::GetAtt': [VPC, FrontendSecurityGroup]]
      KeyName: <%=ssh_key_name%>
      BlockDeviceMappings:
        - DeviceName: /dev/sda1
          Ebs:
            VolumeSize: 64
            VolumeType: gp2
      UserData:
        Fn::Base64: <%=file.call('bootstrap_frontend.sh.erb',
          node_name: 'fe-${INSTANCE_ID}',
          resource_id: 'WebServer',
          commit: commit)%>

<%if environment == :production -%>
  # Scale up min instances at 4AM PDT (=11:00 UTC)
  ClassroomTrafficBegin:
    Type: AWS::AutoScaling::ScheduledAction
    Properties:
      AutoScalingGroupName: {Ref: WebServer}
      MinSize: 5
      Recurrence: "0 11 * * MON-FRI"
<% end -%>
  # Scale down min instances at 1PM PDT (=20:00 UTC)
  ClassroomTrafficEnd:
    Type: AWS::AutoScaling::ScheduledAction
    Properties:
      AutoScalingGroupName: {Ref: WebServer}
      MinSize: 3
      Recurrence: "0 20 * * MON-FRI"
  # Further scale down min instances at 8PM PDT (=3:00+1day UTC)
  Overnight:
    Type: AWS::AutoScaling::ScheduledAction
    Properties:
      AutoScalingGroupName: {Ref: WebServer}
      MinSize: 2
      Recurrence: "0 3 * * TUE-SAT"
<%
  %w(Dashboard Pegasus).each do |app|
    app_domain = "#{app == 'Dashboard' ? 'dashboard-' : ''}#{subdomain}"
-%>
  <%=app%>DNS:
    Type: AWS::Route53::RecordSetGroup
    Properties:
      HostedZoneName: <%=domain%>.
      RecordSets:
        - Name: <%=app_domain%>
          Type: A
          AliasTarget:
<%   if cdn_enabled -%>
            DNSName: {'Fn::GetAtt': [<%=app%>CDN, DomainName]}
            HostedZoneId: Z2FDTNDATAQYW2 # static ID for cloudfront aliases
<%   else -%>
            DNSName: {'Fn::GetAtt': [LoadBalancer, CanonicalHostedZoneName]}
            HostedZoneId: {'Fn::GetAtt': [LoadBalancer, CanonicalHostedZoneNameID]}
<%   end -%>
<%   if cdn_enabled -%>
  <%=app%>CDN:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig: <%= AWS::CloudFront.config_cloudformation(
        app.downcase.to_sym,
        "origin-#{subdomain}",
        [app_domain],
        {
          AcmCertificateArn: certificate_arn,
          MinimumProtocolVersion: 'TLSv1',
          SslSupportMethod: 'sni-only'
        }
      )%>
<%   end -%>
<% end -%>
<% if cdn_enabled -%>
  OriginDNS:
    Type: AWS::Route53::RecordSetGroup
    Properties:
      HostedZoneName: <%=domain%>.
      RecordSets:
        - Name: "origin-<%=subdomain%>"
          Type: A
          AliasTarget:
            HostedZoneId: {'Fn::GetAtt': [LoadBalancer, CanonicalHostedZoneNameID]}
            DNSName: {'Fn::GetAtt': [LoadBalancer, CanonicalHostedZoneName]}
<% end -%>
<% if environment == :production -%>
  GeocoderSubnetGroup:
    Type: AWS::ElastiCache::SubnetGroup
    Properties:
      Description: Geocoder Cache Subnet Group
      SubnetIds: <%=subnets%>
  GeocoderGroup:
    Type: AWS::ElastiCache::ReplicationGroup
    Properties:
      ReplicationGroupDescription: Geocoder Replication Group
      NumCacheClusters: 3
      Engine: redis
      CacheNodeType: cache.r3.large
      SecurityGroupIds: ['Fn::GetAtt': [VPC, RedisSecurityGroup]]
      CacheSubnetGroupName: {Ref: GeocoderSubnetGroup}
<% end -%>
  ActivitiesQueue:
    Type: AWS::SQS::Queue
    Properties:
      ReceiveMessageWaitTimeSeconds: 20
      VisibilityTimeout: 15
      QueueName: <%="activities-#{stack_name}"%>
      RedrivePolicy:
        maxReceiveCount: 3
        deadLetterTargetArn: {'Fn::GetAtt': [ActivitiesDeadQueue,Arn]}
  ActivitiesDeadQueue:
    Type: AWS::SQS::Queue
    Properties:
      ReceiveMessageWaitTimeSeconds: 20
      VisibilityTimeout: 15
      QueueName: <%="activities_dead-#{stack_name}"%>
<% unless environment == :production -%>
  Daemon:
    Type: AWS::EC2::Instance
    CreationPolicy:
      ResourceSignal:
        Timeout: PT60M
    Properties:
      ImageId: <%=image_id%>
      InstanceType: <%=instance_type%>
      IamInstanceProfile: {'Fn::GetAtt': [IAM, FrontendInstanceProfile]}
      KeyName: <%=ssh_key_name%>
      Tags: [{Key: Name, Value: <%=stack_name%>}]
      BlockDeviceMappings:
        - DeviceName: /dev/sda1
          Ebs:
            VolumeSize: 64
            VolumeType: gp2
      UserData:
        Fn::Base64: <%=file.call('bootstrap_chef.sh.erb',
          create_id: 'Daemon',
          node_name: '${ENVIRONMENT}-daemon',
          run_list: [
            local_mode ? 'recipe[cdo-apps]' : 'role[daemon]'
          ],
          shutdown: false,
          daemon: true
        )%>
      NetworkInterfaces:
        - AssociatePublicIpAddress: true
          DeviceIndex: 0
          GroupSet:
            - 'Fn::GetAtt': [VPC, FrontendSecurityGroup]
            - 'Fn::GetAtt': [VPC, GatewaySecurityGroup]
          SubnetId: {'Fn::GetAtt': [VPC, PublicSubnet<%=azs.first%>]}
<% end -%>
Outputs:
  DashboardURL:
    Value: "https://dashboard-<%=subdomain%>"
    Description: Dashboard URL
  PegasusURL:
    Value: "https://<%=subdomain%>"
    Description: Pegasus URL
