#!/bin/bash -x
# UserData bootstrap script for CloudFormation stack instances.
# Note: Every time this script's contents change,
# the LaunchConfiguration will be replaced in the CloudFormation stack.

STACK=${AWS::StackName}
REGION=${AWS::Region}

function ref() {
  aws cloudformation describe-stack-resources \
    --stack-name=$STACK \
    --logical-resource-id=$1 \
    --output=text \
    --region $REGION \
    | cut -f3
}

INSTANCE_ID=$(curl -s http://169.254.169.254/latest/meta-data/instance-id)
RESOURCE_ID=<%=resource_id%>
CHEF_CACHE=<%=local_mode ? '/etc/chef/local-mode-cache/cache' : '/var/chef/cache' %>

# This line causes the LaunchConfiguration to be replaced on each new commit.
COMMIT=<%=commit%>

# Remove instance-specific temp files left by aws-mon script.
rm -rf /var/tmp/aws-mon

# Update frontend hostname using local-mode chef-client.
pushd $CHEF_CACHE
  /opt/chef/bin/chef-client -z -N <%=node_name%> -o 'recipe[cdo-apps::hostname]'
popd

# Signal CompleteLifecycleAction, in case this instance was launched from an Auto Scaling process.
LIFECYCLE_HOOK=$(ref <%=hook%>)
AUTO_SCALING_GROUP=$(ref $RESOURCE_ID)
if [ -n "$LIFECYCLE_HOOK" ] && [ -n "$AUTO_SCALING_GROUP" ]; then
  aws autoscaling complete-lifecycle-action \
    --lifecycle-action-result CONTINUE \
    --instance-id $INSTANCE_ID \
    --lifecycle-hook-name $LIFECYCLE_HOOK \
    --auto-scaling-group-name $AUTO_SCALING_GROUP \
    --region $REGION \
    || true
fi

# Signal CloudFormation, in case this instance was launched from a CloudFormation stack update.
aws cloudformation signal-resource \
  --status SUCCESS \
  --unique-id $INSTANCE_ID \
  --stack-name $STACK \
  --logical-resource-id $RESOURCE_ID \
  --region $REGION \
  || true
