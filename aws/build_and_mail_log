#!/usr/bin/env ruby
#
# BUILD_AND_MAIL_LOG is a terrible name. The MAIL_LOG part was split out into CRONJOB.
#
# This script actually defers to BUILD for the actual building and then delivers a
# higher fidelity set of HipChat notifications than CRONJOB provides, e.g. red-colored
# notification messages when the build fails, gray colored blocks with Git commit
# messages, etc.
#
# FUTURE DIRECTION: This should probably be collapsed into BUILD itself.
#

require_relative '../deployment'
require 'cdo/rake_utils'
require 'cdo/hip_chat'
require 'cdo/only_one'
require 'mail'

def format_duration(total_seconds)
  total_seconds = total_seconds.to_i
  minutes = (total_seconds / 60).to_i
  seconds = total_seconds - (minutes * 60)
  "%.1d:%.2d minutes" % [minutes, seconds]
end

def main()
  start_time = Time.now.to_i
  # Run the build script and exit if it didn't do anything.
  script = File.expand_path('../build', __FILE__)
  log = `\"#{script}\" #{ARGV.join(' ')} 2>&1`.strip
  status = $?.exitstatus
  return status if status == 0 && log.empty?

  Dir.chdir(deploy_dir) do
    commit_url = "https://github.com/code-dot-org/code-dot-org/commit/#{RakeUtils.git_revision}"
    # Notify the HipChat channels about what happened.
    projects = ARGV.join(' ')
    time_message = " üïê #{format_duration(Time.now.to_i - start_time)}"
    if status == 0
      message = "<b>#{projects}</b> built." + time_message

      HipChat.log message, color: 'green'

      HipChat.developers message, color: 'green'
      HipChat.developers commit_url, color: 'gray', message_format: 'text'
    else
      message = "<b>#{projects}</b> failed to build!" + time_message

      HipChat.log message, color: 'red'
      HipChat.log "/quote #{log}", color: 'gray', message_format: 'text'

      HipChat.developers message, color: 'red', notify: 1
      HipChat.developers commit_url, color: 'gray', message_format: 'text'
    end
  end

  # Return the same output and status code that BUILD returned.
  puts log
  status
end

main() if only_one_running?(__FILE__)
