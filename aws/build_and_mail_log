#!/usr/bin/env ruby
#
# BUILD_AND_MAIL_LOG is a terrible name. The MAIL_LOG part was split out into CRONJOB.
#
# This script actually defers to BUILD for the actual building and then delivers a
# higher fidelity set of HipChat notifications than CRONJOB provides, e.g. red-colored
# notification messages when the build fails, gray colored blocks with Git commit
# messages, etc.
#
# FUTURE DIRECTION: This should probably be collapsed into BUILD itself.
#

require_relative '../deployment'
require 'cdo/rake_utils'
require 'cdo/hip_chat'
require 'cdo/only_one'
require 'mail'

def main()
  # Run the build script and exit if it didn't do anything.
  script = File.expand_path('../build', __FILE__)
  log = `\"#{script}\" #{ARGV.join(' ')} 2>&1`.strip
  status = $?.exitstatus
  return status if status == 0 && log.empty?

  # Something was built, so retrieve the commit message(s) that triggered the build.
  commit_log = IO.read(deploy_dir('rebuild')).strip if File.file?(deploy_dir('rebuild'))

  # Notify the HipChat channels about what happened.
  projects = ARGV.join(' ')
  if status == 0
    HipChat.log "<b>#{projects}</b> built.", color:'green'

    HipChat.developers "<b>#{projects}</b> built.", color:'green'
    HipChat.developers "/quote #{commit_log}", color:'gray', message_format:'text'
  else
    HipChat.log "<b>#{projects}</b>  failed to build!", color:'red'
    HipChat.log "/quote #{log}", color:'gray', message_format:'text'

    HipChat.developers "<b>#{projects}</b>  failed to build!", color:'red', notify:1
    HipChat.developers "/quote #{commit_log}", color:'gray', message_format:'text'
  end

  # Return the same output and status code that BUILD returned.
  puts log
  status
end

main() if only_one_running?(__FILE__)
