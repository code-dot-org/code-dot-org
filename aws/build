#!/usr/bin/env ruby
#
# BUILD is core command in our polling-based continuous deployment system. It checks for upstream
# commits on the current branch.
#
# If no changes are detected it exits silently.
#
# If changes are detected, BUILD fetches them, gets the commit messages for them (written out as
# the temp file 'rebuild') and displays them in HipChat as a purple "build started" message. Then
# BUILD invokes BUILD.RAKE to run the build using dependency-based build rules.
#
# NOTE: When the build starts a BUILD-STARTED file is created, and this file is deleted when the
#   build script finishes. This file is NOT deleted if the build system itself is broken and the
#   presence of this file will cause the system to attempt to pull and rebuild constantly over and
#   over until it succeeds. This used to happen frequently but as the build system has matured it
#   now almost never happens. But, this is probably a safeguard to keep around because in the rare
#   cases where the build scripts are damaged, this ensures the machines can be restored simply by
#   checking in a fix (vs. needing to SSH to the machine and fix manually).
#
# NOTE: Creating the BUILD-STARTED (e.g. `ssh daemon.code.org "touch ~/production/build-started"`) is
#   an easy way to force a rebuild without needing to make a commit.
#
require_relative '../deployment'
require 'cdo/rake_utils'
require 'cdo/hip_chat'
require 'cdo/only_one'

def main()
  Dir.chdir(deploy_dir) do
    return 0 unless RakeUtils.git_updates_available? || File.file?('build-started') || !CDO.daemon
    FileUtils.touch 'build-started'

    RakeUtils.git_fetch
    count = RakeUtils.git_update_count
    RakeUtils.git_pull if count > 0
    count = [1, count].max

    log = `git log --pretty=format:"%h %s (%an)" -n #{count}`
    IO.write(deploy_dir('rebuild'), log)

    HipChat.log "https://github.com/code-dot-org/code-dot-org/commit/#{`git rev-parse HEAD`}", message_format: 'text', color: 'purple'

    # Ensure updated Gemfile.lock dependencies are installed.
    RakeUtils.bundle_install

    # Run `sudo chef-client` to ensure that the deploy respect updates to the Chef config
    # (e.g. the cdo-servers attribute describing which servers to deploy).
    Dir.chdir(aws_dir) do
      # Ensure the chef cookbooks are up to date.
      RakeUtils.rake '--rakefile', 'build.rake', 'chef_update'
      RakeUtils.system 'sudo', 'chef-client'
    end

    status = 1
    Dir.chdir(aws_dir) do
      status = RakeUtils.rake '--rakefile', 'build.rake', *ARGV
    end

    FileUtils.rm 'build-started' if File.file?('build-started')

    exit status
  end
end

main() if only_one_running?(__FILE__)
