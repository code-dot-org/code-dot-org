#!/usr/bin/env ruby
#
# CI_BUILD is the core command in our polling-based continuous deployment system. It checks for upstream
# commits on the current branch.
#
# If no changes are detected it exits silently.
#
# If changes are detected, CI_BUILD fetches them, gets the commit messages for them (written out as
# the temp file 'rebuild') and displays them in chat as a purple "build started" message. Then
# CI_BUILD invokes the 'ci' Rake task to run the build.
#
# NOTE: When the build starts a BUILD-STARTED file is created, and this file is deleted when the
#   build script finishes. This file is NOT deleted if the build system itself is broken and the
#   presence of this file will cause the system to attempt to pull and rebuild constantly over and
#   over until it succeeds. This may happen often, but it is probably a safeguard to keep around because
#   in the rare cases where the build scripts are damaged, this ensures the machines can be restored simply
#   by checking in a fix (vs. needing to SSH to the machine and fix manually).
#
# NOTE: running `touch build-started` (or running the `bin/start-build` script)
# is an easy way to force a rebuild without needing to make a commit.
#
require_relative '../lib/cdo/only_one'
exit(0) unless only_one_running?(__FILE__)

require 'active_support/inflector'
require_relative '../deployment'
require 'cdo/aws/s3'
require 'cdo/chat_client'
require 'cdo/developers_topic'
require 'cdo/github'
require 'cdo/git_utils'
require 'cdo/honeybadger'
require 'cdo/infra_production_topic'
require 'cdo/rake_utils'
require 'cdo/test_server_status'
require 'cdo/metrics_helper'
require 'dynamic_config/dcdo'
require 'aws-sdk-cloudwatch'

STARTED = 'build-started'.freeze
S3_LOGS_BUCKET = 'cdo-build-logs'.freeze
S3_LOGS_PREFIX = CDO.name.freeze

# Upload the given log to the logs s3 bucket.
# @param [String] key where uploaded log should be located
# @param [String] body of log to upload
# @param [Hash] metadata to be attached to uploaded log
# @return [String] Hyperlink to uploaded log, or empty string
def upload_log_and_get_link(key, body, metadata)
  log_url = AWS::S3::LogUploader.
      new(S3_LOGS_BUCKET, S3_LOGS_PREFIX).
      upload_log(
        key,
        body,
        {metadata: metadata}
      )
  " <a href='#{log_url}'>‚òÅ Log on S3</a>"
rescue Exception => msg
  ChatClient.log "Uploading log to S3 failed: #{msg}"
  return ''
end

def build
  Dir.chdir(deploy_dir) do
    return 0 unless RakeUtils.git_updates_available? || File.file?(STARTED) || !CDO.daemon
    FileUtils.touch STARTED

    RakeUtils.git_fetch
    count = RakeUtils.git_update_count
    RakeUtils.git_pull if count > 0
    count = [1, count].max

    log = `git log --pretty=format:"%h %s (%an)" -n #{count}`
    IO.write(deploy_dir('rebuild'), log)

    git_revision = RakeUtils.git_revision
    git_revision_short = GitUtils.git_revision_short

    ChatClient.log "https://github.com/code-dot-org/code-dot-org/commit/#{git_revision}", message_format: 'text', color: 'purple'
    write_build_status rack_env, git_revision_short, :start

    # Ensure updated Gemfile.lock dependencies are installed.
    RakeUtils.bundle_install

    Honeybadger.notify_new_release(rack_env, git_revision)

    status = begin
      result = RakeUtils.rake_stream_output 'ci'

      if CDO.test_system? && git_revision != RakeUtils.git_revision
        ChatClient.log "git revision unexpectedly changed from #{git_revision} to #{RakeUtils.git_revision} during DTT", color: 'red'
        raise
      end

      result
    rescue => e
      CDO.backtrace e
    end

    FileUtils.rm STARTED if File.file?(STARTED)

    status
  end
end

def main
  start_time = Time.now
  # Run the build command and exit if it didn't do anything.
  status = 0
  log = RakeUtils.capture do
    status = build
  rescue => e
    status = "Error: #{e.message}\n#{CDO.backtrace e}"
  end
  return status if status == 0 && log.empty?

  Dir.chdir(deploy_dir) do
    projects = ARGV.join(' ')
    projects = 'websites' if projects.empty?

    commit_hash = RakeUtils.git_revision
    commit_hash_short = GitUtils.git_revision_short
    commit_url = "https://github.com/code-dot-org/code-dot-org/commit/#{commit_hash}"

    duration = Time.now.to_i - start_time.to_i
    formatted_duration = RakeUtils.format_duration(duration)
    time_message = " üïê #{formatted_duration}"

    # Upload build log to S3
    log_link = upload_log_and_get_link(
      start_time.strftime('%Y%m%dT%H%M%S%z'),
      <<-LOG,
#{log}
#{status}
#{projects} #{status == 0 ? 'built' : 'failed'} in #{formatted_duration}
      LOG
      {
        commit: commit_hash,
        duration: duration.to_s,
        success: (status == 0).to_s
      }
    )

    # Notify the ChatClient channels about what happened.
    if status == 0
      message = "<b>#{projects}</b> built." + time_message + log_link
      ChatClient.log message, color: 'green'

      write_build_status rack_env, commit_hash_short, :success

      if CDO.test_system?
        ChatClient.log "<@#{DevelopersTopic.dotd}> DTT finished", color: 'purple'
        mark_dtt_green
      end

      if rack_env == :levelbuilder
        DevelopersTopic.set_dtl 'yes'
      end

      if rack_env == :production
        ChatClient.message 'server operations', message, color: 'green'
        ChatClient.message 'server operations', commit_url, color: 'gray', message_format: 'text'
        DevelopersTopic.set_dtp 'yes'
        InfraProductionTopic.set_dtp_commit GitHub.sha('production')
        ChatClient.set_reminder(
          'developers',
          "@#{DevelopersTopic.dotd}",
          "to check Zendesk in 2 hours"
         )

        # Check hoc_mode and hoc_launch only on successful DTPs, so that we get about 1 reminder per
        # day to bring staging, test and production to the same hoc_mode and hoc_launch after a
        # hoc_mode or hoc_launch change. Note that this will only warn us if test and production
        # (but not staging) are out of sync.
        check_hoc_mode
        check_hoc_launch
      end
    else
      message = "<b>#{projects}</b> failed to build!" + time_message + log_link
      ChatClient.log message, color: 'red'
      ChatClient.log "<@#{DevelopersTopic.dotd}> build failure", color: 'red' unless rack_env?(:adhoc)

      ChatClient.message 'server operations', message, color: 'red', notify: 1
      ChatClient.message 'server operations', commit_url, color: 'gray', message_format: 'text'

      write_build_status rack_env, commit_hash_short, :failed

      if CDO.test_system?
        DevelopersTopic.set_dtt 'no (robo-DTT failed)'
        ChatClient.log "*** Before you manually re-run a test, please ensure that the cabal who owns that test is actively tracking de-flaking. ***", color: 'yellow'
      end
    end

    if CDO.test_system?
      tests_over_flake_threshold = `./bin/test_flakiness -x 0.2`
      flake_factor_message = {}
      if tests_over_flake_threshold.empty?
        flake_factor_message[:color] = 'green'
        flake_factor_message[:message] = "Hooray! There are no UI tests over 0.2 flakiness."
      else
        flake_factor_message[:color] = 'red'
        flake_factor_message[:message] = "Tests exceeding 0.2 flakiness threshold: <br/><pre>#{tests_over_flake_threshold}</pre><br/><br/> Please ensure these tests are being investigated!"
      end
      ChatClient.log flake_factor_message[:message], color: flake_factor_message[:color]
    end

    emit_deploy_metric(rack_env.to_s.titleize, status == 0)
  end

  # Return the same output and status code that BUILD returned.
  puts log
  status
end

def check_hoc_mode
  hoc_mode = DCDO.get('hoc_mode', false)
  if hoc_mode != CDO.default_hoc_mode
    # The test machine cannot remember DCDO params, so its hoc_mode is controlled by
    # CDO.default_hoc_mode.
    msg = "<!here> #{rack_env} hoc_mode (#{hoc_mode.inspect}) and default_hoc_mode "\
      "(#{CDO.default_hoc_mode.inspect}) are out of sync. Please update CDO.default_hoc_mode in "\
      "github, DCDO hoc_mode in staging, and DCDO hoc_mode in production to the same values, so "\
      "that our staging, test and production environments all show the same version of our site."
    ChatClient.log msg
  end
end

def check_hoc_launch
  hoc_launch = DCDO.get('hoc_launch', false)
  if hoc_launch != CDO.default_hoc_launch
    # The test machine cannot remember DCDO params, so its hoc_launch is controlled by
    # CDO.default_hoc_launch.
    msg = "<!here> #{rack_env} hoc_launch (#{hoc_launch.inspect}) and default_hoc_launch "\
      "(#{CDO.default_hoc_launch.inspect}) are out of sync. Please update CDO.default_hoc_launch in "\
      "github, DCDO hoc_launch in staging, and DCDO hoc_launch in production to the same values, so "\
      "that our staging, test and production environments all show the same version of our site."
    ChatClient.log msg
  end
end

def mark_dtt_green
  # Look at the HEAD revision on the test machine, rather than the one in
  # GitHub. Otherwise, if someone pushes more changes to the test branch while
  # the DTT is running, we might accidentally, automatically mark those
  # untested changes green.
  test_branch_sha = GitUtils.git_revision_short

  msg = "Automatically marking commit #{test_branch_sha} green"
  ChatClient.log msg
  ChatClient.message 'deploy-status', msg

  TestServerStatus.mark_green test_branch_sha, Metrics::AUTOMATIC
end

# Log details of a build to metrics database.
# TODO: (suresh) This method will eventually be used to write build status for all managed environments.
# @param [Symbol] environment
# @param [String] commit_hash
# @param [Symbol] status - :start, :success, :failed
def write_build_status(environment, commit_hash, status)
  event = "#{environment}_#{status}"
  if environment == :staging
    Metrics.write_metric(event, commit_hash, Metrics::AUTOMATIC)
  end
end

def emit_deploy_metric(deployment_stage, successful)
  Aws::CloudWatch::Client.new.put_metric_data(
    {
      namespace: 'DEPLOYMENTS',
      metric_data: [{
        metric_name: "#{deployment_stage}#{successful ? 'Successful' : 'Failed'}",
        value: 1
      }]
    }
  )
rescue => error
  ChatClient.log 'Unable to emit metrics', color: 'red'
  ChatClient.log "/quote #{error}", color: 'gray', message_format: 'text'
end

main
