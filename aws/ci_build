#!/usr/bin/env ruby
#
# CI_BUILD is the core command in our polling-based continuous deployment system. It checks for upstream
# commits on the current branch.
#
# If no changes are detected it exits silently.
#
# If changes are detected, CI_BUILD fetches them, gets the commit messages for them (written out as
# the temp file 'rebuild') and displays them in chat as a purple "build started" message. Then
# CI_BUILD invokes the 'ci' Rake task to run the build.
#
# NOTE: When the build starts a BUILD-STARTED file is created, and this file is deleted when the
#   build script finishes. This file is NOT deleted if the build system itself is broken and the
#   presence of this file will cause the system to attempt to pull and rebuild constantly over and
#   over until it succeeds. This may happen often, but it is probably a safeguard to keep around because
#   in the rare cases where the build scripts are damaged, this ensures the machines can be restored simply
#   by checking in a fix (vs. needing to SSH to the machine and fix manually).
#
# NOTE: running `touch build-started` (or running the `bin/start-build` script)
# is an easy way to force a rebuild without needing to make a commit.
#

require 'active_support/inflector'
require_relative '../deployment'
require 'cdo/aws/s3'
require 'cdo/chat_client'
require 'cdo/developers_topic'
require 'cdo/github'
require 'cdo/git_utils'
require 'cdo/honeybadger'
require 'cdo/infra_production_topic'
require 'cdo/rake_utils'
require 'cdo/only_one'

STARTED = 'build-started'.freeze
CHAT_LOG_TAIL_LENGTH = 40
S3_LOGS_BUCKET = 'cdo-build-logs'.freeze
S3_LOGS_PREFIX = CDO.name.freeze

# Upload the given log to the logs s3 bucket.
# @param [String] key where uploaded log should be located
# @param [String] body of log to upload
# @param [Hash] metadata to be attached to uploaded log
# @return [String] Hyperlink to uploaded log, or empty string
def upload_log_and_get_link(key, body, metadata)
  log_url = AWS::S3::LogUploader.
      new(S3_LOGS_BUCKET, S3_LOGS_PREFIX).
      upload_log(
        key,
        body,
        {metadata: metadata}
      )
  " <a href='#{log_url}'>‚òÅ Log on S3</a>"
rescue Exception => msg
  ChatClient.log "Uploading log to S3 failed: #{msg}"
  return ''
end

def build
  Dir.chdir(deploy_dir) do
    return 0 unless RakeUtils.git_updates_available? || File.file?(STARTED) || !CDO.daemon
    FileUtils.touch STARTED

    RakeUtils.git_fetch
    count = RakeUtils.git_update_count
    RakeUtils.git_pull if count > 0
    count = [1, count].max

    log = `git log --pretty=format:"%h %s (%an)" -n #{count}`
    IO.write(deploy_dir('rebuild'), log)

    git_revision = `git rev-parse HEAD`
    ChatClient.log "https://github.com/code-dot-org/code-dot-org/commit/#{git_revision}", message_format: 'text', color: 'purple'
    Honeybadger.notify_new_release(rack_env, git_revision)

    # Ensure updated Gemfile.lock dependencies are installed.
    RakeUtils.bundle_install

    status = begin
      RakeUtils.rake_stream_output 'ci'
    rescue => e
      CDO.backtrace e
    end

    FileUtils.rm STARTED if File.file?(STARTED)

    status
  end
end

def main
  start_time = Time.now
  # Run the build command and exit if it didn't do anything.
  status = 0
  log = RakeUtils.capture do
    begin
      status = build
    rescue => e
      status = "Error: #{e.message}\n#{CDO.backtrace e}"
    end
  end
  return status if status == 0 && log.empty?

  Dir.chdir(deploy_dir) do
    projects = ARGV.join(' ')
    projects = 'websites' if projects.empty?

    commit_hash = RakeUtils.git_revision
    commit_url = "https://github.com/code-dot-org/code-dot-org/commit/#{commit_hash}"

    duration = Time.now.to_i - start_time.to_i
    formatted_duration = RakeUtils.format_duration(duration)
    time_message = " üïê #{formatted_duration}"

    # Upload build log to S3
    log_link = upload_log_and_get_link(
      start_time.strftime('%Y%m%dT%H%M%S%z'),
      <<-LOG,
#{log}
#{status}
#{projects} #{status == 0 ? 'built' : 'failed'} in #{formatted_duration}
      LOG
      {
        commit: commit_hash,
        duration: duration.to_s,
        success: (status == 0).to_s
      }
    )

    # Notify the ChatClient channels about what happened.
    if status == 0
      message = "<b>#{projects}</b> built." + time_message + log_link
      ChatClient.log message, color: 'green'

      if rack_env == :test
        ChatClient.log "<@#{DevelopersTopic.dotd}> DTT finished", color: 'purple'
      end

      if rack_env == :levelbuilder
        DevelopersTopic.set_dtl 'yes'
      end

      if rack_env == :production
        ChatClient.message 'server operations', message, color: 'green'
        ChatClient.message 'server operations', commit_url, color: 'gray', message_format: 'text'
        DevelopersTopic.set_dtp 'yes'
        InfraProductionTopic.set_dtp_commit GitHub.sha('production')
      end
    else
      message = "<b>#{projects}</b> failed to build!" + time_message + log_link
      truncated_log = <<-LOG
Showing last #{CHAT_LOG_TAIL_LENGTH} lines of build log:
#{log.lines.last(CHAT_LOG_TAIL_LENGTH).join('\n')}
      LOG
      ChatClient.log message, color: 'red'
      ChatClient.log "/quote #{truncated_log}", color: 'gray', message_format: 'text' unless log.empty?
      ChatClient.log "/quote #{status}", color: 'gray', message_format: 'text' unless status.is_a?(String) && status.empty?
      ChatClient.log '<!here> build failure', color: 'red'

      ChatClient.message 'server operations', message, color: 'red', notify: 1
      ChatClient.message 'server operations', commit_url, color: 'gray', message_format: 'text'
    end

    emit_deploy_metric(rack_env.to_s.titleize, status == 0)
  end

  # Return the same output and status code that BUILD returned.
  puts log
  status
end

def emit_deploy_metric(deployment_stage, successful)
  Aws::CloudWatch::Client.new.put_metric_data(
    {
      namespace: 'DEPLOYMENTS',
      metric_data: [{
        metric_name: "#{deployment_stage}#{successful ? 'Successful' : 'Failed'}",
        value: 1
      }]
    }
  )
rescue => error
  ChatClient.log 'Unable to emit metrics', color: 'red'
  ChatClient.log "/quote #{error}", color: 'gray', message_format: 'text'
end

main if only_one_running?(__FILE__)
