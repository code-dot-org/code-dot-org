---
# Drone CI pipeline running at: https://drone.cdn-code.org/code-dot-org/code-dot-org/
#
# Docs here: https://docs.google.com/document/d/1Qls20xfNN6T_DErOMwVQOFJsxAEAdMWFHzBDIbxyUQQ/edit#heading=h.9bln2fv2lgqd
#
# NOTE: after making changes to this file, you'll need to sign them using
# `drone sign code-dot-org/code-dot-org --save`

kind: pipeline
type: docker
name: unit

clone:
  disable: true

steps:
  - name: info
    image: curlimages/curl
    commands:
      # If running on EC2, get hostname from ec2 metadata
      - "IMDS_TOKEN=$(curl -s -X PUT http://169.254.169.254/latest/api/token -H \"X-aws-ec2-metadata-token-ttl-seconds: 21600\")"
      - "hostname=$(curl -s -H \"X-aws-ec2-metadata-token: $IMDS_TOKEN\" http://169.254.169.254/latest/meta-data/public-hostname)"
      - echo "Running on $hostname"

  # We cache a clone of staging in the `cache-staging-clone` pipeline
  - name: get-cached-staging
    image: plugins/s3-cache
    settings:
      filename: cache-staging-clone.tar
      endpoint: s3://cdo-drone
      restore: true
      debug: true
      pull: true
      mount:
        - .

  - name: checkout
    image: bitnami/git
    commands:
      - git lfs install --skip-repo
      # We should be in a cached git repo, but clone if the cache failed
      - "[ -d .git ] || (echo 'WARNING: get-cached-staging failed: checkout will be SLOW and LFS $$$!' && git clone --branch $DRONE_BRANCH $DRONE_GIT_HTTP_URL .)"
      # Checkout our target branch (=the PR)
      - git fetch origin $DRONE_SOURCE_BRANCH
      - git checkout $DRONE_SOURCE_BRANCH
      - git pull
      - git reset --hard $DRONE_COMMIT
      # Fetch the target branch (which is staging for pull requests.) We need this for determining which tests to run based on changed files.
      - git remote set-branches --add origin $DRONE_TARGET_BRANCH
      - git fetch --depth 100 origin $DRONE_TARGET_BRANCH
      # Merge so we're up-to-date with the target before running tests.
      - git config user.name "Drone"
      - git config user.email "drone-fake-user@code.org"
      - git merge origin/$DRONE_TARGET_BRANCH

  - name: restore-cache
    image: plugins/s3-cache
    settings:
      endpoint: s3://cdo-drone
      debug: true
      pull: true
      restore: true
      filename: unit-tests-cache-ubuntu-20.tar

  - name: unit-tests
    # see: docker/dockerfiles/Dockerfile
    image: codedotorg/code-dot-org:1.9.3
    pull: always
    volumes:
      - name: rbenv
        path: /home/circleci/.rbenv
      - name: mysql
        path: /var/lib/mysql
    environment:
      # Each Drone secret below must be explicitly written to locals.yml in /docker/unit_tests.sh
      CLOUDFRONT_KEY_PAIR_ID:
        from_secret: CLOUDFRONT_KEY_PAIR_ID
      CLOUDFRONT_PRIVATE_KEY:
        from_secret: CLOUDFRONT_PRIVATE_KEY
    commands:
      - sudo chown -R circleci:circleci .
      # cache is restored to source directory, so we need to copy it into the right place
      - cp -rn "$(pwd)/home/circleci/.rbenv" /home/circleci || true
      - rm -rf "$(pwd)/home/circleci/.rbenv"
      # Depended on by CircleUtils: https://github.com/code-dot-org/code-dot-org/blob/56c4061afb55432ba8ccecc72b5b960ebd9480aa/lib/cdo/circle_utils.rb#L19
      - export CIRCLE_SHA1=$DRONE_COMMIT
      - EXIT_CODE=0
      - /entrypoint.sh docker/unit_tests.sh || EXIT_CODE=$?
      - while pgrep bash >/dev/null; do echo "found bash process; keeping container alive"; sleep 20; done
      - exit $EXIT_CODE

  - name: update-cache
    image: plugins/s3-cache
    volumes:
      - name: rbenv
        path: /home/circleci/.rbenv
    settings:
      endpoint: s3://cdo-drone
      debug: true
      pull: true
      rebuild: true
      filename: unit-tests-cache-ubuntu-20.tar
      mount:
        - /home/circleci/.rbenv

volumes:
  - name: rbenv
    temp: {}
  - name: mysql
    temp: {}

trigger:
  branch:
    exclude:
      - "production"
      - "test"
      - "levelbuilder"
  event:
    - pull_request

---
kind: pipeline
type: docker
name: ui

clone:
  disable: true

services:
  - name: ui-tests-redis
    image: redis
    ports:
      - 6379

steps:
  - name: info
    image: curlimages/curl
    commands:
      # If running on EC2, get hostname from ec2 metadata
      - "IMDS_TOKEN=$(curl -s -X PUT http://169.254.169.254/latest/api/token -H \"X-aws-ec2-metadata-token-ttl-seconds: 21600\")"
      - "hostname=$(curl -s -H \"X-aws-ec2-metadata-token: $IMDS_TOKEN\" http://169.254.169.254/latest/meta-data/public-hostname)"
      - echo "Running on $hostname"

  # We cache a clone of staging in the `cache-staging-clone` pipeline
  - name: get-cached-staging
    image: plugins/s3-cache
    settings:
      filename: cache-staging-clone.tar
      endpoint: s3://cdo-drone
      restore: true
      debug: true
      pull: true
      mount:
        - .

  - name: checkout
    image: bitnami/git
    commands:
      - git lfs install --skip-repo
      # We should be in a cached git repo, but clone if the cache failed
      - "[ -d .git ] || (echo 'get-cached-staging failed: checkout will be SLOW and LFS $$$!' && git clone --branch $DRONE_BRANCH $DRONE_GIT_HTTP_URL .)"
      # Checkout our target branch (the PR's branch).
      - git fetch origin $DRONE_SOURCE_BRANCH
      - git checkout $DRONE_SOURCE_BRANCH
      - git pull
      - git reset --hard $DRONE_COMMIT
      # Also fetch the target branch (which is staging or staging-next for pull requests.) We need this for determining which tests to run based on changed files.
      - git remote set-branches --add origin $DRONE_TARGET_BRANCH
      - git fetch --depth 100 origin $DRONE_TARGET_BRANCH
      # Merge so we're up-to-date with the target before running tests.
      - git config user.name "Drone"
      - git config user.email "drone-fake-user@code.org"
      - git merge origin/$DRONE_TARGET_BRANCH

  - name: restore-cache
    image: plugins/s3-cache
    settings:
      endpoint: s3://cdo-drone
      debug: true
      pull: true
      restore: true
      filename: ui-tests-cache-ubuntu-20.tar

  - name: ui-tests
    # see: docker/dockerfiles/Dockerfile
    image: codedotorg/code-dot-org:1.9.3
    pull: always
    volumes:
      - name: rbenv
        path: /home/circleci/.rbenv
      - name: mysql
        path: /var/lib/mysql
    environment:
      # Each Drone secret below must be explicitly written to locals.yml in /docker/ui_tests.sh
      CLOUDFRONT_KEY_PAIR_ID:
        from_secret: CLOUDFRONT_KEY_PAIR_ID
      CLOUDFRONT_PRIVATE_KEY:
        from_secret: CLOUDFRONT_PRIVATE_KEY
      PROPERTIES_ENCRYPTION_KEY:
        from_secret: PROPERTIES_ENCRYPTION_KEY
      FIREBASE_NAME:
        from_secret: FIREBASE_NAME
      FIREBASE_SECRET:
        from_secret: FIREBASE_SECRET
      FIREBASE_SHARED_SECRET:
        from_secret: FIREBASE_SHARED_SECRET
      SAUCE_USERNAME:
        from_secret: SAUCE_USERNAME
      SAUCE_ACCESS_KEY:
        from_secret: SAUCE_ACCESS_KEY
    commands:
      - sudo chown -R circleci:circleci .
      # cache is restored to source directory, so we need to copy it into the right place
      - cp -rn "$(pwd)/home/circleci/.rbenv" /home/circleci || true
      # Depended on by CircleUtils: https://github.com/code-dot-org/code-dot-org/blob/56c4061afb55432ba8ccecc72b5b960ebd9480aa/lib/cdo/circle_utils.rb#L19
      - export CIRCLE_SHA1=$DRONE_COMMIT
      - EXIT_CODE=0
      - /entrypoint.sh docker/ui_tests.sh || EXIT_CODE=$?
      - while pgrep bash >/dev/null; do echo "found bash process; keeping container alive"; sleep 20; done
      - exit $EXIT_CODE

  - name: update-cache
    image: plugins/s3-cache
    volumes:
      - name: rbenv
        path: /home/circleci/.rbenv
    settings:
      endpoint: s3://cdo-drone
      debug: true
      pull: true
      rebuild: true
      filename: ui-tests-cache-ubuntu-20.tar
      mount:
        - /home/circleci/.rbenv
        # Used to avoid re-seeding UI test data unless something changed - see cached_ui_test task in https://github.com/code-dot-org/code-dot-org/blob/staging/dashboard/lib/tasks/seed.rake
        - dashboard/db/ui_test_data.hash
        - dashboard/db/ui_test_data.sql

volumes:
  - name: rbenv
    temp: {}
  - name: mysql
    temp: {}

trigger:
  branch:
    exclude:
      - "production"
      - "test"
      - "levelbuilder"
  event:
    - pull_request

---
# On push, cache a clone of staging to drone's S3 bucket.
# The staging cache reduces git bandwidth in PR pipelines.
kind: pipeline
type: docker
name: cache-staging-clone

clone:
  disable: true

steps:
  - name: clone
    image: bitnami/git
    commands:
      - git lfs install
      - git clone --branch $DRONE_BRANCH $DRONE_GIT_HTTP_URL . 

  - name: cache-staging-clone
    image: plugins/s3-cache
    settings:
      filename: cache-staging-clone.tar
      endpoint: s3://cdo-drone
      rebuild: true
      debug: true
      pull: true
      mount:
        - .

trigger:
  branch:
    - "staging"
    - "staging-next"
  event:
    - push
---
kind: signature
hmac: e51f14b739c978b477222c272341dc9552ad743ee7658a48cf75ee5d5b976d7f

...
