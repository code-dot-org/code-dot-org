require 'cdo/db'
DB = PEGASUS_DB

# A wrapper class around the PEGASUS_DB[:properties] table.
class Properties
  @@table = DB[:properties]

  # @param key [String] the key to retrieve the value of.
  # @return [JSON] the value associated with key, nil if key does not exist.
  def self.get(key)
    i = @@table.where(key: key.to_s).first
    return nil unless i
    JSON.parse(StringIO.new(i[:value]))
  end

  # @param key [String] the key to insert
  # @param value [String] the string to insert as JSON
  # @return [String] the value parameter
  def self.set(key, value)
    key = key.to_s

    i = @@table.where(key: key).first
    if i.nil?
      @@table.insert(key: key, value: value.to_json)
    else
      @@table.where(key: key).update(value: value.to_json)
    end

    value
  end

  # @param key [String] the key to delete.
  # @return [Integer] the number of rows deleted.
  def self.delete(key)
    @@table.where(key: key).delete
  end

  def self.get_user_metrics
    # Include stale default values as of 2016-11-23 so we never show 0. These
    # would be used, for example, if the DB is unavailable or the cron failed to
    # run properly.
    get(:about_stats) || {
      'percent_female' => 43,
      'number_served' => 296_598_685,
      'number_students' => 14_126_655,
      'number_teachers' => 451_385
    }
  end
end

def fetch_metrics
  # Include stale default values as of 2016-11-23 so we never show 0. These
  # would be used, for example, if the DB is unavailable.
  Properties.get(:metrics) || {
    'created_at' => '2016-11-23T19:48:27+00:00',
    'created_on' => '2016-11-23',
    'petition_signatures' => 1_712_470,
    'lines_of_code' => 20_886_942_901
  }
end

def fetch_hoc_metrics
  # Include stale default values as of 2016-11-23 so we never show 0. These
  # would be used, for example, if the DB is unavailable or the cron failed to
  # run properly.
  Properties.get(:hoc_metrics) || {
    'started' => 296_598_685,
    'finished' => 40_756_181,
    # Generated by `fetch_hoc_metrics['cities'].first(40).to_h`. Note that we
    # take the top forty, as that many cities are shown on the leaderboard.
    'cities' => {
      'Other' => 52_879_681,
      'Seattle' => 13_271_785,
      'Boardman' => 6_497_509,
      'Woodbridge' => 2_987_867,
      'Columbia' => 1_814_103,
      'London' => 1_729_792,
      'Los Angeles' => 1_707_810,
      'San Jose' => 1_407_983,
      'Taipei' => 1_374_263,
      'Houston' => 1_314_146,
      'Durham' => 1_304_807,
      'Springfield' => 1_241_142,
      'Tallahassee' => 1_001_113,
      'San Diego' => 997_464,
      'Chicago' => 944_811,
      'Raleigh' => 886_047,
      'Seoul' => 871_096,
      'Las Vegas' => 868_783,
      'Salt Lake City' => 867_274,
      'Athens' => 860_633,
      'Brooklyn' => 815_511,
      'Indianapolis' => 727_048,
      'Lincoln' => 689_317,
      'Nashville' => 669_805,
      'Austin' => 659_170,
      'Minneapolis' => 658_649,
      'San Antonio' => 650_068,
      'Philadelphia' => 640_956,
      'Melbourne' => 622_838,
      'Everett' => 581_041,
      'Long Beach' => 575_758,
      'New York' => 546_107,
      'Denver' => 544_753,
      'Saint Paul' => 543_956,
      'Istanbul' => 532_067,
      'Miami' => 522_367,
      'Toronto' => 516_450,
      'Birmingham' => 510_133,
      'Phoenix' => 505_972,
      'San Francisco' => 500_493
    },
    # Generated by `fetch_hoc_metrics['countries'].first(40).to_h`. Note that we
    # take the top forty, as that many countries are shown on the leaderboard.
    'countries' => {
      'United States' => 176_408_221,
      'United Kingdom' => 17_041_126,
      'Other' => 10_726_283,
      'Canada' => 5_907_322,
      'Australia' => 5_184_491,
      'Turkey' => 3_425_775,
      'France' => 3_243_916,
      'Italy' => 3_191_676,
      'Taiwan' => 2_658_012,
      'Brazil' => 2_493_510,
      'Spain' => 2_449_625,
      'Poland' => 2_055_855,
      'India' => 1_959_610,
      'Korea, Republic of' => 1_883_003,
      'Mexico' => 1_824_703,
      'Ireland' => 1_653_915,
      'Greece' => 1_363_365,
      'Colombia' => 1_329_756,
      'China' => 1_267_930,
      'Romania' => 1_221_432,
      'Japan' => 1_199_082,
      'Netherlands' => 1_079_824,
      'Finland' => 1_065_716,
      'New Zealand' => 987_037,
      'Germany' => 942_334,
      'Sweden' => 941_164,
      'Russian Federation' => 908_392,
      'United Arab Emirates' => 893_042,
      'Republic of Korea' => 886_765,
      'Israel' => 859_384,
      'Vietnam' => 826_898,
      'Ukraine' => 804_945,
      'Argentina' => 671_853,
      'Egypt' => 591_940,
      'Denmark' => 565_908,
      'Thailand' => 558_549,
      'Malaysia' => 539_057,
      'Portugal' => 526_543,
      'Hungary' => 498_396,
      'Chile' => 491_365
    },
    # The count was reset to 0 in June 2016 as the result of moving to HOC2016
    # from HOC2015.
    'total_hoc_count' => 0,
    'total_codedotorg_count' => 164_830_998,
    'hoc_country_totals' => {},
    'hoc_company_totals' => {}
  }
end

def fetch_user_metrics
  Properties.get_user_metrics
end
