vcl 4.0;
include "/etc/varnish/accept-language.vcl";
import cookie;
import header;
import directors;
import std;

<%
  config = node['cdo-varnish']['config']
  backends = node['cdo-varnish']['backends'].to_hash
  redirects = node['cdo-varnish']['redirects'].dup
%>

<% backends.each_pair do |id, ip| %>
probe backend_healthcheck {
  .url = "/health_check";
  .window = 4;
  .threshold = 2;
  .initial = 2;
  .interval = 15s;
  .timeout = 10s;
}

backend pegasus_<%= id %> {
  .host = "<%= ip %>";
  .port = "<%= node['cdo-apps']['pegasus']['port'] %>";
  .connect_timeout = 600s;
  .first_byte_timeout = 600s;
  .between_bytes_timeout = 600s;
  .probe = backend_healthcheck;
}

backend dashboard_<%= id %> {
  .host = "<%= ip %>";
  .port = "<%= node['cdo-apps']['dashboard']['port'] %>";
  .connect_timeout = 600s;
  .first_byte_timeout = 600s;
  .between_bytes_timeout = 600s;
  .probe = backend_healthcheck;
}
<% end %>

sub vcl_init {
  new pegasus = directors.round_robin();
  new dashboard = directors.round_robin();
<% backends.keys.each do |id| %>
  pegasus.add_backend(pegasus_<%= id %>);
  dashboard.add_backend(dashboard_<%= id %>);
<% end %>
}

# Respond to incoming requests.
sub vcl_recv
{
  # Use "/varnishcheck" to determine if you are hitting a Varnish instance.
  if (req.method == "GET" && req.url ~ "^/varnishcheck$") {
    return(synth(200, "Varnish is ready."));
  }

  # Use "/health_check.php" to keep this instance in the load balancer.
  if (req.method == "GET" && (req.url ~ "^/health_check.php$" || req.url ~ "^/health_check$")) {
    if (std.healthy(dashboard_<%=backends.keys.first%>) && std.healthy(pegasus_<%=backends.keys.first%>)) {
      return(synth(200, "Webapps are healthy."));
    } else {
      return(synth(503, "Webapps are not healthy."));
    }
  }

  if (req.method == "GET" && req.url ~ "^/health_check.dashboard$") {
    if (std.healthy(dashboard_<%=backends.keys.first%>)) {
      return(synth(200, "Dashboard is healthy."));
    } else {
      return(synth(503, "Dashboard is not healthy."));
    }
  }

  if (req.method == "GET" && req.url ~ "^/health_check.pegasus$") {
    if (std.healthy(pegasus_<%=backends.keys.first%>)) {
      return(synth(200, "Pegasus is healthy."));
    } else {
      return(synth(503, "Pegasus is not healthy."));
    }
  }

### REDIRECTS

  if(req.http.host ~ "\.$")
  {
    /* Don't allow domain names that end in "." */
    return(synth(751, "https://" + regsub(req.http.host, "\.$","") + req.url));
  }
  else if(req.http.host ~ "^www\.")
  {
    /* Normalize domain names to the short (non www.) form. */
    return(synth(751, "https://" + regsub(req.http.host, "^www\.","") + req.url));
  }
<% redirects.each_pair do |domain, site| %>
  else if(req.http.Host == "<%= domain %>")
  {
    /* <%= domain %> redirects to <%= site %> */
    return(synth(751, "https://<%= site %>" + req.url));
  }
<% end %>
  # Redirect http to https
  if(req.http.X-Forwarded-Proto !~ "(?i)https") {
    return(synth(751, "https://" + req.http.host + req.url));
  }
###

### REQUEST COOKIE+HEADER FILTER
if(req.http.Cookie) {
  cookie.parse(req.http.Cookie);
}
<%= setup_behavior(config, 'req', &method(:process_request)) %>
if(req.http.Cookie) {
  set req.http.Cookie = cookie.get_string();
  if (req.http.Cookie == "") {
    unset req.http.Cookie;
  }
}
###

# Normalize Accept-Language header into X-Varnish-Accept-Language for better cache hit rates.
C{
  vcl_rewrite_accept_language(ctx);
}C

# Collapse cookie-extracted language setting into X-Varnish-Accept-Language header if present.
if (req.http.X-Cookie-language_) {
  set req.http.X-Varnish-Accept-Language = req.http.X-Cookie-language_;
  unset req.http.X-Cookie-language_;
}

### PROXIES
<%= setup_behavior(config, 'req', &method(:process_proxy)) %>
###

# Override builtin VCL with customizations:
# 1. Allow caching whitelisted cookies.
# 2. Return 403 instead of (pipe) on unsupported HTTP request methods.
if (req.method != "GET" &&
  req.method != "HEAD" &&
  req.method != "PUT" &&
  req.method != "POST" &&
  req.method != "TRACE" &&
  req.method != "OPTIONS" &&
  req.method != "DELETE" &&
  req.method != "PATCH") {
  /* Non-RFC2616 or CONNECT which is weird. */
  # return (pipe);
  return(synth(403, "Unsupported HTTP request method."));
}
if (req.method != "GET" && req.method != "HEAD") {
  /* We only deal with GET and HEAD by default */
  return (pass);
}
if (req.http.Authorization /* || req.http.Cookie */) {
  /* Not cacheable by default */
  return (pass);
}

return (hash);
}

# Handle the HTTP response coming from our backend
# beresp == Back-end response from the web server.
sub vcl_backend_response {

### RESPONSE COOKIE FILTER
# Only apply cookie filter to cached HTTP methods.
if(bereq.method == "GET" || bereq.method == "HEAD") {
<%= setup_behavior(config, 'bereq', &method(:process_response)) %>
}
###

  if (beresp.http.Cache-Control) {
    # Cache-Control: max-age directive overrides the Expires header.
    # This line is not strictly necessary, but appropriate for a default http-cache config.
    unset beresp.http.Expires;
  }

  # Keep all objects for 1h longer in the cache than their TTL specifies.
  # So even if HTTP objects are expired (they've passed their TTL), we can still use them in case all backends go down.
  # Old content to show is better than no content at all (or an error page).
  # Ref: https://www.varnish-cache.org/docs/4.0/users-guide/vcl-grace.html
  set beresp.grace = 1h;

### UPSTREAM VARY HEADER
<%= setup_behavior(config, 'bereq', &method(:process_vary)) %>
###

  if (beresp.http.Vary) {
    # Transform 'Accept-Language' Vary header field to 'X-Varnish-Accept-Language'.
    set beresp.http.Vary = regsub(beresp.http.Vary, "(?<=\s|,|^)Accept-Language", "X-Varnish-Accept-Language");
  }
  # Pass-through to builtin.
}

sub vcl_deliver {
  # Downstream Vary header.
  if (resp.http.Vary) {
    # Transform 'X-Varnish-Accept-Language' Vary header field back to 'Accept-Language'.
    set resp.http.Vary = regsub(resp.http.Vary, "(?<=\s|,|^)X-Varnish-Accept-Language", "Accept-Language");

    # Strip all "X-COOKIE-*" Vary header fields appearing anywhere in the comma-delimited header.
    <% reg = '\s*X-COOKIE-[^,\s]+\s*' %>
    if (resp.http.Vary ~ "<%= reg %>") {
      set resp.http.Vary = regsuball(resp.http.Vary, "<%= "^#{reg},?\\s*|,#{reg}" %>", "");
      <%= set_vary('Cookie', 'resp') %>
    }
  }
  # Set a header to track a cache HIT/MISS.
  if (obj.hits > 0) {
    set resp.http.X-Varnish-Cache = "HIT";
  }
  else {
    set resp.http.X-Varnish-Cache = "MISS";
  }

  set resp.http.X-Varnish-Node = server.hostname;
  # Pass-through to builtin.
}

# Handle redirects
sub vcl_synth {
  if(resp.status == 751) {
    # We use this special error status 751 to force redirects with 301 (permanent) redirects
    # To use this, call the following from anywhere in vcl_recv: return (synth(751, "http://host/new.html"));
    set resp.http.Location = resp.reason;
    set resp.status = 301;
    return(deliver);
  }
}
