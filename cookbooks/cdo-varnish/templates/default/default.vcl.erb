vcl 4.0;
include "/etc/varnish/accept-language.vcl";
import cookie;
import header;
import directors;

<%
  BACKENDS = node['cdo-varnish']['backends'].to_hash
  BACKENDS.each_pair do |id, ip|
%>
backend pegasus_<%= id %> {
  .host = "<%= ip %>";
  .port = "<%= node['cdo-apps']['pegasus']['port'] %>";
  .connect_timeout = 600s;
  .first_byte_timeout = 600s;
  .between_bytes_timeout = 600s;
}

backend dashboard_<%= id %> {
  .host = "<%= ip %>";
  .port = "<%= node['cdo-apps']['dashboard']['port'] %>";
  .connect_timeout = 600s;
  .first_byte_timeout = 600s;
  .between_bytes_timeout = 600s;
}
<%
  end
%>

sub vcl_init {
  new pegasus = directors.round_robin();
  new dashboard = directors.round_robin();
<% BACKENDS.keys.each do |id| %>
  pegasus.add_backend(pegasus_<%= id %>);
  dashboard.add_backend(dashboard_<%= id %>);
<% end %>
}

# Respond to incoming requests.
sub vcl_recv
{
  # Use "/varnishcheck" to determine if you are hitting a Varnish instance.
  if (req.method == "GET" && req.url ~ "^/varnishcheck$") {
    return(synth(200, "Varnish is ready."));
  }

  # Use "/health_check.php" to keep this instance in the load balancer.
  if (req.method == "GET" && req.url ~ "^/health_check.php$") {
    return(synth(200, "Varnish is healthy."));
  }

### REDIRECTS

  if(req.http.host ~ "\.$")
  {
    /* Don't allow domain names that end in "." */
    return(synth(751, "http://" + regsub(req.http.host, "\.$","") + req.url));
  }
  else if(req.http.host ~ "^www\.")
  {
    /* Normalize domain names to the short (non www.) form. */
    return(synth(751, "http://" + regsub(req.http.host, "^www\.","") + req.url));
  }
  <%
    # Alias the following domains to one of our primary ones.
    redirects = node['cdo-varnish']['redirects'].dup
    redirects.each_pair do |domain,site|
  %>else if(req.http.Host == "<%= domain %>")
  {
    /* <%= domain %> redirects to <%= site %> */
    return(synth(751, "https://<%= site %>" + req.url));
  }
  <% end%>
  # Redirect http to https
  if(req.http.X-Forwarded-Proto !~ "(?i)https") {
    return(synth(751, "https://" + req.http.host + req.url));
  }
###

  # Normalize Accept-Language header into X-Varnish-Accept-Language for better cache hit rates.
  # To vary content based on the language, set Vary: X-Varnish-Accept-Language in application code.
  C{
      vcl_rewrite_accept_language(ctx);
  }C

### EXTRACT COOKIE HEADERS
if(req.http.Cookie) {
  cookie.parse(req.http.Cookie);
<% node['cdo-varnish']['cookie_headers'].to_hash.each do |cookie, header| %>
  if(cookie.isset("<%= cookie %>")) {
    set req.http.<%= header %> = cookie.get("<%= cookie %>");
    cookie.delete("<%= cookie %>");
  }
<%end%>
}
###

### PROXIES
<%= config = node['cdo-varnish']['config']
    setup_behavior config, 'proxy' %>
###

### REQUEST COOKIE FILTER
if (req.http.Cookie) {
  # Only apply cookie filter to cached HTTP methods.
  if(req.method == "GET" || req.method == "HEAD") {
  <%= setup_behavior config, 'request' %>
    set req.http.Cookie = cookie.get_string();
    if (req.http.Cookie == "") {
      unset req.http.Cookie;
    }
  }
}
###
  # Pass-through to builtin.
}

# Handle the HTTP response coming from our backend
# beresp == Back-end response from the web server.
sub vcl_backend_response {

### RESPONSE COOKIE FILTER
# Only apply cookie filter to cached HTTP methods.
if(bereq.method == "GET" || bereq.method == "HEAD") {
<%= setup_behavior config, 'response' %>
}
###

  if (beresp.http.Cache-Control) {
    # Cache-Control: max-age directive overrides the Expires header.
    # This line is not strictly necessary, but appropriate for a default http-cache config.
    unset beresp.http.Expires;
  }

  # Keep all objects for 1h longer in the cache than their TTL specifies.
  # So even if HTTP objects are expired (they've passed their TTL), we can still use them in case all backends go down.
  # Old content to show is better than no content at all (or an error page).
  # Ref: https://www.varnish-cache.org/docs/4.0/users-guide/vcl-grace.html
  set beresp.grace = 1h;

  # Pass-through to builtin.
}

sub vcl_deliver {
  # De-normalize Vary: X-Varnish-Accept-Language response header.
  if (resp.http.Vary) {
    set resp.http.Vary = regsub(resp.http.Vary, "X-Varnish-Accept-Language", "Accept-Language");
  }
  # Set a header to track a cache HIT/MISS.
  if (obj.hits > 0) {
    set resp.http.X-Varnish-Cache = "HIT";
  }
  else {
    set resp.http.X-Varnish-Cache = "MISS";
  }

  set resp.http.X-Varnish-Node = "<%= node.name %>";
  # Pass-through to builtin.
}

# Handle redirects
sub vcl_synth {
  if(resp.status == 751) {
    # We use this special error status 751 to force redirects with 301 (permanent) redirects
    # To use this, call the following from anywhere in vcl_recv: return (synth(751, "http://host/new.html"));
    set resp.http.Location = resp.reason;
    set resp.status = 301;
    return(deliver);
  }
}
