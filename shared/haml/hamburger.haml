
:ruby
  teacher_entries = [
    { title: "Home", url: "#{studio_url_base}/home" },
    { title: "Courses", url: "#{studio_url_base}/courses" },
    { title: "Project Gallery", url: "#{studio_url_base}/projects" },
    { title: "Sections", url: "#{code_org_url_base}/teacher-dashboard#/sections" },
    { title: "Professional learning", url: "#{studio_url_base}/my-professional-learning" }
  ].freeze

  student_entries = [
    { title: "Courses", url: "#{studio_url_base}/courses" },
    { title: "Project Gallery", url: "#{studio_url_base}/projects" }
  ]

  educate_entries = [
    { title: "Educator Overview", url: "#{code_org_url_base}/educate" },
    { title: "Elementary School", url: "#{code_org_url_base}/educate/curriculum/elementary-school" },
    { title: "Middle School", url: "#{code_org_url_base}/educate/curriculum/middle-school" },
    { title: "High School", url: "#{code_org_url_base}/educate/curriculum/high-school" },
    { title: "Hour of Code", url: "#{code_org_url_base}https://hourofcode.com" },
    { title: "Partner with Us", url: "#{code_org_url_base}/educate/partner" },
    { title: "Beyond Code.org", url: "#{code_org_url_base}/educate/curriculum/3rd-party" },
    { title: "Inspire a Student", url: "#{code_org_url_base}/educate/resources/inspire" },
    { title: "Online Community", url: "#{code_org_url_base}/educate/community" },
    { title: "Tools and Videos", url: "#{code_org_url_base}/educate/resources/videos" },
  ]

  about_entries = [
    { title: "About Us", url: "#{code_org_url_base}/about" },
    { title: "Leadership", url: "#{code_org_url_base}/about/leadership" },
    { title: "Donors", url: "#{code_org_url_base}/about/donors" },
    { title: "Partners", url: "#{code_org_url_base}/about/partners" },
    { title: "Full Team", url: "#{code_org_url_base}/about/team" },
    { title: "Newsroom", url: "#{code_org_url_base}/about/news" },
    { title: "Evaluation", url: "#{code_org_url_base}/about/evaluation" },
    { title: "Jobs", url: "#{code_org_url_base}/about/jobs" },
    { title: "Contact Us", url: "#{code_org_url_base}/contact" },
    { title: "FAQs", url: "#{code_org_url_base}/faq" },
  ]

  show_teacher_options = "hide-always"
  show_student_options = "hide-always"
  show_pegasus_options = "hide-always"

  hamburger_class = "none"

  if level
    # The header is taken over by level-related UI, so we need the hamburger
    # to show whatever would show up in the header at desktop (and mobile) widths.
    if user_type == "teacher"
      show_teacher_options = "show-always"
    elsif user_type == "student"
      show_student_options = "show-always"
    end

    # Regardless of user type, if they are English, then they also need the pegasus
    # options in the hamburger.
    if language == "en"
      show_pegasus_options = "show-always"
    end

  else

    # The header is available for showing whichever options we want, but they should
    # appear in the hamburger at mobile widths.

    if user_type == "teacher"
      show_teacher_options = "show-mobile"
    elsif user_type == "student"
      show_student_options = "show-mobile"
    end

    if language == "en"
      # We want to show the pegasus options.  They're in the hamburger for desktop
      # if they didn't fit on the header, or they're just in it for mobile if they did.
      if user_type == "teacher" || user_type == "student"
        show_pegasus_options = "show-always"
      else
        show_pegasus_options = "show-mobile"
      end
    end
  end

  # Do we show hamburger on all widths, only mobile, or not at all?
  if show_teacher_options == "show-always" || show_student_options == "show-always" || show_pegasus_options == "show-always"
    hamburger_class = "show-always"
  elsif show_teacher_options == "show-mobile" || show_student_options == "show-mobile" || show_pegasus_options == "show-mobile"
    hamburger_class = "show-mobile"
  else
    hamburger_class = "hide-always"
  end

#hamburger{class: hamburger_class}
  %ul.hide-responsive-menu
    -# If we're a teacher, then we have special items showing here.
    - if user_type == "teacher"
      - teacher_entries.each do |entry|
        %li{class: show_teacher_options}
          %a{href: entry[:url]}= entry[:title]
    - elsif user_type == "student"
      - student_entries.each do |entry|
        %li{class: show_student_options}
          %a{href: entry[:url]}= entry[:title]

    %li{class: show_pegasus_options}
      %a{href: "#{code_org_url_base}/student"} Learn
    %li{class: show_pegasus_options}
      #educate-more
        Teach
        %i#educate-down{class: "fa fa-caret-down"}
        %i#educate-up{class: "fa fa-caret-up"}

    - if show_gallery
      - unless ["student", "teacher"].include? user_type
        %li{class: show_pegasus_options}
          %a{href: "#{studio_url_base}/projects"} Project Gallery

    .educate-nav.hide-educate{class: show_pegasus_options}
      - educate_entries.each do |entry|
        %li
          %a{href: entry[:url]}= entry[:title]
    %li{class: show_pegasus_options}
      %a{href: "#{code_org_url_base}/promote"} Stats
    %li{class: show_pegasus_options}
      %a{href: "#{code_org_url_base}/help"} Help Us
    %li{class: show_pegasus_options}
      #about-more
        About
        %i#about-down{class: "fa fa-caret-down"}
        %i#about-up{class: "fa fa-caret-up"}
    .about-nav.hide-about{class: show_pegasus_options}
      - about_entries.each do |entry|
        %li
          %a{href: entry[:url]}= entry[:title]

  #hamburger-icon{class: hamburger_class}
    %span
