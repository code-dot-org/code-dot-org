#!/usr/bin/env ruby

# This script is meant to be run locally on a dev machine (not a server), and it
# is used to generate new JSON Web Keys (JWKS). It generates both the public key
# and the private key. The public key will be formated in YAML, to simplify adding
# it to the approprate config files (see below). The private key will be formated
# as JSON, which is how it should be stored in Secrets Manager.
#
# Here are the locations the public key should be added
# - For Production, the public key should be added to config/production.yml.erb
# - For Non-Prod, the public key should be added to config.yml.erb
#
# When you include 'dev' as an argument, it will write the JWK and the private
# key to your locals.yml. This should be done once for local development.
#
# You can find more information about the JWKS implimentation in docs/jwks.md

require 'jwt'
require 'json'
require 'yaml'
require 'active_support/core_ext/hash'

allowed_args = ["dev", "prod", "non-prod"].freeze

@arg = ARGV.first

unless allowed_args.include?(@arg)
  puts "Usage: 'dev', 'prod', or 'non-prod' as arguments...\n"
  return
end

params = {use: 'sig', alg: 'RS256'}
jwk = JWT::JWK.new(OpenSSL::PKey::RSA.new(2048), params, kid_generator: JWT::JWK::Thumbprint)
@jwks_hash = JWT::JWK::Set.new(jwk).export

@private_key_obj = {
  kid: jwk[:kid],
  private_key: jwk.signing_key.to_s,
}

def write_jwk
  # Stringify keys so the leading colon doesn't end up in the yaml keys
  jwks_stringified_hash = @jwks_hash.deep_stringify_keys
  prod_config = 'config/production.yml.erb'
  non_prod_config = 'config.yml.erb'
  config = @arg == 'prod' ? prod_config : non_prod_config

  puts "Add this YAML to #{config} jwks_data. If a key already exists in the 'keys' list, only add the single key object starting with '- kty':"
  puts ''
  puts jwks_stringified_hash.to_yaml
  puts ''
  puts "Update #{@arg} secret CDO.jwk_private_key_data with the following value:"
  puts ''
  puts @private_key_obj.to_json
end

def write_jwk_dev
  # format values to be written to locals.yml
  jwk_data = <<~EOF
    jwks_data:
      #{@jwks_hash.to_json}

    jwk_private_key_data:
      #{@private_key_obj.to_json}
  EOF

  File.write(File.join(File.dirname(__FILE__), '../locals.yml'), jwk_data, mode: "a")
end

case @arg
when 'dev'
  write_jwk_dev
else
  write_jwk
end
