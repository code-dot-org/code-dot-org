#!/usr/bin/env ruby

require 'csv'

# This script will purge accounts given a CSV file with the column of 'user_id'.
# You must supply the CSV file as the first argument and it will do a "dry run"
# and report found and not found ids. Supplying "for-real" as the second
# argument will perform the purge.

# Refer to doc for information about how to request and fulfill such
# requests and use this script:
# https://docs.google.com/document/d/1-Gk66udFdzqvYyT6J-1d5HPSbkVCIQWzxMLyVKF3fuk/edit

if ARGV.empty? || ARGV.length > 2
  puts 'Usage: ./bin/oneoff/purge_accounts/purge_users ./bin/oneoff/purge_accounts/yyyy-mm-dd-users.csv [commit]'
  puts 'The CSV needs a column with "user_id" with User ids.'
  puts 'Will do a "dry run" until you specify "for-real" for the "commit" field.'
  exit 1
end

ids = []
begin
  csv_file = ARGV[0]
  CSV.foreach(csv_file, headers: true, col_sep: ",") do |row|
    ids << row["user_id"] if row["user_id"]
  end
rescue
  puts "Problem reading given CSV file."
end

if ids.empty?
  puts "Could not find any user ids. The CSV needs a column with 'user_id' with User ids."
  exit 1
end

puts "Found #{ids.count} ids to purge."

require_relative '../../../dashboard/config/environment'
require_relative '../../../dashboard/lib/account_purger'

# Find any that do not exist
not_found = ids.filter do |id|
  User.find_by_id(id).nil?
end

puts "Found #{not_found.count} ids that do not actually exist."

do_dry_run = true
if ARGV[1] == "for-real"
  do_dry_run = false
end

safety_violations = []

ids.each do |id|
  next if not_found.include?(id)
  user = User.find_by_id(id)

  purger = AccountPurger.new(dry_run: do_dry_run)

  begin
    purger.purge_data_for_account(user, reason: PurgedAccountLog::REQUESTED_BY_USER)
  rescue DeleteAccountsHelper::SafetyConstraintViolation
    puts "Cannot purge user #{id} due to violation of a safety constraint."
    safety_violations << id
  end
end

safety_violations.each do |id|
  puts "WARNING: User #{id} cannot be purged due to violation of a safety constraint."
end

if not_found.any?
  puts "WARNING: Found #{not_found.count} ids that do not actually exist. These were not affected."
end
