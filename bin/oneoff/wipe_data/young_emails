#!/usr/bin/env ruby

# This script wipes email addresses for young students from the contacts and
# poste_deliveries tables. It indentifies young students by equating hashed
# email addresses. The script accepts as input a file containing a list of
# contacts.id to wipe, generated from a MySQL query on the replica.

require File.expand_path('../../../production/pegasus/src/env', __FILE__)
require src_dir 'database'

if ARGV.length != 1
  puts 'Usage: ./bin/oneoff/wipe_emails filename'
  exit 1
end

filename = ARGV[0]

# @param filename [String] the filename (with path) containing the contact IDs
#   to wipe.
# @return [Array] of contact IDs to wipe.
def get_contact_ids_from_file(filename)
  contact_ids = []
  File.foreach(filename) do |line|
    contact_ids << line.to_i
  end
  return contact_ids
end

# Replaces the email address of the specified rows in the contacts table with
# the emtpy string.
# param contact_ids [Array] an array of integers specifying the contact IDs to
#   wipe the email addresses of.
def wipe_emails_from_contacts(contact_ids)
  slice_count = 0
  contact_ids.each_slice(5000) do |contact_ids_slice|
    puts "  Processing slice #{slice_count}..."
    PEGASUS_DB.transaction do
      contact_ids_slice.each do |contact_id|
        PEGASUS_DB[:contacts].where(id: contact_id).update(email: '')
      end
    end
    slice_count += 1
  end
end

# Replaces the email address of the specified rows in the poste_deliveries table
# with the emtpy string.
# param contact_ids [Array] an array of integers specifying the contact IDs to
#   wipe the email addresses of.
def wipe_emails_from_poste_deliveries(contact_ids)
  slice_count = 0
  contact_ids.each_slice(5000) do |contact_ids_slice|
    puts "  Processing slice #{slice_count}..."
    PEGASUS_DB.transaction do
      contact_ids_slice.each do |contact_id|
        PEGASUS_DB[:poste_deliveries].where(contact_id: contact_id).
          where('sent_at IS NOT NULL').
          update(contact_email: '')
      end
    end
    slice_count += 1
  end
end

puts "Reading contact_ids from #{filename}..."
contact_ids = get_contact_ids_from_file(filename)
puts "Read #{contact_ids.length} many contact_ids."

puts "Wiping emails from contacts..."
wipe_emails_from_contacts(contact_ids)

puts "Wiping emails from poste_deliveries..."
wipe_emails_from_poste_deliveries(contact_ids)
