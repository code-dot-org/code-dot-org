#!/usr/bin/env ruby

require_relative '../../dashboard/config/environment'

# This script relies on the existence of an empty file '/tmp/rescored_applications' to write to.

ActiveRecord::Base.transaction do
  rescored_applications = []
  puts "Rescoring taught_in_past for teacher 1920 applications..."
  Pd::Application::TeacherApplication.find_each do |application|
    responses = application.sanitize_form_data_hash
    response_scores = JSON.parse(application.response_scores)

    old_taught_in_past_score = response_scores["bonus_points_scores"] ? response_scores["bonus_points_scores"]["taught_in_past"] : nil
    new_taught_in_past_score = (responses[:taught_in_past] & Pd::Application::TeacherApplication::TAUGHT_IN_PAST_NO_BONUS_POINT_RESPONSES).any? ? 0 : 2

    response_scores["bonus_points_scores"]["taught_in_past"] = new_taught_in_past_score

    if old_taught_in_past_score.to_i != new_taught_in_past_score.to_i
      if application.response_scores = response_scores.to_json
        application.save!

        partner_name = application.regional_partner&.name
        name = "#{application.first_name} #{application.last_name}"
        update_string = "partner: #{partner_name}, id: #{application.id}, old: #{old_taught_in_past_score}, new: #{new_taught_in_past_score}, response: #{responses[:taught_in_past]}, email: #{application.email}, name: #{name}"
        rescored_applications << update_string
      end
    end
  rescue => e
    puts "Failure on application #{application.id}:\n#{e.message}\n#{application&.errors&.messages}"
    raise
  end

  File.open('./tmp/rescored_applications', 'w') do |file|
    rescored_applications.sort.each do |update_string|
      file.puts update_string
    end
  end
  puts "Successfully rescored taught_in_past for #{rescored_applications.length} applications, see ./tmp/rescored_applications for list"

  # This script is a dry-run until we comment out this last line
  raise ActiveRecord::Rollback.new, "Intentional rollback"
end
