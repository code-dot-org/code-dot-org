#!/usr/bin/env ruby

#
# Script to update the school_info_id in users that may be bad.
#
# What we discovered, is in the SchoolInfoDeduplicator the filter criteria
# wasn't specific enough and in cases where some users did not specify an
# actual school, they may have been matched to a specific school.
#
# For instance, in production, a user specifying only the country and
# school_type, the following query would be generated to match an existing
# school_info:
#
#   SELECT * FROM school_infos
#   WHERE country = 'US' AND school_type = 'public' AND validation_type = 'none'
#   ORDER BY id ASC LIMIT 1
#
# However, because of the order on id, it was matching a school in NJ.
#

require_relative '../../../dashboard/config/environment'
require 'optparse'
require 'tmpdir'

CDO.log = Logger.new($stdout)
ActiveRecord::Base.record_timestamps = false

options = {actually_update: false, interstitial_days: nil, deleted_filter: nil}
OptionParser.new do |opts|
  opts.banner = "Usage: #{File.basename(__FILE__)} [options]"
  opts.on('-u', '--actually-update', 'Actually perform the update.') do
    options[:actually_update] = true
  end
  opts.on('-d', '--interstitial-days DAYS', 'Number of days before showing the interstitial dialog.') do |d|
    options[:interstitial_days] = Integer(d)
  end
  opts.on('-f', '--deleted-filter [WITH|ONLY]', 'Indicates how deleted users should be included.') do |f|
    options[:deleted_filter] = f.upcase
  end
  opts.on('-h', '--help', 'Prints this help') do
    puts opts
    exit
  end
end.parse!
CDO.log.info "Called with options: #{options}"

info_count = 0
user_count = 0

school_info_ids = ActiveRecord::Base.connection.execute(
  <<~SQL
    SELECT DISTINCT t.id FROM (
      SELECT MIN(id) AS id FROM school_infos WHERE validation_type = 'none' AND country = 'US'
      AND school_type in ('public','charter')
      GROUP BY school_type
    UNION ALL
      SELECT MIN(id) AS id FROM school_infos WHERE validation_type = 'none' AND country = 'US'
      AND school_type in ('public','charter') AND state IS NOT NULL
      GROUP BY school_type, state
    UNION ALL
      SELECT MIN(id) AS id FROM school_infos WHERE validation_type = 'none' AND country = 'US'
      AND school_type in ('public','charter') AND state IS NOT NULL AND school_district_id IS NOT NULL
      GROUP BY school_type, state, school_district_id
    ) t JOIN school_infos si ON si.id = t.id
    WHERE (si.school_id IS NOT NULL OR si.school_name IS NOT NULL)
  SQL
).pluck(0)

csv_file = "#{Dir.tmpdir}/#{File.basename(__FILE__)}.#{Time.now.strftime('%Y%m%d%H%M')}.csv"
CDO.log.info "Writting results to: #{csv_file}"

CSV.open(csv_file, 'w') do |csv|
  csv << ["id", "school_info_id"]

  school_info_ids.each do |school_info_id|
    users = User.where("user_type = 'teacher' AND school_info_id = ?", school_info_id)
    next unless users.with_deleted.count > 1

    case options[:deleted_filter]
    when 'WITH'
      users = users.with_deleted
    when 'ONLY'
      users = users.only_deleted
    end

    users.each do |user|
      csv << [user.id.to_s, user.school_info_id.to_s]
      if options[:actually_update]
        # Clear the school_info_id from user, this will prompt the user via the
        # interstitial diaglo to re-enter the school information.
        user.school_info_id = nil

        # If number of days to show interstitial is specified, future date the
        # last seen date so that the user will not be promoted until after;
        # note, this doesn't include the hush time (currently at 7 days).
        unless options[:interstitial_days].nil?
          user.last_seen_school_info_interstitial = DateTime.now + options[:interstitial_days]
        end

        # We skip validation as some of our users (particularly teachers) do not
        # pass our own validations (often because they are missing an email).
        user.save!(validate: false)
      end
      user_count += 1
    end

    info_count += 1
  end
end

CDO.log.info "Updated #{user_count} user(s) from #{info_count} school_info(s)."
