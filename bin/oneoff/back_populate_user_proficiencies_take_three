#!/usr/bin/env ruby
#
# This script back populates the user_proficiencies table with data from the
# user_levels table. The impetus is corrections in the
# level_concept_difficulties table, causing recalculation of historical values.
#
# The data was generated via the query
#
#   CREATE TABLE user_proficiencies_#{start_date}_#{end_date} AS
#   SELECT
#     user_levels.user_id,
#
#     SUM(IF(level_concept_difficulties.sequencing = 1, 1, 0)) AS sequencing_d1_count,
#     SUM(IF(level_concept_difficulties.sequencing = 2, 1, 0)) AS sequencing_d2_count,
#     SUM(IF(level_concept_difficulties.sequencing = 3, 1, 0)) AS sequencing_d3_count,
#     SUM(IF(level_concept_difficulties.sequencing = 4, 1, 0)) AS sequencing_d4_count,
#     SUM(IF(level_concept_difficulties.sequencing = 5, 1, 0)) AS sequencing_d5_count,
#
#     SUM(IF(level_concept_difficulties.debugging = 1, 1, 0)) AS debugging_d1_count,
#     SUM(IF(level_concept_difficulties.debugging = 2, 1, 0)) AS debugging_d2_count,
#     SUM(IF(level_concept_difficulties.debugging = 3, 1, 0)) AS debugging_d3_count,
#     SUM(IF(level_concept_difficulties.debugging = 4, 1, 0)) AS debugging_d4_count,
#     SUM(IF(level_concept_difficulties.debugging = 5, 1, 0)) AS debugging_d5_count,
#
#     SUM(IF(level_concept_difficulties.repeat_loops = 1, 1, 0)) AS repeat_loops_d1_count,
#     SUM(IF(level_concept_difficulties.repeat_loops = 2, 1, 0)) AS repeat_loops_d2_count,
#     SUM(IF(level_concept_difficulties.repeat_loops = 3, 1, 0)) AS repeat_loops_d3_count,
#     SUM(IF(level_concept_difficulties.repeat_loops = 4, 1, 0)) AS repeat_loops_d4_count,
#     SUM(IF(level_concept_difficulties.repeat_loops = 5, 1, 0)) AS repeat_loops_d5_count,
#
#     SUM(IF(level_concept_difficulties.repeat_until_while = 1, 1, 0)) AS repeat_until_while_d1_count,
#     SUM(IF(level_concept_difficulties.repeat_until_while = 2, 1, 0)) AS repeat_until_while_d2_count,
#     SUM(IF(level_concept_difficulties.repeat_until_while = 3, 1, 0)) AS repeat_until_while_d3_count,
#     SUM(IF(level_concept_difficulties.repeat_until_while = 4, 1, 0)) AS repeat_until_while_d4_count,
#     SUM(IF(level_concept_difficulties.repeat_until_while = 5, 1, 0)) AS repeat_until_while_d5_count,
#
#     SUM(IF(level_concept_difficulties.for_loops = 1, 1, 0)) AS for_loops_d1_count,
#     SUM(IF(level_concept_difficulties.for_loops = 2, 1, 0)) AS for_loops_d2_count,
#     SUM(IF(level_concept_difficulties.for_loops = 3, 1, 0)) AS for_loops_d3_count,
#     SUM(IF(level_concept_difficulties.for_loops = 4, 1, 0)) AS for_loops_d4_count,
#     SUM(IF(level_concept_difficulties.for_loops = 5, 1, 0)) AS for_loops_d5_count,
#
#     SUM(IF(level_concept_difficulties.events = 1, 1, 0)) AS events_d1_count,
#     SUM(IF(level_concept_difficulties.events = 2, 1, 0)) AS events_d2_count,
#     SUM(IF(level_concept_difficulties.events = 3, 1, 0)) AS events_d3_count,
#     SUM(IF(level_concept_difficulties.events = 4, 1, 0)) AS events_d4_count,
#     SUM(IF(level_concept_difficulties.events = 5, 1, 0)) AS events_d5_count,
#
#     SUM(IF(level_concept_difficulties.variables = 1, 1, 0)) AS variables_d1_count,
#     SUM(IF(level_concept_difficulties.variables = 2, 1, 0)) AS variables_d2_count,
#     SUM(IF(level_concept_difficulties.variables = 3, 1, 0)) AS variables_d3_count,
#     SUM(IF(level_concept_difficulties.variables = 4, 1, 0)) AS variables_d4_count,
#     SUM(IF(level_concept_difficulties.variables = 5, 1, 0)) AS variables_d5_count,
#
#     SUM(IF(level_concept_difficulties.functions = 1, 1, 0)) AS functions_d1_count,
#     SUM(IF(level_concept_difficulties.functions = 2, 1, 0)) AS functions_d2_count,
#     SUM(IF(level_concept_difficulties.functions = 3, 1, 0)) AS functions_d3_count,
#     SUM(IF(level_concept_difficulties.functions = 4, 1, 0)) AS functions_d4_count,
#     SUM(IF(level_concept_difficulties.functions = 5, 1, 0)) AS functions_d5_count,
#
#     SUM(IF(level_concept_difficulties.functions_with_params = 1, 1, 0)) AS functions_with_params_d1_count,
#     SUM(IF(level_concept_difficulties.functions_with_params = 2, 1, 0)) AS functions_with_params_d2_count,
#     SUM(IF(level_concept_difficulties.functions_with_params = 3, 1, 0)) AS functions_with_params_d3_count,
#     SUM(IF(level_concept_difficulties.functions_with_params = 4, 1, 0)) AS functions_with_params_d4_count,
#     SUM(IF(level_concept_difficulties.functions_with_params = 5, 1, 0)) AS functions_with_params_d5_count,
#
#     SUM(IF(level_concept_difficulties.conditionals = 1, 1, 0)) AS conditionals_d1_count,
#     SUM(IF(level_concept_difficulties.conditionals = 2, 1, 0)) AS conditionals_d2_count,
#     SUM(IF(level_concept_difficulties.conditionals = 3, 1, 0)) AS conditionals_d3_count,
#     SUM(IF(level_concept_difficulties.conditionals = 4, 1, 0)) AS conditionals_d4_count,
#     SUM(IF(level_concept_difficulties.conditionals = 5, 1, 0)) AS conditionals_d5_count,
#   FROM user_levels
#   LEFT OUTER JOIN authored_hint_view_requests
#     ON authored_hint_view_requests.user_id = user_levels.user_id
#       AND authored_hint_view_requests.script_id = user_levels.script_id
#       AND authored_hint_view_requests.level_id = user_levels.level_id
#   LEFT OUTER JOIN hint_view_requests
#     ON hint_view_requests.user_id = user_levels.user_id
#       AND hint_view_requests.script_id = user_levels.script_id
#       AND hint_view_requests.level_id = user_levels.level_id
#   INNER JOIN level_concept_difficulties
#     ON level_concept_difficulties.level_id = user_levels.level_id
#   WHERE user_levels.best_result = 100
#     AND user_levels.script_id IN (1, 18, 19, 23)
#     AND user_levels.id > #{start_id}
#     AND user_levels.id < #{end_id}
#     AND user_levels.created_at > #{start_date}
#     AND user_levels.created_at < #{end_date}
#     AND authored_hint_view_requests.id IS NULL
#     AND hint_view_requests.id IS NULL
#   GROUP BY user_levels.user_id;
#
# with the values of `start_id`, `end_id`, `start_date`, and `end_date` from
# the spreadsheet
#   https://docs.google.com/spreadsheets/d/12zZB003jXAivY9Dnh1VEIBdvaZXAkj0H4NU2i0bAFY8
# and exported via the mysqldump command
#
#   mysqldump dashboard_production proficiencies_20160101_20160201
#     --host=reporting.ceidnfhvpbck.us-east-1.rds.amazonaws.com
#     --user=db
#     --password
#     --result-file=proficiencies_20160101_20160201
#
# and combined and imported by this script.

require 'csv'
require_relative '../../dashboard/config/environment'

DATE_RANGES = [
  ['20160101', '20160201', '2016-01-31 23:59:59'],
  ['20160201', '20160301', '2016-02-29 23:59:59'],
  ['20160301', '20160401', '2016-03-31 23:59:59'],
  ['20160401', '20160501', '2016-04-30 23:59:59'],
  ['20160501', '20160601', '2016-05-31 23:59:59'],
  ['20160601', '20160701', '2016-06-30 23:59:59'],
  ['20160701', '20160801', '2016-07-31 23:59:59'],
  ['20160801', '20160901', '2016-08-31 23:59:59'],
  ['20160901', '20161001', '2016-09-30 23:59:59'],
  ['20161001', '20161101', '2016-10-31 23:59:59'],
  ['20161101', '20161201', '2016-11-30 23:59:59'],
  ['20161201', '20170101', '2016-12-31 23:59:59']
].freeze

MONTHLY_FILENAME_PREFIX = '/tmp/proficiency'.freeze
AGGREGATE_FILENAME = '/tmp/proficiency_20160101_20170101'.freeze

SLICE_SIZE = 5_000

# @param line [Array] an array giving UserProficiency values
# @return [Boolean] a boolean indicating whether basic proficiency has been
#   achieved.
def proficient?(line)
  concept_count = 0

  # Sequencing.
  if line[3] + line[4] + line[5] >= 3
    concept_count += 1
  end
  # Loops.
  if line[13] + line[14] + line[15] >= 3 ||
    line[18] + line[19] + line[20] >= 3 ||
    line[23] + line[24] + line[25] >= 3
    concept_count += 1
  end
  # Events.
  if line[28] + line[29] + line[30] >= 3
    concept_count += 1
  end
  # Variables.
  if line[33] + line[34] + line[35] >= 3
    concept_count += 1
  end
  # Functions.
  if line[38] + line[39] + line[40] >= 3 ||
    line[43] + line[44] + line[45] >= 3
    concept_count += 1
  end
  # Conditionals.
  if line[48] + line[49] + line[50] >= 3
    concept_count += 1
  end

  concept_count >= 3
end

# @param historical_line [Array] an array giving historical UserProficiency
#   values
# @param incremental_line [Array] an array giving incremental UserProficiency
#   values
# @return [Array] an array representing the sum of historical_line and
#   incremental_line
def increment_user_proficiency(historical_line, incremental_line)
  sum = historical_line.clone

  # Add the incremental level counts to the historical level counts.
  (1..50).each do |index|
    sum[index] += incremental_line[index]
  end
  # Update last_progress_at.
  sum[51] = incremental_line[51]
  # Update basic_proficiency_at.
  if sum[52].nil? && proficient?(sum)
    sum[52] = incremental_line[51]
  end

  sum
end

# Reads monthly snapshot data from the files specified by DATE_RANGES,
# aggregates the data, and writes the aggregate to a CSV file.
# @return [Hash] A hash from user IDs to arrays with proficiency data
#   (
#     user_id,
#     sequencing_d1_count,
#     ...,
#     conditionals_d5_count,
#     last_progress_at,
#     basic_proficiency_at
#   )
def rollup_monthly_snapshots
  # A to-be-populated hash from user_ids to user_proficiency data.
  user_proficiency_hash = {}

  # Process the CSV files, populating user_proficiency_hash from their data.
  DATE_RANGES.each do |start_date, end_date, end_timestamp|
    filename = "#{MONTHLY_FILENAME_PREFIX}_#{start_date}_#{end_date}"

    puts "PROCESSING #{filename}..."

    CSV.foreach(filename).with_index do |line, line_num|
      if line_num % 100_000 == 0
        puts "  LINE #{line_num}..."
      end

      # Convert the user_id and level counts from strings to integers.
      line[0..50] = line[0..50].map(&:to_i)
      # Add a timestamp for last_progress_at and nil for basic_proficiency_at
      # (which gets filled in elsewhere appropriately).
      line << end_timestamp
      line << nil

      user_id = line[0]
      historical = if user_proficiency_hash.key?(user_id)
                     user_proficiency_hash[user_id]
                   else
                     empty_historical = Array.new(52, 0)
                     empty_historical[0] = user_id
                     empty_historical[51] = nil
                     empty_historical[52] = nil
                     empty_historical
                   end

      user_proficiency_hash[user_id] = increment_user_proficiency(
        historical, line
      )
    end

    puts "PROCESSED #{filename}."
  end

  puts "WRITING #{AGGREGATE_FILENAME}..."
  CSV.open(AGGREGATE_FILENAME, 'wb') do |csv|
    user_proficiency_hash.values.each do |row|
      csv << row
    end
  end
  puts "WROTE #{AGGREGATE_FILENAME}."

  return user_proficiency_hash
end

def update_database
  user_proficiency_data = []
  puts "READING DATA FROM #{AGGREGATE_FILENAME}..."
  CSV.foreach(AGGREGATE_FILENAME) do |row|
    mapped_row = row[0..50].map(&:to_i) << row[51] << row[52]
    user_proficiency_data << mapped_row
  end
  puts "READ DATA (#{user_proficiency_data.size} rows) FROM #{AGGREGATE_FILENAME}."

  slice_count = 0
  puts "UPDATING DB..."
  # Update the DB with the data in user_proficiency_hash.
  begin
    user_proficiency_data.each_slice(SLICE_SIZE) do |slice|
      puts "  SLICE_COUNT: #{slice_count} of #{user_proficiency_data.length / SLICE_SIZE}..."

      ActiveRecord::Base.transaction do
        slice.each do |proficiency|
          db_proficiency = UserProficiency.find_or_create_by(user_id: proficiency[0])

          db_proficiency.sequencing_d1_count += proficiency[1]
          db_proficiency.sequencing_d2_count += proficiency[2]
          db_proficiency.sequencing_d3_count += proficiency[3]
          db_proficiency.sequencing_d4_count += proficiency[4]
          db_proficiency.sequencing_d5_count += proficiency[5]

          db_proficiency.debugging_d1_count += proficiency[6]
          db_proficiency.debugging_d2_count += proficiency[7]
          db_proficiency.debugging_d3_count += proficiency[8]
          db_proficiency.debugging_d4_count += proficiency[9]
          db_proficiency.debugging_d5_count += proficiency[10]

          db_proficiency.repeat_loops_d1_count += proficiency[11]
          db_proficiency.repeat_loops_d2_count += proficiency[12]
          db_proficiency.repeat_loops_d3_count += proficiency[13]
          db_proficiency.repeat_loops_d4_count += proficiency[14]
          db_proficiency.repeat_loops_d5_count += proficiency[15]

          db_proficiency.repeat_until_while_d1_count += proficiency[16]
          db_proficiency.repeat_until_while_d2_count += proficiency[17]
          db_proficiency.repeat_until_while_d3_count += proficiency[18]
          db_proficiency.repeat_until_while_d4_count += proficiency[19]
          db_proficiency.repeat_until_while_d5_count += proficiency[20]

          db_proficiency.for_loops_d1_count += proficiency[21]
          db_proficiency.for_loops_d2_count += proficiency[22]
          db_proficiency.for_loops_d3_count += proficiency[23]
          db_proficiency.for_loops_d4_count += proficiency[24]
          db_proficiency.for_loops_d5_count += proficiency[25]

          db_proficiency.events_d1_count += proficiency[26]
          db_proficiency.events_d2_count += proficiency[27]
          db_proficiency.events_d3_count += proficiency[28]
          db_proficiency.events_d4_count += proficiency[29]
          db_proficiency.events_d5_count += proficiency[30]

          db_proficiency.variables_d1_count += proficiency[31]
          db_proficiency.variables_d2_count += proficiency[32]
          db_proficiency.variables_d3_count += proficiency[33]
          db_proficiency.variables_d4_count += proficiency[34]
          db_proficiency.variables_d5_count += proficiency[35]

          db_proficiency.functions_d1_count += proficiency[36]
          db_proficiency.functions_d2_count += proficiency[37]
          db_proficiency.functions_d3_count += proficiency[38]
          db_proficiency.functions_d4_count += proficiency[39]
          db_proficiency.functions_d5_count += proficiency[40]

          db_proficiency.functions_with_params_d1_count += proficiency[41]
          db_proficiency.functions_with_params_d2_count += proficiency[42]
          db_proficiency.functions_with_params_d3_count += proficiency[43]
          db_proficiency.functions_with_params_d4_count += proficiency[44]
          db_proficiency.functions_with_params_d5_count += proficiency[45]

          db_proficiency.conditionals_d1_count += proficiency[46]
          db_proficiency.conditionals_d2_count += proficiency[47]
          db_proficiency.conditionals_d3_count += proficiency[48]
          db_proficiency.conditionals_d4_count += proficiency[49]
          db_proficiency.conditionals_d5_count += proficiency[50]

          db_proficiency.last_progress_at = proficiency[51] unless db_proficiency.last_progress_at
          db_proficiency.basic_proficiency_at = proficiency[52] if proficiency[52]
          unless db_proficiency.basic_proficiency_at
            if db_proficiency.basic_proficiency?
              db_proficiency.basic_proficiency_at = db_proficiency.last_progress_at
            end
          end

          db_proficiency.save!
        end
      end
      slice_count += 1
    end
  rescue Exception => e
    puts "EXCEPTION: PROCESSING #{slice_count}..."
    raise e
  end
  puts "UPDATED DB."
end

def main
  print 'ROLLUP MONTHLY SNAPSHOTS? (Y/N): '
  do_rollup_monthly_snapshots = gets.strip
  if do_rollup_monthly_snapshots == 'Y'
    rollup_monthly_snapshots
  end

  print 'UPDATE DATABASE? (Y/N): '
  do_update_database = gets.strip
  if do_update_database == 'Y'
    update_database
  end
end

main
