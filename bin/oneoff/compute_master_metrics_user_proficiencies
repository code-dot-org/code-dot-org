#!/usr/bin/env ruby

# This script generates numbers for the Master Metrics document, specifically
# the number of users demonstrating coding proficiency at the various difficulty
# levels. The files consumed by the script are the same as those in
#   bin/oneoff/back_populate_user_proficiencies_again
# and are expected to be in the /tmp directory. See that script for the CSV
# specification.
#
# USAGE: ./bin/oneoff/compute_master_metric_user_proficiencies
#
# Note that this script generalizes the back_populate_user_proficiencies_again
# script, removing the DB writes.
#
# CAUTION: This script is being checked-in as run. This SHOULD NOT be run as-is,
# instead the script should be modified to hit the reporting DB for the list of
# teacher user IDs.

require 'csv'
require_relative '../production/dashboard/config/environment'

# @param month [Integer] the filename suffix for month.
# @return [String] the filename suffix for month.
def suffix_from_month(month)
  return "_2016_0#{month}"
end

# @param line [Array] an array giving UserProficiency values
# @param level [Integer] the difficulty level at which to assess proficiency.
# @return [Boolean] a boolean indicating whether basic proficiency has been
#   achieved.
def proficient?(line, level)
  concept_count = 0

  # Sequencing.
  sequencing_count = line[5]
  sequencing_count += line[4] if level <= 4
  sequencing_count += line[3] if level <= 3
  sequencing_count += line[2] if level <= 2
  sequencing_count += line[1] if level <= 1
  if sequencing_count >= 3
    concept_count += 1
  end

  # Loops.
  repeat_loops_count = line[15]
  repeat_loops_count += line[14] if level <= 4
  repeat_loops_count += line[13] if level <= 3
  repeat_loops_count += line[12] if level <= 2
  repeat_loops_count += line[11] if level <= 1
  repeat_until_while_count = line[20]
  repeat_until_while_count += line[19] if level <= 4
  repeat_until_while_count += line[18] if level <= 3
  repeat_until_while_count += line[17] if level <= 2
  repeat_until_while_count += line[16] if level <= 1
  for_loops_count = line[25]
  for_loops_count += line[24] if level <= 4
  for_loops_count += line[23] if level <= 3
  for_loops_count += line[22] if level <= 2
  for_loops_count += line[21] if level <= 1
  if repeat_loops_count >= 3 ||
    repeat_until_while_count >= 3 ||
    for_loops_count >= 3
    concept_count += 1
  end

  # Events.
  events_count = line[30]
  events_count += line[29] if level <= 4
  events_count += line[28] if level <= 3
  events_count += line[27] if level <= 2
  events_count += line[26] if level <= 1
  if events_count >= 3
    concept_count += 1
  end

  # Variables.
  variables_count = line[35]
  variables_count += line[34] if level <= 4
  variables_count += line[33] if level <= 3
  variables_count += line[32] if level <= 2
  variables_count += line[31] if level <= 1
  if variables_count >= 3
    concept_count += 1
  end

  # Functions.
  functions_count = line[40]
  functions_count += line[39] if level <= 4
  functions_count += line[38] if level <= 3
  functions_count += line[37] if level <= 2
  functions_count += line[36] if level <= 1
  functions_with_params_count = line[45]
  functions_with_params_count += line[44] if level <= 4
  functions_with_params_count += line[43] if level <= 3
  functions_with_params_count += line[42] if level <= 2
  functions_with_params_count += line[41] if level <= 1
  if functions_count >= 3 || functions_with_params_count >= 3
    concept_count += 1
  end

  # Conditionals.
  conditionals_count = line[50]
  conditionals_count += line[49] if level <= 4
  conditionals_count += line[48] if level <= 3
  conditionals_count += line[47] if level <= 2
  conditionals_count += line[46] if level <= 1
  if conditionals_count >= 3
    concept_count += 1
  end

  concept_count >= 3
end

# @param historical_line [Array] an array giving historical UserProficiency
#   values
# @param incremental_line [Array] an array giving incremental UserProficiency
#   values
# @return [Array] an array representing the sum of historical_line and
#   incremental_line
def increment_user_proficiency(historical_line, incremental_line)
  sum = historical_line.clone

  # Add the incremental level counts to the historical level counts.
  (1..50).each do |index|
    sum[index] += incremental_line[index]
  end

  sum
end

# A to-be-populated hash from user_ids to user_proficiency data.
user_proficiency_hash = {}

# The set of teacher user IDs, so that these can be skipped when performing
# counts.
# TODO(asher): Change this to hit the reporting DB.
teacher_user_ids = Users.where(user_type: 'teacher').pluck(:id)

# Process the CSV files, populating user_proficiency_hash from their data.
# After processing each CSV file, compute the number of users proficient at each
# difficulty level.
(1..8).each do |month|
  filename = "/tmp/user_proficiencies#{suffix_from_month(month)}"

  puts "PROCESSING #{filename}..."
  CSV.foreach(filename).with_index do |line, line_num|
    if line_num % 100_000 == 0
      puts "  LINE #{line_num}..."
    end

    # Convert the user_id and level counts from strings to integers.
    (0..50).each do |index|
      line[index] = line[index].to_i
    end

    user_id = line[0]
    next if teacher_user_ids.include? user_id
    historical = if user_proficiency_hash.key?(user_id)
                   user_proficiency_hash[user_id]
                 else
                   empty_historical = Array.new(51, 0)
                   empty_historical[0] = user_id
                   empty_historical
                 end

    user_proficiency_hash[user_id] = increment_user_proficiency(historical, line)
  end
  puts "PROCESSED #{filename}."

  (1..5).each do |difficulty_level|
    count_proficient = 0
    user_proficiency_hash.values.each do |user_proficiency|
      count_proficient += 1 if proficient?(user_proficiency, difficulty_level)
    end
    puts "COUNT PROFICIENT (2016-0#{month}): #{count_proficient} (USING LEVEL = #{difficulty_level})"
  end
end
