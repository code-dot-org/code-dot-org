#!/usr/bin/env ruby

# This script updates the pd_enrollment survey_sent_at and survey_id fields for existing surveys
# from before those fields existed, and sends missing pd_workshop survey emails that didn't go out.

require_relative '../../dashboard/config/environment'
require File.expand_path('../../../pegasus/src/env', __FILE__)
require src_dir 'database'
require 'cdo/only_one'

def main
  dashboard_message_id = DB[:poste_messages].where(name: 'dashboard').order(:id).last[:id]

  # Find all surveys sent since July, when a prior version of this script was run,
  # and make sure their associated enrollment.survey_sent_at field is set.
  count = 0
  deliveries = DB[:poste_deliveries].where(message_id: dashboard_message_id).
    where('sent_at > "2016-07-01"').
    where(Sequel.like(:params, '%Please take a minute to complete this short survey%')).
    where(Sequel.like(:params, "%pd-workshop-survey%"))

  deliveries.each do |delivery|
    body = JSON.parse(delivery[:params])["body"]
    sent_at = delivery[:sent_at]

    enrollment_code = /href="\/\/code.org\/pd-workshop-survey\/(\w+)"/.match(body)[1]
    enrollment = Pd::Enrollment.find_by!(code: enrollment_code)

    puts "delivery: #{delivery[:id]}} - enrollment: #{enrollment.id}"
    enrollment.update!(survey_sent_at: sent_at)
    count += 1
  end
  puts "#{count} enrollments updated with survey times."
  puts

  # Update enrollments with completed_survey_ids for all completed surveys
  DB[:forms].where(kind: 'PdWorkshopSurvey').each do |survey|
    data = JSON.parse(survey[:data])
    enrollment_id = data['enrollment_id_i']

    enrollment = Pd::Enrollment.find(enrollment_id)
    enrollment.update!(completed_survey_id: survey[:id])
  end

  # Update processed_at for workshops where surveys have been sent already,
  # and collect workshop ids that still need to be processed.
  unprocessed_workshop_ids = []
  count = 0
  Pd::Workshop.in_state(Pd::Workshop::STATE_ENDED).find_each do |workshop|
    survey_sent_at = workshop.enrollments.maximum(:survey_sent_at)
    if survey_sent_at
      workshop.update!(processed_at: survey_sent_at)
      count += 1
    else
      unprocessed_workshop_ids << workshop.id
    end
  end
  puts "#{count} workshops updated with processed_at."
  puts "#{unprocessed_workshop_ids.count} unprocessed workshops found."
  puts

  # Next, process all the unprocessed workshops, which will send any survey emails that didn't go out.
  unprocessed_workshop_ids.each do |id|
    puts "Processing workshop #{id}"
    Pd::Workshop.process_ended_workshop_async id
  end
  puts "#{unprocessed_workshop_ids.count} unprocessed workshops processed."
end

main if only_one_running?(__FILE__)
