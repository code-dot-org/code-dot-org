#!/usr/bin/env ruby

# This script is only intended for development and adhoc environments.

require_relative '../../dashboard/config/environment'
require 'optparse'
exit unless [:development, :adhoc].include? rack_env

# To run: ruby bin/oneoff/bulk_load_bugcrowd_users --filename=users.csv --dry-run=false
# To revert: ruby bin/oneoff/move_user_storage_ids_to_dashboard.rb --revert

# Parse options
options = {
  revert: false,
}

OptionParser.new do |opts|
  opts.banner = <<~BANNER
    Usage: #{File.basename(__FILE__)} [options]
    This script loads a list of emails and creates bugcrowd users with verified_teacher permission
    Options:
  BANNER
  opts.on('--filename=users.csv',
          String,
          'Name of CSV file with list of email addresses to bulk create users.'
  ) do |filename|
    options[:filename] = filename
  end
  opts.on('--dry-run',
          'Enables read-only mode where no changes are written to the database'
  ) do |dry_run|
    options[:dry_run] = dry_run
  end

  opts.on('-h', '--help', 'Prints this help message') do
    puts opts
    exit
  end
end.parse!
puts "Options: #{options}"
options.freeze

$dry_run = options[:dry_run]
$input_file = options[:filename]
$dry_run_suffix = options[:dry_run] ? "[DRY_RUN] - " : ""

# get the current user
def get_existing_user(user_params)
  user = User.find_by(email: user_params[:email])
  return user
end

# Given the set of params, create or upsert a new user on the database
def upsert_user(user_params)
  ActiveRecord::Base.transaction do
    user = get_existing_user(user_params)
    if user.nil?
      puts $dry_run_suffix + "Creating new user: " + user_params[:email]
      user = User.new(user_params)
      user.validate_for_finish_sign_up
      unless user.errors.blank?
        raise $dry_run_suffix + "Issues found while creating user " + user.errors.to_json
      end
    else
      puts $dry_run_suffix + "Updating new existing user:" + user_params[:email]
    end
    unless $dry_run
      user.update_without_password(user_params)
      user.permission = UserPermission::AUTHORIZED_TEACHER
    end
  end
end

# Wrapper class that converts a bugcrowdninja account into a param bag
# compatible with the new user APIs for code.org
class BugCrowdAccountInfo
  def initialize(email)
    @email = email
  end

  def get_code_org_user_params
    user_params = {
      username: username,
      password: password,
      name: name,
      email: @email,
      user_type: user_type,
      age: age,
    }
    return user_params
  end

  private def user_type
    return 'teacher'.freeze
  end

  private def username
    email_name_tokens = get_email_name_tokens
    return email_name_tokens.join("_")
  end

  private def name
    email_name_tokens = get_email_name_tokens
    return email_name_tokens.join(" ")
  end

  #This is the current value for teachers' new accounts
  private def age
    return 21
  end

  private def password
    return @email.split('@')[0]
  end

  private def get_email_name_tokens
    return @email.split('@')[0].split('-').slice(0, 2)
  end
end

# This script gets a CVS file containing one column with bugcrowdninja accounts.
#
# Considerations:
# The user name will be the email if available or a random one will be assigned
# the password is the same as the email user (before the @)
# Accounts are teacher type (21+ age)
# if the account exists, they will be overwritten with the behavior explained above
def run
  return CSV.foreach($input_file, {headers: true}) do |row|
    bugcrowd_account_info = BugCrowdAccountInfo.new(row[0])
    user_params = bugcrowd_account_info.get_code_org_user_params
    upsert_user(user_params)
  end
end

run
