#!/usr/bin/env ruby

# This script replaces instances of "flappy_whenRunButtonClick" within
# level_sources.data with "when_run". Doing so obsoletes the method
# LevelSource#replace_old_when_run_blocks.

# It reads a CSV for a list of LevelSource IDs to fix, generated by the SQL
#
#   SELECT id
#   FROM level_sources
#   WHERE level_id IN (
#     SELECT id
#     FROM levels
#     WHERE game_id = (SELECT id FROM games WHERE name = "Flappy")
#   );
#
# noting that adding the clause
#
#   AND data LIKE '%flappy_whenRunButtonClick%'
#
# to the query caused it to become prohibitively long (longer than four hours).

require 'digest/md5'
require_relative '../../dashboard/config/environment'

DATA_FILE = ARGV[0].freeze
OLD_WHEN_RUN = 'flappy_whenRunButtonClick'.freeze
NEW_WHEN_RUN = 'when_run'.freeze

puts "READING CSV FILE #{DATA_FILE}..."

level_source_ids = []
CSV.foreach(DATA_FILE) do |row|
  level_source_ids << row[0].to_i
end

puts "DONE READING CSV (#{level_source_ids.size} rows)."

puts "UPDATING DB (#{1 + (level_source_ids / 1_000)} slices)..."

slice_number = 0
rows_fixed = 0
level_source_ids.each_slice(1_000) do |slice_ids|
  puts "PROCESSING SLICE #{slice_number}... (ALREADY FIXED: #{rows_fixed})..."
  LevelSource.
    where(id: slice_ids).
    where("data LIKE '%flappy_whenRunButtonClick%'").
    each do |level_source|
    # Migrate the data from the old block to the new block.
    new_data = level_source.data.gsub(OLD_WHEN_RUN, NEW_WHEN_RUN)
    level_source.update!(
      data: new_data,
      md5: Digest::MD5.hexdigest(new_data)
    )

    rows_fixed += 1
  end

  slice_number += 1
end

puts "DONE UPDATING DB (#{rows_fixed} updated)."
