#!/usr/bin/env ruby

require_relative '../../../dashboard/config/environment'

# This script backfills the section_instructors table to ensure that older
# sections have their owner represented in this table.

CDO.log = Logger.new($stdout)
ActiveRecord::Base.record_timestamps = false

options = {actually_update: false, start_with: 1}
OptionParser.new do |opts|
  opts.banner = "Usage: #{File.basename(__FILE__)} [options]"
  opts.on('-u', '--actually-update', 'Actually perform the update.') do
    options[:actually_update] = true
  end
  opts.on('-sSTART', '--start-with=START', Integer, 'Start with section ID START.') do |s|
    options[:start_with] = s
  end
  opts.on('-h', '--help', 'Add -u to perform the update.') do
    puts opts
    exit
  end
end.parse!
CDO.log.info "Called with options: #{options}"

BATCH_SIZE = 100
INFO_INTERVAL = 1_000

sections_processed = 0
sections_not_processed = 0

Section.includes(:user).find_each(batch_size: BATCH_SIZE, start: options[:start_with]) do |section|
  # Be kind to the database by limiting to 100 sections processed per second
  sleep 0.01

  ActiveRecord::Base.transaction do
    CDO.log.info "Processing section #{section.id}" if section.id % INFO_INTERVAL == 0
    section.ensure_owner_is_active_instructor

    sections_processed += 1

    raise ActiveRecord::Rollback unless options[:actually_update]
  rescue ActiveRecord::Rollback
    # Ignore these during the dry runs
  rescue => exception
    CDO.log.error "Could not process section #{section.id}"
    CDO.log.error exception
    sections_not_processed += 1
  end
end

CDO.log.info "Script completed"
CDO.log.info "#{sections_processed} sections were processed, #{sections_not_processed} experienced errors"
