#!/usr/bin/env ruby

require_relative '../../../dashboard/config/environment'
require File.expand_path('../../../../pegasus/src/env', __FILE__)
require 'cdo/only_one'
require src_dir 'database'

FIELD_MAPPING = {
  "will_teach_b" => "willTeach",
  "reason_for_attending_ss" => "reasonForAttending",
  "reason_for_attending_other_s" => "reasonForAttendingOther",
  "how_heard_ss" => "howHeard",
  "received_clear_communication_s" => "receivedClearCommunication",
  "how_much_learned_s" => "howMuchLearned",
  "how_motivating_s" => "howMotivating",
  "how_clearly_presented_s" => "howClearlyPresented",
  "how_interesting_s" => "howInteresting",
  "how_often_given_feedback_s" => "howOftenGivenFeedback",
  "help_quality_s" => "helpQuality",
  "how_comfortable_asking_questions_s" => "howComfortableAskingQuestions",
  "how_often_taught_new_things_s" => "howOftenTaughtNewThings",
  "things_facilitator_did_well_s" => "thingsFacilitatorDidWell",
  "things_facilitator_could_improve_s" => "thingsFacilitatorCouldImprove",
  "how_much_participated_s" => "howMuchParticipated",
  "how_often_talk_about_ideas_outside_s" => "howOftenTalkAboutIdeasOutside",
  "how_often_lost_track_of_time_s" => "howOftenLostTrackOfTime",
  "how_excited_before_s" => "howExcitedBefore",
  "overall_how_interested_s" => "overallHowInterested",
  "more_prepared_than_before_s" => "morePreparedThanBefore",
  "know_where_to_go_for_help_s" => "knowWhereToGoForHelp",
  "suitable_for_my_experience_s" => "suitableForMyExperience",
  "would_recommend_s" => "wouldRecommend",
  "best_pd_ever_s" => "bestPdEver",
  "part_of_community_s" => "partOfCommunity",
  "things_you_liked_s" => "thingsYouLiked",
  "things_you_would_change_s" => "thingsYouWouldChange",
  "anything_else_s" => "anythingElse",
  "gender_s" => "gender",
  "race_ss" => "race",
  "age_s" => "age",
  "years_taught_i" => "yearsTaught",
  "grades_taught_ss" => "gradesTaught",
  "grades_planning_to_teach_ss" => "gradesPlanningToTeach",
  "subjects_taught_ss" => "subjectsTaught",
  "school_has_tech_b" => "schoolHasTech",
  "venue_feedback_s" => "venueFeedback",
  "how_heard_other_s" => "howHeardOther",
  "will_not_teach_explanation_s" => "willNotTeachExplanation",
  "willing_to_talk_b" => "willingToTalk",
  "how_to_contact_s" => "howToContact",
  "who_facilitated_ss" => "whoFacilitated"
}.freeze

NEW_FIELD_DEFAULTS = {
  "whoFacilitated" => [],
}.freeze

# Custom class for creating Pd::WorkshopSurvey entries from older data that
# might not necessarily pass our current validation
class Pd::WorkshopSurveyAllowSomeNils < Pd::WorkshopSurvey
  # These fields are new, so don't require them for older surveys
  def required_fields
    fields = super.dup
    fields.delete(:school_has_tech)
    fields.delete(:willing_to_talk)

    fields
  end

  # because we can't expect the migration to enforce order and because we can
  # trust the validation imposed by the old pegasus form to a certain extent,
  # don't try to enforce demographics questions
  def demographics_required_fields
    []
  end

  # override the STI name because we want these to be saved as regular old
  # Pd::WorkshopSurvey instances, just having gone through our custom validation
  def self.sti_name
    Pd::WorkshopSurvey.sti_name
  end
end

def main
  PEGASUS_DB[:forms].where(kind: 'PdWorkshopSurvey').each do |survey|
    old_data = JSON.parse survey[:data]

    # If this survey is one of the few for which the user did not consent,
    # simply discard it
    next if old_data["consent_b"] == "0"

    pd_enrollment_id = old_data["enrollment_id_i"].to_i

    # we enforce uniqueness of the enrollment id at all levels, so fail fast
    # here if we've already created a survey from this data. This will allow us
    # to rerun this script
    next if Pd::WorkshopSurvey.exists?(pd_enrollment_id: pd_enrollment_id)

    survey = Pd::WorkshopSurveyAllowSomeNils.create(pd_enrollment_id: pd_enrollment_id)

    new_data = {}
    old_data.each do |key, value|
      new_data[FIELD_MAPPING[key]] = value if FIELD_MAPPING.key?(key) && !value.nil?
    end

    # boolean fields need to be converted to text
    booleans = %w(willTeach schoolHasTech willingToTalk)
    booleans.each do |boolean|
      next unless new_data.key? boolean
      new_data[boolean] = new_data[boolean] == "1" ? "Yes" : "No"
    end

    # integer fields need to be converted to text
    new_data['yearsTaught'] = (new_data.try(:[], 'yearsTaught') || 0).to_s

    # we have also introduced some new required fields; populate them with
    # default data for those forms submitted long ago
    NEW_FIELD_DEFAULTS.each do |key, value|
      new_data[key] ||= value
    end

    survey.form_data_hash = new_data

    survey.save!
  end
end

main if only_one_running?(__FILE__)
