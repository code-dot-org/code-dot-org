#!/usr/bin/env ruby

# This script populates the hashed_email column of the pegasus forms table.
# This is based off of contacts_hashed_email

require File.expand_path('../../../../pegasus/src/env', __FILE__)
require 'digest/md5'
require src_dir 'database'

if ARGV.length < 3 || ARGV.length > 4
  puts 'Usage: ./bin/oneoff/backfill_data/forms_hashed_email '\
    'start_index end_index batch_size [--dry-run]'
  exit 1
end

start_index = ARGV[0].to_i
end_index = ARGV[1].to_i
batch_size = ARGV[2].to_i
dry_run = ARGV[3] == '--dry-run'

puts '--dry-run flag passed, no database writes will occur' if dry_run

update_count = 0

until start_index > end_index
  puts "Processing from #{start_index} to #{start_index + batch_size}..."

  # For efficiency reasons, we keep a hash of ID to hashed_email, doing the
  # update in a transaction. To minimize locking of the table, we compute the
  # hash outside of the update transaction.
  hashed_email_updates = {}
  DB[:forms].
    where(id: start_index..(start_index + batch_size)).
    each do |form|
    hashed_email = Digest::MD5.hexdigest(form[:email])
    hashed_email_updates[form[:id]] = hashed_email
  end

  if dry_run
    hashed_email_updates.each_pair do |id, hashed_email|
      puts "Would have written #{id} => #{hashed_email}"
      update_count += 1
    end
  else
    DB.transaction do
      hashed_email_updates.each_pair do |id, hashed_email|
        DB[:forms].where(id: id).update(hashed_email: hashed_email)
        ++update_count
      end
    end
  end

  start_index += batch_size
end

puts "Updated #{update_count} records" unless dry_run
puts "Would have updated #{update_count} records" if dry_run
