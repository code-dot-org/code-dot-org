#!/usr/bin/env ruby

# This script creates a user_geos entry (if one does not already exist) for
# every user with a previous sign-in.

require_relative '../../../dashboard/config/environment'

if ARGV.length != 3
  puts 'Usage: ./bin/oneoff/backfill_data/user_geos start_index end_index batch_size'
  exit 1
end
start_index = ARGV[0].to_i
end_index = ARGV[1].to_i
batch_size = ARGV[2].to_i

time_now = DateTime.now
log_message = "program start"

begin
  while start_index < end_index
    puts "WORKING: #{start_index} .. #{start_index + batch_size}"
    user_id_to_ip_address = {}
    User.
      with_deleted.
      where(id: start_index..(start_index + batch_size)).
      where.not(current_sign_in_ip: nil).
      each do |user|
      # Populate user_id_to_ip_address so that the updates can be combined in a
      # transaction.
      log_message = "saving #{user.id}"
      user_id_to_ip_address[user.id] = user.current_sign_in_ip
    end
    ActiveRecord::Base.transaction do
      user_id_to_ip_address.each do |user_id, ip_address|
        next unless UserGeo.find_by_user_id(user_id).nil?
        log_message = "updating #{user_id}"
        UserGeo.create(
          user_id: user_id,
          ip_address: ip_address,
          created_at: time_now,
          updated_at: time_now
        )
      end
    end
    start_index += batch_size
  end
rescue
  puts "PROCESSING: #{log_message}"
end
