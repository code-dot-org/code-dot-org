#!/usr/bin/env ruby

# A oneoff script to import data from a CSV into the user_profiles table.
#
#   USAGE: ./bin/oneoff/populate_user_profile_csp /tmp/user_profile.csv
#
# The CSV is expected to be in the following format.
#
#   email,other_emails,other_user_ids,facilitator,nmsi,teals,pd_manual
#   <email>,<other_emails>,<other_user_ids>,""|"true",""|"true",""|"true",""|"201x-201y"
#   <email>,<other_emails>,<other_user_ids>,""|"true",""|"true",""|"true",""|"201x-201y"
#   <email>,<other_emails>,<other_user_ids>,""|"true",""|"true",""|"true",""|"201x-201y"
#
# Note that <other_emails> and <other_user_ids> need to be escaped with
# quotation marks if they contain commas (to separate multiple emails or IDs).

require 'csv'
require_relative '../../dashboard/config/environment'

# @param filename [String] the path to the CSV file to read. The format of the
#   file is described in the file comment above.
# @return [Array[Hash]] each array element gives the data associated with the
#   UserProfile to create.
def read_csv(filename)
  data = []
  CSV.foreach(filename, {headers: true, header_converters: :symbol}) do |csv|
    data << csv
  end
  return data
end

# param data [Array[Hash]] the UserProfiles to create.
def process_data(data)
  time_now = DateTime.now

  data.each do |datum|
    user = User.with_deleted.find_by_email_or_hashed_email(datum[:email])
    if user.nil?
      puts "MISSING USER: #{datum[:email]}"
      next
    end
    if user.user_type == 'student'
      puts "STUDENT USER: #{datum[:email]}"
      next
    end

    user_profile = UserProfile.find_or_create_by(
      user: user,
      course: UserProfile::CSP
    )

    if datum[:other_emails]
      datum[:other_emails].split(',').each do |email|
        user_profile.add_other_email email.strip
      end
    end
    if datum[:other_user_ids]
      datum[:other_user_ids].split(',').each do |id_string|
        user_profile.add_other_user_id id_string.to_i
      end
    end

    user_profile.facilitator = true if datum[:facilitator]
    user_profile.nmsi = true if datum[:nmsi]
    user_profile.teals = true if datum[:teals]

    if datum[:pd_manual]
      if UserProfile::YEARS.include? datum[:pd_manual]
        user_profile.pd_manual = datum[:pd_manual]
      else
        puts "MALFORMED USER: #{datum[:email]} #{datum[:pd_manual]}"
      end
    end

    user_profile.created_at = time_now unless user_profile.created_at
    user_profile.updated_at = time_now

    user_profile.save!
  end
end

data = read_csv ARGV[0]
process_data(data)
