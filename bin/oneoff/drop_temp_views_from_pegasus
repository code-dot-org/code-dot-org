#!/usr/bin/env ruby

require File.expand_path('../../../pegasus/src/env', __FILE__)
require src_dir 'database'
require 'optparse'

# To run: bin/oneoff/drop_temp_views_from_pegasus
# To revert: bin/oneoff/drop_temp_views_from_pegasus --revert

# Parse options
options = {
  revert: false,
}

OptionParser.new do |opts|
  opts.banner = <<~BANNER
    Usage: #{File.basename(__FILE__)} [options]

    This drops the temporary views pegasus.storage_apps and pegasus.user_storage_ids from the Pegasus DB

    Options:
  BANNER

  opts.on('--revert',
    'Will revert the Database to its previous state (add the views back)'
  ) do |revert|
    options[:revert] = revert
  end

  opts.on('-h', '--help', 'Prints this help message') do
    puts opts
    exit
  end
end.parse!
puts "Options: #{options}"
options.freeze

$revert = options[:revert]

def drop_temp_views_from_pegasus
  pegasus_storage_apps = "#{CDO.pegasus_db_name}__storage_apps".to_sym
  pegasus_user_storage_ids = "#{CDO.pegasus_db_name}__user_storage_ids".to_sym

  puts "Dropping view pegasus.storage_apps"
  DB.drop_view(pegasus_storage_apps)

  puts "Dropping view pegasus.user_storage_ids"
  DB.drop_view(pegasus_user_storage_ids)
end

def revert_drop_temp_views_from_pegasus
  pegasus_storage_apps = "#{CDO.pegasus_db_name}__storage_apps".to_sym
  pegasus_user_storage_ids = "#{CDO.pegasus_db_name}__user_storage_ids".to_sym
  dashboard_projects = "#{CDO.dashboard_db_name}__projects".to_sym
  dashboard_user_project_storage_ids = "#{CDO.dashboard_db_name}__user_project_storage_ids".to_sym

  puts "Creating view pegasus.storage_apps"
  DB.create_view(pegasus_storage_apps, DB[dashboard_projects].select_all)

  puts "Creating view pegasus.user_storage_ids"
  DB.create_view(pegasus_user_storage_ids, DB[dashboard_user_project_storage_ids].select_all)
end

if $revert
  revert_drop_temp_views_from_pegasus
else
  drop_temp_views_from_pegasus
end
