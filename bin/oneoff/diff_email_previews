#!/usr/bin/env ruby
require 'open-uri'
require 'fileutils'

@instruction = %{This script compares content of all workshop email previews before and after
a change to make sure the change doesn't have unexpected results.

How to run:
In staging branch, run './diff_email_previews download base'
In feature branch, run './diff_email_previews download new'
Compare email content in base and feature branch: './diff_email_previews diff base new'

Command syntax:
To download emails to a folder in the current directory: './diff_email_previews download <foldername>'
To diff emails in 2 folders in the current directory: './diff_email_previews diff <foldername1> <foldername2>'
}

# List of email previews are copied from
# http://localhost-studio.code.org:3000/rails/mailers/pd/workshop_mailer/
PREVIEWS = %w(
  detail_change_notification__admin
  detail_change_notification__csf_deepdive
  detail_change_notification__csf_intro
  exit_survey__csd_1
  exit_survey__csd_teacher_con
  exit_survey__csf_deepdive
  exit_survey__csf_intro
  exit_survey__csp_1
  exit_survey__csp_summer_workshop
  exit_survey__general
  facilitator_detail_change_notification__csf_intro
  facilitator_enrollment_reminder
  organizer_cancel_receipt
  organizer_detail_change_notification__csf
  organizer_enrollment_receipt
  organizer_enrollment_reminder
  organizer_should_close_reminder
  teacher_cancel_receipt__csf
  teacher_cancel_receipt__general
  teacher_enrollment_receipt__admin
  teacher_enrollment_receipt__counselor
  teacher_enrollment_receipt__cs_in_a_phase_3
  teacher_enrollment_receipt__cs_in_s_phase_3_semester_1
  teacher_enrollment_receipt__cs_in_s_phase_3_semester_2
  teacher_enrollment_receipt__csd_summer_workshop
  teacher_enrollment_receipt__csf_deepdive
  teacher_enrollment_receipt__csf_intro
  teacher_enrollment_receipt__csp_1
  teacher_enrollment_receipt__csp_summer_workshop
  teacher_enrollment_receipt__ecs_phase_4
  teacher_enrollment_receipt__ecs_unit_3
  teacher_enrollment_receipt__ecs_unit_4
  teacher_enrollment_receipt__ecs_unit_5
  teacher_enrollment_receipt__ecs_unit_6
  teacher_enrollment_receipt__formatted_notes
  teacher_enrollment_receipt__phase_2
  teacher_enrollment_receipt_csd_1
  teacher_enrollment_reminder__admin
  teacher_enrollment_reminder__counselor
  teacher_enrollment_reminder__csd_summer_workshop_10_day
  teacher_enrollment_reminder__csd_summer_workshop_3_day
  teacher_enrollment_reminder__csf_deepdive_10_day
  teacher_enrollment_reminder__csf_deepdive_3_day
  teacher_enrollment_reminder__csf_intro_10_day
  teacher_enrollment_reminder__csf_intro_3_day
  teacher_enrollment_reminder__csp_1_10_day
  teacher_enrollment_reminder__csp_1_3_day
  teacher_enrollment_reminder__csp_summer_workshop_10_day
  teacher_enrollment_reminder__csp_summer_workshop_3_day
  teacher_enrollment_reminder_csd_1_10_day
  teacher_enrollment_reminder_csd_1_3_day
  teacher_enrollment_reminder_csd_unit_6_3_day
  teacher_follow_up__csf_intro
  teacher_follow_up__csf_intro_three_facilitators
  teacher_follow_up__csf_intro_with_rp
).freeze

def create_sub_folder(folder_name)
  folder_path = './' + folder_name
  unless File.directory?(folder_path)
    FileUtils.mkdir_p(folder_path)
  end
end

def clean_folder_name(name)
  # remove trailing '/'
  name.sub(/\/*$/, '')
end

def clean_email_content(folder_name)
  raise "Folder #{folder_name} does not exits" unless File.directory?('./' + folder_name)

  folder_name = clean_folder_name folder_name
  cleaned_folder = folder_name + "_cleaned"
  create_sub_folder(cleaned_folder)

  # Find all html files in folder_name.
  # Replace "[A-Z]{10}" string in each file by "enrollment_code".
  # Save result to cleaned_folder to file with the same name.
  shell_command = "find #{folder_name} -type f -name '*.html' -exec sh -c 'base=$(basename {});\
  sed -E \"s/[A-Z]\{10\}/enrollment_code/\" {} > \"#{cleaned_folder}/$base\"' \\;"

  puts "Cleaning email content in folder #{folder_name} -> #{cleaned_folder}"
  puts "Executing: #{shell_command}"
  system(shell_command)

  cleaned_folder
end

def download_workshop_emails(output_folder)
  base = 'http://localhost-studio.code.org:3000/rails/mailers/pd/workshop_mailer/'
  body = '?part=text%2Fhtml'

  output_folder = clean_folder_name(output_folder)
  create_sub_folder output_folder

  PREVIEWS.each do |preview|
    print '.'
    IO.copy_stream(open(base + preview + body), "#{output_folder}/#{preview}_body.html")

    # This file contains email header like From/To/CC and a few more things.
    # However it has DateTime field that changes, so we exclude it from the comparison.
    # If we really want to compare headers, we will have to update diff command to ignore DateTime regex.
    # IO.copy_stream(open(base + preview), "#{output_folder}/#{preview}.html")
  rescue => e
    puts "\nFailed to download #{preview}"
    puts "Error class: #{e.class.name}"
    puts "Error msg: #{e.message}"
  end
  puts
end

def compare_workshop_emails(folder1, folder2)
  folder1_cleaned = clean_email_content(folder1)
  folder2_cleaned = clean_email_content(folder2)

  # diff 2 folders, ignoring blank lines (-B)
  shell_command = "diff -u -B #{folder1_cleaned} #{folder2_cleaned} > diffresult.txt"
  puts "Executing: #{shell_command}"
  system(shell_command)

  puts "Comparision result saved to diffresult.txt"
rescue => e
  puts "Error class: #{e.class.name}"
  puts "Error message: #{e.message}"
end

def main
  if ARGV.count == 2 && ARGV[0].downcase == 'download'
    puts "Downloading emails to folder #{ARGV[1]}"
    download_workshop_emails ARGV[1]
  elsif ARGV.count == 2 && ARGV[0].downcase == 'clean'
    puts "Cleaning emails in folder #{ARGV[1]}"
    clean_email_content ARGV[1]
  elsif ARGV.count == 3 && ARGV[0].downcase == 'diff'
    puts "Comparing emails in folders #{ARGV[1]} and #{ARGV[2]}"
    compare_workshop_emails ARGV[1], ARGV[2]
  else
    puts @instruction

    ARGV.each do |a|
      puts "Argument: #{a}"
    end
  end

  puts 'Done'
end

main
