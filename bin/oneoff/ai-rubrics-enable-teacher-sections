#!/usr/bin/env ruby

$experiment_name = 'ai-rubrics'

# map from CSD course to that course's unit which supports the experiment
$csd_course_unit_map = {
  'csd-2023' => 'csd3-2023',
  'focus-on-creativity-2023' => 'focus-on-creativity3-2023',
  'focus-on-coding-2023' => 'focus-on-coding3-2023',
}

# standalone units that support the experiment
$csd_standalone_units = ['interactive-games-animations-2023']

$teacher_emails = ARGV[0].split(',').compact.map(&:strip)
raise "Please provide a comma-separated list of teacher emails" if $teacher_emails.empty?

$teacher_emails.each do |email|
  raise "Invalid email: #{email.dump}" unless email.include?('@')
end

# this can take up to 60 seconds
ENV['SKIP_I18N_INIT'] = '1'
require_relative '../../dashboard/config/environment'

# given the course and unit a section is assigned to, assign the unit for which
# the experiment should be enabled
def get_experiment_unit_name(section)
  assigned_course = section.unit_group&.name
  assigned_unit = section.script&.name
  return $csd_course_unit_map[assigned_course] if assigned_course
  return assigned_unit if $csd_standalone_units.include?(assigned_unit)
end

def main
  num_enabled = 0
  $teacher_emails.each do |email|
    teacher = User.find_by_email(email)
    unless teacher
      puts "could not find user with email #{email.dump}"
      next
    end

    sections = teacher.sections_instructed.reject(&:hidden)
    already_found_csd_section = false
    sections.each do |section|
      unit_name = get_experiment_unit_name(section)
      next unless unit_name
      num_enabled += 1 unless already_found_csd_section
      already_found_csd_section = true
      unit = Unit.find_by_name!(unit_name)
      SingleSectionExperiment.find_or_create_by!(name: $experiment_name, section: section, script: unit)
    end
    puts "no CSD sections found for teacher #{email}" unless already_found_csd_section
  end
  puts "successfully enabled experiment for #{num_enabled} teachers" if num_enabled > 0
end

main
