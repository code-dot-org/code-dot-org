#!/usr/bin/env ruby

# Takes a csv of prize claimants with a 'Name' field,
# attempts to match each one with HocSignup2016 records (by name, case insensitive),
# and dumps the results into a _output.csv file: one row per source row, with name and
# either nothing (no matches), a single matching email, or a set of data representing multiple potential matches.

require_relative '../../pegasus/src/env'
require src_dir 'database'

PEGASUS_REPORTING_DB = sequel_connect CDO.pegasus_reporting_db_writer, CDO.pegasus_reporting_db_reader

unless ARGV[0]
  puts 'Usage: lookup_hoc2016_robotics_prize_name input_csv_filename'
  exit 1
end

input_filename = ARGV[0]
output_filename = File.basename(input_filename, '.csv') + '_output.csv'

records_by_name = {}
PEGASUS_REPORTING_DB[:forms].where(kind: 'HocSignup2016').each do |row|
  name = row[:name]
  data = JSON.parse row[:data]
  school = data['organization_name_s']
  country = data['hoc_country_s']

  records_by_name[name.downcase] = [] unless records_by_name.key? name.downcase
  records_by_name[name.downcase] << {name: name, email: row[:email], school: school, country: country}
end

matches = Hash.new(0)
CSV.open(output_filename, 'wb') do |csv|
  csv << ['Name', 'Matched Records']
  CSV.foreach(input_filename, headers: true) do |row|
    name = row['Name']
    record = records_by_name[name.downcase]
    if record
      csv <<
        if record.length == 1
          [name, record.first[:email]]
        else
          [name, record]
        end
      matches[record.length] += 1
    else
      csv << [name, nil]
    end
  end
end

matches.keys.sort.each do |k|
  puts "Matches with exactly #{k} record: #{matches[k]}"
end
puts "Matches saved in #{output_filename}"
