#!/usr/bin/env ruby
#
# This script populates the `level_source_id` column of the `user_levels` table,
# if not already present, using the data in a CSV file. The CSV file itself is
# constructed from a mysqldump of a temporary table created by the following
# MySQL.
#
#   CREATE TABLE backfill_#{LOW_ID}_#{HIGH_ID} AS
#   SELECT
#     t.user_levels_id,
#     activities.level_source_id
#   FROM (
#     SELECT
#       user_levels.id AS user_levels_id
#       MAX(activities.id) AS activities_id
#     FROM user_levels
#     INNER JOIN activities
#       ON activities.user_id = user_levels.user_id
#         AND activities.level_id = user_levels.level_id
#     WHERE user_levels.id >= #{LOW_ID}
#       AND user_levels.id < #{HIGH_ID}
#       AND user_levels.level_source_id IS NULL
#       AND activities.level_source_id IS NOT NULL
#     GROUP BY user_levels_id
#   ) AS t
#   INNER JOIN activities
#     ON activities.id = t.activities_id;
#
# The first command-line argument, filename, specifies the CSV file.
# The second command-line arugment, batch_size, specifies the number of
#   user_levels updated per transaction. The number of lines in the CSV file
#   controls the total number of user_levels updated (across all transactions).
#
# Note that, observationally, approximately 1% of activities do not have a
# level_source_id. Thus, after running this script, there will be UserLevel rows
# without a level_source_id.

require_relative '../../dashboard/config/environment'

if ARGV.length != 2
  puts 'Usage: ./bin/oneoff/back_populate_user_levels_level_source_id filename batch_size'
  exit 1
end

filename = ARGV[0]
batch_size = ARGV[1].to_i

# Since the updated_at field is used as a proxy for "last_progress_at" for the
# user_level, we intentionally do not want to modify that field.
ActiveRecord::Base.record_timestamps = false

begin
  # Read the contents of the file, saving them to an array so that we can batch
  # the updates in a transaction.
  update_array = []
  CSV.foreach(filename) do |line|
    user_levels_id = line[0].to_i
    level_source_id = line[1].to_i
    update_array << [user_levels_id, level_source_id]
  end

  puts "Found #{update_array.length} updates to process..."

  # Process the array in batches, so that the transactions are appropriate
  # sized.
  batch_index = 0
  update_array.each_slice(batch_size) do |update_array_slice|
    puts "Updating #{batch_index} to #{batch_index + batch_size} of #{update_array.length}..."
    batch_index += batch_size
    ActiveRecord::Base.transaction do
      update_array_slice.each do |user_levels_id, level_source_id|
        UserLevel.
          find_by_id(user_levels_id).
          update!(level_source_id: level_source_id)
      end
    end
  end
ensure
  ActiveRecord::Base.record_timestamps = true
end
