#!/usr/bin/env ruby

# This script assigns default workshops to teacher and facilitator applications
# including fit workshops for facilitators, only when none is already assigned.
# This is idempotent and safe to run multiple times

require 'csv'
require_relative '../../dashboard/config/environment'

def update_teacher_application_workshops
  puts "Updating teacher application workshops..."

  counts = {
    skipped: 0,
    updated: 0,
    no_workshop: 0
  }
  Pd::Application::Teacher1819Application.find_each do |teacher_application|
    if teacher_application.pd_workshop_id
      counts[:skipped] += 1
    else
      teacher_application.assign_default_workshop!
      if teacher_application.pd_workshop_id
        counts[:updated] += 1
      else
        counts[:no_workshop] += 1
      end
    end
  end

  puts counts.inspect
end

def update_facilitator_application_workshops
  puts "Updating facilitator application workshops..."

  counts = {
    pd_skipped: 0,
    pd_updated: 0,
    no_pd_workshop: 0,
    fit_skipped: 0,
    fit_updated: 0,
    no_fit_workshop: 0
  }
  Pd::Application::Facilitator1819Application.find_each do |facilitator_application|
    if facilitator_application.pd_workshop_id
      counts[:pd_skipped] += 1
    else
      facilitator_application.assign_default_workshop!
      if facilitator_application.pd_workshop_id
        counts[:pd_updated] += 1
      else
        counts[:no_pd_workshop] += 1
      end
    end

    if facilitator_application.fit_workshop_id
      counts[:fit_skipped] += 1
    else
      facilitator_application.assign_default_fit_workshop!
      if facilitator_application.fit_workshop_id
        counts[:fit_updated] += 1
      else
        counts[:no_fit_workshop] += 1
      end
    end
  end

  puts counts.inspect
end

update_teacher_application_workshops
update_facilitator_application_workshops
