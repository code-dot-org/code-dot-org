#!/usr/bin/env ruby

#
# Updates the logger severity level of DMS replication tasks.
#
# If called with argument of true, tasks will be modified, otherwise
# only diff files will be generated.
#
# Equivalent AWS CLI command:
#   aws dms modify-replication-task
#     --replication-task-arn <ARN>
#     --replication-task-settings file://task-settings.json"
#

require File.expand_path('../../../deployment', __FILE__)
require 'fileutils'
require 'tmpdir'
require 'json'

MODIFY_REPLICATION_TASKS = (ARGV[0].eql? "true").freeze
puts "Called with MODIFY_REPLICATION_TASKS=#{MODIFY_REPLICATION_TASKS}"

def main
  log_dir = "#{Dir.tmpdir}/#{File.basename(__FILE__)}/#{Time.now.strftime('%Y%m%d%H%M')}"
  FileUtils.mkdir_p(log_dir)

  client = Aws::DatabaseMigrationService::Client.new
  client.describe_replication_tasks.replication_tasks.each do |t|
    next unless t.replication_task_identifier.start_with? 'cron'

    old_settings = t.replication_task_settings
    new_settings = old_settings.gsub(/LOGGER_SEVERITY_DEFAULT/, 'LOGGER_SEVERITY_INFO')

    next unless old_settings.eql? new_settings

    puts " => #{t.replication_task_identifier}: #{t.replication_task_arn}"

    open("#{log_dir}/#{t.replication_task_identifier}.old.json", 'w') do |log|
      log.puts JSON.pretty_generate(JSON.parse(old_settings))
    end

    open("#{log_dir}/#{t.replication_task_identifier}.new.json", 'w') do |log|
      log.puts JSON.pretty_generate(JSON.parse(new_settings))
    end

    if MODIFY_REPLICATION_TASKS
      client.modify_replication_task({replication_task_arn: t.replication_task_arn, replication_task_settings: new_settings})
    end
  end

  puts "Review logs for task setting changes: #{log_dir}"
end

main
