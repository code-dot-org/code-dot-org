#!/usr/bin/env ruby
require_relative '../deployment'
require 'net/http'
require 'net/http/responses'
require 'date'
require 'json'

EYES_GET_BRANCHES_URL = "https://eyes.applitools.com/api/baselines?accesskey=#{CDO.applitools_eyes_api_key_view}".freeze
DATETIME_FORMAT = "%m/%d/%Y %H:%M:%S".freeze
SUFFIX_NEWER = " (NEWER)".freeze
SUFFIX_OLDER = " (OLDER)".freeze
SUFFIX_SAME = " (SAME)".freeze
BASELINE_BRANCH_NAME = "BaselineBranchName".freeze
SCENARIO_NAME = "ScenarioName".freeze
LAST_UPDATED = "LastUpdated".freeze
COLUMN1_WIDTH = 50
COLUMN2_WIDTH = 30

# From a serialized Javascript date, return a Ruby DateTime object
# @param jsdate [String] String of form "/Date(xxxx)/" where xxxx is epoch
#   timestamp in millseconds
# @returns [DateTime] DateTime object
def jsdate_to_datetime(jsdate)
  # Extract substring inside parentheses. Divide by 1000 to convert from
  # milliseconds to seconds.
  unix_time = jsdate[/(?<=\()(.*?)(?=\))/].to_i / 1000
  Time.at(unix_time).to_datetime
end

# Find and return scenario node for given scenario and branch. Returns
# nil if not present.
def get_scenario_for_branch(baseline_data, scenario_name, branch_name)
  baseline_data.select do |item|
    item[SCENARIO_NAME] == scenario_name &&
    item[BASELINE_BRANCH_NAME] == branch_name
  end.first
end

# Compares Eyes baselines for two branches and returns the results
# @param baseline_data [Hash] data with Eyes baselines
# @param scenario_name [String] name of scenario
# @param branch1 [String] name of 1st branch to compare
# @param branch2 [String] name of 2nd branch to compare
# @returns [String,String] Text rendering for status for 1st branch, 2nd branch
def get_scenario_status(baseline_data, scenario_name, branch1, branch2)
  status_branch1 = ""
  status_branch2 = ""
  timestamp_branch1 = nil
  timestamp_branch2 = nil
  scenario_branch1 = get_scenario_for_branch(baseline_data, scenario_name,
    branch1
  )
  scenario_branch2 = get_scenario_for_branch(baseline_data, scenario_name,
    branch2
  )

  # For either branch that has baselines for this scenario, set the status
  # result to be the last updated date
  if scenario_branch1
    timestamp_branch1 = jsdate_to_datetime(scenario_branch1[LAST_UPDATED])
    status_branch1 = timestamp_branch1.strftime(DATETIME_FORMAT)
  end
  if scenario_branch2
    timestamp_branch2 = jsdate_to_datetime(scenario_branch2[LAST_UPDATED])
    status_branch2 = timestamp_branch2.strftime(DATETIME_FORMAT)
  end

  # If baselines exist for this scenario in both branches, append an indication
  # of which is older, newer or the same for quick visual inspection
  if scenario_branch1 && scenario_branch2
    if timestamp_branch1 > timestamp_branch2
      status_branch1 += SUFFIX_NEWER
      status_branch2 += SUFFIX_OLDER
    elsif timestamp_branch1 < timestamp_branch2
      status_branch1 += SUFFIX_OLDER
      status_branch2 += SUFFIX_NEWER
    else
      status_branch1 += SUFFIX_SAME
      status_branch2 += SUFFIX_SAME
    end
  end

  return status_branch1, status_branch2
end

def main
  if ARGV.length != 2
    $stderr.puts "usage: #{$0} <branch_name_1> <branch_name_2>"
    exit(1)
  end

  branch1 = ARGV[0]
  branch2 = ARGV[1]

  puts "Making API call to Applitools. This may take a while."
  puts "URL: " + EYES_GET_BRANCHES_URL
  response = Net::HTTP.get(URI(EYES_GET_BRANCHES_URL))
  baseline_data = JSON.parse(response)

  # Find unique scenario names across both branches. (Scenarios may be present
  # in either or both branches)
  scenarios = baseline_data.select do |item|
    item[BASELINE_BRANCH_NAME] == branch1 ||
    item[BASELINE_BRANCH_NAME] == branch2
  end
  unique_scenarios = scenarios.map {|item| item[SCENARIO_NAME]}.uniq {|item| item}.sort

  # Print header
  puts "#{'Scenario:'.ljust(COLUMN1_WIDTH)}#{("#{branch1}:").ljust(COLUMN2_WIDTH)}#{branch2}:"
  # Print status of both branches for each scenario
  unique_scenarios.each do |scenario_name|
    status1, status2 = get_scenario_status(baseline_data, scenario_name, branch1, branch2)
    puts "#{scenario_name.ljust(COLUMN1_WIDTH)}#{status1.ljust(COLUMN2_WIDTH)}#{status2}"
  end
end

main
