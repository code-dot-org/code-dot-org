#!/usr/bin/env ruby
#
# This script analyzes the activity that is launched from code.org/learn. We track outgoing clicks,
# hidden image calls at the beginning and end of [3rd party] tutorials, and visits to our finish
# page.
#
# There is a lot of HOC data so, for performance, the script caches the totals for each day and only
# performs analysis on the remaining days. Deleting the cached results is an effective way to do
# a complete re-count. EXCEPT for HourOfActivity_Totals_2014-12-05.json which is a summary of all
# results for the year leading up to 12/05/2014.
#
# This script also caches values for the "about_stats" key in the Properties table. Unlike the HOC
# data, it is computed from scratch every time.
#
require File.expand_path('../../pegasus/src/env', __FILE__)
require src_dir 'database'
require 'cdo/properties'
require_relative '../lib/analyze_hoc_activity_helper'

def main()
  return unless only_one_running?(__FILE__)

  to_date = JSON.load(IO.read(pegasus_dir("cache/HourOfActivity_Totals_2014-12-05.json")))

  total_started = to_date['started']
  total_finished = to_date['finished']
  total_tutorials = to_date['tutorials']
  total_cities = to_date['cities']
  total_states = to_date['states']
  total_countries = to_date['countries']

  today = DateTime.now.to_date
  day = Date.strptime('2014/12/06', '%Y/%m/%d')

  while day <= today
    cache_path = pegasus_dir("cache/HourOfActivity_Results_#{day.strftime('%Y-%m-%d')}.json")
    if (day != today) && File.file?(cache_path)
      day_data = JSON.load(IO.read(cache_path))
    else
      day_data = analyze_day_fast(day)

      File.open(cache_path, 'wt') do |cache_file|
        cache_file << JSON.pretty_generate(day_data)
      end
    end

    total_started += day_data['started'] if day_data['started']
    total_finished += day_data['finished'] if day_data['finished']
    total_tutorials = add_hashes(total_tutorials, day_data['tutorials'])
    total_cities = add_hashes(total_cities, day_data['cities'])
    total_states = add_hashes(total_states, day_data['states']||{})
    total_countries = add_hashes(total_countries, day_data['countries'])

    day += 1
  end

  # Compute the number of hoc events (the grand total and broken down by company and country).
  hoc_country_totals = {}
  hoc_company_totals = {}
  unique_hoc_events = DB[:forms].where(kind: 'HocSignup2015').group(:email, :name).select(:name, :email, :processed_data, :data)
  total_hoc_count = DB[:forms].where(kind: 'HocSignup2015').group(:email, :name).select(:email, :name).count

  unique_hoc_events.each do |row|
    data = JSON.parse(row[:data])
    data['hoc_company_s'] = 'Other' if data['hoc_company_s'].nil_or_empty?
    add_count_to_hash hoc_company_totals, data['hoc_company_s'], 1

    unless row[:processed_data].nil?
      processed_data = JSON.parse(row[:processed_data])
      processed_data['location_country_code_s'] = 'Other' if processed_data['location_country_code_s'].nil_or_empty?
      add_count_to_hash hoc_country_totals, processed_data['location_country_code_s'], 1
    end
  end

  Properties.set :hoc_metrics, {
    started: total_started,
    finished: total_finished,
    tutorials: total_tutorials,
    cities: total_cities,
    states: total_states,
    countries: total_countries,
    total_hoc_count: total_hoc_count,
    hoc_country_totals: hoc_country_totals,
    hoc_company_totals: hoc_company_totals,
  }

  lines_of_code = rack_env?(:production) ? `#{deploy_dir('bin','count-lines-of-code-from-milestone-logs_v2')}`.to_i : 0

  time = DateTime.now
  Properties.set :metrics, {
    created_at:               time,
    created_on:               time.to_date,
    csedweek_organizers:      38236,
    csedweek_teachers:        24025,
    csedweek_entire_schools:  12754,
    csedweek_students:        4875091,
    csedweek_countries:       356,
    petition_signatures:      PEGASUS_REPORTING_DB_READONLY[:forms].where(kind: 'Petition').count,
    lines_of_code:            lines_of_code, #JSON.parse(Net::HTTP.get(URI('http://archive.learn.code.org/line_data.json')))['all'],
  }

  total_females = DASHBOARD_REPORTING_DB_READONLY[:users].where(gender: 'f').exclude(last_sign_in_at: nil).count
  total_males = DASHBOARD_REPORTING_DB_READONLY[:users].where(gender: 'm').exclude(last_sign_in_at: nil).count
  total_with_gender = [1, total_females + total_males].max

  Properties.set :about_stats, {
    number_served: total_started,
    number_students: DASHBOARD_REPORTING_DB_READONLY[:users].where(user_type: 'student').exclude(last_sign_in_at: nil).count,
    number_teachers: DASHBOARD_REPORTING_DB_READONLY[:users].where(user_type: 'teacher').exclude(last_sign_in_at: nil).count,
    percent_female: ((100 * total_females) / total_with_gender).to_i,
  }
end

main()
