#!/usr/bin/env ruby
require_relative 'only_one'
abort 'Script already running' unless only_one_running?(__FILE__)

require_relative '../../dashboard/config/environment'
require 'aws-sdk-ec2'
require 'aws-sdk-cloudwatch'
require 'cdo/chat_client'
require 'fileutils'
require 'sshkit'

def main
  ChatClient.message 'infra-production', 'Beginning to find and restart front end services with high memory utilization'
  begin
    ec2_resource = Aws::EC2::Resource.new
    cloudwatch_resource = Aws::CloudWatch::Resource.new
    frontend_servers_to_restart = Array.new

    production_frontends = ec2_resource.instances(
      {
        filters: [
          {
            name: 'tag:environment',
            values: [
              'production'
            ]
          },
          {
            name: 'tag:aws:cloudformation:logical-id',
            values: [
              'Frontends'
            ]
          },
          {
            name: 'instance-state-name',
            values: [
              'running'
            ]
          }
        ]
      }
    )
    ChatClient.message 'infra-production', "Found #{production_frontends.count} production front end webservers"
    production_frontends.each do |instance|
      memory_utilization = cloudwatch_resource.metric('CWAgent', 'mem_used_percent').get_statistics(
        {
          dimensions: [
            {
              name: 'InstanceId',
              value: instance.instance_id,
            }
          ],
          start_time: Time.now - 5.minutes,
          end_time: Time.now,
          period: 5.minutes,
          statistics: ['Average'],
          unit: 'Percent'
        }
        # Use safe navigation operator because a new instance may not have reported this metric yet.
      ).datapoints[0]&.average
      uptime_days = (Time.now - instance.launch_time) / (60 * 60 * 24)
      ChatClient.message 'infra-production', "Instance ID - #{instance.instance_id} / Memory Utilization - #{memory_utilization&.round}% / Uptime (Days) - #{uptime_days.round(2)}"
      frontend_servers_to_restart << instance.private_dns_name if uptime_days > 1
    end

    delay_per_group = 10.minutes
    group_size = 1
    restart_command = 'sudo service dashboard upgrade && sudo service pegasus upgrade'

    SSHKit::Backend::Netssh.configure {|ssh| ssh.ssh_options = {paranoid: false}}
    SSHKit::Coordinator.new(frontend_servers_to_restart).each(in: :sequence, wait: delay_per_group, limit: group_size) do
      ChatClient.message 'infra-production', capture(restart_command, raise_on_non_zero_exit: false)
    end
    ChatClient.message 'infra-production', 'Done finding and restarting front end services with high memory utilization'
  rescue StandardError => exception
    ChatClient.message 'infra-production', "Error finding/restarting frond end services with high memory utilization - #{exception}"
  end
end

main
