#!/usr/bin/env ruby

# This script truncates and then populates the following tables:
#   contained_levels
#   contained_level_answers
#   level_sources_multi_type
#   pd_applications_status_logs

require_relative 'only_one'

abort 'Script already running' unless only_one_running?(__FILE__)

require_relative '../../dashboard/config/environment'
require 'honeybadger/ruby'

TIME_NOW = DateTime.now.strftime('%F %T').freeze

# @param unsanitized [String, nil] the unsanitized string
# @returns [String, nil] the sanitized version of the string, with newlines stripped and double
#   quotations escaped. Returns nil on nil input.
def sanitize_string_for_db(unsanitized)
  return nil if unsanitized.nil?
  unsanitized.gsub(/[\r\n]+/, '').dump
end

# @param contained_level [Level] The level to parse.
# @return [String] The level question, from the markdown or the text. If both
#   exist, the two are concatenated.
def get_contained_question(contained_level)
  contained_question_markdown = contained_level.properties['markdown']

  contained_question_text = nil
  if contained_level.properties['questions']
    contained_question_text = contained_level.
      properties['questions'].
      first['text']
  end

  if contained_question_markdown.nil?
    return contained_question_text || ""
  end
  if contained_question_text.nil?
    return contained_question_markdown
  end
  "(TEXT) #{contained_question_text} (MARKDOWN) #{contained_question_markdown}"
end

def main
  # Build the data for the tables.
  contained_levels = []
  contained_level_answers = []
  level_sources_multi_types = []

  LevelGroup.find_each do |level|
    level.pages.each_with_index do |page, page_index|
      page.levels.each_with_index do |contained_level, position_index|
        next unless contained_level.type == 'Multi'
        next if contained_levels.
          any? {|existing_contained_level| existing_contained_level[:level_id] == contained_level.id}

        contained_question = get_contained_question(contained_level)
        contained_levels << {
          level_id: level.id,
          contained_level_id: contained_level.id,
          contained_level_type: contained_level.type,
          contained_level_page: page_index,
          contained_level_position: position_index,
          contained_level_text: sanitize_string_for_db(contained_question)
        }

        answers = contained_level.properties['answers']
        answers.each_with_index do |answer, answer_number|
          contained_level_answers << {
            contained_level_id: contained_level.id,
            answer_number: answer_number,
            answer_text: sanitize_string_for_db(answer['text']),
            correct: answer['correct']
          }
        end
      end
    end
  end

  Level.find_each do |level|
    begin
    # The RecordNotFound exception happens when a Level does not belong to any ScriptLevel.
    # The NoMethodError exception happens when a ScriptLevel does not have a Script.
    # TODO(asher): Fix the corrupt data on staging, eliminating the need for this rescue clause.
    rescue ActiveRecord::RecordNotFound, NoMethodError
      next
    end

    level.contained_levels.each_with_index do |contained_level, index|
      next unless contained_level.type == 'Multi'

      contained_question = get_contained_question(contained_level)
      contained_levels << {
        level_id: level.id,
        contained_level_id: contained_level.id,
        contained_level_type: contained_level.type,
        contained_level_page: 1,
        contained_level_position: index,
        contained_level_text: sanitize_string_for_db(contained_question)
      }

      answers = contained_level.properties['answers']
      answers.each_with_index do |answer, answer_number|
        contained_level_answers << {
          contained_level_id: contained_level.id,
          answer_number: answer_number,
          answer_text: sanitize_string_for_db(answer['text']),
          correct: answer['correct']
        }
      end
    end
  end

  contained_levels.map {|row| row[:contained_level_id]}.each do |contained_level_id|
    LevelSource.
      where(level_id: contained_level_id).
      find_each do |level_source|
      level_sources_multi_types << {
        level_source_id: level_source.id,
        level_id: level_source.level_id,
        data: level_source.data,
        md5: level_source.md5,
        hidden: level_source.hidden
      }
    end
  end

  Level.where(type: 'BubbleChoice').find_each do |level|
    level.sublevels&.each_with_index do |sublevel, sublevel_index|
      contained_levels << {
        level_id: level.id,
        contained_level_id: sublevel.id,
        contained_level_type: sublevel.type,
        contained_level_page: 1,
        contained_level_position: sublevel_index,
        contained_level_text: sanitize_string_for_db("")
      }
    end
  end

  # Verify that the data size is sensible.
  CDO.log.info "contained_levels: #{contained_levels.size}"
  CDO.log.info "contained_level_answers: #{contained_level_answers.size}"
  CDO.log.info "level_sources: #{level_sources_multi_types.size}"
  raise "contained_levels too big: #{contained_levels.size} rows exceeds limit of 100000" if contained_levels.size > 100_000
  raise "contained_level_answers too big: #{contained_level_answers.size} rows exceeds limit of 100000" if contained_level_answers.size > 100_000
  raise "level_sources too big: #{level_sources_multi_types.size} rows exceeds limit of 100000" if level_sources_multi_types.size > 100_000

  # Maximum rows to insert per query
  batch_size = 2000

  # Write the data to the DB tables.
  begin
    ActiveRecord::Base.connection.execute 'TRUNCATE contained_levels'
    contained_levels.each_slice(batch_size) do |batch|
      ActiveRecord::Base.connection.execute <<~SQL
        INSERT INTO contained_levels (
          created_at,
          updated_at,
          level_group_level_id,
          contained_level_id,
          contained_level_type,
          contained_level_page,
          contained_level_position,
          contained_level_text
        )
        VALUES
        #{batch.map {|row| contained_levels_row(row)}.join(",\n")}
      SQL
    end
  rescue => exception
    Honeybadger.notify(
      exception,
      error_message: "Error when writing contained_levels"
    )
  end

  begin
    ActiveRecord::Base.connection.execute 'TRUNCATE contained_level_answers'
    contained_level_answers.each_slice(batch_size) do |batch|
      ActiveRecord::Base.connection.execute <<~SQL
        INSERT INTO contained_level_answers (
          created_at,
          updated_at,
          level_id,
          answer_number,
          answer_text,
          correct
        )
        VALUES
        #{batch.map {|row| contained_level_answers_row(row)}.join(",\n")}
      SQL
    end
  rescue => exception
    Honeybadger.notify(
      exception,
      error_message: "Error when writing contained_level_answers"
    )
  end

  begin
    ActiveRecord::Base.connection.execute 'TRUNCATE level_sources_multi_types'
    level_sources_multi_types.each_slice(batch_size) do |batch|
      ActiveRecord::Base.connection.execute <<~SQL
        INSERT INTO level_sources_multi_types (
          level_source_id,
          level_id,
          data,
          md5,
          hidden
        )
        VALUES
        #{batch.map {|row| level_sources_multi_types_row(row)}.join(",\n")}
      SQL
    end
  rescue => exception
    Honeybadger.notify(
      exception,
      error_message: "Error when writing level_sources_multi_type"
    )
  end

  # Because there may soon be > 100K application status log entries, batch the
  # reads in addition to the writes so that we do not end up loading too many
  # objects into memory.
  ActiveRecord::Base.connection.execute 'TRUNCATE pd_applications_status_logs'
  Pd::Application::TeacherApplication.find_in_batches(batch_size: 1000) do |batch|
    row_hashes = batch.map do |application|
      get_pd_applications_status_log_row_hashes(application)
    end.flatten
    insert_pd_applications_status_logs_rows(row_hashes) if row_hashes.any?
  end
end

def contained_levels_row(row_hash)
  <<~ROW
    (
      "#{TIME_NOW}",
      "#{TIME_NOW}",
      #{row_hash[:level_id]},
      #{row_hash[:contained_level_id]},
      "#{row_hash[:contained_level_type]}",
      #{row_hash[:contained_level_page]},
      #{row_hash[:contained_level_position]},
      #{row_hash[:contained_level_text]}
    )
  ROW
end

def contained_level_answers_row(row_hash)
  <<~ROW
    (
      "#{TIME_NOW}",
      "#{TIME_NOW}",
      #{row_hash[:contained_level_id]},
      #{row_hash[:answer_number]},
      #{row_hash[:answer_text]},
      #{row_hash[:correct]}
    )
  ROW
end

def level_sources_multi_types_row(row_hash)
  <<~ROW
    (
      #{row_hash[:level_source_id]},
      #{row_hash[:level_id]},
      "#{row_hash[:data]}",
      "#{row_hash[:md5]}",
      #{row_hash[:hidden]}
    )
  ROW
end

# @param [Pd::Application::TeacherApplication] application
def get_pd_applications_status_log_row_hashes(application)
  row_hashes = []
  application.status_log&.each_with_index do |log_entry, i|
    row_hashes << {
      pd_application_id: application.id,
      status: log_entry['status'],
      timestamp: Time.parse(log_entry['at']).gmtime.strftime('%Y-%m-%d %H:%M:%S'),
      position: i
    }
  end
  row_hashes
end

def pd_applications_status_logs_row(row_hash)
  <<~ROW
    (
      #{row_hash[:pd_application_id]},
      "#{row_hash[:status]}",
      "#{row_hash[:timestamp]}",
      #{row_hash[:position]}
    )
  ROW
end

def insert_pd_applications_status_logs_rows(rows)
  ActiveRecord::Base.connection.execute <<~SQL
    INSERT INTO pd_applications_status_logs (
      pd_application_id,
      status,
      timestamp,
      position
    )
    VALUES
    #{rows.map {|row| pd_applications_status_logs_row(row)}.join(",\n")}
  SQL
rescue => exception
  puts exception
  Honeybadger.notify(
    exception,
    error_message: "Error when writing pd_applications_status_logs"
  )
end

main
