#!/usr/bin/env ruby

Dir.chdir(File.expand_path('../../../dashboard', __FILE__))
require_relative '../../dashboard/config/environment'
require 'aws-sdk'
require 'cdo/chat_client'

# Wait for an RDS snapshot to be in the 'available' state
# @param snapshot [DBSnapshot] the snapshot to wait for
def wait_for_snapshot_copy(snapshot)
  snapshot.wait_until(max_attempts: 120, delay: 5) do |snap|
    snap.status == 'available'
  end
rescue Aws::Waiters::Errors::WaiterFailed
  ChatClient.message(
    'server operations',
    "Timed out waiting for RDS snapshot #{snapshot.snapshot_id} to be "\
      "available, aborting snapshot backup"
  )
  exit(1)
end

# Raised when a snapshot that we expected to show up in the backup account
# is not found within the timeout period (60 seconds)
class SnapshotNotSharedError < StandardError
end

# Find a shared snapshot by name
# @param rds_backup [Aws::RDS::Resource] the RDS resource
# @param temp_snapshot_name [String] The name of the snapshot to look for. Note that
# this is a suffix lookup, and assumes that the prefix will be 'arn:aws:rds:' for a
# shared snapshot
def find_shared_snapshot_on_backup(rds_backup, temp_snapshot_name)
  shared_snapshots = []
  attempts = 0
  max_attempts = 60
  until shared_snapshots.count > 0
    sleep(1)
    attempts += 1
    if attempts > max_attempts
      raise SnapshotNotSharedError, 'Could not find shared snapshot after 60 seconds'
    end
    shared_snapshots = rds_backup.db_snapshots(
      {
        max_records: 100,
        include_shared: true,
      }
    ).select do |snap|
      snap.snapshot_id.start_with?('arn:aws:rds:') && snap.snapshot_id.end_with?(temp_snapshot_name)
    end
  end
  shared_snapshots.first
end

# Share an automated RDS snapshot with the account specified by the passed credentials.
# This method will copy the automate snapshot to a manual one, and it should be deleted
# later, outside this method.
# @param backup_account_id [String] backup account ID
# @param latest_snapshot [DBSnapshot] snapshot to copy and share
# @return Array(DBSnapshot, String) the temporary copied snapshot, and the name of the
# temporary snapshot
def share_snapshot_with_account(backup_account_id, latest_snapshot)
  # Copy the automated backup into a shareable manual one
  temp_snapshot_name = "temp-snapshot-#{Time.now.to_i}"
  copied_snapshot = latest_snapshot.copy({target_db_snapshot_identifier: temp_snapshot_name})

  wait_for_snapshot_copy(copied_snapshot)

  # Share the new snapshot with the backup account
  restore_attribute = copied_snapshot.attributes.find {|attr| attr.name == 'restore'}
  restore_attribute.modify(
    {
      values_to_add: [backup_account_id],
      values_to_remove: []
    }
  )
  return copied_snapshot, temp_snapshot_name
end

# This script pushes backup snapshots of our production database into a
# write-only backup account, with the following steps:
#
# 1) Copy the latest automated snapshot to a temporary manual one
# 2) Wait until ready, and share the manual snapshot with the backup acct
# 3) On the backup account, copy the shared snapshot to a manual one
# 4) Wait until ready, and finally go back to the main account and delete the temp snapshot
#
# Credential sets must be set up with the names 'default' and 'backup' in the aws config directory,
# which requires setting appropriate secrets in our Chef config (which will come through via crontab.erb)
def main
  ChatClient.message 'cron-daily', 'Beginning cross-account RDS backup'
  rds_primary = Aws::RDS::Resource.new
  credentials_backup = Aws::SharedCredentials.new(profile_name: 'backup')
  rds_backup = Aws::RDS::Resource.new(credentials: credentials_backup)
  backup_account_id = Aws::STS::Client.new(credentials: credentials_backup).get_caller_identity.account

  production_instance = rds_primary.db_instances.find {|i| i.id == 'production'}

  # Find the latest automated backup
  sorted_snapshots = production_instance.snapshots.
      select {|snap| snap.status == 'available' && !snap.snapshot_id.start_with?('temp-snapshot-')}.
      sort_by(&:snapshot_create_time)
  latest_snapshot = sorted_snapshots.last

  begin
    copied_snapshot, temp_snapshot_name = share_snapshot_with_account(backup_account_id, latest_snapshot)
    shared_snapshot = find_shared_snapshot_on_backup(rds_backup, temp_snapshot_name)

    # On the backup account, copy the shared snapshot
    begin
      backed_up_snapshot = shared_snapshot.copy(
        {
          target_db_snapshot_identifier: latest_snapshot.snapshot_id.sub('rds:', '')
        }
      )
      wait_for_snapshot_copy(backed_up_snapshot)
      ChatClient.message(
        'cron-daily',
        "Completed cross account RDS backup: #{latest_snapshot.snapshot_id}"
      )
    rescue Aws::RDS::Errors::DBSnapshotAlreadyExists
      ChatClient.message(
        'server operations',
        "RDS snapshot backup error: #{latest_snapshot.snapshot_id} already backed up"
      )
    end
  ensure
    if copied_snapshot
      copied_snapshot.delete
    else
      ChatClient.message 'cron-daily', 'copied_snapshot was nil'
    end
  end
end

main
