#!/usr/bin/env ruby
require File.expand_path('../../../pegasus/src/env', __FILE__)
require 'cdo/hip_chat'
require 'cdo/solr'
require src_dir 'forms'

SOLR = CDO.solr_server ? Solr::Server.new(host: CDO.solr_server) : nil

# load helpers
load pegasus_dir('helpers.rb')

def send_receipts(kind, form)
  receipts = []
  if kind.respond_to?(:receipt)
    if kind.method(:receipt).parameters.empty?
      receipts << kind.receipt
    else
      receipts << kind.receipt(JSON.parse(form[:data]))
    end
  end
  receipts = receipts.flatten.select{|i| i}
  return 0 if receipts.empty?
  return 0 if form[:email] == 'anonymous@code.org'

  recipient = Poste2.create_recipient(form[:email], name: form[:name], ip_address: form[:updated_ip])
  receipts.each do |template|
    Poste2.send_message(template, recipient, form_id: form[:id])
  end
  receipts.count
end

def send_batch_of_receipts(batch_size)
  count = 0

  DB[:forms].where(notified_at: nil).exclude(processed_at: nil).limit(batch_size).each do |form|
    kind = Object.const_get(form[:kind])

    count += send_receipts(kind, form)
    DB[:forms].where(id: form[:id]).update(notified_at: DateTime.now)
  end

  count
end

def process_batch_of_forms(batch_size)
  count = 0

  DB[:forms].where(processed_at: nil).limit(batch_size).each do |form|
    kind = Object.const_get(form[:kind])

    begin
      processed_data = {}
      if kind.respond_to?(:process_)
        processed_data = kind.process_(form)
      elsif kind.respond_to?(:process)
        processed_data = kind.process(JSON.parse(form[:data]))
      end
    rescue AbortFormError => e
      HipChat.log "Unable to process form #{form[:id]} because #{e.message}."
      DB[:forms].where(id: form[:id]).update(processed_at: 0, indexed_at: 0, notified_at: 0)
      next
    end

    DB[:forms].where(id: form[:id]).update(processed_data: processed_data.to_json, processed_at: DateTime.now)
    count += 1
  end

  count
end

def index_batch_of_forms(batch_size)
  documents = []

  DB.transaction do
    DB[:forms].where(indexed_at: nil).exclude(processed_at: nil).limit(batch_size).each do |form|
      kind = Object.const_get(form[:kind])

      begin
        index_data = JSON.parse(form[:data]).merge(JSON.parse(form[:processed_data]))
        index_data = index_data.merge(
          'id' => form[:id],
          'kind_s' => form[:kind],
          'review_s' => form[:review],
          'user_i' => form[:user_id],
          'parent_form_i' => form[:parent_id]
        )
        index_data = kind.index(index_data) if kind.respond_to?(:index)

        address_to_search = index_data['school_address_s'].to_s.strip
        address_to_search = index_data['zip_code_s'].to_s.strip if address_to_search.empty?
        sleep(0.03) unless address_to_search.empty?
        address_to_search = form[:created_ip].to_s.strip if address_to_search.empty?
        location = Geocoder.search(address_to_search).first
        if location
          index_data['create_ip_city_s'] = location.city
          index_data['create_ip_state_s'] = location.state
          index_data['create_ip_country_s'] = location.country
          index_data['create_ip_postal_code_s'] = location.postal_code
          index_data['create_ip_location_p'] = "#{location.latitude},#{location.longitude}" if location.latitude && location.longitude
        end

        documents << index_data
      rescue
        HipChat.log "Form #{form[:id]} couldn't be indexed.", color: 'red', notify: 1
        raise
      end

      DB[:forms].where(id: form[:id]).update(indexed_at: DateTime.now)
    end

    begin
      SOLR.update(documents) unless documents.empty? || !SOLR
    rescue
      documents.each do |document|
        begin
          SOLR.update([document])
        rescue => e
          HipChat.log "Unable to index form #{document['kind_s']} #{document['id']}: #{e}", color: 'red', notify: 1
          raise
        end
      end
    end
  end

  documents.count
end

def main
  limit = 1000

  process_batch_of_forms(limit)
  receipt_count = send_batch_of_receipts(limit)
  index_batch_of_forms(limit)

  system "#{deploy_dir('bin', 'deliver_poste_messages').shellescape} 2>&1" unless receipt_count == 0
end

main if only_one_running?(__FILE__)
