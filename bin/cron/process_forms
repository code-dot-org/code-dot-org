#!/usr/bin/env ruby
require_relative 'only_one'
abort 'Script already running' unless only_one_running?(__FILE__)

require File.expand_path('../../../pegasus/src/env', __FILE__)
require 'cdo/chat_client'
require 'retryable'
require src_dir 'forms'
require src_dir 'abort_form_error'

# As the NULLness of various date columns indicates further processing is
# necessary, we use this date to represent that an unrecoverable error happened.
DATE_FOR_ERRORS = '1980-01-01 00:00:00'.freeze
BATCH_SIZE = 1000

# load helpers
load pegasus_dir('helpers.rb')

def send_receipts(kind, form)
  receipts = []
  if kind.respond_to?(:receipt)
    receipts <<
      if kind.method(:receipt).parameters.empty?
        kind.receipt
      else
        kind.receipt(JSON.parse(form[:data]))
      end
  end
  receipts = receipts.flatten.select {|i| i}
  return 0 if receipts.empty?
  return 0 if form[:email] == 'anonymous@code.org'

  begin
    recipient = Poste2.create_recipient(form[:email], name: form[:name], ip_address: form[:updated_ip])
  rescue ArgumentError => e
    raise e unless e.message =~ /Invalid email address/
    ChatClient.log "Unable to send receipt for form #{form[:id]} because #{e.message}."
    return 0
  end
  receipts.each do |template|
    Poste2.send_message(template, recipient, form_id: form[:id])
  end
  receipts.count
end

def send_batch_of_receipts
  count = 0

  DB[:forms].where(notified_at: nil).exclude(processed_at: nil).limit(BATCH_SIZE).each do |form|
    kind = Object.const_get(form[:kind])

    count += send_receipts(kind, form)
    DB[:forms].where(id: form[:id]).update(notified_at: DateTime.now)
  end

  count
end

def process_batch_of_forms
  count = 0

  DB[:forms].where(processed_at: nil).limit(BATCH_SIZE).each do |form|
    kind = Object.const_get(form[:kind])

    begin
      processed_data = {}
      if kind.respond_to?(:process_)
        processed_data = kind.process_(form)
      elsif kind.respond_to?(:process_with_ip)
        processed_data = kind.process_with_ip(JSON.parse(form[:data]), form[:created_ip])
      elsif kind.respond_to?(:process)
        processed_data = kind.process(JSON.parse(form[:data]))
      end
    rescue AbortFormError => e
      ChatClient.log "Unable to process form #{form[:id]} because #{e.message}."
      DB[:forms].where(id: form[:id]).update(
        processed_at: DATE_FOR_ERRORS,
        indexed_at: DATE_FOR_ERRORS,
        notified_at: DATE_FOR_ERRORS
      )
      next
    rescue Exception => e
      ChatClient.log "Unable to process form #{form[:id]} because #{e.message}."
      raise e
    end

    DB[:forms].where(id: form[:id]).update(processed_data: processed_data.to_json, processed_at: DateTime.now)
    count += 1
  end

  count
end

def main
  process_batch_of_forms
  receipt_count = send_batch_of_receipts

  system "#{deploy_dir('bin/cron', 'deliver_poste_messages').shellescape} 2>&1" unless receipt_count == 0
end

main
