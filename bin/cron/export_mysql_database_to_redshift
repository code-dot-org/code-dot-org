#!/usr/bin/env ruby
require_relative '../../lib/cdo/only_one'
exit unless only_one_running?(__FILE__)

require_relative '../../dashboard/config/environment'
exit unless rack_env?(:production) && CDO.dashboard_hostname == 'studio.code.org'

require 'cdo/aws/dms'
require 'cdo/chat_client'
require 'cdo/redshift_import'

# Max time to wait for all tasks to complete import into staging tables.
TASK_EXECUTION_TIME = 16.hours
# Delay between each check on task status.
TASK_STATUS_DELAY = 10.minutes

def main
  ChatClient.message 'data', 'Beginning export from Aurora MySQL database to Redshift.'

  # Get list of tasks that should be executed daily.
  daily_tasks = Cdo::DMS::ReplicationTask.tasks_by_frequency('daily')

  # Spawn one thread for each replication task, so we can start and monitor them independently.
  threads = []
  Thread.abort_on_exception = true
  daily_tasks.each do |task|
    # Wait 16 hours (make 96 attempts, once every 10 minutes) for tasks to complete successfully.
    # The user_levels task takes the longest (~10 hours).
    threads << Thread.new {task.start(TASK_EXECUTION_TIME.div(TASK_STATUS_DELAY), TASK_STATUS_DELAY)}
  end
  threads.each(&:join)

  # The DMS tasks exported to staging (_import_) tables to avoid disrupting queries on the production Redshift tables
  # during the lengthy table import process.  Rename the staging tables to the production table names to complete
  # the import process
  RedshiftImport.complete_table_import(Cdo::DMS.redshift_schemas_imported_from_database)

  ChatClient.message 'data', "Completed export from Aurora MySQL database to Redshift."
rescue StandardError => error
  ChatClient.message 'data', "Error during export from Aurora MySQL database to Redshift #{error.message}", color: 'red'
  raise error
end

main
