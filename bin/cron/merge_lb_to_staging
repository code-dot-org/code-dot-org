#!/usr/bin/env ruby
require_relative 'only_one'
abort 'Script already running' unless only_one_running?(__FILE__)

# This script merges the levelbuilder branch into the staging branch.

require_relative '../../deployment'
require 'cdo/chat_client'
require 'cdo/developers_topic'
require 'cdo/github'

def slack_permission?
  return true if DevelopersTopic.dts?

  ChatClient.message(
    'staging',
    "<@#{DevelopersTopic.dotd}> robo-DTS (Levelbuilder > Staging) skipped (DTS was no)",
    color: 'yellow'
  )
  false
end

def new_commits?
  return true if GitHub.behind?(base: 'staging', compare: 'levelbuilder')

  ChatClient.message 'staging', 'robo-DTS skipped (nothing new on levelbuilder)'
  false
end

def main
  return unless slack_permission?
  return unless new_commits?

  ChatClient.message 'staging', 'incoming robo-DTS with levelbuilder content'

  # Example branch name: dts_candidate_2022-04-13
  branch_name = 'dts_candidate_' + Time.new.strftime("%Y-%m-%d")
  success = GitHub.create_branch_from_commit(
    branch_name: branch_name,
    commit: 'origin/levelbuilder',
    base_branch: 'origin/staging'
  )
  raise Exception.new('GitHub.create_and_merge_pull_request failed.') unless success

  # TODO(asher): Add a reviewer (namely the next DOTD), add appropriate tags
  # (particularly deploy).
  pr_number = GitHub.create_and_merge_pull_request(
    base: 'staging',
    head: branch_name,
    title: 'DTS (Levelbuilder > Staging) [robo-dts]'
  )
  if pr_number.nil?
    raise Exception.new('GitHub.create_and_merge_pull_request failed.')
  end

  GitHub.delete_branch(
    branch_name: branch_name,
    base_branch: 'origin/staging'
  )

  ChatClient.message(
    'staging',
    "robo-DTS created and merged <a href=\"#{GitHub.url(pr_number)}\">PR#{pr_number}</a>",
    color: 'green'
  )
rescue Exception => e
  ChatClient.message(
    'staging',
    "<!here> EXCEPTION: #{e.message}",
    color: 'red'
  )
  DevelopersTopic.set_dts 'no (robo-DTS failed (Levelbuilder > Staging))'
end

main
