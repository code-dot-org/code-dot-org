#!/usr/bin/env ruby

require 'json'
require 'open-uri'

require_relative '../../deployment'
require 'cdo/only_one'
require 'cdo/slack'

ESCALATION_POLICY_NAME = 'Live Site Issues'.freeze
PAGERDUTY_TOKEN = CDO.pagerduty_token.freeze

# @param on_call [Hash] PagerDuty information for an on_call.
# @param level [Integer] the oncall level to query.
# @return [Boolean] whether the on_call specifies the current DOTD at the
#   specified level.
def dotd?(on_call, level)
  return false unless on_call['escalation_policy']
  return false unless on_call['escalation_policy']['summary'] == ESCALATION_POLICY_NAME
  on_call['escalation_level'] == level
end

def main
  # Get the current developers room topic.
  current_topic = Slack.get_topic('developers')

### https://v2.developer.pagerduty.com/docs/migrating-to-api-v2#base-path
  # Get the primary site on-call from PagerDuty.
  on_calls = `curl --silent -H "Content-type: application/json" -H "Authorization: Token token=#{PAGERDUTY_TOKEN}" -H "Accept: application/vnd.pagerduty+json;version=2" -X GET -G "https://api.pagerduty.com/oncalls"`
  on_calls_parsed = JSON.parse(on_calls)

  dotd_user_url = on_calls_parsed['oncalls'].find {|oncall| dotd?(oncall, 1)}.try(:[], 'user').try(:[], 'self')
  primary_dotd_email = nil
  if dotd_user_url
    pagerduty_user = `curl --silent -H "Content-type: application/json" -H "Authorization: Token token=#{PAGERDUTY_TOKEN}" -H "Accept: application/vnd.pagerduty+json;version=2" -X GET -G #{dotd_user_url}`
    pagerduty_user_parsed = JSON.parse(pagerduty_user)
    primary_dotd_email = pagerduty_user_parsed['user']['email']
  end
  # Match PagerDuty email to Slack mention name.
  if primary_dotd_email
  end
  primary_dotd_user = '(ERROR: check schedule)' unless primary_dotd_user

  # Set the new developers room topic
  new_topic = current_topic.sub(/^.+?;/, "DOTD: @#{primary_dotd_user};")
  Slack.update_topic('developers', new_topic)
end

main if only_one_running?(__FILE__)
