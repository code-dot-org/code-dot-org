#!/usr/bin/env ruby
require File.expand_path('../../../pegasus/src/env', __FILE__)
require 'retryable'
require 'cdo/only_one'
require 'cdo/poste'
require 'base64'
require 'nokogiri'
require src_dir 'forms'
require src_dir 'abort_email_error'

BATCH_SIZE = 500_000
MAX_THREAD_COUNT = 50
MIN_MESSAGES_PER_THREAD = 50

# Attempt SMTP connections up to 5 times, retrying on the following error types AND message match.
CONNECTION_ATTEMPTS = 5
RETRYABLE_ERROR_TYPES = [
  Net::SMTPServerBusy,
  Net::SMTPAuthenticationError,
  EOFError
].freeze
RETRYABLE_ERROR_MESSAGES = [
  'Too many connections, try again later',
  'Temporary authentication failure',
  'end of file reached'
].map(&:freeze).freeze
RETRYABLE_ERROR_MESSAGE_MATCH = Regexp.new RETRYABLE_ERROR_MESSAGES.map {|m| "(#{m})"}.join('|')

SMTP_OPTIONS = {
  address: CDO.poste_smtp_server,
  port: 587,
  domain: 'code.org',
  user_name: CDO.poste_smtp_user,
  password: CDO.poste_smtp_password,
  authentication: 'plain',
  enable_starttls_auto: true,
}.freeze
#SMTP_OPTIONS = {
#  address:'localhost',
#  port:1025,
#  domain:'code.org',
#}

MESSAGE_TEMPLATES = {}.tap do |results|
  POSTE_DB[:poste_messages].all.each do |message|
    results[message[:id]] = message
  end
end

POSTE_BASE_URL = (rack_env?(:production) ? 'https://' : 'http://') + CDO.poste_host
def poste_url(*parts)
  File.join(POSTE_BASE_URL, *parts)
end

module Poste
  class Template
    def initialize(body, engine=TextRender::MarkdownEngine)
      if match = body.match(/^---\s*\n(?<header>.*?\n?)^(---\s*$\n?)(?<html>\s*\n.*?\n?)^(---\s*$\n?)(?<text>\s*\n.*?\n?\z)/m)
        @header = TextRender::YamlEngine.new(match[:header].strip)
        @html = engine.new(match[:html].strip)
        @text = TextRender::ErbEngine.new(match[:text].strip)
      elsif match = body.match(/^---\s*\n(?<header>.*?\n?)^(---\s*$\n?)(?<html>\s*\n.*?\n?\z)/m)
        @header = TextRender::YamlEngine.new(match[:header].strip)
        @html = engine.new(match[:html].strip)
      else
        @html = engine.new(body.strip)
      end
    end

    def render(params={})
      if params.key?('form_id')
        form = Form2.from_row(DB[:forms].where(id: params['form_id']).first)
        params.merge! form.data
        params.merge! form.processed_data
        params['form'] = form
      end
      locals = OpenStruct.new(params).instance_eval {binding}

      header = @header.result(locals) unless @header.nil?
      # TODO(andrew): Fix this so that we get a signal as to how often this is happening.
      # For more information, see https://www.pivotaltracker.com/story/show/104750788.
      tracking_id = header['litmus_tracking_id'] unless header.nil?
      html = replace_urls_with_click_trackers @html.result(locals), params if @html
      html = inject_litmus_tracking html, tracking_id, params[:encrypted_id] if html
      text = @text.result(locals) unless @text.nil?

      [header, html, text]
    end

    def inject_litmus_tracking(html, tracking_id, unique_id)
      return html unless tracking_id && unique_id
      litmus_blob = <<-eos
<style>@media print{ #_t { background-image: url('https://#{tracking_id}.emltrk.com/#{tracking_id}?p&d=#{unique_id}');}} div.OutlookMessageHeader {background-image:url('https://#{tracking_id}.emltrk.com/#{tracking_id}?f&d=#{unique_id}')} table.moz-email-headers-table {background-image:url('https://#{tracking_id}.emltrk.com/#{tracking_id}?f&d=#{unique_id}')} blockquote #_t {background-image:url('https://#{tracking_id}.emltrk.com/#{tracking_id}?f&d=#{unique_id}')} #MailContainerBody #_t {background-image:url('https://#{tracking_id}.emltrk.com/#{tracking_id}?f&d=#{unique_id}')}</style><div id="_t"></div>
<img src="https://#{tracking_id}.emltrk.com/#{tracking_id}?d=#{unique_id}" width="1" height="1" border="0" />
eos
      html.gsub("</body>", litmus_blob + "\n</body>")
    end

    def replace_urls_with_click_trackers(html, params)
      doc = Nokogiri::HTML(html)
      doc.css('a').each do |link|
        href = link['href']
        next if href == params[:unsubscribe_link]
        next unless href =~ /^http:\/\// || href =~ /^https:\/\//

        url_id = Poste2.find_or_create_url(href)
        link.attributes['href'].value = poste_url("/l/#{params[:encrypted_id]}/#{Base64.urlsafe_encode64(url_id.to_s)}")
      end
      doc.to_html
    end
  end
end

class Deliverer
  def initialize(params)
    @params = params.dup
    @smtp = reset_connection
    @templates = {}
  end

  def reset_connection
    @smtp.finish if @smtp
    @smtp = smtp_connect unless rack_env?(:development)
  end

  def send(delivery)
    recipient = POSTE_DB[:contacts].where(id: delivery[:contact_id]).first
    message = MESSAGE_TEMPLATES[delivery[:message_id]]
    encrypted_id = Poste.encrypt_id(delivery[:id])
    params = JSON.parse(delivery[:params])
    unsubscribe_url = poste_url("/u/#{CGI.escape(encrypted_id)}")

    header, html, _ = load_template(message[:name]).render(
      params.merge(
        {
          recipient: OpenStruct.new(recipient),
          encrypted_id: encrypted_id,
          unsubscribe_link: unsubscribe_url,
          tracking_pixel: poste_url("/o/#{encrypted_id}"),
        }
      )
    )

    message = StringIO.new

    # Merge contact_email from the delivery for code studio students whose emails we don't store in contacts.
    to_address = parse_address(header['to'], recipient.merge({temporary_email: delivery[:contact_email]}))
    message.puts 'To: ' + format_address(to_address)

    from_address = parse_address(header['from'], {email: 'help@code.org', name: 'Code.org'})
    message.puts 'From: ' + format_address(from_address)

    ['Reply-To', 'Sender'].each do |field|
      next unless address = parse_address(header[field.downcase])
      message.puts "#{field}: " + format_address(address)
    end

    subject = header['subject'].to_s.strip
    message.puts 'Subject: ' + subject unless subject.empty?

    message.puts "X-Unsubscribe-Web: #{unsubscribe_url}"
    message.puts "List-Unsubscribe: <#{unsubscribe_url}>"

    message.puts 'MIME-Version: 1.0'

    attachments = header['attachments'] || {}
    if params['attachments']
      attached_files = Poste2.load_attachments(params['attachments'])
      attachments.merge! attached_files
    end

    marker = "==_mimepart_#{SecureRandom.hex(17)}"
    message.puts "Content-Type: multipart/mixed; boundary=\"#{marker}\""

    message.puts ''
    message.puts "--#{marker}"

    message.puts 'Content-Type: text/html; charset=UTF-8'
    message.puts 'Content-Transfer-Encoding: 8bit'
    message.puts ''
    message.write html

    unless attachments.empty?
      attachments.each_pair do |filename, content|
        message.puts ''
        message.puts "--#{marker}"
        message.puts "Content-Type: image/jpeg; charset=UTF-8; filename=\"#{filename}\""
        message.puts 'Content-Transfer-Encoding: base64'
        message.puts "Content-Disposition: attachment; filename=\"#{filename}\""
        message.puts ''

        message.write content.scan(/.{1,61}/).join("\n")
      end
    end

    message.puts ''
    message.puts "--#{marker}--"

    if !rack_env?(:development)
      @smtp.send_message message.string, from_address[:email], to_address[:email]
    else
      puts(message.string)
    end
  end

  private

  def format_address(address)
    email = address[:email].to_s.strip
    raise ArgumentError, 'No :email' if email.empty?

    name = address[:name].to_s.strip
    return email if name.empty?

    name = "\"#{name.tr('"', '\"').tr("'", "\'")}\"" if name =~ /[;,\"\'\(\)]/
    "#{name} <#{email}>".strip
  end

  def load_template(name)
    template = @templates[name]
    return template if template

    path = Poste.resolve_template(name)
    raise ArgumentError, "[Poste] '#{name}' template wasn't found." unless path

    engine = {
      '.haml' => TextRender::HamlEngine,
      '.html' => TextRender::ErbEngine,
      '.md' => TextRender::MarkdownEngine,
      '.txt' => TextRender::MarkdownEngine,
      '.yml' => TextRender::YamlEngine,
    }[File.extname(path).downcase]

    @templates[name] = Poste::Template.new IO.read(path), engine
  end

  def parse_addresses(string)
    string.split(', ').map do |user_string|
      if user_string.include? '<'
        user_string =~ /^([^<]*)<([^>]*)>$/
        {name: $1.strip, email: $2}
      else
        {name: nil, email: user_string}
      end
    end
  end

  def parse_address(address, defaults={})
    address = address.to_s.strip
    return parse_addresses(address).first unless address.empty?

    # Student accounts don't have a stored email in contacts,
    # so we use the temporary email here when email doesn't exist.
    email = defaults[:email].to_s.strip
    email = defaults[:temporary_email] if email.blank?
    return nil if email.blank?

    {email: email}.tap do |name_and_email|
      name = defaults[:name].to_s.strip
      name_and_email[:name] = name unless name.empty?
    end
  end

  def smtp_connect
    Retryable.retryable(
      tries: CONNECTION_ATTEMPTS,
      on: RETRYABLE_ERROR_TYPES,
      matching: RETRYABLE_ERROR_MESSAGE_MATCH
    ) do
      Net::SMTP.new(@params[:address], @params[:port]).tap do |smtp|
        smtp.enable_starttls if @params[:enable_starttls_auto]
        smtp.start(@params[:domain], @params[:user_name], @params[:password], @params[:authentication])
      end
    end
  end
end

def create_threads(count)
  [].tap do |threads|
    count.times do
      threads << Thread.new do
        yield
      end
    end
  end
end

def main
  started_at = Time.now

  queue = Queue.new.tap do |results|
    POSTE_DB[:poste_deliveries].where(sent_at: nil).limit(BATCH_SIZE).reverse_order(:id).each {|i| results << i}
  end

  queue_count = queue.length

  worker_count = [[queue_count / MIN_MESSAGES_PER_THREAD, MAX_THREAD_COUNT].min, 1].max

  workers = create_threads(worker_count) do
    deliverer = Deliverer.new SMTP_OPTIONS

    until queue.empty?
      next unless delivery = queue.pop(true) rescue nil

      sent_at = DateTime.now

      begin
        deliverer.send delivery
      rescue Net::SMTPSyntaxError, Net::SMTPFatalError => e
        puts "Unable to deliver #{delivery[:id]} to '#{delivery[:contact_email]}' because '#{e.message.to_s.strip}'"
        deliverer.reset_connection
        sent_at = 0
      rescue AbortEmailError => e
        puts "Abandoning delivery of #{delivery[:id]} because '#{e.message.to_s.strip}'"
        sent_at = 0
      rescue => e
        puts "Unable to deliver #{delivery[:id]} to '#{delivery[:contact_email]}' because '#{e.message.to_s.strip}'"
        raise
      end

      if Poste.dashboard_student?(delivery[:hashed_email])
        # We clear the email here for privacy. Note that (given architecture)
        # it has to be persisted for a short while to actually send the email.
        POSTE_DB[:poste_deliveries].where(id: delivery[:id]).
          update(sent_at: sent_at, contact_email: '')
      else
        POSTE_DB[:poste_deliveries].where(id: delivery[:id]).
          update(sent_at: sent_at)
      end
    end
  end
  workers.each(&:join)

  remaining_count = POSTE_DB[:poste_deliveries].where(sent_at: nil).count

  elapsed_seconds = ((Time.now - started_at) * 100.0).to_i / 100.0

  unless queue_count == 0 && remaining_count == 0
    message = "#{queue_count} email(s) sent in #{elapsed_seconds} seconds using #{worker_count} threads, #{remaining_count} still queued."
    if rack_env?(:development)
      puts message
    end
  end
end

main if only_one_running?(__FILE__)
