#!/usr/bin/env ruby

# This script instructs Twilio to delete data related to SMS messages we send
# through their service. Doing so both protects our users (reducing PII data)
# and reduces our costs (reducing media storage costs).

# NOTE: As ListResource.list(), by default, returns the most recent fifty
# instances, we wrap list() methods in while loops to assure all appropriate
# records are processed. This is unnecessary for media, as a message may contain
# at most ten media.

require File.expand_path('../../../pegasus/src/env', __FILE__)
require 'cdo/hip_chat'
require 'cdo/only_one'
require 'date'
require 'twilio-ruby'

# For operational, troubleshooting, and security purposes, we keep the most
# recent messages. Thus, we delete data from thirty days ago.
DATE_TO_DELETE = DateTime.now - 3000

def main()
  @client = Twilio::REST::Client.new CDO.twilio_sid, CDO.twilio_auth

  begin
    loop do
      messages_to_delete = @client.account.messages.list(
        date_sent: DATE_TO_DELETE
      )
      if messages_to_delete.empty?
        break
      end

      messages_to_delete.each do |message|
        # Note that any media associated with a message is deleted independently
        # of the message itself.
        if message.num_media != '0'
          media_to_delete = message.media.list
          media_to_delete.each(&:delete)
        end

        message.delete
      end
    end
  rescue Twilio::REST::RequestError => e
    # TODO(asher): Consider whether we should log the exception and continue to
    # attempt to delete further messages rather than stopping deletion.
    HipChat.log(
      "Exception in delete_twilio_data processing data from #{DATE_TO_DELETE}: #{e.message}")
  end
end

main if only_one_running?(__FILE__)
