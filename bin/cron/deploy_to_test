#!/usr/bin/env ruby

require 'cdo/chat_client'
require 'cdo/github'
require 'cdo/only_one'

TOPIC_DTT_YES = 'DTT: yes'.freeze
TOPIC_DTT_IN_PROGRESS = 'DTT: no (robo-DTT in progress)'.freeze
TOPIC_DTT_FAILED = 'DTT: robo-DTT failed'.freeze

# @return [Boolean] Whether  the topic of Slack#developers includes "DTT: yes".
def dtt_yes?
  current_topic = Slack.get_topic('developers')
  current_topic.include? TOPIC_DTT_YES
end

# Updates the DTT portion of topic of Slack#developers to indicate robo-DTT.
def update_developers_topic_robo_dtt
  current_topic = Slack.get_topic('developers')
  raise unless current_topic.include? TOPIC_DTT_YES
  new_topic = current_topic.gsub(TOPIC_DTT_YES, TOPIC_DTT_IN_PROGRESS)
  Slack.update_topic(new_topic)
end

# Updates the DTT portion of topic of Slack#developers to indicate DTT yes.
def update_developers_topic_robo_failed
  current_topic = Slack.get_topic('developers')
  raise unless current_topic.include? TOPIC_DTT_IN_PROGRESS
  new_topic = current_topic.gsub(TOPIC_DTT_IN_PROGRESS, TOPIC_DTT_FAILED)
  Slack.update_topic(new_topic)
end

def main
  unless dtt_yes?
    ChatClient.message(
      'infra-test',
      "robo-DTT skipped (\#developers topic is #{current_topic}).",
      color: 'yellow'
    )
    return
  end
  update_developers_topic_robo_dtt

  # TODO(asher): Add a reviewer (namely the next DOTD), add appropriate tags
  # (particularly deploy).
  pr_number = GitHub.create_and_merge_pull_request(
    base: 'test',
    head: 'staging',
    title: 'DTT (Staging > Test) [robo-dtt]'
  )
  if pr_number.nil?
    raise Exception.new('GitHub.create_and_merge_pull_request failed.')
  end

  ChatClient.mesage(
    'infra-test',
    "robo-DTT created and merged <a href=\"#{GitHub.html_url(pr_number)}\">PR\##{pr_number}</a>",
    color: 'green'
  )
rescue Exception => e
  ChatClient.message(
    'infra-test',
    "EXCEPTION: #{e.message}",
    color: 'red'
  )
  update_developers_topic_robo_failed
end

main if only_one_running?(__FILE__)
