#!/usr/bin/env ruby

# A script that performs a merge of the test branch into the levelbuilder branch.
#
# NOTE: This script assumes it is only run from the test environment.

require_relative '../../deployment'
require 'cdo/chat_client'
require 'cdo/developers_topic'
require 'cdo/infra_test_topic'
require 'cdo/github'
require 'cdo/only_one'

TOPIC_DTL_SOON = 'yes (deploying soon)'.freeze
TOPIC_DTL_IN_PROGRESS = 'no (in progress)'.freeze
TOPIC_DTL_FAILED = 'no (DTL failed [see levelbuilder])'.freeze
MESSAGE_DTL_SKIPPED_NOTHING = 'robo-DTL is being skipped (nothing new to deploy).'.freeze
MESSAGE_DTL_SKIPPED_TOPIC = 'robo-DTL is being skipped (developers DTL was not yes). ' \
  'Please contact the DOTD for a manual deploy, if desired.'.freeze

# Creates a new branch with the given name from the given commit on the test server
# (without checking it out) and pushes it to GitHub.
# @param [String] branch_name The name of the branch to create.
# @param [String] commit The sha of the commit to base the branch at.
# TODO(asher): Move this to a location for better reuse, deduplicating existing copies of it.
def create_branch_from_commit(branch_name, commit)
  system [
    'cd ~/test',
    "git branch --no-track #{branch_name} #{commit}",
    "git push origin #{branch_name}"
  ].join(' && ')
end

# Deletes a branch with the given name, both locally and on GitHub.
# @param [String] branch_name The name of the branch to delete.
def delete_branch(branch_name)
  system [
    'cd ~/test',
    'git branch -D branch_name',
    'git push origin --delete branch_name'
  ].join(' && ')
end

# Returns whether the Slack#developers topic specifies "DTL: yes". If it does not, messages
# Slack#levelbuilder that robo-DTL is being skipped.
# @return [Boolean] Whether the Slack#developers topic specifies "DTL: yes".
def slack_permission?
  return true if DevelopersTopic.dtl?

  ChatClient.message('levelbuilder', MESSAGE_DTL_SKIPPED_TOPIC, color: 'yellow')

  false
end

# Returns whether there are commits in commit not on the levelbuilder branch. If there are not,
# messages Slack#levelbuilder that robo-DTL is being skipped.
# @param [String] commit The GitHub sha hash to compare the levelbuilder branch against.
# @return [Boolean] Whether there are commits in commit not on the levelbuilder branch.
def new_commits?(commit)
  return true if GitHub.behind?(base: commit, compare: 'levelbuilder')

  ChatClient.message 'levelbuilder', MESSAGE_DTL_SKIPPED_NOTHING

  false
end

def message_dtl_soon(pr_number)
  "<!here> Robo-DTL will deploy <a href=\"#{GitHub.url(pr_number)}\">PR #{pr_number}</a> in five " \
  'minutes. Please ping #developers or set "DTL: no" in #deploy-status if you wish to prevent this.'
end

# The business logic of the cronjob. If appropriate (based on Slack#developers topic), performs a
# merge of the test branch into the levelbuilder branch.
def main
  test_green_commit = InfraTestTopic.green_commit

  return unless slack_permission?
  return unless new_commits?(test_green_commit)

  # As GitHub's API (all of ours, Octokit's and github.com's) does not allow creating a pull request
  # from a commit hash (only a branch name), we create and push a branch.
  branch_name = "dtl_candidate_#{test_green_commit}"
  create_branch_from_commit branch_name, test_green_commit

  # Create the PR, raising an exception if doing so failed.
  pr_number = GitHub.create_pull_request(
    base: 'levelbuilder',
    head: branch_name,
    title: "DTL (Test > Levelbuilder): #{test_green_commit}"
  )
  if pr_number.nil?
    raise Exception.new('GitHub.create_pull_request failed.')
  end

  DevelopersTopic.set_dtl(TOPIC_DTL_SOON)
  ChatClient.message('levelbuilder', message_dtl_soon(pr_number), color: 'yellow')

  # After waiting five minutes, confirm that we still have permission from the Slack#developers
  # topic to proceed with the deploy.
  sleep(5 * 60)
  return unless slack_permission?

  DevelopersTopic.set_dtl(TOPIC_DTL_IN_PROGRESS)
  GitHub.merge_pull_request(pr_number)

  delete_branch(branch_name)
rescue Exception => e
  ChatClient.message(
    'levelbuilder',
    "EXCEPTION: #{e.message}",
    color: 'red'
  )
  DevelopersTopic.set_dtl TOPIC_DTL_FAILED
end

main if only_one_running?(__FILE__)
