#!/usr/bin/env ruby

require File.expand_path('../../../pegasus/src/env', __FILE__)
require 'net/http'
require 'net/http/responses'
require_relative('../../dashboard/config/environment')
require 'cdo/properties'

PARDOT_AUTHENTICATION_URL = "https://pi.pardot.com/api/login/version/3"
PARDOT_BATCH_CREATE_URL = "https://pi.pardot.com/api/prospect/version/4/do/batchCreate"

VALID_EMAIL_REGEX = /\A[\w+\-.]+@[a-z\d\-]+(\.[a-z\d\-]+)*\.[a-z]+\z/i

AUTH_BODY = "email=#{CDO.pardot_username}&password=#{CDO.pardot_password}&user_key=#{CDO.pardot_user_key}"

MYSQL_TO_PARDOT_MAP = {
    email: { field: 'email', multi: false},
    name: { field: 'first_name', multi: false},
    street_address: { field: 'address_one', multi: false},
    city: { field: 'city', multi: false},
    state: { field: 'state', multi: false},
    postal_code: { field: 'zip', multi: false},
    country: { field: 'country', multi: false},
    district_name: { field: 'District', multi: false},
    district_city: { field: 'District_City', multi: false},
    district_state: { field: 'District_State', multi: false},
    school_name: { field: 'School', multi: false},
    roles: { field: 'Roles', multi: true},
    facilitator_type: { field: 'Facilitator_Type', multi: true},
    professional_learning_enrolled: { field: 'Professional_Learning_Enrolled', multi: true},
    professional_learning_attended: { field: 'Professional_Learning_Attended', multi: true},
    hoc_organizer: { field: 'Hour_Of_Code_Organizer', multi: true},
    grades_taught: { field: 'Grades_Taught', multi: true},
    ages_taught: { field: 'Ages_Taught', multi: true}
}

def request_pardot_api_key
  uri = URI.parse(PARDOT_AUTHENTICATION_URL)

  response = Net::HTTP.post_form(uri,
                      {email: CDO.pardot_user,
                      password: CDO.pardot_password,
                      user_key: CDO.pardot_user_key})

  raise "Pardot authentication request failed with HTTP " + response.code if response.code != "200"

  xml = Nokogiri::XML(response.body, &:noblanks)

  raise "Pardot authentication request did not return parsable XML" if xml.nil?

  status = xml.xpath('/rsp/@stat').text
  raise "Pardot authentication response did not include status" if status.nil?
  raise "Pardot authentication response failed with status " + status + " " + xml.to_s if status != "ok"

  api_key = xml.xpath('/rsp/api_key').text
  raise "Pardot authentication response did not include api_key" if api_key.nil?

  api_key
end

def upsert_prospect_batch(prospects)
  prospects_json = prospects.to_json
  puts prospects_json
end

def submit_create_batch(api_key, prospects)
  return if prospects.empty

  prospects_payload = { prospects: prospects }
  prospects_payload_json = prospects_payload.to_json

  prospects_payload_json_encoded = URI.encode(prospects_payload_json)

  puts prospects_payload_json_encoded

  uri = URI.parse("#{PARDOT_BATCH_CREATE_URL}?prospects=#{prospects_payload_json_ascii}&api_key=#{api_key}&user_key=#{PARDOT_USER_KEY}")

  response = Net::HTTP.post_form(uri, {})

  puts response

  xml = Nokogiri::XML(response.body, &:noblanks)

  raise "Pardot authentication request did not return parsable XML" if xml.nil?

  status = xml.xpath('/rsp/@stat').text
  raise "Pardot create user response did not include status" if status.nil?
  raise "Pardot create user response failed with status " + status + " " + xml.to_s if status != "ok"
end

def test
  prospects = []
  prospect = {email: "test+test@testtest.com"}
  prospects << prospect

  submit_create_batch api_key, prospects
end

def main
  return unless only_one_running?(__FILE__)

  api_key = request_pardot_api_key
  prospects = []

  PEGASUS_DB[:contacts_rollup].where("id >= 200010").limit(1).each do |contacts_rollup|
    puts contacts_rollup[:email]

    next if contacts_rollup[:email].include? ".@"
    next if contacts_rollup[:email].include? "+"

    prospect = {}
    MYSQL_TO_PARDOT_MAP.each do |mysql_key, pardot_info|
      db_value = contacts_rollup[mysql_key]
      if db_value.presence
        if pardot_info[:multi]
          values = db_value.split(",")
          i = 0
          values.each do |value|
            prospect["#{pardot_info[:field]}_#{i}"] = value
            i += 1
          end
        else
          prospect[pardot_info[:field]] = db_value
        end
      end
    end
    prospects << prospect

    if prospects.size == 10
      submit_create_batch api_key, prospects
      prospects = []
    end
  end

  submit_create_batch api_key, prospects
  puts "Size: #{prospects.size}"
end

main
