#!/usr/bin/env ruby
require_relative 'only_one'
abort 'Script already running' unless only_one_running?(__FILE__)

#
# Zendesk -> Slack ticket count integration
#
# This script is used to notify various rooms in Slack about how many Zendesk
# tickets are open in their associated groups.
#
# It uses the Search feature of the Zendesk Support API, documented here:
# https://developer.zendesk.com/rest_api/docs/support/search
#
# This the following settings to be configured in locals.yml or globals.yml:
# - hip_chat_logging: true
# - slack_endpoint: <the unique part of your webhook URL>
# - slack_token: <your bot user token>
# - zendesk_dev_token: <your API token>
#

require 'httparty'
require 'uri'
require_relative '../../deployment'
require 'cdo/chat_client'

# CONFIGURATION

# Statuses to report on
STATUSES_TO_REPORT = %w(new open)

# Slack room -> Zendesk group mappings to report on
MONITORING_GROUPS = {
  # 'slack-room-name' => ['Zendesk group name', 'Zendesk group name', ...]
  'csf-curriculum' => ['CSF'],
  'cspalooza' => ['CSP'],
  'developers' => ['Developers'],
  'disco-party' => ['CSD'],
  'foundations' => ['Accounts'],
  'international' => ['International'],
  'learning-platform' => ['Learning Platform'],
  'marketing' => ['Media'],
  'pdot' => ['PDOT Amy', 'PDOT Laura', 'PDOT MeganH', 'PDOT Rosie', 'PDOT Tawny'],
  'plc-engineering' => ['PLC Tools'],
  'product' => ['Product'],
  'regional_managers' => ['Outreach'],
  'star-labs-cabal' => ['*Labs']
}

# Zendesk group -> Zendesk filter id mappings for helpful links (optional)
GROUP_FILTERS = {
  'Account' => '360086130792',
  'CSD' => '83142177',
  'CSF' => '278602768',
  'CSP' => '45749787',
  'Developers' => '47222126',
  'International' => '360086130812',
  'Learning Platform' => '360082967212',
  'Media' => '47756566',
  'PLC Tools' => '114103940251',
  'Product' => '360007773991',
  '*Labs' => '301129028',
}

class Zendesk
  include HTTParty
  base_uri 'https://codeorg.zendesk.com'

  def groups
    @groups ||= self.class.
      get(
        "/api/v2/groups.json",
        {basic_auth: {username: 'dev@code.org/token', password: CDO.zendesk_dev_token}}
      ).
      parsed_response["groups"].
      map {|g| [g["id"], g["name"]]}.
      to_h
  end

  def search(groups:, statuses:)
    query = Zendesk.build_query(groups: groups, statuses: statuses)
    page = 1
    results = []
    loop do
      response = self.class.get(
        "/api/v2/search.json",
        {
          basic_auth: {username: 'dev@code.org/token', password: CDO.zendesk_dev_token},
          query: {page: page, query: query}
        }
      ).parsed_response
      results += response["results"]
      if response["next_page"]
        page += 1
      else
        break
      end
    end
    results
  end

  def self.build_query(groups: [], statuses: [])
    [
      statuses.map {|s| "status:#{s}"},
      groups.map {|g| "group:\"#{g}\""}
    ].flatten.join(' ')
  end

  def self.group_url(group:, statuses:)
    filter_id = GROUP_FILTERS[group]
    if filter_id
      return "#{base_uri}/agent/filters/#{filter_id}"
    end

    query = build_query(groups: [group], statuses: statuses)
    # Zendesk not friendly to '+' for spaces?
    querystring = URI.encode_www_form(q: query).gsub('+', '%20')
    "#{base_uri}/agent/search/1?#{querystring}"
  end
end

#
# MAIN
#
#

# Get tickets from Zendesk API
zendesk = Zendesk.new
results = zendesk.search(
  statuses: STATUSES_TO_REPORT,
  groups: MONITORING_GROUPS.values.flatten
)

# Ticket count by group name
counts = results.
  group_by {|x| x["group_id"]}.
  map {|group_id, tickets| [zendesk.groups[group_id], tickets.count]}.
  to_h

# Report out for each Slack room
MONITORING_GROUPS.each do |slack_room, groups|
  group_messages = groups.map do |group_name|
    count = counts[group_name] || 0
    next nil if count == 0

    url = Zendesk.group_url(group: group_name, statuses: STATUSES_TO_REPORT)
    statuses = STATUSES_TO_REPORT.join('/')
    "<#{url}|#{group_name} has #{count} #{statuses} Zendesk tickets.>"
  end.compact

  # Don't post if there's nothing to report
  next if group_messages.empty?

  message = [
    "*The Daily Zendesk* <https://github.com/code-dot-org/code-dot-org/blob/production/bin/cron/zendesk_slack_report|(source)>",
    group_messages
  ].flatten.join("\n")

  ChatClient.message(slack_room, message)
end
