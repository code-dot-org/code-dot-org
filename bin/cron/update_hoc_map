#!/usr/bin/env ruby

# The map on hourofcode.com is run off of a Google Fusion Table
# (documentation: https://developers.google.com/maps/documentation/javascript/fusiontableslayer).
# This script updates the fusion table using the REST API
# (documentation: https://developers.google.com/fusiontables/docs/v2/using),
# populating it with all rows from the pegasus forms table whose kind is the
# most recent HocSignup (e.g., HocSignup2017 in Fall 2017).

# After setting up authentication, provide the following CDO.* attributes (example values below):
#   CDO.hoc_map_account: JSON of a credential which can edit the FusionTables table
#   CDO.hoc_map_table_id: ABCDEF123456 (the id of the fusion table)

require File.expand_path('../../../pegasus/src/env', __FILE__)
require src_dir 'database'
require 'cdo/properties'
require 'dynamic_config/dcdo'

require 'google/apis/fusiontables_v2'
require 'googleauth'

DB_READONLY = Sequel.connect(CDO.pegasus_db_reader.sub('mysql:', 'mysql2:'))

TABLE_ID = CDO.hoc_map_table_id.freeze
CURRENT_HOC_SIGNUP = "HocSignup#{DCDO.get('hoc_year', 2017)}".freeze

file = Tempfile.new(['data', '.csv'])
begin
  CSV.open(file.path, 'w') do |csv|
    DB_READONLY[:forms].where(kind: CURRENT_HOC_SIGNUP).paged_each(rows_per_fetch: 10_000) do |form|
      data = JSON.parse(form[:data])
      processed_data = JSON.parse(form[:processed_data]) rescue {}

      # In order to be placed on the map, all events require an organization name,
      # processed location, and city. With the exception that approved special events
      # don't need a city so we can show events like the Cocos Keeling Islands.
      next if data['organization_name_s'].nil? || processed_data['location_p'].nil?
      next if form[:review] != "approved" && processed_data['location_city_s'].nil?

      organization_name =
        if !processed_data['nces_school_name_s'].to_s.strip.empty?
          processed_data['nces_school_name_s']
        elsif !data['school_name_s'].to_s.strip.empty?
          data['school_name_s']
        else
          data['organization_name_s']
        end
      row = [form[:id], organization_name, processed_data['location_city_s'], processed_data['location_p'], form[:review], data['special_event_details_s']]
      csv << row
    end
  end
ensure
  file.close
end

tables = Google::Apis::FusiontablesV2::FusiontablesService.new

tables.authorization = Google::Auth::ServiceAccountCredentials.make_creds(
  scope: 'https://www.googleapis.com/auth/fusiontables',
  json_key_io: StringIO.new(CDO.hoc_map_account.to_json)
)

tables.replace_table_rows(TABLE_ID, content_type: 'application/octet-stream', upload_source: file.path)
