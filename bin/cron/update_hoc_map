#!/usr/bin/env ruby
require_relative 'only_one'
abort 'Script already running' unless only_one_running?(__FILE__)

# The map on hourofcode.com is run off of Mapbox.
# This script updates the data on Mapbox by querying all rows from
# the pegasus forms table whose kind is the
# most recent HocSignup (e.g., HocSignup2017 in Fall 2017),
# creating maptiles with Mapbox's command line tool, Tippecanoe,
# and uploading them to Mapbox's server.

# After setting up authentication, provide the following CDO.* attributes:
#   CDO.mapbox_upload_token: (the auth token for uploading tiles to Mapbox's servers)

require File.expand_path('../../../pegasus/src/env', __FILE__)
require src_dir 'database'
require_relative '../../pegasus/helpers/properties'
require 'dynamic_config/dcdo'
require 'open3'
require 'tempfile'

require_relative 'upload_to_mapbox'

DB_READONLY = Sequel.connect(CDO.pegasus_db_reader.sub('mysql:', 'mysql2:'))

CURRENT_HOC_SIGNUP = "HocSignup#{DCDO.get('hoc_year', 2017)}".freeze
def main
  geojson = JSON.parse('{ "type": "FeatureCollection", "features": [] }')

  DB_READONLY[:forms].where(kind: CURRENT_HOC_SIGNUP).paged_each(rows_per_fetch: 10_000) do |form|
    data = JSON.parse(form[:data])
    processed_data = JSON.parse(form[:processed_data]) rescue {}
    puts 'Start'
    puts data
    puts processed_data
    # ***
    # If these rules are changed and we wish to display a broader set of events,
    # update our JS code (hoc_events_map.js) that visualizes these events
    # to handle missing data.
    # ***
    # In order to be placed on the map, all events require an organization name and
    # a processed location.
    next if data['organization_name_s'].nil? || processed_data['location_p'].nil?

    puts 'Not skipped'

    organization_name =
      if !processed_data['nces_school_name_s'].to_s.strip.empty?
        processed_data['nces_school_name_s']
      elsif !data['school_name_s'].to_s.strip.empty?
        data['school_name_s']
      else
        data['organization_name_s']
      end

    coordinates = processed_data['location_p'].split(',')
    long = coordinates[1].to_f
    lat = coordinates[0].to_f
    geojson["features"] <<
      {
        geometry: {
          coordinates: [long, lat],
          type: "Point"
        },
        properties: {
          organization_name: organization_name,
          description: data['special_event_details_s'],
          city: processed_data['location_city_s'],
          review: form[:review]
        },
        type: "Feature"
      }
  end
  puts geojson["features"]
  puts 'Done with map info'
  file = Tempfile.new(['hocevents', 'geojson'])
  tiles = Tempfile.new([CDO.mapbox_upload_tileset, 'mbtiles'])
  puts CDO.mapbox_upload_tileset
  file.write(JSON.pretty_generate(geojson))
  _stdout, stderr, tippecanoe_status = Open3.capture3(
    # Tippecanoe will generate a map that has a min zoom of 1 (approx the whole world),
    # clusters points that are approximately 2 pixels apart, and drops points to make them fit if they can't.
    # The layer is called "hoc". DO NOT change the layer name without changing the map
    # in the Mapbox UI.
    "tippecanoe -Z 1 -rg --cluster-distance=2 -o #{tiles.path} -l \"hoc\" --force #{file.path}"
  )
  upload_successful = false
  puts stderr
  puts tippecanoe_status
  if tippecanoe_status.success?
    upload_successful = upload_maptiles(tiles.path, CDO.mapbox_upload_tileset)
    puts 'Was it successful?'
    puts upload_successful
  end
  unless tippecanoe_status.success? && upload_successful
    puts 'Failure'
    Honeybadger.notify(
      error_message: "Updating HOC map on Mapbox failed",
      error_class: "HOC Map Update Failure",
      context: {
        tippecanoe_status: stderr,
        upload_status: upload_successful
      }
    )
  end
end

main
