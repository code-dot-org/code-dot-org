#!/usr/bin/env ruby
#
# This script analyzes the number of standalone projects we have in our database and
# saves that value.
#
# The script includes an alert which will trigger an error if the project
# count decreases by more than 10 thousand projects.

require 'sequel'
require File.expand_path('../../../pegasus/src/env', __FILE__)
require 'cdo/only_one'
require 'cdo/properties'
require src_dir 'database'
require_relative '../../deployment.rb'
require 'cdo/honeybadger'

# Production database has a global max query execution timeout setting.  This 20 minute setting can be used
# to override the timeout for a specific session or query.
MAX_EXECUTION_TIME = 1_200_000
MAX_EXECUTION_TIME_SEC = MAX_EXECUTION_TIME / 1000

# Connection to read from Pegasus reporting database.
PEGASUS_DB_READER = sequel_connect(
  CDO.pegasus_db_reader,
  CDO.pegasus_db_reader,
  query_timeout: MAX_EXECUTION_TIME_SEC
)

# This default number of lines of code is from 2019-1-21.
DEFAULT_NUMBER_OF_PROJECTS = 35_000_000

NUMBER_PROJECTS_SIGNIFICANT_DECREASE = 10_000

def main
  # Get the current amount of projects.
  project_count = PEGASUS_DB_READER[:storage_apps].where(standalone: true).count

  existing_project_count = Properties.get(:metrics)['project_count'] || 0
  if (existing_project_count - project_count) >= NUMBER_PROJECTS_SIGNIFICANT_DECREASE
    # Raise error if the project count somehow went down by more than set threshold.
    error_message = "storage_apps standalone project count decreased from #{existing_project_count} to #{project_count}"
    raise error_message
  end

  # Pull current petition_signatures and lines_of_code to keep those current values.
  time = DateTime.now
  Properties.set :metrics, {
    created_at:               time,
    created_on:               time.to_date,
    petition_signatures:      Properties.get(:metrics)['petition_signatures'],
    lines_of_code:            Properties.get(:metrics)['lines_of_code'],
    project_count:            project_count,
  }
end

main
