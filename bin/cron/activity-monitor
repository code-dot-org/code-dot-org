#!/usr/bin/env ruby
#
# This script monitors level completion rates and issues HipChat complaints if a significant
# number of browsers has attempted a level without anybody finishing it successfully.
#
# Currently data is sent to LogEntries for collection and collation via TCP-based log. This
# script collects a 1 hour period worth of data, analyzes it, and reports.
#
# FUTURE THOUGHTS: This is the only reason we use LogEntries. We could probably just use a
#   an RDS database, MongoDB, or even just a regular log file and eliminate the cost of
#   LogEntries.
#
# including dashboard environment doesn't work if not in the dashboard dir
Dir.chdir(File.expand_path('../../../dashboard', __FILE__))
require_relative '../../dashboard/config/environment'
require 'cdo/only_one'
require 'cdo/hip_chat'
require 'cdo/user_agent_parser'

SECONDS_PER_MSEC = 1000
ONE_HOUR_MSEC = 60 * 60 * SECONDS_PER_MSEC

EXCLUDED_BROWSERS = [
  'bingbot',
  'Camino',
  'Chrome Frame',
  'Epiphany',
  'Googlebot',
  'IE 6.0',
  'IE 7.0',
  'IE 8.0',
  'IE 9.0',
  'IE 10.0',
  'IE Mobile',
  'Other',
  'Slurp',
  'TwitterBot',
  'Yandex Browser',
  'YandexBot',
  'Mo%20PTT/50 CFNetwork/672.1.15 Darwin/14.0.0',
  'AppleMail',
  /Edmodo/, # edmodo customer support said we can ignore this
].freeze

EXCLUDED_LEVELS = [1, 337, 612, 830, 1370, 1376, 1383, 1393, 1415, 3468, 4186, 4188, 4283].freeze

HARD_LEVEL_ATTEMPTS_PER_HOUR = {
  50 => 10,
  54 => 20,
  57 => 10,
  71 => 20,
  72 => 20,
  949 => 10,
  1008 => 10,
  1108 => 10,
  1110 => 10,
  1430 => 10,
  1434 => 10,
  1441 => 10,
  3301 => 20
}.freeze

MINIMUM_ATTEMPTS_PER_HOUR = 10

HOURS_TO_TEST = 2

$user_agent_cache = {}
def browser_name(user_agent)
  name = $user_agent_cache[user_agent]
  return name if name
  agent = UserAgentParser.parse(user_agent)
  name = agent.name
  name = agent.to_s if name == 'IE'
  name = user_agent if name == 'CFNetwork'
  $user_agent_cache[user_agent] = name
end

class Collater
  def initialize
    @results = {browsers: {}, locales: {}}
  end

  def each_by_browser
    browsers = @results[:browsers]
    browsers.keys.sort.each do |browser|
      browsers[browser].keys.sort.each do |level|
        i = browsers[browser][level]
        yield i.merge(browser: browser, level: level)
      end
    end
  end

  def insert(level, tag, browser, locale)
    @results[:browsers][browser] = {} unless @results[:browsers].key?(browser)
    @results[:browsers][browser][level] = {starts: 0, finishes: 0} unless @results[:browsers][browser].key?(level)
    @results[:browsers][browser][level][:starts] += 1 if tag == :activity_start
    @results[:browsers][browser][level][:finishes] += 1 if tag == :activity_finish

    @results[:locales][locale] = {} unless @results[:locales].key?(locale)
    @results[:locales][locale][level] = {starts: 0, finishes: 0} unless @results[:locales][locale].key?(level)
    @results[:locales][locale][level][:starts] += 1 if tag == :activity_start
    @results[:locales][locale][level][:finishes] += 1 if tag == :activity_finish
  end
end

class Monitor
  def initialize(params)
    @start = params[:start]
    @finish = params[:finish]
    @hosts = ['_virtual']
    @filename = "/tmp/dataset-#{@start}-#{@finish}.json"
  end

  def self.collate(params)
    collater = Collater.new
    self.new(params).each_row do |level, tag, browser, locale|
      collater.insert level, tag, browser, locale
    end
    collater
  end

  def each_row
    dataset.each do |i|
      yield i['level_id'].to_i,
            i['tag'].to_sym,
            browser_name(i['user_agent']),
            i['locale']
    end
  end

  def dataset
    @dataset ||= reload(@filename) || cache(@filename, fetch)
  end

  def reload(filename)
    return nil unless File.file?(filename)
    puts "Loading..." if rack_env?(:development)
    JSON.parse(IO.read(filename))
  end

  def cache(filename, dataset)
    if rack_env?(:development)
      puts "Caching..."
      File.open(filename, 'wb') {|f| f << dataset.to_json}
    end
    dataset
  end

  def fetch
    puts "Fetching..." if rack_env?(:development)
    reader = Slog::Reader.new(secret: CDO.logentries_secret, hosts: @hosts)
    reader.get(filter: 'tag=activity_start OR tag=activity_finish', start: @start, end: @finish)
  end
end

BROWSER_TO_BROWSER_STACK = {
  'IE 11.0' => {os: 'Windows', os_version: '8.1', browser: 'IE', browser_version: '11.0'},
  'IE 10.0' => {os: 'Windows', os_version: '7', browser: 'IE', browser_version: '10.0'},
  'IE 9.0' => {os: 'Windows', os_version: '7', browser: 'IE', browser_version: '9.0'},
  'Chrome' => {os: 'Windows', os_version: '8.1', browser: 'Chrome', browser_version: '39.0'},
  'Firefox' => {os: 'Windows', os_version: '8.1', browser: 'Firefox', browser_version: '33.0'},
  'Safari' => {os: 'OS X', os_version: 'Yosemite', browser: 'Safari', browser_version: '8.0'},
  'Android' => {os: 'android', os_version: '4.4', device: 'Samsung Galaxy S5'},
  'Mobile Safari' => {os: 'ios', os_version: '8.0', device: 'iPad Air'},
  'Opera Mini' => {os: 'opera', device: 'Samsung Galaxy Tab'}
}.freeze

def browserstack_url(browser, destination_url)
  params = BROWSER_TO_BROWSER_STACK[browser]
  return nil unless params

  # eg: http://www.browserstack.com/start#os=Windows&os_version=7&browser=IE&browser_version=11.0&zoom_to_fit=true&full_screen=true&autofit=true&url=studio.code.org&resolution=2048x1536&speed=1
  "http://www.browserstack.com/start#" + URI.encode_www_form(params.merge(resolution: '2048x1536', url: destination_url))
end

def excluded_browser?(ua_string)
  EXCLUDED_BROWSERS.any? do |r|
    if r.is_a? Regexp
      ua_string.match r
    else
      ua_string == r
    end
  end
end

def main
  finish = DateTime.now.new_offset(0).strftime('%s').to_i * SECONDS_PER_MSEC
  start = finish - (HOURS_TO_TEST * ONE_HOUR_MSEC)

  Monitor.collate(start: start, finish: finish).each_by_browser do |i|
    next if excluded_browser?(i[:browser])
    next if EXCLUDED_LEVELS.include?(i[:level])

    starts = i[:starts]
    finishes = [starts, i[:finishes]].min

    min_attempts_per_hour = HARD_LEVEL_ATTEMPTS_PER_HOUR[i[:level]] || MINIMUM_ATTEMPTS_PER_HOUR

    if finishes == 0 && starts > min_attempts_per_hour * HOURS_TO_TEST
      level_url = "https://studio.code.org/levels/#{i[:level]}"

      log_string = %[<b>#{i[:browser]}</b> hasn't passed <b><a href="#{level_url}">level #{i[:level]}</a></b> despite <b>#{i[:starts]}</b> attempts in the last #{HOURS_TO_TEST} hour(s)]
      sl = Script.cache_find_level(i[:level]).script_levels.first
      if sl
        level_url = "http://studio.code.org/s/#{sl.script.id}/level/#{sl.id}"
      end
      log_string += %[ <a href="#{browserstack_url(i[:browser], level_url) || level_url}">âœˆ Repro It</a>]
      HipChat.notify('ActivityMonitor', log_string, color: 'yellow', notify: 1)
    end
  end
end

main if only_one_running?(__FILE__)
