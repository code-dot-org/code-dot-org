#!/usr/bin/env ruby

# This syncs content changes from the shared dropbox folder to our github repo
# on the staging machine. This is required for contents changes from dropbox to
# be deployed.

SCRIPT_START = Time.now

require_relative "../../lib/cdo/only_one"
require_relative "../../deployment"
require "cdo/slack"
require "open3"
exit unless only_one_running?(__FILE__)

FOLDERS = {
  "advocacy.code.org" => "sites.v3/advocacy.code.org",
  "code.org" => "sites.v3/code.org",
  "csedweek.org" => "sites.v3/csedweek.org",
  "curriculum-6-8" => "sites/virtual/curriculum-6-8",
  "curriculum-algebra" => "sites/virtual/curriculum-algebra",
  "curriculum-course1" => "sites/virtual/curriculum-course1",
  "curriculum-course2" => "sites/virtual/curriculum-course2",
  "curriculum-course3" => "sites/virtual/curriculum-course3",
  "curriculum-course4" => "sites/virtual/curriculum-course4",
  "curriculum-csp" => "sites/virtual/curriculum-csp",
  "curriculum-docs" => "sites/virtual/curriculum-docs",
  "curriculum-misc" => "sites/virtual/curriculum-misc",
  "curriculum-science" => "sites/virtual/curriculum-science",
  "curriculum-unplugged" => "sites/virtual/curriculum-unplugged",
  "emails" => "emails",
  "hourofcode.com" => "sites.v3/hourofcode.com"
}.freeze

INTERVAL_SECONDS = 5
TOTAL_SECONDS = 60 - INTERVAL_SECONDS
error_message = ""
alert_slack = true
while (Time.now - SCRIPT_START) < TOTAL_SECONDS
  attempt_start = Time.now
  FOLDERS.each do |key, value|
    # 'unison' will sync the two folders. It will return true on success and false on failure.
    # For full details, see unison's man page. Docs are also here: https://www.cis.upenn.edu/~bcpierce/unison/download/releases/stable/unison-manual.html
    command = "unison /home/ubuntu/Dropbox/Shared/#{key} /home/ubuntu/staging/pegasus/#{value} -silent -ignore \"Name .dropbox\" -auto -perms 0 -dontchmod"
    stdout, stderr, _ = Open3.capture3(command)
    if stdout != "" || stderr != ""
      error_message = "#{error_message}Dropbox directory: #{key}. staging directory: #{value}. \n#{stdout}#{stderr}\n"
    end
  end
  current_time = Time.now
  if alert_slack && error_message != ""
    Slack.message("@here Error syncing Dropbox and staging\n" + error_message, {channel: "sync-dropbox-staging"})
    alert_slack = false
  end
  while current_time - attempt_start < INTERVAL_SECONDS && (current_time - SCRIPT_START) < TOTAL_SECONDS
    sleep 0.1
    current_time = Time.now
  end
end
