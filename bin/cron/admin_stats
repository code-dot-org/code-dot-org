#!/usr/bin/env ruby
#
# This script caches database queries whose results are displayed at studio.code.org/admin/stats.
#
require File.expand_path('../../../pegasus/src/env', __FILE__)
require src_dir 'database'
require 'cdo/properties'

DASHBOARD_REPORTING_DB_READONLY = sequel_connect(
  CDO.dashboard_reporting_db_reader, CDO.dashboard_reporting_db_reader)
SEVEN_DAYS = 7 * 24 * 60 * 60
THIRTY_DAYS = 30 * 24 * 60 * 60

# baseline: The set of user objects whose count is used in the denominator of the fraction.
# Returns a hash, mapping demographics (all, gender, locale) to the ratio of users in the baseline
#   who signed-in thirty or more days after account creation to the users in the baseline.
def build_demographic_breakdowns(baseline)
  comparison = baseline.where("current_sign_in_at - created_at > ?", "interval '30 days'")
  students = comparison.count.to_f / [1, baseline.count].max.to_f
  female_students = comparison.where(gender: 'f').count.to_f /
    [1, baseline.where(gender: 'f').count].max.to_f
  male_students = comparison.where(gender: 'm').count.to_f /
    [1, baseline.where(gender: 'm').count].max.to_f
  us_students = comparison.where(locale: 'en-us').count.to_f /
    [1, baseline.where(locale: 'en-us').count].max.to_f
  non_us_students = comparison.exclude(locale: 'en-us').count.to_f /
    [1, baseline.exclude(locale: 'en-us').count].max.to_f
  return {
    students: students,
    female_students: female_students,
    male_students: male_students,
    us_students: us_students,
    non_us_students: non_us_students,
  }
end

def main
  return unless only_one_running?(__FILE__)

  # Users, born (signed in at least once) and unborn (never signed in).
  all_users = DASHBOARD_REPORTING_DB_READONLY[:users]
  all_students = all_users.where(user_type: 'student')
  all_teachers = all_users.where(user_type: 'teacher')
  # Born users.
  users = all_users.exclude(current_sign_in_at: nil)
  students = users.where(user_type: 'student')
  teachers = users.where(user_type: 'teacher')
  # Active students.
  seven_day_active_students = students.where(current_sign_in_at: (Time.now - SEVEN_DAYS)..Time.now)
  thirty_day_active_students = students.
    where(current_sign_in_at: (Time.now - THIRTY_DAYS)..Time.now)
  # Retention of students...
  # ...for measuring the percentage of students with accounts at least thirty-seven days and logged
  #    in at least once after thirty days.
  thirty_day_retention_historical_baseline = students.
    where(created_at: Time.new(1970, 1, 1)..(Time.now - (THIRTY_DAYS + SEVEN_DAYS)))
  # ...for measuring the percentage of students that started thirty-seven to forty-four days ago
  #    and logged in at least once after thirty days.
  thirty_day_retention_current_weekly_baseline = students.
    where(created_at: (Time.now - (THIRTY_DAYS + 2 * SEVEN_DAYS))..(Time.now - (THIRTY_DAYS + SEVEN_DAYS)))
  # ...for measuring the percentage of students that started sixty to ninety days ago and logged in
  #    at least once after thirty days
  thirty_day_retention_current_monthly_baseline = students.
    where(created_at: (Time.now - (3 * THIRTY_DAYS))..(Time.now - (2 * THIRTY_DAYS)))

  Properties.set(:admin_stats, {
    accounts: {
      users: all_users.count,
      students: all_students.count,
      teachers: all_teachers.count,
    },
    born_accounts: {
      users: users.count,
      students: students.count,
      female_students: students.where(gender: 'f').count,
      male_students: students.where(gender: 'm').count,
      teachers: teachers.count,
    },
    actives: {
      seven_day_students: seven_day_active_students.count,
      seven_day_female_students: seven_day_active_students.where(gender: 'f').count,
      seven_day_male_students: seven_day_active_students.where(gender: 'm').count,
      thirty_day_students: thirty_day_active_students.count,
      thirty_day_female_students: thirty_day_active_students.where(gender: 'f').count,
      thirty_day_male_students: thirty_day_active_students.where(gender: 'm').count,
    },
    thirty_day_retention_historical: build_demographic_breakdowns(
      thirty_day_retention_historical_baseline),
    thirty_day_retention_current_weekly: build_demographic_breakdowns(
      thirty_day_retention_current_weekly_baseline),
    thirty_day_retention_current_monthly: build_demographic_breakdowns(
      thirty_day_retention_current_monthly_baseline),
    # TODO(asher): Add more student-teacher metrics and pipe them to the admin_stats dashboard.
    teachers: {
      with_students: students.join(:followers, student_user_id: :id).select(:followers__user_id).distinct.count,
      with_active_students: thirty_day_active_students.join(:followers, student_user_id: :id).select(:followers__user_id).distinct.count,
    },
  })
end

main
