#!/usr/bin/env ruby

# The map on code.org/yourschool is run off of a Google Fusion Table
# (documentation: https://developers.google.com/maps/documentation/javascript/fusiontableslayer).
# This script updates the fusion table using the REST API
# (documentation: https://developers.google.com/fusiontables/docs/v2/using),
# populating it with all rows from the pegasus forms table whose kind is from this page.

# After setting up authentication, provide the following CDO.* attributes (example values below):
#   CDO.hoc_map_account: JSON of a credential which can edit the FusionTables table
#   CDO.pledge_map_table_id: ABCDEF123456 (the id of the fusion table)

require File.expand_path('../../../pegasus/src/env', __FILE__)
require src_dir 'database'
require 'cdo/properties'
require 'dynamic_config/dcdo'

require 'google/apis/fusiontables_v2'
require 'googleauth'

DB_READONLY = Sequel.connect(CDO.pegasus_db_reader.sub('mysql:', 'mysql2:'))

TABLE_ID = CDO.pledge_map_table_id.freeze
CENSUS_FORM_KINDS = "'Census2017','HocCensus2017'".freeze

file = Tempfile.new(['data', '.csv'])
begin
  CSV.open(file.path, 'w') do |csv|
    DASHBOARD_DB[:census_submissions].
      select(:census_submissions__id___census_submissions_id, :how_many_10_hours, :how_many_20_hours, :pledged, :school_infos__school_id, :schools__name, :schools__zip, :schools__city).
      join(:census_submissions_school_infos, census_submission_id: :id).
      join(:school_infos, id: :school_info_id).
      join(:schools, id: :school_id).
      paged_each(rows_per_fetch: 10_000) do |submission|
      pledged = submission[:pledged]
      teaches_yes = ["SOME", "ALL"]
      teaches_cs = teaches_yes.include?(submission[:how_many_10_hours]) || teaches_yes.include?(submission[:how_many_20_hours])

      # Only add to the map if pledge checkbox is checked or the school teaches some form of CS.
      next unless pledged || teaches_cs

      type = pledged ? "pledged" : "teaches_cs"

      next unless submission[:school_id]
      row_id = "CENSUS_SUBMISSIONS-#{submission[:census_submissions_id]}"
      row = [row_id, submission[:name], submission[:zip], submission[:city], type]
      csv << row
    end

    DB_READONLY[:forms].where("kind in (#{CENSUS_FORM_KINDS})").paged_each(rows_per_fetch: 10_000) do |form|
      # Skip any rows that were migrated to CENSUS_SUBMISSIONS since those were already processed above.
      form_map = DASHBOARD_DB[:census_submission_form_maps].where(form_id: form[:id])
      next unless form_map.empty?
      data = JSON.parse(form[:data])

      # Was a pledge made?
      pledged = ["on", "1"].any? {|s| s.casecmp(data["pledge_b"].to_s).zero?}

      # Does the school teach some kind of CS?
      teaches_cs = ["some", "all"].any? {|s| s.casecmp(data["ten_hours_s"].to_s).zero?} ||
          ["some", "all"].any? {|s| s.casecmp(data["twenty_hours_s"].to_s).zero?}

      # Only add to the map if pledge checkbox is checked or the school teaches some form of CS.
      next unless pledged || teaches_cs

      # Use the school ID in the form.
      school_id = data["school_id_s"] || data["nces_school_s"]

      # Retrieve the ZIP and city for this school district from the dashboard's database.
      school = DASHBOARD_DB[:schools].where(id: school_id).first
      next unless school

      type = pledged ? "pledged" : "teaches_cs"

      row_id = "FORMS-#{form[:id]}"
      row = [row_id, school[:name], school[:zip], school[:city], type]
      csv << row
    end

    if File.file?('cspschools.csv')
      CSV.foreach('cspschools.csv', headers: true) do |input_row|
        school_id = input_row['nces_id']

        # Retrieve the ZIP and city for this school district from the dashboard's database.
        school = DASHBOARD_DB[:schools].where(id: school_id).first
        next unless school

        row = [nil, school[:name], school[:zip], school[:city], "teaches_cs"]

        csv << row
      end
    end
  end
ensure
  file.close
end

tables = Google::Apis::FusiontablesV2::FusiontablesService.new

# Note: on local machines, having hoc_map_account in locals.yml seems to make it
# already JSON, so that substituting in this line should work:
#   json_key_io: StringIO.new(CDO.hoc_map_account)

tables.authorization = Google::Auth::ServiceAccountCredentials.make_creds(
  scope: 'https://www.googleapis.com/auth/fusiontables',
  json_key_io: StringIO.new(CDO.hoc_map_account.to_json)
)

tables.replace_table_rows(TABLE_ID, content_type: 'application/octet-stream', upload_source: file.path)
