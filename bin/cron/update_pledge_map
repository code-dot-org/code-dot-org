#!/usr/bin/env ruby

# The map on code.org/yourschool is run off of a Google Fusion Table
# (documentation: https://developers.google.com/maps/documentation/javascript/fusiontableslayer).
# This script updates the fusion table using the REST API
# (documentation: https://developers.google.com/fusiontables/docs/v2/using),
# populating it with all rows from the pegasus forms table whose kind is from this page.

# After setting up authentication, provide the following CDO.* attributes (example values below):
#   CDO.hoc_map_account: JSON of a credential which can edit the FusionTables table
#   CDO.pledge_map_table_id: ABCDEF123456 (the id of the fusion table)

require File.expand_path('../../../pegasus/src/env', __FILE__)
require src_dir 'database'
require 'cdo/properties'
require 'dynamic_config/dcdo'

require 'google/apis/fusiontables_v2'
require 'googleauth'

DB_READONLY = Sequel.connect(CDO.pegasus_db_reader.sub('mysql:', 'mysql2:'))

TABLE_ID = CDO.pledge_map_table_id.freeze
CURRENT_CENSUS_SIGNUP = "Census2017".freeze

file = Tempfile.new(['data', '.csv'])
begin
  CSV.open(file.path, 'w') do |csv|
    DB_READONLY[:forms].where(kind: CURRENT_CENSUS_SIGNUP).paged_each(rows_per_fetch: 10_000) do |form|
      data = JSON.parse(form[:data])

      # Was a pledge made?
      pledged = data["pledge_b"] == "on"

      # Does the school teach some kind of CS?
      teaches_cs = ["Some", "All"].include?(data["ten_hours_s"]) || ["Some", "All"].include?(data["twenty_hours_s"])

      # Only add to the map if pledge checkbox is checked or the school teaches some form of CS.
      next unless pledged || teaches_cs

      # Use the school ID in the form.
      school_id = data["school_id_s"]

      # Retrieve the ZIP for this school district from the dashboard's database.
      school = DASHBOARD_DB[:schools].where(id: school_id).first
      next unless school

      if pledged
        type = "pledged"
      else
        type = "teaches_cs"
      end

      row = [form[:id], school[:name], school[:zip]], type
      csv << row
    end
  end
ensure
  file.close
end

tables = Google::Apis::FusiontablesV2::FusiontablesService.new

# Note: on local machines, having hoc_map_account in locals.yml seems to make it
# already JSON, so that substituting in this line should work:
#   json_key_io: StringIO.new(CDO.hoc_map_account)

tables.authorization = Google::Auth::ServiceAccountCredentials.make_creds(
  scope: 'https://www.googleapis.com/auth/fusiontables',
  json_key_io: StringIO.new(CDO.hoc_map_account.to_json)
)

tables.replace_table_rows(TABLE_ID, content_type: 'application/octet-stream', upload_source: file.path)
