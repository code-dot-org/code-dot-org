#!/usr/bin/env ruby
#
# This script analyzes the activity that is launched from code.org/learn. We track outgoing clicks,
# hidden image calls at the beginning and end of [3rd party] tutorials, and visits to our finish
# page.
#
# There is a lot of HOC data so, for performance, the script caches the totals for each day and only
# performs analysis on the remaining days. Deleting the cached results is an effective way to do
# a complete re-count. EXCEPT for HourOfActivity_Totals_2014-12-05.json which is a summary of all
# results for the year leading up to 12/05/2014.
#
# This script also caches values for the "about_stats" key in the Properties table. Unlike the HOC
# data, it is computed from scratch every time.
#
require File.expand_path('../../../pegasus/src/env', __FILE__)
require src_dir 'database'
require 'cdo/only_one'
require 'cdo/properties'
require 'dynamic_config/dcdo'

# Provides helper methods (analyze_day_fast and add_hashes) as well as the
# *_DB_READONLY constants.
require_relative '../../lib/analyze_hoc_activity_helper'

# This default number of lines of code is from 2016-11-23.
DEFAULT_LINES_OF_CODE = 20_886_942_901

def main
  return unless only_one_running?(__FILE__)

  to_date = JSON.load(IO.read(pegasus_dir("cache/HourOfActivity_Totals_2014-12-05.json")))

  total_started = to_date['started']
  total_finished = to_date['finished']
  total_tutorials = to_date['tutorials']
  total_cities = to_date['cities']
  total_states = to_date['states']
  total_countries = to_date['countries']
  # The code.org HOC count for tutorials on or before 11 January 2016, noting
  # that our counting (via the JSON files) began on 12 January 2016.
  # Computation: https://docs.google.com/spreadsheets/d/1xglCme-BRvtQhVg7G7OV7OZOmrIkpM06g2v7g8Zh8z8
  total_codedotorg = 104_896_901
  # Increase the 'started' metric by 409K to reflect participant count from surveys, circa
  # February 2014.
  total_started += 409216
  # Increase the 'started' metric by 14.8M to reflect undercounting by the
  # database in comparison to Google Analytics and Amazon Elastic Load Balancing
  # logs between 2015-11-07 and 2015-12-18 (inclusive).
  # Discussion of the problem, links to the computation of the 14.8M number, and
  # discussion of ways to resolve the problem can be found in this document:
  # https://docs.google.com/document/d/1RTTCpkDYZjqZxfVehkZRkk1HckYMvFdFGs6SEZnK1I8
  total_started += 14_861_327

  today = DateTime.now.to_date
  day = Date.strptime('2014/12/06', '%Y/%m/%d')

  while day <= today
    cache_path = pegasus_dir("cache/HourOfActivity_Results_#{day.strftime('%Y-%m-%d')}.json")
    if (day != today) && File.file?(cache_path)
      day_data = JSON.load(IO.read(cache_path))
    else
      day_data = analyze_day_fast(day)

      File.open(cache_path, 'wt') do |cache_file|
        cache_file << JSON.pretty_generate(day_data)
      end
    end

    total_started += day_data['started'] if day_data['started']
    total_finished += day_data['finished'] if day_data['finished']
    total_tutorials = add_hashes(total_tutorials, day_data['tutorials'])
    total_cities = add_hashes(total_cities, day_data['cities'])
    total_states = add_hashes(total_states, day_data['states'] || {})
    total_countries = add_hashes(total_countries, day_data['countries'])
    total_codedotorg += day_data['codedotorg_tutorial_count'] if day_data['codedotorg_tutorial_count']

    day += 1
  end

  hoc_year = DCDO.get("hoc_year", 2017)

  # Compute the number of hoc events (the grand total and broken down by company and country).
  hoc_country_totals = Hash.new(0)
  hoc_company_totals = Hash.new(0)
  unique_hoc_events = DB[:forms].where(kind: "HocSignup#{hoc_year}").group(:email, :name).select(:name, :email, :processed_data, :data)
  total_hoc_count = DB[:forms].where(kind: "HocSignup#{hoc_year}").group(:email, :name).select(:email, :name).count

  unique_hoc_events.each do |row|
    data = JSON.parse(row[:data])
    data['hoc_company_s'] = 'Other' if data['hoc_company_s'].nil_or_empty?
    hoc_company_totals[data['hoc_company_s']] += 1

    next if row[:processed_data].nil?
    processed_data = JSON.parse(row[:processed_data])
    processed_data['location_country_code_s'] = 'Other' if processed_data['location_country_code_s'].nil_or_empty?
    hoc_country_totals[processed_data['location_country_code_s']] += 1
  end

  Properties.set :hoc_metrics, {
    started: total_started,
    finished: total_finished,
    tutorials: total_tutorials,
    cities: total_cities,
    states: total_states,
    countries: total_countries,
    total_hoc_count: total_hoc_count,
    total_codedotorg_count: total_codedotorg,
    hoc_country_totals: hoc_country_totals,
    hoc_company_totals: hoc_company_totals,
  }

  # In the production environment, begin with a known previous value in case we
  # are unable to obtain a more recent number.
  lines_of_code = rack_env?(:production) ? DEFAULT_LINES_OF_CODE : 0
  if rack_env?(:production)
    # Since s3 (which the binary relies on) may fail, we retry a few times
    # hoping for success.
    3.times do
      # Note that by executing via backticks, the global variable $? is set to a Process::Status object.
      lines_of_code_from_milestone = `#{deploy_dir('bin', 'count-lines-of-code-from-milestone-logs_v2')}`.lines.last.to_i
      if $?.exited?
        if lines_of_code_from_milestone >= DEFAULT_LINES_OF_CODE && $?.exitstatus == 0
          # If we received a real number (larger than from 2016-01-04) and a proper
          # status, do not continue retrying.
          lines_of_code = lines_of_code_from_milestone
          break
        elsif lines_of_code_from_milestone < DEFAULT_LINES_OF_CODE && $?.exitstatus == 0
          $stderr.puts "count-lines-of-code-from-milestone-logs_v2 returned a small number: #{lines_of_code_from_milestone}"
        else
          $stderr.puts "count-lines-of-code-from-milestone-logs_v2 had non-zero exitstatus: #{$?}"
        end
      else
        $stderr.puts "count-lines-of-code-from-milestone-logs_v2 did not exit normally"
      end
    end
  end
  existing_lines_of_code = Properties.get(:metrics)['lines_of_code']
  lines_of_code = [lines_of_code, existing_lines_of_code].max

  petition_signatures = PEGASUS_REPORTING_DB_READONLY[:forms].where(kind: 'Petition').group_by(:hashed_email).count

  time = DateTime.now
  Properties.set :metrics, {
    created_at:               time,
    created_on:               time.to_date,
    petition_signatures:      petition_signatures,
    lines_of_code:            lines_of_code,
  }

  total_females = DASHBOARD_REPORTING_DB_READONLY[:users].where(gender: 'f').exclude(last_sign_in_at: nil).count
  total_males = DASHBOARD_REPORTING_DB_READONLY[:users].where(gender: 'm').exclude(last_sign_in_at: nil).count
  total_with_gender = [1, total_females + total_males].max

  Properties.set :about_stats, {
    number_served: total_started,
    number_students: DASHBOARD_REPORTING_DB_READONLY[:users].where(user_type: 'student').exclude(last_sign_in_at: nil).count,
    number_teachers: DASHBOARD_REPORTING_DB_READONLY[:users].where(user_type: 'teacher').exclude(last_sign_in_at: nil).count,
    percent_female: ((100 * total_females) / total_with_gender).to_i,
  }
end

main
