#!/usr/bin/env ruby

# This script performs aggregation queries on the pegasus.forms table, specifically HOC signup
# forms, saving the results to the pegasus.properties table.

require File.expand_path('../../../pegasus/src/env', __FILE__)
require 'cdo/db'
require 'cdo/only_one'
require 'cdo/properties'
require 'dynamic_config/dcdo'

DEFAULT_YEAR = 2017
PEGASUS_REPORTING_DB_READONLY = sequel_connect(
  CDO.pegasus_reporting_db_reader,
  CDO.pegasus_reporting_db_reader
)

def main
  year = (ARGV[0] || DCDO.get('hoc_year', DEFAULT_YEAR)).to_i

  # Note that country_counts and us_state_counts are of the form
  # [{"country" => nil, "count" => 1}, {"country" => "Afghanistan", "count" => 2}, ...].
  country_counts = PEGASUS_REPORTING_DB_READONLY[:forms].
    where(forms__kind: "HocSignup#{year}").
    join(:form_geos, form_id: :forms__id).
    group_and_count(:form_geos__country).
    all
  us_state_counts = PEGASUS_REPORTING_DB_READONLY[:forms].
    where(forms__kind: "HocSignup#{year}").
    join(:form_geos, form_id: :forms__id).
    where(form_geos__country: 'United States').
    group_and_count(:form_geos__state).
    all

  # Transform the data into more accessible hashes of the form
  # {'' => 1, 'Afghanistan' => 2, ...}
  country_counts = country_counts.map do |country_and_count_hash|
    Hash[country_and_count_hash[:country], country_and_count_hash[:count]]
  end.reduce({}, :merge)
  us_state_counts = us_state_counts.map do |state_and_count_hash|
    Hash[state_and_count_hash[:state], state_and_count_hash[:count]]
  end.reduce({}, :merge)

  Properties.set(
    "hoc_signup_#{year}",
    {country_counts: country_counts, us_state_counts: us_state_counts}
  )
end

main if only_one_running?(__FILE__)
