#!/usr/bin/env ruby

# This script performs aggregation queries on the pegasus.forms table, specifically HOC signup
# forms, saving the results to the pegasus.properties table.

require File.expand_path('../../../pegasus/src/env', __FILE__)
require 'cdo/db'
require 'cdo/only_one'
require 'cdo/properties'
require 'dynamic_config/dcdo'

DEFAULT_YEAR = 2017
PEGASUS_REPORTING_DB_READONLY = sequel_connect(
  CDO.pegasus_reporting_db_reader,
  CDO.pegasus_reporting_db_reader
)

# Prints the precomputed aggregates for HOC Signup for the specified year.
# @param [Integer] year The year to retrieve precomputed aggregate signup data for.
def report_data(year)
  existing_data = Properties.get "hoc_signup_#{year}"
  puts "HOC Signup (#{year}): #{existing_data}" if existing_data
end

def main
  year = (ARGV[0] || DCDO.get('hoc_year', DEFAULT_YEAR)).to_i

  report_data year

  country_counts = PEGASUS_REPORTING_DB_READONLY[:forms].
    where(forms__kind: "HocSignup#{year}").
    join(:form_geos, form_id: :forms__id).
    group_and_count(:form_geos__country).
    all
  us_state_counts = PEGASUS_REPORTING_DB_READONLY[:forms].
    where(forms__kind: "HocSignup#{year}").
    join(:form_geos, form_id: :forms__id).
    where(form_geos__country: 'United States').
    group_and_count(:form_geos__state).
    all

  Properties.set(
    "hoc_signup_#{year}",
    {country_counts: country_counts, us_state_counts: us_state_counts}
  )

  report_data year
end

main if only_one_running?(__FILE__)
