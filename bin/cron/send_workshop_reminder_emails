#!/usr/bin/env ruby

# This script sends reminder via poste for professional development workshop
# signups.

require File.expand_path('../../../pegasus/src/env', __FILE__)
require 'cdo/poste'

# @param date_as_string [String] a date string in the form MM/DD/YY.
# @returns [Date | nil] a Date for date_as_string or nil if it does not parse
#   to a date.
def parse_workshop_date(date_as_string)
  Date.strptime(date_as_string, '%m/%d/%y')
rescue ArgumentError
  nil
end

# Sends a workshop reminder email to the recipient specified by form.
# @param form_id [Integer] the ID for the ProfessionalDevelopmentWorkshopSignup
#   form
# @param email [String] the email for the ProfessionalDevelopmentWorkshopSignup
#   form
def send_reminder_email(form_id, email)
  recipient = Poste2.ensure_recipient(email, ip_address: '127.0.0.1')
  Poste2.send_message('workshop_signup_reminder', recipient, form_id: form_id)
end

def main
  DB[:forms].where(kind: 'ProfessionalDevelopmentWorkshop').each do |workshop|
    # Parse the JSON blob in data to determine the workshop date.
    parsed_data = JSON.parse(workshop[:data])
    workshop_date = parse_workshop_date(parsed_data['dates'].first['date_s'])
    # Only send workshop reminders if twelve days away, so skip otherwise.
    next unless workshop_date == Date.today + 12
    # Determine all the signups for this workshop, sending an email unless the
    # signup status is cancelled.
    DB[:forms].
      where(kind: 'ProfessionalDevelopmentWorkshopSignup').
      where(parent_id: workshop[:id]).
      each do |signup|
      parsed_signup_data = JSON.parse(signup[:data])
      next if parsed_signup_data['status_s'] == 'cancelled'
      send_reminder_email(signup[:id], signup[:email])
    end
  end
end

main if only_one_running?(__FILE__)
