#!/usr/bin/env ruby
require_relative 'only_one'
abort 'Script already running' unless only_one_running?(__FILE__)

require_relative '../../dashboard/config/environment'

METRICS_NAMESPACE = 'code-dot-org/ActiveJob'

def push_queue_length_metrics
  Cdo::Metrics.push(METRICS_NAMESPACE,
    # Same metrics as "dashboard/app/jobs/application_job.rb"
    [
      {
        metric_name: 'PendingJobCount',
        value: Delayed::Job.where(failed_at: nil).count,
        unit: 'Count',
        timestamp: Time.now,
        dimensions: [
          {
            name: 'Environment', value: CDO.rack_env
          }
        ]
      },
      {
        metric_name: 'FailedJobCount',
        value: Delayed::Job.where.not(failed_at: nil).count,
        unit: 'Count',
        timestamp: Time.now,
        dimensions: [
          {name: 'Environment', value: CDO.rack_env},
        ],
      },
      {
        metric_name: 'WorkableJobCount',
        value: Delayed::Job.where(failed_at: nil, locked_at: nil).where('run_at <= ?', Time.now).count,
        unit: 'Count',
        timestamp: Time.now,
        dimensions: [
          {name: 'Environment', value: CDO.rack_env},
        ],
      }
    ]
  )
end

def push_oldest_job_age_metric
  oldest_job = Delayed::Job.order(:created_at).first
  age_in_seconds = oldest_job ? Time.now.utc - oldest_job.created_at : 0

  Cdo::Metrics.push(METRICS_NAMESPACE,
    [
      {
        metric_name: 'OldestJobAge',
        value: age_in_seconds,
        unit: 'Seconds',
        timestamp: Time.now,
        dimensions: [
          {
            name: 'Environment',
            value: CDO.rack_env
          }
        ]
      }
    ]
  )
end

def main
  push_queue_length_metrics
  push_oldest_job_age_metric
end

main
