#!/usr/bin/env ruby

# Determine how flaky our UI tests by measuring recent failure rate
# using data from the Saucelabs API. Prints out every UI test from
# least flaky to most flaky.

require_relative '../deployment'
require 'cdo/test_flakiness'
require 'optparse'
require 'fileutils'

options = {limit: -1, reruns: false, recalc: false, method: :test_flakiness}
OptionParser.new do |opts|
  opts.banner = "Usage: #{File.basename(__FILE__)} [options]"
  opts.on('-n', '--limit N', 'Top N flakiest tests.') do |n|
    options[:limit] = Integer(n)
  end
  opts.on('-r', '--reruns', 'Show recommended reruns/confidence.') do
    options[:reruns] = true
  end
  opts.on('-c', '--recalc', 'Re-calculate from SauceLabs API.') do
    options[:recalc] = true
  end
  opts.on('-d', '--duration', 'Show and sort by duration instead of flakiness.') do
    options[:method] = :test_duration
  end
  opts.on('-e', '--estimate', 'Show and sort by flakiness-adjusted estimated duration.') do
    options[:method] = :test_estimate
  end
  opts.on('-h', '--help', 'Prints this help') do
    puts opts
    exit
  end
end.parse!

FileUtils.rm(TestFlakiness::CACHE_FILENAME) if options[:recalc]

results = TestFlakiness.method(options[:method]).call
results.to_a.sort_by(&:last).reverse[0..options[:limit]].map do |name, value|
  result = [value, name]
  if options[:reruns]
    result.insert(1, *TestFlakiness.recommend_reruns(TestFlakiness.test_flakiness[name]))
  end
  puts result.join("\t")
end
