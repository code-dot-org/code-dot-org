#!/usr/bin/env ruby
# A script to analyze a range of CircleCI builds for known failures.
# For available options, run ./search-circle-builds -h

require 'optparse'
require 'parallel'
require_relative './circle_project'

RUN_UI_TESTS_STEP_STRING = 'run_tests'
RUN_UI_TESTS_CONTAINER = 1
MAX_THREADS = 50

KNOWN_FAIL_TYPES = [
    {
        search_string: 'ConnectionTimeoutError',
        step_string: RUN_UI_TESTS_STEP_STRING,
        container: RUN_UI_TESTS_CONTAINER
    },
    {
        search_string: 'io_fillbuf',
        step_string: RUN_UI_TESTS_STEP_STRING,
        container: RUN_UI_TESTS_CONTAINER
    },
    {
        search_string: 'invalid base64',
        step_string: RUN_UI_TESTS_STEP_STRING,
        container: RUN_UI_TESTS_CONTAINER
    },
]

options = {}
OptionParser.new do |opts|
  opts.banner = 'Usage: ./search-circle-builds [options]'

  opts.on('--start StartBuildNumber', String, 'Start searching at build #') do |n|
    options[:start_build] = n.to_i
  end
  opts.on('--end EndBuildNumber', String, 'End searching at build #') do |n|
    options[:end_build] = n.to_i
  end
  opts.on('--grep "String to Search for"', String, 'Search for given string') do |grep_string|
    options[:grep_string] = grep_string
  end
  opts.on('--whole-lines', TrueClass, 'Print entire lines of found strings in output') do |is_true|
    options[:whole_lines] = is_true
  end
  opts.on('--count', TrueClass, 'Counts number of found strings in output') do |is_true|
    options[:count] = is_true
  end
  opts.on('--grep-container ', String, 'Search given container # for grep string') do |grep_container|
    options[:grep_container] = grep_container.to_i
  end
  options[:grep_container] ||= RUN_UI_TESTS_CONTAINER
  opts.on('--grep-step ', String, 'Search given step (substring) for grep string') do |grep_step|
    options[:grep_step] = grep_step
  end
  options[:grep_step] ||= RUN_UI_TESTS_STEP_STRING
  opts.on('--branch BranchName', String, 'Limit results to builds for one branch') do |branch_name|
    options[:branch_name] = branch_name
  end
  opts.on_tail('-h', '--help', 'Show this message') do
    puts opts
    exit
  end
end.parse!

@project = CircleProject.new('code-dot-org/code-dot-org')
build_range = @project.build_range_from_options(options)

fail_types_to_check = KNOWN_FAIL_TYPES

if options[:grep_string]
  fail_types_to_check = [{
    search_string: options[:grep_string],
    step_string: options[:grep_step],
    container: options[:grep_container]
  }]
end

def describe_fail_type(f)
  "#{f[:search_string]} in container #{f[:container]} step #{f[:step_string]}"
end

fail_types_list = fail_types_to_check.map { |f| describe_fail_type(f) }.join "\n"
puts "Checking builds #{build_range} for output:\n#{fail_types_list}"
puts "Limiting to branch #{options[:branch_name]}" unless options[:branch_name].nil?

Parallel.each(build_range, in_processes: MAX_THREADS) do |build|
  fail_types_to_check.each do |known_fail|
    # Skip this build if it's not on the requested branch
    next unless options[:branch_name].nil? || (@project.get_build(build)['branch'] == options[:branch_name])

    output = @project.get_log(build, known_fail[:container], known_fail[:step_string])

    begin
      full_output_string = output[0]['message']
      if full_output_string.include? known_fail[:search_string]
        if options[:count]
          count = full_output_string.split("\n").count do |line|
            line.include? known_fail[:search_string]
          end
          puts "Build https://circleci.com/gh/code-dot-org/code-dot-org/#{build} output contains #{count} of: #{known_fail[:search_string]}"
        elsif options[:whole_lines]
          lines = []
          full_output_string.split("\n").each do |line|
            lines << line if line.include? known_fail[:search_string]
          end
          puts "Build https://circleci.com/gh/code-dot-org/code-dot-org/#{build} output contains lines:"
          lines.each{|l| puts l}
        else
          puts "Build https://circleci.com/gh/code-dot-org/code-dot-org/#{build} output contains: #{known_fail[:search_string]}"
        end
      end
    rescue => _
    end
  end
end

exit(0)
