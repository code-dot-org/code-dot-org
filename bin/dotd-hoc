#!/usr/bin/env ruby

require 'cgi'
require 'logger'
require 'tmpdir'
require_relative '../lib/cdo/cdo_cli'
include CdoCli

LOG_FILE = "#{Dir.tmpdir}/dotd.log"
LOGGER = Logger.new(LOG_FILE, 'daily')

LOGGER.formatter = proc do |_serverity, time, _progname, msg|
  "[#{time.strftime('%I:%M %p')}]: #{msg}\n"
end

def ask_for_name
  name = ''
  until name != ''
    print "Who are you? "
    name = gets.chomp
  end
  puts "Hi #{name}!"
  LOGGER.info("#{Time.new.strftime('%A, %B %d %Y')}: #{name} is DotD")
  name
end

def should_i(question)
  loop do
    print "Should I #{question}? [#{underline 'Y'}es]/#{underline 'S'}kip/#{underline 'Q'}uit: "
    response = gets.strip.downcase
    if 'yes'.start_with?(response) # also catches blank/return ;)
      LOGGER.info(question)
      yield
      return
    elsif 'skip'.start_with?(response) || 'no'.start_with?(response)
      return
    elsif 'quit'.start_with?(response)
      puts "Something weird going on? Take a look at: http://wiki.code.org/display/PROD/Daily+Deployment"
      exit(-1)
    else
      puts "Sorry, I didn't understand that.\n\n"
    end
  end
end

def press_enter_to_continue
  puts dim 'Press enter to continue...'
  gets
end

def wait_for(thing)
  puts "\nWait for #{thing}"
  press_enter_to_continue
end

def open_url(url)
  open_in_default_browser(url)
  puts dim "Browser didn't open? go to:"
  puts dim url
end

def open_in_default_browser(url)
  # Based on http://stackoverflow.com/a/14053693/5000129
  if RbConfig::CONFIG['host_os'] =~ /linux|bsd/
    system "sensible-browser \"#{url}\""
  else
    system "open \"#{url}\""
  end
end

def content_push(server_name, environment_name, user_name)
  puts <<-EOS.unindent
    Follow the prompts given by the content-push script.
      If you need to do something fancier (or if the changed files do not
      "look ok" when it asks you), log in to staging and hand-craft the commit.
  EOS
  success = system "ssh -t gateway.code.org ssh -t #{server_name} \"#{environment_name}/bin/content-push --name=\\\"#{user_name}\\\"\""

  # Notice if the content push fails, and be helpful about fixing the problem.
  unless success
    puts "#{bold 'Uh-oh!'}  It looks like the #{server_name} content push failed!"
    should_i "ssh to #{server_name} so you can fix the problem manually" do
      puts <<-EOS.unindent

      #{bold "Connecting to #{server_name}."} Type 'logout' when you're done.

      #{dim 'd[ o_0 ]b'}

      EOS
      system "ssh -t gateway.code.org ssh #{server_name}"
      puts <<-EOS.unindent

      #{dim 'd[ o_0 ]b'}

      #{bold 'Welcome back!'}

      EOS
      press_enter_to_continue
    end
  end
end

def open_pull_request(base, compare, title)
  open_url "https://github.com/code-dot-org/code-dot-org/compare/#{base}...#{compare}?expand=1&title=#{CGI.escape title}"
end

puts <<-EOS.unindent

  #{bold 'Welcome to Robo-Dev-of-the-Day, Hour of Code edition!'}

    d[ o_0 ]b

  #{bold 'Documentation'}

    Dev-of-the-Day Checklist
    #{dim 'http://wiki.code.org/display/PROD/Dev+of+the+Day+Checklist'}

    Known Issues
    #{dim 'http://wiki.code.org/display/PROD/Known+Issues'}

EOS

user_name = ask_for_name

should_i "integrate staging into staging-next" do
  open_pull_request 'staging-next', 'staging', 'staging > staging-next'
end

should_i "start a morning test run" do
  puts <<-EOS.unindent
    #{bold 'Steps to update adhoc'}
      Join adhoc-staging-next to watch progress
      Note: There are a few local changes on this machine to get things working

      > ssh -t gateway ssh -i ~/.ssh/server_access_key ubuntu@adhoc-staging-next.cdn-code.org

      > cd adhoc
      > git pull
      > rake build
      > sudo service varnish stop
      > sudo service varnish start

      > cd dashboard/test/ui
      > sudo bundle install --without ''
      > bundle exec ./runner.rb --db -c ChromeLatestWin7,iPhone -d dashboard-adhoc-staging-next.cdn-code.org -p adhoc-staging-next.cdn-code.org --eyes --html -f features/initialPageViews.feature,features/teacherOnlyMarkdown.feature,features/hourOfCodeDotCom.feature,features/footer.feature,features/stageLockEyes.feature,features/pd/facilitatorSurveyResultsView.feature,features/teacherStudentToggle.feature,features/topInstructions.feature,features/hiddenStages_eyes.feature,features/unusedBlocks.feature,features/angleHelper.feature,features/publicKeyCryptography/eyes.feature,features/gamelab/eyes.feature,features/contractEditor.feature,features/applab/tooltips.feature,features/applab/eyes.feature,features/eyes.feature,features/containedLevels.feature,features/raceInterstitial.feature,features/submittableEyes.feature,features/craft/dialogs.feature --parallel 2 --with-status-page
      > bundle exec ./runner.rb --db -d dashboard-adhoc-staging-next.cdn-code.org -p adhoc-staging-next.cdn-code.org --html --fail_fast --parallel 2 --with-status-page --magic_retry -c ChromeLatestWin7

    If things go well with ChromeLatestWin7 you could try running against other browsers as well
  EOS

  wait_for "morning test run to complete, re-run/investigate failures, and update adhoc-staging-next room topic to that commit # green"
end

should_i "commit content changes from levelbuilder" do
  content_push 'levelbuilder-staging', 'levelbuilder', user_name

  should_i "merge from levelbuilder to staging-next" do
    open_pull_request 'staging-next', 'levelbuilder', 'levelbuilder > staging-next'
  end
end

should_i "start another test run" do
  # TODO: More detail on this process.
  puts "TBD: SSH to staging-next machine, pull latest changes, run tests"
  wait_for "a green test run"
end

puts <<-EOS.unindent
  * Send your DOTD Report to dev@code.org. You can find a log of your day at #{LOG_FILE}
EOS
press_enter_to_continue

puts <<-EOS.unindent

#{bold "You're done!"}

    d[ o_0 ]b
EOS
