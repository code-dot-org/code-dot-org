#!/usr/bin/env ruby
#
# CRONJOB is a wrapper around our scheduled (cron) tasks intended to capture and notify when jobs
# encounter unexpected conditions. CRONJOB uses a combination of exit code and command output to
# determine whether and how to notify.
#
# SUCCESS (no notifications): The process exited with a 0 exit code with no output (after
#   stripping whitespace).
#
# WARNING (email notification, HipChat yellow message): The process exited with a non-0 exit code
#   or returned output.
#
# ERRROR (not currently differentiated): A non-0 exit code could be elevated to mean error and
#   result in a red HipChat message and/or channel notification.
#
# FUTURE THOUGHTS: It may make sense to deliver WARNING and ERROR cases to HoneyBadger.io in
#   addition to (or instead of) HipChat.
#
# PROPER LOCATION: This script should move to `/bin`. It's presence in `/aws` is an artifact of
#   the time prior to using Chef.
#
# CRONJOBs are defined the crontab: `chef/cookbooks/cdo-apps/templates/default/crontab.erb`.
#

require 'mail'
require_relative '../deployment.rb'
require 'cdo/hip_chat'

#
# email_notify - deliver an email notification if appropriate. the method requires sendmail to
#   be working. This is currently handled by installing the `cdo-postfix` recipe. This function
#   could be changed to use the Poste mail system but my gut says this is a bad idea because it
#   mixes our internal notifications with our customer notifications, and Poste keeps copies of
#   all data sent, usually little bits of JSON applied to the template, but in this case jobs
#   (e.g. build!) output large logs.
#
def email_notify(command, status, content, recipient)
  return if recipient.nil? || recipient.empty?
  return if content.empty? && status == 0

  Mail.new do |mail|
    mail.to recipient
    mail.from 'dev+build@code.org'
    mail.subject "#{command} cronjob return #{status}"

    mail.part(content_type: 'multipart/alternative') do |part|
      part.text_part = Mail::Part.new do
        content_type 'text/plain; charset=UTF-8'
        body content
      end
    end

    mail.delivery_method :sendmail
    mail.deliver!
  end
end

#
# hipchat_notify - deliver a notification to this environment's log channel.
#
def hipchat_notify(command, status, content, recipient)
  return if content.empty? && status == 0
  return if recipient == 'dev+build@code.org' && status == 0

  message = "/quote #{command} returned (#{status}):\n#{content}".strip
  HipChat.log message, color: 'yellow', message_format: 'text'
end

#
# main - run the command (provided as the first command-line argument) and deliver an email
#   notification to the second argument (if provided).
#
def main()
  command = ARGV[0]
  result = `#{command} 2>&1`.strip # `2>&1` capture both STDOUT and STDERR into result
  status = $?.exitstatus
  hipchat_notify command, status, result, ARGV[1]
  email_notify command, status, result, ARGV[1]
end

main()
