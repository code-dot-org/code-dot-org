#!/usr/bin/env ruby

# THIS SCRIPT SHOULD BE REMOVED ANYTIME AFTER MAR 1, 2024
#
# During our migration to use Git LFS:
# https://github.com/code-dot-org/code-dot-org/issues/55759, many PRs were
# auto-closed by GitHub (force push to staging rewriting history)
# and cannot be re-opened. This script copies previous comments,
# and description frrm the old PR, and creates a new one.
#
# Usage: bin/copy-pr OLD_PR_NUMBER
#
# Example: bin/copy-pr 51637
# Creates a PR like: https://github.com/code-dot-org/code-dot-org/pull/56273

require 'json'
require 'open3'

def fetch_pr(pr_number)
  json_fields = "title,body,headRefName,comments,url,reviews"
  command = "gh pr view #{pr_number} --json #{json_fields}"
  stdout, stderr, status = Open3.capture3(command)
  abort("Error: #{stderr}") unless status.success?
  JSON.parse(stdout, symbolize_names: true)
end

def comments_to_summary_text(comments)
  comments_summary = comments.map do |comment|
    "- **#{comment[:author][:login]}** [commented](#{comment[:url]}) - #{comment[:body].tr("\n", ' ')}"
  end
  comments_summary.join("\n")
end

def reviews_to_summary_text(reviews)
  reviews_summary = reviews.map do |review|
    "- **#{review[:author][:login]} #{review[:state].downcase}** - #{review[:body].tr("\n", ' ')}"
  end
  reviews_summary.join("\n")
end

def check_gh_is_installed
  `which gh`
  unless $?.success?
    puts "We use the `gh` command from GitHub to create a new PR."
    puts "`gh` not found, see installation instructions at:\nhttps://github.com/cli/cli#installation"
    return false
  end
  true
end

def create_new_pr(old_pr)
  branch = old_pr[:headRefName]
  title = old_pr[:title].gsub("'", "\\\\'") # Escape single quotes in title
  File.write("old-pr-description.txt", old_pr[:body])
  command = "gh pr create --base staging --head #{branch} --title '#{title}' --body-file old-pr-description.txt"

  puts "Running:\n#{command}\n"
  puts
  print "Create PR? [y/n]: "
  answer = $stdin.gets.chomp.downcase
  if answer == 'y'
    stdout, stderr, status = Open3.capture3(command)
    if status.success?
      puts stdout
      File.delete("old-pr-description.txt")
      return stdout.split("\n").last.split('/').last
    else
      puts stderr
      raise "Failed to create PR: #{stderr}"
    end
  end
  nil
end

def add_old_pr_info_to(new_pr_number, old_pr)
  old_pr_number = old_pr[:url].split('/').last
  comment_body = "This PR is a continuation of ##{old_pr_number}, which was mis-closed by the Git LFS migration (#55759).\n\n" \
    "### Previous Comments:\n#{comments_to_summary_text(old_pr[:comments])}\n\n" \
    "### Previous Reviews:\n#{reviews_to_summary_text(old_pr[:reviews])}"
  File.write("old-pr-info.txt", comment_body)
  command = "gh pr comment #{new_pr_number} --body-file old-pr-info.txt"
  puts
  puts "Now we'll add a comment with the previous PRs comments and reviews"
  puts "Adding previous comments (see old-pr-info.txt) with:\n#{command}\n"
  stdout, stderr, status = Open3.capture3(command)
  if status.success?
    File.delete("old-pr-info.txt")
    puts stdout
  else
    puts stderr
    puts "\nWARNING: Failed to add old PR info: #{stderr}, you may want to manually add the contents of old-pr-info.txt to the PR as a new comment."
  end
end

if check_gh_is_installed
  unless ARGV.length == 1 && ARGV[0].match?(/^\d+$/)
    puts "Creates a copy of PR OLD_PR_NUMBER which was mis-closed during the Git LFS migration"
    puts
    puts "Example: bin/copy-pr 51637"
    puts "Creates a PR like: https://github.com/code-dot-org/code-dot-org/pull/56273"
    exit(1)
  end

  pr_number = ARGV[0]
  puts "Creating a copy of mis-closed PR ##{pr_number}"
  puts
  old_pr = fetch_pr(pr_number)
  new_pr_number = create_new_pr(old_pr)
  add_old_pr_info_to(new_pr_number, old_pr)

  # Open the new PR in the web browser
  `gh pr view --web #{new_pr_number}`

  puts "NOTE: Staging has drone.yml fixes and drone will not pass on your new PR until you merge staging into it. "
  puts

  # Construct and print the new PR URL in bold
  new_pr_url = "https://github.com/code-dot-org/code-dot-org/pull/#{new_pr_number}"
  puts "\n\e[1mNew PR URL:\n#{new_pr_url}\e[0m"
end
