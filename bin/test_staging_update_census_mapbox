#!/usr/bin/env ruby

# The map on code.org/yourschool is run off of Mapbox.
# This script updates the data on Mapbox by querying all rows from
# census_summaries table for the appropriate school year,
# creating maptiles with Mapbox's command line tool, Tippecanoe,
# and uploading them to Mapbox's server.

require_relative '../dashboard/config/environment'
require_relative '../pegasus/helpers/properties'

require_relative './cron/upload_to_mapbox'

raise "CDO.mapbox_upload_token is not defined" unless CDO.mapbox_upload_token

CSV_IMPORT_OPTIONS = {col_sep: ",", headers: true, encoding: 'bom|utf-8'}.freeze

def make_location(lat, long)
  return nil if lat.nil? || long.nil?

  "#{format('%.6f', lat)}, #{format('%.6f', long)}"
end

def main
  CDO.log.info "Loading census summary data."
  AWS::S3.seed_from_file('cdo-census', "access-report-data-files-2024/final-csv/final_csv_2024_09_30.csv") do |filename|
    year = '2024'
    geojson = JSON.parse('{ "type": "FeatureCollection", "features": [] }')
    entries_skipped = 0

    CSV.read(filename, **CSV_IMPORT_OPTIONS).each do |row|
      # Parse or skip row data
      parsed = row.to_hash.symbolize_keys
      school = School.find_by_id(parsed[:school_id])

      if school.nil?
        entries_skipped += 1
        next
      end

      teaches_cs = parsed[:teaches_cs] == 'unknown' ? 'U' : parsed[:teaches_cs]

      # Add parsed row to map
      geojson["features"] <<
        {
          geometry: {
            coordinates: [school.longitude.to_f, school.latitude.to_f],
            type: "Point"
          },
          properties: {
            school_id: school.id,
            year: year,
            school_name: school.name.titleize,
            school_city: school.city.titleize,
            school_state: school.state,
            teaches_cs: teaches_cs
          },
          type: "Feature"
        }
    end

    CDO.log.info "#{entries_skipped} census summaries skipped due to no school_id match in database."
    CDO.log.info "Census summaries loading: done processing #{filename}.\n"

    file = Tempfile.new(['census', 'geojson'])
    tiles = Tempfile.new(['censustiles-dev', 'mbtiles'])
    file.write(JSON.pretty_generate(geojson))
    _stdout, stderr, tippecanoe_status = Open3.capture3(
      # Tippecanoe will generate a map that has a min zoom of 1 (approx the whole world),
      # clusters points that are approximately 2 pixels apart, and drops points to make them fit if they can't.
      # The layer is called "census". DO NOT change the layer name without changing the map
      # in the Mapbox UI.
      "tippecanoe -Z 1 -rg --cluster-distance=2 -o #{tiles.path} -l \"census\" --force #{file.path}"
    )
    upload_successful = false
    if tippecanoe_status.success?
      upload_successful = upload_maptiles(tiles.path, 'censustiles-dev')
    end
    unless tippecanoe_status.success? && upload_successful
      CDO.log.info "Error in uploading"
      CDO.log.info `Success state: #{tippecanoe_status.success?}`
      CDO.log.info `Upload successful: #{upload_successful}`
      Honeybadger.notify(
        error_message: "Updating Census map on Mapbox failed",
        error_class: "Census Map Update Failure",
        context: {
          tippecanoe_status: stderr,
          upload_status: upload_successful
        }
      )
    end
  end
end

main
