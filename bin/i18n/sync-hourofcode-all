#!/usr/bin/env ruby

# Runs all steps necessary for a full Hour of Code i18n update
#
# First, to process newly-added strings, we:
#   Sync In to collect various translations into a single source directory
#   Sync Up to upload that source directory to crowdin
#
# Then, to retrieve new translations for existing strings, we:
#   Sync Down to download new translations from crowdin
#   Sync Out to distribute those translations throughout our system
#
# Finally, we create a PR with the changes

require File.expand_path('../../../pegasus/src/env', __FILE__)
require 'cdo/languages'
require_relative '../../lib/cdo/github'
require_relative 'i18n_script_utils'

BRANCH = "i18n-sync-hoc-#{Date.today.strftime('%m-%d')}".freeze

def sync_in
  return unless I18nScriptUtils.should_i "sync in"
  I18nScriptUtils.run_standalone_script(File.join(__dir__, "sync-hourofcode-in"))
end

def sync_up
  return unless I18nScriptUtils.should_i "sync up"
  I18nScriptUtils.run_standalone_script(File.join(__dir__, "sync-hourofcode-up"))
end

def sync_down
  return unless I18nScriptUtils.should_i "sync down"
  I18nScriptUtils.run_standalone_script(File.join(__dir__, "sync-hourofcode-down"))
end

def sync_out
  return unless I18nScriptUtils.should_i "sync out"
  I18nScriptUtils.run_standalone_script(File.join(__dir__, "sync-hourofcode-out"))
end

def create_pr
  return unless I18nScriptUtils.should_i "create the PR"
  `git checkout -B #{BRANCH}`

  puts "Committing source changes"
  I18nScriptUtils.git_add_and_commit(
    [
      "i18n/locales/source/hourofcode/",
    ],
    "hoc i18n sync source updates"
  )

  Languages.get_hoc_languages.each do |prop|
    puts "Committing #{prop[:crowdin_name_s]} changes"
    I18nScriptUtils.git_add_and_commit(
      [
        "i18n/locales/#{prop[:locale_s]}/hourofcode/",
        "pegasus/sites.v3/hourofcode.com/i18n/#{prop[:unique_language_s]}.yml",
        "pegasus/sites.v3/hourofcode.com/i18n/public/#{prop[:unique_language_s]}/"
      ],
      "hoc i18n sync #{prop[:crowdin_name_s]} updates"
    )
  end

  `git push origin #{BRANCH}`
  pr = GitHub.create_pull_request(
    base: 'staging',
    head: BRANCH,
    title: "I18n sync HOC #{Date.today.strftime('%m/%d')}"
  )
  puts "Created PR: #{GitHub.url(pr)}"
end

def main
  sync_in
  sync_up
  sync_down
  sync_out
  create_pr
end

main
