#!/usr/bin/env ruby
require_relative '../../pegasus/src/env'
require src_dir 'database'
require 'cdo/poste'

def load_contacts
  {}.tap do |contacts|
    DB[:contacts].all.each do |contact|
      contacts[contact[:email]] = contact[:id]
    end
  end
end

def load_recipients(path, params={})
  start = params[:start] || 0
  limit = params[:limit] || -1

  Queue.new.tap do |queue|
    CSV.foreach(path, headers: true) do |row|
      row = params[:filter][row] if params[:filter]
      next unless row

      if start > 0
        start -= 1
        next
      end

      queue << row

      break if queue.length == limit
    end
  end
end

def process_command_line(argv=ARGV)
  {
    csv: nil,
    limit: 100000,
    start: 0,
    template: nil,
    threads: 4,
  }.tap do |params|
    i = 0
    c = argv.count

    while i < c
      if argv[i] == '--threads'
        raise ArgumentError, 'no value for --threads flag provided.' unless (i += 1) < c
        params[:threads] = argv[i].to_i
      elsif argv[i] == '--start'
        raise ArgumentError, 'no value for --start flag provided.' unless (i += 1) < c
        params[:start] = argv[i].to_i
      elsif argv[i] == '--limit'
        raise ArgumentError, 'no value for --limit flag provided.' unless (i += 1) < c
        params[:limit] = argv[i].to_i
      else
        if params[:csv]
          raise ArgumentError, "Unexpected argument '#{argv[i]}'"
        elsif params[:template]
          params[:csv] = argv[i]
        else
          params[:template] = argv[i]
        end
      end
      i += 1
    end
  end
end

@contacts_lock = Mutex.new
IP_ADDRESS = '127.0.0.1'
def send_message(template, item)
  recipient = @contacts_lock.synchronize do
    Poste2.ensure_recipient(item['email'], name: item['name'].to_s, ip_address: IP_ADDRESS)
  end

  Poste2.send_message template, recipient, item.to_hash.except('email', 'name')
rescue => e
  puts "Couldn't send to '#{item['email']}': #{e.message}"
end

USAGE = <<EOS
Usage: send-to-mailing-list [options] template mailing-list.csv
Options:
  --threads
  --start
  --limit
I look for templates in pegasus/emails
EOS

def main
  params = process_command_line
  raise ArgumentError, USAGE unless params[:template] && params[:csv]

  raise ArgumentError, "'#{params[:template]}' not found." unless Poste.resolve_template(params[:template])

  queue = load_recipients params[:csv], start: params[:start], limit: params[:limit]
  puts "#{queue.length} messages to send."

  workers = []

  workers << Thread.new do
    until queue.empty?
      puts "#{queue.length} messages left to send."
      sleep 1.0
    end
  end

  params[:threads].times do
    workers << Thread.new do
      until queue.empty?
        item = begin
                 queue.pop(true)
               rescue ThreadError
                 nil
               end
        send_message params[:template], item if item
      end
    end
  end

  workers.each(&:join)
end

main
