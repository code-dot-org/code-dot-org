#!/usr/bin/env ruby

require File.expand_path('../../../pegasus/src/env', __FILE__)
require 'cdo/pardot'
require 'cdo/only_one'

# This script generates a Pardot import CSV file of unsynced contacts
# that can then be manually imported into Pardot via its web UI

PEGASUS_REPORTING_DB_READER = sequel_connect(
  CDO.pegasus_reporting_db_reader,
  CDO.pegasus_reporting_db_reader
  )

# Use database-to-Pardot mapping from the Pardot library, excluding Pardot ID
# which we don't send to Pardot, we retrieve later
MYSQL_TO_PARDOT_MAP_CSV = Pardot::MYSQL_TO_PARDOT_MAP.except(:pardot_id).freeze

# Pardot has a 100MB limit on file import size. Pick a file size limit a little
# under 100 MB
MAX_BYTES = 90 * 1024 * 1024

def main
  columns = nil

  total_bytes_approx = 0
  num_contacts = 0

  # Generate a filename for export
  path = "pardot-export-#{Time.now.strftime('%Y-%m-%d-%H-%M-%S')}.csv"

  # Open a CSV for write
  CSV.open(path, 'wb') do |results|
    # Make a database query to get all the contacts that have not been synced
    # into Pardot yet, and have not opted out of emails.
    PEGASUS_REPORTING_DB_READER[:contact_rollups].where(
      "pardot_sync_at IS NULL AND pardot_id IS NULL AND opted_out IS NULL"
      ).order(:id).each do |contact_rollup|

      contact = {}

      # Map database fields into hash of Pardot fields
      MYSQL_TO_PARDOT_MAP_CSV.each do |mysql_key, pardot_info|
        contact[pardot_info[:field]] = contact_rollup[mysql_key]
      end

      contact[:opted_out] = nil
      contact[:is_do_not_email] = nil
      contact[:db_Has_Teacher_Account] = nil
      contact[:db_Imported] = nil
      # do special handling of a few fields
      Pardot.apply_special_fields(contact_rollup, contact)

      # We exclude opted-out contacts in the query, but double check here
      # that we don't try to import an opted-out or do-not-email contact
      unless contact[:opted_out].nil?
        raise "Can't import opted out contacts"
      end
      unless contact[:is_do_not_email].nil?
        raise "Can't import do not email contacts"
      end

      num_contacts += 1

      # Calculate approximate total bytes we are generating. +1 byte for the
      # comma between fields. This will undercount slightly because the CSV
      # library will add quotes if necessary (if there is comma or other
      # delimiter in the output) but that happens in a small fraction of cases.
      # This approximation gets us pretty close.
      total_bytes_approx +=
        contact.values.map {|value| (value.try(:length) || 0) + 1}.sum

      # Stop writing to CSV if approx total data size reaches our conservative
      # limit
      break if total_bytes_approx > MAX_BYTES

      # Write headers TO CSV if we have not already
      unless columns
        columns = contact.keys
        results << columns
      end
      # Write data for this contact to CSV
      results << columns.map {|column| contact[column]}

      # log periodically
      log "Records processed: #{num_contacts}" if num_contacts % 10_000 == 0
    end
  end

  log "Contacts: #{num_contacts}  total bytes: #{total_bytes_approx} "\
      " keys: #{contacts.keys.length}"
end

def log(s)
  puts s           # emit to stdout
  CDO.log.info s   # emit to log file
end

main if only_one_running?(__FILE__)
