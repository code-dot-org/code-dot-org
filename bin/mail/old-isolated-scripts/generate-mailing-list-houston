#!/usr/bin/env ruby
require_relative '../../../pegasus/src/env'
require 'cdo/solr'
require src_dir 'database'

SOLR = Solr::Server.new(host: CDO.solr_server)

def csv_contacts(path, params={})
  fields = params[:fields] if params[:fields]

  [].tap do |results|
    CSV.foreach(path, headers: true) do |i|
      i = yield(i) if block_given?
      results << {email: i['email'].downcase.strip, name: i['name']}.merge(i.to_hash.slice(*fields)) if i
    end
  end
end

def dashboard_teachers(params={})
  fields = params[:fields] if params[:fields]

  [].tap do |results|
    DASHBOARD_DB[:users].where(user_type: 'teacher').each do |i|
      i = yield(i) if block_given?
      if i
        if location = Geocoder.search(i[:current_sign_in_ip].to_s.strip).first
          #sleep(0.3)
          if location.city == 'Houston' && location.state == 'Texas'
            results << {email: i[:email].downcase.strip, name: i[:name]}.merge(i.to_hash.slice(*fields))
          end
        end
      end
    end
  end
end

def export_contacts_to_csv(contacts, path)
  columns = nil

  CSV.open(path, 'wb') do |results|
    contacts.values.each do |contact|
      unless columns
        columns = contact.keys
        results << columns
      end
      results << columns.map{|column| contact[column]}
    end
  end
end

def query_contacts(params)
  fields = params[:fields] if params[:fields]

  [].tap do |results|
    SOLR.query(params.merge(rows: 10000)).each do |i|
      i = yield(i) if block_given?
      results << {email: i['email_s'].downcase.strip, name: i['name_s']}.merge(i.slice(*fields)) if i
    end
  end
end

UNSUBSCRIBERS = {}.tap do |results|
  DB[:contacts].where('unsubscribed_at IS NOT NULL').each do |i|
    email = i[:email].downcase.strip
    results[email] = true
  end
end
puts "#{UNSUBSCRIBERS.count} unsubscribers loaded."

#DONORS = {}.tap do |results|
#  csv_contacts('donors.csv').each do |i|
#    email = i[:email].downcase.strip
#    results[email] = i unless UNSUBSCRIBERS[email]
#  end
#end
#puts "#{DONORS.count} donors loaded."

ADMINS = {}.tap do |results|
  (
    query_contacts(q: 'kind_s:"BringToSchool2013" && (role_s:"principal" || role_s:"superintendent" || role_s:"district_admin") && create_ip_city_s:"Houston" && create_ip_state_s:"Texas"') +
    query_contacts(q: 'kind_s:"CSEdWeekEvent2013" && (role_s:"principal" || role_s:"superintendent" || role_s:"district_admin") && create_ip_city_s:"Houston" && create_ip_state_s:"Texas"')
  ).each do |i|
    email = i[:email].downcase.strip
    results[email] = i unless UNSUBSCRIBERS[email]
  end
end
puts "#{ADMINS.count} admins loaded."

TEACHERS = {}.tap do |results|
  (
    dashboard_teachers +
    query_contacts(q: 'kind_s:"Petition" && role_s:"educator" && create_ip_city_s:"Houston" && create_ip_state_s:"Texas"') +
    query_contacts(q: 'kind_s:"BringToSchool2013" && role_s:"teacher" && create_ip_city_s:"Houston" && create_ip_state_s:"Texas"') +
    query_contacts(q: 'kind_s:"CSEdWeekEvent2013" && role_s:"teacher" && create_ip_city_s:"Houston" && create_ip_state_s:"Texas"') +
    query_contacts(q: 'kind_s:"ClassSubmission" && create_ip_city_s:"Houston" && create_ip_state_s:"Texas"')
  ).each do |i|
    email = i[:email].downcase.strip
    results[email] = i unless UNSUBSCRIBERS[email] || ADMINS[email]
  end
end
puts "#{TEACHERS.count} teachers loaded."

PARENTS = {}.tap do |results|
  (
    query_contacts(q: 'kind_s:"Petition" && role_s:"parent" && create_ip_city_s:"Houston" && create_ip_state_s:"Texas"')
  ).each do |i|
    email = i[:email].downcase.strip
    results[email] = i unless UNSUBSCRIBERS[email] || ADMINS[email] || TEACHERS[email]
  end
end
puts "#{PARENTS.count} parents loaded."

export_contacts_to_csv ADMINS, 'houston-admins.csv'
export_contacts_to_csv TEACHERS, 'houston-teachers.csv'
export_contacts_to_csv PARENTS, 'houston-parents.csv'
