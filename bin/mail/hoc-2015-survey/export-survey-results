#!/usr/bin/env ruby
require_relative '../../../pegasus/src/env'
require src_dir 'database'
require 'csv'
require 'json'
require 'set'

# Exports all results from HocSurvey2015 into a csv

columns = %w[
  email_s
  event_country_s
  experience_rating_s
  event_location_type_s
  school_teach_cs_s
  cs_interest_s
  cs_beyond_hoc_s
  age_range_ss
  longer_than_hour_s
  students_number_total_s
  students_number_girls_s
  students_number_ethnicity_s
  volunteer_participation_s
  teacher_how_heard_ss
  teacher_how_heard_other_s
  hoc_centerpiece_s
  event_improvement_s
]

# de-dupe repeat responses, take the latest valid one
# skip forms with 10k+ or non-integer students (any of the 3 columns)
# skip forms with more girls or minorities than total students
MAX_STUDENTS = 10000

emails = Set.new
dupes = 0
skipped = 0
skipped_emails = Set.new

# Empty string and nil return 0. Otherwise it should be an int or a string that parses to an int.
def parse_int_or_nil(value)
  return 0 if value.nil? || value == ''
  begin
    Integer(value)
  rescue ArgumentError
    nil
  end
end

def valid?(data)
  total = parse_int_or_nil data['students_number_total_s']
  girls = parse_int_or_nil data['students_number_girls_s']
  ethnic = parse_int_or_nil data['students_number_ethnicity_s']

  return false if total.nil? || girls.nil? || ethnic.nil?
  return false if total < 0 || girls < 0 || ethnic < 0
  return false if total > MAX_STUDENTS || girls > MAX_STUDENTS || ethnic > MAX_STUDENTS
  return false if girls > total || ethnic > total

  true
end

puts 'Exporting survey results...'
CSV.open('HocSurvey2015-results.csv', 'wb') do |csv|
  csv << columns
  DB[:forms].where(kind: 'HocSurvey2015').order(Sequel.desc(:created_at)).each do |form|
    if emails.include? form[:email]
      dupes += 1
      next
    end

    data = JSON.load form[:data]
    unless valid?(data)
      skipped += 1
      skipped_emails.add form[:email]
      next
    end

    emails.add form[:email]
    skipped_emails.delete form[:email]
    csv << columns.map{|column| data[column]}
  end
end

puts "#{emails.count} survey results exported."
puts "#{dupes} duplicate survey results ignored."
puts "#{skipped} survey results skipped for faulty numbers"
puts "#{skipped_emails.count} unique emails completely skipped for faulty numbers"
