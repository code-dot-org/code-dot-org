#!/usr/bin/env ruby
require_relative '../mailing-common/mailing-list-utils'
require_relative '../../../dashboard/config/environment'

# Contacts are in a CSV exported from google-form responses.
# Filter to send only to CSP and CSD interested teachers (not CSF),
# and exclude teachers who have already submitted teacher applications.
# This will be run again after new responses come in, so exclude duplicate emails

IMPORT_CSV_FILENAME = 'form_responses.csv'.freeze
EXPORT_CSV_FILENAME = 'contacts.csv'.freeze
TEMPLATE_NAME = '2017-01-05-go-beyond-an-hour'.freeze

COL_FIRST_NAME = 'First Name'.freeze
COL_LAST_NAME = 'Last Name'.freeze
COL_EMAIL = 'Email'.freeze
COL_COURSES = 'Courses'.freeze

PEGASUS_REPORTING_DB = sequel_connect CDO.pegasus_reporting_db_writer, CDO.pegasus_reporting_db_reader

previous_contacts = []
message_id = PEGASUS_REPORTING_DB[:poste_messages].where(name: TEMPLATE_NAME).map(:id).first
previous_contacts << PEGASUS_REPORTING_DB[:poste_deliveries].where(message_id: message_id).map(:contact_email) if message_id

count = 0
CSV.open(EXPORT_CSV_FILENAME, 'wb') do |results|
  # headers
  results << [:email, :name]

  CSV.foreach(IMPORT_CSV_FILENAME, headers: true) do |row|
    first_name = row[COL_FIRST_NAME]
    last_name = row[COL_LAST_NAME]
    email = row[COL_EMAIL].downcase
    courses = row[COL_COURSES]

    next unless email
    next if UNSUBSCRIBERS.include? email
    next if previous_contacts.include? email
    next unless courses.include?('CSP') || courses.include?('CSD')
    next if Pd::TeacherApplication.where(primary_email: email).or(Pd::TeacherApplication.where(secondary_email: email)).exists?

    full_name = "#{first_name} #{last_name}"
    results << [email, full_name]
    count += 1
  end
end

puts "#{count} contacts exported."
