#!/usr/bin/env ruby
# split a csv into samples
require 'csv'
require 'set'

if ARGV.count < 2
  puts <<EOS
Usage: #{$0} mailing-list.csv sample_size_1 sample_size_2 sample_size_3 ...
  Split a mailing-list.csv into experiment samples and a remainder. sample_size_1 is in %
Example:
  #{$0} mailing-list.csv 5 5 5
    Generates:
    mailing-list-experiment-1.csv mailing-list-experiment-2.csv mailing-list-experiment-3.csv with 5% each
    mailing-list-remainder.csv with 85%
EOS
  exit(-1)
end

def output_csv(out_path, columns, rows)
  CSV.open(out_path, 'wb', headers: true) do |output_csv|
    output_csv << columns
    rows.each do |row|
      output_csv << row
    end
  end
end

csv_path = ARGV[0]
sample_sizes = ARGV[1..-1].map(&:to_f)

input_rows = CSV.read(csv_path)

# shuffle and slice instead of sample because there's no sample!

input_columns = input_rows.shift # first row is the header

input_rows.shuffle!

# scale sample sizes to the input length
sample_sizes = sample_sizes.map {|percent| (percent.to_f / 100 * input_rows.count).to_i}

samples = sample_sizes.map do |sample_size|
  input_rows.slice!(0, sample_size)
end

basename = File.basename(csv_path, '.csv')

samples.each_with_index do |sample, i|
  output_csv("#{basename}-experiment-#{i+1}.csv", input_columns, sample)
end

output_csv("#{basename}-remainder.csv", input_columns, input_rows)
