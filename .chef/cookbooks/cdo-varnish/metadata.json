{
  "name": "cdo-varnish",
  "description": "Installs/Configures cdo-varnish",
  "long_description": "# cdo-varnish Cookbook\nInstalls and configures Varnish HTTP cache.\n\n## Requirements\nUbuntu 14.04\n\n#### apt packages installed (from PPA)\n- `varnish`\n- `libvmod-cookie`\n- `libvmod-header`\n\n## Attributes\n`node['cdo-varnish']['cookie_headers']`: Map of [cookie key] => [HTTP header] extractions.\nVarnish will extract the listed cookies into custom HTTP request headers before forwarding to the origin.\n\n## `HttpCache#config`\n\nProvides application-specific cache configuration used by Varnish and other\nHTTP cache layers.\n`pegasus` and `dashboard` keys each return a Hash in the following format:\n\n- `behaviors`: Array of behaviors. For a given HTTP request, `behaviors` is searched in-order\n  until the first matching `path` is found. If no `path` matches the request, the `default` behavior is used.\n  - `path`: Path string to match this behavior against.\n    A single `*`-wildcard is required, either an extension-wildcard `/*.jpg` or\n    path-wildcard `/api/*`.\n    - `path` can be a String or an Array. If it is an Array, a separate\n      behavior will be generated for each element.\n    - Paths match the CloudFront [path pattern](http://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/distribution-web-values-specify.html#DownloadDistValuesPathPattern)\n      syntax, with additional restrictions:\n      - `?` and `&` characters are not allowed.\n      - Only a single `*` wildcard is allowed at the start or end of the path pattern.\n  - `headers` (CloudFront-only): Cache objects based on additional HTTP request headers.\n    To include all headers (which disables caching entirely for the path), pass `['*']`.\n    To include no additional request headers in the cache key, pass `[]`.\n    - Note: Objects are already cached based on the `Host` header by default.\n    - Note: `headers` is currently only used by CloudFront, while Varnish\n      caches objects based on the `Vary` HTTP response header.\n  - `cookies`: A whitelist array of HTTP cookie keys to pass to the origin and\n    include in the cache key.\n    To whitelist all cookies for the path, pass `'all'`.\n    To strip all cookies for the path, pass `'none'`.\n  - `proxy` (Varnish-only): If specified, proxy all requests matching this path to the\n    specified origin. (Currently either `'dashboard'` or `'pegasus'`)\n    - Note: paths are not rewritten, so e.g., a GET request\n      to `server1.code.org/here/abc` configured with the behavior\n      `{path: '/here/*' proxy: 'dashboard' }` will proxy its request to\n      `server1-studio.code.org/here/abc`.\n    - Note: `proxy` is not yet implemented in CloudFront.\n      (Proxies will still work correctly when passed through to Varnish.)\n- `default`: Default behavior if no other path patterns are matched.\n  Uses the same syntax as `behaviors` except `path` is not required.\n\n## Running Tests\nThe integration tests run using [Test Kitchen](http://kitchen.ci/).\nSee `test/cookbooks/varnish_test/README.md` for more details.\n\nTo test the cookbook, first make sure Docker is installed and running locally,\nrun `bundle install` to install `test-kitchen` and dependencies, then run:\n- `bundle exec kitchen create` to create the machine image\n- `bundle exec kitchen converge` to install Chef and converge the cookbook in the\n  platform environment\n- `bundle exec kitchen verify` to run the integration test suite\n",
  "maintainer": "Code.org",
  "maintainer_email": "geoffrey@code.org",
  "license": "All rights reserved",
  "platforms": {
  },
  "dependencies": {
    "apt": ">= 0.0.0"
  },
  "recommendations": {
  },
  "suggestions": {
  },
  "conflicting": {
  },
  "providing": {
  },
  "replacing": {
  },
  "attributes": {
  },
  "groupings": {
  },
  "recipes": {
  },
  "version": "0.3.10",
  "source_url": "",
  "issues_url": ""
}