---
title: "View Applab Table"
theme: angular
angular: recordsApp
---

-channel_id = request.splat_path_info[1..-1].split('/').first
-table_name = request.splat_path_info[1..-1].split('/').last
-api_base_url = "/v3/shared-tables/#{channel_id}/#{table_name}"
-not_authorized! unless owns_channel? channel_id

%div{"ng-app" => "recordsApp", "ng-view" => ""}

:javascript
  'use strict';

  // Declare app level module which depends on filters, and services
  angular.module('recordsApp', [
    'ngRoute',
    'ngResource',
    'recordsApp.controllers',
    'recordsApp.services'
  ]).config(['$routeProvider', function($routeProvider) {
    $routeProvider.when('/',
                        {templateUrl: '/v3/edit-csp-table/records',
                         controller: 'RecordsController'});
    $routeProvider.otherwise({redirectTo: '/'});
  }]);

  // SERVICES
  var services = angular.module('recordsApp.services', []).
      value('version', '0.1');

  services.factory('recordsService', ['$resource',
    function($resource) {
      var Record = $resource("#{api_base_url}/:recordId", {recordId:'@id'}, {
        // default methods: see https://code.angularjs.org/1.2.21/docs/api/ngResource/service/$resource
        //  'get':    {method: 'GET'},
        //  'save':   {method: 'POST'},
        //  'query':  {method: 'GET', isArray:true},
        //  'remove': {method: 'DELETE'},
        //  'delete': {method: 'DELETE'} // don't use this because it doesn't work in IE9
      });

      return Record;
    }]);
  services.factory('tablesService', ['$resource',
    function($resource) {
      var Table = $resource("#{api_base_url}", {}, {
        deleteColumn: {
          method:'DELETE',
          url: "#{api_base_url}/column/:column_name"
        },
        renameColumn: {
          method:'POST',
          url: "#{api_base_url}/column/:column_name"
        },
        addColumn: {
          method: 'POST',
          url: "#{api_base_url}/column"
        },
        getMetadata: {
          method: 'GET',
          url: "#{api_base_url}/metadata"
        },
        setMetadata: {
          method: 'POST',
          url: "#{api_base_url}/metadata"
        }
      }, {});
      return Table;
    }]);

  // CONTROLLERS

  var controllers = angular.module('recordsApp.controllers', []).
      value('version', '0.1');

  controllers.controller('RecordsController', ['$scope', '$http', '$route', '$routeParams', '$location', '$window', 'recordsService', 'tablesService',
      function($scope, $http, $route, $routeParams, $location, $window, recordsService, tablesService) {
    $scope.records = recordsService.query();
    $scope.newColumnName = '';
    $scope.newRecord = new recordsService();
    $scope.tableName = "#{table_name}";
    $scope.channelId = "#{channel_id}";
    $scope.importing = false;
    $scope.fileSelected = false;
    $scope.reverse = true;

    // Attempt to get metadata. The first time through, if we don't have any
    // we will tell the serve to create some.
    function getMetadata(createIfNeeded) {
      $scope.tableMetadata = tablesService.getMetadata();
      $scope.tableMetadata.$promise.then(function (metadata) {
        if (metadata && metadata.column_list) {
          var columnInfo = JSON.parse(metadata.column_list);
          rationalizeColumnsAndRecords(columnInfo);
        } else if (createIfNeeded) {
          tablesService.setMetadata().$promise.then(function () {
            getMetadata(false);
          });
        }
      }).catch($scope.genericError);;
    }
    getMetadata(true);

    $scope.selectedFile = function() {
      $scope.$apply(function () {
        $scope.fileSelected = true;
      });
    }

    $scope.genericError = function(result) {
      $window.alert("An unexpected error occurred, please try again. If this keeps happening, try reloading the page.");
    }
    $scope.exportTable = function () {
      window.location.href = '/v3/export-shared-tables/' + $scope.channelId + '/' + $scope.tableName;
    }
    $scope.addColumn = function() {
      if ($scope.newColumnName === '') {
        return;
      }
      if (!columnExists($scope.newColumnName)) {
        new tablesService().$addColumn({column_name: $scope.newColumnName});
        $scope.columns.push(makeColumn($scope.newColumnName));
      }
      $scope.newColumnName = '';
    }

    $scope.saveRecord = function(record) {
      record.editing = undefined;
      var props = Object.keys(record);
      for (var i = 0; i < props.length; i++) {
        // Do not cast 'id' or properties added by angular.
        if (props[i].indexOf('$') === 0 || props[i] == 'id') continue;
        record[props[i]] = castValue(record[props[i]]);
      }
      record.$save(record).then(function(record) {
        // TODO(dave): remove once update API returns id as a number.
        record.id = parseInt(record.id);
      });
    }

    $scope.deleteRecord = function(record) {
      record.$remove(record);
      var index = $scope.records.indexOf(record);
      if (index > -1) {
        $scope.records.splice(index, 1);
      }
    }

    $scope.deleteTable = function () {
      if (confirm("Are you sure you want to delete '" + $scope.tableName + "'?")) {
        new tablesService().$remove(function () {
          window.location.href = "/v3/edit-csp-app/#{channel_id}";
        });
        $scope.deletingTable = true;
      }
    }

    $scope.saveNewRecord = function() {
      $scope.saveRecord($scope.newRecord);
      $scope.records.push($scope.newRecord);
      $scope.newRecord = new recordsService();
    }

    $scope.deleteNewRecord = function() {
      $scope.newRecord = new recordsService();
    }

    $scope.deleteColumn = function (column) {
      if (!confirm("Are you sure you want to delete '" + column.id + "'?")) {
        return
      }
      new tablesService().$deleteColumn({column_name: column.id});
      $scope.columns.splice($scope.columns.indexOf(column), 1);
      for (var i= 0; i < $scope.records.length; i += 1) {
        delete $scope.records[i][column.id];
      }
    }
    $scope.renameColumn = function (column) {
      if (columnExists(column.name)) {
        // If we're trying to rename to an existing column, ignore the change
        column.name = column.id;
        column.editing = false;
        return;
      }
      if (column.id != column.name) {
        new tablesService().$renameColumn({column_name: column.id, new_name: column.name});
        for (var i= 0; i < $scope.records.length; i += 1) {
          $scope.records[i][column.name] = $scope.records[i][column.id];
          delete $scope.records[i][column.id];
        }
      }
      column.id = column.name;
      column.editing = false;
    }
    $scope.coerceColumn = function (column, type) {
      $http({
        method:'POST',
        url: '/v3/coerce-shared-tables/#{channel_id}/#{table_name}',
        params: {column_name: column.id, type: type}
      }).then(function (response) {
        if (response.data !== 'true') {
          $scope.conversionError = 'Not all values in column ' + column.id +
            ' could be converted to type ' + type + '.';
        } else {
          $scope.conversionError = '';
        }
       $scope.records = recordsService.query();
      });
    }
    function castValue(val) {
      if (val == '') return undefined;
      if (val == 'true' || val === true) return true;
      if (val == 'false' || val === false ) return false;
      if (!isNaN(val)) return parseFloat(val);
      return val;
    }

    function columnExists(columnName) {
      return $scope.columns.some(function (col) {
        return col.id === columnName;
      });
    }

    /**
     * Give metadata about a set of columns, go through our records and see
     * if there are any missing columns. If there are, post to the server
     * to update our metadata
     */
    function rationalizeColumnsAndRecords(columnInfo) {
      // make sure we've loaded our records
      $scope.records.$promise.then(function (records) {
        var newColumns = [];
        records.forEach(function (record) {
          Object.keys(record).forEach(function (key) {
            if (key === 'id' || key === '$$hashKey') {
              return;
            }
            if (columnInfo.indexOf(key) === -1) {
              columnInfo.push(key);
              newColumns.push(key);
            }
          });
        });
        if (newColumns.length !== 0) {
          new tablesService().$setMetadata({ column_list: JSON.stringify(newColumns) });
        }
        $scope.columns = columnInfo.map(makeColumn);
      });
    }
  }]);
  function makeColumn(name) {
    /*
    We need to keep to references to the name for the case of
    renaming the column.  id represents the name of the column
    in the current data model.  name gets updated by the
    angularjs data binding during rename and gets updated after
    column name changes are commited.
    */
    return {
      id: name,
      name: name,
      editing: false,
    }
  }
