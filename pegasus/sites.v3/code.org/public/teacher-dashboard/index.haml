---
title: <%= I18n.t('dashboard_landing_title') %>
theme: angular
angular: teacherDashboard
---
- authentication_required!
- forbidden! unless dashboard_user[:user_type] == 'teacher'

%link(rel="stylesheet" type="text/css" href="/css/learn_tabs.css")
%link(rel="stylesheet" type="text/css" href="/style.css")
%link(rel='stylesheet' type='text/css' href='/css/page.css')

%div{'ng-view' => ''}

:javascript
  'use strict';

  // Declare app level module which depends on filters, and services
  angular.module('teacherDashboard', [
    'ngRoute',
    'ngResource',
    'teacherDashboard.controllers',
    'teacherDashboard.services',
    'teacherDashboard.directives'
  ]).

  // ROUTES

  config(['$routeProvider', function($routeProvider) {
    $routeProvider.when('/',                  {templateUrl: '/teacher-dashboard/landing'});
    $routeProvider.when('/sections',          {templateUrl: '/teacher-dashboard/sections',
                                               controller: 'SectionsController'});
    $routeProvider.when('/plan',              {templateUrl: '/teacher-dashboard/plan'});
    $routeProvider.when('/sections/:id',      {templateUrl: '/teacher-dashboard/section',
                                               controller: 'SectionDetailController'});
    $routeProvider.when('/sections/:sectionid/student/:studentid',
                                              {templateUrl: '/teacher-dashboard/student',
                                               controller: 'StudentDetailController'});
    $routeProvider.when('/sections/:id/print_signin_cards', {templateUrl: '/teacher-dashboard/signin_cards',
                                               controller: 'SectionDetailController'});
    $routeProvider.when('/sections/:id/:tab', {templateUrl: '/teacher-dashboard/section',
                                               controller: 'SectionDetailController'});
    $routeProvider.otherwise({redirectTo: '/sections'});
  }]);

  // DIRECTIVES
  var directives = angular.module('teacherDashboard.directives', []).
    value('version', '0.1');

  directives.directive('teacherNav', ['$location', '$routeParams', function($location, $routeParams) {
    return {
      templateUrl: 'teacher-dashboard/nav',
      controller: function($scope) {
        var selectedSection = $scope.selectedSection = $scope.section || null;

        $scope.sectionNavigate = function(section) {
          if (section && section.id) {
            $location.path('/sections/' + section.id)
          } else {
            $location.path('/sections')
          }
        };
      }
    };
  }]);


  // SERVICES

  var services = angular.module('teacherDashboard.services', []).
    value('version', '0.1');

  // Section service. see sites.v3/code.org/routes/v2_section_routes.rb
  services.factory('sectionsService', ['$resource',
    function($resource){
      return $resource('/v2/sections/:id', {}, {
      // default methods: see https://code.angularjs.org/1.2.21/docs/api/ngResource/service/$resource
      //  'get':    {method:'GET'},
      //  'save':   {method:'POST'},
      //  'query':  {method:'GET', isArray:true},
      //  'remove': {method:'DELETE'},
      //  'delete': {method:'DELETE'}
         update: {method:'POST', url: 'v2/sections/:id/update'},
         addStudents: {method:'POST', url:'/v2/sections/:id/students', isArray: true},
         removeStudent: {method:'DELETE', url:'/v2/sections/:id/students/:studentId'},
      });
    }]);

  services.factory('studentsService', ['$resource',
    function($resource){
      return $resource('/v2/students/:id', {}, {
      // default methods: see https://code.angularjs.org/1.2.21/docs/api/ngResource/service/$resource
      //  'get':    {method:'GET'},
      //  'save':   {method:'POST'},
      //  'query':  {method:'GET', isArray:true},
      //  'remove': {method:'DELETE'},
      //  'delete': {method:'DELETE'}
         update: {method:'POST', url: 'v2/students/:id/update'},
      });
    }]);

  // CONTROLLERS

  var app = angular.module('teacherDashboard.controllers', []);

  app.controller('SectionsController', ['$scope', '$location', '$window', 'sectionsService',
                                       function($scope, $location, $window, sectionsService){
    $scope.sectionsLoaded = false;

    $scope.course_list = #{DashboardSection::VALID_COURSES.to_json};

    $scope.sections = sectionsService.query();

    $scope.sections.$promise.then(function( sections ){
      $scope.sectionsLoaded = true;
    });

    $scope.edit = function(section) {
      section.editing = true;
    };

    $scope.genericError = function(result) {
      $window.alert("An unexpected error occurred, please try again. If this keeps happening, try reloading the page.");
    };

    $scope.save = function(section) {
      if (section.id) { // update existing
        sectionsService.update({id: section.id}, section).$promise.then(
          function(result_section) {
            $scope.sections[$scope.sections.indexOf(section)] = result_section;
          }
        ).catch($scope.genericError);
      } else { // save new
        sectionsService.save(section).$promise.then(
          function(result_section) {
            $scope.sections[$scope.sections.indexOf(section)] = result_section;
          }
        ).catch($scope.genericError);
      }
    };

    $scope.confirm_delete = function(section) {
      section.confirmDelete = true;
    };

    $scope.del = function(section) {
      sectionsService.remove(section).$promise.then(
        function() {
          $scope.sections.splice($scope.sections.indexOf(section), 1); // remove from array
          section.confirmDelete = false;
        }
      ).catch(
        function() { $window.alert("An unexpected error occurred, please try again. If this keeps happening, try reloading the page.") }
      );
    };

    $scope.cancel = function(section) {
      if (section.id) {
        section.editing = false;
      } else {
        $scope.sections.splice($scope.sections.indexOf(section), 1); // remove from array
      }
    };

    $scope.new_section = function() {
      $scope.sections.unshift({editing: true, login_type: 'word'});
    };
  }]);

  app.controller('StudentDetailController', ['$scope', '$routeParams', 'studentsService', 'sectionsService',
                                             function($scope, $routeParams, studentsService, sectionsService) {
    $scope.section = sectionsService.get({id: $routeParams.sectionid});
    $scope.student = studentsService.get({id: $routeParams.studentid});

    $scope.studentProgressUrl = '/dashboardapi/student_progress/' +
                                $routeParams.sectionid + '/' + $routeParams.studentid;
  }]);

  app.controller('LandingController', ['$scope', '$routeParams', 'studentsService', 'sectionsService',
                                       function($scope, $routeParams, studentsService, sectionsService) {

    $scope.init_progress = function() {
      progressLoaded();
    };

    $scope.biggestSection = null;

    sectionsService.query().$promise.then(
      function( sections ) {
        var section = null;
        var highestNumStudents = -1;
        for (var s = 0; s < sections.length; s++) {
          var numStudents = sections[s].students.length;
          if (numStudents > highestNumStudents) {
            section = sections[s];
            highestNumStudents = numStudents;
          }
        }

        if (section !== null) {
          $scope.biggestSection = section;
          $scope.sectionProgressUrl = '/dashboardapi/section_progress/' + section.id + "?nocache=" + $.now();
        }
      }
    );

    studentsService.query().$promise.then(
      function( allStudents ) {
        for (var s = 0; s < allStudents.length; s++)
        {
          var student = allStudents[s];
          if (student.prize_earned)
          {
            var name = student.name;
            name = encodeURI(name);
            name = name.replace(/'/g, "%27"); //encode '
            name = name.replace(/"/g, "%22"); //encode "
            $('#printcertificatesform').append("<input type='hidden' name='names[]', value='" + name + "'/>");
          }
        }
      }
    );
  }]);

  app.controller('SectionDetailController', ['$scope', '$routeParams', '$window', 'sectionsService', 'studentsService',
                                             function($scope, $routeParams, $window, sectionsService, studentsService) {
    $scope.section = sectionsService.get({id: $routeParams.id});
    $scope.sections = sectionsService.query();

    $scope.genericError = function(result) {
      $window.alert("An unexpected error occurred, please try again. If this keeps happening, try reloading the page.");
    };

    $scope.section.$promise.then(
      function( section ){
        if (!$scope.tab) {
          $scope.tab = ($scope.section.students.length > 0) ? 'progress': 'manage';
        }
      }
    );

    $scope.tab = $routeParams.tab;

    $scope.sectionProgressUrl = '/dashboardapi/section_progress/' + $routeParams.id + "?nocache=" + $.now();

    // the ng-select in the nav compares by reference not by value, so we can't just set
    // selectedSection to section, we have to find it in sections.
    $scope.sections.$promise.then(
      function( sections ){
        $scope.selectedSection = $.grep(sections, function(section) { return (section.id == $routeParams.id);})[0];
      }
    );

    $scope.section.$promise.catch($scope.genericError);
    $scope.sections.$promise.catch($scope.genericError);

    $scope.age_list = #{((4..20).to_a << '21+').inspect};

    $scope.gender_list = {f: '#{I18n.t('dashboard_students_female')}', m: '#{I18n.t('dashboard_students_male')}'};

    $scope.bulk_import = {editing: false, students: ''};

    $scope.edit = function(student) {
      student.editing = true;
    };

    $scope.init_progress = function() {
      progressLoaded();
    };

    $scope.resetSecrets = function(student) {
      var newStudent = studentsService.update({id: student.id}, {secrets: 'reset'});
      newStudent.$promise.then(
        function(student) {
          student.showing_password = true;
        }
      );

      newStudent.$promise.catch($scope.genericError);
      $scope.section.students[$scope.section.students.indexOf(student)] = newStudent;
    };

    $scope.save = function(students) {
      if (!$.isArray(students)) {
        return $scope.save([students]); // heh
      }

      var newStudents = [];
      var modifiedStudents = [];

      $.each(students, function(index, student) {
        if (student.editing || student.editing_password) {
          if (student.id) {
            modifiedStudents.push(student);
          } else {
            newStudents.push(student);
          }
        }
      });

      // create new students
      if (newStudents && newStudents.length > 0) {
        // remove 'new' students from array
        $.each(newStudents, function(index, student) {
          $scope.section.students.splice($scope.section.students.indexOf(student), 1);
        });

        // add the results from the service to the array
        sectionsService.addStudents({id: $scope.section.id}, newStudents, function(resultStudents) {
          $.each(resultStudents, function(index, student) {
            $scope.section.students.unshift(student);
          });
        }).$promise.catch($scope.genericError);
      }

      // update existing students
      $.each(modifiedStudents, function(index, student) {
        studentsService.update({id: student.id}, student).$promise.then(
          function(result_student) {
            result_student.editing = false;
            $scope.section.students[$scope.section.students.indexOf(student)] = result_student;
          }
        ).catch($scope.genericError);
      });
   };

   $scope.confirm_delete = function(student) {
     student.confirmDelete = true;
   };

    $scope.del = function(student) { // note -- IE doesn't like it when you name things 'delete'
      sectionsService.removeStudent({id: $scope.section.id, studentId: student.id}).$promise.then(
        function() {
          $scope.section.students.splice($scope.section.students.indexOf(student), 1); // remove from array
        }
      ).catch($scope.genericError);
    };

    $scope.cancel = function(student) {
      if (student.id) {
        student.editing = false;
      } else {
        $scope.section.students.splice($scope.section.students.indexOf(student), 1); // remove from array
      }
    };

    $scope.new_student = function() {
      $scope.section.students.unshift({editing: true});
    };

    $scope.clear_bulk_import = function() {
      $scope.bulk_import.editing = false;
      $scope.bulk_import.students = '';
    };

    $scope.add_bulk_import = function() {
      var student_names = $scope.bulk_import.students.split("\n");
      for (var i = 0; i < student_names.length; i++) {
        var student_name = student_names[i];
        student_name = student_name.trim();
        if (student_name.length > 0) {
          $scope.section.students.unshift({editing: true, name: student_name});
        }
      }
      $scope.clear_bulk_import();
    };

    $scope.editingAny = function(things) {
      if (!things) {
        return false;
      }
      for (var i = 0; i < things.length; i++) {
        if (things[i].editing) {
          return true;
        }
      }
      return false;
    }

    $scope.editingAll = function(things) {
      if (!things) {
        return false;
      }
      for (var i = 0; i < things.length; i++) {
        if (!things[i].editing) {
          return false;
        }
      }
      return true;
    }

    $scope.print = function() {
      $window.print();
    };

    $scope.progressLoaded = false;

    $scope.progress_loaded = function() {
      $scope.progressLoaded = true;
    }

  }]);
