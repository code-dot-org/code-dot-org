---
theme: angular
angular: opsApp
title: "Ops Dashboard"
---
- authentication_required!
- forbidden! unless have_permission?('district_contact') || have_permission?('facilitator') || dashboard_user[:admin]
- require 'cdo/workshop_constants'

%script{type: "text/javascript", src: "/js/sifter.min.js"}
%script{type: "text/javascript", src: "/js/microplugin.min.js"}
%script{type: "text/javascript", src: "/js/selectize.min.js"}
%script{type: "text/javascript", src: "/js/selectize-fast-click.js"}
%script{type: "text/javascript", src: "/shared/js/PapaParse-4.1.0/papaparse.min.js"}
%script{type: "text/javascript", src: "/js/bootstrap-datepicker.js"}
%link{rel: "stylesheet", type: "text/css", href: "/css/datepicker3.css"}/
%link(rel='stylesheet' type='text/css' href='/css/learn_tabs.css')

%script{type: "text/javascript", src: "/js/angular-selectize.js"}
%link{rel: "stylesheet", type: "text/css", href: "/css/selectize.bootstrap3.css"}/
%div{'ng-view' => ''}
:javascript
  'use strict';

  // Declare app level module which depends on filters, and services
  angular.module('opsApp', [
    'ngRoute',
    'ngResource',
    'opsApp.controllers',
    'opsApp.services',
    'opsApp.filters',
    'selectize'
  ]).config(['$routeProvider', function($routeProvider) {
    $routeProvider.when('/',                                          {templateUrl: '/ops-dashboard/landing'});
    $routeProvider.when('/districts',                                 {templateUrl: '/ops-dashboard/districts',       controller: 'DistrictsController'});
    $routeProvider.when('/workshops',                                 {templateUrl: '/ops-dashboard/workshops',       controller: 'WorkshopsController'});
    $routeProvider.when('/workshops/new',                             {templateUrl: '/ops-dashboard/workshop-edit',   controller: 'WorkshopController'});
    $routeProvider.when('/workshops/:id/edit',                        {templateUrl: '/ops-dashboard/workshop-edit',   controller: 'WorkshopController'});
    $routeProvider.when('/workshops/:workshopid/attendance',          {templateUrl: '/ops-dashboard/attendance',      controller: 'AttendanceController'});
    $routeProvider.when('/workshops/:workshopid/attendance-info',     {templateUrl: '/ops-dashboard/attendance-info', controller: 'AttendanceController'});
    $routeProvider.when('/teacher-cohorts',                           {templateUrl: '/ops-dashboard/cohorts',         controller: 'CohortsController'});
    $routeProvider.when('/teacher-cohorts/new',                       {templateUrl: '/ops-dashboard/cohort-edit',     controller: 'CohortController'});
    $routeProvider.when('/teacher-cohorts/:id/edit',                  {templateUrl: '/ops-dashboard/cohort-edit',     controller: 'CohortController'});
    $routeProvider.when('/teacher-cohorts/:id/teachers',              {templateUrl: '/ops-dashboard/cohort-teachers', controller: 'CohortTeachersController'});
    $routeProvider.otherwise({redirectTo: '/'});
  }]).config(['$httpProvider', function($httpProvider) {
    // X-Requested-With header required for CSRF requests protected by Rack::Protection::JsonCsrf included by Sinatra.
    // Angular originally set this, but removed it in a breaking change in v1.4 because it is "rarely used in practice":
    // https://github.com/angular/angular.js/commit/3a75b1124d062f64093a90b26630938558909e8d
    $httpProvider.defaults.headers.common["X-Requested-With"] = 'XMLHttpRequest';
  }]);

  // SERVICES
  var services = angular.module('opsApp.services', []).
      value('version', '0.1');

  services.factory('districtsService', ['$resource',
    function($resource) {
      var District = $resource('/dashboardapi/districts/:id', {}, {
        // default methods: see https://code.angularjs.org/1.2.21/docs/api/ngResource/service/$resource
        //  'get':    {method: 'GET'},
        //  'save':   {method: 'POST'},
        //  'query':  {method: 'GET', isArray:true},
        //  'remove': {method: 'DELETE'},
        //  'delete': {method: 'DELETE'} // don't use this because it doesn't work in IE9
        update: {method:'PUT', url: '/dashboardapi/districts/:id'}
      });

      return District;
    }]);
  services.factory('programTypesService', [
    function() {
      return #{WorkshopConstants::PROGRAM_TYPES.to_json};
  }]);
  services.factory('phaseInfoService', [
    function() {
      return #{WorkshopConstants::PHASES.to_json};
  }]);
  services.factory('workshopsService', ['$resource',
    function($resource){
      var Workshop = $resource('/dashboardapi/workshops/:id', {}, {
        // default methods: see https://code.angularjs.org/1.2.21/docs/api/ngResource/service/$resource
        //  'get':    {method:'GET'},
        //  'save':   {method:'POST'},
        //  'query':  {method:'GET', isArray:true},
        //  'remove': {method:'DELETE'},
        //  'delete': {method:'DELETE'}
        update: {method:'PUT', url: '/dashboardapi/workshops/:id'}
      });

      return Workshop;
    }]);

  services.factory('segmentsService', ['$resource',
    function($resource){
      var Segment = $resource('/dashboardapi/workshops/:id/segments', {}, {
        // default methods: see https://code.angularjs.org/1.2.21/docs/api/ngResource/service/$resource
        //  'get':    {method:'GET'},
        //  'save':   {method:'POST'},
        //  'query':  {method:'GET', isArray:true},
          'remove': {method:'DELETE', url:'/dashboardapi/segments/:id'},
        //  'delete': {method:'DELETE'}
      });

      return Segment;
    }]);

  services.factory('cohortsService', ['$resource',
    function($resource){
      var Cohort = $resource('/dashboardapi/cohorts/:id', {}, {
        // default methods: see https://code.angularjs.org/1.2.21/docs/api/ngResource/service/$resource
        //  'get':    {method:'GET'},
        //  'save':   {method:'POST'},
        //  'query':  {method:'GET', isArray:true},
        //  'remove': {method:'DELETE'},
        //  'delete': {method:'DELETE'}
        update: {method:'PUT', url: '/dashboardapi/cohorts/:id'},
        removeTeacher: {method:'DELETE', url: 'dashboardapi/cohorts/:id/teachers/:teacher_id'}
      });

      return Cohort;
    }]);

  services.factory('teachersService', ['$resource',
    function($resource){
      var Teacher = $resource('/dashboardapi/workshops/:workshopid/teachers', {}, {
        // default methods: see https://code.angularjs.org/1.2.21/docs/api/ngResource/service/$resource
        //  'get':    {method:'GET'},
        //  'save':   {method:'POST'},
        //  'query':  {method:'GET', isArray:true},
        //  'remove': {method:'DELETE'},
        //  'delete': {method:'DELETE'}
      });

      return Teacher;
    }]);

  services.factory('attendancesService', ['$resource',
    function($resource){
      var Attendance = $resource('/dashboardapi/segments/:segmentid/attendance', {}, {
        // default methods: see https://code.angularjs.org/1.2.21/docs/api/ngResource/service/$resource
        //  'get':    {method:'GET'},
        //  'save':   {method:'POST'},
        //  'query':  {method:'GET', isArray:true},
          remove: {method:'DELETE', url:'/dashboardapi/attendance/:attendanceid'},
        //  'delete': {method:'DELETE'}
        update: {method:'PATCH', url:'/dashboardapi/attendance/:attendanceid'}
      });

      return Attendance;
    }]);
  // FILTERS
  var filters = angular.module('opsApp.filters', []).value('version', '0.1');

  filters.filter('utc', function() {
    return function(val){
      var date = new Date(val);
       return new Date(date.getUTCFullYear(),
                       date.getUTCMonth(),
                       date.getUTCDate(),
                       date.getUTCHours(),
                       date.getUTCMinutes(),
                       date.getUTCSeconds());
    };
  });

  filters.filter('withinDateRange', function() {
    return function(workshops, dateRangeStart, dateRangeEnd) {
      if (dateRangeStart || dateRangeEnd) {
        var filtered = [];
        workshops.forEach(function (workshop) {
          for (var i = 0; i < workshop.segments.length; i++) {
            if (
                (workshop.segments[i].start.split('T')[0] <= this.dateRangeEnd && workshop.segments[i].end.split('T')[0] >= this.dateRangeStart) ||
                (workshop.segments[i].start.split('T')[0] <= this.dateRangeEnd && !this.dateRangeStart) ||
                (workshop.segments[i].end.split('T')[0] >= this.dateRangeStart && !this.dateRangeEnd)
               )
            {
              filtered.push(workshop);
              break;
            }
          }
        }, this);
        return filtered;
      } else {
        return workshops;
      }
    };
  });

  filters.filter('matchingProgramType', function() {
    return function(cohorts, workshopProgramType) {
      if (workshopProgramType) {
        var filtered = [];
        cohorts.forEach(function (cohort) {
          if (cohort.program_type == workshopProgramType) {
            filtered.push(cohort);
          }
        }, this);
        return filtered;
      } else {
        return cohorts;
      }
    };
  });

  filters.filter('containsSubstring', function() {
    return function(cohorts, query) {
      if (query) {
        var filtered = [];
        cohorts.forEach(function (cohort) {
          if (cohort.name.toUpperCase().indexOf(query.toUpperCase()) != -1) {
            filtered.push(cohort);
          }
        }, this);
        return filtered;
      } else {
        return cohorts;
      }
    };
  });

  filters.filter('specificDistrict', function() {
    return function(cohorts, searchDistrict) {
      if (searchDistrict && searchDistrict !== '') {
        var filtered = [];
        cohorts.forEach(function (cohort) {
          for (var i = 0; i < cohort.districts.length; i++) {
            if (searchDistrict.id === cohort.districts[i].id) {
              filtered.push(cohort);
              break;
            }
          }
        });
        return filtered;
      } else {
        return cohorts;
      }
    };
  });

  // CONTROLLERS

  var controllers = angular.module('opsApp.controllers', []).
      value('version', '0.1');

  controllers.controller('DistrictsController', ['$scope', '$route', '$routeParams', '$location', '$window', 'districtsService',
    function($scope, $route, $routeParams, $location, $window, districtsService) {
      $scope.districtsLoaded = false;

      $scope.districts = districtsService.query();

      $scope.del = function (district) {
        $scope.districts.splice($scope.districts.indexOf(district), 1); // remove from array
        districtsService.remove({id: district.id}); // service call
      };

      $scope.save = function (district) {
        if (district.id) {
          districtsService.update({id: district.id}, {district: district}).$promise.then(
            function(result_district) {
              $scope.districts[$scope.districts.indexOf(district)] = result_district;
                districtsService.query().$promise.then(function (districts) {
                $scope.districts = districts;
              });
            }
          ).catch($scope.genericError);
        } else {
          districtsService.save({district: district}).$promise.then(
            function(saved) {
              $scope.district = null; /* just in case it has been modified on server */
              districtsService.query().$promise.then(function (districts) {
                $scope.districts = districts;
              });
            }
          );
        }
      };

      $scope.districts.$promise.then(function(districts) {
        $scope.districtsLoaded = true;
      }).catch($scope.genericError);
  }]);

  controllers.controller('WorkshopsController', ['$scope', '$route', '$routeParams', '$location', '$window', 'workshopsService', 'cohortsService', 'programTypesService',
    function($scope, $route, $routeParams, $location, $window, workshopsService, cohortsService, programTypesService) {
      $scope.workshopsLoaded = false;

      $scope.workshops = workshopsService.query();
      $scope.cohorts = cohortsService.query();
      $scope.program_types = programTypesService;

      $scope.cohortName = function (cohortId) {
        if ($scope.cohorts) {
          var name = "";
          $scope.cohorts.forEach(function (e) {
            if (e.id == cohortId) {
              name = e.name;
            }
          });
          if (name != "") {
            return name;
          }
        }
        return "N/A";
      };

      $scope.load = function() {
        $('.date').on('focus click', function() {
          $(this).datepicker({
            autoclose: true,
            todayHighlight: true,
            pickTime: false

          });
        });
      }
    }
  ]);

  controllers.controller('AttendanceController', ['$scope', '$route', '$routeParams', '$location', '$window', 'workshopsService', 'segmentsService', 'teachersService', 'attendancesService', 'districtsService',
    function($scope, $route, $routeParams, $location, $window, workshopsService, segmentsService, teachersService, attendancesService, districtsService) {
      $scope.districtsLoaded = false;

      $scope.workshop = workshopsService.get({id: $routeParams.workshopid});
      $scope.districts = districtsService.query();

      $scope.getAttendanceFromTeacherAndSegment = function (teacher_id, attendancesForSingleSegment) {
        var attendance = 'unrecorded';
        attendancesForSingleSegment.forEach(function (e) {
          if (teacher_id == e.teacher_id) {
            attendance = e.status;
          }
        });
        return attendance;
      };

      $scope.saveWorkshop = function (workshop) {
        if (workshop.id) {
          workshopsService.update({id: workshop.id}, {workshop: workshop}).$promise.then(
            function(result_workshop) {
              $scope.workshop.unexpected_teachers[$scope.workshop.unexpected_teachers.indexOf(workshop.unexpected_teacher)] = result_workshop.unexpected_teachers;
              workshopsService.get({id: $routeParams.workshopid}).$promise.then(function (workshop) {
                $scope.workshop = workshop;
              });
            }
          ).catch($scope.genericError);
        }
      };

      $scope.save = function (attendance) {
        if (attendance.id) {
          attendancesService.update({attendanceid: attendance.id}, {workshop_attendance: attendance}, function (response) {
            this.attendance.saved = false;
            this.attendance.updated = true;
            this.attendance.cleared = false;
          }.bind(this));
        } else {
          attendancesService.save({segmentid: attendance.segment_id}, {workshop_attendance: attendance}, function (response) {
            this.attendance = response;
            this.attendance.saved = true;
            this.attendance.updated = false;
            this.attendance.cleared = false;
          }.bind(this));
        }
      };

      $scope.clearAttendance = function (attendance) {
        attendance.status = null;
        attendance.notes = null;

        attendance.saved = false;
        attendance.updated = false;
        attendance.cleared = true;

        attendancesService.update({attendanceid: attendance.id}, {workshop_attendance: attendance});
      }
  }]);

  controllers.controller('CohortsController', ['$scope', '$route', '$routeParams', '$location', '$window', 'workshopsService', 'cohortsService', 'districtsService', 'programTypesService',
    function($scope, $route, $routeParams, $location, $window, workshopsService, cohortsService, districtsService, programTypesService) {
      $scope.hasCohorts = false;
      $scope.cohorts = cohortsService.query();
      $scope.program_types = programTypesService;

      $scope.cohorts.$promise.then(function(cohorts) {
        $scope.hasCohorts = true;
      });

      $scope.districts = districtsService.query();

      $scope.confirm_delete = function(cohort) {
        cohort.confirmDelete = true;
      };

      $scope.del = function(cohort) {
        $scope.cohorts.splice($scope.cohorts.indexOf(cohort), 1); // remove from array
        cohortsService.remove({id: cohort.id}); // service call
        cohort.confirmDelete = false;
      };

      $scope.setSortOrder = function(new_sort, current_sort) {
        return (new_sort == current_sort) ? '-' + current_sort : new_sort;
      }
    }
  ]);

  controllers.controller('CohortController', ['$scope', '$route', '$routeParams', '$location', '$window', 'workshopsService', 'cohortsService', 'districtsService', 'programTypesService',
    function($scope, $route, $routeParams, $location, $window, workshopsService, cohortsService, districtsService, programTypesService) {

    $scope.scripts = #{ DASHBOARD_DB[:scripts].select(:id, :name).all.to_json};


      $scope.newDistrict = function() {
        $scope.cohort.districts.push({
          id: '',
          max_teachers: ''
        });
      };

      if ($routeParams.id) {
        $scope.cohort = cohortsService.get({id: $routeParams.id});

        $scope.cohort.$promise.then(function(cohort){
          cohort.program_type_disabled = cohort.program_type ? true : false;
          if (!$scope.cohort.districts || $scope.cohort.districts.length < 1) {
            $scope.cohort.districts = [];
            $scope.newDistrict();
          }
        });
      } else {
        $scope.cohort = {};
        $scope.cohort.districts = [];
        $scope.newDistrict();
      }

      $scope.districts = districtsService.query();
      $scope.program_types = programTypesService;

      $scope.save = function(cohort) {
        if (cohort.id) { // existing
          cohortsService.update({id: cohort.id}, {cohort: cohort}, function() {
            $location.path("/teacher-cohorts");
          });
        } else { // new
          cohortsService.save({cohort: cohort}, function() {
            $location.path("/teacher-cohorts");
          });
        }
      };

      $scope.cancel_edit = function() {
        $location.path("/teacher-cohorts");
      };
    }
  ]);

  controllers.controller('CohortTeachersController', ['$scope', '$route', '$routeParams', '$location', '$window', 'workshopsService', 'cohortsService', 'districtsService', 'programTypesService',
    function($scope, $route, $routeParams, $location, $window, workshopsService, cohortsService, districtsService, programTypesService) {
      $scope.order = '[ops_last_name, ops_first_name]';
      $scope.teachers_bulk_import = {uploading: false};
      $scope.newTeachers = [];

      // error handling
      $scope.genericError = function(result) {
        $window.alert("An unexpected error occurred, please try again. If this keeps happening, try reloading the page.");
      };

      $scope.cohort = cohortsService.get({id: $routeParams.id});

      $scope.cohort.$promise.then(function(cohort) {
      });

      // This depends on HTML5 File object so does not work in IE9. This
      // particular feature is only used by the ops team who all use Chrome.
      $scope.onFileSelect = function(input) {
        var files = input.files; // FileList object

        // files is a FileList of File objects. List some properties.
        if (files && files.length > 0) {
          Papa.parse(files[0], {
            header: true,
            complete: function(results) {
              if (results.data) {
                for (var i = 0; i < results.data.length; i++) {
                  if ($scope.isBlankObject(results.data[i])) {
                    continue; // skip blank lines
                  }
                  // turn on editing
                  results.data[i].editing = true;
                  // look up the district by name
                  var district_name = results.data[i].district;
                  delete results.data[i].district;

                  for (var j = 0; j < $scope.cohort.districts.length; j++) {
                    if ($scope.cohort.districts[j].name == district_name) {
                      results.data[i].district = $scope.cohort.districts[j];
                    }
                  }
                  $scope.newTeachers.push(results.data[i]);
                }
                $scope.$apply();
              }
            }
          });
        }
      };

      $scope.isBlankObject = function(obj) {
        // all values are empty string or null
        var values = Object.keys(obj).map(function (key) { return obj[key];});
        return $.grep(values, function(value) {return (value !== null && value !== "");}).length == 0
      };

      $scope.isAfterCutoff = function() {
        if (#{ !dashboard_user[:admin]} && $scope.cohort.cutoff_date) {
          return "#{ Date.today.to_s}" > $scope.cohort.cutoff_date;
        } else {
          return false;
        }
      };

      $scope.editingAny = function(things) {
        if (!things) {
          return false;
        }
        return $.grep(things, function(thing) {return thing.editing;}).length > 0
      };

      $scope.edit = function(teacher) {
        teacher.editing = true;
      };

      $scope.confirm_delete = function(teacher) {
       teacher.confirmDelete = true;
      };

      $scope.del = function(teacher) { // note -- IE doesn't like it when you name things 'delete'
        cohortsService.removeTeacher({id: $scope.cohort.id, teacher_id: teacher.id}).$promise.then(
          function() {
            $scope.cohort.teachers.splice($scope.cohort.teachers.indexOf(teacher), 1);
            $scope.cohort.deleted_teachers.push(teacher);
          }
        ).catch($scope.genericError);
      };

      $scope.undelete = function(teacher) {
        $scope.cohort.teachers.push(teacher);
        $scope.cohort.deleted_teachers.splice($scope.cohort.teachers.indexOf(teacher), 1);
        teacher.editing = true;
      };

      $scope.cancel = function(teacher) {
        if (teacher.id) {
          teacher.editing = false;
        } else {
          $scope.newTeachers.splice($scope.newTeachers.indexOf(teacher), 1); // remove from array
        }
      };

      $scope.new_teacher = function() {
        $scope.newTeachers.unshift({editing: true});
      };

      $scope.saveAll = function(cohort) {

        cohort.teachers = cohort.teachers.concat($scope.newTeachers);

        for (var i = 0; i < cohort.teachers.length; i++) {
          if (typeof cohort.teachers[i].district == 'undefined') {
            cohort.teachers[i].district_id = null;
          }
          else {
            cohort.teachers[i].district_id = cohort.teachers[i].district.id;
          }
        }

        cohortsService.update({id: cohort.id}, {cohort: cohort}).$promise.then(
          function() {
            $scope.cohort = cohortsService.get({id: $routeParams.id});
            $scope.newTeachers = [];
          }
        ).catch($scope.genericError);
      };

      $scope.countTeachersFromDistrict = function(district) {
        var count = 0;
        if (district && district.id) {
          for (var i = 0; i < $scope.cohort.teachers.length; i++) {
            if ($scope.cohort.teachers[i].district &&
                $scope.cohort.teachers[i].district.id === district.id) {
              count++;
            }
          }
        }
        return count;
      };

      $scope.isTooManyTeachers = function() {
        if (!$scope.cohort.districts) {
          return false;
        }

        for (var i = 0; i < $scope.cohort.districts.length; i++) {
          var district = $scope.cohort.districts[i];
          if ($scope.countTeachersFromDistrict(district) > district.max_teachers) {
            return true;
          }
        }
        return false;
      };

    }
  ]);

  controllers.controller('WorkshopController', ['$scope', '$route', '$routeParams', '$location', '$window', 'segmentsService', 'workshopsService', 'cohortsService', 'programTypesService', 'phaseInfoService',
    function($scope, $route, $routeParams, $location, $window, segmentsService, workshopsService, cohortsService, programTypesService, phaseInfoService) {
      if ($routeParams.id) {
        $scope.workshop = workshopsService.get({id: $routeParams.id});
        $scope.workshopSegments = segmentsService.query({id: $routeParams.id});
      }
      $scope.program_types = programTypesService;
      $scope.phases = phaseInfoService;
      $scope.cohorts = cohortsService.query();
      $scope.cohortName = function (cohortId) {
        if ($scope.cohorts) {
          var name = "";
          $scope.cohorts.forEach(function (e) {
            if (e.id == cohortId) {
              name = e.name;
            }
          });
          if (name != '') {
            return name;
          }
        }
        return 'N/A';
      };

      $scope.editingAny = function(things) {
        if (!things) {
          return false;
        }
        return $.grep(things, function(thing) {return thing.editing;}).length > 0
      };

      $scope.newSegment = function() {
        $scope.workshopSegments.unshift({editing: true});
      };

      $scope.save = function (workshop) {
        var saveConfirmation = $('#save-confirmation');
        if (workshop.id) {
          workshopsService.update({id: workshop.id}, {workshop: workshop});
          saveConfirmation.css('display', 'inline');
          saveConfirmation.fadeOut(2500);
        } else {
          var newWorkshop = new workshopsService($scope.workshop);
          newWorkshop.$save().then(
            function(saved) {
              $scope.workshop = saved; /* just in case it has been modified on server */
              workshopsService.query().$promise.then(function (workshops) {
                $scope.workshops = workshops;
                saveConfirmation.css('display', 'inline');
                saveConfirmation.fadeOut(2500);
                window.location = '#/workshops/' + $scope.workshop.id + '/edit';
              });
            }
          );
        }
      };

      $scope.saveSegment = function (segment) {
        $scope.segment.start = $scope.segment.date + "T" + $scope.segment.startTime;
        $scope.segment.end = $scope.segment.date + "T" + $scope.segment.endTime;
        var newSegment = new segmentsService($scope.segment);
        newSegment.$save({id: $scope.workshop.id}).then(
          function(saved) {
            $scope.segment = null;
            segmentsService.query({id: $routeParams.id}).$promise.then(function (segments) {
              $scope.workshopSegments = segments;
              $scope.workshops = workshops;
            });
          }
        );
      };
    }
  ]);
