---
title: Poste Stats
---
- if params[:name].blank?
  %h2
    Please select a message from
    %a{href: 'list'} this list
- else
  = view :breadcrumbs, trail: [{text: 'Poste', url: './'}, {text: 'Messages', url: 'list'}, {text: params[:name]}]

  :ruby
    POSTE_REPORTING_DB_READONLY = sequel_connect(CDO.pegasus_reporting_db_reader, CDO.pegasus_reporting_db_reader)
    message_id = POSTE_REPORTING_DB_READONLY[:poste_messages].where(name: params[:name]).first[:id]

    sent_count = POSTE_REPORTING_DB_READONLY[:poste_deliveries].where(message_id: message_id).count

    opens_count = POSTE_REPORTING_DB_READONLY.fetch("
      SELECT poste_opens.id
      FROM poste_opens
      INNER JOIN poste_deliveries ON poste_opens.delivery_id = poste_deliveries.id
      WHERE poste_deliveries.message_id = #{message_id}
     ").count

    unique_opens_count = POSTE_REPORTING_DB_READONLY.fetch("
      SELECT DISTINCT poste_deliveries.id
      FROM poste_deliveries
      LEFT JOIN poste_opens ON poste_opens.delivery_id = poste_deliveries.id
      WHERE poste_deliveries.message_id = #{message_id} and poste_opens.id is not null
     ").count

    clicks_count = POSTE_REPORTING_DB_READONLY[:poste_clicks].where(message_id: message_id).count

    unique_clicks_count = POSTE_REPORTING_DB_READONLY.fetch("
      SELECT DISTINCT delivery_id
      FROM poste_clicks where message_id = #{message_id}
     ").count

     first_sent_message = POSTE_REPORTING_DB_READONLY[:poste_deliveries].where(message_id: message_id).order(:id).first
     last_sent_message = POSTE_REPORTING_DB_READONLY[:poste_deliveries].where(message_id: message_id).order(:id).last
     if first_sent_message && last_sent_message
       message_sent_dates = [first_sent_message[:created_at], last_sent_message[:created_at]]
     end
  %h2
    = params[:name]
    %a{href: "https://raw.githubusercontent.com/code-dot-org/code-dot-org/production/pegasus/emails/#{params[:name]}.md", target: '_blank'}
      [Content]
  - if message_sent_dates
    %h3 Sent between #{message_sent_dates.first} and #{message_sent_dates.last}
  %table
    %tr
      %th
      %th count
      %th % of sent
      %th % of unique opens
    %tr
      %td Sent
      %td= sent_count
      %td
      %td
    %tr
      %td
        Total Opens
        %em (the number of times any instance of this message was opened)
      %td= opens_count
      %td
      %td
    %tr
      %td
        Unique opens
        %em (the number of messages of this type that were opened)
      %td= unique_opens_count
      %td
        = (100.0 * unique_opens_count / sent_count).round(2)
        \%
      %td
    %tr
      %td
        Total Clicks
        %em (the total number of clicks on any link on any message)
      %td= clicks_count
      %td
      %td
    %tr
      %td
        Unique Clicks
        %em (the total number of messages in which any link was clicked on)
      %td= unique_clicks_count
      %td
        = (100.0 * unique_clicks_count / sent_count).round(2)
        \%
      %td
        = (100.0 * unique_clicks_count / unique_opens_count).round(2)
        \%

  :ruby
    click_rows = POSTE_REPORTING_DB_READONLY.fetch("
    SELECT
      poste_urls.url as url,
      COUNT(poste_clicks.id) as clicks,
      COUNT(DISTINCT poste_clicks.delivery_id) as unique_clicks
    FROM poste_clicks
    LEFT JOIN poste_urls ON poste_urls.id = poste_clicks.url_id
    WHERE poste_clicks.message_id = #{message_id}
    GROUP BY poste_clicks.url_id
    ")

  %h2 Click details
  %table
    %tr
      %th Link
      %th Clicks
      %th Unique Clicks
      %th CTR / sent
      %th CTR / opens
    - click_rows.each do |row|
      %tr
        %td
          .truncate
            %a{href: row[:url]}= row[:url]
        %td= row[:clicks]
        %td= row[:unique_clicks]
        %td
          = (100.0 * row[:unique_clicks] / sent_count).round(2)
          \%
        %td
          = (100.0 * row[:unique_clicks] / unique_opens_count).round(2)
          \%
