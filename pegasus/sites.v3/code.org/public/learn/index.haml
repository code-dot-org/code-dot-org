---
title: Learn
theme: responsive_wide
layout: wide
social:
  twitter:card: photo
  twitter:site: "@codeorg"
  og:image:width: '1200'
  og:image:height: '630'
style_min: false
---
:ruby
  @header["social"]["twitter:url"] = "https://#{request.host}/learn"
  @header["social"]["twitter:title"] = hoc_s(:hour_of_code)
  @header["social"]["twitter:description"] = hoc_s(:social_hoc2018_global_movement)
  @header["social"]["twitter:image:src"] = 'https://' + request.host + '/images/social-media/hoc-2018-creativity.png'
  @header["social"]["og:title"] = hoc_s(:hour_of_code)
  @header["social"]["og:description"] = hoc_s(:social_hoc2018_global_movement)
  @header["social"]["og:image"] = 'https://' + request.host + '/images/social-media/hoc-2018-creativity.png'

  hoc_mode = DCDO.get("hoc_mode", CDO.default_hoc_mode)

%link{href: "/css/generated/learn-banner.css", rel: "stylesheet", type: "text/css"}

#fullwidth
  - if request.site == 'code.org'
    = view :header
  - else
    #desktop-header.desktop-feature
      = view :header, variant: "desktop"
    #mobile-header.mobile-headers.mobile-feature
      - if request.site == 'csedweek.org'
        = view :mobile_header_responsive
      - else
        = view :mobile_header_responsive

  - if ["pre-hoc", "soon-hoc", "actual-hoc", "post-hoc"].include?(hoc_mode)
    %section.banner
      .wrapper
        %h1= hoc_s(:learn_banner_heading)
        %h2= hoc_s(:learn_banner_blurb)
        %p!= hoc_s(:learn_banner_beyond_markdown, markdown: :inline, locals: {url: "https://hourofcode.com/beyond"})
        %p
          %i{:class=>"fa fa-graduation-cap", :style=>"font-size: larger"}
          != hoc_s(:learn_banner_teachers_markdown, markdown: :inline, locals: {host_url: "https://hourofcode.com/#join", howto_url: "https://hourofcode.com/how-to"})

  - else
    %section.banner
      .wrapper
        %h1= hoc_s(:learn_banner_heading)
        %h2= hoc_s(:learn_banner_blurb)
        %p!= hoc_s(:learn_banner_beyond_markdown, markdown: :inline, locals: {url: "https://hourofcode.com/beyond"})
        %p
          %i{:class=>"fa fa-graduation-cap", :style=>"font-size: larger"}
          != hoc_s(:learn_banner_teachers_markdown, markdown: :inline, locals: {host_url: "https://hourofcode.com/#join", howto_url: "https://hourofcode.com/how-to"})

-# Not ideal but we can pull the undigested files from /blockly.
- js_locale = request.locale.to_s.downcase.tr('-', '_')
%script{src: webpack_asset_path("js/#{js_locale}/tutorialExplorer_locale.js")}
%script{src: webpack_asset_path("js/tutorialExplorer.js")}

- tutorial_sheet_id = request.params["preview"] ? :tutorials_preview : :tutorials
- no_cache = !!request.params["preview"]
- tutorials_contents = Tutorials.new(tutorial_sheet_id, no_cache).contents(request.host_with_port)

- tutorials_contents.each do |tutorial|
  - tutorial[:contact] = nil
  - prefix = "tutorial_#{tutorial[:short_code]}_"
  -# Unless showing a preview, look up localized versions of strings.
  - unless request.params["preview"]
    - tutorial[:name]                                 = hoc_s(prefix + "name")
    - tutorial[:shortdescription]                     = hoc_s(prefix + "shortdescription")
    - tutorial[:longdescription]                      = hoc_s(prefix + "longdescription")
    - tutorial[:language]                             = hoc_language(tutorial[:languages_supported])
    - tutorial[:string_detail_grades]                 = hoc_s(prefix + "string_detail_grades")
    - tutorial[:string_platforms]                     = hoc_s(prefix + "string_platforms")
    - tutorial[:string_detail_platforms]              = hoc_s(prefix + "string_detail_platforms")
    - tutorial[:string_detail_programming_languages]  = hoc_s(prefix + "string_detail_programming_languages")
  - tutorial[:teachers_notes]                       = CDO.curriculum_url(request.locale, tutorial[:teachers_notes], false)

#tutorials

:javascript

  $(document).ready(function() {
    // Send through some values that the JavaScript will need.
    var tutorialExplorerManager = new window.TutorialExplorerManager({
      tutorials: #{tutorials_contents.to_json.html_safe},
      locale: "#{request.locale}",
      roboticsButtonUrl: "/learn/robotics",
      showSortDropdown: #{DCDO.get('learn_show_sort_dropdown', true)},
      disabledTutorials: #{raw DCDO.get('learn_hide_tutorials', [])},
      defaultSortByPopularity: #{Tutorials.sort_by_popularity?(request.site, DCDO.get("hoc_mode", CDO.default_hoc_mode))}
    });
    tutorialExplorerManager.renderToElement(document.getElementById('tutorials'));

    // Open banner links in new tab; we render them with markdown, so we can't do this in the haml
    // Add the rel tag to attempt to mitigate the inherent danger in opening
    // links in a new tab; will only work for modern browsers, though.
    $(".banner a").attr({target: "_blank", rel: "noopener noreferrer nofollow"});

    // Set up google analytics tracking
    $('.bannerTeachers a[href$="join"]').click(function () {
      ga('send', 'event', 'learn', 'click', 'teacher_banner_host');
    });
    $('.bannerTeachers a[href$="how-to"]').click(function () {
      ga('send', 'event', 'learn', 'click', 'teacher_banner_howto');
    });

    $(".bannerTeachers").fadeTo('slow', 1);
  });
